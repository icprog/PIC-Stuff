

Microchip Technology PIC LITE Macro Assembler V1.38 build -256452561 
                                                                                               Wed Aug 30 14:28:00 2017

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	16F720
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	strings,global,class=STRING,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	inittext,global,class=CODE,delta=2
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2
    26                           	psect	text12,local,class=CODE,merge=1,delta=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2
    28                           	psect	text14,local,class=CODE,merge=1,delta=2
    29                           	psect	intentry,global,class=CODE,delta=2
    30                           	dabs	1,0x7E,2
    31  0000                     	;# 
    32  0001                     	;# 
    33  0002                     	;# 
    34  0003                     	;# 
    35  0004                     	;# 
    36  0005                     	;# 
    37  0006                     	;# 
    38  0007                     	;# 
    39  000A                     	;# 
    40  000B                     	;# 
    41  000C                     	;# 
    42  000E                     	;# 
    43  000E                     	;# 
    44  000F                     	;# 
    45  0010                     	;# 
    46  0011                     	;# 
    47  0012                     	;# 
    48  0013                     	;# 
    49  0014                     	;# 
    50  0015                     	;# 
    51  0015                     	;# 
    52  0016                     	;# 
    53  0017                     	;# 
    54  0018                     	;# 
    55  0019                     	;# 
    56  001A                     	;# 
    57  001E                     	;# 
    58  001F                     	;# 
    59  0081                     	;# 
    60  0085                     	;# 
    61  0086                     	;# 
    62  0087                     	;# 
    63  008C                     	;# 
    64  008E                     	;# 
    65  008F                     	;# 
    66  0090                     	;# 
    67  0091                     	;# 
    68  0092                     	;# 
    69  0093                     	;# 
    70  0093                     	;# 
    71  0094                     	;# 
    72  0095                     	;# 
    73  0096                     	;# 
    74  0098                     	;# 
    75  0099                     	;# 
    76  009D                     	;# 
    77  009F                     	;# 
    78  010C                     	;# 
    79  010D                     	;# 
    80  010E                     	;# 
    81  010F                     	;# 
    82  0115                     	;# 
    83  0116                     	;# 
    84  0185                     	;# 
    85  0186                     	;# 
    86  0187                     	;# 
    87  018C                     	;# 
    88  018D                     	;# 
    89  0000                     	;# 
    90  0001                     	;# 
    91  0002                     	;# 
    92  0003                     	;# 
    93  0004                     	;# 
    94  0005                     	;# 
    95  0006                     	;# 
    96  0007                     	;# 
    97  000A                     	;# 
    98  000B                     	;# 
    99  000C                     	;# 
   100  000E                     	;# 
   101  000E                     	;# 
   102  000F                     	;# 
   103  0010                     	;# 
   104  0011                     	;# 
   105  0012                     	;# 
   106  0013                     	;# 
   107  0014                     	;# 
   108  0015                     	;# 
   109  0015                     	;# 
   110  0016                     	;# 
   111  0017                     	;# 
   112  0018                     	;# 
   113  0019                     	;# 
   114  001A                     	;# 
   115  001E                     	;# 
   116  001F                     	;# 
   117  0081                     	;# 
   118  0085                     	;# 
   119  0086                     	;# 
   120  0087                     	;# 
   121  008C                     	;# 
   122  008E                     	;# 
   123  008F                     	;# 
   124  0090                     	;# 
   125  0091                     	;# 
   126  0092                     	;# 
   127  0093                     	;# 
   128  0093                     	;# 
   129  0094                     	;# 
   130  0095                     	;# 
   131  0096                     	;# 
   132  0098                     	;# 
   133  0099                     	;# 
   134  009D                     	;# 
   135  009F                     	;# 
   136  010C                     	;# 
   137  010D                     	;# 
   138  010E                     	;# 
   139  010F                     	;# 
   140  0115                     	;# 
   141  0116                     	;# 
   142  0185                     	;# 
   143  0186                     	;# 
   144  0187                     	;# 
   145  018C                     	;# 
   146  018D                     	;# 
   147  0000                     	;# 
   148  0001                     	;# 
   149  0002                     	;# 
   150  0003                     	;# 
   151  0004                     	;# 
   152  0005                     	;# 
   153  0006                     	;# 
   154  0007                     	;# 
   155  000A                     	;# 
   156  000B                     	;# 
   157  000C                     	;# 
   158  000E                     	;# 
   159  000E                     	;# 
   160  000F                     	;# 
   161  0010                     	;# 
   162  0011                     	;# 
   163  0012                     	;# 
   164  0013                     	;# 
   165  0014                     	;# 
   166  0015                     	;# 
   167  0015                     	;# 
   168  0016                     	;# 
   169  0017                     	;# 
   170  0018                     	;# 
   171  0019                     	;# 
   172  001A                     	;# 
   173  001E                     	;# 
   174  001F                     	;# 
   175  0081                     	;# 
   176  0085                     	;# 
   177  0086                     	;# 
   178  0087                     	;# 
   179  008C                     	;# 
   180  008E                     	;# 
   181  008F                     	;# 
   182  0090                     	;# 
   183  0091                     	;# 
   184  0092                     	;# 
   185  0093                     	;# 
   186  0093                     	;# 
   187  0094                     	;# 
   188  0095                     	;# 
   189  0096                     	;# 
   190  0098                     	;# 
   191  0099                     	;# 
   192  009D                     	;# 
   193  009F                     	;# 
   194  010C                     	;# 
   195  010D                     	;# 
   196  010E                     	;# 
   197  010F                     	;# 
   198  0115                     	;# 
   199  0116                     	;# 
   200  0185                     	;# 
   201  0186                     	;# 
   202  0187                     	;# 
   203  018C                     	;# 
   204  018D                     	;# 
   205  0000                     	;# 
   206  0001                     	;# 
   207  0002                     	;# 
   208  0003                     	;# 
   209  0004                     	;# 
   210  0005                     	;# 
   211  0006                     	;# 
   212  0007                     	;# 
   213  000A                     	;# 
   214  000B                     	;# 
   215  000C                     	;# 
   216  000E                     	;# 
   217  000E                     	;# 
   218  000F                     	;# 
   219  0010                     	;# 
   220  0011                     	;# 
   221  0012                     	;# 
   222  0013                     	;# 
   223  0014                     	;# 
   224  0015                     	;# 
   225  0015                     	;# 
   226  0016                     	;# 
   227  0017                     	;# 
   228  0018                     	;# 
   229  0019                     	;# 
   230  001A                     	;# 
   231  001E                     	;# 
   232  001F                     	;# 
   233  0081                     	;# 
   234  0085                     	;# 
   235  0086                     	;# 
   236  0087                     	;# 
   237  008C                     	;# 
   238  008E                     	;# 
   239  008F                     	;# 
   240  0090                     	;# 
   241  0091                     	;# 
   242  0092                     	;# 
   243  0093                     	;# 
   244  0093                     	;# 
   245  0094                     	;# 
   246  0095                     	;# 
   247  0096                     	;# 
   248  0098                     	;# 
   249  0099                     	;# 
   250  009D                     	;# 
   251  009F                     	;# 
   252  010C                     	;# 
   253  010D                     	;# 
   254  010E                     	;# 
   255  010F                     	;# 
   256  0115                     	;# 
   257  0116                     	;# 
   258  0185                     	;# 
   259  0186                     	;# 
   260  0187                     	;# 
   261  018C                     	;# 
   262  018D                     	;# 
   263  0000                     	;# 
   264  0001                     	;# 
   265  0002                     	;# 
   266  0003                     	;# 
   267  0004                     	;# 
   268  0005                     	;# 
   269  0006                     	;# 
   270  0007                     	;# 
   271  000A                     	;# 
   272  000B                     	;# 
   273  000C                     	;# 
   274  000E                     	;# 
   275  000E                     	;# 
   276  000F                     	;# 
   277  0010                     	;# 
   278  0011                     	;# 
   279  0012                     	;# 
   280  0013                     	;# 
   281  0014                     	;# 
   282  0015                     	;# 
   283  0015                     	;# 
   284  0016                     	;# 
   285  0017                     	;# 
   286  0018                     	;# 
   287  0019                     	;# 
   288  001A                     	;# 
   289  001E                     	;# 
   290  001F                     	;# 
   291  0081                     	;# 
   292  0085                     	;# 
   293  0086                     	;# 
   294  0087                     	;# 
   295  008C                     	;# 
   296  008E                     	;# 
   297  008F                     	;# 
   298  0090                     	;# 
   299  0091                     	;# 
   300  0092                     	;# 
   301  0093                     	;# 
   302  0093                     	;# 
   303  0094                     	;# 
   304  0095                     	;# 
   305  0096                     	;# 
   306  0098                     	;# 
   307  0099                     	;# 
   308  009D                     	;# 
   309  009F                     	;# 
   310  010C                     	;# 
   311  010D                     	;# 
   312  010E                     	;# 
   313  010F                     	;# 
   314  0115                     	;# 
   315  0116                     	;# 
   316  0185                     	;# 
   317  0186                     	;# 
   318  0187                     	;# 
   319  018C                     	;# 
   320  018D                     	;# 
   321  0000                     	;# 
   322  0001                     	;# 
   323  0002                     	;# 
   324  0003                     	;# 
   325  0004                     	;# 
   326  0005                     	;# 
   327  0006                     	;# 
   328  0007                     	;# 
   329  000A                     	;# 
   330  000B                     	;# 
   331  000C                     	;# 
   332  000E                     	;# 
   333  000E                     	;# 
   334  000F                     	;# 
   335  0010                     	;# 
   336  0011                     	;# 
   337  0012                     	;# 
   338  0013                     	;# 
   339  0014                     	;# 
   340  0015                     	;# 
   341  0015                     	;# 
   342  0016                     	;# 
   343  0017                     	;# 
   344  0018                     	;# 
   345  0019                     	;# 
   346  001A                     	;# 
   347  001E                     	;# 
   348  001F                     	;# 
   349  0081                     	;# 
   350  0085                     	;# 
   351  0086                     	;# 
   352  0087                     	;# 
   353  008C                     	;# 
   354  008E                     	;# 
   355  008F                     	;# 
   356  0090                     	;# 
   357  0091                     	;# 
   358  0092                     	;# 
   359  0093                     	;# 
   360  0093                     	;# 
   361  0094                     	;# 
   362  0095                     	;# 
   363  0096                     	;# 
   364  0098                     	;# 
   365  0099                     	;# 
   366  009D                     	;# 
   367  009F                     	;# 
   368  010C                     	;# 
   369  010D                     	;# 
   370  010E                     	;# 
   371  010F                     	;# 
   372  0115                     	;# 
   373  0116                     	;# 
   374  0185                     	;# 
   375  0186                     	;# 
   376  0187                     	;# 
   377  018C                     	;# 
   378  018D                     	;# 
   379                           
   380                           	psect	idataBANK0
   381  04DF                     __pidataBANK0:	
   382                           
   383                           ;initializer for _output
   384  04DF  34FF               	retlw	255
   385                           
   386                           	psect	idataBANK1
   387  0475                     __pidataBANK1:	
   388                           
   389                           ;initializer for ___cgram
   390  0475  340C               	retlw	12
   391  0476  3412               	retlw	18
   392  0477  3412               	retlw	18
   393  0478  340C               	retlw	12
   394  0479  3400               	retlw	0
   395  047A  3400               	retlw	0
   396  047B  3400               	retlw	0
   397  047C  3400               	retlw	0
   398  047D  340A               	retlw	10
   399  047E  3415               	retlw	21
   400  047F  3411               	retlw	17
   401  0480  340A               	retlw	10
   402  0481  3404               	retlw	4
   403  0482  3400               	retlw	0
   404  0483  3400               	retlw	0
   405  0484  3400               	retlw	0
   406  0485  340A               	retlw	10
   407  0486  341F               	retlw	31
   408  0487  341F               	retlw	31
   409  0488  340E               	retlw	14
   410  0489  3404               	retlw	4
   411  048A  3400               	retlw	0
   412  048B  3400               	retlw	0
   413  048C  3400               	retlw	0
   414  001F                     _ADCON0	set	31
   415  001E                     _ADRES	set	30
   416  0017                     _CCP1CON	set	23
   417  0017                     _CCP1CONbits	set	23
   418  0015                     _CCPR1L	set	21
   419  000B                     _INTCONbits	set	11
   420  000C                     _PIR1bits	set	12
   421  0005                     _PORTA	set	5
   422  0006                     _PORTB	set	6
   423  0007                     _PORTCbits	set	7
   424  0010                     _T1CON	set	16
   425  0010                     _T1CONbits	set	16
   426  0012                     _T2CONbits	set	18
   427  0001                     _TMR0	set	1
   428  000F                     _TMR1H	set	15
   429  000E                     _TMR1L	set	14
   430  00F8                     _ADON	set	248
   431  00F9                     _GO_nDONE	set	249
   432  003A                     _RC2	set	58
   433  003B                     _RC3	set	59
   434  003C                     _RC4	set	60
   435  003D                     _RC5	set	61
   436  003E                     _RC6	set	62
   437  003F                     _RC7	set	63
   438  009F                     _ADCON1	set	159
   439  009D                     _FVRCON	set	157
   440  008C                     _PIE1bits	set	140
   441  0092                     _PR2	set	146
   442  0085                     _TRISA	set	133
   443  0086                     _TRISB	set	134
   444  0087                     _TRISC	set	135
   445  0087                     _TRISCbits	set	135
   446  0484                     _IRCF0	set	1156
   447  0485                     _IRCF1	set	1157
   448  0408                     _PS0	set	1032
   449  0409                     _PS1	set	1033
   450  040A                     _PS2	set	1034
   451  040B                     _PSA	set	1035
   452  040D                     _T0CS	set	1037
   453  040C                     _T0SE	set	1036
   454  0185                     _ANSELA	set	389
   455  0186                     _ANSELB	set	390
   456  0187                     _ANSELC	set	391
   457                           
   458                           	psect	strings
   459  04B8                     __pstrings:	
   460  04B8                     stringtab:	
   461  04B8                     __stringtab:	
   462  04B8                     stringcode:	
   463                           ;	String table - string pointers are 1 byte each
   464                           
   465  04B8                     stringdir:	
   466  04B8  3004               	movlw	high stringdir
   467  04B9  008A               	movwf	10
   468  04BA  0804               	movf	4,w
   469  04BB  0A84               	incf	4,f
   470  04BC  0782               	addwf	2,f
   471  04BD                     __stringbase:	
   472  04BD  3400               	retlw	0
   473  04BE                     __end_of__stringtab:	
   474  04BE                     STR_1:	
   475  04BE  3450               	retlw	80	;'P'
   476  04BF  3457               	retlw	87	;'W'
   477  04C0  344D               	retlw	77	;'M'
   478  04C1  343D               	retlw	61	;'='
   479  04C2  3400               	retlw	0
   480  04C3                     STR_2:	
   481  04C3  344F               	retlw	79	;'O'
   482  04C4  3450               	retlw	80	;'P'
   483  04C5  343D               	retlw	61	;'='
   484  04C6  3400               	retlw	0
   485  04C7                     STR_3:	
   486  04C7  344D               	retlw	77	;'M'
   487  04C8  3456               	retlw	86	;'V'
   488  04C9  343D               	retlw	61	;'='
   489  04CA  3400               	retlw	0
   490                           
   491                           ; #config settings
   492  0000                     
   493                           	psect	cinit
   494  0011                     start_initialization:	
   495  0011                     __initialization:	
   496                           
   497                           ; Initialize objects allocated to BANK1
   498  0011  1383               	bcf	3,7	;select IRP bank0
   499  0012  30B8               	movlw	low (__pdataBANK1+24)
   500  0013  00FD               	movwf	btemp+-1
   501  0014  3004               	movlw	high __pidataBANK1
   502  0015  00FE               	movwf	btemp
   503  0016  3075               	movlw	low __pidataBANK1
   504  0017  00FF               	movwf	btemp+1
   505  0018  30A0               	movlw	low __pdataBANK1
   506  0019  0084               	movwf	4
   507  001A  24CF               	fcall	init_ram0
   508                           
   509                           ; Initialize objects allocated to BANK0
   510  001B  24DF               	fcall	__pidataBANK0	;fetch initializer
   511  001C  00EF               	movwf	__pdataBANK0& (0+127)
   512                           
   513                           ; Clear objects allocated to BANK0
   514  001D  01EA               	clrf	__pbssBANK0& (0+127)
   515  001E  01EB               	clrf	(__pbssBANK0+1)& (0+127)
   516  001F  01EC               	clrf	(__pbssBANK0+2)& (0+127)
   517  0020  01ED               	clrf	(__pbssBANK0+3)& (0+127)
   518  0021  01EE               	clrf	(__pbssBANK0+4)& (0+127)
   519  0022                     end_of_initialization:	
   520                           ;End of C runtime variable initialization code
   521                           
   522  0022                     __end_of__initialization:	
   523  0022  0183               	clrf	3
   524  0023  2824               	ljmp	_main	;jump to C main() function
   525                           
   526                           	psect	bssBANK0
   527  006A                     __pbssBANK0:	
   528  006A                     LCD_Write_Int@F1081:	
   529  006A                     	ds	5
   530                           
   531                           	psect	dataBANK0
   532  006F                     __pdataBANK0:	
   533  006F                     _output:	
   534  006F                     	ds	1
   535                           
   536                           	psect	dataBANK1
   537  00A0                     __pdataBANK1:	
   538  00A0                     ___cgram:	
   539  00A0                     	ds	24
   540                           
   541                           	psect	inittext
   542  04CB                     init_fetch0:	
   543                           ;	Called with low address in FSR and high address in W
   544                           
   545  04CB  087E               	movf	126,w
   546  04CC  008A               	movwf	10
   547  04CD  087F               	movf	127,w
   548  04CE  0082               	movwf	2
   549  04CF                     init_ram0:	
   550                           ;Called with:
   551                           ;	high address of idata address in btemp 
   552                           ;	low address of idata address in btemp+1 
   553                           ;	low address of data in FSR
   554                           ;	high address + 1 of data in btemp-1
   555                           
   556  04CF  24CB               	fcall	init_fetch0
   557  04D0  0080               	movwf	0
   558  04D1  0A84               	incf	4,f
   559  04D2  0804               	movf	4,w
   560  04D3  067D               	xorwf	125,w
   561  04D4  1903               	btfsc	3,2
   562  04D5  3400               	retlw	0
   563  04D6  0AFF               	incf	127,f
   564  04D7  1903               	btfsc	3,2
   565  04D8  0AFE               	incf	126,f
   566  04D9  2CCF               	goto	init_ram0
   567                           
   568                           	psect	cstackCOMMON
   569  0070                     __pcstackCOMMON:	
   570  0070                     ?_LCD_Init:	
   571  0070                     ?_LCD_Clear:	
   572                           ; 1 bytes @ 0x0
   573                           
   574  0070                     ?_LCD_Write_String:	
   575                           ; 1 bytes @ 0x0
   576                           
   577  0070                     ?_LCD_Cmd:	
   578                           ; 1 bytes @ 0x0
   579                           
   580  0070                     ?_LCD_Write_Char:	
   581                           ; 1 bytes @ 0x0
   582                           
   583  0070                     ?_Init:	
   584                           ; 1 bytes @ 0x0
   585                           
   586  0070                     ?_ADCRead:	
   587                           ; 1 bytes @ 0x0
   588                           
   589  0070                     ?_int_routine:	
   590                           ; 1 bytes @ 0x0
   591                           
   592  0070                     ??_int_routine:	
   593                           ; 1 bytes @ 0x0
   594                           
   595  0070                     ?_main:	
   596                           ; 1 bytes @ 0x0
   597                           
   598  0070                     ?_LCD_Port:	
   599                           ; 1 bytes @ 0x0
   600                           
   601                           
   602                           ; 1 bytes @ 0x0
   603  0070                     	ds	4
   604  0074                     ??_Init:	
   605  0074                     ??_ADCRead:	
   606                           ; 1 bytes @ 0x4
   607                           
   608  0074                     ??_LCD_Port:	
   609                           ; 1 bytes @ 0x4
   610                           
   611  0074                     ?___awmod:	
   612                           ; 1 bytes @ 0x4
   613                           
   614  0074                     ?___lwdiv:	
   615                           ; 2 bytes @ 0x4
   616                           
   617  0074                     LCD_Port@a:	
   618                           ; 2 bytes @ 0x4
   619                           
   620  0074                     ___awmod@divisor:	
   621                           ; 1 bytes @ 0x4
   622                           
   623  0074                     ___lwdiv@divisor:	
   624                           ; 2 bytes @ 0x4
   625                           
   626                           
   627                           ; 2 bytes @ 0x4
   628  0074                     	ds	1
   629  0075                     ??_LCD_Cmd:	
   630  0075                     ??_LCD_Write_Char:	
   631                           ; 1 bytes @ 0x5
   632                           
   633  0075                     ADCRead@ch:	
   634                           ; 1 bytes @ 0x5
   635                           
   636                           
   637                           ; 1 bytes @ 0x5
   638  0075                     	ds	1
   639  0076                     ?___awdiv:	
   640  0076                     LCD_Write_Char@temp:	
   641                           ; 2 bytes @ 0x6
   642                           
   643  0076                     ___awdiv@divisor:	
   644                           ; 1 bytes @ 0x6
   645                           
   646  0076                     ___awmod@dividend:	
   647                           ; 2 bytes @ 0x6
   648                           
   649  0076                     ___lwdiv@dividend:	
   650                           ; 2 bytes @ 0x6
   651                           
   652                           
   653                           ; 2 bytes @ 0x6
   654  0076                     	ds	1
   655  0077                     LCD_Cmd@a:	
   656  0077                     LCD_Write_Char@y:	
   657                           ; 1 bytes @ 0x7
   658                           
   659                           
   660                           ; 1 bytes @ 0x7
   661  0077                     	ds	1
   662  0078                     ??_LCD_Init:	
   663  0078                     ??_LCD_Clear:	
   664                           ; 1 bytes @ 0x8
   665                           
   666  0078                     ?_LCD_Set_Cursor:	
   667                           ; 1 bytes @ 0x8
   668                           
   669  0078                     ??___awmod:	
   670                           ; 1 bytes @ 0x8
   671                           
   672  0078                     ??___lwdiv:	
   673                           ; 1 bytes @ 0x8
   674                           
   675  0078                     LCD_Set_Cursor@y:	
   676                           ; 1 bytes @ 0x8
   677                           
   678  0078                     LCD_Write_Char@a:	
   679                           ; 1 bytes @ 0x8
   680                           
   681  0078                     ___awdiv@dividend:	
   682                           ; 1 bytes @ 0x8
   683                           
   684                           
   685                           ; 2 bytes @ 0x8
   686  0078                     	ds	1
   687  0079                     ??_LCD_Write_String:	
   688                           
   689                           ; 1 bytes @ 0x9
   690  0079                     	ds	1
   691                           
   692                           	psect	cstackBANK0
   693  0020                     __pcstackBANK0:	
   694  0020                     ??_LCD_Set_Cursor:	
   695  0020                     ??___awdiv:	
   696                           ; 1 bytes @ 0x0
   697                           
   698  0020                     LCD_Init@style:	
   699                           ; 1 bytes @ 0x0
   700                           
   701  0020                     LCD_Write_String@i:	
   702                           ; 1 bytes @ 0x0
   703                           
   704  0020                     ___awmod@counter:	
   705                           ; 1 bytes @ 0x0
   706                           
   707  0020                     ___lwdiv@quotient:	
   708                           ; 1 bytes @ 0x0
   709                           
   710                           
   711                           ; 2 bytes @ 0x0
   712  0020                     	ds	1
   713  0021                     LCD_Write_String@a:	
   714  0021                     ___awdiv@counter:	
   715                           ; 1 bytes @ 0x1
   716                           
   717  0021                     ___awmod@sign:	
   718                           ; 1 bytes @ 0x1
   719                           
   720                           
   721                           ; 1 bytes @ 0x1
   722  0021                     	ds	1
   723  0022                     LCD_Set_Cursor@x:	
   724  0022                     ___awdiv@sign:	
   725                           ; 1 bytes @ 0x2
   726                           
   727  0022                     ___lwdiv@counter:	
   728                           ; 1 bytes @ 0x2
   729                           
   730                           
   731                           ; 1 bytes @ 0x2
   732  0022                     	ds	1
   733  0023                     LCD_Set_Cursor@z:	
   734  0023                     ___awdiv@quotient:	
   735                           ; 1 bytes @ 0x3
   736                           
   737                           
   738                           ; 2 bytes @ 0x3
   739  0023                     	ds	1
   740  0024                     LCD_Set_Cursor@w:	
   741                           
   742                           ; 1 bytes @ 0x4
   743  0024                     	ds	1
   744  0025                     ?_LCD_Write_Int:	
   745  0025                     LCD_Set_Cursor@temp:	
   746                           ; 1 bytes @ 0x5
   747                           
   748  0025                     LCD_Write_Int@value:	
   749                           ; 1 bytes @ 0x5
   750                           
   751                           
   752                           ; 2 bytes @ 0x5
   753  0025                     	ds	2
   754  0027                     LCD_Write_Int@fieldLength:	
   755                           
   756                           ; 1 bytes @ 0x7
   757  0027                     	ds	1
   758  0028                     LCD_Write_Int@numPlaces:	
   759                           
   760                           ; 1 bytes @ 0x8
   761  0028                     	ds	1
   762  0029                     LCD_Write_Int@sign:	
   763                           
   764                           ; 1 bytes @ 0x9
   765  0029                     	ds	1
   766  002A                     ??_LCD_Write_Int:	
   767                           
   768                           ; 1 bytes @ 0xA
   769  002A                     	ds	5
   770  002F                     LCD_Write_Int@str:	
   771                           
   772                           ; 5 bytes @ 0xF
   773  002F                     	ds	5
   774  0034                     LCD_Write_Int@j:	
   775                           
   776                           ; 2 bytes @ 0x14
   777  0034                     	ds	2
   778  0036                     LCD_Write_Int@i:	
   779                           
   780                           ; 2 bytes @ 0x16
   781  0036                     	ds	2
   782  0038                     ??_main:	
   783                           
   784                           ; 1 bytes @ 0x18
   785  0038                     	ds	3
   786  003B                     main@samples:	
   787                           
   788                           ; 40 bytes @ 0x1B
   789  003B                     	ds	40
   790  0063                     main@tempReadTemperature:	
   791                           
   792                           ; 1 bytes @ 0x43
   793  0063                     	ds	1
   794  0064                     main@x:	
   795                           
   796                           ; 1 bytes @ 0x44
   797  0064                     	ds	1
   798  0065                     main@total:	
   799                           
   800                           ; 2 bytes @ 0x45
   801  0065                     	ds	2
   802  0067                     main@setpoint:	
   803                           
   804                           ; 1 bytes @ 0x47
   805  0067                     	ds	1
   806  0068                     main@readTemperature:	
   807                           
   808                           ; 1 bytes @ 0x48
   809  0068                     	ds	1
   810  0069                     main@sampleIndex:	
   811                           
   812                           ; 1 bytes @ 0x49
   813  0069                     	ds	1
   814                           
   815                           	psect	maintext
   816  0024                     __pmaintext:	
   817 ;;
   818 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   819 ;;
   820 ;; *************** function _main *****************
   821 ;; Defined at:
   822 ;;		line 12 in file "main.c"
   823 ;; Parameters:    Size  Location     Type
   824 ;;		None
   825 ;; Auto vars:     Size  Location     Type
   826 ;;  samples        40   27[BANK0 ] int [20]
   827 ;;  total           2   69[BANK0 ] unsigned int 
   828 ;;  sampleIndex     1   73[BANK0 ] unsigned char 
   829 ;;  readTemperat    1   72[BANK0 ] unsigned char 
   830 ;;  setpoint        1   71[BANK0 ] unsigned char 
   831 ;;  x               1   68[BANK0 ] unsigned char 
   832 ;;  tempReadTemp    1   67[BANK0 ] unsigned char 
   833 ;; Return value:  Size  Location     Type
   834 ;;                  1    wreg      void 
   835 ;; Registers used:
   836 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   837 ;; Tracked objects:
   838 ;;		On entry : B00/0
   839 ;;		On exit  : 0/0
   840 ;;		Unchanged: 0/0
   841 ;; Data sizes:     COMMON   BANK0   BANK1
   842 ;;      Params:         0       0       0
   843 ;;      Locals:         0      47       0
   844 ;;      Temps:          0       3       0
   845 ;;      Totals:         0      50       0
   846 ;;Total ram usage:       50 bytes
   847 ;; Hardware stack levels required when called:    4
   848 ;; This function calls:
   849 ;;		_ADCRead
   850 ;;		_Init
   851 ;;		_LCD_Clear
   852 ;;		_LCD_Init
   853 ;;		_LCD_Set_Cursor
   854 ;;		_LCD_Write_Int
   855 ;;		_LCD_Write_String
   856 ;;		___awdiv
   857 ;;		___lwdiv
   858 ;; This function is called by:
   859 ;;		Startup code after reset
   860 ;; This function uses a non-reentrant model
   861 ;;
   862                           
   863                           
   864                           ;psect for function _main
   865  0024                     _main:	
   866                           
   867                           ;main.c: 14: Init();
   868                           
   869                           ;incstack = 0
   870                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   871  0024  2379               	fcall	_Init
   872                           
   873                           ;main.c: 16: _delay((unsigned long)((250)*(4000000/4000.0)));
   874  0025  3002               	movlw	2
   875  0026  1283               	bcf	3,5	;RP0=0, select bank0
   876  0027  1303               	bcf	3,6	;RP1=0, select bank0
   877  0028  00BA               	movwf	??_main+2
   878  0029  3045               	movlw	69
   879  002A  00B9               	movwf	??_main+1
   880  002B  30A9               	movlw	169
   881  002C  00B8               	movwf	??_main
   882  002D                     u1177:	
   883  002D  0BB8               	decfsz	??_main,f
   884  002E  282D               	goto	u1177
   885  002F  0BB9               	decfsz	??_main+1,f
   886  0030  282D               	goto	u1177
   887  0031  0BBA               	decfsz	??_main+2,f
   888  0032  282D               	goto	u1177
   889  0033  2834               	nop2
   890                           
   891                           ;main.c: 18: LCD_Init(0);
   892  0034  3000               	movlw	0
   893  0035  222A               	fcall	_LCD_Init
   894                           
   895                           ;main.c: 20: LCD_Clear();
   896  0036  24DA               	fcall	_LCD_Clear
   897                           
   898                           ;main.c: 22: PORTCbits.RC0 = 1;
   899  0037  1283               	bcf	3,5	;RP0=0, select bank0
   900  0038  1303               	bcf	3,6	;RP1=0, select bank0
   901  0039  1407               	bsf	7,0	;volatile
   902                           
   903                           ;main.c: 26: unsigned char setpoint, readTemperature, tempReadTemperature;
   904                           ;main.c: 27: unsigned char x;
   905                           ;main.c: 28: unsigned int total;
   906                           ;main.c: 29: int samples[20];
   907                           ;main.c: 30: unsigned char sampleIndex = 0;
   908  003A  01E9               	clrf	main@sampleIndex
   909  003B                     l1398:	
   910                           ;main.c: 33: while(1)
   911                           
   912                           
   913                           ;main.c: 34: {
   914                           ;main.c: 35: tempReadTemperature = ADCRead(3);
   915  003B  3003               	movlw	3
   916  003C  243F               	fcall	_ADCRead
   917  003D  1283               	bcf	3,5	;RP0=0, select bank0
   918  003E  1303               	bcf	3,6	;RP1=0, select bank0
   919  003F  00B8               	movwf	??_main
   920  0040  0838               	movf	??_main,w
   921  0041  00E3               	movwf	main@tempReadTemperature
   922                           
   923                           ;main.c: 37: total = total - samples[sampleIndex];
   924  0042  0869               	movf	main@sampleIndex,w
   925  0043  00B8               	movwf	??_main
   926  0044  0738               	addwf	??_main,w
   927  0045  3E3B               	addlw	(low (main@samples| 0))& (0+255)
   928  0046  0084               	movwf	4
   929  0047  1383               	bcf	3,7	;select IRP bank0
   930  0048  0800               	movf	0,w
   931  0049  00B9               	movwf	??_main+1
   932  004A  0A84               	incf	4,f
   933  004B  0800               	movf	0,w
   934  004C  00BA               	movwf	??_main+2
   935  004D  09B9               	comf	??_main+1,f
   936  004E  09BA               	comf	??_main+2,f
   937  004F  0AB9               	incf	??_main+1,f
   938  0050  1903               	skipnz
   939  0051  0ABA               	incf	??_main+2,f
   940  0052  0865               	movf	main@total,w
   941  0053  0739               	addwf	??_main+1,w
   942  0054  00E5               	movwf	main@total
   943  0055  0866               	movf	main@total+1,w
   944  0056  1803               	skipnc
   945  0057  0A66               	incf	main@total+1,w
   946  0058  073A               	addwf	??_main+2,w
   947  0059  00E6               	movwf	main@total+1
   948                           
   949                           ;main.c: 39: samples[sampleIndex] = tempReadTemperature;
   950  005A  0863               	movf	main@tempReadTemperature,w
   951  005B  00B8               	movwf	??_main
   952  005C  01B9               	clrf	??_main+1
   953  005D  0869               	movf	main@sampleIndex,w
   954  005E  00BA               	movwf	??_main+2
   955  005F  073A               	addwf	??_main+2,w
   956  0060  3E3B               	addlw	(low (main@samples| 0))& (0+255)
   957  0061  0084               	movwf	4
   958  0062  0838               	movf	??_main,w
   959  0063  0080               	movwf	0
   960  0064  0A84               	incf	4,f
   961  0065  0839               	movf	??_main+1,w
   962  0066  0080               	movwf	0
   963                           
   964                           ;main.c: 41: total = total + samples[sampleIndex];
   965  0067  0869               	movf	main@sampleIndex,w
   966  0068  00B8               	movwf	??_main
   967  0069  0738               	addwf	??_main,w
   968  006A  3E3B               	addlw	(low (main@samples| 0))& (0+255)
   969  006B  0084               	movwf	4
   970  006C  0800               	movf	0,w
   971  006D  00B9               	movwf	??_main+1
   972  006E  0A84               	incf	4,f
   973  006F  0800               	movf	0,w
   974  0070  00BA               	movwf	??_main+2
   975  0071  0865               	movf	main@total,w
   976  0072  0739               	addwf	??_main+1,w
   977  0073  00E5               	movwf	main@total
   978  0074  0866               	movf	main@total+1,w
   979  0075  1803               	skipnc
   980  0076  0A66               	incf	main@total+1,w
   981  0077  073A               	addwf	??_main+2,w
   982  0078  00E6               	movwf	main@total+1
   983                           
   984                           ;main.c: 43: sampleIndex += 1;
   985  0079  3001               	movlw	1
   986  007A  00B8               	movwf	??_main
   987  007B  0838               	movf	??_main,w
   988  007C  07E9               	addwf	main@sampleIndex,f
   989                           
   990                           ;main.c: 45: if(sampleIndex >= 20)
   991  007D  3014               	movlw	20
   992  007E  0269               	subwf	main@sampleIndex,w
   993  007F  1803               	btfsc	3,0
   994                           
   995                           ;main.c: 46: {
   996                           ;main.c: 47: sampleIndex = 0;
   997  0080  01E9               	clrf	main@sampleIndex
   998                           
   999                           ;main.c: 48: }
  1000                           ;main.c: 50: readTemperature = total / 20;
  1001  0081  3014               	movlw	20
  1002  0082  00F4               	movwf	___lwdiv@divisor
  1003  0083  3000               	movlw	0
  1004  0084  00F5               	movwf	___lwdiv@divisor+1
  1005  0085  0866               	movf	main@total+1,w
  1006  0086  00F7               	movwf	___lwdiv@dividend+1
  1007  0087  0865               	movf	main@total,w
  1008  0088  00F6               	movwf	___lwdiv@dividend
  1009  0089  23B9               	fcall	___lwdiv
  1010  008A  0874               	movf	?___lwdiv,w
  1011  008B  1283               	bcf	3,5	;RP0=0, select bank0
  1012  008C  1303               	bcf	3,6	;RP1=0, select bank0
  1013  008D  00B8               	movwf	??_main
  1014  008E  0838               	movf	??_main,w
  1015  008F  00E8               	movwf	main@readTemperature
  1016                           
  1017                           ;main.c: 56: for(x = 0 ; x < 255 ; x++)
  1018  0090  01E4               	clrf	main@x
  1019  0091  0A64               	incf	main@x,w
  1020  0092  1903               	btfsc	3,2
  1021  0093  28B0               	goto	l1426
  1022  0094                     l1420:	
  1023                           
  1024                           ;main.c: 57: {
  1025                           ;main.c: 58: setpoint = (setpoint + ADCRead(2))/2;
  1026  0094  3002               	movlw	2
  1027  0095  00F6               	movwf	___awdiv@divisor
  1028  0096  3000               	movlw	0
  1029  0097  00F7               	movwf	___awdiv@divisor+1
  1030  0098  3002               	movlw	2
  1031  0099  243F               	fcall	_ADCRead
  1032  009A  1283               	bcf	3,5	;RP0=0, select bank0
  1033  009B  1303               	bcf	3,6	;RP1=0, select bank0
  1034  009C  00B8               	movwf	??_main
  1035  009D  0867               	movf	main@setpoint,w
  1036  009E  0738               	addwf	??_main,w
  1037  009F  00F8               	movwf	___awdiv@dividend
  1038  00A0  01F9               	clrf	___awdiv@dividend+1
  1039  00A1  0DF9               	rlf	___awdiv@dividend+1,f
  1040  00A2  228C               	fcall	___awdiv
  1041  00A3  0876               	movf	?___awdiv,w
  1042  00A4  1283               	bcf	3,5	;RP0=0, select bank0
  1043  00A5  1303               	bcf	3,6	;RP1=0, select bank0
  1044  00A6  00B9               	movwf	??_main+1
  1045  00A7  0839               	movf	??_main+1,w
  1046  00A8  00E7               	movwf	main@setpoint
  1047  00A9  3001               	movlw	1
  1048  00AA  00B8               	movwf	??_main
  1049  00AB  0838               	movf	??_main,w
  1050  00AC  07E4               	addwf	main@x,f
  1051  00AD  0A64               	incf	main@x,w
  1052  00AE  1D03               	btfss	3,2
  1053  00AF  2894               	goto	l1420
  1054  00B0                     l1426:	
  1055                           
  1056                           ;main.c: 59: }
  1057                           ;main.c: 61: _delay((unsigned long)((1000)*(4000000/4000.0)));
  1058  00B0  3006               	movlw	6
  1059  00B1  00BA               	movwf	??_main+2
  1060  00B2  3013               	movlw	19
  1061  00B3  00B9               	movwf	??_main+1
  1062  00B4  30B1               	movlw	177
  1063  00B5  00B8               	movwf	??_main
  1064  00B6                     u1187:	
  1065  00B6  0BB8               	decfsz	??_main,f
  1066  00B7  28B6               	goto	u1187
  1067  00B8  0BB9               	decfsz	??_main+1,f
  1068  00B9  28B6               	goto	u1187
  1069  00BA  0BBA               	decfsz	??_main+2,f
  1070  00BB  28B6               	goto	u1187
  1071  00BC  28BD               	nop2
  1072                           
  1073                           ;main.c: 64: if(setpoint >= readTemperature + 2)
  1074  00BD  1283               	bcf	3,5	;RP0=0, select bank0
  1075  00BE  1303               	bcf	3,6	;RP1=0, select bank0
  1076  00BF  0868               	movf	main@readTemperature,w
  1077  00C0  3E02               	addlw	2
  1078  00C1  00B8               	movwf	??_main
  1079  00C2  3000               	movlw	0
  1080  00C3  1803               	skipnc
  1081  00C4  3001               	movlw	1
  1082  00C5  00B9               	movwf	??_main+1
  1083  00C6  0839               	movf	??_main+1,w
  1084  00C7  3A80               	xorlw	128
  1085  00C8  3C80               	sublw	128
  1086  00C9  1D03               	skipz
  1087  00CA  28CD               	goto	u1115
  1088  00CB  0838               	movf	??_main,w
  1089  00CC  0267               	subwf	main@setpoint,w
  1090  00CD                     u1115:	
  1091  00CD  1C03               	skipc
  1092  00CE  28DD               	goto	l139
  1093                           
  1094                           ;main.c: 65: {
  1095                           ;main.c: 66: if(output < 255)
  1096  00CF  1283               	bcf	3,5	;RP0=0, select bank0
  1097  00D0  1303               	bcf	3,6	;RP1=0, select bank0
  1098  00D1  0A6F               	incf	_output,w
  1099  00D2  1903               	btfsc	3,2
  1100  00D3  28D9               	goto	l1432
  1101                           
  1102                           ;main.c: 67: {
  1103                           ;main.c: 68: output+=1;
  1104  00D4  3001               	movlw	1
  1105  00D5  00B8               	movwf	??_main
  1106  00D6  0838               	movf	??_main,w
  1107  00D7  07EF               	addwf	_output,f
  1108                           
  1109                           ;main.c: 69: }
  1110  00D8  28DD               	goto	l139
  1111  00D9                     l1432:	
  1112                           
  1113                           ;main.c: 70: else
  1114                           ;main.c: 71: {
  1115                           ;main.c: 72: output = 255;
  1116  00D9  30FF               	movlw	255
  1117  00DA  00B8               	movwf	??_main
  1118  00DB  0838               	movf	??_main,w
  1119  00DC  00EF               	movwf	_output
  1120  00DD                     l139:	
  1121                           
  1122                           ;main.c: 73: }
  1123                           ;main.c: 74: }
  1124                           ;main.c: 77: if(setpoint <= readTemperature - 2)
  1125  00DD  1283               	bcf	3,5	;RP0=0, select bank0
  1126  00DE  1303               	bcf	3,6	;RP1=0, select bank0
  1127  00DF  0868               	movf	main@readTemperature,w
  1128  00E0  3EFE               	addlw	254
  1129  00E1  00B8               	movwf	??_main
  1130  00E2  30FF               	movlw	255
  1131  00E3  1803               	skipnc
  1132  00E4  3000               	movlw	0
  1133  00E5  00B9               	movwf	??_main+1
  1134  00E6  0839               	movf	??_main+1,w
  1135  00E7  3A80               	xorlw	128
  1136  00E8  00BA               	movwf	??_main+2
  1137  00E9  3080               	movlw	128
  1138  00EA  023A               	subwf	??_main+2,w
  1139  00EB  1D03               	skipz
  1140  00EC  28EF               	goto	u1135
  1141  00ED  0867               	movf	main@setpoint,w
  1142  00EE  0238               	subwf	??_main,w
  1143  00EF                     u1135:	
  1144  00EF  1C03               	skipc
  1145  00F0  28FA               	goto	l1440
  1146                           
  1147                           ;main.c: 78: {
  1148                           ;main.c: 81: if(output > 0)
  1149  00F1  1283               	bcf	3,5	;RP0=0, select bank0
  1150  00F2  1303               	bcf	3,6	;RP1=0, select bank0
  1151  00F3  086F               	movf	_output,w
  1152  00F4  1903               	btfsc	3,2
  1153  00F5  28F9               	goto	l1438
  1154                           
  1155                           ;main.c: 82: {
  1156                           ;main.c: 83: output-=1;
  1157  00F6  3001               	movlw	1
  1158  00F7  02EF               	subwf	_output,f
  1159                           
  1160                           ;main.c: 84: }
  1161  00F8  28FA               	goto	l1440
  1162  00F9                     l1438:	
  1163                           
  1164                           ;main.c: 85: else
  1165                           ;main.c: 86: {
  1166                           ;main.c: 87: output = 0;
  1167  00F9  01EF               	clrf	_output
  1168  00FA                     l1440:	
  1169                           
  1170                           ;main.c: 88: }
  1171                           ;main.c: 89: }
  1172                           ;main.c: 92: LCD_Clear();
  1173  00FA  24DA               	fcall	_LCD_Clear
  1174                           
  1175                           ;main.c: 95: { LCD_Set_Cursor(0,0); LCD_Write_String("PWM=");};
  1176  00FB  01F8               	clrf	LCD_Set_Cursor@y
  1177  00FC  3000               	movlw	0
  1178  00FD  2334               	fcall	_LCD_Set_Cursor
  1179  00FE  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1180  00FF  248D               	fcall	_LCD_Write_String
  1181                           
  1182                           ;main.c: 96: { LCD_Set_Cursor(0,4); LCD_Write_Int(CCPR1L,3, 0, 0);};
  1183  0100  3004               	movlw	4
  1184  0101  1283               	bcf	3,5	;RP0=0, select bank0
  1185  0102  1303               	bcf	3,6	;RP1=0, select bank0
  1186  0103  00B8               	movwf	??_main
  1187  0104  0838               	movf	??_main,w
  1188  0105  00F8               	movwf	LCD_Set_Cursor@y
  1189  0106  3000               	movlw	0
  1190  0107  2334               	fcall	_LCD_Set_Cursor
  1191  0108  1283               	bcf	3,5	;RP0=0, select bank0
  1192  0109  1303               	bcf	3,6	;RP1=0, select bank0
  1193  010A  0815               	movf	21,w	;volatile
  1194  010B  00B8               	movwf	??_main
  1195  010C  01B9               	clrf	??_main+1
  1196  010D  0838               	movf	??_main,w
  1197  010E  00A5               	movwf	LCD_Write_Int@value
  1198  010F  0839               	movf	??_main+1,w
  1199  0110  00A6               	movwf	LCD_Write_Int@value+1
  1200  0111  3003               	movlw	3
  1201  0112  00BA               	movwf	??_main+2
  1202  0113  083A               	movf	??_main+2,w
  1203  0114  00A7               	movwf	LCD_Write_Int@fieldLength
  1204  0115  01A8               	clrf	LCD_Write_Int@numPlaces
  1205  0116  01A9               	clrf	LCD_Write_Int@sign
  1206  0117  2158               	fcall	_LCD_Write_Int
  1207                           
  1208                           ;main.c: 98: { LCD_Set_Cursor(0,8); LCD_Write_String("OP=");};
  1209  0118  3008               	movlw	8
  1210  0119  1283               	bcf	3,5	;RP0=0, select bank0
  1211  011A  1303               	bcf	3,6	;RP1=0, select bank0
  1212  011B  00B8               	movwf	??_main
  1213  011C  0838               	movf	??_main,w
  1214  011D  00F8               	movwf	LCD_Set_Cursor@y
  1215  011E  3000               	movlw	0
  1216  011F  2334               	fcall	_LCD_Set_Cursor
  1217  0120  3006               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1218  0121  248D               	fcall	_LCD_Write_String
  1219                           
  1220                           ;main.c: 99: { LCD_Set_Cursor(0,11); LCD_Write_Int(output,3, 0, 0);};
  1221  0122  300B               	movlw	11
  1222  0123  1283               	bcf	3,5	;RP0=0, select bank0
  1223  0124  1303               	bcf	3,6	;RP1=0, select bank0
  1224  0125  00B8               	movwf	??_main
  1225  0126  0838               	movf	??_main,w
  1226  0127  00F8               	movwf	LCD_Set_Cursor@y
  1227  0128  3000               	movlw	0
  1228  0129  2334               	fcall	_LCD_Set_Cursor
  1229  012A  1283               	bcf	3,5	;RP0=0, select bank0
  1230  012B  1303               	bcf	3,6	;RP1=0, select bank0
  1231  012C  086F               	movf	_output,w
  1232  012D  00B8               	movwf	??_main
  1233  012E  01B9               	clrf	??_main+1
  1234  012F  0838               	movf	??_main,w
  1235  0130  00A5               	movwf	LCD_Write_Int@value
  1236  0131  0839               	movf	??_main+1,w
  1237  0132  00A6               	movwf	LCD_Write_Int@value+1
  1238  0133  3003               	movlw	3
  1239  0134  00BA               	movwf	??_main+2
  1240  0135  083A               	movf	??_main+2,w
  1241  0136  00A7               	movwf	LCD_Write_Int@fieldLength
  1242  0137  01A8               	clrf	LCD_Write_Int@numPlaces
  1243  0138  01A9               	clrf	LCD_Write_Int@sign
  1244  0139  2158               	fcall	_LCD_Write_Int
  1245                           
  1246                           ;main.c: 101: { LCD_Set_Cursor(1,0); LCD_Write_String("MV=");};
  1247  013A  01F8               	clrf	LCD_Set_Cursor@y
  1248  013B  3001               	movlw	1
  1249  013C  2334               	fcall	_LCD_Set_Cursor
  1250  013D  300A               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1251  013E  248D               	fcall	_LCD_Write_String
  1252                           
  1253                           ;main.c: 102: { LCD_Set_Cursor(1,3); LCD_Write_Int(readTemperature,3, 0, 0);};
  1254  013F  3003               	movlw	3
  1255  0140  1283               	bcf	3,5	;RP0=0, select bank0
  1256  0141  1303               	bcf	3,6	;RP1=0, select bank0
  1257  0142  00B8               	movwf	??_main
  1258  0143  0838               	movf	??_main,w
  1259  0144  00F8               	movwf	LCD_Set_Cursor@y
  1260  0145  3001               	movlw	1
  1261  0146  2334               	fcall	_LCD_Set_Cursor
  1262  0147  1283               	bcf	3,5	;RP0=0, select bank0
  1263  0148  1303               	bcf	3,6	;RP1=0, select bank0
  1264  0149  0868               	movf	main@readTemperature,w
  1265  014A  00B8               	movwf	??_main
  1266  014B  01B9               	clrf	??_main+1
  1267  014C  0838               	movf	??_main,w
  1268  014D  00A5               	movwf	LCD_Write_Int@value
  1269  014E  0839               	movf	??_main+1,w
  1270  014F  00A6               	movwf	LCD_Write_Int@value+1
  1271  0150  3003               	movlw	3
  1272  0151  00BA               	movwf	??_main+2
  1273  0152  083A               	movf	??_main+2,w
  1274  0153  00A7               	movwf	LCD_Write_Int@fieldLength
  1275  0154  01A8               	clrf	LCD_Write_Int@numPlaces
  1276  0155  01A9               	clrf	LCD_Write_Int@sign
  1277  0156  2158               	fcall	_LCD_Write_Int
  1278  0157  283B               	goto	l1398
  1279  0158                     __end_of_main:	
  1280                           
  1281                           	psect	text1
  1282  03B9                     __ptext1:	
  1283 ;; *************** function ___lwdiv *****************
  1284 ;; Defined at:
  1285 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwdiv.c"
  1286 ;; Parameters:    Size  Location     Type
  1287 ;;  divisor         2    4[COMMON] unsigned int 
  1288 ;;  dividend        2    6[COMMON] unsigned int 
  1289 ;; Auto vars:     Size  Location     Type
  1290 ;;  quotient        2    0[BANK0 ] unsigned int 
  1291 ;;  counter         1    2[BANK0 ] unsigned char 
  1292 ;; Return value:  Size  Location     Type
  1293 ;;                  2    4[COMMON] unsigned int 
  1294 ;; Registers used:
  1295 ;;		wreg, status,2, status,0
  1296 ;; Tracked objects:
  1297 ;;		On entry : 0/0
  1298 ;;		On exit  : 0/0
  1299 ;;		Unchanged: 0/0
  1300 ;; Data sizes:     COMMON   BANK0   BANK1
  1301 ;;      Params:         4       0       0
  1302 ;;      Locals:         0       3       0
  1303 ;;      Temps:          1       0       0
  1304 ;;      Totals:         5       3       0
  1305 ;;Total ram usage:        8 bytes
  1306 ;; Hardware stack levels used:    1
  1307 ;; Hardware stack levels required when called:    1
  1308 ;; This function calls:
  1309 ;;		Nothing
  1310 ;; This function is called by:
  1311 ;;		_main
  1312 ;; This function uses a non-reentrant model
  1313 ;;
  1314                           
  1315                           
  1316                           ;psect for function ___lwdiv
  1317  03B9                     ___lwdiv:	
  1318                           
  1319                           ;incstack = 0
  1320                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1321  03B9  1283               	bcf	3,5	;RP0=0, select bank0
  1322  03BA  1303               	bcf	3,6	;RP1=0, select bank0
  1323  03BB  01A0               	clrf	___lwdiv@quotient
  1324  03BC  01A1               	clrf	___lwdiv@quotient+1
  1325  03BD  0874               	movf	___lwdiv@divisor,w
  1326  03BE  0475               	iorwf	___lwdiv@divisor+1,w
  1327  03BF  1903               	btfsc	3,2
  1328  03C0  2BF2               	goto	l1372
  1329  03C1  01A2               	clrf	___lwdiv@counter
  1330  03C2  0AA2               	incf	___lwdiv@counter,f
  1331  03C3                     l1360:	
  1332  03C3  1BF5               	btfsc	___lwdiv@divisor+1,7
  1333  03C4  2BD1               	goto	l1362
  1334  03C5  3001               	movlw	1
  1335  03C6                     u1005:	
  1336  03C6  1003               	clrc
  1337  03C7  0DF4               	rlf	___lwdiv@divisor,f
  1338  03C8  0DF5               	rlf	___lwdiv@divisor+1,f
  1339  03C9  3EFF               	addlw	-1
  1340  03CA  1D03               	skipz
  1341  03CB  2BC6               	goto	u1005
  1342  03CC  3001               	movlw	1
  1343  03CD  00F8               	movwf	??___lwdiv
  1344  03CE  0878               	movf	??___lwdiv,w
  1345  03CF  07A2               	addwf	___lwdiv@counter,f
  1346  03D0  2BC3               	goto	l1360
  1347  03D1                     l1362:	
  1348  03D1  3001               	movlw	1
  1349  03D2                     u1025:	
  1350  03D2  1003               	clrc
  1351  03D3  0DA0               	rlf	___lwdiv@quotient,f
  1352  03D4  0DA1               	rlf	___lwdiv@quotient+1,f
  1353  03D5  3EFF               	addlw	-1
  1354  03D6  1D03               	skipz
  1355  03D7  2BD2               	goto	u1025
  1356  03D8  0875               	movf	___lwdiv@divisor+1,w
  1357  03D9  0277               	subwf	___lwdiv@dividend+1,w
  1358  03DA  1D03               	skipz
  1359  03DB  2BDE               	goto	u1035
  1360  03DC  0874               	movf	___lwdiv@divisor,w
  1361  03DD  0276               	subwf	___lwdiv@dividend,w
  1362  03DE                     u1035:	
  1363  03DE  1C03               	skipc
  1364  03DF  2BE7               	goto	l1368
  1365  03E0  0874               	movf	___lwdiv@divisor,w
  1366  03E1  02F6               	subwf	___lwdiv@dividend,f
  1367  03E2  0875               	movf	___lwdiv@divisor+1,w
  1368  03E3  1C03               	skipc
  1369  03E4  03F7               	decf	___lwdiv@dividend+1,f
  1370  03E5  02F7               	subwf	___lwdiv@dividend+1,f
  1371  03E6  1420               	bsf	___lwdiv@quotient,0
  1372  03E7                     l1368:	
  1373  03E7  3001               	movlw	1
  1374  03E8                     u1045:	
  1375  03E8  1003               	clrc
  1376  03E9  0CF5               	rrf	___lwdiv@divisor+1,f
  1377  03EA  0CF4               	rrf	___lwdiv@divisor,f
  1378  03EB  3EFF               	addlw	-1
  1379  03EC  1D03               	skipz
  1380  03ED  2BE8               	goto	u1045
  1381  03EE  3001               	movlw	1
  1382  03EF  02A2               	subwf	___lwdiv@counter,f
  1383  03F0  1D03               	btfss	3,2
  1384  03F1  2BD1               	goto	l1362
  1385  03F2                     l1372:	
  1386  03F2  0821               	movf	___lwdiv@quotient+1,w
  1387  03F3  00F5               	movwf	?___lwdiv+1
  1388  03F4  0820               	movf	___lwdiv@quotient,w
  1389  03F5  00F4               	movwf	?___lwdiv
  1390  03F6  0008               	return
  1391  03F7                     __end_of___lwdiv:	
  1392                           
  1393                           	psect	text2
  1394  048D                     __ptext2:	
  1395 ;; *************** function _LCD_Write_String *****************
  1396 ;; Defined at:
  1397 ;;		line 239 in file "lcd.c"
  1398 ;; Parameters:    Size  Location     Type
  1399 ;;  a               1    wreg     PTR const unsigned char 
  1400 ;;		 -> STR_3(4), STR_2(4), STR_1(5), 
  1401 ;; Auto vars:     Size  Location     Type
  1402 ;;  a               1    1[BANK0 ] PTR const unsigned char 
  1403 ;;		 -> STR_3(4), STR_2(4), STR_1(5), 
  1404 ;;  i               1    0[BANK0 ] unsigned char 
  1405 ;; Return value:  Size  Location     Type
  1406 ;;                  1    wreg      void 
  1407 ;; Registers used:
  1408 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1409 ;; Tracked objects:
  1410 ;;		On entry : 0/0
  1411 ;;		On exit  : 0/0
  1412 ;;		Unchanged: 0/0
  1413 ;; Data sizes:     COMMON   BANK0   BANK1
  1414 ;;      Params:         0       0       0
  1415 ;;      Locals:         0       2       0
  1416 ;;      Temps:          1       0       0
  1417 ;;      Totals:         1       2       0
  1418 ;;Total ram usage:        3 bytes
  1419 ;; Hardware stack levels used:    1
  1420 ;; Hardware stack levels required when called:    3
  1421 ;; This function calls:
  1422 ;;		_LCD_Write_Char
  1423 ;; This function is called by:
  1424 ;;		_main
  1425 ;; This function uses a non-reentrant model
  1426 ;;
  1427                           
  1428                           
  1429                           ;psect for function _LCD_Write_String
  1430  048D                     _LCD_Write_String:	
  1431                           
  1432                           ;incstack = 0
  1433                           ; Regs used in _LCD_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1434                           ;LCD_Write_String@a stored from wreg
  1435  048D  1283               	bcf	3,5	;RP0=0, select bank0
  1436  048E  1303               	bcf	3,6	;RP1=0, select bank0
  1437  048F  00A1               	movwf	LCD_Write_String@a
  1438                           
  1439                           ;lcd.c: 241: char i;
  1440                           ;lcd.c: 242: for(i=0;a[i]!='\0';i++)
  1441  0490  01A0               	clrf	LCD_Write_String@i
  1442  0491                     l1298:	
  1443  0491  0820               	movf	LCD_Write_String@i,w
  1444  0492  0721               	addwf	LCD_Write_String@a,w
  1445  0493  0084               	movwf	4
  1446  0494  24B8               	fcall	stringdir
  1447  0495  3A00               	xorlw	0
  1448  0496  1903               	btfsc	3,2
  1449  0497  0008               	return
  1450                           
  1451                           ;lcd.c: 243: LCD_Write_Char(a[i]);
  1452  0498  0820               	movf	LCD_Write_String@i,w
  1453  0499  0721               	addwf	LCD_Write_String@a,w
  1454  049A  0084               	movwf	4
  1455  049B  24B8               	fcall	stringdir
  1456  049C  23F7               	fcall	_LCD_Write_Char
  1457  049D  3001               	movlw	1
  1458  049E  00F9               	movwf	??_LCD_Write_String
  1459  049F  0879               	movf	??_LCD_Write_String,w
  1460  04A0  1283               	bcf	3,5	;RP0=0, select bank0
  1461  04A1  1303               	bcf	3,6	;RP1=0, select bank0
  1462  04A2  07A0               	addwf	LCD_Write_String@i,f
  1463  04A3  2C91               	goto	l1298
  1464  04A4                     __end_of_LCD_Write_String:	
  1465                           
  1466                           	psect	text3
  1467  0158                     __ptext3:	
  1468 ;; *************** function _LCD_Write_Int *****************
  1469 ;; Defined at:
  1470 ;;		line 246 in file "lcd.c"
  1471 ;; Parameters:    Size  Location     Type
  1472 ;;  value           2    5[BANK0 ] int 
  1473 ;;  fieldLength     1    7[BANK0 ] char 
  1474 ;;  numPlaces       1    8[BANK0 ] char 
  1475 ;;  sign            1    9[BANK0 ] char 
  1476 ;; Auto vars:     Size  Location     Type
  1477 ;;  str             5   15[BANK0 ] unsigned char [5]
  1478 ;;  i               2   22[BANK0 ] int 
  1479 ;;  j               2   20[BANK0 ] int 
  1480 ;; Return value:  Size  Location     Type
  1481 ;;                  1    wreg      void 
  1482 ;; Registers used:
  1483 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1484 ;; Tracked objects:
  1485 ;;		On entry : 0/0
  1486 ;;		On exit  : 0/0
  1487 ;;		Unchanged: 0/0
  1488 ;; Data sizes:     COMMON   BANK0   BANK1
  1489 ;;      Params:         0       5       0
  1490 ;;      Locals:         0       9       0
  1491 ;;      Temps:          0       5       0
  1492 ;;      Totals:         0      19       0
  1493 ;;Total ram usage:       19 bytes
  1494 ;; Hardware stack levels used:    1
  1495 ;; Hardware stack levels required when called:    3
  1496 ;; This function calls:
  1497 ;;		_LCD_Write_Char
  1498 ;;		___awdiv
  1499 ;;		___awmod
  1500 ;; This function is called by:
  1501 ;;		_main
  1502 ;; This function uses a non-reentrant model
  1503 ;;
  1504                           
  1505                           
  1506                           ;psect for function _LCD_Write_Int
  1507  0158                     _LCD_Write_Int:	
  1508                           
  1509                           ;lcd.c: 248: char str[5]={0,0,0,0,0};
  1510                           
  1511                           ;incstack = 0
  1512                           ; Regs used in _LCD_Write_Int: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1513  0158  302F               	movlw	LCD_Write_Int@str& (0+255)
  1514  0159  0084               	movwf	4
  1515  015A  1283               	bcf	3,5	;RP0=0, select bank0
  1516  015B  1303               	bcf	3,6	;RP1=0, select bank0
  1517  015C  086A               	movf	LCD_Write_Int@F1081,w
  1518  015D  1383               	bcf	3,7	;select IRP bank0
  1519  015E  0080               	movwf	0
  1520  015F  0A84               	incf	4,f
  1521  0160  086B               	movf	LCD_Write_Int@F1081+1,w
  1522  0161  0080               	movwf	0
  1523  0162  0A84               	incf	4,f
  1524  0163  086C               	movf	LCD_Write_Int@F1081+2,w
  1525  0164  0080               	movwf	0
  1526  0165  0A84               	incf	4,f
  1527  0166  086D               	movf	LCD_Write_Int@F1081+3,w
  1528  0167  0080               	movwf	0
  1529  0168  0A84               	incf	4,f
  1530  0169  086E               	movf	LCD_Write_Int@F1081+4,w
  1531  016A  0080               	movwf	0
  1532                           
  1533                           ;lcd.c: 249: int i=4,j=0;
  1534  016B  3004               	movlw	4
  1535  016C  00B6               	movwf	LCD_Write_Int@i
  1536  016D  3000               	movlw	0
  1537  016E  00B7               	movwf	LCD_Write_Int@i+1
  1538  016F  01B4               	clrf	LCD_Write_Int@j
  1539  0170  01B5               	clrf	LCD_Write_Int@j+1
  1540                           
  1541                           ;lcd.c: 251: if(value<0)
  1542  0171  1FA6               	btfss	LCD_Write_Int@value+1,7
  1543  0172  297D               	goto	l1312
  1544                           
  1545                           ;lcd.c: 252: {
  1546                           ;lcd.c: 253: LCD_Write_Char('-');
  1547  0173  302D               	movlw	45
  1548  0174  23F7               	fcall	_LCD_Write_Char
  1549                           
  1550                           ;lcd.c: 254: value=value*-1;
  1551  0175  1283               	bcf	3,5	;RP0=0, select bank0
  1552  0176  1303               	bcf	3,6	;RP1=0, select bank0
  1553  0177  09A5               	comf	LCD_Write_Int@value,f
  1554  0178  09A6               	comf	LCD_Write_Int@value+1,f
  1555  0179  0AA5               	incf	LCD_Write_Int@value,f
  1556  017A  1903               	skipnz
  1557  017B  0AA6               	incf	LCD_Write_Int@value+1,f
  1558                           
  1559                           ;lcd.c: 255: }
  1560  017C  2982               	goto	l1322
  1561  017D                     l1312:	
  1562                           
  1563                           ;lcd.c: 257: else
  1564                           ;lcd.c: 258: {
  1565                           ;lcd.c: 259: if(sign == 1)
  1566  017D  0329               	decf	LCD_Write_Int@sign,w
  1567  017E  1D03               	btfss	3,2
  1568  017F  2982               	goto	l1322
  1569                           
  1570                           ;lcd.c: 260: {
  1571                           ;lcd.c: 261: LCD_Write_Char('+');
  1572  0180  302B               	movlw	43
  1573  0181  23F7               	fcall	_LCD_Write_Char
  1574  0182                     l1322:	
  1575                           ;lcd.c: 262: }
  1576                           ;lcd.c: 263: }
  1577                           ;lcd.c: 265: while(value)
  1578                           
  1579  0182  1283               	bcf	3,5	;RP0=0, select bank0
  1580  0183  1303               	bcf	3,6	;RP1=0, select bank0
  1581  0184  0825               	movf	LCD_Write_Int@value,w
  1582  0185  0426               	iorwf	LCD_Write_Int@value+1,w
  1583  0186  1903               	btfsc	3,2
  1584  0187  29B3               	goto	l1324
  1585                           
  1586                           ;lcd.c: 266: {
  1587                           ;lcd.c: 267: str[i]=value%10;
  1588  0188  300A               	movlw	10
  1589  0189  00F4               	movwf	___awmod@divisor
  1590  018A  3000               	movlw	0
  1591  018B  00F5               	movwf	___awmod@divisor+1
  1592  018C  1283               	bcf	3,5	;RP0=0, select bank0
  1593  018D  1303               	bcf	3,6	;RP1=0, select bank0
  1594  018E  0826               	movf	LCD_Write_Int@value+1,w
  1595  018F  00F7               	movwf	___awmod@dividend+1
  1596  0190  0825               	movf	LCD_Write_Int@value,w
  1597  0191  00F6               	movwf	___awmod@dividend
  1598  0192  22E7               	fcall	___awmod
  1599  0193  0874               	movf	?___awmod,w
  1600  0194  1283               	bcf	3,5	;RP0=0, select bank0
  1601  0195  1303               	bcf	3,6	;RP1=0, select bank0
  1602  0196  00AA               	movwf	??_LCD_Write_Int
  1603  0197  0836               	movf	LCD_Write_Int@i,w
  1604  0198  3E2F               	addlw	(low (LCD_Write_Int@str| 0))& (0+255)
  1605  0199  0084               	movwf	4
  1606  019A  082A               	movf	??_LCD_Write_Int,w
  1607  019B  1383               	bcf	3,7	;select IRP bank0
  1608  019C  0080               	movwf	0
  1609                           
  1610                           ;lcd.c: 268: value=value/10;
  1611  019D  300A               	movlw	10
  1612  019E  00F6               	movwf	___awdiv@divisor
  1613  019F  3000               	movlw	0
  1614  01A0  00F7               	movwf	___awdiv@divisor+1
  1615  01A1  0826               	movf	LCD_Write_Int@value+1,w
  1616  01A2  00F9               	movwf	___awdiv@dividend+1
  1617  01A3  0825               	movf	LCD_Write_Int@value,w
  1618  01A4  00F8               	movwf	___awdiv@dividend
  1619  01A5  228C               	fcall	___awdiv
  1620  01A6  0877               	movf	?___awdiv+1,w
  1621  01A7  1283               	bcf	3,5	;RP0=0, select bank0
  1622  01A8  1303               	bcf	3,6	;RP1=0, select bank0
  1623  01A9  00A6               	movwf	LCD_Write_Int@value+1
  1624  01AA  0876               	movf	?___awdiv,w
  1625  01AB  00A5               	movwf	LCD_Write_Int@value
  1626                           
  1627                           ;lcd.c: 269: i--;
  1628  01AC  30FF               	movlw	255
  1629  01AD  07B6               	addwf	LCD_Write_Int@i,f
  1630  01AE  1803               	skipnc
  1631  01AF  0AB7               	incf	LCD_Write_Int@i+1,f
  1632  01B0  30FF               	movlw	255
  1633  01B1  07B7               	addwf	LCD_Write_Int@i+1,f
  1634  01B2  2982               	goto	l1322
  1635  01B3                     l1324:	
  1636                           
  1637                           ;lcd.c: 270: }
  1638                           ;lcd.c: 271: if(fieldLength==-1)
  1639  01B3  0A27               	incf	LCD_Write_Int@fieldLength,w
  1640  01B4  1903               	btfsc	3,2
  1641  01B5  29BD               	goto	l1330
  1642  01B6  29C5               	goto	l1332
  1643  01B7                     l1328:	
  1644                           ;lcd.c: 272: {
  1645                           ;lcd.c: 273: while(str[j]==0)
  1646                           
  1647                           
  1648                           ;lcd.c: 274: {
  1649                           ;lcd.c: 275: j++;
  1650  01B7  3001               	movlw	1
  1651  01B8  07B4               	addwf	LCD_Write_Int@j,f
  1652  01B9  1803               	skipnc
  1653  01BA  0AB5               	incf	LCD_Write_Int@j+1,f
  1654  01BB  3000               	movlw	0
  1655  01BC  07B5               	addwf	LCD_Write_Int@j+1,f
  1656  01BD                     l1330:	
  1657  01BD  0834               	movf	LCD_Write_Int@j,w
  1658  01BE  3E2F               	addlw	(low (LCD_Write_Int@str| 0))& (0+255)
  1659  01BF  0084               	movwf	4
  1660  01C0  1383               	bcf	3,7	;select IRP bank0
  1661  01C1  0800               	movf	0,w
  1662  01C2  1D03               	btfss	3,2
  1663  01C3  29D7               	goto	l1334
  1664  01C4  29B7               	goto	l1328
  1665  01C5                     l1332:	
  1666                           ;lcd.c: 276: }
  1667                           ;lcd.c: 277: }
  1668                           
  1669                           
  1670                           ;lcd.c: 278: else
  1671                           ;lcd.c: 279: {
  1672                           ;lcd.c: 280: j=5-fieldLength;
  1673  01C5  0827               	movf	LCD_Write_Int@fieldLength,w
  1674  01C6  00AA               	movwf	??_LCD_Write_Int
  1675  01C7  01AB               	clrf	??_LCD_Write_Int+1
  1676  01C8  1BAA               	btfsc	??_LCD_Write_Int,7
  1677  01C9  03AB               	decf	??_LCD_Write_Int+1,f
  1678  01CA  09AA               	comf	??_LCD_Write_Int,f
  1679  01CB  09AB               	comf	??_LCD_Write_Int+1,f
  1680  01CC  0AAA               	incf	??_LCD_Write_Int,f
  1681  01CD  1903               	skipnz
  1682  01CE  0AAB               	incf	??_LCD_Write_Int+1,f
  1683  01CF  082A               	movf	??_LCD_Write_Int,w
  1684  01D0  3E05               	addlw	5
  1685  01D1  00B4               	movwf	LCD_Write_Int@j
  1686  01D2  082B               	movf	??_LCD_Write_Int+1,w
  1687  01D3  1803               	skipnc
  1688  01D4  3E01               	addlw	1
  1689  01D5  3E00               	addlw	0
  1690  01D6  00B5               	movwf	LCD_Write_Int@j+1
  1691  01D7                     l1334:	
  1692                           
  1693                           ;lcd.c: 281: }
  1694                           ;lcd.c: 283: for(i=j;i<(5-numPlaces);i++)
  1695  01D7  0835               	movf	LCD_Write_Int@j+1,w
  1696  01D8  00B7               	movwf	LCD_Write_Int@i+1
  1697  01D9  0834               	movf	LCD_Write_Int@j,w
  1698  01DA  00B6               	movwf	LCD_Write_Int@i
  1699  01DB                     l1340:	
  1700  01DB  0828               	movf	LCD_Write_Int@numPlaces,w
  1701  01DC  00AA               	movwf	??_LCD_Write_Int
  1702  01DD  01AB               	clrf	??_LCD_Write_Int+1
  1703  01DE  1BAA               	btfsc	??_LCD_Write_Int,7
  1704  01DF  03AB               	decf	??_LCD_Write_Int+1,f
  1705  01E0  09AA               	comf	??_LCD_Write_Int,f
  1706  01E1  09AB               	comf	??_LCD_Write_Int+1,f
  1707  01E2  0AAA               	incf	??_LCD_Write_Int,f
  1708  01E3  1903               	skipnz
  1709  01E4  0AAB               	incf	??_LCD_Write_Int+1,f
  1710  01E5  082A               	movf	??_LCD_Write_Int,w
  1711  01E6  3E05               	addlw	5
  1712  01E7  00AC               	movwf	??_LCD_Write_Int+2
  1713  01E8  082B               	movf	??_LCD_Write_Int+1,w
  1714  01E9  1803               	skipnc
  1715  01EA  3E01               	addlw	1
  1716  01EB  3E00               	addlw	0
  1717  01EC  00AD               	movwf	??_LCD_Write_Int+3
  1718  01ED  0837               	movf	LCD_Write_Int@i+1,w
  1719  01EE  3A80               	xorlw	128
  1720  01EF  00AE               	movwf	??_LCD_Write_Int+4
  1721  01F0  082D               	movf	??_LCD_Write_Int+3,w
  1722  01F1  3A80               	xorlw	128
  1723  01F2  022E               	subwf	??_LCD_Write_Int+4,w
  1724  01F3  1D03               	skipz
  1725  01F4  29F7               	goto	u965
  1726  01F5  082C               	movf	??_LCD_Write_Int+2,w
  1727  01F6  0236               	subwf	LCD_Write_Int@i,w
  1728  01F7                     u965:	
  1729  01F7  1803               	btfsc	3,0
  1730  01F8  2A0B               	goto	l1342
  1731                           
  1732                           ;lcd.c: 284: {
  1733                           ;lcd.c: 285: LCD_Write_Char(48+str[i]);
  1734  01F9  1283               	bcf	3,5	;RP0=0, select bank0
  1735  01FA  1303               	bcf	3,6	;RP1=0, select bank0
  1736  01FB  0836               	movf	LCD_Write_Int@i,w
  1737  01FC  3E2F               	addlw	(low (LCD_Write_Int@str| 0))& (0+255)
  1738  01FD  0084               	movwf	4
  1739  01FE  1383               	bcf	3,7	;select IRP bank0
  1740  01FF  0800               	movf	0,w
  1741  0200  3E30               	addlw	48
  1742  0201  23F7               	fcall	_LCD_Write_Char
  1743  0202  3001               	movlw	1
  1744  0203  1283               	bcf	3,5	;RP0=0, select bank0
  1745  0204  1303               	bcf	3,6	;RP1=0, select bank0
  1746  0205  07B6               	addwf	LCD_Write_Int@i,f
  1747  0206  1803               	skipnc
  1748  0207  0AB7               	incf	LCD_Write_Int@i+1,f
  1749  0208  3000               	movlw	0
  1750  0209  07B7               	addwf	LCD_Write_Int@i+1,f
  1751  020A  29DB               	goto	l1340
  1752  020B                     l1342:	
  1753                           
  1754                           ;lcd.c: 286: }
  1755                           ;lcd.c: 288: if(numPlaces == 1)
  1756  020B  1283               	bcf	3,5	;RP0=0, select bank0
  1757  020C  1303               	bcf	3,6	;RP1=0, select bank0
  1758  020D  0328               	decf	LCD_Write_Int@numPlaces,w
  1759  020E  1D03               	btfss	3,2
  1760  020F  2A17               	goto	l1346
  1761                           
  1762                           ;lcd.c: 289: {
  1763                           ;lcd.c: 290: LCD_Write_Char(46);
  1764  0210  302E               	movlw	46
  1765  0211  23F7               	fcall	_LCD_Write_Char
  1766                           
  1767                           ;lcd.c: 291: LCD_Write_Char(48+str[4]);
  1768  0212  1283               	bcf	3,5	;RP0=0, select bank0
  1769  0213  1303               	bcf	3,6	;RP1=0, select bank0
  1770  0214  0833               	movf	LCD_Write_Int@str+4,w
  1771  0215  3E30               	addlw	48
  1772  0216  23F7               	fcall	_LCD_Write_Char
  1773  0217                     l1346:	
  1774                           
  1775                           ;lcd.c: 292: }
  1776                           ;lcd.c: 294: if(numPlaces == 2)
  1777  0217  3002               	movlw	2
  1778  0218  1283               	bcf	3,5	;RP0=0, select bank0
  1779  0219  1303               	bcf	3,6	;RP1=0, select bank0
  1780  021A  0628               	xorwf	LCD_Write_Int@numPlaces,w
  1781  021B  1D03               	btfss	3,2
  1782  021C  0008               	return
  1783                           
  1784                           ;lcd.c: 295: {
  1785                           ;lcd.c: 296: LCD_Write_Char(46);
  1786  021D  302E               	movlw	46
  1787  021E  23F7               	fcall	_LCD_Write_Char
  1788                           
  1789                           ;lcd.c: 297: LCD_Write_Char(48+str[3]);
  1790  021F  1283               	bcf	3,5	;RP0=0, select bank0
  1791  0220  1303               	bcf	3,6	;RP1=0, select bank0
  1792  0221  0832               	movf	LCD_Write_Int@str+3,w
  1793  0222  3E30               	addlw	48
  1794  0223  23F7               	fcall	_LCD_Write_Char
  1795                           
  1796                           ;lcd.c: 298: LCD_Write_Char(48+str[4]);
  1797  0224  1283               	bcf	3,5	;RP0=0, select bank0
  1798  0225  1303               	bcf	3,6	;RP1=0, select bank0
  1799  0226  0833               	movf	LCD_Write_Int@str+4,w
  1800  0227  3E30               	addlw	48
  1801  0228  23F7               	fcall	_LCD_Write_Char
  1802  0229  0008               	return
  1803  022A                     __end_of_LCD_Write_Int:	
  1804                           
  1805                           	psect	text4
  1806  02E7                     __ptext4:	
  1807 ;; *************** function ___awmod *****************
  1808 ;; Defined at:
  1809 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awmod.c"
  1810 ;; Parameters:    Size  Location     Type
  1811 ;;  divisor         2    4[COMMON] int 
  1812 ;;  dividend        2    6[COMMON] int 
  1813 ;; Auto vars:     Size  Location     Type
  1814 ;;  sign            1    1[BANK0 ] unsigned char 
  1815 ;;  counter         1    0[BANK0 ] unsigned char 
  1816 ;; Return value:  Size  Location     Type
  1817 ;;                  2    4[COMMON] int 
  1818 ;; Registers used:
  1819 ;;		wreg, status,2, status,0
  1820 ;; Tracked objects:
  1821 ;;		On entry : 0/0
  1822 ;;		On exit  : 0/0
  1823 ;;		Unchanged: 0/0
  1824 ;; Data sizes:     COMMON   BANK0   BANK1
  1825 ;;      Params:         4       0       0
  1826 ;;      Locals:         0       2       0
  1827 ;;      Temps:          1       0       0
  1828 ;;      Totals:         5       2       0
  1829 ;;Total ram usage:        7 bytes
  1830 ;; Hardware stack levels used:    1
  1831 ;; Hardware stack levels required when called:    1
  1832 ;; This function calls:
  1833 ;;		Nothing
  1834 ;; This function is called by:
  1835 ;;		_LCD_Write_Int
  1836 ;; This function uses a non-reentrant model
  1837 ;;
  1838                           
  1839                           
  1840                           ;psect for function ___awmod
  1841  02E7                     ___awmod:	
  1842                           
  1843                           ;incstack = 0
  1844                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  1845  02E7  1283               	bcf	3,5	;RP0=0, select bank0
  1846  02E8  1303               	bcf	3,6	;RP1=0, select bank0
  1847  02E9  01A1               	clrf	___awmod@sign
  1848  02EA  1FF7               	btfss	___awmod@dividend+1,7
  1849  02EB  2AF3               	goto	l1148
  1850  02EC  09F6               	comf	___awmod@dividend,f
  1851  02ED  09F7               	comf	___awmod@dividend+1,f
  1852  02EE  0AF6               	incf	___awmod@dividend,f
  1853  02EF  1903               	skipnz
  1854  02F0  0AF7               	incf	___awmod@dividend+1,f
  1855  02F1  01A1               	clrf	___awmod@sign
  1856  02F2  0AA1               	incf	___awmod@sign,f
  1857  02F3                     l1148:	
  1858  02F3  1FF5               	btfss	___awmod@divisor+1,7
  1859  02F4  2AFA               	goto	l1152
  1860  02F5  09F4               	comf	___awmod@divisor,f
  1861  02F6  09F5               	comf	___awmod@divisor+1,f
  1862  02F7  0AF4               	incf	___awmod@divisor,f
  1863  02F8  1903               	skipnz
  1864  02F9  0AF5               	incf	___awmod@divisor+1,f
  1865  02FA                     l1152:	
  1866  02FA  0874               	movf	___awmod@divisor,w
  1867  02FB  0475               	iorwf	___awmod@divisor+1,w
  1868  02FC  1903               	btfsc	3,2
  1869  02FD  2B27               	goto	l1170
  1870  02FE  01A0               	clrf	___awmod@counter
  1871  02FF  0AA0               	incf	___awmod@counter,f
  1872  0300                     l1160:	
  1873  0300  1BF5               	btfsc	___awmod@divisor+1,7
  1874  0301  2B0E               	goto	l1162
  1875  0302  3001               	movlw	1
  1876  0303                     u775:	
  1877  0303  1003               	clrc
  1878  0304  0DF4               	rlf	___awmod@divisor,f
  1879  0305  0DF5               	rlf	___awmod@divisor+1,f
  1880  0306  3EFF               	addlw	-1
  1881  0307  1D03               	skipz
  1882  0308  2B03               	goto	u775
  1883  0309  3001               	movlw	1
  1884  030A  00F8               	movwf	??___awmod
  1885  030B  0878               	movf	??___awmod,w
  1886  030C  07A0               	addwf	___awmod@counter,f
  1887  030D  2B00               	goto	l1160
  1888  030E                     l1162:	
  1889  030E  0875               	movf	___awmod@divisor+1,w
  1890  030F  0277               	subwf	___awmod@dividend+1,w
  1891  0310  1D03               	skipz
  1892  0311  2B14               	goto	u795
  1893  0312  0874               	movf	___awmod@divisor,w
  1894  0313  0276               	subwf	___awmod@dividend,w
  1895  0314                     u795:	
  1896  0314  1C03               	skipc
  1897  0315  2B1C               	goto	l1166
  1898  0316  0874               	movf	___awmod@divisor,w
  1899  0317  02F6               	subwf	___awmod@dividend,f
  1900  0318  0875               	movf	___awmod@divisor+1,w
  1901  0319  1C03               	skipc
  1902  031A  03F7               	decf	___awmod@dividend+1,f
  1903  031B  02F7               	subwf	___awmod@dividend+1,f
  1904  031C                     l1166:	
  1905  031C  3001               	movlw	1
  1906  031D                     u805:	
  1907  031D  1003               	clrc
  1908  031E  0CF5               	rrf	___awmod@divisor+1,f
  1909  031F  0CF4               	rrf	___awmod@divisor,f
  1910  0320  3EFF               	addlw	-1
  1911  0321  1D03               	skipz
  1912  0322  2B1D               	goto	u805
  1913  0323  3001               	movlw	1
  1914  0324  02A0               	subwf	___awmod@counter,f
  1915  0325  1D03               	btfss	3,2
  1916  0326  2B0E               	goto	l1162
  1917  0327                     l1170:	
  1918  0327  0821               	movf	___awmod@sign,w
  1919  0328  1903               	btfsc	3,2
  1920  0329  2B2F               	goto	l1174
  1921  032A  09F6               	comf	___awmod@dividend,f
  1922  032B  09F7               	comf	___awmod@dividend+1,f
  1923  032C  0AF6               	incf	___awmod@dividend,f
  1924  032D  1903               	skipnz
  1925  032E  0AF7               	incf	___awmod@dividend+1,f
  1926  032F                     l1174:	
  1927  032F  0877               	movf	___awmod@dividend+1,w
  1928  0330  00F5               	movwf	?___awmod+1
  1929  0331  0876               	movf	___awmod@dividend,w
  1930  0332  00F4               	movwf	?___awmod
  1931  0333  0008               	return
  1932  0334                     __end_of___awmod:	
  1933                           
  1934                           	psect	text5
  1935  028C                     __ptext5:	
  1936 ;; *************** function ___awdiv *****************
  1937 ;; Defined at:
  1938 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awdiv.c"
  1939 ;; Parameters:    Size  Location     Type
  1940 ;;  divisor         2    6[COMMON] int 
  1941 ;;  dividend        2    8[COMMON] int 
  1942 ;; Auto vars:     Size  Location     Type
  1943 ;;  quotient        2    3[BANK0 ] int 
  1944 ;;  sign            1    2[BANK0 ] unsigned char 
  1945 ;;  counter         1    1[BANK0 ] unsigned char 
  1946 ;; Return value:  Size  Location     Type
  1947 ;;                  2    6[COMMON] int 
  1948 ;; Registers used:
  1949 ;;		wreg, status,2, status,0
  1950 ;; Tracked objects:
  1951 ;;		On entry : 0/0
  1952 ;;		On exit  : 0/0
  1953 ;;		Unchanged: 0/0
  1954 ;; Data sizes:     COMMON   BANK0   BANK1
  1955 ;;      Params:         4       0       0
  1956 ;;      Locals:         0       4       0
  1957 ;;      Temps:          0       1       0
  1958 ;;      Totals:         4       5       0
  1959 ;;Total ram usage:        9 bytes
  1960 ;; Hardware stack levels used:    1
  1961 ;; Hardware stack levels required when called:    1
  1962 ;; This function calls:
  1963 ;;		Nothing
  1964 ;; This function is called by:
  1965 ;;		_main
  1966 ;;		_LCD_Write_Int
  1967 ;; This function uses a non-reentrant model
  1968 ;;
  1969                           
  1970                           
  1971                           ;psect for function ___awdiv
  1972  028C                     ___awdiv:	
  1973                           
  1974                           ;incstack = 0
  1975                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  1976  028C  1283               	bcf	3,5	;RP0=0, select bank0
  1977  028D  1303               	bcf	3,6	;RP1=0, select bank0
  1978  028E  01A2               	clrf	___awdiv@sign
  1979  028F  1FF7               	btfss	___awdiv@divisor+1,7
  1980  0290  2A98               	goto	l1104
  1981  0291  09F6               	comf	___awdiv@divisor,f
  1982  0292  09F7               	comf	___awdiv@divisor+1,f
  1983  0293  0AF6               	incf	___awdiv@divisor,f
  1984  0294  1903               	skipnz
  1985  0295  0AF7               	incf	___awdiv@divisor+1,f
  1986  0296  01A2               	clrf	___awdiv@sign
  1987  0297  0AA2               	incf	___awdiv@sign,f
  1988  0298                     l1104:	
  1989  0298  1FF9               	btfss	___awdiv@dividend+1,7
  1990  0299  2AA3               	goto	l1110
  1991  029A  09F8               	comf	___awdiv@dividend,f
  1992  029B  09F9               	comf	___awdiv@dividend+1,f
  1993  029C  0AF8               	incf	___awdiv@dividend,f
  1994  029D  1903               	skipnz
  1995  029E  0AF9               	incf	___awdiv@dividend+1,f
  1996  029F  3001               	movlw	1
  1997  02A0  00A0               	movwf	??___awdiv
  1998  02A1  0820               	movf	??___awdiv,w
  1999  02A2  06A2               	xorwf	___awdiv@sign,f
  2000  02A3                     l1110:	
  2001  02A3  01A3               	clrf	___awdiv@quotient
  2002  02A4  01A4               	clrf	___awdiv@quotient+1
  2003  02A5  0876               	movf	___awdiv@divisor,w
  2004  02A6  0477               	iorwf	___awdiv@divisor+1,w
  2005  02A7  1903               	btfsc	3,2
  2006  02A8  2ADA               	goto	l1132
  2007  02A9  01A1               	clrf	___awdiv@counter
  2008  02AA  0AA1               	incf	___awdiv@counter,f
  2009  02AB                     l1120:	
  2010  02AB  1BF7               	btfsc	___awdiv@divisor+1,7
  2011  02AC  2AB9               	goto	l1122
  2012  02AD  3001               	movlw	1
  2013  02AE                     u675:	
  2014  02AE  1003               	clrc
  2015  02AF  0DF6               	rlf	___awdiv@divisor,f
  2016  02B0  0DF7               	rlf	___awdiv@divisor+1,f
  2017  02B1  3EFF               	addlw	-1
  2018  02B2  1D03               	skipz
  2019  02B3  2AAE               	goto	u675
  2020  02B4  3001               	movlw	1
  2021  02B5  00A0               	movwf	??___awdiv
  2022  02B6  0820               	movf	??___awdiv,w
  2023  02B7  07A1               	addwf	___awdiv@counter,f
  2024  02B8  2AAB               	goto	l1120
  2025  02B9                     l1122:	
  2026  02B9  3001               	movlw	1
  2027  02BA                     u695:	
  2028  02BA  1003               	clrc
  2029  02BB  0DA3               	rlf	___awdiv@quotient,f
  2030  02BC  0DA4               	rlf	___awdiv@quotient+1,f
  2031  02BD  3EFF               	addlw	-1
  2032  02BE  1D03               	skipz
  2033  02BF  2ABA               	goto	u695
  2034  02C0  0877               	movf	___awdiv@divisor+1,w
  2035  02C1  0279               	subwf	___awdiv@dividend+1,w
  2036  02C2  1D03               	skipz
  2037  02C3  2AC6               	goto	u705
  2038  02C4  0876               	movf	___awdiv@divisor,w
  2039  02C5  0278               	subwf	___awdiv@dividend,w
  2040  02C6                     u705:	
  2041  02C6  1C03               	skipc
  2042  02C7  2ACF               	goto	l1128
  2043  02C8  0876               	movf	___awdiv@divisor,w
  2044  02C9  02F8               	subwf	___awdiv@dividend,f
  2045  02CA  0877               	movf	___awdiv@divisor+1,w
  2046  02CB  1C03               	skipc
  2047  02CC  03F9               	decf	___awdiv@dividend+1,f
  2048  02CD  02F9               	subwf	___awdiv@dividend+1,f
  2049  02CE  1423               	bsf	___awdiv@quotient,0
  2050  02CF                     l1128:	
  2051  02CF  3001               	movlw	1
  2052  02D0                     u715:	
  2053  02D0  1003               	clrc
  2054  02D1  0CF7               	rrf	___awdiv@divisor+1,f
  2055  02D2  0CF6               	rrf	___awdiv@divisor,f
  2056  02D3  3EFF               	addlw	-1
  2057  02D4  1D03               	skipz
  2058  02D5  2AD0               	goto	u715
  2059  02D6  3001               	movlw	1
  2060  02D7  02A1               	subwf	___awdiv@counter,f
  2061  02D8  1D03               	btfss	3,2
  2062  02D9  2AB9               	goto	l1122
  2063  02DA                     l1132:	
  2064  02DA  0822               	movf	___awdiv@sign,w
  2065  02DB  1903               	btfsc	3,2
  2066  02DC  2AE2               	goto	l1136
  2067  02DD  09A3               	comf	___awdiv@quotient,f
  2068  02DE  09A4               	comf	___awdiv@quotient+1,f
  2069  02DF  0AA3               	incf	___awdiv@quotient,f
  2070  02E0  1903               	skipnz
  2071  02E1  0AA4               	incf	___awdiv@quotient+1,f
  2072  02E2                     l1136:	
  2073  02E2  0824               	movf	___awdiv@quotient+1,w
  2074  02E3  00F7               	movwf	?___awdiv+1
  2075  02E4  0823               	movf	___awdiv@quotient,w
  2076  02E5  00F6               	movwf	?___awdiv
  2077  02E6  0008               	return
  2078  02E7                     __end_of___awdiv:	
  2079                           
  2080                           	psect	text6
  2081  03F7                     __ptext6:	
  2082 ;; *************** function _LCD_Write_Char *****************
  2083 ;; Defined at:
  2084 ;;		line 223 in file "lcd.c"
  2085 ;; Parameters:    Size  Location     Type
  2086 ;;  a               1    wreg     const unsigned char 
  2087 ;; Auto vars:     Size  Location     Type
  2088 ;;  a               1    8[COMMON] const unsigned char 
  2089 ;;  y               1    7[COMMON] unsigned char 
  2090 ;;  temp            1    6[COMMON] unsigned char 
  2091 ;; Return value:  Size  Location     Type
  2092 ;;                  1    wreg      void 
  2093 ;; Registers used:
  2094 ;;		wreg, status,2, status,0, pclath, cstack
  2095 ;; Tracked objects:
  2096 ;;		On entry : 0/0
  2097 ;;		On exit  : 0/0
  2098 ;;		Unchanged: 0/0
  2099 ;; Data sizes:     COMMON   BANK0   BANK1
  2100 ;;      Params:         0       0       0
  2101 ;;      Locals:         3       0       0
  2102 ;;      Temps:          1       0       0
  2103 ;;      Totals:         4       0       0
  2104 ;;Total ram usage:        4 bytes
  2105 ;; Hardware stack levels used:    1
  2106 ;; Hardware stack levels required when called:    2
  2107 ;; This function calls:
  2108 ;;		_LCD_Port
  2109 ;; This function is called by:
  2110 ;;		_LCD_Write_String
  2111 ;;		_LCD_Write_Int
  2112 ;;		_InitCustomChars
  2113 ;; This function uses a non-reentrant model
  2114 ;;
  2115                           
  2116                           
  2117                           ;psect for function _LCD_Write_Char
  2118  03F7                     _LCD_Write_Char:	
  2119                           
  2120                           ;incstack = 0
  2121                           ; Regs used in _LCD_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  2122                           ;LCD_Write_Char@a stored from wreg
  2123  03F7  00F8               	movwf	LCD_Write_Char@a
  2124                           
  2125                           ;lcd.c: 225: char temp,y;
  2126                           ;lcd.c: 226: temp = a&0x0F;
  2127  03F8  0878               	movf	LCD_Write_Char@a,w
  2128  03F9  390F               	andlw	15
  2129  03FA  00F5               	movwf	??_LCD_Write_Char
  2130  03FB  0875               	movf	??_LCD_Write_Char,w
  2131  03FC  00F6               	movwf	LCD_Write_Char@temp
  2132                           
  2133                           ;lcd.c: 227: y = a&0xF0;
  2134  03FD  0878               	movf	LCD_Write_Char@a,w
  2135  03FE  39F0               	andlw	240
  2136  03FF  00F5               	movwf	??_LCD_Write_Char
  2137  0400  0875               	movf	??_LCD_Write_Char,w
  2138  0401  00F7               	movwf	LCD_Write_Char@y
  2139                           
  2140                           ;lcd.c: 228: RC6 = 1;
  2141  0402  1283               	bcf	3,5	;RP0=0, select bank0
  2142  0403  1303               	bcf	3,6	;RP1=0, select bank0
  2143  0404  1707               	bsf	7,6	;volatile
  2144                           
  2145                           ;lcd.c: 229: LCD_Port(y>>4);
  2146  0405  0877               	movf	LCD_Write_Char@y,w
  2147  0406  00F5               	movwf	??_LCD_Write_Char
  2148  0407  3004               	movlw	4
  2149  0408                     u635:	
  2150  0408  1003               	clrc
  2151  0409  0CF5               	rrf	??_LCD_Write_Char,f
  2152  040A  3EFF               	addlw	-1
  2153  040B  1D03               	skipz
  2154  040C  2C08               	goto	u635
  2155  040D  0875               	movf	??_LCD_Write_Char,w
  2156  040E  245B               	fcall	_LCD_Port
  2157                           
  2158                           ;lcd.c: 230: RC7 = 1;
  2159  040F  1283               	bcf	3,5	;RP0=0, select bank0
  2160  0410  1303               	bcf	3,6	;RP1=0, select bank0
  2161  0411  1787               	bsf	7,7	;volatile
  2162                           
  2163                           ;lcd.c: 231: RC7 = 0;
  2164  0412  1387               	bcf	7,7	;volatile
  2165                           
  2166                           ;lcd.c: 232: _delay((unsigned long)((40)*(4000000/4000000.0)));
  2167  0413  300D               	movlw	13
  2168  0414  00F5               	movwf	??_LCD_Write_Char
  2169  0415                     u1197:	
  2170  0415  0BF5               	decfsz	??_LCD_Write_Char,f
  2171  0416  2C15               	goto	u1197
  2172                           
  2173                           ;lcd.c: 233: LCD_Port(temp);
  2174  0417  0876               	movf	LCD_Write_Char@temp,w
  2175  0418  245B               	fcall	_LCD_Port
  2176                           
  2177                           ;lcd.c: 234: RC7 = 1;
  2178  0419  1283               	bcf	3,5	;RP0=0, select bank0
  2179  041A  1303               	bcf	3,6	;RP1=0, select bank0
  2180  041B  1787               	bsf	7,7	;volatile
  2181                           
  2182                           ;lcd.c: 235: RC7 = 0;
  2183  041C  1387               	bcf	7,7	;volatile
  2184                           
  2185                           ;lcd.c: 236: _delay((unsigned long)((40)*(4000000/4000000.0)));
  2186  041D  300D               	movlw	13
  2187  041E  00F5               	movwf	??_LCD_Write_Char
  2188  041F                     u1207:	
  2189  041F  0BF5               	decfsz	??_LCD_Write_Char,f
  2190  0420  2C1F               	goto	u1207
  2191  0421  0008               	return
  2192  0422                     __end_of_LCD_Write_Char:	
  2193                           
  2194                           	psect	text7
  2195  0334                     __ptext7:	
  2196 ;; *************** function _LCD_Set_Cursor *****************
  2197 ;; Defined at:
  2198 ;;		line 82 in file "lcd.c"
  2199 ;; Parameters:    Size  Location     Type
  2200 ;;  x               1    wreg     unsigned char 
  2201 ;;  y               1    8[COMMON] unsigned char 
  2202 ;; Auto vars:     Size  Location     Type
  2203 ;;  x               1    2[BANK0 ] unsigned char 
  2204 ;;  temp            1    5[BANK0 ] unsigned char 
  2205 ;;  w               1    4[BANK0 ] unsigned char 
  2206 ;;  z               1    3[BANK0 ] unsigned char 
  2207 ;; Return value:  Size  Location     Type
  2208 ;;                  1    wreg      void 
  2209 ;; Registers used:
  2210 ;;		wreg, status,2, status,0, pclath, cstack
  2211 ;; Tracked objects:
  2212 ;;		On entry : 0/0
  2213 ;;		On exit  : 0/0
  2214 ;;		Unchanged: 0/0
  2215 ;; Data sizes:     COMMON   BANK0   BANK1
  2216 ;;      Params:         1       0       0
  2217 ;;      Locals:         0       4       0
  2218 ;;      Temps:          0       2       0
  2219 ;;      Totals:         1       6       0
  2220 ;;Total ram usage:        7 bytes
  2221 ;; Hardware stack levels used:    1
  2222 ;; Hardware stack levels required when called:    3
  2223 ;; This function calls:
  2224 ;;		_LCD_Cmd
  2225 ;; This function is called by:
  2226 ;;		_main
  2227 ;; This function uses a non-reentrant model
  2228 ;;
  2229                           
  2230                           
  2231                           ;psect for function _LCD_Set_Cursor
  2232  0334                     _LCD_Set_Cursor:	
  2233                           
  2234                           ;incstack = 0
  2235                           ; Regs used in _LCD_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  2236                           ;LCD_Set_Cursor@x stored from wreg
  2237  0334  1283               	bcf	3,5	;RP0=0, select bank0
  2238  0335  1303               	bcf	3,6	;RP1=0, select bank0
  2239  0336  00A2               	movwf	LCD_Set_Cursor@x
  2240                           
  2241                           ;lcd.c: 86: char temp,z,w;
  2242                           ;lcd.c: 88: if(x == 0)
  2243  0337  0822               	movf	LCD_Set_Cursor@x,w
  2244  0338  1D03               	btfss	3,2
  2245  0339  2B57               	goto	l1282
  2246                           
  2247                           ;lcd.c: 89: {
  2248                           ;lcd.c: 90: temp = 0x80 + y;
  2249  033A  0878               	movf	LCD_Set_Cursor@y,w
  2250  033B  3E80               	addlw	128
  2251  033C  00A0               	movwf	??_LCD_Set_Cursor
  2252  033D  0820               	movf	??_LCD_Set_Cursor,w
  2253  033E  00A5               	movwf	LCD_Set_Cursor@temp
  2254                           
  2255                           ;lcd.c: 91: z = temp>>4;
  2256  033F  0825               	movf	LCD_Set_Cursor@temp,w
  2257  0340  00A0               	movwf	??_LCD_Set_Cursor
  2258  0341  3004               	movlw	4
  2259  0342                     u875:	
  2260  0342  1003               	clrc
  2261  0343  0CA0               	rrf	??_LCD_Set_Cursor,f
  2262  0344  3EFF               	addlw	-1
  2263  0345  1D03               	skipz
  2264  0346  2B42               	goto	u875
  2265  0347  0820               	movf	??_LCD_Set_Cursor,w
  2266  0348  00A1               	movwf	??_LCD_Set_Cursor+1
  2267  0349  0821               	movf	??_LCD_Set_Cursor+1,w
  2268  034A  00A3               	movwf	LCD_Set_Cursor@z
  2269                           
  2270                           ;lcd.c: 92: w = temp & 0x0F;
  2271  034B  0825               	movf	LCD_Set_Cursor@temp,w
  2272  034C  390F               	andlw	15
  2273  034D  00A0               	movwf	??_LCD_Set_Cursor
  2274  034E  0820               	movf	??_LCD_Set_Cursor,w
  2275  034F  00A4               	movwf	LCD_Set_Cursor@w
  2276                           
  2277                           ;lcd.c: 93: LCD_Cmd(z);
  2278  0350  0823               	movf	LCD_Set_Cursor@z,w
  2279  0351  24A4               	fcall	_LCD_Cmd
  2280                           
  2281                           ;lcd.c: 94: LCD_Cmd(w);
  2282  0352  1283               	bcf	3,5	;RP0=0, select bank0
  2283  0353  1303               	bcf	3,6	;RP1=0, select bank0
  2284  0354  0824               	movf	LCD_Set_Cursor@w,w
  2285  0355  24A4               	fcall	_LCD_Cmd
  2286                           
  2287                           ;lcd.c: 95: }
  2288  0356  0008               	return
  2289  0357                     l1282:	
  2290                           
  2291                           ;lcd.c: 97: else if(x == 1)
  2292  0357  1283               	bcf	3,5	;RP0=0, select bank0
  2293  0358  1303               	bcf	3,6	;RP1=0, select bank0
  2294  0359  0322               	decf	LCD_Set_Cursor@x,w
  2295  035A  1D03               	btfss	3,2
  2296  035B  0008               	return
  2297                           
  2298                           ;lcd.c: 98: {
  2299                           ;lcd.c: 99: temp = 0xC0 + y;
  2300  035C  0878               	movf	LCD_Set_Cursor@y,w
  2301  035D  3EC0               	addlw	192
  2302  035E  00A0               	movwf	??_LCD_Set_Cursor
  2303  035F  0820               	movf	??_LCD_Set_Cursor,w
  2304  0360  00A5               	movwf	LCD_Set_Cursor@temp
  2305                           
  2306                           ;lcd.c: 100: z = temp>>4;
  2307  0361  0825               	movf	LCD_Set_Cursor@temp,w
  2308  0362  00A0               	movwf	??_LCD_Set_Cursor
  2309  0363  3004               	movlw	4
  2310  0364                     u895:	
  2311  0364  1003               	clrc
  2312  0365  0CA0               	rrf	??_LCD_Set_Cursor,f
  2313  0366  3EFF               	addlw	-1
  2314  0367  1D03               	skipz
  2315  0368  2B64               	goto	u895
  2316  0369  0820               	movf	??_LCD_Set_Cursor,w
  2317  036A  00A1               	movwf	??_LCD_Set_Cursor+1
  2318  036B  0821               	movf	??_LCD_Set_Cursor+1,w
  2319  036C  00A3               	movwf	LCD_Set_Cursor@z
  2320                           
  2321                           ;lcd.c: 101: w = temp & 0x0F;
  2322  036D  0825               	movf	LCD_Set_Cursor@temp,w
  2323  036E  390F               	andlw	15
  2324  036F  00A0               	movwf	??_LCD_Set_Cursor
  2325  0370  0820               	movf	??_LCD_Set_Cursor,w
  2326  0371  00A4               	movwf	LCD_Set_Cursor@w
  2327                           
  2328                           ;lcd.c: 102: LCD_Cmd(z);
  2329  0372  0823               	movf	LCD_Set_Cursor@z,w
  2330  0373  24A4               	fcall	_LCD_Cmd
  2331                           
  2332                           ;lcd.c: 103: LCD_Cmd(w);
  2333  0374  1283               	bcf	3,5	;RP0=0, select bank0
  2334  0375  1303               	bcf	3,6	;RP1=0, select bank0
  2335  0376  0824               	movf	LCD_Set_Cursor@w,w
  2336  0377  24A4               	fcall	_LCD_Cmd
  2337  0378  0008               	return
  2338  0379                     __end_of_LCD_Set_Cursor:	
  2339                           
  2340                           	psect	text8
  2341  022A                     __ptext8:	
  2342 ;; *************** function _LCD_Init *****************
  2343 ;; Defined at:
  2344 ;;		line 154 in file "lcd.c"
  2345 ;; Parameters:    Size  Location     Type
  2346 ;;  style           1    wreg     unsigned char 
  2347 ;; Auto vars:     Size  Location     Type
  2348 ;;  style           1    0[BANK0 ] unsigned char 
  2349 ;; Return value:  Size  Location     Type
  2350 ;;                  1    wreg      void 
  2351 ;; Registers used:
  2352 ;;		wreg, status,2, status,0, pclath, cstack
  2353 ;; Tracked objects:
  2354 ;;		On entry : 0/0
  2355 ;;		On exit  : 0/0
  2356 ;;		Unchanged: 0/0
  2357 ;; Data sizes:     COMMON   BANK0   BANK1
  2358 ;;      Params:         0       0       0
  2359 ;;      Locals:         0       1       0
  2360 ;;      Temps:          2       0       0
  2361 ;;      Totals:         2       1       0
  2362 ;;Total ram usage:        3 bytes
  2363 ;; Hardware stack levels used:    1
  2364 ;; Hardware stack levels required when called:    3
  2365 ;; This function calls:
  2366 ;;		_LCD_Cmd
  2367 ;;		_LCD_Port
  2368 ;; This function is called by:
  2369 ;;		_main
  2370 ;; This function uses a non-reentrant model
  2371 ;;
  2372                           
  2373                           
  2374                           ;psect for function _LCD_Init
  2375  022A                     _LCD_Init:	
  2376                           
  2377                           ;incstack = 0
  2378                           ; Regs used in _LCD_Init: [wreg+status,2+status,0+pclath+cstack]
  2379                           ;LCD_Init@style stored from wreg
  2380  022A  1283               	bcf	3,5	;RP0=0, select bank0
  2381  022B  1303               	bcf	3,6	;RP1=0, select bank0
  2382  022C  00A0               	movwf	LCD_Init@style
  2383                           
  2384                           ;lcd.c: 156: LCD_Port(0x00);
  2385  022D  3000               	movlw	0
  2386  022E  245B               	fcall	_LCD_Port
  2387                           
  2388                           ;lcd.c: 158: _delay((unsigned long)((100)*(4000000/4000.0)));
  2389  022F  3082               	movlw	130
  2390  0230  00F9               	movwf	??_LCD_Init+1
  2391  0231  30DD               	movlw	221
  2392  0232  00F8               	movwf	??_LCD_Init
  2393  0233                     u1217:	
  2394  0233  0BF8               	decfsz	??_LCD_Init,f
  2395  0234  2A33               	goto	u1217
  2396  0235  0BF9               	decfsz	??_LCD_Init+1,f
  2397  0236  2A33               	goto	u1217
  2398  0237  2A38               	nop2
  2399                           
  2400                           ;lcd.c: 160: LCD_Cmd(0x03);
  2401  0238  3003               	movlw	3
  2402  0239  24A4               	fcall	_LCD_Cmd
  2403                           
  2404                           ;lcd.c: 162: _delay((unsigned long)((10)*(4000000/4000.0)));
  2405  023A  300D               	movlw	13
  2406  023B  00F9               	movwf	??_LCD_Init+1
  2407  023C  30FB               	movlw	251
  2408  023D  00F8               	movwf	??_LCD_Init
  2409  023E                     u1227:	
  2410  023E  0BF8               	decfsz	??_LCD_Init,f
  2411  023F  2A3E               	goto	u1227
  2412  0240  0BF9               	decfsz	??_LCD_Init+1,f
  2413  0241  2A3E               	goto	u1227
  2414  0242  2A43               	nop2
  2415                           
  2416                           ;lcd.c: 164: LCD_Cmd(0x03);
  2417  0243  3003               	movlw	3
  2418  0244  24A4               	fcall	_LCD_Cmd
  2419                           
  2420                           ;lcd.c: 166: _delay((unsigned long)((120)*(4000000/4000000.0)));
  2421  0245  3027               	movlw	39
  2422  0246  00F8               	movwf	??_LCD_Init
  2423  0247                     u1237:	
  2424  0247  0BF8               	decfsz	??_LCD_Init,f
  2425  0248  2A47               	goto	u1237
  2426  0249  2A4A               	nop2	;nop
  2427                           
  2428                           ;lcd.c: 168: LCD_Cmd(0x03);
  2429  024A  3003               	movlw	3
  2430  024B  24A4               	fcall	_LCD_Cmd
  2431                           
  2432                           ;lcd.c: 170: _delay((unsigned long)((120)*(4000000/4000000.0)));
  2433  024C  3027               	movlw	39
  2434  024D  00F8               	movwf	??_LCD_Init
  2435  024E                     u1247:	
  2436  024E  0BF8               	decfsz	??_LCD_Init,f
  2437  024F  2A4E               	goto	u1247
  2438  0250  2A51               	nop2	;nop
  2439                           
  2440                           ;lcd.c: 172: LCD_Cmd(0x02);
  2441  0251  3002               	movlw	2
  2442  0252  24A4               	fcall	_LCD_Cmd
  2443                           
  2444                           ;lcd.c: 174: _delay((unsigned long)((120)*(4000000/4000000.0)));
  2445  0253  3027               	movlw	39
  2446  0254  00F8               	movwf	??_LCD_Init
  2447  0255                     u1257:	
  2448  0255  0BF8               	decfsz	??_LCD_Init,f
  2449  0256  2A55               	goto	u1257
  2450  0257  2A58               	nop2	;nop
  2451                           
  2452                           ;lcd.c: 176: LCD_Cmd(0x2);
  2453  0258  3002               	movlw	2
  2454  0259  24A4               	fcall	_LCD_Cmd
  2455                           
  2456                           ;lcd.c: 178: LCD_Cmd(0x8);
  2457  025A  3008               	movlw	8
  2458  025B  24A4               	fcall	_LCD_Cmd
  2459                           
  2460                           ;lcd.c: 180: _delay((unsigned long)((120)*(4000000/4000000.0)));
  2461  025C  3027               	movlw	39
  2462  025D  00F8               	movwf	??_LCD_Init
  2463  025E                     u1267:	
  2464  025E  0BF8               	decfsz	??_LCD_Init,f
  2465  025F  2A5E               	goto	u1267
  2466  0260  2A61               	nop2	;nop
  2467                           
  2468                           ;lcd.c: 182: LCD_Cmd(0x0);
  2469  0261  3000               	movlw	0
  2470  0262  24A4               	fcall	_LCD_Cmd
  2471                           
  2472                           ;lcd.c: 184: LCD_Cmd(0x8);
  2473  0263  3008               	movlw	8
  2474  0264  24A4               	fcall	_LCD_Cmd
  2475                           
  2476                           ;lcd.c: 186: _delay((unsigned long)((120)*(4000000/4000000.0)));
  2477  0265  3027               	movlw	39
  2478  0266  00F8               	movwf	??_LCD_Init
  2479  0267                     u1277:	
  2480  0267  0BF8               	decfsz	??_LCD_Init,f
  2481  0268  2A67               	goto	u1277
  2482  0269  2A6A               	nop2	;nop
  2483                           
  2484                           ;lcd.c: 188: LCD_Cmd(0x0);
  2485  026A  3000               	movlw	0
  2486  026B  24A4               	fcall	_LCD_Cmd
  2487                           
  2488                           ;lcd.c: 190: LCD_Cmd(0x1);
  2489  026C  3001               	movlw	1
  2490  026D  24A4               	fcall	_LCD_Cmd
  2491                           
  2492                           ;lcd.c: 192: _delay((unsigned long)((5)*(4000000/4000.0)));
  2493  026E  3007               	movlw	7
  2494  026F  00F9               	movwf	??_LCD_Init+1
  2495  0270  307D               	movlw	125
  2496  0271  00F8               	movwf	??_LCD_Init
  2497  0272                     u1287:	
  2498  0272  0BF8               	decfsz	??_LCD_Init,f
  2499  0273  2A72               	goto	u1287
  2500  0274  0BF9               	decfsz	??_LCD_Init+1,f
  2501  0275  2A72               	goto	u1287
  2502                           
  2503                           ;lcd.c: 194: LCD_Cmd(0x0);
  2504  0276  3000               	movlw	0
  2505  0277  24A4               	fcall	_LCD_Cmd
  2506                           
  2507                           ;lcd.c: 196: LCD_Cmd(0x6);
  2508  0278  3006               	movlw	6
  2509  0279  24A4               	fcall	_LCD_Cmd
  2510                           
  2511                           ;lcd.c: 198: _delay((unsigned long)((120)*(4000000/4000000.0)));
  2512  027A  3027               	movlw	39
  2513  027B  00F8               	movwf	??_LCD_Init
  2514  027C                     u1297:	
  2515  027C  0BF8               	decfsz	??_LCD_Init,f
  2516  027D  2A7C               	goto	u1297
  2517  027E  2A7F               	nop2	;nop
  2518                           
  2519                           ;lcd.c: 200: LCD_Cmd(0x0);
  2520  027F  3000               	movlw	0
  2521  0280  24A4               	fcall	_LCD_Cmd
  2522                           
  2523                           ;lcd.c: 202: LCD_Cmd(0xc|style);
  2524  0281  1283               	bcf	3,5	;RP0=0, select bank0
  2525  0282  1303               	bcf	3,6	;RP1=0, select bank0
  2526  0283  0820               	movf	LCD_Init@style,w
  2527  0284  380C               	iorlw	12
  2528  0285  24A4               	fcall	_LCD_Cmd
  2529                           
  2530                           ;lcd.c: 204: _delay((unsigned long)((120)*(4000000/4000000.0)));
  2531  0286  3027               	movlw	39
  2532  0287  00F8               	movwf	??_LCD_Init
  2533  0288                     u1307:	
  2534  0288  0BF8               	decfsz	??_LCD_Init,f
  2535  0289  2A88               	goto	u1307
  2536  028A  2A8B               	nop2	;nop
  2537  028B  0008               	return
  2538  028C                     __end_of_LCD_Init:	
  2539                           
  2540                           	psect	text9
  2541  04DA                     __ptext9:	
  2542 ;; *************** function _LCD_Clear *****************
  2543 ;; Defined at:
  2544 ;;		line 75 in file "lcd.c"
  2545 ;; Parameters:    Size  Location     Type
  2546 ;;		None
  2547 ;; Auto vars:     Size  Location     Type
  2548 ;;		None
  2549 ;; Return value:  Size  Location     Type
  2550 ;;                  1    wreg      void 
  2551 ;; Registers used:
  2552 ;;		wreg, status,2, status,0, pclath, cstack
  2553 ;; Tracked objects:
  2554 ;;		On entry : 0/0
  2555 ;;		On exit  : 0/0
  2556 ;;		Unchanged: 0/0
  2557 ;; Data sizes:     COMMON   BANK0   BANK1
  2558 ;;      Params:         0       0       0
  2559 ;;      Locals:         0       0       0
  2560 ;;      Temps:          0       0       0
  2561 ;;      Totals:         0       0       0
  2562 ;;Total ram usage:        0 bytes
  2563 ;; Hardware stack levels used:    1
  2564 ;; Hardware stack levels required when called:    3
  2565 ;; This function calls:
  2566 ;;		_LCD_Cmd
  2567 ;; This function is called by:
  2568 ;;		_main
  2569 ;; This function uses a non-reentrant model
  2570 ;;
  2571                           
  2572                           
  2573                           ;psect for function _LCD_Clear
  2574  04DA                     _LCD_Clear:	
  2575                           
  2576                           ;lcd.c: 77: LCD_Cmd(0);
  2577                           
  2578                           ;incstack = 0
  2579                           ; Regs used in _LCD_Clear: [wreg+status,2+status,0+pclath+cstack]
  2580  04DA  3000               	movlw	0
  2581  04DB  24A4               	fcall	_LCD_Cmd
  2582                           
  2583                           ;lcd.c: 78: LCD_Cmd(1);
  2584  04DC  3001               	movlw	1
  2585  04DD  24A4               	fcall	_LCD_Cmd
  2586  04DE  0008               	return
  2587  04DF                     __end_of_LCD_Clear:	
  2588                           
  2589                           	psect	text10
  2590  04A4                     __ptext10:	
  2591 ;; *************** function _LCD_Cmd *****************
  2592 ;; Defined at:
  2593 ;;		line 65 in file "lcd.c"
  2594 ;; Parameters:    Size  Location     Type
  2595 ;;  a               1    wreg     unsigned char 
  2596 ;; Auto vars:     Size  Location     Type
  2597 ;;  a               1    7[COMMON] unsigned char 
  2598 ;; Return value:  Size  Location     Type
  2599 ;;                  1    wreg      void 
  2600 ;; Registers used:
  2601 ;;		wreg, status,2, status,0, pclath, cstack
  2602 ;; Tracked objects:
  2603 ;;		On entry : 0/0
  2604 ;;		On exit  : 0/0
  2605 ;;		Unchanged: 0/0
  2606 ;; Data sizes:     COMMON   BANK0   BANK1
  2607 ;;      Params:         0       0       0
  2608 ;;      Locals:         1       0       0
  2609 ;;      Temps:          2       0       0
  2610 ;;      Totals:         3       0       0
  2611 ;;Total ram usage:        3 bytes
  2612 ;; Hardware stack levels used:    1
  2613 ;; Hardware stack levels required when called:    2
  2614 ;; This function calls:
  2615 ;;		_LCD_Port
  2616 ;; This function is called by:
  2617 ;;		_LCD_Clear
  2618 ;;		_LCD_Set_Cursor
  2619 ;;		_LCD_Init
  2620 ;;		_InitCustomChars
  2621 ;; This function uses a non-reentrant model
  2622 ;;
  2623                           
  2624                           
  2625                           ;psect for function _LCD_Cmd
  2626  04A4                     _LCD_Cmd:	
  2627                           
  2628                           ;incstack = 0
  2629                           ; Regs used in _LCD_Cmd: [wreg+status,2+status,0+pclath+cstack]
  2630                           ;LCD_Cmd@a stored from wreg
  2631  04A4  00F7               	movwf	LCD_Cmd@a
  2632                           
  2633                           ;lcd.c: 67: RC6 = 0;
  2634  04A5  1283               	bcf	3,5	;RP0=0, select bank0
  2635  04A6  1303               	bcf	3,6	;RP1=0, select bank0
  2636  04A7  1307               	bcf	7,6	;volatile
  2637                           
  2638                           ;lcd.c: 68: LCD_Port(a);
  2639  04A8  0877               	movf	LCD_Cmd@a,w
  2640  04A9  245B               	fcall	_LCD_Port
  2641                           
  2642                           ;lcd.c: 69: RC7 = 1;
  2643  04AA  1283               	bcf	3,5	;RP0=0, select bank0
  2644  04AB  1303               	bcf	3,6	;RP1=0, select bank0
  2645  04AC  1787               	bsf	7,7	;volatile
  2646                           
  2647                           ;lcd.c: 70: RC7 = 0;
  2648  04AD  1387               	bcf	7,7	;volatile
  2649                           
  2650                           ;lcd.c: 71: _delay((unsigned long)((4)*(4000000/4000.0)));
  2651  04AE  3006               	movlw	6
  2652  04AF  00F6               	movwf	??_LCD_Cmd+1
  2653  04B0  3030               	movlw	48
  2654  04B1  00F5               	movwf	??_LCD_Cmd
  2655  04B2                     u1317:	
  2656  04B2  0BF5               	decfsz	??_LCD_Cmd,f
  2657  04B3  2CB2               	goto	u1317
  2658  04B4  0BF6               	decfsz	??_LCD_Cmd+1,f
  2659  04B5  2CB2               	goto	u1317
  2660  04B6  0000               	nop
  2661  04B7  0008               	return
  2662  04B8                     __end_of_LCD_Cmd:	
  2663                           
  2664                           	psect	text11
  2665  045B                     __ptext11:	
  2666 ;; *************** function _LCD_Port *****************
  2667 ;; Defined at:
  2668 ;;		line 41 in file "lcd.c"
  2669 ;; Parameters:    Size  Location     Type
  2670 ;;  a               1    wreg     unsigned char 
  2671 ;; Auto vars:     Size  Location     Type
  2672 ;;  a               1    4[COMMON] unsigned char 
  2673 ;; Return value:  Size  Location     Type
  2674 ;;                  1    wreg      void 
  2675 ;; Registers used:
  2676 ;;		wreg
  2677 ;; Tracked objects:
  2678 ;;		On entry : 0/0
  2679 ;;		On exit  : 0/0
  2680 ;;		Unchanged: 0/0
  2681 ;; Data sizes:     COMMON   BANK0   BANK1
  2682 ;;      Params:         0       0       0
  2683 ;;      Locals:         1       0       0
  2684 ;;      Temps:          0       0       0
  2685 ;;      Totals:         1       0       0
  2686 ;;Total ram usage:        1 bytes
  2687 ;; Hardware stack levels used:    1
  2688 ;; Hardware stack levels required when called:    1
  2689 ;; This function calls:
  2690 ;;		Nothing
  2691 ;; This function is called by:
  2692 ;;		_LCD_Cmd
  2693 ;;		_LCD_Init
  2694 ;;		_LCD_Write_Char
  2695 ;; This function uses a non-reentrant model
  2696 ;;
  2697                           
  2698                           
  2699                           ;psect for function _LCD_Port
  2700  045B                     _LCD_Port:	
  2701                           
  2702                           ;incstack = 0
  2703                           ; Regs used in _LCD_Port: [wreg]
  2704                           ;LCD_Port@a stored from wreg
  2705  045B  00F4               	movwf	LCD_Port@a
  2706                           
  2707                           ;lcd.c: 43: if(a & 1)
  2708  045C  1C74               	btfss	LCD_Port@a,0
  2709  045D  2C62               	goto	l175
  2710                           
  2711                           ;lcd.c: 44: RC2 = 1;
  2712  045E  1283               	bcf	3,5	;RP0=0, select bank0
  2713  045F  1303               	bcf	3,6	;RP1=0, select bank0
  2714  0460  1507               	bsf	7,2	;volatile
  2715  0461  2C65               	goto	l176
  2716  0462                     l175:	
  2717                           
  2718                           ;lcd.c: 45: else
  2719                           ;lcd.c: 46: RC2 = 0;
  2720  0462  1283               	bcf	3,5	;RP0=0, select bank0
  2721  0463  1303               	bcf	3,6	;RP1=0, select bank0
  2722  0464  1107               	bcf	7,2	;volatile
  2723  0465                     l176:	
  2724                           
  2725                           ;lcd.c: 48: if(a & 2)
  2726  0465  1CF4               	btfss	LCD_Port@a,1
  2727  0466  2C69               	goto	l177
  2728                           
  2729                           ;lcd.c: 49: RC3 = 1;
  2730  0467  1587               	bsf	7,3	;volatile
  2731  0468  2C6A               	goto	l178
  2732  0469                     l177:	
  2733                           
  2734                           ;lcd.c: 50: else
  2735                           ;lcd.c: 51: RC3 = 0;
  2736  0469  1187               	bcf	7,3	;volatile
  2737  046A                     l178:	
  2738                           
  2739                           ;lcd.c: 53: if(a & 4)
  2740  046A  1D74               	btfss	LCD_Port@a,2
  2741  046B  2C6E               	goto	l179
  2742                           
  2743                           ;lcd.c: 54: RC4 = 1;
  2744  046C  1607               	bsf	7,4	;volatile
  2745  046D  2C6F               	goto	l180
  2746  046E                     l179:	
  2747                           
  2748                           ;lcd.c: 55: else
  2749                           ;lcd.c: 56: RC4 = 0;
  2750  046E  1207               	bcf	7,4	;volatile
  2751  046F                     l180:	
  2752                           
  2753                           ;lcd.c: 58: if(a & 8)
  2754  046F  1DF4               	btfss	LCD_Port@a,3
  2755  0470  2C73               	goto	l181
  2756                           
  2757                           ;lcd.c: 59: RC5 = 1;
  2758  0471  1687               	bsf	7,5	;volatile
  2759  0472  0008               	return
  2760  0473                     l181:	
  2761                           
  2762                           ;lcd.c: 60: else
  2763                           ;lcd.c: 61: RC5 = 0;
  2764  0473  1287               	bcf	7,5	;volatile
  2765  0474  0008               	return
  2766  0475                     __end_of_LCD_Port:	
  2767                           
  2768                           	psect	text12
  2769  0379                     __ptext12:	
  2770 ;; *************** function _Init *****************
  2771 ;; Defined at:
  2772 ;;		line 26 in file "system.c"
  2773 ;; Parameters:    Size  Location     Type
  2774 ;;		None
  2775 ;; Auto vars:     Size  Location     Type
  2776 ;;		None
  2777 ;; Return value:  Size  Location     Type
  2778 ;;                  1    wreg      void 
  2779 ;; Registers used:
  2780 ;;		wreg, status,2, status,0
  2781 ;; Tracked objects:
  2782 ;;		On entry : 0/0
  2783 ;;		On exit  : 0/0
  2784 ;;		Unchanged: 0/0
  2785 ;; Data sizes:     COMMON   BANK0   BANK1
  2786 ;;      Params:         0       0       0
  2787 ;;      Locals:         0       0       0
  2788 ;;      Temps:          0       0       0
  2789 ;;      Totals:         0       0       0
  2790 ;;Total ram usage:        0 bytes
  2791 ;; Hardware stack levels used:    1
  2792 ;; Hardware stack levels required when called:    1
  2793 ;; This function calls:
  2794 ;;		Nothing
  2795 ;; This function is called by:
  2796 ;;		_main
  2797 ;; This function uses a non-reentrant model
  2798 ;;
  2799                           
  2800                           
  2801                           ;psect for function _Init
  2802  0379                     _Init:	
  2803                           
  2804                           ;system.c: 28: TRISA = 0x14;
  2805                           
  2806                           ;incstack = 0
  2807                           ; Regs used in _Init: [wreg+status,2+status,0]
  2808  0379  3014               	movlw	20
  2809  037A  1683               	bsf	3,5	;RP0=1, select bank1
  2810  037B  1303               	bcf	3,6	;RP1=0, select bank1
  2811  037C  0085               	movwf	5	;volatile
  2812                           
  2813                           ;system.c: 29: ANSELA = 0x14;
  2814  037D  3014               	movlw	20
  2815  037E  1683               	bsf	3,5	;RP0=1, select bank3
  2816  037F  1703               	bsf	3,6	;RP1=1, select bank3
  2817  0380  0085               	movwf	5	;volatile
  2818                           
  2819                           ;system.c: 30: PORTA = 0x00;
  2820  0381  1283               	bcf	3,5	;RP0=0, select bank0
  2821  0382  1303               	bcf	3,6	;RP1=0, select bank0
  2822  0383  0185               	clrf	5	;volatile
  2823                           
  2824                           ;system.c: 32: TRISB = 0b00000000;
  2825  0384  1683               	bsf	3,5	;RP0=1, select bank1
  2826  0385  1303               	bcf	3,6	;RP1=0, select bank1
  2827  0386  0186               	clrf	6	;volatile
  2828                           
  2829                           ;system.c: 33: ANSELB = 0b00000000;
  2830  0387  1683               	bsf	3,5	;RP0=1, select bank3
  2831  0388  1703               	bsf	3,6	;RP1=1, select bank3
  2832  0389  0186               	clrf	6	;volatile
  2833                           
  2834                           ;system.c: 34: PORTB = 0x00;
  2835  038A  1283               	bcf	3,5	;RP0=0, select bank0
  2836  038B  1303               	bcf	3,6	;RP1=0, select bank0
  2837  038C  0186               	clrf	6	;volatile
  2838                           
  2839                           ;system.c: 36: TRISC = 0b00100000;
  2840  038D  3020               	movlw	32
  2841  038E  1683               	bsf	3,5	;RP0=1, select bank1
  2842  038F  1303               	bcf	3,6	;RP1=0, select bank1
  2843  0390  0087               	movwf	7	;volatile
  2844                           
  2845                           ;system.c: 37: ANSELC = 0x00;
  2846  0391  1683               	bsf	3,5	;RP0=1, select bank3
  2847  0392  1703               	bsf	3,6	;RP1=1, select bank3
  2848  0393  0187               	clrf	7	;volatile
  2849                           
  2850                           ;system.c: 44: PR2 = 0xff;
  2851  0394  30FF               	movlw	255
  2852  0395  1683               	bsf	3,5	;RP0=1, select bank1
  2853  0396  1303               	bcf	3,6	;RP1=0, select bank1
  2854  0397  0092               	movwf	18	;volatile
  2855                           
  2856                           ;system.c: 48: CCP1CON = 0x00;
  2857  0398  1283               	bcf	3,5	;RP0=0, select bank0
  2858  0399  1303               	bcf	3,6	;RP1=0, select bank0
  2859  039A  0197               	clrf	23	;volatile
  2860                           
  2861                           ;system.c: 49: CCP1CONbits.CCP1M = 0xF;
  2862  039B  300F               	movlw	15
  2863  039C  0497               	iorwf	23,f	;volatile
  2864                           
  2865                           ;system.c: 50: CCPR1L = 0xFF;
  2866  039D  30FF               	movlw	255
  2867  039E  0095               	movwf	21	;volatile
  2868                           
  2869                           ;system.c: 52: PIR1bits.TMR2IF = 0;
  2870  039F  108C               	bcf	12,1	;volatile
  2871                           
  2872                           ;system.c: 53: T2CONbits.T2CKPS = 0x3;
  2873  03A0  3003               	movlw	3
  2874  03A1  0492               	iorwf	18,f	;volatile
  2875                           
  2876                           ;system.c: 55: T2CONbits.TMR2ON = 1;
  2877  03A2  1512               	bsf	18,2	;volatile
  2878  03A3                     l68:	
  2879                           ;system.c: 56: while(PIR1bits.TMR1IF);
  2880                           
  2881  03A3  180C               	btfsc	12,0	;volatile
  2882  03A4  2BA3               	goto	l68
  2883                           
  2884                           ;system.c: 57: TRISCbits.TRISC5 = 0;
  2885  03A5  1683               	bsf	3,5	;RP0=1, select bank1
  2886  03A6  1303               	bcf	3,6	;RP1=0, select bank1
  2887  03A7  1287               	bcf	7,5	;volatile
  2888                           
  2889                           ;system.c: 60: T1CON = 0;
  2890  03A8  1283               	bcf	3,5	;RP0=0, select bank0
  2891  03A9  1303               	bcf	3,6	;RP1=0, select bank0
  2892  03AA  0190               	clrf	16	;volatile
  2893                           
  2894                           ;system.c: 61: T1CONbits.T1CKPS0 = 1;
  2895  03AB  1610               	bsf	16,4	;volatile
  2896                           
  2897                           ;system.c: 62: T1CONbits.T1CKPS1 = 1;
  2898  03AC  1690               	bsf	16,5	;volatile
  2899                           
  2900                           ;system.c: 69: TMR1H = 0xE7;
  2901  03AD  30E7               	movlw	231
  2902  03AE  008F               	movwf	15	;volatile
  2903                           
  2904                           ;system.c: 70: TMR1L = 0x95;
  2905  03AF  3095               	movlw	149
  2906  03B0  008E               	movwf	14	;volatile
  2907                           
  2908                           ;system.c: 71: T1CONbits.TMR1ON = 1;
  2909  03B1  1410               	bsf	16,0	;volatile
  2910                           
  2911                           ;system.c: 72: INTCONbits.GIE = 1;
  2912  03B2  178B               	bsf	11,7	;volatile
  2913                           
  2914                           ;system.c: 73: INTCONbits.PEIE = 1;
  2915  03B3  170B               	bsf	11,6	;volatile
  2916                           
  2917                           ;system.c: 74: PIR1bits.TMR1IF = 0;
  2918  03B4  100C               	bcf	12,0	;volatile
  2919                           
  2920                           ;system.c: 75: PIE1bits.TMR1IE = 1;
  2921  03B5  1683               	bsf	3,5	;RP0=1, select bank1
  2922  03B6  1303               	bcf	3,6	;RP1=0, select bank1
  2923  03B7  140C               	bsf	12,0	;volatile
  2924  03B8  0008               	return
  2925  03B9                     __end_of_Init:	
  2926                           
  2927                           	psect	text13
  2928  043F                     __ptext13:	
  2929 ;; *************** function _ADCRead *****************
  2930 ;; Defined at:
  2931 ;;		line 15 in file "user.c"
  2932 ;; Parameters:    Size  Location     Type
  2933 ;;  ch              1    wreg     unsigned char 
  2934 ;; Auto vars:     Size  Location     Type
  2935 ;;  ch              1    5[COMMON] unsigned char 
  2936 ;; Return value:  Size  Location     Type
  2937 ;;                  1    wreg      unsigned char 
  2938 ;; Registers used:
  2939 ;;		wreg, status,2, status,0
  2940 ;; Tracked objects:
  2941 ;;		On entry : 0/0
  2942 ;;		On exit  : 0/0
  2943 ;;		Unchanged: 0/0
  2944 ;; Data sizes:     COMMON   BANK0   BANK1
  2945 ;;      Params:         0       0       0
  2946 ;;      Locals:         1       0       0
  2947 ;;      Temps:          1       0       0
  2948 ;;      Totals:         2       0       0
  2949 ;;Total ram usage:        2 bytes
  2950 ;; Hardware stack levels used:    1
  2951 ;; Hardware stack levels required when called:    1
  2952 ;; This function calls:
  2953 ;;		Nothing
  2954 ;; This function is called by:
  2955 ;;		_main
  2956 ;; This function uses a non-reentrant model
  2957 ;;
  2958                           
  2959                           
  2960                           ;psect for function _ADCRead
  2961  043F                     _ADCRead:	
  2962                           
  2963                           ;incstack = 0
  2964                           ; Regs used in _ADCRead: [wreg+status,2+status,0]
  2965                           ;ADCRead@ch stored from wreg
  2966  043F  00F5               	movwf	ADCRead@ch
  2967                           
  2968                           ;user.c: 18: ADCON0=0x00;
  2969  0440  1283               	bcf	3,5	;RP0=0, select bank0
  2970  0441  1303               	bcf	3,6	;RP1=0, select bank0
  2971  0442  019F               	clrf	31	;volatile
  2972                           
  2973                           ;user.c: 19: ADCON0=(ch<<2);
  2974  0443  0875               	movf	ADCRead@ch,w
  2975  0444  00F4               	movwf	??_ADCRead
  2976  0445  3001               	movlw	1
  2977  0446                     u845:	
  2978  0446  1003               	clrc
  2979  0447  0DF4               	rlf	??_ADCRead,f
  2980  0448  3EFF               	addlw	-1
  2981  0449  1D03               	skipz
  2982  044A  2C46               	goto	u845
  2983  044B  1003               	clrc
  2984  044C  0D74               	rlf	??_ADCRead,w
  2985  044D  009F               	movwf	31	;volatile
  2986                           
  2987                           ;user.c: 20: ADON=1;
  2988  044E  141F               	bsf	31,0	;volatile
  2989                           
  2990                           ;user.c: 21: _delay((unsigned long)((100)*(4000000/4000000.0)));
  2991  044F  3021               	movlw	33
  2992  0450  00F4               	movwf	??_ADCRead
  2993  0451                     u1327:	
  2994  0451  0BF4               	decfsz	??_ADCRead,f
  2995  0452  2C51               	goto	u1327
  2996                           
  2997                           ;user.c: 22: GO_nDONE=1;
  2998  0453  1283               	bcf	3,5	;RP0=0, select bank0
  2999  0454  1303               	bcf	3,6	;RP1=0, select bank0
  3000  0455  149F               	bsf	31,1	;volatile
  3001  0456                     l89:	
  3002                           ;user.c: 23: while(GO_nDONE);
  3003                           
  3004  0456  189F               	btfsc	31,1	;volatile
  3005  0457  2C56               	goto	l89
  3006                           
  3007                           ;user.c: 24: ADON=0;
  3008  0458  101F               	bcf	31,0	;volatile
  3009                           
  3010                           ;user.c: 25: return ADRES;
  3011  0459  081E               	movf	30,w	;volatile
  3012  045A  0008               	return
  3013  045B                     __end_of_ADCRead:	
  3014                           
  3015                           	psect	text14
  3016  0422                     __ptext14:	
  3017 ;; *************** function _int_routine *****************
  3018 ;; Defined at:
  3019 ;;		line 5 in file "interupts.c"
  3020 ;; Parameters:    Size  Location     Type
  3021 ;;		None
  3022 ;; Auto vars:     Size  Location     Type
  3023 ;;		None
  3024 ;; Return value:  Size  Location     Type
  3025 ;;                  1    wreg      void 
  3026 ;; Registers used:
  3027 ;;		wreg
  3028 ;; Tracked objects:
  3029 ;;		On entry : 0/0
  3030 ;;		On exit  : 0/0
  3031 ;;		Unchanged: 0/0
  3032 ;; Data sizes:     COMMON   BANK0   BANK1
  3033 ;;      Params:         0       0       0
  3034 ;;      Locals:         0       0       0
  3035 ;;      Temps:          4       0       0
  3036 ;;      Totals:         4       0       0
  3037 ;;Total ram usage:        4 bytes
  3038 ;; Hardware stack levels used:    1
  3039 ;; This function calls:
  3040 ;;		Nothing
  3041 ;; This function is called by:
  3042 ;;		Interrupt level 1
  3043 ;; This function uses a non-reentrant model
  3044 ;;
  3045                           
  3046                           
  3047                           ;psect for function _int_routine
  3048  0422                     _int_routine:	
  3049                           
  3050                           ;interupts.c: 7: extern unsigned char output;
  3051                           ;interupts.c: 10: if (PIE1bits.TMR1IE && PIR1bits.TMR1IF)
  3052  0422  1683               	bsf	3,5	;RP0=1, select bank1
  3053  0423  1303               	bcf	3,6	;RP1=0, select bank1
  3054  0424  1C0C               	btfss	12,0	;volatile
  3055  0425  2C33               	goto	i1l110
  3056  0426  1283               	bcf	3,5	;RP0=0, select bank0
  3057  0427  1303               	bcf	3,6	;RP1=0, select bank0
  3058  0428  1C0C               	btfss	12,0	;volatile
  3059  0429  2C33               	goto	i1l110
  3060                           
  3061                           ;interupts.c: 11: {
  3062                           ;interupts.c: 12: PIR1bits.TMR1IF = 0;
  3063  042A  100C               	bcf	12,0	;volatile
  3064                           
  3065                           ;interupts.c: 13: T1CONbits.TMR1ON = 0;
  3066  042B  1010               	bcf	16,0	;volatile
  3067                           
  3068                           ;interupts.c: 15: TMR1H = 0xE7;
  3069  042C  30E7               	movlw	231
  3070  042D  008F               	movwf	15	;volatile
  3071                           
  3072                           ;interupts.c: 16: TMR1L = 0x95;
  3073  042E  3095               	movlw	149
  3074  042F  008E               	movwf	14	;volatile
  3075                           
  3076                           ;interupts.c: 18: T1CONbits.TMR1ON = 1;
  3077  0430  1410               	bsf	16,0	;volatile
  3078                           
  3079                           ;interupts.c: 21: CCPR1L = output;
  3080  0431  086F               	movf	_output,w
  3081  0432  0095               	movwf	21	;volatile
  3082  0433                     i1l110:	
  3083  0433  0873               	movf	??_int_routine+3,w
  3084  0434  1283               	bcf	3,5	;RP0=0, select bank0
  3085  0435  00FF               	movwf	127
  3086  0436  0872               	movf	??_int_routine+2,w
  3087  0437  008A               	movwf	10
  3088  0438  0871               	movf	??_int_routine+1,w
  3089  0439  0084               	movwf	4
  3090  043A  0E70               	swapf	??_int_routine^(0+-128),w
  3091  043B  0083               	movwf	3
  3092  043C  0EFE               	swapf	126,f
  3093  043D  0E7E               	swapf	126,w
  3094  043E  0009               	retfie
  3095  043F                     __end_of_int_routine:	
  3096  007E                     btemp	set	126	;btemp
  3097  007E                     wtemp	set	126
  3098  007E                     wtemp0	set	126
  3099  0080                     wtemp1	set	128
  3100  0082                     wtemp2	set	130
  3101  0084                     wtemp3	set	132
  3102  0086                     wtemp4	set	134
  3103  0088                     wtemp5	set	136
  3104  007F                     wtemp6	set	127
  3105  007E                     ttemp	set	126
  3106  007E                     ttemp0	set	126
  3107  0081                     ttemp1	set	129
  3108  0084                     ttemp2	set	132
  3109  0087                     ttemp3	set	135
  3110  007F                     ttemp4	set	127
  3111  007E                     ltemp	set	126
  3112  007E                     ltemp0	set	126
  3113  0082                     ltemp1	set	130
  3114  0086                     ltemp2	set	134
  3115  0080                     ltemp3	set	128
  3116                           
  3117                           	psect	intentry
  3118  0004                     __pintentry:	
  3119                           ;incstack = 0
  3120                           ; Regs used in _int_routine: [wreg]
  3121                           
  3122  0004                     interrupt_function:	
  3123  007E                     saved_w	set	btemp
  3124  0004  00FE               	movwf	btemp
  3125  0005  0E03               	swapf	3,w
  3126  0006  00F0               	movwf	??_int_routine
  3127  0007  0804               	movf	4,w
  3128  0008  00F1               	movwf	??_int_routine+1
  3129  0009  080A               	movf	10,w
  3130  000A  00F2               	movwf	??_int_routine+2
  3131  000B  1283               	bcf	3,5	;RP0=0, select bank0
  3132  000C  1303               	bcf	3,6	;RP1=0, select bank0
  3133  000D  087F               	movf	btemp+1,w
  3134  000E  00F3               	movwf	??_int_routine+3
  3135  000F  2C22               	ljmp	_int_routine


Data Sizes:
    Strings     13
    Constant    0
    Data        25
    BSS         5
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      10
    BANK0            80     74      80
    BANK1            32      0      24

Pointer List with Targets:

    LCD_Write_String@a	PTR const unsigned char  size(1) Largest target is 5
		 -> STR_3(CODE[4]), STR_2(CODE[4]), STR_1(CODE[5]), 


Critical Paths under _main in COMMON

    _main->_LCD_Init
    _main->_LCD_Write_String
    _main->___awdiv
    _LCD_Write_String->_LCD_Write_Char
    _LCD_Write_Int->___awdiv
    ___awdiv->_ADCRead
    _LCD_Write_Char->_LCD_Port
    _LCD_Set_Cursor->_LCD_Cmd
    _LCD_Init->_LCD_Cmd
    _LCD_Clear->_LCD_Cmd
    _LCD_Cmd->_LCD_Port

Critical Paths under _int_routine in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_LCD_Write_Int
    _LCD_Write_Int->___awdiv

Critical Paths under _int_routine in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _int_routine in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                50    50      0    4840
                                             24 BANK0     50    50      0
                            _ADCRead
                               _Init
                          _LCD_Clear
                           _LCD_Init
                     _LCD_Set_Cursor
                      _LCD_Write_Int
                   _LCD_Write_String
                            ___awdiv
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (1) ___lwdiv                                              8     4      4     268
                                              4 COMMON     5     1      4
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _LCD_Write_String                                     3     3      0     349
                                              9 COMMON     1     1      0
                                              0 BANK0      2     2      0
                     _LCD_Write_Char
 ---------------------------------------------------------------------------------
 (1) _LCD_Write_Int                                       19    14      5    2229
                                              5 BANK0     19    14      5
                     _LCD_Write_Char
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              7     3      4     402
                                              4 COMMON     5     1      4
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              9     5      4     512
                                              6 COMMON     4     0      4
                                              0 BANK0      5     5      0
                            _ADCRead (ARG)
 ---------------------------------------------------------------------------------
 (2) _LCD_Write_Char                                       4     4      0     178
                                              5 COMMON     4     4      0
                           _LCD_Port
 ---------------------------------------------------------------------------------
 (1) _LCD_Set_Cursor                                       7     6      1     698
                                              8 COMMON     1     0      1
                                              0 BANK0      6     6      0
                            _LCD_Cmd
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             3     3      0     220
                                              8 COMMON     2     2      0
                                              0 BANK0      1     1      0
                            _LCD_Cmd
                           _LCD_Port
 ---------------------------------------------------------------------------------
 (1) _LCD_Clear                                            0     0      0     110
                            _LCD_Cmd
 ---------------------------------------------------------------------------------
 (2) _LCD_Cmd                                              3     3      0     110
                                              5 COMMON     3     3      0
                           _LCD_Port
 ---------------------------------------------------------------------------------
 (3) _LCD_Port                                             1     1      0      88
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Init                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADCRead                                              2     2      0      22
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _int_routine                                          4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCRead
   _Init
   _LCD_Clear
     _LCD_Cmd
       _LCD_Port
   _LCD_Init
     _LCD_Cmd
       _LCD_Port
     _LCD_Port
   _LCD_Set_Cursor
     _LCD_Cmd
       _LCD_Port
   _LCD_Write_Int
     _LCD_Write_Char
       _LCD_Port
     ___awdiv
       _ADCRead (ARG)
     ___awmod
   _LCD_Write_String
     _LCD_Write_Char
       _LCD_Port
   ___awdiv
     _ADCRead (ARG)
   ___lwdiv

 _int_routine (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               20      0      18       7       75.0%
BITBANK1            20      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     4A      50       5      100.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      A       A       1       71.4%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      72       8        0.0%
ABS                  0      0      72       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Wed Aug 30 14:28:00 2017

                        pc 0002                __CFG_CP$OFF 0000                         l68 03A3  
                       l89 0456               ___awdiv@sign 0022                         fsr 0004  
                      l139 00DD                        l180 046F                        l181 0473  
                      l175 0462                        l176 0465                        l177 0469  
                      l178 046A                        l179 046E                        _RC2 003A  
                      _RC3 003B                        _RC4 003C                        _RC5 003D  
                      _RC6 003E                        _RC7 003F                        _PS0 0408  
                      _PR2 0092                        _PS1 0409                        _PS2 040A  
                      u705 02C6                        u635 0408                        u715 02D0  
                      u805 031D                        _PSA 040B                        u675 02AE  
                      u845 0446                        u695 02BA                        u775 0303  
                      u875 0342                        u795 0314                        u965 01F7  
                      u895 0364                        fsr0 0004            __end_of_ADCRead 045B  
                      indf 0000               ___awmod@sign 0021            __end_of_LCD_Cmd 04B8  
           _LCD_Set_Cursor 0334                       l1110 02A3                       l1120 02AB  
                     l1104 0298                       l1122 02B9                       l1132 02DA  
                     l1136 02E2                       l1128 02CF                       l1160 0300  
                     l1152 02FA                       l1312 017D                       l1162 030E  
                     l1170 0327                       l1330 01BD                       l1322 0182  
                     l1148 02F3                       l1340 01DB                       l1332 01C5  
                     l1324 01B3                       l1420 0094                       l1174 032F  
                     l1166 031C                       l1342 020B                       l1334 01D7  
                     l1328 01B7                       l1360 03C3                       l1440 00FA  
                     l1432 00D9                       l1282 0357                       l1346 0217  
                     l1362 03D1                       l1426 00B0                       l1372 03F2  
                     l1438 00F9                       l1368 03E7                       l1298 0491  
                     l1398 003B                       _ADON 00F8                       STR_1 04BE  
             __CFG_WDTE$ON 0000                       STR_2 04C3                       STR_3 04C7  
                     _T0CS 040D                       u1005 03C6                       u1025 03D2  
                     u1035 03DE                       u1115 00CD                       u1045 03E8  
                     u1207 041F                       u1135 00EF                       u1217 0233  
                     u1307 0288                       u1227 023E                       _T0SE 040C  
                     u1317 04B2                       u1237 0247                       u1327 0451  
                     u1247 024E                       u1257 0255                       u1177 002D  
                     u1267 025E                       u1187 00B6                       u1277 0267  
                     u1197 0415                       u1287 0272                       u1297 027C  
                     _TMR0 0001                       _Init 0379          ?_LCD_Write_String 0070  
              main@samples 003B                       _main 0024         __size_of_LCD_Clear 0005  
                     btemp 007E              __CFG_BOREN$ON 0000                       ltemp 007E  
                     start 0010         ??_LCD_Write_String 0079                       ttemp 007E  
                     wtemp 007E              __CFG_MCLRE$ON 0000              _LCD_Write_Int 0158  
         __end_of_LCD_Init 028C              __CFG_PLLEN$ON 0000           __end_of_LCD_Port 0475  
                    ?_Init 0070                      ?_main 0070            __end_of___awdiv 02E7  
                    _ADRES 001E            __end_of___awmod 0334            ___awdiv@divisor 0076  
                    _T1CON 0010        main@readTemperature 0068                      _IRCF0 0484  
                    _IRCF1 0485            __end_of___lwdiv 03F7                      i1l110 0433  
          ___awdiv@counter 0021                      _TMR1H 000F                      _TMR1L 000E  
                    _PORTA 0005                      _PORTB 0006                      _TRISA 0085  
                    _TRISB 0086                      _TRISC 0087              __CFG_PWRTE$ON 0000  
   __end_of_LCD_Set_Cursor 0379                      main@x 0064                      pclath 000A  
             main@setpoint 0067                      ltemp0 007E                      ltemp1 0082  
                    ltemp2 0086                      ltemp3 0080                      ttemp0 007E  
                    ttemp1 0081                      ttemp2 0084                      ttemp3 0087  
                    ttemp4 007F                      status 0003                      wtemp0 007E  
                    wtemp1 0080                      wtemp2 0082                      wtemp3 0084  
                    wtemp4 0086                      wtemp5 0088                      wtemp6 007F  
             ?_int_routine 0070             ?_LCD_Write_Int 0025             _LCD_Write_Char 03F7  
          __initialization 0011               __end_of_Init 03B9               __end_of_main 0158  
                ??_ADCRead 0074                     ??_Init 0074                     ??_main 0038  
        __end_of_LCD_Clear 04DF                  ??_LCD_Cmd 0075            ?_LCD_Set_Cursor 0078  
                ADCRead@ch 0075                     _ADCON0 001F                     _ADCON1 009F  
                   _CCPR1L 0015           ___awdiv@dividend 0078                     _ANSELA 0185  
                   _ANSELB 0186                     _ANSELC 0187                     _FVRCON 009D  
   __end_of_LCD_Write_Char 0422     LCD_Write_Int@numPlaces 0028                  ??___awdiv 0020  
                ??___awmod 0078                  ??___lwdiv 0078             __CFG_WRTEN$OFF 0000  
         ___awdiv@quotient 0023            ___awmod@divisor 0074            ___awmod@counter 0020  
                   _output 006F                     saved_w 007E           LCD_Write_Int@str 002F  
          LCD_Set_Cursor@w 0024            LCD_Set_Cursor@x 0022            LCD_Set_Cursor@y 0078  
          LCD_Set_Cursor@z 0023    __end_of__initialization 0022                  ?_LCD_Init 0070  
                ?_LCD_Port 0070            ??_LCD_Write_Int 002A            ?_LCD_Write_Char 0070  
            LCD_Init@style 0020             __pcstackCOMMON 0070                  LCD_Port@a 0074  
             __pidataBANK0 04DF               __pidataBANK1 0475                 __pbssBANK0 006A  
               ??_LCD_Init 0078                 ??_LCD_Port 0074       __size_of_int_routine 001D  
               __pmaintext 0024                 __pintentry 0004                    _CCP1CON 0017  
                  _ADCRead 043F  __size_of_LCD_Write_String 0017                    _LCD_Cmd 04A4  
               __stringtab 04B8                    ___cgram 00A0                    ___awdiv 028C  
                  ___awmod 02E7                    ___lwdiv 03B9           ??_LCD_Set_Cursor 0020  
                  __ptext1 03B9                    __ptext2 048D                    __ptext3 0158  
                  __ptext4 02E7                    __ptext5 028C                    __ptext6 03F7  
                  __ptext7 0334                    __ptext8 022A                    __ptext9 04DA  
                _T1CONbits 0010                  _T2CONbits 0012           ___awmod@dividend 0076  
                _LCD_Clear 04DA       end_of_initialization 0022    main@tempReadTemperature 0063  
        LCD_Write_Int@sign 0029                  _PORTCbits 0007                  _TRISCbits 0087  
               ?_LCD_Clear 0070          LCD_Write_String@a 0021          LCD_Write_String@i 0020  
         ??_LCD_Write_Char 0075                _CCP1CONbits 0017          __size_of_LCD_Init 0062  
        __size_of_LCD_Port 001A           _LCD_Write_String 048D        start_initialization 0011  
 LCD_Write_Int@fieldLength 0027      __end_of_LCD_Write_Int 022A                 init_fetch0 04CB  
              __pdataBANK0 006F                __pdataBANK1 00A0            LCD_Write_Char@a 0078  
          LCD_Write_Char@y 0077                   ?_ADCRead 0070                   ?_LCD_Cmd 0070  
                 LCD_Cmd@a 0077                  ___latbits 0000              __pcstackBANK0 0020  
              ??_LCD_Clear 0078              ??_int_routine 0070           ___lwdiv@dividend 0076  
                 ?___awdiv 0076                   ?___awmod 0074                   ?___lwdiv 0074  
                __pstrings 04B8           ___lwdiv@quotient 0020          interrupt_function 0004  
                 _LCD_Init 022A                   _LCD_Port 045B                   _PIE1bits 008C  
                 _PIR1bits 000C                   _GO_nDONE 00F9        __end_of_int_routine 043F  
         __size_of_ADCRead 001C                __stringbase 04BD           __size_of_LCD_Cmd 0014  
                main@total 0065   __end_of_LCD_Write_String 04A4             LCD_Write_Int@i 0036  
           LCD_Write_Int@j 0034           __size_of___awdiv 005B           __size_of___awmod 004D  
         __size_of___lwdiv 003E         __end_of__stringtab 04BE            main@sampleIndex 0069  
          ___lwdiv@divisor 0074            ___lwdiv@counter 0022                   __ptext10 04A4  
                 __ptext11 045B                   __ptext12 0379                   __ptext13 043F  
                 __ptext14 0422    __size_of_LCD_Set_Cursor 0045              __size_of_Init 0040  
            __size_of_main 0134                _int_routine 0422                 _INTCONbits 000B  
                 init_ram0 04CF         LCD_Write_Char@temp 0076                   intlevel1 0000  
       LCD_Write_Int@F1081 006A                  stringcode 04B8    __size_of_LCD_Write_Char 002B  
       LCD_Set_Cursor@temp 0025         LCD_Write_Int@value 0025                   stringdir 04B8  
                 stringtab 04B8     __size_of_LCD_Write_Int 00D2         __CFG_FOSC$INTOSCIO 0000  
