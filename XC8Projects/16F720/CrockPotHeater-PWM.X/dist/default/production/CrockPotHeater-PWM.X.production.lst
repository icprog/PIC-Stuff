

Microchip Technology PIC LITE Macro Assembler V1.38 build -256452561 
                                                                                               Tue Aug 29 16:21:52 2017

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	16F720
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2
    19                           	psect	text9,local,class=CODE,merge=1,delta=2
    20                           	psect	text10,local,class=CODE,merge=1,delta=2
    21                           	psect	text11,local,class=CODE,merge=1,delta=2
    22                           	psect	text12,local,class=CODE,merge=1,delta=2
    23                           	psect	text13,local,class=CODE,merge=1,delta=2
    24                           	psect	text14,local,class=CODE,merge=1,delta=2
    25                           	psect	intentry,global,class=CODE,delta=2
    26                           	dabs	1,0x7E,2
    27  0000                     	;# 
    28  0001                     	;# 
    29  0002                     	;# 
    30  0003                     	;# 
    31  0004                     	;# 
    32  0005                     	;# 
    33  0006                     	;# 
    34  0007                     	;# 
    35  000A                     	;# 
    36  000B                     	;# 
    37  000C                     	;# 
    38  000E                     	;# 
    39  000E                     	;# 
    40  000F                     	;# 
    41  0010                     	;# 
    42  0011                     	;# 
    43  0012                     	;# 
    44  0013                     	;# 
    45  0014                     	;# 
    46  0015                     	;# 
    47  0015                     	;# 
    48  0016                     	;# 
    49  0017                     	;# 
    50  0018                     	;# 
    51  0019                     	;# 
    52  001A                     	;# 
    53  001E                     	;# 
    54  001F                     	;# 
    55  0081                     	;# 
    56  0085                     	;# 
    57  0086                     	;# 
    58  0087                     	;# 
    59  008C                     	;# 
    60  008E                     	;# 
    61  008F                     	;# 
    62  0090                     	;# 
    63  0091                     	;# 
    64  0092                     	;# 
    65  0093                     	;# 
    66  0093                     	;# 
    67  0094                     	;# 
    68  0095                     	;# 
    69  0096                     	;# 
    70  0098                     	;# 
    71  0099                     	;# 
    72  009D                     	;# 
    73  009F                     	;# 
    74  010C                     	;# 
    75  010D                     	;# 
    76  010E                     	;# 
    77  010F                     	;# 
    78  0115                     	;# 
    79  0116                     	;# 
    80  0185                     	;# 
    81  0186                     	;# 
    82  0187                     	;# 
    83  018C                     	;# 
    84  018D                     	;# 
    85  0000                     	;# 
    86  0001                     	;# 
    87  0002                     	;# 
    88  0003                     	;# 
    89  0004                     	;# 
    90  0005                     	;# 
    91  0006                     	;# 
    92  0007                     	;# 
    93  000A                     	;# 
    94  000B                     	;# 
    95  000C                     	;# 
    96  000E                     	;# 
    97  000E                     	;# 
    98  000F                     	;# 
    99  0010                     	;# 
   100  0011                     	;# 
   101  0012                     	;# 
   102  0013                     	;# 
   103  0014                     	;# 
   104  0015                     	;# 
   105  0015                     	;# 
   106  0016                     	;# 
   107  0017                     	;# 
   108  0018                     	;# 
   109  0019                     	;# 
   110  001A                     	;# 
   111  001E                     	;# 
   112  001F                     	;# 
   113  0081                     	;# 
   114  0085                     	;# 
   115  0086                     	;# 
   116  0087                     	;# 
   117  008C                     	;# 
   118  008E                     	;# 
   119  008F                     	;# 
   120  0090                     	;# 
   121  0091                     	;# 
   122  0092                     	;# 
   123  0093                     	;# 
   124  0093                     	;# 
   125  0094                     	;# 
   126  0095                     	;# 
   127  0096                     	;# 
   128  0098                     	;# 
   129  0099                     	;# 
   130  009D                     	;# 
   131  009F                     	;# 
   132  010C                     	;# 
   133  010D                     	;# 
   134  010E                     	;# 
   135  010F                     	;# 
   136  0115                     	;# 
   137  0116                     	;# 
   138  0185                     	;# 
   139  0186                     	;# 
   140  0187                     	;# 
   141  018C                     	;# 
   142  018D                     	;# 
   143  0000                     	;# 
   144  0001                     	;# 
   145  0002                     	;# 
   146  0003                     	;# 
   147  0004                     	;# 
   148  0005                     	;# 
   149  0006                     	;# 
   150  0007                     	;# 
   151  000A                     	;# 
   152  000B                     	;# 
   153  000C                     	;# 
   154  000E                     	;# 
   155  000E                     	;# 
   156  000F                     	;# 
   157  0010                     	;# 
   158  0011                     	;# 
   159  0012                     	;# 
   160  0013                     	;# 
   161  0014                     	;# 
   162  0015                     	;# 
   163  0015                     	;# 
   164  0016                     	;# 
   165  0017                     	;# 
   166  0018                     	;# 
   167  0019                     	;# 
   168  001A                     	;# 
   169  001E                     	;# 
   170  001F                     	;# 
   171  0081                     	;# 
   172  0085                     	;# 
   173  0086                     	;# 
   174  0087                     	;# 
   175  008C                     	;# 
   176  008E                     	;# 
   177  008F                     	;# 
   178  0090                     	;# 
   179  0091                     	;# 
   180  0092                     	;# 
   181  0093                     	;# 
   182  0093                     	;# 
   183  0094                     	;# 
   184  0095                     	;# 
   185  0096                     	;# 
   186  0098                     	;# 
   187  0099                     	;# 
   188  009D                     	;# 
   189  009F                     	;# 
   190  010C                     	;# 
   191  010D                     	;# 
   192  010E                     	;# 
   193  010F                     	;# 
   194  0115                     	;# 
   195  0116                     	;# 
   196  0185                     	;# 
   197  0186                     	;# 
   198  0187                     	;# 
   199  018C                     	;# 
   200  018D                     	;# 
   201  0000                     	;# 
   202  0001                     	;# 
   203  0002                     	;# 
   204  0003                     	;# 
   205  0004                     	;# 
   206  0005                     	;# 
   207  0006                     	;# 
   208  0007                     	;# 
   209  000A                     	;# 
   210  000B                     	;# 
   211  000C                     	;# 
   212  000E                     	;# 
   213  000E                     	;# 
   214  000F                     	;# 
   215  0010                     	;# 
   216  0011                     	;# 
   217  0012                     	;# 
   218  0013                     	;# 
   219  0014                     	;# 
   220  0015                     	;# 
   221  0015                     	;# 
   222  0016                     	;# 
   223  0017                     	;# 
   224  0018                     	;# 
   225  0019                     	;# 
   226  001A                     	;# 
   227  001E                     	;# 
   228  001F                     	;# 
   229  0081                     	;# 
   230  0085                     	;# 
   231  0086                     	;# 
   232  0087                     	;# 
   233  008C                     	;# 
   234  008E                     	;# 
   235  008F                     	;# 
   236  0090                     	;# 
   237  0091                     	;# 
   238  0092                     	;# 
   239  0093                     	;# 
   240  0093                     	;# 
   241  0094                     	;# 
   242  0095                     	;# 
   243  0096                     	;# 
   244  0098                     	;# 
   245  0099                     	;# 
   246  009D                     	;# 
   247  009F                     	;# 
   248  010C                     	;# 
   249  010D                     	;# 
   250  010E                     	;# 
   251  010F                     	;# 
   252  0115                     	;# 
   253  0116                     	;# 
   254  0185                     	;# 
   255  0186                     	;# 
   256  0187                     	;# 
   257  018C                     	;# 
   258  018D                     	;# 
   259  0000                     	;# 
   260  0001                     	;# 
   261  0002                     	;# 
   262  0003                     	;# 
   263  0004                     	;# 
   264  0005                     	;# 
   265  0006                     	;# 
   266  0007                     	;# 
   267  000A                     	;# 
   268  000B                     	;# 
   269  000C                     	;# 
   270  000E                     	;# 
   271  000E                     	;# 
   272  000F                     	;# 
   273  0010                     	;# 
   274  0011                     	;# 
   275  0012                     	;# 
   276  0013                     	;# 
   277  0014                     	;# 
   278  0015                     	;# 
   279  0015                     	;# 
   280  0016                     	;# 
   281  0017                     	;# 
   282  0018                     	;# 
   283  0019                     	;# 
   284  001A                     	;# 
   285  001E                     	;# 
   286  001F                     	;# 
   287  0081                     	;# 
   288  0085                     	;# 
   289  0086                     	;# 
   290  0087                     	;# 
   291  008C                     	;# 
   292  008E                     	;# 
   293  008F                     	;# 
   294  0090                     	;# 
   295  0091                     	;# 
   296  0092                     	;# 
   297  0093                     	;# 
   298  0093                     	;# 
   299  0094                     	;# 
   300  0095                     	;# 
   301  0096                     	;# 
   302  0098                     	;# 
   303  0099                     	;# 
   304  009D                     	;# 
   305  009F                     	;# 
   306  010C                     	;# 
   307  010D                     	;# 
   308  010E                     	;# 
   309  010F                     	;# 
   310  0115                     	;# 
   311  0116                     	;# 
   312  0185                     	;# 
   313  0186                     	;# 
   314  0187                     	;# 
   315  018C                     	;# 
   316  018D                     	;# 
   317                           
   318                           	psect	idataBANK0
   319  0499                     __pidataBANK0:	
   320                           
   321                           ;initializer for _OutCurrent
   322  0499  34FF               	retlw	255
   323                           
   324                           	psect	strings
   325  02A4                     __pstrings:	
   326  02A4                     stringtab:	
   327  02A4                     __stringtab:	
   328  02A4                     stringcode:	
   329                           ;	String table - string pointers are 1 byte each
   330                           
   331  02A4                     stringdir:	
   332  02A4  3002               	movlw	high stringdir
   333  02A5  008A               	movwf	10
   334  02A6  0804               	movf	4,w
   335  02A7  0A84               	incf	4,f
   336  02A8  0782               	addwf	2,f
   337  02A9                     __stringbase:	
   338  02A9  3400               	retlw	0
   339  02AA                     __end_of__stringtab:	
   340  02AA                     _dpowers:	
   341  02AA  3401               	retlw	1
   342  02AB  3400               	retlw	0
   343  02AC  340A               	retlw	10
   344  02AD  3400               	retlw	0
   345  02AE  3464               	retlw	100
   346  02AF  3400               	retlw	0
   347  02B0  34E8               	retlw	232
   348  02B1  3403               	retlw	3
   349  02B2  3410               	retlw	16
   350  02B3  3427               	retlw	39
   351  02B4                     __end_of_dpowers:	
   352  001F                     _ADCON0	set	31
   353  001E                     _ADRES	set	30
   354  0017                     _CCP1CON	set	23
   355  0017                     _CCP1CONbits	set	23
   356  0015                     _CCPR1L	set	21
   357  000B                     _INTCONbits	set	11
   358  000C                     _PIR1bits	set	12
   359  0005                     _PORTA	set	5
   360  0006                     _PORTB	set	6
   361  0007                     _PORTCbits	set	7
   362  0010                     _T1CON	set	16
   363  0010                     _T1CONbits	set	16
   364  0012                     _T2CONbits	set	18
   365  0001                     _TMR0	set	1
   366  000F                     _TMR1H	set	15
   367  000E                     _TMR1L	set	14
   368  00F8                     _ADON	set	248
   369  00F9                     _GO_nDONE	set	249
   370  0038                     _RC0	set	56
   371  0039                     _RC1	set	57
   372  003A                     _RC2	set	58
   373  003B                     _RC3	set	59
   374  003C                     _RC4	set	60
   375  003E                     _RC6	set	62
   376  009F                     _ADCON1	set	159
   377  009D                     _FVRCON	set	157
   378  008C                     _PIE1bits	set	140
   379  0092                     _PR2	set	146
   380  0085                     _TRISA	set	133
   381  0086                     _TRISB	set	134
   382  0087                     _TRISC	set	135
   383  0087                     _TRISCbits	set	135
   384  0484                     _IRCF0	set	1156
   385  0485                     _IRCF1	set	1157
   386  0408                     _PS0	set	1032
   387  0409                     _PS1	set	1033
   388  040A                     _PS2	set	1034
   389  040B                     _PSA	set	1035
   390  040D                     _T0CS	set	1037
   391  040C                     _T0SE	set	1036
   392  0185                     _ANSELA	set	389
   393  0186                     _ANSELB	set	390
   394  0187                     _ANSELC	set	391
   395  02B4                     STR_1:	
   396  02B4  3443               	retlw	67	;'C'
   397  02B5  3443               	retlw	67	;'C'
   398  02B6  3450               	retlw	80	;'P'
   399  02B7  3452               	retlw	82	;'R'
   400  02B8  3431               	retlw	49	;'1'
   401  02B9  344C               	retlw	76	;'L'
   402  02BA  3420               	retlw	32	;' '
   403  02BB  3420               	retlw	32	;' '
   404  02BC  3420               	retlw	32	;' '
   405  02BD  3420               	retlw	32	;' '
   406  02BE  3420               	retlw	32	;' '
   407  02BF  3420               	retlw	32	;' '
   408  02C0  343D               	retlw	61	;'='
   409  02C1  3420               	retlw	32	;' '
   410  02C2  3425               	retlw	37	;'%'
   411  02C3  3464               	retlw	100	;'d'
   412  02C4  3400               	retlw	0
   413  02C5                     STR_3:	
   414  02C5  3453               	retlw	83	;'S'
   415  02C6  3465               	retlw	101	;'e'
   416  02C7  3474               	retlw	116	;'t'
   417  02C8  3470               	retlw	112	;'p'
   418  02C9  346F               	retlw	111	;'o'
   419  02CA  3469               	retlw	105	;'i'
   420  02CB  346E               	retlw	110	;'n'
   421  02CC  3474               	retlw	116	;'t'
   422  02CD  3420               	retlw	32	;' '
   423  02CE  3420               	retlw	32	;' '
   424  02CF  3420               	retlw	32	;' '
   425  02D0  3420               	retlw	32	;' '
   426  02D1  343D               	retlw	61	;'='
   427  02D2  3420               	retlw	32	;' '
   428  02D3  3425               	retlw	37	;'%'
   429  02D4  3464               	retlw	100	;'d'
   430  02D5  3400               	retlw	0
   431  02D6                     STR_2:	
   432  02D6  344F               	retlw	79	;'O'
   433  02D7  3475               	retlw	117	;'u'
   434  02D8  3474               	retlw	116	;'t'
   435  02D9  3443               	retlw	67	;'C'
   436  02DA  3475               	retlw	117	;'u'
   437  02DB  3472               	retlw	114	;'r'
   438  02DC  3472               	retlw	114	;'r'
   439  02DD  3465               	retlw	101	;'e'
   440  02DE  346E               	retlw	110	;'n'
   441  02DF  3474               	retlw	116	;'t'
   442  02E0  3420               	retlw	32	;' '
   443  02E1  3420               	retlw	32	;' '
   444  02E2  343D               	retlw	61	;'='
   445  02E3  3420               	retlw	32	;' '
   446  02E4  3425               	retlw	37	;'%'
   447  02E5  3464               	retlw	100	;'d'
   448  02E6  3400               	retlw	0
   449  02E7                     STR_4:	
   450  02E7  3452               	retlw	82	;'R'
   451  02E8  3465               	retlw	101	;'e'
   452  02E9  3461               	retlw	97	;'a'
   453  02EA  3464               	retlw	100	;'d'
   454  02EB  3443               	retlw	67	;'C'
   455  02EC  3475               	retlw	117	;'u'
   456  02ED  3472               	retlw	114	;'r'
   457  02EE  3472               	retlw	114	;'r'
   458  02EF  3465               	retlw	101	;'e'
   459  02F0  346E               	retlw	110	;'n'
   460  02F1  3474               	retlw	116	;'t'
   461  02F2  3420               	retlw	32	;' '
   462  02F3  343D               	retlw	61	;'='
   463  02F4  3420               	retlw	32	;' '
   464  02F5  3425               	retlw	37	;'%'
   465  02F6  3464               	retlw	100	;'d'
   466  02F7  3400               	retlw	0
   467                           
   468                           ; #config settings
   469  0000                     
   470                           	psect	cinit
   471  0011                     start_initialization:	
   472  0011                     __initialization:	
   473                           
   474                           ; Initialize objects allocated to BANK0
   475  0011  2499               	fcall	__pidataBANK0	;fetch initializer
   476  0012  00CB               	movwf	__pdataBANK0& (0+127)
   477  0013                     end_of_initialization:	
   478                           ;End of C runtime variable initialization code
   479                           
   480  0013                     __end_of__initialization:	
   481  0013  0183               	clrf	3
   482  0014  2815               	ljmp	_main	;jump to C main() function
   483                           
   484                           	psect	dataBANK0
   485  004B                     __pdataBANK0:	
   486  004B                     _OutCurrent:	
   487  004B                     	ds	1
   488                           
   489                           	psect	cstackCOMMON
   490  0070                     __pcstackCOMMON:	
   491  0070                     ?_Init:	
   492  0070                     ?_ADCRead:	
   493                           ; 1 bytes @ 0x0
   494                           
   495  0070                     ?_LCD_Port:	
   496                           ; 1 bytes @ 0x0
   497                           
   498  0070                     ?_LCD_Cmd:	
   499                           ; 1 bytes @ 0x0
   500                           
   501  0070                     ?_LCD_Init:	
   502                           ; 1 bytes @ 0x0
   503                           
   504  0070                     ?_LCD_Write_Char:	
   505                           ; 1 bytes @ 0x0
   506                           
   507  0070                     ?_LCD_Write_String:	
   508                           ; 1 bytes @ 0x0
   509                           
   510  0070                     ?_main:	
   511                           ; 1 bytes @ 0x0
   512                           
   513  0070                     ?_int_routine:	
   514                           ; 1 bytes @ 0x0
   515                           
   516  0070                     ??_int_routine:	
   517                           ; 1 bytes @ 0x0
   518                           
   519  0070                     ?_LCD_Clear:	
   520                           ; 1 bytes @ 0x0
   521                           
   522                           
   523                           ; 2 bytes @ 0x0
   524  0070                     	ds	4
   525  0074                     ??_Init:	
   526  0074                     ??_ADCRead:	
   527                           ; 1 bytes @ 0x4
   528                           
   529  0074                     ??_LCD_Port:	
   530                           ; 1 bytes @ 0x4
   531                           
   532  0074                     ?___lwdiv:	
   533                           ; 1 bytes @ 0x4
   534                           
   535  0074                     LCD_Port@a:	
   536                           ; 2 bytes @ 0x4
   537                           
   538  0074                     ___lwdiv@divisor:	
   539                           ; 1 bytes @ 0x4
   540                           
   541                           
   542                           ; 2 bytes @ 0x4
   543  0074                     	ds	1
   544  0075                     ??_LCD_Cmd:	
   545  0075                     ??_LCD_Write_Char:	
   546                           ; 1 bytes @ 0x5
   547                           
   548  0075                     ADCRead@ch:	
   549                           ; 1 bytes @ 0x5
   550                           
   551                           
   552                           ; 1 bytes @ 0x5
   553  0075                     	ds	1
   554  0076                     ?___awdiv:	
   555  0076                     LCD_Write_Char@temp:	
   556                           ; 2 bytes @ 0x6
   557                           
   558  0076                     ___awdiv@divisor:	
   559                           ; 1 bytes @ 0x6
   560                           
   561  0076                     ___lwdiv@dividend:	
   562                           ; 2 bytes @ 0x6
   563                           
   564                           
   565                           ; 2 bytes @ 0x6
   566  0076                     	ds	1
   567  0077                     LCD_Cmd@a:	
   568  0077                     LCD_Write_Char@y:	
   569                           ; 1 bytes @ 0x7
   570                           
   571                           
   572                           ; 1 bytes @ 0x7
   573  0077                     	ds	1
   574  0078                     ??_LCD_Clear:	
   575  0078                     ?_LCD_Set_Cursor:	
   576                           ; 1 bytes @ 0x8
   577                           
   578  0078                     ??_LCD_Init:	
   579                           ; 1 bytes @ 0x8
   580                           
   581  0078                     ??___lwdiv:	
   582                           ; 1 bytes @ 0x8
   583                           
   584  0078                     LCD_Set_Cursor@y:	
   585                           ; 1 bytes @ 0x8
   586                           
   587  0078                     LCD_Write_Char@a:	
   588                           ; 1 bytes @ 0x8
   589                           
   590  0078                     ___awdiv@dividend:	
   591                           ; 1 bytes @ 0x8
   592                           
   593                           
   594                           ; 2 bytes @ 0x8
   595  0078                     	ds	1
   596  0079                     ??_LCD_Write_String:	
   597  0079                     ??___lwmod:	
   598                           ; 1 bytes @ 0x9
   599                           
   600                           
   601                           ; 1 bytes @ 0x9
   602  0079                     	ds	1
   603                           
   604                           	psect	cstackBANK0
   605  0020                     __pcstackBANK0:	
   606  0020                     ??_LCD_Set_Cursor:	
   607  0020                     ??___awdiv:	
   608                           ; 1 bytes @ 0x0
   609                           
   610  0020                     LCD_Write_String@i:	
   611                           ; 1 bytes @ 0x0
   612                           
   613  0020                     ___lwdiv@quotient:	
   614                           ; 2 bytes @ 0x0
   615                           
   616                           
   617                           ; 2 bytes @ 0x0
   618  0020                     	ds	1
   619  0021                     ___awdiv@counter:	
   620                           
   621                           ; 1 bytes @ 0x1
   622  0021                     	ds	1
   623  0022                     LCD_Set_Cursor@x:	
   624  0022                     LCD_Write_String@a:	
   625                           ; 1 bytes @ 0x2
   626                           
   627  0022                     ___awdiv@sign:	
   628                           ; 1 bytes @ 0x2
   629                           
   630  0022                     ___lwdiv@counter:	
   631                           ; 1 bytes @ 0x2
   632                           
   633                           
   634                           ; 1 bytes @ 0x2
   635  0022                     	ds	1
   636  0023                     ?___lwmod:	
   637  0023                     LCD_Set_Cursor@z:	
   638                           ; 2 bytes @ 0x3
   639                           
   640  0023                     ___awdiv@quotient:	
   641                           ; 1 bytes @ 0x3
   642                           
   643  0023                     ___lwmod@divisor:	
   644                           ; 2 bytes @ 0x3
   645                           
   646                           
   647                           ; 2 bytes @ 0x3
   648  0023                     	ds	1
   649  0024                     LCD_Set_Cursor@w:	
   650                           
   651                           ; 1 bytes @ 0x4
   652  0024                     	ds	1
   653  0025                     LCD_Set_Cursor@temp:	
   654  0025                     ___lwmod@dividend:	
   655                           ; 1 bytes @ 0x5
   656                           
   657                           
   658                           ; 2 bytes @ 0x5
   659  0025                     	ds	2
   660  0027                     ___lwmod@counter:	
   661                           
   662                           ; 1 bytes @ 0x7
   663  0027                     	ds	1
   664  0028                     ?_sprintf:	
   665  0028                     sprintf@f:	
   666                           ; 2 bytes @ 0x8
   667                           
   668                           
   669                           ; 1 bytes @ 0x8
   670  0028                     	ds	3
   671  002B                     ??_sprintf:	
   672                           
   673                           ; 1 bytes @ 0xB
   674  002B                     	ds	3
   675  002E                     sprintf@ap:	
   676                           
   677                           ; 1 bytes @ 0xE
   678  002E                     	ds	1
   679  002F                     sprintf@flag:	
   680                           
   681                           ; 1 bytes @ 0xF
   682  002F                     	ds	1
   683  0030                     sprintf@prec:	
   684                           
   685                           ; 1 bytes @ 0x10
   686  0030                     	ds	1
   687  0031                     sprintf@val:	
   688                           
   689                           ; 2 bytes @ 0x11
   690  0031                     	ds	2
   691  0033                     sprintf@sp:	
   692                           
   693                           ; 1 bytes @ 0x13
   694  0033                     	ds	1
   695  0034                     sprintf@c:	
   696                           
   697                           ; 1 bytes @ 0x14
   698  0034                     	ds	1
   699  0035                     ??_main:	
   700                           
   701                           ; 1 bytes @ 0x15
   702  0035                     	ds	3
   703  0038                     main@s:	
   704                           
   705                           ; 16 bytes @ 0x18
   706  0038                     	ds	16
   707  0048                     main@setpoint:	
   708                           
   709                           ; 1 bytes @ 0x28
   710  0048                     	ds	1
   711  0049                     main@ReadCurrent:	
   712                           
   713                           ; 1 bytes @ 0x29
   714  0049                     	ds	1
   715  004A                     main@x:	
   716                           
   717                           ; 1 bytes @ 0x2A
   718  004A                     	ds	1
   719                           
   720                           	psect	maintext
   721  0015                     __pmaintext:	
   722 ;;
   723 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   724 ;;
   725 ;; *************** function _main *****************
   726 ;; Defined at:
   727 ;;		line 11 in file "main.c"
   728 ;; Parameters:    Size  Location     Type
   729 ;;		None
   730 ;; Auto vars:     Size  Location     Type
   731 ;;  s              16   24[BANK0 ] unsigned char [16]
   732 ;;  x               1   42[BANK0 ] unsigned char 
   733 ;;  ReadCurrent     1   41[BANK0 ] unsigned char 
   734 ;;  setpoint        1   40[BANK0 ] unsigned char 
   735 ;; Return value:  Size  Location     Type
   736 ;;                  1    wreg      void 
   737 ;; Registers used:
   738 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   739 ;; Tracked objects:
   740 ;;		On entry : B00/0
   741 ;;		On exit  : 0/0
   742 ;;		Unchanged: 0/0
   743 ;; Data sizes:     COMMON   BANK0   BANK1
   744 ;;      Params:         0       0       0
   745 ;;      Locals:         0      19       0
   746 ;;      Temps:          0       3       0
   747 ;;      Totals:         0      22       0
   748 ;;Total ram usage:       22 bytes
   749 ;; Hardware stack levels required when called:    4
   750 ;; This function calls:
   751 ;;		_ADCRead
   752 ;;		_Init
   753 ;;		_LCD_Clear
   754 ;;		_LCD_Init
   755 ;;		_LCD_Set_Cursor
   756 ;;		_LCD_Write_String
   757 ;;		___awdiv
   758 ;;		_sprintf
   759 ;; This function is called by:
   760 ;;		Startup code after reset
   761 ;; This function uses a non-reentrant model
   762 ;;
   763                           
   764                           
   765                           ;psect for function _main
   766  0015                     _main:	
   767                           
   768                           ;main.c: 13: char s[16];
   769                           ;main.c: 15: Init();
   770                           
   771                           ;incstack = 0
   772                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   773  0015  22F8               	fcall	_Init
   774                           
   775                           ;main.c: 17: _delay((unsigned long)((250)*(8000000L/4000.0)));
   776  0016  3003               	movlw	3
   777  0017  1283               	bcf	3,5	;RP0=0, select bank0
   778  0018  1303               	bcf	3,6	;RP1=0, select bank0
   779  0019  00B7               	movwf	??_main+2
   780  001A  308A               	movlw	138
   781  001B  00B6               	movwf	??_main+1
   782  001C  3056               	movlw	86
   783  001D  00B5               	movwf	??_main
   784  001E                     u1177:	
   785  001E  0BB5               	decfsz	??_main,f
   786  001F  281E               	goto	u1177
   787  0020  0BB6               	decfsz	??_main+1,f
   788  0021  281E               	goto	u1177
   789  0022  0BB7               	decfsz	??_main+2,f
   790  0023  281E               	goto	u1177
   791  0024  2825               	nop2
   792                           
   793                           ;main.c: 19: LCD_Init();
   794  0025  23DA               	fcall	_LCD_Init
   795                           
   796                           ;main.c: 21: LCD_Clear();
   797  0026  2494               	fcall	_LCD_Clear
   798                           
   799                           ;main.c: 23: PORTCbits.RC0 = 1;
   800  0027  1283               	bcf	3,5	;RP0=0, select bank0
   801  0028  1303               	bcf	3,6	;RP1=0, select bank0
   802  0029  1407               	bsf	7,0	;volatile
   803  002A                     l1343:	
   804                           ;main.c: 26: extern unsigned char OutCurrent;
   805                           ;main.c: 27: unsigned char setpoint, ReadCurrent;
   806                           ;main.c: 28: unsigned char x;
   807                           ;main.c: 31: while(1)
   808                           
   809                           
   810                           ;main.c: 32: {
   811                           ;main.c: 34: for(x = 0; x < 255 ; x++)
   812  002A  1283               	bcf	3,5	;RP0=0, select bank0
   813  002B  1303               	bcf	3,6	;RP1=0, select bank0
   814  002C  01CA               	clrf	main@x
   815  002D  0A4A               	incf	main@x,w
   816  002E  1903               	btfsc	3,2
   817  002F  284C               	goto	l1355
   818  0030                     l1349:	
   819                           
   820                           ;main.c: 35: {
   821                           ;main.c: 36: ReadCurrent = (ReadCurrent + ADCRead(3))/2;
   822  0030  3002               	movlw	2
   823  0031  00F6               	movwf	___awdiv@divisor
   824  0032  3000               	movlw	0
   825  0033  00F7               	movwf	___awdiv@divisor+1
   826  0034  3003               	movlw	3
   827  0035  242A               	fcall	_ADCRead
   828  0036  1283               	bcf	3,5	;RP0=0, select bank0
   829  0037  1303               	bcf	3,6	;RP1=0, select bank0
   830  0038  00B5               	movwf	??_main
   831  0039  0849               	movf	main@ReadCurrent,w
   832  003A  0735               	addwf	??_main,w
   833  003B  00F8               	movwf	___awdiv@dividend
   834  003C  01F9               	clrf	___awdiv@dividend+1
   835  003D  0DF9               	rlf	___awdiv@dividend+1,f
   836  003E  2249               	fcall	___awdiv
   837  003F  0876               	movf	?___awdiv,w
   838  0040  1283               	bcf	3,5	;RP0=0, select bank0
   839  0041  1303               	bcf	3,6	;RP1=0, select bank0
   840  0042  00B6               	movwf	??_main+1
   841  0043  0836               	movf	??_main+1,w
   842  0044  00C9               	movwf	main@ReadCurrent
   843  0045  3001               	movlw	1
   844  0046  00B5               	movwf	??_main
   845  0047  0835               	movf	??_main,w
   846  0048  07CA               	addwf	main@x,f
   847  0049  0A4A               	incf	main@x,w
   848  004A  1D03               	btfss	3,2
   849  004B  2830               	goto	l1349
   850  004C                     l1355:	
   851                           
   852                           ;main.c: 37: }
   853                           ;main.c: 40: for(x = 0 ; x < 255 ; x++)
   854  004C  01CA               	clrf	main@x
   855  004D  0A4A               	incf	main@x,w
   856  004E  1903               	btfsc	3,2
   857  004F  286C               	goto	l1367
   858  0050                     l1361:	
   859                           
   860                           ;main.c: 41: {
   861                           ;main.c: 42: setpoint = (setpoint + ADCRead(2))/2;
   862  0050  3002               	movlw	2
   863  0051  00F6               	movwf	___awdiv@divisor
   864  0052  3000               	movlw	0
   865  0053  00F7               	movwf	___awdiv@divisor+1
   866  0054  3002               	movlw	2
   867  0055  242A               	fcall	_ADCRead
   868  0056  1283               	bcf	3,5	;RP0=0, select bank0
   869  0057  1303               	bcf	3,6	;RP1=0, select bank0
   870  0058  00B5               	movwf	??_main
   871  0059  0848               	movf	main@setpoint,w
   872  005A  0735               	addwf	??_main,w
   873  005B  00F8               	movwf	___awdiv@dividend
   874  005C  01F9               	clrf	___awdiv@dividend+1
   875  005D  0DF9               	rlf	___awdiv@dividend+1,f
   876  005E  2249               	fcall	___awdiv
   877  005F  0876               	movf	?___awdiv,w
   878  0060  1283               	bcf	3,5	;RP0=0, select bank0
   879  0061  1303               	bcf	3,6	;RP1=0, select bank0
   880  0062  00B6               	movwf	??_main+1
   881  0063  0836               	movf	??_main+1,w
   882  0064  00C8               	movwf	main@setpoint
   883  0065  3001               	movlw	1
   884  0066  00B5               	movwf	??_main
   885  0067  0835               	movf	??_main,w
   886  0068  07CA               	addwf	main@x,f
   887  0069  0A4A               	incf	main@x,w
   888  006A  1D03               	btfss	3,2
   889  006B  2850               	goto	l1361
   890  006C                     l1367:	
   891                           
   892                           ;main.c: 43: }
   893                           ;main.c: 45: _delay((unsigned long)((1000)*(8000000L/4000.0)));
   894  006C  300B               	movlw	11
   895  006D  00B7               	movwf	??_main+2
   896  006E  3026               	movlw	38
   897  006F  00B6               	movwf	??_main+1
   898  0070  3066               	movlw	102
   899  0071  00B5               	movwf	??_main
   900  0072                     u1187:	
   901  0072  0BB5               	decfsz	??_main,f
   902  0073  2872               	goto	u1187
   903  0074  0BB6               	decfsz	??_main+1,f
   904  0075  2872               	goto	u1187
   905  0076  0BB7               	decfsz	??_main+2,f
   906  0077  2872               	goto	u1187
   907  0078  2879               	nop2
   908                           
   909                           ;main.c: 48: if(setpoint >= ReadCurrent + 2)
   910  0079  1283               	bcf	3,5	;RP0=0, select bank0
   911  007A  1303               	bcf	3,6	;RP1=0, select bank0
   912  007B  0849               	movf	main@ReadCurrent,w
   913  007C  3E02               	addlw	2
   914  007D  00B5               	movwf	??_main
   915  007E  3000               	movlw	0
   916  007F  1803               	skipnc
   917  0080  3001               	movlw	1
   918  0081  00B6               	movwf	??_main+1
   919  0082  0836               	movf	??_main+1,w
   920  0083  3A80               	xorlw	128
   921  0084  3C80               	sublw	128
   922  0085  1D03               	skipz
   923  0086  2889               	goto	u1115
   924  0087  0835               	movf	??_main,w
   925  0088  0248               	subwf	main@setpoint,w
   926  0089                     u1115:	
   927  0089  1C03               	skipc
   928  008A  2899               	goto	l81
   929                           
   930                           ;main.c: 49: {
   931                           ;main.c: 50: if(OutCurrent < 255)
   932  008B  1283               	bcf	3,5	;RP0=0, select bank0
   933  008C  1303               	bcf	3,6	;RP1=0, select bank0
   934  008D  0A4B               	incf	_OutCurrent,w
   935  008E  1903               	btfsc	3,2
   936  008F  2895               	goto	l1373
   937                           
   938                           ;main.c: 51: {
   939                           ;main.c: 52: OutCurrent+=1;
   940  0090  3001               	movlw	1
   941  0091  00B5               	movwf	??_main
   942  0092  0835               	movf	??_main,w
   943  0093  07CB               	addwf	_OutCurrent,f
   944                           
   945                           ;main.c: 53: }
   946  0094  2899               	goto	l81
   947  0095                     l1373:	
   948                           
   949                           ;main.c: 54: else
   950                           ;main.c: 55: {
   951                           ;main.c: 56: OutCurrent = 255;
   952  0095  30FF               	movlw	255
   953  0096  00B5               	movwf	??_main
   954  0097  0835               	movf	??_main,w
   955  0098  00CB               	movwf	_OutCurrent
   956  0099                     l81:	
   957                           
   958                           ;main.c: 57: }
   959                           ;main.c: 58: }
   960                           ;main.c: 61: if(setpoint <= ReadCurrent - 2)
   961  0099  1283               	bcf	3,5	;RP0=0, select bank0
   962  009A  1303               	bcf	3,6	;RP1=0, select bank0
   963  009B  0849               	movf	main@ReadCurrent,w
   964  009C  3EFE               	addlw	254
   965  009D  00B5               	movwf	??_main
   966  009E  30FF               	movlw	255
   967  009F  1803               	skipnc
   968  00A0  3000               	movlw	0
   969  00A1  00B6               	movwf	??_main+1
   970  00A2  0836               	movf	??_main+1,w
   971  00A3  3A80               	xorlw	128
   972  00A4  00B7               	movwf	??_main+2
   973  00A5  3080               	movlw	128
   974  00A6  0237               	subwf	??_main+2,w
   975  00A7  1D03               	skipz
   976  00A8  28AB               	goto	u1135
   977  00A9  0848               	movf	main@setpoint,w
   978  00AA  0235               	subwf	??_main,w
   979  00AB                     u1135:	
   980  00AB  1C03               	skipc
   981  00AC  28B6               	goto	l1381
   982                           
   983                           ;main.c: 62: {
   984                           ;main.c: 65: if(OutCurrent > 0)
   985  00AD  1283               	bcf	3,5	;RP0=0, select bank0
   986  00AE  1303               	bcf	3,6	;RP1=0, select bank0
   987  00AF  084B               	movf	_OutCurrent,w
   988  00B0  1903               	btfsc	3,2
   989  00B1  28B5               	goto	l1379
   990                           
   991                           ;main.c: 66: {
   992                           ;main.c: 67: OutCurrent-=1;
   993  00B2  3001               	movlw	1
   994  00B3  02CB               	subwf	_OutCurrent,f
   995                           
   996                           ;main.c: 68: }
   997  00B4  28B6               	goto	l1381
   998  00B5                     l1379:	
   999                           
  1000                           ;main.c: 69: else
  1001                           ;main.c: 70: {
  1002                           ;main.c: 71: OutCurrent = 0;
  1003  00B5  01CB               	clrf	_OutCurrent
  1004  00B6                     l1381:	
  1005                           
  1006                           ;main.c: 72: }
  1007                           ;main.c: 73: }
  1008                           ;main.c: 76: LCD_Clear();
  1009  00B6  2494               	fcall	_LCD_Clear
  1010                           
  1011                           ;main.c: 79: sprintf(s, "CCPR1L      = %d", CCPR1L );
  1012  00B7  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1013  00B8  1283               	bcf	3,5	;RP0=0, select bank0
  1014  00B9  1303               	bcf	3,6	;RP1=0, select bank0
  1015  00BA  00B5               	movwf	??_main
  1016  00BB  0835               	movf	??_main,w
  1017  00BC  00A8               	movwf	sprintf@f
  1018  00BD  0815               	movf	21,w	;volatile
  1019  00BE  00B6               	movwf	??_main+1
  1020  00BF  01B7               	clrf	??_main+2
  1021  00C0  0836               	movf	??_main+1,w
  1022  00C1  00A9               	movwf	?_sprintf+1
  1023  00C2  0837               	movf	??_main+2,w
  1024  00C3  00AA               	movwf	?_sprintf+2
  1025  00C4  3038               	movlw	(low (main@s| 0))& (0+255)
  1026  00C5  2108               	fcall	_sprintf
  1027                           
  1028                           ;main.c: 80: LCD_Set_Cursor(0,0);
  1029  00C6  01F8               	clrf	LCD_Set_Cursor@y
  1030  00C7  3000               	movlw	0
  1031  00C8  21BE               	fcall	_LCD_Set_Cursor
  1032                           
  1033                           ;main.c: 81: LCD_Write_String(s);
  1034  00C9  3038               	movlw	(low (main@s| 0))& (0+255)
  1035  00CA  240B               	fcall	_LCD_Write_String
  1036                           
  1037                           ;main.c: 83: sprintf(s, "OutCurrent  = %d", OutCurrent );
  1038  00CB  302D               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1039  00CC  1283               	bcf	3,5	;RP0=0, select bank0
  1040  00CD  1303               	bcf	3,6	;RP1=0, select bank0
  1041  00CE  00B5               	movwf	??_main
  1042  00CF  0835               	movf	??_main,w
  1043  00D0  00A8               	movwf	sprintf@f
  1044  00D1  084B               	movf	_OutCurrent,w
  1045  00D2  00B6               	movwf	??_main+1
  1046  00D3  01B7               	clrf	??_main+2
  1047  00D4  0836               	movf	??_main+1,w
  1048  00D5  00A9               	movwf	?_sprintf+1
  1049  00D6  0837               	movf	??_main+2,w
  1050  00D7  00AA               	movwf	?_sprintf+2
  1051  00D8  3038               	movlw	(low (main@s| 0))& (0+255)
  1052  00D9  2108               	fcall	_sprintf
  1053                           
  1054                           ;main.c: 84: LCD_Set_Cursor(1,0);
  1055  00DA  01F8               	clrf	LCD_Set_Cursor@y
  1056  00DB  3001               	movlw	1
  1057  00DC  21BE               	fcall	_LCD_Set_Cursor
  1058                           
  1059                           ;main.c: 85: LCD_Write_String(s);
  1060  00DD  3038               	movlw	(low (main@s| 0))& (0+255)
  1061  00DE  240B               	fcall	_LCD_Write_String
  1062                           
  1063                           ;main.c: 87: sprintf(s, "Setpoint    = %d", setpoint );
  1064  00DF  301C               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1065  00E0  1283               	bcf	3,5	;RP0=0, select bank0
  1066  00E1  1303               	bcf	3,6	;RP1=0, select bank0
  1067  00E2  00B5               	movwf	??_main
  1068  00E3  0835               	movf	??_main,w
  1069  00E4  00A8               	movwf	sprintf@f
  1070  00E5  0848               	movf	main@setpoint,w
  1071  00E6  00B6               	movwf	??_main+1
  1072  00E7  01B7               	clrf	??_main+2
  1073  00E8  0836               	movf	??_main+1,w
  1074  00E9  00A9               	movwf	?_sprintf+1
  1075  00EA  0837               	movf	??_main+2,w
  1076  00EB  00AA               	movwf	?_sprintf+2
  1077  00EC  3038               	movlw	(low (main@s| 0))& (0+255)
  1078  00ED  2108               	fcall	_sprintf
  1079                           
  1080                           ;main.c: 88: { LCD_Set_Cursor(2,0); LCD_Write_String(s);};
  1081  00EE  01F8               	clrf	LCD_Set_Cursor@y
  1082  00EF  3002               	movlw	2
  1083  00F0  21BE               	fcall	_LCD_Set_Cursor
  1084  00F1  3038               	movlw	(low (main@s| 0))& (0+255)
  1085  00F2  240B               	fcall	_LCD_Write_String
  1086                           
  1087                           ;main.c: 90: sprintf(s, "ReadCurrent = %d", ReadCurrent );
  1088  00F3  303E               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1089  00F4  1283               	bcf	3,5	;RP0=0, select bank0
  1090  00F5  1303               	bcf	3,6	;RP1=0, select bank0
  1091  00F6  00B5               	movwf	??_main
  1092  00F7  0835               	movf	??_main,w
  1093  00F8  00A8               	movwf	sprintf@f
  1094  00F9  0849               	movf	main@ReadCurrent,w
  1095  00FA  00B6               	movwf	??_main+1
  1096  00FB  01B7               	clrf	??_main+2
  1097  00FC  0836               	movf	??_main+1,w
  1098  00FD  00A9               	movwf	?_sprintf+1
  1099  00FE  0837               	movf	??_main+2,w
  1100  00FF  00AA               	movwf	?_sprintf+2
  1101  0100  3038               	movlw	(low (main@s| 0))& (0+255)
  1102  0101  2108               	fcall	_sprintf
  1103                           
  1104                           ;main.c: 91: { LCD_Set_Cursor(3,0); LCD_Write_String(s);};
  1105  0102  01F8               	clrf	LCD_Set_Cursor@y
  1106  0103  3003               	movlw	3
  1107  0104  21BE               	fcall	_LCD_Set_Cursor
  1108  0105  3038               	movlw	(low (main@s| 0))& (0+255)
  1109  0106  240B               	fcall	_LCD_Write_String
  1110  0107  282A               	goto	l1343
  1111  0108                     __end_of_main:	
  1112                           
  1113                           	psect	text1
  1114  0108                     __ptext1:	
  1115 ;; *************** function _sprintf *****************
  1116 ;; Defined at:
  1117 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\doprnt.c"
  1118 ;; Parameters:    Size  Location     Type
  1119 ;;  sp              1    wreg     PTR unsigned char 
  1120 ;;		 -> main@s(16), 
  1121 ;;  f               1    8[BANK0 ] PTR const unsigned char 
  1122 ;;		 -> STR_4(17), STR_3(17), STR_2(17), STR_1(17), 
  1123 ;; Auto vars:     Size  Location     Type
  1124 ;;  sp              1   19[BANK0 ] PTR unsigned char 
  1125 ;;		 -> main@s(16), 
  1126 ;;  tmpval          4    0        struct .
  1127 ;;  val             2   17[BANK0 ] unsigned int 
  1128 ;;  cp              2    0        PTR const unsigned char 
  1129 ;;  len             2    0        unsigned int 
  1130 ;;  c               1   20[BANK0 ] char 
  1131 ;;  prec            1   16[BANK0 ] char 
  1132 ;;  flag            1   15[BANK0 ] unsigned char 
  1133 ;;  ap              1   14[BANK0 ] PTR void [1]
  1134 ;;		 -> ?_sprintf(2), 
  1135 ;; Return value:  Size  Location     Type
  1136 ;;                  2    8[BANK0 ] int 
  1137 ;; Registers used:
  1138 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1139 ;; Tracked objects:
  1140 ;;		On entry : 0/0
  1141 ;;		On exit  : 0/0
  1142 ;;		Unchanged: 0/0
  1143 ;; Data sizes:     COMMON   BANK0   BANK1
  1144 ;;      Params:         0       3       0
  1145 ;;      Locals:         0       7       0
  1146 ;;      Temps:          0       3       0
  1147 ;;      Totals:         0      13       0
  1148 ;;Total ram usage:       13 bytes
  1149 ;; Hardware stack levels used:    1
  1150 ;; Hardware stack levels required when called:    2
  1151 ;; This function calls:
  1152 ;;		___lwdiv
  1153 ;;		___lwmod
  1154 ;; This function is called by:
  1155 ;;		_main
  1156 ;; This function uses a non-reentrant model
  1157 ;;
  1158                           
  1159                           
  1160                           ;psect for function _sprintf
  1161  0108                     _sprintf:	
  1162                           
  1163                           ;incstack = 0
  1164                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1165                           ;sprintf@sp stored from wreg
  1166  0108  1283               	bcf	3,5	;RP0=0, select bank0
  1167  0109  1303               	bcf	3,6	;RP1=0, select bank0
  1168  010A  00B3               	movwf	sprintf@sp
  1169                           
  1170                           ;doprnt.c: 494: va_list ap;
  1171                           ;doprnt.c: 499: signed char c;
  1172                           ;doprnt.c: 506: signed char prec;
  1173                           ;doprnt.c: 508: unsigned char flag;
  1174                           ;doprnt.c: 523: union {
  1175                           ;doprnt.c: 524: unsigned long vd;
  1176                           ;doprnt.c: 525: double integ;
  1177                           ;doprnt.c: 526: } tmpval;
  1178                           ;doprnt.c: 528: unsigned int val;
  1179                           ;doprnt.c: 529: unsigned len;
  1180                           ;doprnt.c: 530: const char * cp;
  1181                           ;doprnt.c: 533: *ap = __va_start();
  1182  010B  3029               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  1183  010C  00AB               	movwf	??_sprintf
  1184  010D  082B               	movf	??_sprintf,w
  1185  010E  00AE               	movwf	sprintf@ap
  1186  010F                     l1279:	
  1187                           ;doprnt.c: 536: while(c = *f++) {
  1188                           
  1189  010F  3001               	movlw	1
  1190  0110  07A8               	addwf	sprintf@f,f
  1191  0111  30FF               	movlw	-1
  1192  0112  0728               	addwf	sprintf@f,w
  1193  0113  0084               	movwf	4
  1194  0114  22A4               	fcall	stringdir
  1195  0115  00AB               	movwf	??_sprintf
  1196  0116  082B               	movf	??_sprintf,w
  1197  0117  00B4               	movwf	sprintf@c
  1198  0118  0834               	movf	sprintf@c,w
  1199  0119  1903               	btfsc	3,2
  1200  011A  29B9               	goto	l1281
  1201                           
  1202                           ;doprnt.c: 538: if(c != '%')
  1203  011B  3025               	movlw	37
  1204  011C  0634               	xorwf	sprintf@c,w
  1205  011D  1903               	btfsc	3,2
  1206  011E  292B               	goto	l1235
  1207                           
  1208                           ;doprnt.c: 540: {
  1209                           ;doprnt.c: 541: ((*sp++ = (c)));
  1210  011F  0834               	movf	sprintf@c,w
  1211  0120  00AB               	movwf	??_sprintf
  1212  0121  0833               	movf	sprintf@sp,w
  1213  0122  0084               	movwf	4
  1214  0123  082B               	movf	??_sprintf,w
  1215  0124  1383               	bcf	3,7	;select IRP bank0
  1216  0125  0080               	movwf	0
  1217  0126  3001               	movlw	1
  1218  0127  00AB               	movwf	??_sprintf
  1219  0128  082B               	movf	??_sprintf,w
  1220  0129  07B3               	addwf	sprintf@sp,f
  1221                           
  1222                           ;doprnt.c: 542: continue;
  1223  012A  290F               	goto	l1279
  1224  012B                     l1235:	
  1225                           
  1226                           ;doprnt.c: 543: }
  1227                           ;doprnt.c: 548: flag = 0;
  1228  012B  01AF               	clrf	sprintf@flag
  1229                           
  1230                           ;doprnt.c: 822: }
  1231                           
  1232                           ;doprnt.c: 813: continue;
  1233                           
  1234                           ;doprnt.c: 802: default:
  1235                           
  1236                           ;doprnt.c: 698: case 'i':
  1237                           ;doprnt.c: 699: break;
  1238                           
  1239                           ;doprnt.c: 697: case 'd':
  1240                           
  1241                           ;doprnt.c: 638: goto alldone;
  1242                           
  1243                           ;doprnt.c: 637: case 0:
  1244                           
  1245                           ;doprnt.c: 635: switch(c = *f++) {
  1246  012C  3001               	movlw	1
  1247  012D  07A8               	addwf	sprintf@f,f
  1248  012E  30FF               	movlw	-1
  1249  012F  0728               	addwf	sprintf@f,w
  1250  0130  0084               	movwf	4
  1251  0131  22A4               	fcall	stringdir
  1252  0132  00B4               	movwf	sprintf@c
  1253                           
  1254                           ; Switch size 1, requested type "space"
  1255                           ; Number of cases is 3, Range of values is 0 to 105
  1256                           ; switch strategies available:
  1257                           ; Name         Instructions Cycles
  1258                           ; simple_byte           10     6 (average)
  1259                           ; direct_byte          112     6 (fixed)
  1260                           ; jumptable            260     6 (fixed)
  1261                           ;	Chosen strategy is simple_byte
  1262  0133  3A00               	xorlw	0	; case 0
  1263  0134  1903               	skipnz
  1264  0135  29B9               	goto	l1281
  1265  0136  3A64               	xorlw	100	; case 100
  1266  0137  1903               	skipnz
  1267  0138  293D               	goto	l1241
  1268  0139  3A0D               	xorlw	13	; case 105
  1269  013A  1903               	skipnz
  1270  013B  293D               	goto	l1241
  1271  013C  290F               	goto	l1279
  1272  013D                     l1241:	
  1273                           
  1274                           ;doprnt.c: 1253: {
  1275                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1276  013D  082E               	movf	sprintf@ap,w
  1277  013E  0084               	movwf	4
  1278  013F  1383               	bcf	3,7	;select IRP bank0
  1279  0140  0800               	movf	0,w
  1280  0141  00B1               	movwf	sprintf@val
  1281  0142  0A84               	incf	4,f
  1282  0143  0800               	movf	0,w
  1283  0144  00B2               	movwf	sprintf@val+1
  1284  0145  3002               	movlw	2
  1285  0146  00AB               	movwf	??_sprintf
  1286  0147  082B               	movf	??_sprintf,w
  1287  0148  07AE               	addwf	sprintf@ap,f
  1288                           
  1289                           ;doprnt.c: 1261: if((int)val < 0) {
  1290  0149  1FB2               	btfss	sprintf@val+1,7
  1291  014A  2954               	goto	l1251
  1292                           
  1293                           ;doprnt.c: 1262: flag |= 0x03;
  1294  014B  3003               	movlw	3
  1295  014C  00AB               	movwf	??_sprintf
  1296  014D  082B               	movf	??_sprintf,w
  1297  014E  04AF               	iorwf	sprintf@flag,f
  1298                           
  1299                           ;doprnt.c: 1263: val = -val;
  1300  014F  09B1               	comf	sprintf@val,f
  1301  0150  09B2               	comf	sprintf@val+1,f
  1302  0151  0AB1               	incf	sprintf@val,f
  1303  0152  1903               	skipnz
  1304  0153  0AB2               	incf	sprintf@val+1,f
  1305  0154                     l1251:	
  1306                           
  1307                           ;doprnt.c: 1264: }
  1308                           ;doprnt.c: 1266: }
  1309                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1310  0154  01B4               	clrf	sprintf@c
  1311  0155  0AB4               	incf	sprintf@c,f
  1312  0156  3005               	movlw	5
  1313  0157  0634               	xorwf	sprintf@c,w
  1314  0158  1903               	btfsc	3,2
  1315  0159  2973               	goto	l1263
  1316  015A                     l1257:	
  1317                           
  1318                           ;doprnt.c: 1306: if(val < dpowers[c])
  1319  015A  0834               	movf	sprintf@c,w
  1320  015B  00AB               	movwf	??_sprintf
  1321  015C  072B               	addwf	??_sprintf,w
  1322  015D  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1323  015E  0084               	movwf	4
  1324  015F  22A4               	fcall	stringdir
  1325  0160  00AC               	movwf	??_sprintf+1
  1326  0161  22A4               	fcall	stringdir
  1327  0162  00AD               	movwf	??_sprintf+2
  1328  0163  082D               	movf	??_sprintf+2,w
  1329  0164  0232               	subwf	sprintf@val+1,w
  1330  0165  1D03               	skipz
  1331  0166  2969               	goto	u925
  1332  0167  082C               	movf	??_sprintf+1,w
  1333  0168  0231               	subwf	sprintf@val,w
  1334  0169                     u925:	
  1335  0169  1C03               	btfss	3,0
  1336  016A  2973               	goto	l1263
  1337                           
  1338                           ;doprnt.c: 1307: break;
  1339  016B  3001               	movlw	1
  1340  016C  00AB               	movwf	??_sprintf
  1341  016D  082B               	movf	??_sprintf,w
  1342  016E  07B4               	addwf	sprintf@c,f
  1343  016F  3005               	movlw	5
  1344  0170  0634               	xorwf	sprintf@c,w
  1345  0171  1D03               	btfss	3,2
  1346  0172  295A               	goto	l1257
  1347  0173                     l1263:	
  1348                           
  1349                           ;doprnt.c: 1422: {
  1350                           ;doprnt.c: 1438: if(flag & 0x03)
  1351  0173  082F               	movf	sprintf@flag,w
  1352  0174  3903               	andlw	3
  1353  0175  1903               	btfsc	3,2
  1354  0176  2982               	goto	l1269
  1355                           
  1356                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  1357  0177  302D               	movlw	45
  1358  0178  00AB               	movwf	??_sprintf
  1359  0179  0833               	movf	sprintf@sp,w
  1360  017A  0084               	movwf	4
  1361  017B  082B               	movf	??_sprintf,w
  1362  017C  1383               	bcf	3,7	;select IRP bank0
  1363  017D  0080               	movwf	0
  1364  017E  3001               	movlw	1
  1365  017F  00AB               	movwf	??_sprintf
  1366  0180  082B               	movf	??_sprintf,w
  1367  0181  07B3               	addwf	sprintf@sp,f
  1368  0182                     l1269:	
  1369                           
  1370                           ;doprnt.c: 1469: }
  1371                           ;doprnt.c: 1472: prec = c;
  1372  0182  0834               	movf	sprintf@c,w
  1373  0183  00AB               	movwf	??_sprintf
  1374  0184  082B               	movf	??_sprintf,w
  1375  0185  00B0               	movwf	sprintf@prec
  1376  0186                     l1277:	
  1377                           ;doprnt.c: 1474: while(prec--) {
  1378                           
  1379  0186  30FF               	movlw	255
  1380  0187  00AB               	movwf	??_sprintf
  1381  0188  082B               	movf	??_sprintf,w
  1382  0189  07B0               	addwf	sprintf@prec,f
  1383  018A  0A30               	incf	sprintf@prec,w
  1384  018B  1903               	btfsc	3,2
  1385  018C  290F               	goto	l1279
  1386                           
  1387                           ;doprnt.c: 1478: {
  1388                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1389  018D  300A               	movlw	10
  1390  018E  00A3               	movwf	___lwmod@divisor
  1391  018F  3000               	movlw	0
  1392  0190  00A4               	movwf	___lwmod@divisor+1
  1393  0191  0830               	movf	sprintf@prec,w
  1394  0192  00AB               	movwf	??_sprintf
  1395  0193  072B               	addwf	??_sprintf,w
  1396  0194  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1397  0195  0084               	movwf	4
  1398  0196  22A4               	fcall	stringdir
  1399  0197  00F4               	movwf	___lwdiv@divisor
  1400  0198  22A4               	fcall	stringdir
  1401  0199  00F5               	movwf	___lwdiv@divisor+1
  1402  019A  0832               	movf	sprintf@val+1,w
  1403  019B  00F7               	movwf	___lwdiv@dividend+1
  1404  019C  0831               	movf	sprintf@val,w
  1405  019D  00F6               	movwf	___lwdiv@dividend
  1406  019E  2337               	fcall	___lwdiv
  1407  019F  0875               	movf	?___lwdiv+1,w
  1408  01A0  1283               	bcf	3,5	;RP0=0, select bank0
  1409  01A1  1303               	bcf	3,6	;RP1=0, select bank0
  1410  01A2  00A6               	movwf	___lwmod@dividend+1
  1411  01A3  0874               	movf	?___lwdiv,w
  1412  01A4  00A5               	movwf	___lwmod@dividend
  1413  01A5  2375               	fcall	___lwmod
  1414  01A6  1283               	bcf	3,5	;RP0=0, select bank0
  1415  01A7  1303               	bcf	3,6	;RP1=0, select bank0
  1416  01A8  0823               	movf	?___lwmod,w
  1417  01A9  3E30               	addlw	48
  1418  01AA  00AC               	movwf	??_sprintf+1
  1419  01AB  082C               	movf	??_sprintf+1,w
  1420  01AC  00B4               	movwf	sprintf@c
  1421                           
  1422                           ;doprnt.c: 1523: }
  1423                           ;doprnt.c: 1524: ((*sp++ = (c)));
  1424  01AD  0834               	movf	sprintf@c,w
  1425  01AE  00AB               	movwf	??_sprintf
  1426  01AF  0833               	movf	sprintf@sp,w
  1427  01B0  0084               	movwf	4
  1428  01B1  082B               	movf	??_sprintf,w
  1429  01B2  1383               	bcf	3,7	;select IRP bank0
  1430  01B3  0080               	movwf	0
  1431  01B4  3001               	movlw	1
  1432  01B5  00AB               	movwf	??_sprintf
  1433  01B6  082B               	movf	??_sprintf,w
  1434  01B7  07B3               	addwf	sprintf@sp,f
  1435  01B8  2986               	goto	l1277
  1436  01B9                     l1281:	
  1437                           ;doprnt.c: 1525: }
  1438                           ;doprnt.c: 1533: }
  1439                           ;doprnt.c: 1535: alldone:
  1440                           
  1441                           
  1442                           ;doprnt.c: 1538: *sp = 0;
  1443  01B9  0833               	movf	sprintf@sp,w
  1444  01BA  0084               	movwf	4
  1445  01BB  1383               	bcf	3,7	;select IRP bank0
  1446  01BC  0180               	clrf	0
  1447  01BD  0008               	return
  1448  01BE                     __end_of_sprintf:	
  1449                           ;doprnt.c: 1540: return 0;
  1450                           ;	Return value of _sprintf is never used
  1451                           
  1452                           
  1453                           	psect	text2
  1454  0375                     __ptext2:	
  1455 ;; *************** function ___lwmod *****************
  1456 ;; Defined at:
  1457 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwmod.c"
  1458 ;; Parameters:    Size  Location     Type
  1459 ;;  divisor         2    3[BANK0 ] unsigned int 
  1460 ;;  dividend        2    5[BANK0 ] unsigned int 
  1461 ;; Auto vars:     Size  Location     Type
  1462 ;;  counter         1    7[BANK0 ] unsigned char 
  1463 ;; Return value:  Size  Location     Type
  1464 ;;                  2    3[BANK0 ] unsigned int 
  1465 ;; Registers used:
  1466 ;;		wreg, status,2, status,0
  1467 ;; Tracked objects:
  1468 ;;		On entry : 0/0
  1469 ;;		On exit  : 0/0
  1470 ;;		Unchanged: 0/0
  1471 ;; Data sizes:     COMMON   BANK0   BANK1
  1472 ;;      Params:         0       4       0
  1473 ;;      Locals:         0       1       0
  1474 ;;      Temps:          1       0       0
  1475 ;;      Totals:         1       5       0
  1476 ;;Total ram usage:        6 bytes
  1477 ;; Hardware stack levels used:    1
  1478 ;; Hardware stack levels required when called:    1
  1479 ;; This function calls:
  1480 ;;		Nothing
  1481 ;; This function is called by:
  1482 ;;		_sprintf
  1483 ;; This function uses a non-reentrant model
  1484 ;;
  1485                           
  1486                           
  1487                           ;psect for function ___lwmod
  1488  0375                     ___lwmod:	
  1489                           
  1490                           ;incstack = 0
  1491                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1492  0375  1283               	bcf	3,5	;RP0=0, select bank0
  1493  0376  1303               	bcf	3,6	;RP1=0, select bank0
  1494  0377  0823               	movf	___lwmod@divisor,w
  1495  0378  0424               	iorwf	___lwmod@divisor+1,w
  1496  0379  1903               	btfsc	3,2
  1497  037A  2BA4               	goto	l1107
  1498  037B  01A7               	clrf	___lwmod@counter
  1499  037C  0AA7               	incf	___lwmod@counter,f
  1500  037D                     l1097:	
  1501  037D  1BA4               	btfsc	___lwmod@divisor+1,7
  1502  037E  2B8B               	goto	l1099
  1503  037F  3001               	movlw	1
  1504  0380                     u725:	
  1505  0380  1003               	clrc
  1506  0381  0DA3               	rlf	___lwmod@divisor,f
  1507  0382  0DA4               	rlf	___lwmod@divisor+1,f
  1508  0383  3EFF               	addlw	-1
  1509  0384  1D03               	skipz
  1510  0385  2B80               	goto	u725
  1511  0386  3001               	movlw	1
  1512  0387  00F9               	movwf	??___lwmod
  1513  0388  0879               	movf	??___lwmod,w
  1514  0389  07A7               	addwf	___lwmod@counter,f
  1515  038A  2B7D               	goto	l1097
  1516  038B                     l1099:	
  1517  038B  0824               	movf	___lwmod@divisor+1,w
  1518  038C  0226               	subwf	___lwmod@dividend+1,w
  1519  038D  1D03               	skipz
  1520  038E  2B91               	goto	u745
  1521  038F  0823               	movf	___lwmod@divisor,w
  1522  0390  0225               	subwf	___lwmod@dividend,w
  1523  0391                     u745:	
  1524  0391  1C03               	skipc
  1525  0392  2B99               	goto	l1103
  1526  0393  0823               	movf	___lwmod@divisor,w
  1527  0394  02A5               	subwf	___lwmod@dividend,f
  1528  0395  0824               	movf	___lwmod@divisor+1,w
  1529  0396  1C03               	skipc
  1530  0397  03A6               	decf	___lwmod@dividend+1,f
  1531  0398  02A6               	subwf	___lwmod@dividend+1,f
  1532  0399                     l1103:	
  1533  0399  3001               	movlw	1
  1534  039A                     u755:	
  1535  039A  1003               	clrc
  1536  039B  0CA4               	rrf	___lwmod@divisor+1,f
  1537  039C  0CA3               	rrf	___lwmod@divisor,f
  1538  039D  3EFF               	addlw	-1
  1539  039E  1D03               	skipz
  1540  039F  2B9A               	goto	u755
  1541  03A0  3001               	movlw	1
  1542  03A1  02A7               	subwf	___lwmod@counter,f
  1543  03A2  1D03               	btfss	3,2
  1544  03A3  2B8B               	goto	l1099
  1545  03A4                     l1107:	
  1546  03A4  0826               	movf	___lwmod@dividend+1,w
  1547  03A5  00A4               	movwf	?___lwmod+1
  1548  03A6  0825               	movf	___lwmod@dividend,w
  1549  03A7  00A3               	movwf	?___lwmod
  1550  03A8  0008               	return
  1551  03A9                     __end_of___lwmod:	
  1552                           
  1553                           	psect	text3
  1554  0337                     __ptext3:	
  1555 ;; *************** function ___lwdiv *****************
  1556 ;; Defined at:
  1557 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwdiv.c"
  1558 ;; Parameters:    Size  Location     Type
  1559 ;;  divisor         2    4[COMMON] unsigned int 
  1560 ;;  dividend        2    6[COMMON] unsigned int 
  1561 ;; Auto vars:     Size  Location     Type
  1562 ;;  quotient        2    0[BANK0 ] unsigned int 
  1563 ;;  counter         1    2[BANK0 ] unsigned char 
  1564 ;; Return value:  Size  Location     Type
  1565 ;;                  2    4[COMMON] unsigned int 
  1566 ;; Registers used:
  1567 ;;		wreg, status,2, status,0
  1568 ;; Tracked objects:
  1569 ;;		On entry : 0/0
  1570 ;;		On exit  : 0/0
  1571 ;;		Unchanged: 0/0
  1572 ;; Data sizes:     COMMON   BANK0   BANK1
  1573 ;;      Params:         4       0       0
  1574 ;;      Locals:         0       3       0
  1575 ;;      Temps:          1       0       0
  1576 ;;      Totals:         5       3       0
  1577 ;;Total ram usage:        8 bytes
  1578 ;; Hardware stack levels used:    1
  1579 ;; Hardware stack levels required when called:    1
  1580 ;; This function calls:
  1581 ;;		Nothing
  1582 ;; This function is called by:
  1583 ;;		_sprintf
  1584 ;; This function uses a non-reentrant model
  1585 ;;
  1586                           
  1587                           
  1588                           ;psect for function ___lwdiv
  1589  0337                     ___lwdiv:	
  1590                           
  1591                           ;incstack = 0
  1592                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1593  0337  1283               	bcf	3,5	;RP0=0, select bank0
  1594  0338  1303               	bcf	3,6	;RP1=0, select bank0
  1595  0339  01A0               	clrf	___lwdiv@quotient
  1596  033A  01A1               	clrf	___lwdiv@quotient+1
  1597  033B  0874               	movf	___lwdiv@divisor,w
  1598  033C  0475               	iorwf	___lwdiv@divisor+1,w
  1599  033D  1903               	btfsc	3,2
  1600  033E  2B70               	goto	l1085
  1601  033F  01A2               	clrf	___lwdiv@counter
  1602  0340  0AA2               	incf	___lwdiv@counter,f
  1603  0341                     l1073:	
  1604  0341  1BF5               	btfsc	___lwdiv@divisor+1,7
  1605  0342  2B4F               	goto	l1075
  1606  0343  3001               	movlw	1
  1607  0344                     u655:	
  1608  0344  1003               	clrc
  1609  0345  0DF4               	rlf	___lwdiv@divisor,f
  1610  0346  0DF5               	rlf	___lwdiv@divisor+1,f
  1611  0347  3EFF               	addlw	-1
  1612  0348  1D03               	skipz
  1613  0349  2B44               	goto	u655
  1614  034A  3001               	movlw	1
  1615  034B  00F8               	movwf	??___lwdiv
  1616  034C  0878               	movf	??___lwdiv,w
  1617  034D  07A2               	addwf	___lwdiv@counter,f
  1618  034E  2B41               	goto	l1073
  1619  034F                     l1075:	
  1620  034F  3001               	movlw	1
  1621  0350                     u675:	
  1622  0350  1003               	clrc
  1623  0351  0DA0               	rlf	___lwdiv@quotient,f
  1624  0352  0DA1               	rlf	___lwdiv@quotient+1,f
  1625  0353  3EFF               	addlw	-1
  1626  0354  1D03               	skipz
  1627  0355  2B50               	goto	u675
  1628  0356  0875               	movf	___lwdiv@divisor+1,w
  1629  0357  0277               	subwf	___lwdiv@dividend+1,w
  1630  0358  1D03               	skipz
  1631  0359  2B5C               	goto	u685
  1632  035A  0874               	movf	___lwdiv@divisor,w
  1633  035B  0276               	subwf	___lwdiv@dividend,w
  1634  035C                     u685:	
  1635  035C  1C03               	skipc
  1636  035D  2B65               	goto	l1081
  1637  035E  0874               	movf	___lwdiv@divisor,w
  1638  035F  02F6               	subwf	___lwdiv@dividend,f
  1639  0360  0875               	movf	___lwdiv@divisor+1,w
  1640  0361  1C03               	skipc
  1641  0362  03F7               	decf	___lwdiv@dividend+1,f
  1642  0363  02F7               	subwf	___lwdiv@dividend+1,f
  1643  0364  1420               	bsf	___lwdiv@quotient,0
  1644  0365                     l1081:	
  1645  0365  3001               	movlw	1
  1646  0366                     u695:	
  1647  0366  1003               	clrc
  1648  0367  0CF5               	rrf	___lwdiv@divisor+1,f
  1649  0368  0CF4               	rrf	___lwdiv@divisor,f
  1650  0369  3EFF               	addlw	-1
  1651  036A  1D03               	skipz
  1652  036B  2B66               	goto	u695
  1653  036C  3001               	movlw	1
  1654  036D  02A2               	subwf	___lwdiv@counter,f
  1655  036E  1D03               	btfss	3,2
  1656  036F  2B4F               	goto	l1075
  1657  0370                     l1085:	
  1658  0370  0821               	movf	___lwdiv@quotient+1,w
  1659  0371  00F5               	movwf	?___lwdiv+1
  1660  0372  0820               	movf	___lwdiv@quotient,w
  1661  0373  00F4               	movwf	?___lwdiv
  1662  0374  0008               	return
  1663  0375                     __end_of___lwdiv:	
  1664                           
  1665                           	psect	text4
  1666  0249                     __ptext4:	
  1667 ;; *************** function ___awdiv *****************
  1668 ;; Defined at:
  1669 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awdiv.c"
  1670 ;; Parameters:    Size  Location     Type
  1671 ;;  divisor         2    6[COMMON] int 
  1672 ;;  dividend        2    8[COMMON] int 
  1673 ;; Auto vars:     Size  Location     Type
  1674 ;;  quotient        2    3[BANK0 ] int 
  1675 ;;  sign            1    2[BANK0 ] unsigned char 
  1676 ;;  counter         1    1[BANK0 ] unsigned char 
  1677 ;; Return value:  Size  Location     Type
  1678 ;;                  2    6[COMMON] int 
  1679 ;; Registers used:
  1680 ;;		wreg, status,2, status,0
  1681 ;; Tracked objects:
  1682 ;;		On entry : 0/0
  1683 ;;		On exit  : 0/0
  1684 ;;		Unchanged: 0/0
  1685 ;; Data sizes:     COMMON   BANK0   BANK1
  1686 ;;      Params:         4       0       0
  1687 ;;      Locals:         0       4       0
  1688 ;;      Temps:          0       1       0
  1689 ;;      Totals:         4       5       0
  1690 ;;Total ram usage:        9 bytes
  1691 ;; Hardware stack levels used:    1
  1692 ;; Hardware stack levels required when called:    1
  1693 ;; This function calls:
  1694 ;;		Nothing
  1695 ;; This function is called by:
  1696 ;;		_main
  1697 ;; This function uses a non-reentrant model
  1698 ;;
  1699                           
  1700                           
  1701                           ;psect for function ___awdiv
  1702  0249                     ___awdiv:	
  1703                           
  1704                           ;incstack = 0
  1705                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  1706  0249  1283               	bcf	3,5	;RP0=0, select bank0
  1707  024A  1303               	bcf	3,6	;RP1=0, select bank0
  1708  024B  01A2               	clrf	___awdiv@sign
  1709  024C  1FF7               	btfss	___awdiv@divisor+1,7
  1710  024D  2A55               	goto	l1293
  1711  024E  09F6               	comf	___awdiv@divisor,f
  1712  024F  09F7               	comf	___awdiv@divisor+1,f
  1713  0250  0AF6               	incf	___awdiv@divisor,f
  1714  0251  1903               	skipnz
  1715  0252  0AF7               	incf	___awdiv@divisor+1,f
  1716  0253  01A2               	clrf	___awdiv@sign
  1717  0254  0AA2               	incf	___awdiv@sign,f
  1718  0255                     l1293:	
  1719  0255  1FF9               	btfss	___awdiv@dividend+1,7
  1720  0256  2A60               	goto	l1299
  1721  0257  09F8               	comf	___awdiv@dividend,f
  1722  0258  09F9               	comf	___awdiv@dividend+1,f
  1723  0259  0AF8               	incf	___awdiv@dividend,f
  1724  025A  1903               	skipnz
  1725  025B  0AF9               	incf	___awdiv@dividend+1,f
  1726  025C  3001               	movlw	1
  1727  025D  00A0               	movwf	??___awdiv
  1728  025E  0820               	movf	??___awdiv,w
  1729  025F  06A2               	xorwf	___awdiv@sign,f
  1730  0260                     l1299:	
  1731  0260  01A3               	clrf	___awdiv@quotient
  1732  0261  01A4               	clrf	___awdiv@quotient+1
  1733  0262  0876               	movf	___awdiv@divisor,w
  1734  0263  0477               	iorwf	___awdiv@divisor+1,w
  1735  0264  1903               	btfsc	3,2
  1736  0265  2A97               	goto	l1321
  1737  0266  01A1               	clrf	___awdiv@counter
  1738  0267  0AA1               	incf	___awdiv@counter,f
  1739  0268                     l1309:	
  1740  0268  1BF7               	btfsc	___awdiv@divisor+1,7
  1741  0269  2A76               	goto	l1311
  1742  026A  3001               	movlw	1
  1743  026B                     u1005:	
  1744  026B  1003               	clrc
  1745  026C  0DF6               	rlf	___awdiv@divisor,f
  1746  026D  0DF7               	rlf	___awdiv@divisor+1,f
  1747  026E  3EFF               	addlw	-1
  1748  026F  1D03               	skipz
  1749  0270  2A6B               	goto	u1005
  1750  0271  3001               	movlw	1
  1751  0272  00A0               	movwf	??___awdiv
  1752  0273  0820               	movf	??___awdiv,w
  1753  0274  07A1               	addwf	___awdiv@counter,f
  1754  0275  2A68               	goto	l1309
  1755  0276                     l1311:	
  1756  0276  3001               	movlw	1
  1757  0277                     u1025:	
  1758  0277  1003               	clrc
  1759  0278  0DA3               	rlf	___awdiv@quotient,f
  1760  0279  0DA4               	rlf	___awdiv@quotient+1,f
  1761  027A  3EFF               	addlw	-1
  1762  027B  1D03               	skipz
  1763  027C  2A77               	goto	u1025
  1764  027D  0877               	movf	___awdiv@divisor+1,w
  1765  027E  0279               	subwf	___awdiv@dividend+1,w
  1766  027F  1D03               	skipz
  1767  0280  2A83               	goto	u1035
  1768  0281  0876               	movf	___awdiv@divisor,w
  1769  0282  0278               	subwf	___awdiv@dividend,w
  1770  0283                     u1035:	
  1771  0283  1C03               	skipc
  1772  0284  2A8C               	goto	l1317
  1773  0285  0876               	movf	___awdiv@divisor,w
  1774  0286  02F8               	subwf	___awdiv@dividend,f
  1775  0287  0877               	movf	___awdiv@divisor+1,w
  1776  0288  1C03               	skipc
  1777  0289  03F9               	decf	___awdiv@dividend+1,f
  1778  028A  02F9               	subwf	___awdiv@dividend+1,f
  1779  028B  1423               	bsf	___awdiv@quotient,0
  1780  028C                     l1317:	
  1781  028C  3001               	movlw	1
  1782  028D                     u1045:	
  1783  028D  1003               	clrc
  1784  028E  0CF7               	rrf	___awdiv@divisor+1,f
  1785  028F  0CF6               	rrf	___awdiv@divisor,f
  1786  0290  3EFF               	addlw	-1
  1787  0291  1D03               	skipz
  1788  0292  2A8D               	goto	u1045
  1789  0293  3001               	movlw	1
  1790  0294  02A1               	subwf	___awdiv@counter,f
  1791  0295  1D03               	btfss	3,2
  1792  0296  2A76               	goto	l1311
  1793  0297                     l1321:	
  1794  0297  0822               	movf	___awdiv@sign,w
  1795  0298  1903               	btfsc	3,2
  1796  0299  2A9F               	goto	l1325
  1797  029A  09A3               	comf	___awdiv@quotient,f
  1798  029B  09A4               	comf	___awdiv@quotient+1,f
  1799  029C  0AA3               	incf	___awdiv@quotient,f
  1800  029D  1903               	skipnz
  1801  029E  0AA4               	incf	___awdiv@quotient+1,f
  1802  029F                     l1325:	
  1803  029F  0824               	movf	___awdiv@quotient+1,w
  1804  02A0  00F7               	movwf	?___awdiv+1
  1805  02A1  0823               	movf	___awdiv@quotient,w
  1806  02A2  00F6               	movwf	?___awdiv
  1807  02A3  0008               	return
  1808  02A4                     __end_of___awdiv:	
  1809                           
  1810                           	psect	text5
  1811  040B                     __ptext5:	
  1812 ;; *************** function _LCD_Write_String *****************
  1813 ;; Defined at:
  1814 ;;		line 172 in file "lcd.h"
  1815 ;; Parameters:    Size  Location     Type
  1816 ;;  a               1    wreg     PTR const unsigned char 
  1817 ;;		 -> main@s(16), 
  1818 ;; Auto vars:     Size  Location     Type
  1819 ;;  a               1    2[BANK0 ] PTR const unsigned char 
  1820 ;;		 -> main@s(16), 
  1821 ;;  i               2    0[BANK0 ] int 
  1822 ;; Return value:  Size  Location     Type
  1823 ;;                  1    wreg      void 
  1824 ;; Registers used:
  1825 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1826 ;; Tracked objects:
  1827 ;;		On entry : 0/0
  1828 ;;		On exit  : 0/0
  1829 ;;		Unchanged: 0/0
  1830 ;; Data sizes:     COMMON   BANK0   BANK1
  1831 ;;      Params:         0       0       0
  1832 ;;      Locals:         0       3       0
  1833 ;;      Temps:          1       0       0
  1834 ;;      Totals:         1       3       0
  1835 ;;Total ram usage:        4 bytes
  1836 ;; Hardware stack levels used:    1
  1837 ;; Hardware stack levels required when called:    3
  1838 ;; This function calls:
  1839 ;;		_LCD_Write_Char
  1840 ;; This function is called by:
  1841 ;;		_main
  1842 ;; This function uses a non-reentrant model
  1843 ;;
  1844                           
  1845                           
  1846                           ;psect for function _LCD_Write_String
  1847  040B                     _LCD_Write_String:	
  1848                           
  1849                           ;incstack = 0
  1850                           ; Regs used in _LCD_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1851                           ;LCD_Write_String@a stored from wreg
  1852  040B  1283               	bcf	3,5	;RP0=0, select bank0
  1853  040C  1303               	bcf	3,6	;RP1=0, select bank0
  1854  040D  00A2               	movwf	LCD_Write_String@a
  1855                           
  1856                           ;lcd.h: 174: int i;
  1857                           ;lcd.h: 175: for(i=0;a[i]!='\0';i++)
  1858  040E  01A0               	clrf	LCD_Write_String@i
  1859  040F  01A1               	clrf	LCD_Write_String@i+1
  1860  0410                     l1169:	
  1861  0410  0820               	movf	LCD_Write_String@i,w
  1862  0411  0722               	addwf	LCD_Write_String@a,w
  1863  0412  00F9               	movwf	??_LCD_Write_String
  1864  0413  0879               	movf	??_LCD_Write_String,w
  1865  0414  0084               	movwf	4
  1866  0415  1383               	bcf	3,7	;select IRP bank0
  1867  0416  0800               	movf	0,w
  1868  0417  1903               	btfsc	3,2
  1869  0418  0008               	return
  1870                           
  1871                           ;lcd.h: 176: LCD_Write_Char(a[i]);
  1872  0419  0820               	movf	LCD_Write_String@i,w
  1873  041A  0722               	addwf	LCD_Write_String@a,w
  1874  041B  00F9               	movwf	??_LCD_Write_String
  1875  041C  0879               	movf	??_LCD_Write_String,w
  1876  041D  0084               	movwf	4
  1877  041E  1383               	bcf	3,7	;select IRP bank0
  1878  041F  0800               	movf	0,w
  1879  0420  23A9               	fcall	_LCD_Write_Char
  1880  0421  3001               	movlw	1
  1881  0422  1283               	bcf	3,5	;RP0=0, select bank0
  1882  0423  1303               	bcf	3,6	;RP1=0, select bank0
  1883  0424  07A0               	addwf	LCD_Write_String@i,f
  1884  0425  1803               	skipnc
  1885  0426  0AA1               	incf	LCD_Write_String@i+1,f
  1886  0427  3000               	movlw	0
  1887  0428  07A1               	addwf	LCD_Write_String@i+1,f
  1888  0429  2C10               	goto	l1169
  1889  042A                     __end_of_LCD_Write_String:	
  1890                           
  1891                           	psect	text6
  1892  03A9                     __ptext6:	
  1893 ;; *************** function _LCD_Write_Char *****************
  1894 ;; Defined at:
  1895 ;;		line 156 in file "lcd.h"
  1896 ;; Parameters:    Size  Location     Type
  1897 ;;  a               1    wreg     unsigned char 
  1898 ;; Auto vars:     Size  Location     Type
  1899 ;;  a               1    8[COMMON] unsigned char 
  1900 ;;  y               1    7[COMMON] unsigned char 
  1901 ;;  temp            1    6[COMMON] unsigned char 
  1902 ;; Return value:  Size  Location     Type
  1903 ;;                  1    wreg      void 
  1904 ;; Registers used:
  1905 ;;		wreg, status,2, status,0, pclath, cstack
  1906 ;; Tracked objects:
  1907 ;;		On entry : 0/0
  1908 ;;		On exit  : 0/0
  1909 ;;		Unchanged: 0/0
  1910 ;; Data sizes:     COMMON   BANK0   BANK1
  1911 ;;      Params:         0       0       0
  1912 ;;      Locals:         3       0       0
  1913 ;;      Temps:          1       0       0
  1914 ;;      Totals:         4       0       0
  1915 ;;Total ram usage:        4 bytes
  1916 ;; Hardware stack levels used:    1
  1917 ;; Hardware stack levels required when called:    2
  1918 ;; This function calls:
  1919 ;;		_LCD_Port
  1920 ;; This function is called by:
  1921 ;;		_LCD_Write_String
  1922 ;; This function uses a non-reentrant model
  1923 ;;
  1924                           
  1925                           
  1926                           ;psect for function _LCD_Write_Char
  1927  03A9                     _LCD_Write_Char:	
  1928                           
  1929                           ;incstack = 0
  1930                           ; Regs used in _LCD_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  1931                           ;LCD_Write_Char@a stored from wreg
  1932  03A9  00F8               	movwf	LCD_Write_Char@a
  1933                           
  1934                           ;lcd.h: 158: char temp,y;
  1935                           ;lcd.h: 159: temp = a&0x0F;
  1936  03AA  0878               	movf	LCD_Write_Char@a,w
  1937  03AB  390F               	andlw	15
  1938  03AC  00F5               	movwf	??_LCD_Write_Char
  1939  03AD  0875               	movf	??_LCD_Write_Char,w
  1940  03AE  00F6               	movwf	LCD_Write_Char@temp
  1941                           
  1942                           ;lcd.h: 160: y = a&0xF0;
  1943  03AF  0878               	movf	LCD_Write_Char@a,w
  1944  03B0  39F0               	andlw	240
  1945  03B1  00F5               	movwf	??_LCD_Write_Char
  1946  03B2  0875               	movf	??_LCD_Write_Char,w
  1947  03B3  00F7               	movwf	LCD_Write_Char@y
  1948                           
  1949                           ;lcd.h: 161: RC4 = 1;
  1950  03B4  1283               	bcf	3,5	;RP0=0, select bank0
  1951  03B5  1303               	bcf	3,6	;RP1=0, select bank0
  1952  03B6  1607               	bsf	7,4	;volatile
  1953                           
  1954                           ;lcd.h: 162: LCD_Port(y>>4);
  1955  03B7  0877               	movf	LCD_Write_Char@y,w
  1956  03B8  00F5               	movwf	??_LCD_Write_Char
  1957  03B9  3004               	movlw	4
  1958  03BA                     u635:	
  1959  03BA  1003               	clrc
  1960  03BB  0CF5               	rrf	??_LCD_Write_Char,f
  1961  03BC  3EFF               	addlw	-1
  1962  03BD  1D03               	skipz
  1963  03BE  2BBA               	goto	u635
  1964  03BF  0875               	movf	??_LCD_Write_Char,w
  1965  03C0  2464               	fcall	_LCD_Port
  1966                           
  1967                           ;lcd.h: 163: RC6 = 1;
  1968  03C1  1283               	bcf	3,5	;RP0=0, select bank0
  1969  03C2  1303               	bcf	3,6	;RP1=0, select bank0
  1970  03C3  1707               	bsf	7,6	;volatile
  1971                           
  1972                           ;lcd.h: 164: _delay((unsigned long)((40)*(8000000L/4000000.0)));
  1973  03C4  301A               	movlw	26
  1974  03C5  00F5               	movwf	??_LCD_Write_Char
  1975  03C6                     u1197:	
  1976  03C6  0BF5               	decfsz	??_LCD_Write_Char,f
  1977  03C7  2BC6               	goto	u1197
  1978  03C8  0000               	nop
  1979                           
  1980                           ;lcd.h: 165: RC6 = 0;
  1981  03C9  1283               	bcf	3,5	;RP0=0, select bank0
  1982  03CA  1303               	bcf	3,6	;RP1=0, select bank0
  1983  03CB  1307               	bcf	7,6	;volatile
  1984                           
  1985                           ;lcd.h: 166: LCD_Port(temp);
  1986  03CC  0876               	movf	LCD_Write_Char@temp,w
  1987  03CD  2464               	fcall	_LCD_Port
  1988                           
  1989                           ;lcd.h: 167: RC6 = 1;
  1990  03CE  1283               	bcf	3,5	;RP0=0, select bank0
  1991  03CF  1303               	bcf	3,6	;RP1=0, select bank0
  1992  03D0  1707               	bsf	7,6	;volatile
  1993                           
  1994                           ;lcd.h: 168: _delay((unsigned long)((40)*(8000000L/4000000.0)));
  1995  03D1  301A               	movlw	26
  1996  03D2  00F5               	movwf	??_LCD_Write_Char
  1997  03D3                     u1207:	
  1998  03D3  0BF5               	decfsz	??_LCD_Write_Char,f
  1999  03D4  2BD3               	goto	u1207
  2000  03D5  0000               	nop
  2001                           
  2002                           ;lcd.h: 169: RC6 = 0;
  2003  03D6  1283               	bcf	3,5	;RP0=0, select bank0
  2004  03D7  1303               	bcf	3,6	;RP1=0, select bank0
  2005  03D8  1307               	bcf	7,6	;volatile
  2006  03D9  0008               	return
  2007  03DA                     __end_of_LCD_Write_Char:	
  2008                           
  2009                           	psect	text7
  2010  01BE                     __ptext7:	
  2011 ;; *************** function _LCD_Set_Cursor *****************
  2012 ;; Defined at:
  2013 ;;		line 94 in file "lcd.h"
  2014 ;; Parameters:    Size  Location     Type
  2015 ;;  x               1    wreg     unsigned char 
  2016 ;;  y               1    8[COMMON] unsigned char 
  2017 ;; Auto vars:     Size  Location     Type
  2018 ;;  x               1    2[BANK0 ] unsigned char 
  2019 ;;  temp            1    5[BANK0 ] unsigned char 
  2020 ;;  w               1    4[BANK0 ] unsigned char 
  2021 ;;  z               1    3[BANK0 ] unsigned char 
  2022 ;; Return value:  Size  Location     Type
  2023 ;;                  1    wreg      void 
  2024 ;; Registers used:
  2025 ;;		wreg, status,2, status,0, pclath, cstack
  2026 ;; Tracked objects:
  2027 ;;		On entry : 0/0
  2028 ;;		On exit  : 0/0
  2029 ;;		Unchanged: 0/0
  2030 ;; Data sizes:     COMMON   BANK0   BANK1
  2031 ;;      Params:         1       0       0
  2032 ;;      Locals:         0       4       0
  2033 ;;      Temps:          0       2       0
  2034 ;;      Totals:         1       6       0
  2035 ;;Total ram usage:        7 bytes
  2036 ;; Hardware stack levels used:    1
  2037 ;; Hardware stack levels required when called:    3
  2038 ;; This function calls:
  2039 ;;		_LCD_Cmd
  2040 ;; This function is called by:
  2041 ;;		_main
  2042 ;; This function uses a non-reentrant model
  2043 ;;
  2044                           
  2045                           
  2046                           ;psect for function _LCD_Set_Cursor
  2047  01BE                     _LCD_Set_Cursor:	
  2048                           
  2049                           ;incstack = 0
  2050                           ; Regs used in _LCD_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  2051                           ;LCD_Set_Cursor@x stored from wreg
  2052  01BE  1283               	bcf	3,5	;RP0=0, select bank0
  2053  01BF  1303               	bcf	3,6	;RP1=0, select bank0
  2054  01C0  00A2               	movwf	LCD_Set_Cursor@x
  2055                           
  2056                           ;lcd.h: 96: char temp,z,w;
  2057                           ;lcd.h: 98: if(x == 0)
  2058  01C1  0822               	movf	LCD_Set_Cursor@x,w
  2059  01C2  1D03               	btfss	3,2
  2060  01C3  29E1               	goto	l1123
  2061                           
  2062                           ;lcd.h: 99: {
  2063                           ;lcd.h: 100: temp = 0x80 + y;
  2064  01C4  0878               	movf	LCD_Set_Cursor@y,w
  2065  01C5  3E80               	addlw	128
  2066  01C6  00A0               	movwf	??_LCD_Set_Cursor
  2067  01C7  0820               	movf	??_LCD_Set_Cursor,w
  2068  01C8  00A5               	movwf	LCD_Set_Cursor@temp
  2069                           
  2070                           ;lcd.h: 101: z = temp>>4;
  2071  01C9  0825               	movf	LCD_Set_Cursor@temp,w
  2072  01CA  00A0               	movwf	??_LCD_Set_Cursor
  2073  01CB  3004               	movlw	4
  2074  01CC                     u785:	
  2075  01CC  1003               	clrc
  2076  01CD  0CA0               	rrf	??_LCD_Set_Cursor,f
  2077  01CE  3EFF               	addlw	-1
  2078  01CF  1D03               	skipz
  2079  01D0  29CC               	goto	u785
  2080  01D1  0820               	movf	??_LCD_Set_Cursor,w
  2081  01D2  00A1               	movwf	??_LCD_Set_Cursor+1
  2082  01D3  0821               	movf	??_LCD_Set_Cursor+1,w
  2083  01D4  00A3               	movwf	LCD_Set_Cursor@z
  2084                           
  2085                           ;lcd.h: 102: w = temp & 0x0F;
  2086  01D5  0825               	movf	LCD_Set_Cursor@temp,w
  2087  01D6  390F               	andlw	15
  2088  01D7  00A0               	movwf	??_LCD_Set_Cursor
  2089  01D8  0820               	movf	??_LCD_Set_Cursor,w
  2090  01D9  00A4               	movwf	LCD_Set_Cursor@w
  2091                           
  2092                           ;lcd.h: 103: LCD_Cmd(z);
  2093  01DA  0823               	movf	LCD_Set_Cursor@z,w
  2094  01DB  247E               	fcall	_LCD_Cmd
  2095                           
  2096                           ;lcd.h: 104: LCD_Cmd(w);
  2097  01DC  1283               	bcf	3,5	;RP0=0, select bank0
  2098  01DD  1303               	bcf	3,6	;RP1=0, select bank0
  2099  01DE  0824               	movf	LCD_Set_Cursor@w,w
  2100  01DF  247E               	fcall	_LCD_Cmd
  2101                           
  2102                           ;lcd.h: 105: }
  2103  01E0  0008               	return
  2104  01E1                     l1123:	
  2105                           
  2106                           ;lcd.h: 107: else if(x == 1)
  2107  01E1  1283               	bcf	3,5	;RP0=0, select bank0
  2108  01E2  1303               	bcf	3,6	;RP1=0, select bank0
  2109  01E3  0322               	decf	LCD_Set_Cursor@x,w
  2110  01E4  1D03               	btfss	3,2
  2111  01E5  2A03               	goto	l1133
  2112                           
  2113                           ;lcd.h: 108: {
  2114                           ;lcd.h: 109: temp = 0xC0 + y;
  2115  01E6  0878               	movf	LCD_Set_Cursor@y,w
  2116  01E7  3EC0               	addlw	192
  2117  01E8  00A0               	movwf	??_LCD_Set_Cursor
  2118  01E9  0820               	movf	??_LCD_Set_Cursor,w
  2119  01EA  00A5               	movwf	LCD_Set_Cursor@temp
  2120                           
  2121                           ;lcd.h: 110: z = temp>>4;
  2122  01EB  0825               	movf	LCD_Set_Cursor@temp,w
  2123  01EC  00A0               	movwf	??_LCD_Set_Cursor
  2124  01ED  3004               	movlw	4
  2125  01EE                     u805:	
  2126  01EE  1003               	clrc
  2127  01EF  0CA0               	rrf	??_LCD_Set_Cursor,f
  2128  01F0  3EFF               	addlw	-1
  2129  01F1  1D03               	skipz
  2130  01F2  29EE               	goto	u805
  2131  01F3  0820               	movf	??_LCD_Set_Cursor,w
  2132  01F4  00A1               	movwf	??_LCD_Set_Cursor+1
  2133  01F5  0821               	movf	??_LCD_Set_Cursor+1,w
  2134  01F6  00A3               	movwf	LCD_Set_Cursor@z
  2135                           
  2136                           ;lcd.h: 111: w = temp & 0x0F;
  2137  01F7  0825               	movf	LCD_Set_Cursor@temp,w
  2138  01F8  390F               	andlw	15
  2139  01F9  00A0               	movwf	??_LCD_Set_Cursor
  2140  01FA  0820               	movf	??_LCD_Set_Cursor,w
  2141  01FB  00A4               	movwf	LCD_Set_Cursor@w
  2142                           
  2143                           ;lcd.h: 112: LCD_Cmd(z);
  2144  01FC  0823               	movf	LCD_Set_Cursor@z,w
  2145  01FD  247E               	fcall	_LCD_Cmd
  2146                           
  2147                           ;lcd.h: 113: LCD_Cmd(w);
  2148  01FE  1283               	bcf	3,5	;RP0=0, select bank0
  2149  01FF  1303               	bcf	3,6	;RP1=0, select bank0
  2150  0200  0824               	movf	LCD_Set_Cursor@w,w
  2151  0201  247E               	fcall	_LCD_Cmd
  2152                           
  2153                           ;lcd.h: 114: }
  2154  0202  0008               	return
  2155  0203                     l1133:	
  2156                           
  2157                           ;lcd.h: 116: else if(x == 2)
  2158  0203  3002               	movlw	2
  2159  0204  1283               	bcf	3,5	;RP0=0, select bank0
  2160  0205  1303               	bcf	3,6	;RP1=0, select bank0
  2161  0206  0622               	xorwf	LCD_Set_Cursor@x,w
  2162  0207  1D03               	btfss	3,2
  2163  0208  2A26               	goto	l1143
  2164                           
  2165                           ;lcd.h: 117: {
  2166                           ;lcd.h: 118: temp = 0x94 + y;
  2167  0209  0878               	movf	LCD_Set_Cursor@y,w
  2168  020A  3E94               	addlw	148
  2169  020B  00A0               	movwf	??_LCD_Set_Cursor
  2170  020C  0820               	movf	??_LCD_Set_Cursor,w
  2171  020D  00A5               	movwf	LCD_Set_Cursor@temp
  2172                           
  2173                           ;lcd.h: 119: z = temp>>4;
  2174  020E  0825               	movf	LCD_Set_Cursor@temp,w
  2175  020F  00A0               	movwf	??_LCD_Set_Cursor
  2176  0210  3004               	movlw	4
  2177  0211                     u825:	
  2178  0211  1003               	clrc
  2179  0212  0CA0               	rrf	??_LCD_Set_Cursor,f
  2180  0213  3EFF               	addlw	-1
  2181  0214  1D03               	skipz
  2182  0215  2A11               	goto	u825
  2183  0216  0820               	movf	??_LCD_Set_Cursor,w
  2184  0217  00A1               	movwf	??_LCD_Set_Cursor+1
  2185  0218  0821               	movf	??_LCD_Set_Cursor+1,w
  2186  0219  00A3               	movwf	LCD_Set_Cursor@z
  2187                           
  2188                           ;lcd.h: 120: w = temp & 0x0F;
  2189  021A  0825               	movf	LCD_Set_Cursor@temp,w
  2190  021B  390F               	andlw	15
  2191  021C  00A0               	movwf	??_LCD_Set_Cursor
  2192  021D  0820               	movf	??_LCD_Set_Cursor,w
  2193  021E  00A4               	movwf	LCD_Set_Cursor@w
  2194                           
  2195                           ;lcd.h: 121: LCD_Cmd(z);
  2196  021F  0823               	movf	LCD_Set_Cursor@z,w
  2197  0220  247E               	fcall	_LCD_Cmd
  2198                           
  2199                           ;lcd.h: 122: LCD_Cmd(w);
  2200  0221  1283               	bcf	3,5	;RP0=0, select bank0
  2201  0222  1303               	bcf	3,6	;RP1=0, select bank0
  2202  0223  0824               	movf	LCD_Set_Cursor@w,w
  2203  0224  247E               	fcall	_LCD_Cmd
  2204                           
  2205                           ;lcd.h: 123: }
  2206  0225  0008               	return
  2207  0226                     l1143:	
  2208                           
  2209                           ;lcd.h: 125: else if(x == 3)
  2210  0226  3003               	movlw	3
  2211  0227  1283               	bcf	3,5	;RP0=0, select bank0
  2212  0228  1303               	bcf	3,6	;RP1=0, select bank0
  2213  0229  0622               	xorwf	LCD_Set_Cursor@x,w
  2214  022A  1D03               	btfss	3,2
  2215  022B  0008               	return
  2216                           
  2217                           ;lcd.h: 126: {
  2218                           ;lcd.h: 127: temp = 0xD4 + y;
  2219  022C  0878               	movf	LCD_Set_Cursor@y,w
  2220  022D  3ED4               	addlw	212
  2221  022E  00A0               	movwf	??_LCD_Set_Cursor
  2222  022F  0820               	movf	??_LCD_Set_Cursor,w
  2223  0230  00A5               	movwf	LCD_Set_Cursor@temp
  2224                           
  2225                           ;lcd.h: 128: z = temp>>4;
  2226  0231  0825               	movf	LCD_Set_Cursor@temp,w
  2227  0232  00A0               	movwf	??_LCD_Set_Cursor
  2228  0233  3004               	movlw	4
  2229  0234                     u845:	
  2230  0234  1003               	clrc
  2231  0235  0CA0               	rrf	??_LCD_Set_Cursor,f
  2232  0236  3EFF               	addlw	-1
  2233  0237  1D03               	skipz
  2234  0238  2A34               	goto	u845
  2235  0239  0820               	movf	??_LCD_Set_Cursor,w
  2236  023A  00A1               	movwf	??_LCD_Set_Cursor+1
  2237  023B  0821               	movf	??_LCD_Set_Cursor+1,w
  2238  023C  00A3               	movwf	LCD_Set_Cursor@z
  2239                           
  2240                           ;lcd.h: 129: w = temp & 0x0F;
  2241  023D  0825               	movf	LCD_Set_Cursor@temp,w
  2242  023E  390F               	andlw	15
  2243  023F  00A0               	movwf	??_LCD_Set_Cursor
  2244  0240  0820               	movf	??_LCD_Set_Cursor,w
  2245  0241  00A4               	movwf	LCD_Set_Cursor@w
  2246                           
  2247                           ;lcd.h: 130: LCD_Cmd(z);
  2248  0242  0823               	movf	LCD_Set_Cursor@z,w
  2249  0243  247E               	fcall	_LCD_Cmd
  2250                           
  2251                           ;lcd.h: 131: LCD_Cmd(w);
  2252  0244  1283               	bcf	3,5	;RP0=0, select bank0
  2253  0245  1303               	bcf	3,6	;RP1=0, select bank0
  2254  0246  0824               	movf	LCD_Set_Cursor@w,w
  2255  0247  247E               	fcall	_LCD_Cmd
  2256  0248  0008               	return
  2257  0249                     __end_of_LCD_Set_Cursor:	
  2258                           
  2259                           	psect	text8
  2260  03DA                     __ptext8:	
  2261 ;; *************** function _LCD_Init *****************
  2262 ;; Defined at:
  2263 ;;		line 137 in file "lcd.h"
  2264 ;; Parameters:    Size  Location     Type
  2265 ;;		None
  2266 ;; Auto vars:     Size  Location     Type
  2267 ;;		None
  2268 ;; Return value:  Size  Location     Type
  2269 ;;                  1    wreg      void 
  2270 ;; Registers used:
  2271 ;;		wreg, status,2, status,0, pclath, cstack
  2272 ;; Tracked objects:
  2273 ;;		On entry : 0/0
  2274 ;;		On exit  : 0/0
  2275 ;;		Unchanged: 0/0
  2276 ;; Data sizes:     COMMON   BANK0   BANK1
  2277 ;;      Params:         0       0       0
  2278 ;;      Locals:         0       0       0
  2279 ;;      Temps:          2       0       0
  2280 ;;      Totals:         2       0       0
  2281 ;;Total ram usage:        2 bytes
  2282 ;; Hardware stack levels used:    1
  2283 ;; Hardware stack levels required when called:    3
  2284 ;; This function calls:
  2285 ;;		_LCD_Cmd
  2286 ;;		_LCD_Port
  2287 ;; This function is called by:
  2288 ;;		_main
  2289 ;; This function uses a non-reentrant model
  2290 ;;
  2291                           
  2292                           
  2293                           ;psect for function _LCD_Init
  2294  03DA                     _LCD_Init:	
  2295                           
  2296                           ;lcd.h: 139: LCD_Port(0x00);
  2297                           
  2298                           ;incstack = 0
  2299                           ; Regs used in _LCD_Init: [wreg+status,2+status,0+pclath+cstack]
  2300  03DA  3000               	movlw	0
  2301  03DB  2464               	fcall	_LCD_Port
  2302                           
  2303                           ;lcd.h: 140: _delay((unsigned long)((20)*(8000000L/4000.0)));
  2304  03DC  3034               	movlw	52
  2305  03DD  00F9               	movwf	??_LCD_Init+1
  2306  03DE  30F1               	movlw	241
  2307  03DF  00F8               	movwf	??_LCD_Init
  2308  03E0                     u1217:	
  2309  03E0  0BF8               	decfsz	??_LCD_Init,f
  2310  03E1  2BE0               	goto	u1217
  2311  03E2  0BF9               	decfsz	??_LCD_Init+1,f
  2312  03E3  2BE0               	goto	u1217
  2313  03E4  2BE5               	nop2
  2314                           
  2315                           ;lcd.h: 141: LCD_Cmd(0x03);
  2316  03E5  3003               	movlw	3
  2317  03E6  247E               	fcall	_LCD_Cmd
  2318                           
  2319                           ;lcd.h: 142: _delay((unsigned long)((5)*(8000000L/4000.0)));
  2320  03E7  300D               	movlw	13
  2321  03E8  00F9               	movwf	??_LCD_Init+1
  2322  03E9  30FB               	movlw	251
  2323  03EA  00F8               	movwf	??_LCD_Init
  2324  03EB                     u1227:	
  2325  03EB  0BF8               	decfsz	??_LCD_Init,f
  2326  03EC  2BEB               	goto	u1227
  2327  03ED  0BF9               	decfsz	??_LCD_Init+1,f
  2328  03EE  2BEB               	goto	u1227
  2329  03EF  2BF0               	nop2
  2330                           
  2331                           ;lcd.h: 143: LCD_Cmd(0x03);
  2332  03F0  3003               	movlw	3
  2333  03F1  247E               	fcall	_LCD_Cmd
  2334                           
  2335                           ;lcd.h: 144: _delay((unsigned long)((11)*(8000000L/4000.0)));
  2336  03F2  301D               	movlw	29
  2337  03F3  00F9               	movwf	??_LCD_Init+1
  2338  03F4  3091               	movlw	145
  2339  03F5  00F8               	movwf	??_LCD_Init
  2340  03F6                     u1237:	
  2341  03F6  0BF8               	decfsz	??_LCD_Init,f
  2342  03F7  2BF6               	goto	u1237
  2343  03F8  0BF9               	decfsz	??_LCD_Init+1,f
  2344  03F9  2BF6               	goto	u1237
  2345                           
  2346                           ;lcd.h: 145: LCD_Cmd(0x03);
  2347  03FA  3003               	movlw	3
  2348  03FB  247E               	fcall	_LCD_Cmd
  2349                           
  2350                           ;lcd.h: 147: LCD_Cmd(0x02);
  2351  03FC  3002               	movlw	2
  2352  03FD  247E               	fcall	_LCD_Cmd
  2353                           
  2354                           ;lcd.h: 148: LCD_Cmd(0x02);
  2355  03FE  3002               	movlw	2
  2356  03FF  247E               	fcall	_LCD_Cmd
  2357                           
  2358                           ;lcd.h: 149: LCD_Cmd(0x08);
  2359  0400  3008               	movlw	8
  2360  0401  247E               	fcall	_LCD_Cmd
  2361                           
  2362                           ;lcd.h: 150: LCD_Cmd(0x00);
  2363  0402  3000               	movlw	0
  2364  0403  247E               	fcall	_LCD_Cmd
  2365                           
  2366                           ;lcd.h: 151: LCD_Cmd(0x0C);
  2367  0404  300C               	movlw	12
  2368  0405  247E               	fcall	_LCD_Cmd
  2369                           
  2370                           ;lcd.h: 152: LCD_Cmd(0x00);
  2371  0406  3000               	movlw	0
  2372  0407  247E               	fcall	_LCD_Cmd
  2373                           
  2374                           ;lcd.h: 153: LCD_Cmd(0x06);
  2375  0408  3006               	movlw	6
  2376  0409  247E               	fcall	_LCD_Cmd
  2377  040A  0008               	return
  2378  040B                     __end_of_LCD_Init:	
  2379                           
  2380                           	psect	text9
  2381  0494                     __ptext9:	
  2382 ;; *************** function _LCD_Clear *****************
  2383 ;; Defined at:
  2384 ;;		line 59 in file "lcd.h"
  2385 ;; Parameters:    Size  Location     Type
  2386 ;;		None
  2387 ;; Auto vars:     Size  Location     Type
  2388 ;;		None
  2389 ;; Return value:  Size  Location     Type
  2390 ;;                  2   40[None  ] int 
  2391 ;; Registers used:
  2392 ;;		wreg, status,2, status,0, pclath, cstack
  2393 ;; Tracked objects:
  2394 ;;		On entry : 0/0
  2395 ;;		On exit  : 0/0
  2396 ;;		Unchanged: 0/0
  2397 ;; Data sizes:     COMMON   BANK0   BANK1
  2398 ;;      Params:         0       0       0
  2399 ;;      Locals:         0       0       0
  2400 ;;      Temps:          0       0       0
  2401 ;;      Totals:         0       0       0
  2402 ;;Total ram usage:        0 bytes
  2403 ;; Hardware stack levels used:    1
  2404 ;; Hardware stack levels required when called:    3
  2405 ;; This function calls:
  2406 ;;		_LCD_Cmd
  2407 ;; This function is called by:
  2408 ;;		_main
  2409 ;; This function uses a non-reentrant model
  2410 ;;
  2411                           
  2412                           
  2413                           ;psect for function _LCD_Clear
  2414  0494                     _LCD_Clear:	
  2415                           
  2416                           ;lcd.h: 61: LCD_Cmd(0);
  2417                           
  2418                           ;incstack = 0
  2419                           ; Regs used in _LCD_Clear: [wreg+status,2+status,0+pclath+cstack]
  2420  0494  3000               	movlw	0
  2421  0495  247E               	fcall	_LCD_Cmd
  2422                           
  2423                           ;lcd.h: 62: LCD_Cmd(1);
  2424  0496  3001               	movlw	1
  2425  0497  247E               	fcall	_LCD_Cmd
  2426  0498  0008               	return
  2427  0499                     __end_of_LCD_Clear:	
  2428                           
  2429                           	psect	text10
  2430  047E                     __ptext10:	
  2431 ;; *************** function _LCD_Cmd *****************
  2432 ;; Defined at:
  2433 ;;		line 50 in file "lcd.h"
  2434 ;; Parameters:    Size  Location     Type
  2435 ;;  a               1    wreg     unsigned char 
  2436 ;; Auto vars:     Size  Location     Type
  2437 ;;  a               1    7[COMMON] unsigned char 
  2438 ;; Return value:  Size  Location     Type
  2439 ;;                  1    wreg      void 
  2440 ;; Registers used:
  2441 ;;		wreg, status,2, status,0, pclath, cstack
  2442 ;; Tracked objects:
  2443 ;;		On entry : 0/0
  2444 ;;		On exit  : 0/0
  2445 ;;		Unchanged: 0/0
  2446 ;; Data sizes:     COMMON   BANK0   BANK1
  2447 ;;      Params:         0       0       0
  2448 ;;      Locals:         1       0       0
  2449 ;;      Temps:          2       0       0
  2450 ;;      Totals:         3       0       0
  2451 ;;Total ram usage:        3 bytes
  2452 ;; Hardware stack levels used:    1
  2453 ;; Hardware stack levels required when called:    2
  2454 ;; This function calls:
  2455 ;;		_LCD_Port
  2456 ;; This function is called by:
  2457 ;;		_LCD_Clear
  2458 ;;		_LCD_Set_Cursor
  2459 ;;		_LCD_Init
  2460 ;;		_LCD_Shift_Right
  2461 ;;		_LCD_Shift_Left
  2462 ;; This function uses a non-reentrant model
  2463 ;;
  2464                           
  2465                           
  2466                           ;psect for function _LCD_Cmd
  2467  047E                     _LCD_Cmd:	
  2468                           
  2469                           ;incstack = 0
  2470                           ; Regs used in _LCD_Cmd: [wreg+status,2+status,0+pclath+cstack]
  2471                           ;LCD_Cmd@a stored from wreg
  2472  047E  00F7               	movwf	LCD_Cmd@a
  2473                           
  2474                           ;lcd.h: 52: RC4 = 0;
  2475  047F  1283               	bcf	3,5	;RP0=0, select bank0
  2476  0480  1303               	bcf	3,6	;RP1=0, select bank0
  2477  0481  1207               	bcf	7,4	;volatile
  2478                           
  2479                           ;lcd.h: 53: LCD_Port(a);
  2480  0482  0877               	movf	LCD_Cmd@a,w
  2481  0483  2464               	fcall	_LCD_Port
  2482                           
  2483                           ;lcd.h: 54: RC6 = 1;
  2484  0484  1283               	bcf	3,5	;RP0=0, select bank0
  2485  0485  1303               	bcf	3,6	;RP1=0, select bank0
  2486  0486  1707               	bsf	7,6	;volatile
  2487                           
  2488                           ;lcd.h: 55: _delay((unsigned long)((4)*(8000000L/4000.0)));
  2489  0487  300B               	movlw	11
  2490  0488  00F6               	movwf	??_LCD_Cmd+1
  2491  0489  3062               	movlw	98
  2492  048A  00F5               	movwf	??_LCD_Cmd
  2493  048B                     u1247:	
  2494  048B  0BF5               	decfsz	??_LCD_Cmd,f
  2495  048C  2C8B               	goto	u1247
  2496  048D  0BF6               	decfsz	??_LCD_Cmd+1,f
  2497  048E  2C8B               	goto	u1247
  2498  048F  0000               	nop
  2499                           
  2500                           ;lcd.h: 56: RC6 = 0;
  2501  0490  1283               	bcf	3,5	;RP0=0, select bank0
  2502  0491  1303               	bcf	3,6	;RP1=0, select bank0
  2503  0492  1307               	bcf	7,6	;volatile
  2504  0493  0008               	return
  2505  0494                     __end_of_LCD_Cmd:	
  2506                           
  2507                           	psect	text11
  2508  0464                     __ptext11:	
  2509 ;; *************** function _LCD_Port *****************
  2510 ;; Defined at:
  2511 ;;		line 28 in file "lcd.h"
  2512 ;; Parameters:    Size  Location     Type
  2513 ;;  a               1    wreg     unsigned char 
  2514 ;; Auto vars:     Size  Location     Type
  2515 ;;  a               1    4[COMMON] unsigned char 
  2516 ;; Return value:  Size  Location     Type
  2517 ;;                  1    wreg      void 
  2518 ;; Registers used:
  2519 ;;		wreg
  2520 ;; Tracked objects:
  2521 ;;		On entry : 0/0
  2522 ;;		On exit  : 0/0
  2523 ;;		Unchanged: 0/0
  2524 ;; Data sizes:     COMMON   BANK0   BANK1
  2525 ;;      Params:         0       0       0
  2526 ;;      Locals:         1       0       0
  2527 ;;      Temps:          0       0       0
  2528 ;;      Totals:         1       0       0
  2529 ;;Total ram usage:        1 bytes
  2530 ;; Hardware stack levels used:    1
  2531 ;; Hardware stack levels required when called:    1
  2532 ;; This function calls:
  2533 ;;		Nothing
  2534 ;; This function is called by:
  2535 ;;		_LCD_Cmd
  2536 ;;		_LCD_Init
  2537 ;;		_LCD_Write_Char
  2538 ;; This function uses a non-reentrant model
  2539 ;;
  2540                           
  2541                           
  2542                           ;psect for function _LCD_Port
  2543  0464                     _LCD_Port:	
  2544                           
  2545                           ;incstack = 0
  2546                           ; Regs used in _LCD_Port: [wreg]
  2547                           ;LCD_Port@a stored from wreg
  2548  0464  00F4               	movwf	LCD_Port@a
  2549                           
  2550                           ;lcd.h: 30: if(a & 1)
  2551  0465  1C74               	btfss	LCD_Port@a,0
  2552  0466  2C6B               	goto	l27
  2553                           
  2554                           ;lcd.h: 31: RC0 = 1;
  2555  0467  1283               	bcf	3,5	;RP0=0, select bank0
  2556  0468  1303               	bcf	3,6	;RP1=0, select bank0
  2557  0469  1407               	bsf	7,0	;volatile
  2558  046A  2C6E               	goto	l28
  2559  046B                     l27:	
  2560                           
  2561                           ;lcd.h: 32: else
  2562                           ;lcd.h: 33: RC0 = 0;
  2563  046B  1283               	bcf	3,5	;RP0=0, select bank0
  2564  046C  1303               	bcf	3,6	;RP1=0, select bank0
  2565  046D  1007               	bcf	7,0	;volatile
  2566  046E                     l28:	
  2567                           
  2568                           ;lcd.h: 35: if(a & 2)
  2569  046E  1CF4               	btfss	LCD_Port@a,1
  2570  046F  2C72               	goto	l29
  2571                           
  2572                           ;lcd.h: 36: RC1 = 1;
  2573  0470  1487               	bsf	7,1	;volatile
  2574  0471  2C73               	goto	l30
  2575  0472                     l29:	
  2576                           
  2577                           ;lcd.h: 37: else
  2578                           ;lcd.h: 38: RC1 = 0;
  2579  0472  1087               	bcf	7,1	;volatile
  2580  0473                     l30:	
  2581                           
  2582                           ;lcd.h: 40: if(a & 4)
  2583  0473  1D74               	btfss	LCD_Port@a,2
  2584  0474  2C77               	goto	l31
  2585                           
  2586                           ;lcd.h: 41: RC2 = 1;
  2587  0475  1507               	bsf	7,2	;volatile
  2588  0476  2C78               	goto	l32
  2589  0477                     l31:	
  2590                           
  2591                           ;lcd.h: 42: else
  2592                           ;lcd.h: 43: RC2 = 0;
  2593  0477  1107               	bcf	7,2	;volatile
  2594  0478                     l32:	
  2595                           
  2596                           ;lcd.h: 45: if(a & 8)
  2597  0478  1DF4               	btfss	LCD_Port@a,3
  2598  0479  2C7C               	goto	l33
  2599                           
  2600                           ;lcd.h: 46: RC3 = 1;
  2601  047A  1587               	bsf	7,3	;volatile
  2602  047B  0008               	return
  2603  047C                     l33:	
  2604                           
  2605                           ;lcd.h: 47: else
  2606                           ;lcd.h: 48: RC3 = 0;
  2607  047C  1187               	bcf	7,3	;volatile
  2608  047D  0008               	return
  2609  047E                     __end_of_LCD_Port:	
  2610                           
  2611                           	psect	text12
  2612  02F8                     __ptext12:	
  2613 ;; *************** function _Init *****************
  2614 ;; Defined at:
  2615 ;;		line 26 in file "system.c"
  2616 ;; Parameters:    Size  Location     Type
  2617 ;;		None
  2618 ;; Auto vars:     Size  Location     Type
  2619 ;;		None
  2620 ;; Return value:  Size  Location     Type
  2621 ;;                  1    wreg      void 
  2622 ;; Registers used:
  2623 ;;		wreg, status,2, status,0
  2624 ;; Tracked objects:
  2625 ;;		On entry : 0/0
  2626 ;;		On exit  : 0/0
  2627 ;;		Unchanged: 0/0
  2628 ;; Data sizes:     COMMON   BANK0   BANK1
  2629 ;;      Params:         0       0       0
  2630 ;;      Locals:         0       0       0
  2631 ;;      Temps:          0       0       0
  2632 ;;      Totals:         0       0       0
  2633 ;;Total ram usage:        0 bytes
  2634 ;; Hardware stack levels used:    1
  2635 ;; Hardware stack levels required when called:    1
  2636 ;; This function calls:
  2637 ;;		Nothing
  2638 ;; This function is called by:
  2639 ;;		_main
  2640 ;; This function uses a non-reentrant model
  2641 ;;
  2642                           
  2643                           
  2644                           ;psect for function _Init
  2645  02F8                     _Init:	
  2646                           
  2647                           ;system.c: 28: TRISA = 0x14;
  2648                           
  2649                           ;incstack = 0
  2650                           ; Regs used in _Init: [wreg+status,2+status,0]
  2651  02F8  3014               	movlw	20
  2652  02F9  1683               	bsf	3,5	;RP0=1, select bank1
  2653  02FA  1303               	bcf	3,6	;RP1=0, select bank1
  2654  02FB  0085               	movwf	5	;volatile
  2655                           
  2656                           ;system.c: 29: ANSELA = 0x14;
  2657  02FC  3014               	movlw	20
  2658  02FD  1683               	bsf	3,5	;RP0=1, select bank3
  2659  02FE  1703               	bsf	3,6	;RP1=1, select bank3
  2660  02FF  0085               	movwf	5	;volatile
  2661                           
  2662                           ;system.c: 30: PORTA = 0x00;
  2663  0300  1283               	bcf	3,5	;RP0=0, select bank0
  2664  0301  1303               	bcf	3,6	;RP1=0, select bank0
  2665  0302  0185               	clrf	5	;volatile
  2666                           
  2667                           ;system.c: 32: TRISB = 0b00000000;
  2668  0303  1683               	bsf	3,5	;RP0=1, select bank1
  2669  0304  1303               	bcf	3,6	;RP1=0, select bank1
  2670  0305  0186               	clrf	6	;volatile
  2671                           
  2672                           ;system.c: 33: ANSELB = 0b00000000;
  2673  0306  1683               	bsf	3,5	;RP0=1, select bank3
  2674  0307  1703               	bsf	3,6	;RP1=1, select bank3
  2675  0308  0186               	clrf	6	;volatile
  2676                           
  2677                           ;system.c: 34: PORTB = 0x00;
  2678  0309  1283               	bcf	3,5	;RP0=0, select bank0
  2679  030A  1303               	bcf	3,6	;RP1=0, select bank0
  2680  030B  0186               	clrf	6	;volatile
  2681                           
  2682                           ;system.c: 36: TRISC = 0b00100000;
  2683  030C  3020               	movlw	32
  2684  030D  1683               	bsf	3,5	;RP0=1, select bank1
  2685  030E  1303               	bcf	3,6	;RP1=0, select bank1
  2686  030F  0087               	movwf	7	;volatile
  2687                           
  2688                           ;system.c: 37: ANSELC = 0x00;
  2689  0310  1683               	bsf	3,5	;RP0=1, select bank3
  2690  0311  1703               	bsf	3,6	;RP1=1, select bank3
  2691  0312  0187               	clrf	7	;volatile
  2692                           
  2693                           ;system.c: 44: PR2 = 0xff;
  2694  0313  30FF               	movlw	255
  2695  0314  1683               	bsf	3,5	;RP0=1, select bank1
  2696  0315  1303               	bcf	3,6	;RP1=0, select bank1
  2697  0316  0092               	movwf	18	;volatile
  2698                           
  2699                           ;system.c: 48: CCP1CON = 0x00;
  2700  0317  1283               	bcf	3,5	;RP0=0, select bank0
  2701  0318  1303               	bcf	3,6	;RP1=0, select bank0
  2702  0319  0197               	clrf	23	;volatile
  2703                           
  2704                           ;system.c: 49: CCP1CONbits.CCP1M = 0xF;
  2705  031A  300F               	movlw	15
  2706  031B  0497               	iorwf	23,f	;volatile
  2707                           
  2708                           ;system.c: 50: CCPR1L = 0x00;
  2709  031C  0195               	clrf	21	;volatile
  2710                           
  2711                           ;system.c: 52: PIR1bits.TMR2IF = 0;
  2712  031D  108C               	bcf	12,1	;volatile
  2713                           
  2714                           ;system.c: 53: T2CONbits.T2CKPS = 0x3;
  2715  031E  3003               	movlw	3
  2716  031F  0492               	iorwf	18,f	;volatile
  2717                           
  2718                           ;system.c: 55: T2CONbits.TMR2ON = 1;
  2719  0320  1512               	bsf	18,2	;volatile
  2720  0321                     l157:	
  2721                           ;system.c: 56: while(PIR1bits.TMR1IF);
  2722                           
  2723  0321  180C               	btfsc	12,0	;volatile
  2724  0322  2B21               	goto	l157
  2725                           
  2726                           ;system.c: 57: TRISCbits.TRISC5 = 0;
  2727  0323  1683               	bsf	3,5	;RP0=1, select bank1
  2728  0324  1303               	bcf	3,6	;RP1=0, select bank1
  2729  0325  1287               	bcf	7,5	;volatile
  2730                           
  2731                           ;system.c: 60: T1CON = 0;
  2732  0326  1283               	bcf	3,5	;RP0=0, select bank0
  2733  0327  1303               	bcf	3,6	;RP1=0, select bank0
  2734  0328  0190               	clrf	16	;volatile
  2735                           
  2736                           ;system.c: 61: T1CONbits.T1CKPS0 = 1;
  2737  0329  1610               	bsf	16,4	;volatile
  2738                           
  2739                           ;system.c: 62: T1CONbits.T1CKPS1 = 1;
  2740  032A  1690               	bsf	16,5	;volatile
  2741                           
  2742                           ;system.c: 69: TMR1H = 0xE7;
  2743  032B  30E7               	movlw	231
  2744  032C  008F               	movwf	15	;volatile
  2745                           
  2746                           ;system.c: 70: TMR1L = 0x95;
  2747  032D  3095               	movlw	149
  2748  032E  008E               	movwf	14	;volatile
  2749                           
  2750                           ;system.c: 71: T1CONbits.TMR1ON = 1;
  2751  032F  1410               	bsf	16,0	;volatile
  2752                           
  2753                           ;system.c: 72: INTCONbits.GIE = 1;
  2754  0330  178B               	bsf	11,7	;volatile
  2755                           
  2756                           ;system.c: 73: INTCONbits.PEIE = 1;
  2757  0331  170B               	bsf	11,6	;volatile
  2758                           
  2759                           ;system.c: 74: PIR1bits.TMR1IF = 0;
  2760  0332  100C               	bcf	12,0	;volatile
  2761                           
  2762                           ;system.c: 75: PIE1bits.TMR1IE = 1;
  2763  0333  1683               	bsf	3,5	;RP0=1, select bank1
  2764  0334  1303               	bcf	3,6	;RP1=0, select bank1
  2765  0335  140C               	bsf	12,0	;volatile
  2766  0336  0008               	return
  2767  0337                     __end_of_Init:	
  2768                           
  2769                           	psect	text13
  2770  042A                     __ptext13:	
  2771 ;; *************** function _ADCRead *****************
  2772 ;; Defined at:
  2773 ;;		line 15 in file "user.c"
  2774 ;; Parameters:    Size  Location     Type
  2775 ;;  ch              1    wreg     unsigned char 
  2776 ;; Auto vars:     Size  Location     Type
  2777 ;;  ch              1    5[COMMON] unsigned char 
  2778 ;; Return value:  Size  Location     Type
  2779 ;;                  1    wreg      unsigned char 
  2780 ;; Registers used:
  2781 ;;		wreg, status,2, status,0
  2782 ;; Tracked objects:
  2783 ;;		On entry : 0/0
  2784 ;;		On exit  : 0/0
  2785 ;;		Unchanged: 0/0
  2786 ;; Data sizes:     COMMON   BANK0   BANK1
  2787 ;;      Params:         0       0       0
  2788 ;;      Locals:         1       0       0
  2789 ;;      Temps:          1       0       0
  2790 ;;      Totals:         2       0       0
  2791 ;;Total ram usage:        2 bytes
  2792 ;; Hardware stack levels used:    1
  2793 ;; Hardware stack levels required when called:    1
  2794 ;; This function calls:
  2795 ;;		Nothing
  2796 ;; This function is called by:
  2797 ;;		_main
  2798 ;; This function uses a non-reentrant model
  2799 ;;
  2800                           
  2801                           
  2802                           ;psect for function _ADCRead
  2803  042A                     _ADCRead:	
  2804                           
  2805                           ;incstack = 0
  2806                           ; Regs used in _ADCRead: [wreg+status,2+status,0]
  2807                           ;ADCRead@ch stored from wreg
  2808  042A  00F5               	movwf	ADCRead@ch
  2809                           
  2810                           ;user.c: 18: ADCON0=0x00;
  2811  042B  1283               	bcf	3,5	;RP0=0, select bank0
  2812  042C  1303               	bcf	3,6	;RP1=0, select bank0
  2813  042D  019F               	clrf	31	;volatile
  2814                           
  2815                           ;user.c: 19: ADCON0=(ch<<2);
  2816  042E  0875               	movf	ADCRead@ch,w
  2817  042F  00F4               	movwf	??_ADCRead
  2818  0430  3001               	movlw	1
  2819  0431                     u875:	
  2820  0431  1003               	clrc
  2821  0432  0DF4               	rlf	??_ADCRead,f
  2822  0433  3EFF               	addlw	-1
  2823  0434  1D03               	skipz
  2824  0435  2C31               	goto	u875
  2825  0436  1003               	clrc
  2826  0437  0D74               	rlf	??_ADCRead,w
  2827  0438  009F               	movwf	31	;volatile
  2828                           
  2829                           ;user.c: 20: ADON=1;
  2830  0439  141F               	bsf	31,0	;volatile
  2831                           
  2832                           ;user.c: 21: _delay((unsigned long)((100)*(8000000L/4000000.0)));
  2833  043A  3042               	movlw	66
  2834  043B  00F4               	movwf	??_ADCRead
  2835  043C                     u1257:	
  2836  043C  0BF4               	decfsz	??_ADCRead,f
  2837  043D  2C3C               	goto	u1257
  2838  043E  0000               	nop
  2839                           
  2840                           ;user.c: 22: GO_nDONE=1;
  2841  043F  1283               	bcf	3,5	;RP0=0, select bank0
  2842  0440  1303               	bcf	3,6	;RP1=0, select bank0
  2843  0441  149F               	bsf	31,1	;volatile
  2844  0442                     l178:	
  2845                           ;user.c: 23: while(GO_nDONE);
  2846                           
  2847  0442  189F               	btfsc	31,1	;volatile
  2848  0443  2C42               	goto	l178
  2849                           
  2850                           ;user.c: 24: ADON=0;
  2851  0444  101F               	bcf	31,0	;volatile
  2852                           
  2853                           ;user.c: 25: return ADRES;
  2854  0445  081E               	movf	30,w	;volatile
  2855  0446  0008               	return
  2856  0447                     __end_of_ADCRead:	
  2857                           
  2858                           	psect	text14
  2859  0447                     __ptext14:	
  2860 ;; *************** function _int_routine *****************
  2861 ;; Defined at:
  2862 ;;		line 10 in file "interupts.c"
  2863 ;; Parameters:    Size  Location     Type
  2864 ;;		None
  2865 ;; Auto vars:     Size  Location     Type
  2866 ;;		None
  2867 ;; Return value:  Size  Location     Type
  2868 ;;                  1    wreg      void 
  2869 ;; Registers used:
  2870 ;;		wreg
  2871 ;; Tracked objects:
  2872 ;;		On entry : 0/0
  2873 ;;		On exit  : 0/0
  2874 ;;		Unchanged: 0/0
  2875 ;; Data sizes:     COMMON   BANK0   BANK1
  2876 ;;      Params:         0       0       0
  2877 ;;      Locals:         0       0       0
  2878 ;;      Temps:          4       0       0
  2879 ;;      Totals:         4       0       0
  2880 ;;Total ram usage:        4 bytes
  2881 ;; Hardware stack levels used:    1
  2882 ;; This function calls:
  2883 ;;		Nothing
  2884 ;; This function is called by:
  2885 ;;		Interrupt level 1
  2886 ;; This function uses a non-reentrant model
  2887 ;;
  2888                           
  2889                           
  2890                           ;psect for function _int_routine
  2891  0447                     _int_routine:	
  2892                           
  2893                           ;interupts.c: 12: extern unsigned char OutCurrent;
  2894                           ;interupts.c: 15: if (PIE1bits.TMR1IE && PIR1bits.TMR1IF)
  2895  0447  1683               	bsf	3,5	;RP0=1, select bank1
  2896  0448  1303               	bcf	3,6	;RP1=0, select bank1
  2897  0449  1C0C               	btfss	12,0	;volatile
  2898  044A  2C58               	goto	i1l199
  2899  044B  1283               	bcf	3,5	;RP0=0, select bank0
  2900  044C  1303               	bcf	3,6	;RP1=0, select bank0
  2901  044D  1C0C               	btfss	12,0	;volatile
  2902  044E  2C58               	goto	i1l199
  2903                           
  2904                           ;interupts.c: 16: {
  2905                           ;interupts.c: 17: PIR1bits.TMR1IF = 0;
  2906  044F  100C               	bcf	12,0	;volatile
  2907                           
  2908                           ;interupts.c: 18: T1CONbits.TMR1ON = 0;
  2909  0450  1010               	bcf	16,0	;volatile
  2910                           
  2911                           ;interupts.c: 20: TMR1H = 0xE7;
  2912  0451  30E7               	movlw	231
  2913  0452  008F               	movwf	15	;volatile
  2914                           
  2915                           ;interupts.c: 21: TMR1L = 0x95;
  2916  0453  3095               	movlw	149
  2917  0454  008E               	movwf	14	;volatile
  2918                           
  2919                           ;interupts.c: 23: T1CONbits.TMR1ON = 1;
  2920  0455  1410               	bsf	16,0	;volatile
  2921                           
  2922                           ;interupts.c: 26: CCPR1L = OutCurrent;
  2923  0456  084B               	movf	_OutCurrent,w
  2924  0457  0095               	movwf	21	;volatile
  2925  0458                     i1l199:	
  2926  0458  0873               	movf	??_int_routine+3,w
  2927  0459  1283               	bcf	3,5	;RP0=0, select bank0
  2928  045A  00FF               	movwf	127
  2929  045B  0872               	movf	??_int_routine+2,w
  2930  045C  008A               	movwf	10
  2931  045D  0871               	movf	??_int_routine+1,w
  2932  045E  0084               	movwf	4
  2933  045F  0E70               	swapf	??_int_routine^(0+-128),w
  2934  0460  0083               	movwf	3
  2935  0461  0EFE               	swapf	126,f
  2936  0462  0E7E               	swapf	126,w
  2937  0463  0009               	retfie
  2938  0464                     __end_of_int_routine:	
  2939  007E                     btemp	set	126	;btemp
  2940  007E                     wtemp	set	126
  2941  007E                     wtemp0	set	126
  2942  0080                     wtemp1	set	128
  2943  0082                     wtemp2	set	130
  2944  0084                     wtemp3	set	132
  2945  0086                     wtemp4	set	134
  2946  0088                     wtemp5	set	136
  2947  007F                     wtemp6	set	127
  2948  007E                     ttemp	set	126
  2949  007E                     ttemp0	set	126
  2950  0081                     ttemp1	set	129
  2951  0084                     ttemp2	set	132
  2952  0087                     ttemp3	set	135
  2953  007F                     ttemp4	set	127
  2954  007E                     ltemp	set	126
  2955  007E                     ltemp0	set	126
  2956  0082                     ltemp1	set	130
  2957  0086                     ltemp2	set	134
  2958  0080                     ltemp3	set	128
  2959                           
  2960                           	psect	intentry
  2961  0004                     __pintentry:	
  2962                           ;incstack = 0
  2963                           ; Regs used in _int_routine: [wreg]
  2964                           
  2965  0004                     interrupt_function:	
  2966  007E                     saved_w	set	btemp
  2967  0004  00FE               	movwf	btemp
  2968  0005  0E03               	swapf	3,w
  2969  0006  00F0               	movwf	??_int_routine
  2970  0007  0804               	movf	4,w
  2971  0008  00F1               	movwf	??_int_routine+1
  2972  0009  080A               	movf	10,w
  2973  000A  00F2               	movwf	??_int_routine+2
  2974  000B  1283               	bcf	3,5	;RP0=0, select bank0
  2975  000C  1303               	bcf	3,6	;RP1=0, select bank0
  2976  000D  087F               	movf	btemp+1,w
  2977  000E  00F3               	movwf	??_int_routine+3
  2978  000F  2C47               	ljmp	_int_routine


Data Sizes:
    Strings     68
    Constant    10
    Data        1
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      10
    BANK0            80     43      44
    BANK1            32      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 17
		 -> STR_4(CODE[17]), STR_3(CODE[17]), STR_2(CODE[17]), STR_1(CODE[17]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 16
		 -> main@s(BANK0[16]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    LCD_Write_String@a	PTR const unsigned char  size(1) Largest target is 16
		 -> main@s(BANK0[16]), 


Critical Paths under _main in COMMON

    _main->_LCD_Init
    _main->_LCD_Write_String
    _main->___awdiv
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    ___awdiv->_ADCRead
    _LCD_Write_String->_LCD_Write_Char
    _LCD_Write_Char->_LCD_Port
    _LCD_Set_Cursor->_LCD_Cmd
    _LCD_Init->_LCD_Cmd
    _LCD_Clear->_LCD_Cmd
    _LCD_Cmd->_LCD_Port

Critical Paths under _int_routine in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv

Critical Paths under _int_routine in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _int_routine in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                22    22      0    3866
                                             21 BANK0     22    22      0
                            _ADCRead
                               _Init
                          _LCD_Clear
                           _LCD_Init
                     _LCD_Set_Cursor
                   _LCD_Write_String
                            ___awdiv
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             21    18      3    1330
                                              8 BANK0     13    10      3
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     265
                                              9 COMMON     1     1      0
                                              3 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     268
                                              4 COMMON     5     1      4
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              9     5      4     512
                                              6 COMMON     4     0      4
                                              0 BANK0      5     5      0
                            _ADCRead (ARG)
 ---------------------------------------------------------------------------------
 (1) _LCD_Write_String                                     4     4      0     376
                                              9 COMMON     1     1      0
                                              0 BANK0      3     3      0
                     _LCD_Write_Char
 ---------------------------------------------------------------------------------
 (2) _LCD_Write_Char                                       4     4      0     178
                                              5 COMMON     4     4      0
                           _LCD_Port
 ---------------------------------------------------------------------------------
 (1) _LCD_Set_Cursor                                       7     6      1     862
                                              8 COMMON     1     0      1
                                              0 BANK0      6     6      0
                            _LCD_Cmd
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             2     2      0     198
                                              8 COMMON     2     2      0
                            _LCD_Cmd
                           _LCD_Port
 ---------------------------------------------------------------------------------
 (1) _LCD_Clear                                            0     0      0     110
                            _LCD_Cmd
 ---------------------------------------------------------------------------------
 (2) _LCD_Cmd                                              3     3      0     110
                                              5 COMMON     3     3      0
                           _LCD_Port
 ---------------------------------------------------------------------------------
 (3) _LCD_Port                                             1     1      0      88
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Init                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADCRead                                              2     2      0      22
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _int_routine                                          4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCRead
   _Init
   _LCD_Clear
     _LCD_Cmd
       _LCD_Port
   _LCD_Init
     _LCD_Cmd
       _LCD_Port
     _LCD_Port
   _LCD_Set_Cursor
     _LCD_Cmd
       _LCD_Port
   _LCD_Write_String
     _LCD_Write_Char
       _LCD_Port
   ___awdiv
     _ADCRead (ARG)
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)

 _int_routine (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               20      0       0       7        0.0%
BITBANK1            20      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     2B      2C       5       55.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      A       A       1       71.4%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      36       8        0.0%
ABS                  0      0      36       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Tue Aug 29 16:21:52 2017

                        pc 0002                __CFG_CP$OFF 0000                         l30 0473  
                       l31 0477                         l32 0478                         l33 047C  
                       l27 046B                         l28 046E                         l29 0472  
                       l81 0099               ___awdiv@sign 0022                         fsr 0004  
                      l157 0321                        l178 0442                        _RC0 0038  
                      _RC1 0039                        _RC2 003A                        _RC3 003B  
                      _RC4 003C                        _RC6 003E                        _PS0 0408  
                      _PR2 0092                        _PS1 0409                        _PS2 040A  
                      u635 03BA                        u805 01EE                        u725 0380  
                      u655 0344                        _PSA 040B                        u825 0211  
                      u745 0391                        u675 0350                        u755 039A  
                      u845 0234                        u685 035C                        u925 0169  
                      u695 0366                        u785 01CC                        u875 0431  
                      fsr0 0004            __end_of_ADCRead 0447                        indf 0000  
          __end_of_LCD_Cmd 0494             _LCD_Set_Cursor 01BE                       l1103 0399  
                     l1123 01E1                       l1107 03A4                       l1133 0203  
                     l1143 0226                       l1311 0276                       l1321 0297  
                     l1081 0365                       l1073 0341                       l1241 013D  
                     l1075 034F                       l1251 0154                       l1235 012B  
                     l1325 029F                       l1317 028C                       l1309 0268  
                     l1085 0370                       l1263 0173                       l1343 002A  
                     l1169 0410                       l1097 037D                       l1257 015A  
                     l1281 01B9                       l1361 0050                       l1099 038B  
                     l1355 004C                       l1293 0255                       l1277 0186  
                     l1269 0182                       l1381 00B6                       l1373 0095  
                     l1349 0030                       l1279 010F                       l1367 006C  
                     l1299 0260                       l1379 00B5                       _ADON 00F8  
                     STR_1 02B4               __CFG_WDTE$ON 0000                       STR_2 02D6  
                     STR_3 02C5                       STR_4 02E7                       _T0CS 040D  
                     u1005 026B                       u1025 0277                       u1035 0283  
                     u1115 0089                       u1045 028D                       u1207 03D3  
                     u1135 00AB                       u1217 03E0                       u1227 03EB  
                     _T0SE 040C                       u1237 03F6                       u1247 048B  
                     u1257 043C                       u1177 001E                       u1187 0072  
                     u1197 03C6                       _TMR0 0001                       _Init 02F8  
        ?_LCD_Write_String 0070                       _main 0015         __size_of_LCD_Clear 0005  
                     btemp 007E              __CFG_BOREN$ON 0000                       ltemp 007E  
                     start 0010         ??_LCD_Write_String 0079                       ttemp 007E  
                     wtemp 007E              __CFG_MCLRE$ON 0000           __end_of_LCD_Init 040B  
            __CFG_PLLEN$ON 0000           __end_of_LCD_Port 047E                      ?_Init 0070  
                    ?_main 0070            __end_of___awdiv 02A4                      _ADRES 001E  
          ___awdiv@divisor 0076                      _T1CON 0010                      _IRCF0 0484  
                    _IRCF1 0485            __end_of___lwdiv 0375            __end_of___lwmod 03A9  
                    i1l199 0458            ___awdiv@counter 0021                      _TMR1H 000F  
                    _TMR1L 000E                      _PORTA 0005                      _PORTB 0006  
                    _TRISA 0085                      _TRISB 0086                      _TRISC 0087  
            __CFG_PWRTE$ON 0000     __end_of_LCD_Set_Cursor 0249            __end_of_dpowers 02B4  
                    main@s 0038                      main@x 004A                      pclath 000A  
             main@setpoint 0048                      ltemp0 007E                      ltemp1 0082  
                    ltemp2 0086                      ltemp3 0080                      ttemp0 007E  
                    ttemp1 0081                      ttemp2 0084                      ttemp3 0087  
                    ttemp4 007F                      status 0003                      wtemp0 007E  
                    wtemp1 0080                      wtemp2 0082                      wtemp3 0084  
                    wtemp4 0086                      wtemp5 0088                      wtemp6 007F  
          __end_of_sprintf 01BE               ?_int_routine 0070             _LCD_Write_Char 03A9  
          __initialization 0011               __end_of_Init 0337               __end_of_main 0108  
                ??_ADCRead 0074                     ??_Init 0074                     ??_main 0035  
        __end_of_LCD_Clear 0499                  ??_LCD_Cmd 0075            ?_LCD_Set_Cursor 0078  
                ADCRead@ch 0075                     _ADCON0 001F                     _ADCON1 009F  
                   _CCPR1L 0015           ___awdiv@dividend 0078                     _ANSELA 0185  
                   _ANSELB 0186                     _ANSELC 0187                     _FVRCON 009D  
   __end_of_LCD_Write_Char 03DA            main@ReadCurrent 0049                  ??___awdiv 0020  
               _OutCurrent 004B                  ??___lwdiv 0078             __CFG_WRTEN$OFF 0000  
                ??___lwmod 0079           ___awdiv@quotient 0023                     saved_w 007E  
                ??_sprintf 002B            LCD_Set_Cursor@w 0024            LCD_Set_Cursor@x 0022  
          LCD_Set_Cursor@y 0078            LCD_Set_Cursor@z 0023    __end_of__initialization 0013  
                ?_LCD_Init 0070                  ?_LCD_Port 0070            ?_LCD_Write_Char 0070  
           __pcstackCOMMON 0070                  LCD_Port@a 0074               __pidataBANK0 0499  
               ??_LCD_Init 0078                 ??_LCD_Port 0074       __size_of_int_routine 001D  
               __pmaintext 0015                 __pintentry 0004                    _CCP1CON 0017  
                  _ADCRead 042A  __size_of_LCD_Write_String 001F                    _LCD_Cmd 047E  
               __stringtab 02A4                    ___awdiv 0249                    ___lwdiv 0337  
                  ___lwmod 0375           ??_LCD_Set_Cursor 0020                    __ptext1 0108  
                  __ptext2 0375                    __ptext3 0337                    __ptext4 0249  
                  __ptext5 040B                    __ptext6 03A9                    __ptext7 01BE  
                  __ptext8 03DA                    __ptext9 0494                  _T1CONbits 0010  
                  _dpowers 02AA                  _T2CONbits 0012                  _LCD_Clear 0494  
                  _sprintf 0108       end_of_initialization 0013                  _PORTCbits 0007  
                _TRISCbits 0087                 ?_LCD_Clear 0070          LCD_Write_String@a 0022  
        LCD_Write_String@i 0020           ??_LCD_Write_Char 0075                _CCP1CONbits 0017  
        __size_of_LCD_Init 0031          __size_of_LCD_Port 001A           _LCD_Write_String 040B  
      start_initialization 0011                __pdataBANK0 004B            LCD_Write_Char@a 0078  
          LCD_Write_Char@y 0077                   ?_ADCRead 0070                   ?_LCD_Cmd 0070  
                 LCD_Cmd@a 0077                  ___latbits 0000              __pcstackBANK0 0020  
              ??_LCD_Clear 0078                sprintf@flag 002F              ??_int_routine 0070  
              sprintf@prec 0030           ___lwdiv@dividend 0076                   ?___awdiv 0076  
                 ?___lwdiv 0074                   ?___lwmod 0023                  __pstrings 02A4  
         ___lwdiv@quotient 0020                   ?_sprintf 0028          interrupt_function 0004  
                 _LCD_Init 03DA                   _LCD_Port 0464                   _PIE1bits 008C  
                 _PIR1bits 000C                   _GO_nDONE 00F9        __end_of_int_routine 0464  
         __size_of_ADCRead 001D                __stringbase 02A9           __size_of_LCD_Cmd 0016  
 __end_of_LCD_Write_String 042A           __size_of___awdiv 005B           __size_of___lwdiv 003E  
         __size_of___lwmod 0034         __end_of__stringtab 02AA                 sprintf@val 0031  
          ___lwdiv@divisor 0074            ___lwdiv@counter 0022                   __ptext10 047E  
                 __ptext11 0464                   __ptext12 02F8                   __ptext13 042A  
                 __ptext14 0447    __size_of_LCD_Set_Cursor 008B           __size_of_sprintf 00B6  
            __size_of_Init 003F              __size_of_main 00F3                _int_routine 0447  
               _INTCONbits 000B         LCD_Write_Char@temp 0076                   intlevel1 0000  
                sprintf@ap 002E                  sprintf@sp 0033           ___lwmod@dividend 0025  
                stringcode 02A4    __size_of_LCD_Write_Char 0031         LCD_Set_Cursor@temp 0025  
                 sprintf@c 0034                   sprintf@f 0028            ___lwmod@divisor 0023  
          ___lwmod@counter 0027                   stringdir 02A4                   stringtab 02A4  
       __CFG_FOSC$INTOSCIO 0000  
