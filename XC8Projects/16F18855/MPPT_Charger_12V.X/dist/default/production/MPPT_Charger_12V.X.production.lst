

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Thu Jul 12 16:19:28 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F18855
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	stringtext1,global,class=STRCODE,delta=2
     7                           	psect	stringtext2,global,class=STRCODE,delta=2
     8                           	psect	stringtext3,global,class=STRCODE,delta=2
     9                           	psect	stringtext4,global,class=STRCODE,delta=2
    10                           	psect	stringtext5,global,class=STRCODE,delta=2
    11                           	psect	cinit,global,class=CODE,merge=1,delta=2
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    17                           	psect	clrtext,global,class=CODE,delta=2
    18                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    24                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    25                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    26                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    27                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    28                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    29                           	psect	text8,local,class=CODE,merge=1,delta=2
    30                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    31                           	psect	text10,local,class=CODE,merge=1,delta=2
    32                           	psect	text11,local,class=CODE,merge=1,delta=2
    33                           	psect	text12,local,class=CODE,merge=1,delta=2
    34                           	psect	text13,local,class=CODE,merge=1,delta=2
    35                           	psect	text14,local,class=CODE,merge=1,delta=2
    36                           	psect	text15,local,class=CODE,merge=1,delta=2
    37                           	psect	text16,local,class=CODE,merge=1,delta=2
    38                           	psect	text17,local,class=CODE,merge=1,delta=2,group=2
    39                           	psect	text18,local,class=CODE,merge=1,delta=2
    40                           	psect	text19,local,class=CODE,merge=1,delta=2
    41                           	psect	text20,local,class=CODE,merge=1,delta=2
    42                           	psect	text21,local,class=CODE,merge=1,delta=2
    43                           	psect	text22,local,class=CODE,merge=1,delta=2
    44                           	psect	text23,local,class=CODE,merge=1,delta=2
    45                           	psect	text24,local,class=CODE,merge=1,delta=2
    46                           	psect	text25,local,class=CODE,merge=1,delta=2
    47                           	psect	text26,local,class=CODE,merge=1,delta=2
    48                           	psect	text27,local,class=CODE,merge=1,delta=2
    49                           	psect	text28,local,class=CODE,merge=1,delta=2
    50                           	psect	text29,local,class=CODE,merge=1,delta=2
    51                           	psect	text30,local,class=CODE,merge=1,delta=2
    52                           	psect	text31,local,class=CODE,merge=1,delta=2
    53                           	psect	text32,local,class=CODE,merge=1,delta=2
    54                           	psect	text33,local,class=CODE,merge=1,delta=2,group=2
    55                           	psect	text34,local,class=CODE,merge=1,delta=2,group=2
    56                           	psect	text35,local,class=CODE,merge=1,delta=2
    57                           	psect	text36,local,class=CODE,merge=1,delta=2,group=2
    58                           	psect	text37,local,class=CODE,merge=1,delta=2
    59                           	psect	text38,local,class=CODE,merge=1,delta=2
    60                           	psect	text39,local,class=CODE,merge=1,delta=2,group=2
    61                           	psect	text40,local,class=CODE,merge=1,delta=2,group=2
    62                           	psect	text41,local,class=CODE,merge=1,delta=2,group=2
    63                           	psect	text42,local,class=CODE,merge=1,delta=2,group=2
    64                           	dabs	1,0x620,48
    65                           	dabs	1,0x5A0,80
    66                           	dabs	1,0x520,80
    67                           	dabs	1,0x4A0,80
    68                           	dabs	1,0x420,80
    69                           	dabs	1,0x3D0,32
    70                           	dabs	1,0x2260,0,_samples
    71                           	dabs	1,0x7E,2
    72  0000                     
    73                           ; Version 1.45
    74                           ; Generated 16/11/2017 GMT
    75                           ; 
    76                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    77                           ; All rights reserved.
    78                           ; 
    79                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    80                           ; 
    81                           ; Redistribution and use in source and binary forms, with or without modification, are
    82                           ; permitted provided that the following conditions are met:
    83                           ; 
    84                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    85                           ;        conditions and the following disclaimer.
    86                           ; 
    87                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    88                           ;        of conditions and the following disclaimer in the documentation and/or other
    89                           ;        materials provided with the distribution.
    90                           ; 
    91                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    92                           ;        software without specific prior written permission.
    93                           ; 
    94                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    95                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    96                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    97                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    98                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    99                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   100                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   101                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   102                           ; 
   103                           ; 
   104                           ; Code-generator required, PIC16F18855 Definitions
   105                           ; 
   106                           ; SFR Addresses
   107  0000                     	;# 
   108  0001                     	;# 
   109  0002                     	;# 
   110  0003                     	;# 
   111  0004                     	;# 
   112  0005                     	;# 
   113  0006                     	;# 
   114  0007                     	;# 
   115  0008                     	;# 
   116  0009                     	;# 
   117  000A                     	;# 
   118  000B                     	;# 
   119  000C                     	;# 
   120  000D                     	;# 
   121  000E                     	;# 
   122  0010                     	;# 
   123  0011                     	;# 
   124  0012                     	;# 
   125  0013                     	;# 
   126  0016                     	;# 
   127  0017                     	;# 
   128  0018                     	;# 
   129  001C                     	;# 
   130  001C                     	;# 
   131  001D                     	;# 
   132  001D                     	;# 
   133  001E                     	;# 
   134  001F                     	;# 
   135  008C                     	;# 
   136  008C                     	;# 
   137  008D                     	;# 
   138  008E                     	;# 
   139  008E                     	;# 
   140  008F                     	;# 
   141  0090                     	;# 
   142  0090                     	;# 
   143  0091                     	;# 
   144  0093                     	;# 
   145  0094                     	;# 
   146  0095                     	;# 
   147  0096                     	;# 
   148  0097                     	;# 
   149  0098                     	;# 
   150  0099                     	;# 
   151  009A                     	;# 
   152  009B                     	;# 
   153  009C                     	;# 
   154  009D                     	;# 
   155  009E                     	;# 
   156  010C                     	;# 
   157  010D                     	;# 
   158  010E                     	;# 
   159  010E                     	;# 
   160  010F                     	;# 
   161  0110                     	;# 
   162  0110                     	;# 
   163  0111                     	;# 
   164  0112                     	;# 
   165  0112                     	;# 
   166  0113                     	;# 
   167  0114                     	;# 
   168  0114                     	;# 
   169  0115                     	;# 
   170  0116                     	;# 
   171  0116                     	;# 
   172  0117                     	;# 
   173  0119                     	;# 
   174  0119                     	;# 
   175  0119                     	;# 
   176  011A                     	;# 
   177  011A                     	;# 
   178  011A                     	;# 
   179  011B                     	;# 
   180  011B                     	;# 
   181  011B                     	;# 
   182  011B                     	;# 
   183  011B                     	;# 
   184  011C                     	;# 
   185  011C                     	;# 
   186  011C                     	;# 
   187  011D                     	;# 
   188  011D                     	;# 
   189  011D                     	;# 
   190  011E                     	;# 
   191  011E                     	;# 
   192  011E                     	;# 
   193  011F                     	;# 
   194  011F                     	;# 
   195  011F                     	;# 
   196  011F                     	;# 
   197  011F                     	;# 
   198  018C                     	;# 
   199  018D                     	;# 
   200  018E                     	;# 
   201  018F                     	;# 
   202  0190                     	;# 
   203  0191                     	;# 
   204  0192                     	;# 
   205  0196                     	;# 
   206  0197                     	;# 
   207  0198                     	;# 
   208  0199                     	;# 
   209  019A                     	;# 
   210  019B                     	;# 
   211  019C                     	;# 
   212  020C                     	;# 
   213  020C                     	;# 
   214  020D                     	;# 
   215  020E                     	;# 
   216  020F                     	;# 
   217  020F                     	;# 
   218  0210                     	;# 
   219  0210                     	;# 
   220  0211                     	;# 
   221  0211                     	;# 
   222  0212                     	;# 
   223  0212                     	;# 
   224  0213                     	;# 
   225  0214                     	;# 
   226  0215                     	;# 
   227  0215                     	;# 
   228  0216                     	;# 
   229  0216                     	;# 
   230  0217                     	;# 
   231  0217                     	;# 
   232  0218                     	;# 
   233  0218                     	;# 
   234  0219                     	;# 
   235  021A                     	;# 
   236  021B                     	;# 
   237  021B                     	;# 
   238  021C                     	;# 
   239  021C                     	;# 
   240  021D                     	;# 
   241  021D                     	;# 
   242  021E                     	;# 
   243  021F                     	;# 
   244  028C                     	;# 
   245  028C                     	;# 
   246  028D                     	;# 
   247  028D                     	;# 
   248  028E                     	;# 
   249  028F                     	;# 
   250  0290                     	;# 
   251  0290                     	;# 
   252  0291                     	;# 
   253  0292                     	;# 
   254  0292                     	;# 
   255  0293                     	;# 
   256  0293                     	;# 
   257  0294                     	;# 
   258  0295                     	;# 
   259  0296                     	;# 
   260  0296                     	;# 
   261  0297                     	;# 
   262  0298                     	;# 
   263  0298                     	;# 
   264  0299                     	;# 
   265  0299                     	;# 
   266  029A                     	;# 
   267  029B                     	;# 
   268  029C                     	;# 
   269  029C                     	;# 
   270  029D                     	;# 
   271  030C                     	;# 
   272  030C                     	;# 
   273  030D                     	;# 
   274  030E                     	;# 
   275  030F                     	;# 
   276  0310                     	;# 
   277  0310                     	;# 
   278  0311                     	;# 
   279  0312                     	;# 
   280  0313                     	;# 
   281  0314                     	;# 
   282  0314                     	;# 
   283  0315                     	;# 
   284  0316                     	;# 
   285  0317                     	;# 
   286  0318                     	;# 
   287  0318                     	;# 
   288  0319                     	;# 
   289  031A                     	;# 
   290  031B                     	;# 
   291  031C                     	;# 
   292  031C                     	;# 
   293  031D                     	;# 
   294  031E                     	;# 
   295  031F                     	;# 
   296  038C                     	;# 
   297  038D                     	;# 
   298  038E                     	;# 
   299  0390                     	;# 
   300  0391                     	;# 
   301  0392                     	;# 
   302  040C                     	;# 
   303  040D                     	;# 
   304  040E                     	;# 
   305  040F                     	;# 
   306  0410                     	;# 
   307  0411                     	;# 
   308  0416                     	;# 
   309  0416                     	;# 
   310  0417                     	;# 
   311  0418                     	;# 
   312  0418                     	;# 
   313  0419                     	;# 
   314  041A                     	;# 
   315  041A                     	;# 
   316  041B                     	;# 
   317  041C                     	;# 
   318  041C                     	;# 
   319  041D                     	;# 
   320  041E                     	;# 
   321  041F                     	;# 
   322  048C                     	;# 
   323  048C                     	;# 
   324  048D                     	;# 
   325  048E                     	;# 
   326  048F                     	;# 
   327  048F                     	;# 
   328  0490                     	;# 
   329  0491                     	;# 
   330  0492                     	;# 
   331  0492                     	;# 
   332  0493                     	;# 
   333  0494                     	;# 
   334  0495                     	;# 
   335  0495                     	;# 
   336  0496                     	;# 
   337  0497                     	;# 
   338  0498                     	;# 
   339  0499                     	;# 
   340  049A                     	;# 
   341  049B                     	;# 
   342  049C                     	;# 
   343  049D                     	;# 
   344  050C                     	;# 
   345  050C                     	;# 
   346  050D                     	;# 
   347  050E                     	;# 
   348  050F                     	;# 
   349  050F                     	;# 
   350  0510                     	;# 
   351  0511                     	;# 
   352  0512                     	;# 
   353  0512                     	;# 
   354  0513                     	;# 
   355  0514                     	;# 
   356  0515                     	;# 
   357  0515                     	;# 
   358  0516                     	;# 
   359  0517                     	;# 
   360  0518                     	;# 
   361  0519                     	;# 
   362  051A                     	;# 
   363  051B                     	;# 
   364  051C                     	;# 
   365  051D                     	;# 
   366  058C                     	;# 
   367  058C                     	;# 
   368  058D                     	;# 
   369  058E                     	;# 
   370  058F                     	;# 
   371  058F                     	;# 
   372  0590                     	;# 
   373  0591                     	;# 
   374  0592                     	;# 
   375  0593                     	;# 
   376  060C                     	;# 
   377  060D                     	;# 
   378  060E                     	;# 
   379  060F                     	;# 
   380  0610                     	;# 
   381  0611                     	;# 
   382  0612                     	;# 
   383  0613                     	;# 
   384  0614                     	;# 
   385  0616                     	;# 
   386  0617                     	;# 
   387  0618                     	;# 
   388  0619                     	;# 
   389  061A                     	;# 
   390  061B                     	;# 
   391  061C                     	;# 
   392  061D                     	;# 
   393  061E                     	;# 
   394  068C                     	;# 
   395  068D                     	;# 
   396  068E                     	;# 
   397  068F                     	;# 
   398  0690                     	;# 
   399  0691                     	;# 
   400  0692                     	;# 
   401  0693                     	;# 
   402  0694                     	;# 
   403  070C                     	;# 
   404  070D                     	;# 
   405  070E                     	;# 
   406  070F                     	;# 
   407  0710                     	;# 
   408  0711                     	;# 
   409  0712                     	;# 
   410  0713                     	;# 
   411  0714                     	;# 
   412  0716                     	;# 
   413  0717                     	;# 
   414  0718                     	;# 
   415  0719                     	;# 
   416  071A                     	;# 
   417  071B                     	;# 
   418  071C                     	;# 
   419  071D                     	;# 
   420  071E                     	;# 
   421  0796                     	;# 
   422  0797                     	;# 
   423  0798                     	;# 
   424  0799                     	;# 
   425  079A                     	;# 
   426  079B                     	;# 
   427  080C                     	;# 
   428  080D                     	;# 
   429  080E                     	;# 
   430  080F                     	;# 
   431  0810                     	;# 
   432  0811                     	;# 
   433  0812                     	;# 
   434  0813                     	;# 
   435  0814                     	;# 
   436  081A                     	;# 
   437  081B                     	;# 
   438  081C                     	;# 
   439  081D                     	;# 
   440  081E                     	;# 
   441  081F                     	;# 
   442  088C                     	;# 
   443  088D                     	;# 
   444  088E                     	;# 
   445  088F                     	;# 
   446  0890                     	;# 
   447  0891                     	;# 
   448  0892                     	;# 
   449  0893                     	;# 
   450  0895                     	;# 
   451  0896                     	;# 
   452  0897                     	;# 
   453  0898                     	;# 
   454  0899                     	;# 
   455  089A                     	;# 
   456  089B                     	;# 
   457  090C                     	;# 
   458  090E                     	;# 
   459  090F                     	;# 
   460  091F                     	;# 
   461  091F                     	;# 
   462  098F                     	;# 
   463  098F                     	;# 
   464  0990                     	;# 
   465  0991                     	;# 
   466  0992                     	;# 
   467  0993                     	;# 
   468  0994                     	;# 
   469  0995                     	;# 
   470  0996                     	;# 
   471  0997                     	;# 
   472  0E0F                     	;# 
   473  0E10                     	;# 
   474  0E11                     	;# 
   475  0E12                     	;# 
   476  0E13                     	;# 
   477  0E14                     	;# 
   478  0E15                     	;# 
   479  0E16                     	;# 
   480  0E17                     	;# 
   481  0E18                     	;# 
   482  0E19                     	;# 
   483  0E1A                     	;# 
   484  0E1B                     	;# 
   485  0E1C                     	;# 
   486  0E1D                     	;# 
   487  0E1E                     	;# 
   488  0E1F                     	;# 
   489  0E20                     	;# 
   490  0E21                     	;# 
   491  0E22                     	;# 
   492  0E23                     	;# 
   493  0E24                     	;# 
   494  0E25                     	;# 
   495  0E26                     	;# 
   496  0E27                     	;# 
   497  0E28                     	;# 
   498  0E29                     	;# 
   499  0E2A                     	;# 
   500  0E2B                     	;# 
   501  0E2C                     	;# 
   502  0E2D                     	;# 
   503  0E2E                     	;# 
   504  0E2F                     	;# 
   505  0E30                     	;# 
   506  0E31                     	;# 
   507  0E32                     	;# 
   508  0E33                     	;# 
   509  0E34                     	;# 
   510  0E35                     	;# 
   511  0E36                     	;# 
   512  0E37                     	;# 
   513  0E8F                     	;# 
   514  0E90                     	;# 
   515  0E91                     	;# 
   516  0E92                     	;# 
   517  0E93                     	;# 
   518  0E94                     	;# 
   519  0E95                     	;# 
   520  0E96                     	;# 
   521  0E97                     	;# 
   522  0E9C                     	;# 
   523  0E9D                     	;# 
   524  0E9E                     	;# 
   525  0EA1                     	;# 
   526  0EA2                     	;# 
   527  0EA3                     	;# 
   528  0EA4                     	;# 
   529  0EA5                     	;# 
   530  0EA9                     	;# 
   531  0EAA                     	;# 
   532  0EAB                     	;# 
   533  0EAC                     	;# 
   534  0EB1                     	;# 
   535  0EB2                     	;# 
   536  0EB3                     	;# 
   537  0EB8                     	;# 
   538  0EB9                     	;# 
   539  0EBA                     	;# 
   540  0EBB                     	;# 
   541  0EBC                     	;# 
   542  0EBD                     	;# 
   543  0EBE                     	;# 
   544  0EC3                     	;# 
   545  0EC5                     	;# 
   546  0EC6                     	;# 
   547  0EC7                     	;# 
   548  0EC8                     	;# 
   549  0EC9                     	;# 
   550  0ECA                     	;# 
   551  0ECB                     	;# 
   552  0ECC                     	;# 
   553  0F10                     	;# 
   554  0F11                     	;# 
   555  0F12                     	;# 
   556  0F13                     	;# 
   557  0F14                     	;# 
   558  0F15                     	;# 
   559  0F16                     	;# 
   560  0F17                     	;# 
   561  0F18                     	;# 
   562  0F19                     	;# 
   563  0F1A                     	;# 
   564  0F1B                     	;# 
   565  0F1C                     	;# 
   566  0F1D                     	;# 
   567  0F1E                     	;# 
   568  0F1F                     	;# 
   569  0F20                     	;# 
   570  0F21                     	;# 
   571  0F22                     	;# 
   572  0F23                     	;# 
   573  0F24                     	;# 
   574  0F25                     	;# 
   575  0F26                     	;# 
   576  0F27                     	;# 
   577  0F38                     	;# 
   578  0F39                     	;# 
   579  0F3A                     	;# 
   580  0F3B                     	;# 
   581  0F3C                     	;# 
   582  0F3D                     	;# 
   583  0F3E                     	;# 
   584  0F3F                     	;# 
   585  0F40                     	;# 
   586  0F41                     	;# 
   587  0F43                     	;# 
   588  0F44                     	;# 
   589  0F45                     	;# 
   590  0F46                     	;# 
   591  0F47                     	;# 
   592  0F48                     	;# 
   593  0F49                     	;# 
   594  0F4A                     	;# 
   595  0F4B                     	;# 
   596  0F4C                     	;# 
   597  0F4E                     	;# 
   598  0F4F                     	;# 
   599  0F50                     	;# 
   600  0F51                     	;# 
   601  0F52                     	;# 
   602  0F53                     	;# 
   603  0F54                     	;# 
   604  0F55                     	;# 
   605  0F56                     	;# 
   606  0F57                     	;# 
   607  0F65                     	;# 
   608  0F68                     	;# 
   609  0F69                     	;# 
   610  0F6A                     	;# 
   611  0F6B                     	;# 
   612  0FE4                     	;# 
   613  0FE5                     	;# 
   614  0FE6                     	;# 
   615  0FE7                     	;# 
   616  0FE8                     	;# 
   617  0FE9                     	;# 
   618  0FEA                     	;# 
   619  0FEB                     	;# 
   620  0FED                     	;# 
   621  0FEE                     	;# 
   622  0FEF                     	;# 
   623  0000                     	;# 
   624  0001                     	;# 
   625  0002                     	;# 
   626  0003                     	;# 
   627  0004                     	;# 
   628  0005                     	;# 
   629  0006                     	;# 
   630  0007                     	;# 
   631  0008                     	;# 
   632  0009                     	;# 
   633  000A                     	;# 
   634  000B                     	;# 
   635  000C                     	;# 
   636  000D                     	;# 
   637  000E                     	;# 
   638  0010                     	;# 
   639  0011                     	;# 
   640  0012                     	;# 
   641  0013                     	;# 
   642  0016                     	;# 
   643  0017                     	;# 
   644  0018                     	;# 
   645  001C                     	;# 
   646  001C                     	;# 
   647  001D                     	;# 
   648  001D                     	;# 
   649  001E                     	;# 
   650  001F                     	;# 
   651  008C                     	;# 
   652  008C                     	;# 
   653  008D                     	;# 
   654  008E                     	;# 
   655  008E                     	;# 
   656  008F                     	;# 
   657  0090                     	;# 
   658  0090                     	;# 
   659  0091                     	;# 
   660  0093                     	;# 
   661  0094                     	;# 
   662  0095                     	;# 
   663  0096                     	;# 
   664  0097                     	;# 
   665  0098                     	;# 
   666  0099                     	;# 
   667  009A                     	;# 
   668  009B                     	;# 
   669  009C                     	;# 
   670  009D                     	;# 
   671  009E                     	;# 
   672  010C                     	;# 
   673  010D                     	;# 
   674  010E                     	;# 
   675  010E                     	;# 
   676  010F                     	;# 
   677  0110                     	;# 
   678  0110                     	;# 
   679  0111                     	;# 
   680  0112                     	;# 
   681  0112                     	;# 
   682  0113                     	;# 
   683  0114                     	;# 
   684  0114                     	;# 
   685  0115                     	;# 
   686  0116                     	;# 
   687  0116                     	;# 
   688  0117                     	;# 
   689  0119                     	;# 
   690  0119                     	;# 
   691  0119                     	;# 
   692  011A                     	;# 
   693  011A                     	;# 
   694  011A                     	;# 
   695  011B                     	;# 
   696  011B                     	;# 
   697  011B                     	;# 
   698  011B                     	;# 
   699  011B                     	;# 
   700  011C                     	;# 
   701  011C                     	;# 
   702  011C                     	;# 
   703  011D                     	;# 
   704  011D                     	;# 
   705  011D                     	;# 
   706  011E                     	;# 
   707  011E                     	;# 
   708  011E                     	;# 
   709  011F                     	;# 
   710  011F                     	;# 
   711  011F                     	;# 
   712  011F                     	;# 
   713  011F                     	;# 
   714  018C                     	;# 
   715  018D                     	;# 
   716  018E                     	;# 
   717  018F                     	;# 
   718  0190                     	;# 
   719  0191                     	;# 
   720  0192                     	;# 
   721  0196                     	;# 
   722  0197                     	;# 
   723  0198                     	;# 
   724  0199                     	;# 
   725  019A                     	;# 
   726  019B                     	;# 
   727  019C                     	;# 
   728  020C                     	;# 
   729  020C                     	;# 
   730  020D                     	;# 
   731  020E                     	;# 
   732  020F                     	;# 
   733  020F                     	;# 
   734  0210                     	;# 
   735  0210                     	;# 
   736  0211                     	;# 
   737  0211                     	;# 
   738  0212                     	;# 
   739  0212                     	;# 
   740  0213                     	;# 
   741  0214                     	;# 
   742  0215                     	;# 
   743  0215                     	;# 
   744  0216                     	;# 
   745  0216                     	;# 
   746  0217                     	;# 
   747  0217                     	;# 
   748  0218                     	;# 
   749  0218                     	;# 
   750  0219                     	;# 
   751  021A                     	;# 
   752  021B                     	;# 
   753  021B                     	;# 
   754  021C                     	;# 
   755  021C                     	;# 
   756  021D                     	;# 
   757  021D                     	;# 
   758  021E                     	;# 
   759  021F                     	;# 
   760  028C                     	;# 
   761  028C                     	;# 
   762  028D                     	;# 
   763  028D                     	;# 
   764  028E                     	;# 
   765  028F                     	;# 
   766  0290                     	;# 
   767  0290                     	;# 
   768  0291                     	;# 
   769  0292                     	;# 
   770  0292                     	;# 
   771  0293                     	;# 
   772  0293                     	;# 
   773  0294                     	;# 
   774  0295                     	;# 
   775  0296                     	;# 
   776  0296                     	;# 
   777  0297                     	;# 
   778  0298                     	;# 
   779  0298                     	;# 
   780  0299                     	;# 
   781  0299                     	;# 
   782  029A                     	;# 
   783  029B                     	;# 
   784  029C                     	;# 
   785  029C                     	;# 
   786  029D                     	;# 
   787  030C                     	;# 
   788  030C                     	;# 
   789  030D                     	;# 
   790  030E                     	;# 
   791  030F                     	;# 
   792  0310                     	;# 
   793  0310                     	;# 
   794  0311                     	;# 
   795  0312                     	;# 
   796  0313                     	;# 
   797  0314                     	;# 
   798  0314                     	;# 
   799  0315                     	;# 
   800  0316                     	;# 
   801  0317                     	;# 
   802  0318                     	;# 
   803  0318                     	;# 
   804  0319                     	;# 
   805  031A                     	;# 
   806  031B                     	;# 
   807  031C                     	;# 
   808  031C                     	;# 
   809  031D                     	;# 
   810  031E                     	;# 
   811  031F                     	;# 
   812  038C                     	;# 
   813  038D                     	;# 
   814  038E                     	;# 
   815  0390                     	;# 
   816  0391                     	;# 
   817  0392                     	;# 
   818  040C                     	;# 
   819  040D                     	;# 
   820  040E                     	;# 
   821  040F                     	;# 
   822  0410                     	;# 
   823  0411                     	;# 
   824  0416                     	;# 
   825  0416                     	;# 
   826  0417                     	;# 
   827  0418                     	;# 
   828  0418                     	;# 
   829  0419                     	;# 
   830  041A                     	;# 
   831  041A                     	;# 
   832  041B                     	;# 
   833  041C                     	;# 
   834  041C                     	;# 
   835  041D                     	;# 
   836  041E                     	;# 
   837  041F                     	;# 
   838  048C                     	;# 
   839  048C                     	;# 
   840  048D                     	;# 
   841  048E                     	;# 
   842  048F                     	;# 
   843  048F                     	;# 
   844  0490                     	;# 
   845  0491                     	;# 
   846  0492                     	;# 
   847  0492                     	;# 
   848  0493                     	;# 
   849  0494                     	;# 
   850  0495                     	;# 
   851  0495                     	;# 
   852  0496                     	;# 
   853  0497                     	;# 
   854  0498                     	;# 
   855  0499                     	;# 
   856  049A                     	;# 
   857  049B                     	;# 
   858  049C                     	;# 
   859  049D                     	;# 
   860  050C                     	;# 
   861  050C                     	;# 
   862  050D                     	;# 
   863  050E                     	;# 
   864  050F                     	;# 
   865  050F                     	;# 
   866  0510                     	;# 
   867  0511                     	;# 
   868  0512                     	;# 
   869  0512                     	;# 
   870  0513                     	;# 
   871  0514                     	;# 
   872  0515                     	;# 
   873  0515                     	;# 
   874  0516                     	;# 
   875  0517                     	;# 
   876  0518                     	;# 
   877  0519                     	;# 
   878  051A                     	;# 
   879  051B                     	;# 
   880  051C                     	;# 
   881  051D                     	;# 
   882  058C                     	;# 
   883  058C                     	;# 
   884  058D                     	;# 
   885  058E                     	;# 
   886  058F                     	;# 
   887  058F                     	;# 
   888  0590                     	;# 
   889  0591                     	;# 
   890  0592                     	;# 
   891  0593                     	;# 
   892  060C                     	;# 
   893  060D                     	;# 
   894  060E                     	;# 
   895  060F                     	;# 
   896  0610                     	;# 
   897  0611                     	;# 
   898  0612                     	;# 
   899  0613                     	;# 
   900  0614                     	;# 
   901  0616                     	;# 
   902  0617                     	;# 
   903  0618                     	;# 
   904  0619                     	;# 
   905  061A                     	;# 
   906  061B                     	;# 
   907  061C                     	;# 
   908  061D                     	;# 
   909  061E                     	;# 
   910  068C                     	;# 
   911  068D                     	;# 
   912  068E                     	;# 
   913  068F                     	;# 
   914  0690                     	;# 
   915  0691                     	;# 
   916  0692                     	;# 
   917  0693                     	;# 
   918  0694                     	;# 
   919  070C                     	;# 
   920  070D                     	;# 
   921  070E                     	;# 
   922  070F                     	;# 
   923  0710                     	;# 
   924  0711                     	;# 
   925  0712                     	;# 
   926  0713                     	;# 
   927  0714                     	;# 
   928  0716                     	;# 
   929  0717                     	;# 
   930  0718                     	;# 
   931  0719                     	;# 
   932  071A                     	;# 
   933  071B                     	;# 
   934  071C                     	;# 
   935  071D                     	;# 
   936  071E                     	;# 
   937  0796                     	;# 
   938  0797                     	;# 
   939  0798                     	;# 
   940  0799                     	;# 
   941  079A                     	;# 
   942  079B                     	;# 
   943  080C                     	;# 
   944  080D                     	;# 
   945  080E                     	;# 
   946  080F                     	;# 
   947  0810                     	;# 
   948  0811                     	;# 
   949  0812                     	;# 
   950  0813                     	;# 
   951  0814                     	;# 
   952  081A                     	;# 
   953  081B                     	;# 
   954  081C                     	;# 
   955  081D                     	;# 
   956  081E                     	;# 
   957  081F                     	;# 
   958  088C                     	;# 
   959  088D                     	;# 
   960  088E                     	;# 
   961  088F                     	;# 
   962  0890                     	;# 
   963  0891                     	;# 
   964  0892                     	;# 
   965  0893                     	;# 
   966  0895                     	;# 
   967  0896                     	;# 
   968  0897                     	;# 
   969  0898                     	;# 
   970  0899                     	;# 
   971  089A                     	;# 
   972  089B                     	;# 
   973  090C                     	;# 
   974  090E                     	;# 
   975  090F                     	;# 
   976  091F                     	;# 
   977  091F                     	;# 
   978  098F                     	;# 
   979  098F                     	;# 
   980  0990                     	;# 
   981  0991                     	;# 
   982  0992                     	;# 
   983  0993                     	;# 
   984  0994                     	;# 
   985  0995                     	;# 
   986  0996                     	;# 
   987  0997                     	;# 
   988  0E0F                     	;# 
   989  0E10                     	;# 
   990  0E11                     	;# 
   991  0E12                     	;# 
   992  0E13                     	;# 
   993  0E14                     	;# 
   994  0E15                     	;# 
   995  0E16                     	;# 
   996  0E17                     	;# 
   997  0E18                     	;# 
   998  0E19                     	;# 
   999  0E1A                     	;# 
  1000  0E1B                     	;# 
  1001  0E1C                     	;# 
  1002  0E1D                     	;# 
  1003  0E1E                     	;# 
  1004  0E1F                     	;# 
  1005  0E20                     	;# 
  1006  0E21                     	;# 
  1007  0E22                     	;# 
  1008  0E23                     	;# 
  1009  0E24                     	;# 
  1010  0E25                     	;# 
  1011  0E26                     	;# 
  1012  0E27                     	;# 
  1013  0E28                     	;# 
  1014  0E29                     	;# 
  1015  0E2A                     	;# 
  1016  0E2B                     	;# 
  1017  0E2C                     	;# 
  1018  0E2D                     	;# 
  1019  0E2E                     	;# 
  1020  0E2F                     	;# 
  1021  0E30                     	;# 
  1022  0E31                     	;# 
  1023  0E32                     	;# 
  1024  0E33                     	;# 
  1025  0E34                     	;# 
  1026  0E35                     	;# 
  1027  0E36                     	;# 
  1028  0E37                     	;# 
  1029  0E8F                     	;# 
  1030  0E90                     	;# 
  1031  0E91                     	;# 
  1032  0E92                     	;# 
  1033  0E93                     	;# 
  1034  0E94                     	;# 
  1035  0E95                     	;# 
  1036  0E96                     	;# 
  1037  0E97                     	;# 
  1038  0E9C                     	;# 
  1039  0E9D                     	;# 
  1040  0E9E                     	;# 
  1041  0EA1                     	;# 
  1042  0EA2                     	;# 
  1043  0EA3                     	;# 
  1044  0EA4                     	;# 
  1045  0EA5                     	;# 
  1046  0EA9                     	;# 
  1047  0EAA                     	;# 
  1048  0EAB                     	;# 
  1049  0EAC                     	;# 
  1050  0EB1                     	;# 
  1051  0EB2                     	;# 
  1052  0EB3                     	;# 
  1053  0EB8                     	;# 
  1054  0EB9                     	;# 
  1055  0EBA                     	;# 
  1056  0EBB                     	;# 
  1057  0EBC                     	;# 
  1058  0EBD                     	;# 
  1059  0EBE                     	;# 
  1060  0EC3                     	;# 
  1061  0EC5                     	;# 
  1062  0EC6                     	;# 
  1063  0EC7                     	;# 
  1064  0EC8                     	;# 
  1065  0EC9                     	;# 
  1066  0ECA                     	;# 
  1067  0ECB                     	;# 
  1068  0ECC                     	;# 
  1069  0F10                     	;# 
  1070  0F11                     	;# 
  1071  0F12                     	;# 
  1072  0F13                     	;# 
  1073  0F14                     	;# 
  1074  0F15                     	;# 
  1075  0F16                     	;# 
  1076  0F17                     	;# 
  1077  0F18                     	;# 
  1078  0F19                     	;# 
  1079  0F1A                     	;# 
  1080  0F1B                     	;# 
  1081  0F1C                     	;# 
  1082  0F1D                     	;# 
  1083  0F1E                     	;# 
  1084  0F1F                     	;# 
  1085  0F20                     	;# 
  1086  0F21                     	;# 
  1087  0F22                     	;# 
  1088  0F23                     	;# 
  1089  0F24                     	;# 
  1090  0F25                     	;# 
  1091  0F26                     	;# 
  1092  0F27                     	;# 
  1093  0F38                     	;# 
  1094  0F39                     	;# 
  1095  0F3A                     	;# 
  1096  0F3B                     	;# 
  1097  0F3C                     	;# 
  1098  0F3D                     	;# 
  1099  0F3E                     	;# 
  1100  0F3F                     	;# 
  1101  0F40                     	;# 
  1102  0F41                     	;# 
  1103  0F43                     	;# 
  1104  0F44                     	;# 
  1105  0F45                     	;# 
  1106  0F46                     	;# 
  1107  0F47                     	;# 
  1108  0F48                     	;# 
  1109  0F49                     	;# 
  1110  0F4A                     	;# 
  1111  0F4B                     	;# 
  1112  0F4C                     	;# 
  1113  0F4E                     	;# 
  1114  0F4F                     	;# 
  1115  0F50                     	;# 
  1116  0F51                     	;# 
  1117  0F52                     	;# 
  1118  0F53                     	;# 
  1119  0F54                     	;# 
  1120  0F55                     	;# 
  1121  0F56                     	;# 
  1122  0F57                     	;# 
  1123  0F65                     	;# 
  1124  0F68                     	;# 
  1125  0F69                     	;# 
  1126  0F6A                     	;# 
  1127  0F6B                     	;# 
  1128  0FE4                     	;# 
  1129  0FE5                     	;# 
  1130  0FE6                     	;# 
  1131  0FE7                     	;# 
  1132  0FE8                     	;# 
  1133  0FE9                     	;# 
  1134  0FEA                     	;# 
  1135  0FEB                     	;# 
  1136  0FED                     	;# 
  1137  0FEE                     	;# 
  1138  0FEF                     	;# 
  1139  0000                     	;# 
  1140  0001                     	;# 
  1141  0002                     	;# 
  1142  0003                     	;# 
  1143  0004                     	;# 
  1144  0005                     	;# 
  1145  0006                     	;# 
  1146  0007                     	;# 
  1147  0008                     	;# 
  1148  0009                     	;# 
  1149  000A                     	;# 
  1150  000B                     	;# 
  1151  000C                     	;# 
  1152  000D                     	;# 
  1153  000E                     	;# 
  1154  0010                     	;# 
  1155  0011                     	;# 
  1156  0012                     	;# 
  1157  0013                     	;# 
  1158  0016                     	;# 
  1159  0017                     	;# 
  1160  0018                     	;# 
  1161  001C                     	;# 
  1162  001C                     	;# 
  1163  001D                     	;# 
  1164  001D                     	;# 
  1165  001E                     	;# 
  1166  001F                     	;# 
  1167  008C                     	;# 
  1168  008C                     	;# 
  1169  008D                     	;# 
  1170  008E                     	;# 
  1171  008E                     	;# 
  1172  008F                     	;# 
  1173  0090                     	;# 
  1174  0090                     	;# 
  1175  0091                     	;# 
  1176  0093                     	;# 
  1177  0094                     	;# 
  1178  0095                     	;# 
  1179  0096                     	;# 
  1180  0097                     	;# 
  1181  0098                     	;# 
  1182  0099                     	;# 
  1183  009A                     	;# 
  1184  009B                     	;# 
  1185  009C                     	;# 
  1186  009D                     	;# 
  1187  009E                     	;# 
  1188  010C                     	;# 
  1189  010D                     	;# 
  1190  010E                     	;# 
  1191  010E                     	;# 
  1192  010F                     	;# 
  1193  0110                     	;# 
  1194  0110                     	;# 
  1195  0111                     	;# 
  1196  0112                     	;# 
  1197  0112                     	;# 
  1198  0113                     	;# 
  1199  0114                     	;# 
  1200  0114                     	;# 
  1201  0115                     	;# 
  1202  0116                     	;# 
  1203  0116                     	;# 
  1204  0117                     	;# 
  1205  0119                     	;# 
  1206  0119                     	;# 
  1207  0119                     	;# 
  1208  011A                     	;# 
  1209  011A                     	;# 
  1210  011A                     	;# 
  1211  011B                     	;# 
  1212  011B                     	;# 
  1213  011B                     	;# 
  1214  011B                     	;# 
  1215  011B                     	;# 
  1216  011C                     	;# 
  1217  011C                     	;# 
  1218  011C                     	;# 
  1219  011D                     	;# 
  1220  011D                     	;# 
  1221  011D                     	;# 
  1222  011E                     	;# 
  1223  011E                     	;# 
  1224  011E                     	;# 
  1225  011F                     	;# 
  1226  011F                     	;# 
  1227  011F                     	;# 
  1228  011F                     	;# 
  1229  011F                     	;# 
  1230  018C                     	;# 
  1231  018D                     	;# 
  1232  018E                     	;# 
  1233  018F                     	;# 
  1234  0190                     	;# 
  1235  0191                     	;# 
  1236  0192                     	;# 
  1237  0196                     	;# 
  1238  0197                     	;# 
  1239  0198                     	;# 
  1240  0199                     	;# 
  1241  019A                     	;# 
  1242  019B                     	;# 
  1243  019C                     	;# 
  1244  020C                     	;# 
  1245  020C                     	;# 
  1246  020D                     	;# 
  1247  020E                     	;# 
  1248  020F                     	;# 
  1249  020F                     	;# 
  1250  0210                     	;# 
  1251  0210                     	;# 
  1252  0211                     	;# 
  1253  0211                     	;# 
  1254  0212                     	;# 
  1255  0212                     	;# 
  1256  0213                     	;# 
  1257  0214                     	;# 
  1258  0215                     	;# 
  1259  0215                     	;# 
  1260  0216                     	;# 
  1261  0216                     	;# 
  1262  0217                     	;# 
  1263  0217                     	;# 
  1264  0218                     	;# 
  1265  0218                     	;# 
  1266  0219                     	;# 
  1267  021A                     	;# 
  1268  021B                     	;# 
  1269  021B                     	;# 
  1270  021C                     	;# 
  1271  021C                     	;# 
  1272  021D                     	;# 
  1273  021D                     	;# 
  1274  021E                     	;# 
  1275  021F                     	;# 
  1276  028C                     	;# 
  1277  028C                     	;# 
  1278  028D                     	;# 
  1279  028D                     	;# 
  1280  028E                     	;# 
  1281  028F                     	;# 
  1282  0290                     	;# 
  1283  0290                     	;# 
  1284  0291                     	;# 
  1285  0292                     	;# 
  1286  0292                     	;# 
  1287  0293                     	;# 
  1288  0293                     	;# 
  1289  0294                     	;# 
  1290  0295                     	;# 
  1291  0296                     	;# 
  1292  0296                     	;# 
  1293  0297                     	;# 
  1294  0298                     	;# 
  1295  0298                     	;# 
  1296  0299                     	;# 
  1297  0299                     	;# 
  1298  029A                     	;# 
  1299  029B                     	;# 
  1300  029C                     	;# 
  1301  029C                     	;# 
  1302  029D                     	;# 
  1303  030C                     	;# 
  1304  030C                     	;# 
  1305  030D                     	;# 
  1306  030E                     	;# 
  1307  030F                     	;# 
  1308  0310                     	;# 
  1309  0310                     	;# 
  1310  0311                     	;# 
  1311  0312                     	;# 
  1312  0313                     	;# 
  1313  0314                     	;# 
  1314  0314                     	;# 
  1315  0315                     	;# 
  1316  0316                     	;# 
  1317  0317                     	;# 
  1318  0318                     	;# 
  1319  0318                     	;# 
  1320  0319                     	;# 
  1321  031A                     	;# 
  1322  031B                     	;# 
  1323  031C                     	;# 
  1324  031C                     	;# 
  1325  031D                     	;# 
  1326  031E                     	;# 
  1327  031F                     	;# 
  1328  038C                     	;# 
  1329  038D                     	;# 
  1330  038E                     	;# 
  1331  0390                     	;# 
  1332  0391                     	;# 
  1333  0392                     	;# 
  1334  040C                     	;# 
  1335  040D                     	;# 
  1336  040E                     	;# 
  1337  040F                     	;# 
  1338  0410                     	;# 
  1339  0411                     	;# 
  1340  0416                     	;# 
  1341  0416                     	;# 
  1342  0417                     	;# 
  1343  0418                     	;# 
  1344  0418                     	;# 
  1345  0419                     	;# 
  1346  041A                     	;# 
  1347  041A                     	;# 
  1348  041B                     	;# 
  1349  041C                     	;# 
  1350  041C                     	;# 
  1351  041D                     	;# 
  1352  041E                     	;# 
  1353  041F                     	;# 
  1354  048C                     	;# 
  1355  048C                     	;# 
  1356  048D                     	;# 
  1357  048E                     	;# 
  1358  048F                     	;# 
  1359  048F                     	;# 
  1360  0490                     	;# 
  1361  0491                     	;# 
  1362  0492                     	;# 
  1363  0492                     	;# 
  1364  0493                     	;# 
  1365  0494                     	;# 
  1366  0495                     	;# 
  1367  0495                     	;# 
  1368  0496                     	;# 
  1369  0497                     	;# 
  1370  0498                     	;# 
  1371  0499                     	;# 
  1372  049A                     	;# 
  1373  049B                     	;# 
  1374  049C                     	;# 
  1375  049D                     	;# 
  1376  050C                     	;# 
  1377  050C                     	;# 
  1378  050D                     	;# 
  1379  050E                     	;# 
  1380  050F                     	;# 
  1381  050F                     	;# 
  1382  0510                     	;# 
  1383  0511                     	;# 
  1384  0512                     	;# 
  1385  0512                     	;# 
  1386  0513                     	;# 
  1387  0514                     	;# 
  1388  0515                     	;# 
  1389  0515                     	;# 
  1390  0516                     	;# 
  1391  0517                     	;# 
  1392  0518                     	;# 
  1393  0519                     	;# 
  1394  051A                     	;# 
  1395  051B                     	;# 
  1396  051C                     	;# 
  1397  051D                     	;# 
  1398  058C                     	;# 
  1399  058C                     	;# 
  1400  058D                     	;# 
  1401  058E                     	;# 
  1402  058F                     	;# 
  1403  058F                     	;# 
  1404  0590                     	;# 
  1405  0591                     	;# 
  1406  0592                     	;# 
  1407  0593                     	;# 
  1408  060C                     	;# 
  1409  060D                     	;# 
  1410  060E                     	;# 
  1411  060F                     	;# 
  1412  0610                     	;# 
  1413  0611                     	;# 
  1414  0612                     	;# 
  1415  0613                     	;# 
  1416  0614                     	;# 
  1417  0616                     	;# 
  1418  0617                     	;# 
  1419  0618                     	;# 
  1420  0619                     	;# 
  1421  061A                     	;# 
  1422  061B                     	;# 
  1423  061C                     	;# 
  1424  061D                     	;# 
  1425  061E                     	;# 
  1426  068C                     	;# 
  1427  068D                     	;# 
  1428  068E                     	;# 
  1429  068F                     	;# 
  1430  0690                     	;# 
  1431  0691                     	;# 
  1432  0692                     	;# 
  1433  0693                     	;# 
  1434  0694                     	;# 
  1435  070C                     	;# 
  1436  070D                     	;# 
  1437  070E                     	;# 
  1438  070F                     	;# 
  1439  0710                     	;# 
  1440  0711                     	;# 
  1441  0712                     	;# 
  1442  0713                     	;# 
  1443  0714                     	;# 
  1444  0716                     	;# 
  1445  0717                     	;# 
  1446  0718                     	;# 
  1447  0719                     	;# 
  1448  071A                     	;# 
  1449  071B                     	;# 
  1450  071C                     	;# 
  1451  071D                     	;# 
  1452  071E                     	;# 
  1453  0796                     	;# 
  1454  0797                     	;# 
  1455  0798                     	;# 
  1456  0799                     	;# 
  1457  079A                     	;# 
  1458  079B                     	;# 
  1459  080C                     	;# 
  1460  080D                     	;# 
  1461  080E                     	;# 
  1462  080F                     	;# 
  1463  0810                     	;# 
  1464  0811                     	;# 
  1465  0812                     	;# 
  1466  0813                     	;# 
  1467  0814                     	;# 
  1468  081A                     	;# 
  1469  081B                     	;# 
  1470  081C                     	;# 
  1471  081D                     	;# 
  1472  081E                     	;# 
  1473  081F                     	;# 
  1474  088C                     	;# 
  1475  088D                     	;# 
  1476  088E                     	;# 
  1477  088F                     	;# 
  1478  0890                     	;# 
  1479  0891                     	;# 
  1480  0892                     	;# 
  1481  0893                     	;# 
  1482  0895                     	;# 
  1483  0896                     	;# 
  1484  0897                     	;# 
  1485  0898                     	;# 
  1486  0899                     	;# 
  1487  089A                     	;# 
  1488  089B                     	;# 
  1489  090C                     	;# 
  1490  090E                     	;# 
  1491  090F                     	;# 
  1492  091F                     	;# 
  1493  091F                     	;# 
  1494  098F                     	;# 
  1495  098F                     	;# 
  1496  0990                     	;# 
  1497  0991                     	;# 
  1498  0992                     	;# 
  1499  0993                     	;# 
  1500  0994                     	;# 
  1501  0995                     	;# 
  1502  0996                     	;# 
  1503  0997                     	;# 
  1504  0E0F                     	;# 
  1505  0E10                     	;# 
  1506  0E11                     	;# 
  1507  0E12                     	;# 
  1508  0E13                     	;# 
  1509  0E14                     	;# 
  1510  0E15                     	;# 
  1511  0E16                     	;# 
  1512  0E17                     	;# 
  1513  0E18                     	;# 
  1514  0E19                     	;# 
  1515  0E1A                     	;# 
  1516  0E1B                     	;# 
  1517  0E1C                     	;# 
  1518  0E1D                     	;# 
  1519  0E1E                     	;# 
  1520  0E1F                     	;# 
  1521  0E20                     	;# 
  1522  0E21                     	;# 
  1523  0E22                     	;# 
  1524  0E23                     	;# 
  1525  0E24                     	;# 
  1526  0E25                     	;# 
  1527  0E26                     	;# 
  1528  0E27                     	;# 
  1529  0E28                     	;# 
  1530  0E29                     	;# 
  1531  0E2A                     	;# 
  1532  0E2B                     	;# 
  1533  0E2C                     	;# 
  1534  0E2D                     	;# 
  1535  0E2E                     	;# 
  1536  0E2F                     	;# 
  1537  0E30                     	;# 
  1538  0E31                     	;# 
  1539  0E32                     	;# 
  1540  0E33                     	;# 
  1541  0E34                     	;# 
  1542  0E35                     	;# 
  1543  0E36                     	;# 
  1544  0E37                     	;# 
  1545  0E8F                     	;# 
  1546  0E90                     	;# 
  1547  0E91                     	;# 
  1548  0E92                     	;# 
  1549  0E93                     	;# 
  1550  0E94                     	;# 
  1551  0E95                     	;# 
  1552  0E96                     	;# 
  1553  0E97                     	;# 
  1554  0E9C                     	;# 
  1555  0E9D                     	;# 
  1556  0E9E                     	;# 
  1557  0EA1                     	;# 
  1558  0EA2                     	;# 
  1559  0EA3                     	;# 
  1560  0EA4                     	;# 
  1561  0EA5                     	;# 
  1562  0EA9                     	;# 
  1563  0EAA                     	;# 
  1564  0EAB                     	;# 
  1565  0EAC                     	;# 
  1566  0EB1                     	;# 
  1567  0EB2                     	;# 
  1568  0EB3                     	;# 
  1569  0EB8                     	;# 
  1570  0EB9                     	;# 
  1571  0EBA                     	;# 
  1572  0EBB                     	;# 
  1573  0EBC                     	;# 
  1574  0EBD                     	;# 
  1575  0EBE                     	;# 
  1576  0EC3                     	;# 
  1577  0EC5                     	;# 
  1578  0EC6                     	;# 
  1579  0EC7                     	;# 
  1580  0EC8                     	;# 
  1581  0EC9                     	;# 
  1582  0ECA                     	;# 
  1583  0ECB                     	;# 
  1584  0ECC                     	;# 
  1585  0F10                     	;# 
  1586  0F11                     	;# 
  1587  0F12                     	;# 
  1588  0F13                     	;# 
  1589  0F14                     	;# 
  1590  0F15                     	;# 
  1591  0F16                     	;# 
  1592  0F17                     	;# 
  1593  0F18                     	;# 
  1594  0F19                     	;# 
  1595  0F1A                     	;# 
  1596  0F1B                     	;# 
  1597  0F1C                     	;# 
  1598  0F1D                     	;# 
  1599  0F1E                     	;# 
  1600  0F1F                     	;# 
  1601  0F20                     	;# 
  1602  0F21                     	;# 
  1603  0F22                     	;# 
  1604  0F23                     	;# 
  1605  0F24                     	;# 
  1606  0F25                     	;# 
  1607  0F26                     	;# 
  1608  0F27                     	;# 
  1609  0F38                     	;# 
  1610  0F39                     	;# 
  1611  0F3A                     	;# 
  1612  0F3B                     	;# 
  1613  0F3C                     	;# 
  1614  0F3D                     	;# 
  1615  0F3E                     	;# 
  1616  0F3F                     	;# 
  1617  0F40                     	;# 
  1618  0F41                     	;# 
  1619  0F43                     	;# 
  1620  0F44                     	;# 
  1621  0F45                     	;# 
  1622  0F46                     	;# 
  1623  0F47                     	;# 
  1624  0F48                     	;# 
  1625  0F49                     	;# 
  1626  0F4A                     	;# 
  1627  0F4B                     	;# 
  1628  0F4C                     	;# 
  1629  0F4E                     	;# 
  1630  0F4F                     	;# 
  1631  0F50                     	;# 
  1632  0F51                     	;# 
  1633  0F52                     	;# 
  1634  0F53                     	;# 
  1635  0F54                     	;# 
  1636  0F55                     	;# 
  1637  0F56                     	;# 
  1638  0F57                     	;# 
  1639  0F65                     	;# 
  1640  0F68                     	;# 
  1641  0F69                     	;# 
  1642  0F6A                     	;# 
  1643  0F6B                     	;# 
  1644  0FE4                     	;# 
  1645  0FE5                     	;# 
  1646  0FE6                     	;# 
  1647  0FE7                     	;# 
  1648  0FE8                     	;# 
  1649  0FE9                     	;# 
  1650  0FEA                     	;# 
  1651  0FEB                     	;# 
  1652  0FED                     	;# 
  1653  0FEE                     	;# 
  1654  0FEF                     	;# 
  1655  0000                     	;# 
  1656  0001                     	;# 
  1657  0002                     	;# 
  1658  0003                     	;# 
  1659  0004                     	;# 
  1660  0005                     	;# 
  1661  0006                     	;# 
  1662  0007                     	;# 
  1663  0008                     	;# 
  1664  0009                     	;# 
  1665  000A                     	;# 
  1666  000B                     	;# 
  1667  000C                     	;# 
  1668  000D                     	;# 
  1669  000E                     	;# 
  1670  0010                     	;# 
  1671  0011                     	;# 
  1672  0012                     	;# 
  1673  0013                     	;# 
  1674  0016                     	;# 
  1675  0017                     	;# 
  1676  0018                     	;# 
  1677  001C                     	;# 
  1678  001C                     	;# 
  1679  001D                     	;# 
  1680  001D                     	;# 
  1681  001E                     	;# 
  1682  001F                     	;# 
  1683  008C                     	;# 
  1684  008C                     	;# 
  1685  008D                     	;# 
  1686  008E                     	;# 
  1687  008E                     	;# 
  1688  008F                     	;# 
  1689  0090                     	;# 
  1690  0090                     	;# 
  1691  0091                     	;# 
  1692  0093                     	;# 
  1693  0094                     	;# 
  1694  0095                     	;# 
  1695  0096                     	;# 
  1696  0097                     	;# 
  1697  0098                     	;# 
  1698  0099                     	;# 
  1699  009A                     	;# 
  1700  009B                     	;# 
  1701  009C                     	;# 
  1702  009D                     	;# 
  1703  009E                     	;# 
  1704  010C                     	;# 
  1705  010D                     	;# 
  1706  010E                     	;# 
  1707  010E                     	;# 
  1708  010F                     	;# 
  1709  0110                     	;# 
  1710  0110                     	;# 
  1711  0111                     	;# 
  1712  0112                     	;# 
  1713  0112                     	;# 
  1714  0113                     	;# 
  1715  0114                     	;# 
  1716  0114                     	;# 
  1717  0115                     	;# 
  1718  0116                     	;# 
  1719  0116                     	;# 
  1720  0117                     	;# 
  1721  0119                     	;# 
  1722  0119                     	;# 
  1723  0119                     	;# 
  1724  011A                     	;# 
  1725  011A                     	;# 
  1726  011A                     	;# 
  1727  011B                     	;# 
  1728  011B                     	;# 
  1729  011B                     	;# 
  1730  011B                     	;# 
  1731  011B                     	;# 
  1732  011C                     	;# 
  1733  011C                     	;# 
  1734  011C                     	;# 
  1735  011D                     	;# 
  1736  011D                     	;# 
  1737  011D                     	;# 
  1738  011E                     	;# 
  1739  011E                     	;# 
  1740  011E                     	;# 
  1741  011F                     	;# 
  1742  011F                     	;# 
  1743  011F                     	;# 
  1744  011F                     	;# 
  1745  011F                     	;# 
  1746  018C                     	;# 
  1747  018D                     	;# 
  1748  018E                     	;# 
  1749  018F                     	;# 
  1750  0190                     	;# 
  1751  0191                     	;# 
  1752  0192                     	;# 
  1753  0196                     	;# 
  1754  0197                     	;# 
  1755  0198                     	;# 
  1756  0199                     	;# 
  1757  019A                     	;# 
  1758  019B                     	;# 
  1759  019C                     	;# 
  1760  020C                     	;# 
  1761  020C                     	;# 
  1762  020D                     	;# 
  1763  020E                     	;# 
  1764  020F                     	;# 
  1765  020F                     	;# 
  1766  0210                     	;# 
  1767  0210                     	;# 
  1768  0211                     	;# 
  1769  0211                     	;# 
  1770  0212                     	;# 
  1771  0212                     	;# 
  1772  0213                     	;# 
  1773  0214                     	;# 
  1774  0215                     	;# 
  1775  0215                     	;# 
  1776  0216                     	;# 
  1777  0216                     	;# 
  1778  0217                     	;# 
  1779  0217                     	;# 
  1780  0218                     	;# 
  1781  0218                     	;# 
  1782  0219                     	;# 
  1783  021A                     	;# 
  1784  021B                     	;# 
  1785  021B                     	;# 
  1786  021C                     	;# 
  1787  021C                     	;# 
  1788  021D                     	;# 
  1789  021D                     	;# 
  1790  021E                     	;# 
  1791  021F                     	;# 
  1792  028C                     	;# 
  1793  028C                     	;# 
  1794  028D                     	;# 
  1795  028D                     	;# 
  1796  028E                     	;# 
  1797  028F                     	;# 
  1798  0290                     	;# 
  1799  0290                     	;# 
  1800  0291                     	;# 
  1801  0292                     	;# 
  1802  0292                     	;# 
  1803  0293                     	;# 
  1804  0293                     	;# 
  1805  0294                     	;# 
  1806  0295                     	;# 
  1807  0296                     	;# 
  1808  0296                     	;# 
  1809  0297                     	;# 
  1810  0298                     	;# 
  1811  0298                     	;# 
  1812  0299                     	;# 
  1813  0299                     	;# 
  1814  029A                     	;# 
  1815  029B                     	;# 
  1816  029C                     	;# 
  1817  029C                     	;# 
  1818  029D                     	;# 
  1819  030C                     	;# 
  1820  030C                     	;# 
  1821  030D                     	;# 
  1822  030E                     	;# 
  1823  030F                     	;# 
  1824  0310                     	;# 
  1825  0310                     	;# 
  1826  0311                     	;# 
  1827  0312                     	;# 
  1828  0313                     	;# 
  1829  0314                     	;# 
  1830  0314                     	;# 
  1831  0315                     	;# 
  1832  0316                     	;# 
  1833  0317                     	;# 
  1834  0318                     	;# 
  1835  0318                     	;# 
  1836  0319                     	;# 
  1837  031A                     	;# 
  1838  031B                     	;# 
  1839  031C                     	;# 
  1840  031C                     	;# 
  1841  031D                     	;# 
  1842  031E                     	;# 
  1843  031F                     	;# 
  1844  038C                     	;# 
  1845  038D                     	;# 
  1846  038E                     	;# 
  1847  0390                     	;# 
  1848  0391                     	;# 
  1849  0392                     	;# 
  1850  040C                     	;# 
  1851  040D                     	;# 
  1852  040E                     	;# 
  1853  040F                     	;# 
  1854  0410                     	;# 
  1855  0411                     	;# 
  1856  0416                     	;# 
  1857  0416                     	;# 
  1858  0417                     	;# 
  1859  0418                     	;# 
  1860  0418                     	;# 
  1861  0419                     	;# 
  1862  041A                     	;# 
  1863  041A                     	;# 
  1864  041B                     	;# 
  1865  041C                     	;# 
  1866  041C                     	;# 
  1867  041D                     	;# 
  1868  041E                     	;# 
  1869  041F                     	;# 
  1870  048C                     	;# 
  1871  048C                     	;# 
  1872  048D                     	;# 
  1873  048E                     	;# 
  1874  048F                     	;# 
  1875  048F                     	;# 
  1876  0490                     	;# 
  1877  0491                     	;# 
  1878  0492                     	;# 
  1879  0492                     	;# 
  1880  0493                     	;# 
  1881  0494                     	;# 
  1882  0495                     	;# 
  1883  0495                     	;# 
  1884  0496                     	;# 
  1885  0497                     	;# 
  1886  0498                     	;# 
  1887  0499                     	;# 
  1888  049A                     	;# 
  1889  049B                     	;# 
  1890  049C                     	;# 
  1891  049D                     	;# 
  1892  050C                     	;# 
  1893  050C                     	;# 
  1894  050D                     	;# 
  1895  050E                     	;# 
  1896  050F                     	;# 
  1897  050F                     	;# 
  1898  0510                     	;# 
  1899  0511                     	;# 
  1900  0512                     	;# 
  1901  0512                     	;# 
  1902  0513                     	;# 
  1903  0514                     	;# 
  1904  0515                     	;# 
  1905  0515                     	;# 
  1906  0516                     	;# 
  1907  0517                     	;# 
  1908  0518                     	;# 
  1909  0519                     	;# 
  1910  051A                     	;# 
  1911  051B                     	;# 
  1912  051C                     	;# 
  1913  051D                     	;# 
  1914  058C                     	;# 
  1915  058C                     	;# 
  1916  058D                     	;# 
  1917  058E                     	;# 
  1918  058F                     	;# 
  1919  058F                     	;# 
  1920  0590                     	;# 
  1921  0591                     	;# 
  1922  0592                     	;# 
  1923  0593                     	;# 
  1924  060C                     	;# 
  1925  060D                     	;# 
  1926  060E                     	;# 
  1927  060F                     	;# 
  1928  0610                     	;# 
  1929  0611                     	;# 
  1930  0612                     	;# 
  1931  0613                     	;# 
  1932  0614                     	;# 
  1933  0616                     	;# 
  1934  0617                     	;# 
  1935  0618                     	;# 
  1936  0619                     	;# 
  1937  061A                     	;# 
  1938  061B                     	;# 
  1939  061C                     	;# 
  1940  061D                     	;# 
  1941  061E                     	;# 
  1942  068C                     	;# 
  1943  068D                     	;# 
  1944  068E                     	;# 
  1945  068F                     	;# 
  1946  0690                     	;# 
  1947  0691                     	;# 
  1948  0692                     	;# 
  1949  0693                     	;# 
  1950  0694                     	;# 
  1951  070C                     	;# 
  1952  070D                     	;# 
  1953  070E                     	;# 
  1954  070F                     	;# 
  1955  0710                     	;# 
  1956  0711                     	;# 
  1957  0712                     	;# 
  1958  0713                     	;# 
  1959  0714                     	;# 
  1960  0716                     	;# 
  1961  0717                     	;# 
  1962  0718                     	;# 
  1963  0719                     	;# 
  1964  071A                     	;# 
  1965  071B                     	;# 
  1966  071C                     	;# 
  1967  071D                     	;# 
  1968  071E                     	;# 
  1969  0796                     	;# 
  1970  0797                     	;# 
  1971  0798                     	;# 
  1972  0799                     	;# 
  1973  079A                     	;# 
  1974  079B                     	;# 
  1975  080C                     	;# 
  1976  080D                     	;# 
  1977  080E                     	;# 
  1978  080F                     	;# 
  1979  0810                     	;# 
  1980  0811                     	;# 
  1981  0812                     	;# 
  1982  0813                     	;# 
  1983  0814                     	;# 
  1984  081A                     	;# 
  1985  081B                     	;# 
  1986  081C                     	;# 
  1987  081D                     	;# 
  1988  081E                     	;# 
  1989  081F                     	;# 
  1990  088C                     	;# 
  1991  088D                     	;# 
  1992  088E                     	;# 
  1993  088F                     	;# 
  1994  0890                     	;# 
  1995  0891                     	;# 
  1996  0892                     	;# 
  1997  0893                     	;# 
  1998  0895                     	;# 
  1999  0896                     	;# 
  2000  0897                     	;# 
  2001  0898                     	;# 
  2002  0899                     	;# 
  2003  089A                     	;# 
  2004  089B                     	;# 
  2005  090C                     	;# 
  2006  090E                     	;# 
  2007  090F                     	;# 
  2008  091F                     	;# 
  2009  091F                     	;# 
  2010  098F                     	;# 
  2011  098F                     	;# 
  2012  0990                     	;# 
  2013  0991                     	;# 
  2014  0992                     	;# 
  2015  0993                     	;# 
  2016  0994                     	;# 
  2017  0995                     	;# 
  2018  0996                     	;# 
  2019  0997                     	;# 
  2020  0E0F                     	;# 
  2021  0E10                     	;# 
  2022  0E11                     	;# 
  2023  0E12                     	;# 
  2024  0E13                     	;# 
  2025  0E14                     	;# 
  2026  0E15                     	;# 
  2027  0E16                     	;# 
  2028  0E17                     	;# 
  2029  0E18                     	;# 
  2030  0E19                     	;# 
  2031  0E1A                     	;# 
  2032  0E1B                     	;# 
  2033  0E1C                     	;# 
  2034  0E1D                     	;# 
  2035  0E1E                     	;# 
  2036  0E1F                     	;# 
  2037  0E20                     	;# 
  2038  0E21                     	;# 
  2039  0E22                     	;# 
  2040  0E23                     	;# 
  2041  0E24                     	;# 
  2042  0E25                     	;# 
  2043  0E26                     	;# 
  2044  0E27                     	;# 
  2045  0E28                     	;# 
  2046  0E29                     	;# 
  2047  0E2A                     	;# 
  2048  0E2B                     	;# 
  2049  0E2C                     	;# 
  2050  0E2D                     	;# 
  2051  0E2E                     	;# 
  2052  0E2F                     	;# 
  2053  0E30                     	;# 
  2054  0E31                     	;# 
  2055  0E32                     	;# 
  2056  0E33                     	;# 
  2057  0E34                     	;# 
  2058  0E35                     	;# 
  2059  0E36                     	;# 
  2060  0E37                     	;# 
  2061  0E8F                     	;# 
  2062  0E90                     	;# 
  2063  0E91                     	;# 
  2064  0E92                     	;# 
  2065  0E93                     	;# 
  2066  0E94                     	;# 
  2067  0E95                     	;# 
  2068  0E96                     	;# 
  2069  0E97                     	;# 
  2070  0E9C                     	;# 
  2071  0E9D                     	;# 
  2072  0E9E                     	;# 
  2073  0EA1                     	;# 
  2074  0EA2                     	;# 
  2075  0EA3                     	;# 
  2076  0EA4                     	;# 
  2077  0EA5                     	;# 
  2078  0EA9                     	;# 
  2079  0EAA                     	;# 
  2080  0EAB                     	;# 
  2081  0EAC                     	;# 
  2082  0EB1                     	;# 
  2083  0EB2                     	;# 
  2084  0EB3                     	;# 
  2085  0EB8                     	;# 
  2086  0EB9                     	;# 
  2087  0EBA                     	;# 
  2088  0EBB                     	;# 
  2089  0EBC                     	;# 
  2090  0EBD                     	;# 
  2091  0EBE                     	;# 
  2092  0EC3                     	;# 
  2093  0EC5                     	;# 
  2094  0EC6                     	;# 
  2095  0EC7                     	;# 
  2096  0EC8                     	;# 
  2097  0EC9                     	;# 
  2098  0ECA                     	;# 
  2099  0ECB                     	;# 
  2100  0ECC                     	;# 
  2101  0F10                     	;# 
  2102  0F11                     	;# 
  2103  0F12                     	;# 
  2104  0F13                     	;# 
  2105  0F14                     	;# 
  2106  0F15                     	;# 
  2107  0F16                     	;# 
  2108  0F17                     	;# 
  2109  0F18                     	;# 
  2110  0F19                     	;# 
  2111  0F1A                     	;# 
  2112  0F1B                     	;# 
  2113  0F1C                     	;# 
  2114  0F1D                     	;# 
  2115  0F1E                     	;# 
  2116  0F1F                     	;# 
  2117  0F20                     	;# 
  2118  0F21                     	;# 
  2119  0F22                     	;# 
  2120  0F23                     	;# 
  2121  0F24                     	;# 
  2122  0F25                     	;# 
  2123  0F26                     	;# 
  2124  0F27                     	;# 
  2125  0F38                     	;# 
  2126  0F39                     	;# 
  2127  0F3A                     	;# 
  2128  0F3B                     	;# 
  2129  0F3C                     	;# 
  2130  0F3D                     	;# 
  2131  0F3E                     	;# 
  2132  0F3F                     	;# 
  2133  0F40                     	;# 
  2134  0F41                     	;# 
  2135  0F43                     	;# 
  2136  0F44                     	;# 
  2137  0F45                     	;# 
  2138  0F46                     	;# 
  2139  0F47                     	;# 
  2140  0F48                     	;# 
  2141  0F49                     	;# 
  2142  0F4A                     	;# 
  2143  0F4B                     	;# 
  2144  0F4C                     	;# 
  2145  0F4E                     	;# 
  2146  0F4F                     	;# 
  2147  0F50                     	;# 
  2148  0F51                     	;# 
  2149  0F52                     	;# 
  2150  0F53                     	;# 
  2151  0F54                     	;# 
  2152  0F55                     	;# 
  2153  0F56                     	;# 
  2154  0F57                     	;# 
  2155  0F65                     	;# 
  2156  0F68                     	;# 
  2157  0F69                     	;# 
  2158  0F6A                     	;# 
  2159  0F6B                     	;# 
  2160  0FE4                     	;# 
  2161  0FE5                     	;# 
  2162  0FE6                     	;# 
  2163  0FE7                     	;# 
  2164  0FE8                     	;# 
  2165  0FE9                     	;# 
  2166  0FEA                     	;# 
  2167  0FEB                     	;# 
  2168  0FED                     	;# 
  2169  0FEE                     	;# 
  2170  0FEF                     	;# 
  2171  0000                     	;# 
  2172  0001                     	;# 
  2173  0002                     	;# 
  2174  0003                     	;# 
  2175  0004                     	;# 
  2176  0005                     	;# 
  2177  0006                     	;# 
  2178  0007                     	;# 
  2179  0008                     	;# 
  2180  0009                     	;# 
  2181  000A                     	;# 
  2182  000B                     	;# 
  2183  000C                     	;# 
  2184  000D                     	;# 
  2185  000E                     	;# 
  2186  0010                     	;# 
  2187  0011                     	;# 
  2188  0012                     	;# 
  2189  0013                     	;# 
  2190  0016                     	;# 
  2191  0017                     	;# 
  2192  0018                     	;# 
  2193  001C                     	;# 
  2194  001C                     	;# 
  2195  001D                     	;# 
  2196  001D                     	;# 
  2197  001E                     	;# 
  2198  001F                     	;# 
  2199  008C                     	;# 
  2200  008C                     	;# 
  2201  008D                     	;# 
  2202  008E                     	;# 
  2203  008E                     	;# 
  2204  008F                     	;# 
  2205  0090                     	;# 
  2206  0090                     	;# 
  2207  0091                     	;# 
  2208  0093                     	;# 
  2209  0094                     	;# 
  2210  0095                     	;# 
  2211  0096                     	;# 
  2212  0097                     	;# 
  2213  0098                     	;# 
  2214  0099                     	;# 
  2215  009A                     	;# 
  2216  009B                     	;# 
  2217  009C                     	;# 
  2218  009D                     	;# 
  2219  009E                     	;# 
  2220  010C                     	;# 
  2221  010D                     	;# 
  2222  010E                     	;# 
  2223  010E                     	;# 
  2224  010F                     	;# 
  2225  0110                     	;# 
  2226  0110                     	;# 
  2227  0111                     	;# 
  2228  0112                     	;# 
  2229  0112                     	;# 
  2230  0113                     	;# 
  2231  0114                     	;# 
  2232  0114                     	;# 
  2233  0115                     	;# 
  2234  0116                     	;# 
  2235  0116                     	;# 
  2236  0117                     	;# 
  2237  0119                     	;# 
  2238  0119                     	;# 
  2239  0119                     	;# 
  2240  011A                     	;# 
  2241  011A                     	;# 
  2242  011A                     	;# 
  2243  011B                     	;# 
  2244  011B                     	;# 
  2245  011B                     	;# 
  2246  011B                     	;# 
  2247  011B                     	;# 
  2248  011C                     	;# 
  2249  011C                     	;# 
  2250  011C                     	;# 
  2251  011D                     	;# 
  2252  011D                     	;# 
  2253  011D                     	;# 
  2254  011E                     	;# 
  2255  011E                     	;# 
  2256  011E                     	;# 
  2257  011F                     	;# 
  2258  011F                     	;# 
  2259  011F                     	;# 
  2260  011F                     	;# 
  2261  011F                     	;# 
  2262  018C                     	;# 
  2263  018D                     	;# 
  2264  018E                     	;# 
  2265  018F                     	;# 
  2266  0190                     	;# 
  2267  0191                     	;# 
  2268  0192                     	;# 
  2269  0196                     	;# 
  2270  0197                     	;# 
  2271  0198                     	;# 
  2272  0199                     	;# 
  2273  019A                     	;# 
  2274  019B                     	;# 
  2275  019C                     	;# 
  2276  020C                     	;# 
  2277  020C                     	;# 
  2278  020D                     	;# 
  2279  020E                     	;# 
  2280  020F                     	;# 
  2281  020F                     	;# 
  2282  0210                     	;# 
  2283  0210                     	;# 
  2284  0211                     	;# 
  2285  0211                     	;# 
  2286  0212                     	;# 
  2287  0212                     	;# 
  2288  0213                     	;# 
  2289  0214                     	;# 
  2290  0215                     	;# 
  2291  0215                     	;# 
  2292  0216                     	;# 
  2293  0216                     	;# 
  2294  0217                     	;# 
  2295  0217                     	;# 
  2296  0218                     	;# 
  2297  0218                     	;# 
  2298  0219                     	;# 
  2299  021A                     	;# 
  2300  021B                     	;# 
  2301  021B                     	;# 
  2302  021C                     	;# 
  2303  021C                     	;# 
  2304  021D                     	;# 
  2305  021D                     	;# 
  2306  021E                     	;# 
  2307  021F                     	;# 
  2308  028C                     	;# 
  2309  028C                     	;# 
  2310  028D                     	;# 
  2311  028D                     	;# 
  2312  028E                     	;# 
  2313  028F                     	;# 
  2314  0290                     	;# 
  2315  0290                     	;# 
  2316  0291                     	;# 
  2317  0292                     	;# 
  2318  0292                     	;# 
  2319  0293                     	;# 
  2320  0293                     	;# 
  2321  0294                     	;# 
  2322  0295                     	;# 
  2323  0296                     	;# 
  2324  0296                     	;# 
  2325  0297                     	;# 
  2326  0298                     	;# 
  2327  0298                     	;# 
  2328  0299                     	;# 
  2329  0299                     	;# 
  2330  029A                     	;# 
  2331  029B                     	;# 
  2332  029C                     	;# 
  2333  029C                     	;# 
  2334  029D                     	;# 
  2335  030C                     	;# 
  2336  030C                     	;# 
  2337  030D                     	;# 
  2338  030E                     	;# 
  2339  030F                     	;# 
  2340  0310                     	;# 
  2341  0310                     	;# 
  2342  0311                     	;# 
  2343  0312                     	;# 
  2344  0313                     	;# 
  2345  0314                     	;# 
  2346  0314                     	;# 
  2347  0315                     	;# 
  2348  0316                     	;# 
  2349  0317                     	;# 
  2350  0318                     	;# 
  2351  0318                     	;# 
  2352  0319                     	;# 
  2353  031A                     	;# 
  2354  031B                     	;# 
  2355  031C                     	;# 
  2356  031C                     	;# 
  2357  031D                     	;# 
  2358  031E                     	;# 
  2359  031F                     	;# 
  2360  038C                     	;# 
  2361  038D                     	;# 
  2362  038E                     	;# 
  2363  0390                     	;# 
  2364  0391                     	;# 
  2365  0392                     	;# 
  2366  040C                     	;# 
  2367  040D                     	;# 
  2368  040E                     	;# 
  2369  040F                     	;# 
  2370  0410                     	;# 
  2371  0411                     	;# 
  2372  0416                     	;# 
  2373  0416                     	;# 
  2374  0417                     	;# 
  2375  0418                     	;# 
  2376  0418                     	;# 
  2377  0419                     	;# 
  2378  041A                     	;# 
  2379  041A                     	;# 
  2380  041B                     	;# 
  2381  041C                     	;# 
  2382  041C                     	;# 
  2383  041D                     	;# 
  2384  041E                     	;# 
  2385  041F                     	;# 
  2386  048C                     	;# 
  2387  048C                     	;# 
  2388  048D                     	;# 
  2389  048E                     	;# 
  2390  048F                     	;# 
  2391  048F                     	;# 
  2392  0490                     	;# 
  2393  0491                     	;# 
  2394  0492                     	;# 
  2395  0492                     	;# 
  2396  0493                     	;# 
  2397  0494                     	;# 
  2398  0495                     	;# 
  2399  0495                     	;# 
  2400  0496                     	;# 
  2401  0497                     	;# 
  2402  0498                     	;# 
  2403  0499                     	;# 
  2404  049A                     	;# 
  2405  049B                     	;# 
  2406  049C                     	;# 
  2407  049D                     	;# 
  2408  050C                     	;# 
  2409  050C                     	;# 
  2410  050D                     	;# 
  2411  050E                     	;# 
  2412  050F                     	;# 
  2413  050F                     	;# 
  2414  0510                     	;# 
  2415  0511                     	;# 
  2416  0512                     	;# 
  2417  0512                     	;# 
  2418  0513                     	;# 
  2419  0514                     	;# 
  2420  0515                     	;# 
  2421  0515                     	;# 
  2422  0516                     	;# 
  2423  0517                     	;# 
  2424  0518                     	;# 
  2425  0519                     	;# 
  2426  051A                     	;# 
  2427  051B                     	;# 
  2428  051C                     	;# 
  2429  051D                     	;# 
  2430  058C                     	;# 
  2431  058C                     	;# 
  2432  058D                     	;# 
  2433  058E                     	;# 
  2434  058F                     	;# 
  2435  058F                     	;# 
  2436  0590                     	;# 
  2437  0591                     	;# 
  2438  0592                     	;# 
  2439  0593                     	;# 
  2440  060C                     	;# 
  2441  060D                     	;# 
  2442  060E                     	;# 
  2443  060F                     	;# 
  2444  0610                     	;# 
  2445  0611                     	;# 
  2446  0612                     	;# 
  2447  0613                     	;# 
  2448  0614                     	;# 
  2449  0616                     	;# 
  2450  0617                     	;# 
  2451  0618                     	;# 
  2452  0619                     	;# 
  2453  061A                     	;# 
  2454  061B                     	;# 
  2455  061C                     	;# 
  2456  061D                     	;# 
  2457  061E                     	;# 
  2458  068C                     	;# 
  2459  068D                     	;# 
  2460  068E                     	;# 
  2461  068F                     	;# 
  2462  0690                     	;# 
  2463  0691                     	;# 
  2464  0692                     	;# 
  2465  0693                     	;# 
  2466  0694                     	;# 
  2467  070C                     	;# 
  2468  070D                     	;# 
  2469  070E                     	;# 
  2470  070F                     	;# 
  2471  0710                     	;# 
  2472  0711                     	;# 
  2473  0712                     	;# 
  2474  0713                     	;# 
  2475  0714                     	;# 
  2476  0716                     	;# 
  2477  0717                     	;# 
  2478  0718                     	;# 
  2479  0719                     	;# 
  2480  071A                     	;# 
  2481  071B                     	;# 
  2482  071C                     	;# 
  2483  071D                     	;# 
  2484  071E                     	;# 
  2485  0796                     	;# 
  2486  0797                     	;# 
  2487  0798                     	;# 
  2488  0799                     	;# 
  2489  079A                     	;# 
  2490  079B                     	;# 
  2491  080C                     	;# 
  2492  080D                     	;# 
  2493  080E                     	;# 
  2494  080F                     	;# 
  2495  0810                     	;# 
  2496  0811                     	;# 
  2497  0812                     	;# 
  2498  0813                     	;# 
  2499  0814                     	;# 
  2500  081A                     	;# 
  2501  081B                     	;# 
  2502  081C                     	;# 
  2503  081D                     	;# 
  2504  081E                     	;# 
  2505  081F                     	;# 
  2506  088C                     	;# 
  2507  088D                     	;# 
  2508  088E                     	;# 
  2509  088F                     	;# 
  2510  0890                     	;# 
  2511  0891                     	;# 
  2512  0892                     	;# 
  2513  0893                     	;# 
  2514  0895                     	;# 
  2515  0896                     	;# 
  2516  0897                     	;# 
  2517  0898                     	;# 
  2518  0899                     	;# 
  2519  089A                     	;# 
  2520  089B                     	;# 
  2521  090C                     	;# 
  2522  090E                     	;# 
  2523  090F                     	;# 
  2524  091F                     	;# 
  2525  091F                     	;# 
  2526  098F                     	;# 
  2527  098F                     	;# 
  2528  0990                     	;# 
  2529  0991                     	;# 
  2530  0992                     	;# 
  2531  0993                     	;# 
  2532  0994                     	;# 
  2533  0995                     	;# 
  2534  0996                     	;# 
  2535  0997                     	;# 
  2536  0E0F                     	;# 
  2537  0E10                     	;# 
  2538  0E11                     	;# 
  2539  0E12                     	;# 
  2540  0E13                     	;# 
  2541  0E14                     	;# 
  2542  0E15                     	;# 
  2543  0E16                     	;# 
  2544  0E17                     	;# 
  2545  0E18                     	;# 
  2546  0E19                     	;# 
  2547  0E1A                     	;# 
  2548  0E1B                     	;# 
  2549  0E1C                     	;# 
  2550  0E1D                     	;# 
  2551  0E1E                     	;# 
  2552  0E1F                     	;# 
  2553  0E20                     	;# 
  2554  0E21                     	;# 
  2555  0E22                     	;# 
  2556  0E23                     	;# 
  2557  0E24                     	;# 
  2558  0E25                     	;# 
  2559  0E26                     	;# 
  2560  0E27                     	;# 
  2561  0E28                     	;# 
  2562  0E29                     	;# 
  2563  0E2A                     	;# 
  2564  0E2B                     	;# 
  2565  0E2C                     	;# 
  2566  0E2D                     	;# 
  2567  0E2E                     	;# 
  2568  0E2F                     	;# 
  2569  0E30                     	;# 
  2570  0E31                     	;# 
  2571  0E32                     	;# 
  2572  0E33                     	;# 
  2573  0E34                     	;# 
  2574  0E35                     	;# 
  2575  0E36                     	;# 
  2576  0E37                     	;# 
  2577  0E8F                     	;# 
  2578  0E90                     	;# 
  2579  0E91                     	;# 
  2580  0E92                     	;# 
  2581  0E93                     	;# 
  2582  0E94                     	;# 
  2583  0E95                     	;# 
  2584  0E96                     	;# 
  2585  0E97                     	;# 
  2586  0E9C                     	;# 
  2587  0E9D                     	;# 
  2588  0E9E                     	;# 
  2589  0EA1                     	;# 
  2590  0EA2                     	;# 
  2591  0EA3                     	;# 
  2592  0EA4                     	;# 
  2593  0EA5                     	;# 
  2594  0EA9                     	;# 
  2595  0EAA                     	;# 
  2596  0EAB                     	;# 
  2597  0EAC                     	;# 
  2598  0EB1                     	;# 
  2599  0EB2                     	;# 
  2600  0EB3                     	;# 
  2601  0EB8                     	;# 
  2602  0EB9                     	;# 
  2603  0EBA                     	;# 
  2604  0EBB                     	;# 
  2605  0EBC                     	;# 
  2606  0EBD                     	;# 
  2607  0EBE                     	;# 
  2608  0EC3                     	;# 
  2609  0EC5                     	;# 
  2610  0EC6                     	;# 
  2611  0EC7                     	;# 
  2612  0EC8                     	;# 
  2613  0EC9                     	;# 
  2614  0ECA                     	;# 
  2615  0ECB                     	;# 
  2616  0ECC                     	;# 
  2617  0F10                     	;# 
  2618  0F11                     	;# 
  2619  0F12                     	;# 
  2620  0F13                     	;# 
  2621  0F14                     	;# 
  2622  0F15                     	;# 
  2623  0F16                     	;# 
  2624  0F17                     	;# 
  2625  0F18                     	;# 
  2626  0F19                     	;# 
  2627  0F1A                     	;# 
  2628  0F1B                     	;# 
  2629  0F1C                     	;# 
  2630  0F1D                     	;# 
  2631  0F1E                     	;# 
  2632  0F1F                     	;# 
  2633  0F20                     	;# 
  2634  0F21                     	;# 
  2635  0F22                     	;# 
  2636  0F23                     	;# 
  2637  0F24                     	;# 
  2638  0F25                     	;# 
  2639  0F26                     	;# 
  2640  0F27                     	;# 
  2641  0F38                     	;# 
  2642  0F39                     	;# 
  2643  0F3A                     	;# 
  2644  0F3B                     	;# 
  2645  0F3C                     	;# 
  2646  0F3D                     	;# 
  2647  0F3E                     	;# 
  2648  0F3F                     	;# 
  2649  0F40                     	;# 
  2650  0F41                     	;# 
  2651  0F43                     	;# 
  2652  0F44                     	;# 
  2653  0F45                     	;# 
  2654  0F46                     	;# 
  2655  0F47                     	;# 
  2656  0F48                     	;# 
  2657  0F49                     	;# 
  2658  0F4A                     	;# 
  2659  0F4B                     	;# 
  2660  0F4C                     	;# 
  2661  0F4E                     	;# 
  2662  0F4F                     	;# 
  2663  0F50                     	;# 
  2664  0F51                     	;# 
  2665  0F52                     	;# 
  2666  0F53                     	;# 
  2667  0F54                     	;# 
  2668  0F55                     	;# 
  2669  0F56                     	;# 
  2670  0F57                     	;# 
  2671  0F65                     	;# 
  2672  0F68                     	;# 
  2673  0F69                     	;# 
  2674  0F6A                     	;# 
  2675  0F6B                     	;# 
  2676  0FE4                     	;# 
  2677  0FE5                     	;# 
  2678  0FE6                     	;# 
  2679  0FE7                     	;# 
  2680  0FE8                     	;# 
  2681  0FE9                     	;# 
  2682  0FEA                     	;# 
  2683  0FEB                     	;# 
  2684  0FED                     	;# 
  2685  0FEE                     	;# 
  2686  0FEF                     	;# 
  2687  0000                     	;# 
  2688  0001                     	;# 
  2689  0002                     	;# 
  2690  0003                     	;# 
  2691  0004                     	;# 
  2692  0005                     	;# 
  2693  0006                     	;# 
  2694  0007                     	;# 
  2695  0008                     	;# 
  2696  0009                     	;# 
  2697  000A                     	;# 
  2698  000B                     	;# 
  2699  000C                     	;# 
  2700  000D                     	;# 
  2701  000E                     	;# 
  2702  0010                     	;# 
  2703  0011                     	;# 
  2704  0012                     	;# 
  2705  0013                     	;# 
  2706  0016                     	;# 
  2707  0017                     	;# 
  2708  0018                     	;# 
  2709  001C                     	;# 
  2710  001C                     	;# 
  2711  001D                     	;# 
  2712  001D                     	;# 
  2713  001E                     	;# 
  2714  001F                     	;# 
  2715  008C                     	;# 
  2716  008C                     	;# 
  2717  008D                     	;# 
  2718  008E                     	;# 
  2719  008E                     	;# 
  2720  008F                     	;# 
  2721  0090                     	;# 
  2722  0090                     	;# 
  2723  0091                     	;# 
  2724  0093                     	;# 
  2725  0094                     	;# 
  2726  0095                     	;# 
  2727  0096                     	;# 
  2728  0097                     	;# 
  2729  0098                     	;# 
  2730  0099                     	;# 
  2731  009A                     	;# 
  2732  009B                     	;# 
  2733  009C                     	;# 
  2734  009D                     	;# 
  2735  009E                     	;# 
  2736  010C                     	;# 
  2737  010D                     	;# 
  2738  010E                     	;# 
  2739  010E                     	;# 
  2740  010F                     	;# 
  2741  0110                     	;# 
  2742  0110                     	;# 
  2743  0111                     	;# 
  2744  0112                     	;# 
  2745  0112                     	;# 
  2746  0113                     	;# 
  2747  0114                     	;# 
  2748  0114                     	;# 
  2749  0115                     	;# 
  2750  0116                     	;# 
  2751  0116                     	;# 
  2752  0117                     	;# 
  2753  0119                     	;# 
  2754  0119                     	;# 
  2755  0119                     	;# 
  2756  011A                     	;# 
  2757  011A                     	;# 
  2758  011A                     	;# 
  2759  011B                     	;# 
  2760  011B                     	;# 
  2761  011B                     	;# 
  2762  011B                     	;# 
  2763  011B                     	;# 
  2764  011C                     	;# 
  2765  011C                     	;# 
  2766  011C                     	;# 
  2767  011D                     	;# 
  2768  011D                     	;# 
  2769  011D                     	;# 
  2770  011E                     	;# 
  2771  011E                     	;# 
  2772  011E                     	;# 
  2773  011F                     	;# 
  2774  011F                     	;# 
  2775  011F                     	;# 
  2776  011F                     	;# 
  2777  011F                     	;# 
  2778  018C                     	;# 
  2779  018D                     	;# 
  2780  018E                     	;# 
  2781  018F                     	;# 
  2782  0190                     	;# 
  2783  0191                     	;# 
  2784  0192                     	;# 
  2785  0196                     	;# 
  2786  0197                     	;# 
  2787  0198                     	;# 
  2788  0199                     	;# 
  2789  019A                     	;# 
  2790  019B                     	;# 
  2791  019C                     	;# 
  2792  020C                     	;# 
  2793  020C                     	;# 
  2794  020D                     	;# 
  2795  020E                     	;# 
  2796  020F                     	;# 
  2797  020F                     	;# 
  2798  0210                     	;# 
  2799  0210                     	;# 
  2800  0211                     	;# 
  2801  0211                     	;# 
  2802  0212                     	;# 
  2803  0212                     	;# 
  2804  0213                     	;# 
  2805  0214                     	;# 
  2806  0215                     	;# 
  2807  0215                     	;# 
  2808  0216                     	;# 
  2809  0216                     	;# 
  2810  0217                     	;# 
  2811  0217                     	;# 
  2812  0218                     	;# 
  2813  0218                     	;# 
  2814  0219                     	;# 
  2815  021A                     	;# 
  2816  021B                     	;# 
  2817  021B                     	;# 
  2818  021C                     	;# 
  2819  021C                     	;# 
  2820  021D                     	;# 
  2821  021D                     	;# 
  2822  021E                     	;# 
  2823  021F                     	;# 
  2824  028C                     	;# 
  2825  028C                     	;# 
  2826  028D                     	;# 
  2827  028D                     	;# 
  2828  028E                     	;# 
  2829  028F                     	;# 
  2830  0290                     	;# 
  2831  0290                     	;# 
  2832  0291                     	;# 
  2833  0292                     	;# 
  2834  0292                     	;# 
  2835  0293                     	;# 
  2836  0293                     	;# 
  2837  0294                     	;# 
  2838  0295                     	;# 
  2839  0296                     	;# 
  2840  0296                     	;# 
  2841  0297                     	;# 
  2842  0298                     	;# 
  2843  0298                     	;# 
  2844  0299                     	;# 
  2845  0299                     	;# 
  2846  029A                     	;# 
  2847  029B                     	;# 
  2848  029C                     	;# 
  2849  029C                     	;# 
  2850  029D                     	;# 
  2851  030C                     	;# 
  2852  030C                     	;# 
  2853  030D                     	;# 
  2854  030E                     	;# 
  2855  030F                     	;# 
  2856  0310                     	;# 
  2857  0310                     	;# 
  2858  0311                     	;# 
  2859  0312                     	;# 
  2860  0313                     	;# 
  2861  0314                     	;# 
  2862  0314                     	;# 
  2863  0315                     	;# 
  2864  0316                     	;# 
  2865  0317                     	;# 
  2866  0318                     	;# 
  2867  0318                     	;# 
  2868  0319                     	;# 
  2869  031A                     	;# 
  2870  031B                     	;# 
  2871  031C                     	;# 
  2872  031C                     	;# 
  2873  031D                     	;# 
  2874  031E                     	;# 
  2875  031F                     	;# 
  2876  038C                     	;# 
  2877  038D                     	;# 
  2878  038E                     	;# 
  2879  0390                     	;# 
  2880  0391                     	;# 
  2881  0392                     	;# 
  2882  040C                     	;# 
  2883  040D                     	;# 
  2884  040E                     	;# 
  2885  040F                     	;# 
  2886  0410                     	;# 
  2887  0411                     	;# 
  2888  0416                     	;# 
  2889  0416                     	;# 
  2890  0417                     	;# 
  2891  0418                     	;# 
  2892  0418                     	;# 
  2893  0419                     	;# 
  2894  041A                     	;# 
  2895  041A                     	;# 
  2896  041B                     	;# 
  2897  041C                     	;# 
  2898  041C                     	;# 
  2899  041D                     	;# 
  2900  041E                     	;# 
  2901  041F                     	;# 
  2902  048C                     	;# 
  2903  048C                     	;# 
  2904  048D                     	;# 
  2905  048E                     	;# 
  2906  048F                     	;# 
  2907  048F                     	;# 
  2908  0490                     	;# 
  2909  0491                     	;# 
  2910  0492                     	;# 
  2911  0492                     	;# 
  2912  0493                     	;# 
  2913  0494                     	;# 
  2914  0495                     	;# 
  2915  0495                     	;# 
  2916  0496                     	;# 
  2917  0497                     	;# 
  2918  0498                     	;# 
  2919  0499                     	;# 
  2920  049A                     	;# 
  2921  049B                     	;# 
  2922  049C                     	;# 
  2923  049D                     	;# 
  2924  050C                     	;# 
  2925  050C                     	;# 
  2926  050D                     	;# 
  2927  050E                     	;# 
  2928  050F                     	;# 
  2929  050F                     	;# 
  2930  0510                     	;# 
  2931  0511                     	;# 
  2932  0512                     	;# 
  2933  0512                     	;# 
  2934  0513                     	;# 
  2935  0514                     	;# 
  2936  0515                     	;# 
  2937  0515                     	;# 
  2938  0516                     	;# 
  2939  0517                     	;# 
  2940  0518                     	;# 
  2941  0519                     	;# 
  2942  051A                     	;# 
  2943  051B                     	;# 
  2944  051C                     	;# 
  2945  051D                     	;# 
  2946  058C                     	;# 
  2947  058C                     	;# 
  2948  058D                     	;# 
  2949  058E                     	;# 
  2950  058F                     	;# 
  2951  058F                     	;# 
  2952  0590                     	;# 
  2953  0591                     	;# 
  2954  0592                     	;# 
  2955  0593                     	;# 
  2956  060C                     	;# 
  2957  060D                     	;# 
  2958  060E                     	;# 
  2959  060F                     	;# 
  2960  0610                     	;# 
  2961  0611                     	;# 
  2962  0612                     	;# 
  2963  0613                     	;# 
  2964  0614                     	;# 
  2965  0616                     	;# 
  2966  0617                     	;# 
  2967  0618                     	;# 
  2968  0619                     	;# 
  2969  061A                     	;# 
  2970  061B                     	;# 
  2971  061C                     	;# 
  2972  061D                     	;# 
  2973  061E                     	;# 
  2974  068C                     	;# 
  2975  068D                     	;# 
  2976  068E                     	;# 
  2977  068F                     	;# 
  2978  0690                     	;# 
  2979  0691                     	;# 
  2980  0692                     	;# 
  2981  0693                     	;# 
  2982  0694                     	;# 
  2983  070C                     	;# 
  2984  070D                     	;# 
  2985  070E                     	;# 
  2986  070F                     	;# 
  2987  0710                     	;# 
  2988  0711                     	;# 
  2989  0712                     	;# 
  2990  0713                     	;# 
  2991  0714                     	;# 
  2992  0716                     	;# 
  2993  0717                     	;# 
  2994  0718                     	;# 
  2995  0719                     	;# 
  2996  071A                     	;# 
  2997  071B                     	;# 
  2998  071C                     	;# 
  2999  071D                     	;# 
  3000  071E                     	;# 
  3001  0796                     	;# 
  3002  0797                     	;# 
  3003  0798                     	;# 
  3004  0799                     	;# 
  3005  079A                     	;# 
  3006  079B                     	;# 
  3007  080C                     	;# 
  3008  080D                     	;# 
  3009  080E                     	;# 
  3010  080F                     	;# 
  3011  0810                     	;# 
  3012  0811                     	;# 
  3013  0812                     	;# 
  3014  0813                     	;# 
  3015  0814                     	;# 
  3016  081A                     	;# 
  3017  081B                     	;# 
  3018  081C                     	;# 
  3019  081D                     	;# 
  3020  081E                     	;# 
  3021  081F                     	;# 
  3022  088C                     	;# 
  3023  088D                     	;# 
  3024  088E                     	;# 
  3025  088F                     	;# 
  3026  0890                     	;# 
  3027  0891                     	;# 
  3028  0892                     	;# 
  3029  0893                     	;# 
  3030  0895                     	;# 
  3031  0896                     	;# 
  3032  0897                     	;# 
  3033  0898                     	;# 
  3034  0899                     	;# 
  3035  089A                     	;# 
  3036  089B                     	;# 
  3037  090C                     	;# 
  3038  090E                     	;# 
  3039  090F                     	;# 
  3040  091F                     	;# 
  3041  091F                     	;# 
  3042  098F                     	;# 
  3043  098F                     	;# 
  3044  0990                     	;# 
  3045  0991                     	;# 
  3046  0992                     	;# 
  3047  0993                     	;# 
  3048  0994                     	;# 
  3049  0995                     	;# 
  3050  0996                     	;# 
  3051  0997                     	;# 
  3052  0E0F                     	;# 
  3053  0E10                     	;# 
  3054  0E11                     	;# 
  3055  0E12                     	;# 
  3056  0E13                     	;# 
  3057  0E14                     	;# 
  3058  0E15                     	;# 
  3059  0E16                     	;# 
  3060  0E17                     	;# 
  3061  0E18                     	;# 
  3062  0E19                     	;# 
  3063  0E1A                     	;# 
  3064  0E1B                     	;# 
  3065  0E1C                     	;# 
  3066  0E1D                     	;# 
  3067  0E1E                     	;# 
  3068  0E1F                     	;# 
  3069  0E20                     	;# 
  3070  0E21                     	;# 
  3071  0E22                     	;# 
  3072  0E23                     	;# 
  3073  0E24                     	;# 
  3074  0E25                     	;# 
  3075  0E26                     	;# 
  3076  0E27                     	;# 
  3077  0E28                     	;# 
  3078  0E29                     	;# 
  3079  0E2A                     	;# 
  3080  0E2B                     	;# 
  3081  0E2C                     	;# 
  3082  0E2D                     	;# 
  3083  0E2E                     	;# 
  3084  0E2F                     	;# 
  3085  0E30                     	;# 
  3086  0E31                     	;# 
  3087  0E32                     	;# 
  3088  0E33                     	;# 
  3089  0E34                     	;# 
  3090  0E35                     	;# 
  3091  0E36                     	;# 
  3092  0E37                     	;# 
  3093  0E8F                     	;# 
  3094  0E90                     	;# 
  3095  0E91                     	;# 
  3096  0E92                     	;# 
  3097  0E93                     	;# 
  3098  0E94                     	;# 
  3099  0E95                     	;# 
  3100  0E96                     	;# 
  3101  0E97                     	;# 
  3102  0E9C                     	;# 
  3103  0E9D                     	;# 
  3104  0E9E                     	;# 
  3105  0EA1                     	;# 
  3106  0EA2                     	;# 
  3107  0EA3                     	;# 
  3108  0EA4                     	;# 
  3109  0EA5                     	;# 
  3110  0EA9                     	;# 
  3111  0EAA                     	;# 
  3112  0EAB                     	;# 
  3113  0EAC                     	;# 
  3114  0EB1                     	;# 
  3115  0EB2                     	;# 
  3116  0EB3                     	;# 
  3117  0EB8                     	;# 
  3118  0EB9                     	;# 
  3119  0EBA                     	;# 
  3120  0EBB                     	;# 
  3121  0EBC                     	;# 
  3122  0EBD                     	;# 
  3123  0EBE                     	;# 
  3124  0EC3                     	;# 
  3125  0EC5                     	;# 
  3126  0EC6                     	;# 
  3127  0EC7                     	;# 
  3128  0EC8                     	;# 
  3129  0EC9                     	;# 
  3130  0ECA                     	;# 
  3131  0ECB                     	;# 
  3132  0ECC                     	;# 
  3133  0F10                     	;# 
  3134  0F11                     	;# 
  3135  0F12                     	;# 
  3136  0F13                     	;# 
  3137  0F14                     	;# 
  3138  0F15                     	;# 
  3139  0F16                     	;# 
  3140  0F17                     	;# 
  3141  0F18                     	;# 
  3142  0F19                     	;# 
  3143  0F1A                     	;# 
  3144  0F1B                     	;# 
  3145  0F1C                     	;# 
  3146  0F1D                     	;# 
  3147  0F1E                     	;# 
  3148  0F1F                     	;# 
  3149  0F20                     	;# 
  3150  0F21                     	;# 
  3151  0F22                     	;# 
  3152  0F23                     	;# 
  3153  0F24                     	;# 
  3154  0F25                     	;# 
  3155  0F26                     	;# 
  3156  0F27                     	;# 
  3157  0F38                     	;# 
  3158  0F39                     	;# 
  3159  0F3A                     	;# 
  3160  0F3B                     	;# 
  3161  0F3C                     	;# 
  3162  0F3D                     	;# 
  3163  0F3E                     	;# 
  3164  0F3F                     	;# 
  3165  0F40                     	;# 
  3166  0F41                     	;# 
  3167  0F43                     	;# 
  3168  0F44                     	;# 
  3169  0F45                     	;# 
  3170  0F46                     	;# 
  3171  0F47                     	;# 
  3172  0F48                     	;# 
  3173  0F49                     	;# 
  3174  0F4A                     	;# 
  3175  0F4B                     	;# 
  3176  0F4C                     	;# 
  3177  0F4E                     	;# 
  3178  0F4F                     	;# 
  3179  0F50                     	;# 
  3180  0F51                     	;# 
  3181  0F52                     	;# 
  3182  0F53                     	;# 
  3183  0F54                     	;# 
  3184  0F55                     	;# 
  3185  0F56                     	;# 
  3186  0F57                     	;# 
  3187  0F65                     	;# 
  3188  0F68                     	;# 
  3189  0F69                     	;# 
  3190  0F6A                     	;# 
  3191  0F6B                     	;# 
  3192  0FE4                     	;# 
  3193  0FE5                     	;# 
  3194  0FE6                     	;# 
  3195  0FE7                     	;# 
  3196  0FE8                     	;# 
  3197  0FE9                     	;# 
  3198  0FEA                     	;# 
  3199  0FEB                     	;# 
  3200  0FED                     	;# 
  3201  0FEE                     	;# 
  3202  0FEF                     	;# 
  3203  0000                     	;# 
  3204  0001                     	;# 
  3205  0002                     	;# 
  3206  0003                     	;# 
  3207  0004                     	;# 
  3208  0005                     	;# 
  3209  0006                     	;# 
  3210  0007                     	;# 
  3211  0008                     	;# 
  3212  0009                     	;# 
  3213  000A                     	;# 
  3214  000B                     	;# 
  3215  000C                     	;# 
  3216  000D                     	;# 
  3217  000E                     	;# 
  3218  0010                     	;# 
  3219  0011                     	;# 
  3220  0012                     	;# 
  3221  0013                     	;# 
  3222  0016                     	;# 
  3223  0017                     	;# 
  3224  0018                     	;# 
  3225  001C                     	;# 
  3226  001C                     	;# 
  3227  001D                     	;# 
  3228  001D                     	;# 
  3229  001E                     	;# 
  3230  001F                     	;# 
  3231  008C                     	;# 
  3232  008C                     	;# 
  3233  008D                     	;# 
  3234  008E                     	;# 
  3235  008E                     	;# 
  3236  008F                     	;# 
  3237  0090                     	;# 
  3238  0090                     	;# 
  3239  0091                     	;# 
  3240  0093                     	;# 
  3241  0094                     	;# 
  3242  0095                     	;# 
  3243  0096                     	;# 
  3244  0097                     	;# 
  3245  0098                     	;# 
  3246  0099                     	;# 
  3247  009A                     	;# 
  3248  009B                     	;# 
  3249  009C                     	;# 
  3250  009D                     	;# 
  3251  009E                     	;# 
  3252  010C                     	;# 
  3253  010D                     	;# 
  3254  010E                     	;# 
  3255  010E                     	;# 
  3256  010F                     	;# 
  3257  0110                     	;# 
  3258  0110                     	;# 
  3259  0111                     	;# 
  3260  0112                     	;# 
  3261  0112                     	;# 
  3262  0113                     	;# 
  3263  0114                     	;# 
  3264  0114                     	;# 
  3265  0115                     	;# 
  3266  0116                     	;# 
  3267  0116                     	;# 
  3268  0117                     	;# 
  3269  0119                     	;# 
  3270  0119                     	;# 
  3271  0119                     	;# 
  3272  011A                     	;# 
  3273  011A                     	;# 
  3274  011A                     	;# 
  3275  011B                     	;# 
  3276  011B                     	;# 
  3277  011B                     	;# 
  3278  011B                     	;# 
  3279  011B                     	;# 
  3280  011C                     	;# 
  3281  011C                     	;# 
  3282  011C                     	;# 
  3283  011D                     	;# 
  3284  011D                     	;# 
  3285  011D                     	;# 
  3286  011E                     	;# 
  3287  011E                     	;# 
  3288  011E                     	;# 
  3289  011F                     	;# 
  3290  011F                     	;# 
  3291  011F                     	;# 
  3292  011F                     	;# 
  3293  011F                     	;# 
  3294  018C                     	;# 
  3295  018D                     	;# 
  3296  018E                     	;# 
  3297  018F                     	;# 
  3298  0190                     	;# 
  3299  0191                     	;# 
  3300  0192                     	;# 
  3301  0196                     	;# 
  3302  0197                     	;# 
  3303  0198                     	;# 
  3304  0199                     	;# 
  3305  019A                     	;# 
  3306  019B                     	;# 
  3307  019C                     	;# 
  3308  020C                     	;# 
  3309  020C                     	;# 
  3310  020D                     	;# 
  3311  020E                     	;# 
  3312  020F                     	;# 
  3313  020F                     	;# 
  3314  0210                     	;# 
  3315  0210                     	;# 
  3316  0211                     	;# 
  3317  0211                     	;# 
  3318  0212                     	;# 
  3319  0212                     	;# 
  3320  0213                     	;# 
  3321  0214                     	;# 
  3322  0215                     	;# 
  3323  0215                     	;# 
  3324  0216                     	;# 
  3325  0216                     	;# 
  3326  0217                     	;# 
  3327  0217                     	;# 
  3328  0218                     	;# 
  3329  0218                     	;# 
  3330  0219                     	;# 
  3331  021A                     	;# 
  3332  021B                     	;# 
  3333  021B                     	;# 
  3334  021C                     	;# 
  3335  021C                     	;# 
  3336  021D                     	;# 
  3337  021D                     	;# 
  3338  021E                     	;# 
  3339  021F                     	;# 
  3340  028C                     	;# 
  3341  028C                     	;# 
  3342  028D                     	;# 
  3343  028D                     	;# 
  3344  028E                     	;# 
  3345  028F                     	;# 
  3346  0290                     	;# 
  3347  0290                     	;# 
  3348  0291                     	;# 
  3349  0292                     	;# 
  3350  0292                     	;# 
  3351  0293                     	;# 
  3352  0293                     	;# 
  3353  0294                     	;# 
  3354  0295                     	;# 
  3355  0296                     	;# 
  3356  0296                     	;# 
  3357  0297                     	;# 
  3358  0298                     	;# 
  3359  0298                     	;# 
  3360  0299                     	;# 
  3361  0299                     	;# 
  3362  029A                     	;# 
  3363  029B                     	;# 
  3364  029C                     	;# 
  3365  029C                     	;# 
  3366  029D                     	;# 
  3367  030C                     	;# 
  3368  030C                     	;# 
  3369  030D                     	;# 
  3370  030E                     	;# 
  3371  030F                     	;# 
  3372  0310                     	;# 
  3373  0310                     	;# 
  3374  0311                     	;# 
  3375  0312                     	;# 
  3376  0313                     	;# 
  3377  0314                     	;# 
  3378  0314                     	;# 
  3379  0315                     	;# 
  3380  0316                     	;# 
  3381  0317                     	;# 
  3382  0318                     	;# 
  3383  0318                     	;# 
  3384  0319                     	;# 
  3385  031A                     	;# 
  3386  031B                     	;# 
  3387  031C                     	;# 
  3388  031C                     	;# 
  3389  031D                     	;# 
  3390  031E                     	;# 
  3391  031F                     	;# 
  3392  038C                     	;# 
  3393  038D                     	;# 
  3394  038E                     	;# 
  3395  0390                     	;# 
  3396  0391                     	;# 
  3397  0392                     	;# 
  3398  040C                     	;# 
  3399  040D                     	;# 
  3400  040E                     	;# 
  3401  040F                     	;# 
  3402  0410                     	;# 
  3403  0411                     	;# 
  3404  0416                     	;# 
  3405  0416                     	;# 
  3406  0417                     	;# 
  3407  0418                     	;# 
  3408  0418                     	;# 
  3409  0419                     	;# 
  3410  041A                     	;# 
  3411  041A                     	;# 
  3412  041B                     	;# 
  3413  041C                     	;# 
  3414  041C                     	;# 
  3415  041D                     	;# 
  3416  041E                     	;# 
  3417  041F                     	;# 
  3418  048C                     	;# 
  3419  048C                     	;# 
  3420  048D                     	;# 
  3421  048E                     	;# 
  3422  048F                     	;# 
  3423  048F                     	;# 
  3424  0490                     	;# 
  3425  0491                     	;# 
  3426  0492                     	;# 
  3427  0492                     	;# 
  3428  0493                     	;# 
  3429  0494                     	;# 
  3430  0495                     	;# 
  3431  0495                     	;# 
  3432  0496                     	;# 
  3433  0497                     	;# 
  3434  0498                     	;# 
  3435  0499                     	;# 
  3436  049A                     	;# 
  3437  049B                     	;# 
  3438  049C                     	;# 
  3439  049D                     	;# 
  3440  050C                     	;# 
  3441  050C                     	;# 
  3442  050D                     	;# 
  3443  050E                     	;# 
  3444  050F                     	;# 
  3445  050F                     	;# 
  3446  0510                     	;# 
  3447  0511                     	;# 
  3448  0512                     	;# 
  3449  0512                     	;# 
  3450  0513                     	;# 
  3451  0514                     	;# 
  3452  0515                     	;# 
  3453  0515                     	;# 
  3454  0516                     	;# 
  3455  0517                     	;# 
  3456  0518                     	;# 
  3457  0519                     	;# 
  3458  051A                     	;# 
  3459  051B                     	;# 
  3460  051C                     	;# 
  3461  051D                     	;# 
  3462  058C                     	;# 
  3463  058C                     	;# 
  3464  058D                     	;# 
  3465  058E                     	;# 
  3466  058F                     	;# 
  3467  058F                     	;# 
  3468  0590                     	;# 
  3469  0591                     	;# 
  3470  0592                     	;# 
  3471  0593                     	;# 
  3472  060C                     	;# 
  3473  060D                     	;# 
  3474  060E                     	;# 
  3475  060F                     	;# 
  3476  0610                     	;# 
  3477  0611                     	;# 
  3478  0612                     	;# 
  3479  0613                     	;# 
  3480  0614                     	;# 
  3481  0616                     	;# 
  3482  0617                     	;# 
  3483  0618                     	;# 
  3484  0619                     	;# 
  3485  061A                     	;# 
  3486  061B                     	;# 
  3487  061C                     	;# 
  3488  061D                     	;# 
  3489  061E                     	;# 
  3490  068C                     	;# 
  3491  068D                     	;# 
  3492  068E                     	;# 
  3493  068F                     	;# 
  3494  0690                     	;# 
  3495  0691                     	;# 
  3496  0692                     	;# 
  3497  0693                     	;# 
  3498  0694                     	;# 
  3499  070C                     	;# 
  3500  070D                     	;# 
  3501  070E                     	;# 
  3502  070F                     	;# 
  3503  0710                     	;# 
  3504  0711                     	;# 
  3505  0712                     	;# 
  3506  0713                     	;# 
  3507  0714                     	;# 
  3508  0716                     	;# 
  3509  0717                     	;# 
  3510  0718                     	;# 
  3511  0719                     	;# 
  3512  071A                     	;# 
  3513  071B                     	;# 
  3514  071C                     	;# 
  3515  071D                     	;# 
  3516  071E                     	;# 
  3517  0796                     	;# 
  3518  0797                     	;# 
  3519  0798                     	;# 
  3520  0799                     	;# 
  3521  079A                     	;# 
  3522  079B                     	;# 
  3523  080C                     	;# 
  3524  080D                     	;# 
  3525  080E                     	;# 
  3526  080F                     	;# 
  3527  0810                     	;# 
  3528  0811                     	;# 
  3529  0812                     	;# 
  3530  0813                     	;# 
  3531  0814                     	;# 
  3532  081A                     	;# 
  3533  081B                     	;# 
  3534  081C                     	;# 
  3535  081D                     	;# 
  3536  081E                     	;# 
  3537  081F                     	;# 
  3538  088C                     	;# 
  3539  088D                     	;# 
  3540  088E                     	;# 
  3541  088F                     	;# 
  3542  0890                     	;# 
  3543  0891                     	;# 
  3544  0892                     	;# 
  3545  0893                     	;# 
  3546  0895                     	;# 
  3547  0896                     	;# 
  3548  0897                     	;# 
  3549  0898                     	;# 
  3550  0899                     	;# 
  3551  089A                     	;# 
  3552  089B                     	;# 
  3553  090C                     	;# 
  3554  090E                     	;# 
  3555  090F                     	;# 
  3556  091F                     	;# 
  3557  091F                     	;# 
  3558  098F                     	;# 
  3559  098F                     	;# 
  3560  0990                     	;# 
  3561  0991                     	;# 
  3562  0992                     	;# 
  3563  0993                     	;# 
  3564  0994                     	;# 
  3565  0995                     	;# 
  3566  0996                     	;# 
  3567  0997                     	;# 
  3568  0E0F                     	;# 
  3569  0E10                     	;# 
  3570  0E11                     	;# 
  3571  0E12                     	;# 
  3572  0E13                     	;# 
  3573  0E14                     	;# 
  3574  0E15                     	;# 
  3575  0E16                     	;# 
  3576  0E17                     	;# 
  3577  0E18                     	;# 
  3578  0E19                     	;# 
  3579  0E1A                     	;# 
  3580  0E1B                     	;# 
  3581  0E1C                     	;# 
  3582  0E1D                     	;# 
  3583  0E1E                     	;# 
  3584  0E1F                     	;# 
  3585  0E20                     	;# 
  3586  0E21                     	;# 
  3587  0E22                     	;# 
  3588  0E23                     	;# 
  3589  0E24                     	;# 
  3590  0E25                     	;# 
  3591  0E26                     	;# 
  3592  0E27                     	;# 
  3593  0E28                     	;# 
  3594  0E29                     	;# 
  3595  0E2A                     	;# 
  3596  0E2B                     	;# 
  3597  0E2C                     	;# 
  3598  0E2D                     	;# 
  3599  0E2E                     	;# 
  3600  0E2F                     	;# 
  3601  0E30                     	;# 
  3602  0E31                     	;# 
  3603  0E32                     	;# 
  3604  0E33                     	;# 
  3605  0E34                     	;# 
  3606  0E35                     	;# 
  3607  0E36                     	;# 
  3608  0E37                     	;# 
  3609  0E8F                     	;# 
  3610  0E90                     	;# 
  3611  0E91                     	;# 
  3612  0E92                     	;# 
  3613  0E93                     	;# 
  3614  0E94                     	;# 
  3615  0E95                     	;# 
  3616  0E96                     	;# 
  3617  0E97                     	;# 
  3618  0E9C                     	;# 
  3619  0E9D                     	;# 
  3620  0E9E                     	;# 
  3621  0EA1                     	;# 
  3622  0EA2                     	;# 
  3623  0EA3                     	;# 
  3624  0EA4                     	;# 
  3625  0EA5                     	;# 
  3626  0EA9                     	;# 
  3627  0EAA                     	;# 
  3628  0EAB                     	;# 
  3629  0EAC                     	;# 
  3630  0EB1                     	;# 
  3631  0EB2                     	;# 
  3632  0EB3                     	;# 
  3633  0EB8                     	;# 
  3634  0EB9                     	;# 
  3635  0EBA                     	;# 
  3636  0EBB                     	;# 
  3637  0EBC                     	;# 
  3638  0EBD                     	;# 
  3639  0EBE                     	;# 
  3640  0EC3                     	;# 
  3641  0EC5                     	;# 
  3642  0EC6                     	;# 
  3643  0EC7                     	;# 
  3644  0EC8                     	;# 
  3645  0EC9                     	;# 
  3646  0ECA                     	;# 
  3647  0ECB                     	;# 
  3648  0ECC                     	;# 
  3649  0F10                     	;# 
  3650  0F11                     	;# 
  3651  0F12                     	;# 
  3652  0F13                     	;# 
  3653  0F14                     	;# 
  3654  0F15                     	;# 
  3655  0F16                     	;# 
  3656  0F17                     	;# 
  3657  0F18                     	;# 
  3658  0F19                     	;# 
  3659  0F1A                     	;# 
  3660  0F1B                     	;# 
  3661  0F1C                     	;# 
  3662  0F1D                     	;# 
  3663  0F1E                     	;# 
  3664  0F1F                     	;# 
  3665  0F20                     	;# 
  3666  0F21                     	;# 
  3667  0F22                     	;# 
  3668  0F23                     	;# 
  3669  0F24                     	;# 
  3670  0F25                     	;# 
  3671  0F26                     	;# 
  3672  0F27                     	;# 
  3673  0F38                     	;# 
  3674  0F39                     	;# 
  3675  0F3A                     	;# 
  3676  0F3B                     	;# 
  3677  0F3C                     	;# 
  3678  0F3D                     	;# 
  3679  0F3E                     	;# 
  3680  0F3F                     	;# 
  3681  0F40                     	;# 
  3682  0F41                     	;# 
  3683  0F43                     	;# 
  3684  0F44                     	;# 
  3685  0F45                     	;# 
  3686  0F46                     	;# 
  3687  0F47                     	;# 
  3688  0F48                     	;# 
  3689  0F49                     	;# 
  3690  0F4A                     	;# 
  3691  0F4B                     	;# 
  3692  0F4C                     	;# 
  3693  0F4E                     	;# 
  3694  0F4F                     	;# 
  3695  0F50                     	;# 
  3696  0F51                     	;# 
  3697  0F52                     	;# 
  3698  0F53                     	;# 
  3699  0F54                     	;# 
  3700  0F55                     	;# 
  3701  0F56                     	;# 
  3702  0F57                     	;# 
  3703  0F65                     	;# 
  3704  0F68                     	;# 
  3705  0F69                     	;# 
  3706  0F6A                     	;# 
  3707  0F6B                     	;# 
  3708  0FE4                     	;# 
  3709  0FE5                     	;# 
  3710  0FE6                     	;# 
  3711  0FE7                     	;# 
  3712  0FE8                     	;# 
  3713  0FE9                     	;# 
  3714  0FEA                     	;# 
  3715  0FEB                     	;# 
  3716  0FED                     	;# 
  3717  0FEE                     	;# 
  3718  0FEF                     	;# 
  3719  0000                     	;# 
  3720  0001                     	;# 
  3721  0002                     	;# 
  3722  0003                     	;# 
  3723  0004                     	;# 
  3724  0005                     	;# 
  3725  0006                     	;# 
  3726  0007                     	;# 
  3727  0008                     	;# 
  3728  0009                     	;# 
  3729  000A                     	;# 
  3730  000B                     	;# 
  3731  000C                     	;# 
  3732  000D                     	;# 
  3733  000E                     	;# 
  3734  0010                     	;# 
  3735  0011                     	;# 
  3736  0012                     	;# 
  3737  0013                     	;# 
  3738  0016                     	;# 
  3739  0017                     	;# 
  3740  0018                     	;# 
  3741  001C                     	;# 
  3742  001C                     	;# 
  3743  001D                     	;# 
  3744  001D                     	;# 
  3745  001E                     	;# 
  3746  001F                     	;# 
  3747  008C                     	;# 
  3748  008C                     	;# 
  3749  008D                     	;# 
  3750  008E                     	;# 
  3751  008E                     	;# 
  3752  008F                     	;# 
  3753  0090                     	;# 
  3754  0090                     	;# 
  3755  0091                     	;# 
  3756  0093                     	;# 
  3757  0094                     	;# 
  3758  0095                     	;# 
  3759  0096                     	;# 
  3760  0097                     	;# 
  3761  0098                     	;# 
  3762  0099                     	;# 
  3763  009A                     	;# 
  3764  009B                     	;# 
  3765  009C                     	;# 
  3766  009D                     	;# 
  3767  009E                     	;# 
  3768  010C                     	;# 
  3769  010D                     	;# 
  3770  010E                     	;# 
  3771  010E                     	;# 
  3772  010F                     	;# 
  3773  0110                     	;# 
  3774  0110                     	;# 
  3775  0111                     	;# 
  3776  0112                     	;# 
  3777  0112                     	;# 
  3778  0113                     	;# 
  3779  0114                     	;# 
  3780  0114                     	;# 
  3781  0115                     	;# 
  3782  0116                     	;# 
  3783  0116                     	;# 
  3784  0117                     	;# 
  3785  0119                     	;# 
  3786  0119                     	;# 
  3787  0119                     	;# 
  3788  011A                     	;# 
  3789  011A                     	;# 
  3790  011A                     	;# 
  3791  011B                     	;# 
  3792  011B                     	;# 
  3793  011B                     	;# 
  3794  011B                     	;# 
  3795  011B                     	;# 
  3796  011C                     	;# 
  3797  011C                     	;# 
  3798  011C                     	;# 
  3799  011D                     	;# 
  3800  011D                     	;# 
  3801  011D                     	;# 
  3802  011E                     	;# 
  3803  011E                     	;# 
  3804  011E                     	;# 
  3805  011F                     	;# 
  3806  011F                     	;# 
  3807  011F                     	;# 
  3808  011F                     	;# 
  3809  011F                     	;# 
  3810  018C                     	;# 
  3811  018D                     	;# 
  3812  018E                     	;# 
  3813  018F                     	;# 
  3814  0190                     	;# 
  3815  0191                     	;# 
  3816  0192                     	;# 
  3817  0196                     	;# 
  3818  0197                     	;# 
  3819  0198                     	;# 
  3820  0199                     	;# 
  3821  019A                     	;# 
  3822  019B                     	;# 
  3823  019C                     	;# 
  3824  020C                     	;# 
  3825  020C                     	;# 
  3826  020D                     	;# 
  3827  020E                     	;# 
  3828  020F                     	;# 
  3829  020F                     	;# 
  3830  0210                     	;# 
  3831  0210                     	;# 
  3832  0211                     	;# 
  3833  0211                     	;# 
  3834  0212                     	;# 
  3835  0212                     	;# 
  3836  0213                     	;# 
  3837  0214                     	;# 
  3838  0215                     	;# 
  3839  0215                     	;# 
  3840  0216                     	;# 
  3841  0216                     	;# 
  3842  0217                     	;# 
  3843  0217                     	;# 
  3844  0218                     	;# 
  3845  0218                     	;# 
  3846  0219                     	;# 
  3847  021A                     	;# 
  3848  021B                     	;# 
  3849  021B                     	;# 
  3850  021C                     	;# 
  3851  021C                     	;# 
  3852  021D                     	;# 
  3853  021D                     	;# 
  3854  021E                     	;# 
  3855  021F                     	;# 
  3856  028C                     	;# 
  3857  028C                     	;# 
  3858  028D                     	;# 
  3859  028D                     	;# 
  3860  028E                     	;# 
  3861  028F                     	;# 
  3862  0290                     	;# 
  3863  0290                     	;# 
  3864  0291                     	;# 
  3865  0292                     	;# 
  3866  0292                     	;# 
  3867  0293                     	;# 
  3868  0293                     	;# 
  3869  0294                     	;# 
  3870  0295                     	;# 
  3871  0296                     	;# 
  3872  0296                     	;# 
  3873  0297                     	;# 
  3874  0298                     	;# 
  3875  0298                     	;# 
  3876  0299                     	;# 
  3877  0299                     	;# 
  3878  029A                     	;# 
  3879  029B                     	;# 
  3880  029C                     	;# 
  3881  029C                     	;# 
  3882  029D                     	;# 
  3883  030C                     	;# 
  3884  030C                     	;# 
  3885  030D                     	;# 
  3886  030E                     	;# 
  3887  030F                     	;# 
  3888  0310                     	;# 
  3889  0310                     	;# 
  3890  0311                     	;# 
  3891  0312                     	;# 
  3892  0313                     	;# 
  3893  0314                     	;# 
  3894  0314                     	;# 
  3895  0315                     	;# 
  3896  0316                     	;# 
  3897  0317                     	;# 
  3898  0318                     	;# 
  3899  0318                     	;# 
  3900  0319                     	;# 
  3901  031A                     	;# 
  3902  031B                     	;# 
  3903  031C                     	;# 
  3904  031C                     	;# 
  3905  031D                     	;# 
  3906  031E                     	;# 
  3907  031F                     	;# 
  3908  038C                     	;# 
  3909  038D                     	;# 
  3910  038E                     	;# 
  3911  0390                     	;# 
  3912  0391                     	;# 
  3913  0392                     	;# 
  3914  040C                     	;# 
  3915  040D                     	;# 
  3916  040E                     	;# 
  3917  040F                     	;# 
  3918  0410                     	;# 
  3919  0411                     	;# 
  3920  0416                     	;# 
  3921  0416                     	;# 
  3922  0417                     	;# 
  3923  0418                     	;# 
  3924  0418                     	;# 
  3925  0419                     	;# 
  3926  041A                     	;# 
  3927  041A                     	;# 
  3928  041B                     	;# 
  3929  041C                     	;# 
  3930  041C                     	;# 
  3931  041D                     	;# 
  3932  041E                     	;# 
  3933  041F                     	;# 
  3934  048C                     	;# 
  3935  048C                     	;# 
  3936  048D                     	;# 
  3937  048E                     	;# 
  3938  048F                     	;# 
  3939  048F                     	;# 
  3940  0490                     	;# 
  3941  0491                     	;# 
  3942  0492                     	;# 
  3943  0492                     	;# 
  3944  0493                     	;# 
  3945  0494                     	;# 
  3946  0495                     	;# 
  3947  0495                     	;# 
  3948  0496                     	;# 
  3949  0497                     	;# 
  3950  0498                     	;# 
  3951  0499                     	;# 
  3952  049A                     	;# 
  3953  049B                     	;# 
  3954  049C                     	;# 
  3955  049D                     	;# 
  3956  050C                     	;# 
  3957  050C                     	;# 
  3958  050D                     	;# 
  3959  050E                     	;# 
  3960  050F                     	;# 
  3961  050F                     	;# 
  3962  0510                     	;# 
  3963  0511                     	;# 
  3964  0512                     	;# 
  3965  0512                     	;# 
  3966  0513                     	;# 
  3967  0514                     	;# 
  3968  0515                     	;# 
  3969  0515                     	;# 
  3970  0516                     	;# 
  3971  0517                     	;# 
  3972  0518                     	;# 
  3973  0519                     	;# 
  3974  051A                     	;# 
  3975  051B                     	;# 
  3976  051C                     	;# 
  3977  051D                     	;# 
  3978  058C                     	;# 
  3979  058C                     	;# 
  3980  058D                     	;# 
  3981  058E                     	;# 
  3982  058F                     	;# 
  3983  058F                     	;# 
  3984  0590                     	;# 
  3985  0591                     	;# 
  3986  0592                     	;# 
  3987  0593                     	;# 
  3988  060C                     	;# 
  3989  060D                     	;# 
  3990  060E                     	;# 
  3991  060F                     	;# 
  3992  0610                     	;# 
  3993  0611                     	;# 
  3994  0612                     	;# 
  3995  0613                     	;# 
  3996  0614                     	;# 
  3997  0616                     	;# 
  3998  0617                     	;# 
  3999  0618                     	;# 
  4000  0619                     	;# 
  4001  061A                     	;# 
  4002  061B                     	;# 
  4003  061C                     	;# 
  4004  061D                     	;# 
  4005  061E                     	;# 
  4006  068C                     	;# 
  4007  068D                     	;# 
  4008  068E                     	;# 
  4009  068F                     	;# 
  4010  0690                     	;# 
  4011  0691                     	;# 
  4012  0692                     	;# 
  4013  0693                     	;# 
  4014  0694                     	;# 
  4015  070C                     	;# 
  4016  070D                     	;# 
  4017  070E                     	;# 
  4018  070F                     	;# 
  4019  0710                     	;# 
  4020  0711                     	;# 
  4021  0712                     	;# 
  4022  0713                     	;# 
  4023  0714                     	;# 
  4024  0716                     	;# 
  4025  0717                     	;# 
  4026  0718                     	;# 
  4027  0719                     	;# 
  4028  071A                     	;# 
  4029  071B                     	;# 
  4030  071C                     	;# 
  4031  071D                     	;# 
  4032  071E                     	;# 
  4033  0796                     	;# 
  4034  0797                     	;# 
  4035  0798                     	;# 
  4036  0799                     	;# 
  4037  079A                     	;# 
  4038  079B                     	;# 
  4039  080C                     	;# 
  4040  080D                     	;# 
  4041  080E                     	;# 
  4042  080F                     	;# 
  4043  0810                     	;# 
  4044  0811                     	;# 
  4045  0812                     	;# 
  4046  0813                     	;# 
  4047  0814                     	;# 
  4048  081A                     	;# 
  4049  081B                     	;# 
  4050  081C                     	;# 
  4051  081D                     	;# 
  4052  081E                     	;# 
  4053  081F                     	;# 
  4054  088C                     	;# 
  4055  088D                     	;# 
  4056  088E                     	;# 
  4057  088F                     	;# 
  4058  0890                     	;# 
  4059  0891                     	;# 
  4060  0892                     	;# 
  4061  0893                     	;# 
  4062  0895                     	;# 
  4063  0896                     	;# 
  4064  0897                     	;# 
  4065  0898                     	;# 
  4066  0899                     	;# 
  4067  089A                     	;# 
  4068  089B                     	;# 
  4069  090C                     	;# 
  4070  090E                     	;# 
  4071  090F                     	;# 
  4072  091F                     	;# 
  4073  091F                     	;# 
  4074  098F                     	;# 
  4075  098F                     	;# 
  4076  0990                     	;# 
  4077  0991                     	;# 
  4078  0992                     	;# 
  4079  0993                     	;# 
  4080  0994                     	;# 
  4081  0995                     	;# 
  4082  0996                     	;# 
  4083  0997                     	;# 
  4084  0E0F                     	;# 
  4085  0E10                     	;# 
  4086  0E11                     	;# 
  4087  0E12                     	;# 
  4088  0E13                     	;# 
  4089  0E14                     	;# 
  4090  0E15                     	;# 
  4091  0E16                     	;# 
  4092  0E17                     	;# 
  4093  0E18                     	;# 
  4094  0E19                     	;# 
  4095  0E1A                     	;# 
  4096  0E1B                     	;# 
  4097  0E1C                     	;# 
  4098  0E1D                     	;# 
  4099  0E1E                     	;# 
  4100  0E1F                     	;# 
  4101  0E20                     	;# 
  4102  0E21                     	;# 
  4103  0E22                     	;# 
  4104  0E23                     	;# 
  4105  0E24                     	;# 
  4106  0E25                     	;# 
  4107  0E26                     	;# 
  4108  0E27                     	;# 
  4109  0E28                     	;# 
  4110  0E29                     	;# 
  4111  0E2A                     	;# 
  4112  0E2B                     	;# 
  4113  0E2C                     	;# 
  4114  0E2D                     	;# 
  4115  0E2E                     	;# 
  4116  0E2F                     	;# 
  4117  0E30                     	;# 
  4118  0E31                     	;# 
  4119  0E32                     	;# 
  4120  0E33                     	;# 
  4121  0E34                     	;# 
  4122  0E35                     	;# 
  4123  0E36                     	;# 
  4124  0E37                     	;# 
  4125  0E8F                     	;# 
  4126  0E90                     	;# 
  4127  0E91                     	;# 
  4128  0E92                     	;# 
  4129  0E93                     	;# 
  4130  0E94                     	;# 
  4131  0E95                     	;# 
  4132  0E96                     	;# 
  4133  0E97                     	;# 
  4134  0E9C                     	;# 
  4135  0E9D                     	;# 
  4136  0E9E                     	;# 
  4137  0EA1                     	;# 
  4138  0EA2                     	;# 
  4139  0EA3                     	;# 
  4140  0EA4                     	;# 
  4141  0EA5                     	;# 
  4142  0EA9                     	;# 
  4143  0EAA                     	;# 
  4144  0EAB                     	;# 
  4145  0EAC                     	;# 
  4146  0EB1                     	;# 
  4147  0EB2                     	;# 
  4148  0EB3                     	;# 
  4149  0EB8                     	;# 
  4150  0EB9                     	;# 
  4151  0EBA                     	;# 
  4152  0EBB                     	;# 
  4153  0EBC                     	;# 
  4154  0EBD                     	;# 
  4155  0EBE                     	;# 
  4156  0EC3                     	;# 
  4157  0EC5                     	;# 
  4158  0EC6                     	;# 
  4159  0EC7                     	;# 
  4160  0EC8                     	;# 
  4161  0EC9                     	;# 
  4162  0ECA                     	;# 
  4163  0ECB                     	;# 
  4164  0ECC                     	;# 
  4165  0F10                     	;# 
  4166  0F11                     	;# 
  4167  0F12                     	;# 
  4168  0F13                     	;# 
  4169  0F14                     	;# 
  4170  0F15                     	;# 
  4171  0F16                     	;# 
  4172  0F17                     	;# 
  4173  0F18                     	;# 
  4174  0F19                     	;# 
  4175  0F1A                     	;# 
  4176  0F1B                     	;# 
  4177  0F1C                     	;# 
  4178  0F1D                     	;# 
  4179  0F1E                     	;# 
  4180  0F1F                     	;# 
  4181  0F20                     	;# 
  4182  0F21                     	;# 
  4183  0F22                     	;# 
  4184  0F23                     	;# 
  4185  0F24                     	;# 
  4186  0F25                     	;# 
  4187  0F26                     	;# 
  4188  0F27                     	;# 
  4189  0F38                     	;# 
  4190  0F39                     	;# 
  4191  0F3A                     	;# 
  4192  0F3B                     	;# 
  4193  0F3C                     	;# 
  4194  0F3D                     	;# 
  4195  0F3E                     	;# 
  4196  0F3F                     	;# 
  4197  0F40                     	;# 
  4198  0F41                     	;# 
  4199  0F43                     	;# 
  4200  0F44                     	;# 
  4201  0F45                     	;# 
  4202  0F46                     	;# 
  4203  0F47                     	;# 
  4204  0F48                     	;# 
  4205  0F49                     	;# 
  4206  0F4A                     	;# 
  4207  0F4B                     	;# 
  4208  0F4C                     	;# 
  4209  0F4E                     	;# 
  4210  0F4F                     	;# 
  4211  0F50                     	;# 
  4212  0F51                     	;# 
  4213  0F52                     	;# 
  4214  0F53                     	;# 
  4215  0F54                     	;# 
  4216  0F55                     	;# 
  4217  0F56                     	;# 
  4218  0F57                     	;# 
  4219  0F65                     	;# 
  4220  0F68                     	;# 
  4221  0F69                     	;# 
  4222  0F6A                     	;# 
  4223  0F6B                     	;# 
  4224  0FE4                     	;# 
  4225  0FE5                     	;# 
  4226  0FE6                     	;# 
  4227  0FE7                     	;# 
  4228  0FE8                     	;# 
  4229  0FE9                     	;# 
  4230  0FEA                     	;# 
  4231  0FEB                     	;# 
  4232  0FED                     	;# 
  4233  0FEE                     	;# 
  4234  0FEF                     	;# 
  4235  0000                     	;# 
  4236  0001                     	;# 
  4237  0002                     	;# 
  4238  0003                     	;# 
  4239  0004                     	;# 
  4240  0005                     	;# 
  4241  0006                     	;# 
  4242  0007                     	;# 
  4243  0008                     	;# 
  4244  0009                     	;# 
  4245  000A                     	;# 
  4246  000B                     	;# 
  4247  000C                     	;# 
  4248  000D                     	;# 
  4249  000E                     	;# 
  4250  0010                     	;# 
  4251  0011                     	;# 
  4252  0012                     	;# 
  4253  0013                     	;# 
  4254  0016                     	;# 
  4255  0017                     	;# 
  4256  0018                     	;# 
  4257  001C                     	;# 
  4258  001C                     	;# 
  4259  001D                     	;# 
  4260  001D                     	;# 
  4261  001E                     	;# 
  4262  001F                     	;# 
  4263  008C                     	;# 
  4264  008C                     	;# 
  4265  008D                     	;# 
  4266  008E                     	;# 
  4267  008E                     	;# 
  4268  008F                     	;# 
  4269  0090                     	;# 
  4270  0090                     	;# 
  4271  0091                     	;# 
  4272  0093                     	;# 
  4273  0094                     	;# 
  4274  0095                     	;# 
  4275  0096                     	;# 
  4276  0097                     	;# 
  4277  0098                     	;# 
  4278  0099                     	;# 
  4279  009A                     	;# 
  4280  009B                     	;# 
  4281  009C                     	;# 
  4282  009D                     	;# 
  4283  009E                     	;# 
  4284  010C                     	;# 
  4285  010D                     	;# 
  4286  010E                     	;# 
  4287  010E                     	;# 
  4288  010F                     	;# 
  4289  0110                     	;# 
  4290  0110                     	;# 
  4291  0111                     	;# 
  4292  0112                     	;# 
  4293  0112                     	;# 
  4294  0113                     	;# 
  4295  0114                     	;# 
  4296  0114                     	;# 
  4297  0115                     	;# 
  4298  0116                     	;# 
  4299  0116                     	;# 
  4300  0117                     	;# 
  4301  0119                     	;# 
  4302  0119                     	;# 
  4303  0119                     	;# 
  4304  011A                     	;# 
  4305  011A                     	;# 
  4306  011A                     	;# 
  4307  011B                     	;# 
  4308  011B                     	;# 
  4309  011B                     	;# 
  4310  011B                     	;# 
  4311  011B                     	;# 
  4312  011C                     	;# 
  4313  011C                     	;# 
  4314  011C                     	;# 
  4315  011D                     	;# 
  4316  011D                     	;# 
  4317  011D                     	;# 
  4318  011E                     	;# 
  4319  011E                     	;# 
  4320  011E                     	;# 
  4321  011F                     	;# 
  4322  011F                     	;# 
  4323  011F                     	;# 
  4324  011F                     	;# 
  4325  011F                     	;# 
  4326  018C                     	;# 
  4327  018D                     	;# 
  4328  018E                     	;# 
  4329  018F                     	;# 
  4330  0190                     	;# 
  4331  0191                     	;# 
  4332  0192                     	;# 
  4333  0196                     	;# 
  4334  0197                     	;# 
  4335  0198                     	;# 
  4336  0199                     	;# 
  4337  019A                     	;# 
  4338  019B                     	;# 
  4339  019C                     	;# 
  4340  020C                     	;# 
  4341  020C                     	;# 
  4342  020D                     	;# 
  4343  020E                     	;# 
  4344  020F                     	;# 
  4345  020F                     	;# 
  4346  0210                     	;# 
  4347  0210                     	;# 
  4348  0211                     	;# 
  4349  0211                     	;# 
  4350  0212                     	;# 
  4351  0212                     	;# 
  4352  0213                     	;# 
  4353  0214                     	;# 
  4354  0215                     	;# 
  4355  0215                     	;# 
  4356  0216                     	;# 
  4357  0216                     	;# 
  4358  0217                     	;# 
  4359  0217                     	;# 
  4360  0218                     	;# 
  4361  0218                     	;# 
  4362  0219                     	;# 
  4363  021A                     	;# 
  4364  021B                     	;# 
  4365  021B                     	;# 
  4366  021C                     	;# 
  4367  021C                     	;# 
  4368  021D                     	;# 
  4369  021D                     	;# 
  4370  021E                     	;# 
  4371  021F                     	;# 
  4372  028C                     	;# 
  4373  028C                     	;# 
  4374  028D                     	;# 
  4375  028D                     	;# 
  4376  028E                     	;# 
  4377  028F                     	;# 
  4378  0290                     	;# 
  4379  0290                     	;# 
  4380  0291                     	;# 
  4381  0292                     	;# 
  4382  0292                     	;# 
  4383  0293                     	;# 
  4384  0293                     	;# 
  4385  0294                     	;# 
  4386  0295                     	;# 
  4387  0296                     	;# 
  4388  0296                     	;# 
  4389  0297                     	;# 
  4390  0298                     	;# 
  4391  0298                     	;# 
  4392  0299                     	;# 
  4393  0299                     	;# 
  4394  029A                     	;# 
  4395  029B                     	;# 
  4396  029C                     	;# 
  4397  029C                     	;# 
  4398  029D                     	;# 
  4399  030C                     	;# 
  4400  030C                     	;# 
  4401  030D                     	;# 
  4402  030E                     	;# 
  4403  030F                     	;# 
  4404  0310                     	;# 
  4405  0310                     	;# 
  4406  0311                     	;# 
  4407  0312                     	;# 
  4408  0313                     	;# 
  4409  0314                     	;# 
  4410  0314                     	;# 
  4411  0315                     	;# 
  4412  0316                     	;# 
  4413  0317                     	;# 
  4414  0318                     	;# 
  4415  0318                     	;# 
  4416  0319                     	;# 
  4417  031A                     	;# 
  4418  031B                     	;# 
  4419  031C                     	;# 
  4420  031C                     	;# 
  4421  031D                     	;# 
  4422  031E                     	;# 
  4423  031F                     	;# 
  4424  038C                     	;# 
  4425  038D                     	;# 
  4426  038E                     	;# 
  4427  0390                     	;# 
  4428  0391                     	;# 
  4429  0392                     	;# 
  4430  040C                     	;# 
  4431  040D                     	;# 
  4432  040E                     	;# 
  4433  040F                     	;# 
  4434  0410                     	;# 
  4435  0411                     	;# 
  4436  0416                     	;# 
  4437  0416                     	;# 
  4438  0417                     	;# 
  4439  0418                     	;# 
  4440  0418                     	;# 
  4441  0419                     	;# 
  4442  041A                     	;# 
  4443  041A                     	;# 
  4444  041B                     	;# 
  4445  041C                     	;# 
  4446  041C                     	;# 
  4447  041D                     	;# 
  4448  041E                     	;# 
  4449  041F                     	;# 
  4450  048C                     	;# 
  4451  048C                     	;# 
  4452  048D                     	;# 
  4453  048E                     	;# 
  4454  048F                     	;# 
  4455  048F                     	;# 
  4456  0490                     	;# 
  4457  0491                     	;# 
  4458  0492                     	;# 
  4459  0492                     	;# 
  4460  0493                     	;# 
  4461  0494                     	;# 
  4462  0495                     	;# 
  4463  0495                     	;# 
  4464  0496                     	;# 
  4465  0497                     	;# 
  4466  0498                     	;# 
  4467  0499                     	;# 
  4468  049A                     	;# 
  4469  049B                     	;# 
  4470  049C                     	;# 
  4471  049D                     	;# 
  4472  050C                     	;# 
  4473  050C                     	;# 
  4474  050D                     	;# 
  4475  050E                     	;# 
  4476  050F                     	;# 
  4477  050F                     	;# 
  4478  0510                     	;# 
  4479  0511                     	;# 
  4480  0512                     	;# 
  4481  0512                     	;# 
  4482  0513                     	;# 
  4483  0514                     	;# 
  4484  0515                     	;# 
  4485  0515                     	;# 
  4486  0516                     	;# 
  4487  0517                     	;# 
  4488  0518                     	;# 
  4489  0519                     	;# 
  4490  051A                     	;# 
  4491  051B                     	;# 
  4492  051C                     	;# 
  4493  051D                     	;# 
  4494  058C                     	;# 
  4495  058C                     	;# 
  4496  058D                     	;# 
  4497  058E                     	;# 
  4498  058F                     	;# 
  4499  058F                     	;# 
  4500  0590                     	;# 
  4501  0591                     	;# 
  4502  0592                     	;# 
  4503  0593                     	;# 
  4504  060C                     	;# 
  4505  060D                     	;# 
  4506  060E                     	;# 
  4507  060F                     	;# 
  4508  0610                     	;# 
  4509  0611                     	;# 
  4510  0612                     	;# 
  4511  0613                     	;# 
  4512  0614                     	;# 
  4513  0616                     	;# 
  4514  0617                     	;# 
  4515  0618                     	;# 
  4516  0619                     	;# 
  4517  061A                     	;# 
  4518  061B                     	;# 
  4519  061C                     	;# 
  4520  061D                     	;# 
  4521  061E                     	;# 
  4522  068C                     	;# 
  4523  068D                     	;# 
  4524  068E                     	;# 
  4525  068F                     	;# 
  4526  0690                     	;# 
  4527  0691                     	;# 
  4528  0692                     	;# 
  4529  0693                     	;# 
  4530  0694                     	;# 
  4531  070C                     	;# 
  4532  070D                     	;# 
  4533  070E                     	;# 
  4534  070F                     	;# 
  4535  0710                     	;# 
  4536  0711                     	;# 
  4537  0712                     	;# 
  4538  0713                     	;# 
  4539  0714                     	;# 
  4540  0716                     	;# 
  4541  0717                     	;# 
  4542  0718                     	;# 
  4543  0719                     	;# 
  4544  071A                     	;# 
  4545  071B                     	;# 
  4546  071C                     	;# 
  4547  071D                     	;# 
  4548  071E                     	;# 
  4549  0796                     	;# 
  4550  0797                     	;# 
  4551  0798                     	;# 
  4552  0799                     	;# 
  4553  079A                     	;# 
  4554  079B                     	;# 
  4555  080C                     	;# 
  4556  080D                     	;# 
  4557  080E                     	;# 
  4558  080F                     	;# 
  4559  0810                     	;# 
  4560  0811                     	;# 
  4561  0812                     	;# 
  4562  0813                     	;# 
  4563  0814                     	;# 
  4564  081A                     	;# 
  4565  081B                     	;# 
  4566  081C                     	;# 
  4567  081D                     	;# 
  4568  081E                     	;# 
  4569  081F                     	;# 
  4570  088C                     	;# 
  4571  088D                     	;# 
  4572  088E                     	;# 
  4573  088F                     	;# 
  4574  0890                     	;# 
  4575  0891                     	;# 
  4576  0892                     	;# 
  4577  0893                     	;# 
  4578  0895                     	;# 
  4579  0896                     	;# 
  4580  0897                     	;# 
  4581  0898                     	;# 
  4582  0899                     	;# 
  4583  089A                     	;# 
  4584  089B                     	;# 
  4585  090C                     	;# 
  4586  090E                     	;# 
  4587  090F                     	;# 
  4588  091F                     	;# 
  4589  091F                     	;# 
  4590  098F                     	;# 
  4591  098F                     	;# 
  4592  0990                     	;# 
  4593  0991                     	;# 
  4594  0992                     	;# 
  4595  0993                     	;# 
  4596  0994                     	;# 
  4597  0995                     	;# 
  4598  0996                     	;# 
  4599  0997                     	;# 
  4600  0E0F                     	;# 
  4601  0E10                     	;# 
  4602  0E11                     	;# 
  4603  0E12                     	;# 
  4604  0E13                     	;# 
  4605  0E14                     	;# 
  4606  0E15                     	;# 
  4607  0E16                     	;# 
  4608  0E17                     	;# 
  4609  0E18                     	;# 
  4610  0E19                     	;# 
  4611  0E1A                     	;# 
  4612  0E1B                     	;# 
  4613  0E1C                     	;# 
  4614  0E1D                     	;# 
  4615  0E1E                     	;# 
  4616  0E1F                     	;# 
  4617  0E20                     	;# 
  4618  0E21                     	;# 
  4619  0E22                     	;# 
  4620  0E23                     	;# 
  4621  0E24                     	;# 
  4622  0E25                     	;# 
  4623  0E26                     	;# 
  4624  0E27                     	;# 
  4625  0E28                     	;# 
  4626  0E29                     	;# 
  4627  0E2A                     	;# 
  4628  0E2B                     	;# 
  4629  0E2C                     	;# 
  4630  0E2D                     	;# 
  4631  0E2E                     	;# 
  4632  0E2F                     	;# 
  4633  0E30                     	;# 
  4634  0E31                     	;# 
  4635  0E32                     	;# 
  4636  0E33                     	;# 
  4637  0E34                     	;# 
  4638  0E35                     	;# 
  4639  0E36                     	;# 
  4640  0E37                     	;# 
  4641  0E8F                     	;# 
  4642  0E90                     	;# 
  4643  0E91                     	;# 
  4644  0E92                     	;# 
  4645  0E93                     	;# 
  4646  0E94                     	;# 
  4647  0E95                     	;# 
  4648  0E96                     	;# 
  4649  0E97                     	;# 
  4650  0E9C                     	;# 
  4651  0E9D                     	;# 
  4652  0E9E                     	;# 
  4653  0EA1                     	;# 
  4654  0EA2                     	;# 
  4655  0EA3                     	;# 
  4656  0EA4                     	;# 
  4657  0EA5                     	;# 
  4658  0EA9                     	;# 
  4659  0EAA                     	;# 
  4660  0EAB                     	;# 
  4661  0EAC                     	;# 
  4662  0EB1                     	;# 
  4663  0EB2                     	;# 
  4664  0EB3                     	;# 
  4665  0EB8                     	;# 
  4666  0EB9                     	;# 
  4667  0EBA                     	;# 
  4668  0EBB                     	;# 
  4669  0EBC                     	;# 
  4670  0EBD                     	;# 
  4671  0EBE                     	;# 
  4672  0EC3                     	;# 
  4673  0EC5                     	;# 
  4674  0EC6                     	;# 
  4675  0EC7                     	;# 
  4676  0EC8                     	;# 
  4677  0EC9                     	;# 
  4678  0ECA                     	;# 
  4679  0ECB                     	;# 
  4680  0ECC                     	;# 
  4681  0F10                     	;# 
  4682  0F11                     	;# 
  4683  0F12                     	;# 
  4684  0F13                     	;# 
  4685  0F14                     	;# 
  4686  0F15                     	;# 
  4687  0F16                     	;# 
  4688  0F17                     	;# 
  4689  0F18                     	;# 
  4690  0F19                     	;# 
  4691  0F1A                     	;# 
  4692  0F1B                     	;# 
  4693  0F1C                     	;# 
  4694  0F1D                     	;# 
  4695  0F1E                     	;# 
  4696  0F1F                     	;# 
  4697  0F20                     	;# 
  4698  0F21                     	;# 
  4699  0F22                     	;# 
  4700  0F23                     	;# 
  4701  0F24                     	;# 
  4702  0F25                     	;# 
  4703  0F26                     	;# 
  4704  0F27                     	;# 
  4705  0F38                     	;# 
  4706  0F39                     	;# 
  4707  0F3A                     	;# 
  4708  0F3B                     	;# 
  4709  0F3C                     	;# 
  4710  0F3D                     	;# 
  4711  0F3E                     	;# 
  4712  0F3F                     	;# 
  4713  0F40                     	;# 
  4714  0F41                     	;# 
  4715  0F43                     	;# 
  4716  0F44                     	;# 
  4717  0F45                     	;# 
  4718  0F46                     	;# 
  4719  0F47                     	;# 
  4720  0F48                     	;# 
  4721  0F49                     	;# 
  4722  0F4A                     	;# 
  4723  0F4B                     	;# 
  4724  0F4C                     	;# 
  4725  0F4E                     	;# 
  4726  0F4F                     	;# 
  4727  0F50                     	;# 
  4728  0F51                     	;# 
  4729  0F52                     	;# 
  4730  0F53                     	;# 
  4731  0F54                     	;# 
  4732  0F55                     	;# 
  4733  0F56                     	;# 
  4734  0F57                     	;# 
  4735  0F65                     	;# 
  4736  0F68                     	;# 
  4737  0F69                     	;# 
  4738  0F6A                     	;# 
  4739  0F6B                     	;# 
  4740  0FE4                     	;# 
  4741  0FE5                     	;# 
  4742  0FE6                     	;# 
  4743  0FE7                     	;# 
  4744  0FE8                     	;# 
  4745  0FE9                     	;# 
  4746  0FEA                     	;# 
  4747  0FEB                     	;# 
  4748  0FED                     	;# 
  4749  0FEE                     	;# 
  4750  0FEF                     	;# 
  4751  0000                     	;# 
  4752  0001                     	;# 
  4753  0002                     	;# 
  4754  0003                     	;# 
  4755  0004                     	;# 
  4756  0005                     	;# 
  4757  0006                     	;# 
  4758  0007                     	;# 
  4759  0008                     	;# 
  4760  0009                     	;# 
  4761  000A                     	;# 
  4762  000B                     	;# 
  4763  000C                     	;# 
  4764  000D                     	;# 
  4765  000E                     	;# 
  4766  0010                     	;# 
  4767  0011                     	;# 
  4768  0012                     	;# 
  4769  0013                     	;# 
  4770  0016                     	;# 
  4771  0017                     	;# 
  4772  0018                     	;# 
  4773  001C                     	;# 
  4774  001C                     	;# 
  4775  001D                     	;# 
  4776  001D                     	;# 
  4777  001E                     	;# 
  4778  001F                     	;# 
  4779  008C                     	;# 
  4780  008C                     	;# 
  4781  008D                     	;# 
  4782  008E                     	;# 
  4783  008E                     	;# 
  4784  008F                     	;# 
  4785  0090                     	;# 
  4786  0090                     	;# 
  4787  0091                     	;# 
  4788  0093                     	;# 
  4789  0094                     	;# 
  4790  0095                     	;# 
  4791  0096                     	;# 
  4792  0097                     	;# 
  4793  0098                     	;# 
  4794  0099                     	;# 
  4795  009A                     	;# 
  4796  009B                     	;# 
  4797  009C                     	;# 
  4798  009D                     	;# 
  4799  009E                     	;# 
  4800  010C                     	;# 
  4801  010D                     	;# 
  4802  010E                     	;# 
  4803  010E                     	;# 
  4804  010F                     	;# 
  4805  0110                     	;# 
  4806  0110                     	;# 
  4807  0111                     	;# 
  4808  0112                     	;# 
  4809  0112                     	;# 
  4810  0113                     	;# 
  4811  0114                     	;# 
  4812  0114                     	;# 
  4813  0115                     	;# 
  4814  0116                     	;# 
  4815  0116                     	;# 
  4816  0117                     	;# 
  4817  0119                     	;# 
  4818  0119                     	;# 
  4819  0119                     	;# 
  4820  011A                     	;# 
  4821  011A                     	;# 
  4822  011A                     	;# 
  4823  011B                     	;# 
  4824  011B                     	;# 
  4825  011B                     	;# 
  4826  011B                     	;# 
  4827  011B                     	;# 
  4828  011C                     	;# 
  4829  011C                     	;# 
  4830  011C                     	;# 
  4831  011D                     	;# 
  4832  011D                     	;# 
  4833  011D                     	;# 
  4834  011E                     	;# 
  4835  011E                     	;# 
  4836  011E                     	;# 
  4837  011F                     	;# 
  4838  011F                     	;# 
  4839  011F                     	;# 
  4840  011F                     	;# 
  4841  011F                     	;# 
  4842  018C                     	;# 
  4843  018D                     	;# 
  4844  018E                     	;# 
  4845  018F                     	;# 
  4846  0190                     	;# 
  4847  0191                     	;# 
  4848  0192                     	;# 
  4849  0196                     	;# 
  4850  0197                     	;# 
  4851  0198                     	;# 
  4852  0199                     	;# 
  4853  019A                     	;# 
  4854  019B                     	;# 
  4855  019C                     	;# 
  4856  020C                     	;# 
  4857  020C                     	;# 
  4858  020D                     	;# 
  4859  020E                     	;# 
  4860  020F                     	;# 
  4861  020F                     	;# 
  4862  0210                     	;# 
  4863  0210                     	;# 
  4864  0211                     	;# 
  4865  0211                     	;# 
  4866  0212                     	;# 
  4867  0212                     	;# 
  4868  0213                     	;# 
  4869  0214                     	;# 
  4870  0215                     	;# 
  4871  0215                     	;# 
  4872  0216                     	;# 
  4873  0216                     	;# 
  4874  0217                     	;# 
  4875  0217                     	;# 
  4876  0218                     	;# 
  4877  0218                     	;# 
  4878  0219                     	;# 
  4879  021A                     	;# 
  4880  021B                     	;# 
  4881  021B                     	;# 
  4882  021C                     	;# 
  4883  021C                     	;# 
  4884  021D                     	;# 
  4885  021D                     	;# 
  4886  021E                     	;# 
  4887  021F                     	;# 
  4888  028C                     	;# 
  4889  028C                     	;# 
  4890  028D                     	;# 
  4891  028D                     	;# 
  4892  028E                     	;# 
  4893  028F                     	;# 
  4894  0290                     	;# 
  4895  0290                     	;# 
  4896  0291                     	;# 
  4897  0292                     	;# 
  4898  0292                     	;# 
  4899  0293                     	;# 
  4900  0293                     	;# 
  4901  0294                     	;# 
  4902  0295                     	;# 
  4903  0296                     	;# 
  4904  0296                     	;# 
  4905  0297                     	;# 
  4906  0298                     	;# 
  4907  0298                     	;# 
  4908  0299                     	;# 
  4909  0299                     	;# 
  4910  029A                     	;# 
  4911  029B                     	;# 
  4912  029C                     	;# 
  4913  029C                     	;# 
  4914  029D                     	;# 
  4915  030C                     	;# 
  4916  030C                     	;# 
  4917  030D                     	;# 
  4918  030E                     	;# 
  4919  030F                     	;# 
  4920  0310                     	;# 
  4921  0310                     	;# 
  4922  0311                     	;# 
  4923  0312                     	;# 
  4924  0313                     	;# 
  4925  0314                     	;# 
  4926  0314                     	;# 
  4927  0315                     	;# 
  4928  0316                     	;# 
  4929  0317                     	;# 
  4930  0318                     	;# 
  4931  0318                     	;# 
  4932  0319                     	;# 
  4933  031A                     	;# 
  4934  031B                     	;# 
  4935  031C                     	;# 
  4936  031C                     	;# 
  4937  031D                     	;# 
  4938  031E                     	;# 
  4939  031F                     	;# 
  4940  038C                     	;# 
  4941  038D                     	;# 
  4942  038E                     	;# 
  4943  0390                     	;# 
  4944  0391                     	;# 
  4945  0392                     	;# 
  4946  040C                     	;# 
  4947  040D                     	;# 
  4948  040E                     	;# 
  4949  040F                     	;# 
  4950  0410                     	;# 
  4951  0411                     	;# 
  4952  0416                     	;# 
  4953  0416                     	;# 
  4954  0417                     	;# 
  4955  0418                     	;# 
  4956  0418                     	;# 
  4957  0419                     	;# 
  4958  041A                     	;# 
  4959  041A                     	;# 
  4960  041B                     	;# 
  4961  041C                     	;# 
  4962  041C                     	;# 
  4963  041D                     	;# 
  4964  041E                     	;# 
  4965  041F                     	;# 
  4966  048C                     	;# 
  4967  048C                     	;# 
  4968  048D                     	;# 
  4969  048E                     	;# 
  4970  048F                     	;# 
  4971  048F                     	;# 
  4972  0490                     	;# 
  4973  0491                     	;# 
  4974  0492                     	;# 
  4975  0492                     	;# 
  4976  0493                     	;# 
  4977  0494                     	;# 
  4978  0495                     	;# 
  4979  0495                     	;# 
  4980  0496                     	;# 
  4981  0497                     	;# 
  4982  0498                     	;# 
  4983  0499                     	;# 
  4984  049A                     	;# 
  4985  049B                     	;# 
  4986  049C                     	;# 
  4987  049D                     	;# 
  4988  050C                     	;# 
  4989  050C                     	;# 
  4990  050D                     	;# 
  4991  050E                     	;# 
  4992  050F                     	;# 
  4993  050F                     	;# 
  4994  0510                     	;# 
  4995  0511                     	;# 
  4996  0512                     	;# 
  4997  0512                     	;# 
  4998  0513                     	;# 
  4999  0514                     	;# 
  5000  0515                     	;# 
  5001  0515                     	;# 
  5002  0516                     	;# 
  5003  0517                     	;# 
  5004  0518                     	;# 
  5005  0519                     	;# 
  5006  051A                     	;# 
  5007  051B                     	;# 
  5008  051C                     	;# 
  5009  051D                     	;# 
  5010  058C                     	;# 
  5011  058C                     	;# 
  5012  058D                     	;# 
  5013  058E                     	;# 
  5014  058F                     	;# 
  5015  058F                     	;# 
  5016  0590                     	;# 
  5017  0591                     	;# 
  5018  0592                     	;# 
  5019  0593                     	;# 
  5020  060C                     	;# 
  5021  060D                     	;# 
  5022  060E                     	;# 
  5023  060F                     	;# 
  5024  0610                     	;# 
  5025  0611                     	;# 
  5026  0612                     	;# 
  5027  0613                     	;# 
  5028  0614                     	;# 
  5029  0616                     	;# 
  5030  0617                     	;# 
  5031  0618                     	;# 
  5032  0619                     	;# 
  5033  061A                     	;# 
  5034  061B                     	;# 
  5035  061C                     	;# 
  5036  061D                     	;# 
  5037  061E                     	;# 
  5038  068C                     	;# 
  5039  068D                     	;# 
  5040  068E                     	;# 
  5041  068F                     	;# 
  5042  0690                     	;# 
  5043  0691                     	;# 
  5044  0692                     	;# 
  5045  0693                     	;# 
  5046  0694                     	;# 
  5047  070C                     	;# 
  5048  070D                     	;# 
  5049  070E                     	;# 
  5050  070F                     	;# 
  5051  0710                     	;# 
  5052  0711                     	;# 
  5053  0712                     	;# 
  5054  0713                     	;# 
  5055  0714                     	;# 
  5056  0716                     	;# 
  5057  0717                     	;# 
  5058  0718                     	;# 
  5059  0719                     	;# 
  5060  071A                     	;# 
  5061  071B                     	;# 
  5062  071C                     	;# 
  5063  071D                     	;# 
  5064  071E                     	;# 
  5065  0796                     	;# 
  5066  0797                     	;# 
  5067  0798                     	;# 
  5068  0799                     	;# 
  5069  079A                     	;# 
  5070  079B                     	;# 
  5071  080C                     	;# 
  5072  080D                     	;# 
  5073  080E                     	;# 
  5074  080F                     	;# 
  5075  0810                     	;# 
  5076  0811                     	;# 
  5077  0812                     	;# 
  5078  0813                     	;# 
  5079  0814                     	;# 
  5080  081A                     	;# 
  5081  081B                     	;# 
  5082  081C                     	;# 
  5083  081D                     	;# 
  5084  081E                     	;# 
  5085  081F                     	;# 
  5086  088C                     	;# 
  5087  088D                     	;# 
  5088  088E                     	;# 
  5089  088F                     	;# 
  5090  0890                     	;# 
  5091  0891                     	;# 
  5092  0892                     	;# 
  5093  0893                     	;# 
  5094  0895                     	;# 
  5095  0896                     	;# 
  5096  0897                     	;# 
  5097  0898                     	;# 
  5098  0899                     	;# 
  5099  089A                     	;# 
  5100  089B                     	;# 
  5101  090C                     	;# 
  5102  090E                     	;# 
  5103  090F                     	;# 
  5104  091F                     	;# 
  5105  091F                     	;# 
  5106  098F                     	;# 
  5107  098F                     	;# 
  5108  0990                     	;# 
  5109  0991                     	;# 
  5110  0992                     	;# 
  5111  0993                     	;# 
  5112  0994                     	;# 
  5113  0995                     	;# 
  5114  0996                     	;# 
  5115  0997                     	;# 
  5116  0E0F                     	;# 
  5117  0E10                     	;# 
  5118  0E11                     	;# 
  5119  0E12                     	;# 
  5120  0E13                     	;# 
  5121  0E14                     	;# 
  5122  0E15                     	;# 
  5123  0E16                     	;# 
  5124  0E17                     	;# 
  5125  0E18                     	;# 
  5126  0E19                     	;# 
  5127  0E1A                     	;# 
  5128  0E1B                     	;# 
  5129  0E1C                     	;# 
  5130  0E1D                     	;# 
  5131  0E1E                     	;# 
  5132  0E1F                     	;# 
  5133  0E20                     	;# 
  5134  0E21                     	;# 
  5135  0E22                     	;# 
  5136  0E23                     	;# 
  5137  0E24                     	;# 
  5138  0E25                     	;# 
  5139  0E26                     	;# 
  5140  0E27                     	;# 
  5141  0E28                     	;# 
  5142  0E29                     	;# 
  5143  0E2A                     	;# 
  5144  0E2B                     	;# 
  5145  0E2C                     	;# 
  5146  0E2D                     	;# 
  5147  0E2E                     	;# 
  5148  0E2F                     	;# 
  5149  0E30                     	;# 
  5150  0E31                     	;# 
  5151  0E32                     	;# 
  5152  0E33                     	;# 
  5153  0E34                     	;# 
  5154  0E35                     	;# 
  5155  0E36                     	;# 
  5156  0E37                     	;# 
  5157  0E8F                     	;# 
  5158  0E90                     	;# 
  5159  0E91                     	;# 
  5160  0E92                     	;# 
  5161  0E93                     	;# 
  5162  0E94                     	;# 
  5163  0E95                     	;# 
  5164  0E96                     	;# 
  5165  0E97                     	;# 
  5166  0E9C                     	;# 
  5167  0E9D                     	;# 
  5168  0E9E                     	;# 
  5169  0EA1                     	;# 
  5170  0EA2                     	;# 
  5171  0EA3                     	;# 
  5172  0EA4                     	;# 
  5173  0EA5                     	;# 
  5174  0EA9                     	;# 
  5175  0EAA                     	;# 
  5176  0EAB                     	;# 
  5177  0EAC                     	;# 
  5178  0EB1                     	;# 
  5179  0EB2                     	;# 
  5180  0EB3                     	;# 
  5181  0EB8                     	;# 
  5182  0EB9                     	;# 
  5183  0EBA                     	;# 
  5184  0EBB                     	;# 
  5185  0EBC                     	;# 
  5186  0EBD                     	;# 
  5187  0EBE                     	;# 
  5188  0EC3                     	;# 
  5189  0EC5                     	;# 
  5190  0EC6                     	;# 
  5191  0EC7                     	;# 
  5192  0EC8                     	;# 
  5193  0EC9                     	;# 
  5194  0ECA                     	;# 
  5195  0ECB                     	;# 
  5196  0ECC                     	;# 
  5197  0F10                     	;# 
  5198  0F11                     	;# 
  5199  0F12                     	;# 
  5200  0F13                     	;# 
  5201  0F14                     	;# 
  5202  0F15                     	;# 
  5203  0F16                     	;# 
  5204  0F17                     	;# 
  5205  0F18                     	;# 
  5206  0F19                     	;# 
  5207  0F1A                     	;# 
  5208  0F1B                     	;# 
  5209  0F1C                     	;# 
  5210  0F1D                     	;# 
  5211  0F1E                     	;# 
  5212  0F1F                     	;# 
  5213  0F20                     	;# 
  5214  0F21                     	;# 
  5215  0F22                     	;# 
  5216  0F23                     	;# 
  5217  0F24                     	;# 
  5218  0F25                     	;# 
  5219  0F26                     	;# 
  5220  0F27                     	;# 
  5221  0F38                     	;# 
  5222  0F39                     	;# 
  5223  0F3A                     	;# 
  5224  0F3B                     	;# 
  5225  0F3C                     	;# 
  5226  0F3D                     	;# 
  5227  0F3E                     	;# 
  5228  0F3F                     	;# 
  5229  0F40                     	;# 
  5230  0F41                     	;# 
  5231  0F43                     	;# 
  5232  0F44                     	;# 
  5233  0F45                     	;# 
  5234  0F46                     	;# 
  5235  0F47                     	;# 
  5236  0F48                     	;# 
  5237  0F49                     	;# 
  5238  0F4A                     	;# 
  5239  0F4B                     	;# 
  5240  0F4C                     	;# 
  5241  0F4E                     	;# 
  5242  0F4F                     	;# 
  5243  0F50                     	;# 
  5244  0F51                     	;# 
  5245  0F52                     	;# 
  5246  0F53                     	;# 
  5247  0F54                     	;# 
  5248  0F55                     	;# 
  5249  0F56                     	;# 
  5250  0F57                     	;# 
  5251  0F65                     	;# 
  5252  0F68                     	;# 
  5253  0F69                     	;# 
  5254  0F6A                     	;# 
  5255  0F6B                     	;# 
  5256  0FE4                     	;# 
  5257  0FE5                     	;# 
  5258  0FE6                     	;# 
  5259  0FE7                     	;# 
  5260  0FE8                     	;# 
  5261  0FE9                     	;# 
  5262  0FEA                     	;# 
  5263  0FEB                     	;# 
  5264  0FED                     	;# 
  5265  0FEE                     	;# 
  5266  0FEF                     	;_samples
  5267                           
  5268                           	psect	idataBANK0
  5269  0804                     __pidataBANK0:	
  5270                           
  5271                           ;initializer for _batteryTemp
  5272  0804  342C               	retlw	44
  5273  0805  3401               	retlw	1
  5274                           
  5275                           	psect	idataBANK2
  5276  12E2                     __pidataBANK2:	
  5277                           
  5278                           ;initializer for _channels
  5279  12E2  3414               	retlw	20
  5280  12E3  3400               	retlw	0
  5281  12E4  3410               	retlw	16
  5282  12E5  3400               	retlw	0
  5283  12E6  3416               	retlw	22
  5284  12E7  3400               	retlw	0
  5285  12E8  3412               	retlw	18
  5286  12E9  3400               	retlw	0
  5287                           
  5288                           	psect	stringtext1
  5289  1000                     __pstringtext1:	
  5290  1000                     _fonts:	
  5291  1000  3400               	retlw	0
  5292  1001  3400               	retlw	0
  5293  1002  3400               	retlw	0
  5294  1003  3400               	retlw	0
  5295  1004  344E               	retlw	78
  5296  1005  3400               	retlw	0
  5297  1006  3406               	retlw	6
  5298  1007  3400               	retlw	0
  5299  1008  3406               	retlw	6
  5300  1009  34FF               	retlw	255
  5301  100A  34FF               	retlw	255
  5302  100B  34FF               	retlw	255
  5303  100C  3448               	retlw	72
  5304  100D  34D6               	retlw	214
  5305  100E  3424               	retlw	36
  5306  100F  3412               	retlw	18
  5307  1010  3408               	retlw	8
  5308  1011  3424               	retlw	36
  5309  1012  34FF               	retlw	255
  5310  1013  34FF               	retlw	255
  5311  1014  34FF               	retlw	255
  5312  1015  3400               	retlw	0
  5313  1016  3406               	retlw	6
  5314  1017  3400               	retlw	0
  5315  1018  3438               	retlw	56
  5316  1019  3444               	retlw	68
  5317  101A  3482               	retlw	130
  5318  101B  3482               	retlw	130
  5319  101C  3444               	retlw	68
  5320  101D  3438               	retlw	56
  5321  101E  3414               	retlw	20
  5322  101F  3408               	retlw	8
  5323  1020  343E               	retlw	62
  5324  1021  3410               	retlw	16
  5325  1022  3438               	retlw	56
  5326  1023  3410               	retlw	16
  5327  1024  34A0               	retlw	160
  5328  1025  3460               	retlw	96
  5329  1026  3400               	retlw	0
  5330  1027  3410               	retlw	16
  5331  1028  3410               	retlw	16
  5332  1029  3410               	retlw	16
  5333  102A  3460               	retlw	96
  5334  102B  3460               	retlw	96
  5335  102C  3400               	retlw	0
  5336  102D  3460               	retlw	96
  5337  102E  3418               	retlw	24
  5338  102F  3406               	retlw	6
  5339  1030  347C               	retlw	124
  5340  1031  3442               	retlw	66
  5341  1032  347C               	retlw	124
  5342  1033  3444               	retlw	68
  5343  1034  347E               	retlw	126
  5344  1035  3440               	retlw	64
  5345  1036  3464               	retlw	100
  5346  1037  3452               	retlw	82
  5347  1038  344C               	retlw	76
  5348  1039  344A               	retlw	74
  5349  103A  344A               	retlw	74
  5350  103B  3434               	retlw	52
  5351  103C  3438               	retlw	56
  5352  103D  3424               	retlw	36
  5353  103E  347E               	retlw	126
  5354  103F  344E               	retlw	78
  5355  1040  344A               	retlw	74
  5356  1041  3432               	retlw	50
  5357  1042  343C               	retlw	60
  5358  1043  344A               	retlw	74
  5359  1044  3432               	retlw	50
  5360  1045  3462               	retlw	98
  5361  1046  341A               	retlw	26
  5362  1047  3406               	retlw	6
  5363  1048  3476               	retlw	118
  5364  1049  344A               	retlw	74
  5365  104A  3476               	retlw	118
  5366  104B  344C               	retlw	76
  5367  104C  3452               	retlw	82
  5368  104D  343C               	retlw	60
  5369  104E  346C               	retlw	108
  5370  104F  346C               	retlw	108
  5371  1050  3400               	retlw	0
  5372  1051  34AC               	retlw	172
  5373  1052  346C               	retlw	108
  5374  1053  3400               	retlw	0
  5375  1054  3410               	retlw	16
  5376  1055  3428               	retlw	40
  5377  1056  3444               	retlw	68
  5378  1057  3428               	retlw	40
  5379  1058  3428               	retlw	40
  5380  1059  3428               	retlw	40
  5381  105A  3444               	retlw	68
  5382  105B  3428               	retlw	40
  5383  105C  3410               	retlw	16
  5384  105D  3402               	retlw	2
  5385  105E  3459               	retlw	89
  5386  105F  3406               	retlw	6
  5387  1060  34FF               	retlw	255
  5388  1061  34FF               	retlw	255
  5389  1062  34FF               	retlw	255
  5390  1063  347C               	retlw	124
  5391  1064  3412               	retlw	18
  5392  1065  347C               	retlw	124
  5393  1066  347E               	retlw	126
  5394  1067  345A               	retlw	90
  5395  1068  3434               	retlw	52
  5396  1069  343C               	retlw	60
  5397  106A  3442               	retlw	66
  5398  106B  3442               	retlw	66
  5399  106C  347E               	retlw	126
  5400  106D  3442               	retlw	66
  5401  106E  343C               	retlw	60
  5402  106F  347E               	retlw	126
  5403  1070  344A               	retlw	74
  5404  1071  3442               	retlw	66
  5405  1072  347E               	retlw	126
  5406  1073  340A               	retlw	10
  5407  1074  340A               	retlw	10
  5408  1075  343C               	retlw	60
  5409  1076  3452               	retlw	82
  5410  1077  3434               	retlw	52
  5411  1078  347E               	retlw	126
  5412  1079  3408               	retlw	8
  5413  107A  347E               	retlw	126
  5414  107B  3442               	retlw	66
  5415  107C  347E               	retlw	126
  5416  107D  3442               	retlw	66
  5417  107E  3430               	retlw	48
  5418  107F  3440               	retlw	64
  5419  1080  343E               	retlw	62
  5420  1081  347E               	retlw	126
  5421  1082  3418               	retlw	24
  5422  1083  3466               	retlw	102
  5423  1084  347E               	retlw	126
  5424  1085  3440               	retlw	64
  5425  1086  3440               	retlw	64
  5426  1087  347E               	retlw	126
  5427  1088  341C               	retlw	28
  5428  1089  347E               	retlw	126
  5429  108A  347E               	retlw	126
  5430  108B  3402               	retlw	2
  5431  108C  347E               	retlw	126
  5432  108D  343C               	retlw	60
  5433  108E  3442               	retlw	66
  5434  108F  343C               	retlw	60
  5435  1090  347E               	retlw	126
  5436  1091  3412               	retlw	18
  5437  1092  340C               	retlw	12
  5438  1093  347E               	retlw	126
  5439  1094  3462               	retlw	98
  5440  1095  34FE               	retlw	254
  5441  1096  347E               	retlw	126
  5442  1097  3432               	retlw	50
  5443  1098  344E               	retlw	78
  5444  1099  3444               	retlw	68
  5445  109A  344A               	retlw	74
  5446  109B  3432               	retlw	50
  5447  109C  3402               	retlw	2
  5448  109D  347E               	retlw	126
  5449  109E  3402               	retlw	2
  5450  109F  347E               	retlw	126
  5451  10A0  3440               	retlw	64
  5452  10A1  347E               	retlw	126
  5453  10A2  343E               	retlw	62
  5454  10A3  3440               	retlw	64
  5455  10A4  343E               	retlw	62
  5456  10A5  347E               	retlw	126
  5457  10A6  3438               	retlw	56
  5458  10A7  347E               	retlw	126
  5459  10A8  3466               	retlw	102
  5460  10A9  3418               	retlw	24
  5461  10AA  3466               	retlw	102
  5462  10AB  340E               	retlw	14
  5463  10AC  3470               	retlw	112
  5464  10AD  340E               	retlw	14
  5465  10AE  3462               	retlw	98
  5466  10AF  345A               	retlw	90
  5467  10B0  3446               	retlw	70
  5468  10B1  3400               	retlw	0
  5469  10B2  347E               	retlw	126
  5470  10B3  3442               	retlw	66
  5471  10B4  3406               	retlw	6
  5472  10B5  3418               	retlw	24
  5473  10B6  3460               	retlw	96
  5474  10B7  3442               	retlw	66
  5475  10B8  347E               	retlw	126
  5476  10B9  3400               	retlw	0
  5477  10BA  3404               	retlw	4
  5478  10BB  3402               	retlw	2
  5479  10BC  3404               	retlw	4
  5480  10BD  3440               	retlw	64
  5481  10BE  3440               	retlw	64
  5482  10BF  3440               	retlw	64
  5483  10C0  3400               	retlw	0
  5484  10C1  3402               	retlw	2
  5485  10C2  3404               	retlw	4
  5486  10C3  3474               	retlw	116
  5487  10C4  3454               	retlw	84
  5488  10C5  3478               	retlw	120
  5489  10C6  347E               	retlw	126
  5490  10C7  3448               	retlw	72
  5491  10C8  3430               	retlw	48
  5492  10C9  3430               	retlw	48
  5493  10CA  3448               	retlw	72
  5494  10CB  3448               	retlw	72
  5495  10CC  3430               	retlw	48
  5496  10CD  3448               	retlw	72
  5497  10CE  347E               	retlw	126
  5498  10CF  3438               	retlw	56
  5499  10D0  3454               	retlw	84
  5500  10D1  3458               	retlw	88
  5501  10D2  347C               	retlw	124
  5502  10D3  340A               	retlw	10
  5503  10D4  3402               	retlw	2
  5504  10D5  3498               	retlw	152
  5505  10D6  34A4               	retlw	164
  5506  10D7  347C               	retlw	124
  5507  10D8  347E               	retlw	126
  5508  10D9  3408               	retlw	8
  5509  10DA  3470               	retlw	112
  5510  10DB  3448               	retlw	72
  5511  10DC  347A               	retlw	122
  5512  10DD  3440               	retlw	64
  5513  10DE  3488               	retlw	136
  5514  10DF  34FA               	retlw	250
  5515  10E0  3400               	retlw	0
  5516  10E1  347E               	retlw	126
  5517  10E2  3418               	retlw	24
  5518  10E3  3464               	retlw	100
  5519  10E4  3442               	retlw	66
  5520  10E5  347E               	retlw	126
  5521  10E6  3440               	retlw	64
  5522  10E7  347C               	retlw	124
  5523  10E8  3438               	retlw	56
  5524  10E9  347C               	retlw	124
  5525  10EA  347C               	retlw	124
  5526  10EB  3404               	retlw	4
  5527  10EC  3478               	retlw	120
  5528  10ED  3438               	retlw	56
  5529  10EE  3444               	retlw	68
  5530  10EF  3438               	retlw	56
  5531  10F0  34FC               	retlw	252
  5532  10F1  3424               	retlw	36
  5533  10F2  3418               	retlw	24
  5534  10F3  3418               	retlw	24
  5535  10F4  3424               	retlw	36
  5536  10F5  34FC               	retlw	252
  5537  10F6  3478               	retlw	120
  5538  10F7  3404               	retlw	4
  5539  10F8  3404               	retlw	4
  5540  10F9  3448               	retlw	72
  5541  10FA  3454               	retlw	84
  5542  10FB  3424               	retlw	36
  5543  10FC  3404               	retlw	4
  5544  10FD  343E               	retlw	62
  5545  10FE  3444               	retlw	68
  5546  10FF  347C               	retlw	124
  5547  1100  3440               	retlw	64
  5548  1101  347C               	retlw	124
  5549  1102  343C               	retlw	60
  5550  1103  3440               	retlw	64
  5551  1104  343C               	retlw	60
  5552  1105  347C               	retlw	124
  5553  1106  3430               	retlw	48
  5554  1107  347C               	retlw	124
  5555  1108  346C               	retlw	108
  5556  1109  3410               	retlw	16
  5557  110A  346C               	retlw	108
  5558  110B  349C               	retlw	156
  5559  110C  34A0               	retlw	160
  5560  110D  347C               	retlw	124
  5561  110E  3464               	retlw	100
  5562  110F  3454               	retlw	84
  5563  1110  344C               	retlw	76
  5564  1111  340C               	retlw	12
  5565  1112  3412               	retlw	18
  5566  1113  340C               	retlw	12
  5567  1114  34FF               	retlw	255
  5568  1115  34FF               	retlw	255
  5569  1116  34FF               	retlw	255
  5570  1117  34FF               	retlw	255
  5571  1118  34FF               	retlw	255
  5572  1119  34FF               	retlw	255
  5573  111A  34FF               	retlw	255
  5574  111B  34FF               	retlw	255
  5575  111C  34FF               	retlw	255
  5576  111D  34FF               	retlw	255
  5577  111E  34FF               	retlw	255
  5578  111F  34FF               	retlw	255
  5579  1120  34FF               	retlw	255
  5580  1121  34FF               	retlw	255
  5581  1122  34FF               	retlw	255
  5582  1123  34FF               	retlw	255
  5583  1124  34FF               	retlw	255
  5584  1125  34FF               	retlw	255
  5585  1126  34FC               	retlw	252
  5586  1127  3440               	retlw	64
  5587  1128  347C               	retlw	124
  5588  1129  34FF               	retlw	255
  5589  112A  34FF               	retlw	255
  5590  112B  34FF               	retlw	255
  5591  112C  34FF               	retlw	255
  5592  112D  34FF               	retlw	255
  5593  112E  34FF               	retlw	255
  5594  112F                     __end_of_fonts:	
  5595                           
  5596                           	psect	stringtext2
  5597  1800                     __pstringtext2:	
  5598  1800                     log@coeff:	
  5599  1800  3400               	retlw	0
  5600  1801  3400               	retlw	0
  5601  1802  3400               	retlw	0
  5602  1803  3400               	retlw	0
  5603  1804  3480               	retlw	128
  5604  1805  343F               	retlw	63
  5605  1806  34F0               	retlw	240
  5606  1807  34FF               	retlw	255
  5607  1808  34BE               	retlw	190
  5608  1809  34E2               	retlw	226
  5609  180A  34A9               	retlw	169
  5610  180B  343E               	retlw	62
  5611  180C  3483               	retlw	131
  5612  180D  3476               	retlw	118
  5613  180E  34BE               	retlw	190
  5614  180F  34AE               	retlw	174
  5615  1810  342B               	retlw	43
  5616  1811  343E               	retlw	62
  5617  1812  343C               	retlw	60
  5618  1813  34C3               	retlw	195
  5619  1814  34BD               	retlw	189
  5620  1815  34D2               	retlw	210
  5621  1816  3413               	retlw	19
  5622  1817  343D               	retlw	61
  5623  1818  3478               	retlw	120
  5624  1819  34D3               	retlw	211
  5625  181A  34BB               	retlw	187
  5626  181B                     __end_oflog@coeff:	
  5627  0013                     _TRISC	set	19
  5628  0012                     _TRISB	set	18
  5629  0011                     _TRISA	set	17
  5630  0018                     _LATC	set	24
  5631  0017                     _LATB	set	23
  5632  0016                     _LATA	set	22
  5633  0016                     _LATAbits	set	22
  5634  0011                     _TRISAbits	set	17
  5635  00B5                     _LATA5	set	181
  5636  006A                     _RB2	set	106
  5637  005F                     _GIE	set	95
  5638  0093                     _ADCON0	set	147
  5639  009D                     _ADACQ	set	157
  5640  009C                     _ADPRE	set	156
  5641  009B                     _ADCAP	set	155
  5642  009A                     _ADREF	set	154
  5643  0098                     _ADCLK	set	152
  5644  0097                     _ADSTAT	set	151
  5645  0099                     _ADACT	set	153
  5646  0096                     _ADCON3	set	150
  5647  0095                     _ADCON2	set	149
  5648  0094                     _ADCON1	set	148
  5649  008C                     _ADRESL	set	140
  5650  008D                     _ADRESH	set	141
  5651  0093                     _ADCON0bits	set	147
  5652  009E                     _ADPCH	set	158
  5653  0113                     _ADSTPTH	set	275
  5654  0112                     _ADSTPTL	set	274
  5655  0111                     _ADUTHH	set	273
  5656  0110                     _ADUTHL	set	272
  5657  010F                     _ADLTHH	set	271
  5658  010E                     _ADLTHL	set	270
  5659  010D                     _ADRPT	set	269
  5660  021F                     _CCPTMRS1bits	set	543
  5661  0294                     _T4CONbits	set	660
  5662  0292                     _T4TMR	set	658
  5663  0293                     _T4PR	set	659
  5664  0297                     _T4RST	set	663
  5665  0295                     _T4HLT	set	661
  5666  0296                     _T4CLKCON	set	662
  5667  0294                     _T4CON	set	660
  5668  028E                     _T2CONbits	set	654
  5669  028C                     _T2TMR	set	652
  5670  028D                     _T2PR	set	653
  5671  0291                     _T2RST	set	657
  5672  028F                     _T2HLT	set	655
  5673  0290                     _T2CLKCON	set	656
  5674  028E                     _T2CON	set	654
  5675  0390                     _PWM7DCL	set	912
  5676  0391                     _PWM7DCH	set	913
  5677  0392                     _PWM7CON	set	914
  5678  038C                     _PWM6DCL	set	908
  5679  038D                     _PWM6DCH	set	909
  5680  038E                     _PWM6CON	set	910
  5681  0710                     _PIR4bits	set	1808
  5682  0716                     _PIE0bits	set	1814
  5683  0892                     _OSCTUNE	set	2194
  5684  0893                     _OSCFRQ	set	2195
  5685  0891                     _OSCEN	set	2193
  5686  088F                     _OSCCON3	set	2191
  5687  088D                     _OSCCON1	set	2189
  5688  090C                     _FVRCON	set	2316
  5689  0E8F                     _PPSLOCKbits	set	3727
  5690  0E8F                     _PPSLOCK	set	3727
  5691  0F18                     _RB0PPS	set	3864
  5692  0F17                     _RA7PPS	set	3863
  5693  0F16                     _RA6PPS	set	3862
  5694  0F4E                     _ANSELC	set	3918
  5695  0F43                     _ANSELB	set	3907
  5696  0F38                     _ANSELA	set	3896
  5697  0F65                     _WPUE	set	3941
  5698  0F4F                     _WPUC	set	3919
  5699  0F44                     _WPUB	set	3908
  5700  0F39                     _WPUA	set	3897
  5701  181B                     STR_3:	
  5702  181B  3452               	retlw	82	;'R'
  5703  181C  3465               	retlw	101	;'e'
  5704  181D  3466               	retlw	102	;'f'
  5705  181E  343A               	retlw	58	;':'
  5706  181F  3400               	retlw	0
  5707                           
  5708                           	psect	stringtext3
  5709  1820                     __pstringtext3:	
  5710  1820                     STR_2:	
  5711  1820  344F               	retlw	79	;'O'
  5712  1821  3475               	retlw	117	;'u'
  5713  1822  3474               	retlw	116	;'t'
  5714  1823  343A               	retlw	58	;':'
  5715  1824  3400               	retlw	0
  5716                           
  5717                           	psect	stringtext4
  5718  1825                     __pstringtext4:	
  5719  1825                     STR_1:	
  5720  1825  3449               	retlw	73	;'I'
  5721  1826  346E               	retlw	110	;'n'
  5722  1827  343A               	retlw	58	;':'
  5723  1828  3400               	retlw	0
  5724                           
  5725                           	psect	stringtext5
  5726  0000                     __pstringtext5:	
  5727                           
  5728                           ; #config settings
  5729  0000                     
  5730                           	psect	cinit
  5731  07B5                     start_initialization:	
  5732  07B5                     __initialization:		;BIGRAM
  5733                           
  5734                           ; Initialize objects allocated to BANK0
  5735  07B5  3188  2004  3187   	fcall	__pidataBANK0	;fetch initializer
  5736  07B8  00EC               	movwf	__pdataBANK0& (0+127)
  5737  07B9  3188  2005  3187   	fcall	__pidataBANK0+1	;fetch initializer
  5738  07BC  00ED               	movwf	(__pdataBANK0+1)& (0+127)
  5739                           
  5740                           ; Initialize objects allocated to BANK2
  5741  07BD  30E2               	movlw	low __pidataBANK2
  5742  07BE  0084               	movwf	4
  5743  07BF  3092               	movlw	(high __pidataBANK2)| (0+128)
  5744  07C0  0085               	movwf	5
  5745  07C1  0022               	movlb	2	; select bank2
  5746  07C2  0012               	moviw fsr0++
  5747  07C3  00B5               	movwf	__pdataBANK2& (0+127)
  5748  07C4  0012               	moviw fsr0++
  5749  07C5  00B6               	movwf	(__pdataBANK2+1)& (0+127)
  5750  07C6  0012               	moviw fsr0++
  5751  07C7  00B7               	movwf	(__pdataBANK2+2)& (0+127)
  5752  07C8  0012               	moviw fsr0++
  5753  07C9  00B8               	movwf	(__pdataBANK2+3)& (0+127)
  5754  07CA  0012               	moviw fsr0++
  5755  07CB  00B9               	movwf	(__pdataBANK2+4)& (0+127)
  5756  07CC  0012               	moviw fsr0++
  5757  07CD  00BA               	movwf	(__pdataBANK2+5)& (0+127)
  5758  07CE  0012               	moviw fsr0++
  5759  07CF  00BB               	movwf	(__pdataBANK2+6)& (0+127)
  5760  07D0  0012               	moviw fsr0++
  5761  07D1  00BC               	movwf	(__pdataBANK2+7)& (0+127)
  5762                           
  5763                           ; Clear objects allocated to BIGRAM
  5764  07D2  3060               	movlw	low (0+8800)
  5765  07D3  0084               	movwf	4
  5766  07D4  3022               	movlw	high (0+8800)
  5767  07D5  0085               	movwf	5
  5768  07D6  3090               	movlw	144
  5769  07D7  00FE               	movwf	btemp
  5770  07D8  3001               	movlw	1
  5771  07D9  00FF               	movwf	btemp+1
  5772  07DA  3192  22F3  3187   	fcall	clear_ram0
  5773                           
  5774                           ; Clear objects allocated to BANK0
  5775  07DD  305A               	movlw	low __pbssBANK0
  5776  07DE  0084               	movwf	4
  5777  07DF  3000               	movlw	high __pbssBANK0
  5778  07E0  0085               	movwf	5
  5779  07E1  3012               	movlw	18
  5780  07E2  00FE               	movwf	btemp
  5781  07E3  3000               	movlw	0
  5782  07E4  00FF               	movwf	btemp+1
  5783  07E5  3192  22F3  3187   	fcall	clear_ram0
  5784                           
  5785                           ; Clear objects allocated to BANK1
  5786  07E8  30A0               	movlw	low __pbssBANK1
  5787  07E9  0084               	movwf	4
  5788  07EA  3000               	movlw	high __pbssBANK1
  5789  07EB  0085               	movwf	5
  5790  07EC  3036               	movlw	54
  5791  07ED  00FE               	movwf	btemp
  5792  07EE  3000               	movlw	0
  5793  07EF  00FF               	movwf	btemp+1
  5794  07F0  3192  22F3  3187   	fcall	clear_ram0
  5795                           
  5796                           ; Clear objects allocated to BANK2
  5797  07F3  3020               	movlw	low __pbssBANK2
  5798  07F4  0084               	movwf	4
  5799  07F5  3001               	movlw	high __pbssBANK2
  5800  07F6  0085               	movwf	5
  5801  07F7  3015               	movlw	21
  5802  07F8  00FE               	movwf	btemp
  5803  07F9  3000               	movlw	0
  5804  07FA  00FF               	movwf	btemp+1
  5805  07FB  3192  22F3         	fcall	clear_ram0
  5806  07FD                     end_of_initialization:	
  5807                           ;End of C runtime variable initialization code
  5808                           
  5809  07FD                     __end_of__initialization:	
  5810  07FD  0020               	movlb	0
  5811  07FE  3182  2AB6         	ljmp	_main	;jump to C main() function
  5812                           
  5813                           	psect	bssBANK0
  5814  005A                     __pbssBANK0:	
  5815  005A                     _Vref:	
  5816  005A                     	ds	4
  5817  005E                     _readButtons:	
  5818  005E                     	ds	2
  5819  0060                     _VHoldMode:	
  5820  0060                     	ds	2
  5821  0062                     _Imode:	
  5822  0062                     	ds	2
  5823  0064                     _batteryState:	
  5824  0064                     	ds	2
  5825  0066                     _sampleIndex:	
  5826  0066                     	ds	2
  5827  0068                     _j:	
  5828  0068                     	ds	1
  5829  0069                     _lastButton:	
  5830  0069                     	ds	1
  5831  006A                     _button:	
  5832  006A                     	ds	1
  5833  006B                     _x:	
  5834  006B                     	ds	1
  5835                           
  5836                           	psect	dataBANK0
  5837  006C                     __pdataBANK0:	
  5838  006C                     _batteryTemp:	
  5839  006C                     	ds	2
  5840                           
  5841                           	psect	bssBANK1
  5842  00A0                     __pbssBANK1:	
  5843  00A0                     _Ianalogs:	
  5844  00A0                     	ds	8
  5845  00A8                     _Vanalogs:	
  5846  00A8                     	ds	8
  5847  00B0                     _voltage:	
  5848  00B0                     	ds	8
  5849  00B8                     _current:	
  5850  00B8                     	ds	8
  5851  00C0                     _stateCounter:	
  5852  00C0                     	ds	4
  5853  00C4                     _Iref:	
  5854  00C4                     	ds	4
  5855  00C8                     _IminCount:	
  5856  00C8                     	ds	4
  5857  00CC                     _Imin:	
  5858  00CC                     	ds	4
  5859  00D0                     _errno:	
  5860  00D0                     	ds	2
  5861  00D2                     _Iout:	
  5862  00D2                     	ds	2
  5863  00D4                     _cc_cv:	
  5864  00D4                     	ds	2
  5865                           
  5866                           	psect	bssBANK2
  5867  0120                     __pbssBANK2:	
  5868  0120                     _totals:	
  5869  0120                     	ds	16
  5870  0130                     LCDWriteInt@F14388:	
  5871  0130                     	ds	5
  5872                           
  5873                           	psect	dataBANK2
  5874  0135                     __pdataBANK2:	
  5875  0135                     _channels:	
  5876  0135                     	ds	8
  5877                           
  5878                           	psect	clrtext
  5879  12F3                     clear_ram0:	
  5880                           ;	Called with FSR0 containing the base address, and
  5881                           ;	btemp/btemp+1 has the size to clear
  5882                           
  5883  12F3  0064               	clrwdt	;clear the watchdog before getting into this loop
  5884  12F4                     clrloop0:	
  5885  12F4  0180               	clrf	0	;clear RAM location pointed to by FSR
  5886  12F5  3101               	addfsr 0,1
  5887  12F6  3001               	movlw	1
  5888  12F7  02FE               	subwf	126,f
  5889  12F8  3000               	movlw	0
  5890  12F9  3BFF               	subwfb	127,f
  5891  12FA  087F               	movf	127,w
  5892  12FB  047E               	iorwf	126,w
  5893  12FC  1903               	btfsc	3,2
  5894  12FD  3400               	retlw	0	;all done for this memory range, return
  5895  12FE  2AF4               	goto	clrloop0	;have we reached the end yet?
  5896                           
  5897                           	psect	cstackBANK1
  5898  00D6                     __pcstackBANK1:	
  5899  00D6                     main@efficiency:	
  5900                           
  5901                           ; 3 bytes @ 0x0
  5902  00D6                     	ds	3
  5903  00D9                     main@dutyCycle1:	
  5904                           
  5905                           ; 2 bytes @ 0x3
  5906  00D9                     	ds	2
  5907  00DB                     main@IOutTotal:	
  5908                           
  5909                           ; 2 bytes @ 0x5
  5910  00DB                     	ds	2
  5911  00DD                     main@faultCount:	
  5912                           
  5913                           ; 2 bytes @ 0x7
  5914  00DD                     	ds	2
  5915  00DF                     main@faultNotReset:	
  5916                           
  5917                           ; 2 bytes @ 0x9
  5918  00DF                     	ds	2
  5919  00E1                     main@slowLoop:	
  5920                           
  5921                           ; 1 bytes @ 0xB
  5922  00E1                     	ds	1
  5923  00E2                     main@displayRefresh:	
  5924                           
  5925                           ; 1 bytes @ 0xC
  5926  00E2                     	ds	1
  5927  00E3                     main@MPPT0:	
  5928                           
  5929                           ; 2 bytes @ 0xD
  5930  00E3                     	ds	2
  5931  00E5                     main@MPPT1:	
  5932                           
  5933                           ; 2 bytes @ 0xF
  5934  00E5                     	ds	2
  5935  00E7                     main@menuButton:	
  5936                           
  5937                           ; 1 bytes @ 0x11
  5938  00E7                     	ds	1
  5939  00E8                     main@j:	
  5940                           
  5941                           ; 1 bytes @ 0x12
  5942  00E8                     	ds	1
  5943  00E9                     main@dutyCycle6:	
  5944                           
  5945                           ; 2 bytes @ 0x13
  5946  00E9                     	ds	2
  5947  00EB                     main@dutyCycle7:	
  5948                           
  5949                           ; 2 bytes @ 0x15
  5950  00EB                     	ds	2
  5951                           
  5952                           	psect	cstackCOMMON
  5953  0070                     __pcstackCOMMON:	
  5954  0070                     ?___ftge:	
  5955  0070                     ?_LCDWrite:	
  5956                           ; 1 bit 
  5957                           
  5958  0070                     ?_OSCILLATOR_Initialize:	
  5959                           ; 1 bytes @ 0x0
  5960                           
  5961  0070                     ??_OSCILLATOR_Initialize:	
  5962                           ; 1 bytes @ 0x0
  5963                           
  5964  0070                     ?_TMR2_Initialize:	
  5965                           ; 1 bytes @ 0x0
  5966                           
  5967  0070                     ??_TMR2_Initialize:	
  5968                           ; 1 bytes @ 0x0
  5969                           
  5970  0070                     ?_TMR4_Initialize:	
  5971                           ; 1 bytes @ 0x0
  5972                           
  5973  0070                     ??_TMR4_Initialize:	
  5974                           ; 1 bytes @ 0x0
  5975                           
  5976  0070                     ?_calculateCurrent0:	
  5977                           ; 1 bytes @ 0x0
  5978                           
  5979  0070                     ?_calculateCurrent1:	
  5980                           ; 1 bytes @ 0x0
  5981                           
  5982  0070                     ?_calculateCurrent2:	
  5983                           ; 1 bytes @ 0x0
  5984                           
  5985  0070                     ?_calculateCurrent3:	
  5986                           ; 1 bytes @ 0x0
  5987                           
  5988  0070                     ?_ADC_Initialize:	
  5989                           ; 1 bytes @ 0x0
  5990                           
  5991  0070                     ??_ADC_Initialize:	
  5992                           ; 1 bytes @ 0x0
  5993                           
  5994  0070                     ?_Init_Battery_State_Machine:	
  5995                           ; 1 bytes @ 0x0
  5996                           
  5997  0070                     ?_Battery_State_Machine:	
  5998                           ; 1 bytes @ 0x0
  5999                           
  6000  0070                     ?_cc_cv_mode:	
  6001                           ; 1 bytes @ 0x0
  6002                           
  6003  0070                     ?_readButton:	
  6004                           ; 1 bytes @ 0x0
  6005                           
  6006  0070                     ?_LCDWriteCharacter:	
  6007                           ; 1 bytes @ 0x0
  6008                           
  6009  0070                     ?_LCDClear:	
  6010                           ; 1 bytes @ 0x0
  6011                           
  6012  0070                     ?_LCDInit:	
  6013                           ; 1 bytes @ 0x0
  6014                           
  6015  0070                     ?_PIN_MANAGER_Initialize:	
  6016                           ; 1 bytes @ 0x0
  6017                           
  6018  0070                     ??_PIN_MANAGER_Initialize:	
  6019                           ; 1 bytes @ 0x0
  6020                           
  6021  0070                     ?_PWM_Initialize:	
  6022                           ; 1 bytes @ 0x0
  6023                           
  6024  0070                     ??_PWM_Initialize:	
  6025                           ; 1 bytes @ 0x0
  6026                           
  6027  0070                     ?_PWM6_LoadDutyValue:	
  6028                           ; 1 bytes @ 0x0
  6029                           
  6030  0070                     ?_PWM7_LoadDutyValue:	
  6031                           ; 1 bytes @ 0x0
  6032                           
  6033  0070                     ?_SYSTEM_Initialize:	
  6034                           ; 1 bytes @ 0x0
  6035                           
  6036  0070                     ?_main:	
  6037                           ; 1 bytes @ 0x0
  6038                           
  6039  0070                     ?_ADCRead:	
  6040                           ; 1 bytes @ 0x0
  6041                           
  6042  0070                     ?___wmul:	
  6043                           ; 2 bytes @ 0x0
  6044                           
  6045  0070                     ?___awdiv:	
  6046                           ; 2 bytes @ 0x0
  6047                           
  6048  0070                     ?___lwmod:	
  6049                           ; 2 bytes @ 0x0
  6050                           
  6051  0070                     ?___ftpack:	
  6052                           ; 2 bytes @ 0x0
  6053                           
  6054  0070                     ?_frexp:	
  6055                           ; 3 bytes @ 0x0
  6056                           
  6057  0070                     ?___aldiv:	
  6058                           ; 3 bytes @ 0x0
  6059                           
  6060  0070                     LCDWrite@data:	
  6061                           ; 4 bytes @ 0x0
  6062                           
  6063  0070                     PIN_MANAGER_Initialize@state:	
  6064                           ; 1 bytes @ 0x0
  6065                           
  6066  0070                     PWM6_LoadDutyValue@dutyCycle6:	
  6067                           ; 1 bytes @ 0x0
  6068                           
  6069  0070                     PWM7_LoadDutyValue@dutyCycle7:	
  6070                           ; 2 bytes @ 0x0
  6071                           
  6072  0070                     ___wmul@multiplier:	
  6073                           ; 2 bytes @ 0x0
  6074                           
  6075  0070                     ___awdiv@divisor:	
  6076                           ; 2 bytes @ 0x0
  6077                           
  6078  0070                     ___lwmod@divisor:	
  6079                           ; 2 bytes @ 0x0
  6080                           
  6081  0070                     ___ftpack@arg:	
  6082                           ; 2 bytes @ 0x0
  6083                           
  6084  0070                     ___ftge@ff1:	
  6085                           ; 3 bytes @ 0x0
  6086                           
  6087  0070                     frexp@value:	
  6088                           ; 3 bytes @ 0x0
  6089                           
  6090  0070                     ___aldiv@divisor:	
  6091                           ; 3 bytes @ 0x0
  6092                           
  6093                           
  6094                           ; 4 bytes @ 0x0
  6095  0070                     	ds	1
  6096  0071                     ??_LCDWrite:	
  6097                           
  6098                           ; 1 bytes @ 0x1
  6099  0071                     	ds	1
  6100  0072                     ??_PWM6_LoadDutyValue:	
  6101  0072                     ??_PWM7_LoadDutyValue:	
  6102                           ; 1 bytes @ 0x2
  6103                           
  6104  0072                     LCDWrite@data_or_command:	
  6105                           ; 1 bytes @ 0x2
  6106                           
  6107  0072                     ___wmul@multiplicand:	
  6108                           ; 1 bytes @ 0x2
  6109                           
  6110  0072                     ___awdiv@dividend:	
  6111                           ; 2 bytes @ 0x2
  6112                           
  6113  0072                     ___lwmod@dividend:	
  6114                           ; 2 bytes @ 0x2
  6115                           
  6116                           
  6117                           ; 2 bytes @ 0x2
  6118  0072                     	ds	1
  6119  0073                     ??_ADCRead:	
  6120  0073                     ADCRead@channel:	
  6121                           ; 1 bytes @ 0x3
  6122                           
  6123  0073                     LCDWrite@d:	
  6124                           ; 1 bytes @ 0x3
  6125                           
  6126  0073                     ___ftpack@exp:	
  6127                           ; 1 bytes @ 0x3
  6128                           
  6129  0073                     frexp@eptr:	
  6130                           ; 1 bytes @ 0x3
  6131                           
  6132  0073                     ___ftge@ff2:	
  6133                           ; 1 bytes @ 0x3
  6134                           
  6135                           
  6136                           ; 3 bytes @ 0x3
  6137  0073                     	ds	1
  6138  0074                     ??_frexp:	
  6139  0074                     ??_readButton:	
  6140                           ; 1 bytes @ 0x4
  6141                           
  6142  0074                     ??___wmul:	
  6143                           ; 1 bytes @ 0x4
  6144                           
  6145  0074                     ??___awdiv:	
  6146                           ; 1 bytes @ 0x4
  6147                           
  6148  0074                     ??___lwmod:	
  6149                           ; 1 bytes @ 0x4
  6150                           
  6151  0074                     LCDWrite@i:	
  6152                           ; 1 bytes @ 0x4
  6153                           
  6154  0074                     ___ftpack@sign:	
  6155                           ; 1 bytes @ 0x4
  6156                           
  6157  0074                     ___wmul@product:	
  6158                           ; 1 bytes @ 0x4
  6159                           
  6160  0074                     ___aldiv@dividend:	
  6161                           ; 2 bytes @ 0x4
  6162                           
  6163                           
  6164                           ; 4 bytes @ 0x4
  6165  0074                     	ds	1
  6166  0075                     ??___ftpack:	
  6167  0075                     ?_gotoXY:	
  6168                           ; 1 bytes @ 0x5
  6169                           
  6170  0075                     ??_LCDInit:	
  6171                           ; 1 bytes @ 0x5
  6172                           
  6173  0075                     gotoXY@y:	
  6174                           ; 1 bytes @ 0x5
  6175                           
  6176  0075                     ___awdiv@counter:	
  6177                           ; 1 bytes @ 0x5
  6178                           
  6179  0075                     ___lwmod@counter:	
  6180                           ; 1 bytes @ 0x5
  6181                           
  6182                           
  6183                           ; 1 bytes @ 0x5
  6184  0075                     	ds	1
  6185  0076                     ??_gotoXY:	
  6186  0076                     ??_LCDWriteCharacter:	
  6187                           ; 1 bytes @ 0x6
  6188                           
  6189  0076                     ??___ftge:	
  6190                           ; 1 bytes @ 0x6
  6191                           
  6192  0076                     ___awdiv@sign:	
  6193                           ; 1 bytes @ 0x6
  6194                           
  6195                           
  6196                           ; 1 bytes @ 0x6
  6197  0076                     	ds	1
  6198  0077                     gotoXY@x:	
  6199  0077                     ___awdiv@quotient:	
  6200                           ; 1 bytes @ 0x7
  6201                           
  6202                           
  6203                           ; 2 bytes @ 0x7
  6204  0077                     	ds	1
  6205  0078                     ??_LCDClear:	
  6206  0078                     ??___aldiv:	
  6207                           ; 1 bytes @ 0x8
  6208                           
  6209  0078                     ?___awtoft:	
  6210                           ; 1 bytes @ 0x8
  6211                           
  6212  0078                     ___awtoft@c:	
  6213                           ; 3 bytes @ 0x8
  6214                           
  6215                           
  6216                           ; 2 bytes @ 0x8
  6217  0078                     	ds	1
  6218  0079                     LCDWriteCharacter@character:	
  6219  0079                     readIAnalog@analog_channel:	
  6220                           ; 1 bytes @ 0x9
  6221                           
  6222  0079                     LCDClear@index:	
  6223                           ; 2 bytes @ 0x9
  6224                           
  6225                           
  6226                           ; 2 bytes @ 0x9
  6227  0079                     	ds	1
  6228  007A                     LCDWriteCharacter@base:	
  6229                           
  6230                           ; 2 bytes @ 0xA
  6231  007A                     	ds	1
  6232  007B                     ??___awtoft:	
  6233  007B                     readIAnalog@value:	
  6234                           ; 1 bytes @ 0xB
  6235                           
  6236                           
  6237                           ; 2 bytes @ 0xB
  6238  007B                     	ds	1
  6239  007C                     ?_LCDWriteString:	
  6240  007C                     LCDWriteString@characters:	
  6241                           ; 1 bytes @ 0xC
  6242                           
  6243                           
  6244                           ; 2 bytes @ 0xC
  6245  007C                     	ds	1
  6246  007D                     ___awtoft@sign:	
  6247                           
  6248                           ; 1 bytes @ 0xD
  6249  007D                     	ds	1
  6250  007E                     ??_eval_poly:	
  6251  007E                     ??_tempCalc:	
  6252                           ; 1 bytes @ 0xE
  6253                           
  6254  007E                     ??___ftsub:	
  6255                           ; 1 bytes @ 0xE
  6256                           
  6257                           
  6258                           	psect	cstackBANK0
  6259  0020                     __pcstackBANK0:	
  6260                           ; 1 bytes @ 0xE
  6261                           
  6262  0020                     ??_LCDWriteString:	
  6263  0020                     ?_LCDWriteInt:	
  6264                           ; 1 bytes @ 0x0
  6265                           
  6266  0020                     ?___ftdiv:	
  6267                           ; 1 bytes @ 0x0
  6268                           
  6269  0020                     ?___ftmul:	
  6270                           ; 3 bytes @ 0x0
  6271                           
  6272  0020                     ___aldiv@counter:	
  6273                           ; 3 bytes @ 0x0
  6274                           
  6275  0020                     LCDWriteInt@value:	
  6276                           ; 1 bytes @ 0x0
  6277                           
  6278  0020                     ___ftdiv@f2:	
  6279                           ; 2 bytes @ 0x0
  6280                           
  6281  0020                     ___ftmul@f1:	
  6282                           ; 3 bytes @ 0x0
  6283                           
  6284                           
  6285                           ; 3 bytes @ 0x0
  6286  0020                     	ds	1
  6287  0021                     ___aldiv@sign:	
  6288                           
  6289                           ; 1 bytes @ 0x1
  6290  0021                     	ds	1
  6291  0022                     LCDWriteInt@fieldLength:	
  6292  0022                     ___aldiv@quotient:	
  6293                           ; 1 bytes @ 0x2
  6294                           
  6295                           
  6296                           ; 4 bytes @ 0x2
  6297  0022                     	ds	1
  6298  0023                     LCDWriteInt@numPlaces:	
  6299  0023                     ___ftdiv@f1:	
  6300                           ; 1 bytes @ 0x3
  6301                           
  6302  0023                     ___ftmul@f2:	
  6303                           ; 3 bytes @ 0x3
  6304                           
  6305                           
  6306                           ; 3 bytes @ 0x3
  6307  0023                     	ds	1
  6308  0024                     LCDWriteInt@sign:	
  6309                           
  6310                           ; 1 bytes @ 0x4
  6311  0024                     	ds	1
  6312  0025                     ??_LCDWriteInt:	
  6313                           
  6314                           ; 1 bytes @ 0x5
  6315  0025                     	ds	1
  6316  0026                     ??___ftdiv:	
  6317  0026                     ??___ftmul:	
  6318                           ; 1 bytes @ 0x6
  6319                           
  6320  0026                     ?_readIAnalog:	
  6321                           ; 1 bytes @ 0x6
  6322                           
  6323  0026                     readIAnalog@channel:	
  6324                           ; 2 bytes @ 0x6
  6325                           
  6326                           
  6327                           ; 2 bytes @ 0x6
  6328  0026                     	ds	2
  6329  0028                     ??_readIAnalog:	
  6330                           
  6331                           ; 1 bytes @ 0x8
  6332  0028                     	ds	1
  6333  0029                     LCDWriteInt@str:	
  6334                           
  6335                           ; 5 bytes @ 0x9
  6336  0029                     	ds	1
  6337  002A                     ___ftdiv@cntr:	
  6338  002A                     ___ftmul@exp:	
  6339                           ; 1 bytes @ 0xA
  6340                           
  6341                           
  6342                           ; 1 bytes @ 0xA
  6343  002A                     	ds	1
  6344  002B                     ___ftdiv@f3:	
  6345  002B                     ___ftmul@f3_as_product:	
  6346                           ; 3 bytes @ 0xB
  6347                           
  6348                           
  6349                           ; 3 bytes @ 0xB
  6350  002B                     	ds	3
  6351  002E                     LCDWriteInt@j:	
  6352  002E                     ___ftdiv@exp:	
  6353                           ; 1 bytes @ 0xE
  6354                           
  6355  002E                     ___ftmul@cntr:	
  6356                           ; 1 bytes @ 0xE
  6357                           
  6358                           
  6359                           ; 1 bytes @ 0xE
  6360  002E                     	ds	1
  6361  002F                     LCDWriteInt@i:	
  6362  002F                     ___ftdiv@sign:	
  6363                           ; 1 bytes @ 0xF
  6364                           
  6365  002F                     ___ftmul@sign:	
  6366                           ; 1 bytes @ 0xF
  6367                           
  6368                           
  6369                           ; 1 bytes @ 0xF
  6370  002F                     	ds	1
  6371  0030                     ?___ftadd:	
  6372  0030                     ?___fttol:	
  6373                           ; 3 bytes @ 0x10
  6374                           
  6375  0030                     ___ftadd@f1:	
  6376                           ; 4 bytes @ 0x10
  6377                           
  6378  0030                     ___fttol@f1:	
  6379                           ; 3 bytes @ 0x10
  6380                           
  6381                           
  6382                           ; 3 bytes @ 0x10
  6383  0030                     	ds	3
  6384  0033                     ___ftadd@f2:	
  6385                           
  6386                           ; 3 bytes @ 0x13
  6387  0033                     	ds	1
  6388  0034                     ??___fttol:	
  6389                           
  6390                           ; 1 bytes @ 0x14
  6391  0034                     	ds	2
  6392  0036                     ??___ftadd:	
  6393                           
  6394                           ; 1 bytes @ 0x16
  6395  0036                     	ds	2
  6396  0038                     ___fttol@sign1:	
  6397                           
  6398                           ; 1 bytes @ 0x18
  6399  0038                     	ds	1
  6400  0039                     ___fttol@lval:	
  6401                           
  6402                           ; 4 bytes @ 0x19
  6403  0039                     	ds	1
  6404  003A                     ___ftadd@sign:	
  6405                           
  6406                           ; 1 bytes @ 0x1A
  6407  003A                     	ds	1
  6408  003B                     ___ftadd@exp2:	
  6409                           
  6410                           ; 1 bytes @ 0x1B
  6411  003B                     	ds	1
  6412  003C                     ___ftadd@exp1:	
  6413                           
  6414                           ; 1 bytes @ 0x1C
  6415  003C                     	ds	1
  6416  003D                     ?_eval_poly:	
  6417  003D                     ?___ftsub:	
  6418                           ; 3 bytes @ 0x1D
  6419                           
  6420  003D                     ___fttol@exp1:	
  6421                           ; 3 bytes @ 0x1D
  6422                           
  6423  003D                     ___ftsub@f2:	
  6424                           ; 1 bytes @ 0x1D
  6425                           
  6426  003D                     eval_poly@x:	
  6427                           ; 3 bytes @ 0x1D
  6428                           
  6429                           
  6430                           ; 3 bytes @ 0x1D
  6431  003D                     	ds	1
  6432  003E                     ??_calculateCurrent0:	
  6433  003E                     ??_calculateCurrent1:	
  6434                           ; 1 bytes @ 0x1E
  6435                           
  6436  003E                     ??_calculateCurrent2:	
  6437                           ; 1 bytes @ 0x1E
  6438                           
  6439  003E                     ??_calculateCurrent3:	
  6440                           ; 1 bytes @ 0x1E
  6441                           
  6442  003E                     ??_Init_Battery_State_Machine:	
  6443                           ; 1 bytes @ 0x1E
  6444                           
  6445  003E                     ??_Battery_State_Machine:	
  6446                           ; 1 bytes @ 0x1E
  6447                           
  6448  003E                     ??_cc_cv_mode:	
  6449                           ; 1 bytes @ 0x1E
  6450                           
  6451                           
  6452                           ; 1 bytes @ 0x1E
  6453  003E                     	ds	2
  6454  0040                     eval_poly@d:	
  6455  0040                     ___ftsub@f1:	
  6456                           ; 2 bytes @ 0x20
  6457                           
  6458                           
  6459                           ; 3 bytes @ 0x20
  6460  0040                     	ds	2
  6461  0042                     Init_Battery_State_Machine@z:	
  6462  0042                     eval_poly@n:	
  6463                           ; 1 bytes @ 0x22
  6464                           
  6465                           
  6466                           ; 2 bytes @ 0x22
  6467  0042                     	ds	1
  6468  0043                     ??_SYSTEM_Initialize:	
  6469  0043                     Battery_State_Machine@z:	
  6470                           ; 1 bytes @ 0x23
  6471                           
  6472                           
  6473                           ; 1 bytes @ 0x23
  6474  0043                     	ds	1
  6475  0044                     eval_poly@res:	
  6476                           
  6477                           ; 3 bytes @ 0x24
  6478  0044                     	ds	1
  6479  0045                     cc_cv_mode@z:	
  6480                           
  6481                           ; 1 bytes @ 0x25
  6482  0045                     	ds	2
  6483  0047                     ?_log:	
  6484  0047                     log@x:	
  6485                           ; 3 bytes @ 0x27
  6486                           
  6487                           
  6488                           ; 3 bytes @ 0x27
  6489  0047                     	ds	3
  6490  004A                     ??_log:	
  6491                           
  6492                           ; 1 bytes @ 0x2A
  6493  004A                     	ds	1
  6494  004B                     log@exponent:	
  6495                           
  6496                           ; 2 bytes @ 0x2B
  6497  004B                     	ds	2
  6498  004D                     ?_tempCalc:	
  6499  004D                     tempCalc@analogValue:	
  6500                           ; 2 bytes @ 0x2D
  6501                           
  6502                           
  6503                           ; 2 bytes @ 0x2D
  6504  004D                     	ds	2
  6505  004F                     tempCalc@R:	
  6506                           
  6507                           ; 3 bytes @ 0x2F
  6508  004F                     	ds	3
  6509  0052                     _tempCalc$1188:	
  6510                           
  6511                           ; 3 bytes @ 0x32
  6512  0052                     	ds	3
  6513  0055                     tempCalc@steinhart:	
  6514                           
  6515                           ; 3 bytes @ 0x35
  6516  0055                     	ds	3
  6517  0058                     ??_main:	
  6518                           
  6519                           ; 1 bytes @ 0x38
  6520  0058                     	ds	2
  6521                           
  6522                           	psect	maintext
  6523  02B6                     __pmaintext:	
  6524 ;;
  6525 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  6526 ;;
  6527 ;; *************** function _main *****************
  6528 ;; Defined at:
  6529 ;;		line 42 in file "main.c"
  6530 ;; Parameters:    Size  Location     Type
  6531 ;;		None
  6532 ;; Auto vars:     Size  Location     Type
  6533 ;;  efficiency      3    0[BANK1 ] float 
  6534 ;;  dutyCycle7      2   21[BANK1 ] unsigned int 
  6535 ;;  dutyCycle6      2   19[BANK1 ] unsigned int 
  6536 ;;  MPPT1           2   15[BANK1 ] int 
  6537 ;;  MPPT0           2   13[BANK1 ] int 
  6538 ;;  faultNotRese    2    9[BANK1 ] unsigned int 
  6539 ;;  faultCount      2    7[BANK1 ] unsigned int 
  6540 ;;  IOutTotal       2    5[BANK1 ] int 
  6541 ;;  dutyCycle1      2    3[BANK1 ] unsigned int 
  6542 ;;  j               1   18[BANK1 ] unsigned char 
  6543 ;;  menuButton      1   17[BANK1 ] unsigned char 
  6544 ;;  displayRefre    1   12[BANK1 ] unsigned char 
  6545 ;;  slowLoop        1   11[BANK1 ] unsigned char 
  6546 ;; Return value:  Size  Location     Type
  6547 ;;                  1    wreg      void 
  6548 ;; Registers used:
  6549 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6550 ;; Tracked objects:
  6551 ;;		On entry : B1F/0
  6552 ;;		On exit  : 0/0
  6553 ;;		Unchanged: 0/0
  6554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6555 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6556 ;;      Locals:         0       0      23       0       0       0       0       0       0       0       0       0       
      +0       0
  6557 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6558 ;;      Totals:         0       2      23       0       0       0       0       0       0       0       0       0       
      +0       0
  6559 ;;Total ram usage:       25 bytes
  6560 ;; Hardware stack levels required when called:    5
  6561 ;; This function calls:
  6562 ;;		_ADCRead
  6563 ;;		_Battery_State_Machine
  6564 ;;		_LCDClear
  6565 ;;		_LCDInit
  6566 ;;		_LCDWriteCharacter
  6567 ;;		_LCDWriteInt
  6568 ;;		_LCDWriteString
  6569 ;;		_PWM6_LoadDutyValue
  6570 ;;		_PWM7_LoadDutyValue
  6571 ;;		_SYSTEM_Initialize
  6572 ;;		___awtoft
  6573 ;;		___ftdiv
  6574 ;;		___fttol
  6575 ;;		_calculateCurrent0
  6576 ;;		_calculateCurrent1
  6577 ;;		_calculateCurrent2
  6578 ;;		_calculateCurrent3
  6579 ;;		_cc_cv_mode
  6580 ;;		_gotoXY
  6581 ;;		_readButton
  6582 ;;		_readIAnalog
  6583 ;;		_tempCalc
  6584 ;; This function is called by:
  6585 ;;		Startup code after reset
  6586 ;; This function uses a non-reentrant model
  6587 ;;
  6588                           
  6589                           
  6590                           ;psect for function _main
  6591  02B6                     _main:	
  6592                           
  6593                           ;main.c: 44: int16_t MPPT0 = 1550;
  6594                           
  6595                           ;incstack = 0
  6596                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6597  02B6  300E               	movlw	14
  6598  02B7  0021               	movlb	1	; select bank1
  6599  02B8  00E3               	movwf	main@MPPT0^(0+128)
  6600  02B9  3006               	movlw	6
  6601  02BA  00E4               	movwf	(main@MPPT0^(0+128)+1)
  6602                           
  6603                           ;main.c: 45: int16_t MPPT1 = 1550;
  6604  02BB  300E               	movlw	14
  6605  02BC  00E5               	movwf	main@MPPT1^(0+128)
  6606  02BD  3006               	movlw	6
  6607  02BE  00E6               	movwf	(main@MPPT1^(0+128)+1)
  6608                           
  6609                           ;main.c: 47: uint16_t dutyCycle6 = 1023;
  6610  02BF  30FF               	movlw	255
  6611  02C0  00E9               	movwf	main@dutyCycle6^(0+128)
  6612  02C1  3003               	movlw	3
  6613  02C2  00EA               	movwf	(main@dutyCycle6^(0+128)+1)
  6614                           
  6615                           ;main.c: 48: uint16_t dutyCycle7 = 1023;
  6616  02C3  30FF               	movlw	255
  6617  02C4  00EB               	movwf	main@dutyCycle7^(0+128)
  6618  02C5  3003               	movlw	3
  6619  02C6  00EC               	movwf	(main@dutyCycle7^(0+128)+1)
  6620                           
  6621                           ;main.c: 49: uint16_t dutyCycle1 = 60;
  6622  02C7  303C               	movlw	60
  6623  02C8  00D9               	movwf	main@dutyCycle1^(0+128)
  6624  02C9  3000               	movlw	0
  6625  02CA  00DA               	movwf	(main@dutyCycle1^(0+128)+1)
  6626                           
  6627                           ;main.c: 50: int16_t IOutTotal = 0;
  6628  02CB  01DB               	clrf	main@IOutTotal^(0+128)
  6629  02CC  01DC               	clrf	(main@IOutTotal+1)^(0+128)
  6630                           
  6631                           ;main.c: 51: uint8_t j = 0;
  6632  02CD  01E8               	clrf	main@j^(0+128)
  6633                           
  6634                           ;main.c: 52: uint8_t slowLoop = 200;
  6635  02CE  30C8               	movlw	200
  6636  02CF  0020               	movlb	0	; select bank0
  6637  02D0  00D8               	movwf	??_main
  6638  02D1  0858               	movf	??_main,w
  6639  02D2  0021               	movlb	1	; select bank1
  6640  02D3  00E1               	movwf	main@slowLoop^(0+128)
  6641                           
  6642                           ;main.c: 53: uint8_t displayRefresh = 0;
  6643  02D4  01E2               	clrf	main@displayRefresh^(0+128)
  6644                           
  6645                           ;main.c: 54: float efficiency = 0;
  6646  02D5  3000               	movlw	0
  6647  02D6  00D6               	movwf	main@efficiency^(0+128)
  6648  02D7  3000               	movlw	0
  6649  02D8  00D7               	movwf	(main@efficiency+1)^(0+128)
  6650  02D9  3000               	movlw	0
  6651  02DA  00D8               	movwf	(main@efficiency+2)^(0+128)
  6652                           
  6653                           ;main.c: 55: extern int8_t Imode[2];
  6654                           ;main.c: 56: extern int16_t Vref[2];
  6655                           ;main.c: 57: extern int16_t Iref[2];
  6656                           ;main.c: 58: uint8_t menuButton = 0;
  6657  02DB  01E7               	clrf	main@menuButton^(0+128)
  6658                           
  6659                           ;main.c: 59: uint16_t faultCount = 0;
  6660  02DC  01DD               	clrf	main@faultCount^(0+128)
  6661  02DD  01DE               	clrf	(main@faultCount+1)^(0+128)
  6662                           
  6663                           ;main.c: 60: uint16_t faultNotReset = 0;
  6664  02DE  01DF               	clrf	main@faultNotReset^(0+128)
  6665  02DF  01E0               	clrf	(main@faultNotReset+1)^(0+128)
  6666                           
  6667                           ;main.c: 61: extern int8_t VHoldMode[2];
  6668                           ;main.c: 62: extern uint8_t batteryState[2];
  6669                           ;main.c: 64: extern uint16_t IminCount[2];
  6670                           ;main.c: 67: SYSTEM_Initialize();
  6671  02E0  3194  24F9  3182   	fcall	_SYSTEM_Initialize
  6672                           
  6673                           ;main.c: 69: LCDClear();
  6674  02E3  3194  2435  3182   	fcall	_LCDClear
  6675  02E6                     l3110:	
  6676                           ;main.c: 71: void calculateCurrent0(void);
  6677                           ;main.c: 72: void calculateCurrent1(void);
  6678                           ;main.c: 73: void calculateCurrent2(void);
  6679                           ;main.c: 74: void calculateCurrent3(void);
  6680                           ;main.c: 88: while (1)
  6681                           
  6682                           
  6683                           ;main.c: 89: {
  6684                           ;main.c: 90: if(!(RB2))
  6685  02E6  0020               	movlb	0	; select bank0
  6686  02E7  190D               	btfsc	13,2	;volatile
  6687  02E8  2AFA               	goto	l3118
  6688                           
  6689                           ;main.c: 91: {
  6690                           ;main.c: 92: LATA5=0;
  6691  02E9  1296               	bcf	22,5	;volatile
  6692                           
  6693                           ;main.c: 93: _delay((unsigned long)((400)*(32000000/4000000.0)));
  6694  02EA  3005               	movlw	5
  6695  02EB  0020               	movlb	0	; select bank0
  6696  02EC  00D8               	movwf	??_main
  6697  02ED  3026               	movlw	38
  6698  02EE                     u3947:	
  6699  02EE  0B89               	decfsz	9,f
  6700  02EF  2AEE               	goto	u3947
  6701  02F0  0BD8               	decfsz	??_main,f
  6702  02F1  2AEE               	goto	u3947
  6703  02F2  0000               	nop
  6704                           
  6705                           ;main.c: 94: faultCount+=1;
  6706  02F3  3001               	movlw	1
  6707  02F4  0021               	movlb	1	; select bank1
  6708  02F5  07DD               	addwf	main@faultCount^(0+128),f
  6709  02F6  3000               	movlw	0
  6710  02F7  3DDE               	addwfc	(main@faultCount+1)^(0+128),f
  6711                           
  6712                           ;main.c: 95: LATA5=1;
  6713  02F8  0020               	movlb	0	; select bank0
  6714  02F9  1696               	bsf	22,5	;volatile
  6715  02FA                     l3118:	
  6716                           
  6717                           ;main.c: 96: }
  6718                           ;main.c: 97: for(j=0;j<4;j++) Ianalogs[j]=readIAnalog(j);
  6719  02FA  0021               	movlb	1	; select bank1
  6720  02FB  01E8               	clrf	main@j^(0+128)
  6721  02FC  3004               	movlw	4
  6722  02FD  0268               	subwf	main@j^(0+128),w
  6723  02FE  1803               	btfsc	3,0
  6724  02FF  2B1E               	goto	l3130
  6725  0300                     l3124:	
  6726  0300  0868               	movf	main@j^(0+128),w
  6727  0301  0020               	movlb	0	; select bank0
  6728  0302  00D8               	movwf	??_main
  6729  0303  01D9               	clrf	??_main+1
  6730  0304  0858               	movf	??_main,w
  6731  0305  00A6               	movwf	readIAnalog@channel
  6732  0306  0859               	movf	??_main+1,w
  6733  0307  00A7               	movwf	readIAnalog@channel+1
  6734  0308  318D  2583  3182   	fcall	_readIAnalog
  6735  030B  0021               	movlb	1	; select bank1
  6736  030C  3568               	lslf	main@j^(0+128),w
  6737  030D  3EA0               	addlw	(low (_Ianalogs| 0))& (0+255)
  6738  030E  0086               	movwf	6
  6739  030F  0187               	clrf	7
  6740  0310  0020               	movlb	0	; select bank0
  6741  0311  0826               	movf	?_readIAnalog,w
  6742  0312  3FC0               	movwi [0]fsr1
  6743  0313  0827               	movf	?_readIAnalog+1,w
  6744  0314  3FC1               	movwi [1]fsr1
  6745  0315  3001               	movlw	1
  6746  0316  00D8               	movwf	??_main
  6747  0317  0858               	movf	??_main,w
  6748  0318  0021               	movlb	1	; select bank1
  6749  0319  07E8               	addwf	main@j^(0+128),f
  6750  031A  3004               	movlw	4
  6751  031B  0268               	subwf	main@j^(0+128),w
  6752  031C  1C03               	skipc
  6753  031D  2B00               	goto	l3124
  6754  031E                     l3130:	
  6755                           
  6756                           ;main.c: 99: Vanalogs[0]=ADCRead(21);
  6757  031E  3015               	movlw	21
  6758  031F  3193  2357  3182   	fcall	_ADCRead
  6759  0322  0871               	movf	?_ADCRead+1,w
  6760  0323  0021               	movlb	1	; select bank1
  6761  0324  00A9               	movwf	(_Vanalogs+1)^(0+128)
  6762  0325  0870               	movf	?_ADCRead,w
  6763  0326  00A8               	movwf	_Vanalogs^(0+128)
  6764                           
  6765                           ;main.c: 101: Vanalogs[1]=ADCRead(17);
  6766  0327  3011               	movlw	17
  6767  0328  3193  2357  3182   	fcall	_ADCRead
  6768  032B  0871               	movf	?_ADCRead+1,w
  6769  032C  0021               	movlb	1	; select bank1
  6770  032D  00AB               	movwf	((_Vanalogs+1)^(0+128)+2)
  6771  032E  0870               	movf	?_ADCRead,w
  6772  032F  00AA               	movwf	(_Vanalogs^(0+128)+2)
  6773                           
  6774                           ;main.c: 103: Vanalogs[2]=ADCRead(23);
  6775  0330  3017               	movlw	23
  6776  0331  3193  2357  3182   	fcall	_ADCRead
  6777  0334  0871               	movf	?_ADCRead+1,w
  6778  0335  0021               	movlb	1	; select bank1
  6779  0336  00AD               	movwf	((_Vanalogs+1)^(0+128)+4)
  6780  0337  0870               	movf	?_ADCRead,w
  6781  0338  00AC               	movwf	(_Vanalogs^(0+128)+4)
  6782                           
  6783                           ;main.c: 105: Vanalogs[3]=ADCRead(19);
  6784  0339  3013               	movlw	19
  6785  033A  3193  2357  3182   	fcall	_ADCRead
  6786  033D  0871               	movf	?_ADCRead+1,w
  6787  033E  0021               	movlb	1	; select bank1
  6788  033F  00AF               	movwf	((_Vanalogs+1)^(0+128)+6)
  6789  0340  0870               	movf	?_ADCRead,w
  6790  0341  00AE               	movwf	(_Vanalogs^(0+128)+6)
  6791                           
  6792                           ;main.c: 107: if(!(RB2))faultNotReset+=1;
  6793  0342  0020               	movlb	0	; select bank0
  6794  0343  190D               	btfsc	13,2	;volatile
  6795  0344  2B4A               	goto	l3136
  6796  0345  3001               	movlw	1
  6797  0346  0021               	movlb	1	; select bank1
  6798  0347  07DF               	addwf	main@faultNotReset^(0+128),f
  6799  0348  3000               	movlw	0
  6800  0349  3DE0               	addwfc	(main@faultNotReset+1)^(0+128),f
  6801  034A                     l3136:	
  6802                           
  6803                           ;main.c: 109: voltage[0]=(int16_t)(Vanalogs[0]/.5448);
  6804  034A  0021               	movlb	1	; select bank1
  6805  034B  0829               	movf	(_Vanalogs+1)^(0+128),w
  6806  034C  00F9               	movwf	___awtoft@c+1
  6807  034D  0828               	movf	_Vanalogs^(0+128),w
  6808  034E  00F8               	movwf	___awtoft@c
  6809  034F  3193  23F0  3182   	fcall	___awtoft
  6810  0352  0878               	movf	?___awtoft,w
  6811  0353  0020               	movlb	0	; select bank0
  6812  0354  00A3               	movwf	___ftdiv@f1
  6813  0355  0879               	movf	?___awtoft+1,w
  6814  0356  00A4               	movwf	___ftdiv@f1+1
  6815  0357  087A               	movf	?___awtoft+2,w
  6816  0358  00A5               	movwf	___ftdiv@f1+2
  6817  0359  3078               	movlw	120
  6818  035A  00A0               	movwf	___ftdiv@f2
  6819  035B  300B               	movlw	11
  6820  035C  00A1               	movwf	___ftdiv@f2+1
  6821  035D  303F               	movlw	63
  6822  035E  00A2               	movwf	___ftdiv@f2+2
  6823  035F  3189  21D6  3182   	fcall	___ftdiv
  6824  0362  0020               	movlb	0	; select bank0
  6825  0363  0820               	movf	?___ftdiv,w
  6826  0364  00B0               	movwf	___fttol@f1
  6827  0365  0821               	movf	?___ftdiv+1,w
  6828  0366  00B1               	movwf	___fttol@f1+1
  6829  0367  0822               	movf	?___ftdiv+2,w
  6830  0368  00B2               	movwf	___fttol@f1+2
  6831  0369  3189  214F  3182   	fcall	___fttol
  6832  036C  0020               	movlb	0	; select bank0
  6833  036D  0831               	movf	?___fttol+1,w
  6834  036E  0021               	movlb	1	; select bank1
  6835  036F  00B1               	movwf	(_voltage+1)^(0+128)
  6836  0370  0020               	movlb	0	; select bank0
  6837  0371  0830               	movf	?___fttol,w
  6838  0372  0021               	movlb	1	; select bank1
  6839  0373  00B0               	movwf	_voltage^(0+128)
  6840                           
  6841                           ;main.c: 111: voltage[1]=(int16_t)(Vanalogs[1]/.540757);
  6842  0374  082B               	movf	((_Vanalogs+1)^(0+128)+2),w
  6843  0375  00F9               	movwf	___awtoft@c+1
  6844  0376  082A               	movf	(_Vanalogs^(0+128)+2),w
  6845  0377  00F8               	movwf	___awtoft@c
  6846  0378  3193  23F0  3182   	fcall	___awtoft
  6847  037B  0878               	movf	?___awtoft,w
  6848  037C  0020               	movlb	0	; select bank0
  6849  037D  00A3               	movwf	___ftdiv@f1
  6850  037E  0879               	movf	?___awtoft+1,w
  6851  037F  00A4               	movwf	___ftdiv@f1+1
  6852  0380  087A               	movf	?___awtoft+2,w
  6853  0381  00A5               	movwf	___ftdiv@f1+2
  6854  0382  306F               	movlw	111
  6855  0383  00A0               	movwf	___ftdiv@f2
  6856  0384  300A               	movlw	10
  6857  0385  00A1               	movwf	___ftdiv@f2+1
  6858  0386  303F               	movlw	63
  6859  0387  00A2               	movwf	___ftdiv@f2+2
  6860  0388  3189  21D6  3182   	fcall	___ftdiv
  6861  038B  0020               	movlb	0	; select bank0
  6862  038C  0820               	movf	?___ftdiv,w
  6863  038D  00B0               	movwf	___fttol@f1
  6864  038E  0821               	movf	?___ftdiv+1,w
  6865  038F  00B1               	movwf	___fttol@f1+1
  6866  0390  0822               	movf	?___ftdiv+2,w
  6867  0391  00B2               	movwf	___fttol@f1+2
  6868  0392  3189  214F  3182   	fcall	___fttol
  6869  0395  0020               	movlb	0	; select bank0
  6870  0396  0831               	movf	?___fttol+1,w
  6871  0397  0021               	movlb	1	; select bank1
  6872  0398  00B3               	movwf	((_voltage+1)^(0+128)+2)
  6873  0399  0020               	movlb	0	; select bank0
  6874  039A  0830               	movf	?___fttol,w
  6875  039B  0021               	movlb	1	; select bank1
  6876  039C  00B2               	movwf	(_voltage^(0+128)+2)
  6877                           
  6878                           ;main.c: 113: voltage[2]=(int16_t)(Vanalogs[2]/.405775);
  6879  039D  082D               	movf	((_Vanalogs+1)^(0+128)+4),w
  6880  039E  00F9               	movwf	___awtoft@c+1
  6881  039F  082C               	movf	(_Vanalogs^(0+128)+4),w
  6882  03A0  00F8               	movwf	___awtoft@c
  6883  03A1  3193  23F0  3182   	fcall	___awtoft
  6884  03A4  0878               	movf	?___awtoft,w
  6885  03A5  0020               	movlb	0	; select bank0
  6886  03A6  00A3               	movwf	___ftdiv@f1
  6887  03A7  0879               	movf	?___awtoft+1,w
  6888  03A8  00A4               	movwf	___ftdiv@f1+1
  6889  03A9  087A               	movf	?___awtoft+2,w
  6890  03AA  00A5               	movwf	___ftdiv@f1+2
  6891  03AB  30C2               	movlw	194
  6892  03AC  00A0               	movwf	___ftdiv@f2
  6893  03AD  30CF               	movlw	207
  6894  03AE  00A1               	movwf	___ftdiv@f2+1
  6895  03AF  303E               	movlw	62
  6896  03B0  00A2               	movwf	___ftdiv@f2+2
  6897  03B1  3189  21D6  3182   	fcall	___ftdiv
  6898  03B4  0020               	movlb	0	; select bank0
  6899  03B5  0820               	movf	?___ftdiv,w
  6900  03B6  00B0               	movwf	___fttol@f1
  6901  03B7  0821               	movf	?___ftdiv+1,w
  6902  03B8  00B1               	movwf	___fttol@f1+1
  6903  03B9  0822               	movf	?___ftdiv+2,w
  6904  03BA  00B2               	movwf	___fttol@f1+2
  6905  03BB  3189  214F  3182   	fcall	___fttol
  6906  03BE  0020               	movlb	0	; select bank0
  6907  03BF  0831               	movf	?___fttol+1,w
  6908  03C0  0021               	movlb	1	; select bank1
  6909  03C1  00B5               	movwf	((_voltage+1)^(0+128)+4)
  6910  03C2  0020               	movlb	0	; select bank0
  6911  03C3  0830               	movf	?___fttol,w
  6912  03C4  0021               	movlb	1	; select bank1
  6913  03C5  00B4               	movwf	(_voltage^(0+128)+4)
  6914                           
  6915                           ;main.c: 115: voltage[3]=(int16_t)(Vanalogs[3]/.406788);
  6916  03C6  082F               	movf	((_Vanalogs+1)^(0+128)+6),w
  6917  03C7  00F9               	movwf	___awtoft@c+1
  6918  03C8  082E               	movf	(_Vanalogs^(0+128)+6),w
  6919  03C9  00F8               	movwf	___awtoft@c
  6920  03CA  3193  23F0  3182   	fcall	___awtoft
  6921  03CD  0878               	movf	?___awtoft,w
  6922  03CE  0020               	movlb	0	; select bank0
  6923  03CF  00A3               	movwf	___ftdiv@f1
  6924  03D0  0879               	movf	?___awtoft+1,w
  6925  03D1  00A4               	movwf	___ftdiv@f1+1
  6926  03D2  087A               	movf	?___awtoft+2,w
  6927  03D3  00A5               	movwf	___ftdiv@f1+2
  6928  03D4  3047               	movlw	71
  6929  03D5  00A0               	movwf	___ftdiv@f2
  6930  03D6  30D0               	movlw	208
  6931  03D7  00A1               	movwf	___ftdiv@f2+1
  6932  03D8  303E               	movlw	62
  6933  03D9  00A2               	movwf	___ftdiv@f2+2
  6934  03DA  3189  21D6  3182   	fcall	___ftdiv
  6935  03DD  0020               	movlb	0	; select bank0
  6936  03DE  0820               	movf	?___ftdiv,w
  6937  03DF  00B0               	movwf	___fttol@f1
  6938  03E0  0821               	movf	?___ftdiv+1,w
  6939  03E1  00B1               	movwf	___fttol@f1+1
  6940  03E2  0822               	movf	?___ftdiv+2,w
  6941  03E3  00B2               	movwf	___fttol@f1+2
  6942  03E4  3189  214F  3182   	fcall	___fttol
  6943  03E7  0020               	movlb	0	; select bank0
  6944  03E8  0831               	movf	?___fttol+1,w
  6945  03E9  0021               	movlb	1	; select bank1
  6946  03EA  00B7               	movwf	((_voltage+1)^(0+128)+6)
  6947  03EB  0020               	movlb	0	; select bank0
  6948  03EC  0830               	movf	?___fttol,w
  6949  03ED  0021               	movlb	1	; select bank1
  6950  03EE  00B6               	movwf	(_voltage^(0+128)+6)
  6951                           
  6952                           ;main.c: 117: calculateCurrent0();
  6953  03EF  3195  25AA  3182   	fcall	_calculateCurrent0
  6954                           
  6955                           ;main.c: 119: calculateCurrent1();
  6956  03F2  3195  25EF  3182   	fcall	_calculateCurrent1
  6957                           
  6958                           ;main.c: 121: calculateCurrent2();
  6959  03F5  3188  2006  3182   	fcall	_calculateCurrent2
  6960                           
  6961                           ;main.c: 123: calculateCurrent3();
  6962  03F8  3180  2004  3182   	fcall	_calculateCurrent3
  6963                           
  6964                           ;main.c: 125: if(Imode[0])
  6965  03FB  0020               	movlb	0	; select bank0
  6966  03FC  0862               	movf	_Imode,w
  6967  03FD  1903               	btfsc	3,2
  6968  03FE  2C20               	goto	l3166
  6969                           
  6970                           ;main.c: 126: {
  6971                           ;main.c: 127: if(voltage[2]<MPPT0)
  6972  03FF  0021               	movlb	1	; select bank1
  6973  0400  0835               	movf	((_voltage+1)^(0+128)+4),w
  6974  0401  3A80               	xorlw	128
  6975  0402  0020               	movlb	0	; select bank0
  6976  0403  00D8               	movwf	??_main
  6977  0404  0021               	movlb	1	; select bank1
  6978  0405  0864               	movf	(main@MPPT0+1)^(0+128),w
  6979  0406  3A80               	xorlw	128
  6980  0407  0020               	movlb	0	; select bank0
  6981  0408  0258               	subwf	??_main,w
  6982  0409  1D03               	skipz
  6983  040A  2C0E               	goto	u3695
  6984  040B  0021               	movlb	1	; select bank1
  6985  040C  0863               	movf	main@MPPT0^(0+128),w
  6986  040D  0234               	subwf	(_voltage^(0+128)+4),w
  6987  040E                     u3695:	
  6988  040E  1C03               	btfss	3,0
  6989  040F  2C31               	goto	L1
  6990                           
  6991                           ;main.c: 134: else if(voltage[2]>MPPT0)
  6992                           
  6993                           ;main.c: 132: }
  6994                           ;main.c: 133: }
  6995                           
  6996                           ;main.c: 130: {
  6997                           ;main.c: 131: dutyCycle6+=1;
  6998                           
  6999                           ;main.c: 128: {
  7000                           ;main.c: 129: if(dutyCycle6<1023)
  7001  0410  0021               	movlb	1	; select bank1
  7002  0411  0864               	movf	(main@MPPT0+1)^(0+128),w
  7003  0412  3A80               	xorlw	128
  7004  0413  0020               	movlb	0	; select bank0
  7005  0414  00D8               	movwf	??_main
  7006  0415  0021               	movlb	1	; select bank1
  7007  0416  0835               	movf	((_voltage+1)^(0+128)+4),w
  7008  0417  3A80               	xorlw	128
  7009  0418  0020               	movlb	0	; select bank0
  7010  0419  0258               	subwf	??_main,w
  7011  041A  1D03               	skipz
  7012  041B  2C4B               	goto	u3755
  7013  041C  0021               	movlb	1	; select bank1
  7014  041D  0834               	movf	(_voltage^(0+128)+4),w
  7015  041E  0263               	subwf	main@MPPT0^(0+128),w
  7016  041F  2C4B               	goto	u3755
  7017  0420                     l3166:	
  7018                           ;main.c: 142: }
  7019                           
  7020                           ;main.c: 139: }
  7021                           ;main.c: 140: }
  7022                           
  7023                           ;main.c: 137: {
  7024                           ;main.c: 138: dutyCycle6-=1;
  7025                           
  7026                           ;main.c: 135: {
  7027                           ;main.c: 136: if(dutyCycle6>0)
  7028                           
  7029                           
  7030                           ;main.c: 143: else
  7031                           ;main.c: 144: {
  7032                           ;main.c: 145: if(voltage[0]>(int16_t)Vref[0])
  7033  0420  0020               	movlb	0	; select bank0
  7034  0421  085B               	movf	_Vref+1,w
  7035  0422  3A80               	xorlw	128
  7036  0423  00D8               	movwf	??_main
  7037  0424  0021               	movlb	1	; select bank1
  7038  0425  0831               	movf	(_voltage+1)^(0+128),w
  7039  0426  3A80               	xorlw	128
  7040  0427  0020               	movlb	0	; select bank0
  7041  0428  0258               	subwf	??_main,w
  7042  0429  1D03               	skipz
  7043  042A  2C2F               	goto	u3735
  7044  042B  0021               	movlb	1	; select bank1
  7045  042C  0830               	movf	_voltage^(0+128),w
  7046  042D  0020               	movlb	0	; select bank0
  7047  042E  025A               	subwf	_Vref,w
  7048  042F                     u3735:	
  7049  042F  1803               	skipnc
  7050  0430  2C3E               	goto	l3172
  7051  0431                     L1:	
  7052                           
  7053                           ;main.c: 146: {
  7054                           ;main.c: 147: if(dutyCycle6<1023) dutyCycle6+=1;
  7055  0431  3003               	movlw	3
  7056  0432  0021               	movlb	1	; select bank1
  7057  0433  026A               	subwf	(main@dutyCycle6+1)^(0+128),w
  7058  0434  30FF               	movlw	255
  7059  0435  1903               	skipnz
  7060  0436  0269               	subwf	main@dutyCycle6^(0+128),w
  7061  0437  1803               	skipnc
  7062  0438  2C56               	goto	l3178
  7063  0439  3001               	movlw	1
  7064  043A  07E9               	addwf	main@dutyCycle6^(0+128),f
  7065  043B  3000               	movlw	0
  7066  043C  3DEA               	addwfc	(main@dutyCycle6+1)^(0+128),f
  7067                           
  7068                           ;main.c: 148: }
  7069  043D  2C56               	goto	l3178
  7070  043E                     l3172:	
  7071                           
  7072                           ;main.c: 149: else if(voltage[0]<(int16_t)Vref[0])
  7073  043E  0021               	movlb	1	; select bank1
  7074  043F  0831               	movf	(_voltage+1)^(0+128),w
  7075  0440  3A80               	xorlw	128
  7076  0441  0020               	movlb	0	; select bank0
  7077  0442  00D8               	movwf	??_main
  7078  0443  085B               	movf	_Vref+1,w
  7079  0444  3A80               	xorlw	128
  7080  0445  0258               	subwf	??_main,w
  7081  0446  1D03               	skipz
  7082  0447  2C4B               	goto	u3755
  7083  0448  085A               	movf	_Vref,w
  7084  0449  0021               	movlb	1	; select bank1
  7085  044A  0230               	subwf	_voltage^(0+128),w
  7086  044B                     u3755:	
  7087  044B  1803               	skipnc
  7088  044C  2C56               	goto	l3178
  7089                           
  7090                           ;main.c: 150: {
  7091                           ;main.c: 151: if(dutyCycle6>0) dutyCycle6-=1;;
  7092  044D  0021               	movlb	1	; select bank1
  7093  044E  0869               	movf	main@dutyCycle6^(0+128),w
  7094  044F  046A               	iorwf	(main@dutyCycle6+1)^(0+128),w
  7095  0450  1903               	btfsc	3,2
  7096  0451  2C56               	goto	l3178
  7097  0452  3001               	movlw	1
  7098  0453  02E9               	subwf	main@dutyCycle6^(0+128),f
  7099  0454  3000               	movlw	0
  7100  0455  3BEA               	subwfb	(main@dutyCycle6+1)^(0+128),f
  7101  0456                     l3178:	
  7102                           ;main.c: 152: }
  7103                           
  7104                           
  7105                           ;main.c: 154: }
  7106                           ;main.c: 156: if(Imode[1])
  7107  0456  0020               	movlb	0	; select bank0
  7108  0457  0863               	movf	_Imode+1,w
  7109  0458  1903               	btfsc	3,2
  7110  0459  2C6C               	goto	l3190
  7111                           
  7112                           ;main.c: 157: {
  7113                           ;main.c: 158: if(voltage[3]<MPPT1)
  7114  045A  0021               	movlb	1	; select bank1
  7115  045B  0837               	movf	((_voltage+1)^(0+128)+6),w
  7116  045C  3A80               	xorlw	128
  7117  045D  0020               	movlb	0	; select bank0
  7118  045E  00D8               	movwf	??_main
  7119  045F  0021               	movlb	1	; select bank1
  7120  0460  0866               	movf	(main@MPPT1+1)^(0+128),w
  7121  0461  3A80               	xorlw	128
  7122  0462  0020               	movlb	0	; select bank0
  7123  0463  0258               	subwf	??_main,w
  7124  0464  1D03               	skipz
  7125  0465  2C69               	goto	u3785
  7126  0466  0021               	movlb	1	; select bank1
  7127  0467  0865               	movf	main@MPPT1^(0+128),w
  7128  0468  0236               	subwf	(_voltage^(0+128)+6),w
  7129  0469                     u3785:	
  7130  0469  1C03               	btfss	3,0
  7131  046A  2C7D               	goto	L2
  7132                           
  7133                           ;main.c: 163: }
  7134                           ;main.c: 164: }
  7135                           
  7136                           ;main.c: 161: {
  7137                           ;main.c: 162: dutyCycle7+=1;
  7138                           
  7139                           ;main.c: 159: {
  7140                           ;main.c: 160: if(dutyCycle7<1023)
  7141  046B  2C99               	goto	L3
  7142  046C                     l3190:	
  7143                           ;main.c: 168: }
  7144                           ;main.c: 169: }
  7145                           
  7146                           ;main.c: 166: {
  7147                           ;main.c: 167: dutyCycle7-=1;
  7148                           
  7149                           ;main.c: 165: else if(dutyCycle7>0)
  7150                           
  7151                           
  7152                           ;main.c: 170: else
  7153                           ;main.c: 171: {
  7154                           ;main.c: 172: if(voltage[1]>(int16_t)Vref[1])
  7155  046C  0020               	movlb	0	; select bank0
  7156  046D  085D               	movf	_Vref+3,w
  7157  046E  3A80               	xorlw	128
  7158  046F  00D8               	movwf	??_main
  7159  0470  0021               	movlb	1	; select bank1
  7160  0471  0833               	movf	((_voltage+1)^(0+128)+2),w
  7161  0472  3A80               	xorlw	128
  7162  0473  0020               	movlb	0	; select bank0
  7163  0474  0258               	subwf	??_main,w
  7164  0475  1D03               	skipz
  7165  0476  2C7B               	goto	u3815
  7166  0477  0021               	movlb	1	; select bank1
  7167  0478  0832               	movf	(_voltage^(0+128)+2),w
  7168  0479  0020               	movlb	0	; select bank0
  7169  047A  025C               	subwf	_Vref+2,w
  7170  047B                     u3815:	
  7171  047B  1803               	skipnc
  7172  047C  2C8A               	goto	l3196
  7173  047D                     L2:	
  7174                           
  7175                           ;main.c: 173: {
  7176                           ;main.c: 174: if(dutyCycle7<1023) dutyCycle7+=1;
  7177  047D  3003               	movlw	3
  7178  047E  0021               	movlb	1	; select bank1
  7179  047F  026C               	subwf	(main@dutyCycle7+1)^(0+128),w
  7180  0480  30FF               	movlw	255
  7181  0481  1903               	skipnz
  7182  0482  026B               	subwf	main@dutyCycle7^(0+128),w
  7183  0483  1803               	skipnc
  7184  0484  2CA2               	goto	l3202
  7185  0485  3001               	movlw	1
  7186  0486  07EB               	addwf	main@dutyCycle7^(0+128),f
  7187  0487  3000               	movlw	0
  7188  0488  3DEC               	addwfc	(main@dutyCycle7+1)^(0+128),f
  7189                           
  7190                           ;main.c: 175: }
  7191  0489  2CA2               	goto	l3202
  7192  048A                     l3196:	
  7193                           
  7194                           ;main.c: 176: else if(voltage[1]<(int16_t)Vref[1])
  7195  048A  0021               	movlb	1	; select bank1
  7196  048B  0833               	movf	((_voltage+1)^(0+128)+2),w
  7197  048C  3A80               	xorlw	128
  7198  048D  0020               	movlb	0	; select bank0
  7199  048E  00D8               	movwf	??_main
  7200  048F  085D               	movf	_Vref+3,w
  7201  0490  3A80               	xorlw	128
  7202  0491  0258               	subwf	??_main,w
  7203  0492  1D03               	skipz
  7204  0493  2C97               	goto	u3835
  7205  0494  085C               	movf	_Vref+2,w
  7206  0495  0021               	movlb	1	; select bank1
  7207  0496  0232               	subwf	(_voltage^(0+128)+2),w
  7208  0497                     u3835:	
  7209  0497  1803               	skipnc
  7210  0498  2CA2               	goto	l3202
  7211  0499                     L3:	
  7212                           
  7213                           ;main.c: 177: {
  7214                           ;main.c: 178: if(dutyCycle7>0) dutyCycle7-=1;;
  7215  0499  0021               	movlb	1	; select bank1
  7216  049A  086B               	movf	main@dutyCycle7^(0+128),w
  7217  049B  046C               	iorwf	(main@dutyCycle7+1)^(0+128),w
  7218  049C  1903               	btfsc	3,2
  7219  049D  2CA2               	goto	l3202
  7220  049E  3001               	movlw	1
  7221  049F  02EB               	subwf	main@dutyCycle7^(0+128),f
  7222  04A0  3000               	movlw	0
  7223  04A1  3BEC               	subwfb	(main@dutyCycle7+1)^(0+128),f
  7224  04A2                     l3202:	
  7225                           ;main.c: 179: }
  7226                           
  7227                           
  7228                           ;main.c: 181: }
  7229                           ;main.c: 183: slowLoop+=1;
  7230  04A2  3001               	movlw	1
  7231  04A3  0020               	movlb	0	; select bank0
  7232  04A4  00D8               	movwf	??_main
  7233  04A5  0858               	movf	??_main,w
  7234  04A6  0021               	movlb	1	; select bank1
  7235  04A7  07E1               	addwf	main@slowLoop^(0+128),f
  7236                           
  7237                           ;main.c: 186: PWM6_LoadDutyValue(dutyCycle6);
  7238  04A8  086A               	movf	(main@dutyCycle6+1)^(0+128),w
  7239  04A9  00F1               	movwf	PWM6_LoadDutyValue@dutyCycle6+1
  7240  04AA  0869               	movf	main@dutyCycle6^(0+128),w
  7241  04AB  00F0               	movwf	PWM6_LoadDutyValue@dutyCycle6
  7242  04AC  3193  236C  3182   	fcall	_PWM6_LoadDutyValue
  7243                           
  7244                           ;main.c: 187: PWM7_LoadDutyValue(dutyCycle7);
  7245  04AF  0021               	movlb	1	; select bank1
  7246  04B0  086C               	movf	(main@dutyCycle7+1)^(0+128),w
  7247  04B1  00F1               	movwf	PWM7_LoadDutyValue@dutyCycle7+1
  7248  04B2  086B               	movf	main@dutyCycle7^(0+128),w
  7249  04B3  00F0               	movwf	PWM7_LoadDutyValue@dutyCycle7
  7250  04B4  3193  2382  3182   	fcall	_PWM7_LoadDutyValue
  7251                           
  7252                           ;main.c: 189: menuButton = readButton();
  7253  04B7  3188  204B  3182   	fcall	_readButton
  7254  04BA  0020               	movlb	0	; select bank0
  7255  04BB  00D8               	movwf	??_main
  7256  04BC  0858               	movf	??_main,w
  7257  04BD  0021               	movlb	1	; select bank1
  7258  04BE  00E7               	movwf	main@menuButton^(0+128)
  7259                           
  7260                           ;main.c: 190: if(menuButton == 2) if(MPPT1>1375)MPPT1-=1;
  7261  04BF  3002               	movlw	2
  7262  04C0  0667               	xorwf	main@menuButton^(0+128),w
  7263  04C1  1D03               	btfss	3,2
  7264  04C2  2CD5               	goto	l3216
  7265  04C3  0866               	movf	(main@MPPT1+1)^(0+128),w
  7266  04C4  3A80               	xorlw	128
  7267  04C5  0020               	movlb	0	; select bank0
  7268  04C6  00D8               	movwf	??_main
  7269  04C7  3085               	movlw	133
  7270  04C8  0258               	subwf	??_main,w
  7271  04C9  1D03               	skipz
  7272  04CA  2CCE               	goto	u3865
  7273  04CB  3060               	movlw	96
  7274  04CC  0021               	movlb	1	; select bank1
  7275  04CD  0265               	subwf	main@MPPT1^(0+128),w
  7276  04CE                     u3865:	
  7277  04CE  1C03               	skipc
  7278  04CF  2CD5               	goto	l3216
  7279  04D0  30FF               	movlw	255
  7280  04D1  0021               	movlb	1	; select bank1
  7281  04D2  07E5               	addwf	main@MPPT1^(0+128),f
  7282  04D3  30FF               	movlw	255
  7283  04D4  3DE6               	addwfc	(main@MPPT1+1)^(0+128),f
  7284  04D5                     l3216:	
  7285                           
  7286                           ;main.c: 191: if(menuButton == 3)if(MPPT1<2200)MPPT1+=1;
  7287  04D5  3003               	movlw	3
  7288  04D6  0021               	movlb	1	; select bank1
  7289  04D7  0667               	xorwf	main@menuButton^(0+128),w
  7290  04D8  1D03               	btfss	3,2
  7291  04D9  2CEC               	goto	l3222
  7292  04DA  0866               	movf	(main@MPPT1+1)^(0+128),w
  7293  04DB  3A80               	xorlw	128
  7294  04DC  0020               	movlb	0	; select bank0
  7295  04DD  00D8               	movwf	??_main
  7296  04DE  3088               	movlw	136
  7297  04DF  0258               	subwf	??_main,w
  7298  04E0  1D03               	skipz
  7299  04E1  2CE5               	goto	u3885
  7300  04E2  3098               	movlw	152
  7301  04E3  0021               	movlb	1	; select bank1
  7302  04E4  0265               	subwf	main@MPPT1^(0+128),w
  7303  04E5                     u3885:	
  7304  04E5  1803               	skipnc
  7305  04E6  2CEC               	goto	l3222
  7306  04E7  3001               	movlw	1
  7307  04E8  0021               	movlb	1	; select bank1
  7308  04E9  07E5               	addwf	main@MPPT1^(0+128),f
  7309  04EA  3000               	movlw	0
  7310  04EB  3DE6               	addwfc	(main@MPPT1+1)^(0+128),f
  7311  04EC                     l3222:	
  7312                           
  7313                           ;main.c: 192: if(menuButton == 1)LCDInit();
  7314  04EC  0021               	movlb	1	; select bank1
  7315  04ED  0367               	decf	main@menuButton^(0+128),w
  7316  04EE  1D03               	btfss	3,2
  7317  04EF  2CF3               	goto	l3226
  7318  04F0  3194  24BE  3182   	fcall	_LCDInit
  7319  04F3                     l3226:	
  7320                           
  7321                           ;main.c: 196: if(slowLoop>250)
  7322  04F3  30FB               	movlw	251
  7323  04F4  0021               	movlb	1	; select bank1
  7324  04F5  0261               	subwf	main@slowLoop^(0+128),w
  7325  04F6  1C03               	skipc
  7326  04F7  2AE6               	goto	l3110
  7327                           
  7328                           ;main.c: 197: {
  7329                           ;main.c: 199: IOutTotal=current[0]+current[1];
  7330  04F8  0838               	movf	_current^(0+128),w
  7331  04F9  073A               	addwf	(_current^(0+128)+2),w
  7332  04FA  00DB               	movwf	main@IOutTotal^(0+128)
  7333  04FB  0839               	movf	(_current+1)^(0+128),w
  7334  04FC  3D3B               	addwfc	((_current+1)^(0+128)+2),w
  7335  04FD  00DC               	movwf	(main@IOutTotal+1)^(0+128)
  7336                           
  7337                           ;main.c: 219: ADREF = 0x00;
  7338  04FE  019A               	clrf	26	;volatile
  7339                           
  7340                           ;main.c: 220: batteryTemp=tempCalc(ADCRead(9));
  7341  04FF  3009               	movlw	9
  7342  0500  3193  2357  3182   	fcall	_ADCRead
  7343  0503  0871               	movf	?_ADCRead+1,w
  7344  0504  0020               	movlb	0	; select bank0
  7345  0505  00CE               	movwf	tempCalc@analogValue+1
  7346  0506  0870               	movf	?_ADCRead,w
  7347  0507  00CD               	movwf	tempCalc@analogValue
  7348  0508  318C  249C  3182   	fcall	_tempCalc
  7349  050B  0020               	movlb	0	; select bank0
  7350  050C  084E               	movf	?_tempCalc+1,w
  7351  050D  00ED               	movwf	_batteryTemp+1
  7352  050E  084D               	movf	?_tempCalc,w
  7353  050F  00EC               	movwf	_batteryTemp
  7354                           
  7355                           ;main.c: 221: ADREF = 0x03;
  7356  0510  3003               	movlw	3
  7357  0511  0021               	movlb	1	; select bank1
  7358  0512  009A               	movwf	26	;volatile
  7359                           
  7360                           ;main.c: 223: displayRefresh+=1;
  7361  0513  3001               	movlw	1
  7362  0514  0020               	movlb	0	; select bank0
  7363  0515  00D8               	movwf	??_main
  7364  0516  0858               	movf	??_main,w
  7365  0517  0021               	movlb	1	; select bank1
  7366  0518  07E2               	addwf	main@displayRefresh^(0+128),f
  7367                           
  7368                           ;main.c: 224: if(displayRefresh>80)
  7369  0519  3051               	movlw	81
  7370  051A  0262               	subwf	main@displayRefresh^(0+128),w
  7371  051B  1C03               	skipc
  7372  051C  2D22               	goto	l3244
  7373                           
  7374                           ;main.c: 225: {
  7375                           ;main.c: 226: LCDClear();
  7376  051D  3194  2435  3182   	fcall	_LCDClear
  7377                           
  7378                           ;main.c: 227: displayRefresh=0;
  7379  0520  0021               	movlb	1	; select bank1
  7380  0521  01E2               	clrf	main@displayRefresh^(0+128)
  7381  0522                     l3244:	
  7382                           
  7383                           ;main.c: 229: }
  7384                           ;main.c: 230: Battery_State_Machine(0);
  7385  0522  3000               	movlw	0
  7386  0523  3181  213F  3182   	fcall	_Battery_State_Machine
  7387                           
  7388                           ;main.c: 231: Battery_State_Machine(1);
  7389  0526  3001               	movlw	1
  7390  0527  3181  213F  3182   	fcall	_Battery_State_Machine
  7391                           
  7392                           ;main.c: 234: { gotoXY(0,0); LCDWriteString("In:");};
  7393  052A  01F5               	clrf	gotoXY@y
  7394  052B  3000               	movlw	0
  7395  052C  3193  231B  3182   	fcall	_gotoXY
  7396  052F  3025               	movlw	low (STR_1| (0+32768))
  7397  0530  00FC               	movwf	LCDWriteString@characters
  7398  0531  3098               	movlw	high (STR_1| (0+32768))
  7399  0532  00FD               	movwf	LCDWriteString@characters+1
  7400  0533  3193  232E  3182   	fcall	_LCDWriteString
  7401                           
  7402                           ;main.c: 235: { gotoXY(26,0); LCDWriteString("Out:");};
  7403  0536  01F5               	clrf	gotoXY@y
  7404  0537  301A               	movlw	26
  7405  0538  3193  231B  3182   	fcall	_gotoXY
  7406  053B  3020               	movlw	low (STR_2| (0+32768))
  7407  053C  00FC               	movwf	LCDWriteString@characters
  7408  053D  3098               	movlw	high (STR_2| (0+32768))
  7409  053E  00FD               	movwf	LCDWriteString@characters+1
  7410  053F  3193  232E  3182   	fcall	_LCDWriteString
  7411                           
  7412                           ;main.c: 236: { gotoXY(52,0); LCDWriteString("Ref:");};
  7413  0542  01F5               	clrf	gotoXY@y
  7414  0543  3034               	movlw	52
  7415  0544  3193  231B  3182   	fcall	_gotoXY
  7416  0547  301B               	movlw	low (STR_3| (0+32768))
  7417  0548  00FC               	movwf	LCDWriteString@characters
  7418  0549  3098               	movlw	high (STR_3| (0+32768))
  7419  054A  00FD               	movwf	LCDWriteString@characters+1
  7420  054B  3193  232E  3182   	fcall	_LCDWriteString
  7421                           
  7422                           ;main.c: 238: { gotoXY(0,1); LCDWriteInt(voltage[2],4, 2, 0);};
  7423  054E  01F5               	clrf	gotoXY@y
  7424  054F  0AF5               	incf	gotoXY@y,f
  7425  0550  3000               	movlw	0
  7426  0551  3193  231B  3182   	fcall	_gotoXY
  7427  0554  0021               	movlb	1	; select bank1
  7428  0555  0835               	movf	((_voltage+1)^(0+128)+4),w
  7429  0556  0020               	movlb	0	; select bank0
  7430  0557  00A1               	movwf	LCDWriteInt@value+1
  7431  0558  0021               	movlb	1	; select bank1
  7432  0559  0834               	movf	(_voltage^(0+128)+4),w
  7433  055A  0020               	movlb	0	; select bank0
  7434  055B  00A0               	movwf	LCDWriteInt@value
  7435  055C  3004               	movlw	4
  7436  055D  00D8               	movwf	??_main
  7437  055E  0858               	movf	??_main,w
  7438  055F  00A2               	movwf	LCDWriteInt@fieldLength
  7439  0560  3002               	movlw	2
  7440  0561  00D9               	movwf	??_main+1
  7441  0562  0859               	movf	??_main+1,w
  7442  0563  00A3               	movwf	LCDWriteInt@numPlaces
  7443  0564  01A4               	clrf	LCDWriteInt@sign
  7444  0565  318B  23E3  3182   	fcall	_LCDWriteInt
  7445                           
  7446                           ;main.c: 239: LCDWriteCharacter('V');
  7447  0568  3056               	movlw	86
  7448  0569  3196  2685  3182   	fcall	_LCDWriteCharacter
  7449                           
  7450                           ;main.c: 241: { gotoXY(26,1); LCDWriteInt(voltage[0],4, 2, 0);};
  7451  056C  01F5               	clrf	gotoXY@y
  7452  056D  0AF5               	incf	gotoXY@y,f
  7453  056E  301A               	movlw	26
  7454  056F  3193  231B  3182   	fcall	_gotoXY
  7455  0572  0021               	movlb	1	; select bank1
  7456  0573  0831               	movf	(_voltage+1)^(0+128),w
  7457  0574  0020               	movlb	0	; select bank0
  7458  0575  00A1               	movwf	LCDWriteInt@value+1
  7459  0576  0021               	movlb	1	; select bank1
  7460  0577  0830               	movf	_voltage^(0+128),w
  7461  0578  0020               	movlb	0	; select bank0
  7462  0579  00A0               	movwf	LCDWriteInt@value
  7463  057A  3004               	movlw	4
  7464  057B  00D8               	movwf	??_main
  7465  057C  0858               	movf	??_main,w
  7466  057D  00A2               	movwf	LCDWriteInt@fieldLength
  7467  057E  3002               	movlw	2
  7468  057F  00D9               	movwf	??_main+1
  7469  0580  0859               	movf	??_main+1,w
  7470  0581  00A3               	movwf	LCDWriteInt@numPlaces
  7471  0582  01A4               	clrf	LCDWriteInt@sign
  7472  0583  318B  23E3  3182   	fcall	_LCDWriteInt
  7473                           
  7474                           ;main.c: 242: LCDWriteCharacter('V');
  7475  0586  3056               	movlw	86
  7476  0587  3196  2685  3182   	fcall	_LCDWriteCharacter
  7477                           
  7478                           ;main.c: 244: { gotoXY(52,1); LCDWriteInt(Vref[0],4, 2, 0);};
  7479  058A  01F5               	clrf	gotoXY@y
  7480  058B  0AF5               	incf	gotoXY@y,f
  7481  058C  3034               	movlw	52
  7482  058D  3193  231B  3182   	fcall	_gotoXY
  7483  0590  0020               	movlb	0	; select bank0
  7484  0591  085B               	movf	_Vref+1,w
  7485  0592  00A1               	movwf	LCDWriteInt@value+1
  7486  0593  085A               	movf	_Vref,w
  7487  0594  00A0               	movwf	LCDWriteInt@value
  7488  0595  3004               	movlw	4
  7489  0596  00D8               	movwf	??_main
  7490  0597  0858               	movf	??_main,w
  7491  0598  00A2               	movwf	LCDWriteInt@fieldLength
  7492  0599  3002               	movlw	2
  7493  059A  00D9               	movwf	??_main+1
  7494  059B  0859               	movf	??_main+1,w
  7495  059C  00A3               	movwf	LCDWriteInt@numPlaces
  7496  059D  01A4               	clrf	LCDWriteInt@sign
  7497  059E  318B  23E3  3182   	fcall	_LCDWriteInt
  7498                           
  7499                           ;main.c: 245: LCDWriteCharacter('V');
  7500  05A1  3056               	movlw	86
  7501  05A2  3196  2685  3182   	fcall	_LCDWriteCharacter
  7502                           
  7503                           ;main.c: 247: { gotoXY(80,1); LCDWriteInt(Imode[0],1, 0, 0);};
  7504  05A5  01F5               	clrf	gotoXY@y
  7505  05A6  0AF5               	incf	gotoXY@y,f
  7506  05A7  3050               	movlw	80
  7507  05A8  3193  231B  3182   	fcall	_gotoXY
  7508  05AB  0020               	movlb	0	; select bank0
  7509  05AC  0862               	movf	_Imode,w
  7510  05AD  00A0               	movwf	LCDWriteInt@value
  7511  05AE  01A1               	clrf	LCDWriteInt@value+1
  7512  05AF  1BA0               	btfsc	LCDWriteInt@value,7
  7513  05B0  03A1               	decf	LCDWriteInt@value+1,f
  7514  05B1  01A2               	clrf	LCDWriteInt@fieldLength
  7515  05B2  0AA2               	incf	LCDWriteInt@fieldLength,f
  7516  05B3  01A3               	clrf	LCDWriteInt@numPlaces
  7517  05B4  01A4               	clrf	LCDWriteInt@sign
  7518  05B5  318B  23E3  3182   	fcall	_LCDWriteInt
  7519                           
  7520                           ;main.c: 249: { gotoXY(0,2); LCDWriteInt(current[2],3, 1, 0);};
  7521  05B8  3002               	movlw	2
  7522  05B9  0020               	movlb	0	; select bank0
  7523  05BA  00D8               	movwf	??_main
  7524  05BB  0858               	movf	??_main,w
  7525  05BC  00F5               	movwf	gotoXY@y
  7526  05BD  3000               	movlw	0
  7527  05BE  3193  231B  3182   	fcall	_gotoXY
  7528  05C1  0021               	movlb	1	; select bank1
  7529  05C2  083D               	movf	((_current+1)^(0+128)+4),w
  7530  05C3  0020               	movlb	0	; select bank0
  7531  05C4  00A1               	movwf	LCDWriteInt@value+1
  7532  05C5  0021               	movlb	1	; select bank1
  7533  05C6  083C               	movf	(_current^(0+128)+4),w
  7534  05C7  0020               	movlb	0	; select bank0
  7535  05C8  00A0               	movwf	LCDWriteInt@value
  7536  05C9  3003               	movlw	3
  7537  05CA  00D8               	movwf	??_main
  7538  05CB  0858               	movf	??_main,w
  7539  05CC  00A2               	movwf	LCDWriteInt@fieldLength
  7540  05CD  01A3               	clrf	LCDWriteInt@numPlaces
  7541  05CE  0AA3               	incf	LCDWriteInt@numPlaces,f
  7542  05CF  01A4               	clrf	LCDWriteInt@sign
  7543  05D0  318B  23E3  3182   	fcall	_LCDWriteInt
  7544                           
  7545                           ;main.c: 250: LCDWriteCharacter('A');
  7546  05D3  3041               	movlw	65
  7547  05D4  3196  2685  3182   	fcall	_LCDWriteCharacter
  7548                           
  7549                           ;main.c: 252: { gotoXY(26,2); LCDWriteInt(current[0],3, 1, 0);};
  7550  05D7  3002               	movlw	2
  7551  05D8  0020               	movlb	0	; select bank0
  7552  05D9  00D8               	movwf	??_main
  7553  05DA  0858               	movf	??_main,w
  7554  05DB  00F5               	movwf	gotoXY@y
  7555  05DC  301A               	movlw	26
  7556  05DD  3193  231B  3182   	fcall	_gotoXY
  7557  05E0  0021               	movlb	1	; select bank1
  7558  05E1  0839               	movf	(_current+1)^(0+128),w
  7559  05E2  0020               	movlb	0	; select bank0
  7560  05E3  00A1               	movwf	LCDWriteInt@value+1
  7561  05E4  0021               	movlb	1	; select bank1
  7562  05E5  0838               	movf	_current^(0+128),w
  7563  05E6  0020               	movlb	0	; select bank0
  7564  05E7  00A0               	movwf	LCDWriteInt@value
  7565  05E8  3003               	movlw	3
  7566  05E9  00D8               	movwf	??_main
  7567  05EA  0858               	movf	??_main,w
  7568  05EB  00A2               	movwf	LCDWriteInt@fieldLength
  7569  05EC  01A3               	clrf	LCDWriteInt@numPlaces
  7570  05ED  0AA3               	incf	LCDWriteInt@numPlaces,f
  7571  05EE  01A4               	clrf	LCDWriteInt@sign
  7572  05EF  318B  23E3  3182   	fcall	_LCDWriteInt
  7573                           
  7574                           ;main.c: 253: LCDWriteCharacter('A');
  7575  05F2  3041               	movlw	65
  7576  05F3  3196  2685  3182   	fcall	_LCDWriteCharacter
  7577                           
  7578                           ;main.c: 255: { gotoXY(52,2); LCDWriteInt(Iref[0],3, 1, 0);};
  7579  05F6  3002               	movlw	2
  7580  05F7  0020               	movlb	0	; select bank0
  7581  05F8  00D8               	movwf	??_main
  7582  05F9  0858               	movf	??_main,w
  7583  05FA  00F5               	movwf	gotoXY@y
  7584  05FB  3034               	movlw	52
  7585  05FC  3193  231B  3182   	fcall	_gotoXY
  7586  05FF  0021               	movlb	1	; select bank1
  7587  0600  0845               	movf	(_Iref+1)^(0+128),w
  7588  0601  0020               	movlb	0	; select bank0
  7589  0602  00A1               	movwf	LCDWriteInt@value+1
  7590  0603  0021               	movlb	1	; select bank1
  7591  0604  0844               	movf	_Iref^(0+128),w
  7592  0605  0020               	movlb	0	; select bank0
  7593  0606  00A0               	movwf	LCDWriteInt@value
  7594  0607  3003               	movlw	3
  7595  0608  00D8               	movwf	??_main
  7596  0609  0858               	movf	??_main,w
  7597  060A  00A2               	movwf	LCDWriteInt@fieldLength
  7598  060B  01A3               	clrf	LCDWriteInt@numPlaces
  7599  060C  0AA3               	incf	LCDWriteInt@numPlaces,f
  7600  060D  01A4               	clrf	LCDWriteInt@sign
  7601  060E  318B  23E3  3182   	fcall	_LCDWriteInt
  7602                           
  7603                           ;main.c: 256: LCDWriteCharacter('A');
  7604  0611  3041               	movlw	65
  7605  0612  3196  2685  3182   	fcall	_LCDWriteCharacter
  7606                           
  7607                           ;main.c: 258: { gotoXY(80,2); LCDWriteInt(batteryState[0],1, 0, 0);};
  7608  0615  3002               	movlw	2
  7609  0616  0020               	movlb	0	; select bank0
  7610  0617  00D8               	movwf	??_main
  7611  0618  0858               	movf	??_main,w
  7612  0619  00F5               	movwf	gotoXY@y
  7613  061A  3050               	movlw	80
  7614  061B  3193  231B  3182   	fcall	_gotoXY
  7615  061E  0020               	movlb	0	; select bank0
  7616  061F  0864               	movf	_batteryState,w
  7617  0620  00D8               	movwf	??_main
  7618  0621  01D9               	clrf	??_main+1
  7619  0622  0858               	movf	??_main,w
  7620  0623  00A0               	movwf	LCDWriteInt@value
  7621  0624  0859               	movf	??_main+1,w
  7622  0625  00A1               	movwf	LCDWriteInt@value+1
  7623  0626  01A2               	clrf	LCDWriteInt@fieldLength
  7624  0627  0AA2               	incf	LCDWriteInt@fieldLength,f
  7625  0628  01A3               	clrf	LCDWriteInt@numPlaces
  7626  0629  01A4               	clrf	LCDWriteInt@sign
  7627  062A  318B  23E3  3182   	fcall	_LCDWriteInt
  7628                           
  7629                           ;main.c: 260: { gotoXY(0,3); LCDWriteInt(voltage[3],4, 2, 0);};
  7630  062D  3003               	movlw	3
  7631  062E  0020               	movlb	0	; select bank0
  7632  062F  00D8               	movwf	??_main
  7633  0630  0858               	movf	??_main,w
  7634  0631  00F5               	movwf	gotoXY@y
  7635  0632  3000               	movlw	0
  7636  0633  3193  231B  3182   	fcall	_gotoXY
  7637  0636  0021               	movlb	1	; select bank1
  7638  0637  0837               	movf	((_voltage+1)^(0+128)+6),w
  7639  0638  0020               	movlb	0	; select bank0
  7640  0639  00A1               	movwf	LCDWriteInt@value+1
  7641  063A  0021               	movlb	1	; select bank1
  7642  063B  0836               	movf	(_voltage^(0+128)+6),w
  7643  063C  0020               	movlb	0	; select bank0
  7644  063D  00A0               	movwf	LCDWriteInt@value
  7645  063E  3004               	movlw	4
  7646  063F  00D8               	movwf	??_main
  7647  0640  0858               	movf	??_main,w
  7648  0641  00A2               	movwf	LCDWriteInt@fieldLength
  7649  0642  3002               	movlw	2
  7650  0643  00D9               	movwf	??_main+1
  7651  0644  0859               	movf	??_main+1,w
  7652  0645  00A3               	movwf	LCDWriteInt@numPlaces
  7653  0646  01A4               	clrf	LCDWriteInt@sign
  7654  0647  318B  23E3  3182   	fcall	_LCDWriteInt
  7655                           
  7656                           ;main.c: 261: LCDWriteCharacter('V');
  7657  064A  3056               	movlw	86
  7658  064B  3196  2685  3182   	fcall	_LCDWriteCharacter
  7659                           
  7660                           ;main.c: 263: { gotoXY(26,3); LCDWriteInt(voltage[1],4, 2, 0);};
  7661  064E  3003               	movlw	3
  7662  064F  0020               	movlb	0	; select bank0
  7663  0650  00D8               	movwf	??_main
  7664  0651  0858               	movf	??_main,w
  7665  0652  00F5               	movwf	gotoXY@y
  7666  0653  301A               	movlw	26
  7667  0654  3193  231B  3182   	fcall	_gotoXY
  7668  0657  0021               	movlb	1	; select bank1
  7669  0658  0833               	movf	((_voltage+1)^(0+128)+2),w
  7670  0659  0020               	movlb	0	; select bank0
  7671  065A  00A1               	movwf	LCDWriteInt@value+1
  7672  065B  0021               	movlb	1	; select bank1
  7673  065C  0832               	movf	(_voltage^(0+128)+2),w
  7674  065D  0020               	movlb	0	; select bank0
  7675  065E  00A0               	movwf	LCDWriteInt@value
  7676  065F  3004               	movlw	4
  7677  0660  00D8               	movwf	??_main
  7678  0661  0858               	movf	??_main,w
  7679  0662  00A2               	movwf	LCDWriteInt@fieldLength
  7680  0663  3002               	movlw	2
  7681  0664  00D9               	movwf	??_main+1
  7682  0665  0859               	movf	??_main+1,w
  7683  0666  00A3               	movwf	LCDWriteInt@numPlaces
  7684  0667  01A4               	clrf	LCDWriteInt@sign
  7685  0668  318B  23E3  3182   	fcall	_LCDWriteInt
  7686                           
  7687                           ;main.c: 264: LCDWriteCharacter('V');
  7688  066B  3056               	movlw	86
  7689  066C  3196  2685  3182   	fcall	_LCDWriteCharacter
  7690                           
  7691                           ;main.c: 266: { gotoXY(52,3); LCDWriteInt(Vref[1],4, 2, 0);};
  7692  066F  3003               	movlw	3
  7693  0670  0020               	movlb	0	; select bank0
  7694  0671  00D8               	movwf	??_main
  7695  0672  0858               	movf	??_main,w
  7696  0673  00F5               	movwf	gotoXY@y
  7697  0674  3034               	movlw	52
  7698  0675  3193  231B  3182   	fcall	_gotoXY
  7699  0678  0020               	movlb	0	; select bank0
  7700  0679  085D               	movf	_Vref+3,w
  7701  067A  00A1               	movwf	LCDWriteInt@value+1
  7702  067B  085C               	movf	_Vref+2,w
  7703  067C  00A0               	movwf	LCDWriteInt@value
  7704  067D  3004               	movlw	4
  7705  067E  00D8               	movwf	??_main
  7706  067F  0858               	movf	??_main,w
  7707  0680  00A2               	movwf	LCDWriteInt@fieldLength
  7708  0681  3002               	movlw	2
  7709  0682  00D9               	movwf	??_main+1
  7710  0683  0859               	movf	??_main+1,w
  7711  0684  00A3               	movwf	LCDWriteInt@numPlaces
  7712  0685  01A4               	clrf	LCDWriteInt@sign
  7713  0686  318B  23E3  3182   	fcall	_LCDWriteInt
  7714                           
  7715                           ;main.c: 267: LCDWriteCharacter('V');
  7716  0689  3056               	movlw	86
  7717  068A  3196  2685  3182   	fcall	_LCDWriteCharacter
  7718                           
  7719                           ;main.c: 269: { gotoXY(80,3); LCDWriteInt(Imode[1],1, 0, 0);};
  7720  068D  3003               	movlw	3
  7721  068E  0020               	movlb	0	; select bank0
  7722  068F  00D8               	movwf	??_main
  7723  0690  0858               	movf	??_main,w
  7724  0691  00F5               	movwf	gotoXY@y
  7725  0692  3050               	movlw	80
  7726  0693  3193  231B  3182   	fcall	_gotoXY
  7727  0696  0020               	movlb	0	; select bank0
  7728  0697  0863               	movf	_Imode+1,w
  7729  0698  00A0               	movwf	LCDWriteInt@value
  7730  0699  01A1               	clrf	LCDWriteInt@value+1
  7731  069A  1BA0               	btfsc	LCDWriteInt@value,7
  7732  069B  03A1               	decf	LCDWriteInt@value+1,f
  7733  069C  01A2               	clrf	LCDWriteInt@fieldLength
  7734  069D  0AA2               	incf	LCDWriteInt@fieldLength,f
  7735  069E  01A3               	clrf	LCDWriteInt@numPlaces
  7736  069F  01A4               	clrf	LCDWriteInt@sign
  7737  06A0  318B  23E3  3182   	fcall	_LCDWriteInt
  7738                           
  7739                           ;main.c: 271: { gotoXY(0,4); LCDWriteInt(current[3],3, 1, 0);};
  7740  06A3  3004               	movlw	4
  7741  06A4  0020               	movlb	0	; select bank0
  7742  06A5  00D8               	movwf	??_main
  7743  06A6  0858               	movf	??_main,w
  7744  06A7  00F5               	movwf	gotoXY@y
  7745  06A8  3000               	movlw	0
  7746  06A9  3193  231B  3182   	fcall	_gotoXY
  7747  06AC  0021               	movlb	1	; select bank1
  7748  06AD  083F               	movf	((_current+1)^(0+128)+6),w
  7749  06AE  0020               	movlb	0	; select bank0
  7750  06AF  00A1               	movwf	LCDWriteInt@value+1
  7751  06B0  0021               	movlb	1	; select bank1
  7752  06B1  083E               	movf	(_current^(0+128)+6),w
  7753  06B2  0020               	movlb	0	; select bank0
  7754  06B3  00A0               	movwf	LCDWriteInt@value
  7755  06B4  3003               	movlw	3
  7756  06B5  00D8               	movwf	??_main
  7757  06B6  0858               	movf	??_main,w
  7758  06B7  00A2               	movwf	LCDWriteInt@fieldLength
  7759  06B8  01A3               	clrf	LCDWriteInt@numPlaces
  7760  06B9  0AA3               	incf	LCDWriteInt@numPlaces,f
  7761  06BA  01A4               	clrf	LCDWriteInt@sign
  7762  06BB  318B  23E3  3182   	fcall	_LCDWriteInt
  7763                           
  7764                           ;main.c: 272: LCDWriteCharacter('A');
  7765  06BE  3041               	movlw	65
  7766  06BF  3196  2685  3182   	fcall	_LCDWriteCharacter
  7767                           
  7768                           ;main.c: 274: { gotoXY(26,4); LCDWriteInt(current[1],3, 1, 0);};
  7769  06C2  3004               	movlw	4
  7770  06C3  0020               	movlb	0	; select bank0
  7771  06C4  00D8               	movwf	??_main
  7772  06C5  0858               	movf	??_main,w
  7773  06C6  00F5               	movwf	gotoXY@y
  7774  06C7  301A               	movlw	26
  7775  06C8  3193  231B  3182   	fcall	_gotoXY
  7776  06CB  0021               	movlb	1	; select bank1
  7777  06CC  083B               	movf	((_current+1)^(0+128)+2),w
  7778  06CD  0020               	movlb	0	; select bank0
  7779  06CE  00A1               	movwf	LCDWriteInt@value+1
  7780  06CF  0021               	movlb	1	; select bank1
  7781  06D0  083A               	movf	(_current^(0+128)+2),w
  7782  06D1  0020               	movlb	0	; select bank0
  7783  06D2  00A0               	movwf	LCDWriteInt@value
  7784  06D3  3003               	movlw	3
  7785  06D4  00D8               	movwf	??_main
  7786  06D5  0858               	movf	??_main,w
  7787  06D6  00A2               	movwf	LCDWriteInt@fieldLength
  7788  06D7  01A3               	clrf	LCDWriteInt@numPlaces
  7789  06D8  0AA3               	incf	LCDWriteInt@numPlaces,f
  7790  06D9  01A4               	clrf	LCDWriteInt@sign
  7791  06DA  318B  23E3  3182   	fcall	_LCDWriteInt
  7792                           
  7793                           ;main.c: 275: LCDWriteCharacter('A');
  7794  06DD  3041               	movlw	65
  7795  06DE  3196  2685  3182   	fcall	_LCDWriteCharacter
  7796                           
  7797                           ;main.c: 277: { gotoXY(52,4); LCDWriteInt(Iref[1],3, 1, 0);};
  7798  06E1  3004               	movlw	4
  7799  06E2  0020               	movlb	0	; select bank0
  7800  06E3  00D8               	movwf	??_main
  7801  06E4  0858               	movf	??_main,w
  7802  06E5  00F5               	movwf	gotoXY@y
  7803  06E6  3034               	movlw	52
  7804  06E7  3193  231B  3182   	fcall	_gotoXY
  7805  06EA  0021               	movlb	1	; select bank1
  7806  06EB  0847               	movf	((_Iref+1)^(0+128)+2),w
  7807  06EC  0020               	movlb	0	; select bank0
  7808  06ED  00A1               	movwf	LCDWriteInt@value+1
  7809  06EE  0021               	movlb	1	; select bank1
  7810  06EF  0846               	movf	(_Iref^(0+128)+2),w
  7811  06F0  0020               	movlb	0	; select bank0
  7812  06F1  00A0               	movwf	LCDWriteInt@value
  7813  06F2  3003               	movlw	3
  7814  06F3  00D8               	movwf	??_main
  7815  06F4  0858               	movf	??_main,w
  7816  06F5  00A2               	movwf	LCDWriteInt@fieldLength
  7817  06F6  01A3               	clrf	LCDWriteInt@numPlaces
  7818  06F7  0AA3               	incf	LCDWriteInt@numPlaces,f
  7819  06F8  01A4               	clrf	LCDWriteInt@sign
  7820  06F9  318B  23E3  3182   	fcall	_LCDWriteInt
  7821                           
  7822                           ;main.c: 278: LCDWriteCharacter('A');
  7823  06FC  3041               	movlw	65
  7824  06FD  3196  2685  3182   	fcall	_LCDWriteCharacter
  7825                           
  7826                           ;main.c: 280: { gotoXY(80,4); LCDWriteInt(batteryState[1],1, 0, 0);};
  7827  0700  3004               	movlw	4
  7828  0701  0020               	movlb	0	; select bank0
  7829  0702  00D8               	movwf	??_main
  7830  0703  0858               	movf	??_main,w
  7831  0704  00F5               	movwf	gotoXY@y
  7832  0705  3050               	movlw	80
  7833  0706  3193  231B  3182   	fcall	_gotoXY
  7834  0709  0020               	movlb	0	; select bank0
  7835  070A  0865               	movf	_batteryState+1,w
  7836  070B  00D8               	movwf	??_main
  7837  070C  01D9               	clrf	??_main+1
  7838  070D  0858               	movf	??_main,w
  7839  070E  00A0               	movwf	LCDWriteInt@value
  7840  070F  0859               	movf	??_main+1,w
  7841  0710  00A1               	movwf	LCDWriteInt@value+1
  7842  0711  01A2               	clrf	LCDWriteInt@fieldLength
  7843  0712  0AA2               	incf	LCDWriteInt@fieldLength,f
  7844  0713  01A3               	clrf	LCDWriteInt@numPlaces
  7845  0714  01A4               	clrf	LCDWriteInt@sign
  7846  0715  318B  23E3  3182   	fcall	_LCDWriteInt
  7847                           
  7848                           ;main.c: 284: { gotoXY(0,5); LCDWriteInt(dutyCycle6,4, 0, 0);};
  7849  0718  3005               	movlw	5
  7850  0719  0020               	movlb	0	; select bank0
  7851  071A  00D8               	movwf	??_main
  7852  071B  0858               	movf	??_main,w
  7853  071C  00F5               	movwf	gotoXY@y
  7854  071D  3000               	movlw	0
  7855  071E  3193  231B  3182   	fcall	_gotoXY
  7856  0721  0021               	movlb	1	; select bank1
  7857  0722  086A               	movf	(main@dutyCycle6+1)^(0+128),w
  7858  0723  0020               	movlb	0	; select bank0
  7859  0724  00A1               	movwf	LCDWriteInt@value+1
  7860  0725  0021               	movlb	1	; select bank1
  7861  0726  0869               	movf	main@dutyCycle6^(0+128),w
  7862  0727  0020               	movlb	0	; select bank0
  7863  0728  00A0               	movwf	LCDWriteInt@value
  7864  0729  3004               	movlw	4
  7865  072A  00D8               	movwf	??_main
  7866  072B  0858               	movf	??_main,w
  7867  072C  00A2               	movwf	LCDWriteInt@fieldLength
  7868  072D  01A3               	clrf	LCDWriteInt@numPlaces
  7869  072E  01A4               	clrf	LCDWriteInt@sign
  7870  072F  318B  23E3  3182   	fcall	_LCDWriteInt
  7871                           
  7872                           ;main.c: 285: { gotoXY(18,5); LCDWriteInt(VHoldMode[0],1, 0, 0);};
  7873  0732  3005               	movlw	5
  7874  0733  0020               	movlb	0	; select bank0
  7875  0734  00D8               	movwf	??_main
  7876  0735  0858               	movf	??_main,w
  7877  0736  00F5               	movwf	gotoXY@y
  7878  0737  3012               	movlw	18
  7879  0738  3193  231B  3182   	fcall	_gotoXY
  7880  073B  0020               	movlb	0	; select bank0
  7881  073C  0860               	movf	_VHoldMode,w
  7882  073D  00A0               	movwf	LCDWriteInt@value
  7883  073E  01A1               	clrf	LCDWriteInt@value+1
  7884  073F  1BA0               	btfsc	LCDWriteInt@value,7
  7885  0740  03A1               	decf	LCDWriteInt@value+1,f
  7886  0741  01A2               	clrf	LCDWriteInt@fieldLength
  7887  0742  0AA2               	incf	LCDWriteInt@fieldLength,f
  7888  0743  01A3               	clrf	LCDWriteInt@numPlaces
  7889  0744  01A4               	clrf	LCDWriteInt@sign
  7890  0745  318B  23E3  3182   	fcall	_LCDWriteInt
  7891                           
  7892                           ;main.c: 286: LCDWriteCharacter(' ');
  7893  0748  3020               	movlw	32
  7894  0749  3196  2685  3182   	fcall	_LCDWriteCharacter
  7895                           
  7896                           ;main.c: 287: { gotoXY(28,5); LCDWriteInt(dutyCycle7,4, 0, 0);};
  7897  074C  3005               	movlw	5
  7898  074D  0020               	movlb	0	; select bank0
  7899  074E  00D8               	movwf	??_main
  7900  074F  0858               	movf	??_main,w
  7901  0750  00F5               	movwf	gotoXY@y
  7902  0751  301C               	movlw	28
  7903  0752  3193  231B  3182   	fcall	_gotoXY
  7904  0755  0021               	movlb	1	; select bank1
  7905  0756  086C               	movf	(main@dutyCycle7+1)^(0+128),w
  7906  0757  0020               	movlb	0	; select bank0
  7907  0758  00A1               	movwf	LCDWriteInt@value+1
  7908  0759  0021               	movlb	1	; select bank1
  7909  075A  086B               	movf	main@dutyCycle7^(0+128),w
  7910  075B  0020               	movlb	0	; select bank0
  7911  075C  00A0               	movwf	LCDWriteInt@value
  7912  075D  3004               	movlw	4
  7913  075E  00D8               	movwf	??_main
  7914  075F  0858               	movf	??_main,w
  7915  0760  00A2               	movwf	LCDWriteInt@fieldLength
  7916  0761  01A3               	clrf	LCDWriteInt@numPlaces
  7917  0762  01A4               	clrf	LCDWriteInt@sign
  7918  0763  318B  23E3  3182   	fcall	_LCDWriteInt
  7919                           
  7920                           ;main.c: 288: { gotoXY(46,5); LCDWriteInt(VHoldMode[1],1, 0, 0);};
  7921  0766  3005               	movlw	5
  7922  0767  0020               	movlb	0	; select bank0
  7923  0768  00D8               	movwf	??_main
  7924  0769  0858               	movf	??_main,w
  7925  076A  00F5               	movwf	gotoXY@y
  7926  076B  302E               	movlw	46
  7927  076C  3193  231B  3182   	fcall	_gotoXY
  7928  076F  0020               	movlb	0	; select bank0
  7929  0770  0861               	movf	_VHoldMode+1,w
  7930  0771  00A0               	movwf	LCDWriteInt@value
  7931  0772  01A1               	clrf	LCDWriteInt@value+1
  7932  0773  1BA0               	btfsc	LCDWriteInt@value,7
  7933  0774  03A1               	decf	LCDWriteInt@value+1,f
  7934  0775  01A2               	clrf	LCDWriteInt@fieldLength
  7935  0776  0AA2               	incf	LCDWriteInt@fieldLength,f
  7936  0777  01A3               	clrf	LCDWriteInt@numPlaces
  7937  0778  01A4               	clrf	LCDWriteInt@sign
  7938  0779  318B  23E3  3182   	fcall	_LCDWriteInt
  7939                           
  7940                           ;main.c: 289: LCDWriteCharacter(' ');
  7941  077C  3020               	movlw	32
  7942  077D  3196  2685  3182   	fcall	_LCDWriteCharacter
  7943                           
  7944                           ;main.c: 290: { gotoXY(56,5); LCDWriteInt(batteryTemp,3, 1, 0);};
  7945  0780  3005               	movlw	5
  7946  0781  0020               	movlb	0	; select bank0
  7947  0782  00D8               	movwf	??_main
  7948  0783  0858               	movf	??_main,w
  7949  0784  00F5               	movwf	gotoXY@y
  7950  0785  3038               	movlw	56
  7951  0786  3193  231B  3182   	fcall	_gotoXY
  7952  0789  0020               	movlb	0	; select bank0
  7953  078A  086D               	movf	_batteryTemp+1,w
  7954  078B  00A1               	movwf	LCDWriteInt@value+1
  7955  078C  086C               	movf	_batteryTemp,w
  7956  078D  00A0               	movwf	LCDWriteInt@value
  7957  078E  3003               	movlw	3
  7958  078F  00D8               	movwf	??_main
  7959  0790  0858               	movf	??_main,w
  7960  0791  00A2               	movwf	LCDWriteInt@fieldLength
  7961  0792  01A3               	clrf	LCDWriteInt@numPlaces
  7962  0793  0AA3               	incf	LCDWriteInt@numPlaces,f
  7963  0794  01A4               	clrf	LCDWriteInt@sign
  7964  0795  318B  23E3  3182   	fcall	_LCDWriteInt
  7965                           
  7966                           ;main.c: 291: LCDWriteCharacter(123);
  7967  0798  307B               	movlw	123
  7968  0799  3196  2685  3182   	fcall	_LCDWriteCharacter
  7969                           
  7970                           ;main.c: 292: LCDWriteCharacter('C');
  7971  079C  3043               	movlw	67
  7972  079D  3196  2685  3182   	fcall	_LCDWriteCharacter
  7973                           
  7974                           ;main.c: 362: if(batteryState[0] > FINISHED)
  7975  07A0  3003               	movlw	3
  7976  07A1  0020               	movlb	0	; select bank0
  7977  07A2  0264               	subwf	_batteryState,w
  7978  07A3  1C03               	skipc
  7979  07A4  2FA9               	goto	l3380
  7980                           
  7981                           ;main.c: 363: {
  7982                           ;main.c: 364: cc_cv_mode(0);
  7983  07A5  3000               	movlw	0
  7984  07A6  318E  26C1  3182   	fcall	_cc_cv_mode
  7985  07A9                     l3380:	
  7986                           
  7987                           ;main.c: 365: }
  7988                           ;main.c: 366: if(batteryState[1] > FINISHED)
  7989  07A9  3003               	movlw	3
  7990  07AA  0020               	movlb	0	; select bank0
  7991  07AB  0265               	subwf	_batteryState+1,w
  7992  07AC  1C03               	skipc
  7993  07AD  2FB2               	goto	l3384
  7994                           
  7995                           ;main.c: 367: {
  7996                           ;main.c: 368: cc_cv_mode(1);
  7997  07AE  3001               	movlw	1
  7998  07AF  318E  26C1  3182   	fcall	_cc_cv_mode
  7999  07B2                     l3384:	
  8000                           
  8001                           ;main.c: 369: }
  8002                           ;main.c: 370: slowLoop=0;
  8003  07B2  0021               	movlb	1	; select bank1
  8004  07B3  01E1               	clrf	main@slowLoop^(0+128)
  8005  07B4  2AE6               	goto	l3110
  8006  07B5                     __end_of_main:	
  8007                           
  8008                           	psect	text1
  8009  0C9C                     __ptext1:	
  8010 ;; *************** function _tempCalc *****************
  8011 ;; Defined at:
  8012 ;;		line 4 in file "tempCalc.c"
  8013 ;; Parameters:    Size  Location     Type
  8014 ;;  analogValue     2   45[BANK0 ] int 
  8015 ;; Auto vars:     Size  Location     Type
  8016 ;;  steinhart       3   53[BANK0 ] float 
  8017 ;;  R               3   47[BANK0 ] float 
  8018 ;; Return value:  Size  Location     Type
  8019 ;;                  2   45[BANK0 ] int 
  8020 ;; Registers used:
  8021 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8022 ;; Tracked objects:
  8023 ;;		On entry : 0/0
  8024 ;;		On exit  : 0/0
  8025 ;;		Unchanged: 0/0
  8026 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8027 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8028 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8029 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8030 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8031 ;;Total ram usage:       11 bytes
  8032 ;; Hardware stack levels used:    1
  8033 ;; Hardware stack levels required when called:    4
  8034 ;; This function calls:
  8035 ;;		___awtoft
  8036 ;;		___ftadd
  8037 ;;		___ftdiv
  8038 ;;		___ftmul
  8039 ;;		___ftsub
  8040 ;;		___fttol
  8041 ;;		_log
  8042 ;; This function is called by:
  8043 ;;		_main
  8044 ;; This function uses a non-reentrant model
  8045 ;;
  8046                           
  8047                           
  8048                           ;psect for function _tempCalc
  8049  0C9C                     _tempCalc:	
  8050                           
  8051                           ;tempCalc.c: 6: float R, steinhart;
  8052                           ;tempCalc.c: 8: R=10030/(1023/(float)analogValue-1);
  8053                           
  8054                           ;incstack = 0
  8055                           ; Regs used in _tempCalc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8056  0C9C  3000               	movlw	0
  8057  0C9D  0020               	movlb	0	; select bank0
  8058  0C9E  00B0               	movwf	___ftadd@f1
  8059  0C9F  3080               	movlw	128
  8060  0CA0  00B1               	movwf	___ftadd@f1+1
  8061  0CA1  30BF               	movlw	191
  8062  0CA2  00B2               	movwf	___ftadd@f1+2
  8063  0CA3  084E               	movf	tempCalc@analogValue+1,w
  8064  0CA4  00F9               	movwf	___awtoft@c+1
  8065  0CA5  084D               	movf	tempCalc@analogValue,w
  8066  0CA6  00F8               	movwf	___awtoft@c
  8067  0CA7  3193  23F0  318C   	fcall	___awtoft
  8068  0CAA  0878               	movf	?___awtoft,w
  8069  0CAB  0020               	movlb	0	; select bank0
  8070  0CAC  00A0               	movwf	___ftdiv@f2
  8071  0CAD  0879               	movf	?___awtoft+1,w
  8072  0CAE  00A1               	movwf	___ftdiv@f2+1
  8073  0CAF  087A               	movf	?___awtoft+2,w
  8074  0CB0  00A2               	movwf	___ftdiv@f2+2
  8075  0CB1  30C0               	movlw	192
  8076  0CB2  00A3               	movwf	___ftdiv@f1
  8077  0CB3  307F               	movlw	127
  8078  0CB4  00A4               	movwf	___ftdiv@f1+1
  8079  0CB5  3044               	movlw	68
  8080  0CB6  00A5               	movwf	___ftdiv@f1+2
  8081  0CB7  3189  21D6  318C   	fcall	___ftdiv
  8082  0CBA  0020               	movlb	0	; select bank0
  8083  0CBB  0820               	movf	?___ftdiv,w
  8084  0CBC  00B3               	movwf	___ftadd@f2
  8085  0CBD  0821               	movf	?___ftdiv+1,w
  8086  0CBE  00B4               	movwf	___ftadd@f2+1
  8087  0CBF  0822               	movf	?___ftdiv+2,w
  8088  0CC0  00B5               	movwf	___ftadd@f2+2
  8089  0CC1  3180  2049  318C   	fcall	___ftadd
  8090  0CC4  0020               	movlb	0	; select bank0
  8091  0CC5  0830               	movf	?___ftadd,w
  8092  0CC6  00D2               	movwf	_tempCalc$1188
  8093  0CC7  0831               	movf	?___ftadd+1,w
  8094  0CC8  00D3               	movwf	_tempCalc$1188+1
  8095  0CC9  0832               	movf	?___ftadd+2,w
  8096  0CCA  00D4               	movwf	_tempCalc$1188+2
  8097                           
  8098                           ;tempCalc.c: 6: float R, steinhart;
  8099                           ;tempCalc.c: 8: R=10030/(1023/(float)analogValue-1);
  8100  0CCB  0852               	movf	_tempCalc$1188,w
  8101  0CCC  00A0               	movwf	___ftdiv@f2
  8102  0CCD  0853               	movf	_tempCalc$1188+1,w
  8103  0CCE  00A1               	movwf	___ftdiv@f2+1
  8104  0CCF  0854               	movf	_tempCalc$1188+2,w
  8105  0CD0  00A2               	movwf	___ftdiv@f2+2
  8106  0CD1  30B8               	movlw	184
  8107  0CD2  00A3               	movwf	___ftdiv@f1
  8108  0CD3  301C               	movlw	28
  8109  0CD4  00A4               	movwf	___ftdiv@f1+1
  8110  0CD5  3046               	movlw	70
  8111  0CD6  00A5               	movwf	___ftdiv@f1+2
  8112  0CD7  3189  21D6  318C   	fcall	___ftdiv
  8113  0CDA  0020               	movlb	0	; select bank0
  8114  0CDB  0820               	movf	?___ftdiv,w
  8115  0CDC  00CF               	movwf	tempCalc@R
  8116  0CDD  0821               	movf	?___ftdiv+1,w
  8117  0CDE  00D0               	movwf	tempCalc@R+1
  8118  0CDF  0822               	movf	?___ftdiv+2,w
  8119  0CE0  00D1               	movwf	tempCalc@R+2
  8120                           
  8121                           ;tempCalc.c: 10: steinhart=R/10010;
  8122  0CE1  3068               	movlw	104
  8123  0CE2  00A0               	movwf	___ftdiv@f2
  8124  0CE3  301C               	movlw	28
  8125  0CE4  00A1               	movwf	___ftdiv@f2+1
  8126  0CE5  3046               	movlw	70
  8127  0CE6  00A2               	movwf	___ftdiv@f2+2
  8128  0CE7  084F               	movf	tempCalc@R,w
  8129  0CE8  00A3               	movwf	___ftdiv@f1
  8130  0CE9  0850               	movf	tempCalc@R+1,w
  8131  0CEA  00A4               	movwf	___ftdiv@f1+1
  8132  0CEB  0851               	movf	tempCalc@R+2,w
  8133  0CEC  00A5               	movwf	___ftdiv@f1+2
  8134  0CED  3189  21D6  318C   	fcall	___ftdiv
  8135  0CF0  0020               	movlb	0	; select bank0
  8136  0CF1  0820               	movf	?___ftdiv,w
  8137  0CF2  00D5               	movwf	tempCalc@steinhart
  8138  0CF3  0821               	movf	?___ftdiv+1,w
  8139  0CF4  00D6               	movwf	tempCalc@steinhart+1
  8140  0CF5  0822               	movf	?___ftdiv+2,w
  8141  0CF6  00D7               	movwf	tempCalc@steinhart+2
  8142                           
  8143                           ;tempCalc.c: 11: steinhart=log(steinhart);
  8144  0CF7  0855               	movf	tempCalc@steinhart,w
  8145  0CF8  00C7               	movwf	log@x
  8146  0CF9  0856               	movf	tempCalc@steinhart+1,w
  8147  0CFA  00C8               	movwf	log@x+1
  8148  0CFB  0857               	movf	tempCalc@steinhart+2,w
  8149  0CFC  00C9               	movwf	log@x+2
  8150  0CFD  318A  227F  318C   	fcall	_log
  8151  0D00  0020               	movlb	0	; select bank0
  8152  0D01  0847               	movf	?_log,w
  8153  0D02  00D5               	movwf	tempCalc@steinhart
  8154  0D03  0848               	movf	?_log+1,w
  8155  0D04  00D6               	movwf	tempCalc@steinhart+1
  8156  0D05  0849               	movf	?_log+2,w
  8157  0D06  00D7               	movwf	tempCalc@steinhart+2
  8158                           
  8159                           ;tempCalc.c: 12: steinhart/=3795.3;
  8160  0D07  3035               	movlw	53
  8161  0D08  00A0               	movwf	___ftdiv@f2
  8162  0D09  306D               	movlw	109
  8163  0D0A  00A1               	movwf	___ftdiv@f2+1
  8164  0D0B  3045               	movlw	69
  8165  0D0C  00A2               	movwf	___ftdiv@f2+2
  8166  0D0D  0855               	movf	tempCalc@steinhart,w
  8167  0D0E  00A3               	movwf	___ftdiv@f1
  8168  0D0F  0856               	movf	tempCalc@steinhart+1,w
  8169  0D10  00A4               	movwf	___ftdiv@f1+1
  8170  0D11  0857               	movf	tempCalc@steinhart+2,w
  8171  0D12  00A5               	movwf	___ftdiv@f1+2
  8172  0D13  3189  21D6  318C   	fcall	___ftdiv
  8173  0D16  0020               	movlb	0	; select bank0
  8174  0D17  0820               	movf	?___ftdiv,w
  8175  0D18  00D5               	movwf	tempCalc@steinhart
  8176  0D19  0821               	movf	?___ftdiv+1,w
  8177  0D1A  00D6               	movwf	tempCalc@steinhart+1
  8178  0D1B  0822               	movf	?___ftdiv+2,w
  8179  0D1C  00D7               	movwf	tempCalc@steinhart+2
  8180                           
  8181                           ;tempCalc.c: 16: steinhart+=1.0/(25+273.15);
  8182  0D1D  30CF               	movlw	207
  8183  0D1E  00B0               	movwf	___ftadd@f1
  8184  0D1F  305B               	movlw	91
  8185  0D20  00B1               	movwf	___ftadd@f1+1
  8186  0D21  303B               	movlw	59
  8187  0D22  00B2               	movwf	___ftadd@f1+2
  8188  0D23  0855               	movf	tempCalc@steinhart,w
  8189  0D24  00B3               	movwf	___ftadd@f2
  8190  0D25  0856               	movf	tempCalc@steinhart+1,w
  8191  0D26  00B4               	movwf	___ftadd@f2+1
  8192  0D27  0857               	movf	tempCalc@steinhart+2,w
  8193  0D28  00B5               	movwf	___ftadd@f2+2
  8194  0D29  3180  2049  318C   	fcall	___ftadd
  8195  0D2C  0020               	movlb	0	; select bank0
  8196  0D2D  0830               	movf	?___ftadd,w
  8197  0D2E  00D5               	movwf	tempCalc@steinhart
  8198  0D2F  0831               	movf	?___ftadd+1,w
  8199  0D30  00D6               	movwf	tempCalc@steinhart+1
  8200  0D31  0832               	movf	?___ftadd+2,w
  8201  0D32  00D7               	movwf	tempCalc@steinhart+2
  8202                           
  8203                           ;tempCalc.c: 17: steinhart=1.0/steinhart;
  8204  0D33  0855               	movf	tempCalc@steinhart,w
  8205  0D34  00A0               	movwf	___ftdiv@f2
  8206  0D35  0856               	movf	tempCalc@steinhart+1,w
  8207  0D36  00A1               	movwf	___ftdiv@f2+1
  8208  0D37  0857               	movf	tempCalc@steinhart+2,w
  8209  0D38  00A2               	movwf	___ftdiv@f2+2
  8210  0D39  3000               	movlw	0
  8211  0D3A  00A3               	movwf	___ftdiv@f1
  8212  0D3B  3080               	movlw	128
  8213  0D3C  00A4               	movwf	___ftdiv@f1+1
  8214  0D3D  303F               	movlw	63
  8215  0D3E  00A5               	movwf	___ftdiv@f1+2
  8216  0D3F  3189  21D6  318C   	fcall	___ftdiv
  8217  0D42  0020               	movlb	0	; select bank0
  8218  0D43  0820               	movf	?___ftdiv,w
  8219  0D44  00D5               	movwf	tempCalc@steinhart
  8220  0D45  0821               	movf	?___ftdiv+1,w
  8221  0D46  00D6               	movwf	tempCalc@steinhart+1
  8222  0D47  0822               	movf	?___ftdiv+2,w
  8223  0D48  00D7               	movwf	tempCalc@steinhart+2
  8224                           
  8225                           ;tempCalc.c: 18: steinhart-=273.15;
  8226  0D49  3093               	movlw	147
  8227  0D4A  00BD               	movwf	___ftsub@f2
  8228  0D4B  3088               	movlw	136
  8229  0D4C  00BE               	movwf	___ftsub@f2+1
  8230  0D4D  3043               	movlw	67
  8231  0D4E  00BF               	movwf	___ftsub@f2+2
  8232  0D4F  0855               	movf	tempCalc@steinhart,w
  8233  0D50  00C0               	movwf	___ftsub@f1
  8234  0D51  0856               	movf	tempCalc@steinhart+1,w
  8235  0D52  00C1               	movwf	___ftsub@f1+1
  8236  0D53  0857               	movf	tempCalc@steinhart+2,w
  8237  0D54  00C2               	movwf	___ftsub@f1+2
  8238  0D55  3193  23B3  318C   	fcall	___ftsub
  8239  0D58  0020               	movlb	0	; select bank0
  8240  0D59  083D               	movf	?___ftsub,w
  8241  0D5A  00D5               	movwf	tempCalc@steinhart
  8242  0D5B  083E               	movf	?___ftsub+1,w
  8243  0D5C  00D6               	movwf	tempCalc@steinhart+1
  8244  0D5D  083F               	movf	?___ftsub+2,w
  8245  0D5E  00D7               	movwf	tempCalc@steinhart+2
  8246                           
  8247                           ;tempCalc.c: 20: steinhart*=10;
  8248  0D5F  3000               	movlw	0
  8249  0D60  00A0               	movwf	___ftmul@f1
  8250  0D61  3020               	movlw	32
  8251  0D62  00A1               	movwf	___ftmul@f1+1
  8252  0D63  3041               	movlw	65
  8253  0D64  00A2               	movwf	___ftmul@f1+2
  8254  0D65  0855               	movf	tempCalc@steinhart,w
  8255  0D66  00A3               	movwf	___ftmul@f2
  8256  0D67  0856               	movf	tempCalc@steinhart+1,w
  8257  0D68  00A4               	movwf	___ftmul@f2+1
  8258  0D69  0857               	movf	tempCalc@steinhart+2,w
  8259  0D6A  00A5               	movwf	___ftmul@f2+2
  8260  0D6B  318B  232F  318C   	fcall	___ftmul
  8261  0D6E  0020               	movlb	0	; select bank0
  8262  0D6F  0820               	movf	?___ftmul,w
  8263  0D70  00D5               	movwf	tempCalc@steinhart
  8264  0D71  0821               	movf	?___ftmul+1,w
  8265  0D72  00D6               	movwf	tempCalc@steinhart+1
  8266  0D73  0822               	movf	?___ftmul+2,w
  8267  0D74  00D7               	movwf	tempCalc@steinhart+2
  8268                           
  8269                           ;tempCalc.c: 24: return (int16_t)steinhart;
  8270  0D75  0855               	movf	tempCalc@steinhart,w
  8271  0D76  00B0               	movwf	___fttol@f1
  8272  0D77  0856               	movf	tempCalc@steinhart+1,w
  8273  0D78  00B1               	movwf	___fttol@f1+1
  8274  0D79  0857               	movf	tempCalc@steinhart+2,w
  8275  0D7A  00B2               	movwf	___fttol@f1+2
  8276  0D7B  3189  214F         	fcall	___fttol
  8277  0D7D  0020               	movlb	0	; select bank0
  8278  0D7E  0831               	movf	?___fttol+1,w
  8279  0D7F  00CE               	movwf	?_tempCalc+1
  8280  0D80  0830               	movf	?___fttol,w
  8281  0D81  00CD               	movwf	?_tempCalc
  8282  0D82  0008               	return
  8283  0D83                     __end_of_tempCalc:	
  8284                           
  8285                           	psect	text2
  8286  0A7F                     __ptext2:	
  8287 ;; *************** function _log *****************
  8288 ;; Defined at:
  8289 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\log.c"
  8290 ;; Parameters:    Size  Location     Type
  8291 ;;  x               3   39[BANK0 ] int 
  8292 ;; Auto vars:     Size  Location     Type
  8293 ;;  exponent        2   43[BANK0 ] int 
  8294 ;; Return value:  Size  Location     Type
  8295 ;;                  3   39[BANK0 ] int 
  8296 ;; Registers used:
  8297 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8298 ;; Tracked objects:
  8299 ;;		On entry : 0/0
  8300 ;;		On exit  : 0/0
  8301 ;;		Unchanged: 0/0
  8302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8303 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8304 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8305 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8306 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8307 ;;Total ram usage:        6 bytes
  8308 ;; Hardware stack levels used:    1
  8309 ;; Hardware stack levels required when called:    3
  8310 ;; This function calls:
  8311 ;;		___awtoft
  8312 ;;		___ftadd
  8313 ;;		___ftge
  8314 ;;		___ftmul
  8315 ;;		_eval_poly
  8316 ;;		_frexp
  8317 ;; This function is called by:
  8318 ;;		_tempCalc
  8319 ;; This function uses a non-reentrant model
  8320 ;;
  8321                           
  8322                           
  8323                           ;psect for function _log
  8324  0A7F                     _log:	
  8325                           
  8326                           ;incstack = 0
  8327                           ; Regs used in _log: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8328  0A7F  0020               	movlb	0	; select bank0
  8329  0A80  0847               	movf	log@x,w
  8330  0A81  00F0               	movwf	___ftge@ff1
  8331  0A82  0848               	movf	log@x+1,w
  8332  0A83  00F1               	movwf	___ftge@ff1+1
  8333  0A84  0849               	movf	log@x+2,w
  8334  0A85  00F2               	movwf	___ftge@ff1+2
  8335  0A86  3000               	movlw	0
  8336  0A87  00F3               	movwf	___ftge@ff2
  8337  0A88  3000               	movlw	0
  8338  0A89  00F4               	movwf	___ftge@ff2+1
  8339  0A8A  3000               	movlw	0
  8340  0A8B  00F5               	movwf	___ftge@ff2+2
  8341  0A8C  3195  2534  318A   	fcall	___ftge
  8342  0A8F  1803               	btfsc	3,0
  8343  0A90  2A9E               	goto	l2670
  8344  0A91  3021               	movlw	33
  8345  0A92  0021               	movlb	1	; select bank1
  8346  0A93  00D0               	movwf	_errno^(0+128)
  8347  0A94  3000               	movlw	0
  8348  0A95  00D1               	movwf	(_errno^(0+128)+1)
  8349  0A96  3000               	movlw	0
  8350  0A97  0020               	movlb	0	; select bank0
  8351  0A98  00C7               	movwf	?_log
  8352  0A99  3000               	movlw	0
  8353  0A9A  00C8               	movwf	?_log+1
  8354  0A9B  3000               	movlw	0
  8355  0A9C  00C9               	movwf	?_log+2
  8356  0A9D  0008               	return
  8357  0A9E                     l2670:	
  8358  0A9E  0020               	movlb	0	; select bank0
  8359  0A9F  0849               	movf	log@x+2,w
  8360  0AA0  0448               	iorwf	log@x+1,w
  8361  0AA1  0447               	iorwf	log@x,w
  8362  0AA2  1D03               	skipz
  8363  0AA3  2AB1               	goto	l2676
  8364  0AA4  3022               	movlw	34
  8365  0AA5  0021               	movlb	1	; select bank1
  8366  0AA6  00D0               	movwf	_errno^(0+128)
  8367  0AA7  3000               	movlw	0
  8368  0AA8  00D1               	movwf	(_errno^(0+128)+1)
  8369  0AA9  3000               	movlw	0
  8370  0AAA  0020               	movlb	0	; select bank0
  8371  0AAB  00C7               	movwf	?_log
  8372  0AAC  3000               	movlw	0
  8373  0AAD  00C8               	movwf	?_log+1
  8374  0AAE  3000               	movlw	0
  8375  0AAF  00C9               	movwf	?_log+2
  8376  0AB0  0008               	return
  8377  0AB1                     l2676:	
  8378  0AB1  3000               	movlw	0
  8379  0AB2  00B0               	movwf	___ftadd@f1
  8380  0AB3  3080               	movlw	128
  8381  0AB4  00B1               	movwf	___ftadd@f1+1
  8382  0AB5  30BF               	movlw	191
  8383  0AB6  00B2               	movwf	___ftadd@f1+2
  8384  0AB7  3000               	movlw	0
  8385  0AB8  00A0               	movwf	___ftmul@f1
  8386  0AB9  3000               	movlw	0
  8387  0ABA  00A1               	movwf	___ftmul@f1+1
  8388  0ABB  3040               	movlw	64
  8389  0ABC  00A2               	movwf	___ftmul@f1+2
  8390  0ABD  304B               	movlw	(low (log@exponent| 0))& (0+255)
  8391  0ABE  00CA               	movwf	??_log
  8392  0ABF  084A               	movf	??_log,w
  8393  0AC0  00F3               	movwf	frexp@eptr
  8394  0AC1  0847               	movf	log@x,w
  8395  0AC2  00F0               	movwf	frexp@value
  8396  0AC3  0848               	movf	log@x+1,w
  8397  0AC4  00F1               	movwf	frexp@value+1
  8398  0AC5  0849               	movf	log@x+2,w
  8399  0AC6  00F2               	movwf	frexp@value+2
  8400  0AC7  3195  256F  318A   	fcall	_frexp
  8401  0ACA  0870               	movf	?_frexp,w
  8402  0ACB  0020               	movlb	0	; select bank0
  8403  0ACC  00A3               	movwf	___ftmul@f2
  8404  0ACD  0871               	movf	?_frexp+1,w
  8405  0ACE  00A4               	movwf	___ftmul@f2+1
  8406  0ACF  0872               	movf	?_frexp+2,w
  8407  0AD0  00A5               	movwf	___ftmul@f2+2
  8408  0AD1  318B  232F  318A   	fcall	___ftmul
  8409  0AD4  0020               	movlb	0	; select bank0
  8410  0AD5  0820               	movf	?___ftmul,w
  8411  0AD6  00B3               	movwf	___ftadd@f2
  8412  0AD7  0821               	movf	?___ftmul+1,w
  8413  0AD8  00B4               	movwf	___ftadd@f2+1
  8414  0AD9  0822               	movf	?___ftmul+2,w
  8415  0ADA  00B5               	movwf	___ftadd@f2+2
  8416  0ADB  3180  2049  318A   	fcall	___ftadd
  8417  0ADE  0020               	movlb	0	; select bank0
  8418  0ADF  0830               	movf	?___ftadd,w
  8419  0AE0  00C7               	movwf	log@x
  8420  0AE1  0831               	movf	?___ftadd+1,w
  8421  0AE2  00C8               	movwf	log@x+1
  8422  0AE3  0832               	movf	?___ftadd+2,w
  8423  0AE4  00C9               	movwf	log@x+2
  8424  0AE5  30FF               	movlw	255
  8425  0AE6  07CB               	addwf	log@exponent,f
  8426  0AE7  30FF               	movlw	255
  8427  0AE8  3DCC               	addwfc	log@exponent+1,f
  8428  0AE9  0847               	movf	log@x,w
  8429  0AEA  00BD               	movwf	eval_poly@x
  8430  0AEB  0848               	movf	log@x+1,w
  8431  0AEC  00BE               	movwf	eval_poly@x+1
  8432  0AED  0849               	movf	log@x+2,w
  8433  0AEE  00BF               	movwf	eval_poly@x+2
  8434  0AEF  3000               	movlw	low (log@coeff| (0+32768))
  8435  0AF0  00C0               	movwf	eval_poly@d
  8436  0AF1  3098               	movlw	high (log@coeff| (0+32768))
  8437  0AF2  00C1               	movwf	eval_poly@d+1
  8438  0AF3  3008               	movlw	8
  8439  0AF4  00C2               	movwf	eval_poly@n
  8440  0AF5  3000               	movlw	0
  8441  0AF6  00C3               	movwf	eval_poly@n+1
  8442  0AF7  3196  26D9  318A   	fcall	_eval_poly
  8443  0AFA  0020               	movlb	0	; select bank0
  8444  0AFB  083D               	movf	?_eval_poly,w
  8445  0AFC  00C7               	movwf	log@x
  8446  0AFD  083E               	movf	?_eval_poly+1,w
  8447  0AFE  00C8               	movwf	log@x+1
  8448  0AFF  083F               	movf	?_eval_poly+2,w
  8449  0B00  00C9               	movwf	log@x+2
  8450  0B01  0847               	movf	log@x,w
  8451  0B02  00B0               	movwf	___ftadd@f1
  8452  0B03  0848               	movf	log@x+1,w
  8453  0B04  00B1               	movwf	___ftadd@f1+1
  8454  0B05  0849               	movf	log@x+2,w
  8455  0B06  00B2               	movwf	___ftadd@f1+2
  8456  0B07  3072               	movlw	114
  8457  0B08  00A0               	movwf	___ftmul@f1
  8458  0B09  3031               	movlw	49
  8459  0B0A  00A1               	movwf	___ftmul@f1+1
  8460  0B0B  303F               	movlw	63
  8461  0B0C  00A2               	movwf	___ftmul@f1+2
  8462  0B0D  084C               	movf	log@exponent+1,w
  8463  0B0E  00F9               	movwf	___awtoft@c+1
  8464  0B0F  084B               	movf	log@exponent,w
  8465  0B10  00F8               	movwf	___awtoft@c
  8466  0B11  3193  23F0  318A   	fcall	___awtoft
  8467  0B14  0878               	movf	?___awtoft,w
  8468  0B15  0020               	movlb	0	; select bank0
  8469  0B16  00A3               	movwf	___ftmul@f2
  8470  0B17  0879               	movf	?___awtoft+1,w
  8471  0B18  00A4               	movwf	___ftmul@f2+1
  8472  0B19  087A               	movf	?___awtoft+2,w
  8473  0B1A  00A5               	movwf	___ftmul@f2+2
  8474  0B1B  318B  232F  318A   	fcall	___ftmul
  8475  0B1E  0020               	movlb	0	; select bank0
  8476  0B1F  0820               	movf	?___ftmul,w
  8477  0B20  00B3               	movwf	___ftadd@f2
  8478  0B21  0821               	movf	?___ftmul+1,w
  8479  0B22  00B4               	movwf	___ftadd@f2+1
  8480  0B23  0822               	movf	?___ftmul+2,w
  8481  0B24  00B5               	movwf	___ftadd@f2+2
  8482  0B25  3180  2049         	fcall	___ftadd
  8483  0B27  0020               	movlb	0	; select bank0
  8484  0B28  0830               	movf	?___ftadd,w
  8485  0B29  00C7               	movwf	?_log
  8486  0B2A  0831               	movf	?___ftadd+1,w
  8487  0B2B  00C8               	movwf	?_log+1
  8488  0B2C  0832               	movf	?___ftadd+2,w
  8489  0B2D  00C9               	movwf	?_log+2
  8490  0B2E  0008               	return
  8491  0B2F                     __end_of_log:	
  8492                           
  8493                           	psect	text3
  8494  156F                     __ptext3:	
  8495 ;; *************** function _frexp *****************
  8496 ;; Defined at:
  8497 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
  8498 ;; Parameters:    Size  Location     Type
  8499 ;;  value           3    0[COMMON] int 
  8500 ;;  eptr            1    3[COMMON] PTR int 
  8501 ;;		 -> log@exponent(2), 
  8502 ;; Auto vars:     Size  Location     Type
  8503 ;;		None
  8504 ;; Return value:  Size  Location     Type
  8505 ;;                  3    0[COMMON] PTR int 
  8506 ;; Registers used:
  8507 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8508 ;; Tracked objects:
  8509 ;;		On entry : 0/0
  8510 ;;		On exit  : 0/0
  8511 ;;		Unchanged: 0/0
  8512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8513 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8514 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8515 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8516 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8517 ;;Total ram usage:        6 bytes
  8518 ;; Hardware stack levels used:    1
  8519 ;; This function calls:
  8520 ;;		Nothing
  8521 ;; This function is called by:
  8522 ;;		_log
  8523 ;; This function uses a non-reentrant model
  8524 ;;
  8525                           
  8526                           
  8527                           ;psect for function _frexp
  8528  156F                     _frexp:	
  8529                           
  8530                           ;incstack = 0
  8531                           ; Regs used in _frexp: [wreg+fsr1l+fsr1h+status,2+status,0]
  8532  156F  0872               	movf	frexp@value+2,w
  8533  1570  0471               	iorwf	frexp@value+1,w
  8534  1571  0470               	iorwf	frexp@value,w
  8535  1572  1D03               	skipz
  8536  1573  2D81               	goto	l2470
  8537  1574  0873               	movf	frexp@eptr,w
  8538  1575  0086               	movwf	6
  8539  1576  0187               	clrf	7
  8540  1577  3000               	movlw	0
  8541  1578  3FC0               	movwi [0]fsr1
  8542  1579  3FC1               	movwi [1]fsr1
  8543  157A  3000               	movlw	0
  8544  157B  00F0               	movwf	?_frexp
  8545  157C  3000               	movlw	0
  8546  157D  00F1               	movwf	?_frexp+1
  8547  157E  3000               	movlw	0
  8548  157F  00F2               	movwf	?_frexp+2
  8549  1580  0008               	return
  8550  1581                     l2470:	
  8551  1581  0872               	movf	frexp@value+2,w
  8552  1582  397F               	andlw	127
  8553  1583  00F4               	movwf	??_frexp
  8554  1584  01F5               	clrf	??_frexp+1
  8555  1585  35F4               	lslf	??_frexp,f
  8556  1586  0DF5               	rlf	??_frexp+1,f
  8557  1587  0873               	movf	frexp@eptr,w
  8558  1588  0086               	movwf	6
  8559  1589  0187               	clrf	7
  8560  158A  0874               	movf	??_frexp,w
  8561  158B  3FC0               	movwi [0]fsr1
  8562  158C  0875               	movf	??_frexp+1,w
  8563  158D  3FC1               	movwi [1]fsr1
  8564  158E  0D71               	rlf	frexp@value+1,w
  8565  158F  0D71               	rlf	frexp@value+1,w
  8566  1590  3901               	andlw	1
  8567  1591  00F4               	movwf	??_frexp
  8568  1592  01F5               	clrf	??_frexp+1
  8569  1593  0873               	movf	frexp@eptr,w
  8570  1594  0086               	movwf	6
  8571  1595  0187               	clrf	7
  8572  1596  0874               	movf	??_frexp,w
  8573  1597  0481               	iorwf	1,f
  8574  1598  3141               	addfsr 1,1
  8575  1599  0875               	movf	??_frexp+1,w
  8576  159A  0481               	iorwf	1,f
  8577  159B  0873               	movf	frexp@eptr,w
  8578  159C  0086               	movwf	6
  8579  159D  0187               	clrf	7
  8580  159E  3082               	movlw	130
  8581  159F  0781               	addwf	1,f
  8582  15A0  3141               	addfsr 1,1
  8583  15A1  30FF               	movlw	255
  8584  15A2  3D81               	addwfc	1,f
  8585  15A3  317F               	addfsr 1,-1
  8586  15A4  0872               	movf	frexp@value+2,w
  8587  15A5  3980               	andlw	-128
  8588  15A6  383F               	iorlw	63
  8589  15A7  00F2               	movwf	frexp@value+2
  8590  15A8  13F1               	bcf	frexp@value+1,7
  8591  15A9  0008               	return
  8592  15AA                     __end_of_frexp:	
  8593                           
  8594                           	psect	text4
  8595  16D9                     __ptext4:	
  8596 ;; *************** function _eval_poly *****************
  8597 ;; Defined at:
  8598 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\evalpoly.c"
  8599 ;; Parameters:    Size  Location     Type
  8600 ;;  x               3   29[BANK0 ] PTR int 
  8601 ;;  d               2   32[BANK0 ] PTR const 
  8602 ;;		 -> log@coeff(27), 
  8603 ;;  n               2   34[BANK0 ] int 
  8604 ;; Auto vars:     Size  Location     Type
  8605 ;;  res             3   36[BANK0 ] int 
  8606 ;; Return value:  Size  Location     Type
  8607 ;;                  3   29[BANK0 ] int 
  8608 ;; Registers used:
  8609 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8610 ;; Tracked objects:
  8611 ;;		On entry : 0/0
  8612 ;;		On exit  : 0/0
  8613 ;;		Unchanged: 0/0
  8614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8615 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8616 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8617 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8618 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8619 ;;Total ram usage:       10 bytes
  8620 ;; Hardware stack levels used:    1
  8621 ;; Hardware stack levels required when called:    2
  8622 ;; This function calls:
  8623 ;;		___ftadd
  8624 ;;		___ftmul
  8625 ;;		___wmul
  8626 ;; This function is called by:
  8627 ;;		_log
  8628 ;; This function uses a non-reentrant model
  8629 ;;
  8630                           
  8631                           
  8632                           ;psect for function _eval_poly
  8633  16D9                     _eval_poly:	
  8634                           
  8635                           ;incstack = 0
  8636                           ; Regs used in _eval_poly: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8637  16D9  0020               	movlb	0	; select bank0
  8638  16DA  0843               	movf	eval_poly@n+1,w
  8639  16DB  00F1               	movwf	___wmul@multiplier+1
  8640  16DC  0842               	movf	eval_poly@n,w
  8641  16DD  00F0               	movwf	___wmul@multiplier
  8642  16DE  3003               	movlw	3
  8643  16DF  00F2               	movwf	___wmul@multiplicand
  8644  16E0  3000               	movlw	0
  8645  16E1  00F3               	movwf	___wmul@multiplicand+1
  8646  16E2  3193  2398  3196   	fcall	___wmul
  8647  16E5  0020               	movlb	0	; select bank0
  8648  16E6  0840               	movf	eval_poly@d,w
  8649  16E7  0770               	addwf	?___wmul,w
  8650  16E8  0084               	movwf	4
  8651  16E9  0841               	movf	eval_poly@d+1,w
  8652  16EA  3D71               	addwfc	?___wmul+1,w
  8653  16EB  0085               	movwf	5
  8654  16EC  3F00               	moviw [0]fsr0
  8655  16ED  00C4               	movwf	eval_poly@res
  8656  16EE  3F01               	moviw [1]fsr0
  8657  16EF  00C5               	movwf	eval_poly@res+1
  8658  16F0  3F02               	moviw [2]fsr0
  8659  16F1                     L4:	
  8660  16F1  00C6               	movwf	eval_poly@res+2
  8661  16F2  0842               	movf	eval_poly@n,w
  8662  16F3  0443               	iorwf	eval_poly@n+1,w
  8663  16F4  1903               	btfsc	3,2
  8664  16F5  2F32               	goto	l2488
  8665  16F6  30FF               	movlw	255
  8666  16F7  07C2               	addwf	eval_poly@n,f
  8667  16F8  30FF               	movlw	255
  8668  16F9  3DC3               	addwfc	eval_poly@n+1,f
  8669  16FA  0843               	movf	eval_poly@n+1,w
  8670  16FB  00F1               	movwf	___wmul@multiplier+1
  8671  16FC  0842               	movf	eval_poly@n,w
  8672  16FD  00F0               	movwf	___wmul@multiplier
  8673  16FE  3003               	movlw	3
  8674  16FF  00F2               	movwf	___wmul@multiplicand
  8675  1700  3000               	movlw	0
  8676  1701  00F3               	movwf	___wmul@multiplicand+1
  8677  1702  3193  2398  3196   	fcall	___wmul
  8678  1705  0020               	movlb	0	; select bank0
  8679  1706  0840               	movf	eval_poly@d,w
  8680  1707  0770               	addwf	?___wmul,w
  8681  1708  0084               	movwf	4
  8682  1709  0841               	movf	eval_poly@d+1,w
  8683  170A  3D71               	addwfc	?___wmul+1,w
  8684  170B  0085               	movwf	5
  8685  170C  3F00               	moviw [0]fsr0
  8686  170D  00B0               	movwf	___ftadd@f1
  8687  170E  3F01               	moviw [1]fsr0
  8688  170F  00B1               	movwf	___ftadd@f1+1
  8689  1710  3F02               	moviw [2]fsr0
  8690  1711  00B2               	movwf	___ftadd@f1+2
  8691  1712  0844               	movf	eval_poly@res,w
  8692  1713  00A0               	movwf	___ftmul@f1
  8693  1714  0845               	movf	eval_poly@res+1,w
  8694  1715  00A1               	movwf	___ftmul@f1+1
  8695  1716  0846               	movf	eval_poly@res+2,w
  8696  1717  00A2               	movwf	___ftmul@f1+2
  8697  1718  083D               	movf	eval_poly@x,w
  8698  1719  00A3               	movwf	___ftmul@f2
  8699  171A  083E               	movf	eval_poly@x+1,w
  8700  171B  00A4               	movwf	___ftmul@f2+1
  8701  171C  083F               	movf	eval_poly@x+2,w
  8702  171D  00A5               	movwf	___ftmul@f2+2
  8703  171E  318B  232F  3196   	fcall	___ftmul
  8704  1721  0020               	movlb	0	; select bank0
  8705  1722  0820               	movf	?___ftmul,w
  8706  1723  00B3               	movwf	___ftadd@f2
  8707  1724  0821               	movf	?___ftmul+1,w
  8708  1725  00B4               	movwf	___ftadd@f2+1
  8709  1726  0822               	movf	?___ftmul+2,w
  8710  1727  00B5               	movwf	___ftadd@f2+2
  8711  1728  3180  2049  3196   	fcall	___ftadd
  8712  172B  0020               	movlb	0	; select bank0
  8713  172C  0830               	movf	?___ftadd,w
  8714  172D  00C4               	movwf	eval_poly@res
  8715  172E  0831               	movf	?___ftadd+1,w
  8716  172F  00C5               	movwf	eval_poly@res+1
  8717  1730  0832               	movf	?___ftadd+2,w
  8718  1731  2EF1               	goto	L4
  8719  1732                     l2488:	
  8720  1732  0844               	movf	eval_poly@res,w
  8721  1733  00BD               	movwf	?_eval_poly
  8722  1734  0845               	movf	eval_poly@res+1,w
  8723  1735  00BE               	movwf	?_eval_poly+1
  8724  1736  0846               	movf	eval_poly@res+2,w
  8725  1737  00BF               	movwf	?_eval_poly+2
  8726  1738  0008               	return
  8727  1739                     __end_of_eval_poly:	
  8728                           
  8729                           	psect	text5
  8730  1534                     __ptext5:	
  8731 ;; *************** function ___ftge *****************
  8732 ;; Defined at:
  8733 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
  8734 ;; Parameters:    Size  Location     Type
  8735 ;;  ff1             3    0[COMMON] float 
  8736 ;;  ff2             3    3[COMMON] float 
  8737 ;; Auto vars:     Size  Location     Type
  8738 ;;		None
  8739 ;; Return value:  Size  Location     Type
  8740 ;;		None               void
  8741 ;; Registers used:
  8742 ;;		wreg, status,2, status,0
  8743 ;; Tracked objects:
  8744 ;;		On entry : 0/0
  8745 ;;		On exit  : 0/0
  8746 ;;		Unchanged: 0/0
  8747 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8748 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8749 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8750 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8751 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8752 ;;Total ram usage:        9 bytes
  8753 ;; Hardware stack levels used:    1
  8754 ;; This function calls:
  8755 ;;		Nothing
  8756 ;; This function is called by:
  8757 ;;		_log
  8758 ;; This function uses a non-reentrant model
  8759 ;;
  8760                           
  8761                           
  8762                           ;psect for function ___ftge
  8763  1534                     ___ftge:	
  8764                           
  8765                           ;incstack = 0
  8766                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  8767  1534  1FF2               	btfss	___ftge@ff1+2,7
  8768  1535  2D4A               	goto	l2404
  8769  1536  0970               	comf	___ftge@ff1,w
  8770  1537  00F6               	movwf	??___ftge
  8771  1538  0971               	comf	___ftge@ff1+1,w
  8772  1539  00F7               	movwf	??___ftge+1
  8773  153A  0972               	comf	___ftge@ff1+2,w
  8774  153B  00F8               	movwf	??___ftge+2
  8775  153C  0AF6               	incf	??___ftge,f
  8776  153D  1903               	skipnz
  8777  153E  0AF7               	incf	??___ftge+1,f
  8778  153F  1903               	skipnz
  8779  1540  0AF8               	incf	??___ftge+2,f
  8780  1541  3000               	movlw	0
  8781  1542  0776               	addwf	??___ftge,w
  8782  1543  00F0               	movwf	___ftge@ff1
  8783  1544  3000               	movlw	0
  8784  1545  3D77               	addwfc	??___ftge+1,w
  8785  1546  00F1               	movwf	___ftge@ff1+1
  8786  1547  3080               	movlw	128
  8787  1548  3D78               	addwfc	??___ftge+2,w
  8788  1549  00F2               	movwf	___ftge@ff1+2
  8789  154A                     l2404:	
  8790  154A  1FF5               	btfss	___ftge@ff2+2,7
  8791  154B  2D60               	goto	l2408
  8792  154C  0973               	comf	___ftge@ff2,w
  8793  154D  00F6               	movwf	??___ftge
  8794  154E  0974               	comf	___ftge@ff2+1,w
  8795  154F  00F7               	movwf	??___ftge+1
  8796  1550  0975               	comf	___ftge@ff2+2,w
  8797  1551  00F8               	movwf	??___ftge+2
  8798  1552  0AF6               	incf	??___ftge,f
  8799  1553  1903               	skipnz
  8800  1554  0AF7               	incf	??___ftge+1,f
  8801  1555  1903               	skipnz
  8802  1556  0AF8               	incf	??___ftge+2,f
  8803  1557  3000               	movlw	0
  8804  1558  0776               	addwf	??___ftge,w
  8805  1559  00F3               	movwf	___ftge@ff2
  8806  155A  3000               	movlw	0
  8807  155B  3D77               	addwfc	??___ftge+1,w
  8808  155C  00F4               	movwf	___ftge@ff2+1
  8809  155D  3080               	movlw	128
  8810  155E  3D78               	addwfc	??___ftge+2,w
  8811  155F  00F5               	movwf	___ftge@ff2+2
  8812  1560                     l2408:	
  8813  1560  3080               	movlw	128
  8814  1561  06F2               	xorwf	___ftge@ff1+2,f
  8815  1562  3080               	movlw	128
  8816  1563  06F5               	xorwf	___ftge@ff2+2,f
  8817  1564  0875               	movf	___ftge@ff2+2,w
  8818  1565  0272               	subwf	___ftge@ff1+2,w
  8819  1566  1D03               	skipz
  8820  1567  0008               	return
  8821  1568  0874               	movf	___ftge@ff2+1,w
  8822  1569  0271               	subwf	___ftge@ff1+1,w
  8823  156A  1D03               	skipz
  8824  156B  0008               	return
  8825  156C  0873               	movf	___ftge@ff2,w
  8826  156D  0270               	subwf	___ftge@ff1,w
  8827  156E  0008               	return
  8828  156F                     __end_of___ftge:	
  8829                           
  8830                           	psect	text6
  8831  13B3                     __ptext6:	
  8832 ;; *************** function ___ftsub *****************
  8833 ;; Defined at:
  8834 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
  8835 ;; Parameters:    Size  Location     Type
  8836 ;;  f2              3   29[BANK0 ] float 
  8837 ;;  f1              3   32[BANK0 ] float 
  8838 ;; Auto vars:     Size  Location     Type
  8839 ;;		None
  8840 ;; Return value:  Size  Location     Type
  8841 ;;                  3   29[BANK0 ] float 
  8842 ;; Registers used:
  8843 ;;		wreg, status,2, status,0, pclath, cstack
  8844 ;; Tracked objects:
  8845 ;;		On entry : 0/0
  8846 ;;		On exit  : 0/0
  8847 ;;		Unchanged: 0/0
  8848 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8849 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8850 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8851 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8852 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8853 ;;Total ram usage:        6 bytes
  8854 ;; Hardware stack levels used:    1
  8855 ;; Hardware stack levels required when called:    2
  8856 ;; This function calls:
  8857 ;;		___ftadd
  8858 ;; This function is called by:
  8859 ;;		_tempCalc
  8860 ;; This function uses a non-reentrant model
  8861 ;;
  8862                           
  8863                           
  8864                           ;psect for function ___ftsub
  8865  13B3                     ___ftsub:	
  8866                           
  8867                           ;incstack = 0
  8868                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  8869  13B3  0020               	movlb	0	; select bank0
  8870  13B4  083F               	movf	___ftsub@f2+2,w
  8871  13B5  043E               	iorwf	___ftsub@f2+1,w
  8872  13B6  043D               	iorwf	___ftsub@f2,w
  8873  13B7  1903               	skipnz
  8874  13B8  2BBB               	goto	l2816
  8875  13B9  3080               	movlw	128
  8876  13BA  06BF               	xorwf	___ftsub@f2+2,f
  8877  13BB                     l2816:	
  8878  13BB  0840               	movf	___ftsub@f1,w
  8879  13BC  00B0               	movwf	___ftadd@f1
  8880  13BD  0841               	movf	___ftsub@f1+1,w
  8881  13BE  00B1               	movwf	___ftadd@f1+1
  8882  13BF  0842               	movf	___ftsub@f1+2,w
  8883  13C0  00B2               	movwf	___ftadd@f1+2
  8884  13C1  083D               	movf	___ftsub@f2,w
  8885  13C2  00B3               	movwf	___ftadd@f2
  8886  13C3  083E               	movf	___ftsub@f2+1,w
  8887  13C4  00B4               	movwf	___ftadd@f2+1
  8888  13C5  083F               	movf	___ftsub@f2+2,w
  8889  13C6  00B5               	movwf	___ftadd@f2+2
  8890  13C7  3180  2049         	fcall	___ftadd
  8891  13C9  0020               	movlb	0	; select bank0
  8892  13CA  0830               	movf	?___ftadd,w
  8893  13CB  00BD               	movwf	?___ftsub
  8894  13CC  0831               	movf	?___ftadd+1,w
  8895  13CD  00BE               	movwf	?___ftsub+1
  8896  13CE  0832               	movf	?___ftadd+2,w
  8897  13CF  00BF               	movwf	?___ftsub+2
  8898  13D0  0008               	return
  8899  13D1                     __end_of___ftsub:	
  8900                           
  8901                           	psect	text7
  8902  0049                     __ptext7:	
  8903 ;; *************** function ___ftadd *****************
  8904 ;; Defined at:
  8905 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
  8906 ;; Parameters:    Size  Location     Type
  8907 ;;  f1              3   16[BANK0 ] float 
  8908 ;;  f2              3   19[BANK0 ] float 
  8909 ;; Auto vars:     Size  Location     Type
  8910 ;;  exp1            1   28[BANK0 ] unsigned char 
  8911 ;;  exp2            1   27[BANK0 ] unsigned char 
  8912 ;;  sign            1   26[BANK0 ] unsigned char 
  8913 ;; Return value:  Size  Location     Type
  8914 ;;                  3   16[BANK0 ] float 
  8915 ;; Registers used:
  8916 ;;		wreg, status,2, status,0, pclath, cstack
  8917 ;; Tracked objects:
  8918 ;;		On entry : 0/0
  8919 ;;		On exit  : 0/0
  8920 ;;		Unchanged: 0/0
  8921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8922 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8923 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8924 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8925 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8926 ;;Total ram usage:       13 bytes
  8927 ;; Hardware stack levels used:    1
  8928 ;; Hardware stack levels required when called:    1
  8929 ;; This function calls:
  8930 ;;		___ftpack
  8931 ;; This function is called by:
  8932 ;;		_tempCalc
  8933 ;;		___ftsub
  8934 ;;		_log
  8935 ;;		_eval_poly
  8936 ;; This function uses a non-reentrant model
  8937 ;;
  8938                           
  8939                           
  8940                           ;psect for function ___ftadd
  8941  0049                     ___ftadd:	
  8942                           
  8943                           ;incstack = 0
  8944                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  8945  0049  0020               	movlb	0	; select bank0
  8946  004A  0830               	movf	___ftadd@f1,w
  8947  004B  00B6               	movwf	??___ftadd
  8948  004C  0831               	movf	___ftadd@f1+1,w
  8949  004D  00B7               	movwf	??___ftadd+1
  8950  004E  0832               	movf	___ftadd@f1+2,w
  8951  004F  00B8               	movwf	??___ftadd+2
  8952  0050  1003               	clrc
  8953  0051  0D37               	rlf	??___ftadd+1,w
  8954  0052  0D38               	rlf	??___ftadd+2,w
  8955  0053  00B9               	movwf	??___ftadd+3
  8956  0054  0839               	movf	??___ftadd+3,w
  8957  0055  00BC               	movwf	___ftadd@exp1
  8958  0056  0833               	movf	___ftadd@f2,w
  8959  0057  00B6               	movwf	??___ftadd
  8960  0058  0834               	movf	___ftadd@f2+1,w
  8961  0059  00B7               	movwf	??___ftadd+1
  8962  005A  0835               	movf	___ftadd@f2+2,w
  8963  005B  00B8               	movwf	??___ftadd+2
  8964  005C  1003               	clrc
  8965  005D  0D37               	rlf	??___ftadd+1,w
  8966  005E  0D38               	rlf	??___ftadd+2,w
  8967  005F  00B9               	movwf	??___ftadd+3
  8968  0060  0839               	movf	??___ftadd+3,w
  8969  0061  00BB               	movwf	___ftadd@exp2
  8970  0062  083C               	movf	___ftadd@exp1,w
  8971  0063  1903               	btfsc	3,2
  8972  0064  2871               	goto	l2272
  8973  0065  083B               	movf	___ftadd@exp2,w
  8974  0066  023C               	subwf	___ftadd@exp1,w
  8975  0067  1803               	skipnc
  8976  0068  2878               	goto	l2276
  8977  0069  033C               	decf	___ftadd@exp1,w
  8978  006A  3AFF               	xorlw	255
  8979  006B  073B               	addwf	___ftadd@exp2,w
  8980  006C  00B6               	movwf	??___ftadd
  8981  006D  3019               	movlw	25
  8982  006E  0236               	subwf	??___ftadd,w
  8983  006F  1C03               	skipc
  8984  0070  2878               	goto	l2276
  8985  0071                     l2272:	
  8986  0071  0833               	movf	___ftadd@f2,w
  8987  0072  00B0               	movwf	?___ftadd
  8988  0073  0834               	movf	___ftadd@f2+1,w
  8989  0074  00B1               	movwf	?___ftadd+1
  8990  0075  0835               	movf	___ftadd@f2+2,w
  8991  0076  00B2               	movwf	?___ftadd+2
  8992  0077  0008               	return
  8993  0078                     l2276:	
  8994  0078  083B               	movf	___ftadd@exp2,w
  8995  0079  1903               	btfsc	3,2
  8996  007A  0008               	return
  8997  007B  083C               	movf	___ftadd@exp1,w
  8998  007C  023B               	subwf	___ftadd@exp2,w
  8999  007D  1803               	skipnc
  9000  007E  2887               	goto	l2282
  9001  007F  033B               	decf	___ftadd@exp2,w
  9002  0080  3AFF               	xorlw	255
  9003  0081  073C               	addwf	___ftadd@exp1,w
  9004  0082  00B6               	movwf	??___ftadd
  9005  0083  3019               	movlw	25
  9006  0084  0236               	subwf	??___ftadd,w
  9007  0085  1803               	btfsc	3,0
  9008  0086  0008               	return
  9009  0087                     l2282:	
  9010  0087  3006               	movlw	6
  9011  0088  00B6               	movwf	??___ftadd
  9012  0089  0836               	movf	??___ftadd,w
  9013  008A  00BA               	movwf	___ftadd@sign
  9014  008B  1BB2               	btfsc	___ftadd@f1+2,7
  9015  008C  17BA               	bsf	___ftadd@sign,7
  9016  008D  1BB5               	btfsc	___ftadd@f2+2,7
  9017  008E  173A               	bsf	___ftadd@sign,6
  9018  008F  17B1               	bsf	___ftadd@f1+1,7
  9019  0090  30FF               	movlw	255
  9020  0091  05B0               	andwf	___ftadd@f1,f
  9021  0092  30FF               	movlw	255
  9022  0093  05B1               	andwf	___ftadd@f1+1,f
  9023  0094  3000               	movlw	0
  9024  0095  05B2               	andwf	___ftadd@f1+2,f
  9025  0096  17B4               	bsf	___ftadd@f2+1,7
  9026  0097  30FF               	movlw	255
  9027  0098  05B3               	andwf	___ftadd@f2,f
  9028  0099  30FF               	movlw	255
  9029  009A  05B4               	andwf	___ftadd@f2+1,f
  9030  009B  3000               	movlw	0
  9031  009C  05B5               	andwf	___ftadd@f2+2,f
  9032  009D  083B               	movf	___ftadd@exp2,w
  9033  009E  023C               	subwf	___ftadd@exp1,w
  9034  009F  1803               	skipnc
  9035  00A0  28C3               	goto	l2304
  9036  00A1                     l2294:	
  9037  00A1  3001               	movlw	1
  9038  00A2                     u2265:	
  9039  00A2  35B3               	lslf	___ftadd@f2,f
  9040  00A3  0DB4               	rlf	___ftadd@f2+1,f
  9041  00A4  0DB5               	rlf	___ftadd@f2+2,f
  9042  00A5  0B89               	decfsz	9,f
  9043  00A6  28A2               	goto	u2265
  9044  00A7  3001               	movlw	1
  9045  00A8  02BB               	subwf	___ftadd@exp2,f
  9046  00A9  083B               	movf	___ftadd@exp2,w
  9047  00AA  063C               	xorwf	___ftadd@exp1,w
  9048  00AB  1903               	skipnz
  9049  00AC  28BE               	goto	l2302
  9050  00AD  3001               	movlw	1
  9051  00AE  02BA               	subwf	___ftadd@sign,f
  9052  00AF  083A               	movf	___ftadd@sign,w
  9053  00B0  3907               	andlw	7
  9054  00B1  1903               	btfsc	3,2
  9055  00B2  28BE               	goto	l2302
  9056  00B3  28A1               	goto	l2294
  9057  00B4                     l2300:	
  9058  00B4  3001               	movlw	1
  9059  00B5                     u2295:	
  9060  00B5  36B2               	lsrf	___ftadd@f1+2,f
  9061  00B6  0CB1               	rrf	___ftadd@f1+1,f
  9062  00B7  0CB0               	rrf	___ftadd@f1,f
  9063  00B8  0B89               	decfsz	9,f
  9064  00B9  28B5               	goto	u2295
  9065  00BA  3001               	movlw	1
  9066  00BB  00B6               	movwf	??___ftadd
  9067  00BC  0836               	movf	??___ftadd,w
  9068  00BD  07BC               	addwf	___ftadd@exp1,f
  9069  00BE                     l2302:	
  9070  00BE  083C               	movf	___ftadd@exp1,w
  9071  00BF  063B               	xorwf	___ftadd@exp2,w
  9072  00C0  1903               	btfsc	3,2
  9073  00C1  28E8               	goto	l774
  9074  00C2  28B4               	goto	l2300
  9075  00C3                     l2304:	
  9076  00C3  083C               	movf	___ftadd@exp1,w
  9077  00C4  023B               	subwf	___ftadd@exp2,w
  9078  00C5  1803               	skipnc
  9079  00C6  28E8               	goto	l774
  9080  00C7                     l2306:	
  9081  00C7  3001               	movlw	1
  9082  00C8                     u2325:	
  9083  00C8  35B0               	lslf	___ftadd@f1,f
  9084  00C9  0DB1               	rlf	___ftadd@f1+1,f
  9085  00CA  0DB2               	rlf	___ftadd@f1+2,f
  9086  00CB  0B89               	decfsz	9,f
  9087  00CC  28C8               	goto	u2325
  9088  00CD  3001               	movlw	1
  9089  00CE  02BC               	subwf	___ftadd@exp1,f
  9090  00CF  083B               	movf	___ftadd@exp2,w
  9091  00D0  063C               	xorwf	___ftadd@exp1,w
  9092  00D1  1903               	skipnz
  9093  00D2  28E4               	goto	l2314
  9094  00D3  3001               	movlw	1
  9095  00D4  02BA               	subwf	___ftadd@sign,f
  9096  00D5  083A               	movf	___ftadd@sign,w
  9097  00D6  3907               	andlw	7
  9098  00D7  1903               	btfsc	3,2
  9099  00D8  28E4               	goto	l2314
  9100  00D9  28C7               	goto	l2306
  9101  00DA                     l2312:	
  9102  00DA  3001               	movlw	1
  9103  00DB                     u2355:	
  9104  00DB  36B5               	lsrf	___ftadd@f2+2,f
  9105  00DC  0CB4               	rrf	___ftadd@f2+1,f
  9106  00DD  0CB3               	rrf	___ftadd@f2,f
  9107  00DE  0B89               	decfsz	9,f
  9108  00DF  28DB               	goto	u2355
  9109  00E0  3001               	movlw	1
  9110  00E1  00B6               	movwf	??___ftadd
  9111  00E2  0836               	movf	??___ftadd,w
  9112  00E3  07BB               	addwf	___ftadd@exp2,f
  9113  00E4                     l2314:	
  9114  00E4  083C               	movf	___ftadd@exp1,w
  9115  00E5  063B               	xorwf	___ftadd@exp2,w
  9116  00E6  1D03               	skipz
  9117  00E7  28DA               	goto	l2312
  9118  00E8                     l774:	
  9119  00E8  1FBA               	btfss	___ftadd@sign,7
  9120  00E9  28FA               	goto	l2318
  9121  00EA  30FF               	movlw	255
  9122  00EB  06B0               	xorwf	___ftadd@f1,f
  9123  00EC  30FF               	movlw	255
  9124  00ED  06B1               	xorwf	___ftadd@f1+1,f
  9125  00EE  30FF               	movlw	255
  9126  00EF  06B2               	xorwf	___ftadd@f1+2,f
  9127  00F0  3001               	movlw	1
  9128  00F1  07B0               	addwf	___ftadd@f1,f
  9129  00F2  3000               	movlw	0
  9130  00F3  1803               	skipnc
  9131  00F4  3001               	movlw	1
  9132  00F5  07B1               	addwf	___ftadd@f1+1,f
  9133  00F6  3000               	movlw	0
  9134  00F7  1803               	skipnc
  9135  00F8  3001               	movlw	1
  9136  00F9  07B2               	addwf	___ftadd@f1+2,f
  9137  00FA                     l2318:	
  9138  00FA  1F3A               	btfss	___ftadd@sign,6
  9139  00FB  290C               	goto	l2322
  9140  00FC  30FF               	movlw	255
  9141  00FD  06B3               	xorwf	___ftadd@f2,f
  9142  00FE  30FF               	movlw	255
  9143  00FF  06B4               	xorwf	___ftadd@f2+1,f
  9144  0100  30FF               	movlw	255
  9145  0101  06B5               	xorwf	___ftadd@f2+2,f
  9146  0102  3001               	movlw	1
  9147  0103  07B3               	addwf	___ftadd@f2,f
  9148  0104  3000               	movlw	0
  9149  0105  1803               	skipnc
  9150  0106  3001               	movlw	1
  9151  0107  07B4               	addwf	___ftadd@f2+1,f
  9152  0108  3000               	movlw	0
  9153  0109  1803               	skipnc
  9154  010A  3001               	movlw	1
  9155  010B  07B5               	addwf	___ftadd@f2+2,f
  9156  010C                     l2322:	
  9157  010C  01BA               	clrf	___ftadd@sign
  9158  010D  0830               	movf	___ftadd@f1,w
  9159  010E  07B3               	addwf	___ftadd@f2,f
  9160  010F  0831               	movf	___ftadd@f1+1,w
  9161  0110  3DB4               	addwfc	___ftadd@f2+1,f
  9162  0111  0832               	movf	___ftadd@f1+2,w
  9163  0112  3DB5               	addwfc	___ftadd@f2+2,f
  9164  0113  1FB5               	btfss	___ftadd@f2+2,7
  9165  0114  2927               	goto	l2332
  9166  0115  30FF               	movlw	255
  9167  0116  06B3               	xorwf	___ftadd@f2,f
  9168  0117  30FF               	movlw	255
  9169  0118  06B4               	xorwf	___ftadd@f2+1,f
  9170  0119  30FF               	movlw	255
  9171  011A  06B5               	xorwf	___ftadd@f2+2,f
  9172  011B  3001               	movlw	1
  9173  011C  07B3               	addwf	___ftadd@f2,f
  9174  011D  3000               	movlw	0
  9175  011E  1803               	skipnc
  9176  011F  3001               	movlw	1
  9177  0120  07B4               	addwf	___ftadd@f2+1,f
  9178  0121  3000               	movlw	0
  9179  0122  1803               	skipnc
  9180  0123  3001               	movlw	1
  9181  0124  07B5               	addwf	___ftadd@f2+2,f
  9182  0125  01BA               	clrf	___ftadd@sign
  9183  0126  0ABA               	incf	___ftadd@sign,f
  9184  0127                     l2332:	
  9185  0127  0833               	movf	___ftadd@f2,w
  9186  0128  00F0               	movwf	___ftpack@arg
  9187  0129  0834               	movf	___ftadd@f2+1,w
  9188  012A  00F1               	movwf	___ftpack@arg+1
  9189  012B  0835               	movf	___ftadd@f2+2,w
  9190  012C  00F2               	movwf	___ftpack@arg+2
  9191  012D  083C               	movf	___ftadd@exp1,w
  9192  012E  00B6               	movwf	??___ftadd
  9193  012F  0836               	movf	??___ftadd,w
  9194  0130  00F3               	movwf	___ftpack@exp
  9195  0131  083A               	movf	___ftadd@sign,w
  9196  0132  00B7               	movwf	??___ftadd+1
  9197  0133  0837               	movf	??___ftadd+1,w
  9198  0134  00F4               	movwf	___ftpack@sign
  9199  0135  3197  279C         	fcall	___ftpack
  9200  0137  0870               	movf	?___ftpack,w
  9201  0138  0020               	movlb	0	; select bank0
  9202  0139  00B0               	movwf	?___ftadd
  9203  013A  0871               	movf	?___ftpack+1,w
  9204  013B  00B1               	movwf	?___ftadd+1
  9205  013C  0872               	movf	?___ftpack+2,w
  9206  013D  00B2               	movwf	?___ftadd+2
  9207  013E  0008               	return
  9208  013F                     __end_of___ftadd:	
  9209                           
  9210                           	psect	text8
  9211  0D83                     __ptext8:	
  9212 ;; *************** function _readIAnalog *****************
  9213 ;; Defined at:
  9214 ;;		line 77 in file "adc.c"
  9215 ;; Parameters:    Size  Location     Type
  9216 ;;  channel         2    6[BANK0 ] unsigned int 
  9217 ;; Auto vars:     Size  Location     Type
  9218 ;;  value           2   11[COMMON] int 
  9219 ;;  analog_chann    2    9[COMMON] unsigned int 
  9220 ;; Return value:  Size  Location     Type
  9221 ;;                  2    6[BANK0 ] int 
  9222 ;; Registers used:
  9223 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9224 ;; Tracked objects:
  9225 ;;		On entry : 0/0
  9226 ;;		On exit  : 0/0
  9227 ;;		Unchanged: 0/0
  9228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9229 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9230 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9231 ;;      Temps:          0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9232 ;;      Totals:         4      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9233 ;;Total ram usage:       24 bytes
  9234 ;; Hardware stack levels used:    1
  9235 ;; Hardware stack levels required when called:    1
  9236 ;; This function calls:
  9237 ;;		_ADCRead
  9238 ;;		___aldiv
  9239 ;;		___wmul
  9240 ;; This function is called by:
  9241 ;;		_main
  9242 ;; This function uses a non-reentrant model
  9243 ;;
  9244                           
  9245                           
  9246                           ;psect for function _readIAnalog
  9247  0D83                     _readIAnalog:	
  9248                           
  9249                           ;adc.c: 79: int16_t value;
  9250                           ;adc.c: 81: uint16_t analog_channel = channels[channel];
  9251                           
  9252                           ;incstack = 0
  9253                           ; Regs used in _readIAnalog: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9254  0D83  0020               	movlb	0	; select bank0
  9255  0D84  3526               	lslf	readIAnalog@channel,w
  9256  0D85  3E35               	addlw	(low (_channels| (0+256)))& (0+255)
  9257  0D86  0086               	movwf	6
  9258  0D87  3001               	movlw	1	; select bank2/3
  9259  0D88  0087               	movwf	7
  9260  0D89  3F40               	moviw [0]fsr1
  9261  0D8A  00F9               	movwf	readIAnalog@analog_channel
  9262  0D8B  3F41               	moviw [1]fsr1
  9263  0D8C  00FA               	movwf	readIAnalog@analog_channel+1
  9264                           
  9265                           ;adc.c: 83: value = ADCRead(analog_channel);
  9266  0D8D  0879               	movf	readIAnalog@analog_channel,w
  9267  0D8E  3193  2357  318D   	fcall	_ADCRead
  9268  0D91  0871               	movf	?_ADCRead+1,w
  9269  0D92  00FC               	movwf	readIAnalog@value+1
  9270  0D93  0870               	movf	?_ADCRead,w
  9271  0D94  00FB               	movwf	readIAnalog@value
  9272                           
  9273                           ;adc.c: 85: totals[channel] = totals[channel]-samples[channel][sampleIndex];
  9274  0D95  0020               	movlb	0	; select bank0
  9275  0D96  0826               	movf	readIAnalog@channel,w
  9276  0D97  00A8               	movwf	??_readIAnalog
  9277  0D98  3001               	movlw	1
  9278  0D99                     u3115:	
  9279  0D99  35A8               	lslf	??_readIAnalog,f
  9280  0D9A  3EFF               	addlw	-1
  9281  0D9B  1D03               	skipz
  9282  0D9C  2D99               	goto	u3115
  9283  0D9D  3528               	lslf	??_readIAnalog,w
  9284  0D9E  3E20               	addlw	(low (_totals| (0+256)))& (0+255)
  9285  0D9F  0086               	movwf	6
  9286  0DA0  3001               	movlw	1	; select bank2/3
  9287  0DA1  0087               	movwf	7
  9288  0DA2  3F40               	moviw [0]fsr1
  9289  0DA3  00A9               	movwf	??_readIAnalog+1
  9290  0DA4  3F41               	moviw [1]fsr1
  9291  0DA5  00AA               	movwf	??_readIAnalog+2
  9292  0DA6  3F42               	moviw [2]fsr1
  9293  0DA7  00AB               	movwf	??_readIAnalog+3
  9294  0DA8  3F43               	moviw [3]fsr1
  9295  0DA9  00AC               	movwf	??_readIAnalog+4
  9296  0DAA  0867               	movf	_sampleIndex+1,w
  9297  0DAB  00AE               	movwf	??_readIAnalog+6
  9298  0DAC  0866               	movf	_sampleIndex,w
  9299  0DAD  00AD               	movwf	??_readIAnalog+5
  9300  0DAE  35AD               	lslf	??_readIAnalog+5,f
  9301  0DAF  0DAE               	rlf	??_readIAnalog+6,f
  9302  0DB0  0827               	movf	readIAnalog@channel+1,w
  9303  0DB1  00F1               	movwf	___wmul@multiplier+1
  9304  0DB2  0826               	movf	readIAnalog@channel,w
  9305  0DB3  00F0               	movwf	___wmul@multiplier
  9306  0DB4  3064               	movlw	100
  9307  0DB5  00F2               	movwf	___wmul@multiplicand
  9308  0DB6  3000               	movlw	0
  9309  0DB7  00F3               	movwf	___wmul@multiplicand+1
  9310  0DB8  3193  2398  318D   	fcall	___wmul
  9311  0DBB  3060               	movlw	96
  9312  0DBC  0020               	movlb	0	; select bank0
  9313  0DBD  00AF               	movwf	??_readIAnalog+7
  9314  0DBE  3022               	movlw	34
  9315  0DBF  00B0               	movwf	??_readIAnalog+8
  9316  0DC0  0870               	movf	?___wmul,w
  9317  0DC1  072F               	addwf	??_readIAnalog+7,w
  9318  0DC2  00B1               	movwf	??_readIAnalog+9
  9319  0DC3  0871               	movf	?___wmul+1,w
  9320  0DC4  3D30               	addwfc	??_readIAnalog+8,w
  9321  0DC5  00B2               	movwf	??_readIAnalog+10
  9322  0DC6  082D               	movf	??_readIAnalog+5,w
  9323  0DC7  0731               	addwf	??_readIAnalog+9,w
  9324  0DC8  0086               	movwf	6
  9325  0DC9  082E               	movf	??_readIAnalog+6,w
  9326  0DCA  3D32               	addwfc	??_readIAnalog+10,w
  9327  0DCB  0087               	movwf	7
  9328  0DCC  3F40               	moviw [0]fsr1
  9329  0DCD  00B3               	movwf	??_readIAnalog+11
  9330  0DCE  3F41               	moviw [1]fsr1
  9331  0DCF  00B4               	movwf	??_readIAnalog+12
  9332  0DD0  0833               	movf	??_readIAnalog+11,w
  9333  0DD1  00B5               	movwf	??_readIAnalog+13
  9334  0DD2  0834               	movf	??_readIAnalog+12,w
  9335  0DD3  00B6               	movwf	??_readIAnalog+14
  9336  0DD4  3000               	movlw	0
  9337  0DD5  1BB6               	btfsc	??_readIAnalog+14,7
  9338  0DD6  30FF               	movlw	255
  9339  0DD7  00B7               	movwf	??_readIAnalog+15
  9340  0DD8  00B8               	movwf	??_readIAnalog+16
  9341  0DD9  09B5               	comf	??_readIAnalog+13,f
  9342  0DDA  09B6               	comf	??_readIAnalog+14,f
  9343  0DDB  09B7               	comf	??_readIAnalog+15,f
  9344  0DDC  09B8               	comf	??_readIAnalog+16,f
  9345  0DDD  0AB5               	incf	??_readIAnalog+13,f
  9346  0DDE  1903               	skipnz
  9347  0DDF  0AB6               	incf	??_readIAnalog+14,f
  9348  0DE0  1903               	skipnz
  9349  0DE1  0AB7               	incf	??_readIAnalog+15,f
  9350  0DE2  1903               	skipnz
  9351  0DE3  0AB8               	incf	??_readIAnalog+16,f
  9352  0DE4  0835               	movf	??_readIAnalog+13,w
  9353  0DE5  07A9               	addwf	??_readIAnalog+1,f
  9354  0DE6  0836               	movf	??_readIAnalog+14,w
  9355  0DE7  3DAA               	addwfc	??_readIAnalog+2,f
  9356  0DE8  0837               	movf	??_readIAnalog+15,w
  9357  0DE9  3DAB               	addwfc	??_readIAnalog+3,f
  9358  0DEA  0838               	movf	??_readIAnalog+16,w
  9359  0DEB  3DAC               	addwfc	??_readIAnalog+4,f
  9360  0DEC  0826               	movf	readIAnalog@channel,w
  9361  0DED  00B9               	movwf	??_readIAnalog+17
  9362  0DEE  3001               	movlw	1
  9363  0DEF                     u3125:	
  9364  0DEF  35B9               	lslf	??_readIAnalog+17,f
  9365  0DF0  3EFF               	addlw	-1
  9366  0DF1  1D03               	skipz
  9367  0DF2  2DEF               	goto	u3125
  9368  0DF3  3539               	lslf	??_readIAnalog+17,w
  9369  0DF4  3E20               	addlw	(low (_totals| (0+256)))& (0+255)
  9370  0DF5  0086               	movwf	6
  9371  0DF6  3001               	movlw	1	; select bank2/3
  9372  0DF7  0087               	movwf	7
  9373  0DF8  0829               	movf	??_readIAnalog+1,w
  9374  0DF9  3FC0               	movwi [0]fsr1
  9375  0DFA  082A               	movf	??_readIAnalog+2,w
  9376  0DFB  3FC1               	movwi [1]fsr1
  9377  0DFC  082B               	movf	??_readIAnalog+3,w
  9378  0DFD  3FC2               	movwi [2]fsr1
  9379  0DFE  082C               	movf	??_readIAnalog+4,w
  9380  0DFF  3FC3               	movwi [3]fsr1
  9381                           
  9382                           ;adc.c: 87: samples[channel][sampleIndex] = value;
  9383  0E00  0867               	movf	_sampleIndex+1,w
  9384  0E01  00A9               	movwf	??_readIAnalog+1
  9385  0E02  0866               	movf	_sampleIndex,w
  9386  0E03  00A8               	movwf	??_readIAnalog
  9387  0E04  35A8               	lslf	??_readIAnalog,f
  9388  0E05  0DA9               	rlf	??_readIAnalog+1,f
  9389  0E06  0827               	movf	readIAnalog@channel+1,w
  9390  0E07  00F1               	movwf	___wmul@multiplier+1
  9391  0E08  0826               	movf	readIAnalog@channel,w
  9392  0E09  00F0               	movwf	___wmul@multiplier
  9393  0E0A  3064               	movlw	100
  9394  0E0B  00F2               	movwf	___wmul@multiplicand
  9395  0E0C  3000               	movlw	0
  9396  0E0D  00F3               	movwf	___wmul@multiplicand+1
  9397  0E0E  3193  2398  318D   	fcall	___wmul
  9398  0E11  3060               	movlw	96
  9399  0E12  0020               	movlb	0	; select bank0
  9400  0E13  00AA               	movwf	??_readIAnalog+2
  9401  0E14  3022               	movlw	34
  9402  0E15  00AB               	movwf	??_readIAnalog+3
  9403  0E16  0870               	movf	?___wmul,w
  9404  0E17  072A               	addwf	??_readIAnalog+2,w
  9405  0E18  00AC               	movwf	??_readIAnalog+4
  9406  0E19  0871               	movf	?___wmul+1,w
  9407  0E1A  3D2B               	addwfc	??_readIAnalog+3,w
  9408  0E1B  00AD               	movwf	??_readIAnalog+5
  9409  0E1C  0828               	movf	??_readIAnalog,w
  9410  0E1D  072C               	addwf	??_readIAnalog+4,w
  9411  0E1E  0086               	movwf	6
  9412  0E1F  0829               	movf	??_readIAnalog+1,w
  9413  0E20  3D2D               	addwfc	??_readIAnalog+5,w
  9414  0E21  0087               	movwf	7
  9415  0E22  087B               	movf	readIAnalog@value,w
  9416  0E23  3FC0               	movwi [0]fsr1
  9417  0E24  087C               	movf	readIAnalog@value+1,w
  9418  0E25  3FC1               	movwi [1]fsr1
  9419                           
  9420                           ;adc.c: 89: totals[channel] = totals[channel]+samples[channel][sampleIndex];
  9421  0E26  0826               	movf	readIAnalog@channel,w
  9422  0E27  00A8               	movwf	??_readIAnalog
  9423  0E28  3001               	movlw	1
  9424  0E29                     u3135:	
  9425  0E29  35A8               	lslf	??_readIAnalog,f
  9426  0E2A  3EFF               	addlw	-1
  9427  0E2B  1D03               	skipz
  9428  0E2C  2E29               	goto	u3135
  9429  0E2D  3528               	lslf	??_readIAnalog,w
  9430  0E2E  3E20               	addlw	(low (_totals| (0+256)))& (0+255)
  9431  0E2F  0086               	movwf	6
  9432  0E30  3001               	movlw	1	; select bank2/3
  9433  0E31  0087               	movwf	7
  9434  0E32  3F40               	moviw [0]fsr1
  9435  0E33  00A9               	movwf	??_readIAnalog+1
  9436  0E34  3F41               	moviw [1]fsr1
  9437  0E35  00AA               	movwf	??_readIAnalog+2
  9438  0E36  3F42               	moviw [2]fsr1
  9439  0E37  00AB               	movwf	??_readIAnalog+3
  9440  0E38  3F43               	moviw [3]fsr1
  9441  0E39  00AC               	movwf	??_readIAnalog+4
  9442  0E3A  0867               	movf	_sampleIndex+1,w
  9443  0E3B  00AE               	movwf	??_readIAnalog+6
  9444  0E3C  0866               	movf	_sampleIndex,w
  9445  0E3D  00AD               	movwf	??_readIAnalog+5
  9446  0E3E  35AD               	lslf	??_readIAnalog+5,f
  9447  0E3F  0DAE               	rlf	??_readIAnalog+6,f
  9448  0E40  0827               	movf	readIAnalog@channel+1,w
  9449  0E41  00F1               	movwf	___wmul@multiplier+1
  9450  0E42  0826               	movf	readIAnalog@channel,w
  9451  0E43  00F0               	movwf	___wmul@multiplier
  9452  0E44  3064               	movlw	100
  9453  0E45  00F2               	movwf	___wmul@multiplicand
  9454  0E46  3000               	movlw	0
  9455  0E47  00F3               	movwf	___wmul@multiplicand+1
  9456  0E48  3193  2398  318D   	fcall	___wmul
  9457  0E4B  3060               	movlw	96
  9458  0E4C  0020               	movlb	0	; select bank0
  9459  0E4D  00AF               	movwf	??_readIAnalog+7
  9460  0E4E  3022               	movlw	34
  9461  0E4F  00B0               	movwf	??_readIAnalog+8
  9462  0E50  0870               	movf	?___wmul,w
  9463  0E51  072F               	addwf	??_readIAnalog+7,w
  9464  0E52  00B1               	movwf	??_readIAnalog+9
  9465  0E53  0871               	movf	?___wmul+1,w
  9466  0E54  3D30               	addwfc	??_readIAnalog+8,w
  9467  0E55  00B2               	movwf	??_readIAnalog+10
  9468  0E56  082D               	movf	??_readIAnalog+5,w
  9469  0E57  0731               	addwf	??_readIAnalog+9,w
  9470  0E58  0086               	movwf	6
  9471  0E59  082E               	movf	??_readIAnalog+6,w
  9472  0E5A  3D32               	addwfc	??_readIAnalog+10,w
  9473  0E5B  0087               	movwf	7
  9474  0E5C  3F40               	moviw [0]fsr1
  9475  0E5D  00B3               	movwf	??_readIAnalog+11
  9476  0E5E  3F41               	moviw [1]fsr1
  9477  0E5F  00B4               	movwf	??_readIAnalog+12
  9478  0E60  0833               	movf	??_readIAnalog+11,w
  9479  0E61  00B5               	movwf	??_readIAnalog+13
  9480  0E62  0834               	movf	??_readIAnalog+12,w
  9481  0E63  00B6               	movwf	??_readIAnalog+14
  9482  0E64  3000               	movlw	0
  9483  0E65  1BB6               	btfsc	??_readIAnalog+14,7
  9484  0E66  30FF               	movlw	255
  9485  0E67  00B7               	movwf	??_readIAnalog+15
  9486  0E68  00B8               	movwf	??_readIAnalog+16
  9487  0E69  0835               	movf	??_readIAnalog+13,w
  9488  0E6A  07A9               	addwf	??_readIAnalog+1,f
  9489  0E6B  0836               	movf	??_readIAnalog+14,w
  9490  0E6C  3DAA               	addwfc	??_readIAnalog+2,f
  9491  0E6D  0837               	movf	??_readIAnalog+15,w
  9492  0E6E  3DAB               	addwfc	??_readIAnalog+3,f
  9493  0E6F  0838               	movf	??_readIAnalog+16,w
  9494  0E70  3DAC               	addwfc	??_readIAnalog+4,f
  9495  0E71  0826               	movf	readIAnalog@channel,w
  9496  0E72  00B9               	movwf	??_readIAnalog+17
  9497  0E73  3001               	movlw	1
  9498  0E74                     u3145:	
  9499  0E74  35B9               	lslf	??_readIAnalog+17,f
  9500  0E75  3EFF               	addlw	-1
  9501  0E76  1D03               	skipz
  9502  0E77  2E74               	goto	u3145
  9503  0E78  3539               	lslf	??_readIAnalog+17,w
  9504  0E79  3E20               	addlw	(low (_totals| (0+256)))& (0+255)
  9505  0E7A  0086               	movwf	6
  9506  0E7B  3001               	movlw	1	; select bank2/3
  9507  0E7C  0087               	movwf	7
  9508  0E7D  0829               	movf	??_readIAnalog+1,w
  9509  0E7E  3FC0               	movwi [0]fsr1
  9510  0E7F  082A               	movf	??_readIAnalog+2,w
  9511  0E80  3FC1               	movwi [1]fsr1
  9512  0E81  082B               	movf	??_readIAnalog+3,w
  9513  0E82  3FC2               	movwi [2]fsr1
  9514  0E83  082C               	movf	??_readIAnalog+4,w
  9515  0E84  3FC3               	movwi [3]fsr1
  9516                           
  9517                           ;adc.c: 91: if(channel>=(4-1))
  9518  0E85  3000               	movlw	0
  9519  0E86  0227               	subwf	readIAnalog@channel+1,w
  9520  0E87  3003               	movlw	3
  9521  0E88  1903               	skipnz
  9522  0E89  0226               	subwf	readIAnalog@channel,w
  9523  0E8A  1C03               	skipc
  9524  0E8B  2E99               	goto	l2856
  9525                           
  9526                           ;adc.c: 92: {
  9527                           ;adc.c: 93: sampleIndex+=1;
  9528  0E8C  3001               	movlw	1
  9529  0E8D  07E6               	addwf	_sampleIndex,f
  9530  0E8E  3000               	movlw	0
  9531  0E8F  3DE7               	addwfc	_sampleIndex+1,f
  9532                           
  9533                           ;adc.c: 94: if(sampleIndex >= 50)sampleIndex = 0;
  9534  0E90  3000               	movlw	0
  9535  0E91  0267               	subwf	_sampleIndex+1,w
  9536  0E92  3032               	movlw	50
  9537  0E93  1903               	skipnz
  9538  0E94  0266               	subwf	_sampleIndex,w
  9539  0E95  1C03               	skipc
  9540  0E96  2E99               	goto	l2856
  9541  0E97  01E6               	clrf	_sampleIndex
  9542  0E98  01E7               	clrf	_sampleIndex+1
  9543  0E99                     l2856:	
  9544                           
  9545                           ;adc.c: 95: }
  9546                           ;adc.c: 97: value = totals[channel]/50;
  9547  0E99  3000               	movlw	0
  9548  0E9A  00F3               	movwf	___aldiv@divisor+3
  9549  0E9B  3000               	movlw	0
  9550  0E9C  00F2               	movwf	___aldiv@divisor+2
  9551  0E9D  3000               	movlw	0
  9552  0E9E  00F1               	movwf	___aldiv@divisor+1
  9553  0E9F  3032               	movlw	50
  9554  0EA0  00F0               	movwf	___aldiv@divisor
  9555  0EA1  0826               	movf	readIAnalog@channel,w
  9556  0EA2  00A8               	movwf	??_readIAnalog
  9557  0EA3  3001               	movlw	1
  9558  0EA4                     u3175:	
  9559  0EA4  35A8               	lslf	??_readIAnalog,f
  9560  0EA5  3EFF               	addlw	-1
  9561  0EA6  1D03               	skipz
  9562  0EA7  2EA4               	goto	u3175
  9563  0EA8  3528               	lslf	??_readIAnalog,w
  9564  0EA9  3E20               	addlw	(low (_totals| (0+256)))& (0+255)
  9565  0EAA  0086               	movwf	6
  9566  0EAB  3001               	movlw	1	; select bank2/3
  9567  0EAC  0087               	movwf	7
  9568  0EAD  3F40               	moviw [0]fsr1
  9569  0EAE  00F4               	movwf	___aldiv@dividend
  9570  0EAF  3F41               	moviw [1]fsr1
  9571  0EB0  00F5               	movwf	___aldiv@dividend+1
  9572  0EB1  3F42               	moviw [2]fsr1
  9573  0EB2  00F6               	movwf	___aldiv@dividend+2
  9574  0EB3  3F43               	moviw [3]fsr1
  9575  0EB4  00F7               	movwf	___aldiv@dividend+3
  9576  0EB5  3188  20CD         	fcall	___aldiv
  9577  0EB7  0871               	movf	?___aldiv+1,w
  9578  0EB8  00FC               	movwf	readIAnalog@value+1
  9579  0EB9  0870               	movf	?___aldiv,w
  9580  0EBA  00FB               	movwf	readIAnalog@value
  9581                           
  9582                           ;adc.c: 99: return value;
  9583  0EBB  087C               	movf	readIAnalog@value+1,w
  9584  0EBC  0020               	movlb	0	; select bank0
  9585  0EBD  00A7               	movwf	?_readIAnalog+1
  9586  0EBE  087B               	movf	readIAnalog@value,w
  9587  0EBF  00A6               	movwf	?_readIAnalog
  9588  0EC0  0008               	return
  9589  0EC1                     __end_of_readIAnalog:	
  9590                           
  9591                           	psect	text9
  9592  08CD                     __ptext9:	
  9593 ;; *************** function ___aldiv *****************
  9594 ;; Defined at:
  9595 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\aldiv.c"
  9596 ;; Parameters:    Size  Location     Type
  9597 ;;  divisor         4    0[COMMON] long 
  9598 ;;  dividend        4    4[COMMON] long 
  9599 ;; Auto vars:     Size  Location     Type
  9600 ;;  quotient        4    2[BANK0 ] long 
  9601 ;;  sign            1    1[BANK0 ] unsigned char 
  9602 ;;  counter         1    0[BANK0 ] unsigned char 
  9603 ;; Return value:  Size  Location     Type
  9604 ;;                  4    0[COMMON] long 
  9605 ;; Registers used:
  9606 ;;		wreg, status,2, status,0
  9607 ;; Tracked objects:
  9608 ;;		On entry : 0/0
  9609 ;;		On exit  : 0/0
  9610 ;;		Unchanged: 0/0
  9611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9612 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9613 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9614 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9615 ;;      Totals:         9       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9616 ;;Total ram usage:       15 bytes
  9617 ;; Hardware stack levels used:    1
  9618 ;; This function calls:
  9619 ;;		Nothing
  9620 ;; This function is called by:
  9621 ;;		_readIAnalog
  9622 ;; This function uses a non-reentrant model
  9623 ;;
  9624                           
  9625                           
  9626                           ;psect for function ___aldiv
  9627  08CD                     ___aldiv:	
  9628                           
  9629                           ;incstack = 0
  9630                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  9631  08CD  0020               	movlb	0	; select bank0
  9632  08CE  01A1               	clrf	___aldiv@sign
  9633  08CF  1FF3               	btfss	___aldiv@divisor+3,7
  9634  08D0  28DE               	goto	l637
  9635  08D1  09F0               	comf	___aldiv@divisor,f
  9636  08D2  09F1               	comf	___aldiv@divisor+1,f
  9637  08D3  09F2               	comf	___aldiv@divisor+2,f
  9638  08D4  09F3               	comf	___aldiv@divisor+3,f
  9639  08D5  0AF0               	incf	___aldiv@divisor,f
  9640  08D6  1903               	skipnz
  9641  08D7  0AF1               	incf	___aldiv@divisor+1,f
  9642  08D8  1903               	skipnz
  9643  08D9  0AF2               	incf	___aldiv@divisor+2,f
  9644  08DA  1903               	skipnz
  9645  08DB  0AF3               	incf	___aldiv@divisor+3,f
  9646  08DC  01A1               	clrf	___aldiv@sign
  9647  08DD  0AA1               	incf	___aldiv@sign,f
  9648  08DE                     l637:	
  9649  08DE  1FF7               	btfss	___aldiv@dividend+3,7
  9650  08DF  28EF               	goto	l2696
  9651  08E0  09F4               	comf	___aldiv@dividend,f
  9652  08E1  09F5               	comf	___aldiv@dividend+1,f
  9653  08E2  09F6               	comf	___aldiv@dividend+2,f
  9654  08E3  09F7               	comf	___aldiv@dividend+3,f
  9655  08E4  0AF4               	incf	___aldiv@dividend,f
  9656  08E5  1903               	skipnz
  9657  08E6  0AF5               	incf	___aldiv@dividend+1,f
  9658  08E7  1903               	skipnz
  9659  08E8  0AF6               	incf	___aldiv@dividend+2,f
  9660  08E9  1903               	skipnz
  9661  08EA  0AF7               	incf	___aldiv@dividend+3,f
  9662  08EB  3001               	movlw	1
  9663  08EC  00F8               	movwf	??___aldiv
  9664  08ED  0878               	movf	??___aldiv,w
  9665  08EE  06A1               	xorwf	___aldiv@sign,f
  9666  08EF                     l2696:	
  9667  08EF  3000               	movlw	0
  9668  08F0  00A5               	movwf	___aldiv@quotient+3
  9669  08F1  3000               	movlw	0
  9670  08F2  00A4               	movwf	___aldiv@quotient+2
  9671  08F3  3000               	movlw	0
  9672  08F4  00A3               	movwf	___aldiv@quotient+1
  9673  08F5  3000               	movlw	0
  9674  08F6  00A2               	movwf	___aldiv@quotient
  9675  08F7  0873               	movf	___aldiv@divisor+3,w
  9676  08F8  0472               	iorwf	___aldiv@divisor+2,w
  9677  08F9  0471               	iorwf	___aldiv@divisor+1,w
  9678  08FA  0470               	iorwf	___aldiv@divisor,w
  9679  08FB  1903               	skipnz
  9680  08FC  2938               	goto	l2718
  9681  08FD  01A0               	clrf	___aldiv@counter
  9682  08FE  0AA0               	incf	___aldiv@counter,f
  9683  08FF                     l2704:	
  9684  08FF  1BF3               	btfsc	___aldiv@divisor+3,7
  9685  0900  290D               	goto	l2706
  9686  0901  3001               	movlw	1
  9687  0902                     u2795:	
  9688  0902  35F0               	lslf	___aldiv@divisor,f
  9689  0903  0DF1               	rlf	___aldiv@divisor+1,f
  9690  0904  0DF2               	rlf	___aldiv@divisor+2,f
  9691  0905  0DF3               	rlf	___aldiv@divisor+3,f
  9692  0906  0B89               	decfsz	9,f
  9693  0907  2902               	goto	u2795
  9694  0908  3001               	movlw	1
  9695  0909  00F8               	movwf	??___aldiv
  9696  090A  0878               	movf	??___aldiv,w
  9697  090B  07A0               	addwf	___aldiv@counter,f
  9698  090C  28FF               	goto	l2704
  9699  090D                     l2706:	
  9700  090D  3001               	movlw	1
  9701  090E                     u2815:	
  9702  090E  35A2               	lslf	___aldiv@quotient,f
  9703  090F  0DA3               	rlf	___aldiv@quotient+1,f
  9704  0910  0DA4               	rlf	___aldiv@quotient+2,f
  9705  0911  0DA5               	rlf	___aldiv@quotient+3,f
  9706  0912  0B89               	decfsz	9,f
  9707  0913  290E               	goto	u2815
  9708  0914  0873               	movf	___aldiv@divisor+3,w
  9709  0915  0277               	subwf	___aldiv@dividend+3,w
  9710  0916  1D03               	skipz
  9711  0917  2922               	goto	u2825
  9712  0918  0872               	movf	___aldiv@divisor+2,w
  9713  0919  0276               	subwf	___aldiv@dividend+2,w
  9714  091A  1D03               	skipz
  9715  091B  2922               	goto	u2825
  9716  091C  0871               	movf	___aldiv@divisor+1,w
  9717  091D  0275               	subwf	___aldiv@dividend+1,w
  9718  091E  1D03               	skipz
  9719  091F  2922               	goto	u2825
  9720  0920  0870               	movf	___aldiv@divisor,w
  9721  0921  0274               	subwf	___aldiv@dividend,w
  9722  0922                     u2825:	
  9723  0922  1C03               	skipc
  9724  0923  292D               	goto	l2714
  9725  0924  0870               	movf	___aldiv@divisor,w
  9726  0925  02F4               	subwf	___aldiv@dividend,f
  9727  0926  0871               	movf	___aldiv@divisor+1,w
  9728  0927  3BF5               	subwfb	___aldiv@dividend+1,f
  9729  0928  0872               	movf	___aldiv@divisor+2,w
  9730  0929  3BF6               	subwfb	___aldiv@dividend+2,f
  9731  092A  0873               	movf	___aldiv@divisor+3,w
  9732  092B  3BF7               	subwfb	___aldiv@dividend+3,f
  9733  092C  1422               	bsf	___aldiv@quotient,0
  9734  092D                     l2714:	
  9735  092D  3001               	movlw	1
  9736  092E                     u2835:	
  9737  092E  36F3               	lsrf	___aldiv@divisor+3,f
  9738  092F  0CF2               	rrf	___aldiv@divisor+2,f
  9739  0930  0CF1               	rrf	___aldiv@divisor+1,f
  9740  0931  0CF0               	rrf	___aldiv@divisor,f
  9741  0932  0B89               	decfsz	9,f
  9742  0933  292E               	goto	u2835
  9743  0934  3001               	movlw	1
  9744  0935  02A0               	subwf	___aldiv@counter,f
  9745  0936  1D03               	btfss	3,2
  9746  0937  290D               	goto	l2706
  9747  0938                     l2718:	
  9748  0938  0821               	movf	___aldiv@sign,w
  9749  0939  1903               	btfsc	3,2
  9750  093A  2946               	goto	l2722
  9751  093B  09A2               	comf	___aldiv@quotient,f
  9752  093C  09A3               	comf	___aldiv@quotient+1,f
  9753  093D  09A4               	comf	___aldiv@quotient+2,f
  9754  093E  09A5               	comf	___aldiv@quotient+3,f
  9755  093F  0AA2               	incf	___aldiv@quotient,f
  9756  0940  1903               	skipnz
  9757  0941  0AA3               	incf	___aldiv@quotient+1,f
  9758  0942  1903               	skipnz
  9759  0943  0AA4               	incf	___aldiv@quotient+2,f
  9760  0944  1903               	skipnz
  9761  0945  0AA5               	incf	___aldiv@quotient+3,f
  9762  0946                     l2722:	
  9763  0946  0825               	movf	___aldiv@quotient+3,w
  9764  0947  00F3               	movwf	?___aldiv+3
  9765  0948  0824               	movf	___aldiv@quotient+2,w
  9766  0949  00F2               	movwf	?___aldiv+2
  9767  094A  0823               	movf	___aldiv@quotient+1,w
  9768  094B  00F1               	movwf	?___aldiv+1
  9769  094C  0822               	movf	___aldiv@quotient,w
  9770  094D  00F0               	movwf	?___aldiv
  9771  094E  0008               	return
  9772  094F                     __end_of___aldiv:	
  9773                           
  9774                           	psect	text10
  9775  084B                     __ptext10:	
  9776 ;; *************** function _readButton *****************
  9777 ;; Defined at:
  9778 ;;		line 9 in file "buttons.c"
  9779 ;; Parameters:    Size  Location     Type
  9780 ;;		None
  9781 ;; Auto vars:     Size  Location     Type
  9782 ;;		None
  9783 ;; Return value:  Size  Location     Type
  9784 ;;                  1    wreg      unsigned char 
  9785 ;; Registers used:
  9786 ;;		wreg, status,2, status,0, pclath, cstack
  9787 ;; Tracked objects:
  9788 ;;		On entry : 0/0
  9789 ;;		On exit  : 0/0
  9790 ;;		Unchanged: 0/0
  9791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9792 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9793 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9794 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9795 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9796 ;;Total ram usage:        2 bytes
  9797 ;; Hardware stack levels used:    1
  9798 ;; Hardware stack levels required when called:    1
  9799 ;; This function calls:
  9800 ;;		_ADCRead
  9801 ;; This function is called by:
  9802 ;;		_main
  9803 ;; This function uses a non-reentrant model
  9804 ;;
  9805                           
  9806                           
  9807                           ;psect for function _readButton
  9808  084B                     _readButton:	
  9809                           
  9810                           ;buttons.c: 11: readButtons = ADCRead(11);
  9811                           
  9812                           ;incstack = 0
  9813                           ; Regs used in _readButton: [wreg+status,2+status,0+pclath+cstack]
  9814  084B  300B               	movlw	11
  9815  084C  3193  2357  3188   	fcall	_ADCRead
  9816  084F  0871               	movf	?_ADCRead+1,w
  9817  0850  0020               	movlb	0	; select bank0
  9818  0851  00DF               	movwf	_readButtons+1
  9819  0852  0870               	movf	?_ADCRead,w
  9820  0853  00DE               	movwf	_readButtons
  9821                           
  9822                           ;buttons.c: 13: if(readButtons >= 425 && readButtons < 485)
  9823  0854  085F               	movf	_readButtons+1,w
  9824  0855  3A80               	xorlw	128
  9825  0856  00F4               	movwf	??_readButton
  9826  0857  3081               	movlw	129
  9827  0858  0274               	subwf	??_readButton,w
  9828  0859  1D03               	skipz
  9829  085A  285D               	goto	u3395
  9830  085B  30A9               	movlw	169
  9831  085C  025E               	subwf	_readButtons,w
  9832  085D                     u3395:	
  9833  085D  1C03               	skipc
  9834  085E  286F               	goto	l2944
  9835  085F  0020               	movlb	0	; select bank0
  9836  0860  085F               	movf	_readButtons+1,w
  9837  0861  3A80               	xorlw	128
  9838  0862  00F4               	movwf	??_readButton
  9839  0863  3081               	movlw	129
  9840  0864  0274               	subwf	??_readButton,w
  9841  0865  1D03               	skipz
  9842  0866  2869               	goto	u3405
  9843  0867  30E5               	movlw	229
  9844  0868  025E               	subwf	_readButtons,w
  9845  0869                     u3405:	
  9846  0869  1803               	skipnc
  9847  086A  286F               	goto	l2944
  9848                           
  9849                           ;buttons.c: 14: {
  9850                           ;buttons.c: 15: button = 1;
  9851  086B  0020               	movlb	0	; select bank0
  9852  086C  01EA               	clrf	_button
  9853  086D  0AEA               	incf	_button,f
  9854                           
  9855                           ;buttons.c: 16: }
  9856  086E  289D               	goto	l2956
  9857  086F                     l2944:	
  9858                           
  9859                           ;buttons.c: 18: else if(readButtons >= 615 && readButtons < 690)
  9860  086F  0020               	movlb	0	; select bank0
  9861  0870  085F               	movf	_readButtons+1,w
  9862  0871  3A80               	xorlw	128
  9863  0872  00F4               	movwf	??_readButton
  9864  0873  3082               	movlw	130
  9865  0874  0274               	subwf	??_readButton,w
  9866  0875  1D03               	skipz
  9867  0876  2879               	goto	u3415
  9868  0877  3067               	movlw	103
  9869  0878  025E               	subwf	_readButtons,w
  9870  0879                     u3415:	
  9871  0879  1C03               	skipc
  9872  087A  2889               	goto	l2950
  9873  087B  0020               	movlb	0	; select bank0
  9874  087C  085F               	movf	_readButtons+1,w
  9875  087D  3A80               	xorlw	128
  9876  087E  00F4               	movwf	??_readButton
  9877  087F  3082               	movlw	130
  9878  0880  0274               	subwf	??_readButton,w
  9879  0881  1D03               	skipz
  9880  0882  2885               	goto	u3425
  9881  0883  30B2               	movlw	178
  9882  0884  025E               	subwf	_readButtons,w
  9883  0885                     u3425:	
  9884  0885  1803               	skipnc
  9885  0886  2889               	goto	l2950
  9886                           
  9887                           ;buttons.c: 19: {
  9888                           ;buttons.c: 20: button = 2;
  9889  0887  3002               	movlw	2
  9890  0888  2896               	goto	L6
  9891  0889                     l2950:	
  9892                           ;buttons.c: 21: }
  9893                           
  9894                           
  9895                           ;buttons.c: 23: else if(readButtons > 800)
  9896  0889  0020               	movlb	0	; select bank0
  9897  088A  085F               	movf	_readButtons+1,w
  9898  088B  3A80               	xorlw	128
  9899  088C  00F4               	movwf	??_readButton
  9900  088D  3083               	movlw	131
  9901  088E  0274               	subwf	??_readButton,w
  9902  088F  1D03               	skipz
  9903  0890  2893               	goto	u3435
  9904  0891  3021               	movlw	33
  9905  0892  025E               	subwf	_readButtons,w
  9906  0893                     u3435:	
  9907  0893  1C03               	skipc
  9908  0894  289B               	goto	l2954
  9909                           
  9910                           ;buttons.c: 24: {
  9911                           ;buttons.c: 25: button = 3;
  9912  0895  3003               	movlw	3
  9913  0896                     L6:	
  9914  0896  00F4               	movwf	??_readButton
  9915  0897  0874               	movf	??_readButton,w
  9916  0898  0020               	movlb	0	; select bank0
  9917  0899  00EA               	movwf	_button
  9918                           
  9919                           ;buttons.c: 26: }
  9920  089A  289D               	goto	l2956
  9921  089B                     l2954:	
  9922                           
  9923                           ;buttons.c: 28: else
  9924                           ;buttons.c: 29: {
  9925                           ;buttons.c: 30: button = 0;
  9926  089B  0020               	movlb	0	; select bank0
  9927  089C  01EA               	clrf	_button
  9928  089D                     l2956:	
  9929                           
  9930                           ;buttons.c: 31: }
  9931                           ;buttons.c: 33: if (button != 0)
  9932  089D  086A               	movf	_button,w
  9933  089E  1903               	btfsc	3,2
  9934  089F  28CA               	goto	l2976
  9935                           
  9936                           ;buttons.c: 34: {
  9937                           ;buttons.c: 35: if (button != lastButton)
  9938  08A0  086A               	movf	_button,w
  9939  08A1  0669               	xorwf	_lastButton,w
  9940  08A2  1903               	skipnz
  9941  08A3  28A9               	goto	l2964
  9942                           
  9943                           ;buttons.c: 36: {
  9944                           ;buttons.c: 37: lastButton = button;
  9945  08A4  086A               	movf	_button,w
  9946  08A5  00F4               	movwf	??_readButton
  9947  08A6  0874               	movf	??_readButton,w
  9948  08A7  00E9               	movwf	_lastButton
  9949  08A8  28CA               	goto	l2976
  9950  08A9                     l2964:	
  9951                           ;buttons.c: 39: }
  9952                           
  9953                           ;buttons.c: 38: j = 0;
  9954                           
  9955                           
  9956                           ;buttons.c: 40: else
  9957                           ;buttons.c: 41: {
  9958                           ;buttons.c: 42: j += 1;
  9959  08A9  3001               	movlw	1
  9960  08AA  00F4               	movwf	??_readButton
  9961  08AB  0874               	movf	??_readButton,w
  9962  08AC  07E8               	addwf	_j,f
  9963                           
  9964                           ;buttons.c: 44: if(j == 1)
  9965  08AD  0368               	decf	_j,w
  9966  08AE  1D03               	btfss	3,2
  9967  08AF  28B2               	goto	l2970
  9968                           
  9969                           ;buttons.c: 45: {
  9970                           ;buttons.c: 46: return (lastButton);
  9971  08B0  0869               	movf	_lastButton,w
  9972  08B1  0008               	return
  9973  08B2                     l2970:	
  9974                           
  9975                           ;buttons.c: 47: }
  9976                           ;buttons.c: 49: if (j >10)
  9977  08B2  0868               	movf	_j,w
  9978  08B3  3A80               	xorlw	128
  9979  08B4  3E75               	addlw	-139
  9980  08B5  1C03               	skipc
  9981  08B6  28CB               	goto	l2978
  9982                           
  9983                           ;buttons.c: 50: {
  9984                           ;buttons.c: 51: _delay((unsigned long)((25)*(32000000/4000.0)));
  9985  08B7  3002               	movlw	2
  9986  08B8  00F5               	movwf	??_readButton+1
  9987  08B9  3004               	movlw	4
  9988  08BA  00F4               	movwf	??_readButton
  9989  08BB  30BA               	movlw	186
  9990  08BC                     u3957:	
  9991  08BC  0B89               	decfsz	9,f
  9992  08BD  28BC               	goto	u3957
  9993  08BE  0BF4               	decfsz	??_readButton,f
  9994  08BF  28BC               	goto	u3957
  9995  08C0  0BF5               	decfsz	??_readButton+1,f
  9996  08C1  28BC               	goto	u3957
  9997  08C2  3200               	nop2
  9998                           
  9999                           ;buttons.c: 52: j = 10;
 10000  08C3  300A               	movlw	10
 10001  08C4  00F4               	movwf	??_readButton
 10002  08C5  0874               	movf	??_readButton,w
 10003  08C6  0020               	movlb	0	; select bank0
 10004  08C7  00E8               	movwf	_j
 10005                           
 10006                           ;buttons.c: 53: return (lastButton);
 10007  08C8  0869               	movf	_lastButton,w
 10008  08C9  0008               	return
 10009  08CA                     l2976:	
 10010                           ;buttons.c: 54: }
 10011                           ;buttons.c: 55: }
 10012                           ;buttons.c: 56: goto end;
 10013                           
 10014                           
 10015                           ;buttons.c: 57: }
 10016                           ;buttons.c: 59: j = 0;
 10017  08CA  01E8               	clrf	_j
 10018  08CB                     l2978:	
 10019                           ;buttons.c: 61: end:
 10020                           
 10021                           
 10022                           ;buttons.c: 63: return (0);
 10023  08CB  3000               	movlw	0
 10024  08CC  0008               	return
 10025  08CD                     __end_of_readButton:	
 10026                           
 10027                           	psect	text11
 10028  1357                     __ptext11:	
 10029 ;; *************** function _ADCRead *****************
 10030 ;; Defined at:
 10031 ;;		line 21 in file "adc.c"
 10032 ;; Parameters:    Size  Location     Type
 10033 ;;  channel         1    wreg     enum E14259
 10034 ;; Auto vars:     Size  Location     Type
 10035 ;;  channel         1    3[COMMON] enum E14259
 10036 ;; Return value:  Size  Location     Type
 10037 ;;                  2    0[COMMON] int 
 10038 ;; Registers used:
 10039 ;;		wreg
 10040 ;; Tracked objects:
 10041 ;;		On entry : 0/0
 10042 ;;		On exit  : 0/0
 10043 ;;		Unchanged: 0/0
 10044 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10045 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10046 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10047 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10048 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10049 ;;Total ram usage:        4 bytes
 10050 ;; Hardware stack levels used:    1
 10051 ;; This function calls:
 10052 ;;		Nothing
 10053 ;; This function is called by:
 10054 ;;		_readIAnalog
 10055 ;;		_readButton
 10056 ;;		_main
 10057 ;; This function uses a non-reentrant model
 10058 ;;
 10059                           
 10060                           
 10061                           ;psect for function _ADCRead
 10062  1357                     _ADCRead:	
 10063                           
 10064                           ;incstack = 0
 10065                           ; Regs used in _ADCRead: [wreg]
 10066                           ;ADCRead@channel stored from wreg
 10067  1357  00F3               	movwf	ADCRead@channel
 10068                           
 10069                           ;adc.c: 23: ADPCH = channel_VSS;
 10070  1358  303C               	movlw	60
 10071  1359  0021               	movlb	1	; select bank1
 10072  135A  009E               	movwf	30	;volatile
 10073                           
 10074                           ;adc.c: 25: ADCON0bits.ADON = 1;
 10075  135B  1793               	bsf	19,7	;volatile
 10076                           
 10077                           ;adc.c: 27: ADCON0bits.ADCONT = 0;
 10078  135C  1313               	bcf	19,6	;volatile
 10079                           
 10080                           ;adc.c: 29: ADCON0bits.ADGO = 1;
 10081  135D  1413               	bsf	19,0	;volatile
 10082  135E                     l57:	
 10083                           ;adc.c: 32: {
 10084                           
 10085                           ;adc.c: 31: while(ADCON0bits.ADGO)
 10086                           
 10087  135E  1813               	btfsc	19,0	;volatile
 10088  135F  2B5E               	goto	l57
 10089                           
 10090                           ;adc.c: 33: }
 10091                           ;adc.c: 35: ADPCH = channel;
 10092  1360  0873               	movf	ADCRead@channel,w
 10093  1361  009E               	movwf	30	;volatile
 10094                           
 10095                           ;adc.c: 37: ADCON0bits.ADON = 1;
 10096  1362  1793               	bsf	19,7	;volatile
 10097                           
 10098                           ;adc.c: 39: ADCON0bits.ADCONT = 0;
 10099  1363  1313               	bcf	19,6	;volatile
 10100                           
 10101                           ;adc.c: 41: ADCON0bits.ADGO = 1;
 10102  1364  1413               	bsf	19,0	;volatile
 10103  1365                     l60:	
 10104                           ;adc.c: 44: {
 10105                           
 10106                           ;adc.c: 43: while(ADCON0bits.ADGO)
 10107                           
 10108  1365  1813               	btfsc	19,0	;volatile
 10109  1366  2B65               	goto	l60
 10110                           
 10111                           ;adc.c: 45: }
 10112                           ;adc.c: 47: return ((ADRESH<<8)+ADRESL);
 10113  1367  080D               	movf	13,w	;volatile
 10114  1368  00F1               	movwf	?_ADCRead+1
 10115  1369  080C               	movf	12,w	;volatile
 10116  136A  00F0               	movwf	?_ADCRead
 10117  136B  0008               	return
 10118  136C                     __end_of_ADCRead:	
 10119                           
 10120                           	psect	text12
 10121  0EC1                     __ptext12:	
 10122 ;; *************** function _cc_cv_mode *****************
 10123 ;; Defined at:
 10124 ;;		line 83 in file "battery_charger.c"
 10125 ;; Parameters:    Size  Location     Type
 10126 ;;  z               1    wreg     unsigned char 
 10127 ;; Auto vars:     Size  Location     Type
 10128 ;;  z               1   37[BANK0 ] unsigned char 
 10129 ;; Return value:  Size  Location     Type
 10130 ;;                  1    wreg      void 
 10131 ;; Registers used:
 10132 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10133 ;; Tracked objects:
 10134 ;;		On entry : 0/0
 10135 ;;		On exit  : 0/0
 10136 ;;		Unchanged: 0/0
 10137 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10138 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10139 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10140 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10141 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10142 ;;Total ram usage:        8 bytes
 10143 ;; Hardware stack levels used:    1
 10144 ;; Hardware stack levels required when called:    2
 10145 ;; This function calls:
 10146 ;;		___awtoft
 10147 ;;		___ftmul
 10148 ;;		___fttol
 10149 ;; This function is called by:
 10150 ;;		_main
 10151 ;; This function uses a non-reentrant model
 10152 ;;
 10153                           
 10154                           
 10155                           ;psect for function _cc_cv_mode
 10156  0EC1                     _cc_cv_mode:	
 10157                           
 10158                           ;incstack = 0
 10159                           ; Regs used in _cc_cv_mode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10160                           ;cc_cv_mode@z stored from wreg
 10161  0EC1  0020               	movlb	0	; select bank0
 10162  0EC2  00C5               	movwf	cc_cv_mode@z
 10163                           
 10164                           ;battery_charger.c: 85: if(voltage[z]>=Vref[z])
 10165  0EC3  3545               	lslf	cc_cv_mode@z,w
 10166  0EC4  3E5A               	addlw	(low (_Vref| 0))& (0+255)
 10167  0EC5  0086               	movwf	6
 10168  0EC6  0187               	clrf	7
 10169  0EC7  3F40               	moviw [0]fsr1
 10170  0EC8  00BE               	movwf	??_cc_cv_mode
 10171  0EC9  3F41               	moviw [1]fsr1
 10172  0ECA  00BF               	movwf	??_cc_cv_mode+1
 10173  0ECB  3545               	lslf	cc_cv_mode@z,w
 10174  0ECC  3EB0               	addlw	(low (_voltage| 0))& (0+255)
 10175  0ECD  0086               	movwf	6
 10176  0ECE  0187               	clrf	7
 10177  0ECF  3F40               	moviw [0]fsr1
 10178  0ED0  00C0               	movwf	??_cc_cv_mode+2
 10179  0ED1  3F41               	moviw [1]fsr1
 10180  0ED2  00C1               	movwf	??_cc_cv_mode+3
 10181  0ED3  0841               	movf	??_cc_cv_mode+3,w
 10182  0ED4  3A80               	xorlw	128
 10183  0ED5  00C2               	movwf	??_cc_cv_mode+4
 10184  0ED6  083F               	movf	??_cc_cv_mode+1,w
 10185  0ED7  3A80               	xorlw	128
 10186  0ED8  0242               	subwf	??_cc_cv_mode+4,w
 10187  0ED9  1D03               	skipz
 10188  0EDA  2EDD               	goto	u3295
 10189  0EDB  083E               	movf	??_cc_cv_mode,w
 10190  0EDC  0240               	subwf	??_cc_cv_mode+2,w
 10191  0EDD                     u3295:	
 10192  0EDD  1C03               	skipc
 10193  0EDE  2F1D               	goto	l2920
 10194                           
 10195                           ;battery_charger.c: 86: {
 10196                           ;battery_charger.c: 87: if(VHoldMode[z]<9)VHoldMode[z]+=1;
 10197  0EDF  0020               	movlb	0	; select bank0
 10198  0EE0  0845               	movf	cc_cv_mode@z,w
 10199  0EE1  3E60               	addlw	(low (_VHoldMode| 0))& (0+255)
 10200  0EE2  0086               	movwf	6
 10201  0EE3  0187               	clrf	7
 10202  0EE4  0801               	movf	1,w
 10203  0EE5  3A80               	xorlw	128
 10204  0EE6  3E77               	addlw	-137
 10205  0EE7  1803               	skipnc
 10206  0EE8  2EF1               	goto	l127
 10207  0EE9  3001               	movlw	1
 10208  0EEA  00BE               	movwf	??_cc_cv_mode
 10209  0EEB  0845               	movf	cc_cv_mode@z,w
 10210  0EEC  3E60               	addlw	(low (_VHoldMode| 0))& (0+255)
 10211  0EED  0086               	movwf	6
 10212  0EEE  0187               	clrf	7
 10213  0EEF  083E               	movf	??_cc_cv_mode,w
 10214  0EF0  0781               	addwf	1,f
 10215  0EF1                     l127:	
 10216                           
 10217                           ;battery_charger.c: 88: if(VHoldMode[z]<9)VHoldMode[z]+=1;
 10218  0EF1  0845               	movf	cc_cv_mode@z,w
 10219  0EF2  3E60               	addlw	(low (_VHoldMode| 0))& (0+255)
 10220  0EF3  0086               	movwf	6
 10221  0EF4  0187               	clrf	7
 10222  0EF5  0801               	movf	1,w
 10223  0EF6  3A80               	xorlw	128
 10224  0EF7  3E77               	addlw	-137
 10225  0EF8  1803               	skipnc
 10226  0EF9  2F02               	goto	l128
 10227  0EFA  3001               	movlw	1
 10228  0EFB  00BE               	movwf	??_cc_cv_mode
 10229  0EFC  0845               	movf	cc_cv_mode@z,w
 10230  0EFD  3E60               	addlw	(low (_VHoldMode| 0))& (0+255)
 10231  0EFE  0086               	movwf	6
 10232  0EFF  0187               	clrf	7
 10233  0F00  083E               	movf	??_cc_cv_mode,w
 10234  0F01  0781               	addwf	1,f
 10235  0F02                     l128:	
 10236                           
 10237                           ;battery_charger.c: 90: if(cc_cv[z])
 10238  0F02  0845               	movf	cc_cv_mode@z,w
 10239  0F03  3ED4               	addlw	(low (_cc_cv| 0))& (0+255)
 10240  0F04  0086               	movwf	6
 10241  0F05  0187               	clrf	7
 10242  0F06  0801               	movf	1,w
 10243  0F07  1903               	btfsc	3,2
 10244  0F08  2F10               	goto	l2916
 10245                           
 10246                           ;battery_charger.c: 91: {
 10247                           ;battery_charger.c: 92: cc_cv[z]-=1;
 10248  0F09  0845               	movf	cc_cv_mode@z,w
 10249  0F0A  3ED4               	addlw	(low (_cc_cv| 0))& (0+255)
 10250  0F0B  0086               	movwf	6
 10251  0F0C  0187               	clrf	7
 10252  0F0D  3001               	movlw	1
 10253  0F0E  0281               	subwf	1,f
 10254                           
 10255                           ;battery_charger.c: 93: }
 10256  0F0F  2F45               	goto	l132
 10257  0F10                     l2916:	
 10258                           
 10259                           ;battery_charger.c: 94: else
 10260                           ;battery_charger.c: 95: {
 10261                           ;battery_charger.c: 96: if(Imode[z])
 10262  0F10  0845               	movf	cc_cv_mode@z,w
 10263  0F11  3E62               	addlw	(low (_Imode| 0))& (0+255)
 10264  0F12  0086               	movwf	6
 10265  0F13  0187               	clrf	7
 10266  0F14  0801               	movf	1,w
 10267  0F15  1903               	btfsc	3,2
 10268  0F16  2F45               	goto	l132
 10269                           
 10270                           ;battery_charger.c: 97: {
 10271                           ;battery_charger.c: 98: Imode[z]=0;
 10272  0F17  0845               	movf	cc_cv_mode@z,w
 10273  0F18  3E62               	addlw	(low (_Imode| 0))& (0+255)
 10274  0F19  0086               	movwf	6
 10275  0F1A  0187               	clrf	7
 10276  0F1B  0181               	clrf	1
 10277                           
 10278                           ;battery_charger.c: 99: }
 10279                           ;battery_charger.c: 100: }
 10280                           ;battery_charger.c: 101: }
 10281  0F1C  2F45               	goto	l132
 10282  0F1D                     l2920:	
 10283                           
 10284                           ;battery_charger.c: 102: else
 10285                           ;battery_charger.c: 103: {
 10286                           ;battery_charger.c: 104: VHoldMode[z]-=1;
 10287  0F1D  30FF               	movlw	255
 10288  0F1E  0020               	movlb	0	; select bank0
 10289  0F1F  00BE               	movwf	??_cc_cv_mode
 10290  0F20  0845               	movf	cc_cv_mode@z,w
 10291  0F21  3E60               	addlw	(low (_VHoldMode| 0))& (0+255)
 10292  0F22  0086               	movwf	6
 10293  0F23  0187               	clrf	7
 10294  0F24  083E               	movf	??_cc_cv_mode,w
 10295  0F25  0781               	addwf	1,f
 10296                           
 10297                           ;battery_charger.c: 105: if(VHoldMode[z]<(9*-1))
 10298  0F26  0845               	movf	cc_cv_mode@z,w
 10299  0F27  3E60               	addlw	(low (_VHoldMode| 0))& (0+255)
 10300  0F28  0086               	movwf	6
 10301  0F29  0187               	clrf	7
 10302  0F2A  0801               	movf	1,w
 10303  0F2B  3A80               	xorlw	128
 10304  0F2C  3E89               	addlw	137
 10305  0F2D  1803               	skipnc
 10306  0F2E  2F45               	goto	l132
 10307                           
 10308                           ;battery_charger.c: 106: {
 10309                           ;battery_charger.c: 107: Imode[z]=1;
 10310  0F2F  0845               	movf	cc_cv_mode@z,w
 10311  0F30  3E62               	addlw	(low (_Imode| 0))& (0+255)
 10312  0F31  0086               	movwf	6
 10313  0F32  0187               	clrf	7
 10314  0F33  0181               	clrf	1
 10315  0F34  0A81               	incf	1,f
 10316                           
 10317                           ;battery_charger.c: 108: cc_cv[z]=(9*2);
 10318  0F35  3012               	movlw	18
 10319  0F36  00BE               	movwf	??_cc_cv_mode
 10320  0F37  0845               	movf	cc_cv_mode@z,w
 10321  0F38  3ED4               	addlw	(low (_cc_cv| 0))& (0+255)
 10322  0F39  0086               	movwf	6
 10323  0F3A  0187               	clrf	7
 10324  0F3B  083E               	movf	??_cc_cv_mode,w
 10325  0F3C  0081               	movwf	1
 10326                           
 10327                           ;battery_charger.c: 109: VHoldMode[z]=(9*-1);
 10328  0F3D  30F7               	movlw	247
 10329  0F3E  00BE               	movwf	??_cc_cv_mode
 10330  0F3F  0845               	movf	cc_cv_mode@z,w
 10331  0F40  3E60               	addlw	(low (_VHoldMode| 0))& (0+255)
 10332  0F41  0086               	movwf	6
 10333  0F42  0187               	clrf	7
 10334  0F43  083E               	movf	??_cc_cv_mode,w
 10335  0F44  0081               	movwf	1
 10336  0F45                     l132:	
 10337                           
 10338                           ;battery_charger.c: 110: }
 10339                           ;battery_charger.c: 111: }
 10340                           ;battery_charger.c: 113: if(current[z]>Iref[z])
 10341  0F45  3545               	lslf	cc_cv_mode@z,w
 10342  0F46  3EB8               	addlw	(low (_current| 0))& (0+255)
 10343  0F47  0086               	movwf	6
 10344  0F48  0187               	clrf	7
 10345  0F49  3F40               	moviw [0]fsr1
 10346  0F4A  00BE               	movwf	??_cc_cv_mode
 10347  0F4B  3F41               	moviw [1]fsr1
 10348  0F4C  00BF               	movwf	??_cc_cv_mode+1
 10349  0F4D  3545               	lslf	cc_cv_mode@z,w
 10350  0F4E  3EC4               	addlw	(low (_Iref| 0))& (0+255)
 10351  0F4F  0086               	movwf	6
 10352  0F50  0187               	clrf	7
 10353  0F51  3F40               	moviw [0]fsr1
 10354  0F52  00C0               	movwf	??_cc_cv_mode+2
 10355  0F53  3F41               	moviw [1]fsr1
 10356  0F54  00C1               	movwf	??_cc_cv_mode+3
 10357  0F55  0841               	movf	??_cc_cv_mode+3,w
 10358  0F56  3A80               	xorlw	128
 10359  0F57  00C2               	movwf	??_cc_cv_mode+4
 10360  0F58  083F               	movf	??_cc_cv_mode+1,w
 10361  0F59  3A80               	xorlw	128
 10362  0F5A  0242               	subwf	??_cc_cv_mode+4,w
 10363  0F5B  1D03               	skipz
 10364  0F5C  2F5F               	goto	u3355
 10365  0F5D  083E               	movf	??_cc_cv_mode,w
 10366  0F5E  0240               	subwf	??_cc_cv_mode+2,w
 10367  0F5F                     u3355:	
 10368  0F5F  1803               	skipnc
 10369  0F60  0008               	return
 10370                           
 10371                           ;battery_charger.c: 114: {
 10372                           ;battery_charger.c: 115: if(!(Imode[z]))
 10373  0F61  0020               	movlb	0	; select bank0
 10374  0F62  0845               	movf	cc_cv_mode@z,w
 10375  0F63  3E62               	addlw	(low (_Imode| 0))& (0+255)
 10376  0F64  0086               	movwf	6
 10377  0F65  0187               	clrf	7
 10378  0F66  0801               	movf	1,w
 10379  0F67  1D03               	btfss	3,2
 10380  0F68  0008               	return
 10381                           
 10382                           ;battery_charger.c: 116: {
 10383                           ;battery_charger.c: 117: if(batteryState[z]==FLOAT)
 10384  0F69  0845               	movf	cc_cv_mode@z,w
 10385  0F6A  3E64               	addlw	(low (_batteryState| 0))& (0+255)
 10386  0F6B  0086               	movwf	6
 10387  0F6C  0187               	clrf	7
 10388  0F6D  3005               	movlw	5
 10389  0F6E  0601               	xorwf	1,w
 10390  0F6F  1D03               	btfss	3,2
 10391  0F70  0008               	return
 10392                           
 10393                           ;battery_charger.c: 118: {
 10394                           ;battery_charger.c: 119: if(voltage[z]<1350+(int16_t)((250-batteryTemp)*.24)-70)
 10395  0F71  096C               	comf	_batteryTemp,w
 10396  0F72  00BE               	movwf	??_cc_cv_mode
 10397  0F73  096D               	comf	_batteryTemp+1,w
 10398  0F74  00BF               	movwf	??_cc_cv_mode+1
 10399  0F75  0ABE               	incf	??_cc_cv_mode,f
 10400  0F76  1903               	skipnz
 10401  0F77  0ABF               	incf	??_cc_cv_mode+1,f
 10402  0F78  083E               	movf	??_cc_cv_mode,w
 10403  0F79  3EFA               	addlw	250
 10404  0F7A  00F8               	movwf	___awtoft@c
 10405  0F7B  3000               	movlw	0
 10406  0F7C  3D3F               	addwfc	??_cc_cv_mode+1,w
 10407  0F7D  00F9               	movwf	___awtoft@c+1
 10408  0F7E  3193  23F0  318E   	fcall	___awtoft
 10409  0F81  0878               	movf	?___awtoft,w
 10410  0F82  0020               	movlb	0	; select bank0
 10411  0F83  00A3               	movwf	___ftmul@f2
 10412  0F84  0879               	movf	?___awtoft+1,w
 10413  0F85  00A4               	movwf	___ftmul@f2+1
 10414  0F86  087A               	movf	?___awtoft+2,w
 10415  0F87  00A5               	movwf	___ftmul@f2+2
 10416  0F88  30C3               	movlw	195
 10417  0F89  00A0               	movwf	___ftmul@f1
 10418  0F8A  3075               	movlw	117
 10419  0F8B  00A1               	movwf	___ftmul@f1+1
 10420  0F8C  303E               	movlw	62
 10421  0F8D  00A2               	movwf	___ftmul@f1+2
 10422  0F8E  318B  232F  318E   	fcall	___ftmul
 10423  0F91  0020               	movlb	0	; select bank0
 10424  0F92  0820               	movf	?___ftmul,w
 10425  0F93  00B0               	movwf	___fttol@f1
 10426  0F94  0821               	movf	?___ftmul+1,w
 10427  0F95  00B1               	movwf	___fttol@f1+1
 10428  0F96  0822               	movf	?___ftmul+2,w
 10429  0F97  00B2               	movwf	___fttol@f1+2
 10430  0F98  3189  214F  318E   	fcall	___fttol
 10431  0F9B  0020               	movlb	0	; select bank0
 10432  0F9C  0830               	movf	?___fttol,w
 10433  0F9D  3E00               	addlw	0
 10434  0F9E  00C0               	movwf	??_cc_cv_mode+2
 10435  0F9F  3005               	movlw	5
 10436  0FA0  3D31               	addwfc	?___fttol+1,w
 10437  0FA1  00C1               	movwf	??_cc_cv_mode+3
 10438  0FA2  3545               	lslf	cc_cv_mode@z,w
 10439  0FA3  3EB0               	addlw	(low (_voltage| 0))& (0+255)
 10440  0FA4  0086               	movwf	6
 10441  0FA5  0187               	clrf	7
 10442  0FA6  3F40               	moviw [0]fsr1
 10443  0FA7  00C2               	movwf	??_cc_cv_mode+4
 10444  0FA8  3F41               	moviw [1]fsr1
 10445  0FA9  00C3               	movwf	??_cc_cv_mode+5
 10446  0FAA  0843               	movf	??_cc_cv_mode+5,w
 10447  0FAB  3A80               	xorlw	128
 10448  0FAC  00C4               	movwf	??_cc_cv_mode+6
 10449  0FAD  0841               	movf	??_cc_cv_mode+3,w
 10450  0FAE  3A80               	xorlw	128
 10451  0FAF  0244               	subwf	??_cc_cv_mode+6,w
 10452  0FB0  1D03               	skipz
 10453  0FB1  2FB4               	goto	u3385
 10454  0FB2  0840               	movf	??_cc_cv_mode+2,w
 10455  0FB3  0242               	subwf	??_cc_cv_mode+4,w
 10456  0FB4                     u3385:	
 10457  0FB4  1803               	skipnc
 10458  0FB5  0008               	return
 10459                           
 10460                           ;battery_charger.c: 120: {
 10461                           ;battery_charger.c: 121: batteryState[z]=CHARGE;
 10462  0FB6  3004               	movlw	4
 10463  0FB7  0020               	movlb	0	; select bank0
 10464  0FB8  00BE               	movwf	??_cc_cv_mode
 10465  0FB9  0845               	movf	cc_cv_mode@z,w
 10466  0FBA  3E64               	addlw	(low (_batteryState| 0))& (0+255)
 10467  0FBB  0086               	movwf	6
 10468  0FBC  0187               	clrf	7
 10469  0FBD  083E               	movf	??_cc_cv_mode,w
 10470  0FBE  0081               	movwf	1
 10471                           
 10472                           ;battery_charger.c: 122: Vref[z]=1425+(int16_t)((250-batteryTemp)*.24);
 10473  0FBF  096C               	comf	_batteryTemp,w
 10474  0FC0  00BE               	movwf	??_cc_cv_mode
 10475  0FC1  096D               	comf	_batteryTemp+1,w
 10476  0FC2  00BF               	movwf	??_cc_cv_mode+1
 10477  0FC3  0ABE               	incf	??_cc_cv_mode,f
 10478  0FC4  1903               	skipnz
 10479  0FC5  0ABF               	incf	??_cc_cv_mode+1,f
 10480  0FC6  083E               	movf	??_cc_cv_mode,w
 10481  0FC7  3EFA               	addlw	250
 10482  0FC8  00F8               	movwf	___awtoft@c
 10483  0FC9  3000               	movlw	0
 10484  0FCA  3D3F               	addwfc	??_cc_cv_mode+1,w
 10485  0FCB  00F9               	movwf	___awtoft@c+1
 10486  0FCC  3193  23F0  318E   	fcall	___awtoft
 10487  0FCF  0878               	movf	?___awtoft,w
 10488  0FD0  0020               	movlb	0	; select bank0
 10489  0FD1  00A3               	movwf	___ftmul@f2
 10490  0FD2  0879               	movf	?___awtoft+1,w
 10491  0FD3  00A4               	movwf	___ftmul@f2+1
 10492  0FD4  087A               	movf	?___awtoft+2,w
 10493  0FD5  00A5               	movwf	___ftmul@f2+2
 10494  0FD6  30C3               	movlw	195
 10495  0FD7  00A0               	movwf	___ftmul@f1
 10496  0FD8  3075               	movlw	117
 10497  0FD9  00A1               	movwf	___ftmul@f1+1
 10498  0FDA  303E               	movlw	62
 10499  0FDB  00A2               	movwf	___ftmul@f1+2
 10500  0FDC  318B  232F  318E   	fcall	___ftmul
 10501  0FDF  0020               	movlb	0	; select bank0
 10502  0FE0  0820               	movf	?___ftmul,w
 10503  0FE1  00B0               	movwf	___fttol@f1
 10504  0FE2  0821               	movf	?___ftmul+1,w
 10505  0FE3  00B1               	movwf	___fttol@f1+1
 10506  0FE4  0822               	movf	?___ftmul+2,w
 10507  0FE5  00B2               	movwf	___fttol@f1+2
 10508  0FE6  3189  214F         	fcall	___fttol
 10509  0FE8  0020               	movlb	0	; select bank0
 10510  0FE9  0830               	movf	?___fttol,w
 10511  0FEA  3E91               	addlw	145
 10512  0FEB  00C0               	movwf	??_cc_cv_mode+2
 10513  0FEC  3005               	movlw	5
 10514  0FED  3D31               	addwfc	?___fttol+1,w
 10515  0FEE  00C1               	movwf	??_cc_cv_mode+3
 10516  0FEF  3545               	lslf	cc_cv_mode@z,w
 10517  0FF0  3E5A               	addlw	(low (_Vref| 0))& (0+255)
 10518  0FF1  0086               	movwf	6
 10519  0FF2  0187               	clrf	7
 10520  0FF3  0840               	movf	??_cc_cv_mode+2,w
 10521  0FF4  3FC0               	movwi [0]fsr1
 10522  0FF5  0841               	movf	??_cc_cv_mode+3,w
 10523  0FF6  3FC1               	movwi [1]fsr1
 10524                           
 10525                           ;battery_charger.c: 123: Iref[z]=35;
 10526  0FF7  3545               	lslf	cc_cv_mode@z,w
 10527  0FF8  3EC4               	addlw	(low (_Iref| 0))& (0+255)
 10528  0FF9  0086               	movwf	6
 10529  0FFA  0187               	clrf	7
 10530  0FFB  3023               	movlw	35
 10531  0FFC  3FC0               	movwi [0]fsr1
 10532  0FFD  3000               	movlw	0
 10533  0FFE  3FC1               	movwi [1]fsr1
 10534  0FFF  0008               	return
 10535  1000                     __end_of_cc_cv_mode:	
 10536                           
 10537                           	psect	text13
 10538  0004                     __ptext13:	
 10539 ;; *************** function _calculateCurrent3 *****************
 10540 ;; Defined at:
 10541 ;;		line 414 in file "main.c"
 10542 ;; Parameters:    Size  Location     Type
 10543 ;;		None
 10544 ;; Auto vars:     Size  Location     Type
 10545 ;;		None
 10546 ;; Return value:  Size  Location     Type
 10547 ;;                  1    wreg      void 
 10548 ;; Registers used:
 10549 ;;		wreg, status,2, status,0, pclath, cstack
 10550 ;; Tracked objects:
 10551 ;;		On entry : 0/0
 10552 ;;		On exit  : 0/0
 10553 ;;		Unchanged: 0/0
 10554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10555 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10556 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10557 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10558 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10559 ;;Total ram usage:        3 bytes
 10560 ;; Hardware stack levels used:    1
 10561 ;; Hardware stack levels required when called:    2
 10562 ;; This function calls:
 10563 ;;		___awtoft
 10564 ;;		___ftdiv
 10565 ;;		___fttol
 10566 ;; This function is called by:
 10567 ;;		_main
 10568 ;; This function uses a non-reentrant model
 10569 ;;
 10570                           
 10571                           
 10572                           ;psect for function _calculateCurrent3
 10573  0004                     _calculateCurrent3:	
 10574                           
 10575                           ;main.c: 416: if(Ianalogs[3]-559<=0)
 10576                           
 10577                           ;incstack = 0
 10578                           ; Regs used in _calculateCurrent3: [wreg+status,2+status,0+pclath+cstack]
 10579  0004  0021               	movlb	1	; select bank1
 10580  0005  0826               	movf	(_Ianalogs^(0+128)+6),w
 10581  0006  3ED1               	addlw	209
 10582  0007  0020               	movlb	0	; select bank0
 10583  0008  00BE               	movwf	??_calculateCurrent3
 10584  0009  30FD               	movlw	253
 10585  000A  0021               	movlb	1	; select bank1
 10586  000B  3D27               	addwfc	((_Ianalogs+1)^(0+128)+6),w
 10587  000C  0020               	movlb	0	; select bank0
 10588  000D  00BF               	movwf	??_calculateCurrent3+1
 10589  000E  083F               	movf	??_calculateCurrent3+1,w
 10590  000F  3A80               	xorlw	128
 10591  0010  00C0               	movwf	??_calculateCurrent3+2
 10592  0011  3080               	movlw	128
 10593  0012  0240               	subwf	??_calculateCurrent3+2,w
 10594  0013  1D03               	skipz
 10595  0014  2817               	goto	u3635
 10596  0015  3001               	movlw	1
 10597  0016  023E               	subwf	??_calculateCurrent3,w
 10598  0017                     u3635:	
 10599  0017  1803               	skipnc
 10600  0018  281D               	goto	l3094
 10601                           
 10602                           ;main.c: 417: {
 10603                           ;main.c: 418: current[3]=0;
 10604  0019  0021               	movlb	1	; select bank1
 10605  001A  01BE               	clrf	(_current^(0+128)+6)
 10606  001B  01BF               	clrf	((_current+1)^(0+128)+6)
 10607                           
 10608                           ;main.c: 419: }
 10609  001C  0008               	return
 10610  001D                     l3094:	
 10611                           
 10612                           ;main.c: 420: else
 10613                           ;main.c: 421: {
 10614                           ;main.c: 422: current[3]=(int16_t)((Ianalogs[3]-559)/1.60575);
 10615  001D  0021               	movlb	1	; select bank1
 10616  001E  0826               	movf	(_Ianalogs^(0+128)+6),w
 10617  001F  3ED1               	addlw	209
 10618  0020  00F8               	movwf	___awtoft@c
 10619  0021  30FD               	movlw	253
 10620  0022  3D27               	addwfc	((_Ianalogs+1)^(0+128)+6),w
 10621  0023  00F9               	movwf	___awtoft@c+1
 10622  0024  3193  23F0  3180   	fcall	___awtoft
 10623  0027  0878               	movf	?___awtoft,w
 10624  0028  0020               	movlb	0	; select bank0
 10625  0029  00A3               	movwf	___ftdiv@f1
 10626  002A  0879               	movf	?___awtoft+1,w
 10627  002B  00A4               	movwf	___ftdiv@f1+1
 10628  002C  087A               	movf	?___awtoft+2,w
 10629  002D  00A5               	movwf	___ftdiv@f1+2
 10630  002E  3089               	movlw	137
 10631  002F  00A0               	movwf	___ftdiv@f2
 10632  0030  30CD               	movlw	205
 10633  0031  00A1               	movwf	___ftdiv@f2+1
 10634  0032  303F               	movlw	63
 10635  0033  00A2               	movwf	___ftdiv@f2+2
 10636  0034  3189  21D6  3180   	fcall	___ftdiv
 10637  0037  0020               	movlb	0	; select bank0
 10638  0038  0820               	movf	?___ftdiv,w
 10639  0039  00B0               	movwf	___fttol@f1
 10640  003A  0821               	movf	?___ftdiv+1,w
 10641  003B  00B1               	movwf	___fttol@f1+1
 10642  003C  0822               	movf	?___ftdiv+2,w
 10643  003D  00B2               	movwf	___fttol@f1+2
 10644  003E  3189  214F         	fcall	___fttol
 10645  0040  0020               	movlb	0	; select bank0
 10646  0041  0831               	movf	?___fttol+1,w
 10647  0042  0021               	movlb	1	; select bank1
 10648  0043  00BF               	movwf	((_current+1)^(0+128)+6)
 10649  0044  0020               	movlb	0	; select bank0
 10650  0045  0830               	movf	?___fttol,w
 10651  0046  0021               	movlb	1	; select bank1
 10652  0047  00BE               	movwf	(_current^(0+128)+6)
 10653  0048  0008               	return
 10654  0049                     __end_of_calculateCurrent3:	
 10655                           
 10656                           	psect	text14
 10657  0806                     __ptext14:	
 10658 ;; *************** function _calculateCurrent2 *****************
 10659 ;; Defined at:
 10660 ;;		line 401 in file "main.c"
 10661 ;; Parameters:    Size  Location     Type
 10662 ;;		None
 10663 ;; Auto vars:     Size  Location     Type
 10664 ;;		None
 10665 ;; Return value:  Size  Location     Type
 10666 ;;                  1    wreg      void 
 10667 ;; Registers used:
 10668 ;;		wreg, status,2, status,0, pclath, cstack
 10669 ;; Tracked objects:
 10670 ;;		On entry : 0/0
 10671 ;;		On exit  : 0/0
 10672 ;;		Unchanged: 0/0
 10673 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10674 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10675 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10676 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10677 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10678 ;;Total ram usage:        3 bytes
 10679 ;; Hardware stack levels used:    1
 10680 ;; Hardware stack levels required when called:    2
 10681 ;; This function calls:
 10682 ;;		___awtoft
 10683 ;;		___ftdiv
 10684 ;;		___fttol
 10685 ;; This function is called by:
 10686 ;;		_main
 10687 ;; This function uses a non-reentrant model
 10688 ;;
 10689                           
 10690                           
 10691                           ;psect for function _calculateCurrent2
 10692  0806                     _calculateCurrent2:	
 10693                           
 10694                           ;main.c: 403: if(Ianalogs[2]-565<=0)
 10695                           
 10696                           ;incstack = 0
 10697                           ; Regs used in _calculateCurrent2: [wreg+status,2+status,0+pclath+cstack]
 10698  0806  0021               	movlb	1	; select bank1
 10699  0807  0824               	movf	(_Ianalogs^(0+128)+4),w
 10700  0808  3ECB               	addlw	203
 10701  0809  0020               	movlb	0	; select bank0
 10702  080A  00BE               	movwf	??_calculateCurrent2
 10703  080B  30FD               	movlw	253
 10704  080C  0021               	movlb	1	; select bank1
 10705  080D  3D25               	addwfc	((_Ianalogs+1)^(0+128)+4),w
 10706  080E  0020               	movlb	0	; select bank0
 10707  080F  00BF               	movwf	??_calculateCurrent2+1
 10708  0810  083F               	movf	??_calculateCurrent2+1,w
 10709  0811  3A80               	xorlw	128
 10710  0812  00C0               	movwf	??_calculateCurrent2+2
 10711  0813  3080               	movlw	128
 10712  0814  0240               	subwf	??_calculateCurrent2+2,w
 10713  0815  1D03               	skipz
 10714  0816  2819               	goto	u3625
 10715  0817  3001               	movlw	1
 10716  0818  023E               	subwf	??_calculateCurrent2,w
 10717  0819                     u3625:	
 10718  0819  1803               	skipnc
 10719  081A  281F               	goto	l3088
 10720                           
 10721                           ;main.c: 404: {
 10722                           ;main.c: 405: current[2]=0;
 10723  081B  0021               	movlb	1	; select bank1
 10724  081C  01BC               	clrf	(_current^(0+128)+4)
 10725  081D  01BD               	clrf	((_current+1)^(0+128)+4)
 10726                           
 10727                           ;main.c: 406: }
 10728  081E  0008               	return
 10729  081F                     l3088:	
 10730                           
 10731                           ;main.c: 407: else
 10732                           ;main.c: 408: {
 10733                           ;main.c: 410: current[2]=(int16_t)((Ianalogs[2]-565)/3.05);
 10734  081F  0021               	movlb	1	; select bank1
 10735  0820  0824               	movf	(_Ianalogs^(0+128)+4),w
 10736  0821  3ECB               	addlw	203
 10737  0822  00F8               	movwf	___awtoft@c
 10738  0823  30FD               	movlw	253
 10739  0824  3D25               	addwfc	((_Ianalogs+1)^(0+128)+4),w
 10740  0825  00F9               	movwf	___awtoft@c+1
 10741  0826  3193  23F0  3188   	fcall	___awtoft
 10742  0829  0878               	movf	?___awtoft,w
 10743  082A  0020               	movlb	0	; select bank0
 10744  082B  00A3               	movwf	___ftdiv@f1
 10745  082C  0879               	movf	?___awtoft+1,w
 10746  082D  00A4               	movwf	___ftdiv@f1+1
 10747  082E  087A               	movf	?___awtoft+2,w
 10748  082F  00A5               	movwf	___ftdiv@f1+2
 10749  0830  3033               	movlw	51
 10750  0831  00A0               	movwf	___ftdiv@f2
 10751  0832  3043               	movlw	67
 10752  0833  00A1               	movwf	___ftdiv@f2+1
 10753  0834  3040               	movlw	64
 10754  0835  00A2               	movwf	___ftdiv@f2+2
 10755  0836  3189  21D6  3188   	fcall	___ftdiv
 10756  0839  0020               	movlb	0	; select bank0
 10757  083A  0820               	movf	?___ftdiv,w
 10758  083B  00B0               	movwf	___fttol@f1
 10759  083C  0821               	movf	?___ftdiv+1,w
 10760  083D  00B1               	movwf	___fttol@f1+1
 10761  083E  0822               	movf	?___ftdiv+2,w
 10762  083F  00B2               	movwf	___fttol@f1+2
 10763  0840  3189  214F         	fcall	___fttol
 10764  0842  0020               	movlb	0	; select bank0
 10765  0843  0831               	movf	?___fttol+1,w
 10766  0844  0021               	movlb	1	; select bank1
 10767  0845  00BD               	movwf	((_current+1)^(0+128)+4)
 10768  0846  0020               	movlb	0	; select bank0
 10769  0847  0830               	movf	?___fttol,w
 10770  0848  0021               	movlb	1	; select bank1
 10771  0849  00BC               	movwf	(_current^(0+128)+4)
 10772  084A  0008               	return
 10773  084B                     __end_of_calculateCurrent2:	
 10774                           
 10775                           	psect	text15
 10776  15EF                     __ptext15:	
 10777 ;; *************** function _calculateCurrent1 *****************
 10778 ;; Defined at:
 10779 ;;		line 389 in file "main.c"
 10780 ;; Parameters:    Size  Location     Type
 10781 ;;		None
 10782 ;; Auto vars:     Size  Location     Type
 10783 ;;		None
 10784 ;; Return value:  Size  Location     Type
 10785 ;;                  1    wreg      void 
 10786 ;; Registers used:
 10787 ;;		wreg, status,2, status,0, pclath, cstack
 10788 ;; Tracked objects:
 10789 ;;		On entry : 0/0
 10790 ;;		On exit  : 0/0
 10791 ;;		Unchanged: 0/0
 10792 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10793 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10794 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10795 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10796 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10797 ;;Total ram usage:        3 bytes
 10798 ;; Hardware stack levels used:    1
 10799 ;; Hardware stack levels required when called:    2
 10800 ;; This function calls:
 10801 ;;		___awtoft
 10802 ;;		___ftdiv
 10803 ;;		___fttol
 10804 ;; This function is called by:
 10805 ;;		_main
 10806 ;; This function uses a non-reentrant model
 10807 ;;
 10808                           
 10809                           
 10810                           ;psect for function _calculateCurrent1
 10811  15EF                     _calculateCurrent1:	
 10812                           
 10813                           ;main.c: 391: if(Ianalogs[1]-561<=0)
 10814                           
 10815                           ;incstack = 0
 10816                           ; Regs used in _calculateCurrent1: [wreg+status,2+status,0+pclath+cstack]
 10817  15EF  0021               	movlb	1	; select bank1
 10818  15F0  0822               	movf	(_Ianalogs^(0+128)+2),w
 10819  15F1  3ECF               	addlw	207
 10820  15F2  0020               	movlb	0	; select bank0
 10821  15F3  00BE               	movwf	??_calculateCurrent1
 10822  15F4  30FD               	movlw	253
 10823  15F5  0021               	movlb	1	; select bank1
 10824  15F6  3D23               	addwfc	((_Ianalogs+1)^(0+128)+2),w
 10825  15F7  0020               	movlb	0	; select bank0
 10826  15F8  00BF               	movwf	??_calculateCurrent1+1
 10827  15F9  083F               	movf	??_calculateCurrent1+1,w
 10828  15FA  3A80               	xorlw	128
 10829  15FB  00C0               	movwf	??_calculateCurrent1+2
 10830  15FC  3080               	movlw	128
 10831  15FD  0240               	subwf	??_calculateCurrent1+2,w
 10832  15FE  1D03               	skipz
 10833  15FF  2E02               	goto	u3615
 10834  1600  3001               	movlw	1
 10835  1601  023E               	subwf	??_calculateCurrent1,w
 10836  1602                     u3615:	
 10837  1602  1803               	skipnc
 10838  1603  2E08               	goto	l3082
 10839                           
 10840                           ;main.c: 392: {
 10841                           ;main.c: 393: current[1]=0;
 10842  1604  0021               	movlb	1	; select bank1
 10843  1605  01BA               	clrf	(_current^(0+128)+2)
 10844  1606  01BB               	clrf	((_current+1)^(0+128)+2)
 10845                           
 10846                           ;main.c: 394: }
 10847  1607  0008               	return
 10848  1608                     l3082:	
 10849                           
 10850                           ;main.c: 395: else
 10851                           ;main.c: 396: {
 10852                           ;main.c: 397: current[1]=(int16_t)((Ianalogs[1]-561)/1.99055);
 10853  1608  0021               	movlb	1	; select bank1
 10854  1609  0822               	movf	(_Ianalogs^(0+128)+2),w
 10855  160A  3ECF               	addlw	207
 10856  160B  00F8               	movwf	___awtoft@c
 10857  160C  30FD               	movlw	253
 10858  160D  3D23               	addwfc	((_Ianalogs+1)^(0+128)+2),w
 10859  160E  00F9               	movwf	___awtoft@c+1
 10860  160F  3193  23F0  3195   	fcall	___awtoft
 10861  1612  0878               	movf	?___awtoft,w
 10862  1613  0020               	movlb	0	; select bank0
 10863  1614  00A3               	movwf	___ftdiv@f1
 10864  1615  0879               	movf	?___awtoft+1,w
 10865  1616  00A4               	movwf	___ftdiv@f1+1
 10866  1617  087A               	movf	?___awtoft+2,w
 10867  1618  00A5               	movwf	___ftdiv@f1+2
 10868  1619  30CA               	movlw	202
 10869  161A  00A0               	movwf	___ftdiv@f2
 10870  161B  30FE               	movlw	254
 10871  161C  00A1               	movwf	___ftdiv@f2+1
 10872  161D  303F               	movlw	63
 10873  161E  00A2               	movwf	___ftdiv@f2+2
 10874  161F  3189  21D6  3195   	fcall	___ftdiv
 10875  1622  0020               	movlb	0	; select bank0
 10876  1623  0820               	movf	?___ftdiv,w
 10877  1624  00B0               	movwf	___fttol@f1
 10878  1625  0821               	movf	?___ftdiv+1,w
 10879  1626  00B1               	movwf	___fttol@f1+1
 10880  1627  0822               	movf	?___ftdiv+2,w
 10881  1628  00B2               	movwf	___fttol@f1+2
 10882  1629  3189  214F         	fcall	___fttol
 10883  162B  0020               	movlb	0	; select bank0
 10884  162C  0831               	movf	?___fttol+1,w
 10885  162D  0021               	movlb	1	; select bank1
 10886  162E  00BB               	movwf	((_current+1)^(0+128)+2)
 10887  162F  0020               	movlb	0	; select bank0
 10888  1630  0830               	movf	?___fttol,w
 10889  1631  0021               	movlb	1	; select bank1
 10890  1632  00BA               	movwf	(_current^(0+128)+2)
 10891  1633  0008               	return
 10892  1634                     __end_of_calculateCurrent1:	
 10893                           
 10894                           	psect	text16
 10895  15AA                     __ptext16:	
 10896 ;; *************** function _calculateCurrent0 *****************
 10897 ;; Defined at:
 10898 ;;		line 376 in file "main.c"
 10899 ;; Parameters:    Size  Location     Type
 10900 ;;		None
 10901 ;; Auto vars:     Size  Location     Type
 10902 ;;		None
 10903 ;; Return value:  Size  Location     Type
 10904 ;;                  1    wreg      void 
 10905 ;; Registers used:
 10906 ;;		wreg, status,2, status,0, pclath, cstack
 10907 ;; Tracked objects:
 10908 ;;		On entry : 0/0
 10909 ;;		On exit  : 0/0
 10910 ;;		Unchanged: 0/0
 10911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10912 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10913 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10914 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10915 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10916 ;;Total ram usage:        3 bytes
 10917 ;; Hardware stack levels used:    1
 10918 ;; Hardware stack levels required when called:    2
 10919 ;; This function calls:
 10920 ;;		___awtoft
 10921 ;;		___ftdiv
 10922 ;;		___fttol
 10923 ;; This function is called by:
 10924 ;;		_main
 10925 ;; This function uses a non-reentrant model
 10926 ;;
 10927                           
 10928                           
 10929                           ;psect for function _calculateCurrent0
 10930  15AA                     _calculateCurrent0:	
 10931                           
 10932                           ;main.c: 378: if(Ianalogs[0]-559<=0)
 10933                           
 10934                           ;incstack = 0
 10935                           ; Regs used in _calculateCurrent0: [wreg+status,2+status,0+pclath+cstack]
 10936  15AA  0021               	movlb	1	; select bank1
 10937  15AB  0820               	movf	_Ianalogs^(0+128),w
 10938  15AC  3ED1               	addlw	209
 10939  15AD  0020               	movlb	0	; select bank0
 10940  15AE  00BE               	movwf	??_calculateCurrent0
 10941  15AF  30FD               	movlw	253
 10942  15B0  0021               	movlb	1	; select bank1
 10943  15B1  3D21               	addwfc	(_Ianalogs+1)^(0+128),w
 10944  15B2  0020               	movlb	0	; select bank0
 10945  15B3  00BF               	movwf	??_calculateCurrent0+1
 10946  15B4  083F               	movf	??_calculateCurrent0+1,w
 10947  15B5  3A80               	xorlw	128
 10948  15B6  00C0               	movwf	??_calculateCurrent0+2
 10949  15B7  3080               	movlw	128
 10950  15B8  0240               	subwf	??_calculateCurrent0+2,w
 10951  15B9  1D03               	skipz
 10952  15BA  2DBD               	goto	u3605
 10953  15BB  3001               	movlw	1
 10954  15BC  023E               	subwf	??_calculateCurrent0,w
 10955  15BD                     u3605:	
 10956  15BD  1803               	skipnc
 10957  15BE  2DC3               	goto	l3076
 10958                           
 10959                           ;main.c: 379: {
 10960                           ;main.c: 380: current[0]=0;
 10961  15BF  0021               	movlb	1	; select bank1
 10962  15C0  01B8               	clrf	_current^(0+128)
 10963  15C1  01B9               	clrf	(_current+1)^(0+128)
 10964                           
 10965                           ;main.c: 381: }
 10966  15C2  0008               	return
 10967  15C3                     l3076:	
 10968                           
 10969                           ;main.c: 382: else
 10970                           ;main.c: 383: {
 10971                           ;main.c: 385: current[0]=(int16_t)((Ianalogs[0]-559)/3.09);
 10972  15C3  0021               	movlb	1	; select bank1
 10973  15C4  0820               	movf	_Ianalogs^(0+128),w
 10974  15C5  3ED1               	addlw	209
 10975  15C6  00F8               	movwf	___awtoft@c
 10976  15C7  30FD               	movlw	253
 10977  15C8  3D21               	addwfc	(_Ianalogs+1)^(0+128),w
 10978  15C9  00F9               	movwf	___awtoft@c+1
 10979  15CA  3193  23F0  3195   	fcall	___awtoft
 10980  15CD  0878               	movf	?___awtoft,w
 10981  15CE  0020               	movlb	0	; select bank0
 10982  15CF  00A3               	movwf	___ftdiv@f1
 10983  15D0  0879               	movf	?___awtoft+1,w
 10984  15D1  00A4               	movwf	___ftdiv@f1+1
 10985  15D2  087A               	movf	?___awtoft+2,w
 10986  15D3  00A5               	movwf	___ftdiv@f1+2
 10987  15D4  30C3               	movlw	195
 10988  15D5  00A0               	movwf	___ftdiv@f2
 10989  15D6  3045               	movlw	69
 10990  15D7  00A1               	movwf	___ftdiv@f2+1
 10991  15D8  3040               	movlw	64
 10992  15D9  00A2               	movwf	___ftdiv@f2+2
 10993  15DA  3189  21D6  3195   	fcall	___ftdiv
 10994  15DD  0020               	movlb	0	; select bank0
 10995  15DE  0820               	movf	?___ftdiv,w
 10996  15DF  00B0               	movwf	___fttol@f1
 10997  15E0  0821               	movf	?___ftdiv+1,w
 10998  15E1  00B1               	movwf	___fttol@f1+1
 10999  15E2  0822               	movf	?___ftdiv+2,w
 11000  15E3  00B2               	movwf	___fttol@f1+2
 11001  15E4  3189  214F         	fcall	___fttol
 11002  15E6  0020               	movlb	0	; select bank0
 11003  15E7  0831               	movf	?___fttol+1,w
 11004  15E8  0021               	movlb	1	; select bank1
 11005  15E9  00B9               	movwf	(_current+1)^(0+128)
 11006  15EA  0020               	movlb	0	; select bank0
 11007  15EB  0830               	movf	?___fttol,w
 11008  15EC  0021               	movlb	1	; select bank1
 11009  15ED  00B8               	movwf	_current^(0+128)
 11010  15EE  0008               	return
 11011  15EF                     __end_of_calculateCurrent0:	
 11012                           
 11013                           	psect	text17
 11014  09D6                     __ptext17:	
 11015 ;; *************** function ___ftdiv *****************
 11016 ;; Defined at:
 11017 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
 11018 ;; Parameters:    Size  Location     Type
 11019 ;;  f2              3    0[BANK0 ] float 
 11020 ;;  f1              3    3[BANK0 ] float 
 11021 ;; Auto vars:     Size  Location     Type
 11022 ;;  f3              3   11[BANK0 ] float 
 11023 ;;  sign            1   15[BANK0 ] unsigned char 
 11024 ;;  exp             1   14[BANK0 ] unsigned char 
 11025 ;;  cntr            1   10[BANK0 ] unsigned char 
 11026 ;; Return value:  Size  Location     Type
 11027 ;;                  3    0[BANK0 ] float 
 11028 ;; Registers used:
 11029 ;;		wreg, status,2, status,0, pclath, cstack
 11030 ;; Tracked objects:
 11031 ;;		On entry : 0/0
 11032 ;;		On exit  : 0/0
 11033 ;;		Unchanged: 0/0
 11034 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11035 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11036 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11037 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11038 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11039 ;;Total ram usage:       16 bytes
 11040 ;; Hardware stack levels used:    1
 11041 ;; Hardware stack levels required when called:    1
 11042 ;; This function calls:
 11043 ;;		___ftpack
 11044 ;; This function is called by:
 11045 ;;		_tempCalc
 11046 ;;		_main
 11047 ;;		_calculateCurrent0
 11048 ;;		_calculateCurrent1
 11049 ;;		_calculateCurrent2
 11050 ;;		_calculateCurrent3
 11051 ;; This function uses a non-reentrant model
 11052 ;;
 11053                           
 11054                           
 11055                           ;psect for function ___ftdiv
 11056  09D6                     ___ftdiv:	
 11057                           
 11058                           ;incstack = 0
 11059                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 11060  09D6  0020               	movlb	0	; select bank0
 11061  09D7  0823               	movf	___ftdiv@f1,w
 11062  09D8  00A6               	movwf	??___ftdiv
 11063  09D9  0824               	movf	___ftdiv@f1+1,w
 11064  09DA  00A7               	movwf	??___ftdiv+1
 11065  09DB  0825               	movf	___ftdiv@f1+2,w
 11066  09DC  00A8               	movwf	??___ftdiv+2
 11067  09DD  1003               	clrc
 11068  09DE  0D27               	rlf	??___ftdiv+1,w
 11069  09DF  0D28               	rlf	??___ftdiv+2,w
 11070  09E0  00A9               	movwf	??___ftdiv+3
 11071  09E1  0829               	movf	??___ftdiv+3,w
 11072  09E2  00AE               	movwf	___ftdiv@exp
 11073  09E3  082E               	movf	___ftdiv@exp,w
 11074  09E4  1D03               	btfss	3,2
 11075  09E5  29ED               	goto	l2776
 11076  09E6  3000               	movlw	0
 11077  09E7  00A0               	movwf	?___ftdiv
 11078  09E8  3000               	movlw	0
 11079  09E9  00A1               	movwf	?___ftdiv+1
 11080  09EA  3000               	movlw	0
 11081  09EB  00A2               	movwf	?___ftdiv+2
 11082  09EC  0008               	return
 11083  09ED                     l2776:	
 11084  09ED  0820               	movf	___ftdiv@f2,w
 11085  09EE  00A6               	movwf	??___ftdiv
 11086  09EF  0821               	movf	___ftdiv@f2+1,w
 11087  09F0  00A7               	movwf	??___ftdiv+1
 11088  09F1  0822               	movf	___ftdiv@f2+2,w
 11089  09F2  00A8               	movwf	??___ftdiv+2
 11090  09F3  1003               	clrc
 11091  09F4  0D27               	rlf	??___ftdiv+1,w
 11092  09F5  0D28               	rlf	??___ftdiv+2,w
 11093  09F6  00A9               	movwf	??___ftdiv+3
 11094  09F7  0829               	movf	??___ftdiv+3,w
 11095  09F8  00AF               	movwf	___ftdiv@sign
 11096  09F9  082F               	movf	___ftdiv@sign,w
 11097  09FA  1D03               	btfss	3,2
 11098  09FB  2A03               	goto	l2782
 11099  09FC  3000               	movlw	0
 11100  09FD  00A0               	movwf	?___ftdiv
 11101  09FE  3000               	movlw	0
 11102  09FF  00A1               	movwf	?___ftdiv+1
 11103  0A00  3000               	movlw	0
 11104  0A01  00A2               	movwf	?___ftdiv+2
 11105  0A02  0008               	return
 11106  0A03                     l2782:	
 11107  0A03  3000               	movlw	0
 11108  0A04  00AB               	movwf	___ftdiv@f3
 11109  0A05  3000               	movlw	0
 11110  0A06  00AC               	movwf	___ftdiv@f3+1
 11111  0A07  3000               	movlw	0
 11112  0A08  00AD               	movwf	___ftdiv@f3+2
 11113  0A09  3089               	movlw	137
 11114  0A0A  072F               	addwf	___ftdiv@sign,w
 11115  0A0B  00A6               	movwf	??___ftdiv
 11116  0A0C  0826               	movf	??___ftdiv,w
 11117  0A0D  02AE               	subwf	___ftdiv@exp,f
 11118  0A0E  0823               	movf	___ftdiv@f1,w
 11119  0A0F  00A6               	movwf	??___ftdiv
 11120  0A10  0824               	movf	___ftdiv@f1+1,w
 11121  0A11  00A7               	movwf	??___ftdiv+1
 11122  0A12  0825               	movf	___ftdiv@f1+2,w
 11123  0A13  00A8               	movwf	??___ftdiv+2
 11124  0A14  3010               	movlw	16
 11125  0A15                     u2985:	
 11126  0A15  36A8               	lsrf	??___ftdiv+2,f
 11127  0A16  0CA7               	rrf	??___ftdiv+1,f
 11128  0A17  0CA6               	rrf	??___ftdiv,f
 11129  0A18  0B89               	decfsz	9,f
 11130  0A19  2A15               	goto	u2985
 11131  0A1A  0826               	movf	??___ftdiv,w
 11132  0A1B  00A9               	movwf	??___ftdiv+3
 11133  0A1C  0829               	movf	??___ftdiv+3,w
 11134  0A1D  00AF               	movwf	___ftdiv@sign
 11135  0A1E  0820               	movf	___ftdiv@f2,w
 11136  0A1F  00A6               	movwf	??___ftdiv
 11137  0A20  0821               	movf	___ftdiv@f2+1,w
 11138  0A21  00A7               	movwf	??___ftdiv+1
 11139  0A22  0822               	movf	___ftdiv@f2+2,w
 11140  0A23  00A8               	movwf	??___ftdiv+2
 11141  0A24  3010               	movlw	16
 11142  0A25                     u2995:	
 11143  0A25  36A8               	lsrf	??___ftdiv+2,f
 11144  0A26  0CA7               	rrf	??___ftdiv+1,f
 11145  0A27  0CA6               	rrf	??___ftdiv,f
 11146  0A28  0B89               	decfsz	9,f
 11147  0A29  2A25               	goto	u2995
 11148  0A2A  0826               	movf	??___ftdiv,w
 11149  0A2B  00A9               	movwf	??___ftdiv+3
 11150  0A2C  0829               	movf	??___ftdiv+3,w
 11151  0A2D  06AF               	xorwf	___ftdiv@sign,f
 11152  0A2E  3080               	movlw	128
 11153  0A2F  00A6               	movwf	??___ftdiv
 11154  0A30  0826               	movf	??___ftdiv,w
 11155  0A31  05AF               	andwf	___ftdiv@sign,f
 11156  0A32  17A4               	bsf	___ftdiv@f1+1,7
 11157  0A33  30FF               	movlw	255
 11158  0A34  05A3               	andwf	___ftdiv@f1,f
 11159  0A35  30FF               	movlw	255
 11160  0A36  05A4               	andwf	___ftdiv@f1+1,f
 11161  0A37  3000               	movlw	0
 11162  0A38  05A5               	andwf	___ftdiv@f1+2,f
 11163  0A39  17A1               	bsf	___ftdiv@f2+1,7
 11164  0A3A  30FF               	movlw	255
 11165  0A3B  05A0               	andwf	___ftdiv@f2,f
 11166  0A3C  30FF               	movlw	255
 11167  0A3D  05A1               	andwf	___ftdiv@f2+1,f
 11168  0A3E  3000               	movlw	0
 11169  0A3F  05A2               	andwf	___ftdiv@f2+2,f
 11170  0A40  3018               	movlw	24
 11171  0A41  00A6               	movwf	??___ftdiv
 11172  0A42  0826               	movf	??___ftdiv,w
 11173  0A43  00AA               	movwf	___ftdiv@cntr
 11174  0A44                     l2796:	
 11175  0A44  3001               	movlw	1
 11176  0A45                     u3005:	
 11177  0A45  35AB               	lslf	___ftdiv@f3,f
 11178  0A46  0DAC               	rlf	___ftdiv@f3+1,f
 11179  0A47  0DAD               	rlf	___ftdiv@f3+2,f
 11180  0A48  0B89               	decfsz	9,f
 11181  0A49  2A45               	goto	u3005
 11182  0A4A  0822               	movf	___ftdiv@f2+2,w
 11183  0A4B  0225               	subwf	___ftdiv@f1+2,w
 11184  0A4C  1D03               	skipz
 11185  0A4D  2A54               	goto	u3015
 11186  0A4E  0821               	movf	___ftdiv@f2+1,w
 11187  0A4F  0224               	subwf	___ftdiv@f1+1,w
 11188  0A50  1D03               	skipz
 11189  0A51  2A54               	goto	u3015
 11190  0A52  0820               	movf	___ftdiv@f2,w
 11191  0A53  0223               	subwf	___ftdiv@f1,w
 11192  0A54                     u3015:	
 11193  0A54  1C03               	skipc
 11194  0A55  2A5D               	goto	l2804
 11195  0A56  0820               	movf	___ftdiv@f2,w
 11196  0A57  02A3               	subwf	___ftdiv@f1,f
 11197  0A58  0821               	movf	___ftdiv@f2+1,w
 11198  0A59  3BA4               	subwfb	___ftdiv@f1+1,f
 11199  0A5A  0822               	movf	___ftdiv@f2+2,w
 11200  0A5B  3BA5               	subwfb	___ftdiv@f1+2,f
 11201  0A5C  142B               	bsf	___ftdiv@f3,0
 11202  0A5D                     l2804:	
 11203  0A5D  3001               	movlw	1
 11204  0A5E                     u3025:	
 11205  0A5E  35A3               	lslf	___ftdiv@f1,f
 11206  0A5F  0DA4               	rlf	___ftdiv@f1+1,f
 11207  0A60  0DA5               	rlf	___ftdiv@f1+2,f
 11208  0A61  0B89               	decfsz	9,f
 11209  0A62  2A5E               	goto	u3025
 11210  0A63  3001               	movlw	1
 11211  0A64  02AA               	subwf	___ftdiv@cntr,f
 11212  0A65  1D03               	btfss	3,2
 11213  0A66  2A44               	goto	l2796
 11214  0A67  082B               	movf	___ftdiv@f3,w
 11215  0A68  00F0               	movwf	___ftpack@arg
 11216  0A69  082C               	movf	___ftdiv@f3+1,w
 11217  0A6A  00F1               	movwf	___ftpack@arg+1
 11218  0A6B  082D               	movf	___ftdiv@f3+2,w
 11219  0A6C  00F2               	movwf	___ftpack@arg+2
 11220  0A6D  082E               	movf	___ftdiv@exp,w
 11221  0A6E  00A6               	movwf	??___ftdiv
 11222  0A6F  0826               	movf	??___ftdiv,w
 11223  0A70  00F3               	movwf	___ftpack@exp
 11224  0A71  082F               	movf	___ftdiv@sign,w
 11225  0A72  00A7               	movwf	??___ftdiv+1
 11226  0A73  0827               	movf	??___ftdiv+1,w
 11227  0A74  00F4               	movwf	___ftpack@sign
 11228  0A75  3197  279C         	fcall	___ftpack
 11229  0A77  0870               	movf	?___ftpack,w
 11230  0A78  0020               	movlb	0	; select bank0
 11231  0A79  00A0               	movwf	?___ftdiv
 11232  0A7A  0871               	movf	?___ftpack+1,w
 11233  0A7B  00A1               	movwf	?___ftdiv+1
 11234  0A7C  0872               	movf	?___ftpack+2,w
 11235  0A7D  00A2               	movwf	?___ftdiv+2
 11236  0A7E  0008               	return
 11237  0A7F                     __end_of___ftdiv:	
 11238                           
 11239                           	psect	text18
 11240  14F9                     __ptext18:	
 11241 ;; *************** function _SYSTEM_Initialize *****************
 11242 ;; Defined at:
 11243 ;;		line 71 in file "system.c"
 11244 ;; Parameters:    Size  Location     Type
 11245 ;;		None
 11246 ;; Auto vars:     Size  Location     Type
 11247 ;;		None
 11248 ;; Return value:  Size  Location     Type
 11249 ;;                  1    wreg      void 
 11250 ;; Registers used:
 11251 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11252 ;; Tracked objects:
 11253 ;;		On entry : 0/0
 11254 ;;		On exit  : 0/0
 11255 ;;		Unchanged: 0/0
 11256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11257 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11258 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11259 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11260 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11261 ;;Total ram usage:        2 bytes
 11262 ;; Hardware stack levels used:    1
 11263 ;; Hardware stack levels required when called:    3
 11264 ;; This function calls:
 11265 ;;		_ADC_Initialize
 11266 ;;		_Init_Battery_State_Machine
 11267 ;;		_LCDClear
 11268 ;;		_LCDInit
 11269 ;;		_OSCILLATOR_Initialize
 11270 ;;		_PIN_MANAGER_Initialize
 11271 ;;		_PWM_Initialize
 11272 ;;		_TMR2_Initialize
 11273 ;;		_TMR4_Initialize
 11274 ;; This function is called by:
 11275 ;;		_main
 11276 ;; This function uses a non-reentrant model
 11277 ;;
 11278                           
 11279                           
 11280                           ;psect for function _SYSTEM_Initialize
 11281  14F9                     _SYSTEM_Initialize:	
 11282                           
 11283                           ;system.c: 73: PIN_MANAGER_Initialize();
 11284                           
 11285                           ;incstack = 0
 11286                           ; Regs used in _SYSTEM_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11287  14F9  3194  2487  3194   	fcall	_PIN_MANAGER_Initialize
 11288                           
 11289                           ;system.c: 74: OSCILLATOR_Initialize();
 11290  14FC  3192  22EA  3194   	fcall	_OSCILLATOR_Initialize
 11291                           
 11292                           ;system.c: 76: ADC_Initialize();
 11293  14FF  3193  23D1  3194   	fcall	_ADC_Initialize
 11294                           
 11295                           ;system.c: 77: PWM_Initialize();
 11296  1502  3193  2342  3194   	fcall	_PWM_Initialize
 11297                           
 11298                           ;system.c: 79: TMR2_Initialize();
 11299  1505  3192  22FF  3194   	fcall	_TMR2_Initialize
 11300                           
 11301                           ;system.c: 80: TMR4_Initialize();
 11302  1508  3193  230D  3194   	fcall	_TMR4_Initialize
 11303                           
 11304                           ;system.c: 81: Init_Battery_State_Machine(0);
 11305  150B  3000               	movlw	0
 11306  150C  3197  2739  3194   	fcall	_Init_Battery_State_Machine
 11307                           
 11308                           ;system.c: 82: Init_Battery_State_Machine(1);
 11309  150F  3001               	movlw	1
 11310  1510  3197  2739  3194   	fcall	_Init_Battery_State_Machine
 11311                           
 11312                           ;system.c: 83: LCDInit();
 11313  1513  3194  24BE  3194   	fcall	_LCDInit
 11314                           
 11315                           ;system.c: 84: _delay((unsigned long)((200)*(32000000/4000.0)));
 11316  1516  3009               	movlw	9
 11317  1517  0020               	movlb	0	; select bank0
 11318  1518  00C4               	movwf	??_SYSTEM_Initialize+1
 11319  1519  301E               	movlw	30
 11320  151A  00C3               	movwf	??_SYSTEM_Initialize
 11321  151B  30E4               	movlw	228
 11322  151C                     u3967:	
 11323  151C  0B89               	decfsz	9,f
 11324  151D  2D1C               	goto	u3967
 11325  151E  0BC3               	decfsz	??_SYSTEM_Initialize,f
 11326  151F  2D1C               	goto	u3967
 11327  1520  0BC4               	decfsz	??_SYSTEM_Initialize+1,f
 11328  1521  2D1C               	goto	u3967
 11329  1522  0000               	nop
 11330                           
 11331                           ;system.c: 85: LCDClear();
 11332  1523  3194  2435  3194   	fcall	_LCDClear
 11333                           
 11334                           ;system.c: 86: _delay((unsigned long)((200)*(32000000/4000.0)));
 11335  1526  3009               	movlw	9
 11336  1527  0020               	movlb	0	; select bank0
 11337  1528  00C4               	movwf	??_SYSTEM_Initialize+1
 11338  1529  301E               	movlw	30
 11339  152A  00C3               	movwf	??_SYSTEM_Initialize
 11340  152B  30E4               	movlw	228
 11341  152C                     u3977:	
 11342  152C  0B89               	decfsz	9,f
 11343  152D  2D2C               	goto	u3977
 11344  152E  0BC3               	decfsz	??_SYSTEM_Initialize,f
 11345  152F  2D2C               	goto	u3977
 11346  1530  0BC4               	decfsz	??_SYSTEM_Initialize+1,f
 11347  1531  2D2C               	goto	u3977
 11348  1532  0000               	nop
 11349  1533  0008               	return
 11350  1534                     __end_of_SYSTEM_Initialize:	
 11351                           
 11352                           	psect	text19
 11353  130D                     __ptext19:	
 11354 ;; *************** function _TMR4_Initialize *****************
 11355 ;; Defined at:
 11356 ;;		line 25 in file "tmr.c"
 11357 ;; Parameters:    Size  Location     Type
 11358 ;;		None
 11359 ;; Auto vars:     Size  Location     Type
 11360 ;;		None
 11361 ;; Return value:  Size  Location     Type
 11362 ;;                  1    wreg      void 
 11363 ;; Registers used:
 11364 ;;		wreg, status,2
 11365 ;; Tracked objects:
 11366 ;;		On entry : 0/0
 11367 ;;		On exit  : 0/0
 11368 ;;		Unchanged: 0/0
 11369 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11370 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11371 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11372 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11373 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11374 ;;Total ram usage:        0 bytes
 11375 ;; Hardware stack levels used:    1
 11376 ;; This function calls:
 11377 ;;		Nothing
 11378 ;; This function is called by:
 11379 ;;		_SYSTEM_Initialize
 11380 ;; This function uses a non-reentrant model
 11381 ;;
 11382                           
 11383                           
 11384                           ;psect for function _TMR4_Initialize
 11385  130D                     _TMR4_Initialize:	
 11386                           
 11387                           ;tmr.c: 27: T4CON = 0x00;
 11388                           
 11389                           ;incstack = 0
 11390                           ; Regs used in _TMR4_Initialize: [wreg+status,2]
 11391  130D  0025               	movlb	5	; select bank5
 11392  130E  0194               	clrf	20	;volatile
 11393                           
 11394                           ;tmr.c: 29: T4CLKCON = 0x01;
 11395  130F  3001               	movlw	1
 11396  1310  0096               	movwf	22	;volatile
 11397                           
 11398                           ;tmr.c: 31: T4HLT = 0x00;
 11399  1311  0195               	clrf	21	;volatile
 11400                           
 11401                           ;tmr.c: 33: T4RST = 0x00;
 11402  1312  0197               	clrf	23	;volatile
 11403                           
 11404                           ;tmr.c: 35: T4PR = 0xFE;
 11405  1313  30FE               	movlw	254
 11406  1314  0093               	movwf	19	;volatile
 11407                           
 11408                           ;tmr.c: 39: T4TMR = 0x00;
 11409  1315  0192               	clrf	18	;volatile
 11410                           
 11411                           ;tmr.c: 41: PIR4bits.TMR4IF = 0;
 11412  1316  002E               	movlb	14	; select bank14
 11413  1317  1190               	bcf	16,3	;volatile
 11414                           
 11415                           ;tmr.c: 43: T4CONbits.TMR4ON = 1;
 11416  1318  0025               	movlb	5	; select bank5
 11417  1319  1794               	bsf	20,7	;volatile
 11418  131A  0008               	return
 11419  131B                     __end_of_TMR4_Initialize:	
 11420                           
 11421                           	psect	text20
 11422  12FF                     __ptext20:	
 11423 ;; *************** function _TMR2_Initialize *****************
 11424 ;; Defined at:
 11425 ;;		line 3 in file "tmr.c"
 11426 ;; Parameters:    Size  Location     Type
 11427 ;;		None
 11428 ;; Auto vars:     Size  Location     Type
 11429 ;;		None
 11430 ;; Return value:  Size  Location     Type
 11431 ;;                  1    wreg      void 
 11432 ;; Registers used:
 11433 ;;		wreg, status,2
 11434 ;; Tracked objects:
 11435 ;;		On entry : 0/0
 11436 ;;		On exit  : 0/0
 11437 ;;		Unchanged: 0/0
 11438 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11439 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11440 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11441 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11442 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11443 ;;Total ram usage:        0 bytes
 11444 ;; Hardware stack levels used:    1
 11445 ;; This function calls:
 11446 ;;		Nothing
 11447 ;; This function is called by:
 11448 ;;		_SYSTEM_Initialize
 11449 ;; This function uses a non-reentrant model
 11450 ;;
 11451                           
 11452                           
 11453                           ;psect for function _TMR2_Initialize
 11454  12FF                     _TMR2_Initialize:	
 11455                           
 11456                           ;tmr.c: 5: T2CON = 0x00;
 11457                           
 11458                           ;incstack = 0
 11459                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
 11460  12FF  0025               	movlb	5	; select bank5
 11461  1300  018E               	clrf	14	;volatile
 11462                           
 11463                           ;tmr.c: 7: T2CLKCON = 0x01;
 11464  1301  3001               	movlw	1
 11465  1302  0090               	movwf	16	;volatile
 11466                           
 11467                           ;tmr.c: 9: T2HLT = 0x00;
 11468  1303  018F               	clrf	15	;volatile
 11469                           
 11470                           ;tmr.c: 11: T2RST = 0x00;
 11471  1304  0191               	clrf	17	;volatile
 11472                           
 11473                           ;tmr.c: 13: T2PR = 0xFE;
 11474  1305  30FE               	movlw	254
 11475  1306  008D               	movwf	13	;volatile
 11476                           
 11477                           ;tmr.c: 18: T2TMR = 0x00;
 11478  1307  018C               	clrf	12	;volatile
 11479                           
 11480                           ;tmr.c: 20: PIR4bits.TMR2IF = 0;
 11481  1308  002E               	movlb	14	; select bank14
 11482  1309  1090               	bcf	16,1	;volatile
 11483                           
 11484                           ;tmr.c: 22: T2CONbits.TMR2ON = 1;
 11485  130A  0025               	movlb	5	; select bank5
 11486  130B  178E               	bsf	14,7	;volatile
 11487  130C  0008               	return
 11488  130D                     __end_of_TMR2_Initialize:	
 11489                           
 11490                           	psect	text21
 11491  1342                     __ptext21:	
 11492 ;; *************** function _PWM_Initialize *****************
 11493 ;; Defined at:
 11494 ;;		line 3 in file "pwm.c"
 11495 ;; Parameters:    Size  Location     Type
 11496 ;;		None
 11497 ;; Auto vars:     Size  Location     Type
 11498 ;;		None
 11499 ;; Return value:  Size  Location     Type
 11500 ;;                  1    wreg      void 
 11501 ;; Registers used:
 11502 ;;		wreg, status,2, status,0
 11503 ;; Tracked objects:
 11504 ;;		On entry : 0/0
 11505 ;;		On exit  : 0/0
 11506 ;;		Unchanged: 0/0
 11507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11508 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11509 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11510 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11511 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11512 ;;Total ram usage:        0 bytes
 11513 ;; Hardware stack levels used:    1
 11514 ;; This function calls:
 11515 ;;		Nothing
 11516 ;; This function is called by:
 11517 ;;		_SYSTEM_Initialize
 11518 ;; This function uses a non-reentrant model
 11519 ;;
 11520                           
 11521                           
 11522                           ;psect for function _PWM_Initialize
 11523  1342                     _PWM_Initialize:	
 11524                           
 11525                           ;pwm.c: 5: PWM6CON = 0x80;
 11526                           
 11527                           ;incstack = 0
 11528                           ; Regs used in _PWM_Initialize: [wreg+status,2+status,0]
 11529  1342  3080               	movlw	128
 11530  1343  0027               	movlb	7	; select bank7
 11531  1344  008E               	movwf	14	;volatile
 11532                           
 11533                           ;pwm.c: 7: PWM6DCH = 0x00;
 11534  1345  018D               	clrf	13	;volatile
 11535                           
 11536                           ;pwm.c: 9: PWM6DCL = 0x00;
 11537  1346  018C               	clrf	12	;volatile
 11538                           
 11539                           ;pwm.c: 11: CCPTMRS1bits.P6TSEL = 0x01;
 11540  1347  0024               	movlb	4	; select bank4
 11541  1348  081F               	movf	31,w	;volatile
 11542  1349  39F3               	andlw	-13
 11543  134A  3804               	iorlw	4
 11544  134B  009F               	movwf	31	;volatile
 11545                           
 11546                           ;pwm.c: 14: PWM7CON = 0x80;
 11547  134C  3080               	movlw	128
 11548  134D  0027               	movlb	7	; select bank7
 11549  134E  0092               	movwf	18	;volatile
 11550                           
 11551                           ;pwm.c: 16: PWM7DCH = 0x00;
 11552  134F  0191               	clrf	17	;volatile
 11553                           
 11554                           ;pwm.c: 18: PWM7DCL = 0x00;
 11555  1350  0190               	clrf	16	;volatile
 11556                           
 11557                           ;pwm.c: 20: CCPTMRS1bits.P7TSEL = 0x02;
 11558  1351  0024               	movlb	4	; select bank4
 11559  1352  081F               	movf	31,w	;volatile
 11560  1353  39CF               	andlw	-49
 11561  1354  3820               	iorlw	32
 11562  1355  009F               	movwf	31	;volatile
 11563  1356  0008               	return
 11564  1357                     __end_of_PWM_Initialize:	
 11565                           
 11566                           	psect	text22
 11567  1487                     __ptext22:	
 11568 ;; *************** function _PIN_MANAGER_Initialize *****************
 11569 ;; Defined at:
 11570 ;;		line 5 in file "pin_manager.c"
 11571 ;; Parameters:    Size  Location     Type
 11572 ;;		None
 11573 ;; Auto vars:     Size  Location     Type
 11574 ;;  state           1    0[COMMON] char 
 11575 ;; Return value:  Size  Location     Type
 11576 ;;                  1    wreg      void 
 11577 ;; Registers used:
 11578 ;;		wreg, status,2
 11579 ;; Tracked objects:
 11580 ;;		On entry : 0/0
 11581 ;;		On exit  : 0/0
 11582 ;;		Unchanged: 0/0
 11583 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11584 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11585 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11586 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11587 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11588 ;;Total ram usage:        1 bytes
 11589 ;; Hardware stack levels used:    1
 11590 ;; This function calls:
 11591 ;;		Nothing
 11592 ;; This function is called by:
 11593 ;;		_SYSTEM_Initialize
 11594 ;; This function uses a non-reentrant model
 11595 ;;
 11596                           
 11597                           
 11598                           ;psect for function _PIN_MANAGER_Initialize
 11599  1487                     _PIN_MANAGER_Initialize:	
 11600                           
 11601                           ;pin_manager.c: 7: LATA = 0x20;
 11602                           
 11603                           ;incstack = 0
 11604                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
 11605  1487  3020               	movlw	32
 11606  1488  0020               	movlb	0	; select bank0
 11607  1489  0096               	movwf	22	;volatile
 11608                           
 11609                           ;pin_manager.c: 8: LATB = 0x00;
 11610  148A  0197               	clrf	23	;volatile
 11611                           
 11612                           ;pin_manager.c: 9: LATC = 0x00;
 11613  148B  0198               	clrf	24	;volatile
 11614                           
 11615                           ;pin_manager.c: 11: WPUA = 0x00;
 11616  148C  003E               	movlb	30	; select bank30
 11617  148D  01B9               	clrf	57	;volatile
 11618                           
 11619                           ;pin_manager.c: 12: WPUB = 0x00;
 11620  148E  01C4               	clrf	68	;volatile
 11621                           
 11622                           ;pin_manager.c: 13: WPUC = 0x00;
 11623  148F  01CF               	clrf	79	;volatile
 11624                           
 11625                           ;pin_manager.c: 14: WPUE = 0x8;
 11626  1490  3008               	movlw	8
 11627  1491  00E5               	movwf	101	;volatile
 11628                           
 11629                           ;pin_manager.c: 16: TRISA = 0x00;
 11630  1492  0020               	movlb	0	; select bank0
 11631  1493  0191               	clrf	17	;volatile
 11632                           
 11633                           ;pin_manager.c: 17: TRISB = 0x0E;
 11634  1494  300E               	movlw	14
 11635  1495  0092               	movwf	18	;volatile
 11636                           
 11637                           ;pin_manager.c: 18: TRISC = 0xFF;
 11638  1496  30FF               	movlw	255
 11639  1497  0093               	movwf	19	;volatile
 11640                           
 11641                           ;pin_manager.c: 20: ANSELA = 0x00;
 11642  1498  003E               	movlb	30	; select bank30
 11643  1499  01B8               	clrf	56	;volatile
 11644                           
 11645                           ;pin_manager.c: 21: ANSELB = 0x0A;
 11646  149A  300A               	movlw	10
 11647  149B  00C3               	movwf	67	;volatile
 11648                           
 11649                           ;pin_manager.c: 22: ANSELC = 0xFF;
 11650  149C  30FF               	movlw	255
 11651  149D  00CE               	movwf	78	;volatile
 11652                           
 11653                           ;pin_manager.c: 25: PIE0bits.IOCIE = 0;
 11654  149E  002E               	movlb	14	; select bank14
 11655  149F  1216               	bcf	22,4	;volatile
 11656                           
 11657                           ;pin_manager.c: 26: int8_t state = GIE;
 11658  14A0  3000               	movlw	0
 11659  14A1  1B8B               	btfsc	11,7	;volatile
 11660  14A2  3001               	movlw	1
 11661  14A3  00F0               	movwf	PIN_MANAGER_Initialize@state
 11662                           
 11663                           ;pin_manager.c: 27: GIE = 0;
 11664  14A4  138B               	bcf	11,7	;volatile
 11665                           
 11666                           ;pin_manager.c: 28: PPSLOCK = 0x55;
 11667  14A5  3055               	movlw	85
 11668  14A6  003D               	movlb	29	; select bank29
 11669  14A7  008F               	movwf	15	;volsfr
 11670                           
 11671                           ;pin_manager.c: 29: PPSLOCK = 0xAA;
 11672  14A8  30AA               	movlw	170
 11673  14A9  008F               	movwf	15	;volsfr
 11674                           
 11675                           ;pin_manager.c: 30: PPSLOCKbits.PPSLOCKED = 0x00;
 11676  14AA  100F               	bcf	15,0	;volsfr
 11677                           
 11678                           ;pin_manager.c: 32: RA6PPS = 0x0E;
 11679  14AB  300E               	movlw	14
 11680  14AC  003E               	movlb	30	; select bank30
 11681  14AD  0096               	movwf	22	;volatile
 11682                           
 11683                           ;pin_manager.c: 33: RA7PPS = 0x0F;
 11684  14AE  300F               	movlw	15
 11685  14AF  0097               	movwf	23	;volatile
 11686                           
 11687                           ;pin_manager.c: 34: RB0PPS = 0x09;
 11688  14B0  3009               	movlw	9
 11689  14B1  0098               	movwf	24	;volatile
 11690                           
 11691                           ;pin_manager.c: 35: PPSLOCK = 0x55;
 11692  14B2  3055               	movlw	85
 11693  14B3  003D               	movlb	29	; select bank29
 11694  14B4  008F               	movwf	15	;volsfr
 11695                           
 11696                           ;pin_manager.c: 36: PPSLOCK = 0xAA;
 11697  14B5  30AA               	movlw	170
 11698  14B6  008F               	movwf	15	;volsfr
 11699                           
 11700                           ;pin_manager.c: 37: PPSLOCKbits.PPSLOCKED = 0x01;
 11701  14B7  140F               	bsf	15,0	;volsfr
 11702                           
 11703                           ;pin_manager.c: 38: GIE = state;
 11704  14B8  1C70               	btfss	PIN_MANAGER_Initialize@state,0
 11705  14B9  2CBC               	goto	u2720
 11706  14BA  178B               	bsf	11,7	;volatile
 11707  14BB  0008               	return
 11708  14BC                     u2720:	
 11709  14BC  138B               	bcf	11,7	;volatile
 11710  14BD  0008               	return
 11711  14BE                     __end_of_PIN_MANAGER_Initialize:	
 11712                           
 11713                           	psect	text23
 11714  12EA                     __ptext23:	
 11715 ;; *************** function _OSCILLATOR_Initialize *****************
 11716 ;; Defined at:
 11717 ;;		line 89 in file "system.c"
 11718 ;; Parameters:    Size  Location     Type
 11719 ;;		None
 11720 ;; Auto vars:     Size  Location     Type
 11721 ;;		None
 11722 ;; Return value:  Size  Location     Type
 11723 ;;                  1    wreg      void 
 11724 ;; Registers used:
 11725 ;;		wreg, status,2
 11726 ;; Tracked objects:
 11727 ;;		On entry : 0/0
 11728 ;;		On exit  : 0/0
 11729 ;;		Unchanged: 0/0
 11730 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11731 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11732 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11733 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11734 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11735 ;;Total ram usage:        0 bytes
 11736 ;; Hardware stack levels used:    1
 11737 ;; This function calls:
 11738 ;;		Nothing
 11739 ;; This function is called by:
 11740 ;;		_SYSTEM_Initialize
 11741 ;; This function uses a non-reentrant model
 11742 ;;
 11743                           
 11744                           
 11745                           ;psect for function _OSCILLATOR_Initialize
 11746  12EA                     _OSCILLATOR_Initialize:	
 11747                           
 11748                           ;system.c: 91: OSCCON1 = 0x60;
 11749                           
 11750                           ;incstack = 0
 11751                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 11752  12EA  3060               	movlw	96
 11753  12EB  0031               	movlb	17	; select bank17
 11754  12EC  008D               	movwf	13	;volatile
 11755                           
 11756                           ;system.c: 92: OSCCON3 = 0x00;
 11757  12ED  018F               	clrf	15	;volatile
 11758                           
 11759                           ;system.c: 93: OSCEN = 0x00;
 11760  12EE  0191               	clrf	17	;volatile
 11761                           
 11762                           ;system.c: 94: OSCFRQ = 0x06;
 11763  12EF  3006               	movlw	6
 11764  12F0  0093               	movwf	19	;volatile
 11765                           
 11766                           ;system.c: 95: OSCTUNE = 0x00;
 11767  12F1  0192               	clrf	18	;volatile
 11768  12F2  0008               	return
 11769  12F3                     __end_of_OSCILLATOR_Initialize:	
 11770                           
 11771                           	psect	text24
 11772  14BE                     __ptext24:	
 11773 ;; *************** function _LCDInit *****************
 11774 ;; Defined at:
 11775 ;;		line 247 in file "lcd.c"
 11776 ;; Parameters:    Size  Location     Type
 11777 ;;		None
 11778 ;; Auto vars:     Size  Location     Type
 11779 ;;		None
 11780 ;; Return value:  Size  Location     Type
 11781 ;;                  1    wreg      void 
 11782 ;; Registers used:
 11783 ;;		wreg, status,2, status,0, pclath, cstack
 11784 ;; Tracked objects:
 11785 ;;		On entry : 0/0
 11786 ;;		On exit  : 0/0
 11787 ;;		Unchanged: 0/0
 11788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11789 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11790 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11791 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11792 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11793 ;;Total ram usage:        1 bytes
 11794 ;; Hardware stack levels used:    1
 11795 ;; Hardware stack levels required when called:    1
 11796 ;; This function calls:
 11797 ;;		_LCDWrite
 11798 ;; This function is called by:
 11799 ;;		_SYSTEM_Initialize
 11800 ;;		_main
 11801 ;; This function uses a non-reentrant model
 11802 ;;
 11803                           
 11804                           
 11805                           ;psect for function _LCDInit
 11806  14BE                     _LCDInit:	
 11807                           
 11808                           ;lcd.c: 249: TRISAbits.TRISA0 = 0;
 11809                           
 11810                           ;incstack = 0
 11811                           ; Regs used in _LCDInit: [wreg+status,2+status,0+pclath+cstack]
 11812  14BE  0020               	movlb	0	; select bank0
 11813  14BF  1011               	bcf	17,0	;volatile
 11814                           
 11815                           ;lcd.c: 250: TRISAbits.TRISA1 = 0;
 11816  14C0  1091               	bcf	17,1	;volatile
 11817                           
 11818                           ;lcd.c: 251: TRISAbits.TRISA2 = 0;
 11819  14C1  1111               	bcf	17,2	;volatile
 11820                           
 11821                           ;lcd.c: 252: TRISAbits.TRISA3 = 0;
 11822  14C2  1191               	bcf	17,3	;volatile
 11823                           
 11824                           ;lcd.c: 253: TRISAbits.TRISA4 = 0;
 11825  14C3  1211               	bcf	17,4	;volatile
 11826                           
 11827                           ;lcd.c: 254: LATAbits.LATA3 = 0;
 11828  14C4  1196               	bcf	22,3	;volatile
 11829                           
 11830                           ;lcd.c: 255: LATAbits.LATA4 = 0;
 11831  14C5  1216               	bcf	22,4	;volatile
 11832                           
 11833                           ;lcd.c: 256: LATAbits.LATA2 = 0;
 11834  14C6  1116               	bcf	22,2	;volatile
 11835                           
 11836                           ;lcd.c: 257: LATAbits.LATA0 = 0;
 11837  14C7  1016               	bcf	22,0	;volatile
 11838                           
 11839                           ;lcd.c: 259: LATAbits.LATA0 = 1;
 11840  14C8  1416               	bsf	22,0	;volatile
 11841                           
 11842                           ;lcd.c: 261: LCDWrite(0, 0x21);
 11843  14C9  3021               	movlw	33
 11844  14CA  00F5               	movwf	??_LCDInit
 11845  14CB  0875               	movf	??_LCDInit,w
 11846  14CC  00F0               	movwf	LCDWrite@data
 11847  14CD  3000               	movlw	0
 11848  14CE  3194  2410  3194   	fcall	_LCDWrite
 11849                           
 11850                           ;lcd.c: 269: LCDWrite(0, 0XB9);
 11851  14D1  30B9               	movlw	185
 11852  14D2  00F5               	movwf	??_LCDInit
 11853  14D3  0875               	movf	??_LCDInit,w
 11854  14D4  00F0               	movwf	LCDWrite@data
 11855  14D5  3000               	movlw	0
 11856  14D6  3194  2410  3194   	fcall	_LCDWrite
 11857                           
 11858                           ;lcd.c: 271: LCDWrite(0, 0x04);
 11859  14D9  3004               	movlw	4
 11860  14DA  00F5               	movwf	??_LCDInit
 11861  14DB  0875               	movf	??_LCDInit,w
 11862  14DC  00F0               	movwf	LCDWrite@data
 11863  14DD  3000               	movlw	0
 11864  14DE  3194  2410  3194   	fcall	_LCDWrite
 11865                           
 11866                           ;lcd.c: 273: LCDWrite(0, 0x14);
 11867  14E1  3014               	movlw	20
 11868  14E2  00F5               	movwf	??_LCDInit
 11869  14E3  0875               	movf	??_LCDInit,w
 11870  14E4  00F0               	movwf	LCDWrite@data
 11871  14E5  3000               	movlw	0
 11872  14E6  3194  2410  3194   	fcall	_LCDWrite
 11873                           
 11874                           ;lcd.c: 275: LCDWrite(0, 0x20);
 11875  14E9  3020               	movlw	32
 11876  14EA  00F5               	movwf	??_LCDInit
 11877  14EB  0875               	movf	??_LCDInit,w
 11878  14EC  00F0               	movwf	LCDWrite@data
 11879  14ED  3000               	movlw	0
 11880  14EE  3194  2410  3194   	fcall	_LCDWrite
 11881                           
 11882                           ;lcd.c: 277: LCDWrite(0, 0x0C);
 11883  14F1  300C               	movlw	12
 11884  14F2  00F5               	movwf	??_LCDInit
 11885  14F3  0875               	movf	??_LCDInit,w
 11886  14F4  00F0               	movwf	LCDWrite@data
 11887  14F5  3000               	movlw	0
 11888  14F6  3194  2410         	fcall	_LCDWrite
 11889  14F8  0008               	return
 11890  14F9                     __end_of_LCDInit:	
 11891                           
 11892                           	psect	text25
 11893  1435                     __ptext25:	
 11894 ;; *************** function _LCDClear *****************
 11895 ;; Defined at:
 11896 ;;		line 182 in file "lcd.c"
 11897 ;; Parameters:    Size  Location     Type
 11898 ;;		None
 11899 ;; Auto vars:     Size  Location     Type
 11900 ;;  index           2    9[COMMON] int 
 11901 ;; Return value:  Size  Location     Type
 11902 ;;                  1    wreg      void 
 11903 ;; Registers used:
 11904 ;;		wreg, status,2, status,0, pclath, cstack
 11905 ;; Tracked objects:
 11906 ;;		On entry : 0/0
 11907 ;;		On exit  : 0/0
 11908 ;;		Unchanged: 0/0
 11909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11910 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11911 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11912 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11913 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11914 ;;Total ram usage:        3 bytes
 11915 ;; Hardware stack levels used:    1
 11916 ;; Hardware stack levels required when called:    2
 11917 ;; This function calls:
 11918 ;;		_LCDWrite
 11919 ;;		_gotoXY
 11920 ;; This function is called by:
 11921 ;;		_SYSTEM_Initialize
 11922 ;;		_main
 11923 ;; This function uses a non-reentrant model
 11924 ;;
 11925                           
 11926                           
 11927                           ;psect for function _LCDClear
 11928  1435                     _LCDClear:	
 11929                           
 11930                           ;lcd.c: 184: int index;
 11931                           ;lcd.c: 185: for (index = 0 ; index < (84 * 48 / 8) ; index++)
 11932                           
 11933                           ;incstack = 0
 11934                           ; Regs used in _LCDClear: [wreg+status,2+status,0+pclath+cstack]
 11935  1435  01F9               	clrf	LCDClear@index
 11936  1436  01FA               	clrf	LCDClear@index+1
 11937  1437  087A               	movf	LCDClear@index+1,w
 11938  1438  3A80               	xorlw	128
 11939  1439  00F8               	movwf	??_LCDClear
 11940  143A  3081               	movlw	129
 11941  143B  0278               	subwf	??_LCDClear,w
 11942  143C  1D03               	skipz
 11943  143D  2C40               	goto	u2705
 11944  143E  30F8               	movlw	248
 11945  143F  0279               	subwf	LCDClear@index,w
 11946  1440                     u2705:	
 11947  1440  1803               	btfsc	3,0
 11948  1441  2C56               	goto	l2574
 11949  1442                     l2568:	
 11950                           
 11951                           ;lcd.c: 186: LCDWrite(1, 0x00);
 11952  1442  01F0               	clrf	LCDWrite@data
 11953  1443  3001               	movlw	1
 11954  1444  3194  2410  3194   	fcall	_LCDWrite
 11955  1447  3001               	movlw	1
 11956  1448  07F9               	addwf	LCDClear@index,f
 11957  1449  3000               	movlw	0
 11958  144A  3DFA               	addwfc	LCDClear@index+1,f
 11959  144B  087A               	movf	LCDClear@index+1,w
 11960  144C  3A80               	xorlw	128
 11961  144D  00F8               	movwf	??_LCDClear
 11962  144E  3081               	movlw	129
 11963  144F  0278               	subwf	??_LCDClear,w
 11964  1450  1D03               	skipz
 11965  1451  2C54               	goto	u2715
 11966  1452  30F8               	movlw	248
 11967  1453  0279               	subwf	LCDClear@index,w
 11968  1454                     u2715:	
 11969  1454  1C03               	skipc
 11970  1455  2C42               	goto	l2568
 11971  1456                     l2574:	
 11972                           
 11973                           ;lcd.c: 187: gotoXY(0, 0);
 11974  1456  01F5               	clrf	gotoXY@y
 11975  1457  3000               	movlw	0
 11976  1458  3193  231B         	fcall	_gotoXY
 11977  145A  0008               	return
 11978  145B                     __end_of_LCDClear:	
 11979                           
 11980                           	psect	text26
 11981  131B                     __ptext26:	
 11982 ;; *************** function _gotoXY *****************
 11983 ;; Defined at:
 11984 ;;		line 124 in file "lcd.c"
 11985 ;; Parameters:    Size  Location     Type
 11986 ;;  x               1    wreg     unsigned char 
 11987 ;;  y               1    5[COMMON] unsigned char 
 11988 ;; Auto vars:     Size  Location     Type
 11989 ;;  x               1    7[COMMON] unsigned char 
 11990 ;; Return value:  Size  Location     Type
 11991 ;;                  1    wreg      void 
 11992 ;; Registers used:
 11993 ;;		wreg, status,2, status,0, pclath, cstack
 11994 ;; Tracked objects:
 11995 ;;		On entry : 0/0
 11996 ;;		On exit  : 0/0
 11997 ;;		Unchanged: 0/0
 11998 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11999 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12000 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12001 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12002 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12003 ;;Total ram usage:        3 bytes
 12004 ;; Hardware stack levels used:    1
 12005 ;; Hardware stack levels required when called:    1
 12006 ;; This function calls:
 12007 ;;		_LCDWrite
 12008 ;; This function is called by:
 12009 ;;		_LCDClear
 12010 ;;		_main
 12011 ;; This function uses a non-reentrant model
 12012 ;;
 12013                           
 12014                           
 12015                           ;psect for function _gotoXY
 12016  131B                     _gotoXY:	
 12017                           
 12018                           ;incstack = 0
 12019                           ; Regs used in _gotoXY: [wreg+status,2+status,0+pclath+cstack]
 12020                           ;gotoXY@x stored from wreg
 12021  131B  00F7               	movwf	gotoXY@x
 12022                           
 12023                           ;lcd.c: 126: LCDWrite(0,(uint8_t)(0x80 | x));
 12024  131C  0877               	movf	gotoXY@x,w
 12025  131D  3880               	iorlw	128
 12026  131E  00F6               	movwf	??_gotoXY
 12027  131F  0876               	movf	??_gotoXY,w
 12028  1320  00F0               	movwf	LCDWrite@data
 12029  1321  3000               	movlw	0
 12030  1322  3194  2410  3193   	fcall	_LCDWrite
 12031                           
 12032                           ;lcd.c: 127: LCDWrite(0,(uint8_t)(0x40 | y));
 12033  1325  0875               	movf	gotoXY@y,w
 12034  1326  3840               	iorlw	64
 12035  1327  00F6               	movwf	??_gotoXY
 12036  1328  0876               	movf	??_gotoXY,w
 12037  1329  00F0               	movwf	LCDWrite@data
 12038  132A  3000               	movlw	0
 12039  132B  3194  2410         	fcall	_LCDWrite
 12040  132D  0008               	return
 12041  132E                     __end_of_gotoXY:	
 12042                           
 12043                           	psect	text27
 12044  1739                     __ptext27:	
 12045 ;; *************** function _Init_Battery_State_Machine *****************
 12046 ;; Defined at:
 12047 ;;		line 18 in file "battery_charger.c"
 12048 ;; Parameters:    Size  Location     Type
 12049 ;;  z               1    wreg     unsigned char 
 12050 ;; Auto vars:     Size  Location     Type
 12051 ;;  z               1   34[BANK0 ] unsigned char 
 12052 ;; Return value:  Size  Location     Type
 12053 ;;                  1    wreg      void 
 12054 ;; Registers used:
 12055 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12056 ;; Tracked objects:
 12057 ;;		On entry : 0/0
 12058 ;;		On exit  : 0/0
 12059 ;;		Unchanged: 0/0
 12060 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12061 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12062 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12063 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12064 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12065 ;;Total ram usage:        5 bytes
 12066 ;; Hardware stack levels used:    1
 12067 ;; Hardware stack levels required when called:    2
 12068 ;; This function calls:
 12069 ;;		___awtoft
 12070 ;;		___ftmul
 12071 ;;		___fttol
 12072 ;; This function is called by:
 12073 ;;		_SYSTEM_Initialize
 12074 ;; This function uses a non-reentrant model
 12075 ;;
 12076                           
 12077                           
 12078                           ;psect for function _Init_Battery_State_Machine
 12079  1739                     _Init_Battery_State_Machine:	
 12080                           
 12081                           ;incstack = 0
 12082                           ; Regs used in _Init_Battery_State_Machine: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 12083                           ;Init_Battery_State_Machine@z stored from wreg
 12084  1739  0020               	movlb	0	; select bank0
 12085  173A  00C2               	movwf	Init_Battery_State_Machine@z
 12086                           
 12087                           ;battery_charger.c: 20: batteryState[z] =PRECHARGE;
 12088  173B  3003               	movlw	3
 12089  173C  00BE               	movwf	??_Init_Battery_State_Machine
 12090  173D  0842               	movf	Init_Battery_State_Machine@z,w
 12091  173E  3E64               	addlw	(low (_batteryState| 0))& (0+255)
 12092  173F  0086               	movwf	6
 12093  1740  0187               	clrf	7
 12094  1741  083E               	movf	??_Init_Battery_State_Machine,w
 12095  1742  0081               	movwf	1
 12096                           
 12097                           ;battery_charger.c: 21: stateCounter[z] =5;
 12098  1743  3542               	lslf	Init_Battery_State_Machine@z,w
 12099  1744  3EC0               	addlw	(low (_stateCounter| 0))& (0+255)
 12100  1745  0086               	movwf	6
 12101  1746  0187               	clrf	7
 12102  1747  3005               	movlw	5
 12103  1748  3FC0               	movwi [0]fsr1
 12104  1749  3000               	movlw	0
 12105  174A  3FC1               	movwi [1]fsr1
 12106                           
 12107                           ;battery_charger.c: 22: Iref[z] =10;
 12108  174B  3542               	lslf	Init_Battery_State_Machine@z,w
 12109  174C  3EC4               	addlw	(low (_Iref| 0))& (0+255)
 12110  174D  0086               	movwf	6
 12111  174E  0187               	clrf	7
 12112  174F  300A               	movlw	10
 12113  1750  3FC0               	movwi [0]fsr1
 12114  1751  3000               	movlw	0
 12115  1752  3FC1               	movwi [1]fsr1
 12116                           
 12117                           ;battery_charger.c: 23: Vref[z] =1425+(int16_t)((250-batteryTemp)*.24);
 12118  1753  096C               	comf	_batteryTemp,w
 12119  1754  00BE               	movwf	??_Init_Battery_State_Machine
 12120  1755  096D               	comf	_batteryTemp+1,w
 12121  1756  00BF               	movwf	??_Init_Battery_State_Machine+1
 12122  1757  0ABE               	incf	??_Init_Battery_State_Machine,f
 12123  1758  1903               	skipnz
 12124  1759  0ABF               	incf	??_Init_Battery_State_Machine+1,f
 12125  175A  083E               	movf	??_Init_Battery_State_Machine,w
 12126  175B  3EFA               	addlw	250
 12127  175C  00F8               	movwf	___awtoft@c
 12128  175D  3000               	movlw	0
 12129  175E  3D3F               	addwfc	??_Init_Battery_State_Machine+1,w
 12130  175F  00F9               	movwf	___awtoft@c+1
 12131  1760  3193  23F0  3197   	fcall	___awtoft
 12132  1763  0878               	movf	?___awtoft,w
 12133  1764  0020               	movlb	0	; select bank0
 12134  1765  00A3               	movwf	___ftmul@f2
 12135  1766  0879               	movf	?___awtoft+1,w
 12136  1767  00A4               	movwf	___ftmul@f2+1
 12137  1768  087A               	movf	?___awtoft+2,w
 12138  1769  00A5               	movwf	___ftmul@f2+2
 12139  176A  30C3               	movlw	195
 12140  176B  00A0               	movwf	___ftmul@f1
 12141  176C  3075               	movlw	117
 12142  176D  00A1               	movwf	___ftmul@f1+1
 12143  176E  303E               	movlw	62
 12144  176F  00A2               	movwf	___ftmul@f1+2
 12145  1770  318B  232F  3197   	fcall	___ftmul
 12146  1773  0020               	movlb	0	; select bank0
 12147  1774  0820               	movf	?___ftmul,w
 12148  1775  00B0               	movwf	___fttol@f1
 12149  1776  0821               	movf	?___ftmul+1,w
 12150  1777  00B1               	movwf	___fttol@f1+1
 12151  1778  0822               	movf	?___ftmul+2,w
 12152  1779  00B2               	movwf	___fttol@f1+2
 12153  177A  3189  214F         	fcall	___fttol
 12154  177C  0020               	movlb	0	; select bank0
 12155  177D  0830               	movf	?___fttol,w
 12156  177E  3E91               	addlw	145
 12157  177F  00C0               	movwf	??_Init_Battery_State_Machine+2
 12158  1780  3005               	movlw	5
 12159  1781  3D31               	addwfc	?___fttol+1,w
 12160  1782  00C1               	movwf	??_Init_Battery_State_Machine+3
 12161  1783  3542               	lslf	Init_Battery_State_Machine@z,w
 12162  1784  3E5A               	addlw	(low (_Vref| 0))& (0+255)
 12163  1785  0086               	movwf	6
 12164  1786  0187               	clrf	7
 12165  1787  0840               	movf	??_Init_Battery_State_Machine+2,w
 12166  1788  3FC0               	movwi [0]fsr1
 12167  1789  0841               	movf	??_Init_Battery_State_Machine+3,w
 12168  178A  3FC1               	movwi [1]fsr1
 12169                           
 12170                           ;battery_charger.c: 24: Imin[z] =15;
 12171  178B  3542               	lslf	Init_Battery_State_Machine@z,w
 12172  178C  3ECC               	addlw	(low (_Imin| 0))& (0+255)
 12173  178D  0086               	movwf	6
 12174  178E  0187               	clrf	7
 12175  178F  300F               	movlw	15
 12176  1790  3FC0               	movwi [0]fsr1
 12177  1791  3000               	movlw	0
 12178  1792  3FC1               	movwi [1]fsr1
 12179                           
 12180                           ;battery_charger.c: 25: IminCount[z] = 60;
 12181  1793  3542               	lslf	Init_Battery_State_Machine@z,w
 12182  1794  3EC8               	addlw	(low (_IminCount| 0))& (0+255)
 12183  1795  0086               	movwf	6
 12184  1796  0187               	clrf	7
 12185  1797  303C               	movlw	60
 12186  1798  3FC0               	movwi [0]fsr1
 12187  1799  3000               	movlw	0
 12188  179A  3FC1               	movwi [1]fsr1
 12189  179B  0008               	return
 12190  179C                     __end_of_Init_Battery_State_Machine:	
 12191                           
 12192                           	psect	text28
 12193  13D1                     __ptext28:	
 12194 ;; *************** function _ADC_Initialize *****************
 12195 ;; Defined at:
 12196 ;;		line 111 in file "adc.c"
 12197 ;; Parameters:    Size  Location     Type
 12198 ;;		None
 12199 ;; Auto vars:     Size  Location     Type
 12200 ;;		None
 12201 ;; Return value:  Size  Location     Type
 12202 ;;                  1    wreg      void 
 12203 ;; Registers used:
 12204 ;;		wreg, status,2
 12205 ;; Tracked objects:
 12206 ;;		On entry : 0/0
 12207 ;;		On exit  : 0/0
 12208 ;;		Unchanged: 0/0
 12209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12210 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12211 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12212 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12213 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12214 ;;Total ram usage:        0 bytes
 12215 ;; Hardware stack levels used:    1
 12216 ;; This function calls:
 12217 ;;		Nothing
 12218 ;; This function is called by:
 12219 ;;		_SYSTEM_Initialize
 12220 ;; This function uses a non-reentrant model
 12221 ;;
 12222                           
 12223                           
 12224                           ;psect for function _ADC_Initialize
 12225  13D1                     _ADC_Initialize:	
 12226                           
 12227                           ;adc.c: 113: ADCON1 = 0x00;
 12228                           
 12229                           ;incstack = 0
 12230                           ; Regs used in _ADC_Initialize: [wreg+status,2]
 12231  13D1  0021               	movlb	1	; select bank1
 12232  13D2  0194               	clrf	20	;volatile
 12233                           
 12234                           ;adc.c: 115: ADCON2 = 0x00;
 12235  13D3  0195               	clrf	21	;volatile
 12236                           
 12237                           ;adc.c: 117: ADCON3 = 0x00;
 12238  13D4  0196               	clrf	22	;volatile
 12239                           
 12240                           ;adc.c: 119: ADACT = 0x00;
 12241  13D5  0199               	clrf	25	;volatile
 12242                           
 12243                           ;adc.c: 121: ADSTAT = 0x00;
 12244  13D6  0197               	clrf	23	;volatile
 12245                           
 12246                           ;adc.c: 123: FVRCON = 0b11000011;
 12247  13D7  30C3               	movlw	195
 12248  13D8  0032               	movlb	18	; select bank18
 12249  13D9  008C               	movwf	12	;volatile
 12250                           
 12251                           ;adc.c: 124: ADCLK = 0x3F;
 12252  13DA  303F               	movlw	63
 12253  13DB  0021               	movlb	1	; select bank1
 12254  13DC  0098               	movwf	24	;volatile
 12255                           
 12256                           ;adc.c: 131: ADREF = 0x03;
 12257  13DD  3003               	movlw	3
 12258  13DE  009A               	movwf	26	;volatile
 12259                           
 12260                           ;adc.c: 134: ADCAP = 0x00;
 12261  13DF  019B               	clrf	27	;volatile
 12262                           
 12263                           ;adc.c: 137: ADPRE = 0x07;
 12264  13E0  3007               	movlw	7
 12265  13E1  009C               	movwf	28	;volatile
 12266                           
 12267                           ;adc.c: 139: ADACQ = 0x00;
 12268  13E2  019D               	clrf	29	;volatile
 12269                           
 12270                           ;adc.c: 141: ADPCH = 0x00;
 12271  13E3  019E               	clrf	30	;volatile
 12272                           
 12273                           ;adc.c: 143: ADRPT = 0x00;
 12274  13E4  0022               	movlb	2	; select bank2
 12275  13E5  018D               	clrf	13	;volatile
 12276                           
 12277                           ;adc.c: 145: ADLTHL = 0x00;
 12278  13E6  018E               	clrf	14	;volatile
 12279                           
 12280                           ;adc.c: 147: ADLTHH = 0x00;
 12281  13E7  018F               	clrf	15	;volatile
 12282                           
 12283                           ;adc.c: 149: ADUTHL = 0x00;
 12284  13E8  0190               	clrf	16	;volatile
 12285                           
 12286                           ;adc.c: 151: ADUTHH = 0x00;
 12287  13E9  0191               	clrf	17	;volatile
 12288                           
 12289                           ;adc.c: 153: ADSTPTL = 0x00;
 12290  13EA  0192               	clrf	18	;volatile
 12291                           
 12292                           ;adc.c: 155: ADSTPTH = 0x00;
 12293  13EB  0193               	clrf	19	;volatile
 12294                           
 12295                           ;adc.c: 157: ADCON0 = 0x84;
 12296  13EC  3084               	movlw	132
 12297  13ED  0021               	movlb	1	; select bank1
 12298  13EE  0093               	movwf	19	;volatile
 12299  13EF  0008               	return
 12300  13F0                     __end_of_ADC_Initialize:	
 12301                           
 12302                           	psect	text29
 12303  1382                     __ptext29:	
 12304 ;; *************** function _PWM7_LoadDutyValue *****************
 12305 ;; Defined at:
 12306 ;;		line 37 in file "pwm.c"
 12307 ;; Parameters:    Size  Location     Type
 12308 ;;  dutyCycle7      2    0[COMMON] unsigned int 
 12309 ;; Auto vars:     Size  Location     Type
 12310 ;;		None
 12311 ;; Return value:  Size  Location     Type
 12312 ;;                  1    wreg      void 
 12313 ;; Registers used:
 12314 ;;		wreg, status,2, status,0
 12315 ;; Tracked objects:
 12316 ;;		On entry : 0/0
 12317 ;;		On exit  : 0/0
 12318 ;;		Unchanged: 0/0
 12319 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12320 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12321 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12322 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12323 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12324 ;;Total ram usage:        4 bytes
 12325 ;; Hardware stack levels used:    1
 12326 ;; This function calls:
 12327 ;;		Nothing
 12328 ;; This function is called by:
 12329 ;;		_main
 12330 ;; This function uses a non-reentrant model
 12331 ;;
 12332                           
 12333                           
 12334                           ;psect for function _PWM7_LoadDutyValue
 12335  1382                     _PWM7_LoadDutyValue:	
 12336                           
 12337                           ;pwm.c: 39: PWM7DCH = (dutyCycle7 & 0x03FC)>>2;
 12338                           
 12339                           ;incstack = 0
 12340                           ; Regs used in _PWM7_LoadDutyValue: [wreg+status,2+status,0]
 12341  1382  0871               	movf	PWM7_LoadDutyValue@dutyCycle7+1,w
 12342  1383  00F3               	movwf	??_PWM7_LoadDutyValue+1
 12343  1384  0870               	movf	PWM7_LoadDutyValue@dutyCycle7,w
 12344  1385  00F2               	movwf	??_PWM7_LoadDutyValue
 12345  1386  36F3               	lsrf	??_PWM7_LoadDutyValue+1,f
 12346  1387  0CF2               	rrf	??_PWM7_LoadDutyValue,f
 12347  1388  36F3               	lsrf	??_PWM7_LoadDutyValue+1,f
 12348  1389  0CF2               	rrf	??_PWM7_LoadDutyValue,f
 12349  138A  0872               	movf	??_PWM7_LoadDutyValue,w
 12350  138B  0027               	movlb	7	; select bank7
 12351  138C  0091               	movwf	17	;volatile
 12352                           
 12353                           ;pwm.c: 41: PWM7DCL = (dutyCycle7 & 0x0003)<<6;
 12354  138D  0870               	movf	PWM7_LoadDutyValue@dutyCycle7,w
 12355  138E  3903               	andlw	3
 12356  138F  00F2               	movwf	??_PWM7_LoadDutyValue
 12357  1390  3005               	movlw	5
 12358  1391                     u3595:	
 12359  1391  35F2               	lslf	??_PWM7_LoadDutyValue,f
 12360  1392  3EFF               	addlw	-1
 12361  1393  1D03               	skipz
 12362  1394  2B91               	goto	u3595
 12363  1395  3572               	lslf	??_PWM7_LoadDutyValue,w
 12364  1396  0090               	movwf	16	;volatile
 12365  1397  0008               	return
 12366  1398                     __end_of_PWM7_LoadDutyValue:	
 12367                           
 12368                           	psect	text30
 12369  136C                     __ptext30:	
 12370 ;; *************** function _PWM6_LoadDutyValue *****************
 12371 ;; Defined at:
 12372 ;;		line 30 in file "pwm.c"
 12373 ;; Parameters:    Size  Location     Type
 12374 ;;  dutyCycle6      2    0[COMMON] unsigned int 
 12375 ;; Auto vars:     Size  Location     Type
 12376 ;;		None
 12377 ;; Return value:  Size  Location     Type
 12378 ;;                  1    wreg      void 
 12379 ;; Registers used:
 12380 ;;		wreg, status,2, status,0
 12381 ;; Tracked objects:
 12382 ;;		On entry : 0/0
 12383 ;;		On exit  : 0/0
 12384 ;;		Unchanged: 0/0
 12385 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12386 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12387 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12388 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12389 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12390 ;;Total ram usage:        4 bytes
 12391 ;; Hardware stack levels used:    1
 12392 ;; This function calls:
 12393 ;;		Nothing
 12394 ;; This function is called by:
 12395 ;;		_main
 12396 ;; This function uses a non-reentrant model
 12397 ;;
 12398                           
 12399                           
 12400                           ;psect for function _PWM6_LoadDutyValue
 12401  136C                     _PWM6_LoadDutyValue:	
 12402                           
 12403                           ;pwm.c: 32: PWM6DCH = (dutyCycle6 & 0x03FC)>>2;
 12404                           
 12405                           ;incstack = 0
 12406                           ; Regs used in _PWM6_LoadDutyValue: [wreg+status,2+status,0]
 12407  136C  0871               	movf	PWM6_LoadDutyValue@dutyCycle6+1,w
 12408  136D  00F3               	movwf	??_PWM6_LoadDutyValue+1
 12409  136E  0870               	movf	PWM6_LoadDutyValue@dutyCycle6,w
 12410  136F  00F2               	movwf	??_PWM6_LoadDutyValue
 12411  1370  36F3               	lsrf	??_PWM6_LoadDutyValue+1,f
 12412  1371  0CF2               	rrf	??_PWM6_LoadDutyValue,f
 12413  1372  36F3               	lsrf	??_PWM6_LoadDutyValue+1,f
 12414  1373  0CF2               	rrf	??_PWM6_LoadDutyValue,f
 12415  1374  0872               	movf	??_PWM6_LoadDutyValue,w
 12416  1375  0027               	movlb	7	; select bank7
 12417  1376  008D               	movwf	13	;volatile
 12418                           
 12419                           ;pwm.c: 34: PWM6DCL = (dutyCycle6 & 0x0003)<<6;
 12420  1377  0870               	movf	PWM6_LoadDutyValue@dutyCycle6,w
 12421  1378  3903               	andlw	3
 12422  1379  00F2               	movwf	??_PWM6_LoadDutyValue
 12423  137A  3005               	movlw	5
 12424  137B                     u3585:	
 12425  137B  35F2               	lslf	??_PWM6_LoadDutyValue,f
 12426  137C  3EFF               	addlw	-1
 12427  137D  1D03               	skipz
 12428  137E  2B7B               	goto	u3585
 12429  137F  3572               	lslf	??_PWM6_LoadDutyValue,w
 12430  1380  008C               	movwf	12	;volatile
 12431  1381  0008               	return
 12432  1382                     __end_of_PWM6_LoadDutyValue:	
 12433                           
 12434                           	psect	text31
 12435  132E                     __ptext31:	
 12436 ;; *************** function _LCDWriteString *****************
 12437 ;; Defined at:
 12438 ;;		line 176 in file "lcd.c"
 12439 ;; Parameters:    Size  Location     Type
 12440 ;;  characters      2   12[COMMON] PTR const unsigned char 
 12441 ;;		 -> STR_3(5), STR_2(5), STR_1(4), 
 12442 ;; Auto vars:     Size  Location     Type
 12443 ;;		None
 12444 ;; Return value:  Size  Location     Type
 12445 ;;                  1    wreg      void 
 12446 ;; Registers used:
 12447 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12448 ;; Tracked objects:
 12449 ;;		On entry : 0/0
 12450 ;;		On exit  : 0/0
 12451 ;;		Unchanged: 0/0
 12452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12453 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12454 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12455 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12456 ;;      Totals:         2       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12457 ;;Total ram usage:        3 bytes
 12458 ;; Hardware stack levels used:    1
 12459 ;; Hardware stack levels required when called:    2
 12460 ;; This function calls:
 12461 ;;		_LCDWriteCharacter
 12462 ;; This function is called by:
 12463 ;;		_main
 12464 ;; This function uses a non-reentrant model
 12465 ;;
 12466                           
 12467                           
 12468                           ;psect for function _LCDWriteString
 12469  132E                     _LCDWriteString:	
 12470  132E                     l2988:	
 12471                           ;lcd.c: 178: while (*characters)
 12472                           
 12473                           ;incstack = 0
 12474                           ; Regs used in _LCDWriteString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12475                           
 12476  132E  087C               	movf	LCDWriteString@characters,w
 12477  132F  0084               	movwf	4
 12478  1330  087D               	movf	LCDWriteString@characters+1,w
 12479  1331  0085               	movwf	5
 12480  1332  0012               	moviw fsr0++
 12481  1333  1903               	btfsc	3,2
 12482  1334  0008               	return
 12483                           
 12484                           ;lcd.c: 179: LCDWriteCharacter(*characters++);
 12485  1335  087C               	movf	LCDWriteString@characters,w
 12486  1336  0084               	movwf	4
 12487  1337  087D               	movf	LCDWriteString@characters+1,w
 12488  1338  0085               	movwf	5
 12489  1339  0800               	movf	0,w	;code access
 12490  133A  3196  2685  3193   	fcall	_LCDWriteCharacter
 12491  133D  3001               	movlw	1
 12492  133E  07FC               	addwf	LCDWriteString@characters,f
 12493  133F  3000               	movlw	0
 12494  1340  3DFD               	addwfc	LCDWriteString@characters+1,f
 12495  1341  2B2E               	goto	l2988
 12496  1342                     __end_of_LCDWriteString:	
 12497                           
 12498                           	psect	text32
 12499  0BE3                     __ptext32:	
 12500 ;; *************** function _LCDWriteInt *****************
 12501 ;; Defined at:
 12502 ;;		line 190 in file "lcd.c"
 12503 ;; Parameters:    Size  Location     Type
 12504 ;;  value           2    0[BANK0 ] int 
 12505 ;;  fieldLength     1    2[BANK0 ] char 
 12506 ;;  numPlaces       1    3[BANK0 ] unsigned char 
 12507 ;;  sign            1    4[BANK0 ] unsigned char 
 12508 ;; Auto vars:     Size  Location     Type
 12509 ;;  str             5    9[BANK0 ] unsigned char [5]
 12510 ;;  i               1   15[BANK0 ] unsigned char 
 12511 ;;  j               1   14[BANK0 ] unsigned char 
 12512 ;; Return value:  Size  Location     Type
 12513 ;;                  1    wreg      void 
 12514 ;; Registers used:
 12515 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12516 ;; Tracked objects:
 12517 ;;		On entry : 0/0
 12518 ;;		On exit  : 0/0
 12519 ;;		Unchanged: 0/0
 12520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12521 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12522 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12523 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12524 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12525 ;;Total ram usage:       16 bytes
 12526 ;; Hardware stack levels used:    1
 12527 ;; Hardware stack levels required when called:    2
 12528 ;; This function calls:
 12529 ;;		_LCDWriteCharacter
 12530 ;;		___awdiv
 12531 ;;		___lwmod
 12532 ;; This function is called by:
 12533 ;;		_main
 12534 ;; This function uses a non-reentrant model
 12535 ;;
 12536                           
 12537                           
 12538                           ;psect for function _LCDWriteInt
 12539  0BE3                     _LCDWriteInt:	
 12540                           
 12541                           ;lcd.c: 192: uint8_t str[5]={0,0,0,0,0};
 12542                           
 12543                           ;incstack = 0
 12544                           ; Regs used in _LCDWriteInt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12545  0BE3  3030               	movlw	low LCDWriteInt@F14388
 12546  0BE4  0086               	movwf	6
 12547  0BE5  3001               	movlw	high LCDWriteInt@F14388
 12548  0BE6  0087               	movwf	7
 12549  0BE7  3029               	movlw	low LCDWriteInt@str
 12550  0BE8  0084               	movwf	4
 12551  0BE9  3000               	movlw	high LCDWriteInt@str
 12552  0BEA  0085               	movwf	5
 12553  0BEB  3005               	movlw	5
 12554  0BEC  0020               	movlb	0	; select bank0
 12555  0BED  00A5               	movwf	??_LCDWriteInt
 12556  0BEE                     u3490:	
 12557  0BEE  0016               	moviw fsr1++
 12558  0BEF  001A               	movwi fsr0++
 12559  0BF0  0BA5               	decfsz	??_LCDWriteInt,f
 12560  0BF1  2BEE               	goto	u3490
 12561                           
 12562                           ;lcd.c: 193: uint8_t i=4,j=0;
 12563  0BF2  3004               	movlw	4
 12564  0BF3  00A5               	movwf	??_LCDWriteInt
 12565  0BF4  0825               	movf	??_LCDWriteInt,w
 12566  0BF5  00AF               	movwf	LCDWriteInt@i
 12567  0BF6  01AE               	clrf	LCDWriteInt@j
 12568                           
 12569                           ;lcd.c: 195: if(value<0)
 12570  0BF7  1FA1               	btfss	LCDWriteInt@value+1,7
 12571  0BF8  2C04               	goto	l3002
 12572                           
 12573                           ;lcd.c: 196: {
 12574                           ;lcd.c: 197: LCDWriteCharacter('-');
 12575  0BF9  302D               	movlw	45
 12576  0BFA  3196  2685  318B   	fcall	_LCDWriteCharacter
 12577                           
 12578                           ;lcd.c: 198: value=value*-1;
 12579  0BFD  0020               	movlb	0	; select bank0
 12580  0BFE  09A0               	comf	LCDWriteInt@value,f
 12581  0BFF  09A1               	comf	LCDWriteInt@value+1,f
 12582  0C00  0AA0               	incf	LCDWriteInt@value,f
 12583  0C01  1903               	skipnz
 12584  0C02  0AA1               	incf	LCDWriteInt@value+1,f
 12585                           
 12586                           ;lcd.c: 199: }
 12587  0C03  2C0B               	goto	l3012
 12588  0C04                     l3002:	
 12589                           
 12590                           ;lcd.c: 201: else
 12591                           ;lcd.c: 202: {
 12592                           ;lcd.c: 203: if(sign == 1)
 12593  0C04  0324               	decf	LCDWriteInt@sign,w
 12594  0C05  1D03               	btfss	3,2
 12595  0C06  2C0B               	goto	l3012
 12596                           
 12597                           ;lcd.c: 204: {
 12598                           ;lcd.c: 205: LCDWriteCharacter('+');
 12599  0C07  302B               	movlw	43
 12600  0C08  3196  2685  318B   	fcall	_LCDWriteCharacter
 12601  0C0B                     l3012:	
 12602                           ;lcd.c: 206: }
 12603                           ;lcd.c: 207: }
 12604                           ;lcd.c: 209: while(value)
 12605                           
 12606  0C0B  0020               	movlb	0	; select bank0
 12607  0C0C  0820               	movf	LCDWriteInt@value,w
 12608  0C0D  0421               	iorwf	LCDWriteInt@value+1,w
 12609  0C0E  1903               	btfsc	3,2
 12610  0C0F  2C38               	goto	l3014
 12611                           
 12612                           ;lcd.c: 210: {
 12613                           ;lcd.c: 211: str[i]=(uint16_t)value%10;
 12614  0C10  300A               	movlw	10
 12615  0C11  00F0               	movwf	___lwmod@divisor
 12616  0C12  3000               	movlw	0
 12617  0C13  00F1               	movwf	___lwmod@divisor+1
 12618  0C14  0020               	movlb	0	; select bank0
 12619  0C15  0821               	movf	LCDWriteInt@value+1,w
 12620  0C16  00F3               	movwf	___lwmod@dividend+1
 12621  0C17  0820               	movf	LCDWriteInt@value,w
 12622  0C18  00F2               	movwf	___lwmod@dividend
 12623  0C19  3194  245B  318B   	fcall	___lwmod
 12624  0C1C  0870               	movf	?___lwmod,w
 12625  0C1D  0020               	movlb	0	; select bank0
 12626  0C1E  00A5               	movwf	??_LCDWriteInt
 12627  0C1F  082F               	movf	LCDWriteInt@i,w
 12628  0C20  3E29               	addlw	(low (LCDWriteInt@str| 0))& (0+255)
 12629  0C21  0086               	movwf	6
 12630  0C22  0187               	clrf	7
 12631  0C23  0825               	movf	??_LCDWriteInt,w
 12632  0C24  0081               	movwf	1
 12633                           
 12634                           ;lcd.c: 212: value=value/10;
 12635  0C25  300A               	movlw	10
 12636  0C26  00F0               	movwf	___awdiv@divisor
 12637  0C27  3000               	movlw	0
 12638  0C28  00F1               	movwf	___awdiv@divisor+1
 12639  0C29  0821               	movf	LCDWriteInt@value+1,w
 12640  0C2A  00F3               	movwf	___awdiv@dividend+1
 12641  0C2B  0820               	movf	LCDWriteInt@value,w
 12642  0C2C  00F2               	movwf	___awdiv@dividend
 12643  0C2D  3196  2634  318B   	fcall	___awdiv
 12644  0C30  0871               	movf	?___awdiv+1,w
 12645  0C31  0020               	movlb	0	; select bank0
 12646  0C32  00A1               	movwf	LCDWriteInt@value+1
 12647  0C33  0870               	movf	?___awdiv,w
 12648  0C34  00A0               	movwf	LCDWriteInt@value
 12649                           
 12650                           ;lcd.c: 213: i--;
 12651  0C35  3001               	movlw	1
 12652  0C36  02AF               	subwf	LCDWriteInt@i,f
 12653  0C37  2C0B               	goto	l3012
 12654  0C38                     l3014:	
 12655                           
 12656                           ;lcd.c: 214: }
 12657                           ;lcd.c: 215: if(fieldLength==-1)
 12658  0C38  0A22               	incf	LCDWriteInt@fieldLength,w
 12659  0C39  1903               	btfsc	3,2
 12660  0C3A  2C40               	goto	l3020
 12661  0C3B  2C48               	goto	l3022
 12662  0C3C                     l3018:	
 12663                           ;lcd.c: 216: {
 12664                           ;lcd.c: 217: while(str[j]==0)
 12665                           
 12666                           
 12667                           ;lcd.c: 218: {
 12668                           ;lcd.c: 219: j++;
 12669  0C3C  3001               	movlw	1
 12670  0C3D  00A5               	movwf	??_LCDWriteInt
 12671  0C3E  0825               	movf	??_LCDWriteInt,w
 12672  0C3F  07AE               	addwf	LCDWriteInt@j,f
 12673  0C40                     l3020:	
 12674  0C40  082E               	movf	LCDWriteInt@j,w
 12675  0C41  3E29               	addlw	(low (LCDWriteInt@str| 0))& (0+255)
 12676  0C42  0086               	movwf	6
 12677  0C43  0187               	clrf	7
 12678  0C44  0801               	movf	1,w
 12679  0C45  1D03               	btfss	3,2
 12680  0C46  2C4E               	goto	l3024
 12681  0C47  2C3C               	goto	l3018
 12682  0C48                     l3022:	
 12683                           ;lcd.c: 220: }
 12684                           ;lcd.c: 221: }
 12685                           
 12686                           
 12687                           ;lcd.c: 222: else
 12688                           ;lcd.c: 223: {
 12689                           ;lcd.c: 224: j=(uint8_t)(5-fieldLength);
 12690  0C48  0322               	decf	LCDWriteInt@fieldLength,w
 12691  0C49  3AFF               	xorlw	255
 12692  0C4A  3E05               	addlw	5
 12693  0C4B  00A5               	movwf	??_LCDWriteInt
 12694  0C4C  0825               	movf	??_LCDWriteInt,w
 12695  0C4D  00AE               	movwf	LCDWriteInt@j
 12696  0C4E                     l3024:	
 12697                           
 12698                           ;lcd.c: 225: }
 12699                           ;lcd.c: 227: for(i=j;i<(5-numPlaces);i++)
 12700  0C4E  082E               	movf	LCDWriteInt@j,w
 12701  0C4F  00A5               	movwf	??_LCDWriteInt
 12702  0C50  0825               	movf	??_LCDWriteInt,w
 12703  0C51  00AF               	movwf	LCDWriteInt@i
 12704  0C52                     l3030:	
 12705  0C52  0823               	movf	LCDWriteInt@numPlaces,w
 12706  0C53  00A5               	movwf	??_LCDWriteInt
 12707  0C54  01A6               	clrf	??_LCDWriteInt+1
 12708  0C55  09A5               	comf	??_LCDWriteInt,f
 12709  0C56  09A6               	comf	??_LCDWriteInt+1,f
 12710  0C57  0AA5               	incf	??_LCDWriteInt,f
 12711  0C58  1903               	skipnz
 12712  0C59  0AA6               	incf	??_LCDWriteInt+1,f
 12713  0C5A  0825               	movf	??_LCDWriteInt,w
 12714  0C5B  3E05               	addlw	5
 12715  0C5C  00A7               	movwf	??_LCDWriteInt+2
 12716  0C5D  3000               	movlw	0
 12717  0C5E  3D26               	addwfc	??_LCDWriteInt+1,w
 12718  0C5F  00A8               	movwf	??_LCDWriteInt+3
 12719  0C60  0828               	movf	??_LCDWriteInt+3,w
 12720  0C61  3A80               	xorlw	128
 12721  0C62  3C80               	sublw	128
 12722  0C63  1D03               	skipz
 12723  0C64  2C67               	goto	u3555
 12724  0C65  0827               	movf	??_LCDWriteInt+2,w
 12725  0C66  022F               	subwf	LCDWriteInt@i,w
 12726  0C67                     u3555:	
 12727  0C67  1803               	btfsc	3,0
 12728  0C68  2C79               	goto	l3032
 12729                           
 12730                           ;lcd.c: 228: {
 12731                           ;lcd.c: 229: LCDWriteCharacter((uint8_t)(48+str[i]));
 12732  0C69  0020               	movlb	0	; select bank0
 12733  0C6A  082F               	movf	LCDWriteInt@i,w
 12734  0C6B  3E29               	addlw	(low (LCDWriteInt@str| 0))& (0+255)
 12735  0C6C  0086               	movwf	6
 12736  0C6D  0187               	clrf	7
 12737  0C6E  0801               	movf	1,w
 12738  0C6F  3E30               	addlw	48
 12739  0C70  3196  2685  318B   	fcall	_LCDWriteCharacter
 12740  0C73  3001               	movlw	1
 12741  0C74  0020               	movlb	0	; select bank0
 12742  0C75  00A5               	movwf	??_LCDWriteInt
 12743  0C76  0825               	movf	??_LCDWriteInt,w
 12744  0C77  07AF               	addwf	LCDWriteInt@i,f
 12745  0C78  2C52               	goto	l3030
 12746  0C79                     l3032:	
 12747                           
 12748                           ;lcd.c: 230: }
 12749                           ;lcd.c: 232: if(numPlaces == 1)
 12750  0C79  0020               	movlb	0	; select bank0
 12751  0C7A  0323               	decf	LCDWriteInt@numPlaces,w
 12752  0C7B  1D03               	btfss	3,2
 12753  0C7C  2C87               	goto	l3036
 12754                           
 12755                           ;lcd.c: 233: {
 12756                           ;lcd.c: 234: LCDWriteCharacter(46);
 12757  0C7D  302E               	movlw	46
 12758  0C7E  3196  2685  318B   	fcall	_LCDWriteCharacter
 12759                           
 12760                           ;lcd.c: 235: LCDWriteCharacter ((uint8_t)(48+str[4]));
 12761  0C81  0020               	movlb	0	; select bank0
 12762  0C82  082D               	movf	LCDWriteInt@str+4,w
 12763  0C83  3E30               	addlw	48
 12764  0C84  3196  2685  318B   	fcall	_LCDWriteCharacter
 12765  0C87                     l3036:	
 12766                           
 12767                           ;lcd.c: 236: }
 12768                           ;lcd.c: 238: if(numPlaces == 2)
 12769  0C87  3002               	movlw	2
 12770  0C88  0020               	movlb	0	; select bank0
 12771  0C89  0623               	xorwf	LCDWriteInt@numPlaces,w
 12772  0C8A  1D03               	btfss	3,2
 12773  0C8B  0008               	return
 12774                           
 12775                           ;lcd.c: 239: {
 12776                           ;lcd.c: 240: LCDWriteCharacter(46);
 12777  0C8C  302E               	movlw	46
 12778  0C8D  3196  2685  318B   	fcall	_LCDWriteCharacter
 12779                           
 12780                           ;lcd.c: 241: LCDWriteCharacter((uint8_t)(48+str[3]));
 12781  0C90  0020               	movlb	0	; select bank0
 12782  0C91  082C               	movf	LCDWriteInt@str+3,w
 12783  0C92  3E30               	addlw	48
 12784  0C93  3196  2685  318B   	fcall	_LCDWriteCharacter
 12785                           
 12786                           ;lcd.c: 242: LCDWriteCharacter((uint8_t)(48+str[4]));
 12787  0C96  0020               	movlb	0	; select bank0
 12788  0C97  082D               	movf	LCDWriteInt@str+4,w
 12789  0C98  3E30               	addlw	48
 12790  0C99  3196  2685         	fcall	_LCDWriteCharacter
 12791  0C9B  0008               	return
 12792  0C9C                     __end_of_LCDWriteInt:	
 12793                           
 12794                           	psect	text33
 12795  145B                     __ptext33:	
 12796 ;; *************** function ___lwmod *****************
 12797 ;; Defined at:
 12798 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 12799 ;; Parameters:    Size  Location     Type
 12800 ;;  divisor         2    0[COMMON] unsigned int 
 12801 ;;  dividend        2    2[COMMON] unsigned int 
 12802 ;; Auto vars:     Size  Location     Type
 12803 ;;  counter         1    5[COMMON] unsigned char 
 12804 ;; Return value:  Size  Location     Type
 12805 ;;                  2    0[COMMON] unsigned int 
 12806 ;; Registers used:
 12807 ;;		wreg, status,2, status,0
 12808 ;; Tracked objects:
 12809 ;;		On entry : 0/0
 12810 ;;		On exit  : 0/0
 12811 ;;		Unchanged: 0/0
 12812 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12813 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12814 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12815 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12816 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12817 ;;Total ram usage:        6 bytes
 12818 ;; Hardware stack levels used:    1
 12819 ;; This function calls:
 12820 ;;		Nothing
 12821 ;; This function is called by:
 12822 ;;		_LCDWriteInt
 12823 ;; This function uses a non-reentrant model
 12824 ;;
 12825                           
 12826                           
 12827                           ;psect for function ___lwmod
 12828  145B                     ___lwmod:	
 12829                           
 12830                           ;incstack = 0
 12831                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
 12832  145B  0870               	movf	___lwmod@divisor,w
 12833  145C  0471               	iorwf	___lwmod@divisor+1,w
 12834  145D  1903               	btfsc	3,2
 12835  145E  2C82               	goto	l2838
 12836  145F  01F5               	clrf	___lwmod@counter
 12837  1460  0AF5               	incf	___lwmod@counter,f
 12838  1461                     l2828:	
 12839  1461  1BF1               	btfsc	___lwmod@divisor+1,7
 12840  1462  2C6D               	goto	l2830
 12841  1463  3001               	movlw	1
 12842  1464                     u3065:	
 12843  1464  35F0               	lslf	___lwmod@divisor,f
 12844  1465  0DF1               	rlf	___lwmod@divisor+1,f
 12845  1466  0B89               	decfsz	9,f
 12846  1467  2C64               	goto	u3065
 12847  1468  3001               	movlw	1
 12848  1469  00F4               	movwf	??___lwmod
 12849  146A  0874               	movf	??___lwmod,w
 12850  146B  07F5               	addwf	___lwmod@counter,f
 12851  146C  2C61               	goto	l2828
 12852  146D                     l2830:	
 12853  146D  0871               	movf	___lwmod@divisor+1,w
 12854  146E  0273               	subwf	___lwmod@dividend+1,w
 12855  146F  1D03               	skipz
 12856  1470  2C73               	goto	u3085
 12857  1471  0870               	movf	___lwmod@divisor,w
 12858  1472  0272               	subwf	___lwmod@dividend,w
 12859  1473                     u3085:	
 12860  1473  1C03               	skipc
 12861  1474  2C79               	goto	l2834
 12862  1475  0870               	movf	___lwmod@divisor,w
 12863  1476  02F2               	subwf	___lwmod@dividend,f
 12864  1477  0871               	movf	___lwmod@divisor+1,w
 12865  1478  3BF3               	subwfb	___lwmod@dividend+1,f
 12866  1479                     l2834:	
 12867  1479  3001               	movlw	1
 12868  147A                     u3095:	
 12869  147A  36F1               	lsrf	___lwmod@divisor+1,f
 12870  147B  0CF0               	rrf	___lwmod@divisor,f
 12871  147C  0B89               	decfsz	9,f
 12872  147D  2C7A               	goto	u3095
 12873  147E  3001               	movlw	1
 12874  147F  02F5               	subwf	___lwmod@counter,f
 12875  1480  1D03               	btfss	3,2
 12876  1481  2C6D               	goto	l2830
 12877  1482                     l2838:	
 12878  1482  0873               	movf	___lwmod@dividend+1,w
 12879  1483  00F1               	movwf	?___lwmod+1
 12880  1484  0872               	movf	___lwmod@dividend,w
 12881  1485  00F0               	movwf	?___lwmod
 12882  1486  0008               	return
 12883  1487                     __end_of___lwmod:	
 12884                           
 12885                           	psect	text34
 12886  1634                     __ptext34:	
 12887 ;; *************** function ___awdiv *****************
 12888 ;; Defined at:
 12889 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
 12890 ;; Parameters:    Size  Location     Type
 12891 ;;  divisor         2    0[COMMON] int 
 12892 ;;  dividend        2    2[COMMON] int 
 12893 ;; Auto vars:     Size  Location     Type
 12894 ;;  quotient        2    7[COMMON] int 
 12895 ;;  sign            1    6[COMMON] unsigned char 
 12896 ;;  counter         1    5[COMMON] unsigned char 
 12897 ;; Return value:  Size  Location     Type
 12898 ;;                  2    0[COMMON] int 
 12899 ;; Registers used:
 12900 ;;		wreg, status,2, status,0
 12901 ;; Tracked objects:
 12902 ;;		On entry : 0/0
 12903 ;;		On exit  : 0/0
 12904 ;;		Unchanged: 0/0
 12905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12906 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12907 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12908 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12909 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12910 ;;Total ram usage:        9 bytes
 12911 ;; Hardware stack levels used:    1
 12912 ;; This function calls:
 12913 ;;		Nothing
 12914 ;; This function is called by:
 12915 ;;		_LCDWriteInt
 12916 ;; This function uses a non-reentrant model
 12917 ;;
 12918                           
 12919                           
 12920                           ;psect for function ___awdiv
 12921  1634                     ___awdiv:	
 12922                           
 12923                           ;incstack = 0
 12924                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 12925  1634  01F6               	clrf	___awdiv@sign
 12926  1635  1FF1               	btfss	___awdiv@divisor+1,7
 12927  1636  2E3E               	goto	l2734
 12928  1637  09F0               	comf	___awdiv@divisor,f
 12929  1638  09F1               	comf	___awdiv@divisor+1,f
 12930  1639  0AF0               	incf	___awdiv@divisor,f
 12931  163A  1903               	skipnz
 12932  163B  0AF1               	incf	___awdiv@divisor+1,f
 12933  163C  01F6               	clrf	___awdiv@sign
 12934  163D  0AF6               	incf	___awdiv@sign,f
 12935  163E                     l2734:	
 12936  163E  1FF3               	btfss	___awdiv@dividend+1,7
 12937  163F  2E49               	goto	l2740
 12938  1640  09F2               	comf	___awdiv@dividend,f
 12939  1641  09F3               	comf	___awdiv@dividend+1,f
 12940  1642  0AF2               	incf	___awdiv@dividend,f
 12941  1643  1903               	skipnz
 12942  1644  0AF3               	incf	___awdiv@dividend+1,f
 12943  1645  3001               	movlw	1
 12944  1646  00F4               	movwf	??___awdiv
 12945  1647  0874               	movf	??___awdiv,w
 12946  1648  06F6               	xorwf	___awdiv@sign,f
 12947  1649                     l2740:	
 12948  1649  01F7               	clrf	___awdiv@quotient
 12949  164A  01F8               	clrf	___awdiv@quotient+1
 12950  164B  0870               	movf	___awdiv@divisor,w
 12951  164C  0471               	iorwf	___awdiv@divisor+1,w
 12952  164D  1903               	btfsc	3,2
 12953  164E  2E78               	goto	l2762
 12954  164F  01F5               	clrf	___awdiv@counter
 12955  1650  0AF5               	incf	___awdiv@counter,f
 12956  1651                     l2750:	
 12957  1651  1BF1               	btfsc	___awdiv@divisor+1,7
 12958  1652  2E5D               	goto	l2752
 12959  1653  3001               	movlw	1
 12960  1654                     u2895:	
 12961  1654  35F0               	lslf	___awdiv@divisor,f
 12962  1655  0DF1               	rlf	___awdiv@divisor+1,f
 12963  1656  0B89               	decfsz	9,f
 12964  1657  2E54               	goto	u2895
 12965  1658  3001               	movlw	1
 12966  1659  00F4               	movwf	??___awdiv
 12967  165A  0874               	movf	??___awdiv,w
 12968  165B  07F5               	addwf	___awdiv@counter,f
 12969  165C  2E51               	goto	l2750
 12970  165D                     l2752:	
 12971  165D  3001               	movlw	1
 12972  165E                     u2915:	
 12973  165E  35F7               	lslf	___awdiv@quotient,f
 12974  165F  0DF8               	rlf	___awdiv@quotient+1,f
 12975  1660  0B89               	decfsz	9,f
 12976  1661  2E5E               	goto	u2915
 12977  1662  0871               	movf	___awdiv@divisor+1,w
 12978  1663  0273               	subwf	___awdiv@dividend+1,w
 12979  1664  1D03               	skipz
 12980  1665  2E68               	goto	u2925
 12981  1666  0870               	movf	___awdiv@divisor,w
 12982  1667  0272               	subwf	___awdiv@dividend,w
 12983  1668                     u2925:	
 12984  1668  1C03               	skipc
 12985  1669  2E6F               	goto	l2758
 12986  166A  0870               	movf	___awdiv@divisor,w
 12987  166B  02F2               	subwf	___awdiv@dividend,f
 12988  166C  0871               	movf	___awdiv@divisor+1,w
 12989  166D  3BF3               	subwfb	___awdiv@dividend+1,f
 12990  166E  1477               	bsf	___awdiv@quotient,0
 12991  166F                     l2758:	
 12992  166F  3001               	movlw	1
 12993  1670                     u2935:	
 12994  1670  36F1               	lsrf	___awdiv@divisor+1,f
 12995  1671  0CF0               	rrf	___awdiv@divisor,f
 12996  1672  0B89               	decfsz	9,f
 12997  1673  2E70               	goto	u2935
 12998  1674  3001               	movlw	1
 12999  1675  02F5               	subwf	___awdiv@counter,f
 13000  1676  1D03               	btfss	3,2
 13001  1677  2E5D               	goto	l2752
 13002  1678                     l2762:	
 13003  1678  0876               	movf	___awdiv@sign,w
 13004  1679  1903               	btfsc	3,2
 13005  167A  2E80               	goto	l2766
 13006  167B  09F7               	comf	___awdiv@quotient,f
 13007  167C  09F8               	comf	___awdiv@quotient+1,f
 13008  167D  0AF7               	incf	___awdiv@quotient,f
 13009  167E  1903               	skipnz
 13010  167F  0AF8               	incf	___awdiv@quotient+1,f
 13011  1680                     l2766:	
 13012  1680  0878               	movf	___awdiv@quotient+1,w
 13013  1681  00F1               	movwf	?___awdiv+1
 13014  1682  0877               	movf	___awdiv@quotient,w
 13015  1683  00F0               	movwf	?___awdiv
 13016  1684  0008               	return
 13017  1685                     __end_of___awdiv:	
 13018                           
 13019                           	psect	text35
 13020  1685                     __ptext35:	
 13021 ;; *************** function _LCDWriteCharacter *****************
 13022 ;; Defined at:
 13023 ;;		line 140 in file "lcd.c"
 13024 ;; Parameters:    Size  Location     Type
 13025 ;;  character       1    wreg     const unsigned char 
 13026 ;; Auto vars:     Size  Location     Type
 13027 ;;  character       1    9[COMMON] const unsigned char 
 13028 ;;  base            2   10[COMMON] unsigned int 
 13029 ;; Return value:  Size  Location     Type
 13030 ;;                  1    wreg      void 
 13031 ;; Registers used:
 13032 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13033 ;; Tracked objects:
 13034 ;;		On entry : 0/0
 13035 ;;		On exit  : 0/0
 13036 ;;		Unchanged: 0/0
 13037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13038 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13039 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13040 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13041 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13042 ;;Total ram usage:        6 bytes
 13043 ;; Hardware stack levels used:    1
 13044 ;; Hardware stack levels required when called:    1
 13045 ;; This function calls:
 13046 ;;		_LCDWrite
 13047 ;;		___wmul
 13048 ;; This function is called by:
 13049 ;;		_LCDWriteString
 13050 ;;		_LCDWriteInt
 13051 ;;		_main
 13052 ;; This function uses a non-reentrant model
 13053 ;;
 13054                           
 13055                           
 13056                           ;psect for function _LCDWriteCharacter
 13057  1685                     _LCDWriteCharacter:	
 13058                           
 13059                           ;incstack = 0
 13060                           ; Regs used in _LCDWriteCharacter: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13061                           ;LCDWriteCharacter@character stored from wreg
 13062  1685  00F9               	movwf	LCDWriteCharacter@character
 13063                           
 13064                           ;lcd.c: 142: uint16_t base;
 13065                           ;lcd.c: 143: base = character - 0x20;
 13066  1686  0879               	movf	LCDWriteCharacter@character,w
 13067  1687  3EE0               	addlw	224
 13068  1688  00FA               	movwf	LCDWriteCharacter@base
 13069  1689  30FF               	movlw	255
 13070  168A  1803               	skipnc
 13071  168B  3000               	movlw	0
 13072  168C  00FB               	movwf	LCDWriteCharacter@base+1
 13073                           
 13074                           ;lcd.c: 144: base *= 3;
 13075  168D  3003               	movlw	3
 13076  168E  00F0               	movwf	___wmul@multiplier
 13077  168F  3000               	movlw	0
 13078  1690  00F1               	movwf	___wmul@multiplier+1
 13079  1691  087B               	movf	LCDWriteCharacter@base+1,w
 13080  1692  00F3               	movwf	___wmul@multiplicand+1
 13081  1693  087A               	movf	LCDWriteCharacter@base,w
 13082  1694  00F2               	movwf	___wmul@multiplicand
 13083  1695  3193  2398  3196   	fcall	___wmul
 13084  1698  0871               	movf	?___wmul+1,w
 13085  1699  00FB               	movwf	LCDWriteCharacter@base+1
 13086  169A  0870               	movf	?___wmul,w
 13087  169B  00FA               	movwf	LCDWriteCharacter@base
 13088                           
 13089                           ;lcd.c: 145: LCDWrite(1,fonts[base]);
 13090  169C  087B               	movf	LCDWriteCharacter@base+1,w
 13091  169D  0085               	movwf	5
 13092  169E  087A               	movf	LCDWriteCharacter@base,w
 13093  169F  0084               	movwf	4
 13094  16A0  3000               	movlw	low (_fonts| (0+32768))
 13095  16A1  0784               	addwf	4,f
 13096  16A2  3090               	movlw	high (_fonts| (0+32768))
 13097  16A3  3D85               	addwfc	5,f
 13098  16A4  0800               	movf	0,w	;code access
 13099  16A5  00F6               	movwf	??_LCDWriteCharacter
 13100  16A6  0876               	movf	??_LCDWriteCharacter,w
 13101  16A7  00F0               	movwf	LCDWrite@data
 13102  16A8  3001               	movlw	1
 13103  16A9  3194  2410  3196   	fcall	_LCDWrite
 13104                           
 13105                           ;lcd.c: 146: LCDWrite(1,fonts[base + 1]);
 13106  16AC  087A               	movf	LCDWriteCharacter@base,w
 13107  16AD  3E01               	addlw	1
 13108  16AE  00F6               	movwf	??_LCDWriteCharacter
 13109  16AF  3000               	movlw	0
 13110  16B0  3D7B               	addwfc	LCDWriteCharacter@base+1,w
 13111  16B1  00F7               	movwf	??_LCDWriteCharacter+1
 13112  16B2  3000               	movlw	low (_fonts| (0+32768))
 13113  16B3  0776               	addwf	??_LCDWriteCharacter,w
 13114  16B4  0084               	movwf	4
 13115  16B5  3090               	movlw	high (_fonts| (0+32768))
 13116  16B6  3D77               	addwfc	??_LCDWriteCharacter+1,w
 13117  16B7  0085               	movwf	5
 13118  16B8  0800               	movf	0,w	;code access
 13119  16B9  00F8               	movwf	??_LCDWriteCharacter+2
 13120  16BA  0878               	movf	??_LCDWriteCharacter+2,w
 13121  16BB  00F0               	movwf	LCDWrite@data
 13122  16BC  3001               	movlw	1
 13123  16BD  3194  2410  3196   	fcall	_LCDWrite
 13124                           
 13125                           ;lcd.c: 147: LCDWrite(1,fonts[base + 2]);
 13126  16C0  087A               	movf	LCDWriteCharacter@base,w
 13127  16C1  3E02               	addlw	2
 13128  16C2  00F6               	movwf	??_LCDWriteCharacter
 13129  16C3  3000               	movlw	0
 13130  16C4  3D7B               	addwfc	LCDWriteCharacter@base+1,w
 13131  16C5  00F7               	movwf	??_LCDWriteCharacter+1
 13132  16C6  3000               	movlw	low (_fonts| (0+32768))
 13133  16C7  0776               	addwf	??_LCDWriteCharacter,w
 13134  16C8  0084               	movwf	4
 13135  16C9  3090               	movlw	high (_fonts| (0+32768))
 13136  16CA  3D77               	addwfc	??_LCDWriteCharacter+1,w
 13137  16CB  0085               	movwf	5
 13138  16CC  0800               	movf	0,w	;code access
 13139  16CD  00F8               	movwf	??_LCDWriteCharacter+2
 13140  16CE  0878               	movf	??_LCDWriteCharacter+2,w
 13141  16CF  00F0               	movwf	LCDWrite@data
 13142  16D0  3001               	movlw	1
 13143  16D1  3194  2410  3196   	fcall	_LCDWrite
 13144                           
 13145                           ;lcd.c: 148: LCDWrite(1, 0x00);
 13146  16D4  01F0               	clrf	LCDWrite@data
 13147  16D5  3001               	movlw	1
 13148  16D6  3194  2410         	fcall	_LCDWrite
 13149  16D8  0008               	return
 13150  16D9                     __end_of_LCDWriteCharacter:	
 13151                           
 13152                           	psect	text36
 13153  1398                     __ptext36:	
 13154 ;; *************** function ___wmul *****************
 13155 ;; Defined at:
 13156 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 13157 ;; Parameters:    Size  Location     Type
 13158 ;;  multiplier      2    0[COMMON] unsigned int 
 13159 ;;  multiplicand    2    2[COMMON] unsigned int 
 13160 ;; Auto vars:     Size  Location     Type
 13161 ;;  product         2    4[COMMON] unsigned int 
 13162 ;; Return value:  Size  Location     Type
 13163 ;;                  2    0[COMMON] unsigned int 
 13164 ;; Registers used:
 13165 ;;		wreg, status,2, status,0
 13166 ;; Tracked objects:
 13167 ;;		On entry : 0/0
 13168 ;;		On exit  : 0/0
 13169 ;;		Unchanged: 0/0
 13170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13171 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13172 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13173 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13174 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13175 ;;Total ram usage:        6 bytes
 13176 ;; Hardware stack levels used:    1
 13177 ;; This function calls:
 13178 ;;		Nothing
 13179 ;; This function is called by:
 13180 ;;		_readIAnalog
 13181 ;;		_LCDWriteCharacter
 13182 ;;		_eval_poly
 13183 ;; This function uses a non-reentrant model
 13184 ;;
 13185                           
 13186                           
 13187                           ;psect for function ___wmul
 13188  1398                     ___wmul:	
 13189                           
 13190                           ;incstack = 0
 13191                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 13192  1398  01F4               	clrf	___wmul@product
 13193  1399  01F5               	clrf	___wmul@product+1
 13194  139A                     l2254:	
 13195  139A  1C70               	btfss	___wmul@multiplier,0
 13196  139B  2BA0               	goto	l582
 13197  139C  0872               	movf	___wmul@multiplicand,w
 13198  139D  07F4               	addwf	___wmul@product,f
 13199  139E  0873               	movf	___wmul@multiplicand+1,w
 13200  139F  3DF5               	addwfc	___wmul@product+1,f
 13201  13A0                     l582:	
 13202  13A0  3001               	movlw	1
 13203  13A1                     u2145:	
 13204  13A1  35F2               	lslf	___wmul@multiplicand,f
 13205  13A2  0DF3               	rlf	___wmul@multiplicand+1,f
 13206  13A3  0B89               	decfsz	9,f
 13207  13A4  2BA1               	goto	u2145
 13208  13A5  3001               	movlw	1
 13209  13A6                     u2155:	
 13210  13A6  36F1               	lsrf	___wmul@multiplier+1,f
 13211  13A7  0CF0               	rrf	___wmul@multiplier,f
 13212  13A8  0B89               	decfsz	9,f
 13213  13A9  2BA6               	goto	u2155
 13214  13AA  0870               	movf	___wmul@multiplier,w
 13215  13AB  0471               	iorwf	___wmul@multiplier+1,w
 13216  13AC  1D03               	btfss	3,2
 13217  13AD  2B9A               	goto	l2254
 13218  13AE  0875               	movf	___wmul@product+1,w
 13219  13AF  00F1               	movwf	?___wmul+1
 13220  13B0  0874               	movf	___wmul@product,w
 13221  13B1  00F0               	movwf	?___wmul
 13222  13B2  0008               	return
 13223  13B3                     __end_of___wmul:	
 13224                           
 13225                           	psect	text37
 13226  1410                     __ptext37:	
 13227 ;; *************** function _LCDWrite *****************
 13228 ;; Defined at:
 13229 ;;		line 281 in file "lcd.c"
 13230 ;; Parameters:    Size  Location     Type
 13231 ;;  data_or_comm    1    wreg     unsigned char 
 13232 ;;  data            1    0[COMMON] unsigned char 
 13233 ;; Auto vars:     Size  Location     Type
 13234 ;;  data_or_comm    1    2[COMMON] unsigned char 
 13235 ;;  i               1    4[COMMON] unsigned char 
 13236 ;;  d               1    3[COMMON] unsigned char 
 13237 ;; Return value:  Size  Location     Type
 13238 ;;                  1    wreg      void 
 13239 ;; Registers used:
 13240 ;;		wreg, status,2, status,0
 13241 ;; Tracked objects:
 13242 ;;		On entry : 0/0
 13243 ;;		On exit  : 0/0
 13244 ;;		Unchanged: 0/0
 13245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13246 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13247 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13248 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13249 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13250 ;;Total ram usage:        5 bytes
 13251 ;; Hardware stack levels used:    1
 13252 ;; This function calls:
 13253 ;;		Nothing
 13254 ;; This function is called by:
 13255 ;;		_gotoXY
 13256 ;;		_LCDWriteCharacter
 13257 ;;		_LCDClear
 13258 ;;		_LCDInit
 13259 ;; This function uses a non-reentrant model
 13260 ;;
 13261                           
 13262                           
 13263                           ;psect for function _LCDWrite
 13264  1410                     _LCDWrite:	
 13265                           
 13266                           ;incstack = 0
 13267                           ; Regs used in _LCDWrite: [wreg+status,2+status,0]
 13268                           ;LCDWrite@data_or_command stored from wreg
 13269  1410  00F2               	movwf	LCDWrite@data_or_command
 13270                           
 13271                           ;lcd.c: 283: uint8_t i,d;
 13272                           ;lcd.c: 285: d=data;
 13273  1411  0870               	movf	LCDWrite@data,w
 13274  1412  00F1               	movwf	??_LCDWrite
 13275  1413  0871               	movf	??_LCDWrite,w
 13276  1414  00F3               	movwf	LCDWrite@d
 13277                           
 13278                           ;lcd.c: 287: if(data_or_command == 0)
 13279  1415  0872               	movf	LCDWrite@data_or_command,w
 13280  1416  1D03               	btfss	3,2
 13281  1417  2C1B               	goto	l217
 13282                           
 13283                           ;lcd.c: 288: {
 13284                           ;lcd.c: 289: LATAbits.LATA2 = 0;
 13285  1418  0020               	movlb	0	; select bank0
 13286  1419  1116               	bcf	22,2	;volatile
 13287                           
 13288                           ;lcd.c: 290: }
 13289  141A  2C1D               	goto	l218
 13290  141B                     l217:	
 13291                           
 13292                           ;lcd.c: 291: else
 13293                           ;lcd.c: 292: {
 13294                           ;lcd.c: 293: LATAbits.LATA2 = 1;
 13295  141B  0020               	movlb	0	; select bank0
 13296  141C  1516               	bsf	22,2	;volatile
 13297  141D                     l218:	
 13298                           
 13299                           ;lcd.c: 294: }
 13300                           ;lcd.c: 296: LATAbits.LATA1 = 0;
 13301  141D  1096               	bcf	22,1	;volatile
 13302                           
 13303                           ;lcd.c: 298: for(i=0;i<8;i++)
 13304  141E  01F4               	clrf	LCDWrite@i
 13305  141F  3008               	movlw	8
 13306  1420  0274               	subwf	LCDWrite@i,w
 13307  1421  1803               	btfsc	3,0
 13308  1422  2C33               	goto	l220
 13309  1423                     l219:	
 13310                           
 13311                           ;lcd.c: 299: {
 13312                           ;lcd.c: 300: LATAbits.LATA3 = 0;
 13313  1423  1196               	bcf	22,3	;volatile
 13314                           
 13315                           ;lcd.c: 302: if(d&0x80)
 13316  1424  1FF3               	btfss	LCDWrite@d,7
 13317  1425  2C27               	goto	l221
 13318                           
 13319                           ;lcd.c: 303: {
 13320                           ;lcd.c: 304: LATAbits.LATA3 = 1;
 13321  1426  1596               	bsf	22,3	;volatile
 13322  1427                     l221:	
 13323                           
 13324                           ;lcd.c: 305: }
 13325                           ;lcd.c: 307: LATAbits.LATA4 = 1;
 13326  1427  1616               	bsf	22,4	;volatile
 13327                           
 13328                           ;lcd.c: 309: d<<=1;
 13329  1428  1003               	clrc
 13330  1429  0DF3               	rlf	LCDWrite@d,f
 13331                           
 13332                           ;lcd.c: 311: LATAbits.LATA4=0;
 13333  142A  1216               	bcf	22,4	;volatile
 13334  142B  3001               	movlw	1
 13335  142C  00F1               	movwf	??_LCDWrite
 13336  142D  0871               	movf	??_LCDWrite,w
 13337  142E  07F4               	addwf	LCDWrite@i,f
 13338  142F  3008               	movlw	8
 13339  1430  0274               	subwf	LCDWrite@i,w
 13340  1431  1C03               	skipc
 13341  1432  2C23               	goto	l219
 13342  1433                     l220:	
 13343                           
 13344                           ;lcd.c: 312: }
 13345                           ;lcd.c: 314: LATAbits.LATA1 = 1;
 13346  1433  1496               	bsf	22,1	;volatile
 13347  1434  0008               	return
 13348  1435                     __end_of_LCDWrite:	
 13349                           
 13350                           	psect	text38
 13351  013F                     __ptext38:	
 13352 ;; *************** function _Battery_State_Machine *****************
 13353 ;; Defined at:
 13354 ;;		line 28 in file "battery_charger.c"
 13355 ;; Parameters:    Size  Location     Type
 13356 ;;  z               1    wreg     unsigned char 
 13357 ;; Auto vars:     Size  Location     Type
 13358 ;;  z               1   35[BANK0 ] unsigned char 
 13359 ;; Return value:  Size  Location     Type
 13360 ;;                  1    wreg      void 
 13361 ;; Registers used:
 13362 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13363 ;; Tracked objects:
 13364 ;;		On entry : 0/0
 13365 ;;		On exit  : 0/0
 13366 ;;		Unchanged: 0/0
 13367 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13368 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13369 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13370 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13371 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13372 ;;Total ram usage:        6 bytes
 13373 ;; Hardware stack levels used:    1
 13374 ;; Hardware stack levels required when called:    2
 13375 ;; This function calls:
 13376 ;;		___awtoft
 13377 ;;		___ftmul
 13378 ;;		___fttol
 13379 ;; This function is called by:
 13380 ;;		_main
 13381 ;; This function uses a non-reentrant model
 13382 ;;
 13383                           
 13384                           
 13385                           ;psect for function _Battery_State_Machine
 13386  013F                     _Battery_State_Machine:	
 13387                           
 13388                           ;incstack = 0
 13389                           ; Regs used in _Battery_State_Machine: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 13390                           ;Battery_State_Machine@z stored from wreg
 13391  013F  0020               	movlb	0	; select bank0
 13392  0140  00C3               	movwf	Battery_State_Machine@z
 13393                           
 13394                           ;battery_charger.c: 30: if(batteryState[z]==PRECHARGE)
 13395  0141  0843               	movf	Battery_State_Machine@z,w
 13396  0142  3E64               	addlw	(low (_batteryState| 0))& (0+255)
 13397  0143  0086               	movwf	6
 13398  0144  0187               	clrf	7
 13399  0145  3003               	movlw	3
 13400  0146  0601               	xorwf	1,w
 13401  0147  1D03               	btfss	3,2
 13402  0148  2996               	goto	l2874
 13403                           
 13404                           ;battery_charger.c: 31: {
 13405                           ;battery_charger.c: 32: if(voltage[z]<1075)
 13406  0149  3543               	lslf	Battery_State_Machine@z,w
 13407  014A  3EB0               	addlw	(low (_voltage| 0))& (0+255)
 13408  014B  0086               	movwf	6
 13409  014C  0187               	clrf	7
 13410  014D  3F40               	moviw [0]fsr1
 13411  014E  00BE               	movwf	??_Battery_State_Machine
 13412  014F  3F41               	moviw [1]fsr1
 13413  0150  00BF               	movwf	??_Battery_State_Machine+1
 13414  0151  083F               	movf	??_Battery_State_Machine+1,w
 13415  0152  3A80               	xorlw	128
 13416  0153  00C0               	movwf	??_Battery_State_Machine+2
 13417  0154  3084               	movlw	132
 13418  0155  0240               	subwf	??_Battery_State_Machine+2,w
 13419  0156  1D03               	skipz
 13420  0157  295A               	goto	u3195
 13421  0158  3033               	movlw	51
 13422  0159  023E               	subwf	??_Battery_State_Machine,w
 13423  015A                     u3195:	
 13424  015A  1803               	skipnc
 13425  015B  2984               	goto	l2872
 13426                           
 13427                           ;battery_charger.c: 33: {
 13428                           ;battery_charger.c: 34: if(stateCounter[z]>0)
 13429  015C  0020               	movlb	0	; select bank0
 13430  015D  3543               	lslf	Battery_State_Machine@z,w
 13431  015E  3EC0               	addlw	(low (_stateCounter| 0))& (0+255)
 13432  015F  0086               	movwf	6
 13433  0160  0187               	clrf	7
 13434  0161  3F40               	moviw [0]fsr1
 13435  0162  00BE               	movwf	??_Battery_State_Machine
 13436  0163  3F41               	moviw [1]fsr1
 13437  0164  00BF               	movwf	??_Battery_State_Machine+1
 13438  0165  083F               	movf	??_Battery_State_Machine+1,w
 13439  0166  3A80               	xorlw	128
 13440  0167  00C0               	movwf	??_Battery_State_Machine+2
 13441  0168  3080               	movlw	128
 13442  0169  0240               	subwf	??_Battery_State_Machine+2,w
 13443  016A  1D03               	skipz
 13444  016B  296E               	goto	u3205
 13445  016C  3001               	movlw	1
 13446  016D  023E               	subwf	??_Battery_State_Machine,w
 13447  016E                     u3205:	
 13448  016E  1C03               	skipc
 13449  016F  297C               	goto	l2870
 13450                           
 13451                           ;battery_charger.c: 35: {
 13452                           ;battery_charger.c: 36: stateCounter[z]-=1;
 13453  0170  0020               	movlb	0	; select bank0
 13454  0171  3543               	lslf	Battery_State_Machine@z,w
 13455  0172  3EC0               	addlw	(low (_stateCounter| 0))& (0+255)
 13456  0173  0086               	movwf	6
 13457  0174  0187               	clrf	7
 13458  0175  30FF               	movlw	255
 13459  0176  0781               	addwf	1,f
 13460  0177  3141               	addfsr 1,1
 13461  0178  30FF               	movlw	255
 13462  0179  3D81               	addwfc	1,f
 13463  017A  317F               	addfsr 1,-1
 13464                           
 13465                           ;battery_charger.c: 37: }
 13466  017B  0008               	return
 13467  017C                     l2870:	
 13468                           
 13469                           ;battery_charger.c: 38: else
 13470                           ;battery_charger.c: 39: {
 13471                           ;battery_charger.c: 40: batteryState[z]=FAULT;
 13472  017C  0020               	movlb	0	; select bank0
 13473  017D  0843               	movf	Battery_State_Machine@z,w
 13474  017E  3E64               	addlw	(low (_batteryState| 0))& (0+255)
 13475  017F  0086               	movwf	6
 13476  0180  0187               	clrf	7
 13477  0181  0181               	clrf	1
 13478  0182  0A81               	incf	1,f
 13479                           
 13480                           ;battery_charger.c: 41: }
 13481                           ;battery_charger.c: 42: }
 13482  0183  0008               	return
 13483  0184                     l2872:	
 13484                           
 13485                           ;battery_charger.c: 43: else
 13486                           ;battery_charger.c: 44: {
 13487                           ;battery_charger.c: 45: batteryState[z]=CHARGE;
 13488  0184  3004               	movlw	4
 13489  0185  0020               	movlb	0	; select bank0
 13490  0186  00BE               	movwf	??_Battery_State_Machine
 13491  0187  0843               	movf	Battery_State_Machine@z,w
 13492  0188  3E64               	addlw	(low (_batteryState| 0))& (0+255)
 13493  0189  0086               	movwf	6
 13494  018A  0187               	clrf	7
 13495  018B  083E               	movf	??_Battery_State_Machine,w
 13496  018C  0081               	movwf	1
 13497                           
 13498                           ;battery_charger.c: 46: Iref[z]=35;
 13499  018D  3543               	lslf	Battery_State_Machine@z,w
 13500  018E  3EC4               	addlw	(low (_Iref| 0))& (0+255)
 13501  018F  0086               	movwf	6
 13502  0190  0187               	clrf	7
 13503  0191  3023               	movlw	35
 13504  0192  3FC0               	movwi [0]fsr1
 13505  0193  3000               	movlw	0
 13506  0194  3FC1               	movwi [1]fsr1
 13507                           
 13508                           ;battery_charger.c: 47: }
 13509                           ;battery_charger.c: 48: }
 13510  0195  0008               	return
 13511  0196                     l2874:	
 13512                           
 13513                           ;battery_charger.c: 49: else if(batteryState[z]==CHARGE)
 13514  0196  0843               	movf	Battery_State_Machine@z,w
 13515  0197  3E64               	addlw	(low (_batteryState| 0))& (0+255)
 13516  0198  0086               	movwf	6
 13517  0199  0187               	clrf	7
 13518  019A  3004               	movlw	4
 13519  019B  0601               	xorwf	1,w
 13520  019C  1D03               	btfss	3,2
 13521  019D  2A58               	goto	l2894
 13522                           
 13523                           ;battery_charger.c: 50: {
 13524                           ;battery_charger.c: 51: Vref[z]=1425+(int16_t)((250-batteryTemp)*.24);
 13525  019E  096C               	comf	_batteryTemp,w
 13526  019F  00BE               	movwf	??_Battery_State_Machine
 13527  01A0  096D               	comf	_batteryTemp+1,w
 13528  01A1  00BF               	movwf	??_Battery_State_Machine+1
 13529  01A2  0ABE               	incf	??_Battery_State_Machine,f
 13530  01A3  1903               	skipnz
 13531  01A4  0ABF               	incf	??_Battery_State_Machine+1,f
 13532  01A5  083E               	movf	??_Battery_State_Machine,w
 13533  01A6  3EFA               	addlw	250
 13534  01A7  00F8               	movwf	___awtoft@c
 13535  01A8  3000               	movlw	0
 13536  01A9  3D3F               	addwfc	??_Battery_State_Machine+1,w
 13537  01AA  00F9               	movwf	___awtoft@c+1
 13538  01AB  3193  23F0  3181   	fcall	___awtoft
 13539  01AE  0878               	movf	?___awtoft,w
 13540  01AF  0020               	movlb	0	; select bank0
 13541  01B0  00A3               	movwf	___ftmul@f2
 13542  01B1  0879               	movf	?___awtoft+1,w
 13543  01B2  00A4               	movwf	___ftmul@f2+1
 13544  01B3  087A               	movf	?___awtoft+2,w
 13545  01B4  00A5               	movwf	___ftmul@f2+2
 13546  01B5  30C3               	movlw	195
 13547  01B6  00A0               	movwf	___ftmul@f1
 13548  01B7  3075               	movlw	117
 13549  01B8  00A1               	movwf	___ftmul@f1+1
 13550  01B9  303E               	movlw	62
 13551  01BA  00A2               	movwf	___ftmul@f1+2
 13552  01BB  318B  232F  3181   	fcall	___ftmul
 13553  01BE  0020               	movlb	0	; select bank0
 13554  01BF  0820               	movf	?___ftmul,w
 13555  01C0  00B0               	movwf	___fttol@f1
 13556  01C1  0821               	movf	?___ftmul+1,w
 13557  01C2  00B1               	movwf	___fttol@f1+1
 13558  01C3  0822               	movf	?___ftmul+2,w
 13559  01C4  00B2               	movwf	___fttol@f1+2
 13560  01C5  3189  214F  3181   	fcall	___fttol
 13561  01C8  0020               	movlb	0	; select bank0
 13562  01C9  0830               	movf	?___fttol,w
 13563  01CA  3E91               	addlw	145
 13564  01CB  00C0               	movwf	??_Battery_State_Machine+2
 13565  01CC  3005               	movlw	5
 13566  01CD  3D31               	addwfc	?___fttol+1,w
 13567  01CE  00C1               	movwf	??_Battery_State_Machine+3
 13568  01CF  3543               	lslf	Battery_State_Machine@z,w
 13569  01D0  3E5A               	addlw	(low (_Vref| 0))& (0+255)
 13570  01D1  0086               	movwf	6
 13571  01D2  0187               	clrf	7
 13572  01D3  0840               	movf	??_Battery_State_Machine+2,w
 13573  01D4  3FC0               	movwi [0]fsr1
 13574  01D5  0841               	movf	??_Battery_State_Machine+3,w
 13575  01D6  3FC1               	movwi [1]fsr1
 13576                           
 13577                           ;battery_charger.c: 52: if(!(Imode[z]))
 13578  01D7  0843               	movf	Battery_State_Machine@z,w
 13579  01D8  3E62               	addlw	(low (_Imode| 0))& (0+255)
 13580  01D9  0086               	movwf	6
 13581  01DA  0187               	clrf	7
 13582  01DB  0801               	movf	1,w
 13583  01DC  1D03               	btfss	3,2
 13584  01DD  2A3F               	goto	l2890
 13585                           
 13586                           ;battery_charger.c: 53: {
 13587                           ;battery_charger.c: 54: if(current[z] < Imin[z])
 13588  01DE  3543               	lslf	Battery_State_Machine@z,w
 13589  01DF  3ECC               	addlw	(low (_Imin| 0))& (0+255)
 13590  01E0  0086               	movwf	6
 13591  01E1  0187               	clrf	7
 13592  01E2  3F40               	moviw [0]fsr1
 13593  01E3  00BE               	movwf	??_Battery_State_Machine
 13594  01E4  3F41               	moviw [1]fsr1
 13595  01E5  00BF               	movwf	??_Battery_State_Machine+1
 13596  01E6  3543               	lslf	Battery_State_Machine@z,w
 13597  01E7  3EB8               	addlw	(low (_current| 0))& (0+255)
 13598  01E8  0086               	movwf	6
 13599  01E9  0187               	clrf	7
 13600  01EA  3F40               	moviw [0]fsr1
 13601  01EB  00C0               	movwf	??_Battery_State_Machine+2
 13602  01EC  3F41               	moviw [1]fsr1
 13603  01ED  00C1               	movwf	??_Battery_State_Machine+3
 13604  01EE  0841               	movf	??_Battery_State_Machine+3,w
 13605  01EF  3A80               	xorlw	128
 13606  01F0  00C2               	movwf	??_Battery_State_Machine+4
 13607  01F1  083F               	movf	??_Battery_State_Machine+1,w
 13608  01F2  3A80               	xorlw	128
 13609  01F3  0242               	subwf	??_Battery_State_Machine+4,w
 13610  01F4  1D03               	skipz
 13611  01F5  29F8               	goto	u3235
 13612  01F6  083E               	movf	??_Battery_State_Machine,w
 13613  01F7  0240               	subwf	??_Battery_State_Machine+2,w
 13614  01F8                     u3235:	
 13615  01F8  1803               	skipnc
 13616  01F9  2A25               	goto	l2886
 13617                           
 13618                           ;battery_charger.c: 55: {
 13619                           ;battery_charger.c: 56: IminCount[z]-=2;
 13620  01FA  0020               	movlb	0	; select bank0
 13621  01FB  3543               	lslf	Battery_State_Machine@z,w
 13622  01FC  3EC8               	addlw	(low (_IminCount| 0))& (0+255)
 13623  01FD  0086               	movwf	6
 13624  01FE  0187               	clrf	7
 13625  01FF  3002               	movlw	2
 13626  0200  0281               	subwf	1,f
 13627  0201  3141               	addfsr 1,1
 13628  0202  3000               	movlw	0
 13629  0203  3B81               	subwfb	1,f
 13630  0204  317F               	addfsr 1,-1
 13631                           
 13632                           ;battery_charger.c: 57: if(IminCount[z]<10)
 13633  0205  3543               	lslf	Battery_State_Machine@z,w
 13634  0206  3EC8               	addlw	(low (_IminCount| 0))& (0+255)
 13635  0207  0086               	movwf	6
 13636  0208  0187               	clrf	7
 13637  0209  3F40               	moviw [0]fsr1
 13638  020A  00BE               	movwf	??_Battery_State_Machine
 13639  020B  3F41               	moviw [1]fsr1
 13640  020C  00BF               	movwf	??_Battery_State_Machine+1
 13641  020D  3000               	movlw	0
 13642  020E  023F               	subwf	??_Battery_State_Machine+1,w
 13643  020F  300A               	movlw	10
 13644  0210  1903               	skipnz
 13645  0211  023E               	subwf	??_Battery_State_Machine,w
 13646  0212  1803               	skipnc
 13647  0213  0008               	return
 13648                           
 13649                           ;battery_charger.c: 58: {
 13650                           ;battery_charger.c: 59: batteryState[z] = FLOAT;
 13651  0214  3005               	movlw	5
 13652  0215  00BE               	movwf	??_Battery_State_Machine
 13653  0216  0843               	movf	Battery_State_Machine@z,w
 13654  0217  3E64               	addlw	(low (_batteryState| 0))& (0+255)
 13655  0218  0086               	movwf	6
 13656  0219  0187               	clrf	7
 13657  021A  083E               	movf	??_Battery_State_Machine,w
 13658  021B  0081               	movwf	1
 13659                           
 13660                           ;battery_charger.c: 60: IminCount[z]=10;
 13661  021C  3543               	lslf	Battery_State_Machine@z,w
 13662  021D  3EC8               	addlw	(low (_IminCount| 0))& (0+255)
 13663  021E  0086               	movwf	6
 13664  021F  0187               	clrf	7
 13665  0220  300A               	movlw	10
 13666  0221  3FC0               	movwi [0]fsr1
 13667  0222  3000               	movlw	0
 13668  0223  3FC1               	movwi [1]fsr1
 13669                           
 13670                           ;battery_charger.c: 61: }
 13671                           ;battery_charger.c: 62: }
 13672  0224  0008               	return
 13673  0225                     l2886:	
 13674                           
 13675                           ;battery_charger.c: 63: else
 13676                           ;battery_charger.c: 64: {
 13677                           ;battery_charger.c: 65: if(IminCount[z]<60)IminCount[z]+=1;
 13678  0225  0020               	movlb	0	; select bank0
 13679  0226  3543               	lslf	Battery_State_Machine@z,w
 13680  0227  3EC8               	addlw	(low (_IminCount| 0))& (0+255)
 13681  0228  0086               	movwf	6
 13682  0229  0187               	clrf	7
 13683  022A  3F40               	moviw [0]fsr1
 13684  022B  00BE               	movwf	??_Battery_State_Machine
 13685  022C  3F41               	moviw [1]fsr1
 13686  022D  00BF               	movwf	??_Battery_State_Machine+1
 13687  022E  3000               	movlw	0
 13688  022F  023F               	subwf	??_Battery_State_Machine+1,w
 13689  0230  303C               	movlw	60
 13690  0231  1903               	skipnz
 13691  0232  023E               	subwf	??_Battery_State_Machine,w
 13692  0233  1803               	skipnc
 13693  0234  0008               	return
 13694  0235  3543               	lslf	Battery_State_Machine@z,w
 13695  0236  3EC8               	addlw	(low (_IminCount| 0))& (0+255)
 13696  0237  0086               	movwf	6
 13697  0238  0187               	clrf	7
 13698  0239  3001               	movlw	1
 13699  023A  0781               	addwf	1,f
 13700  023B  3141               	addfsr 1,1
 13701  023C  1803               	skipnc
 13702  023D  0A81               	incf	1,f
 13703                           
 13704                           ;battery_charger.c: 66: }
 13705                           ;battery_charger.c: 67: }
 13706  023E  0008               	return
 13707  023F                     l2890:	
 13708                           
 13709                           ;battery_charger.c: 68: else if(IminCount[z]<60)IminCount[z]+=1;
 13710  023F  3543               	lslf	Battery_State_Machine@z,w
 13711  0240  3EC8               	addlw	(low (_IminCount| 0))& (0+255)
 13712  0241  0086               	movwf	6
 13713  0242  0187               	clrf	7
 13714  0243  3F40               	moviw [0]fsr1
 13715  0244  00BE               	movwf	??_Battery_State_Machine
 13716  0245  3F41               	moviw [1]fsr1
 13717  0246  00BF               	movwf	??_Battery_State_Machine+1
 13718  0247  3000               	movlw	0
 13719  0248  023F               	subwf	??_Battery_State_Machine+1,w
 13720  0249  303C               	movlw	60
 13721  024A  1903               	skipnz
 13722  024B  023E               	subwf	??_Battery_State_Machine,w
 13723  024C  1803               	skipnc
 13724  024D  0008               	return
 13725  024E  3543               	lslf	Battery_State_Machine@z,w
 13726  024F  3EC8               	addlw	(low (_IminCount| 0))& (0+255)
 13727  0250  0086               	movwf	6
 13728  0251  0187               	clrf	7
 13729  0252  3001               	movlw	1
 13730  0253  0781               	addwf	1,f
 13731  0254  3141               	addfsr 1,1
 13732  0255  1803               	skipnc
 13733  0256  0A81               	incf	1,f
 13734                           
 13735                           ;battery_charger.c: 69: }
 13736  0257  0008               	return
 13737  0258                     l2894:	
 13738                           
 13739                           ;battery_charger.c: 70: else if(batteryState[z] == FLOAT)
 13740  0258  0843               	movf	Battery_State_Machine@z,w
 13741  0259  3E64               	addlw	(low (_batteryState| 0))& (0+255)
 13742  025A  0086               	movwf	6
 13743  025B  0187               	clrf	7
 13744  025C  3005               	movlw	5
 13745  025D  0601               	xorwf	1,w
 13746  025E  1D03               	btfss	3,2
 13747  025F  2AA6               	goto	l2902
 13748                           
 13749                           ;battery_charger.c: 71: {
 13750                           ;battery_charger.c: 72: Vref[z]=1350+(int16_t)((250-batteryTemp)*.24);
 13751  0260  096C               	comf	_batteryTemp,w
 13752  0261  00BE               	movwf	??_Battery_State_Machine
 13753  0262  096D               	comf	_batteryTemp+1,w
 13754  0263  00BF               	movwf	??_Battery_State_Machine+1
 13755  0264  0ABE               	incf	??_Battery_State_Machine,f
 13756  0265  1903               	skipnz
 13757  0266  0ABF               	incf	??_Battery_State_Machine+1,f
 13758  0267  083E               	movf	??_Battery_State_Machine,w
 13759  0268  3EFA               	addlw	250
 13760  0269  00F8               	movwf	___awtoft@c
 13761  026A  3000               	movlw	0
 13762  026B  3D3F               	addwfc	??_Battery_State_Machine+1,w
 13763  026C  00F9               	movwf	___awtoft@c+1
 13764  026D  3193  23F0  3181   	fcall	___awtoft
 13765  0270  0878               	movf	?___awtoft,w
 13766  0271  0020               	movlb	0	; select bank0
 13767  0272  00A3               	movwf	___ftmul@f2
 13768  0273  0879               	movf	?___awtoft+1,w
 13769  0274  00A4               	movwf	___ftmul@f2+1
 13770  0275  087A               	movf	?___awtoft+2,w
 13771  0276  00A5               	movwf	___ftmul@f2+2
 13772  0277  30C3               	movlw	195
 13773  0278  00A0               	movwf	___ftmul@f1
 13774  0279  3075               	movlw	117
 13775  027A  00A1               	movwf	___ftmul@f1+1
 13776  027B  303E               	movlw	62
 13777  027C  00A2               	movwf	___ftmul@f1+2
 13778  027D  318B  232F  3181   	fcall	___ftmul
 13779  0280  0020               	movlb	0	; select bank0
 13780  0281  0820               	movf	?___ftmul,w
 13781  0282  00B0               	movwf	___fttol@f1
 13782  0283  0821               	movf	?___ftmul+1,w
 13783  0284  00B1               	movwf	___fttol@f1+1
 13784  0285  0822               	movf	?___ftmul+2,w
 13785  0286  00B2               	movwf	___fttol@f1+2
 13786  0287  3189  214F         	fcall	___fttol
 13787  0289  0020               	movlb	0	; select bank0
 13788  028A  0830               	movf	?___fttol,w
 13789  028B  3E46               	addlw	70
 13790  028C  00C0               	movwf	??_Battery_State_Machine+2
 13791  028D  3005               	movlw	5
 13792  028E  3D31               	addwfc	?___fttol+1,w
 13793  028F  00C1               	movwf	??_Battery_State_Machine+3
 13794  0290  3543               	lslf	Battery_State_Machine@z,w
 13795  0291  3E5A               	addlw	(low (_Vref| 0))& (0+255)
 13796  0292  0086               	movwf	6
 13797  0293  0187               	clrf	7
 13798  0294  0840               	movf	??_Battery_State_Machine+2,w
 13799  0295  3FC0               	movwi [0]fsr1
 13800  0296  0841               	movf	??_Battery_State_Machine+3,w
 13801  0297  3FC1               	movwi [1]fsr1
 13802                           
 13803                           ;battery_charger.c: 73: Iref[z]=15;
 13804  0298  3543               	lslf	Battery_State_Machine@z,w
 13805  0299  3EC4               	addlw	(low (_Iref| 0))& (0+255)
 13806  029A  0086               	movwf	6
 13807  029B  0187               	clrf	7
 13808  029C  300F               	movlw	15
 13809  029D  3FC0               	movwi [0]fsr1
 13810  029E  3000               	movlw	0
 13811  029F  3FC1               	movwi [1]fsr1
 13812                           
 13813                           ;battery_charger.c: 74: Imode[z]=0;
 13814  02A0  0843               	movf	Battery_State_Machine@z,w
 13815  02A1  3E62               	addlw	(low (_Imode| 0))& (0+255)
 13816  02A2  0086               	movwf	6
 13817  02A3  0187               	clrf	7
 13818  02A4  0181               	clrf	1
 13819                           
 13820                           ;battery_charger.c: 75: }
 13821  02A5  0008               	return
 13822  02A6                     l2902:	
 13823                           
 13824                           ;battery_charger.c: 76: else
 13825                           ;battery_charger.c: 77: if(batteryState[z] == FAULT)
 13826  02A6  0843               	movf	Battery_State_Machine@z,w
 13827  02A7  3E64               	addlw	(low (_batteryState| 0))& (0+255)
 13828  02A8  0086               	movwf	6
 13829  02A9  0187               	clrf	7
 13830  02AA  0301               	decf	1,w
 13831  02AB  1D03               	btfss	3,2
 13832  02AC  0008               	return
 13833                           
 13834                           ;battery_charger.c: 78: {
 13835                           ;battery_charger.c: 79: batteryState[z]=PRECHARGE;
 13836  02AD  3003               	movlw	3
 13837  02AE  00BE               	movwf	??_Battery_State_Machine
 13838  02AF  0843               	movf	Battery_State_Machine@z,w
 13839  02B0  3E64               	addlw	(low (_batteryState| 0))& (0+255)
 13840  02B1  0086               	movwf	6
 13841  02B2  0187               	clrf	7
 13842  02B3  083E               	movf	??_Battery_State_Machine,w
 13843  02B4  0081               	movwf	1
 13844  02B5  0008               	return
 13845  02B6                     __end_of_Battery_State_Machine:	
 13846                           
 13847                           	psect	text39
 13848  094F                     __ptext39:	
 13849 ;; *************** function ___fttol *****************
 13850 ;; Defined at:
 13851 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
 13852 ;; Parameters:    Size  Location     Type
 13853 ;;  f1              3   16[BANK0 ] float 
 13854 ;; Auto vars:     Size  Location     Type
 13855 ;;  lval            4   25[BANK0 ] unsigned long 
 13856 ;;  exp1            1   29[BANK0 ] unsigned char 
 13857 ;;  sign1           1   24[BANK0 ] unsigned char 
 13858 ;; Return value:  Size  Location     Type
 13859 ;;                  4   16[BANK0 ] long 
 13860 ;; Registers used:
 13861 ;;		wreg, status,2, status,0
 13862 ;; Tracked objects:
 13863 ;;		On entry : 0/0
 13864 ;;		On exit  : 0/0
 13865 ;;		Unchanged: 0/0
 13866 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13867 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13868 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13869 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13870 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13871 ;;Total ram usage:       14 bytes
 13872 ;; Hardware stack levels used:    1
 13873 ;; This function calls:
 13874 ;;		Nothing
 13875 ;; This function is called by:
 13876 ;;		_tempCalc
 13877 ;;		_main
 13878 ;;		_calculateCurrent0
 13879 ;;		_calculateCurrent1
 13880 ;;		_calculateCurrent2
 13881 ;;		_calculateCurrent3
 13882 ;;		_Init_Battery_State_Machine
 13883 ;;		_Battery_State_Machine
 13884 ;;		_cc_cv_mode
 13885 ;; This function uses a non-reentrant model
 13886 ;;
 13887                           
 13888                           
 13889                           ;psect for function ___fttol
 13890  094F                     ___fttol:	
 13891                           
 13892                           ;incstack = 0
 13893                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 13894  094F  0020               	movlb	0	; select bank0
 13895  0950  0830               	movf	___fttol@f1,w
 13896  0951  00B4               	movwf	??___fttol
 13897  0952  0831               	movf	___fttol@f1+1,w
 13898  0953  00B5               	movwf	??___fttol+1
 13899  0954  0832               	movf	___fttol@f1+2,w
 13900  0955  00B6               	movwf	??___fttol+2
 13901  0956  1003               	clrc
 13902  0957  0D35               	rlf	??___fttol+1,w
 13903  0958  0D36               	rlf	??___fttol+2,w
 13904  0959  00B7               	movwf	??___fttol+3
 13905  095A  0837               	movf	??___fttol+3,w
 13906  095B  00BD               	movwf	___fttol@exp1
 13907  095C  083D               	movf	___fttol@exp1,w
 13908  095D  1D03               	btfss	3,2
 13909  095E  2968               	goto	l2426
 13910  095F  3000               	movlw	0
 13911  0960  00B3               	movwf	?___fttol+3
 13912  0961  3000               	movlw	0
 13913  0962  00B2               	movwf	?___fttol+2
 13914  0963  3000               	movlw	0
 13915  0964  00B1               	movwf	?___fttol+1
 13916  0965  3000               	movlw	0
 13917  0966  00B0               	movwf	?___fttol
 13918  0967  0008               	return
 13919  0968                     l2426:	
 13920  0968  0830               	movf	___fttol@f1,w
 13921  0969  00B4               	movwf	??___fttol
 13922  096A  0831               	movf	___fttol@f1+1,w
 13923  096B  00B5               	movwf	??___fttol+1
 13924  096C  0832               	movf	___fttol@f1+2,w
 13925  096D  00B6               	movwf	??___fttol+2
 13926  096E  3017               	movlw	23
 13927  096F                     u2575:	
 13928  096F  36B6               	lsrf	??___fttol+2,f
 13929  0970  0CB5               	rrf	??___fttol+1,f
 13930  0971  0CB4               	rrf	??___fttol,f
 13931  0972  0B89               	decfsz	9,f
 13932  0973  296F               	goto	u2575
 13933  0974  0834               	movf	??___fttol,w
 13934  0975  00B7               	movwf	??___fttol+3
 13935  0976  0837               	movf	??___fttol+3,w
 13936  0977  00B8               	movwf	___fttol@sign1
 13937  0978  17B1               	bsf	___fttol@f1+1,7
 13938  0979  30FF               	movlw	255
 13939  097A  05B0               	andwf	___fttol@f1,f
 13940  097B  30FF               	movlw	255
 13941  097C  05B1               	andwf	___fttol@f1+1,f
 13942  097D  3000               	movlw	0
 13943  097E  05B2               	andwf	___fttol@f1+2,f
 13944  097F  0830               	movf	___fttol@f1,w
 13945  0980  00B9               	movwf	___fttol@lval
 13946  0981  0831               	movf	___fttol@f1+1,w
 13947  0982  00BA               	movwf	___fttol@lval+1
 13948  0983  0832               	movf	___fttol@f1+2,w
 13949  0984  00BB               	movwf	___fttol@lval+2
 13950  0985  01BC               	clrf	___fttol@lval+3
 13951  0986  308E               	movlw	142
 13952  0987  02BD               	subwf	___fttol@exp1,f
 13953  0988  1FBD               	btfss	___fttol@exp1,7
 13954  0989  29A6               	goto	l2446
 13955  098A  083D               	movf	___fttol@exp1,w
 13956  098B  3A80               	xorlw	128
 13957  098C  3E8F               	addlw	143
 13958  098D  1803               	skipnc
 13959  098E  2998               	goto	l2444
 13960  098F  3000               	movlw	0
 13961  0990  00B3               	movwf	?___fttol+3
 13962  0991  3000               	movlw	0
 13963  0992  00B2               	movwf	?___fttol+2
 13964  0993  3000               	movlw	0
 13965  0994  00B1               	movwf	?___fttol+1
 13966  0995  3000               	movlw	0
 13967  0996  00B0               	movwf	?___fttol
 13968  0997  0008               	return
 13969  0998                     l2444:	
 13970  0998  3001               	movlw	1
 13971  0999                     u2605:	
 13972  0999  36BC               	lsrf	___fttol@lval+3,f
 13973  099A  0CBB               	rrf	___fttol@lval+2,f
 13974  099B  0CBA               	rrf	___fttol@lval+1,f
 13975  099C  0CB9               	rrf	___fttol@lval,f
 13976  099D  0B89               	decfsz	9,f
 13977  099E  2999               	goto	u2605
 13978  099F  3001               	movlw	1
 13979  09A0  00B4               	movwf	??___fttol
 13980  09A1  0834               	movf	??___fttol,w
 13981  09A2  07BD               	addwf	___fttol@exp1,f
 13982  09A3  1903               	btfsc	3,2
 13983  09A4  29BF               	goto	l2454
 13984  09A5  2998               	goto	l2444
 13985  09A6                     l2446:	
 13986  09A6  3018               	movlw	24
 13987  09A7  023D               	subwf	___fttol@exp1,w
 13988  09A8  1C03               	skipc
 13989  09A9  29BC               	goto	l834
 13990  09AA  3000               	movlw	0
 13991  09AB  00B3               	movwf	?___fttol+3
 13992  09AC  3000               	movlw	0
 13993  09AD  00B2               	movwf	?___fttol+2
 13994  09AE  3000               	movlw	0
 13995  09AF  00B1               	movwf	?___fttol+1
 13996  09B0  3000               	movlw	0
 13997  09B1  00B0               	movwf	?___fttol
 13998  09B2  0008               	return
 13999  09B3                     l2452:	
 14000  09B3  3001               	movlw	1
 14001  09B4                     u2635:	
 14002  09B4  35B9               	lslf	___fttol@lval,f
 14003  09B5  0DBA               	rlf	___fttol@lval+1,f
 14004  09B6  0DBB               	rlf	___fttol@lval+2,f
 14005  09B7  0DBC               	rlf	___fttol@lval+3,f
 14006  09B8  0B89               	decfsz	9,f
 14007  09B9  29B4               	goto	u2635
 14008  09BA  3001               	movlw	1
 14009  09BB  02BD               	subwf	___fttol@exp1,f
 14010  09BC                     l834:	
 14011  09BC  083D               	movf	___fttol@exp1,w
 14012  09BD  1D03               	btfss	3,2
 14013  09BE  29B3               	goto	l2452
 14014  09BF                     l2454:	
 14015  09BF  0838               	movf	___fttol@sign1,w
 14016  09C0  1903               	btfsc	3,2
 14017  09C1  29CD               	goto	l2458
 14018  09C2  09B9               	comf	___fttol@lval,f
 14019  09C3  09BA               	comf	___fttol@lval+1,f
 14020  09C4  09BB               	comf	___fttol@lval+2,f
 14021  09C5  09BC               	comf	___fttol@lval+3,f
 14022  09C6  0AB9               	incf	___fttol@lval,f
 14023  09C7  1903               	skipnz
 14024  09C8  0ABA               	incf	___fttol@lval+1,f
 14025  09C9  1903               	skipnz
 14026  09CA  0ABB               	incf	___fttol@lval+2,f
 14027  09CB  1903               	skipnz
 14028  09CC  0ABC               	incf	___fttol@lval+3,f
 14029  09CD                     l2458:	
 14030  09CD  083C               	movf	___fttol@lval+3,w
 14031  09CE  00B3               	movwf	?___fttol+3
 14032  09CF  083B               	movf	___fttol@lval+2,w
 14033  09D0  00B2               	movwf	?___fttol+2
 14034  09D1  083A               	movf	___fttol@lval+1,w
 14035  09D2  00B1               	movwf	?___fttol+1
 14036  09D3  0839               	movf	___fttol@lval,w
 14037  09D4  00B0               	movwf	?___fttol
 14038  09D5  0008               	return
 14039  09D6                     __end_of___fttol:	
 14040                           
 14041                           	psect	text40
 14042  0B2F                     __ptext40:	
 14043 ;; *************** function ___ftmul *****************
 14044 ;; Defined at:
 14045 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
 14046 ;; Parameters:    Size  Location     Type
 14047 ;;  f1              3    0[BANK0 ] float 
 14048 ;;  f2              3    3[BANK0 ] float 
 14049 ;; Auto vars:     Size  Location     Type
 14050 ;;  f3_as_produc    3   11[BANK0 ] unsigned um
 14051 ;;  sign            1   15[BANK0 ] unsigned char 
 14052 ;;  cntr            1   14[BANK0 ] unsigned char 
 14053 ;;  exp             1   10[BANK0 ] unsigned char 
 14054 ;; Return value:  Size  Location     Type
 14055 ;;                  3    0[BANK0 ] float 
 14056 ;; Registers used:
 14057 ;;		wreg, status,2, status,0, pclath, cstack
 14058 ;; Tracked objects:
 14059 ;;		On entry : 0/0
 14060 ;;		On exit  : 0/0
 14061 ;;		Unchanged: 0/0
 14062 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14063 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14064 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14065 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14066 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14067 ;;Total ram usage:       16 bytes
 14068 ;; Hardware stack levels used:    1
 14069 ;; Hardware stack levels required when called:    1
 14070 ;; This function calls:
 14071 ;;		___ftpack
 14072 ;; This function is called by:
 14073 ;;		_Init_Battery_State_Machine
 14074 ;;		_Battery_State_Machine
 14075 ;;		_cc_cv_mode
 14076 ;;		_tempCalc
 14077 ;;		_log
 14078 ;;		_eval_poly
 14079 ;; This function uses a non-reentrant model
 14080 ;;
 14081                           
 14082                           
 14083                           ;psect for function ___ftmul
 14084  0B2F                     ___ftmul:	
 14085                           
 14086                           ;incstack = 0
 14087                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 14088  0B2F  0020               	movlb	0	; select bank0
 14089  0B30  0820               	movf	___ftmul@f1,w
 14090  0B31  00A6               	movwf	??___ftmul
 14091  0B32  0821               	movf	___ftmul@f1+1,w
 14092  0B33  00A7               	movwf	??___ftmul+1
 14093  0B34  0822               	movf	___ftmul@f1+2,w
 14094  0B35  00A8               	movwf	??___ftmul+2
 14095  0B36  1003               	clrc
 14096  0B37  0D27               	rlf	??___ftmul+1,w
 14097  0B38  0D28               	rlf	??___ftmul+2,w
 14098  0B39  00A9               	movwf	??___ftmul+3
 14099  0B3A  0829               	movf	??___ftmul+3,w
 14100  0B3B  00AA               	movwf	___ftmul@exp
 14101  0B3C  082A               	movf	___ftmul@exp,w
 14102  0B3D  1D03               	btfss	3,2
 14103  0B3E  2B46               	goto	l2342
 14104  0B3F  3000               	movlw	0
 14105  0B40  00A0               	movwf	?___ftmul
 14106  0B41  3000               	movlw	0
 14107  0B42  00A1               	movwf	?___ftmul+1
 14108  0B43  3000               	movlw	0
 14109  0B44  00A2               	movwf	?___ftmul+2
 14110  0B45  0008               	return
 14111  0B46                     l2342:	
 14112  0B46  0823               	movf	___ftmul@f2,w
 14113  0B47  00A6               	movwf	??___ftmul
 14114  0B48  0824               	movf	___ftmul@f2+1,w
 14115  0B49  00A7               	movwf	??___ftmul+1
 14116  0B4A  0825               	movf	___ftmul@f2+2,w
 14117  0B4B  00A8               	movwf	??___ftmul+2
 14118  0B4C  1003               	clrc
 14119  0B4D  0D27               	rlf	??___ftmul+1,w
 14120  0B4E  0D28               	rlf	??___ftmul+2,w
 14121  0B4F  00A9               	movwf	??___ftmul+3
 14122  0B50  0829               	movf	??___ftmul+3,w
 14123  0B51  00AF               	movwf	___ftmul@sign
 14124  0B52  082F               	movf	___ftmul@sign,w
 14125  0B53  1D03               	btfss	3,2
 14126  0B54  2B5C               	goto	l2348
 14127  0B55  3000               	movlw	0
 14128  0B56  00A0               	movwf	?___ftmul
 14129  0B57  3000               	movlw	0
 14130  0B58  00A1               	movwf	?___ftmul+1
 14131  0B59  3000               	movlw	0
 14132  0B5A  00A2               	movwf	?___ftmul+2
 14133  0B5B  0008               	return
 14134  0B5C                     l2348:	
 14135  0B5C  082F               	movf	___ftmul@sign,w
 14136  0B5D  3E7B               	addlw	123
 14137  0B5E  00A6               	movwf	??___ftmul
 14138  0B5F  0826               	movf	??___ftmul,w
 14139  0B60  07AA               	addwf	___ftmul@exp,f
 14140  0B61  0820               	movf	___ftmul@f1,w
 14141  0B62  00A6               	movwf	??___ftmul
 14142  0B63  0821               	movf	___ftmul@f1+1,w
 14143  0B64  00A7               	movwf	??___ftmul+1
 14144  0B65  0822               	movf	___ftmul@f1+2,w
 14145  0B66  00A8               	movwf	??___ftmul+2
 14146  0B67  3010               	movlw	16
 14147  0B68                     u2425:	
 14148  0B68  36A8               	lsrf	??___ftmul+2,f
 14149  0B69  0CA7               	rrf	??___ftmul+1,f
 14150  0B6A  0CA6               	rrf	??___ftmul,f
 14151  0B6B  0B89               	decfsz	9,f
 14152  0B6C  2B68               	goto	u2425
 14153  0B6D  0826               	movf	??___ftmul,w
 14154  0B6E  00A9               	movwf	??___ftmul+3
 14155  0B6F  0829               	movf	??___ftmul+3,w
 14156  0B70  00AF               	movwf	___ftmul@sign
 14157  0B71  0823               	movf	___ftmul@f2,w
 14158  0B72  00A6               	movwf	??___ftmul
 14159  0B73  0824               	movf	___ftmul@f2+1,w
 14160  0B74  00A7               	movwf	??___ftmul+1
 14161  0B75  0825               	movf	___ftmul@f2+2,w
 14162  0B76  00A8               	movwf	??___ftmul+2
 14163  0B77  3010               	movlw	16
 14164  0B78                     u2435:	
 14165  0B78  36A8               	lsrf	??___ftmul+2,f
 14166  0B79  0CA7               	rrf	??___ftmul+1,f
 14167  0B7A  0CA6               	rrf	??___ftmul,f
 14168  0B7B  0B89               	decfsz	9,f
 14169  0B7C  2B78               	goto	u2435
 14170  0B7D  0826               	movf	??___ftmul,w
 14171  0B7E  00A9               	movwf	??___ftmul+3
 14172  0B7F  0829               	movf	??___ftmul+3,w
 14173  0B80  06AF               	xorwf	___ftmul@sign,f
 14174  0B81  3080               	movlw	128
 14175  0B82  00A6               	movwf	??___ftmul
 14176  0B83  0826               	movf	??___ftmul,w
 14177  0B84  05AF               	andwf	___ftmul@sign,f
 14178  0B85  17A1               	bsf	___ftmul@f1+1,7
 14179  0B86  17A4               	bsf	___ftmul@f2+1,7
 14180  0B87  30FF               	movlw	255
 14181  0B88  05A3               	andwf	___ftmul@f2,f
 14182  0B89  30FF               	movlw	255
 14183  0B8A  05A4               	andwf	___ftmul@f2+1,f
 14184  0B8B  3000               	movlw	0
 14185  0B8C  05A5               	andwf	___ftmul@f2+2,f
 14186  0B8D  3000               	movlw	0
 14187  0B8E  00AB               	movwf	___ftmul@f3_as_product
 14188  0B8F  3000               	movlw	0
 14189  0B90  00AC               	movwf	___ftmul@f3_as_product+1
 14190  0B91  3000               	movlw	0
 14191  0B92  00AD               	movwf	___ftmul@f3_as_product+2
 14192  0B93  3007               	movlw	7
 14193  0B94  00A6               	movwf	??___ftmul
 14194  0B95  0826               	movf	??___ftmul,w
 14195  0B96  00AE               	movwf	___ftmul@cntr
 14196  0B97                     l2360:	
 14197  0B97  1C20               	btfss	___ftmul@f1,0
 14198  0B98  2B9F               	goto	l2364
 14199  0B99  0823               	movf	___ftmul@f2,w
 14200  0B9A  07AB               	addwf	___ftmul@f3_as_product,f
 14201  0B9B  0824               	movf	___ftmul@f2+1,w
 14202  0B9C  3DAC               	addwfc	___ftmul@f3_as_product+1,f
 14203  0B9D  0825               	movf	___ftmul@f2+2,w
 14204  0B9E  3DAD               	addwfc	___ftmul@f3_as_product+2,f
 14205  0B9F                     l2364:	
 14206  0B9F  3001               	movlw	1
 14207  0BA0                     u2455:	
 14208  0BA0  36A2               	lsrf	___ftmul@f1+2,f
 14209  0BA1  0CA1               	rrf	___ftmul@f1+1,f
 14210  0BA2  0CA0               	rrf	___ftmul@f1,f
 14211  0BA3  0B89               	decfsz	9,f
 14212  0BA4  2BA0               	goto	u2455
 14213  0BA5  3001               	movlw	1
 14214  0BA6                     u2465:	
 14215  0BA6  35A3               	lslf	___ftmul@f2,f
 14216  0BA7  0DA4               	rlf	___ftmul@f2+1,f
 14217  0BA8  0DA5               	rlf	___ftmul@f2+2,f
 14218  0BA9  0B89               	decfsz	9,f
 14219  0BAA  2BA6               	goto	u2465
 14220  0BAB  3001               	movlw	1
 14221  0BAC  02AE               	subwf	___ftmul@cntr,f
 14222  0BAD  1D03               	btfss	3,2
 14223  0BAE  2B97               	goto	l2360
 14224  0BAF  3009               	movlw	9
 14225  0BB0  00A6               	movwf	??___ftmul
 14226  0BB1  0826               	movf	??___ftmul,w
 14227  0BB2  00AE               	movwf	___ftmul@cntr
 14228  0BB3                     l2372:	
 14229  0BB3  1C20               	btfss	___ftmul@f1,0
 14230  0BB4  2BBB               	goto	l2376
 14231  0BB5  0823               	movf	___ftmul@f2,w
 14232  0BB6  07AB               	addwf	___ftmul@f3_as_product,f
 14233  0BB7  0824               	movf	___ftmul@f2+1,w
 14234  0BB8  3DAC               	addwfc	___ftmul@f3_as_product+1,f
 14235  0BB9  0825               	movf	___ftmul@f2+2,w
 14236  0BBA  3DAD               	addwfc	___ftmul@f3_as_product+2,f
 14237  0BBB                     l2376:	
 14238  0BBB  3001               	movlw	1
 14239  0BBC                     u2495:	
 14240  0BBC  36A2               	lsrf	___ftmul@f1+2,f
 14241  0BBD  0CA1               	rrf	___ftmul@f1+1,f
 14242  0BBE  0CA0               	rrf	___ftmul@f1,f
 14243  0BBF  0B89               	decfsz	9,f
 14244  0BC0  2BBC               	goto	u2495
 14245  0BC1  3001               	movlw	1
 14246  0BC2                     u2505:	
 14247  0BC2  36AD               	lsrf	___ftmul@f3_as_product+2,f
 14248  0BC3  0CAC               	rrf	___ftmul@f3_as_product+1,f
 14249  0BC4  0CAB               	rrf	___ftmul@f3_as_product,f
 14250  0BC5  0B89               	decfsz	9,f
 14251  0BC6  2BC2               	goto	u2505
 14252  0BC7  3001               	movlw	1
 14253  0BC8  02AE               	subwf	___ftmul@cntr,f
 14254  0BC9  1D03               	btfss	3,2
 14255  0BCA  2BB3               	goto	l2372
 14256  0BCB  082B               	movf	___ftmul@f3_as_product,w
 14257  0BCC  00F0               	movwf	___ftpack@arg
 14258  0BCD  082C               	movf	___ftmul@f3_as_product+1,w
 14259  0BCE  00F1               	movwf	___ftpack@arg+1
 14260  0BCF  082D               	movf	___ftmul@f3_as_product+2,w
 14261  0BD0  00F2               	movwf	___ftpack@arg+2
 14262  0BD1  082A               	movf	___ftmul@exp,w
 14263  0BD2  00A6               	movwf	??___ftmul
 14264  0BD3  0826               	movf	??___ftmul,w
 14265  0BD4  00F3               	movwf	___ftpack@exp
 14266  0BD5  082F               	movf	___ftmul@sign,w
 14267  0BD6  00A7               	movwf	??___ftmul+1
 14268  0BD7  0827               	movf	??___ftmul+1,w
 14269  0BD8  00F4               	movwf	___ftpack@sign
 14270  0BD9  3197  279C         	fcall	___ftpack
 14271  0BDB  0870               	movf	?___ftpack,w
 14272  0BDC  0020               	movlb	0	; select bank0
 14273  0BDD  00A0               	movwf	?___ftmul
 14274  0BDE  0871               	movf	?___ftpack+1,w
 14275  0BDF  00A1               	movwf	?___ftmul+1
 14276  0BE0  0872               	movf	?___ftpack+2,w
 14277  0BE1  00A2               	movwf	?___ftmul+2
 14278  0BE2  0008               	return
 14279  0BE3                     __end_of___ftmul:	
 14280                           
 14281                           	psect	text41
 14282  13F0                     __ptext41:	
 14283 ;; *************** function ___awtoft *****************
 14284 ;; Defined at:
 14285 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
 14286 ;; Parameters:    Size  Location     Type
 14287 ;;  c               2    8[COMMON] int 
 14288 ;; Auto vars:     Size  Location     Type
 14289 ;;  sign            1   13[COMMON] unsigned char 
 14290 ;; Return value:  Size  Location     Type
 14291 ;;                  3    8[COMMON] float 
 14292 ;; Registers used:
 14293 ;;		wreg, status,2, status,0, pclath, cstack
 14294 ;; Tracked objects:
 14295 ;;		On entry : 0/0
 14296 ;;		On exit  : 0/0
 14297 ;;		Unchanged: 0/0
 14298 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14299 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14300 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14301 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14302 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14303 ;;Total ram usage:        6 bytes
 14304 ;; Hardware stack levels used:    1
 14305 ;; Hardware stack levels required when called:    1
 14306 ;; This function calls:
 14307 ;;		___ftpack
 14308 ;; This function is called by:
 14309 ;;		_Init_Battery_State_Machine
 14310 ;;		_Battery_State_Machine
 14311 ;;		_cc_cv_mode
 14312 ;;		_tempCalc
 14313 ;;		_main
 14314 ;;		_calculateCurrent0
 14315 ;;		_calculateCurrent1
 14316 ;;		_calculateCurrent2
 14317 ;;		_calculateCurrent3
 14318 ;;		_log
 14319 ;; This function uses a non-reentrant model
 14320 ;;
 14321                           
 14322                           
 14323                           ;psect for function ___awtoft
 14324  13F0                     ___awtoft:	
 14325                           
 14326                           ;incstack = 0
 14327                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 14328  13F0  01FD               	clrf	___awtoft@sign
 14329  13F1  1FF9               	btfss	___awtoft@c+1,7
 14330  13F2  2BFA               	goto	l2396
 14331  13F3  09F8               	comf	___awtoft@c,f
 14332  13F4  09F9               	comf	___awtoft@c+1,f
 14333  13F5  0AF8               	incf	___awtoft@c,f
 14334  13F6  1903               	skipnz
 14335  13F7  0AF9               	incf	___awtoft@c+1,f
 14336  13F8  01FD               	clrf	___awtoft@sign
 14337  13F9  0AFD               	incf	___awtoft@sign,f
 14338  13FA                     l2396:	
 14339  13FA  0878               	movf	___awtoft@c,w
 14340  13FB  00F0               	movwf	___ftpack@arg
 14341  13FC  0879               	movf	___awtoft@c+1,w
 14342  13FD  00F1               	movwf	___ftpack@arg+1
 14343  13FE  01F2               	clrf	___ftpack@arg+2
 14344  13FF  308E               	movlw	142
 14345  1400  00FB               	movwf	??___awtoft
 14346  1401  087B               	movf	??___awtoft,w
 14347  1402  00F3               	movwf	___ftpack@exp
 14348  1403  087D               	movf	___awtoft@sign,w
 14349  1404  00FC               	movwf	??___awtoft+1
 14350  1405  087C               	movf	??___awtoft+1,w
 14351  1406  00F4               	movwf	___ftpack@sign
 14352  1407  3197  279C         	fcall	___ftpack
 14353  1409  0870               	movf	?___ftpack,w
 14354  140A  00F8               	movwf	?___awtoft
 14355  140B  0871               	movf	?___ftpack+1,w
 14356  140C  00F9               	movwf	?___awtoft+1
 14357  140D  0872               	movf	?___ftpack+2,w
 14358  140E  00FA               	movwf	?___awtoft+2
 14359  140F  0008               	return
 14360  1410                     __end_of___awtoft:	
 14361                           
 14362                           	psect	text42
 14363  179C                     __ptext42:	
 14364 ;; *************** function ___ftpack *****************
 14365 ;; Defined at:
 14366 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
 14367 ;; Parameters:    Size  Location     Type
 14368 ;;  arg             3    0[COMMON] unsigned um
 14369 ;;  exp             1    3[COMMON] unsigned char 
 14370 ;;  sign            1    4[COMMON] unsigned char 
 14371 ;; Auto vars:     Size  Location     Type
 14372 ;;		None
 14373 ;; Return value:  Size  Location     Type
 14374 ;;                  3    0[COMMON] float 
 14375 ;; Registers used:
 14376 ;;		wreg, status,2, status,0
 14377 ;; Tracked objects:
 14378 ;;		On entry : 0/0
 14379 ;;		On exit  : 0/0
 14380 ;;		Unchanged: 0/0
 14381 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14382 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14383 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14384 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14385 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14386 ;;Total ram usage:        8 bytes
 14387 ;; Hardware stack levels used:    1
 14388 ;; This function calls:
 14389 ;;		Nothing
 14390 ;; This function is called by:
 14391 ;;		___awtoft
 14392 ;;		___ftadd
 14393 ;;		___ftdiv
 14394 ;;		___ftmul
 14395 ;; This function uses a non-reentrant model
 14396 ;;
 14397                           
 14398                           
 14399                           ;psect for function ___ftpack
 14400  179C                     ___ftpack:	
 14401                           
 14402                           ;incstack = 0
 14403                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 14404  179C  0873               	movf	___ftpack@exp,w
 14405  179D  1903               	btfsc	3,2
 14406  179E  2FA4               	goto	l2202
 14407  179F  0872               	movf	___ftpack@arg+2,w
 14408  17A0  0471               	iorwf	___ftpack@arg+1,w
 14409  17A1  0470               	iorwf	___ftpack@arg,w
 14410  17A2  1D03               	skipz
 14411  17A3  2FB5               	goto	l2208
 14412  17A4                     l2202:	
 14413  17A4  3000               	movlw	0
 14414  17A5  00F0               	movwf	?___ftpack
 14415  17A6  3000               	movlw	0
 14416  17A7  00F1               	movwf	?___ftpack+1
 14417  17A8  3000               	movlw	0
 14418  17A9  00F2               	movwf	?___ftpack+2
 14419  17AA  0008               	return
 14420  17AB                     l2206:	
 14421  17AB  3001               	movlw	1
 14422  17AC  00F5               	movwf	??___ftpack
 14423  17AD  0875               	movf	??___ftpack,w
 14424  17AE  07F3               	addwf	___ftpack@exp,f
 14425  17AF  3001               	movlw	1
 14426  17B0                     u1995:	
 14427  17B0  36F2               	lsrf	___ftpack@arg+2,f
 14428  17B1  0CF1               	rrf	___ftpack@arg+1,f
 14429  17B2  0CF0               	rrf	___ftpack@arg,f
 14430  17B3  0B89               	decfsz	9,f
 14431  17B4  2FB0               	goto	u1995
 14432  17B5                     l2208:	
 14433  17B5  30FE               	movlw	254
 14434  17B6  0572               	andwf	___ftpack@arg+2,w
 14435  17B7  1903               	btfsc	3,2
 14436  17B8  2FCE               	goto	l743
 14437  17B9  2FAB               	goto	l2206
 14438  17BA                     l2210:	
 14439  17BA  3001               	movlw	1
 14440  17BB  00F5               	movwf	??___ftpack
 14441  17BC  0875               	movf	??___ftpack,w
 14442  17BD  07F3               	addwf	___ftpack@exp,f
 14443  17BE  3001               	movlw	1
 14444  17BF  07F0               	addwf	___ftpack@arg,f
 14445  17C0  3000               	movlw	0
 14446  17C1  1803               	skipnc
 14447  17C2  3001               	movlw	1
 14448  17C3  07F1               	addwf	___ftpack@arg+1,f
 14449  17C4  3000               	movlw	0
 14450  17C5  1803               	skipnc
 14451  17C6  3001               	movlw	1
 14452  17C7  07F2               	addwf	___ftpack@arg+2,f
 14453  17C8  3001               	movlw	1
 14454  17C9                     u2015:	
 14455  17C9  36F2               	lsrf	___ftpack@arg+2,f
 14456  17CA  0CF1               	rrf	___ftpack@arg+1,f
 14457  17CB  0CF0               	rrf	___ftpack@arg,f
 14458  17CC  0B89               	decfsz	9,f
 14459  17CD  2FC9               	goto	u2015
 14460  17CE                     l743:	
 14461  17CE  30FF               	movlw	255
 14462  17CF  0572               	andwf	___ftpack@arg+2,w
 14463  17D0  1903               	btfsc	3,2
 14464  17D1  2FDB               	goto	l2218
 14465  17D2  2FBA               	goto	l2210
 14466  17D3                     l2216:	
 14467  17D3  3001               	movlw	1
 14468  17D4  02F3               	subwf	___ftpack@exp,f
 14469  17D5  3001               	movlw	1
 14470  17D6                     u2035:	
 14471  17D6  35F0               	lslf	___ftpack@arg,f
 14472  17D7  0DF1               	rlf	___ftpack@arg+1,f
 14473  17D8  0DF2               	rlf	___ftpack@arg+2,f
 14474  17D9  0B89               	decfsz	9,f
 14475  17DA  2FD6               	goto	u2035
 14476  17DB                     l2218:	
 14477  17DB  1BF1               	btfsc	___ftpack@arg+1,7
 14478  17DC  2FE1               	goto	l750
 14479  17DD  3002               	movlw	2
 14480  17DE  0273               	subwf	___ftpack@exp,w
 14481  17DF  1803               	skipnc
 14482  17E0  2FD3               	goto	l2216
 14483  17E1                     l750:	
 14484  17E1  1873               	btfsc	___ftpack@exp,0
 14485  17E2  2FE9               	goto	l751
 14486  17E3  30FF               	movlw	255
 14487  17E4  05F0               	andwf	___ftpack@arg,f
 14488  17E5  307F               	movlw	127
 14489  17E6  05F1               	andwf	___ftpack@arg+1,f
 14490  17E7  30FF               	movlw	255
 14491  17E8  05F2               	andwf	___ftpack@arg+2,f
 14492  17E9                     l751:	
 14493  17E9  1003               	clrc
 14494  17EA  0CF3               	rrf	___ftpack@exp,f
 14495  17EB  0873               	movf	___ftpack@exp,w
 14496  17EC  00F5               	movwf	??___ftpack
 14497  17ED  01F6               	clrf	??___ftpack+1
 14498  17EE  01F7               	clrf	??___ftpack+2
 14499  17EF  3010               	movlw	16
 14500  17F0                     u2075:	
 14501  17F0  35F5               	lslf	??___ftpack,f
 14502  17F1  0DF6               	rlf	??___ftpack+1,f
 14503  17F2  0DF7               	rlf	??___ftpack+2,f
 14504  17F3  0B89               	decfsz	9,f
 14505  17F4  2FF0               	goto	u2075
 14506  17F5  0875               	movf	??___ftpack,w
 14507  17F6  04F0               	iorwf	___ftpack@arg,f
 14508  17F7  0876               	movf	??___ftpack+1,w
 14509  17F8  04F1               	iorwf	___ftpack@arg+1,f
 14510  17F9  0877               	movf	??___ftpack+2,w
 14511  17FA  04F2               	iorwf	___ftpack@arg+2,f
 14512  17FB  0874               	movf	___ftpack@sign,w
 14513  17FC  1903               	btfsc	3,2
 14514  17FD  0008               	return
 14515  17FE  17F2               	bsf	___ftpack@arg+2,7
 14516  17FF  0008               	return
 14517  1800                     __end_of___ftpack:	
 14518  007E                     btemp	set	126	;btemp
 14519  007E                     wtemp0	set	126


Data Sizes:
    Strings     14
    Constant    330
    Data        10
    BSS         93
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     58      78
    BANK1            80     23      77
    BANK2            80      0      29
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            48      0       0
    BANK8             0      0       0
    BANK9             0      0       0
    BANK10            0      0       0
    BANK11            0      0       0
    BANK12            0      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> log@exponent(BANK0[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 27
		 -> log@coeff(CODE[27]), 

    LCDWriteString@characters	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_3(CODE[5]), STR_2(CODE[5]), STR_1(CODE[4]), 


Critical Paths under _main in COMMON

    _main->_LCDWriteString
    _main->___awtoft
    _tempCalc->___awtoft
    _log->___awtoft
    ___ftadd->___awtoft
    _readIAnalog->___aldiv
    _readButton->_ADCRead
    _cc_cv_mode->___awtoft
    _calculateCurrent3->___awtoft
    _calculateCurrent2->___awtoft
    _calculateCurrent1->___awtoft
    _calculateCurrent0->___awtoft
    ___ftdiv->___awtoft
    _LCDInit->_LCDWrite
    _LCDClear->_gotoXY
    _gotoXY->_LCDWrite
    _Init_Battery_State_Machine->___awtoft
    _LCDWriteString->_LCDWriteCharacter
    _LCDWriteInt->_LCDWriteCharacter
    _LCDWriteCharacter->___wmul
    _Battery_State_Machine->___awtoft
    ___fttol->___awtoft
    ___ftmul->___awtoft
    ___awtoft->___ftpack

Critical Paths under _main in BANK0

    _main->_tempCalc
    _tempCalc->_log
    _log->_eval_poly
    _eval_poly->___ftadd
    ___ftsub->___ftadd
    ___ftadd->___ftdiv
    ___ftadd->___ftmul
    _readIAnalog->___aldiv
    _cc_cv_mode->___fttol
    _calculateCurrent3->___fttol
    _calculateCurrent2->___fttol
    _calculateCurrent1->___fttol
    _calculateCurrent0->___fttol
    _SYSTEM_Initialize->_Init_Battery_State_Machine
    _Init_Battery_State_Machine->___fttol
    _Battery_State_Machine->___fttol
    ___fttol->___ftdiv
    ___fttol->___ftmul

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                25    25      0  110441
                                             56 BANK0      2     2      0
                                              0 BANK1     23    23      0
                            _ADCRead
              _Battery_State_Machine
                           _LCDClear
                            _LCDInit
                  _LCDWriteCharacter
                        _LCDWriteInt
                     _LCDWriteString
                 _PWM6_LoadDutyValue
                 _PWM7_LoadDutyValue
                  _SYSTEM_Initialize
                           ___awtoft
                            ___ftdiv
                            ___fttol
                  _calculateCurrent0
                  _calculateCurrent1
                  _calculateCurrent2
                  _calculateCurrent3
                         _cc_cv_mode
                             _gotoXY
                         _readButton
                        _readIAnalog
                           _tempCalc
 ---------------------------------------------------------------------------------
 (1) _tempCalc                                            11     9      2   33648
                                             45 BANK0     11     9      2
                            _ADCRead (ARG)
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftsub
                            ___fttol
                                _log
 ---------------------------------------------------------------------------------
 (2) _log                                                  6     3      3   17068
                                             39 BANK0      6     3      3
                           ___awtoft
                            ___ftadd
                             ___ftge
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _frexp                                                6     2      4     330
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) _eval_poly                                           10     3      7    7315
                                             29 BANK0     10     3      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     322
                                              0 COMMON     9     3      6
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    3356
                                             29 BANK0      6     0      6
                            ___ftadd
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             13     7      6    3183
                                             16 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (1) _readIAnalog                                         24    22      2    1498
                                              9 COMMON     4     4      0
                                              6 BANK0     20    18      2
                            _ADCRead
                            ___aldiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     406
                                              0 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _readButton                                           2     2      0      22
                                              4 COMMON     2     2      0
                            _ADCRead
 ---------------------------------------------------------------------------------
 (2) _ADCRead                                              4     1      3      22
                                              0 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (1) _cc_cv_mode                                           8     8      0    6900
                                             30 BANK0      8     8      0
                           ___awtoft
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) _calculateCurrent3                                    3     3      0    6692
                                             30 BANK0      3     3      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) _calculateCurrent2                                    3     3      0    6692
                                             30 BANK0      3     3      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) _calculateCurrent1                                    3     3      0    6692
                                             30 BANK0      3     3      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) _calculateCurrent0                                    3     3      0    6692
                                             30 BANK0      3     3      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    3365
                                              0 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    2     2      0   10373
                                             35 BANK0      2     2      0
                     _ADC_Initialize
         _Init_Battery_State_Machine
                           _LCDClear
                            _LCDInit
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _PWM_Initialize
                    _TMR2_Initialize
                    _TMR4_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR4_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               1     1      0      23
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LCDInit                                              1     1      0     803
                                              5 COMMON     1     1      0
                           _LCDWrite
 ---------------------------------------------------------------------------------
 (2) _LCDClear                                             3     3      0    3021
                                              8 COMMON     3     3      0
                           _LCDWrite
                             _gotoXY
 ---------------------------------------------------------------------------------
 (1) _gotoXY                                               3     2      1    2172
                                              5 COMMON     3     2      1
                           _LCDWrite
 ---------------------------------------------------------------------------------
 (2) _Init_Battery_State_Machine                           5     5      0    6526
                                             30 BANK0      5     5      0
                           ___awtoft
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM7_LoadDutyValue                                   4     2      2      97
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _PWM6_LoadDutyValue                                   4     2      2      97
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _LCDWriteString                                       3     1      2    1847
                                             12 COMMON     2     0      2
                                              0 BANK0      1     1      0
                  _LCDWriteCharacter
 ---------------------------------------------------------------------------------
 (1) _LCDWriteInt                                         16    11      5    7267
                                              0 BANK0     16    11      5
                  _LCDWriteCharacter
                            ___awdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     265
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     406
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (2) _LCDWriteCharacter                                    6     6      0    1643
                                              6 COMMON     6     6      0
                           _LCDWrite
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     728
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) _LCDWrite                                             5     4      1     803
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (1) _Battery_State_Machine                                6     6      0    6966
                                             30 BANK0      6     6      0
                           ___awtoft
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             14    10      4     734
                                             16 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             16    10      6    3067
                                              0 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             6     3      3    2593
                                              8 COMMON     6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    1707
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCRead
   _Battery_State_Machine
     ___awtoft
       ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
   _LCDClear
     _LCDWrite
     _gotoXY
       _LCDWrite
   _LCDInit
     _LCDWrite
   _LCDWriteCharacter
     _LCDWrite
     ___wmul
   _LCDWriteInt
     _LCDWriteCharacter
       _LCDWrite
       ___wmul
     ___awdiv
     ___lwmod
   _LCDWriteString
     _LCDWriteCharacter
       _LCDWrite
       ___wmul
   _PWM6_LoadDutyValue
   _PWM7_LoadDutyValue
   _SYSTEM_Initialize
     _ADC_Initialize
     _Init_Battery_State_Machine
       ___awtoft
         ___ftpack
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
     _LCDClear
       _LCDWrite
       _gotoXY
         _LCDWrite
     _LCDInit
       _LCDWrite
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM_Initialize
     _TMR2_Initialize
     _TMR4_Initialize
   ___awtoft
     ___ftpack
   ___ftdiv
     ___awtoft (ARG)
       ___ftpack
     ___ftpack (ARG)
     ___ftpack (ARG)
   ___fttol
     ___awtoft (ARG)
       ___ftpack
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _frexp (ARG)
   _calculateCurrent0
     ___awtoft
       ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
   _calculateCurrent1
     ___awtoft
       ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
   _calculateCurrent2
     ___awtoft
       ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
   _calculateCurrent3
     ___awtoft
       ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
   _cc_cv_mode
     ___awtoft
       ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
   _gotoXY
     _LCDWrite
   _readButton
     _ADCRead
   _readIAnalog
     _ADCRead
     ___aldiv
     ___wmul
   _tempCalc
     _ADCRead (ARG)
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
       _frexp (ARG)
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftsub (ARG)
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
     ___fttol (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
     _log (ARG)
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       _eval_poly
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___wmul
       _frexp

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     3A      4E       5       97.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     17      4D       7       96.3%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      1D       9       36.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               30      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      C6      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BANK8                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BANK9                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BANK10               0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BANK11               0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      C6      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu Jul 12 16:19:28 2018

                       _stateCounter 00C0                                    _j 0068  
                                  _x 006B               LCDWriteInt@fieldLength 0022  
            __size_of_PWM_Initialize 0015                          __CFG_CP$OFF 0000  
                                 l60 1365                                   l57 135E  
                       ___awdiv@sign 0076                  ___wmul@multiplicand 0072  
        __size_of_PWM6_LoadDutyValue 0016                         ___ftadd@exp1 003C  
                       ___ftadd@exp2 003B                          __CFG_LVP$ON 0000  
                       ___ftadd@sign 003A                                  l220 1433  
                                l132 0F45                                  l221 1427  
                                l127 0EF1                                  l128 0F02  
                                l217 141B                                  l218 141D  
                                l219 1423                        LCDClear@index 0079  
                                l637 08DE                                  l750 17E1  
                                l582 13A0                                  l751 17E9  
                                l743 17CE                                  l834 09BC  
                                l774 00E8                                  _GIE 005F  
                                _RB2 006A                         __CFG_CPD$OFF 0000  
                                _log 0A7F                      __end_of_ADCRead 136C  
                    _TMR2_Initialize 12FF                         __CFG_BORV$LO 0000  
                                wreg 0009                      __end_of_LCDInit 14F9  
                       ?_LCDWriteInt 0020                         __CFG_ZCD$OFF 0000  
                       ___ftdiv@cntr 002A                         ___ftdiv@sign 002F  
                               l2210 17BA                                 l2202 17A4  
                               l3002 0C04                                 l3020 0C40  
                               l3012 0C0B                                 l2300 00B4  
                               l2206 17AB                                 l3030 0C52  
                               l3022 0C48                                 l3014 0C38  
                               l2302 00BE                                 l3110 02E6  
                               l2216 17D3                                 l2208 17B5  
                               l3032 0C79                                 l3024 0C4E  
                               l2312 00DA                                 l2304 00C3  
                               l2218 17DB                                 l3018 0C3C  
                               l2322 010C                                 l2314 00E4  
                               l2306 00C7                                 l3202 04A2  
                               l3130 031E                                 l3036 0C87  
                               l2332 0127                                 l2404 154A  
                               l3124 0300                                 l2342 0B46  
                               l2254 139A                                 l2318 00FA  
                               l3222 04EC                                 l3118 02FA  
                               l2360 0B97                                 l2272 0071  
                               l2408 1560                                 l3216 04D5  
                               l3136 034A                                 l2426 0968  
                               l3082 1608                                 l2282 0087  
                               l3226 04F3                                 l2372 0BB3  
                               l2364 0B9F                                 l2348 0B5C  
                               l2452 09B3                                 l2444 0998  
                               l3076 15C3                                 l2276 0078  
                               l3244 0522                                 l3172 043E  
                               l2454 09BF                                 l2446 09A6  
                               l3094 001D                                 l2294 00A1  
                               l2470 1581                                 l3190 046C  
                               l3166 0420                                 l2376 0BBB  
                               l3088 081F                                 l2704 08FF  
                               l2458 09CD                                 l2722 0946  
                               l2714 092D                                 l2706 090D  
                               l3178 0456                                 l2396 13FA  
                               l2740 1649                                 l2804 0A5D  
                               l3380 07A9                                 l3196 048A  
                               l2902 02A6                                 l2750 1651  
                               l2734 163E                                 l2830 146D  
                               l2574 1456                                 l2718 0938  
                               l2670 0A9E                                 l2752 165D  
                               l2568 1442                                 l2920 0F1D  
                               l2816 13BB                                 l2488 1732  
                               l3384 07B2                                 l2762 1678  
                               l2834 1479                                 l2828 1461  
                               l2916 0F10                                 l2676 0AB1  
                               l2870 017C                                 l2766 1680  
                               l2758 166F                                 l2838 1482  
                               l2782 0A03                                 l2950 0889  
                               l2872 0184                                 l2776 09ED  
                               l2944 086F                                 l2696 08EF  
                               l2856 0E99                                 l2890 023F  
                               l2874 0196                                 l2970 08B2  
                               l2954 089B                                 l2796 0A44  
                               l2964 08A9                                 l2956 089D  
                               l2886 0225                                 l2894 0258  
                               l2976 08CA                                 l2978 08CB  
                               l2988 132E                                 ?_log 0047  
                               STR_1 1825                                 STR_2 1820  
                               STR_3 181B                                 u2015 17C9  
                               u2035 17D6                                 u3005 0A45  
                               _LATA 0016                                 _LATB 0017  
                               u3015 0A54                                 _LATC 0018  
                               u2145 13A1                                 u3025 0A5E  
                               u2075 17F0                                 u2155 13A6  
                               u3115 0D99                                 u3205 016E  
                               u3125 0DEF                                 u2325 00C8  
                               u3135 0E29                                 u2505 0BC2  
                               u2425 0B68                                 u3065 1464  
                               u3145 0E74                                 u2265 00A2  
                               _T2PR 028D                                 u2435 0B78  
                               u3235 01F8                                 u2355 00DB  
                               u2605 0999                                 u3085 1473  
                               u3405 0869                                 u2455 0BA0  
                               u3095 147A                                 u3415 0879  
                               u3175 0EA4                                 u2295 00B5  
                               u2720 14BC                                 u2465 0BA6  
                               u2705 1440                                 u3425 0885  
                               _T4PR 0293                                 u2635 09B4  
                               u3195 015A                                 u2715 1454  
                               u3355 0F5F                                 u3435 0893  
                               u3605 15BD                                 u2495 0BBC  
                               u2575 096F                                 u3615 1602  
                               u3295 0EDD                                 u2815 090E  
                               u3625 0819                                 u3385 0FB4  
                               u2825 0922                                 u3490 0BEE  
                               u2915 165E                                 u3555 0C67  
                               u3635 0017                                 u3395 085D  
                               u2835 092E                                 u2925 1668  
                               u2935 1670                                 u3815 047B  
                               u3735 042F                                 u3585 137B  
                               u1995 17B0                                 u3595 1391  
                               u2795 0902                                 u3835 0497  
                               u3755 044B                                 u2895 1654  
                               u3695 040E                                 u2985 0A15  
                               u3865 04CE                                 u3785 0469  
                               u2995 0A25                                 u3947 02EE  
                               u3957 08BC                                 u3885 04E5  
                               u3967 151C                                 u3977 152C  
                tempCalc@analogValue 004D                                 _WPUA 0F39  
                               _WPUB 0F44                                 _WPUC 0F4F  
                               _WPUE 0F65                                 _Imin 00CC  
                               _Iref 00C4                                 _Iout 00D2  
                       __CFG_WRT$OFF 0000                        __CFG_FCMEN$ON 0000  
                               _Vref 005A                                 _main 02B6  
                       ___ftpack@arg 0070                         ___ftpack@exp 0073  
                               fsr0h 0005                                 fsr1h 0007  
                               indf0 0000                                 fsr0l 0004  
                               indf1 0001                                 fsr1l 0006  
                               btemp 007E                                 log@x 0047  
                       ?_readIAnalog 0026                        __CFG_BOREN$ON 0000  
                               start 0002                        __CFG_CSWEN$ON 0000  
                      __CFG_MCLRE$ON 0000                         ___ftmul@cntr 002E  
                       ___ftmul@sign 002F                     __end_of_LCDClear 145B  
                       ___fttol@exp1 003D                                ??_log 004A  
                       ___fttol@lval 0039  __size_of_Init_Battery_State_Machine 0063  
     __size_of_OSCILLATOR_Initialize 0009                     __end_of_LCDWrite 1435  
      __end_of_OSCILLATOR_Initialize 12F3                      __end_of___aldiv 094F  
                              _ADACQ 009D                                _ADACT 0099  
                              _ADCAP 009B                                ?_main 0070  
                              _ADCLK 0098                                _ADPCH 009E  
                              _ADREF 009A                      __end_of___awdiv 1685  
                              _ADPRE 009C                      __end_of___ftadd 013F  
                      __CFG_WDTE$OFF 0000                                _ADRPT 010D  
                    __end_of___ftdiv 0A7F                      __end_of___ftmul 0BE3  
                    ___awdiv@divisor 0070                      __end_of___ftsub 13D1  
                    __end_of___fttol 09D6                                _T2CON 028E  
                              _LATA5 00B5                                _T4CON 0294  
                              _T2HLT 028F                                _T4HLT 0295  
                              _T2TMR 028C                                _T2RST 0291  
                    __end_of___lwmod 1487                                _T4TMR 0292  
                              _T4RST 0297                      ___awdiv@counter 0075  
                              _OSCEN 0891                                _TRISA 0011  
                              _TRISB 0012                                _TRISC 0013  
                    _TMR4_Initialize 130D                                _Imode 0062  
             ?_Battery_State_Machine 0070                                _cc_cv 00D4  
                      ___awtoft@sign 007D                                _frexp 156F  
                              _fonts 1000                                _errno 00D0  
                      ___ftpack@sign 0074                                main@j 00E8  
                       main@slowLoop 00E1                                status 0003  
                              wtemp0 007E                      __initialization 07B5  
                        log@exponent 004B                         __end_of_main 07B5  
            __end_of_TMR2_Initialize 130D                            ??_ADCRead 0073  
                             ??_main 0058                        ___fttol@sign1 0038  
                          ??_LCDInit 0075               Battery_State_Machine@z 0043  
            LCDWrite@data_or_command 0072                               _ADCON0 0093  
                             _ADCON1 0094                               _ADCON2 0095  
                             _ADCON3 0096                               ?_frexp 0070  
                             _ADLTHH 010F                               _ADLTHL 010E  
                             _ADRESH 008D                               _ADRESL 008C  
                             _ADSTAT 0097                               _ADUTHH 0111  
                   ___awdiv@dividend 0072                               _ADUTHL 0110  
                   __end_of___awtoft 1410                               _ANSELA 0F38  
                             _ANSELB 0F43                               _ANSELC 0F4E  
                   __end_of___ftpack 1800                               _RB0PPS 0F18  
                             _RA6PPS 0F16                               _RA7PPS 0F17  
                     __CFG_WDTCCS$SC 0000                               _FVRCON 090C  
                             _OSCFRQ 0893                       __CFG_PWRTE$OFF 0000  
                     _LCDWriteString 132E                         _CCPTMRS1bits 021F  
                             ___ftge 1534                            ??___aldiv 0078  
                             ___wmul 1398                            ??___awdiv 0074  
                          ??___ftadd 0036                       __CFG_STVREN$ON 0000  
                     _PWM_Initialize 1342                            ??___ftdiv 0026  
                          ??___ftmul 0026                            ??___ftsub 007E  
                          ??___fttol 0034                            ??___lwmod 0074  
                             _gotoXY 131B                               _button 006A  
            __end_of_TMR4_Initialize 131B                     ___awdiv@quotient 0077  
                             _totals 0120                ___ftmul@f3_as_product 002B  
                   __end_of_tempCalc 0D83                         LCDWrite@data 0070  
                       LCDWriteInt@i 002F                         LCDWriteInt@j 002E  
                          ?_LCDClear 0070                    _SYSTEM_Initialize 14F9  
               __size_of_LCDWriteInt 00B9                     __end_oflog@coeff 181B  
            __end_of__initialization 07FD                           ___ftadd@f1 0030  
                         ___ftadd@f2 0033                           ___ftge@ff1 0070  
                         ___ftge@ff2 0073                            ?_LCDWrite 0070  
                 ?_SYSTEM_Initialize 0070               __end_of_LCDWriteString 1342  
                       eval_poly@res 0044                           ___ftdiv@f1 0023  
                         ___ftdiv@f2 0020                           ___ftdiv@f3 002B  
                         ___awtoft@c 0078                           ___ftmul@f1 0020  
                         ___ftmul@f2 0023               __end_of_PWM_Initialize 1357  
               __size_of_readIAnalog 013E                           ___ftsub@f1 0040  
                         ___ftsub@f2 003D                           ___fttol@f1 0030  
                     __pcstackCOMMON 0070                         __pidataBANK0 0804  
                       __pidataBANK2 12E2                  ??_SYSTEM_Initialize 0043  
                      __end_of_frexp 15AA                        __end_of_fonts 112F  
                          LCDWrite@d 0073                            LCDWrite@i 0074  
                   ?_TMR2_Initialize 0070                           _cc_cv_mode 0EC1  
        __size_of_PWM7_LoadDutyValue 0016                       main@efficiency 00D6  
                  LCDWriteInt@F14388 0130                    _calculateCurrent0 15AA  
                  _calculateCurrent1 15EF                    _calculateCurrent2 0806  
                  _calculateCurrent3 0004                              ??_frexp 0074  
          __end_of_SYSTEM_Initialize 1534                           __pbssBANK0 005A  
                         __pbssBANK1 00A0                           __pbssBANK2 0120  
                 ?_calculateCurrent0 0070                   ?_calculateCurrent1 0070  
                 ?_calculateCurrent2 0070                   ?_calculateCurrent3 0070  
                       _batteryState 0064                   __size_of_eval_poly 0060  
                         ??_LCDClear 0078                       main@faultCount 00DD  
                         ??_LCDWrite 0071                      ?_LCDWriteString 007C  
                ??_calculateCurrent0 003E                  ??_calculateCurrent1 003E  
                ??_calculateCurrent2 003E                  ??_calculateCurrent3 003E  
                    ?_PWM_Initialize 0070                           __pmaintext 02B6  
                            ?___ftge 0070                              ?___wmul 0070  
                    __CFG_PPS1WAY$ON 0000           __end_of_PWM6_LoadDutyValue 1382  
                            ?_gotoXY 0075                              _ADCRead 1357  
                   ?_TMR4_Initialize 0070                            ?___awtoft 0078  
                          ?___ftpack 0070                              _ADSTPTH 0113  
                            _ADSTPTL 0112             __CFG_SCANE$not_available 0000  
                __CFG_RSTOSC$HFINT32 0000              __size_of_ADC_Initialize 001F  
            ??_Battery_State_Machine 003E                              _LCDInit 14BE  
          __end_of_calculateCurrent0 15EF            __end_of_calculateCurrent1 1634  
          __end_of_calculateCurrent2 084B            __end_of_calculateCurrent3 0049  
                            _OSCCON1 088D                              _OSCCON3 088F  
                            _OSCTUNE 0892                              _PWM6DCH 038D  
                            _PWM6DCL 038C                              _PWM7DCH 0391  
                            _PWM7DCL 0390                              _PWM6CON 038E  
                            _PWM7CON 0392                              _PPSLOCK 0E8F  
                     main@menuButton 00E7                       main@dutyCycle1 00D9  
                     main@dutyCycle6 00E9                       main@dutyCycle7 00EB  
                         _lastButton 0069                            ?_tempCalc 004D  
                            ___aldiv 08CD                      __size_of___ftge 003B  
                            ___awdiv 1634                              ___ftadd 0049  
                         _readButton 084B                              ___ftdiv 09D6  
                    __size_of___wmul 001B                              ___ftmul 0B2F  
                            ___ftsub 13B3                              ___fttol 094F  
                 main@displayRefresh 00E2                              ___lwmod 145B  
                    __size_of_gotoXY 0013                           ??___awtoft 007B  
                         ??___ftpack 0075                    __end_of_eval_poly 1739  
                            __ptext1 0C9C                              __ptext2 0A7F  
                            __ptext3 156F                              __ptext4 16D9  
                            __ptext5 1534                              __ptext6 13B3  
                            __ptext7 0049                              __ptext8 0D83  
                            __ptext9 08CD                          ?_cc_cv_mode 0070  
              _OSCILLATOR_Initialize 12EA                            _T2CONbits 028E  
                            _current 00B8                         __size_of_log 00B0  
                     ADCRead@channel 0073                     ___aldiv@dividend 0074  
                          _T4CONbits 0294             ??_PIN_MANAGER_Initialize 0070  
                            _samples 2260           __size_of_SYSTEM_Initialize 003B  
                            clrloop0 12F4                              _voltage 00B0  
       ??_Init_Battery_State_Machine 003E                 end_of_initialization 07FD  
              LCDWriteCharacter@base 007A                              gotoXY@x 0077  
                            gotoXY@y 0075                           ??_tempCalc 007E  
                   ___aldiv@quotient 0022                    _LCDWriteCharacter 1685  
              __CFG_WDTCPS$WDTCPS_31 0000                   ?_LCDWriteCharacter 0070  
         __size_of_calculateCurrent0 0045           __size_of_calculateCurrent1 0045  
         __size_of_calculateCurrent2 0045           __size_of_calculateCurrent3 0045  
                          _TRISAbits 0011                  ??_LCDWriteCharacter 0076  
                   __CFG_FEXTOSC$OFF 0000                          ___ftdiv@exp 002E  
                __size_of_cc_cv_mode 013F                    __size_of_LCDClear 0026  
         LCDWriteCharacter@character 0079                    __size_of_LCDWrite 0025  
                        ___ftmul@exp 002A            __end_of_LCDWriteCharacter 16D9  
                        ?_readButton 0070            readIAnalog@analog_channel 0079  
                     __end_of___ftge 156F                            _VHoldMode 0060  
                     __end_of___wmul 13B3                       _ADC_Initialize 13D1  
                     __end_of_gotoXY 132E               ?_OSCILLATOR_Initialize 0070  
                          _IminCount 00C8                  start_initialization 07B5  
                         eval_poly@d 0040                           eval_poly@n 0042  
                         eval_poly@x 003D                    main@faultNotReset 00DF  
    __size_of_PIN_MANAGER_Initialize 0037                          __end_of_log 0B2F  
                      ??_LCDWriteInt 0025                     ??_LCDWriteString 0020  
                         frexp@value 0070                     ??_PWM_Initialize 0070  
                      ??_readIAnalog 0028                     __CFG_LPBOREN$OFF 0000  
                           ??___ftge 0076                    tempCalc@steinhart 0055  
                           ??___wmul 0074               __end_of_ADC_Initialize 13F0  
                      _tempCalc$1188 0052                          __pdataBANK0 006C  
                        __pdataBANK2 0135           __end_of_PWM7_LoadDutyValue 1398  
                           ??_gotoXY 0076                             ?_ADCRead 0070  
       PWM7_LoadDutyValue@dutyCycle7 0070                    __size_of___awtoft 0020  
                           ?_LCDInit 0070                    __size_of___ftpack 0064  
                        __pbssBIGRAM 2260       __size_of_Battery_State_Machine 0177  
      __end_of_Battery_State_Machine 02B6                            ___latbits 0002  
                      __pcstackBANK0 0020                        __pcstackBANK1 00D6  
                 _PWM6_LoadDutyValue 136C             __size_of_TMR2_Initialize 000E  
 __end_of_Init_Battery_State_Machine 179C           _Init_Battery_State_Machine 1739  
                __size_of_readButton 0082                  ?_PWM6_LoadDutyValue 0070  
                __end_of_LCDWriteInt 0C9C                          _batteryTemp 006C  
             _PIN_MANAGER_Initialize 1487           __size_of_LCDWriteCharacter 0054  
                           ?___aldiv 0070                  __end_of_readIAnalog 0EC1  
                  __size_of_tempCalc 00E7                             ?___awdiv 0070  
                           ?___ftadd 0030                             ?___ftdiv 0020  
                           ?___ftmul 0020                             ?___ftsub 003D  
                           ?___fttol 0030                     LCDWriteInt@value 0020  
                           ?___lwmod 0070                      ?_ADC_Initialize 0070  
               ??_PWM6_LoadDutyValue 0072                         ??_cc_cv_mode 003E  
                          _eval_poly 16D9             __size_of_TMR4_Initialize 000E  
                     __size_of_frexp 003B                             _T2CLKCON 0290  
                           _T4CLKCON 0296                          cc_cv_mode@z 0045  
                           _LCDClear 1435                      ___aldiv@divisor 0070  
                    ___aldiv@counter 0020                       ___wmul@product 0074  
                           _LATAbits 0016                             _LCDWrite 1410  
                          clear_ram0 12F3                             _PIE0bits 0716  
                 __end_of_cc_cv_mode 1000                             _PIR4bits 0710  
                   readIAnalog@value 007B                            main@MPPT0 00E3  
                          main@MPPT1 00E5                     __size_of_ADCRead 0015  
                         _ADCON0bits 0093                    ___wmul@multiplier 0070  
                         ?_eval_poly 003D                     __size_of_LCDInit 003B  
                           _Ianalogs 00A0                          _LCDWriteInt 0BE3  
        Init_Battery_State_Machine@z 0042                    ??_TMR2_Initialize 0070  
                        _readIAnalog 0D83                            frexp@eptr 0073  
                           _Vanalogs 00A8                         ??_readButton 0074  
            ??_OSCILLATOR_Initialize 0070                 LCDWriteInt@numPlaces 0023  
                   __size_of___aldiv 0082                     __size_of___awdiv 0051  
                   __size_of___ftadd 00F6                     __size_of___ftdiv 00A9  
                   __size_of___ftmul 00B4                     __size_of___ftsub 001E  
                   __size_of___fttol 0087                     __size_of___lwmod 002C  
                        _readButtons 005E                             ___awtoft 13F0  
                           ___ftpack 179C                             _channels 0135  
                           __ptext10 084B                             __ptext11 1357  
                           __ptext20 12FF                             __ptext12 0EC1  
                           __ptext21 1342                             __ptext13 0004  
                           __ptext30 136C                             __ptext22 1487  
                           __ptext14 0806                             __ptext31 132E  
                           __ptext23 12EA                             __ptext15 15EF  
                           __ptext40 0B2F                             __ptext32 0BE3  
                           __ptext24 14BE                             __ptext16 15AA  
                           __ptext41 13F0                             __ptext33 145B  
                           __ptext25 1435                             __ptext17 09D6  
                           __ptext42 179C                             __ptext34 1634  
                           __ptext26 131B                             __ptext18 14F9  
                           __ptext35 1685                             __ptext27 1739  
                           __ptext19 130D                             __ptext36 1398  
                           __ptext28 13D1                             __ptext37 1410  
                           __ptext29 1382                             __ptext38 013F  
                           __ptext39 094F                      LCDWriteInt@sign 0024  
                          tempCalc@R 004F                   __end_of_readButton 08CD  
                  ??_TMR4_Initialize 0070                        __size_of_main 04FF  
               __CFG_WDTCWS$WDTCWS_7 0000                             _tempCalc 0C9C  
        PIN_MANAGER_Initialize@state 0070                             log@coeff 1800  
                        ??_eval_poly 007E                          _sampleIndex 0066  
                 _PWM7_LoadDutyValue 1382          ?_Init_Battery_State_Machine 0070  
                   ___lwmod@dividend 0072                       LCDWriteInt@str 0029  
            ?_PIN_MANAGER_Initialize 0070                  ?_PWM7_LoadDutyValue 0070  
                  __CFG_CLKOUTEN$OFF 0000                          _PPSLOCKbits 0E8F  
                   ??_ADC_Initialize 0070         PWM6_LoadDutyValue@dutyCycle6 0070  
                      __pstringtext1 1000                        __pstringtext2 1800  
                      __pstringtext3 1820                        __pstringtext4 1825  
                      __pstringtext5 0000                 ??_PWM7_LoadDutyValue 0072  
                    ___lwmod@divisor 0070                      ___lwmod@counter 0075  
           LCDWriteString@characters 007C                         ___aldiv@sign 0021  
                 readIAnalog@channel 0026                _Battery_State_Machine 013F  
     __end_of_PIN_MANAGER_Initialize 14BE                        main@IOutTotal 00DB  
            __size_of_LCDWriteString 0014  
