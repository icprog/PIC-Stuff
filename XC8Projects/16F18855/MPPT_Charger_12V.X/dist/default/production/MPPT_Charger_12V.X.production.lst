

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sat Jul 07 00:37:22 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F18855
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	stringtext1,global,class=STRCODE,delta=2
     7                           	psect	stringtext2,global,class=STRCODE,delta=2
     8                           	psect	stringtext3,global,class=STRCODE,delta=2
     9                           	psect	cinit,global,class=CODE,merge=1,delta=2
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    20                           	psect	text1,local,class=CODE,merge=1,delta=2
    21                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    22                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    23                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    24                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    25                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    26                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    27                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    28                           	psect	text9,local,class=CODE,merge=1,delta=2
    29                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    30                           	psect	text11,local,class=CODE,merge=1,delta=2
    31                           	psect	text12,local,class=CODE,merge=1,delta=2
    32                           	psect	text13,local,class=CODE,merge=1,delta=2
    33                           	psect	text14,local,class=CODE,merge=1,delta=2
    34                           	psect	text15,local,class=CODE,merge=1,delta=2
    35                           	psect	text16,local,class=CODE,merge=1,delta=2
    36                           	psect	text17,local,class=CODE,merge=1,delta=2
    37                           	psect	text18,local,class=CODE,merge=1,delta=2,group=2
    38                           	psect	text19,local,class=CODE,merge=1,delta=2,group=2
    39                           	psect	text20,local,class=CODE,merge=1,delta=2,group=2
    40                           	psect	text21,local,class=CODE,merge=1,delta=2,group=2
    41                           	psect	text22,local,class=CODE,merge=1,delta=2
    42                           	psect	text23,local,class=CODE,merge=1,delta=2
    43                           	psect	text24,local,class=CODE,merge=1,delta=2
    44                           	psect	text25,local,class=CODE,merge=1,delta=2
    45                           	psect	text26,local,class=CODE,merge=1,delta=2
    46                           	psect	text27,local,class=CODE,merge=1,delta=2
    47                           	psect	text28,local,class=CODE,merge=1,delta=2
    48                           	psect	text29,local,class=CODE,merge=1,delta=2
    49                           	psect	text30,local,class=CODE,merge=1,delta=2
    50                           	psect	text31,local,class=CODE,merge=1,delta=2
    51                           	psect	text32,local,class=CODE,merge=1,delta=2
    52                           	psect	text33,local,class=CODE,merge=1,delta=2
    53                           	psect	text34,local,class=CODE,merge=1,delta=2
    54                           	psect	text35,local,class=CODE,merge=1,delta=2,group=2
    55                           	psect	text36,local,class=CODE,merge=1,delta=2,group=2
    56                           	psect	text37,local,class=CODE,merge=1,delta=2
    57                           	psect	text38,local,class=CODE,merge=1,delta=2
    58                           	psect	text39,local,class=CODE,merge=1,delta=2
    59                           	psect	text40,local,class=CODE,merge=1,delta=2
    60                           	psect	text41,local,class=CODE,merge=1,delta=2,group=2
    61                           	psect	text42,local,class=CODE,merge=1,delta=2
    62                           	dabs	1,0x620,48
    63                           	dabs	1,0x5A0,80
    64                           	dabs	1,0x520,80
    65                           	dabs	1,0x4A0,80
    66                           	dabs	1,0x420,80
    67                           	dabs	1,0x3A0,80
    68                           	dabs	1,0x320,80
    69                           	dabs	1,0x2A8,72
    70                           	dabs	1,0x2198,0,_samples
    71                           	dabs	1,0x7E,2
    72  0000                     
    73                           ; Version 1.45
    74                           ; Generated 16/11/2017 GMT
    75                           ; 
    76                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    77                           ; All rights reserved.
    78                           ; 
    79                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    80                           ; 
    81                           ; Redistribution and use in source and binary forms, with or without modification, are
    82                           ; permitted provided that the following conditions are met:
    83                           ; 
    84                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    85                           ;        conditions and the following disclaimer.
    86                           ; 
    87                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    88                           ;        of conditions and the following disclaimer in the documentation and/or other
    89                           ;        materials provided with the distribution.
    90                           ; 
    91                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    92                           ;        software without specific prior written permission.
    93                           ; 
    94                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    95                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    96                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    97                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    98                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    99                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   100                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   101                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   102                           ; 
   103                           ; 
   104                           ; Code-generator required, PIC16F18855 Definitions
   105                           ; 
   106                           ; SFR Addresses
   107  0000                     	;# 
   108  0001                     	;# 
   109  0002                     	;# 
   110  0003                     	;# 
   111  0004                     	;# 
   112  0005                     	;# 
   113  0006                     	;# 
   114  0007                     	;# 
   115  0008                     	;# 
   116  0009                     	;# 
   117  000A                     	;# 
   118  000B                     	;# 
   119  000C                     	;# 
   120  000D                     	;# 
   121  000E                     	;# 
   122  0010                     	;# 
   123  0011                     	;# 
   124  0012                     	;# 
   125  0013                     	;# 
   126  0016                     	;# 
   127  0017                     	;# 
   128  0018                     	;# 
   129  001C                     	;# 
   130  001C                     	;# 
   131  001D                     	;# 
   132  001D                     	;# 
   133  001E                     	;# 
   134  001F                     	;# 
   135  008C                     	;# 
   136  008C                     	;# 
   137  008D                     	;# 
   138  008E                     	;# 
   139  008E                     	;# 
   140  008F                     	;# 
   141  0090                     	;# 
   142  0090                     	;# 
   143  0091                     	;# 
   144  0093                     	;# 
   145  0094                     	;# 
   146  0095                     	;# 
   147  0096                     	;# 
   148  0097                     	;# 
   149  0098                     	;# 
   150  0099                     	;# 
   151  009A                     	;# 
   152  009B                     	;# 
   153  009C                     	;# 
   154  009D                     	;# 
   155  009E                     	;# 
   156  010C                     	;# 
   157  010D                     	;# 
   158  010E                     	;# 
   159  010E                     	;# 
   160  010F                     	;# 
   161  0110                     	;# 
   162  0110                     	;# 
   163  0111                     	;# 
   164  0112                     	;# 
   165  0112                     	;# 
   166  0113                     	;# 
   167  0114                     	;# 
   168  0114                     	;# 
   169  0115                     	;# 
   170  0116                     	;# 
   171  0116                     	;# 
   172  0117                     	;# 
   173  0119                     	;# 
   174  0119                     	;# 
   175  0119                     	;# 
   176  011A                     	;# 
   177  011A                     	;# 
   178  011A                     	;# 
   179  011B                     	;# 
   180  011B                     	;# 
   181  011B                     	;# 
   182  011B                     	;# 
   183  011B                     	;# 
   184  011C                     	;# 
   185  011C                     	;# 
   186  011C                     	;# 
   187  011D                     	;# 
   188  011D                     	;# 
   189  011D                     	;# 
   190  011E                     	;# 
   191  011E                     	;# 
   192  011E                     	;# 
   193  011F                     	;# 
   194  011F                     	;# 
   195  011F                     	;# 
   196  011F                     	;# 
   197  011F                     	;# 
   198  018C                     	;# 
   199  018D                     	;# 
   200  018E                     	;# 
   201  018F                     	;# 
   202  0190                     	;# 
   203  0191                     	;# 
   204  0192                     	;# 
   205  0196                     	;# 
   206  0197                     	;# 
   207  0198                     	;# 
   208  0199                     	;# 
   209  019A                     	;# 
   210  019B                     	;# 
   211  019C                     	;# 
   212  020C                     	;# 
   213  020C                     	;# 
   214  020D                     	;# 
   215  020E                     	;# 
   216  020F                     	;# 
   217  020F                     	;# 
   218  0210                     	;# 
   219  0210                     	;# 
   220  0211                     	;# 
   221  0211                     	;# 
   222  0212                     	;# 
   223  0212                     	;# 
   224  0213                     	;# 
   225  0214                     	;# 
   226  0215                     	;# 
   227  0215                     	;# 
   228  0216                     	;# 
   229  0216                     	;# 
   230  0217                     	;# 
   231  0217                     	;# 
   232  0218                     	;# 
   233  0218                     	;# 
   234  0219                     	;# 
   235  021A                     	;# 
   236  021B                     	;# 
   237  021B                     	;# 
   238  021C                     	;# 
   239  021C                     	;# 
   240  021D                     	;# 
   241  021D                     	;# 
   242  021E                     	;# 
   243  021F                     	;# 
   244  028C                     	;# 
   245  028C                     	;# 
   246  028D                     	;# 
   247  028D                     	;# 
   248  028E                     	;# 
   249  028F                     	;# 
   250  0290                     	;# 
   251  0290                     	;# 
   252  0291                     	;# 
   253  0292                     	;# 
   254  0292                     	;# 
   255  0293                     	;# 
   256  0293                     	;# 
   257  0294                     	;# 
   258  0295                     	;# 
   259  0296                     	;# 
   260  0296                     	;# 
   261  0297                     	;# 
   262  0298                     	;# 
   263  0298                     	;# 
   264  0299                     	;# 
   265  0299                     	;# 
   266  029A                     	;# 
   267  029B                     	;# 
   268  029C                     	;# 
   269  029C                     	;# 
   270  029D                     	;# 
   271  030C                     	;# 
   272  030C                     	;# 
   273  030D                     	;# 
   274  030E                     	;# 
   275  030F                     	;# 
   276  0310                     	;# 
   277  0310                     	;# 
   278  0311                     	;# 
   279  0312                     	;# 
   280  0313                     	;# 
   281  0314                     	;# 
   282  0314                     	;# 
   283  0315                     	;# 
   284  0316                     	;# 
   285  0317                     	;# 
   286  0318                     	;# 
   287  0318                     	;# 
   288  0319                     	;# 
   289  031A                     	;# 
   290  031B                     	;# 
   291  031C                     	;# 
   292  031C                     	;# 
   293  031D                     	;# 
   294  031E                     	;# 
   295  031F                     	;# 
   296  038C                     	;# 
   297  038D                     	;# 
   298  038E                     	;# 
   299  0390                     	;# 
   300  0391                     	;# 
   301  0392                     	;# 
   302  040C                     	;# 
   303  040D                     	;# 
   304  040E                     	;# 
   305  040F                     	;# 
   306  0410                     	;# 
   307  0411                     	;# 
   308  0416                     	;# 
   309  0416                     	;# 
   310  0417                     	;# 
   311  0418                     	;# 
   312  0418                     	;# 
   313  0419                     	;# 
   314  041A                     	;# 
   315  041A                     	;# 
   316  041B                     	;# 
   317  041C                     	;# 
   318  041C                     	;# 
   319  041D                     	;# 
   320  041E                     	;# 
   321  041F                     	;# 
   322  048C                     	;# 
   323  048C                     	;# 
   324  048D                     	;# 
   325  048E                     	;# 
   326  048F                     	;# 
   327  048F                     	;# 
   328  0490                     	;# 
   329  0491                     	;# 
   330  0492                     	;# 
   331  0492                     	;# 
   332  0493                     	;# 
   333  0494                     	;# 
   334  0495                     	;# 
   335  0495                     	;# 
   336  0496                     	;# 
   337  0497                     	;# 
   338  0498                     	;# 
   339  0499                     	;# 
   340  049A                     	;# 
   341  049B                     	;# 
   342  049C                     	;# 
   343  049D                     	;# 
   344  050C                     	;# 
   345  050C                     	;# 
   346  050D                     	;# 
   347  050E                     	;# 
   348  050F                     	;# 
   349  050F                     	;# 
   350  0510                     	;# 
   351  0511                     	;# 
   352  0512                     	;# 
   353  0512                     	;# 
   354  0513                     	;# 
   355  0514                     	;# 
   356  0515                     	;# 
   357  0515                     	;# 
   358  0516                     	;# 
   359  0517                     	;# 
   360  0518                     	;# 
   361  0519                     	;# 
   362  051A                     	;# 
   363  051B                     	;# 
   364  051C                     	;# 
   365  051D                     	;# 
   366  058C                     	;# 
   367  058C                     	;# 
   368  058D                     	;# 
   369  058E                     	;# 
   370  058F                     	;# 
   371  058F                     	;# 
   372  0590                     	;# 
   373  0591                     	;# 
   374  0592                     	;# 
   375  0593                     	;# 
   376  060C                     	;# 
   377  060D                     	;# 
   378  060E                     	;# 
   379  060F                     	;# 
   380  0610                     	;# 
   381  0611                     	;# 
   382  0612                     	;# 
   383  0613                     	;# 
   384  0614                     	;# 
   385  0616                     	;# 
   386  0617                     	;# 
   387  0618                     	;# 
   388  0619                     	;# 
   389  061A                     	;# 
   390  061B                     	;# 
   391  061C                     	;# 
   392  061D                     	;# 
   393  061E                     	;# 
   394  068C                     	;# 
   395  068D                     	;# 
   396  068E                     	;# 
   397  068F                     	;# 
   398  0690                     	;# 
   399  0691                     	;# 
   400  0692                     	;# 
   401  0693                     	;# 
   402  0694                     	;# 
   403  070C                     	;# 
   404  070D                     	;# 
   405  070E                     	;# 
   406  070F                     	;# 
   407  0710                     	;# 
   408  0711                     	;# 
   409  0712                     	;# 
   410  0713                     	;# 
   411  0714                     	;# 
   412  0716                     	;# 
   413  0717                     	;# 
   414  0718                     	;# 
   415  0719                     	;# 
   416  071A                     	;# 
   417  071B                     	;# 
   418  071C                     	;# 
   419  071D                     	;# 
   420  071E                     	;# 
   421  0796                     	;# 
   422  0797                     	;# 
   423  0798                     	;# 
   424  0799                     	;# 
   425  079A                     	;# 
   426  079B                     	;# 
   427  080C                     	;# 
   428  080D                     	;# 
   429  080E                     	;# 
   430  080F                     	;# 
   431  0810                     	;# 
   432  0811                     	;# 
   433  0812                     	;# 
   434  0813                     	;# 
   435  0814                     	;# 
   436  081A                     	;# 
   437  081B                     	;# 
   438  081C                     	;# 
   439  081D                     	;# 
   440  081E                     	;# 
   441  081F                     	;# 
   442  088C                     	;# 
   443  088D                     	;# 
   444  088E                     	;# 
   445  088F                     	;# 
   446  0890                     	;# 
   447  0891                     	;# 
   448  0892                     	;# 
   449  0893                     	;# 
   450  0895                     	;# 
   451  0896                     	;# 
   452  0897                     	;# 
   453  0898                     	;# 
   454  0899                     	;# 
   455  089A                     	;# 
   456  089B                     	;# 
   457  090C                     	;# 
   458  090E                     	;# 
   459  090F                     	;# 
   460  091F                     	;# 
   461  091F                     	;# 
   462  098F                     	;# 
   463  098F                     	;# 
   464  0990                     	;# 
   465  0991                     	;# 
   466  0992                     	;# 
   467  0993                     	;# 
   468  0994                     	;# 
   469  0995                     	;# 
   470  0996                     	;# 
   471  0997                     	;# 
   472  0E0F                     	;# 
   473  0E10                     	;# 
   474  0E11                     	;# 
   475  0E12                     	;# 
   476  0E13                     	;# 
   477  0E14                     	;# 
   478  0E15                     	;# 
   479  0E16                     	;# 
   480  0E17                     	;# 
   481  0E18                     	;# 
   482  0E19                     	;# 
   483  0E1A                     	;# 
   484  0E1B                     	;# 
   485  0E1C                     	;# 
   486  0E1D                     	;# 
   487  0E1E                     	;# 
   488  0E1F                     	;# 
   489  0E20                     	;# 
   490  0E21                     	;# 
   491  0E22                     	;# 
   492  0E23                     	;# 
   493  0E24                     	;# 
   494  0E25                     	;# 
   495  0E26                     	;# 
   496  0E27                     	;# 
   497  0E28                     	;# 
   498  0E29                     	;# 
   499  0E2A                     	;# 
   500  0E2B                     	;# 
   501  0E2C                     	;# 
   502  0E2D                     	;# 
   503  0E2E                     	;# 
   504  0E2F                     	;# 
   505  0E30                     	;# 
   506  0E31                     	;# 
   507  0E32                     	;# 
   508  0E33                     	;# 
   509  0E34                     	;# 
   510  0E35                     	;# 
   511  0E36                     	;# 
   512  0E37                     	;# 
   513  0E8F                     	;# 
   514  0E90                     	;# 
   515  0E91                     	;# 
   516  0E92                     	;# 
   517  0E93                     	;# 
   518  0E94                     	;# 
   519  0E95                     	;# 
   520  0E96                     	;# 
   521  0E97                     	;# 
   522  0E9C                     	;# 
   523  0E9D                     	;# 
   524  0E9E                     	;# 
   525  0EA1                     	;# 
   526  0EA2                     	;# 
   527  0EA3                     	;# 
   528  0EA4                     	;# 
   529  0EA5                     	;# 
   530  0EA9                     	;# 
   531  0EAA                     	;# 
   532  0EAB                     	;# 
   533  0EAC                     	;# 
   534  0EB1                     	;# 
   535  0EB2                     	;# 
   536  0EB3                     	;# 
   537  0EB8                     	;# 
   538  0EB9                     	;# 
   539  0EBA                     	;# 
   540  0EBB                     	;# 
   541  0EBC                     	;# 
   542  0EBD                     	;# 
   543  0EBE                     	;# 
   544  0EC3                     	;# 
   545  0EC5                     	;# 
   546  0EC6                     	;# 
   547  0EC7                     	;# 
   548  0EC8                     	;# 
   549  0EC9                     	;# 
   550  0ECA                     	;# 
   551  0ECB                     	;# 
   552  0ECC                     	;# 
   553  0F10                     	;# 
   554  0F11                     	;# 
   555  0F12                     	;# 
   556  0F13                     	;# 
   557  0F14                     	;# 
   558  0F15                     	;# 
   559  0F16                     	;# 
   560  0F17                     	;# 
   561  0F18                     	;# 
   562  0F19                     	;# 
   563  0F1A                     	;# 
   564  0F1B                     	;# 
   565  0F1C                     	;# 
   566  0F1D                     	;# 
   567  0F1E                     	;# 
   568  0F1F                     	;# 
   569  0F20                     	;# 
   570  0F21                     	;# 
   571  0F22                     	;# 
   572  0F23                     	;# 
   573  0F24                     	;# 
   574  0F25                     	;# 
   575  0F26                     	;# 
   576  0F27                     	;# 
   577  0F38                     	;# 
   578  0F39                     	;# 
   579  0F3A                     	;# 
   580  0F3B                     	;# 
   581  0F3C                     	;# 
   582  0F3D                     	;# 
   583  0F3E                     	;# 
   584  0F3F                     	;# 
   585  0F40                     	;# 
   586  0F41                     	;# 
   587  0F43                     	;# 
   588  0F44                     	;# 
   589  0F45                     	;# 
   590  0F46                     	;# 
   591  0F47                     	;# 
   592  0F48                     	;# 
   593  0F49                     	;# 
   594  0F4A                     	;# 
   595  0F4B                     	;# 
   596  0F4C                     	;# 
   597  0F4E                     	;# 
   598  0F4F                     	;# 
   599  0F50                     	;# 
   600  0F51                     	;# 
   601  0F52                     	;# 
   602  0F53                     	;# 
   603  0F54                     	;# 
   604  0F55                     	;# 
   605  0F56                     	;# 
   606  0F57                     	;# 
   607  0F65                     	;# 
   608  0F68                     	;# 
   609  0F69                     	;# 
   610  0F6A                     	;# 
   611  0F6B                     	;# 
   612  0FE4                     	;# 
   613  0FE5                     	;# 
   614  0FE6                     	;# 
   615  0FE7                     	;# 
   616  0FE8                     	;# 
   617  0FE9                     	;# 
   618  0FEA                     	;# 
   619  0FEB                     	;# 
   620  0FED                     	;# 
   621  0FEE                     	;# 
   622  0FEF                     	;# 
   623  0000                     	;# 
   624  0001                     	;# 
   625  0002                     	;# 
   626  0003                     	;# 
   627  0004                     	;# 
   628  0005                     	;# 
   629  0006                     	;# 
   630  0007                     	;# 
   631  0008                     	;# 
   632  0009                     	;# 
   633  000A                     	;# 
   634  000B                     	;# 
   635  000C                     	;# 
   636  000D                     	;# 
   637  000E                     	;# 
   638  0010                     	;# 
   639  0011                     	;# 
   640  0012                     	;# 
   641  0013                     	;# 
   642  0016                     	;# 
   643  0017                     	;# 
   644  0018                     	;# 
   645  001C                     	;# 
   646  001C                     	;# 
   647  001D                     	;# 
   648  001D                     	;# 
   649  001E                     	;# 
   650  001F                     	;# 
   651  008C                     	;# 
   652  008C                     	;# 
   653  008D                     	;# 
   654  008E                     	;# 
   655  008E                     	;# 
   656  008F                     	;# 
   657  0090                     	;# 
   658  0090                     	;# 
   659  0091                     	;# 
   660  0093                     	;# 
   661  0094                     	;# 
   662  0095                     	;# 
   663  0096                     	;# 
   664  0097                     	;# 
   665  0098                     	;# 
   666  0099                     	;# 
   667  009A                     	;# 
   668  009B                     	;# 
   669  009C                     	;# 
   670  009D                     	;# 
   671  009E                     	;# 
   672  010C                     	;# 
   673  010D                     	;# 
   674  010E                     	;# 
   675  010E                     	;# 
   676  010F                     	;# 
   677  0110                     	;# 
   678  0110                     	;# 
   679  0111                     	;# 
   680  0112                     	;# 
   681  0112                     	;# 
   682  0113                     	;# 
   683  0114                     	;# 
   684  0114                     	;# 
   685  0115                     	;# 
   686  0116                     	;# 
   687  0116                     	;# 
   688  0117                     	;# 
   689  0119                     	;# 
   690  0119                     	;# 
   691  0119                     	;# 
   692  011A                     	;# 
   693  011A                     	;# 
   694  011A                     	;# 
   695  011B                     	;# 
   696  011B                     	;# 
   697  011B                     	;# 
   698  011B                     	;# 
   699  011B                     	;# 
   700  011C                     	;# 
   701  011C                     	;# 
   702  011C                     	;# 
   703  011D                     	;# 
   704  011D                     	;# 
   705  011D                     	;# 
   706  011E                     	;# 
   707  011E                     	;# 
   708  011E                     	;# 
   709  011F                     	;# 
   710  011F                     	;# 
   711  011F                     	;# 
   712  011F                     	;# 
   713  011F                     	;# 
   714  018C                     	;# 
   715  018D                     	;# 
   716  018E                     	;# 
   717  018F                     	;# 
   718  0190                     	;# 
   719  0191                     	;# 
   720  0192                     	;# 
   721  0196                     	;# 
   722  0197                     	;# 
   723  0198                     	;# 
   724  0199                     	;# 
   725  019A                     	;# 
   726  019B                     	;# 
   727  019C                     	;# 
   728  020C                     	;# 
   729  020C                     	;# 
   730  020D                     	;# 
   731  020E                     	;# 
   732  020F                     	;# 
   733  020F                     	;# 
   734  0210                     	;# 
   735  0210                     	;# 
   736  0211                     	;# 
   737  0211                     	;# 
   738  0212                     	;# 
   739  0212                     	;# 
   740  0213                     	;# 
   741  0214                     	;# 
   742  0215                     	;# 
   743  0215                     	;# 
   744  0216                     	;# 
   745  0216                     	;# 
   746  0217                     	;# 
   747  0217                     	;# 
   748  0218                     	;# 
   749  0218                     	;# 
   750  0219                     	;# 
   751  021A                     	;# 
   752  021B                     	;# 
   753  021B                     	;# 
   754  021C                     	;# 
   755  021C                     	;# 
   756  021D                     	;# 
   757  021D                     	;# 
   758  021E                     	;# 
   759  021F                     	;# 
   760  028C                     	;# 
   761  028C                     	;# 
   762  028D                     	;# 
   763  028D                     	;# 
   764  028E                     	;# 
   765  028F                     	;# 
   766  0290                     	;# 
   767  0290                     	;# 
   768  0291                     	;# 
   769  0292                     	;# 
   770  0292                     	;# 
   771  0293                     	;# 
   772  0293                     	;# 
   773  0294                     	;# 
   774  0295                     	;# 
   775  0296                     	;# 
   776  0296                     	;# 
   777  0297                     	;# 
   778  0298                     	;# 
   779  0298                     	;# 
   780  0299                     	;# 
   781  0299                     	;# 
   782  029A                     	;# 
   783  029B                     	;# 
   784  029C                     	;# 
   785  029C                     	;# 
   786  029D                     	;# 
   787  030C                     	;# 
   788  030C                     	;# 
   789  030D                     	;# 
   790  030E                     	;# 
   791  030F                     	;# 
   792  0310                     	;# 
   793  0310                     	;# 
   794  0311                     	;# 
   795  0312                     	;# 
   796  0313                     	;# 
   797  0314                     	;# 
   798  0314                     	;# 
   799  0315                     	;# 
   800  0316                     	;# 
   801  0317                     	;# 
   802  0318                     	;# 
   803  0318                     	;# 
   804  0319                     	;# 
   805  031A                     	;# 
   806  031B                     	;# 
   807  031C                     	;# 
   808  031C                     	;# 
   809  031D                     	;# 
   810  031E                     	;# 
   811  031F                     	;# 
   812  038C                     	;# 
   813  038D                     	;# 
   814  038E                     	;# 
   815  0390                     	;# 
   816  0391                     	;# 
   817  0392                     	;# 
   818  040C                     	;# 
   819  040D                     	;# 
   820  040E                     	;# 
   821  040F                     	;# 
   822  0410                     	;# 
   823  0411                     	;# 
   824  0416                     	;# 
   825  0416                     	;# 
   826  0417                     	;# 
   827  0418                     	;# 
   828  0418                     	;# 
   829  0419                     	;# 
   830  041A                     	;# 
   831  041A                     	;# 
   832  041B                     	;# 
   833  041C                     	;# 
   834  041C                     	;# 
   835  041D                     	;# 
   836  041E                     	;# 
   837  041F                     	;# 
   838  048C                     	;# 
   839  048C                     	;# 
   840  048D                     	;# 
   841  048E                     	;# 
   842  048F                     	;# 
   843  048F                     	;# 
   844  0490                     	;# 
   845  0491                     	;# 
   846  0492                     	;# 
   847  0492                     	;# 
   848  0493                     	;# 
   849  0494                     	;# 
   850  0495                     	;# 
   851  0495                     	;# 
   852  0496                     	;# 
   853  0497                     	;# 
   854  0498                     	;# 
   855  0499                     	;# 
   856  049A                     	;# 
   857  049B                     	;# 
   858  049C                     	;# 
   859  049D                     	;# 
   860  050C                     	;# 
   861  050C                     	;# 
   862  050D                     	;# 
   863  050E                     	;# 
   864  050F                     	;# 
   865  050F                     	;# 
   866  0510                     	;# 
   867  0511                     	;# 
   868  0512                     	;# 
   869  0512                     	;# 
   870  0513                     	;# 
   871  0514                     	;# 
   872  0515                     	;# 
   873  0515                     	;# 
   874  0516                     	;# 
   875  0517                     	;# 
   876  0518                     	;# 
   877  0519                     	;# 
   878  051A                     	;# 
   879  051B                     	;# 
   880  051C                     	;# 
   881  051D                     	;# 
   882  058C                     	;# 
   883  058C                     	;# 
   884  058D                     	;# 
   885  058E                     	;# 
   886  058F                     	;# 
   887  058F                     	;# 
   888  0590                     	;# 
   889  0591                     	;# 
   890  0592                     	;# 
   891  0593                     	;# 
   892  060C                     	;# 
   893  060D                     	;# 
   894  060E                     	;# 
   895  060F                     	;# 
   896  0610                     	;# 
   897  0611                     	;# 
   898  0612                     	;# 
   899  0613                     	;# 
   900  0614                     	;# 
   901  0616                     	;# 
   902  0617                     	;# 
   903  0618                     	;# 
   904  0619                     	;# 
   905  061A                     	;# 
   906  061B                     	;# 
   907  061C                     	;# 
   908  061D                     	;# 
   909  061E                     	;# 
   910  068C                     	;# 
   911  068D                     	;# 
   912  068E                     	;# 
   913  068F                     	;# 
   914  0690                     	;# 
   915  0691                     	;# 
   916  0692                     	;# 
   917  0693                     	;# 
   918  0694                     	;# 
   919  070C                     	;# 
   920  070D                     	;# 
   921  070E                     	;# 
   922  070F                     	;# 
   923  0710                     	;# 
   924  0711                     	;# 
   925  0712                     	;# 
   926  0713                     	;# 
   927  0714                     	;# 
   928  0716                     	;# 
   929  0717                     	;# 
   930  0718                     	;# 
   931  0719                     	;# 
   932  071A                     	;# 
   933  071B                     	;# 
   934  071C                     	;# 
   935  071D                     	;# 
   936  071E                     	;# 
   937  0796                     	;# 
   938  0797                     	;# 
   939  0798                     	;# 
   940  0799                     	;# 
   941  079A                     	;# 
   942  079B                     	;# 
   943  080C                     	;# 
   944  080D                     	;# 
   945  080E                     	;# 
   946  080F                     	;# 
   947  0810                     	;# 
   948  0811                     	;# 
   949  0812                     	;# 
   950  0813                     	;# 
   951  0814                     	;# 
   952  081A                     	;# 
   953  081B                     	;# 
   954  081C                     	;# 
   955  081D                     	;# 
   956  081E                     	;# 
   957  081F                     	;# 
   958  088C                     	;# 
   959  088D                     	;# 
   960  088E                     	;# 
   961  088F                     	;# 
   962  0890                     	;# 
   963  0891                     	;# 
   964  0892                     	;# 
   965  0893                     	;# 
   966  0895                     	;# 
   967  0896                     	;# 
   968  0897                     	;# 
   969  0898                     	;# 
   970  0899                     	;# 
   971  089A                     	;# 
   972  089B                     	;# 
   973  090C                     	;# 
   974  090E                     	;# 
   975  090F                     	;# 
   976  091F                     	;# 
   977  091F                     	;# 
   978  098F                     	;# 
   979  098F                     	;# 
   980  0990                     	;# 
   981  0991                     	;# 
   982  0992                     	;# 
   983  0993                     	;# 
   984  0994                     	;# 
   985  0995                     	;# 
   986  0996                     	;# 
   987  0997                     	;# 
   988  0E0F                     	;# 
   989  0E10                     	;# 
   990  0E11                     	;# 
   991  0E12                     	;# 
   992  0E13                     	;# 
   993  0E14                     	;# 
   994  0E15                     	;# 
   995  0E16                     	;# 
   996  0E17                     	;# 
   997  0E18                     	;# 
   998  0E19                     	;# 
   999  0E1A                     	;# 
  1000  0E1B                     	;# 
  1001  0E1C                     	;# 
  1002  0E1D                     	;# 
  1003  0E1E                     	;# 
  1004  0E1F                     	;# 
  1005  0E20                     	;# 
  1006  0E21                     	;# 
  1007  0E22                     	;# 
  1008  0E23                     	;# 
  1009  0E24                     	;# 
  1010  0E25                     	;# 
  1011  0E26                     	;# 
  1012  0E27                     	;# 
  1013  0E28                     	;# 
  1014  0E29                     	;# 
  1015  0E2A                     	;# 
  1016  0E2B                     	;# 
  1017  0E2C                     	;# 
  1018  0E2D                     	;# 
  1019  0E2E                     	;# 
  1020  0E2F                     	;# 
  1021  0E30                     	;# 
  1022  0E31                     	;# 
  1023  0E32                     	;# 
  1024  0E33                     	;# 
  1025  0E34                     	;# 
  1026  0E35                     	;# 
  1027  0E36                     	;# 
  1028  0E37                     	;# 
  1029  0E8F                     	;# 
  1030  0E90                     	;# 
  1031  0E91                     	;# 
  1032  0E92                     	;# 
  1033  0E93                     	;# 
  1034  0E94                     	;# 
  1035  0E95                     	;# 
  1036  0E96                     	;# 
  1037  0E97                     	;# 
  1038  0E9C                     	;# 
  1039  0E9D                     	;# 
  1040  0E9E                     	;# 
  1041  0EA1                     	;# 
  1042  0EA2                     	;# 
  1043  0EA3                     	;# 
  1044  0EA4                     	;# 
  1045  0EA5                     	;# 
  1046  0EA9                     	;# 
  1047  0EAA                     	;# 
  1048  0EAB                     	;# 
  1049  0EAC                     	;# 
  1050  0EB1                     	;# 
  1051  0EB2                     	;# 
  1052  0EB3                     	;# 
  1053  0EB8                     	;# 
  1054  0EB9                     	;# 
  1055  0EBA                     	;# 
  1056  0EBB                     	;# 
  1057  0EBC                     	;# 
  1058  0EBD                     	;# 
  1059  0EBE                     	;# 
  1060  0EC3                     	;# 
  1061  0EC5                     	;# 
  1062  0EC6                     	;# 
  1063  0EC7                     	;# 
  1064  0EC8                     	;# 
  1065  0EC9                     	;# 
  1066  0ECA                     	;# 
  1067  0ECB                     	;# 
  1068  0ECC                     	;# 
  1069  0F10                     	;# 
  1070  0F11                     	;# 
  1071  0F12                     	;# 
  1072  0F13                     	;# 
  1073  0F14                     	;# 
  1074  0F15                     	;# 
  1075  0F16                     	;# 
  1076  0F17                     	;# 
  1077  0F18                     	;# 
  1078  0F19                     	;# 
  1079  0F1A                     	;# 
  1080  0F1B                     	;# 
  1081  0F1C                     	;# 
  1082  0F1D                     	;# 
  1083  0F1E                     	;# 
  1084  0F1F                     	;# 
  1085  0F20                     	;# 
  1086  0F21                     	;# 
  1087  0F22                     	;# 
  1088  0F23                     	;# 
  1089  0F24                     	;# 
  1090  0F25                     	;# 
  1091  0F26                     	;# 
  1092  0F27                     	;# 
  1093  0F38                     	;# 
  1094  0F39                     	;# 
  1095  0F3A                     	;# 
  1096  0F3B                     	;# 
  1097  0F3C                     	;# 
  1098  0F3D                     	;# 
  1099  0F3E                     	;# 
  1100  0F3F                     	;# 
  1101  0F40                     	;# 
  1102  0F41                     	;# 
  1103  0F43                     	;# 
  1104  0F44                     	;# 
  1105  0F45                     	;# 
  1106  0F46                     	;# 
  1107  0F47                     	;# 
  1108  0F48                     	;# 
  1109  0F49                     	;# 
  1110  0F4A                     	;# 
  1111  0F4B                     	;# 
  1112  0F4C                     	;# 
  1113  0F4E                     	;# 
  1114  0F4F                     	;# 
  1115  0F50                     	;# 
  1116  0F51                     	;# 
  1117  0F52                     	;# 
  1118  0F53                     	;# 
  1119  0F54                     	;# 
  1120  0F55                     	;# 
  1121  0F56                     	;# 
  1122  0F57                     	;# 
  1123  0F65                     	;# 
  1124  0F68                     	;# 
  1125  0F69                     	;# 
  1126  0F6A                     	;# 
  1127  0F6B                     	;# 
  1128  0FE4                     	;# 
  1129  0FE5                     	;# 
  1130  0FE6                     	;# 
  1131  0FE7                     	;# 
  1132  0FE8                     	;# 
  1133  0FE9                     	;# 
  1134  0FEA                     	;# 
  1135  0FEB                     	;# 
  1136  0FED                     	;# 
  1137  0FEE                     	;# 
  1138  0FEF                     	;# 
  1139  0000                     	;# 
  1140  0001                     	;# 
  1141  0002                     	;# 
  1142  0003                     	;# 
  1143  0004                     	;# 
  1144  0005                     	;# 
  1145  0006                     	;# 
  1146  0007                     	;# 
  1147  0008                     	;# 
  1148  0009                     	;# 
  1149  000A                     	;# 
  1150  000B                     	;# 
  1151  000C                     	;# 
  1152  000D                     	;# 
  1153  000E                     	;# 
  1154  0010                     	;# 
  1155  0011                     	;# 
  1156  0012                     	;# 
  1157  0013                     	;# 
  1158  0016                     	;# 
  1159  0017                     	;# 
  1160  0018                     	;# 
  1161  001C                     	;# 
  1162  001C                     	;# 
  1163  001D                     	;# 
  1164  001D                     	;# 
  1165  001E                     	;# 
  1166  001F                     	;# 
  1167  008C                     	;# 
  1168  008C                     	;# 
  1169  008D                     	;# 
  1170  008E                     	;# 
  1171  008E                     	;# 
  1172  008F                     	;# 
  1173  0090                     	;# 
  1174  0090                     	;# 
  1175  0091                     	;# 
  1176  0093                     	;# 
  1177  0094                     	;# 
  1178  0095                     	;# 
  1179  0096                     	;# 
  1180  0097                     	;# 
  1181  0098                     	;# 
  1182  0099                     	;# 
  1183  009A                     	;# 
  1184  009B                     	;# 
  1185  009C                     	;# 
  1186  009D                     	;# 
  1187  009E                     	;# 
  1188  010C                     	;# 
  1189  010D                     	;# 
  1190  010E                     	;# 
  1191  010E                     	;# 
  1192  010F                     	;# 
  1193  0110                     	;# 
  1194  0110                     	;# 
  1195  0111                     	;# 
  1196  0112                     	;# 
  1197  0112                     	;# 
  1198  0113                     	;# 
  1199  0114                     	;# 
  1200  0114                     	;# 
  1201  0115                     	;# 
  1202  0116                     	;# 
  1203  0116                     	;# 
  1204  0117                     	;# 
  1205  0119                     	;# 
  1206  0119                     	;# 
  1207  0119                     	;# 
  1208  011A                     	;# 
  1209  011A                     	;# 
  1210  011A                     	;# 
  1211  011B                     	;# 
  1212  011B                     	;# 
  1213  011B                     	;# 
  1214  011B                     	;# 
  1215  011B                     	;# 
  1216  011C                     	;# 
  1217  011C                     	;# 
  1218  011C                     	;# 
  1219  011D                     	;# 
  1220  011D                     	;# 
  1221  011D                     	;# 
  1222  011E                     	;# 
  1223  011E                     	;# 
  1224  011E                     	;# 
  1225  011F                     	;# 
  1226  011F                     	;# 
  1227  011F                     	;# 
  1228  011F                     	;# 
  1229  011F                     	;# 
  1230  018C                     	;# 
  1231  018D                     	;# 
  1232  018E                     	;# 
  1233  018F                     	;# 
  1234  0190                     	;# 
  1235  0191                     	;# 
  1236  0192                     	;# 
  1237  0196                     	;# 
  1238  0197                     	;# 
  1239  0198                     	;# 
  1240  0199                     	;# 
  1241  019A                     	;# 
  1242  019B                     	;# 
  1243  019C                     	;# 
  1244  020C                     	;# 
  1245  020C                     	;# 
  1246  020D                     	;# 
  1247  020E                     	;# 
  1248  020F                     	;# 
  1249  020F                     	;# 
  1250  0210                     	;# 
  1251  0210                     	;# 
  1252  0211                     	;# 
  1253  0211                     	;# 
  1254  0212                     	;# 
  1255  0212                     	;# 
  1256  0213                     	;# 
  1257  0214                     	;# 
  1258  0215                     	;# 
  1259  0215                     	;# 
  1260  0216                     	;# 
  1261  0216                     	;# 
  1262  0217                     	;# 
  1263  0217                     	;# 
  1264  0218                     	;# 
  1265  0218                     	;# 
  1266  0219                     	;# 
  1267  021A                     	;# 
  1268  021B                     	;# 
  1269  021B                     	;# 
  1270  021C                     	;# 
  1271  021C                     	;# 
  1272  021D                     	;# 
  1273  021D                     	;# 
  1274  021E                     	;# 
  1275  021F                     	;# 
  1276  028C                     	;# 
  1277  028C                     	;# 
  1278  028D                     	;# 
  1279  028D                     	;# 
  1280  028E                     	;# 
  1281  028F                     	;# 
  1282  0290                     	;# 
  1283  0290                     	;# 
  1284  0291                     	;# 
  1285  0292                     	;# 
  1286  0292                     	;# 
  1287  0293                     	;# 
  1288  0293                     	;# 
  1289  0294                     	;# 
  1290  0295                     	;# 
  1291  0296                     	;# 
  1292  0296                     	;# 
  1293  0297                     	;# 
  1294  0298                     	;# 
  1295  0298                     	;# 
  1296  0299                     	;# 
  1297  0299                     	;# 
  1298  029A                     	;# 
  1299  029B                     	;# 
  1300  029C                     	;# 
  1301  029C                     	;# 
  1302  029D                     	;# 
  1303  030C                     	;# 
  1304  030C                     	;# 
  1305  030D                     	;# 
  1306  030E                     	;# 
  1307  030F                     	;# 
  1308  0310                     	;# 
  1309  0310                     	;# 
  1310  0311                     	;# 
  1311  0312                     	;# 
  1312  0313                     	;# 
  1313  0314                     	;# 
  1314  0314                     	;# 
  1315  0315                     	;# 
  1316  0316                     	;# 
  1317  0317                     	;# 
  1318  0318                     	;# 
  1319  0318                     	;# 
  1320  0319                     	;# 
  1321  031A                     	;# 
  1322  031B                     	;# 
  1323  031C                     	;# 
  1324  031C                     	;# 
  1325  031D                     	;# 
  1326  031E                     	;# 
  1327  031F                     	;# 
  1328  038C                     	;# 
  1329  038D                     	;# 
  1330  038E                     	;# 
  1331  0390                     	;# 
  1332  0391                     	;# 
  1333  0392                     	;# 
  1334  040C                     	;# 
  1335  040D                     	;# 
  1336  040E                     	;# 
  1337  040F                     	;# 
  1338  0410                     	;# 
  1339  0411                     	;# 
  1340  0416                     	;# 
  1341  0416                     	;# 
  1342  0417                     	;# 
  1343  0418                     	;# 
  1344  0418                     	;# 
  1345  0419                     	;# 
  1346  041A                     	;# 
  1347  041A                     	;# 
  1348  041B                     	;# 
  1349  041C                     	;# 
  1350  041C                     	;# 
  1351  041D                     	;# 
  1352  041E                     	;# 
  1353  041F                     	;# 
  1354  048C                     	;# 
  1355  048C                     	;# 
  1356  048D                     	;# 
  1357  048E                     	;# 
  1358  048F                     	;# 
  1359  048F                     	;# 
  1360  0490                     	;# 
  1361  0491                     	;# 
  1362  0492                     	;# 
  1363  0492                     	;# 
  1364  0493                     	;# 
  1365  0494                     	;# 
  1366  0495                     	;# 
  1367  0495                     	;# 
  1368  0496                     	;# 
  1369  0497                     	;# 
  1370  0498                     	;# 
  1371  0499                     	;# 
  1372  049A                     	;# 
  1373  049B                     	;# 
  1374  049C                     	;# 
  1375  049D                     	;# 
  1376  050C                     	;# 
  1377  050C                     	;# 
  1378  050D                     	;# 
  1379  050E                     	;# 
  1380  050F                     	;# 
  1381  050F                     	;# 
  1382  0510                     	;# 
  1383  0511                     	;# 
  1384  0512                     	;# 
  1385  0512                     	;# 
  1386  0513                     	;# 
  1387  0514                     	;# 
  1388  0515                     	;# 
  1389  0515                     	;# 
  1390  0516                     	;# 
  1391  0517                     	;# 
  1392  0518                     	;# 
  1393  0519                     	;# 
  1394  051A                     	;# 
  1395  051B                     	;# 
  1396  051C                     	;# 
  1397  051D                     	;# 
  1398  058C                     	;# 
  1399  058C                     	;# 
  1400  058D                     	;# 
  1401  058E                     	;# 
  1402  058F                     	;# 
  1403  058F                     	;# 
  1404  0590                     	;# 
  1405  0591                     	;# 
  1406  0592                     	;# 
  1407  0593                     	;# 
  1408  060C                     	;# 
  1409  060D                     	;# 
  1410  060E                     	;# 
  1411  060F                     	;# 
  1412  0610                     	;# 
  1413  0611                     	;# 
  1414  0612                     	;# 
  1415  0613                     	;# 
  1416  0614                     	;# 
  1417  0616                     	;# 
  1418  0617                     	;# 
  1419  0618                     	;# 
  1420  0619                     	;# 
  1421  061A                     	;# 
  1422  061B                     	;# 
  1423  061C                     	;# 
  1424  061D                     	;# 
  1425  061E                     	;# 
  1426  068C                     	;# 
  1427  068D                     	;# 
  1428  068E                     	;# 
  1429  068F                     	;# 
  1430  0690                     	;# 
  1431  0691                     	;# 
  1432  0692                     	;# 
  1433  0693                     	;# 
  1434  0694                     	;# 
  1435  070C                     	;# 
  1436  070D                     	;# 
  1437  070E                     	;# 
  1438  070F                     	;# 
  1439  0710                     	;# 
  1440  0711                     	;# 
  1441  0712                     	;# 
  1442  0713                     	;# 
  1443  0714                     	;# 
  1444  0716                     	;# 
  1445  0717                     	;# 
  1446  0718                     	;# 
  1447  0719                     	;# 
  1448  071A                     	;# 
  1449  071B                     	;# 
  1450  071C                     	;# 
  1451  071D                     	;# 
  1452  071E                     	;# 
  1453  0796                     	;# 
  1454  0797                     	;# 
  1455  0798                     	;# 
  1456  0799                     	;# 
  1457  079A                     	;# 
  1458  079B                     	;# 
  1459  080C                     	;# 
  1460  080D                     	;# 
  1461  080E                     	;# 
  1462  080F                     	;# 
  1463  0810                     	;# 
  1464  0811                     	;# 
  1465  0812                     	;# 
  1466  0813                     	;# 
  1467  0814                     	;# 
  1468  081A                     	;# 
  1469  081B                     	;# 
  1470  081C                     	;# 
  1471  081D                     	;# 
  1472  081E                     	;# 
  1473  081F                     	;# 
  1474  088C                     	;# 
  1475  088D                     	;# 
  1476  088E                     	;# 
  1477  088F                     	;# 
  1478  0890                     	;# 
  1479  0891                     	;# 
  1480  0892                     	;# 
  1481  0893                     	;# 
  1482  0895                     	;# 
  1483  0896                     	;# 
  1484  0897                     	;# 
  1485  0898                     	;# 
  1486  0899                     	;# 
  1487  089A                     	;# 
  1488  089B                     	;# 
  1489  090C                     	;# 
  1490  090E                     	;# 
  1491  090F                     	;# 
  1492  091F                     	;# 
  1493  091F                     	;# 
  1494  098F                     	;# 
  1495  098F                     	;# 
  1496  0990                     	;# 
  1497  0991                     	;# 
  1498  0992                     	;# 
  1499  0993                     	;# 
  1500  0994                     	;# 
  1501  0995                     	;# 
  1502  0996                     	;# 
  1503  0997                     	;# 
  1504  0E0F                     	;# 
  1505  0E10                     	;# 
  1506  0E11                     	;# 
  1507  0E12                     	;# 
  1508  0E13                     	;# 
  1509  0E14                     	;# 
  1510  0E15                     	;# 
  1511  0E16                     	;# 
  1512  0E17                     	;# 
  1513  0E18                     	;# 
  1514  0E19                     	;# 
  1515  0E1A                     	;# 
  1516  0E1B                     	;# 
  1517  0E1C                     	;# 
  1518  0E1D                     	;# 
  1519  0E1E                     	;# 
  1520  0E1F                     	;# 
  1521  0E20                     	;# 
  1522  0E21                     	;# 
  1523  0E22                     	;# 
  1524  0E23                     	;# 
  1525  0E24                     	;# 
  1526  0E25                     	;# 
  1527  0E26                     	;# 
  1528  0E27                     	;# 
  1529  0E28                     	;# 
  1530  0E29                     	;# 
  1531  0E2A                     	;# 
  1532  0E2B                     	;# 
  1533  0E2C                     	;# 
  1534  0E2D                     	;# 
  1535  0E2E                     	;# 
  1536  0E2F                     	;# 
  1537  0E30                     	;# 
  1538  0E31                     	;# 
  1539  0E32                     	;# 
  1540  0E33                     	;# 
  1541  0E34                     	;# 
  1542  0E35                     	;# 
  1543  0E36                     	;# 
  1544  0E37                     	;# 
  1545  0E8F                     	;# 
  1546  0E90                     	;# 
  1547  0E91                     	;# 
  1548  0E92                     	;# 
  1549  0E93                     	;# 
  1550  0E94                     	;# 
  1551  0E95                     	;# 
  1552  0E96                     	;# 
  1553  0E97                     	;# 
  1554  0E9C                     	;# 
  1555  0E9D                     	;# 
  1556  0E9E                     	;# 
  1557  0EA1                     	;# 
  1558  0EA2                     	;# 
  1559  0EA3                     	;# 
  1560  0EA4                     	;# 
  1561  0EA5                     	;# 
  1562  0EA9                     	;# 
  1563  0EAA                     	;# 
  1564  0EAB                     	;# 
  1565  0EAC                     	;# 
  1566  0EB1                     	;# 
  1567  0EB2                     	;# 
  1568  0EB3                     	;# 
  1569  0EB8                     	;# 
  1570  0EB9                     	;# 
  1571  0EBA                     	;# 
  1572  0EBB                     	;# 
  1573  0EBC                     	;# 
  1574  0EBD                     	;# 
  1575  0EBE                     	;# 
  1576  0EC3                     	;# 
  1577  0EC5                     	;# 
  1578  0EC6                     	;# 
  1579  0EC7                     	;# 
  1580  0EC8                     	;# 
  1581  0EC9                     	;# 
  1582  0ECA                     	;# 
  1583  0ECB                     	;# 
  1584  0ECC                     	;# 
  1585  0F10                     	;# 
  1586  0F11                     	;# 
  1587  0F12                     	;# 
  1588  0F13                     	;# 
  1589  0F14                     	;# 
  1590  0F15                     	;# 
  1591  0F16                     	;# 
  1592  0F17                     	;# 
  1593  0F18                     	;# 
  1594  0F19                     	;# 
  1595  0F1A                     	;# 
  1596  0F1B                     	;# 
  1597  0F1C                     	;# 
  1598  0F1D                     	;# 
  1599  0F1E                     	;# 
  1600  0F1F                     	;# 
  1601  0F20                     	;# 
  1602  0F21                     	;# 
  1603  0F22                     	;# 
  1604  0F23                     	;# 
  1605  0F24                     	;# 
  1606  0F25                     	;# 
  1607  0F26                     	;# 
  1608  0F27                     	;# 
  1609  0F38                     	;# 
  1610  0F39                     	;# 
  1611  0F3A                     	;# 
  1612  0F3B                     	;# 
  1613  0F3C                     	;# 
  1614  0F3D                     	;# 
  1615  0F3E                     	;# 
  1616  0F3F                     	;# 
  1617  0F40                     	;# 
  1618  0F41                     	;# 
  1619  0F43                     	;# 
  1620  0F44                     	;# 
  1621  0F45                     	;# 
  1622  0F46                     	;# 
  1623  0F47                     	;# 
  1624  0F48                     	;# 
  1625  0F49                     	;# 
  1626  0F4A                     	;# 
  1627  0F4B                     	;# 
  1628  0F4C                     	;# 
  1629  0F4E                     	;# 
  1630  0F4F                     	;# 
  1631  0F50                     	;# 
  1632  0F51                     	;# 
  1633  0F52                     	;# 
  1634  0F53                     	;# 
  1635  0F54                     	;# 
  1636  0F55                     	;# 
  1637  0F56                     	;# 
  1638  0F57                     	;# 
  1639  0F65                     	;# 
  1640  0F68                     	;# 
  1641  0F69                     	;# 
  1642  0F6A                     	;# 
  1643  0F6B                     	;# 
  1644  0FE4                     	;# 
  1645  0FE5                     	;# 
  1646  0FE6                     	;# 
  1647  0FE7                     	;# 
  1648  0FE8                     	;# 
  1649  0FE9                     	;# 
  1650  0FEA                     	;# 
  1651  0FEB                     	;# 
  1652  0FED                     	;# 
  1653  0FEE                     	;# 
  1654  0FEF                     	;# 
  1655  0000                     	;# 
  1656  0001                     	;# 
  1657  0002                     	;# 
  1658  0003                     	;# 
  1659  0004                     	;# 
  1660  0005                     	;# 
  1661  0006                     	;# 
  1662  0007                     	;# 
  1663  0008                     	;# 
  1664  0009                     	;# 
  1665  000A                     	;# 
  1666  000B                     	;# 
  1667  000C                     	;# 
  1668  000D                     	;# 
  1669  000E                     	;# 
  1670  0010                     	;# 
  1671  0011                     	;# 
  1672  0012                     	;# 
  1673  0013                     	;# 
  1674  0016                     	;# 
  1675  0017                     	;# 
  1676  0018                     	;# 
  1677  001C                     	;# 
  1678  001C                     	;# 
  1679  001D                     	;# 
  1680  001D                     	;# 
  1681  001E                     	;# 
  1682  001F                     	;# 
  1683  008C                     	;# 
  1684  008C                     	;# 
  1685  008D                     	;# 
  1686  008E                     	;# 
  1687  008E                     	;# 
  1688  008F                     	;# 
  1689  0090                     	;# 
  1690  0090                     	;# 
  1691  0091                     	;# 
  1692  0093                     	;# 
  1693  0094                     	;# 
  1694  0095                     	;# 
  1695  0096                     	;# 
  1696  0097                     	;# 
  1697  0098                     	;# 
  1698  0099                     	;# 
  1699  009A                     	;# 
  1700  009B                     	;# 
  1701  009C                     	;# 
  1702  009D                     	;# 
  1703  009E                     	;# 
  1704  010C                     	;# 
  1705  010D                     	;# 
  1706  010E                     	;# 
  1707  010E                     	;# 
  1708  010F                     	;# 
  1709  0110                     	;# 
  1710  0110                     	;# 
  1711  0111                     	;# 
  1712  0112                     	;# 
  1713  0112                     	;# 
  1714  0113                     	;# 
  1715  0114                     	;# 
  1716  0114                     	;# 
  1717  0115                     	;# 
  1718  0116                     	;# 
  1719  0116                     	;# 
  1720  0117                     	;# 
  1721  0119                     	;# 
  1722  0119                     	;# 
  1723  0119                     	;# 
  1724  011A                     	;# 
  1725  011A                     	;# 
  1726  011A                     	;# 
  1727  011B                     	;# 
  1728  011B                     	;# 
  1729  011B                     	;# 
  1730  011B                     	;# 
  1731  011B                     	;# 
  1732  011C                     	;# 
  1733  011C                     	;# 
  1734  011C                     	;# 
  1735  011D                     	;# 
  1736  011D                     	;# 
  1737  011D                     	;# 
  1738  011E                     	;# 
  1739  011E                     	;# 
  1740  011E                     	;# 
  1741  011F                     	;# 
  1742  011F                     	;# 
  1743  011F                     	;# 
  1744  011F                     	;# 
  1745  011F                     	;# 
  1746  018C                     	;# 
  1747  018D                     	;# 
  1748  018E                     	;# 
  1749  018F                     	;# 
  1750  0190                     	;# 
  1751  0191                     	;# 
  1752  0192                     	;# 
  1753  0196                     	;# 
  1754  0197                     	;# 
  1755  0198                     	;# 
  1756  0199                     	;# 
  1757  019A                     	;# 
  1758  019B                     	;# 
  1759  019C                     	;# 
  1760  020C                     	;# 
  1761  020C                     	;# 
  1762  020D                     	;# 
  1763  020E                     	;# 
  1764  020F                     	;# 
  1765  020F                     	;# 
  1766  0210                     	;# 
  1767  0210                     	;# 
  1768  0211                     	;# 
  1769  0211                     	;# 
  1770  0212                     	;# 
  1771  0212                     	;# 
  1772  0213                     	;# 
  1773  0214                     	;# 
  1774  0215                     	;# 
  1775  0215                     	;# 
  1776  0216                     	;# 
  1777  0216                     	;# 
  1778  0217                     	;# 
  1779  0217                     	;# 
  1780  0218                     	;# 
  1781  0218                     	;# 
  1782  0219                     	;# 
  1783  021A                     	;# 
  1784  021B                     	;# 
  1785  021B                     	;# 
  1786  021C                     	;# 
  1787  021C                     	;# 
  1788  021D                     	;# 
  1789  021D                     	;# 
  1790  021E                     	;# 
  1791  021F                     	;# 
  1792  028C                     	;# 
  1793  028C                     	;# 
  1794  028D                     	;# 
  1795  028D                     	;# 
  1796  028E                     	;# 
  1797  028F                     	;# 
  1798  0290                     	;# 
  1799  0290                     	;# 
  1800  0291                     	;# 
  1801  0292                     	;# 
  1802  0292                     	;# 
  1803  0293                     	;# 
  1804  0293                     	;# 
  1805  0294                     	;# 
  1806  0295                     	;# 
  1807  0296                     	;# 
  1808  0296                     	;# 
  1809  0297                     	;# 
  1810  0298                     	;# 
  1811  0298                     	;# 
  1812  0299                     	;# 
  1813  0299                     	;# 
  1814  029A                     	;# 
  1815  029B                     	;# 
  1816  029C                     	;# 
  1817  029C                     	;# 
  1818  029D                     	;# 
  1819  030C                     	;# 
  1820  030C                     	;# 
  1821  030D                     	;# 
  1822  030E                     	;# 
  1823  030F                     	;# 
  1824  0310                     	;# 
  1825  0310                     	;# 
  1826  0311                     	;# 
  1827  0312                     	;# 
  1828  0313                     	;# 
  1829  0314                     	;# 
  1830  0314                     	;# 
  1831  0315                     	;# 
  1832  0316                     	;# 
  1833  0317                     	;# 
  1834  0318                     	;# 
  1835  0318                     	;# 
  1836  0319                     	;# 
  1837  031A                     	;# 
  1838  031B                     	;# 
  1839  031C                     	;# 
  1840  031C                     	;# 
  1841  031D                     	;# 
  1842  031E                     	;# 
  1843  031F                     	;# 
  1844  038C                     	;# 
  1845  038D                     	;# 
  1846  038E                     	;# 
  1847  0390                     	;# 
  1848  0391                     	;# 
  1849  0392                     	;# 
  1850  040C                     	;# 
  1851  040D                     	;# 
  1852  040E                     	;# 
  1853  040F                     	;# 
  1854  0410                     	;# 
  1855  0411                     	;# 
  1856  0416                     	;# 
  1857  0416                     	;# 
  1858  0417                     	;# 
  1859  0418                     	;# 
  1860  0418                     	;# 
  1861  0419                     	;# 
  1862  041A                     	;# 
  1863  041A                     	;# 
  1864  041B                     	;# 
  1865  041C                     	;# 
  1866  041C                     	;# 
  1867  041D                     	;# 
  1868  041E                     	;# 
  1869  041F                     	;# 
  1870  048C                     	;# 
  1871  048C                     	;# 
  1872  048D                     	;# 
  1873  048E                     	;# 
  1874  048F                     	;# 
  1875  048F                     	;# 
  1876  0490                     	;# 
  1877  0491                     	;# 
  1878  0492                     	;# 
  1879  0492                     	;# 
  1880  0493                     	;# 
  1881  0494                     	;# 
  1882  0495                     	;# 
  1883  0495                     	;# 
  1884  0496                     	;# 
  1885  0497                     	;# 
  1886  0498                     	;# 
  1887  0499                     	;# 
  1888  049A                     	;# 
  1889  049B                     	;# 
  1890  049C                     	;# 
  1891  049D                     	;# 
  1892  050C                     	;# 
  1893  050C                     	;# 
  1894  050D                     	;# 
  1895  050E                     	;# 
  1896  050F                     	;# 
  1897  050F                     	;# 
  1898  0510                     	;# 
  1899  0511                     	;# 
  1900  0512                     	;# 
  1901  0512                     	;# 
  1902  0513                     	;# 
  1903  0514                     	;# 
  1904  0515                     	;# 
  1905  0515                     	;# 
  1906  0516                     	;# 
  1907  0517                     	;# 
  1908  0518                     	;# 
  1909  0519                     	;# 
  1910  051A                     	;# 
  1911  051B                     	;# 
  1912  051C                     	;# 
  1913  051D                     	;# 
  1914  058C                     	;# 
  1915  058C                     	;# 
  1916  058D                     	;# 
  1917  058E                     	;# 
  1918  058F                     	;# 
  1919  058F                     	;# 
  1920  0590                     	;# 
  1921  0591                     	;# 
  1922  0592                     	;# 
  1923  0593                     	;# 
  1924  060C                     	;# 
  1925  060D                     	;# 
  1926  060E                     	;# 
  1927  060F                     	;# 
  1928  0610                     	;# 
  1929  0611                     	;# 
  1930  0612                     	;# 
  1931  0613                     	;# 
  1932  0614                     	;# 
  1933  0616                     	;# 
  1934  0617                     	;# 
  1935  0618                     	;# 
  1936  0619                     	;# 
  1937  061A                     	;# 
  1938  061B                     	;# 
  1939  061C                     	;# 
  1940  061D                     	;# 
  1941  061E                     	;# 
  1942  068C                     	;# 
  1943  068D                     	;# 
  1944  068E                     	;# 
  1945  068F                     	;# 
  1946  0690                     	;# 
  1947  0691                     	;# 
  1948  0692                     	;# 
  1949  0693                     	;# 
  1950  0694                     	;# 
  1951  070C                     	;# 
  1952  070D                     	;# 
  1953  070E                     	;# 
  1954  070F                     	;# 
  1955  0710                     	;# 
  1956  0711                     	;# 
  1957  0712                     	;# 
  1958  0713                     	;# 
  1959  0714                     	;# 
  1960  0716                     	;# 
  1961  0717                     	;# 
  1962  0718                     	;# 
  1963  0719                     	;# 
  1964  071A                     	;# 
  1965  071B                     	;# 
  1966  071C                     	;# 
  1967  071D                     	;# 
  1968  071E                     	;# 
  1969  0796                     	;# 
  1970  0797                     	;# 
  1971  0798                     	;# 
  1972  0799                     	;# 
  1973  079A                     	;# 
  1974  079B                     	;# 
  1975  080C                     	;# 
  1976  080D                     	;# 
  1977  080E                     	;# 
  1978  080F                     	;# 
  1979  0810                     	;# 
  1980  0811                     	;# 
  1981  0812                     	;# 
  1982  0813                     	;# 
  1983  0814                     	;# 
  1984  081A                     	;# 
  1985  081B                     	;# 
  1986  081C                     	;# 
  1987  081D                     	;# 
  1988  081E                     	;# 
  1989  081F                     	;# 
  1990  088C                     	;# 
  1991  088D                     	;# 
  1992  088E                     	;# 
  1993  088F                     	;# 
  1994  0890                     	;# 
  1995  0891                     	;# 
  1996  0892                     	;# 
  1997  0893                     	;# 
  1998  0895                     	;# 
  1999  0896                     	;# 
  2000  0897                     	;# 
  2001  0898                     	;# 
  2002  0899                     	;# 
  2003  089A                     	;# 
  2004  089B                     	;# 
  2005  090C                     	;# 
  2006  090E                     	;# 
  2007  090F                     	;# 
  2008  091F                     	;# 
  2009  091F                     	;# 
  2010  098F                     	;# 
  2011  098F                     	;# 
  2012  0990                     	;# 
  2013  0991                     	;# 
  2014  0992                     	;# 
  2015  0993                     	;# 
  2016  0994                     	;# 
  2017  0995                     	;# 
  2018  0996                     	;# 
  2019  0997                     	;# 
  2020  0E0F                     	;# 
  2021  0E10                     	;# 
  2022  0E11                     	;# 
  2023  0E12                     	;# 
  2024  0E13                     	;# 
  2025  0E14                     	;# 
  2026  0E15                     	;# 
  2027  0E16                     	;# 
  2028  0E17                     	;# 
  2029  0E18                     	;# 
  2030  0E19                     	;# 
  2031  0E1A                     	;# 
  2032  0E1B                     	;# 
  2033  0E1C                     	;# 
  2034  0E1D                     	;# 
  2035  0E1E                     	;# 
  2036  0E1F                     	;# 
  2037  0E20                     	;# 
  2038  0E21                     	;# 
  2039  0E22                     	;# 
  2040  0E23                     	;# 
  2041  0E24                     	;# 
  2042  0E25                     	;# 
  2043  0E26                     	;# 
  2044  0E27                     	;# 
  2045  0E28                     	;# 
  2046  0E29                     	;# 
  2047  0E2A                     	;# 
  2048  0E2B                     	;# 
  2049  0E2C                     	;# 
  2050  0E2D                     	;# 
  2051  0E2E                     	;# 
  2052  0E2F                     	;# 
  2053  0E30                     	;# 
  2054  0E31                     	;# 
  2055  0E32                     	;# 
  2056  0E33                     	;# 
  2057  0E34                     	;# 
  2058  0E35                     	;# 
  2059  0E36                     	;# 
  2060  0E37                     	;# 
  2061  0E8F                     	;# 
  2062  0E90                     	;# 
  2063  0E91                     	;# 
  2064  0E92                     	;# 
  2065  0E93                     	;# 
  2066  0E94                     	;# 
  2067  0E95                     	;# 
  2068  0E96                     	;# 
  2069  0E97                     	;# 
  2070  0E9C                     	;# 
  2071  0E9D                     	;# 
  2072  0E9E                     	;# 
  2073  0EA1                     	;# 
  2074  0EA2                     	;# 
  2075  0EA3                     	;# 
  2076  0EA4                     	;# 
  2077  0EA5                     	;# 
  2078  0EA9                     	;# 
  2079  0EAA                     	;# 
  2080  0EAB                     	;# 
  2081  0EAC                     	;# 
  2082  0EB1                     	;# 
  2083  0EB2                     	;# 
  2084  0EB3                     	;# 
  2085  0EB8                     	;# 
  2086  0EB9                     	;# 
  2087  0EBA                     	;# 
  2088  0EBB                     	;# 
  2089  0EBC                     	;# 
  2090  0EBD                     	;# 
  2091  0EBE                     	;# 
  2092  0EC3                     	;# 
  2093  0EC5                     	;# 
  2094  0EC6                     	;# 
  2095  0EC7                     	;# 
  2096  0EC8                     	;# 
  2097  0EC9                     	;# 
  2098  0ECA                     	;# 
  2099  0ECB                     	;# 
  2100  0ECC                     	;# 
  2101  0F10                     	;# 
  2102  0F11                     	;# 
  2103  0F12                     	;# 
  2104  0F13                     	;# 
  2105  0F14                     	;# 
  2106  0F15                     	;# 
  2107  0F16                     	;# 
  2108  0F17                     	;# 
  2109  0F18                     	;# 
  2110  0F19                     	;# 
  2111  0F1A                     	;# 
  2112  0F1B                     	;# 
  2113  0F1C                     	;# 
  2114  0F1D                     	;# 
  2115  0F1E                     	;# 
  2116  0F1F                     	;# 
  2117  0F20                     	;# 
  2118  0F21                     	;# 
  2119  0F22                     	;# 
  2120  0F23                     	;# 
  2121  0F24                     	;# 
  2122  0F25                     	;# 
  2123  0F26                     	;# 
  2124  0F27                     	;# 
  2125  0F38                     	;# 
  2126  0F39                     	;# 
  2127  0F3A                     	;# 
  2128  0F3B                     	;# 
  2129  0F3C                     	;# 
  2130  0F3D                     	;# 
  2131  0F3E                     	;# 
  2132  0F3F                     	;# 
  2133  0F40                     	;# 
  2134  0F41                     	;# 
  2135  0F43                     	;# 
  2136  0F44                     	;# 
  2137  0F45                     	;# 
  2138  0F46                     	;# 
  2139  0F47                     	;# 
  2140  0F48                     	;# 
  2141  0F49                     	;# 
  2142  0F4A                     	;# 
  2143  0F4B                     	;# 
  2144  0F4C                     	;# 
  2145  0F4E                     	;# 
  2146  0F4F                     	;# 
  2147  0F50                     	;# 
  2148  0F51                     	;# 
  2149  0F52                     	;# 
  2150  0F53                     	;# 
  2151  0F54                     	;# 
  2152  0F55                     	;# 
  2153  0F56                     	;# 
  2154  0F57                     	;# 
  2155  0F65                     	;# 
  2156  0F68                     	;# 
  2157  0F69                     	;# 
  2158  0F6A                     	;# 
  2159  0F6B                     	;# 
  2160  0FE4                     	;# 
  2161  0FE5                     	;# 
  2162  0FE6                     	;# 
  2163  0FE7                     	;# 
  2164  0FE8                     	;# 
  2165  0FE9                     	;# 
  2166  0FEA                     	;# 
  2167  0FEB                     	;# 
  2168  0FED                     	;# 
  2169  0FEE                     	;# 
  2170  0FEF                     	;# 
  2171  0000                     	;# 
  2172  0001                     	;# 
  2173  0002                     	;# 
  2174  0003                     	;# 
  2175  0004                     	;# 
  2176  0005                     	;# 
  2177  0006                     	;# 
  2178  0007                     	;# 
  2179  0008                     	;# 
  2180  0009                     	;# 
  2181  000A                     	;# 
  2182  000B                     	;# 
  2183  000C                     	;# 
  2184  000D                     	;# 
  2185  000E                     	;# 
  2186  0010                     	;# 
  2187  0011                     	;# 
  2188  0012                     	;# 
  2189  0013                     	;# 
  2190  0016                     	;# 
  2191  0017                     	;# 
  2192  0018                     	;# 
  2193  001C                     	;# 
  2194  001C                     	;# 
  2195  001D                     	;# 
  2196  001D                     	;# 
  2197  001E                     	;# 
  2198  001F                     	;# 
  2199  008C                     	;# 
  2200  008C                     	;# 
  2201  008D                     	;# 
  2202  008E                     	;# 
  2203  008E                     	;# 
  2204  008F                     	;# 
  2205  0090                     	;# 
  2206  0090                     	;# 
  2207  0091                     	;# 
  2208  0093                     	;# 
  2209  0094                     	;# 
  2210  0095                     	;# 
  2211  0096                     	;# 
  2212  0097                     	;# 
  2213  0098                     	;# 
  2214  0099                     	;# 
  2215  009A                     	;# 
  2216  009B                     	;# 
  2217  009C                     	;# 
  2218  009D                     	;# 
  2219  009E                     	;# 
  2220  010C                     	;# 
  2221  010D                     	;# 
  2222  010E                     	;# 
  2223  010E                     	;# 
  2224  010F                     	;# 
  2225  0110                     	;# 
  2226  0110                     	;# 
  2227  0111                     	;# 
  2228  0112                     	;# 
  2229  0112                     	;# 
  2230  0113                     	;# 
  2231  0114                     	;# 
  2232  0114                     	;# 
  2233  0115                     	;# 
  2234  0116                     	;# 
  2235  0116                     	;# 
  2236  0117                     	;# 
  2237  0119                     	;# 
  2238  0119                     	;# 
  2239  0119                     	;# 
  2240  011A                     	;# 
  2241  011A                     	;# 
  2242  011A                     	;# 
  2243  011B                     	;# 
  2244  011B                     	;# 
  2245  011B                     	;# 
  2246  011B                     	;# 
  2247  011B                     	;# 
  2248  011C                     	;# 
  2249  011C                     	;# 
  2250  011C                     	;# 
  2251  011D                     	;# 
  2252  011D                     	;# 
  2253  011D                     	;# 
  2254  011E                     	;# 
  2255  011E                     	;# 
  2256  011E                     	;# 
  2257  011F                     	;# 
  2258  011F                     	;# 
  2259  011F                     	;# 
  2260  011F                     	;# 
  2261  011F                     	;# 
  2262  018C                     	;# 
  2263  018D                     	;# 
  2264  018E                     	;# 
  2265  018F                     	;# 
  2266  0190                     	;# 
  2267  0191                     	;# 
  2268  0192                     	;# 
  2269  0196                     	;# 
  2270  0197                     	;# 
  2271  0198                     	;# 
  2272  0199                     	;# 
  2273  019A                     	;# 
  2274  019B                     	;# 
  2275  019C                     	;# 
  2276  020C                     	;# 
  2277  020C                     	;# 
  2278  020D                     	;# 
  2279  020E                     	;# 
  2280  020F                     	;# 
  2281  020F                     	;# 
  2282  0210                     	;# 
  2283  0210                     	;# 
  2284  0211                     	;# 
  2285  0211                     	;# 
  2286  0212                     	;# 
  2287  0212                     	;# 
  2288  0213                     	;# 
  2289  0214                     	;# 
  2290  0215                     	;# 
  2291  0215                     	;# 
  2292  0216                     	;# 
  2293  0216                     	;# 
  2294  0217                     	;# 
  2295  0217                     	;# 
  2296  0218                     	;# 
  2297  0218                     	;# 
  2298  0219                     	;# 
  2299  021A                     	;# 
  2300  021B                     	;# 
  2301  021B                     	;# 
  2302  021C                     	;# 
  2303  021C                     	;# 
  2304  021D                     	;# 
  2305  021D                     	;# 
  2306  021E                     	;# 
  2307  021F                     	;# 
  2308  028C                     	;# 
  2309  028C                     	;# 
  2310  028D                     	;# 
  2311  028D                     	;# 
  2312  028E                     	;# 
  2313  028F                     	;# 
  2314  0290                     	;# 
  2315  0290                     	;# 
  2316  0291                     	;# 
  2317  0292                     	;# 
  2318  0292                     	;# 
  2319  0293                     	;# 
  2320  0293                     	;# 
  2321  0294                     	;# 
  2322  0295                     	;# 
  2323  0296                     	;# 
  2324  0296                     	;# 
  2325  0297                     	;# 
  2326  0298                     	;# 
  2327  0298                     	;# 
  2328  0299                     	;# 
  2329  0299                     	;# 
  2330  029A                     	;# 
  2331  029B                     	;# 
  2332  029C                     	;# 
  2333  029C                     	;# 
  2334  029D                     	;# 
  2335  030C                     	;# 
  2336  030C                     	;# 
  2337  030D                     	;# 
  2338  030E                     	;# 
  2339  030F                     	;# 
  2340  0310                     	;# 
  2341  0310                     	;# 
  2342  0311                     	;# 
  2343  0312                     	;# 
  2344  0313                     	;# 
  2345  0314                     	;# 
  2346  0314                     	;# 
  2347  0315                     	;# 
  2348  0316                     	;# 
  2349  0317                     	;# 
  2350  0318                     	;# 
  2351  0318                     	;# 
  2352  0319                     	;# 
  2353  031A                     	;# 
  2354  031B                     	;# 
  2355  031C                     	;# 
  2356  031C                     	;# 
  2357  031D                     	;# 
  2358  031E                     	;# 
  2359  031F                     	;# 
  2360  038C                     	;# 
  2361  038D                     	;# 
  2362  038E                     	;# 
  2363  0390                     	;# 
  2364  0391                     	;# 
  2365  0392                     	;# 
  2366  040C                     	;# 
  2367  040D                     	;# 
  2368  040E                     	;# 
  2369  040F                     	;# 
  2370  0410                     	;# 
  2371  0411                     	;# 
  2372  0416                     	;# 
  2373  0416                     	;# 
  2374  0417                     	;# 
  2375  0418                     	;# 
  2376  0418                     	;# 
  2377  0419                     	;# 
  2378  041A                     	;# 
  2379  041A                     	;# 
  2380  041B                     	;# 
  2381  041C                     	;# 
  2382  041C                     	;# 
  2383  041D                     	;# 
  2384  041E                     	;# 
  2385  041F                     	;# 
  2386  048C                     	;# 
  2387  048C                     	;# 
  2388  048D                     	;# 
  2389  048E                     	;# 
  2390  048F                     	;# 
  2391  048F                     	;# 
  2392  0490                     	;# 
  2393  0491                     	;# 
  2394  0492                     	;# 
  2395  0492                     	;# 
  2396  0493                     	;# 
  2397  0494                     	;# 
  2398  0495                     	;# 
  2399  0495                     	;# 
  2400  0496                     	;# 
  2401  0497                     	;# 
  2402  0498                     	;# 
  2403  0499                     	;# 
  2404  049A                     	;# 
  2405  049B                     	;# 
  2406  049C                     	;# 
  2407  049D                     	;# 
  2408  050C                     	;# 
  2409  050C                     	;# 
  2410  050D                     	;# 
  2411  050E                     	;# 
  2412  050F                     	;# 
  2413  050F                     	;# 
  2414  0510                     	;# 
  2415  0511                     	;# 
  2416  0512                     	;# 
  2417  0512                     	;# 
  2418  0513                     	;# 
  2419  0514                     	;# 
  2420  0515                     	;# 
  2421  0515                     	;# 
  2422  0516                     	;# 
  2423  0517                     	;# 
  2424  0518                     	;# 
  2425  0519                     	;# 
  2426  051A                     	;# 
  2427  051B                     	;# 
  2428  051C                     	;# 
  2429  051D                     	;# 
  2430  058C                     	;# 
  2431  058C                     	;# 
  2432  058D                     	;# 
  2433  058E                     	;# 
  2434  058F                     	;# 
  2435  058F                     	;# 
  2436  0590                     	;# 
  2437  0591                     	;# 
  2438  0592                     	;# 
  2439  0593                     	;# 
  2440  060C                     	;# 
  2441  060D                     	;# 
  2442  060E                     	;# 
  2443  060F                     	;# 
  2444  0610                     	;# 
  2445  0611                     	;# 
  2446  0612                     	;# 
  2447  0613                     	;# 
  2448  0614                     	;# 
  2449  0616                     	;# 
  2450  0617                     	;# 
  2451  0618                     	;# 
  2452  0619                     	;# 
  2453  061A                     	;# 
  2454  061B                     	;# 
  2455  061C                     	;# 
  2456  061D                     	;# 
  2457  061E                     	;# 
  2458  068C                     	;# 
  2459  068D                     	;# 
  2460  068E                     	;# 
  2461  068F                     	;# 
  2462  0690                     	;# 
  2463  0691                     	;# 
  2464  0692                     	;# 
  2465  0693                     	;# 
  2466  0694                     	;# 
  2467  070C                     	;# 
  2468  070D                     	;# 
  2469  070E                     	;# 
  2470  070F                     	;# 
  2471  0710                     	;# 
  2472  0711                     	;# 
  2473  0712                     	;# 
  2474  0713                     	;# 
  2475  0714                     	;# 
  2476  0716                     	;# 
  2477  0717                     	;# 
  2478  0718                     	;# 
  2479  0719                     	;# 
  2480  071A                     	;# 
  2481  071B                     	;# 
  2482  071C                     	;# 
  2483  071D                     	;# 
  2484  071E                     	;# 
  2485  0796                     	;# 
  2486  0797                     	;# 
  2487  0798                     	;# 
  2488  0799                     	;# 
  2489  079A                     	;# 
  2490  079B                     	;# 
  2491  080C                     	;# 
  2492  080D                     	;# 
  2493  080E                     	;# 
  2494  080F                     	;# 
  2495  0810                     	;# 
  2496  0811                     	;# 
  2497  0812                     	;# 
  2498  0813                     	;# 
  2499  0814                     	;# 
  2500  081A                     	;# 
  2501  081B                     	;# 
  2502  081C                     	;# 
  2503  081D                     	;# 
  2504  081E                     	;# 
  2505  081F                     	;# 
  2506  088C                     	;# 
  2507  088D                     	;# 
  2508  088E                     	;# 
  2509  088F                     	;# 
  2510  0890                     	;# 
  2511  0891                     	;# 
  2512  0892                     	;# 
  2513  0893                     	;# 
  2514  0895                     	;# 
  2515  0896                     	;# 
  2516  0897                     	;# 
  2517  0898                     	;# 
  2518  0899                     	;# 
  2519  089A                     	;# 
  2520  089B                     	;# 
  2521  090C                     	;# 
  2522  090E                     	;# 
  2523  090F                     	;# 
  2524  091F                     	;# 
  2525  091F                     	;# 
  2526  098F                     	;# 
  2527  098F                     	;# 
  2528  0990                     	;# 
  2529  0991                     	;# 
  2530  0992                     	;# 
  2531  0993                     	;# 
  2532  0994                     	;# 
  2533  0995                     	;# 
  2534  0996                     	;# 
  2535  0997                     	;# 
  2536  0E0F                     	;# 
  2537  0E10                     	;# 
  2538  0E11                     	;# 
  2539  0E12                     	;# 
  2540  0E13                     	;# 
  2541  0E14                     	;# 
  2542  0E15                     	;# 
  2543  0E16                     	;# 
  2544  0E17                     	;# 
  2545  0E18                     	;# 
  2546  0E19                     	;# 
  2547  0E1A                     	;# 
  2548  0E1B                     	;# 
  2549  0E1C                     	;# 
  2550  0E1D                     	;# 
  2551  0E1E                     	;# 
  2552  0E1F                     	;# 
  2553  0E20                     	;# 
  2554  0E21                     	;# 
  2555  0E22                     	;# 
  2556  0E23                     	;# 
  2557  0E24                     	;# 
  2558  0E25                     	;# 
  2559  0E26                     	;# 
  2560  0E27                     	;# 
  2561  0E28                     	;# 
  2562  0E29                     	;# 
  2563  0E2A                     	;# 
  2564  0E2B                     	;# 
  2565  0E2C                     	;# 
  2566  0E2D                     	;# 
  2567  0E2E                     	;# 
  2568  0E2F                     	;# 
  2569  0E30                     	;# 
  2570  0E31                     	;# 
  2571  0E32                     	;# 
  2572  0E33                     	;# 
  2573  0E34                     	;# 
  2574  0E35                     	;# 
  2575  0E36                     	;# 
  2576  0E37                     	;# 
  2577  0E8F                     	;# 
  2578  0E90                     	;# 
  2579  0E91                     	;# 
  2580  0E92                     	;# 
  2581  0E93                     	;# 
  2582  0E94                     	;# 
  2583  0E95                     	;# 
  2584  0E96                     	;# 
  2585  0E97                     	;# 
  2586  0E9C                     	;# 
  2587  0E9D                     	;# 
  2588  0E9E                     	;# 
  2589  0EA1                     	;# 
  2590  0EA2                     	;# 
  2591  0EA3                     	;# 
  2592  0EA4                     	;# 
  2593  0EA5                     	;# 
  2594  0EA9                     	;# 
  2595  0EAA                     	;# 
  2596  0EAB                     	;# 
  2597  0EAC                     	;# 
  2598  0EB1                     	;# 
  2599  0EB2                     	;# 
  2600  0EB3                     	;# 
  2601  0EB8                     	;# 
  2602  0EB9                     	;# 
  2603  0EBA                     	;# 
  2604  0EBB                     	;# 
  2605  0EBC                     	;# 
  2606  0EBD                     	;# 
  2607  0EBE                     	;# 
  2608  0EC3                     	;# 
  2609  0EC5                     	;# 
  2610  0EC6                     	;# 
  2611  0EC7                     	;# 
  2612  0EC8                     	;# 
  2613  0EC9                     	;# 
  2614  0ECA                     	;# 
  2615  0ECB                     	;# 
  2616  0ECC                     	;# 
  2617  0F10                     	;# 
  2618  0F11                     	;# 
  2619  0F12                     	;# 
  2620  0F13                     	;# 
  2621  0F14                     	;# 
  2622  0F15                     	;# 
  2623  0F16                     	;# 
  2624  0F17                     	;# 
  2625  0F18                     	;# 
  2626  0F19                     	;# 
  2627  0F1A                     	;# 
  2628  0F1B                     	;# 
  2629  0F1C                     	;# 
  2630  0F1D                     	;# 
  2631  0F1E                     	;# 
  2632  0F1F                     	;# 
  2633  0F20                     	;# 
  2634  0F21                     	;# 
  2635  0F22                     	;# 
  2636  0F23                     	;# 
  2637  0F24                     	;# 
  2638  0F25                     	;# 
  2639  0F26                     	;# 
  2640  0F27                     	;# 
  2641  0F38                     	;# 
  2642  0F39                     	;# 
  2643  0F3A                     	;# 
  2644  0F3B                     	;# 
  2645  0F3C                     	;# 
  2646  0F3D                     	;# 
  2647  0F3E                     	;# 
  2648  0F3F                     	;# 
  2649  0F40                     	;# 
  2650  0F41                     	;# 
  2651  0F43                     	;# 
  2652  0F44                     	;# 
  2653  0F45                     	;# 
  2654  0F46                     	;# 
  2655  0F47                     	;# 
  2656  0F48                     	;# 
  2657  0F49                     	;# 
  2658  0F4A                     	;# 
  2659  0F4B                     	;# 
  2660  0F4C                     	;# 
  2661  0F4E                     	;# 
  2662  0F4F                     	;# 
  2663  0F50                     	;# 
  2664  0F51                     	;# 
  2665  0F52                     	;# 
  2666  0F53                     	;# 
  2667  0F54                     	;# 
  2668  0F55                     	;# 
  2669  0F56                     	;# 
  2670  0F57                     	;# 
  2671  0F65                     	;# 
  2672  0F68                     	;# 
  2673  0F69                     	;# 
  2674  0F6A                     	;# 
  2675  0F6B                     	;# 
  2676  0FE4                     	;# 
  2677  0FE5                     	;# 
  2678  0FE6                     	;# 
  2679  0FE7                     	;# 
  2680  0FE8                     	;# 
  2681  0FE9                     	;# 
  2682  0FEA                     	;# 
  2683  0FEB                     	;# 
  2684  0FED                     	;# 
  2685  0FEE                     	;# 
  2686  0FEF                     	;# 
  2687  0000                     	;# 
  2688  0001                     	;# 
  2689  0002                     	;# 
  2690  0003                     	;# 
  2691  0004                     	;# 
  2692  0005                     	;# 
  2693  0006                     	;# 
  2694  0007                     	;# 
  2695  0008                     	;# 
  2696  0009                     	;# 
  2697  000A                     	;# 
  2698  000B                     	;# 
  2699  000C                     	;# 
  2700  000D                     	;# 
  2701  000E                     	;# 
  2702  0010                     	;# 
  2703  0011                     	;# 
  2704  0012                     	;# 
  2705  0013                     	;# 
  2706  0016                     	;# 
  2707  0017                     	;# 
  2708  0018                     	;# 
  2709  001C                     	;# 
  2710  001C                     	;# 
  2711  001D                     	;# 
  2712  001D                     	;# 
  2713  001E                     	;# 
  2714  001F                     	;# 
  2715  008C                     	;# 
  2716  008C                     	;# 
  2717  008D                     	;# 
  2718  008E                     	;# 
  2719  008E                     	;# 
  2720  008F                     	;# 
  2721  0090                     	;# 
  2722  0090                     	;# 
  2723  0091                     	;# 
  2724  0093                     	;# 
  2725  0094                     	;# 
  2726  0095                     	;# 
  2727  0096                     	;# 
  2728  0097                     	;# 
  2729  0098                     	;# 
  2730  0099                     	;# 
  2731  009A                     	;# 
  2732  009B                     	;# 
  2733  009C                     	;# 
  2734  009D                     	;# 
  2735  009E                     	;# 
  2736  010C                     	;# 
  2737  010D                     	;# 
  2738  010E                     	;# 
  2739  010E                     	;# 
  2740  010F                     	;# 
  2741  0110                     	;# 
  2742  0110                     	;# 
  2743  0111                     	;# 
  2744  0112                     	;# 
  2745  0112                     	;# 
  2746  0113                     	;# 
  2747  0114                     	;# 
  2748  0114                     	;# 
  2749  0115                     	;# 
  2750  0116                     	;# 
  2751  0116                     	;# 
  2752  0117                     	;# 
  2753  0119                     	;# 
  2754  0119                     	;# 
  2755  0119                     	;# 
  2756  011A                     	;# 
  2757  011A                     	;# 
  2758  011A                     	;# 
  2759  011B                     	;# 
  2760  011B                     	;# 
  2761  011B                     	;# 
  2762  011B                     	;# 
  2763  011B                     	;# 
  2764  011C                     	;# 
  2765  011C                     	;# 
  2766  011C                     	;# 
  2767  011D                     	;# 
  2768  011D                     	;# 
  2769  011D                     	;# 
  2770  011E                     	;# 
  2771  011E                     	;# 
  2772  011E                     	;# 
  2773  011F                     	;# 
  2774  011F                     	;# 
  2775  011F                     	;# 
  2776  011F                     	;# 
  2777  011F                     	;# 
  2778  018C                     	;# 
  2779  018D                     	;# 
  2780  018E                     	;# 
  2781  018F                     	;# 
  2782  0190                     	;# 
  2783  0191                     	;# 
  2784  0192                     	;# 
  2785  0196                     	;# 
  2786  0197                     	;# 
  2787  0198                     	;# 
  2788  0199                     	;# 
  2789  019A                     	;# 
  2790  019B                     	;# 
  2791  019C                     	;# 
  2792  020C                     	;# 
  2793  020C                     	;# 
  2794  020D                     	;# 
  2795  020E                     	;# 
  2796  020F                     	;# 
  2797  020F                     	;# 
  2798  0210                     	;# 
  2799  0210                     	;# 
  2800  0211                     	;# 
  2801  0211                     	;# 
  2802  0212                     	;# 
  2803  0212                     	;# 
  2804  0213                     	;# 
  2805  0214                     	;# 
  2806  0215                     	;# 
  2807  0215                     	;# 
  2808  0216                     	;# 
  2809  0216                     	;# 
  2810  0217                     	;# 
  2811  0217                     	;# 
  2812  0218                     	;# 
  2813  0218                     	;# 
  2814  0219                     	;# 
  2815  021A                     	;# 
  2816  021B                     	;# 
  2817  021B                     	;# 
  2818  021C                     	;# 
  2819  021C                     	;# 
  2820  021D                     	;# 
  2821  021D                     	;# 
  2822  021E                     	;# 
  2823  021F                     	;# 
  2824  028C                     	;# 
  2825  028C                     	;# 
  2826  028D                     	;# 
  2827  028D                     	;# 
  2828  028E                     	;# 
  2829  028F                     	;# 
  2830  0290                     	;# 
  2831  0290                     	;# 
  2832  0291                     	;# 
  2833  0292                     	;# 
  2834  0292                     	;# 
  2835  0293                     	;# 
  2836  0293                     	;# 
  2837  0294                     	;# 
  2838  0295                     	;# 
  2839  0296                     	;# 
  2840  0296                     	;# 
  2841  0297                     	;# 
  2842  0298                     	;# 
  2843  0298                     	;# 
  2844  0299                     	;# 
  2845  0299                     	;# 
  2846  029A                     	;# 
  2847  029B                     	;# 
  2848  029C                     	;# 
  2849  029C                     	;# 
  2850  029D                     	;# 
  2851  030C                     	;# 
  2852  030C                     	;# 
  2853  030D                     	;# 
  2854  030E                     	;# 
  2855  030F                     	;# 
  2856  0310                     	;# 
  2857  0310                     	;# 
  2858  0311                     	;# 
  2859  0312                     	;# 
  2860  0313                     	;# 
  2861  0314                     	;# 
  2862  0314                     	;# 
  2863  0315                     	;# 
  2864  0316                     	;# 
  2865  0317                     	;# 
  2866  0318                     	;# 
  2867  0318                     	;# 
  2868  0319                     	;# 
  2869  031A                     	;# 
  2870  031B                     	;# 
  2871  031C                     	;# 
  2872  031C                     	;# 
  2873  031D                     	;# 
  2874  031E                     	;# 
  2875  031F                     	;# 
  2876  038C                     	;# 
  2877  038D                     	;# 
  2878  038E                     	;# 
  2879  0390                     	;# 
  2880  0391                     	;# 
  2881  0392                     	;# 
  2882  040C                     	;# 
  2883  040D                     	;# 
  2884  040E                     	;# 
  2885  040F                     	;# 
  2886  0410                     	;# 
  2887  0411                     	;# 
  2888  0416                     	;# 
  2889  0416                     	;# 
  2890  0417                     	;# 
  2891  0418                     	;# 
  2892  0418                     	;# 
  2893  0419                     	;# 
  2894  041A                     	;# 
  2895  041A                     	;# 
  2896  041B                     	;# 
  2897  041C                     	;# 
  2898  041C                     	;# 
  2899  041D                     	;# 
  2900  041E                     	;# 
  2901  041F                     	;# 
  2902  048C                     	;# 
  2903  048C                     	;# 
  2904  048D                     	;# 
  2905  048E                     	;# 
  2906  048F                     	;# 
  2907  048F                     	;# 
  2908  0490                     	;# 
  2909  0491                     	;# 
  2910  0492                     	;# 
  2911  0492                     	;# 
  2912  0493                     	;# 
  2913  0494                     	;# 
  2914  0495                     	;# 
  2915  0495                     	;# 
  2916  0496                     	;# 
  2917  0497                     	;# 
  2918  0498                     	;# 
  2919  0499                     	;# 
  2920  049A                     	;# 
  2921  049B                     	;# 
  2922  049C                     	;# 
  2923  049D                     	;# 
  2924  050C                     	;# 
  2925  050C                     	;# 
  2926  050D                     	;# 
  2927  050E                     	;# 
  2928  050F                     	;# 
  2929  050F                     	;# 
  2930  0510                     	;# 
  2931  0511                     	;# 
  2932  0512                     	;# 
  2933  0512                     	;# 
  2934  0513                     	;# 
  2935  0514                     	;# 
  2936  0515                     	;# 
  2937  0515                     	;# 
  2938  0516                     	;# 
  2939  0517                     	;# 
  2940  0518                     	;# 
  2941  0519                     	;# 
  2942  051A                     	;# 
  2943  051B                     	;# 
  2944  051C                     	;# 
  2945  051D                     	;# 
  2946  058C                     	;# 
  2947  058C                     	;# 
  2948  058D                     	;# 
  2949  058E                     	;# 
  2950  058F                     	;# 
  2951  058F                     	;# 
  2952  0590                     	;# 
  2953  0591                     	;# 
  2954  0592                     	;# 
  2955  0593                     	;# 
  2956  060C                     	;# 
  2957  060D                     	;# 
  2958  060E                     	;# 
  2959  060F                     	;# 
  2960  0610                     	;# 
  2961  0611                     	;# 
  2962  0612                     	;# 
  2963  0613                     	;# 
  2964  0614                     	;# 
  2965  0616                     	;# 
  2966  0617                     	;# 
  2967  0618                     	;# 
  2968  0619                     	;# 
  2969  061A                     	;# 
  2970  061B                     	;# 
  2971  061C                     	;# 
  2972  061D                     	;# 
  2973  061E                     	;# 
  2974  068C                     	;# 
  2975  068D                     	;# 
  2976  068E                     	;# 
  2977  068F                     	;# 
  2978  0690                     	;# 
  2979  0691                     	;# 
  2980  0692                     	;# 
  2981  0693                     	;# 
  2982  0694                     	;# 
  2983  070C                     	;# 
  2984  070D                     	;# 
  2985  070E                     	;# 
  2986  070F                     	;# 
  2987  0710                     	;# 
  2988  0711                     	;# 
  2989  0712                     	;# 
  2990  0713                     	;# 
  2991  0714                     	;# 
  2992  0716                     	;# 
  2993  0717                     	;# 
  2994  0718                     	;# 
  2995  0719                     	;# 
  2996  071A                     	;# 
  2997  071B                     	;# 
  2998  071C                     	;# 
  2999  071D                     	;# 
  3000  071E                     	;# 
  3001  0796                     	;# 
  3002  0797                     	;# 
  3003  0798                     	;# 
  3004  0799                     	;# 
  3005  079A                     	;# 
  3006  079B                     	;# 
  3007  080C                     	;# 
  3008  080D                     	;# 
  3009  080E                     	;# 
  3010  080F                     	;# 
  3011  0810                     	;# 
  3012  0811                     	;# 
  3013  0812                     	;# 
  3014  0813                     	;# 
  3015  0814                     	;# 
  3016  081A                     	;# 
  3017  081B                     	;# 
  3018  081C                     	;# 
  3019  081D                     	;# 
  3020  081E                     	;# 
  3021  081F                     	;# 
  3022  088C                     	;# 
  3023  088D                     	;# 
  3024  088E                     	;# 
  3025  088F                     	;# 
  3026  0890                     	;# 
  3027  0891                     	;# 
  3028  0892                     	;# 
  3029  0893                     	;# 
  3030  0895                     	;# 
  3031  0896                     	;# 
  3032  0897                     	;# 
  3033  0898                     	;# 
  3034  0899                     	;# 
  3035  089A                     	;# 
  3036  089B                     	;# 
  3037  090C                     	;# 
  3038  090E                     	;# 
  3039  090F                     	;# 
  3040  091F                     	;# 
  3041  091F                     	;# 
  3042  098F                     	;# 
  3043  098F                     	;# 
  3044  0990                     	;# 
  3045  0991                     	;# 
  3046  0992                     	;# 
  3047  0993                     	;# 
  3048  0994                     	;# 
  3049  0995                     	;# 
  3050  0996                     	;# 
  3051  0997                     	;# 
  3052  0E0F                     	;# 
  3053  0E10                     	;# 
  3054  0E11                     	;# 
  3055  0E12                     	;# 
  3056  0E13                     	;# 
  3057  0E14                     	;# 
  3058  0E15                     	;# 
  3059  0E16                     	;# 
  3060  0E17                     	;# 
  3061  0E18                     	;# 
  3062  0E19                     	;# 
  3063  0E1A                     	;# 
  3064  0E1B                     	;# 
  3065  0E1C                     	;# 
  3066  0E1D                     	;# 
  3067  0E1E                     	;# 
  3068  0E1F                     	;# 
  3069  0E20                     	;# 
  3070  0E21                     	;# 
  3071  0E22                     	;# 
  3072  0E23                     	;# 
  3073  0E24                     	;# 
  3074  0E25                     	;# 
  3075  0E26                     	;# 
  3076  0E27                     	;# 
  3077  0E28                     	;# 
  3078  0E29                     	;# 
  3079  0E2A                     	;# 
  3080  0E2B                     	;# 
  3081  0E2C                     	;# 
  3082  0E2D                     	;# 
  3083  0E2E                     	;# 
  3084  0E2F                     	;# 
  3085  0E30                     	;# 
  3086  0E31                     	;# 
  3087  0E32                     	;# 
  3088  0E33                     	;# 
  3089  0E34                     	;# 
  3090  0E35                     	;# 
  3091  0E36                     	;# 
  3092  0E37                     	;# 
  3093  0E8F                     	;# 
  3094  0E90                     	;# 
  3095  0E91                     	;# 
  3096  0E92                     	;# 
  3097  0E93                     	;# 
  3098  0E94                     	;# 
  3099  0E95                     	;# 
  3100  0E96                     	;# 
  3101  0E97                     	;# 
  3102  0E9C                     	;# 
  3103  0E9D                     	;# 
  3104  0E9E                     	;# 
  3105  0EA1                     	;# 
  3106  0EA2                     	;# 
  3107  0EA3                     	;# 
  3108  0EA4                     	;# 
  3109  0EA5                     	;# 
  3110  0EA9                     	;# 
  3111  0EAA                     	;# 
  3112  0EAB                     	;# 
  3113  0EAC                     	;# 
  3114  0EB1                     	;# 
  3115  0EB2                     	;# 
  3116  0EB3                     	;# 
  3117  0EB8                     	;# 
  3118  0EB9                     	;# 
  3119  0EBA                     	;# 
  3120  0EBB                     	;# 
  3121  0EBC                     	;# 
  3122  0EBD                     	;# 
  3123  0EBE                     	;# 
  3124  0EC3                     	;# 
  3125  0EC5                     	;# 
  3126  0EC6                     	;# 
  3127  0EC7                     	;# 
  3128  0EC8                     	;# 
  3129  0EC9                     	;# 
  3130  0ECA                     	;# 
  3131  0ECB                     	;# 
  3132  0ECC                     	;# 
  3133  0F10                     	;# 
  3134  0F11                     	;# 
  3135  0F12                     	;# 
  3136  0F13                     	;# 
  3137  0F14                     	;# 
  3138  0F15                     	;# 
  3139  0F16                     	;# 
  3140  0F17                     	;# 
  3141  0F18                     	;# 
  3142  0F19                     	;# 
  3143  0F1A                     	;# 
  3144  0F1B                     	;# 
  3145  0F1C                     	;# 
  3146  0F1D                     	;# 
  3147  0F1E                     	;# 
  3148  0F1F                     	;# 
  3149  0F20                     	;# 
  3150  0F21                     	;# 
  3151  0F22                     	;# 
  3152  0F23                     	;# 
  3153  0F24                     	;# 
  3154  0F25                     	;# 
  3155  0F26                     	;# 
  3156  0F27                     	;# 
  3157  0F38                     	;# 
  3158  0F39                     	;# 
  3159  0F3A                     	;# 
  3160  0F3B                     	;# 
  3161  0F3C                     	;# 
  3162  0F3D                     	;# 
  3163  0F3E                     	;# 
  3164  0F3F                     	;# 
  3165  0F40                     	;# 
  3166  0F41                     	;# 
  3167  0F43                     	;# 
  3168  0F44                     	;# 
  3169  0F45                     	;# 
  3170  0F46                     	;# 
  3171  0F47                     	;# 
  3172  0F48                     	;# 
  3173  0F49                     	;# 
  3174  0F4A                     	;# 
  3175  0F4B                     	;# 
  3176  0F4C                     	;# 
  3177  0F4E                     	;# 
  3178  0F4F                     	;# 
  3179  0F50                     	;# 
  3180  0F51                     	;# 
  3181  0F52                     	;# 
  3182  0F53                     	;# 
  3183  0F54                     	;# 
  3184  0F55                     	;# 
  3185  0F56                     	;# 
  3186  0F57                     	;# 
  3187  0F65                     	;# 
  3188  0F68                     	;# 
  3189  0F69                     	;# 
  3190  0F6A                     	;# 
  3191  0F6B                     	;# 
  3192  0FE4                     	;# 
  3193  0FE5                     	;# 
  3194  0FE6                     	;# 
  3195  0FE7                     	;# 
  3196  0FE8                     	;# 
  3197  0FE9                     	;# 
  3198  0FEA                     	;# 
  3199  0FEB                     	;# 
  3200  0FED                     	;# 
  3201  0FEE                     	;# 
  3202  0FEF                     	;# 
  3203  0000                     	;# 
  3204  0001                     	;# 
  3205  0002                     	;# 
  3206  0003                     	;# 
  3207  0004                     	;# 
  3208  0005                     	;# 
  3209  0006                     	;# 
  3210  0007                     	;# 
  3211  0008                     	;# 
  3212  0009                     	;# 
  3213  000A                     	;# 
  3214  000B                     	;# 
  3215  000C                     	;# 
  3216  000D                     	;# 
  3217  000E                     	;# 
  3218  0010                     	;# 
  3219  0011                     	;# 
  3220  0012                     	;# 
  3221  0013                     	;# 
  3222  0016                     	;# 
  3223  0017                     	;# 
  3224  0018                     	;# 
  3225  001C                     	;# 
  3226  001C                     	;# 
  3227  001D                     	;# 
  3228  001D                     	;# 
  3229  001E                     	;# 
  3230  001F                     	;# 
  3231  008C                     	;# 
  3232  008C                     	;# 
  3233  008D                     	;# 
  3234  008E                     	;# 
  3235  008E                     	;# 
  3236  008F                     	;# 
  3237  0090                     	;# 
  3238  0090                     	;# 
  3239  0091                     	;# 
  3240  0093                     	;# 
  3241  0094                     	;# 
  3242  0095                     	;# 
  3243  0096                     	;# 
  3244  0097                     	;# 
  3245  0098                     	;# 
  3246  0099                     	;# 
  3247  009A                     	;# 
  3248  009B                     	;# 
  3249  009C                     	;# 
  3250  009D                     	;# 
  3251  009E                     	;# 
  3252  010C                     	;# 
  3253  010D                     	;# 
  3254  010E                     	;# 
  3255  010E                     	;# 
  3256  010F                     	;# 
  3257  0110                     	;# 
  3258  0110                     	;# 
  3259  0111                     	;# 
  3260  0112                     	;# 
  3261  0112                     	;# 
  3262  0113                     	;# 
  3263  0114                     	;# 
  3264  0114                     	;# 
  3265  0115                     	;# 
  3266  0116                     	;# 
  3267  0116                     	;# 
  3268  0117                     	;# 
  3269  0119                     	;# 
  3270  0119                     	;# 
  3271  0119                     	;# 
  3272  011A                     	;# 
  3273  011A                     	;# 
  3274  011A                     	;# 
  3275  011B                     	;# 
  3276  011B                     	;# 
  3277  011B                     	;# 
  3278  011B                     	;# 
  3279  011B                     	;# 
  3280  011C                     	;# 
  3281  011C                     	;# 
  3282  011C                     	;# 
  3283  011D                     	;# 
  3284  011D                     	;# 
  3285  011D                     	;# 
  3286  011E                     	;# 
  3287  011E                     	;# 
  3288  011E                     	;# 
  3289  011F                     	;# 
  3290  011F                     	;# 
  3291  011F                     	;# 
  3292  011F                     	;# 
  3293  011F                     	;# 
  3294  018C                     	;# 
  3295  018D                     	;# 
  3296  018E                     	;# 
  3297  018F                     	;# 
  3298  0190                     	;# 
  3299  0191                     	;# 
  3300  0192                     	;# 
  3301  0196                     	;# 
  3302  0197                     	;# 
  3303  0198                     	;# 
  3304  0199                     	;# 
  3305  019A                     	;# 
  3306  019B                     	;# 
  3307  019C                     	;# 
  3308  020C                     	;# 
  3309  020C                     	;# 
  3310  020D                     	;# 
  3311  020E                     	;# 
  3312  020F                     	;# 
  3313  020F                     	;# 
  3314  0210                     	;# 
  3315  0210                     	;# 
  3316  0211                     	;# 
  3317  0211                     	;# 
  3318  0212                     	;# 
  3319  0212                     	;# 
  3320  0213                     	;# 
  3321  0214                     	;# 
  3322  0215                     	;# 
  3323  0215                     	;# 
  3324  0216                     	;# 
  3325  0216                     	;# 
  3326  0217                     	;# 
  3327  0217                     	;# 
  3328  0218                     	;# 
  3329  0218                     	;# 
  3330  0219                     	;# 
  3331  021A                     	;# 
  3332  021B                     	;# 
  3333  021B                     	;# 
  3334  021C                     	;# 
  3335  021C                     	;# 
  3336  021D                     	;# 
  3337  021D                     	;# 
  3338  021E                     	;# 
  3339  021F                     	;# 
  3340  028C                     	;# 
  3341  028C                     	;# 
  3342  028D                     	;# 
  3343  028D                     	;# 
  3344  028E                     	;# 
  3345  028F                     	;# 
  3346  0290                     	;# 
  3347  0290                     	;# 
  3348  0291                     	;# 
  3349  0292                     	;# 
  3350  0292                     	;# 
  3351  0293                     	;# 
  3352  0293                     	;# 
  3353  0294                     	;# 
  3354  0295                     	;# 
  3355  0296                     	;# 
  3356  0296                     	;# 
  3357  0297                     	;# 
  3358  0298                     	;# 
  3359  0298                     	;# 
  3360  0299                     	;# 
  3361  0299                     	;# 
  3362  029A                     	;# 
  3363  029B                     	;# 
  3364  029C                     	;# 
  3365  029C                     	;# 
  3366  029D                     	;# 
  3367  030C                     	;# 
  3368  030C                     	;# 
  3369  030D                     	;# 
  3370  030E                     	;# 
  3371  030F                     	;# 
  3372  0310                     	;# 
  3373  0310                     	;# 
  3374  0311                     	;# 
  3375  0312                     	;# 
  3376  0313                     	;# 
  3377  0314                     	;# 
  3378  0314                     	;# 
  3379  0315                     	;# 
  3380  0316                     	;# 
  3381  0317                     	;# 
  3382  0318                     	;# 
  3383  0318                     	;# 
  3384  0319                     	;# 
  3385  031A                     	;# 
  3386  031B                     	;# 
  3387  031C                     	;# 
  3388  031C                     	;# 
  3389  031D                     	;# 
  3390  031E                     	;# 
  3391  031F                     	;# 
  3392  038C                     	;# 
  3393  038D                     	;# 
  3394  038E                     	;# 
  3395  0390                     	;# 
  3396  0391                     	;# 
  3397  0392                     	;# 
  3398  040C                     	;# 
  3399  040D                     	;# 
  3400  040E                     	;# 
  3401  040F                     	;# 
  3402  0410                     	;# 
  3403  0411                     	;# 
  3404  0416                     	;# 
  3405  0416                     	;# 
  3406  0417                     	;# 
  3407  0418                     	;# 
  3408  0418                     	;# 
  3409  0419                     	;# 
  3410  041A                     	;# 
  3411  041A                     	;# 
  3412  041B                     	;# 
  3413  041C                     	;# 
  3414  041C                     	;# 
  3415  041D                     	;# 
  3416  041E                     	;# 
  3417  041F                     	;# 
  3418  048C                     	;# 
  3419  048C                     	;# 
  3420  048D                     	;# 
  3421  048E                     	;# 
  3422  048F                     	;# 
  3423  048F                     	;# 
  3424  0490                     	;# 
  3425  0491                     	;# 
  3426  0492                     	;# 
  3427  0492                     	;# 
  3428  0493                     	;# 
  3429  0494                     	;# 
  3430  0495                     	;# 
  3431  0495                     	;# 
  3432  0496                     	;# 
  3433  0497                     	;# 
  3434  0498                     	;# 
  3435  0499                     	;# 
  3436  049A                     	;# 
  3437  049B                     	;# 
  3438  049C                     	;# 
  3439  049D                     	;# 
  3440  050C                     	;# 
  3441  050C                     	;# 
  3442  050D                     	;# 
  3443  050E                     	;# 
  3444  050F                     	;# 
  3445  050F                     	;# 
  3446  0510                     	;# 
  3447  0511                     	;# 
  3448  0512                     	;# 
  3449  0512                     	;# 
  3450  0513                     	;# 
  3451  0514                     	;# 
  3452  0515                     	;# 
  3453  0515                     	;# 
  3454  0516                     	;# 
  3455  0517                     	;# 
  3456  0518                     	;# 
  3457  0519                     	;# 
  3458  051A                     	;# 
  3459  051B                     	;# 
  3460  051C                     	;# 
  3461  051D                     	;# 
  3462  058C                     	;# 
  3463  058C                     	;# 
  3464  058D                     	;# 
  3465  058E                     	;# 
  3466  058F                     	;# 
  3467  058F                     	;# 
  3468  0590                     	;# 
  3469  0591                     	;# 
  3470  0592                     	;# 
  3471  0593                     	;# 
  3472  060C                     	;# 
  3473  060D                     	;# 
  3474  060E                     	;# 
  3475  060F                     	;# 
  3476  0610                     	;# 
  3477  0611                     	;# 
  3478  0612                     	;# 
  3479  0613                     	;# 
  3480  0614                     	;# 
  3481  0616                     	;# 
  3482  0617                     	;# 
  3483  0618                     	;# 
  3484  0619                     	;# 
  3485  061A                     	;# 
  3486  061B                     	;# 
  3487  061C                     	;# 
  3488  061D                     	;# 
  3489  061E                     	;# 
  3490  068C                     	;# 
  3491  068D                     	;# 
  3492  068E                     	;# 
  3493  068F                     	;# 
  3494  0690                     	;# 
  3495  0691                     	;# 
  3496  0692                     	;# 
  3497  0693                     	;# 
  3498  0694                     	;# 
  3499  070C                     	;# 
  3500  070D                     	;# 
  3501  070E                     	;# 
  3502  070F                     	;# 
  3503  0710                     	;# 
  3504  0711                     	;# 
  3505  0712                     	;# 
  3506  0713                     	;# 
  3507  0714                     	;# 
  3508  0716                     	;# 
  3509  0717                     	;# 
  3510  0718                     	;# 
  3511  0719                     	;# 
  3512  071A                     	;# 
  3513  071B                     	;# 
  3514  071C                     	;# 
  3515  071D                     	;# 
  3516  071E                     	;# 
  3517  0796                     	;# 
  3518  0797                     	;# 
  3519  0798                     	;# 
  3520  0799                     	;# 
  3521  079A                     	;# 
  3522  079B                     	;# 
  3523  080C                     	;# 
  3524  080D                     	;# 
  3525  080E                     	;# 
  3526  080F                     	;# 
  3527  0810                     	;# 
  3528  0811                     	;# 
  3529  0812                     	;# 
  3530  0813                     	;# 
  3531  0814                     	;# 
  3532  081A                     	;# 
  3533  081B                     	;# 
  3534  081C                     	;# 
  3535  081D                     	;# 
  3536  081E                     	;# 
  3537  081F                     	;# 
  3538  088C                     	;# 
  3539  088D                     	;# 
  3540  088E                     	;# 
  3541  088F                     	;# 
  3542  0890                     	;# 
  3543  0891                     	;# 
  3544  0892                     	;# 
  3545  0893                     	;# 
  3546  0895                     	;# 
  3547  0896                     	;# 
  3548  0897                     	;# 
  3549  0898                     	;# 
  3550  0899                     	;# 
  3551  089A                     	;# 
  3552  089B                     	;# 
  3553  090C                     	;# 
  3554  090E                     	;# 
  3555  090F                     	;# 
  3556  091F                     	;# 
  3557  091F                     	;# 
  3558  098F                     	;# 
  3559  098F                     	;# 
  3560  0990                     	;# 
  3561  0991                     	;# 
  3562  0992                     	;# 
  3563  0993                     	;# 
  3564  0994                     	;# 
  3565  0995                     	;# 
  3566  0996                     	;# 
  3567  0997                     	;# 
  3568  0E0F                     	;# 
  3569  0E10                     	;# 
  3570  0E11                     	;# 
  3571  0E12                     	;# 
  3572  0E13                     	;# 
  3573  0E14                     	;# 
  3574  0E15                     	;# 
  3575  0E16                     	;# 
  3576  0E17                     	;# 
  3577  0E18                     	;# 
  3578  0E19                     	;# 
  3579  0E1A                     	;# 
  3580  0E1B                     	;# 
  3581  0E1C                     	;# 
  3582  0E1D                     	;# 
  3583  0E1E                     	;# 
  3584  0E1F                     	;# 
  3585  0E20                     	;# 
  3586  0E21                     	;# 
  3587  0E22                     	;# 
  3588  0E23                     	;# 
  3589  0E24                     	;# 
  3590  0E25                     	;# 
  3591  0E26                     	;# 
  3592  0E27                     	;# 
  3593  0E28                     	;# 
  3594  0E29                     	;# 
  3595  0E2A                     	;# 
  3596  0E2B                     	;# 
  3597  0E2C                     	;# 
  3598  0E2D                     	;# 
  3599  0E2E                     	;# 
  3600  0E2F                     	;# 
  3601  0E30                     	;# 
  3602  0E31                     	;# 
  3603  0E32                     	;# 
  3604  0E33                     	;# 
  3605  0E34                     	;# 
  3606  0E35                     	;# 
  3607  0E36                     	;# 
  3608  0E37                     	;# 
  3609  0E8F                     	;# 
  3610  0E90                     	;# 
  3611  0E91                     	;# 
  3612  0E92                     	;# 
  3613  0E93                     	;# 
  3614  0E94                     	;# 
  3615  0E95                     	;# 
  3616  0E96                     	;# 
  3617  0E97                     	;# 
  3618  0E9C                     	;# 
  3619  0E9D                     	;# 
  3620  0E9E                     	;# 
  3621  0EA1                     	;# 
  3622  0EA2                     	;# 
  3623  0EA3                     	;# 
  3624  0EA4                     	;# 
  3625  0EA5                     	;# 
  3626  0EA9                     	;# 
  3627  0EAA                     	;# 
  3628  0EAB                     	;# 
  3629  0EAC                     	;# 
  3630  0EB1                     	;# 
  3631  0EB2                     	;# 
  3632  0EB3                     	;# 
  3633  0EB8                     	;# 
  3634  0EB9                     	;# 
  3635  0EBA                     	;# 
  3636  0EBB                     	;# 
  3637  0EBC                     	;# 
  3638  0EBD                     	;# 
  3639  0EBE                     	;# 
  3640  0EC3                     	;# 
  3641  0EC5                     	;# 
  3642  0EC6                     	;# 
  3643  0EC7                     	;# 
  3644  0EC8                     	;# 
  3645  0EC9                     	;# 
  3646  0ECA                     	;# 
  3647  0ECB                     	;# 
  3648  0ECC                     	;# 
  3649  0F10                     	;# 
  3650  0F11                     	;# 
  3651  0F12                     	;# 
  3652  0F13                     	;# 
  3653  0F14                     	;# 
  3654  0F15                     	;# 
  3655  0F16                     	;# 
  3656  0F17                     	;# 
  3657  0F18                     	;# 
  3658  0F19                     	;# 
  3659  0F1A                     	;# 
  3660  0F1B                     	;# 
  3661  0F1C                     	;# 
  3662  0F1D                     	;# 
  3663  0F1E                     	;# 
  3664  0F1F                     	;# 
  3665  0F20                     	;# 
  3666  0F21                     	;# 
  3667  0F22                     	;# 
  3668  0F23                     	;# 
  3669  0F24                     	;# 
  3670  0F25                     	;# 
  3671  0F26                     	;# 
  3672  0F27                     	;# 
  3673  0F38                     	;# 
  3674  0F39                     	;# 
  3675  0F3A                     	;# 
  3676  0F3B                     	;# 
  3677  0F3C                     	;# 
  3678  0F3D                     	;# 
  3679  0F3E                     	;# 
  3680  0F3F                     	;# 
  3681  0F40                     	;# 
  3682  0F41                     	;# 
  3683  0F43                     	;# 
  3684  0F44                     	;# 
  3685  0F45                     	;# 
  3686  0F46                     	;# 
  3687  0F47                     	;# 
  3688  0F48                     	;# 
  3689  0F49                     	;# 
  3690  0F4A                     	;# 
  3691  0F4B                     	;# 
  3692  0F4C                     	;# 
  3693  0F4E                     	;# 
  3694  0F4F                     	;# 
  3695  0F50                     	;# 
  3696  0F51                     	;# 
  3697  0F52                     	;# 
  3698  0F53                     	;# 
  3699  0F54                     	;# 
  3700  0F55                     	;# 
  3701  0F56                     	;# 
  3702  0F57                     	;# 
  3703  0F65                     	;# 
  3704  0F68                     	;# 
  3705  0F69                     	;# 
  3706  0F6A                     	;# 
  3707  0F6B                     	;# 
  3708  0FE4                     	;# 
  3709  0FE5                     	;# 
  3710  0FE6                     	;# 
  3711  0FE7                     	;# 
  3712  0FE8                     	;# 
  3713  0FE9                     	;# 
  3714  0FEA                     	;# 
  3715  0FEB                     	;# 
  3716  0FED                     	;# 
  3717  0FEE                     	;# 
  3718  0FEF                     	;# 
  3719  0000                     	;# 
  3720  0001                     	;# 
  3721  0002                     	;# 
  3722  0003                     	;# 
  3723  0004                     	;# 
  3724  0005                     	;# 
  3725  0006                     	;# 
  3726  0007                     	;# 
  3727  0008                     	;# 
  3728  0009                     	;# 
  3729  000A                     	;# 
  3730  000B                     	;# 
  3731  000C                     	;# 
  3732  000D                     	;# 
  3733  000E                     	;# 
  3734  0010                     	;# 
  3735  0011                     	;# 
  3736  0012                     	;# 
  3737  0013                     	;# 
  3738  0016                     	;# 
  3739  0017                     	;# 
  3740  0018                     	;# 
  3741  001C                     	;# 
  3742  001C                     	;# 
  3743  001D                     	;# 
  3744  001D                     	;# 
  3745  001E                     	;# 
  3746  001F                     	;# 
  3747  008C                     	;# 
  3748  008C                     	;# 
  3749  008D                     	;# 
  3750  008E                     	;# 
  3751  008E                     	;# 
  3752  008F                     	;# 
  3753  0090                     	;# 
  3754  0090                     	;# 
  3755  0091                     	;# 
  3756  0093                     	;# 
  3757  0094                     	;# 
  3758  0095                     	;# 
  3759  0096                     	;# 
  3760  0097                     	;# 
  3761  0098                     	;# 
  3762  0099                     	;# 
  3763  009A                     	;# 
  3764  009B                     	;# 
  3765  009C                     	;# 
  3766  009D                     	;# 
  3767  009E                     	;# 
  3768  010C                     	;# 
  3769  010D                     	;# 
  3770  010E                     	;# 
  3771  010E                     	;# 
  3772  010F                     	;# 
  3773  0110                     	;# 
  3774  0110                     	;# 
  3775  0111                     	;# 
  3776  0112                     	;# 
  3777  0112                     	;# 
  3778  0113                     	;# 
  3779  0114                     	;# 
  3780  0114                     	;# 
  3781  0115                     	;# 
  3782  0116                     	;# 
  3783  0116                     	;# 
  3784  0117                     	;# 
  3785  0119                     	;# 
  3786  0119                     	;# 
  3787  0119                     	;# 
  3788  011A                     	;# 
  3789  011A                     	;# 
  3790  011A                     	;# 
  3791  011B                     	;# 
  3792  011B                     	;# 
  3793  011B                     	;# 
  3794  011B                     	;# 
  3795  011B                     	;# 
  3796  011C                     	;# 
  3797  011C                     	;# 
  3798  011C                     	;# 
  3799  011D                     	;# 
  3800  011D                     	;# 
  3801  011D                     	;# 
  3802  011E                     	;# 
  3803  011E                     	;# 
  3804  011E                     	;# 
  3805  011F                     	;# 
  3806  011F                     	;# 
  3807  011F                     	;# 
  3808  011F                     	;# 
  3809  011F                     	;# 
  3810  018C                     	;# 
  3811  018D                     	;# 
  3812  018E                     	;# 
  3813  018F                     	;# 
  3814  0190                     	;# 
  3815  0191                     	;# 
  3816  0192                     	;# 
  3817  0196                     	;# 
  3818  0197                     	;# 
  3819  0198                     	;# 
  3820  0199                     	;# 
  3821  019A                     	;# 
  3822  019B                     	;# 
  3823  019C                     	;# 
  3824  020C                     	;# 
  3825  020C                     	;# 
  3826  020D                     	;# 
  3827  020E                     	;# 
  3828  020F                     	;# 
  3829  020F                     	;# 
  3830  0210                     	;# 
  3831  0210                     	;# 
  3832  0211                     	;# 
  3833  0211                     	;# 
  3834  0212                     	;# 
  3835  0212                     	;# 
  3836  0213                     	;# 
  3837  0214                     	;# 
  3838  0215                     	;# 
  3839  0215                     	;# 
  3840  0216                     	;# 
  3841  0216                     	;# 
  3842  0217                     	;# 
  3843  0217                     	;# 
  3844  0218                     	;# 
  3845  0218                     	;# 
  3846  0219                     	;# 
  3847  021A                     	;# 
  3848  021B                     	;# 
  3849  021B                     	;# 
  3850  021C                     	;# 
  3851  021C                     	;# 
  3852  021D                     	;# 
  3853  021D                     	;# 
  3854  021E                     	;# 
  3855  021F                     	;# 
  3856  028C                     	;# 
  3857  028C                     	;# 
  3858  028D                     	;# 
  3859  028D                     	;# 
  3860  028E                     	;# 
  3861  028F                     	;# 
  3862  0290                     	;# 
  3863  0290                     	;# 
  3864  0291                     	;# 
  3865  0292                     	;# 
  3866  0292                     	;# 
  3867  0293                     	;# 
  3868  0293                     	;# 
  3869  0294                     	;# 
  3870  0295                     	;# 
  3871  0296                     	;# 
  3872  0296                     	;# 
  3873  0297                     	;# 
  3874  0298                     	;# 
  3875  0298                     	;# 
  3876  0299                     	;# 
  3877  0299                     	;# 
  3878  029A                     	;# 
  3879  029B                     	;# 
  3880  029C                     	;# 
  3881  029C                     	;# 
  3882  029D                     	;# 
  3883  030C                     	;# 
  3884  030C                     	;# 
  3885  030D                     	;# 
  3886  030E                     	;# 
  3887  030F                     	;# 
  3888  0310                     	;# 
  3889  0310                     	;# 
  3890  0311                     	;# 
  3891  0312                     	;# 
  3892  0313                     	;# 
  3893  0314                     	;# 
  3894  0314                     	;# 
  3895  0315                     	;# 
  3896  0316                     	;# 
  3897  0317                     	;# 
  3898  0318                     	;# 
  3899  0318                     	;# 
  3900  0319                     	;# 
  3901  031A                     	;# 
  3902  031B                     	;# 
  3903  031C                     	;# 
  3904  031C                     	;# 
  3905  031D                     	;# 
  3906  031E                     	;# 
  3907  031F                     	;# 
  3908  038C                     	;# 
  3909  038D                     	;# 
  3910  038E                     	;# 
  3911  0390                     	;# 
  3912  0391                     	;# 
  3913  0392                     	;# 
  3914  040C                     	;# 
  3915  040D                     	;# 
  3916  040E                     	;# 
  3917  040F                     	;# 
  3918  0410                     	;# 
  3919  0411                     	;# 
  3920  0416                     	;# 
  3921  0416                     	;# 
  3922  0417                     	;# 
  3923  0418                     	;# 
  3924  0418                     	;# 
  3925  0419                     	;# 
  3926  041A                     	;# 
  3927  041A                     	;# 
  3928  041B                     	;# 
  3929  041C                     	;# 
  3930  041C                     	;# 
  3931  041D                     	;# 
  3932  041E                     	;# 
  3933  041F                     	;# 
  3934  048C                     	;# 
  3935  048C                     	;# 
  3936  048D                     	;# 
  3937  048E                     	;# 
  3938  048F                     	;# 
  3939  048F                     	;# 
  3940  0490                     	;# 
  3941  0491                     	;# 
  3942  0492                     	;# 
  3943  0492                     	;# 
  3944  0493                     	;# 
  3945  0494                     	;# 
  3946  0495                     	;# 
  3947  0495                     	;# 
  3948  0496                     	;# 
  3949  0497                     	;# 
  3950  0498                     	;# 
  3951  0499                     	;# 
  3952  049A                     	;# 
  3953  049B                     	;# 
  3954  049C                     	;# 
  3955  049D                     	;# 
  3956  050C                     	;# 
  3957  050C                     	;# 
  3958  050D                     	;# 
  3959  050E                     	;# 
  3960  050F                     	;# 
  3961  050F                     	;# 
  3962  0510                     	;# 
  3963  0511                     	;# 
  3964  0512                     	;# 
  3965  0512                     	;# 
  3966  0513                     	;# 
  3967  0514                     	;# 
  3968  0515                     	;# 
  3969  0515                     	;# 
  3970  0516                     	;# 
  3971  0517                     	;# 
  3972  0518                     	;# 
  3973  0519                     	;# 
  3974  051A                     	;# 
  3975  051B                     	;# 
  3976  051C                     	;# 
  3977  051D                     	;# 
  3978  058C                     	;# 
  3979  058C                     	;# 
  3980  058D                     	;# 
  3981  058E                     	;# 
  3982  058F                     	;# 
  3983  058F                     	;# 
  3984  0590                     	;# 
  3985  0591                     	;# 
  3986  0592                     	;# 
  3987  0593                     	;# 
  3988  060C                     	;# 
  3989  060D                     	;# 
  3990  060E                     	;# 
  3991  060F                     	;# 
  3992  0610                     	;# 
  3993  0611                     	;# 
  3994  0612                     	;# 
  3995  0613                     	;# 
  3996  0614                     	;# 
  3997  0616                     	;# 
  3998  0617                     	;# 
  3999  0618                     	;# 
  4000  0619                     	;# 
  4001  061A                     	;# 
  4002  061B                     	;# 
  4003  061C                     	;# 
  4004  061D                     	;# 
  4005  061E                     	;# 
  4006  068C                     	;# 
  4007  068D                     	;# 
  4008  068E                     	;# 
  4009  068F                     	;# 
  4010  0690                     	;# 
  4011  0691                     	;# 
  4012  0692                     	;# 
  4013  0693                     	;# 
  4014  0694                     	;# 
  4015  070C                     	;# 
  4016  070D                     	;# 
  4017  070E                     	;# 
  4018  070F                     	;# 
  4019  0710                     	;# 
  4020  0711                     	;# 
  4021  0712                     	;# 
  4022  0713                     	;# 
  4023  0714                     	;# 
  4024  0716                     	;# 
  4025  0717                     	;# 
  4026  0718                     	;# 
  4027  0719                     	;# 
  4028  071A                     	;# 
  4029  071B                     	;# 
  4030  071C                     	;# 
  4031  071D                     	;# 
  4032  071E                     	;# 
  4033  0796                     	;# 
  4034  0797                     	;# 
  4035  0798                     	;# 
  4036  0799                     	;# 
  4037  079A                     	;# 
  4038  079B                     	;# 
  4039  080C                     	;# 
  4040  080D                     	;# 
  4041  080E                     	;# 
  4042  080F                     	;# 
  4043  0810                     	;# 
  4044  0811                     	;# 
  4045  0812                     	;# 
  4046  0813                     	;# 
  4047  0814                     	;# 
  4048  081A                     	;# 
  4049  081B                     	;# 
  4050  081C                     	;# 
  4051  081D                     	;# 
  4052  081E                     	;# 
  4053  081F                     	;# 
  4054  088C                     	;# 
  4055  088D                     	;# 
  4056  088E                     	;# 
  4057  088F                     	;# 
  4058  0890                     	;# 
  4059  0891                     	;# 
  4060  0892                     	;# 
  4061  0893                     	;# 
  4062  0895                     	;# 
  4063  0896                     	;# 
  4064  0897                     	;# 
  4065  0898                     	;# 
  4066  0899                     	;# 
  4067  089A                     	;# 
  4068  089B                     	;# 
  4069  090C                     	;# 
  4070  090E                     	;# 
  4071  090F                     	;# 
  4072  091F                     	;# 
  4073  091F                     	;# 
  4074  098F                     	;# 
  4075  098F                     	;# 
  4076  0990                     	;# 
  4077  0991                     	;# 
  4078  0992                     	;# 
  4079  0993                     	;# 
  4080  0994                     	;# 
  4081  0995                     	;# 
  4082  0996                     	;# 
  4083  0997                     	;# 
  4084  0E0F                     	;# 
  4085  0E10                     	;# 
  4086  0E11                     	;# 
  4087  0E12                     	;# 
  4088  0E13                     	;# 
  4089  0E14                     	;# 
  4090  0E15                     	;# 
  4091  0E16                     	;# 
  4092  0E17                     	;# 
  4093  0E18                     	;# 
  4094  0E19                     	;# 
  4095  0E1A                     	;# 
  4096  0E1B                     	;# 
  4097  0E1C                     	;# 
  4098  0E1D                     	;# 
  4099  0E1E                     	;# 
  4100  0E1F                     	;# 
  4101  0E20                     	;# 
  4102  0E21                     	;# 
  4103  0E22                     	;# 
  4104  0E23                     	;# 
  4105  0E24                     	;# 
  4106  0E25                     	;# 
  4107  0E26                     	;# 
  4108  0E27                     	;# 
  4109  0E28                     	;# 
  4110  0E29                     	;# 
  4111  0E2A                     	;# 
  4112  0E2B                     	;# 
  4113  0E2C                     	;# 
  4114  0E2D                     	;# 
  4115  0E2E                     	;# 
  4116  0E2F                     	;# 
  4117  0E30                     	;# 
  4118  0E31                     	;# 
  4119  0E32                     	;# 
  4120  0E33                     	;# 
  4121  0E34                     	;# 
  4122  0E35                     	;# 
  4123  0E36                     	;# 
  4124  0E37                     	;# 
  4125  0E8F                     	;# 
  4126  0E90                     	;# 
  4127  0E91                     	;# 
  4128  0E92                     	;# 
  4129  0E93                     	;# 
  4130  0E94                     	;# 
  4131  0E95                     	;# 
  4132  0E96                     	;# 
  4133  0E97                     	;# 
  4134  0E9C                     	;# 
  4135  0E9D                     	;# 
  4136  0E9E                     	;# 
  4137  0EA1                     	;# 
  4138  0EA2                     	;# 
  4139  0EA3                     	;# 
  4140  0EA4                     	;# 
  4141  0EA5                     	;# 
  4142  0EA9                     	;# 
  4143  0EAA                     	;# 
  4144  0EAB                     	;# 
  4145  0EAC                     	;# 
  4146  0EB1                     	;# 
  4147  0EB2                     	;# 
  4148  0EB3                     	;# 
  4149  0EB8                     	;# 
  4150  0EB9                     	;# 
  4151  0EBA                     	;# 
  4152  0EBB                     	;# 
  4153  0EBC                     	;# 
  4154  0EBD                     	;# 
  4155  0EBE                     	;# 
  4156  0EC3                     	;# 
  4157  0EC5                     	;# 
  4158  0EC6                     	;# 
  4159  0EC7                     	;# 
  4160  0EC8                     	;# 
  4161  0EC9                     	;# 
  4162  0ECA                     	;# 
  4163  0ECB                     	;# 
  4164  0ECC                     	;# 
  4165  0F10                     	;# 
  4166  0F11                     	;# 
  4167  0F12                     	;# 
  4168  0F13                     	;# 
  4169  0F14                     	;# 
  4170  0F15                     	;# 
  4171  0F16                     	;# 
  4172  0F17                     	;# 
  4173  0F18                     	;# 
  4174  0F19                     	;# 
  4175  0F1A                     	;# 
  4176  0F1B                     	;# 
  4177  0F1C                     	;# 
  4178  0F1D                     	;# 
  4179  0F1E                     	;# 
  4180  0F1F                     	;# 
  4181  0F20                     	;# 
  4182  0F21                     	;# 
  4183  0F22                     	;# 
  4184  0F23                     	;# 
  4185  0F24                     	;# 
  4186  0F25                     	;# 
  4187  0F26                     	;# 
  4188  0F27                     	;# 
  4189  0F38                     	;# 
  4190  0F39                     	;# 
  4191  0F3A                     	;# 
  4192  0F3B                     	;# 
  4193  0F3C                     	;# 
  4194  0F3D                     	;# 
  4195  0F3E                     	;# 
  4196  0F3F                     	;# 
  4197  0F40                     	;# 
  4198  0F41                     	;# 
  4199  0F43                     	;# 
  4200  0F44                     	;# 
  4201  0F45                     	;# 
  4202  0F46                     	;# 
  4203  0F47                     	;# 
  4204  0F48                     	;# 
  4205  0F49                     	;# 
  4206  0F4A                     	;# 
  4207  0F4B                     	;# 
  4208  0F4C                     	;# 
  4209  0F4E                     	;# 
  4210  0F4F                     	;# 
  4211  0F50                     	;# 
  4212  0F51                     	;# 
  4213  0F52                     	;# 
  4214  0F53                     	;# 
  4215  0F54                     	;# 
  4216  0F55                     	;# 
  4217  0F56                     	;# 
  4218  0F57                     	;# 
  4219  0F65                     	;# 
  4220  0F68                     	;# 
  4221  0F69                     	;# 
  4222  0F6A                     	;# 
  4223  0F6B                     	;# 
  4224  0FE4                     	;# 
  4225  0FE5                     	;# 
  4226  0FE6                     	;# 
  4227  0FE7                     	;# 
  4228  0FE8                     	;# 
  4229  0FE9                     	;# 
  4230  0FEA                     	;# 
  4231  0FEB                     	;# 
  4232  0FED                     	;# 
  4233  0FEE                     	;# 
  4234  0FEF                     	;# 
  4235  0000                     	;# 
  4236  0001                     	;# 
  4237  0002                     	;# 
  4238  0003                     	;# 
  4239  0004                     	;# 
  4240  0005                     	;# 
  4241  0006                     	;# 
  4242  0007                     	;# 
  4243  0008                     	;# 
  4244  0009                     	;# 
  4245  000A                     	;# 
  4246  000B                     	;# 
  4247  000C                     	;# 
  4248  000D                     	;# 
  4249  000E                     	;# 
  4250  0010                     	;# 
  4251  0011                     	;# 
  4252  0012                     	;# 
  4253  0013                     	;# 
  4254  0016                     	;# 
  4255  0017                     	;# 
  4256  0018                     	;# 
  4257  001C                     	;# 
  4258  001C                     	;# 
  4259  001D                     	;# 
  4260  001D                     	;# 
  4261  001E                     	;# 
  4262  001F                     	;# 
  4263  008C                     	;# 
  4264  008C                     	;# 
  4265  008D                     	;# 
  4266  008E                     	;# 
  4267  008E                     	;# 
  4268  008F                     	;# 
  4269  0090                     	;# 
  4270  0090                     	;# 
  4271  0091                     	;# 
  4272  0093                     	;# 
  4273  0094                     	;# 
  4274  0095                     	;# 
  4275  0096                     	;# 
  4276  0097                     	;# 
  4277  0098                     	;# 
  4278  0099                     	;# 
  4279  009A                     	;# 
  4280  009B                     	;# 
  4281  009C                     	;# 
  4282  009D                     	;# 
  4283  009E                     	;# 
  4284  010C                     	;# 
  4285  010D                     	;# 
  4286  010E                     	;# 
  4287  010E                     	;# 
  4288  010F                     	;# 
  4289  0110                     	;# 
  4290  0110                     	;# 
  4291  0111                     	;# 
  4292  0112                     	;# 
  4293  0112                     	;# 
  4294  0113                     	;# 
  4295  0114                     	;# 
  4296  0114                     	;# 
  4297  0115                     	;# 
  4298  0116                     	;# 
  4299  0116                     	;# 
  4300  0117                     	;# 
  4301  0119                     	;# 
  4302  0119                     	;# 
  4303  0119                     	;# 
  4304  011A                     	;# 
  4305  011A                     	;# 
  4306  011A                     	;# 
  4307  011B                     	;# 
  4308  011B                     	;# 
  4309  011B                     	;# 
  4310  011B                     	;# 
  4311  011B                     	;# 
  4312  011C                     	;# 
  4313  011C                     	;# 
  4314  011C                     	;# 
  4315  011D                     	;# 
  4316  011D                     	;# 
  4317  011D                     	;# 
  4318  011E                     	;# 
  4319  011E                     	;# 
  4320  011E                     	;# 
  4321  011F                     	;# 
  4322  011F                     	;# 
  4323  011F                     	;# 
  4324  011F                     	;# 
  4325  011F                     	;# 
  4326  018C                     	;# 
  4327  018D                     	;# 
  4328  018E                     	;# 
  4329  018F                     	;# 
  4330  0190                     	;# 
  4331  0191                     	;# 
  4332  0192                     	;# 
  4333  0196                     	;# 
  4334  0197                     	;# 
  4335  0198                     	;# 
  4336  0199                     	;# 
  4337  019A                     	;# 
  4338  019B                     	;# 
  4339  019C                     	;# 
  4340  020C                     	;# 
  4341  020C                     	;# 
  4342  020D                     	;# 
  4343  020E                     	;# 
  4344  020F                     	;# 
  4345  020F                     	;# 
  4346  0210                     	;# 
  4347  0210                     	;# 
  4348  0211                     	;# 
  4349  0211                     	;# 
  4350  0212                     	;# 
  4351  0212                     	;# 
  4352  0213                     	;# 
  4353  0214                     	;# 
  4354  0215                     	;# 
  4355  0215                     	;# 
  4356  0216                     	;# 
  4357  0216                     	;# 
  4358  0217                     	;# 
  4359  0217                     	;# 
  4360  0218                     	;# 
  4361  0218                     	;# 
  4362  0219                     	;# 
  4363  021A                     	;# 
  4364  021B                     	;# 
  4365  021B                     	;# 
  4366  021C                     	;# 
  4367  021C                     	;# 
  4368  021D                     	;# 
  4369  021D                     	;# 
  4370  021E                     	;# 
  4371  021F                     	;# 
  4372  028C                     	;# 
  4373  028C                     	;# 
  4374  028D                     	;# 
  4375  028D                     	;# 
  4376  028E                     	;# 
  4377  028F                     	;# 
  4378  0290                     	;# 
  4379  0290                     	;# 
  4380  0291                     	;# 
  4381  0292                     	;# 
  4382  0292                     	;# 
  4383  0293                     	;# 
  4384  0293                     	;# 
  4385  0294                     	;# 
  4386  0295                     	;# 
  4387  0296                     	;# 
  4388  0296                     	;# 
  4389  0297                     	;# 
  4390  0298                     	;# 
  4391  0298                     	;# 
  4392  0299                     	;# 
  4393  0299                     	;# 
  4394  029A                     	;# 
  4395  029B                     	;# 
  4396  029C                     	;# 
  4397  029C                     	;# 
  4398  029D                     	;# 
  4399  030C                     	;# 
  4400  030C                     	;# 
  4401  030D                     	;# 
  4402  030E                     	;# 
  4403  030F                     	;# 
  4404  0310                     	;# 
  4405  0310                     	;# 
  4406  0311                     	;# 
  4407  0312                     	;# 
  4408  0313                     	;# 
  4409  0314                     	;# 
  4410  0314                     	;# 
  4411  0315                     	;# 
  4412  0316                     	;# 
  4413  0317                     	;# 
  4414  0318                     	;# 
  4415  0318                     	;# 
  4416  0319                     	;# 
  4417  031A                     	;# 
  4418  031B                     	;# 
  4419  031C                     	;# 
  4420  031C                     	;# 
  4421  031D                     	;# 
  4422  031E                     	;# 
  4423  031F                     	;# 
  4424  038C                     	;# 
  4425  038D                     	;# 
  4426  038E                     	;# 
  4427  0390                     	;# 
  4428  0391                     	;# 
  4429  0392                     	;# 
  4430  040C                     	;# 
  4431  040D                     	;# 
  4432  040E                     	;# 
  4433  040F                     	;# 
  4434  0410                     	;# 
  4435  0411                     	;# 
  4436  0416                     	;# 
  4437  0416                     	;# 
  4438  0417                     	;# 
  4439  0418                     	;# 
  4440  0418                     	;# 
  4441  0419                     	;# 
  4442  041A                     	;# 
  4443  041A                     	;# 
  4444  041B                     	;# 
  4445  041C                     	;# 
  4446  041C                     	;# 
  4447  041D                     	;# 
  4448  041E                     	;# 
  4449  041F                     	;# 
  4450  048C                     	;# 
  4451  048C                     	;# 
  4452  048D                     	;# 
  4453  048E                     	;# 
  4454  048F                     	;# 
  4455  048F                     	;# 
  4456  0490                     	;# 
  4457  0491                     	;# 
  4458  0492                     	;# 
  4459  0492                     	;# 
  4460  0493                     	;# 
  4461  0494                     	;# 
  4462  0495                     	;# 
  4463  0495                     	;# 
  4464  0496                     	;# 
  4465  0497                     	;# 
  4466  0498                     	;# 
  4467  0499                     	;# 
  4468  049A                     	;# 
  4469  049B                     	;# 
  4470  049C                     	;# 
  4471  049D                     	;# 
  4472  050C                     	;# 
  4473  050C                     	;# 
  4474  050D                     	;# 
  4475  050E                     	;# 
  4476  050F                     	;# 
  4477  050F                     	;# 
  4478  0510                     	;# 
  4479  0511                     	;# 
  4480  0512                     	;# 
  4481  0512                     	;# 
  4482  0513                     	;# 
  4483  0514                     	;# 
  4484  0515                     	;# 
  4485  0515                     	;# 
  4486  0516                     	;# 
  4487  0517                     	;# 
  4488  0518                     	;# 
  4489  0519                     	;# 
  4490  051A                     	;# 
  4491  051B                     	;# 
  4492  051C                     	;# 
  4493  051D                     	;# 
  4494  058C                     	;# 
  4495  058C                     	;# 
  4496  058D                     	;# 
  4497  058E                     	;# 
  4498  058F                     	;# 
  4499  058F                     	;# 
  4500  0590                     	;# 
  4501  0591                     	;# 
  4502  0592                     	;# 
  4503  0593                     	;# 
  4504  060C                     	;# 
  4505  060D                     	;# 
  4506  060E                     	;# 
  4507  060F                     	;# 
  4508  0610                     	;# 
  4509  0611                     	;# 
  4510  0612                     	;# 
  4511  0613                     	;# 
  4512  0614                     	;# 
  4513  0616                     	;# 
  4514  0617                     	;# 
  4515  0618                     	;# 
  4516  0619                     	;# 
  4517  061A                     	;# 
  4518  061B                     	;# 
  4519  061C                     	;# 
  4520  061D                     	;# 
  4521  061E                     	;# 
  4522  068C                     	;# 
  4523  068D                     	;# 
  4524  068E                     	;# 
  4525  068F                     	;# 
  4526  0690                     	;# 
  4527  0691                     	;# 
  4528  0692                     	;# 
  4529  0693                     	;# 
  4530  0694                     	;# 
  4531  070C                     	;# 
  4532  070D                     	;# 
  4533  070E                     	;# 
  4534  070F                     	;# 
  4535  0710                     	;# 
  4536  0711                     	;# 
  4537  0712                     	;# 
  4538  0713                     	;# 
  4539  0714                     	;# 
  4540  0716                     	;# 
  4541  0717                     	;# 
  4542  0718                     	;# 
  4543  0719                     	;# 
  4544  071A                     	;# 
  4545  071B                     	;# 
  4546  071C                     	;# 
  4547  071D                     	;# 
  4548  071E                     	;# 
  4549  0796                     	;# 
  4550  0797                     	;# 
  4551  0798                     	;# 
  4552  0799                     	;# 
  4553  079A                     	;# 
  4554  079B                     	;# 
  4555  080C                     	;# 
  4556  080D                     	;# 
  4557  080E                     	;# 
  4558  080F                     	;# 
  4559  0810                     	;# 
  4560  0811                     	;# 
  4561  0812                     	;# 
  4562  0813                     	;# 
  4563  0814                     	;# 
  4564  081A                     	;# 
  4565  081B                     	;# 
  4566  081C                     	;# 
  4567  081D                     	;# 
  4568  081E                     	;# 
  4569  081F                     	;# 
  4570  088C                     	;# 
  4571  088D                     	;# 
  4572  088E                     	;# 
  4573  088F                     	;# 
  4574  0890                     	;# 
  4575  0891                     	;# 
  4576  0892                     	;# 
  4577  0893                     	;# 
  4578  0895                     	;# 
  4579  0896                     	;# 
  4580  0897                     	;# 
  4581  0898                     	;# 
  4582  0899                     	;# 
  4583  089A                     	;# 
  4584  089B                     	;# 
  4585  090C                     	;# 
  4586  090E                     	;# 
  4587  090F                     	;# 
  4588  091F                     	;# 
  4589  091F                     	;# 
  4590  098F                     	;# 
  4591  098F                     	;# 
  4592  0990                     	;# 
  4593  0991                     	;# 
  4594  0992                     	;# 
  4595  0993                     	;# 
  4596  0994                     	;# 
  4597  0995                     	;# 
  4598  0996                     	;# 
  4599  0997                     	;# 
  4600  0E0F                     	;# 
  4601  0E10                     	;# 
  4602  0E11                     	;# 
  4603  0E12                     	;# 
  4604  0E13                     	;# 
  4605  0E14                     	;# 
  4606  0E15                     	;# 
  4607  0E16                     	;# 
  4608  0E17                     	;# 
  4609  0E18                     	;# 
  4610  0E19                     	;# 
  4611  0E1A                     	;# 
  4612  0E1B                     	;# 
  4613  0E1C                     	;# 
  4614  0E1D                     	;# 
  4615  0E1E                     	;# 
  4616  0E1F                     	;# 
  4617  0E20                     	;# 
  4618  0E21                     	;# 
  4619  0E22                     	;# 
  4620  0E23                     	;# 
  4621  0E24                     	;# 
  4622  0E25                     	;# 
  4623  0E26                     	;# 
  4624  0E27                     	;# 
  4625  0E28                     	;# 
  4626  0E29                     	;# 
  4627  0E2A                     	;# 
  4628  0E2B                     	;# 
  4629  0E2C                     	;# 
  4630  0E2D                     	;# 
  4631  0E2E                     	;# 
  4632  0E2F                     	;# 
  4633  0E30                     	;# 
  4634  0E31                     	;# 
  4635  0E32                     	;# 
  4636  0E33                     	;# 
  4637  0E34                     	;# 
  4638  0E35                     	;# 
  4639  0E36                     	;# 
  4640  0E37                     	;# 
  4641  0E8F                     	;# 
  4642  0E90                     	;# 
  4643  0E91                     	;# 
  4644  0E92                     	;# 
  4645  0E93                     	;# 
  4646  0E94                     	;# 
  4647  0E95                     	;# 
  4648  0E96                     	;# 
  4649  0E97                     	;# 
  4650  0E9C                     	;# 
  4651  0E9D                     	;# 
  4652  0E9E                     	;# 
  4653  0EA1                     	;# 
  4654  0EA2                     	;# 
  4655  0EA3                     	;# 
  4656  0EA4                     	;# 
  4657  0EA5                     	;# 
  4658  0EA9                     	;# 
  4659  0EAA                     	;# 
  4660  0EAB                     	;# 
  4661  0EAC                     	;# 
  4662  0EB1                     	;# 
  4663  0EB2                     	;# 
  4664  0EB3                     	;# 
  4665  0EB8                     	;# 
  4666  0EB9                     	;# 
  4667  0EBA                     	;# 
  4668  0EBB                     	;# 
  4669  0EBC                     	;# 
  4670  0EBD                     	;# 
  4671  0EBE                     	;# 
  4672  0EC3                     	;# 
  4673  0EC5                     	;# 
  4674  0EC6                     	;# 
  4675  0EC7                     	;# 
  4676  0EC8                     	;# 
  4677  0EC9                     	;# 
  4678  0ECA                     	;# 
  4679  0ECB                     	;# 
  4680  0ECC                     	;# 
  4681  0F10                     	;# 
  4682  0F11                     	;# 
  4683  0F12                     	;# 
  4684  0F13                     	;# 
  4685  0F14                     	;# 
  4686  0F15                     	;# 
  4687  0F16                     	;# 
  4688  0F17                     	;# 
  4689  0F18                     	;# 
  4690  0F19                     	;# 
  4691  0F1A                     	;# 
  4692  0F1B                     	;# 
  4693  0F1C                     	;# 
  4694  0F1D                     	;# 
  4695  0F1E                     	;# 
  4696  0F1F                     	;# 
  4697  0F20                     	;# 
  4698  0F21                     	;# 
  4699  0F22                     	;# 
  4700  0F23                     	;# 
  4701  0F24                     	;# 
  4702  0F25                     	;# 
  4703  0F26                     	;# 
  4704  0F27                     	;# 
  4705  0F38                     	;# 
  4706  0F39                     	;# 
  4707  0F3A                     	;# 
  4708  0F3B                     	;# 
  4709  0F3C                     	;# 
  4710  0F3D                     	;# 
  4711  0F3E                     	;# 
  4712  0F3F                     	;# 
  4713  0F40                     	;# 
  4714  0F41                     	;# 
  4715  0F43                     	;# 
  4716  0F44                     	;# 
  4717  0F45                     	;# 
  4718  0F46                     	;# 
  4719  0F47                     	;# 
  4720  0F48                     	;# 
  4721  0F49                     	;# 
  4722  0F4A                     	;# 
  4723  0F4B                     	;# 
  4724  0F4C                     	;# 
  4725  0F4E                     	;# 
  4726  0F4F                     	;# 
  4727  0F50                     	;# 
  4728  0F51                     	;# 
  4729  0F52                     	;# 
  4730  0F53                     	;# 
  4731  0F54                     	;# 
  4732  0F55                     	;# 
  4733  0F56                     	;# 
  4734  0F57                     	;# 
  4735  0F65                     	;# 
  4736  0F68                     	;# 
  4737  0F69                     	;# 
  4738  0F6A                     	;# 
  4739  0F6B                     	;# 
  4740  0FE4                     	;# 
  4741  0FE5                     	;# 
  4742  0FE6                     	;# 
  4743  0FE7                     	;# 
  4744  0FE8                     	;# 
  4745  0FE9                     	;# 
  4746  0FEA                     	;# 
  4747  0FEB                     	;# 
  4748  0FED                     	;# 
  4749  0FEE                     	;# 
  4750  0FEF                     	;# 
  4751  0000                     	;# 
  4752  0001                     	;# 
  4753  0002                     	;# 
  4754  0003                     	;# 
  4755  0004                     	;# 
  4756  0005                     	;# 
  4757  0006                     	;# 
  4758  0007                     	;# 
  4759  0008                     	;# 
  4760  0009                     	;# 
  4761  000A                     	;# 
  4762  000B                     	;# 
  4763  000C                     	;# 
  4764  000D                     	;# 
  4765  000E                     	;# 
  4766  0010                     	;# 
  4767  0011                     	;# 
  4768  0012                     	;# 
  4769  0013                     	;# 
  4770  0016                     	;# 
  4771  0017                     	;# 
  4772  0018                     	;# 
  4773  001C                     	;# 
  4774  001C                     	;# 
  4775  001D                     	;# 
  4776  001D                     	;# 
  4777  001E                     	;# 
  4778  001F                     	;# 
  4779  008C                     	;# 
  4780  008C                     	;# 
  4781  008D                     	;# 
  4782  008E                     	;# 
  4783  008E                     	;# 
  4784  008F                     	;# 
  4785  0090                     	;# 
  4786  0090                     	;# 
  4787  0091                     	;# 
  4788  0093                     	;# 
  4789  0094                     	;# 
  4790  0095                     	;# 
  4791  0096                     	;# 
  4792  0097                     	;# 
  4793  0098                     	;# 
  4794  0099                     	;# 
  4795  009A                     	;# 
  4796  009B                     	;# 
  4797  009C                     	;# 
  4798  009D                     	;# 
  4799  009E                     	;# 
  4800  010C                     	;# 
  4801  010D                     	;# 
  4802  010E                     	;# 
  4803  010E                     	;# 
  4804  010F                     	;# 
  4805  0110                     	;# 
  4806  0110                     	;# 
  4807  0111                     	;# 
  4808  0112                     	;# 
  4809  0112                     	;# 
  4810  0113                     	;# 
  4811  0114                     	;# 
  4812  0114                     	;# 
  4813  0115                     	;# 
  4814  0116                     	;# 
  4815  0116                     	;# 
  4816  0117                     	;# 
  4817  0119                     	;# 
  4818  0119                     	;# 
  4819  0119                     	;# 
  4820  011A                     	;# 
  4821  011A                     	;# 
  4822  011A                     	;# 
  4823  011B                     	;# 
  4824  011B                     	;# 
  4825  011B                     	;# 
  4826  011B                     	;# 
  4827  011B                     	;# 
  4828  011C                     	;# 
  4829  011C                     	;# 
  4830  011C                     	;# 
  4831  011D                     	;# 
  4832  011D                     	;# 
  4833  011D                     	;# 
  4834  011E                     	;# 
  4835  011E                     	;# 
  4836  011E                     	;# 
  4837  011F                     	;# 
  4838  011F                     	;# 
  4839  011F                     	;# 
  4840  011F                     	;# 
  4841  011F                     	;# 
  4842  018C                     	;# 
  4843  018D                     	;# 
  4844  018E                     	;# 
  4845  018F                     	;# 
  4846  0190                     	;# 
  4847  0191                     	;# 
  4848  0192                     	;# 
  4849  0196                     	;# 
  4850  0197                     	;# 
  4851  0198                     	;# 
  4852  0199                     	;# 
  4853  019A                     	;# 
  4854  019B                     	;# 
  4855  019C                     	;# 
  4856  020C                     	;# 
  4857  020C                     	;# 
  4858  020D                     	;# 
  4859  020E                     	;# 
  4860  020F                     	;# 
  4861  020F                     	;# 
  4862  0210                     	;# 
  4863  0210                     	;# 
  4864  0211                     	;# 
  4865  0211                     	;# 
  4866  0212                     	;# 
  4867  0212                     	;# 
  4868  0213                     	;# 
  4869  0214                     	;# 
  4870  0215                     	;# 
  4871  0215                     	;# 
  4872  0216                     	;# 
  4873  0216                     	;# 
  4874  0217                     	;# 
  4875  0217                     	;# 
  4876  0218                     	;# 
  4877  0218                     	;# 
  4878  0219                     	;# 
  4879  021A                     	;# 
  4880  021B                     	;# 
  4881  021B                     	;# 
  4882  021C                     	;# 
  4883  021C                     	;# 
  4884  021D                     	;# 
  4885  021D                     	;# 
  4886  021E                     	;# 
  4887  021F                     	;# 
  4888  028C                     	;# 
  4889  028C                     	;# 
  4890  028D                     	;# 
  4891  028D                     	;# 
  4892  028E                     	;# 
  4893  028F                     	;# 
  4894  0290                     	;# 
  4895  0290                     	;# 
  4896  0291                     	;# 
  4897  0292                     	;# 
  4898  0292                     	;# 
  4899  0293                     	;# 
  4900  0293                     	;# 
  4901  0294                     	;# 
  4902  0295                     	;# 
  4903  0296                     	;# 
  4904  0296                     	;# 
  4905  0297                     	;# 
  4906  0298                     	;# 
  4907  0298                     	;# 
  4908  0299                     	;# 
  4909  0299                     	;# 
  4910  029A                     	;# 
  4911  029B                     	;# 
  4912  029C                     	;# 
  4913  029C                     	;# 
  4914  029D                     	;# 
  4915  030C                     	;# 
  4916  030C                     	;# 
  4917  030D                     	;# 
  4918  030E                     	;# 
  4919  030F                     	;# 
  4920  0310                     	;# 
  4921  0310                     	;# 
  4922  0311                     	;# 
  4923  0312                     	;# 
  4924  0313                     	;# 
  4925  0314                     	;# 
  4926  0314                     	;# 
  4927  0315                     	;# 
  4928  0316                     	;# 
  4929  0317                     	;# 
  4930  0318                     	;# 
  4931  0318                     	;# 
  4932  0319                     	;# 
  4933  031A                     	;# 
  4934  031B                     	;# 
  4935  031C                     	;# 
  4936  031C                     	;# 
  4937  031D                     	;# 
  4938  031E                     	;# 
  4939  031F                     	;# 
  4940  038C                     	;# 
  4941  038D                     	;# 
  4942  038E                     	;# 
  4943  0390                     	;# 
  4944  0391                     	;# 
  4945  0392                     	;# 
  4946  040C                     	;# 
  4947  040D                     	;# 
  4948  040E                     	;# 
  4949  040F                     	;# 
  4950  0410                     	;# 
  4951  0411                     	;# 
  4952  0416                     	;# 
  4953  0416                     	;# 
  4954  0417                     	;# 
  4955  0418                     	;# 
  4956  0418                     	;# 
  4957  0419                     	;# 
  4958  041A                     	;# 
  4959  041A                     	;# 
  4960  041B                     	;# 
  4961  041C                     	;# 
  4962  041C                     	;# 
  4963  041D                     	;# 
  4964  041E                     	;# 
  4965  041F                     	;# 
  4966  048C                     	;# 
  4967  048C                     	;# 
  4968  048D                     	;# 
  4969  048E                     	;# 
  4970  048F                     	;# 
  4971  048F                     	;# 
  4972  0490                     	;# 
  4973  0491                     	;# 
  4974  0492                     	;# 
  4975  0492                     	;# 
  4976  0493                     	;# 
  4977  0494                     	;# 
  4978  0495                     	;# 
  4979  0495                     	;# 
  4980  0496                     	;# 
  4981  0497                     	;# 
  4982  0498                     	;# 
  4983  0499                     	;# 
  4984  049A                     	;# 
  4985  049B                     	;# 
  4986  049C                     	;# 
  4987  049D                     	;# 
  4988  050C                     	;# 
  4989  050C                     	;# 
  4990  050D                     	;# 
  4991  050E                     	;# 
  4992  050F                     	;# 
  4993  050F                     	;# 
  4994  0510                     	;# 
  4995  0511                     	;# 
  4996  0512                     	;# 
  4997  0512                     	;# 
  4998  0513                     	;# 
  4999  0514                     	;# 
  5000  0515                     	;# 
  5001  0515                     	;# 
  5002  0516                     	;# 
  5003  0517                     	;# 
  5004  0518                     	;# 
  5005  0519                     	;# 
  5006  051A                     	;# 
  5007  051B                     	;# 
  5008  051C                     	;# 
  5009  051D                     	;# 
  5010  058C                     	;# 
  5011  058C                     	;# 
  5012  058D                     	;# 
  5013  058E                     	;# 
  5014  058F                     	;# 
  5015  058F                     	;# 
  5016  0590                     	;# 
  5017  0591                     	;# 
  5018  0592                     	;# 
  5019  0593                     	;# 
  5020  060C                     	;# 
  5021  060D                     	;# 
  5022  060E                     	;# 
  5023  060F                     	;# 
  5024  0610                     	;# 
  5025  0611                     	;# 
  5026  0612                     	;# 
  5027  0613                     	;# 
  5028  0614                     	;# 
  5029  0616                     	;# 
  5030  0617                     	;# 
  5031  0618                     	;# 
  5032  0619                     	;# 
  5033  061A                     	;# 
  5034  061B                     	;# 
  5035  061C                     	;# 
  5036  061D                     	;# 
  5037  061E                     	;# 
  5038  068C                     	;# 
  5039  068D                     	;# 
  5040  068E                     	;# 
  5041  068F                     	;# 
  5042  0690                     	;# 
  5043  0691                     	;# 
  5044  0692                     	;# 
  5045  0693                     	;# 
  5046  0694                     	;# 
  5047  070C                     	;# 
  5048  070D                     	;# 
  5049  070E                     	;# 
  5050  070F                     	;# 
  5051  0710                     	;# 
  5052  0711                     	;# 
  5053  0712                     	;# 
  5054  0713                     	;# 
  5055  0714                     	;# 
  5056  0716                     	;# 
  5057  0717                     	;# 
  5058  0718                     	;# 
  5059  0719                     	;# 
  5060  071A                     	;# 
  5061  071B                     	;# 
  5062  071C                     	;# 
  5063  071D                     	;# 
  5064  071E                     	;# 
  5065  0796                     	;# 
  5066  0797                     	;# 
  5067  0798                     	;# 
  5068  0799                     	;# 
  5069  079A                     	;# 
  5070  079B                     	;# 
  5071  080C                     	;# 
  5072  080D                     	;# 
  5073  080E                     	;# 
  5074  080F                     	;# 
  5075  0810                     	;# 
  5076  0811                     	;# 
  5077  0812                     	;# 
  5078  0813                     	;# 
  5079  0814                     	;# 
  5080  081A                     	;# 
  5081  081B                     	;# 
  5082  081C                     	;# 
  5083  081D                     	;# 
  5084  081E                     	;# 
  5085  081F                     	;# 
  5086  088C                     	;# 
  5087  088D                     	;# 
  5088  088E                     	;# 
  5089  088F                     	;# 
  5090  0890                     	;# 
  5091  0891                     	;# 
  5092  0892                     	;# 
  5093  0893                     	;# 
  5094  0895                     	;# 
  5095  0896                     	;# 
  5096  0897                     	;# 
  5097  0898                     	;# 
  5098  0899                     	;# 
  5099  089A                     	;# 
  5100  089B                     	;# 
  5101  090C                     	;# 
  5102  090E                     	;# 
  5103  090F                     	;# 
  5104  091F                     	;# 
  5105  091F                     	;# 
  5106  098F                     	;# 
  5107  098F                     	;# 
  5108  0990                     	;# 
  5109  0991                     	;# 
  5110  0992                     	;# 
  5111  0993                     	;# 
  5112  0994                     	;# 
  5113  0995                     	;# 
  5114  0996                     	;# 
  5115  0997                     	;# 
  5116  0E0F                     	;# 
  5117  0E10                     	;# 
  5118  0E11                     	;# 
  5119  0E12                     	;# 
  5120  0E13                     	;# 
  5121  0E14                     	;# 
  5122  0E15                     	;# 
  5123  0E16                     	;# 
  5124  0E17                     	;# 
  5125  0E18                     	;# 
  5126  0E19                     	;# 
  5127  0E1A                     	;# 
  5128  0E1B                     	;# 
  5129  0E1C                     	;# 
  5130  0E1D                     	;# 
  5131  0E1E                     	;# 
  5132  0E1F                     	;# 
  5133  0E20                     	;# 
  5134  0E21                     	;# 
  5135  0E22                     	;# 
  5136  0E23                     	;# 
  5137  0E24                     	;# 
  5138  0E25                     	;# 
  5139  0E26                     	;# 
  5140  0E27                     	;# 
  5141  0E28                     	;# 
  5142  0E29                     	;# 
  5143  0E2A                     	;# 
  5144  0E2B                     	;# 
  5145  0E2C                     	;# 
  5146  0E2D                     	;# 
  5147  0E2E                     	;# 
  5148  0E2F                     	;# 
  5149  0E30                     	;# 
  5150  0E31                     	;# 
  5151  0E32                     	;# 
  5152  0E33                     	;# 
  5153  0E34                     	;# 
  5154  0E35                     	;# 
  5155  0E36                     	;# 
  5156  0E37                     	;# 
  5157  0E8F                     	;# 
  5158  0E90                     	;# 
  5159  0E91                     	;# 
  5160  0E92                     	;# 
  5161  0E93                     	;# 
  5162  0E94                     	;# 
  5163  0E95                     	;# 
  5164  0E96                     	;# 
  5165  0E97                     	;# 
  5166  0E9C                     	;# 
  5167  0E9D                     	;# 
  5168  0E9E                     	;# 
  5169  0EA1                     	;# 
  5170  0EA2                     	;# 
  5171  0EA3                     	;# 
  5172  0EA4                     	;# 
  5173  0EA5                     	;# 
  5174  0EA9                     	;# 
  5175  0EAA                     	;# 
  5176  0EAB                     	;# 
  5177  0EAC                     	;# 
  5178  0EB1                     	;# 
  5179  0EB2                     	;# 
  5180  0EB3                     	;# 
  5181  0EB8                     	;# 
  5182  0EB9                     	;# 
  5183  0EBA                     	;# 
  5184  0EBB                     	;# 
  5185  0EBC                     	;# 
  5186  0EBD                     	;# 
  5187  0EBE                     	;# 
  5188  0EC3                     	;# 
  5189  0EC5                     	;# 
  5190  0EC6                     	;# 
  5191  0EC7                     	;# 
  5192  0EC8                     	;# 
  5193  0EC9                     	;# 
  5194  0ECA                     	;# 
  5195  0ECB                     	;# 
  5196  0ECC                     	;# 
  5197  0F10                     	;# 
  5198  0F11                     	;# 
  5199  0F12                     	;# 
  5200  0F13                     	;# 
  5201  0F14                     	;# 
  5202  0F15                     	;# 
  5203  0F16                     	;# 
  5204  0F17                     	;# 
  5205  0F18                     	;# 
  5206  0F19                     	;# 
  5207  0F1A                     	;# 
  5208  0F1B                     	;# 
  5209  0F1C                     	;# 
  5210  0F1D                     	;# 
  5211  0F1E                     	;# 
  5212  0F1F                     	;# 
  5213  0F20                     	;# 
  5214  0F21                     	;# 
  5215  0F22                     	;# 
  5216  0F23                     	;# 
  5217  0F24                     	;# 
  5218  0F25                     	;# 
  5219  0F26                     	;# 
  5220  0F27                     	;# 
  5221  0F38                     	;# 
  5222  0F39                     	;# 
  5223  0F3A                     	;# 
  5224  0F3B                     	;# 
  5225  0F3C                     	;# 
  5226  0F3D                     	;# 
  5227  0F3E                     	;# 
  5228  0F3F                     	;# 
  5229  0F40                     	;# 
  5230  0F41                     	;# 
  5231  0F43                     	;# 
  5232  0F44                     	;# 
  5233  0F45                     	;# 
  5234  0F46                     	;# 
  5235  0F47                     	;# 
  5236  0F48                     	;# 
  5237  0F49                     	;# 
  5238  0F4A                     	;# 
  5239  0F4B                     	;# 
  5240  0F4C                     	;# 
  5241  0F4E                     	;# 
  5242  0F4F                     	;# 
  5243  0F50                     	;# 
  5244  0F51                     	;# 
  5245  0F52                     	;# 
  5246  0F53                     	;# 
  5247  0F54                     	;# 
  5248  0F55                     	;# 
  5249  0F56                     	;# 
  5250  0F57                     	;# 
  5251  0F65                     	;# 
  5252  0F68                     	;# 
  5253  0F69                     	;# 
  5254  0F6A                     	;# 
  5255  0F6B                     	;# 
  5256  0FE4                     	;# 
  5257  0FE5                     	;# 
  5258  0FE6                     	;# 
  5259  0FE7                     	;# 
  5260  0FE8                     	;# 
  5261  0FE9                     	;# 
  5262  0FEA                     	;# 
  5263  0FEB                     	;# 
  5264  0FED                     	;# 
  5265  0FEE                     	;# 
  5266  0FEF                     	;_samples
  5267                           
  5268                           	psect	idataBANK1
  5269  115C                     __pidataBANK1:	
  5270                           
  5271                           ;initializer for _Imode
  5272  115C  3401               	retlw	1
  5273  115D  3400               	retlw	0
  5274                           
  5275                           	psect	idataBANK2
  5276  115E                     __pidataBANK2:	
  5277                           
  5278                           ;initializer for _channels
  5279  115E  3414               	retlw	20
  5280  115F  3400               	retlw	0
  5281  1160  3410               	retlw	16
  5282  1161  3400               	retlw	0
  5283  1162  3416               	retlw	22
  5284  1163  3400               	retlw	0
  5285  1164  3412               	retlw	18
  5286  1165  3400               	retlw	0
  5287                           
  5288                           	psect	stringtext1
  5289  0800                     __pstringtext1:	
  5290  0800                     _fonts:	
  5291  0800  3400               	retlw	0
  5292  0801  3400               	retlw	0
  5293  0802  3400               	retlw	0
  5294  0803  3400               	retlw	0
  5295  0804  344E               	retlw	78
  5296  0805  3400               	retlw	0
  5297  0806  3406               	retlw	6
  5298  0807  3400               	retlw	0
  5299  0808  3406               	retlw	6
  5300  0809  34FF               	retlw	255
  5301  080A  34FF               	retlw	255
  5302  080B  34FF               	retlw	255
  5303  080C  3448               	retlw	72
  5304  080D  34D6               	retlw	214
  5305  080E  3424               	retlw	36
  5306  080F  3412               	retlw	18
  5307  0810  3408               	retlw	8
  5308  0811  3424               	retlw	36
  5309  0812  34FF               	retlw	255
  5310  0813  34FF               	retlw	255
  5311  0814  34FF               	retlw	255
  5312  0815  3400               	retlw	0
  5313  0816  3406               	retlw	6
  5314  0817  3400               	retlw	0
  5315  0818  3438               	retlw	56
  5316  0819  3444               	retlw	68
  5317  081A  3482               	retlw	130
  5318  081B  3482               	retlw	130
  5319  081C  3444               	retlw	68
  5320  081D  3438               	retlw	56
  5321  081E  3414               	retlw	20
  5322  081F  3408               	retlw	8
  5323  0820  343E               	retlw	62
  5324  0821  3410               	retlw	16
  5325  0822  3438               	retlw	56
  5326  0823  3410               	retlw	16
  5327  0824  34A0               	retlw	160
  5328  0825  3460               	retlw	96
  5329  0826  3400               	retlw	0
  5330  0827  3410               	retlw	16
  5331  0828  3410               	retlw	16
  5332  0829  3410               	retlw	16
  5333  082A  3460               	retlw	96
  5334  082B  3460               	retlw	96
  5335  082C  3400               	retlw	0
  5336  082D  3460               	retlw	96
  5337  082E  3418               	retlw	24
  5338  082F  3406               	retlw	6
  5339  0830  347C               	retlw	124
  5340  0831  3442               	retlw	66
  5341  0832  347C               	retlw	124
  5342  0833  3444               	retlw	68
  5343  0834  347E               	retlw	126
  5344  0835  3440               	retlw	64
  5345  0836  3464               	retlw	100
  5346  0837  3452               	retlw	82
  5347  0838  344C               	retlw	76
  5348  0839  344A               	retlw	74
  5349  083A  344A               	retlw	74
  5350  083B  3434               	retlw	52
  5351  083C  3438               	retlw	56
  5352  083D  3424               	retlw	36
  5353  083E  347E               	retlw	126
  5354  083F  344E               	retlw	78
  5355  0840  344A               	retlw	74
  5356  0841  3432               	retlw	50
  5357  0842  343C               	retlw	60
  5358  0843  344A               	retlw	74
  5359  0844  3432               	retlw	50
  5360  0845  3462               	retlw	98
  5361  0846  341A               	retlw	26
  5362  0847  3406               	retlw	6
  5363  0848  3476               	retlw	118
  5364  0849  344A               	retlw	74
  5365  084A  3476               	retlw	118
  5366  084B  344C               	retlw	76
  5367  084C  3452               	retlw	82
  5368  084D  343C               	retlw	60
  5369  084E  346C               	retlw	108
  5370  084F  346C               	retlw	108
  5371  0850  3400               	retlw	0
  5372  0851  34AC               	retlw	172
  5373  0852  346C               	retlw	108
  5374  0853  3400               	retlw	0
  5375  0854  3410               	retlw	16
  5376  0855  3428               	retlw	40
  5377  0856  3444               	retlw	68
  5378  0857  3428               	retlw	40
  5379  0858  3428               	retlw	40
  5380  0859  3428               	retlw	40
  5381  085A  3444               	retlw	68
  5382  085B  3428               	retlw	40
  5383  085C  3410               	retlw	16
  5384  085D  3402               	retlw	2
  5385  085E  3459               	retlw	89
  5386  085F  3406               	retlw	6
  5387  0860  34FF               	retlw	255
  5388  0861  34FF               	retlw	255
  5389  0862  34FF               	retlw	255
  5390  0863  347C               	retlw	124
  5391  0864  3412               	retlw	18
  5392  0865  347C               	retlw	124
  5393  0866  347E               	retlw	126
  5394  0867  345A               	retlw	90
  5395  0868  3434               	retlw	52
  5396  0869  343C               	retlw	60
  5397  086A  3442               	retlw	66
  5398  086B  3442               	retlw	66
  5399  086C  347E               	retlw	126
  5400  086D  3442               	retlw	66
  5401  086E  343C               	retlw	60
  5402  086F  347E               	retlw	126
  5403  0870  344A               	retlw	74
  5404  0871  3442               	retlw	66
  5405  0872  347E               	retlw	126
  5406  0873  340A               	retlw	10
  5407  0874  340A               	retlw	10
  5408  0875  343C               	retlw	60
  5409  0876  3452               	retlw	82
  5410  0877  3434               	retlw	52
  5411  0878  347E               	retlw	126
  5412  0879  3408               	retlw	8
  5413  087A  347E               	retlw	126
  5414  087B  3442               	retlw	66
  5415  087C  347E               	retlw	126
  5416  087D  3442               	retlw	66
  5417  087E  3430               	retlw	48
  5418  087F  3440               	retlw	64
  5419  0880  343E               	retlw	62
  5420  0881  347E               	retlw	126
  5421  0882  3418               	retlw	24
  5422  0883  3466               	retlw	102
  5423  0884  347E               	retlw	126
  5424  0885  3440               	retlw	64
  5425  0886  3440               	retlw	64
  5426  0887  347E               	retlw	126
  5427  0888  341C               	retlw	28
  5428  0889  347E               	retlw	126
  5429  088A  347E               	retlw	126
  5430  088B  3402               	retlw	2
  5431  088C  347E               	retlw	126
  5432  088D  343C               	retlw	60
  5433  088E  3442               	retlw	66
  5434  088F  343C               	retlw	60
  5435  0890  347E               	retlw	126
  5436  0891  3412               	retlw	18
  5437  0892  340C               	retlw	12
  5438  0893  347E               	retlw	126
  5439  0894  3462               	retlw	98
  5440  0895  34FE               	retlw	254
  5441  0896  347E               	retlw	126
  5442  0897  3432               	retlw	50
  5443  0898  344E               	retlw	78
  5444  0899  3444               	retlw	68
  5445  089A  344A               	retlw	74
  5446  089B  3432               	retlw	50
  5447  089C  3402               	retlw	2
  5448  089D  347E               	retlw	126
  5449  089E  3402               	retlw	2
  5450  089F  347E               	retlw	126
  5451  08A0  3440               	retlw	64
  5452  08A1  347E               	retlw	126
  5453  08A2  343E               	retlw	62
  5454  08A3  3440               	retlw	64
  5455  08A4  343E               	retlw	62
  5456  08A5  347E               	retlw	126
  5457  08A6  3438               	retlw	56
  5458  08A7  347E               	retlw	126
  5459  08A8  3466               	retlw	102
  5460  08A9  3418               	retlw	24
  5461  08AA  3466               	retlw	102
  5462  08AB  340E               	retlw	14
  5463  08AC  3470               	retlw	112
  5464  08AD  340E               	retlw	14
  5465  08AE  3462               	retlw	98
  5466  08AF  345A               	retlw	90
  5467  08B0  3446               	retlw	70
  5468  08B1  3400               	retlw	0
  5469  08B2  347E               	retlw	126
  5470  08B3  3442               	retlw	66
  5471  08B4  3406               	retlw	6
  5472  08B5  3418               	retlw	24
  5473  08B6  3460               	retlw	96
  5474  08B7  3442               	retlw	66
  5475  08B8  347E               	retlw	126
  5476  08B9  3400               	retlw	0
  5477  08BA  3404               	retlw	4
  5478  08BB  3402               	retlw	2
  5479  08BC  3404               	retlw	4
  5480  08BD  3440               	retlw	64
  5481  08BE  3440               	retlw	64
  5482  08BF  3440               	retlw	64
  5483  08C0  3400               	retlw	0
  5484  08C1  3402               	retlw	2
  5485  08C2  3404               	retlw	4
  5486  08C3  3474               	retlw	116
  5487  08C4  3454               	retlw	84
  5488  08C5  3478               	retlw	120
  5489  08C6  347E               	retlw	126
  5490  08C7  3448               	retlw	72
  5491  08C8  3430               	retlw	48
  5492  08C9  3430               	retlw	48
  5493  08CA  3448               	retlw	72
  5494  08CB  3448               	retlw	72
  5495  08CC  3430               	retlw	48
  5496  08CD  3448               	retlw	72
  5497  08CE  347E               	retlw	126
  5498  08CF  3438               	retlw	56
  5499  08D0  3454               	retlw	84
  5500  08D1  3458               	retlw	88
  5501  08D2  347C               	retlw	124
  5502  08D3  340A               	retlw	10
  5503  08D4  3402               	retlw	2
  5504  08D5  3498               	retlw	152
  5505  08D6  34A4               	retlw	164
  5506  08D7  347C               	retlw	124
  5507  08D8  347E               	retlw	126
  5508  08D9  3408               	retlw	8
  5509  08DA  3470               	retlw	112
  5510  08DB  3448               	retlw	72
  5511  08DC  347A               	retlw	122
  5512  08DD  3440               	retlw	64
  5513  08DE  3488               	retlw	136
  5514  08DF  34FA               	retlw	250
  5515  08E0  3400               	retlw	0
  5516  08E1  347E               	retlw	126
  5517  08E2  3418               	retlw	24
  5518  08E3  3464               	retlw	100
  5519  08E4  3442               	retlw	66
  5520  08E5  347E               	retlw	126
  5521  08E6  3440               	retlw	64
  5522  08E7  347C               	retlw	124
  5523  08E8  3438               	retlw	56
  5524  08E9  347C               	retlw	124
  5525  08EA  347C               	retlw	124
  5526  08EB  3404               	retlw	4
  5527  08EC  3478               	retlw	120
  5528  08ED  3438               	retlw	56
  5529  08EE  3444               	retlw	68
  5530  08EF  3438               	retlw	56
  5531  08F0  34FC               	retlw	252
  5532  08F1  3424               	retlw	36
  5533  08F2  3418               	retlw	24
  5534  08F3  3418               	retlw	24
  5535  08F4  3424               	retlw	36
  5536  08F5  34FC               	retlw	252
  5537  08F6  3478               	retlw	120
  5538  08F7  3404               	retlw	4
  5539  08F8  3404               	retlw	4
  5540  08F9  3448               	retlw	72
  5541  08FA  3454               	retlw	84
  5542  08FB  3424               	retlw	36
  5543  08FC  3404               	retlw	4
  5544  08FD  343E               	retlw	62
  5545  08FE  3444               	retlw	68
  5546  08FF  347C               	retlw	124
  5547  0900  3440               	retlw	64
  5548  0901  347C               	retlw	124
  5549  0902  343C               	retlw	60
  5550  0903  3440               	retlw	64
  5551  0904  343C               	retlw	60
  5552  0905  347C               	retlw	124
  5553  0906  3430               	retlw	48
  5554  0907  347C               	retlw	124
  5555  0908  346C               	retlw	108
  5556  0909  3410               	retlw	16
  5557  090A  346C               	retlw	108
  5558  090B  349C               	retlw	156
  5559  090C  34A0               	retlw	160
  5560  090D  347C               	retlw	124
  5561  090E  3464               	retlw	100
  5562  090F  3454               	retlw	84
  5563  0910  344C               	retlw	76
  5564  0911  340C               	retlw	12
  5565  0912  3412               	retlw	18
  5566  0913  340C               	retlw	12
  5567  0914  34FF               	retlw	255
  5568  0915  34FF               	retlw	255
  5569  0916  34FF               	retlw	255
  5570  0917  34FF               	retlw	255
  5571  0918  34FF               	retlw	255
  5572  0919  34FF               	retlw	255
  5573  091A  34FF               	retlw	255
  5574  091B  34FF               	retlw	255
  5575  091C  34FF               	retlw	255
  5576  091D  34FF               	retlw	255
  5577  091E  34FF               	retlw	255
  5578  091F  34FF               	retlw	255
  5579  0920  34FF               	retlw	255
  5580  0921  34FF               	retlw	255
  5581  0922  34FF               	retlw	255
  5582  0923  34FF               	retlw	255
  5583  0924  34FF               	retlw	255
  5584  0925  34FF               	retlw	255
  5585  0926  34FC               	retlw	252
  5586  0927  3440               	retlw	64
  5587  0928  347C               	retlw	124
  5588  0929  34FF               	retlw	255
  5589  092A  34FF               	retlw	255
  5590  092B  34FF               	retlw	255
  5591  092C  34FF               	retlw	255
  5592  092D  34FF               	retlw	255
  5593  092E  34FF               	retlw	255
  5594  092F                     __end_of_fonts:	
  5595                           
  5596                           	psect	stringtext2
  5597  1800                     __pstringtext2:	
  5598  1800                     log@coeff:	
  5599  1800  3400               	retlw	0
  5600  1801  3400               	retlw	0
  5601  1802  3400               	retlw	0
  5602  1803  3400               	retlw	0
  5603  1804  3480               	retlw	128
  5604  1805  343F               	retlw	63
  5605  1806  34F0               	retlw	240
  5606  1807  34FF               	retlw	255
  5607  1808  34BE               	retlw	190
  5608  1809  34E2               	retlw	226
  5609  180A  34A9               	retlw	169
  5610  180B  343E               	retlw	62
  5611  180C  3483               	retlw	131
  5612  180D  3476               	retlw	118
  5613  180E  34BE               	retlw	190
  5614  180F  34AE               	retlw	174
  5615  1810  342B               	retlw	43
  5616  1811  343E               	retlw	62
  5617  1812  343C               	retlw	60
  5618  1813  34C3               	retlw	195
  5619  1814  34BD               	retlw	189
  5620  1815  34D2               	retlw	210
  5621  1816  3413               	retlw	19
  5622  1817  343D               	retlw	61
  5623  1818  3478               	retlw	120
  5624  1819  34D3               	retlw	211
  5625  181A  34BB               	retlw	187
  5626  181B                     __end_oflog@coeff:	
  5627  0013                     _TRISC	set	19
  5628  0012                     _TRISB	set	18
  5629  0011                     _TRISA	set	17
  5630  0018                     _LATC	set	24
  5631  0017                     _LATB	set	23
  5632  0016                     _LATA	set	22
  5633  0016                     _LATAbits	set	22
  5634  0011                     _TRISAbits	set	17
  5635  00B5                     _LATA5	set	181
  5636  006A                     _RB2	set	106
  5637  005F                     _GIE	set	95
  5638  0093                     _ADCON0	set	147
  5639  009D                     _ADACQ	set	157
  5640  009C                     _ADPRE	set	156
  5641  009B                     _ADCAP	set	155
  5642  009A                     _ADREF	set	154
  5643  0098                     _ADCLK	set	152
  5644  0097                     _ADSTAT	set	151
  5645  0099                     _ADACT	set	153
  5646  0096                     _ADCON3	set	150
  5647  0095                     _ADCON2	set	149
  5648  0094                     _ADCON1	set	148
  5649  008C                     _ADRESL	set	140
  5650  008D                     _ADRESH	set	141
  5651  0093                     _ADCON0bits	set	147
  5652  009E                     _ADPCH	set	158
  5653  0113                     _ADSTPTH	set	275
  5654  0112                     _ADSTPTL	set	274
  5655  0111                     _ADUTHH	set	273
  5656  0110                     _ADUTHL	set	272
  5657  010F                     _ADLTHH	set	271
  5658  010E                     _ADLTHL	set	270
  5659  010D                     _ADRPT	set	269
  5660  021F                     _CCPTMRS1bits	set	543
  5661  0294                     _T4CONbits	set	660
  5662  0292                     _T4TMR	set	658
  5663  0293                     _T4PR	set	659
  5664  0297                     _T4RST	set	663
  5665  0295                     _T4HLT	set	661
  5666  0296                     _T4CLKCON	set	662
  5667  0294                     _T4CON	set	660
  5668  028E                     _T2CONbits	set	654
  5669  028C                     _T2TMR	set	652
  5670  028D                     _T2PR	set	653
  5671  0291                     _T2RST	set	657
  5672  028F                     _T2HLT	set	655
  5673  0290                     _T2CLKCON	set	656
  5674  028E                     _T2CON	set	654
  5675  0390                     _PWM7DCL	set	912
  5676  0391                     _PWM7DCH	set	913
  5677  0392                     _PWM7CON	set	914
  5678  038C                     _PWM6DCL	set	908
  5679  038D                     _PWM6DCH	set	909
  5680  038E                     _PWM6CON	set	910
  5681  0710                     _PIR4bits	set	1808
  5682  0716                     _PIE0bits	set	1814
  5683  0892                     _OSCTUNE	set	2194
  5684  0893                     _OSCFRQ	set	2195
  5685  0891                     _OSCEN	set	2193
  5686  088F                     _OSCCON3	set	2191
  5687  088D                     _OSCCON1	set	2189
  5688  090C                     _FVRCON	set	2316
  5689  0E8F                     _PPSLOCKbits	set	3727
  5690  0E8F                     _PPSLOCK	set	3727
  5691  0F18                     _RB0PPS	set	3864
  5692  0F17                     _RA7PPS	set	3863
  5693  0F16                     _RA6PPS	set	3862
  5694  0F4E                     _ANSELC	set	3918
  5695  0F43                     _ANSELB	set	3907
  5696  0F38                     _ANSELA	set	3896
  5697  0F65                     _WPUE	set	3941
  5698  0F4F                     _WPUC	set	3919
  5699  0F44                     _WPUB	set	3908
  5700  0F39                     _WPUA	set	3897
  5701  181B                     STR_1:	
  5702  181B  3442               	retlw	66	;'B'
  5703  181C  3441               	retlw	65	;'A'
  5704  181D  3454               	retlw	84	;'T'
  5705  181E  3454               	retlw	84	;'T'
  5706  181F  3445               	retlw	69	;'E'
  5707  1820  3452               	retlw	82	;'R'
  5708  1821  3459               	retlw	89	;'Y'
  5709  1822  3420               	retlw	32	;' '
  5710  1823  3446               	retlw	70	;'F'
  5711  1824  3441               	retlw	65	;'A'
  5712  1825  3455               	retlw	85	;'U'
  5713  1826  344C               	retlw	76	;'L'
  5714  1827  3454               	retlw	84	;'T'
  5715  1828  3400               	retlw	0
  5716                           
  5717                           	psect	stringtext3
  5718  0000                     __pstringtext3:	
  5719                           
  5720                           ; #config settings
  5721  0000                     
  5722                           	psect	cinit
  5723  07BC                     start_initialization:	
  5724  07BC                     __initialization:		;BIGRAM
  5725                           
  5726                           ; Initialize objects allocated to BANK1
  5727  07BC  0021               	movlb	1	; select bank1
  5728  07BD  3191  215C  3187   	fcall	__pidataBANK1	;fetch initializer
  5729  07C0  00EC               	movwf	__pdataBANK1& (0+127)
  5730  07C1  3191  215D  3187   	fcall	__pidataBANK1+1	;fetch initializer
  5731  07C4  00ED               	movwf	(__pdataBANK1+1)& (0+127)
  5732                           
  5733                           ; Initialize objects allocated to BANK2
  5734  07C5  305E               	movlw	low __pidataBANK2
  5735  07C6  0084               	movwf	4
  5736  07C7  3091               	movlw	(high __pidataBANK2)| (0+128)
  5737  07C8  0085               	movwf	5
  5738  07C9  0022               	movlb	2	; select bank2
  5739  07CA  0012               	moviw fsr0++
  5740  07CB  00CF               	movwf	__pdataBANK2& (0+127)
  5741  07CC  0012               	moviw fsr0++
  5742  07CD  00D0               	movwf	(__pdataBANK2+1)& (0+127)
  5743  07CE  0012               	moviw fsr0++
  5744  07CF  00D1               	movwf	(__pdataBANK2+2)& (0+127)
  5745  07D0  0012               	moviw fsr0++
  5746  07D1  00D2               	movwf	(__pdataBANK2+3)& (0+127)
  5747  07D2  0012               	moviw fsr0++
  5748  07D3  00D3               	movwf	(__pdataBANK2+4)& (0+127)
  5749  07D4  0012               	moviw fsr0++
  5750  07D5  00D4               	movwf	(__pdataBANK2+5)& (0+127)
  5751  07D6  0012               	moviw fsr0++
  5752  07D7  00D5               	movwf	(__pdataBANK2+6)& (0+127)
  5753  07D8  0012               	moviw fsr0++
  5754  07D9  00D6               	movwf	(__pdataBANK2+7)& (0+127)
  5755                           
  5756                           ; Clear objects allocated to BIGRAM
  5757  07DA  3098               	movlw	low (0+8600)
  5758  07DB  0084               	movwf	4
  5759  07DC  3021               	movlw	high (0+8600)
  5760  07DD  0085               	movwf	5
  5761  07DE  3058               	movlw	88
  5762  07DF  00FE               	movwf	btemp
  5763  07E0  3002               	movlw	2
  5764  07E1  00FF               	movwf	btemp+1
  5765  07E2  3191  216F  3187   	fcall	clear_ram0
  5766                           
  5767                           ; Clear objects allocated to BANK0
  5768  07E5  0020               	movlb	0	; select bank0
  5769  07E6  01EA               	clrf	__pbssBANK0& (0+127)
  5770  07E7  01EB               	clrf	(__pbssBANK0+1)& (0+127)
  5771                           
  5772                           ; Clear objects allocated to BANK1
  5773  07E8  30A0               	movlw	low __pbssBANK1
  5774  07E9  0084               	movwf	4
  5775  07EA  3000               	movlw	high __pbssBANK1
  5776  07EB  0085               	movwf	5
  5777  07EC  3029               	movlw	41
  5778  07ED  00FE               	movwf	btemp
  5779  07EE  3000               	movlw	0
  5780  07EF  00FF               	movwf	btemp+1
  5781  07F0  3191  216F  3187   	fcall	clear_ram0
  5782                           
  5783                           ; Clear objects allocated to BANK2
  5784  07F3  3020               	movlw	low __pbssBANK2
  5785  07F4  0084               	movwf	4
  5786  07F5  3001               	movlw	high __pbssBANK2
  5787  07F6  0085               	movwf	5
  5788  07F7  302F               	movlw	47
  5789  07F8  00FE               	movwf	btemp
  5790  07F9  3000               	movlw	0
  5791  07FA  00FF               	movwf	btemp+1
  5792  07FB  3191  216F         	fcall	clear_ram0
  5793  07FD                     end_of_initialization:	
  5794                           ;End of C runtime variable initialization code
  5795                           
  5796  07FD                     __end_of__initialization:	
  5797  07FD  0020               	movlb	0
  5798  07FE  3181  29CA         	ljmp	_main	;jump to C main() function
  5799                           
  5800                           	psect	bssBANK0
  5801  006A                     __pbssBANK0:	
  5802  006A                     _lastButton:	
  5803  006A                     	ds	1
  5804  006B                     _button:	
  5805  006B                     	ds	1
  5806                           
  5807                           	psect	bssBANK1
  5808  00A0                     __pbssBANK1:	
  5809  00A0                     _current:	
  5810  00A0                     	ds	8
  5811  00A8                     _voltage:	
  5812  00A8                     	ds	8
  5813  00B0                     _IminCount:	
  5814  00B0                     	ds	4
  5815  00B4                     _Iref:	
  5816  00B4                     	ds	4
  5817  00B8                     _Vref:	
  5818  00B8                     	ds	4
  5819  00BC                     _cc_cv:	
  5820  00BC                     	ds	2
  5821  00BE                     _Iout:	
  5822  00BE                     	ds	2
  5823  00C0                     _batteryState:	
  5824  00C0                     	ds	2
  5825  00C2                     _VHoldMode:	
  5826  00C2                     	ds	2
  5827  00C4                     _readButtons:	
  5828  00C4                     	ds	2
  5829  00C6                     _sampleIndex:	
  5830  00C6                     	ds	2
  5831  00C8                     _j:	
  5832  00C8                     	ds	1
  5833                           
  5834                           	psect	dataBANK1
  5835  00EC                     __pdataBANK1:	
  5836  00EC                     _Imode:	
  5837  00EC                     	ds	2
  5838                           
  5839                           	psect	bssBANK2
  5840  0120                     __pbssBANK2:	
  5841  0120                     _totals:	
  5842  0120                     	ds	16
  5843  0130                     _Ianalogs:	
  5844  0130                     	ds	8
  5845  0138                     _Vanalogs:	
  5846  0138                     	ds	8
  5847  0140                     LCDWriteInt@F14387:	
  5848  0140                     	ds	5
  5849  0145                     _Imin:	
  5850  0145                     	ds	4
  5851  0149                     _stateCounter:	
  5852  0149                     	ds	4
  5853  014D                     _errno:	
  5854  014D                     	ds	2
  5855                           
  5856                           	psect	dataBANK2
  5857  014F                     __pdataBANK2:	
  5858  014F                     _channels:	
  5859  014F                     	ds	8
  5860                           
  5861                           	psect	clrtext
  5862  116F                     clear_ram0:	
  5863                           ;	Called with FSR0 containing the base address, and
  5864                           ;	btemp/btemp+1 has the size to clear
  5865                           
  5866  116F  0064               	clrwdt	;clear the watchdog before getting into this loop
  5867  1170                     clrloop0:	
  5868  1170  0180               	clrf	0	;clear RAM location pointed to by FSR
  5869  1171  3101               	addfsr 0,1
  5870  1172  3001               	movlw	1
  5871  1173  02FE               	subwf	126,f
  5872  1174  3000               	movlw	0
  5873  1175  3BFF               	subwfb	127,f
  5874  1176  087F               	movf	127,w
  5875  1177  047E               	iorwf	126,w
  5876  1178  1903               	btfsc	3,2
  5877  1179  3400               	retlw	0	;all done for this memory range, return
  5878  117A  2970               	goto	clrloop0	;have we reached the end yet?
  5879                           
  5880                           	psect	cstackBANK1
  5881  00C9                     __pcstackBANK1:	
  5882  00C9                     main@IOutTotal:	
  5883                           
  5884                           ; 2 bytes @ 0x0
  5885  00C9                     	ds	2
  5886  00CB                     main@batteryTemp:	
  5887                           
  5888                           ; 2 bytes @ 0x2
  5889  00CB                     	ds	2
  5890  00CD                     main@faultNotReset:	
  5891                           
  5892                           ; 2 bytes @ 0x4
  5893  00CD                     	ds	2
  5894  00CF                     _main$1191:	
  5895                           
  5896                           ; 3 bytes @ 0x6
  5897  00CF                     	ds	3
  5898  00D2                     main@MPPT1:	
  5899                           
  5900                           ; 2 bytes @ 0x9
  5901  00D2                     	ds	2
  5902  00D4                     main@dutyCycle1:	
  5903                           
  5904                           ; 2 bytes @ 0xB
  5905  00D4                     	ds	2
  5906  00D6                     main@faultCount:	
  5907                           
  5908                           ; 2 bytes @ 0xD
  5909  00D6                     	ds	2
  5910  00D8                     _main$1190:	
  5911                           
  5912                           ; 3 bytes @ 0xF
  5913  00D8                     	ds	3
  5914  00DB                     _main$1192:	
  5915                           
  5916                           ; 2 bytes @ 0x12
  5917  00DB                     	ds	2
  5918  00DD                     _main$1193:	
  5919                           
  5920                           ; 2 bytes @ 0x14
  5921  00DD                     	ds	2
  5922  00DF                     main@slowLoop:	
  5923                           
  5924                           ; 1 bytes @ 0x16
  5925  00DF                     	ds	1
  5926  00E0                     main@displayRefresh:	
  5927                           
  5928                           ; 1 bytes @ 0x17
  5929  00E0                     	ds	1
  5930  00E1                     main@efficiency:	
  5931                           
  5932                           ; 3 bytes @ 0x18
  5933  00E1                     	ds	3
  5934  00E4                     main@menuButton:	
  5935                           
  5936                           ; 1 bytes @ 0x1B
  5937  00E4                     	ds	1
  5938  00E5                     main@j:	
  5939                           
  5940                           ; 1 bytes @ 0x1C
  5941  00E5                     	ds	1
  5942  00E6                     main@MPPT0:	
  5943                           
  5944                           ; 2 bytes @ 0x1D
  5945  00E6                     	ds	2
  5946  00E8                     main@dutyCycle6:	
  5947                           
  5948                           ; 2 bytes @ 0x1F
  5949  00E8                     	ds	2
  5950  00EA                     main@dutyCycle7:	
  5951                           
  5952                           ; 2 bytes @ 0x21
  5953  00EA                     	ds	2
  5954                           
  5955                           	psect	cstackCOMMON
  5956  0070                     __pcstackCOMMON:	
  5957  0070                     ?___ftge:	
  5958  0070                     ?_LCDWrite:	
  5959                           ; 1 bit 
  5960                           
  5961  0070                     ?_OSCILLATOR_Initialize:	
  5962                           ; 1 bytes @ 0x0
  5963                           
  5964  0070                     ??_OSCILLATOR_Initialize:	
  5965                           ; 1 bytes @ 0x0
  5966                           
  5967  0070                     ?_TMR2_Initialize:	
  5968                           ; 1 bytes @ 0x0
  5969                           
  5970  0070                     ??_TMR2_Initialize:	
  5971                           ; 1 bytes @ 0x0
  5972                           
  5973  0070                     ?_TMR4_Initialize:	
  5974                           ; 1 bytes @ 0x0
  5975                           
  5976  0070                     ??_TMR4_Initialize:	
  5977                           ; 1 bytes @ 0x0
  5978                           
  5979  0070                     ?_Init_Battery_State_Machine:	
  5980                           ; 1 bytes @ 0x0
  5981                           
  5982  0070                     ??_Init_Battery_State_Machine:	
  5983                           ; 1 bytes @ 0x0
  5984                           
  5985  0070                     ?_Battery_State_Machine:	
  5986                           ; 1 bytes @ 0x0
  5987                           
  5988  0070                     ?_cc_cv_mode:	
  5989                           ; 1 bytes @ 0x0
  5990                           
  5991  0070                     ??_cc_cv_mode:	
  5992                           ; 1 bytes @ 0x0
  5993                           
  5994  0070                     ?_calculateCurrent0:	
  5995                           ; 1 bytes @ 0x0
  5996                           
  5997  0070                     ?_calculateCurrent1:	
  5998                           ; 1 bytes @ 0x0
  5999                           
  6000  0070                     ?_calculateCurrent2:	
  6001                           ; 1 bytes @ 0x0
  6002                           
  6003  0070                     ?_calculateCurrent3:	
  6004                           ; 1 bytes @ 0x0
  6005                           
  6006  0070                     ?_ADC_Initialize:	
  6007                           ; 1 bytes @ 0x0
  6008                           
  6009  0070                     ??_ADC_Initialize:	
  6010                           ; 1 bytes @ 0x0
  6011                           
  6012  0070                     ?_readButton:	
  6013                           ; 1 bytes @ 0x0
  6014                           
  6015  0070                     ?_LCDWriteCharacter:	
  6016                           ; 1 bytes @ 0x0
  6017                           
  6018  0070                     ?_LCDClear:	
  6019                           ; 1 bytes @ 0x0
  6020                           
  6021  0070                     ?_LCDInit:	
  6022                           ; 1 bytes @ 0x0
  6023                           
  6024  0070                     ?_PIN_MANAGER_Initialize:	
  6025                           ; 1 bytes @ 0x0
  6026                           
  6027  0070                     ??_PIN_MANAGER_Initialize:	
  6028                           ; 1 bytes @ 0x0
  6029                           
  6030  0070                     ?_PWM_Initialize:	
  6031                           ; 1 bytes @ 0x0
  6032                           
  6033  0070                     ??_PWM_Initialize:	
  6034                           ; 1 bytes @ 0x0
  6035                           
  6036  0070                     ?_PWM6_LoadDutyValue:	
  6037                           ; 1 bytes @ 0x0
  6038                           
  6039  0070                     ?_PWM7_LoadDutyValue:	
  6040                           ; 1 bytes @ 0x0
  6041                           
  6042  0070                     ?_SYSTEM_Initialize:	
  6043                           ; 1 bytes @ 0x0
  6044                           
  6045  0070                     ?_main:	
  6046                           ; 1 bytes @ 0x0
  6047                           
  6048  0070                     ?_ADCRead:	
  6049                           ; 1 bytes @ 0x0
  6050                           
  6051  0070                     ?___awdiv:	
  6052                           ; 2 bytes @ 0x0
  6053                           
  6054  0070                     ?___lwmod:	
  6055                           ; 2 bytes @ 0x0
  6056                           
  6057  0070                     ?___ftpack:	
  6058                           ; 2 bytes @ 0x0
  6059                           
  6060  0070                     ?_frexp:	
  6061                           ; 3 bytes @ 0x0
  6062                           
  6063  0070                     ?___aldiv:	
  6064                           ; 3 bytes @ 0x0
  6065                           
  6066  0070                     LCDWrite@data:	
  6067                           ; 4 bytes @ 0x0
  6068                           
  6069  0070                     PIN_MANAGER_Initialize@state:	
  6070                           ; 1 bytes @ 0x0
  6071                           
  6072  0070                     PWM6_LoadDutyValue@dutyCycle6:	
  6073                           ; 1 bytes @ 0x0
  6074                           
  6075  0070                     PWM7_LoadDutyValue@dutyCycle7:	
  6076                           ; 2 bytes @ 0x0
  6077                           
  6078  0070                     ___awdiv@divisor:	
  6079                           ; 2 bytes @ 0x0
  6080                           
  6081  0070                     ___lwmod@divisor:	
  6082                           ; 2 bytes @ 0x0
  6083                           
  6084  0070                     ___ftpack@arg:	
  6085                           ; 2 bytes @ 0x0
  6086                           
  6087  0070                     ___ftge@ff1:	
  6088                           ; 3 bytes @ 0x0
  6089                           
  6090  0070                     frexp@value:	
  6091                           ; 3 bytes @ 0x0
  6092                           
  6093  0070                     ___aldiv@divisor:	
  6094                           ; 3 bytes @ 0x0
  6095                           
  6096                           
  6097                           ; 4 bytes @ 0x0
  6098  0070                     	ds	1
  6099  0071                     ??_LCDWrite:	
  6100  0071                     Init_Battery_State_Machine@z:	
  6101                           ; 1 bytes @ 0x1
  6102                           
  6103                           
  6104                           ; 1 bytes @ 0x1
  6105  0071                     	ds	1
  6106  0072                     ??_PWM6_LoadDutyValue:	
  6107  0072                     ??_PWM7_LoadDutyValue:	
  6108                           ; 1 bytes @ 0x2
  6109                           
  6110  0072                     LCDWrite@data_or_command:	
  6111                           ; 1 bytes @ 0x2
  6112                           
  6113  0072                     ___awdiv@dividend:	
  6114                           ; 1 bytes @ 0x2
  6115                           
  6116  0072                     ___lwmod@dividend:	
  6117                           ; 2 bytes @ 0x2
  6118                           
  6119                           
  6120                           ; 2 bytes @ 0x2
  6121  0072                     	ds	1
  6122  0073                     ??_ADCRead:	
  6123  0073                     ADCRead@channel:	
  6124                           ; 1 bytes @ 0x3
  6125                           
  6126  0073                     LCDWrite@d:	
  6127                           ; 1 bytes @ 0x3
  6128                           
  6129  0073                     ___ftpack@exp:	
  6130                           ; 1 bytes @ 0x3
  6131                           
  6132  0073                     frexp@eptr:	
  6133                           ; 1 bytes @ 0x3
  6134                           
  6135  0073                     ___ftge@ff2:	
  6136                           ; 1 bytes @ 0x3
  6137                           
  6138                           
  6139                           ; 3 bytes @ 0x3
  6140  0073                     	ds	1
  6141  0074                     ??_frexp:	
  6142  0074                     ??_readButton:	
  6143                           ; 1 bytes @ 0x4
  6144                           
  6145  0074                     ??___awdiv:	
  6146                           ; 1 bytes @ 0x4
  6147                           
  6148  0074                     ??___lwmod:	
  6149                           ; 1 bytes @ 0x4
  6150                           
  6151  0074                     LCDWrite@i:	
  6152                           ; 1 bytes @ 0x4
  6153                           
  6154  0074                     ___ftpack@sign:	
  6155                           ; 1 bytes @ 0x4
  6156                           
  6157  0074                     ___aldiv@dividend:	
  6158                           ; 1 bytes @ 0x4
  6159                           
  6160                           
  6161                           ; 4 bytes @ 0x4
  6162  0074                     	ds	1
  6163  0075                     ??___ftpack:	
  6164  0075                     ?_gotoXY:	
  6165                           ; 1 bytes @ 0x5
  6166                           
  6167  0075                     ??_LCDInit:	
  6168                           ; 1 bytes @ 0x5
  6169                           
  6170  0075                     gotoXY@y:	
  6171                           ; 1 bytes @ 0x5
  6172                           
  6173  0075                     cc_cv_mode@z:	
  6174                           ; 1 bytes @ 0x5
  6175                           
  6176  0075                     ___awdiv@counter:	
  6177                           ; 1 bytes @ 0x5
  6178                           
  6179  0075                     ___lwmod@counter:	
  6180                           ; 1 bytes @ 0x5
  6181                           
  6182                           
  6183                           ; 1 bytes @ 0x5
  6184  0075                     	ds	1
  6185  0076                     ??_gotoXY:	
  6186  0076                     ??___ftge:	
  6187                           ; 1 bytes @ 0x6
  6188                           
  6189  0076                     ___awdiv@sign:	
  6190                           ; 1 bytes @ 0x6
  6191                           
  6192                           
  6193                           ; 1 bytes @ 0x6
  6194  0076                     	ds	1
  6195  0077                     gotoXY@x:	
  6196  0077                     ___awdiv@quotient:	
  6197                           ; 1 bytes @ 0x7
  6198                           
  6199                           
  6200                           ; 2 bytes @ 0x7
  6201  0077                     	ds	1
  6202  0078                     ??_LCDClear:	
  6203  0078                     ??___aldiv:	
  6204                           ; 1 bytes @ 0x8
  6205                           
  6206  0078                     ?___awtoft:	
  6207                           ; 1 bytes @ 0x8
  6208                           
  6209  0078                     ___awtoft@c:	
  6210                           ; 3 bytes @ 0x8
  6211                           
  6212                           
  6213                           ; 2 bytes @ 0x8
  6214  0078                     	ds	1
  6215  0079                     ?___wmul:	
  6216  0079                     LCDClear@index:	
  6217                           ; 2 bytes @ 0x9
  6218                           
  6219  0079                     ___wmul@multiplier:	
  6220                           ; 2 bytes @ 0x9
  6221                           
  6222                           
  6223                           ; 2 bytes @ 0x9
  6224  0079                     	ds	2
  6225  007B                     ??_SYSTEM_Initialize:	
  6226  007B                     ??___awtoft:	
  6227                           ; 1 bytes @ 0xB
  6228                           
  6229  007B                     ___wmul@multiplicand:	
  6230                           ; 1 bytes @ 0xB
  6231                           
  6232                           
  6233                           ; 2 bytes @ 0xB
  6234  007B                     	ds	2
  6235  007D                     ??_LCDWriteString:	
  6236  007D                     ??___wmul:	
  6237                           ; 1 bytes @ 0xD
  6238                           
  6239  007D                     ___awtoft@sign:	
  6240                           ; 1 bytes @ 0xD
  6241                           
  6242                           
  6243                           ; 1 bytes @ 0xD
  6244  007D                     	ds	1
  6245  007E                     ??_eval_poly:	
  6246  007E                     ??_tempCalc:	
  6247                           ; 1 bytes @ 0xE
  6248                           
  6249  007E                     ??___ftsub:	
  6250                           ; 1 bytes @ 0xE
  6251                           
  6252                           
  6253                           	psect	cstackBANK0
  6254  0020                     __pcstackBANK0:	
  6255                           ; 1 bytes @ 0xE
  6256                           
  6257  0020                     ?___ftdiv:	
  6258  0020                     ___aldiv@counter:	
  6259                           ; 3 bytes @ 0x0
  6260                           
  6261  0020                     ___wmul@product:	
  6262                           ; 1 bytes @ 0x0
  6263                           
  6264  0020                     ___ftdiv@f2:	
  6265                           ; 2 bytes @ 0x0
  6266                           
  6267                           
  6268                           ; 3 bytes @ 0x0
  6269  0020                     	ds	1
  6270  0021                     ___aldiv@sign:	
  6271                           
  6272                           ; 1 bytes @ 0x1
  6273  0021                     	ds	1
  6274  0022                     ??_LCDWriteCharacter:	
  6275  0022                     ___aldiv@quotient:	
  6276                           ; 1 bytes @ 0x2
  6277                           
  6278                           
  6279                           ; 4 bytes @ 0x2
  6280  0022                     	ds	1
  6281  0023                     ___ftdiv@f1:	
  6282                           
  6283                           ; 3 bytes @ 0x3
  6284  0023                     	ds	2
  6285  0025                     LCDWriteCharacter@character:	
  6286                           
  6287                           ; 1 bytes @ 0x5
  6288  0025                     	ds	1
  6289  0026                     ??___ftdiv:	
  6290  0026                     ?_readIAnalog:	
  6291                           ; 1 bytes @ 0x6
  6292                           
  6293  0026                     readIAnalog@channel:	
  6294                           ; 2 bytes @ 0x6
  6295                           
  6296  0026                     LCDWriteCharacter@base:	
  6297                           ; 2 bytes @ 0x6
  6298                           
  6299                           
  6300                           ; 2 bytes @ 0x6
  6301  0026                     	ds	2
  6302  0028                     ??_readIAnalog:	
  6303  0028                     ?_LCDWriteString:	
  6304                           ; 1 bytes @ 0x8
  6305                           
  6306  0028                     ?_LCDWriteInt:	
  6307                           ; 1 bytes @ 0x8
  6308                           
  6309  0028                     LCDWriteString@characters:	
  6310                           ; 1 bytes @ 0x8
  6311                           
  6312  0028                     LCDWriteInt@value:	
  6313                           ; 2 bytes @ 0x8
  6314                           
  6315                           
  6316                           ; 2 bytes @ 0x8
  6317  0028                     	ds	2
  6318  002A                     ??_Battery_State_Machine:	
  6319  002A                     LCDWriteInt@fieldLength:	
  6320                           ; 1 bytes @ 0xA
  6321                           
  6322  002A                     ___ftdiv@cntr:	
  6323                           ; 1 bytes @ 0xA
  6324                           
  6325                           
  6326                           ; 1 bytes @ 0xA
  6327  002A                     	ds	1
  6328  002B                     LCDWriteInt@numPlaces:	
  6329  002B                     ___ftdiv@f3:	
  6330                           ; 1 bytes @ 0xB
  6331                           
  6332                           
  6333                           ; 3 bytes @ 0xB
  6334  002B                     	ds	1
  6335  002C                     LCDWriteInt@sign:	
  6336                           
  6337                           ; 1 bytes @ 0xC
  6338  002C                     	ds	1
  6339  002D                     ??_LCDWriteInt:	
  6340                           
  6341                           ; 1 bytes @ 0xD
  6342  002D                     	ds	1
  6343  002E                     ___ftdiv@exp:	
  6344                           
  6345                           ; 1 bytes @ 0xE
  6346  002E                     	ds	1
  6347  002F                     Battery_State_Machine@z:	
  6348  002F                     ___ftdiv@sign:	
  6349                           ; 1 bytes @ 0xF
  6350                           
  6351                           
  6352                           ; 1 bytes @ 0xF
  6353  002F                     	ds	1
  6354  0030                     ?___ftmul:	
  6355  0030                     ?___fttol:	
  6356                           ; 3 bytes @ 0x10
  6357                           
  6358  0030                     ___ftmul@f1:	
  6359                           ; 4 bytes @ 0x10
  6360                           
  6361  0030                     ___fttol@f1:	
  6362                           ; 3 bytes @ 0x10
  6363                           
  6364                           
  6365                           ; 3 bytes @ 0x10
  6366  0030                     	ds	1
  6367  0031                     LCDWriteInt@str:	
  6368                           
  6369                           ; 5 bytes @ 0x11
  6370  0031                     	ds	2
  6371  0033                     ___ftmul@f2:	
  6372                           
  6373                           ; 3 bytes @ 0x13
  6374  0033                     	ds	1
  6375  0034                     ??___fttol:	
  6376                           
  6377                           ; 1 bytes @ 0x14
  6378  0034                     	ds	2
  6379  0036                     ??___ftmul:	
  6380  0036                     LCDWriteInt@j:	
  6381                           ; 1 bytes @ 0x16
  6382                           
  6383                           
  6384                           ; 1 bytes @ 0x16
  6385  0036                     	ds	1
  6386  0037                     LCDWriteInt@i:	
  6387                           
  6388                           ; 1 bytes @ 0x17
  6389  0037                     	ds	1
  6390  0038                     ___fttol@sign1:	
  6391                           
  6392                           ; 1 bytes @ 0x18
  6393  0038                     	ds	1
  6394  0039                     ___fttol@lval:	
  6395                           
  6396                           ; 4 bytes @ 0x19
  6397  0039                     	ds	1
  6398  003A                     ___ftmul@exp:	
  6399  003A                     readIAnalog@analog_channel:	
  6400                           ; 1 bytes @ 0x1A
  6401                           
  6402                           
  6403                           ; 2 bytes @ 0x1A
  6404  003A                     	ds	1
  6405  003B                     ___ftmul@f3_as_product:	
  6406                           
  6407                           ; 3 bytes @ 0x1B
  6408  003B                     	ds	1
  6409  003C                     readIAnalog@value:	
  6410                           
  6411                           ; 2 bytes @ 0x1C
  6412  003C                     	ds	1
  6413  003D                     ___fttol@exp1:	
  6414                           
  6415                           ; 1 bytes @ 0x1D
  6416  003D                     	ds	1
  6417  003E                     ??_calculateCurrent0:	
  6418  003E                     ??_calculateCurrent1:	
  6419                           ; 1 bytes @ 0x1E
  6420                           
  6421  003E                     ??_calculateCurrent2:	
  6422                           ; 1 bytes @ 0x1E
  6423                           
  6424  003E                     ??_calculateCurrent3:	
  6425                           ; 1 bytes @ 0x1E
  6426                           
  6427  003E                     ___ftmul@cntr:	
  6428                           ; 1 bytes @ 0x1E
  6429                           
  6430                           
  6431                           ; 1 bytes @ 0x1E
  6432  003E                     	ds	1
  6433  003F                     ___ftmul@sign:	
  6434                           
  6435                           ; 1 bytes @ 0x1F
  6436  003F                     	ds	1
  6437  0040                     ?___ftadd:	
  6438  0040                     ___ftadd@f1:	
  6439                           ; 3 bytes @ 0x20
  6440                           
  6441                           
  6442                           ; 3 bytes @ 0x20
  6443  0040                     	ds	3
  6444  0043                     ___ftadd@f2:	
  6445                           
  6446                           ; 3 bytes @ 0x23
  6447  0043                     	ds	3
  6448  0046                     ??___ftadd:	
  6449                           
  6450                           ; 1 bytes @ 0x26
  6451  0046                     	ds	4
  6452  004A                     ___ftadd@sign:	
  6453                           
  6454                           ; 1 bytes @ 0x2A
  6455  004A                     	ds	1
  6456  004B                     ___ftadd@exp2:	
  6457                           
  6458                           ; 1 bytes @ 0x2B
  6459  004B                     	ds	1
  6460  004C                     ___ftadd@exp1:	
  6461                           
  6462                           ; 1 bytes @ 0x2C
  6463  004C                     	ds	1
  6464  004D                     ?_eval_poly:	
  6465  004D                     ?___ftsub:	
  6466                           ; 3 bytes @ 0x2D
  6467                           
  6468  004D                     ___ftsub@f2:	
  6469                           ; 3 bytes @ 0x2D
  6470                           
  6471  004D                     eval_poly@x:	
  6472                           ; 3 bytes @ 0x2D
  6473                           
  6474                           
  6475                           ; 3 bytes @ 0x2D
  6476  004D                     	ds	3
  6477  0050                     eval_poly@d:	
  6478  0050                     ___ftsub@f1:	
  6479                           ; 2 bytes @ 0x30
  6480                           
  6481                           
  6482                           ; 3 bytes @ 0x30
  6483  0050                     	ds	2
  6484  0052                     eval_poly@n:	
  6485                           
  6486                           ; 2 bytes @ 0x32
  6487  0052                     	ds	2
  6488  0054                     eval_poly@res:	
  6489                           
  6490                           ; 3 bytes @ 0x34
  6491  0054                     	ds	3
  6492  0057                     ?_log:	
  6493  0057                     log@x:	
  6494                           ; 3 bytes @ 0x37
  6495                           
  6496                           
  6497                           ; 3 bytes @ 0x37
  6498  0057                     	ds	3
  6499  005A                     ??_log:	
  6500                           
  6501                           ; 1 bytes @ 0x3A
  6502  005A                     	ds	1
  6503  005B                     log@exponent:	
  6504                           
  6505                           ; 2 bytes @ 0x3B
  6506  005B                     	ds	2
  6507  005D                     ?_tempCalc:	
  6508  005D                     tempCalc@analogValue:	
  6509                           ; 2 bytes @ 0x3D
  6510                           
  6511                           
  6512                           ; 2 bytes @ 0x3D
  6513  005D                     	ds	2
  6514  005F                     tempCalc@R:	
  6515                           
  6516                           ; 3 bytes @ 0x3F
  6517  005F                     	ds	3
  6518  0062                     _tempCalc$1189:	
  6519                           
  6520                           ; 3 bytes @ 0x42
  6521  0062                     	ds	3
  6522  0065                     tempCalc@steinhart:	
  6523                           
  6524                           ; 3 bytes @ 0x45
  6525  0065                     	ds	3
  6526  0068                     ??_main:	
  6527                           
  6528                           ; 1 bytes @ 0x48
  6529  0068                     	ds	2
  6530                           
  6531                           	psect	maintext
  6532  01CA                     __pmaintext:	
  6533 ;;
  6534 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  6535 ;;
  6536 ;; *************** function _main *****************
  6537 ;; Defined at:
  6538 ;;		line 41 in file "main.c"
  6539 ;; Parameters:    Size  Location     Type
  6540 ;;		None
  6541 ;; Auto vars:     Size  Location     Type
  6542 ;;  efficiency      3   24[BANK1 ] float 
  6543 ;;  dutyCycle7      2   33[BANK1 ] unsigned int 
  6544 ;;  dutyCycle6      2   31[BANK1 ] unsigned int 
  6545 ;;  MPPT0           2   29[BANK1 ] int 
  6546 ;;  faultCount      2   13[BANK1 ] unsigned int 
  6547 ;;  dutyCycle1      2   11[BANK1 ] unsigned int 
  6548 ;;  MPPT1           2    9[BANK1 ] int 
  6549 ;;  faultNotRese    2    4[BANK1 ] unsigned int 
  6550 ;;  batteryTemp     2    2[BANK1 ] int 
  6551 ;;  IOutTotal       2    0[BANK1 ] int 
  6552 ;;  j               1   28[BANK1 ] unsigned char 
  6553 ;;  menuButton      1   27[BANK1 ] unsigned char 
  6554 ;;  displayRefre    1   23[BANK1 ] unsigned char 
  6555 ;;  slowLoop        1   22[BANK1 ] unsigned char 
  6556 ;; Return value:  Size  Location     Type
  6557 ;;                  1    wreg      void 
  6558 ;; Registers used:
  6559 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6560 ;; Tracked objects:
  6561 ;;		On entry : B1F/0
  6562 ;;		On exit  : 0/0
  6563 ;;		Unchanged: 0/0
  6564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6565 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6566 ;;      Locals:         0       0      35       0       0       0       0       0       0       0       0       0       
      +0       0
  6567 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6568 ;;      Totals:         0       2      35       0       0       0       0       0       0       0       0       0       
      +0       0
  6569 ;;Total ram usage:       37 bytes
  6570 ;; Hardware stack levels required when called:    5
  6571 ;; This function calls:
  6572 ;;		_ADCRead
  6573 ;;		_Battery_State_Machine
  6574 ;;		_LCDClear
  6575 ;;		_LCDInit
  6576 ;;		_LCDWriteCharacter
  6577 ;;		_LCDWriteInt
  6578 ;;		_PWM6_LoadDutyValue
  6579 ;;		_PWM7_LoadDutyValue
  6580 ;;		_SYSTEM_Initialize
  6581 ;;		___awdiv
  6582 ;;		___awtoft
  6583 ;;		___ftdiv
  6584 ;;		___ftmul
  6585 ;;		___fttol
  6586 ;;		___wmul
  6587 ;;		_calculateCurrent0
  6588 ;;		_calculateCurrent1
  6589 ;;		_calculateCurrent2
  6590 ;;		_calculateCurrent3
  6591 ;;		_cc_cv_mode
  6592 ;;		_gotoXY
  6593 ;;		_readButton
  6594 ;;		_readIAnalog
  6595 ;;		_tempCalc
  6596 ;; This function is called by:
  6597 ;;		Startup code after reset
  6598 ;; This function uses a non-reentrant model
  6599 ;;
  6600                           
  6601                           
  6602                           ;psect for function _main
  6603  01CA                     _main:	
  6604                           
  6605                           ;main.c: 43: int16_t MPPT0 = 1750;
  6606                           
  6607                           ;incstack = 0
  6608                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6609  01CA  30D6               	movlw	214
  6610  01CB  0021               	movlb	1	; select bank1
  6611  01CC  00E6               	movwf	main@MPPT0^(0+128)
  6612  01CD  3006               	movlw	6
  6613  01CE  00E7               	movwf	(main@MPPT0^(0+128)+1)
  6614                           
  6615                           ;main.c: 44: int16_t MPPT1 = 1760;
  6616  01CF  30E0               	movlw	224
  6617  01D0  00D2               	movwf	main@MPPT1^(0+128)
  6618  01D1  3006               	movlw	6
  6619  01D2  00D3               	movwf	(main@MPPT1^(0+128)+1)
  6620                           
  6621                           ;main.c: 46: uint16_t dutyCycle6 = 1023;
  6622  01D3  30FF               	movlw	255
  6623  01D4  00E8               	movwf	main@dutyCycle6^(0+128)
  6624  01D5  3003               	movlw	3
  6625  01D6  00E9               	movwf	(main@dutyCycle6^(0+128)+1)
  6626                           
  6627                           ;main.c: 47: uint16_t dutyCycle7 = 256;
  6628  01D7  3000               	movlw	0
  6629  01D8  00EA               	movwf	main@dutyCycle7^(0+128)
  6630  01D9  3001               	movlw	1
  6631  01DA  00EB               	movwf	(main@dutyCycle7^(0+128)+1)
  6632                           
  6633                           ;main.c: 48: uint16_t dutyCycle1 = 60;
  6634  01DB  303C               	movlw	60
  6635  01DC  00D4               	movwf	main@dutyCycle1^(0+128)
  6636  01DD  3000               	movlw	0
  6637  01DE  00D5               	movwf	(main@dutyCycle1^(0+128)+1)
  6638                           
  6639                           ;main.c: 49: int16_t IOutTotal = 0;
  6640  01DF  01C9               	clrf	main@IOutTotal^(0+128)
  6641  01E0  01CA               	clrf	(main@IOutTotal+1)^(0+128)
  6642                           
  6643                           ;main.c: 51: uint8_t j = 0;
  6644  01E1  01E5               	clrf	main@j^(0+128)
  6645                           
  6646                           ;main.c: 54: uint8_t slowLoop = 200;
  6647  01E2  30C8               	movlw	200
  6648  01E3  0020               	movlb	0	; select bank0
  6649  01E4  00E8               	movwf	??_main
  6650  01E5  0868               	movf	??_main,w
  6651  01E6  0021               	movlb	1	; select bank1
  6652  01E7  00DF               	movwf	main@slowLoop^(0+128)
  6653                           
  6654                           ;main.c: 55: uint8_t displayRefresh = 0;
  6655  01E8  01E0               	clrf	main@displayRefresh^(0+128)
  6656                           
  6657                           ;main.c: 56: int16_t batteryTemp = 250;
  6658  01E9  30FA               	movlw	250
  6659  01EA  00CB               	movwf	main@batteryTemp^(0+128)
  6660  01EB  3000               	movlw	0
  6661  01EC  00CC               	movwf	(main@batteryTemp^(0+128)+1)
  6662                           
  6663                           ;main.c: 57: float efficiency = 0;
  6664  01ED  3000               	movlw	0
  6665  01EE  00E1               	movwf	main@efficiency^(0+128)
  6666  01EF  3000               	movlw	0
  6667  01F0  00E2               	movwf	(main@efficiency+1)^(0+128)
  6668  01F1  3000               	movlw	0
  6669  01F2  00E3               	movwf	(main@efficiency+2)^(0+128)
  6670                           
  6671                           ;main.c: 58: extern int8_t Imode[2];
  6672                           ;main.c: 59: extern int16_t Vref[2];
  6673                           ;main.c: 60: extern int16_t Iref[2];
  6674                           ;main.c: 61: uint8_t menuButton = 0;
  6675  01F3  01E4               	clrf	main@menuButton^(0+128)
  6676                           
  6677                           ;main.c: 62: uint16_t faultCount = 0;
  6678  01F4  01D6               	clrf	main@faultCount^(0+128)
  6679  01F5  01D7               	clrf	(main@faultCount+1)^(0+128)
  6680                           
  6681                           ;main.c: 63: uint16_t faultNotReset = 0;
  6682  01F6  01CD               	clrf	main@faultNotReset^(0+128)
  6683  01F7  01CE               	clrf	(main@faultNotReset+1)^(0+128)
  6684                           
  6685                           ;main.c: 64: extern int8_t VHoldMode[2];
  6686                           ;main.c: 65: extern uint8_t batteryState[2];
  6687                           ;main.c: 67: extern uint16_t IminCount[2];
  6688                           ;main.c: 70: SYSTEM_Initialize();
  6689  01F8  3193  2347  3181   	fcall	_SYSTEM_Initialize
  6690                           
  6691                           ;main.c: 72: LCDClear();
  6692  01FB  3192  228A  3181   	fcall	_LCDClear
  6693  01FE                     l3086:	
  6694                           ;main.c: 74: void calculateCurrent0(void);
  6695                           ;main.c: 75: void calculateCurrent1(void);
  6696                           ;main.c: 76: void calculateCurrent2(void);
  6697                           ;main.c: 77: void calculateCurrent3(void);
  6698                           ;main.c: 91: while (1)
  6699                           
  6700                           
  6701                           ;main.c: 92: {
  6702                           ;main.c: 93: if(!(RB2))
  6703  01FE  0020               	movlb	0	; select bank0
  6704  01FF  190D               	btfsc	13,2	;volatile
  6705  0200  2A12               	goto	l3094
  6706                           
  6707                           ;main.c: 94: {
  6708                           ;main.c: 95: LATA5=0;
  6709  0201  1296               	bcf	22,5	;volatile
  6710                           
  6711                           ;main.c: 96: _delay((unsigned long)((400)*(32000000/4000000.0)));
  6712  0202  3005               	movlw	5
  6713  0203  0020               	movlb	0	; select bank0
  6714  0204  00E8               	movwf	??_main
  6715  0205  3026               	movlw	38
  6716  0206                     u3897:	
  6717  0206  0B89               	decfsz	9,f
  6718  0207  2A06               	goto	u3897
  6719  0208  0BE8               	decfsz	??_main,f
  6720  0209  2A06               	goto	u3897
  6721  020A  0000               	nop
  6722                           
  6723                           ;main.c: 97: faultCount+=1;
  6724  020B  3001               	movlw	1
  6725  020C  0021               	movlb	1	; select bank1
  6726  020D  07D6               	addwf	main@faultCount^(0+128),f
  6727  020E  3000               	movlw	0
  6728  020F  3DD7               	addwfc	(main@faultCount+1)^(0+128),f
  6729                           
  6730                           ;main.c: 98: LATA5=1;
  6731  0210  0020               	movlb	0	; select bank0
  6732  0211  1696               	bsf	22,5	;volatile
  6733  0212                     l3094:	
  6734                           
  6735                           ;main.c: 99: }
  6736                           ;main.c: 100: for(j=0;j<4;j++) Ianalogs[j]=readIAnalog(j);
  6737  0212  0021               	movlb	1	; select bank1
  6738  0213  01E5               	clrf	main@j^(0+128)
  6739  0214  3004               	movlw	4
  6740  0215  0265               	subwf	main@j^(0+128),w
  6741  0216  1803               	btfsc	3,0
  6742  0217  2A37               	goto	l3106
  6743  0218                     l3100:	
  6744  0218  0865               	movf	main@j^(0+128),w
  6745  0219  0020               	movlb	0	; select bank0
  6746  021A  00E8               	movwf	??_main
  6747  021B  01E9               	clrf	??_main+1
  6748  021C  0868               	movf	??_main,w
  6749  021D  00A6               	movwf	readIAnalog@channel
  6750  021E  0869               	movf	??_main+1,w
  6751  021F  00A7               	movwf	readIAnalog@channel+1
  6752  0220  3180  207E  3181   	fcall	_readIAnalog
  6753  0223  0021               	movlb	1	; select bank1
  6754  0224  3565               	lslf	main@j^(0+128),w
  6755  0225  3E30               	addlw	(low (_Ianalogs| (0+256)))& (0+255)
  6756  0226  0086               	movwf	6
  6757  0227  3001               	movlw	1	; select bank2/3
  6758  0228  0087               	movwf	7
  6759  0229  0020               	movlb	0	; select bank0
  6760  022A  0826               	movf	?_readIAnalog,w
  6761  022B  3FC0               	movwi [0]fsr1
  6762  022C  0827               	movf	?_readIAnalog+1,w
  6763  022D  3FC1               	movwi [1]fsr1
  6764  022E  3001               	movlw	1
  6765  022F  00E8               	movwf	??_main
  6766  0230  0868               	movf	??_main,w
  6767  0231  0021               	movlb	1	; select bank1
  6768  0232  07E5               	addwf	main@j^(0+128),f
  6769  0233  3004               	movlw	4
  6770  0234  0265               	subwf	main@j^(0+128),w
  6771  0235  1C03               	skipc
  6772  0236  2A18               	goto	l3100
  6773  0237                     l3106:	
  6774                           
  6775                           ;main.c: 102: Vanalogs[0]=ADCRead(21);
  6776  0237  3015               	movlw	21
  6777  0238  3191  21BF  3181   	fcall	_ADCRead
  6778  023B  0871               	movf	?_ADCRead+1,w
  6779  023C  0022               	movlb	2	; select bank2
  6780  023D  00B9               	movwf	(_Vanalogs+1)^(0+256)
  6781  023E  0870               	movf	?_ADCRead,w
  6782  023F  00B8               	movwf	_Vanalogs^(0+256)
  6783                           
  6784                           ;main.c: 104: Vanalogs[1]=ADCRead(17);
  6785  0240  3011               	movlw	17
  6786  0241  3191  21BF  3181   	fcall	_ADCRead
  6787  0244  0871               	movf	?_ADCRead+1,w
  6788  0245  0022               	movlb	2	; select bank2
  6789  0246  00BB               	movwf	((_Vanalogs+1)^(0+256)+2)
  6790  0247  0870               	movf	?_ADCRead,w
  6791  0248  00BA               	movwf	(_Vanalogs^(0+256)+2)
  6792                           
  6793                           ;main.c: 106: Vanalogs[2]=ADCRead(23);
  6794  0249  3017               	movlw	23
  6795  024A  3191  21BF  3181   	fcall	_ADCRead
  6796  024D  0871               	movf	?_ADCRead+1,w
  6797  024E  0022               	movlb	2	; select bank2
  6798  024F  00BD               	movwf	((_Vanalogs+1)^(0+256)+4)
  6799  0250  0870               	movf	?_ADCRead,w
  6800  0251  00BC               	movwf	(_Vanalogs^(0+256)+4)
  6801                           
  6802                           ;main.c: 108: Vanalogs[3]=ADCRead(19);
  6803  0252  3013               	movlw	19
  6804  0253  3191  21BF  3181   	fcall	_ADCRead
  6805  0256  0871               	movf	?_ADCRead+1,w
  6806  0257  0022               	movlb	2	; select bank2
  6807  0258  00BF               	movwf	((_Vanalogs+1)^(0+256)+6)
  6808  0259  0870               	movf	?_ADCRead,w
  6809  025A  00BE               	movwf	(_Vanalogs^(0+256)+6)
  6810                           
  6811                           ;main.c: 110: if(!(RB2))faultNotReset+=1;
  6812  025B  0020               	movlb	0	; select bank0
  6813  025C  190D               	btfsc	13,2	;volatile
  6814  025D  2A63               	goto	l3112
  6815  025E  3001               	movlw	1
  6816  025F  0021               	movlb	1	; select bank1
  6817  0260  07CD               	addwf	main@faultNotReset^(0+128),f
  6818  0261  3000               	movlw	0
  6819  0262  3DCE               	addwfc	(main@faultNotReset+1)^(0+128),f
  6820  0263                     l3112:	
  6821                           
  6822                           ;main.c: 120: voltage[0]=(int16_t)(Vanalogs[0]/.5448);
  6823  0263  0022               	movlb	2	; select bank2
  6824  0264  0839               	movf	(_Vanalogs+1)^(0+256),w
  6825  0265  00F9               	movwf	___awtoft@c+1
  6826  0266  0838               	movf	_Vanalogs^(0+256),w
  6827  0267  00F8               	movwf	___awtoft@c
  6828  0268  3192  2245  3181   	fcall	___awtoft
  6829  026B  0878               	movf	?___awtoft,w
  6830  026C  0020               	movlb	0	; select bank0
  6831  026D  00A3               	movwf	___ftdiv@f1
  6832  026E  0879               	movf	?___awtoft+1,w
  6833  026F  00A4               	movwf	___ftdiv@f1+1
  6834  0270  087A               	movf	?___awtoft+2,w
  6835  0271  00A5               	movwf	___ftdiv@f1+2
  6836  0272  3078               	movlw	120
  6837  0273  00A0               	movwf	___ftdiv@f2
  6838  0274  300B               	movlw	11
  6839  0275  00A1               	movwf	___ftdiv@f2+1
  6840  0276  303F               	movlw	63
  6841  0277  00A2               	movwf	___ftdiv@f2+2
  6842  0278  3197  2757  3181   	fcall	___ftdiv
  6843  027B  0020               	movlb	0	; select bank0
  6844  027C  0820               	movf	?___ftdiv,w
  6845  027D  00B0               	movwf	___fttol@f1
  6846  027E  0821               	movf	?___ftdiv+1,w
  6847  027F  00B1               	movwf	___fttol@f1+1
  6848  0280  0822               	movf	?___ftdiv+2,w
  6849  0281  00B2               	movwf	___fttol@f1+2
  6850  0282  3196  26D0  3181   	fcall	___fttol
  6851  0285  0020               	movlb	0	; select bank0
  6852  0286  0831               	movf	?___fttol+1,w
  6853  0287  0021               	movlb	1	; select bank1
  6854  0288  00A9               	movwf	(_voltage+1)^(0+128)
  6855  0289  0020               	movlb	0	; select bank0
  6856  028A  0830               	movf	?___fttol,w
  6857  028B  0021               	movlb	1	; select bank1
  6858  028C  00A8               	movwf	_voltage^(0+128)
  6859                           
  6860                           ;main.c: 122: voltage[1]=(int16_t)(Vanalogs[1]/.54503);
  6861  028D  0022               	movlb	2	; select bank2
  6862  028E  083B               	movf	((_Vanalogs+1)^(0+256)+2),w
  6863  028F  00F9               	movwf	___awtoft@c+1
  6864  0290  083A               	movf	(_Vanalogs^(0+256)+2),w
  6865  0291  00F8               	movwf	___awtoft@c
  6866  0292  3192  2245  3181   	fcall	___awtoft
  6867  0295  0878               	movf	?___awtoft,w
  6868  0296  0020               	movlb	0	; select bank0
  6869  0297  00A3               	movwf	___ftdiv@f1
  6870  0298  0879               	movf	?___awtoft+1,w
  6871  0299  00A4               	movwf	___ftdiv@f1+1
  6872  029A  087A               	movf	?___awtoft+2,w
  6873  029B  00A5               	movwf	___ftdiv@f1+2
  6874  029C  3087               	movlw	135
  6875  029D  00A0               	movwf	___ftdiv@f2
  6876  029E  300B               	movlw	11
  6877  029F  00A1               	movwf	___ftdiv@f2+1
  6878  02A0  303F               	movlw	63
  6879  02A1  00A2               	movwf	___ftdiv@f2+2
  6880  02A2  3197  2757  3181   	fcall	___ftdiv
  6881  02A5  0020               	movlb	0	; select bank0
  6882  02A6  0820               	movf	?___ftdiv,w
  6883  02A7  00B0               	movwf	___fttol@f1
  6884  02A8  0821               	movf	?___ftdiv+1,w
  6885  02A9  00B1               	movwf	___fttol@f1+1
  6886  02AA  0822               	movf	?___ftdiv+2,w
  6887  02AB  00B2               	movwf	___fttol@f1+2
  6888  02AC  3196  26D0  3181   	fcall	___fttol
  6889  02AF  0020               	movlb	0	; select bank0
  6890  02B0  0831               	movf	?___fttol+1,w
  6891  02B1  0021               	movlb	1	; select bank1
  6892  02B2  00AB               	movwf	((_voltage+1)^(0+128)+2)
  6893  02B3  0020               	movlb	0	; select bank0
  6894  02B4  0830               	movf	?___fttol,w
  6895  02B5  0021               	movlb	1	; select bank1
  6896  02B6  00AA               	movwf	(_voltage^(0+128)+2)
  6897                           
  6898                           ;main.c: 124: voltage[2]=(int16_t)(Vanalogs[2]/.405775);
  6899  02B7  0022               	movlb	2	; select bank2
  6900  02B8  083D               	movf	((_Vanalogs+1)^(0+256)+4),w
  6901  02B9  00F9               	movwf	___awtoft@c+1
  6902  02BA  083C               	movf	(_Vanalogs^(0+256)+4),w
  6903  02BB  00F8               	movwf	___awtoft@c
  6904  02BC  3192  2245  3181   	fcall	___awtoft
  6905  02BF  0878               	movf	?___awtoft,w
  6906  02C0  0020               	movlb	0	; select bank0
  6907  02C1  00A3               	movwf	___ftdiv@f1
  6908  02C2  0879               	movf	?___awtoft+1,w
  6909  02C3  00A4               	movwf	___ftdiv@f1+1
  6910  02C4  087A               	movf	?___awtoft+2,w
  6911  02C5  00A5               	movwf	___ftdiv@f1+2
  6912  02C6  30C2               	movlw	194
  6913  02C7  00A0               	movwf	___ftdiv@f2
  6914  02C8  30CF               	movlw	207
  6915  02C9  00A1               	movwf	___ftdiv@f2+1
  6916  02CA  303E               	movlw	62
  6917  02CB  00A2               	movwf	___ftdiv@f2+2
  6918  02CC  3197  2757  3181   	fcall	___ftdiv
  6919  02CF  0020               	movlb	0	; select bank0
  6920  02D0  0820               	movf	?___ftdiv,w
  6921  02D1  00B0               	movwf	___fttol@f1
  6922  02D2  0821               	movf	?___ftdiv+1,w
  6923  02D3  00B1               	movwf	___fttol@f1+1
  6924  02D4  0822               	movf	?___ftdiv+2,w
  6925  02D5  00B2               	movwf	___fttol@f1+2
  6926  02D6  3196  26D0  3181   	fcall	___fttol
  6927  02D9  0020               	movlb	0	; select bank0
  6928  02DA  0831               	movf	?___fttol+1,w
  6929  02DB  0021               	movlb	1	; select bank1
  6930  02DC  00AD               	movwf	((_voltage+1)^(0+128)+4)
  6931  02DD  0020               	movlb	0	; select bank0
  6932  02DE  0830               	movf	?___fttol,w
  6933  02DF  0021               	movlb	1	; select bank1
  6934  02E0  00AC               	movwf	(_voltage^(0+128)+4)
  6935                           
  6936                           ;main.c: 126: voltage[3]=(int16_t)(Vanalogs[3]/.405775);
  6937  02E1  0022               	movlb	2	; select bank2
  6938  02E2  083F               	movf	((_Vanalogs+1)^(0+256)+6),w
  6939  02E3  00F9               	movwf	___awtoft@c+1
  6940  02E4  083E               	movf	(_Vanalogs^(0+256)+6),w
  6941  02E5  00F8               	movwf	___awtoft@c
  6942  02E6  3192  2245  3181   	fcall	___awtoft
  6943  02E9  0878               	movf	?___awtoft,w
  6944  02EA  0020               	movlb	0	; select bank0
  6945  02EB  00A3               	movwf	___ftdiv@f1
  6946  02EC  0879               	movf	?___awtoft+1,w
  6947  02ED  00A4               	movwf	___ftdiv@f1+1
  6948  02EE  087A               	movf	?___awtoft+2,w
  6949  02EF  00A5               	movwf	___ftdiv@f1+2
  6950  02F0  30C2               	movlw	194
  6951  02F1  00A0               	movwf	___ftdiv@f2
  6952  02F2  30CF               	movlw	207
  6953  02F3  00A1               	movwf	___ftdiv@f2+1
  6954  02F4  303E               	movlw	62
  6955  02F5  00A2               	movwf	___ftdiv@f2+2
  6956  02F6  3197  2757  3181   	fcall	___ftdiv
  6957  02F9  0020               	movlb	0	; select bank0
  6958  02FA  0820               	movf	?___ftdiv,w
  6959  02FB  00B0               	movwf	___fttol@f1
  6960  02FC  0821               	movf	?___ftdiv+1,w
  6961  02FD  00B1               	movwf	___fttol@f1+1
  6962  02FE  0822               	movf	?___ftdiv+2,w
  6963  02FF  00B2               	movwf	___fttol@f1+2
  6964  0300  3196  26D0  3181   	fcall	___fttol
  6965  0303  0020               	movlb	0	; select bank0
  6966  0304  0831               	movf	?___fttol+1,w
  6967  0305  0021               	movlb	1	; select bank1
  6968  0306  00AF               	movwf	((_voltage+1)^(0+128)+6)
  6969  0307  0020               	movlb	0	; select bank0
  6970  0308  0830               	movf	?___fttol,w
  6971  0309  0021               	movlb	1	; select bank1
  6972  030A  00AE               	movwf	(_voltage^(0+128)+6)
  6973                           
  6974                           ;main.c: 128: calculateCurrent0();
  6975  030B  3194  2431  3181   	fcall	_calculateCurrent0
  6976                           
  6977                           ;main.c: 130: calculateCurrent1();
  6978  030E  3194  2476  3181   	fcall	_calculateCurrent1
  6979                           
  6980                           ;main.c: 132: calculateCurrent2();
  6981  0311  3194  24BB  3181   	fcall	_calculateCurrent2
  6982                           
  6983                           ;main.c: 134: calculateCurrent3();
  6984  0314  3195  2500  3181   	fcall	_calculateCurrent3
  6985                           
  6986                           ;main.c: 136: if(Imode[0])
  6987  0317  0021               	movlb	1	; select bank1
  6988  0318  086C               	movf	_Imode^(0+128),w
  6989  0319  1903               	btfsc	3,2
  6990  031A  2B3B               	goto	l3142
  6991                           
  6992                           ;main.c: 137: {
  6993                           ;main.c: 138: if(voltage[2]<MPPT0)
  6994  031B  082D               	movf	((_voltage+1)^(0+128)+4),w
  6995  031C  3A80               	xorlw	128
  6996  031D  0020               	movlb	0	; select bank0
  6997  031E  00E8               	movwf	??_main
  6998  031F  0021               	movlb	1	; select bank1
  6999  0320  0867               	movf	(main@MPPT0+1)^(0+128),w
  7000  0321  3A80               	xorlw	128
  7001  0322  0020               	movlb	0	; select bank0
  7002  0323  0268               	subwf	??_main,w
  7003  0324  1D03               	skipz
  7004  0325  2B29               	goto	u3645
  7005  0326  0021               	movlb	1	; select bank1
  7006  0327  0866               	movf	main@MPPT0^(0+128),w
  7007  0328  022C               	subwf	(_voltage^(0+128)+4),w
  7008  0329                     u3645:	
  7009  0329  1C03               	btfss	3,0
  7010  032A  2B4B               	goto	L1
  7011                           
  7012                           ;main.c: 145: else if(voltage[2]>MPPT0)
  7013                           
  7014                           ;main.c: 143: }
  7015                           ;main.c: 144: }
  7016                           
  7017                           ;main.c: 141: {
  7018                           ;main.c: 142: dutyCycle6+=1;
  7019                           
  7020                           ;main.c: 139: {
  7021                           ;main.c: 140: if(dutyCycle6<1023)
  7022  032B  0021               	movlb	1	; select bank1
  7023  032C  0867               	movf	(main@MPPT0+1)^(0+128),w
  7024  032D  3A80               	xorlw	128
  7025  032E  0020               	movlb	0	; select bank0
  7026  032F  00E8               	movwf	??_main
  7027  0330  0021               	movlb	1	; select bank1
  7028  0331  082D               	movf	((_voltage+1)^(0+128)+4),w
  7029  0332  3A80               	xorlw	128
  7030  0333  0020               	movlb	0	; select bank0
  7031  0334  0268               	subwf	??_main,w
  7032  0335  1D03               	skipz
  7033  0336  2B67               	goto	u3705
  7034  0337  0021               	movlb	1	; select bank1
  7035  0338  082C               	movf	(_voltage^(0+128)+4),w
  7036  0339  0266               	subwf	main@MPPT0^(0+128),w
  7037  033A  2B67               	goto	u3705
  7038  033B                     l3142:	
  7039                           ;main.c: 153: }
  7040                           
  7041                           ;main.c: 150: }
  7042                           ;main.c: 151: }
  7043                           
  7044                           ;main.c: 148: {
  7045                           ;main.c: 149: dutyCycle6-=1;
  7046                           
  7047                           ;main.c: 146: {
  7048                           ;main.c: 147: if(dutyCycle6>0)
  7049                           
  7050                           
  7051                           ;main.c: 154: else
  7052                           ;main.c: 155: {
  7053                           ;main.c: 156: if(voltage[0]>(int16_t)Vref[0])
  7054  033B  0839               	movf	(_Vref+1)^(0+128),w
  7055  033C  3A80               	xorlw	128
  7056  033D  0020               	movlb	0	; select bank0
  7057  033E  00E8               	movwf	??_main
  7058  033F  0021               	movlb	1	; select bank1
  7059  0340  0829               	movf	(_voltage+1)^(0+128),w
  7060  0341  3A80               	xorlw	128
  7061  0342  0020               	movlb	0	; select bank0
  7062  0343  0268               	subwf	??_main,w
  7063  0344  1D03               	skipz
  7064  0345  2B49               	goto	u3685
  7065  0346  0021               	movlb	1	; select bank1
  7066  0347  0828               	movf	_voltage^(0+128),w
  7067  0348  0238               	subwf	_Vref^(0+128),w
  7068  0349                     u3685:	
  7069  0349  1803               	skipnc
  7070  034A  2B58               	goto	l3148
  7071  034B                     L1:	
  7072                           
  7073                           ;main.c: 157: {
  7074                           ;main.c: 158: if(dutyCycle6<1023) dutyCycle6+=1;
  7075  034B  3003               	movlw	3
  7076  034C  0021               	movlb	1	; select bank1
  7077  034D  0269               	subwf	(main@dutyCycle6+1)^(0+128),w
  7078  034E  30FF               	movlw	255
  7079  034F  1903               	skipnz
  7080  0350  0268               	subwf	main@dutyCycle6^(0+128),w
  7081  0351  1803               	skipnc
  7082  0352  2B72               	goto	l3154
  7083  0353  3001               	movlw	1
  7084  0354  07E8               	addwf	main@dutyCycle6^(0+128),f
  7085  0355  3000               	movlw	0
  7086  0356  3DE9               	addwfc	(main@dutyCycle6+1)^(0+128),f
  7087                           
  7088                           ;main.c: 159: }
  7089  0357  2B72               	goto	l3154
  7090  0358                     l3148:	
  7091                           
  7092                           ;main.c: 160: else if(voltage[0]<(int16_t)Vref[0])
  7093  0358  0021               	movlb	1	; select bank1
  7094  0359  0829               	movf	(_voltage+1)^(0+128),w
  7095  035A  3A80               	xorlw	128
  7096  035B  0020               	movlb	0	; select bank0
  7097  035C  00E8               	movwf	??_main
  7098  035D  0021               	movlb	1	; select bank1
  7099  035E  0839               	movf	(_Vref+1)^(0+128),w
  7100  035F  3A80               	xorlw	128
  7101  0360  0020               	movlb	0	; select bank0
  7102  0361  0268               	subwf	??_main,w
  7103  0362  1D03               	skipz
  7104  0363  2B67               	goto	u3705
  7105  0364  0021               	movlb	1	; select bank1
  7106  0365  0838               	movf	_Vref^(0+128),w
  7107  0366  0228               	subwf	_voltage^(0+128),w
  7108  0367                     u3705:	
  7109  0367  1803               	skipnc
  7110  0368  2B72               	goto	l3154
  7111                           
  7112                           ;main.c: 161: {
  7113                           ;main.c: 162: if(dutyCycle6>0) dutyCycle6-=1;;
  7114  0369  0021               	movlb	1	; select bank1
  7115  036A  0868               	movf	main@dutyCycle6^(0+128),w
  7116  036B  0469               	iorwf	(main@dutyCycle6+1)^(0+128),w
  7117  036C  1903               	btfsc	3,2
  7118  036D  2B72               	goto	l3154
  7119  036E  3001               	movlw	1
  7120  036F  02E8               	subwf	main@dutyCycle6^(0+128),f
  7121  0370  3000               	movlw	0
  7122  0371  3BE9               	subwfb	(main@dutyCycle6+1)^(0+128),f
  7123  0372                     l3154:	
  7124                           ;main.c: 163: }
  7125                           
  7126                           
  7127                           ;main.c: 165: }
  7128                           ;main.c: 167: if(Imode[1])
  7129  0372  0021               	movlb	1	; select bank1
  7130  0373  086D               	movf	(_Imode^(0+128)+1),w
  7131  0374  1903               	btfsc	3,2
  7132  0375  2B87               	goto	l3166
  7133                           
  7134                           ;main.c: 168: {
  7135                           ;main.c: 169: if(voltage[3]<MPPT1)
  7136  0376  082F               	movf	((_voltage+1)^(0+128)+6),w
  7137  0377  3A80               	xorlw	128
  7138  0378  0020               	movlb	0	; select bank0
  7139  0379  00E8               	movwf	??_main
  7140  037A  0021               	movlb	1	; select bank1
  7141  037B  0853               	movf	(main@MPPT1+1)^(0+128),w
  7142  037C  3A80               	xorlw	128
  7143  037D  0020               	movlb	0	; select bank0
  7144  037E  0268               	subwf	??_main,w
  7145  037F  1D03               	skipz
  7146  0380  2B84               	goto	u3735
  7147  0381  0021               	movlb	1	; select bank1
  7148  0382  0852               	movf	main@MPPT1^(0+128),w
  7149  0383  022E               	subwf	(_voltage^(0+128)+6),w
  7150  0384                     u3735:	
  7151  0384  1C03               	btfss	3,0
  7152  0385  2B97               	goto	L2
  7153                           
  7154                           ;main.c: 174: }
  7155                           ;main.c: 175: }
  7156                           
  7157                           ;main.c: 172: {
  7158                           ;main.c: 173: dutyCycle7+=1;
  7159                           
  7160                           ;main.c: 170: {
  7161                           ;main.c: 171: if(dutyCycle7<1023)
  7162  0386  2BB5               	goto	L3
  7163  0387                     l3166:	
  7164                           ;main.c: 179: }
  7165                           ;main.c: 180: }
  7166                           
  7167                           ;main.c: 177: {
  7168                           ;main.c: 178: dutyCycle7-=1;
  7169                           
  7170                           ;main.c: 176: else if(dutyCycle7>0)
  7171                           
  7172                           
  7173                           ;main.c: 181: else
  7174                           ;main.c: 182: {
  7175                           ;main.c: 183: if(voltage[1]>(int16_t)Vref[1])
  7176  0387  083B               	movf	((_Vref+1)^(0+128)+2),w
  7177  0388  3A80               	xorlw	128
  7178  0389  0020               	movlb	0	; select bank0
  7179  038A  00E8               	movwf	??_main
  7180  038B  0021               	movlb	1	; select bank1
  7181  038C  082B               	movf	((_voltage+1)^(0+128)+2),w
  7182  038D  3A80               	xorlw	128
  7183  038E  0020               	movlb	0	; select bank0
  7184  038F  0268               	subwf	??_main,w
  7185  0390  1D03               	skipz
  7186  0391  2B95               	goto	u3765
  7187  0392  0021               	movlb	1	; select bank1
  7188  0393  082A               	movf	(_voltage^(0+128)+2),w
  7189  0394  023A               	subwf	(_Vref^(0+128)+2),w
  7190  0395                     u3765:	
  7191  0395  1803               	skipnc
  7192  0396  2BA4               	goto	l3172
  7193  0397                     L2:	
  7194                           
  7195                           ;main.c: 184: {
  7196                           ;main.c: 185: if(dutyCycle7<1023) dutyCycle7+=1;
  7197  0397  3003               	movlw	3
  7198  0398  0021               	movlb	1	; select bank1
  7199  0399  026B               	subwf	(main@dutyCycle7+1)^(0+128),w
  7200  039A  30FF               	movlw	255
  7201  039B  1903               	skipnz
  7202  039C  026A               	subwf	main@dutyCycle7^(0+128),w
  7203  039D  1803               	skipnc
  7204  039E  2BBE               	goto	l3178
  7205  039F  3001               	movlw	1
  7206  03A0  07EA               	addwf	main@dutyCycle7^(0+128),f
  7207  03A1  3000               	movlw	0
  7208  03A2  3DEB               	addwfc	(main@dutyCycle7+1)^(0+128),f
  7209                           
  7210                           ;main.c: 186: }
  7211  03A3  2BBE               	goto	l3178
  7212  03A4                     l3172:	
  7213                           
  7214                           ;main.c: 187: else if(voltage[1]<(int16_t)Vref[1])
  7215  03A4  0021               	movlb	1	; select bank1
  7216  03A5  082B               	movf	((_voltage+1)^(0+128)+2),w
  7217  03A6  3A80               	xorlw	128
  7218  03A7  0020               	movlb	0	; select bank0
  7219  03A8  00E8               	movwf	??_main
  7220  03A9  0021               	movlb	1	; select bank1
  7221  03AA  083B               	movf	((_Vref+1)^(0+128)+2),w
  7222  03AB  3A80               	xorlw	128
  7223  03AC  0020               	movlb	0	; select bank0
  7224  03AD  0268               	subwf	??_main,w
  7225  03AE  1D03               	skipz
  7226  03AF  2BB3               	goto	u3785
  7227  03B0  0021               	movlb	1	; select bank1
  7228  03B1  083A               	movf	(_Vref^(0+128)+2),w
  7229  03B2  022A               	subwf	(_voltage^(0+128)+2),w
  7230  03B3                     u3785:	
  7231  03B3  1803               	skipnc
  7232  03B4  2BBE               	goto	l3178
  7233  03B5                     L3:	
  7234                           
  7235                           ;main.c: 188: {
  7236                           ;main.c: 189: if(dutyCycle7>0) dutyCycle7-=1;;
  7237  03B5  0021               	movlb	1	; select bank1
  7238  03B6  086A               	movf	main@dutyCycle7^(0+128),w
  7239  03B7  046B               	iorwf	(main@dutyCycle7+1)^(0+128),w
  7240  03B8  1903               	btfsc	3,2
  7241  03B9  2BBE               	goto	l3178
  7242  03BA  3001               	movlw	1
  7243  03BB  02EA               	subwf	main@dutyCycle7^(0+128),f
  7244  03BC  3000               	movlw	0
  7245  03BD  3BEB               	subwfb	(main@dutyCycle7+1)^(0+128),f
  7246  03BE                     l3178:	
  7247                           ;main.c: 190: }
  7248                           
  7249                           
  7250                           ;main.c: 192: }
  7251                           ;main.c: 194: slowLoop+=1;
  7252  03BE  3001               	movlw	1
  7253  03BF  0020               	movlb	0	; select bank0
  7254  03C0  00E8               	movwf	??_main
  7255  03C1  0868               	movf	??_main,w
  7256  03C2  0021               	movlb	1	; select bank1
  7257  03C3  07DF               	addwf	main@slowLoop^(0+128),f
  7258                           
  7259                           ;main.c: 197: PWM6_LoadDutyValue(dutyCycle6);
  7260  03C4  0869               	movf	(main@dutyCycle6+1)^(0+128),w
  7261  03C5  00F1               	movwf	PWM6_LoadDutyValue@dutyCycle6+1
  7262  03C6  0868               	movf	main@dutyCycle6^(0+128),w
  7263  03C7  00F0               	movwf	PWM6_LoadDutyValue@dutyCycle6
  7264  03C8  3191  21D4  3181   	fcall	_PWM6_LoadDutyValue
  7265                           
  7266                           ;main.c: 198: PWM7_LoadDutyValue(dutyCycle7);
  7267  03CB  0021               	movlb	1	; select bank1
  7268  03CC  086B               	movf	(main@dutyCycle7+1)^(0+128),w
  7269  03CD  00F1               	movwf	PWM7_LoadDutyValue@dutyCycle7+1
  7270  03CE  086A               	movf	main@dutyCycle7^(0+128),w
  7271  03CF  00F0               	movwf	PWM7_LoadDutyValue@dutyCycle7
  7272  03D0  3180  2004  3181   	fcall	_PWM7_LoadDutyValue
  7273                           
  7274                           ;main.c: 200: menuButton = readButton();
  7275  03D3  3189  2147  3181   	fcall	_readButton
  7276  03D6  0020               	movlb	0	; select bank0
  7277  03D7  00E8               	movwf	??_main
  7278  03D8  0868               	movf	??_main,w
  7279  03D9  0021               	movlb	1	; select bank1
  7280  03DA  00E4               	movwf	main@menuButton^(0+128)
  7281                           
  7282                           ;main.c: 201: if(menuButton == 2) if(MPPT0>1550)MPPT0-=10;
  7283  03DB  3002               	movlw	2
  7284  03DC  0664               	xorwf	main@menuButton^(0+128),w
  7285  03DD  1D03               	btfss	3,2
  7286  03DE  2BF1               	goto	l3192
  7287  03DF  0867               	movf	(main@MPPT0+1)^(0+128),w
  7288  03E0  3A80               	xorlw	128
  7289  03E1  0020               	movlb	0	; select bank0
  7290  03E2  00E8               	movwf	??_main
  7291  03E3  3086               	movlw	134
  7292  03E4  0268               	subwf	??_main,w
  7293  03E5  1D03               	skipz
  7294  03E6  2BEA               	goto	u3815
  7295  03E7  300F               	movlw	15
  7296  03E8  0021               	movlb	1	; select bank1
  7297  03E9  0266               	subwf	main@MPPT0^(0+128),w
  7298  03EA                     u3815:	
  7299  03EA  1C03               	skipc
  7300  03EB  2BF1               	goto	l3192
  7301  03EC  30F6               	movlw	246
  7302  03ED  0021               	movlb	1	; select bank1
  7303  03EE  07E6               	addwf	main@MPPT0^(0+128),f
  7304  03EF  30FF               	movlw	255
  7305  03F0  3DE7               	addwfc	(main@MPPT0+1)^(0+128),f
  7306  03F1                     l3192:	
  7307                           
  7308                           ;main.c: 202: if(menuButton == 3)if(MPPT0<2200)MPPT0+=10;
  7309  03F1  3003               	movlw	3
  7310  03F2  0021               	movlb	1	; select bank1
  7311  03F3  0664               	xorwf	main@menuButton^(0+128),w
  7312  03F4  1D03               	btfss	3,2
  7313  03F5  2C08               	goto	l3198
  7314  03F6  0867               	movf	(main@MPPT0+1)^(0+128),w
  7315  03F7  3A80               	xorlw	128
  7316  03F8  0020               	movlb	0	; select bank0
  7317  03F9  00E8               	movwf	??_main
  7318  03FA  3088               	movlw	136
  7319  03FB  0268               	subwf	??_main,w
  7320  03FC  1D03               	skipz
  7321  03FD  2C01               	goto	u3835
  7322  03FE  3098               	movlw	152
  7323  03FF  0021               	movlb	1	; select bank1
  7324  0400  0266               	subwf	main@MPPT0^(0+128),w
  7325  0401                     u3835:	
  7326  0401  1803               	skipnc
  7327  0402  2C08               	goto	l3198
  7328  0403  300A               	movlw	10
  7329  0404  0021               	movlb	1	; select bank1
  7330  0405  07E6               	addwf	main@MPPT0^(0+128),f
  7331  0406  3000               	movlw	0
  7332  0407  3DE7               	addwfc	(main@MPPT0+1)^(0+128),f
  7333  0408                     l3198:	
  7334                           
  7335                           ;main.c: 203: if(menuButton == 1)LCDInit();
  7336  0408  0021               	movlb	1	; select bank1
  7337  0409  0364               	decf	main@menuButton^(0+128),w
  7338  040A  1D03               	btfss	3,2
  7339  040B  2C0F               	goto	l3202
  7340  040C  3193  2380  3181   	fcall	_LCDInit
  7341  040F                     l3202:	
  7342                           
  7343                           ;main.c: 207: if(slowLoop>200)
  7344  040F  30C9               	movlw	201
  7345  0410  0021               	movlb	1	; select bank1
  7346  0411  025F               	subwf	main@slowLoop^(0+128),w
  7347  0412  1C03               	skipc
  7348  0413  29FE               	goto	l3086
  7349                           
  7350                           ;main.c: 208: {
  7351                           ;main.c: 210: IOutTotal=current[0]+current[1];
  7352  0414  0820               	movf	_current^(0+128),w
  7353  0415  0722               	addwf	(_current^(0+128)+2),w
  7354  0416  00C9               	movwf	main@IOutTotal^(0+128)
  7355  0417  0821               	movf	(_current+1)^(0+128),w
  7356  0418  3D23               	addwfc	((_current+1)^(0+128)+2),w
  7357  0419  00CA               	movwf	(main@IOutTotal+1)^(0+128)
  7358                           
  7359                           ;main.c: 230: displayRefresh+=1;
  7360  041A  3001               	movlw	1
  7361  041B  0020               	movlb	0	; select bank0
  7362  041C  00E8               	movwf	??_main
  7363  041D  0868               	movf	??_main,w
  7364  041E  0021               	movlb	1	; select bank1
  7365  041F  07E0               	addwf	main@displayRefresh^(0+128),f
  7366                           
  7367                           ;main.c: 231: if(displayRefresh>80)
  7368  0420  3051               	movlw	81
  7369  0421  0260               	subwf	main@displayRefresh^(0+128),w
  7370  0422  1C03               	skipc
  7371  0423  2C3D               	goto	l3214
  7372                           
  7373                           ;main.c: 232: {
  7374                           ;main.c: 233: LCDClear();
  7375  0424  3192  228A  3181   	fcall	_LCDClear
  7376                           
  7377                           ;main.c: 234: displayRefresh=0;
  7378  0427  0021               	movlb	1	; select bank1
  7379  0428  01E0               	clrf	main@displayRefresh^(0+128)
  7380                           
  7381                           ;main.c: 235: batteryTemp=tempCalc(ADCRead(9));
  7382  0429  3009               	movlw	9
  7383  042A  3191  21BF  3181   	fcall	_ADCRead
  7384  042D  0871               	movf	?_ADCRead+1,w
  7385  042E  0020               	movlb	0	; select bank0
  7386  042F  00DE               	movwf	tempCalc@analogValue+1
  7387  0430  0870               	movf	?_ADCRead,w
  7388  0431  00DD               	movwf	tempCalc@analogValue
  7389  0432  318D  25BF  3181   	fcall	_tempCalc
  7390  0435  0020               	movlb	0	; select bank0
  7391  0436  085E               	movf	?_tempCalc+1,w
  7392  0437  0021               	movlb	1	; select bank1
  7393  0438  00CC               	movwf	(main@batteryTemp+1)^(0+128)
  7394  0439  0020               	movlb	0	; select bank0
  7395  043A  085D               	movf	?_tempCalc,w
  7396  043B  0021               	movlb	1	; select bank1
  7397  043C  00CB               	movwf	main@batteryTemp^(0+128)
  7398  043D                     l3214:	
  7399                           
  7400                           ;main.c: 236: }
  7401                           ;main.c: 237: Battery_State_Machine(0);
  7402  043D  3000               	movlw	0
  7403  043E  318E  26DC  3181   	fcall	_Battery_State_Machine
  7404                           
  7405                           ;main.c: 239: efficiency=(float)voltage[0]/100*current[0]/10;
  7406  0441  0021               	movlb	1	; select bank1
  7407  0442  0821               	movf	(_current+1)^(0+128),w
  7408  0443  00F9               	movwf	___awtoft@c+1
  7409  0444  0820               	movf	_current^(0+128),w
  7410  0445  00F8               	movwf	___awtoft@c
  7411  0446  3192  2245  3181   	fcall	___awtoft
  7412  0449  0878               	movf	?___awtoft,w
  7413  044A  0020               	movlb	0	; select bank0
  7414  044B  00B0               	movwf	___ftmul@f1
  7415  044C  0879               	movf	?___awtoft+1,w
  7416  044D  00B1               	movwf	___ftmul@f1+1
  7417  044E  087A               	movf	?___awtoft+2,w
  7418  044F  00B2               	movwf	___ftmul@f1+2
  7419  0450  3000               	movlw	0
  7420  0451  00A0               	movwf	___ftdiv@f2
  7421  0452  30C8               	movlw	200
  7422  0453  00A1               	movwf	___ftdiv@f2+1
  7423  0454  3042               	movlw	66
  7424  0455  00A2               	movwf	___ftdiv@f2+2
  7425  0456  0021               	movlb	1	; select bank1
  7426  0457  0829               	movf	(_voltage+1)^(0+128),w
  7427  0458  00F9               	movwf	___awtoft@c+1
  7428  0459  0828               	movf	_voltage^(0+128),w
  7429  045A  00F8               	movwf	___awtoft@c
  7430  045B  3192  2245  3181   	fcall	___awtoft
  7431  045E  0878               	movf	?___awtoft,w
  7432  045F  0020               	movlb	0	; select bank0
  7433  0460  00A3               	movwf	___ftdiv@f1
  7434  0461  0879               	movf	?___awtoft+1,w
  7435  0462  00A4               	movwf	___ftdiv@f1+1
  7436  0463  087A               	movf	?___awtoft+2,w
  7437  0464  00A5               	movwf	___ftdiv@f1+2
  7438  0465  3197  2757  3181   	fcall	___ftdiv
  7439  0468  0020               	movlb	0	; select bank0
  7440  0469  0820               	movf	?___ftdiv,w
  7441  046A  00B3               	movwf	___ftmul@f2
  7442  046B  0821               	movf	?___ftdiv+1,w
  7443  046C  00B4               	movwf	___ftmul@f2+1
  7444  046D  0822               	movf	?___ftdiv+2,w
  7445  046E  00B5               	movwf	___ftmul@f2+2
  7446  046F  318A  227E  3181   	fcall	___ftmul
  7447  0472  0020               	movlb	0	; select bank0
  7448  0473  0830               	movf	?___ftmul,w
  7449  0474  0021               	movlb	1	; select bank1
  7450  0475  00D8               	movwf	_main$1190^(0+128)
  7451  0476  0020               	movlb	0	; select bank0
  7452  0477  0831               	movf	?___ftmul+1,w
  7453  0478  0021               	movlb	1	; select bank1
  7454  0479  00D9               	movwf	(_main$1190+1)^(0+128)
  7455  047A  0020               	movlb	0	; select bank0
  7456  047B  0832               	movf	?___ftmul+2,w
  7457  047C  0021               	movlb	1	; select bank1
  7458  047D  00DA               	movwf	(_main$1190+2)^(0+128)
  7459                           
  7460                           ;main.c: 239: efficiency=(float)voltage[0]/100*current[0]/10;
  7461  047E  3000               	movlw	0
  7462  047F  0020               	movlb	0	; select bank0
  7463  0480  00A0               	movwf	___ftdiv@f2
  7464  0481  3020               	movlw	32
  7465  0482  00A1               	movwf	___ftdiv@f2+1
  7466  0483  3041               	movlw	65
  7467  0484  00A2               	movwf	___ftdiv@f2+2
  7468  0485  0021               	movlb	1	; select bank1
  7469  0486  0858               	movf	_main$1190^(0+128),w
  7470  0487  0020               	movlb	0	; select bank0
  7471  0488  00A3               	movwf	___ftdiv@f1
  7472  0489  0021               	movlb	1	; select bank1
  7473  048A  0859               	movf	(_main$1190+1)^(0+128),w
  7474  048B  0020               	movlb	0	; select bank0
  7475  048C  00A4               	movwf	___ftdiv@f1+1
  7476  048D  0021               	movlb	1	; select bank1
  7477  048E  085A               	movf	(_main$1190+2)^(0+128),w
  7478  048F  0020               	movlb	0	; select bank0
  7479  0490  00A5               	movwf	___ftdiv@f1+2
  7480  0491  3197  2757  3181   	fcall	___ftdiv
  7481  0494  0020               	movlb	0	; select bank0
  7482  0495  0820               	movf	?___ftdiv,w
  7483  0496  0021               	movlb	1	; select bank1
  7484  0497  00E1               	movwf	main@efficiency^(0+128)
  7485  0498  0020               	movlb	0	; select bank0
  7486  0499  0821               	movf	?___ftdiv+1,w
  7487  049A  0021               	movlb	1	; select bank1
  7488  049B  00E2               	movwf	(main@efficiency+1)^(0+128)
  7489  049C  0020               	movlb	0	; select bank0
  7490  049D  0822               	movf	?___ftdiv+2,w
  7491  049E  0021               	movlb	1	; select bank1
  7492  049F  00E3               	movwf	(main@efficiency+2)^(0+128)
  7493                           
  7494                           ;main.c: 240: efficiency/=(float)voltage[2]/100*current[2]/10;
  7495  04A0  082D               	movf	((_voltage+1)^(0+128)+4),w
  7496  04A1  00F9               	movwf	___awtoft@c+1
  7497  04A2  082C               	movf	(_voltage^(0+128)+4),w
  7498  04A3  00F8               	movwf	___awtoft@c
  7499  04A4  3192  2245  3181   	fcall	___awtoft
  7500  04A7  0878               	movf	?___awtoft,w
  7501  04A8  0020               	movlb	0	; select bank0
  7502  04A9  00A3               	movwf	___ftdiv@f1
  7503  04AA  0879               	movf	?___awtoft+1,w
  7504  04AB  00A4               	movwf	___ftdiv@f1+1
  7505  04AC  087A               	movf	?___awtoft+2,w
  7506  04AD  00A5               	movwf	___ftdiv@f1+2
  7507  04AE  3000               	movlw	0
  7508  04AF  00A0               	movwf	___ftdiv@f2
  7509  04B0  30C8               	movlw	200
  7510  04B1  00A1               	movwf	___ftdiv@f2+1
  7511  04B2  3042               	movlw	66
  7512  04B3  00A2               	movwf	___ftdiv@f2+2
  7513  04B4  3197  2757  3181   	fcall	___ftdiv
  7514  04B7  0020               	movlb	0	; select bank0
  7515  04B8  0820               	movf	?___ftdiv,w
  7516  04B9  00B3               	movwf	___ftmul@f2
  7517  04BA  0821               	movf	?___ftdiv+1,w
  7518  04BB  00B4               	movwf	___ftmul@f2+1
  7519  04BC  0822               	movf	?___ftdiv+2,w
  7520  04BD  00B5               	movwf	___ftmul@f2+2
  7521  04BE  0021               	movlb	1	; select bank1
  7522  04BF  0825               	movf	((_current+1)^(0+128)+4),w
  7523  04C0  00F9               	movwf	___awtoft@c+1
  7524  04C1  0824               	movf	(_current^(0+128)+4),w
  7525  04C2  00F8               	movwf	___awtoft@c
  7526  04C3  3192  2245  3181   	fcall	___awtoft
  7527  04C6  0878               	movf	?___awtoft,w
  7528  04C7  0020               	movlb	0	; select bank0
  7529  04C8  00B0               	movwf	___ftmul@f1
  7530  04C9  0879               	movf	?___awtoft+1,w
  7531  04CA  00B1               	movwf	___ftmul@f1+1
  7532  04CB  087A               	movf	?___awtoft+2,w
  7533  04CC  00B2               	movwf	___ftmul@f1+2
  7534  04CD  318A  227E  3181   	fcall	___ftmul
  7535  04D0  0020               	movlb	0	; select bank0
  7536  04D1  0830               	movf	?___ftmul,w
  7537  04D2  0021               	movlb	1	; select bank1
  7538  04D3  00D8               	movwf	_main$1190^(0+128)
  7539  04D4  0020               	movlb	0	; select bank0
  7540  04D5  0831               	movf	?___ftmul+1,w
  7541  04D6  0021               	movlb	1	; select bank1
  7542  04D7  00D9               	movwf	(_main$1190+1)^(0+128)
  7543  04D8  0020               	movlb	0	; select bank0
  7544  04D9  0832               	movf	?___ftmul+2,w
  7545  04DA  0021               	movlb	1	; select bank1
  7546  04DB  00DA               	movwf	(_main$1190+2)^(0+128)
  7547                           
  7548                           ;main.c: 240: efficiency/=(float)voltage[2]/100*current[2]/10;
  7549  04DC  0858               	movf	_main$1190^(0+128),w
  7550  04DD  0020               	movlb	0	; select bank0
  7551  04DE  00A3               	movwf	___ftdiv@f1
  7552  04DF  0021               	movlb	1	; select bank1
  7553  04E0  0859               	movf	(_main$1190+1)^(0+128),w
  7554  04E1  0020               	movlb	0	; select bank0
  7555  04E2  00A4               	movwf	___ftdiv@f1+1
  7556  04E3  0021               	movlb	1	; select bank1
  7557  04E4  085A               	movf	(_main$1190+2)^(0+128),w
  7558  04E5  0020               	movlb	0	; select bank0
  7559  04E6  00A5               	movwf	___ftdiv@f1+2
  7560  04E7  3000               	movlw	0
  7561  04E8  00A0               	movwf	___ftdiv@f2
  7562  04E9  3020               	movlw	32
  7563  04EA  00A1               	movwf	___ftdiv@f2+1
  7564  04EB  3041               	movlw	65
  7565  04EC  00A2               	movwf	___ftdiv@f2+2
  7566  04ED  3197  2757  3181   	fcall	___ftdiv
  7567  04F0  0020               	movlb	0	; select bank0
  7568  04F1  0820               	movf	?___ftdiv,w
  7569  04F2  0021               	movlb	1	; select bank1
  7570  04F3  00CF               	movwf	_main$1191^(0+128)
  7571  04F4  0020               	movlb	0	; select bank0
  7572  04F5  0821               	movf	?___ftdiv+1,w
  7573  04F6  0021               	movlb	1	; select bank1
  7574  04F7  00D0               	movwf	(_main$1191+1)^(0+128)
  7575  04F8  0020               	movlb	0	; select bank0
  7576  04F9  0822               	movf	?___ftdiv+2,w
  7577  04FA  0021               	movlb	1	; select bank1
  7578  04FB  00D1               	movwf	(_main$1191+2)^(0+128)
  7579                           
  7580                           ;main.c: 240: efficiency/=(float)voltage[2]/100*current[2]/10;
  7581  04FC  084F               	movf	_main$1191^(0+128),w
  7582  04FD  0020               	movlb	0	; select bank0
  7583  04FE  00A0               	movwf	___ftdiv@f2
  7584  04FF  0021               	movlb	1	; select bank1
  7585  0500  0850               	movf	(_main$1191+1)^(0+128),w
  7586  0501  0020               	movlb	0	; select bank0
  7587  0502  00A1               	movwf	___ftdiv@f2+1
  7588  0503  0021               	movlb	1	; select bank1
  7589  0504  0851               	movf	(_main$1191+2)^(0+128),w
  7590  0505  0020               	movlb	0	; select bank0
  7591  0506  00A2               	movwf	___ftdiv@f2+2
  7592  0507  0021               	movlb	1	; select bank1
  7593  0508  0861               	movf	main@efficiency^(0+128),w
  7594  0509  0020               	movlb	0	; select bank0
  7595  050A  00A3               	movwf	___ftdiv@f1
  7596  050B  0021               	movlb	1	; select bank1
  7597  050C  0862               	movf	(main@efficiency+1)^(0+128),w
  7598  050D  0020               	movlb	0	; select bank0
  7599  050E  00A4               	movwf	___ftdiv@f1+1
  7600  050F  0021               	movlb	1	; select bank1
  7601  0510  0863               	movf	(main@efficiency+2)^(0+128),w
  7602  0511  0020               	movlb	0	; select bank0
  7603  0512  00A5               	movwf	___ftdiv@f1+2
  7604  0513  3197  2757  3181   	fcall	___ftdiv
  7605  0516  0020               	movlb	0	; select bank0
  7606  0517  0820               	movf	?___ftdiv,w
  7607  0518  0021               	movlb	1	; select bank1
  7608  0519  00E1               	movwf	main@efficiency^(0+128)
  7609  051A  0020               	movlb	0	; select bank0
  7610  051B  0821               	movf	?___ftdiv+1,w
  7611  051C  0021               	movlb	1	; select bank1
  7612  051D  00E2               	movwf	(main@efficiency+1)^(0+128)
  7613  051E  0020               	movlb	0	; select bank0
  7614  051F  0822               	movf	?___ftdiv+2,w
  7615  0520  0021               	movlb	1	; select bank1
  7616  0521  00E3               	movwf	(main@efficiency+2)^(0+128)
  7617                           
  7618                           ;main.c: 241: efficiency*=100;
  7619  0522  3000               	movlw	0
  7620  0523  0020               	movlb	0	; select bank0
  7621  0524  00B0               	movwf	___ftmul@f1
  7622  0525  30C8               	movlw	200
  7623  0526  00B1               	movwf	___ftmul@f1+1
  7624  0527  3042               	movlw	66
  7625  0528  00B2               	movwf	___ftmul@f1+2
  7626  0529  0021               	movlb	1	; select bank1
  7627  052A  0861               	movf	main@efficiency^(0+128),w
  7628  052B  0020               	movlb	0	; select bank0
  7629  052C  00B3               	movwf	___ftmul@f2
  7630  052D  0021               	movlb	1	; select bank1
  7631  052E  0862               	movf	(main@efficiency+1)^(0+128),w
  7632  052F  0020               	movlb	0	; select bank0
  7633  0530  00B4               	movwf	___ftmul@f2+1
  7634  0531  0021               	movlb	1	; select bank1
  7635  0532  0863               	movf	(main@efficiency+2)^(0+128),w
  7636  0533  0020               	movlb	0	; select bank0
  7637  0534  00B5               	movwf	___ftmul@f2+2
  7638  0535  318A  227E  3181   	fcall	___ftmul
  7639  0538  0020               	movlb	0	; select bank0
  7640  0539  0830               	movf	?___ftmul,w
  7641  053A  0021               	movlb	1	; select bank1
  7642  053B  00E1               	movwf	main@efficiency^(0+128)
  7643  053C  0020               	movlb	0	; select bank0
  7644  053D  0831               	movf	?___ftmul+1,w
  7645  053E  0021               	movlb	1	; select bank1
  7646  053F  00E2               	movwf	(main@efficiency+1)^(0+128)
  7647  0540  0020               	movlb	0	; select bank0
  7648  0541  0832               	movf	?___ftmul+2,w
  7649  0542  0021               	movlb	1	; select bank1
  7650  0543  00E3               	movwf	(main@efficiency+2)^(0+128)
  7651                           
  7652                           ;main.c: 245: { gotoXY(24,0); LCDWriteInt(IminCount[0],4, 0, 0);};
  7653  0544  01F5               	clrf	gotoXY@y
  7654  0545  3018               	movlw	24
  7655  0546  3191  2197  3181   	fcall	_gotoXY
  7656  0549  0021               	movlb	1	; select bank1
  7657  054A  0831               	movf	(_IminCount+1)^(0+128),w
  7658  054B  0020               	movlb	0	; select bank0
  7659  054C  00A9               	movwf	LCDWriteInt@value+1
  7660  054D  0021               	movlb	1	; select bank1
  7661  054E  0830               	movf	_IminCount^(0+128),w
  7662  054F  0020               	movlb	0	; select bank0
  7663  0550  00A8               	movwf	LCDWriteInt@value
  7664  0551  3004               	movlw	4
  7665  0552  00E8               	movwf	??_main
  7666  0553  0868               	movf	??_main,w
  7667  0554  00AA               	movwf	LCDWriteInt@fieldLength
  7668  0555  01AB               	clrf	LCDWriteInt@numPlaces
  7669  0556  01AC               	clrf	LCDWriteInt@sign
  7670  0557  318B  2332  3181   	fcall	_LCDWriteInt
  7671                           
  7672                           ;main.c: 259: { gotoXY(0,0); LCDWriteInt(faultCount,5, 0, 0);};
  7673  055A  01F5               	clrf	gotoXY@y
  7674  055B  3000               	movlw	0
  7675  055C  3191  2197  3181   	fcall	_gotoXY
  7676  055F  0021               	movlb	1	; select bank1
  7677  0560  0857               	movf	(main@faultCount+1)^(0+128),w
  7678  0561  0020               	movlb	0	; select bank0
  7679  0562  00A9               	movwf	LCDWriteInt@value+1
  7680  0563  0021               	movlb	1	; select bank1
  7681  0564  0856               	movf	main@faultCount^(0+128),w
  7682  0565  0020               	movlb	0	; select bank0
  7683  0566  00A8               	movwf	LCDWriteInt@value
  7684  0567  3005               	movlw	5
  7685  0568  00E8               	movwf	??_main
  7686  0569  0868               	movf	??_main,w
  7687  056A  00AA               	movwf	LCDWriteInt@fieldLength
  7688  056B  01AB               	clrf	LCDWriteInt@numPlaces
  7689  056C  01AC               	clrf	LCDWriteInt@sign
  7690  056D  318B  2332  3181   	fcall	_LCDWriteInt
  7691                           
  7692                           ;main.c: 261: { gotoXY(58,0); LCDWriteInt(VHoldMode[0],2, 0, 0);};
  7693  0570  01F5               	clrf	gotoXY@y
  7694  0571  303A               	movlw	58
  7695  0572  3191  2197  3181   	fcall	_gotoXY
  7696  0575  0021               	movlb	1	; select bank1
  7697  0576  0842               	movf	_VHoldMode^(0+128),w
  7698  0577  0020               	movlb	0	; select bank0
  7699  0578  00A8               	movwf	LCDWriteInt@value
  7700  0579  01A9               	clrf	LCDWriteInt@value+1
  7701  057A  1BA8               	btfsc	LCDWriteInt@value,7
  7702  057B  03A9               	decf	LCDWriteInt@value+1,f
  7703  057C  3002               	movlw	2
  7704  057D  00E8               	movwf	??_main
  7705  057E  0868               	movf	??_main,w
  7706  057F  00AA               	movwf	LCDWriteInt@fieldLength
  7707  0580  01AB               	clrf	LCDWriteInt@numPlaces
  7708  0581  01AC               	clrf	LCDWriteInt@sign
  7709  0582  318B  2332  3181   	fcall	_LCDWriteInt
  7710                           
  7711                           ;main.c: 262: LCDWriteCharacter(' ');
  7712  0585  3020               	movlw	32
  7713  0586  3195  2596  3181   	fcall	_LCDWriteCharacter
  7714                           
  7715                           ;main.c: 265: LCDWriteCharacter(' ');
  7716  0589  3020               	movlw	32
  7717  058A  3195  2596  3181   	fcall	_LCDWriteCharacter
  7718                           
  7719                           ;main.c: 269: { gotoXY(0,1); LCDWriteInt(voltage[2],4, 2, 0);};
  7720  058D  01F5               	clrf	gotoXY@y
  7721  058E  0AF5               	incf	gotoXY@y,f
  7722  058F  3000               	movlw	0
  7723  0590  3191  2197  3181   	fcall	_gotoXY
  7724  0593  0021               	movlb	1	; select bank1
  7725  0594  082D               	movf	((_voltage+1)^(0+128)+4),w
  7726  0595  0020               	movlb	0	; select bank0
  7727  0596  00A9               	movwf	LCDWriteInt@value+1
  7728  0597  0021               	movlb	1	; select bank1
  7729  0598  082C               	movf	(_voltage^(0+128)+4),w
  7730  0599  0020               	movlb	0	; select bank0
  7731  059A  00A8               	movwf	LCDWriteInt@value
  7732  059B  3004               	movlw	4
  7733  059C  00E8               	movwf	??_main
  7734  059D  0868               	movf	??_main,w
  7735  059E  00AA               	movwf	LCDWriteInt@fieldLength
  7736  059F  3002               	movlw	2
  7737  05A0  00E9               	movwf	??_main+1
  7738  05A1  0869               	movf	??_main+1,w
  7739  05A2  00AB               	movwf	LCDWriteInt@numPlaces
  7740  05A3  01AC               	clrf	LCDWriteInt@sign
  7741  05A4  318B  2332  3181   	fcall	_LCDWriteInt
  7742                           
  7743                           ;main.c: 270: LCDWriteCharacter('V');
  7744  05A7  3056               	movlw	86
  7745  05A8  3195  2596  3181   	fcall	_LCDWriteCharacter
  7746                           
  7747                           ;main.c: 271: { gotoXY(28,1); LCDWriteInt(current[2],3, 1, 0);};
  7748  05AB  01F5               	clrf	gotoXY@y
  7749  05AC  0AF5               	incf	gotoXY@y,f
  7750  05AD  301C               	movlw	28
  7751  05AE  3191  2197  3181   	fcall	_gotoXY
  7752  05B1  0021               	movlb	1	; select bank1
  7753  05B2  0825               	movf	((_current+1)^(0+128)+4),w
  7754  05B3  0020               	movlb	0	; select bank0
  7755  05B4  00A9               	movwf	LCDWriteInt@value+1
  7756  05B5  0021               	movlb	1	; select bank1
  7757  05B6  0824               	movf	(_current^(0+128)+4),w
  7758  05B7  0020               	movlb	0	; select bank0
  7759  05B8  00A8               	movwf	LCDWriteInt@value
  7760  05B9  3003               	movlw	3
  7761  05BA  00E8               	movwf	??_main
  7762  05BB  0868               	movf	??_main,w
  7763  05BC  00AA               	movwf	LCDWriteInt@fieldLength
  7764  05BD  01AB               	clrf	LCDWriteInt@numPlaces
  7765  05BE  0AAB               	incf	LCDWriteInt@numPlaces,f
  7766  05BF  01AC               	clrf	LCDWriteInt@sign
  7767  05C0  318B  2332  3181   	fcall	_LCDWriteInt
  7768                           
  7769                           ;main.c: 272: LCDWriteCharacter('A');
  7770  05C3  3041               	movlw	65
  7771  05C4  3195  2596  3181   	fcall	_LCDWriteCharacter
  7772                           
  7773                           ;main.c: 273: { gotoXY(56,1); LCDWriteInt(ADCRead(11),4, 0, 0);};
  7774  05C7  01F5               	clrf	gotoXY@y
  7775  05C8  0AF5               	incf	gotoXY@y,f
  7776  05C9  3038               	movlw	56
  7777  05CA  3191  2197  3181   	fcall	_gotoXY
  7778  05CD  300B               	movlw	11
  7779  05CE  3191  21BF  3181   	fcall	_ADCRead
  7780  05D1  0871               	movf	?_ADCRead+1,w
  7781  05D2  0020               	movlb	0	; select bank0
  7782  05D3  00A9               	movwf	LCDWriteInt@value+1
  7783  05D4  0870               	movf	?_ADCRead,w
  7784  05D5  00A8               	movwf	LCDWriteInt@value
  7785  05D6  3004               	movlw	4
  7786  05D7  00E8               	movwf	??_main
  7787  05D8  0868               	movf	??_main,w
  7788  05D9  00AA               	movwf	LCDWriteInt@fieldLength
  7789  05DA  01AB               	clrf	LCDWriteInt@numPlaces
  7790  05DB  01AC               	clrf	LCDWriteInt@sign
  7791  05DC  318B  2332  3181   	fcall	_LCDWriteInt
  7792                           
  7793                           ;main.c: 274: { gotoXY(0,2); LCDWriteInt(voltage[0],4, 2, 0);};
  7794  05DF  3002               	movlw	2
  7795  05E0  0020               	movlb	0	; select bank0
  7796  05E1  00E8               	movwf	??_main
  7797  05E2  0868               	movf	??_main,w
  7798  05E3  00F5               	movwf	gotoXY@y
  7799  05E4  3000               	movlw	0
  7800  05E5  3191  2197  3181   	fcall	_gotoXY
  7801  05E8  0021               	movlb	1	; select bank1
  7802  05E9  0829               	movf	(_voltage+1)^(0+128),w
  7803  05EA  0020               	movlb	0	; select bank0
  7804  05EB  00A9               	movwf	LCDWriteInt@value+1
  7805  05EC  0021               	movlb	1	; select bank1
  7806  05ED  0828               	movf	_voltage^(0+128),w
  7807  05EE  0020               	movlb	0	; select bank0
  7808  05EF  00A8               	movwf	LCDWriteInt@value
  7809  05F0  3004               	movlw	4
  7810  05F1  00E8               	movwf	??_main
  7811  05F2  0868               	movf	??_main,w
  7812  05F3  00AA               	movwf	LCDWriteInt@fieldLength
  7813  05F4  3002               	movlw	2
  7814  05F5  00E9               	movwf	??_main+1
  7815  05F6  0869               	movf	??_main+1,w
  7816  05F7  00AB               	movwf	LCDWriteInt@numPlaces
  7817  05F8  01AC               	clrf	LCDWriteInt@sign
  7818  05F9  318B  2332  3181   	fcall	_LCDWriteInt
  7819                           
  7820                           ;main.c: 275: LCDWriteCharacter('V');
  7821  05FC  3056               	movlw	86
  7822  05FD  3195  2596  3181   	fcall	_LCDWriteCharacter
  7823                           
  7824                           ;main.c: 276: { gotoXY(28,2); LCDWriteInt(current[0],3, 1, 0);};
  7825  0600  3002               	movlw	2
  7826  0601  0020               	movlb	0	; select bank0
  7827  0602  00E8               	movwf	??_main
  7828  0603  0868               	movf	??_main,w
  7829  0604  00F5               	movwf	gotoXY@y
  7830  0605  301C               	movlw	28
  7831  0606  3191  2197  3181   	fcall	_gotoXY
  7832  0609  0021               	movlb	1	; select bank1
  7833  060A  0821               	movf	(_current+1)^(0+128),w
  7834  060B  0020               	movlb	0	; select bank0
  7835  060C  00A9               	movwf	LCDWriteInt@value+1
  7836  060D  0021               	movlb	1	; select bank1
  7837  060E  0820               	movf	_current^(0+128),w
  7838  060F  0020               	movlb	0	; select bank0
  7839  0610  00A8               	movwf	LCDWriteInt@value
  7840  0611  3003               	movlw	3
  7841  0612  00E8               	movwf	??_main
  7842  0613  0868               	movf	??_main,w
  7843  0614  00AA               	movwf	LCDWriteInt@fieldLength
  7844  0615  01AB               	clrf	LCDWriteInt@numPlaces
  7845  0616  0AAB               	incf	LCDWriteInt@numPlaces,f
  7846  0617  01AC               	clrf	LCDWriteInt@sign
  7847  0618  318B  2332  3181   	fcall	_LCDWriteInt
  7848                           
  7849                           ;main.c: 277: LCDWriteCharacter('A');
  7850  061B  3041               	movlw	65
  7851  061C  3195  2596  3181   	fcall	_LCDWriteCharacter
  7852                           
  7853                           ;main.c: 278: { gotoXY(56,2); LCDWriteInt(Vref[0],4, 2, 0);};
  7854  061F  3002               	movlw	2
  7855  0620  0020               	movlb	0	; select bank0
  7856  0621  00E8               	movwf	??_main
  7857  0622  0868               	movf	??_main,w
  7858  0623  00F5               	movwf	gotoXY@y
  7859  0624  3038               	movlw	56
  7860  0625  3191  2197  3181   	fcall	_gotoXY
  7861  0628  0021               	movlb	1	; select bank1
  7862  0629  0839               	movf	(_Vref+1)^(0+128),w
  7863  062A  0020               	movlb	0	; select bank0
  7864  062B  00A9               	movwf	LCDWriteInt@value+1
  7865  062C  0021               	movlb	1	; select bank1
  7866  062D  0838               	movf	_Vref^(0+128),w
  7867  062E  0020               	movlb	0	; select bank0
  7868  062F  00A8               	movwf	LCDWriteInt@value
  7869  0630  3004               	movlw	4
  7870  0631  00E8               	movwf	??_main
  7871  0632  0868               	movf	??_main,w
  7872  0633  00AA               	movwf	LCDWriteInt@fieldLength
  7873  0634  3002               	movlw	2
  7874  0635  00E9               	movwf	??_main+1
  7875  0636  0869               	movf	??_main+1,w
  7876  0637  00AB               	movwf	LCDWriteInt@numPlaces
  7877  0638  01AC               	clrf	LCDWriteInt@sign
  7878  0639  318B  2332  3181   	fcall	_LCDWriteInt
  7879                           
  7880                           ;main.c: 279: LCDWriteCharacter('V');
  7881  063C  3056               	movlw	86
  7882  063D  3195  2596  3181   	fcall	_LCDWriteCharacter
  7883                           
  7884                           ;main.c: 281: { gotoXY(0,3); LCDWriteInt(voltage[2]/100*current[2]/10,3, 0, 0);};
  7885  0640  3003               	movlw	3
  7886  0641  0020               	movlb	0	; select bank0
  7887  0642  00E8               	movwf	??_main
  7888  0643  0868               	movf	??_main,w
  7889  0644  00F5               	movwf	gotoXY@y
  7890  0645  3000               	movlw	0
  7891  0646  3191  2197  3181   	fcall	_gotoXY
  7892  0649  3064               	movlw	100
  7893  064A  00F0               	movwf	___awdiv@divisor
  7894  064B  3000               	movlw	0
  7895  064C  00F1               	movwf	___awdiv@divisor+1
  7896  064D  0021               	movlb	1	; select bank1
  7897  064E  082D               	movf	((_voltage+1)^(0+128)+4),w
  7898  064F  00F3               	movwf	___awdiv@dividend+1
  7899  0650  082C               	movf	(_voltage^(0+128)+4),w
  7900  0651  00F2               	movwf	___awdiv@dividend
  7901  0652  3195  2545  3181   	fcall	___awdiv
  7902  0655  0871               	movf	?___awdiv+1,w
  7903  0656  00FA               	movwf	___wmul@multiplier+1
  7904  0657  0870               	movf	?___awdiv,w
  7905  0658  00F9               	movwf	___wmul@multiplier
  7906  0659  0021               	movlb	1	; select bank1
  7907  065A  0825               	movf	((_current+1)^(0+128)+4),w
  7908  065B  00FC               	movwf	___wmul@multiplicand+1
  7909  065C  0824               	movf	(_current^(0+128)+4),w
  7910  065D  00FB               	movwf	___wmul@multiplicand
  7911  065E  3191  21EA  3181   	fcall	___wmul
  7912  0661  087A               	movf	?___wmul+1,w
  7913  0662  0021               	movlb	1	; select bank1
  7914  0663  00DC               	movwf	(_main$1192+1)^(0+128)
  7915  0664  0879               	movf	?___wmul,w
  7916  0665  00DB               	movwf	_main$1192^(0+128)
  7917  0666  300A               	movlw	10
  7918  0667  00F0               	movwf	___awdiv@divisor
  7919  0668  3000               	movlw	0
  7920  0669  00F1               	movwf	___awdiv@divisor+1
  7921  066A  085C               	movf	(_main$1192+1)^(0+128),w
  7922  066B  00F3               	movwf	___awdiv@dividend+1
  7923  066C  085B               	movf	_main$1192^(0+128),w
  7924  066D  00F2               	movwf	___awdiv@dividend
  7925  066E  3195  2545  3181   	fcall	___awdiv
  7926  0671  0871               	movf	?___awdiv+1,w
  7927  0672  0021               	movlb	1	; select bank1
  7928  0673  00DE               	movwf	(_main$1193+1)^(0+128)
  7929  0674  0870               	movf	?___awdiv,w
  7930  0675  00DD               	movwf	_main$1193^(0+128)
  7931  0676  085E               	movf	(_main$1193+1)^(0+128),w
  7932  0677  0020               	movlb	0	; select bank0
  7933  0678  00A9               	movwf	LCDWriteInt@value+1
  7934  0679  0021               	movlb	1	; select bank1
  7935  067A  085D               	movf	_main$1193^(0+128),w
  7936  067B  0020               	movlb	0	; select bank0
  7937  067C  00A8               	movwf	LCDWriteInt@value
  7938  067D  3003               	movlw	3
  7939  067E  00E8               	movwf	??_main
  7940  067F  0868               	movf	??_main,w
  7941  0680  00AA               	movwf	LCDWriteInt@fieldLength
  7942  0681  01AB               	clrf	LCDWriteInt@numPlaces
  7943  0682  01AC               	clrf	LCDWriteInt@sign
  7944  0683  318B  2332  3181   	fcall	_LCDWriteInt
  7945                           
  7946                           ;main.c: 282: LCDWriteCharacter('W');
  7947  0686  3057               	movlw	87
  7948  0687  3195  2596  3181   	fcall	_LCDWriteCharacter
  7949                           
  7950                           ;main.c: 283: { gotoXY(28,3); LCDWriteInt(batteryState[0],1, 0, 0);};
  7951  068A  3003               	movlw	3
  7952  068B  0020               	movlb	0	; select bank0
  7953  068C  00E8               	movwf	??_main
  7954  068D  0868               	movf	??_main,w
  7955  068E  00F5               	movwf	gotoXY@y
  7956  068F  301C               	movlw	28
  7957  0690  3191  2197  3181   	fcall	_gotoXY
  7958  0693  0021               	movlb	1	; select bank1
  7959  0694  0840               	movf	_batteryState^(0+128),w
  7960  0695  0020               	movlb	0	; select bank0
  7961  0696  00E8               	movwf	??_main
  7962  0697  01E9               	clrf	??_main+1
  7963  0698  0868               	movf	??_main,w
  7964  0699  00A8               	movwf	LCDWriteInt@value
  7965  069A  0869               	movf	??_main+1,w
  7966  069B  00A9               	movwf	LCDWriteInt@value+1
  7967  069C  01AA               	clrf	LCDWriteInt@fieldLength
  7968  069D  0AAA               	incf	LCDWriteInt@fieldLength,f
  7969  069E  01AB               	clrf	LCDWriteInt@numPlaces
  7970  069F  01AC               	clrf	LCDWriteInt@sign
  7971  06A0  318B  2332  3181   	fcall	_LCDWriteInt
  7972                           
  7973                           ;main.c: 284: { gotoXY(36,3); LCDWriteInt(Imode[0],1, 0, 0);};
  7974  06A3  3003               	movlw	3
  7975  06A4  0020               	movlb	0	; select bank0
  7976  06A5  00E8               	movwf	??_main
  7977  06A6  0868               	movf	??_main,w
  7978  06A7  00F5               	movwf	gotoXY@y
  7979  06A8  3024               	movlw	36
  7980  06A9  3191  2197  3181   	fcall	_gotoXY
  7981  06AC  0021               	movlb	1	; select bank1
  7982  06AD  086C               	movf	_Imode^(0+128),w
  7983  06AE  0020               	movlb	0	; select bank0
  7984  06AF  00A8               	movwf	LCDWriteInt@value
  7985  06B0  01A9               	clrf	LCDWriteInt@value+1
  7986  06B1  1BA8               	btfsc	LCDWriteInt@value,7
  7987  06B2  03A9               	decf	LCDWriteInt@value+1,f
  7988  06B3  01AA               	clrf	LCDWriteInt@fieldLength
  7989  06B4  0AAA               	incf	LCDWriteInt@fieldLength,f
  7990  06B5  01AB               	clrf	LCDWriteInt@numPlaces
  7991  06B6  01AC               	clrf	LCDWriteInt@sign
  7992  06B7  318B  2332  3181   	fcall	_LCDWriteInt
  7993                           
  7994                           ;main.c: 285: { gotoXY(48,3); LCDWriteInt(Iref[0],3, 1, 0);};
  7995  06BA  3003               	movlw	3
  7996  06BB  0020               	movlb	0	; select bank0
  7997  06BC  00E8               	movwf	??_main
  7998  06BD  0868               	movf	??_main,w
  7999  06BE  00F5               	movwf	gotoXY@y
  8000  06BF  3030               	movlw	48
  8001  06C0  3191  2197  3181   	fcall	_gotoXY
  8002  06C3  0021               	movlb	1	; select bank1
  8003  06C4  0835               	movf	(_Iref+1)^(0+128),w
  8004  06C5  0020               	movlb	0	; select bank0
  8005  06C6  00A9               	movwf	LCDWriteInt@value+1
  8006  06C7  0021               	movlb	1	; select bank1
  8007  06C8  0834               	movf	_Iref^(0+128),w
  8008  06C9  0020               	movlb	0	; select bank0
  8009  06CA  00A8               	movwf	LCDWriteInt@value
  8010  06CB  3003               	movlw	3
  8011  06CC  00E8               	movwf	??_main
  8012  06CD  0868               	movf	??_main,w
  8013  06CE  00AA               	movwf	LCDWriteInt@fieldLength
  8014  06CF  01AB               	clrf	LCDWriteInt@numPlaces
  8015  06D0  0AAB               	incf	LCDWriteInt@numPlaces,f
  8016  06D1  01AC               	clrf	LCDWriteInt@sign
  8017  06D2  318B  2332  3181   	fcall	_LCDWriteInt
  8018                           
  8019                           ;main.c: 286: LCDWriteCharacter('A');
  8020  06D5  3041               	movlw	65
  8021  06D6  3195  2596  3181   	fcall	_LCDWriteCharacter
  8022                           
  8023                           ;main.c: 288: { gotoXY(0,4); LCDWriteInt(voltage[0]/100*current[0]/10,3, 0, 0);};
  8024  06D9  3004               	movlw	4
  8025  06DA  0020               	movlb	0	; select bank0
  8026  06DB  00E8               	movwf	??_main
  8027  06DC  0868               	movf	??_main,w
  8028  06DD  00F5               	movwf	gotoXY@y
  8029  06DE  3000               	movlw	0
  8030  06DF  3191  2197  3181   	fcall	_gotoXY
  8031  06E2  3064               	movlw	100
  8032  06E3  00F0               	movwf	___awdiv@divisor
  8033  06E4  3000               	movlw	0
  8034  06E5  00F1               	movwf	___awdiv@divisor+1
  8035  06E6  0021               	movlb	1	; select bank1
  8036  06E7  0829               	movf	(_voltage+1)^(0+128),w
  8037  06E8  00F3               	movwf	___awdiv@dividend+1
  8038  06E9  0828               	movf	_voltage^(0+128),w
  8039  06EA  00F2               	movwf	___awdiv@dividend
  8040  06EB  3195  2545  3181   	fcall	___awdiv
  8041  06EE  0871               	movf	?___awdiv+1,w
  8042  06EF  00FA               	movwf	___wmul@multiplier+1
  8043  06F0  0870               	movf	?___awdiv,w
  8044  06F1  00F9               	movwf	___wmul@multiplier
  8045  06F2  0021               	movlb	1	; select bank1
  8046  06F3  0821               	movf	(_current+1)^(0+128),w
  8047  06F4  00FC               	movwf	___wmul@multiplicand+1
  8048  06F5  0820               	movf	_current^(0+128),w
  8049  06F6  00FB               	movwf	___wmul@multiplicand
  8050  06F7  3191  21EA  3181   	fcall	___wmul
  8051  06FA  087A               	movf	?___wmul+1,w
  8052  06FB  0021               	movlb	1	; select bank1
  8053  06FC  00DC               	movwf	(_main$1192+1)^(0+128)
  8054  06FD  0879               	movf	?___wmul,w
  8055  06FE  00DB               	movwf	_main$1192^(0+128)
  8056  06FF  300A               	movlw	10
  8057  0700  00F0               	movwf	___awdiv@divisor
  8058  0701  3000               	movlw	0
  8059  0702  00F1               	movwf	___awdiv@divisor+1
  8060  0703  085C               	movf	(_main$1192+1)^(0+128),w
  8061  0704  00F3               	movwf	___awdiv@dividend+1
  8062  0705  085B               	movf	_main$1192^(0+128),w
  8063  0706  00F2               	movwf	___awdiv@dividend
  8064  0707  3195  2545  3181   	fcall	___awdiv
  8065  070A  0871               	movf	?___awdiv+1,w
  8066  070B  0021               	movlb	1	; select bank1
  8067  070C  00DE               	movwf	(_main$1193+1)^(0+128)
  8068  070D  0870               	movf	?___awdiv,w
  8069  070E  00DD               	movwf	_main$1193^(0+128)
  8070  070F  085E               	movf	(_main$1193+1)^(0+128),w
  8071  0710  0020               	movlb	0	; select bank0
  8072  0711  00A9               	movwf	LCDWriteInt@value+1
  8073  0712  0021               	movlb	1	; select bank1
  8074  0713  085D               	movf	_main$1193^(0+128),w
  8075  0714  0020               	movlb	0	; select bank0
  8076  0715  00A8               	movwf	LCDWriteInt@value
  8077  0716  3003               	movlw	3
  8078  0717  00E8               	movwf	??_main
  8079  0718  0868               	movf	??_main,w
  8080  0719  00AA               	movwf	LCDWriteInt@fieldLength
  8081  071A  01AB               	clrf	LCDWriteInt@numPlaces
  8082  071B  01AC               	clrf	LCDWriteInt@sign
  8083  071C  318B  2332  3181   	fcall	_LCDWriteInt
  8084                           
  8085                           ;main.c: 289: LCDWriteCharacter('W');
  8086  071F  3057               	movlw	87
  8087  0720  3195  2596  3181   	fcall	_LCDWriteCharacter
  8088                           
  8089                           ;main.c: 292: { gotoXY(48,4); LCDWriteInt(MPPT0,4, 0, 0);};
  8090  0723  3004               	movlw	4
  8091  0724  0020               	movlb	0	; select bank0
  8092  0725  00E8               	movwf	??_main
  8093  0726  0868               	movf	??_main,w
  8094  0727  00F5               	movwf	gotoXY@y
  8095  0728  3030               	movlw	48
  8096  0729  3191  2197  3181   	fcall	_gotoXY
  8097  072C  0021               	movlb	1	; select bank1
  8098  072D  0867               	movf	(main@MPPT0+1)^(0+128),w
  8099  072E  0020               	movlb	0	; select bank0
  8100  072F  00A9               	movwf	LCDWriteInt@value+1
  8101  0730  0021               	movlb	1	; select bank1
  8102  0731  0866               	movf	main@MPPT0^(0+128),w
  8103  0732  0020               	movlb	0	; select bank0
  8104  0733  00A8               	movwf	LCDWriteInt@value
  8105  0734  3004               	movlw	4
  8106  0735  00E8               	movwf	??_main
  8107  0736  0868               	movf	??_main,w
  8108  0737  00AA               	movwf	LCDWriteInt@fieldLength
  8109  0738  01AB               	clrf	LCDWriteInt@numPlaces
  8110  0739  01AC               	clrf	LCDWriteInt@sign
  8111  073A  318B  2332  3181   	fcall	_LCDWriteInt
  8112                           
  8113                           ;main.c: 300: { gotoXY(0,5); LCDWriteInt(dutyCycle6,4, 0, 0);};
  8114  073D  3005               	movlw	5
  8115  073E  0020               	movlb	0	; select bank0
  8116  073F  00E8               	movwf	??_main
  8117  0740  0868               	movf	??_main,w
  8118  0741  00F5               	movwf	gotoXY@y
  8119  0742  3000               	movlw	0
  8120  0743  3191  2197  3181   	fcall	_gotoXY
  8121  0746  0021               	movlb	1	; select bank1
  8122  0747  0869               	movf	(main@dutyCycle6+1)^(0+128),w
  8123  0748  0020               	movlb	0	; select bank0
  8124  0749  00A9               	movwf	LCDWriteInt@value+1
  8125  074A  0021               	movlb	1	; select bank1
  8126  074B  0868               	movf	main@dutyCycle6^(0+128),w
  8127  074C  0020               	movlb	0	; select bank0
  8128  074D  00A8               	movwf	LCDWriteInt@value
  8129  074E  3004               	movlw	4
  8130  074F  00E8               	movwf	??_main
  8131  0750  0868               	movf	??_main,w
  8132  0751  00AA               	movwf	LCDWriteInt@fieldLength
  8133  0752  01AB               	clrf	LCDWriteInt@numPlaces
  8134  0753  01AC               	clrf	LCDWriteInt@sign
  8135  0754  318B  2332  3181   	fcall	_LCDWriteInt
  8136                           
  8137                           ;main.c: 301: { gotoXY(24,5); LCDWriteInt(dutyCycle7,4, 0, 0);};
  8138  0757  3005               	movlw	5
  8139  0758  0020               	movlb	0	; select bank0
  8140  0759  00E8               	movwf	??_main
  8141  075A  0868               	movf	??_main,w
  8142  075B  00F5               	movwf	gotoXY@y
  8143  075C  3018               	movlw	24
  8144  075D  3191  2197  3181   	fcall	_gotoXY
  8145  0760  0021               	movlb	1	; select bank1
  8146  0761  086B               	movf	(main@dutyCycle7+1)^(0+128),w
  8147  0762  0020               	movlb	0	; select bank0
  8148  0763  00A9               	movwf	LCDWriteInt@value+1
  8149  0764  0021               	movlb	1	; select bank1
  8150  0765  086A               	movf	main@dutyCycle7^(0+128),w
  8151  0766  0020               	movlb	0	; select bank0
  8152  0767  00A8               	movwf	LCDWriteInt@value
  8153  0768  3004               	movlw	4
  8154  0769  00E8               	movwf	??_main
  8155  076A  0868               	movf	??_main,w
  8156  076B  00AA               	movwf	LCDWriteInt@fieldLength
  8157  076C  01AB               	clrf	LCDWriteInt@numPlaces
  8158  076D  01AC               	clrf	LCDWriteInt@sign
  8159  076E  318B  2332  3181   	fcall	_LCDWriteInt
  8160                           
  8161                           ;main.c: 302: { gotoXY(48,5); LCDWriteInt(dutyCycle1,4, 0, 0);};
  8162  0771  3005               	movlw	5
  8163  0772  0020               	movlb	0	; select bank0
  8164  0773  00E8               	movwf	??_main
  8165  0774  0868               	movf	??_main,w
  8166  0775  00F5               	movwf	gotoXY@y
  8167  0776  3030               	movlw	48
  8168  0777  3191  2197  3181   	fcall	_gotoXY
  8169  077A  0021               	movlb	1	; select bank1
  8170  077B  0855               	movf	(main@dutyCycle1+1)^(0+128),w
  8171  077C  0020               	movlb	0	; select bank0
  8172  077D  00A9               	movwf	LCDWriteInt@value+1
  8173  077E  0021               	movlb	1	; select bank1
  8174  077F  0854               	movf	main@dutyCycle1^(0+128),w
  8175  0780  0020               	movlb	0	; select bank0
  8176  0781  00A8               	movwf	LCDWriteInt@value
  8177  0782  3004               	movlw	4
  8178  0783  00E8               	movwf	??_main
  8179  0784  0868               	movf	??_main,w
  8180  0785  00AA               	movwf	LCDWriteInt@fieldLength
  8181  0786  01AB               	clrf	LCDWriteInt@numPlaces
  8182  0787  01AC               	clrf	LCDWriteInt@sign
  8183  0788  318B  2332  3181   	fcall	_LCDWriteInt
  8184                           
  8185                           ;main.c: 303: { gotoXY(74,5); LCDWriteInt(!(RB2),1, 0, 0);};
  8186  078B  3005               	movlw	5
  8187  078C  0020               	movlb	0	; select bank0
  8188  078D  00E8               	movwf	??_main
  8189  078E  0868               	movf	??_main,w
  8190  078F  00F5               	movwf	gotoXY@y
  8191  0790  304A               	movlw	74
  8192  0791  3191  2197  3181   	fcall	_gotoXY
  8193  0794  1003               	clrc
  8194  0795  0020               	movlb	0	; select bank0
  8195  0796  1D0D               	btfss	13,2	;volatile
  8196  0797  1403               	setc
  8197  0798  3000               	movlw	0
  8198  0799  3D09               	addwfc	9,w
  8199  079A  00E8               	movwf	??_main
  8200  079B  01E9               	clrf	??_main+1
  8201  079C  0868               	movf	??_main,w
  8202  079D  00A8               	movwf	LCDWriteInt@value
  8203  079E  0869               	movf	??_main+1,w
  8204  079F  00A9               	movwf	LCDWriteInt@value+1
  8205  07A0  01AA               	clrf	LCDWriteInt@fieldLength
  8206  07A1  0AAA               	incf	LCDWriteInt@fieldLength,f
  8207  07A2  01AB               	clrf	LCDWriteInt@numPlaces
  8208  07A3  01AC               	clrf	LCDWriteInt@sign
  8209  07A4  318B  2332  3181   	fcall	_LCDWriteInt
  8210                           
  8211                           ;main.c: 305: if(batteryState[0] > FINISHED)
  8212  07A7  3003               	movlw	3
  8213  07A8  0021               	movlb	1	; select bank1
  8214  07A9  0240               	subwf	_batteryState^(0+128),w
  8215  07AA  1C03               	skipc
  8216  07AB  2FB0               	goto	l3336
  8217                           
  8218                           ;main.c: 306: {
  8219                           ;main.c: 307: cc_cv_mode(0);
  8220  07AC  3000               	movlw	0
  8221  07AD  318B  23EB  3181   	fcall	_cc_cv_mode
  8222  07B0                     l3336:	
  8223                           
  8224                           ;main.c: 308: }
  8225                           ;main.c: 309: if(batteryState[1] > FINISHED)
  8226  07B0  3003               	movlw	3
  8227  07B1  0021               	movlb	1	; select bank1
  8228  07B2  0241               	subwf	(_batteryState^(0+128)+1),w
  8229  07B3  1C03               	skipc
  8230  07B4  2FB9               	goto	l3340
  8231                           
  8232                           ;main.c: 310: {
  8233                           ;main.c: 311: cc_cv_mode(1);
  8234  07B5  3001               	movlw	1
  8235  07B6  318B  23EB  3181   	fcall	_cc_cv_mode
  8236  07B9                     l3340:	
  8237                           
  8238                           ;main.c: 312: }
  8239                           ;main.c: 313: slowLoop=0;
  8240  07B9  0021               	movlb	1	; select bank1
  8241  07BA  01DF               	clrf	main@slowLoop^(0+128)
  8242  07BB  29FE               	goto	l3086
  8243  07BC                     __end_of_main:	
  8244                           
  8245                           	psect	text1
  8246  0DBF                     __ptext1:	
  8247 ;; *************** function _tempCalc *****************
  8248 ;; Defined at:
  8249 ;;		line 4 in file "tempCalc.c"
  8250 ;; Parameters:    Size  Location     Type
  8251 ;;  analogValue     2   61[BANK0 ] int 
  8252 ;; Auto vars:     Size  Location     Type
  8253 ;;  steinhart       3   69[BANK0 ] float 
  8254 ;;  R               3   63[BANK0 ] float 
  8255 ;; Return value:  Size  Location     Type
  8256 ;;                  2   61[BANK0 ] int 
  8257 ;; Registers used:
  8258 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8259 ;; Tracked objects:
  8260 ;;		On entry : 0/0
  8261 ;;		On exit  : 0/0
  8262 ;;		Unchanged: 0/0
  8263 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8264 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8265 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8266 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8267 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8268 ;;Total ram usage:       11 bytes
  8269 ;; Hardware stack levels used:    1
  8270 ;; Hardware stack levels required when called:    4
  8271 ;; This function calls:
  8272 ;;		___awtoft
  8273 ;;		___ftadd
  8274 ;;		___ftdiv
  8275 ;;		___ftmul
  8276 ;;		___ftsub
  8277 ;;		___fttol
  8278 ;;		_log
  8279 ;; This function is called by:
  8280 ;;		_main
  8281 ;; This function uses a non-reentrant model
  8282 ;;
  8283                           
  8284                           
  8285                           ;psect for function _tempCalc
  8286  0DBF                     _tempCalc:	
  8287                           
  8288                           ;tempCalc.c: 6: float R, steinhart;
  8289                           ;tempCalc.c: 8: R = 9890/(1023/(float)analogValue - 1);
  8290                           
  8291                           ;incstack = 0
  8292                           ; Regs used in _tempCalc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8293  0DBF  3000               	movlw	0
  8294  0DC0  0020               	movlb	0	; select bank0
  8295  0DC1  00C0               	movwf	___ftadd@f1
  8296  0DC2  3080               	movlw	128
  8297  0DC3  00C1               	movwf	___ftadd@f1+1
  8298  0DC4  30BF               	movlw	191
  8299  0DC5  00C2               	movwf	___ftadd@f1+2
  8300  0DC6  085E               	movf	tempCalc@analogValue+1,w
  8301  0DC7  00F9               	movwf	___awtoft@c+1
  8302  0DC8  085D               	movf	tempCalc@analogValue,w
  8303  0DC9  00F8               	movwf	___awtoft@c
  8304  0DCA  3192  2245  318D   	fcall	___awtoft
  8305  0DCD  0878               	movf	?___awtoft,w
  8306  0DCE  0020               	movlb	0	; select bank0
  8307  0DCF  00A0               	movwf	___ftdiv@f2
  8308  0DD0  0879               	movf	?___awtoft+1,w
  8309  0DD1  00A1               	movwf	___ftdiv@f2+1
  8310  0DD2  087A               	movf	?___awtoft+2,w
  8311  0DD3  00A2               	movwf	___ftdiv@f2+2
  8312  0DD4  30C0               	movlw	192
  8313  0DD5  00A3               	movwf	___ftdiv@f1
  8314  0DD6  307F               	movlw	127
  8315  0DD7  00A4               	movwf	___ftdiv@f1+1
  8316  0DD8  3044               	movlw	68
  8317  0DD9  00A5               	movwf	___ftdiv@f1+2
  8318  0DDA  3197  2757  318D   	fcall	___ftdiv
  8319  0DDD  0020               	movlb	0	; select bank0
  8320  0DDE  0820               	movf	?___ftdiv,w
  8321  0DDF  00C3               	movwf	___ftadd@f2
  8322  0DE0  0821               	movf	?___ftdiv+1,w
  8323  0DE1  00C4               	movwf	___ftadd@f2+1
  8324  0DE2  0822               	movf	?___ftdiv+2,w
  8325  0DE3  00C5               	movwf	___ftadd@f2+2
  8326  0DE4  318C  24C9  318D   	fcall	___ftadd
  8327  0DE7  0020               	movlb	0	; select bank0
  8328  0DE8  0840               	movf	?___ftadd,w
  8329  0DE9  00E2               	movwf	_tempCalc$1189
  8330  0DEA  0841               	movf	?___ftadd+1,w
  8331  0DEB  00E3               	movwf	_tempCalc$1189+1
  8332  0DEC  0842               	movf	?___ftadd+2,w
  8333  0DED  00E4               	movwf	_tempCalc$1189+2
  8334                           
  8335                           ;tempCalc.c: 6: float R, steinhart;
  8336                           ;tempCalc.c: 8: R = 9890/(1023/(float)analogValue - 1);
  8337  0DEE  0862               	movf	_tempCalc$1189,w
  8338  0DEF  00A0               	movwf	___ftdiv@f2
  8339  0DF0  0863               	movf	_tempCalc$1189+1,w
  8340  0DF1  00A1               	movwf	___ftdiv@f2+1
  8341  0DF2  0864               	movf	_tempCalc$1189+2,w
  8342  0DF3  00A2               	movwf	___ftdiv@f2+2
  8343  0DF4  3088               	movlw	136
  8344  0DF5  00A3               	movwf	___ftdiv@f1
  8345  0DF6  301A               	movlw	26
  8346  0DF7  00A4               	movwf	___ftdiv@f1+1
  8347  0DF8  3046               	movlw	70
  8348  0DF9  00A5               	movwf	___ftdiv@f1+2
  8349  0DFA  3197  2757  318D   	fcall	___ftdiv
  8350  0DFD  0020               	movlb	0	; select bank0
  8351  0DFE  0820               	movf	?___ftdiv,w
  8352  0DFF  00DF               	movwf	tempCalc@R
  8353  0E00  0821               	movf	?___ftdiv+1,w
  8354  0E01  00E0               	movwf	tempCalc@R+1
  8355  0E02  0822               	movf	?___ftdiv+2,w
  8356  0E03  00E1               	movwf	tempCalc@R+2
  8357                           
  8358                           ;tempCalc.c: 10: steinhart = R /9990;
  8359  0E04  3018               	movlw	24
  8360  0E05  00A0               	movwf	___ftdiv@f2
  8361  0E06  301C               	movlw	28
  8362  0E07  00A1               	movwf	___ftdiv@f2+1
  8363  0E08  3046               	movlw	70
  8364  0E09  00A2               	movwf	___ftdiv@f2+2
  8365  0E0A  085F               	movf	tempCalc@R,w
  8366  0E0B  00A3               	movwf	___ftdiv@f1
  8367  0E0C  0860               	movf	tempCalc@R+1,w
  8368  0E0D  00A4               	movwf	___ftdiv@f1+1
  8369  0E0E  0861               	movf	tempCalc@R+2,w
  8370  0E0F  00A5               	movwf	___ftdiv@f1+2
  8371  0E10  3197  2757  318D   	fcall	___ftdiv
  8372  0E13  0020               	movlb	0	; select bank0
  8373  0E14  0820               	movf	?___ftdiv,w
  8374  0E15  00E5               	movwf	tempCalc@steinhart
  8375  0E16  0821               	movf	?___ftdiv+1,w
  8376  0E17  00E6               	movwf	tempCalc@steinhart+1
  8377  0E18  0822               	movf	?___ftdiv+2,w
  8378  0E19  00E7               	movwf	tempCalc@steinhart+2
  8379                           
  8380                           ;tempCalc.c: 11: steinhart = log(steinhart);
  8381  0E1A  0865               	movf	tempCalc@steinhart,w
  8382  0E1B  00D7               	movwf	log@x
  8383  0E1C  0866               	movf	tempCalc@steinhart+1,w
  8384  0E1D  00D8               	movwf	log@x+1
  8385  0E1E  0867               	movf	tempCalc@steinhart+2,w
  8386  0E1F  00D9               	movwf	log@x+2
  8387  0E20  3189  21CE  318D   	fcall	_log
  8388  0E23  0020               	movlb	0	; select bank0
  8389  0E24  0857               	movf	?_log,w
  8390  0E25  00E5               	movwf	tempCalc@steinhart
  8391  0E26  0858               	movf	?_log+1,w
  8392  0E27  00E6               	movwf	tempCalc@steinhart+1
  8393  0E28  0859               	movf	?_log+2,w
  8394  0E29  00E7               	movwf	tempCalc@steinhart+2
  8395                           
  8396                           ;tempCalc.c: 12: steinhart /= 4030;
  8397  0E2A  30E0               	movlw	224
  8398  0E2B  00A0               	movwf	___ftdiv@f2
  8399  0E2C  307B               	movlw	123
  8400  0E2D  00A1               	movwf	___ftdiv@f2+1
  8401  0E2E  3045               	movlw	69
  8402  0E2F  00A2               	movwf	___ftdiv@f2+2
  8403  0E30  0865               	movf	tempCalc@steinhart,w
  8404  0E31  00A3               	movwf	___ftdiv@f1
  8405  0E32  0866               	movf	tempCalc@steinhart+1,w
  8406  0E33  00A4               	movwf	___ftdiv@f1+1
  8407  0E34  0867               	movf	tempCalc@steinhart+2,w
  8408  0E35  00A5               	movwf	___ftdiv@f1+2
  8409  0E36  3197  2757  318D   	fcall	___ftdiv
  8410  0E39  0020               	movlb	0	; select bank0
  8411  0E3A  0820               	movf	?___ftdiv,w
  8412  0E3B  00E5               	movwf	tempCalc@steinhart
  8413  0E3C  0821               	movf	?___ftdiv+1,w
  8414  0E3D  00E6               	movwf	tempCalc@steinhart+1
  8415  0E3E  0822               	movf	?___ftdiv+2,w
  8416  0E3F  00E7               	movwf	tempCalc@steinhart+2
  8417                           
  8418                           ;tempCalc.c: 15: steinhart += 1.0 / (25 + 273.15);
  8419  0E40  30CF               	movlw	207
  8420  0E41  00C0               	movwf	___ftadd@f1
  8421  0E42  305B               	movlw	91
  8422  0E43  00C1               	movwf	___ftadd@f1+1
  8423  0E44  303B               	movlw	59
  8424  0E45  00C2               	movwf	___ftadd@f1+2
  8425  0E46  0865               	movf	tempCalc@steinhart,w
  8426  0E47  00C3               	movwf	___ftadd@f2
  8427  0E48  0866               	movf	tempCalc@steinhart+1,w
  8428  0E49  00C4               	movwf	___ftadd@f2+1
  8429  0E4A  0867               	movf	tempCalc@steinhart+2,w
  8430  0E4B  00C5               	movwf	___ftadd@f2+2
  8431  0E4C  318C  24C9  318D   	fcall	___ftadd
  8432  0E4F  0020               	movlb	0	; select bank0
  8433  0E50  0840               	movf	?___ftadd,w
  8434  0E51  00E5               	movwf	tempCalc@steinhart
  8435  0E52  0841               	movf	?___ftadd+1,w
  8436  0E53  00E6               	movwf	tempCalc@steinhart+1
  8437  0E54  0842               	movf	?___ftadd+2,w
  8438  0E55  00E7               	movwf	tempCalc@steinhart+2
  8439                           
  8440                           ;tempCalc.c: 16: steinhart = 1.0 / steinhart;
  8441  0E56  0865               	movf	tempCalc@steinhart,w
  8442  0E57  00A0               	movwf	___ftdiv@f2
  8443  0E58  0866               	movf	tempCalc@steinhart+1,w
  8444  0E59  00A1               	movwf	___ftdiv@f2+1
  8445  0E5A  0867               	movf	tempCalc@steinhart+2,w
  8446  0E5B  00A2               	movwf	___ftdiv@f2+2
  8447  0E5C  3000               	movlw	0
  8448  0E5D  00A3               	movwf	___ftdiv@f1
  8449  0E5E  3080               	movlw	128
  8450  0E5F  00A4               	movwf	___ftdiv@f1+1
  8451  0E60  303F               	movlw	63
  8452  0E61  00A5               	movwf	___ftdiv@f1+2
  8453  0E62  3197  2757  318D   	fcall	___ftdiv
  8454  0E65  0020               	movlb	0	; select bank0
  8455  0E66  0820               	movf	?___ftdiv,w
  8456  0E67  00E5               	movwf	tempCalc@steinhart
  8457  0E68  0821               	movf	?___ftdiv+1,w
  8458  0E69  00E6               	movwf	tempCalc@steinhart+1
  8459  0E6A  0822               	movf	?___ftdiv+2,w
  8460  0E6B  00E7               	movwf	tempCalc@steinhart+2
  8461                           
  8462                           ;tempCalc.c: 17: steinhart -= 273.15;
  8463  0E6C  3093               	movlw	147
  8464  0E6D  00CD               	movwf	___ftsub@f2
  8465  0E6E  3088               	movlw	136
  8466  0E6F  00CE               	movwf	___ftsub@f2+1
  8467  0E70  3043               	movlw	67
  8468  0E71  00CF               	movwf	___ftsub@f2+2
  8469  0E72  0865               	movf	tempCalc@steinhart,w
  8470  0E73  00D0               	movwf	___ftsub@f1
  8471  0E74  0866               	movf	tempCalc@steinhart+1,w
  8472  0E75  00D1               	movwf	___ftsub@f1+1
  8473  0E76  0867               	movf	tempCalc@steinhart+2,w
  8474  0E77  00D2               	movwf	___ftsub@f1+2
  8475  0E78  3192  2208  318D   	fcall	___ftsub
  8476  0E7B  0020               	movlb	0	; select bank0
  8477  0E7C  084D               	movf	?___ftsub,w
  8478  0E7D  00E5               	movwf	tempCalc@steinhart
  8479  0E7E  084E               	movf	?___ftsub+1,w
  8480  0E7F  00E6               	movwf	tempCalc@steinhart+1
  8481  0E80  084F               	movf	?___ftsub+2,w
  8482  0E81  00E7               	movwf	tempCalc@steinhart+2
  8483                           
  8484                           ;tempCalc.c: 19: steinhart*=10;
  8485  0E82  3000               	movlw	0
  8486  0E83  00B0               	movwf	___ftmul@f1
  8487  0E84  3020               	movlw	32
  8488  0E85  00B1               	movwf	___ftmul@f1+1
  8489  0E86  3041               	movlw	65
  8490  0E87  00B2               	movwf	___ftmul@f1+2
  8491  0E88  0865               	movf	tempCalc@steinhart,w
  8492  0E89  00B3               	movwf	___ftmul@f2
  8493  0E8A  0866               	movf	tempCalc@steinhart+1,w
  8494  0E8B  00B4               	movwf	___ftmul@f2+1
  8495  0E8C  0867               	movf	tempCalc@steinhart+2,w
  8496  0E8D  00B5               	movwf	___ftmul@f2+2
  8497  0E8E  318A  227E  318D   	fcall	___ftmul
  8498  0E91  0020               	movlb	0	; select bank0
  8499  0E92  0830               	movf	?___ftmul,w
  8500  0E93  00E5               	movwf	tempCalc@steinhart
  8501  0E94  0831               	movf	?___ftmul+1,w
  8502  0E95  00E6               	movwf	tempCalc@steinhart+1
  8503  0E96  0832               	movf	?___ftmul+2,w
  8504  0E97  00E7               	movwf	tempCalc@steinhart+2
  8505                           
  8506                           ;tempCalc.c: 21: steinhart = steinhart*9/5+320;
  8507  0E98  3000               	movlw	0
  8508  0E99  00C0               	movwf	___ftadd@f1
  8509  0E9A  30A0               	movlw	160
  8510  0E9B  00C1               	movwf	___ftadd@f1+1
  8511  0E9C  3043               	movlw	67
  8512  0E9D  00C2               	movwf	___ftadd@f1+2
  8513  0E9E  3000               	movlw	0
  8514  0E9F  00A0               	movwf	___ftdiv@f2
  8515  0EA0  30A0               	movlw	160
  8516  0EA1  00A1               	movwf	___ftdiv@f2+1
  8517  0EA2  3040               	movlw	64
  8518  0EA3  00A2               	movwf	___ftdiv@f2+2
  8519  0EA4  3000               	movlw	0
  8520  0EA5  00B0               	movwf	___ftmul@f1
  8521  0EA6  3010               	movlw	16
  8522  0EA7  00B1               	movwf	___ftmul@f1+1
  8523  0EA8  3041               	movlw	65
  8524  0EA9  00B2               	movwf	___ftmul@f1+2
  8525  0EAA  0865               	movf	tempCalc@steinhart,w
  8526  0EAB  00B3               	movwf	___ftmul@f2
  8527  0EAC  0866               	movf	tempCalc@steinhart+1,w
  8528  0EAD  00B4               	movwf	___ftmul@f2+1
  8529  0EAE  0867               	movf	tempCalc@steinhart+2,w
  8530  0EAF  00B5               	movwf	___ftmul@f2+2
  8531  0EB0  318A  227E  318D   	fcall	___ftmul
  8532  0EB3  0020               	movlb	0	; select bank0
  8533  0EB4  0830               	movf	?___ftmul,w
  8534  0EB5  00A3               	movwf	___ftdiv@f1
  8535  0EB6  0831               	movf	?___ftmul+1,w
  8536  0EB7  00A4               	movwf	___ftdiv@f1+1
  8537  0EB8  0832               	movf	?___ftmul+2,w
  8538  0EB9  00A5               	movwf	___ftdiv@f1+2
  8539  0EBA  3197  2757  318D   	fcall	___ftdiv
  8540  0EBD  0020               	movlb	0	; select bank0
  8541  0EBE  0820               	movf	?___ftdiv,w
  8542  0EBF  00C3               	movwf	___ftadd@f2
  8543  0EC0  0821               	movf	?___ftdiv+1,w
  8544  0EC1  00C4               	movwf	___ftadd@f2+1
  8545  0EC2  0822               	movf	?___ftdiv+2,w
  8546  0EC3  00C5               	movwf	___ftadd@f2+2
  8547  0EC4  318C  24C9  318D   	fcall	___ftadd
  8548  0EC7  0020               	movlb	0	; select bank0
  8549  0EC8  0840               	movf	?___ftadd,w
  8550  0EC9  00E5               	movwf	tempCalc@steinhart
  8551  0ECA  0841               	movf	?___ftadd+1,w
  8552  0ECB  00E6               	movwf	tempCalc@steinhart+1
  8553  0ECC  0842               	movf	?___ftadd+2,w
  8554  0ECD  00E7               	movwf	tempCalc@steinhart+2
  8555                           
  8556                           ;tempCalc.c: 23: return (int16_t)steinhart;
  8557  0ECE  0865               	movf	tempCalc@steinhart,w
  8558  0ECF  00B0               	movwf	___fttol@f1
  8559  0ED0  0866               	movf	tempCalc@steinhart+1,w
  8560  0ED1  00B1               	movwf	___fttol@f1+1
  8561  0ED2  0867               	movf	tempCalc@steinhart+2,w
  8562  0ED3  00B2               	movwf	___fttol@f1+2
  8563  0ED4  3196  26D0         	fcall	___fttol
  8564  0ED6  0020               	movlb	0	; select bank0
  8565  0ED7  0831               	movf	?___fttol+1,w
  8566  0ED8  00DE               	movwf	?_tempCalc+1
  8567  0ED9  0830               	movf	?___fttol,w
  8568  0EDA  00DD               	movwf	?_tempCalc
  8569  0EDB  0008               	return
  8570  0EDC                     __end_of_tempCalc:	
  8571                           
  8572                           	psect	text2
  8573  09CE                     __ptext2:	
  8574 ;; *************** function _log *****************
  8575 ;; Defined at:
  8576 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\log.c"
  8577 ;; Parameters:    Size  Location     Type
  8578 ;;  x               3   55[BANK0 ] int 
  8579 ;; Auto vars:     Size  Location     Type
  8580 ;;  exponent        2   59[BANK0 ] int 
  8581 ;; Return value:  Size  Location     Type
  8582 ;;                  3   55[BANK0 ] int 
  8583 ;; Registers used:
  8584 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8585 ;; Tracked objects:
  8586 ;;		On entry : 0/0
  8587 ;;		On exit  : 0/0
  8588 ;;		Unchanged: 0/0
  8589 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8590 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8591 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8592 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8593 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8594 ;;Total ram usage:        6 bytes
  8595 ;; Hardware stack levels used:    1
  8596 ;; Hardware stack levels required when called:    3
  8597 ;; This function calls:
  8598 ;;		___awtoft
  8599 ;;		___ftadd
  8600 ;;		___ftge
  8601 ;;		___ftmul
  8602 ;;		_eval_poly
  8603 ;;		_frexp
  8604 ;; This function is called by:
  8605 ;;		_tempCalc
  8606 ;; This function uses a non-reentrant model
  8607 ;;
  8608                           
  8609                           
  8610                           ;psect for function _log
  8611  09CE                     _log:	
  8612                           
  8613                           ;incstack = 0
  8614                           ; Regs used in _log: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8615  09CE  0020               	movlb	0	; select bank0
  8616  09CF  0857               	movf	log@x,w
  8617  09D0  00F0               	movwf	___ftge@ff1
  8618  09D1  0858               	movf	log@x+1,w
  8619  09D2  00F1               	movwf	___ftge@ff1+1
  8620  09D3  0859               	movf	log@x+2,w
  8621  09D4  00F2               	movwf	___ftge@ff1+2
  8622  09D5  3000               	movlw	0
  8623  09D6  00F3               	movwf	___ftge@ff2
  8624  09D7  3000               	movlw	0
  8625  09D8  00F4               	movwf	___ftge@ff2+1
  8626  09D9  3000               	movlw	0
  8627  09DA  00F5               	movwf	___ftge@ff2+2
  8628  09DB  3193  23BB  3189   	fcall	___ftge
  8629  09DE  1803               	btfsc	3,0
  8630  09DF  29ED               	goto	l2606
  8631  09E0  3021               	movlw	33
  8632  09E1  0022               	movlb	2	; select bank2
  8633  09E2  00CD               	movwf	_errno^(0+256)
  8634  09E3  3000               	movlw	0
  8635  09E4  00CE               	movwf	(_errno^(0+256)+1)
  8636  09E5  3000               	movlw	0
  8637  09E6  0020               	movlb	0	; select bank0
  8638  09E7  00D7               	movwf	?_log
  8639  09E8  3000               	movlw	0
  8640  09E9  00D8               	movwf	?_log+1
  8641  09EA  3000               	movlw	0
  8642  09EB  00D9               	movwf	?_log+2
  8643  09EC  0008               	return
  8644  09ED                     l2606:	
  8645  09ED  0020               	movlb	0	; select bank0
  8646  09EE  0859               	movf	log@x+2,w
  8647  09EF  0458               	iorwf	log@x+1,w
  8648  09F0  0457               	iorwf	log@x,w
  8649  09F1  1D03               	skipz
  8650  09F2  2A00               	goto	l2612
  8651  09F3  3022               	movlw	34
  8652  09F4  0022               	movlb	2	; select bank2
  8653  09F5  00CD               	movwf	_errno^(0+256)
  8654  09F6  3000               	movlw	0
  8655  09F7  00CE               	movwf	(_errno^(0+256)+1)
  8656  09F8  3000               	movlw	0
  8657  09F9  0020               	movlb	0	; select bank0
  8658  09FA  00D7               	movwf	?_log
  8659  09FB  3000               	movlw	0
  8660  09FC  00D8               	movwf	?_log+1
  8661  09FD  3000               	movlw	0
  8662  09FE  00D9               	movwf	?_log+2
  8663  09FF  0008               	return
  8664  0A00                     l2612:	
  8665  0A00  3000               	movlw	0
  8666  0A01  00C0               	movwf	___ftadd@f1
  8667  0A02  3080               	movlw	128
  8668  0A03  00C1               	movwf	___ftadd@f1+1
  8669  0A04  30BF               	movlw	191
  8670  0A05  00C2               	movwf	___ftadd@f1+2
  8671  0A06  3000               	movlw	0
  8672  0A07  00B0               	movwf	___ftmul@f1
  8673  0A08  3000               	movlw	0
  8674  0A09  00B1               	movwf	___ftmul@f1+1
  8675  0A0A  3040               	movlw	64
  8676  0A0B  00B2               	movwf	___ftmul@f1+2
  8677  0A0C  305B               	movlw	(low (log@exponent| 0))& (0+255)
  8678  0A0D  00DA               	movwf	??_log
  8679  0A0E  085A               	movf	??_log,w
  8680  0A0F  00F3               	movwf	frexp@eptr
  8681  0A10  0857               	movf	log@x,w
  8682  0A11  00F0               	movwf	frexp@value
  8683  0A12  0858               	movf	log@x+1,w
  8684  0A13  00F1               	movwf	frexp@value+1
  8685  0A14  0859               	movf	log@x+2,w
  8686  0A15  00F2               	movwf	frexp@value+2
  8687  0A16  3193  23F6  3189   	fcall	_frexp
  8688  0A19  0870               	movf	?_frexp,w
  8689  0A1A  0020               	movlb	0	; select bank0
  8690  0A1B  00B3               	movwf	___ftmul@f2
  8691  0A1C  0871               	movf	?_frexp+1,w
  8692  0A1D  00B4               	movwf	___ftmul@f2+1
  8693  0A1E  0872               	movf	?_frexp+2,w
  8694  0A1F  00B5               	movwf	___ftmul@f2+2
  8695  0A20  318A  227E  3189   	fcall	___ftmul
  8696  0A23  0020               	movlb	0	; select bank0
  8697  0A24  0830               	movf	?___ftmul,w
  8698  0A25  00C3               	movwf	___ftadd@f2
  8699  0A26  0831               	movf	?___ftmul+1,w
  8700  0A27  00C4               	movwf	___ftadd@f2+1
  8701  0A28  0832               	movf	?___ftmul+2,w
  8702  0A29  00C5               	movwf	___ftadd@f2+2
  8703  0A2A  318C  24C9  3189   	fcall	___ftadd
  8704  0A2D  0020               	movlb	0	; select bank0
  8705  0A2E  0840               	movf	?___ftadd,w
  8706  0A2F  00D7               	movwf	log@x
  8707  0A30  0841               	movf	?___ftadd+1,w
  8708  0A31  00D8               	movwf	log@x+1
  8709  0A32  0842               	movf	?___ftadd+2,w
  8710  0A33  00D9               	movwf	log@x+2
  8711  0A34  30FF               	movlw	255
  8712  0A35  07DB               	addwf	log@exponent,f
  8713  0A36  30FF               	movlw	255
  8714  0A37  3DDC               	addwfc	log@exponent+1,f
  8715  0A38  0857               	movf	log@x,w
  8716  0A39  00CD               	movwf	eval_poly@x
  8717  0A3A  0858               	movf	log@x+1,w
  8718  0A3B  00CE               	movwf	eval_poly@x+1
  8719  0A3C  0859               	movf	log@x+2,w
  8720  0A3D  00CF               	movwf	eval_poly@x+2
  8721  0A3E  3000               	movlw	low (log@coeff| (0+32768))
  8722  0A3F  00D0               	movwf	eval_poly@d
  8723  0A40  3098               	movlw	high (log@coeff| (0+32768))
  8724  0A41  00D1               	movwf	eval_poly@d+1
  8725  0A42  3008               	movlw	8
  8726  0A43  00D2               	movwf	eval_poly@n
  8727  0A44  3000               	movlw	0
  8728  0A45  00D3               	movwf	eval_poly@n+1
  8729  0A46  3195  25EE  3189   	fcall	_eval_poly
  8730  0A49  0020               	movlb	0	; select bank0
  8731  0A4A  084D               	movf	?_eval_poly,w
  8732  0A4B  00D7               	movwf	log@x
  8733  0A4C  084E               	movf	?_eval_poly+1,w
  8734  0A4D  00D8               	movwf	log@x+1
  8735  0A4E  084F               	movf	?_eval_poly+2,w
  8736  0A4F  00D9               	movwf	log@x+2
  8737  0A50  0857               	movf	log@x,w
  8738  0A51  00C0               	movwf	___ftadd@f1
  8739  0A52  0858               	movf	log@x+1,w
  8740  0A53  00C1               	movwf	___ftadd@f1+1
  8741  0A54  0859               	movf	log@x+2,w
  8742  0A55  00C2               	movwf	___ftadd@f1+2
  8743  0A56  3072               	movlw	114
  8744  0A57  00B0               	movwf	___ftmul@f1
  8745  0A58  3031               	movlw	49
  8746  0A59  00B1               	movwf	___ftmul@f1+1
  8747  0A5A  303F               	movlw	63
  8748  0A5B  00B2               	movwf	___ftmul@f1+2
  8749  0A5C  085C               	movf	log@exponent+1,w
  8750  0A5D  00F9               	movwf	___awtoft@c+1
  8751  0A5E  085B               	movf	log@exponent,w
  8752  0A5F  00F8               	movwf	___awtoft@c
  8753  0A60  3192  2245  3189   	fcall	___awtoft
  8754  0A63  0878               	movf	?___awtoft,w
  8755  0A64  0020               	movlb	0	; select bank0
  8756  0A65  00B3               	movwf	___ftmul@f2
  8757  0A66  0879               	movf	?___awtoft+1,w
  8758  0A67  00B4               	movwf	___ftmul@f2+1
  8759  0A68  087A               	movf	?___awtoft+2,w
  8760  0A69  00B5               	movwf	___ftmul@f2+2
  8761  0A6A  318A  227E  3189   	fcall	___ftmul
  8762  0A6D  0020               	movlb	0	; select bank0
  8763  0A6E  0830               	movf	?___ftmul,w
  8764  0A6F  00C3               	movwf	___ftadd@f2
  8765  0A70  0831               	movf	?___ftmul+1,w
  8766  0A71  00C4               	movwf	___ftadd@f2+1
  8767  0A72  0832               	movf	?___ftmul+2,w
  8768  0A73  00C5               	movwf	___ftadd@f2+2
  8769  0A74  318C  24C9         	fcall	___ftadd
  8770  0A76  0020               	movlb	0	; select bank0
  8771  0A77  0840               	movf	?___ftadd,w
  8772  0A78  00D7               	movwf	?_log
  8773  0A79  0841               	movf	?___ftadd+1,w
  8774  0A7A  00D8               	movwf	?_log+1
  8775  0A7B  0842               	movf	?___ftadd+2,w
  8776  0A7C  00D9               	movwf	?_log+2
  8777  0A7D  0008               	return
  8778  0A7E                     __end_of_log:	
  8779                           
  8780                           	psect	text3
  8781  13F6                     __ptext3:	
  8782 ;; *************** function _frexp *****************
  8783 ;; Defined at:
  8784 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
  8785 ;; Parameters:    Size  Location     Type
  8786 ;;  value           3    0[COMMON] int 
  8787 ;;  eptr            1    3[COMMON] PTR int 
  8788 ;;		 -> log@exponent(2), 
  8789 ;; Auto vars:     Size  Location     Type
  8790 ;;		None
  8791 ;; Return value:  Size  Location     Type
  8792 ;;                  3    0[COMMON] PTR int 
  8793 ;; Registers used:
  8794 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8795 ;; Tracked objects:
  8796 ;;		On entry : 0/0
  8797 ;;		On exit  : 0/0
  8798 ;;		Unchanged: 0/0
  8799 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8800 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8801 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8802 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8803 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8804 ;;Total ram usage:        6 bytes
  8805 ;; Hardware stack levels used:    1
  8806 ;; This function calls:
  8807 ;;		Nothing
  8808 ;; This function is called by:
  8809 ;;		_log
  8810 ;; This function uses a non-reentrant model
  8811 ;;
  8812                           
  8813                           
  8814                           ;psect for function _frexp
  8815  13F6                     _frexp:	
  8816                           
  8817                           ;incstack = 0
  8818                           ; Regs used in _frexp: [wreg+fsr1l+fsr1h+status,2+status,0]
  8819  13F6  0872               	movf	frexp@value+2,w
  8820  13F7  0471               	iorwf	frexp@value+1,w
  8821  13F8  0470               	iorwf	frexp@value,w
  8822  13F9  1D03               	skipz
  8823  13FA  2C08               	goto	l2416
  8824  13FB  0873               	movf	frexp@eptr,w
  8825  13FC  0086               	movwf	6
  8826  13FD  0187               	clrf	7
  8827  13FE  3000               	movlw	0
  8828  13FF  3FC0               	movwi [0]fsr1
  8829  1400  3FC1               	movwi [1]fsr1
  8830  1401  3000               	movlw	0
  8831  1402  00F0               	movwf	?_frexp
  8832  1403  3000               	movlw	0
  8833  1404  00F1               	movwf	?_frexp+1
  8834  1405  3000               	movlw	0
  8835  1406  00F2               	movwf	?_frexp+2
  8836  1407  0008               	return
  8837  1408                     l2416:	
  8838  1408  0872               	movf	frexp@value+2,w
  8839  1409  397F               	andlw	127
  8840  140A  00F4               	movwf	??_frexp
  8841  140B  01F5               	clrf	??_frexp+1
  8842  140C  35F4               	lslf	??_frexp,f
  8843  140D  0DF5               	rlf	??_frexp+1,f
  8844  140E  0873               	movf	frexp@eptr,w
  8845  140F  0086               	movwf	6
  8846  1410  0187               	clrf	7
  8847  1411  0874               	movf	??_frexp,w
  8848  1412  3FC0               	movwi [0]fsr1
  8849  1413  0875               	movf	??_frexp+1,w
  8850  1414  3FC1               	movwi [1]fsr1
  8851  1415  0D71               	rlf	frexp@value+1,w
  8852  1416  0D71               	rlf	frexp@value+1,w
  8853  1417  3901               	andlw	1
  8854  1418  00F4               	movwf	??_frexp
  8855  1419  01F5               	clrf	??_frexp+1
  8856  141A  0873               	movf	frexp@eptr,w
  8857  141B  0086               	movwf	6
  8858  141C  0187               	clrf	7
  8859  141D  0874               	movf	??_frexp,w
  8860  141E  0481               	iorwf	1,f
  8861  141F  3141               	addfsr 1,1
  8862  1420  0875               	movf	??_frexp+1,w
  8863  1421  0481               	iorwf	1,f
  8864  1422  0873               	movf	frexp@eptr,w
  8865  1423  0086               	movwf	6
  8866  1424  0187               	clrf	7
  8867  1425  3082               	movlw	130
  8868  1426  0781               	addwf	1,f
  8869  1427  3141               	addfsr 1,1
  8870  1428  30FF               	movlw	255
  8871  1429  3D81               	addwfc	1,f
  8872  142A  317F               	addfsr 1,-1
  8873  142B  0872               	movf	frexp@value+2,w
  8874  142C  3980               	andlw	-128
  8875  142D  383F               	iorlw	63
  8876  142E  00F2               	movwf	frexp@value+2
  8877  142F  13F1               	bcf	frexp@value+1,7
  8878  1430  0008               	return
  8879  1431                     __end_of_frexp:	
  8880                           
  8881                           	psect	text4
  8882  15EE                     __ptext4:	
  8883 ;; *************** function _eval_poly *****************
  8884 ;; Defined at:
  8885 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\evalpoly.c"
  8886 ;; Parameters:    Size  Location     Type
  8887 ;;  x               3   45[BANK0 ] PTR int 
  8888 ;;  d               2   48[BANK0 ] PTR const 
  8889 ;;		 -> log@coeff(27), 
  8890 ;;  n               2   50[BANK0 ] int 
  8891 ;; Auto vars:     Size  Location     Type
  8892 ;;  res             3   52[BANK0 ] int 
  8893 ;; Return value:  Size  Location     Type
  8894 ;;                  3   45[BANK0 ] int 
  8895 ;; Registers used:
  8896 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8897 ;; Tracked objects:
  8898 ;;		On entry : 0/0
  8899 ;;		On exit  : 0/0
  8900 ;;		Unchanged: 0/0
  8901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8902 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8903 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8904 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8905 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8906 ;;Total ram usage:       10 bytes
  8907 ;; Hardware stack levels used:    1
  8908 ;; Hardware stack levels required when called:    2
  8909 ;; This function calls:
  8910 ;;		___ftadd
  8911 ;;		___ftmul
  8912 ;;		___wmul
  8913 ;; This function is called by:
  8914 ;;		_log
  8915 ;; This function uses a non-reentrant model
  8916 ;;
  8917                           
  8918                           
  8919                           ;psect for function _eval_poly
  8920  15EE                     _eval_poly:	
  8921                           
  8922                           ;incstack = 0
  8923                           ; Regs used in _eval_poly: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8924  15EE  0020               	movlb	0	; select bank0
  8925  15EF  0853               	movf	eval_poly@n+1,w
  8926  15F0  00FA               	movwf	___wmul@multiplier+1
  8927  15F1  0852               	movf	eval_poly@n,w
  8928  15F2  00F9               	movwf	___wmul@multiplier
  8929  15F3  3003               	movlw	3
  8930  15F4  00FB               	movwf	___wmul@multiplicand
  8931  15F5  3000               	movlw	0
  8932  15F6  00FC               	movwf	___wmul@multiplicand+1
  8933  15F7  3191  21EA  3195   	fcall	___wmul
  8934  15FA  0020               	movlb	0	; select bank0
  8935  15FB  0850               	movf	eval_poly@d,w
  8936  15FC  0779               	addwf	?___wmul,w
  8937  15FD  0084               	movwf	4
  8938  15FE  0851               	movf	eval_poly@d+1,w
  8939  15FF  3D7A               	addwfc	?___wmul+1,w
  8940  1600  0085               	movwf	5
  8941  1601  3F00               	moviw [0]fsr0
  8942  1602  00D4               	movwf	eval_poly@res
  8943  1603  3F01               	moviw [1]fsr0
  8944  1604  00D5               	movwf	eval_poly@res+1
  8945  1605  3F02               	moviw [2]fsr0
  8946  1606                     L4:	
  8947  1606  00D6               	movwf	eval_poly@res+2
  8948  1607  0852               	movf	eval_poly@n,w
  8949  1608  0453               	iorwf	eval_poly@n+1,w
  8950  1609  1903               	btfsc	3,2
  8951  160A  2E47               	goto	l2434
  8952  160B  30FF               	movlw	255
  8953  160C  07D2               	addwf	eval_poly@n,f
  8954  160D  30FF               	movlw	255
  8955  160E  3DD3               	addwfc	eval_poly@n+1,f
  8956  160F  0853               	movf	eval_poly@n+1,w
  8957  1610  00FA               	movwf	___wmul@multiplier+1
  8958  1611  0852               	movf	eval_poly@n,w
  8959  1612  00F9               	movwf	___wmul@multiplier
  8960  1613  3003               	movlw	3
  8961  1614  00FB               	movwf	___wmul@multiplicand
  8962  1615  3000               	movlw	0
  8963  1616  00FC               	movwf	___wmul@multiplicand+1
  8964  1617  3191  21EA  3195   	fcall	___wmul
  8965  161A  0020               	movlb	0	; select bank0
  8966  161B  0850               	movf	eval_poly@d,w
  8967  161C  0779               	addwf	?___wmul,w
  8968  161D  0084               	movwf	4
  8969  161E  0851               	movf	eval_poly@d+1,w
  8970  161F  3D7A               	addwfc	?___wmul+1,w
  8971  1620  0085               	movwf	5
  8972  1621  3F00               	moviw [0]fsr0
  8973  1622  00C0               	movwf	___ftadd@f1
  8974  1623  3F01               	moviw [1]fsr0
  8975  1624  00C1               	movwf	___ftadd@f1+1
  8976  1625  3F02               	moviw [2]fsr0
  8977  1626  00C2               	movwf	___ftadd@f1+2
  8978  1627  0854               	movf	eval_poly@res,w
  8979  1628  00B0               	movwf	___ftmul@f1
  8980  1629  0855               	movf	eval_poly@res+1,w
  8981  162A  00B1               	movwf	___ftmul@f1+1
  8982  162B  0856               	movf	eval_poly@res+2,w
  8983  162C  00B2               	movwf	___ftmul@f1+2
  8984  162D  084D               	movf	eval_poly@x,w
  8985  162E  00B3               	movwf	___ftmul@f2
  8986  162F  084E               	movf	eval_poly@x+1,w
  8987  1630  00B4               	movwf	___ftmul@f2+1
  8988  1631  084F               	movf	eval_poly@x+2,w
  8989  1632  00B5               	movwf	___ftmul@f2+2
  8990  1633  318A  227E  3195   	fcall	___ftmul
  8991  1636  0020               	movlb	0	; select bank0
  8992  1637  0830               	movf	?___ftmul,w
  8993  1638  00C3               	movwf	___ftadd@f2
  8994  1639  0831               	movf	?___ftmul+1,w
  8995  163A  00C4               	movwf	___ftadd@f2+1
  8996  163B  0832               	movf	?___ftmul+2,w
  8997  163C  00C5               	movwf	___ftadd@f2+2
  8998  163D  318C  24C9  3195   	fcall	___ftadd
  8999  1640  0020               	movlb	0	; select bank0
  9000  1641  0840               	movf	?___ftadd,w
  9001  1642  00D4               	movwf	eval_poly@res
  9002  1643  0841               	movf	?___ftadd+1,w
  9003  1644  00D5               	movwf	eval_poly@res+1
  9004  1645  0842               	movf	?___ftadd+2,w
  9005  1646  2E06               	goto	L4
  9006  1647                     l2434:	
  9007  1647  0854               	movf	eval_poly@res,w
  9008  1648  00CD               	movwf	?_eval_poly
  9009  1649  0855               	movf	eval_poly@res+1,w
  9010  164A  00CE               	movwf	?_eval_poly+1
  9011  164B  0856               	movf	eval_poly@res+2,w
  9012  164C  00CF               	movwf	?_eval_poly+2
  9013  164D  0008               	return
  9014  164E                     __end_of_eval_poly:	
  9015                           
  9016                           	psect	text5
  9017  0A7E                     __ptext5:	
  9018 ;; *************** function ___ftmul *****************
  9019 ;; Defined at:
  9020 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
  9021 ;; Parameters:    Size  Location     Type
  9022 ;;  f1              3   16[BANK0 ] float 
  9023 ;;  f2              3   19[BANK0 ] float 
  9024 ;; Auto vars:     Size  Location     Type
  9025 ;;  f3_as_produc    3   27[BANK0 ] unsigned um
  9026 ;;  sign            1   31[BANK0 ] unsigned char 
  9027 ;;  cntr            1   30[BANK0 ] unsigned char 
  9028 ;;  exp             1   26[BANK0 ] unsigned char 
  9029 ;; Return value:  Size  Location     Type
  9030 ;;                  3   16[BANK0 ] float 
  9031 ;; Registers used:
  9032 ;;		wreg, status,2, status,0, pclath, cstack
  9033 ;; Tracked objects:
  9034 ;;		On entry : 0/0
  9035 ;;		On exit  : 0/0
  9036 ;;		Unchanged: 0/0
  9037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9038 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9039 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9040 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9041 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9042 ;;Total ram usage:       16 bytes
  9043 ;; Hardware stack levels used:    1
  9044 ;; Hardware stack levels required when called:    1
  9045 ;; This function calls:
  9046 ;;		___ftpack
  9047 ;; This function is called by:
  9048 ;;		_tempCalc
  9049 ;;		_main
  9050 ;;		_log
  9051 ;;		_eval_poly
  9052 ;; This function uses a non-reentrant model
  9053 ;;
  9054                           
  9055                           
  9056                           ;psect for function ___ftmul
  9057  0A7E                     ___ftmul:	
  9058                           
  9059                           ;incstack = 0
  9060                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  9061  0A7E  0020               	movlb	0	; select bank0
  9062  0A7F  0830               	movf	___ftmul@f1,w
  9063  0A80  00B6               	movwf	??___ftmul
  9064  0A81  0831               	movf	___ftmul@f1+1,w
  9065  0A82  00B7               	movwf	??___ftmul+1
  9066  0A83  0832               	movf	___ftmul@f1+2,w
  9067  0A84  00B8               	movwf	??___ftmul+2
  9068  0A85  1003               	clrc
  9069  0A86  0D37               	rlf	??___ftmul+1,w
  9070  0A87  0D38               	rlf	??___ftmul+2,w
  9071  0A88  00B9               	movwf	??___ftmul+3
  9072  0A89  0839               	movf	??___ftmul+3,w
  9073  0A8A  00BA               	movwf	___ftmul@exp
  9074  0A8B  083A               	movf	___ftmul@exp,w
  9075  0A8C  1D03               	btfss	3,2
  9076  0A8D  2A95               	goto	l2318
  9077  0A8E  3000               	movlw	0
  9078  0A8F  00B0               	movwf	?___ftmul
  9079  0A90  3000               	movlw	0
  9080  0A91  00B1               	movwf	?___ftmul+1
  9081  0A92  3000               	movlw	0
  9082  0A93  00B2               	movwf	?___ftmul+2
  9083  0A94  0008               	return
  9084  0A95                     l2318:	
  9085  0A95  0833               	movf	___ftmul@f2,w
  9086  0A96  00B6               	movwf	??___ftmul
  9087  0A97  0834               	movf	___ftmul@f2+1,w
  9088  0A98  00B7               	movwf	??___ftmul+1
  9089  0A99  0835               	movf	___ftmul@f2+2,w
  9090  0A9A  00B8               	movwf	??___ftmul+2
  9091  0A9B  1003               	clrc
  9092  0A9C  0D37               	rlf	??___ftmul+1,w
  9093  0A9D  0D38               	rlf	??___ftmul+2,w
  9094  0A9E  00B9               	movwf	??___ftmul+3
  9095  0A9F  0839               	movf	??___ftmul+3,w
  9096  0AA0  00BF               	movwf	___ftmul@sign
  9097  0AA1  083F               	movf	___ftmul@sign,w
  9098  0AA2  1D03               	btfss	3,2
  9099  0AA3  2AAB               	goto	l2324
  9100  0AA4  3000               	movlw	0
  9101  0AA5  00B0               	movwf	?___ftmul
  9102  0AA6  3000               	movlw	0
  9103  0AA7  00B1               	movwf	?___ftmul+1
  9104  0AA8  3000               	movlw	0
  9105  0AA9  00B2               	movwf	?___ftmul+2
  9106  0AAA  0008               	return
  9107  0AAB                     l2324:	
  9108  0AAB  083F               	movf	___ftmul@sign,w
  9109  0AAC  3E7B               	addlw	123
  9110  0AAD  00B6               	movwf	??___ftmul
  9111  0AAE  0836               	movf	??___ftmul,w
  9112  0AAF  07BA               	addwf	___ftmul@exp,f
  9113  0AB0  0830               	movf	___ftmul@f1,w
  9114  0AB1  00B6               	movwf	??___ftmul
  9115  0AB2  0831               	movf	___ftmul@f1+1,w
  9116  0AB3  00B7               	movwf	??___ftmul+1
  9117  0AB4  0832               	movf	___ftmul@f1+2,w
  9118  0AB5  00B8               	movwf	??___ftmul+2
  9119  0AB6  3010               	movlw	16
  9120  0AB7                     u2385:	
  9121  0AB7  36B8               	lsrf	??___ftmul+2,f
  9122  0AB8  0CB7               	rrf	??___ftmul+1,f
  9123  0AB9  0CB6               	rrf	??___ftmul,f
  9124  0ABA  0B89               	decfsz	9,f
  9125  0ABB  2AB7               	goto	u2385
  9126  0ABC  0836               	movf	??___ftmul,w
  9127  0ABD  00B9               	movwf	??___ftmul+3
  9128  0ABE  0839               	movf	??___ftmul+3,w
  9129  0ABF  00BF               	movwf	___ftmul@sign
  9130  0AC0  0833               	movf	___ftmul@f2,w
  9131  0AC1  00B6               	movwf	??___ftmul
  9132  0AC2  0834               	movf	___ftmul@f2+1,w
  9133  0AC3  00B7               	movwf	??___ftmul+1
  9134  0AC4  0835               	movf	___ftmul@f2+2,w
  9135  0AC5  00B8               	movwf	??___ftmul+2
  9136  0AC6  3010               	movlw	16
  9137  0AC7                     u2395:	
  9138  0AC7  36B8               	lsrf	??___ftmul+2,f
  9139  0AC8  0CB7               	rrf	??___ftmul+1,f
  9140  0AC9  0CB6               	rrf	??___ftmul,f
  9141  0ACA  0B89               	decfsz	9,f
  9142  0ACB  2AC7               	goto	u2395
  9143  0ACC  0836               	movf	??___ftmul,w
  9144  0ACD  00B9               	movwf	??___ftmul+3
  9145  0ACE  0839               	movf	??___ftmul+3,w
  9146  0ACF  06BF               	xorwf	___ftmul@sign,f
  9147  0AD0  3080               	movlw	128
  9148  0AD1  00B6               	movwf	??___ftmul
  9149  0AD2  0836               	movf	??___ftmul,w
  9150  0AD3  05BF               	andwf	___ftmul@sign,f
  9151  0AD4  17B1               	bsf	___ftmul@f1+1,7
  9152  0AD5  17B4               	bsf	___ftmul@f2+1,7
  9153  0AD6  30FF               	movlw	255
  9154  0AD7  05B3               	andwf	___ftmul@f2,f
  9155  0AD8  30FF               	movlw	255
  9156  0AD9  05B4               	andwf	___ftmul@f2+1,f
  9157  0ADA  3000               	movlw	0
  9158  0ADB  05B5               	andwf	___ftmul@f2+2,f
  9159  0ADC  3000               	movlw	0
  9160  0ADD  00BB               	movwf	___ftmul@f3_as_product
  9161  0ADE  3000               	movlw	0
  9162  0ADF  00BC               	movwf	___ftmul@f3_as_product+1
  9163  0AE0  3000               	movlw	0
  9164  0AE1  00BD               	movwf	___ftmul@f3_as_product+2
  9165  0AE2  3007               	movlw	7
  9166  0AE3  00B6               	movwf	??___ftmul
  9167  0AE4  0836               	movf	??___ftmul,w
  9168  0AE5  00BE               	movwf	___ftmul@cntr
  9169  0AE6                     l2336:	
  9170  0AE6  1C30               	btfss	___ftmul@f1,0
  9171  0AE7  2AEE               	goto	l2340
  9172  0AE8  0833               	movf	___ftmul@f2,w
  9173  0AE9  07BB               	addwf	___ftmul@f3_as_product,f
  9174  0AEA  0834               	movf	___ftmul@f2+1,w
  9175  0AEB  3DBC               	addwfc	___ftmul@f3_as_product+1,f
  9176  0AEC  0835               	movf	___ftmul@f2+2,w
  9177  0AED  3DBD               	addwfc	___ftmul@f3_as_product+2,f
  9178  0AEE                     l2340:	
  9179  0AEE  3001               	movlw	1
  9180  0AEF                     u2415:	
  9181  0AEF  36B2               	lsrf	___ftmul@f1+2,f
  9182  0AF0  0CB1               	rrf	___ftmul@f1+1,f
  9183  0AF1  0CB0               	rrf	___ftmul@f1,f
  9184  0AF2  0B89               	decfsz	9,f
  9185  0AF3  2AEF               	goto	u2415
  9186  0AF4  3001               	movlw	1
  9187  0AF5                     u2425:	
  9188  0AF5  35B3               	lslf	___ftmul@f2,f
  9189  0AF6  0DB4               	rlf	___ftmul@f2+1,f
  9190  0AF7  0DB5               	rlf	___ftmul@f2+2,f
  9191  0AF8  0B89               	decfsz	9,f
  9192  0AF9  2AF5               	goto	u2425
  9193  0AFA  3001               	movlw	1
  9194  0AFB  02BE               	subwf	___ftmul@cntr,f
  9195  0AFC  1D03               	btfss	3,2
  9196  0AFD  2AE6               	goto	l2336
  9197  0AFE  3009               	movlw	9
  9198  0AFF  00B6               	movwf	??___ftmul
  9199  0B00  0836               	movf	??___ftmul,w
  9200  0B01  00BE               	movwf	___ftmul@cntr
  9201  0B02                     l2348:	
  9202  0B02  1C30               	btfss	___ftmul@f1,0
  9203  0B03  2B0A               	goto	l2352
  9204  0B04  0833               	movf	___ftmul@f2,w
  9205  0B05  07BB               	addwf	___ftmul@f3_as_product,f
  9206  0B06  0834               	movf	___ftmul@f2+1,w
  9207  0B07  3DBC               	addwfc	___ftmul@f3_as_product+1,f
  9208  0B08  0835               	movf	___ftmul@f2+2,w
  9209  0B09  3DBD               	addwfc	___ftmul@f3_as_product+2,f
  9210  0B0A                     l2352:	
  9211  0B0A  3001               	movlw	1
  9212  0B0B                     u2455:	
  9213  0B0B  36B2               	lsrf	___ftmul@f1+2,f
  9214  0B0C  0CB1               	rrf	___ftmul@f1+1,f
  9215  0B0D  0CB0               	rrf	___ftmul@f1,f
  9216  0B0E  0B89               	decfsz	9,f
  9217  0B0F  2B0B               	goto	u2455
  9218  0B10  3001               	movlw	1
  9219  0B11                     u2465:	
  9220  0B11  36BD               	lsrf	___ftmul@f3_as_product+2,f
  9221  0B12  0CBC               	rrf	___ftmul@f3_as_product+1,f
  9222  0B13  0CBB               	rrf	___ftmul@f3_as_product,f
  9223  0B14  0B89               	decfsz	9,f
  9224  0B15  2B11               	goto	u2465
  9225  0B16  3001               	movlw	1
  9226  0B17  02BE               	subwf	___ftmul@cntr,f
  9227  0B18  1D03               	btfss	3,2
  9228  0B19  2B02               	goto	l2348
  9229  0B1A  083B               	movf	___ftmul@f3_as_product,w
  9230  0B1B  00F0               	movwf	___ftpack@arg
  9231  0B1C  083C               	movf	___ftmul@f3_as_product+1,w
  9232  0B1D  00F1               	movwf	___ftpack@arg+1
  9233  0B1E  083D               	movf	___ftmul@f3_as_product+2,w
  9234  0B1F  00F2               	movwf	___ftpack@arg+2
  9235  0B20  083A               	movf	___ftmul@exp,w
  9236  0B21  00B6               	movwf	??___ftmul
  9237  0B22  0836               	movf	??___ftmul,w
  9238  0B23  00F3               	movwf	___ftpack@exp
  9239  0B24  083F               	movf	___ftmul@sign,w
  9240  0B25  00B7               	movwf	??___ftmul+1
  9241  0B26  0837               	movf	??___ftmul+1,w
  9242  0B27  00F4               	movwf	___ftpack@sign
  9243  0B28  3180  201A         	fcall	___ftpack
  9244  0B2A  0870               	movf	?___ftpack,w
  9245  0B2B  0020               	movlb	0	; select bank0
  9246  0B2C  00B0               	movwf	?___ftmul
  9247  0B2D  0871               	movf	?___ftpack+1,w
  9248  0B2E  00B1               	movwf	?___ftmul+1
  9249  0B2F  0872               	movf	?___ftpack+2,w
  9250  0B30  00B2               	movwf	?___ftmul+2
  9251  0B31  0008               	return
  9252  0B32                     __end_of___ftmul:	
  9253                           
  9254                           	psect	text6
  9255  13BB                     __ptext6:	
  9256 ;; *************** function ___ftge *****************
  9257 ;; Defined at:
  9258 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
  9259 ;; Parameters:    Size  Location     Type
  9260 ;;  ff1             3    0[COMMON] float 
  9261 ;;  ff2             3    3[COMMON] float 
  9262 ;; Auto vars:     Size  Location     Type
  9263 ;;		None
  9264 ;; Return value:  Size  Location     Type
  9265 ;;		None               void
  9266 ;; Registers used:
  9267 ;;		wreg, status,2, status,0
  9268 ;; Tracked objects:
  9269 ;;		On entry : 0/0
  9270 ;;		On exit  : 0/0
  9271 ;;		Unchanged: 0/0
  9272 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9273 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9274 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9275 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9276 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9277 ;;Total ram usage:        9 bytes
  9278 ;; Hardware stack levels used:    1
  9279 ;; This function calls:
  9280 ;;		Nothing
  9281 ;; This function is called by:
  9282 ;;		_log
  9283 ;; This function uses a non-reentrant model
  9284 ;;
  9285                           
  9286                           
  9287                           ;psect for function ___ftge
  9288  13BB                     ___ftge:	
  9289                           
  9290                           ;incstack = 0
  9291                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  9292  13BB  1FF2               	btfss	___ftge@ff1+2,7
  9293  13BC  2BD1               	goto	l2392
  9294  13BD  0970               	comf	___ftge@ff1,w
  9295  13BE  00F6               	movwf	??___ftge
  9296  13BF  0971               	comf	___ftge@ff1+1,w
  9297  13C0  00F7               	movwf	??___ftge+1
  9298  13C1  0972               	comf	___ftge@ff1+2,w
  9299  13C2  00F8               	movwf	??___ftge+2
  9300  13C3  0AF6               	incf	??___ftge,f
  9301  13C4  1903               	skipnz
  9302  13C5  0AF7               	incf	??___ftge+1,f
  9303  13C6  1903               	skipnz
  9304  13C7  0AF8               	incf	??___ftge+2,f
  9305  13C8  3000               	movlw	0
  9306  13C9  0776               	addwf	??___ftge,w
  9307  13CA  00F0               	movwf	___ftge@ff1
  9308  13CB  3000               	movlw	0
  9309  13CC  3D77               	addwfc	??___ftge+1,w
  9310  13CD  00F1               	movwf	___ftge@ff1+1
  9311  13CE  3080               	movlw	128
  9312  13CF  3D78               	addwfc	??___ftge+2,w
  9313  13D0  00F2               	movwf	___ftge@ff1+2
  9314  13D1                     l2392:	
  9315  13D1  1FF5               	btfss	___ftge@ff2+2,7
  9316  13D2  2BE7               	goto	l2396
  9317  13D3  0973               	comf	___ftge@ff2,w
  9318  13D4  00F6               	movwf	??___ftge
  9319  13D5  0974               	comf	___ftge@ff2+1,w
  9320  13D6  00F7               	movwf	??___ftge+1
  9321  13D7  0975               	comf	___ftge@ff2+2,w
  9322  13D8  00F8               	movwf	??___ftge+2
  9323  13D9  0AF6               	incf	??___ftge,f
  9324  13DA  1903               	skipnz
  9325  13DB  0AF7               	incf	??___ftge+1,f
  9326  13DC  1903               	skipnz
  9327  13DD  0AF8               	incf	??___ftge+2,f
  9328  13DE  3000               	movlw	0
  9329  13DF  0776               	addwf	??___ftge,w
  9330  13E0  00F3               	movwf	___ftge@ff2
  9331  13E1  3000               	movlw	0
  9332  13E2  3D77               	addwfc	??___ftge+1,w
  9333  13E3  00F4               	movwf	___ftge@ff2+1
  9334  13E4  3080               	movlw	128
  9335  13E5  3D78               	addwfc	??___ftge+2,w
  9336  13E6  00F5               	movwf	___ftge@ff2+2
  9337  13E7                     l2396:	
  9338  13E7  3080               	movlw	128
  9339  13E8  06F2               	xorwf	___ftge@ff1+2,f
  9340  13E9  3080               	movlw	128
  9341  13EA  06F5               	xorwf	___ftge@ff2+2,f
  9342  13EB  0875               	movf	___ftge@ff2+2,w
  9343  13EC  0272               	subwf	___ftge@ff1+2,w
  9344  13ED  1D03               	skipz
  9345  13EE  0008               	return
  9346  13EF  0874               	movf	___ftge@ff2+1,w
  9347  13F0  0271               	subwf	___ftge@ff1+1,w
  9348  13F1  1D03               	skipz
  9349  13F2  0008               	return
  9350  13F3  0873               	movf	___ftge@ff2,w
  9351  13F4  0270               	subwf	___ftge@ff1,w
  9352  13F5  0008               	return
  9353  13F6                     __end_of___ftge:	
  9354                           
  9355                           	psect	text7
  9356  1208                     __ptext7:	
  9357 ;; *************** function ___ftsub *****************
  9358 ;; Defined at:
  9359 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
  9360 ;; Parameters:    Size  Location     Type
  9361 ;;  f2              3   45[BANK0 ] float 
  9362 ;;  f1              3   48[BANK0 ] float 
  9363 ;; Auto vars:     Size  Location     Type
  9364 ;;		None
  9365 ;; Return value:  Size  Location     Type
  9366 ;;                  3   45[BANK0 ] float 
  9367 ;; Registers used:
  9368 ;;		wreg, status,2, status,0, pclath, cstack
  9369 ;; Tracked objects:
  9370 ;;		On entry : 0/0
  9371 ;;		On exit  : 0/0
  9372 ;;		Unchanged: 0/0
  9373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9374 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9375 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9376 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9377 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9378 ;;Total ram usage:        6 bytes
  9379 ;; Hardware stack levels used:    1
  9380 ;; Hardware stack levels required when called:    2
  9381 ;; This function calls:
  9382 ;;		___ftadd
  9383 ;; This function is called by:
  9384 ;;		_tempCalc
  9385 ;; This function uses a non-reentrant model
  9386 ;;
  9387                           
  9388                           
  9389                           ;psect for function ___ftsub
  9390  1208                     ___ftsub:	
  9391                           
  9392                           ;incstack = 0
  9393                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  9394  1208  0020               	movlb	0	; select bank0
  9395  1209  084F               	movf	___ftsub@f2+2,w
  9396  120A  044E               	iorwf	___ftsub@f2+1,w
  9397  120B  044D               	iorwf	___ftsub@f2,w
  9398  120C  1903               	skipnz
  9399  120D  2A10               	goto	l2752
  9400  120E  3080               	movlw	128
  9401  120F  06CF               	xorwf	___ftsub@f2+2,f
  9402  1210                     l2752:	
  9403  1210  0850               	movf	___ftsub@f1,w
  9404  1211  00C0               	movwf	___ftadd@f1
  9405  1212  0851               	movf	___ftsub@f1+1,w
  9406  1213  00C1               	movwf	___ftadd@f1+1
  9407  1214  0852               	movf	___ftsub@f1+2,w
  9408  1215  00C2               	movwf	___ftadd@f1+2
  9409  1216  084D               	movf	___ftsub@f2,w
  9410  1217  00C3               	movwf	___ftadd@f2
  9411  1218  084E               	movf	___ftsub@f2+1,w
  9412  1219  00C4               	movwf	___ftadd@f2+1
  9413  121A  084F               	movf	___ftsub@f2+2,w
  9414  121B  00C5               	movwf	___ftadd@f2+2
  9415  121C  318C  24C9         	fcall	___ftadd
  9416  121E  0020               	movlb	0	; select bank0
  9417  121F  0840               	movf	?___ftadd,w
  9418  1220  00CD               	movwf	?___ftsub
  9419  1221  0841               	movf	?___ftadd+1,w
  9420  1222  00CE               	movwf	?___ftsub+1
  9421  1223  0842               	movf	?___ftadd+2,w
  9422  1224  00CF               	movwf	?___ftsub+2
  9423  1225  0008               	return
  9424  1226                     __end_of___ftsub:	
  9425                           
  9426                           	psect	text8
  9427  0CC9                     __ptext8:	
  9428 ;; *************** function ___ftadd *****************
  9429 ;; Defined at:
  9430 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
  9431 ;; Parameters:    Size  Location     Type
  9432 ;;  f1              3   32[BANK0 ] float 
  9433 ;;  f2              3   35[BANK0 ] float 
  9434 ;; Auto vars:     Size  Location     Type
  9435 ;;  exp1            1   44[BANK0 ] unsigned char 
  9436 ;;  exp2            1   43[BANK0 ] unsigned char 
  9437 ;;  sign            1   42[BANK0 ] unsigned char 
  9438 ;; Return value:  Size  Location     Type
  9439 ;;                  3   32[BANK0 ] float 
  9440 ;; Registers used:
  9441 ;;		wreg, status,2, status,0, pclath, cstack
  9442 ;; Tracked objects:
  9443 ;;		On entry : 0/0
  9444 ;;		On exit  : 0/0
  9445 ;;		Unchanged: 0/0
  9446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9447 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9448 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9449 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9450 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9451 ;;Total ram usage:       13 bytes
  9452 ;; Hardware stack levels used:    1
  9453 ;; Hardware stack levels required when called:    1
  9454 ;; This function calls:
  9455 ;;		___ftpack
  9456 ;; This function is called by:
  9457 ;;		_tempCalc
  9458 ;;		___ftsub
  9459 ;;		_log
  9460 ;;		_eval_poly
  9461 ;; This function uses a non-reentrant model
  9462 ;;
  9463                           
  9464                           
  9465                           ;psect for function ___ftadd
  9466  0CC9                     ___ftadd:	
  9467                           
  9468                           ;incstack = 0
  9469                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  9470  0CC9  0020               	movlb	0	; select bank0
  9471  0CCA  0840               	movf	___ftadd@f1,w
  9472  0CCB  00C6               	movwf	??___ftadd
  9473  0CCC  0841               	movf	___ftadd@f1+1,w
  9474  0CCD  00C7               	movwf	??___ftadd+1
  9475  0CCE  0842               	movf	___ftadd@f1+2,w
  9476  0CCF  00C8               	movwf	??___ftadd+2
  9477  0CD0  1003               	clrc
  9478  0CD1  0D47               	rlf	??___ftadd+1,w
  9479  0CD2  0D48               	rlf	??___ftadd+2,w
  9480  0CD3  00C9               	movwf	??___ftadd+3
  9481  0CD4  0849               	movf	??___ftadd+3,w
  9482  0CD5  00CC               	movwf	___ftadd@exp1
  9483  0CD6  0843               	movf	___ftadd@f2,w
  9484  0CD7  00C6               	movwf	??___ftadd
  9485  0CD8  0844               	movf	___ftadd@f2+1,w
  9486  0CD9  00C7               	movwf	??___ftadd+1
  9487  0CDA  0845               	movf	___ftadd@f2+2,w
  9488  0CDB  00C8               	movwf	??___ftadd+2
  9489  0CDC  1003               	clrc
  9490  0CDD  0D47               	rlf	??___ftadd+1,w
  9491  0CDE  0D48               	rlf	??___ftadd+2,w
  9492  0CDF  00C9               	movwf	??___ftadd+3
  9493  0CE0  0849               	movf	??___ftadd+3,w
  9494  0CE1  00CB               	movwf	___ftadd@exp2
  9495  0CE2  084C               	movf	___ftadd@exp1,w
  9496  0CE3  1903               	btfsc	3,2
  9497  0CE4  2CF1               	goto	l2248
  9498  0CE5  084B               	movf	___ftadd@exp2,w
  9499  0CE6  024C               	subwf	___ftadd@exp1,w
  9500  0CE7  1803               	skipnc
  9501  0CE8  2CF8               	goto	l2252
  9502  0CE9  034C               	decf	___ftadd@exp1,w
  9503  0CEA  3AFF               	xorlw	255
  9504  0CEB  074B               	addwf	___ftadd@exp2,w
  9505  0CEC  00C6               	movwf	??___ftadd
  9506  0CED  3019               	movlw	25
  9507  0CEE  0246               	subwf	??___ftadd,w
  9508  0CEF  1C03               	skipc
  9509  0CF0  2CF8               	goto	l2252
  9510  0CF1                     l2248:	
  9511  0CF1  0843               	movf	___ftadd@f2,w
  9512  0CF2  00C0               	movwf	?___ftadd
  9513  0CF3  0844               	movf	___ftadd@f2+1,w
  9514  0CF4  00C1               	movwf	?___ftadd+1
  9515  0CF5  0845               	movf	___ftadd@f2+2,w
  9516  0CF6  00C2               	movwf	?___ftadd+2
  9517  0CF7  0008               	return
  9518  0CF8                     l2252:	
  9519  0CF8  084B               	movf	___ftadd@exp2,w
  9520  0CF9  1903               	btfsc	3,2
  9521  0CFA  0008               	return
  9522  0CFB  084C               	movf	___ftadd@exp1,w
  9523  0CFC  024B               	subwf	___ftadd@exp2,w
  9524  0CFD  1803               	skipnc
  9525  0CFE  2D07               	goto	l2258
  9526  0CFF  034B               	decf	___ftadd@exp2,w
  9527  0D00  3AFF               	xorlw	255
  9528  0D01  074C               	addwf	___ftadd@exp1,w
  9529  0D02  00C6               	movwf	??___ftadd
  9530  0D03  3019               	movlw	25
  9531  0D04  0246               	subwf	??___ftadd,w
  9532  0D05  1803               	btfsc	3,0
  9533  0D06  0008               	return
  9534  0D07                     l2258:	
  9535  0D07  3006               	movlw	6
  9536  0D08  00C6               	movwf	??___ftadd
  9537  0D09  0846               	movf	??___ftadd,w
  9538  0D0A  00CA               	movwf	___ftadd@sign
  9539  0D0B  1BC2               	btfsc	___ftadd@f1+2,7
  9540  0D0C  17CA               	bsf	___ftadd@sign,7
  9541  0D0D  1BC5               	btfsc	___ftadd@f2+2,7
  9542  0D0E  174A               	bsf	___ftadd@sign,6
  9543  0D0F  17C1               	bsf	___ftadd@f1+1,7
  9544  0D10  30FF               	movlw	255
  9545  0D11  05C0               	andwf	___ftadd@f1,f
  9546  0D12  30FF               	movlw	255
  9547  0D13  05C1               	andwf	___ftadd@f1+1,f
  9548  0D14  3000               	movlw	0
  9549  0D15  05C2               	andwf	___ftadd@f1+2,f
  9550  0D16  17C4               	bsf	___ftadd@f2+1,7
  9551  0D17  30FF               	movlw	255
  9552  0D18  05C3               	andwf	___ftadd@f2,f
  9553  0D19  30FF               	movlw	255
  9554  0D1A  05C4               	andwf	___ftadd@f2+1,f
  9555  0D1B  3000               	movlw	0
  9556  0D1C  05C5               	andwf	___ftadd@f2+2,f
  9557  0D1D  084B               	movf	___ftadd@exp2,w
  9558  0D1E  024C               	subwf	___ftadd@exp1,w
  9559  0D1F  1803               	skipnc
  9560  0D20  2D43               	goto	l2280
  9561  0D21                     l2270:	
  9562  0D21  3001               	movlw	1
  9563  0D22                     u2225:	
  9564  0D22  35C3               	lslf	___ftadd@f2,f
  9565  0D23  0DC4               	rlf	___ftadd@f2+1,f
  9566  0D24  0DC5               	rlf	___ftadd@f2+2,f
  9567  0D25  0B89               	decfsz	9,f
  9568  0D26  2D22               	goto	u2225
  9569  0D27  3001               	movlw	1
  9570  0D28  02CB               	subwf	___ftadd@exp2,f
  9571  0D29  084B               	movf	___ftadd@exp2,w
  9572  0D2A  064C               	xorwf	___ftadd@exp1,w
  9573  0D2B  1903               	skipnz
  9574  0D2C  2D3E               	goto	l2278
  9575  0D2D  3001               	movlw	1
  9576  0D2E  02CA               	subwf	___ftadd@sign,f
  9577  0D2F  084A               	movf	___ftadd@sign,w
  9578  0D30  3907               	andlw	7
  9579  0D31  1903               	btfsc	3,2
  9580  0D32  2D3E               	goto	l2278
  9581  0D33  2D21               	goto	l2270
  9582  0D34                     l2276:	
  9583  0D34  3001               	movlw	1
  9584  0D35                     u2255:	
  9585  0D35  36C2               	lsrf	___ftadd@f1+2,f
  9586  0D36  0CC1               	rrf	___ftadd@f1+1,f
  9587  0D37  0CC0               	rrf	___ftadd@f1,f
  9588  0D38  0B89               	decfsz	9,f
  9589  0D39  2D35               	goto	u2255
  9590  0D3A  3001               	movlw	1
  9591  0D3B  00C6               	movwf	??___ftadd
  9592  0D3C  0846               	movf	??___ftadd,w
  9593  0D3D  07CC               	addwf	___ftadd@exp1,f
  9594  0D3E                     l2278:	
  9595  0D3E  084C               	movf	___ftadd@exp1,w
  9596  0D3F  064B               	xorwf	___ftadd@exp2,w
  9597  0D40  1903               	btfsc	3,2
  9598  0D41  2D68               	goto	l770
  9599  0D42  2D34               	goto	l2276
  9600  0D43                     l2280:	
  9601  0D43  084C               	movf	___ftadd@exp1,w
  9602  0D44  024B               	subwf	___ftadd@exp2,w
  9603  0D45  1803               	skipnc
  9604  0D46  2D68               	goto	l770
  9605  0D47                     l2282:	
  9606  0D47  3001               	movlw	1
  9607  0D48                     u2285:	
  9608  0D48  35C0               	lslf	___ftadd@f1,f
  9609  0D49  0DC1               	rlf	___ftadd@f1+1,f
  9610  0D4A  0DC2               	rlf	___ftadd@f1+2,f
  9611  0D4B  0B89               	decfsz	9,f
  9612  0D4C  2D48               	goto	u2285
  9613  0D4D  3001               	movlw	1
  9614  0D4E  02CC               	subwf	___ftadd@exp1,f
  9615  0D4F  084B               	movf	___ftadd@exp2,w
  9616  0D50  064C               	xorwf	___ftadd@exp1,w
  9617  0D51  1903               	skipnz
  9618  0D52  2D64               	goto	l2290
  9619  0D53  3001               	movlw	1
  9620  0D54  02CA               	subwf	___ftadd@sign,f
  9621  0D55  084A               	movf	___ftadd@sign,w
  9622  0D56  3907               	andlw	7
  9623  0D57  1903               	btfsc	3,2
  9624  0D58  2D64               	goto	l2290
  9625  0D59  2D47               	goto	l2282
  9626  0D5A                     l2288:	
  9627  0D5A  3001               	movlw	1
  9628  0D5B                     u2315:	
  9629  0D5B  36C5               	lsrf	___ftadd@f2+2,f
  9630  0D5C  0CC4               	rrf	___ftadd@f2+1,f
  9631  0D5D  0CC3               	rrf	___ftadd@f2,f
  9632  0D5E  0B89               	decfsz	9,f
  9633  0D5F  2D5B               	goto	u2315
  9634  0D60  3001               	movlw	1
  9635  0D61  00C6               	movwf	??___ftadd
  9636  0D62  0846               	movf	??___ftadd,w
  9637  0D63  07CB               	addwf	___ftadd@exp2,f
  9638  0D64                     l2290:	
  9639  0D64  084C               	movf	___ftadd@exp1,w
  9640  0D65  064B               	xorwf	___ftadd@exp2,w
  9641  0D66  1D03               	skipz
  9642  0D67  2D5A               	goto	l2288
  9643  0D68                     l770:	
  9644  0D68  1FCA               	btfss	___ftadd@sign,7
  9645  0D69  2D7A               	goto	l2294
  9646  0D6A  30FF               	movlw	255
  9647  0D6B  06C0               	xorwf	___ftadd@f1,f
  9648  0D6C  30FF               	movlw	255
  9649  0D6D  06C1               	xorwf	___ftadd@f1+1,f
  9650  0D6E  30FF               	movlw	255
  9651  0D6F  06C2               	xorwf	___ftadd@f1+2,f
  9652  0D70  3001               	movlw	1
  9653  0D71  07C0               	addwf	___ftadd@f1,f
  9654  0D72  3000               	movlw	0
  9655  0D73  1803               	skipnc
  9656  0D74  3001               	movlw	1
  9657  0D75  07C1               	addwf	___ftadd@f1+1,f
  9658  0D76  3000               	movlw	0
  9659  0D77  1803               	skipnc
  9660  0D78  3001               	movlw	1
  9661  0D79  07C2               	addwf	___ftadd@f1+2,f
  9662  0D7A                     l2294:	
  9663  0D7A  1F4A               	btfss	___ftadd@sign,6
  9664  0D7B  2D8C               	goto	l2298
  9665  0D7C  30FF               	movlw	255
  9666  0D7D  06C3               	xorwf	___ftadd@f2,f
  9667  0D7E  30FF               	movlw	255
  9668  0D7F  06C4               	xorwf	___ftadd@f2+1,f
  9669  0D80  30FF               	movlw	255
  9670  0D81  06C5               	xorwf	___ftadd@f2+2,f
  9671  0D82  3001               	movlw	1
  9672  0D83  07C3               	addwf	___ftadd@f2,f
  9673  0D84  3000               	movlw	0
  9674  0D85  1803               	skipnc
  9675  0D86  3001               	movlw	1
  9676  0D87  07C4               	addwf	___ftadd@f2+1,f
  9677  0D88  3000               	movlw	0
  9678  0D89  1803               	skipnc
  9679  0D8A  3001               	movlw	1
  9680  0D8B  07C5               	addwf	___ftadd@f2+2,f
  9681  0D8C                     l2298:	
  9682  0D8C  01CA               	clrf	___ftadd@sign
  9683  0D8D  0840               	movf	___ftadd@f1,w
  9684  0D8E  07C3               	addwf	___ftadd@f2,f
  9685  0D8F  0841               	movf	___ftadd@f1+1,w
  9686  0D90  3DC4               	addwfc	___ftadd@f2+1,f
  9687  0D91  0842               	movf	___ftadd@f1+2,w
  9688  0D92  3DC5               	addwfc	___ftadd@f2+2,f
  9689  0D93  1FC5               	btfss	___ftadd@f2+2,7
  9690  0D94  2DA7               	goto	l2308
  9691  0D95  30FF               	movlw	255
  9692  0D96  06C3               	xorwf	___ftadd@f2,f
  9693  0D97  30FF               	movlw	255
  9694  0D98  06C4               	xorwf	___ftadd@f2+1,f
  9695  0D99  30FF               	movlw	255
  9696  0D9A  06C5               	xorwf	___ftadd@f2+2,f
  9697  0D9B  3001               	movlw	1
  9698  0D9C  07C3               	addwf	___ftadd@f2,f
  9699  0D9D  3000               	movlw	0
  9700  0D9E  1803               	skipnc
  9701  0D9F  3001               	movlw	1
  9702  0DA0  07C4               	addwf	___ftadd@f2+1,f
  9703  0DA1  3000               	movlw	0
  9704  0DA2  1803               	skipnc
  9705  0DA3  3001               	movlw	1
  9706  0DA4  07C5               	addwf	___ftadd@f2+2,f
  9707  0DA5  01CA               	clrf	___ftadd@sign
  9708  0DA6  0ACA               	incf	___ftadd@sign,f
  9709  0DA7                     l2308:	
  9710  0DA7  0843               	movf	___ftadd@f2,w
  9711  0DA8  00F0               	movwf	___ftpack@arg
  9712  0DA9  0844               	movf	___ftadd@f2+1,w
  9713  0DAA  00F1               	movwf	___ftpack@arg+1
  9714  0DAB  0845               	movf	___ftadd@f2+2,w
  9715  0DAC  00F2               	movwf	___ftpack@arg+2
  9716  0DAD  084C               	movf	___ftadd@exp1,w
  9717  0DAE  00C6               	movwf	??___ftadd
  9718  0DAF  0846               	movf	??___ftadd,w
  9719  0DB0  00F3               	movwf	___ftpack@exp
  9720  0DB1  084A               	movf	___ftadd@sign,w
  9721  0DB2  00C7               	movwf	??___ftadd+1
  9722  0DB3  0847               	movf	??___ftadd+1,w
  9723  0DB4  00F4               	movwf	___ftpack@sign
  9724  0DB5  3180  201A         	fcall	___ftpack
  9725  0DB7  0870               	movf	?___ftpack,w
  9726  0DB8  0020               	movlb	0	; select bank0
  9727  0DB9  00C0               	movwf	?___ftadd
  9728  0DBA  0871               	movf	?___ftpack+1,w
  9729  0DBB  00C1               	movwf	?___ftadd+1
  9730  0DBC  0872               	movf	?___ftpack+2,w
  9731  0DBD  00C2               	movwf	?___ftadd+2
  9732  0DBE  0008               	return
  9733  0DBF                     __end_of___ftadd:	
  9734                           
  9735                           	psect	text9
  9736  007E                     __ptext9:	
  9737 ;; *************** function _readIAnalog *****************
  9738 ;; Defined at:
  9739 ;;		line 77 in file "adc.c"
  9740 ;; Parameters:    Size  Location     Type
  9741 ;;  channel         2    6[BANK0 ] unsigned int 
  9742 ;; Auto vars:     Size  Location     Type
  9743 ;;  value           2   28[BANK0 ] int 
  9744 ;;  analog_chann    2   26[BANK0 ] unsigned int 
  9745 ;; Return value:  Size  Location     Type
  9746 ;;                  2    6[BANK0 ] int 
  9747 ;; Registers used:
  9748 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9749 ;; Tracked objects:
  9750 ;;		On entry : 0/0
  9751 ;;		On exit  : 0/0
  9752 ;;		Unchanged: 0/0
  9753 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9754 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9755 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9756 ;;      Temps:          0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9757 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9758 ;;Total ram usage:       24 bytes
  9759 ;; Hardware stack levels used:    1
  9760 ;; Hardware stack levels required when called:    1
  9761 ;; This function calls:
  9762 ;;		_ADCRead
  9763 ;;		___aldiv
  9764 ;;		___wmul
  9765 ;; This function is called by:
  9766 ;;		_main
  9767 ;; This function uses a non-reentrant model
  9768 ;;
  9769                           
  9770                           
  9771                           ;psect for function _readIAnalog
  9772  007E                     _readIAnalog:	
  9773                           
  9774                           ;adc.c: 79: int16_t value;
  9775                           ;adc.c: 81: uint16_t analog_channel = channels[channel];
  9776                           
  9777                           ;incstack = 0
  9778                           ; Regs used in _readIAnalog: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9779  007E  0020               	movlb	0	; select bank0
  9780  007F  3526               	lslf	readIAnalog@channel,w
  9781  0080  3E4F               	addlw	(low (_channels| (0+256)))& (0+255)
  9782  0081  0086               	movwf	6
  9783  0082  3001               	movlw	1	; select bank2/3
  9784  0083  0087               	movwf	7
  9785  0084  3F40               	moviw [0]fsr1
  9786  0085  00BA               	movwf	readIAnalog@analog_channel
  9787  0086  3F41               	moviw [1]fsr1
  9788  0087  00BB               	movwf	readIAnalog@analog_channel+1
  9789                           
  9790                           ;adc.c: 83: value = ADCRead(analog_channel);
  9791  0088  083A               	movf	readIAnalog@analog_channel,w
  9792  0089  3191  21BF  3180   	fcall	_ADCRead
  9793  008C  0871               	movf	?_ADCRead+1,w
  9794  008D  0020               	movlb	0	; select bank0
  9795  008E  00BD               	movwf	readIAnalog@value+1
  9796  008F  0870               	movf	?_ADCRead,w
  9797  0090  00BC               	movwf	readIAnalog@value
  9798                           
  9799                           ;adc.c: 85: totals[channel] = totals[channel]-samples[channel][sampleIndex];
  9800  0091  0826               	movf	readIAnalog@channel,w
  9801  0092  00A8               	movwf	??_readIAnalog
  9802  0093  3001               	movlw	1
  9803  0094                     u3085:	
  9804  0094  35A8               	lslf	??_readIAnalog,f
  9805  0095  3EFF               	addlw	-1
  9806  0096  1D03               	skipz
  9807  0097  2894               	goto	u3085
  9808  0098  3528               	lslf	??_readIAnalog,w
  9809  0099  3E20               	addlw	(low (_totals| (0+256)))& (0+255)
  9810  009A  0086               	movwf	6
  9811  009B  3001               	movlw	1	; select bank2/3
  9812  009C  0087               	movwf	7
  9813  009D  3F40               	moviw [0]fsr1
  9814  009E  00A9               	movwf	??_readIAnalog+1
  9815  009F  3F41               	moviw [1]fsr1
  9816  00A0  00AA               	movwf	??_readIAnalog+2
  9817  00A1  3F42               	moviw [2]fsr1
  9818  00A2  00AB               	movwf	??_readIAnalog+3
  9819  00A3  3F43               	moviw [3]fsr1
  9820  00A4  00AC               	movwf	??_readIAnalog+4
  9821  00A5  0021               	movlb	1	; select bank1
  9822  00A6  0847               	movf	(_sampleIndex+1)^(0+128),w
  9823  00A7  0020               	movlb	0	; select bank0
  9824  00A8  00AE               	movwf	??_readIAnalog+6
  9825  00A9  0021               	movlb	1	; select bank1
  9826  00AA  0846               	movf	_sampleIndex^(0+128),w
  9827  00AB  0020               	movlb	0	; select bank0
  9828  00AC  00AD               	movwf	??_readIAnalog+5
  9829  00AD  35AD               	lslf	??_readIAnalog+5,f
  9830  00AE  0DAE               	rlf	??_readIAnalog+6,f
  9831  00AF  0827               	movf	readIAnalog@channel+1,w
  9832  00B0  00FA               	movwf	___wmul@multiplier+1
  9833  00B1  0826               	movf	readIAnalog@channel,w
  9834  00B2  00F9               	movwf	___wmul@multiplier
  9835  00B3  3096               	movlw	150
  9836  00B4  00FB               	movwf	___wmul@multiplicand
  9837  00B5  3000               	movlw	0
  9838  00B6  00FC               	movwf	___wmul@multiplicand+1
  9839  00B7  3191  21EA  3180   	fcall	___wmul
  9840  00BA  3098               	movlw	152
  9841  00BB  0020               	movlb	0	; select bank0
  9842  00BC  00AF               	movwf	??_readIAnalog+7
  9843  00BD  3021               	movlw	33
  9844  00BE  00B0               	movwf	??_readIAnalog+8
  9845  00BF  0879               	movf	?___wmul,w
  9846  00C0  072F               	addwf	??_readIAnalog+7,w
  9847  00C1  00B1               	movwf	??_readIAnalog+9
  9848  00C2  087A               	movf	?___wmul+1,w
  9849  00C3  3D30               	addwfc	??_readIAnalog+8,w
  9850  00C4  00B2               	movwf	??_readIAnalog+10
  9851  00C5  082D               	movf	??_readIAnalog+5,w
  9852  00C6  0731               	addwf	??_readIAnalog+9,w
  9853  00C7  0086               	movwf	6
  9854  00C8  082E               	movf	??_readIAnalog+6,w
  9855  00C9  3D32               	addwfc	??_readIAnalog+10,w
  9856  00CA  0087               	movwf	7
  9857  00CB  3F40               	moviw [0]fsr1
  9858  00CC  00B3               	movwf	??_readIAnalog+11
  9859  00CD  3F41               	moviw [1]fsr1
  9860  00CE  00B4               	movwf	??_readIAnalog+12
  9861  00CF  0833               	movf	??_readIAnalog+11,w
  9862  00D0  00B5               	movwf	??_readIAnalog+13
  9863  00D1  0834               	movf	??_readIAnalog+12,w
  9864  00D2  00B6               	movwf	??_readIAnalog+14
  9865  00D3  3000               	movlw	0
  9866  00D4  1BB6               	btfsc	??_readIAnalog+14,7
  9867  00D5  30FF               	movlw	255
  9868  00D6  00B7               	movwf	??_readIAnalog+15
  9869  00D7  00B8               	movwf	??_readIAnalog+16
  9870  00D8  09B5               	comf	??_readIAnalog+13,f
  9871  00D9  09B6               	comf	??_readIAnalog+14,f
  9872  00DA  09B7               	comf	??_readIAnalog+15,f
  9873  00DB  09B8               	comf	??_readIAnalog+16,f
  9874  00DC  0AB5               	incf	??_readIAnalog+13,f
  9875  00DD  1903               	skipnz
  9876  00DE  0AB6               	incf	??_readIAnalog+14,f
  9877  00DF  1903               	skipnz
  9878  00E0  0AB7               	incf	??_readIAnalog+15,f
  9879  00E1  1903               	skipnz
  9880  00E2  0AB8               	incf	??_readIAnalog+16,f
  9881  00E3  0835               	movf	??_readIAnalog+13,w
  9882  00E4  07A9               	addwf	??_readIAnalog+1,f
  9883  00E5  0836               	movf	??_readIAnalog+14,w
  9884  00E6  3DAA               	addwfc	??_readIAnalog+2,f
  9885  00E7  0837               	movf	??_readIAnalog+15,w
  9886  00E8  3DAB               	addwfc	??_readIAnalog+3,f
  9887  00E9  0838               	movf	??_readIAnalog+16,w
  9888  00EA  3DAC               	addwfc	??_readIAnalog+4,f
  9889  00EB  0826               	movf	readIAnalog@channel,w
  9890  00EC  00B9               	movwf	??_readIAnalog+17
  9891  00ED  3001               	movlw	1
  9892  00EE                     u3095:	
  9893  00EE  35B9               	lslf	??_readIAnalog+17,f
  9894  00EF  3EFF               	addlw	-1
  9895  00F0  1D03               	skipz
  9896  00F1  28EE               	goto	u3095
  9897  00F2  3539               	lslf	??_readIAnalog+17,w
  9898  00F3  3E20               	addlw	(low (_totals| (0+256)))& (0+255)
  9899  00F4  0086               	movwf	6
  9900  00F5  3001               	movlw	1	; select bank2/3
  9901  00F6  0087               	movwf	7
  9902  00F7  0829               	movf	??_readIAnalog+1,w
  9903  00F8  3FC0               	movwi [0]fsr1
  9904  00F9  082A               	movf	??_readIAnalog+2,w
  9905  00FA  3FC1               	movwi [1]fsr1
  9906  00FB  082B               	movf	??_readIAnalog+3,w
  9907  00FC  3FC2               	movwi [2]fsr1
  9908  00FD  082C               	movf	??_readIAnalog+4,w
  9909  00FE  3FC3               	movwi [3]fsr1
  9910                           
  9911                           ;adc.c: 87: samples[channel][sampleIndex] = value;
  9912  00FF  0021               	movlb	1	; select bank1
  9913  0100  0847               	movf	(_sampleIndex+1)^(0+128),w
  9914  0101  0020               	movlb	0	; select bank0
  9915  0102  00A9               	movwf	??_readIAnalog+1
  9916  0103  0021               	movlb	1	; select bank1
  9917  0104  0846               	movf	_sampleIndex^(0+128),w
  9918  0105  0020               	movlb	0	; select bank0
  9919  0106  00A8               	movwf	??_readIAnalog
  9920  0107  35A8               	lslf	??_readIAnalog,f
  9921  0108  0DA9               	rlf	??_readIAnalog+1,f
  9922  0109  0827               	movf	readIAnalog@channel+1,w
  9923  010A  00FA               	movwf	___wmul@multiplier+1
  9924  010B  0826               	movf	readIAnalog@channel,w
  9925  010C  00F9               	movwf	___wmul@multiplier
  9926  010D  3096               	movlw	150
  9927  010E  00FB               	movwf	___wmul@multiplicand
  9928  010F  3000               	movlw	0
  9929  0110  00FC               	movwf	___wmul@multiplicand+1
  9930  0111  3191  21EA  3180   	fcall	___wmul
  9931  0114  3098               	movlw	152
  9932  0115  0020               	movlb	0	; select bank0
  9933  0116  00AA               	movwf	??_readIAnalog+2
  9934  0117  3021               	movlw	33
  9935  0118  00AB               	movwf	??_readIAnalog+3
  9936  0119  0879               	movf	?___wmul,w
  9937  011A  072A               	addwf	??_readIAnalog+2,w
  9938  011B  00AC               	movwf	??_readIAnalog+4
  9939  011C  087A               	movf	?___wmul+1,w
  9940  011D  3D2B               	addwfc	??_readIAnalog+3,w
  9941  011E  00AD               	movwf	??_readIAnalog+5
  9942  011F  0828               	movf	??_readIAnalog,w
  9943  0120  072C               	addwf	??_readIAnalog+4,w
  9944  0121  0086               	movwf	6
  9945  0122  0829               	movf	??_readIAnalog+1,w
  9946  0123  3D2D               	addwfc	??_readIAnalog+5,w
  9947  0124  0087               	movwf	7
  9948  0125  083C               	movf	readIAnalog@value,w
  9949  0126  3FC0               	movwi [0]fsr1
  9950  0127  083D               	movf	readIAnalog@value+1,w
  9951  0128  3FC1               	movwi [1]fsr1
  9952                           
  9953                           ;adc.c: 89: totals[channel] = totals[channel]+samples[channel][sampleIndex];
  9954  0129  0826               	movf	readIAnalog@channel,w
  9955  012A  00A8               	movwf	??_readIAnalog
  9956  012B  3001               	movlw	1
  9957  012C                     u3105:	
  9958  012C  35A8               	lslf	??_readIAnalog,f
  9959  012D  3EFF               	addlw	-1
  9960  012E  1D03               	skipz
  9961  012F  292C               	goto	u3105
  9962  0130  3528               	lslf	??_readIAnalog,w
  9963  0131  3E20               	addlw	(low (_totals| (0+256)))& (0+255)
  9964  0132  0086               	movwf	6
  9965  0133  3001               	movlw	1	; select bank2/3
  9966  0134  0087               	movwf	7
  9967  0135  3F40               	moviw [0]fsr1
  9968  0136  00A9               	movwf	??_readIAnalog+1
  9969  0137  3F41               	moviw [1]fsr1
  9970  0138  00AA               	movwf	??_readIAnalog+2
  9971  0139  3F42               	moviw [2]fsr1
  9972  013A  00AB               	movwf	??_readIAnalog+3
  9973  013B  3F43               	moviw [3]fsr1
  9974  013C  00AC               	movwf	??_readIAnalog+4
  9975  013D  0021               	movlb	1	; select bank1
  9976  013E  0847               	movf	(_sampleIndex+1)^(0+128),w
  9977  013F  0020               	movlb	0	; select bank0
  9978  0140  00AE               	movwf	??_readIAnalog+6
  9979  0141  0021               	movlb	1	; select bank1
  9980  0142  0846               	movf	_sampleIndex^(0+128),w
  9981  0143  0020               	movlb	0	; select bank0
  9982  0144  00AD               	movwf	??_readIAnalog+5
  9983  0145  35AD               	lslf	??_readIAnalog+5,f
  9984  0146  0DAE               	rlf	??_readIAnalog+6,f
  9985  0147  0827               	movf	readIAnalog@channel+1,w
  9986  0148  00FA               	movwf	___wmul@multiplier+1
  9987  0149  0826               	movf	readIAnalog@channel,w
  9988  014A  00F9               	movwf	___wmul@multiplier
  9989  014B  3096               	movlw	150
  9990  014C  00FB               	movwf	___wmul@multiplicand
  9991  014D  3000               	movlw	0
  9992  014E  00FC               	movwf	___wmul@multiplicand+1
  9993  014F  3191  21EA  3180   	fcall	___wmul
  9994  0152  3098               	movlw	152
  9995  0153  0020               	movlb	0	; select bank0
  9996  0154  00AF               	movwf	??_readIAnalog+7
  9997  0155  3021               	movlw	33
  9998  0156  00B0               	movwf	??_readIAnalog+8
  9999  0157  0879               	movf	?___wmul,w
 10000  0158  072F               	addwf	??_readIAnalog+7,w
 10001  0159  00B1               	movwf	??_readIAnalog+9
 10002  015A  087A               	movf	?___wmul+1,w
 10003  015B  3D30               	addwfc	??_readIAnalog+8,w
 10004  015C  00B2               	movwf	??_readIAnalog+10
 10005  015D  082D               	movf	??_readIAnalog+5,w
 10006  015E  0731               	addwf	??_readIAnalog+9,w
 10007  015F  0086               	movwf	6
 10008  0160  082E               	movf	??_readIAnalog+6,w
 10009  0161  3D32               	addwfc	??_readIAnalog+10,w
 10010  0162  0087               	movwf	7
 10011  0163  3F40               	moviw [0]fsr1
 10012  0164  00B3               	movwf	??_readIAnalog+11
 10013  0165  3F41               	moviw [1]fsr1
 10014  0166  00B4               	movwf	??_readIAnalog+12
 10015  0167  0833               	movf	??_readIAnalog+11,w
 10016  0168  00B5               	movwf	??_readIAnalog+13
 10017  0169  0834               	movf	??_readIAnalog+12,w
 10018  016A  00B6               	movwf	??_readIAnalog+14
 10019  016B  3000               	movlw	0
 10020  016C  1BB6               	btfsc	??_readIAnalog+14,7
 10021  016D  30FF               	movlw	255
 10022  016E  00B7               	movwf	??_readIAnalog+15
 10023  016F  00B8               	movwf	??_readIAnalog+16
 10024  0170  0835               	movf	??_readIAnalog+13,w
 10025  0171  07A9               	addwf	??_readIAnalog+1,f
 10026  0172  0836               	movf	??_readIAnalog+14,w
 10027  0173  3DAA               	addwfc	??_readIAnalog+2,f
 10028  0174  0837               	movf	??_readIAnalog+15,w
 10029  0175  3DAB               	addwfc	??_readIAnalog+3,f
 10030  0176  0838               	movf	??_readIAnalog+16,w
 10031  0177  3DAC               	addwfc	??_readIAnalog+4,f
 10032  0178  0826               	movf	readIAnalog@channel,w
 10033  0179  00B9               	movwf	??_readIAnalog+17
 10034  017A  3001               	movlw	1
 10035  017B                     u3115:	
 10036  017B  35B9               	lslf	??_readIAnalog+17,f
 10037  017C  3EFF               	addlw	-1
 10038  017D  1D03               	skipz
 10039  017E  297B               	goto	u3115
 10040  017F  3539               	lslf	??_readIAnalog+17,w
 10041  0180  3E20               	addlw	(low (_totals| (0+256)))& (0+255)
 10042  0181  0086               	movwf	6
 10043  0182  3001               	movlw	1	; select bank2/3
 10044  0183  0087               	movwf	7
 10045  0184  0829               	movf	??_readIAnalog+1,w
 10046  0185  3FC0               	movwi [0]fsr1
 10047  0186  082A               	movf	??_readIAnalog+2,w
 10048  0187  3FC1               	movwi [1]fsr1
 10049  0188  082B               	movf	??_readIAnalog+3,w
 10050  0189  3FC2               	movwi [2]fsr1
 10051  018A  082C               	movf	??_readIAnalog+4,w
 10052  018B  3FC3               	movwi [3]fsr1
 10053                           
 10054                           ;adc.c: 91: if(channel>=(4-1))
 10055  018C  3000               	movlw	0
 10056  018D  0227               	subwf	readIAnalog@channel+1,w
 10057  018E  3003               	movlw	3
 10058  018F  1903               	skipnz
 10059  0190  0226               	subwf	readIAnalog@channel,w
 10060  0191  1C03               	skipc
 10061  0192  29A1               	goto	l2834
 10062                           
 10063                           ;adc.c: 92: {
 10064                           ;adc.c: 93: sampleIndex+=1;
 10065  0193  3001               	movlw	1
 10066  0194  0021               	movlb	1	; select bank1
 10067  0195  07C6               	addwf	_sampleIndex^(0+128),f
 10068  0196  3000               	movlw	0
 10069  0197  3DC7               	addwfc	(_sampleIndex+1)^(0+128),f
 10070                           
 10071                           ;adc.c: 94: if(sampleIndex >= 75)sampleIndex = 0;
 10072  0198  3000               	movlw	0
 10073  0199  0247               	subwf	(_sampleIndex+1)^(0+128),w
 10074  019A  304B               	movlw	75
 10075  019B  1903               	skipnz
 10076  019C  0246               	subwf	_sampleIndex^(0+128),w
 10077  019D  1C03               	skipc
 10078  019E  29A1               	goto	l2834
 10079  019F  01C6               	clrf	_sampleIndex^(0+128)
 10080  01A0  01C7               	clrf	(_sampleIndex+1)^(0+128)
 10081  01A1                     l2834:	
 10082                           
 10083                           ;adc.c: 95: }
 10084                           ;adc.c: 97: value = totals[channel]/75;
 10085  01A1  3000               	movlw	0
 10086  01A2  00F3               	movwf	___aldiv@divisor+3
 10087  01A3  3000               	movlw	0
 10088  01A4  00F2               	movwf	___aldiv@divisor+2
 10089  01A5  3000               	movlw	0
 10090  01A6  00F1               	movwf	___aldiv@divisor+1
 10091  01A7  304B               	movlw	75
 10092  01A8  00F0               	movwf	___aldiv@divisor
 10093  01A9  0020               	movlb	0	; select bank0
 10094  01AA  0826               	movf	readIAnalog@channel,w
 10095  01AB  00A8               	movwf	??_readIAnalog
 10096  01AC  3001               	movlw	1
 10097  01AD                     u3145:	
 10098  01AD  35A8               	lslf	??_readIAnalog,f
 10099  01AE  3EFF               	addlw	-1
 10100  01AF  1D03               	skipz
 10101  01B0  29AD               	goto	u3145
 10102  01B1  3528               	lslf	??_readIAnalog,w
 10103  01B2  3E20               	addlw	(low (_totals| (0+256)))& (0+255)
 10104  01B3  0086               	movwf	6
 10105  01B4  3001               	movlw	1	; select bank2/3
 10106  01B5  0087               	movwf	7
 10107  01B6  3F40               	moviw [0]fsr1
 10108  01B7  00F4               	movwf	___aldiv@dividend
 10109  01B8  3F41               	moviw [1]fsr1
 10110  01B9  00F5               	movwf	___aldiv@dividend+1
 10111  01BA  3F42               	moviw [2]fsr1
 10112  01BB  00F6               	movwf	___aldiv@dividend+2
 10113  01BC  3F43               	moviw [3]fsr1
 10114  01BD  00F7               	movwf	___aldiv@dividend+3
 10115  01BE  3196  264E         	fcall	___aldiv
 10116  01C0  0871               	movf	?___aldiv+1,w
 10117  01C1  0020               	movlb	0	; select bank0
 10118  01C2  00BD               	movwf	readIAnalog@value+1
 10119  01C3  0870               	movf	?___aldiv,w
 10120  01C4  00BC               	movwf	readIAnalog@value
 10121                           
 10122                           ;adc.c: 99: return value;
 10123  01C5  083D               	movf	readIAnalog@value+1,w
 10124  01C6  00A7               	movwf	?_readIAnalog+1
 10125  01C7  083C               	movf	readIAnalog@value,w
 10126  01C8  00A6               	movwf	?_readIAnalog
 10127  01C9  0008               	return
 10128  01CA                     __end_of_readIAnalog:	
 10129                           
 10130                           	psect	text10
 10131  164E                     __ptext10:	
 10132 ;; *************** function ___aldiv *****************
 10133 ;; Defined at:
 10134 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\aldiv.c"
 10135 ;; Parameters:    Size  Location     Type
 10136 ;;  divisor         4    0[COMMON] long 
 10137 ;;  dividend        4    4[COMMON] long 
 10138 ;; Auto vars:     Size  Location     Type
 10139 ;;  quotient        4    2[BANK0 ] long 
 10140 ;;  sign            1    1[BANK0 ] unsigned char 
 10141 ;;  counter         1    0[BANK0 ] unsigned char 
 10142 ;; Return value:  Size  Location     Type
 10143 ;;                  4    0[COMMON] long 
 10144 ;; Registers used:
 10145 ;;		wreg, status,2, status,0
 10146 ;; Tracked objects:
 10147 ;;		On entry : 0/0
 10148 ;;		On exit  : 0/0
 10149 ;;		Unchanged: 0/0
 10150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10151 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10152 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10153 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10154 ;;      Totals:         9       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10155 ;;Total ram usage:       15 bytes
 10156 ;; Hardware stack levels used:    1
 10157 ;; This function calls:
 10158 ;;		Nothing
 10159 ;; This function is called by:
 10160 ;;		_readIAnalog
 10161 ;; This function uses a non-reentrant model
 10162 ;;
 10163                           
 10164                           
 10165                           ;psect for function ___aldiv
 10166  164E                     ___aldiv:	
 10167                           
 10168                           ;incstack = 0
 10169                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
 10170  164E  0020               	movlb	0	; select bank0
 10171  164F  01A1               	clrf	___aldiv@sign
 10172  1650  1FF3               	btfss	___aldiv@divisor+3,7
 10173  1651  2E5F               	goto	l633
 10174  1652  09F0               	comf	___aldiv@divisor,f
 10175  1653  09F1               	comf	___aldiv@divisor+1,f
 10176  1654  09F2               	comf	___aldiv@divisor+2,f
 10177  1655  09F3               	comf	___aldiv@divisor+3,f
 10178  1656  0AF0               	incf	___aldiv@divisor,f
 10179  1657  1903               	skipnz
 10180  1658  0AF1               	incf	___aldiv@divisor+1,f
 10181  1659  1903               	skipnz
 10182  165A  0AF2               	incf	___aldiv@divisor+2,f
 10183  165B  1903               	skipnz
 10184  165C  0AF3               	incf	___aldiv@divisor+3,f
 10185  165D  01A1               	clrf	___aldiv@sign
 10186  165E  0AA1               	incf	___aldiv@sign,f
 10187  165F                     l633:	
 10188  165F  1FF7               	btfss	___aldiv@dividend+3,7
 10189  1660  2E70               	goto	l2632
 10190  1661  09F4               	comf	___aldiv@dividend,f
 10191  1662  09F5               	comf	___aldiv@dividend+1,f
 10192  1663  09F6               	comf	___aldiv@dividend+2,f
 10193  1664  09F7               	comf	___aldiv@dividend+3,f
 10194  1665  0AF4               	incf	___aldiv@dividend,f
 10195  1666  1903               	skipnz
 10196  1667  0AF5               	incf	___aldiv@dividend+1,f
 10197  1668  1903               	skipnz
 10198  1669  0AF6               	incf	___aldiv@dividend+2,f
 10199  166A  1903               	skipnz
 10200  166B  0AF7               	incf	___aldiv@dividend+3,f
 10201  166C  3001               	movlw	1
 10202  166D  00F8               	movwf	??___aldiv
 10203  166E  0878               	movf	??___aldiv,w
 10204  166F  06A1               	xorwf	___aldiv@sign,f
 10205  1670                     l2632:	
 10206  1670  3000               	movlw	0
 10207  1671  00A5               	movwf	___aldiv@quotient+3
 10208  1672  3000               	movlw	0
 10209  1673  00A4               	movwf	___aldiv@quotient+2
 10210  1674  3000               	movlw	0
 10211  1675  00A3               	movwf	___aldiv@quotient+1
 10212  1676  3000               	movlw	0
 10213  1677  00A2               	movwf	___aldiv@quotient
 10214  1678  0873               	movf	___aldiv@divisor+3,w
 10215  1679  0472               	iorwf	___aldiv@divisor+2,w
 10216  167A  0471               	iorwf	___aldiv@divisor+1,w
 10217  167B  0470               	iorwf	___aldiv@divisor,w
 10218  167C  1903               	skipnz
 10219  167D  2EB9               	goto	l2654
 10220  167E  01A0               	clrf	___aldiv@counter
 10221  167F  0AA0               	incf	___aldiv@counter,f
 10222  1680                     l2640:	
 10223  1680  1BF3               	btfsc	___aldiv@divisor+3,7
 10224  1681  2E8E               	goto	l2642
 10225  1682  3001               	movlw	1
 10226  1683                     u2665:	
 10227  1683  35F0               	lslf	___aldiv@divisor,f
 10228  1684  0DF1               	rlf	___aldiv@divisor+1,f
 10229  1685  0DF2               	rlf	___aldiv@divisor+2,f
 10230  1686  0DF3               	rlf	___aldiv@divisor+3,f
 10231  1687  0B89               	decfsz	9,f
 10232  1688  2E83               	goto	u2665
 10233  1689  3001               	movlw	1
 10234  168A  00F8               	movwf	??___aldiv
 10235  168B  0878               	movf	??___aldiv,w
 10236  168C  07A0               	addwf	___aldiv@counter,f
 10237  168D  2E80               	goto	l2640
 10238  168E                     l2642:	
 10239  168E  3001               	movlw	1
 10240  168F                     u2685:	
 10241  168F  35A2               	lslf	___aldiv@quotient,f
 10242  1690  0DA3               	rlf	___aldiv@quotient+1,f
 10243  1691  0DA4               	rlf	___aldiv@quotient+2,f
 10244  1692  0DA5               	rlf	___aldiv@quotient+3,f
 10245  1693  0B89               	decfsz	9,f
 10246  1694  2E8F               	goto	u2685
 10247  1695  0873               	movf	___aldiv@divisor+3,w
 10248  1696  0277               	subwf	___aldiv@dividend+3,w
 10249  1697  1D03               	skipz
 10250  1698  2EA3               	goto	u2695
 10251  1699  0872               	movf	___aldiv@divisor+2,w
 10252  169A  0276               	subwf	___aldiv@dividend+2,w
 10253  169B  1D03               	skipz
 10254  169C  2EA3               	goto	u2695
 10255  169D  0871               	movf	___aldiv@divisor+1,w
 10256  169E  0275               	subwf	___aldiv@dividend+1,w
 10257  169F  1D03               	skipz
 10258  16A0  2EA3               	goto	u2695
 10259  16A1  0870               	movf	___aldiv@divisor,w
 10260  16A2  0274               	subwf	___aldiv@dividend,w
 10261  16A3                     u2695:	
 10262  16A3  1C03               	skipc
 10263  16A4  2EAE               	goto	l2650
 10264  16A5  0870               	movf	___aldiv@divisor,w
 10265  16A6  02F4               	subwf	___aldiv@dividend,f
 10266  16A7  0871               	movf	___aldiv@divisor+1,w
 10267  16A8  3BF5               	subwfb	___aldiv@dividend+1,f
 10268  16A9  0872               	movf	___aldiv@divisor+2,w
 10269  16AA  3BF6               	subwfb	___aldiv@dividend+2,f
 10270  16AB  0873               	movf	___aldiv@divisor+3,w
 10271  16AC  3BF7               	subwfb	___aldiv@dividend+3,f
 10272  16AD  1422               	bsf	___aldiv@quotient,0
 10273  16AE                     l2650:	
 10274  16AE  3001               	movlw	1
 10275  16AF                     u2705:	
 10276  16AF  36F3               	lsrf	___aldiv@divisor+3,f
 10277  16B0  0CF2               	rrf	___aldiv@divisor+2,f
 10278  16B1  0CF1               	rrf	___aldiv@divisor+1,f
 10279  16B2  0CF0               	rrf	___aldiv@divisor,f
 10280  16B3  0B89               	decfsz	9,f
 10281  16B4  2EAF               	goto	u2705
 10282  16B5  3001               	movlw	1
 10283  16B6  02A0               	subwf	___aldiv@counter,f
 10284  16B7  1D03               	btfss	3,2
 10285  16B8  2E8E               	goto	l2642
 10286  16B9                     l2654:	
 10287  16B9  0821               	movf	___aldiv@sign,w
 10288  16BA  1903               	btfsc	3,2
 10289  16BB  2EC7               	goto	l2658
 10290  16BC  09A2               	comf	___aldiv@quotient,f
 10291  16BD  09A3               	comf	___aldiv@quotient+1,f
 10292  16BE  09A4               	comf	___aldiv@quotient+2,f
 10293  16BF  09A5               	comf	___aldiv@quotient+3,f
 10294  16C0  0AA2               	incf	___aldiv@quotient,f
 10295  16C1  1903               	skipnz
 10296  16C2  0AA3               	incf	___aldiv@quotient+1,f
 10297  16C3  1903               	skipnz
 10298  16C4  0AA4               	incf	___aldiv@quotient+2,f
 10299  16C5  1903               	skipnz
 10300  16C6  0AA5               	incf	___aldiv@quotient+3,f
 10301  16C7                     l2658:	
 10302  16C7  0825               	movf	___aldiv@quotient+3,w
 10303  16C8  00F3               	movwf	?___aldiv+3
 10304  16C9  0824               	movf	___aldiv@quotient+2,w
 10305  16CA  00F2               	movwf	?___aldiv+2
 10306  16CB  0823               	movf	___aldiv@quotient+1,w
 10307  16CC  00F1               	movwf	?___aldiv+1
 10308  16CD  0822               	movf	___aldiv@quotient,w
 10309  16CE  00F0               	movwf	?___aldiv
 10310  16CF  0008               	return
 10311  16D0                     __end_of___aldiv:	
 10312                           
 10313                           	psect	text11
 10314  0947                     __ptext11:	
 10315 ;; *************** function _readButton *****************
 10316 ;; Defined at:
 10317 ;;		line 9 in file "buttons.c"
 10318 ;; Parameters:    Size  Location     Type
 10319 ;;		None
 10320 ;; Auto vars:     Size  Location     Type
 10321 ;;		None
 10322 ;; Return value:  Size  Location     Type
 10323 ;;                  1    wreg      unsigned char 
 10324 ;; Registers used:
 10325 ;;		wreg, status,2, status,0, pclath, cstack
 10326 ;; Tracked objects:
 10327 ;;		On entry : 0/0
 10328 ;;		On exit  : 0/0
 10329 ;;		Unchanged: 0/0
 10330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10331 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10332 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10333 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10334 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10335 ;;Total ram usage:        2 bytes
 10336 ;; Hardware stack levels used:    1
 10337 ;; Hardware stack levels required when called:    1
 10338 ;; This function calls:
 10339 ;;		_ADCRead
 10340 ;; This function is called by:
 10341 ;;		_main
 10342 ;; This function uses a non-reentrant model
 10343 ;;
 10344                           
 10345                           
 10346                           ;psect for function _readButton
 10347  0947                     _readButton:	
 10348                           
 10349                           ;buttons.c: 11: readButtons = ADCRead(11);
 10350                           
 10351                           ;incstack = 0
 10352                           ; Regs used in _readButton: [wreg+status,2+status,0+pclath+cstack]
 10353  0947  300B               	movlw	11
 10354  0948  3191  21BF  3189   	fcall	_ADCRead
 10355  094B  0871               	movf	?_ADCRead+1,w
 10356  094C  0021               	movlb	1	; select bank1
 10357  094D  00C5               	movwf	(_readButtons+1)^(0+128)
 10358  094E  0870               	movf	?_ADCRead,w
 10359  094F  00C4               	movwf	_readButtons^(0+128)
 10360                           
 10361                           ;buttons.c: 13: if(readButtons >= 425 && readButtons < 485)
 10362  0950  0845               	movf	(_readButtons+1)^(0+128),w
 10363  0951  3A80               	xorlw	128
 10364  0952  00F4               	movwf	??_readButton
 10365  0953  3081               	movlw	129
 10366  0954  0274               	subwf	??_readButton,w
 10367  0955  1D03               	skipz
 10368  0956  2959               	goto	u3155
 10369  0957  30A9               	movlw	169
 10370  0958  0244               	subwf	_readButtons^(0+128),w
 10371  0959                     u3155:	
 10372  0959  1C03               	skipc
 10373  095A  296B               	goto	l2848
 10374  095B  0021               	movlb	1	; select bank1
 10375  095C  0845               	movf	(_readButtons+1)^(0+128),w
 10376  095D  3A80               	xorlw	128
 10377  095E  00F4               	movwf	??_readButton
 10378  095F  3081               	movlw	129
 10379  0960  0274               	subwf	??_readButton,w
 10380  0961  1D03               	skipz
 10381  0962  2965               	goto	u3165
 10382  0963  30E5               	movlw	229
 10383  0964  0244               	subwf	_readButtons^(0+128),w
 10384  0965                     u3165:	
 10385  0965  1803               	skipnc
 10386  0966  296B               	goto	l2848
 10387                           
 10388                           ;buttons.c: 14: {
 10389                           ;buttons.c: 15: button = 1;
 10390  0967  0020               	movlb	0	; select bank0
 10391  0968  01EB               	clrf	_button
 10392  0969  0AEB               	incf	_button,f
 10393                           
 10394                           ;buttons.c: 16: }
 10395  096A  2999               	goto	l2860
 10396  096B                     l2848:	
 10397                           
 10398                           ;buttons.c: 18: else if(readButtons >= 615 && readButtons < 690)
 10399  096B  0021               	movlb	1	; select bank1
 10400  096C  0845               	movf	(_readButtons+1)^(0+128),w
 10401  096D  3A80               	xorlw	128
 10402  096E  00F4               	movwf	??_readButton
 10403  096F  3082               	movlw	130
 10404  0970  0274               	subwf	??_readButton,w
 10405  0971  1D03               	skipz
 10406  0972  2975               	goto	u3175
 10407  0973  3067               	movlw	103
 10408  0974  0244               	subwf	_readButtons^(0+128),w
 10409  0975                     u3175:	
 10410  0975  1C03               	skipc
 10411  0976  2985               	goto	l2854
 10412  0977  0021               	movlb	1	; select bank1
 10413  0978  0845               	movf	(_readButtons+1)^(0+128),w
 10414  0979  3A80               	xorlw	128
 10415  097A  00F4               	movwf	??_readButton
 10416  097B  3082               	movlw	130
 10417  097C  0274               	subwf	??_readButton,w
 10418  097D  1D03               	skipz
 10419  097E  2981               	goto	u3185
 10420  097F  30B2               	movlw	178
 10421  0980  0244               	subwf	_readButtons^(0+128),w
 10422  0981                     u3185:	
 10423  0981  1803               	skipnc
 10424  0982  2985               	goto	l2854
 10425                           
 10426                           ;buttons.c: 19: {
 10427                           ;buttons.c: 20: button = 2;
 10428  0983  3002               	movlw	2
 10429  0984  2992               	goto	L6
 10430  0985                     l2854:	
 10431                           ;buttons.c: 21: }
 10432                           
 10433                           
 10434                           ;buttons.c: 23: else if(readButtons > 800)
 10435  0985  0021               	movlb	1	; select bank1
 10436  0986  0845               	movf	(_readButtons+1)^(0+128),w
 10437  0987  3A80               	xorlw	128
 10438  0988  00F4               	movwf	??_readButton
 10439  0989  3083               	movlw	131
 10440  098A  0274               	subwf	??_readButton,w
 10441  098B  1D03               	skipz
 10442  098C  298F               	goto	u3195
 10443  098D  3021               	movlw	33
 10444  098E  0244               	subwf	_readButtons^(0+128),w
 10445  098F                     u3195:	
 10446  098F  1C03               	skipc
 10447  0990  2997               	goto	l2858
 10448                           
 10449                           ;buttons.c: 24: {
 10450                           ;buttons.c: 25: button = 3;
 10451  0991  3003               	movlw	3
 10452  0992                     L6:	
 10453  0992  00F4               	movwf	??_readButton
 10454  0993  0874               	movf	??_readButton,w
 10455  0994  0020               	movlb	0	; select bank0
 10456  0995  00EB               	movwf	_button
 10457                           
 10458                           ;buttons.c: 26: }
 10459  0996  2999               	goto	l2860
 10460  0997                     l2858:	
 10461                           
 10462                           ;buttons.c: 28: else
 10463                           ;buttons.c: 29: {
 10464                           ;buttons.c: 30: button = 0;
 10465  0997  0020               	movlb	0	; select bank0
 10466  0998  01EB               	clrf	_button
 10467  0999                     l2860:	
 10468                           
 10469                           ;buttons.c: 31: }
 10470                           ;buttons.c: 33: if (button != 0)
 10471  0999  086B               	movf	_button,w
 10472  099A  1903               	btfsc	3,2
 10473  099B  29CA               	goto	l2880
 10474                           
 10475                           ;buttons.c: 34: {
 10476                           ;buttons.c: 35: if (button != lastButton)
 10477  099C  086B               	movf	_button,w
 10478  099D  066A               	xorwf	_lastButton,w
 10479  099E  1903               	skipnz
 10480  099F  29A5               	goto	l2868
 10481                           
 10482                           ;buttons.c: 36: {
 10483                           ;buttons.c: 37: lastButton = button;
 10484  09A0  086B               	movf	_button,w
 10485  09A1  00F4               	movwf	??_readButton
 10486  09A2  0874               	movf	??_readButton,w
 10487  09A3  00EA               	movwf	_lastButton
 10488  09A4  29CA               	goto	l2880
 10489  09A5                     l2868:	
 10490                           ;buttons.c: 39: }
 10491                           
 10492                           ;buttons.c: 38: j = 0;
 10493                           
 10494                           
 10495                           ;buttons.c: 40: else
 10496                           ;buttons.c: 41: {
 10497                           ;buttons.c: 42: j += 1;
 10498  09A5  3001               	movlw	1
 10499  09A6  00F4               	movwf	??_readButton
 10500  09A7  0874               	movf	??_readButton,w
 10501  09A8  0021               	movlb	1	; select bank1
 10502  09A9  07C8               	addwf	_j^(0+128),f
 10503                           
 10504                           ;buttons.c: 44: if(j == 1)
 10505  09AA  0348               	decf	_j^(0+128),w
 10506  09AB  1D03               	btfss	3,2
 10507  09AC  29B0               	goto	l2874
 10508                           
 10509                           ;buttons.c: 45: {
 10510                           ;buttons.c: 46: return (lastButton);
 10511  09AD  0020               	movlb	0	; select bank0
 10512  09AE  086A               	movf	_lastButton,w
 10513  09AF  0008               	return
 10514  09B0                     l2874:	
 10515                           
 10516                           ;buttons.c: 47: }
 10517                           ;buttons.c: 49: if (j >10)
 10518  09B0  0021               	movlb	1	; select bank1
 10519  09B1  0848               	movf	_j^(0+128),w
 10520  09B2  3A80               	xorlw	128
 10521  09B3  3E75               	addlw	-139
 10522  09B4  1C03               	skipc
 10523  09B5  29CC               	goto	l2882
 10524                           
 10525                           ;buttons.c: 50: {
 10526                           ;buttons.c: 51: _delay((unsigned long)((25)*(32000000/4000.0)));
 10527  09B6  3002               	movlw	2
 10528  09B7  00F5               	movwf	??_readButton+1
 10529  09B8  3004               	movlw	4
 10530  09B9  00F4               	movwf	??_readButton
 10531  09BA  30BA               	movlw	186
 10532  09BB                     u3907:	
 10533  09BB  0B89               	decfsz	9,f
 10534  09BC  29BB               	goto	u3907
 10535  09BD  0BF4               	decfsz	??_readButton,f
 10536  09BE  29BB               	goto	u3907
 10537  09BF  0BF5               	decfsz	??_readButton+1,f
 10538  09C0  29BB               	goto	u3907
 10539  09C1  3200               	nop2
 10540                           
 10541                           ;buttons.c: 52: j = 10;
 10542  09C2  300A               	movlw	10
 10543  09C3  00F4               	movwf	??_readButton
 10544  09C4  0874               	movf	??_readButton,w
 10545  09C5  0021               	movlb	1	; select bank1
 10546  09C6  00C8               	movwf	_j^(0+128)
 10547                           
 10548                           ;buttons.c: 53: return (lastButton);
 10549  09C7  0020               	movlb	0	; select bank0
 10550  09C8  086A               	movf	_lastButton,w
 10551  09C9  0008               	return
 10552  09CA                     l2880:	
 10553                           ;buttons.c: 54: }
 10554                           ;buttons.c: 55: }
 10555                           ;buttons.c: 56: goto end;
 10556                           
 10557                           
 10558                           ;buttons.c: 57: }
 10559                           ;buttons.c: 59: j = 0;
 10560  09CA  0021               	movlb	1	; select bank1
 10561  09CB  01C8               	clrf	_j^(0+128)
 10562  09CC                     l2882:	
 10563                           ;buttons.c: 61: end:
 10564                           
 10565                           
 10566                           ;buttons.c: 63: return (0);
 10567  09CC  3000               	movlw	0
 10568  09CD  0008               	return
 10569  09CE                     __end_of_readButton:	
 10570                           
 10571                           	psect	text12
 10572  11BF                     __ptext12:	
 10573 ;; *************** function _ADCRead *****************
 10574 ;; Defined at:
 10575 ;;		line 21 in file "adc.c"
 10576 ;; Parameters:    Size  Location     Type
 10577 ;;  channel         1    wreg     enum E14259
 10578 ;; Auto vars:     Size  Location     Type
 10579 ;;  channel         1    3[COMMON] enum E14259
 10580 ;; Return value:  Size  Location     Type
 10581 ;;                  2    0[COMMON] int 
 10582 ;; Registers used:
 10583 ;;		wreg
 10584 ;; Tracked objects:
 10585 ;;		On entry : 0/0
 10586 ;;		On exit  : 0/0
 10587 ;;		Unchanged: 0/0
 10588 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10589 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10590 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10591 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10592 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10593 ;;Total ram usage:        4 bytes
 10594 ;; Hardware stack levels used:    1
 10595 ;; This function calls:
 10596 ;;		Nothing
 10597 ;; This function is called by:
 10598 ;;		_readIAnalog
 10599 ;;		_readButton
 10600 ;;		_main
 10601 ;; This function uses a non-reentrant model
 10602 ;;
 10603                           
 10604                           
 10605                           ;psect for function _ADCRead
 10606  11BF                     _ADCRead:	
 10607                           
 10608                           ;incstack = 0
 10609                           ; Regs used in _ADCRead: [wreg]
 10610                           ;ADCRead@channel stored from wreg
 10611  11BF  00F3               	movwf	ADCRead@channel
 10612                           
 10613                           ;adc.c: 23: ADPCH = channel_VSS;
 10614  11C0  303C               	movlw	60
 10615  11C1  0021               	movlb	1	; select bank1
 10616  11C2  009E               	movwf	30	;volatile
 10617                           
 10618                           ;adc.c: 25: ADCON0bits.ADON = 1;
 10619  11C3  1793               	bsf	19,7	;volatile
 10620                           
 10621                           ;adc.c: 27: ADCON0bits.ADCONT = 0;
 10622  11C4  1313               	bcf	19,6	;volatile
 10623                           
 10624                           ;adc.c: 29: ADCON0bits.ADGO = 1;
 10625  11C5  1413               	bsf	19,0	;volatile
 10626  11C6                     l57:	
 10627                           ;adc.c: 32: {
 10628                           
 10629                           ;adc.c: 31: while(ADCON0bits.ADGO)
 10630                           
 10631  11C6  1813               	btfsc	19,0	;volatile
 10632  11C7  29C6               	goto	l57
 10633                           
 10634                           ;adc.c: 33: }
 10635                           ;adc.c: 35: ADPCH = channel;
 10636  11C8  0873               	movf	ADCRead@channel,w
 10637  11C9  009E               	movwf	30	;volatile
 10638                           
 10639                           ;adc.c: 37: ADCON0bits.ADON = 1;
 10640  11CA  1793               	bsf	19,7	;volatile
 10641                           
 10642                           ;adc.c: 39: ADCON0bits.ADCONT = 0;
 10643  11CB  1313               	bcf	19,6	;volatile
 10644                           
 10645                           ;adc.c: 41: ADCON0bits.ADGO = 1;
 10646  11CC  1413               	bsf	19,0	;volatile
 10647  11CD                     l60:	
 10648                           ;adc.c: 44: {
 10649                           
 10650                           ;adc.c: 43: while(ADCON0bits.ADGO)
 10651                           
 10652  11CD  1813               	btfsc	19,0	;volatile
 10653  11CE  29CD               	goto	l60
 10654                           
 10655                           ;adc.c: 45: }
 10656                           ;adc.c: 47: return ((ADRESH<<8)+ADRESL);
 10657  11CF  080D               	movf	13,w	;volatile
 10658  11D0  00F1               	movwf	?_ADCRead+1
 10659  11D1  080C               	movf	12,w	;volatile
 10660  11D2  00F0               	movwf	?_ADCRead
 10661  11D3  0008               	return
 10662  11D4                     __end_of_ADCRead:	
 10663                           
 10664                           	psect	text13
 10665  0BEB                     __ptext13:	
 10666 ;; *************** function _cc_cv_mode *****************
 10667 ;; Defined at:
 10668 ;;		line 90 in file "battery_charger.c"
 10669 ;; Parameters:    Size  Location     Type
 10670 ;;  z               1    wreg     unsigned char 
 10671 ;; Auto vars:     Size  Location     Type
 10672 ;;  z               1    5[COMMON] unsigned char 
 10673 ;; Return value:  Size  Location     Type
 10674 ;;                  1    wreg      void 
 10675 ;; Registers used:
 10676 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10677 ;; Tracked objects:
 10678 ;;		On entry : 0/0
 10679 ;;		On exit  : 0/0
 10680 ;;		Unchanged: 0/0
 10681 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10682 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10683 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10684 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10685 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10686 ;;Total ram usage:        6 bytes
 10687 ;; Hardware stack levels used:    1
 10688 ;; This function calls:
 10689 ;;		Nothing
 10690 ;; This function is called by:
 10691 ;;		_main
 10692 ;; This function uses a non-reentrant model
 10693 ;;
 10694                           
 10695                           
 10696                           ;psect for function _cc_cv_mode
 10697  0BEB                     _cc_cv_mode:	
 10698                           
 10699                           ;incstack = 0
 10700                           ; Regs used in _cc_cv_mode: [wreg+fsr1l+fsr1h+status,2+status,0]
 10701                           ;cc_cv_mode@z stored from wreg
 10702  0BEB  00F5               	movwf	cc_cv_mode@z
 10703                           
 10704                           ;battery_charger.c: 92: if(voltage[z]>Vref[z])
 10705  0BEC  3575               	lslf	cc_cv_mode@z,w
 10706  0BED  3EA8               	addlw	(low (_voltage| 0))& (0+255)
 10707  0BEE  0086               	movwf	6
 10708  0BEF  0187               	clrf	7
 10709  0BF0  3F40               	moviw [0]fsr1
 10710  0BF1  00F0               	movwf	??_cc_cv_mode
 10711  0BF2  3F41               	moviw [1]fsr1
 10712  0BF3  00F1               	movwf	??_cc_cv_mode+1
 10713  0BF4  3575               	lslf	cc_cv_mode@z,w
 10714  0BF5  3EB8               	addlw	(low (_Vref| 0))& (0+255)
 10715  0BF6  0086               	movwf	6
 10716  0BF7  0187               	clrf	7
 10717  0BF8  3F40               	moviw [0]fsr1
 10718  0BF9  00F2               	movwf	??_cc_cv_mode+2
 10719  0BFA  3F41               	moviw [1]fsr1
 10720  0BFB  00F3               	movwf	??_cc_cv_mode+3
 10721  0BFC  0873               	movf	??_cc_cv_mode+3,w
 10722  0BFD  3A80               	xorlw	128
 10723  0BFE  00F4               	movwf	??_cc_cv_mode+4
 10724  0BFF  0871               	movf	??_cc_cv_mode+1,w
 10725  0C00  3A80               	xorlw	128
 10726  0C01  0274               	subwf	??_cc_cv_mode+4,w
 10727  0C02  1D03               	skipz
 10728  0C03  2C06               	goto	u3505
 10729  0C04  0870               	movf	??_cc_cv_mode,w
 10730  0C05  0272               	subwf	??_cc_cv_mode+2,w
 10731  0C06                     u3505:	
 10732  0C06  1803               	skipnc
 10733  0C07  2C34               	goto	l3050
 10734                           
 10735                           ;battery_charger.c: 93: {
 10736                           ;battery_charger.c: 94: if(VHoldMode[z]<12)VHoldMode[z]+=1;
 10737  0C08  0875               	movf	cc_cv_mode@z,w
 10738  0C09  3EC2               	addlw	(low (_VHoldMode| 0))& (0+255)
 10739  0C0A  0086               	movwf	6
 10740  0C0B  0187               	clrf	7
 10741  0C0C  0801               	movf	1,w
 10742  0C0D  3A80               	xorlw	128
 10743  0C0E  3E74               	addlw	-140
 10744  0C0F  1803               	skipnc
 10745  0C10  2C19               	goto	l485
 10746  0C11  3001               	movlw	1
 10747  0C12  00F0               	movwf	??_cc_cv_mode
 10748  0C13  0875               	movf	cc_cv_mode@z,w
 10749  0C14  3EC2               	addlw	(low (_VHoldMode| 0))& (0+255)
 10750  0C15  0086               	movwf	6
 10751  0C16  0187               	clrf	7
 10752  0C17  0870               	movf	??_cc_cv_mode,w
 10753  0C18  0781               	addwf	1,f
 10754  0C19                     l485:	
 10755                           
 10756                           ;battery_charger.c: 96: if(cc_cv[z])
 10757  0C19  0875               	movf	cc_cv_mode@z,w
 10758  0C1A  3EBC               	addlw	(low (_cc_cv| 0))& (0+255)
 10759  0C1B  0086               	movwf	6
 10760  0C1C  0187               	clrf	7
 10761  0C1D  0801               	movf	1,w
 10762  0C1E  1903               	btfsc	3,2
 10763  0C1F  2C27               	goto	l3046
 10764                           
 10765                           ;battery_charger.c: 97: {
 10766                           ;battery_charger.c: 98: cc_cv[z]-=1;
 10767  0C20  0875               	movf	cc_cv_mode@z,w
 10768  0C21  3EBC               	addlw	(low (_cc_cv| 0))& (0+255)
 10769  0C22  0086               	movwf	6
 10770  0C23  0187               	clrf	7
 10771  0C24  3001               	movlw	1
 10772  0C25  0281               	subwf	1,f
 10773                           
 10774                           ;battery_charger.c: 99: }
 10775  0C26  2C77               	goto	l3056
 10776  0C27                     l3046:	
 10777                           
 10778                           ;battery_charger.c: 100: else
 10779                           ;battery_charger.c: 101: {
 10780                           ;battery_charger.c: 102: if(Imode[z])
 10781  0C27  0875               	movf	cc_cv_mode@z,w
 10782  0C28  3EEC               	addlw	(low (_Imode| 0))& (0+255)
 10783  0C29  0086               	movwf	6
 10784  0C2A  0187               	clrf	7
 10785  0C2B  0801               	movf	1,w
 10786  0C2C  1903               	btfsc	3,2
 10787  0C2D  2C77               	goto	l3056
 10788                           
 10789                           ;battery_charger.c: 103: {
 10790                           ;battery_charger.c: 104: Imode[z]=0;
 10791  0C2E  0875               	movf	cc_cv_mode@z,w
 10792  0C2F  3EEC               	addlw	(low (_Imode| 0))& (0+255)
 10793  0C30  0086               	movwf	6
 10794  0C31  0187               	clrf	7
 10795  0C32  0181               	clrf	1
 10796                           
 10797                           ;battery_charger.c: 105: }
 10798                           ;battery_charger.c: 106: }
 10799                           ;battery_charger.c: 107: }
 10800  0C33  2C77               	goto	l3056
 10801  0C34                     l3050:	
 10802                           
 10803                           ;battery_charger.c: 108: else if(voltage[z]<Vref[z])
 10804  0C34  3575               	lslf	cc_cv_mode@z,w
 10805  0C35  3EB8               	addlw	(low (_Vref| 0))& (0+255)
 10806  0C36  0086               	movwf	6
 10807  0C37  0187               	clrf	7
 10808  0C38  3F40               	moviw [0]fsr1
 10809  0C39  00F0               	movwf	??_cc_cv_mode
 10810  0C3A  3F41               	moviw [1]fsr1
 10811  0C3B  00F1               	movwf	??_cc_cv_mode+1
 10812  0C3C  3575               	lslf	cc_cv_mode@z,w
 10813  0C3D  3EA8               	addlw	(low (_voltage| 0))& (0+255)
 10814  0C3E  0086               	movwf	6
 10815  0C3F  0187               	clrf	7
 10816  0C40  3F40               	moviw [0]fsr1
 10817  0C41  00F2               	movwf	??_cc_cv_mode+2
 10818  0C42  3F41               	moviw [1]fsr1
 10819  0C43  00F3               	movwf	??_cc_cv_mode+3
 10820  0C44  0873               	movf	??_cc_cv_mode+3,w
 10821  0C45  3A80               	xorlw	128
 10822  0C46  00F4               	movwf	??_cc_cv_mode+4
 10823  0C47  0871               	movf	??_cc_cv_mode+1,w
 10824  0C48  3A80               	xorlw	128
 10825  0C49  0274               	subwf	??_cc_cv_mode+4,w
 10826  0C4A  1D03               	skipz
 10827  0C4B  2C4E               	goto	u3545
 10828  0C4C  0870               	movf	??_cc_cv_mode,w
 10829  0C4D  0272               	subwf	??_cc_cv_mode+2,w
 10830  0C4E                     u3545:	
 10831  0C4E  1803               	skipnc
 10832  0C4F  2C77               	goto	l3056
 10833                           
 10834                           ;battery_charger.c: 109: {
 10835                           ;battery_charger.c: 110: VHoldMode[z]-=1;
 10836  0C50  30FF               	movlw	255
 10837  0C51  00F0               	movwf	??_cc_cv_mode
 10838  0C52  0875               	movf	cc_cv_mode@z,w
 10839  0C53  3EC2               	addlw	(low (_VHoldMode| 0))& (0+255)
 10840  0C54  0086               	movwf	6
 10841  0C55  0187               	clrf	7
 10842  0C56  0870               	movf	??_cc_cv_mode,w
 10843  0C57  0781               	addwf	1,f
 10844                           
 10845                           ;battery_charger.c: 111: if(VHoldMode[z]<(10*-1))
 10846  0C58  0875               	movf	cc_cv_mode@z,w
 10847  0C59  3EC2               	addlw	(low (_VHoldMode| 0))& (0+255)
 10848  0C5A  0086               	movwf	6
 10849  0C5B  0187               	clrf	7
 10850  0C5C  0801               	movf	1,w
 10851  0C5D  3A80               	xorlw	128
 10852  0C5E  3E8A               	addlw	138
 10853  0C5F  1803               	skipnc
 10854  0C60  2C77               	goto	l3056
 10855                           
 10856                           ;battery_charger.c: 112: {
 10857                           ;battery_charger.c: 113: Imode[z]=1;
 10858  0C61  0875               	movf	cc_cv_mode@z,w
 10859  0C62  3EEC               	addlw	(low (_Imode| 0))& (0+255)
 10860  0C63  0086               	movwf	6
 10861  0C64  0187               	clrf	7
 10862  0C65  0181               	clrf	1
 10863  0C66  0A81               	incf	1,f
 10864                           
 10865                           ;battery_charger.c: 114: cc_cv[z]=(10*2);
 10866  0C67  3014               	movlw	20
 10867  0C68  00F0               	movwf	??_cc_cv_mode
 10868  0C69  0875               	movf	cc_cv_mode@z,w
 10869  0C6A  3EBC               	addlw	(low (_cc_cv| 0))& (0+255)
 10870  0C6B  0086               	movwf	6
 10871  0C6C  0187               	clrf	7
 10872  0C6D  0870               	movf	??_cc_cv_mode,w
 10873  0C6E  0081               	movwf	1
 10874                           
 10875                           ;battery_charger.c: 115: VHoldMode[z]=(10*-1);
 10876  0C6F  30F6               	movlw	246
 10877  0C70  00F0               	movwf	??_cc_cv_mode
 10878  0C71  0875               	movf	cc_cv_mode@z,w
 10879  0C72  3EC2               	addlw	(low (_VHoldMode| 0))& (0+255)
 10880  0C73  0086               	movwf	6
 10881  0C74  0187               	clrf	7
 10882  0C75  0870               	movf	??_cc_cv_mode,w
 10883  0C76  0081               	movwf	1
 10884  0C77                     l3056:	
 10885                           ;battery_charger.c: 116: }
 10886                           ;battery_charger.c: 117: }
 10887                           
 10888                           
 10889                           ;battery_charger.c: 120: if(current[z]>Iref[z])
 10890  0C77  3575               	lslf	cc_cv_mode@z,w
 10891  0C78  3EA0               	addlw	(low (_current| 0))& (0+255)
 10892  0C79  0086               	movwf	6
 10893  0C7A  0187               	clrf	7
 10894  0C7B  3F40               	moviw [0]fsr1
 10895  0C7C  00F0               	movwf	??_cc_cv_mode
 10896  0C7D  3F41               	moviw [1]fsr1
 10897  0C7E  00F1               	movwf	??_cc_cv_mode+1
 10898  0C7F  3575               	lslf	cc_cv_mode@z,w
 10899  0C80  3EB4               	addlw	(low (_Iref| 0))& (0+255)
 10900  0C81  0086               	movwf	6
 10901  0C82  0187               	clrf	7
 10902  0C83  3F40               	moviw [0]fsr1
 10903  0C84  00F2               	movwf	??_cc_cv_mode+2
 10904  0C85  3F41               	moviw [1]fsr1
 10905  0C86  00F3               	movwf	??_cc_cv_mode+3
 10906  0C87  0873               	movf	??_cc_cv_mode+3,w
 10907  0C88  3A80               	xorlw	128
 10908  0C89  00F4               	movwf	??_cc_cv_mode+4
 10909  0C8A  0871               	movf	??_cc_cv_mode+1,w
 10910  0C8B  3A80               	xorlw	128
 10911  0C8C  0274               	subwf	??_cc_cv_mode+4,w
 10912  0C8D  1D03               	skipz
 10913  0C8E  2C91               	goto	u3565
 10914  0C8F  0870               	movf	??_cc_cv_mode,w
 10915  0C90  0272               	subwf	??_cc_cv_mode+2,w
 10916  0C91                     u3565:	
 10917  0C91  1803               	skipnc
 10918  0C92  0008               	return
 10919                           
 10920                           ;battery_charger.c: 121: {
 10921                           ;battery_charger.c: 122: if(!Imode[z])
 10922  0C93  0875               	movf	cc_cv_mode@z,w
 10923  0C94  3EEC               	addlw	(low (_Imode| 0))& (0+255)
 10924  0C95  0086               	movwf	6
 10925  0C96  0187               	clrf	7
 10926  0C97  0801               	movf	1,w
 10927  0C98  1D03               	btfss	3,2
 10928  0C99  0008               	return
 10929                           
 10930                           ;battery_charger.c: 123: {
 10931                           ;battery_charger.c: 124: if(batteryState[z]==FLOAT)
 10932  0C9A  0875               	movf	cc_cv_mode@z,w
 10933  0C9B  3EC0               	addlw	(low (_batteryState| 0))& (0+255)
 10934  0C9C  0086               	movwf	6
 10935  0C9D  0187               	clrf	7
 10936  0C9E  3005               	movlw	5
 10937  0C9F  0601               	xorwf	1,w
 10938  0CA0  1D03               	btfss	3,2
 10939  0CA1  0008               	return
 10940                           
 10941                           ;battery_charger.c: 125: {
 10942                           ;battery_charger.c: 126: batteryState[z]=CHARGE;
 10943  0CA2  3004               	movlw	4
 10944  0CA3  00F0               	movwf	??_cc_cv_mode
 10945  0CA4  0875               	movf	cc_cv_mode@z,w
 10946  0CA5  3EC0               	addlw	(low (_batteryState| 0))& (0+255)
 10947  0CA6  0086               	movwf	6
 10948  0CA7  0187               	clrf	7
 10949  0CA8  0870               	movf	??_cc_cv_mode,w
 10950  0CA9  0081               	movwf	1
 10951                           
 10952                           ;battery_charger.c: 127: Vref[z]=1445;
 10953  0CAA  3575               	lslf	cc_cv_mode@z,w
 10954  0CAB  3EB8               	addlw	(low (_Vref| 0))& (0+255)
 10955  0CAC  0086               	movwf	6
 10956  0CAD  0187               	clrf	7
 10957  0CAE  30A5               	movlw	165
 10958  0CAF  3FC0               	movwi [0]fsr1
 10959  0CB0  3005               	movlw	5
 10960  0CB1  3FC1               	movwi [1]fsr1
 10961                           
 10962                           ;battery_charger.c: 128: Iref[z]=35;
 10963  0CB2  3575               	lslf	cc_cv_mode@z,w
 10964  0CB3  3EB4               	addlw	(low (_Iref| 0))& (0+255)
 10965  0CB4  0086               	movwf	6
 10966  0CB5  0187               	clrf	7
 10967  0CB6  3023               	movlw	35
 10968  0CB7  3FC0               	movwi [0]fsr1
 10969  0CB8  3000               	movlw	0
 10970  0CB9  3FC1               	movwi [1]fsr1
 10971                           
 10972                           ;battery_charger.c: 129: Imode[z]=1;
 10973  0CBA  0875               	movf	cc_cv_mode@z,w
 10974  0CBB  3EEC               	addlw	(low (_Imode| 0))& (0+255)
 10975  0CBC  0086               	movwf	6
 10976  0CBD  0187               	clrf	7
 10977  0CBE  0181               	clrf	1
 10978  0CBF  0A81               	incf	1,f
 10979                           
 10980                           ;battery_charger.c: 130: cc_cv[z]=10;
 10981  0CC0  300A               	movlw	10
 10982  0CC1  00F0               	movwf	??_cc_cv_mode
 10983  0CC2  0875               	movf	cc_cv_mode@z,w
 10984  0CC3  3EBC               	addlw	(low (_cc_cv| 0))& (0+255)
 10985  0CC4  0086               	movwf	6
 10986  0CC5  0187               	clrf	7
 10987  0CC6  0870               	movf	??_cc_cv_mode,w
 10988  0CC7  0081               	movwf	1
 10989  0CC8  0008               	return
 10990  0CC9                     __end_of_cc_cv_mode:	
 10991                           
 10992                           	psect	text14
 10993  1500                     __ptext14:	
 10994 ;; *************** function _calculateCurrent3 *****************
 10995 ;; Defined at:
 10996 ;;		line 405 in file "main.c"
 10997 ;; Parameters:    Size  Location     Type
 10998 ;;		None
 10999 ;; Auto vars:     Size  Location     Type
 11000 ;;		None
 11001 ;; Return value:  Size  Location     Type
 11002 ;;                  1    wreg      void 
 11003 ;; Registers used:
 11004 ;;		wreg, status,2, status,0, pclath, cstack
 11005 ;; Tracked objects:
 11006 ;;		On entry : 0/0
 11007 ;;		On exit  : 0/0
 11008 ;;		Unchanged: 0/0
 11009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11010 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11011 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11012 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11013 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11014 ;;Total ram usage:        3 bytes
 11015 ;; Hardware stack levels used:    1
 11016 ;; Hardware stack levels required when called:    2
 11017 ;; This function calls:
 11018 ;;		___awtoft
 11019 ;;		___ftdiv
 11020 ;;		___fttol
 11021 ;; This function is called by:
 11022 ;;		_main
 11023 ;; This function uses a non-reentrant model
 11024 ;;
 11025                           
 11026                           
 11027                           ;psect for function _calculateCurrent3
 11028  1500                     _calculateCurrent3:	
 11029                           
 11030                           ;main.c: 407: if(Ianalogs[3]-578<=0)
 11031                           
 11032                           ;incstack = 0
 11033                           ; Regs used in _calculateCurrent3: [wreg+status,2+status,0+pclath+cstack]
 11034  1500  0022               	movlb	2	; select bank2
 11035  1501  0836               	movf	(_Ianalogs^(0+256)+6),w
 11036  1502  3EBE               	addlw	190
 11037  1503  0020               	movlb	0	; select bank0
 11038  1504  00BE               	movwf	??_calculateCurrent3
 11039  1505  30FD               	movlw	253
 11040  1506  0022               	movlb	2	; select bank2
 11041  1507  3D37               	addwfc	((_Ianalogs+1)^(0+256)+6),w
 11042  1508  0020               	movlb	0	; select bank0
 11043  1509  00BF               	movwf	??_calculateCurrent3+1
 11044  150A  083F               	movf	??_calculateCurrent3+1,w
 11045  150B  3A80               	xorlw	128
 11046  150C  00C0               	movwf	??_calculateCurrent3+2
 11047  150D  3080               	movlw	128
 11048  150E  0240               	subwf	??_calculateCurrent3+2,w
 11049  150F  1D03               	skipz
 11050  1510  2D13               	goto	u3385
 11051  1511  3001               	movlw	1
 11052  1512  023E               	subwf	??_calculateCurrent3,w
 11053  1513                     u3385:	
 11054  1513  1803               	skipnc
 11055  1514  2D19               	goto	l2992
 11056                           
 11057                           ;main.c: 408: {
 11058                           ;main.c: 409: current[3]=0;
 11059  1515  0021               	movlb	1	; select bank1
 11060  1516  01A6               	clrf	(_current^(0+128)+6)
 11061  1517  01A7               	clrf	((_current+1)^(0+128)+6)
 11062                           
 11063                           ;main.c: 410: }
 11064  1518  0008               	return
 11065  1519                     l2992:	
 11066                           
 11067                           ;main.c: 411: else
 11068                           ;main.c: 412: {
 11069                           ;main.c: 413: current[3]=(int16_t)((Ianalogs[3]-578)/3.2323);
 11070  1519  0022               	movlb	2	; select bank2
 11071  151A  0836               	movf	(_Ianalogs^(0+256)+6),w
 11072  151B  3EBE               	addlw	190
 11073  151C  00F8               	movwf	___awtoft@c
 11074  151D  30FD               	movlw	253
 11075  151E  3D37               	addwfc	((_Ianalogs+1)^(0+256)+6),w
 11076  151F  00F9               	movwf	___awtoft@c+1
 11077  1520  3192  2245  3195   	fcall	___awtoft
 11078  1523  0878               	movf	?___awtoft,w
 11079  1524  0020               	movlb	0	; select bank0
 11080  1525  00A3               	movwf	___ftdiv@f1
 11081  1526  0879               	movf	?___awtoft+1,w
 11082  1527  00A4               	movwf	___ftdiv@f1+1
 11083  1528  087A               	movf	?___awtoft+2,w
 11084  1529  00A5               	movwf	___ftdiv@f1+2
 11085  152A  30DE               	movlw	222
 11086  152B  00A0               	movwf	___ftdiv@f2
 11087  152C  304E               	movlw	78
 11088  152D  00A1               	movwf	___ftdiv@f2+1
 11089  152E  3040               	movlw	64
 11090  152F  00A2               	movwf	___ftdiv@f2+2
 11091  1530  3197  2757  3195   	fcall	___ftdiv
 11092  1533  0020               	movlb	0	; select bank0
 11093  1534  0820               	movf	?___ftdiv,w
 11094  1535  00B0               	movwf	___fttol@f1
 11095  1536  0821               	movf	?___ftdiv+1,w
 11096  1537  00B1               	movwf	___fttol@f1+1
 11097  1538  0822               	movf	?___ftdiv+2,w
 11098  1539  00B2               	movwf	___fttol@f1+2
 11099  153A  3196  26D0         	fcall	___fttol
 11100  153C  0020               	movlb	0	; select bank0
 11101  153D  0831               	movf	?___fttol+1,w
 11102  153E  0021               	movlb	1	; select bank1
 11103  153F  00A7               	movwf	((_current+1)^(0+128)+6)
 11104  1540  0020               	movlb	0	; select bank0
 11105  1541  0830               	movf	?___fttol,w
 11106  1542  0021               	movlb	1	; select bank1
 11107  1543  00A6               	movwf	(_current^(0+128)+6)
 11108  1544  0008               	return
 11109  1545                     __end_of_calculateCurrent3:	
 11110                           
 11111                           	psect	text15
 11112  14BB                     __ptext15:	
 11113 ;; *************** function _calculateCurrent2 *****************
 11114 ;; Defined at:
 11115 ;;		line 392 in file "main.c"
 11116 ;; Parameters:    Size  Location     Type
 11117 ;;		None
 11118 ;; Auto vars:     Size  Location     Type
 11119 ;;		None
 11120 ;; Return value:  Size  Location     Type
 11121 ;;                  1    wreg      void 
 11122 ;; Registers used:
 11123 ;;		wreg, status,2, status,0, pclath, cstack
 11124 ;; Tracked objects:
 11125 ;;		On entry : 0/0
 11126 ;;		On exit  : 0/0
 11127 ;;		Unchanged: 0/0
 11128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11129 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11130 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11131 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11132 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11133 ;;Total ram usage:        3 bytes
 11134 ;; Hardware stack levels used:    1
 11135 ;; Hardware stack levels required when called:    2
 11136 ;; This function calls:
 11137 ;;		___awtoft
 11138 ;;		___ftdiv
 11139 ;;		___fttol
 11140 ;; This function is called by:
 11141 ;;		_main
 11142 ;; This function uses a non-reentrant model
 11143 ;;
 11144                           
 11145                           
 11146                           ;psect for function _calculateCurrent2
 11147  14BB                     _calculateCurrent2:	
 11148                           
 11149                           ;main.c: 394: if(Ianalogs[2]-565<=0)
 11150                           
 11151                           ;incstack = 0
 11152                           ; Regs used in _calculateCurrent2: [wreg+status,2+status,0+pclath+cstack]
 11153  14BB  0022               	movlb	2	; select bank2
 11154  14BC  0834               	movf	(_Ianalogs^(0+256)+4),w
 11155  14BD  3ECB               	addlw	203
 11156  14BE  0020               	movlb	0	; select bank0
 11157  14BF  00BE               	movwf	??_calculateCurrent2
 11158  14C0  30FD               	movlw	253
 11159  14C1  0022               	movlb	2	; select bank2
 11160  14C2  3D35               	addwfc	((_Ianalogs+1)^(0+256)+4),w
 11161  14C3  0020               	movlb	0	; select bank0
 11162  14C4  00BF               	movwf	??_calculateCurrent2+1
 11163  14C5  083F               	movf	??_calculateCurrent2+1,w
 11164  14C6  3A80               	xorlw	128
 11165  14C7  00C0               	movwf	??_calculateCurrent2+2
 11166  14C8  3080               	movlw	128
 11167  14C9  0240               	subwf	??_calculateCurrent2+2,w
 11168  14CA  1D03               	skipz
 11169  14CB  2CCE               	goto	u3375
 11170  14CC  3001               	movlw	1
 11171  14CD  023E               	subwf	??_calculateCurrent2,w
 11172  14CE                     u3375:	
 11173  14CE  1803               	skipnc
 11174  14CF  2CD4               	goto	l2986
 11175                           
 11176                           ;main.c: 395: {
 11177                           ;main.c: 396: current[2]=0;
 11178  14D0  0021               	movlb	1	; select bank1
 11179  14D1  01A4               	clrf	(_current^(0+128)+4)
 11180  14D2  01A5               	clrf	((_current+1)^(0+128)+4)
 11181                           
 11182                           ;main.c: 397: }
 11183  14D3  0008               	return
 11184  14D4                     l2986:	
 11185                           
 11186                           ;main.c: 398: else
 11187                           ;main.c: 399: {
 11188                           ;main.c: 401: current[2]=(int16_t)((Ianalogs[2]-565)/3.05);
 11189  14D4  0022               	movlb	2	; select bank2
 11190  14D5  0834               	movf	(_Ianalogs^(0+256)+4),w
 11191  14D6  3ECB               	addlw	203
 11192  14D7  00F8               	movwf	___awtoft@c
 11193  14D8  30FD               	movlw	253
 11194  14D9  3D35               	addwfc	((_Ianalogs+1)^(0+256)+4),w
 11195  14DA  00F9               	movwf	___awtoft@c+1
 11196  14DB  3192  2245  3194   	fcall	___awtoft
 11197  14DE  0878               	movf	?___awtoft,w
 11198  14DF  0020               	movlb	0	; select bank0
 11199  14E0  00A3               	movwf	___ftdiv@f1
 11200  14E1  0879               	movf	?___awtoft+1,w
 11201  14E2  00A4               	movwf	___ftdiv@f1+1
 11202  14E3  087A               	movf	?___awtoft+2,w
 11203  14E4  00A5               	movwf	___ftdiv@f1+2
 11204  14E5  3033               	movlw	51
 11205  14E6  00A0               	movwf	___ftdiv@f2
 11206  14E7  3043               	movlw	67
 11207  14E8  00A1               	movwf	___ftdiv@f2+1
 11208  14E9  3040               	movlw	64
 11209  14EA  00A2               	movwf	___ftdiv@f2+2
 11210  14EB  3197  2757  3194   	fcall	___ftdiv
 11211  14EE  0020               	movlb	0	; select bank0
 11212  14EF  0820               	movf	?___ftdiv,w
 11213  14F0  00B0               	movwf	___fttol@f1
 11214  14F1  0821               	movf	?___ftdiv+1,w
 11215  14F2  00B1               	movwf	___fttol@f1+1
 11216  14F3  0822               	movf	?___ftdiv+2,w
 11217  14F4  00B2               	movwf	___fttol@f1+2
 11218  14F5  3196  26D0         	fcall	___fttol
 11219  14F7  0020               	movlb	0	; select bank0
 11220  14F8  0831               	movf	?___fttol+1,w
 11221  14F9  0021               	movlb	1	; select bank1
 11222  14FA  00A5               	movwf	((_current+1)^(0+128)+4)
 11223  14FB  0020               	movlb	0	; select bank0
 11224  14FC  0830               	movf	?___fttol,w
 11225  14FD  0021               	movlb	1	; select bank1
 11226  14FE  00A4               	movwf	(_current^(0+128)+4)
 11227  14FF  0008               	return
 11228  1500                     __end_of_calculateCurrent2:	
 11229                           
 11230                           	psect	text16
 11231  1476                     __ptext16:	
 11232 ;; *************** function _calculateCurrent1 *****************
 11233 ;; Defined at:
 11234 ;;		line 380 in file "main.c"
 11235 ;; Parameters:    Size  Location     Type
 11236 ;;		None
 11237 ;; Auto vars:     Size  Location     Type
 11238 ;;		None
 11239 ;; Return value:  Size  Location     Type
 11240 ;;                  1    wreg      void 
 11241 ;; Registers used:
 11242 ;;		wreg, status,2, status,0, pclath, cstack
 11243 ;; Tracked objects:
 11244 ;;		On entry : 0/0
 11245 ;;		On exit  : 0/0
 11246 ;;		Unchanged: 0/0
 11247 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11248 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11249 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11250 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11251 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11252 ;;Total ram usage:        3 bytes
 11253 ;; Hardware stack levels used:    1
 11254 ;; Hardware stack levels required when called:    2
 11255 ;; This function calls:
 11256 ;;		___awtoft
 11257 ;;		___ftdiv
 11258 ;;		___fttol
 11259 ;; This function is called by:
 11260 ;;		_main
 11261 ;; This function uses a non-reentrant model
 11262 ;;
 11263                           
 11264                           
 11265                           ;psect for function _calculateCurrent1
 11266  1476                     _calculateCurrent1:	
 11267                           
 11268                           ;main.c: 382: if(Ianalogs[1]-580<=0)
 11269                           
 11270                           ;incstack = 0
 11271                           ; Regs used in _calculateCurrent1: [wreg+status,2+status,0+pclath+cstack]
 11272  1476  0022               	movlb	2	; select bank2
 11273  1477  0832               	movf	(_Ianalogs^(0+256)+2),w
 11274  1478  3EBC               	addlw	188
 11275  1479  0020               	movlb	0	; select bank0
 11276  147A  00BE               	movwf	??_calculateCurrent1
 11277  147B  30FD               	movlw	253
 11278  147C  0022               	movlb	2	; select bank2
 11279  147D  3D33               	addwfc	((_Ianalogs+1)^(0+256)+2),w
 11280  147E  0020               	movlb	0	; select bank0
 11281  147F  00BF               	movwf	??_calculateCurrent1+1
 11282  1480  083F               	movf	??_calculateCurrent1+1,w
 11283  1481  3A80               	xorlw	128
 11284  1482  00C0               	movwf	??_calculateCurrent1+2
 11285  1483  3080               	movlw	128
 11286  1484  0240               	subwf	??_calculateCurrent1+2,w
 11287  1485  1D03               	skipz
 11288  1486  2C89               	goto	u3365
 11289  1487  3001               	movlw	1
 11290  1488  023E               	subwf	??_calculateCurrent1,w
 11291  1489                     u3365:	
 11292  1489  1803               	skipnc
 11293  148A  2C8F               	goto	l2980
 11294                           
 11295                           ;main.c: 383: {
 11296                           ;main.c: 384: current[1]=0;
 11297  148B  0021               	movlb	1	; select bank1
 11298  148C  01A2               	clrf	(_current^(0+128)+2)
 11299  148D  01A3               	clrf	((_current+1)^(0+128)+2)
 11300                           
 11301                           ;main.c: 385: }
 11302  148E  0008               	return
 11303  148F                     l2980:	
 11304                           
 11305                           ;main.c: 386: else
 11306                           ;main.c: 387: {
 11307                           ;main.c: 388: current[1]=(int16_t)((Ianalogs[1]-580)/3.22);
 11308  148F  0022               	movlb	2	; select bank2
 11309  1490  0832               	movf	(_Ianalogs^(0+256)+2),w
 11310  1491  3EBC               	addlw	188
 11311  1492  00F8               	movwf	___awtoft@c
 11312  1493  30FD               	movlw	253
 11313  1494  3D33               	addwfc	((_Ianalogs+1)^(0+256)+2),w
 11314  1495  00F9               	movwf	___awtoft@c+1
 11315  1496  3192  2245  3194   	fcall	___awtoft
 11316  1499  0878               	movf	?___awtoft,w
 11317  149A  0020               	movlb	0	; select bank0
 11318  149B  00A3               	movwf	___ftdiv@f1
 11319  149C  0879               	movf	?___awtoft+1,w
 11320  149D  00A4               	movwf	___ftdiv@f1+1
 11321  149E  087A               	movf	?___awtoft+2,w
 11322  149F  00A5               	movwf	___ftdiv@f1+2
 11323  14A0  3014               	movlw	20
 11324  14A1  00A0               	movwf	___ftdiv@f2
 11325  14A2  304E               	movlw	78
 11326  14A3  00A1               	movwf	___ftdiv@f2+1
 11327  14A4  3040               	movlw	64
 11328  14A5  00A2               	movwf	___ftdiv@f2+2
 11329  14A6  3197  2757  3194   	fcall	___ftdiv
 11330  14A9  0020               	movlb	0	; select bank0
 11331  14AA  0820               	movf	?___ftdiv,w
 11332  14AB  00B0               	movwf	___fttol@f1
 11333  14AC  0821               	movf	?___ftdiv+1,w
 11334  14AD  00B1               	movwf	___fttol@f1+1
 11335  14AE  0822               	movf	?___ftdiv+2,w
 11336  14AF  00B2               	movwf	___fttol@f1+2
 11337  14B0  3196  26D0         	fcall	___fttol
 11338  14B2  0020               	movlb	0	; select bank0
 11339  14B3  0831               	movf	?___fttol+1,w
 11340  14B4  0021               	movlb	1	; select bank1
 11341  14B5  00A3               	movwf	((_current+1)^(0+128)+2)
 11342  14B6  0020               	movlb	0	; select bank0
 11343  14B7  0830               	movf	?___fttol,w
 11344  14B8  0021               	movlb	1	; select bank1
 11345  14B9  00A2               	movwf	(_current^(0+128)+2)
 11346  14BA  0008               	return
 11347  14BB                     __end_of_calculateCurrent1:	
 11348                           
 11349                           	psect	text17
 11350  1431                     __ptext17:	
 11351 ;; *************** function _calculateCurrent0 *****************
 11352 ;; Defined at:
 11353 ;;		line 367 in file "main.c"
 11354 ;; Parameters:    Size  Location     Type
 11355 ;;		None
 11356 ;; Auto vars:     Size  Location     Type
 11357 ;;		None
 11358 ;; Return value:  Size  Location     Type
 11359 ;;                  1    wreg      void 
 11360 ;; Registers used:
 11361 ;;		wreg, status,2, status,0, pclath, cstack
 11362 ;; Tracked objects:
 11363 ;;		On entry : 0/0
 11364 ;;		On exit  : 0/0
 11365 ;;		Unchanged: 0/0
 11366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11367 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11368 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11369 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11370 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11371 ;;Total ram usage:        3 bytes
 11372 ;; Hardware stack levels used:    1
 11373 ;; Hardware stack levels required when called:    2
 11374 ;; This function calls:
 11375 ;;		___awtoft
 11376 ;;		___ftdiv
 11377 ;;		___fttol
 11378 ;; This function is called by:
 11379 ;;		_main
 11380 ;; This function uses a non-reentrant model
 11381 ;;
 11382                           
 11383                           
 11384                           ;psect for function _calculateCurrent0
 11385  1431                     _calculateCurrent0:	
 11386                           
 11387                           ;main.c: 369: if(Ianalogs[0]-580<=0)
 11388                           
 11389                           ;incstack = 0
 11390                           ; Regs used in _calculateCurrent0: [wreg+status,2+status,0+pclath+cstack]
 11391  1431  0022               	movlb	2	; select bank2
 11392  1432  0830               	movf	_Ianalogs^(0+256),w
 11393  1433  3EBC               	addlw	188
 11394  1434  0020               	movlb	0	; select bank0
 11395  1435  00BE               	movwf	??_calculateCurrent0
 11396  1436  30FD               	movlw	253
 11397  1437  0022               	movlb	2	; select bank2
 11398  1438  3D31               	addwfc	(_Ianalogs+1)^(0+256),w
 11399  1439  0020               	movlb	0	; select bank0
 11400  143A  00BF               	movwf	??_calculateCurrent0+1
 11401  143B  083F               	movf	??_calculateCurrent0+1,w
 11402  143C  3A80               	xorlw	128
 11403  143D  00C0               	movwf	??_calculateCurrent0+2
 11404  143E  3080               	movlw	128
 11405  143F  0240               	subwf	??_calculateCurrent0+2,w
 11406  1440  1D03               	skipz
 11407  1441  2C44               	goto	u3355
 11408  1442  3001               	movlw	1
 11409  1443  023E               	subwf	??_calculateCurrent0,w
 11410  1444                     u3355:	
 11411  1444  1803               	skipnc
 11412  1445  2C4A               	goto	l2974
 11413                           
 11414                           ;main.c: 370: {
 11415                           ;main.c: 371: current[0]=0;
 11416  1446  0021               	movlb	1	; select bank1
 11417  1447  01A0               	clrf	_current^(0+128)
 11418  1448  01A1               	clrf	(_current+1)^(0+128)
 11419                           
 11420                           ;main.c: 372: }
 11421  1449  0008               	return
 11422  144A                     l2974:	
 11423                           
 11424                           ;main.c: 373: else
 11425                           ;main.c: 374: {
 11426                           ;main.c: 376: current[0]=(int16_t)((Ianalogs[0]-580)/3.15);
 11427  144A  0022               	movlb	2	; select bank2
 11428  144B  0830               	movf	_Ianalogs^(0+256),w
 11429  144C  3EBC               	addlw	188
 11430  144D  00F8               	movwf	___awtoft@c
 11431  144E  30FD               	movlw	253
 11432  144F  3D31               	addwfc	(_Ianalogs+1)^(0+256),w
 11433  1450  00F9               	movwf	___awtoft@c+1
 11434  1451  3192  2245  3194   	fcall	___awtoft
 11435  1454  0878               	movf	?___awtoft,w
 11436  1455  0020               	movlb	0	; select bank0
 11437  1456  00A3               	movwf	___ftdiv@f1
 11438  1457  0879               	movf	?___awtoft+1,w
 11439  1458  00A4               	movwf	___ftdiv@f1+1
 11440  1459  087A               	movf	?___awtoft+2,w
 11441  145A  00A5               	movwf	___ftdiv@f1+2
 11442  145B  309A               	movlw	154
 11443  145C  00A0               	movwf	___ftdiv@f2
 11444  145D  3049               	movlw	73
 11445  145E  00A1               	movwf	___ftdiv@f2+1
 11446  145F  3040               	movlw	64
 11447  1460  00A2               	movwf	___ftdiv@f2+2
 11448  1461  3197  2757  3194   	fcall	___ftdiv
 11449  1464  0020               	movlb	0	; select bank0
 11450  1465  0820               	movf	?___ftdiv,w
 11451  1466  00B0               	movwf	___fttol@f1
 11452  1467  0821               	movf	?___ftdiv+1,w
 11453  1468  00B1               	movwf	___fttol@f1+1
 11454  1469  0822               	movf	?___ftdiv+2,w
 11455  146A  00B2               	movwf	___fttol@f1+2
 11456  146B  3196  26D0         	fcall	___fttol
 11457  146D  0020               	movlb	0	; select bank0
 11458  146E  0831               	movf	?___fttol+1,w
 11459  146F  0021               	movlb	1	; select bank1
 11460  1470  00A1               	movwf	(_current+1)^(0+128)
 11461  1471  0020               	movlb	0	; select bank0
 11462  1472  0830               	movf	?___fttol,w
 11463  1473  0021               	movlb	1	; select bank1
 11464  1474  00A0               	movwf	_current^(0+128)
 11465  1475  0008               	return
 11466  1476                     __end_of_calculateCurrent0:	
 11467                           
 11468                           	psect	text18
 11469  16D0                     __ptext18:	
 11470 ;; *************** function ___fttol *****************
 11471 ;; Defined at:
 11472 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
 11473 ;; Parameters:    Size  Location     Type
 11474 ;;  f1              3   16[BANK0 ] float 
 11475 ;; Auto vars:     Size  Location     Type
 11476 ;;  lval            4   25[BANK0 ] unsigned long 
 11477 ;;  exp1            1   29[BANK0 ] unsigned char 
 11478 ;;  sign1           1   24[BANK0 ] unsigned char 
 11479 ;; Return value:  Size  Location     Type
 11480 ;;                  4   16[BANK0 ] long 
 11481 ;; Registers used:
 11482 ;;		wreg, status,2, status,0
 11483 ;; Tracked objects:
 11484 ;;		On entry : 0/0
 11485 ;;		On exit  : 0/0
 11486 ;;		Unchanged: 0/0
 11487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11488 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11489 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11490 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11491 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11492 ;;Total ram usage:       14 bytes
 11493 ;; Hardware stack levels used:    1
 11494 ;; This function calls:
 11495 ;;		Nothing
 11496 ;; This function is called by:
 11497 ;;		_tempCalc
 11498 ;;		_main
 11499 ;;		_calculateCurrent0
 11500 ;;		_calculateCurrent1
 11501 ;;		_calculateCurrent2
 11502 ;;		_calculateCurrent3
 11503 ;; This function uses a non-reentrant model
 11504 ;;
 11505                           
 11506                           
 11507                           ;psect for function ___fttol
 11508  16D0                     ___fttol:	
 11509                           
 11510                           ;incstack = 0
 11511                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 11512  16D0  0020               	movlb	0	; select bank0
 11513  16D1  0830               	movf	___fttol@f1,w
 11514  16D2  00B4               	movwf	??___fttol
 11515  16D3  0831               	movf	___fttol@f1+1,w
 11516  16D4  00B5               	movwf	??___fttol+1
 11517  16D5  0832               	movf	___fttol@f1+2,w
 11518  16D6  00B6               	movwf	??___fttol+2
 11519  16D7  1003               	clrc
 11520  16D8  0D35               	rlf	??___fttol+1,w
 11521  16D9  0D36               	rlf	??___fttol+2,w
 11522  16DA  00B7               	movwf	??___fttol+3
 11523  16DB  0837               	movf	??___fttol+3,w
 11524  16DC  00BD               	movwf	___fttol@exp1
 11525  16DD  083D               	movf	___fttol@exp1,w
 11526  16DE  1D03               	btfss	3,2
 11527  16DF  2EE9               	goto	l2762
 11528  16E0  3000               	movlw	0
 11529  16E1  00B3               	movwf	?___fttol+3
 11530  16E2  3000               	movlw	0
 11531  16E3  00B2               	movwf	?___fttol+2
 11532  16E4  3000               	movlw	0
 11533  16E5  00B1               	movwf	?___fttol+1
 11534  16E6  3000               	movlw	0
 11535  16E7  00B0               	movwf	?___fttol
 11536  16E8  0008               	return
 11537  16E9                     l2762:	
 11538  16E9  0830               	movf	___fttol@f1,w
 11539  16EA  00B4               	movwf	??___fttol
 11540  16EB  0831               	movf	___fttol@f1+1,w
 11541  16EC  00B5               	movwf	??___fttol+1
 11542  16ED  0832               	movf	___fttol@f1+2,w
 11543  16EE  00B6               	movwf	??___fttol+2
 11544  16EF  3017               	movlw	23
 11545  16F0                     u2935:	
 11546  16F0  36B6               	lsrf	??___fttol+2,f
 11547  16F1  0CB5               	rrf	??___fttol+1,f
 11548  16F2  0CB4               	rrf	??___fttol,f
 11549  16F3  0B89               	decfsz	9,f
 11550  16F4  2EF0               	goto	u2935
 11551  16F5  0834               	movf	??___fttol,w
 11552  16F6  00B7               	movwf	??___fttol+3
 11553  16F7  0837               	movf	??___fttol+3,w
 11554  16F8  00B8               	movwf	___fttol@sign1
 11555  16F9  17B1               	bsf	___fttol@f1+1,7
 11556  16FA  30FF               	movlw	255
 11557  16FB  05B0               	andwf	___fttol@f1,f
 11558  16FC  30FF               	movlw	255
 11559  16FD  05B1               	andwf	___fttol@f1+1,f
 11560  16FE  3000               	movlw	0
 11561  16FF  05B2               	andwf	___fttol@f1+2,f
 11562  1700  0830               	movf	___fttol@f1,w
 11563  1701  00B9               	movwf	___fttol@lval
 11564  1702  0831               	movf	___fttol@f1+1,w
 11565  1703  00BA               	movwf	___fttol@lval+1
 11566  1704  0832               	movf	___fttol@f1+2,w
 11567  1705  00BB               	movwf	___fttol@lval+2
 11568  1706  01BC               	clrf	___fttol@lval+3
 11569  1707  308E               	movlw	142
 11570  1708  02BD               	subwf	___fttol@exp1,f
 11571  1709  1FBD               	btfss	___fttol@exp1,7
 11572  170A  2F27               	goto	l2782
 11573  170B  083D               	movf	___fttol@exp1,w
 11574  170C  3A80               	xorlw	128
 11575  170D  3E8F               	addlw	143
 11576  170E  1803               	skipnc
 11577  170F  2F19               	goto	l2780
 11578  1710  3000               	movlw	0
 11579  1711  00B3               	movwf	?___fttol+3
 11580  1712  3000               	movlw	0
 11581  1713  00B2               	movwf	?___fttol+2
 11582  1714  3000               	movlw	0
 11583  1715  00B1               	movwf	?___fttol+1
 11584  1716  3000               	movlw	0
 11585  1717  00B0               	movwf	?___fttol
 11586  1718  0008               	return
 11587  1719                     l2780:	
 11588  1719  3001               	movlw	1
 11589  171A                     u2965:	
 11590  171A  36BC               	lsrf	___fttol@lval+3,f
 11591  171B  0CBB               	rrf	___fttol@lval+2,f
 11592  171C  0CBA               	rrf	___fttol@lval+1,f
 11593  171D  0CB9               	rrf	___fttol@lval,f
 11594  171E  0B89               	decfsz	9,f
 11595  171F  2F1A               	goto	u2965
 11596  1720  3001               	movlw	1
 11597  1721  00B4               	movwf	??___fttol
 11598  1722  0834               	movf	??___fttol,w
 11599  1723  07BD               	addwf	___fttol@exp1,f
 11600  1724  1903               	btfsc	3,2
 11601  1725  2F40               	goto	l2790
 11602  1726  2F19               	goto	l2780
 11603  1727                     l2782:	
 11604  1727  3018               	movlw	24
 11605  1728  023D               	subwf	___fttol@exp1,w
 11606  1729  1C03               	skipc
 11607  172A  2F3D               	goto	l830
 11608  172B  3000               	movlw	0
 11609  172C  00B3               	movwf	?___fttol+3
 11610  172D  3000               	movlw	0
 11611  172E  00B2               	movwf	?___fttol+2
 11612  172F  3000               	movlw	0
 11613  1730  00B1               	movwf	?___fttol+1
 11614  1731  3000               	movlw	0
 11615  1732  00B0               	movwf	?___fttol
 11616  1733  0008               	return
 11617  1734                     l2788:	
 11618  1734  3001               	movlw	1
 11619  1735                     u2995:	
 11620  1735  35B9               	lslf	___fttol@lval,f
 11621  1736  0DBA               	rlf	___fttol@lval+1,f
 11622  1737  0DBB               	rlf	___fttol@lval+2,f
 11623  1738  0DBC               	rlf	___fttol@lval+3,f
 11624  1739  0B89               	decfsz	9,f
 11625  173A  2F35               	goto	u2995
 11626  173B  3001               	movlw	1
 11627  173C  02BD               	subwf	___fttol@exp1,f
 11628  173D                     l830:	
 11629  173D  083D               	movf	___fttol@exp1,w
 11630  173E  1D03               	btfss	3,2
 11631  173F  2F34               	goto	l2788
 11632  1740                     l2790:	
 11633  1740  0838               	movf	___fttol@sign1,w
 11634  1741  1903               	btfsc	3,2
 11635  1742  2F4E               	goto	l2794
 11636  1743  09B9               	comf	___fttol@lval,f
 11637  1744  09BA               	comf	___fttol@lval+1,f
 11638  1745  09BB               	comf	___fttol@lval+2,f
 11639  1746  09BC               	comf	___fttol@lval+3,f
 11640  1747  0AB9               	incf	___fttol@lval,f
 11641  1748  1903               	skipnz
 11642  1749  0ABA               	incf	___fttol@lval+1,f
 11643  174A  1903               	skipnz
 11644  174B  0ABB               	incf	___fttol@lval+2,f
 11645  174C  1903               	skipnz
 11646  174D  0ABC               	incf	___fttol@lval+3,f
 11647  174E                     l2794:	
 11648  174E  083C               	movf	___fttol@lval+3,w
 11649  174F  00B3               	movwf	?___fttol+3
 11650  1750  083B               	movf	___fttol@lval+2,w
 11651  1751  00B2               	movwf	?___fttol+2
 11652  1752  083A               	movf	___fttol@lval+1,w
 11653  1753  00B1               	movwf	?___fttol+1
 11654  1754  0839               	movf	___fttol@lval,w
 11655  1755  00B0               	movwf	?___fttol
 11656  1756  0008               	return
 11657  1757                     __end_of___fttol:	
 11658                           
 11659                           	psect	text19
 11660  1757                     __ptext19:	
 11661 ;; *************** function ___ftdiv *****************
 11662 ;; Defined at:
 11663 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
 11664 ;; Parameters:    Size  Location     Type
 11665 ;;  f2              3    0[BANK0 ] float 
 11666 ;;  f1              3    3[BANK0 ] float 
 11667 ;; Auto vars:     Size  Location     Type
 11668 ;;  f3              3   11[BANK0 ] float 
 11669 ;;  sign            1   15[BANK0 ] unsigned char 
 11670 ;;  exp             1   14[BANK0 ] unsigned char 
 11671 ;;  cntr            1   10[BANK0 ] unsigned char 
 11672 ;; Return value:  Size  Location     Type
 11673 ;;                  3    0[BANK0 ] float 
 11674 ;; Registers used:
 11675 ;;		wreg, status,2, status,0, pclath, cstack
 11676 ;; Tracked objects:
 11677 ;;		On entry : 0/0
 11678 ;;		On exit  : 0/0
 11679 ;;		Unchanged: 0/0
 11680 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11681 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11682 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11683 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11684 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11685 ;;Total ram usage:       16 bytes
 11686 ;; Hardware stack levels used:    1
 11687 ;; Hardware stack levels required when called:    1
 11688 ;; This function calls:
 11689 ;;		___ftpack
 11690 ;; This function is called by:
 11691 ;;		_tempCalc
 11692 ;;		_main
 11693 ;;		_calculateCurrent0
 11694 ;;		_calculateCurrent1
 11695 ;;		_calculateCurrent2
 11696 ;;		_calculateCurrent3
 11697 ;; This function uses a non-reentrant model
 11698 ;;
 11699                           
 11700                           
 11701                           ;psect for function ___ftdiv
 11702  1757                     ___ftdiv:	
 11703                           
 11704                           ;incstack = 0
 11705                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 11706  1757  0020               	movlb	0	; select bank0
 11707  1758  0823               	movf	___ftdiv@f1,w
 11708  1759  00A6               	movwf	??___ftdiv
 11709  175A  0824               	movf	___ftdiv@f1+1,w
 11710  175B  00A7               	movwf	??___ftdiv+1
 11711  175C  0825               	movf	___ftdiv@f1+2,w
 11712  175D  00A8               	movwf	??___ftdiv+2
 11713  175E  1003               	clrc
 11714  175F  0D27               	rlf	??___ftdiv+1,w
 11715  1760  0D28               	rlf	??___ftdiv+2,w
 11716  1761  00A9               	movwf	??___ftdiv+3
 11717  1762  0829               	movf	??___ftdiv+3,w
 11718  1763  00AE               	movwf	___ftdiv@exp
 11719  1764  082E               	movf	___ftdiv@exp,w
 11720  1765  1D03               	btfss	3,2
 11721  1766  2F6E               	goto	l2712
 11722  1767  3000               	movlw	0
 11723  1768  00A0               	movwf	?___ftdiv
 11724  1769  3000               	movlw	0
 11725  176A  00A1               	movwf	?___ftdiv+1
 11726  176B  3000               	movlw	0
 11727  176C  00A2               	movwf	?___ftdiv+2
 11728  176D  0008               	return
 11729  176E                     l2712:	
 11730  176E  0820               	movf	___ftdiv@f2,w
 11731  176F  00A6               	movwf	??___ftdiv
 11732  1770  0821               	movf	___ftdiv@f2+1,w
 11733  1771  00A7               	movwf	??___ftdiv+1
 11734  1772  0822               	movf	___ftdiv@f2+2,w
 11735  1773  00A8               	movwf	??___ftdiv+2
 11736  1774  1003               	clrc
 11737  1775  0D27               	rlf	??___ftdiv+1,w
 11738  1776  0D28               	rlf	??___ftdiv+2,w
 11739  1777  00A9               	movwf	??___ftdiv+3
 11740  1778  0829               	movf	??___ftdiv+3,w
 11741  1779  00AF               	movwf	___ftdiv@sign
 11742  177A  082F               	movf	___ftdiv@sign,w
 11743  177B  1D03               	btfss	3,2
 11744  177C  2F84               	goto	l2718
 11745  177D  3000               	movlw	0
 11746  177E  00A0               	movwf	?___ftdiv
 11747  177F  3000               	movlw	0
 11748  1780  00A1               	movwf	?___ftdiv+1
 11749  1781  3000               	movlw	0
 11750  1782  00A2               	movwf	?___ftdiv+2
 11751  1783  0008               	return
 11752  1784                     l2718:	
 11753  1784  3000               	movlw	0
 11754  1785  00AB               	movwf	___ftdiv@f3
 11755  1786  3000               	movlw	0
 11756  1787  00AC               	movwf	___ftdiv@f3+1
 11757  1788  3000               	movlw	0
 11758  1789  00AD               	movwf	___ftdiv@f3+2
 11759  178A  3089               	movlw	137
 11760  178B  072F               	addwf	___ftdiv@sign,w
 11761  178C  00A6               	movwf	??___ftdiv
 11762  178D  0826               	movf	??___ftdiv,w
 11763  178E  02AE               	subwf	___ftdiv@exp,f
 11764  178F  0823               	movf	___ftdiv@f1,w
 11765  1790  00A6               	movwf	??___ftdiv
 11766  1791  0824               	movf	___ftdiv@f1+1,w
 11767  1792  00A7               	movwf	??___ftdiv+1
 11768  1793  0825               	movf	___ftdiv@f1+2,w
 11769  1794  00A8               	movwf	??___ftdiv+2
 11770  1795  3010               	movlw	16
 11771  1796                     u2855:	
 11772  1796  36A8               	lsrf	??___ftdiv+2,f
 11773  1797  0CA7               	rrf	??___ftdiv+1,f
 11774  1798  0CA6               	rrf	??___ftdiv,f
 11775  1799  0B89               	decfsz	9,f
 11776  179A  2F96               	goto	u2855
 11777  179B  0826               	movf	??___ftdiv,w
 11778  179C  00A9               	movwf	??___ftdiv+3
 11779  179D  0829               	movf	??___ftdiv+3,w
 11780  179E  00AF               	movwf	___ftdiv@sign
 11781  179F  0820               	movf	___ftdiv@f2,w
 11782  17A0  00A6               	movwf	??___ftdiv
 11783  17A1  0821               	movf	___ftdiv@f2+1,w
 11784  17A2  00A7               	movwf	??___ftdiv+1
 11785  17A3  0822               	movf	___ftdiv@f2+2,w
 11786  17A4  00A8               	movwf	??___ftdiv+2
 11787  17A5  3010               	movlw	16
 11788  17A6                     u2865:	
 11789  17A6  36A8               	lsrf	??___ftdiv+2,f
 11790  17A7  0CA7               	rrf	??___ftdiv+1,f
 11791  17A8  0CA6               	rrf	??___ftdiv,f
 11792  17A9  0B89               	decfsz	9,f
 11793  17AA  2FA6               	goto	u2865
 11794  17AB  0826               	movf	??___ftdiv,w
 11795  17AC  00A9               	movwf	??___ftdiv+3
 11796  17AD  0829               	movf	??___ftdiv+3,w
 11797  17AE  06AF               	xorwf	___ftdiv@sign,f
 11798  17AF  3080               	movlw	128
 11799  17B0  00A6               	movwf	??___ftdiv
 11800  17B1  0826               	movf	??___ftdiv,w
 11801  17B2  05AF               	andwf	___ftdiv@sign,f
 11802  17B3  17A4               	bsf	___ftdiv@f1+1,7
 11803  17B4  30FF               	movlw	255
 11804  17B5  05A3               	andwf	___ftdiv@f1,f
 11805  17B6  30FF               	movlw	255
 11806  17B7  05A4               	andwf	___ftdiv@f1+1,f
 11807  17B8  3000               	movlw	0
 11808  17B9  05A5               	andwf	___ftdiv@f1+2,f
 11809  17BA  17A1               	bsf	___ftdiv@f2+1,7
 11810  17BB  30FF               	movlw	255
 11811  17BC  05A0               	andwf	___ftdiv@f2,f
 11812  17BD  30FF               	movlw	255
 11813  17BE  05A1               	andwf	___ftdiv@f2+1,f
 11814  17BF  3000               	movlw	0
 11815  17C0  05A2               	andwf	___ftdiv@f2+2,f
 11816  17C1  3018               	movlw	24
 11817  17C2  00A6               	movwf	??___ftdiv
 11818  17C3  0826               	movf	??___ftdiv,w
 11819  17C4  00AA               	movwf	___ftdiv@cntr
 11820  17C5                     l2732:	
 11821  17C5  3001               	movlw	1
 11822  17C6                     u2875:	
 11823  17C6  35AB               	lslf	___ftdiv@f3,f
 11824  17C7  0DAC               	rlf	___ftdiv@f3+1,f
 11825  17C8  0DAD               	rlf	___ftdiv@f3+2,f
 11826  17C9  0B89               	decfsz	9,f
 11827  17CA  2FC6               	goto	u2875
 11828  17CB  0822               	movf	___ftdiv@f2+2,w
 11829  17CC  0225               	subwf	___ftdiv@f1+2,w
 11830  17CD  1D03               	skipz
 11831  17CE  2FD5               	goto	u2885
 11832  17CF  0821               	movf	___ftdiv@f2+1,w
 11833  17D0  0224               	subwf	___ftdiv@f1+1,w
 11834  17D1  1D03               	skipz
 11835  17D2  2FD5               	goto	u2885
 11836  17D3  0820               	movf	___ftdiv@f2,w
 11837  17D4  0223               	subwf	___ftdiv@f1,w
 11838  17D5                     u2885:	
 11839  17D5  1C03               	skipc
 11840  17D6  2FDE               	goto	l2740
 11841  17D7  0820               	movf	___ftdiv@f2,w
 11842  17D8  02A3               	subwf	___ftdiv@f1,f
 11843  17D9  0821               	movf	___ftdiv@f2+1,w
 11844  17DA  3BA4               	subwfb	___ftdiv@f1+1,f
 11845  17DB  0822               	movf	___ftdiv@f2+2,w
 11846  17DC  3BA5               	subwfb	___ftdiv@f1+2,f
 11847  17DD  142B               	bsf	___ftdiv@f3,0
 11848  17DE                     l2740:	
 11849  17DE  3001               	movlw	1
 11850  17DF                     u2895:	
 11851  17DF  35A3               	lslf	___ftdiv@f1,f
 11852  17E0  0DA4               	rlf	___ftdiv@f1+1,f
 11853  17E1  0DA5               	rlf	___ftdiv@f1+2,f
 11854  17E2  0B89               	decfsz	9,f
 11855  17E3  2FDF               	goto	u2895
 11856  17E4  3001               	movlw	1
 11857  17E5  02AA               	subwf	___ftdiv@cntr,f
 11858  17E6  1D03               	btfss	3,2
 11859  17E7  2FC5               	goto	l2732
 11860  17E8  082B               	movf	___ftdiv@f3,w
 11861  17E9  00F0               	movwf	___ftpack@arg
 11862  17EA  082C               	movf	___ftdiv@f3+1,w
 11863  17EB  00F1               	movwf	___ftpack@arg+1
 11864  17EC  082D               	movf	___ftdiv@f3+2,w
 11865  17ED  00F2               	movwf	___ftpack@arg+2
 11866  17EE  082E               	movf	___ftdiv@exp,w
 11867  17EF  00A6               	movwf	??___ftdiv
 11868  17F0  0826               	movf	??___ftdiv,w
 11869  17F1  00F3               	movwf	___ftpack@exp
 11870  17F2  082F               	movf	___ftdiv@sign,w
 11871  17F3  00A7               	movwf	??___ftdiv+1
 11872  17F4  0827               	movf	??___ftdiv+1,w
 11873  17F5  00F4               	movwf	___ftpack@sign
 11874  17F6  3180  201A         	fcall	___ftpack
 11875  17F8  0870               	movf	?___ftpack,w
 11876  17F9  0020               	movlb	0	; select bank0
 11877  17FA  00A0               	movwf	?___ftdiv
 11878  17FB  0871               	movf	?___ftpack+1,w
 11879  17FC  00A1               	movwf	?___ftdiv+1
 11880  17FD  0872               	movf	?___ftpack+2,w
 11881  17FE  00A2               	movwf	?___ftdiv+2
 11882  17FF  0008               	return
 11883  1800                     __end_of___ftdiv:	
 11884                           
 11885                           	psect	text20
 11886  1245                     __ptext20:	
 11887 ;; *************** function ___awtoft *****************
 11888 ;; Defined at:
 11889 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
 11890 ;; Parameters:    Size  Location     Type
 11891 ;;  c               2    8[COMMON] int 
 11892 ;; Auto vars:     Size  Location     Type
 11893 ;;  sign            1   13[COMMON] unsigned char 
 11894 ;; Return value:  Size  Location     Type
 11895 ;;                  3    8[COMMON] float 
 11896 ;; Registers used:
 11897 ;;		wreg, status,2, status,0, pclath, cstack
 11898 ;; Tracked objects:
 11899 ;;		On entry : 0/0
 11900 ;;		On exit  : 0/0
 11901 ;;		Unchanged: 0/0
 11902 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11903 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11904 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11905 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11906 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11907 ;;Total ram usage:        6 bytes
 11908 ;; Hardware stack levels used:    1
 11909 ;; Hardware stack levels required when called:    1
 11910 ;; This function calls:
 11911 ;;		___ftpack
 11912 ;; This function is called by:
 11913 ;;		_tempCalc
 11914 ;;		_main
 11915 ;;		_calculateCurrent0
 11916 ;;		_calculateCurrent1
 11917 ;;		_calculateCurrent2
 11918 ;;		_calculateCurrent3
 11919 ;;		_log
 11920 ;; This function uses a non-reentrant model
 11921 ;;
 11922                           
 11923                           
 11924                           ;psect for function ___awtoft
 11925  1245                     ___awtoft:	
 11926                           
 11927                           ;incstack = 0
 11928                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 11929  1245  01FD               	clrf	___awtoft@sign
 11930  1246  1FF9               	btfss	___awtoft@c+1,7
 11931  1247  2A4F               	goto	l2384
 11932  1248  09F8               	comf	___awtoft@c,f
 11933  1249  09F9               	comf	___awtoft@c+1,f
 11934  124A  0AF8               	incf	___awtoft@c,f
 11935  124B  1903               	skipnz
 11936  124C  0AF9               	incf	___awtoft@c+1,f
 11937  124D  01FD               	clrf	___awtoft@sign
 11938  124E  0AFD               	incf	___awtoft@sign,f
 11939  124F                     l2384:	
 11940  124F  0878               	movf	___awtoft@c,w
 11941  1250  00F0               	movwf	___ftpack@arg
 11942  1251  0879               	movf	___awtoft@c+1,w
 11943  1252  00F1               	movwf	___ftpack@arg+1
 11944  1253  01F2               	clrf	___ftpack@arg+2
 11945  1254  308E               	movlw	142
 11946  1255  00FB               	movwf	??___awtoft
 11947  1256  087B               	movf	??___awtoft,w
 11948  1257  00F3               	movwf	___ftpack@exp
 11949  1258  087D               	movf	___awtoft@sign,w
 11950  1259  00FC               	movwf	??___awtoft+1
 11951  125A  087C               	movf	??___awtoft+1,w
 11952  125B  00F4               	movwf	___ftpack@sign
 11953  125C  3180  201A         	fcall	___ftpack
 11954  125E  0870               	movf	?___ftpack,w
 11955  125F  00F8               	movwf	?___awtoft
 11956  1260  0871               	movf	?___ftpack+1,w
 11957  1261  00F9               	movwf	?___awtoft+1
 11958  1262  0872               	movf	?___ftpack+2,w
 11959  1263  00FA               	movwf	?___awtoft+2
 11960  1264  0008               	return
 11961  1265                     __end_of___awtoft:	
 11962                           
 11963                           	psect	text21
 11964  001A                     __ptext21:	
 11965 ;; *************** function ___ftpack *****************
 11966 ;; Defined at:
 11967 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
 11968 ;; Parameters:    Size  Location     Type
 11969 ;;  arg             3    0[COMMON] unsigned um
 11970 ;;  exp             1    3[COMMON] unsigned char 
 11971 ;;  sign            1    4[COMMON] unsigned char 
 11972 ;; Auto vars:     Size  Location     Type
 11973 ;;		None
 11974 ;; Return value:  Size  Location     Type
 11975 ;;                  3    0[COMMON] float 
 11976 ;; Registers used:
 11977 ;;		wreg, status,2, status,0
 11978 ;; Tracked objects:
 11979 ;;		On entry : 0/0
 11980 ;;		On exit  : 0/0
 11981 ;;		Unchanged: 0/0
 11982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11983 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11984 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11985 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11986 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11987 ;;Total ram usage:        8 bytes
 11988 ;; Hardware stack levels used:    1
 11989 ;; This function calls:
 11990 ;;		Nothing
 11991 ;; This function is called by:
 11992 ;;		___awtoft
 11993 ;;		___ftadd
 11994 ;;		___ftdiv
 11995 ;;		___ftmul
 11996 ;; This function uses a non-reentrant model
 11997 ;;
 11998                           
 11999                           
 12000                           ;psect for function ___ftpack
 12001  001A                     ___ftpack:	
 12002                           
 12003                           ;incstack = 0
 12004                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 12005  001A  0873               	movf	___ftpack@exp,w
 12006  001B  1903               	btfsc	3,2
 12007  001C  2822               	goto	l2178
 12008  001D  0872               	movf	___ftpack@arg+2,w
 12009  001E  0471               	iorwf	___ftpack@arg+1,w
 12010  001F  0470               	iorwf	___ftpack@arg,w
 12011  0020  1D03               	skipz
 12012  0021  2833               	goto	l2184
 12013  0022                     l2178:	
 12014  0022  3000               	movlw	0
 12015  0023  00F0               	movwf	?___ftpack
 12016  0024  3000               	movlw	0
 12017  0025  00F1               	movwf	?___ftpack+1
 12018  0026  3000               	movlw	0
 12019  0027  00F2               	movwf	?___ftpack+2
 12020  0028  0008               	return
 12021  0029                     l2182:	
 12022  0029  3001               	movlw	1
 12023  002A  00F5               	movwf	??___ftpack
 12024  002B  0875               	movf	??___ftpack,w
 12025  002C  07F3               	addwf	___ftpack@exp,f
 12026  002D  3001               	movlw	1
 12027  002E                     u1955:	
 12028  002E  36F2               	lsrf	___ftpack@arg+2,f
 12029  002F  0CF1               	rrf	___ftpack@arg+1,f
 12030  0030  0CF0               	rrf	___ftpack@arg,f
 12031  0031  0B89               	decfsz	9,f
 12032  0032  282E               	goto	u1955
 12033  0033                     l2184:	
 12034  0033  30FE               	movlw	254
 12035  0034  0572               	andwf	___ftpack@arg+2,w
 12036  0035  1903               	btfsc	3,2
 12037  0036  284C               	goto	l739
 12038  0037  2829               	goto	l2182
 12039  0038                     l2186:	
 12040  0038  3001               	movlw	1
 12041  0039  00F5               	movwf	??___ftpack
 12042  003A  0875               	movf	??___ftpack,w
 12043  003B  07F3               	addwf	___ftpack@exp,f
 12044  003C  3001               	movlw	1
 12045  003D  07F0               	addwf	___ftpack@arg,f
 12046  003E  3000               	movlw	0
 12047  003F  1803               	skipnc
 12048  0040  3001               	movlw	1
 12049  0041  07F1               	addwf	___ftpack@arg+1,f
 12050  0042  3000               	movlw	0
 12051  0043  1803               	skipnc
 12052  0044  3001               	movlw	1
 12053  0045  07F2               	addwf	___ftpack@arg+2,f
 12054  0046  3001               	movlw	1
 12055  0047                     u1975:	
 12056  0047  36F2               	lsrf	___ftpack@arg+2,f
 12057  0048  0CF1               	rrf	___ftpack@arg+1,f
 12058  0049  0CF0               	rrf	___ftpack@arg,f
 12059  004A  0B89               	decfsz	9,f
 12060  004B  2847               	goto	u1975
 12061  004C                     l739:	
 12062  004C  30FF               	movlw	255
 12063  004D  0572               	andwf	___ftpack@arg+2,w
 12064  004E  1903               	btfsc	3,2
 12065  004F  2859               	goto	l2194
 12066  0050  2838               	goto	l2186
 12067  0051                     l2192:	
 12068  0051  3001               	movlw	1
 12069  0052  02F3               	subwf	___ftpack@exp,f
 12070  0053  3001               	movlw	1
 12071  0054                     u1995:	
 12072  0054  35F0               	lslf	___ftpack@arg,f
 12073  0055  0DF1               	rlf	___ftpack@arg+1,f
 12074  0056  0DF2               	rlf	___ftpack@arg+2,f
 12075  0057  0B89               	decfsz	9,f
 12076  0058  2854               	goto	u1995
 12077  0059                     l2194:	
 12078  0059  1BF1               	btfsc	___ftpack@arg+1,7
 12079  005A  285F               	goto	l746
 12080  005B  3002               	movlw	2
 12081  005C  0273               	subwf	___ftpack@exp,w
 12082  005D  1803               	skipnc
 12083  005E  2851               	goto	l2192
 12084  005F                     l746:	
 12085  005F  1873               	btfsc	___ftpack@exp,0
 12086  0060  2867               	goto	l747
 12087  0061  30FF               	movlw	255
 12088  0062  05F0               	andwf	___ftpack@arg,f
 12089  0063  307F               	movlw	127
 12090  0064  05F1               	andwf	___ftpack@arg+1,f
 12091  0065  30FF               	movlw	255
 12092  0066  05F2               	andwf	___ftpack@arg+2,f
 12093  0067                     l747:	
 12094  0067  1003               	clrc
 12095  0068  0CF3               	rrf	___ftpack@exp,f
 12096  0069  0873               	movf	___ftpack@exp,w
 12097  006A  00F5               	movwf	??___ftpack
 12098  006B  01F6               	clrf	??___ftpack+1
 12099  006C  01F7               	clrf	??___ftpack+2
 12100  006D  3010               	movlw	16
 12101  006E                     u2035:	
 12102  006E  35F5               	lslf	??___ftpack,f
 12103  006F  0DF6               	rlf	??___ftpack+1,f
 12104  0070  0DF7               	rlf	??___ftpack+2,f
 12105  0071  0B89               	decfsz	9,f
 12106  0072  286E               	goto	u2035
 12107  0073  0875               	movf	??___ftpack,w
 12108  0074  04F0               	iorwf	___ftpack@arg,f
 12109  0075  0876               	movf	??___ftpack+1,w
 12110  0076  04F1               	iorwf	___ftpack@arg+1,f
 12111  0077  0877               	movf	??___ftpack+2,w
 12112  0078  04F2               	iorwf	___ftpack@arg+2,f
 12113  0079  0874               	movf	___ftpack@sign,w
 12114  007A  1903               	btfsc	3,2
 12115  007B  0008               	return
 12116  007C  17F2               	bsf	___ftpack@arg+2,7
 12117  007D  0008               	return
 12118  007E                     __end_of___ftpack:	
 12119                           
 12120                           	psect	text22
 12121  1347                     __ptext22:	
 12122 ;; *************** function _SYSTEM_Initialize *****************
 12123 ;; Defined at:
 12124 ;;		line 71 in file "system.c"
 12125 ;; Parameters:    Size  Location     Type
 12126 ;;		None
 12127 ;; Auto vars:     Size  Location     Type
 12128 ;;		None
 12129 ;; Return value:  Size  Location     Type
 12130 ;;                  1    wreg      void 
 12131 ;; Registers used:
 12132 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12133 ;; Tracked objects:
 12134 ;;		On entry : 0/0
 12135 ;;		On exit  : 0/0
 12136 ;;		Unchanged: 0/0
 12137 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12138 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12139 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12140 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12141 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12142 ;;Total ram usage:        2 bytes
 12143 ;; Hardware stack levels used:    1
 12144 ;; Hardware stack levels required when called:    3
 12145 ;; This function calls:
 12146 ;;		_ADC_Initialize
 12147 ;;		_Init_Battery_State_Machine
 12148 ;;		_LCDClear
 12149 ;;		_LCDInit
 12150 ;;		_OSCILLATOR_Initialize
 12151 ;;		_PIN_MANAGER_Initialize
 12152 ;;		_PWM_Initialize
 12153 ;;		_TMR2_Initialize
 12154 ;;		_TMR4_Initialize
 12155 ;; This function is called by:
 12156 ;;		_main
 12157 ;; This function uses a non-reentrant model
 12158 ;;
 12159                           
 12160                           
 12161                           ;psect for function _SYSTEM_Initialize
 12162  1347                     _SYSTEM_Initialize:	
 12163                           
 12164                           ;system.c: 73: PIN_MANAGER_Initialize();
 12165                           
 12166                           ;incstack = 0
 12167                           ; Regs used in _SYSTEM_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12168  1347  3193  2310  3193   	fcall	_PIN_MANAGER_Initialize
 12169                           
 12170                           ;system.c: 74: OSCILLATOR_Initialize();
 12171  134A  3191  2166  3193   	fcall	_OSCILLATOR_Initialize
 12172                           
 12173                           ;system.c: 76: ADC_Initialize();
 12174  134D  3192  2226  3193   	fcall	_ADC_Initialize
 12175                           
 12176                           ;system.c: 77: PWM_Initialize();
 12177  1350  3191  21AA  3193   	fcall	_PWM_Initialize
 12178                           
 12179                           ;system.c: 79: TMR2_Initialize();
 12180  1353  3191  217B  3193   	fcall	_TMR2_Initialize
 12181                           
 12182                           ;system.c: 80: TMR4_Initialize();
 12183  1356  3191  2189  3193   	fcall	_TMR4_Initialize
 12184                           
 12185                           ;system.c: 81: Init_Battery_State_Machine(0);
 12186  1359  3000               	movlw	0
 12187  135A  3192  22DC  3193   	fcall	_Init_Battery_State_Machine
 12188                           
 12189                           ;system.c: 82: Init_Battery_State_Machine(1);
 12190  135D  3001               	movlw	1
 12191  135E  3192  22DC  3193   	fcall	_Init_Battery_State_Machine
 12192                           
 12193                           ;system.c: 83: LCDInit();
 12194  1361  3193  2380  3193   	fcall	_LCDInit
 12195                           
 12196                           ;system.c: 84: _delay((unsigned long)((200)*(32000000/4000.0)));
 12197  1364  3009               	movlw	9
 12198  1365  00FC               	movwf	??_SYSTEM_Initialize+1
 12199  1366  301E               	movlw	30
 12200  1367  00FB               	movwf	??_SYSTEM_Initialize
 12201  1368  30E4               	movlw	228
 12202  1369                     u3917:	
 12203  1369  0B89               	decfsz	9,f
 12204  136A  2B69               	goto	u3917
 12205  136B  0BFB               	decfsz	??_SYSTEM_Initialize,f
 12206  136C  2B69               	goto	u3917
 12207  136D  0BFC               	decfsz	??_SYSTEM_Initialize+1,f
 12208  136E  2B69               	goto	u3917
 12209  136F  3200               	nop2
 12210                           
 12211                           ;system.c: 85: LCDClear();
 12212  1370  3192  228A  3193   	fcall	_LCDClear
 12213                           
 12214                           ;system.c: 86: _delay((unsigned long)((200)*(32000000/4000.0)));
 12215  1373  3009               	movlw	9
 12216  1374  00FC               	movwf	??_SYSTEM_Initialize+1
 12217  1375  301E               	movlw	30
 12218  1376  00FB               	movwf	??_SYSTEM_Initialize
 12219  1377  30E4               	movlw	228
 12220  1378                     u3927:	
 12221  1378  0B89               	decfsz	9,f
 12222  1379  2B78               	goto	u3927
 12223  137A  0BFB               	decfsz	??_SYSTEM_Initialize,f
 12224  137B  2B78               	goto	u3927
 12225  137C  0BFC               	decfsz	??_SYSTEM_Initialize+1,f
 12226  137D  2B78               	goto	u3927
 12227  137E  3200               	nop2
 12228  137F  0008               	return
 12229  1380                     __end_of_SYSTEM_Initialize:	
 12230                           
 12231                           	psect	text23
 12232  1189                     __ptext23:	
 12233 ;; *************** function _TMR4_Initialize *****************
 12234 ;; Defined at:
 12235 ;;		line 25 in file "tmr.c"
 12236 ;; Parameters:    Size  Location     Type
 12237 ;;		None
 12238 ;; Auto vars:     Size  Location     Type
 12239 ;;		None
 12240 ;; Return value:  Size  Location     Type
 12241 ;;                  1    wreg      void 
 12242 ;; Registers used:
 12243 ;;		wreg, status,2
 12244 ;; Tracked objects:
 12245 ;;		On entry : 0/0
 12246 ;;		On exit  : 0/0
 12247 ;;		Unchanged: 0/0
 12248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12249 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12250 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12251 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12252 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12253 ;;Total ram usage:        0 bytes
 12254 ;; Hardware stack levels used:    1
 12255 ;; This function calls:
 12256 ;;		Nothing
 12257 ;; This function is called by:
 12258 ;;		_SYSTEM_Initialize
 12259 ;; This function uses a non-reentrant model
 12260 ;;
 12261                           
 12262                           
 12263                           ;psect for function _TMR4_Initialize
 12264  1189                     _TMR4_Initialize:	
 12265                           
 12266                           ;tmr.c: 27: T4CON = 0x00;
 12267                           
 12268                           ;incstack = 0
 12269                           ; Regs used in _TMR4_Initialize: [wreg+status,2]
 12270  1189  0025               	movlb	5	; select bank5
 12271  118A  0194               	clrf	20	;volatile
 12272                           
 12273                           ;tmr.c: 29: T4CLKCON = 0x01;
 12274  118B  3001               	movlw	1
 12275  118C  0096               	movwf	22	;volatile
 12276                           
 12277                           ;tmr.c: 31: T4HLT = 0x00;
 12278  118D  0195               	clrf	21	;volatile
 12279                           
 12280                           ;tmr.c: 33: T4RST = 0x00;
 12281  118E  0197               	clrf	23	;volatile
 12282                           
 12283                           ;tmr.c: 35: T4PR = 0xFE;
 12284  118F  30FE               	movlw	254
 12285  1190  0093               	movwf	19	;volatile
 12286                           
 12287                           ;tmr.c: 39: T4TMR = 0x00;
 12288  1191  0192               	clrf	18	;volatile
 12289                           
 12290                           ;tmr.c: 41: PIR4bits.TMR4IF = 0;
 12291  1192  002E               	movlb	14	; select bank14
 12292  1193  1190               	bcf	16,3	;volatile
 12293                           
 12294                           ;tmr.c: 43: T4CONbits.TMR4ON = 1;
 12295  1194  0025               	movlb	5	; select bank5
 12296  1195  1794               	bsf	20,7	;volatile
 12297  1196  0008               	return
 12298  1197                     __end_of_TMR4_Initialize:	
 12299                           
 12300                           	psect	text24
 12301  117B                     __ptext24:	
 12302 ;; *************** function _TMR2_Initialize *****************
 12303 ;; Defined at:
 12304 ;;		line 3 in file "tmr.c"
 12305 ;; Parameters:    Size  Location     Type
 12306 ;;		None
 12307 ;; Auto vars:     Size  Location     Type
 12308 ;;		None
 12309 ;; Return value:  Size  Location     Type
 12310 ;;                  1    wreg      void 
 12311 ;; Registers used:
 12312 ;;		wreg, status,2
 12313 ;; Tracked objects:
 12314 ;;		On entry : 0/0
 12315 ;;		On exit  : 0/0
 12316 ;;		Unchanged: 0/0
 12317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12318 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12319 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12320 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12321 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12322 ;;Total ram usage:        0 bytes
 12323 ;; Hardware stack levels used:    1
 12324 ;; This function calls:
 12325 ;;		Nothing
 12326 ;; This function is called by:
 12327 ;;		_SYSTEM_Initialize
 12328 ;; This function uses a non-reentrant model
 12329 ;;
 12330                           
 12331                           
 12332                           ;psect for function _TMR2_Initialize
 12333  117B                     _TMR2_Initialize:	
 12334                           
 12335                           ;tmr.c: 5: T2CON = 0x00;
 12336                           
 12337                           ;incstack = 0
 12338                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
 12339  117B  0025               	movlb	5	; select bank5
 12340  117C  018E               	clrf	14	;volatile
 12341                           
 12342                           ;tmr.c: 7: T2CLKCON = 0x01;
 12343  117D  3001               	movlw	1
 12344  117E  0090               	movwf	16	;volatile
 12345                           
 12346                           ;tmr.c: 9: T2HLT = 0x00;
 12347  117F  018F               	clrf	15	;volatile
 12348                           
 12349                           ;tmr.c: 11: T2RST = 0x00;
 12350  1180  0191               	clrf	17	;volatile
 12351                           
 12352                           ;tmr.c: 13: T2PR = 0xFE;
 12353  1181  30FE               	movlw	254
 12354  1182  008D               	movwf	13	;volatile
 12355                           
 12356                           ;tmr.c: 18: T2TMR = 0x00;
 12357  1183  018C               	clrf	12	;volatile
 12358                           
 12359                           ;tmr.c: 20: PIR4bits.TMR2IF = 0;
 12360  1184  002E               	movlb	14	; select bank14
 12361  1185  1090               	bcf	16,1	;volatile
 12362                           
 12363                           ;tmr.c: 22: T2CONbits.TMR2ON = 1;
 12364  1186  0025               	movlb	5	; select bank5
 12365  1187  178E               	bsf	14,7	;volatile
 12366  1188  0008               	return
 12367  1189                     __end_of_TMR2_Initialize:	
 12368                           
 12369                           	psect	text25
 12370  11AA                     __ptext25:	
 12371 ;; *************** function _PWM_Initialize *****************
 12372 ;; Defined at:
 12373 ;;		line 3 in file "pwm.c"
 12374 ;; Parameters:    Size  Location     Type
 12375 ;;		None
 12376 ;; Auto vars:     Size  Location     Type
 12377 ;;		None
 12378 ;; Return value:  Size  Location     Type
 12379 ;;                  1    wreg      void 
 12380 ;; Registers used:
 12381 ;;		wreg, status,2, status,0
 12382 ;; Tracked objects:
 12383 ;;		On entry : 0/0
 12384 ;;		On exit  : 0/0
 12385 ;;		Unchanged: 0/0
 12386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12387 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12388 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12389 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12390 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12391 ;;Total ram usage:        0 bytes
 12392 ;; Hardware stack levels used:    1
 12393 ;; This function calls:
 12394 ;;		Nothing
 12395 ;; This function is called by:
 12396 ;;		_SYSTEM_Initialize
 12397 ;; This function uses a non-reentrant model
 12398 ;;
 12399                           
 12400                           
 12401                           ;psect for function _PWM_Initialize
 12402  11AA                     _PWM_Initialize:	
 12403                           
 12404                           ;pwm.c: 5: PWM6CON = 0x80;
 12405                           
 12406                           ;incstack = 0
 12407                           ; Regs used in _PWM_Initialize: [wreg+status,2+status,0]
 12408  11AA  3080               	movlw	128
 12409  11AB  0027               	movlb	7	; select bank7
 12410  11AC  008E               	movwf	14	;volatile
 12411                           
 12412                           ;pwm.c: 7: PWM6DCH = 0x00;
 12413  11AD  018D               	clrf	13	;volatile
 12414                           
 12415                           ;pwm.c: 9: PWM6DCL = 0x00;
 12416  11AE  018C               	clrf	12	;volatile
 12417                           
 12418                           ;pwm.c: 11: CCPTMRS1bits.P6TSEL = 0x01;
 12419  11AF  0024               	movlb	4	; select bank4
 12420  11B0  081F               	movf	31,w	;volatile
 12421  11B1  39F3               	andlw	-13
 12422  11B2  3804               	iorlw	4
 12423  11B3  009F               	movwf	31	;volatile
 12424                           
 12425                           ;pwm.c: 14: PWM7CON = 0x80;
 12426  11B4  3080               	movlw	128
 12427  11B5  0027               	movlb	7	; select bank7
 12428  11B6  0092               	movwf	18	;volatile
 12429                           
 12430                           ;pwm.c: 16: PWM7DCH = 0x00;
 12431  11B7  0191               	clrf	17	;volatile
 12432                           
 12433                           ;pwm.c: 18: PWM7DCL = 0x00;
 12434  11B8  0190               	clrf	16	;volatile
 12435                           
 12436                           ;pwm.c: 20: CCPTMRS1bits.P7TSEL = 0x02;
 12437  11B9  0024               	movlb	4	; select bank4
 12438  11BA  081F               	movf	31,w	;volatile
 12439  11BB  39CF               	andlw	-49
 12440  11BC  3820               	iorlw	32
 12441  11BD  009F               	movwf	31	;volatile
 12442  11BE  0008               	return
 12443  11BF                     __end_of_PWM_Initialize:	
 12444                           
 12445                           	psect	text26
 12446  1310                     __ptext26:	
 12447 ;; *************** function _PIN_MANAGER_Initialize *****************
 12448 ;; Defined at:
 12449 ;;		line 5 in file "pin_manager.c"
 12450 ;; Parameters:    Size  Location     Type
 12451 ;;		None
 12452 ;; Auto vars:     Size  Location     Type
 12453 ;;  state           1    0[COMMON] char 
 12454 ;; Return value:  Size  Location     Type
 12455 ;;                  1    wreg      void 
 12456 ;; Registers used:
 12457 ;;		wreg, status,2
 12458 ;; Tracked objects:
 12459 ;;		On entry : 0/0
 12460 ;;		On exit  : 0/0
 12461 ;;		Unchanged: 0/0
 12462 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12463 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12464 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12465 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12466 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12467 ;;Total ram usage:        1 bytes
 12468 ;; Hardware stack levels used:    1
 12469 ;; This function calls:
 12470 ;;		Nothing
 12471 ;; This function is called by:
 12472 ;;		_SYSTEM_Initialize
 12473 ;; This function uses a non-reentrant model
 12474 ;;
 12475                           
 12476                           
 12477                           ;psect for function _PIN_MANAGER_Initialize
 12478  1310                     _PIN_MANAGER_Initialize:	
 12479                           
 12480                           ;pin_manager.c: 7: LATA = 0x20;
 12481                           
 12482                           ;incstack = 0
 12483                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
 12484  1310  3020               	movlw	32
 12485  1311  0020               	movlb	0	; select bank0
 12486  1312  0096               	movwf	22	;volatile
 12487                           
 12488                           ;pin_manager.c: 8: LATB = 0x00;
 12489  1313  0197               	clrf	23	;volatile
 12490                           
 12491                           ;pin_manager.c: 9: LATC = 0x00;
 12492  1314  0198               	clrf	24	;volatile
 12493                           
 12494                           ;pin_manager.c: 11: WPUA = 0x00;
 12495  1315  003E               	movlb	30	; select bank30
 12496  1316  01B9               	clrf	57	;volatile
 12497                           
 12498                           ;pin_manager.c: 12: WPUB = 0x00;
 12499  1317  01C4               	clrf	68	;volatile
 12500                           
 12501                           ;pin_manager.c: 13: WPUC = 0x00;
 12502  1318  01CF               	clrf	79	;volatile
 12503                           
 12504                           ;pin_manager.c: 14: WPUE = 0x8;
 12505  1319  3008               	movlw	8
 12506  131A  00E5               	movwf	101	;volatile
 12507                           
 12508                           ;pin_manager.c: 16: TRISA = 0x00;
 12509  131B  0020               	movlb	0	; select bank0
 12510  131C  0191               	clrf	17	;volatile
 12511                           
 12512                           ;pin_manager.c: 17: TRISB = 0x0E;
 12513  131D  300E               	movlw	14
 12514  131E  0092               	movwf	18	;volatile
 12515                           
 12516                           ;pin_manager.c: 18: TRISC = 0xFF;
 12517  131F  30FF               	movlw	255
 12518  1320  0093               	movwf	19	;volatile
 12519                           
 12520                           ;pin_manager.c: 20: ANSELA = 0x00;
 12521  1321  003E               	movlb	30	; select bank30
 12522  1322  01B8               	clrf	56	;volatile
 12523                           
 12524                           ;pin_manager.c: 21: ANSELB = 0x0A;
 12525  1323  300A               	movlw	10
 12526  1324  00C3               	movwf	67	;volatile
 12527                           
 12528                           ;pin_manager.c: 22: ANSELC = 0xFF;
 12529  1325  30FF               	movlw	255
 12530  1326  00CE               	movwf	78	;volatile
 12531                           
 12532                           ;pin_manager.c: 25: PIE0bits.IOCIE = 0;
 12533  1327  002E               	movlb	14	; select bank14
 12534  1328  1216               	bcf	22,4	;volatile
 12535                           
 12536                           ;pin_manager.c: 26: int8_t state = GIE;
 12537  1329  3000               	movlw	0
 12538  132A  1B8B               	btfsc	11,7	;volatile
 12539  132B  3001               	movlw	1
 12540  132C  00F0               	movwf	PIN_MANAGER_Initialize@state
 12541                           
 12542                           ;pin_manager.c: 27: GIE = 0;
 12543  132D  138B               	bcf	11,7	;volatile
 12544                           
 12545                           ;pin_manager.c: 28: PPSLOCK = 0x55;
 12546  132E  3055               	movlw	85
 12547  132F  003D               	movlb	29	; select bank29
 12548  1330  008F               	movwf	15	;volsfr
 12549                           
 12550                           ;pin_manager.c: 29: PPSLOCK = 0xAA;
 12551  1331  30AA               	movlw	170
 12552  1332  008F               	movwf	15	;volsfr
 12553                           
 12554                           ;pin_manager.c: 30: PPSLOCKbits.PPSLOCKED = 0x00;
 12555  1333  100F               	bcf	15,0	;volsfr
 12556                           
 12557                           ;pin_manager.c: 32: RA6PPS = 0x0E;
 12558  1334  300E               	movlw	14
 12559  1335  003E               	movlb	30	; select bank30
 12560  1336  0096               	movwf	22	;volatile
 12561                           
 12562                           ;pin_manager.c: 33: RA7PPS = 0x0F;
 12563  1337  300F               	movlw	15
 12564  1338  0097               	movwf	23	;volatile
 12565                           
 12566                           ;pin_manager.c: 34: RB0PPS = 0x09;
 12567  1339  3009               	movlw	9
 12568  133A  0098               	movwf	24	;volatile
 12569                           
 12570                           ;pin_manager.c: 35: PPSLOCK = 0x55;
 12571  133B  3055               	movlw	85
 12572  133C  003D               	movlb	29	; select bank29
 12573  133D  008F               	movwf	15	;volsfr
 12574                           
 12575                           ;pin_manager.c: 36: PPSLOCK = 0xAA;
 12576  133E  30AA               	movlw	170
 12577  133F  008F               	movwf	15	;volsfr
 12578                           
 12579                           ;pin_manager.c: 37: PPSLOCKbits.PPSLOCKED = 0x01;
 12580  1340  140F               	bsf	15,0	;volsfr
 12581                           
 12582                           ;pin_manager.c: 38: GIE = state;
 12583  1341  1C70               	btfss	PIN_MANAGER_Initialize@state,0
 12584  1342  2B45               	goto	u2590
 12585  1343  178B               	bsf	11,7	;volatile
 12586  1344  0008               	return
 12587  1345                     u2590:	
 12588  1345  138B               	bcf	11,7	;volatile
 12589  1346  0008               	return
 12590  1347                     __end_of_PIN_MANAGER_Initialize:	
 12591                           
 12592                           	psect	text27
 12593  1166                     __ptext27:	
 12594 ;; *************** function _OSCILLATOR_Initialize *****************
 12595 ;; Defined at:
 12596 ;;		line 89 in file "system.c"
 12597 ;; Parameters:    Size  Location     Type
 12598 ;;		None
 12599 ;; Auto vars:     Size  Location     Type
 12600 ;;		None
 12601 ;; Return value:  Size  Location     Type
 12602 ;;                  1    wreg      void 
 12603 ;; Registers used:
 12604 ;;		wreg, status,2
 12605 ;; Tracked objects:
 12606 ;;		On entry : 0/0
 12607 ;;		On exit  : 0/0
 12608 ;;		Unchanged: 0/0
 12609 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12610 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12611 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12612 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12613 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12614 ;;Total ram usage:        0 bytes
 12615 ;; Hardware stack levels used:    1
 12616 ;; This function calls:
 12617 ;;		Nothing
 12618 ;; This function is called by:
 12619 ;;		_SYSTEM_Initialize
 12620 ;; This function uses a non-reentrant model
 12621 ;;
 12622                           
 12623                           
 12624                           ;psect for function _OSCILLATOR_Initialize
 12625  1166                     _OSCILLATOR_Initialize:	
 12626                           
 12627                           ;system.c: 91: OSCCON1 = 0x60;
 12628                           
 12629                           ;incstack = 0
 12630                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 12631  1166  3060               	movlw	96
 12632  1167  0031               	movlb	17	; select bank17
 12633  1168  008D               	movwf	13	;volatile
 12634                           
 12635                           ;system.c: 92: OSCCON3 = 0x00;
 12636  1169  018F               	clrf	15	;volatile
 12637                           
 12638                           ;system.c: 93: OSCEN = 0x00;
 12639  116A  0191               	clrf	17	;volatile
 12640                           
 12641                           ;system.c: 94: OSCFRQ = 0x06;
 12642  116B  3006               	movlw	6
 12643  116C  0093               	movwf	19	;volatile
 12644                           
 12645                           ;system.c: 95: OSCTUNE = 0x00;
 12646  116D  0192               	clrf	18	;volatile
 12647  116E  0008               	return
 12648  116F                     __end_of_OSCILLATOR_Initialize:	
 12649                           
 12650                           	psect	text28
 12651  1380                     __ptext28:	
 12652 ;; *************** function _LCDInit *****************
 12653 ;; Defined at:
 12654 ;;		line 247 in file "lcd.c"
 12655 ;; Parameters:    Size  Location     Type
 12656 ;;		None
 12657 ;; Auto vars:     Size  Location     Type
 12658 ;;		None
 12659 ;; Return value:  Size  Location     Type
 12660 ;;                  1    wreg      void 
 12661 ;; Registers used:
 12662 ;;		wreg, status,2, status,0, pclath, cstack
 12663 ;; Tracked objects:
 12664 ;;		On entry : 0/0
 12665 ;;		On exit  : 0/0
 12666 ;;		Unchanged: 0/0
 12667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12668 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12669 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12670 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12671 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12672 ;;Total ram usage:        1 bytes
 12673 ;; Hardware stack levels used:    1
 12674 ;; Hardware stack levels required when called:    1
 12675 ;; This function calls:
 12676 ;;		_LCDWrite
 12677 ;; This function is called by:
 12678 ;;		_SYSTEM_Initialize
 12679 ;;		_main
 12680 ;; This function uses a non-reentrant model
 12681 ;;
 12682                           
 12683                           
 12684                           ;psect for function _LCDInit
 12685  1380                     _LCDInit:	
 12686                           
 12687                           ;lcd.c: 249: TRISAbits.TRISA0 = 0;
 12688                           
 12689                           ;incstack = 0
 12690                           ; Regs used in _LCDInit: [wreg+status,2+status,0+pclath+cstack]
 12691  1380  0020               	movlb	0	; select bank0
 12692  1381  1011               	bcf	17,0	;volatile
 12693                           
 12694                           ;lcd.c: 250: TRISAbits.TRISA1 = 0;
 12695  1382  1091               	bcf	17,1	;volatile
 12696                           
 12697                           ;lcd.c: 251: TRISAbits.TRISA2 = 0;
 12698  1383  1111               	bcf	17,2	;volatile
 12699                           
 12700                           ;lcd.c: 252: TRISAbits.TRISA3 = 0;
 12701  1384  1191               	bcf	17,3	;volatile
 12702                           
 12703                           ;lcd.c: 253: TRISAbits.TRISA4 = 0;
 12704  1385  1211               	bcf	17,4	;volatile
 12705                           
 12706                           ;lcd.c: 254: LATAbits.LATA3 = 0;
 12707  1386  1196               	bcf	22,3	;volatile
 12708                           
 12709                           ;lcd.c: 255: LATAbits.LATA4 = 0;
 12710  1387  1216               	bcf	22,4	;volatile
 12711                           
 12712                           ;lcd.c: 256: LATAbits.LATA2 = 0;
 12713  1388  1116               	bcf	22,2	;volatile
 12714                           
 12715                           ;lcd.c: 257: LATAbits.LATA0 = 0;
 12716  1389  1016               	bcf	22,0	;volatile
 12717                           
 12718                           ;lcd.c: 259: LATAbits.LATA0 = 1;
 12719  138A  1416               	bsf	22,0	;volatile
 12720                           
 12721                           ;lcd.c: 261: LCDWrite(0, 0x21);
 12722  138B  3021               	movlw	33
 12723  138C  00F5               	movwf	??_LCDInit
 12724  138D  0875               	movf	??_LCDInit,w
 12725  138E  00F0               	movwf	LCDWrite@data
 12726  138F  3000               	movlw	0
 12727  1390  3192  2265  3193   	fcall	_LCDWrite
 12728                           
 12729                           ;lcd.c: 269: LCDWrite(0, 0XB9);
 12730  1393  30B9               	movlw	185
 12731  1394  00F5               	movwf	??_LCDInit
 12732  1395  0875               	movf	??_LCDInit,w
 12733  1396  00F0               	movwf	LCDWrite@data
 12734  1397  3000               	movlw	0
 12735  1398  3192  2265  3193   	fcall	_LCDWrite
 12736                           
 12737                           ;lcd.c: 271: LCDWrite(0, 0x04);
 12738  139B  3004               	movlw	4
 12739  139C  00F5               	movwf	??_LCDInit
 12740  139D  0875               	movf	??_LCDInit,w
 12741  139E  00F0               	movwf	LCDWrite@data
 12742  139F  3000               	movlw	0
 12743  13A0  3192  2265  3193   	fcall	_LCDWrite
 12744                           
 12745                           ;lcd.c: 273: LCDWrite(0, 0x14);
 12746  13A3  3014               	movlw	20
 12747  13A4  00F5               	movwf	??_LCDInit
 12748  13A5  0875               	movf	??_LCDInit,w
 12749  13A6  00F0               	movwf	LCDWrite@data
 12750  13A7  3000               	movlw	0
 12751  13A8  3192  2265  3193   	fcall	_LCDWrite
 12752                           
 12753                           ;lcd.c: 275: LCDWrite(0, 0x20);
 12754  13AB  3020               	movlw	32
 12755  13AC  00F5               	movwf	??_LCDInit
 12756  13AD  0875               	movf	??_LCDInit,w
 12757  13AE  00F0               	movwf	LCDWrite@data
 12758  13AF  3000               	movlw	0
 12759  13B0  3192  2265  3193   	fcall	_LCDWrite
 12760                           
 12761                           ;lcd.c: 277: LCDWrite(0, 0x0C);
 12762  13B3  300C               	movlw	12
 12763  13B4  00F5               	movwf	??_LCDInit
 12764  13B5  0875               	movf	??_LCDInit,w
 12765  13B6  00F0               	movwf	LCDWrite@data
 12766  13B7  3000               	movlw	0
 12767  13B8  3192  2265         	fcall	_LCDWrite
 12768  13BA  0008               	return
 12769  13BB                     __end_of_LCDInit:	
 12770                           
 12771                           	psect	text29
 12772  128A                     __ptext29:	
 12773 ;; *************** function _LCDClear *****************
 12774 ;; Defined at:
 12775 ;;		line 182 in file "lcd.c"
 12776 ;; Parameters:    Size  Location     Type
 12777 ;;		None
 12778 ;; Auto vars:     Size  Location     Type
 12779 ;;  index           2    9[COMMON] int 
 12780 ;; Return value:  Size  Location     Type
 12781 ;;                  1    wreg      void 
 12782 ;; Registers used:
 12783 ;;		wreg, status,2, status,0, pclath, cstack
 12784 ;; Tracked objects:
 12785 ;;		On entry : 0/0
 12786 ;;		On exit  : 0/0
 12787 ;;		Unchanged: 0/0
 12788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12789 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12790 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12791 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12792 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12793 ;;Total ram usage:        3 bytes
 12794 ;; Hardware stack levels used:    1
 12795 ;; Hardware stack levels required when called:    2
 12796 ;; This function calls:
 12797 ;;		_LCDWrite
 12798 ;;		_gotoXY
 12799 ;; This function is called by:
 12800 ;;		_SYSTEM_Initialize
 12801 ;;		_main
 12802 ;; This function uses a non-reentrant model
 12803 ;;
 12804                           
 12805                           
 12806                           ;psect for function _LCDClear
 12807  128A                     _LCDClear:	
 12808                           
 12809                           ;lcd.c: 184: int index;
 12810                           ;lcd.c: 185: for (index = 0 ; index < (84 * 48 / 8) ; index++)
 12811                           
 12812                           ;incstack = 0
 12813                           ; Regs used in _LCDClear: [wreg+status,2+status,0+pclath+cstack]
 12814  128A  01F9               	clrf	LCDClear@index
 12815  128B  01FA               	clrf	LCDClear@index+1
 12816  128C  087A               	movf	LCDClear@index+1,w
 12817  128D  3A80               	xorlw	128
 12818  128E  00F8               	movwf	??_LCDClear
 12819  128F  3081               	movlw	129
 12820  1290  0278               	subwf	??_LCDClear,w
 12821  1291  1D03               	skipz
 12822  1292  2A95               	goto	u2575
 12823  1293  30F8               	movlw	248
 12824  1294  0279               	subwf	LCDClear@index,w
 12825  1295                     u2575:	
 12826  1295  1803               	btfsc	3,0
 12827  1296  2AAB               	goto	l2508
 12828  1297                     l2502:	
 12829                           
 12830                           ;lcd.c: 186: LCDWrite(1, 0x00);
 12831  1297  01F0               	clrf	LCDWrite@data
 12832  1298  3001               	movlw	1
 12833  1299  3192  2265  3192   	fcall	_LCDWrite
 12834  129C  3001               	movlw	1
 12835  129D  07F9               	addwf	LCDClear@index,f
 12836  129E  3000               	movlw	0
 12837  129F  3DFA               	addwfc	LCDClear@index+1,f
 12838  12A0  087A               	movf	LCDClear@index+1,w
 12839  12A1  3A80               	xorlw	128
 12840  12A2  00F8               	movwf	??_LCDClear
 12841  12A3  3081               	movlw	129
 12842  12A4  0278               	subwf	??_LCDClear,w
 12843  12A5  1D03               	skipz
 12844  12A6  2AA9               	goto	u2585
 12845  12A7  30F8               	movlw	248
 12846  12A8  0279               	subwf	LCDClear@index,w
 12847  12A9                     u2585:	
 12848  12A9  1C03               	skipc
 12849  12AA  2A97               	goto	l2502
 12850  12AB                     l2508:	
 12851                           
 12852                           ;lcd.c: 187: gotoXY(0, 0);
 12853  12AB  01F5               	clrf	gotoXY@y
 12854  12AC  3000               	movlw	0
 12855  12AD  3191  2197         	fcall	_gotoXY
 12856  12AF  0008               	return
 12857  12B0                     __end_of_LCDClear:	
 12858                           
 12859                           	psect	text30
 12860  12DC                     __ptext30:	
 12861 ;; *************** function _Init_Battery_State_Machine *****************
 12862 ;; Defined at:
 12863 ;;		line 19 in file "battery_charger.c"
 12864 ;; Parameters:    Size  Location     Type
 12865 ;;  z               1    wreg     unsigned char 
 12866 ;; Auto vars:     Size  Location     Type
 12867 ;;  z               1    1[COMMON] unsigned char 
 12868 ;; Return value:  Size  Location     Type
 12869 ;;                  1    wreg      void 
 12870 ;; Registers used:
 12871 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12872 ;; Tracked objects:
 12873 ;;		On entry : 0/0
 12874 ;;		On exit  : 0/0
 12875 ;;		Unchanged: 0/0
 12876 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12877 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12878 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12879 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12880 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12881 ;;Total ram usage:        2 bytes
 12882 ;; Hardware stack levels used:    1
 12883 ;; This function calls:
 12884 ;;		Nothing
 12885 ;; This function is called by:
 12886 ;;		_SYSTEM_Initialize
 12887 ;; This function uses a non-reentrant model
 12888 ;;
 12889                           
 12890                           
 12891                           ;psect for function _Init_Battery_State_Machine
 12892  12DC                     _Init_Battery_State_Machine:	
 12893                           
 12894                           ;incstack = 0
 12895                           ; Regs used in _Init_Battery_State_Machine: [wreg+fsr1l+fsr1h+status,2+status,0]
 12896                           ;Init_Battery_State_Machine@z stored from wreg
 12897  12DC  00F1               	movwf	Init_Battery_State_Machine@z
 12898                           
 12899                           ;battery_charger.c: 21: batteryState[z] = PRECHARGE;
 12900  12DD  3003               	movlw	3
 12901  12DE  00F0               	movwf	??_Init_Battery_State_Machine
 12902  12DF  0871               	movf	Init_Battery_State_Machine@z,w
 12903  12E0  3EC0               	addlw	(low (_batteryState| 0))& (0+255)
 12904  12E1  0086               	movwf	6
 12905  12E2  0187               	clrf	7
 12906  12E3  0870               	movf	??_Init_Battery_State_Machine,w
 12907  12E4  0081               	movwf	1
 12908                           
 12909                           ;battery_charger.c: 22: stateCounter[z] = 3;
 12910  12E5  3571               	lslf	Init_Battery_State_Machine@z,w
 12911  12E6  3E49               	addlw	(low (_stateCounter| (0+256)))& (0+255)
 12912  12E7  0086               	movwf	6
 12913  12E8  3001               	movlw	1	; select bank2/3
 12914  12E9  0087               	movwf	7
 12915  12EA  3003               	movlw	3
 12916  12EB  3FC0               	movwi [0]fsr1
 12917  12EC  3000               	movlw	0
 12918  12ED  3FC1               	movwi [1]fsr1
 12919                           
 12920                           ;battery_charger.c: 24: Iref[z]=10;
 12921  12EE  3571               	lslf	Init_Battery_State_Machine@z,w
 12922  12EF  3EB4               	addlw	(low (_Iref| 0))& (0+255)
 12923  12F0  0086               	movwf	6
 12924  12F1  0187               	clrf	7
 12925  12F2  300A               	movlw	10
 12926  12F3  3FC0               	movwi [0]fsr1
 12927  12F4  3000               	movlw	0
 12928  12F5  3FC1               	movwi [1]fsr1
 12929                           
 12930                           ;battery_charger.c: 25: Vref[z]=1445;
 12931  12F6  3571               	lslf	Init_Battery_State_Machine@z,w
 12932  12F7  3EB8               	addlw	(low (_Vref| 0))& (0+255)
 12933  12F8  0086               	movwf	6
 12934  12F9  0187               	clrf	7
 12935  12FA  30A5               	movlw	165
 12936  12FB  3FC0               	movwi [0]fsr1
 12937  12FC  3005               	movlw	5
 12938  12FD  3FC1               	movwi [1]fsr1
 12939                           
 12940                           ;battery_charger.c: 27: Imin[z]=17;
 12941  12FE  3571               	lslf	Init_Battery_State_Machine@z,w
 12942  12FF  3E45               	addlw	(low (_Imin| (0+256)))& (0+255)
 12943  1300  0086               	movwf	6
 12944  1301  3001               	movlw	1	; select bank2/3
 12945  1302  0087               	movwf	7
 12946  1303  3011               	movlw	17
 12947  1304  3FC0               	movwi [0]fsr1
 12948  1305  3000               	movlw	0
 12949  1306  3FC1               	movwi [1]fsr1
 12950                           
 12951                           ;battery_charger.c: 28: IminCount[z] = 100;
 12952  1307  3571               	lslf	Init_Battery_State_Machine@z,w
 12953  1308  3EB0               	addlw	(low (_IminCount| 0))& (0+255)
 12954  1309  0086               	movwf	6
 12955  130A  0187               	clrf	7
 12956  130B  3064               	movlw	100
 12957  130C  3FC0               	movwi [0]fsr1
 12958  130D  3000               	movlw	0
 12959  130E  3FC1               	movwi [1]fsr1
 12960  130F  0008               	return
 12961  1310                     __end_of_Init_Battery_State_Machine:	
 12962                           
 12963                           	psect	text31
 12964  1226                     __ptext31:	
 12965 ;; *************** function _ADC_Initialize *****************
 12966 ;; Defined at:
 12967 ;;		line 111 in file "adc.c"
 12968 ;; Parameters:    Size  Location     Type
 12969 ;;		None
 12970 ;; Auto vars:     Size  Location     Type
 12971 ;;		None
 12972 ;; Return value:  Size  Location     Type
 12973 ;;                  1    wreg      void 
 12974 ;; Registers used:
 12975 ;;		wreg, status,2
 12976 ;; Tracked objects:
 12977 ;;		On entry : 0/0
 12978 ;;		On exit  : 0/0
 12979 ;;		Unchanged: 0/0
 12980 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12981 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12982 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12983 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12984 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12985 ;;Total ram usage:        0 bytes
 12986 ;; Hardware stack levels used:    1
 12987 ;; This function calls:
 12988 ;;		Nothing
 12989 ;; This function is called by:
 12990 ;;		_SYSTEM_Initialize
 12991 ;; This function uses a non-reentrant model
 12992 ;;
 12993                           
 12994                           
 12995                           ;psect for function _ADC_Initialize
 12996  1226                     _ADC_Initialize:	
 12997                           
 12998                           ;adc.c: 113: ADCON1 = 0x00;
 12999                           
 13000                           ;incstack = 0
 13001                           ; Regs used in _ADC_Initialize: [wreg+status,2]
 13002  1226  0021               	movlb	1	; select bank1
 13003  1227  0194               	clrf	20	;volatile
 13004                           
 13005                           ;adc.c: 115: ADCON2 = 0x00;
 13006  1228  0195               	clrf	21	;volatile
 13007                           
 13008                           ;adc.c: 117: ADCON3 = 0x00;
 13009  1229  0196               	clrf	22	;volatile
 13010                           
 13011                           ;adc.c: 119: ADACT = 0x00;
 13012  122A  0199               	clrf	25	;volatile
 13013                           
 13014                           ;adc.c: 121: ADSTAT = 0x00;
 13015  122B  0197               	clrf	23	;volatile
 13016                           
 13017                           ;adc.c: 123: FVRCON = 0b11000011;
 13018  122C  30C3               	movlw	195
 13019  122D  0032               	movlb	18	; select bank18
 13020  122E  008C               	movwf	12	;volatile
 13021                           
 13022                           ;adc.c: 124: ADCLK = 0x3F;
 13023  122F  303F               	movlw	63
 13024  1230  0021               	movlb	1	; select bank1
 13025  1231  0098               	movwf	24	;volatile
 13026                           
 13027                           ;adc.c: 131: ADREF = 0x03;
 13028  1232  3003               	movlw	3
 13029  1233  009A               	movwf	26	;volatile
 13030                           
 13031                           ;adc.c: 134: ADCAP = 0x00;
 13032  1234  019B               	clrf	27	;volatile
 13033                           
 13034                           ;adc.c: 137: ADPRE = 0x07;
 13035  1235  3007               	movlw	7
 13036  1236  009C               	movwf	28	;volatile
 13037                           
 13038                           ;adc.c: 139: ADACQ = 0x00;
 13039  1237  019D               	clrf	29	;volatile
 13040                           
 13041                           ;adc.c: 141: ADPCH = 0x00;
 13042  1238  019E               	clrf	30	;volatile
 13043                           
 13044                           ;adc.c: 143: ADRPT = 0x00;
 13045  1239  0022               	movlb	2	; select bank2
 13046  123A  018D               	clrf	13	;volatile
 13047                           
 13048                           ;adc.c: 145: ADLTHL = 0x00;
 13049  123B  018E               	clrf	14	;volatile
 13050                           
 13051                           ;adc.c: 147: ADLTHH = 0x00;
 13052  123C  018F               	clrf	15	;volatile
 13053                           
 13054                           ;adc.c: 149: ADUTHL = 0x00;
 13055  123D  0190               	clrf	16	;volatile
 13056                           
 13057                           ;adc.c: 151: ADUTHH = 0x00;
 13058  123E  0191               	clrf	17	;volatile
 13059                           
 13060                           ;adc.c: 153: ADSTPTL = 0x00;
 13061  123F  0192               	clrf	18	;volatile
 13062                           
 13063                           ;adc.c: 155: ADSTPTH = 0x00;
 13064  1240  0193               	clrf	19	;volatile
 13065                           
 13066                           ;adc.c: 157: ADCON0 = 0x84;
 13067  1241  3084               	movlw	132
 13068  1242  0021               	movlb	1	; select bank1
 13069  1243  0093               	movwf	19	;volatile
 13070  1244  0008               	return
 13071  1245                     __end_of_ADC_Initialize:	
 13072                           
 13073                           	psect	text32
 13074  0004                     __ptext32:	
 13075 ;; *************** function _PWM7_LoadDutyValue *****************
 13076 ;; Defined at:
 13077 ;;		line 37 in file "pwm.c"
 13078 ;; Parameters:    Size  Location     Type
 13079 ;;  dutyCycle7      2    0[COMMON] unsigned int 
 13080 ;; Auto vars:     Size  Location     Type
 13081 ;;		None
 13082 ;; Return value:  Size  Location     Type
 13083 ;;                  1    wreg      void 
 13084 ;; Registers used:
 13085 ;;		wreg, status,2, status,0
 13086 ;; Tracked objects:
 13087 ;;		On entry : 0/0
 13088 ;;		On exit  : 0/0
 13089 ;;		Unchanged: 0/0
 13090 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13091 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13092 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13093 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13094 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13095 ;;Total ram usage:        4 bytes
 13096 ;; Hardware stack levels used:    1
 13097 ;; This function calls:
 13098 ;;		Nothing
 13099 ;; This function is called by:
 13100 ;;		_main
 13101 ;; This function uses a non-reentrant model
 13102 ;;
 13103                           
 13104                           
 13105                           ;psect for function _PWM7_LoadDutyValue
 13106  0004                     _PWM7_LoadDutyValue:	
 13107                           
 13108                           ;pwm.c: 39: PWM7DCH = (dutyCycle7 & 0x03FC)>>2;
 13109                           
 13110                           ;incstack = 0
 13111                           ; Regs used in _PWM7_LoadDutyValue: [wreg+status,2+status,0]
 13112  0004  0871               	movf	PWM7_LoadDutyValue@dutyCycle7+1,w
 13113  0005  00F3               	movwf	??_PWM7_LoadDutyValue+1
 13114  0006  0870               	movf	PWM7_LoadDutyValue@dutyCycle7,w
 13115  0007  00F2               	movwf	??_PWM7_LoadDutyValue
 13116  0008  36F3               	lsrf	??_PWM7_LoadDutyValue+1,f
 13117  0009  0CF2               	rrf	??_PWM7_LoadDutyValue,f
 13118  000A  36F3               	lsrf	??_PWM7_LoadDutyValue+1,f
 13119  000B  0CF2               	rrf	??_PWM7_LoadDutyValue,f
 13120  000C  0872               	movf	??_PWM7_LoadDutyValue,w
 13121  000D  0027               	movlb	7	; select bank7
 13122  000E  0091               	movwf	17	;volatile
 13123                           
 13124                           ;pwm.c: 41: PWM7DCL = (dutyCycle7 & 0x0003)<<6;
 13125  000F  0870               	movf	PWM7_LoadDutyValue@dutyCycle7,w
 13126  0010  3903               	andlw	3
 13127  0011  00F2               	movwf	??_PWM7_LoadDutyValue
 13128  0012  3005               	movlw	5
 13129  0013                     u3345:	
 13130  0013  35F2               	lslf	??_PWM7_LoadDutyValue,f
 13131  0014  3EFF               	addlw	-1
 13132  0015  1D03               	skipz
 13133  0016  2813               	goto	u3345
 13134  0017  3572               	lslf	??_PWM7_LoadDutyValue,w
 13135  0018  0090               	movwf	16	;volatile
 13136  0019  0008               	return
 13137  001A                     __end_of_PWM7_LoadDutyValue:	
 13138                           
 13139                           	psect	text33
 13140  11D4                     __ptext33:	
 13141 ;; *************** function _PWM6_LoadDutyValue *****************
 13142 ;; Defined at:
 13143 ;;		line 30 in file "pwm.c"
 13144 ;; Parameters:    Size  Location     Type
 13145 ;;  dutyCycle6      2    0[COMMON] unsigned int 
 13146 ;; Auto vars:     Size  Location     Type
 13147 ;;		None
 13148 ;; Return value:  Size  Location     Type
 13149 ;;                  1    wreg      void 
 13150 ;; Registers used:
 13151 ;;		wreg, status,2, status,0
 13152 ;; Tracked objects:
 13153 ;;		On entry : 0/0
 13154 ;;		On exit  : 0/0
 13155 ;;		Unchanged: 0/0
 13156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13157 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13158 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13159 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13160 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13161 ;;Total ram usage:        4 bytes
 13162 ;; Hardware stack levels used:    1
 13163 ;; This function calls:
 13164 ;;		Nothing
 13165 ;; This function is called by:
 13166 ;;		_main
 13167 ;; This function uses a non-reentrant model
 13168 ;;
 13169                           
 13170                           
 13171                           ;psect for function _PWM6_LoadDutyValue
 13172  11D4                     _PWM6_LoadDutyValue:	
 13173                           
 13174                           ;pwm.c: 32: PWM6DCH = (dutyCycle6 & 0x03FC)>>2;
 13175                           
 13176                           ;incstack = 0
 13177                           ; Regs used in _PWM6_LoadDutyValue: [wreg+status,2+status,0]
 13178  11D4  0871               	movf	PWM6_LoadDutyValue@dutyCycle6+1,w
 13179  11D5  00F3               	movwf	??_PWM6_LoadDutyValue+1
 13180  11D6  0870               	movf	PWM6_LoadDutyValue@dutyCycle6,w
 13181  11D7  00F2               	movwf	??_PWM6_LoadDutyValue
 13182  11D8  36F3               	lsrf	??_PWM6_LoadDutyValue+1,f
 13183  11D9  0CF2               	rrf	??_PWM6_LoadDutyValue,f
 13184  11DA  36F3               	lsrf	??_PWM6_LoadDutyValue+1,f
 13185  11DB  0CF2               	rrf	??_PWM6_LoadDutyValue,f
 13186  11DC  0872               	movf	??_PWM6_LoadDutyValue,w
 13187  11DD  0027               	movlb	7	; select bank7
 13188  11DE  008D               	movwf	13	;volatile
 13189                           
 13190                           ;pwm.c: 34: PWM6DCL = (dutyCycle6 & 0x0003)<<6;
 13191  11DF  0870               	movf	PWM6_LoadDutyValue@dutyCycle6,w
 13192  11E0  3903               	andlw	3
 13193  11E1  00F2               	movwf	??_PWM6_LoadDutyValue
 13194  11E2  3005               	movlw	5
 13195  11E3                     u3335:	
 13196  11E3  35F2               	lslf	??_PWM6_LoadDutyValue,f
 13197  11E4  3EFF               	addlw	-1
 13198  11E5  1D03               	skipz
 13199  11E6  29E3               	goto	u3335
 13200  11E7  3572               	lslf	??_PWM6_LoadDutyValue,w
 13201  11E8  008C               	movwf	12	;volatile
 13202  11E9  0008               	return
 13203  11EA                     __end_of_PWM6_LoadDutyValue:	
 13204                           
 13205                           	psect	text34
 13206  0B32                     __ptext34:	
 13207 ;; *************** function _LCDWriteInt *****************
 13208 ;; Defined at:
 13209 ;;		line 190 in file "lcd.c"
 13210 ;; Parameters:    Size  Location     Type
 13211 ;;  value           2    8[BANK0 ] int 
 13212 ;;  fieldLength     1   10[BANK0 ] char 
 13213 ;;  numPlaces       1   11[BANK0 ] unsigned char 
 13214 ;;  sign            1   12[BANK0 ] unsigned char 
 13215 ;; Auto vars:     Size  Location     Type
 13216 ;;  str             5   17[BANK0 ] unsigned char [5]
 13217 ;;  i               1   23[BANK0 ] unsigned char 
 13218 ;;  j               1   22[BANK0 ] unsigned char 
 13219 ;; Return value:  Size  Location     Type
 13220 ;;                  1    wreg      void 
 13221 ;; Registers used:
 13222 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13223 ;; Tracked objects:
 13224 ;;		On entry : 0/0
 13225 ;;		On exit  : 0/0
 13226 ;;		Unchanged: 0/0
 13227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13228 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13229 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13230 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13231 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13232 ;;Total ram usage:       16 bytes
 13233 ;; Hardware stack levels used:    1
 13234 ;; Hardware stack levels required when called:    2
 13235 ;; This function calls:
 13236 ;;		_LCDWriteCharacter
 13237 ;;		___awdiv
 13238 ;;		___lwmod
 13239 ;; This function is called by:
 13240 ;;		_main
 13241 ;; This function uses a non-reentrant model
 13242 ;;
 13243                           
 13244                           
 13245                           ;psect for function _LCDWriteInt
 13246  0B32                     _LCDWriteInt:	
 13247                           
 13248                           ;lcd.c: 192: uint8_t str[5]={0,0,0,0,0};
 13249                           
 13250                           ;incstack = 0
 13251                           ; Regs used in _LCDWriteInt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13252  0B32  3040               	movlw	low LCDWriteInt@F14387
 13253  0B33  0086               	movwf	6
 13254  0B34  3001               	movlw	high LCDWriteInt@F14387
 13255  0B35  0087               	movwf	7
 13256  0B36  3031               	movlw	low LCDWriteInt@str
 13257  0B37  0084               	movwf	4
 13258  0B38  3000               	movlw	high LCDWriteInt@str
 13259  0B39  0085               	movwf	5
 13260  0B3A  3005               	movlw	5
 13261  0B3B  0020               	movlb	0	; select bank0
 13262  0B3C  00AD               	movwf	??_LCDWriteInt
 13263  0B3D                     u3240:	
 13264  0B3D  0016               	moviw fsr1++
 13265  0B3E  001A               	movwi fsr0++
 13266  0B3F  0BAD               	decfsz	??_LCDWriteInt,f
 13267  0B40  2B3D               	goto	u3240
 13268                           
 13269                           ;lcd.c: 193: uint8_t i=4,j=0;
 13270  0B41  3004               	movlw	4
 13271  0B42  00AD               	movwf	??_LCDWriteInt
 13272  0B43  082D               	movf	??_LCDWriteInt,w
 13273  0B44  00B7               	movwf	LCDWriteInt@i
 13274  0B45  01B6               	clrf	LCDWriteInt@j
 13275                           
 13276                           ;lcd.c: 195: if(value<0)
 13277  0B46  1FA9               	btfss	LCDWriteInt@value+1,7
 13278  0B47  2B53               	goto	l2898
 13279                           
 13280                           ;lcd.c: 196: {
 13281                           ;lcd.c: 197: LCDWriteCharacter('-');
 13282  0B48  302D               	movlw	45
 13283  0B49  3195  2596  318B   	fcall	_LCDWriteCharacter
 13284                           
 13285                           ;lcd.c: 198: value=value*-1;
 13286  0B4C  0020               	movlb	0	; select bank0
 13287  0B4D  09A8               	comf	LCDWriteInt@value,f
 13288  0B4E  09A9               	comf	LCDWriteInt@value+1,f
 13289  0B4F  0AA8               	incf	LCDWriteInt@value,f
 13290  0B50  1903               	skipnz
 13291  0B51  0AA9               	incf	LCDWriteInt@value+1,f
 13292                           
 13293                           ;lcd.c: 199: }
 13294  0B52  2B5A               	goto	l2908
 13295  0B53                     l2898:	
 13296                           
 13297                           ;lcd.c: 201: else
 13298                           ;lcd.c: 202: {
 13299                           ;lcd.c: 203: if(sign == 1)
 13300  0B53  032C               	decf	LCDWriteInt@sign,w
 13301  0B54  1D03               	btfss	3,2
 13302  0B55  2B5A               	goto	l2908
 13303                           
 13304                           ;lcd.c: 204: {
 13305                           ;lcd.c: 205: LCDWriteCharacter('+');
 13306  0B56  302B               	movlw	43
 13307  0B57  3195  2596  318B   	fcall	_LCDWriteCharacter
 13308  0B5A                     l2908:	
 13309                           ;lcd.c: 206: }
 13310                           ;lcd.c: 207: }
 13311                           ;lcd.c: 209: while(value)
 13312                           
 13313  0B5A  0020               	movlb	0	; select bank0
 13314  0B5B  0828               	movf	LCDWriteInt@value,w
 13315  0B5C  0429               	iorwf	LCDWriteInt@value+1,w
 13316  0B5D  1903               	btfsc	3,2
 13317  0B5E  2B87               	goto	l2910
 13318                           
 13319                           ;lcd.c: 210: {
 13320                           ;lcd.c: 211: str[i]=(uint16_t)value%10;
 13321  0B5F  300A               	movlw	10
 13322  0B60  00F0               	movwf	___lwmod@divisor
 13323  0B61  3000               	movlw	0
 13324  0B62  00F1               	movwf	___lwmod@divisor+1
 13325  0B63  0020               	movlb	0	; select bank0
 13326  0B64  0829               	movf	LCDWriteInt@value+1,w
 13327  0B65  00F3               	movwf	___lwmod@dividend+1
 13328  0B66  0828               	movf	LCDWriteInt@value,w
 13329  0B67  00F2               	movwf	___lwmod@dividend
 13330  0B68  3192  22B0  318B   	fcall	___lwmod
 13331  0B6B  0870               	movf	?___lwmod,w
 13332  0B6C  0020               	movlb	0	; select bank0
 13333  0B6D  00AD               	movwf	??_LCDWriteInt
 13334  0B6E  0837               	movf	LCDWriteInt@i,w
 13335  0B6F  3E31               	addlw	(low (LCDWriteInt@str| 0))& (0+255)
 13336  0B70  0086               	movwf	6
 13337  0B71  0187               	clrf	7
 13338  0B72  082D               	movf	??_LCDWriteInt,w
 13339  0B73  0081               	movwf	1
 13340                           
 13341                           ;lcd.c: 212: value=value/10;
 13342  0B74  300A               	movlw	10
 13343  0B75  00F0               	movwf	___awdiv@divisor
 13344  0B76  3000               	movlw	0
 13345  0B77  00F1               	movwf	___awdiv@divisor+1
 13346  0B78  0829               	movf	LCDWriteInt@value+1,w
 13347  0B79  00F3               	movwf	___awdiv@dividend+1
 13348  0B7A  0828               	movf	LCDWriteInt@value,w
 13349  0B7B  00F2               	movwf	___awdiv@dividend
 13350  0B7C  3195  2545  318B   	fcall	___awdiv
 13351  0B7F  0871               	movf	?___awdiv+1,w
 13352  0B80  0020               	movlb	0	; select bank0
 13353  0B81  00A9               	movwf	LCDWriteInt@value+1
 13354  0B82  0870               	movf	?___awdiv,w
 13355  0B83  00A8               	movwf	LCDWriteInt@value
 13356                           
 13357                           ;lcd.c: 213: i--;
 13358  0B84  3001               	movlw	1
 13359  0B85  02B7               	subwf	LCDWriteInt@i,f
 13360  0B86  2B5A               	goto	l2908
 13361  0B87                     l2910:	
 13362                           
 13363                           ;lcd.c: 214: }
 13364                           ;lcd.c: 215: if(fieldLength==-1)
 13365  0B87  0A2A               	incf	LCDWriteInt@fieldLength,w
 13366  0B88  1903               	btfsc	3,2
 13367  0B89  2B8F               	goto	l2916
 13368  0B8A  2B97               	goto	l2918
 13369  0B8B                     l2914:	
 13370                           ;lcd.c: 216: {
 13371                           ;lcd.c: 217: while(str[j]==0)
 13372                           
 13373                           
 13374                           ;lcd.c: 218: {
 13375                           ;lcd.c: 219: j++;
 13376  0B8B  3001               	movlw	1
 13377  0B8C  00AD               	movwf	??_LCDWriteInt
 13378  0B8D  082D               	movf	??_LCDWriteInt,w
 13379  0B8E  07B6               	addwf	LCDWriteInt@j,f
 13380  0B8F                     l2916:	
 13381  0B8F  0836               	movf	LCDWriteInt@j,w
 13382  0B90  3E31               	addlw	(low (LCDWriteInt@str| 0))& (0+255)
 13383  0B91  0086               	movwf	6
 13384  0B92  0187               	clrf	7
 13385  0B93  0801               	movf	1,w
 13386  0B94  1D03               	btfss	3,2
 13387  0B95  2B9D               	goto	l2920
 13388  0B96  2B8B               	goto	l2914
 13389  0B97                     l2918:	
 13390                           ;lcd.c: 220: }
 13391                           ;lcd.c: 221: }
 13392                           
 13393                           
 13394                           ;lcd.c: 222: else
 13395                           ;lcd.c: 223: {
 13396                           ;lcd.c: 224: j=(uint8_t)(5-fieldLength);
 13397  0B97  032A               	decf	LCDWriteInt@fieldLength,w
 13398  0B98  3AFF               	xorlw	255
 13399  0B99  3E05               	addlw	5
 13400  0B9A  00AD               	movwf	??_LCDWriteInt
 13401  0B9B  082D               	movf	??_LCDWriteInt,w
 13402  0B9C  00B6               	movwf	LCDWriteInt@j
 13403  0B9D                     l2920:	
 13404                           
 13405                           ;lcd.c: 225: }
 13406                           ;lcd.c: 227: for(i=j;i<(5-numPlaces);i++)
 13407  0B9D  0836               	movf	LCDWriteInt@j,w
 13408  0B9E  00AD               	movwf	??_LCDWriteInt
 13409  0B9F  082D               	movf	??_LCDWriteInt,w
 13410  0BA0  00B7               	movwf	LCDWriteInt@i
 13411  0BA1                     l2926:	
 13412  0BA1  082B               	movf	LCDWriteInt@numPlaces,w
 13413  0BA2  00AD               	movwf	??_LCDWriteInt
 13414  0BA3  01AE               	clrf	??_LCDWriteInt+1
 13415  0BA4  09AD               	comf	??_LCDWriteInt,f
 13416  0BA5  09AE               	comf	??_LCDWriteInt+1,f
 13417  0BA6  0AAD               	incf	??_LCDWriteInt,f
 13418  0BA7  1903               	skipnz
 13419  0BA8  0AAE               	incf	??_LCDWriteInt+1,f
 13420  0BA9  082D               	movf	??_LCDWriteInt,w
 13421  0BAA  3E05               	addlw	5
 13422  0BAB  00AF               	movwf	??_LCDWriteInt+2
 13423  0BAC  3000               	movlw	0
 13424  0BAD  3D2E               	addwfc	??_LCDWriteInt+1,w
 13425  0BAE  00B0               	movwf	??_LCDWriteInt+3
 13426  0BAF  0830               	movf	??_LCDWriteInt+3,w
 13427  0BB0  3A80               	xorlw	128
 13428  0BB1  3C80               	sublw	128
 13429  0BB2  1D03               	skipz
 13430  0BB3  2BB6               	goto	u3305
 13431  0BB4  082F               	movf	??_LCDWriteInt+2,w
 13432  0BB5  0237               	subwf	LCDWriteInt@i,w
 13433  0BB6                     u3305:	
 13434  0BB6  1803               	btfsc	3,0
 13435  0BB7  2BC8               	goto	l2928
 13436                           
 13437                           ;lcd.c: 228: {
 13438                           ;lcd.c: 229: LCDWriteCharacter((uint8_t)(48+str[i]));
 13439  0BB8  0020               	movlb	0	; select bank0
 13440  0BB9  0837               	movf	LCDWriteInt@i,w
 13441  0BBA  3E31               	addlw	(low (LCDWriteInt@str| 0))& (0+255)
 13442  0BBB  0086               	movwf	6
 13443  0BBC  0187               	clrf	7
 13444  0BBD  0801               	movf	1,w
 13445  0BBE  3E30               	addlw	48
 13446  0BBF  3195  2596  318B   	fcall	_LCDWriteCharacter
 13447  0BC2  3001               	movlw	1
 13448  0BC3  0020               	movlb	0	; select bank0
 13449  0BC4  00AD               	movwf	??_LCDWriteInt
 13450  0BC5  082D               	movf	??_LCDWriteInt,w
 13451  0BC6  07B7               	addwf	LCDWriteInt@i,f
 13452  0BC7  2BA1               	goto	l2926
 13453  0BC8                     l2928:	
 13454                           
 13455                           ;lcd.c: 230: }
 13456                           ;lcd.c: 232: if(numPlaces == 1)
 13457  0BC8  0020               	movlb	0	; select bank0
 13458  0BC9  032B               	decf	LCDWriteInt@numPlaces,w
 13459  0BCA  1D03               	btfss	3,2
 13460  0BCB  2BD6               	goto	l2932
 13461                           
 13462                           ;lcd.c: 233: {
 13463                           ;lcd.c: 234: LCDWriteCharacter(46);
 13464  0BCC  302E               	movlw	46
 13465  0BCD  3195  2596  318B   	fcall	_LCDWriteCharacter
 13466                           
 13467                           ;lcd.c: 235: LCDWriteCharacter ((uint8_t)(48+str[4]));
 13468  0BD0  0020               	movlb	0	; select bank0
 13469  0BD1  0835               	movf	LCDWriteInt@str+4,w
 13470  0BD2  3E30               	addlw	48
 13471  0BD3  3195  2596  318B   	fcall	_LCDWriteCharacter
 13472  0BD6                     l2932:	
 13473                           
 13474                           ;lcd.c: 236: }
 13475                           ;lcd.c: 238: if(numPlaces == 2)
 13476  0BD6  3002               	movlw	2
 13477  0BD7  0020               	movlb	0	; select bank0
 13478  0BD8  062B               	xorwf	LCDWriteInt@numPlaces,w
 13479  0BD9  1D03               	btfss	3,2
 13480  0BDA  0008               	return
 13481                           
 13482                           ;lcd.c: 239: {
 13483                           ;lcd.c: 240: LCDWriteCharacter(46);
 13484  0BDB  302E               	movlw	46
 13485  0BDC  3195  2596  318B   	fcall	_LCDWriteCharacter
 13486                           
 13487                           ;lcd.c: 241: LCDWriteCharacter((uint8_t)(48+str[3]));
 13488  0BDF  0020               	movlb	0	; select bank0
 13489  0BE0  0834               	movf	LCDWriteInt@str+3,w
 13490  0BE1  3E30               	addlw	48
 13491  0BE2  3195  2596  318B   	fcall	_LCDWriteCharacter
 13492                           
 13493                           ;lcd.c: 242: LCDWriteCharacter((uint8_t)(48+str[4]));
 13494  0BE5  0020               	movlb	0	; select bank0
 13495  0BE6  0835               	movf	LCDWriteInt@str+4,w
 13496  0BE7  3E30               	addlw	48
 13497  0BE8  3195  2596         	fcall	_LCDWriteCharacter
 13498  0BEA  0008               	return
 13499  0BEB                     __end_of_LCDWriteInt:	
 13500                           
 13501                           	psect	text35
 13502  12B0                     __ptext35:	
 13503 ;; *************** function ___lwmod *****************
 13504 ;; Defined at:
 13505 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 13506 ;; Parameters:    Size  Location     Type
 13507 ;;  divisor         2    0[COMMON] unsigned int 
 13508 ;;  dividend        2    2[COMMON] unsigned int 
 13509 ;; Auto vars:     Size  Location     Type
 13510 ;;  counter         1    5[COMMON] unsigned char 
 13511 ;; Return value:  Size  Location     Type
 13512 ;;                  2    0[COMMON] unsigned int 
 13513 ;; Registers used:
 13514 ;;		wreg, status,2, status,0
 13515 ;; Tracked objects:
 13516 ;;		On entry : 0/0
 13517 ;;		On exit  : 0/0
 13518 ;;		Unchanged: 0/0
 13519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13520 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13521 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13522 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13523 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13524 ;;Total ram usage:        6 bytes
 13525 ;; Hardware stack levels used:    1
 13526 ;; This function calls:
 13527 ;;		Nothing
 13528 ;; This function is called by:
 13529 ;;		_LCDWriteInt
 13530 ;; This function uses a non-reentrant model
 13531 ;;
 13532                           
 13533                           
 13534                           ;psect for function ___lwmod
 13535  12B0                     ___lwmod:	
 13536                           
 13537                           ;incstack = 0
 13538                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
 13539  12B0  0870               	movf	___lwmod@divisor,w
 13540  12B1  0471               	iorwf	___lwmod@divisor+1,w
 13541  12B2  1903               	btfsc	3,2
 13542  12B3  2AD7               	goto	l2816
 13543  12B4  01F5               	clrf	___lwmod@counter
 13544  12B5  0AF5               	incf	___lwmod@counter,f
 13545  12B6                     l2806:	
 13546  12B6  1BF1               	btfsc	___lwmod@divisor+1,7
 13547  12B7  2AC2               	goto	l2808
 13548  12B8  3001               	movlw	1
 13549  12B9                     u3035:	
 13550  12B9  35F0               	lslf	___lwmod@divisor,f
 13551  12BA  0DF1               	rlf	___lwmod@divisor+1,f
 13552  12BB  0B89               	decfsz	9,f
 13553  12BC  2AB9               	goto	u3035
 13554  12BD  3001               	movlw	1
 13555  12BE  00F4               	movwf	??___lwmod
 13556  12BF  0874               	movf	??___lwmod,w
 13557  12C0  07F5               	addwf	___lwmod@counter,f
 13558  12C1  2AB6               	goto	l2806
 13559  12C2                     l2808:	
 13560  12C2  0871               	movf	___lwmod@divisor+1,w
 13561  12C3  0273               	subwf	___lwmod@dividend+1,w
 13562  12C4  1D03               	skipz
 13563  12C5  2AC8               	goto	u3055
 13564  12C6  0870               	movf	___lwmod@divisor,w
 13565  12C7  0272               	subwf	___lwmod@dividend,w
 13566  12C8                     u3055:	
 13567  12C8  1C03               	skipc
 13568  12C9  2ACE               	goto	l2812
 13569  12CA  0870               	movf	___lwmod@divisor,w
 13570  12CB  02F2               	subwf	___lwmod@dividend,f
 13571  12CC  0871               	movf	___lwmod@divisor+1,w
 13572  12CD  3BF3               	subwfb	___lwmod@dividend+1,f
 13573  12CE                     l2812:	
 13574  12CE  3001               	movlw	1
 13575  12CF                     u3065:	
 13576  12CF  36F1               	lsrf	___lwmod@divisor+1,f
 13577  12D0  0CF0               	rrf	___lwmod@divisor,f
 13578  12D1  0B89               	decfsz	9,f
 13579  12D2  2ACF               	goto	u3065
 13580  12D3  3001               	movlw	1
 13581  12D4  02F5               	subwf	___lwmod@counter,f
 13582  12D5  1D03               	btfss	3,2
 13583  12D6  2AC2               	goto	l2808
 13584  12D7                     l2816:	
 13585  12D7  0873               	movf	___lwmod@dividend+1,w
 13586  12D8  00F1               	movwf	?___lwmod+1
 13587  12D9  0872               	movf	___lwmod@dividend,w
 13588  12DA  00F0               	movwf	?___lwmod
 13589  12DB  0008               	return
 13590  12DC                     __end_of___lwmod:	
 13591                           
 13592                           	psect	text36
 13593  1545                     __ptext36:	
 13594 ;; *************** function ___awdiv *****************
 13595 ;; Defined at:
 13596 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
 13597 ;; Parameters:    Size  Location     Type
 13598 ;;  divisor         2    0[COMMON] int 
 13599 ;;  dividend        2    2[COMMON] int 
 13600 ;; Auto vars:     Size  Location     Type
 13601 ;;  quotient        2    7[COMMON] int 
 13602 ;;  sign            1    6[COMMON] unsigned char 
 13603 ;;  counter         1    5[COMMON] unsigned char 
 13604 ;; Return value:  Size  Location     Type
 13605 ;;                  2    0[COMMON] int 
 13606 ;; Registers used:
 13607 ;;		wreg, status,2, status,0
 13608 ;; Tracked objects:
 13609 ;;		On entry : 0/0
 13610 ;;		On exit  : 0/0
 13611 ;;		Unchanged: 0/0
 13612 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13613 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13614 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13615 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13616 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13617 ;;Total ram usage:        9 bytes
 13618 ;; Hardware stack levels used:    1
 13619 ;; This function calls:
 13620 ;;		Nothing
 13621 ;; This function is called by:
 13622 ;;		_LCDWriteInt
 13623 ;;		_main
 13624 ;; This function uses a non-reentrant model
 13625 ;;
 13626                           
 13627                           
 13628                           ;psect for function ___awdiv
 13629  1545                     ___awdiv:	
 13630                           
 13631                           ;incstack = 0
 13632                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 13633  1545  01F6               	clrf	___awdiv@sign
 13634  1546  1FF1               	btfss	___awdiv@divisor+1,7
 13635  1547  2D4F               	goto	l2670
 13636  1548  09F0               	comf	___awdiv@divisor,f
 13637  1549  09F1               	comf	___awdiv@divisor+1,f
 13638  154A  0AF0               	incf	___awdiv@divisor,f
 13639  154B  1903               	skipnz
 13640  154C  0AF1               	incf	___awdiv@divisor+1,f
 13641  154D  01F6               	clrf	___awdiv@sign
 13642  154E  0AF6               	incf	___awdiv@sign,f
 13643  154F                     l2670:	
 13644  154F  1FF3               	btfss	___awdiv@dividend+1,7
 13645  1550  2D5A               	goto	l2676
 13646  1551  09F2               	comf	___awdiv@dividend,f
 13647  1552  09F3               	comf	___awdiv@dividend+1,f
 13648  1553  0AF2               	incf	___awdiv@dividend,f
 13649  1554  1903               	skipnz
 13650  1555  0AF3               	incf	___awdiv@dividend+1,f
 13651  1556  3001               	movlw	1
 13652  1557  00F4               	movwf	??___awdiv
 13653  1558  0874               	movf	??___awdiv,w
 13654  1559  06F6               	xorwf	___awdiv@sign,f
 13655  155A                     l2676:	
 13656  155A  01F7               	clrf	___awdiv@quotient
 13657  155B  01F8               	clrf	___awdiv@quotient+1
 13658  155C  0870               	movf	___awdiv@divisor,w
 13659  155D  0471               	iorwf	___awdiv@divisor+1,w
 13660  155E  1903               	btfsc	3,2
 13661  155F  2D89               	goto	l2698
 13662  1560  01F5               	clrf	___awdiv@counter
 13663  1561  0AF5               	incf	___awdiv@counter,f
 13664  1562                     l2686:	
 13665  1562  1BF1               	btfsc	___awdiv@divisor+1,7
 13666  1563  2D6E               	goto	l2688
 13667  1564  3001               	movlw	1
 13668  1565                     u2765:	
 13669  1565  35F0               	lslf	___awdiv@divisor,f
 13670  1566  0DF1               	rlf	___awdiv@divisor+1,f
 13671  1567  0B89               	decfsz	9,f
 13672  1568  2D65               	goto	u2765
 13673  1569  3001               	movlw	1
 13674  156A  00F4               	movwf	??___awdiv
 13675  156B  0874               	movf	??___awdiv,w
 13676  156C  07F5               	addwf	___awdiv@counter,f
 13677  156D  2D62               	goto	l2686
 13678  156E                     l2688:	
 13679  156E  3001               	movlw	1
 13680  156F                     u2785:	
 13681  156F  35F7               	lslf	___awdiv@quotient,f
 13682  1570  0DF8               	rlf	___awdiv@quotient+1,f
 13683  1571  0B89               	decfsz	9,f
 13684  1572  2D6F               	goto	u2785
 13685  1573  0871               	movf	___awdiv@divisor+1,w
 13686  1574  0273               	subwf	___awdiv@dividend+1,w
 13687  1575  1D03               	skipz
 13688  1576  2D79               	goto	u2795
 13689  1577  0870               	movf	___awdiv@divisor,w
 13690  1578  0272               	subwf	___awdiv@dividend,w
 13691  1579                     u2795:	
 13692  1579  1C03               	skipc
 13693  157A  2D80               	goto	l2694
 13694  157B  0870               	movf	___awdiv@divisor,w
 13695  157C  02F2               	subwf	___awdiv@dividend,f
 13696  157D  0871               	movf	___awdiv@divisor+1,w
 13697  157E  3BF3               	subwfb	___awdiv@dividend+1,f
 13698  157F  1477               	bsf	___awdiv@quotient,0
 13699  1580                     l2694:	
 13700  1580  3001               	movlw	1
 13701  1581                     u2805:	
 13702  1581  36F1               	lsrf	___awdiv@divisor+1,f
 13703  1582  0CF0               	rrf	___awdiv@divisor,f
 13704  1583  0B89               	decfsz	9,f
 13705  1584  2D81               	goto	u2805
 13706  1585  3001               	movlw	1
 13707  1586  02F5               	subwf	___awdiv@counter,f
 13708  1587  1D03               	btfss	3,2
 13709  1588  2D6E               	goto	l2688
 13710  1589                     l2698:	
 13711  1589  0876               	movf	___awdiv@sign,w
 13712  158A  1903               	btfsc	3,2
 13713  158B  2D91               	goto	l2702
 13714  158C  09F7               	comf	___awdiv@quotient,f
 13715  158D  09F8               	comf	___awdiv@quotient+1,f
 13716  158E  0AF7               	incf	___awdiv@quotient,f
 13717  158F  1903               	skipnz
 13718  1590  0AF8               	incf	___awdiv@quotient+1,f
 13719  1591                     l2702:	
 13720  1591  0878               	movf	___awdiv@quotient+1,w
 13721  1592  00F1               	movwf	?___awdiv+1
 13722  1593  0877               	movf	___awdiv@quotient,w
 13723  1594  00F0               	movwf	?___awdiv
 13724  1595  0008               	return
 13725  1596                     __end_of___awdiv:	
 13726                           
 13727                           	psect	text37
 13728  0EDC                     __ptext37:	
 13729 ;; *************** function _Battery_State_Machine *****************
 13730 ;; Defined at:
 13731 ;;		line 31 in file "battery_charger.c"
 13732 ;; Parameters:    Size  Location     Type
 13733 ;;  z               1    wreg     unsigned char 
 13734 ;; Auto vars:     Size  Location     Type
 13735 ;;  z               1   15[BANK0 ] unsigned char 
 13736 ;; Return value:  Size  Location     Type
 13737 ;;                  1    wreg      void 
 13738 ;; Registers used:
 13739 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13740 ;; Tracked objects:
 13741 ;;		On entry : 0/0
 13742 ;;		On exit  : 0/0
 13743 ;;		Unchanged: 0/0
 13744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13745 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13746 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13747 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13748 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13749 ;;Total ram usage:        6 bytes
 13750 ;; Hardware stack levels used:    1
 13751 ;; Hardware stack levels required when called:    3
 13752 ;; This function calls:
 13753 ;;		_LCDWriteString
 13754 ;;		_gotoXY
 13755 ;; This function is called by:
 13756 ;;		_main
 13757 ;; This function uses a non-reentrant model
 13758 ;;
 13759                           
 13760                           
 13761                           ;psect for function _Battery_State_Machine
 13762  0EDC                     _Battery_State_Machine:	
 13763                           
 13764                           ;incstack = 0
 13765                           ; Regs used in _Battery_State_Machine: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13766                           ;Battery_State_Machine@z stored from wreg
 13767  0EDC  0020               	movlb	0	; select bank0
 13768  0EDD  00AF               	movwf	Battery_State_Machine@z
 13769                           
 13770                           ;battery_charger.c: 33: if(batteryState[z]==PRECHARGE)
 13771  0EDE  082F               	movf	Battery_State_Machine@z,w
 13772  0EDF  3EC0               	addlw	(low (_batteryState| 0))& (0+255)
 13773  0EE0  0086               	movwf	6
 13774  0EE1  0187               	clrf	7
 13775  0EE2  3003               	movlw	3
 13776  0EE3  0601               	xorwf	1,w
 13777  0EE4  1D03               	btfss	3,2
 13778  0EE5  2F35               	goto	l3006
 13779                           
 13780                           ;battery_charger.c: 34: {
 13781                           ;battery_charger.c: 35: if(voltage[z]<1075)
 13782  0EE6  352F               	lslf	Battery_State_Machine@z,w
 13783  0EE7  3EA8               	addlw	(low (_voltage| 0))& (0+255)
 13784  0EE8  0086               	movwf	6
 13785  0EE9  0187               	clrf	7
 13786  0EEA  3F40               	moviw [0]fsr1
 13787  0EEB  00AA               	movwf	??_Battery_State_Machine
 13788  0EEC  3F41               	moviw [1]fsr1
 13789  0EED  00AB               	movwf	??_Battery_State_Machine+1
 13790  0EEE  082B               	movf	??_Battery_State_Machine+1,w
 13791  0EEF  3A80               	xorlw	128
 13792  0EF0  00AC               	movwf	??_Battery_State_Machine+2
 13793  0EF1  3084               	movlw	132
 13794  0EF2  022C               	subwf	??_Battery_State_Machine+2,w
 13795  0EF3  1D03               	skipz
 13796  0EF4  2EF7               	goto	u3405
 13797  0EF5  3033               	movlw	51
 13798  0EF6  022A               	subwf	??_Battery_State_Machine,w
 13799  0EF7                     u3405:	
 13800  0EF7  1803               	skipnc
 13801  0EF8  2F23               	goto	l3004
 13802                           
 13803                           ;battery_charger.c: 36: {
 13804                           ;battery_charger.c: 37: if(stateCounter[z]>0)
 13805  0EF9  0020               	movlb	0	; select bank0
 13806  0EFA  352F               	lslf	Battery_State_Machine@z,w
 13807  0EFB  3E49               	addlw	(low (_stateCounter| (0+256)))& (0+255)
 13808  0EFC  0086               	movwf	6
 13809  0EFD  3001               	movlw	1	; select bank2/3
 13810  0EFE  0087               	movwf	7
 13811  0EFF  3F40               	moviw [0]fsr1
 13812  0F00  00AA               	movwf	??_Battery_State_Machine
 13813  0F01  3F41               	moviw [1]fsr1
 13814  0F02  00AB               	movwf	??_Battery_State_Machine+1
 13815  0F03  082B               	movf	??_Battery_State_Machine+1,w
 13816  0F04  3A80               	xorlw	128
 13817  0F05  00AC               	movwf	??_Battery_State_Machine+2
 13818  0F06  3080               	movlw	128
 13819  0F07  022C               	subwf	??_Battery_State_Machine+2,w
 13820  0F08  1D03               	skipz
 13821  0F09  2F0C               	goto	u3415
 13822  0F0A  3001               	movlw	1
 13823  0F0B  022A               	subwf	??_Battery_State_Machine,w
 13824  0F0C                     u3415:	
 13825  0F0C  1C03               	skipc
 13826  0F0D  2F1B               	goto	l3002
 13827                           
 13828                           ;battery_charger.c: 38: {
 13829                           ;battery_charger.c: 39: stateCounter[z]-=1;
 13830  0F0E  0020               	movlb	0	; select bank0
 13831  0F0F  352F               	lslf	Battery_State_Machine@z,w
 13832  0F10  3E49               	addlw	(low (_stateCounter| (0+256)))& (0+255)
 13833  0F11  0086               	movwf	6
 13834  0F12  3001               	movlw	1	; select bank2/3
 13835  0F13  0087               	movwf	7
 13836  0F14  30FF               	movlw	255
 13837  0F15  0781               	addwf	1,f
 13838  0F16  3141               	addfsr 1,1
 13839  0F17  30FF               	movlw	255
 13840  0F18  3D81               	addwfc	1,f
 13841  0F19  317F               	addfsr 1,-1
 13842                           
 13843                           ;battery_charger.c: 40: }
 13844  0F1A  0008               	return
 13845  0F1B                     l3002:	
 13846                           
 13847                           ;battery_charger.c: 41: else
 13848                           ;battery_charger.c: 42: {
 13849                           ;battery_charger.c: 43: batteryState[z]=FAULT;
 13850  0F1B  0020               	movlb	0	; select bank0
 13851  0F1C  082F               	movf	Battery_State_Machine@z,w
 13852  0F1D  3EC0               	addlw	(low (_batteryState| 0))& (0+255)
 13853  0F1E  0086               	movwf	6
 13854  0F1F  0187               	clrf	7
 13855  0F20  0181               	clrf	1
 13856  0F21  0A81               	incf	1,f
 13857                           
 13858                           ;battery_charger.c: 44: }
 13859                           ;battery_charger.c: 45: }
 13860  0F22  0008               	return
 13861  0F23                     l3004:	
 13862                           
 13863                           ;battery_charger.c: 46: else
 13864                           ;battery_charger.c: 47: {
 13865                           ;battery_charger.c: 48: batteryState[z]=CHARGE;
 13866  0F23  3004               	movlw	4
 13867  0F24  0020               	movlb	0	; select bank0
 13868  0F25  00AA               	movwf	??_Battery_State_Machine
 13869  0F26  082F               	movf	Battery_State_Machine@z,w
 13870  0F27  3EC0               	addlw	(low (_batteryState| 0))& (0+255)
 13871  0F28  0086               	movwf	6
 13872  0F29  0187               	clrf	7
 13873  0F2A  082A               	movf	??_Battery_State_Machine,w
 13874  0F2B  0081               	movwf	1
 13875                           
 13876                           ;battery_charger.c: 49: Iref[z]=35;
 13877  0F2C  352F               	lslf	Battery_State_Machine@z,w
 13878  0F2D  3EB4               	addlw	(low (_Iref| 0))& (0+255)
 13879  0F2E  0086               	movwf	6
 13880  0F2F  0187               	clrf	7
 13881  0F30  3023               	movlw	35
 13882  0F31  3FC0               	movwi [0]fsr1
 13883  0F32  3000               	movlw	0
 13884  0F33  3FC1               	movwi [1]fsr1
 13885                           
 13886                           ;battery_charger.c: 50: }
 13887                           ;battery_charger.c: 51: }
 13888  0F34  0008               	return
 13889  0F35                     l3006:	
 13890                           
 13891                           ;battery_charger.c: 52: else if(batteryState[z]==CHARGE)
 13892  0F35  082F               	movf	Battery_State_Machine@z,w
 13893  0F36  3EC0               	addlw	(low (_batteryState| 0))& (0+255)
 13894  0F37  0086               	movwf	6
 13895  0F38  0187               	clrf	7
 13896  0F39  3004               	movlw	4
 13897  0F3A  0601               	xorwf	1,w
 13898  0F3B  1D03               	btfss	3,2
 13899  0F3C  2FBF               	goto	l3024
 13900                           
 13901                           ;battery_charger.c: 53: {
 13902                           ;battery_charger.c: 54: if(!Imode[z])
 13903  0F3D  082F               	movf	Battery_State_Machine@z,w
 13904  0F3E  3EEC               	addlw	(low (_Imode| 0))& (0+255)
 13905  0F3F  0086               	movwf	6
 13906  0F40  0187               	clrf	7
 13907  0F41  0801               	movf	1,w
 13908  0F42  1D03               	btfss	3,2
 13909  0F43  2FA6               	goto	l3020
 13910                           
 13911                           ;battery_charger.c: 55: {
 13912                           ;battery_charger.c: 56: if(current[z] < Imin[z])
 13913  0F44  352F               	lslf	Battery_State_Machine@z,w
 13914  0F45  3E45               	addlw	(low (_Imin| (0+256)))& (0+255)
 13915  0F46  0086               	movwf	6
 13916  0F47  3001               	movlw	1	; select bank2/3
 13917  0F48  0087               	movwf	7
 13918  0F49  3F40               	moviw [0]fsr1
 13919  0F4A  00AA               	movwf	??_Battery_State_Machine
 13920  0F4B  3F41               	moviw [1]fsr1
 13921  0F4C  00AB               	movwf	??_Battery_State_Machine+1
 13922  0F4D  352F               	lslf	Battery_State_Machine@z,w
 13923  0F4E  3EA0               	addlw	(low (_current| 0))& (0+255)
 13924  0F4F  0086               	movwf	6
 13925  0F50  0187               	clrf	7
 13926  0F51  3F40               	moviw [0]fsr1
 13927  0F52  00AC               	movwf	??_Battery_State_Machine+2
 13928  0F53  3F41               	moviw [1]fsr1
 13929  0F54  00AD               	movwf	??_Battery_State_Machine+3
 13930  0F55  082D               	movf	??_Battery_State_Machine+3,w
 13931  0F56  3A80               	xorlw	128
 13932  0F57  00AE               	movwf	??_Battery_State_Machine+4
 13933  0F58  082B               	movf	??_Battery_State_Machine+1,w
 13934  0F59  3A80               	xorlw	128
 13935  0F5A  022E               	subwf	??_Battery_State_Machine+4,w
 13936  0F5B  1D03               	skipz
 13937  0F5C  2F5F               	goto	u3445
 13938  0F5D  082A               	movf	??_Battery_State_Machine,w
 13939  0F5E  022C               	subwf	??_Battery_State_Machine+2,w
 13940  0F5F                     u3445:	
 13941  0F5F  1803               	skipnc
 13942  0F60  2F8C               	goto	l3016
 13943                           
 13944                           ;battery_charger.c: 57: {
 13945                           ;battery_charger.c: 58: IminCount[z]-=2;
 13946  0F61  0020               	movlb	0	; select bank0
 13947  0F62  352F               	lslf	Battery_State_Machine@z,w
 13948  0F63  3EB0               	addlw	(low (_IminCount| 0))& (0+255)
 13949  0F64  0086               	movwf	6
 13950  0F65  0187               	clrf	7
 13951  0F66  3002               	movlw	2
 13952  0F67  0281               	subwf	1,f
 13953  0F68  3141               	addfsr 1,1
 13954  0F69  3000               	movlw	0
 13955  0F6A  3B81               	subwfb	1,f
 13956  0F6B  317F               	addfsr 1,-1
 13957                           
 13958                           ;battery_charger.c: 59: if(IminCount[z]<10)
 13959  0F6C  352F               	lslf	Battery_State_Machine@z,w
 13960  0F6D  3EB0               	addlw	(low (_IminCount| 0))& (0+255)
 13961  0F6E  0086               	movwf	6
 13962  0F6F  0187               	clrf	7
 13963  0F70  3F40               	moviw [0]fsr1
 13964  0F71  00AA               	movwf	??_Battery_State_Machine
 13965  0F72  3F41               	moviw [1]fsr1
 13966  0F73  00AB               	movwf	??_Battery_State_Machine+1
 13967  0F74  3000               	movlw	0
 13968  0F75  022B               	subwf	??_Battery_State_Machine+1,w
 13969  0F76  300A               	movlw	10
 13970  0F77  1903               	skipnz
 13971  0F78  022A               	subwf	??_Battery_State_Machine,w
 13972  0F79  1803               	skipnc
 13973  0F7A  0008               	return
 13974                           
 13975                           ;battery_charger.c: 60: {
 13976                           ;battery_charger.c: 61: batteryState[z] = FLOAT;
 13977  0F7B  3005               	movlw	5
 13978  0F7C  00AA               	movwf	??_Battery_State_Machine
 13979  0F7D  082F               	movf	Battery_State_Machine@z,w
 13980  0F7E  3EC0               	addlw	(low (_batteryState| 0))& (0+255)
 13981  0F7F  0086               	movwf	6
 13982  0F80  0187               	clrf	7
 13983  0F81  082A               	movf	??_Battery_State_Machine,w
 13984  0F82  0081               	movwf	1
 13985                           
 13986                           ;battery_charger.c: 62: IminCount[z]=10;
 13987  0F83  352F               	lslf	Battery_State_Machine@z,w
 13988  0F84  3EB0               	addlw	(low (_IminCount| 0))& (0+255)
 13989  0F85  0086               	movwf	6
 13990  0F86  0187               	clrf	7
 13991  0F87  300A               	movlw	10
 13992  0F88  3FC0               	movwi [0]fsr1
 13993  0F89  3000               	movlw	0
 13994  0F8A  3FC1               	movwi [1]fsr1
 13995                           
 13996                           ;battery_charger.c: 63: }
 13997                           ;battery_charger.c: 64: }
 13998  0F8B  0008               	return
 13999  0F8C                     l3016:	
 14000                           
 14001                           ;battery_charger.c: 65: else
 14002                           ;battery_charger.c: 66: {
 14003                           ;battery_charger.c: 67: if(IminCount[z]<100)IminCount[z]+=1;
 14004  0F8C  0020               	movlb	0	; select bank0
 14005  0F8D  352F               	lslf	Battery_State_Machine@z,w
 14006  0F8E  3EB0               	addlw	(low (_IminCount| 0))& (0+255)
 14007  0F8F  0086               	movwf	6
 14008  0F90  0187               	clrf	7
 14009  0F91  3F40               	moviw [0]fsr1
 14010  0F92  00AA               	movwf	??_Battery_State_Machine
 14011  0F93  3F41               	moviw [1]fsr1
 14012  0F94  00AB               	movwf	??_Battery_State_Machine+1
 14013  0F95  3000               	movlw	0
 14014  0F96  022B               	subwf	??_Battery_State_Machine+1,w
 14015  0F97  3064               	movlw	100
 14016  0F98  1903               	skipnz
 14017  0F99  022A               	subwf	??_Battery_State_Machine,w
 14018  0F9A  1803               	skipnc
 14019  0F9B  0008               	return
 14020  0F9C  352F               	lslf	Battery_State_Machine@z,w
 14021  0F9D  3EB0               	addlw	(low (_IminCount| 0))& (0+255)
 14022  0F9E  0086               	movwf	6
 14023  0F9F  0187               	clrf	7
 14024  0FA0  3001               	movlw	1
 14025  0FA1  0781               	addwf	1,f
 14026  0FA2  3141               	addfsr 1,1
 14027  0FA3  1803               	skipnc
 14028  0FA4  0A81               	incf	1,f
 14029                           
 14030                           ;battery_charger.c: 68: }
 14031                           ;battery_charger.c: 69: }
 14032  0FA5  0008               	return
 14033  0FA6                     l3020:	
 14034                           
 14035                           ;battery_charger.c: 70: else if(IminCount[z]<100)IminCount[z]+=1;
 14036  0FA6  352F               	lslf	Battery_State_Machine@z,w
 14037  0FA7  3EB0               	addlw	(low (_IminCount| 0))& (0+255)
 14038  0FA8  0086               	movwf	6
 14039  0FA9  0187               	clrf	7
 14040  0FAA  3F40               	moviw [0]fsr1
 14041  0FAB  00AA               	movwf	??_Battery_State_Machine
 14042  0FAC  3F41               	moviw [1]fsr1
 14043  0FAD  00AB               	movwf	??_Battery_State_Machine+1
 14044  0FAE  3000               	movlw	0
 14045  0FAF  022B               	subwf	??_Battery_State_Machine+1,w
 14046  0FB0  3064               	movlw	100
 14047  0FB1  1903               	skipnz
 14048  0FB2  022A               	subwf	??_Battery_State_Machine,w
 14049  0FB3  1803               	skipnc
 14050  0FB4  0008               	return
 14051  0FB5  352F               	lslf	Battery_State_Machine@z,w
 14052  0FB6  3EB0               	addlw	(low (_IminCount| 0))& (0+255)
 14053  0FB7  0086               	movwf	6
 14054  0FB8  0187               	clrf	7
 14055  0FB9  3001               	movlw	1
 14056  0FBA  0781               	addwf	1,f
 14057  0FBB  3141               	addfsr 1,1
 14058  0FBC  1803               	skipnc
 14059  0FBD  0A81               	incf	1,f
 14060                           
 14061                           ;battery_charger.c: 71: }
 14062  0FBE  0008               	return
 14063  0FBF                     l3024:	
 14064                           
 14065                           ;battery_charger.c: 72: else if(batteryState[z] == FLOAT)
 14066  0FBF  082F               	movf	Battery_State_Machine@z,w
 14067  0FC0  3EC0               	addlw	(low (_batteryState| 0))& (0+255)
 14068  0FC1  0086               	movwf	6
 14069  0FC2  0187               	clrf	7
 14070  0FC3  3005               	movlw	5
 14071  0FC4  0601               	xorwf	1,w
 14072  0FC5  1D03               	btfss	3,2
 14073  0FC6  2FD8               	goto	l3028
 14074                           
 14075                           ;battery_charger.c: 73: {
 14076                           ;battery_charger.c: 74: Vref[z]=1379;
 14077  0FC7  352F               	lslf	Battery_State_Machine@z,w
 14078  0FC8  3EB8               	addlw	(low (_Vref| 0))& (0+255)
 14079  0FC9  0086               	movwf	6
 14080  0FCA  0187               	clrf	7
 14081  0FCB  3063               	movlw	99
 14082  0FCC  3FC0               	movwi [0]fsr1
 14083  0FCD  3005               	movlw	5
 14084  0FCE  3FC1               	movwi [1]fsr1
 14085                           
 14086                           ;battery_charger.c: 75: Iref[z]=17;
 14087  0FCF  352F               	lslf	Battery_State_Machine@z,w
 14088  0FD0  3EB4               	addlw	(low (_Iref| 0))& (0+255)
 14089  0FD1  0086               	movwf	6
 14090  0FD2  0187               	clrf	7
 14091  0FD3  3011               	movlw	17
 14092  0FD4  3FC0               	movwi [0]fsr1
 14093  0FD5  3000               	movlw	0
 14094  0FD6  3FC1               	movwi [1]fsr1
 14095                           
 14096                           ;battery_charger.c: 76: }
 14097  0FD7  0008               	return
 14098  0FD8                     l3028:	
 14099                           
 14100                           ;battery_charger.c: 77: else
 14101                           ;battery_charger.c: 78: if(batteryState[z] == FAULT)
 14102  0FD8  082F               	movf	Battery_State_Machine@z,w
 14103  0FD9  3EC0               	addlw	(low (_batteryState| 0))& (0+255)
 14104  0FDA  0086               	movwf	6
 14105  0FDB  0187               	clrf	7
 14106  0FDC  0301               	decf	1,w
 14107  0FDD  1D03               	btfss	3,2
 14108  0FDE  0008               	return
 14109                           
 14110                           ;battery_charger.c: 79: {
 14111                           ;battery_charger.c: 80: { gotoXY(0,0); LCDWriteString("BATTERY FAULT");};
 14112  0FDF  01F5               	clrf	gotoXY@y
 14113  0FE0  3000               	movlw	0
 14114  0FE1  3191  2197  318E   	fcall	_gotoXY
 14115  0FE4  301B               	movlw	low (STR_1| (0+32768))
 14116  0FE5  0020               	movlb	0	; select bank0
 14117  0FE6  00A8               	movwf	LCDWriteString@characters
 14118  0FE7  3098               	movlw	high (STR_1| (0+32768))
 14119  0FE8  00A9               	movwf	LCDWriteString@characters+1
 14120  0FE9  3189  2130  318E   	fcall	_LCDWriteString
 14121                           
 14122                           ;battery_charger.c: 81: Imode[z]=0;
 14123  0FEC  0020               	movlb	0	; select bank0
 14124  0FED  082F               	movf	Battery_State_Machine@z,w
 14125  0FEE  3EEC               	addlw	(low (_Imode| 0))& (0+255)
 14126  0FEF  0086               	movwf	6
 14127  0FF0  0187               	clrf	7
 14128  0FF1  0181               	clrf	1
 14129                           
 14130                           ;battery_charger.c: 83: _delay((unsigned long)((2000)*(32000000/4000.0)));
 14131  0FF2  3052               	movlw	82
 14132  0FF3  0020               	movlb	0	; select bank0
 14133  0FF4  00AB               	movwf	??_Battery_State_Machine+1
 14134  0FF5  302B               	movlw	43
 14135  0FF6  00AA               	movwf	??_Battery_State_Machine
 14136  0FF7  3000               	movlw	0
 14137  0FF8                     u3937:	
 14138  0FF8  0B89               	decfsz	9,f
 14139  0FF9  2FF8               	goto	u3937
 14140  0FFA  0BAA               	decfsz	??_Battery_State_Machine,f
 14141  0FFB  2FF8               	goto	u3937
 14142  0FFC  0BAB               	decfsz	??_Battery_State_Machine+1,f
 14143  0FFD  2FF8               	goto	u3937
 14144  0FFE  0000               	nop
 14145  0FFF  0008               	return
 14146  1000                     __end_of_Battery_State_Machine:	
 14147                           
 14148                           	psect	text38
 14149  1197                     __ptext38:	
 14150 ;; *************** function _gotoXY *****************
 14151 ;; Defined at:
 14152 ;;		line 124 in file "lcd.c"
 14153 ;; Parameters:    Size  Location     Type
 14154 ;;  x               1    wreg     unsigned char 
 14155 ;;  y               1    5[COMMON] unsigned char 
 14156 ;; Auto vars:     Size  Location     Type
 14157 ;;  x               1    7[COMMON] unsigned char 
 14158 ;; Return value:  Size  Location     Type
 14159 ;;                  1    wreg      void 
 14160 ;; Registers used:
 14161 ;;		wreg, status,2, status,0, pclath, cstack
 14162 ;; Tracked objects:
 14163 ;;		On entry : 0/0
 14164 ;;		On exit  : 0/0
 14165 ;;		Unchanged: 0/0
 14166 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14167 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14168 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14169 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14170 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14171 ;;Total ram usage:        3 bytes
 14172 ;; Hardware stack levels used:    1
 14173 ;; Hardware stack levels required when called:    1
 14174 ;; This function calls:
 14175 ;;		_LCDWrite
 14176 ;; This function is called by:
 14177 ;;		_LCDClear
 14178 ;;		_main
 14179 ;;		_Battery_State_Machine
 14180 ;; This function uses a non-reentrant model
 14181 ;;
 14182                           
 14183                           
 14184                           ;psect for function _gotoXY
 14185  1197                     _gotoXY:	
 14186                           
 14187                           ;incstack = 0
 14188                           ; Regs used in _gotoXY: [wreg+status,2+status,0+pclath+cstack]
 14189                           ;gotoXY@x stored from wreg
 14190  1197  00F7               	movwf	gotoXY@x
 14191                           
 14192                           ;lcd.c: 126: LCDWrite(0,(uint8_t)(0x80 | x));
 14193  1198  0877               	movf	gotoXY@x,w
 14194  1199  3880               	iorlw	128
 14195  119A  00F6               	movwf	??_gotoXY
 14196  119B  0876               	movf	??_gotoXY,w
 14197  119C  00F0               	movwf	LCDWrite@data
 14198  119D  3000               	movlw	0
 14199  119E  3192  2265  3191   	fcall	_LCDWrite
 14200                           
 14201                           ;lcd.c: 127: LCDWrite(0,(uint8_t)(0x40 | y));
 14202  11A1  0875               	movf	gotoXY@y,w
 14203  11A2  3840               	iorlw	64
 14204  11A3  00F6               	movwf	??_gotoXY
 14205  11A4  0876               	movf	??_gotoXY,w
 14206  11A5  00F0               	movwf	LCDWrite@data
 14207  11A6  3000               	movlw	0
 14208  11A7  3192  2265         	fcall	_LCDWrite
 14209  11A9  0008               	return
 14210  11AA                     __end_of_gotoXY:	
 14211                           
 14212                           	psect	text39
 14213  0930                     __ptext39:	
 14214 ;; *************** function _LCDWriteString *****************
 14215 ;; Defined at:
 14216 ;;		line 176 in file "lcd.c"
 14217 ;; Parameters:    Size  Location     Type
 14218 ;;  characters      2    8[BANK0 ] PTR const unsigned char 
 14219 ;;		 -> STR_1(14), 
 14220 ;; Auto vars:     Size  Location     Type
 14221 ;;		None
 14222 ;; Return value:  Size  Location     Type
 14223 ;;                  1    wreg      void 
 14224 ;; Registers used:
 14225 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 14226 ;; Tracked objects:
 14227 ;;		On entry : 0/0
 14228 ;;		On exit  : 0/0
 14229 ;;		Unchanged: 0/0
 14230 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14231 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14232 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14233 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14234 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14235 ;;Total ram usage:        3 bytes
 14236 ;; Hardware stack levels used:    1
 14237 ;; Hardware stack levels required when called:    2
 14238 ;; This function calls:
 14239 ;;		_LCDWriteCharacter
 14240 ;; This function is called by:
 14241 ;;		_Battery_State_Machine
 14242 ;; This function uses a non-reentrant model
 14243 ;;
 14244                           
 14245                           
 14246                           ;psect for function _LCDWriteString
 14247  0930                     _LCDWriteString:	
 14248  0930                     l2494:	
 14249                           ;lcd.c: 178: while (*characters)
 14250                           
 14251                           ;incstack = 0
 14252                           ; Regs used in _LCDWriteString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 14253                           
 14254  0930  0020               	movlb	0	; select bank0
 14255  0931  0828               	movf	LCDWriteString@characters,w
 14256  0932  0084               	movwf	4
 14257  0933  0829               	movf	LCDWriteString@characters+1,w
 14258  0934  0085               	movwf	5
 14259  0935  0012               	moviw fsr0++
 14260  0936  1903               	btfsc	3,2
 14261  0937  0008               	return
 14262                           
 14263                           ;lcd.c: 179: LCDWriteCharacter(*characters++);
 14264  0938  0020               	movlb	0	; select bank0
 14265  0939  0828               	movf	LCDWriteString@characters,w
 14266  093A  0084               	movwf	4
 14267  093B  0829               	movf	LCDWriteString@characters+1,w
 14268  093C  0085               	movwf	5
 14269  093D  0800               	movf	0,w	;code access
 14270  093E  3195  2596  3189   	fcall	_LCDWriteCharacter
 14271  0941  3001               	movlw	1
 14272  0942  0020               	movlb	0	; select bank0
 14273  0943  07A8               	addwf	LCDWriteString@characters,f
 14274  0944  3000               	movlw	0
 14275  0945  3DA9               	addwfc	LCDWriteString@characters+1,f
 14276  0946  2930               	goto	l2494
 14277  0947                     __end_of_LCDWriteString:	
 14278                           
 14279                           	psect	text40
 14280  1596                     __ptext40:	
 14281 ;; *************** function _LCDWriteCharacter *****************
 14282 ;; Defined at:
 14283 ;;		line 140 in file "lcd.c"
 14284 ;; Parameters:    Size  Location     Type
 14285 ;;  character       1    wreg     const unsigned char 
 14286 ;; Auto vars:     Size  Location     Type
 14287 ;;  character       1    5[BANK0 ] const unsigned char 
 14288 ;;  base            2    6[BANK0 ] unsigned int 
 14289 ;; Return value:  Size  Location     Type
 14290 ;;                  1    wreg      void 
 14291 ;; Registers used:
 14292 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 14293 ;; Tracked objects:
 14294 ;;		On entry : 0/0
 14295 ;;		On exit  : 0/0
 14296 ;;		Unchanged: 0/0
 14297 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14298 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14299 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14300 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14301 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14302 ;;Total ram usage:        6 bytes
 14303 ;; Hardware stack levels used:    1
 14304 ;; Hardware stack levels required when called:    1
 14305 ;; This function calls:
 14306 ;;		_LCDWrite
 14307 ;;		___wmul
 14308 ;; This function is called by:
 14309 ;;		_LCDWriteString
 14310 ;;		_LCDWriteInt
 14311 ;;		_main
 14312 ;; This function uses a non-reentrant model
 14313 ;;
 14314                           
 14315                           
 14316                           ;psect for function _LCDWriteCharacter
 14317  1596                     _LCDWriteCharacter:	
 14318                           
 14319                           ;incstack = 0
 14320                           ; Regs used in _LCDWriteCharacter: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 14321                           ;LCDWriteCharacter@character stored from wreg
 14322  1596  0020               	movlb	0	; select bank0
 14323  1597  00A5               	movwf	LCDWriteCharacter@character
 14324                           
 14325                           ;lcd.c: 142: uint16_t base;
 14326                           ;lcd.c: 143: base = character - 0x20;
 14327  1598  0825               	movf	LCDWriteCharacter@character,w
 14328  1599  3EE0               	addlw	224
 14329  159A  00A6               	movwf	LCDWriteCharacter@base
 14330  159B  30FF               	movlw	255
 14331  159C  1803               	skipnc
 14332  159D  3000               	movlw	0
 14333  159E  00A7               	movwf	LCDWriteCharacter@base+1
 14334                           
 14335                           ;lcd.c: 144: base *= 3;
 14336  159F  3003               	movlw	3
 14337  15A0  00F9               	movwf	___wmul@multiplier
 14338  15A1  3000               	movlw	0
 14339  15A2  00FA               	movwf	___wmul@multiplier+1
 14340  15A3  0827               	movf	LCDWriteCharacter@base+1,w
 14341  15A4  00FC               	movwf	___wmul@multiplicand+1
 14342  15A5  0826               	movf	LCDWriteCharacter@base,w
 14343  15A6  00FB               	movwf	___wmul@multiplicand
 14344  15A7  3191  21EA  3195   	fcall	___wmul
 14345  15AA  087A               	movf	?___wmul+1,w
 14346  15AB  0020               	movlb	0	; select bank0
 14347  15AC  00A7               	movwf	LCDWriteCharacter@base+1
 14348  15AD  0879               	movf	?___wmul,w
 14349  15AE  00A6               	movwf	LCDWriteCharacter@base
 14350                           
 14351                           ;lcd.c: 145: LCDWrite(1,fonts[base]);
 14352  15AF  0827               	movf	LCDWriteCharacter@base+1,w
 14353  15B0  0085               	movwf	5
 14354  15B1  0826               	movf	LCDWriteCharacter@base,w
 14355  15B2  0084               	movwf	4
 14356  15B3  3000               	movlw	low (_fonts| (0+32768))
 14357  15B4  0784               	addwf	4,f
 14358  15B5  3088               	movlw	high (_fonts| (0+32768))
 14359  15B6  3D85               	addwfc	5,f
 14360  15B7  0800               	movf	0,w	;code access
 14361  15B8  00A2               	movwf	??_LCDWriteCharacter
 14362  15B9  0822               	movf	??_LCDWriteCharacter,w
 14363  15BA  00F0               	movwf	LCDWrite@data
 14364  15BB  3001               	movlw	1
 14365  15BC  3192  2265  3195   	fcall	_LCDWrite
 14366                           
 14367                           ;lcd.c: 146: LCDWrite(1,fonts[base + 1]);
 14368  15BF  0020               	movlb	0	; select bank0
 14369  15C0  0826               	movf	LCDWriteCharacter@base,w
 14370  15C1  3E01               	addlw	1
 14371  15C2  00A2               	movwf	??_LCDWriteCharacter
 14372  15C3  3000               	movlw	0
 14373  15C4  3D27               	addwfc	LCDWriteCharacter@base+1,w
 14374  15C5  00A3               	movwf	??_LCDWriteCharacter+1
 14375  15C6  3000               	movlw	low (_fonts| (0+32768))
 14376  15C7  0722               	addwf	??_LCDWriteCharacter,w
 14377  15C8  0084               	movwf	4
 14378  15C9  3088               	movlw	high (_fonts| (0+32768))
 14379  15CA  3D23               	addwfc	??_LCDWriteCharacter+1,w
 14380  15CB  0085               	movwf	5
 14381  15CC  0800               	movf	0,w	;code access
 14382  15CD  00A4               	movwf	??_LCDWriteCharacter+2
 14383  15CE  0824               	movf	??_LCDWriteCharacter+2,w
 14384  15CF  00F0               	movwf	LCDWrite@data
 14385  15D0  3001               	movlw	1
 14386  15D1  3192  2265  3195   	fcall	_LCDWrite
 14387                           
 14388                           ;lcd.c: 147: LCDWrite(1,fonts[base + 2]);
 14389  15D4  0020               	movlb	0	; select bank0
 14390  15D5  0826               	movf	LCDWriteCharacter@base,w
 14391  15D6  3E02               	addlw	2
 14392  15D7  00A2               	movwf	??_LCDWriteCharacter
 14393  15D8  3000               	movlw	0
 14394  15D9  3D27               	addwfc	LCDWriteCharacter@base+1,w
 14395  15DA  00A3               	movwf	??_LCDWriteCharacter+1
 14396  15DB  3000               	movlw	low (_fonts| (0+32768))
 14397  15DC  0722               	addwf	??_LCDWriteCharacter,w
 14398  15DD  0084               	movwf	4
 14399  15DE  3088               	movlw	high (_fonts| (0+32768))
 14400  15DF  3D23               	addwfc	??_LCDWriteCharacter+1,w
 14401  15E0  0085               	movwf	5
 14402  15E1  0800               	movf	0,w	;code access
 14403  15E2  00A4               	movwf	??_LCDWriteCharacter+2
 14404  15E3  0824               	movf	??_LCDWriteCharacter+2,w
 14405  15E4  00F0               	movwf	LCDWrite@data
 14406  15E5  3001               	movlw	1
 14407  15E6  3192  2265  3195   	fcall	_LCDWrite
 14408                           
 14409                           ;lcd.c: 148: LCDWrite(1, 0x00);
 14410  15E9  01F0               	clrf	LCDWrite@data
 14411  15EA  3001               	movlw	1
 14412  15EB  3192  2265         	fcall	_LCDWrite
 14413  15ED  0008               	return
 14414  15EE                     __end_of_LCDWriteCharacter:	
 14415                           
 14416                           	psect	text41
 14417  11EA                     __ptext41:	
 14418 ;; *************** function ___wmul *****************
 14419 ;; Defined at:
 14420 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 14421 ;; Parameters:    Size  Location     Type
 14422 ;;  multiplier      2    9[COMMON] unsigned int 
 14423 ;;  multiplicand    2   11[COMMON] unsigned int 
 14424 ;; Auto vars:     Size  Location     Type
 14425 ;;  product         2    0[BANK0 ] unsigned int 
 14426 ;; Return value:  Size  Location     Type
 14427 ;;                  2    9[COMMON] unsigned int 
 14428 ;; Registers used:
 14429 ;;		wreg, status,2, status,0
 14430 ;; Tracked objects:
 14431 ;;		On entry : 0/0
 14432 ;;		On exit  : 0/0
 14433 ;;		Unchanged: 0/0
 14434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14435 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14436 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14437 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14438 ;;      Totals:         4       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14439 ;;Total ram usage:        6 bytes
 14440 ;; Hardware stack levels used:    1
 14441 ;; This function calls:
 14442 ;;		Nothing
 14443 ;; This function is called by:
 14444 ;;		_readIAnalog
 14445 ;;		_LCDWriteCharacter
 14446 ;;		_main
 14447 ;;		_eval_poly
 14448 ;; This function uses a non-reentrant model
 14449 ;;
 14450                           
 14451                           
 14452                           ;psect for function ___wmul
 14453  11EA                     ___wmul:	
 14454                           
 14455                           ;incstack = 0
 14456                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 14457  11EA  0020               	movlb	0	; select bank0
 14458  11EB  01A0               	clrf	___wmul@product
 14459  11EC  01A1               	clrf	___wmul@product+1
 14460  11ED                     l2230:	
 14461  11ED  1C79               	btfss	___wmul@multiplier,0
 14462  11EE  29F4               	goto	l578
 14463  11EF  087B               	movf	___wmul@multiplicand,w
 14464  11F0  0020               	movlb	0	; select bank0
 14465  11F1  07A0               	addwf	___wmul@product,f
 14466  11F2  087C               	movf	___wmul@multiplicand+1,w
 14467  11F3  3DA1               	addwfc	___wmul@product+1,f
 14468  11F4                     l578:	
 14469  11F4  3001               	movlw	1
 14470  11F5                     u2105:	
 14471  11F5  35FB               	lslf	___wmul@multiplicand,f
 14472  11F6  0DFC               	rlf	___wmul@multiplicand+1,f
 14473  11F7  0B89               	decfsz	9,f
 14474  11F8  29F5               	goto	u2105
 14475  11F9  3001               	movlw	1
 14476  11FA                     u2115:	
 14477  11FA  36FA               	lsrf	___wmul@multiplier+1,f
 14478  11FB  0CF9               	rrf	___wmul@multiplier,f
 14479  11FC  0B89               	decfsz	9,f
 14480  11FD  29FA               	goto	u2115
 14481  11FE  0879               	movf	___wmul@multiplier,w
 14482  11FF  047A               	iorwf	___wmul@multiplier+1,w
 14483  1200  1D03               	btfss	3,2
 14484  1201  29ED               	goto	l2230
 14485  1202  0020               	movlb	0	; select bank0
 14486  1203  0821               	movf	___wmul@product+1,w
 14487  1204  00FA               	movwf	?___wmul+1
 14488  1205  0820               	movf	___wmul@product,w
 14489  1206  00F9               	movwf	?___wmul
 14490  1207  0008               	return
 14491  1208                     __end_of___wmul:	
 14492                           
 14493                           	psect	text42
 14494  1265                     __ptext42:	
 14495 ;; *************** function _LCDWrite *****************
 14496 ;; Defined at:
 14497 ;;		line 281 in file "lcd.c"
 14498 ;; Parameters:    Size  Location     Type
 14499 ;;  data_or_comm    1    wreg     unsigned char 
 14500 ;;  data            1    0[COMMON] unsigned char 
 14501 ;; Auto vars:     Size  Location     Type
 14502 ;;  data_or_comm    1    2[COMMON] unsigned char 
 14503 ;;  i               1    4[COMMON] unsigned char 
 14504 ;;  d               1    3[COMMON] unsigned char 
 14505 ;; Return value:  Size  Location     Type
 14506 ;;                  1    wreg      void 
 14507 ;; Registers used:
 14508 ;;		wreg, status,2, status,0
 14509 ;; Tracked objects:
 14510 ;;		On entry : 0/0
 14511 ;;		On exit  : 0/0
 14512 ;;		Unchanged: 0/0
 14513 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14514 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14515 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14516 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14517 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14518 ;;Total ram usage:        5 bytes
 14519 ;; Hardware stack levels used:    1
 14520 ;; This function calls:
 14521 ;;		Nothing
 14522 ;; This function is called by:
 14523 ;;		_gotoXY
 14524 ;;		_LCDWriteCharacter
 14525 ;;		_LCDClear
 14526 ;;		_LCDInit
 14527 ;; This function uses a non-reentrant model
 14528 ;;
 14529                           
 14530                           
 14531                           ;psect for function _LCDWrite
 14532  1265                     _LCDWrite:	
 14533                           
 14534                           ;incstack = 0
 14535                           ; Regs used in _LCDWrite: [wreg+status,2+status,0]
 14536                           ;LCDWrite@data_or_command stored from wreg
 14537  1265  00F2               	movwf	LCDWrite@data_or_command
 14538                           
 14539                           ;lcd.c: 283: uint8_t i,d;
 14540                           ;lcd.c: 285: d=data;
 14541  1266  0870               	movf	LCDWrite@data,w
 14542  1267  00F1               	movwf	??_LCDWrite
 14543  1268  0871               	movf	??_LCDWrite,w
 14544  1269  00F3               	movwf	LCDWrite@d
 14545                           
 14546                           ;lcd.c: 287: if(data_or_command == 0)
 14547  126A  0872               	movf	LCDWrite@data_or_command,w
 14548  126B  1D03               	btfss	3,2
 14549  126C  2A70               	goto	l150
 14550                           
 14551                           ;lcd.c: 288: {
 14552                           ;lcd.c: 289: LATAbits.LATA2 = 0;
 14553  126D  0020               	movlb	0	; select bank0
 14554  126E  1116               	bcf	22,2	;volatile
 14555                           
 14556                           ;lcd.c: 290: }
 14557  126F  2A72               	goto	l151
 14558  1270                     l150:	
 14559                           
 14560                           ;lcd.c: 291: else
 14561                           ;lcd.c: 292: {
 14562                           ;lcd.c: 293: LATAbits.LATA2 = 1;
 14563  1270  0020               	movlb	0	; select bank0
 14564  1271  1516               	bsf	22,2	;volatile
 14565  1272                     l151:	
 14566                           
 14567                           ;lcd.c: 294: }
 14568                           ;lcd.c: 296: LATAbits.LATA1 = 0;
 14569  1272  1096               	bcf	22,1	;volatile
 14570                           
 14571                           ;lcd.c: 298: for(i=0;i<8;i++)
 14572  1273  01F4               	clrf	LCDWrite@i
 14573  1274  3008               	movlw	8
 14574  1275  0274               	subwf	LCDWrite@i,w
 14575  1276  1803               	btfsc	3,0
 14576  1277  2A88               	goto	l153
 14577  1278                     l152:	
 14578                           
 14579                           ;lcd.c: 299: {
 14580                           ;lcd.c: 300: LATAbits.LATA3 = 0;
 14581  1278  1196               	bcf	22,3	;volatile
 14582                           
 14583                           ;lcd.c: 302: if(d&0x80)
 14584  1279  1FF3               	btfss	LCDWrite@d,7
 14585  127A  2A7C               	goto	l154
 14586                           
 14587                           ;lcd.c: 303: {
 14588                           ;lcd.c: 304: LATAbits.LATA3 = 1;
 14589  127B  1596               	bsf	22,3	;volatile
 14590  127C                     l154:	
 14591                           
 14592                           ;lcd.c: 305: }
 14593                           ;lcd.c: 307: LATAbits.LATA4 = 1;
 14594  127C  1616               	bsf	22,4	;volatile
 14595                           
 14596                           ;lcd.c: 309: d<<=1;
 14597  127D  1003               	clrc
 14598  127E  0DF3               	rlf	LCDWrite@d,f
 14599                           
 14600                           ;lcd.c: 311: LATAbits.LATA4=0;
 14601  127F  1216               	bcf	22,4	;volatile
 14602  1280  3001               	movlw	1
 14603  1281  00F1               	movwf	??_LCDWrite
 14604  1282  0871               	movf	??_LCDWrite,w
 14605  1283  07F4               	addwf	LCDWrite@i,f
 14606  1284  3008               	movlw	8
 14607  1285  0274               	subwf	LCDWrite@i,w
 14608  1286  1C03               	skipc
 14609  1287  2A78               	goto	l152
 14610  1288                     l153:	
 14611                           
 14612                           ;lcd.c: 312: }
 14613                           ;lcd.c: 314: LATAbits.LATA1 = 1;
 14614  1288  1496               	bsf	22,1	;volatile
 14615  1289  0008               	return
 14616  128A                     __end_of_LCDWrite:	
 14617  007E                     btemp	set	126	;btemp
 14618  007E                     wtemp0	set	126


Data Sizes:
    Strings     14
    Constant    330
    Data        10
    BSS         90
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     74      76
    BANK1            80     35      78
    BANK2            80      0      55
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5             8      0       0
    BANK6             0      0       0
    BANK7             0      0       0
    BANK8             0      0       0
    BANK9             0      0       0
    BANK10            0      0       0
    BANK11            0      0       0
    BANK12            0      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> log@exponent(BANK0[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 27
		 -> log@coeff(CODE[27]), 

    LCDWriteString@characters	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_1(CODE[14]), 


Critical Paths under _main in COMMON

    _main->___awtoft
    _tempCalc->___awtoft
    _log->___awtoft
    ___ftmul->___awtoft
    ___ftadd->___awtoft
    _readIAnalog->___wmul
    _readButton->_ADCRead
    _calculateCurrent3->___awtoft
    _calculateCurrent2->___awtoft
    _calculateCurrent1->___awtoft
    _calculateCurrent0->___awtoft
    ___fttol->___awtoft
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _SYSTEM_Initialize->_LCDClear
    _LCDInit->_LCDWrite
    _LCDClear->_gotoXY
    _Battery_State_Machine->_LCDWriteString
    _gotoXY->_LCDWrite
    _LCDWriteCharacter->___wmul
    ___wmul->___awdiv

Critical Paths under _main in BANK0

    _main->_tempCalc
    _tempCalc->_log
    _log->_eval_poly
    _eval_poly->___ftadd
    ___ftmul->___ftdiv
    ___ftsub->___ftadd
    ___ftadd->___ftmul
    _readIAnalog->___aldiv
    _calculateCurrent3->___fttol
    _calculateCurrent2->___fttol
    _calculateCurrent1->___fttol
    _calculateCurrent0->___fttol
    ___fttol->___ftdiv
    _LCDWriteInt->_LCDWriteCharacter
    _Battery_State_Machine->_LCDWriteString
    _LCDWriteString->_LCDWriteCharacter
    _LCDWriteCharacter->___wmul

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                37    37      0   99415
                                             72 BANK0      2     2      0
                                              0 BANK1     35    35      0
                            _ADCRead
              _Battery_State_Machine
                           _LCDClear
                            _LCDInit
                  _LCDWriteCharacter
                        _LCDWriteInt
                 _PWM6_LoadDutyValue
                 _PWM7_LoadDutyValue
                  _SYSTEM_Initialize
                            ___awdiv
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                            ___fttol
                             ___wmul
                  _calculateCurrent0
                  _calculateCurrent1
                  _calculateCurrent2
                  _calculateCurrent3
                         _cc_cv_mode
                             _gotoXY
                         _readButton
                        _readIAnalog
                           _tempCalc
 ---------------------------------------------------------------------------------
 (1) _tempCalc                                            11     9      2   33786
                                             61 BANK0     11     9      2
                            _ADCRead (ARG)
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftsub
                            ___fttol
                                _log
 ---------------------------------------------------------------------------------
 (2) _log                                                  6     3      3   16811
                                             55 BANK0      6     3      3
                           ___awtoft
                            ___ftadd
                             ___ftge
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _frexp                                                6     2      4     330
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) _eval_poly                                           10     3      7    7319
                                             45 BANK0     10     3      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             16    10      6    2857
                                             16 BANK0     16    10      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     322
                                              0 COMMON     9     3      6
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    3462
                                             45 BANK0      6     0      6
                            ___ftadd
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             13     7      6    3289
                                             32 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (1) _readIAnalog                                         24    22      2    1606
                                              6 BANK0     24    22      2
                            _ADCRead
                            ___aldiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     406
                                              0 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _readButton                                           2     2      0      22
                                              4 COMMON     2     2      0
                            _ADCRead
 ---------------------------------------------------------------------------------
 (2) _ADCRead                                              4     1      3      22
                                              0 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (1) _cc_cv_mode                                           6     6      0     528
                                              0 COMMON     6     6      0
 ---------------------------------------------------------------------------------
 (1) _calculateCurrent3                                    3     3      0    7062
                                             30 BANK0      3     3      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) _calculateCurrent2                                    3     3      0    7062
                                             30 BANK0      3     3      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) _calculateCurrent1                                    3     3      0    7062
                                             30 BANK0      3     3      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) _calculateCurrent0                                    3     3      0    7062
                                             30 BANK0      3     3      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             14    10      4     729
                                             16 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    3897
                                              0 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             6     3      3    2436
                                              8 COMMON     6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    1707
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    2     2      0    3767
                                             11 COMMON     2     2      0
                     _ADC_Initialize
         _Init_Battery_State_Machine
                           _LCDClear
                            _LCDInit
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _PWM_Initialize
                    _TMR2_Initialize
                    _TMR4_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR4_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               1     1      0      23
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LCDInit                                              1     1      0     803
                                              5 COMMON     1     1      0
                           _LCDWrite
 ---------------------------------------------------------------------------------
 (2) _LCDClear                                             3     3      0    2809
                                              8 COMMON     3     3      0
                           _LCDWrite
                             _gotoXY
 ---------------------------------------------------------------------------------
 (2) _Init_Battery_State_Machine                           2     2      0     132
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM7_LoadDutyValue                                   4     2      2      97
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _PWM6_LoadDutyValue                                   4     2      2      97
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _LCDWriteInt                                         16    11      5    7271
                                              8 BANK0     16    11      5
                            _ADCRead (ARG)
                  _LCDWriteCharacter
                            ___awdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     265
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              9     5      4     726
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (1) _Battery_State_Machine                                6     6      0    4337
                                             10 BANK0      6     6      0
                     _LCDWriteString
                             _gotoXY
 ---------------------------------------------------------------------------------
 (1) _gotoXY                                               3     2      1    1960
                                              5 COMMON     3     2      1
                           _LCDWrite
 ---------------------------------------------------------------------------------
 (2) _LCDWriteString                                       3     1      2    1849
                                             13 COMMON     1     1      0
                                              8 BANK0      2     0      2
                  _LCDWriteCharacter
 ---------------------------------------------------------------------------------
 (2) _LCDWriteCharacter                                    6     6      0    1751
                                              2 BANK0      6     6      0
                           _LCDWrite
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     836
                                              9 COMMON     4     0      4
                                              0 BANK0      2     2      0
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) _LCDWrite                                             5     4      1     803
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCRead
   _Battery_State_Machine
     _LCDWriteString
       _LCDWriteCharacter
         _LCDWrite
         ___wmul
           ___awdiv (ARG)
     _gotoXY
       _LCDWrite
   _LCDClear
     _LCDWrite
     _gotoXY
       _LCDWrite
   _LCDInit
     _LCDWrite
   _LCDWriteCharacter
     _LCDWrite
     ___wmul
       ___awdiv (ARG)
   _LCDWriteInt
     _ADCRead (ARG)
     _LCDWriteCharacter (ARG)
       _LCDWrite
       ___wmul
         ___awdiv (ARG)
     ___awdiv (ARG)
     ___lwmod (ARG)
   _PWM6_LoadDutyValue
   _PWM7_LoadDutyValue
   _SYSTEM_Initialize
     _ADC_Initialize
     _Init_Battery_State_Machine
     _LCDClear
       _LCDWrite
       _gotoXY
         _LCDWrite
     _LCDInit
       _LCDWrite
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM_Initialize
     _TMR2_Initialize
     _TMR4_Initialize
   ___awdiv
   ___awtoft
     ___ftpack
   ___ftdiv
     ___awtoft (ARG)
       ___ftpack
     ___ftpack (ARG)
     ___ftpack (ARG)
   ___ftmul
     ___awtoft (ARG)
       ___ftpack
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftpack (ARG)
     _frexp (ARG)
   ___fttol
     ___awtoft (ARG)
       ___ftpack
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
   ___wmul
     ___awdiv (ARG)
   _calculateCurrent0
     ___awtoft
       ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
   _calculateCurrent1
     ___awtoft
       ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
   _calculateCurrent2
     ___awtoft
       ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
   _calculateCurrent3
     ___awtoft
       ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
   _cc_cv_mode
   _gotoXY
     _LCDWrite
   _readButton
     _ADCRead
   _readIAnalog
     _ADCRead
     ___aldiv
     ___wmul
       ___awdiv (ARG)
   _tempCalc
     _ADCRead (ARG)
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
       _frexp (ARG)
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftsub (ARG)
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
         _frexp (ARG)
     ___fttol (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
     _log (ARG)
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
         _frexp (ARG)
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       _eval_poly
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
       _frexp

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4A      4C       5       95.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     23      4E       7       97.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      37       9       68.8%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5                8      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      DF      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BANK8                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BANK9                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BANK10               0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BANK11               0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      DF      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sat Jul 07 00:37:22 2018

                       _stateCounter 0149                                    _j 00C8  
             LCDWriteInt@fieldLength 002A              __size_of_PWM_Initialize 0015  
                        __CFG_CP$OFF 0000                                   l60 11CD  
                                 l57 11C6                         ___awdiv@sign 0076  
                ___wmul@multiplicand 007B          __size_of_PWM6_LoadDutyValue 0016  
                       ___ftadd@exp1 004C                         ___ftadd@exp2 004B  
                        __CFG_LVP$ON 0000                         ___ftadd@sign 004A  
                                l150 1270                                  l151 1272  
                                l152 1278                                  l153 1288  
                                l154 127C                        LCDClear@index 0079  
                                l633 165F                                  l485 0C19  
                                l830 173D                                  l578 11F4  
                                l746 005F                                  l770 0D68  
                                l747 0067                                  l739 004C  
                                _GIE 005F                                  _RB2 006A  
                       __CFG_CPD$OFF 0000                                  _log 09CE  
                    __end_of_ADCRead 11D4                      _TMR2_Initialize 117B  
                       __CFG_BORV$LO 0000                                  wreg 0009  
                    __end_of_LCDInit 13BB                         ?_LCDWriteInt 0028  
                       __CFG_ZCD$OFF 0000                         ___ftdiv@cntr 002A  
                       ___ftdiv@sign 002F                                 l3002 0F1B  
                               l3020 0FA6                                 l3004 0F23  
                               l3100 0218                                 l2230 11ED  
                               l3006 0F35                                 l3016 0F8C  
                               l3024 0FBF                                 l3112 0263  
                               l3050 0C34                                 l3202 040F  
                               l3106 0237                                 l3028 0FD8  
                               l2308 0DA7                                 l2252 0CF8  
                               l2340 0AEE                                 l2324 0AAB  
                               l2502 1297                                 l2182 0029  
                               l3046 0C27                                 l2270 0D21  
                               l2318 0A95                                 l3214 043D  
                               l3142 033B                                 l2192 0051  
                               l2184 0033                                 l3056 0C77  
                               l2280 0D43                                 l2248 0CF1  
                               l2352 0B0A                                 l2336 0AE6  
                               l2416 1408                                 l2194 0059  
                               l2186 0038                                 l2178 0022  
                               l2290 0D64                                 l2282 0D47  
                               l2258 0D07                                 l2434 1647  
                               l3154 0372                                 l2508 12AB  
                               l2276 0D34                                 l2348 0B02  
                               l2612 0A00                                 l3340 07B9  
                               l3172 03A4                                 l3148 0358  
                               l2702 1591                                 l2294 0D7A  
                               l2278 0D3E                                 l2606 09ED  
                               l3166 0387                                 l3094 0212  
                               l3086 01FE                                 l2384 124F  
                               l2712 176E                                 l2640 1680  
                               l2632 1670                                 l2288 0D5A  
                               l2392 13D1                                 l3336 07B0  
                               l3192 03F1                                 l2650 16AE  
                               l2642 168E                                 l2298 0D8C  
                               l3178 03BE                                 l2812 12CE  
                               l2740 17DE                                 l2732 17C5  
                               l2396 13E7                                 l2494 0930  
                               l2670 154F                                 l2806 12B6  
                               l2910 0B87                                 l2718 1784  
                               l2654 16B9                                 l3198 0408  
                               l2808 12C2                                 l2816 12D7  
                               l2920 0B9D                                 l2752 1210  
                               l2914 0B8B                                 l2762 16E9  
                               l2658 16C7                                 l2834 01A1  
                               l2676 155A                                 l2932 0BD6  
                               l2916 0B8F                                 l2908 0B5A  
                               l2780 1719                                 l2860 0999  
                               l2694 1580                                 l2686 1562  
                               l2926 0BA1                                 l2918 0B97  
                               l2790 1740                                 l2782 1727  
                               l2854 0985                                 l2688 156E  
                               l2928 0BC8                                 l2880 09CA  
                               l2848 096B                                 l2698 1589  
                               l2794 174E                                 l2874 09B0  
                               l2882 09CC                                 l2858 0997  
                               l2788 1734                                 l2980 148F  
                               l2868 09A5                                 l2974 144A  
                               l2992 1519                                 l2898 0B53  
                               l2986 14D4                                 ?_log 0057  
                               STR_1 181B                                 u2105 11F5  
                               u2115 11FA                                 u2035 006E  
                               _LATA 0016                                 _LATB 0017  
                               _LATC 0018                                 u3105 012C  
                               u2225 0D22                                 u3035 12B9  
                               u3115 017B                                 u2315 0D5B  
                               u3055 12C8                                 u2255 0D35  
                               u2415 0AEF                                 u3240 0B3D  
                               u3065 12CF                                 u3305 0BB6  
                               u3145 01AD                                 u2425 0AF5  
                               _T2PR 028D                                 u3155 0959  
                               u3405 0EF7                                 u3165 0965  
                               u3085 0094                                 u2285 0D48  
                               u3415 0F0C                                 u3335 11E3  
                               u3175 0975                                 u3095 00EE  
                               u2455 0B0B                                 u3345 0013  
                               u3505 0C06                                 u3185 0981  
                               u2705 16AF                                 u2465 0B11  
                               u2385 0AB7                                 _T4PR 0293  
                               u3355 1444                                 u3195 098F  
                               u2395 0AC7                                 u3445 0F5F  
                               u2805 1581                                 u3365 1489  
                               u2590 1345                                 u2575 1295  
                               u3375 14CE                                 u2585 12A9  
                               u3385 1513                                 u3545 0C4E  
                               u2665 1683                                 u3705 0367  
                               u1955 002E                                 u2765 1565  
                               u3565 0C91                                 u2685 168F  
                               u3645 0329                                 u1975 0047  
                               u2855 1796                                 u2935 16F0  
                               u2695 16A3                                 u3815 03EA  
                               u3735 0384                                 u2785 156F  
                               u2865 17A6                                 u2795 1579  
                               u1995 0054                                 u2875 17C6  
                               u3907 09BB                                 u3835 0401  
                               u3917 1369                                 u2885 17D5  
                               u2965 171A                                 u3765 0395  
                               u3685 0349                                 u3927 1378  
                               u2895 17DF                                 u3937 0FF8  
                               u3785 03B3                                 u2995 1735  
                               u3897 0206                  tempCalc@analogValue 005D  
                               _WPUA 0F39                                 _WPUB 0F44  
                               _WPUC 0F4F                                 _WPUE 0F65  
                               _Imin 0145                                 _Iref 00B4  
                               _Iout 00BE                         __CFG_WRT$OFF 0000  
                      __CFG_FCMEN$ON 0000                                 _Vref 00B8  
                               _main 01CA                         ___ftpack@arg 0070  
                       ___ftpack@exp 0073                                 fsr0h 0005  
                               fsr1h 0007                                 indf0 0000  
                               fsr0l 0004                                 indf1 0001  
                               fsr1l 0006                                 btemp 007E  
                               log@x 0057                         ?_readIAnalog 0026  
                      __CFG_BOREN$ON 0000                                 start 0002  
                      __CFG_CSWEN$ON 0000                        __CFG_MCLRE$ON 0000  
                       ___ftmul@cntr 003E                         ___ftmul@sign 003F  
                   __end_of_LCDClear 12B0                         ___fttol@exp1 003D  
                              ??_log 005A                         ___fttol@lval 0039  
__size_of_Init_Battery_State_Machine 0034       __size_of_OSCILLATOR_Initialize 0009  
                   __end_of_LCDWrite 128A        __end_of_OSCILLATOR_Initialize 116F  
                    __end_of___aldiv 16D0                                _ADACQ 009D  
                              _ADACT 0099                                _ADCAP 009B  
                              ?_main 0070                                _ADCLK 0098  
                              _ADPCH 009E                                _ADREF 009A  
                    __end_of___awdiv 1596                                _ADPRE 009C  
                    __end_of___ftadd 0DBF                        __CFG_WDTE$OFF 0000  
                              _ADRPT 010D                      __end_of___ftdiv 1800  
                    __end_of___ftmul 0B32                      ___awdiv@divisor 0070  
                    __end_of___ftsub 1226                      __end_of___fttol 1757  
                              _T2CON 028E                                _LATA5 00B5  
                              _T4CON 0294                                _T2HLT 028F  
                              _T4HLT 0295                                _T2TMR 028C  
                              _T2RST 0291                      __end_of___lwmod 12DC  
                              _T4TMR 0292                                _T4RST 0297  
                    ___awdiv@counter 0075                                _OSCEN 0891  
                              _TRISA 0011                                _TRISB 0012  
                              _TRISC 0013                      _TMR4_Initialize 1189  
                              _Imode 00EC               ?_Battery_State_Machine 0070  
                              _cc_cv 00BC                        ___awtoft@sign 007D  
                              _frexp 13F6                                _fonts 0800  
                              _errno 014D                        ___ftpack@sign 0074  
                              main@j 00E5                         main@slowLoop 00DF  
                              status 0003                                wtemp0 007E  
                    __initialization 07BC                          log@exponent 005B  
                       __end_of_main 07BC              __end_of_TMR2_Initialize 1189  
                          ??_ADCRead 0073                               ??_main 0068  
                      ___fttol@sign1 0038                            ??_LCDInit 0075  
             Battery_State_Machine@z 002F              LCDWrite@data_or_command 0072  
                             _ADCON0 0093                               _ADCON1 0094  
                             _ADCON2 0095                               _ADCON3 0096  
                             ?_frexp 0070                               _ADLTHH 010F  
                             _ADLTHL 010E                               _ADRESH 008D  
                             _ADRESL 008C                               _ADSTAT 0097  
                             _ADUTHH 0111                     ___awdiv@dividend 0072  
                             _ADUTHL 0110                     __end_of___awtoft 1265  
                             _ANSELA 0F38                               _ANSELB 0F43  
                             _ANSELC 0F4E                     __end_of___ftpack 007E  
                             _RB0PPS 0F18                               _RA6PPS 0F16  
                             _RA7PPS 0F17                       __CFG_WDTCCS$SC 0000  
                             _FVRCON 090C                               _OSCFRQ 0893  
                     __CFG_PWRTE$OFF 0000                       _LCDWriteString 0930  
                       _CCPTMRS1bits 021F                               ___ftge 13BB  
                          ??___aldiv 0078                               ___wmul 11EA  
                          ??___awdiv 0074                            ??___ftadd 0046  
                     __CFG_STVREN$ON 0000                       _PWM_Initialize 11AA  
                          ??___ftdiv 0026                            ??___ftmul 0036  
                          ??___ftsub 007E                            ??___fttol 0034  
                          ??___lwmod 0074                               _gotoXY 1197  
                             _button 006B              __end_of_TMR4_Initialize 1197  
                   ___awdiv@quotient 0077                               _totals 0120  
              ___ftmul@f3_as_product 003B                     __end_of_tempCalc 0EDC  
                       LCDWrite@data 0070                         LCDWriteInt@i 0037  
                       LCDWriteInt@j 0036                            ?_LCDClear 0070  
                  _SYSTEM_Initialize 1347                 __size_of_LCDWriteInt 00B9  
                   __end_oflog@coeff 181B              __end_of__initialization 07FD  
                         ___ftadd@f1 0040                           ___ftadd@f2 0043  
                         ___ftge@ff1 0070                           ___ftge@ff2 0073  
                          ?_LCDWrite 0070                   ?_SYSTEM_Initialize 0070  
             __end_of_LCDWriteString 0947                         eval_poly@res 0054  
                         ___ftdiv@f1 0023                           ___ftdiv@f2 0020  
                         ___ftdiv@f3 002B                           ___awtoft@c 0078  
                         ___ftmul@f1 0030                           ___ftmul@f2 0033  
             __end_of_PWM_Initialize 11BF                 __size_of_readIAnalog 014C  
                         ___ftsub@f1 0050                           ___ftsub@f2 004D  
                         ___fttol@f1 0030                       __pcstackCOMMON 0070  
                       __pidataBANK1 115C                         __pidataBANK2 115E  
                ??_SYSTEM_Initialize 007B                        __end_of_frexp 1431  
                      __end_of_fonts 092F                            LCDWrite@d 0073  
                          LCDWrite@i 0074                     ?_TMR2_Initialize 0070  
                         _cc_cv_mode 0BEB          __size_of_PWM7_LoadDutyValue 0016  
                     main@efficiency 00E1                    LCDWriteInt@F14387 0140  
                  _calculateCurrent0 1431                    _calculateCurrent1 1476  
                  _calculateCurrent2 14BB                    _calculateCurrent3 1500  
                            ??_frexp 0074            __end_of_SYSTEM_Initialize 1380  
                         __pbssBANK0 006A                           __pbssBANK1 00A0  
                         __pbssBANK2 0120                   ?_calculateCurrent0 0070  
                 ?_calculateCurrent1 0070                   ?_calculateCurrent2 0070  
                 ?_calculateCurrent3 0070                         _batteryState 00C0  
                 __size_of_eval_poly 0060                           ??_LCDClear 0078  
                     main@faultCount 00D6                           ??_LCDWrite 0071  
                    ?_LCDWriteString 0028                  ??_calculateCurrent0 003E  
                ??_calculateCurrent1 003E                  ??_calculateCurrent2 003E  
                ??_calculateCurrent3 003E                      ?_PWM_Initialize 0070  
                         __pmaintext 01CA                              ?___ftge 0070  
                            ?___wmul 0079                      __CFG_PPS1WAY$ON 0000  
         __end_of_PWM6_LoadDutyValue 11EA                              ?_gotoXY 0075  
                            _ADCRead 11BF                     ?_TMR4_Initialize 0070  
                          ?___awtoft 0078                            ?___ftpack 0070  
                            _ADSTPTH 0113                              _ADSTPTL 0112  
           __CFG_SCANE$not_available 0000                  __CFG_RSTOSC$HFINT32 0000  
            __size_of_ADC_Initialize 001F              ??_Battery_State_Machine 002A  
                            _LCDInit 1380            __end_of_calculateCurrent0 1476  
          __end_of_calculateCurrent1 14BB            __end_of_calculateCurrent2 1500  
          __end_of_calculateCurrent3 1545                              _OSCCON1 088D  
                            _OSCCON3 088F                              _OSCTUNE 0892  
                            _PWM6DCH 038D                              _PWM6DCL 038C  
                            _PWM7DCH 0391                              _PWM7DCL 0390  
                            _PWM6CON 038E                              _PWM7CON 0392  
                            _PPSLOCK 0E8F                       main@menuButton 00E4  
                     main@dutyCycle1 00D4                       main@dutyCycle6 00E8  
                     main@dutyCycle7 00EA                           _lastButton 006A  
                          ?_tempCalc 005D                              ___aldiv 164E  
                    __size_of___ftge 003B                              ___awdiv 1545  
                            ___ftadd 0CC9                           _readButton 0947  
                            ___ftdiv 1757                      __size_of___wmul 001E  
                            ___ftmul 0A7E                              ___ftsub 1208  
                            ___fttol 16D0                   main@displayRefresh 00E0  
                            ___lwmod 12B0                      __size_of_gotoXY 0013  
                         ??___awtoft 007B                           ??___ftpack 0075  
                  __end_of_eval_poly 164E                              __ptext1 0DBF  
                            __ptext2 09CE                              __ptext3 13F6  
                            __ptext4 15EE                              __ptext5 0A7E  
                            __ptext6 13BB                              __ptext7 1208  
                            __ptext8 0CC9                              __ptext9 007E  
                        ?_cc_cv_mode 0070                _OSCILLATOR_Initialize 1166  
                          _T2CONbits 028E                              _current 00A0  
                       __size_of_log 00B0                       ADCRead@channel 0073  
                   ___aldiv@dividend 0074                            _T4CONbits 0294  
           ??_PIN_MANAGER_Initialize 0070                              _samples 2198  
         __size_of_SYSTEM_Initialize 0039                              clrloop0 1170  
                            _voltage 00A8         ??_Init_Battery_State_Machine 0070  
               end_of_initialization 07FD                LCDWriteCharacter@base 0026  
                            gotoXY@x 0077                              gotoXY@y 0075  
                         ??_tempCalc 007E                     ___aldiv@quotient 0022  
                  _LCDWriteCharacter 1596                __CFG_WDTCPS$WDTCPS_31 0000  
                 ?_LCDWriteCharacter 0070           __size_of_calculateCurrent0 0045  
         __size_of_calculateCurrent1 0045           __size_of_calculateCurrent2 0045  
         __size_of_calculateCurrent3 0045                            _TRISAbits 0011  
                ??_LCDWriteCharacter 0022                     __CFG_FEXTOSC$OFF 0000  
                        ___ftdiv@exp 002E                  __size_of_cc_cv_mode 00DE  
                  __size_of_LCDClear 0026           LCDWriteCharacter@character 0025  
                  __size_of_LCDWrite 0025                          ___ftmul@exp 003A  
          __end_of_LCDWriteCharacter 15EE                          ?_readButton 0070  
          readIAnalog@analog_channel 003A                       __end_of___ftge 13F6  
                          _VHoldMode 00C2                       __end_of___wmul 1208  
                     _ADC_Initialize 1226                       __end_of_gotoXY 11AA  
             ?_OSCILLATOR_Initialize 0070                            _IminCount 00B0  
                start_initialization 07BC                           eval_poly@d 0050  
                         eval_poly@n 0052                           eval_poly@x 004D  
                  main@faultNotReset 00CD      __size_of_PIN_MANAGER_Initialize 0037  
                        __end_of_log 0A7E                        ??_LCDWriteInt 002D  
                   ??_LCDWriteString 007D                           frexp@value 0070  
                   ??_PWM_Initialize 0070                        ??_readIAnalog 0028  
                    main@batteryTemp 00CB                     __CFG_LPBOREN$OFF 0000  
                           ??___ftge 0076                    tempCalc@steinhart 0065  
                           ??___wmul 007D               __end_of_ADC_Initialize 1245  
                      _tempCalc$1189 0062                          __pdataBANK1 00EC  
                        __pdataBANK2 014F           __end_of_PWM7_LoadDutyValue 001A  
                           ??_gotoXY 0076                             ?_ADCRead 0070  
       PWM7_LoadDutyValue@dutyCycle7 0070                    __size_of___awtoft 0020  
                           ?_LCDInit 0070                    __size_of___ftpack 0064  
                        __pbssBIGRAM 2198       __size_of_Battery_State_Machine 0124  
      __end_of_Battery_State_Machine 1000                            ___latbits 0002  
                      __pcstackBANK0 0020                        __pcstackBANK1 00C9  
                 _PWM6_LoadDutyValue 11D4             __size_of_TMR2_Initialize 000E  
 __end_of_Init_Battery_State_Machine 1310           _Init_Battery_State_Machine 12DC  
                __size_of_readButton 0087                  ?_PWM6_LoadDutyValue 0070  
                __end_of_LCDWriteInt 0BEB                            _main$1190 00D8  
                          _main$1191 00CF                            _main$1192 00DB  
                          _main$1193 00DD               _PIN_MANAGER_Initialize 1310  
         __size_of_LCDWriteCharacter 0058                             ?___aldiv 0070  
                __end_of_readIAnalog 01CA                    __size_of_tempCalc 011D  
                           ?___awdiv 0070                             ?___ftadd 0040  
                           ?___ftdiv 0020                             ?___ftmul 0030  
                           ?___ftsub 004D                             ?___fttol 0030  
                   LCDWriteInt@value 0028                             ?___lwmod 0070  
                    ?_ADC_Initialize 0070                 ??_PWM6_LoadDutyValue 0072  
                       ??_cc_cv_mode 0070                            _eval_poly 15EE  
           __size_of_TMR4_Initialize 000E                       __size_of_frexp 003B  
                           _T2CLKCON 0290                             _T4CLKCON 0296  
                        cc_cv_mode@z 0075                             _LCDClear 128A  
                    ___aldiv@divisor 0070                      ___aldiv@counter 0020  
                     ___wmul@product 0020                             _LATAbits 0016  
                           _LCDWrite 1265                            clear_ram0 116F  
                           _PIE0bits 0716                   __end_of_cc_cv_mode 0CC9  
                           _PIR4bits 0710                     readIAnalog@value 003C  
                          main@MPPT0 00E6                            main@MPPT1 00D2  
                   __size_of_ADCRead 0015                           _ADCON0bits 0093  
                  ___wmul@multiplier 0079                           ?_eval_poly 004D  
                   __size_of_LCDInit 003B                             _Ianalogs 0130  
                        _LCDWriteInt 0B32          Init_Battery_State_Machine@z 0071  
                  ??_TMR2_Initialize 0070                          _readIAnalog 007E  
                          frexp@eptr 0073                             _Vanalogs 0138  
                       ??_readButton 0074              ??_OSCILLATOR_Initialize 0070  
               LCDWriteInt@numPlaces 002B                     __size_of___aldiv 0082  
                   __size_of___awdiv 0051                     __size_of___ftadd 00F6  
                   __size_of___ftdiv 00A9                     __size_of___ftmul 00B4  
                   __size_of___ftsub 001E                     __size_of___fttol 0087  
                   __size_of___lwmod 002C                          _readButtons 00C4  
                           ___awtoft 1245                             ___ftpack 001A  
                           _channels 014F                             __ptext10 164E  
                           __ptext11 0947                             __ptext20 1245  
                           __ptext12 11BF                             __ptext21 001A  
                           __ptext13 0BEB                             __ptext30 12DC  
                           __ptext22 1347                             __ptext14 1500  
                           __ptext31 1226                             __ptext23 1189  
                           __ptext15 14BB                             __ptext40 1596  
                           __ptext32 0004                             __ptext24 117B  
                           __ptext16 1476                             __ptext41 11EA  
                           __ptext33 11D4                             __ptext25 11AA  
                           __ptext17 1431                             __ptext42 1265  
                           __ptext34 0B32                             __ptext26 1310  
                           __ptext18 16D0                             __ptext35 12B0  
                           __ptext27 1166                             __ptext19 1757  
                           __ptext36 1545                             __ptext28 1380  
                           __ptext37 0EDC                             __ptext29 128A  
                           __ptext38 1197                             __ptext39 0930  
                    LCDWriteInt@sign 002C                            tempCalc@R 005F  
                 __end_of_readButton 09CE                    ??_TMR4_Initialize 0070  
                      __size_of_main 05F2                 __CFG_WDTCWS$WDTCWS_7 0000  
                           _tempCalc 0DBF          PIN_MANAGER_Initialize@state 0070  
                           log@coeff 1800                          ??_eval_poly 007E  
                        _sampleIndex 00C6                   _PWM7_LoadDutyValue 0004  
        ?_Init_Battery_State_Machine 0070                     ___lwmod@dividend 0072  
                     LCDWriteInt@str 0031              ?_PIN_MANAGER_Initialize 0070  
                ?_PWM7_LoadDutyValue 0070                    __CFG_CLKOUTEN$OFF 0000  
                        _PPSLOCKbits 0E8F                     ??_ADC_Initialize 0070  
       PWM6_LoadDutyValue@dutyCycle6 0070                        __pstringtext1 0800  
                      __pstringtext2 1800                        __pstringtext3 0000  
               ??_PWM7_LoadDutyValue 0072                      ___lwmod@divisor 0070  
                    ___lwmod@counter 0075             LCDWriteString@characters 0028  
                       ___aldiv@sign 0021                   readIAnalog@channel 0026  
              _Battery_State_Machine 0EDC       __end_of_PIN_MANAGER_Initialize 1347  
                      main@IOutTotal 00C9              __size_of_LCDWriteString 0017  
