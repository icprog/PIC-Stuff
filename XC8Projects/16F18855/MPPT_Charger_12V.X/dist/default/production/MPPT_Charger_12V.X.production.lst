

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sun Jul 08 02:59:23 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F18855
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	stringtext1,global,class=STRCODE,delta=2
     7                           	psect	stringtext2,global,class=STRCODE,delta=2
     8                           	psect	stringtext3,global,class=STRCODE,delta=2
     9                           	psect	cinit,global,class=CODE,merge=1,delta=2
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    20                           	psect	text1,local,class=CODE,merge=1,delta=2
    21                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    22                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    23                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    24                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    25                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    26                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    27                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    28                           	psect	text9,local,class=CODE,merge=1,delta=2
    29                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    30                           	psect	text11,local,class=CODE,merge=1,delta=2
    31                           	psect	text12,local,class=CODE,merge=1,delta=2
    32                           	psect	text13,local,class=CODE,merge=1,delta=2
    33                           	psect	text14,local,class=CODE,merge=1,delta=2
    34                           	psect	text15,local,class=CODE,merge=1,delta=2
    35                           	psect	text16,local,class=CODE,merge=1,delta=2
    36                           	psect	text17,local,class=CODE,merge=1,delta=2
    37                           	psect	text18,local,class=CODE,merge=1,delta=2,group=2
    38                           	psect	text19,local,class=CODE,merge=1,delta=2,group=2
    39                           	psect	text20,local,class=CODE,merge=1,delta=2,group=2
    40                           	psect	text21,local,class=CODE,merge=1,delta=2,group=2
    41                           	psect	text22,local,class=CODE,merge=1,delta=2
    42                           	psect	text23,local,class=CODE,merge=1,delta=2
    43                           	psect	text24,local,class=CODE,merge=1,delta=2
    44                           	psect	text25,local,class=CODE,merge=1,delta=2
    45                           	psect	text26,local,class=CODE,merge=1,delta=2
    46                           	psect	text27,local,class=CODE,merge=1,delta=2
    47                           	psect	text28,local,class=CODE,merge=1,delta=2
    48                           	psect	text29,local,class=CODE,merge=1,delta=2
    49                           	psect	text30,local,class=CODE,merge=1,delta=2
    50                           	psect	text31,local,class=CODE,merge=1,delta=2
    51                           	psect	text32,local,class=CODE,merge=1,delta=2
    52                           	psect	text33,local,class=CODE,merge=1,delta=2
    53                           	psect	text34,local,class=CODE,merge=1,delta=2
    54                           	psect	text35,local,class=CODE,merge=1,delta=2,group=2
    55                           	psect	text36,local,class=CODE,merge=1,delta=2,group=2
    56                           	psect	text37,local,class=CODE,merge=1,delta=2
    57                           	psect	text38,local,class=CODE,merge=1,delta=2
    58                           	psect	text39,local,class=CODE,merge=1,delta=2
    59                           	psect	text40,local,class=CODE,merge=1,delta=2
    60                           	psect	text41,local,class=CODE,merge=1,delta=2,group=2
    61                           	psect	text42,local,class=CODE,merge=1,delta=2
    62                           	dabs	1,0x620,48
    63                           	dabs	1,0x5A0,80
    64                           	dabs	1,0x520,80
    65                           	dabs	1,0x4A0,80
    66                           	dabs	1,0x420,80
    67                           	dabs	1,0x3A0,80
    68                           	dabs	1,0x320,80
    69                           	dabs	1,0x2A8,72
    70                           	dabs	1,0x2198,0,_samples
    71                           	dabs	1,0x7E,2
    72  0000                     
    73                           ; Version 1.45
    74                           ; Generated 16/11/2017 GMT
    75                           ; 
    76                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    77                           ; All rights reserved.
    78                           ; 
    79                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    80                           ; 
    81                           ; Redistribution and use in source and binary forms, with or without modification, are
    82                           ; permitted provided that the following conditions are met:
    83                           ; 
    84                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    85                           ;        conditions and the following disclaimer.
    86                           ; 
    87                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    88                           ;        of conditions and the following disclaimer in the documentation and/or other
    89                           ;        materials provided with the distribution.
    90                           ; 
    91                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    92                           ;        software without specific prior written permission.
    93                           ; 
    94                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    95                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    96                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    97                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    98                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    99                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   100                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   101                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   102                           ; 
   103                           ; 
   104                           ; Code-generator required, PIC16F18855 Definitions
   105                           ; 
   106                           ; SFR Addresses
   107  0000                     	;# 
   108  0001                     	;# 
   109  0002                     	;# 
   110  0003                     	;# 
   111  0004                     	;# 
   112  0005                     	;# 
   113  0006                     	;# 
   114  0007                     	;# 
   115  0008                     	;# 
   116  0009                     	;# 
   117  000A                     	;# 
   118  000B                     	;# 
   119  000C                     	;# 
   120  000D                     	;# 
   121  000E                     	;# 
   122  0010                     	;# 
   123  0011                     	;# 
   124  0012                     	;# 
   125  0013                     	;# 
   126  0016                     	;# 
   127  0017                     	;# 
   128  0018                     	;# 
   129  001C                     	;# 
   130  001C                     	;# 
   131  001D                     	;# 
   132  001D                     	;# 
   133  001E                     	;# 
   134  001F                     	;# 
   135  008C                     	;# 
   136  008C                     	;# 
   137  008D                     	;# 
   138  008E                     	;# 
   139  008E                     	;# 
   140  008F                     	;# 
   141  0090                     	;# 
   142  0090                     	;# 
   143  0091                     	;# 
   144  0093                     	;# 
   145  0094                     	;# 
   146  0095                     	;# 
   147  0096                     	;# 
   148  0097                     	;# 
   149  0098                     	;# 
   150  0099                     	;# 
   151  009A                     	;# 
   152  009B                     	;# 
   153  009C                     	;# 
   154  009D                     	;# 
   155  009E                     	;# 
   156  010C                     	;# 
   157  010D                     	;# 
   158  010E                     	;# 
   159  010E                     	;# 
   160  010F                     	;# 
   161  0110                     	;# 
   162  0110                     	;# 
   163  0111                     	;# 
   164  0112                     	;# 
   165  0112                     	;# 
   166  0113                     	;# 
   167  0114                     	;# 
   168  0114                     	;# 
   169  0115                     	;# 
   170  0116                     	;# 
   171  0116                     	;# 
   172  0117                     	;# 
   173  0119                     	;# 
   174  0119                     	;# 
   175  0119                     	;# 
   176  011A                     	;# 
   177  011A                     	;# 
   178  011A                     	;# 
   179  011B                     	;# 
   180  011B                     	;# 
   181  011B                     	;# 
   182  011B                     	;# 
   183  011B                     	;# 
   184  011C                     	;# 
   185  011C                     	;# 
   186  011C                     	;# 
   187  011D                     	;# 
   188  011D                     	;# 
   189  011D                     	;# 
   190  011E                     	;# 
   191  011E                     	;# 
   192  011E                     	;# 
   193  011F                     	;# 
   194  011F                     	;# 
   195  011F                     	;# 
   196  011F                     	;# 
   197  011F                     	;# 
   198  018C                     	;# 
   199  018D                     	;# 
   200  018E                     	;# 
   201  018F                     	;# 
   202  0190                     	;# 
   203  0191                     	;# 
   204  0192                     	;# 
   205  0196                     	;# 
   206  0197                     	;# 
   207  0198                     	;# 
   208  0199                     	;# 
   209  019A                     	;# 
   210  019B                     	;# 
   211  019C                     	;# 
   212  020C                     	;# 
   213  020C                     	;# 
   214  020D                     	;# 
   215  020E                     	;# 
   216  020F                     	;# 
   217  020F                     	;# 
   218  0210                     	;# 
   219  0210                     	;# 
   220  0211                     	;# 
   221  0211                     	;# 
   222  0212                     	;# 
   223  0212                     	;# 
   224  0213                     	;# 
   225  0214                     	;# 
   226  0215                     	;# 
   227  0215                     	;# 
   228  0216                     	;# 
   229  0216                     	;# 
   230  0217                     	;# 
   231  0217                     	;# 
   232  0218                     	;# 
   233  0218                     	;# 
   234  0219                     	;# 
   235  021A                     	;# 
   236  021B                     	;# 
   237  021B                     	;# 
   238  021C                     	;# 
   239  021C                     	;# 
   240  021D                     	;# 
   241  021D                     	;# 
   242  021E                     	;# 
   243  021F                     	;# 
   244  028C                     	;# 
   245  028C                     	;# 
   246  028D                     	;# 
   247  028D                     	;# 
   248  028E                     	;# 
   249  028F                     	;# 
   250  0290                     	;# 
   251  0290                     	;# 
   252  0291                     	;# 
   253  0292                     	;# 
   254  0292                     	;# 
   255  0293                     	;# 
   256  0293                     	;# 
   257  0294                     	;# 
   258  0295                     	;# 
   259  0296                     	;# 
   260  0296                     	;# 
   261  0297                     	;# 
   262  0298                     	;# 
   263  0298                     	;# 
   264  0299                     	;# 
   265  0299                     	;# 
   266  029A                     	;# 
   267  029B                     	;# 
   268  029C                     	;# 
   269  029C                     	;# 
   270  029D                     	;# 
   271  030C                     	;# 
   272  030C                     	;# 
   273  030D                     	;# 
   274  030E                     	;# 
   275  030F                     	;# 
   276  0310                     	;# 
   277  0310                     	;# 
   278  0311                     	;# 
   279  0312                     	;# 
   280  0313                     	;# 
   281  0314                     	;# 
   282  0314                     	;# 
   283  0315                     	;# 
   284  0316                     	;# 
   285  0317                     	;# 
   286  0318                     	;# 
   287  0318                     	;# 
   288  0319                     	;# 
   289  031A                     	;# 
   290  031B                     	;# 
   291  031C                     	;# 
   292  031C                     	;# 
   293  031D                     	;# 
   294  031E                     	;# 
   295  031F                     	;# 
   296  038C                     	;# 
   297  038D                     	;# 
   298  038E                     	;# 
   299  0390                     	;# 
   300  0391                     	;# 
   301  0392                     	;# 
   302  040C                     	;# 
   303  040D                     	;# 
   304  040E                     	;# 
   305  040F                     	;# 
   306  0410                     	;# 
   307  0411                     	;# 
   308  0416                     	;# 
   309  0416                     	;# 
   310  0417                     	;# 
   311  0418                     	;# 
   312  0418                     	;# 
   313  0419                     	;# 
   314  041A                     	;# 
   315  041A                     	;# 
   316  041B                     	;# 
   317  041C                     	;# 
   318  041C                     	;# 
   319  041D                     	;# 
   320  041E                     	;# 
   321  041F                     	;# 
   322  048C                     	;# 
   323  048C                     	;# 
   324  048D                     	;# 
   325  048E                     	;# 
   326  048F                     	;# 
   327  048F                     	;# 
   328  0490                     	;# 
   329  0491                     	;# 
   330  0492                     	;# 
   331  0492                     	;# 
   332  0493                     	;# 
   333  0494                     	;# 
   334  0495                     	;# 
   335  0495                     	;# 
   336  0496                     	;# 
   337  0497                     	;# 
   338  0498                     	;# 
   339  0499                     	;# 
   340  049A                     	;# 
   341  049B                     	;# 
   342  049C                     	;# 
   343  049D                     	;# 
   344  050C                     	;# 
   345  050C                     	;# 
   346  050D                     	;# 
   347  050E                     	;# 
   348  050F                     	;# 
   349  050F                     	;# 
   350  0510                     	;# 
   351  0511                     	;# 
   352  0512                     	;# 
   353  0512                     	;# 
   354  0513                     	;# 
   355  0514                     	;# 
   356  0515                     	;# 
   357  0515                     	;# 
   358  0516                     	;# 
   359  0517                     	;# 
   360  0518                     	;# 
   361  0519                     	;# 
   362  051A                     	;# 
   363  051B                     	;# 
   364  051C                     	;# 
   365  051D                     	;# 
   366  058C                     	;# 
   367  058C                     	;# 
   368  058D                     	;# 
   369  058E                     	;# 
   370  058F                     	;# 
   371  058F                     	;# 
   372  0590                     	;# 
   373  0591                     	;# 
   374  0592                     	;# 
   375  0593                     	;# 
   376  060C                     	;# 
   377  060D                     	;# 
   378  060E                     	;# 
   379  060F                     	;# 
   380  0610                     	;# 
   381  0611                     	;# 
   382  0612                     	;# 
   383  0613                     	;# 
   384  0614                     	;# 
   385  0616                     	;# 
   386  0617                     	;# 
   387  0618                     	;# 
   388  0619                     	;# 
   389  061A                     	;# 
   390  061B                     	;# 
   391  061C                     	;# 
   392  061D                     	;# 
   393  061E                     	;# 
   394  068C                     	;# 
   395  068D                     	;# 
   396  068E                     	;# 
   397  068F                     	;# 
   398  0690                     	;# 
   399  0691                     	;# 
   400  0692                     	;# 
   401  0693                     	;# 
   402  0694                     	;# 
   403  070C                     	;# 
   404  070D                     	;# 
   405  070E                     	;# 
   406  070F                     	;# 
   407  0710                     	;# 
   408  0711                     	;# 
   409  0712                     	;# 
   410  0713                     	;# 
   411  0714                     	;# 
   412  0716                     	;# 
   413  0717                     	;# 
   414  0718                     	;# 
   415  0719                     	;# 
   416  071A                     	;# 
   417  071B                     	;# 
   418  071C                     	;# 
   419  071D                     	;# 
   420  071E                     	;# 
   421  0796                     	;# 
   422  0797                     	;# 
   423  0798                     	;# 
   424  0799                     	;# 
   425  079A                     	;# 
   426  079B                     	;# 
   427  080C                     	;# 
   428  080D                     	;# 
   429  080E                     	;# 
   430  080F                     	;# 
   431  0810                     	;# 
   432  0811                     	;# 
   433  0812                     	;# 
   434  0813                     	;# 
   435  0814                     	;# 
   436  081A                     	;# 
   437  081B                     	;# 
   438  081C                     	;# 
   439  081D                     	;# 
   440  081E                     	;# 
   441  081F                     	;# 
   442  088C                     	;# 
   443  088D                     	;# 
   444  088E                     	;# 
   445  088F                     	;# 
   446  0890                     	;# 
   447  0891                     	;# 
   448  0892                     	;# 
   449  0893                     	;# 
   450  0895                     	;# 
   451  0896                     	;# 
   452  0897                     	;# 
   453  0898                     	;# 
   454  0899                     	;# 
   455  089A                     	;# 
   456  089B                     	;# 
   457  090C                     	;# 
   458  090E                     	;# 
   459  090F                     	;# 
   460  091F                     	;# 
   461  091F                     	;# 
   462  098F                     	;# 
   463  098F                     	;# 
   464  0990                     	;# 
   465  0991                     	;# 
   466  0992                     	;# 
   467  0993                     	;# 
   468  0994                     	;# 
   469  0995                     	;# 
   470  0996                     	;# 
   471  0997                     	;# 
   472  0E0F                     	;# 
   473  0E10                     	;# 
   474  0E11                     	;# 
   475  0E12                     	;# 
   476  0E13                     	;# 
   477  0E14                     	;# 
   478  0E15                     	;# 
   479  0E16                     	;# 
   480  0E17                     	;# 
   481  0E18                     	;# 
   482  0E19                     	;# 
   483  0E1A                     	;# 
   484  0E1B                     	;# 
   485  0E1C                     	;# 
   486  0E1D                     	;# 
   487  0E1E                     	;# 
   488  0E1F                     	;# 
   489  0E20                     	;# 
   490  0E21                     	;# 
   491  0E22                     	;# 
   492  0E23                     	;# 
   493  0E24                     	;# 
   494  0E25                     	;# 
   495  0E26                     	;# 
   496  0E27                     	;# 
   497  0E28                     	;# 
   498  0E29                     	;# 
   499  0E2A                     	;# 
   500  0E2B                     	;# 
   501  0E2C                     	;# 
   502  0E2D                     	;# 
   503  0E2E                     	;# 
   504  0E2F                     	;# 
   505  0E30                     	;# 
   506  0E31                     	;# 
   507  0E32                     	;# 
   508  0E33                     	;# 
   509  0E34                     	;# 
   510  0E35                     	;# 
   511  0E36                     	;# 
   512  0E37                     	;# 
   513  0E8F                     	;# 
   514  0E90                     	;# 
   515  0E91                     	;# 
   516  0E92                     	;# 
   517  0E93                     	;# 
   518  0E94                     	;# 
   519  0E95                     	;# 
   520  0E96                     	;# 
   521  0E97                     	;# 
   522  0E9C                     	;# 
   523  0E9D                     	;# 
   524  0E9E                     	;# 
   525  0EA1                     	;# 
   526  0EA2                     	;# 
   527  0EA3                     	;# 
   528  0EA4                     	;# 
   529  0EA5                     	;# 
   530  0EA9                     	;# 
   531  0EAA                     	;# 
   532  0EAB                     	;# 
   533  0EAC                     	;# 
   534  0EB1                     	;# 
   535  0EB2                     	;# 
   536  0EB3                     	;# 
   537  0EB8                     	;# 
   538  0EB9                     	;# 
   539  0EBA                     	;# 
   540  0EBB                     	;# 
   541  0EBC                     	;# 
   542  0EBD                     	;# 
   543  0EBE                     	;# 
   544  0EC3                     	;# 
   545  0EC5                     	;# 
   546  0EC6                     	;# 
   547  0EC7                     	;# 
   548  0EC8                     	;# 
   549  0EC9                     	;# 
   550  0ECA                     	;# 
   551  0ECB                     	;# 
   552  0ECC                     	;# 
   553  0F10                     	;# 
   554  0F11                     	;# 
   555  0F12                     	;# 
   556  0F13                     	;# 
   557  0F14                     	;# 
   558  0F15                     	;# 
   559  0F16                     	;# 
   560  0F17                     	;# 
   561  0F18                     	;# 
   562  0F19                     	;# 
   563  0F1A                     	;# 
   564  0F1B                     	;# 
   565  0F1C                     	;# 
   566  0F1D                     	;# 
   567  0F1E                     	;# 
   568  0F1F                     	;# 
   569  0F20                     	;# 
   570  0F21                     	;# 
   571  0F22                     	;# 
   572  0F23                     	;# 
   573  0F24                     	;# 
   574  0F25                     	;# 
   575  0F26                     	;# 
   576  0F27                     	;# 
   577  0F38                     	;# 
   578  0F39                     	;# 
   579  0F3A                     	;# 
   580  0F3B                     	;# 
   581  0F3C                     	;# 
   582  0F3D                     	;# 
   583  0F3E                     	;# 
   584  0F3F                     	;# 
   585  0F40                     	;# 
   586  0F41                     	;# 
   587  0F43                     	;# 
   588  0F44                     	;# 
   589  0F45                     	;# 
   590  0F46                     	;# 
   591  0F47                     	;# 
   592  0F48                     	;# 
   593  0F49                     	;# 
   594  0F4A                     	;# 
   595  0F4B                     	;# 
   596  0F4C                     	;# 
   597  0F4E                     	;# 
   598  0F4F                     	;# 
   599  0F50                     	;# 
   600  0F51                     	;# 
   601  0F52                     	;# 
   602  0F53                     	;# 
   603  0F54                     	;# 
   604  0F55                     	;# 
   605  0F56                     	;# 
   606  0F57                     	;# 
   607  0F65                     	;# 
   608  0F68                     	;# 
   609  0F69                     	;# 
   610  0F6A                     	;# 
   611  0F6B                     	;# 
   612  0FE4                     	;# 
   613  0FE5                     	;# 
   614  0FE6                     	;# 
   615  0FE7                     	;# 
   616  0FE8                     	;# 
   617  0FE9                     	;# 
   618  0FEA                     	;# 
   619  0FEB                     	;# 
   620  0FED                     	;# 
   621  0FEE                     	;# 
   622  0FEF                     	;# 
   623  0000                     	;# 
   624  0001                     	;# 
   625  0002                     	;# 
   626  0003                     	;# 
   627  0004                     	;# 
   628  0005                     	;# 
   629  0006                     	;# 
   630  0007                     	;# 
   631  0008                     	;# 
   632  0009                     	;# 
   633  000A                     	;# 
   634  000B                     	;# 
   635  000C                     	;# 
   636  000D                     	;# 
   637  000E                     	;# 
   638  0010                     	;# 
   639  0011                     	;# 
   640  0012                     	;# 
   641  0013                     	;# 
   642  0016                     	;# 
   643  0017                     	;# 
   644  0018                     	;# 
   645  001C                     	;# 
   646  001C                     	;# 
   647  001D                     	;# 
   648  001D                     	;# 
   649  001E                     	;# 
   650  001F                     	;# 
   651  008C                     	;# 
   652  008C                     	;# 
   653  008D                     	;# 
   654  008E                     	;# 
   655  008E                     	;# 
   656  008F                     	;# 
   657  0090                     	;# 
   658  0090                     	;# 
   659  0091                     	;# 
   660  0093                     	;# 
   661  0094                     	;# 
   662  0095                     	;# 
   663  0096                     	;# 
   664  0097                     	;# 
   665  0098                     	;# 
   666  0099                     	;# 
   667  009A                     	;# 
   668  009B                     	;# 
   669  009C                     	;# 
   670  009D                     	;# 
   671  009E                     	;# 
   672  010C                     	;# 
   673  010D                     	;# 
   674  010E                     	;# 
   675  010E                     	;# 
   676  010F                     	;# 
   677  0110                     	;# 
   678  0110                     	;# 
   679  0111                     	;# 
   680  0112                     	;# 
   681  0112                     	;# 
   682  0113                     	;# 
   683  0114                     	;# 
   684  0114                     	;# 
   685  0115                     	;# 
   686  0116                     	;# 
   687  0116                     	;# 
   688  0117                     	;# 
   689  0119                     	;# 
   690  0119                     	;# 
   691  0119                     	;# 
   692  011A                     	;# 
   693  011A                     	;# 
   694  011A                     	;# 
   695  011B                     	;# 
   696  011B                     	;# 
   697  011B                     	;# 
   698  011B                     	;# 
   699  011B                     	;# 
   700  011C                     	;# 
   701  011C                     	;# 
   702  011C                     	;# 
   703  011D                     	;# 
   704  011D                     	;# 
   705  011D                     	;# 
   706  011E                     	;# 
   707  011E                     	;# 
   708  011E                     	;# 
   709  011F                     	;# 
   710  011F                     	;# 
   711  011F                     	;# 
   712  011F                     	;# 
   713  011F                     	;# 
   714  018C                     	;# 
   715  018D                     	;# 
   716  018E                     	;# 
   717  018F                     	;# 
   718  0190                     	;# 
   719  0191                     	;# 
   720  0192                     	;# 
   721  0196                     	;# 
   722  0197                     	;# 
   723  0198                     	;# 
   724  0199                     	;# 
   725  019A                     	;# 
   726  019B                     	;# 
   727  019C                     	;# 
   728  020C                     	;# 
   729  020C                     	;# 
   730  020D                     	;# 
   731  020E                     	;# 
   732  020F                     	;# 
   733  020F                     	;# 
   734  0210                     	;# 
   735  0210                     	;# 
   736  0211                     	;# 
   737  0211                     	;# 
   738  0212                     	;# 
   739  0212                     	;# 
   740  0213                     	;# 
   741  0214                     	;# 
   742  0215                     	;# 
   743  0215                     	;# 
   744  0216                     	;# 
   745  0216                     	;# 
   746  0217                     	;# 
   747  0217                     	;# 
   748  0218                     	;# 
   749  0218                     	;# 
   750  0219                     	;# 
   751  021A                     	;# 
   752  021B                     	;# 
   753  021B                     	;# 
   754  021C                     	;# 
   755  021C                     	;# 
   756  021D                     	;# 
   757  021D                     	;# 
   758  021E                     	;# 
   759  021F                     	;# 
   760  028C                     	;# 
   761  028C                     	;# 
   762  028D                     	;# 
   763  028D                     	;# 
   764  028E                     	;# 
   765  028F                     	;# 
   766  0290                     	;# 
   767  0290                     	;# 
   768  0291                     	;# 
   769  0292                     	;# 
   770  0292                     	;# 
   771  0293                     	;# 
   772  0293                     	;# 
   773  0294                     	;# 
   774  0295                     	;# 
   775  0296                     	;# 
   776  0296                     	;# 
   777  0297                     	;# 
   778  0298                     	;# 
   779  0298                     	;# 
   780  0299                     	;# 
   781  0299                     	;# 
   782  029A                     	;# 
   783  029B                     	;# 
   784  029C                     	;# 
   785  029C                     	;# 
   786  029D                     	;# 
   787  030C                     	;# 
   788  030C                     	;# 
   789  030D                     	;# 
   790  030E                     	;# 
   791  030F                     	;# 
   792  0310                     	;# 
   793  0310                     	;# 
   794  0311                     	;# 
   795  0312                     	;# 
   796  0313                     	;# 
   797  0314                     	;# 
   798  0314                     	;# 
   799  0315                     	;# 
   800  0316                     	;# 
   801  0317                     	;# 
   802  0318                     	;# 
   803  0318                     	;# 
   804  0319                     	;# 
   805  031A                     	;# 
   806  031B                     	;# 
   807  031C                     	;# 
   808  031C                     	;# 
   809  031D                     	;# 
   810  031E                     	;# 
   811  031F                     	;# 
   812  038C                     	;# 
   813  038D                     	;# 
   814  038E                     	;# 
   815  0390                     	;# 
   816  0391                     	;# 
   817  0392                     	;# 
   818  040C                     	;# 
   819  040D                     	;# 
   820  040E                     	;# 
   821  040F                     	;# 
   822  0410                     	;# 
   823  0411                     	;# 
   824  0416                     	;# 
   825  0416                     	;# 
   826  0417                     	;# 
   827  0418                     	;# 
   828  0418                     	;# 
   829  0419                     	;# 
   830  041A                     	;# 
   831  041A                     	;# 
   832  041B                     	;# 
   833  041C                     	;# 
   834  041C                     	;# 
   835  041D                     	;# 
   836  041E                     	;# 
   837  041F                     	;# 
   838  048C                     	;# 
   839  048C                     	;# 
   840  048D                     	;# 
   841  048E                     	;# 
   842  048F                     	;# 
   843  048F                     	;# 
   844  0490                     	;# 
   845  0491                     	;# 
   846  0492                     	;# 
   847  0492                     	;# 
   848  0493                     	;# 
   849  0494                     	;# 
   850  0495                     	;# 
   851  0495                     	;# 
   852  0496                     	;# 
   853  0497                     	;# 
   854  0498                     	;# 
   855  0499                     	;# 
   856  049A                     	;# 
   857  049B                     	;# 
   858  049C                     	;# 
   859  049D                     	;# 
   860  050C                     	;# 
   861  050C                     	;# 
   862  050D                     	;# 
   863  050E                     	;# 
   864  050F                     	;# 
   865  050F                     	;# 
   866  0510                     	;# 
   867  0511                     	;# 
   868  0512                     	;# 
   869  0512                     	;# 
   870  0513                     	;# 
   871  0514                     	;# 
   872  0515                     	;# 
   873  0515                     	;# 
   874  0516                     	;# 
   875  0517                     	;# 
   876  0518                     	;# 
   877  0519                     	;# 
   878  051A                     	;# 
   879  051B                     	;# 
   880  051C                     	;# 
   881  051D                     	;# 
   882  058C                     	;# 
   883  058C                     	;# 
   884  058D                     	;# 
   885  058E                     	;# 
   886  058F                     	;# 
   887  058F                     	;# 
   888  0590                     	;# 
   889  0591                     	;# 
   890  0592                     	;# 
   891  0593                     	;# 
   892  060C                     	;# 
   893  060D                     	;# 
   894  060E                     	;# 
   895  060F                     	;# 
   896  0610                     	;# 
   897  0611                     	;# 
   898  0612                     	;# 
   899  0613                     	;# 
   900  0614                     	;# 
   901  0616                     	;# 
   902  0617                     	;# 
   903  0618                     	;# 
   904  0619                     	;# 
   905  061A                     	;# 
   906  061B                     	;# 
   907  061C                     	;# 
   908  061D                     	;# 
   909  061E                     	;# 
   910  068C                     	;# 
   911  068D                     	;# 
   912  068E                     	;# 
   913  068F                     	;# 
   914  0690                     	;# 
   915  0691                     	;# 
   916  0692                     	;# 
   917  0693                     	;# 
   918  0694                     	;# 
   919  070C                     	;# 
   920  070D                     	;# 
   921  070E                     	;# 
   922  070F                     	;# 
   923  0710                     	;# 
   924  0711                     	;# 
   925  0712                     	;# 
   926  0713                     	;# 
   927  0714                     	;# 
   928  0716                     	;# 
   929  0717                     	;# 
   930  0718                     	;# 
   931  0719                     	;# 
   932  071A                     	;# 
   933  071B                     	;# 
   934  071C                     	;# 
   935  071D                     	;# 
   936  071E                     	;# 
   937  0796                     	;# 
   938  0797                     	;# 
   939  0798                     	;# 
   940  0799                     	;# 
   941  079A                     	;# 
   942  079B                     	;# 
   943  080C                     	;# 
   944  080D                     	;# 
   945  080E                     	;# 
   946  080F                     	;# 
   947  0810                     	;# 
   948  0811                     	;# 
   949  0812                     	;# 
   950  0813                     	;# 
   951  0814                     	;# 
   952  081A                     	;# 
   953  081B                     	;# 
   954  081C                     	;# 
   955  081D                     	;# 
   956  081E                     	;# 
   957  081F                     	;# 
   958  088C                     	;# 
   959  088D                     	;# 
   960  088E                     	;# 
   961  088F                     	;# 
   962  0890                     	;# 
   963  0891                     	;# 
   964  0892                     	;# 
   965  0893                     	;# 
   966  0895                     	;# 
   967  0896                     	;# 
   968  0897                     	;# 
   969  0898                     	;# 
   970  0899                     	;# 
   971  089A                     	;# 
   972  089B                     	;# 
   973  090C                     	;# 
   974  090E                     	;# 
   975  090F                     	;# 
   976  091F                     	;# 
   977  091F                     	;# 
   978  098F                     	;# 
   979  098F                     	;# 
   980  0990                     	;# 
   981  0991                     	;# 
   982  0992                     	;# 
   983  0993                     	;# 
   984  0994                     	;# 
   985  0995                     	;# 
   986  0996                     	;# 
   987  0997                     	;# 
   988  0E0F                     	;# 
   989  0E10                     	;# 
   990  0E11                     	;# 
   991  0E12                     	;# 
   992  0E13                     	;# 
   993  0E14                     	;# 
   994  0E15                     	;# 
   995  0E16                     	;# 
   996  0E17                     	;# 
   997  0E18                     	;# 
   998  0E19                     	;# 
   999  0E1A                     	;# 
  1000  0E1B                     	;# 
  1001  0E1C                     	;# 
  1002  0E1D                     	;# 
  1003  0E1E                     	;# 
  1004  0E1F                     	;# 
  1005  0E20                     	;# 
  1006  0E21                     	;# 
  1007  0E22                     	;# 
  1008  0E23                     	;# 
  1009  0E24                     	;# 
  1010  0E25                     	;# 
  1011  0E26                     	;# 
  1012  0E27                     	;# 
  1013  0E28                     	;# 
  1014  0E29                     	;# 
  1015  0E2A                     	;# 
  1016  0E2B                     	;# 
  1017  0E2C                     	;# 
  1018  0E2D                     	;# 
  1019  0E2E                     	;# 
  1020  0E2F                     	;# 
  1021  0E30                     	;# 
  1022  0E31                     	;# 
  1023  0E32                     	;# 
  1024  0E33                     	;# 
  1025  0E34                     	;# 
  1026  0E35                     	;# 
  1027  0E36                     	;# 
  1028  0E37                     	;# 
  1029  0E8F                     	;# 
  1030  0E90                     	;# 
  1031  0E91                     	;# 
  1032  0E92                     	;# 
  1033  0E93                     	;# 
  1034  0E94                     	;# 
  1035  0E95                     	;# 
  1036  0E96                     	;# 
  1037  0E97                     	;# 
  1038  0E9C                     	;# 
  1039  0E9D                     	;# 
  1040  0E9E                     	;# 
  1041  0EA1                     	;# 
  1042  0EA2                     	;# 
  1043  0EA3                     	;# 
  1044  0EA4                     	;# 
  1045  0EA5                     	;# 
  1046  0EA9                     	;# 
  1047  0EAA                     	;# 
  1048  0EAB                     	;# 
  1049  0EAC                     	;# 
  1050  0EB1                     	;# 
  1051  0EB2                     	;# 
  1052  0EB3                     	;# 
  1053  0EB8                     	;# 
  1054  0EB9                     	;# 
  1055  0EBA                     	;# 
  1056  0EBB                     	;# 
  1057  0EBC                     	;# 
  1058  0EBD                     	;# 
  1059  0EBE                     	;# 
  1060  0EC3                     	;# 
  1061  0EC5                     	;# 
  1062  0EC6                     	;# 
  1063  0EC7                     	;# 
  1064  0EC8                     	;# 
  1065  0EC9                     	;# 
  1066  0ECA                     	;# 
  1067  0ECB                     	;# 
  1068  0ECC                     	;# 
  1069  0F10                     	;# 
  1070  0F11                     	;# 
  1071  0F12                     	;# 
  1072  0F13                     	;# 
  1073  0F14                     	;# 
  1074  0F15                     	;# 
  1075  0F16                     	;# 
  1076  0F17                     	;# 
  1077  0F18                     	;# 
  1078  0F19                     	;# 
  1079  0F1A                     	;# 
  1080  0F1B                     	;# 
  1081  0F1C                     	;# 
  1082  0F1D                     	;# 
  1083  0F1E                     	;# 
  1084  0F1F                     	;# 
  1085  0F20                     	;# 
  1086  0F21                     	;# 
  1087  0F22                     	;# 
  1088  0F23                     	;# 
  1089  0F24                     	;# 
  1090  0F25                     	;# 
  1091  0F26                     	;# 
  1092  0F27                     	;# 
  1093  0F38                     	;# 
  1094  0F39                     	;# 
  1095  0F3A                     	;# 
  1096  0F3B                     	;# 
  1097  0F3C                     	;# 
  1098  0F3D                     	;# 
  1099  0F3E                     	;# 
  1100  0F3F                     	;# 
  1101  0F40                     	;# 
  1102  0F41                     	;# 
  1103  0F43                     	;# 
  1104  0F44                     	;# 
  1105  0F45                     	;# 
  1106  0F46                     	;# 
  1107  0F47                     	;# 
  1108  0F48                     	;# 
  1109  0F49                     	;# 
  1110  0F4A                     	;# 
  1111  0F4B                     	;# 
  1112  0F4C                     	;# 
  1113  0F4E                     	;# 
  1114  0F4F                     	;# 
  1115  0F50                     	;# 
  1116  0F51                     	;# 
  1117  0F52                     	;# 
  1118  0F53                     	;# 
  1119  0F54                     	;# 
  1120  0F55                     	;# 
  1121  0F56                     	;# 
  1122  0F57                     	;# 
  1123  0F65                     	;# 
  1124  0F68                     	;# 
  1125  0F69                     	;# 
  1126  0F6A                     	;# 
  1127  0F6B                     	;# 
  1128  0FE4                     	;# 
  1129  0FE5                     	;# 
  1130  0FE6                     	;# 
  1131  0FE7                     	;# 
  1132  0FE8                     	;# 
  1133  0FE9                     	;# 
  1134  0FEA                     	;# 
  1135  0FEB                     	;# 
  1136  0FED                     	;# 
  1137  0FEE                     	;# 
  1138  0FEF                     	;# 
  1139  0000                     	;# 
  1140  0001                     	;# 
  1141  0002                     	;# 
  1142  0003                     	;# 
  1143  0004                     	;# 
  1144  0005                     	;# 
  1145  0006                     	;# 
  1146  0007                     	;# 
  1147  0008                     	;# 
  1148  0009                     	;# 
  1149  000A                     	;# 
  1150  000B                     	;# 
  1151  000C                     	;# 
  1152  000D                     	;# 
  1153  000E                     	;# 
  1154  0010                     	;# 
  1155  0011                     	;# 
  1156  0012                     	;# 
  1157  0013                     	;# 
  1158  0016                     	;# 
  1159  0017                     	;# 
  1160  0018                     	;# 
  1161  001C                     	;# 
  1162  001C                     	;# 
  1163  001D                     	;# 
  1164  001D                     	;# 
  1165  001E                     	;# 
  1166  001F                     	;# 
  1167  008C                     	;# 
  1168  008C                     	;# 
  1169  008D                     	;# 
  1170  008E                     	;# 
  1171  008E                     	;# 
  1172  008F                     	;# 
  1173  0090                     	;# 
  1174  0090                     	;# 
  1175  0091                     	;# 
  1176  0093                     	;# 
  1177  0094                     	;# 
  1178  0095                     	;# 
  1179  0096                     	;# 
  1180  0097                     	;# 
  1181  0098                     	;# 
  1182  0099                     	;# 
  1183  009A                     	;# 
  1184  009B                     	;# 
  1185  009C                     	;# 
  1186  009D                     	;# 
  1187  009E                     	;# 
  1188  010C                     	;# 
  1189  010D                     	;# 
  1190  010E                     	;# 
  1191  010E                     	;# 
  1192  010F                     	;# 
  1193  0110                     	;# 
  1194  0110                     	;# 
  1195  0111                     	;# 
  1196  0112                     	;# 
  1197  0112                     	;# 
  1198  0113                     	;# 
  1199  0114                     	;# 
  1200  0114                     	;# 
  1201  0115                     	;# 
  1202  0116                     	;# 
  1203  0116                     	;# 
  1204  0117                     	;# 
  1205  0119                     	;# 
  1206  0119                     	;# 
  1207  0119                     	;# 
  1208  011A                     	;# 
  1209  011A                     	;# 
  1210  011A                     	;# 
  1211  011B                     	;# 
  1212  011B                     	;# 
  1213  011B                     	;# 
  1214  011B                     	;# 
  1215  011B                     	;# 
  1216  011C                     	;# 
  1217  011C                     	;# 
  1218  011C                     	;# 
  1219  011D                     	;# 
  1220  011D                     	;# 
  1221  011D                     	;# 
  1222  011E                     	;# 
  1223  011E                     	;# 
  1224  011E                     	;# 
  1225  011F                     	;# 
  1226  011F                     	;# 
  1227  011F                     	;# 
  1228  011F                     	;# 
  1229  011F                     	;# 
  1230  018C                     	;# 
  1231  018D                     	;# 
  1232  018E                     	;# 
  1233  018F                     	;# 
  1234  0190                     	;# 
  1235  0191                     	;# 
  1236  0192                     	;# 
  1237  0196                     	;# 
  1238  0197                     	;# 
  1239  0198                     	;# 
  1240  0199                     	;# 
  1241  019A                     	;# 
  1242  019B                     	;# 
  1243  019C                     	;# 
  1244  020C                     	;# 
  1245  020C                     	;# 
  1246  020D                     	;# 
  1247  020E                     	;# 
  1248  020F                     	;# 
  1249  020F                     	;# 
  1250  0210                     	;# 
  1251  0210                     	;# 
  1252  0211                     	;# 
  1253  0211                     	;# 
  1254  0212                     	;# 
  1255  0212                     	;# 
  1256  0213                     	;# 
  1257  0214                     	;# 
  1258  0215                     	;# 
  1259  0215                     	;# 
  1260  0216                     	;# 
  1261  0216                     	;# 
  1262  0217                     	;# 
  1263  0217                     	;# 
  1264  0218                     	;# 
  1265  0218                     	;# 
  1266  0219                     	;# 
  1267  021A                     	;# 
  1268  021B                     	;# 
  1269  021B                     	;# 
  1270  021C                     	;# 
  1271  021C                     	;# 
  1272  021D                     	;# 
  1273  021D                     	;# 
  1274  021E                     	;# 
  1275  021F                     	;# 
  1276  028C                     	;# 
  1277  028C                     	;# 
  1278  028D                     	;# 
  1279  028D                     	;# 
  1280  028E                     	;# 
  1281  028F                     	;# 
  1282  0290                     	;# 
  1283  0290                     	;# 
  1284  0291                     	;# 
  1285  0292                     	;# 
  1286  0292                     	;# 
  1287  0293                     	;# 
  1288  0293                     	;# 
  1289  0294                     	;# 
  1290  0295                     	;# 
  1291  0296                     	;# 
  1292  0296                     	;# 
  1293  0297                     	;# 
  1294  0298                     	;# 
  1295  0298                     	;# 
  1296  0299                     	;# 
  1297  0299                     	;# 
  1298  029A                     	;# 
  1299  029B                     	;# 
  1300  029C                     	;# 
  1301  029C                     	;# 
  1302  029D                     	;# 
  1303  030C                     	;# 
  1304  030C                     	;# 
  1305  030D                     	;# 
  1306  030E                     	;# 
  1307  030F                     	;# 
  1308  0310                     	;# 
  1309  0310                     	;# 
  1310  0311                     	;# 
  1311  0312                     	;# 
  1312  0313                     	;# 
  1313  0314                     	;# 
  1314  0314                     	;# 
  1315  0315                     	;# 
  1316  0316                     	;# 
  1317  0317                     	;# 
  1318  0318                     	;# 
  1319  0318                     	;# 
  1320  0319                     	;# 
  1321  031A                     	;# 
  1322  031B                     	;# 
  1323  031C                     	;# 
  1324  031C                     	;# 
  1325  031D                     	;# 
  1326  031E                     	;# 
  1327  031F                     	;# 
  1328  038C                     	;# 
  1329  038D                     	;# 
  1330  038E                     	;# 
  1331  0390                     	;# 
  1332  0391                     	;# 
  1333  0392                     	;# 
  1334  040C                     	;# 
  1335  040D                     	;# 
  1336  040E                     	;# 
  1337  040F                     	;# 
  1338  0410                     	;# 
  1339  0411                     	;# 
  1340  0416                     	;# 
  1341  0416                     	;# 
  1342  0417                     	;# 
  1343  0418                     	;# 
  1344  0418                     	;# 
  1345  0419                     	;# 
  1346  041A                     	;# 
  1347  041A                     	;# 
  1348  041B                     	;# 
  1349  041C                     	;# 
  1350  041C                     	;# 
  1351  041D                     	;# 
  1352  041E                     	;# 
  1353  041F                     	;# 
  1354  048C                     	;# 
  1355  048C                     	;# 
  1356  048D                     	;# 
  1357  048E                     	;# 
  1358  048F                     	;# 
  1359  048F                     	;# 
  1360  0490                     	;# 
  1361  0491                     	;# 
  1362  0492                     	;# 
  1363  0492                     	;# 
  1364  0493                     	;# 
  1365  0494                     	;# 
  1366  0495                     	;# 
  1367  0495                     	;# 
  1368  0496                     	;# 
  1369  0497                     	;# 
  1370  0498                     	;# 
  1371  0499                     	;# 
  1372  049A                     	;# 
  1373  049B                     	;# 
  1374  049C                     	;# 
  1375  049D                     	;# 
  1376  050C                     	;# 
  1377  050C                     	;# 
  1378  050D                     	;# 
  1379  050E                     	;# 
  1380  050F                     	;# 
  1381  050F                     	;# 
  1382  0510                     	;# 
  1383  0511                     	;# 
  1384  0512                     	;# 
  1385  0512                     	;# 
  1386  0513                     	;# 
  1387  0514                     	;# 
  1388  0515                     	;# 
  1389  0515                     	;# 
  1390  0516                     	;# 
  1391  0517                     	;# 
  1392  0518                     	;# 
  1393  0519                     	;# 
  1394  051A                     	;# 
  1395  051B                     	;# 
  1396  051C                     	;# 
  1397  051D                     	;# 
  1398  058C                     	;# 
  1399  058C                     	;# 
  1400  058D                     	;# 
  1401  058E                     	;# 
  1402  058F                     	;# 
  1403  058F                     	;# 
  1404  0590                     	;# 
  1405  0591                     	;# 
  1406  0592                     	;# 
  1407  0593                     	;# 
  1408  060C                     	;# 
  1409  060D                     	;# 
  1410  060E                     	;# 
  1411  060F                     	;# 
  1412  0610                     	;# 
  1413  0611                     	;# 
  1414  0612                     	;# 
  1415  0613                     	;# 
  1416  0614                     	;# 
  1417  0616                     	;# 
  1418  0617                     	;# 
  1419  0618                     	;# 
  1420  0619                     	;# 
  1421  061A                     	;# 
  1422  061B                     	;# 
  1423  061C                     	;# 
  1424  061D                     	;# 
  1425  061E                     	;# 
  1426  068C                     	;# 
  1427  068D                     	;# 
  1428  068E                     	;# 
  1429  068F                     	;# 
  1430  0690                     	;# 
  1431  0691                     	;# 
  1432  0692                     	;# 
  1433  0693                     	;# 
  1434  0694                     	;# 
  1435  070C                     	;# 
  1436  070D                     	;# 
  1437  070E                     	;# 
  1438  070F                     	;# 
  1439  0710                     	;# 
  1440  0711                     	;# 
  1441  0712                     	;# 
  1442  0713                     	;# 
  1443  0714                     	;# 
  1444  0716                     	;# 
  1445  0717                     	;# 
  1446  0718                     	;# 
  1447  0719                     	;# 
  1448  071A                     	;# 
  1449  071B                     	;# 
  1450  071C                     	;# 
  1451  071D                     	;# 
  1452  071E                     	;# 
  1453  0796                     	;# 
  1454  0797                     	;# 
  1455  0798                     	;# 
  1456  0799                     	;# 
  1457  079A                     	;# 
  1458  079B                     	;# 
  1459  080C                     	;# 
  1460  080D                     	;# 
  1461  080E                     	;# 
  1462  080F                     	;# 
  1463  0810                     	;# 
  1464  0811                     	;# 
  1465  0812                     	;# 
  1466  0813                     	;# 
  1467  0814                     	;# 
  1468  081A                     	;# 
  1469  081B                     	;# 
  1470  081C                     	;# 
  1471  081D                     	;# 
  1472  081E                     	;# 
  1473  081F                     	;# 
  1474  088C                     	;# 
  1475  088D                     	;# 
  1476  088E                     	;# 
  1477  088F                     	;# 
  1478  0890                     	;# 
  1479  0891                     	;# 
  1480  0892                     	;# 
  1481  0893                     	;# 
  1482  0895                     	;# 
  1483  0896                     	;# 
  1484  0897                     	;# 
  1485  0898                     	;# 
  1486  0899                     	;# 
  1487  089A                     	;# 
  1488  089B                     	;# 
  1489  090C                     	;# 
  1490  090E                     	;# 
  1491  090F                     	;# 
  1492  091F                     	;# 
  1493  091F                     	;# 
  1494  098F                     	;# 
  1495  098F                     	;# 
  1496  0990                     	;# 
  1497  0991                     	;# 
  1498  0992                     	;# 
  1499  0993                     	;# 
  1500  0994                     	;# 
  1501  0995                     	;# 
  1502  0996                     	;# 
  1503  0997                     	;# 
  1504  0E0F                     	;# 
  1505  0E10                     	;# 
  1506  0E11                     	;# 
  1507  0E12                     	;# 
  1508  0E13                     	;# 
  1509  0E14                     	;# 
  1510  0E15                     	;# 
  1511  0E16                     	;# 
  1512  0E17                     	;# 
  1513  0E18                     	;# 
  1514  0E19                     	;# 
  1515  0E1A                     	;# 
  1516  0E1B                     	;# 
  1517  0E1C                     	;# 
  1518  0E1D                     	;# 
  1519  0E1E                     	;# 
  1520  0E1F                     	;# 
  1521  0E20                     	;# 
  1522  0E21                     	;# 
  1523  0E22                     	;# 
  1524  0E23                     	;# 
  1525  0E24                     	;# 
  1526  0E25                     	;# 
  1527  0E26                     	;# 
  1528  0E27                     	;# 
  1529  0E28                     	;# 
  1530  0E29                     	;# 
  1531  0E2A                     	;# 
  1532  0E2B                     	;# 
  1533  0E2C                     	;# 
  1534  0E2D                     	;# 
  1535  0E2E                     	;# 
  1536  0E2F                     	;# 
  1537  0E30                     	;# 
  1538  0E31                     	;# 
  1539  0E32                     	;# 
  1540  0E33                     	;# 
  1541  0E34                     	;# 
  1542  0E35                     	;# 
  1543  0E36                     	;# 
  1544  0E37                     	;# 
  1545  0E8F                     	;# 
  1546  0E90                     	;# 
  1547  0E91                     	;# 
  1548  0E92                     	;# 
  1549  0E93                     	;# 
  1550  0E94                     	;# 
  1551  0E95                     	;# 
  1552  0E96                     	;# 
  1553  0E97                     	;# 
  1554  0E9C                     	;# 
  1555  0E9D                     	;# 
  1556  0E9E                     	;# 
  1557  0EA1                     	;# 
  1558  0EA2                     	;# 
  1559  0EA3                     	;# 
  1560  0EA4                     	;# 
  1561  0EA5                     	;# 
  1562  0EA9                     	;# 
  1563  0EAA                     	;# 
  1564  0EAB                     	;# 
  1565  0EAC                     	;# 
  1566  0EB1                     	;# 
  1567  0EB2                     	;# 
  1568  0EB3                     	;# 
  1569  0EB8                     	;# 
  1570  0EB9                     	;# 
  1571  0EBA                     	;# 
  1572  0EBB                     	;# 
  1573  0EBC                     	;# 
  1574  0EBD                     	;# 
  1575  0EBE                     	;# 
  1576  0EC3                     	;# 
  1577  0EC5                     	;# 
  1578  0EC6                     	;# 
  1579  0EC7                     	;# 
  1580  0EC8                     	;# 
  1581  0EC9                     	;# 
  1582  0ECA                     	;# 
  1583  0ECB                     	;# 
  1584  0ECC                     	;# 
  1585  0F10                     	;# 
  1586  0F11                     	;# 
  1587  0F12                     	;# 
  1588  0F13                     	;# 
  1589  0F14                     	;# 
  1590  0F15                     	;# 
  1591  0F16                     	;# 
  1592  0F17                     	;# 
  1593  0F18                     	;# 
  1594  0F19                     	;# 
  1595  0F1A                     	;# 
  1596  0F1B                     	;# 
  1597  0F1C                     	;# 
  1598  0F1D                     	;# 
  1599  0F1E                     	;# 
  1600  0F1F                     	;# 
  1601  0F20                     	;# 
  1602  0F21                     	;# 
  1603  0F22                     	;# 
  1604  0F23                     	;# 
  1605  0F24                     	;# 
  1606  0F25                     	;# 
  1607  0F26                     	;# 
  1608  0F27                     	;# 
  1609  0F38                     	;# 
  1610  0F39                     	;# 
  1611  0F3A                     	;# 
  1612  0F3B                     	;# 
  1613  0F3C                     	;# 
  1614  0F3D                     	;# 
  1615  0F3E                     	;# 
  1616  0F3F                     	;# 
  1617  0F40                     	;# 
  1618  0F41                     	;# 
  1619  0F43                     	;# 
  1620  0F44                     	;# 
  1621  0F45                     	;# 
  1622  0F46                     	;# 
  1623  0F47                     	;# 
  1624  0F48                     	;# 
  1625  0F49                     	;# 
  1626  0F4A                     	;# 
  1627  0F4B                     	;# 
  1628  0F4C                     	;# 
  1629  0F4E                     	;# 
  1630  0F4F                     	;# 
  1631  0F50                     	;# 
  1632  0F51                     	;# 
  1633  0F52                     	;# 
  1634  0F53                     	;# 
  1635  0F54                     	;# 
  1636  0F55                     	;# 
  1637  0F56                     	;# 
  1638  0F57                     	;# 
  1639  0F65                     	;# 
  1640  0F68                     	;# 
  1641  0F69                     	;# 
  1642  0F6A                     	;# 
  1643  0F6B                     	;# 
  1644  0FE4                     	;# 
  1645  0FE5                     	;# 
  1646  0FE6                     	;# 
  1647  0FE7                     	;# 
  1648  0FE8                     	;# 
  1649  0FE9                     	;# 
  1650  0FEA                     	;# 
  1651  0FEB                     	;# 
  1652  0FED                     	;# 
  1653  0FEE                     	;# 
  1654  0FEF                     	;# 
  1655  0000                     	;# 
  1656  0001                     	;# 
  1657  0002                     	;# 
  1658  0003                     	;# 
  1659  0004                     	;# 
  1660  0005                     	;# 
  1661  0006                     	;# 
  1662  0007                     	;# 
  1663  0008                     	;# 
  1664  0009                     	;# 
  1665  000A                     	;# 
  1666  000B                     	;# 
  1667  000C                     	;# 
  1668  000D                     	;# 
  1669  000E                     	;# 
  1670  0010                     	;# 
  1671  0011                     	;# 
  1672  0012                     	;# 
  1673  0013                     	;# 
  1674  0016                     	;# 
  1675  0017                     	;# 
  1676  0018                     	;# 
  1677  001C                     	;# 
  1678  001C                     	;# 
  1679  001D                     	;# 
  1680  001D                     	;# 
  1681  001E                     	;# 
  1682  001F                     	;# 
  1683  008C                     	;# 
  1684  008C                     	;# 
  1685  008D                     	;# 
  1686  008E                     	;# 
  1687  008E                     	;# 
  1688  008F                     	;# 
  1689  0090                     	;# 
  1690  0090                     	;# 
  1691  0091                     	;# 
  1692  0093                     	;# 
  1693  0094                     	;# 
  1694  0095                     	;# 
  1695  0096                     	;# 
  1696  0097                     	;# 
  1697  0098                     	;# 
  1698  0099                     	;# 
  1699  009A                     	;# 
  1700  009B                     	;# 
  1701  009C                     	;# 
  1702  009D                     	;# 
  1703  009E                     	;# 
  1704  010C                     	;# 
  1705  010D                     	;# 
  1706  010E                     	;# 
  1707  010E                     	;# 
  1708  010F                     	;# 
  1709  0110                     	;# 
  1710  0110                     	;# 
  1711  0111                     	;# 
  1712  0112                     	;# 
  1713  0112                     	;# 
  1714  0113                     	;# 
  1715  0114                     	;# 
  1716  0114                     	;# 
  1717  0115                     	;# 
  1718  0116                     	;# 
  1719  0116                     	;# 
  1720  0117                     	;# 
  1721  0119                     	;# 
  1722  0119                     	;# 
  1723  0119                     	;# 
  1724  011A                     	;# 
  1725  011A                     	;# 
  1726  011A                     	;# 
  1727  011B                     	;# 
  1728  011B                     	;# 
  1729  011B                     	;# 
  1730  011B                     	;# 
  1731  011B                     	;# 
  1732  011C                     	;# 
  1733  011C                     	;# 
  1734  011C                     	;# 
  1735  011D                     	;# 
  1736  011D                     	;# 
  1737  011D                     	;# 
  1738  011E                     	;# 
  1739  011E                     	;# 
  1740  011E                     	;# 
  1741  011F                     	;# 
  1742  011F                     	;# 
  1743  011F                     	;# 
  1744  011F                     	;# 
  1745  011F                     	;# 
  1746  018C                     	;# 
  1747  018D                     	;# 
  1748  018E                     	;# 
  1749  018F                     	;# 
  1750  0190                     	;# 
  1751  0191                     	;# 
  1752  0192                     	;# 
  1753  0196                     	;# 
  1754  0197                     	;# 
  1755  0198                     	;# 
  1756  0199                     	;# 
  1757  019A                     	;# 
  1758  019B                     	;# 
  1759  019C                     	;# 
  1760  020C                     	;# 
  1761  020C                     	;# 
  1762  020D                     	;# 
  1763  020E                     	;# 
  1764  020F                     	;# 
  1765  020F                     	;# 
  1766  0210                     	;# 
  1767  0210                     	;# 
  1768  0211                     	;# 
  1769  0211                     	;# 
  1770  0212                     	;# 
  1771  0212                     	;# 
  1772  0213                     	;# 
  1773  0214                     	;# 
  1774  0215                     	;# 
  1775  0215                     	;# 
  1776  0216                     	;# 
  1777  0216                     	;# 
  1778  0217                     	;# 
  1779  0217                     	;# 
  1780  0218                     	;# 
  1781  0218                     	;# 
  1782  0219                     	;# 
  1783  021A                     	;# 
  1784  021B                     	;# 
  1785  021B                     	;# 
  1786  021C                     	;# 
  1787  021C                     	;# 
  1788  021D                     	;# 
  1789  021D                     	;# 
  1790  021E                     	;# 
  1791  021F                     	;# 
  1792  028C                     	;# 
  1793  028C                     	;# 
  1794  028D                     	;# 
  1795  028D                     	;# 
  1796  028E                     	;# 
  1797  028F                     	;# 
  1798  0290                     	;# 
  1799  0290                     	;# 
  1800  0291                     	;# 
  1801  0292                     	;# 
  1802  0292                     	;# 
  1803  0293                     	;# 
  1804  0293                     	;# 
  1805  0294                     	;# 
  1806  0295                     	;# 
  1807  0296                     	;# 
  1808  0296                     	;# 
  1809  0297                     	;# 
  1810  0298                     	;# 
  1811  0298                     	;# 
  1812  0299                     	;# 
  1813  0299                     	;# 
  1814  029A                     	;# 
  1815  029B                     	;# 
  1816  029C                     	;# 
  1817  029C                     	;# 
  1818  029D                     	;# 
  1819  030C                     	;# 
  1820  030C                     	;# 
  1821  030D                     	;# 
  1822  030E                     	;# 
  1823  030F                     	;# 
  1824  0310                     	;# 
  1825  0310                     	;# 
  1826  0311                     	;# 
  1827  0312                     	;# 
  1828  0313                     	;# 
  1829  0314                     	;# 
  1830  0314                     	;# 
  1831  0315                     	;# 
  1832  0316                     	;# 
  1833  0317                     	;# 
  1834  0318                     	;# 
  1835  0318                     	;# 
  1836  0319                     	;# 
  1837  031A                     	;# 
  1838  031B                     	;# 
  1839  031C                     	;# 
  1840  031C                     	;# 
  1841  031D                     	;# 
  1842  031E                     	;# 
  1843  031F                     	;# 
  1844  038C                     	;# 
  1845  038D                     	;# 
  1846  038E                     	;# 
  1847  0390                     	;# 
  1848  0391                     	;# 
  1849  0392                     	;# 
  1850  040C                     	;# 
  1851  040D                     	;# 
  1852  040E                     	;# 
  1853  040F                     	;# 
  1854  0410                     	;# 
  1855  0411                     	;# 
  1856  0416                     	;# 
  1857  0416                     	;# 
  1858  0417                     	;# 
  1859  0418                     	;# 
  1860  0418                     	;# 
  1861  0419                     	;# 
  1862  041A                     	;# 
  1863  041A                     	;# 
  1864  041B                     	;# 
  1865  041C                     	;# 
  1866  041C                     	;# 
  1867  041D                     	;# 
  1868  041E                     	;# 
  1869  041F                     	;# 
  1870  048C                     	;# 
  1871  048C                     	;# 
  1872  048D                     	;# 
  1873  048E                     	;# 
  1874  048F                     	;# 
  1875  048F                     	;# 
  1876  0490                     	;# 
  1877  0491                     	;# 
  1878  0492                     	;# 
  1879  0492                     	;# 
  1880  0493                     	;# 
  1881  0494                     	;# 
  1882  0495                     	;# 
  1883  0495                     	;# 
  1884  0496                     	;# 
  1885  0497                     	;# 
  1886  0498                     	;# 
  1887  0499                     	;# 
  1888  049A                     	;# 
  1889  049B                     	;# 
  1890  049C                     	;# 
  1891  049D                     	;# 
  1892  050C                     	;# 
  1893  050C                     	;# 
  1894  050D                     	;# 
  1895  050E                     	;# 
  1896  050F                     	;# 
  1897  050F                     	;# 
  1898  0510                     	;# 
  1899  0511                     	;# 
  1900  0512                     	;# 
  1901  0512                     	;# 
  1902  0513                     	;# 
  1903  0514                     	;# 
  1904  0515                     	;# 
  1905  0515                     	;# 
  1906  0516                     	;# 
  1907  0517                     	;# 
  1908  0518                     	;# 
  1909  0519                     	;# 
  1910  051A                     	;# 
  1911  051B                     	;# 
  1912  051C                     	;# 
  1913  051D                     	;# 
  1914  058C                     	;# 
  1915  058C                     	;# 
  1916  058D                     	;# 
  1917  058E                     	;# 
  1918  058F                     	;# 
  1919  058F                     	;# 
  1920  0590                     	;# 
  1921  0591                     	;# 
  1922  0592                     	;# 
  1923  0593                     	;# 
  1924  060C                     	;# 
  1925  060D                     	;# 
  1926  060E                     	;# 
  1927  060F                     	;# 
  1928  0610                     	;# 
  1929  0611                     	;# 
  1930  0612                     	;# 
  1931  0613                     	;# 
  1932  0614                     	;# 
  1933  0616                     	;# 
  1934  0617                     	;# 
  1935  0618                     	;# 
  1936  0619                     	;# 
  1937  061A                     	;# 
  1938  061B                     	;# 
  1939  061C                     	;# 
  1940  061D                     	;# 
  1941  061E                     	;# 
  1942  068C                     	;# 
  1943  068D                     	;# 
  1944  068E                     	;# 
  1945  068F                     	;# 
  1946  0690                     	;# 
  1947  0691                     	;# 
  1948  0692                     	;# 
  1949  0693                     	;# 
  1950  0694                     	;# 
  1951  070C                     	;# 
  1952  070D                     	;# 
  1953  070E                     	;# 
  1954  070F                     	;# 
  1955  0710                     	;# 
  1956  0711                     	;# 
  1957  0712                     	;# 
  1958  0713                     	;# 
  1959  0714                     	;# 
  1960  0716                     	;# 
  1961  0717                     	;# 
  1962  0718                     	;# 
  1963  0719                     	;# 
  1964  071A                     	;# 
  1965  071B                     	;# 
  1966  071C                     	;# 
  1967  071D                     	;# 
  1968  071E                     	;# 
  1969  0796                     	;# 
  1970  0797                     	;# 
  1971  0798                     	;# 
  1972  0799                     	;# 
  1973  079A                     	;# 
  1974  079B                     	;# 
  1975  080C                     	;# 
  1976  080D                     	;# 
  1977  080E                     	;# 
  1978  080F                     	;# 
  1979  0810                     	;# 
  1980  0811                     	;# 
  1981  0812                     	;# 
  1982  0813                     	;# 
  1983  0814                     	;# 
  1984  081A                     	;# 
  1985  081B                     	;# 
  1986  081C                     	;# 
  1987  081D                     	;# 
  1988  081E                     	;# 
  1989  081F                     	;# 
  1990  088C                     	;# 
  1991  088D                     	;# 
  1992  088E                     	;# 
  1993  088F                     	;# 
  1994  0890                     	;# 
  1995  0891                     	;# 
  1996  0892                     	;# 
  1997  0893                     	;# 
  1998  0895                     	;# 
  1999  0896                     	;# 
  2000  0897                     	;# 
  2001  0898                     	;# 
  2002  0899                     	;# 
  2003  089A                     	;# 
  2004  089B                     	;# 
  2005  090C                     	;# 
  2006  090E                     	;# 
  2007  090F                     	;# 
  2008  091F                     	;# 
  2009  091F                     	;# 
  2010  098F                     	;# 
  2011  098F                     	;# 
  2012  0990                     	;# 
  2013  0991                     	;# 
  2014  0992                     	;# 
  2015  0993                     	;# 
  2016  0994                     	;# 
  2017  0995                     	;# 
  2018  0996                     	;# 
  2019  0997                     	;# 
  2020  0E0F                     	;# 
  2021  0E10                     	;# 
  2022  0E11                     	;# 
  2023  0E12                     	;# 
  2024  0E13                     	;# 
  2025  0E14                     	;# 
  2026  0E15                     	;# 
  2027  0E16                     	;# 
  2028  0E17                     	;# 
  2029  0E18                     	;# 
  2030  0E19                     	;# 
  2031  0E1A                     	;# 
  2032  0E1B                     	;# 
  2033  0E1C                     	;# 
  2034  0E1D                     	;# 
  2035  0E1E                     	;# 
  2036  0E1F                     	;# 
  2037  0E20                     	;# 
  2038  0E21                     	;# 
  2039  0E22                     	;# 
  2040  0E23                     	;# 
  2041  0E24                     	;# 
  2042  0E25                     	;# 
  2043  0E26                     	;# 
  2044  0E27                     	;# 
  2045  0E28                     	;# 
  2046  0E29                     	;# 
  2047  0E2A                     	;# 
  2048  0E2B                     	;# 
  2049  0E2C                     	;# 
  2050  0E2D                     	;# 
  2051  0E2E                     	;# 
  2052  0E2F                     	;# 
  2053  0E30                     	;# 
  2054  0E31                     	;# 
  2055  0E32                     	;# 
  2056  0E33                     	;# 
  2057  0E34                     	;# 
  2058  0E35                     	;# 
  2059  0E36                     	;# 
  2060  0E37                     	;# 
  2061  0E8F                     	;# 
  2062  0E90                     	;# 
  2063  0E91                     	;# 
  2064  0E92                     	;# 
  2065  0E93                     	;# 
  2066  0E94                     	;# 
  2067  0E95                     	;# 
  2068  0E96                     	;# 
  2069  0E97                     	;# 
  2070  0E9C                     	;# 
  2071  0E9D                     	;# 
  2072  0E9E                     	;# 
  2073  0EA1                     	;# 
  2074  0EA2                     	;# 
  2075  0EA3                     	;# 
  2076  0EA4                     	;# 
  2077  0EA5                     	;# 
  2078  0EA9                     	;# 
  2079  0EAA                     	;# 
  2080  0EAB                     	;# 
  2081  0EAC                     	;# 
  2082  0EB1                     	;# 
  2083  0EB2                     	;# 
  2084  0EB3                     	;# 
  2085  0EB8                     	;# 
  2086  0EB9                     	;# 
  2087  0EBA                     	;# 
  2088  0EBB                     	;# 
  2089  0EBC                     	;# 
  2090  0EBD                     	;# 
  2091  0EBE                     	;# 
  2092  0EC3                     	;# 
  2093  0EC5                     	;# 
  2094  0EC6                     	;# 
  2095  0EC7                     	;# 
  2096  0EC8                     	;# 
  2097  0EC9                     	;# 
  2098  0ECA                     	;# 
  2099  0ECB                     	;# 
  2100  0ECC                     	;# 
  2101  0F10                     	;# 
  2102  0F11                     	;# 
  2103  0F12                     	;# 
  2104  0F13                     	;# 
  2105  0F14                     	;# 
  2106  0F15                     	;# 
  2107  0F16                     	;# 
  2108  0F17                     	;# 
  2109  0F18                     	;# 
  2110  0F19                     	;# 
  2111  0F1A                     	;# 
  2112  0F1B                     	;# 
  2113  0F1C                     	;# 
  2114  0F1D                     	;# 
  2115  0F1E                     	;# 
  2116  0F1F                     	;# 
  2117  0F20                     	;# 
  2118  0F21                     	;# 
  2119  0F22                     	;# 
  2120  0F23                     	;# 
  2121  0F24                     	;# 
  2122  0F25                     	;# 
  2123  0F26                     	;# 
  2124  0F27                     	;# 
  2125  0F38                     	;# 
  2126  0F39                     	;# 
  2127  0F3A                     	;# 
  2128  0F3B                     	;# 
  2129  0F3C                     	;# 
  2130  0F3D                     	;# 
  2131  0F3E                     	;# 
  2132  0F3F                     	;# 
  2133  0F40                     	;# 
  2134  0F41                     	;# 
  2135  0F43                     	;# 
  2136  0F44                     	;# 
  2137  0F45                     	;# 
  2138  0F46                     	;# 
  2139  0F47                     	;# 
  2140  0F48                     	;# 
  2141  0F49                     	;# 
  2142  0F4A                     	;# 
  2143  0F4B                     	;# 
  2144  0F4C                     	;# 
  2145  0F4E                     	;# 
  2146  0F4F                     	;# 
  2147  0F50                     	;# 
  2148  0F51                     	;# 
  2149  0F52                     	;# 
  2150  0F53                     	;# 
  2151  0F54                     	;# 
  2152  0F55                     	;# 
  2153  0F56                     	;# 
  2154  0F57                     	;# 
  2155  0F65                     	;# 
  2156  0F68                     	;# 
  2157  0F69                     	;# 
  2158  0F6A                     	;# 
  2159  0F6B                     	;# 
  2160  0FE4                     	;# 
  2161  0FE5                     	;# 
  2162  0FE6                     	;# 
  2163  0FE7                     	;# 
  2164  0FE8                     	;# 
  2165  0FE9                     	;# 
  2166  0FEA                     	;# 
  2167  0FEB                     	;# 
  2168  0FED                     	;# 
  2169  0FEE                     	;# 
  2170  0FEF                     	;# 
  2171  0000                     	;# 
  2172  0001                     	;# 
  2173  0002                     	;# 
  2174  0003                     	;# 
  2175  0004                     	;# 
  2176  0005                     	;# 
  2177  0006                     	;# 
  2178  0007                     	;# 
  2179  0008                     	;# 
  2180  0009                     	;# 
  2181  000A                     	;# 
  2182  000B                     	;# 
  2183  000C                     	;# 
  2184  000D                     	;# 
  2185  000E                     	;# 
  2186  0010                     	;# 
  2187  0011                     	;# 
  2188  0012                     	;# 
  2189  0013                     	;# 
  2190  0016                     	;# 
  2191  0017                     	;# 
  2192  0018                     	;# 
  2193  001C                     	;# 
  2194  001C                     	;# 
  2195  001D                     	;# 
  2196  001D                     	;# 
  2197  001E                     	;# 
  2198  001F                     	;# 
  2199  008C                     	;# 
  2200  008C                     	;# 
  2201  008D                     	;# 
  2202  008E                     	;# 
  2203  008E                     	;# 
  2204  008F                     	;# 
  2205  0090                     	;# 
  2206  0090                     	;# 
  2207  0091                     	;# 
  2208  0093                     	;# 
  2209  0094                     	;# 
  2210  0095                     	;# 
  2211  0096                     	;# 
  2212  0097                     	;# 
  2213  0098                     	;# 
  2214  0099                     	;# 
  2215  009A                     	;# 
  2216  009B                     	;# 
  2217  009C                     	;# 
  2218  009D                     	;# 
  2219  009E                     	;# 
  2220  010C                     	;# 
  2221  010D                     	;# 
  2222  010E                     	;# 
  2223  010E                     	;# 
  2224  010F                     	;# 
  2225  0110                     	;# 
  2226  0110                     	;# 
  2227  0111                     	;# 
  2228  0112                     	;# 
  2229  0112                     	;# 
  2230  0113                     	;# 
  2231  0114                     	;# 
  2232  0114                     	;# 
  2233  0115                     	;# 
  2234  0116                     	;# 
  2235  0116                     	;# 
  2236  0117                     	;# 
  2237  0119                     	;# 
  2238  0119                     	;# 
  2239  0119                     	;# 
  2240  011A                     	;# 
  2241  011A                     	;# 
  2242  011A                     	;# 
  2243  011B                     	;# 
  2244  011B                     	;# 
  2245  011B                     	;# 
  2246  011B                     	;# 
  2247  011B                     	;# 
  2248  011C                     	;# 
  2249  011C                     	;# 
  2250  011C                     	;# 
  2251  011D                     	;# 
  2252  011D                     	;# 
  2253  011D                     	;# 
  2254  011E                     	;# 
  2255  011E                     	;# 
  2256  011E                     	;# 
  2257  011F                     	;# 
  2258  011F                     	;# 
  2259  011F                     	;# 
  2260  011F                     	;# 
  2261  011F                     	;# 
  2262  018C                     	;# 
  2263  018D                     	;# 
  2264  018E                     	;# 
  2265  018F                     	;# 
  2266  0190                     	;# 
  2267  0191                     	;# 
  2268  0192                     	;# 
  2269  0196                     	;# 
  2270  0197                     	;# 
  2271  0198                     	;# 
  2272  0199                     	;# 
  2273  019A                     	;# 
  2274  019B                     	;# 
  2275  019C                     	;# 
  2276  020C                     	;# 
  2277  020C                     	;# 
  2278  020D                     	;# 
  2279  020E                     	;# 
  2280  020F                     	;# 
  2281  020F                     	;# 
  2282  0210                     	;# 
  2283  0210                     	;# 
  2284  0211                     	;# 
  2285  0211                     	;# 
  2286  0212                     	;# 
  2287  0212                     	;# 
  2288  0213                     	;# 
  2289  0214                     	;# 
  2290  0215                     	;# 
  2291  0215                     	;# 
  2292  0216                     	;# 
  2293  0216                     	;# 
  2294  0217                     	;# 
  2295  0217                     	;# 
  2296  0218                     	;# 
  2297  0218                     	;# 
  2298  0219                     	;# 
  2299  021A                     	;# 
  2300  021B                     	;# 
  2301  021B                     	;# 
  2302  021C                     	;# 
  2303  021C                     	;# 
  2304  021D                     	;# 
  2305  021D                     	;# 
  2306  021E                     	;# 
  2307  021F                     	;# 
  2308  028C                     	;# 
  2309  028C                     	;# 
  2310  028D                     	;# 
  2311  028D                     	;# 
  2312  028E                     	;# 
  2313  028F                     	;# 
  2314  0290                     	;# 
  2315  0290                     	;# 
  2316  0291                     	;# 
  2317  0292                     	;# 
  2318  0292                     	;# 
  2319  0293                     	;# 
  2320  0293                     	;# 
  2321  0294                     	;# 
  2322  0295                     	;# 
  2323  0296                     	;# 
  2324  0296                     	;# 
  2325  0297                     	;# 
  2326  0298                     	;# 
  2327  0298                     	;# 
  2328  0299                     	;# 
  2329  0299                     	;# 
  2330  029A                     	;# 
  2331  029B                     	;# 
  2332  029C                     	;# 
  2333  029C                     	;# 
  2334  029D                     	;# 
  2335  030C                     	;# 
  2336  030C                     	;# 
  2337  030D                     	;# 
  2338  030E                     	;# 
  2339  030F                     	;# 
  2340  0310                     	;# 
  2341  0310                     	;# 
  2342  0311                     	;# 
  2343  0312                     	;# 
  2344  0313                     	;# 
  2345  0314                     	;# 
  2346  0314                     	;# 
  2347  0315                     	;# 
  2348  0316                     	;# 
  2349  0317                     	;# 
  2350  0318                     	;# 
  2351  0318                     	;# 
  2352  0319                     	;# 
  2353  031A                     	;# 
  2354  031B                     	;# 
  2355  031C                     	;# 
  2356  031C                     	;# 
  2357  031D                     	;# 
  2358  031E                     	;# 
  2359  031F                     	;# 
  2360  038C                     	;# 
  2361  038D                     	;# 
  2362  038E                     	;# 
  2363  0390                     	;# 
  2364  0391                     	;# 
  2365  0392                     	;# 
  2366  040C                     	;# 
  2367  040D                     	;# 
  2368  040E                     	;# 
  2369  040F                     	;# 
  2370  0410                     	;# 
  2371  0411                     	;# 
  2372  0416                     	;# 
  2373  0416                     	;# 
  2374  0417                     	;# 
  2375  0418                     	;# 
  2376  0418                     	;# 
  2377  0419                     	;# 
  2378  041A                     	;# 
  2379  041A                     	;# 
  2380  041B                     	;# 
  2381  041C                     	;# 
  2382  041C                     	;# 
  2383  041D                     	;# 
  2384  041E                     	;# 
  2385  041F                     	;# 
  2386  048C                     	;# 
  2387  048C                     	;# 
  2388  048D                     	;# 
  2389  048E                     	;# 
  2390  048F                     	;# 
  2391  048F                     	;# 
  2392  0490                     	;# 
  2393  0491                     	;# 
  2394  0492                     	;# 
  2395  0492                     	;# 
  2396  0493                     	;# 
  2397  0494                     	;# 
  2398  0495                     	;# 
  2399  0495                     	;# 
  2400  0496                     	;# 
  2401  0497                     	;# 
  2402  0498                     	;# 
  2403  0499                     	;# 
  2404  049A                     	;# 
  2405  049B                     	;# 
  2406  049C                     	;# 
  2407  049D                     	;# 
  2408  050C                     	;# 
  2409  050C                     	;# 
  2410  050D                     	;# 
  2411  050E                     	;# 
  2412  050F                     	;# 
  2413  050F                     	;# 
  2414  0510                     	;# 
  2415  0511                     	;# 
  2416  0512                     	;# 
  2417  0512                     	;# 
  2418  0513                     	;# 
  2419  0514                     	;# 
  2420  0515                     	;# 
  2421  0515                     	;# 
  2422  0516                     	;# 
  2423  0517                     	;# 
  2424  0518                     	;# 
  2425  0519                     	;# 
  2426  051A                     	;# 
  2427  051B                     	;# 
  2428  051C                     	;# 
  2429  051D                     	;# 
  2430  058C                     	;# 
  2431  058C                     	;# 
  2432  058D                     	;# 
  2433  058E                     	;# 
  2434  058F                     	;# 
  2435  058F                     	;# 
  2436  0590                     	;# 
  2437  0591                     	;# 
  2438  0592                     	;# 
  2439  0593                     	;# 
  2440  060C                     	;# 
  2441  060D                     	;# 
  2442  060E                     	;# 
  2443  060F                     	;# 
  2444  0610                     	;# 
  2445  0611                     	;# 
  2446  0612                     	;# 
  2447  0613                     	;# 
  2448  0614                     	;# 
  2449  0616                     	;# 
  2450  0617                     	;# 
  2451  0618                     	;# 
  2452  0619                     	;# 
  2453  061A                     	;# 
  2454  061B                     	;# 
  2455  061C                     	;# 
  2456  061D                     	;# 
  2457  061E                     	;# 
  2458  068C                     	;# 
  2459  068D                     	;# 
  2460  068E                     	;# 
  2461  068F                     	;# 
  2462  0690                     	;# 
  2463  0691                     	;# 
  2464  0692                     	;# 
  2465  0693                     	;# 
  2466  0694                     	;# 
  2467  070C                     	;# 
  2468  070D                     	;# 
  2469  070E                     	;# 
  2470  070F                     	;# 
  2471  0710                     	;# 
  2472  0711                     	;# 
  2473  0712                     	;# 
  2474  0713                     	;# 
  2475  0714                     	;# 
  2476  0716                     	;# 
  2477  0717                     	;# 
  2478  0718                     	;# 
  2479  0719                     	;# 
  2480  071A                     	;# 
  2481  071B                     	;# 
  2482  071C                     	;# 
  2483  071D                     	;# 
  2484  071E                     	;# 
  2485  0796                     	;# 
  2486  0797                     	;# 
  2487  0798                     	;# 
  2488  0799                     	;# 
  2489  079A                     	;# 
  2490  079B                     	;# 
  2491  080C                     	;# 
  2492  080D                     	;# 
  2493  080E                     	;# 
  2494  080F                     	;# 
  2495  0810                     	;# 
  2496  0811                     	;# 
  2497  0812                     	;# 
  2498  0813                     	;# 
  2499  0814                     	;# 
  2500  081A                     	;# 
  2501  081B                     	;# 
  2502  081C                     	;# 
  2503  081D                     	;# 
  2504  081E                     	;# 
  2505  081F                     	;# 
  2506  088C                     	;# 
  2507  088D                     	;# 
  2508  088E                     	;# 
  2509  088F                     	;# 
  2510  0890                     	;# 
  2511  0891                     	;# 
  2512  0892                     	;# 
  2513  0893                     	;# 
  2514  0895                     	;# 
  2515  0896                     	;# 
  2516  0897                     	;# 
  2517  0898                     	;# 
  2518  0899                     	;# 
  2519  089A                     	;# 
  2520  089B                     	;# 
  2521  090C                     	;# 
  2522  090E                     	;# 
  2523  090F                     	;# 
  2524  091F                     	;# 
  2525  091F                     	;# 
  2526  098F                     	;# 
  2527  098F                     	;# 
  2528  0990                     	;# 
  2529  0991                     	;# 
  2530  0992                     	;# 
  2531  0993                     	;# 
  2532  0994                     	;# 
  2533  0995                     	;# 
  2534  0996                     	;# 
  2535  0997                     	;# 
  2536  0E0F                     	;# 
  2537  0E10                     	;# 
  2538  0E11                     	;# 
  2539  0E12                     	;# 
  2540  0E13                     	;# 
  2541  0E14                     	;# 
  2542  0E15                     	;# 
  2543  0E16                     	;# 
  2544  0E17                     	;# 
  2545  0E18                     	;# 
  2546  0E19                     	;# 
  2547  0E1A                     	;# 
  2548  0E1B                     	;# 
  2549  0E1C                     	;# 
  2550  0E1D                     	;# 
  2551  0E1E                     	;# 
  2552  0E1F                     	;# 
  2553  0E20                     	;# 
  2554  0E21                     	;# 
  2555  0E22                     	;# 
  2556  0E23                     	;# 
  2557  0E24                     	;# 
  2558  0E25                     	;# 
  2559  0E26                     	;# 
  2560  0E27                     	;# 
  2561  0E28                     	;# 
  2562  0E29                     	;# 
  2563  0E2A                     	;# 
  2564  0E2B                     	;# 
  2565  0E2C                     	;# 
  2566  0E2D                     	;# 
  2567  0E2E                     	;# 
  2568  0E2F                     	;# 
  2569  0E30                     	;# 
  2570  0E31                     	;# 
  2571  0E32                     	;# 
  2572  0E33                     	;# 
  2573  0E34                     	;# 
  2574  0E35                     	;# 
  2575  0E36                     	;# 
  2576  0E37                     	;# 
  2577  0E8F                     	;# 
  2578  0E90                     	;# 
  2579  0E91                     	;# 
  2580  0E92                     	;# 
  2581  0E93                     	;# 
  2582  0E94                     	;# 
  2583  0E95                     	;# 
  2584  0E96                     	;# 
  2585  0E97                     	;# 
  2586  0E9C                     	;# 
  2587  0E9D                     	;# 
  2588  0E9E                     	;# 
  2589  0EA1                     	;# 
  2590  0EA2                     	;# 
  2591  0EA3                     	;# 
  2592  0EA4                     	;# 
  2593  0EA5                     	;# 
  2594  0EA9                     	;# 
  2595  0EAA                     	;# 
  2596  0EAB                     	;# 
  2597  0EAC                     	;# 
  2598  0EB1                     	;# 
  2599  0EB2                     	;# 
  2600  0EB3                     	;# 
  2601  0EB8                     	;# 
  2602  0EB9                     	;# 
  2603  0EBA                     	;# 
  2604  0EBB                     	;# 
  2605  0EBC                     	;# 
  2606  0EBD                     	;# 
  2607  0EBE                     	;# 
  2608  0EC3                     	;# 
  2609  0EC5                     	;# 
  2610  0EC6                     	;# 
  2611  0EC7                     	;# 
  2612  0EC8                     	;# 
  2613  0EC9                     	;# 
  2614  0ECA                     	;# 
  2615  0ECB                     	;# 
  2616  0ECC                     	;# 
  2617  0F10                     	;# 
  2618  0F11                     	;# 
  2619  0F12                     	;# 
  2620  0F13                     	;# 
  2621  0F14                     	;# 
  2622  0F15                     	;# 
  2623  0F16                     	;# 
  2624  0F17                     	;# 
  2625  0F18                     	;# 
  2626  0F19                     	;# 
  2627  0F1A                     	;# 
  2628  0F1B                     	;# 
  2629  0F1C                     	;# 
  2630  0F1D                     	;# 
  2631  0F1E                     	;# 
  2632  0F1F                     	;# 
  2633  0F20                     	;# 
  2634  0F21                     	;# 
  2635  0F22                     	;# 
  2636  0F23                     	;# 
  2637  0F24                     	;# 
  2638  0F25                     	;# 
  2639  0F26                     	;# 
  2640  0F27                     	;# 
  2641  0F38                     	;# 
  2642  0F39                     	;# 
  2643  0F3A                     	;# 
  2644  0F3B                     	;# 
  2645  0F3C                     	;# 
  2646  0F3D                     	;# 
  2647  0F3E                     	;# 
  2648  0F3F                     	;# 
  2649  0F40                     	;# 
  2650  0F41                     	;# 
  2651  0F43                     	;# 
  2652  0F44                     	;# 
  2653  0F45                     	;# 
  2654  0F46                     	;# 
  2655  0F47                     	;# 
  2656  0F48                     	;# 
  2657  0F49                     	;# 
  2658  0F4A                     	;# 
  2659  0F4B                     	;# 
  2660  0F4C                     	;# 
  2661  0F4E                     	;# 
  2662  0F4F                     	;# 
  2663  0F50                     	;# 
  2664  0F51                     	;# 
  2665  0F52                     	;# 
  2666  0F53                     	;# 
  2667  0F54                     	;# 
  2668  0F55                     	;# 
  2669  0F56                     	;# 
  2670  0F57                     	;# 
  2671  0F65                     	;# 
  2672  0F68                     	;# 
  2673  0F69                     	;# 
  2674  0F6A                     	;# 
  2675  0F6B                     	;# 
  2676  0FE4                     	;# 
  2677  0FE5                     	;# 
  2678  0FE6                     	;# 
  2679  0FE7                     	;# 
  2680  0FE8                     	;# 
  2681  0FE9                     	;# 
  2682  0FEA                     	;# 
  2683  0FEB                     	;# 
  2684  0FED                     	;# 
  2685  0FEE                     	;# 
  2686  0FEF                     	;# 
  2687  0000                     	;# 
  2688  0001                     	;# 
  2689  0002                     	;# 
  2690  0003                     	;# 
  2691  0004                     	;# 
  2692  0005                     	;# 
  2693  0006                     	;# 
  2694  0007                     	;# 
  2695  0008                     	;# 
  2696  0009                     	;# 
  2697  000A                     	;# 
  2698  000B                     	;# 
  2699  000C                     	;# 
  2700  000D                     	;# 
  2701  000E                     	;# 
  2702  0010                     	;# 
  2703  0011                     	;# 
  2704  0012                     	;# 
  2705  0013                     	;# 
  2706  0016                     	;# 
  2707  0017                     	;# 
  2708  0018                     	;# 
  2709  001C                     	;# 
  2710  001C                     	;# 
  2711  001D                     	;# 
  2712  001D                     	;# 
  2713  001E                     	;# 
  2714  001F                     	;# 
  2715  008C                     	;# 
  2716  008C                     	;# 
  2717  008D                     	;# 
  2718  008E                     	;# 
  2719  008E                     	;# 
  2720  008F                     	;# 
  2721  0090                     	;# 
  2722  0090                     	;# 
  2723  0091                     	;# 
  2724  0093                     	;# 
  2725  0094                     	;# 
  2726  0095                     	;# 
  2727  0096                     	;# 
  2728  0097                     	;# 
  2729  0098                     	;# 
  2730  0099                     	;# 
  2731  009A                     	;# 
  2732  009B                     	;# 
  2733  009C                     	;# 
  2734  009D                     	;# 
  2735  009E                     	;# 
  2736  010C                     	;# 
  2737  010D                     	;# 
  2738  010E                     	;# 
  2739  010E                     	;# 
  2740  010F                     	;# 
  2741  0110                     	;# 
  2742  0110                     	;# 
  2743  0111                     	;# 
  2744  0112                     	;# 
  2745  0112                     	;# 
  2746  0113                     	;# 
  2747  0114                     	;# 
  2748  0114                     	;# 
  2749  0115                     	;# 
  2750  0116                     	;# 
  2751  0116                     	;# 
  2752  0117                     	;# 
  2753  0119                     	;# 
  2754  0119                     	;# 
  2755  0119                     	;# 
  2756  011A                     	;# 
  2757  011A                     	;# 
  2758  011A                     	;# 
  2759  011B                     	;# 
  2760  011B                     	;# 
  2761  011B                     	;# 
  2762  011B                     	;# 
  2763  011B                     	;# 
  2764  011C                     	;# 
  2765  011C                     	;# 
  2766  011C                     	;# 
  2767  011D                     	;# 
  2768  011D                     	;# 
  2769  011D                     	;# 
  2770  011E                     	;# 
  2771  011E                     	;# 
  2772  011E                     	;# 
  2773  011F                     	;# 
  2774  011F                     	;# 
  2775  011F                     	;# 
  2776  011F                     	;# 
  2777  011F                     	;# 
  2778  018C                     	;# 
  2779  018D                     	;# 
  2780  018E                     	;# 
  2781  018F                     	;# 
  2782  0190                     	;# 
  2783  0191                     	;# 
  2784  0192                     	;# 
  2785  0196                     	;# 
  2786  0197                     	;# 
  2787  0198                     	;# 
  2788  0199                     	;# 
  2789  019A                     	;# 
  2790  019B                     	;# 
  2791  019C                     	;# 
  2792  020C                     	;# 
  2793  020C                     	;# 
  2794  020D                     	;# 
  2795  020E                     	;# 
  2796  020F                     	;# 
  2797  020F                     	;# 
  2798  0210                     	;# 
  2799  0210                     	;# 
  2800  0211                     	;# 
  2801  0211                     	;# 
  2802  0212                     	;# 
  2803  0212                     	;# 
  2804  0213                     	;# 
  2805  0214                     	;# 
  2806  0215                     	;# 
  2807  0215                     	;# 
  2808  0216                     	;# 
  2809  0216                     	;# 
  2810  0217                     	;# 
  2811  0217                     	;# 
  2812  0218                     	;# 
  2813  0218                     	;# 
  2814  0219                     	;# 
  2815  021A                     	;# 
  2816  021B                     	;# 
  2817  021B                     	;# 
  2818  021C                     	;# 
  2819  021C                     	;# 
  2820  021D                     	;# 
  2821  021D                     	;# 
  2822  021E                     	;# 
  2823  021F                     	;# 
  2824  028C                     	;# 
  2825  028C                     	;# 
  2826  028D                     	;# 
  2827  028D                     	;# 
  2828  028E                     	;# 
  2829  028F                     	;# 
  2830  0290                     	;# 
  2831  0290                     	;# 
  2832  0291                     	;# 
  2833  0292                     	;# 
  2834  0292                     	;# 
  2835  0293                     	;# 
  2836  0293                     	;# 
  2837  0294                     	;# 
  2838  0295                     	;# 
  2839  0296                     	;# 
  2840  0296                     	;# 
  2841  0297                     	;# 
  2842  0298                     	;# 
  2843  0298                     	;# 
  2844  0299                     	;# 
  2845  0299                     	;# 
  2846  029A                     	;# 
  2847  029B                     	;# 
  2848  029C                     	;# 
  2849  029C                     	;# 
  2850  029D                     	;# 
  2851  030C                     	;# 
  2852  030C                     	;# 
  2853  030D                     	;# 
  2854  030E                     	;# 
  2855  030F                     	;# 
  2856  0310                     	;# 
  2857  0310                     	;# 
  2858  0311                     	;# 
  2859  0312                     	;# 
  2860  0313                     	;# 
  2861  0314                     	;# 
  2862  0314                     	;# 
  2863  0315                     	;# 
  2864  0316                     	;# 
  2865  0317                     	;# 
  2866  0318                     	;# 
  2867  0318                     	;# 
  2868  0319                     	;# 
  2869  031A                     	;# 
  2870  031B                     	;# 
  2871  031C                     	;# 
  2872  031C                     	;# 
  2873  031D                     	;# 
  2874  031E                     	;# 
  2875  031F                     	;# 
  2876  038C                     	;# 
  2877  038D                     	;# 
  2878  038E                     	;# 
  2879  0390                     	;# 
  2880  0391                     	;# 
  2881  0392                     	;# 
  2882  040C                     	;# 
  2883  040D                     	;# 
  2884  040E                     	;# 
  2885  040F                     	;# 
  2886  0410                     	;# 
  2887  0411                     	;# 
  2888  0416                     	;# 
  2889  0416                     	;# 
  2890  0417                     	;# 
  2891  0418                     	;# 
  2892  0418                     	;# 
  2893  0419                     	;# 
  2894  041A                     	;# 
  2895  041A                     	;# 
  2896  041B                     	;# 
  2897  041C                     	;# 
  2898  041C                     	;# 
  2899  041D                     	;# 
  2900  041E                     	;# 
  2901  041F                     	;# 
  2902  048C                     	;# 
  2903  048C                     	;# 
  2904  048D                     	;# 
  2905  048E                     	;# 
  2906  048F                     	;# 
  2907  048F                     	;# 
  2908  0490                     	;# 
  2909  0491                     	;# 
  2910  0492                     	;# 
  2911  0492                     	;# 
  2912  0493                     	;# 
  2913  0494                     	;# 
  2914  0495                     	;# 
  2915  0495                     	;# 
  2916  0496                     	;# 
  2917  0497                     	;# 
  2918  0498                     	;# 
  2919  0499                     	;# 
  2920  049A                     	;# 
  2921  049B                     	;# 
  2922  049C                     	;# 
  2923  049D                     	;# 
  2924  050C                     	;# 
  2925  050C                     	;# 
  2926  050D                     	;# 
  2927  050E                     	;# 
  2928  050F                     	;# 
  2929  050F                     	;# 
  2930  0510                     	;# 
  2931  0511                     	;# 
  2932  0512                     	;# 
  2933  0512                     	;# 
  2934  0513                     	;# 
  2935  0514                     	;# 
  2936  0515                     	;# 
  2937  0515                     	;# 
  2938  0516                     	;# 
  2939  0517                     	;# 
  2940  0518                     	;# 
  2941  0519                     	;# 
  2942  051A                     	;# 
  2943  051B                     	;# 
  2944  051C                     	;# 
  2945  051D                     	;# 
  2946  058C                     	;# 
  2947  058C                     	;# 
  2948  058D                     	;# 
  2949  058E                     	;# 
  2950  058F                     	;# 
  2951  058F                     	;# 
  2952  0590                     	;# 
  2953  0591                     	;# 
  2954  0592                     	;# 
  2955  0593                     	;# 
  2956  060C                     	;# 
  2957  060D                     	;# 
  2958  060E                     	;# 
  2959  060F                     	;# 
  2960  0610                     	;# 
  2961  0611                     	;# 
  2962  0612                     	;# 
  2963  0613                     	;# 
  2964  0614                     	;# 
  2965  0616                     	;# 
  2966  0617                     	;# 
  2967  0618                     	;# 
  2968  0619                     	;# 
  2969  061A                     	;# 
  2970  061B                     	;# 
  2971  061C                     	;# 
  2972  061D                     	;# 
  2973  061E                     	;# 
  2974  068C                     	;# 
  2975  068D                     	;# 
  2976  068E                     	;# 
  2977  068F                     	;# 
  2978  0690                     	;# 
  2979  0691                     	;# 
  2980  0692                     	;# 
  2981  0693                     	;# 
  2982  0694                     	;# 
  2983  070C                     	;# 
  2984  070D                     	;# 
  2985  070E                     	;# 
  2986  070F                     	;# 
  2987  0710                     	;# 
  2988  0711                     	;# 
  2989  0712                     	;# 
  2990  0713                     	;# 
  2991  0714                     	;# 
  2992  0716                     	;# 
  2993  0717                     	;# 
  2994  0718                     	;# 
  2995  0719                     	;# 
  2996  071A                     	;# 
  2997  071B                     	;# 
  2998  071C                     	;# 
  2999  071D                     	;# 
  3000  071E                     	;# 
  3001  0796                     	;# 
  3002  0797                     	;# 
  3003  0798                     	;# 
  3004  0799                     	;# 
  3005  079A                     	;# 
  3006  079B                     	;# 
  3007  080C                     	;# 
  3008  080D                     	;# 
  3009  080E                     	;# 
  3010  080F                     	;# 
  3011  0810                     	;# 
  3012  0811                     	;# 
  3013  0812                     	;# 
  3014  0813                     	;# 
  3015  0814                     	;# 
  3016  081A                     	;# 
  3017  081B                     	;# 
  3018  081C                     	;# 
  3019  081D                     	;# 
  3020  081E                     	;# 
  3021  081F                     	;# 
  3022  088C                     	;# 
  3023  088D                     	;# 
  3024  088E                     	;# 
  3025  088F                     	;# 
  3026  0890                     	;# 
  3027  0891                     	;# 
  3028  0892                     	;# 
  3029  0893                     	;# 
  3030  0895                     	;# 
  3031  0896                     	;# 
  3032  0897                     	;# 
  3033  0898                     	;# 
  3034  0899                     	;# 
  3035  089A                     	;# 
  3036  089B                     	;# 
  3037  090C                     	;# 
  3038  090E                     	;# 
  3039  090F                     	;# 
  3040  091F                     	;# 
  3041  091F                     	;# 
  3042  098F                     	;# 
  3043  098F                     	;# 
  3044  0990                     	;# 
  3045  0991                     	;# 
  3046  0992                     	;# 
  3047  0993                     	;# 
  3048  0994                     	;# 
  3049  0995                     	;# 
  3050  0996                     	;# 
  3051  0997                     	;# 
  3052  0E0F                     	;# 
  3053  0E10                     	;# 
  3054  0E11                     	;# 
  3055  0E12                     	;# 
  3056  0E13                     	;# 
  3057  0E14                     	;# 
  3058  0E15                     	;# 
  3059  0E16                     	;# 
  3060  0E17                     	;# 
  3061  0E18                     	;# 
  3062  0E19                     	;# 
  3063  0E1A                     	;# 
  3064  0E1B                     	;# 
  3065  0E1C                     	;# 
  3066  0E1D                     	;# 
  3067  0E1E                     	;# 
  3068  0E1F                     	;# 
  3069  0E20                     	;# 
  3070  0E21                     	;# 
  3071  0E22                     	;# 
  3072  0E23                     	;# 
  3073  0E24                     	;# 
  3074  0E25                     	;# 
  3075  0E26                     	;# 
  3076  0E27                     	;# 
  3077  0E28                     	;# 
  3078  0E29                     	;# 
  3079  0E2A                     	;# 
  3080  0E2B                     	;# 
  3081  0E2C                     	;# 
  3082  0E2D                     	;# 
  3083  0E2E                     	;# 
  3084  0E2F                     	;# 
  3085  0E30                     	;# 
  3086  0E31                     	;# 
  3087  0E32                     	;# 
  3088  0E33                     	;# 
  3089  0E34                     	;# 
  3090  0E35                     	;# 
  3091  0E36                     	;# 
  3092  0E37                     	;# 
  3093  0E8F                     	;# 
  3094  0E90                     	;# 
  3095  0E91                     	;# 
  3096  0E92                     	;# 
  3097  0E93                     	;# 
  3098  0E94                     	;# 
  3099  0E95                     	;# 
  3100  0E96                     	;# 
  3101  0E97                     	;# 
  3102  0E9C                     	;# 
  3103  0E9D                     	;# 
  3104  0E9E                     	;# 
  3105  0EA1                     	;# 
  3106  0EA2                     	;# 
  3107  0EA3                     	;# 
  3108  0EA4                     	;# 
  3109  0EA5                     	;# 
  3110  0EA9                     	;# 
  3111  0EAA                     	;# 
  3112  0EAB                     	;# 
  3113  0EAC                     	;# 
  3114  0EB1                     	;# 
  3115  0EB2                     	;# 
  3116  0EB3                     	;# 
  3117  0EB8                     	;# 
  3118  0EB9                     	;# 
  3119  0EBA                     	;# 
  3120  0EBB                     	;# 
  3121  0EBC                     	;# 
  3122  0EBD                     	;# 
  3123  0EBE                     	;# 
  3124  0EC3                     	;# 
  3125  0EC5                     	;# 
  3126  0EC6                     	;# 
  3127  0EC7                     	;# 
  3128  0EC8                     	;# 
  3129  0EC9                     	;# 
  3130  0ECA                     	;# 
  3131  0ECB                     	;# 
  3132  0ECC                     	;# 
  3133  0F10                     	;# 
  3134  0F11                     	;# 
  3135  0F12                     	;# 
  3136  0F13                     	;# 
  3137  0F14                     	;# 
  3138  0F15                     	;# 
  3139  0F16                     	;# 
  3140  0F17                     	;# 
  3141  0F18                     	;# 
  3142  0F19                     	;# 
  3143  0F1A                     	;# 
  3144  0F1B                     	;# 
  3145  0F1C                     	;# 
  3146  0F1D                     	;# 
  3147  0F1E                     	;# 
  3148  0F1F                     	;# 
  3149  0F20                     	;# 
  3150  0F21                     	;# 
  3151  0F22                     	;# 
  3152  0F23                     	;# 
  3153  0F24                     	;# 
  3154  0F25                     	;# 
  3155  0F26                     	;# 
  3156  0F27                     	;# 
  3157  0F38                     	;# 
  3158  0F39                     	;# 
  3159  0F3A                     	;# 
  3160  0F3B                     	;# 
  3161  0F3C                     	;# 
  3162  0F3D                     	;# 
  3163  0F3E                     	;# 
  3164  0F3F                     	;# 
  3165  0F40                     	;# 
  3166  0F41                     	;# 
  3167  0F43                     	;# 
  3168  0F44                     	;# 
  3169  0F45                     	;# 
  3170  0F46                     	;# 
  3171  0F47                     	;# 
  3172  0F48                     	;# 
  3173  0F49                     	;# 
  3174  0F4A                     	;# 
  3175  0F4B                     	;# 
  3176  0F4C                     	;# 
  3177  0F4E                     	;# 
  3178  0F4F                     	;# 
  3179  0F50                     	;# 
  3180  0F51                     	;# 
  3181  0F52                     	;# 
  3182  0F53                     	;# 
  3183  0F54                     	;# 
  3184  0F55                     	;# 
  3185  0F56                     	;# 
  3186  0F57                     	;# 
  3187  0F65                     	;# 
  3188  0F68                     	;# 
  3189  0F69                     	;# 
  3190  0F6A                     	;# 
  3191  0F6B                     	;# 
  3192  0FE4                     	;# 
  3193  0FE5                     	;# 
  3194  0FE6                     	;# 
  3195  0FE7                     	;# 
  3196  0FE8                     	;# 
  3197  0FE9                     	;# 
  3198  0FEA                     	;# 
  3199  0FEB                     	;# 
  3200  0FED                     	;# 
  3201  0FEE                     	;# 
  3202  0FEF                     	;# 
  3203  0000                     	;# 
  3204  0001                     	;# 
  3205  0002                     	;# 
  3206  0003                     	;# 
  3207  0004                     	;# 
  3208  0005                     	;# 
  3209  0006                     	;# 
  3210  0007                     	;# 
  3211  0008                     	;# 
  3212  0009                     	;# 
  3213  000A                     	;# 
  3214  000B                     	;# 
  3215  000C                     	;# 
  3216  000D                     	;# 
  3217  000E                     	;# 
  3218  0010                     	;# 
  3219  0011                     	;# 
  3220  0012                     	;# 
  3221  0013                     	;# 
  3222  0016                     	;# 
  3223  0017                     	;# 
  3224  0018                     	;# 
  3225  001C                     	;# 
  3226  001C                     	;# 
  3227  001D                     	;# 
  3228  001D                     	;# 
  3229  001E                     	;# 
  3230  001F                     	;# 
  3231  008C                     	;# 
  3232  008C                     	;# 
  3233  008D                     	;# 
  3234  008E                     	;# 
  3235  008E                     	;# 
  3236  008F                     	;# 
  3237  0090                     	;# 
  3238  0090                     	;# 
  3239  0091                     	;# 
  3240  0093                     	;# 
  3241  0094                     	;# 
  3242  0095                     	;# 
  3243  0096                     	;# 
  3244  0097                     	;# 
  3245  0098                     	;# 
  3246  0099                     	;# 
  3247  009A                     	;# 
  3248  009B                     	;# 
  3249  009C                     	;# 
  3250  009D                     	;# 
  3251  009E                     	;# 
  3252  010C                     	;# 
  3253  010D                     	;# 
  3254  010E                     	;# 
  3255  010E                     	;# 
  3256  010F                     	;# 
  3257  0110                     	;# 
  3258  0110                     	;# 
  3259  0111                     	;# 
  3260  0112                     	;# 
  3261  0112                     	;# 
  3262  0113                     	;# 
  3263  0114                     	;# 
  3264  0114                     	;# 
  3265  0115                     	;# 
  3266  0116                     	;# 
  3267  0116                     	;# 
  3268  0117                     	;# 
  3269  0119                     	;# 
  3270  0119                     	;# 
  3271  0119                     	;# 
  3272  011A                     	;# 
  3273  011A                     	;# 
  3274  011A                     	;# 
  3275  011B                     	;# 
  3276  011B                     	;# 
  3277  011B                     	;# 
  3278  011B                     	;# 
  3279  011B                     	;# 
  3280  011C                     	;# 
  3281  011C                     	;# 
  3282  011C                     	;# 
  3283  011D                     	;# 
  3284  011D                     	;# 
  3285  011D                     	;# 
  3286  011E                     	;# 
  3287  011E                     	;# 
  3288  011E                     	;# 
  3289  011F                     	;# 
  3290  011F                     	;# 
  3291  011F                     	;# 
  3292  011F                     	;# 
  3293  011F                     	;# 
  3294  018C                     	;# 
  3295  018D                     	;# 
  3296  018E                     	;# 
  3297  018F                     	;# 
  3298  0190                     	;# 
  3299  0191                     	;# 
  3300  0192                     	;# 
  3301  0196                     	;# 
  3302  0197                     	;# 
  3303  0198                     	;# 
  3304  0199                     	;# 
  3305  019A                     	;# 
  3306  019B                     	;# 
  3307  019C                     	;# 
  3308  020C                     	;# 
  3309  020C                     	;# 
  3310  020D                     	;# 
  3311  020E                     	;# 
  3312  020F                     	;# 
  3313  020F                     	;# 
  3314  0210                     	;# 
  3315  0210                     	;# 
  3316  0211                     	;# 
  3317  0211                     	;# 
  3318  0212                     	;# 
  3319  0212                     	;# 
  3320  0213                     	;# 
  3321  0214                     	;# 
  3322  0215                     	;# 
  3323  0215                     	;# 
  3324  0216                     	;# 
  3325  0216                     	;# 
  3326  0217                     	;# 
  3327  0217                     	;# 
  3328  0218                     	;# 
  3329  0218                     	;# 
  3330  0219                     	;# 
  3331  021A                     	;# 
  3332  021B                     	;# 
  3333  021B                     	;# 
  3334  021C                     	;# 
  3335  021C                     	;# 
  3336  021D                     	;# 
  3337  021D                     	;# 
  3338  021E                     	;# 
  3339  021F                     	;# 
  3340  028C                     	;# 
  3341  028C                     	;# 
  3342  028D                     	;# 
  3343  028D                     	;# 
  3344  028E                     	;# 
  3345  028F                     	;# 
  3346  0290                     	;# 
  3347  0290                     	;# 
  3348  0291                     	;# 
  3349  0292                     	;# 
  3350  0292                     	;# 
  3351  0293                     	;# 
  3352  0293                     	;# 
  3353  0294                     	;# 
  3354  0295                     	;# 
  3355  0296                     	;# 
  3356  0296                     	;# 
  3357  0297                     	;# 
  3358  0298                     	;# 
  3359  0298                     	;# 
  3360  0299                     	;# 
  3361  0299                     	;# 
  3362  029A                     	;# 
  3363  029B                     	;# 
  3364  029C                     	;# 
  3365  029C                     	;# 
  3366  029D                     	;# 
  3367  030C                     	;# 
  3368  030C                     	;# 
  3369  030D                     	;# 
  3370  030E                     	;# 
  3371  030F                     	;# 
  3372  0310                     	;# 
  3373  0310                     	;# 
  3374  0311                     	;# 
  3375  0312                     	;# 
  3376  0313                     	;# 
  3377  0314                     	;# 
  3378  0314                     	;# 
  3379  0315                     	;# 
  3380  0316                     	;# 
  3381  0317                     	;# 
  3382  0318                     	;# 
  3383  0318                     	;# 
  3384  0319                     	;# 
  3385  031A                     	;# 
  3386  031B                     	;# 
  3387  031C                     	;# 
  3388  031C                     	;# 
  3389  031D                     	;# 
  3390  031E                     	;# 
  3391  031F                     	;# 
  3392  038C                     	;# 
  3393  038D                     	;# 
  3394  038E                     	;# 
  3395  0390                     	;# 
  3396  0391                     	;# 
  3397  0392                     	;# 
  3398  040C                     	;# 
  3399  040D                     	;# 
  3400  040E                     	;# 
  3401  040F                     	;# 
  3402  0410                     	;# 
  3403  0411                     	;# 
  3404  0416                     	;# 
  3405  0416                     	;# 
  3406  0417                     	;# 
  3407  0418                     	;# 
  3408  0418                     	;# 
  3409  0419                     	;# 
  3410  041A                     	;# 
  3411  041A                     	;# 
  3412  041B                     	;# 
  3413  041C                     	;# 
  3414  041C                     	;# 
  3415  041D                     	;# 
  3416  041E                     	;# 
  3417  041F                     	;# 
  3418  048C                     	;# 
  3419  048C                     	;# 
  3420  048D                     	;# 
  3421  048E                     	;# 
  3422  048F                     	;# 
  3423  048F                     	;# 
  3424  0490                     	;# 
  3425  0491                     	;# 
  3426  0492                     	;# 
  3427  0492                     	;# 
  3428  0493                     	;# 
  3429  0494                     	;# 
  3430  0495                     	;# 
  3431  0495                     	;# 
  3432  0496                     	;# 
  3433  0497                     	;# 
  3434  0498                     	;# 
  3435  0499                     	;# 
  3436  049A                     	;# 
  3437  049B                     	;# 
  3438  049C                     	;# 
  3439  049D                     	;# 
  3440  050C                     	;# 
  3441  050C                     	;# 
  3442  050D                     	;# 
  3443  050E                     	;# 
  3444  050F                     	;# 
  3445  050F                     	;# 
  3446  0510                     	;# 
  3447  0511                     	;# 
  3448  0512                     	;# 
  3449  0512                     	;# 
  3450  0513                     	;# 
  3451  0514                     	;# 
  3452  0515                     	;# 
  3453  0515                     	;# 
  3454  0516                     	;# 
  3455  0517                     	;# 
  3456  0518                     	;# 
  3457  0519                     	;# 
  3458  051A                     	;# 
  3459  051B                     	;# 
  3460  051C                     	;# 
  3461  051D                     	;# 
  3462  058C                     	;# 
  3463  058C                     	;# 
  3464  058D                     	;# 
  3465  058E                     	;# 
  3466  058F                     	;# 
  3467  058F                     	;# 
  3468  0590                     	;# 
  3469  0591                     	;# 
  3470  0592                     	;# 
  3471  0593                     	;# 
  3472  060C                     	;# 
  3473  060D                     	;# 
  3474  060E                     	;# 
  3475  060F                     	;# 
  3476  0610                     	;# 
  3477  0611                     	;# 
  3478  0612                     	;# 
  3479  0613                     	;# 
  3480  0614                     	;# 
  3481  0616                     	;# 
  3482  0617                     	;# 
  3483  0618                     	;# 
  3484  0619                     	;# 
  3485  061A                     	;# 
  3486  061B                     	;# 
  3487  061C                     	;# 
  3488  061D                     	;# 
  3489  061E                     	;# 
  3490  068C                     	;# 
  3491  068D                     	;# 
  3492  068E                     	;# 
  3493  068F                     	;# 
  3494  0690                     	;# 
  3495  0691                     	;# 
  3496  0692                     	;# 
  3497  0693                     	;# 
  3498  0694                     	;# 
  3499  070C                     	;# 
  3500  070D                     	;# 
  3501  070E                     	;# 
  3502  070F                     	;# 
  3503  0710                     	;# 
  3504  0711                     	;# 
  3505  0712                     	;# 
  3506  0713                     	;# 
  3507  0714                     	;# 
  3508  0716                     	;# 
  3509  0717                     	;# 
  3510  0718                     	;# 
  3511  0719                     	;# 
  3512  071A                     	;# 
  3513  071B                     	;# 
  3514  071C                     	;# 
  3515  071D                     	;# 
  3516  071E                     	;# 
  3517  0796                     	;# 
  3518  0797                     	;# 
  3519  0798                     	;# 
  3520  0799                     	;# 
  3521  079A                     	;# 
  3522  079B                     	;# 
  3523  080C                     	;# 
  3524  080D                     	;# 
  3525  080E                     	;# 
  3526  080F                     	;# 
  3527  0810                     	;# 
  3528  0811                     	;# 
  3529  0812                     	;# 
  3530  0813                     	;# 
  3531  0814                     	;# 
  3532  081A                     	;# 
  3533  081B                     	;# 
  3534  081C                     	;# 
  3535  081D                     	;# 
  3536  081E                     	;# 
  3537  081F                     	;# 
  3538  088C                     	;# 
  3539  088D                     	;# 
  3540  088E                     	;# 
  3541  088F                     	;# 
  3542  0890                     	;# 
  3543  0891                     	;# 
  3544  0892                     	;# 
  3545  0893                     	;# 
  3546  0895                     	;# 
  3547  0896                     	;# 
  3548  0897                     	;# 
  3549  0898                     	;# 
  3550  0899                     	;# 
  3551  089A                     	;# 
  3552  089B                     	;# 
  3553  090C                     	;# 
  3554  090E                     	;# 
  3555  090F                     	;# 
  3556  091F                     	;# 
  3557  091F                     	;# 
  3558  098F                     	;# 
  3559  098F                     	;# 
  3560  0990                     	;# 
  3561  0991                     	;# 
  3562  0992                     	;# 
  3563  0993                     	;# 
  3564  0994                     	;# 
  3565  0995                     	;# 
  3566  0996                     	;# 
  3567  0997                     	;# 
  3568  0E0F                     	;# 
  3569  0E10                     	;# 
  3570  0E11                     	;# 
  3571  0E12                     	;# 
  3572  0E13                     	;# 
  3573  0E14                     	;# 
  3574  0E15                     	;# 
  3575  0E16                     	;# 
  3576  0E17                     	;# 
  3577  0E18                     	;# 
  3578  0E19                     	;# 
  3579  0E1A                     	;# 
  3580  0E1B                     	;# 
  3581  0E1C                     	;# 
  3582  0E1D                     	;# 
  3583  0E1E                     	;# 
  3584  0E1F                     	;# 
  3585  0E20                     	;# 
  3586  0E21                     	;# 
  3587  0E22                     	;# 
  3588  0E23                     	;# 
  3589  0E24                     	;# 
  3590  0E25                     	;# 
  3591  0E26                     	;# 
  3592  0E27                     	;# 
  3593  0E28                     	;# 
  3594  0E29                     	;# 
  3595  0E2A                     	;# 
  3596  0E2B                     	;# 
  3597  0E2C                     	;# 
  3598  0E2D                     	;# 
  3599  0E2E                     	;# 
  3600  0E2F                     	;# 
  3601  0E30                     	;# 
  3602  0E31                     	;# 
  3603  0E32                     	;# 
  3604  0E33                     	;# 
  3605  0E34                     	;# 
  3606  0E35                     	;# 
  3607  0E36                     	;# 
  3608  0E37                     	;# 
  3609  0E8F                     	;# 
  3610  0E90                     	;# 
  3611  0E91                     	;# 
  3612  0E92                     	;# 
  3613  0E93                     	;# 
  3614  0E94                     	;# 
  3615  0E95                     	;# 
  3616  0E96                     	;# 
  3617  0E97                     	;# 
  3618  0E9C                     	;# 
  3619  0E9D                     	;# 
  3620  0E9E                     	;# 
  3621  0EA1                     	;# 
  3622  0EA2                     	;# 
  3623  0EA3                     	;# 
  3624  0EA4                     	;# 
  3625  0EA5                     	;# 
  3626  0EA9                     	;# 
  3627  0EAA                     	;# 
  3628  0EAB                     	;# 
  3629  0EAC                     	;# 
  3630  0EB1                     	;# 
  3631  0EB2                     	;# 
  3632  0EB3                     	;# 
  3633  0EB8                     	;# 
  3634  0EB9                     	;# 
  3635  0EBA                     	;# 
  3636  0EBB                     	;# 
  3637  0EBC                     	;# 
  3638  0EBD                     	;# 
  3639  0EBE                     	;# 
  3640  0EC3                     	;# 
  3641  0EC5                     	;# 
  3642  0EC6                     	;# 
  3643  0EC7                     	;# 
  3644  0EC8                     	;# 
  3645  0EC9                     	;# 
  3646  0ECA                     	;# 
  3647  0ECB                     	;# 
  3648  0ECC                     	;# 
  3649  0F10                     	;# 
  3650  0F11                     	;# 
  3651  0F12                     	;# 
  3652  0F13                     	;# 
  3653  0F14                     	;# 
  3654  0F15                     	;# 
  3655  0F16                     	;# 
  3656  0F17                     	;# 
  3657  0F18                     	;# 
  3658  0F19                     	;# 
  3659  0F1A                     	;# 
  3660  0F1B                     	;# 
  3661  0F1C                     	;# 
  3662  0F1D                     	;# 
  3663  0F1E                     	;# 
  3664  0F1F                     	;# 
  3665  0F20                     	;# 
  3666  0F21                     	;# 
  3667  0F22                     	;# 
  3668  0F23                     	;# 
  3669  0F24                     	;# 
  3670  0F25                     	;# 
  3671  0F26                     	;# 
  3672  0F27                     	;# 
  3673  0F38                     	;# 
  3674  0F39                     	;# 
  3675  0F3A                     	;# 
  3676  0F3B                     	;# 
  3677  0F3C                     	;# 
  3678  0F3D                     	;# 
  3679  0F3E                     	;# 
  3680  0F3F                     	;# 
  3681  0F40                     	;# 
  3682  0F41                     	;# 
  3683  0F43                     	;# 
  3684  0F44                     	;# 
  3685  0F45                     	;# 
  3686  0F46                     	;# 
  3687  0F47                     	;# 
  3688  0F48                     	;# 
  3689  0F49                     	;# 
  3690  0F4A                     	;# 
  3691  0F4B                     	;# 
  3692  0F4C                     	;# 
  3693  0F4E                     	;# 
  3694  0F4F                     	;# 
  3695  0F50                     	;# 
  3696  0F51                     	;# 
  3697  0F52                     	;# 
  3698  0F53                     	;# 
  3699  0F54                     	;# 
  3700  0F55                     	;# 
  3701  0F56                     	;# 
  3702  0F57                     	;# 
  3703  0F65                     	;# 
  3704  0F68                     	;# 
  3705  0F69                     	;# 
  3706  0F6A                     	;# 
  3707  0F6B                     	;# 
  3708  0FE4                     	;# 
  3709  0FE5                     	;# 
  3710  0FE6                     	;# 
  3711  0FE7                     	;# 
  3712  0FE8                     	;# 
  3713  0FE9                     	;# 
  3714  0FEA                     	;# 
  3715  0FEB                     	;# 
  3716  0FED                     	;# 
  3717  0FEE                     	;# 
  3718  0FEF                     	;# 
  3719  0000                     	;# 
  3720  0001                     	;# 
  3721  0002                     	;# 
  3722  0003                     	;# 
  3723  0004                     	;# 
  3724  0005                     	;# 
  3725  0006                     	;# 
  3726  0007                     	;# 
  3727  0008                     	;# 
  3728  0009                     	;# 
  3729  000A                     	;# 
  3730  000B                     	;# 
  3731  000C                     	;# 
  3732  000D                     	;# 
  3733  000E                     	;# 
  3734  0010                     	;# 
  3735  0011                     	;# 
  3736  0012                     	;# 
  3737  0013                     	;# 
  3738  0016                     	;# 
  3739  0017                     	;# 
  3740  0018                     	;# 
  3741  001C                     	;# 
  3742  001C                     	;# 
  3743  001D                     	;# 
  3744  001D                     	;# 
  3745  001E                     	;# 
  3746  001F                     	;# 
  3747  008C                     	;# 
  3748  008C                     	;# 
  3749  008D                     	;# 
  3750  008E                     	;# 
  3751  008E                     	;# 
  3752  008F                     	;# 
  3753  0090                     	;# 
  3754  0090                     	;# 
  3755  0091                     	;# 
  3756  0093                     	;# 
  3757  0094                     	;# 
  3758  0095                     	;# 
  3759  0096                     	;# 
  3760  0097                     	;# 
  3761  0098                     	;# 
  3762  0099                     	;# 
  3763  009A                     	;# 
  3764  009B                     	;# 
  3765  009C                     	;# 
  3766  009D                     	;# 
  3767  009E                     	;# 
  3768  010C                     	;# 
  3769  010D                     	;# 
  3770  010E                     	;# 
  3771  010E                     	;# 
  3772  010F                     	;# 
  3773  0110                     	;# 
  3774  0110                     	;# 
  3775  0111                     	;# 
  3776  0112                     	;# 
  3777  0112                     	;# 
  3778  0113                     	;# 
  3779  0114                     	;# 
  3780  0114                     	;# 
  3781  0115                     	;# 
  3782  0116                     	;# 
  3783  0116                     	;# 
  3784  0117                     	;# 
  3785  0119                     	;# 
  3786  0119                     	;# 
  3787  0119                     	;# 
  3788  011A                     	;# 
  3789  011A                     	;# 
  3790  011A                     	;# 
  3791  011B                     	;# 
  3792  011B                     	;# 
  3793  011B                     	;# 
  3794  011B                     	;# 
  3795  011B                     	;# 
  3796  011C                     	;# 
  3797  011C                     	;# 
  3798  011C                     	;# 
  3799  011D                     	;# 
  3800  011D                     	;# 
  3801  011D                     	;# 
  3802  011E                     	;# 
  3803  011E                     	;# 
  3804  011E                     	;# 
  3805  011F                     	;# 
  3806  011F                     	;# 
  3807  011F                     	;# 
  3808  011F                     	;# 
  3809  011F                     	;# 
  3810  018C                     	;# 
  3811  018D                     	;# 
  3812  018E                     	;# 
  3813  018F                     	;# 
  3814  0190                     	;# 
  3815  0191                     	;# 
  3816  0192                     	;# 
  3817  0196                     	;# 
  3818  0197                     	;# 
  3819  0198                     	;# 
  3820  0199                     	;# 
  3821  019A                     	;# 
  3822  019B                     	;# 
  3823  019C                     	;# 
  3824  020C                     	;# 
  3825  020C                     	;# 
  3826  020D                     	;# 
  3827  020E                     	;# 
  3828  020F                     	;# 
  3829  020F                     	;# 
  3830  0210                     	;# 
  3831  0210                     	;# 
  3832  0211                     	;# 
  3833  0211                     	;# 
  3834  0212                     	;# 
  3835  0212                     	;# 
  3836  0213                     	;# 
  3837  0214                     	;# 
  3838  0215                     	;# 
  3839  0215                     	;# 
  3840  0216                     	;# 
  3841  0216                     	;# 
  3842  0217                     	;# 
  3843  0217                     	;# 
  3844  0218                     	;# 
  3845  0218                     	;# 
  3846  0219                     	;# 
  3847  021A                     	;# 
  3848  021B                     	;# 
  3849  021B                     	;# 
  3850  021C                     	;# 
  3851  021C                     	;# 
  3852  021D                     	;# 
  3853  021D                     	;# 
  3854  021E                     	;# 
  3855  021F                     	;# 
  3856  028C                     	;# 
  3857  028C                     	;# 
  3858  028D                     	;# 
  3859  028D                     	;# 
  3860  028E                     	;# 
  3861  028F                     	;# 
  3862  0290                     	;# 
  3863  0290                     	;# 
  3864  0291                     	;# 
  3865  0292                     	;# 
  3866  0292                     	;# 
  3867  0293                     	;# 
  3868  0293                     	;# 
  3869  0294                     	;# 
  3870  0295                     	;# 
  3871  0296                     	;# 
  3872  0296                     	;# 
  3873  0297                     	;# 
  3874  0298                     	;# 
  3875  0298                     	;# 
  3876  0299                     	;# 
  3877  0299                     	;# 
  3878  029A                     	;# 
  3879  029B                     	;# 
  3880  029C                     	;# 
  3881  029C                     	;# 
  3882  029D                     	;# 
  3883  030C                     	;# 
  3884  030C                     	;# 
  3885  030D                     	;# 
  3886  030E                     	;# 
  3887  030F                     	;# 
  3888  0310                     	;# 
  3889  0310                     	;# 
  3890  0311                     	;# 
  3891  0312                     	;# 
  3892  0313                     	;# 
  3893  0314                     	;# 
  3894  0314                     	;# 
  3895  0315                     	;# 
  3896  0316                     	;# 
  3897  0317                     	;# 
  3898  0318                     	;# 
  3899  0318                     	;# 
  3900  0319                     	;# 
  3901  031A                     	;# 
  3902  031B                     	;# 
  3903  031C                     	;# 
  3904  031C                     	;# 
  3905  031D                     	;# 
  3906  031E                     	;# 
  3907  031F                     	;# 
  3908  038C                     	;# 
  3909  038D                     	;# 
  3910  038E                     	;# 
  3911  0390                     	;# 
  3912  0391                     	;# 
  3913  0392                     	;# 
  3914  040C                     	;# 
  3915  040D                     	;# 
  3916  040E                     	;# 
  3917  040F                     	;# 
  3918  0410                     	;# 
  3919  0411                     	;# 
  3920  0416                     	;# 
  3921  0416                     	;# 
  3922  0417                     	;# 
  3923  0418                     	;# 
  3924  0418                     	;# 
  3925  0419                     	;# 
  3926  041A                     	;# 
  3927  041A                     	;# 
  3928  041B                     	;# 
  3929  041C                     	;# 
  3930  041C                     	;# 
  3931  041D                     	;# 
  3932  041E                     	;# 
  3933  041F                     	;# 
  3934  048C                     	;# 
  3935  048C                     	;# 
  3936  048D                     	;# 
  3937  048E                     	;# 
  3938  048F                     	;# 
  3939  048F                     	;# 
  3940  0490                     	;# 
  3941  0491                     	;# 
  3942  0492                     	;# 
  3943  0492                     	;# 
  3944  0493                     	;# 
  3945  0494                     	;# 
  3946  0495                     	;# 
  3947  0495                     	;# 
  3948  0496                     	;# 
  3949  0497                     	;# 
  3950  0498                     	;# 
  3951  0499                     	;# 
  3952  049A                     	;# 
  3953  049B                     	;# 
  3954  049C                     	;# 
  3955  049D                     	;# 
  3956  050C                     	;# 
  3957  050C                     	;# 
  3958  050D                     	;# 
  3959  050E                     	;# 
  3960  050F                     	;# 
  3961  050F                     	;# 
  3962  0510                     	;# 
  3963  0511                     	;# 
  3964  0512                     	;# 
  3965  0512                     	;# 
  3966  0513                     	;# 
  3967  0514                     	;# 
  3968  0515                     	;# 
  3969  0515                     	;# 
  3970  0516                     	;# 
  3971  0517                     	;# 
  3972  0518                     	;# 
  3973  0519                     	;# 
  3974  051A                     	;# 
  3975  051B                     	;# 
  3976  051C                     	;# 
  3977  051D                     	;# 
  3978  058C                     	;# 
  3979  058C                     	;# 
  3980  058D                     	;# 
  3981  058E                     	;# 
  3982  058F                     	;# 
  3983  058F                     	;# 
  3984  0590                     	;# 
  3985  0591                     	;# 
  3986  0592                     	;# 
  3987  0593                     	;# 
  3988  060C                     	;# 
  3989  060D                     	;# 
  3990  060E                     	;# 
  3991  060F                     	;# 
  3992  0610                     	;# 
  3993  0611                     	;# 
  3994  0612                     	;# 
  3995  0613                     	;# 
  3996  0614                     	;# 
  3997  0616                     	;# 
  3998  0617                     	;# 
  3999  0618                     	;# 
  4000  0619                     	;# 
  4001  061A                     	;# 
  4002  061B                     	;# 
  4003  061C                     	;# 
  4004  061D                     	;# 
  4005  061E                     	;# 
  4006  068C                     	;# 
  4007  068D                     	;# 
  4008  068E                     	;# 
  4009  068F                     	;# 
  4010  0690                     	;# 
  4011  0691                     	;# 
  4012  0692                     	;# 
  4013  0693                     	;# 
  4014  0694                     	;# 
  4015  070C                     	;# 
  4016  070D                     	;# 
  4017  070E                     	;# 
  4018  070F                     	;# 
  4019  0710                     	;# 
  4020  0711                     	;# 
  4021  0712                     	;# 
  4022  0713                     	;# 
  4023  0714                     	;# 
  4024  0716                     	;# 
  4025  0717                     	;# 
  4026  0718                     	;# 
  4027  0719                     	;# 
  4028  071A                     	;# 
  4029  071B                     	;# 
  4030  071C                     	;# 
  4031  071D                     	;# 
  4032  071E                     	;# 
  4033  0796                     	;# 
  4034  0797                     	;# 
  4035  0798                     	;# 
  4036  0799                     	;# 
  4037  079A                     	;# 
  4038  079B                     	;# 
  4039  080C                     	;# 
  4040  080D                     	;# 
  4041  080E                     	;# 
  4042  080F                     	;# 
  4043  0810                     	;# 
  4044  0811                     	;# 
  4045  0812                     	;# 
  4046  0813                     	;# 
  4047  0814                     	;# 
  4048  081A                     	;# 
  4049  081B                     	;# 
  4050  081C                     	;# 
  4051  081D                     	;# 
  4052  081E                     	;# 
  4053  081F                     	;# 
  4054  088C                     	;# 
  4055  088D                     	;# 
  4056  088E                     	;# 
  4057  088F                     	;# 
  4058  0890                     	;# 
  4059  0891                     	;# 
  4060  0892                     	;# 
  4061  0893                     	;# 
  4062  0895                     	;# 
  4063  0896                     	;# 
  4064  0897                     	;# 
  4065  0898                     	;# 
  4066  0899                     	;# 
  4067  089A                     	;# 
  4068  089B                     	;# 
  4069  090C                     	;# 
  4070  090E                     	;# 
  4071  090F                     	;# 
  4072  091F                     	;# 
  4073  091F                     	;# 
  4074  098F                     	;# 
  4075  098F                     	;# 
  4076  0990                     	;# 
  4077  0991                     	;# 
  4078  0992                     	;# 
  4079  0993                     	;# 
  4080  0994                     	;# 
  4081  0995                     	;# 
  4082  0996                     	;# 
  4083  0997                     	;# 
  4084  0E0F                     	;# 
  4085  0E10                     	;# 
  4086  0E11                     	;# 
  4087  0E12                     	;# 
  4088  0E13                     	;# 
  4089  0E14                     	;# 
  4090  0E15                     	;# 
  4091  0E16                     	;# 
  4092  0E17                     	;# 
  4093  0E18                     	;# 
  4094  0E19                     	;# 
  4095  0E1A                     	;# 
  4096  0E1B                     	;# 
  4097  0E1C                     	;# 
  4098  0E1D                     	;# 
  4099  0E1E                     	;# 
  4100  0E1F                     	;# 
  4101  0E20                     	;# 
  4102  0E21                     	;# 
  4103  0E22                     	;# 
  4104  0E23                     	;# 
  4105  0E24                     	;# 
  4106  0E25                     	;# 
  4107  0E26                     	;# 
  4108  0E27                     	;# 
  4109  0E28                     	;# 
  4110  0E29                     	;# 
  4111  0E2A                     	;# 
  4112  0E2B                     	;# 
  4113  0E2C                     	;# 
  4114  0E2D                     	;# 
  4115  0E2E                     	;# 
  4116  0E2F                     	;# 
  4117  0E30                     	;# 
  4118  0E31                     	;# 
  4119  0E32                     	;# 
  4120  0E33                     	;# 
  4121  0E34                     	;# 
  4122  0E35                     	;# 
  4123  0E36                     	;# 
  4124  0E37                     	;# 
  4125  0E8F                     	;# 
  4126  0E90                     	;# 
  4127  0E91                     	;# 
  4128  0E92                     	;# 
  4129  0E93                     	;# 
  4130  0E94                     	;# 
  4131  0E95                     	;# 
  4132  0E96                     	;# 
  4133  0E97                     	;# 
  4134  0E9C                     	;# 
  4135  0E9D                     	;# 
  4136  0E9E                     	;# 
  4137  0EA1                     	;# 
  4138  0EA2                     	;# 
  4139  0EA3                     	;# 
  4140  0EA4                     	;# 
  4141  0EA5                     	;# 
  4142  0EA9                     	;# 
  4143  0EAA                     	;# 
  4144  0EAB                     	;# 
  4145  0EAC                     	;# 
  4146  0EB1                     	;# 
  4147  0EB2                     	;# 
  4148  0EB3                     	;# 
  4149  0EB8                     	;# 
  4150  0EB9                     	;# 
  4151  0EBA                     	;# 
  4152  0EBB                     	;# 
  4153  0EBC                     	;# 
  4154  0EBD                     	;# 
  4155  0EBE                     	;# 
  4156  0EC3                     	;# 
  4157  0EC5                     	;# 
  4158  0EC6                     	;# 
  4159  0EC7                     	;# 
  4160  0EC8                     	;# 
  4161  0EC9                     	;# 
  4162  0ECA                     	;# 
  4163  0ECB                     	;# 
  4164  0ECC                     	;# 
  4165  0F10                     	;# 
  4166  0F11                     	;# 
  4167  0F12                     	;# 
  4168  0F13                     	;# 
  4169  0F14                     	;# 
  4170  0F15                     	;# 
  4171  0F16                     	;# 
  4172  0F17                     	;# 
  4173  0F18                     	;# 
  4174  0F19                     	;# 
  4175  0F1A                     	;# 
  4176  0F1B                     	;# 
  4177  0F1C                     	;# 
  4178  0F1D                     	;# 
  4179  0F1E                     	;# 
  4180  0F1F                     	;# 
  4181  0F20                     	;# 
  4182  0F21                     	;# 
  4183  0F22                     	;# 
  4184  0F23                     	;# 
  4185  0F24                     	;# 
  4186  0F25                     	;# 
  4187  0F26                     	;# 
  4188  0F27                     	;# 
  4189  0F38                     	;# 
  4190  0F39                     	;# 
  4191  0F3A                     	;# 
  4192  0F3B                     	;# 
  4193  0F3C                     	;# 
  4194  0F3D                     	;# 
  4195  0F3E                     	;# 
  4196  0F3F                     	;# 
  4197  0F40                     	;# 
  4198  0F41                     	;# 
  4199  0F43                     	;# 
  4200  0F44                     	;# 
  4201  0F45                     	;# 
  4202  0F46                     	;# 
  4203  0F47                     	;# 
  4204  0F48                     	;# 
  4205  0F49                     	;# 
  4206  0F4A                     	;# 
  4207  0F4B                     	;# 
  4208  0F4C                     	;# 
  4209  0F4E                     	;# 
  4210  0F4F                     	;# 
  4211  0F50                     	;# 
  4212  0F51                     	;# 
  4213  0F52                     	;# 
  4214  0F53                     	;# 
  4215  0F54                     	;# 
  4216  0F55                     	;# 
  4217  0F56                     	;# 
  4218  0F57                     	;# 
  4219  0F65                     	;# 
  4220  0F68                     	;# 
  4221  0F69                     	;# 
  4222  0F6A                     	;# 
  4223  0F6B                     	;# 
  4224  0FE4                     	;# 
  4225  0FE5                     	;# 
  4226  0FE6                     	;# 
  4227  0FE7                     	;# 
  4228  0FE8                     	;# 
  4229  0FE9                     	;# 
  4230  0FEA                     	;# 
  4231  0FEB                     	;# 
  4232  0FED                     	;# 
  4233  0FEE                     	;# 
  4234  0FEF                     	;# 
  4235  0000                     	;# 
  4236  0001                     	;# 
  4237  0002                     	;# 
  4238  0003                     	;# 
  4239  0004                     	;# 
  4240  0005                     	;# 
  4241  0006                     	;# 
  4242  0007                     	;# 
  4243  0008                     	;# 
  4244  0009                     	;# 
  4245  000A                     	;# 
  4246  000B                     	;# 
  4247  000C                     	;# 
  4248  000D                     	;# 
  4249  000E                     	;# 
  4250  0010                     	;# 
  4251  0011                     	;# 
  4252  0012                     	;# 
  4253  0013                     	;# 
  4254  0016                     	;# 
  4255  0017                     	;# 
  4256  0018                     	;# 
  4257  001C                     	;# 
  4258  001C                     	;# 
  4259  001D                     	;# 
  4260  001D                     	;# 
  4261  001E                     	;# 
  4262  001F                     	;# 
  4263  008C                     	;# 
  4264  008C                     	;# 
  4265  008D                     	;# 
  4266  008E                     	;# 
  4267  008E                     	;# 
  4268  008F                     	;# 
  4269  0090                     	;# 
  4270  0090                     	;# 
  4271  0091                     	;# 
  4272  0093                     	;# 
  4273  0094                     	;# 
  4274  0095                     	;# 
  4275  0096                     	;# 
  4276  0097                     	;# 
  4277  0098                     	;# 
  4278  0099                     	;# 
  4279  009A                     	;# 
  4280  009B                     	;# 
  4281  009C                     	;# 
  4282  009D                     	;# 
  4283  009E                     	;# 
  4284  010C                     	;# 
  4285  010D                     	;# 
  4286  010E                     	;# 
  4287  010E                     	;# 
  4288  010F                     	;# 
  4289  0110                     	;# 
  4290  0110                     	;# 
  4291  0111                     	;# 
  4292  0112                     	;# 
  4293  0112                     	;# 
  4294  0113                     	;# 
  4295  0114                     	;# 
  4296  0114                     	;# 
  4297  0115                     	;# 
  4298  0116                     	;# 
  4299  0116                     	;# 
  4300  0117                     	;# 
  4301  0119                     	;# 
  4302  0119                     	;# 
  4303  0119                     	;# 
  4304  011A                     	;# 
  4305  011A                     	;# 
  4306  011A                     	;# 
  4307  011B                     	;# 
  4308  011B                     	;# 
  4309  011B                     	;# 
  4310  011B                     	;# 
  4311  011B                     	;# 
  4312  011C                     	;# 
  4313  011C                     	;# 
  4314  011C                     	;# 
  4315  011D                     	;# 
  4316  011D                     	;# 
  4317  011D                     	;# 
  4318  011E                     	;# 
  4319  011E                     	;# 
  4320  011E                     	;# 
  4321  011F                     	;# 
  4322  011F                     	;# 
  4323  011F                     	;# 
  4324  011F                     	;# 
  4325  011F                     	;# 
  4326  018C                     	;# 
  4327  018D                     	;# 
  4328  018E                     	;# 
  4329  018F                     	;# 
  4330  0190                     	;# 
  4331  0191                     	;# 
  4332  0192                     	;# 
  4333  0196                     	;# 
  4334  0197                     	;# 
  4335  0198                     	;# 
  4336  0199                     	;# 
  4337  019A                     	;# 
  4338  019B                     	;# 
  4339  019C                     	;# 
  4340  020C                     	;# 
  4341  020C                     	;# 
  4342  020D                     	;# 
  4343  020E                     	;# 
  4344  020F                     	;# 
  4345  020F                     	;# 
  4346  0210                     	;# 
  4347  0210                     	;# 
  4348  0211                     	;# 
  4349  0211                     	;# 
  4350  0212                     	;# 
  4351  0212                     	;# 
  4352  0213                     	;# 
  4353  0214                     	;# 
  4354  0215                     	;# 
  4355  0215                     	;# 
  4356  0216                     	;# 
  4357  0216                     	;# 
  4358  0217                     	;# 
  4359  0217                     	;# 
  4360  0218                     	;# 
  4361  0218                     	;# 
  4362  0219                     	;# 
  4363  021A                     	;# 
  4364  021B                     	;# 
  4365  021B                     	;# 
  4366  021C                     	;# 
  4367  021C                     	;# 
  4368  021D                     	;# 
  4369  021D                     	;# 
  4370  021E                     	;# 
  4371  021F                     	;# 
  4372  028C                     	;# 
  4373  028C                     	;# 
  4374  028D                     	;# 
  4375  028D                     	;# 
  4376  028E                     	;# 
  4377  028F                     	;# 
  4378  0290                     	;# 
  4379  0290                     	;# 
  4380  0291                     	;# 
  4381  0292                     	;# 
  4382  0292                     	;# 
  4383  0293                     	;# 
  4384  0293                     	;# 
  4385  0294                     	;# 
  4386  0295                     	;# 
  4387  0296                     	;# 
  4388  0296                     	;# 
  4389  0297                     	;# 
  4390  0298                     	;# 
  4391  0298                     	;# 
  4392  0299                     	;# 
  4393  0299                     	;# 
  4394  029A                     	;# 
  4395  029B                     	;# 
  4396  029C                     	;# 
  4397  029C                     	;# 
  4398  029D                     	;# 
  4399  030C                     	;# 
  4400  030C                     	;# 
  4401  030D                     	;# 
  4402  030E                     	;# 
  4403  030F                     	;# 
  4404  0310                     	;# 
  4405  0310                     	;# 
  4406  0311                     	;# 
  4407  0312                     	;# 
  4408  0313                     	;# 
  4409  0314                     	;# 
  4410  0314                     	;# 
  4411  0315                     	;# 
  4412  0316                     	;# 
  4413  0317                     	;# 
  4414  0318                     	;# 
  4415  0318                     	;# 
  4416  0319                     	;# 
  4417  031A                     	;# 
  4418  031B                     	;# 
  4419  031C                     	;# 
  4420  031C                     	;# 
  4421  031D                     	;# 
  4422  031E                     	;# 
  4423  031F                     	;# 
  4424  038C                     	;# 
  4425  038D                     	;# 
  4426  038E                     	;# 
  4427  0390                     	;# 
  4428  0391                     	;# 
  4429  0392                     	;# 
  4430  040C                     	;# 
  4431  040D                     	;# 
  4432  040E                     	;# 
  4433  040F                     	;# 
  4434  0410                     	;# 
  4435  0411                     	;# 
  4436  0416                     	;# 
  4437  0416                     	;# 
  4438  0417                     	;# 
  4439  0418                     	;# 
  4440  0418                     	;# 
  4441  0419                     	;# 
  4442  041A                     	;# 
  4443  041A                     	;# 
  4444  041B                     	;# 
  4445  041C                     	;# 
  4446  041C                     	;# 
  4447  041D                     	;# 
  4448  041E                     	;# 
  4449  041F                     	;# 
  4450  048C                     	;# 
  4451  048C                     	;# 
  4452  048D                     	;# 
  4453  048E                     	;# 
  4454  048F                     	;# 
  4455  048F                     	;# 
  4456  0490                     	;# 
  4457  0491                     	;# 
  4458  0492                     	;# 
  4459  0492                     	;# 
  4460  0493                     	;# 
  4461  0494                     	;# 
  4462  0495                     	;# 
  4463  0495                     	;# 
  4464  0496                     	;# 
  4465  0497                     	;# 
  4466  0498                     	;# 
  4467  0499                     	;# 
  4468  049A                     	;# 
  4469  049B                     	;# 
  4470  049C                     	;# 
  4471  049D                     	;# 
  4472  050C                     	;# 
  4473  050C                     	;# 
  4474  050D                     	;# 
  4475  050E                     	;# 
  4476  050F                     	;# 
  4477  050F                     	;# 
  4478  0510                     	;# 
  4479  0511                     	;# 
  4480  0512                     	;# 
  4481  0512                     	;# 
  4482  0513                     	;# 
  4483  0514                     	;# 
  4484  0515                     	;# 
  4485  0515                     	;# 
  4486  0516                     	;# 
  4487  0517                     	;# 
  4488  0518                     	;# 
  4489  0519                     	;# 
  4490  051A                     	;# 
  4491  051B                     	;# 
  4492  051C                     	;# 
  4493  051D                     	;# 
  4494  058C                     	;# 
  4495  058C                     	;# 
  4496  058D                     	;# 
  4497  058E                     	;# 
  4498  058F                     	;# 
  4499  058F                     	;# 
  4500  0590                     	;# 
  4501  0591                     	;# 
  4502  0592                     	;# 
  4503  0593                     	;# 
  4504  060C                     	;# 
  4505  060D                     	;# 
  4506  060E                     	;# 
  4507  060F                     	;# 
  4508  0610                     	;# 
  4509  0611                     	;# 
  4510  0612                     	;# 
  4511  0613                     	;# 
  4512  0614                     	;# 
  4513  0616                     	;# 
  4514  0617                     	;# 
  4515  0618                     	;# 
  4516  0619                     	;# 
  4517  061A                     	;# 
  4518  061B                     	;# 
  4519  061C                     	;# 
  4520  061D                     	;# 
  4521  061E                     	;# 
  4522  068C                     	;# 
  4523  068D                     	;# 
  4524  068E                     	;# 
  4525  068F                     	;# 
  4526  0690                     	;# 
  4527  0691                     	;# 
  4528  0692                     	;# 
  4529  0693                     	;# 
  4530  0694                     	;# 
  4531  070C                     	;# 
  4532  070D                     	;# 
  4533  070E                     	;# 
  4534  070F                     	;# 
  4535  0710                     	;# 
  4536  0711                     	;# 
  4537  0712                     	;# 
  4538  0713                     	;# 
  4539  0714                     	;# 
  4540  0716                     	;# 
  4541  0717                     	;# 
  4542  0718                     	;# 
  4543  0719                     	;# 
  4544  071A                     	;# 
  4545  071B                     	;# 
  4546  071C                     	;# 
  4547  071D                     	;# 
  4548  071E                     	;# 
  4549  0796                     	;# 
  4550  0797                     	;# 
  4551  0798                     	;# 
  4552  0799                     	;# 
  4553  079A                     	;# 
  4554  079B                     	;# 
  4555  080C                     	;# 
  4556  080D                     	;# 
  4557  080E                     	;# 
  4558  080F                     	;# 
  4559  0810                     	;# 
  4560  0811                     	;# 
  4561  0812                     	;# 
  4562  0813                     	;# 
  4563  0814                     	;# 
  4564  081A                     	;# 
  4565  081B                     	;# 
  4566  081C                     	;# 
  4567  081D                     	;# 
  4568  081E                     	;# 
  4569  081F                     	;# 
  4570  088C                     	;# 
  4571  088D                     	;# 
  4572  088E                     	;# 
  4573  088F                     	;# 
  4574  0890                     	;# 
  4575  0891                     	;# 
  4576  0892                     	;# 
  4577  0893                     	;# 
  4578  0895                     	;# 
  4579  0896                     	;# 
  4580  0897                     	;# 
  4581  0898                     	;# 
  4582  0899                     	;# 
  4583  089A                     	;# 
  4584  089B                     	;# 
  4585  090C                     	;# 
  4586  090E                     	;# 
  4587  090F                     	;# 
  4588  091F                     	;# 
  4589  091F                     	;# 
  4590  098F                     	;# 
  4591  098F                     	;# 
  4592  0990                     	;# 
  4593  0991                     	;# 
  4594  0992                     	;# 
  4595  0993                     	;# 
  4596  0994                     	;# 
  4597  0995                     	;# 
  4598  0996                     	;# 
  4599  0997                     	;# 
  4600  0E0F                     	;# 
  4601  0E10                     	;# 
  4602  0E11                     	;# 
  4603  0E12                     	;# 
  4604  0E13                     	;# 
  4605  0E14                     	;# 
  4606  0E15                     	;# 
  4607  0E16                     	;# 
  4608  0E17                     	;# 
  4609  0E18                     	;# 
  4610  0E19                     	;# 
  4611  0E1A                     	;# 
  4612  0E1B                     	;# 
  4613  0E1C                     	;# 
  4614  0E1D                     	;# 
  4615  0E1E                     	;# 
  4616  0E1F                     	;# 
  4617  0E20                     	;# 
  4618  0E21                     	;# 
  4619  0E22                     	;# 
  4620  0E23                     	;# 
  4621  0E24                     	;# 
  4622  0E25                     	;# 
  4623  0E26                     	;# 
  4624  0E27                     	;# 
  4625  0E28                     	;# 
  4626  0E29                     	;# 
  4627  0E2A                     	;# 
  4628  0E2B                     	;# 
  4629  0E2C                     	;# 
  4630  0E2D                     	;# 
  4631  0E2E                     	;# 
  4632  0E2F                     	;# 
  4633  0E30                     	;# 
  4634  0E31                     	;# 
  4635  0E32                     	;# 
  4636  0E33                     	;# 
  4637  0E34                     	;# 
  4638  0E35                     	;# 
  4639  0E36                     	;# 
  4640  0E37                     	;# 
  4641  0E8F                     	;# 
  4642  0E90                     	;# 
  4643  0E91                     	;# 
  4644  0E92                     	;# 
  4645  0E93                     	;# 
  4646  0E94                     	;# 
  4647  0E95                     	;# 
  4648  0E96                     	;# 
  4649  0E97                     	;# 
  4650  0E9C                     	;# 
  4651  0E9D                     	;# 
  4652  0E9E                     	;# 
  4653  0EA1                     	;# 
  4654  0EA2                     	;# 
  4655  0EA3                     	;# 
  4656  0EA4                     	;# 
  4657  0EA5                     	;# 
  4658  0EA9                     	;# 
  4659  0EAA                     	;# 
  4660  0EAB                     	;# 
  4661  0EAC                     	;# 
  4662  0EB1                     	;# 
  4663  0EB2                     	;# 
  4664  0EB3                     	;# 
  4665  0EB8                     	;# 
  4666  0EB9                     	;# 
  4667  0EBA                     	;# 
  4668  0EBB                     	;# 
  4669  0EBC                     	;# 
  4670  0EBD                     	;# 
  4671  0EBE                     	;# 
  4672  0EC3                     	;# 
  4673  0EC5                     	;# 
  4674  0EC6                     	;# 
  4675  0EC7                     	;# 
  4676  0EC8                     	;# 
  4677  0EC9                     	;# 
  4678  0ECA                     	;# 
  4679  0ECB                     	;# 
  4680  0ECC                     	;# 
  4681  0F10                     	;# 
  4682  0F11                     	;# 
  4683  0F12                     	;# 
  4684  0F13                     	;# 
  4685  0F14                     	;# 
  4686  0F15                     	;# 
  4687  0F16                     	;# 
  4688  0F17                     	;# 
  4689  0F18                     	;# 
  4690  0F19                     	;# 
  4691  0F1A                     	;# 
  4692  0F1B                     	;# 
  4693  0F1C                     	;# 
  4694  0F1D                     	;# 
  4695  0F1E                     	;# 
  4696  0F1F                     	;# 
  4697  0F20                     	;# 
  4698  0F21                     	;# 
  4699  0F22                     	;# 
  4700  0F23                     	;# 
  4701  0F24                     	;# 
  4702  0F25                     	;# 
  4703  0F26                     	;# 
  4704  0F27                     	;# 
  4705  0F38                     	;# 
  4706  0F39                     	;# 
  4707  0F3A                     	;# 
  4708  0F3B                     	;# 
  4709  0F3C                     	;# 
  4710  0F3D                     	;# 
  4711  0F3E                     	;# 
  4712  0F3F                     	;# 
  4713  0F40                     	;# 
  4714  0F41                     	;# 
  4715  0F43                     	;# 
  4716  0F44                     	;# 
  4717  0F45                     	;# 
  4718  0F46                     	;# 
  4719  0F47                     	;# 
  4720  0F48                     	;# 
  4721  0F49                     	;# 
  4722  0F4A                     	;# 
  4723  0F4B                     	;# 
  4724  0F4C                     	;# 
  4725  0F4E                     	;# 
  4726  0F4F                     	;# 
  4727  0F50                     	;# 
  4728  0F51                     	;# 
  4729  0F52                     	;# 
  4730  0F53                     	;# 
  4731  0F54                     	;# 
  4732  0F55                     	;# 
  4733  0F56                     	;# 
  4734  0F57                     	;# 
  4735  0F65                     	;# 
  4736  0F68                     	;# 
  4737  0F69                     	;# 
  4738  0F6A                     	;# 
  4739  0F6B                     	;# 
  4740  0FE4                     	;# 
  4741  0FE5                     	;# 
  4742  0FE6                     	;# 
  4743  0FE7                     	;# 
  4744  0FE8                     	;# 
  4745  0FE9                     	;# 
  4746  0FEA                     	;# 
  4747  0FEB                     	;# 
  4748  0FED                     	;# 
  4749  0FEE                     	;# 
  4750  0FEF                     	;# 
  4751  0000                     	;# 
  4752  0001                     	;# 
  4753  0002                     	;# 
  4754  0003                     	;# 
  4755  0004                     	;# 
  4756  0005                     	;# 
  4757  0006                     	;# 
  4758  0007                     	;# 
  4759  0008                     	;# 
  4760  0009                     	;# 
  4761  000A                     	;# 
  4762  000B                     	;# 
  4763  000C                     	;# 
  4764  000D                     	;# 
  4765  000E                     	;# 
  4766  0010                     	;# 
  4767  0011                     	;# 
  4768  0012                     	;# 
  4769  0013                     	;# 
  4770  0016                     	;# 
  4771  0017                     	;# 
  4772  0018                     	;# 
  4773  001C                     	;# 
  4774  001C                     	;# 
  4775  001D                     	;# 
  4776  001D                     	;# 
  4777  001E                     	;# 
  4778  001F                     	;# 
  4779  008C                     	;# 
  4780  008C                     	;# 
  4781  008D                     	;# 
  4782  008E                     	;# 
  4783  008E                     	;# 
  4784  008F                     	;# 
  4785  0090                     	;# 
  4786  0090                     	;# 
  4787  0091                     	;# 
  4788  0093                     	;# 
  4789  0094                     	;# 
  4790  0095                     	;# 
  4791  0096                     	;# 
  4792  0097                     	;# 
  4793  0098                     	;# 
  4794  0099                     	;# 
  4795  009A                     	;# 
  4796  009B                     	;# 
  4797  009C                     	;# 
  4798  009D                     	;# 
  4799  009E                     	;# 
  4800  010C                     	;# 
  4801  010D                     	;# 
  4802  010E                     	;# 
  4803  010E                     	;# 
  4804  010F                     	;# 
  4805  0110                     	;# 
  4806  0110                     	;# 
  4807  0111                     	;# 
  4808  0112                     	;# 
  4809  0112                     	;# 
  4810  0113                     	;# 
  4811  0114                     	;# 
  4812  0114                     	;# 
  4813  0115                     	;# 
  4814  0116                     	;# 
  4815  0116                     	;# 
  4816  0117                     	;# 
  4817  0119                     	;# 
  4818  0119                     	;# 
  4819  0119                     	;# 
  4820  011A                     	;# 
  4821  011A                     	;# 
  4822  011A                     	;# 
  4823  011B                     	;# 
  4824  011B                     	;# 
  4825  011B                     	;# 
  4826  011B                     	;# 
  4827  011B                     	;# 
  4828  011C                     	;# 
  4829  011C                     	;# 
  4830  011C                     	;# 
  4831  011D                     	;# 
  4832  011D                     	;# 
  4833  011D                     	;# 
  4834  011E                     	;# 
  4835  011E                     	;# 
  4836  011E                     	;# 
  4837  011F                     	;# 
  4838  011F                     	;# 
  4839  011F                     	;# 
  4840  011F                     	;# 
  4841  011F                     	;# 
  4842  018C                     	;# 
  4843  018D                     	;# 
  4844  018E                     	;# 
  4845  018F                     	;# 
  4846  0190                     	;# 
  4847  0191                     	;# 
  4848  0192                     	;# 
  4849  0196                     	;# 
  4850  0197                     	;# 
  4851  0198                     	;# 
  4852  0199                     	;# 
  4853  019A                     	;# 
  4854  019B                     	;# 
  4855  019C                     	;# 
  4856  020C                     	;# 
  4857  020C                     	;# 
  4858  020D                     	;# 
  4859  020E                     	;# 
  4860  020F                     	;# 
  4861  020F                     	;# 
  4862  0210                     	;# 
  4863  0210                     	;# 
  4864  0211                     	;# 
  4865  0211                     	;# 
  4866  0212                     	;# 
  4867  0212                     	;# 
  4868  0213                     	;# 
  4869  0214                     	;# 
  4870  0215                     	;# 
  4871  0215                     	;# 
  4872  0216                     	;# 
  4873  0216                     	;# 
  4874  0217                     	;# 
  4875  0217                     	;# 
  4876  0218                     	;# 
  4877  0218                     	;# 
  4878  0219                     	;# 
  4879  021A                     	;# 
  4880  021B                     	;# 
  4881  021B                     	;# 
  4882  021C                     	;# 
  4883  021C                     	;# 
  4884  021D                     	;# 
  4885  021D                     	;# 
  4886  021E                     	;# 
  4887  021F                     	;# 
  4888  028C                     	;# 
  4889  028C                     	;# 
  4890  028D                     	;# 
  4891  028D                     	;# 
  4892  028E                     	;# 
  4893  028F                     	;# 
  4894  0290                     	;# 
  4895  0290                     	;# 
  4896  0291                     	;# 
  4897  0292                     	;# 
  4898  0292                     	;# 
  4899  0293                     	;# 
  4900  0293                     	;# 
  4901  0294                     	;# 
  4902  0295                     	;# 
  4903  0296                     	;# 
  4904  0296                     	;# 
  4905  0297                     	;# 
  4906  0298                     	;# 
  4907  0298                     	;# 
  4908  0299                     	;# 
  4909  0299                     	;# 
  4910  029A                     	;# 
  4911  029B                     	;# 
  4912  029C                     	;# 
  4913  029C                     	;# 
  4914  029D                     	;# 
  4915  030C                     	;# 
  4916  030C                     	;# 
  4917  030D                     	;# 
  4918  030E                     	;# 
  4919  030F                     	;# 
  4920  0310                     	;# 
  4921  0310                     	;# 
  4922  0311                     	;# 
  4923  0312                     	;# 
  4924  0313                     	;# 
  4925  0314                     	;# 
  4926  0314                     	;# 
  4927  0315                     	;# 
  4928  0316                     	;# 
  4929  0317                     	;# 
  4930  0318                     	;# 
  4931  0318                     	;# 
  4932  0319                     	;# 
  4933  031A                     	;# 
  4934  031B                     	;# 
  4935  031C                     	;# 
  4936  031C                     	;# 
  4937  031D                     	;# 
  4938  031E                     	;# 
  4939  031F                     	;# 
  4940  038C                     	;# 
  4941  038D                     	;# 
  4942  038E                     	;# 
  4943  0390                     	;# 
  4944  0391                     	;# 
  4945  0392                     	;# 
  4946  040C                     	;# 
  4947  040D                     	;# 
  4948  040E                     	;# 
  4949  040F                     	;# 
  4950  0410                     	;# 
  4951  0411                     	;# 
  4952  0416                     	;# 
  4953  0416                     	;# 
  4954  0417                     	;# 
  4955  0418                     	;# 
  4956  0418                     	;# 
  4957  0419                     	;# 
  4958  041A                     	;# 
  4959  041A                     	;# 
  4960  041B                     	;# 
  4961  041C                     	;# 
  4962  041C                     	;# 
  4963  041D                     	;# 
  4964  041E                     	;# 
  4965  041F                     	;# 
  4966  048C                     	;# 
  4967  048C                     	;# 
  4968  048D                     	;# 
  4969  048E                     	;# 
  4970  048F                     	;# 
  4971  048F                     	;# 
  4972  0490                     	;# 
  4973  0491                     	;# 
  4974  0492                     	;# 
  4975  0492                     	;# 
  4976  0493                     	;# 
  4977  0494                     	;# 
  4978  0495                     	;# 
  4979  0495                     	;# 
  4980  0496                     	;# 
  4981  0497                     	;# 
  4982  0498                     	;# 
  4983  0499                     	;# 
  4984  049A                     	;# 
  4985  049B                     	;# 
  4986  049C                     	;# 
  4987  049D                     	;# 
  4988  050C                     	;# 
  4989  050C                     	;# 
  4990  050D                     	;# 
  4991  050E                     	;# 
  4992  050F                     	;# 
  4993  050F                     	;# 
  4994  0510                     	;# 
  4995  0511                     	;# 
  4996  0512                     	;# 
  4997  0512                     	;# 
  4998  0513                     	;# 
  4999  0514                     	;# 
  5000  0515                     	;# 
  5001  0515                     	;# 
  5002  0516                     	;# 
  5003  0517                     	;# 
  5004  0518                     	;# 
  5005  0519                     	;# 
  5006  051A                     	;# 
  5007  051B                     	;# 
  5008  051C                     	;# 
  5009  051D                     	;# 
  5010  058C                     	;# 
  5011  058C                     	;# 
  5012  058D                     	;# 
  5013  058E                     	;# 
  5014  058F                     	;# 
  5015  058F                     	;# 
  5016  0590                     	;# 
  5017  0591                     	;# 
  5018  0592                     	;# 
  5019  0593                     	;# 
  5020  060C                     	;# 
  5021  060D                     	;# 
  5022  060E                     	;# 
  5023  060F                     	;# 
  5024  0610                     	;# 
  5025  0611                     	;# 
  5026  0612                     	;# 
  5027  0613                     	;# 
  5028  0614                     	;# 
  5029  0616                     	;# 
  5030  0617                     	;# 
  5031  0618                     	;# 
  5032  0619                     	;# 
  5033  061A                     	;# 
  5034  061B                     	;# 
  5035  061C                     	;# 
  5036  061D                     	;# 
  5037  061E                     	;# 
  5038  068C                     	;# 
  5039  068D                     	;# 
  5040  068E                     	;# 
  5041  068F                     	;# 
  5042  0690                     	;# 
  5043  0691                     	;# 
  5044  0692                     	;# 
  5045  0693                     	;# 
  5046  0694                     	;# 
  5047  070C                     	;# 
  5048  070D                     	;# 
  5049  070E                     	;# 
  5050  070F                     	;# 
  5051  0710                     	;# 
  5052  0711                     	;# 
  5053  0712                     	;# 
  5054  0713                     	;# 
  5055  0714                     	;# 
  5056  0716                     	;# 
  5057  0717                     	;# 
  5058  0718                     	;# 
  5059  0719                     	;# 
  5060  071A                     	;# 
  5061  071B                     	;# 
  5062  071C                     	;# 
  5063  071D                     	;# 
  5064  071E                     	;# 
  5065  0796                     	;# 
  5066  0797                     	;# 
  5067  0798                     	;# 
  5068  0799                     	;# 
  5069  079A                     	;# 
  5070  079B                     	;# 
  5071  080C                     	;# 
  5072  080D                     	;# 
  5073  080E                     	;# 
  5074  080F                     	;# 
  5075  0810                     	;# 
  5076  0811                     	;# 
  5077  0812                     	;# 
  5078  0813                     	;# 
  5079  0814                     	;# 
  5080  081A                     	;# 
  5081  081B                     	;# 
  5082  081C                     	;# 
  5083  081D                     	;# 
  5084  081E                     	;# 
  5085  081F                     	;# 
  5086  088C                     	;# 
  5087  088D                     	;# 
  5088  088E                     	;# 
  5089  088F                     	;# 
  5090  0890                     	;# 
  5091  0891                     	;# 
  5092  0892                     	;# 
  5093  0893                     	;# 
  5094  0895                     	;# 
  5095  0896                     	;# 
  5096  0897                     	;# 
  5097  0898                     	;# 
  5098  0899                     	;# 
  5099  089A                     	;# 
  5100  089B                     	;# 
  5101  090C                     	;# 
  5102  090E                     	;# 
  5103  090F                     	;# 
  5104  091F                     	;# 
  5105  091F                     	;# 
  5106  098F                     	;# 
  5107  098F                     	;# 
  5108  0990                     	;# 
  5109  0991                     	;# 
  5110  0992                     	;# 
  5111  0993                     	;# 
  5112  0994                     	;# 
  5113  0995                     	;# 
  5114  0996                     	;# 
  5115  0997                     	;# 
  5116  0E0F                     	;# 
  5117  0E10                     	;# 
  5118  0E11                     	;# 
  5119  0E12                     	;# 
  5120  0E13                     	;# 
  5121  0E14                     	;# 
  5122  0E15                     	;# 
  5123  0E16                     	;# 
  5124  0E17                     	;# 
  5125  0E18                     	;# 
  5126  0E19                     	;# 
  5127  0E1A                     	;# 
  5128  0E1B                     	;# 
  5129  0E1C                     	;# 
  5130  0E1D                     	;# 
  5131  0E1E                     	;# 
  5132  0E1F                     	;# 
  5133  0E20                     	;# 
  5134  0E21                     	;# 
  5135  0E22                     	;# 
  5136  0E23                     	;# 
  5137  0E24                     	;# 
  5138  0E25                     	;# 
  5139  0E26                     	;# 
  5140  0E27                     	;# 
  5141  0E28                     	;# 
  5142  0E29                     	;# 
  5143  0E2A                     	;# 
  5144  0E2B                     	;# 
  5145  0E2C                     	;# 
  5146  0E2D                     	;# 
  5147  0E2E                     	;# 
  5148  0E2F                     	;# 
  5149  0E30                     	;# 
  5150  0E31                     	;# 
  5151  0E32                     	;# 
  5152  0E33                     	;# 
  5153  0E34                     	;# 
  5154  0E35                     	;# 
  5155  0E36                     	;# 
  5156  0E37                     	;# 
  5157  0E8F                     	;# 
  5158  0E90                     	;# 
  5159  0E91                     	;# 
  5160  0E92                     	;# 
  5161  0E93                     	;# 
  5162  0E94                     	;# 
  5163  0E95                     	;# 
  5164  0E96                     	;# 
  5165  0E97                     	;# 
  5166  0E9C                     	;# 
  5167  0E9D                     	;# 
  5168  0E9E                     	;# 
  5169  0EA1                     	;# 
  5170  0EA2                     	;# 
  5171  0EA3                     	;# 
  5172  0EA4                     	;# 
  5173  0EA5                     	;# 
  5174  0EA9                     	;# 
  5175  0EAA                     	;# 
  5176  0EAB                     	;# 
  5177  0EAC                     	;# 
  5178  0EB1                     	;# 
  5179  0EB2                     	;# 
  5180  0EB3                     	;# 
  5181  0EB8                     	;# 
  5182  0EB9                     	;# 
  5183  0EBA                     	;# 
  5184  0EBB                     	;# 
  5185  0EBC                     	;# 
  5186  0EBD                     	;# 
  5187  0EBE                     	;# 
  5188  0EC3                     	;# 
  5189  0EC5                     	;# 
  5190  0EC6                     	;# 
  5191  0EC7                     	;# 
  5192  0EC8                     	;# 
  5193  0EC9                     	;# 
  5194  0ECA                     	;# 
  5195  0ECB                     	;# 
  5196  0ECC                     	;# 
  5197  0F10                     	;# 
  5198  0F11                     	;# 
  5199  0F12                     	;# 
  5200  0F13                     	;# 
  5201  0F14                     	;# 
  5202  0F15                     	;# 
  5203  0F16                     	;# 
  5204  0F17                     	;# 
  5205  0F18                     	;# 
  5206  0F19                     	;# 
  5207  0F1A                     	;# 
  5208  0F1B                     	;# 
  5209  0F1C                     	;# 
  5210  0F1D                     	;# 
  5211  0F1E                     	;# 
  5212  0F1F                     	;# 
  5213  0F20                     	;# 
  5214  0F21                     	;# 
  5215  0F22                     	;# 
  5216  0F23                     	;# 
  5217  0F24                     	;# 
  5218  0F25                     	;# 
  5219  0F26                     	;# 
  5220  0F27                     	;# 
  5221  0F38                     	;# 
  5222  0F39                     	;# 
  5223  0F3A                     	;# 
  5224  0F3B                     	;# 
  5225  0F3C                     	;# 
  5226  0F3D                     	;# 
  5227  0F3E                     	;# 
  5228  0F3F                     	;# 
  5229  0F40                     	;# 
  5230  0F41                     	;# 
  5231  0F43                     	;# 
  5232  0F44                     	;# 
  5233  0F45                     	;# 
  5234  0F46                     	;# 
  5235  0F47                     	;# 
  5236  0F48                     	;# 
  5237  0F49                     	;# 
  5238  0F4A                     	;# 
  5239  0F4B                     	;# 
  5240  0F4C                     	;# 
  5241  0F4E                     	;# 
  5242  0F4F                     	;# 
  5243  0F50                     	;# 
  5244  0F51                     	;# 
  5245  0F52                     	;# 
  5246  0F53                     	;# 
  5247  0F54                     	;# 
  5248  0F55                     	;# 
  5249  0F56                     	;# 
  5250  0F57                     	;# 
  5251  0F65                     	;# 
  5252  0F68                     	;# 
  5253  0F69                     	;# 
  5254  0F6A                     	;# 
  5255  0F6B                     	;# 
  5256  0FE4                     	;# 
  5257  0FE5                     	;# 
  5258  0FE6                     	;# 
  5259  0FE7                     	;# 
  5260  0FE8                     	;# 
  5261  0FE9                     	;# 
  5262  0FEA                     	;# 
  5263  0FEB                     	;# 
  5264  0FED                     	;# 
  5265  0FEE                     	;# 
  5266  0FEF                     	;_samples
  5267                           
  5268                           	psect	idataBANK1
  5269  0006                     __pidataBANK1:	
  5270                           
  5271                           ;initializer for _Imode
  5272  0006  3401               	retlw	1
  5273  0007  3400               	retlw	0
  5274                           
  5275                           	psect	idataBANK2
  5276  128F                     __pidataBANK2:	
  5277                           
  5278                           ;initializer for _channels
  5279  128F  3414               	retlw	20
  5280  1290  3400               	retlw	0
  5281  1291  3410               	retlw	16
  5282  1292  3400               	retlw	0
  5283  1293  3416               	retlw	22
  5284  1294  3400               	retlw	0
  5285  1295  3412               	retlw	18
  5286  1296  3400               	retlw	0
  5287                           
  5288                           	psect	stringtext1
  5289  1000                     __pstringtext1:	
  5290  1000                     _fonts:	
  5291  1000  3400               	retlw	0
  5292  1001  3400               	retlw	0
  5293  1002  3400               	retlw	0
  5294  1003  3400               	retlw	0
  5295  1004  344E               	retlw	78
  5296  1005  3400               	retlw	0
  5297  1006  3406               	retlw	6
  5298  1007  3400               	retlw	0
  5299  1008  3406               	retlw	6
  5300  1009  34FF               	retlw	255
  5301  100A  34FF               	retlw	255
  5302  100B  34FF               	retlw	255
  5303  100C  3448               	retlw	72
  5304  100D  34D6               	retlw	214
  5305  100E  3424               	retlw	36
  5306  100F  3412               	retlw	18
  5307  1010  3408               	retlw	8
  5308  1011  3424               	retlw	36
  5309  1012  34FF               	retlw	255
  5310  1013  34FF               	retlw	255
  5311  1014  34FF               	retlw	255
  5312  1015  3400               	retlw	0
  5313  1016  3406               	retlw	6
  5314  1017  3400               	retlw	0
  5315  1018  3438               	retlw	56
  5316  1019  3444               	retlw	68
  5317  101A  3482               	retlw	130
  5318  101B  3482               	retlw	130
  5319  101C  3444               	retlw	68
  5320  101D  3438               	retlw	56
  5321  101E  3414               	retlw	20
  5322  101F  3408               	retlw	8
  5323  1020  343E               	retlw	62
  5324  1021  3410               	retlw	16
  5325  1022  3438               	retlw	56
  5326  1023  3410               	retlw	16
  5327  1024  34A0               	retlw	160
  5328  1025  3460               	retlw	96
  5329  1026  3400               	retlw	0
  5330  1027  3410               	retlw	16
  5331  1028  3410               	retlw	16
  5332  1029  3410               	retlw	16
  5333  102A  3460               	retlw	96
  5334  102B  3460               	retlw	96
  5335  102C  3400               	retlw	0
  5336  102D  3460               	retlw	96
  5337  102E  3418               	retlw	24
  5338  102F  3406               	retlw	6
  5339  1030  347C               	retlw	124
  5340  1031  3442               	retlw	66
  5341  1032  347C               	retlw	124
  5342  1033  3444               	retlw	68
  5343  1034  347E               	retlw	126
  5344  1035  3440               	retlw	64
  5345  1036  3464               	retlw	100
  5346  1037  3452               	retlw	82
  5347  1038  344C               	retlw	76
  5348  1039  344A               	retlw	74
  5349  103A  344A               	retlw	74
  5350  103B  3434               	retlw	52
  5351  103C  3438               	retlw	56
  5352  103D  3424               	retlw	36
  5353  103E  347E               	retlw	126
  5354  103F  344E               	retlw	78
  5355  1040  344A               	retlw	74
  5356  1041  3432               	retlw	50
  5357  1042  343C               	retlw	60
  5358  1043  344A               	retlw	74
  5359  1044  3432               	retlw	50
  5360  1045  3462               	retlw	98
  5361  1046  341A               	retlw	26
  5362  1047  3406               	retlw	6
  5363  1048  3476               	retlw	118
  5364  1049  344A               	retlw	74
  5365  104A  3476               	retlw	118
  5366  104B  344C               	retlw	76
  5367  104C  3452               	retlw	82
  5368  104D  343C               	retlw	60
  5369  104E  346C               	retlw	108
  5370  104F  346C               	retlw	108
  5371  1050  3400               	retlw	0
  5372  1051  34AC               	retlw	172
  5373  1052  346C               	retlw	108
  5374  1053  3400               	retlw	0
  5375  1054  3410               	retlw	16
  5376  1055  3428               	retlw	40
  5377  1056  3444               	retlw	68
  5378  1057  3428               	retlw	40
  5379  1058  3428               	retlw	40
  5380  1059  3428               	retlw	40
  5381  105A  3444               	retlw	68
  5382  105B  3428               	retlw	40
  5383  105C  3410               	retlw	16
  5384  105D  3402               	retlw	2
  5385  105E  3459               	retlw	89
  5386  105F  3406               	retlw	6
  5387  1060  34FF               	retlw	255
  5388  1061  34FF               	retlw	255
  5389  1062  34FF               	retlw	255
  5390  1063  347C               	retlw	124
  5391  1064  3412               	retlw	18
  5392  1065  347C               	retlw	124
  5393  1066  347E               	retlw	126
  5394  1067  345A               	retlw	90
  5395  1068  3434               	retlw	52
  5396  1069  343C               	retlw	60
  5397  106A  3442               	retlw	66
  5398  106B  3442               	retlw	66
  5399  106C  347E               	retlw	126
  5400  106D  3442               	retlw	66
  5401  106E  343C               	retlw	60
  5402  106F  347E               	retlw	126
  5403  1070  344A               	retlw	74
  5404  1071  3442               	retlw	66
  5405  1072  347E               	retlw	126
  5406  1073  340A               	retlw	10
  5407  1074  340A               	retlw	10
  5408  1075  343C               	retlw	60
  5409  1076  3452               	retlw	82
  5410  1077  3434               	retlw	52
  5411  1078  347E               	retlw	126
  5412  1079  3408               	retlw	8
  5413  107A  347E               	retlw	126
  5414  107B  3442               	retlw	66
  5415  107C  347E               	retlw	126
  5416  107D  3442               	retlw	66
  5417  107E  3430               	retlw	48
  5418  107F  3440               	retlw	64
  5419  1080  343E               	retlw	62
  5420  1081  347E               	retlw	126
  5421  1082  3418               	retlw	24
  5422  1083  3466               	retlw	102
  5423  1084  347E               	retlw	126
  5424  1085  3440               	retlw	64
  5425  1086  3440               	retlw	64
  5426  1087  347E               	retlw	126
  5427  1088  341C               	retlw	28
  5428  1089  347E               	retlw	126
  5429  108A  347E               	retlw	126
  5430  108B  3402               	retlw	2
  5431  108C  347E               	retlw	126
  5432  108D  343C               	retlw	60
  5433  108E  3442               	retlw	66
  5434  108F  343C               	retlw	60
  5435  1090  347E               	retlw	126
  5436  1091  3412               	retlw	18
  5437  1092  340C               	retlw	12
  5438  1093  347E               	retlw	126
  5439  1094  3462               	retlw	98
  5440  1095  34FE               	retlw	254
  5441  1096  347E               	retlw	126
  5442  1097  3432               	retlw	50
  5443  1098  344E               	retlw	78
  5444  1099  3444               	retlw	68
  5445  109A  344A               	retlw	74
  5446  109B  3432               	retlw	50
  5447  109C  3402               	retlw	2
  5448  109D  347E               	retlw	126
  5449  109E  3402               	retlw	2
  5450  109F  347E               	retlw	126
  5451  10A0  3440               	retlw	64
  5452  10A1  347E               	retlw	126
  5453  10A2  343E               	retlw	62
  5454  10A3  3440               	retlw	64
  5455  10A4  343E               	retlw	62
  5456  10A5  347E               	retlw	126
  5457  10A6  3438               	retlw	56
  5458  10A7  347E               	retlw	126
  5459  10A8  3466               	retlw	102
  5460  10A9  3418               	retlw	24
  5461  10AA  3466               	retlw	102
  5462  10AB  340E               	retlw	14
  5463  10AC  3470               	retlw	112
  5464  10AD  340E               	retlw	14
  5465  10AE  3462               	retlw	98
  5466  10AF  345A               	retlw	90
  5467  10B0  3446               	retlw	70
  5468  10B1  3400               	retlw	0
  5469  10B2  347E               	retlw	126
  5470  10B3  3442               	retlw	66
  5471  10B4  3406               	retlw	6
  5472  10B5  3418               	retlw	24
  5473  10B6  3460               	retlw	96
  5474  10B7  3442               	retlw	66
  5475  10B8  347E               	retlw	126
  5476  10B9  3400               	retlw	0
  5477  10BA  3404               	retlw	4
  5478  10BB  3402               	retlw	2
  5479  10BC  3404               	retlw	4
  5480  10BD  3440               	retlw	64
  5481  10BE  3440               	retlw	64
  5482  10BF  3440               	retlw	64
  5483  10C0  3400               	retlw	0
  5484  10C1  3402               	retlw	2
  5485  10C2  3404               	retlw	4
  5486  10C3  3474               	retlw	116
  5487  10C4  3454               	retlw	84
  5488  10C5  3478               	retlw	120
  5489  10C6  347E               	retlw	126
  5490  10C7  3448               	retlw	72
  5491  10C8  3430               	retlw	48
  5492  10C9  3430               	retlw	48
  5493  10CA  3448               	retlw	72
  5494  10CB  3448               	retlw	72
  5495  10CC  3430               	retlw	48
  5496  10CD  3448               	retlw	72
  5497  10CE  347E               	retlw	126
  5498  10CF  3438               	retlw	56
  5499  10D0  3454               	retlw	84
  5500  10D1  3458               	retlw	88
  5501  10D2  347C               	retlw	124
  5502  10D3  340A               	retlw	10
  5503  10D4  3402               	retlw	2
  5504  10D5  3498               	retlw	152
  5505  10D6  34A4               	retlw	164
  5506  10D7  347C               	retlw	124
  5507  10D8  347E               	retlw	126
  5508  10D9  3408               	retlw	8
  5509  10DA  3470               	retlw	112
  5510  10DB  3448               	retlw	72
  5511  10DC  347A               	retlw	122
  5512  10DD  3440               	retlw	64
  5513  10DE  3488               	retlw	136
  5514  10DF  34FA               	retlw	250
  5515  10E0  3400               	retlw	0
  5516  10E1  347E               	retlw	126
  5517  10E2  3418               	retlw	24
  5518  10E3  3464               	retlw	100
  5519  10E4  3442               	retlw	66
  5520  10E5  347E               	retlw	126
  5521  10E6  3440               	retlw	64
  5522  10E7  347C               	retlw	124
  5523  10E8  3438               	retlw	56
  5524  10E9  347C               	retlw	124
  5525  10EA  347C               	retlw	124
  5526  10EB  3404               	retlw	4
  5527  10EC  3478               	retlw	120
  5528  10ED  3438               	retlw	56
  5529  10EE  3444               	retlw	68
  5530  10EF  3438               	retlw	56
  5531  10F0  34FC               	retlw	252
  5532  10F1  3424               	retlw	36
  5533  10F2  3418               	retlw	24
  5534  10F3  3418               	retlw	24
  5535  10F4  3424               	retlw	36
  5536  10F5  34FC               	retlw	252
  5537  10F6  3478               	retlw	120
  5538  10F7  3404               	retlw	4
  5539  10F8  3404               	retlw	4
  5540  10F9  3448               	retlw	72
  5541  10FA  3454               	retlw	84
  5542  10FB  3424               	retlw	36
  5543  10FC  3404               	retlw	4
  5544  10FD  343E               	retlw	62
  5545  10FE  3444               	retlw	68
  5546  10FF  347C               	retlw	124
  5547  1100  3440               	retlw	64
  5548  1101  347C               	retlw	124
  5549  1102  343C               	retlw	60
  5550  1103  3440               	retlw	64
  5551  1104  343C               	retlw	60
  5552  1105  347C               	retlw	124
  5553  1106  3430               	retlw	48
  5554  1107  347C               	retlw	124
  5555  1108  346C               	retlw	108
  5556  1109  3410               	retlw	16
  5557  110A  346C               	retlw	108
  5558  110B  349C               	retlw	156
  5559  110C  34A0               	retlw	160
  5560  110D  347C               	retlw	124
  5561  110E  3464               	retlw	100
  5562  110F  3454               	retlw	84
  5563  1110  344C               	retlw	76
  5564  1111  340C               	retlw	12
  5565  1112  3412               	retlw	18
  5566  1113  340C               	retlw	12
  5567  1114  34FF               	retlw	255
  5568  1115  34FF               	retlw	255
  5569  1116  34FF               	retlw	255
  5570  1117  34FF               	retlw	255
  5571  1118  34FF               	retlw	255
  5572  1119  34FF               	retlw	255
  5573  111A  34FF               	retlw	255
  5574  111B  34FF               	retlw	255
  5575  111C  34FF               	retlw	255
  5576  111D  34FF               	retlw	255
  5577  111E  34FF               	retlw	255
  5578  111F  34FF               	retlw	255
  5579  1120  34FF               	retlw	255
  5580  1121  34FF               	retlw	255
  5581  1122  34FF               	retlw	255
  5582  1123  34FF               	retlw	255
  5583  1124  34FF               	retlw	255
  5584  1125  34FF               	retlw	255
  5585  1126  34FC               	retlw	252
  5586  1127  3440               	retlw	64
  5587  1128  347C               	retlw	124
  5588  1129  34FF               	retlw	255
  5589  112A  34FF               	retlw	255
  5590  112B  34FF               	retlw	255
  5591  112C  34FF               	retlw	255
  5592  112D  34FF               	retlw	255
  5593  112E  34FF               	retlw	255
  5594  112F                     __end_of_fonts:	
  5595                           
  5596                           	psect	stringtext2
  5597  1800                     __pstringtext2:	
  5598  1800                     log@coeff:	
  5599  1800  3400               	retlw	0
  5600  1801  3400               	retlw	0
  5601  1802  3400               	retlw	0
  5602  1803  3400               	retlw	0
  5603  1804  3480               	retlw	128
  5604  1805  343F               	retlw	63
  5605  1806  34F0               	retlw	240
  5606  1807  34FF               	retlw	255
  5607  1808  34BE               	retlw	190
  5608  1809  34E2               	retlw	226
  5609  180A  34A9               	retlw	169
  5610  180B  343E               	retlw	62
  5611  180C  3483               	retlw	131
  5612  180D  3476               	retlw	118
  5613  180E  34BE               	retlw	190
  5614  180F  34AE               	retlw	174
  5615  1810  342B               	retlw	43
  5616  1811  343E               	retlw	62
  5617  1812  343C               	retlw	60
  5618  1813  34C3               	retlw	195
  5619  1814  34BD               	retlw	189
  5620  1815  34D2               	retlw	210
  5621  1816  3413               	retlw	19
  5622  1817  343D               	retlw	61
  5623  1818  3478               	retlw	120
  5624  1819  34D3               	retlw	211
  5625  181A  34BB               	retlw	187
  5626  181B                     __end_oflog@coeff:	
  5627  0013                     _TRISC	set	19
  5628  0012                     _TRISB	set	18
  5629  0011                     _TRISA	set	17
  5630  0018                     _LATC	set	24
  5631  0017                     _LATB	set	23
  5632  0016                     _LATA	set	22
  5633  0016                     _LATAbits	set	22
  5634  0011                     _TRISAbits	set	17
  5635  00B5                     _LATA5	set	181
  5636  006A                     _RB2	set	106
  5637  005F                     _GIE	set	95
  5638  0093                     _ADCON0	set	147
  5639  009D                     _ADACQ	set	157
  5640  009C                     _ADPRE	set	156
  5641  009B                     _ADCAP	set	155
  5642  009A                     _ADREF	set	154
  5643  0098                     _ADCLK	set	152
  5644  0097                     _ADSTAT	set	151
  5645  0099                     _ADACT	set	153
  5646  0096                     _ADCON3	set	150
  5647  0095                     _ADCON2	set	149
  5648  0094                     _ADCON1	set	148
  5649  008C                     _ADRESL	set	140
  5650  008D                     _ADRESH	set	141
  5651  0093                     _ADCON0bits	set	147
  5652  009E                     _ADPCH	set	158
  5653  0113                     _ADSTPTH	set	275
  5654  0112                     _ADSTPTL	set	274
  5655  0111                     _ADUTHH	set	273
  5656  0110                     _ADUTHL	set	272
  5657  010F                     _ADLTHH	set	271
  5658  010E                     _ADLTHL	set	270
  5659  010D                     _ADRPT	set	269
  5660  021F                     _CCPTMRS1bits	set	543
  5661  0294                     _T4CONbits	set	660
  5662  0292                     _T4TMR	set	658
  5663  0293                     _T4PR	set	659
  5664  0297                     _T4RST	set	663
  5665  0295                     _T4HLT	set	661
  5666  0296                     _T4CLKCON	set	662
  5667  0294                     _T4CON	set	660
  5668  028E                     _T2CONbits	set	654
  5669  028C                     _T2TMR	set	652
  5670  028D                     _T2PR	set	653
  5671  0291                     _T2RST	set	657
  5672  028F                     _T2HLT	set	655
  5673  0290                     _T2CLKCON	set	656
  5674  028E                     _T2CON	set	654
  5675  0390                     _PWM7DCL	set	912
  5676  0391                     _PWM7DCH	set	913
  5677  0392                     _PWM7CON	set	914
  5678  038C                     _PWM6DCL	set	908
  5679  038D                     _PWM6DCH	set	909
  5680  038E                     _PWM6CON	set	910
  5681  0710                     _PIR4bits	set	1808
  5682  0716                     _PIE0bits	set	1814
  5683  0892                     _OSCTUNE	set	2194
  5684  0893                     _OSCFRQ	set	2195
  5685  0891                     _OSCEN	set	2193
  5686  088F                     _OSCCON3	set	2191
  5687  088D                     _OSCCON1	set	2189
  5688  090C                     _FVRCON	set	2316
  5689  0E8F                     _PPSLOCKbits	set	3727
  5690  0E8F                     _PPSLOCK	set	3727
  5691  0F18                     _RB0PPS	set	3864
  5692  0F17                     _RA7PPS	set	3863
  5693  0F16                     _RA6PPS	set	3862
  5694  0F4E                     _ANSELC	set	3918
  5695  0F43                     _ANSELB	set	3907
  5696  0F38                     _ANSELA	set	3896
  5697  0F65                     _WPUE	set	3941
  5698  0F4F                     _WPUC	set	3919
  5699  0F44                     _WPUB	set	3908
  5700  0F39                     _WPUA	set	3897
  5701  181B                     STR_1:	
  5702  181B  3442               	retlw	66	;'B'
  5703  181C  3441               	retlw	65	;'A'
  5704  181D  3454               	retlw	84	;'T'
  5705  181E  3454               	retlw	84	;'T'
  5706  181F  3445               	retlw	69	;'E'
  5707  1820  3452               	retlw	82	;'R'
  5708  1821  3459               	retlw	89	;'Y'
  5709  1822  3420               	retlw	32	;' '
  5710  1823  3446               	retlw	70	;'F'
  5711  1824  3441               	retlw	65	;'A'
  5712  1825  3455               	retlw	85	;'U'
  5713  1826  344C               	retlw	76	;'L'
  5714  1827  3454               	retlw	84	;'T'
  5715  1828  3400               	retlw	0
  5716                           
  5717                           	psect	stringtext3
  5718  0000                     __pstringtext3:	
  5719                           
  5720                           ; #config settings
  5721  0000                     
  5722                           	psect	cinit
  5723  07B9                     start_initialization:	
  5724  07B9                     __initialization:		;BIGRAM
  5725                           
  5726                           ; Initialize objects allocated to BANK1
  5727  07B9  0021               	movlb	1	; select bank1
  5728  07BA  3180  2006  3187   	fcall	__pidataBANK1	;fetch initializer
  5729  07BD  00EE               	movwf	__pdataBANK1& (0+127)
  5730  07BE  3180  2007  3187   	fcall	__pidataBANK1+1	;fetch initializer
  5731  07C1  00EF               	movwf	(__pdataBANK1+1)& (0+127)
  5732                           
  5733                           ; Initialize objects allocated to BANK2
  5734  07C2  308F               	movlw	low __pidataBANK2
  5735  07C3  0084               	movwf	4
  5736  07C4  3092               	movlw	(high __pidataBANK2)| (0+128)
  5737  07C5  0085               	movwf	5
  5738  07C6  0022               	movlb	2	; select bank2
  5739  07C7  0012               	moviw fsr0++
  5740  07C8  00C9               	movwf	__pdataBANK2& (0+127)
  5741  07C9  0012               	moviw fsr0++
  5742  07CA  00CA               	movwf	(__pdataBANK2+1)& (0+127)
  5743  07CB  0012               	moviw fsr0++
  5744  07CC  00CB               	movwf	(__pdataBANK2+2)& (0+127)
  5745  07CD  0012               	moviw fsr0++
  5746  07CE  00CC               	movwf	(__pdataBANK2+3)& (0+127)
  5747  07CF  0012               	moviw fsr0++
  5748  07D0  00CD               	movwf	(__pdataBANK2+4)& (0+127)
  5749  07D1  0012               	moviw fsr0++
  5750  07D2  00CE               	movwf	(__pdataBANK2+5)& (0+127)
  5751  07D3  0012               	moviw fsr0++
  5752  07D4  00CF               	movwf	(__pdataBANK2+6)& (0+127)
  5753  07D5  0012               	moviw fsr0++
  5754  07D6  00D0               	movwf	(__pdataBANK2+7)& (0+127)
  5755                           
  5756                           ; Clear objects allocated to BIGRAM
  5757  07D7  3098               	movlw	low (0+8600)
  5758  07D8  0084               	movwf	4
  5759  07D9  3021               	movlw	high (0+8600)
  5760  07DA  0085               	movwf	5
  5761  07DB  3058               	movlw	88
  5762  07DC  00FE               	movwf	btemp
  5763  07DD  3002               	movlw	2
  5764  07DE  00FF               	movwf	btemp+1
  5765  07DF  3192  22A0  3187   	fcall	clear_ram0
  5766                           
  5767                           ; Clear objects allocated to BANK0
  5768  07E2  0020               	movlb	0	; select bank0
  5769  07E3  01EA               	clrf	__pbssBANK0& (0+127)
  5770  07E4  01EB               	clrf	(__pbssBANK0+1)& (0+127)
  5771  07E5  01EC               	clrf	(__pbssBANK0+2)& (0+127)
  5772  07E6  01ED               	clrf	(__pbssBANK0+3)& (0+127)
  5773  07E7  01EE               	clrf	(__pbssBANK0+4)& (0+127)
  5774                           
  5775                           ; Clear objects allocated to BANK1
  5776  07E8  30A0               	movlw	low __pbssBANK1
  5777  07E9  0084               	movwf	4
  5778  07EA  3000               	movlw	high __pbssBANK1
  5779  07EB  0085               	movwf	5
  5780  07EC  302D               	movlw	45
  5781  07ED  00FE               	movwf	btemp
  5782  07EE  3000               	movlw	0
  5783  07EF  00FF               	movwf	btemp+1
  5784  07F0  3192  22A0  3187   	fcall	clear_ram0
  5785                           
  5786                           ; Clear objects allocated to BANK2
  5787  07F3  3020               	movlw	low __pbssBANK2
  5788  07F4  0084               	movwf	4
  5789  07F5  3001               	movlw	high __pbssBANK2
  5790  07F6  0085               	movwf	5
  5791  07F7  3029               	movlw	41
  5792  07F8  00FE               	movwf	btemp
  5793  07F9  3000               	movlw	0
  5794  07FA  00FF               	movwf	btemp+1
  5795  07FB  3192  22A0         	fcall	clear_ram0
  5796  07FD                     end_of_initialization:	
  5797                           ;End of C runtime variable initialization code
  5798                           
  5799  07FD                     __end_of__initialization:	
  5800  07FD  0020               	movlb	0
  5801  07FE  3181  29EB         	ljmp	_main	;jump to C main() function
  5802                           
  5803                           	psect	bssBANK0
  5804  006A                     __pbssBANK0:	
  5805  006A                     _readButtons:	
  5806  006A                     	ds	2
  5807  006C                     _j:	
  5808  006C                     	ds	1
  5809  006D                     _lastButton:	
  5810  006D                     	ds	1
  5811  006E                     _button:	
  5812  006E                     	ds	1
  5813                           
  5814                           	psect	bssBANK1
  5815  00A0                     __pbssBANK1:	
  5816  00A0                     _Ianalogs:	
  5817  00A0                     	ds	8
  5818  00A8                     _current:	
  5819  00A8                     	ds	8
  5820  00B0                     _voltage:	
  5821  00B0                     	ds	8
  5822  00B8                     _Vref:	
  5823  00B8                     	ds	4
  5824  00BC                     _Iref:	
  5825  00BC                     	ds	4
  5826  00C0                     _IminCount:	
  5827  00C0                     	ds	4
  5828  00C4                     _VHoldMode:	
  5829  00C4                     	ds	2
  5830  00C6                     _cc_cv:	
  5831  00C6                     	ds	2
  5832  00C8                     _batteryState:	
  5833  00C8                     	ds	2
  5834  00CA                     _sampleIndex:	
  5835  00CA                     	ds	2
  5836  00CC                     _x:	
  5837  00CC                     	ds	1
  5838                           
  5839                           	psect	dataBANK1
  5840  00EE                     __pdataBANK1:	
  5841  00EE                     _Imode:	
  5842  00EE                     	ds	2
  5843                           
  5844                           	psect	bssBANK2
  5845  0120                     __pbssBANK2:	
  5846  0120                     _totals:	
  5847  0120                     	ds	16
  5848  0130                     _Vanalogs:	
  5849  0130                     	ds	8
  5850  0138                     LCDWriteInt@F14387:	
  5851  0138                     	ds	5
  5852  013D                     _Imin:	
  5853  013D                     	ds	4
  5854  0141                     _stateCounter:	
  5855  0141                     	ds	4
  5856  0145                     _errno:	
  5857  0145                     	ds	2
  5858  0147                     _Iout:	
  5859  0147                     	ds	2
  5860                           
  5861                           	psect	dataBANK2
  5862  0149                     __pdataBANK2:	
  5863  0149                     _channels:	
  5864  0149                     	ds	8
  5865                           
  5866                           	psect	clrtext
  5867  12A0                     clear_ram0:	
  5868                           ;	Called with FSR0 containing the base address, and
  5869                           ;	btemp/btemp+1 has the size to clear
  5870                           
  5871  12A0  0064               	clrwdt	;clear the watchdog before getting into this loop
  5872  12A1                     clrloop0:	
  5873  12A1  0180               	clrf	0	;clear RAM location pointed to by FSR
  5874  12A2  3101               	addfsr 0,1
  5875  12A3  3001               	movlw	1
  5876  12A4  02FE               	subwf	126,f
  5877  12A5  3000               	movlw	0
  5878  12A6  3BFF               	subwfb	127,f
  5879  12A7  087F               	movf	127,w
  5880  12A8  047E               	iorwf	126,w
  5881  12A9  1903               	btfsc	3,2
  5882  12AA  3400               	retlw	0	;all done for this memory range, return
  5883  12AB  2AA1               	goto	clrloop0	;have we reached the end yet?
  5884                           
  5885                           	psect	cstackBANK1
  5886  00CD                     __pcstackBANK1:	
  5887  00CD                     main@IOutTotal:	
  5888                           
  5889                           ; 2 bytes @ 0x0
  5890  00CD                     	ds	2
  5891  00CF                     main@batteryTemp:	
  5892                           
  5893                           ; 2 bytes @ 0x2
  5894  00CF                     	ds	2
  5895  00D1                     main@faultCount:	
  5896                           
  5897                           ; 2 bytes @ 0x4
  5898  00D1                     	ds	2
  5899  00D3                     main@faultNotReset:	
  5900                           
  5901                           ; 2 bytes @ 0x6
  5902  00D3                     	ds	2
  5903  00D5                     _main$1190:	
  5904                           
  5905                           ; 3 bytes @ 0x8
  5906  00D5                     	ds	3
  5907  00D8                     main@dutyCycle1:	
  5908                           
  5909                           ; 2 bytes @ 0xB
  5910  00D8                     	ds	2
  5911  00DA                     main@slowLoop:	
  5912                           
  5913                           ; 1 bytes @ 0xD
  5914  00DA                     	ds	1
  5915  00DB                     main@displayRefresh:	
  5916                           
  5917                           ; 1 bytes @ 0xE
  5918  00DB                     	ds	1
  5919  00DC                     main@MPPT0:	
  5920                           
  5921                           ; 2 bytes @ 0xF
  5922  00DC                     	ds	2
  5923  00DE                     _main$1189:	
  5924                           
  5925                           ; 3 bytes @ 0x11
  5926  00DE                     	ds	3
  5927  00E1                     _main$1191:	
  5928                           
  5929                           ; 2 bytes @ 0x14
  5930  00E1                     	ds	2
  5931  00E3                     main@efficiency:	
  5932                           
  5933                           ; 3 bytes @ 0x16
  5934  00E3                     	ds	3
  5935  00E6                     main@menuButton:	
  5936                           
  5937                           ; 1 bytes @ 0x19
  5938  00E6                     	ds	1
  5939  00E7                     main@MPPT1:	
  5940                           
  5941                           ; 2 bytes @ 0x1A
  5942  00E7                     	ds	2
  5943  00E9                     main@j:	
  5944                           
  5945                           ; 1 bytes @ 0x1C
  5946  00E9                     	ds	1
  5947  00EA                     main@dutyCycle6:	
  5948                           
  5949                           ; 2 bytes @ 0x1D
  5950  00EA                     	ds	2
  5951  00EC                     main@dutyCycle7:	
  5952                           
  5953                           ; 2 bytes @ 0x1F
  5954  00EC                     	ds	2
  5955                           
  5956                           	psect	cstackCOMMON
  5957  0070                     __pcstackCOMMON:	
  5958  0070                     ?___ftge:	
  5959  0070                     ?_LCDWrite:	
  5960                           ; 1 bit 
  5961                           
  5962  0070                     ?_OSCILLATOR_Initialize:	
  5963                           ; 1 bytes @ 0x0
  5964                           
  5965  0070                     ??_OSCILLATOR_Initialize:	
  5966                           ; 1 bytes @ 0x0
  5967                           
  5968  0070                     ?_TMR2_Initialize:	
  5969                           ; 1 bytes @ 0x0
  5970                           
  5971  0070                     ??_TMR2_Initialize:	
  5972                           ; 1 bytes @ 0x0
  5973                           
  5974  0070                     ?_TMR4_Initialize:	
  5975                           ; 1 bytes @ 0x0
  5976                           
  5977  0070                     ??_TMR4_Initialize:	
  5978                           ; 1 bytes @ 0x0
  5979                           
  5980  0070                     ?_Init_Battery_State_Machine:	
  5981                           ; 1 bytes @ 0x0
  5982                           
  5983  0070                     ??_Init_Battery_State_Machine:	
  5984                           ; 1 bytes @ 0x0
  5985                           
  5986  0070                     ?_calculateCurrent0:	
  5987                           ; 1 bytes @ 0x0
  5988                           
  5989  0070                     ?_calculateCurrent1:	
  5990                           ; 1 bytes @ 0x0
  5991                           
  5992  0070                     ?_calculateCurrent2:	
  5993                           ; 1 bytes @ 0x0
  5994                           
  5995  0070                     ?_calculateCurrent3:	
  5996                           ; 1 bytes @ 0x0
  5997                           
  5998  0070                     ?_ADC_Initialize:	
  5999                           ; 1 bytes @ 0x0
  6000                           
  6001  0070                     ??_ADC_Initialize:	
  6002                           ; 1 bytes @ 0x0
  6003                           
  6004  0070                     ?_readButton:	
  6005                           ; 1 bytes @ 0x0
  6006                           
  6007  0070                     ?_LCDWriteCharacter:	
  6008                           ; 1 bytes @ 0x0
  6009                           
  6010  0070                     ?_LCDClear:	
  6011                           ; 1 bytes @ 0x0
  6012                           
  6013  0070                     ?_LCDInit:	
  6014                           ; 1 bytes @ 0x0
  6015                           
  6016  0070                     ?_PIN_MANAGER_Initialize:	
  6017                           ; 1 bytes @ 0x0
  6018                           
  6019  0070                     ??_PIN_MANAGER_Initialize:	
  6020                           ; 1 bytes @ 0x0
  6021                           
  6022  0070                     ?_PWM_Initialize:	
  6023                           ; 1 bytes @ 0x0
  6024                           
  6025  0070                     ??_PWM_Initialize:	
  6026                           ; 1 bytes @ 0x0
  6027                           
  6028  0070                     ?_PWM6_LoadDutyValue:	
  6029                           ; 1 bytes @ 0x0
  6030                           
  6031  0070                     ?_PWM7_LoadDutyValue:	
  6032                           ; 1 bytes @ 0x0
  6033                           
  6034  0070                     ?_SYSTEM_Initialize:	
  6035                           ; 1 bytes @ 0x0
  6036                           
  6037  0070                     ?_Battery_State_Machine:	
  6038                           ; 1 bytes @ 0x0
  6039                           
  6040  0070                     ?_cc_cv_mode:	
  6041                           ; 1 bytes @ 0x0
  6042                           
  6043  0070                     ??_cc_cv_mode:	
  6044                           ; 1 bytes @ 0x0
  6045                           
  6046  0070                     ?_main:	
  6047                           ; 1 bytes @ 0x0
  6048                           
  6049  0070                     ?_ADCRead:	
  6050                           ; 1 bytes @ 0x0
  6051                           
  6052  0070                     ?___wmul:	
  6053                           ; 2 bytes @ 0x0
  6054                           
  6055  0070                     ?___awdiv:	
  6056                           ; 2 bytes @ 0x0
  6057                           
  6058  0070                     ?___lwmod:	
  6059                           ; 2 bytes @ 0x0
  6060                           
  6061  0070                     ?___ftpack:	
  6062                           ; 2 bytes @ 0x0
  6063                           
  6064  0070                     ?_frexp:	
  6065                           ; 3 bytes @ 0x0
  6066                           
  6067  0070                     ?___aldiv:	
  6068                           ; 3 bytes @ 0x0
  6069                           
  6070  0070                     LCDWrite@data:	
  6071                           ; 4 bytes @ 0x0
  6072                           
  6073  0070                     PIN_MANAGER_Initialize@state:	
  6074                           ; 1 bytes @ 0x0
  6075                           
  6076  0070                     PWM6_LoadDutyValue@dutyCycle6:	
  6077                           ; 1 bytes @ 0x0
  6078                           
  6079  0070                     PWM7_LoadDutyValue@dutyCycle7:	
  6080                           ; 2 bytes @ 0x0
  6081                           
  6082  0070                     ___wmul@multiplier:	
  6083                           ; 2 bytes @ 0x0
  6084                           
  6085  0070                     ___awdiv@divisor:	
  6086                           ; 2 bytes @ 0x0
  6087                           
  6088  0070                     ___lwmod@divisor:	
  6089                           ; 2 bytes @ 0x0
  6090                           
  6091  0070                     ___ftpack@arg:	
  6092                           ; 2 bytes @ 0x0
  6093                           
  6094  0070                     ___ftge@ff1:	
  6095                           ; 3 bytes @ 0x0
  6096                           
  6097  0070                     frexp@value:	
  6098                           ; 3 bytes @ 0x0
  6099                           
  6100  0070                     ___aldiv@divisor:	
  6101                           ; 3 bytes @ 0x0
  6102                           
  6103                           
  6104                           ; 4 bytes @ 0x0
  6105  0070                     	ds	1
  6106  0071                     ??_LCDWrite:	
  6107  0071                     Init_Battery_State_Machine@z:	
  6108                           ; 1 bytes @ 0x1
  6109                           
  6110                           
  6111                           ; 1 bytes @ 0x1
  6112  0071                     	ds	1
  6113  0072                     ??_PWM6_LoadDutyValue:	
  6114  0072                     ??_PWM7_LoadDutyValue:	
  6115                           ; 1 bytes @ 0x2
  6116                           
  6117  0072                     LCDWrite@data_or_command:	
  6118                           ; 1 bytes @ 0x2
  6119                           
  6120  0072                     ___wmul@multiplicand:	
  6121                           ; 1 bytes @ 0x2
  6122                           
  6123  0072                     ___awdiv@dividend:	
  6124                           ; 2 bytes @ 0x2
  6125                           
  6126  0072                     ___lwmod@dividend:	
  6127                           ; 2 bytes @ 0x2
  6128                           
  6129                           
  6130                           ; 2 bytes @ 0x2
  6131  0072                     	ds	1
  6132  0073                     ??_ADCRead:	
  6133  0073                     ADCRead@channel:	
  6134                           ; 1 bytes @ 0x3
  6135                           
  6136  0073                     LCDWrite@d:	
  6137                           ; 1 bytes @ 0x3
  6138                           
  6139  0073                     ___ftpack@exp:	
  6140                           ; 1 bytes @ 0x3
  6141                           
  6142  0073                     frexp@eptr:	
  6143                           ; 1 bytes @ 0x3
  6144                           
  6145  0073                     ___ftge@ff2:	
  6146                           ; 1 bytes @ 0x3
  6147                           
  6148                           
  6149                           ; 3 bytes @ 0x3
  6150  0073                     	ds	1
  6151  0074                     ??_frexp:	
  6152  0074                     ??_readButton:	
  6153                           ; 1 bytes @ 0x4
  6154                           
  6155  0074                     ??___wmul:	
  6156                           ; 1 bytes @ 0x4
  6157                           
  6158  0074                     ??___awdiv:	
  6159                           ; 1 bytes @ 0x4
  6160                           
  6161  0074                     ??___lwmod:	
  6162                           ; 1 bytes @ 0x4
  6163                           
  6164  0074                     LCDWrite@i:	
  6165                           ; 1 bytes @ 0x4
  6166                           
  6167  0074                     ___ftpack@sign:	
  6168                           ; 1 bytes @ 0x4
  6169                           
  6170  0074                     ___wmul@product:	
  6171                           ; 1 bytes @ 0x4
  6172                           
  6173  0074                     ___aldiv@dividend:	
  6174                           ; 2 bytes @ 0x4
  6175                           
  6176                           
  6177                           ; 4 bytes @ 0x4
  6178  0074                     	ds	1
  6179  0075                     ??___ftpack:	
  6180  0075                     ?_gotoXY:	
  6181                           ; 1 bytes @ 0x5
  6182                           
  6183  0075                     ??_LCDInit:	
  6184                           ; 1 bytes @ 0x5
  6185                           
  6186  0075                     gotoXY@y:	
  6187                           ; 1 bytes @ 0x5
  6188                           
  6189  0075                     cc_cv_mode@z:	
  6190                           ; 1 bytes @ 0x5
  6191                           
  6192  0075                     ___awdiv@counter:	
  6193                           ; 1 bytes @ 0x5
  6194                           
  6195  0075                     ___lwmod@counter:	
  6196                           ; 1 bytes @ 0x5
  6197                           
  6198                           
  6199                           ; 1 bytes @ 0x5
  6200  0075                     	ds	1
  6201  0076                     ??_gotoXY:	
  6202  0076                     ??_LCDWriteCharacter:	
  6203                           ; 1 bytes @ 0x6
  6204                           
  6205  0076                     ??___ftge:	
  6206                           ; 1 bytes @ 0x6
  6207                           
  6208  0076                     ___awdiv@sign:	
  6209                           ; 1 bytes @ 0x6
  6210                           
  6211                           
  6212                           ; 1 bytes @ 0x6
  6213  0076                     	ds	1
  6214  0077                     gotoXY@x:	
  6215  0077                     ___awdiv@quotient:	
  6216                           ; 1 bytes @ 0x7
  6217                           
  6218                           
  6219                           ; 2 bytes @ 0x7
  6220  0077                     	ds	1
  6221  0078                     ??_LCDClear:	
  6222  0078                     ??___aldiv:	
  6223                           ; 1 bytes @ 0x8
  6224                           
  6225  0078                     ?___awtoft:	
  6226                           ; 1 bytes @ 0x8
  6227                           
  6228  0078                     ___awtoft@c:	
  6229                           ; 3 bytes @ 0x8
  6230                           
  6231                           
  6232                           ; 2 bytes @ 0x8
  6233  0078                     	ds	1
  6234  0079                     LCDWriteCharacter@character:	
  6235  0079                     readIAnalog@analog_channel:	
  6236                           ; 1 bytes @ 0x9
  6237                           
  6238  0079                     LCDClear@index:	
  6239                           ; 2 bytes @ 0x9
  6240                           
  6241                           
  6242                           ; 2 bytes @ 0x9
  6243  0079                     	ds	1
  6244  007A                     LCDWriteCharacter@base:	
  6245                           
  6246                           ; 2 bytes @ 0xA
  6247  007A                     	ds	1
  6248  007B                     ??_SYSTEM_Initialize:	
  6249  007B                     ??___awtoft:	
  6250                           ; 1 bytes @ 0xB
  6251                           
  6252  007B                     readIAnalog@value:	
  6253                           ; 1 bytes @ 0xB
  6254                           
  6255                           
  6256                           ; 2 bytes @ 0xB
  6257  007B                     	ds	1
  6258  007C                     ?_LCDWriteString:	
  6259  007C                     LCDWriteString@characters:	
  6260                           ; 1 bytes @ 0xC
  6261                           
  6262                           
  6263                           ; 2 bytes @ 0xC
  6264  007C                     	ds	1
  6265  007D                     ___awtoft@sign:	
  6266                           
  6267                           ; 1 bytes @ 0xD
  6268  007D                     	ds	1
  6269  007E                     ??_eval_poly:	
  6270  007E                     ??_tempCalc:	
  6271                           ; 1 bytes @ 0xE
  6272                           
  6273  007E                     ??___ftsub:	
  6274                           ; 1 bytes @ 0xE
  6275                           
  6276                           
  6277                           	psect	cstackBANK0
  6278  0020                     __pcstackBANK0:	
  6279                           ; 1 bytes @ 0xE
  6280                           
  6281  0020                     ??_LCDWriteString:	
  6282  0020                     ?_LCDWriteInt:	
  6283                           ; 1 bytes @ 0x0
  6284                           
  6285  0020                     ?___ftdiv:	
  6286                           ; 1 bytes @ 0x0
  6287                           
  6288  0020                     ___aldiv@counter:	
  6289                           ; 3 bytes @ 0x0
  6290                           
  6291  0020                     LCDWriteInt@value:	
  6292                           ; 1 bytes @ 0x0
  6293                           
  6294  0020                     ___ftdiv@f2:	
  6295                           ; 2 bytes @ 0x0
  6296                           
  6297                           
  6298                           ; 3 bytes @ 0x0
  6299  0020                     	ds	1
  6300  0021                     ??_Battery_State_Machine:	
  6301  0021                     ___aldiv@sign:	
  6302                           ; 1 bytes @ 0x1
  6303                           
  6304                           
  6305                           ; 1 bytes @ 0x1
  6306  0021                     	ds	1
  6307  0022                     LCDWriteInt@fieldLength:	
  6308  0022                     ___aldiv@quotient:	
  6309                           ; 1 bytes @ 0x2
  6310                           
  6311                           
  6312                           ; 4 bytes @ 0x2
  6313  0022                     	ds	1
  6314  0023                     LCDWriteInt@numPlaces:	
  6315  0023                     ___ftdiv@f1:	
  6316                           ; 1 bytes @ 0x3
  6317                           
  6318                           
  6319                           ; 3 bytes @ 0x3
  6320  0023                     	ds	1
  6321  0024                     LCDWriteInt@sign:	
  6322                           
  6323                           ; 1 bytes @ 0x4
  6324  0024                     	ds	1
  6325  0025                     ??_LCDWriteInt:	
  6326                           
  6327                           ; 1 bytes @ 0x5
  6328  0025                     	ds	1
  6329  0026                     ??___ftdiv:	
  6330  0026                     ?_readIAnalog:	
  6331                           ; 1 bytes @ 0x6
  6332                           
  6333  0026                     Battery_State_Machine@z:	
  6334                           ; 2 bytes @ 0x6
  6335                           
  6336  0026                     readIAnalog@channel:	
  6337                           ; 1 bytes @ 0x6
  6338                           
  6339                           
  6340                           ; 2 bytes @ 0x6
  6341  0026                     	ds	2
  6342  0028                     ??_readIAnalog:	
  6343                           
  6344                           ; 1 bytes @ 0x8
  6345  0028                     	ds	1
  6346  0029                     LCDWriteInt@str:	
  6347                           
  6348                           ; 5 bytes @ 0x9
  6349  0029                     	ds	1
  6350  002A                     ___ftdiv@cntr:	
  6351                           
  6352                           ; 1 bytes @ 0xA
  6353  002A                     	ds	1
  6354  002B                     ___ftdiv@f3:	
  6355                           
  6356                           ; 3 bytes @ 0xB
  6357  002B                     	ds	3
  6358  002E                     LCDWriteInt@j:	
  6359  002E                     ___ftdiv@exp:	
  6360                           ; 1 bytes @ 0xE
  6361                           
  6362                           
  6363                           ; 1 bytes @ 0xE
  6364  002E                     	ds	1
  6365  002F                     LCDWriteInt@i:	
  6366  002F                     ___ftdiv@sign:	
  6367                           ; 1 bytes @ 0xF
  6368                           
  6369                           
  6370                           ; 1 bytes @ 0xF
  6371  002F                     	ds	1
  6372  0030                     ?___ftmul:	
  6373  0030                     ?___fttol:	
  6374                           ; 3 bytes @ 0x10
  6375                           
  6376  0030                     ___ftmul@f1:	
  6377                           ; 4 bytes @ 0x10
  6378                           
  6379  0030                     ___fttol@f1:	
  6380                           ; 3 bytes @ 0x10
  6381                           
  6382                           
  6383                           ; 3 bytes @ 0x10
  6384  0030                     	ds	3
  6385  0033                     ___ftmul@f2:	
  6386                           
  6387                           ; 3 bytes @ 0x13
  6388  0033                     	ds	1
  6389  0034                     ??___fttol:	
  6390                           
  6391                           ; 1 bytes @ 0x14
  6392  0034                     	ds	2
  6393  0036                     ??___ftmul:	
  6394                           
  6395                           ; 1 bytes @ 0x16
  6396  0036                     	ds	2
  6397  0038                     ___fttol@sign1:	
  6398                           
  6399                           ; 1 bytes @ 0x18
  6400  0038                     	ds	1
  6401  0039                     ___fttol@lval:	
  6402                           
  6403                           ; 4 bytes @ 0x19
  6404  0039                     	ds	1
  6405  003A                     ___ftmul@exp:	
  6406                           
  6407                           ; 1 bytes @ 0x1A
  6408  003A                     	ds	1
  6409  003B                     ___ftmul@f3_as_product:	
  6410                           
  6411                           ; 3 bytes @ 0x1B
  6412  003B                     	ds	2
  6413  003D                     ___fttol@exp1:	
  6414                           
  6415                           ; 1 bytes @ 0x1D
  6416  003D                     	ds	1
  6417  003E                     ??_calculateCurrent0:	
  6418  003E                     ??_calculateCurrent1:	
  6419                           ; 1 bytes @ 0x1E
  6420                           
  6421  003E                     ??_calculateCurrent2:	
  6422                           ; 1 bytes @ 0x1E
  6423                           
  6424  003E                     ??_calculateCurrent3:	
  6425                           ; 1 bytes @ 0x1E
  6426                           
  6427  003E                     ___ftmul@cntr:	
  6428                           ; 1 bytes @ 0x1E
  6429                           
  6430                           
  6431                           ; 1 bytes @ 0x1E
  6432  003E                     	ds	1
  6433  003F                     ___ftmul@sign:	
  6434                           
  6435                           ; 1 bytes @ 0x1F
  6436  003F                     	ds	1
  6437  0040                     ?___ftadd:	
  6438  0040                     ___ftadd@f1:	
  6439                           ; 3 bytes @ 0x20
  6440                           
  6441                           
  6442                           ; 3 bytes @ 0x20
  6443  0040                     	ds	3
  6444  0043                     ___ftadd@f2:	
  6445                           
  6446                           ; 3 bytes @ 0x23
  6447  0043                     	ds	3
  6448  0046                     ??___ftadd:	
  6449                           
  6450                           ; 1 bytes @ 0x26
  6451  0046                     	ds	4
  6452  004A                     ___ftadd@sign:	
  6453                           
  6454                           ; 1 bytes @ 0x2A
  6455  004A                     	ds	1
  6456  004B                     ___ftadd@exp2:	
  6457                           
  6458                           ; 1 bytes @ 0x2B
  6459  004B                     	ds	1
  6460  004C                     ___ftadd@exp1:	
  6461                           
  6462                           ; 1 bytes @ 0x2C
  6463  004C                     	ds	1
  6464  004D                     ?_eval_poly:	
  6465  004D                     ?___ftsub:	
  6466                           ; 3 bytes @ 0x2D
  6467                           
  6468  004D                     ___ftsub@f2:	
  6469                           ; 3 bytes @ 0x2D
  6470                           
  6471  004D                     eval_poly@x:	
  6472                           ; 3 bytes @ 0x2D
  6473                           
  6474                           
  6475                           ; 3 bytes @ 0x2D
  6476  004D                     	ds	3
  6477  0050                     eval_poly@d:	
  6478  0050                     ___ftsub@f1:	
  6479                           ; 2 bytes @ 0x30
  6480                           
  6481                           
  6482                           ; 3 bytes @ 0x30
  6483  0050                     	ds	2
  6484  0052                     eval_poly@n:	
  6485                           
  6486                           ; 2 bytes @ 0x32
  6487  0052                     	ds	2
  6488  0054                     eval_poly@res:	
  6489                           
  6490                           ; 3 bytes @ 0x34
  6491  0054                     	ds	3
  6492  0057                     ?_log:	
  6493  0057                     log@x:	
  6494                           ; 3 bytes @ 0x37
  6495                           
  6496                           
  6497                           ; 3 bytes @ 0x37
  6498  0057                     	ds	3
  6499  005A                     ??_log:	
  6500                           
  6501                           ; 1 bytes @ 0x3A
  6502  005A                     	ds	1
  6503  005B                     log@exponent:	
  6504                           
  6505                           ; 2 bytes @ 0x3B
  6506  005B                     	ds	2
  6507  005D                     ?_tempCalc:	
  6508  005D                     tempCalc@analogValue:	
  6509                           ; 2 bytes @ 0x3D
  6510                           
  6511                           
  6512                           ; 2 bytes @ 0x3D
  6513  005D                     	ds	2
  6514  005F                     tempCalc@R:	
  6515                           
  6516                           ; 3 bytes @ 0x3F
  6517  005F                     	ds	3
  6518  0062                     _tempCalc$1188:	
  6519                           
  6520                           ; 3 bytes @ 0x42
  6521  0062                     	ds	3
  6522  0065                     tempCalc@steinhart:	
  6523                           
  6524                           ; 3 bytes @ 0x45
  6525  0065                     	ds	3
  6526  0068                     ??_main:	
  6527                           
  6528                           ; 1 bytes @ 0x48
  6529  0068                     	ds	2
  6530                           
  6531                           	psect	maintext
  6532  01EB                     __pmaintext:	
  6533 ;;
  6534 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  6535 ;;
  6536 ;; *************** function _main *****************
  6537 ;; Defined at:
  6538 ;;		line 41 in file "main.c"
  6539 ;; Parameters:    Size  Location     Type
  6540 ;;		None
  6541 ;; Auto vars:     Size  Location     Type
  6542 ;;  efficiency      3   22[BANK1 ] float 
  6543 ;;  dutyCycle7      2   31[BANK1 ] unsigned int 
  6544 ;;  dutyCycle6      2   29[BANK1 ] unsigned int 
  6545 ;;  MPPT1           2   26[BANK1 ] int 
  6546 ;;  MPPT0           2   15[BANK1 ] int 
  6547 ;;  dutyCycle1      2   11[BANK1 ] unsigned int 
  6548 ;;  faultNotRese    2    6[BANK1 ] unsigned int 
  6549 ;;  faultCount      2    4[BANK1 ] unsigned int 
  6550 ;;  batteryTemp     2    2[BANK1 ] int 
  6551 ;;  IOutTotal       2    0[BANK1 ] int 
  6552 ;;  j               1   28[BANK1 ] unsigned char 
  6553 ;;  menuButton      1   25[BANK1 ] unsigned char 
  6554 ;;  displayRefre    1   14[BANK1 ] unsigned char 
  6555 ;;  slowLoop        1   13[BANK1 ] unsigned char 
  6556 ;; Return value:  Size  Location     Type
  6557 ;;                  1    wreg      void 
  6558 ;; Registers used:
  6559 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6560 ;; Tracked objects:
  6561 ;;		On entry : B1F/0
  6562 ;;		On exit  : 0/0
  6563 ;;		Unchanged: 0/0
  6564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6565 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6566 ;;      Locals:         0       0      33       0       0       0       0       0       0       0       0       0       
      +0       0
  6567 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6568 ;;      Totals:         0       2      33       0       0       0       0       0       0       0       0       0       
      +0       0
  6569 ;;Total ram usage:       35 bytes
  6570 ;; Hardware stack levels required when called:    5
  6571 ;; This function calls:
  6572 ;;		_ADCRead
  6573 ;;		_Battery_State_Machine
  6574 ;;		_LCDClear
  6575 ;;		_LCDInit
  6576 ;;		_LCDWriteCharacter
  6577 ;;		_LCDWriteInt
  6578 ;;		_PWM6_LoadDutyValue
  6579 ;;		_PWM7_LoadDutyValue
  6580 ;;		_SYSTEM_Initialize
  6581 ;;		___awtoft
  6582 ;;		___ftdiv
  6583 ;;		___ftmul
  6584 ;;		___fttol
  6585 ;;		___wmul
  6586 ;;		_calculateCurrent0
  6587 ;;		_calculateCurrent1
  6588 ;;		_calculateCurrent2
  6589 ;;		_calculateCurrent3
  6590 ;;		_cc_cv_mode
  6591 ;;		_gotoXY
  6592 ;;		_readButton
  6593 ;;		_readIAnalog
  6594 ;;		_tempCalc
  6595 ;; This function is called by:
  6596 ;;		Startup code after reset
  6597 ;; This function uses a non-reentrant model
  6598 ;;
  6599                           
  6600                           
  6601                           ;psect for function _main
  6602  01EB                     _main:	
  6603                           
  6604                           ;main.c: 43: int16_t MPPT0 = 1550;
  6605                           
  6606                           ;incstack = 0
  6607                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6608  01EB  300E               	movlw	14
  6609  01EC  0021               	movlb	1	; select bank1
  6610  01ED  00DC               	movwf	main@MPPT0^(0+128)
  6611  01EE  3006               	movlw	6
  6612  01EF  00DD               	movwf	(main@MPPT0^(0+128)+1)
  6613                           
  6614                           ;main.c: 44: int16_t MPPT1 = 1550;
  6615  01F0  300E               	movlw	14
  6616  01F1  00E7               	movwf	main@MPPT1^(0+128)
  6617  01F2  3006               	movlw	6
  6618  01F3  00E8               	movwf	(main@MPPT1^(0+128)+1)
  6619                           
  6620                           ;main.c: 46: uint16_t dutyCycle6 = 1023;
  6621  01F4  30FF               	movlw	255
  6622  01F5  00EA               	movwf	main@dutyCycle6^(0+128)
  6623  01F6  3003               	movlw	3
  6624  01F7  00EB               	movwf	(main@dutyCycle6^(0+128)+1)
  6625                           
  6626                           ;main.c: 47: uint16_t dutyCycle7 = 1023;
  6627  01F8  30FF               	movlw	255
  6628  01F9  00EC               	movwf	main@dutyCycle7^(0+128)
  6629  01FA  3003               	movlw	3
  6630  01FB  00ED               	movwf	(main@dutyCycle7^(0+128)+1)
  6631                           
  6632                           ;main.c: 48: uint16_t dutyCycle1 = 60;
  6633  01FC  303C               	movlw	60
  6634  01FD  00D8               	movwf	main@dutyCycle1^(0+128)
  6635  01FE  3000               	movlw	0
  6636  01FF  00D9               	movwf	(main@dutyCycle1^(0+128)+1)
  6637                           
  6638                           ;main.c: 49: int16_t IOutTotal = 0;
  6639  0200  01CD               	clrf	main@IOutTotal^(0+128)
  6640  0201  01CE               	clrf	(main@IOutTotal+1)^(0+128)
  6641                           
  6642                           ;main.c: 51: uint8_t j = 0;
  6643  0202  01E9               	clrf	main@j^(0+128)
  6644                           
  6645                           ;main.c: 54: uint8_t slowLoop = 200;
  6646  0203  30C8               	movlw	200
  6647  0204  0020               	movlb	0	; select bank0
  6648  0205  00E8               	movwf	??_main
  6649  0206  0868               	movf	??_main,w
  6650  0207  0021               	movlb	1	; select bank1
  6651  0208  00DA               	movwf	main@slowLoop^(0+128)
  6652                           
  6653                           ;main.c: 55: uint8_t displayRefresh = 0;
  6654  0209  01DB               	clrf	main@displayRefresh^(0+128)
  6655                           
  6656                           ;main.c: 56: int16_t batteryTemp = 250;
  6657  020A  30FA               	movlw	250
  6658  020B  00CF               	movwf	main@batteryTemp^(0+128)
  6659  020C  3000               	movlw	0
  6660  020D  00D0               	movwf	(main@batteryTemp^(0+128)+1)
  6661                           
  6662                           ;main.c: 57: float efficiency = 0;
  6663  020E  3000               	movlw	0
  6664  020F  00E3               	movwf	main@efficiency^(0+128)
  6665  0210  3000               	movlw	0
  6666  0211  00E4               	movwf	(main@efficiency+1)^(0+128)
  6667  0212  3000               	movlw	0
  6668  0213  00E5               	movwf	(main@efficiency+2)^(0+128)
  6669                           
  6670                           ;main.c: 58: extern int8_t Imode[2];
  6671                           ;main.c: 59: extern int16_t Vref[2];
  6672                           ;main.c: 60: extern int16_t Iref[2];
  6673                           ;main.c: 61: uint8_t menuButton = 0;
  6674  0214  01E6               	clrf	main@menuButton^(0+128)
  6675                           
  6676                           ;main.c: 62: uint16_t faultCount = 0;
  6677  0215  01D1               	clrf	main@faultCount^(0+128)
  6678  0216  01D2               	clrf	(main@faultCount+1)^(0+128)
  6679                           
  6680                           ;main.c: 63: uint16_t faultNotReset = 0;
  6681  0217  01D3               	clrf	main@faultNotReset^(0+128)
  6682  0218  01D4               	clrf	(main@faultNotReset+1)^(0+128)
  6683                           
  6684                           ;main.c: 64: extern int8_t VHoldMode[2];
  6685                           ;main.c: 65: extern uint8_t batteryState[2];
  6686                           ;main.c: 67: extern uint16_t IminCount[2];
  6687                           ;main.c: 70: SYSTEM_Initialize();
  6688  0219  3194  247B  3181   	fcall	_SYSTEM_Initialize
  6689                           
  6690                           ;main.c: 72: LCDClear();
  6691  021C  3193  23BE  3181   	fcall	_LCDClear
  6692  021F                     l3116:	
  6693                           ;main.c: 74: void calculateCurrent0(void);
  6694                           ;main.c: 75: void calculateCurrent1(void);
  6695                           ;main.c: 76: void calculateCurrent2(void);
  6696                           ;main.c: 77: void calculateCurrent3(void);
  6697                           ;main.c: 91: while (1)
  6698                           
  6699                           
  6700                           ;main.c: 92: {
  6701                           ;main.c: 93: if(!(RB2))
  6702  021F  0020               	movlb	0	; select bank0
  6703  0220  190D               	btfsc	13,2	;volatile
  6704  0221  2A33               	goto	l3124
  6705                           
  6706                           ;main.c: 94: {
  6707                           ;main.c: 95: LATA5=0;
  6708  0222  1296               	bcf	22,5	;volatile
  6709                           
  6710                           ;main.c: 96: _delay((unsigned long)((400)*(32000000/4000000.0)));
  6711  0223  3005               	movlw	5
  6712  0224  0020               	movlb	0	; select bank0
  6713  0225  00E8               	movwf	??_main
  6714  0226  3026               	movlw	38
  6715  0227                     u3977:	
  6716  0227  0B89               	decfsz	9,f
  6717  0228  2A27               	goto	u3977
  6718  0229  0BE8               	decfsz	??_main,f
  6719  022A  2A27               	goto	u3977
  6720  022B  0000               	nop
  6721                           
  6722                           ;main.c: 97: faultCount+=1;
  6723  022C  3001               	movlw	1
  6724  022D  0021               	movlb	1	; select bank1
  6725  022E  07D1               	addwf	main@faultCount^(0+128),f
  6726  022F  3000               	movlw	0
  6727  0230  3DD2               	addwfc	(main@faultCount+1)^(0+128),f
  6728                           
  6729                           ;main.c: 98: LATA5=1;
  6730  0231  0020               	movlb	0	; select bank0
  6731  0232  1696               	bsf	22,5	;volatile
  6732  0233                     l3124:	
  6733                           
  6734                           ;main.c: 99: }
  6735                           ;main.c: 100: for(j=0;j<4;j++) Ianalogs[j]=readIAnalog(j);
  6736  0233  0021               	movlb	1	; select bank1
  6737  0234  01E9               	clrf	main@j^(0+128)
  6738  0235  3004               	movlw	4
  6739  0236  0269               	subwf	main@j^(0+128),w
  6740  0237  1803               	btfsc	3,0
  6741  0238  2A57               	goto	l3136
  6742  0239                     l3130:	
  6743  0239  0869               	movf	main@j^(0+128),w
  6744  023A  0020               	movlb	0	; select bank0
  6745  023B  00E8               	movwf	??_main
  6746  023C  01E9               	clrf	??_main+1
  6747  023D  0868               	movf	??_main,w
  6748  023E  00A6               	movwf	readIAnalog@channel
  6749  023F  0869               	movf	??_main+1,w
  6750  0240  00A7               	movwf	readIAnalog@channel+1
  6751  0241  318E  26B4  3181   	fcall	_readIAnalog
  6752  0244  0021               	movlb	1	; select bank1
  6753  0245  3569               	lslf	main@j^(0+128),w
  6754  0246  3EA0               	addlw	(low (_Ianalogs| 0))& (0+255)
  6755  0247  0086               	movwf	6
  6756  0248  0187               	clrf	7
  6757  0249  0020               	movlb	0	; select bank0
  6758  024A  0826               	movf	?_readIAnalog,w
  6759  024B  3FC0               	movwi [0]fsr1
  6760  024C  0827               	movf	?_readIAnalog+1,w
  6761  024D  3FC1               	movwi [1]fsr1
  6762  024E  3001               	movlw	1
  6763  024F  00E8               	movwf	??_main
  6764  0250  0868               	movf	??_main,w
  6765  0251  0021               	movlb	1	; select bank1
  6766  0252  07E9               	addwf	main@j^(0+128),f
  6767  0253  3004               	movlw	4
  6768  0254  0269               	subwf	main@j^(0+128),w
  6769  0255  1C03               	skipc
  6770  0256  2A39               	goto	l3130
  6771  0257                     l3136:	
  6772                           
  6773                           ;main.c: 102: Vanalogs[0]=ADCRead(21);
  6774  0257  3015               	movlw	21
  6775  0258  3192  22F6  3181   	fcall	_ADCRead
  6776  025B  0871               	movf	?_ADCRead+1,w
  6777  025C  0022               	movlb	2	; select bank2
  6778  025D  00B1               	movwf	(_Vanalogs+1)^(0+256)
  6779  025E  0870               	movf	?_ADCRead,w
  6780  025F  00B0               	movwf	_Vanalogs^(0+256)
  6781                           
  6782                           ;main.c: 104: Vanalogs[1]=ADCRead(17);
  6783  0260  3011               	movlw	17
  6784  0261  3192  22F6  3181   	fcall	_ADCRead
  6785  0264  0871               	movf	?_ADCRead+1,w
  6786  0265  0022               	movlb	2	; select bank2
  6787  0266  00B3               	movwf	((_Vanalogs+1)^(0+256)+2)
  6788  0267  0870               	movf	?_ADCRead,w
  6789  0268  00B2               	movwf	(_Vanalogs^(0+256)+2)
  6790                           
  6791                           ;main.c: 106: Vanalogs[2]=ADCRead(23);
  6792  0269  3017               	movlw	23
  6793  026A  3192  22F6  3181   	fcall	_ADCRead
  6794  026D  0871               	movf	?_ADCRead+1,w
  6795  026E  0022               	movlb	2	; select bank2
  6796  026F  00B5               	movwf	((_Vanalogs+1)^(0+256)+4)
  6797  0270  0870               	movf	?_ADCRead,w
  6798  0271  00B4               	movwf	(_Vanalogs^(0+256)+4)
  6799                           
  6800                           ;main.c: 108: Vanalogs[3]=ADCRead(19);
  6801  0272  3013               	movlw	19
  6802  0273  3192  22F6  3181   	fcall	_ADCRead
  6803  0276  0871               	movf	?_ADCRead+1,w
  6804  0277  0022               	movlb	2	; select bank2
  6805  0278  00B7               	movwf	((_Vanalogs+1)^(0+256)+6)
  6806  0279  0870               	movf	?_ADCRead,w
  6807  027A  00B6               	movwf	(_Vanalogs^(0+256)+6)
  6808                           
  6809                           ;main.c: 110: if(!(RB2))faultNotReset+=1;
  6810  027B  0020               	movlb	0	; select bank0
  6811  027C  190D               	btfsc	13,2	;volatile
  6812  027D  2A83               	goto	l3142
  6813  027E  3001               	movlw	1
  6814  027F  0021               	movlb	1	; select bank1
  6815  0280  07D3               	addwf	main@faultNotReset^(0+128),f
  6816  0281  3000               	movlw	0
  6817  0282  3DD4               	addwfc	(main@faultNotReset+1)^(0+128),f
  6818  0283                     l3142:	
  6819                           
  6820                           ;main.c: 120: voltage[0]=(int16_t)(Vanalogs[0]/.5448);
  6821  0283  0022               	movlb	2	; select bank2
  6822  0284  0831               	movf	(_Vanalogs+1)^(0+256),w
  6823  0285  00F9               	movwf	___awtoft@c+1
  6824  0286  0830               	movf	_Vanalogs^(0+256),w
  6825  0287  00F8               	movwf	___awtoft@c
  6826  0288  3193  2379  3181   	fcall	___awtoft
  6827  028B  0878               	movf	?___awtoft,w
  6828  028C  0020               	movlb	0	; select bank0
  6829  028D  00A3               	movwf	___ftdiv@f1
  6830  028E  0879               	movf	?___awtoft+1,w
  6831  028F  00A4               	movwf	___ftdiv@f1+1
  6832  0290  087A               	movf	?___awtoft+2,w
  6833  0291  00A5               	movwf	___ftdiv@f1+2
  6834  0292  3078               	movlw	120
  6835  0293  00A0               	movwf	___ftdiv@f2
  6836  0294  300B               	movlw	11
  6837  0295  00A1               	movwf	___ftdiv@f2+1
  6838  0296  303F               	movlw	63
  6839  0297  00A2               	movwf	___ftdiv@f2+2
  6840  0298  3188  20FD  3181   	fcall	___ftdiv
  6841  029B  0020               	movlb	0	; select bank0
  6842  029C  0820               	movf	?___ftdiv,w
  6843  029D  00B0               	movwf	___fttol@f1
  6844  029E  0821               	movf	?___ftdiv+1,w
  6845  029F  00B1               	movwf	___fttol@f1+1
  6846  02A0  0822               	movf	?___ftdiv+2,w
  6847  02A1  00B2               	movwf	___fttol@f1+2
  6848  02A2  3180  2016  3181   	fcall	___fttol
  6849  02A5  0020               	movlb	0	; select bank0
  6850  02A6  0831               	movf	?___fttol+1,w
  6851  02A7  0021               	movlb	1	; select bank1
  6852  02A8  00B1               	movwf	(_voltage+1)^(0+128)
  6853  02A9  0020               	movlb	0	; select bank0
  6854  02AA  0830               	movf	?___fttol,w
  6855  02AB  0021               	movlb	1	; select bank1
  6856  02AC  00B0               	movwf	_voltage^(0+128)
  6857                           
  6858                           ;main.c: 122: voltage[1]=(int16_t)(Vanalogs[1]/.540757);
  6859  02AD  0022               	movlb	2	; select bank2
  6860  02AE  0833               	movf	((_Vanalogs+1)^(0+256)+2),w
  6861  02AF  00F9               	movwf	___awtoft@c+1
  6862  02B0  0832               	movf	(_Vanalogs^(0+256)+2),w
  6863  02B1  00F8               	movwf	___awtoft@c
  6864  02B2  3193  2379  3181   	fcall	___awtoft
  6865  02B5  0878               	movf	?___awtoft,w
  6866  02B6  0020               	movlb	0	; select bank0
  6867  02B7  00A3               	movwf	___ftdiv@f1
  6868  02B8  0879               	movf	?___awtoft+1,w
  6869  02B9  00A4               	movwf	___ftdiv@f1+1
  6870  02BA  087A               	movf	?___awtoft+2,w
  6871  02BB  00A5               	movwf	___ftdiv@f1+2
  6872  02BC  306F               	movlw	111
  6873  02BD  00A0               	movwf	___ftdiv@f2
  6874  02BE  300A               	movlw	10
  6875  02BF  00A1               	movwf	___ftdiv@f2+1
  6876  02C0  303F               	movlw	63
  6877  02C1  00A2               	movwf	___ftdiv@f2+2
  6878  02C2  3188  20FD  3181   	fcall	___ftdiv
  6879  02C5  0020               	movlb	0	; select bank0
  6880  02C6  0820               	movf	?___ftdiv,w
  6881  02C7  00B0               	movwf	___fttol@f1
  6882  02C8  0821               	movf	?___ftdiv+1,w
  6883  02C9  00B1               	movwf	___fttol@f1+1
  6884  02CA  0822               	movf	?___ftdiv+2,w
  6885  02CB  00B2               	movwf	___fttol@f1+2
  6886  02CC  3180  2016  3181   	fcall	___fttol
  6887  02CF  0020               	movlb	0	; select bank0
  6888  02D0  0831               	movf	?___fttol+1,w
  6889  02D1  0021               	movlb	1	; select bank1
  6890  02D2  00B3               	movwf	((_voltage+1)^(0+128)+2)
  6891  02D3  0020               	movlb	0	; select bank0
  6892  02D4  0830               	movf	?___fttol,w
  6893  02D5  0021               	movlb	1	; select bank1
  6894  02D6  00B2               	movwf	(_voltage^(0+128)+2)
  6895                           
  6896                           ;main.c: 124: voltage[2]=(int16_t)(Vanalogs[2]/.405775);
  6897  02D7  0022               	movlb	2	; select bank2
  6898  02D8  0835               	movf	((_Vanalogs+1)^(0+256)+4),w
  6899  02D9  00F9               	movwf	___awtoft@c+1
  6900  02DA  0834               	movf	(_Vanalogs^(0+256)+4),w
  6901  02DB  00F8               	movwf	___awtoft@c
  6902  02DC  3193  2379  3181   	fcall	___awtoft
  6903  02DF  0878               	movf	?___awtoft,w
  6904  02E0  0020               	movlb	0	; select bank0
  6905  02E1  00A3               	movwf	___ftdiv@f1
  6906  02E2  0879               	movf	?___awtoft+1,w
  6907  02E3  00A4               	movwf	___ftdiv@f1+1
  6908  02E4  087A               	movf	?___awtoft+2,w
  6909  02E5  00A5               	movwf	___ftdiv@f1+2
  6910  02E6  30C2               	movlw	194
  6911  02E7  00A0               	movwf	___ftdiv@f2
  6912  02E8  30CF               	movlw	207
  6913  02E9  00A1               	movwf	___ftdiv@f2+1
  6914  02EA  303E               	movlw	62
  6915  02EB  00A2               	movwf	___ftdiv@f2+2
  6916  02EC  3188  20FD  3181   	fcall	___ftdiv
  6917  02EF  0020               	movlb	0	; select bank0
  6918  02F0  0820               	movf	?___ftdiv,w
  6919  02F1  00B0               	movwf	___fttol@f1
  6920  02F2  0821               	movf	?___ftdiv+1,w
  6921  02F3  00B1               	movwf	___fttol@f1+1
  6922  02F4  0822               	movf	?___ftdiv+2,w
  6923  02F5  00B2               	movwf	___fttol@f1+2
  6924  02F6  3180  2016  3181   	fcall	___fttol
  6925  02F9  0020               	movlb	0	; select bank0
  6926  02FA  0831               	movf	?___fttol+1,w
  6927  02FB  0021               	movlb	1	; select bank1
  6928  02FC  00B5               	movwf	((_voltage+1)^(0+128)+4)
  6929  02FD  0020               	movlb	0	; select bank0
  6930  02FE  0830               	movf	?___fttol,w
  6931  02FF  0021               	movlb	1	; select bank1
  6932  0300  00B4               	movwf	(_voltage^(0+128)+4)
  6933                           
  6934                           ;main.c: 126: voltage[3]=(int16_t)(Vanalogs[3]/.406788);
  6935  0301  0022               	movlb	2	; select bank2
  6936  0302  0837               	movf	((_Vanalogs+1)^(0+256)+6),w
  6937  0303  00F9               	movwf	___awtoft@c+1
  6938  0304  0836               	movf	(_Vanalogs^(0+256)+6),w
  6939  0305  00F8               	movwf	___awtoft@c
  6940  0306  3193  2379  3181   	fcall	___awtoft
  6941  0309  0878               	movf	?___awtoft,w
  6942  030A  0020               	movlb	0	; select bank0
  6943  030B  00A3               	movwf	___ftdiv@f1
  6944  030C  0879               	movf	?___awtoft+1,w
  6945  030D  00A4               	movwf	___ftdiv@f1+1
  6946  030E  087A               	movf	?___awtoft+2,w
  6947  030F  00A5               	movwf	___ftdiv@f1+2
  6948  0310  3047               	movlw	71
  6949  0311  00A0               	movwf	___ftdiv@f2
  6950  0312  30D0               	movlw	208
  6951  0313  00A1               	movwf	___ftdiv@f2+1
  6952  0314  303E               	movlw	62
  6953  0315  00A2               	movwf	___ftdiv@f2+2
  6954  0316  3188  20FD  3181   	fcall	___ftdiv
  6955  0319  0020               	movlb	0	; select bank0
  6956  031A  0820               	movf	?___ftdiv,w
  6957  031B  00B0               	movwf	___fttol@f1
  6958  031C  0821               	movf	?___ftdiv+1,w
  6959  031D  00B1               	movwf	___fttol@f1+1
  6960  031E  0822               	movf	?___ftdiv+2,w
  6961  031F  00B2               	movwf	___fttol@f1+2
  6962  0320  3180  2016  3181   	fcall	___fttol
  6963  0323  0020               	movlb	0	; select bank0
  6964  0324  0831               	movf	?___fttol+1,w
  6965  0325  0021               	movlb	1	; select bank1
  6966  0326  00B7               	movwf	((_voltage+1)^(0+128)+6)
  6967  0327  0020               	movlb	0	; select bank0
  6968  0328  0830               	movf	?___fttol,w
  6969  0329  0021               	movlb	1	; select bank1
  6970  032A  00B6               	movwf	(_voltage^(0+128)+6)
  6971                           
  6972                           ;main.c: 128: calculateCurrent0();
  6973  032B  3195  2565  3181   	fcall	_calculateCurrent0
  6974                           
  6975                           ;main.c: 130: calculateCurrent1();
  6976  032E  3195  25AA  3181   	fcall	_calculateCurrent1
  6977                           
  6978                           ;main.c: 132: calculateCurrent2();
  6979  0331  3195  25EF  3181   	fcall	_calculateCurrent2
  6980                           
  6981                           ;main.c: 134: calculateCurrent3();
  6982  0334  3196  2634  3181   	fcall	_calculateCurrent3
  6983                           
  6984                           ;main.c: 136: if(Imode[0])
  6985  0337  0021               	movlb	1	; select bank1
  6986  0338  086E               	movf	_Imode^(0+128),w
  6987  0339  1903               	btfsc	3,2
  6988  033A  2B5B               	goto	l3172
  6989                           
  6990                           ;main.c: 137: {
  6991                           ;main.c: 138: if(voltage[2]<MPPT0)
  6992  033B  0835               	movf	((_voltage+1)^(0+128)+4),w
  6993  033C  3A80               	xorlw	128
  6994  033D  0020               	movlb	0	; select bank0
  6995  033E  00E8               	movwf	??_main
  6996  033F  0021               	movlb	1	; select bank1
  6997  0340  085D               	movf	(main@MPPT0+1)^(0+128),w
  6998  0341  3A80               	xorlw	128
  6999  0342  0020               	movlb	0	; select bank0
  7000  0343  0268               	subwf	??_main,w
  7001  0344  1D03               	skipz
  7002  0345  2B49               	goto	u3725
  7003  0346  0021               	movlb	1	; select bank1
  7004  0347  085C               	movf	main@MPPT0^(0+128),w
  7005  0348  0234               	subwf	(_voltage^(0+128)+4),w
  7006  0349                     u3725:	
  7007  0349  1C03               	btfss	3,0
  7008  034A  2B6B               	goto	L1
  7009                           
  7010                           ;main.c: 145: else if(voltage[2]>MPPT0)
  7011                           
  7012                           ;main.c: 143: }
  7013                           ;main.c: 144: }
  7014                           
  7015                           ;main.c: 141: {
  7016                           ;main.c: 142: dutyCycle6+=1;
  7017                           
  7018                           ;main.c: 139: {
  7019                           ;main.c: 140: if(dutyCycle6<1023)
  7020  034B  0021               	movlb	1	; select bank1
  7021  034C  085D               	movf	(main@MPPT0+1)^(0+128),w
  7022  034D  3A80               	xorlw	128
  7023  034E  0020               	movlb	0	; select bank0
  7024  034F  00E8               	movwf	??_main
  7025  0350  0021               	movlb	1	; select bank1
  7026  0351  0835               	movf	((_voltage+1)^(0+128)+4),w
  7027  0352  3A80               	xorlw	128
  7028  0353  0020               	movlb	0	; select bank0
  7029  0354  0268               	subwf	??_main,w
  7030  0355  1D03               	skipz
  7031  0356  2B87               	goto	u3785
  7032  0357  0021               	movlb	1	; select bank1
  7033  0358  0834               	movf	(_voltage^(0+128)+4),w
  7034  0359  025C               	subwf	main@MPPT0^(0+128),w
  7035  035A  2B87               	goto	u3785
  7036  035B                     l3172:	
  7037                           ;main.c: 153: }
  7038                           
  7039                           ;main.c: 150: }
  7040                           ;main.c: 151: }
  7041                           
  7042                           ;main.c: 148: {
  7043                           ;main.c: 149: dutyCycle6-=1;
  7044                           
  7045                           ;main.c: 146: {
  7046                           ;main.c: 147: if(dutyCycle6>0)
  7047                           
  7048                           
  7049                           ;main.c: 154: else
  7050                           ;main.c: 155: {
  7051                           ;main.c: 156: if(voltage[0]>(int16_t)Vref[0])
  7052  035B  0839               	movf	(_Vref+1)^(0+128),w
  7053  035C  3A80               	xorlw	128
  7054  035D  0020               	movlb	0	; select bank0
  7055  035E  00E8               	movwf	??_main
  7056  035F  0021               	movlb	1	; select bank1
  7057  0360  0831               	movf	(_voltage+1)^(0+128),w
  7058  0361  3A80               	xorlw	128
  7059  0362  0020               	movlb	0	; select bank0
  7060  0363  0268               	subwf	??_main,w
  7061  0364  1D03               	skipz
  7062  0365  2B69               	goto	u3765
  7063  0366  0021               	movlb	1	; select bank1
  7064  0367  0830               	movf	_voltage^(0+128),w
  7065  0368  0238               	subwf	_Vref^(0+128),w
  7066  0369                     u3765:	
  7067  0369  1803               	skipnc
  7068  036A  2B78               	goto	l3178
  7069  036B                     L1:	
  7070                           
  7071                           ;main.c: 157: {
  7072                           ;main.c: 158: if(dutyCycle6<1023) dutyCycle6+=1;
  7073  036B  3003               	movlw	3
  7074  036C  0021               	movlb	1	; select bank1
  7075  036D  026B               	subwf	(main@dutyCycle6+1)^(0+128),w
  7076  036E  30FF               	movlw	255
  7077  036F  1903               	skipnz
  7078  0370  026A               	subwf	main@dutyCycle6^(0+128),w
  7079  0371  1803               	skipnc
  7080  0372  2B92               	goto	l3184
  7081  0373  3001               	movlw	1
  7082  0374  07EA               	addwf	main@dutyCycle6^(0+128),f
  7083  0375  3000               	movlw	0
  7084  0376  3DEB               	addwfc	(main@dutyCycle6+1)^(0+128),f
  7085                           
  7086                           ;main.c: 159: }
  7087  0377  2B92               	goto	l3184
  7088  0378                     l3178:	
  7089                           
  7090                           ;main.c: 160: else if(voltage[0]<(int16_t)Vref[0])
  7091  0378  0021               	movlb	1	; select bank1
  7092  0379  0831               	movf	(_voltage+1)^(0+128),w
  7093  037A  3A80               	xorlw	128
  7094  037B  0020               	movlb	0	; select bank0
  7095  037C  00E8               	movwf	??_main
  7096  037D  0021               	movlb	1	; select bank1
  7097  037E  0839               	movf	(_Vref+1)^(0+128),w
  7098  037F  3A80               	xorlw	128
  7099  0380  0020               	movlb	0	; select bank0
  7100  0381  0268               	subwf	??_main,w
  7101  0382  1D03               	skipz
  7102  0383  2B87               	goto	u3785
  7103  0384  0021               	movlb	1	; select bank1
  7104  0385  0838               	movf	_Vref^(0+128),w
  7105  0386  0230               	subwf	_voltage^(0+128),w
  7106  0387                     u3785:	
  7107  0387  1803               	skipnc
  7108  0388  2B92               	goto	l3184
  7109                           
  7110                           ;main.c: 161: {
  7111                           ;main.c: 162: if(dutyCycle6>0) dutyCycle6-=1;;
  7112  0389  0021               	movlb	1	; select bank1
  7113  038A  086A               	movf	main@dutyCycle6^(0+128),w
  7114  038B  046B               	iorwf	(main@dutyCycle6+1)^(0+128),w
  7115  038C  1903               	btfsc	3,2
  7116  038D  2B92               	goto	l3184
  7117  038E  3001               	movlw	1
  7118  038F  02EA               	subwf	main@dutyCycle6^(0+128),f
  7119  0390  3000               	movlw	0
  7120  0391  3BEB               	subwfb	(main@dutyCycle6+1)^(0+128),f
  7121  0392                     l3184:	
  7122                           ;main.c: 163: }
  7123                           
  7124                           
  7125                           ;main.c: 165: }
  7126                           ;main.c: 167: if(Imode[1])
  7127  0392  0021               	movlb	1	; select bank1
  7128  0393  086F               	movf	(_Imode^(0+128)+1),w
  7129  0394  1903               	btfsc	3,2
  7130  0395  2BA7               	goto	l3196
  7131                           
  7132                           ;main.c: 168: {
  7133                           ;main.c: 169: if(voltage[3]<MPPT1)
  7134  0396  0837               	movf	((_voltage+1)^(0+128)+6),w
  7135  0397  3A80               	xorlw	128
  7136  0398  0020               	movlb	0	; select bank0
  7137  0399  00E8               	movwf	??_main
  7138  039A  0021               	movlb	1	; select bank1
  7139  039B  0868               	movf	(main@MPPT1+1)^(0+128),w
  7140  039C  3A80               	xorlw	128
  7141  039D  0020               	movlb	0	; select bank0
  7142  039E  0268               	subwf	??_main,w
  7143  039F  1D03               	skipz
  7144  03A0  2BA4               	goto	u3815
  7145  03A1  0021               	movlb	1	; select bank1
  7146  03A2  0867               	movf	main@MPPT1^(0+128),w
  7147  03A3  0236               	subwf	(_voltage^(0+128)+6),w
  7148  03A4                     u3815:	
  7149  03A4  1C03               	btfss	3,0
  7150  03A5  2BB7               	goto	L2
  7151                           
  7152                           ;main.c: 174: }
  7153                           ;main.c: 175: }
  7154                           
  7155                           ;main.c: 172: {
  7156                           ;main.c: 173: dutyCycle7+=1;
  7157                           
  7158                           ;main.c: 170: {
  7159                           ;main.c: 171: if(dutyCycle7<1023)
  7160  03A6  2BD5               	goto	L3
  7161  03A7                     l3196:	
  7162                           ;main.c: 179: }
  7163                           ;main.c: 180: }
  7164                           
  7165                           ;main.c: 177: {
  7166                           ;main.c: 178: dutyCycle7-=1;
  7167                           
  7168                           ;main.c: 176: else if(dutyCycle7>0)
  7169                           
  7170                           
  7171                           ;main.c: 181: else
  7172                           ;main.c: 182: {
  7173                           ;main.c: 183: if(voltage[1]>(int16_t)Vref[1])
  7174  03A7  083B               	movf	((_Vref+1)^(0+128)+2),w
  7175  03A8  3A80               	xorlw	128
  7176  03A9  0020               	movlb	0	; select bank0
  7177  03AA  00E8               	movwf	??_main
  7178  03AB  0021               	movlb	1	; select bank1
  7179  03AC  0833               	movf	((_voltage+1)^(0+128)+2),w
  7180  03AD  3A80               	xorlw	128
  7181  03AE  0020               	movlb	0	; select bank0
  7182  03AF  0268               	subwf	??_main,w
  7183  03B0  1D03               	skipz
  7184  03B1  2BB5               	goto	u3845
  7185  03B2  0021               	movlb	1	; select bank1
  7186  03B3  0832               	movf	(_voltage^(0+128)+2),w
  7187  03B4  023A               	subwf	(_Vref^(0+128)+2),w
  7188  03B5                     u3845:	
  7189  03B5  1803               	skipnc
  7190  03B6  2BC4               	goto	l3202
  7191  03B7                     L2:	
  7192                           
  7193                           ;main.c: 184: {
  7194                           ;main.c: 185: if(dutyCycle7<1023) dutyCycle7+=1;
  7195  03B7  3003               	movlw	3
  7196  03B8  0021               	movlb	1	; select bank1
  7197  03B9  026D               	subwf	(main@dutyCycle7+1)^(0+128),w
  7198  03BA  30FF               	movlw	255
  7199  03BB  1903               	skipnz
  7200  03BC  026C               	subwf	main@dutyCycle7^(0+128),w
  7201  03BD  1803               	skipnc
  7202  03BE  2BDE               	goto	l3208
  7203  03BF  3001               	movlw	1
  7204  03C0  07EC               	addwf	main@dutyCycle7^(0+128),f
  7205  03C1  3000               	movlw	0
  7206  03C2  3DED               	addwfc	(main@dutyCycle7+1)^(0+128),f
  7207                           
  7208                           ;main.c: 186: }
  7209  03C3  2BDE               	goto	l3208
  7210  03C4                     l3202:	
  7211                           
  7212                           ;main.c: 187: else if(voltage[1]<(int16_t)Vref[1])
  7213  03C4  0021               	movlb	1	; select bank1
  7214  03C5  0833               	movf	((_voltage+1)^(0+128)+2),w
  7215  03C6  3A80               	xorlw	128
  7216  03C7  0020               	movlb	0	; select bank0
  7217  03C8  00E8               	movwf	??_main
  7218  03C9  0021               	movlb	1	; select bank1
  7219  03CA  083B               	movf	((_Vref+1)^(0+128)+2),w
  7220  03CB  3A80               	xorlw	128
  7221  03CC  0020               	movlb	0	; select bank0
  7222  03CD  0268               	subwf	??_main,w
  7223  03CE  1D03               	skipz
  7224  03CF  2BD3               	goto	u3865
  7225  03D0  0021               	movlb	1	; select bank1
  7226  03D1  083A               	movf	(_Vref^(0+128)+2),w
  7227  03D2  0232               	subwf	(_voltage^(0+128)+2),w
  7228  03D3                     u3865:	
  7229  03D3  1803               	skipnc
  7230  03D4  2BDE               	goto	l3208
  7231  03D5                     L3:	
  7232                           
  7233                           ;main.c: 188: {
  7234                           ;main.c: 189: if(dutyCycle7>0) dutyCycle7-=1;;
  7235  03D5  0021               	movlb	1	; select bank1
  7236  03D6  086C               	movf	main@dutyCycle7^(0+128),w
  7237  03D7  046D               	iorwf	(main@dutyCycle7+1)^(0+128),w
  7238  03D8  1903               	btfsc	3,2
  7239  03D9  2BDE               	goto	l3208
  7240  03DA  3001               	movlw	1
  7241  03DB  02EC               	subwf	main@dutyCycle7^(0+128),f
  7242  03DC  3000               	movlw	0
  7243  03DD  3BED               	subwfb	(main@dutyCycle7+1)^(0+128),f
  7244  03DE                     l3208:	
  7245                           ;main.c: 190: }
  7246                           
  7247                           
  7248                           ;main.c: 192: }
  7249                           ;main.c: 194: slowLoop+=1;
  7250  03DE  3001               	movlw	1
  7251  03DF  0020               	movlb	0	; select bank0
  7252  03E0  00E8               	movwf	??_main
  7253  03E1  0868               	movf	??_main,w
  7254  03E2  0021               	movlb	1	; select bank1
  7255  03E3  07DA               	addwf	main@slowLoop^(0+128),f
  7256                           
  7257                           ;main.c: 197: PWM6_LoadDutyValue(dutyCycle6);
  7258  03E4  086B               	movf	(main@dutyCycle6+1)^(0+128),w
  7259  03E5  00F1               	movwf	PWM6_LoadDutyValue@dutyCycle6+1
  7260  03E6  086A               	movf	main@dutyCycle6^(0+128),w
  7261  03E7  00F0               	movwf	PWM6_LoadDutyValue@dutyCycle6
  7262  03E8  3193  230B  3181   	fcall	_PWM6_LoadDutyValue
  7263                           
  7264                           ;main.c: 198: PWM7_LoadDutyValue(dutyCycle7);
  7265  03EB  0021               	movlb	1	; select bank1
  7266  03EC  086D               	movf	(main@dutyCycle7+1)^(0+128),w
  7267  03ED  00F1               	movwf	PWM7_LoadDutyValue@dutyCycle7+1
  7268  03EE  086C               	movf	main@dutyCycle7^(0+128),w
  7269  03EF  00F0               	movwf	PWM7_LoadDutyValue@dutyCycle7
  7270  03F0  3188  2001  3181   	fcall	_PWM7_LoadDutyValue
  7271                           
  7272                           ;main.c: 200: menuButton = readButton();
  7273  03F3  3197  277E  3181   	fcall	_readButton
  7274  03F6  0020               	movlb	0	; select bank0
  7275  03F7  00E8               	movwf	??_main
  7276  03F8  0868               	movf	??_main,w
  7277  03F9  0021               	movlb	1	; select bank1
  7278  03FA  00E6               	movwf	main@menuButton^(0+128)
  7279                           
  7280                           ;main.c: 201: if(menuButton == 2) if(MPPT1>1375)MPPT1-=1;
  7281  03FB  3002               	movlw	2
  7282  03FC  0666               	xorwf	main@menuButton^(0+128),w
  7283  03FD  1D03               	btfss	3,2
  7284  03FE  2C11               	goto	l3222
  7285  03FF  0868               	movf	(main@MPPT1+1)^(0+128),w
  7286  0400  3A80               	xorlw	128
  7287  0401  0020               	movlb	0	; select bank0
  7288  0402  00E8               	movwf	??_main
  7289  0403  3085               	movlw	133
  7290  0404  0268               	subwf	??_main,w
  7291  0405  1D03               	skipz
  7292  0406  2C0A               	goto	u3895
  7293  0407  3060               	movlw	96
  7294  0408  0021               	movlb	1	; select bank1
  7295  0409  0267               	subwf	main@MPPT1^(0+128),w
  7296  040A                     u3895:	
  7297  040A  1C03               	skipc
  7298  040B  2C11               	goto	l3222
  7299  040C  30FF               	movlw	255
  7300  040D  0021               	movlb	1	; select bank1
  7301  040E  07E7               	addwf	main@MPPT1^(0+128),f
  7302  040F  30FF               	movlw	255
  7303  0410  3DE8               	addwfc	(main@MPPT1+1)^(0+128),f
  7304  0411                     l3222:	
  7305                           
  7306                           ;main.c: 202: if(menuButton == 3)if(MPPT1<2200)MPPT1+=1;
  7307  0411  3003               	movlw	3
  7308  0412  0021               	movlb	1	; select bank1
  7309  0413  0666               	xorwf	main@menuButton^(0+128),w
  7310  0414  1D03               	btfss	3,2
  7311  0415  2C28               	goto	l3228
  7312  0416  0868               	movf	(main@MPPT1+1)^(0+128),w
  7313  0417  3A80               	xorlw	128
  7314  0418  0020               	movlb	0	; select bank0
  7315  0419  00E8               	movwf	??_main
  7316  041A  3088               	movlw	136
  7317  041B  0268               	subwf	??_main,w
  7318  041C  1D03               	skipz
  7319  041D  2C21               	goto	u3915
  7320  041E  3098               	movlw	152
  7321  041F  0021               	movlb	1	; select bank1
  7322  0420  0267               	subwf	main@MPPT1^(0+128),w
  7323  0421                     u3915:	
  7324  0421  1803               	skipnc
  7325  0422  2C28               	goto	l3228
  7326  0423  3001               	movlw	1
  7327  0424  0021               	movlb	1	; select bank1
  7328  0425  07E7               	addwf	main@MPPT1^(0+128),f
  7329  0426  3000               	movlw	0
  7330  0427  3DE8               	addwfc	(main@MPPT1+1)^(0+128),f
  7331  0428                     l3228:	
  7332                           
  7333                           ;main.c: 203: if(menuButton == 1)LCDInit();
  7334  0428  0021               	movlb	1	; select bank1
  7335  0429  0366               	decf	main@menuButton^(0+128),w
  7336  042A  1D03               	btfss	3,2
  7337  042B  2C2F               	goto	l3232
  7338  042C  3194  24B4  3181   	fcall	_LCDInit
  7339  042F                     l3232:	
  7340                           
  7341                           ;main.c: 207: if(slowLoop>250)
  7342  042F  30FB               	movlw	251
  7343  0430  0021               	movlb	1	; select bank1
  7344  0431  025A               	subwf	main@slowLoop^(0+128),w
  7345  0432  1C03               	skipc
  7346  0433  2A1F               	goto	l3116
  7347                           
  7348                           ;main.c: 208: {
  7349                           ;main.c: 210: IOutTotal=current[0]+current[1];
  7350  0434  0828               	movf	_current^(0+128),w
  7351  0435  072A               	addwf	(_current^(0+128)+2),w
  7352  0436  00CD               	movwf	main@IOutTotal^(0+128)
  7353  0437  0829               	movf	(_current+1)^(0+128),w
  7354  0438  3D2B               	addwfc	((_current+1)^(0+128)+2),w
  7355  0439  00CE               	movwf	(main@IOutTotal+1)^(0+128)
  7356                           
  7357                           ;main.c: 230: displayRefresh+=1;
  7358  043A  3001               	movlw	1
  7359  043B  0020               	movlb	0	; select bank0
  7360  043C  00E8               	movwf	??_main
  7361  043D  0868               	movf	??_main,w
  7362  043E  0021               	movlb	1	; select bank1
  7363  043F  07DB               	addwf	main@displayRefresh^(0+128),f
  7364                           
  7365                           ;main.c: 231: if(displayRefresh>80)
  7366  0440  3051               	movlw	81
  7367  0441  025B               	subwf	main@displayRefresh^(0+128),w
  7368  0442  1C03               	skipc
  7369  0443  2C5D               	goto	l3244
  7370                           
  7371                           ;main.c: 232: {
  7372                           ;main.c: 233: LCDClear();
  7373  0444  3193  23BE  3181   	fcall	_LCDClear
  7374                           
  7375                           ;main.c: 234: displayRefresh=0;
  7376  0447  0021               	movlb	1	; select bank1
  7377  0448  01DB               	clrf	main@displayRefresh^(0+128)
  7378                           
  7379                           ;main.c: 235: batteryTemp=tempCalc(ADCRead(9));
  7380  0449  3009               	movlw	9
  7381  044A  3192  22F6  3181   	fcall	_ADCRead
  7382  044D  0871               	movf	?_ADCRead+1,w
  7383  044E  0020               	movlb	0	; select bank0
  7384  044F  00DE               	movwf	tempCalc@analogValue+1
  7385  0450  0870               	movf	?_ADCRead,w
  7386  0451  00DD               	movwf	tempCalc@analogValue
  7387  0452  318D  2597  3181   	fcall	_tempCalc
  7388  0455  0020               	movlb	0	; select bank0
  7389  0456  085E               	movf	?_tempCalc+1,w
  7390  0457  0021               	movlb	1	; select bank1
  7391  0458  00D0               	movwf	(main@batteryTemp+1)^(0+128)
  7392  0459  0020               	movlb	0	; select bank0
  7393  045A  085D               	movf	?_tempCalc,w
  7394  045B  0021               	movlb	1	; select bank1
  7395  045C  00CF               	movwf	main@batteryTemp^(0+128)
  7396  045D                     l3244:	
  7397                           
  7398                           ;main.c: 236: }
  7399                           ;main.c: 237: Battery_State_Machine(0);
  7400  045D  3000               	movlw	0
  7401  045E  3180  209D  3181   	fcall	_Battery_State_Machine
  7402                           
  7403                           ;main.c: 238: Battery_State_Machine(1);
  7404  0461  3001               	movlw	1
  7405  0462  3180  209D  3181   	fcall	_Battery_State_Machine
  7406                           
  7407                           ;main.c: 239: efficiency=(float)voltage[0]/100*current[0]/10;
  7408  0465  0021               	movlb	1	; select bank1
  7409  0466  0829               	movf	(_current+1)^(0+128),w
  7410  0467  00F9               	movwf	___awtoft@c+1
  7411  0468  0828               	movf	_current^(0+128),w
  7412  0469  00F8               	movwf	___awtoft@c
  7413  046A  3193  2379  3181   	fcall	___awtoft
  7414  046D  0878               	movf	?___awtoft,w
  7415  046E  0020               	movlb	0	; select bank0
  7416  046F  00B0               	movwf	___ftmul@f1
  7417  0470  0879               	movf	?___awtoft+1,w
  7418  0471  00B1               	movwf	___ftmul@f1+1
  7419  0472  087A               	movf	?___awtoft+2,w
  7420  0473  00B2               	movwf	___ftmul@f1+2
  7421  0474  3000               	movlw	0
  7422  0475  00A0               	movwf	___ftdiv@f2
  7423  0476  30C8               	movlw	200
  7424  0477  00A1               	movwf	___ftdiv@f2+1
  7425  0478  3042               	movlw	66
  7426  0479  00A2               	movwf	___ftdiv@f2+2
  7427  047A  0021               	movlb	1	; select bank1
  7428  047B  0831               	movf	(_voltage+1)^(0+128),w
  7429  047C  00F9               	movwf	___awtoft@c+1
  7430  047D  0830               	movf	_voltage^(0+128),w
  7431  047E  00F8               	movwf	___awtoft@c
  7432  047F  3193  2379  3181   	fcall	___awtoft
  7433  0482  0878               	movf	?___awtoft,w
  7434  0483  0020               	movlb	0	; select bank0
  7435  0484  00A3               	movwf	___ftdiv@f1
  7436  0485  0879               	movf	?___awtoft+1,w
  7437  0486  00A4               	movwf	___ftdiv@f1+1
  7438  0487  087A               	movf	?___awtoft+2,w
  7439  0488  00A5               	movwf	___ftdiv@f1+2
  7440  0489  3188  20FD  3181   	fcall	___ftdiv
  7441  048C  0020               	movlb	0	; select bank0
  7442  048D  0820               	movf	?___ftdiv,w
  7443  048E  00B3               	movwf	___ftmul@f2
  7444  048F  0821               	movf	?___ftdiv+1,w
  7445  0490  00B4               	movwf	___ftmul@f2+1
  7446  0491  0822               	movf	?___ftdiv+2,w
  7447  0492  00B5               	movwf	___ftmul@f2+2
  7448  0493  318A  2256  3181   	fcall	___ftmul
  7449  0496  0020               	movlb	0	; select bank0
  7450  0497  0830               	movf	?___ftmul,w
  7451  0498  0021               	movlb	1	; select bank1
  7452  0499  00DE               	movwf	_main$1189^(0+128)
  7453  049A  0020               	movlb	0	; select bank0
  7454  049B  0831               	movf	?___ftmul+1,w
  7455  049C  0021               	movlb	1	; select bank1
  7456  049D  00DF               	movwf	(_main$1189+1)^(0+128)
  7457  049E  0020               	movlb	0	; select bank0
  7458  049F  0832               	movf	?___ftmul+2,w
  7459  04A0  0021               	movlb	1	; select bank1
  7460  04A1  00E0               	movwf	(_main$1189+2)^(0+128)
  7461                           
  7462                           ;main.c: 239: efficiency=(float)voltage[0]/100*current[0]/10;
  7463  04A2  3000               	movlw	0
  7464  04A3  0020               	movlb	0	; select bank0
  7465  04A4  00A0               	movwf	___ftdiv@f2
  7466  04A5  3020               	movlw	32
  7467  04A6  00A1               	movwf	___ftdiv@f2+1
  7468  04A7  3041               	movlw	65
  7469  04A8  00A2               	movwf	___ftdiv@f2+2
  7470  04A9  0021               	movlb	1	; select bank1
  7471  04AA  085E               	movf	_main$1189^(0+128),w
  7472  04AB  0020               	movlb	0	; select bank0
  7473  04AC  00A3               	movwf	___ftdiv@f1
  7474  04AD  0021               	movlb	1	; select bank1
  7475  04AE  085F               	movf	(_main$1189+1)^(0+128),w
  7476  04AF  0020               	movlb	0	; select bank0
  7477  04B0  00A4               	movwf	___ftdiv@f1+1
  7478  04B1  0021               	movlb	1	; select bank1
  7479  04B2  0860               	movf	(_main$1189+2)^(0+128),w
  7480  04B3  0020               	movlb	0	; select bank0
  7481  04B4  00A5               	movwf	___ftdiv@f1+2
  7482  04B5  3188  20FD  3181   	fcall	___ftdiv
  7483  04B8  0020               	movlb	0	; select bank0
  7484  04B9  0820               	movf	?___ftdiv,w
  7485  04BA  0021               	movlb	1	; select bank1
  7486  04BB  00E3               	movwf	main@efficiency^(0+128)
  7487  04BC  0020               	movlb	0	; select bank0
  7488  04BD  0821               	movf	?___ftdiv+1,w
  7489  04BE  0021               	movlb	1	; select bank1
  7490  04BF  00E4               	movwf	(main@efficiency+1)^(0+128)
  7491  04C0  0020               	movlb	0	; select bank0
  7492  04C1  0822               	movf	?___ftdiv+2,w
  7493  04C2  0021               	movlb	1	; select bank1
  7494  04C3  00E5               	movwf	(main@efficiency+2)^(0+128)
  7495                           
  7496                           ;main.c: 240: efficiency/=(float)voltage[2]/100*current[2]/10;
  7497  04C4  0835               	movf	((_voltage+1)^(0+128)+4),w
  7498  04C5  00F9               	movwf	___awtoft@c+1
  7499  04C6  0834               	movf	(_voltage^(0+128)+4),w
  7500  04C7  00F8               	movwf	___awtoft@c
  7501  04C8  3193  2379  3181   	fcall	___awtoft
  7502  04CB  0878               	movf	?___awtoft,w
  7503  04CC  0020               	movlb	0	; select bank0
  7504  04CD  00A3               	movwf	___ftdiv@f1
  7505  04CE  0879               	movf	?___awtoft+1,w
  7506  04CF  00A4               	movwf	___ftdiv@f1+1
  7507  04D0  087A               	movf	?___awtoft+2,w
  7508  04D1  00A5               	movwf	___ftdiv@f1+2
  7509  04D2  3000               	movlw	0
  7510  04D3  00A0               	movwf	___ftdiv@f2
  7511  04D4  30C8               	movlw	200
  7512  04D5  00A1               	movwf	___ftdiv@f2+1
  7513  04D6  3042               	movlw	66
  7514  04D7  00A2               	movwf	___ftdiv@f2+2
  7515  04D8  3188  20FD  3181   	fcall	___ftdiv
  7516  04DB  0020               	movlb	0	; select bank0
  7517  04DC  0820               	movf	?___ftdiv,w
  7518  04DD  00B3               	movwf	___ftmul@f2
  7519  04DE  0821               	movf	?___ftdiv+1,w
  7520  04DF  00B4               	movwf	___ftmul@f2+1
  7521  04E0  0822               	movf	?___ftdiv+2,w
  7522  04E1  00B5               	movwf	___ftmul@f2+2
  7523  04E2  0021               	movlb	1	; select bank1
  7524  04E3  082D               	movf	((_current+1)^(0+128)+4),w
  7525  04E4  00F9               	movwf	___awtoft@c+1
  7526  04E5  082C               	movf	(_current^(0+128)+4),w
  7527  04E6  00F8               	movwf	___awtoft@c
  7528  04E7  3193  2379  3181   	fcall	___awtoft
  7529  04EA  0878               	movf	?___awtoft,w
  7530  04EB  0020               	movlb	0	; select bank0
  7531  04EC  00B0               	movwf	___ftmul@f1
  7532  04ED  0879               	movf	?___awtoft+1,w
  7533  04EE  00B1               	movwf	___ftmul@f1+1
  7534  04EF  087A               	movf	?___awtoft+2,w
  7535  04F0  00B2               	movwf	___ftmul@f1+2
  7536  04F1  318A  2256  3181   	fcall	___ftmul
  7537  04F4  0020               	movlb	0	; select bank0
  7538  04F5  0830               	movf	?___ftmul,w
  7539  04F6  0021               	movlb	1	; select bank1
  7540  04F7  00DE               	movwf	_main$1189^(0+128)
  7541  04F8  0020               	movlb	0	; select bank0
  7542  04F9  0831               	movf	?___ftmul+1,w
  7543  04FA  0021               	movlb	1	; select bank1
  7544  04FB  00DF               	movwf	(_main$1189+1)^(0+128)
  7545  04FC  0020               	movlb	0	; select bank0
  7546  04FD  0832               	movf	?___ftmul+2,w
  7547  04FE  0021               	movlb	1	; select bank1
  7548  04FF  00E0               	movwf	(_main$1189+2)^(0+128)
  7549                           
  7550                           ;main.c: 240: efficiency/=(float)voltage[2]/100*current[2]/10;
  7551  0500  085E               	movf	_main$1189^(0+128),w
  7552  0501  0020               	movlb	0	; select bank0
  7553  0502  00A3               	movwf	___ftdiv@f1
  7554  0503  0021               	movlb	1	; select bank1
  7555  0504  085F               	movf	(_main$1189+1)^(0+128),w
  7556  0505  0020               	movlb	0	; select bank0
  7557  0506  00A4               	movwf	___ftdiv@f1+1
  7558  0507  0021               	movlb	1	; select bank1
  7559  0508  0860               	movf	(_main$1189+2)^(0+128),w
  7560  0509  0020               	movlb	0	; select bank0
  7561  050A  00A5               	movwf	___ftdiv@f1+2
  7562  050B  3000               	movlw	0
  7563  050C  00A0               	movwf	___ftdiv@f2
  7564  050D  3020               	movlw	32
  7565  050E  00A1               	movwf	___ftdiv@f2+1
  7566  050F  3041               	movlw	65
  7567  0510  00A2               	movwf	___ftdiv@f2+2
  7568  0511  3188  20FD  3181   	fcall	___ftdiv
  7569  0514  0020               	movlb	0	; select bank0
  7570  0515  0820               	movf	?___ftdiv,w
  7571  0516  0021               	movlb	1	; select bank1
  7572  0517  00D5               	movwf	_main$1190^(0+128)
  7573  0518  0020               	movlb	0	; select bank0
  7574  0519  0821               	movf	?___ftdiv+1,w
  7575  051A  0021               	movlb	1	; select bank1
  7576  051B  00D6               	movwf	(_main$1190+1)^(0+128)
  7577  051C  0020               	movlb	0	; select bank0
  7578  051D  0822               	movf	?___ftdiv+2,w
  7579  051E  0021               	movlb	1	; select bank1
  7580  051F  00D7               	movwf	(_main$1190+2)^(0+128)
  7581                           
  7582                           ;main.c: 240: efficiency/=(float)voltage[2]/100*current[2]/10;
  7583  0520  0855               	movf	_main$1190^(0+128),w
  7584  0521  0020               	movlb	0	; select bank0
  7585  0522  00A0               	movwf	___ftdiv@f2
  7586  0523  0021               	movlb	1	; select bank1
  7587  0524  0856               	movf	(_main$1190+1)^(0+128),w
  7588  0525  0020               	movlb	0	; select bank0
  7589  0526  00A1               	movwf	___ftdiv@f2+1
  7590  0527  0021               	movlb	1	; select bank1
  7591  0528  0857               	movf	(_main$1190+2)^(0+128),w
  7592  0529  0020               	movlb	0	; select bank0
  7593  052A  00A2               	movwf	___ftdiv@f2+2
  7594  052B  0021               	movlb	1	; select bank1
  7595  052C  0863               	movf	main@efficiency^(0+128),w
  7596  052D  0020               	movlb	0	; select bank0
  7597  052E  00A3               	movwf	___ftdiv@f1
  7598  052F  0021               	movlb	1	; select bank1
  7599  0530  0864               	movf	(main@efficiency+1)^(0+128),w
  7600  0531  0020               	movlb	0	; select bank0
  7601  0532  00A4               	movwf	___ftdiv@f1+1
  7602  0533  0021               	movlb	1	; select bank1
  7603  0534  0865               	movf	(main@efficiency+2)^(0+128),w
  7604  0535  0020               	movlb	0	; select bank0
  7605  0536  00A5               	movwf	___ftdiv@f1+2
  7606  0537  3188  20FD  3181   	fcall	___ftdiv
  7607  053A  0020               	movlb	0	; select bank0
  7608  053B  0820               	movf	?___ftdiv,w
  7609  053C  0021               	movlb	1	; select bank1
  7610  053D  00E3               	movwf	main@efficiency^(0+128)
  7611  053E  0020               	movlb	0	; select bank0
  7612  053F  0821               	movf	?___ftdiv+1,w
  7613  0540  0021               	movlb	1	; select bank1
  7614  0541  00E4               	movwf	(main@efficiency+1)^(0+128)
  7615  0542  0020               	movlb	0	; select bank0
  7616  0543  0822               	movf	?___ftdiv+2,w
  7617  0544  0021               	movlb	1	; select bank1
  7618  0545  00E5               	movwf	(main@efficiency+2)^(0+128)
  7619                           
  7620                           ;main.c: 241: efficiency*=100;
  7621  0546  3000               	movlw	0
  7622  0547  0020               	movlb	0	; select bank0
  7623  0548  00B0               	movwf	___ftmul@f1
  7624  0549  30C8               	movlw	200
  7625  054A  00B1               	movwf	___ftmul@f1+1
  7626  054B  3042               	movlw	66
  7627  054C  00B2               	movwf	___ftmul@f1+2
  7628  054D  0021               	movlb	1	; select bank1
  7629  054E  0863               	movf	main@efficiency^(0+128),w
  7630  054F  0020               	movlb	0	; select bank0
  7631  0550  00B3               	movwf	___ftmul@f2
  7632  0551  0021               	movlb	1	; select bank1
  7633  0552  0864               	movf	(main@efficiency+1)^(0+128),w
  7634  0553  0020               	movlb	0	; select bank0
  7635  0554  00B4               	movwf	___ftmul@f2+1
  7636  0555  0021               	movlb	1	; select bank1
  7637  0556  0865               	movf	(main@efficiency+2)^(0+128),w
  7638  0557  0020               	movlb	0	; select bank0
  7639  0558  00B5               	movwf	___ftmul@f2+2
  7640  0559  318A  2256  3181   	fcall	___ftmul
  7641  055C  0020               	movlb	0	; select bank0
  7642  055D  0830               	movf	?___ftmul,w
  7643  055E  0021               	movlb	1	; select bank1
  7644  055F  00E3               	movwf	main@efficiency^(0+128)
  7645  0560  0020               	movlb	0	; select bank0
  7646  0561  0831               	movf	?___ftmul+1,w
  7647  0562  0021               	movlb	1	; select bank1
  7648  0563  00E4               	movwf	(main@efficiency+1)^(0+128)
  7649  0564  0020               	movlb	0	; select bank0
  7650  0565  0832               	movf	?___ftmul+2,w
  7651  0566  0021               	movlb	1	; select bank1
  7652  0567  00E5               	movwf	(main@efficiency+2)^(0+128)
  7653                           
  7654                           ;main.c: 243: { gotoXY(0,0); LCDWriteInt(ADCRead(19),4, 0, 0);};
  7655  0568  01F5               	clrf	gotoXY@y
  7656  0569  3000               	movlw	0
  7657  056A  3192  22BA  3181   	fcall	_gotoXY
  7658  056D  3013               	movlw	19
  7659  056E  3192  22F6  3181   	fcall	_ADCRead
  7660  0571  0871               	movf	?_ADCRead+1,w
  7661  0572  0020               	movlb	0	; select bank0
  7662  0573  00A1               	movwf	LCDWriteInt@value+1
  7663  0574  0870               	movf	?_ADCRead,w
  7664  0575  00A0               	movwf	LCDWriteInt@value
  7665  0576  3004               	movlw	4
  7666  0577  00E8               	movwf	??_main
  7667  0578  0868               	movf	??_main,w
  7668  0579  00A2               	movwf	LCDWriteInt@fieldLength
  7669  057A  01A3               	clrf	LCDWriteInt@numPlaces
  7670  057B  01A4               	clrf	LCDWriteInt@sign
  7671  057C  318B  230A  3181   	fcall	_LCDWriteInt
  7672                           
  7673                           ;main.c: 244: { gotoXY(22,0); LCDWriteInt(ADCRead(17),4, 0, 0);};
  7674  057F  01F5               	clrf	gotoXY@y
  7675  0580  3016               	movlw	22
  7676  0581  3192  22BA  3181   	fcall	_gotoXY
  7677  0584  3011               	movlw	17
  7678  0585  3192  22F6  3181   	fcall	_ADCRead
  7679  0588  0871               	movf	?_ADCRead+1,w
  7680  0589  0020               	movlb	0	; select bank0
  7681  058A  00A1               	movwf	LCDWriteInt@value+1
  7682  058B  0870               	movf	?_ADCRead,w
  7683  058C  00A0               	movwf	LCDWriteInt@value
  7684  058D  3004               	movlw	4
  7685  058E  00E8               	movwf	??_main
  7686  058F  0868               	movf	??_main,w
  7687  0590  00A2               	movwf	LCDWriteInt@fieldLength
  7688  0591  01A3               	clrf	LCDWriteInt@numPlaces
  7689  0592  01A4               	clrf	LCDWriteInt@sign
  7690  0593  318B  230A  3181   	fcall	_LCDWriteInt
  7691                           
  7692                           ;main.c: 246: { gotoXY(44,0); LCDWriteInt(Ianalogs[1],4, 0, 0);};
  7693  0596  01F5               	clrf	gotoXY@y
  7694  0597  302C               	movlw	44
  7695  0598  3192  22BA  3181   	fcall	_gotoXY
  7696  059B  0021               	movlb	1	; select bank1
  7697  059C  0823               	movf	((_Ianalogs+1)^(0+128)+2),w
  7698  059D  0020               	movlb	0	; select bank0
  7699  059E  00A1               	movwf	LCDWriteInt@value+1
  7700  059F  0021               	movlb	1	; select bank1
  7701  05A0  0822               	movf	(_Ianalogs^(0+128)+2),w
  7702  05A1  0020               	movlb	0	; select bank0
  7703  05A2  00A0               	movwf	LCDWriteInt@value
  7704  05A3  3004               	movlw	4
  7705  05A4  00E8               	movwf	??_main
  7706  05A5  0868               	movf	??_main,w
  7707  05A6  00A2               	movwf	LCDWriteInt@fieldLength
  7708  05A7  01A3               	clrf	LCDWriteInt@numPlaces
  7709  05A8  01A4               	clrf	LCDWriteInt@sign
  7710  05A9  318B  230A  3181   	fcall	_LCDWriteInt
  7711                           
  7712                           ;main.c: 249: { gotoXY(66,0); LCDWriteInt(Ianalogs[3],4, 0, 0);};
  7713  05AC  01F5               	clrf	gotoXY@y
  7714  05AD  3042               	movlw	66
  7715  05AE  3192  22BA  3181   	fcall	_gotoXY
  7716  05B1  0021               	movlb	1	; select bank1
  7717  05B2  0827               	movf	((_Ianalogs+1)^(0+128)+6),w
  7718  05B3  0020               	movlb	0	; select bank0
  7719  05B4  00A1               	movwf	LCDWriteInt@value+1
  7720  05B5  0021               	movlb	1	; select bank1
  7721  05B6  0826               	movf	(_Ianalogs^(0+128)+6),w
  7722  05B7  0020               	movlb	0	; select bank0
  7723  05B8  00A0               	movwf	LCDWriteInt@value
  7724  05B9  3004               	movlw	4
  7725  05BA  00E8               	movwf	??_main
  7726  05BB  0868               	movf	??_main,w
  7727  05BC  00A2               	movwf	LCDWriteInt@fieldLength
  7728  05BD  01A3               	clrf	LCDWriteInt@numPlaces
  7729  05BE  01A4               	clrf	LCDWriteInt@sign
  7730  05BF  318B  230A  3181   	fcall	_LCDWriteInt
  7731                           
  7732                           ;main.c: 262: { gotoXY(0,1); LCDWriteInt(voltage[3],4, 2, 0);};
  7733  05C2  01F5               	clrf	gotoXY@y
  7734  05C3  0AF5               	incf	gotoXY@y,f
  7735  05C4  3000               	movlw	0
  7736  05C5  3192  22BA  3181   	fcall	_gotoXY
  7737  05C8  0021               	movlb	1	; select bank1
  7738  05C9  0837               	movf	((_voltage+1)^(0+128)+6),w
  7739  05CA  0020               	movlb	0	; select bank0
  7740  05CB  00A1               	movwf	LCDWriteInt@value+1
  7741  05CC  0021               	movlb	1	; select bank1
  7742  05CD  0836               	movf	(_voltage^(0+128)+6),w
  7743  05CE  0020               	movlb	0	; select bank0
  7744  05CF  00A0               	movwf	LCDWriteInt@value
  7745  05D0  3004               	movlw	4
  7746  05D1  00E8               	movwf	??_main
  7747  05D2  0868               	movf	??_main,w
  7748  05D3  00A2               	movwf	LCDWriteInt@fieldLength
  7749  05D4  3002               	movlw	2
  7750  05D5  00E9               	movwf	??_main+1
  7751  05D6  0869               	movf	??_main+1,w
  7752  05D7  00A3               	movwf	LCDWriteInt@numPlaces
  7753  05D8  01A4               	clrf	LCDWriteInt@sign
  7754  05D9  318B  230A  3181   	fcall	_LCDWriteInt
  7755                           
  7756                           ;main.c: 263: LCDWriteCharacter('V');
  7757  05DC  3056               	movlw	86
  7758  05DD  3196  26CA  3181   	fcall	_LCDWriteCharacter
  7759                           
  7760                           ;main.c: 264: { gotoXY(28,1); LCDWriteInt(current[3],3, 1, 0);};
  7761  05E0  01F5               	clrf	gotoXY@y
  7762  05E1  0AF5               	incf	gotoXY@y,f
  7763  05E2  301C               	movlw	28
  7764  05E3  3192  22BA  3181   	fcall	_gotoXY
  7765  05E6  0021               	movlb	1	; select bank1
  7766  05E7  082F               	movf	((_current+1)^(0+128)+6),w
  7767  05E8  0020               	movlb	0	; select bank0
  7768  05E9  00A1               	movwf	LCDWriteInt@value+1
  7769  05EA  0021               	movlb	1	; select bank1
  7770  05EB  082E               	movf	(_current^(0+128)+6),w
  7771  05EC  0020               	movlb	0	; select bank0
  7772  05ED  00A0               	movwf	LCDWriteInt@value
  7773  05EE  3003               	movlw	3
  7774  05EF  00E8               	movwf	??_main
  7775  05F0  0868               	movf	??_main,w
  7776  05F1  00A2               	movwf	LCDWriteInt@fieldLength
  7777  05F2  01A3               	clrf	LCDWriteInt@numPlaces
  7778  05F3  0AA3               	incf	LCDWriteInt@numPlaces,f
  7779  05F4  01A4               	clrf	LCDWriteInt@sign
  7780  05F5  318B  230A  3181   	fcall	_LCDWriteInt
  7781                           
  7782                           ;main.c: 265: LCDWriteCharacter('A');
  7783  05F8  3041               	movlw	65
  7784  05F9  3196  26CA  3181   	fcall	_LCDWriteCharacter
  7785                           
  7786                           ;main.c: 266: { gotoXY(56,1); LCDWriteInt(ADCRead(11),4, 0, 0);};
  7787  05FC  01F5               	clrf	gotoXY@y
  7788  05FD  0AF5               	incf	gotoXY@y,f
  7789  05FE  3038               	movlw	56
  7790  05FF  3192  22BA  3181   	fcall	_gotoXY
  7791  0602  300B               	movlw	11
  7792  0603  3192  22F6  3181   	fcall	_ADCRead
  7793  0606  0871               	movf	?_ADCRead+1,w
  7794  0607  0020               	movlb	0	; select bank0
  7795  0608  00A1               	movwf	LCDWriteInt@value+1
  7796  0609  0870               	movf	?_ADCRead,w
  7797  060A  00A0               	movwf	LCDWriteInt@value
  7798  060B  3004               	movlw	4
  7799  060C  00E8               	movwf	??_main
  7800  060D  0868               	movf	??_main,w
  7801  060E  00A2               	movwf	LCDWriteInt@fieldLength
  7802  060F  01A3               	clrf	LCDWriteInt@numPlaces
  7803  0610  01A4               	clrf	LCDWriteInt@sign
  7804  0611  318B  230A  3181   	fcall	_LCDWriteInt
  7805                           
  7806                           ;main.c: 271: { gotoXY(0,2); LCDWriteInt(voltage[1],4, 2, 0);};
  7807  0614  3002               	movlw	2
  7808  0615  0020               	movlb	0	; select bank0
  7809  0616  00E8               	movwf	??_main
  7810  0617  0868               	movf	??_main,w
  7811  0618  00F5               	movwf	gotoXY@y
  7812  0619  3000               	movlw	0
  7813  061A  3192  22BA  3181   	fcall	_gotoXY
  7814  061D  0021               	movlb	1	; select bank1
  7815  061E  0833               	movf	((_voltage+1)^(0+128)+2),w
  7816  061F  0020               	movlb	0	; select bank0
  7817  0620  00A1               	movwf	LCDWriteInt@value+1
  7818  0621  0021               	movlb	1	; select bank1
  7819  0622  0832               	movf	(_voltage^(0+128)+2),w
  7820  0623  0020               	movlb	0	; select bank0
  7821  0624  00A0               	movwf	LCDWriteInt@value
  7822  0625  3004               	movlw	4
  7823  0626  00E8               	movwf	??_main
  7824  0627  0868               	movf	??_main,w
  7825  0628  00A2               	movwf	LCDWriteInt@fieldLength
  7826  0629  3002               	movlw	2
  7827  062A  00E9               	movwf	??_main+1
  7828  062B  0869               	movf	??_main+1,w
  7829  062C  00A3               	movwf	LCDWriteInt@numPlaces
  7830  062D  01A4               	clrf	LCDWriteInt@sign
  7831  062E  318B  230A  3181   	fcall	_LCDWriteInt
  7832                           
  7833                           ;main.c: 272: LCDWriteCharacter('V');
  7834  0631  3056               	movlw	86
  7835  0632  3196  26CA  3181   	fcall	_LCDWriteCharacter
  7836                           
  7837                           ;main.c: 273: { gotoXY(28,2); LCDWriteInt(current[1],3, 1, 0);};
  7838  0635  3002               	movlw	2
  7839  0636  0020               	movlb	0	; select bank0
  7840  0637  00E8               	movwf	??_main
  7841  0638  0868               	movf	??_main,w
  7842  0639  00F5               	movwf	gotoXY@y
  7843  063A  301C               	movlw	28
  7844  063B  3192  22BA  3181   	fcall	_gotoXY
  7845  063E  0021               	movlb	1	; select bank1
  7846  063F  082B               	movf	((_current+1)^(0+128)+2),w
  7847  0640  0020               	movlb	0	; select bank0
  7848  0641  00A1               	movwf	LCDWriteInt@value+1
  7849  0642  0021               	movlb	1	; select bank1
  7850  0643  082A               	movf	(_current^(0+128)+2),w
  7851  0644  0020               	movlb	0	; select bank0
  7852  0645  00A0               	movwf	LCDWriteInt@value
  7853  0646  3003               	movlw	3
  7854  0647  00E8               	movwf	??_main
  7855  0648  0868               	movf	??_main,w
  7856  0649  00A2               	movwf	LCDWriteInt@fieldLength
  7857  064A  01A3               	clrf	LCDWriteInt@numPlaces
  7858  064B  0AA3               	incf	LCDWriteInt@numPlaces,f
  7859  064C  01A4               	clrf	LCDWriteInt@sign
  7860  064D  318B  230A  3181   	fcall	_LCDWriteInt
  7861                           
  7862                           ;main.c: 274: LCDWriteCharacter('A');
  7863  0650  3041               	movlw	65
  7864  0651  3196  26CA  3181   	fcall	_LCDWriteCharacter
  7865                           
  7866                           ;main.c: 275: { gotoXY(56,2); LCDWriteInt(Vref[1],4, 2, 0);};
  7867  0654  3002               	movlw	2
  7868  0655  0020               	movlb	0	; select bank0
  7869  0656  00E8               	movwf	??_main
  7870  0657  0868               	movf	??_main,w
  7871  0658  00F5               	movwf	gotoXY@y
  7872  0659  3038               	movlw	56
  7873  065A  3192  22BA  3181   	fcall	_gotoXY
  7874  065D  0021               	movlb	1	; select bank1
  7875  065E  083B               	movf	((_Vref+1)^(0+128)+2),w
  7876  065F  0020               	movlb	0	; select bank0
  7877  0660  00A1               	movwf	LCDWriteInt@value+1
  7878  0661  0021               	movlb	1	; select bank1
  7879  0662  083A               	movf	(_Vref^(0+128)+2),w
  7880  0663  0020               	movlb	0	; select bank0
  7881  0664  00A0               	movwf	LCDWriteInt@value
  7882  0665  3004               	movlw	4
  7883  0666  00E8               	movwf	??_main
  7884  0667  0868               	movf	??_main,w
  7885  0668  00A2               	movwf	LCDWriteInt@fieldLength
  7886  0669  3002               	movlw	2
  7887  066A  00E9               	movwf	??_main+1
  7888  066B  0869               	movf	??_main+1,w
  7889  066C  00A3               	movwf	LCDWriteInt@numPlaces
  7890  066D  01A4               	clrf	LCDWriteInt@sign
  7891  066E  318B  230A  3181   	fcall	_LCDWriteInt
  7892                           
  7893                           ;main.c: 276: LCDWriteCharacter('V');
  7894  0671  3056               	movlw	86
  7895  0672  3196  26CA  3181   	fcall	_LCDWriteCharacter
  7896                           
  7897                           ;main.c: 279: { gotoXY(0,3); LCDWriteInt(voltage[3]*current[3],3, 0, 0);};
  7898  0675  3003               	movlw	3
  7899  0676  0020               	movlb	0	; select bank0
  7900  0677  00E8               	movwf	??_main
  7901  0678  0868               	movf	??_main,w
  7902  0679  00F5               	movwf	gotoXY@y
  7903  067A  3000               	movlw	0
  7904  067B  3192  22BA  3181   	fcall	_gotoXY
  7905  067E  0021               	movlb	1	; select bank1
  7906  067F  0837               	movf	((_voltage+1)^(0+128)+6),w
  7907  0680  00F1               	movwf	___wmul@multiplier+1
  7908  0681  0836               	movf	(_voltage^(0+128)+6),w
  7909  0682  00F0               	movwf	___wmul@multiplier
  7910  0683  082F               	movf	((_current+1)^(0+128)+6),w
  7911  0684  00F3               	movwf	___wmul@multiplicand+1
  7912  0685  082E               	movf	(_current^(0+128)+6),w
  7913  0686  00F2               	movwf	___wmul@multiplicand
  7914  0687  3193  2321  3181   	fcall	___wmul
  7915  068A  0871               	movf	?___wmul+1,w
  7916  068B  0021               	movlb	1	; select bank1
  7917  068C  00E2               	movwf	(_main$1191+1)^(0+128)
  7918  068D  0870               	movf	?___wmul,w
  7919  068E  00E1               	movwf	_main$1191^(0+128)
  7920  068F  0862               	movf	(_main$1191+1)^(0+128),w
  7921  0690  0020               	movlb	0	; select bank0
  7922  0691  00A1               	movwf	LCDWriteInt@value+1
  7923  0692  0021               	movlb	1	; select bank1
  7924  0693  0861               	movf	_main$1191^(0+128),w
  7925  0694  0020               	movlb	0	; select bank0
  7926  0695  00A0               	movwf	LCDWriteInt@value
  7927  0696  3003               	movlw	3
  7928  0697  00E8               	movwf	??_main
  7929  0698  0868               	movf	??_main,w
  7930  0699  00A2               	movwf	LCDWriteInt@fieldLength
  7931  069A  01A3               	clrf	LCDWriteInt@numPlaces
  7932  069B  01A4               	clrf	LCDWriteInt@sign
  7933  069C  318B  230A  3181   	fcall	_LCDWriteInt
  7934                           
  7935                           ;main.c: 280: LCDWriteCharacter('W');
  7936  069F  3057               	movlw	87
  7937  06A0  3196  26CA  3181   	fcall	_LCDWriteCharacter
  7938                           
  7939                           ;main.c: 281: { gotoXY(28,3); LCDWriteInt(batteryState[1],1, 0, 0);};
  7940  06A3  3003               	movlw	3
  7941  06A4  0020               	movlb	0	; select bank0
  7942  06A5  00E8               	movwf	??_main
  7943  06A6  0868               	movf	??_main,w
  7944  06A7  00F5               	movwf	gotoXY@y
  7945  06A8  301C               	movlw	28
  7946  06A9  3192  22BA  3181   	fcall	_gotoXY
  7947  06AC  0021               	movlb	1	; select bank1
  7948  06AD  0849               	movf	(_batteryState^(0+128)+1),w
  7949  06AE  0020               	movlb	0	; select bank0
  7950  06AF  00E8               	movwf	??_main
  7951  06B0  01E9               	clrf	??_main+1
  7952  06B1  0868               	movf	??_main,w
  7953  06B2  00A0               	movwf	LCDWriteInt@value
  7954  06B3  0869               	movf	??_main+1,w
  7955  06B4  00A1               	movwf	LCDWriteInt@value+1
  7956  06B5  01A2               	clrf	LCDWriteInt@fieldLength
  7957  06B6  0AA2               	incf	LCDWriteInt@fieldLength,f
  7958  06B7  01A3               	clrf	LCDWriteInt@numPlaces
  7959  06B8  01A4               	clrf	LCDWriteInt@sign
  7960  06B9  318B  230A  3181   	fcall	_LCDWriteInt
  7961                           
  7962                           ;main.c: 282: { gotoXY(36,3); LCDWriteInt(Imode[1],1, 0, 0);};
  7963  06BC  3003               	movlw	3
  7964  06BD  0020               	movlb	0	; select bank0
  7965  06BE  00E8               	movwf	??_main
  7966  06BF  0868               	movf	??_main,w
  7967  06C0  00F5               	movwf	gotoXY@y
  7968  06C1  3024               	movlw	36
  7969  06C2  3192  22BA  3181   	fcall	_gotoXY
  7970  06C5  0021               	movlb	1	; select bank1
  7971  06C6  086F               	movf	(_Imode^(0+128)+1),w
  7972  06C7  0020               	movlb	0	; select bank0
  7973  06C8  00A0               	movwf	LCDWriteInt@value
  7974  06C9  01A1               	clrf	LCDWriteInt@value+1
  7975  06CA  1BA0               	btfsc	LCDWriteInt@value,7
  7976  06CB  03A1               	decf	LCDWriteInt@value+1,f
  7977  06CC  01A2               	clrf	LCDWriteInt@fieldLength
  7978  06CD  0AA2               	incf	LCDWriteInt@fieldLength,f
  7979  06CE  01A3               	clrf	LCDWriteInt@numPlaces
  7980  06CF  01A4               	clrf	LCDWriteInt@sign
  7981  06D0  318B  230A  3181   	fcall	_LCDWriteInt
  7982                           
  7983                           ;main.c: 283: { gotoXY(48,3); LCDWriteInt(Iref[1],3, 1, 0);};
  7984  06D3  3003               	movlw	3
  7985  06D4  0020               	movlb	0	; select bank0
  7986  06D5  00E8               	movwf	??_main
  7987  06D6  0868               	movf	??_main,w
  7988  06D7  00F5               	movwf	gotoXY@y
  7989  06D8  3030               	movlw	48
  7990  06D9  3192  22BA  3181   	fcall	_gotoXY
  7991  06DC  0021               	movlb	1	; select bank1
  7992  06DD  083F               	movf	((_Iref+1)^(0+128)+2),w
  7993  06DE  0020               	movlb	0	; select bank0
  7994  06DF  00A1               	movwf	LCDWriteInt@value+1
  7995  06E0  0021               	movlb	1	; select bank1
  7996  06E1  083E               	movf	(_Iref^(0+128)+2),w
  7997  06E2  0020               	movlb	0	; select bank0
  7998  06E3  00A0               	movwf	LCDWriteInt@value
  7999  06E4  3003               	movlw	3
  8000  06E5  00E8               	movwf	??_main
  8001  06E6  0868               	movf	??_main,w
  8002  06E7  00A2               	movwf	LCDWriteInt@fieldLength
  8003  06E8  01A3               	clrf	LCDWriteInt@numPlaces
  8004  06E9  0AA3               	incf	LCDWriteInt@numPlaces,f
  8005  06EA  01A4               	clrf	LCDWriteInt@sign
  8006  06EB  318B  230A  3181   	fcall	_LCDWriteInt
  8007                           
  8008                           ;main.c: 284: LCDWriteCharacter('A');
  8009  06EE  3041               	movlw	65
  8010  06EF  3196  26CA  3181   	fcall	_LCDWriteCharacter
  8011                           
  8012                           ;main.c: 294: { gotoXY(0,4); LCDWriteInt(voltage[1]*current[1],3, 0, 0);};
  8013  06F2  3004               	movlw	4
  8014  06F3  0020               	movlb	0	; select bank0
  8015  06F4  00E8               	movwf	??_main
  8016  06F5  0868               	movf	??_main,w
  8017  06F6  00F5               	movwf	gotoXY@y
  8018  06F7  3000               	movlw	0
  8019  06F8  3192  22BA  3181   	fcall	_gotoXY
  8020  06FB  0021               	movlb	1	; select bank1
  8021  06FC  0833               	movf	((_voltage+1)^(0+128)+2),w
  8022  06FD  00F1               	movwf	___wmul@multiplier+1
  8023  06FE  0832               	movf	(_voltage^(0+128)+2),w
  8024  06FF  00F0               	movwf	___wmul@multiplier
  8025  0700  082B               	movf	((_current+1)^(0+128)+2),w
  8026  0701  00F3               	movwf	___wmul@multiplicand+1
  8027  0702  082A               	movf	(_current^(0+128)+2),w
  8028  0703  00F2               	movwf	___wmul@multiplicand
  8029  0704  3193  2321  3181   	fcall	___wmul
  8030  0707  0871               	movf	?___wmul+1,w
  8031  0708  0021               	movlb	1	; select bank1
  8032  0709  00E2               	movwf	(_main$1191+1)^(0+128)
  8033  070A  0870               	movf	?___wmul,w
  8034  070B  00E1               	movwf	_main$1191^(0+128)
  8035  070C  0862               	movf	(_main$1191+1)^(0+128),w
  8036  070D  0020               	movlb	0	; select bank0
  8037  070E  00A1               	movwf	LCDWriteInt@value+1
  8038  070F  0021               	movlb	1	; select bank1
  8039  0710  0861               	movf	_main$1191^(0+128),w
  8040  0711  0020               	movlb	0	; select bank0
  8041  0712  00A0               	movwf	LCDWriteInt@value
  8042  0713  3003               	movlw	3
  8043  0714  00E8               	movwf	??_main
  8044  0715  0868               	movf	??_main,w
  8045  0716  00A2               	movwf	LCDWriteInt@fieldLength
  8046  0717  01A3               	clrf	LCDWriteInt@numPlaces
  8047  0718  01A4               	clrf	LCDWriteInt@sign
  8048  0719  318B  230A  3181   	fcall	_LCDWriteInt
  8049                           
  8050                           ;main.c: 295: LCDWriteCharacter('W');
  8051  071C  3057               	movlw	87
  8052  071D  3196  26CA  3181   	fcall	_LCDWriteCharacter
  8053                           
  8054                           ;main.c: 298: { gotoXY(48,4); LCDWriteInt(MPPT1,4, 0, 0);};
  8055  0720  3004               	movlw	4
  8056  0721  0020               	movlb	0	; select bank0
  8057  0722  00E8               	movwf	??_main
  8058  0723  0868               	movf	??_main,w
  8059  0724  00F5               	movwf	gotoXY@y
  8060  0725  3030               	movlw	48
  8061  0726  3192  22BA  3181   	fcall	_gotoXY
  8062  0729  0021               	movlb	1	; select bank1
  8063  072A  0868               	movf	(main@MPPT1+1)^(0+128),w
  8064  072B  0020               	movlb	0	; select bank0
  8065  072C  00A1               	movwf	LCDWriteInt@value+1
  8066  072D  0021               	movlb	1	; select bank1
  8067  072E  0867               	movf	main@MPPT1^(0+128),w
  8068  072F  0020               	movlb	0	; select bank0
  8069  0730  00A0               	movwf	LCDWriteInt@value
  8070  0731  3004               	movlw	4
  8071  0732  00E8               	movwf	??_main
  8072  0733  0868               	movf	??_main,w
  8073  0734  00A2               	movwf	LCDWriteInt@fieldLength
  8074  0735  01A3               	clrf	LCDWriteInt@numPlaces
  8075  0736  01A4               	clrf	LCDWriteInt@sign
  8076  0737  318B  230A  3181   	fcall	_LCDWriteInt
  8077                           
  8078                           ;main.c: 302: { gotoXY(0,5); LCDWriteInt(dutyCycle6,4, 0, 0);};
  8079  073A  3005               	movlw	5
  8080  073B  0020               	movlb	0	; select bank0
  8081  073C  00E8               	movwf	??_main
  8082  073D  0868               	movf	??_main,w
  8083  073E  00F5               	movwf	gotoXY@y
  8084  073F  3000               	movlw	0
  8085  0740  3192  22BA  3181   	fcall	_gotoXY
  8086  0743  0021               	movlb	1	; select bank1
  8087  0744  086B               	movf	(main@dutyCycle6+1)^(0+128),w
  8088  0745  0020               	movlb	0	; select bank0
  8089  0746  00A1               	movwf	LCDWriteInt@value+1
  8090  0747  0021               	movlb	1	; select bank1
  8091  0748  086A               	movf	main@dutyCycle6^(0+128),w
  8092  0749  0020               	movlb	0	; select bank0
  8093  074A  00A0               	movwf	LCDWriteInt@value
  8094  074B  3004               	movlw	4
  8095  074C  00E8               	movwf	??_main
  8096  074D  0868               	movf	??_main,w
  8097  074E  00A2               	movwf	LCDWriteInt@fieldLength
  8098  074F  01A3               	clrf	LCDWriteInt@numPlaces
  8099  0750  01A4               	clrf	LCDWriteInt@sign
  8100  0751  318B  230A  3181   	fcall	_LCDWriteInt
  8101                           
  8102                           ;main.c: 303: { gotoXY(24,5); LCDWriteInt(dutyCycle7,4, 0, 0);};
  8103  0754  3005               	movlw	5
  8104  0755  0020               	movlb	0	; select bank0
  8105  0756  00E8               	movwf	??_main
  8106  0757  0868               	movf	??_main,w
  8107  0758  00F5               	movwf	gotoXY@y
  8108  0759  3018               	movlw	24
  8109  075A  3192  22BA  3181   	fcall	_gotoXY
  8110  075D  0021               	movlb	1	; select bank1
  8111  075E  086D               	movf	(main@dutyCycle7+1)^(0+128),w
  8112  075F  0020               	movlb	0	; select bank0
  8113  0760  00A1               	movwf	LCDWriteInt@value+1
  8114  0761  0021               	movlb	1	; select bank1
  8115  0762  086C               	movf	main@dutyCycle7^(0+128),w
  8116  0763  0020               	movlb	0	; select bank0
  8117  0764  00A0               	movwf	LCDWriteInt@value
  8118  0765  3004               	movlw	4
  8119  0766  00E8               	movwf	??_main
  8120  0767  0868               	movf	??_main,w
  8121  0768  00A2               	movwf	LCDWriteInt@fieldLength
  8122  0769  01A3               	clrf	LCDWriteInt@numPlaces
  8123  076A  01A4               	clrf	LCDWriteInt@sign
  8124  076B  318B  230A  3181   	fcall	_LCDWriteInt
  8125                           
  8126                           ;main.c: 304: { gotoXY(48,5); LCDWriteInt(dutyCycle1,4, 0, 0);};
  8127  076E  3005               	movlw	5
  8128  076F  0020               	movlb	0	; select bank0
  8129  0770  00E8               	movwf	??_main
  8130  0771  0868               	movf	??_main,w
  8131  0772  00F5               	movwf	gotoXY@y
  8132  0773  3030               	movlw	48
  8133  0774  3192  22BA  3181   	fcall	_gotoXY
  8134  0777  0021               	movlb	1	; select bank1
  8135  0778  0859               	movf	(main@dutyCycle1+1)^(0+128),w
  8136  0779  0020               	movlb	0	; select bank0
  8137  077A  00A1               	movwf	LCDWriteInt@value+1
  8138  077B  0021               	movlb	1	; select bank1
  8139  077C  0858               	movf	main@dutyCycle1^(0+128),w
  8140  077D  0020               	movlb	0	; select bank0
  8141  077E  00A0               	movwf	LCDWriteInt@value
  8142  077F  3004               	movlw	4
  8143  0780  00E8               	movwf	??_main
  8144  0781  0868               	movf	??_main,w
  8145  0782  00A2               	movwf	LCDWriteInt@fieldLength
  8146  0783  01A3               	clrf	LCDWriteInt@numPlaces
  8147  0784  01A4               	clrf	LCDWriteInt@sign
  8148  0785  318B  230A  3181   	fcall	_LCDWriteInt
  8149                           
  8150                           ;main.c: 305: { gotoXY(74,5); LCDWriteInt(!(RB2),1, 0, 0);};
  8151  0788  3005               	movlw	5
  8152  0789  0020               	movlb	0	; select bank0
  8153  078A  00E8               	movwf	??_main
  8154  078B  0868               	movf	??_main,w
  8155  078C  00F5               	movwf	gotoXY@y
  8156  078D  304A               	movlw	74
  8157  078E  3192  22BA  3181   	fcall	_gotoXY
  8158  0791  1003               	clrc
  8159  0792  0020               	movlb	0	; select bank0
  8160  0793  1D0D               	btfss	13,2	;volatile
  8161  0794  1403               	setc
  8162  0795  3000               	movlw	0
  8163  0796  3D09               	addwfc	9,w
  8164  0797  00E8               	movwf	??_main
  8165  0798  01E9               	clrf	??_main+1
  8166  0799  0868               	movf	??_main,w
  8167  079A  00A0               	movwf	LCDWriteInt@value
  8168  079B  0869               	movf	??_main+1,w
  8169  079C  00A1               	movwf	LCDWriteInt@value+1
  8170  079D  01A2               	clrf	LCDWriteInt@fieldLength
  8171  079E  0AA2               	incf	LCDWriteInt@fieldLength,f
  8172  079F  01A3               	clrf	LCDWriteInt@numPlaces
  8173  07A0  01A4               	clrf	LCDWriteInt@sign
  8174  07A1  318B  230A  3181   	fcall	_LCDWriteInt
  8175                           
  8176                           ;main.c: 307: if(batteryState[0] > FINISHED)
  8177  07A4  3003               	movlw	3
  8178  07A5  0021               	movlb	1	; select bank1
  8179  07A6  0248               	subwf	_batteryState^(0+128),w
  8180  07A7  1C03               	skipc
  8181  07A8  2FAD               	goto	l3364
  8182                           
  8183                           ;main.c: 308: {
  8184                           ;main.c: 309: cc_cv_mode(0);
  8185  07A9  3000               	movlw	0
  8186  07AA  318B  23C3  3181   	fcall	_cc_cv_mode
  8187  07AD                     l3364:	
  8188                           
  8189                           ;main.c: 310: }
  8190                           ;main.c: 311: if(batteryState[1] > FINISHED)
  8191  07AD  3003               	movlw	3
  8192  07AE  0021               	movlb	1	; select bank1
  8193  07AF  0249               	subwf	(_batteryState^(0+128)+1),w
  8194  07B0  1C03               	skipc
  8195  07B1  2FB6               	goto	l3368
  8196                           
  8197                           ;main.c: 312: {
  8198                           ;main.c: 313: cc_cv_mode(1);
  8199  07B2  3001               	movlw	1
  8200  07B3  318B  23C3  3181   	fcall	_cc_cv_mode
  8201  07B6                     l3368:	
  8202                           
  8203                           ;main.c: 314: }
  8204                           ;main.c: 315: slowLoop=0;
  8205  07B6  0021               	movlb	1	; select bank1
  8206  07B7  01DA               	clrf	main@slowLoop^(0+128)
  8207  07B8  2A1F               	goto	l3116
  8208  07B9                     __end_of_main:	
  8209                           
  8210                           	psect	text1
  8211  0D97                     __ptext1:	
  8212 ;; *************** function _tempCalc *****************
  8213 ;; Defined at:
  8214 ;;		line 4 in file "tempCalc.c"
  8215 ;; Parameters:    Size  Location     Type
  8216 ;;  analogValue     2   61[BANK0 ] int 
  8217 ;; Auto vars:     Size  Location     Type
  8218 ;;  steinhart       3   69[BANK0 ] float 
  8219 ;;  R               3   63[BANK0 ] float 
  8220 ;; Return value:  Size  Location     Type
  8221 ;;                  2   61[BANK0 ] int 
  8222 ;; Registers used:
  8223 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8224 ;; Tracked objects:
  8225 ;;		On entry : 0/0
  8226 ;;		On exit  : 0/0
  8227 ;;		Unchanged: 0/0
  8228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8229 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8230 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8231 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8232 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8233 ;;Total ram usage:       11 bytes
  8234 ;; Hardware stack levels used:    1
  8235 ;; Hardware stack levels required when called:    4
  8236 ;; This function calls:
  8237 ;;		___awtoft
  8238 ;;		___ftadd
  8239 ;;		___ftdiv
  8240 ;;		___ftmul
  8241 ;;		___ftsub
  8242 ;;		___fttol
  8243 ;;		_log
  8244 ;; This function is called by:
  8245 ;;		_main
  8246 ;; This function uses a non-reentrant model
  8247 ;;
  8248                           
  8249                           
  8250                           ;psect for function _tempCalc
  8251  0D97                     _tempCalc:	
  8252                           
  8253                           ;tempCalc.c: 6: float R, steinhart;
  8254                           ;tempCalc.c: 8: R = 9890/(1023/(float)analogValue - 1);
  8255                           
  8256                           ;incstack = 0
  8257                           ; Regs used in _tempCalc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8258  0D97  3000               	movlw	0
  8259  0D98  0020               	movlb	0	; select bank0
  8260  0D99  00C0               	movwf	___ftadd@f1
  8261  0D9A  3080               	movlw	128
  8262  0D9B  00C1               	movwf	___ftadd@f1+1
  8263  0D9C  30BF               	movlw	191
  8264  0D9D  00C2               	movwf	___ftadd@f1+2
  8265  0D9E  085E               	movf	tempCalc@analogValue+1,w
  8266  0D9F  00F9               	movwf	___awtoft@c+1
  8267  0DA0  085D               	movf	tempCalc@analogValue,w
  8268  0DA1  00F8               	movwf	___awtoft@c
  8269  0DA2  3193  2379  318D   	fcall	___awtoft
  8270  0DA5  0878               	movf	?___awtoft,w
  8271  0DA6  0020               	movlb	0	; select bank0
  8272  0DA7  00A0               	movwf	___ftdiv@f2
  8273  0DA8  0879               	movf	?___awtoft+1,w
  8274  0DA9  00A1               	movwf	___ftdiv@f2+1
  8275  0DAA  087A               	movf	?___awtoft+2,w
  8276  0DAB  00A2               	movwf	___ftdiv@f2+2
  8277  0DAC  30C0               	movlw	192
  8278  0DAD  00A3               	movwf	___ftdiv@f1
  8279  0DAE  307F               	movlw	127
  8280  0DAF  00A4               	movwf	___ftdiv@f1+1
  8281  0DB0  3044               	movlw	68
  8282  0DB1  00A5               	movwf	___ftdiv@f1+2
  8283  0DB2  3188  20FD  318D   	fcall	___ftdiv
  8284  0DB5  0020               	movlb	0	; select bank0
  8285  0DB6  0820               	movf	?___ftdiv,w
  8286  0DB7  00C3               	movwf	___ftadd@f2
  8287  0DB8  0821               	movf	?___ftdiv+1,w
  8288  0DB9  00C4               	movwf	___ftadd@f2+1
  8289  0DBA  0822               	movf	?___ftdiv+2,w
  8290  0DBB  00C5               	movwf	___ftadd@f2+2
  8291  0DBC  318C  24A1  318D   	fcall	___ftadd
  8292  0DBF  0020               	movlb	0	; select bank0
  8293  0DC0  0840               	movf	?___ftadd,w
  8294  0DC1  00E2               	movwf	_tempCalc$1188
  8295  0DC2  0841               	movf	?___ftadd+1,w
  8296  0DC3  00E3               	movwf	_tempCalc$1188+1
  8297  0DC4  0842               	movf	?___ftadd+2,w
  8298  0DC5  00E4               	movwf	_tempCalc$1188+2
  8299                           
  8300                           ;tempCalc.c: 6: float R, steinhart;
  8301                           ;tempCalc.c: 8: R = 9890/(1023/(float)analogValue - 1);
  8302  0DC6  0862               	movf	_tempCalc$1188,w
  8303  0DC7  00A0               	movwf	___ftdiv@f2
  8304  0DC8  0863               	movf	_tempCalc$1188+1,w
  8305  0DC9  00A1               	movwf	___ftdiv@f2+1
  8306  0DCA  0864               	movf	_tempCalc$1188+2,w
  8307  0DCB  00A2               	movwf	___ftdiv@f2+2
  8308  0DCC  3088               	movlw	136
  8309  0DCD  00A3               	movwf	___ftdiv@f1
  8310  0DCE  301A               	movlw	26
  8311  0DCF  00A4               	movwf	___ftdiv@f1+1
  8312  0DD0  3046               	movlw	70
  8313  0DD1  00A5               	movwf	___ftdiv@f1+2
  8314  0DD2  3188  20FD  318D   	fcall	___ftdiv
  8315  0DD5  0020               	movlb	0	; select bank0
  8316  0DD6  0820               	movf	?___ftdiv,w
  8317  0DD7  00DF               	movwf	tempCalc@R
  8318  0DD8  0821               	movf	?___ftdiv+1,w
  8319  0DD9  00E0               	movwf	tempCalc@R+1
  8320  0DDA  0822               	movf	?___ftdiv+2,w
  8321  0DDB  00E1               	movwf	tempCalc@R+2
  8322                           
  8323                           ;tempCalc.c: 10: steinhart = R /9990;
  8324  0DDC  3018               	movlw	24
  8325  0DDD  00A0               	movwf	___ftdiv@f2
  8326  0DDE  301C               	movlw	28
  8327  0DDF  00A1               	movwf	___ftdiv@f2+1
  8328  0DE0  3046               	movlw	70
  8329  0DE1  00A2               	movwf	___ftdiv@f2+2
  8330  0DE2  085F               	movf	tempCalc@R,w
  8331  0DE3  00A3               	movwf	___ftdiv@f1
  8332  0DE4  0860               	movf	tempCalc@R+1,w
  8333  0DE5  00A4               	movwf	___ftdiv@f1+1
  8334  0DE6  0861               	movf	tempCalc@R+2,w
  8335  0DE7  00A5               	movwf	___ftdiv@f1+2
  8336  0DE8  3188  20FD  318D   	fcall	___ftdiv
  8337  0DEB  0020               	movlb	0	; select bank0
  8338  0DEC  0820               	movf	?___ftdiv,w
  8339  0DED  00E5               	movwf	tempCalc@steinhart
  8340  0DEE  0821               	movf	?___ftdiv+1,w
  8341  0DEF  00E6               	movwf	tempCalc@steinhart+1
  8342  0DF0  0822               	movf	?___ftdiv+2,w
  8343  0DF1  00E7               	movwf	tempCalc@steinhart+2
  8344                           
  8345                           ;tempCalc.c: 11: steinhart = log(steinhart);
  8346  0DF2  0865               	movf	tempCalc@steinhart,w
  8347  0DF3  00D7               	movwf	log@x
  8348  0DF4  0866               	movf	tempCalc@steinhart+1,w
  8349  0DF5  00D8               	movwf	log@x+1
  8350  0DF6  0867               	movf	tempCalc@steinhart+2,w
  8351  0DF7  00D9               	movwf	log@x+2
  8352  0DF8  3189  21A6  318D   	fcall	_log
  8353  0DFB  0020               	movlb	0	; select bank0
  8354  0DFC  0857               	movf	?_log,w
  8355  0DFD  00E5               	movwf	tempCalc@steinhart
  8356  0DFE  0858               	movf	?_log+1,w
  8357  0DFF  00E6               	movwf	tempCalc@steinhart+1
  8358  0E00  0859               	movf	?_log+2,w
  8359  0E01  00E7               	movwf	tempCalc@steinhart+2
  8360                           
  8361                           ;tempCalc.c: 12: steinhart /= 4030;
  8362  0E02  30E0               	movlw	224
  8363  0E03  00A0               	movwf	___ftdiv@f2
  8364  0E04  307B               	movlw	123
  8365  0E05  00A1               	movwf	___ftdiv@f2+1
  8366  0E06  3045               	movlw	69
  8367  0E07  00A2               	movwf	___ftdiv@f2+2
  8368  0E08  0865               	movf	tempCalc@steinhart,w
  8369  0E09  00A3               	movwf	___ftdiv@f1
  8370  0E0A  0866               	movf	tempCalc@steinhart+1,w
  8371  0E0B  00A4               	movwf	___ftdiv@f1+1
  8372  0E0C  0867               	movf	tempCalc@steinhart+2,w
  8373  0E0D  00A5               	movwf	___ftdiv@f1+2
  8374  0E0E  3188  20FD  318D   	fcall	___ftdiv
  8375  0E11  0020               	movlb	0	; select bank0
  8376  0E12  0820               	movf	?___ftdiv,w
  8377  0E13  00E5               	movwf	tempCalc@steinhart
  8378  0E14  0821               	movf	?___ftdiv+1,w
  8379  0E15  00E6               	movwf	tempCalc@steinhart+1
  8380  0E16  0822               	movf	?___ftdiv+2,w
  8381  0E17  00E7               	movwf	tempCalc@steinhart+2
  8382                           
  8383                           ;tempCalc.c: 15: steinhart += 1.0 / (25 + 273.15);
  8384  0E18  30CF               	movlw	207
  8385  0E19  00C0               	movwf	___ftadd@f1
  8386  0E1A  305B               	movlw	91
  8387  0E1B  00C1               	movwf	___ftadd@f1+1
  8388  0E1C  303B               	movlw	59
  8389  0E1D  00C2               	movwf	___ftadd@f1+2
  8390  0E1E  0865               	movf	tempCalc@steinhart,w
  8391  0E1F  00C3               	movwf	___ftadd@f2
  8392  0E20  0866               	movf	tempCalc@steinhart+1,w
  8393  0E21  00C4               	movwf	___ftadd@f2+1
  8394  0E22  0867               	movf	tempCalc@steinhart+2,w
  8395  0E23  00C5               	movwf	___ftadd@f2+2
  8396  0E24  318C  24A1  318D   	fcall	___ftadd
  8397  0E27  0020               	movlb	0	; select bank0
  8398  0E28  0840               	movf	?___ftadd,w
  8399  0E29  00E5               	movwf	tempCalc@steinhart
  8400  0E2A  0841               	movf	?___ftadd+1,w
  8401  0E2B  00E6               	movwf	tempCalc@steinhart+1
  8402  0E2C  0842               	movf	?___ftadd+2,w
  8403  0E2D  00E7               	movwf	tempCalc@steinhart+2
  8404                           
  8405                           ;tempCalc.c: 16: steinhart = 1.0 / steinhart;
  8406  0E2E  0865               	movf	tempCalc@steinhart,w
  8407  0E2F  00A0               	movwf	___ftdiv@f2
  8408  0E30  0866               	movf	tempCalc@steinhart+1,w
  8409  0E31  00A1               	movwf	___ftdiv@f2+1
  8410  0E32  0867               	movf	tempCalc@steinhart+2,w
  8411  0E33  00A2               	movwf	___ftdiv@f2+2
  8412  0E34  3000               	movlw	0
  8413  0E35  00A3               	movwf	___ftdiv@f1
  8414  0E36  3080               	movlw	128
  8415  0E37  00A4               	movwf	___ftdiv@f1+1
  8416  0E38  303F               	movlw	63
  8417  0E39  00A5               	movwf	___ftdiv@f1+2
  8418  0E3A  3188  20FD  318D   	fcall	___ftdiv
  8419  0E3D  0020               	movlb	0	; select bank0
  8420  0E3E  0820               	movf	?___ftdiv,w
  8421  0E3F  00E5               	movwf	tempCalc@steinhart
  8422  0E40  0821               	movf	?___ftdiv+1,w
  8423  0E41  00E6               	movwf	tempCalc@steinhart+1
  8424  0E42  0822               	movf	?___ftdiv+2,w
  8425  0E43  00E7               	movwf	tempCalc@steinhart+2
  8426                           
  8427                           ;tempCalc.c: 17: steinhart -= 273.15;
  8428  0E44  3093               	movlw	147
  8429  0E45  00CD               	movwf	___ftsub@f2
  8430  0E46  3088               	movlw	136
  8431  0E47  00CE               	movwf	___ftsub@f2+1
  8432  0E48  3043               	movlw	67
  8433  0E49  00CF               	movwf	___ftsub@f2+2
  8434  0E4A  0865               	movf	tempCalc@steinhart,w
  8435  0E4B  00D0               	movwf	___ftsub@f1
  8436  0E4C  0866               	movf	tempCalc@steinhart+1,w
  8437  0E4D  00D1               	movwf	___ftsub@f1+1
  8438  0E4E  0867               	movf	tempCalc@steinhart+2,w
  8439  0E4F  00D2               	movwf	___ftsub@f1+2
  8440  0E50  3193  233C  318D   	fcall	___ftsub
  8441  0E53  0020               	movlb	0	; select bank0
  8442  0E54  084D               	movf	?___ftsub,w
  8443  0E55  00E5               	movwf	tempCalc@steinhart
  8444  0E56  084E               	movf	?___ftsub+1,w
  8445  0E57  00E6               	movwf	tempCalc@steinhart+1
  8446  0E58  084F               	movf	?___ftsub+2,w
  8447  0E59  00E7               	movwf	tempCalc@steinhart+2
  8448                           
  8449                           ;tempCalc.c: 19: steinhart*=10;
  8450  0E5A  3000               	movlw	0
  8451  0E5B  00B0               	movwf	___ftmul@f1
  8452  0E5C  3020               	movlw	32
  8453  0E5D  00B1               	movwf	___ftmul@f1+1
  8454  0E5E  3041               	movlw	65
  8455  0E5F  00B2               	movwf	___ftmul@f1+2
  8456  0E60  0865               	movf	tempCalc@steinhart,w
  8457  0E61  00B3               	movwf	___ftmul@f2
  8458  0E62  0866               	movf	tempCalc@steinhart+1,w
  8459  0E63  00B4               	movwf	___ftmul@f2+1
  8460  0E64  0867               	movf	tempCalc@steinhart+2,w
  8461  0E65  00B5               	movwf	___ftmul@f2+2
  8462  0E66  318A  2256  318D   	fcall	___ftmul
  8463  0E69  0020               	movlb	0	; select bank0
  8464  0E6A  0830               	movf	?___ftmul,w
  8465  0E6B  00E5               	movwf	tempCalc@steinhart
  8466  0E6C  0831               	movf	?___ftmul+1,w
  8467  0E6D  00E6               	movwf	tempCalc@steinhart+1
  8468  0E6E  0832               	movf	?___ftmul+2,w
  8469  0E6F  00E7               	movwf	tempCalc@steinhart+2
  8470                           
  8471                           ;tempCalc.c: 21: steinhart = steinhart*9/5+320;
  8472  0E70  3000               	movlw	0
  8473  0E71  00C0               	movwf	___ftadd@f1
  8474  0E72  30A0               	movlw	160
  8475  0E73  00C1               	movwf	___ftadd@f1+1
  8476  0E74  3043               	movlw	67
  8477  0E75  00C2               	movwf	___ftadd@f1+2
  8478  0E76  3000               	movlw	0
  8479  0E77  00A0               	movwf	___ftdiv@f2
  8480  0E78  30A0               	movlw	160
  8481  0E79  00A1               	movwf	___ftdiv@f2+1
  8482  0E7A  3040               	movlw	64
  8483  0E7B  00A2               	movwf	___ftdiv@f2+2
  8484  0E7C  3000               	movlw	0
  8485  0E7D  00B0               	movwf	___ftmul@f1
  8486  0E7E  3010               	movlw	16
  8487  0E7F  00B1               	movwf	___ftmul@f1+1
  8488  0E80  3041               	movlw	65
  8489  0E81  00B2               	movwf	___ftmul@f1+2
  8490  0E82  0865               	movf	tempCalc@steinhart,w
  8491  0E83  00B3               	movwf	___ftmul@f2
  8492  0E84  0866               	movf	tempCalc@steinhart+1,w
  8493  0E85  00B4               	movwf	___ftmul@f2+1
  8494  0E86  0867               	movf	tempCalc@steinhart+2,w
  8495  0E87  00B5               	movwf	___ftmul@f2+2
  8496  0E88  318A  2256  318D   	fcall	___ftmul
  8497  0E8B  0020               	movlb	0	; select bank0
  8498  0E8C  0830               	movf	?___ftmul,w
  8499  0E8D  00A3               	movwf	___ftdiv@f1
  8500  0E8E  0831               	movf	?___ftmul+1,w
  8501  0E8F  00A4               	movwf	___ftdiv@f1+1
  8502  0E90  0832               	movf	?___ftmul+2,w
  8503  0E91  00A5               	movwf	___ftdiv@f1+2
  8504  0E92  3188  20FD  318D   	fcall	___ftdiv
  8505  0E95  0020               	movlb	0	; select bank0
  8506  0E96  0820               	movf	?___ftdiv,w
  8507  0E97  00C3               	movwf	___ftadd@f2
  8508  0E98  0821               	movf	?___ftdiv+1,w
  8509  0E99  00C4               	movwf	___ftadd@f2+1
  8510  0E9A  0822               	movf	?___ftdiv+2,w
  8511  0E9B  00C5               	movwf	___ftadd@f2+2
  8512  0E9C  318C  24A1  318D   	fcall	___ftadd
  8513  0E9F  0020               	movlb	0	; select bank0
  8514  0EA0  0840               	movf	?___ftadd,w
  8515  0EA1  00E5               	movwf	tempCalc@steinhart
  8516  0EA2  0841               	movf	?___ftadd+1,w
  8517  0EA3  00E6               	movwf	tempCalc@steinhart+1
  8518  0EA4  0842               	movf	?___ftadd+2,w
  8519  0EA5  00E7               	movwf	tempCalc@steinhart+2
  8520                           
  8521                           ;tempCalc.c: 23: return (int16_t)steinhart;
  8522  0EA6  0865               	movf	tempCalc@steinhart,w
  8523  0EA7  00B0               	movwf	___fttol@f1
  8524  0EA8  0866               	movf	tempCalc@steinhart+1,w
  8525  0EA9  00B1               	movwf	___fttol@f1+1
  8526  0EAA  0867               	movf	tempCalc@steinhart+2,w
  8527  0EAB  00B2               	movwf	___fttol@f1+2
  8528  0EAC  3180  2016         	fcall	___fttol
  8529  0EAE  0020               	movlb	0	; select bank0
  8530  0EAF  0831               	movf	?___fttol+1,w
  8531  0EB0  00DE               	movwf	?_tempCalc+1
  8532  0EB1  0830               	movf	?___fttol,w
  8533  0EB2  00DD               	movwf	?_tempCalc
  8534  0EB3  0008               	return
  8535  0EB4                     __end_of_tempCalc:	
  8536                           
  8537                           	psect	text2
  8538  09A6                     __ptext2:	
  8539 ;; *************** function _log *****************
  8540 ;; Defined at:
  8541 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\log.c"
  8542 ;; Parameters:    Size  Location     Type
  8543 ;;  x               3   55[BANK0 ] int 
  8544 ;; Auto vars:     Size  Location     Type
  8545 ;;  exponent        2   59[BANK0 ] int 
  8546 ;; Return value:  Size  Location     Type
  8547 ;;                  3   55[BANK0 ] int 
  8548 ;; Registers used:
  8549 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8550 ;; Tracked objects:
  8551 ;;		On entry : 0/0
  8552 ;;		On exit  : 0/0
  8553 ;;		Unchanged: 0/0
  8554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8555 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8556 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8557 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8558 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8559 ;;Total ram usage:        6 bytes
  8560 ;; Hardware stack levels used:    1
  8561 ;; Hardware stack levels required when called:    3
  8562 ;; This function calls:
  8563 ;;		___awtoft
  8564 ;;		___ftadd
  8565 ;;		___ftge
  8566 ;;		___ftmul
  8567 ;;		_eval_poly
  8568 ;;		_frexp
  8569 ;; This function is called by:
  8570 ;;		_tempCalc
  8571 ;; This function uses a non-reentrant model
  8572 ;;
  8573                           
  8574                           
  8575                           ;psect for function _log
  8576  09A6                     _log:	
  8577                           
  8578                           ;incstack = 0
  8579                           ; Regs used in _log: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8580  09A6  0020               	movlb	0	; select bank0
  8581  09A7  0857               	movf	log@x,w
  8582  09A8  00F0               	movwf	___ftge@ff1
  8583  09A9  0858               	movf	log@x+1,w
  8584  09AA  00F1               	movwf	___ftge@ff1+1
  8585  09AB  0859               	movf	log@x+2,w
  8586  09AC  00F2               	movwf	___ftge@ff1+2
  8587  09AD  3000               	movlw	0
  8588  09AE  00F3               	movwf	___ftge@ff2
  8589  09AF  3000               	movlw	0
  8590  09B0  00F4               	movwf	___ftge@ff2+1
  8591  09B1  3000               	movlw	0
  8592  09B2  00F5               	movwf	___ftge@ff2+2
  8593  09B3  3194  24EF  3189   	fcall	___ftge
  8594  09B6  1803               	btfsc	3,0
  8595  09B7  29C5               	goto	l2626
  8596  09B8  3021               	movlw	33
  8597  09B9  0022               	movlb	2	; select bank2
  8598  09BA  00C5               	movwf	_errno^(0+256)
  8599  09BB  3000               	movlw	0
  8600  09BC  00C6               	movwf	(_errno^(0+256)+1)
  8601  09BD  3000               	movlw	0
  8602  09BE  0020               	movlb	0	; select bank0
  8603  09BF  00D7               	movwf	?_log
  8604  09C0  3000               	movlw	0
  8605  09C1  00D8               	movwf	?_log+1
  8606  09C2  3000               	movlw	0
  8607  09C3  00D9               	movwf	?_log+2
  8608  09C4  0008               	return
  8609  09C5                     l2626:	
  8610  09C5  0020               	movlb	0	; select bank0
  8611  09C6  0859               	movf	log@x+2,w
  8612  09C7  0458               	iorwf	log@x+1,w
  8613  09C8  0457               	iorwf	log@x,w
  8614  09C9  1D03               	skipz
  8615  09CA  29D8               	goto	l2632
  8616  09CB  3022               	movlw	34
  8617  09CC  0022               	movlb	2	; select bank2
  8618  09CD  00C5               	movwf	_errno^(0+256)
  8619  09CE  3000               	movlw	0
  8620  09CF  00C6               	movwf	(_errno^(0+256)+1)
  8621  09D0  3000               	movlw	0
  8622  09D1  0020               	movlb	0	; select bank0
  8623  09D2  00D7               	movwf	?_log
  8624  09D3  3000               	movlw	0
  8625  09D4  00D8               	movwf	?_log+1
  8626  09D5  3000               	movlw	0
  8627  09D6  00D9               	movwf	?_log+2
  8628  09D7  0008               	return
  8629  09D8                     l2632:	
  8630  09D8  3000               	movlw	0
  8631  09D9  00C0               	movwf	___ftadd@f1
  8632  09DA  3080               	movlw	128
  8633  09DB  00C1               	movwf	___ftadd@f1+1
  8634  09DC  30BF               	movlw	191
  8635  09DD  00C2               	movwf	___ftadd@f1+2
  8636  09DE  3000               	movlw	0
  8637  09DF  00B0               	movwf	___ftmul@f1
  8638  09E0  3000               	movlw	0
  8639  09E1  00B1               	movwf	___ftmul@f1+1
  8640  09E2  3040               	movlw	64
  8641  09E3  00B2               	movwf	___ftmul@f1+2
  8642  09E4  305B               	movlw	(low (log@exponent| 0))& (0+255)
  8643  09E5  00DA               	movwf	??_log
  8644  09E6  085A               	movf	??_log,w
  8645  09E7  00F3               	movwf	frexp@eptr
  8646  09E8  0857               	movf	log@x,w
  8647  09E9  00F0               	movwf	frexp@value
  8648  09EA  0858               	movf	log@x+1,w
  8649  09EB  00F1               	movwf	frexp@value+1
  8650  09EC  0859               	movf	log@x+2,w
  8651  09ED  00F2               	movwf	frexp@value+2
  8652  09EE  3195  252A  3189   	fcall	_frexp
  8653  09F1  0870               	movf	?_frexp,w
  8654  09F2  0020               	movlb	0	; select bank0
  8655  09F3  00B3               	movwf	___ftmul@f2
  8656  09F4  0871               	movf	?_frexp+1,w
  8657  09F5  00B4               	movwf	___ftmul@f2+1
  8658  09F6  0872               	movf	?_frexp+2,w
  8659  09F7  00B5               	movwf	___ftmul@f2+2
  8660  09F8  318A  2256  3189   	fcall	___ftmul
  8661  09FB  0020               	movlb	0	; select bank0
  8662  09FC  0830               	movf	?___ftmul,w
  8663  09FD  00C3               	movwf	___ftadd@f2
  8664  09FE  0831               	movf	?___ftmul+1,w
  8665  09FF  00C4               	movwf	___ftadd@f2+1
  8666  0A00  0832               	movf	?___ftmul+2,w
  8667  0A01  00C5               	movwf	___ftadd@f2+2
  8668  0A02  318C  24A1  3189   	fcall	___ftadd
  8669  0A05  0020               	movlb	0	; select bank0
  8670  0A06  0840               	movf	?___ftadd,w
  8671  0A07  00D7               	movwf	log@x
  8672  0A08  0841               	movf	?___ftadd+1,w
  8673  0A09  00D8               	movwf	log@x+1
  8674  0A0A  0842               	movf	?___ftadd+2,w
  8675  0A0B  00D9               	movwf	log@x+2
  8676  0A0C  30FF               	movlw	255
  8677  0A0D  07DB               	addwf	log@exponent,f
  8678  0A0E  30FF               	movlw	255
  8679  0A0F  3DDC               	addwfc	log@exponent+1,f
  8680  0A10  0857               	movf	log@x,w
  8681  0A11  00CD               	movwf	eval_poly@x
  8682  0A12  0858               	movf	log@x+1,w
  8683  0A13  00CE               	movwf	eval_poly@x+1
  8684  0A14  0859               	movf	log@x+2,w
  8685  0A15  00CF               	movwf	eval_poly@x+2
  8686  0A16  3000               	movlw	low (log@coeff| (0+32768))
  8687  0A17  00D0               	movwf	eval_poly@d
  8688  0A18  3098               	movlw	high (log@coeff| (0+32768))
  8689  0A19  00D1               	movwf	eval_poly@d+1
  8690  0A1A  3008               	movlw	8
  8691  0A1B  00D2               	movwf	eval_poly@n
  8692  0A1C  3000               	movlw	0
  8693  0A1D  00D3               	movwf	eval_poly@n+1
  8694  0A1E  3197  271E  3189   	fcall	_eval_poly
  8695  0A21  0020               	movlb	0	; select bank0
  8696  0A22  084D               	movf	?_eval_poly,w
  8697  0A23  00D7               	movwf	log@x
  8698  0A24  084E               	movf	?_eval_poly+1,w
  8699  0A25  00D8               	movwf	log@x+1
  8700  0A26  084F               	movf	?_eval_poly+2,w
  8701  0A27  00D9               	movwf	log@x+2
  8702  0A28  0857               	movf	log@x,w
  8703  0A29  00C0               	movwf	___ftadd@f1
  8704  0A2A  0858               	movf	log@x+1,w
  8705  0A2B  00C1               	movwf	___ftadd@f1+1
  8706  0A2C  0859               	movf	log@x+2,w
  8707  0A2D  00C2               	movwf	___ftadd@f1+2
  8708  0A2E  3072               	movlw	114
  8709  0A2F  00B0               	movwf	___ftmul@f1
  8710  0A30  3031               	movlw	49
  8711  0A31  00B1               	movwf	___ftmul@f1+1
  8712  0A32  303F               	movlw	63
  8713  0A33  00B2               	movwf	___ftmul@f1+2
  8714  0A34  085C               	movf	log@exponent+1,w
  8715  0A35  00F9               	movwf	___awtoft@c+1
  8716  0A36  085B               	movf	log@exponent,w
  8717  0A37  00F8               	movwf	___awtoft@c
  8718  0A38  3193  2379  3189   	fcall	___awtoft
  8719  0A3B  0878               	movf	?___awtoft,w
  8720  0A3C  0020               	movlb	0	; select bank0
  8721  0A3D  00B3               	movwf	___ftmul@f2
  8722  0A3E  0879               	movf	?___awtoft+1,w
  8723  0A3F  00B4               	movwf	___ftmul@f2+1
  8724  0A40  087A               	movf	?___awtoft+2,w
  8725  0A41  00B5               	movwf	___ftmul@f2+2
  8726  0A42  318A  2256  3189   	fcall	___ftmul
  8727  0A45  0020               	movlb	0	; select bank0
  8728  0A46  0830               	movf	?___ftmul,w
  8729  0A47  00C3               	movwf	___ftadd@f2
  8730  0A48  0831               	movf	?___ftmul+1,w
  8731  0A49  00C4               	movwf	___ftadd@f2+1
  8732  0A4A  0832               	movf	?___ftmul+2,w
  8733  0A4B  00C5               	movwf	___ftadd@f2+2
  8734  0A4C  318C  24A1         	fcall	___ftadd
  8735  0A4E  0020               	movlb	0	; select bank0
  8736  0A4F  0840               	movf	?___ftadd,w
  8737  0A50  00D7               	movwf	?_log
  8738  0A51  0841               	movf	?___ftadd+1,w
  8739  0A52  00D8               	movwf	?_log+1
  8740  0A53  0842               	movf	?___ftadd+2,w
  8741  0A54  00D9               	movwf	?_log+2
  8742  0A55  0008               	return
  8743  0A56                     __end_of_log:	
  8744                           
  8745                           	psect	text3
  8746  152A                     __ptext3:	
  8747 ;; *************** function _frexp *****************
  8748 ;; Defined at:
  8749 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
  8750 ;; Parameters:    Size  Location     Type
  8751 ;;  value           3    0[COMMON] int 
  8752 ;;  eptr            1    3[COMMON] PTR int 
  8753 ;;		 -> log@exponent(2), 
  8754 ;; Auto vars:     Size  Location     Type
  8755 ;;		None
  8756 ;; Return value:  Size  Location     Type
  8757 ;;                  3    0[COMMON] PTR int 
  8758 ;; Registers used:
  8759 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8760 ;; Tracked objects:
  8761 ;;		On entry : 0/0
  8762 ;;		On exit  : 0/0
  8763 ;;		Unchanged: 0/0
  8764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8765 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8766 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8767 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8768 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8769 ;;Total ram usage:        6 bytes
  8770 ;; Hardware stack levels used:    1
  8771 ;; This function calls:
  8772 ;;		Nothing
  8773 ;; This function is called by:
  8774 ;;		_log
  8775 ;; This function uses a non-reentrant model
  8776 ;;
  8777                           
  8778                           
  8779                           ;psect for function _frexp
  8780  152A                     _frexp:	
  8781                           
  8782                           ;incstack = 0
  8783                           ; Regs used in _frexp: [wreg+fsr1l+fsr1h+status,2+status,0]
  8784  152A  0872               	movf	frexp@value+2,w
  8785  152B  0471               	iorwf	frexp@value+1,w
  8786  152C  0470               	iorwf	frexp@value,w
  8787  152D  1D03               	skipz
  8788  152E  2D3C               	goto	l2436
  8789  152F  0873               	movf	frexp@eptr,w
  8790  1530  0086               	movwf	6
  8791  1531  0187               	clrf	7
  8792  1532  3000               	movlw	0
  8793  1533  3FC0               	movwi [0]fsr1
  8794  1534  3FC1               	movwi [1]fsr1
  8795  1535  3000               	movlw	0
  8796  1536  00F0               	movwf	?_frexp
  8797  1537  3000               	movlw	0
  8798  1538  00F1               	movwf	?_frexp+1
  8799  1539  3000               	movlw	0
  8800  153A  00F2               	movwf	?_frexp+2
  8801  153B  0008               	return
  8802  153C                     l2436:	
  8803  153C  0872               	movf	frexp@value+2,w
  8804  153D  397F               	andlw	127
  8805  153E  00F4               	movwf	??_frexp
  8806  153F  01F5               	clrf	??_frexp+1
  8807  1540  35F4               	lslf	??_frexp,f
  8808  1541  0DF5               	rlf	??_frexp+1,f
  8809  1542  0873               	movf	frexp@eptr,w
  8810  1543  0086               	movwf	6
  8811  1544  0187               	clrf	7
  8812  1545  0874               	movf	??_frexp,w
  8813  1546  3FC0               	movwi [0]fsr1
  8814  1547  0875               	movf	??_frexp+1,w
  8815  1548  3FC1               	movwi [1]fsr1
  8816  1549  0D71               	rlf	frexp@value+1,w
  8817  154A  0D71               	rlf	frexp@value+1,w
  8818  154B  3901               	andlw	1
  8819  154C  00F4               	movwf	??_frexp
  8820  154D  01F5               	clrf	??_frexp+1
  8821  154E  0873               	movf	frexp@eptr,w
  8822  154F  0086               	movwf	6
  8823  1550  0187               	clrf	7
  8824  1551  0874               	movf	??_frexp,w
  8825  1552  0481               	iorwf	1,f
  8826  1553  3141               	addfsr 1,1
  8827  1554  0875               	movf	??_frexp+1,w
  8828  1555  0481               	iorwf	1,f
  8829  1556  0873               	movf	frexp@eptr,w
  8830  1557  0086               	movwf	6
  8831  1558  0187               	clrf	7
  8832  1559  3082               	movlw	130
  8833  155A  0781               	addwf	1,f
  8834  155B  3141               	addfsr 1,1
  8835  155C  30FF               	movlw	255
  8836  155D  3D81               	addwfc	1,f
  8837  155E  317F               	addfsr 1,-1
  8838  155F  0872               	movf	frexp@value+2,w
  8839  1560  3980               	andlw	-128
  8840  1561  383F               	iorlw	63
  8841  1562  00F2               	movwf	frexp@value+2
  8842  1563  13F1               	bcf	frexp@value+1,7
  8843  1564  0008               	return
  8844  1565                     __end_of_frexp:	
  8845                           
  8846                           	psect	text4
  8847  171E                     __ptext4:	
  8848 ;; *************** function _eval_poly *****************
  8849 ;; Defined at:
  8850 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\evalpoly.c"
  8851 ;; Parameters:    Size  Location     Type
  8852 ;;  x               3   45[BANK0 ] PTR int 
  8853 ;;  d               2   48[BANK0 ] PTR const 
  8854 ;;		 -> log@coeff(27), 
  8855 ;;  n               2   50[BANK0 ] int 
  8856 ;; Auto vars:     Size  Location     Type
  8857 ;;  res             3   52[BANK0 ] int 
  8858 ;; Return value:  Size  Location     Type
  8859 ;;                  3   45[BANK0 ] int 
  8860 ;; Registers used:
  8861 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8862 ;; Tracked objects:
  8863 ;;		On entry : 0/0
  8864 ;;		On exit  : 0/0
  8865 ;;		Unchanged: 0/0
  8866 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8867 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8868 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8869 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8870 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8871 ;;Total ram usage:       10 bytes
  8872 ;; Hardware stack levels used:    1
  8873 ;; Hardware stack levels required when called:    2
  8874 ;; This function calls:
  8875 ;;		___ftadd
  8876 ;;		___ftmul
  8877 ;;		___wmul
  8878 ;; This function is called by:
  8879 ;;		_log
  8880 ;; This function uses a non-reentrant model
  8881 ;;
  8882                           
  8883                           
  8884                           ;psect for function _eval_poly
  8885  171E                     _eval_poly:	
  8886                           
  8887                           ;incstack = 0
  8888                           ; Regs used in _eval_poly: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8889  171E  0020               	movlb	0	; select bank0
  8890  171F  0853               	movf	eval_poly@n+1,w
  8891  1720  00F1               	movwf	___wmul@multiplier+1
  8892  1721  0852               	movf	eval_poly@n,w
  8893  1722  00F0               	movwf	___wmul@multiplier
  8894  1723  3003               	movlw	3
  8895  1724  00F2               	movwf	___wmul@multiplicand
  8896  1725  3000               	movlw	0
  8897  1726  00F3               	movwf	___wmul@multiplicand+1
  8898  1727  3193  2321  3197   	fcall	___wmul
  8899  172A  0020               	movlb	0	; select bank0
  8900  172B  0850               	movf	eval_poly@d,w
  8901  172C  0770               	addwf	?___wmul,w
  8902  172D  0084               	movwf	4
  8903  172E  0851               	movf	eval_poly@d+1,w
  8904  172F  3D71               	addwfc	?___wmul+1,w
  8905  1730  0085               	movwf	5
  8906  1731  3F00               	moviw [0]fsr0
  8907  1732  00D4               	movwf	eval_poly@res
  8908  1733  3F01               	moviw [1]fsr0
  8909  1734  00D5               	movwf	eval_poly@res+1
  8910  1735  3F02               	moviw [2]fsr0
  8911  1736                     L4:	
  8912  1736  00D6               	movwf	eval_poly@res+2
  8913  1737  0852               	movf	eval_poly@n,w
  8914  1738  0453               	iorwf	eval_poly@n+1,w
  8915  1739  1903               	btfsc	3,2
  8916  173A  2F77               	goto	l2454
  8917  173B  30FF               	movlw	255
  8918  173C  07D2               	addwf	eval_poly@n,f
  8919  173D  30FF               	movlw	255
  8920  173E  3DD3               	addwfc	eval_poly@n+1,f
  8921  173F  0853               	movf	eval_poly@n+1,w
  8922  1740  00F1               	movwf	___wmul@multiplier+1
  8923  1741  0852               	movf	eval_poly@n,w
  8924  1742  00F0               	movwf	___wmul@multiplier
  8925  1743  3003               	movlw	3
  8926  1744  00F2               	movwf	___wmul@multiplicand
  8927  1745  3000               	movlw	0
  8928  1746  00F3               	movwf	___wmul@multiplicand+1
  8929  1747  3193  2321  3197   	fcall	___wmul
  8930  174A  0020               	movlb	0	; select bank0
  8931  174B  0850               	movf	eval_poly@d,w
  8932  174C  0770               	addwf	?___wmul,w
  8933  174D  0084               	movwf	4
  8934  174E  0851               	movf	eval_poly@d+1,w
  8935  174F  3D71               	addwfc	?___wmul+1,w
  8936  1750  0085               	movwf	5
  8937  1751  3F00               	moviw [0]fsr0
  8938  1752  00C0               	movwf	___ftadd@f1
  8939  1753  3F01               	moviw [1]fsr0
  8940  1754  00C1               	movwf	___ftadd@f1+1
  8941  1755  3F02               	moviw [2]fsr0
  8942  1756  00C2               	movwf	___ftadd@f1+2
  8943  1757  0854               	movf	eval_poly@res,w
  8944  1758  00B0               	movwf	___ftmul@f1
  8945  1759  0855               	movf	eval_poly@res+1,w
  8946  175A  00B1               	movwf	___ftmul@f1+1
  8947  175B  0856               	movf	eval_poly@res+2,w
  8948  175C  00B2               	movwf	___ftmul@f1+2
  8949  175D  084D               	movf	eval_poly@x,w
  8950  175E  00B3               	movwf	___ftmul@f2
  8951  175F  084E               	movf	eval_poly@x+1,w
  8952  1760  00B4               	movwf	___ftmul@f2+1
  8953  1761  084F               	movf	eval_poly@x+2,w
  8954  1762  00B5               	movwf	___ftmul@f2+2
  8955  1763  318A  2256  3197   	fcall	___ftmul
  8956  1766  0020               	movlb	0	; select bank0
  8957  1767  0830               	movf	?___ftmul,w
  8958  1768  00C3               	movwf	___ftadd@f2
  8959  1769  0831               	movf	?___ftmul+1,w
  8960  176A  00C4               	movwf	___ftadd@f2+1
  8961  176B  0832               	movf	?___ftmul+2,w
  8962  176C  00C5               	movwf	___ftadd@f2+2
  8963  176D  318C  24A1  3197   	fcall	___ftadd
  8964  1770  0020               	movlb	0	; select bank0
  8965  1771  0840               	movf	?___ftadd,w
  8966  1772  00D4               	movwf	eval_poly@res
  8967  1773  0841               	movf	?___ftadd+1,w
  8968  1774  00D5               	movwf	eval_poly@res+1
  8969  1775  0842               	movf	?___ftadd+2,w
  8970  1776  2F36               	goto	L4
  8971  1777                     l2454:	
  8972  1777  0854               	movf	eval_poly@res,w
  8973  1778  00CD               	movwf	?_eval_poly
  8974  1779  0855               	movf	eval_poly@res+1,w
  8975  177A  00CE               	movwf	?_eval_poly+1
  8976  177B  0856               	movf	eval_poly@res+2,w
  8977  177C  00CF               	movwf	?_eval_poly+2
  8978  177D  0008               	return
  8979  177E                     __end_of_eval_poly:	
  8980                           
  8981                           	psect	text5
  8982  0A56                     __ptext5:	
  8983 ;; *************** function ___ftmul *****************
  8984 ;; Defined at:
  8985 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
  8986 ;; Parameters:    Size  Location     Type
  8987 ;;  f1              3   16[BANK0 ] float 
  8988 ;;  f2              3   19[BANK0 ] float 
  8989 ;; Auto vars:     Size  Location     Type
  8990 ;;  f3_as_produc    3   27[BANK0 ] unsigned um
  8991 ;;  sign            1   31[BANK0 ] unsigned char 
  8992 ;;  cntr            1   30[BANK0 ] unsigned char 
  8993 ;;  exp             1   26[BANK0 ] unsigned char 
  8994 ;; Return value:  Size  Location     Type
  8995 ;;                  3   16[BANK0 ] float 
  8996 ;; Registers used:
  8997 ;;		wreg, status,2, status,0, pclath, cstack
  8998 ;; Tracked objects:
  8999 ;;		On entry : 0/0
  9000 ;;		On exit  : 0/0
  9001 ;;		Unchanged: 0/0
  9002 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9003 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9004 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9005 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9006 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9007 ;;Total ram usage:       16 bytes
  9008 ;; Hardware stack levels used:    1
  9009 ;; Hardware stack levels required when called:    1
  9010 ;; This function calls:
  9011 ;;		___ftpack
  9012 ;; This function is called by:
  9013 ;;		_tempCalc
  9014 ;;		_main
  9015 ;;		_log
  9016 ;;		_eval_poly
  9017 ;; This function uses a non-reentrant model
  9018 ;;
  9019                           
  9020                           
  9021                           ;psect for function ___ftmul
  9022  0A56                     ___ftmul:	
  9023                           
  9024                           ;incstack = 0
  9025                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  9026  0A56  0020               	movlb	0	; select bank0
  9027  0A57  0830               	movf	___ftmul@f1,w
  9028  0A58  00B6               	movwf	??___ftmul
  9029  0A59  0831               	movf	___ftmul@f1+1,w
  9030  0A5A  00B7               	movwf	??___ftmul+1
  9031  0A5B  0832               	movf	___ftmul@f1+2,w
  9032  0A5C  00B8               	movwf	??___ftmul+2
  9033  0A5D  1003               	clrc
  9034  0A5E  0D37               	rlf	??___ftmul+1,w
  9035  0A5F  0D38               	rlf	??___ftmul+2,w
  9036  0A60  00B9               	movwf	??___ftmul+3
  9037  0A61  0839               	movf	??___ftmul+3,w
  9038  0A62  00BA               	movwf	___ftmul@exp
  9039  0A63  083A               	movf	___ftmul@exp,w
  9040  0A64  1D03               	btfss	3,2
  9041  0A65  2A6D               	goto	l2338
  9042  0A66  3000               	movlw	0
  9043  0A67  00B0               	movwf	?___ftmul
  9044  0A68  3000               	movlw	0
  9045  0A69  00B1               	movwf	?___ftmul+1
  9046  0A6A  3000               	movlw	0
  9047  0A6B  00B2               	movwf	?___ftmul+2
  9048  0A6C  0008               	return
  9049  0A6D                     l2338:	
  9050  0A6D  0833               	movf	___ftmul@f2,w
  9051  0A6E  00B6               	movwf	??___ftmul
  9052  0A6F  0834               	movf	___ftmul@f2+1,w
  9053  0A70  00B7               	movwf	??___ftmul+1
  9054  0A71  0835               	movf	___ftmul@f2+2,w
  9055  0A72  00B8               	movwf	??___ftmul+2
  9056  0A73  1003               	clrc
  9057  0A74  0D37               	rlf	??___ftmul+1,w
  9058  0A75  0D38               	rlf	??___ftmul+2,w
  9059  0A76  00B9               	movwf	??___ftmul+3
  9060  0A77  0839               	movf	??___ftmul+3,w
  9061  0A78  00BF               	movwf	___ftmul@sign
  9062  0A79  083F               	movf	___ftmul@sign,w
  9063  0A7A  1D03               	btfss	3,2
  9064  0A7B  2A83               	goto	l2344
  9065  0A7C  3000               	movlw	0
  9066  0A7D  00B0               	movwf	?___ftmul
  9067  0A7E  3000               	movlw	0
  9068  0A7F  00B1               	movwf	?___ftmul+1
  9069  0A80  3000               	movlw	0
  9070  0A81  00B2               	movwf	?___ftmul+2
  9071  0A82  0008               	return
  9072  0A83                     l2344:	
  9073  0A83  083F               	movf	___ftmul@sign,w
  9074  0A84  3E7B               	addlw	123
  9075  0A85  00B6               	movwf	??___ftmul
  9076  0A86  0836               	movf	??___ftmul,w
  9077  0A87  07BA               	addwf	___ftmul@exp,f
  9078  0A88  0830               	movf	___ftmul@f1,w
  9079  0A89  00B6               	movwf	??___ftmul
  9080  0A8A  0831               	movf	___ftmul@f1+1,w
  9081  0A8B  00B7               	movwf	??___ftmul+1
  9082  0A8C  0832               	movf	___ftmul@f1+2,w
  9083  0A8D  00B8               	movwf	??___ftmul+2
  9084  0A8E  3010               	movlw	16
  9085  0A8F                     u2445:	
  9086  0A8F  36B8               	lsrf	??___ftmul+2,f
  9087  0A90  0CB7               	rrf	??___ftmul+1,f
  9088  0A91  0CB6               	rrf	??___ftmul,f
  9089  0A92  0B89               	decfsz	9,f
  9090  0A93  2A8F               	goto	u2445
  9091  0A94  0836               	movf	??___ftmul,w
  9092  0A95  00B9               	movwf	??___ftmul+3
  9093  0A96  0839               	movf	??___ftmul+3,w
  9094  0A97  00BF               	movwf	___ftmul@sign
  9095  0A98  0833               	movf	___ftmul@f2,w
  9096  0A99  00B6               	movwf	??___ftmul
  9097  0A9A  0834               	movf	___ftmul@f2+1,w
  9098  0A9B  00B7               	movwf	??___ftmul+1
  9099  0A9C  0835               	movf	___ftmul@f2+2,w
  9100  0A9D  00B8               	movwf	??___ftmul+2
  9101  0A9E  3010               	movlw	16
  9102  0A9F                     u2455:	
  9103  0A9F  36B8               	lsrf	??___ftmul+2,f
  9104  0AA0  0CB7               	rrf	??___ftmul+1,f
  9105  0AA1  0CB6               	rrf	??___ftmul,f
  9106  0AA2  0B89               	decfsz	9,f
  9107  0AA3  2A9F               	goto	u2455
  9108  0AA4  0836               	movf	??___ftmul,w
  9109  0AA5  00B9               	movwf	??___ftmul+3
  9110  0AA6  0839               	movf	??___ftmul+3,w
  9111  0AA7  06BF               	xorwf	___ftmul@sign,f
  9112  0AA8  3080               	movlw	128
  9113  0AA9  00B6               	movwf	??___ftmul
  9114  0AAA  0836               	movf	??___ftmul,w
  9115  0AAB  05BF               	andwf	___ftmul@sign,f
  9116  0AAC  17B1               	bsf	___ftmul@f1+1,7
  9117  0AAD  17B4               	bsf	___ftmul@f2+1,7
  9118  0AAE  30FF               	movlw	255
  9119  0AAF  05B3               	andwf	___ftmul@f2,f
  9120  0AB0  30FF               	movlw	255
  9121  0AB1  05B4               	andwf	___ftmul@f2+1,f
  9122  0AB2  3000               	movlw	0
  9123  0AB3  05B5               	andwf	___ftmul@f2+2,f
  9124  0AB4  3000               	movlw	0
  9125  0AB5  00BB               	movwf	___ftmul@f3_as_product
  9126  0AB6  3000               	movlw	0
  9127  0AB7  00BC               	movwf	___ftmul@f3_as_product+1
  9128  0AB8  3000               	movlw	0
  9129  0AB9  00BD               	movwf	___ftmul@f3_as_product+2
  9130  0ABA  3007               	movlw	7
  9131  0ABB  00B6               	movwf	??___ftmul
  9132  0ABC  0836               	movf	??___ftmul,w
  9133  0ABD  00BE               	movwf	___ftmul@cntr
  9134  0ABE                     l2356:	
  9135  0ABE  1C30               	btfss	___ftmul@f1,0
  9136  0ABF  2AC6               	goto	l2360
  9137  0AC0  0833               	movf	___ftmul@f2,w
  9138  0AC1  07BB               	addwf	___ftmul@f3_as_product,f
  9139  0AC2  0834               	movf	___ftmul@f2+1,w
  9140  0AC3  3DBC               	addwfc	___ftmul@f3_as_product+1,f
  9141  0AC4  0835               	movf	___ftmul@f2+2,w
  9142  0AC5  3DBD               	addwfc	___ftmul@f3_as_product+2,f
  9143  0AC6                     l2360:	
  9144  0AC6  3001               	movlw	1
  9145  0AC7                     u2475:	
  9146  0AC7  36B2               	lsrf	___ftmul@f1+2,f
  9147  0AC8  0CB1               	rrf	___ftmul@f1+1,f
  9148  0AC9  0CB0               	rrf	___ftmul@f1,f
  9149  0ACA  0B89               	decfsz	9,f
  9150  0ACB  2AC7               	goto	u2475
  9151  0ACC  3001               	movlw	1
  9152  0ACD                     u2485:	
  9153  0ACD  35B3               	lslf	___ftmul@f2,f
  9154  0ACE  0DB4               	rlf	___ftmul@f2+1,f
  9155  0ACF  0DB5               	rlf	___ftmul@f2+2,f
  9156  0AD0  0B89               	decfsz	9,f
  9157  0AD1  2ACD               	goto	u2485
  9158  0AD2  3001               	movlw	1
  9159  0AD3  02BE               	subwf	___ftmul@cntr,f
  9160  0AD4  1D03               	btfss	3,2
  9161  0AD5  2ABE               	goto	l2356
  9162  0AD6  3009               	movlw	9
  9163  0AD7  00B6               	movwf	??___ftmul
  9164  0AD8  0836               	movf	??___ftmul,w
  9165  0AD9  00BE               	movwf	___ftmul@cntr
  9166  0ADA                     l2368:	
  9167  0ADA  1C30               	btfss	___ftmul@f1,0
  9168  0ADB  2AE2               	goto	l2372
  9169  0ADC  0833               	movf	___ftmul@f2,w
  9170  0ADD  07BB               	addwf	___ftmul@f3_as_product,f
  9171  0ADE  0834               	movf	___ftmul@f2+1,w
  9172  0ADF  3DBC               	addwfc	___ftmul@f3_as_product+1,f
  9173  0AE0  0835               	movf	___ftmul@f2+2,w
  9174  0AE1  3DBD               	addwfc	___ftmul@f3_as_product+2,f
  9175  0AE2                     l2372:	
  9176  0AE2  3001               	movlw	1
  9177  0AE3                     u2515:	
  9178  0AE3  36B2               	lsrf	___ftmul@f1+2,f
  9179  0AE4  0CB1               	rrf	___ftmul@f1+1,f
  9180  0AE5  0CB0               	rrf	___ftmul@f1,f
  9181  0AE6  0B89               	decfsz	9,f
  9182  0AE7  2AE3               	goto	u2515
  9183  0AE8  3001               	movlw	1
  9184  0AE9                     u2525:	
  9185  0AE9  36BD               	lsrf	___ftmul@f3_as_product+2,f
  9186  0AEA  0CBC               	rrf	___ftmul@f3_as_product+1,f
  9187  0AEB  0CBB               	rrf	___ftmul@f3_as_product,f
  9188  0AEC  0B89               	decfsz	9,f
  9189  0AED  2AE9               	goto	u2525
  9190  0AEE  3001               	movlw	1
  9191  0AEF  02BE               	subwf	___ftmul@cntr,f
  9192  0AF0  1D03               	btfss	3,2
  9193  0AF1  2ADA               	goto	l2368
  9194  0AF2  083B               	movf	___ftmul@f3_as_product,w
  9195  0AF3  00F0               	movwf	___ftpack@arg
  9196  0AF4  083C               	movf	___ftmul@f3_as_product+1,w
  9197  0AF5  00F1               	movwf	___ftpack@arg+1
  9198  0AF6  083D               	movf	___ftmul@f3_as_product+2,w
  9199  0AF7  00F2               	movwf	___ftpack@arg+2
  9200  0AF8  083A               	movf	___ftmul@exp,w
  9201  0AF9  00B6               	movwf	??___ftmul
  9202  0AFA  0836               	movf	??___ftmul,w
  9203  0AFB  00F3               	movwf	___ftpack@exp
  9204  0AFC  083F               	movf	___ftmul@sign,w
  9205  0AFD  00B7               	movwf	??___ftmul+1
  9206  0AFE  0837               	movf	??___ftmul+1,w
  9207  0AFF  00F4               	movwf	___ftpack@sign
  9208  0B00  3188  2017         	fcall	___ftpack
  9209  0B02  0870               	movf	?___ftpack,w
  9210  0B03  0020               	movlb	0	; select bank0
  9211  0B04  00B0               	movwf	?___ftmul
  9212  0B05  0871               	movf	?___ftpack+1,w
  9213  0B06  00B1               	movwf	?___ftmul+1
  9214  0B07  0872               	movf	?___ftpack+2,w
  9215  0B08  00B2               	movwf	?___ftmul+2
  9216  0B09  0008               	return
  9217  0B0A                     __end_of___ftmul:	
  9218                           
  9219                           	psect	text6
  9220  14EF                     __ptext6:	
  9221 ;; *************** function ___ftge *****************
  9222 ;; Defined at:
  9223 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
  9224 ;; Parameters:    Size  Location     Type
  9225 ;;  ff1             3    0[COMMON] float 
  9226 ;;  ff2             3    3[COMMON] float 
  9227 ;; Auto vars:     Size  Location     Type
  9228 ;;		None
  9229 ;; Return value:  Size  Location     Type
  9230 ;;		None               void
  9231 ;; Registers used:
  9232 ;;		wreg, status,2, status,0
  9233 ;; Tracked objects:
  9234 ;;		On entry : 0/0
  9235 ;;		On exit  : 0/0
  9236 ;;		Unchanged: 0/0
  9237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9238 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9239 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9240 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9241 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9242 ;;Total ram usage:        9 bytes
  9243 ;; Hardware stack levels used:    1
  9244 ;; This function calls:
  9245 ;;		Nothing
  9246 ;; This function is called by:
  9247 ;;		_log
  9248 ;; This function uses a non-reentrant model
  9249 ;;
  9250                           
  9251                           
  9252                           ;psect for function ___ftge
  9253  14EF                     ___ftge:	
  9254                           
  9255                           ;incstack = 0
  9256                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  9257  14EF  1FF2               	btfss	___ftge@ff1+2,7
  9258  14F0  2D05               	goto	l2412
  9259  14F1  0970               	comf	___ftge@ff1,w
  9260  14F2  00F6               	movwf	??___ftge
  9261  14F3  0971               	comf	___ftge@ff1+1,w
  9262  14F4  00F7               	movwf	??___ftge+1
  9263  14F5  0972               	comf	___ftge@ff1+2,w
  9264  14F6  00F8               	movwf	??___ftge+2
  9265  14F7  0AF6               	incf	??___ftge,f
  9266  14F8  1903               	skipnz
  9267  14F9  0AF7               	incf	??___ftge+1,f
  9268  14FA  1903               	skipnz
  9269  14FB  0AF8               	incf	??___ftge+2,f
  9270  14FC  3000               	movlw	0
  9271  14FD  0776               	addwf	??___ftge,w
  9272  14FE  00F0               	movwf	___ftge@ff1
  9273  14FF  3000               	movlw	0
  9274  1500  3D77               	addwfc	??___ftge+1,w
  9275  1501  00F1               	movwf	___ftge@ff1+1
  9276  1502  3080               	movlw	128
  9277  1503  3D78               	addwfc	??___ftge+2,w
  9278  1504  00F2               	movwf	___ftge@ff1+2
  9279  1505                     l2412:	
  9280  1505  1FF5               	btfss	___ftge@ff2+2,7
  9281  1506  2D1B               	goto	l2416
  9282  1507  0973               	comf	___ftge@ff2,w
  9283  1508  00F6               	movwf	??___ftge
  9284  1509  0974               	comf	___ftge@ff2+1,w
  9285  150A  00F7               	movwf	??___ftge+1
  9286  150B  0975               	comf	___ftge@ff2+2,w
  9287  150C  00F8               	movwf	??___ftge+2
  9288  150D  0AF6               	incf	??___ftge,f
  9289  150E  1903               	skipnz
  9290  150F  0AF7               	incf	??___ftge+1,f
  9291  1510  1903               	skipnz
  9292  1511  0AF8               	incf	??___ftge+2,f
  9293  1512  3000               	movlw	0
  9294  1513  0776               	addwf	??___ftge,w
  9295  1514  00F3               	movwf	___ftge@ff2
  9296  1515  3000               	movlw	0
  9297  1516  3D77               	addwfc	??___ftge+1,w
  9298  1517  00F4               	movwf	___ftge@ff2+1
  9299  1518  3080               	movlw	128
  9300  1519  3D78               	addwfc	??___ftge+2,w
  9301  151A  00F5               	movwf	___ftge@ff2+2
  9302  151B                     l2416:	
  9303  151B  3080               	movlw	128
  9304  151C  06F2               	xorwf	___ftge@ff1+2,f
  9305  151D  3080               	movlw	128
  9306  151E  06F5               	xorwf	___ftge@ff2+2,f
  9307  151F  0875               	movf	___ftge@ff2+2,w
  9308  1520  0272               	subwf	___ftge@ff1+2,w
  9309  1521  1D03               	skipz
  9310  1522  0008               	return
  9311  1523  0874               	movf	___ftge@ff2+1,w
  9312  1524  0271               	subwf	___ftge@ff1+1,w
  9313  1525  1D03               	skipz
  9314  1526  0008               	return
  9315  1527  0873               	movf	___ftge@ff2,w
  9316  1528  0270               	subwf	___ftge@ff1,w
  9317  1529  0008               	return
  9318  152A                     __end_of___ftge:	
  9319                           
  9320                           	psect	text7
  9321  133C                     __ptext7:	
  9322 ;; *************** function ___ftsub *****************
  9323 ;; Defined at:
  9324 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
  9325 ;; Parameters:    Size  Location     Type
  9326 ;;  f2              3   45[BANK0 ] float 
  9327 ;;  f1              3   48[BANK0 ] float 
  9328 ;; Auto vars:     Size  Location     Type
  9329 ;;		None
  9330 ;; Return value:  Size  Location     Type
  9331 ;;                  3   45[BANK0 ] float 
  9332 ;; Registers used:
  9333 ;;		wreg, status,2, status,0, pclath, cstack
  9334 ;; Tracked objects:
  9335 ;;		On entry : 0/0
  9336 ;;		On exit  : 0/0
  9337 ;;		Unchanged: 0/0
  9338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9339 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9340 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9341 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9342 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9343 ;;Total ram usage:        6 bytes
  9344 ;; Hardware stack levels used:    1
  9345 ;; Hardware stack levels required when called:    2
  9346 ;; This function calls:
  9347 ;;		___ftadd
  9348 ;; This function is called by:
  9349 ;;		_tempCalc
  9350 ;; This function uses a non-reentrant model
  9351 ;;
  9352                           
  9353                           
  9354                           ;psect for function ___ftsub
  9355  133C                     ___ftsub:	
  9356                           
  9357                           ;incstack = 0
  9358                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  9359  133C  0020               	movlb	0	; select bank0
  9360  133D  084F               	movf	___ftsub@f2+2,w
  9361  133E  044E               	iorwf	___ftsub@f2+1,w
  9362  133F  044D               	iorwf	___ftsub@f2,w
  9363  1340  1903               	skipnz
  9364  1341  2B44               	goto	l2772
  9365  1342  3080               	movlw	128
  9366  1343  06CF               	xorwf	___ftsub@f2+2,f
  9367  1344                     l2772:	
  9368  1344  0850               	movf	___ftsub@f1,w
  9369  1345  00C0               	movwf	___ftadd@f1
  9370  1346  0851               	movf	___ftsub@f1+1,w
  9371  1347  00C1               	movwf	___ftadd@f1+1
  9372  1348  0852               	movf	___ftsub@f1+2,w
  9373  1349  00C2               	movwf	___ftadd@f1+2
  9374  134A  084D               	movf	___ftsub@f2,w
  9375  134B  00C3               	movwf	___ftadd@f2
  9376  134C  084E               	movf	___ftsub@f2+1,w
  9377  134D  00C4               	movwf	___ftadd@f2+1
  9378  134E  084F               	movf	___ftsub@f2+2,w
  9379  134F  00C5               	movwf	___ftadd@f2+2
  9380  1350  318C  24A1         	fcall	___ftadd
  9381  1352  0020               	movlb	0	; select bank0
  9382  1353  0840               	movf	?___ftadd,w
  9383  1354  00CD               	movwf	?___ftsub
  9384  1355  0841               	movf	?___ftadd+1,w
  9385  1356  00CE               	movwf	?___ftsub+1
  9386  1357  0842               	movf	?___ftadd+2,w
  9387  1358  00CF               	movwf	?___ftsub+2
  9388  1359  0008               	return
  9389  135A                     __end_of___ftsub:	
  9390                           
  9391                           	psect	text8
  9392  0CA1                     __ptext8:	
  9393 ;; *************** function ___ftadd *****************
  9394 ;; Defined at:
  9395 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
  9396 ;; Parameters:    Size  Location     Type
  9397 ;;  f1              3   32[BANK0 ] float 
  9398 ;;  f2              3   35[BANK0 ] float 
  9399 ;; Auto vars:     Size  Location     Type
  9400 ;;  exp1            1   44[BANK0 ] unsigned char 
  9401 ;;  exp2            1   43[BANK0 ] unsigned char 
  9402 ;;  sign            1   42[BANK0 ] unsigned char 
  9403 ;; Return value:  Size  Location     Type
  9404 ;;                  3   32[BANK0 ] float 
  9405 ;; Registers used:
  9406 ;;		wreg, status,2, status,0, pclath, cstack
  9407 ;; Tracked objects:
  9408 ;;		On entry : 0/0
  9409 ;;		On exit  : 0/0
  9410 ;;		Unchanged: 0/0
  9411 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9412 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9413 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9414 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9415 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9416 ;;Total ram usage:       13 bytes
  9417 ;; Hardware stack levels used:    1
  9418 ;; Hardware stack levels required when called:    1
  9419 ;; This function calls:
  9420 ;;		___ftpack
  9421 ;; This function is called by:
  9422 ;;		_tempCalc
  9423 ;;		___ftsub
  9424 ;;		_log
  9425 ;;		_eval_poly
  9426 ;; This function uses a non-reentrant model
  9427 ;;
  9428                           
  9429                           
  9430                           ;psect for function ___ftadd
  9431  0CA1                     ___ftadd:	
  9432                           
  9433                           ;incstack = 0
  9434                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  9435  0CA1  0020               	movlb	0	; select bank0
  9436  0CA2  0840               	movf	___ftadd@f1,w
  9437  0CA3  00C6               	movwf	??___ftadd
  9438  0CA4  0841               	movf	___ftadd@f1+1,w
  9439  0CA5  00C7               	movwf	??___ftadd+1
  9440  0CA6  0842               	movf	___ftadd@f1+2,w
  9441  0CA7  00C8               	movwf	??___ftadd+2
  9442  0CA8  1003               	clrc
  9443  0CA9  0D47               	rlf	??___ftadd+1,w
  9444  0CAA  0D48               	rlf	??___ftadd+2,w
  9445  0CAB  00C9               	movwf	??___ftadd+3
  9446  0CAC  0849               	movf	??___ftadd+3,w
  9447  0CAD  00CC               	movwf	___ftadd@exp1
  9448  0CAE  0843               	movf	___ftadd@f2,w
  9449  0CAF  00C6               	movwf	??___ftadd
  9450  0CB0  0844               	movf	___ftadd@f2+1,w
  9451  0CB1  00C7               	movwf	??___ftadd+1
  9452  0CB2  0845               	movf	___ftadd@f2+2,w
  9453  0CB3  00C8               	movwf	??___ftadd+2
  9454  0CB4  1003               	clrc
  9455  0CB5  0D47               	rlf	??___ftadd+1,w
  9456  0CB6  0D48               	rlf	??___ftadd+2,w
  9457  0CB7  00C9               	movwf	??___ftadd+3
  9458  0CB8  0849               	movf	??___ftadd+3,w
  9459  0CB9  00CB               	movwf	___ftadd@exp2
  9460  0CBA  084C               	movf	___ftadd@exp1,w
  9461  0CBB  1903               	btfsc	3,2
  9462  0CBC  2CC9               	goto	l2268
  9463  0CBD  084B               	movf	___ftadd@exp2,w
  9464  0CBE  024C               	subwf	___ftadd@exp1,w
  9465  0CBF  1803               	skipnc
  9466  0CC0  2CD0               	goto	l2272
  9467  0CC1  034C               	decf	___ftadd@exp1,w
  9468  0CC2  3AFF               	xorlw	255
  9469  0CC3  074B               	addwf	___ftadd@exp2,w
  9470  0CC4  00C6               	movwf	??___ftadd
  9471  0CC5  3019               	movlw	25
  9472  0CC6  0246               	subwf	??___ftadd,w
  9473  0CC7  1C03               	skipc
  9474  0CC8  2CD0               	goto	l2272
  9475  0CC9                     l2268:	
  9476  0CC9  0843               	movf	___ftadd@f2,w
  9477  0CCA  00C0               	movwf	?___ftadd
  9478  0CCB  0844               	movf	___ftadd@f2+1,w
  9479  0CCC  00C1               	movwf	?___ftadd+1
  9480  0CCD  0845               	movf	___ftadd@f2+2,w
  9481  0CCE  00C2               	movwf	?___ftadd+2
  9482  0CCF  0008               	return
  9483  0CD0                     l2272:	
  9484  0CD0  084B               	movf	___ftadd@exp2,w
  9485  0CD1  1903               	btfsc	3,2
  9486  0CD2  0008               	return
  9487  0CD3  084C               	movf	___ftadd@exp1,w
  9488  0CD4  024B               	subwf	___ftadd@exp2,w
  9489  0CD5  1803               	skipnc
  9490  0CD6  2CDF               	goto	l2278
  9491  0CD7  034B               	decf	___ftadd@exp2,w
  9492  0CD8  3AFF               	xorlw	255
  9493  0CD9  074C               	addwf	___ftadd@exp1,w
  9494  0CDA  00C6               	movwf	??___ftadd
  9495  0CDB  3019               	movlw	25
  9496  0CDC  0246               	subwf	??___ftadd,w
  9497  0CDD  1803               	btfsc	3,0
  9498  0CDE  0008               	return
  9499  0CDF                     l2278:	
  9500  0CDF  3006               	movlw	6
  9501  0CE0  00C6               	movwf	??___ftadd
  9502  0CE1  0846               	movf	??___ftadd,w
  9503  0CE2  00CA               	movwf	___ftadd@sign
  9504  0CE3  1BC2               	btfsc	___ftadd@f1+2,7
  9505  0CE4  17CA               	bsf	___ftadd@sign,7
  9506  0CE5  1BC5               	btfsc	___ftadd@f2+2,7
  9507  0CE6  174A               	bsf	___ftadd@sign,6
  9508  0CE7  17C1               	bsf	___ftadd@f1+1,7
  9509  0CE8  30FF               	movlw	255
  9510  0CE9  05C0               	andwf	___ftadd@f1,f
  9511  0CEA  30FF               	movlw	255
  9512  0CEB  05C1               	andwf	___ftadd@f1+1,f
  9513  0CEC  3000               	movlw	0
  9514  0CED  05C2               	andwf	___ftadd@f1+2,f
  9515  0CEE  17C4               	bsf	___ftadd@f2+1,7
  9516  0CEF  30FF               	movlw	255
  9517  0CF0  05C3               	andwf	___ftadd@f2,f
  9518  0CF1  30FF               	movlw	255
  9519  0CF2  05C4               	andwf	___ftadd@f2+1,f
  9520  0CF3  3000               	movlw	0
  9521  0CF4  05C5               	andwf	___ftadd@f2+2,f
  9522  0CF5  084B               	movf	___ftadd@exp2,w
  9523  0CF6  024C               	subwf	___ftadd@exp1,w
  9524  0CF7  1803               	skipnc
  9525  0CF8  2D1B               	goto	l2300
  9526  0CF9                     l2290:	
  9527  0CF9  3001               	movlw	1
  9528  0CFA                     u2285:	
  9529  0CFA  35C3               	lslf	___ftadd@f2,f
  9530  0CFB  0DC4               	rlf	___ftadd@f2+1,f
  9531  0CFC  0DC5               	rlf	___ftadd@f2+2,f
  9532  0CFD  0B89               	decfsz	9,f
  9533  0CFE  2CFA               	goto	u2285
  9534  0CFF  3001               	movlw	1
  9535  0D00  02CB               	subwf	___ftadd@exp2,f
  9536  0D01  084B               	movf	___ftadd@exp2,w
  9537  0D02  064C               	xorwf	___ftadd@exp1,w
  9538  0D03  1903               	skipnz
  9539  0D04  2D16               	goto	l2298
  9540  0D05  3001               	movlw	1
  9541  0D06  02CA               	subwf	___ftadd@sign,f
  9542  0D07  084A               	movf	___ftadd@sign,w
  9543  0D08  3907               	andlw	7
  9544  0D09  1903               	btfsc	3,2
  9545  0D0A  2D16               	goto	l2298
  9546  0D0B  2CF9               	goto	l2290
  9547  0D0C                     l2296:	
  9548  0D0C  3001               	movlw	1
  9549  0D0D                     u2315:	
  9550  0D0D  36C2               	lsrf	___ftadd@f1+2,f
  9551  0D0E  0CC1               	rrf	___ftadd@f1+1,f
  9552  0D0F  0CC0               	rrf	___ftadd@f1,f
  9553  0D10  0B89               	decfsz	9,f
  9554  0D11  2D0D               	goto	u2315
  9555  0D12  3001               	movlw	1
  9556  0D13  00C6               	movwf	??___ftadd
  9557  0D14  0846               	movf	??___ftadd,w
  9558  0D15  07CC               	addwf	___ftadd@exp1,f
  9559  0D16                     l2298:	
  9560  0D16  084C               	movf	___ftadd@exp1,w
  9561  0D17  064B               	xorwf	___ftadd@exp2,w
  9562  0D18  1903               	btfsc	3,2
  9563  0D19  2D40               	goto	l774
  9564  0D1A  2D0C               	goto	l2296
  9565  0D1B                     l2300:	
  9566  0D1B  084C               	movf	___ftadd@exp1,w
  9567  0D1C  024B               	subwf	___ftadd@exp2,w
  9568  0D1D  1803               	skipnc
  9569  0D1E  2D40               	goto	l774
  9570  0D1F                     l2302:	
  9571  0D1F  3001               	movlw	1
  9572  0D20                     u2345:	
  9573  0D20  35C0               	lslf	___ftadd@f1,f
  9574  0D21  0DC1               	rlf	___ftadd@f1+1,f
  9575  0D22  0DC2               	rlf	___ftadd@f1+2,f
  9576  0D23  0B89               	decfsz	9,f
  9577  0D24  2D20               	goto	u2345
  9578  0D25  3001               	movlw	1
  9579  0D26  02CC               	subwf	___ftadd@exp1,f
  9580  0D27  084B               	movf	___ftadd@exp2,w
  9581  0D28  064C               	xorwf	___ftadd@exp1,w
  9582  0D29  1903               	skipnz
  9583  0D2A  2D3C               	goto	l2310
  9584  0D2B  3001               	movlw	1
  9585  0D2C  02CA               	subwf	___ftadd@sign,f
  9586  0D2D  084A               	movf	___ftadd@sign,w
  9587  0D2E  3907               	andlw	7
  9588  0D2F  1903               	btfsc	3,2
  9589  0D30  2D3C               	goto	l2310
  9590  0D31  2D1F               	goto	l2302
  9591  0D32                     l2308:	
  9592  0D32  3001               	movlw	1
  9593  0D33                     u2375:	
  9594  0D33  36C5               	lsrf	___ftadd@f2+2,f
  9595  0D34  0CC4               	rrf	___ftadd@f2+1,f
  9596  0D35  0CC3               	rrf	___ftadd@f2,f
  9597  0D36  0B89               	decfsz	9,f
  9598  0D37  2D33               	goto	u2375
  9599  0D38  3001               	movlw	1
  9600  0D39  00C6               	movwf	??___ftadd
  9601  0D3A  0846               	movf	??___ftadd,w
  9602  0D3B  07CB               	addwf	___ftadd@exp2,f
  9603  0D3C                     l2310:	
  9604  0D3C  084C               	movf	___ftadd@exp1,w
  9605  0D3D  064B               	xorwf	___ftadd@exp2,w
  9606  0D3E  1D03               	skipz
  9607  0D3F  2D32               	goto	l2308
  9608  0D40                     l774:	
  9609  0D40  1FCA               	btfss	___ftadd@sign,7
  9610  0D41  2D52               	goto	l2314
  9611  0D42  30FF               	movlw	255
  9612  0D43  06C0               	xorwf	___ftadd@f1,f
  9613  0D44  30FF               	movlw	255
  9614  0D45  06C1               	xorwf	___ftadd@f1+1,f
  9615  0D46  30FF               	movlw	255
  9616  0D47  06C2               	xorwf	___ftadd@f1+2,f
  9617  0D48  3001               	movlw	1
  9618  0D49  07C0               	addwf	___ftadd@f1,f
  9619  0D4A  3000               	movlw	0
  9620  0D4B  1803               	skipnc
  9621  0D4C  3001               	movlw	1
  9622  0D4D  07C1               	addwf	___ftadd@f1+1,f
  9623  0D4E  3000               	movlw	0
  9624  0D4F  1803               	skipnc
  9625  0D50  3001               	movlw	1
  9626  0D51  07C2               	addwf	___ftadd@f1+2,f
  9627  0D52                     l2314:	
  9628  0D52  1F4A               	btfss	___ftadd@sign,6
  9629  0D53  2D64               	goto	l2318
  9630  0D54  30FF               	movlw	255
  9631  0D55  06C3               	xorwf	___ftadd@f2,f
  9632  0D56  30FF               	movlw	255
  9633  0D57  06C4               	xorwf	___ftadd@f2+1,f
  9634  0D58  30FF               	movlw	255
  9635  0D59  06C5               	xorwf	___ftadd@f2+2,f
  9636  0D5A  3001               	movlw	1
  9637  0D5B  07C3               	addwf	___ftadd@f2,f
  9638  0D5C  3000               	movlw	0
  9639  0D5D  1803               	skipnc
  9640  0D5E  3001               	movlw	1
  9641  0D5F  07C4               	addwf	___ftadd@f2+1,f
  9642  0D60  3000               	movlw	0
  9643  0D61  1803               	skipnc
  9644  0D62  3001               	movlw	1
  9645  0D63  07C5               	addwf	___ftadd@f2+2,f
  9646  0D64                     l2318:	
  9647  0D64  01CA               	clrf	___ftadd@sign
  9648  0D65  0840               	movf	___ftadd@f1,w
  9649  0D66  07C3               	addwf	___ftadd@f2,f
  9650  0D67  0841               	movf	___ftadd@f1+1,w
  9651  0D68  3DC4               	addwfc	___ftadd@f2+1,f
  9652  0D69  0842               	movf	___ftadd@f1+2,w
  9653  0D6A  3DC5               	addwfc	___ftadd@f2+2,f
  9654  0D6B  1FC5               	btfss	___ftadd@f2+2,7
  9655  0D6C  2D7F               	goto	l2328
  9656  0D6D  30FF               	movlw	255
  9657  0D6E  06C3               	xorwf	___ftadd@f2,f
  9658  0D6F  30FF               	movlw	255
  9659  0D70  06C4               	xorwf	___ftadd@f2+1,f
  9660  0D71  30FF               	movlw	255
  9661  0D72  06C5               	xorwf	___ftadd@f2+2,f
  9662  0D73  3001               	movlw	1
  9663  0D74  07C3               	addwf	___ftadd@f2,f
  9664  0D75  3000               	movlw	0
  9665  0D76  1803               	skipnc
  9666  0D77  3001               	movlw	1
  9667  0D78  07C4               	addwf	___ftadd@f2+1,f
  9668  0D79  3000               	movlw	0
  9669  0D7A  1803               	skipnc
  9670  0D7B  3001               	movlw	1
  9671  0D7C  07C5               	addwf	___ftadd@f2+2,f
  9672  0D7D  01CA               	clrf	___ftadd@sign
  9673  0D7E  0ACA               	incf	___ftadd@sign,f
  9674  0D7F                     l2328:	
  9675  0D7F  0843               	movf	___ftadd@f2,w
  9676  0D80  00F0               	movwf	___ftpack@arg
  9677  0D81  0844               	movf	___ftadd@f2+1,w
  9678  0D82  00F1               	movwf	___ftpack@arg+1
  9679  0D83  0845               	movf	___ftadd@f2+2,w
  9680  0D84  00F2               	movwf	___ftpack@arg+2
  9681  0D85  084C               	movf	___ftadd@exp1,w
  9682  0D86  00C6               	movwf	??___ftadd
  9683  0D87  0846               	movf	??___ftadd,w
  9684  0D88  00F3               	movwf	___ftpack@exp
  9685  0D89  084A               	movf	___ftadd@sign,w
  9686  0D8A  00C7               	movwf	??___ftadd+1
  9687  0D8B  0847               	movf	??___ftadd+1,w
  9688  0D8C  00F4               	movwf	___ftpack@sign
  9689  0D8D  3188  2017         	fcall	___ftpack
  9690  0D8F  0870               	movf	?___ftpack,w
  9691  0D90  0020               	movlb	0	; select bank0
  9692  0D91  00C0               	movwf	?___ftadd
  9693  0D92  0871               	movf	?___ftpack+1,w
  9694  0D93  00C1               	movwf	?___ftadd+1
  9695  0D94  0872               	movf	?___ftpack+2,w
  9696  0D95  00C2               	movwf	?___ftadd+2
  9697  0D96  0008               	return
  9698  0D97                     __end_of___ftadd:	
  9699                           
  9700                           	psect	text9
  9701  0EB4                     __ptext9:	
  9702 ;; *************** function _readIAnalog *****************
  9703 ;; Defined at:
  9704 ;;		line 77 in file "adc.c"
  9705 ;; Parameters:    Size  Location     Type
  9706 ;;  channel         2    6[BANK0 ] unsigned int 
  9707 ;; Auto vars:     Size  Location     Type
  9708 ;;  value           2   11[COMMON] int 
  9709 ;;  analog_chann    2    9[COMMON] unsigned int 
  9710 ;; Return value:  Size  Location     Type
  9711 ;;                  2    6[BANK0 ] int 
  9712 ;; Registers used:
  9713 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9714 ;; Tracked objects:
  9715 ;;		On entry : 0/0
  9716 ;;		On exit  : 0/0
  9717 ;;		Unchanged: 0/0
  9718 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9719 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9720 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9721 ;;      Temps:          0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9722 ;;      Totals:         4      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9723 ;;Total ram usage:       24 bytes
  9724 ;; Hardware stack levels used:    1
  9725 ;; Hardware stack levels required when called:    1
  9726 ;; This function calls:
  9727 ;;		_ADCRead
  9728 ;;		___aldiv
  9729 ;;		___wmul
  9730 ;; This function is called by:
  9731 ;;		_main
  9732 ;; This function uses a non-reentrant model
  9733 ;;
  9734                           
  9735                           
  9736                           ;psect for function _readIAnalog
  9737  0EB4                     _readIAnalog:	
  9738                           
  9739                           ;adc.c: 79: int16_t value;
  9740                           ;adc.c: 81: uint16_t analog_channel = channels[channel];
  9741                           
  9742                           ;incstack = 0
  9743                           ; Regs used in _readIAnalog: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9744  0EB4  0020               	movlb	0	; select bank0
  9745  0EB5  3526               	lslf	readIAnalog@channel,w
  9746  0EB6  3E49               	addlw	(low (_channels| (0+256)))& (0+255)
  9747  0EB7  0086               	movwf	6
  9748  0EB8  3001               	movlw	1	; select bank2/3
  9749  0EB9  0087               	movwf	7
  9750  0EBA  3F40               	moviw [0]fsr1
  9751  0EBB  00F9               	movwf	readIAnalog@analog_channel
  9752  0EBC  3F41               	moviw [1]fsr1
  9753  0EBD  00FA               	movwf	readIAnalog@analog_channel+1
  9754                           
  9755                           ;adc.c: 83: value = ADCRead(analog_channel);
  9756  0EBE  0879               	movf	readIAnalog@analog_channel,w
  9757  0EBF  3192  22F6  318E   	fcall	_ADCRead
  9758  0EC2  0871               	movf	?_ADCRead+1,w
  9759  0EC3  00FC               	movwf	readIAnalog@value+1
  9760  0EC4  0870               	movf	?_ADCRead,w
  9761  0EC5  00FB               	movwf	readIAnalog@value
  9762                           
  9763                           ;adc.c: 85: totals[channel] = totals[channel]-samples[channel][sampleIndex];
  9764  0EC6  0020               	movlb	0	; select bank0
  9765  0EC7  0826               	movf	readIAnalog@channel,w
  9766  0EC8  00A8               	movwf	??_readIAnalog
  9767  0EC9  3001               	movlw	1
  9768  0ECA                     u3145:	
  9769  0ECA  35A8               	lslf	??_readIAnalog,f
  9770  0ECB  3EFF               	addlw	-1
  9771  0ECC  1D03               	skipz
  9772  0ECD  2ECA               	goto	u3145
  9773  0ECE  3528               	lslf	??_readIAnalog,w
  9774  0ECF  3E20               	addlw	(low (_totals| (0+256)))& (0+255)
  9775  0ED0  0086               	movwf	6
  9776  0ED1  3001               	movlw	1	; select bank2/3
  9777  0ED2  0087               	movwf	7
  9778  0ED3  3F40               	moviw [0]fsr1
  9779  0ED4  00A9               	movwf	??_readIAnalog+1
  9780  0ED5  3F41               	moviw [1]fsr1
  9781  0ED6  00AA               	movwf	??_readIAnalog+2
  9782  0ED7  3F42               	moviw [2]fsr1
  9783  0ED8  00AB               	movwf	??_readIAnalog+3
  9784  0ED9  3F43               	moviw [3]fsr1
  9785  0EDA  00AC               	movwf	??_readIAnalog+4
  9786  0EDB  0021               	movlb	1	; select bank1
  9787  0EDC  084B               	movf	(_sampleIndex+1)^(0+128),w
  9788  0EDD  0020               	movlb	0	; select bank0
  9789  0EDE  00AE               	movwf	??_readIAnalog+6
  9790  0EDF  0021               	movlb	1	; select bank1
  9791  0EE0  084A               	movf	_sampleIndex^(0+128),w
  9792  0EE1  0020               	movlb	0	; select bank0
  9793  0EE2  00AD               	movwf	??_readIAnalog+5
  9794  0EE3  35AD               	lslf	??_readIAnalog+5,f
  9795  0EE4  0DAE               	rlf	??_readIAnalog+6,f
  9796  0EE5  0827               	movf	readIAnalog@channel+1,w
  9797  0EE6  00F1               	movwf	___wmul@multiplier+1
  9798  0EE7  0826               	movf	readIAnalog@channel,w
  9799  0EE8  00F0               	movwf	___wmul@multiplier
  9800  0EE9  3096               	movlw	150
  9801  0EEA  00F2               	movwf	___wmul@multiplicand
  9802  0EEB  3000               	movlw	0
  9803  0EEC  00F3               	movwf	___wmul@multiplicand+1
  9804  0EED  3193  2321  318E   	fcall	___wmul
  9805  0EF0  3098               	movlw	152
  9806  0EF1  0020               	movlb	0	; select bank0
  9807  0EF2  00AF               	movwf	??_readIAnalog+7
  9808  0EF3  3021               	movlw	33
  9809  0EF4  00B0               	movwf	??_readIAnalog+8
  9810  0EF5  0870               	movf	?___wmul,w
  9811  0EF6  072F               	addwf	??_readIAnalog+7,w
  9812  0EF7  00B1               	movwf	??_readIAnalog+9
  9813  0EF8  0871               	movf	?___wmul+1,w
  9814  0EF9  3D30               	addwfc	??_readIAnalog+8,w
  9815  0EFA  00B2               	movwf	??_readIAnalog+10
  9816  0EFB  082D               	movf	??_readIAnalog+5,w
  9817  0EFC  0731               	addwf	??_readIAnalog+9,w
  9818  0EFD  0086               	movwf	6
  9819  0EFE  082E               	movf	??_readIAnalog+6,w
  9820  0EFF  3D32               	addwfc	??_readIAnalog+10,w
  9821  0F00  0087               	movwf	7
  9822  0F01  3F40               	moviw [0]fsr1
  9823  0F02  00B3               	movwf	??_readIAnalog+11
  9824  0F03  3F41               	moviw [1]fsr1
  9825  0F04  00B4               	movwf	??_readIAnalog+12
  9826  0F05  0833               	movf	??_readIAnalog+11,w
  9827  0F06  00B5               	movwf	??_readIAnalog+13
  9828  0F07  0834               	movf	??_readIAnalog+12,w
  9829  0F08  00B6               	movwf	??_readIAnalog+14
  9830  0F09  3000               	movlw	0
  9831  0F0A  1BB6               	btfsc	??_readIAnalog+14,7
  9832  0F0B  30FF               	movlw	255
  9833  0F0C  00B7               	movwf	??_readIAnalog+15
  9834  0F0D  00B8               	movwf	??_readIAnalog+16
  9835  0F0E  09B5               	comf	??_readIAnalog+13,f
  9836  0F0F  09B6               	comf	??_readIAnalog+14,f
  9837  0F10  09B7               	comf	??_readIAnalog+15,f
  9838  0F11  09B8               	comf	??_readIAnalog+16,f
  9839  0F12  0AB5               	incf	??_readIAnalog+13,f
  9840  0F13  1903               	skipnz
  9841  0F14  0AB6               	incf	??_readIAnalog+14,f
  9842  0F15  1903               	skipnz
  9843  0F16  0AB7               	incf	??_readIAnalog+15,f
  9844  0F17  1903               	skipnz
  9845  0F18  0AB8               	incf	??_readIAnalog+16,f
  9846  0F19  0835               	movf	??_readIAnalog+13,w
  9847  0F1A  07A9               	addwf	??_readIAnalog+1,f
  9848  0F1B  0836               	movf	??_readIAnalog+14,w
  9849  0F1C  3DAA               	addwfc	??_readIAnalog+2,f
  9850  0F1D  0837               	movf	??_readIAnalog+15,w
  9851  0F1E  3DAB               	addwfc	??_readIAnalog+3,f
  9852  0F1F  0838               	movf	??_readIAnalog+16,w
  9853  0F20  3DAC               	addwfc	??_readIAnalog+4,f
  9854  0F21  0826               	movf	readIAnalog@channel,w
  9855  0F22  00B9               	movwf	??_readIAnalog+17
  9856  0F23  3001               	movlw	1
  9857  0F24                     u3155:	
  9858  0F24  35B9               	lslf	??_readIAnalog+17,f
  9859  0F25  3EFF               	addlw	-1
  9860  0F26  1D03               	skipz
  9861  0F27  2F24               	goto	u3155
  9862  0F28  3539               	lslf	??_readIAnalog+17,w
  9863  0F29  3E20               	addlw	(low (_totals| (0+256)))& (0+255)
  9864  0F2A  0086               	movwf	6
  9865  0F2B  3001               	movlw	1	; select bank2/3
  9866  0F2C  0087               	movwf	7
  9867  0F2D  0829               	movf	??_readIAnalog+1,w
  9868  0F2E  3FC0               	movwi [0]fsr1
  9869  0F2F  082A               	movf	??_readIAnalog+2,w
  9870  0F30  3FC1               	movwi [1]fsr1
  9871  0F31  082B               	movf	??_readIAnalog+3,w
  9872  0F32  3FC2               	movwi [2]fsr1
  9873  0F33  082C               	movf	??_readIAnalog+4,w
  9874  0F34  3FC3               	movwi [3]fsr1
  9875                           
  9876                           ;adc.c: 87: samples[channel][sampleIndex] = value;
  9877  0F35  0021               	movlb	1	; select bank1
  9878  0F36  084B               	movf	(_sampleIndex+1)^(0+128),w
  9879  0F37  0020               	movlb	0	; select bank0
  9880  0F38  00A9               	movwf	??_readIAnalog+1
  9881  0F39  0021               	movlb	1	; select bank1
  9882  0F3A  084A               	movf	_sampleIndex^(0+128),w
  9883  0F3B  0020               	movlb	0	; select bank0
  9884  0F3C  00A8               	movwf	??_readIAnalog
  9885  0F3D  35A8               	lslf	??_readIAnalog,f
  9886  0F3E  0DA9               	rlf	??_readIAnalog+1,f
  9887  0F3F  0827               	movf	readIAnalog@channel+1,w
  9888  0F40  00F1               	movwf	___wmul@multiplier+1
  9889  0F41  0826               	movf	readIAnalog@channel,w
  9890  0F42  00F0               	movwf	___wmul@multiplier
  9891  0F43  3096               	movlw	150
  9892  0F44  00F2               	movwf	___wmul@multiplicand
  9893  0F45  3000               	movlw	0
  9894  0F46  00F3               	movwf	___wmul@multiplicand+1
  9895  0F47  3193  2321  318E   	fcall	___wmul
  9896  0F4A  3098               	movlw	152
  9897  0F4B  0020               	movlb	0	; select bank0
  9898  0F4C  00AA               	movwf	??_readIAnalog+2
  9899  0F4D  3021               	movlw	33
  9900  0F4E  00AB               	movwf	??_readIAnalog+3
  9901  0F4F  0870               	movf	?___wmul,w
  9902  0F50  072A               	addwf	??_readIAnalog+2,w
  9903  0F51  00AC               	movwf	??_readIAnalog+4
  9904  0F52  0871               	movf	?___wmul+1,w
  9905  0F53  3D2B               	addwfc	??_readIAnalog+3,w
  9906  0F54  00AD               	movwf	??_readIAnalog+5
  9907  0F55  0828               	movf	??_readIAnalog,w
  9908  0F56  072C               	addwf	??_readIAnalog+4,w
  9909  0F57  0086               	movwf	6
  9910  0F58  0829               	movf	??_readIAnalog+1,w
  9911  0F59  3D2D               	addwfc	??_readIAnalog+5,w
  9912  0F5A  0087               	movwf	7
  9913  0F5B  087B               	movf	readIAnalog@value,w
  9914  0F5C  3FC0               	movwi [0]fsr1
  9915  0F5D  087C               	movf	readIAnalog@value+1,w
  9916  0F5E  3FC1               	movwi [1]fsr1
  9917                           
  9918                           ;adc.c: 89: totals[channel] = totals[channel]+samples[channel][sampleIndex];
  9919  0F5F  0826               	movf	readIAnalog@channel,w
  9920  0F60  00A8               	movwf	??_readIAnalog
  9921  0F61  3001               	movlw	1
  9922  0F62                     u3165:	
  9923  0F62  35A8               	lslf	??_readIAnalog,f
  9924  0F63  3EFF               	addlw	-1
  9925  0F64  1D03               	skipz
  9926  0F65  2F62               	goto	u3165
  9927  0F66  3528               	lslf	??_readIAnalog,w
  9928  0F67  3E20               	addlw	(low (_totals| (0+256)))& (0+255)
  9929  0F68  0086               	movwf	6
  9930  0F69  3001               	movlw	1	; select bank2/3
  9931  0F6A  0087               	movwf	7
  9932  0F6B  3F40               	moviw [0]fsr1
  9933  0F6C  00A9               	movwf	??_readIAnalog+1
  9934  0F6D  3F41               	moviw [1]fsr1
  9935  0F6E  00AA               	movwf	??_readIAnalog+2
  9936  0F6F  3F42               	moviw [2]fsr1
  9937  0F70  00AB               	movwf	??_readIAnalog+3
  9938  0F71  3F43               	moviw [3]fsr1
  9939  0F72  00AC               	movwf	??_readIAnalog+4
  9940  0F73  0021               	movlb	1	; select bank1
  9941  0F74  084B               	movf	(_sampleIndex+1)^(0+128),w
  9942  0F75  0020               	movlb	0	; select bank0
  9943  0F76  00AE               	movwf	??_readIAnalog+6
  9944  0F77  0021               	movlb	1	; select bank1
  9945  0F78  084A               	movf	_sampleIndex^(0+128),w
  9946  0F79  0020               	movlb	0	; select bank0
  9947  0F7A  00AD               	movwf	??_readIAnalog+5
  9948  0F7B  35AD               	lslf	??_readIAnalog+5,f
  9949  0F7C  0DAE               	rlf	??_readIAnalog+6,f
  9950  0F7D  0827               	movf	readIAnalog@channel+1,w
  9951  0F7E  00F1               	movwf	___wmul@multiplier+1
  9952  0F7F  0826               	movf	readIAnalog@channel,w
  9953  0F80  00F0               	movwf	___wmul@multiplier
  9954  0F81  3096               	movlw	150
  9955  0F82  00F2               	movwf	___wmul@multiplicand
  9956  0F83  3000               	movlw	0
  9957  0F84  00F3               	movwf	___wmul@multiplicand+1
  9958  0F85  3193  2321  318E   	fcall	___wmul
  9959  0F88  3098               	movlw	152
  9960  0F89  0020               	movlb	0	; select bank0
  9961  0F8A  00AF               	movwf	??_readIAnalog+7
  9962  0F8B  3021               	movlw	33
  9963  0F8C  00B0               	movwf	??_readIAnalog+8
  9964  0F8D  0870               	movf	?___wmul,w
  9965  0F8E  072F               	addwf	??_readIAnalog+7,w
  9966  0F8F  00B1               	movwf	??_readIAnalog+9
  9967  0F90  0871               	movf	?___wmul+1,w
  9968  0F91  3D30               	addwfc	??_readIAnalog+8,w
  9969  0F92  00B2               	movwf	??_readIAnalog+10
  9970  0F93  082D               	movf	??_readIAnalog+5,w
  9971  0F94  0731               	addwf	??_readIAnalog+9,w
  9972  0F95  0086               	movwf	6
  9973  0F96  082E               	movf	??_readIAnalog+6,w
  9974  0F97  3D32               	addwfc	??_readIAnalog+10,w
  9975  0F98  0087               	movwf	7
  9976  0F99  3F40               	moviw [0]fsr1
  9977  0F9A  00B3               	movwf	??_readIAnalog+11
  9978  0F9B  3F41               	moviw [1]fsr1
  9979  0F9C  00B4               	movwf	??_readIAnalog+12
  9980  0F9D  0833               	movf	??_readIAnalog+11,w
  9981  0F9E  00B5               	movwf	??_readIAnalog+13
  9982  0F9F  0834               	movf	??_readIAnalog+12,w
  9983  0FA0  00B6               	movwf	??_readIAnalog+14
  9984  0FA1  3000               	movlw	0
  9985  0FA2  1BB6               	btfsc	??_readIAnalog+14,7
  9986  0FA3  30FF               	movlw	255
  9987  0FA4  00B7               	movwf	??_readIAnalog+15
  9988  0FA5  00B8               	movwf	??_readIAnalog+16
  9989  0FA6  0835               	movf	??_readIAnalog+13,w
  9990  0FA7  07A9               	addwf	??_readIAnalog+1,f
  9991  0FA8  0836               	movf	??_readIAnalog+14,w
  9992  0FA9  3DAA               	addwfc	??_readIAnalog+2,f
  9993  0FAA  0837               	movf	??_readIAnalog+15,w
  9994  0FAB  3DAB               	addwfc	??_readIAnalog+3,f
  9995  0FAC  0838               	movf	??_readIAnalog+16,w
  9996  0FAD  3DAC               	addwfc	??_readIAnalog+4,f
  9997  0FAE  0826               	movf	readIAnalog@channel,w
  9998  0FAF  00B9               	movwf	??_readIAnalog+17
  9999  0FB0  3001               	movlw	1
 10000  0FB1                     u3175:	
 10001  0FB1  35B9               	lslf	??_readIAnalog+17,f
 10002  0FB2  3EFF               	addlw	-1
 10003  0FB3  1D03               	skipz
 10004  0FB4  2FB1               	goto	u3175
 10005  0FB5  3539               	lslf	??_readIAnalog+17,w
 10006  0FB6  3E20               	addlw	(low (_totals| (0+256)))& (0+255)
 10007  0FB7  0086               	movwf	6
 10008  0FB8  3001               	movlw	1	; select bank2/3
 10009  0FB9  0087               	movwf	7
 10010  0FBA  0829               	movf	??_readIAnalog+1,w
 10011  0FBB  3FC0               	movwi [0]fsr1
 10012  0FBC  082A               	movf	??_readIAnalog+2,w
 10013  0FBD  3FC1               	movwi [1]fsr1
 10014  0FBE  082B               	movf	??_readIAnalog+3,w
 10015  0FBF  3FC2               	movwi [2]fsr1
 10016  0FC0  082C               	movf	??_readIAnalog+4,w
 10017  0FC1  3FC3               	movwi [3]fsr1
 10018                           
 10019                           ;adc.c: 91: if(channel>=(4-1))
 10020  0FC2  3000               	movlw	0
 10021  0FC3  0227               	subwf	readIAnalog@channel+1,w
 10022  0FC4  3003               	movlw	3
 10023  0FC5  1903               	skipnz
 10024  0FC6  0226               	subwf	readIAnalog@channel,w
 10025  0FC7  1C03               	skipc
 10026  0FC8  2FD7               	goto	l2854
 10027                           
 10028                           ;adc.c: 92: {
 10029                           ;adc.c: 93: sampleIndex+=1;
 10030  0FC9  3001               	movlw	1
 10031  0FCA  0021               	movlb	1	; select bank1
 10032  0FCB  07CA               	addwf	_sampleIndex^(0+128),f
 10033  0FCC  3000               	movlw	0
 10034  0FCD  3DCB               	addwfc	(_sampleIndex+1)^(0+128),f
 10035                           
 10036                           ;adc.c: 94: if(sampleIndex >= 75)sampleIndex = 0;
 10037  0FCE  3000               	movlw	0
 10038  0FCF  024B               	subwf	(_sampleIndex+1)^(0+128),w
 10039  0FD0  304B               	movlw	75
 10040  0FD1  1903               	skipnz
 10041  0FD2  024A               	subwf	_sampleIndex^(0+128),w
 10042  0FD3  1C03               	skipc
 10043  0FD4  2FD7               	goto	l2854
 10044  0FD5  01CA               	clrf	_sampleIndex^(0+128)
 10045  0FD6  01CB               	clrf	(_sampleIndex+1)^(0+128)
 10046  0FD7                     l2854:	
 10047                           
 10048                           ;adc.c: 95: }
 10049                           ;adc.c: 97: value = totals[channel]/75;
 10050  0FD7  3000               	movlw	0
 10051  0FD8  00F3               	movwf	___aldiv@divisor+3
 10052  0FD9  3000               	movlw	0
 10053  0FDA  00F2               	movwf	___aldiv@divisor+2
 10054  0FDB  3000               	movlw	0
 10055  0FDC  00F1               	movwf	___aldiv@divisor+1
 10056  0FDD  304B               	movlw	75
 10057  0FDE  00F0               	movwf	___aldiv@divisor
 10058  0FDF  0020               	movlb	0	; select bank0
 10059  0FE0  0826               	movf	readIAnalog@channel,w
 10060  0FE1  00A8               	movwf	??_readIAnalog
 10061  0FE2  3001               	movlw	1
 10062  0FE3                     u3205:	
 10063  0FE3  35A8               	lslf	??_readIAnalog,f
 10064  0FE4  3EFF               	addlw	-1
 10065  0FE5  1D03               	skipz
 10066  0FE6  2FE3               	goto	u3205
 10067  0FE7  3528               	lslf	??_readIAnalog,w
 10068  0FE8  3E20               	addlw	(low (_totals| (0+256)))& (0+255)
 10069  0FE9  0086               	movwf	6
 10070  0FEA  3001               	movlw	1	; select bank2/3
 10071  0FEB  0087               	movwf	7
 10072  0FEC  3F40               	moviw [0]fsr1
 10073  0FED  00F4               	movwf	___aldiv@dividend
 10074  0FEE  3F41               	moviw [1]fsr1
 10075  0FEF  00F5               	movwf	___aldiv@dividend+1
 10076  0FF0  3F42               	moviw [2]fsr1
 10077  0FF1  00F6               	movwf	___aldiv@dividend+2
 10078  0FF2  3F43               	moviw [3]fsr1
 10079  0FF3  00F7               	movwf	___aldiv@dividend+3
 10080  0FF4  3188  207B         	fcall	___aldiv
 10081  0FF6  0871               	movf	?___aldiv+1,w
 10082  0FF7  00FC               	movwf	readIAnalog@value+1
 10083  0FF8  0870               	movf	?___aldiv,w
 10084  0FF9  00FB               	movwf	readIAnalog@value
 10085                           
 10086                           ;adc.c: 99: return value;
 10087  0FFA  087C               	movf	readIAnalog@value+1,w
 10088  0FFB  0020               	movlb	0	; select bank0
 10089  0FFC  00A7               	movwf	?_readIAnalog+1
 10090  0FFD  087B               	movf	readIAnalog@value,w
 10091  0FFE  00A6               	movwf	?_readIAnalog
 10092  0FFF  0008               	return
 10093  1000                     __end_of_readIAnalog:	
 10094                           
 10095                           	psect	text10
 10096  087B                     __ptext10:	
 10097 ;; *************** function ___aldiv *****************
 10098 ;; Defined at:
 10099 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\aldiv.c"
 10100 ;; Parameters:    Size  Location     Type
 10101 ;;  divisor         4    0[COMMON] long 
 10102 ;;  dividend        4    4[COMMON] long 
 10103 ;; Auto vars:     Size  Location     Type
 10104 ;;  quotient        4    2[BANK0 ] long 
 10105 ;;  sign            1    1[BANK0 ] unsigned char 
 10106 ;;  counter         1    0[BANK0 ] unsigned char 
 10107 ;; Return value:  Size  Location     Type
 10108 ;;                  4    0[COMMON] long 
 10109 ;; Registers used:
 10110 ;;		wreg, status,2, status,0
 10111 ;; Tracked objects:
 10112 ;;		On entry : 0/0
 10113 ;;		On exit  : 0/0
 10114 ;;		Unchanged: 0/0
 10115 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10116 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10117 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10118 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10119 ;;      Totals:         9       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10120 ;;Total ram usage:       15 bytes
 10121 ;; Hardware stack levels used:    1
 10122 ;; This function calls:
 10123 ;;		Nothing
 10124 ;; This function is called by:
 10125 ;;		_readIAnalog
 10126 ;; This function uses a non-reentrant model
 10127 ;;
 10128                           
 10129                           
 10130                           ;psect for function ___aldiv
 10131  087B                     ___aldiv:	
 10132                           
 10133                           ;incstack = 0
 10134                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
 10135  087B  0020               	movlb	0	; select bank0
 10136  087C  01A1               	clrf	___aldiv@sign
 10137  087D  1FF3               	btfss	___aldiv@divisor+3,7
 10138  087E  288C               	goto	l637
 10139  087F  09F0               	comf	___aldiv@divisor,f
 10140  0880  09F1               	comf	___aldiv@divisor+1,f
 10141  0881  09F2               	comf	___aldiv@divisor+2,f
 10142  0882  09F3               	comf	___aldiv@divisor+3,f
 10143  0883  0AF0               	incf	___aldiv@divisor,f
 10144  0884  1903               	skipnz
 10145  0885  0AF1               	incf	___aldiv@divisor+1,f
 10146  0886  1903               	skipnz
 10147  0887  0AF2               	incf	___aldiv@divisor+2,f
 10148  0888  1903               	skipnz
 10149  0889  0AF3               	incf	___aldiv@divisor+3,f
 10150  088A  01A1               	clrf	___aldiv@sign
 10151  088B  0AA1               	incf	___aldiv@sign,f
 10152  088C                     l637:	
 10153  088C  1FF7               	btfss	___aldiv@dividend+3,7
 10154  088D  289D               	goto	l2652
 10155  088E  09F4               	comf	___aldiv@dividend,f
 10156  088F  09F5               	comf	___aldiv@dividend+1,f
 10157  0890  09F6               	comf	___aldiv@dividend+2,f
 10158  0891  09F7               	comf	___aldiv@dividend+3,f
 10159  0892  0AF4               	incf	___aldiv@dividend,f
 10160  0893  1903               	skipnz
 10161  0894  0AF5               	incf	___aldiv@dividend+1,f
 10162  0895  1903               	skipnz
 10163  0896  0AF6               	incf	___aldiv@dividend+2,f
 10164  0897  1903               	skipnz
 10165  0898  0AF7               	incf	___aldiv@dividend+3,f
 10166  0899  3001               	movlw	1
 10167  089A  00F8               	movwf	??___aldiv
 10168  089B  0878               	movf	??___aldiv,w
 10169  089C  06A1               	xorwf	___aldiv@sign,f
 10170  089D                     l2652:	
 10171  089D  3000               	movlw	0
 10172  089E  00A5               	movwf	___aldiv@quotient+3
 10173  089F  3000               	movlw	0
 10174  08A0  00A4               	movwf	___aldiv@quotient+2
 10175  08A1  3000               	movlw	0
 10176  08A2  00A3               	movwf	___aldiv@quotient+1
 10177  08A3  3000               	movlw	0
 10178  08A4  00A2               	movwf	___aldiv@quotient
 10179  08A5  0873               	movf	___aldiv@divisor+3,w
 10180  08A6  0472               	iorwf	___aldiv@divisor+2,w
 10181  08A7  0471               	iorwf	___aldiv@divisor+1,w
 10182  08A8  0470               	iorwf	___aldiv@divisor,w
 10183  08A9  1903               	skipnz
 10184  08AA  28E6               	goto	l2674
 10185  08AB  01A0               	clrf	___aldiv@counter
 10186  08AC  0AA0               	incf	___aldiv@counter,f
 10187  08AD                     l2660:	
 10188  08AD  1BF3               	btfsc	___aldiv@divisor+3,7
 10189  08AE  28BB               	goto	l2662
 10190  08AF  3001               	movlw	1
 10191  08B0                     u2725:	
 10192  08B0  35F0               	lslf	___aldiv@divisor,f
 10193  08B1  0DF1               	rlf	___aldiv@divisor+1,f
 10194  08B2  0DF2               	rlf	___aldiv@divisor+2,f
 10195  08B3  0DF3               	rlf	___aldiv@divisor+3,f
 10196  08B4  0B89               	decfsz	9,f
 10197  08B5  28B0               	goto	u2725
 10198  08B6  3001               	movlw	1
 10199  08B7  00F8               	movwf	??___aldiv
 10200  08B8  0878               	movf	??___aldiv,w
 10201  08B9  07A0               	addwf	___aldiv@counter,f
 10202  08BA  28AD               	goto	l2660
 10203  08BB                     l2662:	
 10204  08BB  3001               	movlw	1
 10205  08BC                     u2745:	
 10206  08BC  35A2               	lslf	___aldiv@quotient,f
 10207  08BD  0DA3               	rlf	___aldiv@quotient+1,f
 10208  08BE  0DA4               	rlf	___aldiv@quotient+2,f
 10209  08BF  0DA5               	rlf	___aldiv@quotient+3,f
 10210  08C0  0B89               	decfsz	9,f
 10211  08C1  28BC               	goto	u2745
 10212  08C2  0873               	movf	___aldiv@divisor+3,w
 10213  08C3  0277               	subwf	___aldiv@dividend+3,w
 10214  08C4  1D03               	skipz
 10215  08C5  28D0               	goto	u2755
 10216  08C6  0872               	movf	___aldiv@divisor+2,w
 10217  08C7  0276               	subwf	___aldiv@dividend+2,w
 10218  08C8  1D03               	skipz
 10219  08C9  28D0               	goto	u2755
 10220  08CA  0871               	movf	___aldiv@divisor+1,w
 10221  08CB  0275               	subwf	___aldiv@dividend+1,w
 10222  08CC  1D03               	skipz
 10223  08CD  28D0               	goto	u2755
 10224  08CE  0870               	movf	___aldiv@divisor,w
 10225  08CF  0274               	subwf	___aldiv@dividend,w
 10226  08D0                     u2755:	
 10227  08D0  1C03               	skipc
 10228  08D1  28DB               	goto	l2670
 10229  08D2  0870               	movf	___aldiv@divisor,w
 10230  08D3  02F4               	subwf	___aldiv@dividend,f
 10231  08D4  0871               	movf	___aldiv@divisor+1,w
 10232  08D5  3BF5               	subwfb	___aldiv@dividend+1,f
 10233  08D6  0872               	movf	___aldiv@divisor+2,w
 10234  08D7  3BF6               	subwfb	___aldiv@dividend+2,f
 10235  08D8  0873               	movf	___aldiv@divisor+3,w
 10236  08D9  3BF7               	subwfb	___aldiv@dividend+3,f
 10237  08DA  1422               	bsf	___aldiv@quotient,0
 10238  08DB                     l2670:	
 10239  08DB  3001               	movlw	1
 10240  08DC                     u2765:	
 10241  08DC  36F3               	lsrf	___aldiv@divisor+3,f
 10242  08DD  0CF2               	rrf	___aldiv@divisor+2,f
 10243  08DE  0CF1               	rrf	___aldiv@divisor+1,f
 10244  08DF  0CF0               	rrf	___aldiv@divisor,f
 10245  08E0  0B89               	decfsz	9,f
 10246  08E1  28DC               	goto	u2765
 10247  08E2  3001               	movlw	1
 10248  08E3  02A0               	subwf	___aldiv@counter,f
 10249  08E4  1D03               	btfss	3,2
 10250  08E5  28BB               	goto	l2662
 10251  08E6                     l2674:	
 10252  08E6  0821               	movf	___aldiv@sign,w
 10253  08E7  1903               	btfsc	3,2
 10254  08E8  28F4               	goto	l2678
 10255  08E9  09A2               	comf	___aldiv@quotient,f
 10256  08EA  09A3               	comf	___aldiv@quotient+1,f
 10257  08EB  09A4               	comf	___aldiv@quotient+2,f
 10258  08EC  09A5               	comf	___aldiv@quotient+3,f
 10259  08ED  0AA2               	incf	___aldiv@quotient,f
 10260  08EE  1903               	skipnz
 10261  08EF  0AA3               	incf	___aldiv@quotient+1,f
 10262  08F0  1903               	skipnz
 10263  08F1  0AA4               	incf	___aldiv@quotient+2,f
 10264  08F2  1903               	skipnz
 10265  08F3  0AA5               	incf	___aldiv@quotient+3,f
 10266  08F4                     l2678:	
 10267  08F4  0825               	movf	___aldiv@quotient+3,w
 10268  08F5  00F3               	movwf	?___aldiv+3
 10269  08F6  0824               	movf	___aldiv@quotient+2,w
 10270  08F7  00F2               	movwf	?___aldiv+2
 10271  08F8  0823               	movf	___aldiv@quotient+1,w
 10272  08F9  00F1               	movwf	?___aldiv+1
 10273  08FA  0822               	movf	___aldiv@quotient,w
 10274  08FB  00F0               	movwf	?___aldiv
 10275  08FC  0008               	return
 10276  08FD                     __end_of___aldiv:	
 10277                           
 10278                           	psect	text11
 10279  177E                     __ptext11:	
 10280 ;; *************** function _readButton *****************
 10281 ;; Defined at:
 10282 ;;		line 9 in file "buttons.c"
 10283 ;; Parameters:    Size  Location     Type
 10284 ;;		None
 10285 ;; Auto vars:     Size  Location     Type
 10286 ;;		None
 10287 ;; Return value:  Size  Location     Type
 10288 ;;                  1    wreg      unsigned char 
 10289 ;; Registers used:
 10290 ;;		wreg, status,2, status,0, pclath, cstack
 10291 ;; Tracked objects:
 10292 ;;		On entry : 0/0
 10293 ;;		On exit  : 0/0
 10294 ;;		Unchanged: 0/0
 10295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10296 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10297 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10298 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10299 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10300 ;;Total ram usage:        2 bytes
 10301 ;; Hardware stack levels used:    1
 10302 ;; Hardware stack levels required when called:    1
 10303 ;; This function calls:
 10304 ;;		_ADCRead
 10305 ;; This function is called by:
 10306 ;;		_main
 10307 ;; This function uses a non-reentrant model
 10308 ;;
 10309                           
 10310                           
 10311                           ;psect for function _readButton
 10312  177E                     _readButton:	
 10313                           
 10314                           ;buttons.c: 11: readButtons = ADCRead(11);
 10315                           
 10316                           ;incstack = 0
 10317                           ; Regs used in _readButton: [wreg+status,2+status,0+pclath+cstack]
 10318  177E  300B               	movlw	11
 10319  177F  3192  22F6  3197   	fcall	_ADCRead
 10320  1782  0871               	movf	?_ADCRead+1,w
 10321  1783  0020               	movlb	0	; select bank0
 10322  1784  00EB               	movwf	_readButtons+1
 10323  1785  0870               	movf	?_ADCRead,w
 10324  1786  00EA               	movwf	_readButtons
 10325                           
 10326                           ;buttons.c: 13: if(readButtons >= 425 && readButtons < 485)
 10327  1787  086B               	movf	_readButtons+1,w
 10328  1788  3A80               	xorlw	128
 10329  1789  00F4               	movwf	??_readButton
 10330  178A  3081               	movlw	129
 10331  178B  0274               	subwf	??_readButton,w
 10332  178C  1D03               	skipz
 10333  178D  2F90               	goto	u3215
 10334  178E  30A9               	movlw	169
 10335  178F  026A               	subwf	_readButtons,w
 10336  1790                     u3215:	
 10337  1790  1C03               	skipc
 10338  1791  2FA2               	goto	l2868
 10339  1792  0020               	movlb	0	; select bank0
 10340  1793  086B               	movf	_readButtons+1,w
 10341  1794  3A80               	xorlw	128
 10342  1795  00F4               	movwf	??_readButton
 10343  1796  3081               	movlw	129
 10344  1797  0274               	subwf	??_readButton,w
 10345  1798  1D03               	skipz
 10346  1799  2F9C               	goto	u3225
 10347  179A  30E5               	movlw	229
 10348  179B  026A               	subwf	_readButtons,w
 10349  179C                     u3225:	
 10350  179C  1803               	skipnc
 10351  179D  2FA2               	goto	l2868
 10352                           
 10353                           ;buttons.c: 14: {
 10354                           ;buttons.c: 15: button = 1;
 10355  179E  0020               	movlb	0	; select bank0
 10356  179F  01EE               	clrf	_button
 10357  17A0  0AEE               	incf	_button,f
 10358                           
 10359                           ;buttons.c: 16: }
 10360  17A1  2FD0               	goto	l2880
 10361  17A2                     l2868:	
 10362                           
 10363                           ;buttons.c: 18: else if(readButtons >= 615 && readButtons < 690)
 10364  17A2  0020               	movlb	0	; select bank0
 10365  17A3  086B               	movf	_readButtons+1,w
 10366  17A4  3A80               	xorlw	128
 10367  17A5  00F4               	movwf	??_readButton
 10368  17A6  3082               	movlw	130
 10369  17A7  0274               	subwf	??_readButton,w
 10370  17A8  1D03               	skipz
 10371  17A9  2FAC               	goto	u3235
 10372  17AA  3067               	movlw	103
 10373  17AB  026A               	subwf	_readButtons,w
 10374  17AC                     u3235:	
 10375  17AC  1C03               	skipc
 10376  17AD  2FBC               	goto	l2874
 10377  17AE  0020               	movlb	0	; select bank0
 10378  17AF  086B               	movf	_readButtons+1,w
 10379  17B0  3A80               	xorlw	128
 10380  17B1  00F4               	movwf	??_readButton
 10381  17B2  3082               	movlw	130
 10382  17B3  0274               	subwf	??_readButton,w
 10383  17B4  1D03               	skipz
 10384  17B5  2FB8               	goto	u3245
 10385  17B6  30B2               	movlw	178
 10386  17B7  026A               	subwf	_readButtons,w
 10387  17B8                     u3245:	
 10388  17B8  1803               	skipnc
 10389  17B9  2FBC               	goto	l2874
 10390                           
 10391                           ;buttons.c: 19: {
 10392                           ;buttons.c: 20: button = 2;
 10393  17BA  3002               	movlw	2
 10394  17BB  2FC9               	goto	L6
 10395  17BC                     l2874:	
 10396                           ;buttons.c: 21: }
 10397                           
 10398                           
 10399                           ;buttons.c: 23: else if(readButtons > 800)
 10400  17BC  0020               	movlb	0	; select bank0
 10401  17BD  086B               	movf	_readButtons+1,w
 10402  17BE  3A80               	xorlw	128
 10403  17BF  00F4               	movwf	??_readButton
 10404  17C0  3083               	movlw	131
 10405  17C1  0274               	subwf	??_readButton,w
 10406  17C2  1D03               	skipz
 10407  17C3  2FC6               	goto	u3255
 10408  17C4  3021               	movlw	33
 10409  17C5  026A               	subwf	_readButtons,w
 10410  17C6                     u3255:	
 10411  17C6  1C03               	skipc
 10412  17C7  2FCE               	goto	l2878
 10413                           
 10414                           ;buttons.c: 24: {
 10415                           ;buttons.c: 25: button = 3;
 10416  17C8  3003               	movlw	3
 10417  17C9                     L6:	
 10418  17C9  00F4               	movwf	??_readButton
 10419  17CA  0874               	movf	??_readButton,w
 10420  17CB  0020               	movlb	0	; select bank0
 10421  17CC  00EE               	movwf	_button
 10422                           
 10423                           ;buttons.c: 26: }
 10424  17CD  2FD0               	goto	l2880
 10425  17CE                     l2878:	
 10426                           
 10427                           ;buttons.c: 28: else
 10428                           ;buttons.c: 29: {
 10429                           ;buttons.c: 30: button = 0;
 10430  17CE  0020               	movlb	0	; select bank0
 10431  17CF  01EE               	clrf	_button
 10432  17D0                     l2880:	
 10433                           
 10434                           ;buttons.c: 31: }
 10435                           ;buttons.c: 33: if (button != 0)
 10436  17D0  086E               	movf	_button,w
 10437  17D1  1903               	btfsc	3,2
 10438  17D2  2FFD               	goto	l2900
 10439                           
 10440                           ;buttons.c: 34: {
 10441                           ;buttons.c: 35: if (button != lastButton)
 10442  17D3  086E               	movf	_button,w
 10443  17D4  066D               	xorwf	_lastButton,w
 10444  17D5  1903               	skipnz
 10445  17D6  2FDC               	goto	l2888
 10446                           
 10447                           ;buttons.c: 36: {
 10448                           ;buttons.c: 37: lastButton = button;
 10449  17D7  086E               	movf	_button,w
 10450  17D8  00F4               	movwf	??_readButton
 10451  17D9  0874               	movf	??_readButton,w
 10452  17DA  00ED               	movwf	_lastButton
 10453  17DB  2FFD               	goto	l2900
 10454  17DC                     l2888:	
 10455                           ;buttons.c: 39: }
 10456                           
 10457                           ;buttons.c: 38: j = 0;
 10458                           
 10459                           
 10460                           ;buttons.c: 40: else
 10461                           ;buttons.c: 41: {
 10462                           ;buttons.c: 42: j += 1;
 10463  17DC  3001               	movlw	1
 10464  17DD  00F4               	movwf	??_readButton
 10465  17DE  0874               	movf	??_readButton,w
 10466  17DF  07EC               	addwf	_j,f
 10467                           
 10468                           ;buttons.c: 44: if(j == 1)
 10469  17E0  036C               	decf	_j,w
 10470  17E1  1D03               	btfss	3,2
 10471  17E2  2FE5               	goto	l2894
 10472                           
 10473                           ;buttons.c: 45: {
 10474                           ;buttons.c: 46: return (lastButton);
 10475  17E3  086D               	movf	_lastButton,w
 10476  17E4  0008               	return
 10477  17E5                     l2894:	
 10478                           
 10479                           ;buttons.c: 47: }
 10480                           ;buttons.c: 49: if (j >10)
 10481  17E5  086C               	movf	_j,w
 10482  17E6  3A80               	xorlw	128
 10483  17E7  3E75               	addlw	-139
 10484  17E8  1C03               	skipc
 10485  17E9  2FFE               	goto	l2902
 10486                           
 10487                           ;buttons.c: 50: {
 10488                           ;buttons.c: 51: _delay((unsigned long)((25)*(32000000/4000.0)));
 10489  17EA  3002               	movlw	2
 10490  17EB  00F5               	movwf	??_readButton+1
 10491  17EC  3004               	movlw	4
 10492  17ED  00F4               	movwf	??_readButton
 10493  17EE  30BA               	movlw	186
 10494  17EF                     u3987:	
 10495  17EF  0B89               	decfsz	9,f
 10496  17F0  2FEF               	goto	u3987
 10497  17F1  0BF4               	decfsz	??_readButton,f
 10498  17F2  2FEF               	goto	u3987
 10499  17F3  0BF5               	decfsz	??_readButton+1,f
 10500  17F4  2FEF               	goto	u3987
 10501  17F5  3200               	nop2
 10502                           
 10503                           ;buttons.c: 52: j = 10;
 10504  17F6  300A               	movlw	10
 10505  17F7  00F4               	movwf	??_readButton
 10506  17F8  0874               	movf	??_readButton,w
 10507  17F9  0020               	movlb	0	; select bank0
 10508  17FA  00EC               	movwf	_j
 10509                           
 10510                           ;buttons.c: 53: return (lastButton);
 10511  17FB  086D               	movf	_lastButton,w
 10512  17FC  0008               	return
 10513  17FD                     l2900:	
 10514                           ;buttons.c: 54: }
 10515                           ;buttons.c: 55: }
 10516                           ;buttons.c: 56: goto end;
 10517                           
 10518                           
 10519                           ;buttons.c: 57: }
 10520                           ;buttons.c: 59: j = 0;
 10521  17FD  01EC               	clrf	_j
 10522  17FE                     l2902:	
 10523                           ;buttons.c: 61: end:
 10524                           
 10525                           
 10526                           ;buttons.c: 63: return (0);
 10527  17FE  3000               	movlw	0
 10528  17FF  0008               	return
 10529  1800                     __end_of_readButton:	
 10530                           
 10531                           	psect	text12
 10532  12F6                     __ptext12:	
 10533 ;; *************** function _ADCRead *****************
 10534 ;; Defined at:
 10535 ;;		line 21 in file "adc.c"
 10536 ;; Parameters:    Size  Location     Type
 10537 ;;  channel         1    wreg     enum E14259
 10538 ;; Auto vars:     Size  Location     Type
 10539 ;;  channel         1    3[COMMON] enum E14259
 10540 ;; Return value:  Size  Location     Type
 10541 ;;                  2    0[COMMON] int 
 10542 ;; Registers used:
 10543 ;;		wreg
 10544 ;; Tracked objects:
 10545 ;;		On entry : 0/0
 10546 ;;		On exit  : 0/0
 10547 ;;		Unchanged: 0/0
 10548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10549 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10550 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10551 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10552 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10553 ;;Total ram usage:        4 bytes
 10554 ;; Hardware stack levels used:    1
 10555 ;; This function calls:
 10556 ;;		Nothing
 10557 ;; This function is called by:
 10558 ;;		_readIAnalog
 10559 ;;		_readButton
 10560 ;;		_main
 10561 ;; This function uses a non-reentrant model
 10562 ;;
 10563                           
 10564                           
 10565                           ;psect for function _ADCRead
 10566  12F6                     _ADCRead:	
 10567                           
 10568                           ;incstack = 0
 10569                           ; Regs used in _ADCRead: [wreg]
 10570                           ;ADCRead@channel stored from wreg
 10571  12F6  00F3               	movwf	ADCRead@channel
 10572                           
 10573                           ;adc.c: 23: ADPCH = channel_VSS;
 10574  12F7  303C               	movlw	60
 10575  12F8  0021               	movlb	1	; select bank1
 10576  12F9  009E               	movwf	30	;volatile
 10577                           
 10578                           ;adc.c: 25: ADCON0bits.ADON = 1;
 10579  12FA  1793               	bsf	19,7	;volatile
 10580                           
 10581                           ;adc.c: 27: ADCON0bits.ADCONT = 0;
 10582  12FB  1313               	bcf	19,6	;volatile
 10583                           
 10584                           ;adc.c: 29: ADCON0bits.ADGO = 1;
 10585  12FC  1413               	bsf	19,0	;volatile
 10586  12FD                     l57:	
 10587                           ;adc.c: 32: {
 10588                           
 10589                           ;adc.c: 31: while(ADCON0bits.ADGO)
 10590                           
 10591  12FD  1813               	btfsc	19,0	;volatile
 10592  12FE  2AFD               	goto	l57
 10593                           
 10594                           ;adc.c: 33: }
 10595                           ;adc.c: 35: ADPCH = channel;
 10596  12FF  0873               	movf	ADCRead@channel,w
 10597  1300  009E               	movwf	30	;volatile
 10598                           
 10599                           ;adc.c: 37: ADCON0bits.ADON = 1;
 10600  1301  1793               	bsf	19,7	;volatile
 10601                           
 10602                           ;adc.c: 39: ADCON0bits.ADCONT = 0;
 10603  1302  1313               	bcf	19,6	;volatile
 10604                           
 10605                           ;adc.c: 41: ADCON0bits.ADGO = 1;
 10606  1303  1413               	bsf	19,0	;volatile
 10607  1304                     l60:	
 10608                           ;adc.c: 44: {
 10609                           
 10610                           ;adc.c: 43: while(ADCON0bits.ADGO)
 10611                           
 10612  1304  1813               	btfsc	19,0	;volatile
 10613  1305  2B04               	goto	l60
 10614                           
 10615                           ;adc.c: 45: }
 10616                           ;adc.c: 47: return ((ADRESH<<8)+ADRESL);
 10617  1306  080D               	movf	13,w	;volatile
 10618  1307  00F1               	movwf	?_ADCRead+1
 10619  1308  080C               	movf	12,w	;volatile
 10620  1309  00F0               	movwf	?_ADCRead
 10621  130A  0008               	return
 10622  130B                     __end_of_ADCRead:	
 10623                           
 10624                           	psect	text13
 10625  0BC3                     __ptext13:	
 10626 ;; *************** function _cc_cv_mode *****************
 10627 ;; Defined at:
 10628 ;;		line 97 in file "battery_charger.c"
 10629 ;; Parameters:    Size  Location     Type
 10630 ;;  z               1    wreg     unsigned char 
 10631 ;; Auto vars:     Size  Location     Type
 10632 ;;  z               1    5[COMMON] unsigned char 
 10633 ;; Return value:  Size  Location     Type
 10634 ;;                  1    wreg      void 
 10635 ;; Registers used:
 10636 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10637 ;; Tracked objects:
 10638 ;;		On entry : 0/0
 10639 ;;		On exit  : 0/0
 10640 ;;		Unchanged: 0/0
 10641 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10642 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10643 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10644 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10645 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10646 ;;Total ram usage:        6 bytes
 10647 ;; Hardware stack levels used:    1
 10648 ;; This function calls:
 10649 ;;		Nothing
 10650 ;; This function is called by:
 10651 ;;		_main
 10652 ;; This function uses a non-reentrant model
 10653 ;;
 10654                           
 10655                           
 10656                           ;psect for function _cc_cv_mode
 10657  0BC3                     _cc_cv_mode:	
 10658                           
 10659                           ;incstack = 0
 10660                           ; Regs used in _cc_cv_mode: [wreg+fsr1l+fsr1h+status,2+status,0]
 10661                           ;cc_cv_mode@z stored from wreg
 10662  0BC3  00F5               	movwf	cc_cv_mode@z
 10663                           
 10664                           ;battery_charger.c: 99: if(voltage[z]>Vref[z])
 10665  0BC4  3575               	lslf	cc_cv_mode@z,w
 10666  0BC5  3EB0               	addlw	(low (_voltage| 0))& (0+255)
 10667  0BC6  0086               	movwf	6
 10668  0BC7  0187               	clrf	7
 10669  0BC8  3F40               	moviw [0]fsr1
 10670  0BC9  00F0               	movwf	??_cc_cv_mode
 10671  0BCA  3F41               	moviw [1]fsr1
 10672  0BCB  00F1               	movwf	??_cc_cv_mode+1
 10673  0BCC  3575               	lslf	cc_cv_mode@z,w
 10674  0BCD  3EB8               	addlw	(low (_Vref| 0))& (0+255)
 10675  0BCE  0086               	movwf	6
 10676  0BCF  0187               	clrf	7
 10677  0BD0  3F40               	moviw [0]fsr1
 10678  0BD1  00F2               	movwf	??_cc_cv_mode+2
 10679  0BD2  3F41               	moviw [1]fsr1
 10680  0BD3  00F3               	movwf	??_cc_cv_mode+3
 10681  0BD4  0873               	movf	??_cc_cv_mode+3,w
 10682  0BD5  3A80               	xorlw	128
 10683  0BD6  00F4               	movwf	??_cc_cv_mode+4
 10684  0BD7  0871               	movf	??_cc_cv_mode+1,w
 10685  0BD8  3A80               	xorlw	128
 10686  0BD9  0274               	subwf	??_cc_cv_mode+4,w
 10687  0BDA  1D03               	skipz
 10688  0BDB  2BDE               	goto	u3545
 10689  0BDC  0870               	movf	??_cc_cv_mode,w
 10690  0BDD  0272               	subwf	??_cc_cv_mode+2,w
 10691  0BDE                     u3545:	
 10692  0BDE  1803               	skipnc
 10693  0BDF  2C0C               	goto	l3056
 10694                           
 10695                           ;battery_charger.c: 100: {
 10696                           ;battery_charger.c: 101: if(VHoldMode[z]<12)VHoldMode[z]+=1;
 10697  0BE0  0875               	movf	cc_cv_mode@z,w
 10698  0BE1  3EC4               	addlw	(low (_VHoldMode| 0))& (0+255)
 10699  0BE2  0086               	movwf	6
 10700  0BE3  0187               	clrf	7
 10701  0BE4  0801               	movf	1,w
 10702  0BE5  3A80               	xorlw	128
 10703  0BE6  3E74               	addlw	-140
 10704  0BE7  1803               	skipnc
 10705  0BE8  2BF1               	goto	l360
 10706  0BE9  3001               	movlw	1
 10707  0BEA  00F0               	movwf	??_cc_cv_mode
 10708  0BEB  0875               	movf	cc_cv_mode@z,w
 10709  0BEC  3EC4               	addlw	(low (_VHoldMode| 0))& (0+255)
 10710  0BED  0086               	movwf	6
 10711  0BEE  0187               	clrf	7
 10712  0BEF  0870               	movf	??_cc_cv_mode,w
 10713  0BF0  0781               	addwf	1,f
 10714  0BF1                     l360:	
 10715                           
 10716                           ;battery_charger.c: 103: if(cc_cv[z])
 10717  0BF1  0875               	movf	cc_cv_mode@z,w
 10718  0BF2  3EC6               	addlw	(low (_cc_cv| 0))& (0+255)
 10719  0BF3  0086               	movwf	6
 10720  0BF4  0187               	clrf	7
 10721  0BF5  0801               	movf	1,w
 10722  0BF6  1903               	btfsc	3,2
 10723  0BF7  2BFF               	goto	l3052
 10724                           
 10725                           ;battery_charger.c: 104: {
 10726                           ;battery_charger.c: 105: cc_cv[z]-=1;
 10727  0BF8  0875               	movf	cc_cv_mode@z,w
 10728  0BF9  3EC6               	addlw	(low (_cc_cv| 0))& (0+255)
 10729  0BFA  0086               	movwf	6
 10730  0BFB  0187               	clrf	7
 10731  0BFC  3001               	movlw	1
 10732  0BFD  0281               	subwf	1,f
 10733                           
 10734                           ;battery_charger.c: 106: }
 10735  0BFE  2C4F               	goto	l3062
 10736  0BFF                     l3052:	
 10737                           
 10738                           ;battery_charger.c: 107: else
 10739                           ;battery_charger.c: 108: {
 10740                           ;battery_charger.c: 109: if(Imode[z])
 10741  0BFF  0875               	movf	cc_cv_mode@z,w
 10742  0C00  3EEE               	addlw	(low (_Imode| 0))& (0+255)
 10743  0C01  0086               	movwf	6
 10744  0C02  0187               	clrf	7
 10745  0C03  0801               	movf	1,w
 10746  0C04  1903               	btfsc	3,2
 10747  0C05  2C4F               	goto	l3062
 10748                           
 10749                           ;battery_charger.c: 110: {
 10750                           ;battery_charger.c: 111: Imode[z]=0;
 10751  0C06  0875               	movf	cc_cv_mode@z,w
 10752  0C07  3EEE               	addlw	(low (_Imode| 0))& (0+255)
 10753  0C08  0086               	movwf	6
 10754  0C09  0187               	clrf	7
 10755  0C0A  0181               	clrf	1
 10756                           
 10757                           ;battery_charger.c: 112: }
 10758                           ;battery_charger.c: 113: }
 10759                           ;battery_charger.c: 114: }
 10760  0C0B  2C4F               	goto	l3062
 10761  0C0C                     l3056:	
 10762                           
 10763                           ;battery_charger.c: 115: else if(voltage[z]<Vref[z])
 10764  0C0C  3575               	lslf	cc_cv_mode@z,w
 10765  0C0D  3EB8               	addlw	(low (_Vref| 0))& (0+255)
 10766  0C0E  0086               	movwf	6
 10767  0C0F  0187               	clrf	7
 10768  0C10  3F40               	moviw [0]fsr1
 10769  0C11  00F0               	movwf	??_cc_cv_mode
 10770  0C12  3F41               	moviw [1]fsr1
 10771  0C13  00F1               	movwf	??_cc_cv_mode+1
 10772  0C14  3575               	lslf	cc_cv_mode@z,w
 10773  0C15  3EB0               	addlw	(low (_voltage| 0))& (0+255)
 10774  0C16  0086               	movwf	6
 10775  0C17  0187               	clrf	7
 10776  0C18  3F40               	moviw [0]fsr1
 10777  0C19  00F2               	movwf	??_cc_cv_mode+2
 10778  0C1A  3F41               	moviw [1]fsr1
 10779  0C1B  00F3               	movwf	??_cc_cv_mode+3
 10780  0C1C  0873               	movf	??_cc_cv_mode+3,w
 10781  0C1D  3A80               	xorlw	128
 10782  0C1E  00F4               	movwf	??_cc_cv_mode+4
 10783  0C1F  0871               	movf	??_cc_cv_mode+1,w
 10784  0C20  3A80               	xorlw	128
 10785  0C21  0274               	subwf	??_cc_cv_mode+4,w
 10786  0C22  1D03               	skipz
 10787  0C23  2C26               	goto	u3585
 10788  0C24  0870               	movf	??_cc_cv_mode,w
 10789  0C25  0272               	subwf	??_cc_cv_mode+2,w
 10790  0C26                     u3585:	
 10791  0C26  1803               	skipnc
 10792  0C27  2C4F               	goto	l3062
 10793                           
 10794                           ;battery_charger.c: 116: {
 10795                           ;battery_charger.c: 117: VHoldMode[z]-=1;
 10796  0C28  30FF               	movlw	255
 10797  0C29  00F0               	movwf	??_cc_cv_mode
 10798  0C2A  0875               	movf	cc_cv_mode@z,w
 10799  0C2B  3EC4               	addlw	(low (_VHoldMode| 0))& (0+255)
 10800  0C2C  0086               	movwf	6
 10801  0C2D  0187               	clrf	7
 10802  0C2E  0870               	movf	??_cc_cv_mode,w
 10803  0C2F  0781               	addwf	1,f
 10804                           
 10805                           ;battery_charger.c: 118: if(VHoldMode[z]<(10*-1))
 10806  0C30  0875               	movf	cc_cv_mode@z,w
 10807  0C31  3EC4               	addlw	(low (_VHoldMode| 0))& (0+255)
 10808  0C32  0086               	movwf	6
 10809  0C33  0187               	clrf	7
 10810  0C34  0801               	movf	1,w
 10811  0C35  3A80               	xorlw	128
 10812  0C36  3E8A               	addlw	138
 10813  0C37  1803               	skipnc
 10814  0C38  2C4F               	goto	l3062
 10815                           
 10816                           ;battery_charger.c: 119: {
 10817                           ;battery_charger.c: 120: Imode[z]=1;
 10818  0C39  0875               	movf	cc_cv_mode@z,w
 10819  0C3A  3EEE               	addlw	(low (_Imode| 0))& (0+255)
 10820  0C3B  0086               	movwf	6
 10821  0C3C  0187               	clrf	7
 10822  0C3D  0181               	clrf	1
 10823  0C3E  0A81               	incf	1,f
 10824                           
 10825                           ;battery_charger.c: 121: cc_cv[z]=(10*2);
 10826  0C3F  3014               	movlw	20
 10827  0C40  00F0               	movwf	??_cc_cv_mode
 10828  0C41  0875               	movf	cc_cv_mode@z,w
 10829  0C42  3EC6               	addlw	(low (_cc_cv| 0))& (0+255)
 10830  0C43  0086               	movwf	6
 10831  0C44  0187               	clrf	7
 10832  0C45  0870               	movf	??_cc_cv_mode,w
 10833  0C46  0081               	movwf	1
 10834                           
 10835                           ;battery_charger.c: 122: VHoldMode[z]=(10*-1);
 10836  0C47  30F6               	movlw	246
 10837  0C48  00F0               	movwf	??_cc_cv_mode
 10838  0C49  0875               	movf	cc_cv_mode@z,w
 10839  0C4A  3EC4               	addlw	(low (_VHoldMode| 0))& (0+255)
 10840  0C4B  0086               	movwf	6
 10841  0C4C  0187               	clrf	7
 10842  0C4D  0870               	movf	??_cc_cv_mode,w
 10843  0C4E  0081               	movwf	1
 10844  0C4F                     l3062:	
 10845                           ;battery_charger.c: 123: }
 10846                           ;battery_charger.c: 124: }
 10847                           
 10848                           
 10849                           ;battery_charger.c: 127: if(current[z]>Iref[z])
 10850  0C4F  3575               	lslf	cc_cv_mode@z,w
 10851  0C50  3EA8               	addlw	(low (_current| 0))& (0+255)
 10852  0C51  0086               	movwf	6
 10853  0C52  0187               	clrf	7
 10854  0C53  3F40               	moviw [0]fsr1
 10855  0C54  00F0               	movwf	??_cc_cv_mode
 10856  0C55  3F41               	moviw [1]fsr1
 10857  0C56  00F1               	movwf	??_cc_cv_mode+1
 10858  0C57  3575               	lslf	cc_cv_mode@z,w
 10859  0C58  3EBC               	addlw	(low (_Iref| 0))& (0+255)
 10860  0C59  0086               	movwf	6
 10861  0C5A  0187               	clrf	7
 10862  0C5B  3F40               	moviw [0]fsr1
 10863  0C5C  00F2               	movwf	??_cc_cv_mode+2
 10864  0C5D  3F41               	moviw [1]fsr1
 10865  0C5E  00F3               	movwf	??_cc_cv_mode+3
 10866  0C5F  0873               	movf	??_cc_cv_mode+3,w
 10867  0C60  3A80               	xorlw	128
 10868  0C61  00F4               	movwf	??_cc_cv_mode+4
 10869  0C62  0871               	movf	??_cc_cv_mode+1,w
 10870  0C63  3A80               	xorlw	128
 10871  0C64  0274               	subwf	??_cc_cv_mode+4,w
 10872  0C65  1D03               	skipz
 10873  0C66  2C69               	goto	u3605
 10874  0C67  0870               	movf	??_cc_cv_mode,w
 10875  0C68  0272               	subwf	??_cc_cv_mode+2,w
 10876  0C69                     u3605:	
 10877  0C69  1803               	skipnc
 10878  0C6A  0008               	return
 10879                           
 10880                           ;battery_charger.c: 128: {
 10881                           ;battery_charger.c: 129: if(!Imode[z])
 10882  0C6B  0875               	movf	cc_cv_mode@z,w
 10883  0C6C  3EEE               	addlw	(low (_Imode| 0))& (0+255)
 10884  0C6D  0086               	movwf	6
 10885  0C6E  0187               	clrf	7
 10886  0C6F  0801               	movf	1,w
 10887  0C70  1D03               	btfss	3,2
 10888  0C71  0008               	return
 10889                           
 10890                           ;battery_charger.c: 130: {
 10891                           ;battery_charger.c: 131: if(batteryState[z]==FLOAT)
 10892  0C72  0875               	movf	cc_cv_mode@z,w
 10893  0C73  3EC8               	addlw	(low (_batteryState| 0))& (0+255)
 10894  0C74  0086               	movwf	6
 10895  0C75  0187               	clrf	7
 10896  0C76  3005               	movlw	5
 10897  0C77  0601               	xorwf	1,w
 10898  0C78  1D03               	btfss	3,2
 10899  0C79  0008               	return
 10900                           
 10901                           ;battery_charger.c: 132: {
 10902                           ;battery_charger.c: 133: batteryState[z]=CHARGE;
 10903  0C7A  3004               	movlw	4
 10904  0C7B  00F0               	movwf	??_cc_cv_mode
 10905  0C7C  0875               	movf	cc_cv_mode@z,w
 10906  0C7D  3EC8               	addlw	(low (_batteryState| 0))& (0+255)
 10907  0C7E  0086               	movwf	6
 10908  0C7F  0187               	clrf	7
 10909  0C80  0870               	movf	??_cc_cv_mode,w
 10910  0C81  0081               	movwf	1
 10911                           
 10912                           ;battery_charger.c: 134: Vref[z]=1425;
 10913  0C82  3575               	lslf	cc_cv_mode@z,w
 10914  0C83  3EB8               	addlw	(low (_Vref| 0))& (0+255)
 10915  0C84  0086               	movwf	6
 10916  0C85  0187               	clrf	7
 10917  0C86  3091               	movlw	145
 10918  0C87  3FC0               	movwi [0]fsr1
 10919  0C88  3005               	movlw	5
 10920  0C89  3FC1               	movwi [1]fsr1
 10921                           
 10922                           ;battery_charger.c: 135: Iref[z]=35;
 10923  0C8A  3575               	lslf	cc_cv_mode@z,w
 10924  0C8B  3EBC               	addlw	(low (_Iref| 0))& (0+255)
 10925  0C8C  0086               	movwf	6
 10926  0C8D  0187               	clrf	7
 10927  0C8E  3023               	movlw	35
 10928  0C8F  3FC0               	movwi [0]fsr1
 10929  0C90  3000               	movlw	0
 10930  0C91  3FC1               	movwi [1]fsr1
 10931                           
 10932                           ;battery_charger.c: 136: Imode[z]=1;
 10933  0C92  0875               	movf	cc_cv_mode@z,w
 10934  0C93  3EEE               	addlw	(low (_Imode| 0))& (0+255)
 10935  0C94  0086               	movwf	6
 10936  0C95  0187               	clrf	7
 10937  0C96  0181               	clrf	1
 10938  0C97  0A81               	incf	1,f
 10939                           
 10940                           ;battery_charger.c: 137: cc_cv[z]=10;
 10941  0C98  300A               	movlw	10
 10942  0C99  00F0               	movwf	??_cc_cv_mode
 10943  0C9A  0875               	movf	cc_cv_mode@z,w
 10944  0C9B  3EC6               	addlw	(low (_cc_cv| 0))& (0+255)
 10945  0C9C  0086               	movwf	6
 10946  0C9D  0187               	clrf	7
 10947  0C9E  0870               	movf	??_cc_cv_mode,w
 10948  0C9F  0081               	movwf	1
 10949  0CA0  0008               	return
 10950  0CA1                     __end_of_cc_cv_mode:	
 10951                           
 10952                           	psect	text14
 10953  1634                     __ptext14:	
 10954 ;; *************** function _calculateCurrent3 *****************
 10955 ;; Defined at:
 10956 ;;		line 407 in file "main.c"
 10957 ;; Parameters:    Size  Location     Type
 10958 ;;		None
 10959 ;; Auto vars:     Size  Location     Type
 10960 ;;		None
 10961 ;; Return value:  Size  Location     Type
 10962 ;;                  1    wreg      void 
 10963 ;; Registers used:
 10964 ;;		wreg, status,2, status,0, pclath, cstack
 10965 ;; Tracked objects:
 10966 ;;		On entry : 0/0
 10967 ;;		On exit  : 0/0
 10968 ;;		Unchanged: 0/0
 10969 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10970 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10971 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10972 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10973 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10974 ;;Total ram usage:        3 bytes
 10975 ;; Hardware stack levels used:    1
 10976 ;; Hardware stack levels required when called:    2
 10977 ;; This function calls:
 10978 ;;		___awtoft
 10979 ;;		___ftdiv
 10980 ;;		___fttol
 10981 ;; This function is called by:
 10982 ;;		_main
 10983 ;; This function uses a non-reentrant model
 10984 ;;
 10985                           
 10986                           
 10987                           ;psect for function _calculateCurrent3
 10988  1634                     _calculateCurrent3:	
 10989                           
 10990                           ;main.c: 409: if(Ianalogs[3]-559<=0)
 10991                           
 10992                           ;incstack = 0
 10993                           ; Regs used in _calculateCurrent3: [wreg+status,2+status,0+pclath+cstack]
 10994  1634  0021               	movlb	1	; select bank1
 10995  1635  0826               	movf	(_Ianalogs^(0+128)+6),w
 10996  1636  3ED1               	addlw	209
 10997  1637  0020               	movlb	0	; select bank0
 10998  1638  00BE               	movwf	??_calculateCurrent3
 10999  1639  30FD               	movlw	253
 11000  163A  0021               	movlb	1	; select bank1
 11001  163B  3D27               	addwfc	((_Ianalogs+1)^(0+128)+6),w
 11002  163C  0020               	movlb	0	; select bank0
 11003  163D  00BF               	movwf	??_calculateCurrent3+1
 11004  163E  083F               	movf	??_calculateCurrent3+1,w
 11005  163F  3A80               	xorlw	128
 11006  1640  00C0               	movwf	??_calculateCurrent3+2
 11007  1641  3080               	movlw	128
 11008  1642  0240               	subwf	??_calculateCurrent3+2,w
 11009  1643  1D03               	skipz
 11010  1644  2E47               	goto	u3665
 11011  1645  3001               	movlw	1
 11012  1646  023E               	subwf	??_calculateCurrent3,w
 11013  1647                     u3665:	
 11014  1647  1803               	skipnc
 11015  1648  2E4D               	goto	l3092
 11016                           
 11017                           ;main.c: 410: {
 11018                           ;main.c: 411: current[3]=0;
 11019  1649  0021               	movlb	1	; select bank1
 11020  164A  01AE               	clrf	(_current^(0+128)+6)
 11021  164B  01AF               	clrf	((_current+1)^(0+128)+6)
 11022                           
 11023                           ;main.c: 412: }
 11024  164C  0008               	return
 11025  164D                     l3092:	
 11026                           
 11027                           ;main.c: 413: else
 11028                           ;main.c: 414: {
 11029                           ;main.c: 415: current[3]=(int16_t)((Ianalogs[3]-559)/1.60575);
 11030  164D  0021               	movlb	1	; select bank1
 11031  164E  0826               	movf	(_Ianalogs^(0+128)+6),w
 11032  164F  3ED1               	addlw	209
 11033  1650  00F8               	movwf	___awtoft@c
 11034  1651  30FD               	movlw	253
 11035  1652  3D27               	addwfc	((_Ianalogs+1)^(0+128)+6),w
 11036  1653  00F9               	movwf	___awtoft@c+1
 11037  1654  3193  2379  3196   	fcall	___awtoft
 11038  1657  0878               	movf	?___awtoft,w
 11039  1658  0020               	movlb	0	; select bank0
 11040  1659  00A3               	movwf	___ftdiv@f1
 11041  165A  0879               	movf	?___awtoft+1,w
 11042  165B  00A4               	movwf	___ftdiv@f1+1
 11043  165C  087A               	movf	?___awtoft+2,w
 11044  165D  00A5               	movwf	___ftdiv@f1+2
 11045  165E  3089               	movlw	137
 11046  165F  00A0               	movwf	___ftdiv@f2
 11047  1660  30CD               	movlw	205
 11048  1661  00A1               	movwf	___ftdiv@f2+1
 11049  1662  303F               	movlw	63
 11050  1663  00A2               	movwf	___ftdiv@f2+2
 11051  1664  3188  20FD  3196   	fcall	___ftdiv
 11052  1667  0020               	movlb	0	; select bank0
 11053  1668  0820               	movf	?___ftdiv,w
 11054  1669  00B0               	movwf	___fttol@f1
 11055  166A  0821               	movf	?___ftdiv+1,w
 11056  166B  00B1               	movwf	___fttol@f1+1
 11057  166C  0822               	movf	?___ftdiv+2,w
 11058  166D  00B2               	movwf	___fttol@f1+2
 11059  166E  3180  2016         	fcall	___fttol
 11060  1670  0020               	movlb	0	; select bank0
 11061  1671  0831               	movf	?___fttol+1,w
 11062  1672  0021               	movlb	1	; select bank1
 11063  1673  00AF               	movwf	((_current+1)^(0+128)+6)
 11064  1674  0020               	movlb	0	; select bank0
 11065  1675  0830               	movf	?___fttol,w
 11066  1676  0021               	movlb	1	; select bank1
 11067  1677  00AE               	movwf	(_current^(0+128)+6)
 11068  1678  0008               	return
 11069  1679                     __end_of_calculateCurrent3:	
 11070                           
 11071                           	psect	text15
 11072  15EF                     __ptext15:	
 11073 ;; *************** function _calculateCurrent2 *****************
 11074 ;; Defined at:
 11075 ;;		line 394 in file "main.c"
 11076 ;; Parameters:    Size  Location     Type
 11077 ;;		None
 11078 ;; Auto vars:     Size  Location     Type
 11079 ;;		None
 11080 ;; Return value:  Size  Location     Type
 11081 ;;                  1    wreg      void 
 11082 ;; Registers used:
 11083 ;;		wreg, status,2, status,0, pclath, cstack
 11084 ;; Tracked objects:
 11085 ;;		On entry : 0/0
 11086 ;;		On exit  : 0/0
 11087 ;;		Unchanged: 0/0
 11088 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11089 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11090 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11091 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11092 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11093 ;;Total ram usage:        3 bytes
 11094 ;; Hardware stack levels used:    1
 11095 ;; Hardware stack levels required when called:    2
 11096 ;; This function calls:
 11097 ;;		___awtoft
 11098 ;;		___ftdiv
 11099 ;;		___fttol
 11100 ;; This function is called by:
 11101 ;;		_main
 11102 ;; This function uses a non-reentrant model
 11103 ;;
 11104                           
 11105                           
 11106                           ;psect for function _calculateCurrent2
 11107  15EF                     _calculateCurrent2:	
 11108                           
 11109                           ;main.c: 396: if(Ianalogs[2]-565<=0)
 11110                           
 11111                           ;incstack = 0
 11112                           ; Regs used in _calculateCurrent2: [wreg+status,2+status,0+pclath+cstack]
 11113  15EF  0021               	movlb	1	; select bank1
 11114  15F0  0824               	movf	(_Ianalogs^(0+128)+4),w
 11115  15F1  3ECB               	addlw	203
 11116  15F2  0020               	movlb	0	; select bank0
 11117  15F3  00BE               	movwf	??_calculateCurrent2
 11118  15F4  30FD               	movlw	253
 11119  15F5  0021               	movlb	1	; select bank1
 11120  15F6  3D25               	addwfc	((_Ianalogs+1)^(0+128)+4),w
 11121  15F7  0020               	movlb	0	; select bank0
 11122  15F8  00BF               	movwf	??_calculateCurrent2+1
 11123  15F9  083F               	movf	??_calculateCurrent2+1,w
 11124  15FA  3A80               	xorlw	128
 11125  15FB  00C0               	movwf	??_calculateCurrent2+2
 11126  15FC  3080               	movlw	128
 11127  15FD  0240               	subwf	??_calculateCurrent2+2,w
 11128  15FE  1D03               	skipz
 11129  15FF  2E02               	goto	u3655
 11130  1600  3001               	movlw	1
 11131  1601  023E               	subwf	??_calculateCurrent2,w
 11132  1602                     u3655:	
 11133  1602  1803               	skipnc
 11134  1603  2E08               	goto	l3086
 11135                           
 11136                           ;main.c: 397: {
 11137                           ;main.c: 398: current[2]=0;
 11138  1604  0021               	movlb	1	; select bank1
 11139  1605  01AC               	clrf	(_current^(0+128)+4)
 11140  1606  01AD               	clrf	((_current+1)^(0+128)+4)
 11141                           
 11142                           ;main.c: 399: }
 11143  1607  0008               	return
 11144  1608                     l3086:	
 11145                           
 11146                           ;main.c: 400: else
 11147                           ;main.c: 401: {
 11148                           ;main.c: 403: current[2]=(int16_t)((Ianalogs[2]-565)/3.05);
 11149  1608  0021               	movlb	1	; select bank1
 11150  1609  0824               	movf	(_Ianalogs^(0+128)+4),w
 11151  160A  3ECB               	addlw	203
 11152  160B  00F8               	movwf	___awtoft@c
 11153  160C  30FD               	movlw	253
 11154  160D  3D25               	addwfc	((_Ianalogs+1)^(0+128)+4),w
 11155  160E  00F9               	movwf	___awtoft@c+1
 11156  160F  3193  2379  3195   	fcall	___awtoft
 11157  1612  0878               	movf	?___awtoft,w
 11158  1613  0020               	movlb	0	; select bank0
 11159  1614  00A3               	movwf	___ftdiv@f1
 11160  1615  0879               	movf	?___awtoft+1,w
 11161  1616  00A4               	movwf	___ftdiv@f1+1
 11162  1617  087A               	movf	?___awtoft+2,w
 11163  1618  00A5               	movwf	___ftdiv@f1+2
 11164  1619  3033               	movlw	51
 11165  161A  00A0               	movwf	___ftdiv@f2
 11166  161B  3043               	movlw	67
 11167  161C  00A1               	movwf	___ftdiv@f2+1
 11168  161D  3040               	movlw	64
 11169  161E  00A2               	movwf	___ftdiv@f2+2
 11170  161F  3188  20FD  3195   	fcall	___ftdiv
 11171  1622  0020               	movlb	0	; select bank0
 11172  1623  0820               	movf	?___ftdiv,w
 11173  1624  00B0               	movwf	___fttol@f1
 11174  1625  0821               	movf	?___ftdiv+1,w
 11175  1626  00B1               	movwf	___fttol@f1+1
 11176  1627  0822               	movf	?___ftdiv+2,w
 11177  1628  00B2               	movwf	___fttol@f1+2
 11178  1629  3180  2016         	fcall	___fttol
 11179  162B  0020               	movlb	0	; select bank0
 11180  162C  0831               	movf	?___fttol+1,w
 11181  162D  0021               	movlb	1	; select bank1
 11182  162E  00AD               	movwf	((_current+1)^(0+128)+4)
 11183  162F  0020               	movlb	0	; select bank0
 11184  1630  0830               	movf	?___fttol,w
 11185  1631  0021               	movlb	1	; select bank1
 11186  1632  00AC               	movwf	(_current^(0+128)+4)
 11187  1633  0008               	return
 11188  1634                     __end_of_calculateCurrent2:	
 11189                           
 11190                           	psect	text16
 11191  15AA                     __ptext16:	
 11192 ;; *************** function _calculateCurrent1 *****************
 11193 ;; Defined at:
 11194 ;;		line 382 in file "main.c"
 11195 ;; Parameters:    Size  Location     Type
 11196 ;;		None
 11197 ;; Auto vars:     Size  Location     Type
 11198 ;;		None
 11199 ;; Return value:  Size  Location     Type
 11200 ;;                  1    wreg      void 
 11201 ;; Registers used:
 11202 ;;		wreg, status,2, status,0, pclath, cstack
 11203 ;; Tracked objects:
 11204 ;;		On entry : 0/0
 11205 ;;		On exit  : 0/0
 11206 ;;		Unchanged: 0/0
 11207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11208 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11209 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11210 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11211 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11212 ;;Total ram usage:        3 bytes
 11213 ;; Hardware stack levels used:    1
 11214 ;; Hardware stack levels required when called:    2
 11215 ;; This function calls:
 11216 ;;		___awtoft
 11217 ;;		___ftdiv
 11218 ;;		___fttol
 11219 ;; This function is called by:
 11220 ;;		_main
 11221 ;; This function uses a non-reentrant model
 11222 ;;
 11223                           
 11224                           
 11225                           ;psect for function _calculateCurrent1
 11226  15AA                     _calculateCurrent1:	
 11227                           
 11228                           ;main.c: 384: if(Ianalogs[1]-561<=0)
 11229                           
 11230                           ;incstack = 0
 11231                           ; Regs used in _calculateCurrent1: [wreg+status,2+status,0+pclath+cstack]
 11232  15AA  0021               	movlb	1	; select bank1
 11233  15AB  0822               	movf	(_Ianalogs^(0+128)+2),w
 11234  15AC  3ECF               	addlw	207
 11235  15AD  0020               	movlb	0	; select bank0
 11236  15AE  00BE               	movwf	??_calculateCurrent1
 11237  15AF  30FD               	movlw	253
 11238  15B0  0021               	movlb	1	; select bank1
 11239  15B1  3D23               	addwfc	((_Ianalogs+1)^(0+128)+2),w
 11240  15B2  0020               	movlb	0	; select bank0
 11241  15B3  00BF               	movwf	??_calculateCurrent1+1
 11242  15B4  083F               	movf	??_calculateCurrent1+1,w
 11243  15B5  3A80               	xorlw	128
 11244  15B6  00C0               	movwf	??_calculateCurrent1+2
 11245  15B7  3080               	movlw	128
 11246  15B8  0240               	subwf	??_calculateCurrent1+2,w
 11247  15B9  1D03               	skipz
 11248  15BA  2DBD               	goto	u3645
 11249  15BB  3001               	movlw	1
 11250  15BC  023E               	subwf	??_calculateCurrent1,w
 11251  15BD                     u3645:	
 11252  15BD  1803               	skipnc
 11253  15BE  2DC3               	goto	l3080
 11254                           
 11255                           ;main.c: 385: {
 11256                           ;main.c: 386: current[1]=0;
 11257  15BF  0021               	movlb	1	; select bank1
 11258  15C0  01AA               	clrf	(_current^(0+128)+2)
 11259  15C1  01AB               	clrf	((_current+1)^(0+128)+2)
 11260                           
 11261                           ;main.c: 387: }
 11262  15C2  0008               	return
 11263  15C3                     l3080:	
 11264                           
 11265                           ;main.c: 388: else
 11266                           ;main.c: 389: {
 11267                           ;main.c: 390: current[1]=(int16_t)((Ianalogs[1]-561)/1.99055);
 11268  15C3  0021               	movlb	1	; select bank1
 11269  15C4  0822               	movf	(_Ianalogs^(0+128)+2),w
 11270  15C5  3ECF               	addlw	207
 11271  15C6  00F8               	movwf	___awtoft@c
 11272  15C7  30FD               	movlw	253
 11273  15C8  3D23               	addwfc	((_Ianalogs+1)^(0+128)+2),w
 11274  15C9  00F9               	movwf	___awtoft@c+1
 11275  15CA  3193  2379  3195   	fcall	___awtoft
 11276  15CD  0878               	movf	?___awtoft,w
 11277  15CE  0020               	movlb	0	; select bank0
 11278  15CF  00A3               	movwf	___ftdiv@f1
 11279  15D0  0879               	movf	?___awtoft+1,w
 11280  15D1  00A4               	movwf	___ftdiv@f1+1
 11281  15D2  087A               	movf	?___awtoft+2,w
 11282  15D3  00A5               	movwf	___ftdiv@f1+2
 11283  15D4  30CA               	movlw	202
 11284  15D5  00A0               	movwf	___ftdiv@f2
 11285  15D6  30FE               	movlw	254
 11286  15D7  00A1               	movwf	___ftdiv@f2+1
 11287  15D8  303F               	movlw	63
 11288  15D9  00A2               	movwf	___ftdiv@f2+2
 11289  15DA  3188  20FD  3195   	fcall	___ftdiv
 11290  15DD  0020               	movlb	0	; select bank0
 11291  15DE  0820               	movf	?___ftdiv,w
 11292  15DF  00B0               	movwf	___fttol@f1
 11293  15E0  0821               	movf	?___ftdiv+1,w
 11294  15E1  00B1               	movwf	___fttol@f1+1
 11295  15E2  0822               	movf	?___ftdiv+2,w
 11296  15E3  00B2               	movwf	___fttol@f1+2
 11297  15E4  3180  2016         	fcall	___fttol
 11298  15E6  0020               	movlb	0	; select bank0
 11299  15E7  0831               	movf	?___fttol+1,w
 11300  15E8  0021               	movlb	1	; select bank1
 11301  15E9  00AB               	movwf	((_current+1)^(0+128)+2)
 11302  15EA  0020               	movlb	0	; select bank0
 11303  15EB  0830               	movf	?___fttol,w
 11304  15EC  0021               	movlb	1	; select bank1
 11305  15ED  00AA               	movwf	(_current^(0+128)+2)
 11306  15EE  0008               	return
 11307  15EF                     __end_of_calculateCurrent1:	
 11308                           
 11309                           	psect	text17
 11310  1565                     __ptext17:	
 11311 ;; *************** function _calculateCurrent0 *****************
 11312 ;; Defined at:
 11313 ;;		line 369 in file "main.c"
 11314 ;; Parameters:    Size  Location     Type
 11315 ;;		None
 11316 ;; Auto vars:     Size  Location     Type
 11317 ;;		None
 11318 ;; Return value:  Size  Location     Type
 11319 ;;                  1    wreg      void 
 11320 ;; Registers used:
 11321 ;;		wreg, status,2, status,0, pclath, cstack
 11322 ;; Tracked objects:
 11323 ;;		On entry : 0/0
 11324 ;;		On exit  : 0/0
 11325 ;;		Unchanged: 0/0
 11326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11327 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11328 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11329 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11330 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11331 ;;Total ram usage:        3 bytes
 11332 ;; Hardware stack levels used:    1
 11333 ;; Hardware stack levels required when called:    2
 11334 ;; This function calls:
 11335 ;;		___awtoft
 11336 ;;		___ftdiv
 11337 ;;		___fttol
 11338 ;; This function is called by:
 11339 ;;		_main
 11340 ;; This function uses a non-reentrant model
 11341 ;;
 11342                           
 11343                           
 11344                           ;psect for function _calculateCurrent0
 11345  1565                     _calculateCurrent0:	
 11346                           
 11347                           ;main.c: 371: if(Ianalogs[0]-580<=0)
 11348                           
 11349                           ;incstack = 0
 11350                           ; Regs used in _calculateCurrent0: [wreg+status,2+status,0+pclath+cstack]
 11351  1565  0021               	movlb	1	; select bank1
 11352  1566  0820               	movf	_Ianalogs^(0+128),w
 11353  1567  3EBC               	addlw	188
 11354  1568  0020               	movlb	0	; select bank0
 11355  1569  00BE               	movwf	??_calculateCurrent0
 11356  156A  30FD               	movlw	253
 11357  156B  0021               	movlb	1	; select bank1
 11358  156C  3D21               	addwfc	(_Ianalogs+1)^(0+128),w
 11359  156D  0020               	movlb	0	; select bank0
 11360  156E  00BF               	movwf	??_calculateCurrent0+1
 11361  156F  083F               	movf	??_calculateCurrent0+1,w
 11362  1570  3A80               	xorlw	128
 11363  1571  00C0               	movwf	??_calculateCurrent0+2
 11364  1572  3080               	movlw	128
 11365  1573  0240               	subwf	??_calculateCurrent0+2,w
 11366  1574  1D03               	skipz
 11367  1575  2D78               	goto	u3635
 11368  1576  3001               	movlw	1
 11369  1577  023E               	subwf	??_calculateCurrent0,w
 11370  1578                     u3635:	
 11371  1578  1803               	skipnc
 11372  1579  2D7E               	goto	l3074
 11373                           
 11374                           ;main.c: 372: {
 11375                           ;main.c: 373: current[0]=0;
 11376  157A  0021               	movlb	1	; select bank1
 11377  157B  01A8               	clrf	_current^(0+128)
 11378  157C  01A9               	clrf	(_current+1)^(0+128)
 11379                           
 11380                           ;main.c: 374: }
 11381  157D  0008               	return
 11382  157E                     l3074:	
 11383                           
 11384                           ;main.c: 375: else
 11385                           ;main.c: 376: {
 11386                           ;main.c: 378: current[0]=(int16_t)((Ianalogs[0]-580)/3.15);
 11387  157E  0021               	movlb	1	; select bank1
 11388  157F  0820               	movf	_Ianalogs^(0+128),w
 11389  1580  3EBC               	addlw	188
 11390  1581  00F8               	movwf	___awtoft@c
 11391  1582  30FD               	movlw	253
 11392  1583  3D21               	addwfc	(_Ianalogs+1)^(0+128),w
 11393  1584  00F9               	movwf	___awtoft@c+1
 11394  1585  3193  2379  3195   	fcall	___awtoft
 11395  1588  0878               	movf	?___awtoft,w
 11396  1589  0020               	movlb	0	; select bank0
 11397  158A  00A3               	movwf	___ftdiv@f1
 11398  158B  0879               	movf	?___awtoft+1,w
 11399  158C  00A4               	movwf	___ftdiv@f1+1
 11400  158D  087A               	movf	?___awtoft+2,w
 11401  158E  00A5               	movwf	___ftdiv@f1+2
 11402  158F  309A               	movlw	154
 11403  1590  00A0               	movwf	___ftdiv@f2
 11404  1591  3049               	movlw	73
 11405  1592  00A1               	movwf	___ftdiv@f2+1
 11406  1593  3040               	movlw	64
 11407  1594  00A2               	movwf	___ftdiv@f2+2
 11408  1595  3188  20FD  3195   	fcall	___ftdiv
 11409  1598  0020               	movlb	0	; select bank0
 11410  1599  0820               	movf	?___ftdiv,w
 11411  159A  00B0               	movwf	___fttol@f1
 11412  159B  0821               	movf	?___ftdiv+1,w
 11413  159C  00B1               	movwf	___fttol@f1+1
 11414  159D  0822               	movf	?___ftdiv+2,w
 11415  159E  00B2               	movwf	___fttol@f1+2
 11416  159F  3180  2016         	fcall	___fttol
 11417  15A1  0020               	movlb	0	; select bank0
 11418  15A2  0831               	movf	?___fttol+1,w
 11419  15A3  0021               	movlb	1	; select bank1
 11420  15A4  00A9               	movwf	(_current+1)^(0+128)
 11421  15A5  0020               	movlb	0	; select bank0
 11422  15A6  0830               	movf	?___fttol,w
 11423  15A7  0021               	movlb	1	; select bank1
 11424  15A8  00A8               	movwf	_current^(0+128)
 11425  15A9  0008               	return
 11426  15AA                     __end_of_calculateCurrent0:	
 11427                           
 11428                           	psect	text18
 11429  0016                     __ptext18:	
 11430 ;; *************** function ___fttol *****************
 11431 ;; Defined at:
 11432 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
 11433 ;; Parameters:    Size  Location     Type
 11434 ;;  f1              3   16[BANK0 ] float 
 11435 ;; Auto vars:     Size  Location     Type
 11436 ;;  lval            4   25[BANK0 ] unsigned long 
 11437 ;;  exp1            1   29[BANK0 ] unsigned char 
 11438 ;;  sign1           1   24[BANK0 ] unsigned char 
 11439 ;; Return value:  Size  Location     Type
 11440 ;;                  4   16[BANK0 ] long 
 11441 ;; Registers used:
 11442 ;;		wreg, status,2, status,0
 11443 ;; Tracked objects:
 11444 ;;		On entry : 0/0
 11445 ;;		On exit  : 0/0
 11446 ;;		Unchanged: 0/0
 11447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11448 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11449 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11450 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11451 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11452 ;;Total ram usage:       14 bytes
 11453 ;; Hardware stack levels used:    1
 11454 ;; This function calls:
 11455 ;;		Nothing
 11456 ;; This function is called by:
 11457 ;;		_tempCalc
 11458 ;;		_main
 11459 ;;		_calculateCurrent0
 11460 ;;		_calculateCurrent1
 11461 ;;		_calculateCurrent2
 11462 ;;		_calculateCurrent3
 11463 ;; This function uses a non-reentrant model
 11464 ;;
 11465                           
 11466                           
 11467                           ;psect for function ___fttol
 11468  0016                     ___fttol:	
 11469                           
 11470                           ;incstack = 0
 11471                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 11472  0016  0020               	movlb	0	; select bank0
 11473  0017  0830               	movf	___fttol@f1,w
 11474  0018  00B4               	movwf	??___fttol
 11475  0019  0831               	movf	___fttol@f1+1,w
 11476  001A  00B5               	movwf	??___fttol+1
 11477  001B  0832               	movf	___fttol@f1+2,w
 11478  001C  00B6               	movwf	??___fttol+2
 11479  001D  1003               	clrc
 11480  001E  0D35               	rlf	??___fttol+1,w
 11481  001F  0D36               	rlf	??___fttol+2,w
 11482  0020  00B7               	movwf	??___fttol+3
 11483  0021  0837               	movf	??___fttol+3,w
 11484  0022  00BD               	movwf	___fttol@exp1
 11485  0023  083D               	movf	___fttol@exp1,w
 11486  0024  1D03               	btfss	3,2
 11487  0025  282F               	goto	l2782
 11488  0026  3000               	movlw	0
 11489  0027  00B3               	movwf	?___fttol+3
 11490  0028  3000               	movlw	0
 11491  0029  00B2               	movwf	?___fttol+2
 11492  002A  3000               	movlw	0
 11493  002B  00B1               	movwf	?___fttol+1
 11494  002C  3000               	movlw	0
 11495  002D  00B0               	movwf	?___fttol
 11496  002E  0008               	return
 11497  002F                     l2782:	
 11498  002F  0830               	movf	___fttol@f1,w
 11499  0030  00B4               	movwf	??___fttol
 11500  0031  0831               	movf	___fttol@f1+1,w
 11501  0032  00B5               	movwf	??___fttol+1
 11502  0033  0832               	movf	___fttol@f1+2,w
 11503  0034  00B6               	movwf	??___fttol+2
 11504  0035  3017               	movlw	23
 11505  0036                     u2995:	
 11506  0036  36B6               	lsrf	??___fttol+2,f
 11507  0037  0CB5               	rrf	??___fttol+1,f
 11508  0038  0CB4               	rrf	??___fttol,f
 11509  0039  0B89               	decfsz	9,f
 11510  003A  2836               	goto	u2995
 11511  003B  0834               	movf	??___fttol,w
 11512  003C  00B7               	movwf	??___fttol+3
 11513  003D  0837               	movf	??___fttol+3,w
 11514  003E  00B8               	movwf	___fttol@sign1
 11515  003F  17B1               	bsf	___fttol@f1+1,7
 11516  0040  30FF               	movlw	255
 11517  0041  05B0               	andwf	___fttol@f1,f
 11518  0042  30FF               	movlw	255
 11519  0043  05B1               	andwf	___fttol@f1+1,f
 11520  0044  3000               	movlw	0
 11521  0045  05B2               	andwf	___fttol@f1+2,f
 11522  0046  0830               	movf	___fttol@f1,w
 11523  0047  00B9               	movwf	___fttol@lval
 11524  0048  0831               	movf	___fttol@f1+1,w
 11525  0049  00BA               	movwf	___fttol@lval+1
 11526  004A  0832               	movf	___fttol@f1+2,w
 11527  004B  00BB               	movwf	___fttol@lval+2
 11528  004C  01BC               	clrf	___fttol@lval+3
 11529  004D  308E               	movlw	142
 11530  004E  02BD               	subwf	___fttol@exp1,f
 11531  004F  1FBD               	btfss	___fttol@exp1,7
 11532  0050  286D               	goto	l2802
 11533  0051  083D               	movf	___fttol@exp1,w
 11534  0052  3A80               	xorlw	128
 11535  0053  3E8F               	addlw	143
 11536  0054  1803               	skipnc
 11537  0055  285F               	goto	l2800
 11538  0056  3000               	movlw	0
 11539  0057  00B3               	movwf	?___fttol+3
 11540  0058  3000               	movlw	0
 11541  0059  00B2               	movwf	?___fttol+2
 11542  005A  3000               	movlw	0
 11543  005B  00B1               	movwf	?___fttol+1
 11544  005C  3000               	movlw	0
 11545  005D  00B0               	movwf	?___fttol
 11546  005E  0008               	return
 11547  005F                     l2800:	
 11548  005F  3001               	movlw	1
 11549  0060                     u3025:	
 11550  0060  36BC               	lsrf	___fttol@lval+3,f
 11551  0061  0CBB               	rrf	___fttol@lval+2,f
 11552  0062  0CBA               	rrf	___fttol@lval+1,f
 11553  0063  0CB9               	rrf	___fttol@lval,f
 11554  0064  0B89               	decfsz	9,f
 11555  0065  2860               	goto	u3025
 11556  0066  3001               	movlw	1
 11557  0067  00B4               	movwf	??___fttol
 11558  0068  0834               	movf	??___fttol,w
 11559  0069  07BD               	addwf	___fttol@exp1,f
 11560  006A  1903               	btfsc	3,2
 11561  006B  2886               	goto	l2810
 11562  006C  285F               	goto	l2800
 11563  006D                     l2802:	
 11564  006D  3018               	movlw	24
 11565  006E  023D               	subwf	___fttol@exp1,w
 11566  006F  1C03               	skipc
 11567  0070  2883               	goto	l834
 11568  0071  3000               	movlw	0
 11569  0072  00B3               	movwf	?___fttol+3
 11570  0073  3000               	movlw	0
 11571  0074  00B2               	movwf	?___fttol+2
 11572  0075  3000               	movlw	0
 11573  0076  00B1               	movwf	?___fttol+1
 11574  0077  3000               	movlw	0
 11575  0078  00B0               	movwf	?___fttol
 11576  0079  0008               	return
 11577  007A                     l2808:	
 11578  007A  3001               	movlw	1
 11579  007B                     u3055:	
 11580  007B  35B9               	lslf	___fttol@lval,f
 11581  007C  0DBA               	rlf	___fttol@lval+1,f
 11582  007D  0DBB               	rlf	___fttol@lval+2,f
 11583  007E  0DBC               	rlf	___fttol@lval+3,f
 11584  007F  0B89               	decfsz	9,f
 11585  0080  287B               	goto	u3055
 11586  0081  3001               	movlw	1
 11587  0082  02BD               	subwf	___fttol@exp1,f
 11588  0083                     l834:	
 11589  0083  083D               	movf	___fttol@exp1,w
 11590  0084  1D03               	btfss	3,2
 11591  0085  287A               	goto	l2808
 11592  0086                     l2810:	
 11593  0086  0838               	movf	___fttol@sign1,w
 11594  0087  1903               	btfsc	3,2
 11595  0088  2894               	goto	l2814
 11596  0089  09B9               	comf	___fttol@lval,f
 11597  008A  09BA               	comf	___fttol@lval+1,f
 11598  008B  09BB               	comf	___fttol@lval+2,f
 11599  008C  09BC               	comf	___fttol@lval+3,f
 11600  008D  0AB9               	incf	___fttol@lval,f
 11601  008E  1903               	skipnz
 11602  008F  0ABA               	incf	___fttol@lval+1,f
 11603  0090  1903               	skipnz
 11604  0091  0ABB               	incf	___fttol@lval+2,f
 11605  0092  1903               	skipnz
 11606  0093  0ABC               	incf	___fttol@lval+3,f
 11607  0094                     l2814:	
 11608  0094  083C               	movf	___fttol@lval+3,w
 11609  0095  00B3               	movwf	?___fttol+3
 11610  0096  083B               	movf	___fttol@lval+2,w
 11611  0097  00B2               	movwf	?___fttol+2
 11612  0098  083A               	movf	___fttol@lval+1,w
 11613  0099  00B1               	movwf	?___fttol+1
 11614  009A  0839               	movf	___fttol@lval,w
 11615  009B  00B0               	movwf	?___fttol
 11616  009C  0008               	return
 11617  009D                     __end_of___fttol:	
 11618                           
 11619                           	psect	text19
 11620  08FD                     __ptext19:	
 11621 ;; *************** function ___ftdiv *****************
 11622 ;; Defined at:
 11623 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
 11624 ;; Parameters:    Size  Location     Type
 11625 ;;  f2              3    0[BANK0 ] float 
 11626 ;;  f1              3    3[BANK0 ] float 
 11627 ;; Auto vars:     Size  Location     Type
 11628 ;;  f3              3   11[BANK0 ] float 
 11629 ;;  sign            1   15[BANK0 ] unsigned char 
 11630 ;;  exp             1   14[BANK0 ] unsigned char 
 11631 ;;  cntr            1   10[BANK0 ] unsigned char 
 11632 ;; Return value:  Size  Location     Type
 11633 ;;                  3    0[BANK0 ] float 
 11634 ;; Registers used:
 11635 ;;		wreg, status,2, status,0, pclath, cstack
 11636 ;; Tracked objects:
 11637 ;;		On entry : 0/0
 11638 ;;		On exit  : 0/0
 11639 ;;		Unchanged: 0/0
 11640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11641 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11642 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11643 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11644 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11645 ;;Total ram usage:       16 bytes
 11646 ;; Hardware stack levels used:    1
 11647 ;; Hardware stack levels required when called:    1
 11648 ;; This function calls:
 11649 ;;		___ftpack
 11650 ;; This function is called by:
 11651 ;;		_tempCalc
 11652 ;;		_main
 11653 ;;		_calculateCurrent0
 11654 ;;		_calculateCurrent1
 11655 ;;		_calculateCurrent2
 11656 ;;		_calculateCurrent3
 11657 ;; This function uses a non-reentrant model
 11658 ;;
 11659                           
 11660                           
 11661                           ;psect for function ___ftdiv
 11662  08FD                     ___ftdiv:	
 11663                           
 11664                           ;incstack = 0
 11665                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 11666  08FD  0020               	movlb	0	; select bank0
 11667  08FE  0823               	movf	___ftdiv@f1,w
 11668  08FF  00A6               	movwf	??___ftdiv
 11669  0900  0824               	movf	___ftdiv@f1+1,w
 11670  0901  00A7               	movwf	??___ftdiv+1
 11671  0902  0825               	movf	___ftdiv@f1+2,w
 11672  0903  00A8               	movwf	??___ftdiv+2
 11673  0904  1003               	clrc
 11674  0905  0D27               	rlf	??___ftdiv+1,w
 11675  0906  0D28               	rlf	??___ftdiv+2,w
 11676  0907  00A9               	movwf	??___ftdiv+3
 11677  0908  0829               	movf	??___ftdiv+3,w
 11678  0909  00AE               	movwf	___ftdiv@exp
 11679  090A  082E               	movf	___ftdiv@exp,w
 11680  090B  1D03               	btfss	3,2
 11681  090C  2914               	goto	l2732
 11682  090D  3000               	movlw	0
 11683  090E  00A0               	movwf	?___ftdiv
 11684  090F  3000               	movlw	0
 11685  0910  00A1               	movwf	?___ftdiv+1
 11686  0911  3000               	movlw	0
 11687  0912  00A2               	movwf	?___ftdiv+2
 11688  0913  0008               	return
 11689  0914                     l2732:	
 11690  0914  0820               	movf	___ftdiv@f2,w
 11691  0915  00A6               	movwf	??___ftdiv
 11692  0916  0821               	movf	___ftdiv@f2+1,w
 11693  0917  00A7               	movwf	??___ftdiv+1
 11694  0918  0822               	movf	___ftdiv@f2+2,w
 11695  0919  00A8               	movwf	??___ftdiv+2
 11696  091A  1003               	clrc
 11697  091B  0D27               	rlf	??___ftdiv+1,w
 11698  091C  0D28               	rlf	??___ftdiv+2,w
 11699  091D  00A9               	movwf	??___ftdiv+3
 11700  091E  0829               	movf	??___ftdiv+3,w
 11701  091F  00AF               	movwf	___ftdiv@sign
 11702  0920  082F               	movf	___ftdiv@sign,w
 11703  0921  1D03               	btfss	3,2
 11704  0922  292A               	goto	l2738
 11705  0923  3000               	movlw	0
 11706  0924  00A0               	movwf	?___ftdiv
 11707  0925  3000               	movlw	0
 11708  0926  00A1               	movwf	?___ftdiv+1
 11709  0927  3000               	movlw	0
 11710  0928  00A2               	movwf	?___ftdiv+2
 11711  0929  0008               	return
 11712  092A                     l2738:	
 11713  092A  3000               	movlw	0
 11714  092B  00AB               	movwf	___ftdiv@f3
 11715  092C  3000               	movlw	0
 11716  092D  00AC               	movwf	___ftdiv@f3+1
 11717  092E  3000               	movlw	0
 11718  092F  00AD               	movwf	___ftdiv@f3+2
 11719  0930  3089               	movlw	137
 11720  0931  072F               	addwf	___ftdiv@sign,w
 11721  0932  00A6               	movwf	??___ftdiv
 11722  0933  0826               	movf	??___ftdiv,w
 11723  0934  02AE               	subwf	___ftdiv@exp,f
 11724  0935  0823               	movf	___ftdiv@f1,w
 11725  0936  00A6               	movwf	??___ftdiv
 11726  0937  0824               	movf	___ftdiv@f1+1,w
 11727  0938  00A7               	movwf	??___ftdiv+1
 11728  0939  0825               	movf	___ftdiv@f1+2,w
 11729  093A  00A8               	movwf	??___ftdiv+2
 11730  093B  3010               	movlw	16
 11731  093C                     u2915:	
 11732  093C  36A8               	lsrf	??___ftdiv+2,f
 11733  093D  0CA7               	rrf	??___ftdiv+1,f
 11734  093E  0CA6               	rrf	??___ftdiv,f
 11735  093F  0B89               	decfsz	9,f
 11736  0940  293C               	goto	u2915
 11737  0941  0826               	movf	??___ftdiv,w
 11738  0942  00A9               	movwf	??___ftdiv+3
 11739  0943  0829               	movf	??___ftdiv+3,w
 11740  0944  00AF               	movwf	___ftdiv@sign
 11741  0945  0820               	movf	___ftdiv@f2,w
 11742  0946  00A6               	movwf	??___ftdiv
 11743  0947  0821               	movf	___ftdiv@f2+1,w
 11744  0948  00A7               	movwf	??___ftdiv+1
 11745  0949  0822               	movf	___ftdiv@f2+2,w
 11746  094A  00A8               	movwf	??___ftdiv+2
 11747  094B  3010               	movlw	16
 11748  094C                     u2925:	
 11749  094C  36A8               	lsrf	??___ftdiv+2,f
 11750  094D  0CA7               	rrf	??___ftdiv+1,f
 11751  094E  0CA6               	rrf	??___ftdiv,f
 11752  094F  0B89               	decfsz	9,f
 11753  0950  294C               	goto	u2925
 11754  0951  0826               	movf	??___ftdiv,w
 11755  0952  00A9               	movwf	??___ftdiv+3
 11756  0953  0829               	movf	??___ftdiv+3,w
 11757  0954  06AF               	xorwf	___ftdiv@sign,f
 11758  0955  3080               	movlw	128
 11759  0956  00A6               	movwf	??___ftdiv
 11760  0957  0826               	movf	??___ftdiv,w
 11761  0958  05AF               	andwf	___ftdiv@sign,f
 11762  0959  17A4               	bsf	___ftdiv@f1+1,7
 11763  095A  30FF               	movlw	255
 11764  095B  05A3               	andwf	___ftdiv@f1,f
 11765  095C  30FF               	movlw	255
 11766  095D  05A4               	andwf	___ftdiv@f1+1,f
 11767  095E  3000               	movlw	0
 11768  095F  05A5               	andwf	___ftdiv@f1+2,f
 11769  0960  17A1               	bsf	___ftdiv@f2+1,7
 11770  0961  30FF               	movlw	255
 11771  0962  05A0               	andwf	___ftdiv@f2,f
 11772  0963  30FF               	movlw	255
 11773  0964  05A1               	andwf	___ftdiv@f2+1,f
 11774  0965  3000               	movlw	0
 11775  0966  05A2               	andwf	___ftdiv@f2+2,f
 11776  0967  3018               	movlw	24
 11777  0968  00A6               	movwf	??___ftdiv
 11778  0969  0826               	movf	??___ftdiv,w
 11779  096A  00AA               	movwf	___ftdiv@cntr
 11780  096B                     l2752:	
 11781  096B  3001               	movlw	1
 11782  096C                     u2935:	
 11783  096C  35AB               	lslf	___ftdiv@f3,f
 11784  096D  0DAC               	rlf	___ftdiv@f3+1,f
 11785  096E  0DAD               	rlf	___ftdiv@f3+2,f
 11786  096F  0B89               	decfsz	9,f
 11787  0970  296C               	goto	u2935
 11788  0971  0822               	movf	___ftdiv@f2+2,w
 11789  0972  0225               	subwf	___ftdiv@f1+2,w
 11790  0973  1D03               	skipz
 11791  0974  297B               	goto	u2945
 11792  0975  0821               	movf	___ftdiv@f2+1,w
 11793  0976  0224               	subwf	___ftdiv@f1+1,w
 11794  0977  1D03               	skipz
 11795  0978  297B               	goto	u2945
 11796  0979  0820               	movf	___ftdiv@f2,w
 11797  097A  0223               	subwf	___ftdiv@f1,w
 11798  097B                     u2945:	
 11799  097B  1C03               	skipc
 11800  097C  2984               	goto	l2760
 11801  097D  0820               	movf	___ftdiv@f2,w
 11802  097E  02A3               	subwf	___ftdiv@f1,f
 11803  097F  0821               	movf	___ftdiv@f2+1,w
 11804  0980  3BA4               	subwfb	___ftdiv@f1+1,f
 11805  0981  0822               	movf	___ftdiv@f2+2,w
 11806  0982  3BA5               	subwfb	___ftdiv@f1+2,f
 11807  0983  142B               	bsf	___ftdiv@f3,0
 11808  0984                     l2760:	
 11809  0984  3001               	movlw	1
 11810  0985                     u2955:	
 11811  0985  35A3               	lslf	___ftdiv@f1,f
 11812  0986  0DA4               	rlf	___ftdiv@f1+1,f
 11813  0987  0DA5               	rlf	___ftdiv@f1+2,f
 11814  0988  0B89               	decfsz	9,f
 11815  0989  2985               	goto	u2955
 11816  098A  3001               	movlw	1
 11817  098B  02AA               	subwf	___ftdiv@cntr,f
 11818  098C  1D03               	btfss	3,2
 11819  098D  296B               	goto	l2752
 11820  098E  082B               	movf	___ftdiv@f3,w
 11821  098F  00F0               	movwf	___ftpack@arg
 11822  0990  082C               	movf	___ftdiv@f3+1,w
 11823  0991  00F1               	movwf	___ftpack@arg+1
 11824  0992  082D               	movf	___ftdiv@f3+2,w
 11825  0993  00F2               	movwf	___ftpack@arg+2
 11826  0994  082E               	movf	___ftdiv@exp,w
 11827  0995  00A6               	movwf	??___ftdiv
 11828  0996  0826               	movf	??___ftdiv,w
 11829  0997  00F3               	movwf	___ftpack@exp
 11830  0998  082F               	movf	___ftdiv@sign,w
 11831  0999  00A7               	movwf	??___ftdiv+1
 11832  099A  0827               	movf	??___ftdiv+1,w
 11833  099B  00F4               	movwf	___ftpack@sign
 11834  099C  3188  2017         	fcall	___ftpack
 11835  099E  0870               	movf	?___ftpack,w
 11836  099F  0020               	movlb	0	; select bank0
 11837  09A0  00A0               	movwf	?___ftdiv
 11838  09A1  0871               	movf	?___ftpack+1,w
 11839  09A2  00A1               	movwf	?___ftdiv+1
 11840  09A3  0872               	movf	?___ftpack+2,w
 11841  09A4  00A2               	movwf	?___ftdiv+2
 11842  09A5  0008               	return
 11843  09A6                     __end_of___ftdiv:	
 11844                           
 11845                           	psect	text20
 11846  1379                     __ptext20:	
 11847 ;; *************** function ___awtoft *****************
 11848 ;; Defined at:
 11849 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
 11850 ;; Parameters:    Size  Location     Type
 11851 ;;  c               2    8[COMMON] int 
 11852 ;; Auto vars:     Size  Location     Type
 11853 ;;  sign            1   13[COMMON] unsigned char 
 11854 ;; Return value:  Size  Location     Type
 11855 ;;                  3    8[COMMON] float 
 11856 ;; Registers used:
 11857 ;;		wreg, status,2, status,0, pclath, cstack
 11858 ;; Tracked objects:
 11859 ;;		On entry : 0/0
 11860 ;;		On exit  : 0/0
 11861 ;;		Unchanged: 0/0
 11862 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11863 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11864 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11865 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11866 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11867 ;;Total ram usage:        6 bytes
 11868 ;; Hardware stack levels used:    1
 11869 ;; Hardware stack levels required when called:    1
 11870 ;; This function calls:
 11871 ;;		___ftpack
 11872 ;; This function is called by:
 11873 ;;		_tempCalc
 11874 ;;		_main
 11875 ;;		_calculateCurrent0
 11876 ;;		_calculateCurrent1
 11877 ;;		_calculateCurrent2
 11878 ;;		_calculateCurrent3
 11879 ;;		_log
 11880 ;; This function uses a non-reentrant model
 11881 ;;
 11882                           
 11883                           
 11884                           ;psect for function ___awtoft
 11885  1379                     ___awtoft:	
 11886                           
 11887                           ;incstack = 0
 11888                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 11889  1379  01FD               	clrf	___awtoft@sign
 11890  137A  1FF9               	btfss	___awtoft@c+1,7
 11891  137B  2B83               	goto	l2404
 11892  137C  09F8               	comf	___awtoft@c,f
 11893  137D  09F9               	comf	___awtoft@c+1,f
 11894  137E  0AF8               	incf	___awtoft@c,f
 11895  137F  1903               	skipnz
 11896  1380  0AF9               	incf	___awtoft@c+1,f
 11897  1381  01FD               	clrf	___awtoft@sign
 11898  1382  0AFD               	incf	___awtoft@sign,f
 11899  1383                     l2404:	
 11900  1383  0878               	movf	___awtoft@c,w
 11901  1384  00F0               	movwf	___ftpack@arg
 11902  1385  0879               	movf	___awtoft@c+1,w
 11903  1386  00F1               	movwf	___ftpack@arg+1
 11904  1387  01F2               	clrf	___ftpack@arg+2
 11905  1388  308E               	movlw	142
 11906  1389  00FB               	movwf	??___awtoft
 11907  138A  087B               	movf	??___awtoft,w
 11908  138B  00F3               	movwf	___ftpack@exp
 11909  138C  087D               	movf	___awtoft@sign,w
 11910  138D  00FC               	movwf	??___awtoft+1
 11911  138E  087C               	movf	??___awtoft+1,w
 11912  138F  00F4               	movwf	___ftpack@sign
 11913  1390  3188  2017         	fcall	___ftpack
 11914  1392  0870               	movf	?___ftpack,w
 11915  1393  00F8               	movwf	?___awtoft
 11916  1394  0871               	movf	?___ftpack+1,w
 11917  1395  00F9               	movwf	?___awtoft+1
 11918  1396  0872               	movf	?___ftpack+2,w
 11919  1397  00FA               	movwf	?___awtoft+2
 11920  1398  0008               	return
 11921  1399                     __end_of___awtoft:	
 11922                           
 11923                           	psect	text21
 11924  0817                     __ptext21:	
 11925 ;; *************** function ___ftpack *****************
 11926 ;; Defined at:
 11927 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
 11928 ;; Parameters:    Size  Location     Type
 11929 ;;  arg             3    0[COMMON] unsigned um
 11930 ;;  exp             1    3[COMMON] unsigned char 
 11931 ;;  sign            1    4[COMMON] unsigned char 
 11932 ;; Auto vars:     Size  Location     Type
 11933 ;;		None
 11934 ;; Return value:  Size  Location     Type
 11935 ;;                  3    0[COMMON] float 
 11936 ;; Registers used:
 11937 ;;		wreg, status,2, status,0
 11938 ;; Tracked objects:
 11939 ;;		On entry : 0/0
 11940 ;;		On exit  : 0/0
 11941 ;;		Unchanged: 0/0
 11942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11943 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11944 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11945 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11946 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11947 ;;Total ram usage:        8 bytes
 11948 ;; Hardware stack levels used:    1
 11949 ;; This function calls:
 11950 ;;		Nothing
 11951 ;; This function is called by:
 11952 ;;		___awtoft
 11953 ;;		___ftadd
 11954 ;;		___ftdiv
 11955 ;;		___ftmul
 11956 ;; This function uses a non-reentrant model
 11957 ;;
 11958                           
 11959                           
 11960                           ;psect for function ___ftpack
 11961  0817                     ___ftpack:	
 11962                           
 11963                           ;incstack = 0
 11964                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 11965  0817  0873               	movf	___ftpack@exp,w
 11966  0818  1903               	btfsc	3,2
 11967  0819  281F               	goto	l2198
 11968  081A  0872               	movf	___ftpack@arg+2,w
 11969  081B  0471               	iorwf	___ftpack@arg+1,w
 11970  081C  0470               	iorwf	___ftpack@arg,w
 11971  081D  1D03               	skipz
 11972  081E  2830               	goto	l2204
 11973  081F                     l2198:	
 11974  081F  3000               	movlw	0
 11975  0820  00F0               	movwf	?___ftpack
 11976  0821  3000               	movlw	0
 11977  0822  00F1               	movwf	?___ftpack+1
 11978  0823  3000               	movlw	0
 11979  0824  00F2               	movwf	?___ftpack+2
 11980  0825  0008               	return
 11981  0826                     l2202:	
 11982  0826  3001               	movlw	1
 11983  0827  00F5               	movwf	??___ftpack
 11984  0828  0875               	movf	??___ftpack,w
 11985  0829  07F3               	addwf	___ftpack@exp,f
 11986  082A  3001               	movlw	1
 11987  082B                     u2015:	
 11988  082B  36F2               	lsrf	___ftpack@arg+2,f
 11989  082C  0CF1               	rrf	___ftpack@arg+1,f
 11990  082D  0CF0               	rrf	___ftpack@arg,f
 11991  082E  0B89               	decfsz	9,f
 11992  082F  282B               	goto	u2015
 11993  0830                     l2204:	
 11994  0830  30FE               	movlw	254
 11995  0831  0572               	andwf	___ftpack@arg+2,w
 11996  0832  1903               	btfsc	3,2
 11997  0833  2849               	goto	l743
 11998  0834  2826               	goto	l2202
 11999  0835                     l2206:	
 12000  0835  3001               	movlw	1
 12001  0836  00F5               	movwf	??___ftpack
 12002  0837  0875               	movf	??___ftpack,w
 12003  0838  07F3               	addwf	___ftpack@exp,f
 12004  0839  3001               	movlw	1
 12005  083A  07F0               	addwf	___ftpack@arg,f
 12006  083B  3000               	movlw	0
 12007  083C  1803               	skipnc
 12008  083D  3001               	movlw	1
 12009  083E  07F1               	addwf	___ftpack@arg+1,f
 12010  083F  3000               	movlw	0
 12011  0840  1803               	skipnc
 12012  0841  3001               	movlw	1
 12013  0842  07F2               	addwf	___ftpack@arg+2,f
 12014  0843  3001               	movlw	1
 12015  0844                     u2035:	
 12016  0844  36F2               	lsrf	___ftpack@arg+2,f
 12017  0845  0CF1               	rrf	___ftpack@arg+1,f
 12018  0846  0CF0               	rrf	___ftpack@arg,f
 12019  0847  0B89               	decfsz	9,f
 12020  0848  2844               	goto	u2035
 12021  0849                     l743:	
 12022  0849  30FF               	movlw	255
 12023  084A  0572               	andwf	___ftpack@arg+2,w
 12024  084B  1903               	btfsc	3,2
 12025  084C  2856               	goto	l2214
 12026  084D  2835               	goto	l2206
 12027  084E                     l2212:	
 12028  084E  3001               	movlw	1
 12029  084F  02F3               	subwf	___ftpack@exp,f
 12030  0850  3001               	movlw	1
 12031  0851                     u2055:	
 12032  0851  35F0               	lslf	___ftpack@arg,f
 12033  0852  0DF1               	rlf	___ftpack@arg+1,f
 12034  0853  0DF2               	rlf	___ftpack@arg+2,f
 12035  0854  0B89               	decfsz	9,f
 12036  0855  2851               	goto	u2055
 12037  0856                     l2214:	
 12038  0856  1BF1               	btfsc	___ftpack@arg+1,7
 12039  0857  285C               	goto	l750
 12040  0858  3002               	movlw	2
 12041  0859  0273               	subwf	___ftpack@exp,w
 12042  085A  1803               	skipnc
 12043  085B  284E               	goto	l2212
 12044  085C                     l750:	
 12045  085C  1873               	btfsc	___ftpack@exp,0
 12046  085D  2864               	goto	l751
 12047  085E  30FF               	movlw	255
 12048  085F  05F0               	andwf	___ftpack@arg,f
 12049  0860  307F               	movlw	127
 12050  0861  05F1               	andwf	___ftpack@arg+1,f
 12051  0862  30FF               	movlw	255
 12052  0863  05F2               	andwf	___ftpack@arg+2,f
 12053  0864                     l751:	
 12054  0864  1003               	clrc
 12055  0865  0CF3               	rrf	___ftpack@exp,f
 12056  0866  0873               	movf	___ftpack@exp,w
 12057  0867  00F5               	movwf	??___ftpack
 12058  0868  01F6               	clrf	??___ftpack+1
 12059  0869  01F7               	clrf	??___ftpack+2
 12060  086A  3010               	movlw	16
 12061  086B                     u2095:	
 12062  086B  35F5               	lslf	??___ftpack,f
 12063  086C  0DF6               	rlf	??___ftpack+1,f
 12064  086D  0DF7               	rlf	??___ftpack+2,f
 12065  086E  0B89               	decfsz	9,f
 12066  086F  286B               	goto	u2095
 12067  0870  0875               	movf	??___ftpack,w
 12068  0871  04F0               	iorwf	___ftpack@arg,f
 12069  0872  0876               	movf	??___ftpack+1,w
 12070  0873  04F1               	iorwf	___ftpack@arg+1,f
 12071  0874  0877               	movf	??___ftpack+2,w
 12072  0875  04F2               	iorwf	___ftpack@arg+2,f
 12073  0876  0874               	movf	___ftpack@sign,w
 12074  0877  1903               	btfsc	3,2
 12075  0878  0008               	return
 12076  0879  17F2               	bsf	___ftpack@arg+2,7
 12077  087A  0008               	return
 12078  087B                     __end_of___ftpack:	
 12079                           
 12080                           	psect	text22
 12081  147B                     __ptext22:	
 12082 ;; *************** function _SYSTEM_Initialize *****************
 12083 ;; Defined at:
 12084 ;;		line 71 in file "system.c"
 12085 ;; Parameters:    Size  Location     Type
 12086 ;;		None
 12087 ;; Auto vars:     Size  Location     Type
 12088 ;;		None
 12089 ;; Return value:  Size  Location     Type
 12090 ;;                  1    wreg      void 
 12091 ;; Registers used:
 12092 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12093 ;; Tracked objects:
 12094 ;;		On entry : 0/0
 12095 ;;		On exit  : 0/0
 12096 ;;		Unchanged: 0/0
 12097 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12098 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12099 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12100 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12101 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12102 ;;Total ram usage:        2 bytes
 12103 ;; Hardware stack levels used:    1
 12104 ;; Hardware stack levels required when called:    3
 12105 ;; This function calls:
 12106 ;;		_ADC_Initialize
 12107 ;;		_Init_Battery_State_Machine
 12108 ;;		_LCDClear
 12109 ;;		_LCDInit
 12110 ;;		_OSCILLATOR_Initialize
 12111 ;;		_PIN_MANAGER_Initialize
 12112 ;;		_PWM_Initialize
 12113 ;;		_TMR2_Initialize
 12114 ;;		_TMR4_Initialize
 12115 ;; This function is called by:
 12116 ;;		_main
 12117 ;; This function uses a non-reentrant model
 12118 ;;
 12119                           
 12120                           
 12121                           ;psect for function _SYSTEM_Initialize
 12122  147B                     _SYSTEM_Initialize:	
 12123                           
 12124                           ;system.c: 73: PIN_MANAGER_Initialize();
 12125                           
 12126                           ;incstack = 0
 12127                           ; Regs used in _SYSTEM_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12128  147B  3194  2444  3194   	fcall	_PIN_MANAGER_Initialize
 12129                           
 12130                           ;system.c: 74: OSCILLATOR_Initialize();
 12131  147E  3192  2297  3194   	fcall	_OSCILLATOR_Initialize
 12132                           
 12133                           ;system.c: 76: ADC_Initialize();
 12134  1481  3193  235A  3194   	fcall	_ADC_Initialize
 12135                           
 12136                           ;system.c: 77: PWM_Initialize();
 12137  1484  3192  22E1  3194   	fcall	_PWM_Initialize
 12138                           
 12139                           ;system.c: 79: TMR2_Initialize();
 12140  1487  3192  22AC  3194   	fcall	_TMR2_Initialize
 12141                           
 12142                           ;system.c: 80: TMR4_Initialize();
 12143  148A  3180  2008  3194   	fcall	_TMR4_Initialize
 12144                           
 12145                           ;system.c: 81: Init_Battery_State_Machine(0);
 12146  148D  3000               	movlw	0
 12147  148E  3194  2410  3194   	fcall	_Init_Battery_State_Machine
 12148                           
 12149                           ;system.c: 82: Init_Battery_State_Machine(1);
 12150  1491  3001               	movlw	1
 12151  1492  3194  2410  3194   	fcall	_Init_Battery_State_Machine
 12152                           
 12153                           ;system.c: 83: LCDInit();
 12154  1495  3194  24B4  3194   	fcall	_LCDInit
 12155                           
 12156                           ;system.c: 84: _delay((unsigned long)((200)*(32000000/4000.0)));
 12157  1498  3009               	movlw	9
 12158  1499  00FC               	movwf	??_SYSTEM_Initialize+1
 12159  149A  301E               	movlw	30
 12160  149B  00FB               	movwf	??_SYSTEM_Initialize
 12161  149C  30E4               	movlw	228
 12162  149D                     u3997:	
 12163  149D  0B89               	decfsz	9,f
 12164  149E  2C9D               	goto	u3997
 12165  149F  0BFB               	decfsz	??_SYSTEM_Initialize,f
 12166  14A0  2C9D               	goto	u3997
 12167  14A1  0BFC               	decfsz	??_SYSTEM_Initialize+1,f
 12168  14A2  2C9D               	goto	u3997
 12169  14A3  3200               	nop2
 12170                           
 12171                           ;system.c: 85: LCDClear();
 12172  14A4  3193  23BE  3194   	fcall	_LCDClear
 12173                           
 12174                           ;system.c: 86: _delay((unsigned long)((200)*(32000000/4000.0)));
 12175  14A7  3009               	movlw	9
 12176  14A8  00FC               	movwf	??_SYSTEM_Initialize+1
 12177  14A9  301E               	movlw	30
 12178  14AA  00FB               	movwf	??_SYSTEM_Initialize
 12179  14AB  30E4               	movlw	228
 12180  14AC                     u4007:	
 12181  14AC  0B89               	decfsz	9,f
 12182  14AD  2CAC               	goto	u4007
 12183  14AE  0BFB               	decfsz	??_SYSTEM_Initialize,f
 12184  14AF  2CAC               	goto	u4007
 12185  14B0  0BFC               	decfsz	??_SYSTEM_Initialize+1,f
 12186  14B1  2CAC               	goto	u4007
 12187  14B2  3200               	nop2
 12188  14B3  0008               	return
 12189  14B4                     __end_of_SYSTEM_Initialize:	
 12190                           
 12191                           	psect	text23
 12192  0008                     __ptext23:	
 12193 ;; *************** function _TMR4_Initialize *****************
 12194 ;; Defined at:
 12195 ;;		line 25 in file "tmr.c"
 12196 ;; Parameters:    Size  Location     Type
 12197 ;;		None
 12198 ;; Auto vars:     Size  Location     Type
 12199 ;;		None
 12200 ;; Return value:  Size  Location     Type
 12201 ;;                  1    wreg      void 
 12202 ;; Registers used:
 12203 ;;		wreg, status,2
 12204 ;; Tracked objects:
 12205 ;;		On entry : 0/0
 12206 ;;		On exit  : 0/0
 12207 ;;		Unchanged: 0/0
 12208 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12209 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12210 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12211 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12212 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12213 ;;Total ram usage:        0 bytes
 12214 ;; Hardware stack levels used:    1
 12215 ;; This function calls:
 12216 ;;		Nothing
 12217 ;; This function is called by:
 12218 ;;		_SYSTEM_Initialize
 12219 ;; This function uses a non-reentrant model
 12220 ;;
 12221                           
 12222                           
 12223                           ;psect for function _TMR4_Initialize
 12224  0008                     _TMR4_Initialize:	
 12225                           
 12226                           ;tmr.c: 27: T4CON = 0x00;
 12227                           
 12228                           ;incstack = 0
 12229                           ; Regs used in _TMR4_Initialize: [wreg+status,2]
 12230  0008  0025               	movlb	5	; select bank5
 12231  0009  0194               	clrf	20	;volatile
 12232                           
 12233                           ;tmr.c: 29: T4CLKCON = 0x01;
 12234  000A  3001               	movlw	1
 12235  000B  0096               	movwf	22	;volatile
 12236                           
 12237                           ;tmr.c: 31: T4HLT = 0x00;
 12238  000C  0195               	clrf	21	;volatile
 12239                           
 12240                           ;tmr.c: 33: T4RST = 0x00;
 12241  000D  0197               	clrf	23	;volatile
 12242                           
 12243                           ;tmr.c: 35: T4PR = 0xFE;
 12244  000E  30FE               	movlw	254
 12245  000F  0093               	movwf	19	;volatile
 12246                           
 12247                           ;tmr.c: 39: T4TMR = 0x00;
 12248  0010  0192               	clrf	18	;volatile
 12249                           
 12250                           ;tmr.c: 41: PIR4bits.TMR4IF = 0;
 12251  0011  002E               	movlb	14	; select bank14
 12252  0012  1190               	bcf	16,3	;volatile
 12253                           
 12254                           ;tmr.c: 43: T4CONbits.TMR4ON = 1;
 12255  0013  0025               	movlb	5	; select bank5
 12256  0014  1794               	bsf	20,7	;volatile
 12257  0015  0008               	return
 12258  0016                     __end_of_TMR4_Initialize:	
 12259                           
 12260                           	psect	text24
 12261  12AC                     __ptext24:	
 12262 ;; *************** function _TMR2_Initialize *****************
 12263 ;; Defined at:
 12264 ;;		line 3 in file "tmr.c"
 12265 ;; Parameters:    Size  Location     Type
 12266 ;;		None
 12267 ;; Auto vars:     Size  Location     Type
 12268 ;;		None
 12269 ;; Return value:  Size  Location     Type
 12270 ;;                  1    wreg      void 
 12271 ;; Registers used:
 12272 ;;		wreg, status,2
 12273 ;; Tracked objects:
 12274 ;;		On entry : 0/0
 12275 ;;		On exit  : 0/0
 12276 ;;		Unchanged: 0/0
 12277 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12278 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12279 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12280 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12281 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12282 ;;Total ram usage:        0 bytes
 12283 ;; Hardware stack levels used:    1
 12284 ;; This function calls:
 12285 ;;		Nothing
 12286 ;; This function is called by:
 12287 ;;		_SYSTEM_Initialize
 12288 ;; This function uses a non-reentrant model
 12289 ;;
 12290                           
 12291                           
 12292                           ;psect for function _TMR2_Initialize
 12293  12AC                     _TMR2_Initialize:	
 12294                           
 12295                           ;tmr.c: 5: T2CON = 0x00;
 12296                           
 12297                           ;incstack = 0
 12298                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
 12299  12AC  0025               	movlb	5	; select bank5
 12300  12AD  018E               	clrf	14	;volatile
 12301                           
 12302                           ;tmr.c: 7: T2CLKCON = 0x01;
 12303  12AE  3001               	movlw	1
 12304  12AF  0090               	movwf	16	;volatile
 12305                           
 12306                           ;tmr.c: 9: T2HLT = 0x00;
 12307  12B0  018F               	clrf	15	;volatile
 12308                           
 12309                           ;tmr.c: 11: T2RST = 0x00;
 12310  12B1  0191               	clrf	17	;volatile
 12311                           
 12312                           ;tmr.c: 13: T2PR = 0xFE;
 12313  12B2  30FE               	movlw	254
 12314  12B3  008D               	movwf	13	;volatile
 12315                           
 12316                           ;tmr.c: 18: T2TMR = 0x00;
 12317  12B4  018C               	clrf	12	;volatile
 12318                           
 12319                           ;tmr.c: 20: PIR4bits.TMR2IF = 0;
 12320  12B5  002E               	movlb	14	; select bank14
 12321  12B6  1090               	bcf	16,1	;volatile
 12322                           
 12323                           ;tmr.c: 22: T2CONbits.TMR2ON = 1;
 12324  12B7  0025               	movlb	5	; select bank5
 12325  12B8  178E               	bsf	14,7	;volatile
 12326  12B9  0008               	return
 12327  12BA                     __end_of_TMR2_Initialize:	
 12328                           
 12329                           	psect	text25
 12330  12E1                     __ptext25:	
 12331 ;; *************** function _PWM_Initialize *****************
 12332 ;; Defined at:
 12333 ;;		line 3 in file "pwm.c"
 12334 ;; Parameters:    Size  Location     Type
 12335 ;;		None
 12336 ;; Auto vars:     Size  Location     Type
 12337 ;;		None
 12338 ;; Return value:  Size  Location     Type
 12339 ;;                  1    wreg      void 
 12340 ;; Registers used:
 12341 ;;		wreg, status,2, status,0
 12342 ;; Tracked objects:
 12343 ;;		On entry : 0/0
 12344 ;;		On exit  : 0/0
 12345 ;;		Unchanged: 0/0
 12346 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12347 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12348 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12349 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12350 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12351 ;;Total ram usage:        0 bytes
 12352 ;; Hardware stack levels used:    1
 12353 ;; This function calls:
 12354 ;;		Nothing
 12355 ;; This function is called by:
 12356 ;;		_SYSTEM_Initialize
 12357 ;; This function uses a non-reentrant model
 12358 ;;
 12359                           
 12360                           
 12361                           ;psect for function _PWM_Initialize
 12362  12E1                     _PWM_Initialize:	
 12363                           
 12364                           ;pwm.c: 5: PWM6CON = 0x80;
 12365                           
 12366                           ;incstack = 0
 12367                           ; Regs used in _PWM_Initialize: [wreg+status,2+status,0]
 12368  12E1  3080               	movlw	128
 12369  12E2  0027               	movlb	7	; select bank7
 12370  12E3  008E               	movwf	14	;volatile
 12371                           
 12372                           ;pwm.c: 7: PWM6DCH = 0x00;
 12373  12E4  018D               	clrf	13	;volatile
 12374                           
 12375                           ;pwm.c: 9: PWM6DCL = 0x00;
 12376  12E5  018C               	clrf	12	;volatile
 12377                           
 12378                           ;pwm.c: 11: CCPTMRS1bits.P6TSEL = 0x01;
 12379  12E6  0024               	movlb	4	; select bank4
 12380  12E7  081F               	movf	31,w	;volatile
 12381  12E8  39F3               	andlw	-13
 12382  12E9  3804               	iorlw	4
 12383  12EA  009F               	movwf	31	;volatile
 12384                           
 12385                           ;pwm.c: 14: PWM7CON = 0x80;
 12386  12EB  3080               	movlw	128
 12387  12EC  0027               	movlb	7	; select bank7
 12388  12ED  0092               	movwf	18	;volatile
 12389                           
 12390                           ;pwm.c: 16: PWM7DCH = 0x00;
 12391  12EE  0191               	clrf	17	;volatile
 12392                           
 12393                           ;pwm.c: 18: PWM7DCL = 0x00;
 12394  12EF  0190               	clrf	16	;volatile
 12395                           
 12396                           ;pwm.c: 20: CCPTMRS1bits.P7TSEL = 0x02;
 12397  12F0  0024               	movlb	4	; select bank4
 12398  12F1  081F               	movf	31,w	;volatile
 12399  12F2  39CF               	andlw	-49
 12400  12F3  3820               	iorlw	32
 12401  12F4  009F               	movwf	31	;volatile
 12402  12F5  0008               	return
 12403  12F6                     __end_of_PWM_Initialize:	
 12404                           
 12405                           	psect	text26
 12406  1444                     __ptext26:	
 12407 ;; *************** function _PIN_MANAGER_Initialize *****************
 12408 ;; Defined at:
 12409 ;;		line 5 in file "pin_manager.c"
 12410 ;; Parameters:    Size  Location     Type
 12411 ;;		None
 12412 ;; Auto vars:     Size  Location     Type
 12413 ;;  state           1    0[COMMON] char 
 12414 ;; Return value:  Size  Location     Type
 12415 ;;                  1    wreg      void 
 12416 ;; Registers used:
 12417 ;;		wreg, status,2
 12418 ;; Tracked objects:
 12419 ;;		On entry : 0/0
 12420 ;;		On exit  : 0/0
 12421 ;;		Unchanged: 0/0
 12422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12423 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12424 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12425 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12426 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12427 ;;Total ram usage:        1 bytes
 12428 ;; Hardware stack levels used:    1
 12429 ;; This function calls:
 12430 ;;		Nothing
 12431 ;; This function is called by:
 12432 ;;		_SYSTEM_Initialize
 12433 ;; This function uses a non-reentrant model
 12434 ;;
 12435                           
 12436                           
 12437                           ;psect for function _PIN_MANAGER_Initialize
 12438  1444                     _PIN_MANAGER_Initialize:	
 12439                           
 12440                           ;pin_manager.c: 7: LATA = 0x20;
 12441                           
 12442                           ;incstack = 0
 12443                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
 12444  1444  3020               	movlw	32
 12445  1445  0020               	movlb	0	; select bank0
 12446  1446  0096               	movwf	22	;volatile
 12447                           
 12448                           ;pin_manager.c: 8: LATB = 0x00;
 12449  1447  0197               	clrf	23	;volatile
 12450                           
 12451                           ;pin_manager.c: 9: LATC = 0x00;
 12452  1448  0198               	clrf	24	;volatile
 12453                           
 12454                           ;pin_manager.c: 11: WPUA = 0x00;
 12455  1449  003E               	movlb	30	; select bank30
 12456  144A  01B9               	clrf	57	;volatile
 12457                           
 12458                           ;pin_manager.c: 12: WPUB = 0x00;
 12459  144B  01C4               	clrf	68	;volatile
 12460                           
 12461                           ;pin_manager.c: 13: WPUC = 0x00;
 12462  144C  01CF               	clrf	79	;volatile
 12463                           
 12464                           ;pin_manager.c: 14: WPUE = 0x8;
 12465  144D  3008               	movlw	8
 12466  144E  00E5               	movwf	101	;volatile
 12467                           
 12468                           ;pin_manager.c: 16: TRISA = 0x00;
 12469  144F  0020               	movlb	0	; select bank0
 12470  1450  0191               	clrf	17	;volatile
 12471                           
 12472                           ;pin_manager.c: 17: TRISB = 0x0E;
 12473  1451  300E               	movlw	14
 12474  1452  0092               	movwf	18	;volatile
 12475                           
 12476                           ;pin_manager.c: 18: TRISC = 0xFF;
 12477  1453  30FF               	movlw	255
 12478  1454  0093               	movwf	19	;volatile
 12479                           
 12480                           ;pin_manager.c: 20: ANSELA = 0x00;
 12481  1455  003E               	movlb	30	; select bank30
 12482  1456  01B8               	clrf	56	;volatile
 12483                           
 12484                           ;pin_manager.c: 21: ANSELB = 0x0A;
 12485  1457  300A               	movlw	10
 12486  1458  00C3               	movwf	67	;volatile
 12487                           
 12488                           ;pin_manager.c: 22: ANSELC = 0xFF;
 12489  1459  30FF               	movlw	255
 12490  145A  00CE               	movwf	78	;volatile
 12491                           
 12492                           ;pin_manager.c: 25: PIE0bits.IOCIE = 0;
 12493  145B  002E               	movlb	14	; select bank14
 12494  145C  1216               	bcf	22,4	;volatile
 12495                           
 12496                           ;pin_manager.c: 26: int8_t state = GIE;
 12497  145D  3000               	movlw	0
 12498  145E  1B8B               	btfsc	11,7	;volatile
 12499  145F  3001               	movlw	1
 12500  1460  00F0               	movwf	PIN_MANAGER_Initialize@state
 12501                           
 12502                           ;pin_manager.c: 27: GIE = 0;
 12503  1461  138B               	bcf	11,7	;volatile
 12504                           
 12505                           ;pin_manager.c: 28: PPSLOCK = 0x55;
 12506  1462  3055               	movlw	85
 12507  1463  003D               	movlb	29	; select bank29
 12508  1464  008F               	movwf	15	;volsfr
 12509                           
 12510                           ;pin_manager.c: 29: PPSLOCK = 0xAA;
 12511  1465  30AA               	movlw	170
 12512  1466  008F               	movwf	15	;volsfr
 12513                           
 12514                           ;pin_manager.c: 30: PPSLOCKbits.PPSLOCKED = 0x00;
 12515  1467  100F               	bcf	15,0	;volsfr
 12516                           
 12517                           ;pin_manager.c: 32: RA6PPS = 0x0E;
 12518  1468  300E               	movlw	14
 12519  1469  003E               	movlb	30	; select bank30
 12520  146A  0096               	movwf	22	;volatile
 12521                           
 12522                           ;pin_manager.c: 33: RA7PPS = 0x0F;
 12523  146B  300F               	movlw	15
 12524  146C  0097               	movwf	23	;volatile
 12525                           
 12526                           ;pin_manager.c: 34: RB0PPS = 0x09;
 12527  146D  3009               	movlw	9
 12528  146E  0098               	movwf	24	;volatile
 12529                           
 12530                           ;pin_manager.c: 35: PPSLOCK = 0x55;
 12531  146F  3055               	movlw	85
 12532  1470  003D               	movlb	29	; select bank29
 12533  1471  008F               	movwf	15	;volsfr
 12534                           
 12535                           ;pin_manager.c: 36: PPSLOCK = 0xAA;
 12536  1472  30AA               	movlw	170
 12537  1473  008F               	movwf	15	;volsfr
 12538                           
 12539                           ;pin_manager.c: 37: PPSLOCKbits.PPSLOCKED = 0x01;
 12540  1474  140F               	bsf	15,0	;volsfr
 12541                           
 12542                           ;pin_manager.c: 38: GIE = state;
 12543  1475  1C70               	btfss	PIN_MANAGER_Initialize@state,0
 12544  1476  2C79               	goto	u2650
 12545  1477  178B               	bsf	11,7	;volatile
 12546  1478  0008               	return
 12547  1479                     u2650:	
 12548  1479  138B               	bcf	11,7	;volatile
 12549  147A  0008               	return
 12550  147B                     __end_of_PIN_MANAGER_Initialize:	
 12551                           
 12552                           	psect	text27
 12553  1297                     __ptext27:	
 12554 ;; *************** function _OSCILLATOR_Initialize *****************
 12555 ;; Defined at:
 12556 ;;		line 89 in file "system.c"
 12557 ;; Parameters:    Size  Location     Type
 12558 ;;		None
 12559 ;; Auto vars:     Size  Location     Type
 12560 ;;		None
 12561 ;; Return value:  Size  Location     Type
 12562 ;;                  1    wreg      void 
 12563 ;; Registers used:
 12564 ;;		wreg, status,2
 12565 ;; Tracked objects:
 12566 ;;		On entry : 0/0
 12567 ;;		On exit  : 0/0
 12568 ;;		Unchanged: 0/0
 12569 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12570 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12571 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12572 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12573 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12574 ;;Total ram usage:        0 bytes
 12575 ;; Hardware stack levels used:    1
 12576 ;; This function calls:
 12577 ;;		Nothing
 12578 ;; This function is called by:
 12579 ;;		_SYSTEM_Initialize
 12580 ;; This function uses a non-reentrant model
 12581 ;;
 12582                           
 12583                           
 12584                           ;psect for function _OSCILLATOR_Initialize
 12585  1297                     _OSCILLATOR_Initialize:	
 12586                           
 12587                           ;system.c: 91: OSCCON1 = 0x60;
 12588                           
 12589                           ;incstack = 0
 12590                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 12591  1297  3060               	movlw	96
 12592  1298  0031               	movlb	17	; select bank17
 12593  1299  008D               	movwf	13	;volatile
 12594                           
 12595                           ;system.c: 92: OSCCON3 = 0x00;
 12596  129A  018F               	clrf	15	;volatile
 12597                           
 12598                           ;system.c: 93: OSCEN = 0x00;
 12599  129B  0191               	clrf	17	;volatile
 12600                           
 12601                           ;system.c: 94: OSCFRQ = 0x06;
 12602  129C  3006               	movlw	6
 12603  129D  0093               	movwf	19	;volatile
 12604                           
 12605                           ;system.c: 95: OSCTUNE = 0x00;
 12606  129E  0192               	clrf	18	;volatile
 12607  129F  0008               	return
 12608  12A0                     __end_of_OSCILLATOR_Initialize:	
 12609                           
 12610                           	psect	text28
 12611  14B4                     __ptext28:	
 12612 ;; *************** function _LCDInit *****************
 12613 ;; Defined at:
 12614 ;;		line 247 in file "lcd.c"
 12615 ;; Parameters:    Size  Location     Type
 12616 ;;		None
 12617 ;; Auto vars:     Size  Location     Type
 12618 ;;		None
 12619 ;; Return value:  Size  Location     Type
 12620 ;;                  1    wreg      void 
 12621 ;; Registers used:
 12622 ;;		wreg, status,2, status,0, pclath, cstack
 12623 ;; Tracked objects:
 12624 ;;		On entry : 0/0
 12625 ;;		On exit  : 0/0
 12626 ;;		Unchanged: 0/0
 12627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12628 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12629 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12630 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12631 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12632 ;;Total ram usage:        1 bytes
 12633 ;; Hardware stack levels used:    1
 12634 ;; Hardware stack levels required when called:    1
 12635 ;; This function calls:
 12636 ;;		_LCDWrite
 12637 ;; This function is called by:
 12638 ;;		_SYSTEM_Initialize
 12639 ;;		_main
 12640 ;; This function uses a non-reentrant model
 12641 ;;
 12642                           
 12643                           
 12644                           ;psect for function _LCDInit
 12645  14B4                     _LCDInit:	
 12646                           
 12647                           ;lcd.c: 249: TRISAbits.TRISA0 = 0;
 12648                           
 12649                           ;incstack = 0
 12650                           ; Regs used in _LCDInit: [wreg+status,2+status,0+pclath+cstack]
 12651  14B4  0020               	movlb	0	; select bank0
 12652  14B5  1011               	bcf	17,0	;volatile
 12653                           
 12654                           ;lcd.c: 250: TRISAbits.TRISA1 = 0;
 12655  14B6  1091               	bcf	17,1	;volatile
 12656                           
 12657                           ;lcd.c: 251: TRISAbits.TRISA2 = 0;
 12658  14B7  1111               	bcf	17,2	;volatile
 12659                           
 12660                           ;lcd.c: 252: TRISAbits.TRISA3 = 0;
 12661  14B8  1191               	bcf	17,3	;volatile
 12662                           
 12663                           ;lcd.c: 253: TRISAbits.TRISA4 = 0;
 12664  14B9  1211               	bcf	17,4	;volatile
 12665                           
 12666                           ;lcd.c: 254: LATAbits.LATA3 = 0;
 12667  14BA  1196               	bcf	22,3	;volatile
 12668                           
 12669                           ;lcd.c: 255: LATAbits.LATA4 = 0;
 12670  14BB  1216               	bcf	22,4	;volatile
 12671                           
 12672                           ;lcd.c: 256: LATAbits.LATA2 = 0;
 12673  14BC  1116               	bcf	22,2	;volatile
 12674                           
 12675                           ;lcd.c: 257: LATAbits.LATA0 = 0;
 12676  14BD  1016               	bcf	22,0	;volatile
 12677                           
 12678                           ;lcd.c: 259: LATAbits.LATA0 = 1;
 12679  14BE  1416               	bsf	22,0	;volatile
 12680                           
 12681                           ;lcd.c: 261: LCDWrite(0, 0x21);
 12682  14BF  3021               	movlw	33
 12683  14C0  00F5               	movwf	??_LCDInit
 12684  14C1  0875               	movf	??_LCDInit,w
 12685  14C2  00F0               	movwf	LCDWrite@data
 12686  14C3  3000               	movlw	0
 12687  14C4  3193  2399  3194   	fcall	_LCDWrite
 12688                           
 12689                           ;lcd.c: 269: LCDWrite(0, 0XB9);
 12690  14C7  30B9               	movlw	185
 12691  14C8  00F5               	movwf	??_LCDInit
 12692  14C9  0875               	movf	??_LCDInit,w
 12693  14CA  00F0               	movwf	LCDWrite@data
 12694  14CB  3000               	movlw	0
 12695  14CC  3193  2399  3194   	fcall	_LCDWrite
 12696                           
 12697                           ;lcd.c: 271: LCDWrite(0, 0x04);
 12698  14CF  3004               	movlw	4
 12699  14D0  00F5               	movwf	??_LCDInit
 12700  14D1  0875               	movf	??_LCDInit,w
 12701  14D2  00F0               	movwf	LCDWrite@data
 12702  14D3  3000               	movlw	0
 12703  14D4  3193  2399  3194   	fcall	_LCDWrite
 12704                           
 12705                           ;lcd.c: 273: LCDWrite(0, 0x14);
 12706  14D7  3014               	movlw	20
 12707  14D8  00F5               	movwf	??_LCDInit
 12708  14D9  0875               	movf	??_LCDInit,w
 12709  14DA  00F0               	movwf	LCDWrite@data
 12710  14DB  3000               	movlw	0
 12711  14DC  3193  2399  3194   	fcall	_LCDWrite
 12712                           
 12713                           ;lcd.c: 275: LCDWrite(0, 0x20);
 12714  14DF  3020               	movlw	32
 12715  14E0  00F5               	movwf	??_LCDInit
 12716  14E1  0875               	movf	??_LCDInit,w
 12717  14E2  00F0               	movwf	LCDWrite@data
 12718  14E3  3000               	movlw	0
 12719  14E4  3193  2399  3194   	fcall	_LCDWrite
 12720                           
 12721                           ;lcd.c: 277: LCDWrite(0, 0x0C);
 12722  14E7  300C               	movlw	12
 12723  14E8  00F5               	movwf	??_LCDInit
 12724  14E9  0875               	movf	??_LCDInit,w
 12725  14EA  00F0               	movwf	LCDWrite@data
 12726  14EB  3000               	movlw	0
 12727  14EC  3193  2399         	fcall	_LCDWrite
 12728  14EE  0008               	return
 12729  14EF                     __end_of_LCDInit:	
 12730                           
 12731                           	psect	text29
 12732  13BE                     __ptext29:	
 12733 ;; *************** function _LCDClear *****************
 12734 ;; Defined at:
 12735 ;;		line 182 in file "lcd.c"
 12736 ;; Parameters:    Size  Location     Type
 12737 ;;		None
 12738 ;; Auto vars:     Size  Location     Type
 12739 ;;  index           2    9[COMMON] int 
 12740 ;; Return value:  Size  Location     Type
 12741 ;;                  1    wreg      void 
 12742 ;; Registers used:
 12743 ;;		wreg, status,2, status,0, pclath, cstack
 12744 ;; Tracked objects:
 12745 ;;		On entry : 0/0
 12746 ;;		On exit  : 0/0
 12747 ;;		Unchanged: 0/0
 12748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12749 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12750 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12751 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12752 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12753 ;;Total ram usage:        3 bytes
 12754 ;; Hardware stack levels used:    1
 12755 ;; Hardware stack levels required when called:    2
 12756 ;; This function calls:
 12757 ;;		_LCDWrite
 12758 ;;		_gotoXY
 12759 ;; This function is called by:
 12760 ;;		_SYSTEM_Initialize
 12761 ;;		_main
 12762 ;; This function uses a non-reentrant model
 12763 ;;
 12764                           
 12765                           
 12766                           ;psect for function _LCDClear
 12767  13BE                     _LCDClear:	
 12768                           
 12769                           ;lcd.c: 184: int index;
 12770                           ;lcd.c: 185: for (index = 0 ; index < (84 * 48 / 8) ; index++)
 12771                           
 12772                           ;incstack = 0
 12773                           ; Regs used in _LCDClear: [wreg+status,2+status,0+pclath+cstack]
 12774  13BE  01F9               	clrf	LCDClear@index
 12775  13BF  01FA               	clrf	LCDClear@index+1
 12776  13C0  087A               	movf	LCDClear@index+1,w
 12777  13C1  3A80               	xorlw	128
 12778  13C2  00F8               	movwf	??_LCDClear
 12779  13C3  3081               	movlw	129
 12780  13C4  0278               	subwf	??_LCDClear,w
 12781  13C5  1D03               	skipz
 12782  13C6  2BC9               	goto	u2635
 12783  13C7  30F8               	movlw	248
 12784  13C8  0279               	subwf	LCDClear@index,w
 12785  13C9                     u2635:	
 12786  13C9  1803               	btfsc	3,0
 12787  13CA  2BDF               	goto	l2528
 12788  13CB                     l2522:	
 12789                           
 12790                           ;lcd.c: 186: LCDWrite(1, 0x00);
 12791  13CB  01F0               	clrf	LCDWrite@data
 12792  13CC  3001               	movlw	1
 12793  13CD  3193  2399  3193   	fcall	_LCDWrite
 12794  13D0  3001               	movlw	1
 12795  13D1  07F9               	addwf	LCDClear@index,f
 12796  13D2  3000               	movlw	0
 12797  13D3  3DFA               	addwfc	LCDClear@index+1,f
 12798  13D4  087A               	movf	LCDClear@index+1,w
 12799  13D5  3A80               	xorlw	128
 12800  13D6  00F8               	movwf	??_LCDClear
 12801  13D7  3081               	movlw	129
 12802  13D8  0278               	subwf	??_LCDClear,w
 12803  13D9  1D03               	skipz
 12804  13DA  2BDD               	goto	u2645
 12805  13DB  30F8               	movlw	248
 12806  13DC  0279               	subwf	LCDClear@index,w
 12807  13DD                     u2645:	
 12808  13DD  1C03               	skipc
 12809  13DE  2BCB               	goto	l2522
 12810  13DF                     l2528:	
 12811                           
 12812                           ;lcd.c: 187: gotoXY(0, 0);
 12813  13DF  01F5               	clrf	gotoXY@y
 12814  13E0  3000               	movlw	0
 12815  13E1  3192  22BA         	fcall	_gotoXY
 12816  13E3  0008               	return
 12817  13E4                     __end_of_LCDClear:	
 12818                           
 12819                           	psect	text30
 12820  1410                     __ptext30:	
 12821 ;; *************** function _Init_Battery_State_Machine *****************
 12822 ;; Defined at:
 12823 ;;		line 20 in file "battery_charger.c"
 12824 ;; Parameters:    Size  Location     Type
 12825 ;;  z               1    wreg     unsigned char 
 12826 ;; Auto vars:     Size  Location     Type
 12827 ;;  z               1    1[COMMON] unsigned char 
 12828 ;; Return value:  Size  Location     Type
 12829 ;;                  1    wreg      void 
 12830 ;; Registers used:
 12831 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12832 ;; Tracked objects:
 12833 ;;		On entry : 0/0
 12834 ;;		On exit  : 0/0
 12835 ;;		Unchanged: 0/0
 12836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12837 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12838 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12839 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12840 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12841 ;;Total ram usage:        2 bytes
 12842 ;; Hardware stack levels used:    1
 12843 ;; This function calls:
 12844 ;;		Nothing
 12845 ;; This function is called by:
 12846 ;;		_SYSTEM_Initialize
 12847 ;; This function uses a non-reentrant model
 12848 ;;
 12849                           
 12850                           
 12851                           ;psect for function _Init_Battery_State_Machine
 12852  1410                     _Init_Battery_State_Machine:	
 12853                           
 12854                           ;incstack = 0
 12855                           ; Regs used in _Init_Battery_State_Machine: [wreg+fsr1l+fsr1h+status,2+status,0]
 12856                           ;Init_Battery_State_Machine@z stored from wreg
 12857  1410  00F1               	movwf	Init_Battery_State_Machine@z
 12858                           
 12859                           ;battery_charger.c: 22: batteryState[z] = PRECHARGE;
 12860  1411  3003               	movlw	3
 12861  1412  00F0               	movwf	??_Init_Battery_State_Machine
 12862  1413  0871               	movf	Init_Battery_State_Machine@z,w
 12863  1414  3EC8               	addlw	(low (_batteryState| 0))& (0+255)
 12864  1415  0086               	movwf	6
 12865  1416  0187               	clrf	7
 12866  1417  0870               	movf	??_Init_Battery_State_Machine,w
 12867  1418  0081               	movwf	1
 12868                           
 12869                           ;battery_charger.c: 23: stateCounter[z] = 3;
 12870  1419  3571               	lslf	Init_Battery_State_Machine@z,w
 12871  141A  3E41               	addlw	(low (_stateCounter| (0+256)))& (0+255)
 12872  141B  0086               	movwf	6
 12873  141C  3001               	movlw	1	; select bank2/3
 12874  141D  0087               	movwf	7
 12875  141E  3003               	movlw	3
 12876  141F  3FC0               	movwi [0]fsr1
 12877  1420  3000               	movlw	0
 12878  1421  3FC1               	movwi [1]fsr1
 12879                           
 12880                           ;battery_charger.c: 25: Iref[z]=10;
 12881  1422  3571               	lslf	Init_Battery_State_Machine@z,w
 12882  1423  3EBC               	addlw	(low (_Iref| 0))& (0+255)
 12883  1424  0086               	movwf	6
 12884  1425  0187               	clrf	7
 12885  1426  300A               	movlw	10
 12886  1427  3FC0               	movwi [0]fsr1
 12887  1428  3000               	movlw	0
 12888  1429  3FC1               	movwi [1]fsr1
 12889                           
 12890                           ;battery_charger.c: 26: Vref[z]=1425;
 12891  142A  3571               	lslf	Init_Battery_State_Machine@z,w
 12892  142B  3EB8               	addlw	(low (_Vref| 0))& (0+255)
 12893  142C  0086               	movwf	6
 12894  142D  0187               	clrf	7
 12895  142E  3091               	movlw	145
 12896  142F  3FC0               	movwi [0]fsr1
 12897  1430  3005               	movlw	5
 12898  1431  3FC1               	movwi [1]fsr1
 12899                           
 12900                           ;battery_charger.c: 28: Imin[z]=17;
 12901  1432  3571               	lslf	Init_Battery_State_Machine@z,w
 12902  1433  3E3D               	addlw	(low (_Imin| (0+256)))& (0+255)
 12903  1434  0086               	movwf	6
 12904  1435  3001               	movlw	1	; select bank2/3
 12905  1436  0087               	movwf	7
 12906  1437  3011               	movlw	17
 12907  1438  3FC0               	movwi [0]fsr1
 12908  1439  3000               	movlw	0
 12909  143A  3FC1               	movwi [1]fsr1
 12910                           
 12911                           ;battery_charger.c: 29: IminCount[z] = 100;
 12912  143B  3571               	lslf	Init_Battery_State_Machine@z,w
 12913  143C  3EC0               	addlw	(low (_IminCount| 0))& (0+255)
 12914  143D  0086               	movwf	6
 12915  143E  0187               	clrf	7
 12916  143F  3064               	movlw	100
 12917  1440  3FC0               	movwi [0]fsr1
 12918  1441  3000               	movlw	0
 12919  1442  3FC1               	movwi [1]fsr1
 12920  1443  0008               	return
 12921  1444                     __end_of_Init_Battery_State_Machine:	
 12922                           
 12923                           	psect	text31
 12924  135A                     __ptext31:	
 12925 ;; *************** function _ADC_Initialize *****************
 12926 ;; Defined at:
 12927 ;;		line 111 in file "adc.c"
 12928 ;; Parameters:    Size  Location     Type
 12929 ;;		None
 12930 ;; Auto vars:     Size  Location     Type
 12931 ;;		None
 12932 ;; Return value:  Size  Location     Type
 12933 ;;                  1    wreg      void 
 12934 ;; Registers used:
 12935 ;;		wreg, status,2
 12936 ;; Tracked objects:
 12937 ;;		On entry : 0/0
 12938 ;;		On exit  : 0/0
 12939 ;;		Unchanged: 0/0
 12940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12941 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12942 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12943 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12944 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12945 ;;Total ram usage:        0 bytes
 12946 ;; Hardware stack levels used:    1
 12947 ;; This function calls:
 12948 ;;		Nothing
 12949 ;; This function is called by:
 12950 ;;		_SYSTEM_Initialize
 12951 ;; This function uses a non-reentrant model
 12952 ;;
 12953                           
 12954                           
 12955                           ;psect for function _ADC_Initialize
 12956  135A                     _ADC_Initialize:	
 12957                           
 12958                           ;adc.c: 113: ADCON1 = 0x00;
 12959                           
 12960                           ;incstack = 0
 12961                           ; Regs used in _ADC_Initialize: [wreg+status,2]
 12962  135A  0021               	movlb	1	; select bank1
 12963  135B  0194               	clrf	20	;volatile
 12964                           
 12965                           ;adc.c: 115: ADCON2 = 0x00;
 12966  135C  0195               	clrf	21	;volatile
 12967                           
 12968                           ;adc.c: 117: ADCON3 = 0x00;
 12969  135D  0196               	clrf	22	;volatile
 12970                           
 12971                           ;adc.c: 119: ADACT = 0x00;
 12972  135E  0199               	clrf	25	;volatile
 12973                           
 12974                           ;adc.c: 121: ADSTAT = 0x00;
 12975  135F  0197               	clrf	23	;volatile
 12976                           
 12977                           ;adc.c: 123: FVRCON = 0b11000011;
 12978  1360  30C3               	movlw	195
 12979  1361  0032               	movlb	18	; select bank18
 12980  1362  008C               	movwf	12	;volatile
 12981                           
 12982                           ;adc.c: 124: ADCLK = 0x3F;
 12983  1363  303F               	movlw	63
 12984  1364  0021               	movlb	1	; select bank1
 12985  1365  0098               	movwf	24	;volatile
 12986                           
 12987                           ;adc.c: 131: ADREF = 0x03;
 12988  1366  3003               	movlw	3
 12989  1367  009A               	movwf	26	;volatile
 12990                           
 12991                           ;adc.c: 134: ADCAP = 0x00;
 12992  1368  019B               	clrf	27	;volatile
 12993                           
 12994                           ;adc.c: 137: ADPRE = 0x07;
 12995  1369  3007               	movlw	7
 12996  136A  009C               	movwf	28	;volatile
 12997                           
 12998                           ;adc.c: 139: ADACQ = 0x00;
 12999  136B  019D               	clrf	29	;volatile
 13000                           
 13001                           ;adc.c: 141: ADPCH = 0x00;
 13002  136C  019E               	clrf	30	;volatile
 13003                           
 13004                           ;adc.c: 143: ADRPT = 0x00;
 13005  136D  0022               	movlb	2	; select bank2
 13006  136E  018D               	clrf	13	;volatile
 13007                           
 13008                           ;adc.c: 145: ADLTHL = 0x00;
 13009  136F  018E               	clrf	14	;volatile
 13010                           
 13011                           ;adc.c: 147: ADLTHH = 0x00;
 13012  1370  018F               	clrf	15	;volatile
 13013                           
 13014                           ;adc.c: 149: ADUTHL = 0x00;
 13015  1371  0190               	clrf	16	;volatile
 13016                           
 13017                           ;adc.c: 151: ADUTHH = 0x00;
 13018  1372  0191               	clrf	17	;volatile
 13019                           
 13020                           ;adc.c: 153: ADSTPTL = 0x00;
 13021  1373  0192               	clrf	18	;volatile
 13022                           
 13023                           ;adc.c: 155: ADSTPTH = 0x00;
 13024  1374  0193               	clrf	19	;volatile
 13025                           
 13026                           ;adc.c: 157: ADCON0 = 0x84;
 13027  1375  3084               	movlw	132
 13028  1376  0021               	movlb	1	; select bank1
 13029  1377  0093               	movwf	19	;volatile
 13030  1378  0008               	return
 13031  1379                     __end_of_ADC_Initialize:	
 13032                           
 13033                           	psect	text32
 13034  0801                     __ptext32:	
 13035 ;; *************** function _PWM7_LoadDutyValue *****************
 13036 ;; Defined at:
 13037 ;;		line 37 in file "pwm.c"
 13038 ;; Parameters:    Size  Location     Type
 13039 ;;  dutyCycle7      2    0[COMMON] unsigned int 
 13040 ;; Auto vars:     Size  Location     Type
 13041 ;;		None
 13042 ;; Return value:  Size  Location     Type
 13043 ;;                  1    wreg      void 
 13044 ;; Registers used:
 13045 ;;		wreg, status,2, status,0
 13046 ;; Tracked objects:
 13047 ;;		On entry : 0/0
 13048 ;;		On exit  : 0/0
 13049 ;;		Unchanged: 0/0
 13050 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13051 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13052 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13053 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13054 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13055 ;;Total ram usage:        4 bytes
 13056 ;; Hardware stack levels used:    1
 13057 ;; This function calls:
 13058 ;;		Nothing
 13059 ;; This function is called by:
 13060 ;;		_main
 13061 ;; This function uses a non-reentrant model
 13062 ;;
 13063                           
 13064                           
 13065                           ;psect for function _PWM7_LoadDutyValue
 13066  0801                     _PWM7_LoadDutyValue:	
 13067                           
 13068                           ;pwm.c: 39: PWM7DCH = (dutyCycle7 & 0x03FC)>>2;
 13069                           
 13070                           ;incstack = 0
 13071                           ; Regs used in _PWM7_LoadDutyValue: [wreg+status,2+status,0]
 13072  0801  0871               	movf	PWM7_LoadDutyValue@dutyCycle7+1,w
 13073  0802  00F3               	movwf	??_PWM7_LoadDutyValue+1
 13074  0803  0870               	movf	PWM7_LoadDutyValue@dutyCycle7,w
 13075  0804  00F2               	movwf	??_PWM7_LoadDutyValue
 13076  0805  36F3               	lsrf	??_PWM7_LoadDutyValue+1,f
 13077  0806  0CF2               	rrf	??_PWM7_LoadDutyValue,f
 13078  0807  36F3               	lsrf	??_PWM7_LoadDutyValue+1,f
 13079  0808  0CF2               	rrf	??_PWM7_LoadDutyValue,f
 13080  0809  0872               	movf	??_PWM7_LoadDutyValue,w
 13081  080A  0027               	movlb	7	; select bank7
 13082  080B  0091               	movwf	17	;volatile
 13083                           
 13084                           ;pwm.c: 41: PWM7DCL = (dutyCycle7 & 0x0003)<<6;
 13085  080C  0870               	movf	PWM7_LoadDutyValue@dutyCycle7,w
 13086  080D  3903               	andlw	3
 13087  080E  00F2               	movwf	??_PWM7_LoadDutyValue
 13088  080F  3005               	movlw	5
 13089  0810                     u3405:	
 13090  0810  35F2               	lslf	??_PWM7_LoadDutyValue,f
 13091  0811  3EFF               	addlw	-1
 13092  0812  1D03               	skipz
 13093  0813  2810               	goto	u3405
 13094  0814  3572               	lslf	??_PWM7_LoadDutyValue,w
 13095  0815  0090               	movwf	16	;volatile
 13096  0816  0008               	return
 13097  0817                     __end_of_PWM7_LoadDutyValue:	
 13098                           
 13099                           	psect	text33
 13100  130B                     __ptext33:	
 13101 ;; *************** function _PWM6_LoadDutyValue *****************
 13102 ;; Defined at:
 13103 ;;		line 30 in file "pwm.c"
 13104 ;; Parameters:    Size  Location     Type
 13105 ;;  dutyCycle6      2    0[COMMON] unsigned int 
 13106 ;; Auto vars:     Size  Location     Type
 13107 ;;		None
 13108 ;; Return value:  Size  Location     Type
 13109 ;;                  1    wreg      void 
 13110 ;; Registers used:
 13111 ;;		wreg, status,2, status,0
 13112 ;; Tracked objects:
 13113 ;;		On entry : 0/0
 13114 ;;		On exit  : 0/0
 13115 ;;		Unchanged: 0/0
 13116 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13117 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13118 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13119 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13120 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13121 ;;Total ram usage:        4 bytes
 13122 ;; Hardware stack levels used:    1
 13123 ;; This function calls:
 13124 ;;		Nothing
 13125 ;; This function is called by:
 13126 ;;		_main
 13127 ;; This function uses a non-reentrant model
 13128 ;;
 13129                           
 13130                           
 13131                           ;psect for function _PWM6_LoadDutyValue
 13132  130B                     _PWM6_LoadDutyValue:	
 13133                           
 13134                           ;pwm.c: 32: PWM6DCH = (dutyCycle6 & 0x03FC)>>2;
 13135                           
 13136                           ;incstack = 0
 13137                           ; Regs used in _PWM6_LoadDutyValue: [wreg+status,2+status,0]
 13138  130B  0871               	movf	PWM6_LoadDutyValue@dutyCycle6+1,w
 13139  130C  00F3               	movwf	??_PWM6_LoadDutyValue+1
 13140  130D  0870               	movf	PWM6_LoadDutyValue@dutyCycle6,w
 13141  130E  00F2               	movwf	??_PWM6_LoadDutyValue
 13142  130F  36F3               	lsrf	??_PWM6_LoadDutyValue+1,f
 13143  1310  0CF2               	rrf	??_PWM6_LoadDutyValue,f
 13144  1311  36F3               	lsrf	??_PWM6_LoadDutyValue+1,f
 13145  1312  0CF2               	rrf	??_PWM6_LoadDutyValue,f
 13146  1313  0872               	movf	??_PWM6_LoadDutyValue,w
 13147  1314  0027               	movlb	7	; select bank7
 13148  1315  008D               	movwf	13	;volatile
 13149                           
 13150                           ;pwm.c: 34: PWM6DCL = (dutyCycle6 & 0x0003)<<6;
 13151  1316  0870               	movf	PWM6_LoadDutyValue@dutyCycle6,w
 13152  1317  3903               	andlw	3
 13153  1318  00F2               	movwf	??_PWM6_LoadDutyValue
 13154  1319  3005               	movlw	5
 13155  131A                     u3395:	
 13156  131A  35F2               	lslf	??_PWM6_LoadDutyValue,f
 13157  131B  3EFF               	addlw	-1
 13158  131C  1D03               	skipz
 13159  131D  2B1A               	goto	u3395
 13160  131E  3572               	lslf	??_PWM6_LoadDutyValue,w
 13161  131F  008C               	movwf	12	;volatile
 13162  1320  0008               	return
 13163  1321                     __end_of_PWM6_LoadDutyValue:	
 13164                           
 13165                           	psect	text34
 13166  0B0A                     __ptext34:	
 13167 ;; *************** function _LCDWriteInt *****************
 13168 ;; Defined at:
 13169 ;;		line 190 in file "lcd.c"
 13170 ;; Parameters:    Size  Location     Type
 13171 ;;  value           2    0[BANK0 ] int 
 13172 ;;  fieldLength     1    2[BANK0 ] char 
 13173 ;;  numPlaces       1    3[BANK0 ] unsigned char 
 13174 ;;  sign            1    4[BANK0 ] unsigned char 
 13175 ;; Auto vars:     Size  Location     Type
 13176 ;;  str             5    9[BANK0 ] unsigned char [5]
 13177 ;;  i               1   15[BANK0 ] unsigned char 
 13178 ;;  j               1   14[BANK0 ] unsigned char 
 13179 ;; Return value:  Size  Location     Type
 13180 ;;                  1    wreg      void 
 13181 ;; Registers used:
 13182 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13183 ;; Tracked objects:
 13184 ;;		On entry : 0/0
 13185 ;;		On exit  : 0/0
 13186 ;;		Unchanged: 0/0
 13187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13188 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13189 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13190 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13191 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13192 ;;Total ram usage:       16 bytes
 13193 ;; Hardware stack levels used:    1
 13194 ;; Hardware stack levels required when called:    2
 13195 ;; This function calls:
 13196 ;;		_LCDWriteCharacter
 13197 ;;		___awdiv
 13198 ;;		___lwmod
 13199 ;; This function is called by:
 13200 ;;		_main
 13201 ;; This function uses a non-reentrant model
 13202 ;;
 13203                           
 13204                           
 13205                           ;psect for function _LCDWriteInt
 13206  0B0A                     _LCDWriteInt:	
 13207                           
 13208                           ;lcd.c: 192: uint8_t str[5]={0,0,0,0,0};
 13209                           
 13210                           ;incstack = 0
 13211                           ; Regs used in _LCDWriteInt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13212  0B0A  3038               	movlw	low LCDWriteInt@F14387
 13213  0B0B  0086               	movwf	6
 13214  0B0C  3001               	movlw	high LCDWriteInt@F14387
 13215  0B0D  0087               	movwf	7
 13216  0B0E  3029               	movlw	low LCDWriteInt@str
 13217  0B0F  0084               	movwf	4
 13218  0B10  3000               	movlw	high LCDWriteInt@str
 13219  0B11  0085               	movwf	5
 13220  0B12  3005               	movlw	5
 13221  0B13  0020               	movlb	0	; select bank0
 13222  0B14  00A5               	movwf	??_LCDWriteInt
 13223  0B15                     u3300:	
 13224  0B15  0016               	moviw fsr1++
 13225  0B16  001A               	movwi fsr0++
 13226  0B17  0BA5               	decfsz	??_LCDWriteInt,f
 13227  0B18  2B15               	goto	u3300
 13228                           
 13229                           ;lcd.c: 193: uint8_t i=4,j=0;
 13230  0B19  3004               	movlw	4
 13231  0B1A  00A5               	movwf	??_LCDWriteInt
 13232  0B1B  0825               	movf	??_LCDWriteInt,w
 13233  0B1C  00AF               	movwf	LCDWriteInt@i
 13234  0B1D  01AE               	clrf	LCDWriteInt@j
 13235                           
 13236                           ;lcd.c: 195: if(value<0)
 13237  0B1E  1FA1               	btfss	LCDWriteInt@value+1,7
 13238  0B1F  2B2B               	goto	l2918
 13239                           
 13240                           ;lcd.c: 196: {
 13241                           ;lcd.c: 197: LCDWriteCharacter('-');
 13242  0B20  302D               	movlw	45
 13243  0B21  3196  26CA  318B   	fcall	_LCDWriteCharacter
 13244                           
 13245                           ;lcd.c: 198: value=value*-1;
 13246  0B24  0020               	movlb	0	; select bank0
 13247  0B25  09A0               	comf	LCDWriteInt@value,f
 13248  0B26  09A1               	comf	LCDWriteInt@value+1,f
 13249  0B27  0AA0               	incf	LCDWriteInt@value,f
 13250  0B28  1903               	skipnz
 13251  0B29  0AA1               	incf	LCDWriteInt@value+1,f
 13252                           
 13253                           ;lcd.c: 199: }
 13254  0B2A  2B32               	goto	l2928
 13255  0B2B                     l2918:	
 13256                           
 13257                           ;lcd.c: 201: else
 13258                           ;lcd.c: 202: {
 13259                           ;lcd.c: 203: if(sign == 1)
 13260  0B2B  0324               	decf	LCDWriteInt@sign,w
 13261  0B2C  1D03               	btfss	3,2
 13262  0B2D  2B32               	goto	l2928
 13263                           
 13264                           ;lcd.c: 204: {
 13265                           ;lcd.c: 205: LCDWriteCharacter('+');
 13266  0B2E  302B               	movlw	43
 13267  0B2F  3196  26CA  318B   	fcall	_LCDWriteCharacter
 13268  0B32                     l2928:	
 13269                           ;lcd.c: 206: }
 13270                           ;lcd.c: 207: }
 13271                           ;lcd.c: 209: while(value)
 13272                           
 13273  0B32  0020               	movlb	0	; select bank0
 13274  0B33  0820               	movf	LCDWriteInt@value,w
 13275  0B34  0421               	iorwf	LCDWriteInt@value+1,w
 13276  0B35  1903               	btfsc	3,2
 13277  0B36  2B5F               	goto	l2930
 13278                           
 13279                           ;lcd.c: 210: {
 13280                           ;lcd.c: 211: str[i]=(uint16_t)value%10;
 13281  0B37  300A               	movlw	10
 13282  0B38  00F0               	movwf	___lwmod@divisor
 13283  0B39  3000               	movlw	0
 13284  0B3A  00F1               	movwf	___lwmod@divisor+1
 13285  0B3B  0020               	movlb	0	; select bank0
 13286  0B3C  0821               	movf	LCDWriteInt@value+1,w
 13287  0B3D  00F3               	movwf	___lwmod@dividend+1
 13288  0B3E  0820               	movf	LCDWriteInt@value,w
 13289  0B3F  00F2               	movwf	___lwmod@dividend
 13290  0B40  3193  23E4  318B   	fcall	___lwmod
 13291  0B43  0870               	movf	?___lwmod,w
 13292  0B44  0020               	movlb	0	; select bank0
 13293  0B45  00A5               	movwf	??_LCDWriteInt
 13294  0B46  082F               	movf	LCDWriteInt@i,w
 13295  0B47  3E29               	addlw	(low (LCDWriteInt@str| 0))& (0+255)
 13296  0B48  0086               	movwf	6
 13297  0B49  0187               	clrf	7
 13298  0B4A  0825               	movf	??_LCDWriteInt,w
 13299  0B4B  0081               	movwf	1
 13300                           
 13301                           ;lcd.c: 212: value=value/10;
 13302  0B4C  300A               	movlw	10
 13303  0B4D  00F0               	movwf	___awdiv@divisor
 13304  0B4E  3000               	movlw	0
 13305  0B4F  00F1               	movwf	___awdiv@divisor+1
 13306  0B50  0821               	movf	LCDWriteInt@value+1,w
 13307  0B51  00F3               	movwf	___awdiv@dividend+1
 13308  0B52  0820               	movf	LCDWriteInt@value,w
 13309  0B53  00F2               	movwf	___awdiv@dividend
 13310  0B54  3196  2679  318B   	fcall	___awdiv
 13311  0B57  0871               	movf	?___awdiv+1,w
 13312  0B58  0020               	movlb	0	; select bank0
 13313  0B59  00A1               	movwf	LCDWriteInt@value+1
 13314  0B5A  0870               	movf	?___awdiv,w
 13315  0B5B  00A0               	movwf	LCDWriteInt@value
 13316                           
 13317                           ;lcd.c: 213: i--;
 13318  0B5C  3001               	movlw	1
 13319  0B5D  02AF               	subwf	LCDWriteInt@i,f
 13320  0B5E  2B32               	goto	l2928
 13321  0B5F                     l2930:	
 13322                           
 13323                           ;lcd.c: 214: }
 13324                           ;lcd.c: 215: if(fieldLength==-1)
 13325  0B5F  0A22               	incf	LCDWriteInt@fieldLength,w
 13326  0B60  1903               	btfsc	3,2
 13327  0B61  2B67               	goto	l2936
 13328  0B62  2B6F               	goto	l2938
 13329  0B63                     l2934:	
 13330                           ;lcd.c: 216: {
 13331                           ;lcd.c: 217: while(str[j]==0)
 13332                           
 13333                           
 13334                           ;lcd.c: 218: {
 13335                           ;lcd.c: 219: j++;
 13336  0B63  3001               	movlw	1
 13337  0B64  00A5               	movwf	??_LCDWriteInt
 13338  0B65  0825               	movf	??_LCDWriteInt,w
 13339  0B66  07AE               	addwf	LCDWriteInt@j,f
 13340  0B67                     l2936:	
 13341  0B67  082E               	movf	LCDWriteInt@j,w
 13342  0B68  3E29               	addlw	(low (LCDWriteInt@str| 0))& (0+255)
 13343  0B69  0086               	movwf	6
 13344  0B6A  0187               	clrf	7
 13345  0B6B  0801               	movf	1,w
 13346  0B6C  1D03               	btfss	3,2
 13347  0B6D  2B75               	goto	l2940
 13348  0B6E  2B63               	goto	l2934
 13349  0B6F                     l2938:	
 13350                           ;lcd.c: 220: }
 13351                           ;lcd.c: 221: }
 13352                           
 13353                           
 13354                           ;lcd.c: 222: else
 13355                           ;lcd.c: 223: {
 13356                           ;lcd.c: 224: j=(uint8_t)(5-fieldLength);
 13357  0B6F  0322               	decf	LCDWriteInt@fieldLength,w
 13358  0B70  3AFF               	xorlw	255
 13359  0B71  3E05               	addlw	5
 13360  0B72  00A5               	movwf	??_LCDWriteInt
 13361  0B73  0825               	movf	??_LCDWriteInt,w
 13362  0B74  00AE               	movwf	LCDWriteInt@j
 13363  0B75                     l2940:	
 13364                           
 13365                           ;lcd.c: 225: }
 13366                           ;lcd.c: 227: for(i=j;i<(5-numPlaces);i++)
 13367  0B75  082E               	movf	LCDWriteInt@j,w
 13368  0B76  00A5               	movwf	??_LCDWriteInt
 13369  0B77  0825               	movf	??_LCDWriteInt,w
 13370  0B78  00AF               	movwf	LCDWriteInt@i
 13371  0B79                     l2946:	
 13372  0B79  0823               	movf	LCDWriteInt@numPlaces,w
 13373  0B7A  00A5               	movwf	??_LCDWriteInt
 13374  0B7B  01A6               	clrf	??_LCDWriteInt+1
 13375  0B7C  09A5               	comf	??_LCDWriteInt,f
 13376  0B7D  09A6               	comf	??_LCDWriteInt+1,f
 13377  0B7E  0AA5               	incf	??_LCDWriteInt,f
 13378  0B7F  1903               	skipnz
 13379  0B80  0AA6               	incf	??_LCDWriteInt+1,f
 13380  0B81  0825               	movf	??_LCDWriteInt,w
 13381  0B82  3E05               	addlw	5
 13382  0B83  00A7               	movwf	??_LCDWriteInt+2
 13383  0B84  3000               	movlw	0
 13384  0B85  3D26               	addwfc	??_LCDWriteInt+1,w
 13385  0B86  00A8               	movwf	??_LCDWriteInt+3
 13386  0B87  0828               	movf	??_LCDWriteInt+3,w
 13387  0B88  3A80               	xorlw	128
 13388  0B89  3C80               	sublw	128
 13389  0B8A  1D03               	skipz
 13390  0B8B  2B8E               	goto	u3365
 13391  0B8C  0827               	movf	??_LCDWriteInt+2,w
 13392  0B8D  022F               	subwf	LCDWriteInt@i,w
 13393  0B8E                     u3365:	
 13394  0B8E  1803               	btfsc	3,0
 13395  0B8F  2BA0               	goto	l2948
 13396                           
 13397                           ;lcd.c: 228: {
 13398                           ;lcd.c: 229: LCDWriteCharacter((uint8_t)(48+str[i]));
 13399  0B90  0020               	movlb	0	; select bank0
 13400  0B91  082F               	movf	LCDWriteInt@i,w
 13401  0B92  3E29               	addlw	(low (LCDWriteInt@str| 0))& (0+255)
 13402  0B93  0086               	movwf	6
 13403  0B94  0187               	clrf	7
 13404  0B95  0801               	movf	1,w
 13405  0B96  3E30               	addlw	48
 13406  0B97  3196  26CA  318B   	fcall	_LCDWriteCharacter
 13407  0B9A  3001               	movlw	1
 13408  0B9B  0020               	movlb	0	; select bank0
 13409  0B9C  00A5               	movwf	??_LCDWriteInt
 13410  0B9D  0825               	movf	??_LCDWriteInt,w
 13411  0B9E  07AF               	addwf	LCDWriteInt@i,f
 13412  0B9F  2B79               	goto	l2946
 13413  0BA0                     l2948:	
 13414                           
 13415                           ;lcd.c: 230: }
 13416                           ;lcd.c: 232: if(numPlaces == 1)
 13417  0BA0  0020               	movlb	0	; select bank0
 13418  0BA1  0323               	decf	LCDWriteInt@numPlaces,w
 13419  0BA2  1D03               	btfss	3,2
 13420  0BA3  2BAE               	goto	l2952
 13421                           
 13422                           ;lcd.c: 233: {
 13423                           ;lcd.c: 234: LCDWriteCharacter(46);
 13424  0BA4  302E               	movlw	46
 13425  0BA5  3196  26CA  318B   	fcall	_LCDWriteCharacter
 13426                           
 13427                           ;lcd.c: 235: LCDWriteCharacter ((uint8_t)(48+str[4]));
 13428  0BA8  0020               	movlb	0	; select bank0
 13429  0BA9  082D               	movf	LCDWriteInt@str+4,w
 13430  0BAA  3E30               	addlw	48
 13431  0BAB  3196  26CA  318B   	fcall	_LCDWriteCharacter
 13432  0BAE                     l2952:	
 13433                           
 13434                           ;lcd.c: 236: }
 13435                           ;lcd.c: 238: if(numPlaces == 2)
 13436  0BAE  3002               	movlw	2
 13437  0BAF  0020               	movlb	0	; select bank0
 13438  0BB0  0623               	xorwf	LCDWriteInt@numPlaces,w
 13439  0BB1  1D03               	btfss	3,2
 13440  0BB2  0008               	return
 13441                           
 13442                           ;lcd.c: 239: {
 13443                           ;lcd.c: 240: LCDWriteCharacter(46);
 13444  0BB3  302E               	movlw	46
 13445  0BB4  3196  26CA  318B   	fcall	_LCDWriteCharacter
 13446                           
 13447                           ;lcd.c: 241: LCDWriteCharacter((uint8_t)(48+str[3]));
 13448  0BB7  0020               	movlb	0	; select bank0
 13449  0BB8  082C               	movf	LCDWriteInt@str+3,w
 13450  0BB9  3E30               	addlw	48
 13451  0BBA  3196  26CA  318B   	fcall	_LCDWriteCharacter
 13452                           
 13453                           ;lcd.c: 242: LCDWriteCharacter((uint8_t)(48+str[4]));
 13454  0BBD  0020               	movlb	0	; select bank0
 13455  0BBE  082D               	movf	LCDWriteInt@str+4,w
 13456  0BBF  3E30               	addlw	48
 13457  0BC0  3196  26CA         	fcall	_LCDWriteCharacter
 13458  0BC2  0008               	return
 13459  0BC3                     __end_of_LCDWriteInt:	
 13460                           
 13461                           	psect	text35
 13462  13E4                     __ptext35:	
 13463 ;; *************** function ___lwmod *****************
 13464 ;; Defined at:
 13465 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 13466 ;; Parameters:    Size  Location     Type
 13467 ;;  divisor         2    0[COMMON] unsigned int 
 13468 ;;  dividend        2    2[COMMON] unsigned int 
 13469 ;; Auto vars:     Size  Location     Type
 13470 ;;  counter         1    5[COMMON] unsigned char 
 13471 ;; Return value:  Size  Location     Type
 13472 ;;                  2    0[COMMON] unsigned int 
 13473 ;; Registers used:
 13474 ;;		wreg, status,2, status,0
 13475 ;; Tracked objects:
 13476 ;;		On entry : 0/0
 13477 ;;		On exit  : 0/0
 13478 ;;		Unchanged: 0/0
 13479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13480 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13481 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13482 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13483 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13484 ;;Total ram usage:        6 bytes
 13485 ;; Hardware stack levels used:    1
 13486 ;; This function calls:
 13487 ;;		Nothing
 13488 ;; This function is called by:
 13489 ;;		_LCDWriteInt
 13490 ;; This function uses a non-reentrant model
 13491 ;;
 13492                           
 13493                           
 13494                           ;psect for function ___lwmod
 13495  13E4                     ___lwmod:	
 13496                           
 13497                           ;incstack = 0
 13498                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
 13499  13E4  0870               	movf	___lwmod@divisor,w
 13500  13E5  0471               	iorwf	___lwmod@divisor+1,w
 13501  13E6  1903               	btfsc	3,2
 13502  13E7  2C0B               	goto	l2836
 13503  13E8  01F5               	clrf	___lwmod@counter
 13504  13E9  0AF5               	incf	___lwmod@counter,f
 13505  13EA                     l2826:	
 13506  13EA  1BF1               	btfsc	___lwmod@divisor+1,7
 13507  13EB  2BF6               	goto	l2828
 13508  13EC  3001               	movlw	1
 13509  13ED                     u3095:	
 13510  13ED  35F0               	lslf	___lwmod@divisor,f
 13511  13EE  0DF1               	rlf	___lwmod@divisor+1,f
 13512  13EF  0B89               	decfsz	9,f
 13513  13F0  2BED               	goto	u3095
 13514  13F1  3001               	movlw	1
 13515  13F2  00F4               	movwf	??___lwmod
 13516  13F3  0874               	movf	??___lwmod,w
 13517  13F4  07F5               	addwf	___lwmod@counter,f
 13518  13F5  2BEA               	goto	l2826
 13519  13F6                     l2828:	
 13520  13F6  0871               	movf	___lwmod@divisor+1,w
 13521  13F7  0273               	subwf	___lwmod@dividend+1,w
 13522  13F8  1D03               	skipz
 13523  13F9  2BFC               	goto	u3115
 13524  13FA  0870               	movf	___lwmod@divisor,w
 13525  13FB  0272               	subwf	___lwmod@dividend,w
 13526  13FC                     u3115:	
 13527  13FC  1C03               	skipc
 13528  13FD  2C02               	goto	l2832
 13529  13FE  0870               	movf	___lwmod@divisor,w
 13530  13FF  02F2               	subwf	___lwmod@dividend,f
 13531  1400  0871               	movf	___lwmod@divisor+1,w
 13532  1401  3BF3               	subwfb	___lwmod@dividend+1,f
 13533  1402                     l2832:	
 13534  1402  3001               	movlw	1
 13535  1403                     u3125:	
 13536  1403  36F1               	lsrf	___lwmod@divisor+1,f
 13537  1404  0CF0               	rrf	___lwmod@divisor,f
 13538  1405  0B89               	decfsz	9,f
 13539  1406  2C03               	goto	u3125
 13540  1407  3001               	movlw	1
 13541  1408  02F5               	subwf	___lwmod@counter,f
 13542  1409  1D03               	btfss	3,2
 13543  140A  2BF6               	goto	l2828
 13544  140B                     l2836:	
 13545  140B  0873               	movf	___lwmod@dividend+1,w
 13546  140C  00F1               	movwf	?___lwmod+1
 13547  140D  0872               	movf	___lwmod@dividend,w
 13548  140E  00F0               	movwf	?___lwmod
 13549  140F  0008               	return
 13550  1410                     __end_of___lwmod:	
 13551                           
 13552                           	psect	text36
 13553  1679                     __ptext36:	
 13554 ;; *************** function ___awdiv *****************
 13555 ;; Defined at:
 13556 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
 13557 ;; Parameters:    Size  Location     Type
 13558 ;;  divisor         2    0[COMMON] int 
 13559 ;;  dividend        2    2[COMMON] int 
 13560 ;; Auto vars:     Size  Location     Type
 13561 ;;  quotient        2    7[COMMON] int 
 13562 ;;  sign            1    6[COMMON] unsigned char 
 13563 ;;  counter         1    5[COMMON] unsigned char 
 13564 ;; Return value:  Size  Location     Type
 13565 ;;                  2    0[COMMON] int 
 13566 ;; Registers used:
 13567 ;;		wreg, status,2, status,0
 13568 ;; Tracked objects:
 13569 ;;		On entry : 0/0
 13570 ;;		On exit  : 0/0
 13571 ;;		Unchanged: 0/0
 13572 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13573 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13574 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13575 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13576 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13577 ;;Total ram usage:        9 bytes
 13578 ;; Hardware stack levels used:    1
 13579 ;; This function calls:
 13580 ;;		Nothing
 13581 ;; This function is called by:
 13582 ;;		_LCDWriteInt
 13583 ;; This function uses a non-reentrant model
 13584 ;;
 13585                           
 13586                           
 13587                           ;psect for function ___awdiv
 13588  1679                     ___awdiv:	
 13589                           
 13590                           ;incstack = 0
 13591                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 13592  1679  01F6               	clrf	___awdiv@sign
 13593  167A  1FF1               	btfss	___awdiv@divisor+1,7
 13594  167B  2E83               	goto	l2690
 13595  167C  09F0               	comf	___awdiv@divisor,f
 13596  167D  09F1               	comf	___awdiv@divisor+1,f
 13597  167E  0AF0               	incf	___awdiv@divisor,f
 13598  167F  1903               	skipnz
 13599  1680  0AF1               	incf	___awdiv@divisor+1,f
 13600  1681  01F6               	clrf	___awdiv@sign
 13601  1682  0AF6               	incf	___awdiv@sign,f
 13602  1683                     l2690:	
 13603  1683  1FF3               	btfss	___awdiv@dividend+1,7
 13604  1684  2E8E               	goto	l2696
 13605  1685  09F2               	comf	___awdiv@dividend,f
 13606  1686  09F3               	comf	___awdiv@dividend+1,f
 13607  1687  0AF2               	incf	___awdiv@dividend,f
 13608  1688  1903               	skipnz
 13609  1689  0AF3               	incf	___awdiv@dividend+1,f
 13610  168A  3001               	movlw	1
 13611  168B  00F4               	movwf	??___awdiv
 13612  168C  0874               	movf	??___awdiv,w
 13613  168D  06F6               	xorwf	___awdiv@sign,f
 13614  168E                     l2696:	
 13615  168E  01F7               	clrf	___awdiv@quotient
 13616  168F  01F8               	clrf	___awdiv@quotient+1
 13617  1690  0870               	movf	___awdiv@divisor,w
 13618  1691  0471               	iorwf	___awdiv@divisor+1,w
 13619  1692  1903               	btfsc	3,2
 13620  1693  2EBD               	goto	l2718
 13621  1694  01F5               	clrf	___awdiv@counter
 13622  1695  0AF5               	incf	___awdiv@counter,f
 13623  1696                     l2706:	
 13624  1696  1BF1               	btfsc	___awdiv@divisor+1,7
 13625  1697  2EA2               	goto	l2708
 13626  1698  3001               	movlw	1
 13627  1699                     u2825:	
 13628  1699  35F0               	lslf	___awdiv@divisor,f
 13629  169A  0DF1               	rlf	___awdiv@divisor+1,f
 13630  169B  0B89               	decfsz	9,f
 13631  169C  2E99               	goto	u2825
 13632  169D  3001               	movlw	1
 13633  169E  00F4               	movwf	??___awdiv
 13634  169F  0874               	movf	??___awdiv,w
 13635  16A0  07F5               	addwf	___awdiv@counter,f
 13636  16A1  2E96               	goto	l2706
 13637  16A2                     l2708:	
 13638  16A2  3001               	movlw	1
 13639  16A3                     u2845:	
 13640  16A3  35F7               	lslf	___awdiv@quotient,f
 13641  16A4  0DF8               	rlf	___awdiv@quotient+1,f
 13642  16A5  0B89               	decfsz	9,f
 13643  16A6  2EA3               	goto	u2845
 13644  16A7  0871               	movf	___awdiv@divisor+1,w
 13645  16A8  0273               	subwf	___awdiv@dividend+1,w
 13646  16A9  1D03               	skipz
 13647  16AA  2EAD               	goto	u2855
 13648  16AB  0870               	movf	___awdiv@divisor,w
 13649  16AC  0272               	subwf	___awdiv@dividend,w
 13650  16AD                     u2855:	
 13651  16AD  1C03               	skipc
 13652  16AE  2EB4               	goto	l2714
 13653  16AF  0870               	movf	___awdiv@divisor,w
 13654  16B0  02F2               	subwf	___awdiv@dividend,f
 13655  16B1  0871               	movf	___awdiv@divisor+1,w
 13656  16B2  3BF3               	subwfb	___awdiv@dividend+1,f
 13657  16B3  1477               	bsf	___awdiv@quotient,0
 13658  16B4                     l2714:	
 13659  16B4  3001               	movlw	1
 13660  16B5                     u2865:	
 13661  16B5  36F1               	lsrf	___awdiv@divisor+1,f
 13662  16B6  0CF0               	rrf	___awdiv@divisor,f
 13663  16B7  0B89               	decfsz	9,f
 13664  16B8  2EB5               	goto	u2865
 13665  16B9  3001               	movlw	1
 13666  16BA  02F5               	subwf	___awdiv@counter,f
 13667  16BB  1D03               	btfss	3,2
 13668  16BC  2EA2               	goto	l2708
 13669  16BD                     l2718:	
 13670  16BD  0876               	movf	___awdiv@sign,w
 13671  16BE  1903               	btfsc	3,2
 13672  16BF  2EC5               	goto	l2722
 13673  16C0  09F7               	comf	___awdiv@quotient,f
 13674  16C1  09F8               	comf	___awdiv@quotient+1,f
 13675  16C2  0AF7               	incf	___awdiv@quotient,f
 13676  16C3  1903               	skipnz
 13677  16C4  0AF8               	incf	___awdiv@quotient+1,f
 13678  16C5                     l2722:	
 13679  16C5  0878               	movf	___awdiv@quotient+1,w
 13680  16C6  00F1               	movwf	?___awdiv+1
 13681  16C7  0877               	movf	___awdiv@quotient,w
 13682  16C8  00F0               	movwf	?___awdiv
 13683  16C9  0008               	return
 13684  16CA                     __end_of___awdiv:	
 13685                           
 13686                           	psect	text37
 13687  009D                     __ptext37:	
 13688 ;; *************** function _Battery_State_Machine *****************
 13689 ;; Defined at:
 13690 ;;		line 32 in file "battery_charger.c"
 13691 ;; Parameters:    Size  Location     Type
 13692 ;;  z               1    wreg     unsigned char 
 13693 ;; Auto vars:     Size  Location     Type
 13694 ;;  z               1    6[BANK0 ] unsigned char 
 13695 ;; Return value:  Size  Location     Type
 13696 ;;                  1    wreg      void 
 13697 ;; Registers used:
 13698 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13699 ;; Tracked objects:
 13700 ;;		On entry : 0/0
 13701 ;;		On exit  : 0/0
 13702 ;;		Unchanged: 0/0
 13703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13704 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13705 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13706 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13707 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13708 ;;Total ram usage:        6 bytes
 13709 ;; Hardware stack levels used:    1
 13710 ;; Hardware stack levels required when called:    3
 13711 ;; This function calls:
 13712 ;;		_LCDWriteString
 13713 ;;		_gotoXY
 13714 ;; This function is called by:
 13715 ;;		_main
 13716 ;; This function uses a non-reentrant model
 13717 ;;
 13718                           
 13719                           
 13720                           ;psect for function _Battery_State_Machine
 13721  009D                     _Battery_State_Machine:	
 13722                           
 13723                           ;incstack = 0
 13724                           ; Regs used in _Battery_State_Machine: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13725                           ;Battery_State_Machine@z stored from wreg
 13726  009D  0020               	movlb	0	; select bank0
 13727  009E  00A6               	movwf	Battery_State_Machine@z
 13728                           
 13729                           ;battery_charger.c: 34: if(batteryState[z]==PRECHARGE)
 13730  009F  0826               	movf	Battery_State_Machine@z,w
 13731  00A0  3EC8               	addlw	(low (_batteryState| 0))& (0+255)
 13732  00A1  0086               	movwf	6
 13733  00A2  0187               	clrf	7
 13734  00A3  3003               	movlw	3
 13735  00A4  0601               	xorwf	1,w
 13736  00A5  1D03               	btfss	3,2
 13737  00A6  28F6               	goto	l3002
 13738                           
 13739                           ;battery_charger.c: 35: {
 13740                           ;battery_charger.c: 36: if(voltage[z]<675)
 13741  00A7  3526               	lslf	Battery_State_Machine@z,w
 13742  00A8  3EB0               	addlw	(low (_voltage| 0))& (0+255)
 13743  00A9  0086               	movwf	6
 13744  00AA  0187               	clrf	7
 13745  00AB  3F40               	moviw [0]fsr1
 13746  00AC  00A1               	movwf	??_Battery_State_Machine
 13747  00AD  3F41               	moviw [1]fsr1
 13748  00AE  00A2               	movwf	??_Battery_State_Machine+1
 13749  00AF  0822               	movf	??_Battery_State_Machine+1,w
 13750  00B0  3A80               	xorlw	128
 13751  00B1  00A3               	movwf	??_Battery_State_Machine+2
 13752  00B2  3082               	movlw	130
 13753  00B3  0223               	subwf	??_Battery_State_Machine+2,w
 13754  00B4  1D03               	skipz
 13755  00B5  28B8               	goto	u3425
 13756  00B6  30A3               	movlw	163
 13757  00B7  0221               	subwf	??_Battery_State_Machine,w
 13758  00B8                     u3425:	
 13759  00B8  1803               	skipnc
 13760  00B9  28E4               	goto	l3000
 13761                           
 13762                           ;battery_charger.c: 37: {
 13763                           ;battery_charger.c: 38: if(stateCounter[z]>0)
 13764  00BA  0020               	movlb	0	; select bank0
 13765  00BB  3526               	lslf	Battery_State_Machine@z,w
 13766  00BC  3E41               	addlw	(low (_stateCounter| (0+256)))& (0+255)
 13767  00BD  0086               	movwf	6
 13768  00BE  3001               	movlw	1	; select bank2/3
 13769  00BF  0087               	movwf	7
 13770  00C0  3F40               	moviw [0]fsr1
 13771  00C1  00A1               	movwf	??_Battery_State_Machine
 13772  00C2  3F41               	moviw [1]fsr1
 13773  00C3  00A2               	movwf	??_Battery_State_Machine+1
 13774  00C4  0822               	movf	??_Battery_State_Machine+1,w
 13775  00C5  3A80               	xorlw	128
 13776  00C6  00A3               	movwf	??_Battery_State_Machine+2
 13777  00C7  3080               	movlw	128
 13778  00C8  0223               	subwf	??_Battery_State_Machine+2,w
 13779  00C9  1D03               	skipz
 13780  00CA  28CD               	goto	u3435
 13781  00CB  3001               	movlw	1
 13782  00CC  0221               	subwf	??_Battery_State_Machine,w
 13783  00CD                     u3435:	
 13784  00CD  1C03               	skipc
 13785  00CE  28DC               	goto	l2998
 13786                           
 13787                           ;battery_charger.c: 39: {
 13788                           ;battery_charger.c: 40: stateCounter[z]-=1;
 13789  00CF  0020               	movlb	0	; select bank0
 13790  00D0  3526               	lslf	Battery_State_Machine@z,w
 13791  00D1  3E41               	addlw	(low (_stateCounter| (0+256)))& (0+255)
 13792  00D2  0086               	movwf	6
 13793  00D3  3001               	movlw	1	; select bank2/3
 13794  00D4  0087               	movwf	7
 13795  00D5  30FF               	movlw	255
 13796  00D6  0781               	addwf	1,f
 13797  00D7  3141               	addfsr 1,1
 13798  00D8  30FF               	movlw	255
 13799  00D9  3D81               	addwfc	1,f
 13800  00DA  317F               	addfsr 1,-1
 13801                           
 13802                           ;battery_charger.c: 41: }
 13803  00DB  0008               	return
 13804  00DC                     l2998:	
 13805                           
 13806                           ;battery_charger.c: 42: else
 13807                           ;battery_charger.c: 43: {
 13808                           ;battery_charger.c: 44: batteryState[z]=FAULT;
 13809  00DC  0020               	movlb	0	; select bank0
 13810  00DD  0826               	movf	Battery_State_Machine@z,w
 13811  00DE  3EC8               	addlw	(low (_batteryState| 0))& (0+255)
 13812  00DF  0086               	movwf	6
 13813  00E0  0187               	clrf	7
 13814  00E1  0181               	clrf	1
 13815  00E2  0A81               	incf	1,f
 13816                           
 13817                           ;battery_charger.c: 45: }
 13818                           ;battery_charger.c: 46: }
 13819  00E3  0008               	return
 13820  00E4                     l3000:	
 13821                           
 13822                           ;battery_charger.c: 47: else
 13823                           ;battery_charger.c: 48: {
 13824                           ;battery_charger.c: 49: batteryState[z]=CHARGE;
 13825  00E4  3004               	movlw	4
 13826  00E5  0020               	movlb	0	; select bank0
 13827  00E6  00A1               	movwf	??_Battery_State_Machine
 13828  00E7  0826               	movf	Battery_State_Machine@z,w
 13829  00E8  3EC8               	addlw	(low (_batteryState| 0))& (0+255)
 13830  00E9  0086               	movwf	6
 13831  00EA  0187               	clrf	7
 13832  00EB  0821               	movf	??_Battery_State_Machine,w
 13833  00EC  0081               	movwf	1
 13834                           
 13835                           ;battery_charger.c: 50: Iref[z]=35;
 13836  00ED  3526               	lslf	Battery_State_Machine@z,w
 13837  00EE  3EBC               	addlw	(low (_Iref| 0))& (0+255)
 13838  00EF  0086               	movwf	6
 13839  00F0  0187               	clrf	7
 13840  00F1  3023               	movlw	35
 13841  00F2  3FC0               	movwi [0]fsr1
 13842  00F3  3000               	movlw	0
 13843  00F4  3FC1               	movwi [1]fsr1
 13844                           
 13845                           ;battery_charger.c: 51: }
 13846                           ;battery_charger.c: 52: }
 13847  00F5  0008               	return
 13848  00F6                     l3002:	
 13849                           
 13850                           ;battery_charger.c: 53: else if(batteryState[z]==CHARGE)
 13851  00F6  0826               	movf	Battery_State_Machine@z,w
 13852  00F7  3EC8               	addlw	(low (_batteryState| 0))& (0+255)
 13853  00F8  0086               	movwf	6
 13854  00F9  0187               	clrf	7
 13855  00FA  3004               	movlw	4
 13856  00FB  0601               	xorwf	1,w
 13857  00FC  1D03               	btfss	3,2
 13858  00FD  29AB               	goto	l3030
 13859                           
 13860                           ;battery_charger.c: 54: {
 13861                           ;battery_charger.c: 55: if(!Imode[z])
 13862  00FE  0826               	movf	Battery_State_Machine@z,w
 13863  00FF  3EEE               	addlw	(low (_Imode| 0))& (0+255)
 13864  0100  0086               	movwf	6
 13865  0101  0187               	clrf	7
 13866  0102  0801               	movf	1,w
 13867  0103  1D03               	btfss	3,2
 13868  0104  2992               	goto	l3026
 13869                           
 13870                           ;battery_charger.c: 56: {
 13871                           ;battery_charger.c: 57: if(current[z] < Imin[z])
 13872  0105  3526               	lslf	Battery_State_Machine@z,w
 13873  0106  3E3D               	addlw	(low (_Imin| (0+256)))& (0+255)
 13874  0107  0086               	movwf	6
 13875  0108  3001               	movlw	1	; select bank2/3
 13876  0109  0087               	movwf	7
 13877  010A  3F40               	moviw [0]fsr1
 13878  010B  00A1               	movwf	??_Battery_State_Machine
 13879  010C  3F41               	moviw [1]fsr1
 13880  010D  00A2               	movwf	??_Battery_State_Machine+1
 13881  010E  3526               	lslf	Battery_State_Machine@z,w
 13882  010F  3EA8               	addlw	(low (_current| 0))& (0+255)
 13883  0110  0086               	movwf	6
 13884  0111  0187               	clrf	7
 13885  0112  3F40               	moviw [0]fsr1
 13886  0113  00A3               	movwf	??_Battery_State_Machine+2
 13887  0114  3F41               	moviw [1]fsr1
 13888  0115  00A4               	movwf	??_Battery_State_Machine+3
 13889  0116  0824               	movf	??_Battery_State_Machine+3,w
 13890  0117  3A80               	xorlw	128
 13891  0118  00A5               	movwf	??_Battery_State_Machine+4
 13892  0119  0822               	movf	??_Battery_State_Machine+1,w
 13893  011A  3A80               	xorlw	128
 13894  011B  0225               	subwf	??_Battery_State_Machine+4,w
 13895  011C  1D03               	skipz
 13896  011D  2920               	goto	u3465
 13897  011E  0821               	movf	??_Battery_State_Machine,w
 13898  011F  0223               	subwf	??_Battery_State_Machine+2,w
 13899  0120                     u3465:	
 13900  0120  1803               	skipnc
 13901  0121  294D               	goto	l3012
 13902                           
 13903                           ;battery_charger.c: 58: {
 13904                           ;battery_charger.c: 59: IminCount[z]-=2;
 13905  0122  0020               	movlb	0	; select bank0
 13906  0123  3526               	lslf	Battery_State_Machine@z,w
 13907  0124  3EC0               	addlw	(low (_IminCount| 0))& (0+255)
 13908  0125  0086               	movwf	6
 13909  0126  0187               	clrf	7
 13910  0127  3002               	movlw	2
 13911  0128  0281               	subwf	1,f
 13912  0129  3141               	addfsr 1,1
 13913  012A  3000               	movlw	0
 13914  012B  3B81               	subwfb	1,f
 13915  012C  317F               	addfsr 1,-1
 13916                           
 13917                           ;battery_charger.c: 60: if(IminCount[z]<10)
 13918  012D  3526               	lslf	Battery_State_Machine@z,w
 13919  012E  3EC0               	addlw	(low (_IminCount| 0))& (0+255)
 13920  012F  0086               	movwf	6
 13921  0130  0187               	clrf	7
 13922  0131  3F40               	moviw [0]fsr1
 13923  0132  00A1               	movwf	??_Battery_State_Machine
 13924  0133  3F41               	moviw [1]fsr1
 13925  0134  00A2               	movwf	??_Battery_State_Machine+1
 13926  0135  3000               	movlw	0
 13927  0136  0222               	subwf	??_Battery_State_Machine+1,w
 13928  0137  300A               	movlw	10
 13929  0138  1903               	skipnz
 13930  0139  0221               	subwf	??_Battery_State_Machine,w
 13931  013A  1803               	skipnc
 13932  013B  0008               	return
 13933                           
 13934                           ;battery_charger.c: 61: {
 13935                           ;battery_charger.c: 62: batteryState[z] = FLOAT;
 13936  013C  3005               	movlw	5
 13937  013D  00A1               	movwf	??_Battery_State_Machine
 13938  013E  0826               	movf	Battery_State_Machine@z,w
 13939  013F  3EC8               	addlw	(low (_batteryState| 0))& (0+255)
 13940  0140  0086               	movwf	6
 13941  0141  0187               	clrf	7
 13942  0142  0821               	movf	??_Battery_State_Machine,w
 13943  0143  0081               	movwf	1
 13944                           
 13945                           ;battery_charger.c: 63: IminCount[z]=10;
 13946  0144  3526               	lslf	Battery_State_Machine@z,w
 13947  0145  3EC0               	addlw	(low (_IminCount| 0))& (0+255)
 13948  0146  0086               	movwf	6
 13949  0147  0187               	clrf	7
 13950  0148  300A               	movlw	10
 13951  0149  3FC0               	movwi [0]fsr1
 13952  014A  3000               	movlw	0
 13953  014B  3FC1               	movwi [1]fsr1
 13954                           
 13955                           ;battery_charger.c: 64: }
 13956                           ;battery_charger.c: 65: }
 13957  014C  0008               	return
 13958  014D                     l3012:	
 13959                           
 13960                           ;battery_charger.c: 66: else
 13961                           ;battery_charger.c: 67: {
 13962                           ;battery_charger.c: 68: x+=1;
 13963  014D  3001               	movlw	1
 13964  014E  0020               	movlb	0	; select bank0
 13965  014F  00A1               	movwf	??_Battery_State_Machine
 13966  0150  0821               	movf	??_Battery_State_Machine,w
 13967  0151  0021               	movlb	1	; select bank1
 13968  0152  07CC               	addwf	_x^(0+128),f
 13969                           
 13970                           ;battery_charger.c: 69: if(x>25)
 13971  0153  301A               	movlw	26
 13972  0154  024C               	subwf	_x^(0+128),w
 13973  0155  1C03               	skipc
 13974  0156  2978               	goto	l3022
 13975                           
 13976                           ;battery_charger.c: 70: {
 13977                           ;battery_charger.c: 71: if(Vref[z]>1379)Vref[z]-=1;
 13978  0157  0020               	movlb	0	; select bank0
 13979  0158  3526               	lslf	Battery_State_Machine@z,w
 13980  0159  3EB8               	addlw	(low (_Vref| 0))& (0+255)
 13981  015A  0086               	movwf	6
 13982  015B  0187               	clrf	7
 13983  015C  3F40               	moviw [0]fsr1
 13984  015D  00A1               	movwf	??_Battery_State_Machine
 13985  015E  3F41               	moviw [1]fsr1
 13986  015F  00A2               	movwf	??_Battery_State_Machine+1
 13987  0160  0822               	movf	??_Battery_State_Machine+1,w
 13988  0161  3A80               	xorlw	128
 13989  0162  00A3               	movwf	??_Battery_State_Machine+2
 13990  0163  3085               	movlw	133
 13991  0164  0223               	subwf	??_Battery_State_Machine+2,w
 13992  0165  1D03               	skipz
 13993  0166  2969               	goto	u3495
 13994  0167  3064               	movlw	100
 13995  0168  0221               	subwf	??_Battery_State_Machine,w
 13996  0169                     u3495:	
 13997  0169  1C03               	skipc
 13998  016A  2976               	goto	l3020
 13999  016B  0020               	movlb	0	; select bank0
 14000  016C  3526               	lslf	Battery_State_Machine@z,w
 14001  016D  3EB8               	addlw	(low (_Vref| 0))& (0+255)
 14002  016E  0086               	movwf	6
 14003  016F  0187               	clrf	7
 14004  0170  30FF               	movlw	255
 14005  0171  0781               	addwf	1,f
 14006  0172  3141               	addfsr 1,1
 14007  0173  30FF               	movlw	255
 14008  0174  3D81               	addwfc	1,f
 14009  0175  317F               	addfsr 1,-1
 14010  0176                     l3020:	
 14011                           
 14012                           ;battery_charger.c: 72: x=0;
 14013  0176  0021               	movlb	1	; select bank1
 14014  0177  01CC               	clrf	_x^(0+128)
 14015  0178                     l3022:	
 14016                           
 14017                           ;battery_charger.c: 73: }
 14018                           ;battery_charger.c: 74: if(IminCount[z]<100)IminCount[z]+=1;
 14019  0178  0020               	movlb	0	; select bank0
 14020  0179  3526               	lslf	Battery_State_Machine@z,w
 14021  017A  3EC0               	addlw	(low (_IminCount| 0))& (0+255)
 14022  017B  0086               	movwf	6
 14023  017C  0187               	clrf	7
 14024  017D  3F40               	moviw [0]fsr1
 14025  017E  00A1               	movwf	??_Battery_State_Machine
 14026  017F  3F41               	moviw [1]fsr1
 14027  0180  00A2               	movwf	??_Battery_State_Machine+1
 14028  0181  3000               	movlw	0
 14029  0182  0222               	subwf	??_Battery_State_Machine+1,w
 14030  0183  3064               	movlw	100
 14031  0184  1903               	skipnz
 14032  0185  0221               	subwf	??_Battery_State_Machine,w
 14033  0186  1803               	skipnc
 14034  0187  0008               	return
 14035  0188  3526               	lslf	Battery_State_Machine@z,w
 14036  0189  3EC0               	addlw	(low (_IminCount| 0))& (0+255)
 14037  018A  0086               	movwf	6
 14038  018B  0187               	clrf	7
 14039  018C  3001               	movlw	1
 14040  018D  0781               	addwf	1,f
 14041  018E  3141               	addfsr 1,1
 14042  018F  1803               	skipnc
 14043  0190  0A81               	incf	1,f
 14044                           
 14045                           ;battery_charger.c: 75: }
 14046                           ;battery_charger.c: 76: }
 14047  0191  0008               	return
 14048  0192                     l3026:	
 14049                           
 14050                           ;battery_charger.c: 77: else if(IminCount[z]<100)IminCount[z]+=1;
 14051  0192  3526               	lslf	Battery_State_Machine@z,w
 14052  0193  3EC0               	addlw	(low (_IminCount| 0))& (0+255)
 14053  0194  0086               	movwf	6
 14054  0195  0187               	clrf	7
 14055  0196  3F40               	moviw [0]fsr1
 14056  0197  00A1               	movwf	??_Battery_State_Machine
 14057  0198  3F41               	moviw [1]fsr1
 14058  0199  00A2               	movwf	??_Battery_State_Machine+1
 14059  019A  3000               	movlw	0
 14060  019B  0222               	subwf	??_Battery_State_Machine+1,w
 14061  019C  3064               	movlw	100
 14062  019D  1903               	skipnz
 14063  019E  0221               	subwf	??_Battery_State_Machine,w
 14064  019F  1803               	skipnc
 14065  01A0  0008               	return
 14066  01A1  3526               	lslf	Battery_State_Machine@z,w
 14067  01A2  3EC0               	addlw	(low (_IminCount| 0))& (0+255)
 14068  01A3  0086               	movwf	6
 14069  01A4  0187               	clrf	7
 14070  01A5  3001               	movlw	1
 14071  01A6  0781               	addwf	1,f
 14072  01A7  3141               	addfsr 1,1
 14073  01A8  1803               	skipnc
 14074  01A9  0A81               	incf	1,f
 14075                           
 14076                           ;battery_charger.c: 78: }
 14077  01AA  0008               	return
 14078  01AB                     l3030:	
 14079                           
 14080                           ;battery_charger.c: 79: else if(batteryState[z] == FLOAT)
 14081  01AB  0826               	movf	Battery_State_Machine@z,w
 14082  01AC  3EC8               	addlw	(low (_batteryState| 0))& (0+255)
 14083  01AD  0086               	movwf	6
 14084  01AE  0187               	clrf	7
 14085  01AF  3005               	movlw	5
 14086  01B0  0601               	xorwf	1,w
 14087  01B1  1D03               	btfss	3,2
 14088  01B2  29C4               	goto	l3034
 14089                           
 14090                           ;battery_charger.c: 80: {
 14091                           ;battery_charger.c: 81: Vref[z]=1379;
 14092  01B3  3526               	lslf	Battery_State_Machine@z,w
 14093  01B4  3EB8               	addlw	(low (_Vref| 0))& (0+255)
 14094  01B5  0086               	movwf	6
 14095  01B6  0187               	clrf	7
 14096  01B7  3063               	movlw	99
 14097  01B8  3FC0               	movwi [0]fsr1
 14098  01B9  3005               	movlw	5
 14099  01BA  3FC1               	movwi [1]fsr1
 14100                           
 14101                           ;battery_charger.c: 82: Iref[z]=17;
 14102  01BB  3526               	lslf	Battery_State_Machine@z,w
 14103  01BC  3EBC               	addlw	(low (_Iref| 0))& (0+255)
 14104  01BD  0086               	movwf	6
 14105  01BE  0187               	clrf	7
 14106  01BF  3011               	movlw	17
 14107  01C0  3FC0               	movwi [0]fsr1
 14108  01C1  3000               	movlw	0
 14109  01C2  3FC1               	movwi [1]fsr1
 14110                           
 14111                           ;battery_charger.c: 83: }
 14112  01C3  0008               	return
 14113  01C4                     l3034:	
 14114                           
 14115                           ;battery_charger.c: 84: else
 14116                           ;battery_charger.c: 85: if(batteryState[z] == FAULT)
 14117  01C4  0826               	movf	Battery_State_Machine@z,w
 14118  01C5  3EC8               	addlw	(low (_batteryState| 0))& (0+255)
 14119  01C6  0086               	movwf	6
 14120  01C7  0187               	clrf	7
 14121  01C8  0301               	decf	1,w
 14122  01C9  1D03               	btfss	3,2
 14123  01CA  0008               	return
 14124                           
 14125                           ;battery_charger.c: 86: {
 14126                           ;battery_charger.c: 87: { gotoXY(0,0); LCDWriteString("BATTERY FAULT");};
 14127  01CB  01F5               	clrf	gotoXY@y
 14128  01CC  3000               	movlw	0
 14129  01CD  3192  22BA  3180   	fcall	_gotoXY
 14130  01D0  301B               	movlw	low (STR_1| (0+32768))
 14131  01D1  00FC               	movwf	LCDWriteString@characters
 14132  01D2  3098               	movlw	high (STR_1| (0+32768))
 14133  01D3  00FD               	movwf	LCDWriteString@characters+1
 14134  01D4  3192  22CD  3180   	fcall	_LCDWriteString
 14135                           
 14136                           ;battery_charger.c: 88: Imode[z]=0;
 14137  01D7  0020               	movlb	0	; select bank0
 14138  01D8  0826               	movf	Battery_State_Machine@z,w
 14139  01D9  3EEE               	addlw	(low (_Imode| 0))& (0+255)
 14140  01DA  0086               	movwf	6
 14141  01DB  0187               	clrf	7
 14142  01DC  0181               	clrf	1
 14143                           
 14144                           ;battery_charger.c: 90: _delay((unsigned long)((2000)*(32000000/4000.0)));
 14145  01DD  3052               	movlw	82
 14146  01DE  0020               	movlb	0	; select bank0
 14147  01DF  00A2               	movwf	??_Battery_State_Machine+1
 14148  01E0  302B               	movlw	43
 14149  01E1  00A1               	movwf	??_Battery_State_Machine
 14150  01E2  3000               	movlw	0
 14151  01E3                     u4017:	
 14152  01E3  0B89               	decfsz	9,f
 14153  01E4  29E3               	goto	u4017
 14154  01E5  0BA1               	decfsz	??_Battery_State_Machine,f
 14155  01E6  29E3               	goto	u4017
 14156  01E7  0BA2               	decfsz	??_Battery_State_Machine+1,f
 14157  01E8  29E3               	goto	u4017
 14158  01E9  0000               	nop
 14159  01EA  0008               	return
 14160  01EB                     __end_of_Battery_State_Machine:	
 14161                           
 14162                           	psect	text38
 14163  12BA                     __ptext38:	
 14164 ;; *************** function _gotoXY *****************
 14165 ;; Defined at:
 14166 ;;		line 124 in file "lcd.c"
 14167 ;; Parameters:    Size  Location     Type
 14168 ;;  x               1    wreg     unsigned char 
 14169 ;;  y               1    5[COMMON] unsigned char 
 14170 ;; Auto vars:     Size  Location     Type
 14171 ;;  x               1    7[COMMON] unsigned char 
 14172 ;; Return value:  Size  Location     Type
 14173 ;;                  1    wreg      void 
 14174 ;; Registers used:
 14175 ;;		wreg, status,2, status,0, pclath, cstack
 14176 ;; Tracked objects:
 14177 ;;		On entry : 0/0
 14178 ;;		On exit  : 0/0
 14179 ;;		Unchanged: 0/0
 14180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14181 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14182 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14183 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14184 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14185 ;;Total ram usage:        3 bytes
 14186 ;; Hardware stack levels used:    1
 14187 ;; Hardware stack levels required when called:    1
 14188 ;; This function calls:
 14189 ;;		_LCDWrite
 14190 ;; This function is called by:
 14191 ;;		_LCDClear
 14192 ;;		_Battery_State_Machine
 14193 ;;		_main
 14194 ;; This function uses a non-reentrant model
 14195 ;;
 14196                           
 14197                           
 14198                           ;psect for function _gotoXY
 14199  12BA                     _gotoXY:	
 14200                           
 14201                           ;incstack = 0
 14202                           ; Regs used in _gotoXY: [wreg+status,2+status,0+pclath+cstack]
 14203                           ;gotoXY@x stored from wreg
 14204  12BA  00F7               	movwf	gotoXY@x
 14205                           
 14206                           ;lcd.c: 126: LCDWrite(0,(uint8_t)(0x80 | x));
 14207  12BB  0877               	movf	gotoXY@x,w
 14208  12BC  3880               	iorlw	128
 14209  12BD  00F6               	movwf	??_gotoXY
 14210  12BE  0876               	movf	??_gotoXY,w
 14211  12BF  00F0               	movwf	LCDWrite@data
 14212  12C0  3000               	movlw	0
 14213  12C1  3193  2399  3192   	fcall	_LCDWrite
 14214                           
 14215                           ;lcd.c: 127: LCDWrite(0,(uint8_t)(0x40 | y));
 14216  12C4  0875               	movf	gotoXY@y,w
 14217  12C5  3840               	iorlw	64
 14218  12C6  00F6               	movwf	??_gotoXY
 14219  12C7  0876               	movf	??_gotoXY,w
 14220  12C8  00F0               	movwf	LCDWrite@data
 14221  12C9  3000               	movlw	0
 14222  12CA  3193  2399         	fcall	_LCDWrite
 14223  12CC  0008               	return
 14224  12CD                     __end_of_gotoXY:	
 14225                           
 14226                           	psect	text39
 14227  12CD                     __ptext39:	
 14228 ;; *************** function _LCDWriteString *****************
 14229 ;; Defined at:
 14230 ;;		line 176 in file "lcd.c"
 14231 ;; Parameters:    Size  Location     Type
 14232 ;;  characters      2   12[COMMON] PTR const unsigned char 
 14233 ;;		 -> STR_1(14), 
 14234 ;; Auto vars:     Size  Location     Type
 14235 ;;		None
 14236 ;; Return value:  Size  Location     Type
 14237 ;;                  1    wreg      void 
 14238 ;; Registers used:
 14239 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 14240 ;; Tracked objects:
 14241 ;;		On entry : 0/0
 14242 ;;		On exit  : 0/0
 14243 ;;		Unchanged: 0/0
 14244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14245 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14246 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14247 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14248 ;;      Totals:         2       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14249 ;;Total ram usage:        3 bytes
 14250 ;; Hardware stack levels used:    1
 14251 ;; Hardware stack levels required when called:    2
 14252 ;; This function calls:
 14253 ;;		_LCDWriteCharacter
 14254 ;; This function is called by:
 14255 ;;		_Battery_State_Machine
 14256 ;; This function uses a non-reentrant model
 14257 ;;
 14258                           
 14259                           
 14260                           ;psect for function _LCDWriteString
 14261  12CD                     _LCDWriteString:	
 14262  12CD                     l2514:	
 14263                           ;lcd.c: 178: while (*characters)
 14264                           
 14265                           ;incstack = 0
 14266                           ; Regs used in _LCDWriteString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 14267                           
 14268  12CD  087C               	movf	LCDWriteString@characters,w
 14269  12CE  0084               	movwf	4
 14270  12CF  087D               	movf	LCDWriteString@characters+1,w
 14271  12D0  0085               	movwf	5
 14272  12D1  0012               	moviw fsr0++
 14273  12D2  1903               	btfsc	3,2
 14274  12D3  0008               	return
 14275                           
 14276                           ;lcd.c: 179: LCDWriteCharacter(*characters++);
 14277  12D4  087C               	movf	LCDWriteString@characters,w
 14278  12D5  0084               	movwf	4
 14279  12D6  087D               	movf	LCDWriteString@characters+1,w
 14280  12D7  0085               	movwf	5
 14281  12D8  0800               	movf	0,w	;code access
 14282  12D9  3196  26CA  3192   	fcall	_LCDWriteCharacter
 14283  12DC  3001               	movlw	1
 14284  12DD  07FC               	addwf	LCDWriteString@characters,f
 14285  12DE  3000               	movlw	0
 14286  12DF  3DFD               	addwfc	LCDWriteString@characters+1,f
 14287  12E0  2ACD               	goto	l2514
 14288  12E1                     __end_of_LCDWriteString:	
 14289                           
 14290                           	psect	text40
 14291  16CA                     __ptext40:	
 14292 ;; *************** function _LCDWriteCharacter *****************
 14293 ;; Defined at:
 14294 ;;		line 140 in file "lcd.c"
 14295 ;; Parameters:    Size  Location     Type
 14296 ;;  character       1    wreg     const unsigned char 
 14297 ;; Auto vars:     Size  Location     Type
 14298 ;;  character       1    9[COMMON] const unsigned char 
 14299 ;;  base            2   10[COMMON] unsigned int 
 14300 ;; Return value:  Size  Location     Type
 14301 ;;                  1    wreg      void 
 14302 ;; Registers used:
 14303 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 14304 ;; Tracked objects:
 14305 ;;		On entry : 0/0
 14306 ;;		On exit  : 0/0
 14307 ;;		Unchanged: 0/0
 14308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14310 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14311 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14312 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14313 ;;Total ram usage:        6 bytes
 14314 ;; Hardware stack levels used:    1
 14315 ;; Hardware stack levels required when called:    1
 14316 ;; This function calls:
 14317 ;;		_LCDWrite
 14318 ;;		___wmul
 14319 ;; This function is called by:
 14320 ;;		_LCDWriteString
 14321 ;;		_LCDWriteInt
 14322 ;;		_main
 14323 ;; This function uses a non-reentrant model
 14324 ;;
 14325                           
 14326                           
 14327                           ;psect for function _LCDWriteCharacter
 14328  16CA                     _LCDWriteCharacter:	
 14329                           
 14330                           ;incstack = 0
 14331                           ; Regs used in _LCDWriteCharacter: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 14332                           ;LCDWriteCharacter@character stored from wreg
 14333  16CA  00F9               	movwf	LCDWriteCharacter@character
 14334                           
 14335                           ;lcd.c: 142: uint16_t base;
 14336                           ;lcd.c: 143: base = character - 0x20;
 14337  16CB  0879               	movf	LCDWriteCharacter@character,w
 14338  16CC  3EE0               	addlw	224
 14339  16CD  00FA               	movwf	LCDWriteCharacter@base
 14340  16CE  30FF               	movlw	255
 14341  16CF  1803               	skipnc
 14342  16D0  3000               	movlw	0
 14343  16D1  00FB               	movwf	LCDWriteCharacter@base+1
 14344                           
 14345                           ;lcd.c: 144: base *= 3;
 14346  16D2  3003               	movlw	3
 14347  16D3  00F0               	movwf	___wmul@multiplier
 14348  16D4  3000               	movlw	0
 14349  16D5  00F1               	movwf	___wmul@multiplier+1
 14350  16D6  087B               	movf	LCDWriteCharacter@base+1,w
 14351  16D7  00F3               	movwf	___wmul@multiplicand+1
 14352  16D8  087A               	movf	LCDWriteCharacter@base,w
 14353  16D9  00F2               	movwf	___wmul@multiplicand
 14354  16DA  3193  2321  3196   	fcall	___wmul
 14355  16DD  0871               	movf	?___wmul+1,w
 14356  16DE  00FB               	movwf	LCDWriteCharacter@base+1
 14357  16DF  0870               	movf	?___wmul,w
 14358  16E0  00FA               	movwf	LCDWriteCharacter@base
 14359                           
 14360                           ;lcd.c: 145: LCDWrite(1,fonts[base]);
 14361  16E1  087B               	movf	LCDWriteCharacter@base+1,w
 14362  16E2  0085               	movwf	5
 14363  16E3  087A               	movf	LCDWriteCharacter@base,w
 14364  16E4  0084               	movwf	4
 14365  16E5  3000               	movlw	low (_fonts| (0+32768))
 14366  16E6  0784               	addwf	4,f
 14367  16E7  3090               	movlw	high (_fonts| (0+32768))
 14368  16E8  3D85               	addwfc	5,f
 14369  16E9  0800               	movf	0,w	;code access
 14370  16EA  00F6               	movwf	??_LCDWriteCharacter
 14371  16EB  0876               	movf	??_LCDWriteCharacter,w
 14372  16EC  00F0               	movwf	LCDWrite@data
 14373  16ED  3001               	movlw	1
 14374  16EE  3193  2399  3196   	fcall	_LCDWrite
 14375                           
 14376                           ;lcd.c: 146: LCDWrite(1,fonts[base + 1]);
 14377  16F1  087A               	movf	LCDWriteCharacter@base,w
 14378  16F2  3E01               	addlw	1
 14379  16F3  00F6               	movwf	??_LCDWriteCharacter
 14380  16F4  3000               	movlw	0
 14381  16F5  3D7B               	addwfc	LCDWriteCharacter@base+1,w
 14382  16F6  00F7               	movwf	??_LCDWriteCharacter+1
 14383  16F7  3000               	movlw	low (_fonts| (0+32768))
 14384  16F8  0776               	addwf	??_LCDWriteCharacter,w
 14385  16F9  0084               	movwf	4
 14386  16FA  3090               	movlw	high (_fonts| (0+32768))
 14387  16FB  3D77               	addwfc	??_LCDWriteCharacter+1,w
 14388  16FC  0085               	movwf	5
 14389  16FD  0800               	movf	0,w	;code access
 14390  16FE  00F8               	movwf	??_LCDWriteCharacter+2
 14391  16FF  0878               	movf	??_LCDWriteCharacter+2,w
 14392  1700  00F0               	movwf	LCDWrite@data
 14393  1701  3001               	movlw	1
 14394  1702  3193  2399  3196   	fcall	_LCDWrite
 14395                           
 14396                           ;lcd.c: 147: LCDWrite(1,fonts[base + 2]);
 14397  1705  087A               	movf	LCDWriteCharacter@base,w
 14398  1706  3E02               	addlw	2
 14399  1707  00F6               	movwf	??_LCDWriteCharacter
 14400  1708  3000               	movlw	0
 14401  1709  3D7B               	addwfc	LCDWriteCharacter@base+1,w
 14402  170A  00F7               	movwf	??_LCDWriteCharacter+1
 14403  170B  3000               	movlw	low (_fonts| (0+32768))
 14404  170C  0776               	addwf	??_LCDWriteCharacter,w
 14405  170D  0084               	movwf	4
 14406  170E  3090               	movlw	high (_fonts| (0+32768))
 14407  170F  3D77               	addwfc	??_LCDWriteCharacter+1,w
 14408  1710  0085               	movwf	5
 14409  1711  0800               	movf	0,w	;code access
 14410  1712  00F8               	movwf	??_LCDWriteCharacter+2
 14411  1713  0878               	movf	??_LCDWriteCharacter+2,w
 14412  1714  00F0               	movwf	LCDWrite@data
 14413  1715  3001               	movlw	1
 14414  1716  3193  2399  3196   	fcall	_LCDWrite
 14415                           
 14416                           ;lcd.c: 148: LCDWrite(1, 0x00);
 14417  1719  01F0               	clrf	LCDWrite@data
 14418  171A  3001               	movlw	1
 14419  171B  3193  2399         	fcall	_LCDWrite
 14420  171D  0008               	return
 14421  171E                     __end_of_LCDWriteCharacter:	
 14422                           
 14423                           	psect	text41
 14424  1321                     __ptext41:	
 14425 ;; *************** function ___wmul *****************
 14426 ;; Defined at:
 14427 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 14428 ;; Parameters:    Size  Location     Type
 14429 ;;  multiplier      2    0[COMMON] unsigned int 
 14430 ;;  multiplicand    2    2[COMMON] unsigned int 
 14431 ;; Auto vars:     Size  Location     Type
 14432 ;;  product         2    4[COMMON] unsigned int 
 14433 ;; Return value:  Size  Location     Type
 14434 ;;                  2    0[COMMON] unsigned int 
 14435 ;; Registers used:
 14436 ;;		wreg, status,2, status,0
 14437 ;; Tracked objects:
 14438 ;;		On entry : 0/0
 14439 ;;		On exit  : 0/0
 14440 ;;		Unchanged: 0/0
 14441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14442 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14443 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14444 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14445 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14446 ;;Total ram usage:        6 bytes
 14447 ;; Hardware stack levels used:    1
 14448 ;; This function calls:
 14449 ;;		Nothing
 14450 ;; This function is called by:
 14451 ;;		_readIAnalog
 14452 ;;		_LCDWriteCharacter
 14453 ;;		_main
 14454 ;;		_eval_poly
 14455 ;; This function uses a non-reentrant model
 14456 ;;
 14457                           
 14458                           
 14459                           ;psect for function ___wmul
 14460  1321                     ___wmul:	
 14461                           
 14462                           ;incstack = 0
 14463                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 14464  1321  01F4               	clrf	___wmul@product
 14465  1322  01F5               	clrf	___wmul@product+1
 14466  1323                     l2250:	
 14467  1323  1C70               	btfss	___wmul@multiplier,0
 14468  1324  2B29               	goto	l582
 14469  1325  0872               	movf	___wmul@multiplicand,w
 14470  1326  07F4               	addwf	___wmul@product,f
 14471  1327  0873               	movf	___wmul@multiplicand+1,w
 14472  1328  3DF5               	addwfc	___wmul@product+1,f
 14473  1329                     l582:	
 14474  1329  3001               	movlw	1
 14475  132A                     u2165:	
 14476  132A  35F2               	lslf	___wmul@multiplicand,f
 14477  132B  0DF3               	rlf	___wmul@multiplicand+1,f
 14478  132C  0B89               	decfsz	9,f
 14479  132D  2B2A               	goto	u2165
 14480  132E  3001               	movlw	1
 14481  132F                     u2175:	
 14482  132F  36F1               	lsrf	___wmul@multiplier+1,f
 14483  1330  0CF0               	rrf	___wmul@multiplier,f
 14484  1331  0B89               	decfsz	9,f
 14485  1332  2B2F               	goto	u2175
 14486  1333  0870               	movf	___wmul@multiplier,w
 14487  1334  0471               	iorwf	___wmul@multiplier+1,w
 14488  1335  1D03               	btfss	3,2
 14489  1336  2B23               	goto	l2250
 14490  1337  0875               	movf	___wmul@product+1,w
 14491  1338  00F1               	movwf	?___wmul+1
 14492  1339  0874               	movf	___wmul@product,w
 14493  133A  00F0               	movwf	?___wmul
 14494  133B  0008               	return
 14495  133C                     __end_of___wmul:	
 14496                           
 14497                           	psect	text42
 14498  1399                     __ptext42:	
 14499 ;; *************** function _LCDWrite *****************
 14500 ;; Defined at:
 14501 ;;		line 281 in file "lcd.c"
 14502 ;; Parameters:    Size  Location     Type
 14503 ;;  data_or_comm    1    wreg     unsigned char 
 14504 ;;  data            1    0[COMMON] unsigned char 
 14505 ;; Auto vars:     Size  Location     Type
 14506 ;;  data_or_comm    1    2[COMMON] unsigned char 
 14507 ;;  i               1    4[COMMON] unsigned char 
 14508 ;;  d               1    3[COMMON] unsigned char 
 14509 ;; Return value:  Size  Location     Type
 14510 ;;                  1    wreg      void 
 14511 ;; Registers used:
 14512 ;;		wreg, status,2, status,0
 14513 ;; Tracked objects:
 14514 ;;		On entry : 0/0
 14515 ;;		On exit  : 0/0
 14516 ;;		Unchanged: 0/0
 14517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14518 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14519 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14520 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14521 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14522 ;;Total ram usage:        5 bytes
 14523 ;; Hardware stack levels used:    1
 14524 ;; This function calls:
 14525 ;;		Nothing
 14526 ;; This function is called by:
 14527 ;;		_gotoXY
 14528 ;;		_LCDWriteCharacter
 14529 ;;		_LCDClear
 14530 ;;		_LCDInit
 14531 ;; This function uses a non-reentrant model
 14532 ;;
 14533                           
 14534                           
 14535                           ;psect for function _LCDWrite
 14536  1399                     _LCDWrite:	
 14537                           
 14538                           ;incstack = 0
 14539                           ; Regs used in _LCDWrite: [wreg+status,2+status,0]
 14540                           ;LCDWrite@data_or_command stored from wreg
 14541  1399  00F2               	movwf	LCDWrite@data_or_command
 14542                           
 14543                           ;lcd.c: 283: uint8_t i,d;
 14544                           ;lcd.c: 285: d=data;
 14545  139A  0870               	movf	LCDWrite@data,w
 14546  139B  00F1               	movwf	??_LCDWrite
 14547  139C  0871               	movf	??_LCDWrite,w
 14548  139D  00F3               	movwf	LCDWrite@d
 14549                           
 14550                           ;lcd.c: 287: if(data_or_command == 0)
 14551  139E  0872               	movf	LCDWrite@data_or_command,w
 14552  139F  1D03               	btfss	3,2
 14553  13A0  2BA4               	goto	l150
 14554                           
 14555                           ;lcd.c: 288: {
 14556                           ;lcd.c: 289: LATAbits.LATA2 = 0;
 14557  13A1  0020               	movlb	0	; select bank0
 14558  13A2  1116               	bcf	22,2	;volatile
 14559                           
 14560                           ;lcd.c: 290: }
 14561  13A3  2BA6               	goto	l151
 14562  13A4                     l150:	
 14563                           
 14564                           ;lcd.c: 291: else
 14565                           ;lcd.c: 292: {
 14566                           ;lcd.c: 293: LATAbits.LATA2 = 1;
 14567  13A4  0020               	movlb	0	; select bank0
 14568  13A5  1516               	bsf	22,2	;volatile
 14569  13A6                     l151:	
 14570                           
 14571                           ;lcd.c: 294: }
 14572                           ;lcd.c: 296: LATAbits.LATA1 = 0;
 14573  13A6  1096               	bcf	22,1	;volatile
 14574                           
 14575                           ;lcd.c: 298: for(i=0;i<8;i++)
 14576  13A7  01F4               	clrf	LCDWrite@i
 14577  13A8  3008               	movlw	8
 14578  13A9  0274               	subwf	LCDWrite@i,w
 14579  13AA  1803               	btfsc	3,0
 14580  13AB  2BBC               	goto	l153
 14581  13AC                     l152:	
 14582                           
 14583                           ;lcd.c: 299: {
 14584                           ;lcd.c: 300: LATAbits.LATA3 = 0;
 14585  13AC  1196               	bcf	22,3	;volatile
 14586                           
 14587                           ;lcd.c: 302: if(d&0x80)
 14588  13AD  1FF3               	btfss	LCDWrite@d,7
 14589  13AE  2BB0               	goto	l154
 14590                           
 14591                           ;lcd.c: 303: {
 14592                           ;lcd.c: 304: LATAbits.LATA3 = 1;
 14593  13AF  1596               	bsf	22,3	;volatile
 14594  13B0                     l154:	
 14595                           
 14596                           ;lcd.c: 305: }
 14597                           ;lcd.c: 307: LATAbits.LATA4 = 1;
 14598  13B0  1616               	bsf	22,4	;volatile
 14599                           
 14600                           ;lcd.c: 309: d<<=1;
 14601  13B1  1003               	clrc
 14602  13B2  0DF3               	rlf	LCDWrite@d,f
 14603                           
 14604                           ;lcd.c: 311: LATAbits.LATA4=0;
 14605  13B3  1216               	bcf	22,4	;volatile
 14606  13B4  3001               	movlw	1
 14607  13B5  00F1               	movwf	??_LCDWrite
 14608  13B6  0871               	movf	??_LCDWrite,w
 14609  13B7  07F4               	addwf	LCDWrite@i,f
 14610  13B8  3008               	movlw	8
 14611  13B9  0274               	subwf	LCDWrite@i,w
 14612  13BA  1C03               	skipc
 14613  13BB  2BAC               	goto	l152
 14614  13BC                     l153:	
 14615                           
 14616                           ;lcd.c: 312: }
 14617                           ;lcd.c: 314: LATAbits.LATA1 = 1;
 14618  13BC  1496               	bsf	22,1	;volatile
 14619  13BD  0008               	return
 14620  13BE                     __end_of_LCDWrite:	
 14621  007E                     btemp	set	126	;btemp
 14622  007E                     wtemp0	set	126


Data Sizes:
    Strings     14
    Constant    330
    Data        10
    BSS         91
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     74      79
    BANK1            80     33      80
    BANK2            80      0      49
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5             8      0       0
    BANK6             0      0       0
    BANK7             0      0       0
    BANK8             0      0       0
    BANK9             0      0       0
    BANK10            0      0       0
    BANK11            0      0       0
    BANK12            0      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> log@exponent(BANK0[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 27
		 -> log@coeff(CODE[27]), 

    LCDWriteString@characters	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_1(CODE[14]), 


Critical Paths under _main in COMMON

    _main->___awtoft
    _tempCalc->___awtoft
    _log->___awtoft
    ___ftmul->___awtoft
    ___ftadd->___awtoft
    _readIAnalog->___aldiv
    _readButton->_ADCRead
    _calculateCurrent3->___awtoft
    _calculateCurrent2->___awtoft
    _calculateCurrent1->___awtoft
    _calculateCurrent0->___awtoft
    ___fttol->___awtoft
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _SYSTEM_Initialize->_LCDClear
    _LCDInit->_LCDWrite
    _LCDClear->_gotoXY
    _LCDWriteInt->_LCDWriteCharacter
    _Battery_State_Machine->_LCDWriteString
    _gotoXY->_LCDWrite
    _LCDWriteString->_LCDWriteCharacter
    _LCDWriteCharacter->___wmul

Critical Paths under _main in BANK0

    _main->_tempCalc
    _tempCalc->_log
    _log->_eval_poly
    _eval_poly->___ftadd
    ___ftmul->___ftdiv
    ___ftsub->___ftadd
    ___ftadd->___ftmul
    _readIAnalog->___aldiv
    _calculateCurrent3->___fttol
    _calculateCurrent2->___fttol
    _calculateCurrent1->___fttol
    _calculateCurrent0->___fttol
    ___fttol->___ftdiv
    _Battery_State_Machine->_LCDWriteString

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                35    35      0  101212
                                             72 BANK0      2     2      0
                                              0 BANK1     33    33      0
                            _ADCRead
              _Battery_State_Machine
                           _LCDClear
                            _LCDInit
                  _LCDWriteCharacter
                        _LCDWriteInt
                 _PWM6_LoadDutyValue
                 _PWM7_LoadDutyValue
                  _SYSTEM_Initialize
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                            ___fttol
                             ___wmul
                  _calculateCurrent0
                  _calculateCurrent1
                  _calculateCurrent2
                  _calculateCurrent3
                         _cc_cv_mode
                             _gotoXY
                         _readButton
                        _readIAnalog
                           _tempCalc
 ---------------------------------------------------------------------------------
 (1) _tempCalc                                            11     9      2   34514
                                             61 BANK0     11     9      2
                            _ADCRead (ARG)
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftsub
                            ___fttol
                                _log
 ---------------------------------------------------------------------------------
 (2) _log                                                  6     3      3   17227
                                             55 BANK0      6     3      3
                           ___awtoft
                            ___ftadd
                             ___ftge
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _frexp                                                6     2      4     330
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) _eval_poly                                           10     3      7    7527
                                             45 BANK0     10     3      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             16    10      6    2961
                                             16 BANK0     16    10      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     322
                                              0 COMMON     9     3      6
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    3462
                                             45 BANK0      6     0      6
                            ___ftadd
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             13     7      6    3289
                                             32 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (1) _readIAnalog                                         24    22      2    1710
                                              9 COMMON     4     4      0
                                              6 BANK0     20    18      2
                            _ADCRead
                            ___aldiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     406
                                              0 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _readButton                                           2     2      0      22
                                              4 COMMON     2     2      0
                            _ADCRead
 ---------------------------------------------------------------------------------
 (2) _ADCRead                                              4     1      3      22
                                              0 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (1) _cc_cv_mode                                           6     6      0     528
                                              0 COMMON     6     6      0
 ---------------------------------------------------------------------------------
 (1) _calculateCurrent3                                    3     3      0    7270
                                             30 BANK0      3     3      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) _calculateCurrent2                                    3     3      0    7270
                                             30 BANK0      3     3      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) _calculateCurrent1                                    3     3      0    7270
                                             30 BANK0      3     3      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) _calculateCurrent0                                    3     3      0    7270
                                             30 BANK0      3     3      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             14    10      4     729
                                             16 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    4001
                                              0 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             6     3      3    2540
                                              8 COMMON     6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    1707
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    2     2      0    3820
                                             11 COMMON     2     2      0
                     _ADC_Initialize
         _Init_Battery_State_Machine
                           _LCDClear
                            _LCDInit
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _PWM_Initialize
                    _TMR2_Initialize
                    _TMR4_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR4_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               1     1      0      23
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LCDInit                                              1     1      0     803
                                              5 COMMON     1     1      0
                           _LCDWrite
 ---------------------------------------------------------------------------------
 (2) _LCDClear                                             3     3      0    2862
                                              8 COMMON     3     3      0
                           _LCDWrite
                             _gotoXY
 ---------------------------------------------------------------------------------
 (2) _Init_Battery_State_Machine                           2     2      0     132
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM7_LoadDutyValue                                   4     2      2      97
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _PWM6_LoadDutyValue                                   4     2      2      97
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _LCDWriteInt                                         16    11      5    7267
                                              0 BANK0     16    11      5
                            _ADCRead (ARG)
                  _LCDWriteCharacter
                            ___awdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     265
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     406
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (1) _Battery_State_Machine                                6     6      0    4538
                                              1 BANK0      6     6      0
                     _LCDWriteString
                             _gotoXY
 ---------------------------------------------------------------------------------
 (1) _gotoXY                                               3     2      1    2013
                                              5 COMMON     3     2      1
                           _LCDWrite
 ---------------------------------------------------------------------------------
 (2) _LCDWriteString                                       3     1      2    1953
                                             12 COMMON     2     0      2
                                              0 BANK0      1     1      0
                  _LCDWriteCharacter
 ---------------------------------------------------------------------------------
 (2) _LCDWriteCharacter                                    6     6      0    1855
                                              6 COMMON     6     6      0
                           _LCDWrite
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     940
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) _LCDWrite                                             5     4      1     803
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCRead
   _Battery_State_Machine
     _LCDWriteString
       _LCDWriteCharacter
         _LCDWrite
         ___wmul
     _gotoXY
       _LCDWrite
   _LCDClear
     _LCDWrite
     _gotoXY
       _LCDWrite
   _LCDInit
     _LCDWrite
   _LCDWriteCharacter
     _LCDWrite
     ___wmul
   _LCDWriteInt
     _ADCRead (ARG)
     _LCDWriteCharacter (ARG)
       _LCDWrite
       ___wmul
     ___awdiv (ARG)
     ___lwmod (ARG)
   _PWM6_LoadDutyValue
   _PWM7_LoadDutyValue
   _SYSTEM_Initialize
     _ADC_Initialize
     _Init_Battery_State_Machine
     _LCDClear
       _LCDWrite
       _gotoXY
         _LCDWrite
     _LCDInit
       _LCDWrite
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM_Initialize
     _TMR2_Initialize
     _TMR4_Initialize
   ___awtoft
     ___ftpack
   ___ftdiv
     ___awtoft (ARG)
       ___ftpack
     ___ftpack (ARG)
     ___ftpack (ARG)
   ___ftmul
     ___awtoft (ARG)
       ___ftpack
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftpack (ARG)
     _frexp (ARG)
   ___fttol
     ___awtoft (ARG)
       ___ftpack
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
   ___wmul
   _calculateCurrent0
     ___awtoft
       ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
   _calculateCurrent1
     ___awtoft
       ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
   _calculateCurrent2
     ___awtoft
       ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
   _calculateCurrent3
     ___awtoft
       ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
   _cc_cv_mode
   _gotoXY
     _LCDWrite
   _readButton
     _ADCRead
   _readIAnalog
     _ADCRead
     ___aldiv
     ___wmul
   _tempCalc
     _ADCRead (ARG)
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
       _frexp (ARG)
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftsub (ARG)
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
     ___fttol (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
     _log (ARG)
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       _eval_poly
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___wmul
       _frexp

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4A      4F       5       98.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     21      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      31       9       61.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5                8      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      DE      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BANK8                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BANK9                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BANK10               0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BANK11               0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      DE      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sun Jul 08 02:59:23 2018

                       _stateCounter 0141                                    _j 006C  
                                  _x 00CC               LCDWriteInt@fieldLength 0022  
            __size_of_PWM_Initialize 0015                          __CFG_CP$OFF 0000  
                                 l60 1304                                   l57 12FD  
                       ___awdiv@sign 0076                  ___wmul@multiplicand 0072  
        __size_of_PWM6_LoadDutyValue 0016                         ___ftadd@exp1 004C  
                       ___ftadd@exp2 004B                          __CFG_LVP$ON 0000  
                       ___ftadd@sign 004A                                  l150 13A4  
                                l151 13A6                                  l152 13AC  
                                l153 13BC                                  l154 13B0  
                                l360 0BF1                        LCDClear@index 0079  
                                l637 088C                                  l582 1329  
                                l750 085C                                  l751 0864  
                                l743 0849                                  l834 0083  
                                l774 0D40                                  _GIE 005F  
                                _RB2 006A                         __CFG_CPD$OFF 0000  
                                _log 09A6                      __end_of_ADCRead 130B  
                    _TMR2_Initialize 12AC                         __CFG_BORV$LO 0000  
                                wreg 0009                      __end_of_LCDInit 14EF  
                       ?_LCDWriteInt 0020                         __CFG_ZCD$OFF 0000  
                       ___ftdiv@cntr 002A                         ___ftdiv@sign 002F  
                               l3000 00E4                                 l3002 00F6  
                               l2202 0826                                 l3020 0176  
                               l3012 014D                                 l2212 084E  
                               l2204 0830                                 l2300 0D1B  
                               l3022 0178                                 l3030 01AB  
                               l2214 0856                                 l2206 0835  
                               l2310 0D3C                                 l2302 0D1F  
                               l2250 1323                                 l3034 01C4  
                               l3026 0192                                 l2314 0D52  
                               l3202 03C4                                 l3130 0239  
                               l2404 1383                                 l3052 0BFF  
                               l2308 0D32                                 l2412 1505  
                               l3124 0233                                 l3116 021F  
                               l3062 0C4F                                 l2318 0D64  
                               l3222 0411                                 l3142 0283  
                               l3080 15C3                                 l3056 0C0C  
                               l2328 0D7F                                 l2272 0CD0  
                               l2416 151B                                 l2360 0AC6  
                               l2344 0A83                                 l3232 042F  
                               l3208 03DE                                 l3136 0257  
                               l2514 12CD                                 l2522 13CB  
                               l3074 157E                                 l2290 0CF9  
                               l2338 0A6D                                 l3092 164D  
                               l2268 0CC9                                 l2372 0AE2  
                               l2356 0ABE                                 l2436 153C  
                               l3244 045D                                 l3228 0428  
                               l3172 035B                                 l2198 081F  
                               l3086 1608                                 l2278 0CDF  
                               l2454 1777                                 l2528 13DF  
                               l2800 005F                                 l2296 0D0C  
                               l2368 0ADA                                 l2632 09D8  
                               l3184 0392                                 l2722 16C5  
                               l2714 16B4                                 l2706 1696  
                               l2810 0086                                 l2802 006D  
                               l2298 0D16                                 l2626 09C5  
                               l3178 0378                                 l2708 16A2  
                               l2732 0914                                 l2900 17FD  
                               l2660 08AD                                 l2652 089D  
                               l3364 07AD                                 l3196 03A7  
                               l2718 16BD                                 l2814 0094  
                               l2902 17FE                                 l2670 08DB  
                               l2662 08BB                                 l2832 1402  
                               l2760 0984                                 l2752 096B  
                               l2808 007A                                 l3368 07B6  
                               l2690 1683                                 l2826 13EA  
                               l2930 0B5F                                 l2738 092A  
                               l2674 08E6                                 l2828 13F6  
                               l2836 140B                                 l2940 0B75  
                               l2772 1344                                 l2934 0B63  
                               l2918 0B2B                                 l2782 002F  
                               l2678 08F4                                 l2854 0FD7  
                               l2696 168E                                 l2952 0BAE  
                               l2936 0B67                                 l2928 0B32  
                               l2880 17D0                                 l2946 0B79  
                               l2938 0B6F                                 l2874 17BC  
                               l2948 0BA0                                 l2868 17A2  
                               l2894 17E5                                 l2878 17CE  
                               l2888 17DC                                 ?_log 0057  
                               l2998 00DC                                 STR_1 181B  
                               u2015 082B                                 u2035 0844  
                               _LATA 0016                                 _LATB 0017  
                               u2055 0851                                 _LATC 0018  
                               u3025 0060                                 u3115 13FC  
                               u2315 0D0D                                 u3300 0B15  
                               u2165 132A                                 u3125 1403  
                               u3205 0FE3                                 u2175 132F  
                               u4007 14AC                                 u2095 086B  
                               u3055 007B                                 u3215 1790  
                               u4017 01E3                                 u3225 179C  
                               u3145 0ECA                                 u2345 0D20  
                               _T2PR 028D                                 u3235 17AC  
                               u3155 0F24                                 u2515 0AE3  
                               u3405 0810                                 u3245 17B8  
                               u3165 0F62                                 u2285 0CFA  
                               u2525 0AE9                                 u2445 0A8F  
                               u3095 13ED                                 u3255 17C6  
                               u3175 0FB1                                 u2375 0D33  
                               u2455 0A9F                                 u3425 00B8  
                               u2650 1479                                 _T4PR 0293  
                               u3435 00CD                                 u2635 13C9  
                               u2475 0AC7                                 u3365 0B8E  
                               u2645 13DD                                 u3605 0C69  
                               u2725 08B0                                 u2485 0ACD  
                               u3465 0120                                 u2825 1699  
                               u3545 0BDE                                 u2745 08BC  
                               u3395 131A                                 u2915 093C  
                               u3635 1578                                 u2755 08D0  
                               u2845 16A3                                 u2925 094C  
                               u3645 15BD                                 u2765 08DC  
                               u3725 0349                                 u3495 0169  
                               u2855 16AD                                 u2935 096C  
                               u3655 1602                                 u3815 03A4  
                               u2865 16B5                                 u2945 097B  
                               u3665 1647                                 u3585 0C26  
                               u2955 0985                                 u3915 0421  
                               u3845 03B5                                 u3765 0369  
                               u3865 03D3                                 u3785 0387  
                               u2995 0036                                 u3895 040A  
                               u3977 0227                                 u3987 17EF  
                               u3997 149D                  tempCalc@analogValue 005D  
                               _WPUA 0F39                                 _WPUB 0F44  
                               _WPUC 0F4F                                 _WPUE 0F65  
                               _Imin 013D                                 _Iref 00BC  
                               _Iout 0147                         __CFG_WRT$OFF 0000  
                      __CFG_FCMEN$ON 0000                                 _Vref 00B8  
                               _main 01EB                         ___ftpack@arg 0070  
                       ___ftpack@exp 0073                                 fsr0h 0005  
                               fsr1h 0007                                 indf0 0000  
                               fsr0l 0004                                 indf1 0001  
                               fsr1l 0006                                 btemp 007E  
                               log@x 0057                         ?_readIAnalog 0026  
                      __CFG_BOREN$ON 0000                                 start 0002  
                      __CFG_CSWEN$ON 0000                        __CFG_MCLRE$ON 0000  
                       ___ftmul@cntr 003E                         ___ftmul@sign 003F  
                   __end_of_LCDClear 13E4                         ___fttol@exp1 003D  
                              ??_log 005A                         ___fttol@lval 0039  
__size_of_Init_Battery_State_Machine 0034       __size_of_OSCILLATOR_Initialize 0009  
                   __end_of_LCDWrite 13BE        __end_of_OSCILLATOR_Initialize 12A0  
                    __end_of___aldiv 08FD                                _ADACQ 009D  
                              _ADACT 0099                                _ADCAP 009B  
                              ?_main 0070                                _ADCLK 0098  
                              _ADPCH 009E                                _ADREF 009A  
                    __end_of___awdiv 16CA                                _ADPRE 009C  
                    __end_of___ftadd 0D97                        __CFG_WDTE$OFF 0000  
                              _ADRPT 010D                      __end_of___ftdiv 09A6  
                    __end_of___ftmul 0B0A                      ___awdiv@divisor 0070  
                    __end_of___ftsub 135A                      __end_of___fttol 009D  
                              _T2CON 028E                                _LATA5 00B5  
                              _T4CON 0294                                _T2HLT 028F  
                              _T4HLT 0295                                _T2TMR 028C  
                              _T2RST 0291                      __end_of___lwmod 1410  
                              _T4TMR 0292                                _T4RST 0297  
                    ___awdiv@counter 0075                                _OSCEN 0891  
                              _TRISA 0011                                _TRISB 0012  
                              _TRISC 0013                      _TMR4_Initialize 0008  
                              _Imode 00EE               ?_Battery_State_Machine 0070  
                              _cc_cv 00C6                        ___awtoft@sign 007D  
                              _frexp 152A                                _fonts 1000  
                              _errno 0145                        ___ftpack@sign 0074  
                              main@j 00E9                         main@slowLoop 00DA  
                              status 0003                                wtemp0 007E  
                    __initialization 07B9                          log@exponent 005B  
                       __end_of_main 07B9              __end_of_TMR2_Initialize 12BA  
                          ??_ADCRead 0073                               ??_main 0068  
                      ___fttol@sign1 0038                            ??_LCDInit 0075  
             Battery_State_Machine@z 0026              LCDWrite@data_or_command 0072  
                             _ADCON0 0093                               _ADCON1 0094  
                             _ADCON2 0095                               _ADCON3 0096  
                             ?_frexp 0070                               _ADLTHH 010F  
                             _ADLTHL 010E                               _ADRESH 008D  
                             _ADRESL 008C                               _ADSTAT 0097  
                             _ADUTHH 0111                     ___awdiv@dividend 0072  
                             _ADUTHL 0110                     __end_of___awtoft 1399  
                             _ANSELA 0F38                               _ANSELB 0F43  
                             _ANSELC 0F4E                     __end_of___ftpack 087B  
                             _RB0PPS 0F18                               _RA6PPS 0F16  
                             _RA7PPS 0F17                       __CFG_WDTCCS$SC 0000  
                             _FVRCON 090C                               _OSCFRQ 0893  
                     __CFG_PWRTE$OFF 0000                       _LCDWriteString 12CD  
                       _CCPTMRS1bits 021F                               ___ftge 14EF  
                          ??___aldiv 0078                               ___wmul 1321  
                          ??___awdiv 0074                            ??___ftadd 0046  
                     __CFG_STVREN$ON 0000                       _PWM_Initialize 12E1  
                          ??___ftdiv 0026                            ??___ftmul 0036  
                          ??___ftsub 007E                            ??___fttol 0034  
                          ??___lwmod 0074                               _gotoXY 12BA  
                             _button 006E              __end_of_TMR4_Initialize 0016  
                   ___awdiv@quotient 0077                               _totals 0120  
              ___ftmul@f3_as_product 003B                     __end_of_tempCalc 0EB4  
                       LCDWrite@data 0070                         LCDWriteInt@i 002F  
                       LCDWriteInt@j 002E                            ?_LCDClear 0070  
                  _SYSTEM_Initialize 147B                 __size_of_LCDWriteInt 00B9  
                   __end_oflog@coeff 181B              __end_of__initialization 07FD  
                         ___ftadd@f1 0040                           ___ftadd@f2 0043  
                         ___ftge@ff1 0070                           ___ftge@ff2 0073  
                          ?_LCDWrite 0070                   ?_SYSTEM_Initialize 0070  
             __end_of_LCDWriteString 12E1                         eval_poly@res 0054  
                         ___ftdiv@f1 0023                           ___ftdiv@f2 0020  
                         ___ftdiv@f3 002B                           ___awtoft@c 0078  
                         ___ftmul@f1 0030                           ___ftmul@f2 0033  
             __end_of_PWM_Initialize 12F6                 __size_of_readIAnalog 014C  
                         ___ftsub@f1 0050                           ___ftsub@f2 004D  
                         ___fttol@f1 0030                       __pcstackCOMMON 0070  
                       __pidataBANK1 0006                         __pidataBANK2 128F  
                ??_SYSTEM_Initialize 007B                        __end_of_frexp 1565  
                      __end_of_fonts 112F                            LCDWrite@d 0073  
                          LCDWrite@i 0074                     ?_TMR2_Initialize 0070  
                         _cc_cv_mode 0BC3          __size_of_PWM7_LoadDutyValue 0016  
                     main@efficiency 00E3                    LCDWriteInt@F14387 0138  
                  _calculateCurrent0 1565                    _calculateCurrent1 15AA  
                  _calculateCurrent2 15EF                    _calculateCurrent3 1634  
                            ??_frexp 0074            __end_of_SYSTEM_Initialize 14B4  
                         __pbssBANK0 006A                           __pbssBANK1 00A0  
                         __pbssBANK2 0120                   ?_calculateCurrent0 0070  
                 ?_calculateCurrent1 0070                   ?_calculateCurrent2 0070  
                 ?_calculateCurrent3 0070                         _batteryState 00C8  
                 __size_of_eval_poly 0060                           ??_LCDClear 0078  
                     main@faultCount 00D1                           ??_LCDWrite 0071  
                    ?_LCDWriteString 007C                  ??_calculateCurrent0 003E  
                ??_calculateCurrent1 003E                  ??_calculateCurrent2 003E  
                ??_calculateCurrent3 003E                      ?_PWM_Initialize 0070  
                         __pmaintext 01EB                              ?___ftge 0070  
                            ?___wmul 0070                      __CFG_PPS1WAY$ON 0000  
         __end_of_PWM6_LoadDutyValue 1321                              ?_gotoXY 0075  
                            _ADCRead 12F6                     ?_TMR4_Initialize 0070  
                          ?___awtoft 0078                            ?___ftpack 0070  
                            _ADSTPTH 0113                              _ADSTPTL 0112  
           __CFG_SCANE$not_available 0000                  __CFG_RSTOSC$HFINT32 0000  
            __size_of_ADC_Initialize 001F              ??_Battery_State_Machine 0021  
                            _LCDInit 14B4            __end_of_calculateCurrent0 15AA  
          __end_of_calculateCurrent1 15EF            __end_of_calculateCurrent2 1634  
          __end_of_calculateCurrent3 1679                              _OSCCON1 088D  
                            _OSCCON3 088F                              _OSCTUNE 0892  
                            _PWM6DCH 038D                              _PWM6DCL 038C  
                            _PWM7DCH 0391                              _PWM7DCL 0390  
                            _PWM6CON 038E                              _PWM7CON 0392  
                            _PPSLOCK 0E8F                       main@menuButton 00E6  
                     main@dutyCycle1 00D8                       main@dutyCycle6 00EA  
                     main@dutyCycle7 00EC                           _lastButton 006D  
                          ?_tempCalc 005D                              ___aldiv 087B  
                    __size_of___ftge 003B                              ___awdiv 1679  
                            ___ftadd 0CA1                           _readButton 177E  
                            ___ftdiv 08FD                      __size_of___wmul 001B  
                            ___ftmul 0A56                              ___ftsub 133C  
                            ___fttol 0016                   main@displayRefresh 00DB  
                            ___lwmod 13E4                      __size_of_gotoXY 0013  
                         ??___awtoft 007B                           ??___ftpack 0075  
                  __end_of_eval_poly 177E                              __ptext1 0D97  
                            __ptext2 09A6                              __ptext3 152A  
                            __ptext4 171E                              __ptext5 0A56  
                            __ptext6 14EF                              __ptext7 133C  
                            __ptext8 0CA1                              __ptext9 0EB4  
                        ?_cc_cv_mode 0070                _OSCILLATOR_Initialize 1297  
                          _T2CONbits 028E                              _current 00A8  
                       __size_of_log 00B0                       ADCRead@channel 0073  
                   ___aldiv@dividend 0074                            _T4CONbits 0294  
           ??_PIN_MANAGER_Initialize 0070                              _samples 2198  
         __size_of_SYSTEM_Initialize 0039                              clrloop0 12A1  
                            _voltage 00B0         ??_Init_Battery_State_Machine 0070  
               end_of_initialization 07FD                LCDWriteCharacter@base 007A  
                            gotoXY@x 0077                              gotoXY@y 0075  
                         ??_tempCalc 007E                     ___aldiv@quotient 0022  
                  _LCDWriteCharacter 16CA                __CFG_WDTCPS$WDTCPS_31 0000  
                 ?_LCDWriteCharacter 0070           __size_of_calculateCurrent0 0045  
         __size_of_calculateCurrent1 0045           __size_of_calculateCurrent2 0045  
         __size_of_calculateCurrent3 0045                            _TRISAbits 0011  
                ??_LCDWriteCharacter 0076                     __CFG_FEXTOSC$OFF 0000  
                        ___ftdiv@exp 002E                  __size_of_cc_cv_mode 00DE  
                  __size_of_LCDClear 0026           LCDWriteCharacter@character 0079  
                  __size_of_LCDWrite 0025                          ___ftmul@exp 003A  
          __end_of_LCDWriteCharacter 171E                          ?_readButton 0070  
          readIAnalog@analog_channel 0079                       __end_of___ftge 152A  
                          _VHoldMode 00C4                       __end_of___wmul 133C  
                     _ADC_Initialize 135A                       __end_of_gotoXY 12CD  
             ?_OSCILLATOR_Initialize 0070                            _IminCount 00C0  
                start_initialization 07B9                           eval_poly@d 0050  
                         eval_poly@n 0052                           eval_poly@x 004D  
                  main@faultNotReset 00D3      __size_of_PIN_MANAGER_Initialize 0037  
                        __end_of_log 0A56                        ??_LCDWriteInt 0025  
                   ??_LCDWriteString 0020                           frexp@value 0070  
                   ??_PWM_Initialize 0070                        ??_readIAnalog 0028  
                    main@batteryTemp 00CF                     __CFG_LPBOREN$OFF 0000  
                           ??___ftge 0076                    tempCalc@steinhart 0065  
                           ??___wmul 0074               __end_of_ADC_Initialize 1379  
                      _tempCalc$1188 0062                          __pdataBANK1 00EE  
                        __pdataBANK2 0149           __end_of_PWM7_LoadDutyValue 0817  
                           ??_gotoXY 0076                             ?_ADCRead 0070  
       PWM7_LoadDutyValue@dutyCycle7 0070                    __size_of___awtoft 0020  
                           ?_LCDInit 0070                    __size_of___ftpack 0064  
                        __pbssBIGRAM 2198       __size_of_Battery_State_Machine 014E  
      __end_of_Battery_State_Machine 01EB                            ___latbits 0002  
                      __pcstackBANK0 0020                        __pcstackBANK1 00CD  
                 _PWM6_LoadDutyValue 130B             __size_of_TMR2_Initialize 000E  
 __end_of_Init_Battery_State_Machine 1444           _Init_Battery_State_Machine 1410  
                __size_of_readButton 0082                  ?_PWM6_LoadDutyValue 0070  
                __end_of_LCDWriteInt 0BC3                            _main$1190 00D5  
                          _main$1191 00E1                            _main$1189 00DE  
             _PIN_MANAGER_Initialize 1444           __size_of_LCDWriteCharacter 0054  
                           ?___aldiv 0070                  __end_of_readIAnalog 1000  
                  __size_of_tempCalc 011D                             ?___awdiv 0070  
                           ?___ftadd 0040                             ?___ftdiv 0020  
                           ?___ftmul 0030                             ?___ftsub 004D  
                           ?___fttol 0030                     LCDWriteInt@value 0020  
                           ?___lwmod 0070                      ?_ADC_Initialize 0070  
               ??_PWM6_LoadDutyValue 0072                         ??_cc_cv_mode 0070  
                          _eval_poly 171E             __size_of_TMR4_Initialize 000E  
                     __size_of_frexp 003B                             _T2CLKCON 0290  
                           _T4CLKCON 0296                          cc_cv_mode@z 0075  
                           _LCDClear 13BE                      ___aldiv@divisor 0070  
                    ___aldiv@counter 0020                       ___wmul@product 0074  
                           _LATAbits 0016                             _LCDWrite 1399  
                          clear_ram0 12A0                             _PIE0bits 0716  
                 __end_of_cc_cv_mode 0CA1                             _PIR4bits 0710  
                   readIAnalog@value 007B                            main@MPPT0 00DC  
                          main@MPPT1 00E7                     __size_of_ADCRead 0015  
                         _ADCON0bits 0093                    ___wmul@multiplier 0070  
                         ?_eval_poly 004D                     __size_of_LCDInit 003B  
                           _Ianalogs 00A0                          _LCDWriteInt 0B0A  
        Init_Battery_State_Machine@z 0071                    ??_TMR2_Initialize 0070  
                        _readIAnalog 0EB4                            frexp@eptr 0073  
                           _Vanalogs 0130                         ??_readButton 0074  
            ??_OSCILLATOR_Initialize 0070                 LCDWriteInt@numPlaces 0023  
                   __size_of___aldiv 0082                     __size_of___awdiv 0051  
                   __size_of___ftadd 00F6                     __size_of___ftdiv 00A9  
                   __size_of___ftmul 00B4                     __size_of___ftsub 001E  
                   __size_of___fttol 0087                     __size_of___lwmod 002C  
                        _readButtons 006A                             ___awtoft 1379  
                           ___ftpack 0817                             _channels 0149  
                           __ptext10 087B                             __ptext11 177E  
                           __ptext20 1379                             __ptext12 12F6  
                           __ptext21 0817                             __ptext13 0BC3  
                           __ptext30 1410                             __ptext22 147B  
                           __ptext14 1634                             __ptext31 135A  
                           __ptext23 0008                             __ptext15 15EF  
                           __ptext40 16CA                             __ptext32 0801  
                           __ptext24 12AC                             __ptext16 15AA  
                           __ptext41 1321                             __ptext33 130B  
                           __ptext25 12E1                             __ptext17 1565  
                           __ptext42 1399                             __ptext34 0B0A  
                           __ptext26 1444                             __ptext18 0016  
                           __ptext35 13E4                             __ptext27 1297  
                           __ptext19 08FD                             __ptext36 1679  
                           __ptext28 14B4                             __ptext37 009D  
                           __ptext29 13BE                             __ptext38 12BA  
                           __ptext39 12CD                      LCDWriteInt@sign 0024  
                          tempCalc@R 005F                   __end_of_readButton 1800  
                  ??_TMR4_Initialize 0070                        __size_of_main 05CE  
               __CFG_WDTCWS$WDTCWS_7 0000                             _tempCalc 0D97  
        PIN_MANAGER_Initialize@state 0070                             log@coeff 1800  
                        ??_eval_poly 007E                          _sampleIndex 00CA  
                 _PWM7_LoadDutyValue 0801          ?_Init_Battery_State_Machine 0070  
                   ___lwmod@dividend 0072                       LCDWriteInt@str 0029  
            ?_PIN_MANAGER_Initialize 0070                  ?_PWM7_LoadDutyValue 0070  
                  __CFG_CLKOUTEN$OFF 0000                          _PPSLOCKbits 0E8F  
                   ??_ADC_Initialize 0070         PWM6_LoadDutyValue@dutyCycle6 0070  
                      __pstringtext1 1000                        __pstringtext2 1800  
                      __pstringtext3 0000                 ??_PWM7_LoadDutyValue 0072  
                    ___lwmod@divisor 0070                      ___lwmod@counter 0075  
           LCDWriteString@characters 007C                         ___aldiv@sign 0021  
                 readIAnalog@channel 0026                _Battery_State_Machine 009D  
     __end_of_PIN_MANAGER_Initialize 147B                        main@IOutTotal 00CD  
            __size_of_LCDWriteString 0014  
