

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Jul 10 16:57:54 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F18855
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	stringtext1,global,class=STRCODE,delta=2
     7                           	psect	stringtext2,global,class=STRCODE,delta=2
     8                           	psect	stringtext3,global,class=STRCODE,delta=2
     9                           	psect	stringtext4,global,class=STRCODE,delta=2
    10                           	psect	stringtext5,global,class=STRCODE,delta=2
    11                           	psect	cinit,global,class=CODE,merge=1,delta=2
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    17                           	psect	clrtext,global,class=CODE,delta=2
    18                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    24                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    25                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    26                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    27                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    28                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    29                           	psect	text8,local,class=CODE,merge=1,delta=2
    30                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    31                           	psect	text10,local,class=CODE,merge=1,delta=2
    32                           	psect	text11,local,class=CODE,merge=1,delta=2
    33                           	psect	text12,local,class=CODE,merge=1,delta=2
    34                           	psect	text13,local,class=CODE,merge=1,delta=2
    35                           	psect	text14,local,class=CODE,merge=1,delta=2
    36                           	psect	text15,local,class=CODE,merge=1,delta=2
    37                           	psect	text16,local,class=CODE,merge=1,delta=2
    38                           	psect	text17,local,class=CODE,merge=1,delta=2,group=2
    39                           	psect	text18,local,class=CODE,merge=1,delta=2
    40                           	psect	text19,local,class=CODE,merge=1,delta=2
    41                           	psect	text20,local,class=CODE,merge=1,delta=2
    42                           	psect	text21,local,class=CODE,merge=1,delta=2
    43                           	psect	text22,local,class=CODE,merge=1,delta=2
    44                           	psect	text23,local,class=CODE,merge=1,delta=2
    45                           	psect	text24,local,class=CODE,merge=1,delta=2
    46                           	psect	text25,local,class=CODE,merge=1,delta=2
    47                           	psect	text26,local,class=CODE,merge=1,delta=2
    48                           	psect	text27,local,class=CODE,merge=1,delta=2
    49                           	psect	text28,local,class=CODE,merge=1,delta=2
    50                           	psect	text29,local,class=CODE,merge=1,delta=2
    51                           	psect	text30,local,class=CODE,merge=1,delta=2
    52                           	psect	text31,local,class=CODE,merge=1,delta=2
    53                           	psect	text32,local,class=CODE,merge=1,delta=2
    54                           	psect	text33,local,class=CODE,merge=1,delta=2,group=2
    55                           	psect	text34,local,class=CODE,merge=1,delta=2,group=2
    56                           	psect	text35,local,class=CODE,merge=1,delta=2
    57                           	psect	text36,local,class=CODE,merge=1,delta=2,group=2
    58                           	psect	text37,local,class=CODE,merge=1,delta=2
    59                           	psect	text38,local,class=CODE,merge=1,delta=2
    60                           	psect	text39,local,class=CODE,merge=1,delta=2,group=2
    61                           	psect	text40,local,class=CODE,merge=1,delta=2,group=2
    62                           	psect	text41,local,class=CODE,merge=1,delta=2,group=2
    63                           	psect	text42,local,class=CODE,merge=1,delta=2,group=2
    64                           	dabs	1,0x620,48
    65                           	dabs	1,0x5A0,80
    66                           	dabs	1,0x520,80
    67                           	dabs	1,0x4A0,80
    68                           	dabs	1,0x420,80
    69                           	dabs	1,0x3A0,80
    70                           	dabs	1,0x320,80
    71                           	dabs	1,0x2A8,72
    72                           	dabs	1,0x2198,0,_samples
    73                           	dabs	1,0x7E,2
    74  0000                     
    75                           ; Version 1.45
    76                           ; Generated 16/11/2017 GMT
    77                           ; 
    78                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    79                           ; All rights reserved.
    80                           ; 
    81                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    82                           ; 
    83                           ; Redistribution and use in source and binary forms, with or without modification, are
    84                           ; permitted provided that the following conditions are met:
    85                           ; 
    86                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    87                           ;        conditions and the following disclaimer.
    88                           ; 
    89                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    90                           ;        of conditions and the following disclaimer in the documentation and/or other
    91                           ;        materials provided with the distribution.
    92                           ; 
    93                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    94                           ;        software without specific prior written permission.
    95                           ; 
    96                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    97                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    98                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    99                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   100                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   101                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   102                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   103                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   104                           ; 
   105                           ; 
   106                           ; Code-generator required, PIC16F18855 Definitions
   107                           ; 
   108                           ; SFR Addresses
   109  0000                     	;# 
   110  0001                     	;# 
   111  0002                     	;# 
   112  0003                     	;# 
   113  0004                     	;# 
   114  0005                     	;# 
   115  0006                     	;# 
   116  0007                     	;# 
   117  0008                     	;# 
   118  0009                     	;# 
   119  000A                     	;# 
   120  000B                     	;# 
   121  000C                     	;# 
   122  000D                     	;# 
   123  000E                     	;# 
   124  0010                     	;# 
   125  0011                     	;# 
   126  0012                     	;# 
   127  0013                     	;# 
   128  0016                     	;# 
   129  0017                     	;# 
   130  0018                     	;# 
   131  001C                     	;# 
   132  001C                     	;# 
   133  001D                     	;# 
   134  001D                     	;# 
   135  001E                     	;# 
   136  001F                     	;# 
   137  008C                     	;# 
   138  008C                     	;# 
   139  008D                     	;# 
   140  008E                     	;# 
   141  008E                     	;# 
   142  008F                     	;# 
   143  0090                     	;# 
   144  0090                     	;# 
   145  0091                     	;# 
   146  0093                     	;# 
   147  0094                     	;# 
   148  0095                     	;# 
   149  0096                     	;# 
   150  0097                     	;# 
   151  0098                     	;# 
   152  0099                     	;# 
   153  009A                     	;# 
   154  009B                     	;# 
   155  009C                     	;# 
   156  009D                     	;# 
   157  009E                     	;# 
   158  010C                     	;# 
   159  010D                     	;# 
   160  010E                     	;# 
   161  010E                     	;# 
   162  010F                     	;# 
   163  0110                     	;# 
   164  0110                     	;# 
   165  0111                     	;# 
   166  0112                     	;# 
   167  0112                     	;# 
   168  0113                     	;# 
   169  0114                     	;# 
   170  0114                     	;# 
   171  0115                     	;# 
   172  0116                     	;# 
   173  0116                     	;# 
   174  0117                     	;# 
   175  0119                     	;# 
   176  0119                     	;# 
   177  0119                     	;# 
   178  011A                     	;# 
   179  011A                     	;# 
   180  011A                     	;# 
   181  011B                     	;# 
   182  011B                     	;# 
   183  011B                     	;# 
   184  011B                     	;# 
   185  011B                     	;# 
   186  011C                     	;# 
   187  011C                     	;# 
   188  011C                     	;# 
   189  011D                     	;# 
   190  011D                     	;# 
   191  011D                     	;# 
   192  011E                     	;# 
   193  011E                     	;# 
   194  011E                     	;# 
   195  011F                     	;# 
   196  011F                     	;# 
   197  011F                     	;# 
   198  011F                     	;# 
   199  011F                     	;# 
   200  018C                     	;# 
   201  018D                     	;# 
   202  018E                     	;# 
   203  018F                     	;# 
   204  0190                     	;# 
   205  0191                     	;# 
   206  0192                     	;# 
   207  0196                     	;# 
   208  0197                     	;# 
   209  0198                     	;# 
   210  0199                     	;# 
   211  019A                     	;# 
   212  019B                     	;# 
   213  019C                     	;# 
   214  020C                     	;# 
   215  020C                     	;# 
   216  020D                     	;# 
   217  020E                     	;# 
   218  020F                     	;# 
   219  020F                     	;# 
   220  0210                     	;# 
   221  0210                     	;# 
   222  0211                     	;# 
   223  0211                     	;# 
   224  0212                     	;# 
   225  0212                     	;# 
   226  0213                     	;# 
   227  0214                     	;# 
   228  0215                     	;# 
   229  0215                     	;# 
   230  0216                     	;# 
   231  0216                     	;# 
   232  0217                     	;# 
   233  0217                     	;# 
   234  0218                     	;# 
   235  0218                     	;# 
   236  0219                     	;# 
   237  021A                     	;# 
   238  021B                     	;# 
   239  021B                     	;# 
   240  021C                     	;# 
   241  021C                     	;# 
   242  021D                     	;# 
   243  021D                     	;# 
   244  021E                     	;# 
   245  021F                     	;# 
   246  028C                     	;# 
   247  028C                     	;# 
   248  028D                     	;# 
   249  028D                     	;# 
   250  028E                     	;# 
   251  028F                     	;# 
   252  0290                     	;# 
   253  0290                     	;# 
   254  0291                     	;# 
   255  0292                     	;# 
   256  0292                     	;# 
   257  0293                     	;# 
   258  0293                     	;# 
   259  0294                     	;# 
   260  0295                     	;# 
   261  0296                     	;# 
   262  0296                     	;# 
   263  0297                     	;# 
   264  0298                     	;# 
   265  0298                     	;# 
   266  0299                     	;# 
   267  0299                     	;# 
   268  029A                     	;# 
   269  029B                     	;# 
   270  029C                     	;# 
   271  029C                     	;# 
   272  029D                     	;# 
   273  030C                     	;# 
   274  030C                     	;# 
   275  030D                     	;# 
   276  030E                     	;# 
   277  030F                     	;# 
   278  0310                     	;# 
   279  0310                     	;# 
   280  0311                     	;# 
   281  0312                     	;# 
   282  0313                     	;# 
   283  0314                     	;# 
   284  0314                     	;# 
   285  0315                     	;# 
   286  0316                     	;# 
   287  0317                     	;# 
   288  0318                     	;# 
   289  0318                     	;# 
   290  0319                     	;# 
   291  031A                     	;# 
   292  031B                     	;# 
   293  031C                     	;# 
   294  031C                     	;# 
   295  031D                     	;# 
   296  031E                     	;# 
   297  031F                     	;# 
   298  038C                     	;# 
   299  038D                     	;# 
   300  038E                     	;# 
   301  0390                     	;# 
   302  0391                     	;# 
   303  0392                     	;# 
   304  040C                     	;# 
   305  040D                     	;# 
   306  040E                     	;# 
   307  040F                     	;# 
   308  0410                     	;# 
   309  0411                     	;# 
   310  0416                     	;# 
   311  0416                     	;# 
   312  0417                     	;# 
   313  0418                     	;# 
   314  0418                     	;# 
   315  0419                     	;# 
   316  041A                     	;# 
   317  041A                     	;# 
   318  041B                     	;# 
   319  041C                     	;# 
   320  041C                     	;# 
   321  041D                     	;# 
   322  041E                     	;# 
   323  041F                     	;# 
   324  048C                     	;# 
   325  048C                     	;# 
   326  048D                     	;# 
   327  048E                     	;# 
   328  048F                     	;# 
   329  048F                     	;# 
   330  0490                     	;# 
   331  0491                     	;# 
   332  0492                     	;# 
   333  0492                     	;# 
   334  0493                     	;# 
   335  0494                     	;# 
   336  0495                     	;# 
   337  0495                     	;# 
   338  0496                     	;# 
   339  0497                     	;# 
   340  0498                     	;# 
   341  0499                     	;# 
   342  049A                     	;# 
   343  049B                     	;# 
   344  049C                     	;# 
   345  049D                     	;# 
   346  050C                     	;# 
   347  050C                     	;# 
   348  050D                     	;# 
   349  050E                     	;# 
   350  050F                     	;# 
   351  050F                     	;# 
   352  0510                     	;# 
   353  0511                     	;# 
   354  0512                     	;# 
   355  0512                     	;# 
   356  0513                     	;# 
   357  0514                     	;# 
   358  0515                     	;# 
   359  0515                     	;# 
   360  0516                     	;# 
   361  0517                     	;# 
   362  0518                     	;# 
   363  0519                     	;# 
   364  051A                     	;# 
   365  051B                     	;# 
   366  051C                     	;# 
   367  051D                     	;# 
   368  058C                     	;# 
   369  058C                     	;# 
   370  058D                     	;# 
   371  058E                     	;# 
   372  058F                     	;# 
   373  058F                     	;# 
   374  0590                     	;# 
   375  0591                     	;# 
   376  0592                     	;# 
   377  0593                     	;# 
   378  060C                     	;# 
   379  060D                     	;# 
   380  060E                     	;# 
   381  060F                     	;# 
   382  0610                     	;# 
   383  0611                     	;# 
   384  0612                     	;# 
   385  0613                     	;# 
   386  0614                     	;# 
   387  0616                     	;# 
   388  0617                     	;# 
   389  0618                     	;# 
   390  0619                     	;# 
   391  061A                     	;# 
   392  061B                     	;# 
   393  061C                     	;# 
   394  061D                     	;# 
   395  061E                     	;# 
   396  068C                     	;# 
   397  068D                     	;# 
   398  068E                     	;# 
   399  068F                     	;# 
   400  0690                     	;# 
   401  0691                     	;# 
   402  0692                     	;# 
   403  0693                     	;# 
   404  0694                     	;# 
   405  070C                     	;# 
   406  070D                     	;# 
   407  070E                     	;# 
   408  070F                     	;# 
   409  0710                     	;# 
   410  0711                     	;# 
   411  0712                     	;# 
   412  0713                     	;# 
   413  0714                     	;# 
   414  0716                     	;# 
   415  0717                     	;# 
   416  0718                     	;# 
   417  0719                     	;# 
   418  071A                     	;# 
   419  071B                     	;# 
   420  071C                     	;# 
   421  071D                     	;# 
   422  071E                     	;# 
   423  0796                     	;# 
   424  0797                     	;# 
   425  0798                     	;# 
   426  0799                     	;# 
   427  079A                     	;# 
   428  079B                     	;# 
   429  080C                     	;# 
   430  080D                     	;# 
   431  080E                     	;# 
   432  080F                     	;# 
   433  0810                     	;# 
   434  0811                     	;# 
   435  0812                     	;# 
   436  0813                     	;# 
   437  0814                     	;# 
   438  081A                     	;# 
   439  081B                     	;# 
   440  081C                     	;# 
   441  081D                     	;# 
   442  081E                     	;# 
   443  081F                     	;# 
   444  088C                     	;# 
   445  088D                     	;# 
   446  088E                     	;# 
   447  088F                     	;# 
   448  0890                     	;# 
   449  0891                     	;# 
   450  0892                     	;# 
   451  0893                     	;# 
   452  0895                     	;# 
   453  0896                     	;# 
   454  0897                     	;# 
   455  0898                     	;# 
   456  0899                     	;# 
   457  089A                     	;# 
   458  089B                     	;# 
   459  090C                     	;# 
   460  090E                     	;# 
   461  090F                     	;# 
   462  091F                     	;# 
   463  091F                     	;# 
   464  098F                     	;# 
   465  098F                     	;# 
   466  0990                     	;# 
   467  0991                     	;# 
   468  0992                     	;# 
   469  0993                     	;# 
   470  0994                     	;# 
   471  0995                     	;# 
   472  0996                     	;# 
   473  0997                     	;# 
   474  0E0F                     	;# 
   475  0E10                     	;# 
   476  0E11                     	;# 
   477  0E12                     	;# 
   478  0E13                     	;# 
   479  0E14                     	;# 
   480  0E15                     	;# 
   481  0E16                     	;# 
   482  0E17                     	;# 
   483  0E18                     	;# 
   484  0E19                     	;# 
   485  0E1A                     	;# 
   486  0E1B                     	;# 
   487  0E1C                     	;# 
   488  0E1D                     	;# 
   489  0E1E                     	;# 
   490  0E1F                     	;# 
   491  0E20                     	;# 
   492  0E21                     	;# 
   493  0E22                     	;# 
   494  0E23                     	;# 
   495  0E24                     	;# 
   496  0E25                     	;# 
   497  0E26                     	;# 
   498  0E27                     	;# 
   499  0E28                     	;# 
   500  0E29                     	;# 
   501  0E2A                     	;# 
   502  0E2B                     	;# 
   503  0E2C                     	;# 
   504  0E2D                     	;# 
   505  0E2E                     	;# 
   506  0E2F                     	;# 
   507  0E30                     	;# 
   508  0E31                     	;# 
   509  0E32                     	;# 
   510  0E33                     	;# 
   511  0E34                     	;# 
   512  0E35                     	;# 
   513  0E36                     	;# 
   514  0E37                     	;# 
   515  0E8F                     	;# 
   516  0E90                     	;# 
   517  0E91                     	;# 
   518  0E92                     	;# 
   519  0E93                     	;# 
   520  0E94                     	;# 
   521  0E95                     	;# 
   522  0E96                     	;# 
   523  0E97                     	;# 
   524  0E9C                     	;# 
   525  0E9D                     	;# 
   526  0E9E                     	;# 
   527  0EA1                     	;# 
   528  0EA2                     	;# 
   529  0EA3                     	;# 
   530  0EA4                     	;# 
   531  0EA5                     	;# 
   532  0EA9                     	;# 
   533  0EAA                     	;# 
   534  0EAB                     	;# 
   535  0EAC                     	;# 
   536  0EB1                     	;# 
   537  0EB2                     	;# 
   538  0EB3                     	;# 
   539  0EB8                     	;# 
   540  0EB9                     	;# 
   541  0EBA                     	;# 
   542  0EBB                     	;# 
   543  0EBC                     	;# 
   544  0EBD                     	;# 
   545  0EBE                     	;# 
   546  0EC3                     	;# 
   547  0EC5                     	;# 
   548  0EC6                     	;# 
   549  0EC7                     	;# 
   550  0EC8                     	;# 
   551  0EC9                     	;# 
   552  0ECA                     	;# 
   553  0ECB                     	;# 
   554  0ECC                     	;# 
   555  0F10                     	;# 
   556  0F11                     	;# 
   557  0F12                     	;# 
   558  0F13                     	;# 
   559  0F14                     	;# 
   560  0F15                     	;# 
   561  0F16                     	;# 
   562  0F17                     	;# 
   563  0F18                     	;# 
   564  0F19                     	;# 
   565  0F1A                     	;# 
   566  0F1B                     	;# 
   567  0F1C                     	;# 
   568  0F1D                     	;# 
   569  0F1E                     	;# 
   570  0F1F                     	;# 
   571  0F20                     	;# 
   572  0F21                     	;# 
   573  0F22                     	;# 
   574  0F23                     	;# 
   575  0F24                     	;# 
   576  0F25                     	;# 
   577  0F26                     	;# 
   578  0F27                     	;# 
   579  0F38                     	;# 
   580  0F39                     	;# 
   581  0F3A                     	;# 
   582  0F3B                     	;# 
   583  0F3C                     	;# 
   584  0F3D                     	;# 
   585  0F3E                     	;# 
   586  0F3F                     	;# 
   587  0F40                     	;# 
   588  0F41                     	;# 
   589  0F43                     	;# 
   590  0F44                     	;# 
   591  0F45                     	;# 
   592  0F46                     	;# 
   593  0F47                     	;# 
   594  0F48                     	;# 
   595  0F49                     	;# 
   596  0F4A                     	;# 
   597  0F4B                     	;# 
   598  0F4C                     	;# 
   599  0F4E                     	;# 
   600  0F4F                     	;# 
   601  0F50                     	;# 
   602  0F51                     	;# 
   603  0F52                     	;# 
   604  0F53                     	;# 
   605  0F54                     	;# 
   606  0F55                     	;# 
   607  0F56                     	;# 
   608  0F57                     	;# 
   609  0F65                     	;# 
   610  0F68                     	;# 
   611  0F69                     	;# 
   612  0F6A                     	;# 
   613  0F6B                     	;# 
   614  0FE4                     	;# 
   615  0FE5                     	;# 
   616  0FE6                     	;# 
   617  0FE7                     	;# 
   618  0FE8                     	;# 
   619  0FE9                     	;# 
   620  0FEA                     	;# 
   621  0FEB                     	;# 
   622  0FED                     	;# 
   623  0FEE                     	;# 
   624  0FEF                     	;# 
   625  0000                     	;# 
   626  0001                     	;# 
   627  0002                     	;# 
   628  0003                     	;# 
   629  0004                     	;# 
   630  0005                     	;# 
   631  0006                     	;# 
   632  0007                     	;# 
   633  0008                     	;# 
   634  0009                     	;# 
   635  000A                     	;# 
   636  000B                     	;# 
   637  000C                     	;# 
   638  000D                     	;# 
   639  000E                     	;# 
   640  0010                     	;# 
   641  0011                     	;# 
   642  0012                     	;# 
   643  0013                     	;# 
   644  0016                     	;# 
   645  0017                     	;# 
   646  0018                     	;# 
   647  001C                     	;# 
   648  001C                     	;# 
   649  001D                     	;# 
   650  001D                     	;# 
   651  001E                     	;# 
   652  001F                     	;# 
   653  008C                     	;# 
   654  008C                     	;# 
   655  008D                     	;# 
   656  008E                     	;# 
   657  008E                     	;# 
   658  008F                     	;# 
   659  0090                     	;# 
   660  0090                     	;# 
   661  0091                     	;# 
   662  0093                     	;# 
   663  0094                     	;# 
   664  0095                     	;# 
   665  0096                     	;# 
   666  0097                     	;# 
   667  0098                     	;# 
   668  0099                     	;# 
   669  009A                     	;# 
   670  009B                     	;# 
   671  009C                     	;# 
   672  009D                     	;# 
   673  009E                     	;# 
   674  010C                     	;# 
   675  010D                     	;# 
   676  010E                     	;# 
   677  010E                     	;# 
   678  010F                     	;# 
   679  0110                     	;# 
   680  0110                     	;# 
   681  0111                     	;# 
   682  0112                     	;# 
   683  0112                     	;# 
   684  0113                     	;# 
   685  0114                     	;# 
   686  0114                     	;# 
   687  0115                     	;# 
   688  0116                     	;# 
   689  0116                     	;# 
   690  0117                     	;# 
   691  0119                     	;# 
   692  0119                     	;# 
   693  0119                     	;# 
   694  011A                     	;# 
   695  011A                     	;# 
   696  011A                     	;# 
   697  011B                     	;# 
   698  011B                     	;# 
   699  011B                     	;# 
   700  011B                     	;# 
   701  011B                     	;# 
   702  011C                     	;# 
   703  011C                     	;# 
   704  011C                     	;# 
   705  011D                     	;# 
   706  011D                     	;# 
   707  011D                     	;# 
   708  011E                     	;# 
   709  011E                     	;# 
   710  011E                     	;# 
   711  011F                     	;# 
   712  011F                     	;# 
   713  011F                     	;# 
   714  011F                     	;# 
   715  011F                     	;# 
   716  018C                     	;# 
   717  018D                     	;# 
   718  018E                     	;# 
   719  018F                     	;# 
   720  0190                     	;# 
   721  0191                     	;# 
   722  0192                     	;# 
   723  0196                     	;# 
   724  0197                     	;# 
   725  0198                     	;# 
   726  0199                     	;# 
   727  019A                     	;# 
   728  019B                     	;# 
   729  019C                     	;# 
   730  020C                     	;# 
   731  020C                     	;# 
   732  020D                     	;# 
   733  020E                     	;# 
   734  020F                     	;# 
   735  020F                     	;# 
   736  0210                     	;# 
   737  0210                     	;# 
   738  0211                     	;# 
   739  0211                     	;# 
   740  0212                     	;# 
   741  0212                     	;# 
   742  0213                     	;# 
   743  0214                     	;# 
   744  0215                     	;# 
   745  0215                     	;# 
   746  0216                     	;# 
   747  0216                     	;# 
   748  0217                     	;# 
   749  0217                     	;# 
   750  0218                     	;# 
   751  0218                     	;# 
   752  0219                     	;# 
   753  021A                     	;# 
   754  021B                     	;# 
   755  021B                     	;# 
   756  021C                     	;# 
   757  021C                     	;# 
   758  021D                     	;# 
   759  021D                     	;# 
   760  021E                     	;# 
   761  021F                     	;# 
   762  028C                     	;# 
   763  028C                     	;# 
   764  028D                     	;# 
   765  028D                     	;# 
   766  028E                     	;# 
   767  028F                     	;# 
   768  0290                     	;# 
   769  0290                     	;# 
   770  0291                     	;# 
   771  0292                     	;# 
   772  0292                     	;# 
   773  0293                     	;# 
   774  0293                     	;# 
   775  0294                     	;# 
   776  0295                     	;# 
   777  0296                     	;# 
   778  0296                     	;# 
   779  0297                     	;# 
   780  0298                     	;# 
   781  0298                     	;# 
   782  0299                     	;# 
   783  0299                     	;# 
   784  029A                     	;# 
   785  029B                     	;# 
   786  029C                     	;# 
   787  029C                     	;# 
   788  029D                     	;# 
   789  030C                     	;# 
   790  030C                     	;# 
   791  030D                     	;# 
   792  030E                     	;# 
   793  030F                     	;# 
   794  0310                     	;# 
   795  0310                     	;# 
   796  0311                     	;# 
   797  0312                     	;# 
   798  0313                     	;# 
   799  0314                     	;# 
   800  0314                     	;# 
   801  0315                     	;# 
   802  0316                     	;# 
   803  0317                     	;# 
   804  0318                     	;# 
   805  0318                     	;# 
   806  0319                     	;# 
   807  031A                     	;# 
   808  031B                     	;# 
   809  031C                     	;# 
   810  031C                     	;# 
   811  031D                     	;# 
   812  031E                     	;# 
   813  031F                     	;# 
   814  038C                     	;# 
   815  038D                     	;# 
   816  038E                     	;# 
   817  0390                     	;# 
   818  0391                     	;# 
   819  0392                     	;# 
   820  040C                     	;# 
   821  040D                     	;# 
   822  040E                     	;# 
   823  040F                     	;# 
   824  0410                     	;# 
   825  0411                     	;# 
   826  0416                     	;# 
   827  0416                     	;# 
   828  0417                     	;# 
   829  0418                     	;# 
   830  0418                     	;# 
   831  0419                     	;# 
   832  041A                     	;# 
   833  041A                     	;# 
   834  041B                     	;# 
   835  041C                     	;# 
   836  041C                     	;# 
   837  041D                     	;# 
   838  041E                     	;# 
   839  041F                     	;# 
   840  048C                     	;# 
   841  048C                     	;# 
   842  048D                     	;# 
   843  048E                     	;# 
   844  048F                     	;# 
   845  048F                     	;# 
   846  0490                     	;# 
   847  0491                     	;# 
   848  0492                     	;# 
   849  0492                     	;# 
   850  0493                     	;# 
   851  0494                     	;# 
   852  0495                     	;# 
   853  0495                     	;# 
   854  0496                     	;# 
   855  0497                     	;# 
   856  0498                     	;# 
   857  0499                     	;# 
   858  049A                     	;# 
   859  049B                     	;# 
   860  049C                     	;# 
   861  049D                     	;# 
   862  050C                     	;# 
   863  050C                     	;# 
   864  050D                     	;# 
   865  050E                     	;# 
   866  050F                     	;# 
   867  050F                     	;# 
   868  0510                     	;# 
   869  0511                     	;# 
   870  0512                     	;# 
   871  0512                     	;# 
   872  0513                     	;# 
   873  0514                     	;# 
   874  0515                     	;# 
   875  0515                     	;# 
   876  0516                     	;# 
   877  0517                     	;# 
   878  0518                     	;# 
   879  0519                     	;# 
   880  051A                     	;# 
   881  051B                     	;# 
   882  051C                     	;# 
   883  051D                     	;# 
   884  058C                     	;# 
   885  058C                     	;# 
   886  058D                     	;# 
   887  058E                     	;# 
   888  058F                     	;# 
   889  058F                     	;# 
   890  0590                     	;# 
   891  0591                     	;# 
   892  0592                     	;# 
   893  0593                     	;# 
   894  060C                     	;# 
   895  060D                     	;# 
   896  060E                     	;# 
   897  060F                     	;# 
   898  0610                     	;# 
   899  0611                     	;# 
   900  0612                     	;# 
   901  0613                     	;# 
   902  0614                     	;# 
   903  0616                     	;# 
   904  0617                     	;# 
   905  0618                     	;# 
   906  0619                     	;# 
   907  061A                     	;# 
   908  061B                     	;# 
   909  061C                     	;# 
   910  061D                     	;# 
   911  061E                     	;# 
   912  068C                     	;# 
   913  068D                     	;# 
   914  068E                     	;# 
   915  068F                     	;# 
   916  0690                     	;# 
   917  0691                     	;# 
   918  0692                     	;# 
   919  0693                     	;# 
   920  0694                     	;# 
   921  070C                     	;# 
   922  070D                     	;# 
   923  070E                     	;# 
   924  070F                     	;# 
   925  0710                     	;# 
   926  0711                     	;# 
   927  0712                     	;# 
   928  0713                     	;# 
   929  0714                     	;# 
   930  0716                     	;# 
   931  0717                     	;# 
   932  0718                     	;# 
   933  0719                     	;# 
   934  071A                     	;# 
   935  071B                     	;# 
   936  071C                     	;# 
   937  071D                     	;# 
   938  071E                     	;# 
   939  0796                     	;# 
   940  0797                     	;# 
   941  0798                     	;# 
   942  0799                     	;# 
   943  079A                     	;# 
   944  079B                     	;# 
   945  080C                     	;# 
   946  080D                     	;# 
   947  080E                     	;# 
   948  080F                     	;# 
   949  0810                     	;# 
   950  0811                     	;# 
   951  0812                     	;# 
   952  0813                     	;# 
   953  0814                     	;# 
   954  081A                     	;# 
   955  081B                     	;# 
   956  081C                     	;# 
   957  081D                     	;# 
   958  081E                     	;# 
   959  081F                     	;# 
   960  088C                     	;# 
   961  088D                     	;# 
   962  088E                     	;# 
   963  088F                     	;# 
   964  0890                     	;# 
   965  0891                     	;# 
   966  0892                     	;# 
   967  0893                     	;# 
   968  0895                     	;# 
   969  0896                     	;# 
   970  0897                     	;# 
   971  0898                     	;# 
   972  0899                     	;# 
   973  089A                     	;# 
   974  089B                     	;# 
   975  090C                     	;# 
   976  090E                     	;# 
   977  090F                     	;# 
   978  091F                     	;# 
   979  091F                     	;# 
   980  098F                     	;# 
   981  098F                     	;# 
   982  0990                     	;# 
   983  0991                     	;# 
   984  0992                     	;# 
   985  0993                     	;# 
   986  0994                     	;# 
   987  0995                     	;# 
   988  0996                     	;# 
   989  0997                     	;# 
   990  0E0F                     	;# 
   991  0E10                     	;# 
   992  0E11                     	;# 
   993  0E12                     	;# 
   994  0E13                     	;# 
   995  0E14                     	;# 
   996  0E15                     	;# 
   997  0E16                     	;# 
   998  0E17                     	;# 
   999  0E18                     	;# 
  1000  0E19                     	;# 
  1001  0E1A                     	;# 
  1002  0E1B                     	;# 
  1003  0E1C                     	;# 
  1004  0E1D                     	;# 
  1005  0E1E                     	;# 
  1006  0E1F                     	;# 
  1007  0E20                     	;# 
  1008  0E21                     	;# 
  1009  0E22                     	;# 
  1010  0E23                     	;# 
  1011  0E24                     	;# 
  1012  0E25                     	;# 
  1013  0E26                     	;# 
  1014  0E27                     	;# 
  1015  0E28                     	;# 
  1016  0E29                     	;# 
  1017  0E2A                     	;# 
  1018  0E2B                     	;# 
  1019  0E2C                     	;# 
  1020  0E2D                     	;# 
  1021  0E2E                     	;# 
  1022  0E2F                     	;# 
  1023  0E30                     	;# 
  1024  0E31                     	;# 
  1025  0E32                     	;# 
  1026  0E33                     	;# 
  1027  0E34                     	;# 
  1028  0E35                     	;# 
  1029  0E36                     	;# 
  1030  0E37                     	;# 
  1031  0E8F                     	;# 
  1032  0E90                     	;# 
  1033  0E91                     	;# 
  1034  0E92                     	;# 
  1035  0E93                     	;# 
  1036  0E94                     	;# 
  1037  0E95                     	;# 
  1038  0E96                     	;# 
  1039  0E97                     	;# 
  1040  0E9C                     	;# 
  1041  0E9D                     	;# 
  1042  0E9E                     	;# 
  1043  0EA1                     	;# 
  1044  0EA2                     	;# 
  1045  0EA3                     	;# 
  1046  0EA4                     	;# 
  1047  0EA5                     	;# 
  1048  0EA9                     	;# 
  1049  0EAA                     	;# 
  1050  0EAB                     	;# 
  1051  0EAC                     	;# 
  1052  0EB1                     	;# 
  1053  0EB2                     	;# 
  1054  0EB3                     	;# 
  1055  0EB8                     	;# 
  1056  0EB9                     	;# 
  1057  0EBA                     	;# 
  1058  0EBB                     	;# 
  1059  0EBC                     	;# 
  1060  0EBD                     	;# 
  1061  0EBE                     	;# 
  1062  0EC3                     	;# 
  1063  0EC5                     	;# 
  1064  0EC6                     	;# 
  1065  0EC7                     	;# 
  1066  0EC8                     	;# 
  1067  0EC9                     	;# 
  1068  0ECA                     	;# 
  1069  0ECB                     	;# 
  1070  0ECC                     	;# 
  1071  0F10                     	;# 
  1072  0F11                     	;# 
  1073  0F12                     	;# 
  1074  0F13                     	;# 
  1075  0F14                     	;# 
  1076  0F15                     	;# 
  1077  0F16                     	;# 
  1078  0F17                     	;# 
  1079  0F18                     	;# 
  1080  0F19                     	;# 
  1081  0F1A                     	;# 
  1082  0F1B                     	;# 
  1083  0F1C                     	;# 
  1084  0F1D                     	;# 
  1085  0F1E                     	;# 
  1086  0F1F                     	;# 
  1087  0F20                     	;# 
  1088  0F21                     	;# 
  1089  0F22                     	;# 
  1090  0F23                     	;# 
  1091  0F24                     	;# 
  1092  0F25                     	;# 
  1093  0F26                     	;# 
  1094  0F27                     	;# 
  1095  0F38                     	;# 
  1096  0F39                     	;# 
  1097  0F3A                     	;# 
  1098  0F3B                     	;# 
  1099  0F3C                     	;# 
  1100  0F3D                     	;# 
  1101  0F3E                     	;# 
  1102  0F3F                     	;# 
  1103  0F40                     	;# 
  1104  0F41                     	;# 
  1105  0F43                     	;# 
  1106  0F44                     	;# 
  1107  0F45                     	;# 
  1108  0F46                     	;# 
  1109  0F47                     	;# 
  1110  0F48                     	;# 
  1111  0F49                     	;# 
  1112  0F4A                     	;# 
  1113  0F4B                     	;# 
  1114  0F4C                     	;# 
  1115  0F4E                     	;# 
  1116  0F4F                     	;# 
  1117  0F50                     	;# 
  1118  0F51                     	;# 
  1119  0F52                     	;# 
  1120  0F53                     	;# 
  1121  0F54                     	;# 
  1122  0F55                     	;# 
  1123  0F56                     	;# 
  1124  0F57                     	;# 
  1125  0F65                     	;# 
  1126  0F68                     	;# 
  1127  0F69                     	;# 
  1128  0F6A                     	;# 
  1129  0F6B                     	;# 
  1130  0FE4                     	;# 
  1131  0FE5                     	;# 
  1132  0FE6                     	;# 
  1133  0FE7                     	;# 
  1134  0FE8                     	;# 
  1135  0FE9                     	;# 
  1136  0FEA                     	;# 
  1137  0FEB                     	;# 
  1138  0FED                     	;# 
  1139  0FEE                     	;# 
  1140  0FEF                     	;# 
  1141  0000                     	;# 
  1142  0001                     	;# 
  1143  0002                     	;# 
  1144  0003                     	;# 
  1145  0004                     	;# 
  1146  0005                     	;# 
  1147  0006                     	;# 
  1148  0007                     	;# 
  1149  0008                     	;# 
  1150  0009                     	;# 
  1151  000A                     	;# 
  1152  000B                     	;# 
  1153  000C                     	;# 
  1154  000D                     	;# 
  1155  000E                     	;# 
  1156  0010                     	;# 
  1157  0011                     	;# 
  1158  0012                     	;# 
  1159  0013                     	;# 
  1160  0016                     	;# 
  1161  0017                     	;# 
  1162  0018                     	;# 
  1163  001C                     	;# 
  1164  001C                     	;# 
  1165  001D                     	;# 
  1166  001D                     	;# 
  1167  001E                     	;# 
  1168  001F                     	;# 
  1169  008C                     	;# 
  1170  008C                     	;# 
  1171  008D                     	;# 
  1172  008E                     	;# 
  1173  008E                     	;# 
  1174  008F                     	;# 
  1175  0090                     	;# 
  1176  0090                     	;# 
  1177  0091                     	;# 
  1178  0093                     	;# 
  1179  0094                     	;# 
  1180  0095                     	;# 
  1181  0096                     	;# 
  1182  0097                     	;# 
  1183  0098                     	;# 
  1184  0099                     	;# 
  1185  009A                     	;# 
  1186  009B                     	;# 
  1187  009C                     	;# 
  1188  009D                     	;# 
  1189  009E                     	;# 
  1190  010C                     	;# 
  1191  010D                     	;# 
  1192  010E                     	;# 
  1193  010E                     	;# 
  1194  010F                     	;# 
  1195  0110                     	;# 
  1196  0110                     	;# 
  1197  0111                     	;# 
  1198  0112                     	;# 
  1199  0112                     	;# 
  1200  0113                     	;# 
  1201  0114                     	;# 
  1202  0114                     	;# 
  1203  0115                     	;# 
  1204  0116                     	;# 
  1205  0116                     	;# 
  1206  0117                     	;# 
  1207  0119                     	;# 
  1208  0119                     	;# 
  1209  0119                     	;# 
  1210  011A                     	;# 
  1211  011A                     	;# 
  1212  011A                     	;# 
  1213  011B                     	;# 
  1214  011B                     	;# 
  1215  011B                     	;# 
  1216  011B                     	;# 
  1217  011B                     	;# 
  1218  011C                     	;# 
  1219  011C                     	;# 
  1220  011C                     	;# 
  1221  011D                     	;# 
  1222  011D                     	;# 
  1223  011D                     	;# 
  1224  011E                     	;# 
  1225  011E                     	;# 
  1226  011E                     	;# 
  1227  011F                     	;# 
  1228  011F                     	;# 
  1229  011F                     	;# 
  1230  011F                     	;# 
  1231  011F                     	;# 
  1232  018C                     	;# 
  1233  018D                     	;# 
  1234  018E                     	;# 
  1235  018F                     	;# 
  1236  0190                     	;# 
  1237  0191                     	;# 
  1238  0192                     	;# 
  1239  0196                     	;# 
  1240  0197                     	;# 
  1241  0198                     	;# 
  1242  0199                     	;# 
  1243  019A                     	;# 
  1244  019B                     	;# 
  1245  019C                     	;# 
  1246  020C                     	;# 
  1247  020C                     	;# 
  1248  020D                     	;# 
  1249  020E                     	;# 
  1250  020F                     	;# 
  1251  020F                     	;# 
  1252  0210                     	;# 
  1253  0210                     	;# 
  1254  0211                     	;# 
  1255  0211                     	;# 
  1256  0212                     	;# 
  1257  0212                     	;# 
  1258  0213                     	;# 
  1259  0214                     	;# 
  1260  0215                     	;# 
  1261  0215                     	;# 
  1262  0216                     	;# 
  1263  0216                     	;# 
  1264  0217                     	;# 
  1265  0217                     	;# 
  1266  0218                     	;# 
  1267  0218                     	;# 
  1268  0219                     	;# 
  1269  021A                     	;# 
  1270  021B                     	;# 
  1271  021B                     	;# 
  1272  021C                     	;# 
  1273  021C                     	;# 
  1274  021D                     	;# 
  1275  021D                     	;# 
  1276  021E                     	;# 
  1277  021F                     	;# 
  1278  028C                     	;# 
  1279  028C                     	;# 
  1280  028D                     	;# 
  1281  028D                     	;# 
  1282  028E                     	;# 
  1283  028F                     	;# 
  1284  0290                     	;# 
  1285  0290                     	;# 
  1286  0291                     	;# 
  1287  0292                     	;# 
  1288  0292                     	;# 
  1289  0293                     	;# 
  1290  0293                     	;# 
  1291  0294                     	;# 
  1292  0295                     	;# 
  1293  0296                     	;# 
  1294  0296                     	;# 
  1295  0297                     	;# 
  1296  0298                     	;# 
  1297  0298                     	;# 
  1298  0299                     	;# 
  1299  0299                     	;# 
  1300  029A                     	;# 
  1301  029B                     	;# 
  1302  029C                     	;# 
  1303  029C                     	;# 
  1304  029D                     	;# 
  1305  030C                     	;# 
  1306  030C                     	;# 
  1307  030D                     	;# 
  1308  030E                     	;# 
  1309  030F                     	;# 
  1310  0310                     	;# 
  1311  0310                     	;# 
  1312  0311                     	;# 
  1313  0312                     	;# 
  1314  0313                     	;# 
  1315  0314                     	;# 
  1316  0314                     	;# 
  1317  0315                     	;# 
  1318  0316                     	;# 
  1319  0317                     	;# 
  1320  0318                     	;# 
  1321  0318                     	;# 
  1322  0319                     	;# 
  1323  031A                     	;# 
  1324  031B                     	;# 
  1325  031C                     	;# 
  1326  031C                     	;# 
  1327  031D                     	;# 
  1328  031E                     	;# 
  1329  031F                     	;# 
  1330  038C                     	;# 
  1331  038D                     	;# 
  1332  038E                     	;# 
  1333  0390                     	;# 
  1334  0391                     	;# 
  1335  0392                     	;# 
  1336  040C                     	;# 
  1337  040D                     	;# 
  1338  040E                     	;# 
  1339  040F                     	;# 
  1340  0410                     	;# 
  1341  0411                     	;# 
  1342  0416                     	;# 
  1343  0416                     	;# 
  1344  0417                     	;# 
  1345  0418                     	;# 
  1346  0418                     	;# 
  1347  0419                     	;# 
  1348  041A                     	;# 
  1349  041A                     	;# 
  1350  041B                     	;# 
  1351  041C                     	;# 
  1352  041C                     	;# 
  1353  041D                     	;# 
  1354  041E                     	;# 
  1355  041F                     	;# 
  1356  048C                     	;# 
  1357  048C                     	;# 
  1358  048D                     	;# 
  1359  048E                     	;# 
  1360  048F                     	;# 
  1361  048F                     	;# 
  1362  0490                     	;# 
  1363  0491                     	;# 
  1364  0492                     	;# 
  1365  0492                     	;# 
  1366  0493                     	;# 
  1367  0494                     	;# 
  1368  0495                     	;# 
  1369  0495                     	;# 
  1370  0496                     	;# 
  1371  0497                     	;# 
  1372  0498                     	;# 
  1373  0499                     	;# 
  1374  049A                     	;# 
  1375  049B                     	;# 
  1376  049C                     	;# 
  1377  049D                     	;# 
  1378  050C                     	;# 
  1379  050C                     	;# 
  1380  050D                     	;# 
  1381  050E                     	;# 
  1382  050F                     	;# 
  1383  050F                     	;# 
  1384  0510                     	;# 
  1385  0511                     	;# 
  1386  0512                     	;# 
  1387  0512                     	;# 
  1388  0513                     	;# 
  1389  0514                     	;# 
  1390  0515                     	;# 
  1391  0515                     	;# 
  1392  0516                     	;# 
  1393  0517                     	;# 
  1394  0518                     	;# 
  1395  0519                     	;# 
  1396  051A                     	;# 
  1397  051B                     	;# 
  1398  051C                     	;# 
  1399  051D                     	;# 
  1400  058C                     	;# 
  1401  058C                     	;# 
  1402  058D                     	;# 
  1403  058E                     	;# 
  1404  058F                     	;# 
  1405  058F                     	;# 
  1406  0590                     	;# 
  1407  0591                     	;# 
  1408  0592                     	;# 
  1409  0593                     	;# 
  1410  060C                     	;# 
  1411  060D                     	;# 
  1412  060E                     	;# 
  1413  060F                     	;# 
  1414  0610                     	;# 
  1415  0611                     	;# 
  1416  0612                     	;# 
  1417  0613                     	;# 
  1418  0614                     	;# 
  1419  0616                     	;# 
  1420  0617                     	;# 
  1421  0618                     	;# 
  1422  0619                     	;# 
  1423  061A                     	;# 
  1424  061B                     	;# 
  1425  061C                     	;# 
  1426  061D                     	;# 
  1427  061E                     	;# 
  1428  068C                     	;# 
  1429  068D                     	;# 
  1430  068E                     	;# 
  1431  068F                     	;# 
  1432  0690                     	;# 
  1433  0691                     	;# 
  1434  0692                     	;# 
  1435  0693                     	;# 
  1436  0694                     	;# 
  1437  070C                     	;# 
  1438  070D                     	;# 
  1439  070E                     	;# 
  1440  070F                     	;# 
  1441  0710                     	;# 
  1442  0711                     	;# 
  1443  0712                     	;# 
  1444  0713                     	;# 
  1445  0714                     	;# 
  1446  0716                     	;# 
  1447  0717                     	;# 
  1448  0718                     	;# 
  1449  0719                     	;# 
  1450  071A                     	;# 
  1451  071B                     	;# 
  1452  071C                     	;# 
  1453  071D                     	;# 
  1454  071E                     	;# 
  1455  0796                     	;# 
  1456  0797                     	;# 
  1457  0798                     	;# 
  1458  0799                     	;# 
  1459  079A                     	;# 
  1460  079B                     	;# 
  1461  080C                     	;# 
  1462  080D                     	;# 
  1463  080E                     	;# 
  1464  080F                     	;# 
  1465  0810                     	;# 
  1466  0811                     	;# 
  1467  0812                     	;# 
  1468  0813                     	;# 
  1469  0814                     	;# 
  1470  081A                     	;# 
  1471  081B                     	;# 
  1472  081C                     	;# 
  1473  081D                     	;# 
  1474  081E                     	;# 
  1475  081F                     	;# 
  1476  088C                     	;# 
  1477  088D                     	;# 
  1478  088E                     	;# 
  1479  088F                     	;# 
  1480  0890                     	;# 
  1481  0891                     	;# 
  1482  0892                     	;# 
  1483  0893                     	;# 
  1484  0895                     	;# 
  1485  0896                     	;# 
  1486  0897                     	;# 
  1487  0898                     	;# 
  1488  0899                     	;# 
  1489  089A                     	;# 
  1490  089B                     	;# 
  1491  090C                     	;# 
  1492  090E                     	;# 
  1493  090F                     	;# 
  1494  091F                     	;# 
  1495  091F                     	;# 
  1496  098F                     	;# 
  1497  098F                     	;# 
  1498  0990                     	;# 
  1499  0991                     	;# 
  1500  0992                     	;# 
  1501  0993                     	;# 
  1502  0994                     	;# 
  1503  0995                     	;# 
  1504  0996                     	;# 
  1505  0997                     	;# 
  1506  0E0F                     	;# 
  1507  0E10                     	;# 
  1508  0E11                     	;# 
  1509  0E12                     	;# 
  1510  0E13                     	;# 
  1511  0E14                     	;# 
  1512  0E15                     	;# 
  1513  0E16                     	;# 
  1514  0E17                     	;# 
  1515  0E18                     	;# 
  1516  0E19                     	;# 
  1517  0E1A                     	;# 
  1518  0E1B                     	;# 
  1519  0E1C                     	;# 
  1520  0E1D                     	;# 
  1521  0E1E                     	;# 
  1522  0E1F                     	;# 
  1523  0E20                     	;# 
  1524  0E21                     	;# 
  1525  0E22                     	;# 
  1526  0E23                     	;# 
  1527  0E24                     	;# 
  1528  0E25                     	;# 
  1529  0E26                     	;# 
  1530  0E27                     	;# 
  1531  0E28                     	;# 
  1532  0E29                     	;# 
  1533  0E2A                     	;# 
  1534  0E2B                     	;# 
  1535  0E2C                     	;# 
  1536  0E2D                     	;# 
  1537  0E2E                     	;# 
  1538  0E2F                     	;# 
  1539  0E30                     	;# 
  1540  0E31                     	;# 
  1541  0E32                     	;# 
  1542  0E33                     	;# 
  1543  0E34                     	;# 
  1544  0E35                     	;# 
  1545  0E36                     	;# 
  1546  0E37                     	;# 
  1547  0E8F                     	;# 
  1548  0E90                     	;# 
  1549  0E91                     	;# 
  1550  0E92                     	;# 
  1551  0E93                     	;# 
  1552  0E94                     	;# 
  1553  0E95                     	;# 
  1554  0E96                     	;# 
  1555  0E97                     	;# 
  1556  0E9C                     	;# 
  1557  0E9D                     	;# 
  1558  0E9E                     	;# 
  1559  0EA1                     	;# 
  1560  0EA2                     	;# 
  1561  0EA3                     	;# 
  1562  0EA4                     	;# 
  1563  0EA5                     	;# 
  1564  0EA9                     	;# 
  1565  0EAA                     	;# 
  1566  0EAB                     	;# 
  1567  0EAC                     	;# 
  1568  0EB1                     	;# 
  1569  0EB2                     	;# 
  1570  0EB3                     	;# 
  1571  0EB8                     	;# 
  1572  0EB9                     	;# 
  1573  0EBA                     	;# 
  1574  0EBB                     	;# 
  1575  0EBC                     	;# 
  1576  0EBD                     	;# 
  1577  0EBE                     	;# 
  1578  0EC3                     	;# 
  1579  0EC5                     	;# 
  1580  0EC6                     	;# 
  1581  0EC7                     	;# 
  1582  0EC8                     	;# 
  1583  0EC9                     	;# 
  1584  0ECA                     	;# 
  1585  0ECB                     	;# 
  1586  0ECC                     	;# 
  1587  0F10                     	;# 
  1588  0F11                     	;# 
  1589  0F12                     	;# 
  1590  0F13                     	;# 
  1591  0F14                     	;# 
  1592  0F15                     	;# 
  1593  0F16                     	;# 
  1594  0F17                     	;# 
  1595  0F18                     	;# 
  1596  0F19                     	;# 
  1597  0F1A                     	;# 
  1598  0F1B                     	;# 
  1599  0F1C                     	;# 
  1600  0F1D                     	;# 
  1601  0F1E                     	;# 
  1602  0F1F                     	;# 
  1603  0F20                     	;# 
  1604  0F21                     	;# 
  1605  0F22                     	;# 
  1606  0F23                     	;# 
  1607  0F24                     	;# 
  1608  0F25                     	;# 
  1609  0F26                     	;# 
  1610  0F27                     	;# 
  1611  0F38                     	;# 
  1612  0F39                     	;# 
  1613  0F3A                     	;# 
  1614  0F3B                     	;# 
  1615  0F3C                     	;# 
  1616  0F3D                     	;# 
  1617  0F3E                     	;# 
  1618  0F3F                     	;# 
  1619  0F40                     	;# 
  1620  0F41                     	;# 
  1621  0F43                     	;# 
  1622  0F44                     	;# 
  1623  0F45                     	;# 
  1624  0F46                     	;# 
  1625  0F47                     	;# 
  1626  0F48                     	;# 
  1627  0F49                     	;# 
  1628  0F4A                     	;# 
  1629  0F4B                     	;# 
  1630  0F4C                     	;# 
  1631  0F4E                     	;# 
  1632  0F4F                     	;# 
  1633  0F50                     	;# 
  1634  0F51                     	;# 
  1635  0F52                     	;# 
  1636  0F53                     	;# 
  1637  0F54                     	;# 
  1638  0F55                     	;# 
  1639  0F56                     	;# 
  1640  0F57                     	;# 
  1641  0F65                     	;# 
  1642  0F68                     	;# 
  1643  0F69                     	;# 
  1644  0F6A                     	;# 
  1645  0F6B                     	;# 
  1646  0FE4                     	;# 
  1647  0FE5                     	;# 
  1648  0FE6                     	;# 
  1649  0FE7                     	;# 
  1650  0FE8                     	;# 
  1651  0FE9                     	;# 
  1652  0FEA                     	;# 
  1653  0FEB                     	;# 
  1654  0FED                     	;# 
  1655  0FEE                     	;# 
  1656  0FEF                     	;# 
  1657  0000                     	;# 
  1658  0001                     	;# 
  1659  0002                     	;# 
  1660  0003                     	;# 
  1661  0004                     	;# 
  1662  0005                     	;# 
  1663  0006                     	;# 
  1664  0007                     	;# 
  1665  0008                     	;# 
  1666  0009                     	;# 
  1667  000A                     	;# 
  1668  000B                     	;# 
  1669  000C                     	;# 
  1670  000D                     	;# 
  1671  000E                     	;# 
  1672  0010                     	;# 
  1673  0011                     	;# 
  1674  0012                     	;# 
  1675  0013                     	;# 
  1676  0016                     	;# 
  1677  0017                     	;# 
  1678  0018                     	;# 
  1679  001C                     	;# 
  1680  001C                     	;# 
  1681  001D                     	;# 
  1682  001D                     	;# 
  1683  001E                     	;# 
  1684  001F                     	;# 
  1685  008C                     	;# 
  1686  008C                     	;# 
  1687  008D                     	;# 
  1688  008E                     	;# 
  1689  008E                     	;# 
  1690  008F                     	;# 
  1691  0090                     	;# 
  1692  0090                     	;# 
  1693  0091                     	;# 
  1694  0093                     	;# 
  1695  0094                     	;# 
  1696  0095                     	;# 
  1697  0096                     	;# 
  1698  0097                     	;# 
  1699  0098                     	;# 
  1700  0099                     	;# 
  1701  009A                     	;# 
  1702  009B                     	;# 
  1703  009C                     	;# 
  1704  009D                     	;# 
  1705  009E                     	;# 
  1706  010C                     	;# 
  1707  010D                     	;# 
  1708  010E                     	;# 
  1709  010E                     	;# 
  1710  010F                     	;# 
  1711  0110                     	;# 
  1712  0110                     	;# 
  1713  0111                     	;# 
  1714  0112                     	;# 
  1715  0112                     	;# 
  1716  0113                     	;# 
  1717  0114                     	;# 
  1718  0114                     	;# 
  1719  0115                     	;# 
  1720  0116                     	;# 
  1721  0116                     	;# 
  1722  0117                     	;# 
  1723  0119                     	;# 
  1724  0119                     	;# 
  1725  0119                     	;# 
  1726  011A                     	;# 
  1727  011A                     	;# 
  1728  011A                     	;# 
  1729  011B                     	;# 
  1730  011B                     	;# 
  1731  011B                     	;# 
  1732  011B                     	;# 
  1733  011B                     	;# 
  1734  011C                     	;# 
  1735  011C                     	;# 
  1736  011C                     	;# 
  1737  011D                     	;# 
  1738  011D                     	;# 
  1739  011D                     	;# 
  1740  011E                     	;# 
  1741  011E                     	;# 
  1742  011E                     	;# 
  1743  011F                     	;# 
  1744  011F                     	;# 
  1745  011F                     	;# 
  1746  011F                     	;# 
  1747  011F                     	;# 
  1748  018C                     	;# 
  1749  018D                     	;# 
  1750  018E                     	;# 
  1751  018F                     	;# 
  1752  0190                     	;# 
  1753  0191                     	;# 
  1754  0192                     	;# 
  1755  0196                     	;# 
  1756  0197                     	;# 
  1757  0198                     	;# 
  1758  0199                     	;# 
  1759  019A                     	;# 
  1760  019B                     	;# 
  1761  019C                     	;# 
  1762  020C                     	;# 
  1763  020C                     	;# 
  1764  020D                     	;# 
  1765  020E                     	;# 
  1766  020F                     	;# 
  1767  020F                     	;# 
  1768  0210                     	;# 
  1769  0210                     	;# 
  1770  0211                     	;# 
  1771  0211                     	;# 
  1772  0212                     	;# 
  1773  0212                     	;# 
  1774  0213                     	;# 
  1775  0214                     	;# 
  1776  0215                     	;# 
  1777  0215                     	;# 
  1778  0216                     	;# 
  1779  0216                     	;# 
  1780  0217                     	;# 
  1781  0217                     	;# 
  1782  0218                     	;# 
  1783  0218                     	;# 
  1784  0219                     	;# 
  1785  021A                     	;# 
  1786  021B                     	;# 
  1787  021B                     	;# 
  1788  021C                     	;# 
  1789  021C                     	;# 
  1790  021D                     	;# 
  1791  021D                     	;# 
  1792  021E                     	;# 
  1793  021F                     	;# 
  1794  028C                     	;# 
  1795  028C                     	;# 
  1796  028D                     	;# 
  1797  028D                     	;# 
  1798  028E                     	;# 
  1799  028F                     	;# 
  1800  0290                     	;# 
  1801  0290                     	;# 
  1802  0291                     	;# 
  1803  0292                     	;# 
  1804  0292                     	;# 
  1805  0293                     	;# 
  1806  0293                     	;# 
  1807  0294                     	;# 
  1808  0295                     	;# 
  1809  0296                     	;# 
  1810  0296                     	;# 
  1811  0297                     	;# 
  1812  0298                     	;# 
  1813  0298                     	;# 
  1814  0299                     	;# 
  1815  0299                     	;# 
  1816  029A                     	;# 
  1817  029B                     	;# 
  1818  029C                     	;# 
  1819  029C                     	;# 
  1820  029D                     	;# 
  1821  030C                     	;# 
  1822  030C                     	;# 
  1823  030D                     	;# 
  1824  030E                     	;# 
  1825  030F                     	;# 
  1826  0310                     	;# 
  1827  0310                     	;# 
  1828  0311                     	;# 
  1829  0312                     	;# 
  1830  0313                     	;# 
  1831  0314                     	;# 
  1832  0314                     	;# 
  1833  0315                     	;# 
  1834  0316                     	;# 
  1835  0317                     	;# 
  1836  0318                     	;# 
  1837  0318                     	;# 
  1838  0319                     	;# 
  1839  031A                     	;# 
  1840  031B                     	;# 
  1841  031C                     	;# 
  1842  031C                     	;# 
  1843  031D                     	;# 
  1844  031E                     	;# 
  1845  031F                     	;# 
  1846  038C                     	;# 
  1847  038D                     	;# 
  1848  038E                     	;# 
  1849  0390                     	;# 
  1850  0391                     	;# 
  1851  0392                     	;# 
  1852  040C                     	;# 
  1853  040D                     	;# 
  1854  040E                     	;# 
  1855  040F                     	;# 
  1856  0410                     	;# 
  1857  0411                     	;# 
  1858  0416                     	;# 
  1859  0416                     	;# 
  1860  0417                     	;# 
  1861  0418                     	;# 
  1862  0418                     	;# 
  1863  0419                     	;# 
  1864  041A                     	;# 
  1865  041A                     	;# 
  1866  041B                     	;# 
  1867  041C                     	;# 
  1868  041C                     	;# 
  1869  041D                     	;# 
  1870  041E                     	;# 
  1871  041F                     	;# 
  1872  048C                     	;# 
  1873  048C                     	;# 
  1874  048D                     	;# 
  1875  048E                     	;# 
  1876  048F                     	;# 
  1877  048F                     	;# 
  1878  0490                     	;# 
  1879  0491                     	;# 
  1880  0492                     	;# 
  1881  0492                     	;# 
  1882  0493                     	;# 
  1883  0494                     	;# 
  1884  0495                     	;# 
  1885  0495                     	;# 
  1886  0496                     	;# 
  1887  0497                     	;# 
  1888  0498                     	;# 
  1889  0499                     	;# 
  1890  049A                     	;# 
  1891  049B                     	;# 
  1892  049C                     	;# 
  1893  049D                     	;# 
  1894  050C                     	;# 
  1895  050C                     	;# 
  1896  050D                     	;# 
  1897  050E                     	;# 
  1898  050F                     	;# 
  1899  050F                     	;# 
  1900  0510                     	;# 
  1901  0511                     	;# 
  1902  0512                     	;# 
  1903  0512                     	;# 
  1904  0513                     	;# 
  1905  0514                     	;# 
  1906  0515                     	;# 
  1907  0515                     	;# 
  1908  0516                     	;# 
  1909  0517                     	;# 
  1910  0518                     	;# 
  1911  0519                     	;# 
  1912  051A                     	;# 
  1913  051B                     	;# 
  1914  051C                     	;# 
  1915  051D                     	;# 
  1916  058C                     	;# 
  1917  058C                     	;# 
  1918  058D                     	;# 
  1919  058E                     	;# 
  1920  058F                     	;# 
  1921  058F                     	;# 
  1922  0590                     	;# 
  1923  0591                     	;# 
  1924  0592                     	;# 
  1925  0593                     	;# 
  1926  060C                     	;# 
  1927  060D                     	;# 
  1928  060E                     	;# 
  1929  060F                     	;# 
  1930  0610                     	;# 
  1931  0611                     	;# 
  1932  0612                     	;# 
  1933  0613                     	;# 
  1934  0614                     	;# 
  1935  0616                     	;# 
  1936  0617                     	;# 
  1937  0618                     	;# 
  1938  0619                     	;# 
  1939  061A                     	;# 
  1940  061B                     	;# 
  1941  061C                     	;# 
  1942  061D                     	;# 
  1943  061E                     	;# 
  1944  068C                     	;# 
  1945  068D                     	;# 
  1946  068E                     	;# 
  1947  068F                     	;# 
  1948  0690                     	;# 
  1949  0691                     	;# 
  1950  0692                     	;# 
  1951  0693                     	;# 
  1952  0694                     	;# 
  1953  070C                     	;# 
  1954  070D                     	;# 
  1955  070E                     	;# 
  1956  070F                     	;# 
  1957  0710                     	;# 
  1958  0711                     	;# 
  1959  0712                     	;# 
  1960  0713                     	;# 
  1961  0714                     	;# 
  1962  0716                     	;# 
  1963  0717                     	;# 
  1964  0718                     	;# 
  1965  0719                     	;# 
  1966  071A                     	;# 
  1967  071B                     	;# 
  1968  071C                     	;# 
  1969  071D                     	;# 
  1970  071E                     	;# 
  1971  0796                     	;# 
  1972  0797                     	;# 
  1973  0798                     	;# 
  1974  0799                     	;# 
  1975  079A                     	;# 
  1976  079B                     	;# 
  1977  080C                     	;# 
  1978  080D                     	;# 
  1979  080E                     	;# 
  1980  080F                     	;# 
  1981  0810                     	;# 
  1982  0811                     	;# 
  1983  0812                     	;# 
  1984  0813                     	;# 
  1985  0814                     	;# 
  1986  081A                     	;# 
  1987  081B                     	;# 
  1988  081C                     	;# 
  1989  081D                     	;# 
  1990  081E                     	;# 
  1991  081F                     	;# 
  1992  088C                     	;# 
  1993  088D                     	;# 
  1994  088E                     	;# 
  1995  088F                     	;# 
  1996  0890                     	;# 
  1997  0891                     	;# 
  1998  0892                     	;# 
  1999  0893                     	;# 
  2000  0895                     	;# 
  2001  0896                     	;# 
  2002  0897                     	;# 
  2003  0898                     	;# 
  2004  0899                     	;# 
  2005  089A                     	;# 
  2006  089B                     	;# 
  2007  090C                     	;# 
  2008  090E                     	;# 
  2009  090F                     	;# 
  2010  091F                     	;# 
  2011  091F                     	;# 
  2012  098F                     	;# 
  2013  098F                     	;# 
  2014  0990                     	;# 
  2015  0991                     	;# 
  2016  0992                     	;# 
  2017  0993                     	;# 
  2018  0994                     	;# 
  2019  0995                     	;# 
  2020  0996                     	;# 
  2021  0997                     	;# 
  2022  0E0F                     	;# 
  2023  0E10                     	;# 
  2024  0E11                     	;# 
  2025  0E12                     	;# 
  2026  0E13                     	;# 
  2027  0E14                     	;# 
  2028  0E15                     	;# 
  2029  0E16                     	;# 
  2030  0E17                     	;# 
  2031  0E18                     	;# 
  2032  0E19                     	;# 
  2033  0E1A                     	;# 
  2034  0E1B                     	;# 
  2035  0E1C                     	;# 
  2036  0E1D                     	;# 
  2037  0E1E                     	;# 
  2038  0E1F                     	;# 
  2039  0E20                     	;# 
  2040  0E21                     	;# 
  2041  0E22                     	;# 
  2042  0E23                     	;# 
  2043  0E24                     	;# 
  2044  0E25                     	;# 
  2045  0E26                     	;# 
  2046  0E27                     	;# 
  2047  0E28                     	;# 
  2048  0E29                     	;# 
  2049  0E2A                     	;# 
  2050  0E2B                     	;# 
  2051  0E2C                     	;# 
  2052  0E2D                     	;# 
  2053  0E2E                     	;# 
  2054  0E2F                     	;# 
  2055  0E30                     	;# 
  2056  0E31                     	;# 
  2057  0E32                     	;# 
  2058  0E33                     	;# 
  2059  0E34                     	;# 
  2060  0E35                     	;# 
  2061  0E36                     	;# 
  2062  0E37                     	;# 
  2063  0E8F                     	;# 
  2064  0E90                     	;# 
  2065  0E91                     	;# 
  2066  0E92                     	;# 
  2067  0E93                     	;# 
  2068  0E94                     	;# 
  2069  0E95                     	;# 
  2070  0E96                     	;# 
  2071  0E97                     	;# 
  2072  0E9C                     	;# 
  2073  0E9D                     	;# 
  2074  0E9E                     	;# 
  2075  0EA1                     	;# 
  2076  0EA2                     	;# 
  2077  0EA3                     	;# 
  2078  0EA4                     	;# 
  2079  0EA5                     	;# 
  2080  0EA9                     	;# 
  2081  0EAA                     	;# 
  2082  0EAB                     	;# 
  2083  0EAC                     	;# 
  2084  0EB1                     	;# 
  2085  0EB2                     	;# 
  2086  0EB3                     	;# 
  2087  0EB8                     	;# 
  2088  0EB9                     	;# 
  2089  0EBA                     	;# 
  2090  0EBB                     	;# 
  2091  0EBC                     	;# 
  2092  0EBD                     	;# 
  2093  0EBE                     	;# 
  2094  0EC3                     	;# 
  2095  0EC5                     	;# 
  2096  0EC6                     	;# 
  2097  0EC7                     	;# 
  2098  0EC8                     	;# 
  2099  0EC9                     	;# 
  2100  0ECA                     	;# 
  2101  0ECB                     	;# 
  2102  0ECC                     	;# 
  2103  0F10                     	;# 
  2104  0F11                     	;# 
  2105  0F12                     	;# 
  2106  0F13                     	;# 
  2107  0F14                     	;# 
  2108  0F15                     	;# 
  2109  0F16                     	;# 
  2110  0F17                     	;# 
  2111  0F18                     	;# 
  2112  0F19                     	;# 
  2113  0F1A                     	;# 
  2114  0F1B                     	;# 
  2115  0F1C                     	;# 
  2116  0F1D                     	;# 
  2117  0F1E                     	;# 
  2118  0F1F                     	;# 
  2119  0F20                     	;# 
  2120  0F21                     	;# 
  2121  0F22                     	;# 
  2122  0F23                     	;# 
  2123  0F24                     	;# 
  2124  0F25                     	;# 
  2125  0F26                     	;# 
  2126  0F27                     	;# 
  2127  0F38                     	;# 
  2128  0F39                     	;# 
  2129  0F3A                     	;# 
  2130  0F3B                     	;# 
  2131  0F3C                     	;# 
  2132  0F3D                     	;# 
  2133  0F3E                     	;# 
  2134  0F3F                     	;# 
  2135  0F40                     	;# 
  2136  0F41                     	;# 
  2137  0F43                     	;# 
  2138  0F44                     	;# 
  2139  0F45                     	;# 
  2140  0F46                     	;# 
  2141  0F47                     	;# 
  2142  0F48                     	;# 
  2143  0F49                     	;# 
  2144  0F4A                     	;# 
  2145  0F4B                     	;# 
  2146  0F4C                     	;# 
  2147  0F4E                     	;# 
  2148  0F4F                     	;# 
  2149  0F50                     	;# 
  2150  0F51                     	;# 
  2151  0F52                     	;# 
  2152  0F53                     	;# 
  2153  0F54                     	;# 
  2154  0F55                     	;# 
  2155  0F56                     	;# 
  2156  0F57                     	;# 
  2157  0F65                     	;# 
  2158  0F68                     	;# 
  2159  0F69                     	;# 
  2160  0F6A                     	;# 
  2161  0F6B                     	;# 
  2162  0FE4                     	;# 
  2163  0FE5                     	;# 
  2164  0FE6                     	;# 
  2165  0FE7                     	;# 
  2166  0FE8                     	;# 
  2167  0FE9                     	;# 
  2168  0FEA                     	;# 
  2169  0FEB                     	;# 
  2170  0FED                     	;# 
  2171  0FEE                     	;# 
  2172  0FEF                     	;# 
  2173  0000                     	;# 
  2174  0001                     	;# 
  2175  0002                     	;# 
  2176  0003                     	;# 
  2177  0004                     	;# 
  2178  0005                     	;# 
  2179  0006                     	;# 
  2180  0007                     	;# 
  2181  0008                     	;# 
  2182  0009                     	;# 
  2183  000A                     	;# 
  2184  000B                     	;# 
  2185  000C                     	;# 
  2186  000D                     	;# 
  2187  000E                     	;# 
  2188  0010                     	;# 
  2189  0011                     	;# 
  2190  0012                     	;# 
  2191  0013                     	;# 
  2192  0016                     	;# 
  2193  0017                     	;# 
  2194  0018                     	;# 
  2195  001C                     	;# 
  2196  001C                     	;# 
  2197  001D                     	;# 
  2198  001D                     	;# 
  2199  001E                     	;# 
  2200  001F                     	;# 
  2201  008C                     	;# 
  2202  008C                     	;# 
  2203  008D                     	;# 
  2204  008E                     	;# 
  2205  008E                     	;# 
  2206  008F                     	;# 
  2207  0090                     	;# 
  2208  0090                     	;# 
  2209  0091                     	;# 
  2210  0093                     	;# 
  2211  0094                     	;# 
  2212  0095                     	;# 
  2213  0096                     	;# 
  2214  0097                     	;# 
  2215  0098                     	;# 
  2216  0099                     	;# 
  2217  009A                     	;# 
  2218  009B                     	;# 
  2219  009C                     	;# 
  2220  009D                     	;# 
  2221  009E                     	;# 
  2222  010C                     	;# 
  2223  010D                     	;# 
  2224  010E                     	;# 
  2225  010E                     	;# 
  2226  010F                     	;# 
  2227  0110                     	;# 
  2228  0110                     	;# 
  2229  0111                     	;# 
  2230  0112                     	;# 
  2231  0112                     	;# 
  2232  0113                     	;# 
  2233  0114                     	;# 
  2234  0114                     	;# 
  2235  0115                     	;# 
  2236  0116                     	;# 
  2237  0116                     	;# 
  2238  0117                     	;# 
  2239  0119                     	;# 
  2240  0119                     	;# 
  2241  0119                     	;# 
  2242  011A                     	;# 
  2243  011A                     	;# 
  2244  011A                     	;# 
  2245  011B                     	;# 
  2246  011B                     	;# 
  2247  011B                     	;# 
  2248  011B                     	;# 
  2249  011B                     	;# 
  2250  011C                     	;# 
  2251  011C                     	;# 
  2252  011C                     	;# 
  2253  011D                     	;# 
  2254  011D                     	;# 
  2255  011D                     	;# 
  2256  011E                     	;# 
  2257  011E                     	;# 
  2258  011E                     	;# 
  2259  011F                     	;# 
  2260  011F                     	;# 
  2261  011F                     	;# 
  2262  011F                     	;# 
  2263  011F                     	;# 
  2264  018C                     	;# 
  2265  018D                     	;# 
  2266  018E                     	;# 
  2267  018F                     	;# 
  2268  0190                     	;# 
  2269  0191                     	;# 
  2270  0192                     	;# 
  2271  0196                     	;# 
  2272  0197                     	;# 
  2273  0198                     	;# 
  2274  0199                     	;# 
  2275  019A                     	;# 
  2276  019B                     	;# 
  2277  019C                     	;# 
  2278  020C                     	;# 
  2279  020C                     	;# 
  2280  020D                     	;# 
  2281  020E                     	;# 
  2282  020F                     	;# 
  2283  020F                     	;# 
  2284  0210                     	;# 
  2285  0210                     	;# 
  2286  0211                     	;# 
  2287  0211                     	;# 
  2288  0212                     	;# 
  2289  0212                     	;# 
  2290  0213                     	;# 
  2291  0214                     	;# 
  2292  0215                     	;# 
  2293  0215                     	;# 
  2294  0216                     	;# 
  2295  0216                     	;# 
  2296  0217                     	;# 
  2297  0217                     	;# 
  2298  0218                     	;# 
  2299  0218                     	;# 
  2300  0219                     	;# 
  2301  021A                     	;# 
  2302  021B                     	;# 
  2303  021B                     	;# 
  2304  021C                     	;# 
  2305  021C                     	;# 
  2306  021D                     	;# 
  2307  021D                     	;# 
  2308  021E                     	;# 
  2309  021F                     	;# 
  2310  028C                     	;# 
  2311  028C                     	;# 
  2312  028D                     	;# 
  2313  028D                     	;# 
  2314  028E                     	;# 
  2315  028F                     	;# 
  2316  0290                     	;# 
  2317  0290                     	;# 
  2318  0291                     	;# 
  2319  0292                     	;# 
  2320  0292                     	;# 
  2321  0293                     	;# 
  2322  0293                     	;# 
  2323  0294                     	;# 
  2324  0295                     	;# 
  2325  0296                     	;# 
  2326  0296                     	;# 
  2327  0297                     	;# 
  2328  0298                     	;# 
  2329  0298                     	;# 
  2330  0299                     	;# 
  2331  0299                     	;# 
  2332  029A                     	;# 
  2333  029B                     	;# 
  2334  029C                     	;# 
  2335  029C                     	;# 
  2336  029D                     	;# 
  2337  030C                     	;# 
  2338  030C                     	;# 
  2339  030D                     	;# 
  2340  030E                     	;# 
  2341  030F                     	;# 
  2342  0310                     	;# 
  2343  0310                     	;# 
  2344  0311                     	;# 
  2345  0312                     	;# 
  2346  0313                     	;# 
  2347  0314                     	;# 
  2348  0314                     	;# 
  2349  0315                     	;# 
  2350  0316                     	;# 
  2351  0317                     	;# 
  2352  0318                     	;# 
  2353  0318                     	;# 
  2354  0319                     	;# 
  2355  031A                     	;# 
  2356  031B                     	;# 
  2357  031C                     	;# 
  2358  031C                     	;# 
  2359  031D                     	;# 
  2360  031E                     	;# 
  2361  031F                     	;# 
  2362  038C                     	;# 
  2363  038D                     	;# 
  2364  038E                     	;# 
  2365  0390                     	;# 
  2366  0391                     	;# 
  2367  0392                     	;# 
  2368  040C                     	;# 
  2369  040D                     	;# 
  2370  040E                     	;# 
  2371  040F                     	;# 
  2372  0410                     	;# 
  2373  0411                     	;# 
  2374  0416                     	;# 
  2375  0416                     	;# 
  2376  0417                     	;# 
  2377  0418                     	;# 
  2378  0418                     	;# 
  2379  0419                     	;# 
  2380  041A                     	;# 
  2381  041A                     	;# 
  2382  041B                     	;# 
  2383  041C                     	;# 
  2384  041C                     	;# 
  2385  041D                     	;# 
  2386  041E                     	;# 
  2387  041F                     	;# 
  2388  048C                     	;# 
  2389  048C                     	;# 
  2390  048D                     	;# 
  2391  048E                     	;# 
  2392  048F                     	;# 
  2393  048F                     	;# 
  2394  0490                     	;# 
  2395  0491                     	;# 
  2396  0492                     	;# 
  2397  0492                     	;# 
  2398  0493                     	;# 
  2399  0494                     	;# 
  2400  0495                     	;# 
  2401  0495                     	;# 
  2402  0496                     	;# 
  2403  0497                     	;# 
  2404  0498                     	;# 
  2405  0499                     	;# 
  2406  049A                     	;# 
  2407  049B                     	;# 
  2408  049C                     	;# 
  2409  049D                     	;# 
  2410  050C                     	;# 
  2411  050C                     	;# 
  2412  050D                     	;# 
  2413  050E                     	;# 
  2414  050F                     	;# 
  2415  050F                     	;# 
  2416  0510                     	;# 
  2417  0511                     	;# 
  2418  0512                     	;# 
  2419  0512                     	;# 
  2420  0513                     	;# 
  2421  0514                     	;# 
  2422  0515                     	;# 
  2423  0515                     	;# 
  2424  0516                     	;# 
  2425  0517                     	;# 
  2426  0518                     	;# 
  2427  0519                     	;# 
  2428  051A                     	;# 
  2429  051B                     	;# 
  2430  051C                     	;# 
  2431  051D                     	;# 
  2432  058C                     	;# 
  2433  058C                     	;# 
  2434  058D                     	;# 
  2435  058E                     	;# 
  2436  058F                     	;# 
  2437  058F                     	;# 
  2438  0590                     	;# 
  2439  0591                     	;# 
  2440  0592                     	;# 
  2441  0593                     	;# 
  2442  060C                     	;# 
  2443  060D                     	;# 
  2444  060E                     	;# 
  2445  060F                     	;# 
  2446  0610                     	;# 
  2447  0611                     	;# 
  2448  0612                     	;# 
  2449  0613                     	;# 
  2450  0614                     	;# 
  2451  0616                     	;# 
  2452  0617                     	;# 
  2453  0618                     	;# 
  2454  0619                     	;# 
  2455  061A                     	;# 
  2456  061B                     	;# 
  2457  061C                     	;# 
  2458  061D                     	;# 
  2459  061E                     	;# 
  2460  068C                     	;# 
  2461  068D                     	;# 
  2462  068E                     	;# 
  2463  068F                     	;# 
  2464  0690                     	;# 
  2465  0691                     	;# 
  2466  0692                     	;# 
  2467  0693                     	;# 
  2468  0694                     	;# 
  2469  070C                     	;# 
  2470  070D                     	;# 
  2471  070E                     	;# 
  2472  070F                     	;# 
  2473  0710                     	;# 
  2474  0711                     	;# 
  2475  0712                     	;# 
  2476  0713                     	;# 
  2477  0714                     	;# 
  2478  0716                     	;# 
  2479  0717                     	;# 
  2480  0718                     	;# 
  2481  0719                     	;# 
  2482  071A                     	;# 
  2483  071B                     	;# 
  2484  071C                     	;# 
  2485  071D                     	;# 
  2486  071E                     	;# 
  2487  0796                     	;# 
  2488  0797                     	;# 
  2489  0798                     	;# 
  2490  0799                     	;# 
  2491  079A                     	;# 
  2492  079B                     	;# 
  2493  080C                     	;# 
  2494  080D                     	;# 
  2495  080E                     	;# 
  2496  080F                     	;# 
  2497  0810                     	;# 
  2498  0811                     	;# 
  2499  0812                     	;# 
  2500  0813                     	;# 
  2501  0814                     	;# 
  2502  081A                     	;# 
  2503  081B                     	;# 
  2504  081C                     	;# 
  2505  081D                     	;# 
  2506  081E                     	;# 
  2507  081F                     	;# 
  2508  088C                     	;# 
  2509  088D                     	;# 
  2510  088E                     	;# 
  2511  088F                     	;# 
  2512  0890                     	;# 
  2513  0891                     	;# 
  2514  0892                     	;# 
  2515  0893                     	;# 
  2516  0895                     	;# 
  2517  0896                     	;# 
  2518  0897                     	;# 
  2519  0898                     	;# 
  2520  0899                     	;# 
  2521  089A                     	;# 
  2522  089B                     	;# 
  2523  090C                     	;# 
  2524  090E                     	;# 
  2525  090F                     	;# 
  2526  091F                     	;# 
  2527  091F                     	;# 
  2528  098F                     	;# 
  2529  098F                     	;# 
  2530  0990                     	;# 
  2531  0991                     	;# 
  2532  0992                     	;# 
  2533  0993                     	;# 
  2534  0994                     	;# 
  2535  0995                     	;# 
  2536  0996                     	;# 
  2537  0997                     	;# 
  2538  0E0F                     	;# 
  2539  0E10                     	;# 
  2540  0E11                     	;# 
  2541  0E12                     	;# 
  2542  0E13                     	;# 
  2543  0E14                     	;# 
  2544  0E15                     	;# 
  2545  0E16                     	;# 
  2546  0E17                     	;# 
  2547  0E18                     	;# 
  2548  0E19                     	;# 
  2549  0E1A                     	;# 
  2550  0E1B                     	;# 
  2551  0E1C                     	;# 
  2552  0E1D                     	;# 
  2553  0E1E                     	;# 
  2554  0E1F                     	;# 
  2555  0E20                     	;# 
  2556  0E21                     	;# 
  2557  0E22                     	;# 
  2558  0E23                     	;# 
  2559  0E24                     	;# 
  2560  0E25                     	;# 
  2561  0E26                     	;# 
  2562  0E27                     	;# 
  2563  0E28                     	;# 
  2564  0E29                     	;# 
  2565  0E2A                     	;# 
  2566  0E2B                     	;# 
  2567  0E2C                     	;# 
  2568  0E2D                     	;# 
  2569  0E2E                     	;# 
  2570  0E2F                     	;# 
  2571  0E30                     	;# 
  2572  0E31                     	;# 
  2573  0E32                     	;# 
  2574  0E33                     	;# 
  2575  0E34                     	;# 
  2576  0E35                     	;# 
  2577  0E36                     	;# 
  2578  0E37                     	;# 
  2579  0E8F                     	;# 
  2580  0E90                     	;# 
  2581  0E91                     	;# 
  2582  0E92                     	;# 
  2583  0E93                     	;# 
  2584  0E94                     	;# 
  2585  0E95                     	;# 
  2586  0E96                     	;# 
  2587  0E97                     	;# 
  2588  0E9C                     	;# 
  2589  0E9D                     	;# 
  2590  0E9E                     	;# 
  2591  0EA1                     	;# 
  2592  0EA2                     	;# 
  2593  0EA3                     	;# 
  2594  0EA4                     	;# 
  2595  0EA5                     	;# 
  2596  0EA9                     	;# 
  2597  0EAA                     	;# 
  2598  0EAB                     	;# 
  2599  0EAC                     	;# 
  2600  0EB1                     	;# 
  2601  0EB2                     	;# 
  2602  0EB3                     	;# 
  2603  0EB8                     	;# 
  2604  0EB9                     	;# 
  2605  0EBA                     	;# 
  2606  0EBB                     	;# 
  2607  0EBC                     	;# 
  2608  0EBD                     	;# 
  2609  0EBE                     	;# 
  2610  0EC3                     	;# 
  2611  0EC5                     	;# 
  2612  0EC6                     	;# 
  2613  0EC7                     	;# 
  2614  0EC8                     	;# 
  2615  0EC9                     	;# 
  2616  0ECA                     	;# 
  2617  0ECB                     	;# 
  2618  0ECC                     	;# 
  2619  0F10                     	;# 
  2620  0F11                     	;# 
  2621  0F12                     	;# 
  2622  0F13                     	;# 
  2623  0F14                     	;# 
  2624  0F15                     	;# 
  2625  0F16                     	;# 
  2626  0F17                     	;# 
  2627  0F18                     	;# 
  2628  0F19                     	;# 
  2629  0F1A                     	;# 
  2630  0F1B                     	;# 
  2631  0F1C                     	;# 
  2632  0F1D                     	;# 
  2633  0F1E                     	;# 
  2634  0F1F                     	;# 
  2635  0F20                     	;# 
  2636  0F21                     	;# 
  2637  0F22                     	;# 
  2638  0F23                     	;# 
  2639  0F24                     	;# 
  2640  0F25                     	;# 
  2641  0F26                     	;# 
  2642  0F27                     	;# 
  2643  0F38                     	;# 
  2644  0F39                     	;# 
  2645  0F3A                     	;# 
  2646  0F3B                     	;# 
  2647  0F3C                     	;# 
  2648  0F3D                     	;# 
  2649  0F3E                     	;# 
  2650  0F3F                     	;# 
  2651  0F40                     	;# 
  2652  0F41                     	;# 
  2653  0F43                     	;# 
  2654  0F44                     	;# 
  2655  0F45                     	;# 
  2656  0F46                     	;# 
  2657  0F47                     	;# 
  2658  0F48                     	;# 
  2659  0F49                     	;# 
  2660  0F4A                     	;# 
  2661  0F4B                     	;# 
  2662  0F4C                     	;# 
  2663  0F4E                     	;# 
  2664  0F4F                     	;# 
  2665  0F50                     	;# 
  2666  0F51                     	;# 
  2667  0F52                     	;# 
  2668  0F53                     	;# 
  2669  0F54                     	;# 
  2670  0F55                     	;# 
  2671  0F56                     	;# 
  2672  0F57                     	;# 
  2673  0F65                     	;# 
  2674  0F68                     	;# 
  2675  0F69                     	;# 
  2676  0F6A                     	;# 
  2677  0F6B                     	;# 
  2678  0FE4                     	;# 
  2679  0FE5                     	;# 
  2680  0FE6                     	;# 
  2681  0FE7                     	;# 
  2682  0FE8                     	;# 
  2683  0FE9                     	;# 
  2684  0FEA                     	;# 
  2685  0FEB                     	;# 
  2686  0FED                     	;# 
  2687  0FEE                     	;# 
  2688  0FEF                     	;# 
  2689  0000                     	;# 
  2690  0001                     	;# 
  2691  0002                     	;# 
  2692  0003                     	;# 
  2693  0004                     	;# 
  2694  0005                     	;# 
  2695  0006                     	;# 
  2696  0007                     	;# 
  2697  0008                     	;# 
  2698  0009                     	;# 
  2699  000A                     	;# 
  2700  000B                     	;# 
  2701  000C                     	;# 
  2702  000D                     	;# 
  2703  000E                     	;# 
  2704  0010                     	;# 
  2705  0011                     	;# 
  2706  0012                     	;# 
  2707  0013                     	;# 
  2708  0016                     	;# 
  2709  0017                     	;# 
  2710  0018                     	;# 
  2711  001C                     	;# 
  2712  001C                     	;# 
  2713  001D                     	;# 
  2714  001D                     	;# 
  2715  001E                     	;# 
  2716  001F                     	;# 
  2717  008C                     	;# 
  2718  008C                     	;# 
  2719  008D                     	;# 
  2720  008E                     	;# 
  2721  008E                     	;# 
  2722  008F                     	;# 
  2723  0090                     	;# 
  2724  0090                     	;# 
  2725  0091                     	;# 
  2726  0093                     	;# 
  2727  0094                     	;# 
  2728  0095                     	;# 
  2729  0096                     	;# 
  2730  0097                     	;# 
  2731  0098                     	;# 
  2732  0099                     	;# 
  2733  009A                     	;# 
  2734  009B                     	;# 
  2735  009C                     	;# 
  2736  009D                     	;# 
  2737  009E                     	;# 
  2738  010C                     	;# 
  2739  010D                     	;# 
  2740  010E                     	;# 
  2741  010E                     	;# 
  2742  010F                     	;# 
  2743  0110                     	;# 
  2744  0110                     	;# 
  2745  0111                     	;# 
  2746  0112                     	;# 
  2747  0112                     	;# 
  2748  0113                     	;# 
  2749  0114                     	;# 
  2750  0114                     	;# 
  2751  0115                     	;# 
  2752  0116                     	;# 
  2753  0116                     	;# 
  2754  0117                     	;# 
  2755  0119                     	;# 
  2756  0119                     	;# 
  2757  0119                     	;# 
  2758  011A                     	;# 
  2759  011A                     	;# 
  2760  011A                     	;# 
  2761  011B                     	;# 
  2762  011B                     	;# 
  2763  011B                     	;# 
  2764  011B                     	;# 
  2765  011B                     	;# 
  2766  011C                     	;# 
  2767  011C                     	;# 
  2768  011C                     	;# 
  2769  011D                     	;# 
  2770  011D                     	;# 
  2771  011D                     	;# 
  2772  011E                     	;# 
  2773  011E                     	;# 
  2774  011E                     	;# 
  2775  011F                     	;# 
  2776  011F                     	;# 
  2777  011F                     	;# 
  2778  011F                     	;# 
  2779  011F                     	;# 
  2780  018C                     	;# 
  2781  018D                     	;# 
  2782  018E                     	;# 
  2783  018F                     	;# 
  2784  0190                     	;# 
  2785  0191                     	;# 
  2786  0192                     	;# 
  2787  0196                     	;# 
  2788  0197                     	;# 
  2789  0198                     	;# 
  2790  0199                     	;# 
  2791  019A                     	;# 
  2792  019B                     	;# 
  2793  019C                     	;# 
  2794  020C                     	;# 
  2795  020C                     	;# 
  2796  020D                     	;# 
  2797  020E                     	;# 
  2798  020F                     	;# 
  2799  020F                     	;# 
  2800  0210                     	;# 
  2801  0210                     	;# 
  2802  0211                     	;# 
  2803  0211                     	;# 
  2804  0212                     	;# 
  2805  0212                     	;# 
  2806  0213                     	;# 
  2807  0214                     	;# 
  2808  0215                     	;# 
  2809  0215                     	;# 
  2810  0216                     	;# 
  2811  0216                     	;# 
  2812  0217                     	;# 
  2813  0217                     	;# 
  2814  0218                     	;# 
  2815  0218                     	;# 
  2816  0219                     	;# 
  2817  021A                     	;# 
  2818  021B                     	;# 
  2819  021B                     	;# 
  2820  021C                     	;# 
  2821  021C                     	;# 
  2822  021D                     	;# 
  2823  021D                     	;# 
  2824  021E                     	;# 
  2825  021F                     	;# 
  2826  028C                     	;# 
  2827  028C                     	;# 
  2828  028D                     	;# 
  2829  028D                     	;# 
  2830  028E                     	;# 
  2831  028F                     	;# 
  2832  0290                     	;# 
  2833  0290                     	;# 
  2834  0291                     	;# 
  2835  0292                     	;# 
  2836  0292                     	;# 
  2837  0293                     	;# 
  2838  0293                     	;# 
  2839  0294                     	;# 
  2840  0295                     	;# 
  2841  0296                     	;# 
  2842  0296                     	;# 
  2843  0297                     	;# 
  2844  0298                     	;# 
  2845  0298                     	;# 
  2846  0299                     	;# 
  2847  0299                     	;# 
  2848  029A                     	;# 
  2849  029B                     	;# 
  2850  029C                     	;# 
  2851  029C                     	;# 
  2852  029D                     	;# 
  2853  030C                     	;# 
  2854  030C                     	;# 
  2855  030D                     	;# 
  2856  030E                     	;# 
  2857  030F                     	;# 
  2858  0310                     	;# 
  2859  0310                     	;# 
  2860  0311                     	;# 
  2861  0312                     	;# 
  2862  0313                     	;# 
  2863  0314                     	;# 
  2864  0314                     	;# 
  2865  0315                     	;# 
  2866  0316                     	;# 
  2867  0317                     	;# 
  2868  0318                     	;# 
  2869  0318                     	;# 
  2870  0319                     	;# 
  2871  031A                     	;# 
  2872  031B                     	;# 
  2873  031C                     	;# 
  2874  031C                     	;# 
  2875  031D                     	;# 
  2876  031E                     	;# 
  2877  031F                     	;# 
  2878  038C                     	;# 
  2879  038D                     	;# 
  2880  038E                     	;# 
  2881  0390                     	;# 
  2882  0391                     	;# 
  2883  0392                     	;# 
  2884  040C                     	;# 
  2885  040D                     	;# 
  2886  040E                     	;# 
  2887  040F                     	;# 
  2888  0410                     	;# 
  2889  0411                     	;# 
  2890  0416                     	;# 
  2891  0416                     	;# 
  2892  0417                     	;# 
  2893  0418                     	;# 
  2894  0418                     	;# 
  2895  0419                     	;# 
  2896  041A                     	;# 
  2897  041A                     	;# 
  2898  041B                     	;# 
  2899  041C                     	;# 
  2900  041C                     	;# 
  2901  041D                     	;# 
  2902  041E                     	;# 
  2903  041F                     	;# 
  2904  048C                     	;# 
  2905  048C                     	;# 
  2906  048D                     	;# 
  2907  048E                     	;# 
  2908  048F                     	;# 
  2909  048F                     	;# 
  2910  0490                     	;# 
  2911  0491                     	;# 
  2912  0492                     	;# 
  2913  0492                     	;# 
  2914  0493                     	;# 
  2915  0494                     	;# 
  2916  0495                     	;# 
  2917  0495                     	;# 
  2918  0496                     	;# 
  2919  0497                     	;# 
  2920  0498                     	;# 
  2921  0499                     	;# 
  2922  049A                     	;# 
  2923  049B                     	;# 
  2924  049C                     	;# 
  2925  049D                     	;# 
  2926  050C                     	;# 
  2927  050C                     	;# 
  2928  050D                     	;# 
  2929  050E                     	;# 
  2930  050F                     	;# 
  2931  050F                     	;# 
  2932  0510                     	;# 
  2933  0511                     	;# 
  2934  0512                     	;# 
  2935  0512                     	;# 
  2936  0513                     	;# 
  2937  0514                     	;# 
  2938  0515                     	;# 
  2939  0515                     	;# 
  2940  0516                     	;# 
  2941  0517                     	;# 
  2942  0518                     	;# 
  2943  0519                     	;# 
  2944  051A                     	;# 
  2945  051B                     	;# 
  2946  051C                     	;# 
  2947  051D                     	;# 
  2948  058C                     	;# 
  2949  058C                     	;# 
  2950  058D                     	;# 
  2951  058E                     	;# 
  2952  058F                     	;# 
  2953  058F                     	;# 
  2954  0590                     	;# 
  2955  0591                     	;# 
  2956  0592                     	;# 
  2957  0593                     	;# 
  2958  060C                     	;# 
  2959  060D                     	;# 
  2960  060E                     	;# 
  2961  060F                     	;# 
  2962  0610                     	;# 
  2963  0611                     	;# 
  2964  0612                     	;# 
  2965  0613                     	;# 
  2966  0614                     	;# 
  2967  0616                     	;# 
  2968  0617                     	;# 
  2969  0618                     	;# 
  2970  0619                     	;# 
  2971  061A                     	;# 
  2972  061B                     	;# 
  2973  061C                     	;# 
  2974  061D                     	;# 
  2975  061E                     	;# 
  2976  068C                     	;# 
  2977  068D                     	;# 
  2978  068E                     	;# 
  2979  068F                     	;# 
  2980  0690                     	;# 
  2981  0691                     	;# 
  2982  0692                     	;# 
  2983  0693                     	;# 
  2984  0694                     	;# 
  2985  070C                     	;# 
  2986  070D                     	;# 
  2987  070E                     	;# 
  2988  070F                     	;# 
  2989  0710                     	;# 
  2990  0711                     	;# 
  2991  0712                     	;# 
  2992  0713                     	;# 
  2993  0714                     	;# 
  2994  0716                     	;# 
  2995  0717                     	;# 
  2996  0718                     	;# 
  2997  0719                     	;# 
  2998  071A                     	;# 
  2999  071B                     	;# 
  3000  071C                     	;# 
  3001  071D                     	;# 
  3002  071E                     	;# 
  3003  0796                     	;# 
  3004  0797                     	;# 
  3005  0798                     	;# 
  3006  0799                     	;# 
  3007  079A                     	;# 
  3008  079B                     	;# 
  3009  080C                     	;# 
  3010  080D                     	;# 
  3011  080E                     	;# 
  3012  080F                     	;# 
  3013  0810                     	;# 
  3014  0811                     	;# 
  3015  0812                     	;# 
  3016  0813                     	;# 
  3017  0814                     	;# 
  3018  081A                     	;# 
  3019  081B                     	;# 
  3020  081C                     	;# 
  3021  081D                     	;# 
  3022  081E                     	;# 
  3023  081F                     	;# 
  3024  088C                     	;# 
  3025  088D                     	;# 
  3026  088E                     	;# 
  3027  088F                     	;# 
  3028  0890                     	;# 
  3029  0891                     	;# 
  3030  0892                     	;# 
  3031  0893                     	;# 
  3032  0895                     	;# 
  3033  0896                     	;# 
  3034  0897                     	;# 
  3035  0898                     	;# 
  3036  0899                     	;# 
  3037  089A                     	;# 
  3038  089B                     	;# 
  3039  090C                     	;# 
  3040  090E                     	;# 
  3041  090F                     	;# 
  3042  091F                     	;# 
  3043  091F                     	;# 
  3044  098F                     	;# 
  3045  098F                     	;# 
  3046  0990                     	;# 
  3047  0991                     	;# 
  3048  0992                     	;# 
  3049  0993                     	;# 
  3050  0994                     	;# 
  3051  0995                     	;# 
  3052  0996                     	;# 
  3053  0997                     	;# 
  3054  0E0F                     	;# 
  3055  0E10                     	;# 
  3056  0E11                     	;# 
  3057  0E12                     	;# 
  3058  0E13                     	;# 
  3059  0E14                     	;# 
  3060  0E15                     	;# 
  3061  0E16                     	;# 
  3062  0E17                     	;# 
  3063  0E18                     	;# 
  3064  0E19                     	;# 
  3065  0E1A                     	;# 
  3066  0E1B                     	;# 
  3067  0E1C                     	;# 
  3068  0E1D                     	;# 
  3069  0E1E                     	;# 
  3070  0E1F                     	;# 
  3071  0E20                     	;# 
  3072  0E21                     	;# 
  3073  0E22                     	;# 
  3074  0E23                     	;# 
  3075  0E24                     	;# 
  3076  0E25                     	;# 
  3077  0E26                     	;# 
  3078  0E27                     	;# 
  3079  0E28                     	;# 
  3080  0E29                     	;# 
  3081  0E2A                     	;# 
  3082  0E2B                     	;# 
  3083  0E2C                     	;# 
  3084  0E2D                     	;# 
  3085  0E2E                     	;# 
  3086  0E2F                     	;# 
  3087  0E30                     	;# 
  3088  0E31                     	;# 
  3089  0E32                     	;# 
  3090  0E33                     	;# 
  3091  0E34                     	;# 
  3092  0E35                     	;# 
  3093  0E36                     	;# 
  3094  0E37                     	;# 
  3095  0E8F                     	;# 
  3096  0E90                     	;# 
  3097  0E91                     	;# 
  3098  0E92                     	;# 
  3099  0E93                     	;# 
  3100  0E94                     	;# 
  3101  0E95                     	;# 
  3102  0E96                     	;# 
  3103  0E97                     	;# 
  3104  0E9C                     	;# 
  3105  0E9D                     	;# 
  3106  0E9E                     	;# 
  3107  0EA1                     	;# 
  3108  0EA2                     	;# 
  3109  0EA3                     	;# 
  3110  0EA4                     	;# 
  3111  0EA5                     	;# 
  3112  0EA9                     	;# 
  3113  0EAA                     	;# 
  3114  0EAB                     	;# 
  3115  0EAC                     	;# 
  3116  0EB1                     	;# 
  3117  0EB2                     	;# 
  3118  0EB3                     	;# 
  3119  0EB8                     	;# 
  3120  0EB9                     	;# 
  3121  0EBA                     	;# 
  3122  0EBB                     	;# 
  3123  0EBC                     	;# 
  3124  0EBD                     	;# 
  3125  0EBE                     	;# 
  3126  0EC3                     	;# 
  3127  0EC5                     	;# 
  3128  0EC6                     	;# 
  3129  0EC7                     	;# 
  3130  0EC8                     	;# 
  3131  0EC9                     	;# 
  3132  0ECA                     	;# 
  3133  0ECB                     	;# 
  3134  0ECC                     	;# 
  3135  0F10                     	;# 
  3136  0F11                     	;# 
  3137  0F12                     	;# 
  3138  0F13                     	;# 
  3139  0F14                     	;# 
  3140  0F15                     	;# 
  3141  0F16                     	;# 
  3142  0F17                     	;# 
  3143  0F18                     	;# 
  3144  0F19                     	;# 
  3145  0F1A                     	;# 
  3146  0F1B                     	;# 
  3147  0F1C                     	;# 
  3148  0F1D                     	;# 
  3149  0F1E                     	;# 
  3150  0F1F                     	;# 
  3151  0F20                     	;# 
  3152  0F21                     	;# 
  3153  0F22                     	;# 
  3154  0F23                     	;# 
  3155  0F24                     	;# 
  3156  0F25                     	;# 
  3157  0F26                     	;# 
  3158  0F27                     	;# 
  3159  0F38                     	;# 
  3160  0F39                     	;# 
  3161  0F3A                     	;# 
  3162  0F3B                     	;# 
  3163  0F3C                     	;# 
  3164  0F3D                     	;# 
  3165  0F3E                     	;# 
  3166  0F3F                     	;# 
  3167  0F40                     	;# 
  3168  0F41                     	;# 
  3169  0F43                     	;# 
  3170  0F44                     	;# 
  3171  0F45                     	;# 
  3172  0F46                     	;# 
  3173  0F47                     	;# 
  3174  0F48                     	;# 
  3175  0F49                     	;# 
  3176  0F4A                     	;# 
  3177  0F4B                     	;# 
  3178  0F4C                     	;# 
  3179  0F4E                     	;# 
  3180  0F4F                     	;# 
  3181  0F50                     	;# 
  3182  0F51                     	;# 
  3183  0F52                     	;# 
  3184  0F53                     	;# 
  3185  0F54                     	;# 
  3186  0F55                     	;# 
  3187  0F56                     	;# 
  3188  0F57                     	;# 
  3189  0F65                     	;# 
  3190  0F68                     	;# 
  3191  0F69                     	;# 
  3192  0F6A                     	;# 
  3193  0F6B                     	;# 
  3194  0FE4                     	;# 
  3195  0FE5                     	;# 
  3196  0FE6                     	;# 
  3197  0FE7                     	;# 
  3198  0FE8                     	;# 
  3199  0FE9                     	;# 
  3200  0FEA                     	;# 
  3201  0FEB                     	;# 
  3202  0FED                     	;# 
  3203  0FEE                     	;# 
  3204  0FEF                     	;# 
  3205  0000                     	;# 
  3206  0001                     	;# 
  3207  0002                     	;# 
  3208  0003                     	;# 
  3209  0004                     	;# 
  3210  0005                     	;# 
  3211  0006                     	;# 
  3212  0007                     	;# 
  3213  0008                     	;# 
  3214  0009                     	;# 
  3215  000A                     	;# 
  3216  000B                     	;# 
  3217  000C                     	;# 
  3218  000D                     	;# 
  3219  000E                     	;# 
  3220  0010                     	;# 
  3221  0011                     	;# 
  3222  0012                     	;# 
  3223  0013                     	;# 
  3224  0016                     	;# 
  3225  0017                     	;# 
  3226  0018                     	;# 
  3227  001C                     	;# 
  3228  001C                     	;# 
  3229  001D                     	;# 
  3230  001D                     	;# 
  3231  001E                     	;# 
  3232  001F                     	;# 
  3233  008C                     	;# 
  3234  008C                     	;# 
  3235  008D                     	;# 
  3236  008E                     	;# 
  3237  008E                     	;# 
  3238  008F                     	;# 
  3239  0090                     	;# 
  3240  0090                     	;# 
  3241  0091                     	;# 
  3242  0093                     	;# 
  3243  0094                     	;# 
  3244  0095                     	;# 
  3245  0096                     	;# 
  3246  0097                     	;# 
  3247  0098                     	;# 
  3248  0099                     	;# 
  3249  009A                     	;# 
  3250  009B                     	;# 
  3251  009C                     	;# 
  3252  009D                     	;# 
  3253  009E                     	;# 
  3254  010C                     	;# 
  3255  010D                     	;# 
  3256  010E                     	;# 
  3257  010E                     	;# 
  3258  010F                     	;# 
  3259  0110                     	;# 
  3260  0110                     	;# 
  3261  0111                     	;# 
  3262  0112                     	;# 
  3263  0112                     	;# 
  3264  0113                     	;# 
  3265  0114                     	;# 
  3266  0114                     	;# 
  3267  0115                     	;# 
  3268  0116                     	;# 
  3269  0116                     	;# 
  3270  0117                     	;# 
  3271  0119                     	;# 
  3272  0119                     	;# 
  3273  0119                     	;# 
  3274  011A                     	;# 
  3275  011A                     	;# 
  3276  011A                     	;# 
  3277  011B                     	;# 
  3278  011B                     	;# 
  3279  011B                     	;# 
  3280  011B                     	;# 
  3281  011B                     	;# 
  3282  011C                     	;# 
  3283  011C                     	;# 
  3284  011C                     	;# 
  3285  011D                     	;# 
  3286  011D                     	;# 
  3287  011D                     	;# 
  3288  011E                     	;# 
  3289  011E                     	;# 
  3290  011E                     	;# 
  3291  011F                     	;# 
  3292  011F                     	;# 
  3293  011F                     	;# 
  3294  011F                     	;# 
  3295  011F                     	;# 
  3296  018C                     	;# 
  3297  018D                     	;# 
  3298  018E                     	;# 
  3299  018F                     	;# 
  3300  0190                     	;# 
  3301  0191                     	;# 
  3302  0192                     	;# 
  3303  0196                     	;# 
  3304  0197                     	;# 
  3305  0198                     	;# 
  3306  0199                     	;# 
  3307  019A                     	;# 
  3308  019B                     	;# 
  3309  019C                     	;# 
  3310  020C                     	;# 
  3311  020C                     	;# 
  3312  020D                     	;# 
  3313  020E                     	;# 
  3314  020F                     	;# 
  3315  020F                     	;# 
  3316  0210                     	;# 
  3317  0210                     	;# 
  3318  0211                     	;# 
  3319  0211                     	;# 
  3320  0212                     	;# 
  3321  0212                     	;# 
  3322  0213                     	;# 
  3323  0214                     	;# 
  3324  0215                     	;# 
  3325  0215                     	;# 
  3326  0216                     	;# 
  3327  0216                     	;# 
  3328  0217                     	;# 
  3329  0217                     	;# 
  3330  0218                     	;# 
  3331  0218                     	;# 
  3332  0219                     	;# 
  3333  021A                     	;# 
  3334  021B                     	;# 
  3335  021B                     	;# 
  3336  021C                     	;# 
  3337  021C                     	;# 
  3338  021D                     	;# 
  3339  021D                     	;# 
  3340  021E                     	;# 
  3341  021F                     	;# 
  3342  028C                     	;# 
  3343  028C                     	;# 
  3344  028D                     	;# 
  3345  028D                     	;# 
  3346  028E                     	;# 
  3347  028F                     	;# 
  3348  0290                     	;# 
  3349  0290                     	;# 
  3350  0291                     	;# 
  3351  0292                     	;# 
  3352  0292                     	;# 
  3353  0293                     	;# 
  3354  0293                     	;# 
  3355  0294                     	;# 
  3356  0295                     	;# 
  3357  0296                     	;# 
  3358  0296                     	;# 
  3359  0297                     	;# 
  3360  0298                     	;# 
  3361  0298                     	;# 
  3362  0299                     	;# 
  3363  0299                     	;# 
  3364  029A                     	;# 
  3365  029B                     	;# 
  3366  029C                     	;# 
  3367  029C                     	;# 
  3368  029D                     	;# 
  3369  030C                     	;# 
  3370  030C                     	;# 
  3371  030D                     	;# 
  3372  030E                     	;# 
  3373  030F                     	;# 
  3374  0310                     	;# 
  3375  0310                     	;# 
  3376  0311                     	;# 
  3377  0312                     	;# 
  3378  0313                     	;# 
  3379  0314                     	;# 
  3380  0314                     	;# 
  3381  0315                     	;# 
  3382  0316                     	;# 
  3383  0317                     	;# 
  3384  0318                     	;# 
  3385  0318                     	;# 
  3386  0319                     	;# 
  3387  031A                     	;# 
  3388  031B                     	;# 
  3389  031C                     	;# 
  3390  031C                     	;# 
  3391  031D                     	;# 
  3392  031E                     	;# 
  3393  031F                     	;# 
  3394  038C                     	;# 
  3395  038D                     	;# 
  3396  038E                     	;# 
  3397  0390                     	;# 
  3398  0391                     	;# 
  3399  0392                     	;# 
  3400  040C                     	;# 
  3401  040D                     	;# 
  3402  040E                     	;# 
  3403  040F                     	;# 
  3404  0410                     	;# 
  3405  0411                     	;# 
  3406  0416                     	;# 
  3407  0416                     	;# 
  3408  0417                     	;# 
  3409  0418                     	;# 
  3410  0418                     	;# 
  3411  0419                     	;# 
  3412  041A                     	;# 
  3413  041A                     	;# 
  3414  041B                     	;# 
  3415  041C                     	;# 
  3416  041C                     	;# 
  3417  041D                     	;# 
  3418  041E                     	;# 
  3419  041F                     	;# 
  3420  048C                     	;# 
  3421  048C                     	;# 
  3422  048D                     	;# 
  3423  048E                     	;# 
  3424  048F                     	;# 
  3425  048F                     	;# 
  3426  0490                     	;# 
  3427  0491                     	;# 
  3428  0492                     	;# 
  3429  0492                     	;# 
  3430  0493                     	;# 
  3431  0494                     	;# 
  3432  0495                     	;# 
  3433  0495                     	;# 
  3434  0496                     	;# 
  3435  0497                     	;# 
  3436  0498                     	;# 
  3437  0499                     	;# 
  3438  049A                     	;# 
  3439  049B                     	;# 
  3440  049C                     	;# 
  3441  049D                     	;# 
  3442  050C                     	;# 
  3443  050C                     	;# 
  3444  050D                     	;# 
  3445  050E                     	;# 
  3446  050F                     	;# 
  3447  050F                     	;# 
  3448  0510                     	;# 
  3449  0511                     	;# 
  3450  0512                     	;# 
  3451  0512                     	;# 
  3452  0513                     	;# 
  3453  0514                     	;# 
  3454  0515                     	;# 
  3455  0515                     	;# 
  3456  0516                     	;# 
  3457  0517                     	;# 
  3458  0518                     	;# 
  3459  0519                     	;# 
  3460  051A                     	;# 
  3461  051B                     	;# 
  3462  051C                     	;# 
  3463  051D                     	;# 
  3464  058C                     	;# 
  3465  058C                     	;# 
  3466  058D                     	;# 
  3467  058E                     	;# 
  3468  058F                     	;# 
  3469  058F                     	;# 
  3470  0590                     	;# 
  3471  0591                     	;# 
  3472  0592                     	;# 
  3473  0593                     	;# 
  3474  060C                     	;# 
  3475  060D                     	;# 
  3476  060E                     	;# 
  3477  060F                     	;# 
  3478  0610                     	;# 
  3479  0611                     	;# 
  3480  0612                     	;# 
  3481  0613                     	;# 
  3482  0614                     	;# 
  3483  0616                     	;# 
  3484  0617                     	;# 
  3485  0618                     	;# 
  3486  0619                     	;# 
  3487  061A                     	;# 
  3488  061B                     	;# 
  3489  061C                     	;# 
  3490  061D                     	;# 
  3491  061E                     	;# 
  3492  068C                     	;# 
  3493  068D                     	;# 
  3494  068E                     	;# 
  3495  068F                     	;# 
  3496  0690                     	;# 
  3497  0691                     	;# 
  3498  0692                     	;# 
  3499  0693                     	;# 
  3500  0694                     	;# 
  3501  070C                     	;# 
  3502  070D                     	;# 
  3503  070E                     	;# 
  3504  070F                     	;# 
  3505  0710                     	;# 
  3506  0711                     	;# 
  3507  0712                     	;# 
  3508  0713                     	;# 
  3509  0714                     	;# 
  3510  0716                     	;# 
  3511  0717                     	;# 
  3512  0718                     	;# 
  3513  0719                     	;# 
  3514  071A                     	;# 
  3515  071B                     	;# 
  3516  071C                     	;# 
  3517  071D                     	;# 
  3518  071E                     	;# 
  3519  0796                     	;# 
  3520  0797                     	;# 
  3521  0798                     	;# 
  3522  0799                     	;# 
  3523  079A                     	;# 
  3524  079B                     	;# 
  3525  080C                     	;# 
  3526  080D                     	;# 
  3527  080E                     	;# 
  3528  080F                     	;# 
  3529  0810                     	;# 
  3530  0811                     	;# 
  3531  0812                     	;# 
  3532  0813                     	;# 
  3533  0814                     	;# 
  3534  081A                     	;# 
  3535  081B                     	;# 
  3536  081C                     	;# 
  3537  081D                     	;# 
  3538  081E                     	;# 
  3539  081F                     	;# 
  3540  088C                     	;# 
  3541  088D                     	;# 
  3542  088E                     	;# 
  3543  088F                     	;# 
  3544  0890                     	;# 
  3545  0891                     	;# 
  3546  0892                     	;# 
  3547  0893                     	;# 
  3548  0895                     	;# 
  3549  0896                     	;# 
  3550  0897                     	;# 
  3551  0898                     	;# 
  3552  0899                     	;# 
  3553  089A                     	;# 
  3554  089B                     	;# 
  3555  090C                     	;# 
  3556  090E                     	;# 
  3557  090F                     	;# 
  3558  091F                     	;# 
  3559  091F                     	;# 
  3560  098F                     	;# 
  3561  098F                     	;# 
  3562  0990                     	;# 
  3563  0991                     	;# 
  3564  0992                     	;# 
  3565  0993                     	;# 
  3566  0994                     	;# 
  3567  0995                     	;# 
  3568  0996                     	;# 
  3569  0997                     	;# 
  3570  0E0F                     	;# 
  3571  0E10                     	;# 
  3572  0E11                     	;# 
  3573  0E12                     	;# 
  3574  0E13                     	;# 
  3575  0E14                     	;# 
  3576  0E15                     	;# 
  3577  0E16                     	;# 
  3578  0E17                     	;# 
  3579  0E18                     	;# 
  3580  0E19                     	;# 
  3581  0E1A                     	;# 
  3582  0E1B                     	;# 
  3583  0E1C                     	;# 
  3584  0E1D                     	;# 
  3585  0E1E                     	;# 
  3586  0E1F                     	;# 
  3587  0E20                     	;# 
  3588  0E21                     	;# 
  3589  0E22                     	;# 
  3590  0E23                     	;# 
  3591  0E24                     	;# 
  3592  0E25                     	;# 
  3593  0E26                     	;# 
  3594  0E27                     	;# 
  3595  0E28                     	;# 
  3596  0E29                     	;# 
  3597  0E2A                     	;# 
  3598  0E2B                     	;# 
  3599  0E2C                     	;# 
  3600  0E2D                     	;# 
  3601  0E2E                     	;# 
  3602  0E2F                     	;# 
  3603  0E30                     	;# 
  3604  0E31                     	;# 
  3605  0E32                     	;# 
  3606  0E33                     	;# 
  3607  0E34                     	;# 
  3608  0E35                     	;# 
  3609  0E36                     	;# 
  3610  0E37                     	;# 
  3611  0E8F                     	;# 
  3612  0E90                     	;# 
  3613  0E91                     	;# 
  3614  0E92                     	;# 
  3615  0E93                     	;# 
  3616  0E94                     	;# 
  3617  0E95                     	;# 
  3618  0E96                     	;# 
  3619  0E97                     	;# 
  3620  0E9C                     	;# 
  3621  0E9D                     	;# 
  3622  0E9E                     	;# 
  3623  0EA1                     	;# 
  3624  0EA2                     	;# 
  3625  0EA3                     	;# 
  3626  0EA4                     	;# 
  3627  0EA5                     	;# 
  3628  0EA9                     	;# 
  3629  0EAA                     	;# 
  3630  0EAB                     	;# 
  3631  0EAC                     	;# 
  3632  0EB1                     	;# 
  3633  0EB2                     	;# 
  3634  0EB3                     	;# 
  3635  0EB8                     	;# 
  3636  0EB9                     	;# 
  3637  0EBA                     	;# 
  3638  0EBB                     	;# 
  3639  0EBC                     	;# 
  3640  0EBD                     	;# 
  3641  0EBE                     	;# 
  3642  0EC3                     	;# 
  3643  0EC5                     	;# 
  3644  0EC6                     	;# 
  3645  0EC7                     	;# 
  3646  0EC8                     	;# 
  3647  0EC9                     	;# 
  3648  0ECA                     	;# 
  3649  0ECB                     	;# 
  3650  0ECC                     	;# 
  3651  0F10                     	;# 
  3652  0F11                     	;# 
  3653  0F12                     	;# 
  3654  0F13                     	;# 
  3655  0F14                     	;# 
  3656  0F15                     	;# 
  3657  0F16                     	;# 
  3658  0F17                     	;# 
  3659  0F18                     	;# 
  3660  0F19                     	;# 
  3661  0F1A                     	;# 
  3662  0F1B                     	;# 
  3663  0F1C                     	;# 
  3664  0F1D                     	;# 
  3665  0F1E                     	;# 
  3666  0F1F                     	;# 
  3667  0F20                     	;# 
  3668  0F21                     	;# 
  3669  0F22                     	;# 
  3670  0F23                     	;# 
  3671  0F24                     	;# 
  3672  0F25                     	;# 
  3673  0F26                     	;# 
  3674  0F27                     	;# 
  3675  0F38                     	;# 
  3676  0F39                     	;# 
  3677  0F3A                     	;# 
  3678  0F3B                     	;# 
  3679  0F3C                     	;# 
  3680  0F3D                     	;# 
  3681  0F3E                     	;# 
  3682  0F3F                     	;# 
  3683  0F40                     	;# 
  3684  0F41                     	;# 
  3685  0F43                     	;# 
  3686  0F44                     	;# 
  3687  0F45                     	;# 
  3688  0F46                     	;# 
  3689  0F47                     	;# 
  3690  0F48                     	;# 
  3691  0F49                     	;# 
  3692  0F4A                     	;# 
  3693  0F4B                     	;# 
  3694  0F4C                     	;# 
  3695  0F4E                     	;# 
  3696  0F4F                     	;# 
  3697  0F50                     	;# 
  3698  0F51                     	;# 
  3699  0F52                     	;# 
  3700  0F53                     	;# 
  3701  0F54                     	;# 
  3702  0F55                     	;# 
  3703  0F56                     	;# 
  3704  0F57                     	;# 
  3705  0F65                     	;# 
  3706  0F68                     	;# 
  3707  0F69                     	;# 
  3708  0F6A                     	;# 
  3709  0F6B                     	;# 
  3710  0FE4                     	;# 
  3711  0FE5                     	;# 
  3712  0FE6                     	;# 
  3713  0FE7                     	;# 
  3714  0FE8                     	;# 
  3715  0FE9                     	;# 
  3716  0FEA                     	;# 
  3717  0FEB                     	;# 
  3718  0FED                     	;# 
  3719  0FEE                     	;# 
  3720  0FEF                     	;# 
  3721  0000                     	;# 
  3722  0001                     	;# 
  3723  0002                     	;# 
  3724  0003                     	;# 
  3725  0004                     	;# 
  3726  0005                     	;# 
  3727  0006                     	;# 
  3728  0007                     	;# 
  3729  0008                     	;# 
  3730  0009                     	;# 
  3731  000A                     	;# 
  3732  000B                     	;# 
  3733  000C                     	;# 
  3734  000D                     	;# 
  3735  000E                     	;# 
  3736  0010                     	;# 
  3737  0011                     	;# 
  3738  0012                     	;# 
  3739  0013                     	;# 
  3740  0016                     	;# 
  3741  0017                     	;# 
  3742  0018                     	;# 
  3743  001C                     	;# 
  3744  001C                     	;# 
  3745  001D                     	;# 
  3746  001D                     	;# 
  3747  001E                     	;# 
  3748  001F                     	;# 
  3749  008C                     	;# 
  3750  008C                     	;# 
  3751  008D                     	;# 
  3752  008E                     	;# 
  3753  008E                     	;# 
  3754  008F                     	;# 
  3755  0090                     	;# 
  3756  0090                     	;# 
  3757  0091                     	;# 
  3758  0093                     	;# 
  3759  0094                     	;# 
  3760  0095                     	;# 
  3761  0096                     	;# 
  3762  0097                     	;# 
  3763  0098                     	;# 
  3764  0099                     	;# 
  3765  009A                     	;# 
  3766  009B                     	;# 
  3767  009C                     	;# 
  3768  009D                     	;# 
  3769  009E                     	;# 
  3770  010C                     	;# 
  3771  010D                     	;# 
  3772  010E                     	;# 
  3773  010E                     	;# 
  3774  010F                     	;# 
  3775  0110                     	;# 
  3776  0110                     	;# 
  3777  0111                     	;# 
  3778  0112                     	;# 
  3779  0112                     	;# 
  3780  0113                     	;# 
  3781  0114                     	;# 
  3782  0114                     	;# 
  3783  0115                     	;# 
  3784  0116                     	;# 
  3785  0116                     	;# 
  3786  0117                     	;# 
  3787  0119                     	;# 
  3788  0119                     	;# 
  3789  0119                     	;# 
  3790  011A                     	;# 
  3791  011A                     	;# 
  3792  011A                     	;# 
  3793  011B                     	;# 
  3794  011B                     	;# 
  3795  011B                     	;# 
  3796  011B                     	;# 
  3797  011B                     	;# 
  3798  011C                     	;# 
  3799  011C                     	;# 
  3800  011C                     	;# 
  3801  011D                     	;# 
  3802  011D                     	;# 
  3803  011D                     	;# 
  3804  011E                     	;# 
  3805  011E                     	;# 
  3806  011E                     	;# 
  3807  011F                     	;# 
  3808  011F                     	;# 
  3809  011F                     	;# 
  3810  011F                     	;# 
  3811  011F                     	;# 
  3812  018C                     	;# 
  3813  018D                     	;# 
  3814  018E                     	;# 
  3815  018F                     	;# 
  3816  0190                     	;# 
  3817  0191                     	;# 
  3818  0192                     	;# 
  3819  0196                     	;# 
  3820  0197                     	;# 
  3821  0198                     	;# 
  3822  0199                     	;# 
  3823  019A                     	;# 
  3824  019B                     	;# 
  3825  019C                     	;# 
  3826  020C                     	;# 
  3827  020C                     	;# 
  3828  020D                     	;# 
  3829  020E                     	;# 
  3830  020F                     	;# 
  3831  020F                     	;# 
  3832  0210                     	;# 
  3833  0210                     	;# 
  3834  0211                     	;# 
  3835  0211                     	;# 
  3836  0212                     	;# 
  3837  0212                     	;# 
  3838  0213                     	;# 
  3839  0214                     	;# 
  3840  0215                     	;# 
  3841  0215                     	;# 
  3842  0216                     	;# 
  3843  0216                     	;# 
  3844  0217                     	;# 
  3845  0217                     	;# 
  3846  0218                     	;# 
  3847  0218                     	;# 
  3848  0219                     	;# 
  3849  021A                     	;# 
  3850  021B                     	;# 
  3851  021B                     	;# 
  3852  021C                     	;# 
  3853  021C                     	;# 
  3854  021D                     	;# 
  3855  021D                     	;# 
  3856  021E                     	;# 
  3857  021F                     	;# 
  3858  028C                     	;# 
  3859  028C                     	;# 
  3860  028D                     	;# 
  3861  028D                     	;# 
  3862  028E                     	;# 
  3863  028F                     	;# 
  3864  0290                     	;# 
  3865  0290                     	;# 
  3866  0291                     	;# 
  3867  0292                     	;# 
  3868  0292                     	;# 
  3869  0293                     	;# 
  3870  0293                     	;# 
  3871  0294                     	;# 
  3872  0295                     	;# 
  3873  0296                     	;# 
  3874  0296                     	;# 
  3875  0297                     	;# 
  3876  0298                     	;# 
  3877  0298                     	;# 
  3878  0299                     	;# 
  3879  0299                     	;# 
  3880  029A                     	;# 
  3881  029B                     	;# 
  3882  029C                     	;# 
  3883  029C                     	;# 
  3884  029D                     	;# 
  3885  030C                     	;# 
  3886  030C                     	;# 
  3887  030D                     	;# 
  3888  030E                     	;# 
  3889  030F                     	;# 
  3890  0310                     	;# 
  3891  0310                     	;# 
  3892  0311                     	;# 
  3893  0312                     	;# 
  3894  0313                     	;# 
  3895  0314                     	;# 
  3896  0314                     	;# 
  3897  0315                     	;# 
  3898  0316                     	;# 
  3899  0317                     	;# 
  3900  0318                     	;# 
  3901  0318                     	;# 
  3902  0319                     	;# 
  3903  031A                     	;# 
  3904  031B                     	;# 
  3905  031C                     	;# 
  3906  031C                     	;# 
  3907  031D                     	;# 
  3908  031E                     	;# 
  3909  031F                     	;# 
  3910  038C                     	;# 
  3911  038D                     	;# 
  3912  038E                     	;# 
  3913  0390                     	;# 
  3914  0391                     	;# 
  3915  0392                     	;# 
  3916  040C                     	;# 
  3917  040D                     	;# 
  3918  040E                     	;# 
  3919  040F                     	;# 
  3920  0410                     	;# 
  3921  0411                     	;# 
  3922  0416                     	;# 
  3923  0416                     	;# 
  3924  0417                     	;# 
  3925  0418                     	;# 
  3926  0418                     	;# 
  3927  0419                     	;# 
  3928  041A                     	;# 
  3929  041A                     	;# 
  3930  041B                     	;# 
  3931  041C                     	;# 
  3932  041C                     	;# 
  3933  041D                     	;# 
  3934  041E                     	;# 
  3935  041F                     	;# 
  3936  048C                     	;# 
  3937  048C                     	;# 
  3938  048D                     	;# 
  3939  048E                     	;# 
  3940  048F                     	;# 
  3941  048F                     	;# 
  3942  0490                     	;# 
  3943  0491                     	;# 
  3944  0492                     	;# 
  3945  0492                     	;# 
  3946  0493                     	;# 
  3947  0494                     	;# 
  3948  0495                     	;# 
  3949  0495                     	;# 
  3950  0496                     	;# 
  3951  0497                     	;# 
  3952  0498                     	;# 
  3953  0499                     	;# 
  3954  049A                     	;# 
  3955  049B                     	;# 
  3956  049C                     	;# 
  3957  049D                     	;# 
  3958  050C                     	;# 
  3959  050C                     	;# 
  3960  050D                     	;# 
  3961  050E                     	;# 
  3962  050F                     	;# 
  3963  050F                     	;# 
  3964  0510                     	;# 
  3965  0511                     	;# 
  3966  0512                     	;# 
  3967  0512                     	;# 
  3968  0513                     	;# 
  3969  0514                     	;# 
  3970  0515                     	;# 
  3971  0515                     	;# 
  3972  0516                     	;# 
  3973  0517                     	;# 
  3974  0518                     	;# 
  3975  0519                     	;# 
  3976  051A                     	;# 
  3977  051B                     	;# 
  3978  051C                     	;# 
  3979  051D                     	;# 
  3980  058C                     	;# 
  3981  058C                     	;# 
  3982  058D                     	;# 
  3983  058E                     	;# 
  3984  058F                     	;# 
  3985  058F                     	;# 
  3986  0590                     	;# 
  3987  0591                     	;# 
  3988  0592                     	;# 
  3989  0593                     	;# 
  3990  060C                     	;# 
  3991  060D                     	;# 
  3992  060E                     	;# 
  3993  060F                     	;# 
  3994  0610                     	;# 
  3995  0611                     	;# 
  3996  0612                     	;# 
  3997  0613                     	;# 
  3998  0614                     	;# 
  3999  0616                     	;# 
  4000  0617                     	;# 
  4001  0618                     	;# 
  4002  0619                     	;# 
  4003  061A                     	;# 
  4004  061B                     	;# 
  4005  061C                     	;# 
  4006  061D                     	;# 
  4007  061E                     	;# 
  4008  068C                     	;# 
  4009  068D                     	;# 
  4010  068E                     	;# 
  4011  068F                     	;# 
  4012  0690                     	;# 
  4013  0691                     	;# 
  4014  0692                     	;# 
  4015  0693                     	;# 
  4016  0694                     	;# 
  4017  070C                     	;# 
  4018  070D                     	;# 
  4019  070E                     	;# 
  4020  070F                     	;# 
  4021  0710                     	;# 
  4022  0711                     	;# 
  4023  0712                     	;# 
  4024  0713                     	;# 
  4025  0714                     	;# 
  4026  0716                     	;# 
  4027  0717                     	;# 
  4028  0718                     	;# 
  4029  0719                     	;# 
  4030  071A                     	;# 
  4031  071B                     	;# 
  4032  071C                     	;# 
  4033  071D                     	;# 
  4034  071E                     	;# 
  4035  0796                     	;# 
  4036  0797                     	;# 
  4037  0798                     	;# 
  4038  0799                     	;# 
  4039  079A                     	;# 
  4040  079B                     	;# 
  4041  080C                     	;# 
  4042  080D                     	;# 
  4043  080E                     	;# 
  4044  080F                     	;# 
  4045  0810                     	;# 
  4046  0811                     	;# 
  4047  0812                     	;# 
  4048  0813                     	;# 
  4049  0814                     	;# 
  4050  081A                     	;# 
  4051  081B                     	;# 
  4052  081C                     	;# 
  4053  081D                     	;# 
  4054  081E                     	;# 
  4055  081F                     	;# 
  4056  088C                     	;# 
  4057  088D                     	;# 
  4058  088E                     	;# 
  4059  088F                     	;# 
  4060  0890                     	;# 
  4061  0891                     	;# 
  4062  0892                     	;# 
  4063  0893                     	;# 
  4064  0895                     	;# 
  4065  0896                     	;# 
  4066  0897                     	;# 
  4067  0898                     	;# 
  4068  0899                     	;# 
  4069  089A                     	;# 
  4070  089B                     	;# 
  4071  090C                     	;# 
  4072  090E                     	;# 
  4073  090F                     	;# 
  4074  091F                     	;# 
  4075  091F                     	;# 
  4076  098F                     	;# 
  4077  098F                     	;# 
  4078  0990                     	;# 
  4079  0991                     	;# 
  4080  0992                     	;# 
  4081  0993                     	;# 
  4082  0994                     	;# 
  4083  0995                     	;# 
  4084  0996                     	;# 
  4085  0997                     	;# 
  4086  0E0F                     	;# 
  4087  0E10                     	;# 
  4088  0E11                     	;# 
  4089  0E12                     	;# 
  4090  0E13                     	;# 
  4091  0E14                     	;# 
  4092  0E15                     	;# 
  4093  0E16                     	;# 
  4094  0E17                     	;# 
  4095  0E18                     	;# 
  4096  0E19                     	;# 
  4097  0E1A                     	;# 
  4098  0E1B                     	;# 
  4099  0E1C                     	;# 
  4100  0E1D                     	;# 
  4101  0E1E                     	;# 
  4102  0E1F                     	;# 
  4103  0E20                     	;# 
  4104  0E21                     	;# 
  4105  0E22                     	;# 
  4106  0E23                     	;# 
  4107  0E24                     	;# 
  4108  0E25                     	;# 
  4109  0E26                     	;# 
  4110  0E27                     	;# 
  4111  0E28                     	;# 
  4112  0E29                     	;# 
  4113  0E2A                     	;# 
  4114  0E2B                     	;# 
  4115  0E2C                     	;# 
  4116  0E2D                     	;# 
  4117  0E2E                     	;# 
  4118  0E2F                     	;# 
  4119  0E30                     	;# 
  4120  0E31                     	;# 
  4121  0E32                     	;# 
  4122  0E33                     	;# 
  4123  0E34                     	;# 
  4124  0E35                     	;# 
  4125  0E36                     	;# 
  4126  0E37                     	;# 
  4127  0E8F                     	;# 
  4128  0E90                     	;# 
  4129  0E91                     	;# 
  4130  0E92                     	;# 
  4131  0E93                     	;# 
  4132  0E94                     	;# 
  4133  0E95                     	;# 
  4134  0E96                     	;# 
  4135  0E97                     	;# 
  4136  0E9C                     	;# 
  4137  0E9D                     	;# 
  4138  0E9E                     	;# 
  4139  0EA1                     	;# 
  4140  0EA2                     	;# 
  4141  0EA3                     	;# 
  4142  0EA4                     	;# 
  4143  0EA5                     	;# 
  4144  0EA9                     	;# 
  4145  0EAA                     	;# 
  4146  0EAB                     	;# 
  4147  0EAC                     	;# 
  4148  0EB1                     	;# 
  4149  0EB2                     	;# 
  4150  0EB3                     	;# 
  4151  0EB8                     	;# 
  4152  0EB9                     	;# 
  4153  0EBA                     	;# 
  4154  0EBB                     	;# 
  4155  0EBC                     	;# 
  4156  0EBD                     	;# 
  4157  0EBE                     	;# 
  4158  0EC3                     	;# 
  4159  0EC5                     	;# 
  4160  0EC6                     	;# 
  4161  0EC7                     	;# 
  4162  0EC8                     	;# 
  4163  0EC9                     	;# 
  4164  0ECA                     	;# 
  4165  0ECB                     	;# 
  4166  0ECC                     	;# 
  4167  0F10                     	;# 
  4168  0F11                     	;# 
  4169  0F12                     	;# 
  4170  0F13                     	;# 
  4171  0F14                     	;# 
  4172  0F15                     	;# 
  4173  0F16                     	;# 
  4174  0F17                     	;# 
  4175  0F18                     	;# 
  4176  0F19                     	;# 
  4177  0F1A                     	;# 
  4178  0F1B                     	;# 
  4179  0F1C                     	;# 
  4180  0F1D                     	;# 
  4181  0F1E                     	;# 
  4182  0F1F                     	;# 
  4183  0F20                     	;# 
  4184  0F21                     	;# 
  4185  0F22                     	;# 
  4186  0F23                     	;# 
  4187  0F24                     	;# 
  4188  0F25                     	;# 
  4189  0F26                     	;# 
  4190  0F27                     	;# 
  4191  0F38                     	;# 
  4192  0F39                     	;# 
  4193  0F3A                     	;# 
  4194  0F3B                     	;# 
  4195  0F3C                     	;# 
  4196  0F3D                     	;# 
  4197  0F3E                     	;# 
  4198  0F3F                     	;# 
  4199  0F40                     	;# 
  4200  0F41                     	;# 
  4201  0F43                     	;# 
  4202  0F44                     	;# 
  4203  0F45                     	;# 
  4204  0F46                     	;# 
  4205  0F47                     	;# 
  4206  0F48                     	;# 
  4207  0F49                     	;# 
  4208  0F4A                     	;# 
  4209  0F4B                     	;# 
  4210  0F4C                     	;# 
  4211  0F4E                     	;# 
  4212  0F4F                     	;# 
  4213  0F50                     	;# 
  4214  0F51                     	;# 
  4215  0F52                     	;# 
  4216  0F53                     	;# 
  4217  0F54                     	;# 
  4218  0F55                     	;# 
  4219  0F56                     	;# 
  4220  0F57                     	;# 
  4221  0F65                     	;# 
  4222  0F68                     	;# 
  4223  0F69                     	;# 
  4224  0F6A                     	;# 
  4225  0F6B                     	;# 
  4226  0FE4                     	;# 
  4227  0FE5                     	;# 
  4228  0FE6                     	;# 
  4229  0FE7                     	;# 
  4230  0FE8                     	;# 
  4231  0FE9                     	;# 
  4232  0FEA                     	;# 
  4233  0FEB                     	;# 
  4234  0FED                     	;# 
  4235  0FEE                     	;# 
  4236  0FEF                     	;# 
  4237  0000                     	;# 
  4238  0001                     	;# 
  4239  0002                     	;# 
  4240  0003                     	;# 
  4241  0004                     	;# 
  4242  0005                     	;# 
  4243  0006                     	;# 
  4244  0007                     	;# 
  4245  0008                     	;# 
  4246  0009                     	;# 
  4247  000A                     	;# 
  4248  000B                     	;# 
  4249  000C                     	;# 
  4250  000D                     	;# 
  4251  000E                     	;# 
  4252  0010                     	;# 
  4253  0011                     	;# 
  4254  0012                     	;# 
  4255  0013                     	;# 
  4256  0016                     	;# 
  4257  0017                     	;# 
  4258  0018                     	;# 
  4259  001C                     	;# 
  4260  001C                     	;# 
  4261  001D                     	;# 
  4262  001D                     	;# 
  4263  001E                     	;# 
  4264  001F                     	;# 
  4265  008C                     	;# 
  4266  008C                     	;# 
  4267  008D                     	;# 
  4268  008E                     	;# 
  4269  008E                     	;# 
  4270  008F                     	;# 
  4271  0090                     	;# 
  4272  0090                     	;# 
  4273  0091                     	;# 
  4274  0093                     	;# 
  4275  0094                     	;# 
  4276  0095                     	;# 
  4277  0096                     	;# 
  4278  0097                     	;# 
  4279  0098                     	;# 
  4280  0099                     	;# 
  4281  009A                     	;# 
  4282  009B                     	;# 
  4283  009C                     	;# 
  4284  009D                     	;# 
  4285  009E                     	;# 
  4286  010C                     	;# 
  4287  010D                     	;# 
  4288  010E                     	;# 
  4289  010E                     	;# 
  4290  010F                     	;# 
  4291  0110                     	;# 
  4292  0110                     	;# 
  4293  0111                     	;# 
  4294  0112                     	;# 
  4295  0112                     	;# 
  4296  0113                     	;# 
  4297  0114                     	;# 
  4298  0114                     	;# 
  4299  0115                     	;# 
  4300  0116                     	;# 
  4301  0116                     	;# 
  4302  0117                     	;# 
  4303  0119                     	;# 
  4304  0119                     	;# 
  4305  0119                     	;# 
  4306  011A                     	;# 
  4307  011A                     	;# 
  4308  011A                     	;# 
  4309  011B                     	;# 
  4310  011B                     	;# 
  4311  011B                     	;# 
  4312  011B                     	;# 
  4313  011B                     	;# 
  4314  011C                     	;# 
  4315  011C                     	;# 
  4316  011C                     	;# 
  4317  011D                     	;# 
  4318  011D                     	;# 
  4319  011D                     	;# 
  4320  011E                     	;# 
  4321  011E                     	;# 
  4322  011E                     	;# 
  4323  011F                     	;# 
  4324  011F                     	;# 
  4325  011F                     	;# 
  4326  011F                     	;# 
  4327  011F                     	;# 
  4328  018C                     	;# 
  4329  018D                     	;# 
  4330  018E                     	;# 
  4331  018F                     	;# 
  4332  0190                     	;# 
  4333  0191                     	;# 
  4334  0192                     	;# 
  4335  0196                     	;# 
  4336  0197                     	;# 
  4337  0198                     	;# 
  4338  0199                     	;# 
  4339  019A                     	;# 
  4340  019B                     	;# 
  4341  019C                     	;# 
  4342  020C                     	;# 
  4343  020C                     	;# 
  4344  020D                     	;# 
  4345  020E                     	;# 
  4346  020F                     	;# 
  4347  020F                     	;# 
  4348  0210                     	;# 
  4349  0210                     	;# 
  4350  0211                     	;# 
  4351  0211                     	;# 
  4352  0212                     	;# 
  4353  0212                     	;# 
  4354  0213                     	;# 
  4355  0214                     	;# 
  4356  0215                     	;# 
  4357  0215                     	;# 
  4358  0216                     	;# 
  4359  0216                     	;# 
  4360  0217                     	;# 
  4361  0217                     	;# 
  4362  0218                     	;# 
  4363  0218                     	;# 
  4364  0219                     	;# 
  4365  021A                     	;# 
  4366  021B                     	;# 
  4367  021B                     	;# 
  4368  021C                     	;# 
  4369  021C                     	;# 
  4370  021D                     	;# 
  4371  021D                     	;# 
  4372  021E                     	;# 
  4373  021F                     	;# 
  4374  028C                     	;# 
  4375  028C                     	;# 
  4376  028D                     	;# 
  4377  028D                     	;# 
  4378  028E                     	;# 
  4379  028F                     	;# 
  4380  0290                     	;# 
  4381  0290                     	;# 
  4382  0291                     	;# 
  4383  0292                     	;# 
  4384  0292                     	;# 
  4385  0293                     	;# 
  4386  0293                     	;# 
  4387  0294                     	;# 
  4388  0295                     	;# 
  4389  0296                     	;# 
  4390  0296                     	;# 
  4391  0297                     	;# 
  4392  0298                     	;# 
  4393  0298                     	;# 
  4394  0299                     	;# 
  4395  0299                     	;# 
  4396  029A                     	;# 
  4397  029B                     	;# 
  4398  029C                     	;# 
  4399  029C                     	;# 
  4400  029D                     	;# 
  4401  030C                     	;# 
  4402  030C                     	;# 
  4403  030D                     	;# 
  4404  030E                     	;# 
  4405  030F                     	;# 
  4406  0310                     	;# 
  4407  0310                     	;# 
  4408  0311                     	;# 
  4409  0312                     	;# 
  4410  0313                     	;# 
  4411  0314                     	;# 
  4412  0314                     	;# 
  4413  0315                     	;# 
  4414  0316                     	;# 
  4415  0317                     	;# 
  4416  0318                     	;# 
  4417  0318                     	;# 
  4418  0319                     	;# 
  4419  031A                     	;# 
  4420  031B                     	;# 
  4421  031C                     	;# 
  4422  031C                     	;# 
  4423  031D                     	;# 
  4424  031E                     	;# 
  4425  031F                     	;# 
  4426  038C                     	;# 
  4427  038D                     	;# 
  4428  038E                     	;# 
  4429  0390                     	;# 
  4430  0391                     	;# 
  4431  0392                     	;# 
  4432  040C                     	;# 
  4433  040D                     	;# 
  4434  040E                     	;# 
  4435  040F                     	;# 
  4436  0410                     	;# 
  4437  0411                     	;# 
  4438  0416                     	;# 
  4439  0416                     	;# 
  4440  0417                     	;# 
  4441  0418                     	;# 
  4442  0418                     	;# 
  4443  0419                     	;# 
  4444  041A                     	;# 
  4445  041A                     	;# 
  4446  041B                     	;# 
  4447  041C                     	;# 
  4448  041C                     	;# 
  4449  041D                     	;# 
  4450  041E                     	;# 
  4451  041F                     	;# 
  4452  048C                     	;# 
  4453  048C                     	;# 
  4454  048D                     	;# 
  4455  048E                     	;# 
  4456  048F                     	;# 
  4457  048F                     	;# 
  4458  0490                     	;# 
  4459  0491                     	;# 
  4460  0492                     	;# 
  4461  0492                     	;# 
  4462  0493                     	;# 
  4463  0494                     	;# 
  4464  0495                     	;# 
  4465  0495                     	;# 
  4466  0496                     	;# 
  4467  0497                     	;# 
  4468  0498                     	;# 
  4469  0499                     	;# 
  4470  049A                     	;# 
  4471  049B                     	;# 
  4472  049C                     	;# 
  4473  049D                     	;# 
  4474  050C                     	;# 
  4475  050C                     	;# 
  4476  050D                     	;# 
  4477  050E                     	;# 
  4478  050F                     	;# 
  4479  050F                     	;# 
  4480  0510                     	;# 
  4481  0511                     	;# 
  4482  0512                     	;# 
  4483  0512                     	;# 
  4484  0513                     	;# 
  4485  0514                     	;# 
  4486  0515                     	;# 
  4487  0515                     	;# 
  4488  0516                     	;# 
  4489  0517                     	;# 
  4490  0518                     	;# 
  4491  0519                     	;# 
  4492  051A                     	;# 
  4493  051B                     	;# 
  4494  051C                     	;# 
  4495  051D                     	;# 
  4496  058C                     	;# 
  4497  058C                     	;# 
  4498  058D                     	;# 
  4499  058E                     	;# 
  4500  058F                     	;# 
  4501  058F                     	;# 
  4502  0590                     	;# 
  4503  0591                     	;# 
  4504  0592                     	;# 
  4505  0593                     	;# 
  4506  060C                     	;# 
  4507  060D                     	;# 
  4508  060E                     	;# 
  4509  060F                     	;# 
  4510  0610                     	;# 
  4511  0611                     	;# 
  4512  0612                     	;# 
  4513  0613                     	;# 
  4514  0614                     	;# 
  4515  0616                     	;# 
  4516  0617                     	;# 
  4517  0618                     	;# 
  4518  0619                     	;# 
  4519  061A                     	;# 
  4520  061B                     	;# 
  4521  061C                     	;# 
  4522  061D                     	;# 
  4523  061E                     	;# 
  4524  068C                     	;# 
  4525  068D                     	;# 
  4526  068E                     	;# 
  4527  068F                     	;# 
  4528  0690                     	;# 
  4529  0691                     	;# 
  4530  0692                     	;# 
  4531  0693                     	;# 
  4532  0694                     	;# 
  4533  070C                     	;# 
  4534  070D                     	;# 
  4535  070E                     	;# 
  4536  070F                     	;# 
  4537  0710                     	;# 
  4538  0711                     	;# 
  4539  0712                     	;# 
  4540  0713                     	;# 
  4541  0714                     	;# 
  4542  0716                     	;# 
  4543  0717                     	;# 
  4544  0718                     	;# 
  4545  0719                     	;# 
  4546  071A                     	;# 
  4547  071B                     	;# 
  4548  071C                     	;# 
  4549  071D                     	;# 
  4550  071E                     	;# 
  4551  0796                     	;# 
  4552  0797                     	;# 
  4553  0798                     	;# 
  4554  0799                     	;# 
  4555  079A                     	;# 
  4556  079B                     	;# 
  4557  080C                     	;# 
  4558  080D                     	;# 
  4559  080E                     	;# 
  4560  080F                     	;# 
  4561  0810                     	;# 
  4562  0811                     	;# 
  4563  0812                     	;# 
  4564  0813                     	;# 
  4565  0814                     	;# 
  4566  081A                     	;# 
  4567  081B                     	;# 
  4568  081C                     	;# 
  4569  081D                     	;# 
  4570  081E                     	;# 
  4571  081F                     	;# 
  4572  088C                     	;# 
  4573  088D                     	;# 
  4574  088E                     	;# 
  4575  088F                     	;# 
  4576  0890                     	;# 
  4577  0891                     	;# 
  4578  0892                     	;# 
  4579  0893                     	;# 
  4580  0895                     	;# 
  4581  0896                     	;# 
  4582  0897                     	;# 
  4583  0898                     	;# 
  4584  0899                     	;# 
  4585  089A                     	;# 
  4586  089B                     	;# 
  4587  090C                     	;# 
  4588  090E                     	;# 
  4589  090F                     	;# 
  4590  091F                     	;# 
  4591  091F                     	;# 
  4592  098F                     	;# 
  4593  098F                     	;# 
  4594  0990                     	;# 
  4595  0991                     	;# 
  4596  0992                     	;# 
  4597  0993                     	;# 
  4598  0994                     	;# 
  4599  0995                     	;# 
  4600  0996                     	;# 
  4601  0997                     	;# 
  4602  0E0F                     	;# 
  4603  0E10                     	;# 
  4604  0E11                     	;# 
  4605  0E12                     	;# 
  4606  0E13                     	;# 
  4607  0E14                     	;# 
  4608  0E15                     	;# 
  4609  0E16                     	;# 
  4610  0E17                     	;# 
  4611  0E18                     	;# 
  4612  0E19                     	;# 
  4613  0E1A                     	;# 
  4614  0E1B                     	;# 
  4615  0E1C                     	;# 
  4616  0E1D                     	;# 
  4617  0E1E                     	;# 
  4618  0E1F                     	;# 
  4619  0E20                     	;# 
  4620  0E21                     	;# 
  4621  0E22                     	;# 
  4622  0E23                     	;# 
  4623  0E24                     	;# 
  4624  0E25                     	;# 
  4625  0E26                     	;# 
  4626  0E27                     	;# 
  4627  0E28                     	;# 
  4628  0E29                     	;# 
  4629  0E2A                     	;# 
  4630  0E2B                     	;# 
  4631  0E2C                     	;# 
  4632  0E2D                     	;# 
  4633  0E2E                     	;# 
  4634  0E2F                     	;# 
  4635  0E30                     	;# 
  4636  0E31                     	;# 
  4637  0E32                     	;# 
  4638  0E33                     	;# 
  4639  0E34                     	;# 
  4640  0E35                     	;# 
  4641  0E36                     	;# 
  4642  0E37                     	;# 
  4643  0E8F                     	;# 
  4644  0E90                     	;# 
  4645  0E91                     	;# 
  4646  0E92                     	;# 
  4647  0E93                     	;# 
  4648  0E94                     	;# 
  4649  0E95                     	;# 
  4650  0E96                     	;# 
  4651  0E97                     	;# 
  4652  0E9C                     	;# 
  4653  0E9D                     	;# 
  4654  0E9E                     	;# 
  4655  0EA1                     	;# 
  4656  0EA2                     	;# 
  4657  0EA3                     	;# 
  4658  0EA4                     	;# 
  4659  0EA5                     	;# 
  4660  0EA9                     	;# 
  4661  0EAA                     	;# 
  4662  0EAB                     	;# 
  4663  0EAC                     	;# 
  4664  0EB1                     	;# 
  4665  0EB2                     	;# 
  4666  0EB3                     	;# 
  4667  0EB8                     	;# 
  4668  0EB9                     	;# 
  4669  0EBA                     	;# 
  4670  0EBB                     	;# 
  4671  0EBC                     	;# 
  4672  0EBD                     	;# 
  4673  0EBE                     	;# 
  4674  0EC3                     	;# 
  4675  0EC5                     	;# 
  4676  0EC6                     	;# 
  4677  0EC7                     	;# 
  4678  0EC8                     	;# 
  4679  0EC9                     	;# 
  4680  0ECA                     	;# 
  4681  0ECB                     	;# 
  4682  0ECC                     	;# 
  4683  0F10                     	;# 
  4684  0F11                     	;# 
  4685  0F12                     	;# 
  4686  0F13                     	;# 
  4687  0F14                     	;# 
  4688  0F15                     	;# 
  4689  0F16                     	;# 
  4690  0F17                     	;# 
  4691  0F18                     	;# 
  4692  0F19                     	;# 
  4693  0F1A                     	;# 
  4694  0F1B                     	;# 
  4695  0F1C                     	;# 
  4696  0F1D                     	;# 
  4697  0F1E                     	;# 
  4698  0F1F                     	;# 
  4699  0F20                     	;# 
  4700  0F21                     	;# 
  4701  0F22                     	;# 
  4702  0F23                     	;# 
  4703  0F24                     	;# 
  4704  0F25                     	;# 
  4705  0F26                     	;# 
  4706  0F27                     	;# 
  4707  0F38                     	;# 
  4708  0F39                     	;# 
  4709  0F3A                     	;# 
  4710  0F3B                     	;# 
  4711  0F3C                     	;# 
  4712  0F3D                     	;# 
  4713  0F3E                     	;# 
  4714  0F3F                     	;# 
  4715  0F40                     	;# 
  4716  0F41                     	;# 
  4717  0F43                     	;# 
  4718  0F44                     	;# 
  4719  0F45                     	;# 
  4720  0F46                     	;# 
  4721  0F47                     	;# 
  4722  0F48                     	;# 
  4723  0F49                     	;# 
  4724  0F4A                     	;# 
  4725  0F4B                     	;# 
  4726  0F4C                     	;# 
  4727  0F4E                     	;# 
  4728  0F4F                     	;# 
  4729  0F50                     	;# 
  4730  0F51                     	;# 
  4731  0F52                     	;# 
  4732  0F53                     	;# 
  4733  0F54                     	;# 
  4734  0F55                     	;# 
  4735  0F56                     	;# 
  4736  0F57                     	;# 
  4737  0F65                     	;# 
  4738  0F68                     	;# 
  4739  0F69                     	;# 
  4740  0F6A                     	;# 
  4741  0F6B                     	;# 
  4742  0FE4                     	;# 
  4743  0FE5                     	;# 
  4744  0FE6                     	;# 
  4745  0FE7                     	;# 
  4746  0FE8                     	;# 
  4747  0FE9                     	;# 
  4748  0FEA                     	;# 
  4749  0FEB                     	;# 
  4750  0FED                     	;# 
  4751  0FEE                     	;# 
  4752  0FEF                     	;# 
  4753  0000                     	;# 
  4754  0001                     	;# 
  4755  0002                     	;# 
  4756  0003                     	;# 
  4757  0004                     	;# 
  4758  0005                     	;# 
  4759  0006                     	;# 
  4760  0007                     	;# 
  4761  0008                     	;# 
  4762  0009                     	;# 
  4763  000A                     	;# 
  4764  000B                     	;# 
  4765  000C                     	;# 
  4766  000D                     	;# 
  4767  000E                     	;# 
  4768  0010                     	;# 
  4769  0011                     	;# 
  4770  0012                     	;# 
  4771  0013                     	;# 
  4772  0016                     	;# 
  4773  0017                     	;# 
  4774  0018                     	;# 
  4775  001C                     	;# 
  4776  001C                     	;# 
  4777  001D                     	;# 
  4778  001D                     	;# 
  4779  001E                     	;# 
  4780  001F                     	;# 
  4781  008C                     	;# 
  4782  008C                     	;# 
  4783  008D                     	;# 
  4784  008E                     	;# 
  4785  008E                     	;# 
  4786  008F                     	;# 
  4787  0090                     	;# 
  4788  0090                     	;# 
  4789  0091                     	;# 
  4790  0093                     	;# 
  4791  0094                     	;# 
  4792  0095                     	;# 
  4793  0096                     	;# 
  4794  0097                     	;# 
  4795  0098                     	;# 
  4796  0099                     	;# 
  4797  009A                     	;# 
  4798  009B                     	;# 
  4799  009C                     	;# 
  4800  009D                     	;# 
  4801  009E                     	;# 
  4802  010C                     	;# 
  4803  010D                     	;# 
  4804  010E                     	;# 
  4805  010E                     	;# 
  4806  010F                     	;# 
  4807  0110                     	;# 
  4808  0110                     	;# 
  4809  0111                     	;# 
  4810  0112                     	;# 
  4811  0112                     	;# 
  4812  0113                     	;# 
  4813  0114                     	;# 
  4814  0114                     	;# 
  4815  0115                     	;# 
  4816  0116                     	;# 
  4817  0116                     	;# 
  4818  0117                     	;# 
  4819  0119                     	;# 
  4820  0119                     	;# 
  4821  0119                     	;# 
  4822  011A                     	;# 
  4823  011A                     	;# 
  4824  011A                     	;# 
  4825  011B                     	;# 
  4826  011B                     	;# 
  4827  011B                     	;# 
  4828  011B                     	;# 
  4829  011B                     	;# 
  4830  011C                     	;# 
  4831  011C                     	;# 
  4832  011C                     	;# 
  4833  011D                     	;# 
  4834  011D                     	;# 
  4835  011D                     	;# 
  4836  011E                     	;# 
  4837  011E                     	;# 
  4838  011E                     	;# 
  4839  011F                     	;# 
  4840  011F                     	;# 
  4841  011F                     	;# 
  4842  011F                     	;# 
  4843  011F                     	;# 
  4844  018C                     	;# 
  4845  018D                     	;# 
  4846  018E                     	;# 
  4847  018F                     	;# 
  4848  0190                     	;# 
  4849  0191                     	;# 
  4850  0192                     	;# 
  4851  0196                     	;# 
  4852  0197                     	;# 
  4853  0198                     	;# 
  4854  0199                     	;# 
  4855  019A                     	;# 
  4856  019B                     	;# 
  4857  019C                     	;# 
  4858  020C                     	;# 
  4859  020C                     	;# 
  4860  020D                     	;# 
  4861  020E                     	;# 
  4862  020F                     	;# 
  4863  020F                     	;# 
  4864  0210                     	;# 
  4865  0210                     	;# 
  4866  0211                     	;# 
  4867  0211                     	;# 
  4868  0212                     	;# 
  4869  0212                     	;# 
  4870  0213                     	;# 
  4871  0214                     	;# 
  4872  0215                     	;# 
  4873  0215                     	;# 
  4874  0216                     	;# 
  4875  0216                     	;# 
  4876  0217                     	;# 
  4877  0217                     	;# 
  4878  0218                     	;# 
  4879  0218                     	;# 
  4880  0219                     	;# 
  4881  021A                     	;# 
  4882  021B                     	;# 
  4883  021B                     	;# 
  4884  021C                     	;# 
  4885  021C                     	;# 
  4886  021D                     	;# 
  4887  021D                     	;# 
  4888  021E                     	;# 
  4889  021F                     	;# 
  4890  028C                     	;# 
  4891  028C                     	;# 
  4892  028D                     	;# 
  4893  028D                     	;# 
  4894  028E                     	;# 
  4895  028F                     	;# 
  4896  0290                     	;# 
  4897  0290                     	;# 
  4898  0291                     	;# 
  4899  0292                     	;# 
  4900  0292                     	;# 
  4901  0293                     	;# 
  4902  0293                     	;# 
  4903  0294                     	;# 
  4904  0295                     	;# 
  4905  0296                     	;# 
  4906  0296                     	;# 
  4907  0297                     	;# 
  4908  0298                     	;# 
  4909  0298                     	;# 
  4910  0299                     	;# 
  4911  0299                     	;# 
  4912  029A                     	;# 
  4913  029B                     	;# 
  4914  029C                     	;# 
  4915  029C                     	;# 
  4916  029D                     	;# 
  4917  030C                     	;# 
  4918  030C                     	;# 
  4919  030D                     	;# 
  4920  030E                     	;# 
  4921  030F                     	;# 
  4922  0310                     	;# 
  4923  0310                     	;# 
  4924  0311                     	;# 
  4925  0312                     	;# 
  4926  0313                     	;# 
  4927  0314                     	;# 
  4928  0314                     	;# 
  4929  0315                     	;# 
  4930  0316                     	;# 
  4931  0317                     	;# 
  4932  0318                     	;# 
  4933  0318                     	;# 
  4934  0319                     	;# 
  4935  031A                     	;# 
  4936  031B                     	;# 
  4937  031C                     	;# 
  4938  031C                     	;# 
  4939  031D                     	;# 
  4940  031E                     	;# 
  4941  031F                     	;# 
  4942  038C                     	;# 
  4943  038D                     	;# 
  4944  038E                     	;# 
  4945  0390                     	;# 
  4946  0391                     	;# 
  4947  0392                     	;# 
  4948  040C                     	;# 
  4949  040D                     	;# 
  4950  040E                     	;# 
  4951  040F                     	;# 
  4952  0410                     	;# 
  4953  0411                     	;# 
  4954  0416                     	;# 
  4955  0416                     	;# 
  4956  0417                     	;# 
  4957  0418                     	;# 
  4958  0418                     	;# 
  4959  0419                     	;# 
  4960  041A                     	;# 
  4961  041A                     	;# 
  4962  041B                     	;# 
  4963  041C                     	;# 
  4964  041C                     	;# 
  4965  041D                     	;# 
  4966  041E                     	;# 
  4967  041F                     	;# 
  4968  048C                     	;# 
  4969  048C                     	;# 
  4970  048D                     	;# 
  4971  048E                     	;# 
  4972  048F                     	;# 
  4973  048F                     	;# 
  4974  0490                     	;# 
  4975  0491                     	;# 
  4976  0492                     	;# 
  4977  0492                     	;# 
  4978  0493                     	;# 
  4979  0494                     	;# 
  4980  0495                     	;# 
  4981  0495                     	;# 
  4982  0496                     	;# 
  4983  0497                     	;# 
  4984  0498                     	;# 
  4985  0499                     	;# 
  4986  049A                     	;# 
  4987  049B                     	;# 
  4988  049C                     	;# 
  4989  049D                     	;# 
  4990  050C                     	;# 
  4991  050C                     	;# 
  4992  050D                     	;# 
  4993  050E                     	;# 
  4994  050F                     	;# 
  4995  050F                     	;# 
  4996  0510                     	;# 
  4997  0511                     	;# 
  4998  0512                     	;# 
  4999  0512                     	;# 
  5000  0513                     	;# 
  5001  0514                     	;# 
  5002  0515                     	;# 
  5003  0515                     	;# 
  5004  0516                     	;# 
  5005  0517                     	;# 
  5006  0518                     	;# 
  5007  0519                     	;# 
  5008  051A                     	;# 
  5009  051B                     	;# 
  5010  051C                     	;# 
  5011  051D                     	;# 
  5012  058C                     	;# 
  5013  058C                     	;# 
  5014  058D                     	;# 
  5015  058E                     	;# 
  5016  058F                     	;# 
  5017  058F                     	;# 
  5018  0590                     	;# 
  5019  0591                     	;# 
  5020  0592                     	;# 
  5021  0593                     	;# 
  5022  060C                     	;# 
  5023  060D                     	;# 
  5024  060E                     	;# 
  5025  060F                     	;# 
  5026  0610                     	;# 
  5027  0611                     	;# 
  5028  0612                     	;# 
  5029  0613                     	;# 
  5030  0614                     	;# 
  5031  0616                     	;# 
  5032  0617                     	;# 
  5033  0618                     	;# 
  5034  0619                     	;# 
  5035  061A                     	;# 
  5036  061B                     	;# 
  5037  061C                     	;# 
  5038  061D                     	;# 
  5039  061E                     	;# 
  5040  068C                     	;# 
  5041  068D                     	;# 
  5042  068E                     	;# 
  5043  068F                     	;# 
  5044  0690                     	;# 
  5045  0691                     	;# 
  5046  0692                     	;# 
  5047  0693                     	;# 
  5048  0694                     	;# 
  5049  070C                     	;# 
  5050  070D                     	;# 
  5051  070E                     	;# 
  5052  070F                     	;# 
  5053  0710                     	;# 
  5054  0711                     	;# 
  5055  0712                     	;# 
  5056  0713                     	;# 
  5057  0714                     	;# 
  5058  0716                     	;# 
  5059  0717                     	;# 
  5060  0718                     	;# 
  5061  0719                     	;# 
  5062  071A                     	;# 
  5063  071B                     	;# 
  5064  071C                     	;# 
  5065  071D                     	;# 
  5066  071E                     	;# 
  5067  0796                     	;# 
  5068  0797                     	;# 
  5069  0798                     	;# 
  5070  0799                     	;# 
  5071  079A                     	;# 
  5072  079B                     	;# 
  5073  080C                     	;# 
  5074  080D                     	;# 
  5075  080E                     	;# 
  5076  080F                     	;# 
  5077  0810                     	;# 
  5078  0811                     	;# 
  5079  0812                     	;# 
  5080  0813                     	;# 
  5081  0814                     	;# 
  5082  081A                     	;# 
  5083  081B                     	;# 
  5084  081C                     	;# 
  5085  081D                     	;# 
  5086  081E                     	;# 
  5087  081F                     	;# 
  5088  088C                     	;# 
  5089  088D                     	;# 
  5090  088E                     	;# 
  5091  088F                     	;# 
  5092  0890                     	;# 
  5093  0891                     	;# 
  5094  0892                     	;# 
  5095  0893                     	;# 
  5096  0895                     	;# 
  5097  0896                     	;# 
  5098  0897                     	;# 
  5099  0898                     	;# 
  5100  0899                     	;# 
  5101  089A                     	;# 
  5102  089B                     	;# 
  5103  090C                     	;# 
  5104  090E                     	;# 
  5105  090F                     	;# 
  5106  091F                     	;# 
  5107  091F                     	;# 
  5108  098F                     	;# 
  5109  098F                     	;# 
  5110  0990                     	;# 
  5111  0991                     	;# 
  5112  0992                     	;# 
  5113  0993                     	;# 
  5114  0994                     	;# 
  5115  0995                     	;# 
  5116  0996                     	;# 
  5117  0997                     	;# 
  5118  0E0F                     	;# 
  5119  0E10                     	;# 
  5120  0E11                     	;# 
  5121  0E12                     	;# 
  5122  0E13                     	;# 
  5123  0E14                     	;# 
  5124  0E15                     	;# 
  5125  0E16                     	;# 
  5126  0E17                     	;# 
  5127  0E18                     	;# 
  5128  0E19                     	;# 
  5129  0E1A                     	;# 
  5130  0E1B                     	;# 
  5131  0E1C                     	;# 
  5132  0E1D                     	;# 
  5133  0E1E                     	;# 
  5134  0E1F                     	;# 
  5135  0E20                     	;# 
  5136  0E21                     	;# 
  5137  0E22                     	;# 
  5138  0E23                     	;# 
  5139  0E24                     	;# 
  5140  0E25                     	;# 
  5141  0E26                     	;# 
  5142  0E27                     	;# 
  5143  0E28                     	;# 
  5144  0E29                     	;# 
  5145  0E2A                     	;# 
  5146  0E2B                     	;# 
  5147  0E2C                     	;# 
  5148  0E2D                     	;# 
  5149  0E2E                     	;# 
  5150  0E2F                     	;# 
  5151  0E30                     	;# 
  5152  0E31                     	;# 
  5153  0E32                     	;# 
  5154  0E33                     	;# 
  5155  0E34                     	;# 
  5156  0E35                     	;# 
  5157  0E36                     	;# 
  5158  0E37                     	;# 
  5159  0E8F                     	;# 
  5160  0E90                     	;# 
  5161  0E91                     	;# 
  5162  0E92                     	;# 
  5163  0E93                     	;# 
  5164  0E94                     	;# 
  5165  0E95                     	;# 
  5166  0E96                     	;# 
  5167  0E97                     	;# 
  5168  0E9C                     	;# 
  5169  0E9D                     	;# 
  5170  0E9E                     	;# 
  5171  0EA1                     	;# 
  5172  0EA2                     	;# 
  5173  0EA3                     	;# 
  5174  0EA4                     	;# 
  5175  0EA5                     	;# 
  5176  0EA9                     	;# 
  5177  0EAA                     	;# 
  5178  0EAB                     	;# 
  5179  0EAC                     	;# 
  5180  0EB1                     	;# 
  5181  0EB2                     	;# 
  5182  0EB3                     	;# 
  5183  0EB8                     	;# 
  5184  0EB9                     	;# 
  5185  0EBA                     	;# 
  5186  0EBB                     	;# 
  5187  0EBC                     	;# 
  5188  0EBD                     	;# 
  5189  0EBE                     	;# 
  5190  0EC3                     	;# 
  5191  0EC5                     	;# 
  5192  0EC6                     	;# 
  5193  0EC7                     	;# 
  5194  0EC8                     	;# 
  5195  0EC9                     	;# 
  5196  0ECA                     	;# 
  5197  0ECB                     	;# 
  5198  0ECC                     	;# 
  5199  0F10                     	;# 
  5200  0F11                     	;# 
  5201  0F12                     	;# 
  5202  0F13                     	;# 
  5203  0F14                     	;# 
  5204  0F15                     	;# 
  5205  0F16                     	;# 
  5206  0F17                     	;# 
  5207  0F18                     	;# 
  5208  0F19                     	;# 
  5209  0F1A                     	;# 
  5210  0F1B                     	;# 
  5211  0F1C                     	;# 
  5212  0F1D                     	;# 
  5213  0F1E                     	;# 
  5214  0F1F                     	;# 
  5215  0F20                     	;# 
  5216  0F21                     	;# 
  5217  0F22                     	;# 
  5218  0F23                     	;# 
  5219  0F24                     	;# 
  5220  0F25                     	;# 
  5221  0F26                     	;# 
  5222  0F27                     	;# 
  5223  0F38                     	;# 
  5224  0F39                     	;# 
  5225  0F3A                     	;# 
  5226  0F3B                     	;# 
  5227  0F3C                     	;# 
  5228  0F3D                     	;# 
  5229  0F3E                     	;# 
  5230  0F3F                     	;# 
  5231  0F40                     	;# 
  5232  0F41                     	;# 
  5233  0F43                     	;# 
  5234  0F44                     	;# 
  5235  0F45                     	;# 
  5236  0F46                     	;# 
  5237  0F47                     	;# 
  5238  0F48                     	;# 
  5239  0F49                     	;# 
  5240  0F4A                     	;# 
  5241  0F4B                     	;# 
  5242  0F4C                     	;# 
  5243  0F4E                     	;# 
  5244  0F4F                     	;# 
  5245  0F50                     	;# 
  5246  0F51                     	;# 
  5247  0F52                     	;# 
  5248  0F53                     	;# 
  5249  0F54                     	;# 
  5250  0F55                     	;# 
  5251  0F56                     	;# 
  5252  0F57                     	;# 
  5253  0F65                     	;# 
  5254  0F68                     	;# 
  5255  0F69                     	;# 
  5256  0F6A                     	;# 
  5257  0F6B                     	;# 
  5258  0FE4                     	;# 
  5259  0FE5                     	;# 
  5260  0FE6                     	;# 
  5261  0FE7                     	;# 
  5262  0FE8                     	;# 
  5263  0FE9                     	;# 
  5264  0FEA                     	;# 
  5265  0FEB                     	;# 
  5266  0FED                     	;# 
  5267  0FEE                     	;# 
  5268  0FEF                     	;_samples
  5269                           
  5270                           	psect	idataBANK0
  5271  12D0                     __pidataBANK0:	
  5272                           
  5273                           ;initializer for _batteryTemp
  5274  12D0  342C               	retlw	44
  5275  12D1  3401               	retlw	1
  5276                           
  5277                           	psect	idataBANK2
  5278  12D2                     __pidataBANK2:	
  5279                           
  5280                           ;initializer for _channels
  5281  12D2  3414               	retlw	20
  5282  12D3  3400               	retlw	0
  5283  12D4  3410               	retlw	16
  5284  12D5  3400               	retlw	0
  5285  12D6  3416               	retlw	22
  5286  12D7  3400               	retlw	0
  5287  12D8  3412               	retlw	18
  5288  12D9  3400               	retlw	0
  5289                           
  5290                           	psect	stringtext1
  5291  1000                     __pstringtext1:	
  5292  1000                     _fonts:	
  5293  1000  3400               	retlw	0
  5294  1001  3400               	retlw	0
  5295  1002  3400               	retlw	0
  5296  1003  3400               	retlw	0
  5297  1004  344E               	retlw	78
  5298  1005  3400               	retlw	0
  5299  1006  3406               	retlw	6
  5300  1007  3400               	retlw	0
  5301  1008  3406               	retlw	6
  5302  1009  34FF               	retlw	255
  5303  100A  34FF               	retlw	255
  5304  100B  34FF               	retlw	255
  5305  100C  3448               	retlw	72
  5306  100D  34D6               	retlw	214
  5307  100E  3424               	retlw	36
  5308  100F  3412               	retlw	18
  5309  1010  3408               	retlw	8
  5310  1011  3424               	retlw	36
  5311  1012  34FF               	retlw	255
  5312  1013  34FF               	retlw	255
  5313  1014  34FF               	retlw	255
  5314  1015  3400               	retlw	0
  5315  1016  3406               	retlw	6
  5316  1017  3400               	retlw	0
  5317  1018  3438               	retlw	56
  5318  1019  3444               	retlw	68
  5319  101A  3482               	retlw	130
  5320  101B  3482               	retlw	130
  5321  101C  3444               	retlw	68
  5322  101D  3438               	retlw	56
  5323  101E  3414               	retlw	20
  5324  101F  3408               	retlw	8
  5325  1020  343E               	retlw	62
  5326  1021  3410               	retlw	16
  5327  1022  3438               	retlw	56
  5328  1023  3410               	retlw	16
  5329  1024  34A0               	retlw	160
  5330  1025  3460               	retlw	96
  5331  1026  3400               	retlw	0
  5332  1027  3410               	retlw	16
  5333  1028  3410               	retlw	16
  5334  1029  3410               	retlw	16
  5335  102A  3460               	retlw	96
  5336  102B  3460               	retlw	96
  5337  102C  3400               	retlw	0
  5338  102D  3460               	retlw	96
  5339  102E  3418               	retlw	24
  5340  102F  3406               	retlw	6
  5341  1030  347C               	retlw	124
  5342  1031  3442               	retlw	66
  5343  1032  347C               	retlw	124
  5344  1033  3444               	retlw	68
  5345  1034  347E               	retlw	126
  5346  1035  3440               	retlw	64
  5347  1036  3464               	retlw	100
  5348  1037  3452               	retlw	82
  5349  1038  344C               	retlw	76
  5350  1039  344A               	retlw	74
  5351  103A  344A               	retlw	74
  5352  103B  3434               	retlw	52
  5353  103C  3438               	retlw	56
  5354  103D  3424               	retlw	36
  5355  103E  347E               	retlw	126
  5356  103F  344E               	retlw	78
  5357  1040  344A               	retlw	74
  5358  1041  3432               	retlw	50
  5359  1042  343C               	retlw	60
  5360  1043  344A               	retlw	74
  5361  1044  3432               	retlw	50
  5362  1045  3462               	retlw	98
  5363  1046  341A               	retlw	26
  5364  1047  3406               	retlw	6
  5365  1048  3476               	retlw	118
  5366  1049  344A               	retlw	74
  5367  104A  3476               	retlw	118
  5368  104B  344C               	retlw	76
  5369  104C  3452               	retlw	82
  5370  104D  343C               	retlw	60
  5371  104E  346C               	retlw	108
  5372  104F  346C               	retlw	108
  5373  1050  3400               	retlw	0
  5374  1051  34AC               	retlw	172
  5375  1052  346C               	retlw	108
  5376  1053  3400               	retlw	0
  5377  1054  3410               	retlw	16
  5378  1055  3428               	retlw	40
  5379  1056  3444               	retlw	68
  5380  1057  3428               	retlw	40
  5381  1058  3428               	retlw	40
  5382  1059  3428               	retlw	40
  5383  105A  3444               	retlw	68
  5384  105B  3428               	retlw	40
  5385  105C  3410               	retlw	16
  5386  105D  3402               	retlw	2
  5387  105E  3459               	retlw	89
  5388  105F  3406               	retlw	6
  5389  1060  34FF               	retlw	255
  5390  1061  34FF               	retlw	255
  5391  1062  34FF               	retlw	255
  5392  1063  347C               	retlw	124
  5393  1064  3412               	retlw	18
  5394  1065  347C               	retlw	124
  5395  1066  347E               	retlw	126
  5396  1067  345A               	retlw	90
  5397  1068  3434               	retlw	52
  5398  1069  343C               	retlw	60
  5399  106A  3442               	retlw	66
  5400  106B  3442               	retlw	66
  5401  106C  347E               	retlw	126
  5402  106D  3442               	retlw	66
  5403  106E  343C               	retlw	60
  5404  106F  347E               	retlw	126
  5405  1070  344A               	retlw	74
  5406  1071  3442               	retlw	66
  5407  1072  347E               	retlw	126
  5408  1073  340A               	retlw	10
  5409  1074  340A               	retlw	10
  5410  1075  343C               	retlw	60
  5411  1076  3452               	retlw	82
  5412  1077  3434               	retlw	52
  5413  1078  347E               	retlw	126
  5414  1079  3408               	retlw	8
  5415  107A  347E               	retlw	126
  5416  107B  3442               	retlw	66
  5417  107C  347E               	retlw	126
  5418  107D  3442               	retlw	66
  5419  107E  3430               	retlw	48
  5420  107F  3440               	retlw	64
  5421  1080  343E               	retlw	62
  5422  1081  347E               	retlw	126
  5423  1082  3418               	retlw	24
  5424  1083  3466               	retlw	102
  5425  1084  347E               	retlw	126
  5426  1085  3440               	retlw	64
  5427  1086  3440               	retlw	64
  5428  1087  347E               	retlw	126
  5429  1088  341C               	retlw	28
  5430  1089  347E               	retlw	126
  5431  108A  347E               	retlw	126
  5432  108B  3402               	retlw	2
  5433  108C  347E               	retlw	126
  5434  108D  343C               	retlw	60
  5435  108E  3442               	retlw	66
  5436  108F  343C               	retlw	60
  5437  1090  347E               	retlw	126
  5438  1091  3412               	retlw	18
  5439  1092  340C               	retlw	12
  5440  1093  347E               	retlw	126
  5441  1094  3462               	retlw	98
  5442  1095  34FE               	retlw	254
  5443  1096  347E               	retlw	126
  5444  1097  3432               	retlw	50
  5445  1098  344E               	retlw	78
  5446  1099  3444               	retlw	68
  5447  109A  344A               	retlw	74
  5448  109B  3432               	retlw	50
  5449  109C  3402               	retlw	2
  5450  109D  347E               	retlw	126
  5451  109E  3402               	retlw	2
  5452  109F  347E               	retlw	126
  5453  10A0  3440               	retlw	64
  5454  10A1  347E               	retlw	126
  5455  10A2  343E               	retlw	62
  5456  10A3  3440               	retlw	64
  5457  10A4  343E               	retlw	62
  5458  10A5  347E               	retlw	126
  5459  10A6  3438               	retlw	56
  5460  10A7  347E               	retlw	126
  5461  10A8  3466               	retlw	102
  5462  10A9  3418               	retlw	24
  5463  10AA  3466               	retlw	102
  5464  10AB  340E               	retlw	14
  5465  10AC  3470               	retlw	112
  5466  10AD  340E               	retlw	14
  5467  10AE  3462               	retlw	98
  5468  10AF  345A               	retlw	90
  5469  10B0  3446               	retlw	70
  5470  10B1  3400               	retlw	0
  5471  10B2  347E               	retlw	126
  5472  10B3  3442               	retlw	66
  5473  10B4  3406               	retlw	6
  5474  10B5  3418               	retlw	24
  5475  10B6  3460               	retlw	96
  5476  10B7  3442               	retlw	66
  5477  10B8  347E               	retlw	126
  5478  10B9  3400               	retlw	0
  5479  10BA  3404               	retlw	4
  5480  10BB  3402               	retlw	2
  5481  10BC  3404               	retlw	4
  5482  10BD  3440               	retlw	64
  5483  10BE  3440               	retlw	64
  5484  10BF  3440               	retlw	64
  5485  10C0  3400               	retlw	0
  5486  10C1  3402               	retlw	2
  5487  10C2  3404               	retlw	4
  5488  10C3  3474               	retlw	116
  5489  10C4  3454               	retlw	84
  5490  10C5  3478               	retlw	120
  5491  10C6  347E               	retlw	126
  5492  10C7  3448               	retlw	72
  5493  10C8  3430               	retlw	48
  5494  10C9  3430               	retlw	48
  5495  10CA  3448               	retlw	72
  5496  10CB  3448               	retlw	72
  5497  10CC  3430               	retlw	48
  5498  10CD  3448               	retlw	72
  5499  10CE  347E               	retlw	126
  5500  10CF  3438               	retlw	56
  5501  10D0  3454               	retlw	84
  5502  10D1  3458               	retlw	88
  5503  10D2  347C               	retlw	124
  5504  10D3  340A               	retlw	10
  5505  10D4  3402               	retlw	2
  5506  10D5  3498               	retlw	152
  5507  10D6  34A4               	retlw	164
  5508  10D7  347C               	retlw	124
  5509  10D8  347E               	retlw	126
  5510  10D9  3408               	retlw	8
  5511  10DA  3470               	retlw	112
  5512  10DB  3448               	retlw	72
  5513  10DC  347A               	retlw	122
  5514  10DD  3440               	retlw	64
  5515  10DE  3488               	retlw	136
  5516  10DF  34FA               	retlw	250
  5517  10E0  3400               	retlw	0
  5518  10E1  347E               	retlw	126
  5519  10E2  3418               	retlw	24
  5520  10E3  3464               	retlw	100
  5521  10E4  3442               	retlw	66
  5522  10E5  347E               	retlw	126
  5523  10E6  3440               	retlw	64
  5524  10E7  347C               	retlw	124
  5525  10E8  3438               	retlw	56
  5526  10E9  347C               	retlw	124
  5527  10EA  347C               	retlw	124
  5528  10EB  3404               	retlw	4
  5529  10EC  3478               	retlw	120
  5530  10ED  3438               	retlw	56
  5531  10EE  3444               	retlw	68
  5532  10EF  3438               	retlw	56
  5533  10F0  34FC               	retlw	252
  5534  10F1  3424               	retlw	36
  5535  10F2  3418               	retlw	24
  5536  10F3  3418               	retlw	24
  5537  10F4  3424               	retlw	36
  5538  10F5  34FC               	retlw	252
  5539  10F6  3478               	retlw	120
  5540  10F7  3404               	retlw	4
  5541  10F8  3404               	retlw	4
  5542  10F9  3448               	retlw	72
  5543  10FA  3454               	retlw	84
  5544  10FB  3424               	retlw	36
  5545  10FC  3404               	retlw	4
  5546  10FD  343E               	retlw	62
  5547  10FE  3444               	retlw	68
  5548  10FF  347C               	retlw	124
  5549  1100  3440               	retlw	64
  5550  1101  347C               	retlw	124
  5551  1102  343C               	retlw	60
  5552  1103  3440               	retlw	64
  5553  1104  343C               	retlw	60
  5554  1105  347C               	retlw	124
  5555  1106  3430               	retlw	48
  5556  1107  347C               	retlw	124
  5557  1108  346C               	retlw	108
  5558  1109  3410               	retlw	16
  5559  110A  346C               	retlw	108
  5560  110B  349C               	retlw	156
  5561  110C  34A0               	retlw	160
  5562  110D  347C               	retlw	124
  5563  110E  3464               	retlw	100
  5564  110F  3454               	retlw	84
  5565  1110  344C               	retlw	76
  5566  1111  340C               	retlw	12
  5567  1112  3412               	retlw	18
  5568  1113  340C               	retlw	12
  5569  1114  34FF               	retlw	255
  5570  1115  34FF               	retlw	255
  5571  1116  34FF               	retlw	255
  5572  1117  34FF               	retlw	255
  5573  1118  34FF               	retlw	255
  5574  1119  34FF               	retlw	255
  5575  111A  34FF               	retlw	255
  5576  111B  34FF               	retlw	255
  5577  111C  34FF               	retlw	255
  5578  111D  34FF               	retlw	255
  5579  111E  34FF               	retlw	255
  5580  111F  34FF               	retlw	255
  5581  1120  34FF               	retlw	255
  5582  1121  34FF               	retlw	255
  5583  1122  34FF               	retlw	255
  5584  1123  34FF               	retlw	255
  5585  1124  34FF               	retlw	255
  5586  1125  34FF               	retlw	255
  5587  1126  34FC               	retlw	252
  5588  1127  3440               	retlw	64
  5589  1128  347C               	retlw	124
  5590  1129  34FF               	retlw	255
  5591  112A  34FF               	retlw	255
  5592  112B  34FF               	retlw	255
  5593  112C  34FF               	retlw	255
  5594  112D  34FF               	retlw	255
  5595  112E  34FF               	retlw	255
  5596  112F                     __end_of_fonts:	
  5597                           
  5598                           	psect	stringtext2
  5599  1800                     __pstringtext2:	
  5600  1800                     log@coeff:	
  5601  1800  3400               	retlw	0
  5602  1801  3400               	retlw	0
  5603  1802  3400               	retlw	0
  5604  1803  3400               	retlw	0
  5605  1804  3480               	retlw	128
  5606  1805  343F               	retlw	63
  5607  1806  34F0               	retlw	240
  5608  1807  34FF               	retlw	255
  5609  1808  34BE               	retlw	190
  5610  1809  34E2               	retlw	226
  5611  180A  34A9               	retlw	169
  5612  180B  343E               	retlw	62
  5613  180C  3483               	retlw	131
  5614  180D  3476               	retlw	118
  5615  180E  34BE               	retlw	190
  5616  180F  34AE               	retlw	174
  5617  1810  342B               	retlw	43
  5618  1811  343E               	retlw	62
  5619  1812  343C               	retlw	60
  5620  1813  34C3               	retlw	195
  5621  1814  34BD               	retlw	189
  5622  1815  34D2               	retlw	210
  5623  1816  3413               	retlw	19
  5624  1817  343D               	retlw	61
  5625  1818  3478               	retlw	120
  5626  1819  34D3               	retlw	211
  5627  181A  34BB               	retlw	187
  5628  181B                     __end_oflog@coeff:	
  5629  0013                     _TRISC	set	19
  5630  0012                     _TRISB	set	18
  5631  0011                     _TRISA	set	17
  5632  0018                     _LATC	set	24
  5633  0017                     _LATB	set	23
  5634  0016                     _LATA	set	22
  5635  0016                     _LATAbits	set	22
  5636  0011                     _TRISAbits	set	17
  5637  00B5                     _LATA5	set	181
  5638  006A                     _RB2	set	106
  5639  005F                     _GIE	set	95
  5640  0093                     _ADCON0	set	147
  5641  009D                     _ADACQ	set	157
  5642  009C                     _ADPRE	set	156
  5643  009B                     _ADCAP	set	155
  5644  009A                     _ADREF	set	154
  5645  0098                     _ADCLK	set	152
  5646  0097                     _ADSTAT	set	151
  5647  0099                     _ADACT	set	153
  5648  0096                     _ADCON3	set	150
  5649  0095                     _ADCON2	set	149
  5650  0094                     _ADCON1	set	148
  5651  008C                     _ADRESL	set	140
  5652  008D                     _ADRESH	set	141
  5653  0093                     _ADCON0bits	set	147
  5654  009E                     _ADPCH	set	158
  5655  0113                     _ADSTPTH	set	275
  5656  0112                     _ADSTPTL	set	274
  5657  0111                     _ADUTHH	set	273
  5658  0110                     _ADUTHL	set	272
  5659  010F                     _ADLTHH	set	271
  5660  010E                     _ADLTHL	set	270
  5661  010D                     _ADRPT	set	269
  5662  021F                     _CCPTMRS1bits	set	543
  5663  0294                     _T4CONbits	set	660
  5664  0292                     _T4TMR	set	658
  5665  0293                     _T4PR	set	659
  5666  0297                     _T4RST	set	663
  5667  0295                     _T4HLT	set	661
  5668  0296                     _T4CLKCON	set	662
  5669  0294                     _T4CON	set	660
  5670  028E                     _T2CONbits	set	654
  5671  028C                     _T2TMR	set	652
  5672  028D                     _T2PR	set	653
  5673  0291                     _T2RST	set	657
  5674  028F                     _T2HLT	set	655
  5675  0290                     _T2CLKCON	set	656
  5676  028E                     _T2CON	set	654
  5677  0390                     _PWM7DCL	set	912
  5678  0391                     _PWM7DCH	set	913
  5679  0392                     _PWM7CON	set	914
  5680  038C                     _PWM6DCL	set	908
  5681  038D                     _PWM6DCH	set	909
  5682  038E                     _PWM6CON	set	910
  5683  0710                     _PIR4bits	set	1808
  5684  0716                     _PIE0bits	set	1814
  5685  0892                     _OSCTUNE	set	2194
  5686  0893                     _OSCFRQ	set	2195
  5687  0891                     _OSCEN	set	2193
  5688  088F                     _OSCCON3	set	2191
  5689  088D                     _OSCCON1	set	2189
  5690  090C                     _FVRCON	set	2316
  5691  0E8F                     _PPSLOCKbits	set	3727
  5692  0E8F                     _PPSLOCK	set	3727
  5693  0F18                     _RB0PPS	set	3864
  5694  0F17                     _RA7PPS	set	3863
  5695  0F16                     _RA6PPS	set	3862
  5696  0F4E                     _ANSELC	set	3918
  5697  0F43                     _ANSELB	set	3907
  5698  0F38                     _ANSELA	set	3896
  5699  0F65                     _WPUE	set	3941
  5700  0F4F                     _WPUC	set	3919
  5701  0F44                     _WPUB	set	3908
  5702  0F39                     _WPUA	set	3897
  5703  181B                     STR_3:	
  5704  181B  3452               	retlw	82	;'R'
  5705  181C  3465               	retlw	101	;'e'
  5706  181D  3466               	retlw	102	;'f'
  5707  181E  343A               	retlw	58	;':'
  5708  181F  3400               	retlw	0
  5709                           
  5710                           	psect	stringtext3
  5711  1820                     __pstringtext3:	
  5712  1820                     STR_2:	
  5713  1820  344F               	retlw	79	;'O'
  5714  1821  3475               	retlw	117	;'u'
  5715  1822  3474               	retlw	116	;'t'
  5716  1823  343A               	retlw	58	;':'
  5717  1824  3400               	retlw	0
  5718                           
  5719                           	psect	stringtext4
  5720  1825                     __pstringtext4:	
  5721  1825                     STR_1:	
  5722  1825  3449               	retlw	73	;'I'
  5723  1826  346E               	retlw	110	;'n'
  5724  1827  343A               	retlw	58	;':'
  5725  1828  3400               	retlw	0
  5726                           
  5727                           	psect	stringtext5
  5728  0000                     __pstringtext5:	
  5729                           
  5730                           ; #config settings
  5731  0000                     
  5732                           	psect	cinit
  5733  07B5                     start_initialization:	
  5734  07B5                     __initialization:		;BIGRAM
  5735                           
  5736                           ; Initialize objects allocated to BANK0
  5737  07B5  3192  22D0  3187   	fcall	__pidataBANK0	;fetch initializer
  5738  07B8  00EC               	movwf	__pdataBANK0& (0+127)
  5739  07B9  3192  22D1  3187   	fcall	__pidataBANK0+1	;fetch initializer
  5740  07BC  00ED               	movwf	(__pdataBANK0+1)& (0+127)
  5741                           
  5742                           ; Initialize objects allocated to BANK2
  5743  07BD  30D2               	movlw	low __pidataBANK2
  5744  07BE  0084               	movwf	4
  5745  07BF  3092               	movlw	(high __pidataBANK2)| (0+128)
  5746  07C0  0085               	movwf	5
  5747  07C1  0022               	movlb	2	; select bank2
  5748  07C2  0012               	moviw fsr0++
  5749  07C3  00B5               	movwf	__pdataBANK2& (0+127)
  5750  07C4  0012               	moviw fsr0++
  5751  07C5  00B6               	movwf	(__pdataBANK2+1)& (0+127)
  5752  07C6  0012               	moviw fsr0++
  5753  07C7  00B7               	movwf	(__pdataBANK2+2)& (0+127)
  5754  07C8  0012               	moviw fsr0++
  5755  07C9  00B8               	movwf	(__pdataBANK2+3)& (0+127)
  5756  07CA  0012               	moviw fsr0++
  5757  07CB  00B9               	movwf	(__pdataBANK2+4)& (0+127)
  5758  07CC  0012               	moviw fsr0++
  5759  07CD  00BA               	movwf	(__pdataBANK2+5)& (0+127)
  5760  07CE  0012               	moviw fsr0++
  5761  07CF  00BB               	movwf	(__pdataBANK2+6)& (0+127)
  5762  07D0  0012               	moviw fsr0++
  5763  07D1  00BC               	movwf	(__pdataBANK2+7)& (0+127)
  5764                           
  5765                           ; Clear objects allocated to BIGRAM
  5766  07D2  3098               	movlw	low (0+8600)
  5767  07D3  0084               	movwf	4
  5768  07D4  3021               	movlw	high (0+8600)
  5769  07D5  0085               	movwf	5
  5770  07D6  3058               	movlw	88
  5771  07D7  00FE               	movwf	btemp
  5772  07D8  3002               	movlw	2
  5773  07D9  00FF               	movwf	btemp+1
  5774  07DA  3192  22DA  3187   	fcall	clear_ram0
  5775                           
  5776                           ; Clear objects allocated to BANK0
  5777  07DD  305A               	movlw	low __pbssBANK0
  5778  07DE  0084               	movwf	4
  5779  07DF  3000               	movlw	high __pbssBANK0
  5780  07E0  0085               	movwf	5
  5781  07E1  3012               	movlw	18
  5782  07E2  00FE               	movwf	btemp
  5783  07E3  3000               	movlw	0
  5784  07E4  00FF               	movwf	btemp+1
  5785  07E5  3192  22DA  3187   	fcall	clear_ram0
  5786                           
  5787                           ; Clear objects allocated to BANK1
  5788  07E8  30A0               	movlw	low __pbssBANK1
  5789  07E9  0084               	movwf	4
  5790  07EA  3000               	movlw	high __pbssBANK1
  5791  07EB  0085               	movwf	5
  5792  07EC  3036               	movlw	54
  5793  07ED  00FE               	movwf	btemp
  5794  07EE  3000               	movlw	0
  5795  07EF  00FF               	movwf	btemp+1
  5796  07F0  3192  22DA  3187   	fcall	clear_ram0
  5797                           
  5798                           ; Clear objects allocated to BANK2
  5799  07F3  3020               	movlw	low __pbssBANK2
  5800  07F4  0084               	movwf	4
  5801  07F5  3001               	movlw	high __pbssBANK2
  5802  07F6  0085               	movwf	5
  5803  07F7  3015               	movlw	21
  5804  07F8  00FE               	movwf	btemp
  5805  07F9  3000               	movlw	0
  5806  07FA  00FF               	movwf	btemp+1
  5807  07FB  3192  22DA         	fcall	clear_ram0
  5808  07FD                     end_of_initialization:	
  5809                           ;End of C runtime variable initialization code
  5810                           
  5811  07FD                     __end_of__initialization:	
  5812  07FD  0020               	movlb	0
  5813  07FE  3182  2ABE         	ljmp	_main	;jump to C main() function
  5814                           
  5815                           	psect	bssBANK0
  5816  005A                     __pbssBANK0:	
  5817  005A                     _Vref:	
  5818  005A                     	ds	4
  5819  005E                     _readButtons:	
  5820  005E                     	ds	2
  5821  0060                     _VHoldMode:	
  5822  0060                     	ds	2
  5823  0062                     _Imode:	
  5824  0062                     	ds	2
  5825  0064                     _batteryState:	
  5826  0064                     	ds	2
  5827  0066                     _sampleIndex:	
  5828  0066                     	ds	2
  5829  0068                     _j:	
  5830  0068                     	ds	1
  5831  0069                     _lastButton:	
  5832  0069                     	ds	1
  5833  006A                     _button:	
  5834  006A                     	ds	1
  5835  006B                     _x:	
  5836  006B                     	ds	1
  5837                           
  5838                           	psect	dataBANK0
  5839  006C                     __pdataBANK0:	
  5840  006C                     _batteryTemp:	
  5841  006C                     	ds	2
  5842                           
  5843                           	psect	bssBANK1
  5844  00A0                     __pbssBANK1:	
  5845  00A0                     _Ianalogs:	
  5846  00A0                     	ds	8
  5847  00A8                     _Vanalogs:	
  5848  00A8                     	ds	8
  5849  00B0                     _current:	
  5850  00B0                     	ds	8
  5851  00B8                     _voltage:	
  5852  00B8                     	ds	8
  5853  00C0                     _Iref:	
  5854  00C0                     	ds	4
  5855  00C4                     _Imin:	
  5856  00C4                     	ds	4
  5857  00C8                     _stateCounter:	
  5858  00C8                     	ds	4
  5859  00CC                     _IminCount:	
  5860  00CC                     	ds	4
  5861  00D0                     _errno:	
  5862  00D0                     	ds	2
  5863  00D2                     _cc_cv:	
  5864  00D2                     	ds	2
  5865  00D4                     _Iout:	
  5866  00D4                     	ds	2
  5867                           
  5868                           	psect	bssBANK2
  5869  0120                     __pbssBANK2:	
  5870  0120                     _totals:	
  5871  0120                     	ds	16
  5872  0130                     LCDWriteInt@F14388:	
  5873  0130                     	ds	5
  5874                           
  5875                           	psect	dataBANK2
  5876  0135                     __pdataBANK2:	
  5877  0135                     _channels:	
  5878  0135                     	ds	8
  5879                           
  5880                           	psect	clrtext
  5881  12DA                     clear_ram0:	
  5882                           ;	Called with FSR0 containing the base address, and
  5883                           ;	btemp/btemp+1 has the size to clear
  5884                           
  5885  12DA  0064               	clrwdt	;clear the watchdog before getting into this loop
  5886  12DB                     clrloop0:	
  5887  12DB  0180               	clrf	0	;clear RAM location pointed to by FSR
  5888  12DC  3101               	addfsr 0,1
  5889  12DD  3001               	movlw	1
  5890  12DE  02FE               	subwf	126,f
  5891  12DF  3000               	movlw	0
  5892  12E0  3BFF               	subwfb	127,f
  5893  12E1  087F               	movf	127,w
  5894  12E2  047E               	iorwf	126,w
  5895  12E3  1903               	btfsc	3,2
  5896  12E4  3400               	retlw	0	;all done for this memory range, return
  5897  12E5  2ADB               	goto	clrloop0	;have we reached the end yet?
  5898                           
  5899                           	psect	cstackBANK1
  5900  00D6                     __pcstackBANK1:	
  5901  00D6                     main@efficiency:	
  5902                           
  5903                           ; 3 bytes @ 0x0
  5904  00D6                     	ds	3
  5905  00D9                     main@dutyCycle1:	
  5906                           
  5907                           ; 2 bytes @ 0x3
  5908  00D9                     	ds	2
  5909  00DB                     main@IOutTotal:	
  5910                           
  5911                           ; 2 bytes @ 0x5
  5912  00DB                     	ds	2
  5913  00DD                     main@faultCount:	
  5914                           
  5915                           ; 2 bytes @ 0x7
  5916  00DD                     	ds	2
  5917  00DF                     main@faultNotReset:	
  5918                           
  5919                           ; 2 bytes @ 0x9
  5920  00DF                     	ds	2
  5921  00E1                     main@slowLoop:	
  5922                           
  5923                           ; 1 bytes @ 0xB
  5924  00E1                     	ds	1
  5925  00E2                     main@displayRefresh:	
  5926                           
  5927                           ; 1 bytes @ 0xC
  5928  00E2                     	ds	1
  5929  00E3                     main@MPPT0:	
  5930                           
  5931                           ; 2 bytes @ 0xD
  5932  00E3                     	ds	2
  5933  00E5                     main@MPPT1:	
  5934                           
  5935                           ; 2 bytes @ 0xF
  5936  00E5                     	ds	2
  5937  00E7                     main@menuButton:	
  5938                           
  5939                           ; 1 bytes @ 0x11
  5940  00E7                     	ds	1
  5941  00E8                     main@j:	
  5942                           
  5943                           ; 1 bytes @ 0x12
  5944  00E8                     	ds	1
  5945  00E9                     main@dutyCycle6:	
  5946                           
  5947                           ; 2 bytes @ 0x13
  5948  00E9                     	ds	2
  5949  00EB                     main@dutyCycle7:	
  5950                           
  5951                           ; 2 bytes @ 0x15
  5952  00EB                     	ds	2
  5953                           
  5954                           	psect	cstackCOMMON
  5955  0070                     __pcstackCOMMON:	
  5956  0070                     ?___ftge:	
  5957  0070                     ?_LCDWrite:	
  5958                           ; 1 bit 
  5959                           
  5960  0070                     ?_OSCILLATOR_Initialize:	
  5961                           ; 1 bytes @ 0x0
  5962                           
  5963  0070                     ??_OSCILLATOR_Initialize:	
  5964                           ; 1 bytes @ 0x0
  5965                           
  5966  0070                     ?_TMR2_Initialize:	
  5967                           ; 1 bytes @ 0x0
  5968                           
  5969  0070                     ??_TMR2_Initialize:	
  5970                           ; 1 bytes @ 0x0
  5971                           
  5972  0070                     ?_TMR4_Initialize:	
  5973                           ; 1 bytes @ 0x0
  5974                           
  5975  0070                     ??_TMR4_Initialize:	
  5976                           ; 1 bytes @ 0x0
  5977                           
  5978  0070                     ?_calculateCurrent0:	
  5979                           ; 1 bytes @ 0x0
  5980                           
  5981  0070                     ?_calculateCurrent1:	
  5982                           ; 1 bytes @ 0x0
  5983                           
  5984  0070                     ?_calculateCurrent2:	
  5985                           ; 1 bytes @ 0x0
  5986                           
  5987  0070                     ?_calculateCurrent3:	
  5988                           ; 1 bytes @ 0x0
  5989                           
  5990  0070                     ?_ADC_Initialize:	
  5991                           ; 1 bytes @ 0x0
  5992                           
  5993  0070                     ??_ADC_Initialize:	
  5994                           ; 1 bytes @ 0x0
  5995                           
  5996  0070                     ?_Init_Battery_State_Machine:	
  5997                           ; 1 bytes @ 0x0
  5998                           
  5999  0070                     ?_Battery_State_Machine:	
  6000                           ; 1 bytes @ 0x0
  6001                           
  6002  0070                     ?_cc_cv_mode:	
  6003                           ; 1 bytes @ 0x0
  6004                           
  6005  0070                     ?_readButton:	
  6006                           ; 1 bytes @ 0x0
  6007                           
  6008  0070                     ?_LCDWriteCharacter:	
  6009                           ; 1 bytes @ 0x0
  6010                           
  6011  0070                     ?_LCDClear:	
  6012                           ; 1 bytes @ 0x0
  6013                           
  6014  0070                     ?_LCDInit:	
  6015                           ; 1 bytes @ 0x0
  6016                           
  6017  0070                     ?_PIN_MANAGER_Initialize:	
  6018                           ; 1 bytes @ 0x0
  6019                           
  6020  0070                     ??_PIN_MANAGER_Initialize:	
  6021                           ; 1 bytes @ 0x0
  6022                           
  6023  0070                     ?_PWM_Initialize:	
  6024                           ; 1 bytes @ 0x0
  6025                           
  6026  0070                     ??_PWM_Initialize:	
  6027                           ; 1 bytes @ 0x0
  6028                           
  6029  0070                     ?_PWM6_LoadDutyValue:	
  6030                           ; 1 bytes @ 0x0
  6031                           
  6032  0070                     ?_PWM7_LoadDutyValue:	
  6033                           ; 1 bytes @ 0x0
  6034                           
  6035  0070                     ?_SYSTEM_Initialize:	
  6036                           ; 1 bytes @ 0x0
  6037                           
  6038  0070                     ?_main:	
  6039                           ; 1 bytes @ 0x0
  6040                           
  6041  0070                     ?_ADCRead:	
  6042                           ; 1 bytes @ 0x0
  6043                           
  6044  0070                     ?___wmul:	
  6045                           ; 2 bytes @ 0x0
  6046                           
  6047  0070                     ?___awdiv:	
  6048                           ; 2 bytes @ 0x0
  6049                           
  6050  0070                     ?___lwmod:	
  6051                           ; 2 bytes @ 0x0
  6052                           
  6053  0070                     ?___ftpack:	
  6054                           ; 2 bytes @ 0x0
  6055                           
  6056  0070                     ?_frexp:	
  6057                           ; 3 bytes @ 0x0
  6058                           
  6059  0070                     ?___aldiv:	
  6060                           ; 3 bytes @ 0x0
  6061                           
  6062  0070                     LCDWrite@data:	
  6063                           ; 4 bytes @ 0x0
  6064                           
  6065  0070                     PIN_MANAGER_Initialize@state:	
  6066                           ; 1 bytes @ 0x0
  6067                           
  6068  0070                     PWM6_LoadDutyValue@dutyCycle6:	
  6069                           ; 1 bytes @ 0x0
  6070                           
  6071  0070                     PWM7_LoadDutyValue@dutyCycle7:	
  6072                           ; 2 bytes @ 0x0
  6073                           
  6074  0070                     ___wmul@multiplier:	
  6075                           ; 2 bytes @ 0x0
  6076                           
  6077  0070                     ___awdiv@divisor:	
  6078                           ; 2 bytes @ 0x0
  6079                           
  6080  0070                     ___lwmod@divisor:	
  6081                           ; 2 bytes @ 0x0
  6082                           
  6083  0070                     ___ftpack@arg:	
  6084                           ; 2 bytes @ 0x0
  6085                           
  6086  0070                     ___ftge@ff1:	
  6087                           ; 3 bytes @ 0x0
  6088                           
  6089  0070                     frexp@value:	
  6090                           ; 3 bytes @ 0x0
  6091                           
  6092  0070                     ___aldiv@divisor:	
  6093                           ; 3 bytes @ 0x0
  6094                           
  6095                           
  6096                           ; 4 bytes @ 0x0
  6097  0070                     	ds	1
  6098  0071                     ??_LCDWrite:	
  6099                           
  6100                           ; 1 bytes @ 0x1
  6101  0071                     	ds	1
  6102  0072                     ??_PWM6_LoadDutyValue:	
  6103  0072                     ??_PWM7_LoadDutyValue:	
  6104                           ; 1 bytes @ 0x2
  6105                           
  6106  0072                     LCDWrite@data_or_command:	
  6107                           ; 1 bytes @ 0x2
  6108                           
  6109  0072                     ___wmul@multiplicand:	
  6110                           ; 1 bytes @ 0x2
  6111                           
  6112  0072                     ___awdiv@dividend:	
  6113                           ; 2 bytes @ 0x2
  6114                           
  6115  0072                     ___lwmod@dividend:	
  6116                           ; 2 bytes @ 0x2
  6117                           
  6118                           
  6119                           ; 2 bytes @ 0x2
  6120  0072                     	ds	1
  6121  0073                     ??_ADCRead:	
  6122  0073                     ADCRead@channel:	
  6123                           ; 1 bytes @ 0x3
  6124                           
  6125  0073                     LCDWrite@d:	
  6126                           ; 1 bytes @ 0x3
  6127                           
  6128  0073                     ___ftpack@exp:	
  6129                           ; 1 bytes @ 0x3
  6130                           
  6131  0073                     frexp@eptr:	
  6132                           ; 1 bytes @ 0x3
  6133                           
  6134  0073                     ___ftge@ff2:	
  6135                           ; 1 bytes @ 0x3
  6136                           
  6137                           
  6138                           ; 3 bytes @ 0x3
  6139  0073                     	ds	1
  6140  0074                     ??_frexp:	
  6141  0074                     ??_readButton:	
  6142                           ; 1 bytes @ 0x4
  6143                           
  6144  0074                     ??___wmul:	
  6145                           ; 1 bytes @ 0x4
  6146                           
  6147  0074                     ??___awdiv:	
  6148                           ; 1 bytes @ 0x4
  6149                           
  6150  0074                     ??___lwmod:	
  6151                           ; 1 bytes @ 0x4
  6152                           
  6153  0074                     LCDWrite@i:	
  6154                           ; 1 bytes @ 0x4
  6155                           
  6156  0074                     ___ftpack@sign:	
  6157                           ; 1 bytes @ 0x4
  6158                           
  6159  0074                     ___wmul@product:	
  6160                           ; 1 bytes @ 0x4
  6161                           
  6162  0074                     ___aldiv@dividend:	
  6163                           ; 2 bytes @ 0x4
  6164                           
  6165                           
  6166                           ; 4 bytes @ 0x4
  6167  0074                     	ds	1
  6168  0075                     ??___ftpack:	
  6169  0075                     ?_gotoXY:	
  6170                           ; 1 bytes @ 0x5
  6171                           
  6172  0075                     ??_LCDInit:	
  6173                           ; 1 bytes @ 0x5
  6174                           
  6175  0075                     gotoXY@y:	
  6176                           ; 1 bytes @ 0x5
  6177                           
  6178  0075                     ___awdiv@counter:	
  6179                           ; 1 bytes @ 0x5
  6180                           
  6181  0075                     ___lwmod@counter:	
  6182                           ; 1 bytes @ 0x5
  6183                           
  6184                           
  6185                           ; 1 bytes @ 0x5
  6186  0075                     	ds	1
  6187  0076                     ??_gotoXY:	
  6188  0076                     ??_LCDWriteCharacter:	
  6189                           ; 1 bytes @ 0x6
  6190                           
  6191  0076                     ??___ftge:	
  6192                           ; 1 bytes @ 0x6
  6193                           
  6194  0076                     ___awdiv@sign:	
  6195                           ; 1 bytes @ 0x6
  6196                           
  6197                           
  6198                           ; 1 bytes @ 0x6
  6199  0076                     	ds	1
  6200  0077                     gotoXY@x:	
  6201  0077                     ___awdiv@quotient:	
  6202                           ; 1 bytes @ 0x7
  6203                           
  6204                           
  6205                           ; 2 bytes @ 0x7
  6206  0077                     	ds	1
  6207  0078                     ??_LCDClear:	
  6208  0078                     ??___aldiv:	
  6209                           ; 1 bytes @ 0x8
  6210                           
  6211  0078                     ?___awtoft:	
  6212                           ; 1 bytes @ 0x8
  6213                           
  6214  0078                     ___awtoft@c:	
  6215                           ; 3 bytes @ 0x8
  6216                           
  6217                           
  6218                           ; 2 bytes @ 0x8
  6219  0078                     	ds	1
  6220  0079                     LCDWriteCharacter@character:	
  6221  0079                     readIAnalog@analog_channel:	
  6222                           ; 1 bytes @ 0x9
  6223                           
  6224  0079                     LCDClear@index:	
  6225                           ; 2 bytes @ 0x9
  6226                           
  6227                           
  6228                           ; 2 bytes @ 0x9
  6229  0079                     	ds	1
  6230  007A                     LCDWriteCharacter@base:	
  6231                           
  6232                           ; 2 bytes @ 0xA
  6233  007A                     	ds	1
  6234  007B                     ??___awtoft:	
  6235  007B                     readIAnalog@value:	
  6236                           ; 1 bytes @ 0xB
  6237                           
  6238                           
  6239                           ; 2 bytes @ 0xB
  6240  007B                     	ds	1
  6241  007C                     ?_LCDWriteString:	
  6242  007C                     LCDWriteString@characters:	
  6243                           ; 1 bytes @ 0xC
  6244                           
  6245                           
  6246                           ; 2 bytes @ 0xC
  6247  007C                     	ds	1
  6248  007D                     ___awtoft@sign:	
  6249                           
  6250                           ; 1 bytes @ 0xD
  6251  007D                     	ds	1
  6252  007E                     ??_eval_poly:	
  6253  007E                     ??_tempCalc:	
  6254                           ; 1 bytes @ 0xE
  6255                           
  6256  007E                     ??___ftsub:	
  6257                           ; 1 bytes @ 0xE
  6258                           
  6259                           
  6260                           	psect	cstackBANK0
  6261  0020                     __pcstackBANK0:	
  6262                           ; 1 bytes @ 0xE
  6263                           
  6264  0020                     ??_LCDWriteString:	
  6265  0020                     ?_LCDWriteInt:	
  6266                           ; 1 bytes @ 0x0
  6267                           
  6268  0020                     ?___ftdiv:	
  6269                           ; 1 bytes @ 0x0
  6270                           
  6271  0020                     ?___ftmul:	
  6272                           ; 3 bytes @ 0x0
  6273                           
  6274  0020                     ___aldiv@counter:	
  6275                           ; 3 bytes @ 0x0
  6276                           
  6277  0020                     LCDWriteInt@value:	
  6278                           ; 1 bytes @ 0x0
  6279                           
  6280  0020                     ___ftdiv@f2:	
  6281                           ; 2 bytes @ 0x0
  6282                           
  6283  0020                     ___ftmul@f1:	
  6284                           ; 3 bytes @ 0x0
  6285                           
  6286                           
  6287                           ; 3 bytes @ 0x0
  6288  0020                     	ds	1
  6289  0021                     ___aldiv@sign:	
  6290                           
  6291                           ; 1 bytes @ 0x1
  6292  0021                     	ds	1
  6293  0022                     LCDWriteInt@fieldLength:	
  6294  0022                     ___aldiv@quotient:	
  6295                           ; 1 bytes @ 0x2
  6296                           
  6297                           
  6298                           ; 4 bytes @ 0x2
  6299  0022                     	ds	1
  6300  0023                     LCDWriteInt@numPlaces:	
  6301  0023                     ___ftdiv@f1:	
  6302                           ; 1 bytes @ 0x3
  6303                           
  6304  0023                     ___ftmul@f2:	
  6305                           ; 3 bytes @ 0x3
  6306                           
  6307                           
  6308                           ; 3 bytes @ 0x3
  6309  0023                     	ds	1
  6310  0024                     LCDWriteInt@sign:	
  6311                           
  6312                           ; 1 bytes @ 0x4
  6313  0024                     	ds	1
  6314  0025                     ??_LCDWriteInt:	
  6315                           
  6316                           ; 1 bytes @ 0x5
  6317  0025                     	ds	1
  6318  0026                     ??___ftdiv:	
  6319  0026                     ??___ftmul:	
  6320                           ; 1 bytes @ 0x6
  6321                           
  6322  0026                     ?_readIAnalog:	
  6323                           ; 1 bytes @ 0x6
  6324                           
  6325  0026                     readIAnalog@channel:	
  6326                           ; 2 bytes @ 0x6
  6327                           
  6328                           
  6329                           ; 2 bytes @ 0x6
  6330  0026                     	ds	2
  6331  0028                     ??_readIAnalog:	
  6332                           
  6333                           ; 1 bytes @ 0x8
  6334  0028                     	ds	1
  6335  0029                     LCDWriteInt@str:	
  6336                           
  6337                           ; 5 bytes @ 0x9
  6338  0029                     	ds	1
  6339  002A                     ___ftdiv@cntr:	
  6340  002A                     ___ftmul@exp:	
  6341                           ; 1 bytes @ 0xA
  6342                           
  6343                           
  6344                           ; 1 bytes @ 0xA
  6345  002A                     	ds	1
  6346  002B                     ___ftdiv@f3:	
  6347  002B                     ___ftmul@f3_as_product:	
  6348                           ; 3 bytes @ 0xB
  6349                           
  6350                           
  6351                           ; 3 bytes @ 0xB
  6352  002B                     	ds	3
  6353  002E                     LCDWriteInt@j:	
  6354  002E                     ___ftdiv@exp:	
  6355                           ; 1 bytes @ 0xE
  6356                           
  6357  002E                     ___ftmul@cntr:	
  6358                           ; 1 bytes @ 0xE
  6359                           
  6360                           
  6361                           ; 1 bytes @ 0xE
  6362  002E                     	ds	1
  6363  002F                     LCDWriteInt@i:	
  6364  002F                     ___ftdiv@sign:	
  6365                           ; 1 bytes @ 0xF
  6366                           
  6367  002F                     ___ftmul@sign:	
  6368                           ; 1 bytes @ 0xF
  6369                           
  6370                           
  6371                           ; 1 bytes @ 0xF
  6372  002F                     	ds	1
  6373  0030                     ?___ftadd:	
  6374  0030                     ?___fttol:	
  6375                           ; 3 bytes @ 0x10
  6376                           
  6377  0030                     ___ftadd@f1:	
  6378                           ; 4 bytes @ 0x10
  6379                           
  6380  0030                     ___fttol@f1:	
  6381                           ; 3 bytes @ 0x10
  6382                           
  6383                           
  6384                           ; 3 bytes @ 0x10
  6385  0030                     	ds	3
  6386  0033                     ___ftadd@f2:	
  6387                           
  6388                           ; 3 bytes @ 0x13
  6389  0033                     	ds	1
  6390  0034                     ??___fttol:	
  6391                           
  6392                           ; 1 bytes @ 0x14
  6393  0034                     	ds	2
  6394  0036                     ??___ftadd:	
  6395                           
  6396                           ; 1 bytes @ 0x16
  6397  0036                     	ds	2
  6398  0038                     ___fttol@sign1:	
  6399                           
  6400                           ; 1 bytes @ 0x18
  6401  0038                     	ds	1
  6402  0039                     ___fttol@lval:	
  6403                           
  6404                           ; 4 bytes @ 0x19
  6405  0039                     	ds	1
  6406  003A                     ___ftadd@sign:	
  6407                           
  6408                           ; 1 bytes @ 0x1A
  6409  003A                     	ds	1
  6410  003B                     ___ftadd@exp2:	
  6411                           
  6412                           ; 1 bytes @ 0x1B
  6413  003B                     	ds	1
  6414  003C                     ___ftadd@exp1:	
  6415                           
  6416                           ; 1 bytes @ 0x1C
  6417  003C                     	ds	1
  6418  003D                     ?_eval_poly:	
  6419  003D                     ?___ftsub:	
  6420                           ; 3 bytes @ 0x1D
  6421                           
  6422  003D                     ___fttol@exp1:	
  6423                           ; 3 bytes @ 0x1D
  6424                           
  6425  003D                     ___ftsub@f2:	
  6426                           ; 1 bytes @ 0x1D
  6427                           
  6428  003D                     eval_poly@x:	
  6429                           ; 3 bytes @ 0x1D
  6430                           
  6431                           
  6432                           ; 3 bytes @ 0x1D
  6433  003D                     	ds	1
  6434  003E                     ??_calculateCurrent0:	
  6435  003E                     ??_calculateCurrent1:	
  6436                           ; 1 bytes @ 0x1E
  6437                           
  6438  003E                     ??_calculateCurrent2:	
  6439                           ; 1 bytes @ 0x1E
  6440                           
  6441  003E                     ??_calculateCurrent3:	
  6442                           ; 1 bytes @ 0x1E
  6443                           
  6444  003E                     ??_Init_Battery_State_Machine:	
  6445                           ; 1 bytes @ 0x1E
  6446                           
  6447  003E                     ??_Battery_State_Machine:	
  6448                           ; 1 bytes @ 0x1E
  6449                           
  6450  003E                     ??_cc_cv_mode:	
  6451                           ; 1 bytes @ 0x1E
  6452                           
  6453                           
  6454                           ; 1 bytes @ 0x1E
  6455  003E                     	ds	2
  6456  0040                     eval_poly@d:	
  6457  0040                     ___ftsub@f1:	
  6458                           ; 2 bytes @ 0x20
  6459                           
  6460                           
  6461                           ; 3 bytes @ 0x20
  6462  0040                     	ds	2
  6463  0042                     Init_Battery_State_Machine@z:	
  6464  0042                     eval_poly@n:	
  6465                           ; 1 bytes @ 0x22
  6466                           
  6467                           
  6468                           ; 2 bytes @ 0x22
  6469  0042                     	ds	1
  6470  0043                     ??_SYSTEM_Initialize:	
  6471                           
  6472                           ; 1 bytes @ 0x23
  6473  0043                     	ds	1
  6474  0044                     eval_poly@res:	
  6475                           
  6476                           ; 3 bytes @ 0x24
  6477  0044                     	ds	1
  6478  0045                     Battery_State_Machine@z:	
  6479  0045                     cc_cv_mode@z:	
  6480                           ; 1 bytes @ 0x25
  6481                           
  6482                           
  6483                           ; 1 bytes @ 0x25
  6484  0045                     	ds	2
  6485  0047                     ?_log:	
  6486  0047                     log@x:	
  6487                           ; 3 bytes @ 0x27
  6488                           
  6489                           
  6490                           ; 3 bytes @ 0x27
  6491  0047                     	ds	3
  6492  004A                     ??_log:	
  6493                           
  6494                           ; 1 bytes @ 0x2A
  6495  004A                     	ds	1
  6496  004B                     log@exponent:	
  6497                           
  6498                           ; 2 bytes @ 0x2B
  6499  004B                     	ds	2
  6500  004D                     ?_tempCalc:	
  6501  004D                     tempCalc@analogValue:	
  6502                           ; 2 bytes @ 0x2D
  6503                           
  6504                           
  6505                           ; 2 bytes @ 0x2D
  6506  004D                     	ds	2
  6507  004F                     tempCalc@R:	
  6508                           
  6509                           ; 3 bytes @ 0x2F
  6510  004F                     	ds	3
  6511  0052                     _tempCalc$1187:	
  6512                           
  6513                           ; 3 bytes @ 0x32
  6514  0052                     	ds	3
  6515  0055                     tempCalc@steinhart:	
  6516                           
  6517                           ; 3 bytes @ 0x35
  6518  0055                     	ds	3
  6519  0058                     ??_main:	
  6520                           
  6521                           ; 1 bytes @ 0x38
  6522  0058                     	ds	2
  6523                           
  6524                           	psect	maintext
  6525  02BE                     __pmaintext:	
  6526 ;;
  6527 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  6528 ;;
  6529 ;; *************** function _main *****************
  6530 ;; Defined at:
  6531 ;;		line 42 in file "main.c"
  6532 ;; Parameters:    Size  Location     Type
  6533 ;;		None
  6534 ;; Auto vars:     Size  Location     Type
  6535 ;;  efficiency      3    0[BANK1 ] float 
  6536 ;;  dutyCycle7      2   21[BANK1 ] unsigned int 
  6537 ;;  dutyCycle6      2   19[BANK1 ] unsigned int 
  6538 ;;  MPPT1           2   15[BANK1 ] int 
  6539 ;;  MPPT0           2   13[BANK1 ] int 
  6540 ;;  faultNotRese    2    9[BANK1 ] unsigned int 
  6541 ;;  faultCount      2    7[BANK1 ] unsigned int 
  6542 ;;  IOutTotal       2    5[BANK1 ] int 
  6543 ;;  dutyCycle1      2    3[BANK1 ] unsigned int 
  6544 ;;  j               1   18[BANK1 ] unsigned char 
  6545 ;;  menuButton      1   17[BANK1 ] unsigned char 
  6546 ;;  displayRefre    1   12[BANK1 ] unsigned char 
  6547 ;;  slowLoop        1   11[BANK1 ] unsigned char 
  6548 ;; Return value:  Size  Location     Type
  6549 ;;                  1    wreg      void 
  6550 ;; Registers used:
  6551 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6552 ;; Tracked objects:
  6553 ;;		On entry : B1F/0
  6554 ;;		On exit  : 0/0
  6555 ;;		Unchanged: 0/0
  6556 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6557 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6558 ;;      Locals:         0       0      23       0       0       0       0       0       0       0       0       0       
      +0       0
  6559 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6560 ;;      Totals:         0       2      23       0       0       0       0       0       0       0       0       0       
      +0       0
  6561 ;;Total ram usage:       25 bytes
  6562 ;; Hardware stack levels required when called:    5
  6563 ;; This function calls:
  6564 ;;		_ADCRead
  6565 ;;		_Battery_State_Machine
  6566 ;;		_LCDClear
  6567 ;;		_LCDInit
  6568 ;;		_LCDWriteCharacter
  6569 ;;		_LCDWriteInt
  6570 ;;		_LCDWriteString
  6571 ;;		_PWM6_LoadDutyValue
  6572 ;;		_PWM7_LoadDutyValue
  6573 ;;		_SYSTEM_Initialize
  6574 ;;		___awtoft
  6575 ;;		___ftdiv
  6576 ;;		___fttol
  6577 ;;		_calculateCurrent0
  6578 ;;		_calculateCurrent1
  6579 ;;		_calculateCurrent2
  6580 ;;		_calculateCurrent3
  6581 ;;		_cc_cv_mode
  6582 ;;		_gotoXY
  6583 ;;		_readButton
  6584 ;;		_readIAnalog
  6585 ;;		_tempCalc
  6586 ;; This function is called by:
  6587 ;;		Startup code after reset
  6588 ;; This function uses a non-reentrant model
  6589 ;;
  6590                           
  6591                           
  6592                           ;psect for function _main
  6593  02BE                     _main:	
  6594                           
  6595                           ;main.c: 44: int16_t MPPT0 = 1550;
  6596                           
  6597                           ;incstack = 0
  6598                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6599  02BE  300E               	movlw	14
  6600  02BF  0021               	movlb	1	; select bank1
  6601  02C0  00E3               	movwf	main@MPPT0^(0+128)
  6602  02C1  3006               	movlw	6
  6603  02C2  00E4               	movwf	(main@MPPT0^(0+128)+1)
  6604                           
  6605                           ;main.c: 45: int16_t MPPT1 = 1550;
  6606  02C3  300E               	movlw	14
  6607  02C4  00E5               	movwf	main@MPPT1^(0+128)
  6608  02C5  3006               	movlw	6
  6609  02C6  00E6               	movwf	(main@MPPT1^(0+128)+1)
  6610                           
  6611                           ;main.c: 47: uint16_t dutyCycle6 = 1023;
  6612  02C7  30FF               	movlw	255
  6613  02C8  00E9               	movwf	main@dutyCycle6^(0+128)
  6614  02C9  3003               	movlw	3
  6615  02CA  00EA               	movwf	(main@dutyCycle6^(0+128)+1)
  6616                           
  6617                           ;main.c: 48: uint16_t dutyCycle7 = 1023;
  6618  02CB  30FF               	movlw	255
  6619  02CC  00EB               	movwf	main@dutyCycle7^(0+128)
  6620  02CD  3003               	movlw	3
  6621  02CE  00EC               	movwf	(main@dutyCycle7^(0+128)+1)
  6622                           
  6623                           ;main.c: 49: uint16_t dutyCycle1 = 60;
  6624  02CF  303C               	movlw	60
  6625  02D0  00D9               	movwf	main@dutyCycle1^(0+128)
  6626  02D1  3000               	movlw	0
  6627  02D2  00DA               	movwf	(main@dutyCycle1^(0+128)+1)
  6628                           
  6629                           ;main.c: 50: int16_t IOutTotal = 0;
  6630  02D3  01DB               	clrf	main@IOutTotal^(0+128)
  6631  02D4  01DC               	clrf	(main@IOutTotal+1)^(0+128)
  6632                           
  6633                           ;main.c: 52: uint8_t j = 0;
  6634  02D5  01E8               	clrf	main@j^(0+128)
  6635                           
  6636                           ;main.c: 55: uint8_t slowLoop = 200;
  6637  02D6  30C8               	movlw	200
  6638  02D7  0020               	movlb	0	; select bank0
  6639  02D8  00D8               	movwf	??_main
  6640  02D9  0858               	movf	??_main,w
  6641  02DA  0021               	movlb	1	; select bank1
  6642  02DB  00E1               	movwf	main@slowLoop^(0+128)
  6643                           
  6644                           ;main.c: 56: uint8_t displayRefresh = 0;
  6645  02DC  01E2               	clrf	main@displayRefresh^(0+128)
  6646                           
  6647                           ;main.c: 58: float efficiency = 0;
  6648  02DD  3000               	movlw	0
  6649  02DE  00D6               	movwf	main@efficiency^(0+128)
  6650  02DF  3000               	movlw	0
  6651  02E0  00D7               	movwf	(main@efficiency+1)^(0+128)
  6652  02E1  3000               	movlw	0
  6653  02E2  00D8               	movwf	(main@efficiency+2)^(0+128)
  6654                           
  6655                           ;main.c: 59: extern int8_t Imode[2];
  6656                           ;main.c: 60: extern int16_t Vref[2];
  6657                           ;main.c: 61: extern int16_t Iref[2];
  6658                           ;main.c: 62: uint8_t menuButton = 0;
  6659  02E3  01E7               	clrf	main@menuButton^(0+128)
  6660                           
  6661                           ;main.c: 63: uint16_t faultCount = 0;
  6662  02E4  01DD               	clrf	main@faultCount^(0+128)
  6663  02E5  01DE               	clrf	(main@faultCount+1)^(0+128)
  6664                           
  6665                           ;main.c: 64: uint16_t faultNotReset = 0;
  6666  02E6  01DF               	clrf	main@faultNotReset^(0+128)
  6667  02E7  01E0               	clrf	(main@faultNotReset+1)^(0+128)
  6668                           
  6669                           ;main.c: 65: extern int8_t VHoldMode[2];
  6670                           ;main.c: 66: extern uint8_t batteryState[2];
  6671                           ;main.c: 68: extern uint16_t IminCount[2];
  6672                           ;main.c: 71: SYSTEM_Initialize();
  6673  02E8  3194  24B4  3182   	fcall	_SYSTEM_Initialize
  6674                           
  6675                           ;main.c: 73: LCDClear();
  6676  02EB  3194  241C  3182   	fcall	_LCDClear
  6677  02EE                     l3115:	
  6678                           ;main.c: 75: void calculateCurrent0(void);
  6679                           ;main.c: 76: void calculateCurrent1(void);
  6680                           ;main.c: 77: void calculateCurrent2(void);
  6681                           ;main.c: 78: void calculateCurrent3(void);
  6682                           ;main.c: 92: while (1)
  6683                           
  6684                           
  6685                           ;main.c: 93: {
  6686                           ;main.c: 94: if(!(RB2))
  6687  02EE  0020               	movlb	0	; select bank0
  6688  02EF  190D               	btfsc	13,2	;volatile
  6689  02F0  2B02               	goto	l3123
  6690                           
  6691                           ;main.c: 95: {
  6692                           ;main.c: 96: LATA5=0;
  6693  02F1  1296               	bcf	22,5	;volatile
  6694                           
  6695                           ;main.c: 97: _delay((unsigned long)((400)*(32000000/4000000.0)));
  6696  02F2  3005               	movlw	5
  6697  02F3  0020               	movlb	0	; select bank0
  6698  02F4  00D8               	movwf	??_main
  6699  02F5  3026               	movlw	38
  6700  02F6                     u3957:	
  6701  02F6  0B89               	decfsz	9,f
  6702  02F7  2AF6               	goto	u3957
  6703  02F8  0BD8               	decfsz	??_main,f
  6704  02F9  2AF6               	goto	u3957
  6705  02FA  0000               	nop
  6706                           
  6707                           ;main.c: 98: faultCount+=1;
  6708  02FB  3001               	movlw	1
  6709  02FC  0021               	movlb	1	; select bank1
  6710  02FD  07DD               	addwf	main@faultCount^(0+128),f
  6711  02FE  3000               	movlw	0
  6712  02FF  3DDE               	addwfc	(main@faultCount+1)^(0+128),f
  6713                           
  6714                           ;main.c: 99: LATA5=1;
  6715  0300  0020               	movlb	0	; select bank0
  6716  0301  1696               	bsf	22,5	;volatile
  6717  0302                     l3123:	
  6718                           
  6719                           ;main.c: 100: }
  6720                           ;main.c: 101: for(j=0;j<4;j++) Ianalogs[j]=readIAnalog(j);
  6721  0302  0021               	movlb	1	; select bank1
  6722  0303  01E8               	clrf	main@j^(0+128)
  6723  0304  3004               	movlw	4
  6724  0305  0268               	subwf	main@j^(0+128),w
  6725  0306  1803               	btfsc	3,0
  6726  0307  2B26               	goto	l3135
  6727  0308                     l3129:	
  6728  0308  0868               	movf	main@j^(0+128),w
  6729  0309  0020               	movlb	0	; select bank0
  6730  030A  00D8               	movwf	??_main
  6731  030B  01D9               	clrf	??_main+1
  6732  030C  0858               	movf	??_main,w
  6733  030D  00A6               	movwf	readIAnalog@channel
  6734  030E  0859               	movf	??_main+1,w
  6735  030F  00A7               	movwf	readIAnalog@channel+1
  6736  0310  318E  26C2  3182   	fcall	_readIAnalog
  6737  0313  0021               	movlb	1	; select bank1
  6738  0314  3568               	lslf	main@j^(0+128),w
  6739  0315  3EA0               	addlw	(low (_Ianalogs| 0))& (0+255)
  6740  0316  0086               	movwf	6
  6741  0317  0187               	clrf	7
  6742  0318  0020               	movlb	0	; select bank0
  6743  0319  0826               	movf	?_readIAnalog,w
  6744  031A  3FC0               	movwi [0]fsr1
  6745  031B  0827               	movf	?_readIAnalog+1,w
  6746  031C  3FC1               	movwi [1]fsr1
  6747  031D  3001               	movlw	1
  6748  031E  00D8               	movwf	??_main
  6749  031F  0858               	movf	??_main,w
  6750  0320  0021               	movlb	1	; select bank1
  6751  0321  07E8               	addwf	main@j^(0+128),f
  6752  0322  3004               	movlw	4
  6753  0323  0268               	subwf	main@j^(0+128),w
  6754  0324  1C03               	skipc
  6755  0325  2B08               	goto	l3129
  6756  0326                     l3135:	
  6757                           
  6758                           ;main.c: 103: Vanalogs[0]=ADCRead(21);
  6759  0326  3015               	movlw	21
  6760  0327  3193  233E  3182   	fcall	_ADCRead
  6761  032A  0871               	movf	?_ADCRead+1,w
  6762  032B  0021               	movlb	1	; select bank1
  6763  032C  00A9               	movwf	(_Vanalogs+1)^(0+128)
  6764  032D  0870               	movf	?_ADCRead,w
  6765  032E  00A8               	movwf	_Vanalogs^(0+128)
  6766                           
  6767                           ;main.c: 105: Vanalogs[1]=ADCRead(17);
  6768  032F  3011               	movlw	17
  6769  0330  3193  233E  3182   	fcall	_ADCRead
  6770  0333  0871               	movf	?_ADCRead+1,w
  6771  0334  0021               	movlb	1	; select bank1
  6772  0335  00AB               	movwf	((_Vanalogs+1)^(0+128)+2)
  6773  0336  0870               	movf	?_ADCRead,w
  6774  0337  00AA               	movwf	(_Vanalogs^(0+128)+2)
  6775                           
  6776                           ;main.c: 107: Vanalogs[2]=ADCRead(23);
  6777  0338  3017               	movlw	23
  6778  0339  3193  233E  3182   	fcall	_ADCRead
  6779  033C  0871               	movf	?_ADCRead+1,w
  6780  033D  0021               	movlb	1	; select bank1
  6781  033E  00AD               	movwf	((_Vanalogs+1)^(0+128)+4)
  6782  033F  0870               	movf	?_ADCRead,w
  6783  0340  00AC               	movwf	(_Vanalogs^(0+128)+4)
  6784                           
  6785                           ;main.c: 109: Vanalogs[3]=ADCRead(19);
  6786  0341  3013               	movlw	19
  6787  0342  3193  233E  3182   	fcall	_ADCRead
  6788  0345  0871               	movf	?_ADCRead+1,w
  6789  0346  0021               	movlb	1	; select bank1
  6790  0347  00AF               	movwf	((_Vanalogs+1)^(0+128)+6)
  6791  0348  0870               	movf	?_ADCRead,w
  6792  0349  00AE               	movwf	(_Vanalogs^(0+128)+6)
  6793                           
  6794                           ;main.c: 111: if(!(RB2))faultNotReset+=1;
  6795  034A  0020               	movlb	0	; select bank0
  6796  034B  190D               	btfsc	13,2	;volatile
  6797  034C  2B52               	goto	l3141
  6798  034D  3001               	movlw	1
  6799  034E  0021               	movlb	1	; select bank1
  6800  034F  07DF               	addwf	main@faultNotReset^(0+128),f
  6801  0350  3000               	movlw	0
  6802  0351  3DE0               	addwfc	(main@faultNotReset+1)^(0+128),f
  6803  0352                     l3141:	
  6804                           
  6805                           ;main.c: 113: voltage[0]=(int16_t)(Vanalogs[0]/.5448);
  6806  0352  0021               	movlb	1	; select bank1
  6807  0353  0829               	movf	(_Vanalogs+1)^(0+128),w
  6808  0354  00F9               	movwf	___awtoft@c+1
  6809  0355  0828               	movf	_Vanalogs^(0+128),w
  6810  0356  00F8               	movwf	___awtoft@c
  6811  0357  3193  23D7  3182   	fcall	___awtoft
  6812  035A  0878               	movf	?___awtoft,w
  6813  035B  0020               	movlb	0	; select bank0
  6814  035C  00A3               	movwf	___ftdiv@f1
  6815  035D  0879               	movf	?___awtoft+1,w
  6816  035E  00A4               	movwf	___ftdiv@f1+1
  6817  035F  087A               	movf	?___awtoft+2,w
  6818  0360  00A5               	movwf	___ftdiv@f1+2
  6819  0361  3078               	movlw	120
  6820  0362  00A0               	movwf	___ftdiv@f2
  6821  0363  300B               	movlw	11
  6822  0364  00A1               	movwf	___ftdiv@f2+1
  6823  0365  303F               	movlw	63
  6824  0366  00A2               	movwf	___ftdiv@f2+2
  6825  0367  3189  21D9  3182   	fcall	___ftdiv
  6826  036A  0020               	movlb	0	; select bank0
  6827  036B  0820               	movf	?___ftdiv,w
  6828  036C  00B0               	movwf	___fttol@f1
  6829  036D  0821               	movf	?___ftdiv+1,w
  6830  036E  00B1               	movwf	___fttol@f1+1
  6831  036F  0822               	movf	?___ftdiv+2,w
  6832  0370  00B2               	movwf	___fttol@f1+2
  6833  0371  3189  2152  3182   	fcall	___fttol
  6834  0374  0020               	movlb	0	; select bank0
  6835  0375  0831               	movf	?___fttol+1,w
  6836  0376  0021               	movlb	1	; select bank1
  6837  0377  00B9               	movwf	(_voltage+1)^(0+128)
  6838  0378  0020               	movlb	0	; select bank0
  6839  0379  0830               	movf	?___fttol,w
  6840  037A  0021               	movlb	1	; select bank1
  6841  037B  00B8               	movwf	_voltage^(0+128)
  6842                           
  6843                           ;main.c: 115: voltage[1]=(int16_t)(Vanalogs[1]/.540757);
  6844  037C  082B               	movf	((_Vanalogs+1)^(0+128)+2),w
  6845  037D  00F9               	movwf	___awtoft@c+1
  6846  037E  082A               	movf	(_Vanalogs^(0+128)+2),w
  6847  037F  00F8               	movwf	___awtoft@c
  6848  0380  3193  23D7  3182   	fcall	___awtoft
  6849  0383  0878               	movf	?___awtoft,w
  6850  0384  0020               	movlb	0	; select bank0
  6851  0385  00A3               	movwf	___ftdiv@f1
  6852  0386  0879               	movf	?___awtoft+1,w
  6853  0387  00A4               	movwf	___ftdiv@f1+1
  6854  0388  087A               	movf	?___awtoft+2,w
  6855  0389  00A5               	movwf	___ftdiv@f1+2
  6856  038A  306F               	movlw	111
  6857  038B  00A0               	movwf	___ftdiv@f2
  6858  038C  300A               	movlw	10
  6859  038D  00A1               	movwf	___ftdiv@f2+1
  6860  038E  303F               	movlw	63
  6861  038F  00A2               	movwf	___ftdiv@f2+2
  6862  0390  3189  21D9  3182   	fcall	___ftdiv
  6863  0393  0020               	movlb	0	; select bank0
  6864  0394  0820               	movf	?___ftdiv,w
  6865  0395  00B0               	movwf	___fttol@f1
  6866  0396  0821               	movf	?___ftdiv+1,w
  6867  0397  00B1               	movwf	___fttol@f1+1
  6868  0398  0822               	movf	?___ftdiv+2,w
  6869  0399  00B2               	movwf	___fttol@f1+2
  6870  039A  3189  2152  3182   	fcall	___fttol
  6871  039D  0020               	movlb	0	; select bank0
  6872  039E  0831               	movf	?___fttol+1,w
  6873  039F  0021               	movlb	1	; select bank1
  6874  03A0  00BB               	movwf	((_voltage+1)^(0+128)+2)
  6875  03A1  0020               	movlb	0	; select bank0
  6876  03A2  0830               	movf	?___fttol,w
  6877  03A3  0021               	movlb	1	; select bank1
  6878  03A4  00BA               	movwf	(_voltage^(0+128)+2)
  6879                           
  6880                           ;main.c: 117: voltage[2]=(int16_t)(Vanalogs[2]/.405775);
  6881  03A5  082D               	movf	((_Vanalogs+1)^(0+128)+4),w
  6882  03A6  00F9               	movwf	___awtoft@c+1
  6883  03A7  082C               	movf	(_Vanalogs^(0+128)+4),w
  6884  03A8  00F8               	movwf	___awtoft@c
  6885  03A9  3193  23D7  3182   	fcall	___awtoft
  6886  03AC  0878               	movf	?___awtoft,w
  6887  03AD  0020               	movlb	0	; select bank0
  6888  03AE  00A3               	movwf	___ftdiv@f1
  6889  03AF  0879               	movf	?___awtoft+1,w
  6890  03B0  00A4               	movwf	___ftdiv@f1+1
  6891  03B1  087A               	movf	?___awtoft+2,w
  6892  03B2  00A5               	movwf	___ftdiv@f1+2
  6893  03B3  30C2               	movlw	194
  6894  03B4  00A0               	movwf	___ftdiv@f2
  6895  03B5  30CF               	movlw	207
  6896  03B6  00A1               	movwf	___ftdiv@f2+1
  6897  03B7  303E               	movlw	62
  6898  03B8  00A2               	movwf	___ftdiv@f2+2
  6899  03B9  3189  21D9  3182   	fcall	___ftdiv
  6900  03BC  0020               	movlb	0	; select bank0
  6901  03BD  0820               	movf	?___ftdiv,w
  6902  03BE  00B0               	movwf	___fttol@f1
  6903  03BF  0821               	movf	?___ftdiv+1,w
  6904  03C0  00B1               	movwf	___fttol@f1+1
  6905  03C1  0822               	movf	?___ftdiv+2,w
  6906  03C2  00B2               	movwf	___fttol@f1+2
  6907  03C3  3189  2152  3182   	fcall	___fttol
  6908  03C6  0020               	movlb	0	; select bank0
  6909  03C7  0831               	movf	?___fttol+1,w
  6910  03C8  0021               	movlb	1	; select bank1
  6911  03C9  00BD               	movwf	((_voltage+1)^(0+128)+4)
  6912  03CA  0020               	movlb	0	; select bank0
  6913  03CB  0830               	movf	?___fttol,w
  6914  03CC  0021               	movlb	1	; select bank1
  6915  03CD  00BC               	movwf	(_voltage^(0+128)+4)
  6916                           
  6917                           ;main.c: 119: voltage[3]=(int16_t)(Vanalogs[3]/.406788);
  6918  03CE  082F               	movf	((_Vanalogs+1)^(0+128)+6),w
  6919  03CF  00F9               	movwf	___awtoft@c+1
  6920  03D0  082E               	movf	(_Vanalogs^(0+128)+6),w
  6921  03D1  00F8               	movwf	___awtoft@c
  6922  03D2  3193  23D7  3182   	fcall	___awtoft
  6923  03D5  0878               	movf	?___awtoft,w
  6924  03D6  0020               	movlb	0	; select bank0
  6925  03D7  00A3               	movwf	___ftdiv@f1
  6926  03D8  0879               	movf	?___awtoft+1,w
  6927  03D9  00A4               	movwf	___ftdiv@f1+1
  6928  03DA  087A               	movf	?___awtoft+2,w
  6929  03DB  00A5               	movwf	___ftdiv@f1+2
  6930  03DC  3047               	movlw	71
  6931  03DD  00A0               	movwf	___ftdiv@f2
  6932  03DE  30D0               	movlw	208
  6933  03DF  00A1               	movwf	___ftdiv@f2+1
  6934  03E0  303E               	movlw	62
  6935  03E1  00A2               	movwf	___ftdiv@f2+2
  6936  03E2  3189  21D9  3182   	fcall	___ftdiv
  6937  03E5  0020               	movlb	0	; select bank0
  6938  03E6  0820               	movf	?___ftdiv,w
  6939  03E7  00B0               	movwf	___fttol@f1
  6940  03E8  0821               	movf	?___ftdiv+1,w
  6941  03E9  00B1               	movwf	___fttol@f1+1
  6942  03EA  0822               	movf	?___ftdiv+2,w
  6943  03EB  00B2               	movwf	___fttol@f1+2
  6944  03EC  3189  2152  3182   	fcall	___fttol
  6945  03EF  0020               	movlb	0	; select bank0
  6946  03F0  0831               	movf	?___fttol+1,w
  6947  03F1  0021               	movlb	1	; select bank1
  6948  03F2  00BF               	movwf	((_voltage+1)^(0+128)+6)
  6949  03F3  0020               	movlb	0	; select bank0
  6950  03F4  0830               	movf	?___fttol,w
  6951  03F5  0021               	movlb	1	; select bank1
  6952  03F6  00BE               	movwf	(_voltage^(0+128)+6)
  6953                           
  6954                           ;main.c: 121: calculateCurrent0();
  6955  03F7  3195  2565  3182   	fcall	_calculateCurrent0
  6956                           
  6957                           ;main.c: 123: calculateCurrent1();
  6958  03FA  3195  25AA  3182   	fcall	_calculateCurrent1
  6959                           
  6960                           ;main.c: 125: calculateCurrent2();
  6961  03FD  3195  25EF  3182   	fcall	_calculateCurrent2
  6962                           
  6963                           ;main.c: 127: calculateCurrent3();
  6964  0400  3188  2009  3182   	fcall	_calculateCurrent3
  6965                           
  6966                           ;main.c: 129: if(Imode[0])
  6967  0403  0020               	movlb	0	; select bank0
  6968  0404  0862               	movf	_Imode,w
  6969  0405  1903               	btfsc	3,2
  6970  0406  2C28               	goto	l3171
  6971                           
  6972                           ;main.c: 130: {
  6973                           ;main.c: 131: if(voltage[2]<MPPT0)
  6974  0407  0021               	movlb	1	; select bank1
  6975  0408  083D               	movf	((_voltage+1)^(0+128)+4),w
  6976  0409  3A80               	xorlw	128
  6977  040A  0020               	movlb	0	; select bank0
  6978  040B  00D8               	movwf	??_main
  6979  040C  0021               	movlb	1	; select bank1
  6980  040D  0864               	movf	(main@MPPT0+1)^(0+128),w
  6981  040E  3A80               	xorlw	128
  6982  040F  0020               	movlb	0	; select bank0
  6983  0410  0258               	subwf	??_main,w
  6984  0411  1D03               	skipz
  6985  0412  2C16               	goto	u3705
  6986  0413  0021               	movlb	1	; select bank1
  6987  0414  0863               	movf	main@MPPT0^(0+128),w
  6988  0415  023C               	subwf	(_voltage^(0+128)+4),w
  6989  0416                     u3705:	
  6990  0416  1C03               	btfss	3,0
  6991  0417  2C39               	goto	L1
  6992                           
  6993                           ;main.c: 138: else if(voltage[2]>MPPT0)
  6994                           
  6995                           ;main.c: 136: }
  6996                           ;main.c: 137: }
  6997                           
  6998                           ;main.c: 134: {
  6999                           ;main.c: 135: dutyCycle6+=1;
  7000                           
  7001                           ;main.c: 132: {
  7002                           ;main.c: 133: if(dutyCycle6<1023)
  7003  0418  0021               	movlb	1	; select bank1
  7004  0419  0864               	movf	(main@MPPT0+1)^(0+128),w
  7005  041A  3A80               	xorlw	128
  7006  041B  0020               	movlb	0	; select bank0
  7007  041C  00D8               	movwf	??_main
  7008  041D  0021               	movlb	1	; select bank1
  7009  041E  083D               	movf	((_voltage+1)^(0+128)+4),w
  7010  041F  3A80               	xorlw	128
  7011  0420  0020               	movlb	0	; select bank0
  7012  0421  0258               	subwf	??_main,w
  7013  0422  1D03               	skipz
  7014  0423  2C53               	goto	u3765
  7015  0424  0021               	movlb	1	; select bank1
  7016  0425  083C               	movf	(_voltage^(0+128)+4),w
  7017  0426  0263               	subwf	main@MPPT0^(0+128),w
  7018  0427  2C53               	goto	u3765
  7019  0428                     l3171:	
  7020                           ;main.c: 146: }
  7021                           
  7022                           ;main.c: 143: }
  7023                           ;main.c: 144: }
  7024                           
  7025                           ;main.c: 141: {
  7026                           ;main.c: 142: dutyCycle6-=1;
  7027                           
  7028                           ;main.c: 139: {
  7029                           ;main.c: 140: if(dutyCycle6>0)
  7030                           
  7031                           
  7032                           ;main.c: 147: else
  7033                           ;main.c: 148: {
  7034                           ;main.c: 149: if(voltage[0]>(int16_t)Vref[0])
  7035  0428  0020               	movlb	0	; select bank0
  7036  0429  085B               	movf	_Vref+1,w
  7037  042A  3A80               	xorlw	128
  7038  042B  00D8               	movwf	??_main
  7039  042C  0021               	movlb	1	; select bank1
  7040  042D  0839               	movf	(_voltage+1)^(0+128),w
  7041  042E  3A80               	xorlw	128
  7042  042F  0020               	movlb	0	; select bank0
  7043  0430  0258               	subwf	??_main,w
  7044  0431  1D03               	skipz
  7045  0432  2C37               	goto	u3745
  7046  0433  0021               	movlb	1	; select bank1
  7047  0434  0838               	movf	_voltage^(0+128),w
  7048  0435  0020               	movlb	0	; select bank0
  7049  0436  025A               	subwf	_Vref,w
  7050  0437                     u3745:	
  7051  0437  1803               	skipnc
  7052  0438  2C46               	goto	l3177
  7053  0439                     L1:	
  7054                           
  7055                           ;main.c: 150: {
  7056                           ;main.c: 151: if(dutyCycle6<1023) dutyCycle6+=1;
  7057  0439  3003               	movlw	3
  7058  043A  0021               	movlb	1	; select bank1
  7059  043B  026A               	subwf	(main@dutyCycle6+1)^(0+128),w
  7060  043C  30FF               	movlw	255
  7061  043D  1903               	skipnz
  7062  043E  0269               	subwf	main@dutyCycle6^(0+128),w
  7063  043F  1803               	skipnc
  7064  0440  2C5E               	goto	l3183
  7065  0441  3001               	movlw	1
  7066  0442  07E9               	addwf	main@dutyCycle6^(0+128),f
  7067  0443  3000               	movlw	0
  7068  0444  3DEA               	addwfc	(main@dutyCycle6+1)^(0+128),f
  7069                           
  7070                           ;main.c: 152: }
  7071  0445  2C5E               	goto	l3183
  7072  0446                     l3177:	
  7073                           
  7074                           ;main.c: 153: else if(voltage[0]<(int16_t)Vref[0])
  7075  0446  0021               	movlb	1	; select bank1
  7076  0447  0839               	movf	(_voltage+1)^(0+128),w
  7077  0448  3A80               	xorlw	128
  7078  0449  0020               	movlb	0	; select bank0
  7079  044A  00D8               	movwf	??_main
  7080  044B  085B               	movf	_Vref+1,w
  7081  044C  3A80               	xorlw	128
  7082  044D  0258               	subwf	??_main,w
  7083  044E  1D03               	skipz
  7084  044F  2C53               	goto	u3765
  7085  0450  085A               	movf	_Vref,w
  7086  0451  0021               	movlb	1	; select bank1
  7087  0452  0238               	subwf	_voltage^(0+128),w
  7088  0453                     u3765:	
  7089  0453  1803               	skipnc
  7090  0454  2C5E               	goto	l3183
  7091                           
  7092                           ;main.c: 154: {
  7093                           ;main.c: 155: if(dutyCycle6>0) dutyCycle6-=1;;
  7094  0455  0021               	movlb	1	; select bank1
  7095  0456  0869               	movf	main@dutyCycle6^(0+128),w
  7096  0457  046A               	iorwf	(main@dutyCycle6+1)^(0+128),w
  7097  0458  1903               	btfsc	3,2
  7098  0459  2C5E               	goto	l3183
  7099  045A  3001               	movlw	1
  7100  045B  02E9               	subwf	main@dutyCycle6^(0+128),f
  7101  045C  3000               	movlw	0
  7102  045D  3BEA               	subwfb	(main@dutyCycle6+1)^(0+128),f
  7103  045E                     l3183:	
  7104                           ;main.c: 156: }
  7105                           
  7106                           
  7107                           ;main.c: 158: }
  7108                           ;main.c: 160: if(Imode[1])
  7109  045E  0020               	movlb	0	; select bank0
  7110  045F  0863               	movf	_Imode+1,w
  7111  0460  1903               	btfsc	3,2
  7112  0461  2C74               	goto	l3195
  7113                           
  7114                           ;main.c: 161: {
  7115                           ;main.c: 162: if(voltage[3]<MPPT1)
  7116  0462  0021               	movlb	1	; select bank1
  7117  0463  083F               	movf	((_voltage+1)^(0+128)+6),w
  7118  0464  3A80               	xorlw	128
  7119  0465  0020               	movlb	0	; select bank0
  7120  0466  00D8               	movwf	??_main
  7121  0467  0021               	movlb	1	; select bank1
  7122  0468  0866               	movf	(main@MPPT1+1)^(0+128),w
  7123  0469  3A80               	xorlw	128
  7124  046A  0020               	movlb	0	; select bank0
  7125  046B  0258               	subwf	??_main,w
  7126  046C  1D03               	skipz
  7127  046D  2C71               	goto	u3795
  7128  046E  0021               	movlb	1	; select bank1
  7129  046F  0865               	movf	main@MPPT1^(0+128),w
  7130  0470  023E               	subwf	(_voltage^(0+128)+6),w
  7131  0471                     u3795:	
  7132  0471  1C03               	btfss	3,0
  7133  0472  2C85               	goto	L2
  7134                           
  7135                           ;main.c: 167: }
  7136                           ;main.c: 168: }
  7137                           
  7138                           ;main.c: 165: {
  7139                           ;main.c: 166: dutyCycle7+=1;
  7140                           
  7141                           ;main.c: 163: {
  7142                           ;main.c: 164: if(dutyCycle7<1023)
  7143  0473  2CA1               	goto	L3
  7144  0474                     l3195:	
  7145                           ;main.c: 172: }
  7146                           ;main.c: 173: }
  7147                           
  7148                           ;main.c: 170: {
  7149                           ;main.c: 171: dutyCycle7-=1;
  7150                           
  7151                           ;main.c: 169: else if(dutyCycle7>0)
  7152                           
  7153                           
  7154                           ;main.c: 174: else
  7155                           ;main.c: 175: {
  7156                           ;main.c: 176: if(voltage[1]>(int16_t)Vref[1])
  7157  0474  0020               	movlb	0	; select bank0
  7158  0475  085D               	movf	_Vref+3,w
  7159  0476  3A80               	xorlw	128
  7160  0477  00D8               	movwf	??_main
  7161  0478  0021               	movlb	1	; select bank1
  7162  0479  083B               	movf	((_voltage+1)^(0+128)+2),w
  7163  047A  3A80               	xorlw	128
  7164  047B  0020               	movlb	0	; select bank0
  7165  047C  0258               	subwf	??_main,w
  7166  047D  1D03               	skipz
  7167  047E  2C83               	goto	u3825
  7168  047F  0021               	movlb	1	; select bank1
  7169  0480  083A               	movf	(_voltage^(0+128)+2),w
  7170  0481  0020               	movlb	0	; select bank0
  7171  0482  025C               	subwf	_Vref+2,w
  7172  0483                     u3825:	
  7173  0483  1803               	skipnc
  7174  0484  2C92               	goto	l3201
  7175  0485                     L2:	
  7176                           
  7177                           ;main.c: 177: {
  7178                           ;main.c: 178: if(dutyCycle7<1023) dutyCycle7+=1;
  7179  0485  3003               	movlw	3
  7180  0486  0021               	movlb	1	; select bank1
  7181  0487  026C               	subwf	(main@dutyCycle7+1)^(0+128),w
  7182  0488  30FF               	movlw	255
  7183  0489  1903               	skipnz
  7184  048A  026B               	subwf	main@dutyCycle7^(0+128),w
  7185  048B  1803               	skipnc
  7186  048C  2CAA               	goto	l3207
  7187  048D  3001               	movlw	1
  7188  048E  07EB               	addwf	main@dutyCycle7^(0+128),f
  7189  048F  3000               	movlw	0
  7190  0490  3DEC               	addwfc	(main@dutyCycle7+1)^(0+128),f
  7191                           
  7192                           ;main.c: 179: }
  7193  0491  2CAA               	goto	l3207
  7194  0492                     l3201:	
  7195                           
  7196                           ;main.c: 180: else if(voltage[1]<(int16_t)Vref[1])
  7197  0492  0021               	movlb	1	; select bank1
  7198  0493  083B               	movf	((_voltage+1)^(0+128)+2),w
  7199  0494  3A80               	xorlw	128
  7200  0495  0020               	movlb	0	; select bank0
  7201  0496  00D8               	movwf	??_main
  7202  0497  085D               	movf	_Vref+3,w
  7203  0498  3A80               	xorlw	128
  7204  0499  0258               	subwf	??_main,w
  7205  049A  1D03               	skipz
  7206  049B  2C9F               	goto	u3845
  7207  049C  085C               	movf	_Vref+2,w
  7208  049D  0021               	movlb	1	; select bank1
  7209  049E  023A               	subwf	(_voltage^(0+128)+2),w
  7210  049F                     u3845:	
  7211  049F  1803               	skipnc
  7212  04A0  2CAA               	goto	l3207
  7213  04A1                     L3:	
  7214                           
  7215                           ;main.c: 181: {
  7216                           ;main.c: 182: if(dutyCycle7>0) dutyCycle7-=1;;
  7217  04A1  0021               	movlb	1	; select bank1
  7218  04A2  086B               	movf	main@dutyCycle7^(0+128),w
  7219  04A3  046C               	iorwf	(main@dutyCycle7+1)^(0+128),w
  7220  04A4  1903               	btfsc	3,2
  7221  04A5  2CAA               	goto	l3207
  7222  04A6  3001               	movlw	1
  7223  04A7  02EB               	subwf	main@dutyCycle7^(0+128),f
  7224  04A8  3000               	movlw	0
  7225  04A9  3BEC               	subwfb	(main@dutyCycle7+1)^(0+128),f
  7226  04AA                     l3207:	
  7227                           ;main.c: 183: }
  7228                           
  7229                           
  7230                           ;main.c: 185: }
  7231                           ;main.c: 187: slowLoop+=1;
  7232  04AA  3001               	movlw	1
  7233  04AB  0020               	movlb	0	; select bank0
  7234  04AC  00D8               	movwf	??_main
  7235  04AD  0858               	movf	??_main,w
  7236  04AE  0021               	movlb	1	; select bank1
  7237  04AF  07E1               	addwf	main@slowLoop^(0+128),f
  7238                           
  7239                           ;main.c: 190: PWM6_LoadDutyValue(dutyCycle6);
  7240  04B0  086A               	movf	(main@dutyCycle6+1)^(0+128),w
  7241  04B1  00F1               	movwf	PWM6_LoadDutyValue@dutyCycle6+1
  7242  04B2  0869               	movf	main@dutyCycle6^(0+128),w
  7243  04B3  00F0               	movwf	PWM6_LoadDutyValue@dutyCycle6
  7244  04B4  3193  2353  3182   	fcall	_PWM6_LoadDutyValue
  7245                           
  7246                           ;main.c: 191: PWM7_LoadDutyValue(dutyCycle7);
  7247  04B7  0021               	movlb	1	; select bank1
  7248  04B8  086C               	movf	(main@dutyCycle7+1)^(0+128),w
  7249  04B9  00F1               	movwf	PWM7_LoadDutyValue@dutyCycle7+1
  7250  04BA  086B               	movf	main@dutyCycle7^(0+128),w
  7251  04BB  00F0               	movwf	PWM7_LoadDutyValue@dutyCycle7
  7252  04BC  3193  2369  3182   	fcall	_PWM7_LoadDutyValue
  7253                           
  7254                           ;main.c: 193: menuButton = readButton();
  7255  04BF  3188  204E  3182   	fcall	_readButton
  7256  04C2  0020               	movlb	0	; select bank0
  7257  04C3  00D8               	movwf	??_main
  7258  04C4  0858               	movf	??_main,w
  7259  04C5  0021               	movlb	1	; select bank1
  7260  04C6  00E7               	movwf	main@menuButton^(0+128)
  7261                           
  7262                           ;main.c: 194: if(menuButton == 2) if(MPPT1>1375)MPPT1-=1;
  7263  04C7  3002               	movlw	2
  7264  04C8  0667               	xorwf	main@menuButton^(0+128),w
  7265  04C9  1D03               	btfss	3,2
  7266  04CA  2CDD               	goto	l3221
  7267  04CB  0866               	movf	(main@MPPT1+1)^(0+128),w
  7268  04CC  3A80               	xorlw	128
  7269  04CD  0020               	movlb	0	; select bank0
  7270  04CE  00D8               	movwf	??_main
  7271  04CF  3085               	movlw	133
  7272  04D0  0258               	subwf	??_main,w
  7273  04D1  1D03               	skipz
  7274  04D2  2CD6               	goto	u3875
  7275  04D3  3060               	movlw	96
  7276  04D4  0021               	movlb	1	; select bank1
  7277  04D5  0265               	subwf	main@MPPT1^(0+128),w
  7278  04D6                     u3875:	
  7279  04D6  1C03               	skipc
  7280  04D7  2CDD               	goto	l3221
  7281  04D8  30FF               	movlw	255
  7282  04D9  0021               	movlb	1	; select bank1
  7283  04DA  07E5               	addwf	main@MPPT1^(0+128),f
  7284  04DB  30FF               	movlw	255
  7285  04DC  3DE6               	addwfc	(main@MPPT1+1)^(0+128),f
  7286  04DD                     l3221:	
  7287                           
  7288                           ;main.c: 195: if(menuButton == 3)if(MPPT1<2200)MPPT1+=1;
  7289  04DD  3003               	movlw	3
  7290  04DE  0021               	movlb	1	; select bank1
  7291  04DF  0667               	xorwf	main@menuButton^(0+128),w
  7292  04E0  1D03               	btfss	3,2
  7293  04E1  2CF4               	goto	l3227
  7294  04E2  0866               	movf	(main@MPPT1+1)^(0+128),w
  7295  04E3  3A80               	xorlw	128
  7296  04E4  0020               	movlb	0	; select bank0
  7297  04E5  00D8               	movwf	??_main
  7298  04E6  3088               	movlw	136
  7299  04E7  0258               	subwf	??_main,w
  7300  04E8  1D03               	skipz
  7301  04E9  2CED               	goto	u3895
  7302  04EA  3098               	movlw	152
  7303  04EB  0021               	movlb	1	; select bank1
  7304  04EC  0265               	subwf	main@MPPT1^(0+128),w
  7305  04ED                     u3895:	
  7306  04ED  1803               	skipnc
  7307  04EE  2CF4               	goto	l3227
  7308  04EF  3001               	movlw	1
  7309  04F0  0021               	movlb	1	; select bank1
  7310  04F1  07E5               	addwf	main@MPPT1^(0+128),f
  7311  04F2  3000               	movlw	0
  7312  04F3  3DE6               	addwfc	(main@MPPT1+1)^(0+128),f
  7313  04F4                     l3227:	
  7314                           
  7315                           ;main.c: 196: if(menuButton == 1)LCDInit();
  7316  04F4  0021               	movlb	1	; select bank1
  7317  04F5  0367               	decf	main@menuButton^(0+128),w
  7318  04F6  1D03               	btfss	3,2
  7319  04F7  2CFB               	goto	l3231
  7320  04F8  3194  2479  3182   	fcall	_LCDInit
  7321  04FB                     l3231:	
  7322                           
  7323                           ;main.c: 200: if(slowLoop>250)
  7324  04FB  30FB               	movlw	251
  7325  04FC  0021               	movlb	1	; select bank1
  7326  04FD  0261               	subwf	main@slowLoop^(0+128),w
  7327  04FE  1C03               	skipc
  7328  04FF  2AEE               	goto	l3115
  7329                           
  7330                           ;main.c: 201: {
  7331                           ;main.c: 203: IOutTotal=current[0]+current[1];
  7332  0500  0830               	movf	_current^(0+128),w
  7333  0501  0732               	addwf	(_current^(0+128)+2),w
  7334  0502  00DB               	movwf	main@IOutTotal^(0+128)
  7335  0503  0831               	movf	(_current+1)^(0+128),w
  7336  0504  3D33               	addwfc	((_current+1)^(0+128)+2),w
  7337  0505  00DC               	movwf	(main@IOutTotal+1)^(0+128)
  7338                           
  7339                           ;main.c: 223: displayRefresh+=1;
  7340  0506  3001               	movlw	1
  7341  0507  0020               	movlb	0	; select bank0
  7342  0508  00D8               	movwf	??_main
  7343  0509  0858               	movf	??_main,w
  7344  050A  0021               	movlb	1	; select bank1
  7345  050B  07E2               	addwf	main@displayRefresh^(0+128),f
  7346                           
  7347                           ;main.c: 224: if(displayRefresh>80)
  7348  050C  3051               	movlw	81
  7349  050D  0262               	subwf	main@displayRefresh^(0+128),w
  7350  050E  1C03               	skipc
  7351  050F  2D26               	goto	l3243
  7352                           
  7353                           ;main.c: 225: {
  7354                           ;main.c: 226: LCDClear();
  7355  0510  3194  241C  3182   	fcall	_LCDClear
  7356                           
  7357                           ;main.c: 227: displayRefresh=0;
  7358  0513  0021               	movlb	1	; select bank1
  7359  0514  01E2               	clrf	main@displayRefresh^(0+128)
  7360                           
  7361                           ;main.c: 228: batteryTemp=tempCalc(ADCRead(9));
  7362  0515  3009               	movlw	9
  7363  0516  3193  233E  3182   	fcall	_ADCRead
  7364  0519  0871               	movf	?_ADCRead+1,w
  7365  051A  0020               	movlb	0	; select bank0
  7366  051B  00CE               	movwf	tempCalc@analogValue+1
  7367  051C  0870               	movf	?_ADCRead,w
  7368  051D  00CD               	movwf	tempCalc@analogValue
  7369  051E  318C  249F  3182   	fcall	_tempCalc
  7370  0521  0020               	movlb	0	; select bank0
  7371  0522  084E               	movf	?_tempCalc+1,w
  7372  0523  00ED               	movwf	_batteryTemp+1
  7373  0524  084D               	movf	?_tempCalc,w
  7374  0525  00EC               	movwf	_batteryTemp
  7375  0526                     l3243:	
  7376                           
  7377                           ;main.c: 229: }
  7378                           ;main.c: 230: Battery_State_Machine(0);
  7379  0526  3000               	movlw	0
  7380  0527  3181  2126  3182   	fcall	_Battery_State_Machine
  7381                           
  7382                           ;main.c: 231: Battery_State_Machine(1);
  7383  052A  3001               	movlw	1
  7384  052B  3181  2126  3182   	fcall	_Battery_State_Machine
  7385                           
  7386                           ;main.c: 234: { gotoXY(0,0); LCDWriteString("In:");};
  7387  052E  01F5               	clrf	gotoXY@y
  7388  052F  3000               	movlw	0
  7389  0530  3193  2302  3182   	fcall	_gotoXY
  7390  0533  3025               	movlw	low (STR_1| (0+32768))
  7391  0534  00FC               	movwf	LCDWriteString@characters
  7392  0535  3098               	movlw	high (STR_1| (0+32768))
  7393  0536  00FD               	movwf	LCDWriteString@characters+1
  7394  0537  3193  2315  3182   	fcall	_LCDWriteString
  7395                           
  7396                           ;main.c: 235: { gotoXY(26,0); LCDWriteString("Out:");};
  7397  053A  01F5               	clrf	gotoXY@y
  7398  053B  301A               	movlw	26
  7399  053C  3193  2302  3182   	fcall	_gotoXY
  7400  053F  3020               	movlw	low (STR_2| (0+32768))
  7401  0540  00FC               	movwf	LCDWriteString@characters
  7402  0541  3098               	movlw	high (STR_2| (0+32768))
  7403  0542  00FD               	movwf	LCDWriteString@characters+1
  7404  0543  3193  2315  3182   	fcall	_LCDWriteString
  7405                           
  7406                           ;main.c: 236: { gotoXY(52,0); LCDWriteString("Ref:");};
  7407  0546  01F5               	clrf	gotoXY@y
  7408  0547  3034               	movlw	52
  7409  0548  3193  2302  3182   	fcall	_gotoXY
  7410  054B  301B               	movlw	low (STR_3| (0+32768))
  7411  054C  00FC               	movwf	LCDWriteString@characters
  7412  054D  3098               	movlw	high (STR_3| (0+32768))
  7413  054E  00FD               	movwf	LCDWriteString@characters+1
  7414  054F  3193  2315  3182   	fcall	_LCDWriteString
  7415                           
  7416                           ;main.c: 238: { gotoXY(0,1); LCDWriteInt(voltage[2],4, 2, 0);};
  7417  0552  01F5               	clrf	gotoXY@y
  7418  0553  0AF5               	incf	gotoXY@y,f
  7419  0554  3000               	movlw	0
  7420  0555  3193  2302  3182   	fcall	_gotoXY
  7421  0558  0021               	movlb	1	; select bank1
  7422  0559  083D               	movf	((_voltage+1)^(0+128)+4),w
  7423  055A  0020               	movlb	0	; select bank0
  7424  055B  00A1               	movwf	LCDWriteInt@value+1
  7425  055C  0021               	movlb	1	; select bank1
  7426  055D  083C               	movf	(_voltage^(0+128)+4),w
  7427  055E  0020               	movlb	0	; select bank0
  7428  055F  00A0               	movwf	LCDWriteInt@value
  7429  0560  3004               	movlw	4
  7430  0561  00D8               	movwf	??_main
  7431  0562  0858               	movf	??_main,w
  7432  0563  00A2               	movwf	LCDWriteInt@fieldLength
  7433  0564  3002               	movlw	2
  7434  0565  00D9               	movwf	??_main+1
  7435  0566  0859               	movf	??_main+1,w
  7436  0567  00A3               	movwf	LCDWriteInt@numPlaces
  7437  0568  01A4               	clrf	LCDWriteInt@sign
  7438  0569  318B  23E6  3182   	fcall	_LCDWriteInt
  7439                           
  7440                           ;main.c: 239: LCDWriteCharacter('V');
  7441  056C  3056               	movlw	86
  7442  056D  3196  2685  3182   	fcall	_LCDWriteCharacter
  7443                           
  7444                           ;main.c: 241: { gotoXY(26,1); LCDWriteInt(voltage[0],4, 2, 0);};
  7445  0570  01F5               	clrf	gotoXY@y
  7446  0571  0AF5               	incf	gotoXY@y,f
  7447  0572  301A               	movlw	26
  7448  0573  3193  2302  3182   	fcall	_gotoXY
  7449  0576  0021               	movlb	1	; select bank1
  7450  0577  0839               	movf	(_voltage+1)^(0+128),w
  7451  0578  0020               	movlb	0	; select bank0
  7452  0579  00A1               	movwf	LCDWriteInt@value+1
  7453  057A  0021               	movlb	1	; select bank1
  7454  057B  0838               	movf	_voltage^(0+128),w
  7455  057C  0020               	movlb	0	; select bank0
  7456  057D  00A0               	movwf	LCDWriteInt@value
  7457  057E  3004               	movlw	4
  7458  057F  00D8               	movwf	??_main
  7459  0580  0858               	movf	??_main,w
  7460  0581  00A2               	movwf	LCDWriteInt@fieldLength
  7461  0582  3002               	movlw	2
  7462  0583  00D9               	movwf	??_main+1
  7463  0584  0859               	movf	??_main+1,w
  7464  0585  00A3               	movwf	LCDWriteInt@numPlaces
  7465  0586  01A4               	clrf	LCDWriteInt@sign
  7466  0587  318B  23E6  3182   	fcall	_LCDWriteInt
  7467                           
  7468                           ;main.c: 242: LCDWriteCharacter('V');
  7469  058A  3056               	movlw	86
  7470  058B  3196  2685  3182   	fcall	_LCDWriteCharacter
  7471                           
  7472                           ;main.c: 244: { gotoXY(52,1); LCDWriteInt(Vref[0],4, 2, 0);};
  7473  058E  01F5               	clrf	gotoXY@y
  7474  058F  0AF5               	incf	gotoXY@y,f
  7475  0590  3034               	movlw	52
  7476  0591  3193  2302  3182   	fcall	_gotoXY
  7477  0594  0020               	movlb	0	; select bank0
  7478  0595  085B               	movf	_Vref+1,w
  7479  0596  00A1               	movwf	LCDWriteInt@value+1
  7480  0597  085A               	movf	_Vref,w
  7481  0598  00A0               	movwf	LCDWriteInt@value
  7482  0599  3004               	movlw	4
  7483  059A  00D8               	movwf	??_main
  7484  059B  0858               	movf	??_main,w
  7485  059C  00A2               	movwf	LCDWriteInt@fieldLength
  7486  059D  3002               	movlw	2
  7487  059E  00D9               	movwf	??_main+1
  7488  059F  0859               	movf	??_main+1,w
  7489  05A0  00A3               	movwf	LCDWriteInt@numPlaces
  7490  05A1  01A4               	clrf	LCDWriteInt@sign
  7491  05A2  318B  23E6  3182   	fcall	_LCDWriteInt
  7492                           
  7493                           ;main.c: 245: LCDWriteCharacter('V');
  7494  05A5  3056               	movlw	86
  7495  05A6  3196  2685  3182   	fcall	_LCDWriteCharacter
  7496                           
  7497                           ;main.c: 247: { gotoXY(80,1); LCDWriteInt(Imode[0],1, 0, 0);};
  7498  05A9  01F5               	clrf	gotoXY@y
  7499  05AA  0AF5               	incf	gotoXY@y,f
  7500  05AB  3050               	movlw	80
  7501  05AC  3193  2302  3182   	fcall	_gotoXY
  7502  05AF  0020               	movlb	0	; select bank0
  7503  05B0  0862               	movf	_Imode,w
  7504  05B1  00A0               	movwf	LCDWriteInt@value
  7505  05B2  01A1               	clrf	LCDWriteInt@value+1
  7506  05B3  1BA0               	btfsc	LCDWriteInt@value,7
  7507  05B4  03A1               	decf	LCDWriteInt@value+1,f
  7508  05B5  01A2               	clrf	LCDWriteInt@fieldLength
  7509  05B6  0AA2               	incf	LCDWriteInt@fieldLength,f
  7510  05B7  01A3               	clrf	LCDWriteInt@numPlaces
  7511  05B8  01A4               	clrf	LCDWriteInt@sign
  7512  05B9  318B  23E6  3182   	fcall	_LCDWriteInt
  7513                           
  7514                           ;main.c: 249: { gotoXY(0,2); LCDWriteInt(current[2],3, 1, 0);};
  7515  05BC  3002               	movlw	2
  7516  05BD  0020               	movlb	0	; select bank0
  7517  05BE  00D8               	movwf	??_main
  7518  05BF  0858               	movf	??_main,w
  7519  05C0  00F5               	movwf	gotoXY@y
  7520  05C1  3000               	movlw	0
  7521  05C2  3193  2302  3182   	fcall	_gotoXY
  7522  05C5  0021               	movlb	1	; select bank1
  7523  05C6  0835               	movf	((_current+1)^(0+128)+4),w
  7524  05C7  0020               	movlb	0	; select bank0
  7525  05C8  00A1               	movwf	LCDWriteInt@value+1
  7526  05C9  0021               	movlb	1	; select bank1
  7527  05CA  0834               	movf	(_current^(0+128)+4),w
  7528  05CB  0020               	movlb	0	; select bank0
  7529  05CC  00A0               	movwf	LCDWriteInt@value
  7530  05CD  3003               	movlw	3
  7531  05CE  00D8               	movwf	??_main
  7532  05CF  0858               	movf	??_main,w
  7533  05D0  00A2               	movwf	LCDWriteInt@fieldLength
  7534  05D1  01A3               	clrf	LCDWriteInt@numPlaces
  7535  05D2  0AA3               	incf	LCDWriteInt@numPlaces,f
  7536  05D3  01A4               	clrf	LCDWriteInt@sign
  7537  05D4  318B  23E6  3182   	fcall	_LCDWriteInt
  7538                           
  7539                           ;main.c: 250: LCDWriteCharacter('A');
  7540  05D7  3041               	movlw	65
  7541  05D8  3196  2685  3182   	fcall	_LCDWriteCharacter
  7542                           
  7543                           ;main.c: 252: { gotoXY(26,2); LCDWriteInt(current[0],3, 1, 0);};
  7544  05DB  3002               	movlw	2
  7545  05DC  0020               	movlb	0	; select bank0
  7546  05DD  00D8               	movwf	??_main
  7547  05DE  0858               	movf	??_main,w
  7548  05DF  00F5               	movwf	gotoXY@y
  7549  05E0  301A               	movlw	26
  7550  05E1  3193  2302  3182   	fcall	_gotoXY
  7551  05E4  0021               	movlb	1	; select bank1
  7552  05E5  0831               	movf	(_current+1)^(0+128),w
  7553  05E6  0020               	movlb	0	; select bank0
  7554  05E7  00A1               	movwf	LCDWriteInt@value+1
  7555  05E8  0021               	movlb	1	; select bank1
  7556  05E9  0830               	movf	_current^(0+128),w
  7557  05EA  0020               	movlb	0	; select bank0
  7558  05EB  00A0               	movwf	LCDWriteInt@value
  7559  05EC  3003               	movlw	3
  7560  05ED  00D8               	movwf	??_main
  7561  05EE  0858               	movf	??_main,w
  7562  05EF  00A2               	movwf	LCDWriteInt@fieldLength
  7563  05F0  01A3               	clrf	LCDWriteInt@numPlaces
  7564  05F1  0AA3               	incf	LCDWriteInt@numPlaces,f
  7565  05F2  01A4               	clrf	LCDWriteInt@sign
  7566  05F3  318B  23E6  3182   	fcall	_LCDWriteInt
  7567                           
  7568                           ;main.c: 253: LCDWriteCharacter('A');
  7569  05F6  3041               	movlw	65
  7570  05F7  3196  2685  3182   	fcall	_LCDWriteCharacter
  7571                           
  7572                           ;main.c: 255: { gotoXY(52,2); LCDWriteInt(Iref[0],3, 1, 0);};
  7573  05FA  3002               	movlw	2
  7574  05FB  0020               	movlb	0	; select bank0
  7575  05FC  00D8               	movwf	??_main
  7576  05FD  0858               	movf	??_main,w
  7577  05FE  00F5               	movwf	gotoXY@y
  7578  05FF  3034               	movlw	52
  7579  0600  3193  2302  3182   	fcall	_gotoXY
  7580  0603  0021               	movlb	1	; select bank1
  7581  0604  0841               	movf	(_Iref+1)^(0+128),w
  7582  0605  0020               	movlb	0	; select bank0
  7583  0606  00A1               	movwf	LCDWriteInt@value+1
  7584  0607  0021               	movlb	1	; select bank1
  7585  0608  0840               	movf	_Iref^(0+128),w
  7586  0609  0020               	movlb	0	; select bank0
  7587  060A  00A0               	movwf	LCDWriteInt@value
  7588  060B  3003               	movlw	3
  7589  060C  00D8               	movwf	??_main
  7590  060D  0858               	movf	??_main,w
  7591  060E  00A2               	movwf	LCDWriteInt@fieldLength
  7592  060F  01A3               	clrf	LCDWriteInt@numPlaces
  7593  0610  0AA3               	incf	LCDWriteInt@numPlaces,f
  7594  0611  01A4               	clrf	LCDWriteInt@sign
  7595  0612  318B  23E6  3182   	fcall	_LCDWriteInt
  7596                           
  7597                           ;main.c: 256: LCDWriteCharacter('A');
  7598  0615  3041               	movlw	65
  7599  0616  3196  2685  3182   	fcall	_LCDWriteCharacter
  7600                           
  7601                           ;main.c: 258: { gotoXY(80,2); LCDWriteInt(batteryState[0],1, 0, 0);};
  7602  0619  3002               	movlw	2
  7603  061A  0020               	movlb	0	; select bank0
  7604  061B  00D8               	movwf	??_main
  7605  061C  0858               	movf	??_main,w
  7606  061D  00F5               	movwf	gotoXY@y
  7607  061E  3050               	movlw	80
  7608  061F  3193  2302  3182   	fcall	_gotoXY
  7609  0622  0020               	movlb	0	; select bank0
  7610  0623  0864               	movf	_batteryState,w
  7611  0624  00D8               	movwf	??_main
  7612  0625  01D9               	clrf	??_main+1
  7613  0626  0858               	movf	??_main,w
  7614  0627  00A0               	movwf	LCDWriteInt@value
  7615  0628  0859               	movf	??_main+1,w
  7616  0629  00A1               	movwf	LCDWriteInt@value+1
  7617  062A  01A2               	clrf	LCDWriteInt@fieldLength
  7618  062B  0AA2               	incf	LCDWriteInt@fieldLength,f
  7619  062C  01A3               	clrf	LCDWriteInt@numPlaces
  7620  062D  01A4               	clrf	LCDWriteInt@sign
  7621  062E  318B  23E6  3182   	fcall	_LCDWriteInt
  7622                           
  7623                           ;main.c: 260: { gotoXY(0,3); LCDWriteInt(voltage[3],4, 2, 0);};
  7624  0631  3003               	movlw	3
  7625  0632  0020               	movlb	0	; select bank0
  7626  0633  00D8               	movwf	??_main
  7627  0634  0858               	movf	??_main,w
  7628  0635  00F5               	movwf	gotoXY@y
  7629  0636  3000               	movlw	0
  7630  0637  3193  2302  3182   	fcall	_gotoXY
  7631  063A  0021               	movlb	1	; select bank1
  7632  063B  083F               	movf	((_voltage+1)^(0+128)+6),w
  7633  063C  0020               	movlb	0	; select bank0
  7634  063D  00A1               	movwf	LCDWriteInt@value+1
  7635  063E  0021               	movlb	1	; select bank1
  7636  063F  083E               	movf	(_voltage^(0+128)+6),w
  7637  0640  0020               	movlb	0	; select bank0
  7638  0641  00A0               	movwf	LCDWriteInt@value
  7639  0642  3004               	movlw	4
  7640  0643  00D8               	movwf	??_main
  7641  0644  0858               	movf	??_main,w
  7642  0645  00A2               	movwf	LCDWriteInt@fieldLength
  7643  0646  3002               	movlw	2
  7644  0647  00D9               	movwf	??_main+1
  7645  0648  0859               	movf	??_main+1,w
  7646  0649  00A3               	movwf	LCDWriteInt@numPlaces
  7647  064A  01A4               	clrf	LCDWriteInt@sign
  7648  064B  318B  23E6  3182   	fcall	_LCDWriteInt
  7649                           
  7650                           ;main.c: 261: LCDWriteCharacter('V');
  7651  064E  3056               	movlw	86
  7652  064F  3196  2685  3182   	fcall	_LCDWriteCharacter
  7653                           
  7654                           ;main.c: 263: { gotoXY(26,3); LCDWriteInt(voltage[1],4, 2, 0);};
  7655  0652  3003               	movlw	3
  7656  0653  0020               	movlb	0	; select bank0
  7657  0654  00D8               	movwf	??_main
  7658  0655  0858               	movf	??_main,w
  7659  0656  00F5               	movwf	gotoXY@y
  7660  0657  301A               	movlw	26
  7661  0658  3193  2302  3182   	fcall	_gotoXY
  7662  065B  0021               	movlb	1	; select bank1
  7663  065C  083B               	movf	((_voltage+1)^(0+128)+2),w
  7664  065D  0020               	movlb	0	; select bank0
  7665  065E  00A1               	movwf	LCDWriteInt@value+1
  7666  065F  0021               	movlb	1	; select bank1
  7667  0660  083A               	movf	(_voltage^(0+128)+2),w
  7668  0661  0020               	movlb	0	; select bank0
  7669  0662  00A0               	movwf	LCDWriteInt@value
  7670  0663  3004               	movlw	4
  7671  0664  00D8               	movwf	??_main
  7672  0665  0858               	movf	??_main,w
  7673  0666  00A2               	movwf	LCDWriteInt@fieldLength
  7674  0667  3002               	movlw	2
  7675  0668  00D9               	movwf	??_main+1
  7676  0669  0859               	movf	??_main+1,w
  7677  066A  00A3               	movwf	LCDWriteInt@numPlaces
  7678  066B  01A4               	clrf	LCDWriteInt@sign
  7679  066C  318B  23E6  3182   	fcall	_LCDWriteInt
  7680                           
  7681                           ;main.c: 264: LCDWriteCharacter('V');
  7682  066F  3056               	movlw	86
  7683  0670  3196  2685  3182   	fcall	_LCDWriteCharacter
  7684                           
  7685                           ;main.c: 266: { gotoXY(52,3); LCDWriteInt(Vref[1],4, 2, 0);};
  7686  0673  3003               	movlw	3
  7687  0674  0020               	movlb	0	; select bank0
  7688  0675  00D8               	movwf	??_main
  7689  0676  0858               	movf	??_main,w
  7690  0677  00F5               	movwf	gotoXY@y
  7691  0678  3034               	movlw	52
  7692  0679  3193  2302  3182   	fcall	_gotoXY
  7693  067C  0020               	movlb	0	; select bank0
  7694  067D  085D               	movf	_Vref+3,w
  7695  067E  00A1               	movwf	LCDWriteInt@value+1
  7696  067F  085C               	movf	_Vref+2,w
  7697  0680  00A0               	movwf	LCDWriteInt@value
  7698  0681  3004               	movlw	4
  7699  0682  00D8               	movwf	??_main
  7700  0683  0858               	movf	??_main,w
  7701  0684  00A2               	movwf	LCDWriteInt@fieldLength
  7702  0685  3002               	movlw	2
  7703  0686  00D9               	movwf	??_main+1
  7704  0687  0859               	movf	??_main+1,w
  7705  0688  00A3               	movwf	LCDWriteInt@numPlaces
  7706  0689  01A4               	clrf	LCDWriteInt@sign
  7707  068A  318B  23E6  3182   	fcall	_LCDWriteInt
  7708                           
  7709                           ;main.c: 267: LCDWriteCharacter('V');
  7710  068D  3056               	movlw	86
  7711  068E  3196  2685  3182   	fcall	_LCDWriteCharacter
  7712                           
  7713                           ;main.c: 269: { gotoXY(80,3); LCDWriteInt(Imode[1],1, 0, 0);};
  7714  0691  3003               	movlw	3
  7715  0692  0020               	movlb	0	; select bank0
  7716  0693  00D8               	movwf	??_main
  7717  0694  0858               	movf	??_main,w
  7718  0695  00F5               	movwf	gotoXY@y
  7719  0696  3050               	movlw	80
  7720  0697  3193  2302  3182   	fcall	_gotoXY
  7721  069A  0020               	movlb	0	; select bank0
  7722  069B  0863               	movf	_Imode+1,w
  7723  069C  00A0               	movwf	LCDWriteInt@value
  7724  069D  01A1               	clrf	LCDWriteInt@value+1
  7725  069E  1BA0               	btfsc	LCDWriteInt@value,7
  7726  069F  03A1               	decf	LCDWriteInt@value+1,f
  7727  06A0  01A2               	clrf	LCDWriteInt@fieldLength
  7728  06A1  0AA2               	incf	LCDWriteInt@fieldLength,f
  7729  06A2  01A3               	clrf	LCDWriteInt@numPlaces
  7730  06A3  01A4               	clrf	LCDWriteInt@sign
  7731  06A4  318B  23E6  3182   	fcall	_LCDWriteInt
  7732                           
  7733                           ;main.c: 271: { gotoXY(0,4); LCDWriteInt(current[3],3, 1, 0);};
  7734  06A7  3004               	movlw	4
  7735  06A8  0020               	movlb	0	; select bank0
  7736  06A9  00D8               	movwf	??_main
  7737  06AA  0858               	movf	??_main,w
  7738  06AB  00F5               	movwf	gotoXY@y
  7739  06AC  3000               	movlw	0
  7740  06AD  3193  2302  3182   	fcall	_gotoXY
  7741  06B0  0021               	movlb	1	; select bank1
  7742  06B1  0837               	movf	((_current+1)^(0+128)+6),w
  7743  06B2  0020               	movlb	0	; select bank0
  7744  06B3  00A1               	movwf	LCDWriteInt@value+1
  7745  06B4  0021               	movlb	1	; select bank1
  7746  06B5  0836               	movf	(_current^(0+128)+6),w
  7747  06B6  0020               	movlb	0	; select bank0
  7748  06B7  00A0               	movwf	LCDWriteInt@value
  7749  06B8  3003               	movlw	3
  7750  06B9  00D8               	movwf	??_main
  7751  06BA  0858               	movf	??_main,w
  7752  06BB  00A2               	movwf	LCDWriteInt@fieldLength
  7753  06BC  01A3               	clrf	LCDWriteInt@numPlaces
  7754  06BD  0AA3               	incf	LCDWriteInt@numPlaces,f
  7755  06BE  01A4               	clrf	LCDWriteInt@sign
  7756  06BF  318B  23E6  3182   	fcall	_LCDWriteInt
  7757                           
  7758                           ;main.c: 272: LCDWriteCharacter('A');
  7759  06C2  3041               	movlw	65
  7760  06C3  3196  2685  3182   	fcall	_LCDWriteCharacter
  7761                           
  7762                           ;main.c: 274: { gotoXY(26,4); LCDWriteInt(current[1],3, 1, 0);};
  7763  06C6  3004               	movlw	4
  7764  06C7  0020               	movlb	0	; select bank0
  7765  06C8  00D8               	movwf	??_main
  7766  06C9  0858               	movf	??_main,w
  7767  06CA  00F5               	movwf	gotoXY@y
  7768  06CB  301A               	movlw	26
  7769  06CC  3193  2302  3182   	fcall	_gotoXY
  7770  06CF  0021               	movlb	1	; select bank1
  7771  06D0  0833               	movf	((_current+1)^(0+128)+2),w
  7772  06D1  0020               	movlb	0	; select bank0
  7773  06D2  00A1               	movwf	LCDWriteInt@value+1
  7774  06D3  0021               	movlb	1	; select bank1
  7775  06D4  0832               	movf	(_current^(0+128)+2),w
  7776  06D5  0020               	movlb	0	; select bank0
  7777  06D6  00A0               	movwf	LCDWriteInt@value
  7778  06D7  3003               	movlw	3
  7779  06D8  00D8               	movwf	??_main
  7780  06D9  0858               	movf	??_main,w
  7781  06DA  00A2               	movwf	LCDWriteInt@fieldLength
  7782  06DB  01A3               	clrf	LCDWriteInt@numPlaces
  7783  06DC  0AA3               	incf	LCDWriteInt@numPlaces,f
  7784  06DD  01A4               	clrf	LCDWriteInt@sign
  7785  06DE  318B  23E6  3182   	fcall	_LCDWriteInt
  7786                           
  7787                           ;main.c: 275: LCDWriteCharacter('A');
  7788  06E1  3041               	movlw	65
  7789  06E2  3196  2685  3182   	fcall	_LCDWriteCharacter
  7790                           
  7791                           ;main.c: 277: { gotoXY(52,4); LCDWriteInt(Iref[1],3, 1, 0);};
  7792  06E5  3004               	movlw	4
  7793  06E6  0020               	movlb	0	; select bank0
  7794  06E7  00D8               	movwf	??_main
  7795  06E8  0858               	movf	??_main,w
  7796  06E9  00F5               	movwf	gotoXY@y
  7797  06EA  3034               	movlw	52
  7798  06EB  3193  2302  3182   	fcall	_gotoXY
  7799  06EE  0021               	movlb	1	; select bank1
  7800  06EF  0843               	movf	((_Iref+1)^(0+128)+2),w
  7801  06F0  0020               	movlb	0	; select bank0
  7802  06F1  00A1               	movwf	LCDWriteInt@value+1
  7803  06F2  0021               	movlb	1	; select bank1
  7804  06F3  0842               	movf	(_Iref^(0+128)+2),w
  7805  06F4  0020               	movlb	0	; select bank0
  7806  06F5  00A0               	movwf	LCDWriteInt@value
  7807  06F6  3003               	movlw	3
  7808  06F7  00D8               	movwf	??_main
  7809  06F8  0858               	movf	??_main,w
  7810  06F9  00A2               	movwf	LCDWriteInt@fieldLength
  7811  06FA  01A3               	clrf	LCDWriteInt@numPlaces
  7812  06FB  0AA3               	incf	LCDWriteInt@numPlaces,f
  7813  06FC  01A4               	clrf	LCDWriteInt@sign
  7814  06FD  318B  23E6  3182   	fcall	_LCDWriteInt
  7815                           
  7816                           ;main.c: 278: LCDWriteCharacter('A');
  7817  0700  3041               	movlw	65
  7818  0701  3196  2685  3182   	fcall	_LCDWriteCharacter
  7819                           
  7820                           ;main.c: 280: { gotoXY(80,4); LCDWriteInt(batteryState[1],1, 0, 0);};
  7821  0704  3004               	movlw	4
  7822  0705  0020               	movlb	0	; select bank0
  7823  0706  00D8               	movwf	??_main
  7824  0707  0858               	movf	??_main,w
  7825  0708  00F5               	movwf	gotoXY@y
  7826  0709  3050               	movlw	80
  7827  070A  3193  2302  3182   	fcall	_gotoXY
  7828  070D  0020               	movlb	0	; select bank0
  7829  070E  0865               	movf	_batteryState+1,w
  7830  070F  00D8               	movwf	??_main
  7831  0710  01D9               	clrf	??_main+1
  7832  0711  0858               	movf	??_main,w
  7833  0712  00A0               	movwf	LCDWriteInt@value
  7834  0713  0859               	movf	??_main+1,w
  7835  0714  00A1               	movwf	LCDWriteInt@value+1
  7836  0715  01A2               	clrf	LCDWriteInt@fieldLength
  7837  0716  0AA2               	incf	LCDWriteInt@fieldLength,f
  7838  0717  01A3               	clrf	LCDWriteInt@numPlaces
  7839  0718  01A4               	clrf	LCDWriteInt@sign
  7840  0719  318B  23E6  3182   	fcall	_LCDWriteInt
  7841                           
  7842                           ;main.c: 282: { gotoXY(0,5); LCDWriteInt(dutyCycle6,4, 0, 0);};
  7843  071C  3005               	movlw	5
  7844  071D  0020               	movlb	0	; select bank0
  7845  071E  00D8               	movwf	??_main
  7846  071F  0858               	movf	??_main,w
  7847  0720  00F5               	movwf	gotoXY@y
  7848  0721  3000               	movlw	0
  7849  0722  3193  2302  3182   	fcall	_gotoXY
  7850  0725  0021               	movlb	1	; select bank1
  7851  0726  086A               	movf	(main@dutyCycle6+1)^(0+128),w
  7852  0727  0020               	movlb	0	; select bank0
  7853  0728  00A1               	movwf	LCDWriteInt@value+1
  7854  0729  0021               	movlb	1	; select bank1
  7855  072A  0869               	movf	main@dutyCycle6^(0+128),w
  7856  072B  0020               	movlb	0	; select bank0
  7857  072C  00A0               	movwf	LCDWriteInt@value
  7858  072D  3004               	movlw	4
  7859  072E  00D8               	movwf	??_main
  7860  072F  0858               	movf	??_main,w
  7861  0730  00A2               	movwf	LCDWriteInt@fieldLength
  7862  0731  01A3               	clrf	LCDWriteInt@numPlaces
  7863  0732  01A4               	clrf	LCDWriteInt@sign
  7864  0733  318B  23E6  3182   	fcall	_LCDWriteInt
  7865                           
  7866                           ;main.c: 283: { gotoXY(20,5); LCDWriteInt(VHoldMode[0],2, 0, 0);};
  7867  0736  3005               	movlw	5
  7868  0737  0020               	movlb	0	; select bank0
  7869  0738  00D8               	movwf	??_main
  7870  0739  0858               	movf	??_main,w
  7871  073A  00F5               	movwf	gotoXY@y
  7872  073B  3014               	movlw	20
  7873  073C  3193  2302  3182   	fcall	_gotoXY
  7874  073F  0020               	movlb	0	; select bank0
  7875  0740  0860               	movf	_VHoldMode,w
  7876  0741  00A0               	movwf	LCDWriteInt@value
  7877  0742  01A1               	clrf	LCDWriteInt@value+1
  7878  0743  1BA0               	btfsc	LCDWriteInt@value,7
  7879  0744  03A1               	decf	LCDWriteInt@value+1,f
  7880  0745  3002               	movlw	2
  7881  0746  00D8               	movwf	??_main
  7882  0747  0858               	movf	??_main,w
  7883  0748  00A2               	movwf	LCDWriteInt@fieldLength
  7884  0749  01A3               	clrf	LCDWriteInt@numPlaces
  7885  074A  01A4               	clrf	LCDWriteInt@sign
  7886  074B  318B  23E6  3182   	fcall	_LCDWriteInt
  7887                           
  7888                           ;main.c: 284: LCDWriteCharacter(' ');
  7889  074E  3020               	movlw	32
  7890  074F  3196  2685  3182   	fcall	_LCDWriteCharacter
  7891                           
  7892                           ;main.c: 285: { gotoXY(32,5); LCDWriteInt(dutyCycle7,4, 0, 0);};
  7893  0752  3005               	movlw	5
  7894  0753  0020               	movlb	0	; select bank0
  7895  0754  00D8               	movwf	??_main
  7896  0755  0858               	movf	??_main,w
  7897  0756  00F5               	movwf	gotoXY@y
  7898  0757  3020               	movlw	32
  7899  0758  3193  2302  3182   	fcall	_gotoXY
  7900  075B  0021               	movlb	1	; select bank1
  7901  075C  086C               	movf	(main@dutyCycle7+1)^(0+128),w
  7902  075D  0020               	movlb	0	; select bank0
  7903  075E  00A1               	movwf	LCDWriteInt@value+1
  7904  075F  0021               	movlb	1	; select bank1
  7905  0760  086B               	movf	main@dutyCycle7^(0+128),w
  7906  0761  0020               	movlb	0	; select bank0
  7907  0762  00A0               	movwf	LCDWriteInt@value
  7908  0763  3004               	movlw	4
  7909  0764  00D8               	movwf	??_main
  7910  0765  0858               	movf	??_main,w
  7911  0766  00A2               	movwf	LCDWriteInt@fieldLength
  7912  0767  01A3               	clrf	LCDWriteInt@numPlaces
  7913  0768  01A4               	clrf	LCDWriteInt@sign
  7914  0769  318B  23E6  3182   	fcall	_LCDWriteInt
  7915                           
  7916                           ;main.c: 286: { gotoXY(52,5); LCDWriteInt(VHoldMode[1],2, 0, 0);};
  7917  076C  3005               	movlw	5
  7918  076D  0020               	movlb	0	; select bank0
  7919  076E  00D8               	movwf	??_main
  7920  076F  0858               	movf	??_main,w
  7921  0770  00F5               	movwf	gotoXY@y
  7922  0771  3034               	movlw	52
  7923  0772  3193  2302  3182   	fcall	_gotoXY
  7924  0775  0020               	movlb	0	; select bank0
  7925  0776  0861               	movf	_VHoldMode+1,w
  7926  0777  00A0               	movwf	LCDWriteInt@value
  7927  0778  01A1               	clrf	LCDWriteInt@value+1
  7928  0779  1BA0               	btfsc	LCDWriteInt@value,7
  7929  077A  03A1               	decf	LCDWriteInt@value+1,f
  7930  077B  3002               	movlw	2
  7931  077C  00D8               	movwf	??_main
  7932  077D  0858               	movf	??_main,w
  7933  077E  00A2               	movwf	LCDWriteInt@fieldLength
  7934  077F  01A3               	clrf	LCDWriteInt@numPlaces
  7935  0780  01A4               	clrf	LCDWriteInt@sign
  7936  0781  318B  23E6  3182   	fcall	_LCDWriteInt
  7937                           
  7938                           ;main.c: 287: LCDWriteCharacter(' ');
  7939  0784  3020               	movlw	32
  7940  0785  3196  2685  3182   	fcall	_LCDWriteCharacter
  7941                           
  7942                           ;main.c: 288: { gotoXY(64,5); LCDWriteInt(batteryTemp,3, 1, 0);};
  7943  0788  3005               	movlw	5
  7944  0789  0020               	movlb	0	; select bank0
  7945  078A  00D8               	movwf	??_main
  7946  078B  0858               	movf	??_main,w
  7947  078C  00F5               	movwf	gotoXY@y
  7948  078D  3040               	movlw	64
  7949  078E  3193  2302  3182   	fcall	_gotoXY
  7950  0791  0020               	movlb	0	; select bank0
  7951  0792  086D               	movf	_batteryTemp+1,w
  7952  0793  00A1               	movwf	LCDWriteInt@value+1
  7953  0794  086C               	movf	_batteryTemp,w
  7954  0795  00A0               	movwf	LCDWriteInt@value
  7955  0796  3003               	movlw	3
  7956  0797  00D8               	movwf	??_main
  7957  0798  0858               	movf	??_main,w
  7958  0799  00A2               	movwf	LCDWriteInt@fieldLength
  7959  079A  01A3               	clrf	LCDWriteInt@numPlaces
  7960  079B  0AA3               	incf	LCDWriteInt@numPlaces,f
  7961  079C  01A4               	clrf	LCDWriteInt@sign
  7962  079D  318B  23E6  3182   	fcall	_LCDWriteInt
  7963                           
  7964                           ;main.c: 358: if(batteryState[0] > FINISHED)
  7965  07A0  3003               	movlw	3
  7966  07A1  0020               	movlb	0	; select bank0
  7967  07A2  0264               	subwf	_batteryState,w
  7968  07A3  1C03               	skipc
  7969  07A4  2FA9               	goto	l3375
  7970                           
  7971                           ;main.c: 359: {
  7972                           ;main.c: 360: cc_cv_mode(0);
  7973  07A5  3000               	movlw	0
  7974  07A6  318D  2586  3182   	fcall	_cc_cv_mode
  7975  07A9                     l3375:	
  7976                           
  7977                           ;main.c: 361: }
  7978                           ;main.c: 362: if(batteryState[1] > FINISHED)
  7979  07A9  3003               	movlw	3
  7980  07AA  0020               	movlb	0	; select bank0
  7981  07AB  0265               	subwf	_batteryState+1,w
  7982  07AC  1C03               	skipc
  7983  07AD  2FB2               	goto	l3379
  7984                           
  7985                           ;main.c: 363: {
  7986                           ;main.c: 364: cc_cv_mode(1);
  7987  07AE  3001               	movlw	1
  7988  07AF  318D  2586  3182   	fcall	_cc_cv_mode
  7989  07B2                     l3379:	
  7990                           
  7991                           ;main.c: 365: }
  7992                           ;main.c: 366: slowLoop=0;
  7993  07B2  0021               	movlb	1	; select bank1
  7994  07B3  01E1               	clrf	main@slowLoop^(0+128)
  7995  07B4  2AEE               	goto	l3115
  7996  07B5                     __end_of_main:	
  7997                           
  7998                           	psect	text1
  7999  0C9F                     __ptext1:	
  8000 ;; *************** function _tempCalc *****************
  8001 ;; Defined at:
  8002 ;;		line 4 in file "tempCalc.c"
  8003 ;; Parameters:    Size  Location     Type
  8004 ;;  analogValue     2   45[BANK0 ] int 
  8005 ;; Auto vars:     Size  Location     Type
  8006 ;;  steinhart       3   53[BANK0 ] float 
  8007 ;;  R               3   47[BANK0 ] float 
  8008 ;; Return value:  Size  Location     Type
  8009 ;;                  2   45[BANK0 ] int 
  8010 ;; Registers used:
  8011 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8012 ;; Tracked objects:
  8013 ;;		On entry : 0/0
  8014 ;;		On exit  : 0/0
  8015 ;;		Unchanged: 0/0
  8016 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8017 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8018 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8019 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8020 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8021 ;;Total ram usage:       11 bytes
  8022 ;; Hardware stack levels used:    1
  8023 ;; Hardware stack levels required when called:    4
  8024 ;; This function calls:
  8025 ;;		___awtoft
  8026 ;;		___ftadd
  8027 ;;		___ftdiv
  8028 ;;		___ftmul
  8029 ;;		___ftsub
  8030 ;;		___fttol
  8031 ;;		_log
  8032 ;; This function is called by:
  8033 ;;		_main
  8034 ;; This function uses a non-reentrant model
  8035 ;;
  8036                           
  8037                           
  8038                           ;psect for function _tempCalc
  8039  0C9F                     _tempCalc:	
  8040                           
  8041                           ;tempCalc.c: 6: float R, steinhart;
  8042                           ;tempCalc.c: 8: R = 9890/(1023/(float)analogValue - 1);
  8043                           
  8044                           ;incstack = 0
  8045                           ; Regs used in _tempCalc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8046  0C9F  3000               	movlw	0
  8047  0CA0  0020               	movlb	0	; select bank0
  8048  0CA1  00B0               	movwf	___ftadd@f1
  8049  0CA2  3080               	movlw	128
  8050  0CA3  00B1               	movwf	___ftadd@f1+1
  8051  0CA4  30BF               	movlw	191
  8052  0CA5  00B2               	movwf	___ftadd@f1+2
  8053  0CA6  084E               	movf	tempCalc@analogValue+1,w
  8054  0CA7  00F9               	movwf	___awtoft@c+1
  8055  0CA8  084D               	movf	tempCalc@analogValue,w
  8056  0CA9  00F8               	movwf	___awtoft@c
  8057  0CAA  3193  23D7  318C   	fcall	___awtoft
  8058  0CAD  0878               	movf	?___awtoft,w
  8059  0CAE  0020               	movlb	0	; select bank0
  8060  0CAF  00A0               	movwf	___ftdiv@f2
  8061  0CB0  0879               	movf	?___awtoft+1,w
  8062  0CB1  00A1               	movwf	___ftdiv@f2+1
  8063  0CB2  087A               	movf	?___awtoft+2,w
  8064  0CB3  00A2               	movwf	___ftdiv@f2+2
  8065  0CB4  30C0               	movlw	192
  8066  0CB5  00A3               	movwf	___ftdiv@f1
  8067  0CB6  307F               	movlw	127
  8068  0CB7  00A4               	movwf	___ftdiv@f1+1
  8069  0CB8  3044               	movlw	68
  8070  0CB9  00A5               	movwf	___ftdiv@f1+2
  8071  0CBA  3189  21D9  318C   	fcall	___ftdiv
  8072  0CBD  0020               	movlb	0	; select bank0
  8073  0CBE  0820               	movf	?___ftdiv,w
  8074  0CBF  00B3               	movwf	___ftadd@f2
  8075  0CC0  0821               	movf	?___ftdiv+1,w
  8076  0CC1  00B4               	movwf	___ftadd@f2+1
  8077  0CC2  0822               	movf	?___ftdiv+2,w
  8078  0CC3  00B5               	movwf	___ftadd@f2+2
  8079  0CC4  3180  2030  318C   	fcall	___ftadd
  8080  0CC7  0020               	movlb	0	; select bank0
  8081  0CC8  0830               	movf	?___ftadd,w
  8082  0CC9  00D2               	movwf	_tempCalc$1187
  8083  0CCA  0831               	movf	?___ftadd+1,w
  8084  0CCB  00D3               	movwf	_tempCalc$1187+1
  8085  0CCC  0832               	movf	?___ftadd+2,w
  8086  0CCD  00D4               	movwf	_tempCalc$1187+2
  8087                           
  8088                           ;tempCalc.c: 6: float R, steinhart;
  8089                           ;tempCalc.c: 8: R = 9890/(1023/(float)analogValue - 1);
  8090  0CCE  0852               	movf	_tempCalc$1187,w
  8091  0CCF  00A0               	movwf	___ftdiv@f2
  8092  0CD0  0853               	movf	_tempCalc$1187+1,w
  8093  0CD1  00A1               	movwf	___ftdiv@f2+1
  8094  0CD2  0854               	movf	_tempCalc$1187+2,w
  8095  0CD3  00A2               	movwf	___ftdiv@f2+2
  8096  0CD4  3088               	movlw	136
  8097  0CD5  00A3               	movwf	___ftdiv@f1
  8098  0CD6  301A               	movlw	26
  8099  0CD7  00A4               	movwf	___ftdiv@f1+1
  8100  0CD8  3046               	movlw	70
  8101  0CD9  00A5               	movwf	___ftdiv@f1+2
  8102  0CDA  3189  21D9  318C   	fcall	___ftdiv
  8103  0CDD  0020               	movlb	0	; select bank0
  8104  0CDE  0820               	movf	?___ftdiv,w
  8105  0CDF  00CF               	movwf	tempCalc@R
  8106  0CE0  0821               	movf	?___ftdiv+1,w
  8107  0CE1  00D0               	movwf	tempCalc@R+1
  8108  0CE2  0822               	movf	?___ftdiv+2,w
  8109  0CE3  00D1               	movwf	tempCalc@R+2
  8110                           
  8111                           ;tempCalc.c: 10: steinhart = R /9990;
  8112  0CE4  3018               	movlw	24
  8113  0CE5  00A0               	movwf	___ftdiv@f2
  8114  0CE6  301C               	movlw	28
  8115  0CE7  00A1               	movwf	___ftdiv@f2+1
  8116  0CE8  3046               	movlw	70
  8117  0CE9  00A2               	movwf	___ftdiv@f2+2
  8118  0CEA  084F               	movf	tempCalc@R,w
  8119  0CEB  00A3               	movwf	___ftdiv@f1
  8120  0CEC  0850               	movf	tempCalc@R+1,w
  8121  0CED  00A4               	movwf	___ftdiv@f1+1
  8122  0CEE  0851               	movf	tempCalc@R+2,w
  8123  0CEF  00A5               	movwf	___ftdiv@f1+2
  8124  0CF0  3189  21D9  318C   	fcall	___ftdiv
  8125  0CF3  0020               	movlb	0	; select bank0
  8126  0CF4  0820               	movf	?___ftdiv,w
  8127  0CF5  00D5               	movwf	tempCalc@steinhart
  8128  0CF6  0821               	movf	?___ftdiv+1,w
  8129  0CF7  00D6               	movwf	tempCalc@steinhart+1
  8130  0CF8  0822               	movf	?___ftdiv+2,w
  8131  0CF9  00D7               	movwf	tempCalc@steinhart+2
  8132                           
  8133                           ;tempCalc.c: 11: steinhart = log(steinhart);
  8134  0CFA  0855               	movf	tempCalc@steinhart,w
  8135  0CFB  00C7               	movwf	log@x
  8136  0CFC  0856               	movf	tempCalc@steinhart+1,w
  8137  0CFD  00C8               	movwf	log@x+1
  8138  0CFE  0857               	movf	tempCalc@steinhart+2,w
  8139  0CFF  00C9               	movwf	log@x+2
  8140  0D00  318A  2282  318C   	fcall	_log
  8141  0D03  0020               	movlb	0	; select bank0
  8142  0D04  0847               	movf	?_log,w
  8143  0D05  00D5               	movwf	tempCalc@steinhart
  8144  0D06  0848               	movf	?_log+1,w
  8145  0D07  00D6               	movwf	tempCalc@steinhart+1
  8146  0D08  0849               	movf	?_log+2,w
  8147  0D09  00D7               	movwf	tempCalc@steinhart+2
  8148                           
  8149                           ;tempCalc.c: 12: steinhart /= 4030;
  8150  0D0A  30E0               	movlw	224
  8151  0D0B  00A0               	movwf	___ftdiv@f2
  8152  0D0C  307B               	movlw	123
  8153  0D0D  00A1               	movwf	___ftdiv@f2+1
  8154  0D0E  3045               	movlw	69
  8155  0D0F  00A2               	movwf	___ftdiv@f2+2
  8156  0D10  0855               	movf	tempCalc@steinhart,w
  8157  0D11  00A3               	movwf	___ftdiv@f1
  8158  0D12  0856               	movf	tempCalc@steinhart+1,w
  8159  0D13  00A4               	movwf	___ftdiv@f1+1
  8160  0D14  0857               	movf	tempCalc@steinhart+2,w
  8161  0D15  00A5               	movwf	___ftdiv@f1+2
  8162  0D16  3189  21D9  318C   	fcall	___ftdiv
  8163  0D19  0020               	movlb	0	; select bank0
  8164  0D1A  0820               	movf	?___ftdiv,w
  8165  0D1B  00D5               	movwf	tempCalc@steinhart
  8166  0D1C  0821               	movf	?___ftdiv+1,w
  8167  0D1D  00D6               	movwf	tempCalc@steinhart+1
  8168  0D1E  0822               	movf	?___ftdiv+2,w
  8169  0D1F  00D7               	movwf	tempCalc@steinhart+2
  8170                           
  8171                           ;tempCalc.c: 15: steinhart += 1.0 / (25 + 273.15);
  8172  0D20  30CF               	movlw	207
  8173  0D21  00B0               	movwf	___ftadd@f1
  8174  0D22  305B               	movlw	91
  8175  0D23  00B1               	movwf	___ftadd@f1+1
  8176  0D24  303B               	movlw	59
  8177  0D25  00B2               	movwf	___ftadd@f1+2
  8178  0D26  0855               	movf	tempCalc@steinhart,w
  8179  0D27  00B3               	movwf	___ftadd@f2
  8180  0D28  0856               	movf	tempCalc@steinhart+1,w
  8181  0D29  00B4               	movwf	___ftadd@f2+1
  8182  0D2A  0857               	movf	tempCalc@steinhart+2,w
  8183  0D2B  00B5               	movwf	___ftadd@f2+2
  8184  0D2C  3180  2030  318C   	fcall	___ftadd
  8185  0D2F  0020               	movlb	0	; select bank0
  8186  0D30  0830               	movf	?___ftadd,w
  8187  0D31  00D5               	movwf	tempCalc@steinhart
  8188  0D32  0831               	movf	?___ftadd+1,w
  8189  0D33  00D6               	movwf	tempCalc@steinhart+1
  8190  0D34  0832               	movf	?___ftadd+2,w
  8191  0D35  00D7               	movwf	tempCalc@steinhart+2
  8192                           
  8193                           ;tempCalc.c: 16: steinhart = 1.0 / steinhart;
  8194  0D36  0855               	movf	tempCalc@steinhart,w
  8195  0D37  00A0               	movwf	___ftdiv@f2
  8196  0D38  0856               	movf	tempCalc@steinhart+1,w
  8197  0D39  00A1               	movwf	___ftdiv@f2+1
  8198  0D3A  0857               	movf	tempCalc@steinhart+2,w
  8199  0D3B  00A2               	movwf	___ftdiv@f2+2
  8200  0D3C  3000               	movlw	0
  8201  0D3D  00A3               	movwf	___ftdiv@f1
  8202  0D3E  3080               	movlw	128
  8203  0D3F  00A4               	movwf	___ftdiv@f1+1
  8204  0D40  303F               	movlw	63
  8205  0D41  00A5               	movwf	___ftdiv@f1+2
  8206  0D42  3189  21D9  318C   	fcall	___ftdiv
  8207  0D45  0020               	movlb	0	; select bank0
  8208  0D46  0820               	movf	?___ftdiv,w
  8209  0D47  00D5               	movwf	tempCalc@steinhart
  8210  0D48  0821               	movf	?___ftdiv+1,w
  8211  0D49  00D6               	movwf	tempCalc@steinhart+1
  8212  0D4A  0822               	movf	?___ftdiv+2,w
  8213  0D4B  00D7               	movwf	tempCalc@steinhart+2
  8214                           
  8215                           ;tempCalc.c: 17: steinhart -= 273.15;
  8216  0D4C  3093               	movlw	147
  8217  0D4D  00BD               	movwf	___ftsub@f2
  8218  0D4E  3088               	movlw	136
  8219  0D4F  00BE               	movwf	___ftsub@f2+1
  8220  0D50  3043               	movlw	67
  8221  0D51  00BF               	movwf	___ftsub@f2+2
  8222  0D52  0855               	movf	tempCalc@steinhart,w
  8223  0D53  00C0               	movwf	___ftsub@f1
  8224  0D54  0856               	movf	tempCalc@steinhart+1,w
  8225  0D55  00C1               	movwf	___ftsub@f1+1
  8226  0D56  0857               	movf	tempCalc@steinhart+2,w
  8227  0D57  00C2               	movwf	___ftsub@f1+2
  8228  0D58  3193  239A  318C   	fcall	___ftsub
  8229  0D5B  0020               	movlb	0	; select bank0
  8230  0D5C  083D               	movf	?___ftsub,w
  8231  0D5D  00D5               	movwf	tempCalc@steinhart
  8232  0D5E  083E               	movf	?___ftsub+1,w
  8233  0D5F  00D6               	movwf	tempCalc@steinhart+1
  8234  0D60  083F               	movf	?___ftsub+2,w
  8235  0D61  00D7               	movwf	tempCalc@steinhart+2
  8236                           
  8237                           ;tempCalc.c: 19: steinhart*=10;
  8238  0D62  3000               	movlw	0
  8239  0D63  00A0               	movwf	___ftmul@f1
  8240  0D64  3020               	movlw	32
  8241  0D65  00A1               	movwf	___ftmul@f1+1
  8242  0D66  3041               	movlw	65
  8243  0D67  00A2               	movwf	___ftmul@f1+2
  8244  0D68  0855               	movf	tempCalc@steinhart,w
  8245  0D69  00A3               	movwf	___ftmul@f2
  8246  0D6A  0856               	movf	tempCalc@steinhart+1,w
  8247  0D6B  00A4               	movwf	___ftmul@f2+1
  8248  0D6C  0857               	movf	tempCalc@steinhart+2,w
  8249  0D6D  00A5               	movwf	___ftmul@f2+2
  8250  0D6E  318B  2332  318C   	fcall	___ftmul
  8251  0D71  0020               	movlb	0	; select bank0
  8252  0D72  0820               	movf	?___ftmul,w
  8253  0D73  00D5               	movwf	tempCalc@steinhart
  8254  0D74  0821               	movf	?___ftmul+1,w
  8255  0D75  00D6               	movwf	tempCalc@steinhart+1
  8256  0D76  0822               	movf	?___ftmul+2,w
  8257  0D77  00D7               	movwf	tempCalc@steinhart+2
  8258                           
  8259                           ;tempCalc.c: 23: return (int16_t)steinhart;
  8260  0D78  0855               	movf	tempCalc@steinhart,w
  8261  0D79  00B0               	movwf	___fttol@f1
  8262  0D7A  0856               	movf	tempCalc@steinhart+1,w
  8263  0D7B  00B1               	movwf	___fttol@f1+1
  8264  0D7C  0857               	movf	tempCalc@steinhart+2,w
  8265  0D7D  00B2               	movwf	___fttol@f1+2
  8266  0D7E  3189  2152         	fcall	___fttol
  8267  0D80  0020               	movlb	0	; select bank0
  8268  0D81  0831               	movf	?___fttol+1,w
  8269  0D82  00CE               	movwf	?_tempCalc+1
  8270  0D83  0830               	movf	?___fttol,w
  8271  0D84  00CD               	movwf	?_tempCalc
  8272  0D85  0008               	return
  8273  0D86                     __end_of_tempCalc:	
  8274                           
  8275                           	psect	text2
  8276  0A82                     __ptext2:	
  8277 ;; *************** function _log *****************
  8278 ;; Defined at:
  8279 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\log.c"
  8280 ;; Parameters:    Size  Location     Type
  8281 ;;  x               3   39[BANK0 ] int 
  8282 ;; Auto vars:     Size  Location     Type
  8283 ;;  exponent        2   43[BANK0 ] int 
  8284 ;; Return value:  Size  Location     Type
  8285 ;;                  3   39[BANK0 ] int 
  8286 ;; Registers used:
  8287 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8288 ;; Tracked objects:
  8289 ;;		On entry : 0/0
  8290 ;;		On exit  : 0/0
  8291 ;;		Unchanged: 0/0
  8292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8293 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8294 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8295 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8296 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8297 ;;Total ram usage:        6 bytes
  8298 ;; Hardware stack levels used:    1
  8299 ;; Hardware stack levels required when called:    3
  8300 ;; This function calls:
  8301 ;;		___awtoft
  8302 ;;		___ftadd
  8303 ;;		___ftge
  8304 ;;		___ftmul
  8305 ;;		_eval_poly
  8306 ;;		_frexp
  8307 ;; This function is called by:
  8308 ;;		_tempCalc
  8309 ;; This function uses a non-reentrant model
  8310 ;;
  8311                           
  8312                           
  8313                           ;psect for function _log
  8314  0A82                     _log:	
  8315                           
  8316                           ;incstack = 0
  8317                           ; Regs used in _log: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8318  0A82  0020               	movlb	0	; select bank0
  8319  0A83  0847               	movf	log@x,w
  8320  0A84  00F0               	movwf	___ftge@ff1
  8321  0A85  0848               	movf	log@x+1,w
  8322  0A86  00F1               	movwf	___ftge@ff1+1
  8323  0A87  0849               	movf	log@x+2,w
  8324  0A88  00F2               	movwf	___ftge@ff1+2
  8325  0A89  3000               	movlw	0
  8326  0A8A  00F3               	movwf	___ftge@ff2
  8327  0A8B  3000               	movlw	0
  8328  0A8C  00F4               	movwf	___ftge@ff2+1
  8329  0A8D  3000               	movlw	0
  8330  0A8E  00F5               	movwf	___ftge@ff2+2
  8331  0A8F  3194  24EF  318A   	fcall	___ftge
  8332  0A92  1803               	btfsc	3,0
  8333  0A93  2AA1               	goto	l2665
  8334  0A94  3021               	movlw	33
  8335  0A95  0021               	movlb	1	; select bank1
  8336  0A96  00D0               	movwf	_errno^(0+128)
  8337  0A97  3000               	movlw	0
  8338  0A98  00D1               	movwf	(_errno^(0+128)+1)
  8339  0A99  3000               	movlw	0
  8340  0A9A  0020               	movlb	0	; select bank0
  8341  0A9B  00C7               	movwf	?_log
  8342  0A9C  3000               	movlw	0
  8343  0A9D  00C8               	movwf	?_log+1
  8344  0A9E  3000               	movlw	0
  8345  0A9F  00C9               	movwf	?_log+2
  8346  0AA0  0008               	return
  8347  0AA1                     l2665:	
  8348  0AA1  0020               	movlb	0	; select bank0
  8349  0AA2  0849               	movf	log@x+2,w
  8350  0AA3  0448               	iorwf	log@x+1,w
  8351  0AA4  0447               	iorwf	log@x,w
  8352  0AA5  1D03               	skipz
  8353  0AA6  2AB4               	goto	l2671
  8354  0AA7  3022               	movlw	34
  8355  0AA8  0021               	movlb	1	; select bank1
  8356  0AA9  00D0               	movwf	_errno^(0+128)
  8357  0AAA  3000               	movlw	0
  8358  0AAB  00D1               	movwf	(_errno^(0+128)+1)
  8359  0AAC  3000               	movlw	0
  8360  0AAD  0020               	movlb	0	; select bank0
  8361  0AAE  00C7               	movwf	?_log
  8362  0AAF  3000               	movlw	0
  8363  0AB0  00C8               	movwf	?_log+1
  8364  0AB1  3000               	movlw	0
  8365  0AB2  00C9               	movwf	?_log+2
  8366  0AB3  0008               	return
  8367  0AB4                     l2671:	
  8368  0AB4  3000               	movlw	0
  8369  0AB5  00B0               	movwf	___ftadd@f1
  8370  0AB6  3080               	movlw	128
  8371  0AB7  00B1               	movwf	___ftadd@f1+1
  8372  0AB8  30BF               	movlw	191
  8373  0AB9  00B2               	movwf	___ftadd@f1+2
  8374  0ABA  3000               	movlw	0
  8375  0ABB  00A0               	movwf	___ftmul@f1
  8376  0ABC  3000               	movlw	0
  8377  0ABD  00A1               	movwf	___ftmul@f1+1
  8378  0ABE  3040               	movlw	64
  8379  0ABF  00A2               	movwf	___ftmul@f1+2
  8380  0AC0  304B               	movlw	(low (log@exponent| 0))& (0+255)
  8381  0AC1  00CA               	movwf	??_log
  8382  0AC2  084A               	movf	??_log,w
  8383  0AC3  00F3               	movwf	frexp@eptr
  8384  0AC4  0847               	movf	log@x,w
  8385  0AC5  00F0               	movwf	frexp@value
  8386  0AC6  0848               	movf	log@x+1,w
  8387  0AC7  00F1               	movwf	frexp@value+1
  8388  0AC8  0849               	movf	log@x+2,w
  8389  0AC9  00F2               	movwf	frexp@value+2
  8390  0ACA  3195  252A  318A   	fcall	_frexp
  8391  0ACD  0870               	movf	?_frexp,w
  8392  0ACE  0020               	movlb	0	; select bank0
  8393  0ACF  00A3               	movwf	___ftmul@f2
  8394  0AD0  0871               	movf	?_frexp+1,w
  8395  0AD1  00A4               	movwf	___ftmul@f2+1
  8396  0AD2  0872               	movf	?_frexp+2,w
  8397  0AD3  00A5               	movwf	___ftmul@f2+2
  8398  0AD4  318B  2332  318A   	fcall	___ftmul
  8399  0AD7  0020               	movlb	0	; select bank0
  8400  0AD8  0820               	movf	?___ftmul,w
  8401  0AD9  00B3               	movwf	___ftadd@f2
  8402  0ADA  0821               	movf	?___ftmul+1,w
  8403  0ADB  00B4               	movwf	___ftadd@f2+1
  8404  0ADC  0822               	movf	?___ftmul+2,w
  8405  0ADD  00B5               	movwf	___ftadd@f2+2
  8406  0ADE  3180  2030  318A   	fcall	___ftadd
  8407  0AE1  0020               	movlb	0	; select bank0
  8408  0AE2  0830               	movf	?___ftadd,w
  8409  0AE3  00C7               	movwf	log@x
  8410  0AE4  0831               	movf	?___ftadd+1,w
  8411  0AE5  00C8               	movwf	log@x+1
  8412  0AE6  0832               	movf	?___ftadd+2,w
  8413  0AE7  00C9               	movwf	log@x+2
  8414  0AE8  30FF               	movlw	255
  8415  0AE9  07CB               	addwf	log@exponent,f
  8416  0AEA  30FF               	movlw	255
  8417  0AEB  3DCC               	addwfc	log@exponent+1,f
  8418  0AEC  0847               	movf	log@x,w
  8419  0AED  00BD               	movwf	eval_poly@x
  8420  0AEE  0848               	movf	log@x+1,w
  8421  0AEF  00BE               	movwf	eval_poly@x+1
  8422  0AF0  0849               	movf	log@x+2,w
  8423  0AF1  00BF               	movwf	eval_poly@x+2
  8424  0AF2  3000               	movlw	low (log@coeff| (0+32768))
  8425  0AF3  00C0               	movwf	eval_poly@d
  8426  0AF4  3098               	movlw	high (log@coeff| (0+32768))
  8427  0AF5  00C1               	movwf	eval_poly@d+1
  8428  0AF6  3008               	movlw	8
  8429  0AF7  00C2               	movwf	eval_poly@n
  8430  0AF8  3000               	movlw	0
  8431  0AF9  00C3               	movwf	eval_poly@n+1
  8432  0AFA  3196  26D9  318A   	fcall	_eval_poly
  8433  0AFD  0020               	movlb	0	; select bank0
  8434  0AFE  083D               	movf	?_eval_poly,w
  8435  0AFF  00C7               	movwf	log@x
  8436  0B00  083E               	movf	?_eval_poly+1,w
  8437  0B01  00C8               	movwf	log@x+1
  8438  0B02  083F               	movf	?_eval_poly+2,w
  8439  0B03  00C9               	movwf	log@x+2
  8440  0B04  0847               	movf	log@x,w
  8441  0B05  00B0               	movwf	___ftadd@f1
  8442  0B06  0848               	movf	log@x+1,w
  8443  0B07  00B1               	movwf	___ftadd@f1+1
  8444  0B08  0849               	movf	log@x+2,w
  8445  0B09  00B2               	movwf	___ftadd@f1+2
  8446  0B0A  3072               	movlw	114
  8447  0B0B  00A0               	movwf	___ftmul@f1
  8448  0B0C  3031               	movlw	49
  8449  0B0D  00A1               	movwf	___ftmul@f1+1
  8450  0B0E  303F               	movlw	63
  8451  0B0F  00A2               	movwf	___ftmul@f1+2
  8452  0B10  084C               	movf	log@exponent+1,w
  8453  0B11  00F9               	movwf	___awtoft@c+1
  8454  0B12  084B               	movf	log@exponent,w
  8455  0B13  00F8               	movwf	___awtoft@c
  8456  0B14  3193  23D7  318A   	fcall	___awtoft
  8457  0B17  0878               	movf	?___awtoft,w
  8458  0B18  0020               	movlb	0	; select bank0
  8459  0B19  00A3               	movwf	___ftmul@f2
  8460  0B1A  0879               	movf	?___awtoft+1,w
  8461  0B1B  00A4               	movwf	___ftmul@f2+1
  8462  0B1C  087A               	movf	?___awtoft+2,w
  8463  0B1D  00A5               	movwf	___ftmul@f2+2
  8464  0B1E  318B  2332  318A   	fcall	___ftmul
  8465  0B21  0020               	movlb	0	; select bank0
  8466  0B22  0820               	movf	?___ftmul,w
  8467  0B23  00B3               	movwf	___ftadd@f2
  8468  0B24  0821               	movf	?___ftmul+1,w
  8469  0B25  00B4               	movwf	___ftadd@f2+1
  8470  0B26  0822               	movf	?___ftmul+2,w
  8471  0B27  00B5               	movwf	___ftadd@f2+2
  8472  0B28  3180  2030         	fcall	___ftadd
  8473  0B2A  0020               	movlb	0	; select bank0
  8474  0B2B  0830               	movf	?___ftadd,w
  8475  0B2C  00C7               	movwf	?_log
  8476  0B2D  0831               	movf	?___ftadd+1,w
  8477  0B2E  00C8               	movwf	?_log+1
  8478  0B2F  0832               	movf	?___ftadd+2,w
  8479  0B30  00C9               	movwf	?_log+2
  8480  0B31  0008               	return
  8481  0B32                     __end_of_log:	
  8482                           
  8483                           	psect	text3
  8484  152A                     __ptext3:	
  8485 ;; *************** function _frexp *****************
  8486 ;; Defined at:
  8487 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
  8488 ;; Parameters:    Size  Location     Type
  8489 ;;  value           3    0[COMMON] int 
  8490 ;;  eptr            1    3[COMMON] PTR int 
  8491 ;;		 -> log@exponent(2), 
  8492 ;; Auto vars:     Size  Location     Type
  8493 ;;		None
  8494 ;; Return value:  Size  Location     Type
  8495 ;;                  3    0[COMMON] PTR int 
  8496 ;; Registers used:
  8497 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8498 ;; Tracked objects:
  8499 ;;		On entry : 0/0
  8500 ;;		On exit  : 0/0
  8501 ;;		Unchanged: 0/0
  8502 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8503 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8504 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8505 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8506 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8507 ;;Total ram usage:        6 bytes
  8508 ;; Hardware stack levels used:    1
  8509 ;; This function calls:
  8510 ;;		Nothing
  8511 ;; This function is called by:
  8512 ;;		_log
  8513 ;; This function uses a non-reentrant model
  8514 ;;
  8515                           
  8516                           
  8517                           ;psect for function _frexp
  8518  152A                     _frexp:	
  8519                           
  8520                           ;incstack = 0
  8521                           ; Regs used in _frexp: [wreg+fsr1l+fsr1h+status,2+status,0]
  8522  152A  0872               	movf	frexp@value+2,w
  8523  152B  0471               	iorwf	frexp@value+1,w
  8524  152C  0470               	iorwf	frexp@value,w
  8525  152D  1D03               	skipz
  8526  152E  2D3C               	goto	l2465
  8527  152F  0873               	movf	frexp@eptr,w
  8528  1530  0086               	movwf	6
  8529  1531  0187               	clrf	7
  8530  1532  3000               	movlw	0
  8531  1533  3FC0               	movwi [0]fsr1
  8532  1534  3FC1               	movwi [1]fsr1
  8533  1535  3000               	movlw	0
  8534  1536  00F0               	movwf	?_frexp
  8535  1537  3000               	movlw	0
  8536  1538  00F1               	movwf	?_frexp+1
  8537  1539  3000               	movlw	0
  8538  153A  00F2               	movwf	?_frexp+2
  8539  153B  0008               	return
  8540  153C                     l2465:	
  8541  153C  0872               	movf	frexp@value+2,w
  8542  153D  397F               	andlw	127
  8543  153E  00F4               	movwf	??_frexp
  8544  153F  01F5               	clrf	??_frexp+1
  8545  1540  35F4               	lslf	??_frexp,f
  8546  1541  0DF5               	rlf	??_frexp+1,f
  8547  1542  0873               	movf	frexp@eptr,w
  8548  1543  0086               	movwf	6
  8549  1544  0187               	clrf	7
  8550  1545  0874               	movf	??_frexp,w
  8551  1546  3FC0               	movwi [0]fsr1
  8552  1547  0875               	movf	??_frexp+1,w
  8553  1548  3FC1               	movwi [1]fsr1
  8554  1549  0D71               	rlf	frexp@value+1,w
  8555  154A  0D71               	rlf	frexp@value+1,w
  8556  154B  3901               	andlw	1
  8557  154C  00F4               	movwf	??_frexp
  8558  154D  01F5               	clrf	??_frexp+1
  8559  154E  0873               	movf	frexp@eptr,w
  8560  154F  0086               	movwf	6
  8561  1550  0187               	clrf	7
  8562  1551  0874               	movf	??_frexp,w
  8563  1552  0481               	iorwf	1,f
  8564  1553  3141               	addfsr 1,1
  8565  1554  0875               	movf	??_frexp+1,w
  8566  1555  0481               	iorwf	1,f
  8567  1556  0873               	movf	frexp@eptr,w
  8568  1557  0086               	movwf	6
  8569  1558  0187               	clrf	7
  8570  1559  3082               	movlw	130
  8571  155A  0781               	addwf	1,f
  8572  155B  3141               	addfsr 1,1
  8573  155C  30FF               	movlw	255
  8574  155D  3D81               	addwfc	1,f
  8575  155E  317F               	addfsr 1,-1
  8576  155F  0872               	movf	frexp@value+2,w
  8577  1560  3980               	andlw	-128
  8578  1561  383F               	iorlw	63
  8579  1562  00F2               	movwf	frexp@value+2
  8580  1563  13F1               	bcf	frexp@value+1,7
  8581  1564  0008               	return
  8582  1565                     __end_of_frexp:	
  8583                           
  8584                           	psect	text4
  8585  16D9                     __ptext4:	
  8586 ;; *************** function _eval_poly *****************
  8587 ;; Defined at:
  8588 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\evalpoly.c"
  8589 ;; Parameters:    Size  Location     Type
  8590 ;;  x               3   29[BANK0 ] PTR int 
  8591 ;;  d               2   32[BANK0 ] PTR const 
  8592 ;;		 -> log@coeff(27), 
  8593 ;;  n               2   34[BANK0 ] int 
  8594 ;; Auto vars:     Size  Location     Type
  8595 ;;  res             3   36[BANK0 ] int 
  8596 ;; Return value:  Size  Location     Type
  8597 ;;                  3   29[BANK0 ] int 
  8598 ;; Registers used:
  8599 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8600 ;; Tracked objects:
  8601 ;;		On entry : 0/0
  8602 ;;		On exit  : 0/0
  8603 ;;		Unchanged: 0/0
  8604 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8605 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8606 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8607 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8608 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8609 ;;Total ram usage:       10 bytes
  8610 ;; Hardware stack levels used:    1
  8611 ;; Hardware stack levels required when called:    2
  8612 ;; This function calls:
  8613 ;;		___ftadd
  8614 ;;		___ftmul
  8615 ;;		___wmul
  8616 ;; This function is called by:
  8617 ;;		_log
  8618 ;; This function uses a non-reentrant model
  8619 ;;
  8620                           
  8621                           
  8622                           ;psect for function _eval_poly
  8623  16D9                     _eval_poly:	
  8624                           
  8625                           ;incstack = 0
  8626                           ; Regs used in _eval_poly: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8627  16D9  0020               	movlb	0	; select bank0
  8628  16DA  0843               	movf	eval_poly@n+1,w
  8629  16DB  00F1               	movwf	___wmul@multiplier+1
  8630  16DC  0842               	movf	eval_poly@n,w
  8631  16DD  00F0               	movwf	___wmul@multiplier
  8632  16DE  3003               	movlw	3
  8633  16DF  00F2               	movwf	___wmul@multiplicand
  8634  16E0  3000               	movlw	0
  8635  16E1  00F3               	movwf	___wmul@multiplicand+1
  8636  16E2  3193  237F  3196   	fcall	___wmul
  8637  16E5  0020               	movlb	0	; select bank0
  8638  16E6  0840               	movf	eval_poly@d,w
  8639  16E7  0770               	addwf	?___wmul,w
  8640  16E8  0084               	movwf	4
  8641  16E9  0841               	movf	eval_poly@d+1,w
  8642  16EA  3D71               	addwfc	?___wmul+1,w
  8643  16EB  0085               	movwf	5
  8644  16EC  3F00               	moviw [0]fsr0
  8645  16ED  00C4               	movwf	eval_poly@res
  8646  16EE  3F01               	moviw [1]fsr0
  8647  16EF  00C5               	movwf	eval_poly@res+1
  8648  16F0  3F02               	moviw [2]fsr0
  8649  16F1                     L4:	
  8650  16F1  00C6               	movwf	eval_poly@res+2
  8651  16F2  0842               	movf	eval_poly@n,w
  8652  16F3  0443               	iorwf	eval_poly@n+1,w
  8653  16F4  1903               	btfsc	3,2
  8654  16F5  2F32               	goto	l2483
  8655  16F6  30FF               	movlw	255
  8656  16F7  07C2               	addwf	eval_poly@n,f
  8657  16F8  30FF               	movlw	255
  8658  16F9  3DC3               	addwfc	eval_poly@n+1,f
  8659  16FA  0843               	movf	eval_poly@n+1,w
  8660  16FB  00F1               	movwf	___wmul@multiplier+1
  8661  16FC  0842               	movf	eval_poly@n,w
  8662  16FD  00F0               	movwf	___wmul@multiplier
  8663  16FE  3003               	movlw	3
  8664  16FF  00F2               	movwf	___wmul@multiplicand
  8665  1700  3000               	movlw	0
  8666  1701  00F3               	movwf	___wmul@multiplicand+1
  8667  1702  3193  237F  3196   	fcall	___wmul
  8668  1705  0020               	movlb	0	; select bank0
  8669  1706  0840               	movf	eval_poly@d,w
  8670  1707  0770               	addwf	?___wmul,w
  8671  1708  0084               	movwf	4
  8672  1709  0841               	movf	eval_poly@d+1,w
  8673  170A  3D71               	addwfc	?___wmul+1,w
  8674  170B  0085               	movwf	5
  8675  170C  3F00               	moviw [0]fsr0
  8676  170D  00B0               	movwf	___ftadd@f1
  8677  170E  3F01               	moviw [1]fsr0
  8678  170F  00B1               	movwf	___ftadd@f1+1
  8679  1710  3F02               	moviw [2]fsr0
  8680  1711  00B2               	movwf	___ftadd@f1+2
  8681  1712  0844               	movf	eval_poly@res,w
  8682  1713  00A0               	movwf	___ftmul@f1
  8683  1714  0845               	movf	eval_poly@res+1,w
  8684  1715  00A1               	movwf	___ftmul@f1+1
  8685  1716  0846               	movf	eval_poly@res+2,w
  8686  1717  00A2               	movwf	___ftmul@f1+2
  8687  1718  083D               	movf	eval_poly@x,w
  8688  1719  00A3               	movwf	___ftmul@f2
  8689  171A  083E               	movf	eval_poly@x+1,w
  8690  171B  00A4               	movwf	___ftmul@f2+1
  8691  171C  083F               	movf	eval_poly@x+2,w
  8692  171D  00A5               	movwf	___ftmul@f2+2
  8693  171E  318B  2332  3196   	fcall	___ftmul
  8694  1721  0020               	movlb	0	; select bank0
  8695  1722  0820               	movf	?___ftmul,w
  8696  1723  00B3               	movwf	___ftadd@f2
  8697  1724  0821               	movf	?___ftmul+1,w
  8698  1725  00B4               	movwf	___ftadd@f2+1
  8699  1726  0822               	movf	?___ftmul+2,w
  8700  1727  00B5               	movwf	___ftadd@f2+2
  8701  1728  3180  2030  3196   	fcall	___ftadd
  8702  172B  0020               	movlb	0	; select bank0
  8703  172C  0830               	movf	?___ftadd,w
  8704  172D  00C4               	movwf	eval_poly@res
  8705  172E  0831               	movf	?___ftadd+1,w
  8706  172F  00C5               	movwf	eval_poly@res+1
  8707  1730  0832               	movf	?___ftadd+2,w
  8708  1731  2EF1               	goto	L4
  8709  1732                     l2483:	
  8710  1732  0844               	movf	eval_poly@res,w
  8711  1733  00BD               	movwf	?_eval_poly
  8712  1734  0845               	movf	eval_poly@res+1,w
  8713  1735  00BE               	movwf	?_eval_poly+1
  8714  1736  0846               	movf	eval_poly@res+2,w
  8715  1737  00BF               	movwf	?_eval_poly+2
  8716  1738  0008               	return
  8717  1739                     __end_of_eval_poly:	
  8718                           
  8719                           	psect	text5
  8720  14EF                     __ptext5:	
  8721 ;; *************** function ___ftge *****************
  8722 ;; Defined at:
  8723 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
  8724 ;; Parameters:    Size  Location     Type
  8725 ;;  ff1             3    0[COMMON] float 
  8726 ;;  ff2             3    3[COMMON] float 
  8727 ;; Auto vars:     Size  Location     Type
  8728 ;;		None
  8729 ;; Return value:  Size  Location     Type
  8730 ;;		None               void
  8731 ;; Registers used:
  8732 ;;		wreg, status,2, status,0
  8733 ;; Tracked objects:
  8734 ;;		On entry : 0/0
  8735 ;;		On exit  : 0/0
  8736 ;;		Unchanged: 0/0
  8737 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8738 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8739 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8740 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8741 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8742 ;;Total ram usage:        9 bytes
  8743 ;; Hardware stack levels used:    1
  8744 ;; This function calls:
  8745 ;;		Nothing
  8746 ;; This function is called by:
  8747 ;;		_log
  8748 ;; This function uses a non-reentrant model
  8749 ;;
  8750                           
  8751                           
  8752                           ;psect for function ___ftge
  8753  14EF                     ___ftge:	
  8754                           
  8755                           ;incstack = 0
  8756                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  8757  14EF  1FF2               	btfss	___ftge@ff1+2,7
  8758  14F0  2D05               	goto	l2399
  8759  14F1  0970               	comf	___ftge@ff1,w
  8760  14F2  00F6               	movwf	??___ftge
  8761  14F3  0971               	comf	___ftge@ff1+1,w
  8762  14F4  00F7               	movwf	??___ftge+1
  8763  14F5  0972               	comf	___ftge@ff1+2,w
  8764  14F6  00F8               	movwf	??___ftge+2
  8765  14F7  0AF6               	incf	??___ftge,f
  8766  14F8  1903               	skipnz
  8767  14F9  0AF7               	incf	??___ftge+1,f
  8768  14FA  1903               	skipnz
  8769  14FB  0AF8               	incf	??___ftge+2,f
  8770  14FC  3000               	movlw	0
  8771  14FD  0776               	addwf	??___ftge,w
  8772  14FE  00F0               	movwf	___ftge@ff1
  8773  14FF  3000               	movlw	0
  8774  1500  3D77               	addwfc	??___ftge+1,w
  8775  1501  00F1               	movwf	___ftge@ff1+1
  8776  1502  3080               	movlw	128
  8777  1503  3D78               	addwfc	??___ftge+2,w
  8778  1504  00F2               	movwf	___ftge@ff1+2
  8779  1505                     l2399:	
  8780  1505  1FF5               	btfss	___ftge@ff2+2,7
  8781  1506  2D1B               	goto	l2403
  8782  1507  0973               	comf	___ftge@ff2,w
  8783  1508  00F6               	movwf	??___ftge
  8784  1509  0974               	comf	___ftge@ff2+1,w
  8785  150A  00F7               	movwf	??___ftge+1
  8786  150B  0975               	comf	___ftge@ff2+2,w
  8787  150C  00F8               	movwf	??___ftge+2
  8788  150D  0AF6               	incf	??___ftge,f
  8789  150E  1903               	skipnz
  8790  150F  0AF7               	incf	??___ftge+1,f
  8791  1510  1903               	skipnz
  8792  1511  0AF8               	incf	??___ftge+2,f
  8793  1512  3000               	movlw	0
  8794  1513  0776               	addwf	??___ftge,w
  8795  1514  00F3               	movwf	___ftge@ff2
  8796  1515  3000               	movlw	0
  8797  1516  3D77               	addwfc	??___ftge+1,w
  8798  1517  00F4               	movwf	___ftge@ff2+1
  8799  1518  3080               	movlw	128
  8800  1519  3D78               	addwfc	??___ftge+2,w
  8801  151A  00F5               	movwf	___ftge@ff2+2
  8802  151B                     l2403:	
  8803  151B  3080               	movlw	128
  8804  151C  06F2               	xorwf	___ftge@ff1+2,f
  8805  151D  3080               	movlw	128
  8806  151E  06F5               	xorwf	___ftge@ff2+2,f
  8807  151F  0875               	movf	___ftge@ff2+2,w
  8808  1520  0272               	subwf	___ftge@ff1+2,w
  8809  1521  1D03               	skipz
  8810  1522  0008               	return
  8811  1523  0874               	movf	___ftge@ff2+1,w
  8812  1524  0271               	subwf	___ftge@ff1+1,w
  8813  1525  1D03               	skipz
  8814  1526  0008               	return
  8815  1527  0873               	movf	___ftge@ff2,w
  8816  1528  0270               	subwf	___ftge@ff1,w
  8817  1529  0008               	return
  8818  152A                     __end_of___ftge:	
  8819                           
  8820                           	psect	text6
  8821  139A                     __ptext6:	
  8822 ;; *************** function ___ftsub *****************
  8823 ;; Defined at:
  8824 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
  8825 ;; Parameters:    Size  Location     Type
  8826 ;;  f2              3   29[BANK0 ] float 
  8827 ;;  f1              3   32[BANK0 ] float 
  8828 ;; Auto vars:     Size  Location     Type
  8829 ;;		None
  8830 ;; Return value:  Size  Location     Type
  8831 ;;                  3   29[BANK0 ] float 
  8832 ;; Registers used:
  8833 ;;		wreg, status,2, status,0, pclath, cstack
  8834 ;; Tracked objects:
  8835 ;;		On entry : 0/0
  8836 ;;		On exit  : 0/0
  8837 ;;		Unchanged: 0/0
  8838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8839 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8840 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8841 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8842 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8843 ;;Total ram usage:        6 bytes
  8844 ;; Hardware stack levels used:    1
  8845 ;; Hardware stack levels required when called:    2
  8846 ;; This function calls:
  8847 ;;		___ftadd
  8848 ;; This function is called by:
  8849 ;;		_tempCalc
  8850 ;; This function uses a non-reentrant model
  8851 ;;
  8852                           
  8853                           
  8854                           ;psect for function ___ftsub
  8855  139A                     ___ftsub:	
  8856                           
  8857                           ;incstack = 0
  8858                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  8859  139A  0020               	movlb	0	; select bank0
  8860  139B  083F               	movf	___ftsub@f2+2,w
  8861  139C  043E               	iorwf	___ftsub@f2+1,w
  8862  139D  043D               	iorwf	___ftsub@f2,w
  8863  139E  1903               	skipnz
  8864  139F  2BA2               	goto	l2811
  8865  13A0  3080               	movlw	128
  8866  13A1  06BF               	xorwf	___ftsub@f2+2,f
  8867  13A2                     l2811:	
  8868  13A2  0840               	movf	___ftsub@f1,w
  8869  13A3  00B0               	movwf	___ftadd@f1
  8870  13A4  0841               	movf	___ftsub@f1+1,w
  8871  13A5  00B1               	movwf	___ftadd@f1+1
  8872  13A6  0842               	movf	___ftsub@f1+2,w
  8873  13A7  00B2               	movwf	___ftadd@f1+2
  8874  13A8  083D               	movf	___ftsub@f2,w
  8875  13A9  00B3               	movwf	___ftadd@f2
  8876  13AA  083E               	movf	___ftsub@f2+1,w
  8877  13AB  00B4               	movwf	___ftadd@f2+1
  8878  13AC  083F               	movf	___ftsub@f2+2,w
  8879  13AD  00B5               	movwf	___ftadd@f2+2
  8880  13AE  3180  2030         	fcall	___ftadd
  8881  13B0  0020               	movlb	0	; select bank0
  8882  13B1  0830               	movf	?___ftadd,w
  8883  13B2  00BD               	movwf	?___ftsub
  8884  13B3  0831               	movf	?___ftadd+1,w
  8885  13B4  00BE               	movwf	?___ftsub+1
  8886  13B5  0832               	movf	?___ftadd+2,w
  8887  13B6  00BF               	movwf	?___ftsub+2
  8888  13B7  0008               	return
  8889  13B8                     __end_of___ftsub:	
  8890                           
  8891                           	psect	text7
  8892  0030                     __ptext7:	
  8893 ;; *************** function ___ftadd *****************
  8894 ;; Defined at:
  8895 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
  8896 ;; Parameters:    Size  Location     Type
  8897 ;;  f1              3   16[BANK0 ] float 
  8898 ;;  f2              3   19[BANK0 ] float 
  8899 ;; Auto vars:     Size  Location     Type
  8900 ;;  exp1            1   28[BANK0 ] unsigned char 
  8901 ;;  exp2            1   27[BANK0 ] unsigned char 
  8902 ;;  sign            1   26[BANK0 ] unsigned char 
  8903 ;; Return value:  Size  Location     Type
  8904 ;;                  3   16[BANK0 ] float 
  8905 ;; Registers used:
  8906 ;;		wreg, status,2, status,0, pclath, cstack
  8907 ;; Tracked objects:
  8908 ;;		On entry : 0/0
  8909 ;;		On exit  : 0/0
  8910 ;;		Unchanged: 0/0
  8911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8912 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8913 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8914 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8915 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8916 ;;Total ram usage:       13 bytes
  8917 ;; Hardware stack levels used:    1
  8918 ;; Hardware stack levels required when called:    1
  8919 ;; This function calls:
  8920 ;;		___ftpack
  8921 ;; This function is called by:
  8922 ;;		_tempCalc
  8923 ;;		___ftsub
  8924 ;;		_log
  8925 ;;		_eval_poly
  8926 ;; This function uses a non-reentrant model
  8927 ;;
  8928                           
  8929                           
  8930                           ;psect for function ___ftadd
  8931  0030                     ___ftadd:	
  8932                           
  8933                           ;incstack = 0
  8934                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  8935  0030  0020               	movlb	0	; select bank0
  8936  0031  0830               	movf	___ftadd@f1,w
  8937  0032  00B6               	movwf	??___ftadd
  8938  0033  0831               	movf	___ftadd@f1+1,w
  8939  0034  00B7               	movwf	??___ftadd+1
  8940  0035  0832               	movf	___ftadd@f1+2,w
  8941  0036  00B8               	movwf	??___ftadd+2
  8942  0037  1003               	clrc
  8943  0038  0D37               	rlf	??___ftadd+1,w
  8944  0039  0D38               	rlf	??___ftadd+2,w
  8945  003A  00B9               	movwf	??___ftadd+3
  8946  003B  0839               	movf	??___ftadd+3,w
  8947  003C  00BC               	movwf	___ftadd@exp1
  8948  003D  0833               	movf	___ftadd@f2,w
  8949  003E  00B6               	movwf	??___ftadd
  8950  003F  0834               	movf	___ftadd@f2+1,w
  8951  0040  00B7               	movwf	??___ftadd+1
  8952  0041  0835               	movf	___ftadd@f2+2,w
  8953  0042  00B8               	movwf	??___ftadd+2
  8954  0043  1003               	clrc
  8955  0044  0D37               	rlf	??___ftadd+1,w
  8956  0045  0D38               	rlf	??___ftadd+2,w
  8957  0046  00B9               	movwf	??___ftadd+3
  8958  0047  0839               	movf	??___ftadd+3,w
  8959  0048  00BB               	movwf	___ftadd@exp2
  8960  0049  083C               	movf	___ftadd@exp1,w
  8961  004A  1903               	btfsc	3,2
  8962  004B  2858               	goto	l2267
  8963  004C  083B               	movf	___ftadd@exp2,w
  8964  004D  023C               	subwf	___ftadd@exp1,w
  8965  004E  1803               	skipnc
  8966  004F  285F               	goto	l2271
  8967  0050  033C               	decf	___ftadd@exp1,w
  8968  0051  3AFF               	xorlw	255
  8969  0052  073B               	addwf	___ftadd@exp2,w
  8970  0053  00B6               	movwf	??___ftadd
  8971  0054  3019               	movlw	25
  8972  0055  0236               	subwf	??___ftadd,w
  8973  0056  1C03               	skipc
  8974  0057  285F               	goto	l2271
  8975  0058                     l2267:	
  8976  0058  0833               	movf	___ftadd@f2,w
  8977  0059  00B0               	movwf	?___ftadd
  8978  005A  0834               	movf	___ftadd@f2+1,w
  8979  005B  00B1               	movwf	?___ftadd+1
  8980  005C  0835               	movf	___ftadd@f2+2,w
  8981  005D  00B2               	movwf	?___ftadd+2
  8982  005E  0008               	return
  8983  005F                     l2271:	
  8984  005F  083B               	movf	___ftadd@exp2,w
  8985  0060  1903               	btfsc	3,2
  8986  0061  0008               	return
  8987  0062  083C               	movf	___ftadd@exp1,w
  8988  0063  023B               	subwf	___ftadd@exp2,w
  8989  0064  1803               	skipnc
  8990  0065  286E               	goto	l2277
  8991  0066  033B               	decf	___ftadd@exp2,w
  8992  0067  3AFF               	xorlw	255
  8993  0068  073C               	addwf	___ftadd@exp1,w
  8994  0069  00B6               	movwf	??___ftadd
  8995  006A  3019               	movlw	25
  8996  006B  0236               	subwf	??___ftadd,w
  8997  006C  1803               	btfsc	3,0
  8998  006D  0008               	return
  8999  006E                     l2277:	
  9000  006E  3006               	movlw	6
  9001  006F  00B6               	movwf	??___ftadd
  9002  0070  0836               	movf	??___ftadd,w
  9003  0071  00BA               	movwf	___ftadd@sign
  9004  0072  1BB2               	btfsc	___ftadd@f1+2,7
  9005  0073  17BA               	bsf	___ftadd@sign,7
  9006  0074  1BB5               	btfsc	___ftadd@f2+2,7
  9007  0075  173A               	bsf	___ftadd@sign,6
  9008  0076  17B1               	bsf	___ftadd@f1+1,7
  9009  0077  30FF               	movlw	255
  9010  0078  05B0               	andwf	___ftadd@f1,f
  9011  0079  30FF               	movlw	255
  9012  007A  05B1               	andwf	___ftadd@f1+1,f
  9013  007B  3000               	movlw	0
  9014  007C  05B2               	andwf	___ftadd@f1+2,f
  9015  007D  17B4               	bsf	___ftadd@f2+1,7
  9016  007E  30FF               	movlw	255
  9017  007F  05B3               	andwf	___ftadd@f2,f
  9018  0080  30FF               	movlw	255
  9019  0081  05B4               	andwf	___ftadd@f2+1,f
  9020  0082  3000               	movlw	0
  9021  0083  05B5               	andwf	___ftadd@f2+2,f
  9022  0084  083B               	movf	___ftadd@exp2,w
  9023  0085  023C               	subwf	___ftadd@exp1,w
  9024  0086  1803               	skipnc
  9025  0087  28AA               	goto	l2299
  9026  0088                     l2289:	
  9027  0088  3001               	movlw	1
  9028  0089                     u2265:	
  9029  0089  35B3               	lslf	___ftadd@f2,f
  9030  008A  0DB4               	rlf	___ftadd@f2+1,f
  9031  008B  0DB5               	rlf	___ftadd@f2+2,f
  9032  008C  0B89               	decfsz	9,f
  9033  008D  2889               	goto	u2265
  9034  008E  3001               	movlw	1
  9035  008F  02BB               	subwf	___ftadd@exp2,f
  9036  0090  083B               	movf	___ftadd@exp2,w
  9037  0091  063C               	xorwf	___ftadd@exp1,w
  9038  0092  1903               	skipnz
  9039  0093  28A5               	goto	l2297
  9040  0094  3001               	movlw	1
  9041  0095  02BA               	subwf	___ftadd@sign,f
  9042  0096  083A               	movf	___ftadd@sign,w
  9043  0097  3907               	andlw	7
  9044  0098  1903               	btfsc	3,2
  9045  0099  28A5               	goto	l2297
  9046  009A  2888               	goto	l2289
  9047  009B                     l2295:	
  9048  009B  3001               	movlw	1
  9049  009C                     u2295:	
  9050  009C  36B2               	lsrf	___ftadd@f1+2,f
  9051  009D  0CB1               	rrf	___ftadd@f1+1,f
  9052  009E  0CB0               	rrf	___ftadd@f1,f
  9053  009F  0B89               	decfsz	9,f
  9054  00A0  289C               	goto	u2295
  9055  00A1  3001               	movlw	1
  9056  00A2  00B6               	movwf	??___ftadd
  9057  00A3  0836               	movf	??___ftadd,w
  9058  00A4  07BC               	addwf	___ftadd@exp1,f
  9059  00A5                     l2297:	
  9060  00A5  083C               	movf	___ftadd@exp1,w
  9061  00A6  063B               	xorwf	___ftadd@exp2,w
  9062  00A7  1903               	btfsc	3,2
  9063  00A8  28CF               	goto	l773
  9064  00A9  289B               	goto	l2295
  9065  00AA                     l2299:	
  9066  00AA  083C               	movf	___ftadd@exp1,w
  9067  00AB  023B               	subwf	___ftadd@exp2,w
  9068  00AC  1803               	skipnc
  9069  00AD  28CF               	goto	l773
  9070  00AE                     l2301:	
  9071  00AE  3001               	movlw	1
  9072  00AF                     u2325:	
  9073  00AF  35B0               	lslf	___ftadd@f1,f
  9074  00B0  0DB1               	rlf	___ftadd@f1+1,f
  9075  00B1  0DB2               	rlf	___ftadd@f1+2,f
  9076  00B2  0B89               	decfsz	9,f
  9077  00B3  28AF               	goto	u2325
  9078  00B4  3001               	movlw	1
  9079  00B5  02BC               	subwf	___ftadd@exp1,f
  9080  00B6  083B               	movf	___ftadd@exp2,w
  9081  00B7  063C               	xorwf	___ftadd@exp1,w
  9082  00B8  1903               	skipnz
  9083  00B9  28CB               	goto	l2309
  9084  00BA  3001               	movlw	1
  9085  00BB  02BA               	subwf	___ftadd@sign,f
  9086  00BC  083A               	movf	___ftadd@sign,w
  9087  00BD  3907               	andlw	7
  9088  00BE  1903               	btfsc	3,2
  9089  00BF  28CB               	goto	l2309
  9090  00C0  28AE               	goto	l2301
  9091  00C1                     l2307:	
  9092  00C1  3001               	movlw	1
  9093  00C2                     u2355:	
  9094  00C2  36B5               	lsrf	___ftadd@f2+2,f
  9095  00C3  0CB4               	rrf	___ftadd@f2+1,f
  9096  00C4  0CB3               	rrf	___ftadd@f2,f
  9097  00C5  0B89               	decfsz	9,f
  9098  00C6  28C2               	goto	u2355
  9099  00C7  3001               	movlw	1
  9100  00C8  00B6               	movwf	??___ftadd
  9101  00C9  0836               	movf	??___ftadd,w
  9102  00CA  07BB               	addwf	___ftadd@exp2,f
  9103  00CB                     l2309:	
  9104  00CB  083C               	movf	___ftadd@exp1,w
  9105  00CC  063B               	xorwf	___ftadd@exp2,w
  9106  00CD  1D03               	skipz
  9107  00CE  28C1               	goto	l2307
  9108  00CF                     l773:	
  9109  00CF  1FBA               	btfss	___ftadd@sign,7
  9110  00D0  28E1               	goto	l2313
  9111  00D1  30FF               	movlw	255
  9112  00D2  06B0               	xorwf	___ftadd@f1,f
  9113  00D3  30FF               	movlw	255
  9114  00D4  06B1               	xorwf	___ftadd@f1+1,f
  9115  00D5  30FF               	movlw	255
  9116  00D6  06B2               	xorwf	___ftadd@f1+2,f
  9117  00D7  3001               	movlw	1
  9118  00D8  07B0               	addwf	___ftadd@f1,f
  9119  00D9  3000               	movlw	0
  9120  00DA  1803               	skipnc
  9121  00DB  3001               	movlw	1
  9122  00DC  07B1               	addwf	___ftadd@f1+1,f
  9123  00DD  3000               	movlw	0
  9124  00DE  1803               	skipnc
  9125  00DF  3001               	movlw	1
  9126  00E0  07B2               	addwf	___ftadd@f1+2,f
  9127  00E1                     l2313:	
  9128  00E1  1F3A               	btfss	___ftadd@sign,6
  9129  00E2  28F3               	goto	l2317
  9130  00E3  30FF               	movlw	255
  9131  00E4  06B3               	xorwf	___ftadd@f2,f
  9132  00E5  30FF               	movlw	255
  9133  00E6  06B4               	xorwf	___ftadd@f2+1,f
  9134  00E7  30FF               	movlw	255
  9135  00E8  06B5               	xorwf	___ftadd@f2+2,f
  9136  00E9  3001               	movlw	1
  9137  00EA  07B3               	addwf	___ftadd@f2,f
  9138  00EB  3000               	movlw	0
  9139  00EC  1803               	skipnc
  9140  00ED  3001               	movlw	1
  9141  00EE  07B4               	addwf	___ftadd@f2+1,f
  9142  00EF  3000               	movlw	0
  9143  00F0  1803               	skipnc
  9144  00F1  3001               	movlw	1
  9145  00F2  07B5               	addwf	___ftadd@f2+2,f
  9146  00F3                     l2317:	
  9147  00F3  01BA               	clrf	___ftadd@sign
  9148  00F4  0830               	movf	___ftadd@f1,w
  9149  00F5  07B3               	addwf	___ftadd@f2,f
  9150  00F6  0831               	movf	___ftadd@f1+1,w
  9151  00F7  3DB4               	addwfc	___ftadd@f2+1,f
  9152  00F8  0832               	movf	___ftadd@f1+2,w
  9153  00F9  3DB5               	addwfc	___ftadd@f2+2,f
  9154  00FA  1FB5               	btfss	___ftadd@f2+2,7
  9155  00FB  290E               	goto	l2327
  9156  00FC  30FF               	movlw	255
  9157  00FD  06B3               	xorwf	___ftadd@f2,f
  9158  00FE  30FF               	movlw	255
  9159  00FF  06B4               	xorwf	___ftadd@f2+1,f
  9160  0100  30FF               	movlw	255
  9161  0101  06B5               	xorwf	___ftadd@f2+2,f
  9162  0102  3001               	movlw	1
  9163  0103  07B3               	addwf	___ftadd@f2,f
  9164  0104  3000               	movlw	0
  9165  0105  1803               	skipnc
  9166  0106  3001               	movlw	1
  9167  0107  07B4               	addwf	___ftadd@f2+1,f
  9168  0108  3000               	movlw	0
  9169  0109  1803               	skipnc
  9170  010A  3001               	movlw	1
  9171  010B  07B5               	addwf	___ftadd@f2+2,f
  9172  010C  01BA               	clrf	___ftadd@sign
  9173  010D  0ABA               	incf	___ftadd@sign,f
  9174  010E                     l2327:	
  9175  010E  0833               	movf	___ftadd@f2,w
  9176  010F  00F0               	movwf	___ftpack@arg
  9177  0110  0834               	movf	___ftadd@f2+1,w
  9178  0111  00F1               	movwf	___ftpack@arg+1
  9179  0112  0835               	movf	___ftadd@f2+2,w
  9180  0113  00F2               	movwf	___ftpack@arg+2
  9181  0114  083C               	movf	___ftadd@exp1,w
  9182  0115  00B6               	movwf	??___ftadd
  9183  0116  0836               	movf	??___ftadd,w
  9184  0117  00F3               	movwf	___ftpack@exp
  9185  0118  083A               	movf	___ftadd@sign,w
  9186  0119  00B7               	movwf	??___ftadd+1
  9187  011A  0837               	movf	??___ftadd+1,w
  9188  011B  00F4               	movwf	___ftpack@sign
  9189  011C  3197  279C         	fcall	___ftpack
  9190  011E  0870               	movf	?___ftpack,w
  9191  011F  0020               	movlb	0	; select bank0
  9192  0120  00B0               	movwf	?___ftadd
  9193  0121  0871               	movf	?___ftpack+1,w
  9194  0122  00B1               	movwf	?___ftadd+1
  9195  0123  0872               	movf	?___ftpack+2,w
  9196  0124  00B2               	movwf	?___ftadd+2
  9197  0125  0008               	return
  9198  0126                     __end_of___ftadd:	
  9199                           
  9200                           	psect	text8
  9201  0EC2                     __ptext8:	
  9202 ;; *************** function _readIAnalog *****************
  9203 ;; Defined at:
  9204 ;;		line 77 in file "adc.c"
  9205 ;; Parameters:    Size  Location     Type
  9206 ;;  channel         2    6[BANK0 ] unsigned int 
  9207 ;; Auto vars:     Size  Location     Type
  9208 ;;  value           2   11[COMMON] int 
  9209 ;;  analog_chann    2    9[COMMON] unsigned int 
  9210 ;; Return value:  Size  Location     Type
  9211 ;;                  2    6[BANK0 ] int 
  9212 ;; Registers used:
  9213 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9214 ;; Tracked objects:
  9215 ;;		On entry : 0/0
  9216 ;;		On exit  : 0/0
  9217 ;;		Unchanged: 0/0
  9218 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9219 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9220 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9221 ;;      Temps:          0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9222 ;;      Totals:         4      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9223 ;;Total ram usage:       24 bytes
  9224 ;; Hardware stack levels used:    1
  9225 ;; Hardware stack levels required when called:    1
  9226 ;; This function calls:
  9227 ;;		_ADCRead
  9228 ;;		___aldiv
  9229 ;;		___wmul
  9230 ;; This function is called by:
  9231 ;;		_main
  9232 ;; This function uses a non-reentrant model
  9233 ;;
  9234                           
  9235                           
  9236                           ;psect for function _readIAnalog
  9237  0EC2                     _readIAnalog:	
  9238                           
  9239                           ;adc.c: 79: int16_t value;
  9240                           ;adc.c: 81: uint16_t analog_channel = channels[channel];
  9241                           
  9242                           ;incstack = 0
  9243                           ; Regs used in _readIAnalog: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9244  0EC2  0020               	movlb	0	; select bank0
  9245  0EC3  3526               	lslf	readIAnalog@channel,w
  9246  0EC4  3E35               	addlw	(low (_channels| (0+256)))& (0+255)
  9247  0EC5  0086               	movwf	6
  9248  0EC6  3001               	movlw	1	; select bank2/3
  9249  0EC7  0087               	movwf	7
  9250  0EC8  3F40               	moviw [0]fsr1
  9251  0EC9  00F9               	movwf	readIAnalog@analog_channel
  9252  0ECA  3F41               	moviw [1]fsr1
  9253  0ECB  00FA               	movwf	readIAnalog@analog_channel+1
  9254                           
  9255                           ;adc.c: 83: value = ADCRead(analog_channel);
  9256  0ECC  0879               	movf	readIAnalog@analog_channel,w
  9257  0ECD  3193  233E  318E   	fcall	_ADCRead
  9258  0ED0  0871               	movf	?_ADCRead+1,w
  9259  0ED1  00FC               	movwf	readIAnalog@value+1
  9260  0ED2  0870               	movf	?_ADCRead,w
  9261  0ED3  00FB               	movwf	readIAnalog@value
  9262                           
  9263                           ;adc.c: 85: totals[channel] = totals[channel]-samples[channel][sampleIndex];
  9264  0ED4  0020               	movlb	0	; select bank0
  9265  0ED5  0826               	movf	readIAnalog@channel,w
  9266  0ED6  00A8               	movwf	??_readIAnalog
  9267  0ED7  3001               	movlw	1
  9268  0ED8                     u3115:	
  9269  0ED8  35A8               	lslf	??_readIAnalog,f
  9270  0ED9  3EFF               	addlw	-1
  9271  0EDA  1D03               	skipz
  9272  0EDB  2ED8               	goto	u3115
  9273  0EDC  3528               	lslf	??_readIAnalog,w
  9274  0EDD  3E20               	addlw	(low (_totals| (0+256)))& (0+255)
  9275  0EDE  0086               	movwf	6
  9276  0EDF  3001               	movlw	1	; select bank2/3
  9277  0EE0  0087               	movwf	7
  9278  0EE1  3F40               	moviw [0]fsr1
  9279  0EE2  00A9               	movwf	??_readIAnalog+1
  9280  0EE3  3F41               	moviw [1]fsr1
  9281  0EE4  00AA               	movwf	??_readIAnalog+2
  9282  0EE5  3F42               	moviw [2]fsr1
  9283  0EE6  00AB               	movwf	??_readIAnalog+3
  9284  0EE7  3F43               	moviw [3]fsr1
  9285  0EE8  00AC               	movwf	??_readIAnalog+4
  9286  0EE9  0867               	movf	_sampleIndex+1,w
  9287  0EEA  00AE               	movwf	??_readIAnalog+6
  9288  0EEB  0866               	movf	_sampleIndex,w
  9289  0EEC  00AD               	movwf	??_readIAnalog+5
  9290  0EED  35AD               	lslf	??_readIAnalog+5,f
  9291  0EEE  0DAE               	rlf	??_readIAnalog+6,f
  9292  0EEF  0827               	movf	readIAnalog@channel+1,w
  9293  0EF0  00F1               	movwf	___wmul@multiplier+1
  9294  0EF1  0826               	movf	readIAnalog@channel,w
  9295  0EF2  00F0               	movwf	___wmul@multiplier
  9296  0EF3  3096               	movlw	150
  9297  0EF4  00F2               	movwf	___wmul@multiplicand
  9298  0EF5  3000               	movlw	0
  9299  0EF6  00F3               	movwf	___wmul@multiplicand+1
  9300  0EF7  3193  237F  318E   	fcall	___wmul
  9301  0EFA  3098               	movlw	152
  9302  0EFB  0020               	movlb	0	; select bank0
  9303  0EFC  00AF               	movwf	??_readIAnalog+7
  9304  0EFD  3021               	movlw	33
  9305  0EFE  00B0               	movwf	??_readIAnalog+8
  9306  0EFF  0870               	movf	?___wmul,w
  9307  0F00  072F               	addwf	??_readIAnalog+7,w
  9308  0F01  00B1               	movwf	??_readIAnalog+9
  9309  0F02  0871               	movf	?___wmul+1,w
  9310  0F03  3D30               	addwfc	??_readIAnalog+8,w
  9311  0F04  00B2               	movwf	??_readIAnalog+10
  9312  0F05  082D               	movf	??_readIAnalog+5,w
  9313  0F06  0731               	addwf	??_readIAnalog+9,w
  9314  0F07  0086               	movwf	6
  9315  0F08  082E               	movf	??_readIAnalog+6,w
  9316  0F09  3D32               	addwfc	??_readIAnalog+10,w
  9317  0F0A  0087               	movwf	7
  9318  0F0B  3F40               	moviw [0]fsr1
  9319  0F0C  00B3               	movwf	??_readIAnalog+11
  9320  0F0D  3F41               	moviw [1]fsr1
  9321  0F0E  00B4               	movwf	??_readIAnalog+12
  9322  0F0F  0833               	movf	??_readIAnalog+11,w
  9323  0F10  00B5               	movwf	??_readIAnalog+13
  9324  0F11  0834               	movf	??_readIAnalog+12,w
  9325  0F12  00B6               	movwf	??_readIAnalog+14
  9326  0F13  3000               	movlw	0
  9327  0F14  1BB6               	btfsc	??_readIAnalog+14,7
  9328  0F15  30FF               	movlw	255
  9329  0F16  00B7               	movwf	??_readIAnalog+15
  9330  0F17  00B8               	movwf	??_readIAnalog+16
  9331  0F18  09B5               	comf	??_readIAnalog+13,f
  9332  0F19  09B6               	comf	??_readIAnalog+14,f
  9333  0F1A  09B7               	comf	??_readIAnalog+15,f
  9334  0F1B  09B8               	comf	??_readIAnalog+16,f
  9335  0F1C  0AB5               	incf	??_readIAnalog+13,f
  9336  0F1D  1903               	skipnz
  9337  0F1E  0AB6               	incf	??_readIAnalog+14,f
  9338  0F1F  1903               	skipnz
  9339  0F20  0AB7               	incf	??_readIAnalog+15,f
  9340  0F21  1903               	skipnz
  9341  0F22  0AB8               	incf	??_readIAnalog+16,f
  9342  0F23  0835               	movf	??_readIAnalog+13,w
  9343  0F24  07A9               	addwf	??_readIAnalog+1,f
  9344  0F25  0836               	movf	??_readIAnalog+14,w
  9345  0F26  3DAA               	addwfc	??_readIAnalog+2,f
  9346  0F27  0837               	movf	??_readIAnalog+15,w
  9347  0F28  3DAB               	addwfc	??_readIAnalog+3,f
  9348  0F29  0838               	movf	??_readIAnalog+16,w
  9349  0F2A  3DAC               	addwfc	??_readIAnalog+4,f
  9350  0F2B  0826               	movf	readIAnalog@channel,w
  9351  0F2C  00B9               	movwf	??_readIAnalog+17
  9352  0F2D  3001               	movlw	1
  9353  0F2E                     u3125:	
  9354  0F2E  35B9               	lslf	??_readIAnalog+17,f
  9355  0F2F  3EFF               	addlw	-1
  9356  0F30  1D03               	skipz
  9357  0F31  2F2E               	goto	u3125
  9358  0F32  3539               	lslf	??_readIAnalog+17,w
  9359  0F33  3E20               	addlw	(low (_totals| (0+256)))& (0+255)
  9360  0F34  0086               	movwf	6
  9361  0F35  3001               	movlw	1	; select bank2/3
  9362  0F36  0087               	movwf	7
  9363  0F37  0829               	movf	??_readIAnalog+1,w
  9364  0F38  3FC0               	movwi [0]fsr1
  9365  0F39  082A               	movf	??_readIAnalog+2,w
  9366  0F3A  3FC1               	movwi [1]fsr1
  9367  0F3B  082B               	movf	??_readIAnalog+3,w
  9368  0F3C  3FC2               	movwi [2]fsr1
  9369  0F3D  082C               	movf	??_readIAnalog+4,w
  9370  0F3E  3FC3               	movwi [3]fsr1
  9371                           
  9372                           ;adc.c: 87: samples[channel][sampleIndex] = value;
  9373  0F3F  0867               	movf	_sampleIndex+1,w
  9374  0F40  00A9               	movwf	??_readIAnalog+1
  9375  0F41  0866               	movf	_sampleIndex,w
  9376  0F42  00A8               	movwf	??_readIAnalog
  9377  0F43  35A8               	lslf	??_readIAnalog,f
  9378  0F44  0DA9               	rlf	??_readIAnalog+1,f
  9379  0F45  0827               	movf	readIAnalog@channel+1,w
  9380  0F46  00F1               	movwf	___wmul@multiplier+1
  9381  0F47  0826               	movf	readIAnalog@channel,w
  9382  0F48  00F0               	movwf	___wmul@multiplier
  9383  0F49  3096               	movlw	150
  9384  0F4A  00F2               	movwf	___wmul@multiplicand
  9385  0F4B  3000               	movlw	0
  9386  0F4C  00F3               	movwf	___wmul@multiplicand+1
  9387  0F4D  3193  237F  318E   	fcall	___wmul
  9388  0F50  3098               	movlw	152
  9389  0F51  0020               	movlb	0	; select bank0
  9390  0F52  00AA               	movwf	??_readIAnalog+2
  9391  0F53  3021               	movlw	33
  9392  0F54  00AB               	movwf	??_readIAnalog+3
  9393  0F55  0870               	movf	?___wmul,w
  9394  0F56  072A               	addwf	??_readIAnalog+2,w
  9395  0F57  00AC               	movwf	??_readIAnalog+4
  9396  0F58  0871               	movf	?___wmul+1,w
  9397  0F59  3D2B               	addwfc	??_readIAnalog+3,w
  9398  0F5A  00AD               	movwf	??_readIAnalog+5
  9399  0F5B  0828               	movf	??_readIAnalog,w
  9400  0F5C  072C               	addwf	??_readIAnalog+4,w
  9401  0F5D  0086               	movwf	6
  9402  0F5E  0829               	movf	??_readIAnalog+1,w
  9403  0F5F  3D2D               	addwfc	??_readIAnalog+5,w
  9404  0F60  0087               	movwf	7
  9405  0F61  087B               	movf	readIAnalog@value,w
  9406  0F62  3FC0               	movwi [0]fsr1
  9407  0F63  087C               	movf	readIAnalog@value+1,w
  9408  0F64  3FC1               	movwi [1]fsr1
  9409                           
  9410                           ;adc.c: 89: totals[channel] = totals[channel]+samples[channel][sampleIndex];
  9411  0F65  0826               	movf	readIAnalog@channel,w
  9412  0F66  00A8               	movwf	??_readIAnalog
  9413  0F67  3001               	movlw	1
  9414  0F68                     u3135:	
  9415  0F68  35A8               	lslf	??_readIAnalog,f
  9416  0F69  3EFF               	addlw	-1
  9417  0F6A  1D03               	skipz
  9418  0F6B  2F68               	goto	u3135
  9419  0F6C  3528               	lslf	??_readIAnalog,w
  9420  0F6D  3E20               	addlw	(low (_totals| (0+256)))& (0+255)
  9421  0F6E  0086               	movwf	6
  9422  0F6F  3001               	movlw	1	; select bank2/3
  9423  0F70  0087               	movwf	7
  9424  0F71  3F40               	moviw [0]fsr1
  9425  0F72  00A9               	movwf	??_readIAnalog+1
  9426  0F73  3F41               	moviw [1]fsr1
  9427  0F74  00AA               	movwf	??_readIAnalog+2
  9428  0F75  3F42               	moviw [2]fsr1
  9429  0F76  00AB               	movwf	??_readIAnalog+3
  9430  0F77  3F43               	moviw [3]fsr1
  9431  0F78  00AC               	movwf	??_readIAnalog+4
  9432  0F79  0867               	movf	_sampleIndex+1,w
  9433  0F7A  00AE               	movwf	??_readIAnalog+6
  9434  0F7B  0866               	movf	_sampleIndex,w
  9435  0F7C  00AD               	movwf	??_readIAnalog+5
  9436  0F7D  35AD               	lslf	??_readIAnalog+5,f
  9437  0F7E  0DAE               	rlf	??_readIAnalog+6,f
  9438  0F7F  0827               	movf	readIAnalog@channel+1,w
  9439  0F80  00F1               	movwf	___wmul@multiplier+1
  9440  0F81  0826               	movf	readIAnalog@channel,w
  9441  0F82  00F0               	movwf	___wmul@multiplier
  9442  0F83  3096               	movlw	150
  9443  0F84  00F2               	movwf	___wmul@multiplicand
  9444  0F85  3000               	movlw	0
  9445  0F86  00F3               	movwf	___wmul@multiplicand+1
  9446  0F87  3193  237F  318E   	fcall	___wmul
  9447  0F8A  3098               	movlw	152
  9448  0F8B  0020               	movlb	0	; select bank0
  9449  0F8C  00AF               	movwf	??_readIAnalog+7
  9450  0F8D  3021               	movlw	33
  9451  0F8E  00B0               	movwf	??_readIAnalog+8
  9452  0F8F  0870               	movf	?___wmul,w
  9453  0F90  072F               	addwf	??_readIAnalog+7,w
  9454  0F91  00B1               	movwf	??_readIAnalog+9
  9455  0F92  0871               	movf	?___wmul+1,w
  9456  0F93  3D30               	addwfc	??_readIAnalog+8,w
  9457  0F94  00B2               	movwf	??_readIAnalog+10
  9458  0F95  082D               	movf	??_readIAnalog+5,w
  9459  0F96  0731               	addwf	??_readIAnalog+9,w
  9460  0F97  0086               	movwf	6
  9461  0F98  082E               	movf	??_readIAnalog+6,w
  9462  0F99  3D32               	addwfc	??_readIAnalog+10,w
  9463  0F9A  0087               	movwf	7
  9464  0F9B  3F40               	moviw [0]fsr1
  9465  0F9C  00B3               	movwf	??_readIAnalog+11
  9466  0F9D  3F41               	moviw [1]fsr1
  9467  0F9E  00B4               	movwf	??_readIAnalog+12
  9468  0F9F  0833               	movf	??_readIAnalog+11,w
  9469  0FA0  00B5               	movwf	??_readIAnalog+13
  9470  0FA1  0834               	movf	??_readIAnalog+12,w
  9471  0FA2  00B6               	movwf	??_readIAnalog+14
  9472  0FA3  3000               	movlw	0
  9473  0FA4  1BB6               	btfsc	??_readIAnalog+14,7
  9474  0FA5  30FF               	movlw	255
  9475  0FA6  00B7               	movwf	??_readIAnalog+15
  9476  0FA7  00B8               	movwf	??_readIAnalog+16
  9477  0FA8  0835               	movf	??_readIAnalog+13,w
  9478  0FA9  07A9               	addwf	??_readIAnalog+1,f
  9479  0FAA  0836               	movf	??_readIAnalog+14,w
  9480  0FAB  3DAA               	addwfc	??_readIAnalog+2,f
  9481  0FAC  0837               	movf	??_readIAnalog+15,w
  9482  0FAD  3DAB               	addwfc	??_readIAnalog+3,f
  9483  0FAE  0838               	movf	??_readIAnalog+16,w
  9484  0FAF  3DAC               	addwfc	??_readIAnalog+4,f
  9485  0FB0  0826               	movf	readIAnalog@channel,w
  9486  0FB1  00B9               	movwf	??_readIAnalog+17
  9487  0FB2  3001               	movlw	1
  9488  0FB3                     u3145:	
  9489  0FB3  35B9               	lslf	??_readIAnalog+17,f
  9490  0FB4  3EFF               	addlw	-1
  9491  0FB5  1D03               	skipz
  9492  0FB6  2FB3               	goto	u3145
  9493  0FB7  3539               	lslf	??_readIAnalog+17,w
  9494  0FB8  3E20               	addlw	(low (_totals| (0+256)))& (0+255)
  9495  0FB9  0086               	movwf	6
  9496  0FBA  3001               	movlw	1	; select bank2/3
  9497  0FBB  0087               	movwf	7
  9498  0FBC  0829               	movf	??_readIAnalog+1,w
  9499  0FBD  3FC0               	movwi [0]fsr1
  9500  0FBE  082A               	movf	??_readIAnalog+2,w
  9501  0FBF  3FC1               	movwi [1]fsr1
  9502  0FC0  082B               	movf	??_readIAnalog+3,w
  9503  0FC1  3FC2               	movwi [2]fsr1
  9504  0FC2  082C               	movf	??_readIAnalog+4,w
  9505  0FC3  3FC3               	movwi [3]fsr1
  9506                           
  9507                           ;adc.c: 91: if(channel>=(4-1))
  9508  0FC4  3000               	movlw	0
  9509  0FC5  0227               	subwf	readIAnalog@channel+1,w
  9510  0FC6  3003               	movlw	3
  9511  0FC7  1903               	skipnz
  9512  0FC8  0226               	subwf	readIAnalog@channel,w
  9513  0FC9  1C03               	skipc
  9514  0FCA  2FD8               	goto	l2851
  9515                           
  9516                           ;adc.c: 92: {
  9517                           ;adc.c: 93: sampleIndex+=1;
  9518  0FCB  3001               	movlw	1
  9519  0FCC  07E6               	addwf	_sampleIndex,f
  9520  0FCD  3000               	movlw	0
  9521  0FCE  3DE7               	addwfc	_sampleIndex+1,f
  9522                           
  9523                           ;adc.c: 94: if(sampleIndex >= 75)sampleIndex = 0;
  9524  0FCF  3000               	movlw	0
  9525  0FD0  0267               	subwf	_sampleIndex+1,w
  9526  0FD1  304B               	movlw	75
  9527  0FD2  1903               	skipnz
  9528  0FD3  0266               	subwf	_sampleIndex,w
  9529  0FD4  1C03               	skipc
  9530  0FD5  2FD8               	goto	l2851
  9531  0FD6  01E6               	clrf	_sampleIndex
  9532  0FD7  01E7               	clrf	_sampleIndex+1
  9533  0FD8                     l2851:	
  9534                           
  9535                           ;adc.c: 95: }
  9536                           ;adc.c: 97: value = totals[channel]/75;
  9537  0FD8  3000               	movlw	0
  9538  0FD9  00F3               	movwf	___aldiv@divisor+3
  9539  0FDA  3000               	movlw	0
  9540  0FDB  00F2               	movwf	___aldiv@divisor+2
  9541  0FDC  3000               	movlw	0
  9542  0FDD  00F1               	movwf	___aldiv@divisor+1
  9543  0FDE  304B               	movlw	75
  9544  0FDF  00F0               	movwf	___aldiv@divisor
  9545  0FE0  0826               	movf	readIAnalog@channel,w
  9546  0FE1  00A8               	movwf	??_readIAnalog
  9547  0FE2  3001               	movlw	1
  9548  0FE3                     u3175:	
  9549  0FE3  35A8               	lslf	??_readIAnalog,f
  9550  0FE4  3EFF               	addlw	-1
  9551  0FE5  1D03               	skipz
  9552  0FE6  2FE3               	goto	u3175
  9553  0FE7  3528               	lslf	??_readIAnalog,w
  9554  0FE8  3E20               	addlw	(low (_totals| (0+256)))& (0+255)
  9555  0FE9  0086               	movwf	6
  9556  0FEA  3001               	movlw	1	; select bank2/3
  9557  0FEB  0087               	movwf	7
  9558  0FEC  3F40               	moviw [0]fsr1
  9559  0FED  00F4               	movwf	___aldiv@dividend
  9560  0FEE  3F41               	moviw [1]fsr1
  9561  0FEF  00F5               	movwf	___aldiv@dividend+1
  9562  0FF0  3F42               	moviw [2]fsr1
  9563  0FF1  00F6               	movwf	___aldiv@dividend+2
  9564  0FF2  3F43               	moviw [3]fsr1
  9565  0FF3  00F7               	movwf	___aldiv@dividend+3
  9566  0FF4  3188  20D0         	fcall	___aldiv
  9567  0FF6  0871               	movf	?___aldiv+1,w
  9568  0FF7  00FC               	movwf	readIAnalog@value+1
  9569  0FF8  0870               	movf	?___aldiv,w
  9570  0FF9  00FB               	movwf	readIAnalog@value
  9571                           
  9572                           ;adc.c: 99: return value;
  9573  0FFA  087C               	movf	readIAnalog@value+1,w
  9574  0FFB  0020               	movlb	0	; select bank0
  9575  0FFC  00A7               	movwf	?_readIAnalog+1
  9576  0FFD  087B               	movf	readIAnalog@value,w
  9577  0FFE  00A6               	movwf	?_readIAnalog
  9578  0FFF  0008               	return
  9579  1000                     __end_of_readIAnalog:	
  9580                           
  9581                           	psect	text9
  9582  08D0                     __ptext9:	
  9583 ;; *************** function ___aldiv *****************
  9584 ;; Defined at:
  9585 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\aldiv.c"
  9586 ;; Parameters:    Size  Location     Type
  9587 ;;  divisor         4    0[COMMON] long 
  9588 ;;  dividend        4    4[COMMON] long 
  9589 ;; Auto vars:     Size  Location     Type
  9590 ;;  quotient        4    2[BANK0 ] long 
  9591 ;;  sign            1    1[BANK0 ] unsigned char 
  9592 ;;  counter         1    0[BANK0 ] unsigned char 
  9593 ;; Return value:  Size  Location     Type
  9594 ;;                  4    0[COMMON] long 
  9595 ;; Registers used:
  9596 ;;		wreg, status,2, status,0
  9597 ;; Tracked objects:
  9598 ;;		On entry : 0/0
  9599 ;;		On exit  : 0/0
  9600 ;;		Unchanged: 0/0
  9601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9602 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9603 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9604 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9605 ;;      Totals:         9       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9606 ;;Total ram usage:       15 bytes
  9607 ;; Hardware stack levels used:    1
  9608 ;; This function calls:
  9609 ;;		Nothing
  9610 ;; This function is called by:
  9611 ;;		_readIAnalog
  9612 ;; This function uses a non-reentrant model
  9613 ;;
  9614                           
  9615                           
  9616                           ;psect for function ___aldiv
  9617  08D0                     ___aldiv:	
  9618                           
  9619                           ;incstack = 0
  9620                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  9621  08D0  0020               	movlb	0	; select bank0
  9622  08D1  01A1               	clrf	___aldiv@sign
  9623  08D2  1FF3               	btfss	___aldiv@divisor+3,7
  9624  08D3  28E1               	goto	l636
  9625  08D4  09F0               	comf	___aldiv@divisor,f
  9626  08D5  09F1               	comf	___aldiv@divisor+1,f
  9627  08D6  09F2               	comf	___aldiv@divisor+2,f
  9628  08D7  09F3               	comf	___aldiv@divisor+3,f
  9629  08D8  0AF0               	incf	___aldiv@divisor,f
  9630  08D9  1903               	skipnz
  9631  08DA  0AF1               	incf	___aldiv@divisor+1,f
  9632  08DB  1903               	skipnz
  9633  08DC  0AF2               	incf	___aldiv@divisor+2,f
  9634  08DD  1903               	skipnz
  9635  08DE  0AF3               	incf	___aldiv@divisor+3,f
  9636  08DF  01A1               	clrf	___aldiv@sign
  9637  08E0  0AA1               	incf	___aldiv@sign,f
  9638  08E1                     l636:	
  9639  08E1  1FF7               	btfss	___aldiv@dividend+3,7
  9640  08E2  28F2               	goto	l2691
  9641  08E3  09F4               	comf	___aldiv@dividend,f
  9642  08E4  09F5               	comf	___aldiv@dividend+1,f
  9643  08E5  09F6               	comf	___aldiv@dividend+2,f
  9644  08E6  09F7               	comf	___aldiv@dividend+3,f
  9645  08E7  0AF4               	incf	___aldiv@dividend,f
  9646  08E8  1903               	skipnz
  9647  08E9  0AF5               	incf	___aldiv@dividend+1,f
  9648  08EA  1903               	skipnz
  9649  08EB  0AF6               	incf	___aldiv@dividend+2,f
  9650  08EC  1903               	skipnz
  9651  08ED  0AF7               	incf	___aldiv@dividend+3,f
  9652  08EE  3001               	movlw	1
  9653  08EF  00F8               	movwf	??___aldiv
  9654  08F0  0878               	movf	??___aldiv,w
  9655  08F1  06A1               	xorwf	___aldiv@sign,f
  9656  08F2                     l2691:	
  9657  08F2  3000               	movlw	0
  9658  08F3  00A5               	movwf	___aldiv@quotient+3
  9659  08F4  3000               	movlw	0
  9660  08F5  00A4               	movwf	___aldiv@quotient+2
  9661  08F6  3000               	movlw	0
  9662  08F7  00A3               	movwf	___aldiv@quotient+1
  9663  08F8  3000               	movlw	0
  9664  08F9  00A2               	movwf	___aldiv@quotient
  9665  08FA  0873               	movf	___aldiv@divisor+3,w
  9666  08FB  0472               	iorwf	___aldiv@divisor+2,w
  9667  08FC  0471               	iorwf	___aldiv@divisor+1,w
  9668  08FD  0470               	iorwf	___aldiv@divisor,w
  9669  08FE  1903               	skipnz
  9670  08FF  293B               	goto	l2713
  9671  0900  01A0               	clrf	___aldiv@counter
  9672  0901  0AA0               	incf	___aldiv@counter,f
  9673  0902                     l2699:	
  9674  0902  1BF3               	btfsc	___aldiv@divisor+3,7
  9675  0903  2910               	goto	l2701
  9676  0904  3001               	movlw	1
  9677  0905                     u2795:	
  9678  0905  35F0               	lslf	___aldiv@divisor,f
  9679  0906  0DF1               	rlf	___aldiv@divisor+1,f
  9680  0907  0DF2               	rlf	___aldiv@divisor+2,f
  9681  0908  0DF3               	rlf	___aldiv@divisor+3,f
  9682  0909  0B89               	decfsz	9,f
  9683  090A  2905               	goto	u2795
  9684  090B  3001               	movlw	1
  9685  090C  00F8               	movwf	??___aldiv
  9686  090D  0878               	movf	??___aldiv,w
  9687  090E  07A0               	addwf	___aldiv@counter,f
  9688  090F  2902               	goto	l2699
  9689  0910                     l2701:	
  9690  0910  3001               	movlw	1
  9691  0911                     u2815:	
  9692  0911  35A2               	lslf	___aldiv@quotient,f
  9693  0912  0DA3               	rlf	___aldiv@quotient+1,f
  9694  0913  0DA4               	rlf	___aldiv@quotient+2,f
  9695  0914  0DA5               	rlf	___aldiv@quotient+3,f
  9696  0915  0B89               	decfsz	9,f
  9697  0916  2911               	goto	u2815
  9698  0917  0873               	movf	___aldiv@divisor+3,w
  9699  0918  0277               	subwf	___aldiv@dividend+3,w
  9700  0919  1D03               	skipz
  9701  091A  2925               	goto	u2825
  9702  091B  0872               	movf	___aldiv@divisor+2,w
  9703  091C  0276               	subwf	___aldiv@dividend+2,w
  9704  091D  1D03               	skipz
  9705  091E  2925               	goto	u2825
  9706  091F  0871               	movf	___aldiv@divisor+1,w
  9707  0920  0275               	subwf	___aldiv@dividend+1,w
  9708  0921  1D03               	skipz
  9709  0922  2925               	goto	u2825
  9710  0923  0870               	movf	___aldiv@divisor,w
  9711  0924  0274               	subwf	___aldiv@dividend,w
  9712  0925                     u2825:	
  9713  0925  1C03               	skipc
  9714  0926  2930               	goto	l2709
  9715  0927  0870               	movf	___aldiv@divisor,w
  9716  0928  02F4               	subwf	___aldiv@dividend,f
  9717  0929  0871               	movf	___aldiv@divisor+1,w
  9718  092A  3BF5               	subwfb	___aldiv@dividend+1,f
  9719  092B  0872               	movf	___aldiv@divisor+2,w
  9720  092C  3BF6               	subwfb	___aldiv@dividend+2,f
  9721  092D  0873               	movf	___aldiv@divisor+3,w
  9722  092E  3BF7               	subwfb	___aldiv@dividend+3,f
  9723  092F  1422               	bsf	___aldiv@quotient,0
  9724  0930                     l2709:	
  9725  0930  3001               	movlw	1
  9726  0931                     u2835:	
  9727  0931  36F3               	lsrf	___aldiv@divisor+3,f
  9728  0932  0CF2               	rrf	___aldiv@divisor+2,f
  9729  0933  0CF1               	rrf	___aldiv@divisor+1,f
  9730  0934  0CF0               	rrf	___aldiv@divisor,f
  9731  0935  0B89               	decfsz	9,f
  9732  0936  2931               	goto	u2835
  9733  0937  3001               	movlw	1
  9734  0938  02A0               	subwf	___aldiv@counter,f
  9735  0939  1D03               	btfss	3,2
  9736  093A  2910               	goto	l2701
  9737  093B                     l2713:	
  9738  093B  0821               	movf	___aldiv@sign,w
  9739  093C  1903               	btfsc	3,2
  9740  093D  2949               	goto	l2717
  9741  093E  09A2               	comf	___aldiv@quotient,f
  9742  093F  09A3               	comf	___aldiv@quotient+1,f
  9743  0940  09A4               	comf	___aldiv@quotient+2,f
  9744  0941  09A5               	comf	___aldiv@quotient+3,f
  9745  0942  0AA2               	incf	___aldiv@quotient,f
  9746  0943  1903               	skipnz
  9747  0944  0AA3               	incf	___aldiv@quotient+1,f
  9748  0945  1903               	skipnz
  9749  0946  0AA4               	incf	___aldiv@quotient+2,f
  9750  0947  1903               	skipnz
  9751  0948  0AA5               	incf	___aldiv@quotient+3,f
  9752  0949                     l2717:	
  9753  0949  0825               	movf	___aldiv@quotient+3,w
  9754  094A  00F3               	movwf	?___aldiv+3
  9755  094B  0824               	movf	___aldiv@quotient+2,w
  9756  094C  00F2               	movwf	?___aldiv+2
  9757  094D  0823               	movf	___aldiv@quotient+1,w
  9758  094E  00F1               	movwf	?___aldiv+1
  9759  094F  0822               	movf	___aldiv@quotient,w
  9760  0950  00F0               	movwf	?___aldiv
  9761  0951  0008               	return
  9762  0952                     __end_of___aldiv:	
  9763                           
  9764                           	psect	text10
  9765  084E                     __ptext10:	
  9766 ;; *************** function _readButton *****************
  9767 ;; Defined at:
  9768 ;;		line 9 in file "buttons.c"
  9769 ;; Parameters:    Size  Location     Type
  9770 ;;		None
  9771 ;; Auto vars:     Size  Location     Type
  9772 ;;		None
  9773 ;; Return value:  Size  Location     Type
  9774 ;;                  1    wreg      unsigned char 
  9775 ;; Registers used:
  9776 ;;		wreg, status,2, status,0, pclath, cstack
  9777 ;; Tracked objects:
  9778 ;;		On entry : 0/0
  9779 ;;		On exit  : 0/0
  9780 ;;		Unchanged: 0/0
  9781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9782 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9783 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9784 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9785 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9786 ;;Total ram usage:        2 bytes
  9787 ;; Hardware stack levels used:    1
  9788 ;; Hardware stack levels required when called:    1
  9789 ;; This function calls:
  9790 ;;		_ADCRead
  9791 ;; This function is called by:
  9792 ;;		_main
  9793 ;; This function uses a non-reentrant model
  9794 ;;
  9795                           
  9796                           
  9797                           ;psect for function _readButton
  9798  084E                     _readButton:	
  9799                           
  9800                           ;buttons.c: 11: readButtons = ADCRead(11);
  9801                           
  9802                           ;incstack = 0
  9803                           ; Regs used in _readButton: [wreg+status,2+status,0+pclath+cstack]
  9804  084E  300B               	movlw	11
  9805  084F  3193  233E  3188   	fcall	_ADCRead
  9806  0852  0871               	movf	?_ADCRead+1,w
  9807  0853  0020               	movlb	0	; select bank0
  9808  0854  00DF               	movwf	_readButtons+1
  9809  0855  0870               	movf	?_ADCRead,w
  9810  0856  00DE               	movwf	_readButtons
  9811                           
  9812                           ;buttons.c: 13: if(readButtons >= 425 && readButtons < 485)
  9813  0857  085F               	movf	_readButtons+1,w
  9814  0858  3A80               	xorlw	128
  9815  0859  00F4               	movwf	??_readButton
  9816  085A  3081               	movlw	129
  9817  085B  0274               	subwf	??_readButton,w
  9818  085C  1D03               	skipz
  9819  085D  2860               	goto	u3405
  9820  085E  30A9               	movlw	169
  9821  085F  025E               	subwf	_readButtons,w
  9822  0860                     u3405:	
  9823  0860  1C03               	skipc
  9824  0861  2872               	goto	l2949
  9825  0862  0020               	movlb	0	; select bank0
  9826  0863  085F               	movf	_readButtons+1,w
  9827  0864  3A80               	xorlw	128
  9828  0865  00F4               	movwf	??_readButton
  9829  0866  3081               	movlw	129
  9830  0867  0274               	subwf	??_readButton,w
  9831  0868  1D03               	skipz
  9832  0869  286C               	goto	u3415
  9833  086A  30E5               	movlw	229
  9834  086B  025E               	subwf	_readButtons,w
  9835  086C                     u3415:	
  9836  086C  1803               	skipnc
  9837  086D  2872               	goto	l2949
  9838                           
  9839                           ;buttons.c: 14: {
  9840                           ;buttons.c: 15: button = 1;
  9841  086E  0020               	movlb	0	; select bank0
  9842  086F  01EA               	clrf	_button
  9843  0870  0AEA               	incf	_button,f
  9844                           
  9845                           ;buttons.c: 16: }
  9846  0871  28A0               	goto	l2961
  9847  0872                     l2949:	
  9848                           
  9849                           ;buttons.c: 18: else if(readButtons >= 615 && readButtons < 690)
  9850  0872  0020               	movlb	0	; select bank0
  9851  0873  085F               	movf	_readButtons+1,w
  9852  0874  3A80               	xorlw	128
  9853  0875  00F4               	movwf	??_readButton
  9854  0876  3082               	movlw	130
  9855  0877  0274               	subwf	??_readButton,w
  9856  0878  1D03               	skipz
  9857  0879  287C               	goto	u3425
  9858  087A  3067               	movlw	103
  9859  087B  025E               	subwf	_readButtons,w
  9860  087C                     u3425:	
  9861  087C  1C03               	skipc
  9862  087D  288C               	goto	l2955
  9863  087E  0020               	movlb	0	; select bank0
  9864  087F  085F               	movf	_readButtons+1,w
  9865  0880  3A80               	xorlw	128
  9866  0881  00F4               	movwf	??_readButton
  9867  0882  3082               	movlw	130
  9868  0883  0274               	subwf	??_readButton,w
  9869  0884  1D03               	skipz
  9870  0885  2888               	goto	u3435
  9871  0886  30B2               	movlw	178
  9872  0887  025E               	subwf	_readButtons,w
  9873  0888                     u3435:	
  9874  0888  1803               	skipnc
  9875  0889  288C               	goto	l2955
  9876                           
  9877                           ;buttons.c: 19: {
  9878                           ;buttons.c: 20: button = 2;
  9879  088A  3002               	movlw	2
  9880  088B  2899               	goto	L6
  9881  088C                     l2955:	
  9882                           ;buttons.c: 21: }
  9883                           
  9884                           
  9885                           ;buttons.c: 23: else if(readButtons > 800)
  9886  088C  0020               	movlb	0	; select bank0
  9887  088D  085F               	movf	_readButtons+1,w
  9888  088E  3A80               	xorlw	128
  9889  088F  00F4               	movwf	??_readButton
  9890  0890  3083               	movlw	131
  9891  0891  0274               	subwf	??_readButton,w
  9892  0892  1D03               	skipz
  9893  0893  2896               	goto	u3445
  9894  0894  3021               	movlw	33
  9895  0895  025E               	subwf	_readButtons,w
  9896  0896                     u3445:	
  9897  0896  1C03               	skipc
  9898  0897  289E               	goto	l2959
  9899                           
  9900                           ;buttons.c: 24: {
  9901                           ;buttons.c: 25: button = 3;
  9902  0898  3003               	movlw	3
  9903  0899                     L6:	
  9904  0899  00F4               	movwf	??_readButton
  9905  089A  0874               	movf	??_readButton,w
  9906  089B  0020               	movlb	0	; select bank0
  9907  089C  00EA               	movwf	_button
  9908                           
  9909                           ;buttons.c: 26: }
  9910  089D  28A0               	goto	l2961
  9911  089E                     l2959:	
  9912                           
  9913                           ;buttons.c: 28: else
  9914                           ;buttons.c: 29: {
  9915                           ;buttons.c: 30: button = 0;
  9916  089E  0020               	movlb	0	; select bank0
  9917  089F  01EA               	clrf	_button
  9918  08A0                     l2961:	
  9919                           
  9920                           ;buttons.c: 31: }
  9921                           ;buttons.c: 33: if (button != 0)
  9922  08A0  086A               	movf	_button,w
  9923  08A1  1903               	btfsc	3,2
  9924  08A2  28CD               	goto	l2981
  9925                           
  9926                           ;buttons.c: 34: {
  9927                           ;buttons.c: 35: if (button != lastButton)
  9928  08A3  086A               	movf	_button,w
  9929  08A4  0669               	xorwf	_lastButton,w
  9930  08A5  1903               	skipnz
  9931  08A6  28AC               	goto	l2969
  9932                           
  9933                           ;buttons.c: 36: {
  9934                           ;buttons.c: 37: lastButton = button;
  9935  08A7  086A               	movf	_button,w
  9936  08A8  00F4               	movwf	??_readButton
  9937  08A9  0874               	movf	??_readButton,w
  9938  08AA  00E9               	movwf	_lastButton
  9939  08AB  28CD               	goto	l2981
  9940  08AC                     l2969:	
  9941                           ;buttons.c: 39: }
  9942                           
  9943                           ;buttons.c: 38: j = 0;
  9944                           
  9945                           
  9946                           ;buttons.c: 40: else
  9947                           ;buttons.c: 41: {
  9948                           ;buttons.c: 42: j += 1;
  9949  08AC  3001               	movlw	1
  9950  08AD  00F4               	movwf	??_readButton
  9951  08AE  0874               	movf	??_readButton,w
  9952  08AF  07E8               	addwf	_j,f
  9953                           
  9954                           ;buttons.c: 44: if(j == 1)
  9955  08B0  0368               	decf	_j,w
  9956  08B1  1D03               	btfss	3,2
  9957  08B2  28B5               	goto	l2975
  9958                           
  9959                           ;buttons.c: 45: {
  9960                           ;buttons.c: 46: return (lastButton);
  9961  08B3  0869               	movf	_lastButton,w
  9962  08B4  0008               	return
  9963  08B5                     l2975:	
  9964                           
  9965                           ;buttons.c: 47: }
  9966                           ;buttons.c: 49: if (j >10)
  9967  08B5  0868               	movf	_j,w
  9968  08B6  3A80               	xorlw	128
  9969  08B7  3E75               	addlw	-139
  9970  08B8  1C03               	skipc
  9971  08B9  28CE               	goto	l2983
  9972                           
  9973                           ;buttons.c: 50: {
  9974                           ;buttons.c: 51: _delay((unsigned long)((25)*(32000000/4000.0)));
  9975  08BA  3002               	movlw	2
  9976  08BB  00F5               	movwf	??_readButton+1
  9977  08BC  3004               	movlw	4
  9978  08BD  00F4               	movwf	??_readButton
  9979  08BE  30BA               	movlw	186
  9980  08BF                     u3967:	
  9981  08BF  0B89               	decfsz	9,f
  9982  08C0  28BF               	goto	u3967
  9983  08C1  0BF4               	decfsz	??_readButton,f
  9984  08C2  28BF               	goto	u3967
  9985  08C3  0BF5               	decfsz	??_readButton+1,f
  9986  08C4  28BF               	goto	u3967
  9987  08C5  3200               	nop2
  9988                           
  9989                           ;buttons.c: 52: j = 10;
  9990  08C6  300A               	movlw	10
  9991  08C7  00F4               	movwf	??_readButton
  9992  08C8  0874               	movf	??_readButton,w
  9993  08C9  0020               	movlb	0	; select bank0
  9994  08CA  00E8               	movwf	_j
  9995                           
  9996                           ;buttons.c: 53: return (lastButton);
  9997  08CB  0869               	movf	_lastButton,w
  9998  08CC  0008               	return
  9999  08CD                     l2981:	
 10000                           ;buttons.c: 54: }
 10001                           ;buttons.c: 55: }
 10002                           ;buttons.c: 56: goto end;
 10003                           
 10004                           
 10005                           ;buttons.c: 57: }
 10006                           ;buttons.c: 59: j = 0;
 10007  08CD  01E8               	clrf	_j
 10008  08CE                     l2983:	
 10009                           ;buttons.c: 61: end:
 10010                           
 10011                           
 10012                           ;buttons.c: 63: return (0);
 10013  08CE  3000               	movlw	0
 10014  08CF  0008               	return
 10015  08D0                     __end_of_readButton:	
 10016                           
 10017                           	psect	text11
 10018  133E                     __ptext11:	
 10019 ;; *************** function _ADCRead *****************
 10020 ;; Defined at:
 10021 ;;		line 21 in file "adc.c"
 10022 ;; Parameters:    Size  Location     Type
 10023 ;;  channel         1    wreg     enum E14259
 10024 ;; Auto vars:     Size  Location     Type
 10025 ;;  channel         1    3[COMMON] enum E14259
 10026 ;; Return value:  Size  Location     Type
 10027 ;;                  2    0[COMMON] int 
 10028 ;; Registers used:
 10029 ;;		wreg
 10030 ;; Tracked objects:
 10031 ;;		On entry : 0/0
 10032 ;;		On exit  : 0/0
 10033 ;;		Unchanged: 0/0
 10034 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10035 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10036 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10037 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10038 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10039 ;;Total ram usage:        4 bytes
 10040 ;; Hardware stack levels used:    1
 10041 ;; This function calls:
 10042 ;;		Nothing
 10043 ;; This function is called by:
 10044 ;;		_readIAnalog
 10045 ;;		_readButton
 10046 ;;		_main
 10047 ;; This function uses a non-reentrant model
 10048 ;;
 10049                           
 10050                           
 10051                           ;psect for function _ADCRead
 10052  133E                     _ADCRead:	
 10053                           
 10054                           ;incstack = 0
 10055                           ; Regs used in _ADCRead: [wreg]
 10056                           ;ADCRead@channel stored from wreg
 10057  133E  00F3               	movwf	ADCRead@channel
 10058                           
 10059                           ;adc.c: 23: ADPCH = channel_VSS;
 10060  133F  303C               	movlw	60
 10061  1340  0021               	movlb	1	; select bank1
 10062  1341  009E               	movwf	30	;volatile
 10063                           
 10064                           ;adc.c: 25: ADCON0bits.ADON = 1;
 10065  1342  1793               	bsf	19,7	;volatile
 10066                           
 10067                           ;adc.c: 27: ADCON0bits.ADCONT = 0;
 10068  1343  1313               	bcf	19,6	;volatile
 10069                           
 10070                           ;adc.c: 29: ADCON0bits.ADGO = 1;
 10071  1344  1413               	bsf	19,0	;volatile
 10072  1345                     l57:	
 10073                           ;adc.c: 32: {
 10074                           
 10075                           ;adc.c: 31: while(ADCON0bits.ADGO)
 10076                           
 10077  1345  1813               	btfsc	19,0	;volatile
 10078  1346  2B45               	goto	l57
 10079                           
 10080                           ;adc.c: 33: }
 10081                           ;adc.c: 35: ADPCH = channel;
 10082  1347  0873               	movf	ADCRead@channel,w
 10083  1348  009E               	movwf	30	;volatile
 10084                           
 10085                           ;adc.c: 37: ADCON0bits.ADON = 1;
 10086  1349  1793               	bsf	19,7	;volatile
 10087                           
 10088                           ;adc.c: 39: ADCON0bits.ADCONT = 0;
 10089  134A  1313               	bcf	19,6	;volatile
 10090                           
 10091                           ;adc.c: 41: ADCON0bits.ADGO = 1;
 10092  134B  1413               	bsf	19,0	;volatile
 10093  134C                     l60:	
 10094                           ;adc.c: 44: {
 10095                           
 10096                           ;adc.c: 43: while(ADCON0bits.ADGO)
 10097                           
 10098  134C  1813               	btfsc	19,0	;volatile
 10099  134D  2B4C               	goto	l60
 10100                           
 10101                           ;adc.c: 45: }
 10102                           ;adc.c: 47: return ((ADRESH<<8)+ADRESL);
 10103  134E  080D               	movf	13,w	;volatile
 10104  134F  00F1               	movwf	?_ADCRead+1
 10105  1350  080C               	movf	12,w	;volatile
 10106  1351  00F0               	movwf	?_ADCRead
 10107  1352  0008               	return
 10108  1353                     __end_of_ADCRead:	
 10109                           
 10110                           	psect	text12
 10111  0D86                     __ptext12:	
 10112 ;; *************** function _cc_cv_mode *****************
 10113 ;; Defined at:
 10114 ;;		line 90 in file "battery_charger.c"
 10115 ;; Parameters:    Size  Location     Type
 10116 ;;  z               1    wreg     unsigned char 
 10117 ;; Auto vars:     Size  Location     Type
 10118 ;;  z               1   37[BANK0 ] unsigned char 
 10119 ;; Return value:  Size  Location     Type
 10120 ;;                  1    wreg      void 
 10121 ;; Registers used:
 10122 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10123 ;; Tracked objects:
 10124 ;;		On entry : 0/0
 10125 ;;		On exit  : 0/0
 10126 ;;		Unchanged: 0/0
 10127 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10128 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10129 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10130 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10131 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10132 ;;Total ram usage:        8 bytes
 10133 ;; Hardware stack levels used:    1
 10134 ;; Hardware stack levels required when called:    2
 10135 ;; This function calls:
 10136 ;;		___awtoft
 10137 ;;		___ftmul
 10138 ;;		___fttol
 10139 ;; This function is called by:
 10140 ;;		_main
 10141 ;; This function uses a non-reentrant model
 10142 ;;
 10143                           
 10144                           
 10145                           ;psect for function _cc_cv_mode
 10146  0D86                     _cc_cv_mode:	
 10147                           
 10148                           ;incstack = 0
 10149                           ; Regs used in _cc_cv_mode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10150                           ;cc_cv_mode@z stored from wreg
 10151  0D86  0020               	movlb	0	; select bank0
 10152  0D87  00C5               	movwf	cc_cv_mode@z
 10153                           
 10154                           ;battery_charger.c: 92: if(voltage[z]>=Vref[z])
 10155  0D88  3545               	lslf	cc_cv_mode@z,w
 10156  0D89  3E5A               	addlw	(low (_Vref| 0))& (0+255)
 10157  0D8A  0086               	movwf	6
 10158  0D8B  0187               	clrf	7
 10159  0D8C  3F40               	moviw [0]fsr1
 10160  0D8D  00BE               	movwf	??_cc_cv_mode
 10161  0D8E  3F41               	moviw [1]fsr1
 10162  0D8F  00BF               	movwf	??_cc_cv_mode+1
 10163  0D90  3545               	lslf	cc_cv_mode@z,w
 10164  0D91  3EB8               	addlw	(low (_voltage| 0))& (0+255)
 10165  0D92  0086               	movwf	6
 10166  0D93  0187               	clrf	7
 10167  0D94  3F40               	moviw [0]fsr1
 10168  0D95  00C0               	movwf	??_cc_cv_mode+2
 10169  0D96  3F41               	moviw [1]fsr1
 10170  0D97  00C1               	movwf	??_cc_cv_mode+3
 10171  0D98  0841               	movf	??_cc_cv_mode+3,w
 10172  0D99  3A80               	xorlw	128
 10173  0D9A  00C2               	movwf	??_cc_cv_mode+4
 10174  0D9B  083F               	movf	??_cc_cv_mode+1,w
 10175  0D9C  3A80               	xorlw	128
 10176  0D9D  0242               	subwf	??_cc_cv_mode+4,w
 10177  0D9E  1D03               	skipz
 10178  0D9F  2DA2               	goto	u3315
 10179  0DA0  083E               	movf	??_cc_cv_mode,w
 10180  0DA1  0240               	subwf	??_cc_cv_mode+2,w
 10181  0DA2                     u3315:	
 10182  0DA2  1C03               	skipc
 10183  0DA3  2DD1               	goto	l2921
 10184                           
 10185                           ;battery_charger.c: 93: {
 10186                           ;battery_charger.c: 94: if(VHoldMode[z]<10)VHoldMode[z]+=1;
 10187  0DA4  0020               	movlb	0	; select bank0
 10188  0DA5  0845               	movf	cc_cv_mode@z,w
 10189  0DA6  3E60               	addlw	(low (_VHoldMode| 0))& (0+255)
 10190  0DA7  0086               	movwf	6
 10191  0DA8  0187               	clrf	7
 10192  0DA9  0801               	movf	1,w
 10193  0DAA  3A80               	xorlw	128
 10194  0DAB  3E76               	addlw	-138
 10195  0DAC  1803               	skipnc
 10196  0DAD  2DB6               	goto	l129
 10197  0DAE  3001               	movlw	1
 10198  0DAF  00BE               	movwf	??_cc_cv_mode
 10199  0DB0  0845               	movf	cc_cv_mode@z,w
 10200  0DB1  3E60               	addlw	(low (_VHoldMode| 0))& (0+255)
 10201  0DB2  0086               	movwf	6
 10202  0DB3  0187               	clrf	7
 10203  0DB4  083E               	movf	??_cc_cv_mode,w
 10204  0DB5  0781               	addwf	1,f
 10205  0DB6                     l129:	
 10206                           
 10207                           ;battery_charger.c: 96: if(cc_cv[z])
 10208  0DB6  0845               	movf	cc_cv_mode@z,w
 10209  0DB7  3ED2               	addlw	(low (_cc_cv| 0))& (0+255)
 10210  0DB8  0086               	movwf	6
 10211  0DB9  0187               	clrf	7
 10212  0DBA  0801               	movf	1,w
 10213  0DBB  1903               	btfsc	3,2
 10214  0DBC  2DC4               	goto	l2917
 10215                           
 10216                           ;battery_charger.c: 97: {
 10217                           ;battery_charger.c: 98: cc_cv[z]-=1;
 10218  0DBD  0845               	movf	cc_cv_mode@z,w
 10219  0DBE  3ED2               	addlw	(low (_cc_cv| 0))& (0+255)
 10220  0DBF  0086               	movwf	6
 10221  0DC0  0187               	clrf	7
 10222  0DC1  3001               	movlw	1
 10223  0DC2  0281               	subwf	1,f
 10224                           
 10225                           ;battery_charger.c: 99: }
 10226  0DC3  2DF9               	goto	l133
 10227  0DC4                     l2917:	
 10228                           
 10229                           ;battery_charger.c: 100: else
 10230                           ;battery_charger.c: 101: {
 10231                           ;battery_charger.c: 102: if(Imode[z])
 10232  0DC4  0845               	movf	cc_cv_mode@z,w
 10233  0DC5  3E62               	addlw	(low (_Imode| 0))& (0+255)
 10234  0DC6  0086               	movwf	6
 10235  0DC7  0187               	clrf	7
 10236  0DC8  0801               	movf	1,w
 10237  0DC9  1903               	btfsc	3,2
 10238  0DCA  2DF9               	goto	l133
 10239                           
 10240                           ;battery_charger.c: 103: {
 10241                           ;battery_charger.c: 104: Imode[z]=0;
 10242  0DCB  0845               	movf	cc_cv_mode@z,w
 10243  0DCC  3E62               	addlw	(low (_Imode| 0))& (0+255)
 10244  0DCD  0086               	movwf	6
 10245  0DCE  0187               	clrf	7
 10246  0DCF  0181               	clrf	1
 10247                           
 10248                           ;battery_charger.c: 105: }
 10249                           ;battery_charger.c: 106: }
 10250                           ;battery_charger.c: 107: }
 10251  0DD0  2DF9               	goto	l133
 10252  0DD1                     l2921:	
 10253                           
 10254                           ;battery_charger.c: 108: else
 10255                           ;battery_charger.c: 109: {
 10256                           ;battery_charger.c: 110: VHoldMode[z]-=1;
 10257  0DD1  30FF               	movlw	255
 10258  0DD2  0020               	movlb	0	; select bank0
 10259  0DD3  00BE               	movwf	??_cc_cv_mode
 10260  0DD4  0845               	movf	cc_cv_mode@z,w
 10261  0DD5  3E60               	addlw	(low (_VHoldMode| 0))& (0+255)
 10262  0DD6  0086               	movwf	6
 10263  0DD7  0187               	clrf	7
 10264  0DD8  083E               	movf	??_cc_cv_mode,w
 10265  0DD9  0781               	addwf	1,f
 10266                           
 10267                           ;battery_charger.c: 111: if(VHoldMode[z]<(10*-1))
 10268  0DDA  0845               	movf	cc_cv_mode@z,w
 10269  0DDB  3E60               	addlw	(low (_VHoldMode| 0))& (0+255)
 10270  0DDC  0086               	movwf	6
 10271  0DDD  0187               	clrf	7
 10272  0DDE  0801               	movf	1,w
 10273  0DDF  3A80               	xorlw	128
 10274  0DE0  3E8A               	addlw	138
 10275  0DE1  1803               	skipnc
 10276  0DE2  2DF9               	goto	l133
 10277                           
 10278                           ;battery_charger.c: 112: {
 10279                           ;battery_charger.c: 113: Imode[z]=1;
 10280  0DE3  0845               	movf	cc_cv_mode@z,w
 10281  0DE4  3E62               	addlw	(low (_Imode| 0))& (0+255)
 10282  0DE5  0086               	movwf	6
 10283  0DE6  0187               	clrf	7
 10284  0DE7  0181               	clrf	1
 10285  0DE8  0A81               	incf	1,f
 10286                           
 10287                           ;battery_charger.c: 114: cc_cv[z]=(10*2);
 10288  0DE9  3014               	movlw	20
 10289  0DEA  00BE               	movwf	??_cc_cv_mode
 10290  0DEB  0845               	movf	cc_cv_mode@z,w
 10291  0DEC  3ED2               	addlw	(low (_cc_cv| 0))& (0+255)
 10292  0DED  0086               	movwf	6
 10293  0DEE  0187               	clrf	7
 10294  0DEF  083E               	movf	??_cc_cv_mode,w
 10295  0DF0  0081               	movwf	1
 10296                           
 10297                           ;battery_charger.c: 115: VHoldMode[z]=(10*-1);
 10298  0DF1  30F6               	movlw	246
 10299  0DF2  00BE               	movwf	??_cc_cv_mode
 10300  0DF3  0845               	movf	cc_cv_mode@z,w
 10301  0DF4  3E60               	addlw	(low (_VHoldMode| 0))& (0+255)
 10302  0DF5  0086               	movwf	6
 10303  0DF6  0187               	clrf	7
 10304  0DF7  083E               	movf	??_cc_cv_mode,w
 10305  0DF8  0081               	movwf	1
 10306  0DF9                     l133:	
 10307                           
 10308                           ;battery_charger.c: 116: }
 10309                           ;battery_charger.c: 117: }
 10310                           ;battery_charger.c: 119: if(current[z]>Iref[z])
 10311  0DF9  3545               	lslf	cc_cv_mode@z,w
 10312  0DFA  3EB0               	addlw	(low (_current| 0))& (0+255)
 10313  0DFB  0086               	movwf	6
 10314  0DFC  0187               	clrf	7
 10315  0DFD  3F40               	moviw [0]fsr1
 10316  0DFE  00BE               	movwf	??_cc_cv_mode
 10317  0DFF  3F41               	moviw [1]fsr1
 10318  0E00  00BF               	movwf	??_cc_cv_mode+1
 10319  0E01  3545               	lslf	cc_cv_mode@z,w
 10320  0E02  3EC0               	addlw	(low (_Iref| 0))& (0+255)
 10321  0E03  0086               	movwf	6
 10322  0E04  0187               	clrf	7
 10323  0E05  3F40               	moviw [0]fsr1
 10324  0E06  00C0               	movwf	??_cc_cv_mode+2
 10325  0E07  3F41               	moviw [1]fsr1
 10326  0E08  00C1               	movwf	??_cc_cv_mode+3
 10327  0E09  0841               	movf	??_cc_cv_mode+3,w
 10328  0E0A  3A80               	xorlw	128
 10329  0E0B  00C2               	movwf	??_cc_cv_mode+4
 10330  0E0C  083F               	movf	??_cc_cv_mode+1,w
 10331  0E0D  3A80               	xorlw	128
 10332  0E0E  0242               	subwf	??_cc_cv_mode+4,w
 10333  0E0F  1D03               	skipz
 10334  0E10  2E13               	goto	u3365
 10335  0E11  083E               	movf	??_cc_cv_mode,w
 10336  0E12  0240               	subwf	??_cc_cv_mode+2,w
 10337  0E13                     u3365:	
 10338  0E13  1803               	skipnc
 10339  0E14  0008               	return
 10340                           
 10341                           ;battery_charger.c: 120: {
 10342                           ;battery_charger.c: 121: if(!Imode[z])
 10343  0E15  0020               	movlb	0	; select bank0
 10344  0E16  0845               	movf	cc_cv_mode@z,w
 10345  0E17  3E62               	addlw	(low (_Imode| 0))& (0+255)
 10346  0E18  0086               	movwf	6
 10347  0E19  0187               	clrf	7
 10348  0E1A  0801               	movf	1,w
 10349  0E1B  1D03               	btfss	3,2
 10350  0E1C  0008               	return
 10351                           
 10352                           ;battery_charger.c: 122: {
 10353                           ;battery_charger.c: 123: if(batteryState[z]==FLOAT)
 10354  0E1D  0845               	movf	cc_cv_mode@z,w
 10355  0E1E  3E64               	addlw	(low (_batteryState| 0))& (0+255)
 10356  0E1F  0086               	movwf	6
 10357  0E20  0187               	clrf	7
 10358  0E21  3005               	movlw	5
 10359  0E22  0601               	xorwf	1,w
 10360  0E23  1D03               	btfss	3,2
 10361  0E24  0008               	return
 10362                           
 10363                           ;battery_charger.c: 124: {
 10364                           ;battery_charger.c: 125: if(voltage[z]<1350+(int16_t)((250-batteryTemp)*.24)-100)
 10365  0E25  096C               	comf	_batteryTemp,w
 10366  0E26  00BE               	movwf	??_cc_cv_mode
 10367  0E27  096D               	comf	_batteryTemp+1,w
 10368  0E28  00BF               	movwf	??_cc_cv_mode+1
 10369  0E29  0ABE               	incf	??_cc_cv_mode,f
 10370  0E2A  1903               	skipnz
 10371  0E2B  0ABF               	incf	??_cc_cv_mode+1,f
 10372  0E2C  083E               	movf	??_cc_cv_mode,w
 10373  0E2D  3EFA               	addlw	250
 10374  0E2E  00F8               	movwf	___awtoft@c
 10375  0E2F  3000               	movlw	0
 10376  0E30  3D3F               	addwfc	??_cc_cv_mode+1,w
 10377  0E31  00F9               	movwf	___awtoft@c+1
 10378  0E32  3193  23D7  318D   	fcall	___awtoft
 10379  0E35  0878               	movf	?___awtoft,w
 10380  0E36  0020               	movlb	0	; select bank0
 10381  0E37  00A3               	movwf	___ftmul@f2
 10382  0E38  0879               	movf	?___awtoft+1,w
 10383  0E39  00A4               	movwf	___ftmul@f2+1
 10384  0E3A  087A               	movf	?___awtoft+2,w
 10385  0E3B  00A5               	movwf	___ftmul@f2+2
 10386  0E3C  30C3               	movlw	195
 10387  0E3D  00A0               	movwf	___ftmul@f1
 10388  0E3E  3075               	movlw	117
 10389  0E3F  00A1               	movwf	___ftmul@f1+1
 10390  0E40  303E               	movlw	62
 10391  0E41  00A2               	movwf	___ftmul@f1+2
 10392  0E42  318B  2332  318D   	fcall	___ftmul
 10393  0E45  0020               	movlb	0	; select bank0
 10394  0E46  0820               	movf	?___ftmul,w
 10395  0E47  00B0               	movwf	___fttol@f1
 10396  0E48  0821               	movf	?___ftmul+1,w
 10397  0E49  00B1               	movwf	___fttol@f1+1
 10398  0E4A  0822               	movf	?___ftmul+2,w
 10399  0E4B  00B2               	movwf	___fttol@f1+2
 10400  0E4C  3189  2152  318D   	fcall	___fttol
 10401  0E4F  0020               	movlb	0	; select bank0
 10402  0E50  0830               	movf	?___fttol,w
 10403  0E51  3EE2               	addlw	226
 10404  0E52  00C0               	movwf	??_cc_cv_mode+2
 10405  0E53  3004               	movlw	4
 10406  0E54  3D31               	addwfc	?___fttol+1,w
 10407  0E55  00C1               	movwf	??_cc_cv_mode+3
 10408  0E56  3545               	lslf	cc_cv_mode@z,w
 10409  0E57  3EB8               	addlw	(low (_voltage| 0))& (0+255)
 10410  0E58  0086               	movwf	6
 10411  0E59  0187               	clrf	7
 10412  0E5A  3F40               	moviw [0]fsr1
 10413  0E5B  00C2               	movwf	??_cc_cv_mode+4
 10414  0E5C  3F41               	moviw [1]fsr1
 10415  0E5D  00C3               	movwf	??_cc_cv_mode+5
 10416  0E5E  0843               	movf	??_cc_cv_mode+5,w
 10417  0E5F  3A80               	xorlw	128
 10418  0E60  00C4               	movwf	??_cc_cv_mode+6
 10419  0E61  0841               	movf	??_cc_cv_mode+3,w
 10420  0E62  3A80               	xorlw	128
 10421  0E63  0244               	subwf	??_cc_cv_mode+6,w
 10422  0E64  1D03               	skipz
 10423  0E65  2E68               	goto	u3395
 10424  0E66  0840               	movf	??_cc_cv_mode+2,w
 10425  0E67  0242               	subwf	??_cc_cv_mode+4,w
 10426  0E68                     u3395:	
 10427  0E68  1803               	skipnc
 10428  0E69  0008               	return
 10429                           
 10430                           ;battery_charger.c: 126: {
 10431                           ;battery_charger.c: 127: batteryState[z]=CHARGE;
 10432  0E6A  3004               	movlw	4
 10433  0E6B  0020               	movlb	0	; select bank0
 10434  0E6C  00BE               	movwf	??_cc_cv_mode
 10435  0E6D  0845               	movf	cc_cv_mode@z,w
 10436  0E6E  3E64               	addlw	(low (_batteryState| 0))& (0+255)
 10437  0E6F  0086               	movwf	6
 10438  0E70  0187               	clrf	7
 10439  0E71  083E               	movf	??_cc_cv_mode,w
 10440  0E72  0081               	movwf	1
 10441                           
 10442                           ;battery_charger.c: 128: Vref[z]=1425+(int16_t)((250-batteryTemp)*.24);
 10443  0E73  096C               	comf	_batteryTemp,w
 10444  0E74  00BE               	movwf	??_cc_cv_mode
 10445  0E75  096D               	comf	_batteryTemp+1,w
 10446  0E76  00BF               	movwf	??_cc_cv_mode+1
 10447  0E77  0ABE               	incf	??_cc_cv_mode,f
 10448  0E78  1903               	skipnz
 10449  0E79  0ABF               	incf	??_cc_cv_mode+1,f
 10450  0E7A  083E               	movf	??_cc_cv_mode,w
 10451  0E7B  3EFA               	addlw	250
 10452  0E7C  00F8               	movwf	___awtoft@c
 10453  0E7D  3000               	movlw	0
 10454  0E7E  3D3F               	addwfc	??_cc_cv_mode+1,w
 10455  0E7F  00F9               	movwf	___awtoft@c+1
 10456  0E80  3193  23D7  318D   	fcall	___awtoft
 10457  0E83  0878               	movf	?___awtoft,w
 10458  0E84  0020               	movlb	0	; select bank0
 10459  0E85  00A3               	movwf	___ftmul@f2
 10460  0E86  0879               	movf	?___awtoft+1,w
 10461  0E87  00A4               	movwf	___ftmul@f2+1
 10462  0E88  087A               	movf	?___awtoft+2,w
 10463  0E89  00A5               	movwf	___ftmul@f2+2
 10464  0E8A  30C3               	movlw	195
 10465  0E8B  00A0               	movwf	___ftmul@f1
 10466  0E8C  3075               	movlw	117
 10467  0E8D  00A1               	movwf	___ftmul@f1+1
 10468  0E8E  303E               	movlw	62
 10469  0E8F  00A2               	movwf	___ftmul@f1+2
 10470  0E90  318B  2332  318D   	fcall	___ftmul
 10471  0E93  0020               	movlb	0	; select bank0
 10472  0E94  0820               	movf	?___ftmul,w
 10473  0E95  00B0               	movwf	___fttol@f1
 10474  0E96  0821               	movf	?___ftmul+1,w
 10475  0E97  00B1               	movwf	___fttol@f1+1
 10476  0E98  0822               	movf	?___ftmul+2,w
 10477  0E99  00B2               	movwf	___fttol@f1+2
 10478  0E9A  3189  2152         	fcall	___fttol
 10479  0E9C  0020               	movlb	0	; select bank0
 10480  0E9D  0830               	movf	?___fttol,w
 10481  0E9E  3E91               	addlw	145
 10482  0E9F  00C0               	movwf	??_cc_cv_mode+2
 10483  0EA0  3005               	movlw	5
 10484  0EA1  3D31               	addwfc	?___fttol+1,w
 10485  0EA2  00C1               	movwf	??_cc_cv_mode+3
 10486  0EA3  3545               	lslf	cc_cv_mode@z,w
 10487  0EA4  3E5A               	addlw	(low (_Vref| 0))& (0+255)
 10488  0EA5  0086               	movwf	6
 10489  0EA6  0187               	clrf	7
 10490  0EA7  0840               	movf	??_cc_cv_mode+2,w
 10491  0EA8  3FC0               	movwi [0]fsr1
 10492  0EA9  0841               	movf	??_cc_cv_mode+3,w
 10493  0EAA  3FC1               	movwi [1]fsr1
 10494                           
 10495                           ;battery_charger.c: 129: Iref[z]=35;
 10496  0EAB  3545               	lslf	cc_cv_mode@z,w
 10497  0EAC  3EC0               	addlw	(low (_Iref| 0))& (0+255)
 10498  0EAD  0086               	movwf	6
 10499  0EAE  0187               	clrf	7
 10500  0EAF  3023               	movlw	35
 10501  0EB0  3FC0               	movwi [0]fsr1
 10502  0EB1  3000               	movlw	0
 10503  0EB2  3FC1               	movwi [1]fsr1
 10504                           
 10505                           ;battery_charger.c: 130: Imode[z]=1;
 10506  0EB3  0845               	movf	cc_cv_mode@z,w
 10507  0EB4  3E62               	addlw	(low (_Imode| 0))& (0+255)
 10508  0EB5  0086               	movwf	6
 10509  0EB6  0187               	clrf	7
 10510  0EB7  0181               	clrf	1
 10511  0EB8  0A81               	incf	1,f
 10512                           
 10513                           ;battery_charger.c: 131: cc_cv[z]=10;
 10514  0EB9  300A               	movlw	10
 10515  0EBA  00BE               	movwf	??_cc_cv_mode
 10516  0EBB  0845               	movf	cc_cv_mode@z,w
 10517  0EBC  3ED2               	addlw	(low (_cc_cv| 0))& (0+255)
 10518  0EBD  0086               	movwf	6
 10519  0EBE  0187               	clrf	7
 10520  0EBF  083E               	movf	??_cc_cv_mode,w
 10521  0EC0  0081               	movwf	1
 10522  0EC1  0008               	return
 10523  0EC2                     __end_of_cc_cv_mode:	
 10524                           
 10525                           	psect	text13
 10526  0809                     __ptext13:	
 10527 ;; *************** function _calculateCurrent3 *****************
 10528 ;; Defined at:
 10529 ;;		line 410 in file "main.c"
 10530 ;; Parameters:    Size  Location     Type
 10531 ;;		None
 10532 ;; Auto vars:     Size  Location     Type
 10533 ;;		None
 10534 ;; Return value:  Size  Location     Type
 10535 ;;                  1    wreg      void 
 10536 ;; Registers used:
 10537 ;;		wreg, status,2, status,0, pclath, cstack
 10538 ;; Tracked objects:
 10539 ;;		On entry : 0/0
 10540 ;;		On exit  : 0/0
 10541 ;;		Unchanged: 0/0
 10542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10543 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10544 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10545 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10546 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10547 ;;Total ram usage:        3 bytes
 10548 ;; Hardware stack levels used:    1
 10549 ;; Hardware stack levels required when called:    2
 10550 ;; This function calls:
 10551 ;;		___awtoft
 10552 ;;		___ftdiv
 10553 ;;		___fttol
 10554 ;; This function is called by:
 10555 ;;		_main
 10556 ;; This function uses a non-reentrant model
 10557 ;;
 10558                           
 10559                           
 10560                           ;psect for function _calculateCurrent3
 10561  0809                     _calculateCurrent3:	
 10562                           
 10563                           ;main.c: 412: if(Ianalogs[3]-559<=0)
 10564                           
 10565                           ;incstack = 0
 10566                           ; Regs used in _calculateCurrent3: [wreg+status,2+status,0+pclath+cstack]
 10567  0809  0021               	movlb	1	; select bank1
 10568  080A  0826               	movf	(_Ianalogs^(0+128)+6),w
 10569  080B  3ED1               	addlw	209
 10570  080C  0020               	movlb	0	; select bank0
 10571  080D  00BE               	movwf	??_calculateCurrent3
 10572  080E  30FD               	movlw	253
 10573  080F  0021               	movlb	1	; select bank1
 10574  0810  3D27               	addwfc	((_Ianalogs+1)^(0+128)+6),w
 10575  0811  0020               	movlb	0	; select bank0
 10576  0812  00BF               	movwf	??_calculateCurrent3+1
 10577  0813  083F               	movf	??_calculateCurrent3+1,w
 10578  0814  3A80               	xorlw	128
 10579  0815  00C0               	movwf	??_calculateCurrent3+2
 10580  0816  3080               	movlw	128
 10581  0817  0240               	subwf	??_calculateCurrent3+2,w
 10582  0818  1D03               	skipz
 10583  0819  281C               	goto	u3645
 10584  081A  3001               	movlw	1
 10585  081B  023E               	subwf	??_calculateCurrent3,w
 10586  081C                     u3645:	
 10587  081C  1803               	skipnc
 10588  081D  2822               	goto	l3099
 10589                           
 10590                           ;main.c: 413: {
 10591                           ;main.c: 414: current[3]=0;
 10592  081E  0021               	movlb	1	; select bank1
 10593  081F  01B6               	clrf	(_current^(0+128)+6)
 10594  0820  01B7               	clrf	((_current+1)^(0+128)+6)
 10595                           
 10596                           ;main.c: 415: }
 10597  0821  0008               	return
 10598  0822                     l3099:	
 10599                           
 10600                           ;main.c: 416: else
 10601                           ;main.c: 417: {
 10602                           ;main.c: 418: current[3]=(int16_t)((Ianalogs[3]-559)/1.60575);
 10603  0822  0021               	movlb	1	; select bank1
 10604  0823  0826               	movf	(_Ianalogs^(0+128)+6),w
 10605  0824  3ED1               	addlw	209
 10606  0825  00F8               	movwf	___awtoft@c
 10607  0826  30FD               	movlw	253
 10608  0827  3D27               	addwfc	((_Ianalogs+1)^(0+128)+6),w
 10609  0828  00F9               	movwf	___awtoft@c+1
 10610  0829  3193  23D7  3188   	fcall	___awtoft
 10611  082C  0878               	movf	?___awtoft,w
 10612  082D  0020               	movlb	0	; select bank0
 10613  082E  00A3               	movwf	___ftdiv@f1
 10614  082F  0879               	movf	?___awtoft+1,w
 10615  0830  00A4               	movwf	___ftdiv@f1+1
 10616  0831  087A               	movf	?___awtoft+2,w
 10617  0832  00A5               	movwf	___ftdiv@f1+2
 10618  0833  3089               	movlw	137
 10619  0834  00A0               	movwf	___ftdiv@f2
 10620  0835  30CD               	movlw	205
 10621  0836  00A1               	movwf	___ftdiv@f2+1
 10622  0837  303F               	movlw	63
 10623  0838  00A2               	movwf	___ftdiv@f2+2
 10624  0839  3189  21D9  3188   	fcall	___ftdiv
 10625  083C  0020               	movlb	0	; select bank0
 10626  083D  0820               	movf	?___ftdiv,w
 10627  083E  00B0               	movwf	___fttol@f1
 10628  083F  0821               	movf	?___ftdiv+1,w
 10629  0840  00B1               	movwf	___fttol@f1+1
 10630  0841  0822               	movf	?___ftdiv+2,w
 10631  0842  00B2               	movwf	___fttol@f1+2
 10632  0843  3189  2152         	fcall	___fttol
 10633  0845  0020               	movlb	0	; select bank0
 10634  0846  0831               	movf	?___fttol+1,w
 10635  0847  0021               	movlb	1	; select bank1
 10636  0848  00B7               	movwf	((_current+1)^(0+128)+6)
 10637  0849  0020               	movlb	0	; select bank0
 10638  084A  0830               	movf	?___fttol,w
 10639  084B  0021               	movlb	1	; select bank1
 10640  084C  00B6               	movwf	(_current^(0+128)+6)
 10641  084D  0008               	return
 10642  084E                     __end_of_calculateCurrent3:	
 10643                           
 10644                           	psect	text14
 10645  15EF                     __ptext14:	
 10646 ;; *************** function _calculateCurrent2 *****************
 10647 ;; Defined at:
 10648 ;;		line 397 in file "main.c"
 10649 ;; Parameters:    Size  Location     Type
 10650 ;;		None
 10651 ;; Auto vars:     Size  Location     Type
 10652 ;;		None
 10653 ;; Return value:  Size  Location     Type
 10654 ;;                  1    wreg      void 
 10655 ;; Registers used:
 10656 ;;		wreg, status,2, status,0, pclath, cstack
 10657 ;; Tracked objects:
 10658 ;;		On entry : 0/0
 10659 ;;		On exit  : 0/0
 10660 ;;		Unchanged: 0/0
 10661 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10662 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10663 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10664 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10665 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10666 ;;Total ram usage:        3 bytes
 10667 ;; Hardware stack levels used:    1
 10668 ;; Hardware stack levels required when called:    2
 10669 ;; This function calls:
 10670 ;;		___awtoft
 10671 ;;		___ftdiv
 10672 ;;		___fttol
 10673 ;; This function is called by:
 10674 ;;		_main
 10675 ;; This function uses a non-reentrant model
 10676 ;;
 10677                           
 10678                           
 10679                           ;psect for function _calculateCurrent2
 10680  15EF                     _calculateCurrent2:	
 10681                           
 10682                           ;main.c: 399: if(Ianalogs[2]-565<=0)
 10683                           
 10684                           ;incstack = 0
 10685                           ; Regs used in _calculateCurrent2: [wreg+status,2+status,0+pclath+cstack]
 10686  15EF  0021               	movlb	1	; select bank1
 10687  15F0  0824               	movf	(_Ianalogs^(0+128)+4),w
 10688  15F1  3ECB               	addlw	203
 10689  15F2  0020               	movlb	0	; select bank0
 10690  15F3  00BE               	movwf	??_calculateCurrent2
 10691  15F4  30FD               	movlw	253
 10692  15F5  0021               	movlb	1	; select bank1
 10693  15F6  3D25               	addwfc	((_Ianalogs+1)^(0+128)+4),w
 10694  15F7  0020               	movlb	0	; select bank0
 10695  15F8  00BF               	movwf	??_calculateCurrent2+1
 10696  15F9  083F               	movf	??_calculateCurrent2+1,w
 10697  15FA  3A80               	xorlw	128
 10698  15FB  00C0               	movwf	??_calculateCurrent2+2
 10699  15FC  3080               	movlw	128
 10700  15FD  0240               	subwf	??_calculateCurrent2+2,w
 10701  15FE  1D03               	skipz
 10702  15FF  2E02               	goto	u3635
 10703  1600  3001               	movlw	1
 10704  1601  023E               	subwf	??_calculateCurrent2,w
 10705  1602                     u3635:	
 10706  1602  1803               	skipnc
 10707  1603  2E08               	goto	l3093
 10708                           
 10709                           ;main.c: 400: {
 10710                           ;main.c: 401: current[2]=0;
 10711  1604  0021               	movlb	1	; select bank1
 10712  1605  01B4               	clrf	(_current^(0+128)+4)
 10713  1606  01B5               	clrf	((_current+1)^(0+128)+4)
 10714                           
 10715                           ;main.c: 402: }
 10716  1607  0008               	return
 10717  1608                     l3093:	
 10718                           
 10719                           ;main.c: 403: else
 10720                           ;main.c: 404: {
 10721                           ;main.c: 406: current[2]=(int16_t)((Ianalogs[2]-565)/3.05);
 10722  1608  0021               	movlb	1	; select bank1
 10723  1609  0824               	movf	(_Ianalogs^(0+128)+4),w
 10724  160A  3ECB               	addlw	203
 10725  160B  00F8               	movwf	___awtoft@c
 10726  160C  30FD               	movlw	253
 10727  160D  3D25               	addwfc	((_Ianalogs+1)^(0+128)+4),w
 10728  160E  00F9               	movwf	___awtoft@c+1
 10729  160F  3193  23D7  3195   	fcall	___awtoft
 10730  1612  0878               	movf	?___awtoft,w
 10731  1613  0020               	movlb	0	; select bank0
 10732  1614  00A3               	movwf	___ftdiv@f1
 10733  1615  0879               	movf	?___awtoft+1,w
 10734  1616  00A4               	movwf	___ftdiv@f1+1
 10735  1617  087A               	movf	?___awtoft+2,w
 10736  1618  00A5               	movwf	___ftdiv@f1+2
 10737  1619  3033               	movlw	51
 10738  161A  00A0               	movwf	___ftdiv@f2
 10739  161B  3043               	movlw	67
 10740  161C  00A1               	movwf	___ftdiv@f2+1
 10741  161D  3040               	movlw	64
 10742  161E  00A2               	movwf	___ftdiv@f2+2
 10743  161F  3189  21D9  3195   	fcall	___ftdiv
 10744  1622  0020               	movlb	0	; select bank0
 10745  1623  0820               	movf	?___ftdiv,w
 10746  1624  00B0               	movwf	___fttol@f1
 10747  1625  0821               	movf	?___ftdiv+1,w
 10748  1626  00B1               	movwf	___fttol@f1+1
 10749  1627  0822               	movf	?___ftdiv+2,w
 10750  1628  00B2               	movwf	___fttol@f1+2
 10751  1629  3189  2152         	fcall	___fttol
 10752  162B  0020               	movlb	0	; select bank0
 10753  162C  0831               	movf	?___fttol+1,w
 10754  162D  0021               	movlb	1	; select bank1
 10755  162E  00B5               	movwf	((_current+1)^(0+128)+4)
 10756  162F  0020               	movlb	0	; select bank0
 10757  1630  0830               	movf	?___fttol,w
 10758  1631  0021               	movlb	1	; select bank1
 10759  1632  00B4               	movwf	(_current^(0+128)+4)
 10760  1633  0008               	return
 10761  1634                     __end_of_calculateCurrent2:	
 10762                           
 10763                           	psect	text15
 10764  15AA                     __ptext15:	
 10765 ;; *************** function _calculateCurrent1 *****************
 10766 ;; Defined at:
 10767 ;;		line 385 in file "main.c"
 10768 ;; Parameters:    Size  Location     Type
 10769 ;;		None
 10770 ;; Auto vars:     Size  Location     Type
 10771 ;;		None
 10772 ;; Return value:  Size  Location     Type
 10773 ;;                  1    wreg      void 
 10774 ;; Registers used:
 10775 ;;		wreg, status,2, status,0, pclath, cstack
 10776 ;; Tracked objects:
 10777 ;;		On entry : 0/0
 10778 ;;		On exit  : 0/0
 10779 ;;		Unchanged: 0/0
 10780 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10781 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10782 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10783 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10784 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10785 ;;Total ram usage:        3 bytes
 10786 ;; Hardware stack levels used:    1
 10787 ;; Hardware stack levels required when called:    2
 10788 ;; This function calls:
 10789 ;;		___awtoft
 10790 ;;		___ftdiv
 10791 ;;		___fttol
 10792 ;; This function is called by:
 10793 ;;		_main
 10794 ;; This function uses a non-reentrant model
 10795 ;;
 10796                           
 10797                           
 10798                           ;psect for function _calculateCurrent1
 10799  15AA                     _calculateCurrent1:	
 10800                           
 10801                           ;main.c: 387: if(Ianalogs[1]-561<=0)
 10802                           
 10803                           ;incstack = 0
 10804                           ; Regs used in _calculateCurrent1: [wreg+status,2+status,0+pclath+cstack]
 10805  15AA  0021               	movlb	1	; select bank1
 10806  15AB  0822               	movf	(_Ianalogs^(0+128)+2),w
 10807  15AC  3ECF               	addlw	207
 10808  15AD  0020               	movlb	0	; select bank0
 10809  15AE  00BE               	movwf	??_calculateCurrent1
 10810  15AF  30FD               	movlw	253
 10811  15B0  0021               	movlb	1	; select bank1
 10812  15B1  3D23               	addwfc	((_Ianalogs+1)^(0+128)+2),w
 10813  15B2  0020               	movlb	0	; select bank0
 10814  15B3  00BF               	movwf	??_calculateCurrent1+1
 10815  15B4  083F               	movf	??_calculateCurrent1+1,w
 10816  15B5  3A80               	xorlw	128
 10817  15B6  00C0               	movwf	??_calculateCurrent1+2
 10818  15B7  3080               	movlw	128
 10819  15B8  0240               	subwf	??_calculateCurrent1+2,w
 10820  15B9  1D03               	skipz
 10821  15BA  2DBD               	goto	u3625
 10822  15BB  3001               	movlw	1
 10823  15BC  023E               	subwf	??_calculateCurrent1,w
 10824  15BD                     u3625:	
 10825  15BD  1803               	skipnc
 10826  15BE  2DC3               	goto	l3087
 10827                           
 10828                           ;main.c: 388: {
 10829                           ;main.c: 389: current[1]=0;
 10830  15BF  0021               	movlb	1	; select bank1
 10831  15C0  01B2               	clrf	(_current^(0+128)+2)
 10832  15C1  01B3               	clrf	((_current+1)^(0+128)+2)
 10833                           
 10834                           ;main.c: 390: }
 10835  15C2  0008               	return
 10836  15C3                     l3087:	
 10837                           
 10838                           ;main.c: 391: else
 10839                           ;main.c: 392: {
 10840                           ;main.c: 393: current[1]=(int16_t)((Ianalogs[1]-561)/1.99055);
 10841  15C3  0021               	movlb	1	; select bank1
 10842  15C4  0822               	movf	(_Ianalogs^(0+128)+2),w
 10843  15C5  3ECF               	addlw	207
 10844  15C6  00F8               	movwf	___awtoft@c
 10845  15C7  30FD               	movlw	253
 10846  15C8  3D23               	addwfc	((_Ianalogs+1)^(0+128)+2),w
 10847  15C9  00F9               	movwf	___awtoft@c+1
 10848  15CA  3193  23D7  3195   	fcall	___awtoft
 10849  15CD  0878               	movf	?___awtoft,w
 10850  15CE  0020               	movlb	0	; select bank0
 10851  15CF  00A3               	movwf	___ftdiv@f1
 10852  15D0  0879               	movf	?___awtoft+1,w
 10853  15D1  00A4               	movwf	___ftdiv@f1+1
 10854  15D2  087A               	movf	?___awtoft+2,w
 10855  15D3  00A5               	movwf	___ftdiv@f1+2
 10856  15D4  30CA               	movlw	202
 10857  15D5  00A0               	movwf	___ftdiv@f2
 10858  15D6  30FE               	movlw	254
 10859  15D7  00A1               	movwf	___ftdiv@f2+1
 10860  15D8  303F               	movlw	63
 10861  15D9  00A2               	movwf	___ftdiv@f2+2
 10862  15DA  3189  21D9  3195   	fcall	___ftdiv
 10863  15DD  0020               	movlb	0	; select bank0
 10864  15DE  0820               	movf	?___ftdiv,w
 10865  15DF  00B0               	movwf	___fttol@f1
 10866  15E0  0821               	movf	?___ftdiv+1,w
 10867  15E1  00B1               	movwf	___fttol@f1+1
 10868  15E2  0822               	movf	?___ftdiv+2,w
 10869  15E3  00B2               	movwf	___fttol@f1+2
 10870  15E4  3189  2152         	fcall	___fttol
 10871  15E6  0020               	movlb	0	; select bank0
 10872  15E7  0831               	movf	?___fttol+1,w
 10873  15E8  0021               	movlb	1	; select bank1
 10874  15E9  00B3               	movwf	((_current+1)^(0+128)+2)
 10875  15EA  0020               	movlb	0	; select bank0
 10876  15EB  0830               	movf	?___fttol,w
 10877  15EC  0021               	movlb	1	; select bank1
 10878  15ED  00B2               	movwf	(_current^(0+128)+2)
 10879  15EE  0008               	return
 10880  15EF                     __end_of_calculateCurrent1:	
 10881                           
 10882                           	psect	text16
 10883  1565                     __ptext16:	
 10884 ;; *************** function _calculateCurrent0 *****************
 10885 ;; Defined at:
 10886 ;;		line 372 in file "main.c"
 10887 ;; Parameters:    Size  Location     Type
 10888 ;;		None
 10889 ;; Auto vars:     Size  Location     Type
 10890 ;;		None
 10891 ;; Return value:  Size  Location     Type
 10892 ;;                  1    wreg      void 
 10893 ;; Registers used:
 10894 ;;		wreg, status,2, status,0, pclath, cstack
 10895 ;; Tracked objects:
 10896 ;;		On entry : 0/0
 10897 ;;		On exit  : 0/0
 10898 ;;		Unchanged: 0/0
 10899 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10900 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10901 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10902 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10903 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10904 ;;Total ram usage:        3 bytes
 10905 ;; Hardware stack levels used:    1
 10906 ;; Hardware stack levels required when called:    2
 10907 ;; This function calls:
 10908 ;;		___awtoft
 10909 ;;		___ftdiv
 10910 ;;		___fttol
 10911 ;; This function is called by:
 10912 ;;		_main
 10913 ;; This function uses a non-reentrant model
 10914 ;;
 10915                           
 10916                           
 10917                           ;psect for function _calculateCurrent0
 10918  1565                     _calculateCurrent0:	
 10919                           
 10920                           ;main.c: 374: if(Ianalogs[0]-580<=0)
 10921                           
 10922                           ;incstack = 0
 10923                           ; Regs used in _calculateCurrent0: [wreg+status,2+status,0+pclath+cstack]
 10924  1565  0021               	movlb	1	; select bank1
 10925  1566  0820               	movf	_Ianalogs^(0+128),w
 10926  1567  3EBC               	addlw	188
 10927  1568  0020               	movlb	0	; select bank0
 10928  1569  00BE               	movwf	??_calculateCurrent0
 10929  156A  30FD               	movlw	253
 10930  156B  0021               	movlb	1	; select bank1
 10931  156C  3D21               	addwfc	(_Ianalogs+1)^(0+128),w
 10932  156D  0020               	movlb	0	; select bank0
 10933  156E  00BF               	movwf	??_calculateCurrent0+1
 10934  156F  083F               	movf	??_calculateCurrent0+1,w
 10935  1570  3A80               	xorlw	128
 10936  1571  00C0               	movwf	??_calculateCurrent0+2
 10937  1572  3080               	movlw	128
 10938  1573  0240               	subwf	??_calculateCurrent0+2,w
 10939  1574  1D03               	skipz
 10940  1575  2D78               	goto	u3615
 10941  1576  3001               	movlw	1
 10942  1577  023E               	subwf	??_calculateCurrent0,w
 10943  1578                     u3615:	
 10944  1578  1803               	skipnc
 10945  1579  2D7E               	goto	l3081
 10946                           
 10947                           ;main.c: 375: {
 10948                           ;main.c: 376: current[0]=0;
 10949  157A  0021               	movlb	1	; select bank1
 10950  157B  01B0               	clrf	_current^(0+128)
 10951  157C  01B1               	clrf	(_current+1)^(0+128)
 10952                           
 10953                           ;main.c: 377: }
 10954  157D  0008               	return
 10955  157E                     l3081:	
 10956                           
 10957                           ;main.c: 378: else
 10958                           ;main.c: 379: {
 10959                           ;main.c: 381: current[0]=(int16_t)((Ianalogs[0]-580)/3.15);
 10960  157E  0021               	movlb	1	; select bank1
 10961  157F  0820               	movf	_Ianalogs^(0+128),w
 10962  1580  3EBC               	addlw	188
 10963  1581  00F8               	movwf	___awtoft@c
 10964  1582  30FD               	movlw	253
 10965  1583  3D21               	addwfc	(_Ianalogs+1)^(0+128),w
 10966  1584  00F9               	movwf	___awtoft@c+1
 10967  1585  3193  23D7  3195   	fcall	___awtoft
 10968  1588  0878               	movf	?___awtoft,w
 10969  1589  0020               	movlb	0	; select bank0
 10970  158A  00A3               	movwf	___ftdiv@f1
 10971  158B  0879               	movf	?___awtoft+1,w
 10972  158C  00A4               	movwf	___ftdiv@f1+1
 10973  158D  087A               	movf	?___awtoft+2,w
 10974  158E  00A5               	movwf	___ftdiv@f1+2
 10975  158F  309A               	movlw	154
 10976  1590  00A0               	movwf	___ftdiv@f2
 10977  1591  3049               	movlw	73
 10978  1592  00A1               	movwf	___ftdiv@f2+1
 10979  1593  3040               	movlw	64
 10980  1594  00A2               	movwf	___ftdiv@f2+2
 10981  1595  3189  21D9  3195   	fcall	___ftdiv
 10982  1598  0020               	movlb	0	; select bank0
 10983  1599  0820               	movf	?___ftdiv,w
 10984  159A  00B0               	movwf	___fttol@f1
 10985  159B  0821               	movf	?___ftdiv+1,w
 10986  159C  00B1               	movwf	___fttol@f1+1
 10987  159D  0822               	movf	?___ftdiv+2,w
 10988  159E  00B2               	movwf	___fttol@f1+2
 10989  159F  3189  2152         	fcall	___fttol
 10990  15A1  0020               	movlb	0	; select bank0
 10991  15A2  0831               	movf	?___fttol+1,w
 10992  15A3  0021               	movlb	1	; select bank1
 10993  15A4  00B1               	movwf	(_current+1)^(0+128)
 10994  15A5  0020               	movlb	0	; select bank0
 10995  15A6  0830               	movf	?___fttol,w
 10996  15A7  0021               	movlb	1	; select bank1
 10997  15A8  00B0               	movwf	_current^(0+128)
 10998  15A9  0008               	return
 10999  15AA                     __end_of_calculateCurrent0:	
 11000                           
 11001                           	psect	text17
 11002  09D9                     __ptext17:	
 11003 ;; *************** function ___ftdiv *****************
 11004 ;; Defined at:
 11005 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
 11006 ;; Parameters:    Size  Location     Type
 11007 ;;  f2              3    0[BANK0 ] float 
 11008 ;;  f1              3    3[BANK0 ] float 
 11009 ;; Auto vars:     Size  Location     Type
 11010 ;;  f3              3   11[BANK0 ] float 
 11011 ;;  sign            1   15[BANK0 ] unsigned char 
 11012 ;;  exp             1   14[BANK0 ] unsigned char 
 11013 ;;  cntr            1   10[BANK0 ] unsigned char 
 11014 ;; Return value:  Size  Location     Type
 11015 ;;                  3    0[BANK0 ] float 
 11016 ;; Registers used:
 11017 ;;		wreg, status,2, status,0, pclath, cstack
 11018 ;; Tracked objects:
 11019 ;;		On entry : 0/0
 11020 ;;		On exit  : 0/0
 11021 ;;		Unchanged: 0/0
 11022 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11023 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11024 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11025 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11026 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11027 ;;Total ram usage:       16 bytes
 11028 ;; Hardware stack levels used:    1
 11029 ;; Hardware stack levels required when called:    1
 11030 ;; This function calls:
 11031 ;;		___ftpack
 11032 ;; This function is called by:
 11033 ;;		_tempCalc
 11034 ;;		_main
 11035 ;;		_calculateCurrent0
 11036 ;;		_calculateCurrent1
 11037 ;;		_calculateCurrent2
 11038 ;;		_calculateCurrent3
 11039 ;; This function uses a non-reentrant model
 11040 ;;
 11041                           
 11042                           
 11043                           ;psect for function ___ftdiv
 11044  09D9                     ___ftdiv:	
 11045                           
 11046                           ;incstack = 0
 11047                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 11048  09D9  0020               	movlb	0	; select bank0
 11049  09DA  0823               	movf	___ftdiv@f1,w
 11050  09DB  00A6               	movwf	??___ftdiv
 11051  09DC  0824               	movf	___ftdiv@f1+1,w
 11052  09DD  00A7               	movwf	??___ftdiv+1
 11053  09DE  0825               	movf	___ftdiv@f1+2,w
 11054  09DF  00A8               	movwf	??___ftdiv+2
 11055  09E0  1003               	clrc
 11056  09E1  0D27               	rlf	??___ftdiv+1,w
 11057  09E2  0D28               	rlf	??___ftdiv+2,w
 11058  09E3  00A9               	movwf	??___ftdiv+3
 11059  09E4  0829               	movf	??___ftdiv+3,w
 11060  09E5  00AE               	movwf	___ftdiv@exp
 11061  09E6  082E               	movf	___ftdiv@exp,w
 11062  09E7  1D03               	btfss	3,2
 11063  09E8  29F0               	goto	l2771
 11064  09E9  3000               	movlw	0
 11065  09EA  00A0               	movwf	?___ftdiv
 11066  09EB  3000               	movlw	0
 11067  09EC  00A1               	movwf	?___ftdiv+1
 11068  09ED  3000               	movlw	0
 11069  09EE  00A2               	movwf	?___ftdiv+2
 11070  09EF  0008               	return
 11071  09F0                     l2771:	
 11072  09F0  0820               	movf	___ftdiv@f2,w
 11073  09F1  00A6               	movwf	??___ftdiv
 11074  09F2  0821               	movf	___ftdiv@f2+1,w
 11075  09F3  00A7               	movwf	??___ftdiv+1
 11076  09F4  0822               	movf	___ftdiv@f2+2,w
 11077  09F5  00A8               	movwf	??___ftdiv+2
 11078  09F6  1003               	clrc
 11079  09F7  0D27               	rlf	??___ftdiv+1,w
 11080  09F8  0D28               	rlf	??___ftdiv+2,w
 11081  09F9  00A9               	movwf	??___ftdiv+3
 11082  09FA  0829               	movf	??___ftdiv+3,w
 11083  09FB  00AF               	movwf	___ftdiv@sign
 11084  09FC  082F               	movf	___ftdiv@sign,w
 11085  09FD  1D03               	btfss	3,2
 11086  09FE  2A06               	goto	l2777
 11087  09FF  3000               	movlw	0
 11088  0A00  00A0               	movwf	?___ftdiv
 11089  0A01  3000               	movlw	0
 11090  0A02  00A1               	movwf	?___ftdiv+1
 11091  0A03  3000               	movlw	0
 11092  0A04  00A2               	movwf	?___ftdiv+2
 11093  0A05  0008               	return
 11094  0A06                     l2777:	
 11095  0A06  3000               	movlw	0
 11096  0A07  00AB               	movwf	___ftdiv@f3
 11097  0A08  3000               	movlw	0
 11098  0A09  00AC               	movwf	___ftdiv@f3+1
 11099  0A0A  3000               	movlw	0
 11100  0A0B  00AD               	movwf	___ftdiv@f3+2
 11101  0A0C  3089               	movlw	137
 11102  0A0D  072F               	addwf	___ftdiv@sign,w
 11103  0A0E  00A6               	movwf	??___ftdiv
 11104  0A0F  0826               	movf	??___ftdiv,w
 11105  0A10  02AE               	subwf	___ftdiv@exp,f
 11106  0A11  0823               	movf	___ftdiv@f1,w
 11107  0A12  00A6               	movwf	??___ftdiv
 11108  0A13  0824               	movf	___ftdiv@f1+1,w
 11109  0A14  00A7               	movwf	??___ftdiv+1
 11110  0A15  0825               	movf	___ftdiv@f1+2,w
 11111  0A16  00A8               	movwf	??___ftdiv+2
 11112  0A17  3010               	movlw	16
 11113  0A18                     u2985:	
 11114  0A18  36A8               	lsrf	??___ftdiv+2,f
 11115  0A19  0CA7               	rrf	??___ftdiv+1,f
 11116  0A1A  0CA6               	rrf	??___ftdiv,f
 11117  0A1B  0B89               	decfsz	9,f
 11118  0A1C  2A18               	goto	u2985
 11119  0A1D  0826               	movf	??___ftdiv,w
 11120  0A1E  00A9               	movwf	??___ftdiv+3
 11121  0A1F  0829               	movf	??___ftdiv+3,w
 11122  0A20  00AF               	movwf	___ftdiv@sign
 11123  0A21  0820               	movf	___ftdiv@f2,w
 11124  0A22  00A6               	movwf	??___ftdiv
 11125  0A23  0821               	movf	___ftdiv@f2+1,w
 11126  0A24  00A7               	movwf	??___ftdiv+1
 11127  0A25  0822               	movf	___ftdiv@f2+2,w
 11128  0A26  00A8               	movwf	??___ftdiv+2
 11129  0A27  3010               	movlw	16
 11130  0A28                     u2995:	
 11131  0A28  36A8               	lsrf	??___ftdiv+2,f
 11132  0A29  0CA7               	rrf	??___ftdiv+1,f
 11133  0A2A  0CA6               	rrf	??___ftdiv,f
 11134  0A2B  0B89               	decfsz	9,f
 11135  0A2C  2A28               	goto	u2995
 11136  0A2D  0826               	movf	??___ftdiv,w
 11137  0A2E  00A9               	movwf	??___ftdiv+3
 11138  0A2F  0829               	movf	??___ftdiv+3,w
 11139  0A30  06AF               	xorwf	___ftdiv@sign,f
 11140  0A31  3080               	movlw	128
 11141  0A32  00A6               	movwf	??___ftdiv
 11142  0A33  0826               	movf	??___ftdiv,w
 11143  0A34  05AF               	andwf	___ftdiv@sign,f
 11144  0A35  17A4               	bsf	___ftdiv@f1+1,7
 11145  0A36  30FF               	movlw	255
 11146  0A37  05A3               	andwf	___ftdiv@f1,f
 11147  0A38  30FF               	movlw	255
 11148  0A39  05A4               	andwf	___ftdiv@f1+1,f
 11149  0A3A  3000               	movlw	0
 11150  0A3B  05A5               	andwf	___ftdiv@f1+2,f
 11151  0A3C  17A1               	bsf	___ftdiv@f2+1,7
 11152  0A3D  30FF               	movlw	255
 11153  0A3E  05A0               	andwf	___ftdiv@f2,f
 11154  0A3F  30FF               	movlw	255
 11155  0A40  05A1               	andwf	___ftdiv@f2+1,f
 11156  0A41  3000               	movlw	0
 11157  0A42  05A2               	andwf	___ftdiv@f2+2,f
 11158  0A43  3018               	movlw	24
 11159  0A44  00A6               	movwf	??___ftdiv
 11160  0A45  0826               	movf	??___ftdiv,w
 11161  0A46  00AA               	movwf	___ftdiv@cntr
 11162  0A47                     l2791:	
 11163  0A47  3001               	movlw	1
 11164  0A48                     u3005:	
 11165  0A48  35AB               	lslf	___ftdiv@f3,f
 11166  0A49  0DAC               	rlf	___ftdiv@f3+1,f
 11167  0A4A  0DAD               	rlf	___ftdiv@f3+2,f
 11168  0A4B  0B89               	decfsz	9,f
 11169  0A4C  2A48               	goto	u3005
 11170  0A4D  0822               	movf	___ftdiv@f2+2,w
 11171  0A4E  0225               	subwf	___ftdiv@f1+2,w
 11172  0A4F  1D03               	skipz
 11173  0A50  2A57               	goto	u3015
 11174  0A51  0821               	movf	___ftdiv@f2+1,w
 11175  0A52  0224               	subwf	___ftdiv@f1+1,w
 11176  0A53  1D03               	skipz
 11177  0A54  2A57               	goto	u3015
 11178  0A55  0820               	movf	___ftdiv@f2,w
 11179  0A56  0223               	subwf	___ftdiv@f1,w
 11180  0A57                     u3015:	
 11181  0A57  1C03               	skipc
 11182  0A58  2A60               	goto	l2799
 11183  0A59  0820               	movf	___ftdiv@f2,w
 11184  0A5A  02A3               	subwf	___ftdiv@f1,f
 11185  0A5B  0821               	movf	___ftdiv@f2+1,w
 11186  0A5C  3BA4               	subwfb	___ftdiv@f1+1,f
 11187  0A5D  0822               	movf	___ftdiv@f2+2,w
 11188  0A5E  3BA5               	subwfb	___ftdiv@f1+2,f
 11189  0A5F  142B               	bsf	___ftdiv@f3,0
 11190  0A60                     l2799:	
 11191  0A60  3001               	movlw	1
 11192  0A61                     u3025:	
 11193  0A61  35A3               	lslf	___ftdiv@f1,f
 11194  0A62  0DA4               	rlf	___ftdiv@f1+1,f
 11195  0A63  0DA5               	rlf	___ftdiv@f1+2,f
 11196  0A64  0B89               	decfsz	9,f
 11197  0A65  2A61               	goto	u3025
 11198  0A66  3001               	movlw	1
 11199  0A67  02AA               	subwf	___ftdiv@cntr,f
 11200  0A68  1D03               	btfss	3,2
 11201  0A69  2A47               	goto	l2791
 11202  0A6A  082B               	movf	___ftdiv@f3,w
 11203  0A6B  00F0               	movwf	___ftpack@arg
 11204  0A6C  082C               	movf	___ftdiv@f3+1,w
 11205  0A6D  00F1               	movwf	___ftpack@arg+1
 11206  0A6E  082D               	movf	___ftdiv@f3+2,w
 11207  0A6F  00F2               	movwf	___ftpack@arg+2
 11208  0A70  082E               	movf	___ftdiv@exp,w
 11209  0A71  00A6               	movwf	??___ftdiv
 11210  0A72  0826               	movf	??___ftdiv,w
 11211  0A73  00F3               	movwf	___ftpack@exp
 11212  0A74  082F               	movf	___ftdiv@sign,w
 11213  0A75  00A7               	movwf	??___ftdiv+1
 11214  0A76  0827               	movf	??___ftdiv+1,w
 11215  0A77  00F4               	movwf	___ftpack@sign
 11216  0A78  3197  279C         	fcall	___ftpack
 11217  0A7A  0870               	movf	?___ftpack,w
 11218  0A7B  0020               	movlb	0	; select bank0
 11219  0A7C  00A0               	movwf	?___ftdiv
 11220  0A7D  0871               	movf	?___ftpack+1,w
 11221  0A7E  00A1               	movwf	?___ftdiv+1
 11222  0A7F  0872               	movf	?___ftpack+2,w
 11223  0A80  00A2               	movwf	?___ftdiv+2
 11224  0A81  0008               	return
 11225  0A82                     __end_of___ftdiv:	
 11226                           
 11227                           	psect	text18
 11228  14B4                     __ptext18:	
 11229 ;; *************** function _SYSTEM_Initialize *****************
 11230 ;; Defined at:
 11231 ;;		line 71 in file "system.c"
 11232 ;; Parameters:    Size  Location     Type
 11233 ;;		None
 11234 ;; Auto vars:     Size  Location     Type
 11235 ;;		None
 11236 ;; Return value:  Size  Location     Type
 11237 ;;                  1    wreg      void 
 11238 ;; Registers used:
 11239 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11240 ;; Tracked objects:
 11241 ;;		On entry : 0/0
 11242 ;;		On exit  : 0/0
 11243 ;;		Unchanged: 0/0
 11244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11245 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11246 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11247 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11248 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11249 ;;Total ram usage:        2 bytes
 11250 ;; Hardware stack levels used:    1
 11251 ;; Hardware stack levels required when called:    3
 11252 ;; This function calls:
 11253 ;;		_ADC_Initialize
 11254 ;;		_Init_Battery_State_Machine
 11255 ;;		_LCDClear
 11256 ;;		_LCDInit
 11257 ;;		_OSCILLATOR_Initialize
 11258 ;;		_PIN_MANAGER_Initialize
 11259 ;;		_PWM_Initialize
 11260 ;;		_TMR2_Initialize
 11261 ;;		_TMR4_Initialize
 11262 ;; This function is called by:
 11263 ;;		_main
 11264 ;; This function uses a non-reentrant model
 11265 ;;
 11266                           
 11267                           
 11268                           ;psect for function _SYSTEM_Initialize
 11269  14B4                     _SYSTEM_Initialize:	
 11270                           
 11271                           ;system.c: 73: PIN_MANAGER_Initialize();
 11272                           
 11273                           ;incstack = 0
 11274                           ; Regs used in _SYSTEM_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11275  14B4  3194  2442  3194   	fcall	_PIN_MANAGER_Initialize
 11276                           
 11277                           ;system.c: 74: OSCILLATOR_Initialize();
 11278  14B7  3188  2000  3194   	fcall	_OSCILLATOR_Initialize
 11279                           
 11280                           ;system.c: 76: ADC_Initialize();
 11281  14BA  3193  23B8  3194   	fcall	_ADC_Initialize
 11282                           
 11283                           ;system.c: 77: PWM_Initialize();
 11284  14BD  3193  2329  3194   	fcall	_PWM_Initialize
 11285                           
 11286                           ;system.c: 79: TMR2_Initialize();
 11287  14C0  3192  22E6  3194   	fcall	_TMR2_Initialize
 11288                           
 11289                           ;system.c: 80: TMR4_Initialize();
 11290  14C3  3192  22F4  3194   	fcall	_TMR4_Initialize
 11291                           
 11292                           ;system.c: 81: Init_Battery_State_Machine(0);
 11293  14C6  3000               	movlw	0
 11294  14C7  3197  2739  3194   	fcall	_Init_Battery_State_Machine
 11295                           
 11296                           ;system.c: 82: Init_Battery_State_Machine(1);
 11297  14CA  3001               	movlw	1
 11298  14CB  3197  2739  3194   	fcall	_Init_Battery_State_Machine
 11299                           
 11300                           ;system.c: 83: LCDInit();
 11301  14CE  3194  2479  3194   	fcall	_LCDInit
 11302                           
 11303                           ;system.c: 84: _delay((unsigned long)((200)*(32000000/4000.0)));
 11304  14D1  3009               	movlw	9
 11305  14D2  0020               	movlb	0	; select bank0
 11306  14D3  00C4               	movwf	??_SYSTEM_Initialize+1
 11307  14D4  301E               	movlw	30
 11308  14D5  00C3               	movwf	??_SYSTEM_Initialize
 11309  14D6  30E4               	movlw	228
 11310  14D7                     u3977:	
 11311  14D7  0B89               	decfsz	9,f
 11312  14D8  2CD7               	goto	u3977
 11313  14D9  0BC3               	decfsz	??_SYSTEM_Initialize,f
 11314  14DA  2CD7               	goto	u3977
 11315  14DB  0BC4               	decfsz	??_SYSTEM_Initialize+1,f
 11316  14DC  2CD7               	goto	u3977
 11317  14DD  0000               	nop
 11318                           
 11319                           ;system.c: 85: LCDClear();
 11320  14DE  3194  241C  3194   	fcall	_LCDClear
 11321                           
 11322                           ;system.c: 86: _delay((unsigned long)((200)*(32000000/4000.0)));
 11323  14E1  3009               	movlw	9
 11324  14E2  0020               	movlb	0	; select bank0
 11325  14E3  00C4               	movwf	??_SYSTEM_Initialize+1
 11326  14E4  301E               	movlw	30
 11327  14E5  00C3               	movwf	??_SYSTEM_Initialize
 11328  14E6  30E4               	movlw	228
 11329  14E7                     u3987:	
 11330  14E7  0B89               	decfsz	9,f
 11331  14E8  2CE7               	goto	u3987
 11332  14E9  0BC3               	decfsz	??_SYSTEM_Initialize,f
 11333  14EA  2CE7               	goto	u3987
 11334  14EB  0BC4               	decfsz	??_SYSTEM_Initialize+1,f
 11335  14EC  2CE7               	goto	u3987
 11336  14ED  0000               	nop
 11337  14EE  0008               	return
 11338  14EF                     __end_of_SYSTEM_Initialize:	
 11339                           
 11340                           	psect	text19
 11341  12F4                     __ptext19:	
 11342 ;; *************** function _TMR4_Initialize *****************
 11343 ;; Defined at:
 11344 ;;		line 25 in file "tmr.c"
 11345 ;; Parameters:    Size  Location     Type
 11346 ;;		None
 11347 ;; Auto vars:     Size  Location     Type
 11348 ;;		None
 11349 ;; Return value:  Size  Location     Type
 11350 ;;                  1    wreg      void 
 11351 ;; Registers used:
 11352 ;;		wreg, status,2
 11353 ;; Tracked objects:
 11354 ;;		On entry : 0/0
 11355 ;;		On exit  : 0/0
 11356 ;;		Unchanged: 0/0
 11357 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11358 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11359 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11360 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11361 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11362 ;;Total ram usage:        0 bytes
 11363 ;; Hardware stack levels used:    1
 11364 ;; This function calls:
 11365 ;;		Nothing
 11366 ;; This function is called by:
 11367 ;;		_SYSTEM_Initialize
 11368 ;; This function uses a non-reentrant model
 11369 ;;
 11370                           
 11371                           
 11372                           ;psect for function _TMR4_Initialize
 11373  12F4                     _TMR4_Initialize:	
 11374                           
 11375                           ;tmr.c: 27: T4CON = 0x00;
 11376                           
 11377                           ;incstack = 0
 11378                           ; Regs used in _TMR4_Initialize: [wreg+status,2]
 11379  12F4  0025               	movlb	5	; select bank5
 11380  12F5  0194               	clrf	20	;volatile
 11381                           
 11382                           ;tmr.c: 29: T4CLKCON = 0x01;
 11383  12F6  3001               	movlw	1
 11384  12F7  0096               	movwf	22	;volatile
 11385                           
 11386                           ;tmr.c: 31: T4HLT = 0x00;
 11387  12F8  0195               	clrf	21	;volatile
 11388                           
 11389                           ;tmr.c: 33: T4RST = 0x00;
 11390  12F9  0197               	clrf	23	;volatile
 11391                           
 11392                           ;tmr.c: 35: T4PR = 0xFE;
 11393  12FA  30FE               	movlw	254
 11394  12FB  0093               	movwf	19	;volatile
 11395                           
 11396                           ;tmr.c: 39: T4TMR = 0x00;
 11397  12FC  0192               	clrf	18	;volatile
 11398                           
 11399                           ;tmr.c: 41: PIR4bits.TMR4IF = 0;
 11400  12FD  002E               	movlb	14	; select bank14
 11401  12FE  1190               	bcf	16,3	;volatile
 11402                           
 11403                           ;tmr.c: 43: T4CONbits.TMR4ON = 1;
 11404  12FF  0025               	movlb	5	; select bank5
 11405  1300  1794               	bsf	20,7	;volatile
 11406  1301  0008               	return
 11407  1302                     __end_of_TMR4_Initialize:	
 11408                           
 11409                           	psect	text20
 11410  12E6                     __ptext20:	
 11411 ;; *************** function _TMR2_Initialize *****************
 11412 ;; Defined at:
 11413 ;;		line 3 in file "tmr.c"
 11414 ;; Parameters:    Size  Location     Type
 11415 ;;		None
 11416 ;; Auto vars:     Size  Location     Type
 11417 ;;		None
 11418 ;; Return value:  Size  Location     Type
 11419 ;;                  1    wreg      void 
 11420 ;; Registers used:
 11421 ;;		wreg, status,2
 11422 ;; Tracked objects:
 11423 ;;		On entry : 0/0
 11424 ;;		On exit  : 0/0
 11425 ;;		Unchanged: 0/0
 11426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11427 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11428 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11429 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11430 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11431 ;;Total ram usage:        0 bytes
 11432 ;; Hardware stack levels used:    1
 11433 ;; This function calls:
 11434 ;;		Nothing
 11435 ;; This function is called by:
 11436 ;;		_SYSTEM_Initialize
 11437 ;; This function uses a non-reentrant model
 11438 ;;
 11439                           
 11440                           
 11441                           ;psect for function _TMR2_Initialize
 11442  12E6                     _TMR2_Initialize:	
 11443                           
 11444                           ;tmr.c: 5: T2CON = 0x00;
 11445                           
 11446                           ;incstack = 0
 11447                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
 11448  12E6  0025               	movlb	5	; select bank5
 11449  12E7  018E               	clrf	14	;volatile
 11450                           
 11451                           ;tmr.c: 7: T2CLKCON = 0x01;
 11452  12E8  3001               	movlw	1
 11453  12E9  0090               	movwf	16	;volatile
 11454                           
 11455                           ;tmr.c: 9: T2HLT = 0x00;
 11456  12EA  018F               	clrf	15	;volatile
 11457                           
 11458                           ;tmr.c: 11: T2RST = 0x00;
 11459  12EB  0191               	clrf	17	;volatile
 11460                           
 11461                           ;tmr.c: 13: T2PR = 0xFE;
 11462  12EC  30FE               	movlw	254
 11463  12ED  008D               	movwf	13	;volatile
 11464                           
 11465                           ;tmr.c: 18: T2TMR = 0x00;
 11466  12EE  018C               	clrf	12	;volatile
 11467                           
 11468                           ;tmr.c: 20: PIR4bits.TMR2IF = 0;
 11469  12EF  002E               	movlb	14	; select bank14
 11470  12F0  1090               	bcf	16,1	;volatile
 11471                           
 11472                           ;tmr.c: 22: T2CONbits.TMR2ON = 1;
 11473  12F1  0025               	movlb	5	; select bank5
 11474  12F2  178E               	bsf	14,7	;volatile
 11475  12F3  0008               	return
 11476  12F4                     __end_of_TMR2_Initialize:	
 11477                           
 11478                           	psect	text21
 11479  1329                     __ptext21:	
 11480 ;; *************** function _PWM_Initialize *****************
 11481 ;; Defined at:
 11482 ;;		line 3 in file "pwm.c"
 11483 ;; Parameters:    Size  Location     Type
 11484 ;;		None
 11485 ;; Auto vars:     Size  Location     Type
 11486 ;;		None
 11487 ;; Return value:  Size  Location     Type
 11488 ;;                  1    wreg      void 
 11489 ;; Registers used:
 11490 ;;		wreg, status,2, status,0
 11491 ;; Tracked objects:
 11492 ;;		On entry : 0/0
 11493 ;;		On exit  : 0/0
 11494 ;;		Unchanged: 0/0
 11495 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11496 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11497 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11498 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11499 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11500 ;;Total ram usage:        0 bytes
 11501 ;; Hardware stack levels used:    1
 11502 ;; This function calls:
 11503 ;;		Nothing
 11504 ;; This function is called by:
 11505 ;;		_SYSTEM_Initialize
 11506 ;; This function uses a non-reentrant model
 11507 ;;
 11508                           
 11509                           
 11510                           ;psect for function _PWM_Initialize
 11511  1329                     _PWM_Initialize:	
 11512                           
 11513                           ;pwm.c: 5: PWM6CON = 0x80;
 11514                           
 11515                           ;incstack = 0
 11516                           ; Regs used in _PWM_Initialize: [wreg+status,2+status,0]
 11517  1329  3080               	movlw	128
 11518  132A  0027               	movlb	7	; select bank7
 11519  132B  008E               	movwf	14	;volatile
 11520                           
 11521                           ;pwm.c: 7: PWM6DCH = 0x00;
 11522  132C  018D               	clrf	13	;volatile
 11523                           
 11524                           ;pwm.c: 9: PWM6DCL = 0x00;
 11525  132D  018C               	clrf	12	;volatile
 11526                           
 11527                           ;pwm.c: 11: CCPTMRS1bits.P6TSEL = 0x01;
 11528  132E  0024               	movlb	4	; select bank4
 11529  132F  081F               	movf	31,w	;volatile
 11530  1330  39F3               	andlw	-13
 11531  1331  3804               	iorlw	4
 11532  1332  009F               	movwf	31	;volatile
 11533                           
 11534                           ;pwm.c: 14: PWM7CON = 0x80;
 11535  1333  3080               	movlw	128
 11536  1334  0027               	movlb	7	; select bank7
 11537  1335  0092               	movwf	18	;volatile
 11538                           
 11539                           ;pwm.c: 16: PWM7DCH = 0x00;
 11540  1336  0191               	clrf	17	;volatile
 11541                           
 11542                           ;pwm.c: 18: PWM7DCL = 0x00;
 11543  1337  0190               	clrf	16	;volatile
 11544                           
 11545                           ;pwm.c: 20: CCPTMRS1bits.P7TSEL = 0x02;
 11546  1338  0024               	movlb	4	; select bank4
 11547  1339  081F               	movf	31,w	;volatile
 11548  133A  39CF               	andlw	-49
 11549  133B  3820               	iorlw	32
 11550  133C  009F               	movwf	31	;volatile
 11551  133D  0008               	return
 11552  133E                     __end_of_PWM_Initialize:	
 11553                           
 11554                           	psect	text22
 11555  1442                     __ptext22:	
 11556 ;; *************** function _PIN_MANAGER_Initialize *****************
 11557 ;; Defined at:
 11558 ;;		line 5 in file "pin_manager.c"
 11559 ;; Parameters:    Size  Location     Type
 11560 ;;		None
 11561 ;; Auto vars:     Size  Location     Type
 11562 ;;  state           1    0[COMMON] char 
 11563 ;; Return value:  Size  Location     Type
 11564 ;;                  1    wreg      void 
 11565 ;; Registers used:
 11566 ;;		wreg, status,2
 11567 ;; Tracked objects:
 11568 ;;		On entry : 0/0
 11569 ;;		On exit  : 0/0
 11570 ;;		Unchanged: 0/0
 11571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11572 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11573 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11574 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11575 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11576 ;;Total ram usage:        1 bytes
 11577 ;; Hardware stack levels used:    1
 11578 ;; This function calls:
 11579 ;;		Nothing
 11580 ;; This function is called by:
 11581 ;;		_SYSTEM_Initialize
 11582 ;; This function uses a non-reentrant model
 11583 ;;
 11584                           
 11585                           
 11586                           ;psect for function _PIN_MANAGER_Initialize
 11587  1442                     _PIN_MANAGER_Initialize:	
 11588                           
 11589                           ;pin_manager.c: 7: LATA = 0x20;
 11590                           
 11591                           ;incstack = 0
 11592                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
 11593  1442  3020               	movlw	32
 11594  1443  0020               	movlb	0	; select bank0
 11595  1444  0096               	movwf	22	;volatile
 11596                           
 11597                           ;pin_manager.c: 8: LATB = 0x00;
 11598  1445  0197               	clrf	23	;volatile
 11599                           
 11600                           ;pin_manager.c: 9: LATC = 0x00;
 11601  1446  0198               	clrf	24	;volatile
 11602                           
 11603                           ;pin_manager.c: 11: WPUA = 0x00;
 11604  1447  003E               	movlb	30	; select bank30
 11605  1448  01B9               	clrf	57	;volatile
 11606                           
 11607                           ;pin_manager.c: 12: WPUB = 0x00;
 11608  1449  01C4               	clrf	68	;volatile
 11609                           
 11610                           ;pin_manager.c: 13: WPUC = 0x00;
 11611  144A  01CF               	clrf	79	;volatile
 11612                           
 11613                           ;pin_manager.c: 14: WPUE = 0x8;
 11614  144B  3008               	movlw	8
 11615  144C  00E5               	movwf	101	;volatile
 11616                           
 11617                           ;pin_manager.c: 16: TRISA = 0x00;
 11618  144D  0020               	movlb	0	; select bank0
 11619  144E  0191               	clrf	17	;volatile
 11620                           
 11621                           ;pin_manager.c: 17: TRISB = 0x0E;
 11622  144F  300E               	movlw	14
 11623  1450  0092               	movwf	18	;volatile
 11624                           
 11625                           ;pin_manager.c: 18: TRISC = 0xFF;
 11626  1451  30FF               	movlw	255
 11627  1452  0093               	movwf	19	;volatile
 11628                           
 11629                           ;pin_manager.c: 20: ANSELA = 0x00;
 11630  1453  003E               	movlb	30	; select bank30
 11631  1454  01B8               	clrf	56	;volatile
 11632                           
 11633                           ;pin_manager.c: 21: ANSELB = 0x0A;
 11634  1455  300A               	movlw	10
 11635  1456  00C3               	movwf	67	;volatile
 11636                           
 11637                           ;pin_manager.c: 22: ANSELC = 0xFF;
 11638  1457  30FF               	movlw	255
 11639  1458  00CE               	movwf	78	;volatile
 11640                           
 11641                           ;pin_manager.c: 25: PIE0bits.IOCIE = 0;
 11642  1459  002E               	movlb	14	; select bank14
 11643  145A  1216               	bcf	22,4	;volatile
 11644                           
 11645                           ;pin_manager.c: 26: int8_t state = GIE;
 11646  145B  3000               	movlw	0
 11647  145C  1B8B               	btfsc	11,7	;volatile
 11648  145D  3001               	movlw	1
 11649  145E  00F0               	movwf	PIN_MANAGER_Initialize@state
 11650                           
 11651                           ;pin_manager.c: 27: GIE = 0;
 11652  145F  138B               	bcf	11,7	;volatile
 11653                           
 11654                           ;pin_manager.c: 28: PPSLOCK = 0x55;
 11655  1460  3055               	movlw	85
 11656  1461  003D               	movlb	29	; select bank29
 11657  1462  008F               	movwf	15	;volsfr
 11658                           
 11659                           ;pin_manager.c: 29: PPSLOCK = 0xAA;
 11660  1463  30AA               	movlw	170
 11661  1464  008F               	movwf	15	;volsfr
 11662                           
 11663                           ;pin_manager.c: 30: PPSLOCKbits.PPSLOCKED = 0x00;
 11664  1465  100F               	bcf	15,0	;volsfr
 11665                           
 11666                           ;pin_manager.c: 32: RA6PPS = 0x0E;
 11667  1466  300E               	movlw	14
 11668  1467  003E               	movlb	30	; select bank30
 11669  1468  0096               	movwf	22	;volatile
 11670                           
 11671                           ;pin_manager.c: 33: RA7PPS = 0x0F;
 11672  1469  300F               	movlw	15
 11673  146A  0097               	movwf	23	;volatile
 11674                           
 11675                           ;pin_manager.c: 34: RB0PPS = 0x09;
 11676  146B  3009               	movlw	9
 11677  146C  0098               	movwf	24	;volatile
 11678                           
 11679                           ;pin_manager.c: 35: PPSLOCK = 0x55;
 11680  146D  3055               	movlw	85
 11681  146E  003D               	movlb	29	; select bank29
 11682  146F  008F               	movwf	15	;volsfr
 11683                           
 11684                           ;pin_manager.c: 36: PPSLOCK = 0xAA;
 11685  1470  30AA               	movlw	170
 11686  1471  008F               	movwf	15	;volsfr
 11687                           
 11688                           ;pin_manager.c: 37: PPSLOCKbits.PPSLOCKED = 0x01;
 11689  1472  140F               	bsf	15,0	;volsfr
 11690                           
 11691                           ;pin_manager.c: 38: GIE = state;
 11692  1473  1C70               	btfss	PIN_MANAGER_Initialize@state,0
 11693  1474  2C77               	goto	u2720
 11694  1475  178B               	bsf	11,7	;volatile
 11695  1476  0008               	return
 11696  1477                     u2720:	
 11697  1477  138B               	bcf	11,7	;volatile
 11698  1478  0008               	return
 11699  1479                     __end_of_PIN_MANAGER_Initialize:	
 11700                           
 11701                           	psect	text23
 11702  0800                     __ptext23:	
 11703 ;; *************** function _OSCILLATOR_Initialize *****************
 11704 ;; Defined at:
 11705 ;;		line 89 in file "system.c"
 11706 ;; Parameters:    Size  Location     Type
 11707 ;;		None
 11708 ;; Auto vars:     Size  Location     Type
 11709 ;;		None
 11710 ;; Return value:  Size  Location     Type
 11711 ;;                  1    wreg      void 
 11712 ;; Registers used:
 11713 ;;		wreg, status,2
 11714 ;; Tracked objects:
 11715 ;;		On entry : 0/0
 11716 ;;		On exit  : 0/0
 11717 ;;		Unchanged: 0/0
 11718 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11719 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11720 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11721 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11722 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11723 ;;Total ram usage:        0 bytes
 11724 ;; Hardware stack levels used:    1
 11725 ;; This function calls:
 11726 ;;		Nothing
 11727 ;; This function is called by:
 11728 ;;		_SYSTEM_Initialize
 11729 ;; This function uses a non-reentrant model
 11730 ;;
 11731                           
 11732                           
 11733                           ;psect for function _OSCILLATOR_Initialize
 11734  0800                     _OSCILLATOR_Initialize:	
 11735                           
 11736                           ;system.c: 91: OSCCON1 = 0x60;
 11737                           
 11738                           ;incstack = 0
 11739                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 11740  0800  3060               	movlw	96
 11741  0801  0031               	movlb	17	; select bank17
 11742  0802  008D               	movwf	13	;volatile
 11743                           
 11744                           ;system.c: 92: OSCCON3 = 0x00;
 11745  0803  018F               	clrf	15	;volatile
 11746                           
 11747                           ;system.c: 93: OSCEN = 0x00;
 11748  0804  0191               	clrf	17	;volatile
 11749                           
 11750                           ;system.c: 94: OSCFRQ = 0x06;
 11751  0805  3006               	movlw	6
 11752  0806  0093               	movwf	19	;volatile
 11753                           
 11754                           ;system.c: 95: OSCTUNE = 0x00;
 11755  0807  0192               	clrf	18	;volatile
 11756  0808  0008               	return
 11757  0809                     __end_of_OSCILLATOR_Initialize:	
 11758                           
 11759                           	psect	text24
 11760  1479                     __ptext24:	
 11761 ;; *************** function _LCDInit *****************
 11762 ;; Defined at:
 11763 ;;		line 247 in file "lcd.c"
 11764 ;; Parameters:    Size  Location     Type
 11765 ;;		None
 11766 ;; Auto vars:     Size  Location     Type
 11767 ;;		None
 11768 ;; Return value:  Size  Location     Type
 11769 ;;                  1    wreg      void 
 11770 ;; Registers used:
 11771 ;;		wreg, status,2, status,0, pclath, cstack
 11772 ;; Tracked objects:
 11773 ;;		On entry : 0/0
 11774 ;;		On exit  : 0/0
 11775 ;;		Unchanged: 0/0
 11776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11777 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11778 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11779 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11780 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11781 ;;Total ram usage:        1 bytes
 11782 ;; Hardware stack levels used:    1
 11783 ;; Hardware stack levels required when called:    1
 11784 ;; This function calls:
 11785 ;;		_LCDWrite
 11786 ;; This function is called by:
 11787 ;;		_SYSTEM_Initialize
 11788 ;;		_main
 11789 ;; This function uses a non-reentrant model
 11790 ;;
 11791                           
 11792                           
 11793                           ;psect for function _LCDInit
 11794  1479                     _LCDInit:	
 11795                           
 11796                           ;lcd.c: 249: TRISAbits.TRISA0 = 0;
 11797                           
 11798                           ;incstack = 0
 11799                           ; Regs used in _LCDInit: [wreg+status,2+status,0+pclath+cstack]
 11800  1479  0020               	movlb	0	; select bank0
 11801  147A  1011               	bcf	17,0	;volatile
 11802                           
 11803                           ;lcd.c: 250: TRISAbits.TRISA1 = 0;
 11804  147B  1091               	bcf	17,1	;volatile
 11805                           
 11806                           ;lcd.c: 251: TRISAbits.TRISA2 = 0;
 11807  147C  1111               	bcf	17,2	;volatile
 11808                           
 11809                           ;lcd.c: 252: TRISAbits.TRISA3 = 0;
 11810  147D  1191               	bcf	17,3	;volatile
 11811                           
 11812                           ;lcd.c: 253: TRISAbits.TRISA4 = 0;
 11813  147E  1211               	bcf	17,4	;volatile
 11814                           
 11815                           ;lcd.c: 254: LATAbits.LATA3 = 0;
 11816  147F  1196               	bcf	22,3	;volatile
 11817                           
 11818                           ;lcd.c: 255: LATAbits.LATA4 = 0;
 11819  1480  1216               	bcf	22,4	;volatile
 11820                           
 11821                           ;lcd.c: 256: LATAbits.LATA2 = 0;
 11822  1481  1116               	bcf	22,2	;volatile
 11823                           
 11824                           ;lcd.c: 257: LATAbits.LATA0 = 0;
 11825  1482  1016               	bcf	22,0	;volatile
 11826                           
 11827                           ;lcd.c: 259: LATAbits.LATA0 = 1;
 11828  1483  1416               	bsf	22,0	;volatile
 11829                           
 11830                           ;lcd.c: 261: LCDWrite(0, 0x21);
 11831  1484  3021               	movlw	33
 11832  1485  00F5               	movwf	??_LCDInit
 11833  1486  0875               	movf	??_LCDInit,w
 11834  1487  00F0               	movwf	LCDWrite@data
 11835  1488  3000               	movlw	0
 11836  1489  3193  23F7  3194   	fcall	_LCDWrite
 11837                           
 11838                           ;lcd.c: 269: LCDWrite(0, 0XB9);
 11839  148C  30B9               	movlw	185
 11840  148D  00F5               	movwf	??_LCDInit
 11841  148E  0875               	movf	??_LCDInit,w
 11842  148F  00F0               	movwf	LCDWrite@data
 11843  1490  3000               	movlw	0
 11844  1491  3193  23F7  3194   	fcall	_LCDWrite
 11845                           
 11846                           ;lcd.c: 271: LCDWrite(0, 0x04);
 11847  1494  3004               	movlw	4
 11848  1495  00F5               	movwf	??_LCDInit
 11849  1496  0875               	movf	??_LCDInit,w
 11850  1497  00F0               	movwf	LCDWrite@data
 11851  1498  3000               	movlw	0
 11852  1499  3193  23F7  3194   	fcall	_LCDWrite
 11853                           
 11854                           ;lcd.c: 273: LCDWrite(0, 0x14);
 11855  149C  3014               	movlw	20
 11856  149D  00F5               	movwf	??_LCDInit
 11857  149E  0875               	movf	??_LCDInit,w
 11858  149F  00F0               	movwf	LCDWrite@data
 11859  14A0  3000               	movlw	0
 11860  14A1  3193  23F7  3194   	fcall	_LCDWrite
 11861                           
 11862                           ;lcd.c: 275: LCDWrite(0, 0x20);
 11863  14A4  3020               	movlw	32
 11864  14A5  00F5               	movwf	??_LCDInit
 11865  14A6  0875               	movf	??_LCDInit,w
 11866  14A7  00F0               	movwf	LCDWrite@data
 11867  14A8  3000               	movlw	0
 11868  14A9  3193  23F7  3194   	fcall	_LCDWrite
 11869                           
 11870                           ;lcd.c: 277: LCDWrite(0, 0x0C);
 11871  14AC  300C               	movlw	12
 11872  14AD  00F5               	movwf	??_LCDInit
 11873  14AE  0875               	movf	??_LCDInit,w
 11874  14AF  00F0               	movwf	LCDWrite@data
 11875  14B0  3000               	movlw	0
 11876  14B1  3193  23F7         	fcall	_LCDWrite
 11877  14B3  0008               	return
 11878  14B4                     __end_of_LCDInit:	
 11879                           
 11880                           	psect	text25
 11881  141C                     __ptext25:	
 11882 ;; *************** function _LCDClear *****************
 11883 ;; Defined at:
 11884 ;;		line 182 in file "lcd.c"
 11885 ;; Parameters:    Size  Location     Type
 11886 ;;		None
 11887 ;; Auto vars:     Size  Location     Type
 11888 ;;  index           2    9[COMMON] int 
 11889 ;; Return value:  Size  Location     Type
 11890 ;;                  1    wreg      void 
 11891 ;; Registers used:
 11892 ;;		wreg, status,2, status,0, pclath, cstack
 11893 ;; Tracked objects:
 11894 ;;		On entry : 0/0
 11895 ;;		On exit  : 0/0
 11896 ;;		Unchanged: 0/0
 11897 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11898 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11899 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11900 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11901 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11902 ;;Total ram usage:        3 bytes
 11903 ;; Hardware stack levels used:    1
 11904 ;; Hardware stack levels required when called:    2
 11905 ;; This function calls:
 11906 ;;		_LCDWrite
 11907 ;;		_gotoXY
 11908 ;; This function is called by:
 11909 ;;		_SYSTEM_Initialize
 11910 ;;		_main
 11911 ;; This function uses a non-reentrant model
 11912 ;;
 11913                           
 11914                           
 11915                           ;psect for function _LCDClear
 11916  141C                     _LCDClear:	
 11917                           
 11918                           ;lcd.c: 184: int index;
 11919                           ;lcd.c: 185: for (index = 0 ; index < (84 * 48 / 8) ; index++)
 11920                           
 11921                           ;incstack = 0
 11922                           ; Regs used in _LCDClear: [wreg+status,2+status,0+pclath+cstack]
 11923  141C  01F9               	clrf	LCDClear@index
 11924  141D  01FA               	clrf	LCDClear@index+1
 11925  141E  087A               	movf	LCDClear@index+1,w
 11926  141F  3A80               	xorlw	128
 11927  1420  00F8               	movwf	??_LCDClear
 11928  1421  3081               	movlw	129
 11929  1422  0278               	subwf	??_LCDClear,w
 11930  1423  1D03               	skipz
 11931  1424  2C27               	goto	u2705
 11932  1425  30F8               	movlw	248
 11933  1426  0279               	subwf	LCDClear@index,w
 11934  1427                     u2705:	
 11935  1427  1803               	btfsc	3,0
 11936  1428  2C3D               	goto	l2569
 11937  1429                     l2563:	
 11938                           
 11939                           ;lcd.c: 186: LCDWrite(1, 0x00);
 11940  1429  01F0               	clrf	LCDWrite@data
 11941  142A  3001               	movlw	1
 11942  142B  3193  23F7  3194   	fcall	_LCDWrite
 11943  142E  3001               	movlw	1
 11944  142F  07F9               	addwf	LCDClear@index,f
 11945  1430  3000               	movlw	0
 11946  1431  3DFA               	addwfc	LCDClear@index+1,f
 11947  1432  087A               	movf	LCDClear@index+1,w
 11948  1433  3A80               	xorlw	128
 11949  1434  00F8               	movwf	??_LCDClear
 11950  1435  3081               	movlw	129
 11951  1436  0278               	subwf	??_LCDClear,w
 11952  1437  1D03               	skipz
 11953  1438  2C3B               	goto	u2715
 11954  1439  30F8               	movlw	248
 11955  143A  0279               	subwf	LCDClear@index,w
 11956  143B                     u2715:	
 11957  143B  1C03               	skipc
 11958  143C  2C29               	goto	l2563
 11959  143D                     l2569:	
 11960                           
 11961                           ;lcd.c: 187: gotoXY(0, 0);
 11962  143D  01F5               	clrf	gotoXY@y
 11963  143E  3000               	movlw	0
 11964  143F  3193  2302         	fcall	_gotoXY
 11965  1441  0008               	return
 11966  1442                     __end_of_LCDClear:	
 11967                           
 11968                           	psect	text26
 11969  1302                     __ptext26:	
 11970 ;; *************** function _gotoXY *****************
 11971 ;; Defined at:
 11972 ;;		line 124 in file "lcd.c"
 11973 ;; Parameters:    Size  Location     Type
 11974 ;;  x               1    wreg     unsigned char 
 11975 ;;  y               1    5[COMMON] unsigned char 
 11976 ;; Auto vars:     Size  Location     Type
 11977 ;;  x               1    7[COMMON] unsigned char 
 11978 ;; Return value:  Size  Location     Type
 11979 ;;                  1    wreg      void 
 11980 ;; Registers used:
 11981 ;;		wreg, status,2, status,0, pclath, cstack
 11982 ;; Tracked objects:
 11983 ;;		On entry : 0/0
 11984 ;;		On exit  : 0/0
 11985 ;;		Unchanged: 0/0
 11986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11987 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11988 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11989 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11990 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11991 ;;Total ram usage:        3 bytes
 11992 ;; Hardware stack levels used:    1
 11993 ;; Hardware stack levels required when called:    1
 11994 ;; This function calls:
 11995 ;;		_LCDWrite
 11996 ;; This function is called by:
 11997 ;;		_LCDClear
 11998 ;;		_main
 11999 ;; This function uses a non-reentrant model
 12000 ;;
 12001                           
 12002                           
 12003                           ;psect for function _gotoXY
 12004  1302                     _gotoXY:	
 12005                           
 12006                           ;incstack = 0
 12007                           ; Regs used in _gotoXY: [wreg+status,2+status,0+pclath+cstack]
 12008                           ;gotoXY@x stored from wreg
 12009  1302  00F7               	movwf	gotoXY@x
 12010                           
 12011                           ;lcd.c: 126: LCDWrite(0,(uint8_t)(0x80 | x));
 12012  1303  0877               	movf	gotoXY@x,w
 12013  1304  3880               	iorlw	128
 12014  1305  00F6               	movwf	??_gotoXY
 12015  1306  0876               	movf	??_gotoXY,w
 12016  1307  00F0               	movwf	LCDWrite@data
 12017  1308  3000               	movlw	0
 12018  1309  3193  23F7  3193   	fcall	_LCDWrite
 12019                           
 12020                           ;lcd.c: 127: LCDWrite(0,(uint8_t)(0x40 | y));
 12021  130C  0875               	movf	gotoXY@y,w
 12022  130D  3840               	iorlw	64
 12023  130E  00F6               	movwf	??_gotoXY
 12024  130F  0876               	movf	??_gotoXY,w
 12025  1310  00F0               	movwf	LCDWrite@data
 12026  1311  3000               	movlw	0
 12027  1312  3193  23F7         	fcall	_LCDWrite
 12028  1314  0008               	return
 12029  1315                     __end_of_gotoXY:	
 12030                           
 12031                           	psect	text27
 12032  1739                     __ptext27:	
 12033 ;; *************** function _Init_Battery_State_Machine *****************
 12034 ;; Defined at:
 12035 ;;		line 18 in file "battery_charger.c"
 12036 ;; Parameters:    Size  Location     Type
 12037 ;;  z               1    wreg     unsigned char 
 12038 ;; Auto vars:     Size  Location     Type
 12039 ;;  z               1   34[BANK0 ] unsigned char 
 12040 ;; Return value:  Size  Location     Type
 12041 ;;                  1    wreg      void 
 12042 ;; Registers used:
 12043 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12044 ;; Tracked objects:
 12045 ;;		On entry : 0/0
 12046 ;;		On exit  : 0/0
 12047 ;;		Unchanged: 0/0
 12048 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12049 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12050 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12051 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12052 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12053 ;;Total ram usage:        5 bytes
 12054 ;; Hardware stack levels used:    1
 12055 ;; Hardware stack levels required when called:    2
 12056 ;; This function calls:
 12057 ;;		___awtoft
 12058 ;;		___ftmul
 12059 ;;		___fttol
 12060 ;; This function is called by:
 12061 ;;		_SYSTEM_Initialize
 12062 ;; This function uses a non-reentrant model
 12063 ;;
 12064                           
 12065                           
 12066                           ;psect for function _Init_Battery_State_Machine
 12067  1739                     _Init_Battery_State_Machine:	
 12068                           
 12069                           ;incstack = 0
 12070                           ; Regs used in _Init_Battery_State_Machine: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 12071                           ;Init_Battery_State_Machine@z stored from wreg
 12072  1739  0020               	movlb	0	; select bank0
 12073  173A  00C2               	movwf	Init_Battery_State_Machine@z
 12074                           
 12075                           ;battery_charger.c: 20: batteryState[z] = PRECHARGE;
 12076  173B  3003               	movlw	3
 12077  173C  00BE               	movwf	??_Init_Battery_State_Machine
 12078  173D  0842               	movf	Init_Battery_State_Machine@z,w
 12079  173E  3E64               	addlw	(low (_batteryState| 0))& (0+255)
 12080  173F  0086               	movwf	6
 12081  1740  0187               	clrf	7
 12082  1741  083E               	movf	??_Init_Battery_State_Machine,w
 12083  1742  0081               	movwf	1
 12084                           
 12085                           ;battery_charger.c: 21: stateCounter[z] = 5;
 12086  1743  3542               	lslf	Init_Battery_State_Machine@z,w
 12087  1744  3EC8               	addlw	(low (_stateCounter| 0))& (0+255)
 12088  1745  0086               	movwf	6
 12089  1746  0187               	clrf	7
 12090  1747  3005               	movlw	5
 12091  1748  3FC0               	movwi [0]fsr1
 12092  1749  3000               	movlw	0
 12093  174A  3FC1               	movwi [1]fsr1
 12094                           
 12095                           ;battery_charger.c: 23: Iref[z]=10;
 12096  174B  3542               	lslf	Init_Battery_State_Machine@z,w
 12097  174C  3EC0               	addlw	(low (_Iref| 0))& (0+255)
 12098  174D  0086               	movwf	6
 12099  174E  0187               	clrf	7
 12100  174F  300A               	movlw	10
 12101  1750  3FC0               	movwi [0]fsr1
 12102  1751  3000               	movlw	0
 12103  1752  3FC1               	movwi [1]fsr1
 12104                           
 12105                           ;battery_charger.c: 24: Vref[z]=1425+(int16_t)((250-batteryTemp)*.24);
 12106  1753  096C               	comf	_batteryTemp,w
 12107  1754  00BE               	movwf	??_Init_Battery_State_Machine
 12108  1755  096D               	comf	_batteryTemp+1,w
 12109  1756  00BF               	movwf	??_Init_Battery_State_Machine+1
 12110  1757  0ABE               	incf	??_Init_Battery_State_Machine,f
 12111  1758  1903               	skipnz
 12112  1759  0ABF               	incf	??_Init_Battery_State_Machine+1,f
 12113  175A  083E               	movf	??_Init_Battery_State_Machine,w
 12114  175B  3EFA               	addlw	250
 12115  175C  00F8               	movwf	___awtoft@c
 12116  175D  3000               	movlw	0
 12117  175E  3D3F               	addwfc	??_Init_Battery_State_Machine+1,w
 12118  175F  00F9               	movwf	___awtoft@c+1
 12119  1760  3193  23D7  3197   	fcall	___awtoft
 12120  1763  0878               	movf	?___awtoft,w
 12121  1764  0020               	movlb	0	; select bank0
 12122  1765  00A3               	movwf	___ftmul@f2
 12123  1766  0879               	movf	?___awtoft+1,w
 12124  1767  00A4               	movwf	___ftmul@f2+1
 12125  1768  087A               	movf	?___awtoft+2,w
 12126  1769  00A5               	movwf	___ftmul@f2+2
 12127  176A  30C3               	movlw	195
 12128  176B  00A0               	movwf	___ftmul@f1
 12129  176C  3075               	movlw	117
 12130  176D  00A1               	movwf	___ftmul@f1+1
 12131  176E  303E               	movlw	62
 12132  176F  00A2               	movwf	___ftmul@f1+2
 12133  1770  318B  2332  3197   	fcall	___ftmul
 12134  1773  0020               	movlb	0	; select bank0
 12135  1774  0820               	movf	?___ftmul,w
 12136  1775  00B0               	movwf	___fttol@f1
 12137  1776  0821               	movf	?___ftmul+1,w
 12138  1777  00B1               	movwf	___fttol@f1+1
 12139  1778  0822               	movf	?___ftmul+2,w
 12140  1779  00B2               	movwf	___fttol@f1+2
 12141  177A  3189  2152         	fcall	___fttol
 12142  177C  0020               	movlb	0	; select bank0
 12143  177D  0830               	movf	?___fttol,w
 12144  177E  3E91               	addlw	145
 12145  177F  00C0               	movwf	??_Init_Battery_State_Machine+2
 12146  1780  3005               	movlw	5
 12147  1781  3D31               	addwfc	?___fttol+1,w
 12148  1782  00C1               	movwf	??_Init_Battery_State_Machine+3
 12149  1783  3542               	lslf	Init_Battery_State_Machine@z,w
 12150  1784  3E5A               	addlw	(low (_Vref| 0))& (0+255)
 12151  1785  0086               	movwf	6
 12152  1786  0187               	clrf	7
 12153  1787  0840               	movf	??_Init_Battery_State_Machine+2,w
 12154  1788  3FC0               	movwi [0]fsr1
 12155  1789  0841               	movf	??_Init_Battery_State_Machine+3,w
 12156  178A  3FC1               	movwi [1]fsr1
 12157                           
 12158                           ;battery_charger.c: 26: Imin[z]=15;
 12159  178B  3542               	lslf	Init_Battery_State_Machine@z,w
 12160  178C  3EC4               	addlw	(low (_Imin| 0))& (0+255)
 12161  178D  0086               	movwf	6
 12162  178E  0187               	clrf	7
 12163  178F  300F               	movlw	15
 12164  1790  3FC0               	movwi [0]fsr1
 12165  1791  3000               	movlw	0
 12166  1792  3FC1               	movwi [1]fsr1
 12167                           
 12168                           ;battery_charger.c: 27: IminCount[z] = 100;
 12169  1793  3542               	lslf	Init_Battery_State_Machine@z,w
 12170  1794  3ECC               	addlw	(low (_IminCount| 0))& (0+255)
 12171  1795  0086               	movwf	6
 12172  1796  0187               	clrf	7
 12173  1797  3064               	movlw	100
 12174  1798  3FC0               	movwi [0]fsr1
 12175  1799  3000               	movlw	0
 12176  179A  3FC1               	movwi [1]fsr1
 12177  179B  0008               	return
 12178  179C                     __end_of_Init_Battery_State_Machine:	
 12179                           
 12180                           	psect	text28
 12181  13B8                     __ptext28:	
 12182 ;; *************** function _ADC_Initialize *****************
 12183 ;; Defined at:
 12184 ;;		line 111 in file "adc.c"
 12185 ;; Parameters:    Size  Location     Type
 12186 ;;		None
 12187 ;; Auto vars:     Size  Location     Type
 12188 ;;		None
 12189 ;; Return value:  Size  Location     Type
 12190 ;;                  1    wreg      void 
 12191 ;; Registers used:
 12192 ;;		wreg, status,2
 12193 ;; Tracked objects:
 12194 ;;		On entry : 0/0
 12195 ;;		On exit  : 0/0
 12196 ;;		Unchanged: 0/0
 12197 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12198 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12199 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12200 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12201 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12202 ;;Total ram usage:        0 bytes
 12203 ;; Hardware stack levels used:    1
 12204 ;; This function calls:
 12205 ;;		Nothing
 12206 ;; This function is called by:
 12207 ;;		_SYSTEM_Initialize
 12208 ;; This function uses a non-reentrant model
 12209 ;;
 12210                           
 12211                           
 12212                           ;psect for function _ADC_Initialize
 12213  13B8                     _ADC_Initialize:	
 12214                           
 12215                           ;adc.c: 113: ADCON1 = 0x00;
 12216                           
 12217                           ;incstack = 0
 12218                           ; Regs used in _ADC_Initialize: [wreg+status,2]
 12219  13B8  0021               	movlb	1	; select bank1
 12220  13B9  0194               	clrf	20	;volatile
 12221                           
 12222                           ;adc.c: 115: ADCON2 = 0x00;
 12223  13BA  0195               	clrf	21	;volatile
 12224                           
 12225                           ;adc.c: 117: ADCON3 = 0x00;
 12226  13BB  0196               	clrf	22	;volatile
 12227                           
 12228                           ;adc.c: 119: ADACT = 0x00;
 12229  13BC  0199               	clrf	25	;volatile
 12230                           
 12231                           ;adc.c: 121: ADSTAT = 0x00;
 12232  13BD  0197               	clrf	23	;volatile
 12233                           
 12234                           ;adc.c: 123: FVRCON = 0b11000011;
 12235  13BE  30C3               	movlw	195
 12236  13BF  0032               	movlb	18	; select bank18
 12237  13C0  008C               	movwf	12	;volatile
 12238                           
 12239                           ;adc.c: 124: ADCLK = 0x3F;
 12240  13C1  303F               	movlw	63
 12241  13C2  0021               	movlb	1	; select bank1
 12242  13C3  0098               	movwf	24	;volatile
 12243                           
 12244                           ;adc.c: 131: ADREF = 0x03;
 12245  13C4  3003               	movlw	3
 12246  13C5  009A               	movwf	26	;volatile
 12247                           
 12248                           ;adc.c: 134: ADCAP = 0x00;
 12249  13C6  019B               	clrf	27	;volatile
 12250                           
 12251                           ;adc.c: 137: ADPRE = 0x07;
 12252  13C7  3007               	movlw	7
 12253  13C8  009C               	movwf	28	;volatile
 12254                           
 12255                           ;adc.c: 139: ADACQ = 0x00;
 12256  13C9  019D               	clrf	29	;volatile
 12257                           
 12258                           ;adc.c: 141: ADPCH = 0x00;
 12259  13CA  019E               	clrf	30	;volatile
 12260                           
 12261                           ;adc.c: 143: ADRPT = 0x00;
 12262  13CB  0022               	movlb	2	; select bank2
 12263  13CC  018D               	clrf	13	;volatile
 12264                           
 12265                           ;adc.c: 145: ADLTHL = 0x00;
 12266  13CD  018E               	clrf	14	;volatile
 12267                           
 12268                           ;adc.c: 147: ADLTHH = 0x00;
 12269  13CE  018F               	clrf	15	;volatile
 12270                           
 12271                           ;adc.c: 149: ADUTHL = 0x00;
 12272  13CF  0190               	clrf	16	;volatile
 12273                           
 12274                           ;adc.c: 151: ADUTHH = 0x00;
 12275  13D0  0191               	clrf	17	;volatile
 12276                           
 12277                           ;adc.c: 153: ADSTPTL = 0x00;
 12278  13D1  0192               	clrf	18	;volatile
 12279                           
 12280                           ;adc.c: 155: ADSTPTH = 0x00;
 12281  13D2  0193               	clrf	19	;volatile
 12282                           
 12283                           ;adc.c: 157: ADCON0 = 0x84;
 12284  13D3  3084               	movlw	132
 12285  13D4  0021               	movlb	1	; select bank1
 12286  13D5  0093               	movwf	19	;volatile
 12287  13D6  0008               	return
 12288  13D7                     __end_of_ADC_Initialize:	
 12289                           
 12290                           	psect	text29
 12291  1369                     __ptext29:	
 12292 ;; *************** function _PWM7_LoadDutyValue *****************
 12293 ;; Defined at:
 12294 ;;		line 37 in file "pwm.c"
 12295 ;; Parameters:    Size  Location     Type
 12296 ;;  dutyCycle7      2    0[COMMON] unsigned int 
 12297 ;; Auto vars:     Size  Location     Type
 12298 ;;		None
 12299 ;; Return value:  Size  Location     Type
 12300 ;;                  1    wreg      void 
 12301 ;; Registers used:
 12302 ;;		wreg, status,2, status,0
 12303 ;; Tracked objects:
 12304 ;;		On entry : 0/0
 12305 ;;		On exit  : 0/0
 12306 ;;		Unchanged: 0/0
 12307 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12308 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12309 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12310 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12311 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12312 ;;Total ram usage:        4 bytes
 12313 ;; Hardware stack levels used:    1
 12314 ;; This function calls:
 12315 ;;		Nothing
 12316 ;; This function is called by:
 12317 ;;		_main
 12318 ;; This function uses a non-reentrant model
 12319 ;;
 12320                           
 12321                           
 12322                           ;psect for function _PWM7_LoadDutyValue
 12323  1369                     _PWM7_LoadDutyValue:	
 12324                           
 12325                           ;pwm.c: 39: PWM7DCH = (dutyCycle7 & 0x03FC)>>2;
 12326                           
 12327                           ;incstack = 0
 12328                           ; Regs used in _PWM7_LoadDutyValue: [wreg+status,2+status,0]
 12329  1369  0871               	movf	PWM7_LoadDutyValue@dutyCycle7+1,w
 12330  136A  00F3               	movwf	??_PWM7_LoadDutyValue+1
 12331  136B  0870               	movf	PWM7_LoadDutyValue@dutyCycle7,w
 12332  136C  00F2               	movwf	??_PWM7_LoadDutyValue
 12333  136D  36F3               	lsrf	??_PWM7_LoadDutyValue+1,f
 12334  136E  0CF2               	rrf	??_PWM7_LoadDutyValue,f
 12335  136F  36F3               	lsrf	??_PWM7_LoadDutyValue+1,f
 12336  1370  0CF2               	rrf	??_PWM7_LoadDutyValue,f
 12337  1371  0872               	movf	??_PWM7_LoadDutyValue,w
 12338  1372  0027               	movlb	7	; select bank7
 12339  1373  0091               	movwf	17	;volatile
 12340                           
 12341                           ;pwm.c: 41: PWM7DCL = (dutyCycle7 & 0x0003)<<6;
 12342  1374  0870               	movf	PWM7_LoadDutyValue@dutyCycle7,w
 12343  1375  3903               	andlw	3
 12344  1376  00F2               	movwf	??_PWM7_LoadDutyValue
 12345  1377  3005               	movlw	5
 12346  1378                     u3605:	
 12347  1378  35F2               	lslf	??_PWM7_LoadDutyValue,f
 12348  1379  3EFF               	addlw	-1
 12349  137A  1D03               	skipz
 12350  137B  2B78               	goto	u3605
 12351  137C  3572               	lslf	??_PWM7_LoadDutyValue,w
 12352  137D  0090               	movwf	16	;volatile
 12353  137E  0008               	return
 12354  137F                     __end_of_PWM7_LoadDutyValue:	
 12355                           
 12356                           	psect	text30
 12357  1353                     __ptext30:	
 12358 ;; *************** function _PWM6_LoadDutyValue *****************
 12359 ;; Defined at:
 12360 ;;		line 30 in file "pwm.c"
 12361 ;; Parameters:    Size  Location     Type
 12362 ;;  dutyCycle6      2    0[COMMON] unsigned int 
 12363 ;; Auto vars:     Size  Location     Type
 12364 ;;		None
 12365 ;; Return value:  Size  Location     Type
 12366 ;;                  1    wreg      void 
 12367 ;; Registers used:
 12368 ;;		wreg, status,2, status,0
 12369 ;; Tracked objects:
 12370 ;;		On entry : 0/0
 12371 ;;		On exit  : 0/0
 12372 ;;		Unchanged: 0/0
 12373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12374 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12375 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12376 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12377 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12378 ;;Total ram usage:        4 bytes
 12379 ;; Hardware stack levels used:    1
 12380 ;; This function calls:
 12381 ;;		Nothing
 12382 ;; This function is called by:
 12383 ;;		_main
 12384 ;; This function uses a non-reentrant model
 12385 ;;
 12386                           
 12387                           
 12388                           ;psect for function _PWM6_LoadDutyValue
 12389  1353                     _PWM6_LoadDutyValue:	
 12390                           
 12391                           ;pwm.c: 32: PWM6DCH = (dutyCycle6 & 0x03FC)>>2;
 12392                           
 12393                           ;incstack = 0
 12394                           ; Regs used in _PWM6_LoadDutyValue: [wreg+status,2+status,0]
 12395  1353  0871               	movf	PWM6_LoadDutyValue@dutyCycle6+1,w
 12396  1354  00F3               	movwf	??_PWM6_LoadDutyValue+1
 12397  1355  0870               	movf	PWM6_LoadDutyValue@dutyCycle6,w
 12398  1356  00F2               	movwf	??_PWM6_LoadDutyValue
 12399  1357  36F3               	lsrf	??_PWM6_LoadDutyValue+1,f
 12400  1358  0CF2               	rrf	??_PWM6_LoadDutyValue,f
 12401  1359  36F3               	lsrf	??_PWM6_LoadDutyValue+1,f
 12402  135A  0CF2               	rrf	??_PWM6_LoadDutyValue,f
 12403  135B  0872               	movf	??_PWM6_LoadDutyValue,w
 12404  135C  0027               	movlb	7	; select bank7
 12405  135D  008D               	movwf	13	;volatile
 12406                           
 12407                           ;pwm.c: 34: PWM6DCL = (dutyCycle6 & 0x0003)<<6;
 12408  135E  0870               	movf	PWM6_LoadDutyValue@dutyCycle6,w
 12409  135F  3903               	andlw	3
 12410  1360  00F2               	movwf	??_PWM6_LoadDutyValue
 12411  1361  3005               	movlw	5
 12412  1362                     u3595:	
 12413  1362  35F2               	lslf	??_PWM6_LoadDutyValue,f
 12414  1363  3EFF               	addlw	-1
 12415  1364  1D03               	skipz
 12416  1365  2B62               	goto	u3595
 12417  1366  3572               	lslf	??_PWM6_LoadDutyValue,w
 12418  1367  008C               	movwf	12	;volatile
 12419  1368  0008               	return
 12420  1369                     __end_of_PWM6_LoadDutyValue:	
 12421                           
 12422                           	psect	text31
 12423  1315                     __ptext31:	
 12424 ;; *************** function _LCDWriteString *****************
 12425 ;; Defined at:
 12426 ;;		line 176 in file "lcd.c"
 12427 ;; Parameters:    Size  Location     Type
 12428 ;;  characters      2   12[COMMON] PTR const unsigned char 
 12429 ;;		 -> STR_3(5), STR_2(5), STR_1(4), 
 12430 ;; Auto vars:     Size  Location     Type
 12431 ;;		None
 12432 ;; Return value:  Size  Location     Type
 12433 ;;                  1    wreg      void 
 12434 ;; Registers used:
 12435 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12436 ;; Tracked objects:
 12437 ;;		On entry : 0/0
 12438 ;;		On exit  : 0/0
 12439 ;;		Unchanged: 0/0
 12440 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12441 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12442 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12443 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12444 ;;      Totals:         2       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12445 ;;Total ram usage:        3 bytes
 12446 ;; Hardware stack levels used:    1
 12447 ;; Hardware stack levels required when called:    2
 12448 ;; This function calls:
 12449 ;;		_LCDWriteCharacter
 12450 ;; This function is called by:
 12451 ;;		_main
 12452 ;; This function uses a non-reentrant model
 12453 ;;
 12454                           
 12455                           
 12456                           ;psect for function _LCDWriteString
 12457  1315                     _LCDWriteString:	
 12458  1315                     l2993:	
 12459                           ;lcd.c: 178: while (*characters)
 12460                           
 12461                           ;incstack = 0
 12462                           ; Regs used in _LCDWriteString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12463                           
 12464  1315  087C               	movf	LCDWriteString@characters,w
 12465  1316  0084               	movwf	4
 12466  1317  087D               	movf	LCDWriteString@characters+1,w
 12467  1318  0085               	movwf	5
 12468  1319  0012               	moviw fsr0++
 12469  131A  1903               	btfsc	3,2
 12470  131B  0008               	return
 12471                           
 12472                           ;lcd.c: 179: LCDWriteCharacter(*characters++);
 12473  131C  087C               	movf	LCDWriteString@characters,w
 12474  131D  0084               	movwf	4
 12475  131E  087D               	movf	LCDWriteString@characters+1,w
 12476  131F  0085               	movwf	5
 12477  1320  0800               	movf	0,w	;code access
 12478  1321  3196  2685  3193   	fcall	_LCDWriteCharacter
 12479  1324  3001               	movlw	1
 12480  1325  07FC               	addwf	LCDWriteString@characters,f
 12481  1326  3000               	movlw	0
 12482  1327  3DFD               	addwfc	LCDWriteString@characters+1,f
 12483  1328  2B15               	goto	l2993
 12484  1329                     __end_of_LCDWriteString:	
 12485                           
 12486                           	psect	text32
 12487  0BE6                     __ptext32:	
 12488 ;; *************** function _LCDWriteInt *****************
 12489 ;; Defined at:
 12490 ;;		line 190 in file "lcd.c"
 12491 ;; Parameters:    Size  Location     Type
 12492 ;;  value           2    0[BANK0 ] int 
 12493 ;;  fieldLength     1    2[BANK0 ] char 
 12494 ;;  numPlaces       1    3[BANK0 ] unsigned char 
 12495 ;;  sign            1    4[BANK0 ] unsigned char 
 12496 ;; Auto vars:     Size  Location     Type
 12497 ;;  str             5    9[BANK0 ] unsigned char [5]
 12498 ;;  i               1   15[BANK0 ] unsigned char 
 12499 ;;  j               1   14[BANK0 ] unsigned char 
 12500 ;; Return value:  Size  Location     Type
 12501 ;;                  1    wreg      void 
 12502 ;; Registers used:
 12503 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12504 ;; Tracked objects:
 12505 ;;		On entry : 0/0
 12506 ;;		On exit  : 0/0
 12507 ;;		Unchanged: 0/0
 12508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12509 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12510 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12511 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12512 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12513 ;;Total ram usage:       16 bytes
 12514 ;; Hardware stack levels used:    1
 12515 ;; Hardware stack levels required when called:    2
 12516 ;; This function calls:
 12517 ;;		_LCDWriteCharacter
 12518 ;;		___awdiv
 12519 ;;		___lwmod
 12520 ;; This function is called by:
 12521 ;;		_main
 12522 ;; This function uses a non-reentrant model
 12523 ;;
 12524                           
 12525                           
 12526                           ;psect for function _LCDWriteInt
 12527  0BE6                     _LCDWriteInt:	
 12528                           
 12529                           ;lcd.c: 192: uint8_t str[5]={0,0,0,0,0};
 12530                           
 12531                           ;incstack = 0
 12532                           ; Regs used in _LCDWriteInt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12533  0BE6  3030               	movlw	low LCDWriteInt@F14388
 12534  0BE7  0086               	movwf	6
 12535  0BE8  3001               	movlw	high LCDWriteInt@F14388
 12536  0BE9  0087               	movwf	7
 12537  0BEA  3029               	movlw	low LCDWriteInt@str
 12538  0BEB  0084               	movwf	4
 12539  0BEC  3000               	movlw	high LCDWriteInt@str
 12540  0BED  0085               	movwf	5
 12541  0BEE  3005               	movlw	5
 12542  0BEF  0020               	movlb	0	; select bank0
 12543  0BF0  00A5               	movwf	??_LCDWriteInt
 12544  0BF1                     u3500:	
 12545  0BF1  0016               	moviw fsr1++
 12546  0BF2  001A               	movwi fsr0++
 12547  0BF3  0BA5               	decfsz	??_LCDWriteInt,f
 12548  0BF4  2BF1               	goto	u3500
 12549                           
 12550                           ;lcd.c: 193: uint8_t i=4,j=0;
 12551  0BF5  3004               	movlw	4
 12552  0BF6  00A5               	movwf	??_LCDWriteInt
 12553  0BF7  0825               	movf	??_LCDWriteInt,w
 12554  0BF8  00AF               	movwf	LCDWriteInt@i
 12555  0BF9  01AE               	clrf	LCDWriteInt@j
 12556                           
 12557                           ;lcd.c: 195: if(value<0)
 12558  0BFA  1FA1               	btfss	LCDWriteInt@value+1,7
 12559  0BFB  2C07               	goto	l3007
 12560                           
 12561                           ;lcd.c: 196: {
 12562                           ;lcd.c: 197: LCDWriteCharacter('-');
 12563  0BFC  302D               	movlw	45
 12564  0BFD  3196  2685  318B   	fcall	_LCDWriteCharacter
 12565                           
 12566                           ;lcd.c: 198: value=value*-1;
 12567  0C00  0020               	movlb	0	; select bank0
 12568  0C01  09A0               	comf	LCDWriteInt@value,f
 12569  0C02  09A1               	comf	LCDWriteInt@value+1,f
 12570  0C03  0AA0               	incf	LCDWriteInt@value,f
 12571  0C04  1903               	skipnz
 12572  0C05  0AA1               	incf	LCDWriteInt@value+1,f
 12573                           
 12574                           ;lcd.c: 199: }
 12575  0C06  2C0E               	goto	l3017
 12576  0C07                     l3007:	
 12577                           
 12578                           ;lcd.c: 201: else
 12579                           ;lcd.c: 202: {
 12580                           ;lcd.c: 203: if(sign == 1)
 12581  0C07  0324               	decf	LCDWriteInt@sign,w
 12582  0C08  1D03               	btfss	3,2
 12583  0C09  2C0E               	goto	l3017
 12584                           
 12585                           ;lcd.c: 204: {
 12586                           ;lcd.c: 205: LCDWriteCharacter('+');
 12587  0C0A  302B               	movlw	43
 12588  0C0B  3196  2685  318B   	fcall	_LCDWriteCharacter
 12589  0C0E                     l3017:	
 12590                           ;lcd.c: 206: }
 12591                           ;lcd.c: 207: }
 12592                           ;lcd.c: 209: while(value)
 12593                           
 12594  0C0E  0020               	movlb	0	; select bank0
 12595  0C0F  0820               	movf	LCDWriteInt@value,w
 12596  0C10  0421               	iorwf	LCDWriteInt@value+1,w
 12597  0C11  1903               	btfsc	3,2
 12598  0C12  2C3B               	goto	l3019
 12599                           
 12600                           ;lcd.c: 210: {
 12601                           ;lcd.c: 211: str[i]=(uint16_t)value%10;
 12602  0C13  300A               	movlw	10
 12603  0C14  00F0               	movwf	___lwmod@divisor
 12604  0C15  3000               	movlw	0
 12605  0C16  00F1               	movwf	___lwmod@divisor+1
 12606  0C17  0020               	movlb	0	; select bank0
 12607  0C18  0821               	movf	LCDWriteInt@value+1,w
 12608  0C19  00F3               	movwf	___lwmod@dividend+1
 12609  0C1A  0820               	movf	LCDWriteInt@value,w
 12610  0C1B  00F2               	movwf	___lwmod@dividend
 12611  0C1C  3180  2004  318B   	fcall	___lwmod
 12612  0C1F  0870               	movf	?___lwmod,w
 12613  0C20  0020               	movlb	0	; select bank0
 12614  0C21  00A5               	movwf	??_LCDWriteInt
 12615  0C22  082F               	movf	LCDWriteInt@i,w
 12616  0C23  3E29               	addlw	(low (LCDWriteInt@str| 0))& (0+255)
 12617  0C24  0086               	movwf	6
 12618  0C25  0187               	clrf	7
 12619  0C26  0825               	movf	??_LCDWriteInt,w
 12620  0C27  0081               	movwf	1
 12621                           
 12622                           ;lcd.c: 212: value=value/10;
 12623  0C28  300A               	movlw	10
 12624  0C29  00F0               	movwf	___awdiv@divisor
 12625  0C2A  3000               	movlw	0
 12626  0C2B  00F1               	movwf	___awdiv@divisor+1
 12627  0C2C  0821               	movf	LCDWriteInt@value+1,w
 12628  0C2D  00F3               	movwf	___awdiv@dividend+1
 12629  0C2E  0820               	movf	LCDWriteInt@value,w
 12630  0C2F  00F2               	movwf	___awdiv@dividend
 12631  0C30  3196  2634  318B   	fcall	___awdiv
 12632  0C33  0871               	movf	?___awdiv+1,w
 12633  0C34  0020               	movlb	0	; select bank0
 12634  0C35  00A1               	movwf	LCDWriteInt@value+1
 12635  0C36  0870               	movf	?___awdiv,w
 12636  0C37  00A0               	movwf	LCDWriteInt@value
 12637                           
 12638                           ;lcd.c: 213: i--;
 12639  0C38  3001               	movlw	1
 12640  0C39  02AF               	subwf	LCDWriteInt@i,f
 12641  0C3A  2C0E               	goto	l3017
 12642  0C3B                     l3019:	
 12643                           
 12644                           ;lcd.c: 214: }
 12645                           ;lcd.c: 215: if(fieldLength==-1)
 12646  0C3B  0A22               	incf	LCDWriteInt@fieldLength,w
 12647  0C3C  1903               	btfsc	3,2
 12648  0C3D  2C43               	goto	l3025
 12649  0C3E  2C4B               	goto	l3027
 12650  0C3F                     l3023:	
 12651                           ;lcd.c: 216: {
 12652                           ;lcd.c: 217: while(str[j]==0)
 12653                           
 12654                           
 12655                           ;lcd.c: 218: {
 12656                           ;lcd.c: 219: j++;
 12657  0C3F  3001               	movlw	1
 12658  0C40  00A5               	movwf	??_LCDWriteInt
 12659  0C41  0825               	movf	??_LCDWriteInt,w
 12660  0C42  07AE               	addwf	LCDWriteInt@j,f
 12661  0C43                     l3025:	
 12662  0C43  082E               	movf	LCDWriteInt@j,w
 12663  0C44  3E29               	addlw	(low (LCDWriteInt@str| 0))& (0+255)
 12664  0C45  0086               	movwf	6
 12665  0C46  0187               	clrf	7
 12666  0C47  0801               	movf	1,w
 12667  0C48  1D03               	btfss	3,2
 12668  0C49  2C51               	goto	l3029
 12669  0C4A  2C3F               	goto	l3023
 12670  0C4B                     l3027:	
 12671                           ;lcd.c: 220: }
 12672                           ;lcd.c: 221: }
 12673                           
 12674                           
 12675                           ;lcd.c: 222: else
 12676                           ;lcd.c: 223: {
 12677                           ;lcd.c: 224: j=(uint8_t)(5-fieldLength);
 12678  0C4B  0322               	decf	LCDWriteInt@fieldLength,w
 12679  0C4C  3AFF               	xorlw	255
 12680  0C4D  3E05               	addlw	5
 12681  0C4E  00A5               	movwf	??_LCDWriteInt
 12682  0C4F  0825               	movf	??_LCDWriteInt,w
 12683  0C50  00AE               	movwf	LCDWriteInt@j
 12684  0C51                     l3029:	
 12685                           
 12686                           ;lcd.c: 225: }
 12687                           ;lcd.c: 227: for(i=j;i<(5-numPlaces);i++)
 12688  0C51  082E               	movf	LCDWriteInt@j,w
 12689  0C52  00A5               	movwf	??_LCDWriteInt
 12690  0C53  0825               	movf	??_LCDWriteInt,w
 12691  0C54  00AF               	movwf	LCDWriteInt@i
 12692  0C55                     l3035:	
 12693  0C55  0823               	movf	LCDWriteInt@numPlaces,w
 12694  0C56  00A5               	movwf	??_LCDWriteInt
 12695  0C57  01A6               	clrf	??_LCDWriteInt+1
 12696  0C58  09A5               	comf	??_LCDWriteInt,f
 12697  0C59  09A6               	comf	??_LCDWriteInt+1,f
 12698  0C5A  0AA5               	incf	??_LCDWriteInt,f
 12699  0C5B  1903               	skipnz
 12700  0C5C  0AA6               	incf	??_LCDWriteInt+1,f
 12701  0C5D  0825               	movf	??_LCDWriteInt,w
 12702  0C5E  3E05               	addlw	5
 12703  0C5F  00A7               	movwf	??_LCDWriteInt+2
 12704  0C60  3000               	movlw	0
 12705  0C61  3D26               	addwfc	??_LCDWriteInt+1,w
 12706  0C62  00A8               	movwf	??_LCDWriteInt+3
 12707  0C63  0828               	movf	??_LCDWriteInt+3,w
 12708  0C64  3A80               	xorlw	128
 12709  0C65  3C80               	sublw	128
 12710  0C66  1D03               	skipz
 12711  0C67  2C6A               	goto	u3565
 12712  0C68  0827               	movf	??_LCDWriteInt+2,w
 12713  0C69  022F               	subwf	LCDWriteInt@i,w
 12714  0C6A                     u3565:	
 12715  0C6A  1803               	btfsc	3,0
 12716  0C6B  2C7C               	goto	l3037
 12717                           
 12718                           ;lcd.c: 228: {
 12719                           ;lcd.c: 229: LCDWriteCharacter((uint8_t)(48+str[i]));
 12720  0C6C  0020               	movlb	0	; select bank0
 12721  0C6D  082F               	movf	LCDWriteInt@i,w
 12722  0C6E  3E29               	addlw	(low (LCDWriteInt@str| 0))& (0+255)
 12723  0C6F  0086               	movwf	6
 12724  0C70  0187               	clrf	7
 12725  0C71  0801               	movf	1,w
 12726  0C72  3E30               	addlw	48
 12727  0C73  3196  2685  318B   	fcall	_LCDWriteCharacter
 12728  0C76  3001               	movlw	1
 12729  0C77  0020               	movlb	0	; select bank0
 12730  0C78  00A5               	movwf	??_LCDWriteInt
 12731  0C79  0825               	movf	??_LCDWriteInt,w
 12732  0C7A  07AF               	addwf	LCDWriteInt@i,f
 12733  0C7B  2C55               	goto	l3035
 12734  0C7C                     l3037:	
 12735                           
 12736                           ;lcd.c: 230: }
 12737                           ;lcd.c: 232: if(numPlaces == 1)
 12738  0C7C  0020               	movlb	0	; select bank0
 12739  0C7D  0323               	decf	LCDWriteInt@numPlaces,w
 12740  0C7E  1D03               	btfss	3,2
 12741  0C7F  2C8A               	goto	l3041
 12742                           
 12743                           ;lcd.c: 233: {
 12744                           ;lcd.c: 234: LCDWriteCharacter(46);
 12745  0C80  302E               	movlw	46
 12746  0C81  3196  2685  318B   	fcall	_LCDWriteCharacter
 12747                           
 12748                           ;lcd.c: 235: LCDWriteCharacter ((uint8_t)(48+str[4]));
 12749  0C84  0020               	movlb	0	; select bank0
 12750  0C85  082D               	movf	LCDWriteInt@str+4,w
 12751  0C86  3E30               	addlw	48
 12752  0C87  3196  2685  318B   	fcall	_LCDWriteCharacter
 12753  0C8A                     l3041:	
 12754                           
 12755                           ;lcd.c: 236: }
 12756                           ;lcd.c: 238: if(numPlaces == 2)
 12757  0C8A  3002               	movlw	2
 12758  0C8B  0020               	movlb	0	; select bank0
 12759  0C8C  0623               	xorwf	LCDWriteInt@numPlaces,w
 12760  0C8D  1D03               	btfss	3,2
 12761  0C8E  0008               	return
 12762                           
 12763                           ;lcd.c: 239: {
 12764                           ;lcd.c: 240: LCDWriteCharacter(46);
 12765  0C8F  302E               	movlw	46
 12766  0C90  3196  2685  318B   	fcall	_LCDWriteCharacter
 12767                           
 12768                           ;lcd.c: 241: LCDWriteCharacter((uint8_t)(48+str[3]));
 12769  0C93  0020               	movlb	0	; select bank0
 12770  0C94  082C               	movf	LCDWriteInt@str+3,w
 12771  0C95  3E30               	addlw	48
 12772  0C96  3196  2685  318B   	fcall	_LCDWriteCharacter
 12773                           
 12774                           ;lcd.c: 242: LCDWriteCharacter((uint8_t)(48+str[4]));
 12775  0C99  0020               	movlb	0	; select bank0
 12776  0C9A  082D               	movf	LCDWriteInt@str+4,w
 12777  0C9B  3E30               	addlw	48
 12778  0C9C  3196  2685         	fcall	_LCDWriteCharacter
 12779  0C9E  0008               	return
 12780  0C9F                     __end_of_LCDWriteInt:	
 12781                           
 12782                           	psect	text33
 12783  0004                     __ptext33:	
 12784 ;; *************** function ___lwmod *****************
 12785 ;; Defined at:
 12786 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 12787 ;; Parameters:    Size  Location     Type
 12788 ;;  divisor         2    0[COMMON] unsigned int 
 12789 ;;  dividend        2    2[COMMON] unsigned int 
 12790 ;; Auto vars:     Size  Location     Type
 12791 ;;  counter         1    5[COMMON] unsigned char 
 12792 ;; Return value:  Size  Location     Type
 12793 ;;                  2    0[COMMON] unsigned int 
 12794 ;; Registers used:
 12795 ;;		wreg, status,2, status,0
 12796 ;; Tracked objects:
 12797 ;;		On entry : 0/0
 12798 ;;		On exit  : 0/0
 12799 ;;		Unchanged: 0/0
 12800 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12801 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12802 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12803 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12804 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12805 ;;Total ram usage:        6 bytes
 12806 ;; Hardware stack levels used:    1
 12807 ;; This function calls:
 12808 ;;		Nothing
 12809 ;; This function is called by:
 12810 ;;		_LCDWriteInt
 12811 ;; This function uses a non-reentrant model
 12812 ;;
 12813                           
 12814                           
 12815                           ;psect for function ___lwmod
 12816  0004                     ___lwmod:	
 12817                           
 12818                           ;incstack = 0
 12819                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
 12820  0004  0870               	movf	___lwmod@divisor,w
 12821  0005  0471               	iorwf	___lwmod@divisor+1,w
 12822  0006  1903               	btfsc	3,2
 12823  0007  282B               	goto	l2833
 12824  0008  01F5               	clrf	___lwmod@counter
 12825  0009  0AF5               	incf	___lwmod@counter,f
 12826  000A                     l2823:	
 12827  000A  1BF1               	btfsc	___lwmod@divisor+1,7
 12828  000B  2816               	goto	l2825
 12829  000C  3001               	movlw	1
 12830  000D                     u3065:	
 12831  000D  35F0               	lslf	___lwmod@divisor,f
 12832  000E  0DF1               	rlf	___lwmod@divisor+1,f
 12833  000F  0B89               	decfsz	9,f
 12834  0010  280D               	goto	u3065
 12835  0011  3001               	movlw	1
 12836  0012  00F4               	movwf	??___lwmod
 12837  0013  0874               	movf	??___lwmod,w
 12838  0014  07F5               	addwf	___lwmod@counter,f
 12839  0015  280A               	goto	l2823
 12840  0016                     l2825:	
 12841  0016  0871               	movf	___lwmod@divisor+1,w
 12842  0017  0273               	subwf	___lwmod@dividend+1,w
 12843  0018  1D03               	skipz
 12844  0019  281C               	goto	u3085
 12845  001A  0870               	movf	___lwmod@divisor,w
 12846  001B  0272               	subwf	___lwmod@dividend,w
 12847  001C                     u3085:	
 12848  001C  1C03               	skipc
 12849  001D  2822               	goto	l2829
 12850  001E  0870               	movf	___lwmod@divisor,w
 12851  001F  02F2               	subwf	___lwmod@dividend,f
 12852  0020  0871               	movf	___lwmod@divisor+1,w
 12853  0021  3BF3               	subwfb	___lwmod@dividend+1,f
 12854  0022                     l2829:	
 12855  0022  3001               	movlw	1
 12856  0023                     u3095:	
 12857  0023  36F1               	lsrf	___lwmod@divisor+1,f
 12858  0024  0CF0               	rrf	___lwmod@divisor,f
 12859  0025  0B89               	decfsz	9,f
 12860  0026  2823               	goto	u3095
 12861  0027  3001               	movlw	1
 12862  0028  02F5               	subwf	___lwmod@counter,f
 12863  0029  1D03               	btfss	3,2
 12864  002A  2816               	goto	l2825
 12865  002B                     l2833:	
 12866  002B  0873               	movf	___lwmod@dividend+1,w
 12867  002C  00F1               	movwf	?___lwmod+1
 12868  002D  0872               	movf	___lwmod@dividend,w
 12869  002E  00F0               	movwf	?___lwmod
 12870  002F  0008               	return
 12871  0030                     __end_of___lwmod:	
 12872                           
 12873                           	psect	text34
 12874  1634                     __ptext34:	
 12875 ;; *************** function ___awdiv *****************
 12876 ;; Defined at:
 12877 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
 12878 ;; Parameters:    Size  Location     Type
 12879 ;;  divisor         2    0[COMMON] int 
 12880 ;;  dividend        2    2[COMMON] int 
 12881 ;; Auto vars:     Size  Location     Type
 12882 ;;  quotient        2    7[COMMON] int 
 12883 ;;  sign            1    6[COMMON] unsigned char 
 12884 ;;  counter         1    5[COMMON] unsigned char 
 12885 ;; Return value:  Size  Location     Type
 12886 ;;                  2    0[COMMON] int 
 12887 ;; Registers used:
 12888 ;;		wreg, status,2, status,0
 12889 ;; Tracked objects:
 12890 ;;		On entry : 0/0
 12891 ;;		On exit  : 0/0
 12892 ;;		Unchanged: 0/0
 12893 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12894 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12895 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12896 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12897 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12898 ;;Total ram usage:        9 bytes
 12899 ;; Hardware stack levels used:    1
 12900 ;; This function calls:
 12901 ;;		Nothing
 12902 ;; This function is called by:
 12903 ;;		_LCDWriteInt
 12904 ;; This function uses a non-reentrant model
 12905 ;;
 12906                           
 12907                           
 12908                           ;psect for function ___awdiv
 12909  1634                     ___awdiv:	
 12910                           
 12911                           ;incstack = 0
 12912                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 12913  1634  01F6               	clrf	___awdiv@sign
 12914  1635  1FF1               	btfss	___awdiv@divisor+1,7
 12915  1636  2E3E               	goto	l2729
 12916  1637  09F0               	comf	___awdiv@divisor,f
 12917  1638  09F1               	comf	___awdiv@divisor+1,f
 12918  1639  0AF0               	incf	___awdiv@divisor,f
 12919  163A  1903               	skipnz
 12920  163B  0AF1               	incf	___awdiv@divisor+1,f
 12921  163C  01F6               	clrf	___awdiv@sign
 12922  163D  0AF6               	incf	___awdiv@sign,f
 12923  163E                     l2729:	
 12924  163E  1FF3               	btfss	___awdiv@dividend+1,7
 12925  163F  2E49               	goto	l2735
 12926  1640  09F2               	comf	___awdiv@dividend,f
 12927  1641  09F3               	comf	___awdiv@dividend+1,f
 12928  1642  0AF2               	incf	___awdiv@dividend,f
 12929  1643  1903               	skipnz
 12930  1644  0AF3               	incf	___awdiv@dividend+1,f
 12931  1645  3001               	movlw	1
 12932  1646  00F4               	movwf	??___awdiv
 12933  1647  0874               	movf	??___awdiv,w
 12934  1648  06F6               	xorwf	___awdiv@sign,f
 12935  1649                     l2735:	
 12936  1649  01F7               	clrf	___awdiv@quotient
 12937  164A  01F8               	clrf	___awdiv@quotient+1
 12938  164B  0870               	movf	___awdiv@divisor,w
 12939  164C  0471               	iorwf	___awdiv@divisor+1,w
 12940  164D  1903               	btfsc	3,2
 12941  164E  2E78               	goto	l2757
 12942  164F  01F5               	clrf	___awdiv@counter
 12943  1650  0AF5               	incf	___awdiv@counter,f
 12944  1651                     l2745:	
 12945  1651  1BF1               	btfsc	___awdiv@divisor+1,7
 12946  1652  2E5D               	goto	l2747
 12947  1653  3001               	movlw	1
 12948  1654                     u2895:	
 12949  1654  35F0               	lslf	___awdiv@divisor,f
 12950  1655  0DF1               	rlf	___awdiv@divisor+1,f
 12951  1656  0B89               	decfsz	9,f
 12952  1657  2E54               	goto	u2895
 12953  1658  3001               	movlw	1
 12954  1659  00F4               	movwf	??___awdiv
 12955  165A  0874               	movf	??___awdiv,w
 12956  165B  07F5               	addwf	___awdiv@counter,f
 12957  165C  2E51               	goto	l2745
 12958  165D                     l2747:	
 12959  165D  3001               	movlw	1
 12960  165E                     u2915:	
 12961  165E  35F7               	lslf	___awdiv@quotient,f
 12962  165F  0DF8               	rlf	___awdiv@quotient+1,f
 12963  1660  0B89               	decfsz	9,f
 12964  1661  2E5E               	goto	u2915
 12965  1662  0871               	movf	___awdiv@divisor+1,w
 12966  1663  0273               	subwf	___awdiv@dividend+1,w
 12967  1664  1D03               	skipz
 12968  1665  2E68               	goto	u2925
 12969  1666  0870               	movf	___awdiv@divisor,w
 12970  1667  0272               	subwf	___awdiv@dividend,w
 12971  1668                     u2925:	
 12972  1668  1C03               	skipc
 12973  1669  2E6F               	goto	l2753
 12974  166A  0870               	movf	___awdiv@divisor,w
 12975  166B  02F2               	subwf	___awdiv@dividend,f
 12976  166C  0871               	movf	___awdiv@divisor+1,w
 12977  166D  3BF3               	subwfb	___awdiv@dividend+1,f
 12978  166E  1477               	bsf	___awdiv@quotient,0
 12979  166F                     l2753:	
 12980  166F  3001               	movlw	1
 12981  1670                     u2935:	
 12982  1670  36F1               	lsrf	___awdiv@divisor+1,f
 12983  1671  0CF0               	rrf	___awdiv@divisor,f
 12984  1672  0B89               	decfsz	9,f
 12985  1673  2E70               	goto	u2935
 12986  1674  3001               	movlw	1
 12987  1675  02F5               	subwf	___awdiv@counter,f
 12988  1676  1D03               	btfss	3,2
 12989  1677  2E5D               	goto	l2747
 12990  1678                     l2757:	
 12991  1678  0876               	movf	___awdiv@sign,w
 12992  1679  1903               	btfsc	3,2
 12993  167A  2E80               	goto	l2761
 12994  167B  09F7               	comf	___awdiv@quotient,f
 12995  167C  09F8               	comf	___awdiv@quotient+1,f
 12996  167D  0AF7               	incf	___awdiv@quotient,f
 12997  167E  1903               	skipnz
 12998  167F  0AF8               	incf	___awdiv@quotient+1,f
 12999  1680                     l2761:	
 13000  1680  0878               	movf	___awdiv@quotient+1,w
 13001  1681  00F1               	movwf	?___awdiv+1
 13002  1682  0877               	movf	___awdiv@quotient,w
 13003  1683  00F0               	movwf	?___awdiv
 13004  1684  0008               	return
 13005  1685                     __end_of___awdiv:	
 13006                           
 13007                           	psect	text35
 13008  1685                     __ptext35:	
 13009 ;; *************** function _LCDWriteCharacter *****************
 13010 ;; Defined at:
 13011 ;;		line 140 in file "lcd.c"
 13012 ;; Parameters:    Size  Location     Type
 13013 ;;  character       1    wreg     const unsigned char 
 13014 ;; Auto vars:     Size  Location     Type
 13015 ;;  character       1    9[COMMON] const unsigned char 
 13016 ;;  base            2   10[COMMON] unsigned int 
 13017 ;; Return value:  Size  Location     Type
 13018 ;;                  1    wreg      void 
 13019 ;; Registers used:
 13020 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13021 ;; Tracked objects:
 13022 ;;		On entry : 0/0
 13023 ;;		On exit  : 0/0
 13024 ;;		Unchanged: 0/0
 13025 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13026 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13027 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13028 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13029 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13030 ;;Total ram usage:        6 bytes
 13031 ;; Hardware stack levels used:    1
 13032 ;; Hardware stack levels required when called:    1
 13033 ;; This function calls:
 13034 ;;		_LCDWrite
 13035 ;;		___wmul
 13036 ;; This function is called by:
 13037 ;;		_LCDWriteString
 13038 ;;		_LCDWriteInt
 13039 ;;		_main
 13040 ;; This function uses a non-reentrant model
 13041 ;;
 13042                           
 13043                           
 13044                           ;psect for function _LCDWriteCharacter
 13045  1685                     _LCDWriteCharacter:	
 13046                           
 13047                           ;incstack = 0
 13048                           ; Regs used in _LCDWriteCharacter: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13049                           ;LCDWriteCharacter@character stored from wreg
 13050  1685  00F9               	movwf	LCDWriteCharacter@character
 13051                           
 13052                           ;lcd.c: 142: uint16_t base;
 13053                           ;lcd.c: 143: base = character - 0x20;
 13054  1686  0879               	movf	LCDWriteCharacter@character,w
 13055  1687  3EE0               	addlw	224
 13056  1688  00FA               	movwf	LCDWriteCharacter@base
 13057  1689  30FF               	movlw	255
 13058  168A  1803               	skipnc
 13059  168B  3000               	movlw	0
 13060  168C  00FB               	movwf	LCDWriteCharacter@base+1
 13061                           
 13062                           ;lcd.c: 144: base *= 3;
 13063  168D  3003               	movlw	3
 13064  168E  00F0               	movwf	___wmul@multiplier
 13065  168F  3000               	movlw	0
 13066  1690  00F1               	movwf	___wmul@multiplier+1
 13067  1691  087B               	movf	LCDWriteCharacter@base+1,w
 13068  1692  00F3               	movwf	___wmul@multiplicand+1
 13069  1693  087A               	movf	LCDWriteCharacter@base,w
 13070  1694  00F2               	movwf	___wmul@multiplicand
 13071  1695  3193  237F  3196   	fcall	___wmul
 13072  1698  0871               	movf	?___wmul+1,w
 13073  1699  00FB               	movwf	LCDWriteCharacter@base+1
 13074  169A  0870               	movf	?___wmul,w
 13075  169B  00FA               	movwf	LCDWriteCharacter@base
 13076                           
 13077                           ;lcd.c: 145: LCDWrite(1,fonts[base]);
 13078  169C  087B               	movf	LCDWriteCharacter@base+1,w
 13079  169D  0085               	movwf	5
 13080  169E  087A               	movf	LCDWriteCharacter@base,w
 13081  169F  0084               	movwf	4
 13082  16A0  3000               	movlw	low (_fonts| (0+32768))
 13083  16A1  0784               	addwf	4,f
 13084  16A2  3090               	movlw	high (_fonts| (0+32768))
 13085  16A3  3D85               	addwfc	5,f
 13086  16A4  0800               	movf	0,w	;code access
 13087  16A5  00F6               	movwf	??_LCDWriteCharacter
 13088  16A6  0876               	movf	??_LCDWriteCharacter,w
 13089  16A7  00F0               	movwf	LCDWrite@data
 13090  16A8  3001               	movlw	1
 13091  16A9  3193  23F7  3196   	fcall	_LCDWrite
 13092                           
 13093                           ;lcd.c: 146: LCDWrite(1,fonts[base + 1]);
 13094  16AC  087A               	movf	LCDWriteCharacter@base,w
 13095  16AD  3E01               	addlw	1
 13096  16AE  00F6               	movwf	??_LCDWriteCharacter
 13097  16AF  3000               	movlw	0
 13098  16B0  3D7B               	addwfc	LCDWriteCharacter@base+1,w
 13099  16B1  00F7               	movwf	??_LCDWriteCharacter+1
 13100  16B2  3000               	movlw	low (_fonts| (0+32768))
 13101  16B3  0776               	addwf	??_LCDWriteCharacter,w
 13102  16B4  0084               	movwf	4
 13103  16B5  3090               	movlw	high (_fonts| (0+32768))
 13104  16B6  3D77               	addwfc	??_LCDWriteCharacter+1,w
 13105  16B7  0085               	movwf	5
 13106  16B8  0800               	movf	0,w	;code access
 13107  16B9  00F8               	movwf	??_LCDWriteCharacter+2
 13108  16BA  0878               	movf	??_LCDWriteCharacter+2,w
 13109  16BB  00F0               	movwf	LCDWrite@data
 13110  16BC  3001               	movlw	1
 13111  16BD  3193  23F7  3196   	fcall	_LCDWrite
 13112                           
 13113                           ;lcd.c: 147: LCDWrite(1,fonts[base + 2]);
 13114  16C0  087A               	movf	LCDWriteCharacter@base,w
 13115  16C1  3E02               	addlw	2
 13116  16C2  00F6               	movwf	??_LCDWriteCharacter
 13117  16C3  3000               	movlw	0
 13118  16C4  3D7B               	addwfc	LCDWriteCharacter@base+1,w
 13119  16C5  00F7               	movwf	??_LCDWriteCharacter+1
 13120  16C6  3000               	movlw	low (_fonts| (0+32768))
 13121  16C7  0776               	addwf	??_LCDWriteCharacter,w
 13122  16C8  0084               	movwf	4
 13123  16C9  3090               	movlw	high (_fonts| (0+32768))
 13124  16CA  3D77               	addwfc	??_LCDWriteCharacter+1,w
 13125  16CB  0085               	movwf	5
 13126  16CC  0800               	movf	0,w	;code access
 13127  16CD  00F8               	movwf	??_LCDWriteCharacter+2
 13128  16CE  0878               	movf	??_LCDWriteCharacter+2,w
 13129  16CF  00F0               	movwf	LCDWrite@data
 13130  16D0  3001               	movlw	1
 13131  16D1  3193  23F7  3196   	fcall	_LCDWrite
 13132                           
 13133                           ;lcd.c: 148: LCDWrite(1, 0x00);
 13134  16D4  01F0               	clrf	LCDWrite@data
 13135  16D5  3001               	movlw	1
 13136  16D6  3193  23F7         	fcall	_LCDWrite
 13137  16D8  0008               	return
 13138  16D9                     __end_of_LCDWriteCharacter:	
 13139                           
 13140                           	psect	text36
 13141  137F                     __ptext36:	
 13142 ;; *************** function ___wmul *****************
 13143 ;; Defined at:
 13144 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 13145 ;; Parameters:    Size  Location     Type
 13146 ;;  multiplier      2    0[COMMON] unsigned int 
 13147 ;;  multiplicand    2    2[COMMON] unsigned int 
 13148 ;; Auto vars:     Size  Location     Type
 13149 ;;  product         2    4[COMMON] unsigned int 
 13150 ;; Return value:  Size  Location     Type
 13151 ;;                  2    0[COMMON] unsigned int 
 13152 ;; Registers used:
 13153 ;;		wreg, status,2, status,0
 13154 ;; Tracked objects:
 13155 ;;		On entry : 0/0
 13156 ;;		On exit  : 0/0
 13157 ;;		Unchanged: 0/0
 13158 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13159 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13160 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13161 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13162 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13163 ;;Total ram usage:        6 bytes
 13164 ;; Hardware stack levels used:    1
 13165 ;; This function calls:
 13166 ;;		Nothing
 13167 ;; This function is called by:
 13168 ;;		_readIAnalog
 13169 ;;		_LCDWriteCharacter
 13170 ;;		_eval_poly
 13171 ;; This function uses a non-reentrant model
 13172 ;;
 13173                           
 13174                           
 13175                           ;psect for function ___wmul
 13176  137F                     ___wmul:	
 13177                           
 13178                           ;incstack = 0
 13179                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 13180  137F  01F4               	clrf	___wmul@product
 13181  1380  01F5               	clrf	___wmul@product+1
 13182  1381                     l2249:	
 13183  1381  1C70               	btfss	___wmul@multiplier,0
 13184  1382  2B87               	goto	l581
 13185  1383  0872               	movf	___wmul@multiplicand,w
 13186  1384  07F4               	addwf	___wmul@product,f
 13187  1385  0873               	movf	___wmul@multiplicand+1,w
 13188  1386  3DF5               	addwfc	___wmul@product+1,f
 13189  1387                     l581:	
 13190  1387  3001               	movlw	1
 13191  1388                     u2145:	
 13192  1388  35F2               	lslf	___wmul@multiplicand,f
 13193  1389  0DF3               	rlf	___wmul@multiplicand+1,f
 13194  138A  0B89               	decfsz	9,f
 13195  138B  2B88               	goto	u2145
 13196  138C  3001               	movlw	1
 13197  138D                     u2155:	
 13198  138D  36F1               	lsrf	___wmul@multiplier+1,f
 13199  138E  0CF0               	rrf	___wmul@multiplier,f
 13200  138F  0B89               	decfsz	9,f
 13201  1390  2B8D               	goto	u2155
 13202  1391  0870               	movf	___wmul@multiplier,w
 13203  1392  0471               	iorwf	___wmul@multiplier+1,w
 13204  1393  1D03               	btfss	3,2
 13205  1394  2B81               	goto	l2249
 13206  1395  0875               	movf	___wmul@product+1,w
 13207  1396  00F1               	movwf	?___wmul+1
 13208  1397  0874               	movf	___wmul@product,w
 13209  1398  00F0               	movwf	?___wmul
 13210  1399  0008               	return
 13211  139A                     __end_of___wmul:	
 13212                           
 13213                           	psect	text37
 13214  13F7                     __ptext37:	
 13215 ;; *************** function _LCDWrite *****************
 13216 ;; Defined at:
 13217 ;;		line 281 in file "lcd.c"
 13218 ;; Parameters:    Size  Location     Type
 13219 ;;  data_or_comm    1    wreg     unsigned char 
 13220 ;;  data            1    0[COMMON] unsigned char 
 13221 ;; Auto vars:     Size  Location     Type
 13222 ;;  data_or_comm    1    2[COMMON] unsigned char 
 13223 ;;  i               1    4[COMMON] unsigned char 
 13224 ;;  d               1    3[COMMON] unsigned char 
 13225 ;; Return value:  Size  Location     Type
 13226 ;;                  1    wreg      void 
 13227 ;; Registers used:
 13228 ;;		wreg, status,2, status,0
 13229 ;; Tracked objects:
 13230 ;;		On entry : 0/0
 13231 ;;		On exit  : 0/0
 13232 ;;		Unchanged: 0/0
 13233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13234 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13235 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13236 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13237 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13238 ;;Total ram usage:        5 bytes
 13239 ;; Hardware stack levels used:    1
 13240 ;; This function calls:
 13241 ;;		Nothing
 13242 ;; This function is called by:
 13243 ;;		_gotoXY
 13244 ;;		_LCDWriteCharacter
 13245 ;;		_LCDClear
 13246 ;;		_LCDInit
 13247 ;; This function uses a non-reentrant model
 13248 ;;
 13249                           
 13250                           
 13251                           ;psect for function _LCDWrite
 13252  13F7                     _LCDWrite:	
 13253                           
 13254                           ;incstack = 0
 13255                           ; Regs used in _LCDWrite: [wreg+status,2+status,0]
 13256                           ;LCDWrite@data_or_command stored from wreg
 13257  13F7  00F2               	movwf	LCDWrite@data_or_command
 13258                           
 13259                           ;lcd.c: 283: uint8_t i,d;
 13260                           ;lcd.c: 285: d=data;
 13261  13F8  0870               	movf	LCDWrite@data,w
 13262  13F9  00F1               	movwf	??_LCDWrite
 13263  13FA  0871               	movf	??_LCDWrite,w
 13264  13FB  00F3               	movwf	LCDWrite@d
 13265                           
 13266                           ;lcd.c: 287: if(data_or_command == 0)
 13267  13FC  0872               	movf	LCDWrite@data_or_command,w
 13268  13FD  1D03               	btfss	3,2
 13269  13FE  2C02               	goto	l218
 13270                           
 13271                           ;lcd.c: 288: {
 13272                           ;lcd.c: 289: LATAbits.LATA2 = 0;
 13273  13FF  0020               	movlb	0	; select bank0
 13274  1400  1116               	bcf	22,2	;volatile
 13275                           
 13276                           ;lcd.c: 290: }
 13277  1401  2C04               	goto	l219
 13278  1402                     l218:	
 13279                           
 13280                           ;lcd.c: 291: else
 13281                           ;lcd.c: 292: {
 13282                           ;lcd.c: 293: LATAbits.LATA2 = 1;
 13283  1402  0020               	movlb	0	; select bank0
 13284  1403  1516               	bsf	22,2	;volatile
 13285  1404                     l219:	
 13286                           
 13287                           ;lcd.c: 294: }
 13288                           ;lcd.c: 296: LATAbits.LATA1 = 0;
 13289  1404  1096               	bcf	22,1	;volatile
 13290                           
 13291                           ;lcd.c: 298: for(i=0;i<8;i++)
 13292  1405  01F4               	clrf	LCDWrite@i
 13293  1406  3008               	movlw	8
 13294  1407  0274               	subwf	LCDWrite@i,w
 13295  1408  1803               	btfsc	3,0
 13296  1409  2C1A               	goto	l221
 13297  140A                     l220:	
 13298                           
 13299                           ;lcd.c: 299: {
 13300                           ;lcd.c: 300: LATAbits.LATA3 = 0;
 13301  140A  1196               	bcf	22,3	;volatile
 13302                           
 13303                           ;lcd.c: 302: if(d&0x80)
 13304  140B  1FF3               	btfss	LCDWrite@d,7
 13305  140C  2C0E               	goto	l222
 13306                           
 13307                           ;lcd.c: 303: {
 13308                           ;lcd.c: 304: LATAbits.LATA3 = 1;
 13309  140D  1596               	bsf	22,3	;volatile
 13310  140E                     l222:	
 13311                           
 13312                           ;lcd.c: 305: }
 13313                           ;lcd.c: 307: LATAbits.LATA4 = 1;
 13314  140E  1616               	bsf	22,4	;volatile
 13315                           
 13316                           ;lcd.c: 309: d<<=1;
 13317  140F  1003               	clrc
 13318  1410  0DF3               	rlf	LCDWrite@d,f
 13319                           
 13320                           ;lcd.c: 311: LATAbits.LATA4=0;
 13321  1411  1216               	bcf	22,4	;volatile
 13322  1412  3001               	movlw	1
 13323  1413  00F1               	movwf	??_LCDWrite
 13324  1414  0871               	movf	??_LCDWrite,w
 13325  1415  07F4               	addwf	LCDWrite@i,f
 13326  1416  3008               	movlw	8
 13327  1417  0274               	subwf	LCDWrite@i,w
 13328  1418  1C03               	skipc
 13329  1419  2C0A               	goto	l220
 13330  141A                     l221:	
 13331                           
 13332                           ;lcd.c: 312: }
 13333                           ;lcd.c: 314: LATAbits.LATA1 = 1;
 13334  141A  1496               	bsf	22,1	;volatile
 13335  141B  0008               	return
 13336  141C                     __end_of_LCDWrite:	
 13337                           
 13338                           	psect	text38
 13339  0126                     __ptext38:	
 13340 ;; *************** function _Battery_State_Machine *****************
 13341 ;; Defined at:
 13342 ;;		line 30 in file "battery_charger.c"
 13343 ;; Parameters:    Size  Location     Type
 13344 ;;  z               1    wreg     unsigned char 
 13345 ;; Auto vars:     Size  Location     Type
 13346 ;;  z               1   37[BANK0 ] unsigned char 
 13347 ;; Return value:  Size  Location     Type
 13348 ;;                  1    wreg      void 
 13349 ;; Registers used:
 13350 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13351 ;; Tracked objects:
 13352 ;;		On entry : 0/0
 13353 ;;		On exit  : 0/0
 13354 ;;		Unchanged: 0/0
 13355 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13356 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13357 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13358 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13359 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13360 ;;Total ram usage:        8 bytes
 13361 ;; Hardware stack levels used:    1
 13362 ;; Hardware stack levels required when called:    2
 13363 ;; This function calls:
 13364 ;;		___awtoft
 13365 ;;		___ftmul
 13366 ;;		___fttol
 13367 ;; This function is called by:
 13368 ;;		_main
 13369 ;; This function uses a non-reentrant model
 13370 ;;
 13371                           
 13372                           
 13373                           ;psect for function _Battery_State_Machine
 13374  0126                     _Battery_State_Machine:	
 13375                           
 13376                           ;incstack = 0
 13377                           ; Regs used in _Battery_State_Machine: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 13378                           ;Battery_State_Machine@z stored from wreg
 13379  0126  0020               	movlb	0	; select bank0
 13380  0127  00C5               	movwf	Battery_State_Machine@z
 13381                           
 13382                           ;battery_charger.c: 32: if(batteryState[z]==PRECHARGE)
 13383  0128  0845               	movf	Battery_State_Machine@z,w
 13384  0129  3E64               	addlw	(low (_batteryState| 0))& (0+255)
 13385  012A  0086               	movwf	6
 13386  012B  0187               	clrf	7
 13387  012C  3003               	movlw	3
 13388  012D  0601               	xorwf	1,w
 13389  012E  1D03               	btfss	3,2
 13390  012F  297D               	goto	l2869
 13391                           
 13392                           ;battery_charger.c: 33: {
 13393                           ;battery_charger.c: 34: if(voltage[z]<1075)
 13394  0130  3545               	lslf	Battery_State_Machine@z,w
 13395  0131  3EB8               	addlw	(low (_voltage| 0))& (0+255)
 13396  0132  0086               	movwf	6
 13397  0133  0187               	clrf	7
 13398  0134  3F40               	moviw [0]fsr1
 13399  0135  00BE               	movwf	??_Battery_State_Machine
 13400  0136  3F41               	moviw [1]fsr1
 13401  0137  00BF               	movwf	??_Battery_State_Machine+1
 13402  0138  083F               	movf	??_Battery_State_Machine+1,w
 13403  0139  3A80               	xorlw	128
 13404  013A  00C0               	movwf	??_Battery_State_Machine+2
 13405  013B  3084               	movlw	132
 13406  013C  0240               	subwf	??_Battery_State_Machine+2,w
 13407  013D  1D03               	skipz
 13408  013E  2941               	goto	u3195
 13409  013F  3033               	movlw	51
 13410  0140  023E               	subwf	??_Battery_State_Machine,w
 13411  0141                     u3195:	
 13412  0141  1803               	skipnc
 13413  0142  296B               	goto	l2867
 13414                           
 13415                           ;battery_charger.c: 35: {
 13416                           ;battery_charger.c: 36: if(stateCounter[z]>0)
 13417  0143  0020               	movlb	0	; select bank0
 13418  0144  3545               	lslf	Battery_State_Machine@z,w
 13419  0145  3EC8               	addlw	(low (_stateCounter| 0))& (0+255)
 13420  0146  0086               	movwf	6
 13421  0147  0187               	clrf	7
 13422  0148  3F40               	moviw [0]fsr1
 13423  0149  00BE               	movwf	??_Battery_State_Machine
 13424  014A  3F41               	moviw [1]fsr1
 13425  014B  00BF               	movwf	??_Battery_State_Machine+1
 13426  014C  083F               	movf	??_Battery_State_Machine+1,w
 13427  014D  3A80               	xorlw	128
 13428  014E  00C0               	movwf	??_Battery_State_Machine+2
 13429  014F  3080               	movlw	128
 13430  0150  0240               	subwf	??_Battery_State_Machine+2,w
 13431  0151  1D03               	skipz
 13432  0152  2955               	goto	u3205
 13433  0153  3001               	movlw	1
 13434  0154  023E               	subwf	??_Battery_State_Machine,w
 13435  0155                     u3205:	
 13436  0155  1C03               	skipc
 13437  0156  2963               	goto	l2865
 13438                           
 13439                           ;battery_charger.c: 37: {
 13440                           ;battery_charger.c: 38: stateCounter[z]-=1;
 13441  0157  0020               	movlb	0	; select bank0
 13442  0158  3545               	lslf	Battery_State_Machine@z,w
 13443  0159  3EC8               	addlw	(low (_stateCounter| 0))& (0+255)
 13444  015A  0086               	movwf	6
 13445  015B  0187               	clrf	7
 13446  015C  30FF               	movlw	255
 13447  015D  0781               	addwf	1,f
 13448  015E  3141               	addfsr 1,1
 13449  015F  30FF               	movlw	255
 13450  0160  3D81               	addwfc	1,f
 13451  0161  317F               	addfsr 1,-1
 13452                           
 13453                           ;battery_charger.c: 39: }
 13454  0162  0008               	return
 13455  0163                     l2865:	
 13456                           
 13457                           ;battery_charger.c: 40: else
 13458                           ;battery_charger.c: 41: {
 13459                           ;battery_charger.c: 42: batteryState[z]=FAULT;
 13460  0163  0020               	movlb	0	; select bank0
 13461  0164  0845               	movf	Battery_State_Machine@z,w
 13462  0165  3E64               	addlw	(low (_batteryState| 0))& (0+255)
 13463  0166  0086               	movwf	6
 13464  0167  0187               	clrf	7
 13465  0168  0181               	clrf	1
 13466  0169  0A81               	incf	1,f
 13467                           
 13468                           ;battery_charger.c: 43: }
 13469                           ;battery_charger.c: 44: }
 13470  016A  0008               	return
 13471  016B                     l2867:	
 13472                           
 13473                           ;battery_charger.c: 45: else
 13474                           ;battery_charger.c: 46: {
 13475                           ;battery_charger.c: 47: batteryState[z]=CHARGE;
 13476  016B  3004               	movlw	4
 13477  016C  0020               	movlb	0	; select bank0
 13478  016D  00BE               	movwf	??_Battery_State_Machine
 13479  016E  0845               	movf	Battery_State_Machine@z,w
 13480  016F  3E64               	addlw	(low (_batteryState| 0))& (0+255)
 13481  0170  0086               	movwf	6
 13482  0171  0187               	clrf	7
 13483  0172  083E               	movf	??_Battery_State_Machine,w
 13484  0173  0081               	movwf	1
 13485                           
 13486                           ;battery_charger.c: 48: Iref[z]=35;
 13487  0174  3545               	lslf	Battery_State_Machine@z,w
 13488  0175  3EC0               	addlw	(low (_Iref| 0))& (0+255)
 13489  0176  0086               	movwf	6
 13490  0177  0187               	clrf	7
 13491  0178  3023               	movlw	35
 13492  0179  3FC0               	movwi [0]fsr1
 13493  017A  3000               	movlw	0
 13494  017B  3FC1               	movwi [1]fsr1
 13495                           
 13496                           ;battery_charger.c: 49: }
 13497                           ;battery_charger.c: 50: }
 13498  017C  0008               	return
 13499  017D                     l2869:	
 13500                           
 13501                           ;battery_charger.c: 51: else if(batteryState[z]==CHARGE)
 13502  017D  0845               	movf	Battery_State_Machine@z,w
 13503  017E  3E64               	addlw	(low (_batteryState| 0))& (0+255)
 13504  017F  0086               	movwf	6
 13505  0180  0187               	clrf	7
 13506  0181  3004               	movlw	4
 13507  0182  0601               	xorwf	1,w
 13508  0183  1D03               	btfss	3,2
 13509  0184  2A60               	goto	l2897
 13510                           
 13511                           ;battery_charger.c: 52: {
 13512                           ;battery_charger.c: 53: if(!Imode[z])
 13513  0185  0845               	movf	Battery_State_Machine@z,w
 13514  0186  3E62               	addlw	(low (_Imode| 0))& (0+255)
 13515  0187  0086               	movwf	6
 13516  0188  0187               	clrf	7
 13517  0189  0801               	movf	1,w
 13518  018A  1D03               	btfss	3,2
 13519  018B  2A47               	goto	l2893
 13520                           
 13521                           ;battery_charger.c: 54: {
 13522                           ;battery_charger.c: 55: if(current[z] < Imin[z])
 13523  018C  3545               	lslf	Battery_State_Machine@z,w
 13524  018D  3EC4               	addlw	(low (_Imin| 0))& (0+255)
 13525  018E  0086               	movwf	6
 13526  018F  0187               	clrf	7
 13527  0190  3F40               	moviw [0]fsr1
 13528  0191  00BE               	movwf	??_Battery_State_Machine
 13529  0192  3F41               	moviw [1]fsr1
 13530  0193  00BF               	movwf	??_Battery_State_Machine+1
 13531  0194  3545               	lslf	Battery_State_Machine@z,w
 13532  0195  3EB0               	addlw	(low (_current| 0))& (0+255)
 13533  0196  0086               	movwf	6
 13534  0197  0187               	clrf	7
 13535  0198  3F40               	moviw [0]fsr1
 13536  0199  00C0               	movwf	??_Battery_State_Machine+2
 13537  019A  3F41               	moviw [1]fsr1
 13538  019B  00C1               	movwf	??_Battery_State_Machine+3
 13539  019C  0841               	movf	??_Battery_State_Machine+3,w
 13540  019D  3A80               	xorlw	128
 13541  019E  00C2               	movwf	??_Battery_State_Machine+4
 13542  019F  083F               	movf	??_Battery_State_Machine+1,w
 13543  01A0  3A80               	xorlw	128
 13544  01A1  0242               	subwf	??_Battery_State_Machine+4,w
 13545  01A2  1D03               	skipz
 13546  01A3  29A6               	goto	u3235
 13547  01A4  083E               	movf	??_Battery_State_Machine,w
 13548  01A5  0240               	subwf	??_Battery_State_Machine+2,w
 13549  01A6                     u3235:	
 13550  01A6  1803               	skipnc
 13551  01A7  29D3               	goto	l2879
 13552                           
 13553                           ;battery_charger.c: 56: {
 13554                           ;battery_charger.c: 57: IminCount[z]-=2;
 13555  01A8  0020               	movlb	0	; select bank0
 13556  01A9  3545               	lslf	Battery_State_Machine@z,w
 13557  01AA  3ECC               	addlw	(low (_IminCount| 0))& (0+255)
 13558  01AB  0086               	movwf	6
 13559  01AC  0187               	clrf	7
 13560  01AD  3002               	movlw	2
 13561  01AE  0281               	subwf	1,f
 13562  01AF  3141               	addfsr 1,1
 13563  01B0  3000               	movlw	0
 13564  01B1  3B81               	subwfb	1,f
 13565  01B2  317F               	addfsr 1,-1
 13566                           
 13567                           ;battery_charger.c: 58: if(IminCount[z]<10)
 13568  01B3  3545               	lslf	Battery_State_Machine@z,w
 13569  01B4  3ECC               	addlw	(low (_IminCount| 0))& (0+255)
 13570  01B5  0086               	movwf	6
 13571  01B6  0187               	clrf	7
 13572  01B7  3F40               	moviw [0]fsr1
 13573  01B8  00BE               	movwf	??_Battery_State_Machine
 13574  01B9  3F41               	moviw [1]fsr1
 13575  01BA  00BF               	movwf	??_Battery_State_Machine+1
 13576  01BB  3000               	movlw	0
 13577  01BC  023F               	subwf	??_Battery_State_Machine+1,w
 13578  01BD  300A               	movlw	10
 13579  01BE  1903               	skipnz
 13580  01BF  023E               	subwf	??_Battery_State_Machine,w
 13581  01C0  1803               	skipnc
 13582  01C1  0008               	return
 13583                           
 13584                           ;battery_charger.c: 59: {
 13585                           ;battery_charger.c: 60: batteryState[z] = FLOAT;
 13586  01C2  3005               	movlw	5
 13587  01C3  00BE               	movwf	??_Battery_State_Machine
 13588  01C4  0845               	movf	Battery_State_Machine@z,w
 13589  01C5  3E64               	addlw	(low (_batteryState| 0))& (0+255)
 13590  01C6  0086               	movwf	6
 13591  01C7  0187               	clrf	7
 13592  01C8  083E               	movf	??_Battery_State_Machine,w
 13593  01C9  0081               	movwf	1
 13594                           
 13595                           ;battery_charger.c: 61: IminCount[z]=10;
 13596  01CA  3545               	lslf	Battery_State_Machine@z,w
 13597  01CB  3ECC               	addlw	(low (_IminCount| 0))& (0+255)
 13598  01CC  0086               	movwf	6
 13599  01CD  0187               	clrf	7
 13600  01CE  300A               	movlw	10
 13601  01CF  3FC0               	movwi [0]fsr1
 13602  01D0  3000               	movlw	0
 13603  01D1  3FC1               	movwi [1]fsr1
 13604                           
 13605                           ;battery_charger.c: 62: }
 13606                           ;battery_charger.c: 63: }
 13607  01D2  0008               	return
 13608  01D3                     l2879:	
 13609                           
 13610                           ;battery_charger.c: 64: else
 13611                           ;battery_charger.c: 65: {
 13612                           ;battery_charger.c: 66: x+=1;
 13613  01D3  3001               	movlw	1
 13614  01D4  0020               	movlb	0	; select bank0
 13615  01D5  00BE               	movwf	??_Battery_State_Machine
 13616  01D6  083E               	movf	??_Battery_State_Machine,w
 13617  01D7  07EB               	addwf	_x,f
 13618                           
 13619                           ;battery_charger.c: 67: if(x>25)
 13620  01D8  301A               	movlw	26
 13621  01D9  026B               	subwf	_x,w
 13622  01DA  1C03               	skipc
 13623  01DB  2A2E               	goto	l2889
 13624                           
 13625                           ;battery_charger.c: 68: {
 13626                           ;battery_charger.c: 69: if(Vref[z]>1350+(int16_t)((250-batteryTemp)*.24))Vref[z]-=1;
 13627  01DC  3545               	lslf	Battery_State_Machine@z,w
 13628  01DD  3E5A               	addlw	(low (_Vref| 0))& (0+255)
 13629  01DE  0086               	movwf	6
 13630  01DF  0187               	clrf	7
 13631  01E0  3F40               	moviw [0]fsr1
 13632  01E1  00BE               	movwf	??_Battery_State_Machine
 13633  01E2  3F41               	moviw [1]fsr1
 13634  01E3  00BF               	movwf	??_Battery_State_Machine+1
 13635  01E4  096C               	comf	_batteryTemp,w
 13636  01E5  00C0               	movwf	??_Battery_State_Machine+2
 13637  01E6  096D               	comf	_batteryTemp+1,w
 13638  01E7  00C1               	movwf	??_Battery_State_Machine+3
 13639  01E8  0AC0               	incf	??_Battery_State_Machine+2,f
 13640  01E9  1903               	skipnz
 13641  01EA  0AC1               	incf	??_Battery_State_Machine+3,f
 13642  01EB  0840               	movf	??_Battery_State_Machine+2,w
 13643  01EC  3EFA               	addlw	250
 13644  01ED  00F8               	movwf	___awtoft@c
 13645  01EE  3000               	movlw	0
 13646  01EF  3D41               	addwfc	??_Battery_State_Machine+3,w
 13647  01F0  00F9               	movwf	___awtoft@c+1
 13648  01F1  3193  23D7  3181   	fcall	___awtoft
 13649  01F4  0878               	movf	?___awtoft,w
 13650  01F5  0020               	movlb	0	; select bank0
 13651  01F6  00A3               	movwf	___ftmul@f2
 13652  01F7  0879               	movf	?___awtoft+1,w
 13653  01F8  00A4               	movwf	___ftmul@f2+1
 13654  01F9  087A               	movf	?___awtoft+2,w
 13655  01FA  00A5               	movwf	___ftmul@f2+2
 13656  01FB  30C3               	movlw	195
 13657  01FC  00A0               	movwf	___ftmul@f1
 13658  01FD  3075               	movlw	117
 13659  01FE  00A1               	movwf	___ftmul@f1+1
 13660  01FF  303E               	movlw	62
 13661  0200  00A2               	movwf	___ftmul@f1+2
 13662  0201  318B  2332  3181   	fcall	___ftmul
 13663  0204  0020               	movlb	0	; select bank0
 13664  0205  0820               	movf	?___ftmul,w
 13665  0206  00B0               	movwf	___fttol@f1
 13666  0207  0821               	movf	?___ftmul+1,w
 13667  0208  00B1               	movwf	___fttol@f1+1
 13668  0209  0822               	movf	?___ftmul+2,w
 13669  020A  00B2               	movwf	___fttol@f1+2
 13670  020B  3189  2152  3181   	fcall	___fttol
 13671  020E  0020               	movlb	0	; select bank0
 13672  020F  0830               	movf	?___fttol,w
 13673  0210  3E46               	addlw	70
 13674  0211  00C2               	movwf	??_Battery_State_Machine+4
 13675  0212  3005               	movlw	5
 13676  0213  3D31               	addwfc	?___fttol+1,w
 13677  0214  00C3               	movwf	??_Battery_State_Machine+5
 13678  0215  0843               	movf	??_Battery_State_Machine+5,w
 13679  0216  3A80               	xorlw	128
 13680  0217  00C4               	movwf	??_Battery_State_Machine+6
 13681  0218  083F               	movf	??_Battery_State_Machine+1,w
 13682  0219  3A80               	xorlw	128
 13683  021A  0244               	subwf	??_Battery_State_Machine+6,w
 13684  021B  1D03               	skipz
 13685  021C  2A1F               	goto	u3265
 13686  021D  083E               	movf	??_Battery_State_Machine,w
 13687  021E  0242               	subwf	??_Battery_State_Machine+4,w
 13688  021F                     u3265:	
 13689  021F  1803               	skipnc
 13690  0220  2A2C               	goto	l2887
 13691  0221  0020               	movlb	0	; select bank0
 13692  0222  3545               	lslf	Battery_State_Machine@z,w
 13693  0223  3E5A               	addlw	(low (_Vref| 0))& (0+255)
 13694  0224  0086               	movwf	6
 13695  0225  0187               	clrf	7
 13696  0226  30FF               	movlw	255
 13697  0227  0781               	addwf	1,f
 13698  0228  3141               	addfsr 1,1
 13699  0229  30FF               	movlw	255
 13700  022A  3D81               	addwfc	1,f
 13701  022B  317F               	addfsr 1,-1
 13702  022C                     l2887:	
 13703                           
 13704                           ;battery_charger.c: 70: x=0;
 13705  022C  0020               	movlb	0	; select bank0
 13706  022D  01EB               	clrf	_x
 13707  022E                     l2889:	
 13708                           
 13709                           ;battery_charger.c: 71: }
 13710                           ;battery_charger.c: 72: if(IminCount[z]<100)IminCount[z]+=1;
 13711  022E  3545               	lslf	Battery_State_Machine@z,w
 13712  022F  3ECC               	addlw	(low (_IminCount| 0))& (0+255)
 13713  0230  0086               	movwf	6
 13714  0231  0187               	clrf	7
 13715  0232  3F40               	moviw [0]fsr1
 13716  0233  00BE               	movwf	??_Battery_State_Machine
 13717  0234  3F41               	moviw [1]fsr1
 13718  0235  00BF               	movwf	??_Battery_State_Machine+1
 13719  0236  3000               	movlw	0
 13720  0237  023F               	subwf	??_Battery_State_Machine+1,w
 13721  0238  3064               	movlw	100
 13722  0239  1903               	skipnz
 13723  023A  023E               	subwf	??_Battery_State_Machine,w
 13724  023B  1803               	skipnc
 13725  023C  0008               	return
 13726  023D  3545               	lslf	Battery_State_Machine@z,w
 13727  023E  3ECC               	addlw	(low (_IminCount| 0))& (0+255)
 13728  023F  0086               	movwf	6
 13729  0240  0187               	clrf	7
 13730  0241  3001               	movlw	1
 13731  0242  0781               	addwf	1,f
 13732  0243  3141               	addfsr 1,1
 13733  0244  1803               	skipnc
 13734  0245  0A81               	incf	1,f
 13735                           
 13736                           ;battery_charger.c: 73: }
 13737                           ;battery_charger.c: 74: }
 13738  0246  0008               	return
 13739  0247                     l2893:	
 13740                           
 13741                           ;battery_charger.c: 75: else if(IminCount[z]<100)IminCount[z]+=1;
 13742  0247  3545               	lslf	Battery_State_Machine@z,w
 13743  0248  3ECC               	addlw	(low (_IminCount| 0))& (0+255)
 13744  0249  0086               	movwf	6
 13745  024A  0187               	clrf	7
 13746  024B  3F40               	moviw [0]fsr1
 13747  024C  00BE               	movwf	??_Battery_State_Machine
 13748  024D  3F41               	moviw [1]fsr1
 13749  024E  00BF               	movwf	??_Battery_State_Machine+1
 13750  024F  3000               	movlw	0
 13751  0250  023F               	subwf	??_Battery_State_Machine+1,w
 13752  0251  3064               	movlw	100
 13753  0252  1903               	skipnz
 13754  0253  023E               	subwf	??_Battery_State_Machine,w
 13755  0254  1803               	skipnc
 13756  0255  0008               	return
 13757  0256  3545               	lslf	Battery_State_Machine@z,w
 13758  0257  3ECC               	addlw	(low (_IminCount| 0))& (0+255)
 13759  0258  0086               	movwf	6
 13760  0259  0187               	clrf	7
 13761  025A  3001               	movlw	1
 13762  025B  0781               	addwf	1,f
 13763  025C  3141               	addfsr 1,1
 13764  025D  1803               	skipnc
 13765  025E  0A81               	incf	1,f
 13766                           
 13767                           ;battery_charger.c: 76: }
 13768  025F  0008               	return
 13769  0260                     l2897:	
 13770                           
 13771                           ;battery_charger.c: 77: else if(batteryState[z] == FLOAT)
 13772  0260  0845               	movf	Battery_State_Machine@z,w
 13773  0261  3E64               	addlw	(low (_batteryState| 0))& (0+255)
 13774  0262  0086               	movwf	6
 13775  0263  0187               	clrf	7
 13776  0264  3005               	movlw	5
 13777  0265  0601               	xorwf	1,w
 13778  0266  1D03               	btfss	3,2
 13779  0267  2AAE               	goto	l2905
 13780                           
 13781                           ;battery_charger.c: 78: {
 13782                           ;battery_charger.c: 79: Vref[z]=1350+(int16_t)((250-batteryTemp)*.24);
 13783  0268  096C               	comf	_batteryTemp,w
 13784  0269  00BE               	movwf	??_Battery_State_Machine
 13785  026A  096D               	comf	_batteryTemp+1,w
 13786  026B  00BF               	movwf	??_Battery_State_Machine+1
 13787  026C  0ABE               	incf	??_Battery_State_Machine,f
 13788  026D  1903               	skipnz
 13789  026E  0ABF               	incf	??_Battery_State_Machine+1,f
 13790  026F  083E               	movf	??_Battery_State_Machine,w
 13791  0270  3EFA               	addlw	250
 13792  0271  00F8               	movwf	___awtoft@c
 13793  0272  3000               	movlw	0
 13794  0273  3D3F               	addwfc	??_Battery_State_Machine+1,w
 13795  0274  00F9               	movwf	___awtoft@c+1
 13796  0275  3193  23D7  3181   	fcall	___awtoft
 13797  0278  0878               	movf	?___awtoft,w
 13798  0279  0020               	movlb	0	; select bank0
 13799  027A  00A3               	movwf	___ftmul@f2
 13800  027B  0879               	movf	?___awtoft+1,w
 13801  027C  00A4               	movwf	___ftmul@f2+1
 13802  027D  087A               	movf	?___awtoft+2,w
 13803  027E  00A5               	movwf	___ftmul@f2+2
 13804  027F  30C3               	movlw	195
 13805  0280  00A0               	movwf	___ftmul@f1
 13806  0281  3075               	movlw	117
 13807  0282  00A1               	movwf	___ftmul@f1+1
 13808  0283  303E               	movlw	62
 13809  0284  00A2               	movwf	___ftmul@f1+2
 13810  0285  318B  2332  3181   	fcall	___ftmul
 13811  0288  0020               	movlb	0	; select bank0
 13812  0289  0820               	movf	?___ftmul,w
 13813  028A  00B0               	movwf	___fttol@f1
 13814  028B  0821               	movf	?___ftmul+1,w
 13815  028C  00B1               	movwf	___fttol@f1+1
 13816  028D  0822               	movf	?___ftmul+2,w
 13817  028E  00B2               	movwf	___fttol@f1+2
 13818  028F  3189  2152         	fcall	___fttol
 13819  0291  0020               	movlb	0	; select bank0
 13820  0292  0830               	movf	?___fttol,w
 13821  0293  3E46               	addlw	70
 13822  0294  00C0               	movwf	??_Battery_State_Machine+2
 13823  0295  3005               	movlw	5
 13824  0296  3D31               	addwfc	?___fttol+1,w
 13825  0297  00C1               	movwf	??_Battery_State_Machine+3
 13826  0298  3545               	lslf	Battery_State_Machine@z,w
 13827  0299  3E5A               	addlw	(low (_Vref| 0))& (0+255)
 13828  029A  0086               	movwf	6
 13829  029B  0187               	clrf	7
 13830  029C  0840               	movf	??_Battery_State_Machine+2,w
 13831  029D  3FC0               	movwi [0]fsr1
 13832  029E  0841               	movf	??_Battery_State_Machine+3,w
 13833  029F  3FC1               	movwi [1]fsr1
 13834                           
 13835                           ;battery_charger.c: 80: Iref[z]=15;
 13836  02A0  3545               	lslf	Battery_State_Machine@z,w
 13837  02A1  3EC0               	addlw	(low (_Iref| 0))& (0+255)
 13838  02A2  0086               	movwf	6
 13839  02A3  0187               	clrf	7
 13840  02A4  300F               	movlw	15
 13841  02A5  3FC0               	movwi [0]fsr1
 13842  02A6  3000               	movlw	0
 13843  02A7  3FC1               	movwi [1]fsr1
 13844                           
 13845                           ;battery_charger.c: 81: Imode[z]=0;
 13846  02A8  0845               	movf	Battery_State_Machine@z,w
 13847  02A9  3E62               	addlw	(low (_Imode| 0))& (0+255)
 13848  02AA  0086               	movwf	6
 13849  02AB  0187               	clrf	7
 13850  02AC  0181               	clrf	1
 13851                           
 13852                           ;battery_charger.c: 82: }
 13853  02AD  0008               	return
 13854  02AE                     l2905:	
 13855                           
 13856                           ;battery_charger.c: 83: else
 13857                           ;battery_charger.c: 84: if(batteryState[z] == FAULT)
 13858  02AE  0845               	movf	Battery_State_Machine@z,w
 13859  02AF  3E64               	addlw	(low (_batteryState| 0))& (0+255)
 13860  02B0  0086               	movwf	6
 13861  02B1  0187               	clrf	7
 13862  02B2  0301               	decf	1,w
 13863  02B3  1D03               	btfss	3,2
 13864  02B4  0008               	return
 13865                           
 13866                           ;battery_charger.c: 85: {
 13867                           ;battery_charger.c: 86: batteryState[z]=PRECHARGE;
 13868  02B5  3003               	movlw	3
 13869  02B6  00BE               	movwf	??_Battery_State_Machine
 13870  02B7  0845               	movf	Battery_State_Machine@z,w
 13871  02B8  3E64               	addlw	(low (_batteryState| 0))& (0+255)
 13872  02B9  0086               	movwf	6
 13873  02BA  0187               	clrf	7
 13874  02BB  083E               	movf	??_Battery_State_Machine,w
 13875  02BC  0081               	movwf	1
 13876  02BD  0008               	return
 13877  02BE                     __end_of_Battery_State_Machine:	
 13878                           
 13879                           	psect	text39
 13880  0952                     __ptext39:	
 13881 ;; *************** function ___fttol *****************
 13882 ;; Defined at:
 13883 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
 13884 ;; Parameters:    Size  Location     Type
 13885 ;;  f1              3   16[BANK0 ] float 
 13886 ;; Auto vars:     Size  Location     Type
 13887 ;;  lval            4   25[BANK0 ] unsigned long 
 13888 ;;  exp1            1   29[BANK0 ] unsigned char 
 13889 ;;  sign1           1   24[BANK0 ] unsigned char 
 13890 ;; Return value:  Size  Location     Type
 13891 ;;                  4   16[BANK0 ] long 
 13892 ;; Registers used:
 13893 ;;		wreg, status,2, status,0
 13894 ;; Tracked objects:
 13895 ;;		On entry : 0/0
 13896 ;;		On exit  : 0/0
 13897 ;;		Unchanged: 0/0
 13898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13899 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13900 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13901 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13902 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13903 ;;Total ram usage:       14 bytes
 13904 ;; Hardware stack levels used:    1
 13905 ;; This function calls:
 13906 ;;		Nothing
 13907 ;; This function is called by:
 13908 ;;		_tempCalc
 13909 ;;		_main
 13910 ;;		_calculateCurrent0
 13911 ;;		_calculateCurrent1
 13912 ;;		_calculateCurrent2
 13913 ;;		_calculateCurrent3
 13914 ;;		_Init_Battery_State_Machine
 13915 ;;		_Battery_State_Machine
 13916 ;;		_cc_cv_mode
 13917 ;; This function uses a non-reentrant model
 13918 ;;
 13919                           
 13920                           
 13921                           ;psect for function ___fttol
 13922  0952                     ___fttol:	
 13923                           
 13924                           ;incstack = 0
 13925                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 13926  0952  0020               	movlb	0	; select bank0
 13927  0953  0830               	movf	___fttol@f1,w
 13928  0954  00B4               	movwf	??___fttol
 13929  0955  0831               	movf	___fttol@f1+1,w
 13930  0956  00B5               	movwf	??___fttol+1
 13931  0957  0832               	movf	___fttol@f1+2,w
 13932  0958  00B6               	movwf	??___fttol+2
 13933  0959  1003               	clrc
 13934  095A  0D35               	rlf	??___fttol+1,w
 13935  095B  0D36               	rlf	??___fttol+2,w
 13936  095C  00B7               	movwf	??___fttol+3
 13937  095D  0837               	movf	??___fttol+3,w
 13938  095E  00BD               	movwf	___fttol@exp1
 13939  095F  083D               	movf	___fttol@exp1,w
 13940  0960  1D03               	btfss	3,2
 13941  0961  296B               	goto	l2421
 13942  0962  3000               	movlw	0
 13943  0963  00B3               	movwf	?___fttol+3
 13944  0964  3000               	movlw	0
 13945  0965  00B2               	movwf	?___fttol+2
 13946  0966  3000               	movlw	0
 13947  0967  00B1               	movwf	?___fttol+1
 13948  0968  3000               	movlw	0
 13949  0969  00B0               	movwf	?___fttol
 13950  096A  0008               	return
 13951  096B                     l2421:	
 13952  096B  0830               	movf	___fttol@f1,w
 13953  096C  00B4               	movwf	??___fttol
 13954  096D  0831               	movf	___fttol@f1+1,w
 13955  096E  00B5               	movwf	??___fttol+1
 13956  096F  0832               	movf	___fttol@f1+2,w
 13957  0970  00B6               	movwf	??___fttol+2
 13958  0971  3017               	movlw	23
 13959  0972                     u2575:	
 13960  0972  36B6               	lsrf	??___fttol+2,f
 13961  0973  0CB5               	rrf	??___fttol+1,f
 13962  0974  0CB4               	rrf	??___fttol,f
 13963  0975  0B89               	decfsz	9,f
 13964  0976  2972               	goto	u2575
 13965  0977  0834               	movf	??___fttol,w
 13966  0978  00B7               	movwf	??___fttol+3
 13967  0979  0837               	movf	??___fttol+3,w
 13968  097A  00B8               	movwf	___fttol@sign1
 13969  097B  17B1               	bsf	___fttol@f1+1,7
 13970  097C  30FF               	movlw	255
 13971  097D  05B0               	andwf	___fttol@f1,f
 13972  097E  30FF               	movlw	255
 13973  097F  05B1               	andwf	___fttol@f1+1,f
 13974  0980  3000               	movlw	0
 13975  0981  05B2               	andwf	___fttol@f1+2,f
 13976  0982  0830               	movf	___fttol@f1,w
 13977  0983  00B9               	movwf	___fttol@lval
 13978  0984  0831               	movf	___fttol@f1+1,w
 13979  0985  00BA               	movwf	___fttol@lval+1
 13980  0986  0832               	movf	___fttol@f1+2,w
 13981  0987  00BB               	movwf	___fttol@lval+2
 13982  0988  01BC               	clrf	___fttol@lval+3
 13983  0989  308E               	movlw	142
 13984  098A  02BD               	subwf	___fttol@exp1,f
 13985  098B  1FBD               	btfss	___fttol@exp1,7
 13986  098C  29A9               	goto	l2441
 13987  098D  083D               	movf	___fttol@exp1,w
 13988  098E  3A80               	xorlw	128
 13989  098F  3E8F               	addlw	143
 13990  0990  1803               	skipnc
 13991  0991  299B               	goto	l2439
 13992  0992  3000               	movlw	0
 13993  0993  00B3               	movwf	?___fttol+3
 13994  0994  3000               	movlw	0
 13995  0995  00B2               	movwf	?___fttol+2
 13996  0996  3000               	movlw	0
 13997  0997  00B1               	movwf	?___fttol+1
 13998  0998  3000               	movlw	0
 13999  0999  00B0               	movwf	?___fttol
 14000  099A  0008               	return
 14001  099B                     l2439:	
 14002  099B  3001               	movlw	1
 14003  099C                     u2605:	
 14004  099C  36BC               	lsrf	___fttol@lval+3,f
 14005  099D  0CBB               	rrf	___fttol@lval+2,f
 14006  099E  0CBA               	rrf	___fttol@lval+1,f
 14007  099F  0CB9               	rrf	___fttol@lval,f
 14008  09A0  0B89               	decfsz	9,f
 14009  09A1  299C               	goto	u2605
 14010  09A2  3001               	movlw	1
 14011  09A3  00B4               	movwf	??___fttol
 14012  09A4  0834               	movf	??___fttol,w
 14013  09A5  07BD               	addwf	___fttol@exp1,f
 14014  09A6  1903               	btfsc	3,2
 14015  09A7  29C2               	goto	l2449
 14016  09A8  299B               	goto	l2439
 14017  09A9                     l2441:	
 14018  09A9  3018               	movlw	24
 14019  09AA  023D               	subwf	___fttol@exp1,w
 14020  09AB  1C03               	skipc
 14021  09AC  29BF               	goto	l833
 14022  09AD  3000               	movlw	0
 14023  09AE  00B3               	movwf	?___fttol+3
 14024  09AF  3000               	movlw	0
 14025  09B0  00B2               	movwf	?___fttol+2
 14026  09B1  3000               	movlw	0
 14027  09B2  00B1               	movwf	?___fttol+1
 14028  09B3  3000               	movlw	0
 14029  09B4  00B0               	movwf	?___fttol
 14030  09B5  0008               	return
 14031  09B6                     l2447:	
 14032  09B6  3001               	movlw	1
 14033  09B7                     u2635:	
 14034  09B7  35B9               	lslf	___fttol@lval,f
 14035  09B8  0DBA               	rlf	___fttol@lval+1,f
 14036  09B9  0DBB               	rlf	___fttol@lval+2,f
 14037  09BA  0DBC               	rlf	___fttol@lval+3,f
 14038  09BB  0B89               	decfsz	9,f
 14039  09BC  29B7               	goto	u2635
 14040  09BD  3001               	movlw	1
 14041  09BE  02BD               	subwf	___fttol@exp1,f
 14042  09BF                     l833:	
 14043  09BF  083D               	movf	___fttol@exp1,w
 14044  09C0  1D03               	btfss	3,2
 14045  09C1  29B6               	goto	l2447
 14046  09C2                     l2449:	
 14047  09C2  0838               	movf	___fttol@sign1,w
 14048  09C3  1903               	btfsc	3,2
 14049  09C4  29D0               	goto	l2453
 14050  09C5  09B9               	comf	___fttol@lval,f
 14051  09C6  09BA               	comf	___fttol@lval+1,f
 14052  09C7  09BB               	comf	___fttol@lval+2,f
 14053  09C8  09BC               	comf	___fttol@lval+3,f
 14054  09C9  0AB9               	incf	___fttol@lval,f
 14055  09CA  1903               	skipnz
 14056  09CB  0ABA               	incf	___fttol@lval+1,f
 14057  09CC  1903               	skipnz
 14058  09CD  0ABB               	incf	___fttol@lval+2,f
 14059  09CE  1903               	skipnz
 14060  09CF  0ABC               	incf	___fttol@lval+3,f
 14061  09D0                     l2453:	
 14062  09D0  083C               	movf	___fttol@lval+3,w
 14063  09D1  00B3               	movwf	?___fttol+3
 14064  09D2  083B               	movf	___fttol@lval+2,w
 14065  09D3  00B2               	movwf	?___fttol+2
 14066  09D4  083A               	movf	___fttol@lval+1,w
 14067  09D5  00B1               	movwf	?___fttol+1
 14068  09D6  0839               	movf	___fttol@lval,w
 14069  09D7  00B0               	movwf	?___fttol
 14070  09D8  0008               	return
 14071  09D9                     __end_of___fttol:	
 14072                           
 14073                           	psect	text40
 14074  0B32                     __ptext40:	
 14075 ;; *************** function ___ftmul *****************
 14076 ;; Defined at:
 14077 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
 14078 ;; Parameters:    Size  Location     Type
 14079 ;;  f1              3    0[BANK0 ] float 
 14080 ;;  f2              3    3[BANK0 ] float 
 14081 ;; Auto vars:     Size  Location     Type
 14082 ;;  f3_as_produc    3   11[BANK0 ] unsigned um
 14083 ;;  sign            1   15[BANK0 ] unsigned char 
 14084 ;;  cntr            1   14[BANK0 ] unsigned char 
 14085 ;;  exp             1   10[BANK0 ] unsigned char 
 14086 ;; Return value:  Size  Location     Type
 14087 ;;                  3    0[BANK0 ] float 
 14088 ;; Registers used:
 14089 ;;		wreg, status,2, status,0, pclath, cstack
 14090 ;; Tracked objects:
 14091 ;;		On entry : 0/0
 14092 ;;		On exit  : 0/0
 14093 ;;		Unchanged: 0/0
 14094 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14095 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14096 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14097 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14098 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14099 ;;Total ram usage:       16 bytes
 14100 ;; Hardware stack levels used:    1
 14101 ;; Hardware stack levels required when called:    1
 14102 ;; This function calls:
 14103 ;;		___ftpack
 14104 ;; This function is called by:
 14105 ;;		_Init_Battery_State_Machine
 14106 ;;		_Battery_State_Machine
 14107 ;;		_cc_cv_mode
 14108 ;;		_tempCalc
 14109 ;;		_log
 14110 ;;		_eval_poly
 14111 ;; This function uses a non-reentrant model
 14112 ;;
 14113                           
 14114                           
 14115                           ;psect for function ___ftmul
 14116  0B32                     ___ftmul:	
 14117                           
 14118                           ;incstack = 0
 14119                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 14120  0B32  0020               	movlb	0	; select bank0
 14121  0B33  0820               	movf	___ftmul@f1,w
 14122  0B34  00A6               	movwf	??___ftmul
 14123  0B35  0821               	movf	___ftmul@f1+1,w
 14124  0B36  00A7               	movwf	??___ftmul+1
 14125  0B37  0822               	movf	___ftmul@f1+2,w
 14126  0B38  00A8               	movwf	??___ftmul+2
 14127  0B39  1003               	clrc
 14128  0B3A  0D27               	rlf	??___ftmul+1,w
 14129  0B3B  0D28               	rlf	??___ftmul+2,w
 14130  0B3C  00A9               	movwf	??___ftmul+3
 14131  0B3D  0829               	movf	??___ftmul+3,w
 14132  0B3E  00AA               	movwf	___ftmul@exp
 14133  0B3F  082A               	movf	___ftmul@exp,w
 14134  0B40  1D03               	btfss	3,2
 14135  0B41  2B49               	goto	l2337
 14136  0B42  3000               	movlw	0
 14137  0B43  00A0               	movwf	?___ftmul
 14138  0B44  3000               	movlw	0
 14139  0B45  00A1               	movwf	?___ftmul+1
 14140  0B46  3000               	movlw	0
 14141  0B47  00A2               	movwf	?___ftmul+2
 14142  0B48  0008               	return
 14143  0B49                     l2337:	
 14144  0B49  0823               	movf	___ftmul@f2,w
 14145  0B4A  00A6               	movwf	??___ftmul
 14146  0B4B  0824               	movf	___ftmul@f2+1,w
 14147  0B4C  00A7               	movwf	??___ftmul+1
 14148  0B4D  0825               	movf	___ftmul@f2+2,w
 14149  0B4E  00A8               	movwf	??___ftmul+2
 14150  0B4F  1003               	clrc
 14151  0B50  0D27               	rlf	??___ftmul+1,w
 14152  0B51  0D28               	rlf	??___ftmul+2,w
 14153  0B52  00A9               	movwf	??___ftmul+3
 14154  0B53  0829               	movf	??___ftmul+3,w
 14155  0B54  00AF               	movwf	___ftmul@sign
 14156  0B55  082F               	movf	___ftmul@sign,w
 14157  0B56  1D03               	btfss	3,2
 14158  0B57  2B5F               	goto	l2343
 14159  0B58  3000               	movlw	0
 14160  0B59  00A0               	movwf	?___ftmul
 14161  0B5A  3000               	movlw	0
 14162  0B5B  00A1               	movwf	?___ftmul+1
 14163  0B5C  3000               	movlw	0
 14164  0B5D  00A2               	movwf	?___ftmul+2
 14165  0B5E  0008               	return
 14166  0B5F                     l2343:	
 14167  0B5F  082F               	movf	___ftmul@sign,w
 14168  0B60  3E7B               	addlw	123
 14169  0B61  00A6               	movwf	??___ftmul
 14170  0B62  0826               	movf	??___ftmul,w
 14171  0B63  07AA               	addwf	___ftmul@exp,f
 14172  0B64  0820               	movf	___ftmul@f1,w
 14173  0B65  00A6               	movwf	??___ftmul
 14174  0B66  0821               	movf	___ftmul@f1+1,w
 14175  0B67  00A7               	movwf	??___ftmul+1
 14176  0B68  0822               	movf	___ftmul@f1+2,w
 14177  0B69  00A8               	movwf	??___ftmul+2
 14178  0B6A  3010               	movlw	16
 14179  0B6B                     u2425:	
 14180  0B6B  36A8               	lsrf	??___ftmul+2,f
 14181  0B6C  0CA7               	rrf	??___ftmul+1,f
 14182  0B6D  0CA6               	rrf	??___ftmul,f
 14183  0B6E  0B89               	decfsz	9,f
 14184  0B6F  2B6B               	goto	u2425
 14185  0B70  0826               	movf	??___ftmul,w
 14186  0B71  00A9               	movwf	??___ftmul+3
 14187  0B72  0829               	movf	??___ftmul+3,w
 14188  0B73  00AF               	movwf	___ftmul@sign
 14189  0B74  0823               	movf	___ftmul@f2,w
 14190  0B75  00A6               	movwf	??___ftmul
 14191  0B76  0824               	movf	___ftmul@f2+1,w
 14192  0B77  00A7               	movwf	??___ftmul+1
 14193  0B78  0825               	movf	___ftmul@f2+2,w
 14194  0B79  00A8               	movwf	??___ftmul+2
 14195  0B7A  3010               	movlw	16
 14196  0B7B                     u2435:	
 14197  0B7B  36A8               	lsrf	??___ftmul+2,f
 14198  0B7C  0CA7               	rrf	??___ftmul+1,f
 14199  0B7D  0CA6               	rrf	??___ftmul,f
 14200  0B7E  0B89               	decfsz	9,f
 14201  0B7F  2B7B               	goto	u2435
 14202  0B80  0826               	movf	??___ftmul,w
 14203  0B81  00A9               	movwf	??___ftmul+3
 14204  0B82  0829               	movf	??___ftmul+3,w
 14205  0B83  06AF               	xorwf	___ftmul@sign,f
 14206  0B84  3080               	movlw	128
 14207  0B85  00A6               	movwf	??___ftmul
 14208  0B86  0826               	movf	??___ftmul,w
 14209  0B87  05AF               	andwf	___ftmul@sign,f
 14210  0B88  17A1               	bsf	___ftmul@f1+1,7
 14211  0B89  17A4               	bsf	___ftmul@f2+1,7
 14212  0B8A  30FF               	movlw	255
 14213  0B8B  05A3               	andwf	___ftmul@f2,f
 14214  0B8C  30FF               	movlw	255
 14215  0B8D  05A4               	andwf	___ftmul@f2+1,f
 14216  0B8E  3000               	movlw	0
 14217  0B8F  05A5               	andwf	___ftmul@f2+2,f
 14218  0B90  3000               	movlw	0
 14219  0B91  00AB               	movwf	___ftmul@f3_as_product
 14220  0B92  3000               	movlw	0
 14221  0B93  00AC               	movwf	___ftmul@f3_as_product+1
 14222  0B94  3000               	movlw	0
 14223  0B95  00AD               	movwf	___ftmul@f3_as_product+2
 14224  0B96  3007               	movlw	7
 14225  0B97  00A6               	movwf	??___ftmul
 14226  0B98  0826               	movf	??___ftmul,w
 14227  0B99  00AE               	movwf	___ftmul@cntr
 14228  0B9A                     l2355:	
 14229  0B9A  1C20               	btfss	___ftmul@f1,0
 14230  0B9B  2BA2               	goto	l2359
 14231  0B9C  0823               	movf	___ftmul@f2,w
 14232  0B9D  07AB               	addwf	___ftmul@f3_as_product,f
 14233  0B9E  0824               	movf	___ftmul@f2+1,w
 14234  0B9F  3DAC               	addwfc	___ftmul@f3_as_product+1,f
 14235  0BA0  0825               	movf	___ftmul@f2+2,w
 14236  0BA1  3DAD               	addwfc	___ftmul@f3_as_product+2,f
 14237  0BA2                     l2359:	
 14238  0BA2  3001               	movlw	1
 14239  0BA3                     u2455:	
 14240  0BA3  36A2               	lsrf	___ftmul@f1+2,f
 14241  0BA4  0CA1               	rrf	___ftmul@f1+1,f
 14242  0BA5  0CA0               	rrf	___ftmul@f1,f
 14243  0BA6  0B89               	decfsz	9,f
 14244  0BA7  2BA3               	goto	u2455
 14245  0BA8  3001               	movlw	1
 14246  0BA9                     u2465:	
 14247  0BA9  35A3               	lslf	___ftmul@f2,f
 14248  0BAA  0DA4               	rlf	___ftmul@f2+1,f
 14249  0BAB  0DA5               	rlf	___ftmul@f2+2,f
 14250  0BAC  0B89               	decfsz	9,f
 14251  0BAD  2BA9               	goto	u2465
 14252  0BAE  3001               	movlw	1
 14253  0BAF  02AE               	subwf	___ftmul@cntr,f
 14254  0BB0  1D03               	btfss	3,2
 14255  0BB1  2B9A               	goto	l2355
 14256  0BB2  3009               	movlw	9
 14257  0BB3  00A6               	movwf	??___ftmul
 14258  0BB4  0826               	movf	??___ftmul,w
 14259  0BB5  00AE               	movwf	___ftmul@cntr
 14260  0BB6                     l2367:	
 14261  0BB6  1C20               	btfss	___ftmul@f1,0
 14262  0BB7  2BBE               	goto	l2371
 14263  0BB8  0823               	movf	___ftmul@f2,w
 14264  0BB9  07AB               	addwf	___ftmul@f3_as_product,f
 14265  0BBA  0824               	movf	___ftmul@f2+1,w
 14266  0BBB  3DAC               	addwfc	___ftmul@f3_as_product+1,f
 14267  0BBC  0825               	movf	___ftmul@f2+2,w
 14268  0BBD  3DAD               	addwfc	___ftmul@f3_as_product+2,f
 14269  0BBE                     l2371:	
 14270  0BBE  3001               	movlw	1
 14271  0BBF                     u2495:	
 14272  0BBF  36A2               	lsrf	___ftmul@f1+2,f
 14273  0BC0  0CA1               	rrf	___ftmul@f1+1,f
 14274  0BC1  0CA0               	rrf	___ftmul@f1,f
 14275  0BC2  0B89               	decfsz	9,f
 14276  0BC3  2BBF               	goto	u2495
 14277  0BC4  3001               	movlw	1
 14278  0BC5                     u2505:	
 14279  0BC5  36AD               	lsrf	___ftmul@f3_as_product+2,f
 14280  0BC6  0CAC               	rrf	___ftmul@f3_as_product+1,f
 14281  0BC7  0CAB               	rrf	___ftmul@f3_as_product,f
 14282  0BC8  0B89               	decfsz	9,f
 14283  0BC9  2BC5               	goto	u2505
 14284  0BCA  3001               	movlw	1
 14285  0BCB  02AE               	subwf	___ftmul@cntr,f
 14286  0BCC  1D03               	btfss	3,2
 14287  0BCD  2BB6               	goto	l2367
 14288  0BCE  082B               	movf	___ftmul@f3_as_product,w
 14289  0BCF  00F0               	movwf	___ftpack@arg
 14290  0BD0  082C               	movf	___ftmul@f3_as_product+1,w
 14291  0BD1  00F1               	movwf	___ftpack@arg+1
 14292  0BD2  082D               	movf	___ftmul@f3_as_product+2,w
 14293  0BD3  00F2               	movwf	___ftpack@arg+2
 14294  0BD4  082A               	movf	___ftmul@exp,w
 14295  0BD5  00A6               	movwf	??___ftmul
 14296  0BD6  0826               	movf	??___ftmul,w
 14297  0BD7  00F3               	movwf	___ftpack@exp
 14298  0BD8  082F               	movf	___ftmul@sign,w
 14299  0BD9  00A7               	movwf	??___ftmul+1
 14300  0BDA  0827               	movf	??___ftmul+1,w
 14301  0BDB  00F4               	movwf	___ftpack@sign
 14302  0BDC  3197  279C         	fcall	___ftpack
 14303  0BDE  0870               	movf	?___ftpack,w
 14304  0BDF  0020               	movlb	0	; select bank0
 14305  0BE0  00A0               	movwf	?___ftmul
 14306  0BE1  0871               	movf	?___ftpack+1,w
 14307  0BE2  00A1               	movwf	?___ftmul+1
 14308  0BE3  0872               	movf	?___ftpack+2,w
 14309  0BE4  00A2               	movwf	?___ftmul+2
 14310  0BE5  0008               	return
 14311  0BE6                     __end_of___ftmul:	
 14312                           
 14313                           	psect	text41
 14314  13D7                     __ptext41:	
 14315 ;; *************** function ___awtoft *****************
 14316 ;; Defined at:
 14317 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
 14318 ;; Parameters:    Size  Location     Type
 14319 ;;  c               2    8[COMMON] int 
 14320 ;; Auto vars:     Size  Location     Type
 14321 ;;  sign            1   13[COMMON] unsigned char 
 14322 ;; Return value:  Size  Location     Type
 14323 ;;                  3    8[COMMON] float 
 14324 ;; Registers used:
 14325 ;;		wreg, status,2, status,0, pclath, cstack
 14326 ;; Tracked objects:
 14327 ;;		On entry : 0/0
 14328 ;;		On exit  : 0/0
 14329 ;;		Unchanged: 0/0
 14330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14331 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14332 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14333 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14334 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14335 ;;Total ram usage:        6 bytes
 14336 ;; Hardware stack levels used:    1
 14337 ;; Hardware stack levels required when called:    1
 14338 ;; This function calls:
 14339 ;;		___ftpack
 14340 ;; This function is called by:
 14341 ;;		_Init_Battery_State_Machine
 14342 ;;		_Battery_State_Machine
 14343 ;;		_cc_cv_mode
 14344 ;;		_tempCalc
 14345 ;;		_main
 14346 ;;		_calculateCurrent0
 14347 ;;		_calculateCurrent1
 14348 ;;		_calculateCurrent2
 14349 ;;		_calculateCurrent3
 14350 ;;		_log
 14351 ;; This function uses a non-reentrant model
 14352 ;;
 14353                           
 14354                           
 14355                           ;psect for function ___awtoft
 14356  13D7                     ___awtoft:	
 14357                           
 14358                           ;incstack = 0
 14359                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 14360  13D7  01FD               	clrf	___awtoft@sign
 14361  13D8  1FF9               	btfss	___awtoft@c+1,7
 14362  13D9  2BE1               	goto	l2391
 14363  13DA  09F8               	comf	___awtoft@c,f
 14364  13DB  09F9               	comf	___awtoft@c+1,f
 14365  13DC  0AF8               	incf	___awtoft@c,f
 14366  13DD  1903               	skipnz
 14367  13DE  0AF9               	incf	___awtoft@c+1,f
 14368  13DF  01FD               	clrf	___awtoft@sign
 14369  13E0  0AFD               	incf	___awtoft@sign,f
 14370  13E1                     l2391:	
 14371  13E1  0878               	movf	___awtoft@c,w
 14372  13E2  00F0               	movwf	___ftpack@arg
 14373  13E3  0879               	movf	___awtoft@c+1,w
 14374  13E4  00F1               	movwf	___ftpack@arg+1
 14375  13E5  01F2               	clrf	___ftpack@arg+2
 14376  13E6  308E               	movlw	142
 14377  13E7  00FB               	movwf	??___awtoft
 14378  13E8  087B               	movf	??___awtoft,w
 14379  13E9  00F3               	movwf	___ftpack@exp
 14380  13EA  087D               	movf	___awtoft@sign,w
 14381  13EB  00FC               	movwf	??___awtoft+1
 14382  13EC  087C               	movf	??___awtoft+1,w
 14383  13ED  00F4               	movwf	___ftpack@sign
 14384  13EE  3197  279C         	fcall	___ftpack
 14385  13F0  0870               	movf	?___ftpack,w
 14386  13F1  00F8               	movwf	?___awtoft
 14387  13F2  0871               	movf	?___ftpack+1,w
 14388  13F3  00F9               	movwf	?___awtoft+1
 14389  13F4  0872               	movf	?___ftpack+2,w
 14390  13F5  00FA               	movwf	?___awtoft+2
 14391  13F6  0008               	return
 14392  13F7                     __end_of___awtoft:	
 14393                           
 14394                           	psect	text42
 14395  179C                     __ptext42:	
 14396 ;; *************** function ___ftpack *****************
 14397 ;; Defined at:
 14398 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
 14399 ;; Parameters:    Size  Location     Type
 14400 ;;  arg             3    0[COMMON] unsigned um
 14401 ;;  exp             1    3[COMMON] unsigned char 
 14402 ;;  sign            1    4[COMMON] unsigned char 
 14403 ;; Auto vars:     Size  Location     Type
 14404 ;;		None
 14405 ;; Return value:  Size  Location     Type
 14406 ;;                  3    0[COMMON] float 
 14407 ;; Registers used:
 14408 ;;		wreg, status,2, status,0
 14409 ;; Tracked objects:
 14410 ;;		On entry : 0/0
 14411 ;;		On exit  : 0/0
 14412 ;;		Unchanged: 0/0
 14413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14414 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14415 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14416 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14417 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14418 ;;Total ram usage:        8 bytes
 14419 ;; Hardware stack levels used:    1
 14420 ;; This function calls:
 14421 ;;		Nothing
 14422 ;; This function is called by:
 14423 ;;		___awtoft
 14424 ;;		___ftadd
 14425 ;;		___ftdiv
 14426 ;;		___ftmul
 14427 ;; This function uses a non-reentrant model
 14428 ;;
 14429                           
 14430                           
 14431                           ;psect for function ___ftpack
 14432  179C                     ___ftpack:	
 14433                           
 14434                           ;incstack = 0
 14435                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 14436  179C  0873               	movf	___ftpack@exp,w
 14437  179D  1903               	btfsc	3,2
 14438  179E  2FA4               	goto	l2197
 14439  179F  0872               	movf	___ftpack@arg+2,w
 14440  17A0  0471               	iorwf	___ftpack@arg+1,w
 14441  17A1  0470               	iorwf	___ftpack@arg,w
 14442  17A2  1D03               	skipz
 14443  17A3  2FB5               	goto	l2203
 14444  17A4                     l2197:	
 14445  17A4  3000               	movlw	0
 14446  17A5  00F0               	movwf	?___ftpack
 14447  17A6  3000               	movlw	0
 14448  17A7  00F1               	movwf	?___ftpack+1
 14449  17A8  3000               	movlw	0
 14450  17A9  00F2               	movwf	?___ftpack+2
 14451  17AA  0008               	return
 14452  17AB                     l2201:	
 14453  17AB  3001               	movlw	1
 14454  17AC  00F5               	movwf	??___ftpack
 14455  17AD  0875               	movf	??___ftpack,w
 14456  17AE  07F3               	addwf	___ftpack@exp,f
 14457  17AF  3001               	movlw	1
 14458  17B0                     u1995:	
 14459  17B0  36F2               	lsrf	___ftpack@arg+2,f
 14460  17B1  0CF1               	rrf	___ftpack@arg+1,f
 14461  17B2  0CF0               	rrf	___ftpack@arg,f
 14462  17B3  0B89               	decfsz	9,f
 14463  17B4  2FB0               	goto	u1995
 14464  17B5                     l2203:	
 14465  17B5  30FE               	movlw	254
 14466  17B6  0572               	andwf	___ftpack@arg+2,w
 14467  17B7  1903               	btfsc	3,2
 14468  17B8  2FCE               	goto	l742
 14469  17B9  2FAB               	goto	l2201
 14470  17BA                     l2205:	
 14471  17BA  3001               	movlw	1
 14472  17BB  00F5               	movwf	??___ftpack
 14473  17BC  0875               	movf	??___ftpack,w
 14474  17BD  07F3               	addwf	___ftpack@exp,f
 14475  17BE  3001               	movlw	1
 14476  17BF  07F0               	addwf	___ftpack@arg,f
 14477  17C0  3000               	movlw	0
 14478  17C1  1803               	skipnc
 14479  17C2  3001               	movlw	1
 14480  17C3  07F1               	addwf	___ftpack@arg+1,f
 14481  17C4  3000               	movlw	0
 14482  17C5  1803               	skipnc
 14483  17C6  3001               	movlw	1
 14484  17C7  07F2               	addwf	___ftpack@arg+2,f
 14485  17C8  3001               	movlw	1
 14486  17C9                     u2015:	
 14487  17C9  36F2               	lsrf	___ftpack@arg+2,f
 14488  17CA  0CF1               	rrf	___ftpack@arg+1,f
 14489  17CB  0CF0               	rrf	___ftpack@arg,f
 14490  17CC  0B89               	decfsz	9,f
 14491  17CD  2FC9               	goto	u2015
 14492  17CE                     l742:	
 14493  17CE  30FF               	movlw	255
 14494  17CF  0572               	andwf	___ftpack@arg+2,w
 14495  17D0  1903               	btfsc	3,2
 14496  17D1  2FDB               	goto	l2213
 14497  17D2  2FBA               	goto	l2205
 14498  17D3                     l2211:	
 14499  17D3  3001               	movlw	1
 14500  17D4  02F3               	subwf	___ftpack@exp,f
 14501  17D5  3001               	movlw	1
 14502  17D6                     u2035:	
 14503  17D6  35F0               	lslf	___ftpack@arg,f
 14504  17D7  0DF1               	rlf	___ftpack@arg+1,f
 14505  17D8  0DF2               	rlf	___ftpack@arg+2,f
 14506  17D9  0B89               	decfsz	9,f
 14507  17DA  2FD6               	goto	u2035
 14508  17DB                     l2213:	
 14509  17DB  1BF1               	btfsc	___ftpack@arg+1,7
 14510  17DC  2FE1               	goto	l749
 14511  17DD  3002               	movlw	2
 14512  17DE  0273               	subwf	___ftpack@exp,w
 14513  17DF  1803               	skipnc
 14514  17E0  2FD3               	goto	l2211
 14515  17E1                     l749:	
 14516  17E1  1873               	btfsc	___ftpack@exp,0
 14517  17E2  2FE9               	goto	l750
 14518  17E3  30FF               	movlw	255
 14519  17E4  05F0               	andwf	___ftpack@arg,f
 14520  17E5  307F               	movlw	127
 14521  17E6  05F1               	andwf	___ftpack@arg+1,f
 14522  17E7  30FF               	movlw	255
 14523  17E8  05F2               	andwf	___ftpack@arg+2,f
 14524  17E9                     l750:	
 14525  17E9  1003               	clrc
 14526  17EA  0CF3               	rrf	___ftpack@exp,f
 14527  17EB  0873               	movf	___ftpack@exp,w
 14528  17EC  00F5               	movwf	??___ftpack
 14529  17ED  01F6               	clrf	??___ftpack+1
 14530  17EE  01F7               	clrf	??___ftpack+2
 14531  17EF  3010               	movlw	16
 14532  17F0                     u2075:	
 14533  17F0  35F5               	lslf	??___ftpack,f
 14534  17F1  0DF6               	rlf	??___ftpack+1,f
 14535  17F2  0DF7               	rlf	??___ftpack+2,f
 14536  17F3  0B89               	decfsz	9,f
 14537  17F4  2FF0               	goto	u2075
 14538  17F5  0875               	movf	??___ftpack,w
 14539  17F6  04F0               	iorwf	___ftpack@arg,f
 14540  17F7  0876               	movf	??___ftpack+1,w
 14541  17F8  04F1               	iorwf	___ftpack@arg+1,f
 14542  17F9  0877               	movf	??___ftpack+2,w
 14543  17FA  04F2               	iorwf	___ftpack@arg+2,f
 14544  17FB  0874               	movf	___ftpack@sign,w
 14545  17FC  1903               	btfsc	3,2
 14546  17FD  0008               	return
 14547  17FE  17F2               	bsf	___ftpack@arg+2,7
 14548  17FF  0008               	return
 14549  1800                     __end_of___ftpack:	
 14550  007E                     btemp	set	126	;btemp
 14551  007E                     wtemp0	set	126


Data Sizes:
    Strings     14
    Constant    330
    Data        10
    BSS         93
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     58      78
    BANK1            80     23      77
    BANK2            80      0      29
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5             8      0       0
    BANK6             0      0       0
    BANK7             0      0       0
    BANK8             0      0       0
    BANK9             0      0       0
    BANK10            0      0       0
    BANK11            0      0       0
    BANK12            0      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> log@exponent(BANK0[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 27
		 -> log@coeff(CODE[27]), 

    LCDWriteString@characters	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_3(CODE[5]), STR_2(CODE[5]), STR_1(CODE[4]), 


Critical Paths under _main in COMMON

    _main->_LCDWriteString
    _main->___awtoft
    _tempCalc->___awtoft
    _log->___awtoft
    ___ftadd->___awtoft
    _readIAnalog->___aldiv
    _readButton->_ADCRead
    _cc_cv_mode->___awtoft
    _calculateCurrent3->___awtoft
    _calculateCurrent2->___awtoft
    _calculateCurrent1->___awtoft
    _calculateCurrent0->___awtoft
    ___ftdiv->___awtoft
    _LCDInit->_LCDWrite
    _LCDClear->_gotoXY
    _gotoXY->_LCDWrite
    _Init_Battery_State_Machine->___awtoft
    _LCDWriteString->_LCDWriteCharacter
    _LCDWriteInt->_LCDWriteCharacter
    _LCDWriteCharacter->___wmul
    _Battery_State_Machine->___awtoft
    ___fttol->___awtoft
    ___ftmul->___awtoft
    ___awtoft->___ftpack

Critical Paths under _main in BANK0

    _main->_tempCalc
    _tempCalc->_log
    _log->_eval_poly
    _eval_poly->___ftadd
    ___ftsub->___ftadd
    ___ftadd->___ftdiv
    ___ftadd->___ftmul
    _readIAnalog->___aldiv
    _cc_cv_mode->___fttol
    _calculateCurrent3->___fttol
    _calculateCurrent2->___fttol
    _calculateCurrent1->___fttol
    _calculateCurrent0->___fttol
    _SYSTEM_Initialize->_Init_Battery_State_Machine
    _Init_Battery_State_Machine->___fttol
    _Battery_State_Machine->___fttol
    ___fttol->___ftdiv
    ___fttol->___ftmul

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                25    25      0  110463
                                             56 BANK0      2     2      0
                                              0 BANK1     23    23      0
                            _ADCRead
              _Battery_State_Machine
                           _LCDClear
                            _LCDInit
                  _LCDWriteCharacter
                        _LCDWriteInt
                     _LCDWriteString
                 _PWM6_LoadDutyValue
                 _PWM7_LoadDutyValue
                  _SYSTEM_Initialize
                           ___awtoft
                            ___ftdiv
                            ___fttol
                  _calculateCurrent0
                  _calculateCurrent1
                  _calculateCurrent2
                  _calculateCurrent3
                         _cc_cv_mode
                             _gotoXY
                         _readButton
                        _readIAnalog
                           _tempCalc
 ---------------------------------------------------------------------------------
 (1) _tempCalc                                            11     9      2   33648
                                             45 BANK0     11     9      2
                            _ADCRead (ARG)
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftsub
                            ___fttol
                                _log
 ---------------------------------------------------------------------------------
 (2) _log                                                  6     3      3   17068
                                             39 BANK0      6     3      3
                           ___awtoft
                            ___ftadd
                             ___ftge
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _frexp                                                6     2      4     330
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) _eval_poly                                           10     3      7    7315
                                             29 BANK0     10     3      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     322
                                              0 COMMON     9     3      6
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    3356
                                             29 BANK0      6     0      6
                            ___ftadd
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             13     7      6    3183
                                             16 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (1) _readIAnalog                                         24    22      2    1498
                                              9 COMMON     4     4      0
                                              6 BANK0     20    18      2
                            _ADCRead
                            ___aldiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     406
                                              0 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _readButton                                           2     2      0      22
                                              4 COMMON     2     2      0
                            _ADCRead
 ---------------------------------------------------------------------------------
 (2) _ADCRead                                              4     1      3      22
                                              0 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (1) _cc_cv_mode                                           8     8      0    6900
                                             30 BANK0      8     8      0
                           ___awtoft
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) _calculateCurrent3                                    3     3      0    6692
                                             30 BANK0      3     3      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) _calculateCurrent2                                    3     3      0    6692
                                             30 BANK0      3     3      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) _calculateCurrent1                                    3     3      0    6692
                                             30 BANK0      3     3      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) _calculateCurrent0                                    3     3      0    6692
                                             30 BANK0      3     3      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    3365
                                              0 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    2     2      0   10373
                                             35 BANK0      2     2      0
                     _ADC_Initialize
         _Init_Battery_State_Machine
                           _LCDClear
                            _LCDInit
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _PWM_Initialize
                    _TMR2_Initialize
                    _TMR4_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR4_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               1     1      0      23
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LCDInit                                              1     1      0     803
                                              5 COMMON     1     1      0
                           _LCDWrite
 ---------------------------------------------------------------------------------
 (2) _LCDClear                                             3     3      0    3021
                                              8 COMMON     3     3      0
                           _LCDWrite
                             _gotoXY
 ---------------------------------------------------------------------------------
 (1) _gotoXY                                               3     2      1    2172
                                              5 COMMON     3     2      1
                           _LCDWrite
 ---------------------------------------------------------------------------------
 (2) _Init_Battery_State_Machine                           5     5      0    6526
                                             30 BANK0      5     5      0
                           ___awtoft
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM7_LoadDutyValue                                   4     2      2      97
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _PWM6_LoadDutyValue                                   4     2      2      97
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _LCDWriteString                                       3     1      2    1847
                                             12 COMMON     2     0      2
                                              0 BANK0      1     1      0
                  _LCDWriteCharacter
 ---------------------------------------------------------------------------------
 (1) _LCDWriteInt                                         16    11      5    7267
                                              0 BANK0     16    11      5
                  _LCDWriteCharacter
                            ___awdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     265
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     406
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (2) _LCDWriteCharacter                                    6     6      0    1643
                                              6 COMMON     6     6      0
                           _LCDWrite
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     728
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) _LCDWrite                                             5     4      1     803
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (1) _Battery_State_Machine                                8     8      0    6988
                                             30 BANK0      8     8      0
                           ___awtoft
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             14    10      4     734
                                             16 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             16    10      6    3067
                                              0 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             6     3      3    2593
                                              8 COMMON     6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    1707
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCRead
   _Battery_State_Machine
     ___awtoft
       ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
   _LCDClear
     _LCDWrite
     _gotoXY
       _LCDWrite
   _LCDInit
     _LCDWrite
   _LCDWriteCharacter
     _LCDWrite
     ___wmul
   _LCDWriteInt
     _LCDWriteCharacter
       _LCDWrite
       ___wmul
     ___awdiv
     ___lwmod
   _LCDWriteString
     _LCDWriteCharacter
       _LCDWrite
       ___wmul
   _PWM6_LoadDutyValue
   _PWM7_LoadDutyValue
   _SYSTEM_Initialize
     _ADC_Initialize
     _Init_Battery_State_Machine
       ___awtoft
         ___ftpack
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
     _LCDClear
       _LCDWrite
       _gotoXY
         _LCDWrite
     _LCDInit
       _LCDWrite
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM_Initialize
     _TMR2_Initialize
     _TMR4_Initialize
   ___awtoft
     ___ftpack
   ___ftdiv
     ___awtoft (ARG)
       ___ftpack
     ___ftpack (ARG)
     ___ftpack (ARG)
   ___fttol
     ___awtoft (ARG)
       ___ftpack
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _frexp (ARG)
   _calculateCurrent0
     ___awtoft
       ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
   _calculateCurrent1
     ___awtoft
       ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
   _calculateCurrent2
     ___awtoft
       ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
   _calculateCurrent3
     ___awtoft
       ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
   _cc_cv_mode
     ___awtoft
       ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
   _gotoXY
     _LCDWrite
   _readButton
     _ADCRead
   _readIAnalog
     _ADCRead
     ___aldiv
     ___wmul
   _tempCalc
     _ADCRead (ARG)
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
       _frexp (ARG)
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftsub (ARG)
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
     ___fttol (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
     _log (ARG)
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       _eval_poly
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___wmul
       _frexp

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     3A      4E       5       97.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     17      4D       7       96.3%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      1D       9       36.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5                8      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      C6      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BANK8                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BANK9                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BANK10               0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BANK11               0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      C6      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Jul 10 16:57:54 2018

                       _stateCounter 00C8                                    _j 0068  
                                  _x 006B               LCDWriteInt@fieldLength 0022  
            __size_of_PWM_Initialize 0015                          __CFG_CP$OFF 0000  
                                 l60 134C                                   l57 1345  
                       ___awdiv@sign 0076                  ___wmul@multiplicand 0072  
        __size_of_PWM6_LoadDutyValue 0016                         ___ftadd@exp1 003C  
                       ___ftadd@exp2 003B                          __CFG_LVP$ON 0000  
                       ___ftadd@sign 003A                                  l220 140A  
                                l221 141A                                  l133 0DF9  
                                l222 140E                                  l129 0DB6  
                                l218 1402                                  l219 1404  
                      LCDClear@index 0079                                  l636 08E1  
                                l581 1387                                  l750 17E9  
                                l742 17CE                                  l833 09BF  
                                l749 17E1                                  l773 00CF  
                                _GIE 005F                                  _RB2 006A  
                       __CFG_CPD$OFF 0000                                  _log 0A82  
                    __end_of_ADCRead 1353                      _TMR2_Initialize 12E6  
                       __CFG_BORV$LO 0000                                  wreg 0009  
                    __end_of_LCDInit 14B4                         ?_LCDWriteInt 0020  
                       __CFG_ZCD$OFF 0000                         ___ftdiv@cntr 002A  
                       ___ftdiv@sign 002F                                 l2201 17AB  
                               l2211 17D3                                 l2203 17B5  
                               l2213 17DB                                 l2205 17BA  
                               l2301 00AE                                 l3023 0C3F  
                               l3007 0C07                                 l3041 0C8A  
                               l3025 0C43                                 l3017 0C0E  
                               l2313 00E1                                 l3201 0492  
                               l3035 0C55                                 l3027 0C4B  
                               l3019 0C3B                                 l2307 00C1  
                               l2403 151B                                 l3123 0302  
                               l3115 02EE                                 l2421 096B  
                               l3037 0C7C                                 l3029 0C51  
                               l2317 00F3                                 l2309 00CB  
                               l3221 04DD                                 l3141 0352  
                               l2343 0B5F                                 l2327 010E  
                               l2271 005F                                 l3231 04FB  
                               l3207 04AA                                 l3135 0326  
                               l2337 0B49                                 l2441 09A9  
                               l2249 1381                                 l3081 157E  
                               l3129 0308                                 l2371 0BBE  
                               l2355 0B9A                                 l2267 0058  
                               l3243 0526                                 l3227 04F4  
                               l3171 0428                                 l2197 17A4  
                               l2453 09D0                                 l3093 1608  
                               l2701 0910                                 l2277 006E  
                               l2391 13E1                                 l2367 0BB6  
                               l2359 0BA2                                 l2447 09B6  
                               l2439 099B                                 l3087 15C3  
                               l2295 009B                                 l3183 045E  
                               l2449 09C2                                 l2713 093B  
                               l2297 00A5                                 l2289 0088  
                               l2465 153C                                 l3177 0446  
                               l2563 1429                                 l3099 0822  
                               l2299 00AA                                 l2811 13A2  
                               l2483 1732                                 l3195 0474  
                               l2717 0949                                 l2709 0930  
                               l2735 1649                                 l2823 000A  
                               l2399 1505                                 l2671 0AB4  
                               l3375 07A9                                 l2905 02AE  
                               l2761 1680                                 l2753 166F  
                               l2745 1651                                 l2729 163E  
                               l2825 0016                                 l2833 002B  
                               l2569 143D                                 l2921 0DD1  
                               l2665 0AA1                                 l2747 165D  
                               l2771 09F0                                 l2691 08F2  
                               l2851 0FD8                                 l3379 07B2  
                               l2757 1678                                 l2829 0022  
                               l2917 0DC4                                 l2791 0A47  
                               l2865 0163                                 l2777 0A06  
                               l2961 08A0                                 l2867 016B  
                               l2955 088C                                 l2699 0902  
                               l2893 0247                                 l2869 017D  
                               l2981 08CD                                 l2949 0872  
                               l2887 022C                                 l2879 01D3  
                               l2799 0A60                                 l2975 08B5  
                               l2983 08CE                                 l2959 089E  
                               l2889 022E                                 l2897 0260  
                               l2993 1315                                 l2969 08AC  
                               ?_log 0047                                 STR_1 1825  
                               STR_2 1820                                 STR_3 181B  
                               u2015 17C9                                 u2035 17D6  
                               u3005 0A48                                 _LATA 0016  
                               _LATB 0017                                 u3015 0A57  
                               _LATC 0018                                 u2145 1388  
                               u3025 0A61                                 u2075 17F0  
                               u2155 138D                                 u3115 0ED8  
                               u3205 0155                                 u3125 0F2E  
                               u2325 00AF                                 u3135 0F68  
                               u2505 0BC5                                 u2425 0B6B  
                               u3065 000D                                 u3145 0FB3  
                               u2265 0089                                 _T2PR 028D  
                               u2435 0B7B                                 u3235 01A6  
                               u3315 0DA2                                 u2355 00C2  
                               u3500 0BF1                                 u2605 099C  
                               u3085 001C                                 u3405 0860  
                               u2455 0BA3                                 u3095 0023  
                               u3415 086C                                 u3175 0FE3  
                               u2295 009C                                 u2720 1477  
                               u2465 0BA9                                 u3265 021F  
                               u2705 1427                                 u3425 087C  
                               _T4PR 0293                                 u2635 09B7  
                               u3195 0141                                 u2715 143B  
                               u3435 0888                                 u3605 1378  
                               u3365 0E13                                 u3445 0896  
                               u2495 0BBF                                 u2575 0972  
                               u3615 1578                                 u2815 0911  
                               u3625 15BD                                 u2825 0925  
                               u3705 0416                                 u2915 165E  
                               u3635 1602                                 u3395 0E68  
                               u2835 0931                                 u2925 1668  
                               u3565 0C6A                                 u3645 081C  
                               u2935 1670                                 u3825 0483  
                               u3745 0437                                 u1995 17B0  
                               u3595 1362                                 u2795 0905  
                               u3845 049F                                 u3765 0453  
                               u2895 1654                                 u2985 0A18  
                               u2995 0A28                                 u3875 04D6  
                               u3795 0471                                 u3957 02F6  
                               u3967 08BF                                 u3895 04ED  
                               u3977 14D7                                 u3987 14E7  
                tempCalc@analogValue 004D                                 _WPUA 0F39  
                               _WPUB 0F44                                 _WPUC 0F4F  
                               _WPUE 0F65                                 _Imin 00C4  
                               _Iref 00C0                                 _Iout 00D4  
                       __CFG_WRT$OFF 0000                        __CFG_FCMEN$ON 0000  
                               _Vref 005A                                 _main 02BE  
                       ___ftpack@arg 0070                         ___ftpack@exp 0073  
                               fsr0h 0005                                 fsr1h 0007  
                               indf0 0000                                 fsr0l 0004  
                               indf1 0001                                 fsr1l 0006  
                               btemp 007E                                 log@x 0047  
                       ?_readIAnalog 0026                        __CFG_BOREN$ON 0000  
                               start 0002                        __CFG_CSWEN$ON 0000  
                      __CFG_MCLRE$ON 0000                         ___ftmul@cntr 002E  
                       ___ftmul@sign 002F                     __end_of_LCDClear 1442  
                       ___fttol@exp1 003D                                ??_log 004A  
                       ___fttol@lval 0039  __size_of_Init_Battery_State_Machine 0063  
     __size_of_OSCILLATOR_Initialize 0009                     __end_of_LCDWrite 141C  
      __end_of_OSCILLATOR_Initialize 0809                      __end_of___aldiv 0952  
                              _ADACQ 009D                                _ADACT 0099  
                              _ADCAP 009B                                ?_main 0070  
                              _ADCLK 0098                                _ADPCH 009E  
                              _ADREF 009A                      __end_of___awdiv 1685  
                              _ADPRE 009C                      __end_of___ftadd 0126  
                      __CFG_WDTE$OFF 0000                                _ADRPT 010D  
                    __end_of___ftdiv 0A82                      __end_of___ftmul 0BE6  
                    ___awdiv@divisor 0070                      __end_of___ftsub 13B8  
                    __end_of___fttol 09D9                                _T2CON 028E  
                              _LATA5 00B5                                _T4CON 0294  
                              _T2HLT 028F                                _T4HLT 0295  
                              _T2TMR 028C                                _T2RST 0291  
                    __end_of___lwmod 0030                                _T4TMR 0292  
                              _T4RST 0297                      ___awdiv@counter 0075  
                              _OSCEN 0891                                _TRISA 0011  
                              _TRISB 0012                                _TRISC 0013  
                    _TMR4_Initialize 12F4                                _Imode 0062  
             ?_Battery_State_Machine 0070                                _cc_cv 00D2  
                      ___awtoft@sign 007D                                _frexp 152A  
                              _fonts 1000                                _errno 00D0  
                      ___ftpack@sign 0074                                main@j 00E8  
                       main@slowLoop 00E1                                status 0003  
                              wtemp0 007E                      __initialization 07B5  
                        log@exponent 004B                         __end_of_main 07B5  
            __end_of_TMR2_Initialize 12F4                            ??_ADCRead 0073  
                             ??_main 0058                        ___fttol@sign1 0038  
                          ??_LCDInit 0075               Battery_State_Machine@z 0045  
            LCDWrite@data_or_command 0072                               _ADCON0 0093  
                             _ADCON1 0094                               _ADCON2 0095  
                             _ADCON3 0096                               ?_frexp 0070  
                             _ADLTHH 010F                               _ADLTHL 010E  
                             _ADRESH 008D                               _ADRESL 008C  
                             _ADSTAT 0097                               _ADUTHH 0111  
                   ___awdiv@dividend 0072                               _ADUTHL 0110  
                   __end_of___awtoft 13F7                               _ANSELA 0F38  
                             _ANSELB 0F43                               _ANSELC 0F4E  
                   __end_of___ftpack 1800                               _RB0PPS 0F18  
                             _RA6PPS 0F16                               _RA7PPS 0F17  
                     __CFG_WDTCCS$SC 0000                               _FVRCON 090C  
                             _OSCFRQ 0893                       __CFG_PWRTE$OFF 0000  
                     _LCDWriteString 1315                         _CCPTMRS1bits 021F  
                             ___ftge 14EF                            ??___aldiv 0078  
                             ___wmul 137F                            ??___awdiv 0074  
                          ??___ftadd 0036                       __CFG_STVREN$ON 0000  
                     _PWM_Initialize 1329                            ??___ftdiv 0026  
                          ??___ftmul 0026                            ??___ftsub 007E  
                          ??___fttol 0034                            ??___lwmod 0074  
                             _gotoXY 1302                               _button 006A  
            __end_of_TMR4_Initialize 1302                     ___awdiv@quotient 0077  
                             _totals 0120                ___ftmul@f3_as_product 002B  
                   __end_of_tempCalc 0D86                         LCDWrite@data 0070  
                       LCDWriteInt@i 002F                         LCDWriteInt@j 002E  
                          ?_LCDClear 0070                    _SYSTEM_Initialize 14B4  
               __size_of_LCDWriteInt 00B9                     __end_oflog@coeff 181B  
            __end_of__initialization 07FD                           ___ftadd@f1 0030  
                         ___ftadd@f2 0033                           ___ftge@ff1 0070  
                         ___ftge@ff2 0073                            ?_LCDWrite 0070  
                 ?_SYSTEM_Initialize 0070               __end_of_LCDWriteString 1329  
                       eval_poly@res 0044                           ___ftdiv@f1 0023  
                         ___ftdiv@f2 0020                           ___ftdiv@f3 002B  
                         ___awtoft@c 0078                           ___ftmul@f1 0020  
                         ___ftmul@f2 0023               __end_of_PWM_Initialize 133E  
               __size_of_readIAnalog 013E                           ___ftsub@f1 0040  
                         ___ftsub@f2 003D                           ___fttol@f1 0030  
                     __pcstackCOMMON 0070                         __pidataBANK0 12D0  
                       __pidataBANK2 12D2                  ??_SYSTEM_Initialize 0043  
                      __end_of_frexp 1565                        __end_of_fonts 112F  
                          LCDWrite@d 0073                            LCDWrite@i 0074  
                   ?_TMR2_Initialize 0070                           _cc_cv_mode 0D86  
        __size_of_PWM7_LoadDutyValue 0016                       main@efficiency 00D6  
                  LCDWriteInt@F14388 0130                    _calculateCurrent0 1565  
                  _calculateCurrent1 15AA                    _calculateCurrent2 15EF  
                  _calculateCurrent3 0809                              ??_frexp 0074  
          __end_of_SYSTEM_Initialize 14EF                           __pbssBANK0 005A  
                         __pbssBANK1 00A0                           __pbssBANK2 0120  
                 ?_calculateCurrent0 0070                   ?_calculateCurrent1 0070  
                 ?_calculateCurrent2 0070                   ?_calculateCurrent3 0070  
                       _batteryState 0064                   __size_of_eval_poly 0060  
                         ??_LCDClear 0078                       main@faultCount 00DD  
                         ??_LCDWrite 0071                      ?_LCDWriteString 007C  
                ??_calculateCurrent0 003E                  ??_calculateCurrent1 003E  
                ??_calculateCurrent2 003E                  ??_calculateCurrent3 003E  
                    ?_PWM_Initialize 0070                           __pmaintext 02BE  
                            ?___ftge 0070                              ?___wmul 0070  
                    __CFG_PPS1WAY$ON 0000           __end_of_PWM6_LoadDutyValue 1369  
                            ?_gotoXY 0075                              _ADCRead 133E  
                   ?_TMR4_Initialize 0070                            ?___awtoft 0078  
                          ?___ftpack 0070                              _ADSTPTH 0113  
                            _ADSTPTL 0112             __CFG_SCANE$not_available 0000  
                __CFG_RSTOSC$HFINT32 0000              __size_of_ADC_Initialize 001F  
            ??_Battery_State_Machine 003E                              _LCDInit 1479  
          __end_of_calculateCurrent0 15AA            __end_of_calculateCurrent1 15EF  
          __end_of_calculateCurrent2 1634            __end_of_calculateCurrent3 084E  
                            _OSCCON1 088D                              _OSCCON3 088F  
                            _OSCTUNE 0892                              _PWM6DCH 038D  
                            _PWM6DCL 038C                              _PWM7DCH 0391  
                            _PWM7DCL 0390                              _PWM6CON 038E  
                            _PWM7CON 0392                              _PPSLOCK 0E8F  
                     main@menuButton 00E7                       main@dutyCycle1 00D9  
                     main@dutyCycle6 00E9                       main@dutyCycle7 00EB  
                         _lastButton 0069                            ?_tempCalc 004D  
                            ___aldiv 08D0                      __size_of___ftge 003B  
                            ___awdiv 1634                              ___ftadd 0030  
                         _readButton 084E                              ___ftdiv 09D9  
                    __size_of___wmul 001B                              ___ftmul 0B32  
                            ___ftsub 139A                              ___fttol 0952  
                 main@displayRefresh 00E2                              ___lwmod 0004  
                    __size_of_gotoXY 0013                           ??___awtoft 007B  
                         ??___ftpack 0075                    __end_of_eval_poly 1739  
                            __ptext1 0C9F                              __ptext2 0A82  
                            __ptext3 152A                              __ptext4 16D9  
                            __ptext5 14EF                              __ptext6 139A  
                            __ptext7 0030                              __ptext8 0EC2  
                            __ptext9 08D0                          ?_cc_cv_mode 0070  
              _OSCILLATOR_Initialize 0800                            _T2CONbits 028E  
                            _current 00B0                         __size_of_log 00B0  
                     ADCRead@channel 0073                     ___aldiv@dividend 0074  
                          _T4CONbits 0294             ??_PIN_MANAGER_Initialize 0070  
                            _samples 2198           __size_of_SYSTEM_Initialize 003B  
                            clrloop0 12DB                              _voltage 00B8  
       ??_Init_Battery_State_Machine 003E                 end_of_initialization 07FD  
              LCDWriteCharacter@base 007A                              gotoXY@x 0077  
                            gotoXY@y 0075                           ??_tempCalc 007E  
                   ___aldiv@quotient 0022                    _LCDWriteCharacter 1685  
              __CFG_WDTCPS$WDTCPS_31 0000                   ?_LCDWriteCharacter 0070  
         __size_of_calculateCurrent0 0045           __size_of_calculateCurrent1 0045  
         __size_of_calculateCurrent2 0045           __size_of_calculateCurrent3 0045  
                          _TRISAbits 0011                  ??_LCDWriteCharacter 0076  
                   __CFG_FEXTOSC$OFF 0000                          ___ftdiv@exp 002E  
                __size_of_cc_cv_mode 013C                    __size_of_LCDClear 0026  
         LCDWriteCharacter@character 0079                    __size_of_LCDWrite 0025  
                        ___ftmul@exp 002A            __end_of_LCDWriteCharacter 16D9  
                        ?_readButton 0070            readIAnalog@analog_channel 0079  
                     __end_of___ftge 152A                            _VHoldMode 0060  
                     __end_of___wmul 139A                       _ADC_Initialize 13B8  
                     __end_of_gotoXY 1315               ?_OSCILLATOR_Initialize 0070  
                          _IminCount 00CC                  start_initialization 07B5  
                         eval_poly@d 0040                           eval_poly@n 0042  
                         eval_poly@x 003D                    main@faultNotReset 00DF  
    __size_of_PIN_MANAGER_Initialize 0037                          __end_of_log 0B32  
                      ??_LCDWriteInt 0025                     ??_LCDWriteString 0020  
                         frexp@value 0070                     ??_PWM_Initialize 0070  
                      ??_readIAnalog 0028                     __CFG_LPBOREN$OFF 0000  
                           ??___ftge 0076                    tempCalc@steinhart 0055  
                           ??___wmul 0074               __end_of_ADC_Initialize 13D7  
                      _tempCalc$1187 0052                          __pdataBANK0 006C  
                        __pdataBANK2 0135           __end_of_PWM7_LoadDutyValue 137F  
                           ??_gotoXY 0076                             ?_ADCRead 0070  
       PWM7_LoadDutyValue@dutyCycle7 0070                    __size_of___awtoft 0020  
                           ?_LCDInit 0070                    __size_of___ftpack 0064  
                        __pbssBIGRAM 2198       __size_of_Battery_State_Machine 0198  
      __end_of_Battery_State_Machine 02BE                            ___latbits 0002  
                      __pcstackBANK0 0020                        __pcstackBANK1 00D6  
                 _PWM6_LoadDutyValue 1353             __size_of_TMR2_Initialize 000E  
 __end_of_Init_Battery_State_Machine 179C           _Init_Battery_State_Machine 1739  
                __size_of_readButton 0082                  ?_PWM6_LoadDutyValue 0070  
                __end_of_LCDWriteInt 0C9F                          _batteryTemp 006C  
             _PIN_MANAGER_Initialize 1442           __size_of_LCDWriteCharacter 0054  
                           ?___aldiv 0070                  __end_of_readIAnalog 1000  
                  __size_of_tempCalc 00E7                             ?___awdiv 0070  
                           ?___ftadd 0030                             ?___ftdiv 0020  
                           ?___ftmul 0020                             ?___ftsub 003D  
                           ?___fttol 0030                     LCDWriteInt@value 0020  
                           ?___lwmod 0070                      ?_ADC_Initialize 0070  
               ??_PWM6_LoadDutyValue 0072                         ??_cc_cv_mode 003E  
                          _eval_poly 16D9             __size_of_TMR4_Initialize 000E  
                     __size_of_frexp 003B                             _T2CLKCON 0290  
                           _T4CLKCON 0296                          cc_cv_mode@z 0045  
                           _LCDClear 141C                      ___aldiv@divisor 0070  
                    ___aldiv@counter 0020                       ___wmul@product 0074  
                           _LATAbits 0016                             _LCDWrite 13F7  
                          clear_ram0 12DA                             _PIE0bits 0716  
                 __end_of_cc_cv_mode 0EC2                             _PIR4bits 0710  
                   readIAnalog@value 007B                            main@MPPT0 00E3  
                          main@MPPT1 00E5                     __size_of_ADCRead 0015  
                         _ADCON0bits 0093                    ___wmul@multiplier 0070  
                         ?_eval_poly 003D                     __size_of_LCDInit 003B  
                           _Ianalogs 00A0                          _LCDWriteInt 0BE6  
        Init_Battery_State_Machine@z 0042                    ??_TMR2_Initialize 0070  
                        _readIAnalog 0EC2                            frexp@eptr 0073  
                           _Vanalogs 00A8                         ??_readButton 0074  
            ??_OSCILLATOR_Initialize 0070                 LCDWriteInt@numPlaces 0023  
                   __size_of___aldiv 0082                     __size_of___awdiv 0051  
                   __size_of___ftadd 00F6                     __size_of___ftdiv 00A9  
                   __size_of___ftmul 00B4                     __size_of___ftsub 001E  
                   __size_of___fttol 0087                     __size_of___lwmod 002C  
                        _readButtons 005E                             ___awtoft 13D7  
                           ___ftpack 179C                             _channels 0135  
                           __ptext10 084E                             __ptext11 133E  
                           __ptext20 12E6                             __ptext12 0D86  
                           __ptext21 1329                             __ptext13 0809  
                           __ptext30 1353                             __ptext22 1442  
                           __ptext14 15EF                             __ptext31 1315  
                           __ptext23 0800                             __ptext15 15AA  
                           __ptext40 0B32                             __ptext32 0BE6  
                           __ptext24 1479                             __ptext16 1565  
                           __ptext41 13D7                             __ptext33 0004  
                           __ptext25 141C                             __ptext17 09D9  
                           __ptext42 179C                             __ptext34 1634  
                           __ptext26 1302                             __ptext18 14B4  
                           __ptext35 1685                             __ptext27 1739  
                           __ptext19 12F4                             __ptext36 137F  
                           __ptext28 13B8                             __ptext37 13F7  
                           __ptext29 1369                             __ptext38 0126  
                           __ptext39 0952                      LCDWriteInt@sign 0024  
                          tempCalc@R 004F                   __end_of_readButton 08D0  
                  ??_TMR4_Initialize 0070                        __size_of_main 04F7  
               __CFG_WDTCWS$WDTCWS_7 0000                             _tempCalc 0C9F  
        PIN_MANAGER_Initialize@state 0070                             log@coeff 1800  
                        ??_eval_poly 007E                          _sampleIndex 0066  
                 _PWM7_LoadDutyValue 1369          ?_Init_Battery_State_Machine 0070  
                   ___lwmod@dividend 0072                       LCDWriteInt@str 0029  
            ?_PIN_MANAGER_Initialize 0070                  ?_PWM7_LoadDutyValue 0070  
                  __CFG_CLKOUTEN$OFF 0000                          _PPSLOCKbits 0E8F  
                   ??_ADC_Initialize 0070         PWM6_LoadDutyValue@dutyCycle6 0070  
                      __pstringtext1 1000                        __pstringtext2 1800  
                      __pstringtext3 1820                        __pstringtext4 1825  
                      __pstringtext5 0000                 ??_PWM7_LoadDutyValue 0072  
                    ___lwmod@divisor 0070                      ___lwmod@counter 0075  
           LCDWriteString@characters 007C                         ___aldiv@sign 0021  
                 readIAnalog@channel 0026                _Battery_State_Machine 0126  
     __end_of_PIN_MANAGER_Initialize 1479                        main@IOutTotal 00DB  
            __size_of_LCDWriteString 0014  
