

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sat Jul 07 16:31:51 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F18855
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	stringtext1,global,class=STRCODE,delta=2
     7                           	psect	stringtext2,global,class=STRCODE,delta=2
     8                           	psect	stringtext3,global,class=STRCODE,delta=2
     9                           	psect	cinit,global,class=CODE,merge=1,delta=2
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    20                           	psect	text1,local,class=CODE,merge=1,delta=2
    21                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    22                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    23                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    24                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    25                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    26                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    27                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    28                           	psect	text9,local,class=CODE,merge=1,delta=2
    29                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    30                           	psect	text11,local,class=CODE,merge=1,delta=2
    31                           	psect	text12,local,class=CODE,merge=1,delta=2
    32                           	psect	text13,local,class=CODE,merge=1,delta=2
    33                           	psect	text14,local,class=CODE,merge=1,delta=2
    34                           	psect	text15,local,class=CODE,merge=1,delta=2
    35                           	psect	text16,local,class=CODE,merge=1,delta=2
    36                           	psect	text17,local,class=CODE,merge=1,delta=2
    37                           	psect	text18,local,class=CODE,merge=1,delta=2,group=2
    38                           	psect	text19,local,class=CODE,merge=1,delta=2,group=2
    39                           	psect	text20,local,class=CODE,merge=1,delta=2,group=2
    40                           	psect	text21,local,class=CODE,merge=1,delta=2,group=2
    41                           	psect	text22,local,class=CODE,merge=1,delta=2
    42                           	psect	text23,local,class=CODE,merge=1,delta=2
    43                           	psect	text24,local,class=CODE,merge=1,delta=2
    44                           	psect	text25,local,class=CODE,merge=1,delta=2
    45                           	psect	text26,local,class=CODE,merge=1,delta=2
    46                           	psect	text27,local,class=CODE,merge=1,delta=2
    47                           	psect	text28,local,class=CODE,merge=1,delta=2
    48                           	psect	text29,local,class=CODE,merge=1,delta=2
    49                           	psect	text30,local,class=CODE,merge=1,delta=2
    50                           	psect	text31,local,class=CODE,merge=1,delta=2
    51                           	psect	text32,local,class=CODE,merge=1,delta=2
    52                           	psect	text33,local,class=CODE,merge=1,delta=2
    53                           	psect	text34,local,class=CODE,merge=1,delta=2
    54                           	psect	text35,local,class=CODE,merge=1,delta=2,group=2
    55                           	psect	text36,local,class=CODE,merge=1,delta=2,group=2
    56                           	psect	text37,local,class=CODE,merge=1,delta=2
    57                           	psect	text38,local,class=CODE,merge=1,delta=2
    58                           	psect	text39,local,class=CODE,merge=1,delta=2
    59                           	psect	text40,local,class=CODE,merge=1,delta=2
    60                           	psect	text41,local,class=CODE,merge=1,delta=2,group=2
    61                           	psect	text42,local,class=CODE,merge=1,delta=2
    62                           	dabs	1,0x620,48
    63                           	dabs	1,0x5A0,80
    64                           	dabs	1,0x520,80
    65                           	dabs	1,0x4A0,80
    66                           	dabs	1,0x420,80
    67                           	dabs	1,0x3A0,80
    68                           	dabs	1,0x320,80
    69                           	dabs	1,0x2A8,72
    70                           	dabs	1,0x2198,0,_samples
    71                           	dabs	1,0x7E,2
    72  0000                     
    73                           ; Version 1.45
    74                           ; Generated 16/11/2017 GMT
    75                           ; 
    76                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    77                           ; All rights reserved.
    78                           ; 
    79                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    80                           ; 
    81                           ; Redistribution and use in source and binary forms, with or without modification, are
    82                           ; permitted provided that the following conditions are met:
    83                           ; 
    84                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    85                           ;        conditions and the following disclaimer.
    86                           ; 
    87                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    88                           ;        of conditions and the following disclaimer in the documentation and/or other
    89                           ;        materials provided with the distribution.
    90                           ; 
    91                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    92                           ;        software without specific prior written permission.
    93                           ; 
    94                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    95                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    96                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    97                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    98                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    99                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   100                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   101                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   102                           ; 
   103                           ; 
   104                           ; Code-generator required, PIC16F18855 Definitions
   105                           ; 
   106                           ; SFR Addresses
   107  0000                     	;# 
   108  0001                     	;# 
   109  0002                     	;# 
   110  0003                     	;# 
   111  0004                     	;# 
   112  0005                     	;# 
   113  0006                     	;# 
   114  0007                     	;# 
   115  0008                     	;# 
   116  0009                     	;# 
   117  000A                     	;# 
   118  000B                     	;# 
   119  000C                     	;# 
   120  000D                     	;# 
   121  000E                     	;# 
   122  0010                     	;# 
   123  0011                     	;# 
   124  0012                     	;# 
   125  0013                     	;# 
   126  0016                     	;# 
   127  0017                     	;# 
   128  0018                     	;# 
   129  001C                     	;# 
   130  001C                     	;# 
   131  001D                     	;# 
   132  001D                     	;# 
   133  001E                     	;# 
   134  001F                     	;# 
   135  008C                     	;# 
   136  008C                     	;# 
   137  008D                     	;# 
   138  008E                     	;# 
   139  008E                     	;# 
   140  008F                     	;# 
   141  0090                     	;# 
   142  0090                     	;# 
   143  0091                     	;# 
   144  0093                     	;# 
   145  0094                     	;# 
   146  0095                     	;# 
   147  0096                     	;# 
   148  0097                     	;# 
   149  0098                     	;# 
   150  0099                     	;# 
   151  009A                     	;# 
   152  009B                     	;# 
   153  009C                     	;# 
   154  009D                     	;# 
   155  009E                     	;# 
   156  010C                     	;# 
   157  010D                     	;# 
   158  010E                     	;# 
   159  010E                     	;# 
   160  010F                     	;# 
   161  0110                     	;# 
   162  0110                     	;# 
   163  0111                     	;# 
   164  0112                     	;# 
   165  0112                     	;# 
   166  0113                     	;# 
   167  0114                     	;# 
   168  0114                     	;# 
   169  0115                     	;# 
   170  0116                     	;# 
   171  0116                     	;# 
   172  0117                     	;# 
   173  0119                     	;# 
   174  0119                     	;# 
   175  0119                     	;# 
   176  011A                     	;# 
   177  011A                     	;# 
   178  011A                     	;# 
   179  011B                     	;# 
   180  011B                     	;# 
   181  011B                     	;# 
   182  011B                     	;# 
   183  011B                     	;# 
   184  011C                     	;# 
   185  011C                     	;# 
   186  011C                     	;# 
   187  011D                     	;# 
   188  011D                     	;# 
   189  011D                     	;# 
   190  011E                     	;# 
   191  011E                     	;# 
   192  011E                     	;# 
   193  011F                     	;# 
   194  011F                     	;# 
   195  011F                     	;# 
   196  011F                     	;# 
   197  011F                     	;# 
   198  018C                     	;# 
   199  018D                     	;# 
   200  018E                     	;# 
   201  018F                     	;# 
   202  0190                     	;# 
   203  0191                     	;# 
   204  0192                     	;# 
   205  0196                     	;# 
   206  0197                     	;# 
   207  0198                     	;# 
   208  0199                     	;# 
   209  019A                     	;# 
   210  019B                     	;# 
   211  019C                     	;# 
   212  020C                     	;# 
   213  020C                     	;# 
   214  020D                     	;# 
   215  020E                     	;# 
   216  020F                     	;# 
   217  020F                     	;# 
   218  0210                     	;# 
   219  0210                     	;# 
   220  0211                     	;# 
   221  0211                     	;# 
   222  0212                     	;# 
   223  0212                     	;# 
   224  0213                     	;# 
   225  0214                     	;# 
   226  0215                     	;# 
   227  0215                     	;# 
   228  0216                     	;# 
   229  0216                     	;# 
   230  0217                     	;# 
   231  0217                     	;# 
   232  0218                     	;# 
   233  0218                     	;# 
   234  0219                     	;# 
   235  021A                     	;# 
   236  021B                     	;# 
   237  021B                     	;# 
   238  021C                     	;# 
   239  021C                     	;# 
   240  021D                     	;# 
   241  021D                     	;# 
   242  021E                     	;# 
   243  021F                     	;# 
   244  028C                     	;# 
   245  028C                     	;# 
   246  028D                     	;# 
   247  028D                     	;# 
   248  028E                     	;# 
   249  028F                     	;# 
   250  0290                     	;# 
   251  0290                     	;# 
   252  0291                     	;# 
   253  0292                     	;# 
   254  0292                     	;# 
   255  0293                     	;# 
   256  0293                     	;# 
   257  0294                     	;# 
   258  0295                     	;# 
   259  0296                     	;# 
   260  0296                     	;# 
   261  0297                     	;# 
   262  0298                     	;# 
   263  0298                     	;# 
   264  0299                     	;# 
   265  0299                     	;# 
   266  029A                     	;# 
   267  029B                     	;# 
   268  029C                     	;# 
   269  029C                     	;# 
   270  029D                     	;# 
   271  030C                     	;# 
   272  030C                     	;# 
   273  030D                     	;# 
   274  030E                     	;# 
   275  030F                     	;# 
   276  0310                     	;# 
   277  0310                     	;# 
   278  0311                     	;# 
   279  0312                     	;# 
   280  0313                     	;# 
   281  0314                     	;# 
   282  0314                     	;# 
   283  0315                     	;# 
   284  0316                     	;# 
   285  0317                     	;# 
   286  0318                     	;# 
   287  0318                     	;# 
   288  0319                     	;# 
   289  031A                     	;# 
   290  031B                     	;# 
   291  031C                     	;# 
   292  031C                     	;# 
   293  031D                     	;# 
   294  031E                     	;# 
   295  031F                     	;# 
   296  038C                     	;# 
   297  038D                     	;# 
   298  038E                     	;# 
   299  0390                     	;# 
   300  0391                     	;# 
   301  0392                     	;# 
   302  040C                     	;# 
   303  040D                     	;# 
   304  040E                     	;# 
   305  040F                     	;# 
   306  0410                     	;# 
   307  0411                     	;# 
   308  0416                     	;# 
   309  0416                     	;# 
   310  0417                     	;# 
   311  0418                     	;# 
   312  0418                     	;# 
   313  0419                     	;# 
   314  041A                     	;# 
   315  041A                     	;# 
   316  041B                     	;# 
   317  041C                     	;# 
   318  041C                     	;# 
   319  041D                     	;# 
   320  041E                     	;# 
   321  041F                     	;# 
   322  048C                     	;# 
   323  048C                     	;# 
   324  048D                     	;# 
   325  048E                     	;# 
   326  048F                     	;# 
   327  048F                     	;# 
   328  0490                     	;# 
   329  0491                     	;# 
   330  0492                     	;# 
   331  0492                     	;# 
   332  0493                     	;# 
   333  0494                     	;# 
   334  0495                     	;# 
   335  0495                     	;# 
   336  0496                     	;# 
   337  0497                     	;# 
   338  0498                     	;# 
   339  0499                     	;# 
   340  049A                     	;# 
   341  049B                     	;# 
   342  049C                     	;# 
   343  049D                     	;# 
   344  050C                     	;# 
   345  050C                     	;# 
   346  050D                     	;# 
   347  050E                     	;# 
   348  050F                     	;# 
   349  050F                     	;# 
   350  0510                     	;# 
   351  0511                     	;# 
   352  0512                     	;# 
   353  0512                     	;# 
   354  0513                     	;# 
   355  0514                     	;# 
   356  0515                     	;# 
   357  0515                     	;# 
   358  0516                     	;# 
   359  0517                     	;# 
   360  0518                     	;# 
   361  0519                     	;# 
   362  051A                     	;# 
   363  051B                     	;# 
   364  051C                     	;# 
   365  051D                     	;# 
   366  058C                     	;# 
   367  058C                     	;# 
   368  058D                     	;# 
   369  058E                     	;# 
   370  058F                     	;# 
   371  058F                     	;# 
   372  0590                     	;# 
   373  0591                     	;# 
   374  0592                     	;# 
   375  0593                     	;# 
   376  060C                     	;# 
   377  060D                     	;# 
   378  060E                     	;# 
   379  060F                     	;# 
   380  0610                     	;# 
   381  0611                     	;# 
   382  0612                     	;# 
   383  0613                     	;# 
   384  0614                     	;# 
   385  0616                     	;# 
   386  0617                     	;# 
   387  0618                     	;# 
   388  0619                     	;# 
   389  061A                     	;# 
   390  061B                     	;# 
   391  061C                     	;# 
   392  061D                     	;# 
   393  061E                     	;# 
   394  068C                     	;# 
   395  068D                     	;# 
   396  068E                     	;# 
   397  068F                     	;# 
   398  0690                     	;# 
   399  0691                     	;# 
   400  0692                     	;# 
   401  0693                     	;# 
   402  0694                     	;# 
   403  070C                     	;# 
   404  070D                     	;# 
   405  070E                     	;# 
   406  070F                     	;# 
   407  0710                     	;# 
   408  0711                     	;# 
   409  0712                     	;# 
   410  0713                     	;# 
   411  0714                     	;# 
   412  0716                     	;# 
   413  0717                     	;# 
   414  0718                     	;# 
   415  0719                     	;# 
   416  071A                     	;# 
   417  071B                     	;# 
   418  071C                     	;# 
   419  071D                     	;# 
   420  071E                     	;# 
   421  0796                     	;# 
   422  0797                     	;# 
   423  0798                     	;# 
   424  0799                     	;# 
   425  079A                     	;# 
   426  079B                     	;# 
   427  080C                     	;# 
   428  080D                     	;# 
   429  080E                     	;# 
   430  080F                     	;# 
   431  0810                     	;# 
   432  0811                     	;# 
   433  0812                     	;# 
   434  0813                     	;# 
   435  0814                     	;# 
   436  081A                     	;# 
   437  081B                     	;# 
   438  081C                     	;# 
   439  081D                     	;# 
   440  081E                     	;# 
   441  081F                     	;# 
   442  088C                     	;# 
   443  088D                     	;# 
   444  088E                     	;# 
   445  088F                     	;# 
   446  0890                     	;# 
   447  0891                     	;# 
   448  0892                     	;# 
   449  0893                     	;# 
   450  0895                     	;# 
   451  0896                     	;# 
   452  0897                     	;# 
   453  0898                     	;# 
   454  0899                     	;# 
   455  089A                     	;# 
   456  089B                     	;# 
   457  090C                     	;# 
   458  090E                     	;# 
   459  090F                     	;# 
   460  091F                     	;# 
   461  091F                     	;# 
   462  098F                     	;# 
   463  098F                     	;# 
   464  0990                     	;# 
   465  0991                     	;# 
   466  0992                     	;# 
   467  0993                     	;# 
   468  0994                     	;# 
   469  0995                     	;# 
   470  0996                     	;# 
   471  0997                     	;# 
   472  0E0F                     	;# 
   473  0E10                     	;# 
   474  0E11                     	;# 
   475  0E12                     	;# 
   476  0E13                     	;# 
   477  0E14                     	;# 
   478  0E15                     	;# 
   479  0E16                     	;# 
   480  0E17                     	;# 
   481  0E18                     	;# 
   482  0E19                     	;# 
   483  0E1A                     	;# 
   484  0E1B                     	;# 
   485  0E1C                     	;# 
   486  0E1D                     	;# 
   487  0E1E                     	;# 
   488  0E1F                     	;# 
   489  0E20                     	;# 
   490  0E21                     	;# 
   491  0E22                     	;# 
   492  0E23                     	;# 
   493  0E24                     	;# 
   494  0E25                     	;# 
   495  0E26                     	;# 
   496  0E27                     	;# 
   497  0E28                     	;# 
   498  0E29                     	;# 
   499  0E2A                     	;# 
   500  0E2B                     	;# 
   501  0E2C                     	;# 
   502  0E2D                     	;# 
   503  0E2E                     	;# 
   504  0E2F                     	;# 
   505  0E30                     	;# 
   506  0E31                     	;# 
   507  0E32                     	;# 
   508  0E33                     	;# 
   509  0E34                     	;# 
   510  0E35                     	;# 
   511  0E36                     	;# 
   512  0E37                     	;# 
   513  0E8F                     	;# 
   514  0E90                     	;# 
   515  0E91                     	;# 
   516  0E92                     	;# 
   517  0E93                     	;# 
   518  0E94                     	;# 
   519  0E95                     	;# 
   520  0E96                     	;# 
   521  0E97                     	;# 
   522  0E9C                     	;# 
   523  0E9D                     	;# 
   524  0E9E                     	;# 
   525  0EA1                     	;# 
   526  0EA2                     	;# 
   527  0EA3                     	;# 
   528  0EA4                     	;# 
   529  0EA5                     	;# 
   530  0EA9                     	;# 
   531  0EAA                     	;# 
   532  0EAB                     	;# 
   533  0EAC                     	;# 
   534  0EB1                     	;# 
   535  0EB2                     	;# 
   536  0EB3                     	;# 
   537  0EB8                     	;# 
   538  0EB9                     	;# 
   539  0EBA                     	;# 
   540  0EBB                     	;# 
   541  0EBC                     	;# 
   542  0EBD                     	;# 
   543  0EBE                     	;# 
   544  0EC3                     	;# 
   545  0EC5                     	;# 
   546  0EC6                     	;# 
   547  0EC7                     	;# 
   548  0EC8                     	;# 
   549  0EC9                     	;# 
   550  0ECA                     	;# 
   551  0ECB                     	;# 
   552  0ECC                     	;# 
   553  0F10                     	;# 
   554  0F11                     	;# 
   555  0F12                     	;# 
   556  0F13                     	;# 
   557  0F14                     	;# 
   558  0F15                     	;# 
   559  0F16                     	;# 
   560  0F17                     	;# 
   561  0F18                     	;# 
   562  0F19                     	;# 
   563  0F1A                     	;# 
   564  0F1B                     	;# 
   565  0F1C                     	;# 
   566  0F1D                     	;# 
   567  0F1E                     	;# 
   568  0F1F                     	;# 
   569  0F20                     	;# 
   570  0F21                     	;# 
   571  0F22                     	;# 
   572  0F23                     	;# 
   573  0F24                     	;# 
   574  0F25                     	;# 
   575  0F26                     	;# 
   576  0F27                     	;# 
   577  0F38                     	;# 
   578  0F39                     	;# 
   579  0F3A                     	;# 
   580  0F3B                     	;# 
   581  0F3C                     	;# 
   582  0F3D                     	;# 
   583  0F3E                     	;# 
   584  0F3F                     	;# 
   585  0F40                     	;# 
   586  0F41                     	;# 
   587  0F43                     	;# 
   588  0F44                     	;# 
   589  0F45                     	;# 
   590  0F46                     	;# 
   591  0F47                     	;# 
   592  0F48                     	;# 
   593  0F49                     	;# 
   594  0F4A                     	;# 
   595  0F4B                     	;# 
   596  0F4C                     	;# 
   597  0F4E                     	;# 
   598  0F4F                     	;# 
   599  0F50                     	;# 
   600  0F51                     	;# 
   601  0F52                     	;# 
   602  0F53                     	;# 
   603  0F54                     	;# 
   604  0F55                     	;# 
   605  0F56                     	;# 
   606  0F57                     	;# 
   607  0F65                     	;# 
   608  0F68                     	;# 
   609  0F69                     	;# 
   610  0F6A                     	;# 
   611  0F6B                     	;# 
   612  0FE4                     	;# 
   613  0FE5                     	;# 
   614  0FE6                     	;# 
   615  0FE7                     	;# 
   616  0FE8                     	;# 
   617  0FE9                     	;# 
   618  0FEA                     	;# 
   619  0FEB                     	;# 
   620  0FED                     	;# 
   621  0FEE                     	;# 
   622  0FEF                     	;# 
   623  0000                     	;# 
   624  0001                     	;# 
   625  0002                     	;# 
   626  0003                     	;# 
   627  0004                     	;# 
   628  0005                     	;# 
   629  0006                     	;# 
   630  0007                     	;# 
   631  0008                     	;# 
   632  0009                     	;# 
   633  000A                     	;# 
   634  000B                     	;# 
   635  000C                     	;# 
   636  000D                     	;# 
   637  000E                     	;# 
   638  0010                     	;# 
   639  0011                     	;# 
   640  0012                     	;# 
   641  0013                     	;# 
   642  0016                     	;# 
   643  0017                     	;# 
   644  0018                     	;# 
   645  001C                     	;# 
   646  001C                     	;# 
   647  001D                     	;# 
   648  001D                     	;# 
   649  001E                     	;# 
   650  001F                     	;# 
   651  008C                     	;# 
   652  008C                     	;# 
   653  008D                     	;# 
   654  008E                     	;# 
   655  008E                     	;# 
   656  008F                     	;# 
   657  0090                     	;# 
   658  0090                     	;# 
   659  0091                     	;# 
   660  0093                     	;# 
   661  0094                     	;# 
   662  0095                     	;# 
   663  0096                     	;# 
   664  0097                     	;# 
   665  0098                     	;# 
   666  0099                     	;# 
   667  009A                     	;# 
   668  009B                     	;# 
   669  009C                     	;# 
   670  009D                     	;# 
   671  009E                     	;# 
   672  010C                     	;# 
   673  010D                     	;# 
   674  010E                     	;# 
   675  010E                     	;# 
   676  010F                     	;# 
   677  0110                     	;# 
   678  0110                     	;# 
   679  0111                     	;# 
   680  0112                     	;# 
   681  0112                     	;# 
   682  0113                     	;# 
   683  0114                     	;# 
   684  0114                     	;# 
   685  0115                     	;# 
   686  0116                     	;# 
   687  0116                     	;# 
   688  0117                     	;# 
   689  0119                     	;# 
   690  0119                     	;# 
   691  0119                     	;# 
   692  011A                     	;# 
   693  011A                     	;# 
   694  011A                     	;# 
   695  011B                     	;# 
   696  011B                     	;# 
   697  011B                     	;# 
   698  011B                     	;# 
   699  011B                     	;# 
   700  011C                     	;# 
   701  011C                     	;# 
   702  011C                     	;# 
   703  011D                     	;# 
   704  011D                     	;# 
   705  011D                     	;# 
   706  011E                     	;# 
   707  011E                     	;# 
   708  011E                     	;# 
   709  011F                     	;# 
   710  011F                     	;# 
   711  011F                     	;# 
   712  011F                     	;# 
   713  011F                     	;# 
   714  018C                     	;# 
   715  018D                     	;# 
   716  018E                     	;# 
   717  018F                     	;# 
   718  0190                     	;# 
   719  0191                     	;# 
   720  0192                     	;# 
   721  0196                     	;# 
   722  0197                     	;# 
   723  0198                     	;# 
   724  0199                     	;# 
   725  019A                     	;# 
   726  019B                     	;# 
   727  019C                     	;# 
   728  020C                     	;# 
   729  020C                     	;# 
   730  020D                     	;# 
   731  020E                     	;# 
   732  020F                     	;# 
   733  020F                     	;# 
   734  0210                     	;# 
   735  0210                     	;# 
   736  0211                     	;# 
   737  0211                     	;# 
   738  0212                     	;# 
   739  0212                     	;# 
   740  0213                     	;# 
   741  0214                     	;# 
   742  0215                     	;# 
   743  0215                     	;# 
   744  0216                     	;# 
   745  0216                     	;# 
   746  0217                     	;# 
   747  0217                     	;# 
   748  0218                     	;# 
   749  0218                     	;# 
   750  0219                     	;# 
   751  021A                     	;# 
   752  021B                     	;# 
   753  021B                     	;# 
   754  021C                     	;# 
   755  021C                     	;# 
   756  021D                     	;# 
   757  021D                     	;# 
   758  021E                     	;# 
   759  021F                     	;# 
   760  028C                     	;# 
   761  028C                     	;# 
   762  028D                     	;# 
   763  028D                     	;# 
   764  028E                     	;# 
   765  028F                     	;# 
   766  0290                     	;# 
   767  0290                     	;# 
   768  0291                     	;# 
   769  0292                     	;# 
   770  0292                     	;# 
   771  0293                     	;# 
   772  0293                     	;# 
   773  0294                     	;# 
   774  0295                     	;# 
   775  0296                     	;# 
   776  0296                     	;# 
   777  0297                     	;# 
   778  0298                     	;# 
   779  0298                     	;# 
   780  0299                     	;# 
   781  0299                     	;# 
   782  029A                     	;# 
   783  029B                     	;# 
   784  029C                     	;# 
   785  029C                     	;# 
   786  029D                     	;# 
   787  030C                     	;# 
   788  030C                     	;# 
   789  030D                     	;# 
   790  030E                     	;# 
   791  030F                     	;# 
   792  0310                     	;# 
   793  0310                     	;# 
   794  0311                     	;# 
   795  0312                     	;# 
   796  0313                     	;# 
   797  0314                     	;# 
   798  0314                     	;# 
   799  0315                     	;# 
   800  0316                     	;# 
   801  0317                     	;# 
   802  0318                     	;# 
   803  0318                     	;# 
   804  0319                     	;# 
   805  031A                     	;# 
   806  031B                     	;# 
   807  031C                     	;# 
   808  031C                     	;# 
   809  031D                     	;# 
   810  031E                     	;# 
   811  031F                     	;# 
   812  038C                     	;# 
   813  038D                     	;# 
   814  038E                     	;# 
   815  0390                     	;# 
   816  0391                     	;# 
   817  0392                     	;# 
   818  040C                     	;# 
   819  040D                     	;# 
   820  040E                     	;# 
   821  040F                     	;# 
   822  0410                     	;# 
   823  0411                     	;# 
   824  0416                     	;# 
   825  0416                     	;# 
   826  0417                     	;# 
   827  0418                     	;# 
   828  0418                     	;# 
   829  0419                     	;# 
   830  041A                     	;# 
   831  041A                     	;# 
   832  041B                     	;# 
   833  041C                     	;# 
   834  041C                     	;# 
   835  041D                     	;# 
   836  041E                     	;# 
   837  041F                     	;# 
   838  048C                     	;# 
   839  048C                     	;# 
   840  048D                     	;# 
   841  048E                     	;# 
   842  048F                     	;# 
   843  048F                     	;# 
   844  0490                     	;# 
   845  0491                     	;# 
   846  0492                     	;# 
   847  0492                     	;# 
   848  0493                     	;# 
   849  0494                     	;# 
   850  0495                     	;# 
   851  0495                     	;# 
   852  0496                     	;# 
   853  0497                     	;# 
   854  0498                     	;# 
   855  0499                     	;# 
   856  049A                     	;# 
   857  049B                     	;# 
   858  049C                     	;# 
   859  049D                     	;# 
   860  050C                     	;# 
   861  050C                     	;# 
   862  050D                     	;# 
   863  050E                     	;# 
   864  050F                     	;# 
   865  050F                     	;# 
   866  0510                     	;# 
   867  0511                     	;# 
   868  0512                     	;# 
   869  0512                     	;# 
   870  0513                     	;# 
   871  0514                     	;# 
   872  0515                     	;# 
   873  0515                     	;# 
   874  0516                     	;# 
   875  0517                     	;# 
   876  0518                     	;# 
   877  0519                     	;# 
   878  051A                     	;# 
   879  051B                     	;# 
   880  051C                     	;# 
   881  051D                     	;# 
   882  058C                     	;# 
   883  058C                     	;# 
   884  058D                     	;# 
   885  058E                     	;# 
   886  058F                     	;# 
   887  058F                     	;# 
   888  0590                     	;# 
   889  0591                     	;# 
   890  0592                     	;# 
   891  0593                     	;# 
   892  060C                     	;# 
   893  060D                     	;# 
   894  060E                     	;# 
   895  060F                     	;# 
   896  0610                     	;# 
   897  0611                     	;# 
   898  0612                     	;# 
   899  0613                     	;# 
   900  0614                     	;# 
   901  0616                     	;# 
   902  0617                     	;# 
   903  0618                     	;# 
   904  0619                     	;# 
   905  061A                     	;# 
   906  061B                     	;# 
   907  061C                     	;# 
   908  061D                     	;# 
   909  061E                     	;# 
   910  068C                     	;# 
   911  068D                     	;# 
   912  068E                     	;# 
   913  068F                     	;# 
   914  0690                     	;# 
   915  0691                     	;# 
   916  0692                     	;# 
   917  0693                     	;# 
   918  0694                     	;# 
   919  070C                     	;# 
   920  070D                     	;# 
   921  070E                     	;# 
   922  070F                     	;# 
   923  0710                     	;# 
   924  0711                     	;# 
   925  0712                     	;# 
   926  0713                     	;# 
   927  0714                     	;# 
   928  0716                     	;# 
   929  0717                     	;# 
   930  0718                     	;# 
   931  0719                     	;# 
   932  071A                     	;# 
   933  071B                     	;# 
   934  071C                     	;# 
   935  071D                     	;# 
   936  071E                     	;# 
   937  0796                     	;# 
   938  0797                     	;# 
   939  0798                     	;# 
   940  0799                     	;# 
   941  079A                     	;# 
   942  079B                     	;# 
   943  080C                     	;# 
   944  080D                     	;# 
   945  080E                     	;# 
   946  080F                     	;# 
   947  0810                     	;# 
   948  0811                     	;# 
   949  0812                     	;# 
   950  0813                     	;# 
   951  0814                     	;# 
   952  081A                     	;# 
   953  081B                     	;# 
   954  081C                     	;# 
   955  081D                     	;# 
   956  081E                     	;# 
   957  081F                     	;# 
   958  088C                     	;# 
   959  088D                     	;# 
   960  088E                     	;# 
   961  088F                     	;# 
   962  0890                     	;# 
   963  0891                     	;# 
   964  0892                     	;# 
   965  0893                     	;# 
   966  0895                     	;# 
   967  0896                     	;# 
   968  0897                     	;# 
   969  0898                     	;# 
   970  0899                     	;# 
   971  089A                     	;# 
   972  089B                     	;# 
   973  090C                     	;# 
   974  090E                     	;# 
   975  090F                     	;# 
   976  091F                     	;# 
   977  091F                     	;# 
   978  098F                     	;# 
   979  098F                     	;# 
   980  0990                     	;# 
   981  0991                     	;# 
   982  0992                     	;# 
   983  0993                     	;# 
   984  0994                     	;# 
   985  0995                     	;# 
   986  0996                     	;# 
   987  0997                     	;# 
   988  0E0F                     	;# 
   989  0E10                     	;# 
   990  0E11                     	;# 
   991  0E12                     	;# 
   992  0E13                     	;# 
   993  0E14                     	;# 
   994  0E15                     	;# 
   995  0E16                     	;# 
   996  0E17                     	;# 
   997  0E18                     	;# 
   998  0E19                     	;# 
   999  0E1A                     	;# 
  1000  0E1B                     	;# 
  1001  0E1C                     	;# 
  1002  0E1D                     	;# 
  1003  0E1E                     	;# 
  1004  0E1F                     	;# 
  1005  0E20                     	;# 
  1006  0E21                     	;# 
  1007  0E22                     	;# 
  1008  0E23                     	;# 
  1009  0E24                     	;# 
  1010  0E25                     	;# 
  1011  0E26                     	;# 
  1012  0E27                     	;# 
  1013  0E28                     	;# 
  1014  0E29                     	;# 
  1015  0E2A                     	;# 
  1016  0E2B                     	;# 
  1017  0E2C                     	;# 
  1018  0E2D                     	;# 
  1019  0E2E                     	;# 
  1020  0E2F                     	;# 
  1021  0E30                     	;# 
  1022  0E31                     	;# 
  1023  0E32                     	;# 
  1024  0E33                     	;# 
  1025  0E34                     	;# 
  1026  0E35                     	;# 
  1027  0E36                     	;# 
  1028  0E37                     	;# 
  1029  0E8F                     	;# 
  1030  0E90                     	;# 
  1031  0E91                     	;# 
  1032  0E92                     	;# 
  1033  0E93                     	;# 
  1034  0E94                     	;# 
  1035  0E95                     	;# 
  1036  0E96                     	;# 
  1037  0E97                     	;# 
  1038  0E9C                     	;# 
  1039  0E9D                     	;# 
  1040  0E9E                     	;# 
  1041  0EA1                     	;# 
  1042  0EA2                     	;# 
  1043  0EA3                     	;# 
  1044  0EA4                     	;# 
  1045  0EA5                     	;# 
  1046  0EA9                     	;# 
  1047  0EAA                     	;# 
  1048  0EAB                     	;# 
  1049  0EAC                     	;# 
  1050  0EB1                     	;# 
  1051  0EB2                     	;# 
  1052  0EB3                     	;# 
  1053  0EB8                     	;# 
  1054  0EB9                     	;# 
  1055  0EBA                     	;# 
  1056  0EBB                     	;# 
  1057  0EBC                     	;# 
  1058  0EBD                     	;# 
  1059  0EBE                     	;# 
  1060  0EC3                     	;# 
  1061  0EC5                     	;# 
  1062  0EC6                     	;# 
  1063  0EC7                     	;# 
  1064  0EC8                     	;# 
  1065  0EC9                     	;# 
  1066  0ECA                     	;# 
  1067  0ECB                     	;# 
  1068  0ECC                     	;# 
  1069  0F10                     	;# 
  1070  0F11                     	;# 
  1071  0F12                     	;# 
  1072  0F13                     	;# 
  1073  0F14                     	;# 
  1074  0F15                     	;# 
  1075  0F16                     	;# 
  1076  0F17                     	;# 
  1077  0F18                     	;# 
  1078  0F19                     	;# 
  1079  0F1A                     	;# 
  1080  0F1B                     	;# 
  1081  0F1C                     	;# 
  1082  0F1D                     	;# 
  1083  0F1E                     	;# 
  1084  0F1F                     	;# 
  1085  0F20                     	;# 
  1086  0F21                     	;# 
  1087  0F22                     	;# 
  1088  0F23                     	;# 
  1089  0F24                     	;# 
  1090  0F25                     	;# 
  1091  0F26                     	;# 
  1092  0F27                     	;# 
  1093  0F38                     	;# 
  1094  0F39                     	;# 
  1095  0F3A                     	;# 
  1096  0F3B                     	;# 
  1097  0F3C                     	;# 
  1098  0F3D                     	;# 
  1099  0F3E                     	;# 
  1100  0F3F                     	;# 
  1101  0F40                     	;# 
  1102  0F41                     	;# 
  1103  0F43                     	;# 
  1104  0F44                     	;# 
  1105  0F45                     	;# 
  1106  0F46                     	;# 
  1107  0F47                     	;# 
  1108  0F48                     	;# 
  1109  0F49                     	;# 
  1110  0F4A                     	;# 
  1111  0F4B                     	;# 
  1112  0F4C                     	;# 
  1113  0F4E                     	;# 
  1114  0F4F                     	;# 
  1115  0F50                     	;# 
  1116  0F51                     	;# 
  1117  0F52                     	;# 
  1118  0F53                     	;# 
  1119  0F54                     	;# 
  1120  0F55                     	;# 
  1121  0F56                     	;# 
  1122  0F57                     	;# 
  1123  0F65                     	;# 
  1124  0F68                     	;# 
  1125  0F69                     	;# 
  1126  0F6A                     	;# 
  1127  0F6B                     	;# 
  1128  0FE4                     	;# 
  1129  0FE5                     	;# 
  1130  0FE6                     	;# 
  1131  0FE7                     	;# 
  1132  0FE8                     	;# 
  1133  0FE9                     	;# 
  1134  0FEA                     	;# 
  1135  0FEB                     	;# 
  1136  0FED                     	;# 
  1137  0FEE                     	;# 
  1138  0FEF                     	;# 
  1139  0000                     	;# 
  1140  0001                     	;# 
  1141  0002                     	;# 
  1142  0003                     	;# 
  1143  0004                     	;# 
  1144  0005                     	;# 
  1145  0006                     	;# 
  1146  0007                     	;# 
  1147  0008                     	;# 
  1148  0009                     	;# 
  1149  000A                     	;# 
  1150  000B                     	;# 
  1151  000C                     	;# 
  1152  000D                     	;# 
  1153  000E                     	;# 
  1154  0010                     	;# 
  1155  0011                     	;# 
  1156  0012                     	;# 
  1157  0013                     	;# 
  1158  0016                     	;# 
  1159  0017                     	;# 
  1160  0018                     	;# 
  1161  001C                     	;# 
  1162  001C                     	;# 
  1163  001D                     	;# 
  1164  001D                     	;# 
  1165  001E                     	;# 
  1166  001F                     	;# 
  1167  008C                     	;# 
  1168  008C                     	;# 
  1169  008D                     	;# 
  1170  008E                     	;# 
  1171  008E                     	;# 
  1172  008F                     	;# 
  1173  0090                     	;# 
  1174  0090                     	;# 
  1175  0091                     	;# 
  1176  0093                     	;# 
  1177  0094                     	;# 
  1178  0095                     	;# 
  1179  0096                     	;# 
  1180  0097                     	;# 
  1181  0098                     	;# 
  1182  0099                     	;# 
  1183  009A                     	;# 
  1184  009B                     	;# 
  1185  009C                     	;# 
  1186  009D                     	;# 
  1187  009E                     	;# 
  1188  010C                     	;# 
  1189  010D                     	;# 
  1190  010E                     	;# 
  1191  010E                     	;# 
  1192  010F                     	;# 
  1193  0110                     	;# 
  1194  0110                     	;# 
  1195  0111                     	;# 
  1196  0112                     	;# 
  1197  0112                     	;# 
  1198  0113                     	;# 
  1199  0114                     	;# 
  1200  0114                     	;# 
  1201  0115                     	;# 
  1202  0116                     	;# 
  1203  0116                     	;# 
  1204  0117                     	;# 
  1205  0119                     	;# 
  1206  0119                     	;# 
  1207  0119                     	;# 
  1208  011A                     	;# 
  1209  011A                     	;# 
  1210  011A                     	;# 
  1211  011B                     	;# 
  1212  011B                     	;# 
  1213  011B                     	;# 
  1214  011B                     	;# 
  1215  011B                     	;# 
  1216  011C                     	;# 
  1217  011C                     	;# 
  1218  011C                     	;# 
  1219  011D                     	;# 
  1220  011D                     	;# 
  1221  011D                     	;# 
  1222  011E                     	;# 
  1223  011E                     	;# 
  1224  011E                     	;# 
  1225  011F                     	;# 
  1226  011F                     	;# 
  1227  011F                     	;# 
  1228  011F                     	;# 
  1229  011F                     	;# 
  1230  018C                     	;# 
  1231  018D                     	;# 
  1232  018E                     	;# 
  1233  018F                     	;# 
  1234  0190                     	;# 
  1235  0191                     	;# 
  1236  0192                     	;# 
  1237  0196                     	;# 
  1238  0197                     	;# 
  1239  0198                     	;# 
  1240  0199                     	;# 
  1241  019A                     	;# 
  1242  019B                     	;# 
  1243  019C                     	;# 
  1244  020C                     	;# 
  1245  020C                     	;# 
  1246  020D                     	;# 
  1247  020E                     	;# 
  1248  020F                     	;# 
  1249  020F                     	;# 
  1250  0210                     	;# 
  1251  0210                     	;# 
  1252  0211                     	;# 
  1253  0211                     	;# 
  1254  0212                     	;# 
  1255  0212                     	;# 
  1256  0213                     	;# 
  1257  0214                     	;# 
  1258  0215                     	;# 
  1259  0215                     	;# 
  1260  0216                     	;# 
  1261  0216                     	;# 
  1262  0217                     	;# 
  1263  0217                     	;# 
  1264  0218                     	;# 
  1265  0218                     	;# 
  1266  0219                     	;# 
  1267  021A                     	;# 
  1268  021B                     	;# 
  1269  021B                     	;# 
  1270  021C                     	;# 
  1271  021C                     	;# 
  1272  021D                     	;# 
  1273  021D                     	;# 
  1274  021E                     	;# 
  1275  021F                     	;# 
  1276  028C                     	;# 
  1277  028C                     	;# 
  1278  028D                     	;# 
  1279  028D                     	;# 
  1280  028E                     	;# 
  1281  028F                     	;# 
  1282  0290                     	;# 
  1283  0290                     	;# 
  1284  0291                     	;# 
  1285  0292                     	;# 
  1286  0292                     	;# 
  1287  0293                     	;# 
  1288  0293                     	;# 
  1289  0294                     	;# 
  1290  0295                     	;# 
  1291  0296                     	;# 
  1292  0296                     	;# 
  1293  0297                     	;# 
  1294  0298                     	;# 
  1295  0298                     	;# 
  1296  0299                     	;# 
  1297  0299                     	;# 
  1298  029A                     	;# 
  1299  029B                     	;# 
  1300  029C                     	;# 
  1301  029C                     	;# 
  1302  029D                     	;# 
  1303  030C                     	;# 
  1304  030C                     	;# 
  1305  030D                     	;# 
  1306  030E                     	;# 
  1307  030F                     	;# 
  1308  0310                     	;# 
  1309  0310                     	;# 
  1310  0311                     	;# 
  1311  0312                     	;# 
  1312  0313                     	;# 
  1313  0314                     	;# 
  1314  0314                     	;# 
  1315  0315                     	;# 
  1316  0316                     	;# 
  1317  0317                     	;# 
  1318  0318                     	;# 
  1319  0318                     	;# 
  1320  0319                     	;# 
  1321  031A                     	;# 
  1322  031B                     	;# 
  1323  031C                     	;# 
  1324  031C                     	;# 
  1325  031D                     	;# 
  1326  031E                     	;# 
  1327  031F                     	;# 
  1328  038C                     	;# 
  1329  038D                     	;# 
  1330  038E                     	;# 
  1331  0390                     	;# 
  1332  0391                     	;# 
  1333  0392                     	;# 
  1334  040C                     	;# 
  1335  040D                     	;# 
  1336  040E                     	;# 
  1337  040F                     	;# 
  1338  0410                     	;# 
  1339  0411                     	;# 
  1340  0416                     	;# 
  1341  0416                     	;# 
  1342  0417                     	;# 
  1343  0418                     	;# 
  1344  0418                     	;# 
  1345  0419                     	;# 
  1346  041A                     	;# 
  1347  041A                     	;# 
  1348  041B                     	;# 
  1349  041C                     	;# 
  1350  041C                     	;# 
  1351  041D                     	;# 
  1352  041E                     	;# 
  1353  041F                     	;# 
  1354  048C                     	;# 
  1355  048C                     	;# 
  1356  048D                     	;# 
  1357  048E                     	;# 
  1358  048F                     	;# 
  1359  048F                     	;# 
  1360  0490                     	;# 
  1361  0491                     	;# 
  1362  0492                     	;# 
  1363  0492                     	;# 
  1364  0493                     	;# 
  1365  0494                     	;# 
  1366  0495                     	;# 
  1367  0495                     	;# 
  1368  0496                     	;# 
  1369  0497                     	;# 
  1370  0498                     	;# 
  1371  0499                     	;# 
  1372  049A                     	;# 
  1373  049B                     	;# 
  1374  049C                     	;# 
  1375  049D                     	;# 
  1376  050C                     	;# 
  1377  050C                     	;# 
  1378  050D                     	;# 
  1379  050E                     	;# 
  1380  050F                     	;# 
  1381  050F                     	;# 
  1382  0510                     	;# 
  1383  0511                     	;# 
  1384  0512                     	;# 
  1385  0512                     	;# 
  1386  0513                     	;# 
  1387  0514                     	;# 
  1388  0515                     	;# 
  1389  0515                     	;# 
  1390  0516                     	;# 
  1391  0517                     	;# 
  1392  0518                     	;# 
  1393  0519                     	;# 
  1394  051A                     	;# 
  1395  051B                     	;# 
  1396  051C                     	;# 
  1397  051D                     	;# 
  1398  058C                     	;# 
  1399  058C                     	;# 
  1400  058D                     	;# 
  1401  058E                     	;# 
  1402  058F                     	;# 
  1403  058F                     	;# 
  1404  0590                     	;# 
  1405  0591                     	;# 
  1406  0592                     	;# 
  1407  0593                     	;# 
  1408  060C                     	;# 
  1409  060D                     	;# 
  1410  060E                     	;# 
  1411  060F                     	;# 
  1412  0610                     	;# 
  1413  0611                     	;# 
  1414  0612                     	;# 
  1415  0613                     	;# 
  1416  0614                     	;# 
  1417  0616                     	;# 
  1418  0617                     	;# 
  1419  0618                     	;# 
  1420  0619                     	;# 
  1421  061A                     	;# 
  1422  061B                     	;# 
  1423  061C                     	;# 
  1424  061D                     	;# 
  1425  061E                     	;# 
  1426  068C                     	;# 
  1427  068D                     	;# 
  1428  068E                     	;# 
  1429  068F                     	;# 
  1430  0690                     	;# 
  1431  0691                     	;# 
  1432  0692                     	;# 
  1433  0693                     	;# 
  1434  0694                     	;# 
  1435  070C                     	;# 
  1436  070D                     	;# 
  1437  070E                     	;# 
  1438  070F                     	;# 
  1439  0710                     	;# 
  1440  0711                     	;# 
  1441  0712                     	;# 
  1442  0713                     	;# 
  1443  0714                     	;# 
  1444  0716                     	;# 
  1445  0717                     	;# 
  1446  0718                     	;# 
  1447  0719                     	;# 
  1448  071A                     	;# 
  1449  071B                     	;# 
  1450  071C                     	;# 
  1451  071D                     	;# 
  1452  071E                     	;# 
  1453  0796                     	;# 
  1454  0797                     	;# 
  1455  0798                     	;# 
  1456  0799                     	;# 
  1457  079A                     	;# 
  1458  079B                     	;# 
  1459  080C                     	;# 
  1460  080D                     	;# 
  1461  080E                     	;# 
  1462  080F                     	;# 
  1463  0810                     	;# 
  1464  0811                     	;# 
  1465  0812                     	;# 
  1466  0813                     	;# 
  1467  0814                     	;# 
  1468  081A                     	;# 
  1469  081B                     	;# 
  1470  081C                     	;# 
  1471  081D                     	;# 
  1472  081E                     	;# 
  1473  081F                     	;# 
  1474  088C                     	;# 
  1475  088D                     	;# 
  1476  088E                     	;# 
  1477  088F                     	;# 
  1478  0890                     	;# 
  1479  0891                     	;# 
  1480  0892                     	;# 
  1481  0893                     	;# 
  1482  0895                     	;# 
  1483  0896                     	;# 
  1484  0897                     	;# 
  1485  0898                     	;# 
  1486  0899                     	;# 
  1487  089A                     	;# 
  1488  089B                     	;# 
  1489  090C                     	;# 
  1490  090E                     	;# 
  1491  090F                     	;# 
  1492  091F                     	;# 
  1493  091F                     	;# 
  1494  098F                     	;# 
  1495  098F                     	;# 
  1496  0990                     	;# 
  1497  0991                     	;# 
  1498  0992                     	;# 
  1499  0993                     	;# 
  1500  0994                     	;# 
  1501  0995                     	;# 
  1502  0996                     	;# 
  1503  0997                     	;# 
  1504  0E0F                     	;# 
  1505  0E10                     	;# 
  1506  0E11                     	;# 
  1507  0E12                     	;# 
  1508  0E13                     	;# 
  1509  0E14                     	;# 
  1510  0E15                     	;# 
  1511  0E16                     	;# 
  1512  0E17                     	;# 
  1513  0E18                     	;# 
  1514  0E19                     	;# 
  1515  0E1A                     	;# 
  1516  0E1B                     	;# 
  1517  0E1C                     	;# 
  1518  0E1D                     	;# 
  1519  0E1E                     	;# 
  1520  0E1F                     	;# 
  1521  0E20                     	;# 
  1522  0E21                     	;# 
  1523  0E22                     	;# 
  1524  0E23                     	;# 
  1525  0E24                     	;# 
  1526  0E25                     	;# 
  1527  0E26                     	;# 
  1528  0E27                     	;# 
  1529  0E28                     	;# 
  1530  0E29                     	;# 
  1531  0E2A                     	;# 
  1532  0E2B                     	;# 
  1533  0E2C                     	;# 
  1534  0E2D                     	;# 
  1535  0E2E                     	;# 
  1536  0E2F                     	;# 
  1537  0E30                     	;# 
  1538  0E31                     	;# 
  1539  0E32                     	;# 
  1540  0E33                     	;# 
  1541  0E34                     	;# 
  1542  0E35                     	;# 
  1543  0E36                     	;# 
  1544  0E37                     	;# 
  1545  0E8F                     	;# 
  1546  0E90                     	;# 
  1547  0E91                     	;# 
  1548  0E92                     	;# 
  1549  0E93                     	;# 
  1550  0E94                     	;# 
  1551  0E95                     	;# 
  1552  0E96                     	;# 
  1553  0E97                     	;# 
  1554  0E9C                     	;# 
  1555  0E9D                     	;# 
  1556  0E9E                     	;# 
  1557  0EA1                     	;# 
  1558  0EA2                     	;# 
  1559  0EA3                     	;# 
  1560  0EA4                     	;# 
  1561  0EA5                     	;# 
  1562  0EA9                     	;# 
  1563  0EAA                     	;# 
  1564  0EAB                     	;# 
  1565  0EAC                     	;# 
  1566  0EB1                     	;# 
  1567  0EB2                     	;# 
  1568  0EB3                     	;# 
  1569  0EB8                     	;# 
  1570  0EB9                     	;# 
  1571  0EBA                     	;# 
  1572  0EBB                     	;# 
  1573  0EBC                     	;# 
  1574  0EBD                     	;# 
  1575  0EBE                     	;# 
  1576  0EC3                     	;# 
  1577  0EC5                     	;# 
  1578  0EC6                     	;# 
  1579  0EC7                     	;# 
  1580  0EC8                     	;# 
  1581  0EC9                     	;# 
  1582  0ECA                     	;# 
  1583  0ECB                     	;# 
  1584  0ECC                     	;# 
  1585  0F10                     	;# 
  1586  0F11                     	;# 
  1587  0F12                     	;# 
  1588  0F13                     	;# 
  1589  0F14                     	;# 
  1590  0F15                     	;# 
  1591  0F16                     	;# 
  1592  0F17                     	;# 
  1593  0F18                     	;# 
  1594  0F19                     	;# 
  1595  0F1A                     	;# 
  1596  0F1B                     	;# 
  1597  0F1C                     	;# 
  1598  0F1D                     	;# 
  1599  0F1E                     	;# 
  1600  0F1F                     	;# 
  1601  0F20                     	;# 
  1602  0F21                     	;# 
  1603  0F22                     	;# 
  1604  0F23                     	;# 
  1605  0F24                     	;# 
  1606  0F25                     	;# 
  1607  0F26                     	;# 
  1608  0F27                     	;# 
  1609  0F38                     	;# 
  1610  0F39                     	;# 
  1611  0F3A                     	;# 
  1612  0F3B                     	;# 
  1613  0F3C                     	;# 
  1614  0F3D                     	;# 
  1615  0F3E                     	;# 
  1616  0F3F                     	;# 
  1617  0F40                     	;# 
  1618  0F41                     	;# 
  1619  0F43                     	;# 
  1620  0F44                     	;# 
  1621  0F45                     	;# 
  1622  0F46                     	;# 
  1623  0F47                     	;# 
  1624  0F48                     	;# 
  1625  0F49                     	;# 
  1626  0F4A                     	;# 
  1627  0F4B                     	;# 
  1628  0F4C                     	;# 
  1629  0F4E                     	;# 
  1630  0F4F                     	;# 
  1631  0F50                     	;# 
  1632  0F51                     	;# 
  1633  0F52                     	;# 
  1634  0F53                     	;# 
  1635  0F54                     	;# 
  1636  0F55                     	;# 
  1637  0F56                     	;# 
  1638  0F57                     	;# 
  1639  0F65                     	;# 
  1640  0F68                     	;# 
  1641  0F69                     	;# 
  1642  0F6A                     	;# 
  1643  0F6B                     	;# 
  1644  0FE4                     	;# 
  1645  0FE5                     	;# 
  1646  0FE6                     	;# 
  1647  0FE7                     	;# 
  1648  0FE8                     	;# 
  1649  0FE9                     	;# 
  1650  0FEA                     	;# 
  1651  0FEB                     	;# 
  1652  0FED                     	;# 
  1653  0FEE                     	;# 
  1654  0FEF                     	;# 
  1655  0000                     	;# 
  1656  0001                     	;# 
  1657  0002                     	;# 
  1658  0003                     	;# 
  1659  0004                     	;# 
  1660  0005                     	;# 
  1661  0006                     	;# 
  1662  0007                     	;# 
  1663  0008                     	;# 
  1664  0009                     	;# 
  1665  000A                     	;# 
  1666  000B                     	;# 
  1667  000C                     	;# 
  1668  000D                     	;# 
  1669  000E                     	;# 
  1670  0010                     	;# 
  1671  0011                     	;# 
  1672  0012                     	;# 
  1673  0013                     	;# 
  1674  0016                     	;# 
  1675  0017                     	;# 
  1676  0018                     	;# 
  1677  001C                     	;# 
  1678  001C                     	;# 
  1679  001D                     	;# 
  1680  001D                     	;# 
  1681  001E                     	;# 
  1682  001F                     	;# 
  1683  008C                     	;# 
  1684  008C                     	;# 
  1685  008D                     	;# 
  1686  008E                     	;# 
  1687  008E                     	;# 
  1688  008F                     	;# 
  1689  0090                     	;# 
  1690  0090                     	;# 
  1691  0091                     	;# 
  1692  0093                     	;# 
  1693  0094                     	;# 
  1694  0095                     	;# 
  1695  0096                     	;# 
  1696  0097                     	;# 
  1697  0098                     	;# 
  1698  0099                     	;# 
  1699  009A                     	;# 
  1700  009B                     	;# 
  1701  009C                     	;# 
  1702  009D                     	;# 
  1703  009E                     	;# 
  1704  010C                     	;# 
  1705  010D                     	;# 
  1706  010E                     	;# 
  1707  010E                     	;# 
  1708  010F                     	;# 
  1709  0110                     	;# 
  1710  0110                     	;# 
  1711  0111                     	;# 
  1712  0112                     	;# 
  1713  0112                     	;# 
  1714  0113                     	;# 
  1715  0114                     	;# 
  1716  0114                     	;# 
  1717  0115                     	;# 
  1718  0116                     	;# 
  1719  0116                     	;# 
  1720  0117                     	;# 
  1721  0119                     	;# 
  1722  0119                     	;# 
  1723  0119                     	;# 
  1724  011A                     	;# 
  1725  011A                     	;# 
  1726  011A                     	;# 
  1727  011B                     	;# 
  1728  011B                     	;# 
  1729  011B                     	;# 
  1730  011B                     	;# 
  1731  011B                     	;# 
  1732  011C                     	;# 
  1733  011C                     	;# 
  1734  011C                     	;# 
  1735  011D                     	;# 
  1736  011D                     	;# 
  1737  011D                     	;# 
  1738  011E                     	;# 
  1739  011E                     	;# 
  1740  011E                     	;# 
  1741  011F                     	;# 
  1742  011F                     	;# 
  1743  011F                     	;# 
  1744  011F                     	;# 
  1745  011F                     	;# 
  1746  018C                     	;# 
  1747  018D                     	;# 
  1748  018E                     	;# 
  1749  018F                     	;# 
  1750  0190                     	;# 
  1751  0191                     	;# 
  1752  0192                     	;# 
  1753  0196                     	;# 
  1754  0197                     	;# 
  1755  0198                     	;# 
  1756  0199                     	;# 
  1757  019A                     	;# 
  1758  019B                     	;# 
  1759  019C                     	;# 
  1760  020C                     	;# 
  1761  020C                     	;# 
  1762  020D                     	;# 
  1763  020E                     	;# 
  1764  020F                     	;# 
  1765  020F                     	;# 
  1766  0210                     	;# 
  1767  0210                     	;# 
  1768  0211                     	;# 
  1769  0211                     	;# 
  1770  0212                     	;# 
  1771  0212                     	;# 
  1772  0213                     	;# 
  1773  0214                     	;# 
  1774  0215                     	;# 
  1775  0215                     	;# 
  1776  0216                     	;# 
  1777  0216                     	;# 
  1778  0217                     	;# 
  1779  0217                     	;# 
  1780  0218                     	;# 
  1781  0218                     	;# 
  1782  0219                     	;# 
  1783  021A                     	;# 
  1784  021B                     	;# 
  1785  021B                     	;# 
  1786  021C                     	;# 
  1787  021C                     	;# 
  1788  021D                     	;# 
  1789  021D                     	;# 
  1790  021E                     	;# 
  1791  021F                     	;# 
  1792  028C                     	;# 
  1793  028C                     	;# 
  1794  028D                     	;# 
  1795  028D                     	;# 
  1796  028E                     	;# 
  1797  028F                     	;# 
  1798  0290                     	;# 
  1799  0290                     	;# 
  1800  0291                     	;# 
  1801  0292                     	;# 
  1802  0292                     	;# 
  1803  0293                     	;# 
  1804  0293                     	;# 
  1805  0294                     	;# 
  1806  0295                     	;# 
  1807  0296                     	;# 
  1808  0296                     	;# 
  1809  0297                     	;# 
  1810  0298                     	;# 
  1811  0298                     	;# 
  1812  0299                     	;# 
  1813  0299                     	;# 
  1814  029A                     	;# 
  1815  029B                     	;# 
  1816  029C                     	;# 
  1817  029C                     	;# 
  1818  029D                     	;# 
  1819  030C                     	;# 
  1820  030C                     	;# 
  1821  030D                     	;# 
  1822  030E                     	;# 
  1823  030F                     	;# 
  1824  0310                     	;# 
  1825  0310                     	;# 
  1826  0311                     	;# 
  1827  0312                     	;# 
  1828  0313                     	;# 
  1829  0314                     	;# 
  1830  0314                     	;# 
  1831  0315                     	;# 
  1832  0316                     	;# 
  1833  0317                     	;# 
  1834  0318                     	;# 
  1835  0318                     	;# 
  1836  0319                     	;# 
  1837  031A                     	;# 
  1838  031B                     	;# 
  1839  031C                     	;# 
  1840  031C                     	;# 
  1841  031D                     	;# 
  1842  031E                     	;# 
  1843  031F                     	;# 
  1844  038C                     	;# 
  1845  038D                     	;# 
  1846  038E                     	;# 
  1847  0390                     	;# 
  1848  0391                     	;# 
  1849  0392                     	;# 
  1850  040C                     	;# 
  1851  040D                     	;# 
  1852  040E                     	;# 
  1853  040F                     	;# 
  1854  0410                     	;# 
  1855  0411                     	;# 
  1856  0416                     	;# 
  1857  0416                     	;# 
  1858  0417                     	;# 
  1859  0418                     	;# 
  1860  0418                     	;# 
  1861  0419                     	;# 
  1862  041A                     	;# 
  1863  041A                     	;# 
  1864  041B                     	;# 
  1865  041C                     	;# 
  1866  041C                     	;# 
  1867  041D                     	;# 
  1868  041E                     	;# 
  1869  041F                     	;# 
  1870  048C                     	;# 
  1871  048C                     	;# 
  1872  048D                     	;# 
  1873  048E                     	;# 
  1874  048F                     	;# 
  1875  048F                     	;# 
  1876  0490                     	;# 
  1877  0491                     	;# 
  1878  0492                     	;# 
  1879  0492                     	;# 
  1880  0493                     	;# 
  1881  0494                     	;# 
  1882  0495                     	;# 
  1883  0495                     	;# 
  1884  0496                     	;# 
  1885  0497                     	;# 
  1886  0498                     	;# 
  1887  0499                     	;# 
  1888  049A                     	;# 
  1889  049B                     	;# 
  1890  049C                     	;# 
  1891  049D                     	;# 
  1892  050C                     	;# 
  1893  050C                     	;# 
  1894  050D                     	;# 
  1895  050E                     	;# 
  1896  050F                     	;# 
  1897  050F                     	;# 
  1898  0510                     	;# 
  1899  0511                     	;# 
  1900  0512                     	;# 
  1901  0512                     	;# 
  1902  0513                     	;# 
  1903  0514                     	;# 
  1904  0515                     	;# 
  1905  0515                     	;# 
  1906  0516                     	;# 
  1907  0517                     	;# 
  1908  0518                     	;# 
  1909  0519                     	;# 
  1910  051A                     	;# 
  1911  051B                     	;# 
  1912  051C                     	;# 
  1913  051D                     	;# 
  1914  058C                     	;# 
  1915  058C                     	;# 
  1916  058D                     	;# 
  1917  058E                     	;# 
  1918  058F                     	;# 
  1919  058F                     	;# 
  1920  0590                     	;# 
  1921  0591                     	;# 
  1922  0592                     	;# 
  1923  0593                     	;# 
  1924  060C                     	;# 
  1925  060D                     	;# 
  1926  060E                     	;# 
  1927  060F                     	;# 
  1928  0610                     	;# 
  1929  0611                     	;# 
  1930  0612                     	;# 
  1931  0613                     	;# 
  1932  0614                     	;# 
  1933  0616                     	;# 
  1934  0617                     	;# 
  1935  0618                     	;# 
  1936  0619                     	;# 
  1937  061A                     	;# 
  1938  061B                     	;# 
  1939  061C                     	;# 
  1940  061D                     	;# 
  1941  061E                     	;# 
  1942  068C                     	;# 
  1943  068D                     	;# 
  1944  068E                     	;# 
  1945  068F                     	;# 
  1946  0690                     	;# 
  1947  0691                     	;# 
  1948  0692                     	;# 
  1949  0693                     	;# 
  1950  0694                     	;# 
  1951  070C                     	;# 
  1952  070D                     	;# 
  1953  070E                     	;# 
  1954  070F                     	;# 
  1955  0710                     	;# 
  1956  0711                     	;# 
  1957  0712                     	;# 
  1958  0713                     	;# 
  1959  0714                     	;# 
  1960  0716                     	;# 
  1961  0717                     	;# 
  1962  0718                     	;# 
  1963  0719                     	;# 
  1964  071A                     	;# 
  1965  071B                     	;# 
  1966  071C                     	;# 
  1967  071D                     	;# 
  1968  071E                     	;# 
  1969  0796                     	;# 
  1970  0797                     	;# 
  1971  0798                     	;# 
  1972  0799                     	;# 
  1973  079A                     	;# 
  1974  079B                     	;# 
  1975  080C                     	;# 
  1976  080D                     	;# 
  1977  080E                     	;# 
  1978  080F                     	;# 
  1979  0810                     	;# 
  1980  0811                     	;# 
  1981  0812                     	;# 
  1982  0813                     	;# 
  1983  0814                     	;# 
  1984  081A                     	;# 
  1985  081B                     	;# 
  1986  081C                     	;# 
  1987  081D                     	;# 
  1988  081E                     	;# 
  1989  081F                     	;# 
  1990  088C                     	;# 
  1991  088D                     	;# 
  1992  088E                     	;# 
  1993  088F                     	;# 
  1994  0890                     	;# 
  1995  0891                     	;# 
  1996  0892                     	;# 
  1997  0893                     	;# 
  1998  0895                     	;# 
  1999  0896                     	;# 
  2000  0897                     	;# 
  2001  0898                     	;# 
  2002  0899                     	;# 
  2003  089A                     	;# 
  2004  089B                     	;# 
  2005  090C                     	;# 
  2006  090E                     	;# 
  2007  090F                     	;# 
  2008  091F                     	;# 
  2009  091F                     	;# 
  2010  098F                     	;# 
  2011  098F                     	;# 
  2012  0990                     	;# 
  2013  0991                     	;# 
  2014  0992                     	;# 
  2015  0993                     	;# 
  2016  0994                     	;# 
  2017  0995                     	;# 
  2018  0996                     	;# 
  2019  0997                     	;# 
  2020  0E0F                     	;# 
  2021  0E10                     	;# 
  2022  0E11                     	;# 
  2023  0E12                     	;# 
  2024  0E13                     	;# 
  2025  0E14                     	;# 
  2026  0E15                     	;# 
  2027  0E16                     	;# 
  2028  0E17                     	;# 
  2029  0E18                     	;# 
  2030  0E19                     	;# 
  2031  0E1A                     	;# 
  2032  0E1B                     	;# 
  2033  0E1C                     	;# 
  2034  0E1D                     	;# 
  2035  0E1E                     	;# 
  2036  0E1F                     	;# 
  2037  0E20                     	;# 
  2038  0E21                     	;# 
  2039  0E22                     	;# 
  2040  0E23                     	;# 
  2041  0E24                     	;# 
  2042  0E25                     	;# 
  2043  0E26                     	;# 
  2044  0E27                     	;# 
  2045  0E28                     	;# 
  2046  0E29                     	;# 
  2047  0E2A                     	;# 
  2048  0E2B                     	;# 
  2049  0E2C                     	;# 
  2050  0E2D                     	;# 
  2051  0E2E                     	;# 
  2052  0E2F                     	;# 
  2053  0E30                     	;# 
  2054  0E31                     	;# 
  2055  0E32                     	;# 
  2056  0E33                     	;# 
  2057  0E34                     	;# 
  2058  0E35                     	;# 
  2059  0E36                     	;# 
  2060  0E37                     	;# 
  2061  0E8F                     	;# 
  2062  0E90                     	;# 
  2063  0E91                     	;# 
  2064  0E92                     	;# 
  2065  0E93                     	;# 
  2066  0E94                     	;# 
  2067  0E95                     	;# 
  2068  0E96                     	;# 
  2069  0E97                     	;# 
  2070  0E9C                     	;# 
  2071  0E9D                     	;# 
  2072  0E9E                     	;# 
  2073  0EA1                     	;# 
  2074  0EA2                     	;# 
  2075  0EA3                     	;# 
  2076  0EA4                     	;# 
  2077  0EA5                     	;# 
  2078  0EA9                     	;# 
  2079  0EAA                     	;# 
  2080  0EAB                     	;# 
  2081  0EAC                     	;# 
  2082  0EB1                     	;# 
  2083  0EB2                     	;# 
  2084  0EB3                     	;# 
  2085  0EB8                     	;# 
  2086  0EB9                     	;# 
  2087  0EBA                     	;# 
  2088  0EBB                     	;# 
  2089  0EBC                     	;# 
  2090  0EBD                     	;# 
  2091  0EBE                     	;# 
  2092  0EC3                     	;# 
  2093  0EC5                     	;# 
  2094  0EC6                     	;# 
  2095  0EC7                     	;# 
  2096  0EC8                     	;# 
  2097  0EC9                     	;# 
  2098  0ECA                     	;# 
  2099  0ECB                     	;# 
  2100  0ECC                     	;# 
  2101  0F10                     	;# 
  2102  0F11                     	;# 
  2103  0F12                     	;# 
  2104  0F13                     	;# 
  2105  0F14                     	;# 
  2106  0F15                     	;# 
  2107  0F16                     	;# 
  2108  0F17                     	;# 
  2109  0F18                     	;# 
  2110  0F19                     	;# 
  2111  0F1A                     	;# 
  2112  0F1B                     	;# 
  2113  0F1C                     	;# 
  2114  0F1D                     	;# 
  2115  0F1E                     	;# 
  2116  0F1F                     	;# 
  2117  0F20                     	;# 
  2118  0F21                     	;# 
  2119  0F22                     	;# 
  2120  0F23                     	;# 
  2121  0F24                     	;# 
  2122  0F25                     	;# 
  2123  0F26                     	;# 
  2124  0F27                     	;# 
  2125  0F38                     	;# 
  2126  0F39                     	;# 
  2127  0F3A                     	;# 
  2128  0F3B                     	;# 
  2129  0F3C                     	;# 
  2130  0F3D                     	;# 
  2131  0F3E                     	;# 
  2132  0F3F                     	;# 
  2133  0F40                     	;# 
  2134  0F41                     	;# 
  2135  0F43                     	;# 
  2136  0F44                     	;# 
  2137  0F45                     	;# 
  2138  0F46                     	;# 
  2139  0F47                     	;# 
  2140  0F48                     	;# 
  2141  0F49                     	;# 
  2142  0F4A                     	;# 
  2143  0F4B                     	;# 
  2144  0F4C                     	;# 
  2145  0F4E                     	;# 
  2146  0F4F                     	;# 
  2147  0F50                     	;# 
  2148  0F51                     	;# 
  2149  0F52                     	;# 
  2150  0F53                     	;# 
  2151  0F54                     	;# 
  2152  0F55                     	;# 
  2153  0F56                     	;# 
  2154  0F57                     	;# 
  2155  0F65                     	;# 
  2156  0F68                     	;# 
  2157  0F69                     	;# 
  2158  0F6A                     	;# 
  2159  0F6B                     	;# 
  2160  0FE4                     	;# 
  2161  0FE5                     	;# 
  2162  0FE6                     	;# 
  2163  0FE7                     	;# 
  2164  0FE8                     	;# 
  2165  0FE9                     	;# 
  2166  0FEA                     	;# 
  2167  0FEB                     	;# 
  2168  0FED                     	;# 
  2169  0FEE                     	;# 
  2170  0FEF                     	;# 
  2171  0000                     	;# 
  2172  0001                     	;# 
  2173  0002                     	;# 
  2174  0003                     	;# 
  2175  0004                     	;# 
  2176  0005                     	;# 
  2177  0006                     	;# 
  2178  0007                     	;# 
  2179  0008                     	;# 
  2180  0009                     	;# 
  2181  000A                     	;# 
  2182  000B                     	;# 
  2183  000C                     	;# 
  2184  000D                     	;# 
  2185  000E                     	;# 
  2186  0010                     	;# 
  2187  0011                     	;# 
  2188  0012                     	;# 
  2189  0013                     	;# 
  2190  0016                     	;# 
  2191  0017                     	;# 
  2192  0018                     	;# 
  2193  001C                     	;# 
  2194  001C                     	;# 
  2195  001D                     	;# 
  2196  001D                     	;# 
  2197  001E                     	;# 
  2198  001F                     	;# 
  2199  008C                     	;# 
  2200  008C                     	;# 
  2201  008D                     	;# 
  2202  008E                     	;# 
  2203  008E                     	;# 
  2204  008F                     	;# 
  2205  0090                     	;# 
  2206  0090                     	;# 
  2207  0091                     	;# 
  2208  0093                     	;# 
  2209  0094                     	;# 
  2210  0095                     	;# 
  2211  0096                     	;# 
  2212  0097                     	;# 
  2213  0098                     	;# 
  2214  0099                     	;# 
  2215  009A                     	;# 
  2216  009B                     	;# 
  2217  009C                     	;# 
  2218  009D                     	;# 
  2219  009E                     	;# 
  2220  010C                     	;# 
  2221  010D                     	;# 
  2222  010E                     	;# 
  2223  010E                     	;# 
  2224  010F                     	;# 
  2225  0110                     	;# 
  2226  0110                     	;# 
  2227  0111                     	;# 
  2228  0112                     	;# 
  2229  0112                     	;# 
  2230  0113                     	;# 
  2231  0114                     	;# 
  2232  0114                     	;# 
  2233  0115                     	;# 
  2234  0116                     	;# 
  2235  0116                     	;# 
  2236  0117                     	;# 
  2237  0119                     	;# 
  2238  0119                     	;# 
  2239  0119                     	;# 
  2240  011A                     	;# 
  2241  011A                     	;# 
  2242  011A                     	;# 
  2243  011B                     	;# 
  2244  011B                     	;# 
  2245  011B                     	;# 
  2246  011B                     	;# 
  2247  011B                     	;# 
  2248  011C                     	;# 
  2249  011C                     	;# 
  2250  011C                     	;# 
  2251  011D                     	;# 
  2252  011D                     	;# 
  2253  011D                     	;# 
  2254  011E                     	;# 
  2255  011E                     	;# 
  2256  011E                     	;# 
  2257  011F                     	;# 
  2258  011F                     	;# 
  2259  011F                     	;# 
  2260  011F                     	;# 
  2261  011F                     	;# 
  2262  018C                     	;# 
  2263  018D                     	;# 
  2264  018E                     	;# 
  2265  018F                     	;# 
  2266  0190                     	;# 
  2267  0191                     	;# 
  2268  0192                     	;# 
  2269  0196                     	;# 
  2270  0197                     	;# 
  2271  0198                     	;# 
  2272  0199                     	;# 
  2273  019A                     	;# 
  2274  019B                     	;# 
  2275  019C                     	;# 
  2276  020C                     	;# 
  2277  020C                     	;# 
  2278  020D                     	;# 
  2279  020E                     	;# 
  2280  020F                     	;# 
  2281  020F                     	;# 
  2282  0210                     	;# 
  2283  0210                     	;# 
  2284  0211                     	;# 
  2285  0211                     	;# 
  2286  0212                     	;# 
  2287  0212                     	;# 
  2288  0213                     	;# 
  2289  0214                     	;# 
  2290  0215                     	;# 
  2291  0215                     	;# 
  2292  0216                     	;# 
  2293  0216                     	;# 
  2294  0217                     	;# 
  2295  0217                     	;# 
  2296  0218                     	;# 
  2297  0218                     	;# 
  2298  0219                     	;# 
  2299  021A                     	;# 
  2300  021B                     	;# 
  2301  021B                     	;# 
  2302  021C                     	;# 
  2303  021C                     	;# 
  2304  021D                     	;# 
  2305  021D                     	;# 
  2306  021E                     	;# 
  2307  021F                     	;# 
  2308  028C                     	;# 
  2309  028C                     	;# 
  2310  028D                     	;# 
  2311  028D                     	;# 
  2312  028E                     	;# 
  2313  028F                     	;# 
  2314  0290                     	;# 
  2315  0290                     	;# 
  2316  0291                     	;# 
  2317  0292                     	;# 
  2318  0292                     	;# 
  2319  0293                     	;# 
  2320  0293                     	;# 
  2321  0294                     	;# 
  2322  0295                     	;# 
  2323  0296                     	;# 
  2324  0296                     	;# 
  2325  0297                     	;# 
  2326  0298                     	;# 
  2327  0298                     	;# 
  2328  0299                     	;# 
  2329  0299                     	;# 
  2330  029A                     	;# 
  2331  029B                     	;# 
  2332  029C                     	;# 
  2333  029C                     	;# 
  2334  029D                     	;# 
  2335  030C                     	;# 
  2336  030C                     	;# 
  2337  030D                     	;# 
  2338  030E                     	;# 
  2339  030F                     	;# 
  2340  0310                     	;# 
  2341  0310                     	;# 
  2342  0311                     	;# 
  2343  0312                     	;# 
  2344  0313                     	;# 
  2345  0314                     	;# 
  2346  0314                     	;# 
  2347  0315                     	;# 
  2348  0316                     	;# 
  2349  0317                     	;# 
  2350  0318                     	;# 
  2351  0318                     	;# 
  2352  0319                     	;# 
  2353  031A                     	;# 
  2354  031B                     	;# 
  2355  031C                     	;# 
  2356  031C                     	;# 
  2357  031D                     	;# 
  2358  031E                     	;# 
  2359  031F                     	;# 
  2360  038C                     	;# 
  2361  038D                     	;# 
  2362  038E                     	;# 
  2363  0390                     	;# 
  2364  0391                     	;# 
  2365  0392                     	;# 
  2366  040C                     	;# 
  2367  040D                     	;# 
  2368  040E                     	;# 
  2369  040F                     	;# 
  2370  0410                     	;# 
  2371  0411                     	;# 
  2372  0416                     	;# 
  2373  0416                     	;# 
  2374  0417                     	;# 
  2375  0418                     	;# 
  2376  0418                     	;# 
  2377  0419                     	;# 
  2378  041A                     	;# 
  2379  041A                     	;# 
  2380  041B                     	;# 
  2381  041C                     	;# 
  2382  041C                     	;# 
  2383  041D                     	;# 
  2384  041E                     	;# 
  2385  041F                     	;# 
  2386  048C                     	;# 
  2387  048C                     	;# 
  2388  048D                     	;# 
  2389  048E                     	;# 
  2390  048F                     	;# 
  2391  048F                     	;# 
  2392  0490                     	;# 
  2393  0491                     	;# 
  2394  0492                     	;# 
  2395  0492                     	;# 
  2396  0493                     	;# 
  2397  0494                     	;# 
  2398  0495                     	;# 
  2399  0495                     	;# 
  2400  0496                     	;# 
  2401  0497                     	;# 
  2402  0498                     	;# 
  2403  0499                     	;# 
  2404  049A                     	;# 
  2405  049B                     	;# 
  2406  049C                     	;# 
  2407  049D                     	;# 
  2408  050C                     	;# 
  2409  050C                     	;# 
  2410  050D                     	;# 
  2411  050E                     	;# 
  2412  050F                     	;# 
  2413  050F                     	;# 
  2414  0510                     	;# 
  2415  0511                     	;# 
  2416  0512                     	;# 
  2417  0512                     	;# 
  2418  0513                     	;# 
  2419  0514                     	;# 
  2420  0515                     	;# 
  2421  0515                     	;# 
  2422  0516                     	;# 
  2423  0517                     	;# 
  2424  0518                     	;# 
  2425  0519                     	;# 
  2426  051A                     	;# 
  2427  051B                     	;# 
  2428  051C                     	;# 
  2429  051D                     	;# 
  2430  058C                     	;# 
  2431  058C                     	;# 
  2432  058D                     	;# 
  2433  058E                     	;# 
  2434  058F                     	;# 
  2435  058F                     	;# 
  2436  0590                     	;# 
  2437  0591                     	;# 
  2438  0592                     	;# 
  2439  0593                     	;# 
  2440  060C                     	;# 
  2441  060D                     	;# 
  2442  060E                     	;# 
  2443  060F                     	;# 
  2444  0610                     	;# 
  2445  0611                     	;# 
  2446  0612                     	;# 
  2447  0613                     	;# 
  2448  0614                     	;# 
  2449  0616                     	;# 
  2450  0617                     	;# 
  2451  0618                     	;# 
  2452  0619                     	;# 
  2453  061A                     	;# 
  2454  061B                     	;# 
  2455  061C                     	;# 
  2456  061D                     	;# 
  2457  061E                     	;# 
  2458  068C                     	;# 
  2459  068D                     	;# 
  2460  068E                     	;# 
  2461  068F                     	;# 
  2462  0690                     	;# 
  2463  0691                     	;# 
  2464  0692                     	;# 
  2465  0693                     	;# 
  2466  0694                     	;# 
  2467  070C                     	;# 
  2468  070D                     	;# 
  2469  070E                     	;# 
  2470  070F                     	;# 
  2471  0710                     	;# 
  2472  0711                     	;# 
  2473  0712                     	;# 
  2474  0713                     	;# 
  2475  0714                     	;# 
  2476  0716                     	;# 
  2477  0717                     	;# 
  2478  0718                     	;# 
  2479  0719                     	;# 
  2480  071A                     	;# 
  2481  071B                     	;# 
  2482  071C                     	;# 
  2483  071D                     	;# 
  2484  071E                     	;# 
  2485  0796                     	;# 
  2486  0797                     	;# 
  2487  0798                     	;# 
  2488  0799                     	;# 
  2489  079A                     	;# 
  2490  079B                     	;# 
  2491  080C                     	;# 
  2492  080D                     	;# 
  2493  080E                     	;# 
  2494  080F                     	;# 
  2495  0810                     	;# 
  2496  0811                     	;# 
  2497  0812                     	;# 
  2498  0813                     	;# 
  2499  0814                     	;# 
  2500  081A                     	;# 
  2501  081B                     	;# 
  2502  081C                     	;# 
  2503  081D                     	;# 
  2504  081E                     	;# 
  2505  081F                     	;# 
  2506  088C                     	;# 
  2507  088D                     	;# 
  2508  088E                     	;# 
  2509  088F                     	;# 
  2510  0890                     	;# 
  2511  0891                     	;# 
  2512  0892                     	;# 
  2513  0893                     	;# 
  2514  0895                     	;# 
  2515  0896                     	;# 
  2516  0897                     	;# 
  2517  0898                     	;# 
  2518  0899                     	;# 
  2519  089A                     	;# 
  2520  089B                     	;# 
  2521  090C                     	;# 
  2522  090E                     	;# 
  2523  090F                     	;# 
  2524  091F                     	;# 
  2525  091F                     	;# 
  2526  098F                     	;# 
  2527  098F                     	;# 
  2528  0990                     	;# 
  2529  0991                     	;# 
  2530  0992                     	;# 
  2531  0993                     	;# 
  2532  0994                     	;# 
  2533  0995                     	;# 
  2534  0996                     	;# 
  2535  0997                     	;# 
  2536  0E0F                     	;# 
  2537  0E10                     	;# 
  2538  0E11                     	;# 
  2539  0E12                     	;# 
  2540  0E13                     	;# 
  2541  0E14                     	;# 
  2542  0E15                     	;# 
  2543  0E16                     	;# 
  2544  0E17                     	;# 
  2545  0E18                     	;# 
  2546  0E19                     	;# 
  2547  0E1A                     	;# 
  2548  0E1B                     	;# 
  2549  0E1C                     	;# 
  2550  0E1D                     	;# 
  2551  0E1E                     	;# 
  2552  0E1F                     	;# 
  2553  0E20                     	;# 
  2554  0E21                     	;# 
  2555  0E22                     	;# 
  2556  0E23                     	;# 
  2557  0E24                     	;# 
  2558  0E25                     	;# 
  2559  0E26                     	;# 
  2560  0E27                     	;# 
  2561  0E28                     	;# 
  2562  0E29                     	;# 
  2563  0E2A                     	;# 
  2564  0E2B                     	;# 
  2565  0E2C                     	;# 
  2566  0E2D                     	;# 
  2567  0E2E                     	;# 
  2568  0E2F                     	;# 
  2569  0E30                     	;# 
  2570  0E31                     	;# 
  2571  0E32                     	;# 
  2572  0E33                     	;# 
  2573  0E34                     	;# 
  2574  0E35                     	;# 
  2575  0E36                     	;# 
  2576  0E37                     	;# 
  2577  0E8F                     	;# 
  2578  0E90                     	;# 
  2579  0E91                     	;# 
  2580  0E92                     	;# 
  2581  0E93                     	;# 
  2582  0E94                     	;# 
  2583  0E95                     	;# 
  2584  0E96                     	;# 
  2585  0E97                     	;# 
  2586  0E9C                     	;# 
  2587  0E9D                     	;# 
  2588  0E9E                     	;# 
  2589  0EA1                     	;# 
  2590  0EA2                     	;# 
  2591  0EA3                     	;# 
  2592  0EA4                     	;# 
  2593  0EA5                     	;# 
  2594  0EA9                     	;# 
  2595  0EAA                     	;# 
  2596  0EAB                     	;# 
  2597  0EAC                     	;# 
  2598  0EB1                     	;# 
  2599  0EB2                     	;# 
  2600  0EB3                     	;# 
  2601  0EB8                     	;# 
  2602  0EB9                     	;# 
  2603  0EBA                     	;# 
  2604  0EBB                     	;# 
  2605  0EBC                     	;# 
  2606  0EBD                     	;# 
  2607  0EBE                     	;# 
  2608  0EC3                     	;# 
  2609  0EC5                     	;# 
  2610  0EC6                     	;# 
  2611  0EC7                     	;# 
  2612  0EC8                     	;# 
  2613  0EC9                     	;# 
  2614  0ECA                     	;# 
  2615  0ECB                     	;# 
  2616  0ECC                     	;# 
  2617  0F10                     	;# 
  2618  0F11                     	;# 
  2619  0F12                     	;# 
  2620  0F13                     	;# 
  2621  0F14                     	;# 
  2622  0F15                     	;# 
  2623  0F16                     	;# 
  2624  0F17                     	;# 
  2625  0F18                     	;# 
  2626  0F19                     	;# 
  2627  0F1A                     	;# 
  2628  0F1B                     	;# 
  2629  0F1C                     	;# 
  2630  0F1D                     	;# 
  2631  0F1E                     	;# 
  2632  0F1F                     	;# 
  2633  0F20                     	;# 
  2634  0F21                     	;# 
  2635  0F22                     	;# 
  2636  0F23                     	;# 
  2637  0F24                     	;# 
  2638  0F25                     	;# 
  2639  0F26                     	;# 
  2640  0F27                     	;# 
  2641  0F38                     	;# 
  2642  0F39                     	;# 
  2643  0F3A                     	;# 
  2644  0F3B                     	;# 
  2645  0F3C                     	;# 
  2646  0F3D                     	;# 
  2647  0F3E                     	;# 
  2648  0F3F                     	;# 
  2649  0F40                     	;# 
  2650  0F41                     	;# 
  2651  0F43                     	;# 
  2652  0F44                     	;# 
  2653  0F45                     	;# 
  2654  0F46                     	;# 
  2655  0F47                     	;# 
  2656  0F48                     	;# 
  2657  0F49                     	;# 
  2658  0F4A                     	;# 
  2659  0F4B                     	;# 
  2660  0F4C                     	;# 
  2661  0F4E                     	;# 
  2662  0F4F                     	;# 
  2663  0F50                     	;# 
  2664  0F51                     	;# 
  2665  0F52                     	;# 
  2666  0F53                     	;# 
  2667  0F54                     	;# 
  2668  0F55                     	;# 
  2669  0F56                     	;# 
  2670  0F57                     	;# 
  2671  0F65                     	;# 
  2672  0F68                     	;# 
  2673  0F69                     	;# 
  2674  0F6A                     	;# 
  2675  0F6B                     	;# 
  2676  0FE4                     	;# 
  2677  0FE5                     	;# 
  2678  0FE6                     	;# 
  2679  0FE7                     	;# 
  2680  0FE8                     	;# 
  2681  0FE9                     	;# 
  2682  0FEA                     	;# 
  2683  0FEB                     	;# 
  2684  0FED                     	;# 
  2685  0FEE                     	;# 
  2686  0FEF                     	;# 
  2687  0000                     	;# 
  2688  0001                     	;# 
  2689  0002                     	;# 
  2690  0003                     	;# 
  2691  0004                     	;# 
  2692  0005                     	;# 
  2693  0006                     	;# 
  2694  0007                     	;# 
  2695  0008                     	;# 
  2696  0009                     	;# 
  2697  000A                     	;# 
  2698  000B                     	;# 
  2699  000C                     	;# 
  2700  000D                     	;# 
  2701  000E                     	;# 
  2702  0010                     	;# 
  2703  0011                     	;# 
  2704  0012                     	;# 
  2705  0013                     	;# 
  2706  0016                     	;# 
  2707  0017                     	;# 
  2708  0018                     	;# 
  2709  001C                     	;# 
  2710  001C                     	;# 
  2711  001D                     	;# 
  2712  001D                     	;# 
  2713  001E                     	;# 
  2714  001F                     	;# 
  2715  008C                     	;# 
  2716  008C                     	;# 
  2717  008D                     	;# 
  2718  008E                     	;# 
  2719  008E                     	;# 
  2720  008F                     	;# 
  2721  0090                     	;# 
  2722  0090                     	;# 
  2723  0091                     	;# 
  2724  0093                     	;# 
  2725  0094                     	;# 
  2726  0095                     	;# 
  2727  0096                     	;# 
  2728  0097                     	;# 
  2729  0098                     	;# 
  2730  0099                     	;# 
  2731  009A                     	;# 
  2732  009B                     	;# 
  2733  009C                     	;# 
  2734  009D                     	;# 
  2735  009E                     	;# 
  2736  010C                     	;# 
  2737  010D                     	;# 
  2738  010E                     	;# 
  2739  010E                     	;# 
  2740  010F                     	;# 
  2741  0110                     	;# 
  2742  0110                     	;# 
  2743  0111                     	;# 
  2744  0112                     	;# 
  2745  0112                     	;# 
  2746  0113                     	;# 
  2747  0114                     	;# 
  2748  0114                     	;# 
  2749  0115                     	;# 
  2750  0116                     	;# 
  2751  0116                     	;# 
  2752  0117                     	;# 
  2753  0119                     	;# 
  2754  0119                     	;# 
  2755  0119                     	;# 
  2756  011A                     	;# 
  2757  011A                     	;# 
  2758  011A                     	;# 
  2759  011B                     	;# 
  2760  011B                     	;# 
  2761  011B                     	;# 
  2762  011B                     	;# 
  2763  011B                     	;# 
  2764  011C                     	;# 
  2765  011C                     	;# 
  2766  011C                     	;# 
  2767  011D                     	;# 
  2768  011D                     	;# 
  2769  011D                     	;# 
  2770  011E                     	;# 
  2771  011E                     	;# 
  2772  011E                     	;# 
  2773  011F                     	;# 
  2774  011F                     	;# 
  2775  011F                     	;# 
  2776  011F                     	;# 
  2777  011F                     	;# 
  2778  018C                     	;# 
  2779  018D                     	;# 
  2780  018E                     	;# 
  2781  018F                     	;# 
  2782  0190                     	;# 
  2783  0191                     	;# 
  2784  0192                     	;# 
  2785  0196                     	;# 
  2786  0197                     	;# 
  2787  0198                     	;# 
  2788  0199                     	;# 
  2789  019A                     	;# 
  2790  019B                     	;# 
  2791  019C                     	;# 
  2792  020C                     	;# 
  2793  020C                     	;# 
  2794  020D                     	;# 
  2795  020E                     	;# 
  2796  020F                     	;# 
  2797  020F                     	;# 
  2798  0210                     	;# 
  2799  0210                     	;# 
  2800  0211                     	;# 
  2801  0211                     	;# 
  2802  0212                     	;# 
  2803  0212                     	;# 
  2804  0213                     	;# 
  2805  0214                     	;# 
  2806  0215                     	;# 
  2807  0215                     	;# 
  2808  0216                     	;# 
  2809  0216                     	;# 
  2810  0217                     	;# 
  2811  0217                     	;# 
  2812  0218                     	;# 
  2813  0218                     	;# 
  2814  0219                     	;# 
  2815  021A                     	;# 
  2816  021B                     	;# 
  2817  021B                     	;# 
  2818  021C                     	;# 
  2819  021C                     	;# 
  2820  021D                     	;# 
  2821  021D                     	;# 
  2822  021E                     	;# 
  2823  021F                     	;# 
  2824  028C                     	;# 
  2825  028C                     	;# 
  2826  028D                     	;# 
  2827  028D                     	;# 
  2828  028E                     	;# 
  2829  028F                     	;# 
  2830  0290                     	;# 
  2831  0290                     	;# 
  2832  0291                     	;# 
  2833  0292                     	;# 
  2834  0292                     	;# 
  2835  0293                     	;# 
  2836  0293                     	;# 
  2837  0294                     	;# 
  2838  0295                     	;# 
  2839  0296                     	;# 
  2840  0296                     	;# 
  2841  0297                     	;# 
  2842  0298                     	;# 
  2843  0298                     	;# 
  2844  0299                     	;# 
  2845  0299                     	;# 
  2846  029A                     	;# 
  2847  029B                     	;# 
  2848  029C                     	;# 
  2849  029C                     	;# 
  2850  029D                     	;# 
  2851  030C                     	;# 
  2852  030C                     	;# 
  2853  030D                     	;# 
  2854  030E                     	;# 
  2855  030F                     	;# 
  2856  0310                     	;# 
  2857  0310                     	;# 
  2858  0311                     	;# 
  2859  0312                     	;# 
  2860  0313                     	;# 
  2861  0314                     	;# 
  2862  0314                     	;# 
  2863  0315                     	;# 
  2864  0316                     	;# 
  2865  0317                     	;# 
  2866  0318                     	;# 
  2867  0318                     	;# 
  2868  0319                     	;# 
  2869  031A                     	;# 
  2870  031B                     	;# 
  2871  031C                     	;# 
  2872  031C                     	;# 
  2873  031D                     	;# 
  2874  031E                     	;# 
  2875  031F                     	;# 
  2876  038C                     	;# 
  2877  038D                     	;# 
  2878  038E                     	;# 
  2879  0390                     	;# 
  2880  0391                     	;# 
  2881  0392                     	;# 
  2882  040C                     	;# 
  2883  040D                     	;# 
  2884  040E                     	;# 
  2885  040F                     	;# 
  2886  0410                     	;# 
  2887  0411                     	;# 
  2888  0416                     	;# 
  2889  0416                     	;# 
  2890  0417                     	;# 
  2891  0418                     	;# 
  2892  0418                     	;# 
  2893  0419                     	;# 
  2894  041A                     	;# 
  2895  041A                     	;# 
  2896  041B                     	;# 
  2897  041C                     	;# 
  2898  041C                     	;# 
  2899  041D                     	;# 
  2900  041E                     	;# 
  2901  041F                     	;# 
  2902  048C                     	;# 
  2903  048C                     	;# 
  2904  048D                     	;# 
  2905  048E                     	;# 
  2906  048F                     	;# 
  2907  048F                     	;# 
  2908  0490                     	;# 
  2909  0491                     	;# 
  2910  0492                     	;# 
  2911  0492                     	;# 
  2912  0493                     	;# 
  2913  0494                     	;# 
  2914  0495                     	;# 
  2915  0495                     	;# 
  2916  0496                     	;# 
  2917  0497                     	;# 
  2918  0498                     	;# 
  2919  0499                     	;# 
  2920  049A                     	;# 
  2921  049B                     	;# 
  2922  049C                     	;# 
  2923  049D                     	;# 
  2924  050C                     	;# 
  2925  050C                     	;# 
  2926  050D                     	;# 
  2927  050E                     	;# 
  2928  050F                     	;# 
  2929  050F                     	;# 
  2930  0510                     	;# 
  2931  0511                     	;# 
  2932  0512                     	;# 
  2933  0512                     	;# 
  2934  0513                     	;# 
  2935  0514                     	;# 
  2936  0515                     	;# 
  2937  0515                     	;# 
  2938  0516                     	;# 
  2939  0517                     	;# 
  2940  0518                     	;# 
  2941  0519                     	;# 
  2942  051A                     	;# 
  2943  051B                     	;# 
  2944  051C                     	;# 
  2945  051D                     	;# 
  2946  058C                     	;# 
  2947  058C                     	;# 
  2948  058D                     	;# 
  2949  058E                     	;# 
  2950  058F                     	;# 
  2951  058F                     	;# 
  2952  0590                     	;# 
  2953  0591                     	;# 
  2954  0592                     	;# 
  2955  0593                     	;# 
  2956  060C                     	;# 
  2957  060D                     	;# 
  2958  060E                     	;# 
  2959  060F                     	;# 
  2960  0610                     	;# 
  2961  0611                     	;# 
  2962  0612                     	;# 
  2963  0613                     	;# 
  2964  0614                     	;# 
  2965  0616                     	;# 
  2966  0617                     	;# 
  2967  0618                     	;# 
  2968  0619                     	;# 
  2969  061A                     	;# 
  2970  061B                     	;# 
  2971  061C                     	;# 
  2972  061D                     	;# 
  2973  061E                     	;# 
  2974  068C                     	;# 
  2975  068D                     	;# 
  2976  068E                     	;# 
  2977  068F                     	;# 
  2978  0690                     	;# 
  2979  0691                     	;# 
  2980  0692                     	;# 
  2981  0693                     	;# 
  2982  0694                     	;# 
  2983  070C                     	;# 
  2984  070D                     	;# 
  2985  070E                     	;# 
  2986  070F                     	;# 
  2987  0710                     	;# 
  2988  0711                     	;# 
  2989  0712                     	;# 
  2990  0713                     	;# 
  2991  0714                     	;# 
  2992  0716                     	;# 
  2993  0717                     	;# 
  2994  0718                     	;# 
  2995  0719                     	;# 
  2996  071A                     	;# 
  2997  071B                     	;# 
  2998  071C                     	;# 
  2999  071D                     	;# 
  3000  071E                     	;# 
  3001  0796                     	;# 
  3002  0797                     	;# 
  3003  0798                     	;# 
  3004  0799                     	;# 
  3005  079A                     	;# 
  3006  079B                     	;# 
  3007  080C                     	;# 
  3008  080D                     	;# 
  3009  080E                     	;# 
  3010  080F                     	;# 
  3011  0810                     	;# 
  3012  0811                     	;# 
  3013  0812                     	;# 
  3014  0813                     	;# 
  3015  0814                     	;# 
  3016  081A                     	;# 
  3017  081B                     	;# 
  3018  081C                     	;# 
  3019  081D                     	;# 
  3020  081E                     	;# 
  3021  081F                     	;# 
  3022  088C                     	;# 
  3023  088D                     	;# 
  3024  088E                     	;# 
  3025  088F                     	;# 
  3026  0890                     	;# 
  3027  0891                     	;# 
  3028  0892                     	;# 
  3029  0893                     	;# 
  3030  0895                     	;# 
  3031  0896                     	;# 
  3032  0897                     	;# 
  3033  0898                     	;# 
  3034  0899                     	;# 
  3035  089A                     	;# 
  3036  089B                     	;# 
  3037  090C                     	;# 
  3038  090E                     	;# 
  3039  090F                     	;# 
  3040  091F                     	;# 
  3041  091F                     	;# 
  3042  098F                     	;# 
  3043  098F                     	;# 
  3044  0990                     	;# 
  3045  0991                     	;# 
  3046  0992                     	;# 
  3047  0993                     	;# 
  3048  0994                     	;# 
  3049  0995                     	;# 
  3050  0996                     	;# 
  3051  0997                     	;# 
  3052  0E0F                     	;# 
  3053  0E10                     	;# 
  3054  0E11                     	;# 
  3055  0E12                     	;# 
  3056  0E13                     	;# 
  3057  0E14                     	;# 
  3058  0E15                     	;# 
  3059  0E16                     	;# 
  3060  0E17                     	;# 
  3061  0E18                     	;# 
  3062  0E19                     	;# 
  3063  0E1A                     	;# 
  3064  0E1B                     	;# 
  3065  0E1C                     	;# 
  3066  0E1D                     	;# 
  3067  0E1E                     	;# 
  3068  0E1F                     	;# 
  3069  0E20                     	;# 
  3070  0E21                     	;# 
  3071  0E22                     	;# 
  3072  0E23                     	;# 
  3073  0E24                     	;# 
  3074  0E25                     	;# 
  3075  0E26                     	;# 
  3076  0E27                     	;# 
  3077  0E28                     	;# 
  3078  0E29                     	;# 
  3079  0E2A                     	;# 
  3080  0E2B                     	;# 
  3081  0E2C                     	;# 
  3082  0E2D                     	;# 
  3083  0E2E                     	;# 
  3084  0E2F                     	;# 
  3085  0E30                     	;# 
  3086  0E31                     	;# 
  3087  0E32                     	;# 
  3088  0E33                     	;# 
  3089  0E34                     	;# 
  3090  0E35                     	;# 
  3091  0E36                     	;# 
  3092  0E37                     	;# 
  3093  0E8F                     	;# 
  3094  0E90                     	;# 
  3095  0E91                     	;# 
  3096  0E92                     	;# 
  3097  0E93                     	;# 
  3098  0E94                     	;# 
  3099  0E95                     	;# 
  3100  0E96                     	;# 
  3101  0E97                     	;# 
  3102  0E9C                     	;# 
  3103  0E9D                     	;# 
  3104  0E9E                     	;# 
  3105  0EA1                     	;# 
  3106  0EA2                     	;# 
  3107  0EA3                     	;# 
  3108  0EA4                     	;# 
  3109  0EA5                     	;# 
  3110  0EA9                     	;# 
  3111  0EAA                     	;# 
  3112  0EAB                     	;# 
  3113  0EAC                     	;# 
  3114  0EB1                     	;# 
  3115  0EB2                     	;# 
  3116  0EB3                     	;# 
  3117  0EB8                     	;# 
  3118  0EB9                     	;# 
  3119  0EBA                     	;# 
  3120  0EBB                     	;# 
  3121  0EBC                     	;# 
  3122  0EBD                     	;# 
  3123  0EBE                     	;# 
  3124  0EC3                     	;# 
  3125  0EC5                     	;# 
  3126  0EC6                     	;# 
  3127  0EC7                     	;# 
  3128  0EC8                     	;# 
  3129  0EC9                     	;# 
  3130  0ECA                     	;# 
  3131  0ECB                     	;# 
  3132  0ECC                     	;# 
  3133  0F10                     	;# 
  3134  0F11                     	;# 
  3135  0F12                     	;# 
  3136  0F13                     	;# 
  3137  0F14                     	;# 
  3138  0F15                     	;# 
  3139  0F16                     	;# 
  3140  0F17                     	;# 
  3141  0F18                     	;# 
  3142  0F19                     	;# 
  3143  0F1A                     	;# 
  3144  0F1B                     	;# 
  3145  0F1C                     	;# 
  3146  0F1D                     	;# 
  3147  0F1E                     	;# 
  3148  0F1F                     	;# 
  3149  0F20                     	;# 
  3150  0F21                     	;# 
  3151  0F22                     	;# 
  3152  0F23                     	;# 
  3153  0F24                     	;# 
  3154  0F25                     	;# 
  3155  0F26                     	;# 
  3156  0F27                     	;# 
  3157  0F38                     	;# 
  3158  0F39                     	;# 
  3159  0F3A                     	;# 
  3160  0F3B                     	;# 
  3161  0F3C                     	;# 
  3162  0F3D                     	;# 
  3163  0F3E                     	;# 
  3164  0F3F                     	;# 
  3165  0F40                     	;# 
  3166  0F41                     	;# 
  3167  0F43                     	;# 
  3168  0F44                     	;# 
  3169  0F45                     	;# 
  3170  0F46                     	;# 
  3171  0F47                     	;# 
  3172  0F48                     	;# 
  3173  0F49                     	;# 
  3174  0F4A                     	;# 
  3175  0F4B                     	;# 
  3176  0F4C                     	;# 
  3177  0F4E                     	;# 
  3178  0F4F                     	;# 
  3179  0F50                     	;# 
  3180  0F51                     	;# 
  3181  0F52                     	;# 
  3182  0F53                     	;# 
  3183  0F54                     	;# 
  3184  0F55                     	;# 
  3185  0F56                     	;# 
  3186  0F57                     	;# 
  3187  0F65                     	;# 
  3188  0F68                     	;# 
  3189  0F69                     	;# 
  3190  0F6A                     	;# 
  3191  0F6B                     	;# 
  3192  0FE4                     	;# 
  3193  0FE5                     	;# 
  3194  0FE6                     	;# 
  3195  0FE7                     	;# 
  3196  0FE8                     	;# 
  3197  0FE9                     	;# 
  3198  0FEA                     	;# 
  3199  0FEB                     	;# 
  3200  0FED                     	;# 
  3201  0FEE                     	;# 
  3202  0FEF                     	;# 
  3203  0000                     	;# 
  3204  0001                     	;# 
  3205  0002                     	;# 
  3206  0003                     	;# 
  3207  0004                     	;# 
  3208  0005                     	;# 
  3209  0006                     	;# 
  3210  0007                     	;# 
  3211  0008                     	;# 
  3212  0009                     	;# 
  3213  000A                     	;# 
  3214  000B                     	;# 
  3215  000C                     	;# 
  3216  000D                     	;# 
  3217  000E                     	;# 
  3218  0010                     	;# 
  3219  0011                     	;# 
  3220  0012                     	;# 
  3221  0013                     	;# 
  3222  0016                     	;# 
  3223  0017                     	;# 
  3224  0018                     	;# 
  3225  001C                     	;# 
  3226  001C                     	;# 
  3227  001D                     	;# 
  3228  001D                     	;# 
  3229  001E                     	;# 
  3230  001F                     	;# 
  3231  008C                     	;# 
  3232  008C                     	;# 
  3233  008D                     	;# 
  3234  008E                     	;# 
  3235  008E                     	;# 
  3236  008F                     	;# 
  3237  0090                     	;# 
  3238  0090                     	;# 
  3239  0091                     	;# 
  3240  0093                     	;# 
  3241  0094                     	;# 
  3242  0095                     	;# 
  3243  0096                     	;# 
  3244  0097                     	;# 
  3245  0098                     	;# 
  3246  0099                     	;# 
  3247  009A                     	;# 
  3248  009B                     	;# 
  3249  009C                     	;# 
  3250  009D                     	;# 
  3251  009E                     	;# 
  3252  010C                     	;# 
  3253  010D                     	;# 
  3254  010E                     	;# 
  3255  010E                     	;# 
  3256  010F                     	;# 
  3257  0110                     	;# 
  3258  0110                     	;# 
  3259  0111                     	;# 
  3260  0112                     	;# 
  3261  0112                     	;# 
  3262  0113                     	;# 
  3263  0114                     	;# 
  3264  0114                     	;# 
  3265  0115                     	;# 
  3266  0116                     	;# 
  3267  0116                     	;# 
  3268  0117                     	;# 
  3269  0119                     	;# 
  3270  0119                     	;# 
  3271  0119                     	;# 
  3272  011A                     	;# 
  3273  011A                     	;# 
  3274  011A                     	;# 
  3275  011B                     	;# 
  3276  011B                     	;# 
  3277  011B                     	;# 
  3278  011B                     	;# 
  3279  011B                     	;# 
  3280  011C                     	;# 
  3281  011C                     	;# 
  3282  011C                     	;# 
  3283  011D                     	;# 
  3284  011D                     	;# 
  3285  011D                     	;# 
  3286  011E                     	;# 
  3287  011E                     	;# 
  3288  011E                     	;# 
  3289  011F                     	;# 
  3290  011F                     	;# 
  3291  011F                     	;# 
  3292  011F                     	;# 
  3293  011F                     	;# 
  3294  018C                     	;# 
  3295  018D                     	;# 
  3296  018E                     	;# 
  3297  018F                     	;# 
  3298  0190                     	;# 
  3299  0191                     	;# 
  3300  0192                     	;# 
  3301  0196                     	;# 
  3302  0197                     	;# 
  3303  0198                     	;# 
  3304  0199                     	;# 
  3305  019A                     	;# 
  3306  019B                     	;# 
  3307  019C                     	;# 
  3308  020C                     	;# 
  3309  020C                     	;# 
  3310  020D                     	;# 
  3311  020E                     	;# 
  3312  020F                     	;# 
  3313  020F                     	;# 
  3314  0210                     	;# 
  3315  0210                     	;# 
  3316  0211                     	;# 
  3317  0211                     	;# 
  3318  0212                     	;# 
  3319  0212                     	;# 
  3320  0213                     	;# 
  3321  0214                     	;# 
  3322  0215                     	;# 
  3323  0215                     	;# 
  3324  0216                     	;# 
  3325  0216                     	;# 
  3326  0217                     	;# 
  3327  0217                     	;# 
  3328  0218                     	;# 
  3329  0218                     	;# 
  3330  0219                     	;# 
  3331  021A                     	;# 
  3332  021B                     	;# 
  3333  021B                     	;# 
  3334  021C                     	;# 
  3335  021C                     	;# 
  3336  021D                     	;# 
  3337  021D                     	;# 
  3338  021E                     	;# 
  3339  021F                     	;# 
  3340  028C                     	;# 
  3341  028C                     	;# 
  3342  028D                     	;# 
  3343  028D                     	;# 
  3344  028E                     	;# 
  3345  028F                     	;# 
  3346  0290                     	;# 
  3347  0290                     	;# 
  3348  0291                     	;# 
  3349  0292                     	;# 
  3350  0292                     	;# 
  3351  0293                     	;# 
  3352  0293                     	;# 
  3353  0294                     	;# 
  3354  0295                     	;# 
  3355  0296                     	;# 
  3356  0296                     	;# 
  3357  0297                     	;# 
  3358  0298                     	;# 
  3359  0298                     	;# 
  3360  0299                     	;# 
  3361  0299                     	;# 
  3362  029A                     	;# 
  3363  029B                     	;# 
  3364  029C                     	;# 
  3365  029C                     	;# 
  3366  029D                     	;# 
  3367  030C                     	;# 
  3368  030C                     	;# 
  3369  030D                     	;# 
  3370  030E                     	;# 
  3371  030F                     	;# 
  3372  0310                     	;# 
  3373  0310                     	;# 
  3374  0311                     	;# 
  3375  0312                     	;# 
  3376  0313                     	;# 
  3377  0314                     	;# 
  3378  0314                     	;# 
  3379  0315                     	;# 
  3380  0316                     	;# 
  3381  0317                     	;# 
  3382  0318                     	;# 
  3383  0318                     	;# 
  3384  0319                     	;# 
  3385  031A                     	;# 
  3386  031B                     	;# 
  3387  031C                     	;# 
  3388  031C                     	;# 
  3389  031D                     	;# 
  3390  031E                     	;# 
  3391  031F                     	;# 
  3392  038C                     	;# 
  3393  038D                     	;# 
  3394  038E                     	;# 
  3395  0390                     	;# 
  3396  0391                     	;# 
  3397  0392                     	;# 
  3398  040C                     	;# 
  3399  040D                     	;# 
  3400  040E                     	;# 
  3401  040F                     	;# 
  3402  0410                     	;# 
  3403  0411                     	;# 
  3404  0416                     	;# 
  3405  0416                     	;# 
  3406  0417                     	;# 
  3407  0418                     	;# 
  3408  0418                     	;# 
  3409  0419                     	;# 
  3410  041A                     	;# 
  3411  041A                     	;# 
  3412  041B                     	;# 
  3413  041C                     	;# 
  3414  041C                     	;# 
  3415  041D                     	;# 
  3416  041E                     	;# 
  3417  041F                     	;# 
  3418  048C                     	;# 
  3419  048C                     	;# 
  3420  048D                     	;# 
  3421  048E                     	;# 
  3422  048F                     	;# 
  3423  048F                     	;# 
  3424  0490                     	;# 
  3425  0491                     	;# 
  3426  0492                     	;# 
  3427  0492                     	;# 
  3428  0493                     	;# 
  3429  0494                     	;# 
  3430  0495                     	;# 
  3431  0495                     	;# 
  3432  0496                     	;# 
  3433  0497                     	;# 
  3434  0498                     	;# 
  3435  0499                     	;# 
  3436  049A                     	;# 
  3437  049B                     	;# 
  3438  049C                     	;# 
  3439  049D                     	;# 
  3440  050C                     	;# 
  3441  050C                     	;# 
  3442  050D                     	;# 
  3443  050E                     	;# 
  3444  050F                     	;# 
  3445  050F                     	;# 
  3446  0510                     	;# 
  3447  0511                     	;# 
  3448  0512                     	;# 
  3449  0512                     	;# 
  3450  0513                     	;# 
  3451  0514                     	;# 
  3452  0515                     	;# 
  3453  0515                     	;# 
  3454  0516                     	;# 
  3455  0517                     	;# 
  3456  0518                     	;# 
  3457  0519                     	;# 
  3458  051A                     	;# 
  3459  051B                     	;# 
  3460  051C                     	;# 
  3461  051D                     	;# 
  3462  058C                     	;# 
  3463  058C                     	;# 
  3464  058D                     	;# 
  3465  058E                     	;# 
  3466  058F                     	;# 
  3467  058F                     	;# 
  3468  0590                     	;# 
  3469  0591                     	;# 
  3470  0592                     	;# 
  3471  0593                     	;# 
  3472  060C                     	;# 
  3473  060D                     	;# 
  3474  060E                     	;# 
  3475  060F                     	;# 
  3476  0610                     	;# 
  3477  0611                     	;# 
  3478  0612                     	;# 
  3479  0613                     	;# 
  3480  0614                     	;# 
  3481  0616                     	;# 
  3482  0617                     	;# 
  3483  0618                     	;# 
  3484  0619                     	;# 
  3485  061A                     	;# 
  3486  061B                     	;# 
  3487  061C                     	;# 
  3488  061D                     	;# 
  3489  061E                     	;# 
  3490  068C                     	;# 
  3491  068D                     	;# 
  3492  068E                     	;# 
  3493  068F                     	;# 
  3494  0690                     	;# 
  3495  0691                     	;# 
  3496  0692                     	;# 
  3497  0693                     	;# 
  3498  0694                     	;# 
  3499  070C                     	;# 
  3500  070D                     	;# 
  3501  070E                     	;# 
  3502  070F                     	;# 
  3503  0710                     	;# 
  3504  0711                     	;# 
  3505  0712                     	;# 
  3506  0713                     	;# 
  3507  0714                     	;# 
  3508  0716                     	;# 
  3509  0717                     	;# 
  3510  0718                     	;# 
  3511  0719                     	;# 
  3512  071A                     	;# 
  3513  071B                     	;# 
  3514  071C                     	;# 
  3515  071D                     	;# 
  3516  071E                     	;# 
  3517  0796                     	;# 
  3518  0797                     	;# 
  3519  0798                     	;# 
  3520  0799                     	;# 
  3521  079A                     	;# 
  3522  079B                     	;# 
  3523  080C                     	;# 
  3524  080D                     	;# 
  3525  080E                     	;# 
  3526  080F                     	;# 
  3527  0810                     	;# 
  3528  0811                     	;# 
  3529  0812                     	;# 
  3530  0813                     	;# 
  3531  0814                     	;# 
  3532  081A                     	;# 
  3533  081B                     	;# 
  3534  081C                     	;# 
  3535  081D                     	;# 
  3536  081E                     	;# 
  3537  081F                     	;# 
  3538  088C                     	;# 
  3539  088D                     	;# 
  3540  088E                     	;# 
  3541  088F                     	;# 
  3542  0890                     	;# 
  3543  0891                     	;# 
  3544  0892                     	;# 
  3545  0893                     	;# 
  3546  0895                     	;# 
  3547  0896                     	;# 
  3548  0897                     	;# 
  3549  0898                     	;# 
  3550  0899                     	;# 
  3551  089A                     	;# 
  3552  089B                     	;# 
  3553  090C                     	;# 
  3554  090E                     	;# 
  3555  090F                     	;# 
  3556  091F                     	;# 
  3557  091F                     	;# 
  3558  098F                     	;# 
  3559  098F                     	;# 
  3560  0990                     	;# 
  3561  0991                     	;# 
  3562  0992                     	;# 
  3563  0993                     	;# 
  3564  0994                     	;# 
  3565  0995                     	;# 
  3566  0996                     	;# 
  3567  0997                     	;# 
  3568  0E0F                     	;# 
  3569  0E10                     	;# 
  3570  0E11                     	;# 
  3571  0E12                     	;# 
  3572  0E13                     	;# 
  3573  0E14                     	;# 
  3574  0E15                     	;# 
  3575  0E16                     	;# 
  3576  0E17                     	;# 
  3577  0E18                     	;# 
  3578  0E19                     	;# 
  3579  0E1A                     	;# 
  3580  0E1B                     	;# 
  3581  0E1C                     	;# 
  3582  0E1D                     	;# 
  3583  0E1E                     	;# 
  3584  0E1F                     	;# 
  3585  0E20                     	;# 
  3586  0E21                     	;# 
  3587  0E22                     	;# 
  3588  0E23                     	;# 
  3589  0E24                     	;# 
  3590  0E25                     	;# 
  3591  0E26                     	;# 
  3592  0E27                     	;# 
  3593  0E28                     	;# 
  3594  0E29                     	;# 
  3595  0E2A                     	;# 
  3596  0E2B                     	;# 
  3597  0E2C                     	;# 
  3598  0E2D                     	;# 
  3599  0E2E                     	;# 
  3600  0E2F                     	;# 
  3601  0E30                     	;# 
  3602  0E31                     	;# 
  3603  0E32                     	;# 
  3604  0E33                     	;# 
  3605  0E34                     	;# 
  3606  0E35                     	;# 
  3607  0E36                     	;# 
  3608  0E37                     	;# 
  3609  0E8F                     	;# 
  3610  0E90                     	;# 
  3611  0E91                     	;# 
  3612  0E92                     	;# 
  3613  0E93                     	;# 
  3614  0E94                     	;# 
  3615  0E95                     	;# 
  3616  0E96                     	;# 
  3617  0E97                     	;# 
  3618  0E9C                     	;# 
  3619  0E9D                     	;# 
  3620  0E9E                     	;# 
  3621  0EA1                     	;# 
  3622  0EA2                     	;# 
  3623  0EA3                     	;# 
  3624  0EA4                     	;# 
  3625  0EA5                     	;# 
  3626  0EA9                     	;# 
  3627  0EAA                     	;# 
  3628  0EAB                     	;# 
  3629  0EAC                     	;# 
  3630  0EB1                     	;# 
  3631  0EB2                     	;# 
  3632  0EB3                     	;# 
  3633  0EB8                     	;# 
  3634  0EB9                     	;# 
  3635  0EBA                     	;# 
  3636  0EBB                     	;# 
  3637  0EBC                     	;# 
  3638  0EBD                     	;# 
  3639  0EBE                     	;# 
  3640  0EC3                     	;# 
  3641  0EC5                     	;# 
  3642  0EC6                     	;# 
  3643  0EC7                     	;# 
  3644  0EC8                     	;# 
  3645  0EC9                     	;# 
  3646  0ECA                     	;# 
  3647  0ECB                     	;# 
  3648  0ECC                     	;# 
  3649  0F10                     	;# 
  3650  0F11                     	;# 
  3651  0F12                     	;# 
  3652  0F13                     	;# 
  3653  0F14                     	;# 
  3654  0F15                     	;# 
  3655  0F16                     	;# 
  3656  0F17                     	;# 
  3657  0F18                     	;# 
  3658  0F19                     	;# 
  3659  0F1A                     	;# 
  3660  0F1B                     	;# 
  3661  0F1C                     	;# 
  3662  0F1D                     	;# 
  3663  0F1E                     	;# 
  3664  0F1F                     	;# 
  3665  0F20                     	;# 
  3666  0F21                     	;# 
  3667  0F22                     	;# 
  3668  0F23                     	;# 
  3669  0F24                     	;# 
  3670  0F25                     	;# 
  3671  0F26                     	;# 
  3672  0F27                     	;# 
  3673  0F38                     	;# 
  3674  0F39                     	;# 
  3675  0F3A                     	;# 
  3676  0F3B                     	;# 
  3677  0F3C                     	;# 
  3678  0F3D                     	;# 
  3679  0F3E                     	;# 
  3680  0F3F                     	;# 
  3681  0F40                     	;# 
  3682  0F41                     	;# 
  3683  0F43                     	;# 
  3684  0F44                     	;# 
  3685  0F45                     	;# 
  3686  0F46                     	;# 
  3687  0F47                     	;# 
  3688  0F48                     	;# 
  3689  0F49                     	;# 
  3690  0F4A                     	;# 
  3691  0F4B                     	;# 
  3692  0F4C                     	;# 
  3693  0F4E                     	;# 
  3694  0F4F                     	;# 
  3695  0F50                     	;# 
  3696  0F51                     	;# 
  3697  0F52                     	;# 
  3698  0F53                     	;# 
  3699  0F54                     	;# 
  3700  0F55                     	;# 
  3701  0F56                     	;# 
  3702  0F57                     	;# 
  3703  0F65                     	;# 
  3704  0F68                     	;# 
  3705  0F69                     	;# 
  3706  0F6A                     	;# 
  3707  0F6B                     	;# 
  3708  0FE4                     	;# 
  3709  0FE5                     	;# 
  3710  0FE6                     	;# 
  3711  0FE7                     	;# 
  3712  0FE8                     	;# 
  3713  0FE9                     	;# 
  3714  0FEA                     	;# 
  3715  0FEB                     	;# 
  3716  0FED                     	;# 
  3717  0FEE                     	;# 
  3718  0FEF                     	;# 
  3719  0000                     	;# 
  3720  0001                     	;# 
  3721  0002                     	;# 
  3722  0003                     	;# 
  3723  0004                     	;# 
  3724  0005                     	;# 
  3725  0006                     	;# 
  3726  0007                     	;# 
  3727  0008                     	;# 
  3728  0009                     	;# 
  3729  000A                     	;# 
  3730  000B                     	;# 
  3731  000C                     	;# 
  3732  000D                     	;# 
  3733  000E                     	;# 
  3734  0010                     	;# 
  3735  0011                     	;# 
  3736  0012                     	;# 
  3737  0013                     	;# 
  3738  0016                     	;# 
  3739  0017                     	;# 
  3740  0018                     	;# 
  3741  001C                     	;# 
  3742  001C                     	;# 
  3743  001D                     	;# 
  3744  001D                     	;# 
  3745  001E                     	;# 
  3746  001F                     	;# 
  3747  008C                     	;# 
  3748  008C                     	;# 
  3749  008D                     	;# 
  3750  008E                     	;# 
  3751  008E                     	;# 
  3752  008F                     	;# 
  3753  0090                     	;# 
  3754  0090                     	;# 
  3755  0091                     	;# 
  3756  0093                     	;# 
  3757  0094                     	;# 
  3758  0095                     	;# 
  3759  0096                     	;# 
  3760  0097                     	;# 
  3761  0098                     	;# 
  3762  0099                     	;# 
  3763  009A                     	;# 
  3764  009B                     	;# 
  3765  009C                     	;# 
  3766  009D                     	;# 
  3767  009E                     	;# 
  3768  010C                     	;# 
  3769  010D                     	;# 
  3770  010E                     	;# 
  3771  010E                     	;# 
  3772  010F                     	;# 
  3773  0110                     	;# 
  3774  0110                     	;# 
  3775  0111                     	;# 
  3776  0112                     	;# 
  3777  0112                     	;# 
  3778  0113                     	;# 
  3779  0114                     	;# 
  3780  0114                     	;# 
  3781  0115                     	;# 
  3782  0116                     	;# 
  3783  0116                     	;# 
  3784  0117                     	;# 
  3785  0119                     	;# 
  3786  0119                     	;# 
  3787  0119                     	;# 
  3788  011A                     	;# 
  3789  011A                     	;# 
  3790  011A                     	;# 
  3791  011B                     	;# 
  3792  011B                     	;# 
  3793  011B                     	;# 
  3794  011B                     	;# 
  3795  011B                     	;# 
  3796  011C                     	;# 
  3797  011C                     	;# 
  3798  011C                     	;# 
  3799  011D                     	;# 
  3800  011D                     	;# 
  3801  011D                     	;# 
  3802  011E                     	;# 
  3803  011E                     	;# 
  3804  011E                     	;# 
  3805  011F                     	;# 
  3806  011F                     	;# 
  3807  011F                     	;# 
  3808  011F                     	;# 
  3809  011F                     	;# 
  3810  018C                     	;# 
  3811  018D                     	;# 
  3812  018E                     	;# 
  3813  018F                     	;# 
  3814  0190                     	;# 
  3815  0191                     	;# 
  3816  0192                     	;# 
  3817  0196                     	;# 
  3818  0197                     	;# 
  3819  0198                     	;# 
  3820  0199                     	;# 
  3821  019A                     	;# 
  3822  019B                     	;# 
  3823  019C                     	;# 
  3824  020C                     	;# 
  3825  020C                     	;# 
  3826  020D                     	;# 
  3827  020E                     	;# 
  3828  020F                     	;# 
  3829  020F                     	;# 
  3830  0210                     	;# 
  3831  0210                     	;# 
  3832  0211                     	;# 
  3833  0211                     	;# 
  3834  0212                     	;# 
  3835  0212                     	;# 
  3836  0213                     	;# 
  3837  0214                     	;# 
  3838  0215                     	;# 
  3839  0215                     	;# 
  3840  0216                     	;# 
  3841  0216                     	;# 
  3842  0217                     	;# 
  3843  0217                     	;# 
  3844  0218                     	;# 
  3845  0218                     	;# 
  3846  0219                     	;# 
  3847  021A                     	;# 
  3848  021B                     	;# 
  3849  021B                     	;# 
  3850  021C                     	;# 
  3851  021C                     	;# 
  3852  021D                     	;# 
  3853  021D                     	;# 
  3854  021E                     	;# 
  3855  021F                     	;# 
  3856  028C                     	;# 
  3857  028C                     	;# 
  3858  028D                     	;# 
  3859  028D                     	;# 
  3860  028E                     	;# 
  3861  028F                     	;# 
  3862  0290                     	;# 
  3863  0290                     	;# 
  3864  0291                     	;# 
  3865  0292                     	;# 
  3866  0292                     	;# 
  3867  0293                     	;# 
  3868  0293                     	;# 
  3869  0294                     	;# 
  3870  0295                     	;# 
  3871  0296                     	;# 
  3872  0296                     	;# 
  3873  0297                     	;# 
  3874  0298                     	;# 
  3875  0298                     	;# 
  3876  0299                     	;# 
  3877  0299                     	;# 
  3878  029A                     	;# 
  3879  029B                     	;# 
  3880  029C                     	;# 
  3881  029C                     	;# 
  3882  029D                     	;# 
  3883  030C                     	;# 
  3884  030C                     	;# 
  3885  030D                     	;# 
  3886  030E                     	;# 
  3887  030F                     	;# 
  3888  0310                     	;# 
  3889  0310                     	;# 
  3890  0311                     	;# 
  3891  0312                     	;# 
  3892  0313                     	;# 
  3893  0314                     	;# 
  3894  0314                     	;# 
  3895  0315                     	;# 
  3896  0316                     	;# 
  3897  0317                     	;# 
  3898  0318                     	;# 
  3899  0318                     	;# 
  3900  0319                     	;# 
  3901  031A                     	;# 
  3902  031B                     	;# 
  3903  031C                     	;# 
  3904  031C                     	;# 
  3905  031D                     	;# 
  3906  031E                     	;# 
  3907  031F                     	;# 
  3908  038C                     	;# 
  3909  038D                     	;# 
  3910  038E                     	;# 
  3911  0390                     	;# 
  3912  0391                     	;# 
  3913  0392                     	;# 
  3914  040C                     	;# 
  3915  040D                     	;# 
  3916  040E                     	;# 
  3917  040F                     	;# 
  3918  0410                     	;# 
  3919  0411                     	;# 
  3920  0416                     	;# 
  3921  0416                     	;# 
  3922  0417                     	;# 
  3923  0418                     	;# 
  3924  0418                     	;# 
  3925  0419                     	;# 
  3926  041A                     	;# 
  3927  041A                     	;# 
  3928  041B                     	;# 
  3929  041C                     	;# 
  3930  041C                     	;# 
  3931  041D                     	;# 
  3932  041E                     	;# 
  3933  041F                     	;# 
  3934  048C                     	;# 
  3935  048C                     	;# 
  3936  048D                     	;# 
  3937  048E                     	;# 
  3938  048F                     	;# 
  3939  048F                     	;# 
  3940  0490                     	;# 
  3941  0491                     	;# 
  3942  0492                     	;# 
  3943  0492                     	;# 
  3944  0493                     	;# 
  3945  0494                     	;# 
  3946  0495                     	;# 
  3947  0495                     	;# 
  3948  0496                     	;# 
  3949  0497                     	;# 
  3950  0498                     	;# 
  3951  0499                     	;# 
  3952  049A                     	;# 
  3953  049B                     	;# 
  3954  049C                     	;# 
  3955  049D                     	;# 
  3956  050C                     	;# 
  3957  050C                     	;# 
  3958  050D                     	;# 
  3959  050E                     	;# 
  3960  050F                     	;# 
  3961  050F                     	;# 
  3962  0510                     	;# 
  3963  0511                     	;# 
  3964  0512                     	;# 
  3965  0512                     	;# 
  3966  0513                     	;# 
  3967  0514                     	;# 
  3968  0515                     	;# 
  3969  0515                     	;# 
  3970  0516                     	;# 
  3971  0517                     	;# 
  3972  0518                     	;# 
  3973  0519                     	;# 
  3974  051A                     	;# 
  3975  051B                     	;# 
  3976  051C                     	;# 
  3977  051D                     	;# 
  3978  058C                     	;# 
  3979  058C                     	;# 
  3980  058D                     	;# 
  3981  058E                     	;# 
  3982  058F                     	;# 
  3983  058F                     	;# 
  3984  0590                     	;# 
  3985  0591                     	;# 
  3986  0592                     	;# 
  3987  0593                     	;# 
  3988  060C                     	;# 
  3989  060D                     	;# 
  3990  060E                     	;# 
  3991  060F                     	;# 
  3992  0610                     	;# 
  3993  0611                     	;# 
  3994  0612                     	;# 
  3995  0613                     	;# 
  3996  0614                     	;# 
  3997  0616                     	;# 
  3998  0617                     	;# 
  3999  0618                     	;# 
  4000  0619                     	;# 
  4001  061A                     	;# 
  4002  061B                     	;# 
  4003  061C                     	;# 
  4004  061D                     	;# 
  4005  061E                     	;# 
  4006  068C                     	;# 
  4007  068D                     	;# 
  4008  068E                     	;# 
  4009  068F                     	;# 
  4010  0690                     	;# 
  4011  0691                     	;# 
  4012  0692                     	;# 
  4013  0693                     	;# 
  4014  0694                     	;# 
  4015  070C                     	;# 
  4016  070D                     	;# 
  4017  070E                     	;# 
  4018  070F                     	;# 
  4019  0710                     	;# 
  4020  0711                     	;# 
  4021  0712                     	;# 
  4022  0713                     	;# 
  4023  0714                     	;# 
  4024  0716                     	;# 
  4025  0717                     	;# 
  4026  0718                     	;# 
  4027  0719                     	;# 
  4028  071A                     	;# 
  4029  071B                     	;# 
  4030  071C                     	;# 
  4031  071D                     	;# 
  4032  071E                     	;# 
  4033  0796                     	;# 
  4034  0797                     	;# 
  4035  0798                     	;# 
  4036  0799                     	;# 
  4037  079A                     	;# 
  4038  079B                     	;# 
  4039  080C                     	;# 
  4040  080D                     	;# 
  4041  080E                     	;# 
  4042  080F                     	;# 
  4043  0810                     	;# 
  4044  0811                     	;# 
  4045  0812                     	;# 
  4046  0813                     	;# 
  4047  0814                     	;# 
  4048  081A                     	;# 
  4049  081B                     	;# 
  4050  081C                     	;# 
  4051  081D                     	;# 
  4052  081E                     	;# 
  4053  081F                     	;# 
  4054  088C                     	;# 
  4055  088D                     	;# 
  4056  088E                     	;# 
  4057  088F                     	;# 
  4058  0890                     	;# 
  4059  0891                     	;# 
  4060  0892                     	;# 
  4061  0893                     	;# 
  4062  0895                     	;# 
  4063  0896                     	;# 
  4064  0897                     	;# 
  4065  0898                     	;# 
  4066  0899                     	;# 
  4067  089A                     	;# 
  4068  089B                     	;# 
  4069  090C                     	;# 
  4070  090E                     	;# 
  4071  090F                     	;# 
  4072  091F                     	;# 
  4073  091F                     	;# 
  4074  098F                     	;# 
  4075  098F                     	;# 
  4076  0990                     	;# 
  4077  0991                     	;# 
  4078  0992                     	;# 
  4079  0993                     	;# 
  4080  0994                     	;# 
  4081  0995                     	;# 
  4082  0996                     	;# 
  4083  0997                     	;# 
  4084  0E0F                     	;# 
  4085  0E10                     	;# 
  4086  0E11                     	;# 
  4087  0E12                     	;# 
  4088  0E13                     	;# 
  4089  0E14                     	;# 
  4090  0E15                     	;# 
  4091  0E16                     	;# 
  4092  0E17                     	;# 
  4093  0E18                     	;# 
  4094  0E19                     	;# 
  4095  0E1A                     	;# 
  4096  0E1B                     	;# 
  4097  0E1C                     	;# 
  4098  0E1D                     	;# 
  4099  0E1E                     	;# 
  4100  0E1F                     	;# 
  4101  0E20                     	;# 
  4102  0E21                     	;# 
  4103  0E22                     	;# 
  4104  0E23                     	;# 
  4105  0E24                     	;# 
  4106  0E25                     	;# 
  4107  0E26                     	;# 
  4108  0E27                     	;# 
  4109  0E28                     	;# 
  4110  0E29                     	;# 
  4111  0E2A                     	;# 
  4112  0E2B                     	;# 
  4113  0E2C                     	;# 
  4114  0E2D                     	;# 
  4115  0E2E                     	;# 
  4116  0E2F                     	;# 
  4117  0E30                     	;# 
  4118  0E31                     	;# 
  4119  0E32                     	;# 
  4120  0E33                     	;# 
  4121  0E34                     	;# 
  4122  0E35                     	;# 
  4123  0E36                     	;# 
  4124  0E37                     	;# 
  4125  0E8F                     	;# 
  4126  0E90                     	;# 
  4127  0E91                     	;# 
  4128  0E92                     	;# 
  4129  0E93                     	;# 
  4130  0E94                     	;# 
  4131  0E95                     	;# 
  4132  0E96                     	;# 
  4133  0E97                     	;# 
  4134  0E9C                     	;# 
  4135  0E9D                     	;# 
  4136  0E9E                     	;# 
  4137  0EA1                     	;# 
  4138  0EA2                     	;# 
  4139  0EA3                     	;# 
  4140  0EA4                     	;# 
  4141  0EA5                     	;# 
  4142  0EA9                     	;# 
  4143  0EAA                     	;# 
  4144  0EAB                     	;# 
  4145  0EAC                     	;# 
  4146  0EB1                     	;# 
  4147  0EB2                     	;# 
  4148  0EB3                     	;# 
  4149  0EB8                     	;# 
  4150  0EB9                     	;# 
  4151  0EBA                     	;# 
  4152  0EBB                     	;# 
  4153  0EBC                     	;# 
  4154  0EBD                     	;# 
  4155  0EBE                     	;# 
  4156  0EC3                     	;# 
  4157  0EC5                     	;# 
  4158  0EC6                     	;# 
  4159  0EC7                     	;# 
  4160  0EC8                     	;# 
  4161  0EC9                     	;# 
  4162  0ECA                     	;# 
  4163  0ECB                     	;# 
  4164  0ECC                     	;# 
  4165  0F10                     	;# 
  4166  0F11                     	;# 
  4167  0F12                     	;# 
  4168  0F13                     	;# 
  4169  0F14                     	;# 
  4170  0F15                     	;# 
  4171  0F16                     	;# 
  4172  0F17                     	;# 
  4173  0F18                     	;# 
  4174  0F19                     	;# 
  4175  0F1A                     	;# 
  4176  0F1B                     	;# 
  4177  0F1C                     	;# 
  4178  0F1D                     	;# 
  4179  0F1E                     	;# 
  4180  0F1F                     	;# 
  4181  0F20                     	;# 
  4182  0F21                     	;# 
  4183  0F22                     	;# 
  4184  0F23                     	;# 
  4185  0F24                     	;# 
  4186  0F25                     	;# 
  4187  0F26                     	;# 
  4188  0F27                     	;# 
  4189  0F38                     	;# 
  4190  0F39                     	;# 
  4191  0F3A                     	;# 
  4192  0F3B                     	;# 
  4193  0F3C                     	;# 
  4194  0F3D                     	;# 
  4195  0F3E                     	;# 
  4196  0F3F                     	;# 
  4197  0F40                     	;# 
  4198  0F41                     	;# 
  4199  0F43                     	;# 
  4200  0F44                     	;# 
  4201  0F45                     	;# 
  4202  0F46                     	;# 
  4203  0F47                     	;# 
  4204  0F48                     	;# 
  4205  0F49                     	;# 
  4206  0F4A                     	;# 
  4207  0F4B                     	;# 
  4208  0F4C                     	;# 
  4209  0F4E                     	;# 
  4210  0F4F                     	;# 
  4211  0F50                     	;# 
  4212  0F51                     	;# 
  4213  0F52                     	;# 
  4214  0F53                     	;# 
  4215  0F54                     	;# 
  4216  0F55                     	;# 
  4217  0F56                     	;# 
  4218  0F57                     	;# 
  4219  0F65                     	;# 
  4220  0F68                     	;# 
  4221  0F69                     	;# 
  4222  0F6A                     	;# 
  4223  0F6B                     	;# 
  4224  0FE4                     	;# 
  4225  0FE5                     	;# 
  4226  0FE6                     	;# 
  4227  0FE7                     	;# 
  4228  0FE8                     	;# 
  4229  0FE9                     	;# 
  4230  0FEA                     	;# 
  4231  0FEB                     	;# 
  4232  0FED                     	;# 
  4233  0FEE                     	;# 
  4234  0FEF                     	;# 
  4235  0000                     	;# 
  4236  0001                     	;# 
  4237  0002                     	;# 
  4238  0003                     	;# 
  4239  0004                     	;# 
  4240  0005                     	;# 
  4241  0006                     	;# 
  4242  0007                     	;# 
  4243  0008                     	;# 
  4244  0009                     	;# 
  4245  000A                     	;# 
  4246  000B                     	;# 
  4247  000C                     	;# 
  4248  000D                     	;# 
  4249  000E                     	;# 
  4250  0010                     	;# 
  4251  0011                     	;# 
  4252  0012                     	;# 
  4253  0013                     	;# 
  4254  0016                     	;# 
  4255  0017                     	;# 
  4256  0018                     	;# 
  4257  001C                     	;# 
  4258  001C                     	;# 
  4259  001D                     	;# 
  4260  001D                     	;# 
  4261  001E                     	;# 
  4262  001F                     	;# 
  4263  008C                     	;# 
  4264  008C                     	;# 
  4265  008D                     	;# 
  4266  008E                     	;# 
  4267  008E                     	;# 
  4268  008F                     	;# 
  4269  0090                     	;# 
  4270  0090                     	;# 
  4271  0091                     	;# 
  4272  0093                     	;# 
  4273  0094                     	;# 
  4274  0095                     	;# 
  4275  0096                     	;# 
  4276  0097                     	;# 
  4277  0098                     	;# 
  4278  0099                     	;# 
  4279  009A                     	;# 
  4280  009B                     	;# 
  4281  009C                     	;# 
  4282  009D                     	;# 
  4283  009E                     	;# 
  4284  010C                     	;# 
  4285  010D                     	;# 
  4286  010E                     	;# 
  4287  010E                     	;# 
  4288  010F                     	;# 
  4289  0110                     	;# 
  4290  0110                     	;# 
  4291  0111                     	;# 
  4292  0112                     	;# 
  4293  0112                     	;# 
  4294  0113                     	;# 
  4295  0114                     	;# 
  4296  0114                     	;# 
  4297  0115                     	;# 
  4298  0116                     	;# 
  4299  0116                     	;# 
  4300  0117                     	;# 
  4301  0119                     	;# 
  4302  0119                     	;# 
  4303  0119                     	;# 
  4304  011A                     	;# 
  4305  011A                     	;# 
  4306  011A                     	;# 
  4307  011B                     	;# 
  4308  011B                     	;# 
  4309  011B                     	;# 
  4310  011B                     	;# 
  4311  011B                     	;# 
  4312  011C                     	;# 
  4313  011C                     	;# 
  4314  011C                     	;# 
  4315  011D                     	;# 
  4316  011D                     	;# 
  4317  011D                     	;# 
  4318  011E                     	;# 
  4319  011E                     	;# 
  4320  011E                     	;# 
  4321  011F                     	;# 
  4322  011F                     	;# 
  4323  011F                     	;# 
  4324  011F                     	;# 
  4325  011F                     	;# 
  4326  018C                     	;# 
  4327  018D                     	;# 
  4328  018E                     	;# 
  4329  018F                     	;# 
  4330  0190                     	;# 
  4331  0191                     	;# 
  4332  0192                     	;# 
  4333  0196                     	;# 
  4334  0197                     	;# 
  4335  0198                     	;# 
  4336  0199                     	;# 
  4337  019A                     	;# 
  4338  019B                     	;# 
  4339  019C                     	;# 
  4340  020C                     	;# 
  4341  020C                     	;# 
  4342  020D                     	;# 
  4343  020E                     	;# 
  4344  020F                     	;# 
  4345  020F                     	;# 
  4346  0210                     	;# 
  4347  0210                     	;# 
  4348  0211                     	;# 
  4349  0211                     	;# 
  4350  0212                     	;# 
  4351  0212                     	;# 
  4352  0213                     	;# 
  4353  0214                     	;# 
  4354  0215                     	;# 
  4355  0215                     	;# 
  4356  0216                     	;# 
  4357  0216                     	;# 
  4358  0217                     	;# 
  4359  0217                     	;# 
  4360  0218                     	;# 
  4361  0218                     	;# 
  4362  0219                     	;# 
  4363  021A                     	;# 
  4364  021B                     	;# 
  4365  021B                     	;# 
  4366  021C                     	;# 
  4367  021C                     	;# 
  4368  021D                     	;# 
  4369  021D                     	;# 
  4370  021E                     	;# 
  4371  021F                     	;# 
  4372  028C                     	;# 
  4373  028C                     	;# 
  4374  028D                     	;# 
  4375  028D                     	;# 
  4376  028E                     	;# 
  4377  028F                     	;# 
  4378  0290                     	;# 
  4379  0290                     	;# 
  4380  0291                     	;# 
  4381  0292                     	;# 
  4382  0292                     	;# 
  4383  0293                     	;# 
  4384  0293                     	;# 
  4385  0294                     	;# 
  4386  0295                     	;# 
  4387  0296                     	;# 
  4388  0296                     	;# 
  4389  0297                     	;# 
  4390  0298                     	;# 
  4391  0298                     	;# 
  4392  0299                     	;# 
  4393  0299                     	;# 
  4394  029A                     	;# 
  4395  029B                     	;# 
  4396  029C                     	;# 
  4397  029C                     	;# 
  4398  029D                     	;# 
  4399  030C                     	;# 
  4400  030C                     	;# 
  4401  030D                     	;# 
  4402  030E                     	;# 
  4403  030F                     	;# 
  4404  0310                     	;# 
  4405  0310                     	;# 
  4406  0311                     	;# 
  4407  0312                     	;# 
  4408  0313                     	;# 
  4409  0314                     	;# 
  4410  0314                     	;# 
  4411  0315                     	;# 
  4412  0316                     	;# 
  4413  0317                     	;# 
  4414  0318                     	;# 
  4415  0318                     	;# 
  4416  0319                     	;# 
  4417  031A                     	;# 
  4418  031B                     	;# 
  4419  031C                     	;# 
  4420  031C                     	;# 
  4421  031D                     	;# 
  4422  031E                     	;# 
  4423  031F                     	;# 
  4424  038C                     	;# 
  4425  038D                     	;# 
  4426  038E                     	;# 
  4427  0390                     	;# 
  4428  0391                     	;# 
  4429  0392                     	;# 
  4430  040C                     	;# 
  4431  040D                     	;# 
  4432  040E                     	;# 
  4433  040F                     	;# 
  4434  0410                     	;# 
  4435  0411                     	;# 
  4436  0416                     	;# 
  4437  0416                     	;# 
  4438  0417                     	;# 
  4439  0418                     	;# 
  4440  0418                     	;# 
  4441  0419                     	;# 
  4442  041A                     	;# 
  4443  041A                     	;# 
  4444  041B                     	;# 
  4445  041C                     	;# 
  4446  041C                     	;# 
  4447  041D                     	;# 
  4448  041E                     	;# 
  4449  041F                     	;# 
  4450  048C                     	;# 
  4451  048C                     	;# 
  4452  048D                     	;# 
  4453  048E                     	;# 
  4454  048F                     	;# 
  4455  048F                     	;# 
  4456  0490                     	;# 
  4457  0491                     	;# 
  4458  0492                     	;# 
  4459  0492                     	;# 
  4460  0493                     	;# 
  4461  0494                     	;# 
  4462  0495                     	;# 
  4463  0495                     	;# 
  4464  0496                     	;# 
  4465  0497                     	;# 
  4466  0498                     	;# 
  4467  0499                     	;# 
  4468  049A                     	;# 
  4469  049B                     	;# 
  4470  049C                     	;# 
  4471  049D                     	;# 
  4472  050C                     	;# 
  4473  050C                     	;# 
  4474  050D                     	;# 
  4475  050E                     	;# 
  4476  050F                     	;# 
  4477  050F                     	;# 
  4478  0510                     	;# 
  4479  0511                     	;# 
  4480  0512                     	;# 
  4481  0512                     	;# 
  4482  0513                     	;# 
  4483  0514                     	;# 
  4484  0515                     	;# 
  4485  0515                     	;# 
  4486  0516                     	;# 
  4487  0517                     	;# 
  4488  0518                     	;# 
  4489  0519                     	;# 
  4490  051A                     	;# 
  4491  051B                     	;# 
  4492  051C                     	;# 
  4493  051D                     	;# 
  4494  058C                     	;# 
  4495  058C                     	;# 
  4496  058D                     	;# 
  4497  058E                     	;# 
  4498  058F                     	;# 
  4499  058F                     	;# 
  4500  0590                     	;# 
  4501  0591                     	;# 
  4502  0592                     	;# 
  4503  0593                     	;# 
  4504  060C                     	;# 
  4505  060D                     	;# 
  4506  060E                     	;# 
  4507  060F                     	;# 
  4508  0610                     	;# 
  4509  0611                     	;# 
  4510  0612                     	;# 
  4511  0613                     	;# 
  4512  0614                     	;# 
  4513  0616                     	;# 
  4514  0617                     	;# 
  4515  0618                     	;# 
  4516  0619                     	;# 
  4517  061A                     	;# 
  4518  061B                     	;# 
  4519  061C                     	;# 
  4520  061D                     	;# 
  4521  061E                     	;# 
  4522  068C                     	;# 
  4523  068D                     	;# 
  4524  068E                     	;# 
  4525  068F                     	;# 
  4526  0690                     	;# 
  4527  0691                     	;# 
  4528  0692                     	;# 
  4529  0693                     	;# 
  4530  0694                     	;# 
  4531  070C                     	;# 
  4532  070D                     	;# 
  4533  070E                     	;# 
  4534  070F                     	;# 
  4535  0710                     	;# 
  4536  0711                     	;# 
  4537  0712                     	;# 
  4538  0713                     	;# 
  4539  0714                     	;# 
  4540  0716                     	;# 
  4541  0717                     	;# 
  4542  0718                     	;# 
  4543  0719                     	;# 
  4544  071A                     	;# 
  4545  071B                     	;# 
  4546  071C                     	;# 
  4547  071D                     	;# 
  4548  071E                     	;# 
  4549  0796                     	;# 
  4550  0797                     	;# 
  4551  0798                     	;# 
  4552  0799                     	;# 
  4553  079A                     	;# 
  4554  079B                     	;# 
  4555  080C                     	;# 
  4556  080D                     	;# 
  4557  080E                     	;# 
  4558  080F                     	;# 
  4559  0810                     	;# 
  4560  0811                     	;# 
  4561  0812                     	;# 
  4562  0813                     	;# 
  4563  0814                     	;# 
  4564  081A                     	;# 
  4565  081B                     	;# 
  4566  081C                     	;# 
  4567  081D                     	;# 
  4568  081E                     	;# 
  4569  081F                     	;# 
  4570  088C                     	;# 
  4571  088D                     	;# 
  4572  088E                     	;# 
  4573  088F                     	;# 
  4574  0890                     	;# 
  4575  0891                     	;# 
  4576  0892                     	;# 
  4577  0893                     	;# 
  4578  0895                     	;# 
  4579  0896                     	;# 
  4580  0897                     	;# 
  4581  0898                     	;# 
  4582  0899                     	;# 
  4583  089A                     	;# 
  4584  089B                     	;# 
  4585  090C                     	;# 
  4586  090E                     	;# 
  4587  090F                     	;# 
  4588  091F                     	;# 
  4589  091F                     	;# 
  4590  098F                     	;# 
  4591  098F                     	;# 
  4592  0990                     	;# 
  4593  0991                     	;# 
  4594  0992                     	;# 
  4595  0993                     	;# 
  4596  0994                     	;# 
  4597  0995                     	;# 
  4598  0996                     	;# 
  4599  0997                     	;# 
  4600  0E0F                     	;# 
  4601  0E10                     	;# 
  4602  0E11                     	;# 
  4603  0E12                     	;# 
  4604  0E13                     	;# 
  4605  0E14                     	;# 
  4606  0E15                     	;# 
  4607  0E16                     	;# 
  4608  0E17                     	;# 
  4609  0E18                     	;# 
  4610  0E19                     	;# 
  4611  0E1A                     	;# 
  4612  0E1B                     	;# 
  4613  0E1C                     	;# 
  4614  0E1D                     	;# 
  4615  0E1E                     	;# 
  4616  0E1F                     	;# 
  4617  0E20                     	;# 
  4618  0E21                     	;# 
  4619  0E22                     	;# 
  4620  0E23                     	;# 
  4621  0E24                     	;# 
  4622  0E25                     	;# 
  4623  0E26                     	;# 
  4624  0E27                     	;# 
  4625  0E28                     	;# 
  4626  0E29                     	;# 
  4627  0E2A                     	;# 
  4628  0E2B                     	;# 
  4629  0E2C                     	;# 
  4630  0E2D                     	;# 
  4631  0E2E                     	;# 
  4632  0E2F                     	;# 
  4633  0E30                     	;# 
  4634  0E31                     	;# 
  4635  0E32                     	;# 
  4636  0E33                     	;# 
  4637  0E34                     	;# 
  4638  0E35                     	;# 
  4639  0E36                     	;# 
  4640  0E37                     	;# 
  4641  0E8F                     	;# 
  4642  0E90                     	;# 
  4643  0E91                     	;# 
  4644  0E92                     	;# 
  4645  0E93                     	;# 
  4646  0E94                     	;# 
  4647  0E95                     	;# 
  4648  0E96                     	;# 
  4649  0E97                     	;# 
  4650  0E9C                     	;# 
  4651  0E9D                     	;# 
  4652  0E9E                     	;# 
  4653  0EA1                     	;# 
  4654  0EA2                     	;# 
  4655  0EA3                     	;# 
  4656  0EA4                     	;# 
  4657  0EA5                     	;# 
  4658  0EA9                     	;# 
  4659  0EAA                     	;# 
  4660  0EAB                     	;# 
  4661  0EAC                     	;# 
  4662  0EB1                     	;# 
  4663  0EB2                     	;# 
  4664  0EB3                     	;# 
  4665  0EB8                     	;# 
  4666  0EB9                     	;# 
  4667  0EBA                     	;# 
  4668  0EBB                     	;# 
  4669  0EBC                     	;# 
  4670  0EBD                     	;# 
  4671  0EBE                     	;# 
  4672  0EC3                     	;# 
  4673  0EC5                     	;# 
  4674  0EC6                     	;# 
  4675  0EC7                     	;# 
  4676  0EC8                     	;# 
  4677  0EC9                     	;# 
  4678  0ECA                     	;# 
  4679  0ECB                     	;# 
  4680  0ECC                     	;# 
  4681  0F10                     	;# 
  4682  0F11                     	;# 
  4683  0F12                     	;# 
  4684  0F13                     	;# 
  4685  0F14                     	;# 
  4686  0F15                     	;# 
  4687  0F16                     	;# 
  4688  0F17                     	;# 
  4689  0F18                     	;# 
  4690  0F19                     	;# 
  4691  0F1A                     	;# 
  4692  0F1B                     	;# 
  4693  0F1C                     	;# 
  4694  0F1D                     	;# 
  4695  0F1E                     	;# 
  4696  0F1F                     	;# 
  4697  0F20                     	;# 
  4698  0F21                     	;# 
  4699  0F22                     	;# 
  4700  0F23                     	;# 
  4701  0F24                     	;# 
  4702  0F25                     	;# 
  4703  0F26                     	;# 
  4704  0F27                     	;# 
  4705  0F38                     	;# 
  4706  0F39                     	;# 
  4707  0F3A                     	;# 
  4708  0F3B                     	;# 
  4709  0F3C                     	;# 
  4710  0F3D                     	;# 
  4711  0F3E                     	;# 
  4712  0F3F                     	;# 
  4713  0F40                     	;# 
  4714  0F41                     	;# 
  4715  0F43                     	;# 
  4716  0F44                     	;# 
  4717  0F45                     	;# 
  4718  0F46                     	;# 
  4719  0F47                     	;# 
  4720  0F48                     	;# 
  4721  0F49                     	;# 
  4722  0F4A                     	;# 
  4723  0F4B                     	;# 
  4724  0F4C                     	;# 
  4725  0F4E                     	;# 
  4726  0F4F                     	;# 
  4727  0F50                     	;# 
  4728  0F51                     	;# 
  4729  0F52                     	;# 
  4730  0F53                     	;# 
  4731  0F54                     	;# 
  4732  0F55                     	;# 
  4733  0F56                     	;# 
  4734  0F57                     	;# 
  4735  0F65                     	;# 
  4736  0F68                     	;# 
  4737  0F69                     	;# 
  4738  0F6A                     	;# 
  4739  0F6B                     	;# 
  4740  0FE4                     	;# 
  4741  0FE5                     	;# 
  4742  0FE6                     	;# 
  4743  0FE7                     	;# 
  4744  0FE8                     	;# 
  4745  0FE9                     	;# 
  4746  0FEA                     	;# 
  4747  0FEB                     	;# 
  4748  0FED                     	;# 
  4749  0FEE                     	;# 
  4750  0FEF                     	;# 
  4751  0000                     	;# 
  4752  0001                     	;# 
  4753  0002                     	;# 
  4754  0003                     	;# 
  4755  0004                     	;# 
  4756  0005                     	;# 
  4757  0006                     	;# 
  4758  0007                     	;# 
  4759  0008                     	;# 
  4760  0009                     	;# 
  4761  000A                     	;# 
  4762  000B                     	;# 
  4763  000C                     	;# 
  4764  000D                     	;# 
  4765  000E                     	;# 
  4766  0010                     	;# 
  4767  0011                     	;# 
  4768  0012                     	;# 
  4769  0013                     	;# 
  4770  0016                     	;# 
  4771  0017                     	;# 
  4772  0018                     	;# 
  4773  001C                     	;# 
  4774  001C                     	;# 
  4775  001D                     	;# 
  4776  001D                     	;# 
  4777  001E                     	;# 
  4778  001F                     	;# 
  4779  008C                     	;# 
  4780  008C                     	;# 
  4781  008D                     	;# 
  4782  008E                     	;# 
  4783  008E                     	;# 
  4784  008F                     	;# 
  4785  0090                     	;# 
  4786  0090                     	;# 
  4787  0091                     	;# 
  4788  0093                     	;# 
  4789  0094                     	;# 
  4790  0095                     	;# 
  4791  0096                     	;# 
  4792  0097                     	;# 
  4793  0098                     	;# 
  4794  0099                     	;# 
  4795  009A                     	;# 
  4796  009B                     	;# 
  4797  009C                     	;# 
  4798  009D                     	;# 
  4799  009E                     	;# 
  4800  010C                     	;# 
  4801  010D                     	;# 
  4802  010E                     	;# 
  4803  010E                     	;# 
  4804  010F                     	;# 
  4805  0110                     	;# 
  4806  0110                     	;# 
  4807  0111                     	;# 
  4808  0112                     	;# 
  4809  0112                     	;# 
  4810  0113                     	;# 
  4811  0114                     	;# 
  4812  0114                     	;# 
  4813  0115                     	;# 
  4814  0116                     	;# 
  4815  0116                     	;# 
  4816  0117                     	;# 
  4817  0119                     	;# 
  4818  0119                     	;# 
  4819  0119                     	;# 
  4820  011A                     	;# 
  4821  011A                     	;# 
  4822  011A                     	;# 
  4823  011B                     	;# 
  4824  011B                     	;# 
  4825  011B                     	;# 
  4826  011B                     	;# 
  4827  011B                     	;# 
  4828  011C                     	;# 
  4829  011C                     	;# 
  4830  011C                     	;# 
  4831  011D                     	;# 
  4832  011D                     	;# 
  4833  011D                     	;# 
  4834  011E                     	;# 
  4835  011E                     	;# 
  4836  011E                     	;# 
  4837  011F                     	;# 
  4838  011F                     	;# 
  4839  011F                     	;# 
  4840  011F                     	;# 
  4841  011F                     	;# 
  4842  018C                     	;# 
  4843  018D                     	;# 
  4844  018E                     	;# 
  4845  018F                     	;# 
  4846  0190                     	;# 
  4847  0191                     	;# 
  4848  0192                     	;# 
  4849  0196                     	;# 
  4850  0197                     	;# 
  4851  0198                     	;# 
  4852  0199                     	;# 
  4853  019A                     	;# 
  4854  019B                     	;# 
  4855  019C                     	;# 
  4856  020C                     	;# 
  4857  020C                     	;# 
  4858  020D                     	;# 
  4859  020E                     	;# 
  4860  020F                     	;# 
  4861  020F                     	;# 
  4862  0210                     	;# 
  4863  0210                     	;# 
  4864  0211                     	;# 
  4865  0211                     	;# 
  4866  0212                     	;# 
  4867  0212                     	;# 
  4868  0213                     	;# 
  4869  0214                     	;# 
  4870  0215                     	;# 
  4871  0215                     	;# 
  4872  0216                     	;# 
  4873  0216                     	;# 
  4874  0217                     	;# 
  4875  0217                     	;# 
  4876  0218                     	;# 
  4877  0218                     	;# 
  4878  0219                     	;# 
  4879  021A                     	;# 
  4880  021B                     	;# 
  4881  021B                     	;# 
  4882  021C                     	;# 
  4883  021C                     	;# 
  4884  021D                     	;# 
  4885  021D                     	;# 
  4886  021E                     	;# 
  4887  021F                     	;# 
  4888  028C                     	;# 
  4889  028C                     	;# 
  4890  028D                     	;# 
  4891  028D                     	;# 
  4892  028E                     	;# 
  4893  028F                     	;# 
  4894  0290                     	;# 
  4895  0290                     	;# 
  4896  0291                     	;# 
  4897  0292                     	;# 
  4898  0292                     	;# 
  4899  0293                     	;# 
  4900  0293                     	;# 
  4901  0294                     	;# 
  4902  0295                     	;# 
  4903  0296                     	;# 
  4904  0296                     	;# 
  4905  0297                     	;# 
  4906  0298                     	;# 
  4907  0298                     	;# 
  4908  0299                     	;# 
  4909  0299                     	;# 
  4910  029A                     	;# 
  4911  029B                     	;# 
  4912  029C                     	;# 
  4913  029C                     	;# 
  4914  029D                     	;# 
  4915  030C                     	;# 
  4916  030C                     	;# 
  4917  030D                     	;# 
  4918  030E                     	;# 
  4919  030F                     	;# 
  4920  0310                     	;# 
  4921  0310                     	;# 
  4922  0311                     	;# 
  4923  0312                     	;# 
  4924  0313                     	;# 
  4925  0314                     	;# 
  4926  0314                     	;# 
  4927  0315                     	;# 
  4928  0316                     	;# 
  4929  0317                     	;# 
  4930  0318                     	;# 
  4931  0318                     	;# 
  4932  0319                     	;# 
  4933  031A                     	;# 
  4934  031B                     	;# 
  4935  031C                     	;# 
  4936  031C                     	;# 
  4937  031D                     	;# 
  4938  031E                     	;# 
  4939  031F                     	;# 
  4940  038C                     	;# 
  4941  038D                     	;# 
  4942  038E                     	;# 
  4943  0390                     	;# 
  4944  0391                     	;# 
  4945  0392                     	;# 
  4946  040C                     	;# 
  4947  040D                     	;# 
  4948  040E                     	;# 
  4949  040F                     	;# 
  4950  0410                     	;# 
  4951  0411                     	;# 
  4952  0416                     	;# 
  4953  0416                     	;# 
  4954  0417                     	;# 
  4955  0418                     	;# 
  4956  0418                     	;# 
  4957  0419                     	;# 
  4958  041A                     	;# 
  4959  041A                     	;# 
  4960  041B                     	;# 
  4961  041C                     	;# 
  4962  041C                     	;# 
  4963  041D                     	;# 
  4964  041E                     	;# 
  4965  041F                     	;# 
  4966  048C                     	;# 
  4967  048C                     	;# 
  4968  048D                     	;# 
  4969  048E                     	;# 
  4970  048F                     	;# 
  4971  048F                     	;# 
  4972  0490                     	;# 
  4973  0491                     	;# 
  4974  0492                     	;# 
  4975  0492                     	;# 
  4976  0493                     	;# 
  4977  0494                     	;# 
  4978  0495                     	;# 
  4979  0495                     	;# 
  4980  0496                     	;# 
  4981  0497                     	;# 
  4982  0498                     	;# 
  4983  0499                     	;# 
  4984  049A                     	;# 
  4985  049B                     	;# 
  4986  049C                     	;# 
  4987  049D                     	;# 
  4988  050C                     	;# 
  4989  050C                     	;# 
  4990  050D                     	;# 
  4991  050E                     	;# 
  4992  050F                     	;# 
  4993  050F                     	;# 
  4994  0510                     	;# 
  4995  0511                     	;# 
  4996  0512                     	;# 
  4997  0512                     	;# 
  4998  0513                     	;# 
  4999  0514                     	;# 
  5000  0515                     	;# 
  5001  0515                     	;# 
  5002  0516                     	;# 
  5003  0517                     	;# 
  5004  0518                     	;# 
  5005  0519                     	;# 
  5006  051A                     	;# 
  5007  051B                     	;# 
  5008  051C                     	;# 
  5009  051D                     	;# 
  5010  058C                     	;# 
  5011  058C                     	;# 
  5012  058D                     	;# 
  5013  058E                     	;# 
  5014  058F                     	;# 
  5015  058F                     	;# 
  5016  0590                     	;# 
  5017  0591                     	;# 
  5018  0592                     	;# 
  5019  0593                     	;# 
  5020  060C                     	;# 
  5021  060D                     	;# 
  5022  060E                     	;# 
  5023  060F                     	;# 
  5024  0610                     	;# 
  5025  0611                     	;# 
  5026  0612                     	;# 
  5027  0613                     	;# 
  5028  0614                     	;# 
  5029  0616                     	;# 
  5030  0617                     	;# 
  5031  0618                     	;# 
  5032  0619                     	;# 
  5033  061A                     	;# 
  5034  061B                     	;# 
  5035  061C                     	;# 
  5036  061D                     	;# 
  5037  061E                     	;# 
  5038  068C                     	;# 
  5039  068D                     	;# 
  5040  068E                     	;# 
  5041  068F                     	;# 
  5042  0690                     	;# 
  5043  0691                     	;# 
  5044  0692                     	;# 
  5045  0693                     	;# 
  5046  0694                     	;# 
  5047  070C                     	;# 
  5048  070D                     	;# 
  5049  070E                     	;# 
  5050  070F                     	;# 
  5051  0710                     	;# 
  5052  0711                     	;# 
  5053  0712                     	;# 
  5054  0713                     	;# 
  5055  0714                     	;# 
  5056  0716                     	;# 
  5057  0717                     	;# 
  5058  0718                     	;# 
  5059  0719                     	;# 
  5060  071A                     	;# 
  5061  071B                     	;# 
  5062  071C                     	;# 
  5063  071D                     	;# 
  5064  071E                     	;# 
  5065  0796                     	;# 
  5066  0797                     	;# 
  5067  0798                     	;# 
  5068  0799                     	;# 
  5069  079A                     	;# 
  5070  079B                     	;# 
  5071  080C                     	;# 
  5072  080D                     	;# 
  5073  080E                     	;# 
  5074  080F                     	;# 
  5075  0810                     	;# 
  5076  0811                     	;# 
  5077  0812                     	;# 
  5078  0813                     	;# 
  5079  0814                     	;# 
  5080  081A                     	;# 
  5081  081B                     	;# 
  5082  081C                     	;# 
  5083  081D                     	;# 
  5084  081E                     	;# 
  5085  081F                     	;# 
  5086  088C                     	;# 
  5087  088D                     	;# 
  5088  088E                     	;# 
  5089  088F                     	;# 
  5090  0890                     	;# 
  5091  0891                     	;# 
  5092  0892                     	;# 
  5093  0893                     	;# 
  5094  0895                     	;# 
  5095  0896                     	;# 
  5096  0897                     	;# 
  5097  0898                     	;# 
  5098  0899                     	;# 
  5099  089A                     	;# 
  5100  089B                     	;# 
  5101  090C                     	;# 
  5102  090E                     	;# 
  5103  090F                     	;# 
  5104  091F                     	;# 
  5105  091F                     	;# 
  5106  098F                     	;# 
  5107  098F                     	;# 
  5108  0990                     	;# 
  5109  0991                     	;# 
  5110  0992                     	;# 
  5111  0993                     	;# 
  5112  0994                     	;# 
  5113  0995                     	;# 
  5114  0996                     	;# 
  5115  0997                     	;# 
  5116  0E0F                     	;# 
  5117  0E10                     	;# 
  5118  0E11                     	;# 
  5119  0E12                     	;# 
  5120  0E13                     	;# 
  5121  0E14                     	;# 
  5122  0E15                     	;# 
  5123  0E16                     	;# 
  5124  0E17                     	;# 
  5125  0E18                     	;# 
  5126  0E19                     	;# 
  5127  0E1A                     	;# 
  5128  0E1B                     	;# 
  5129  0E1C                     	;# 
  5130  0E1D                     	;# 
  5131  0E1E                     	;# 
  5132  0E1F                     	;# 
  5133  0E20                     	;# 
  5134  0E21                     	;# 
  5135  0E22                     	;# 
  5136  0E23                     	;# 
  5137  0E24                     	;# 
  5138  0E25                     	;# 
  5139  0E26                     	;# 
  5140  0E27                     	;# 
  5141  0E28                     	;# 
  5142  0E29                     	;# 
  5143  0E2A                     	;# 
  5144  0E2B                     	;# 
  5145  0E2C                     	;# 
  5146  0E2D                     	;# 
  5147  0E2E                     	;# 
  5148  0E2F                     	;# 
  5149  0E30                     	;# 
  5150  0E31                     	;# 
  5151  0E32                     	;# 
  5152  0E33                     	;# 
  5153  0E34                     	;# 
  5154  0E35                     	;# 
  5155  0E36                     	;# 
  5156  0E37                     	;# 
  5157  0E8F                     	;# 
  5158  0E90                     	;# 
  5159  0E91                     	;# 
  5160  0E92                     	;# 
  5161  0E93                     	;# 
  5162  0E94                     	;# 
  5163  0E95                     	;# 
  5164  0E96                     	;# 
  5165  0E97                     	;# 
  5166  0E9C                     	;# 
  5167  0E9D                     	;# 
  5168  0E9E                     	;# 
  5169  0EA1                     	;# 
  5170  0EA2                     	;# 
  5171  0EA3                     	;# 
  5172  0EA4                     	;# 
  5173  0EA5                     	;# 
  5174  0EA9                     	;# 
  5175  0EAA                     	;# 
  5176  0EAB                     	;# 
  5177  0EAC                     	;# 
  5178  0EB1                     	;# 
  5179  0EB2                     	;# 
  5180  0EB3                     	;# 
  5181  0EB8                     	;# 
  5182  0EB9                     	;# 
  5183  0EBA                     	;# 
  5184  0EBB                     	;# 
  5185  0EBC                     	;# 
  5186  0EBD                     	;# 
  5187  0EBE                     	;# 
  5188  0EC3                     	;# 
  5189  0EC5                     	;# 
  5190  0EC6                     	;# 
  5191  0EC7                     	;# 
  5192  0EC8                     	;# 
  5193  0EC9                     	;# 
  5194  0ECA                     	;# 
  5195  0ECB                     	;# 
  5196  0ECC                     	;# 
  5197  0F10                     	;# 
  5198  0F11                     	;# 
  5199  0F12                     	;# 
  5200  0F13                     	;# 
  5201  0F14                     	;# 
  5202  0F15                     	;# 
  5203  0F16                     	;# 
  5204  0F17                     	;# 
  5205  0F18                     	;# 
  5206  0F19                     	;# 
  5207  0F1A                     	;# 
  5208  0F1B                     	;# 
  5209  0F1C                     	;# 
  5210  0F1D                     	;# 
  5211  0F1E                     	;# 
  5212  0F1F                     	;# 
  5213  0F20                     	;# 
  5214  0F21                     	;# 
  5215  0F22                     	;# 
  5216  0F23                     	;# 
  5217  0F24                     	;# 
  5218  0F25                     	;# 
  5219  0F26                     	;# 
  5220  0F27                     	;# 
  5221  0F38                     	;# 
  5222  0F39                     	;# 
  5223  0F3A                     	;# 
  5224  0F3B                     	;# 
  5225  0F3C                     	;# 
  5226  0F3D                     	;# 
  5227  0F3E                     	;# 
  5228  0F3F                     	;# 
  5229  0F40                     	;# 
  5230  0F41                     	;# 
  5231  0F43                     	;# 
  5232  0F44                     	;# 
  5233  0F45                     	;# 
  5234  0F46                     	;# 
  5235  0F47                     	;# 
  5236  0F48                     	;# 
  5237  0F49                     	;# 
  5238  0F4A                     	;# 
  5239  0F4B                     	;# 
  5240  0F4C                     	;# 
  5241  0F4E                     	;# 
  5242  0F4F                     	;# 
  5243  0F50                     	;# 
  5244  0F51                     	;# 
  5245  0F52                     	;# 
  5246  0F53                     	;# 
  5247  0F54                     	;# 
  5248  0F55                     	;# 
  5249  0F56                     	;# 
  5250  0F57                     	;# 
  5251  0F65                     	;# 
  5252  0F68                     	;# 
  5253  0F69                     	;# 
  5254  0F6A                     	;# 
  5255  0F6B                     	;# 
  5256  0FE4                     	;# 
  5257  0FE5                     	;# 
  5258  0FE6                     	;# 
  5259  0FE7                     	;# 
  5260  0FE8                     	;# 
  5261  0FE9                     	;# 
  5262  0FEA                     	;# 
  5263  0FEB                     	;# 
  5264  0FED                     	;# 
  5265  0FEE                     	;# 
  5266  0FEF                     	;_samples
  5267                           
  5268                           	psect	idataBANK1
  5269  1267                     __pidataBANK1:	
  5270                           
  5271                           ;initializer for _Imode
  5272  1267  3401               	retlw	1
  5273  1268  3400               	retlw	0
  5274                           
  5275                           	psect	idataBANK2
  5276  1269                     __pidataBANK2:	
  5277                           
  5278                           ;initializer for _channels
  5279  1269  3414               	retlw	20
  5280  126A  3400               	retlw	0
  5281  126B  3410               	retlw	16
  5282  126C  3400               	retlw	0
  5283  126D  3416               	retlw	22
  5284  126E  3400               	retlw	0
  5285  126F  3412               	retlw	18
  5286  1270  3400               	retlw	0
  5287                           
  5288                           	psect	stringtext1
  5289  1000                     __pstringtext1:	
  5290  1000                     _fonts:	
  5291  1000  3400               	retlw	0
  5292  1001  3400               	retlw	0
  5293  1002  3400               	retlw	0
  5294  1003  3400               	retlw	0
  5295  1004  344E               	retlw	78
  5296  1005  3400               	retlw	0
  5297  1006  3406               	retlw	6
  5298  1007  3400               	retlw	0
  5299  1008  3406               	retlw	6
  5300  1009  34FF               	retlw	255
  5301  100A  34FF               	retlw	255
  5302  100B  34FF               	retlw	255
  5303  100C  3448               	retlw	72
  5304  100D  34D6               	retlw	214
  5305  100E  3424               	retlw	36
  5306  100F  3412               	retlw	18
  5307  1010  3408               	retlw	8
  5308  1011  3424               	retlw	36
  5309  1012  34FF               	retlw	255
  5310  1013  34FF               	retlw	255
  5311  1014  34FF               	retlw	255
  5312  1015  3400               	retlw	0
  5313  1016  3406               	retlw	6
  5314  1017  3400               	retlw	0
  5315  1018  3438               	retlw	56
  5316  1019  3444               	retlw	68
  5317  101A  3482               	retlw	130
  5318  101B  3482               	retlw	130
  5319  101C  3444               	retlw	68
  5320  101D  3438               	retlw	56
  5321  101E  3414               	retlw	20
  5322  101F  3408               	retlw	8
  5323  1020  343E               	retlw	62
  5324  1021  3410               	retlw	16
  5325  1022  3438               	retlw	56
  5326  1023  3410               	retlw	16
  5327  1024  34A0               	retlw	160
  5328  1025  3460               	retlw	96
  5329  1026  3400               	retlw	0
  5330  1027  3410               	retlw	16
  5331  1028  3410               	retlw	16
  5332  1029  3410               	retlw	16
  5333  102A  3460               	retlw	96
  5334  102B  3460               	retlw	96
  5335  102C  3400               	retlw	0
  5336  102D  3460               	retlw	96
  5337  102E  3418               	retlw	24
  5338  102F  3406               	retlw	6
  5339  1030  347C               	retlw	124
  5340  1031  3442               	retlw	66
  5341  1032  347C               	retlw	124
  5342  1033  3444               	retlw	68
  5343  1034  347E               	retlw	126
  5344  1035  3440               	retlw	64
  5345  1036  3464               	retlw	100
  5346  1037  3452               	retlw	82
  5347  1038  344C               	retlw	76
  5348  1039  344A               	retlw	74
  5349  103A  344A               	retlw	74
  5350  103B  3434               	retlw	52
  5351  103C  3438               	retlw	56
  5352  103D  3424               	retlw	36
  5353  103E  347E               	retlw	126
  5354  103F  344E               	retlw	78
  5355  1040  344A               	retlw	74
  5356  1041  3432               	retlw	50
  5357  1042  343C               	retlw	60
  5358  1043  344A               	retlw	74
  5359  1044  3432               	retlw	50
  5360  1045  3462               	retlw	98
  5361  1046  341A               	retlw	26
  5362  1047  3406               	retlw	6
  5363  1048  3476               	retlw	118
  5364  1049  344A               	retlw	74
  5365  104A  3476               	retlw	118
  5366  104B  344C               	retlw	76
  5367  104C  3452               	retlw	82
  5368  104D  343C               	retlw	60
  5369  104E  346C               	retlw	108
  5370  104F  346C               	retlw	108
  5371  1050  3400               	retlw	0
  5372  1051  34AC               	retlw	172
  5373  1052  346C               	retlw	108
  5374  1053  3400               	retlw	0
  5375  1054  3410               	retlw	16
  5376  1055  3428               	retlw	40
  5377  1056  3444               	retlw	68
  5378  1057  3428               	retlw	40
  5379  1058  3428               	retlw	40
  5380  1059  3428               	retlw	40
  5381  105A  3444               	retlw	68
  5382  105B  3428               	retlw	40
  5383  105C  3410               	retlw	16
  5384  105D  3402               	retlw	2
  5385  105E  3459               	retlw	89
  5386  105F  3406               	retlw	6
  5387  1060  34FF               	retlw	255
  5388  1061  34FF               	retlw	255
  5389  1062  34FF               	retlw	255
  5390  1063  347C               	retlw	124
  5391  1064  3412               	retlw	18
  5392  1065  347C               	retlw	124
  5393  1066  347E               	retlw	126
  5394  1067  345A               	retlw	90
  5395  1068  3434               	retlw	52
  5396  1069  343C               	retlw	60
  5397  106A  3442               	retlw	66
  5398  106B  3442               	retlw	66
  5399  106C  347E               	retlw	126
  5400  106D  3442               	retlw	66
  5401  106E  343C               	retlw	60
  5402  106F  347E               	retlw	126
  5403  1070  344A               	retlw	74
  5404  1071  3442               	retlw	66
  5405  1072  347E               	retlw	126
  5406  1073  340A               	retlw	10
  5407  1074  340A               	retlw	10
  5408  1075  343C               	retlw	60
  5409  1076  3452               	retlw	82
  5410  1077  3434               	retlw	52
  5411  1078  347E               	retlw	126
  5412  1079  3408               	retlw	8
  5413  107A  347E               	retlw	126
  5414  107B  3442               	retlw	66
  5415  107C  347E               	retlw	126
  5416  107D  3442               	retlw	66
  5417  107E  3430               	retlw	48
  5418  107F  3440               	retlw	64
  5419  1080  343E               	retlw	62
  5420  1081  347E               	retlw	126
  5421  1082  3418               	retlw	24
  5422  1083  3466               	retlw	102
  5423  1084  347E               	retlw	126
  5424  1085  3440               	retlw	64
  5425  1086  3440               	retlw	64
  5426  1087  347E               	retlw	126
  5427  1088  341C               	retlw	28
  5428  1089  347E               	retlw	126
  5429  108A  347E               	retlw	126
  5430  108B  3402               	retlw	2
  5431  108C  347E               	retlw	126
  5432  108D  343C               	retlw	60
  5433  108E  3442               	retlw	66
  5434  108F  343C               	retlw	60
  5435  1090  347E               	retlw	126
  5436  1091  3412               	retlw	18
  5437  1092  340C               	retlw	12
  5438  1093  347E               	retlw	126
  5439  1094  3462               	retlw	98
  5440  1095  34FE               	retlw	254
  5441  1096  347E               	retlw	126
  5442  1097  3432               	retlw	50
  5443  1098  344E               	retlw	78
  5444  1099  3444               	retlw	68
  5445  109A  344A               	retlw	74
  5446  109B  3432               	retlw	50
  5447  109C  3402               	retlw	2
  5448  109D  347E               	retlw	126
  5449  109E  3402               	retlw	2
  5450  109F  347E               	retlw	126
  5451  10A0  3440               	retlw	64
  5452  10A1  347E               	retlw	126
  5453  10A2  343E               	retlw	62
  5454  10A3  3440               	retlw	64
  5455  10A4  343E               	retlw	62
  5456  10A5  347E               	retlw	126
  5457  10A6  3438               	retlw	56
  5458  10A7  347E               	retlw	126
  5459  10A8  3466               	retlw	102
  5460  10A9  3418               	retlw	24
  5461  10AA  3466               	retlw	102
  5462  10AB  340E               	retlw	14
  5463  10AC  3470               	retlw	112
  5464  10AD  340E               	retlw	14
  5465  10AE  3462               	retlw	98
  5466  10AF  345A               	retlw	90
  5467  10B0  3446               	retlw	70
  5468  10B1  3400               	retlw	0
  5469  10B2  347E               	retlw	126
  5470  10B3  3442               	retlw	66
  5471  10B4  3406               	retlw	6
  5472  10B5  3418               	retlw	24
  5473  10B6  3460               	retlw	96
  5474  10B7  3442               	retlw	66
  5475  10B8  347E               	retlw	126
  5476  10B9  3400               	retlw	0
  5477  10BA  3404               	retlw	4
  5478  10BB  3402               	retlw	2
  5479  10BC  3404               	retlw	4
  5480  10BD  3440               	retlw	64
  5481  10BE  3440               	retlw	64
  5482  10BF  3440               	retlw	64
  5483  10C0  3400               	retlw	0
  5484  10C1  3402               	retlw	2
  5485  10C2  3404               	retlw	4
  5486  10C3  3474               	retlw	116
  5487  10C4  3454               	retlw	84
  5488  10C5  3478               	retlw	120
  5489  10C6  347E               	retlw	126
  5490  10C7  3448               	retlw	72
  5491  10C8  3430               	retlw	48
  5492  10C9  3430               	retlw	48
  5493  10CA  3448               	retlw	72
  5494  10CB  3448               	retlw	72
  5495  10CC  3430               	retlw	48
  5496  10CD  3448               	retlw	72
  5497  10CE  347E               	retlw	126
  5498  10CF  3438               	retlw	56
  5499  10D0  3454               	retlw	84
  5500  10D1  3458               	retlw	88
  5501  10D2  347C               	retlw	124
  5502  10D3  340A               	retlw	10
  5503  10D4  3402               	retlw	2
  5504  10D5  3498               	retlw	152
  5505  10D6  34A4               	retlw	164
  5506  10D7  347C               	retlw	124
  5507  10D8  347E               	retlw	126
  5508  10D9  3408               	retlw	8
  5509  10DA  3470               	retlw	112
  5510  10DB  3448               	retlw	72
  5511  10DC  347A               	retlw	122
  5512  10DD  3440               	retlw	64
  5513  10DE  3488               	retlw	136
  5514  10DF  34FA               	retlw	250
  5515  10E0  3400               	retlw	0
  5516  10E1  347E               	retlw	126
  5517  10E2  3418               	retlw	24
  5518  10E3  3464               	retlw	100
  5519  10E4  3442               	retlw	66
  5520  10E5  347E               	retlw	126
  5521  10E6  3440               	retlw	64
  5522  10E7  347C               	retlw	124
  5523  10E8  3438               	retlw	56
  5524  10E9  347C               	retlw	124
  5525  10EA  347C               	retlw	124
  5526  10EB  3404               	retlw	4
  5527  10EC  3478               	retlw	120
  5528  10ED  3438               	retlw	56
  5529  10EE  3444               	retlw	68
  5530  10EF  3438               	retlw	56
  5531  10F0  34FC               	retlw	252
  5532  10F1  3424               	retlw	36
  5533  10F2  3418               	retlw	24
  5534  10F3  3418               	retlw	24
  5535  10F4  3424               	retlw	36
  5536  10F5  34FC               	retlw	252
  5537  10F6  3478               	retlw	120
  5538  10F7  3404               	retlw	4
  5539  10F8  3404               	retlw	4
  5540  10F9  3448               	retlw	72
  5541  10FA  3454               	retlw	84
  5542  10FB  3424               	retlw	36
  5543  10FC  3404               	retlw	4
  5544  10FD  343E               	retlw	62
  5545  10FE  3444               	retlw	68
  5546  10FF  347C               	retlw	124
  5547  1100  3440               	retlw	64
  5548  1101  347C               	retlw	124
  5549  1102  343C               	retlw	60
  5550  1103  3440               	retlw	64
  5551  1104  343C               	retlw	60
  5552  1105  347C               	retlw	124
  5553  1106  3430               	retlw	48
  5554  1107  347C               	retlw	124
  5555  1108  346C               	retlw	108
  5556  1109  3410               	retlw	16
  5557  110A  346C               	retlw	108
  5558  110B  349C               	retlw	156
  5559  110C  34A0               	retlw	160
  5560  110D  347C               	retlw	124
  5561  110E  3464               	retlw	100
  5562  110F  3454               	retlw	84
  5563  1110  344C               	retlw	76
  5564  1111  340C               	retlw	12
  5565  1112  3412               	retlw	18
  5566  1113  340C               	retlw	12
  5567  1114  34FF               	retlw	255
  5568  1115  34FF               	retlw	255
  5569  1116  34FF               	retlw	255
  5570  1117  34FF               	retlw	255
  5571  1118  34FF               	retlw	255
  5572  1119  34FF               	retlw	255
  5573  111A  34FF               	retlw	255
  5574  111B  34FF               	retlw	255
  5575  111C  34FF               	retlw	255
  5576  111D  34FF               	retlw	255
  5577  111E  34FF               	retlw	255
  5578  111F  34FF               	retlw	255
  5579  1120  34FF               	retlw	255
  5580  1121  34FF               	retlw	255
  5581  1122  34FF               	retlw	255
  5582  1123  34FF               	retlw	255
  5583  1124  34FF               	retlw	255
  5584  1125  34FF               	retlw	255
  5585  1126  34FC               	retlw	252
  5586  1127  3440               	retlw	64
  5587  1128  347C               	retlw	124
  5588  1129  34FF               	retlw	255
  5589  112A  34FF               	retlw	255
  5590  112B  34FF               	retlw	255
  5591  112C  34FF               	retlw	255
  5592  112D  34FF               	retlw	255
  5593  112E  34FF               	retlw	255
  5594  112F                     __end_of_fonts:	
  5595                           
  5596                           	psect	stringtext2
  5597  1800                     __pstringtext2:	
  5598  1800                     log@coeff:	
  5599  1800  3400               	retlw	0
  5600  1801  3400               	retlw	0
  5601  1802  3400               	retlw	0
  5602  1803  3400               	retlw	0
  5603  1804  3480               	retlw	128
  5604  1805  343F               	retlw	63
  5605  1806  34F0               	retlw	240
  5606  1807  34FF               	retlw	255
  5607  1808  34BE               	retlw	190
  5608  1809  34E2               	retlw	226
  5609  180A  34A9               	retlw	169
  5610  180B  343E               	retlw	62
  5611  180C  3483               	retlw	131
  5612  180D  3476               	retlw	118
  5613  180E  34BE               	retlw	190
  5614  180F  34AE               	retlw	174
  5615  1810  342B               	retlw	43
  5616  1811  343E               	retlw	62
  5617  1812  343C               	retlw	60
  5618  1813  34C3               	retlw	195
  5619  1814  34BD               	retlw	189
  5620  1815  34D2               	retlw	210
  5621  1816  3413               	retlw	19
  5622  1817  343D               	retlw	61
  5623  1818  3478               	retlw	120
  5624  1819  34D3               	retlw	211
  5625  181A  34BB               	retlw	187
  5626  181B                     __end_oflog@coeff:	
  5627  0013                     _TRISC	set	19
  5628  0012                     _TRISB	set	18
  5629  0011                     _TRISA	set	17
  5630  0018                     _LATC	set	24
  5631  0017                     _LATB	set	23
  5632  0016                     _LATA	set	22
  5633  0016                     _LATAbits	set	22
  5634  0011                     _TRISAbits	set	17
  5635  00B5                     _LATA5	set	181
  5636  006A                     _RB2	set	106
  5637  005F                     _GIE	set	95
  5638  0093                     _ADCON0	set	147
  5639  009D                     _ADACQ	set	157
  5640  009C                     _ADPRE	set	156
  5641  009B                     _ADCAP	set	155
  5642  009A                     _ADREF	set	154
  5643  0098                     _ADCLK	set	152
  5644  0097                     _ADSTAT	set	151
  5645  0099                     _ADACT	set	153
  5646  0096                     _ADCON3	set	150
  5647  0095                     _ADCON2	set	149
  5648  0094                     _ADCON1	set	148
  5649  008C                     _ADRESL	set	140
  5650  008D                     _ADRESH	set	141
  5651  0093                     _ADCON0bits	set	147
  5652  009E                     _ADPCH	set	158
  5653  0113                     _ADSTPTH	set	275
  5654  0112                     _ADSTPTL	set	274
  5655  0111                     _ADUTHH	set	273
  5656  0110                     _ADUTHL	set	272
  5657  010F                     _ADLTHH	set	271
  5658  010E                     _ADLTHL	set	270
  5659  010D                     _ADRPT	set	269
  5660  021F                     _CCPTMRS1bits	set	543
  5661  0294                     _T4CONbits	set	660
  5662  0292                     _T4TMR	set	658
  5663  0293                     _T4PR	set	659
  5664  0297                     _T4RST	set	663
  5665  0295                     _T4HLT	set	661
  5666  0296                     _T4CLKCON	set	662
  5667  0294                     _T4CON	set	660
  5668  028E                     _T2CONbits	set	654
  5669  028C                     _T2TMR	set	652
  5670  028D                     _T2PR	set	653
  5671  0291                     _T2RST	set	657
  5672  028F                     _T2HLT	set	655
  5673  0290                     _T2CLKCON	set	656
  5674  028E                     _T2CON	set	654
  5675  0390                     _PWM7DCL	set	912
  5676  0391                     _PWM7DCH	set	913
  5677  0392                     _PWM7CON	set	914
  5678  038C                     _PWM6DCL	set	908
  5679  038D                     _PWM6DCH	set	909
  5680  038E                     _PWM6CON	set	910
  5681  0710                     _PIR4bits	set	1808
  5682  0716                     _PIE0bits	set	1814
  5683  0892                     _OSCTUNE	set	2194
  5684  0893                     _OSCFRQ	set	2195
  5685  0891                     _OSCEN	set	2193
  5686  088F                     _OSCCON3	set	2191
  5687  088D                     _OSCCON1	set	2189
  5688  090C                     _FVRCON	set	2316
  5689  0E8F                     _PPSLOCKbits	set	3727
  5690  0E8F                     _PPSLOCK	set	3727
  5691  0F18                     _RB0PPS	set	3864
  5692  0F17                     _RA7PPS	set	3863
  5693  0F16                     _RA6PPS	set	3862
  5694  0F4E                     _ANSELC	set	3918
  5695  0F43                     _ANSELB	set	3907
  5696  0F38                     _ANSELA	set	3896
  5697  0F65                     _WPUE	set	3941
  5698  0F4F                     _WPUC	set	3919
  5699  0F44                     _WPUB	set	3908
  5700  0F39                     _WPUA	set	3897
  5701  181B                     STR_1:	
  5702  181B  3442               	retlw	66	;'B'
  5703  181C  3441               	retlw	65	;'A'
  5704  181D  3454               	retlw	84	;'T'
  5705  181E  3454               	retlw	84	;'T'
  5706  181F  3445               	retlw	69	;'E'
  5707  1820  3452               	retlw	82	;'R'
  5708  1821  3459               	retlw	89	;'Y'
  5709  1822  3420               	retlw	32	;' '
  5710  1823  3446               	retlw	70	;'F'
  5711  1824  3441               	retlw	65	;'A'
  5712  1825  3455               	retlw	85	;'U'
  5713  1826  344C               	retlw	76	;'L'
  5714  1827  3454               	retlw	84	;'T'
  5715  1828  3400               	retlw	0
  5716                           
  5717                           	psect	stringtext3
  5718  0000                     __pstringtext3:	
  5719                           
  5720                           ; #config settings
  5721  0000                     
  5722                           	psect	cinit
  5723  07B9                     start_initialization:	
  5724  07B9                     __initialization:		;BIGRAM
  5725                           
  5726                           ; Initialize objects allocated to BANK1
  5727  07B9  0021               	movlb	1	; select bank1
  5728  07BA  3192  2267  3187   	fcall	__pidataBANK1	;fetch initializer
  5729  07BD  00EE               	movwf	__pdataBANK1& (0+127)
  5730  07BE  3192  2268  3187   	fcall	__pidataBANK1+1	;fetch initializer
  5731  07C1  00EF               	movwf	(__pdataBANK1+1)& (0+127)
  5732                           
  5733                           ; Initialize objects allocated to BANK2
  5734  07C2  3069               	movlw	low __pidataBANK2
  5735  07C3  0084               	movwf	4
  5736  07C4  3092               	movlw	(high __pidataBANK2)| (0+128)
  5737  07C5  0085               	movwf	5
  5738  07C6  0022               	movlb	2	; select bank2
  5739  07C7  0012               	moviw fsr0++
  5740  07C8  00CB               	movwf	__pdataBANK2& (0+127)
  5741  07C9  0012               	moviw fsr0++
  5742  07CA  00CC               	movwf	(__pdataBANK2+1)& (0+127)
  5743  07CB  0012               	moviw fsr0++
  5744  07CC  00CD               	movwf	(__pdataBANK2+2)& (0+127)
  5745  07CD  0012               	moviw fsr0++
  5746  07CE  00CE               	movwf	(__pdataBANK2+3)& (0+127)
  5747  07CF  0012               	moviw fsr0++
  5748  07D0  00CF               	movwf	(__pdataBANK2+4)& (0+127)
  5749  07D1  0012               	moviw fsr0++
  5750  07D2  00D0               	movwf	(__pdataBANK2+5)& (0+127)
  5751  07D3  0012               	moviw fsr0++
  5752  07D4  00D1               	movwf	(__pdataBANK2+6)& (0+127)
  5753  07D5  0012               	moviw fsr0++
  5754  07D6  00D2               	movwf	(__pdataBANK2+7)& (0+127)
  5755                           
  5756                           ; Clear objects allocated to BIGRAM
  5757  07D7  3098               	movlw	low (0+8600)
  5758  07D8  0084               	movwf	4
  5759  07D9  3021               	movlw	high (0+8600)
  5760  07DA  0085               	movwf	5
  5761  07DB  3058               	movlw	88
  5762  07DC  00FE               	movwf	btemp
  5763  07DD  3002               	movlw	2
  5764  07DE  00FF               	movwf	btemp+1
  5765  07DF  3192  227A  3187   	fcall	clear_ram0
  5766                           
  5767                           ; Clear objects allocated to BANK0
  5768  07E2  0020               	movlb	0	; select bank0
  5769  07E3  01EA               	clrf	__pbssBANK0& (0+127)
  5770  07E4  01EB               	clrf	(__pbssBANK0+1)& (0+127)
  5771  07E5  01EC               	clrf	(__pbssBANK0+2)& (0+127)
  5772  07E6  01ED               	clrf	(__pbssBANK0+3)& (0+127)
  5773  07E7  01EE               	clrf	(__pbssBANK0+4)& (0+127)
  5774                           
  5775                           ; Clear objects allocated to BANK1
  5776  07E8  30A0               	movlw	low __pbssBANK1
  5777  07E9  0084               	movwf	4
  5778  07EA  3000               	movlw	high __pbssBANK1
  5779  07EB  0085               	movwf	5
  5780  07EC  302B               	movlw	43
  5781  07ED  00FE               	movwf	btemp
  5782  07EE  3000               	movlw	0
  5783  07EF  00FF               	movwf	btemp+1
  5784  07F0  3192  227A  3187   	fcall	clear_ram0
  5785                           
  5786                           ; Clear objects allocated to BANK2
  5787  07F3  3020               	movlw	low __pbssBANK2
  5788  07F4  0084               	movwf	4
  5789  07F5  3001               	movlw	high __pbssBANK2
  5790  07F6  0085               	movwf	5
  5791  07F7  302B               	movlw	43
  5792  07F8  00FE               	movwf	btemp
  5793  07F9  3000               	movlw	0
  5794  07FA  00FF               	movwf	btemp+1
  5795  07FB  3192  227A         	fcall	clear_ram0
  5796  07FD                     end_of_initialization:	
  5797                           ;End of C runtime variable initialization code
  5798                           
  5799  07FD                     __end_of__initialization:	
  5800  07FD  0020               	movlb	0
  5801  07FE  3181  29C8         	ljmp	_main	;jump to C main() function
  5802                           
  5803                           	psect	bssBANK0
  5804  006A                     __pbssBANK0:	
  5805  006A                     _batteryState:	
  5806  006A                     	ds	2
  5807  006C                     _j:	
  5808  006C                     	ds	1
  5809  006D                     _lastButton:	
  5810  006D                     	ds	1
  5811  006E                     _button:	
  5812  006E                     	ds	1
  5813                           
  5814                           	psect	bssBANK1
  5815  00A0                     __pbssBANK1:	
  5816  00A0                     _current:	
  5817  00A0                     	ds	8
  5818  00A8                     _voltage:	
  5819  00A8                     	ds	8
  5820  00B0                     _Vref:	
  5821  00B0                     	ds	4
  5822  00B4                     _Iref:	
  5823  00B4                     	ds	4
  5824  00B8                     _stateCounter:	
  5825  00B8                     	ds	4
  5826  00BC                     _IminCount:	
  5827  00BC                     	ds	4
  5828  00C0                     _VHoldMode:	
  5829  00C0                     	ds	2
  5830  00C2                     _cc_cv:	
  5831  00C2                     	ds	2
  5832  00C4                     _Iout:	
  5833  00C4                     	ds	2
  5834  00C6                     _readButtons:	
  5835  00C6                     	ds	2
  5836  00C8                     _sampleIndex:	
  5837  00C8                     	ds	2
  5838  00CA                     _x:	
  5839  00CA                     	ds	1
  5840                           
  5841                           	psect	dataBANK1
  5842  00EE                     __pdataBANK1:	
  5843  00EE                     _Imode:	
  5844  00EE                     	ds	2
  5845                           
  5846                           	psect	bssBANK2
  5847  0120                     __pbssBANK2:	
  5848  0120                     _totals:	
  5849  0120                     	ds	16
  5850  0130                     _Ianalogs:	
  5851  0130                     	ds	8
  5852  0138                     _Vanalogs:	
  5853  0138                     	ds	8
  5854  0140                     LCDWriteInt@F14387:	
  5855  0140                     	ds	5
  5856  0145                     _Imin:	
  5857  0145                     	ds	4
  5858  0149                     _errno:	
  5859  0149                     	ds	2
  5860                           
  5861                           	psect	dataBANK2
  5862  014B                     __pdataBANK2:	
  5863  014B                     _channels:	
  5864  014B                     	ds	8
  5865                           
  5866                           	psect	clrtext
  5867  127A                     clear_ram0:	
  5868                           ;	Called with FSR0 containing the base address, and
  5869                           ;	btemp/btemp+1 has the size to clear
  5870                           
  5871  127A  0064               	clrwdt	;clear the watchdog before getting into this loop
  5872  127B                     clrloop0:	
  5873  127B  0180               	clrf	0	;clear RAM location pointed to by FSR
  5874  127C  3101               	addfsr 0,1
  5875  127D  3001               	movlw	1
  5876  127E  02FE               	subwf	126,f
  5877  127F  3000               	movlw	0
  5878  1280  3BFF               	subwfb	127,f
  5879  1281  087F               	movf	127,w
  5880  1282  047E               	iorwf	126,w
  5881  1283  1903               	btfsc	3,2
  5882  1284  3400               	retlw	0	;all done for this memory range, return
  5883  1285  2A7B               	goto	clrloop0	;have we reached the end yet?
  5884                           
  5885                           	psect	cstackBANK1
  5886  00CB                     __pcstackBANK1:	
  5887  00CB                     main@IOutTotal:	
  5888                           
  5889                           ; 2 bytes @ 0x0
  5890  00CB                     	ds	2
  5891  00CD                     main@batteryTemp:	
  5892                           
  5893                           ; 2 bytes @ 0x2
  5894  00CD                     	ds	2
  5895  00CF                     main@faultNotReset:	
  5896                           
  5897                           ; 2 bytes @ 0x4
  5898  00CF                     	ds	2
  5899  00D1                     _main$1190:	
  5900                           
  5901                           ; 3 bytes @ 0x6
  5902  00D1                     	ds	3
  5903  00D4                     main@MPPT1:	
  5904                           
  5905                           ; 2 bytes @ 0x9
  5906  00D4                     	ds	2
  5907  00D6                     main@dutyCycle1:	
  5908                           
  5909                           ; 2 bytes @ 0xB
  5910  00D6                     	ds	2
  5911  00D8                     main@faultCount:	
  5912                           
  5913                           ; 2 bytes @ 0xD
  5914  00D8                     	ds	2
  5915  00DA                     main@slowLoop:	
  5916                           
  5917                           ; 1 bytes @ 0xF
  5918  00DA                     	ds	1
  5919  00DB                     main@displayRefresh:	
  5920                           
  5921                           ; 1 bytes @ 0x10
  5922  00DB                     	ds	1
  5923  00DC                     _main$1189:	
  5924                           
  5925                           ; 3 bytes @ 0x11
  5926  00DC                     	ds	3
  5927  00DF                     _main$1191:	
  5928                           
  5929                           ; 2 bytes @ 0x14
  5930  00DF                     	ds	2
  5931  00E1                     _main$1192:	
  5932                           
  5933                           ; 2 bytes @ 0x16
  5934  00E1                     	ds	2
  5935  00E3                     main@efficiency:	
  5936                           
  5937                           ; 3 bytes @ 0x18
  5938  00E3                     	ds	3
  5939  00E6                     main@menuButton:	
  5940                           
  5941                           ; 1 bytes @ 0x1B
  5942  00E6                     	ds	1
  5943  00E7                     main@j:	
  5944                           
  5945                           ; 1 bytes @ 0x1C
  5946  00E7                     	ds	1
  5947  00E8                     main@MPPT0:	
  5948                           
  5949                           ; 2 bytes @ 0x1D
  5950  00E8                     	ds	2
  5951  00EA                     main@dutyCycle6:	
  5952                           
  5953                           ; 2 bytes @ 0x1F
  5954  00EA                     	ds	2
  5955  00EC                     main@dutyCycle7:	
  5956                           
  5957                           ; 2 bytes @ 0x21
  5958  00EC                     	ds	2
  5959                           
  5960                           	psect	cstackCOMMON
  5961  0070                     __pcstackCOMMON:	
  5962  0070                     ?___ftge:	
  5963  0070                     ?_LCDWrite:	
  5964                           ; 1 bit 
  5965                           
  5966  0070                     ?_OSCILLATOR_Initialize:	
  5967                           ; 1 bytes @ 0x0
  5968                           
  5969  0070                     ??_OSCILLATOR_Initialize:	
  5970                           ; 1 bytes @ 0x0
  5971                           
  5972  0070                     ?_TMR2_Initialize:	
  5973                           ; 1 bytes @ 0x0
  5974                           
  5975  0070                     ??_TMR2_Initialize:	
  5976                           ; 1 bytes @ 0x0
  5977                           
  5978  0070                     ?_TMR4_Initialize:	
  5979                           ; 1 bytes @ 0x0
  5980                           
  5981  0070                     ??_TMR4_Initialize:	
  5982                           ; 1 bytes @ 0x0
  5983                           
  5984  0070                     ?_Init_Battery_State_Machine:	
  5985                           ; 1 bytes @ 0x0
  5986                           
  5987  0070                     ??_Init_Battery_State_Machine:	
  5988                           ; 1 bytes @ 0x0
  5989                           
  5990  0070                     ?_calculateCurrent0:	
  5991                           ; 1 bytes @ 0x0
  5992                           
  5993  0070                     ?_calculateCurrent1:	
  5994                           ; 1 bytes @ 0x0
  5995                           
  5996  0070                     ?_calculateCurrent2:	
  5997                           ; 1 bytes @ 0x0
  5998                           
  5999  0070                     ?_calculateCurrent3:	
  6000                           ; 1 bytes @ 0x0
  6001                           
  6002  0070                     ?_ADC_Initialize:	
  6003                           ; 1 bytes @ 0x0
  6004                           
  6005  0070                     ??_ADC_Initialize:	
  6006                           ; 1 bytes @ 0x0
  6007                           
  6008  0070                     ?_readButton:	
  6009                           ; 1 bytes @ 0x0
  6010                           
  6011  0070                     ?_LCDWriteCharacter:	
  6012                           ; 1 bytes @ 0x0
  6013                           
  6014  0070                     ?_LCDClear:	
  6015                           ; 1 bytes @ 0x0
  6016                           
  6017  0070                     ?_LCDInit:	
  6018                           ; 1 bytes @ 0x0
  6019                           
  6020  0070                     ?_PIN_MANAGER_Initialize:	
  6021                           ; 1 bytes @ 0x0
  6022                           
  6023  0070                     ??_PIN_MANAGER_Initialize:	
  6024                           ; 1 bytes @ 0x0
  6025                           
  6026  0070                     ?_PWM_Initialize:	
  6027                           ; 1 bytes @ 0x0
  6028                           
  6029  0070                     ??_PWM_Initialize:	
  6030                           ; 1 bytes @ 0x0
  6031                           
  6032  0070                     ?_PWM6_LoadDutyValue:	
  6033                           ; 1 bytes @ 0x0
  6034                           
  6035  0070                     ?_PWM7_LoadDutyValue:	
  6036                           ; 1 bytes @ 0x0
  6037                           
  6038  0070                     ?_SYSTEM_Initialize:	
  6039                           ; 1 bytes @ 0x0
  6040                           
  6041  0070                     ?_Battery_State_Machine:	
  6042                           ; 1 bytes @ 0x0
  6043                           
  6044  0070                     ?_cc_cv_mode:	
  6045                           ; 1 bytes @ 0x0
  6046                           
  6047  0070                     ??_cc_cv_mode:	
  6048                           ; 1 bytes @ 0x0
  6049                           
  6050  0070                     ?_main:	
  6051                           ; 1 bytes @ 0x0
  6052                           
  6053  0070                     ?_ADCRead:	
  6054                           ; 1 bytes @ 0x0
  6055                           
  6056  0070                     ?___awdiv:	
  6057                           ; 2 bytes @ 0x0
  6058                           
  6059  0070                     ?___lwmod:	
  6060                           ; 2 bytes @ 0x0
  6061                           
  6062  0070                     ?___ftpack:	
  6063                           ; 2 bytes @ 0x0
  6064                           
  6065  0070                     ?_frexp:	
  6066                           ; 3 bytes @ 0x0
  6067                           
  6068  0070                     ?___aldiv:	
  6069                           ; 3 bytes @ 0x0
  6070                           
  6071  0070                     LCDWrite@data:	
  6072                           ; 4 bytes @ 0x0
  6073                           
  6074  0070                     PIN_MANAGER_Initialize@state:	
  6075                           ; 1 bytes @ 0x0
  6076                           
  6077  0070                     PWM6_LoadDutyValue@dutyCycle6:	
  6078                           ; 1 bytes @ 0x0
  6079                           
  6080  0070                     PWM7_LoadDutyValue@dutyCycle7:	
  6081                           ; 2 bytes @ 0x0
  6082                           
  6083  0070                     ___awdiv@divisor:	
  6084                           ; 2 bytes @ 0x0
  6085                           
  6086  0070                     ___lwmod@divisor:	
  6087                           ; 2 bytes @ 0x0
  6088                           
  6089  0070                     ___ftpack@arg:	
  6090                           ; 2 bytes @ 0x0
  6091                           
  6092  0070                     ___ftge@ff1:	
  6093                           ; 3 bytes @ 0x0
  6094                           
  6095  0070                     frexp@value:	
  6096                           ; 3 bytes @ 0x0
  6097                           
  6098  0070                     ___aldiv@divisor:	
  6099                           ; 3 bytes @ 0x0
  6100                           
  6101                           
  6102                           ; 4 bytes @ 0x0
  6103  0070                     	ds	1
  6104  0071                     ??_LCDWrite:	
  6105  0071                     Init_Battery_State_Machine@z:	
  6106                           ; 1 bytes @ 0x1
  6107                           
  6108                           
  6109                           ; 1 bytes @ 0x1
  6110  0071                     	ds	1
  6111  0072                     ??_PWM6_LoadDutyValue:	
  6112  0072                     ??_PWM7_LoadDutyValue:	
  6113                           ; 1 bytes @ 0x2
  6114                           
  6115  0072                     LCDWrite@data_or_command:	
  6116                           ; 1 bytes @ 0x2
  6117                           
  6118  0072                     ___awdiv@dividend:	
  6119                           ; 1 bytes @ 0x2
  6120                           
  6121  0072                     ___lwmod@dividend:	
  6122                           ; 2 bytes @ 0x2
  6123                           
  6124                           
  6125                           ; 2 bytes @ 0x2
  6126  0072                     	ds	1
  6127  0073                     ??_ADCRead:	
  6128  0073                     ADCRead@channel:	
  6129                           ; 1 bytes @ 0x3
  6130                           
  6131  0073                     LCDWrite@d:	
  6132                           ; 1 bytes @ 0x3
  6133                           
  6134  0073                     ___ftpack@exp:	
  6135                           ; 1 bytes @ 0x3
  6136                           
  6137  0073                     frexp@eptr:	
  6138                           ; 1 bytes @ 0x3
  6139                           
  6140  0073                     ___ftge@ff2:	
  6141                           ; 1 bytes @ 0x3
  6142                           
  6143                           
  6144                           ; 3 bytes @ 0x3
  6145  0073                     	ds	1
  6146  0074                     ??_frexp:	
  6147  0074                     ??_readButton:	
  6148                           ; 1 bytes @ 0x4
  6149                           
  6150  0074                     ??___awdiv:	
  6151                           ; 1 bytes @ 0x4
  6152                           
  6153  0074                     ??___lwmod:	
  6154                           ; 1 bytes @ 0x4
  6155                           
  6156  0074                     LCDWrite@i:	
  6157                           ; 1 bytes @ 0x4
  6158                           
  6159  0074                     ___ftpack@sign:	
  6160                           ; 1 bytes @ 0x4
  6161                           
  6162  0074                     ___aldiv@dividend:	
  6163                           ; 1 bytes @ 0x4
  6164                           
  6165                           
  6166                           ; 4 bytes @ 0x4
  6167  0074                     	ds	1
  6168  0075                     ??___ftpack:	
  6169  0075                     ?_gotoXY:	
  6170                           ; 1 bytes @ 0x5
  6171                           
  6172  0075                     ??_LCDInit:	
  6173                           ; 1 bytes @ 0x5
  6174                           
  6175  0075                     gotoXY@y:	
  6176                           ; 1 bytes @ 0x5
  6177                           
  6178  0075                     cc_cv_mode@z:	
  6179                           ; 1 bytes @ 0x5
  6180                           
  6181  0075                     ___awdiv@counter:	
  6182                           ; 1 bytes @ 0x5
  6183                           
  6184  0075                     ___lwmod@counter:	
  6185                           ; 1 bytes @ 0x5
  6186                           
  6187                           
  6188                           ; 1 bytes @ 0x5
  6189  0075                     	ds	1
  6190  0076                     ??_gotoXY:	
  6191  0076                     ??___ftge:	
  6192                           ; 1 bytes @ 0x6
  6193                           
  6194  0076                     ___awdiv@sign:	
  6195                           ; 1 bytes @ 0x6
  6196                           
  6197                           
  6198                           ; 1 bytes @ 0x6
  6199  0076                     	ds	1
  6200  0077                     gotoXY@x:	
  6201  0077                     ___awdiv@quotient:	
  6202                           ; 1 bytes @ 0x7
  6203                           
  6204                           
  6205                           ; 2 bytes @ 0x7
  6206  0077                     	ds	1
  6207  0078                     ??_LCDClear:	
  6208  0078                     ??___aldiv:	
  6209                           ; 1 bytes @ 0x8
  6210                           
  6211  0078                     ?___awtoft:	
  6212                           ; 1 bytes @ 0x8
  6213                           
  6214  0078                     ___awtoft@c:	
  6215                           ; 3 bytes @ 0x8
  6216                           
  6217                           
  6218                           ; 2 bytes @ 0x8
  6219  0078                     	ds	1
  6220  0079                     ?___wmul:	
  6221  0079                     LCDClear@index:	
  6222                           ; 2 bytes @ 0x9
  6223                           
  6224  0079                     ___wmul@multiplier:	
  6225                           ; 2 bytes @ 0x9
  6226                           
  6227                           
  6228                           ; 2 bytes @ 0x9
  6229  0079                     	ds	2
  6230  007B                     ??_SYSTEM_Initialize:	
  6231  007B                     ??___awtoft:	
  6232                           ; 1 bytes @ 0xB
  6233                           
  6234  007B                     ___wmul@multiplicand:	
  6235                           ; 1 bytes @ 0xB
  6236                           
  6237                           
  6238                           ; 2 bytes @ 0xB
  6239  007B                     	ds	2
  6240  007D                     ??_LCDWriteString:	
  6241  007D                     ??___wmul:	
  6242                           ; 1 bytes @ 0xD
  6243                           
  6244  007D                     ___awtoft@sign:	
  6245                           ; 1 bytes @ 0xD
  6246                           
  6247                           
  6248                           ; 1 bytes @ 0xD
  6249  007D                     	ds	1
  6250  007E                     ??_eval_poly:	
  6251  007E                     ??_tempCalc:	
  6252                           ; 1 bytes @ 0xE
  6253                           
  6254  007E                     ??___ftsub:	
  6255                           ; 1 bytes @ 0xE
  6256                           
  6257                           
  6258                           	psect	cstackBANK0
  6259  0020                     __pcstackBANK0:	
  6260                           ; 1 bytes @ 0xE
  6261                           
  6262  0020                     ?___ftdiv:	
  6263  0020                     ___aldiv@counter:	
  6264                           ; 3 bytes @ 0x0
  6265                           
  6266  0020                     ___wmul@product:	
  6267                           ; 1 bytes @ 0x0
  6268                           
  6269  0020                     ___ftdiv@f2:	
  6270                           ; 2 bytes @ 0x0
  6271                           
  6272                           
  6273                           ; 3 bytes @ 0x0
  6274  0020                     	ds	1
  6275  0021                     ___aldiv@sign:	
  6276                           
  6277                           ; 1 bytes @ 0x1
  6278  0021                     	ds	1
  6279  0022                     ??_LCDWriteCharacter:	
  6280  0022                     ___aldiv@quotient:	
  6281                           ; 1 bytes @ 0x2
  6282                           
  6283                           
  6284                           ; 4 bytes @ 0x2
  6285  0022                     	ds	1
  6286  0023                     ___ftdiv@f1:	
  6287                           
  6288                           ; 3 bytes @ 0x3
  6289  0023                     	ds	2
  6290  0025                     LCDWriteCharacter@character:	
  6291                           
  6292                           ; 1 bytes @ 0x5
  6293  0025                     	ds	1
  6294  0026                     ??___ftdiv:	
  6295  0026                     ?_readIAnalog:	
  6296                           ; 1 bytes @ 0x6
  6297                           
  6298  0026                     readIAnalog@channel:	
  6299                           ; 2 bytes @ 0x6
  6300                           
  6301  0026                     LCDWriteCharacter@base:	
  6302                           ; 2 bytes @ 0x6
  6303                           
  6304                           
  6305                           ; 2 bytes @ 0x6
  6306  0026                     	ds	2
  6307  0028                     ??_readIAnalog:	
  6308  0028                     ?_LCDWriteString:	
  6309                           ; 1 bytes @ 0x8
  6310                           
  6311  0028                     ?_LCDWriteInt:	
  6312                           ; 1 bytes @ 0x8
  6313                           
  6314  0028                     LCDWriteString@characters:	
  6315                           ; 1 bytes @ 0x8
  6316                           
  6317  0028                     LCDWriteInt@value:	
  6318                           ; 2 bytes @ 0x8
  6319                           
  6320                           
  6321                           ; 2 bytes @ 0x8
  6322  0028                     	ds	2
  6323  002A                     ??_Battery_State_Machine:	
  6324  002A                     LCDWriteInt@fieldLength:	
  6325                           ; 1 bytes @ 0xA
  6326                           
  6327  002A                     ___ftdiv@cntr:	
  6328                           ; 1 bytes @ 0xA
  6329                           
  6330                           
  6331                           ; 1 bytes @ 0xA
  6332  002A                     	ds	1
  6333  002B                     LCDWriteInt@numPlaces:	
  6334  002B                     ___ftdiv@f3:	
  6335                           ; 1 bytes @ 0xB
  6336                           
  6337                           
  6338                           ; 3 bytes @ 0xB
  6339  002B                     	ds	1
  6340  002C                     LCDWriteInt@sign:	
  6341                           
  6342                           ; 1 bytes @ 0xC
  6343  002C                     	ds	1
  6344  002D                     ??_LCDWriteInt:	
  6345                           
  6346                           ; 1 bytes @ 0xD
  6347  002D                     	ds	1
  6348  002E                     ___ftdiv@exp:	
  6349                           
  6350                           ; 1 bytes @ 0xE
  6351  002E                     	ds	1
  6352  002F                     Battery_State_Machine@z:	
  6353  002F                     ___ftdiv@sign:	
  6354                           ; 1 bytes @ 0xF
  6355                           
  6356                           
  6357                           ; 1 bytes @ 0xF
  6358  002F                     	ds	1
  6359  0030                     ?___ftmul:	
  6360  0030                     ?___fttol:	
  6361                           ; 3 bytes @ 0x10
  6362                           
  6363  0030                     ___ftmul@f1:	
  6364                           ; 4 bytes @ 0x10
  6365                           
  6366  0030                     ___fttol@f1:	
  6367                           ; 3 bytes @ 0x10
  6368                           
  6369                           
  6370                           ; 3 bytes @ 0x10
  6371  0030                     	ds	1
  6372  0031                     LCDWriteInt@str:	
  6373                           
  6374                           ; 5 bytes @ 0x11
  6375  0031                     	ds	2
  6376  0033                     ___ftmul@f2:	
  6377                           
  6378                           ; 3 bytes @ 0x13
  6379  0033                     	ds	1
  6380  0034                     ??___fttol:	
  6381                           
  6382                           ; 1 bytes @ 0x14
  6383  0034                     	ds	2
  6384  0036                     ??___ftmul:	
  6385  0036                     LCDWriteInt@j:	
  6386                           ; 1 bytes @ 0x16
  6387                           
  6388                           
  6389                           ; 1 bytes @ 0x16
  6390  0036                     	ds	1
  6391  0037                     LCDWriteInt@i:	
  6392                           
  6393                           ; 1 bytes @ 0x17
  6394  0037                     	ds	1
  6395  0038                     ___fttol@sign1:	
  6396                           
  6397                           ; 1 bytes @ 0x18
  6398  0038                     	ds	1
  6399  0039                     ___fttol@lval:	
  6400                           
  6401                           ; 4 bytes @ 0x19
  6402  0039                     	ds	1
  6403  003A                     ___ftmul@exp:	
  6404  003A                     readIAnalog@analog_channel:	
  6405                           ; 1 bytes @ 0x1A
  6406                           
  6407                           
  6408                           ; 2 bytes @ 0x1A
  6409  003A                     	ds	1
  6410  003B                     ___ftmul@f3_as_product:	
  6411                           
  6412                           ; 3 bytes @ 0x1B
  6413  003B                     	ds	1
  6414  003C                     readIAnalog@value:	
  6415                           
  6416                           ; 2 bytes @ 0x1C
  6417  003C                     	ds	1
  6418  003D                     ___fttol@exp1:	
  6419                           
  6420                           ; 1 bytes @ 0x1D
  6421  003D                     	ds	1
  6422  003E                     ??_calculateCurrent0:	
  6423  003E                     ??_calculateCurrent1:	
  6424                           ; 1 bytes @ 0x1E
  6425                           
  6426  003E                     ??_calculateCurrent2:	
  6427                           ; 1 bytes @ 0x1E
  6428                           
  6429  003E                     ??_calculateCurrent3:	
  6430                           ; 1 bytes @ 0x1E
  6431                           
  6432  003E                     ___ftmul@cntr:	
  6433                           ; 1 bytes @ 0x1E
  6434                           
  6435                           
  6436                           ; 1 bytes @ 0x1E
  6437  003E                     	ds	1
  6438  003F                     ___ftmul@sign:	
  6439                           
  6440                           ; 1 bytes @ 0x1F
  6441  003F                     	ds	1
  6442  0040                     ?___ftadd:	
  6443  0040                     ___ftadd@f1:	
  6444                           ; 3 bytes @ 0x20
  6445                           
  6446                           
  6447                           ; 3 bytes @ 0x20
  6448  0040                     	ds	3
  6449  0043                     ___ftadd@f2:	
  6450                           
  6451                           ; 3 bytes @ 0x23
  6452  0043                     	ds	3
  6453  0046                     ??___ftadd:	
  6454                           
  6455                           ; 1 bytes @ 0x26
  6456  0046                     	ds	4
  6457  004A                     ___ftadd@sign:	
  6458                           
  6459                           ; 1 bytes @ 0x2A
  6460  004A                     	ds	1
  6461  004B                     ___ftadd@exp2:	
  6462                           
  6463                           ; 1 bytes @ 0x2B
  6464  004B                     	ds	1
  6465  004C                     ___ftadd@exp1:	
  6466                           
  6467                           ; 1 bytes @ 0x2C
  6468  004C                     	ds	1
  6469  004D                     ?_eval_poly:	
  6470  004D                     ?___ftsub:	
  6471                           ; 3 bytes @ 0x2D
  6472                           
  6473  004D                     ___ftsub@f2:	
  6474                           ; 3 bytes @ 0x2D
  6475                           
  6476  004D                     eval_poly@x:	
  6477                           ; 3 bytes @ 0x2D
  6478                           
  6479                           
  6480                           ; 3 bytes @ 0x2D
  6481  004D                     	ds	3
  6482  0050                     eval_poly@d:	
  6483  0050                     ___ftsub@f1:	
  6484                           ; 2 bytes @ 0x30
  6485                           
  6486                           
  6487                           ; 3 bytes @ 0x30
  6488  0050                     	ds	2
  6489  0052                     eval_poly@n:	
  6490                           
  6491                           ; 2 bytes @ 0x32
  6492  0052                     	ds	2
  6493  0054                     eval_poly@res:	
  6494                           
  6495                           ; 3 bytes @ 0x34
  6496  0054                     	ds	3
  6497  0057                     ?_log:	
  6498  0057                     log@x:	
  6499                           ; 3 bytes @ 0x37
  6500                           
  6501                           
  6502                           ; 3 bytes @ 0x37
  6503  0057                     	ds	3
  6504  005A                     ??_log:	
  6505                           
  6506                           ; 1 bytes @ 0x3A
  6507  005A                     	ds	1
  6508  005B                     log@exponent:	
  6509                           
  6510                           ; 2 bytes @ 0x3B
  6511  005B                     	ds	2
  6512  005D                     ?_tempCalc:	
  6513  005D                     tempCalc@analogValue:	
  6514                           ; 2 bytes @ 0x3D
  6515                           
  6516                           
  6517                           ; 2 bytes @ 0x3D
  6518  005D                     	ds	2
  6519  005F                     tempCalc@R:	
  6520                           
  6521                           ; 3 bytes @ 0x3F
  6522  005F                     	ds	3
  6523  0062                     _tempCalc$1188:	
  6524                           
  6525                           ; 3 bytes @ 0x42
  6526  0062                     	ds	3
  6527  0065                     tempCalc@steinhart:	
  6528                           
  6529                           ; 3 bytes @ 0x45
  6530  0065                     	ds	3
  6531  0068                     ??_main:	
  6532                           
  6533                           ; 1 bytes @ 0x48
  6534  0068                     	ds	2
  6535                           
  6536                           	psect	maintext
  6537  01C8                     __pmaintext:	
  6538 ;;
  6539 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  6540 ;;
  6541 ;; *************** function _main *****************
  6542 ;; Defined at:
  6543 ;;		line 41 in file "main.c"
  6544 ;; Parameters:    Size  Location     Type
  6545 ;;		None
  6546 ;; Auto vars:     Size  Location     Type
  6547 ;;  efficiency      3   24[BANK1 ] float 
  6548 ;;  dutyCycle7      2   33[BANK1 ] unsigned int 
  6549 ;;  dutyCycle6      2   31[BANK1 ] unsigned int 
  6550 ;;  MPPT0           2   29[BANK1 ] int 
  6551 ;;  faultCount      2   13[BANK1 ] unsigned int 
  6552 ;;  dutyCycle1      2   11[BANK1 ] unsigned int 
  6553 ;;  MPPT1           2    9[BANK1 ] int 
  6554 ;;  faultNotRese    2    4[BANK1 ] unsigned int 
  6555 ;;  batteryTemp     2    2[BANK1 ] int 
  6556 ;;  IOutTotal       2    0[BANK1 ] int 
  6557 ;;  j               1   28[BANK1 ] unsigned char 
  6558 ;;  menuButton      1   27[BANK1 ] unsigned char 
  6559 ;;  displayRefre    1   16[BANK1 ] unsigned char 
  6560 ;;  slowLoop        1   15[BANK1 ] unsigned char 
  6561 ;; Return value:  Size  Location     Type
  6562 ;;                  1    wreg      void 
  6563 ;; Registers used:
  6564 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6565 ;; Tracked objects:
  6566 ;;		On entry : B1F/0
  6567 ;;		On exit  : 0/0
  6568 ;;		Unchanged: 0/0
  6569 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6570 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6571 ;;      Locals:         0       0      35       0       0       0       0       0       0       0       0       0       
      +0       0
  6572 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6573 ;;      Totals:         0       2      35       0       0       0       0       0       0       0       0       0       
      +0       0
  6574 ;;Total ram usage:       37 bytes
  6575 ;; Hardware stack levels required when called:    5
  6576 ;; This function calls:
  6577 ;;		_ADCRead
  6578 ;;		_Battery_State_Machine
  6579 ;;		_LCDClear
  6580 ;;		_LCDInit
  6581 ;;		_LCDWriteCharacter
  6582 ;;		_LCDWriteInt
  6583 ;;		_PWM6_LoadDutyValue
  6584 ;;		_PWM7_LoadDutyValue
  6585 ;;		_SYSTEM_Initialize
  6586 ;;		___awdiv
  6587 ;;		___awtoft
  6588 ;;		___ftdiv
  6589 ;;		___ftmul
  6590 ;;		___fttol
  6591 ;;		___wmul
  6592 ;;		_calculateCurrent0
  6593 ;;		_calculateCurrent1
  6594 ;;		_calculateCurrent2
  6595 ;;		_calculateCurrent3
  6596 ;;		_cc_cv_mode
  6597 ;;		_gotoXY
  6598 ;;		_readButton
  6599 ;;		_readIAnalog
  6600 ;;		_tempCalc
  6601 ;; This function is called by:
  6602 ;;		Startup code after reset
  6603 ;; This function uses a non-reentrant model
  6604 ;;
  6605                           
  6606                           
  6607                           ;psect for function _main
  6608  01C8                     _main:	
  6609                           
  6610                           ;main.c: 43: int16_t MPPT0 = 1550;
  6611                           
  6612                           ;incstack = 0
  6613                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6614  01C8  300E               	movlw	14
  6615  01C9  0021               	movlb	1	; select bank1
  6616  01CA  00E8               	movwf	main@MPPT0^(0+128)
  6617  01CB  3006               	movlw	6
  6618  01CC  00E9               	movwf	(main@MPPT0^(0+128)+1)
  6619                           
  6620                           ;main.c: 44: int16_t MPPT1 = 1760;
  6621  01CD  30E0               	movlw	224
  6622  01CE  00D4               	movwf	main@MPPT1^(0+128)
  6623  01CF  3006               	movlw	6
  6624  01D0  00D5               	movwf	(main@MPPT1^(0+128)+1)
  6625                           
  6626                           ;main.c: 46: uint16_t dutyCycle6 = 1023;
  6627  01D1  30FF               	movlw	255
  6628  01D2  00EA               	movwf	main@dutyCycle6^(0+128)
  6629  01D3  3003               	movlw	3
  6630  01D4  00EB               	movwf	(main@dutyCycle6^(0+128)+1)
  6631                           
  6632                           ;main.c: 47: uint16_t dutyCycle7 = 256;
  6633  01D5  3000               	movlw	0
  6634  01D6  00EC               	movwf	main@dutyCycle7^(0+128)
  6635  01D7  3001               	movlw	1
  6636  01D8  00ED               	movwf	(main@dutyCycle7^(0+128)+1)
  6637                           
  6638                           ;main.c: 48: uint16_t dutyCycle1 = 60;
  6639  01D9  303C               	movlw	60
  6640  01DA  00D6               	movwf	main@dutyCycle1^(0+128)
  6641  01DB  3000               	movlw	0
  6642  01DC  00D7               	movwf	(main@dutyCycle1^(0+128)+1)
  6643                           
  6644                           ;main.c: 49: int16_t IOutTotal = 0;
  6645  01DD  01CB               	clrf	main@IOutTotal^(0+128)
  6646  01DE  01CC               	clrf	(main@IOutTotal+1)^(0+128)
  6647                           
  6648                           ;main.c: 51: uint8_t j = 0;
  6649  01DF  01E7               	clrf	main@j^(0+128)
  6650                           
  6651                           ;main.c: 54: uint8_t slowLoop = 200;
  6652  01E0  30C8               	movlw	200
  6653  01E1  0020               	movlb	0	; select bank0
  6654  01E2  00E8               	movwf	??_main
  6655  01E3  0868               	movf	??_main,w
  6656  01E4  0021               	movlb	1	; select bank1
  6657  01E5  00DA               	movwf	main@slowLoop^(0+128)
  6658                           
  6659                           ;main.c: 55: uint8_t displayRefresh = 0;
  6660  01E6  01DB               	clrf	main@displayRefresh^(0+128)
  6661                           
  6662                           ;main.c: 56: int16_t batteryTemp = 250;
  6663  01E7  30FA               	movlw	250
  6664  01E8  00CD               	movwf	main@batteryTemp^(0+128)
  6665  01E9  3000               	movlw	0
  6666  01EA  00CE               	movwf	(main@batteryTemp^(0+128)+1)
  6667                           
  6668                           ;main.c: 57: float efficiency = 0;
  6669  01EB  3000               	movlw	0
  6670  01EC  00E3               	movwf	main@efficiency^(0+128)
  6671  01ED  3000               	movlw	0
  6672  01EE  00E4               	movwf	(main@efficiency+1)^(0+128)
  6673  01EF  3000               	movlw	0
  6674  01F0  00E5               	movwf	(main@efficiency+2)^(0+128)
  6675                           
  6676                           ;main.c: 58: extern int8_t Imode[2];
  6677                           ;main.c: 59: extern int16_t Vref[2];
  6678                           ;main.c: 60: extern int16_t Iref[2];
  6679                           ;main.c: 61: uint8_t menuButton = 0;
  6680  01F1  01E6               	clrf	main@menuButton^(0+128)
  6681                           
  6682                           ;main.c: 62: uint16_t faultCount = 0;
  6683  01F2  01D8               	clrf	main@faultCount^(0+128)
  6684  01F3  01D9               	clrf	(main@faultCount+1)^(0+128)
  6685                           
  6686                           ;main.c: 63: uint16_t faultNotReset = 0;
  6687  01F4  01CF               	clrf	main@faultNotReset^(0+128)
  6688  01F5  01D0               	clrf	(main@faultNotReset+1)^(0+128)
  6689                           
  6690                           ;main.c: 64: extern int8_t VHoldMode[2];
  6691                           ;main.c: 65: extern uint8_t batteryState[2];
  6692                           ;main.c: 67: extern uint16_t IminCount[2];
  6693                           ;main.c: 70: SYSTEM_Initialize();
  6694  01F6  3194  2455  3181   	fcall	_SYSTEM_Initialize
  6695                           
  6696                           ;main.c: 72: LCDClear();
  6697  01F9  3193  2399  3181   	fcall	_LCDClear
  6698  01FC                     l3118:	
  6699                           ;main.c: 74: void calculateCurrent0(void);
  6700                           ;main.c: 75: void calculateCurrent1(void);
  6701                           ;main.c: 76: void calculateCurrent2(void);
  6702                           ;main.c: 77: void calculateCurrent3(void);
  6703                           ;main.c: 91: while (1)
  6704                           
  6705                           
  6706                           ;main.c: 92: {
  6707                           ;main.c: 93: if(!(RB2))
  6708  01FC  0020               	movlb	0	; select bank0
  6709  01FD  190D               	btfsc	13,2	;volatile
  6710  01FE  2A10               	goto	l3126
  6711                           
  6712                           ;main.c: 94: {
  6713                           ;main.c: 95: LATA5=0;
  6714  01FF  1296               	bcf	22,5	;volatile
  6715                           
  6716                           ;main.c: 96: _delay((unsigned long)((400)*(32000000/4000000.0)));
  6717  0200  3005               	movlw	5
  6718  0201  0020               	movlb	0	; select bank0
  6719  0202  00E8               	movwf	??_main
  6720  0203  3026               	movlw	38
  6721  0204                     u3977:	
  6722  0204  0B89               	decfsz	9,f
  6723  0205  2A04               	goto	u3977
  6724  0206  0BE8               	decfsz	??_main,f
  6725  0207  2A04               	goto	u3977
  6726  0208  0000               	nop
  6727                           
  6728                           ;main.c: 97: faultCount+=1;
  6729  0209  3001               	movlw	1
  6730  020A  0021               	movlb	1	; select bank1
  6731  020B  07D8               	addwf	main@faultCount^(0+128),f
  6732  020C  3000               	movlw	0
  6733  020D  3DD9               	addwfc	(main@faultCount+1)^(0+128),f
  6734                           
  6735                           ;main.c: 98: LATA5=1;
  6736  020E  0020               	movlb	0	; select bank0
  6737  020F  1696               	bsf	22,5	;volatile
  6738  0210                     l3126:	
  6739                           
  6740                           ;main.c: 99: }
  6741                           ;main.c: 100: for(j=0;j<4;j++) Ianalogs[j]=readIAnalog(j);
  6742  0210  0021               	movlb	1	; select bank1
  6743  0211  01E7               	clrf	main@j^(0+128)
  6744  0212  3004               	movlw	4
  6745  0213  0267               	subwf	main@j^(0+128),w
  6746  0214  1803               	btfsc	3,0
  6747  0215  2A35               	goto	l3138
  6748  0216                     l3132:	
  6749  0216  0867               	movf	main@j^(0+128),w
  6750  0217  0020               	movlb	0	; select bank0
  6751  0218  00E8               	movwf	??_main
  6752  0219  01E9               	clrf	??_main+1
  6753  021A  0868               	movf	??_main,w
  6754  021B  00A6               	movwf	readIAnalog@channel
  6755  021C  0869               	movf	??_main+1,w
  6756  021D  00A7               	movwf	readIAnalog@channel+1
  6757  021E  318E  26B4  3181   	fcall	_readIAnalog
  6758  0221  0021               	movlb	1	; select bank1
  6759  0222  3567               	lslf	main@j^(0+128),w
  6760  0223  3E30               	addlw	(low (_Ianalogs| (0+256)))& (0+255)
  6761  0224  0086               	movwf	6
  6762  0225  3001               	movlw	1	; select bank2/3
  6763  0226  0087               	movwf	7
  6764  0227  0020               	movlb	0	; select bank0
  6765  0228  0826               	movf	?_readIAnalog,w
  6766  0229  3FC0               	movwi [0]fsr1
  6767  022A  0827               	movf	?_readIAnalog+1,w
  6768  022B  3FC1               	movwi [1]fsr1
  6769  022C  3001               	movlw	1
  6770  022D  00E8               	movwf	??_main
  6771  022E  0868               	movf	??_main,w
  6772  022F  0021               	movlb	1	; select bank1
  6773  0230  07E7               	addwf	main@j^(0+128),f
  6774  0231  3004               	movlw	4
  6775  0232  0267               	subwf	main@j^(0+128),w
  6776  0233  1C03               	skipc
  6777  0234  2A16               	goto	l3132
  6778  0235                     l3138:	
  6779                           
  6780                           ;main.c: 102: Vanalogs[0]=ADCRead(21);
  6781  0235  3015               	movlw	21
  6782  0236  3192  22B7  3181   	fcall	_ADCRead
  6783  0239  0871               	movf	?_ADCRead+1,w
  6784  023A  0022               	movlb	2	; select bank2
  6785  023B  00B9               	movwf	(_Vanalogs+1)^(0+256)
  6786  023C  0870               	movf	?_ADCRead,w
  6787  023D  00B8               	movwf	_Vanalogs^(0+256)
  6788                           
  6789                           ;main.c: 104: Vanalogs[1]=ADCRead(17);
  6790  023E  3011               	movlw	17
  6791  023F  3192  22B7  3181   	fcall	_ADCRead
  6792  0242  0871               	movf	?_ADCRead+1,w
  6793  0243  0022               	movlb	2	; select bank2
  6794  0244  00BB               	movwf	((_Vanalogs+1)^(0+256)+2)
  6795  0245  0870               	movf	?_ADCRead,w
  6796  0246  00BA               	movwf	(_Vanalogs^(0+256)+2)
  6797                           
  6798                           ;main.c: 106: Vanalogs[2]=ADCRead(23);
  6799  0247  3017               	movlw	23
  6800  0248  3192  22B7  3181   	fcall	_ADCRead
  6801  024B  0871               	movf	?_ADCRead+1,w
  6802  024C  0022               	movlb	2	; select bank2
  6803  024D  00BD               	movwf	((_Vanalogs+1)^(0+256)+4)
  6804  024E  0870               	movf	?_ADCRead,w
  6805  024F  00BC               	movwf	(_Vanalogs^(0+256)+4)
  6806                           
  6807                           ;main.c: 108: Vanalogs[3]=ADCRead(19);
  6808  0250  3013               	movlw	19
  6809  0251  3192  22B7  3181   	fcall	_ADCRead
  6810  0254  0871               	movf	?_ADCRead+1,w
  6811  0255  0022               	movlb	2	; select bank2
  6812  0256  00BF               	movwf	((_Vanalogs+1)^(0+256)+6)
  6813  0257  0870               	movf	?_ADCRead,w
  6814  0258  00BE               	movwf	(_Vanalogs^(0+256)+6)
  6815                           
  6816                           ;main.c: 110: if(!(RB2))faultNotReset+=1;
  6817  0259  0020               	movlb	0	; select bank0
  6818  025A  190D               	btfsc	13,2	;volatile
  6819  025B  2A61               	goto	l3144
  6820  025C  3001               	movlw	1
  6821  025D  0021               	movlb	1	; select bank1
  6822  025E  07CF               	addwf	main@faultNotReset^(0+128),f
  6823  025F  3000               	movlw	0
  6824  0260  3DD0               	addwfc	(main@faultNotReset+1)^(0+128),f
  6825  0261                     l3144:	
  6826                           
  6827                           ;main.c: 120: voltage[0]=(int16_t)(Vanalogs[0]/.5448);
  6828  0261  0022               	movlb	2	; select bank2
  6829  0262  0839               	movf	(_Vanalogs+1)^(0+256),w
  6830  0263  00F9               	movwf	___awtoft@c+1
  6831  0264  0838               	movf	_Vanalogs^(0+256),w
  6832  0265  00F8               	movwf	___awtoft@c
  6833  0266  3193  2354  3181   	fcall	___awtoft
  6834  0269  0878               	movf	?___awtoft,w
  6835  026A  0020               	movlb	0	; select bank0
  6836  026B  00A3               	movwf	___ftdiv@f1
  6837  026C  0879               	movf	?___awtoft+1,w
  6838  026D  00A4               	movwf	___ftdiv@f1+1
  6839  026E  087A               	movf	?___awtoft+2,w
  6840  026F  00A5               	movwf	___ftdiv@f1+2
  6841  0270  3078               	movlw	120
  6842  0271  00A0               	movwf	___ftdiv@f2
  6843  0272  300B               	movlw	11
  6844  0273  00A1               	movwf	___ftdiv@f2+1
  6845  0274  303F               	movlw	63
  6846  0275  00A2               	movwf	___ftdiv@f2+2
  6847  0276  3188  20FD  3181   	fcall	___ftdiv
  6848  0279  0020               	movlb	0	; select bank0
  6849  027A  0820               	movf	?___ftdiv,w
  6850  027B  00B0               	movwf	___fttol@f1
  6851  027C  0821               	movf	?___ftdiv+1,w
  6852  027D  00B1               	movwf	___fttol@f1+1
  6853  027E  0822               	movf	?___ftdiv+2,w
  6854  027F  00B2               	movwf	___fttol@f1+2
  6855  0280  3188  2076  3181   	fcall	___fttol
  6856  0283  0020               	movlb	0	; select bank0
  6857  0284  0831               	movf	?___fttol+1,w
  6858  0285  0021               	movlb	1	; select bank1
  6859  0286  00A9               	movwf	(_voltage+1)^(0+128)
  6860  0287  0020               	movlb	0	; select bank0
  6861  0288  0830               	movf	?___fttol,w
  6862  0289  0021               	movlb	1	; select bank1
  6863  028A  00A8               	movwf	_voltage^(0+128)
  6864                           
  6865                           ;main.c: 122: voltage[1]=(int16_t)(Vanalogs[1]/.54503);
  6866  028B  0022               	movlb	2	; select bank2
  6867  028C  083B               	movf	((_Vanalogs+1)^(0+256)+2),w
  6868  028D  00F9               	movwf	___awtoft@c+1
  6869  028E  083A               	movf	(_Vanalogs^(0+256)+2),w
  6870  028F  00F8               	movwf	___awtoft@c
  6871  0290  3193  2354  3181   	fcall	___awtoft
  6872  0293  0878               	movf	?___awtoft,w
  6873  0294  0020               	movlb	0	; select bank0
  6874  0295  00A3               	movwf	___ftdiv@f1
  6875  0296  0879               	movf	?___awtoft+1,w
  6876  0297  00A4               	movwf	___ftdiv@f1+1
  6877  0298  087A               	movf	?___awtoft+2,w
  6878  0299  00A5               	movwf	___ftdiv@f1+2
  6879  029A  3087               	movlw	135
  6880  029B  00A0               	movwf	___ftdiv@f2
  6881  029C  300B               	movlw	11
  6882  029D  00A1               	movwf	___ftdiv@f2+1
  6883  029E  303F               	movlw	63
  6884  029F  00A2               	movwf	___ftdiv@f2+2
  6885  02A0  3188  20FD  3181   	fcall	___ftdiv
  6886  02A3  0020               	movlb	0	; select bank0
  6887  02A4  0820               	movf	?___ftdiv,w
  6888  02A5  00B0               	movwf	___fttol@f1
  6889  02A6  0821               	movf	?___ftdiv+1,w
  6890  02A7  00B1               	movwf	___fttol@f1+1
  6891  02A8  0822               	movf	?___ftdiv+2,w
  6892  02A9  00B2               	movwf	___fttol@f1+2
  6893  02AA  3188  2076  3181   	fcall	___fttol
  6894  02AD  0020               	movlb	0	; select bank0
  6895  02AE  0831               	movf	?___fttol+1,w
  6896  02AF  0021               	movlb	1	; select bank1
  6897  02B0  00AB               	movwf	((_voltage+1)^(0+128)+2)
  6898  02B1  0020               	movlb	0	; select bank0
  6899  02B2  0830               	movf	?___fttol,w
  6900  02B3  0021               	movlb	1	; select bank1
  6901  02B4  00AA               	movwf	(_voltage^(0+128)+2)
  6902                           
  6903                           ;main.c: 124: voltage[2]=(int16_t)(Vanalogs[2]/.405775);
  6904  02B5  0022               	movlb	2	; select bank2
  6905  02B6  083D               	movf	((_Vanalogs+1)^(0+256)+4),w
  6906  02B7  00F9               	movwf	___awtoft@c+1
  6907  02B8  083C               	movf	(_Vanalogs^(0+256)+4),w
  6908  02B9  00F8               	movwf	___awtoft@c
  6909  02BA  3193  2354  3181   	fcall	___awtoft
  6910  02BD  0878               	movf	?___awtoft,w
  6911  02BE  0020               	movlb	0	; select bank0
  6912  02BF  00A3               	movwf	___ftdiv@f1
  6913  02C0  0879               	movf	?___awtoft+1,w
  6914  02C1  00A4               	movwf	___ftdiv@f1+1
  6915  02C2  087A               	movf	?___awtoft+2,w
  6916  02C3  00A5               	movwf	___ftdiv@f1+2
  6917  02C4  30C2               	movlw	194
  6918  02C5  00A0               	movwf	___ftdiv@f2
  6919  02C6  30CF               	movlw	207
  6920  02C7  00A1               	movwf	___ftdiv@f2+1
  6921  02C8  303E               	movlw	62
  6922  02C9  00A2               	movwf	___ftdiv@f2+2
  6923  02CA  3188  20FD  3181   	fcall	___ftdiv
  6924  02CD  0020               	movlb	0	; select bank0
  6925  02CE  0820               	movf	?___ftdiv,w
  6926  02CF  00B0               	movwf	___fttol@f1
  6927  02D0  0821               	movf	?___ftdiv+1,w
  6928  02D1  00B1               	movwf	___fttol@f1+1
  6929  02D2  0822               	movf	?___ftdiv+2,w
  6930  02D3  00B2               	movwf	___fttol@f1+2
  6931  02D4  3188  2076  3181   	fcall	___fttol
  6932  02D7  0020               	movlb	0	; select bank0
  6933  02D8  0831               	movf	?___fttol+1,w
  6934  02D9  0021               	movlb	1	; select bank1
  6935  02DA  00AD               	movwf	((_voltage+1)^(0+128)+4)
  6936  02DB  0020               	movlb	0	; select bank0
  6937  02DC  0830               	movf	?___fttol,w
  6938  02DD  0021               	movlb	1	; select bank1
  6939  02DE  00AC               	movwf	(_voltage^(0+128)+4)
  6940                           
  6941                           ;main.c: 126: voltage[3]=(int16_t)(Vanalogs[3]/.405775);
  6942  02DF  0022               	movlb	2	; select bank2
  6943  02E0  083F               	movf	((_Vanalogs+1)^(0+256)+6),w
  6944  02E1  00F9               	movwf	___awtoft@c+1
  6945  02E2  083E               	movf	(_Vanalogs^(0+256)+6),w
  6946  02E3  00F8               	movwf	___awtoft@c
  6947  02E4  3193  2354  3181   	fcall	___awtoft
  6948  02E7  0878               	movf	?___awtoft,w
  6949  02E8  0020               	movlb	0	; select bank0
  6950  02E9  00A3               	movwf	___ftdiv@f1
  6951  02EA  0879               	movf	?___awtoft+1,w
  6952  02EB  00A4               	movwf	___ftdiv@f1+1
  6953  02EC  087A               	movf	?___awtoft+2,w
  6954  02ED  00A5               	movwf	___ftdiv@f1+2
  6955  02EE  30C2               	movlw	194
  6956  02EF  00A0               	movwf	___ftdiv@f2
  6957  02F0  30CF               	movlw	207
  6958  02F1  00A1               	movwf	___ftdiv@f2+1
  6959  02F2  303E               	movlw	62
  6960  02F3  00A2               	movwf	___ftdiv@f2+2
  6961  02F4  3188  20FD  3181   	fcall	___ftdiv
  6962  02F7  0020               	movlb	0	; select bank0
  6963  02F8  0820               	movf	?___ftdiv,w
  6964  02F9  00B0               	movwf	___fttol@f1
  6965  02FA  0821               	movf	?___ftdiv+1,w
  6966  02FB  00B1               	movwf	___fttol@f1+1
  6967  02FC  0822               	movf	?___ftdiv+2,w
  6968  02FD  00B2               	movwf	___fttol@f1+2
  6969  02FE  3188  2076  3181   	fcall	___fttol
  6970  0301  0020               	movlb	0	; select bank0
  6971  0302  0831               	movf	?___fttol+1,w
  6972  0303  0021               	movlb	1	; select bank1
  6973  0304  00AF               	movwf	((_voltage+1)^(0+128)+6)
  6974  0305  0020               	movlb	0	; select bank0
  6975  0306  0830               	movf	?___fttol,w
  6976  0307  0021               	movlb	1	; select bank1
  6977  0308  00AE               	movwf	(_voltage^(0+128)+6)
  6978                           
  6979                           ;main.c: 128: calculateCurrent0();
  6980  0309  3195  253F  3181   	fcall	_calculateCurrent0
  6981                           
  6982                           ;main.c: 130: calculateCurrent1();
  6983  030C  3195  2584  3181   	fcall	_calculateCurrent1
  6984                           
  6985                           ;main.c: 132: calculateCurrent2();
  6986  030F  3195  25C9  3181   	fcall	_calculateCurrent2
  6987                           
  6988                           ;main.c: 134: calculateCurrent3();
  6989  0312  3196  260E  3181   	fcall	_calculateCurrent3
  6990                           
  6991                           ;main.c: 136: if(Imode[0])
  6992  0315  0021               	movlb	1	; select bank1
  6993  0316  086E               	movf	_Imode^(0+128),w
  6994  0317  1903               	btfsc	3,2
  6995  0318  2B39               	goto	l3174
  6996                           
  6997                           ;main.c: 137: {
  6998                           ;main.c: 138: if(voltage[2]<MPPT0)
  6999  0319  082D               	movf	((_voltage+1)^(0+128)+4),w
  7000  031A  3A80               	xorlw	128
  7001  031B  0020               	movlb	0	; select bank0
  7002  031C  00E8               	movwf	??_main
  7003  031D  0021               	movlb	1	; select bank1
  7004  031E  0869               	movf	(main@MPPT0+1)^(0+128),w
  7005  031F  3A80               	xorlw	128
  7006  0320  0020               	movlb	0	; select bank0
  7007  0321  0268               	subwf	??_main,w
  7008  0322  1D03               	skipz
  7009  0323  2B27               	goto	u3725
  7010  0324  0021               	movlb	1	; select bank1
  7011  0325  0868               	movf	main@MPPT0^(0+128),w
  7012  0326  022C               	subwf	(_voltage^(0+128)+4),w
  7013  0327                     u3725:	
  7014  0327  1C03               	btfss	3,0
  7015  0328  2B49               	goto	L1
  7016                           
  7017                           ;main.c: 145: else if(voltage[2]>MPPT0)
  7018                           
  7019                           ;main.c: 143: }
  7020                           ;main.c: 144: }
  7021                           
  7022                           ;main.c: 141: {
  7023                           ;main.c: 142: dutyCycle6+=1;
  7024                           
  7025                           ;main.c: 139: {
  7026                           ;main.c: 140: if(dutyCycle6<1023)
  7027  0329  0021               	movlb	1	; select bank1
  7028  032A  0869               	movf	(main@MPPT0+1)^(0+128),w
  7029  032B  3A80               	xorlw	128
  7030  032C  0020               	movlb	0	; select bank0
  7031  032D  00E8               	movwf	??_main
  7032  032E  0021               	movlb	1	; select bank1
  7033  032F  082D               	movf	((_voltage+1)^(0+128)+4),w
  7034  0330  3A80               	xorlw	128
  7035  0331  0020               	movlb	0	; select bank0
  7036  0332  0268               	subwf	??_main,w
  7037  0333  1D03               	skipz
  7038  0334  2B65               	goto	u3785
  7039  0335  0021               	movlb	1	; select bank1
  7040  0336  082C               	movf	(_voltage^(0+128)+4),w
  7041  0337  0268               	subwf	main@MPPT0^(0+128),w
  7042  0338  2B65               	goto	u3785
  7043  0339                     l3174:	
  7044                           ;main.c: 153: }
  7045                           
  7046                           ;main.c: 150: }
  7047                           ;main.c: 151: }
  7048                           
  7049                           ;main.c: 148: {
  7050                           ;main.c: 149: dutyCycle6-=1;
  7051                           
  7052                           ;main.c: 146: {
  7053                           ;main.c: 147: if(dutyCycle6>0)
  7054                           
  7055                           
  7056                           ;main.c: 154: else
  7057                           ;main.c: 155: {
  7058                           ;main.c: 156: if(voltage[0]>(int16_t)Vref[0])
  7059  0339  0831               	movf	(_Vref+1)^(0+128),w
  7060  033A  3A80               	xorlw	128
  7061  033B  0020               	movlb	0	; select bank0
  7062  033C  00E8               	movwf	??_main
  7063  033D  0021               	movlb	1	; select bank1
  7064  033E  0829               	movf	(_voltage+1)^(0+128),w
  7065  033F  3A80               	xorlw	128
  7066  0340  0020               	movlb	0	; select bank0
  7067  0341  0268               	subwf	??_main,w
  7068  0342  1D03               	skipz
  7069  0343  2B47               	goto	u3765
  7070  0344  0021               	movlb	1	; select bank1
  7071  0345  0828               	movf	_voltage^(0+128),w
  7072  0346  0230               	subwf	_Vref^(0+128),w
  7073  0347                     u3765:	
  7074  0347  1803               	skipnc
  7075  0348  2B56               	goto	l3180
  7076  0349                     L1:	
  7077                           
  7078                           ;main.c: 157: {
  7079                           ;main.c: 158: if(dutyCycle6<1023) dutyCycle6+=1;
  7080  0349  3003               	movlw	3
  7081  034A  0021               	movlb	1	; select bank1
  7082  034B  026B               	subwf	(main@dutyCycle6+1)^(0+128),w
  7083  034C  30FF               	movlw	255
  7084  034D  1903               	skipnz
  7085  034E  026A               	subwf	main@dutyCycle6^(0+128),w
  7086  034F  1803               	skipnc
  7087  0350  2B70               	goto	l3186
  7088  0351  3001               	movlw	1
  7089  0352  07EA               	addwf	main@dutyCycle6^(0+128),f
  7090  0353  3000               	movlw	0
  7091  0354  3DEB               	addwfc	(main@dutyCycle6+1)^(0+128),f
  7092                           
  7093                           ;main.c: 159: }
  7094  0355  2B70               	goto	l3186
  7095  0356                     l3180:	
  7096                           
  7097                           ;main.c: 160: else if(voltage[0]<(int16_t)Vref[0])
  7098  0356  0021               	movlb	1	; select bank1
  7099  0357  0829               	movf	(_voltage+1)^(0+128),w
  7100  0358  3A80               	xorlw	128
  7101  0359  0020               	movlb	0	; select bank0
  7102  035A  00E8               	movwf	??_main
  7103  035B  0021               	movlb	1	; select bank1
  7104  035C  0831               	movf	(_Vref+1)^(0+128),w
  7105  035D  3A80               	xorlw	128
  7106  035E  0020               	movlb	0	; select bank0
  7107  035F  0268               	subwf	??_main,w
  7108  0360  1D03               	skipz
  7109  0361  2B65               	goto	u3785
  7110  0362  0021               	movlb	1	; select bank1
  7111  0363  0830               	movf	_Vref^(0+128),w
  7112  0364  0228               	subwf	_voltage^(0+128),w
  7113  0365                     u3785:	
  7114  0365  1803               	skipnc
  7115  0366  2B70               	goto	l3186
  7116                           
  7117                           ;main.c: 161: {
  7118                           ;main.c: 162: if(dutyCycle6>0) dutyCycle6-=1;;
  7119  0367  0021               	movlb	1	; select bank1
  7120  0368  086A               	movf	main@dutyCycle6^(0+128),w
  7121  0369  046B               	iorwf	(main@dutyCycle6+1)^(0+128),w
  7122  036A  1903               	btfsc	3,2
  7123  036B  2B70               	goto	l3186
  7124  036C  3001               	movlw	1
  7125  036D  02EA               	subwf	main@dutyCycle6^(0+128),f
  7126  036E  3000               	movlw	0
  7127  036F  3BEB               	subwfb	(main@dutyCycle6+1)^(0+128),f
  7128  0370                     l3186:	
  7129                           ;main.c: 163: }
  7130                           
  7131                           
  7132                           ;main.c: 165: }
  7133                           ;main.c: 167: if(Imode[1])
  7134  0370  0021               	movlb	1	; select bank1
  7135  0371  086F               	movf	(_Imode^(0+128)+1),w
  7136  0372  1903               	btfsc	3,2
  7137  0373  2B85               	goto	l3198
  7138                           
  7139                           ;main.c: 168: {
  7140                           ;main.c: 169: if(voltage[3]<MPPT1)
  7141  0374  082F               	movf	((_voltage+1)^(0+128)+6),w
  7142  0375  3A80               	xorlw	128
  7143  0376  0020               	movlb	0	; select bank0
  7144  0377  00E8               	movwf	??_main
  7145  0378  0021               	movlb	1	; select bank1
  7146  0379  0855               	movf	(main@MPPT1+1)^(0+128),w
  7147  037A  3A80               	xorlw	128
  7148  037B  0020               	movlb	0	; select bank0
  7149  037C  0268               	subwf	??_main,w
  7150  037D  1D03               	skipz
  7151  037E  2B82               	goto	u3815
  7152  037F  0021               	movlb	1	; select bank1
  7153  0380  0854               	movf	main@MPPT1^(0+128),w
  7154  0381  022E               	subwf	(_voltage^(0+128)+6),w
  7155  0382                     u3815:	
  7156  0382  1C03               	btfss	3,0
  7157  0383  2B95               	goto	L2
  7158                           
  7159                           ;main.c: 174: }
  7160                           ;main.c: 175: }
  7161                           
  7162                           ;main.c: 172: {
  7163                           ;main.c: 173: dutyCycle7+=1;
  7164                           
  7165                           ;main.c: 170: {
  7166                           ;main.c: 171: if(dutyCycle7<1023)
  7167  0384  2BB3               	goto	L3
  7168  0385                     l3198:	
  7169                           ;main.c: 179: }
  7170                           ;main.c: 180: }
  7171                           
  7172                           ;main.c: 177: {
  7173                           ;main.c: 178: dutyCycle7-=1;
  7174                           
  7175                           ;main.c: 176: else if(dutyCycle7>0)
  7176                           
  7177                           
  7178                           ;main.c: 181: else
  7179                           ;main.c: 182: {
  7180                           ;main.c: 183: if(voltage[1]>(int16_t)Vref[1])
  7181  0385  0833               	movf	((_Vref+1)^(0+128)+2),w
  7182  0386  3A80               	xorlw	128
  7183  0387  0020               	movlb	0	; select bank0
  7184  0388  00E8               	movwf	??_main
  7185  0389  0021               	movlb	1	; select bank1
  7186  038A  082B               	movf	((_voltage+1)^(0+128)+2),w
  7187  038B  3A80               	xorlw	128
  7188  038C  0020               	movlb	0	; select bank0
  7189  038D  0268               	subwf	??_main,w
  7190  038E  1D03               	skipz
  7191  038F  2B93               	goto	u3845
  7192  0390  0021               	movlb	1	; select bank1
  7193  0391  082A               	movf	(_voltage^(0+128)+2),w
  7194  0392  0232               	subwf	(_Vref^(0+128)+2),w
  7195  0393                     u3845:	
  7196  0393  1803               	skipnc
  7197  0394  2BA2               	goto	l3204
  7198  0395                     L2:	
  7199                           
  7200                           ;main.c: 184: {
  7201                           ;main.c: 185: if(dutyCycle7<1023) dutyCycle7+=1;
  7202  0395  3003               	movlw	3
  7203  0396  0021               	movlb	1	; select bank1
  7204  0397  026D               	subwf	(main@dutyCycle7+1)^(0+128),w
  7205  0398  30FF               	movlw	255
  7206  0399  1903               	skipnz
  7207  039A  026C               	subwf	main@dutyCycle7^(0+128),w
  7208  039B  1803               	skipnc
  7209  039C  2BBC               	goto	l3210
  7210  039D  3001               	movlw	1
  7211  039E  07EC               	addwf	main@dutyCycle7^(0+128),f
  7212  039F  3000               	movlw	0
  7213  03A0  3DED               	addwfc	(main@dutyCycle7+1)^(0+128),f
  7214                           
  7215                           ;main.c: 186: }
  7216  03A1  2BBC               	goto	l3210
  7217  03A2                     l3204:	
  7218                           
  7219                           ;main.c: 187: else if(voltage[1]<(int16_t)Vref[1])
  7220  03A2  0021               	movlb	1	; select bank1
  7221  03A3  082B               	movf	((_voltage+1)^(0+128)+2),w
  7222  03A4  3A80               	xorlw	128
  7223  03A5  0020               	movlb	0	; select bank0
  7224  03A6  00E8               	movwf	??_main
  7225  03A7  0021               	movlb	1	; select bank1
  7226  03A8  0833               	movf	((_Vref+1)^(0+128)+2),w
  7227  03A9  3A80               	xorlw	128
  7228  03AA  0020               	movlb	0	; select bank0
  7229  03AB  0268               	subwf	??_main,w
  7230  03AC  1D03               	skipz
  7231  03AD  2BB1               	goto	u3865
  7232  03AE  0021               	movlb	1	; select bank1
  7233  03AF  0832               	movf	(_Vref^(0+128)+2),w
  7234  03B0  022A               	subwf	(_voltage^(0+128)+2),w
  7235  03B1                     u3865:	
  7236  03B1  1803               	skipnc
  7237  03B2  2BBC               	goto	l3210
  7238  03B3                     L3:	
  7239                           
  7240                           ;main.c: 188: {
  7241                           ;main.c: 189: if(dutyCycle7>0) dutyCycle7-=1;;
  7242  03B3  0021               	movlb	1	; select bank1
  7243  03B4  086C               	movf	main@dutyCycle7^(0+128),w
  7244  03B5  046D               	iorwf	(main@dutyCycle7+1)^(0+128),w
  7245  03B6  1903               	btfsc	3,2
  7246  03B7  2BBC               	goto	l3210
  7247  03B8  3001               	movlw	1
  7248  03B9  02EC               	subwf	main@dutyCycle7^(0+128),f
  7249  03BA  3000               	movlw	0
  7250  03BB  3BED               	subwfb	(main@dutyCycle7+1)^(0+128),f
  7251  03BC                     l3210:	
  7252                           ;main.c: 190: }
  7253                           
  7254                           
  7255                           ;main.c: 192: }
  7256                           ;main.c: 194: slowLoop+=1;
  7257  03BC  3001               	movlw	1
  7258  03BD  0020               	movlb	0	; select bank0
  7259  03BE  00E8               	movwf	??_main
  7260  03BF  0868               	movf	??_main,w
  7261  03C0  0021               	movlb	1	; select bank1
  7262  03C1  07DA               	addwf	main@slowLoop^(0+128),f
  7263                           
  7264                           ;main.c: 197: PWM6_LoadDutyValue(dutyCycle6);
  7265  03C2  086B               	movf	(main@dutyCycle6+1)^(0+128),w
  7266  03C3  00F1               	movwf	PWM6_LoadDutyValue@dutyCycle6+1
  7267  03C4  086A               	movf	main@dutyCycle6^(0+128),w
  7268  03C5  00F0               	movwf	PWM6_LoadDutyValue@dutyCycle6
  7269  03C6  3192  22CC  3181   	fcall	_PWM6_LoadDutyValue
  7270                           
  7271                           ;main.c: 198: PWM7_LoadDutyValue(dutyCycle7);
  7272  03C9  0021               	movlb	1	; select bank1
  7273  03CA  086D               	movf	(main@dutyCycle7+1)^(0+128),w
  7274  03CB  00F1               	movwf	PWM7_LoadDutyValue@dutyCycle7+1
  7275  03CC  086C               	movf	main@dutyCycle7^(0+128),w
  7276  03CD  00F0               	movwf	PWM7_LoadDutyValue@dutyCycle7
  7277  03CE  3188  2000  3181   	fcall	_PWM7_LoadDutyValue
  7278                           
  7279                           ;main.c: 200: menuButton = readButton();
  7280  03D1  3196  26FC  3181   	fcall	_readButton
  7281  03D4  0020               	movlb	0	; select bank0
  7282  03D5  00E8               	movwf	??_main
  7283  03D6  0868               	movf	??_main,w
  7284  03D7  0021               	movlb	1	; select bank1
  7285  03D8  00E6               	movwf	main@menuButton^(0+128)
  7286                           
  7287                           ;main.c: 201: if(menuButton == 2) if(MPPT0>1375)MPPT0-=1;
  7288  03D9  3002               	movlw	2
  7289  03DA  0666               	xorwf	main@menuButton^(0+128),w
  7290  03DB  1D03               	btfss	3,2
  7291  03DC  2BEF               	goto	l3224
  7292  03DD  0869               	movf	(main@MPPT0+1)^(0+128),w
  7293  03DE  3A80               	xorlw	128
  7294  03DF  0020               	movlb	0	; select bank0
  7295  03E0  00E8               	movwf	??_main
  7296  03E1  3085               	movlw	133
  7297  03E2  0268               	subwf	??_main,w
  7298  03E3  1D03               	skipz
  7299  03E4  2BE8               	goto	u3895
  7300  03E5  3060               	movlw	96
  7301  03E6  0021               	movlb	1	; select bank1
  7302  03E7  0268               	subwf	main@MPPT0^(0+128),w
  7303  03E8                     u3895:	
  7304  03E8  1C03               	skipc
  7305  03E9  2BEF               	goto	l3224
  7306  03EA  30FF               	movlw	255
  7307  03EB  0021               	movlb	1	; select bank1
  7308  03EC  07E8               	addwf	main@MPPT0^(0+128),f
  7309  03ED  30FF               	movlw	255
  7310  03EE  3DE9               	addwfc	(main@MPPT0+1)^(0+128),f
  7311  03EF                     l3224:	
  7312                           
  7313                           ;main.c: 202: if(menuButton == 3)if(MPPT0<2200)MPPT0+=1;
  7314  03EF  3003               	movlw	3
  7315  03F0  0021               	movlb	1	; select bank1
  7316  03F1  0666               	xorwf	main@menuButton^(0+128),w
  7317  03F2  1D03               	btfss	3,2
  7318  03F3  2C06               	goto	l3230
  7319  03F4  0869               	movf	(main@MPPT0+1)^(0+128),w
  7320  03F5  3A80               	xorlw	128
  7321  03F6  0020               	movlb	0	; select bank0
  7322  03F7  00E8               	movwf	??_main
  7323  03F8  3088               	movlw	136
  7324  03F9  0268               	subwf	??_main,w
  7325  03FA  1D03               	skipz
  7326  03FB  2BFF               	goto	u3915
  7327  03FC  3098               	movlw	152
  7328  03FD  0021               	movlb	1	; select bank1
  7329  03FE  0268               	subwf	main@MPPT0^(0+128),w
  7330  03FF                     u3915:	
  7331  03FF  1803               	skipnc
  7332  0400  2C06               	goto	l3230
  7333  0401  3001               	movlw	1
  7334  0402  0021               	movlb	1	; select bank1
  7335  0403  07E8               	addwf	main@MPPT0^(0+128),f
  7336  0404  3000               	movlw	0
  7337  0405  3DE9               	addwfc	(main@MPPT0+1)^(0+128),f
  7338  0406                     l3230:	
  7339                           
  7340                           ;main.c: 203: if(menuButton == 1)LCDInit();
  7341  0406  0021               	movlb	1	; select bank1
  7342  0407  0366               	decf	main@menuButton^(0+128),w
  7343  0408  1D03               	btfss	3,2
  7344  0409  2C0D               	goto	l3234
  7345  040A  3194  248E  3181   	fcall	_LCDInit
  7346  040D                     l3234:	
  7347                           
  7348                           ;main.c: 207: if(slowLoop>250)
  7349  040D  30FB               	movlw	251
  7350  040E  0021               	movlb	1	; select bank1
  7351  040F  025A               	subwf	main@slowLoop^(0+128),w
  7352  0410  1C03               	skipc
  7353  0411  29FC               	goto	l3118
  7354                           
  7355                           ;main.c: 208: {
  7356                           ;main.c: 210: IOutTotal=current[0]+current[1];
  7357  0412  0820               	movf	_current^(0+128),w
  7358  0413  0722               	addwf	(_current^(0+128)+2),w
  7359  0414  00CB               	movwf	main@IOutTotal^(0+128)
  7360  0415  0821               	movf	(_current+1)^(0+128),w
  7361  0416  3D23               	addwfc	((_current+1)^(0+128)+2),w
  7362  0417  00CC               	movwf	(main@IOutTotal+1)^(0+128)
  7363                           
  7364                           ;main.c: 230: displayRefresh+=1;
  7365  0418  3001               	movlw	1
  7366  0419  0020               	movlb	0	; select bank0
  7367  041A  00E8               	movwf	??_main
  7368  041B  0868               	movf	??_main,w
  7369  041C  0021               	movlb	1	; select bank1
  7370  041D  07DB               	addwf	main@displayRefresh^(0+128),f
  7371                           
  7372                           ;main.c: 231: if(displayRefresh>80)
  7373  041E  3051               	movlw	81
  7374  041F  025B               	subwf	main@displayRefresh^(0+128),w
  7375  0420  1C03               	skipc
  7376  0421  2C3B               	goto	l3246
  7377                           
  7378                           ;main.c: 232: {
  7379                           ;main.c: 233: LCDClear();
  7380  0422  3193  2399  3181   	fcall	_LCDClear
  7381                           
  7382                           ;main.c: 234: displayRefresh=0;
  7383  0425  0021               	movlb	1	; select bank1
  7384  0426  01DB               	clrf	main@displayRefresh^(0+128)
  7385                           
  7386                           ;main.c: 235: batteryTemp=tempCalc(ADCRead(9));
  7387  0427  3009               	movlw	9
  7388  0428  3192  22B7  3181   	fcall	_ADCRead
  7389  042B  0871               	movf	?_ADCRead+1,w
  7390  042C  0020               	movlb	0	; select bank0
  7391  042D  00DE               	movwf	tempCalc@analogValue+1
  7392  042E  0870               	movf	?_ADCRead,w
  7393  042F  00DD               	movwf	tempCalc@analogValue
  7394  0430  318D  2597  3181   	fcall	_tempCalc
  7395  0433  0020               	movlb	0	; select bank0
  7396  0434  085E               	movf	?_tempCalc+1,w
  7397  0435  0021               	movlb	1	; select bank1
  7398  0436  00CE               	movwf	(main@batteryTemp+1)^(0+128)
  7399  0437  0020               	movlb	0	; select bank0
  7400  0438  085D               	movf	?_tempCalc,w
  7401  0439  0021               	movlb	1	; select bank1
  7402  043A  00CD               	movwf	main@batteryTemp^(0+128)
  7403  043B                     l3246:	
  7404                           
  7405                           ;main.c: 236: }
  7406                           ;main.c: 237: Battery_State_Machine(0);
  7407  043B  3000               	movlw	0
  7408  043C  3180  207B  3181   	fcall	_Battery_State_Machine
  7409                           
  7410                           ;main.c: 239: efficiency=(float)voltage[0]/100*current[0]/10;
  7411  043F  0021               	movlb	1	; select bank1
  7412  0440  0821               	movf	(_current+1)^(0+128),w
  7413  0441  00F9               	movwf	___awtoft@c+1
  7414  0442  0820               	movf	_current^(0+128),w
  7415  0443  00F8               	movwf	___awtoft@c
  7416  0444  3193  2354  3181   	fcall	___awtoft
  7417  0447  0878               	movf	?___awtoft,w
  7418  0448  0020               	movlb	0	; select bank0
  7419  0449  00B0               	movwf	___ftmul@f1
  7420  044A  0879               	movf	?___awtoft+1,w
  7421  044B  00B1               	movwf	___ftmul@f1+1
  7422  044C  087A               	movf	?___awtoft+2,w
  7423  044D  00B2               	movwf	___ftmul@f1+2
  7424  044E  3000               	movlw	0
  7425  044F  00A0               	movwf	___ftdiv@f2
  7426  0450  30C8               	movlw	200
  7427  0451  00A1               	movwf	___ftdiv@f2+1
  7428  0452  3042               	movlw	66
  7429  0453  00A2               	movwf	___ftdiv@f2+2
  7430  0454  0021               	movlb	1	; select bank1
  7431  0455  0829               	movf	(_voltage+1)^(0+128),w
  7432  0456  00F9               	movwf	___awtoft@c+1
  7433  0457  0828               	movf	_voltage^(0+128),w
  7434  0458  00F8               	movwf	___awtoft@c
  7435  0459  3193  2354  3181   	fcall	___awtoft
  7436  045C  0878               	movf	?___awtoft,w
  7437  045D  0020               	movlb	0	; select bank0
  7438  045E  00A3               	movwf	___ftdiv@f1
  7439  045F  0879               	movf	?___awtoft+1,w
  7440  0460  00A4               	movwf	___ftdiv@f1+1
  7441  0461  087A               	movf	?___awtoft+2,w
  7442  0462  00A5               	movwf	___ftdiv@f1+2
  7443  0463  3188  20FD  3181   	fcall	___ftdiv
  7444  0466  0020               	movlb	0	; select bank0
  7445  0467  0820               	movf	?___ftdiv,w
  7446  0468  00B3               	movwf	___ftmul@f2
  7447  0469  0821               	movf	?___ftdiv+1,w
  7448  046A  00B4               	movwf	___ftmul@f2+1
  7449  046B  0822               	movf	?___ftdiv+2,w
  7450  046C  00B5               	movwf	___ftmul@f2+2
  7451  046D  318A  2256  3181   	fcall	___ftmul
  7452  0470  0020               	movlb	0	; select bank0
  7453  0471  0830               	movf	?___ftmul,w
  7454  0472  0021               	movlb	1	; select bank1
  7455  0473  00DC               	movwf	_main$1189^(0+128)
  7456  0474  0020               	movlb	0	; select bank0
  7457  0475  0831               	movf	?___ftmul+1,w
  7458  0476  0021               	movlb	1	; select bank1
  7459  0477  00DD               	movwf	(_main$1189+1)^(0+128)
  7460  0478  0020               	movlb	0	; select bank0
  7461  0479  0832               	movf	?___ftmul+2,w
  7462  047A  0021               	movlb	1	; select bank1
  7463  047B  00DE               	movwf	(_main$1189+2)^(0+128)
  7464                           
  7465                           ;main.c: 239: efficiency=(float)voltage[0]/100*current[0]/10;
  7466  047C  3000               	movlw	0
  7467  047D  0020               	movlb	0	; select bank0
  7468  047E  00A0               	movwf	___ftdiv@f2
  7469  047F  3020               	movlw	32
  7470  0480  00A1               	movwf	___ftdiv@f2+1
  7471  0481  3041               	movlw	65
  7472  0482  00A2               	movwf	___ftdiv@f2+2
  7473  0483  0021               	movlb	1	; select bank1
  7474  0484  085C               	movf	_main$1189^(0+128),w
  7475  0485  0020               	movlb	0	; select bank0
  7476  0486  00A3               	movwf	___ftdiv@f1
  7477  0487  0021               	movlb	1	; select bank1
  7478  0488  085D               	movf	(_main$1189+1)^(0+128),w
  7479  0489  0020               	movlb	0	; select bank0
  7480  048A  00A4               	movwf	___ftdiv@f1+1
  7481  048B  0021               	movlb	1	; select bank1
  7482  048C  085E               	movf	(_main$1189+2)^(0+128),w
  7483  048D  0020               	movlb	0	; select bank0
  7484  048E  00A5               	movwf	___ftdiv@f1+2
  7485  048F  3188  20FD  3181   	fcall	___ftdiv
  7486  0492  0020               	movlb	0	; select bank0
  7487  0493  0820               	movf	?___ftdiv,w
  7488  0494  0021               	movlb	1	; select bank1
  7489  0495  00E3               	movwf	main@efficiency^(0+128)
  7490  0496  0020               	movlb	0	; select bank0
  7491  0497  0821               	movf	?___ftdiv+1,w
  7492  0498  0021               	movlb	1	; select bank1
  7493  0499  00E4               	movwf	(main@efficiency+1)^(0+128)
  7494  049A  0020               	movlb	0	; select bank0
  7495  049B  0822               	movf	?___ftdiv+2,w
  7496  049C  0021               	movlb	1	; select bank1
  7497  049D  00E5               	movwf	(main@efficiency+2)^(0+128)
  7498                           
  7499                           ;main.c: 240: efficiency/=(float)voltage[2]/100*current[2]/10;
  7500  049E  082D               	movf	((_voltage+1)^(0+128)+4),w
  7501  049F  00F9               	movwf	___awtoft@c+1
  7502  04A0  082C               	movf	(_voltage^(0+128)+4),w
  7503  04A1  00F8               	movwf	___awtoft@c
  7504  04A2  3193  2354  3181   	fcall	___awtoft
  7505  04A5  0878               	movf	?___awtoft,w
  7506  04A6  0020               	movlb	0	; select bank0
  7507  04A7  00A3               	movwf	___ftdiv@f1
  7508  04A8  0879               	movf	?___awtoft+1,w
  7509  04A9  00A4               	movwf	___ftdiv@f1+1
  7510  04AA  087A               	movf	?___awtoft+2,w
  7511  04AB  00A5               	movwf	___ftdiv@f1+2
  7512  04AC  3000               	movlw	0
  7513  04AD  00A0               	movwf	___ftdiv@f2
  7514  04AE  30C8               	movlw	200
  7515  04AF  00A1               	movwf	___ftdiv@f2+1
  7516  04B0  3042               	movlw	66
  7517  04B1  00A2               	movwf	___ftdiv@f2+2
  7518  04B2  3188  20FD  3181   	fcall	___ftdiv
  7519  04B5  0020               	movlb	0	; select bank0
  7520  04B6  0820               	movf	?___ftdiv,w
  7521  04B7  00B3               	movwf	___ftmul@f2
  7522  04B8  0821               	movf	?___ftdiv+1,w
  7523  04B9  00B4               	movwf	___ftmul@f2+1
  7524  04BA  0822               	movf	?___ftdiv+2,w
  7525  04BB  00B5               	movwf	___ftmul@f2+2
  7526  04BC  0021               	movlb	1	; select bank1
  7527  04BD  0825               	movf	((_current+1)^(0+128)+4),w
  7528  04BE  00F9               	movwf	___awtoft@c+1
  7529  04BF  0824               	movf	(_current^(0+128)+4),w
  7530  04C0  00F8               	movwf	___awtoft@c
  7531  04C1  3193  2354  3181   	fcall	___awtoft
  7532  04C4  0878               	movf	?___awtoft,w
  7533  04C5  0020               	movlb	0	; select bank0
  7534  04C6  00B0               	movwf	___ftmul@f1
  7535  04C7  0879               	movf	?___awtoft+1,w
  7536  04C8  00B1               	movwf	___ftmul@f1+1
  7537  04C9  087A               	movf	?___awtoft+2,w
  7538  04CA  00B2               	movwf	___ftmul@f1+2
  7539  04CB  318A  2256  3181   	fcall	___ftmul
  7540  04CE  0020               	movlb	0	; select bank0
  7541  04CF  0830               	movf	?___ftmul,w
  7542  04D0  0021               	movlb	1	; select bank1
  7543  04D1  00DC               	movwf	_main$1189^(0+128)
  7544  04D2  0020               	movlb	0	; select bank0
  7545  04D3  0831               	movf	?___ftmul+1,w
  7546  04D4  0021               	movlb	1	; select bank1
  7547  04D5  00DD               	movwf	(_main$1189+1)^(0+128)
  7548  04D6  0020               	movlb	0	; select bank0
  7549  04D7  0832               	movf	?___ftmul+2,w
  7550  04D8  0021               	movlb	1	; select bank1
  7551  04D9  00DE               	movwf	(_main$1189+2)^(0+128)
  7552                           
  7553                           ;main.c: 240: efficiency/=(float)voltage[2]/100*current[2]/10;
  7554  04DA  085C               	movf	_main$1189^(0+128),w
  7555  04DB  0020               	movlb	0	; select bank0
  7556  04DC  00A3               	movwf	___ftdiv@f1
  7557  04DD  0021               	movlb	1	; select bank1
  7558  04DE  085D               	movf	(_main$1189+1)^(0+128),w
  7559  04DF  0020               	movlb	0	; select bank0
  7560  04E0  00A4               	movwf	___ftdiv@f1+1
  7561  04E1  0021               	movlb	1	; select bank1
  7562  04E2  085E               	movf	(_main$1189+2)^(0+128),w
  7563  04E3  0020               	movlb	0	; select bank0
  7564  04E4  00A5               	movwf	___ftdiv@f1+2
  7565  04E5  3000               	movlw	0
  7566  04E6  00A0               	movwf	___ftdiv@f2
  7567  04E7  3020               	movlw	32
  7568  04E8  00A1               	movwf	___ftdiv@f2+1
  7569  04E9  3041               	movlw	65
  7570  04EA  00A2               	movwf	___ftdiv@f2+2
  7571  04EB  3188  20FD  3181   	fcall	___ftdiv
  7572  04EE  0020               	movlb	0	; select bank0
  7573  04EF  0820               	movf	?___ftdiv,w
  7574  04F0  0021               	movlb	1	; select bank1
  7575  04F1  00D1               	movwf	_main$1190^(0+128)
  7576  04F2  0020               	movlb	0	; select bank0
  7577  04F3  0821               	movf	?___ftdiv+1,w
  7578  04F4  0021               	movlb	1	; select bank1
  7579  04F5  00D2               	movwf	(_main$1190+1)^(0+128)
  7580  04F6  0020               	movlb	0	; select bank0
  7581  04F7  0822               	movf	?___ftdiv+2,w
  7582  04F8  0021               	movlb	1	; select bank1
  7583  04F9  00D3               	movwf	(_main$1190+2)^(0+128)
  7584                           
  7585                           ;main.c: 240: efficiency/=(float)voltage[2]/100*current[2]/10;
  7586  04FA  0851               	movf	_main$1190^(0+128),w
  7587  04FB  0020               	movlb	0	; select bank0
  7588  04FC  00A0               	movwf	___ftdiv@f2
  7589  04FD  0021               	movlb	1	; select bank1
  7590  04FE  0852               	movf	(_main$1190+1)^(0+128),w
  7591  04FF  0020               	movlb	0	; select bank0
  7592  0500  00A1               	movwf	___ftdiv@f2+1
  7593  0501  0021               	movlb	1	; select bank1
  7594  0502  0853               	movf	(_main$1190+2)^(0+128),w
  7595  0503  0020               	movlb	0	; select bank0
  7596  0504  00A2               	movwf	___ftdiv@f2+2
  7597  0505  0021               	movlb	1	; select bank1
  7598  0506  0863               	movf	main@efficiency^(0+128),w
  7599  0507  0020               	movlb	0	; select bank0
  7600  0508  00A3               	movwf	___ftdiv@f1
  7601  0509  0021               	movlb	1	; select bank1
  7602  050A  0864               	movf	(main@efficiency+1)^(0+128),w
  7603  050B  0020               	movlb	0	; select bank0
  7604  050C  00A4               	movwf	___ftdiv@f1+1
  7605  050D  0021               	movlb	1	; select bank1
  7606  050E  0865               	movf	(main@efficiency+2)^(0+128),w
  7607  050F  0020               	movlb	0	; select bank0
  7608  0510  00A5               	movwf	___ftdiv@f1+2
  7609  0511  3188  20FD  3181   	fcall	___ftdiv
  7610  0514  0020               	movlb	0	; select bank0
  7611  0515  0820               	movf	?___ftdiv,w
  7612  0516  0021               	movlb	1	; select bank1
  7613  0517  00E3               	movwf	main@efficiency^(0+128)
  7614  0518  0020               	movlb	0	; select bank0
  7615  0519  0821               	movf	?___ftdiv+1,w
  7616  051A  0021               	movlb	1	; select bank1
  7617  051B  00E4               	movwf	(main@efficiency+1)^(0+128)
  7618  051C  0020               	movlb	0	; select bank0
  7619  051D  0822               	movf	?___ftdiv+2,w
  7620  051E  0021               	movlb	1	; select bank1
  7621  051F  00E5               	movwf	(main@efficiency+2)^(0+128)
  7622                           
  7623                           ;main.c: 241: efficiency*=100;
  7624  0520  3000               	movlw	0
  7625  0521  0020               	movlb	0	; select bank0
  7626  0522  00B0               	movwf	___ftmul@f1
  7627  0523  30C8               	movlw	200
  7628  0524  00B1               	movwf	___ftmul@f1+1
  7629  0525  3042               	movlw	66
  7630  0526  00B2               	movwf	___ftmul@f1+2
  7631  0527  0021               	movlb	1	; select bank1
  7632  0528  0863               	movf	main@efficiency^(0+128),w
  7633  0529  0020               	movlb	0	; select bank0
  7634  052A  00B3               	movwf	___ftmul@f2
  7635  052B  0021               	movlb	1	; select bank1
  7636  052C  0864               	movf	(main@efficiency+1)^(0+128),w
  7637  052D  0020               	movlb	0	; select bank0
  7638  052E  00B4               	movwf	___ftmul@f2+1
  7639  052F  0021               	movlb	1	; select bank1
  7640  0530  0865               	movf	(main@efficiency+2)^(0+128),w
  7641  0531  0020               	movlb	0	; select bank0
  7642  0532  00B5               	movwf	___ftmul@f2+2
  7643  0533  318A  2256  3181   	fcall	___ftmul
  7644  0536  0020               	movlb	0	; select bank0
  7645  0537  0830               	movf	?___ftmul,w
  7646  0538  0021               	movlb	1	; select bank1
  7647  0539  00E3               	movwf	main@efficiency^(0+128)
  7648  053A  0020               	movlb	0	; select bank0
  7649  053B  0831               	movf	?___ftmul+1,w
  7650  053C  0021               	movlb	1	; select bank1
  7651  053D  00E4               	movwf	(main@efficiency+1)^(0+128)
  7652  053E  0020               	movlb	0	; select bank0
  7653  053F  0832               	movf	?___ftmul+2,w
  7654  0540  0021               	movlb	1	; select bank1
  7655  0541  00E5               	movwf	(main@efficiency+2)^(0+128)
  7656                           
  7657                           ;main.c: 245: { gotoXY(24,0); LCDWriteInt(IminCount[0],4, 0, 0);};
  7658  0542  01F5               	clrf	gotoXY@y
  7659  0543  3018               	movlw	24
  7660  0544  3180  2004  3181   	fcall	_gotoXY
  7661  0547  0021               	movlb	1	; select bank1
  7662  0548  083D               	movf	(_IminCount+1)^(0+128),w
  7663  0549  0020               	movlb	0	; select bank0
  7664  054A  00A9               	movwf	LCDWriteInt@value+1
  7665  054B  0021               	movlb	1	; select bank1
  7666  054C  083C               	movf	_IminCount^(0+128),w
  7667  054D  0020               	movlb	0	; select bank0
  7668  054E  00A8               	movwf	LCDWriteInt@value
  7669  054F  3004               	movlw	4
  7670  0550  00E8               	movwf	??_main
  7671  0551  0868               	movf	??_main,w
  7672  0552  00AA               	movwf	LCDWriteInt@fieldLength
  7673  0553  01AB               	clrf	LCDWriteInt@numPlaces
  7674  0554  01AC               	clrf	LCDWriteInt@sign
  7675  0555  318B  230A  3181   	fcall	_LCDWriteInt
  7676                           
  7677                           ;main.c: 259: { gotoXY(0,0); LCDWriteInt(faultCount,5, 0, 0);};
  7678  0558  01F5               	clrf	gotoXY@y
  7679  0559  3000               	movlw	0
  7680  055A  3180  2004  3181   	fcall	_gotoXY
  7681  055D  0021               	movlb	1	; select bank1
  7682  055E  0859               	movf	(main@faultCount+1)^(0+128),w
  7683  055F  0020               	movlb	0	; select bank0
  7684  0560  00A9               	movwf	LCDWriteInt@value+1
  7685  0561  0021               	movlb	1	; select bank1
  7686  0562  0858               	movf	main@faultCount^(0+128),w
  7687  0563  0020               	movlb	0	; select bank0
  7688  0564  00A8               	movwf	LCDWriteInt@value
  7689  0565  3005               	movlw	5
  7690  0566  00E8               	movwf	??_main
  7691  0567  0868               	movf	??_main,w
  7692  0568  00AA               	movwf	LCDWriteInt@fieldLength
  7693  0569  01AB               	clrf	LCDWriteInt@numPlaces
  7694  056A  01AC               	clrf	LCDWriteInt@sign
  7695  056B  318B  230A  3181   	fcall	_LCDWriteInt
  7696                           
  7697                           ;main.c: 261: { gotoXY(58,0); LCDWriteInt(VHoldMode[0],2, 0, 0);};
  7698  056E  01F5               	clrf	gotoXY@y
  7699  056F  303A               	movlw	58
  7700  0570  3180  2004  3181   	fcall	_gotoXY
  7701  0573  0021               	movlb	1	; select bank1
  7702  0574  0840               	movf	_VHoldMode^(0+128),w
  7703  0575  0020               	movlb	0	; select bank0
  7704  0576  00A8               	movwf	LCDWriteInt@value
  7705  0577  01A9               	clrf	LCDWriteInt@value+1
  7706  0578  1BA8               	btfsc	LCDWriteInt@value,7
  7707  0579  03A9               	decf	LCDWriteInt@value+1,f
  7708  057A  3002               	movlw	2
  7709  057B  00E8               	movwf	??_main
  7710  057C  0868               	movf	??_main,w
  7711  057D  00AA               	movwf	LCDWriteInt@fieldLength
  7712  057E  01AB               	clrf	LCDWriteInt@numPlaces
  7713  057F  01AC               	clrf	LCDWriteInt@sign
  7714  0580  318B  230A  3181   	fcall	_LCDWriteInt
  7715                           
  7716                           ;main.c: 262: LCDWriteCharacter(' ');
  7717  0583  3020               	movlw	32
  7718  0584  3196  26A4  3181   	fcall	_LCDWriteCharacter
  7719                           
  7720                           ;main.c: 265: LCDWriteCharacter(' ');
  7721  0587  3020               	movlw	32
  7722  0588  3196  26A4  3181   	fcall	_LCDWriteCharacter
  7723                           
  7724                           ;main.c: 269: { gotoXY(0,1); LCDWriteInt(voltage[2],4, 2, 0);};
  7725  058B  01F5               	clrf	gotoXY@y
  7726  058C  0AF5               	incf	gotoXY@y,f
  7727  058D  3000               	movlw	0
  7728  058E  3180  2004  3181   	fcall	_gotoXY
  7729  0591  0021               	movlb	1	; select bank1
  7730  0592  082D               	movf	((_voltage+1)^(0+128)+4),w
  7731  0593  0020               	movlb	0	; select bank0
  7732  0594  00A9               	movwf	LCDWriteInt@value+1
  7733  0595  0021               	movlb	1	; select bank1
  7734  0596  082C               	movf	(_voltage^(0+128)+4),w
  7735  0597  0020               	movlb	0	; select bank0
  7736  0598  00A8               	movwf	LCDWriteInt@value
  7737  0599  3004               	movlw	4
  7738  059A  00E8               	movwf	??_main
  7739  059B  0868               	movf	??_main,w
  7740  059C  00AA               	movwf	LCDWriteInt@fieldLength
  7741  059D  3002               	movlw	2
  7742  059E  00E9               	movwf	??_main+1
  7743  059F  0869               	movf	??_main+1,w
  7744  05A0  00AB               	movwf	LCDWriteInt@numPlaces
  7745  05A1  01AC               	clrf	LCDWriteInt@sign
  7746  05A2  318B  230A  3181   	fcall	_LCDWriteInt
  7747                           
  7748                           ;main.c: 270: LCDWriteCharacter('V');
  7749  05A5  3056               	movlw	86
  7750  05A6  3196  26A4  3181   	fcall	_LCDWriteCharacter
  7751                           
  7752                           ;main.c: 271: { gotoXY(28,1); LCDWriteInt(current[2],3, 1, 0);};
  7753  05A9  01F5               	clrf	gotoXY@y
  7754  05AA  0AF5               	incf	gotoXY@y,f
  7755  05AB  301C               	movlw	28
  7756  05AC  3180  2004  3181   	fcall	_gotoXY
  7757  05AF  0021               	movlb	1	; select bank1
  7758  05B0  0825               	movf	((_current+1)^(0+128)+4),w
  7759  05B1  0020               	movlb	0	; select bank0
  7760  05B2  00A9               	movwf	LCDWriteInt@value+1
  7761  05B3  0021               	movlb	1	; select bank1
  7762  05B4  0824               	movf	(_current^(0+128)+4),w
  7763  05B5  0020               	movlb	0	; select bank0
  7764  05B6  00A8               	movwf	LCDWriteInt@value
  7765  05B7  3003               	movlw	3
  7766  05B8  00E8               	movwf	??_main
  7767  05B9  0868               	movf	??_main,w
  7768  05BA  00AA               	movwf	LCDWriteInt@fieldLength
  7769  05BB  01AB               	clrf	LCDWriteInt@numPlaces
  7770  05BC  0AAB               	incf	LCDWriteInt@numPlaces,f
  7771  05BD  01AC               	clrf	LCDWriteInt@sign
  7772  05BE  318B  230A  3181   	fcall	_LCDWriteInt
  7773                           
  7774                           ;main.c: 272: LCDWriteCharacter('A');
  7775  05C1  3041               	movlw	65
  7776  05C2  3196  26A4  3181   	fcall	_LCDWriteCharacter
  7777                           
  7778                           ;main.c: 273: { gotoXY(56,1); LCDWriteInt(ADCRead(11),4, 0, 0);};
  7779  05C5  01F5               	clrf	gotoXY@y
  7780  05C6  0AF5               	incf	gotoXY@y,f
  7781  05C7  3038               	movlw	56
  7782  05C8  3180  2004  3181   	fcall	_gotoXY
  7783  05CB  300B               	movlw	11
  7784  05CC  3192  22B7  3181   	fcall	_ADCRead
  7785  05CF  0871               	movf	?_ADCRead+1,w
  7786  05D0  0020               	movlb	0	; select bank0
  7787  05D1  00A9               	movwf	LCDWriteInt@value+1
  7788  05D2  0870               	movf	?_ADCRead,w
  7789  05D3  00A8               	movwf	LCDWriteInt@value
  7790  05D4  3004               	movlw	4
  7791  05D5  00E8               	movwf	??_main
  7792  05D6  0868               	movf	??_main,w
  7793  05D7  00AA               	movwf	LCDWriteInt@fieldLength
  7794  05D8  01AB               	clrf	LCDWriteInt@numPlaces
  7795  05D9  01AC               	clrf	LCDWriteInt@sign
  7796  05DA  318B  230A  3181   	fcall	_LCDWriteInt
  7797                           
  7798                           ;main.c: 274: { gotoXY(0,2); LCDWriteInt(voltage[0],4, 2, 0);};
  7799  05DD  3002               	movlw	2
  7800  05DE  0020               	movlb	0	; select bank0
  7801  05DF  00E8               	movwf	??_main
  7802  05E0  0868               	movf	??_main,w
  7803  05E1  00F5               	movwf	gotoXY@y
  7804  05E2  3000               	movlw	0
  7805  05E3  3180  2004  3181   	fcall	_gotoXY
  7806  05E6  0021               	movlb	1	; select bank1
  7807  05E7  0829               	movf	(_voltage+1)^(0+128),w
  7808  05E8  0020               	movlb	0	; select bank0
  7809  05E9  00A9               	movwf	LCDWriteInt@value+1
  7810  05EA  0021               	movlb	1	; select bank1
  7811  05EB  0828               	movf	_voltage^(0+128),w
  7812  05EC  0020               	movlb	0	; select bank0
  7813  05ED  00A8               	movwf	LCDWriteInt@value
  7814  05EE  3004               	movlw	4
  7815  05EF  00E8               	movwf	??_main
  7816  05F0  0868               	movf	??_main,w
  7817  05F1  00AA               	movwf	LCDWriteInt@fieldLength
  7818  05F2  3002               	movlw	2
  7819  05F3  00E9               	movwf	??_main+1
  7820  05F4  0869               	movf	??_main+1,w
  7821  05F5  00AB               	movwf	LCDWriteInt@numPlaces
  7822  05F6  01AC               	clrf	LCDWriteInt@sign
  7823  05F7  318B  230A  3181   	fcall	_LCDWriteInt
  7824                           
  7825                           ;main.c: 275: LCDWriteCharacter('V');
  7826  05FA  3056               	movlw	86
  7827  05FB  3196  26A4  3181   	fcall	_LCDWriteCharacter
  7828                           
  7829                           ;main.c: 276: { gotoXY(28,2); LCDWriteInt(current[0],3, 1, 0);};
  7830  05FE  3002               	movlw	2
  7831  05FF  0020               	movlb	0	; select bank0
  7832  0600  00E8               	movwf	??_main
  7833  0601  0868               	movf	??_main,w
  7834  0602  00F5               	movwf	gotoXY@y
  7835  0603  301C               	movlw	28
  7836  0604  3180  2004  3181   	fcall	_gotoXY
  7837  0607  0021               	movlb	1	; select bank1
  7838  0608  0821               	movf	(_current+1)^(0+128),w
  7839  0609  0020               	movlb	0	; select bank0
  7840  060A  00A9               	movwf	LCDWriteInt@value+1
  7841  060B  0021               	movlb	1	; select bank1
  7842  060C  0820               	movf	_current^(0+128),w
  7843  060D  0020               	movlb	0	; select bank0
  7844  060E  00A8               	movwf	LCDWriteInt@value
  7845  060F  3003               	movlw	3
  7846  0610  00E8               	movwf	??_main
  7847  0611  0868               	movf	??_main,w
  7848  0612  00AA               	movwf	LCDWriteInt@fieldLength
  7849  0613  01AB               	clrf	LCDWriteInt@numPlaces
  7850  0614  0AAB               	incf	LCDWriteInt@numPlaces,f
  7851  0615  01AC               	clrf	LCDWriteInt@sign
  7852  0616  318B  230A  3181   	fcall	_LCDWriteInt
  7853                           
  7854                           ;main.c: 277: LCDWriteCharacter('A');
  7855  0619  3041               	movlw	65
  7856  061A  3196  26A4  3181   	fcall	_LCDWriteCharacter
  7857                           
  7858                           ;main.c: 278: { gotoXY(56,2); LCDWriteInt(Vref[0],4, 2, 0);};
  7859  061D  3002               	movlw	2
  7860  061E  0020               	movlb	0	; select bank0
  7861  061F  00E8               	movwf	??_main
  7862  0620  0868               	movf	??_main,w
  7863  0621  00F5               	movwf	gotoXY@y
  7864  0622  3038               	movlw	56
  7865  0623  3180  2004  3181   	fcall	_gotoXY
  7866  0626  0021               	movlb	1	; select bank1
  7867  0627  0831               	movf	(_Vref+1)^(0+128),w
  7868  0628  0020               	movlb	0	; select bank0
  7869  0629  00A9               	movwf	LCDWriteInt@value+1
  7870  062A  0021               	movlb	1	; select bank1
  7871  062B  0830               	movf	_Vref^(0+128),w
  7872  062C  0020               	movlb	0	; select bank0
  7873  062D  00A8               	movwf	LCDWriteInt@value
  7874  062E  3004               	movlw	4
  7875  062F  00E8               	movwf	??_main
  7876  0630  0868               	movf	??_main,w
  7877  0631  00AA               	movwf	LCDWriteInt@fieldLength
  7878  0632  3002               	movlw	2
  7879  0633  00E9               	movwf	??_main+1
  7880  0634  0869               	movf	??_main+1,w
  7881  0635  00AB               	movwf	LCDWriteInt@numPlaces
  7882  0636  01AC               	clrf	LCDWriteInt@sign
  7883  0637  318B  230A  3181   	fcall	_LCDWriteInt
  7884                           
  7885                           ;main.c: 279: LCDWriteCharacter('V');
  7886  063A  3056               	movlw	86
  7887  063B  3196  26A4  3181   	fcall	_LCDWriteCharacter
  7888                           
  7889                           ;main.c: 281: { gotoXY(0,3); LCDWriteInt(voltage[2]/100*current[2]/10,3, 0, 0);};
  7890  063E  3003               	movlw	3
  7891  063F  0020               	movlb	0	; select bank0
  7892  0640  00E8               	movwf	??_main
  7893  0641  0868               	movf	??_main,w
  7894  0642  00F5               	movwf	gotoXY@y
  7895  0643  3000               	movlw	0
  7896  0644  3180  2004  3181   	fcall	_gotoXY
  7897  0647  3064               	movlw	100
  7898  0648  00F0               	movwf	___awdiv@divisor
  7899  0649  3000               	movlw	0
  7900  064A  00F1               	movwf	___awdiv@divisor+1
  7901  064B  0021               	movlb	1	; select bank1
  7902  064C  082D               	movf	((_voltage+1)^(0+128)+4),w
  7903  064D  00F3               	movwf	___awdiv@dividend+1
  7904  064E  082C               	movf	(_voltage^(0+128)+4),w
  7905  064F  00F2               	movwf	___awdiv@dividend
  7906  0650  3196  2653  3181   	fcall	___awdiv
  7907  0653  0871               	movf	?___awdiv+1,w
  7908  0654  00FA               	movwf	___wmul@multiplier+1
  7909  0655  0870               	movf	?___awdiv,w
  7910  0656  00F9               	movwf	___wmul@multiplier
  7911  0657  0021               	movlb	1	; select bank1
  7912  0658  0825               	movf	((_current+1)^(0+128)+4),w
  7913  0659  00FC               	movwf	___wmul@multiplicand+1
  7914  065A  0824               	movf	(_current^(0+128)+4),w
  7915  065B  00FB               	movwf	___wmul@multiplicand
  7916  065C  3192  22F9  3181   	fcall	___wmul
  7917  065F  087A               	movf	?___wmul+1,w
  7918  0660  0021               	movlb	1	; select bank1
  7919  0661  00E0               	movwf	(_main$1191+1)^(0+128)
  7920  0662  0879               	movf	?___wmul,w
  7921  0663  00DF               	movwf	_main$1191^(0+128)
  7922  0664  300A               	movlw	10
  7923  0665  00F0               	movwf	___awdiv@divisor
  7924  0666  3000               	movlw	0
  7925  0667  00F1               	movwf	___awdiv@divisor+1
  7926  0668  0860               	movf	(_main$1191+1)^(0+128),w
  7927  0669  00F3               	movwf	___awdiv@dividend+1
  7928  066A  085F               	movf	_main$1191^(0+128),w
  7929  066B  00F2               	movwf	___awdiv@dividend
  7930  066C  3196  2653  3181   	fcall	___awdiv
  7931  066F  0871               	movf	?___awdiv+1,w
  7932  0670  0021               	movlb	1	; select bank1
  7933  0671  00E2               	movwf	(_main$1192+1)^(0+128)
  7934  0672  0870               	movf	?___awdiv,w
  7935  0673  00E1               	movwf	_main$1192^(0+128)
  7936  0674  0862               	movf	(_main$1192+1)^(0+128),w
  7937  0675  0020               	movlb	0	; select bank0
  7938  0676  00A9               	movwf	LCDWriteInt@value+1
  7939  0677  0021               	movlb	1	; select bank1
  7940  0678  0861               	movf	_main$1192^(0+128),w
  7941  0679  0020               	movlb	0	; select bank0
  7942  067A  00A8               	movwf	LCDWriteInt@value
  7943  067B  3003               	movlw	3
  7944  067C  00E8               	movwf	??_main
  7945  067D  0868               	movf	??_main,w
  7946  067E  00AA               	movwf	LCDWriteInt@fieldLength
  7947  067F  01AB               	clrf	LCDWriteInt@numPlaces
  7948  0680  01AC               	clrf	LCDWriteInt@sign
  7949  0681  318B  230A  3181   	fcall	_LCDWriteInt
  7950                           
  7951                           ;main.c: 282: LCDWriteCharacter('W');
  7952  0684  3057               	movlw	87
  7953  0685  3196  26A4  3181   	fcall	_LCDWriteCharacter
  7954                           
  7955                           ;main.c: 283: { gotoXY(28,3); LCDWriteInt(batteryState[0],1, 0, 0);};
  7956  0688  3003               	movlw	3
  7957  0689  0020               	movlb	0	; select bank0
  7958  068A  00E8               	movwf	??_main
  7959  068B  0868               	movf	??_main,w
  7960  068C  00F5               	movwf	gotoXY@y
  7961  068D  301C               	movlw	28
  7962  068E  3180  2004  3181   	fcall	_gotoXY
  7963  0691  0020               	movlb	0	; select bank0
  7964  0692  086A               	movf	_batteryState,w
  7965  0693  00E8               	movwf	??_main
  7966  0694  01E9               	clrf	??_main+1
  7967  0695  0868               	movf	??_main,w
  7968  0696  00A8               	movwf	LCDWriteInt@value
  7969  0697  0869               	movf	??_main+1,w
  7970  0698  00A9               	movwf	LCDWriteInt@value+1
  7971  0699  01AA               	clrf	LCDWriteInt@fieldLength
  7972  069A  0AAA               	incf	LCDWriteInt@fieldLength,f
  7973  069B  01AB               	clrf	LCDWriteInt@numPlaces
  7974  069C  01AC               	clrf	LCDWriteInt@sign
  7975  069D  318B  230A  3181   	fcall	_LCDWriteInt
  7976                           
  7977                           ;main.c: 284: { gotoXY(36,3); LCDWriteInt(Imode[0],1, 0, 0);};
  7978  06A0  3003               	movlw	3
  7979  06A1  0020               	movlb	0	; select bank0
  7980  06A2  00E8               	movwf	??_main
  7981  06A3  0868               	movf	??_main,w
  7982  06A4  00F5               	movwf	gotoXY@y
  7983  06A5  3024               	movlw	36
  7984  06A6  3180  2004  3181   	fcall	_gotoXY
  7985  06A9  0021               	movlb	1	; select bank1
  7986  06AA  086E               	movf	_Imode^(0+128),w
  7987  06AB  0020               	movlb	0	; select bank0
  7988  06AC  00A8               	movwf	LCDWriteInt@value
  7989  06AD  01A9               	clrf	LCDWriteInt@value+1
  7990  06AE  1BA8               	btfsc	LCDWriteInt@value,7
  7991  06AF  03A9               	decf	LCDWriteInt@value+1,f
  7992  06B0  01AA               	clrf	LCDWriteInt@fieldLength
  7993  06B1  0AAA               	incf	LCDWriteInt@fieldLength,f
  7994  06B2  01AB               	clrf	LCDWriteInt@numPlaces
  7995  06B3  01AC               	clrf	LCDWriteInt@sign
  7996  06B4  318B  230A  3181   	fcall	_LCDWriteInt
  7997                           
  7998                           ;main.c: 285: { gotoXY(48,3); LCDWriteInt(Iref[0],3, 1, 0);};
  7999  06B7  3003               	movlw	3
  8000  06B8  0020               	movlb	0	; select bank0
  8001  06B9  00E8               	movwf	??_main
  8002  06BA  0868               	movf	??_main,w
  8003  06BB  00F5               	movwf	gotoXY@y
  8004  06BC  3030               	movlw	48
  8005  06BD  3180  2004  3181   	fcall	_gotoXY
  8006  06C0  0021               	movlb	1	; select bank1
  8007  06C1  0835               	movf	(_Iref+1)^(0+128),w
  8008  06C2  0020               	movlb	0	; select bank0
  8009  06C3  00A9               	movwf	LCDWriteInt@value+1
  8010  06C4  0021               	movlb	1	; select bank1
  8011  06C5  0834               	movf	_Iref^(0+128),w
  8012  06C6  0020               	movlb	0	; select bank0
  8013  06C7  00A8               	movwf	LCDWriteInt@value
  8014  06C8  3003               	movlw	3
  8015  06C9  00E8               	movwf	??_main
  8016  06CA  0868               	movf	??_main,w
  8017  06CB  00AA               	movwf	LCDWriteInt@fieldLength
  8018  06CC  01AB               	clrf	LCDWriteInt@numPlaces
  8019  06CD  0AAB               	incf	LCDWriteInt@numPlaces,f
  8020  06CE  01AC               	clrf	LCDWriteInt@sign
  8021  06CF  318B  230A  3181   	fcall	_LCDWriteInt
  8022                           
  8023                           ;main.c: 286: LCDWriteCharacter('A');
  8024  06D2  3041               	movlw	65
  8025  06D3  3196  26A4  3181   	fcall	_LCDWriteCharacter
  8026                           
  8027                           ;main.c: 288: { gotoXY(0,4); LCDWriteInt(voltage[0]/100*current[0]/10,3, 0, 0);};
  8028  06D6  3004               	movlw	4
  8029  06D7  0020               	movlb	0	; select bank0
  8030  06D8  00E8               	movwf	??_main
  8031  06D9  0868               	movf	??_main,w
  8032  06DA  00F5               	movwf	gotoXY@y
  8033  06DB  3000               	movlw	0
  8034  06DC  3180  2004  3181   	fcall	_gotoXY
  8035  06DF  3064               	movlw	100
  8036  06E0  00F0               	movwf	___awdiv@divisor
  8037  06E1  3000               	movlw	0
  8038  06E2  00F1               	movwf	___awdiv@divisor+1
  8039  06E3  0021               	movlb	1	; select bank1
  8040  06E4  0829               	movf	(_voltage+1)^(0+128),w
  8041  06E5  00F3               	movwf	___awdiv@dividend+1
  8042  06E6  0828               	movf	_voltage^(0+128),w
  8043  06E7  00F2               	movwf	___awdiv@dividend
  8044  06E8  3196  2653  3181   	fcall	___awdiv
  8045  06EB  0871               	movf	?___awdiv+1,w
  8046  06EC  00FA               	movwf	___wmul@multiplier+1
  8047  06ED  0870               	movf	?___awdiv,w
  8048  06EE  00F9               	movwf	___wmul@multiplier
  8049  06EF  0021               	movlb	1	; select bank1
  8050  06F0  0821               	movf	(_current+1)^(0+128),w
  8051  06F1  00FC               	movwf	___wmul@multiplicand+1
  8052  06F2  0820               	movf	_current^(0+128),w
  8053  06F3  00FB               	movwf	___wmul@multiplicand
  8054  06F4  3192  22F9  3181   	fcall	___wmul
  8055  06F7  087A               	movf	?___wmul+1,w
  8056  06F8  0021               	movlb	1	; select bank1
  8057  06F9  00E0               	movwf	(_main$1191+1)^(0+128)
  8058  06FA  0879               	movf	?___wmul,w
  8059  06FB  00DF               	movwf	_main$1191^(0+128)
  8060  06FC  300A               	movlw	10
  8061  06FD  00F0               	movwf	___awdiv@divisor
  8062  06FE  3000               	movlw	0
  8063  06FF  00F1               	movwf	___awdiv@divisor+1
  8064  0700  0860               	movf	(_main$1191+1)^(0+128),w
  8065  0701  00F3               	movwf	___awdiv@dividend+1
  8066  0702  085F               	movf	_main$1191^(0+128),w
  8067  0703  00F2               	movwf	___awdiv@dividend
  8068  0704  3196  2653  3181   	fcall	___awdiv
  8069  0707  0871               	movf	?___awdiv+1,w
  8070  0708  0021               	movlb	1	; select bank1
  8071  0709  00E2               	movwf	(_main$1192+1)^(0+128)
  8072  070A  0870               	movf	?___awdiv,w
  8073  070B  00E1               	movwf	_main$1192^(0+128)
  8074  070C  0862               	movf	(_main$1192+1)^(0+128),w
  8075  070D  0020               	movlb	0	; select bank0
  8076  070E  00A9               	movwf	LCDWriteInt@value+1
  8077  070F  0021               	movlb	1	; select bank1
  8078  0710  0861               	movf	_main$1192^(0+128),w
  8079  0711  0020               	movlb	0	; select bank0
  8080  0712  00A8               	movwf	LCDWriteInt@value
  8081  0713  3003               	movlw	3
  8082  0714  00E8               	movwf	??_main
  8083  0715  0868               	movf	??_main,w
  8084  0716  00AA               	movwf	LCDWriteInt@fieldLength
  8085  0717  01AB               	clrf	LCDWriteInt@numPlaces
  8086  0718  01AC               	clrf	LCDWriteInt@sign
  8087  0719  318B  230A  3181   	fcall	_LCDWriteInt
  8088                           
  8089                           ;main.c: 289: LCDWriteCharacter('W');
  8090  071C  3057               	movlw	87
  8091  071D  3196  26A4  3181   	fcall	_LCDWriteCharacter
  8092                           
  8093                           ;main.c: 292: { gotoXY(48,4); LCDWriteInt(MPPT0,4, 0, 0);};
  8094  0720  3004               	movlw	4
  8095  0721  0020               	movlb	0	; select bank0
  8096  0722  00E8               	movwf	??_main
  8097  0723  0868               	movf	??_main,w
  8098  0724  00F5               	movwf	gotoXY@y
  8099  0725  3030               	movlw	48
  8100  0726  3180  2004  3181   	fcall	_gotoXY
  8101  0729  0021               	movlb	1	; select bank1
  8102  072A  0869               	movf	(main@MPPT0+1)^(0+128),w
  8103  072B  0020               	movlb	0	; select bank0
  8104  072C  00A9               	movwf	LCDWriteInt@value+1
  8105  072D  0021               	movlb	1	; select bank1
  8106  072E  0868               	movf	main@MPPT0^(0+128),w
  8107  072F  0020               	movlb	0	; select bank0
  8108  0730  00A8               	movwf	LCDWriteInt@value
  8109  0731  3004               	movlw	4
  8110  0732  00E8               	movwf	??_main
  8111  0733  0868               	movf	??_main,w
  8112  0734  00AA               	movwf	LCDWriteInt@fieldLength
  8113  0735  01AB               	clrf	LCDWriteInt@numPlaces
  8114  0736  01AC               	clrf	LCDWriteInt@sign
  8115  0737  318B  230A  3181   	fcall	_LCDWriteInt
  8116                           
  8117                           ;main.c: 300: { gotoXY(0,5); LCDWriteInt(dutyCycle6,4, 0, 0);};
  8118  073A  3005               	movlw	5
  8119  073B  0020               	movlb	0	; select bank0
  8120  073C  00E8               	movwf	??_main
  8121  073D  0868               	movf	??_main,w
  8122  073E  00F5               	movwf	gotoXY@y
  8123  073F  3000               	movlw	0
  8124  0740  3180  2004  3181   	fcall	_gotoXY
  8125  0743  0021               	movlb	1	; select bank1
  8126  0744  086B               	movf	(main@dutyCycle6+1)^(0+128),w
  8127  0745  0020               	movlb	0	; select bank0
  8128  0746  00A9               	movwf	LCDWriteInt@value+1
  8129  0747  0021               	movlb	1	; select bank1
  8130  0748  086A               	movf	main@dutyCycle6^(0+128),w
  8131  0749  0020               	movlb	0	; select bank0
  8132  074A  00A8               	movwf	LCDWriteInt@value
  8133  074B  3004               	movlw	4
  8134  074C  00E8               	movwf	??_main
  8135  074D  0868               	movf	??_main,w
  8136  074E  00AA               	movwf	LCDWriteInt@fieldLength
  8137  074F  01AB               	clrf	LCDWriteInt@numPlaces
  8138  0750  01AC               	clrf	LCDWriteInt@sign
  8139  0751  318B  230A  3181   	fcall	_LCDWriteInt
  8140                           
  8141                           ;main.c: 301: { gotoXY(24,5); LCDWriteInt(dutyCycle7,4, 0, 0);};
  8142  0754  3005               	movlw	5
  8143  0755  0020               	movlb	0	; select bank0
  8144  0756  00E8               	movwf	??_main
  8145  0757  0868               	movf	??_main,w
  8146  0758  00F5               	movwf	gotoXY@y
  8147  0759  3018               	movlw	24
  8148  075A  3180  2004  3181   	fcall	_gotoXY
  8149  075D  0021               	movlb	1	; select bank1
  8150  075E  086D               	movf	(main@dutyCycle7+1)^(0+128),w
  8151  075F  0020               	movlb	0	; select bank0
  8152  0760  00A9               	movwf	LCDWriteInt@value+1
  8153  0761  0021               	movlb	1	; select bank1
  8154  0762  086C               	movf	main@dutyCycle7^(0+128),w
  8155  0763  0020               	movlb	0	; select bank0
  8156  0764  00A8               	movwf	LCDWriteInt@value
  8157  0765  3004               	movlw	4
  8158  0766  00E8               	movwf	??_main
  8159  0767  0868               	movf	??_main,w
  8160  0768  00AA               	movwf	LCDWriteInt@fieldLength
  8161  0769  01AB               	clrf	LCDWriteInt@numPlaces
  8162  076A  01AC               	clrf	LCDWriteInt@sign
  8163  076B  318B  230A  3181   	fcall	_LCDWriteInt
  8164                           
  8165                           ;main.c: 302: { gotoXY(48,5); LCDWriteInt(dutyCycle1,4, 0, 0);};
  8166  076E  3005               	movlw	5
  8167  076F  0020               	movlb	0	; select bank0
  8168  0770  00E8               	movwf	??_main
  8169  0771  0868               	movf	??_main,w
  8170  0772  00F5               	movwf	gotoXY@y
  8171  0773  3030               	movlw	48
  8172  0774  3180  2004  3181   	fcall	_gotoXY
  8173  0777  0021               	movlb	1	; select bank1
  8174  0778  0857               	movf	(main@dutyCycle1+1)^(0+128),w
  8175  0779  0020               	movlb	0	; select bank0
  8176  077A  00A9               	movwf	LCDWriteInt@value+1
  8177  077B  0021               	movlb	1	; select bank1
  8178  077C  0856               	movf	main@dutyCycle1^(0+128),w
  8179  077D  0020               	movlb	0	; select bank0
  8180  077E  00A8               	movwf	LCDWriteInt@value
  8181  077F  3004               	movlw	4
  8182  0780  00E8               	movwf	??_main
  8183  0781  0868               	movf	??_main,w
  8184  0782  00AA               	movwf	LCDWriteInt@fieldLength
  8185  0783  01AB               	clrf	LCDWriteInt@numPlaces
  8186  0784  01AC               	clrf	LCDWriteInt@sign
  8187  0785  318B  230A  3181   	fcall	_LCDWriteInt
  8188                           
  8189                           ;main.c: 303: { gotoXY(74,5); LCDWriteInt(!(RB2),1, 0, 0);};
  8190  0788  3005               	movlw	5
  8191  0789  0020               	movlb	0	; select bank0
  8192  078A  00E8               	movwf	??_main
  8193  078B  0868               	movf	??_main,w
  8194  078C  00F5               	movwf	gotoXY@y
  8195  078D  304A               	movlw	74
  8196  078E  3180  2004  3181   	fcall	_gotoXY
  8197  0791  1003               	clrc
  8198  0792  0020               	movlb	0	; select bank0
  8199  0793  1D0D               	btfss	13,2	;volatile
  8200  0794  1403               	setc
  8201  0795  3000               	movlw	0
  8202  0796  3D09               	addwfc	9,w
  8203  0797  00E8               	movwf	??_main
  8204  0798  01E9               	clrf	??_main+1
  8205  0799  0868               	movf	??_main,w
  8206  079A  00A8               	movwf	LCDWriteInt@value
  8207  079B  0869               	movf	??_main+1,w
  8208  079C  00A9               	movwf	LCDWriteInt@value+1
  8209  079D  01AA               	clrf	LCDWriteInt@fieldLength
  8210  079E  0AAA               	incf	LCDWriteInt@fieldLength,f
  8211  079F  01AB               	clrf	LCDWriteInt@numPlaces
  8212  07A0  01AC               	clrf	LCDWriteInt@sign
  8213  07A1  318B  230A  3181   	fcall	_LCDWriteInt
  8214                           
  8215                           ;main.c: 305: if(batteryState[0] > FINISHED)
  8216  07A4  3003               	movlw	3
  8217  07A5  0020               	movlb	0	; select bank0
  8218  07A6  026A               	subwf	_batteryState,w
  8219  07A7  1C03               	skipc
  8220  07A8  2FAD               	goto	l3368
  8221                           
  8222                           ;main.c: 306: {
  8223                           ;main.c: 307: cc_cv_mode(0);
  8224  07A9  3000               	movlw	0
  8225  07AA  318B  23C3  3181   	fcall	_cc_cv_mode
  8226  07AD                     l3368:	
  8227                           
  8228                           ;main.c: 308: }
  8229                           ;main.c: 309: if(batteryState[1] > FINISHED)
  8230  07AD  3003               	movlw	3
  8231  07AE  0020               	movlb	0	; select bank0
  8232  07AF  026B               	subwf	_batteryState+1,w
  8233  07B0  1C03               	skipc
  8234  07B1  2FB6               	goto	l3372
  8235                           
  8236                           ;main.c: 310: {
  8237                           ;main.c: 311: cc_cv_mode(1);
  8238  07B2  3001               	movlw	1
  8239  07B3  318B  23C3  3181   	fcall	_cc_cv_mode
  8240  07B6                     l3372:	
  8241                           
  8242                           ;main.c: 312: }
  8243                           ;main.c: 313: slowLoop=0;
  8244  07B6  0021               	movlb	1	; select bank1
  8245  07B7  01DA               	clrf	main@slowLoop^(0+128)
  8246  07B8  29FC               	goto	l3118
  8247  07B9                     __end_of_main:	
  8248                           
  8249                           	psect	text1
  8250  0D97                     __ptext1:	
  8251 ;; *************** function _tempCalc *****************
  8252 ;; Defined at:
  8253 ;;		line 4 in file "tempCalc.c"
  8254 ;; Parameters:    Size  Location     Type
  8255 ;;  analogValue     2   61[BANK0 ] int 
  8256 ;; Auto vars:     Size  Location     Type
  8257 ;;  steinhart       3   69[BANK0 ] float 
  8258 ;;  R               3   63[BANK0 ] float 
  8259 ;; Return value:  Size  Location     Type
  8260 ;;                  2   61[BANK0 ] int 
  8261 ;; Registers used:
  8262 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8263 ;; Tracked objects:
  8264 ;;		On entry : 0/0
  8265 ;;		On exit  : 0/0
  8266 ;;		Unchanged: 0/0
  8267 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8268 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8269 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8270 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8271 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8272 ;;Total ram usage:       11 bytes
  8273 ;; Hardware stack levels used:    1
  8274 ;; Hardware stack levels required when called:    4
  8275 ;; This function calls:
  8276 ;;		___awtoft
  8277 ;;		___ftadd
  8278 ;;		___ftdiv
  8279 ;;		___ftmul
  8280 ;;		___ftsub
  8281 ;;		___fttol
  8282 ;;		_log
  8283 ;; This function is called by:
  8284 ;;		_main
  8285 ;; This function uses a non-reentrant model
  8286 ;;
  8287                           
  8288                           
  8289                           ;psect for function _tempCalc
  8290  0D97                     _tempCalc:	
  8291                           
  8292                           ;tempCalc.c: 6: float R, steinhart;
  8293                           ;tempCalc.c: 8: R = 9890/(1023/(float)analogValue - 1);
  8294                           
  8295                           ;incstack = 0
  8296                           ; Regs used in _tempCalc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8297  0D97  3000               	movlw	0
  8298  0D98  0020               	movlb	0	; select bank0
  8299  0D99  00C0               	movwf	___ftadd@f1
  8300  0D9A  3080               	movlw	128
  8301  0D9B  00C1               	movwf	___ftadd@f1+1
  8302  0D9C  30BF               	movlw	191
  8303  0D9D  00C2               	movwf	___ftadd@f1+2
  8304  0D9E  085E               	movf	tempCalc@analogValue+1,w
  8305  0D9F  00F9               	movwf	___awtoft@c+1
  8306  0DA0  085D               	movf	tempCalc@analogValue,w
  8307  0DA1  00F8               	movwf	___awtoft@c
  8308  0DA2  3193  2354  318D   	fcall	___awtoft
  8309  0DA5  0878               	movf	?___awtoft,w
  8310  0DA6  0020               	movlb	0	; select bank0
  8311  0DA7  00A0               	movwf	___ftdiv@f2
  8312  0DA8  0879               	movf	?___awtoft+1,w
  8313  0DA9  00A1               	movwf	___ftdiv@f2+1
  8314  0DAA  087A               	movf	?___awtoft+2,w
  8315  0DAB  00A2               	movwf	___ftdiv@f2+2
  8316  0DAC  30C0               	movlw	192
  8317  0DAD  00A3               	movwf	___ftdiv@f1
  8318  0DAE  307F               	movlw	127
  8319  0DAF  00A4               	movwf	___ftdiv@f1+1
  8320  0DB0  3044               	movlw	68
  8321  0DB1  00A5               	movwf	___ftdiv@f1+2
  8322  0DB2  3188  20FD  318D   	fcall	___ftdiv
  8323  0DB5  0020               	movlb	0	; select bank0
  8324  0DB6  0820               	movf	?___ftdiv,w
  8325  0DB7  00C3               	movwf	___ftadd@f2
  8326  0DB8  0821               	movf	?___ftdiv+1,w
  8327  0DB9  00C4               	movwf	___ftadd@f2+1
  8328  0DBA  0822               	movf	?___ftdiv+2,w
  8329  0DBB  00C5               	movwf	___ftadd@f2+2
  8330  0DBC  318C  24A1  318D   	fcall	___ftadd
  8331  0DBF  0020               	movlb	0	; select bank0
  8332  0DC0  0840               	movf	?___ftadd,w
  8333  0DC1  00E2               	movwf	_tempCalc$1188
  8334  0DC2  0841               	movf	?___ftadd+1,w
  8335  0DC3  00E3               	movwf	_tempCalc$1188+1
  8336  0DC4  0842               	movf	?___ftadd+2,w
  8337  0DC5  00E4               	movwf	_tempCalc$1188+2
  8338                           
  8339                           ;tempCalc.c: 6: float R, steinhart;
  8340                           ;tempCalc.c: 8: R = 9890/(1023/(float)analogValue - 1);
  8341  0DC6  0862               	movf	_tempCalc$1188,w
  8342  0DC7  00A0               	movwf	___ftdiv@f2
  8343  0DC8  0863               	movf	_tempCalc$1188+1,w
  8344  0DC9  00A1               	movwf	___ftdiv@f2+1
  8345  0DCA  0864               	movf	_tempCalc$1188+2,w
  8346  0DCB  00A2               	movwf	___ftdiv@f2+2
  8347  0DCC  3088               	movlw	136
  8348  0DCD  00A3               	movwf	___ftdiv@f1
  8349  0DCE  301A               	movlw	26
  8350  0DCF  00A4               	movwf	___ftdiv@f1+1
  8351  0DD0  3046               	movlw	70
  8352  0DD1  00A5               	movwf	___ftdiv@f1+2
  8353  0DD2  3188  20FD  318D   	fcall	___ftdiv
  8354  0DD5  0020               	movlb	0	; select bank0
  8355  0DD6  0820               	movf	?___ftdiv,w
  8356  0DD7  00DF               	movwf	tempCalc@R
  8357  0DD8  0821               	movf	?___ftdiv+1,w
  8358  0DD9  00E0               	movwf	tempCalc@R+1
  8359  0DDA  0822               	movf	?___ftdiv+2,w
  8360  0DDB  00E1               	movwf	tempCalc@R+2
  8361                           
  8362                           ;tempCalc.c: 10: steinhart = R /9990;
  8363  0DDC  3018               	movlw	24
  8364  0DDD  00A0               	movwf	___ftdiv@f2
  8365  0DDE  301C               	movlw	28
  8366  0DDF  00A1               	movwf	___ftdiv@f2+1
  8367  0DE0  3046               	movlw	70
  8368  0DE1  00A2               	movwf	___ftdiv@f2+2
  8369  0DE2  085F               	movf	tempCalc@R,w
  8370  0DE3  00A3               	movwf	___ftdiv@f1
  8371  0DE4  0860               	movf	tempCalc@R+1,w
  8372  0DE5  00A4               	movwf	___ftdiv@f1+1
  8373  0DE6  0861               	movf	tempCalc@R+2,w
  8374  0DE7  00A5               	movwf	___ftdiv@f1+2
  8375  0DE8  3188  20FD  318D   	fcall	___ftdiv
  8376  0DEB  0020               	movlb	0	; select bank0
  8377  0DEC  0820               	movf	?___ftdiv,w
  8378  0DED  00E5               	movwf	tempCalc@steinhart
  8379  0DEE  0821               	movf	?___ftdiv+1,w
  8380  0DEF  00E6               	movwf	tempCalc@steinhart+1
  8381  0DF0  0822               	movf	?___ftdiv+2,w
  8382  0DF1  00E7               	movwf	tempCalc@steinhart+2
  8383                           
  8384                           ;tempCalc.c: 11: steinhart = log(steinhart);
  8385  0DF2  0865               	movf	tempCalc@steinhart,w
  8386  0DF3  00D7               	movwf	log@x
  8387  0DF4  0866               	movf	tempCalc@steinhart+1,w
  8388  0DF5  00D8               	movwf	log@x+1
  8389  0DF6  0867               	movf	tempCalc@steinhart+2,w
  8390  0DF7  00D9               	movwf	log@x+2
  8391  0DF8  3189  21A6  318D   	fcall	_log
  8392  0DFB  0020               	movlb	0	; select bank0
  8393  0DFC  0857               	movf	?_log,w
  8394  0DFD  00E5               	movwf	tempCalc@steinhart
  8395  0DFE  0858               	movf	?_log+1,w
  8396  0DFF  00E6               	movwf	tempCalc@steinhart+1
  8397  0E00  0859               	movf	?_log+2,w
  8398  0E01  00E7               	movwf	tempCalc@steinhart+2
  8399                           
  8400                           ;tempCalc.c: 12: steinhart /= 4030;
  8401  0E02  30E0               	movlw	224
  8402  0E03  00A0               	movwf	___ftdiv@f2
  8403  0E04  307B               	movlw	123
  8404  0E05  00A1               	movwf	___ftdiv@f2+1
  8405  0E06  3045               	movlw	69
  8406  0E07  00A2               	movwf	___ftdiv@f2+2
  8407  0E08  0865               	movf	tempCalc@steinhart,w
  8408  0E09  00A3               	movwf	___ftdiv@f1
  8409  0E0A  0866               	movf	tempCalc@steinhart+1,w
  8410  0E0B  00A4               	movwf	___ftdiv@f1+1
  8411  0E0C  0867               	movf	tempCalc@steinhart+2,w
  8412  0E0D  00A5               	movwf	___ftdiv@f1+2
  8413  0E0E  3188  20FD  318D   	fcall	___ftdiv
  8414  0E11  0020               	movlb	0	; select bank0
  8415  0E12  0820               	movf	?___ftdiv,w
  8416  0E13  00E5               	movwf	tempCalc@steinhart
  8417  0E14  0821               	movf	?___ftdiv+1,w
  8418  0E15  00E6               	movwf	tempCalc@steinhart+1
  8419  0E16  0822               	movf	?___ftdiv+2,w
  8420  0E17  00E7               	movwf	tempCalc@steinhart+2
  8421                           
  8422                           ;tempCalc.c: 15: steinhart += 1.0 / (25 + 273.15);
  8423  0E18  30CF               	movlw	207
  8424  0E19  00C0               	movwf	___ftadd@f1
  8425  0E1A  305B               	movlw	91
  8426  0E1B  00C1               	movwf	___ftadd@f1+1
  8427  0E1C  303B               	movlw	59
  8428  0E1D  00C2               	movwf	___ftadd@f1+2
  8429  0E1E  0865               	movf	tempCalc@steinhart,w
  8430  0E1F  00C3               	movwf	___ftadd@f2
  8431  0E20  0866               	movf	tempCalc@steinhart+1,w
  8432  0E21  00C4               	movwf	___ftadd@f2+1
  8433  0E22  0867               	movf	tempCalc@steinhart+2,w
  8434  0E23  00C5               	movwf	___ftadd@f2+2
  8435  0E24  318C  24A1  318D   	fcall	___ftadd
  8436  0E27  0020               	movlb	0	; select bank0
  8437  0E28  0840               	movf	?___ftadd,w
  8438  0E29  00E5               	movwf	tempCalc@steinhart
  8439  0E2A  0841               	movf	?___ftadd+1,w
  8440  0E2B  00E6               	movwf	tempCalc@steinhart+1
  8441  0E2C  0842               	movf	?___ftadd+2,w
  8442  0E2D  00E7               	movwf	tempCalc@steinhart+2
  8443                           
  8444                           ;tempCalc.c: 16: steinhart = 1.0 / steinhart;
  8445  0E2E  0865               	movf	tempCalc@steinhart,w
  8446  0E2F  00A0               	movwf	___ftdiv@f2
  8447  0E30  0866               	movf	tempCalc@steinhart+1,w
  8448  0E31  00A1               	movwf	___ftdiv@f2+1
  8449  0E32  0867               	movf	tempCalc@steinhart+2,w
  8450  0E33  00A2               	movwf	___ftdiv@f2+2
  8451  0E34  3000               	movlw	0
  8452  0E35  00A3               	movwf	___ftdiv@f1
  8453  0E36  3080               	movlw	128
  8454  0E37  00A4               	movwf	___ftdiv@f1+1
  8455  0E38  303F               	movlw	63
  8456  0E39  00A5               	movwf	___ftdiv@f1+2
  8457  0E3A  3188  20FD  318D   	fcall	___ftdiv
  8458  0E3D  0020               	movlb	0	; select bank0
  8459  0E3E  0820               	movf	?___ftdiv,w
  8460  0E3F  00E5               	movwf	tempCalc@steinhart
  8461  0E40  0821               	movf	?___ftdiv+1,w
  8462  0E41  00E6               	movwf	tempCalc@steinhart+1
  8463  0E42  0822               	movf	?___ftdiv+2,w
  8464  0E43  00E7               	movwf	tempCalc@steinhart+2
  8465                           
  8466                           ;tempCalc.c: 17: steinhart -= 273.15;
  8467  0E44  3093               	movlw	147
  8468  0E45  00CD               	movwf	___ftsub@f2
  8469  0E46  3088               	movlw	136
  8470  0E47  00CE               	movwf	___ftsub@f2+1
  8471  0E48  3043               	movlw	67
  8472  0E49  00CF               	movwf	___ftsub@f2+2
  8473  0E4A  0865               	movf	tempCalc@steinhart,w
  8474  0E4B  00D0               	movwf	___ftsub@f1
  8475  0E4C  0866               	movf	tempCalc@steinhart+1,w
  8476  0E4D  00D1               	movwf	___ftsub@f1+1
  8477  0E4E  0867               	movf	tempCalc@steinhart+2,w
  8478  0E4F  00D2               	movwf	___ftsub@f1+2
  8479  0E50  3193  2317  318D   	fcall	___ftsub
  8480  0E53  0020               	movlb	0	; select bank0
  8481  0E54  084D               	movf	?___ftsub,w
  8482  0E55  00E5               	movwf	tempCalc@steinhart
  8483  0E56  084E               	movf	?___ftsub+1,w
  8484  0E57  00E6               	movwf	tempCalc@steinhart+1
  8485  0E58  084F               	movf	?___ftsub+2,w
  8486  0E59  00E7               	movwf	tempCalc@steinhart+2
  8487                           
  8488                           ;tempCalc.c: 19: steinhart*=10;
  8489  0E5A  3000               	movlw	0
  8490  0E5B  00B0               	movwf	___ftmul@f1
  8491  0E5C  3020               	movlw	32
  8492  0E5D  00B1               	movwf	___ftmul@f1+1
  8493  0E5E  3041               	movlw	65
  8494  0E5F  00B2               	movwf	___ftmul@f1+2
  8495  0E60  0865               	movf	tempCalc@steinhart,w
  8496  0E61  00B3               	movwf	___ftmul@f2
  8497  0E62  0866               	movf	tempCalc@steinhart+1,w
  8498  0E63  00B4               	movwf	___ftmul@f2+1
  8499  0E64  0867               	movf	tempCalc@steinhart+2,w
  8500  0E65  00B5               	movwf	___ftmul@f2+2
  8501  0E66  318A  2256  318D   	fcall	___ftmul
  8502  0E69  0020               	movlb	0	; select bank0
  8503  0E6A  0830               	movf	?___ftmul,w
  8504  0E6B  00E5               	movwf	tempCalc@steinhart
  8505  0E6C  0831               	movf	?___ftmul+1,w
  8506  0E6D  00E6               	movwf	tempCalc@steinhart+1
  8507  0E6E  0832               	movf	?___ftmul+2,w
  8508  0E6F  00E7               	movwf	tempCalc@steinhart+2
  8509                           
  8510                           ;tempCalc.c: 21: steinhart = steinhart*9/5+320;
  8511  0E70  3000               	movlw	0
  8512  0E71  00C0               	movwf	___ftadd@f1
  8513  0E72  30A0               	movlw	160
  8514  0E73  00C1               	movwf	___ftadd@f1+1
  8515  0E74  3043               	movlw	67
  8516  0E75  00C2               	movwf	___ftadd@f1+2
  8517  0E76  3000               	movlw	0
  8518  0E77  00A0               	movwf	___ftdiv@f2
  8519  0E78  30A0               	movlw	160
  8520  0E79  00A1               	movwf	___ftdiv@f2+1
  8521  0E7A  3040               	movlw	64
  8522  0E7B  00A2               	movwf	___ftdiv@f2+2
  8523  0E7C  3000               	movlw	0
  8524  0E7D  00B0               	movwf	___ftmul@f1
  8525  0E7E  3010               	movlw	16
  8526  0E7F  00B1               	movwf	___ftmul@f1+1
  8527  0E80  3041               	movlw	65
  8528  0E81  00B2               	movwf	___ftmul@f1+2
  8529  0E82  0865               	movf	tempCalc@steinhart,w
  8530  0E83  00B3               	movwf	___ftmul@f2
  8531  0E84  0866               	movf	tempCalc@steinhart+1,w
  8532  0E85  00B4               	movwf	___ftmul@f2+1
  8533  0E86  0867               	movf	tempCalc@steinhart+2,w
  8534  0E87  00B5               	movwf	___ftmul@f2+2
  8535  0E88  318A  2256  318D   	fcall	___ftmul
  8536  0E8B  0020               	movlb	0	; select bank0
  8537  0E8C  0830               	movf	?___ftmul,w
  8538  0E8D  00A3               	movwf	___ftdiv@f1
  8539  0E8E  0831               	movf	?___ftmul+1,w
  8540  0E8F  00A4               	movwf	___ftdiv@f1+1
  8541  0E90  0832               	movf	?___ftmul+2,w
  8542  0E91  00A5               	movwf	___ftdiv@f1+2
  8543  0E92  3188  20FD  318D   	fcall	___ftdiv
  8544  0E95  0020               	movlb	0	; select bank0
  8545  0E96  0820               	movf	?___ftdiv,w
  8546  0E97  00C3               	movwf	___ftadd@f2
  8547  0E98  0821               	movf	?___ftdiv+1,w
  8548  0E99  00C4               	movwf	___ftadd@f2+1
  8549  0E9A  0822               	movf	?___ftdiv+2,w
  8550  0E9B  00C5               	movwf	___ftadd@f2+2
  8551  0E9C  318C  24A1  318D   	fcall	___ftadd
  8552  0E9F  0020               	movlb	0	; select bank0
  8553  0EA0  0840               	movf	?___ftadd,w
  8554  0EA1  00E5               	movwf	tempCalc@steinhart
  8555  0EA2  0841               	movf	?___ftadd+1,w
  8556  0EA3  00E6               	movwf	tempCalc@steinhart+1
  8557  0EA4  0842               	movf	?___ftadd+2,w
  8558  0EA5  00E7               	movwf	tempCalc@steinhart+2
  8559                           
  8560                           ;tempCalc.c: 23: return (int16_t)steinhart;
  8561  0EA6  0865               	movf	tempCalc@steinhart,w
  8562  0EA7  00B0               	movwf	___fttol@f1
  8563  0EA8  0866               	movf	tempCalc@steinhart+1,w
  8564  0EA9  00B1               	movwf	___fttol@f1+1
  8565  0EAA  0867               	movf	tempCalc@steinhart+2,w
  8566  0EAB  00B2               	movwf	___fttol@f1+2
  8567  0EAC  3188  2076         	fcall	___fttol
  8568  0EAE  0020               	movlb	0	; select bank0
  8569  0EAF  0831               	movf	?___fttol+1,w
  8570  0EB0  00DE               	movwf	?_tempCalc+1
  8571  0EB1  0830               	movf	?___fttol,w
  8572  0EB2  00DD               	movwf	?_tempCalc
  8573  0EB3  0008               	return
  8574  0EB4                     __end_of_tempCalc:	
  8575                           
  8576                           	psect	text2
  8577  09A6                     __ptext2:	
  8578 ;; *************** function _log *****************
  8579 ;; Defined at:
  8580 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\log.c"
  8581 ;; Parameters:    Size  Location     Type
  8582 ;;  x               3   55[BANK0 ] int 
  8583 ;; Auto vars:     Size  Location     Type
  8584 ;;  exponent        2   59[BANK0 ] int 
  8585 ;; Return value:  Size  Location     Type
  8586 ;;                  3   55[BANK0 ] int 
  8587 ;; Registers used:
  8588 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8589 ;; Tracked objects:
  8590 ;;		On entry : 0/0
  8591 ;;		On exit  : 0/0
  8592 ;;		Unchanged: 0/0
  8593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8594 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8595 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8596 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8597 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8598 ;;Total ram usage:        6 bytes
  8599 ;; Hardware stack levels used:    1
  8600 ;; Hardware stack levels required when called:    3
  8601 ;; This function calls:
  8602 ;;		___awtoft
  8603 ;;		___ftadd
  8604 ;;		___ftge
  8605 ;;		___ftmul
  8606 ;;		_eval_poly
  8607 ;;		_frexp
  8608 ;; This function is called by:
  8609 ;;		_tempCalc
  8610 ;; This function uses a non-reentrant model
  8611 ;;
  8612                           
  8613                           
  8614                           ;psect for function _log
  8615  09A6                     _log:	
  8616                           
  8617                           ;incstack = 0
  8618                           ; Regs used in _log: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8619  09A6  0020               	movlb	0	; select bank0
  8620  09A7  0857               	movf	log@x,w
  8621  09A8  00F0               	movwf	___ftge@ff1
  8622  09A9  0858               	movf	log@x+1,w
  8623  09AA  00F1               	movwf	___ftge@ff1+1
  8624  09AB  0859               	movf	log@x+2,w
  8625  09AC  00F2               	movwf	___ftge@ff1+2
  8626  09AD  3000               	movlw	0
  8627  09AE  00F3               	movwf	___ftge@ff2
  8628  09AF  3000               	movlw	0
  8629  09B0  00F4               	movwf	___ftge@ff2+1
  8630  09B1  3000               	movlw	0
  8631  09B2  00F5               	movwf	___ftge@ff2+2
  8632  09B3  3194  24C9  3189   	fcall	___ftge
  8633  09B6  1803               	btfsc	3,0
  8634  09B7  29C5               	goto	l2628
  8635  09B8  3021               	movlw	33
  8636  09B9  0022               	movlb	2	; select bank2
  8637  09BA  00C9               	movwf	_errno^(0+256)
  8638  09BB  3000               	movlw	0
  8639  09BC  00CA               	movwf	(_errno^(0+256)+1)
  8640  09BD  3000               	movlw	0
  8641  09BE  0020               	movlb	0	; select bank0
  8642  09BF  00D7               	movwf	?_log
  8643  09C0  3000               	movlw	0
  8644  09C1  00D8               	movwf	?_log+1
  8645  09C2  3000               	movlw	0
  8646  09C3  00D9               	movwf	?_log+2
  8647  09C4  0008               	return
  8648  09C5                     l2628:	
  8649  09C5  0020               	movlb	0	; select bank0
  8650  09C6  0859               	movf	log@x+2,w
  8651  09C7  0458               	iorwf	log@x+1,w
  8652  09C8  0457               	iorwf	log@x,w
  8653  09C9  1D03               	skipz
  8654  09CA  29D8               	goto	l2634
  8655  09CB  3022               	movlw	34
  8656  09CC  0022               	movlb	2	; select bank2
  8657  09CD  00C9               	movwf	_errno^(0+256)
  8658  09CE  3000               	movlw	0
  8659  09CF  00CA               	movwf	(_errno^(0+256)+1)
  8660  09D0  3000               	movlw	0
  8661  09D1  0020               	movlb	0	; select bank0
  8662  09D2  00D7               	movwf	?_log
  8663  09D3  3000               	movlw	0
  8664  09D4  00D8               	movwf	?_log+1
  8665  09D5  3000               	movlw	0
  8666  09D6  00D9               	movwf	?_log+2
  8667  09D7  0008               	return
  8668  09D8                     l2634:	
  8669  09D8  3000               	movlw	0
  8670  09D9  00C0               	movwf	___ftadd@f1
  8671  09DA  3080               	movlw	128
  8672  09DB  00C1               	movwf	___ftadd@f1+1
  8673  09DC  30BF               	movlw	191
  8674  09DD  00C2               	movwf	___ftadd@f1+2
  8675  09DE  3000               	movlw	0
  8676  09DF  00B0               	movwf	___ftmul@f1
  8677  09E0  3000               	movlw	0
  8678  09E1  00B1               	movwf	___ftmul@f1+1
  8679  09E2  3040               	movlw	64
  8680  09E3  00B2               	movwf	___ftmul@f1+2
  8681  09E4  305B               	movlw	(low (log@exponent| 0))& (0+255)
  8682  09E5  00DA               	movwf	??_log
  8683  09E6  085A               	movf	??_log,w
  8684  09E7  00F3               	movwf	frexp@eptr
  8685  09E8  0857               	movf	log@x,w
  8686  09E9  00F0               	movwf	frexp@value
  8687  09EA  0858               	movf	log@x+1,w
  8688  09EB  00F1               	movwf	frexp@value+1
  8689  09EC  0859               	movf	log@x+2,w
  8690  09ED  00F2               	movwf	frexp@value+2
  8691  09EE  3195  2504  3189   	fcall	_frexp
  8692  09F1  0870               	movf	?_frexp,w
  8693  09F2  0020               	movlb	0	; select bank0
  8694  09F3  00B3               	movwf	___ftmul@f2
  8695  09F4  0871               	movf	?_frexp+1,w
  8696  09F5  00B4               	movwf	___ftmul@f2+1
  8697  09F6  0872               	movf	?_frexp+2,w
  8698  09F7  00B5               	movwf	___ftmul@f2+2
  8699  09F8  318A  2256  3189   	fcall	___ftmul
  8700  09FB  0020               	movlb	0	; select bank0
  8701  09FC  0830               	movf	?___ftmul,w
  8702  09FD  00C3               	movwf	___ftadd@f2
  8703  09FE  0831               	movf	?___ftmul+1,w
  8704  09FF  00C4               	movwf	___ftadd@f2+1
  8705  0A00  0832               	movf	?___ftmul+2,w
  8706  0A01  00C5               	movwf	___ftadd@f2+2
  8707  0A02  318C  24A1  3189   	fcall	___ftadd
  8708  0A05  0020               	movlb	0	; select bank0
  8709  0A06  0840               	movf	?___ftadd,w
  8710  0A07  00D7               	movwf	log@x
  8711  0A08  0841               	movf	?___ftadd+1,w
  8712  0A09  00D8               	movwf	log@x+1
  8713  0A0A  0842               	movf	?___ftadd+2,w
  8714  0A0B  00D9               	movwf	log@x+2
  8715  0A0C  30FF               	movlw	255
  8716  0A0D  07DB               	addwf	log@exponent,f
  8717  0A0E  30FF               	movlw	255
  8718  0A0F  3DDC               	addwfc	log@exponent+1,f
  8719  0A10  0857               	movf	log@x,w
  8720  0A11  00CD               	movwf	eval_poly@x
  8721  0A12  0858               	movf	log@x+1,w
  8722  0A13  00CE               	movwf	eval_poly@x+1
  8723  0A14  0859               	movf	log@x+2,w
  8724  0A15  00CF               	movwf	eval_poly@x+2
  8725  0A16  3000               	movlw	low (log@coeff| (0+32768))
  8726  0A17  00D0               	movwf	eval_poly@d
  8727  0A18  3098               	movlw	high (log@coeff| (0+32768))
  8728  0A19  00D1               	movwf	eval_poly@d+1
  8729  0A1A  3008               	movlw	8
  8730  0A1B  00D2               	movwf	eval_poly@n
  8731  0A1C  3000               	movlw	0
  8732  0A1D  00D3               	movwf	eval_poly@n+1
  8733  0A1E  3188  2016  3189   	fcall	_eval_poly
  8734  0A21  0020               	movlb	0	; select bank0
  8735  0A22  084D               	movf	?_eval_poly,w
  8736  0A23  00D7               	movwf	log@x
  8737  0A24  084E               	movf	?_eval_poly+1,w
  8738  0A25  00D8               	movwf	log@x+1
  8739  0A26  084F               	movf	?_eval_poly+2,w
  8740  0A27  00D9               	movwf	log@x+2
  8741  0A28  0857               	movf	log@x,w
  8742  0A29  00C0               	movwf	___ftadd@f1
  8743  0A2A  0858               	movf	log@x+1,w
  8744  0A2B  00C1               	movwf	___ftadd@f1+1
  8745  0A2C  0859               	movf	log@x+2,w
  8746  0A2D  00C2               	movwf	___ftadd@f1+2
  8747  0A2E  3072               	movlw	114
  8748  0A2F  00B0               	movwf	___ftmul@f1
  8749  0A30  3031               	movlw	49
  8750  0A31  00B1               	movwf	___ftmul@f1+1
  8751  0A32  303F               	movlw	63
  8752  0A33  00B2               	movwf	___ftmul@f1+2
  8753  0A34  085C               	movf	log@exponent+1,w
  8754  0A35  00F9               	movwf	___awtoft@c+1
  8755  0A36  085B               	movf	log@exponent,w
  8756  0A37  00F8               	movwf	___awtoft@c
  8757  0A38  3193  2354  3189   	fcall	___awtoft
  8758  0A3B  0878               	movf	?___awtoft,w
  8759  0A3C  0020               	movlb	0	; select bank0
  8760  0A3D  00B3               	movwf	___ftmul@f2
  8761  0A3E  0879               	movf	?___awtoft+1,w
  8762  0A3F  00B4               	movwf	___ftmul@f2+1
  8763  0A40  087A               	movf	?___awtoft+2,w
  8764  0A41  00B5               	movwf	___ftmul@f2+2
  8765  0A42  318A  2256  3189   	fcall	___ftmul
  8766  0A45  0020               	movlb	0	; select bank0
  8767  0A46  0830               	movf	?___ftmul,w
  8768  0A47  00C3               	movwf	___ftadd@f2
  8769  0A48  0831               	movf	?___ftmul+1,w
  8770  0A49  00C4               	movwf	___ftadd@f2+1
  8771  0A4A  0832               	movf	?___ftmul+2,w
  8772  0A4B  00C5               	movwf	___ftadd@f2+2
  8773  0A4C  318C  24A1         	fcall	___ftadd
  8774  0A4E  0020               	movlb	0	; select bank0
  8775  0A4F  0840               	movf	?___ftadd,w
  8776  0A50  00D7               	movwf	?_log
  8777  0A51  0841               	movf	?___ftadd+1,w
  8778  0A52  00D8               	movwf	?_log+1
  8779  0A53  0842               	movf	?___ftadd+2,w
  8780  0A54  00D9               	movwf	?_log+2
  8781  0A55  0008               	return
  8782  0A56                     __end_of_log:	
  8783                           
  8784                           	psect	text3
  8785  1504                     __ptext3:	
  8786 ;; *************** function _frexp *****************
  8787 ;; Defined at:
  8788 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
  8789 ;; Parameters:    Size  Location     Type
  8790 ;;  value           3    0[COMMON] int 
  8791 ;;  eptr            1    3[COMMON] PTR int 
  8792 ;;		 -> log@exponent(2), 
  8793 ;; Auto vars:     Size  Location     Type
  8794 ;;		None
  8795 ;; Return value:  Size  Location     Type
  8796 ;;                  3    0[COMMON] PTR int 
  8797 ;; Registers used:
  8798 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8799 ;; Tracked objects:
  8800 ;;		On entry : 0/0
  8801 ;;		On exit  : 0/0
  8802 ;;		Unchanged: 0/0
  8803 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8804 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8805 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8806 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8807 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8808 ;;Total ram usage:        6 bytes
  8809 ;; Hardware stack levels used:    1
  8810 ;; This function calls:
  8811 ;;		Nothing
  8812 ;; This function is called by:
  8813 ;;		_log
  8814 ;; This function uses a non-reentrant model
  8815 ;;
  8816                           
  8817                           
  8818                           ;psect for function _frexp
  8819  1504                     _frexp:	
  8820                           
  8821                           ;incstack = 0
  8822                           ; Regs used in _frexp: [wreg+fsr1l+fsr1h+status,2+status,0]
  8823  1504  0872               	movf	frexp@value+2,w
  8824  1505  0471               	iorwf	frexp@value+1,w
  8825  1506  0470               	iorwf	frexp@value,w
  8826  1507  1D03               	skipz
  8827  1508  2D16               	goto	l2438
  8828  1509  0873               	movf	frexp@eptr,w
  8829  150A  0086               	movwf	6
  8830  150B  0187               	clrf	7
  8831  150C  3000               	movlw	0
  8832  150D  3FC0               	movwi [0]fsr1
  8833  150E  3FC1               	movwi [1]fsr1
  8834  150F  3000               	movlw	0
  8835  1510  00F0               	movwf	?_frexp
  8836  1511  3000               	movlw	0
  8837  1512  00F1               	movwf	?_frexp+1
  8838  1513  3000               	movlw	0
  8839  1514  00F2               	movwf	?_frexp+2
  8840  1515  0008               	return
  8841  1516                     l2438:	
  8842  1516  0872               	movf	frexp@value+2,w
  8843  1517  397F               	andlw	127
  8844  1518  00F4               	movwf	??_frexp
  8845  1519  01F5               	clrf	??_frexp+1
  8846  151A  35F4               	lslf	??_frexp,f
  8847  151B  0DF5               	rlf	??_frexp+1,f
  8848  151C  0873               	movf	frexp@eptr,w
  8849  151D  0086               	movwf	6
  8850  151E  0187               	clrf	7
  8851  151F  0874               	movf	??_frexp,w
  8852  1520  3FC0               	movwi [0]fsr1
  8853  1521  0875               	movf	??_frexp+1,w
  8854  1522  3FC1               	movwi [1]fsr1
  8855  1523  0D71               	rlf	frexp@value+1,w
  8856  1524  0D71               	rlf	frexp@value+1,w
  8857  1525  3901               	andlw	1
  8858  1526  00F4               	movwf	??_frexp
  8859  1527  01F5               	clrf	??_frexp+1
  8860  1528  0873               	movf	frexp@eptr,w
  8861  1529  0086               	movwf	6
  8862  152A  0187               	clrf	7
  8863  152B  0874               	movf	??_frexp,w
  8864  152C  0481               	iorwf	1,f
  8865  152D  3141               	addfsr 1,1
  8866  152E  0875               	movf	??_frexp+1,w
  8867  152F  0481               	iorwf	1,f
  8868  1530  0873               	movf	frexp@eptr,w
  8869  1531  0086               	movwf	6
  8870  1532  0187               	clrf	7
  8871  1533  3082               	movlw	130
  8872  1534  0781               	addwf	1,f
  8873  1535  3141               	addfsr 1,1
  8874  1536  30FF               	movlw	255
  8875  1537  3D81               	addwfc	1,f
  8876  1538  317F               	addfsr 1,-1
  8877  1539  0872               	movf	frexp@value+2,w
  8878  153A  3980               	andlw	-128
  8879  153B  383F               	iorlw	63
  8880  153C  00F2               	movwf	frexp@value+2
  8881  153D  13F1               	bcf	frexp@value+1,7
  8882  153E  0008               	return
  8883  153F                     __end_of_frexp:	
  8884                           
  8885                           	psect	text4
  8886  0816                     __ptext4:	
  8887 ;; *************** function _eval_poly *****************
  8888 ;; Defined at:
  8889 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\evalpoly.c"
  8890 ;; Parameters:    Size  Location     Type
  8891 ;;  x               3   45[BANK0 ] PTR int 
  8892 ;;  d               2   48[BANK0 ] PTR const 
  8893 ;;		 -> log@coeff(27), 
  8894 ;;  n               2   50[BANK0 ] int 
  8895 ;; Auto vars:     Size  Location     Type
  8896 ;;  res             3   52[BANK0 ] int 
  8897 ;; Return value:  Size  Location     Type
  8898 ;;                  3   45[BANK0 ] int 
  8899 ;; Registers used:
  8900 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8901 ;; Tracked objects:
  8902 ;;		On entry : 0/0
  8903 ;;		On exit  : 0/0
  8904 ;;		Unchanged: 0/0
  8905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8906 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8907 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8908 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8909 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8910 ;;Total ram usage:       10 bytes
  8911 ;; Hardware stack levels used:    1
  8912 ;; Hardware stack levels required when called:    2
  8913 ;; This function calls:
  8914 ;;		___ftadd
  8915 ;;		___ftmul
  8916 ;;		___wmul
  8917 ;; This function is called by:
  8918 ;;		_log
  8919 ;; This function uses a non-reentrant model
  8920 ;;
  8921                           
  8922                           
  8923                           ;psect for function _eval_poly
  8924  0816                     _eval_poly:	
  8925                           
  8926                           ;incstack = 0
  8927                           ; Regs used in _eval_poly: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8928  0816  0020               	movlb	0	; select bank0
  8929  0817  0853               	movf	eval_poly@n+1,w
  8930  0818  00FA               	movwf	___wmul@multiplier+1
  8931  0819  0852               	movf	eval_poly@n,w
  8932  081A  00F9               	movwf	___wmul@multiplier
  8933  081B  3003               	movlw	3
  8934  081C  00FB               	movwf	___wmul@multiplicand
  8935  081D  3000               	movlw	0
  8936  081E  00FC               	movwf	___wmul@multiplicand+1
  8937  081F  3192  22F9  3188   	fcall	___wmul
  8938  0822  0020               	movlb	0	; select bank0
  8939  0823  0850               	movf	eval_poly@d,w
  8940  0824  0779               	addwf	?___wmul,w
  8941  0825  0084               	movwf	4
  8942  0826  0851               	movf	eval_poly@d+1,w
  8943  0827  3D7A               	addwfc	?___wmul+1,w
  8944  0828  0085               	movwf	5
  8945  0829  3F00               	moviw [0]fsr0
  8946  082A  00D4               	movwf	eval_poly@res
  8947  082B  3F01               	moviw [1]fsr0
  8948  082C  00D5               	movwf	eval_poly@res+1
  8949  082D  3F02               	moviw [2]fsr0
  8950  082E                     L4:	
  8951  082E  00D6               	movwf	eval_poly@res+2
  8952  082F  0852               	movf	eval_poly@n,w
  8953  0830  0453               	iorwf	eval_poly@n+1,w
  8954  0831  1903               	btfsc	3,2
  8955  0832  286F               	goto	l2456
  8956  0833  30FF               	movlw	255
  8957  0834  07D2               	addwf	eval_poly@n,f
  8958  0835  30FF               	movlw	255
  8959  0836  3DD3               	addwfc	eval_poly@n+1,f
  8960  0837  0853               	movf	eval_poly@n+1,w
  8961  0838  00FA               	movwf	___wmul@multiplier+1
  8962  0839  0852               	movf	eval_poly@n,w
  8963  083A  00F9               	movwf	___wmul@multiplier
  8964  083B  3003               	movlw	3
  8965  083C  00FB               	movwf	___wmul@multiplicand
  8966  083D  3000               	movlw	0
  8967  083E  00FC               	movwf	___wmul@multiplicand+1
  8968  083F  3192  22F9  3188   	fcall	___wmul
  8969  0842  0020               	movlb	0	; select bank0
  8970  0843  0850               	movf	eval_poly@d,w
  8971  0844  0779               	addwf	?___wmul,w
  8972  0845  0084               	movwf	4
  8973  0846  0851               	movf	eval_poly@d+1,w
  8974  0847  3D7A               	addwfc	?___wmul+1,w
  8975  0848  0085               	movwf	5
  8976  0849  3F00               	moviw [0]fsr0
  8977  084A  00C0               	movwf	___ftadd@f1
  8978  084B  3F01               	moviw [1]fsr0
  8979  084C  00C1               	movwf	___ftadd@f1+1
  8980  084D  3F02               	moviw [2]fsr0
  8981  084E  00C2               	movwf	___ftadd@f1+2
  8982  084F  0854               	movf	eval_poly@res,w
  8983  0850  00B0               	movwf	___ftmul@f1
  8984  0851  0855               	movf	eval_poly@res+1,w
  8985  0852  00B1               	movwf	___ftmul@f1+1
  8986  0853  0856               	movf	eval_poly@res+2,w
  8987  0854  00B2               	movwf	___ftmul@f1+2
  8988  0855  084D               	movf	eval_poly@x,w
  8989  0856  00B3               	movwf	___ftmul@f2
  8990  0857  084E               	movf	eval_poly@x+1,w
  8991  0858  00B4               	movwf	___ftmul@f2+1
  8992  0859  084F               	movf	eval_poly@x+2,w
  8993  085A  00B5               	movwf	___ftmul@f2+2
  8994  085B  318A  2256  3188   	fcall	___ftmul
  8995  085E  0020               	movlb	0	; select bank0
  8996  085F  0830               	movf	?___ftmul,w
  8997  0860  00C3               	movwf	___ftadd@f2
  8998  0861  0831               	movf	?___ftmul+1,w
  8999  0862  00C4               	movwf	___ftadd@f2+1
  9000  0863  0832               	movf	?___ftmul+2,w
  9001  0864  00C5               	movwf	___ftadd@f2+2
  9002  0865  318C  24A1  3188   	fcall	___ftadd
  9003  0868  0020               	movlb	0	; select bank0
  9004  0869  0840               	movf	?___ftadd,w
  9005  086A  00D4               	movwf	eval_poly@res
  9006  086B  0841               	movf	?___ftadd+1,w
  9007  086C  00D5               	movwf	eval_poly@res+1
  9008  086D  0842               	movf	?___ftadd+2,w
  9009  086E  282E               	goto	L4
  9010  086F                     l2456:	
  9011  086F  0854               	movf	eval_poly@res,w
  9012  0870  00CD               	movwf	?_eval_poly
  9013  0871  0855               	movf	eval_poly@res+1,w
  9014  0872  00CE               	movwf	?_eval_poly+1
  9015  0873  0856               	movf	eval_poly@res+2,w
  9016  0874  00CF               	movwf	?_eval_poly+2
  9017  0875  0008               	return
  9018  0876                     __end_of_eval_poly:	
  9019                           
  9020                           	psect	text5
  9021  0A56                     __ptext5:	
  9022 ;; *************** function ___ftmul *****************
  9023 ;; Defined at:
  9024 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
  9025 ;; Parameters:    Size  Location     Type
  9026 ;;  f1              3   16[BANK0 ] float 
  9027 ;;  f2              3   19[BANK0 ] float 
  9028 ;; Auto vars:     Size  Location     Type
  9029 ;;  f3_as_produc    3   27[BANK0 ] unsigned um
  9030 ;;  sign            1   31[BANK0 ] unsigned char 
  9031 ;;  cntr            1   30[BANK0 ] unsigned char 
  9032 ;;  exp             1   26[BANK0 ] unsigned char 
  9033 ;; Return value:  Size  Location     Type
  9034 ;;                  3   16[BANK0 ] float 
  9035 ;; Registers used:
  9036 ;;		wreg, status,2, status,0, pclath, cstack
  9037 ;; Tracked objects:
  9038 ;;		On entry : 0/0
  9039 ;;		On exit  : 0/0
  9040 ;;		Unchanged: 0/0
  9041 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9042 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9043 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9044 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9045 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9046 ;;Total ram usage:       16 bytes
  9047 ;; Hardware stack levels used:    1
  9048 ;; Hardware stack levels required when called:    1
  9049 ;; This function calls:
  9050 ;;		___ftpack
  9051 ;; This function is called by:
  9052 ;;		_tempCalc
  9053 ;;		_main
  9054 ;;		_log
  9055 ;;		_eval_poly
  9056 ;; This function uses a non-reentrant model
  9057 ;;
  9058                           
  9059                           
  9060                           ;psect for function ___ftmul
  9061  0A56                     ___ftmul:	
  9062                           
  9063                           ;incstack = 0
  9064                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  9065  0A56  0020               	movlb	0	; select bank0
  9066  0A57  0830               	movf	___ftmul@f1,w
  9067  0A58  00B6               	movwf	??___ftmul
  9068  0A59  0831               	movf	___ftmul@f1+1,w
  9069  0A5A  00B7               	movwf	??___ftmul+1
  9070  0A5B  0832               	movf	___ftmul@f1+2,w
  9071  0A5C  00B8               	movwf	??___ftmul+2
  9072  0A5D  1003               	clrc
  9073  0A5E  0D37               	rlf	??___ftmul+1,w
  9074  0A5F  0D38               	rlf	??___ftmul+2,w
  9075  0A60  00B9               	movwf	??___ftmul+3
  9076  0A61  0839               	movf	??___ftmul+3,w
  9077  0A62  00BA               	movwf	___ftmul@exp
  9078  0A63  083A               	movf	___ftmul@exp,w
  9079  0A64  1D03               	btfss	3,2
  9080  0A65  2A6D               	goto	l2340
  9081  0A66  3000               	movlw	0
  9082  0A67  00B0               	movwf	?___ftmul
  9083  0A68  3000               	movlw	0
  9084  0A69  00B1               	movwf	?___ftmul+1
  9085  0A6A  3000               	movlw	0
  9086  0A6B  00B2               	movwf	?___ftmul+2
  9087  0A6C  0008               	return
  9088  0A6D                     l2340:	
  9089  0A6D  0833               	movf	___ftmul@f2,w
  9090  0A6E  00B6               	movwf	??___ftmul
  9091  0A6F  0834               	movf	___ftmul@f2+1,w
  9092  0A70  00B7               	movwf	??___ftmul+1
  9093  0A71  0835               	movf	___ftmul@f2+2,w
  9094  0A72  00B8               	movwf	??___ftmul+2
  9095  0A73  1003               	clrc
  9096  0A74  0D37               	rlf	??___ftmul+1,w
  9097  0A75  0D38               	rlf	??___ftmul+2,w
  9098  0A76  00B9               	movwf	??___ftmul+3
  9099  0A77  0839               	movf	??___ftmul+3,w
  9100  0A78  00BF               	movwf	___ftmul@sign
  9101  0A79  083F               	movf	___ftmul@sign,w
  9102  0A7A  1D03               	btfss	3,2
  9103  0A7B  2A83               	goto	l2346
  9104  0A7C  3000               	movlw	0
  9105  0A7D  00B0               	movwf	?___ftmul
  9106  0A7E  3000               	movlw	0
  9107  0A7F  00B1               	movwf	?___ftmul+1
  9108  0A80  3000               	movlw	0
  9109  0A81  00B2               	movwf	?___ftmul+2
  9110  0A82  0008               	return
  9111  0A83                     l2346:	
  9112  0A83  083F               	movf	___ftmul@sign,w
  9113  0A84  3E7B               	addlw	123
  9114  0A85  00B6               	movwf	??___ftmul
  9115  0A86  0836               	movf	??___ftmul,w
  9116  0A87  07BA               	addwf	___ftmul@exp,f
  9117  0A88  0830               	movf	___ftmul@f1,w
  9118  0A89  00B6               	movwf	??___ftmul
  9119  0A8A  0831               	movf	___ftmul@f1+1,w
  9120  0A8B  00B7               	movwf	??___ftmul+1
  9121  0A8C  0832               	movf	___ftmul@f1+2,w
  9122  0A8D  00B8               	movwf	??___ftmul+2
  9123  0A8E  3010               	movlw	16
  9124  0A8F                     u2445:	
  9125  0A8F  36B8               	lsrf	??___ftmul+2,f
  9126  0A90  0CB7               	rrf	??___ftmul+1,f
  9127  0A91  0CB6               	rrf	??___ftmul,f
  9128  0A92  0B89               	decfsz	9,f
  9129  0A93  2A8F               	goto	u2445
  9130  0A94  0836               	movf	??___ftmul,w
  9131  0A95  00B9               	movwf	??___ftmul+3
  9132  0A96  0839               	movf	??___ftmul+3,w
  9133  0A97  00BF               	movwf	___ftmul@sign
  9134  0A98  0833               	movf	___ftmul@f2,w
  9135  0A99  00B6               	movwf	??___ftmul
  9136  0A9A  0834               	movf	___ftmul@f2+1,w
  9137  0A9B  00B7               	movwf	??___ftmul+1
  9138  0A9C  0835               	movf	___ftmul@f2+2,w
  9139  0A9D  00B8               	movwf	??___ftmul+2
  9140  0A9E  3010               	movlw	16
  9141  0A9F                     u2455:	
  9142  0A9F  36B8               	lsrf	??___ftmul+2,f
  9143  0AA0  0CB7               	rrf	??___ftmul+1,f
  9144  0AA1  0CB6               	rrf	??___ftmul,f
  9145  0AA2  0B89               	decfsz	9,f
  9146  0AA3  2A9F               	goto	u2455
  9147  0AA4  0836               	movf	??___ftmul,w
  9148  0AA5  00B9               	movwf	??___ftmul+3
  9149  0AA6  0839               	movf	??___ftmul+3,w
  9150  0AA7  06BF               	xorwf	___ftmul@sign,f
  9151  0AA8  3080               	movlw	128
  9152  0AA9  00B6               	movwf	??___ftmul
  9153  0AAA  0836               	movf	??___ftmul,w
  9154  0AAB  05BF               	andwf	___ftmul@sign,f
  9155  0AAC  17B1               	bsf	___ftmul@f1+1,7
  9156  0AAD  17B4               	bsf	___ftmul@f2+1,7
  9157  0AAE  30FF               	movlw	255
  9158  0AAF  05B3               	andwf	___ftmul@f2,f
  9159  0AB0  30FF               	movlw	255
  9160  0AB1  05B4               	andwf	___ftmul@f2+1,f
  9161  0AB2  3000               	movlw	0
  9162  0AB3  05B5               	andwf	___ftmul@f2+2,f
  9163  0AB4  3000               	movlw	0
  9164  0AB5  00BB               	movwf	___ftmul@f3_as_product
  9165  0AB6  3000               	movlw	0
  9166  0AB7  00BC               	movwf	___ftmul@f3_as_product+1
  9167  0AB8  3000               	movlw	0
  9168  0AB9  00BD               	movwf	___ftmul@f3_as_product+2
  9169  0ABA  3007               	movlw	7
  9170  0ABB  00B6               	movwf	??___ftmul
  9171  0ABC  0836               	movf	??___ftmul,w
  9172  0ABD  00BE               	movwf	___ftmul@cntr
  9173  0ABE                     l2358:	
  9174  0ABE  1C30               	btfss	___ftmul@f1,0
  9175  0ABF  2AC6               	goto	l2362
  9176  0AC0  0833               	movf	___ftmul@f2,w
  9177  0AC1  07BB               	addwf	___ftmul@f3_as_product,f
  9178  0AC2  0834               	movf	___ftmul@f2+1,w
  9179  0AC3  3DBC               	addwfc	___ftmul@f3_as_product+1,f
  9180  0AC4  0835               	movf	___ftmul@f2+2,w
  9181  0AC5  3DBD               	addwfc	___ftmul@f3_as_product+2,f
  9182  0AC6                     l2362:	
  9183  0AC6  3001               	movlw	1
  9184  0AC7                     u2475:	
  9185  0AC7  36B2               	lsrf	___ftmul@f1+2,f
  9186  0AC8  0CB1               	rrf	___ftmul@f1+1,f
  9187  0AC9  0CB0               	rrf	___ftmul@f1,f
  9188  0ACA  0B89               	decfsz	9,f
  9189  0ACB  2AC7               	goto	u2475
  9190  0ACC  3001               	movlw	1
  9191  0ACD                     u2485:	
  9192  0ACD  35B3               	lslf	___ftmul@f2,f
  9193  0ACE  0DB4               	rlf	___ftmul@f2+1,f
  9194  0ACF  0DB5               	rlf	___ftmul@f2+2,f
  9195  0AD0  0B89               	decfsz	9,f
  9196  0AD1  2ACD               	goto	u2485
  9197  0AD2  3001               	movlw	1
  9198  0AD3  02BE               	subwf	___ftmul@cntr,f
  9199  0AD4  1D03               	btfss	3,2
  9200  0AD5  2ABE               	goto	l2358
  9201  0AD6  3009               	movlw	9
  9202  0AD7  00B6               	movwf	??___ftmul
  9203  0AD8  0836               	movf	??___ftmul,w
  9204  0AD9  00BE               	movwf	___ftmul@cntr
  9205  0ADA                     l2370:	
  9206  0ADA  1C30               	btfss	___ftmul@f1,0
  9207  0ADB  2AE2               	goto	l2374
  9208  0ADC  0833               	movf	___ftmul@f2,w
  9209  0ADD  07BB               	addwf	___ftmul@f3_as_product,f
  9210  0ADE  0834               	movf	___ftmul@f2+1,w
  9211  0ADF  3DBC               	addwfc	___ftmul@f3_as_product+1,f
  9212  0AE0  0835               	movf	___ftmul@f2+2,w
  9213  0AE1  3DBD               	addwfc	___ftmul@f3_as_product+2,f
  9214  0AE2                     l2374:	
  9215  0AE2  3001               	movlw	1
  9216  0AE3                     u2515:	
  9217  0AE3  36B2               	lsrf	___ftmul@f1+2,f
  9218  0AE4  0CB1               	rrf	___ftmul@f1+1,f
  9219  0AE5  0CB0               	rrf	___ftmul@f1,f
  9220  0AE6  0B89               	decfsz	9,f
  9221  0AE7  2AE3               	goto	u2515
  9222  0AE8  3001               	movlw	1
  9223  0AE9                     u2525:	
  9224  0AE9  36BD               	lsrf	___ftmul@f3_as_product+2,f
  9225  0AEA  0CBC               	rrf	___ftmul@f3_as_product+1,f
  9226  0AEB  0CBB               	rrf	___ftmul@f3_as_product,f
  9227  0AEC  0B89               	decfsz	9,f
  9228  0AED  2AE9               	goto	u2525
  9229  0AEE  3001               	movlw	1
  9230  0AEF  02BE               	subwf	___ftmul@cntr,f
  9231  0AF0  1D03               	btfss	3,2
  9232  0AF1  2ADA               	goto	l2370
  9233  0AF2  083B               	movf	___ftmul@f3_as_product,w
  9234  0AF3  00F0               	movwf	___ftpack@arg
  9235  0AF4  083C               	movf	___ftmul@f3_as_product+1,w
  9236  0AF5  00F1               	movwf	___ftpack@arg+1
  9237  0AF6  083D               	movf	___ftmul@f3_as_product+2,w
  9238  0AF7  00F2               	movwf	___ftpack@arg+2
  9239  0AF8  083A               	movf	___ftmul@exp,w
  9240  0AF9  00B6               	movwf	??___ftmul
  9241  0AFA  0836               	movf	??___ftmul,w
  9242  0AFB  00F3               	movwf	___ftpack@exp
  9243  0AFC  083F               	movf	___ftmul@sign,w
  9244  0AFD  00B7               	movwf	??___ftmul+1
  9245  0AFE  0837               	movf	??___ftmul+1,w
  9246  0AFF  00F4               	movwf	___ftpack@sign
  9247  0B00  3180  2017         	fcall	___ftpack
  9248  0B02  0870               	movf	?___ftpack,w
  9249  0B03  0020               	movlb	0	; select bank0
  9250  0B04  00B0               	movwf	?___ftmul
  9251  0B05  0871               	movf	?___ftpack+1,w
  9252  0B06  00B1               	movwf	?___ftmul+1
  9253  0B07  0872               	movf	?___ftpack+2,w
  9254  0B08  00B2               	movwf	?___ftmul+2
  9255  0B09  0008               	return
  9256  0B0A                     __end_of___ftmul:	
  9257                           
  9258                           	psect	text6
  9259  14C9                     __ptext6:	
  9260 ;; *************** function ___ftge *****************
  9261 ;; Defined at:
  9262 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
  9263 ;; Parameters:    Size  Location     Type
  9264 ;;  ff1             3    0[COMMON] float 
  9265 ;;  ff2             3    3[COMMON] float 
  9266 ;; Auto vars:     Size  Location     Type
  9267 ;;		None
  9268 ;; Return value:  Size  Location     Type
  9269 ;;		None               void
  9270 ;; Registers used:
  9271 ;;		wreg, status,2, status,0
  9272 ;; Tracked objects:
  9273 ;;		On entry : 0/0
  9274 ;;		On exit  : 0/0
  9275 ;;		Unchanged: 0/0
  9276 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9277 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9278 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9279 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9280 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9281 ;;Total ram usage:        9 bytes
  9282 ;; Hardware stack levels used:    1
  9283 ;; This function calls:
  9284 ;;		Nothing
  9285 ;; This function is called by:
  9286 ;;		_log
  9287 ;; This function uses a non-reentrant model
  9288 ;;
  9289                           
  9290                           
  9291                           ;psect for function ___ftge
  9292  14C9                     ___ftge:	
  9293                           
  9294                           ;incstack = 0
  9295                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  9296  14C9  1FF2               	btfss	___ftge@ff1+2,7
  9297  14CA  2CDF               	goto	l2414
  9298  14CB  0970               	comf	___ftge@ff1,w
  9299  14CC  00F6               	movwf	??___ftge
  9300  14CD  0971               	comf	___ftge@ff1+1,w
  9301  14CE  00F7               	movwf	??___ftge+1
  9302  14CF  0972               	comf	___ftge@ff1+2,w
  9303  14D0  00F8               	movwf	??___ftge+2
  9304  14D1  0AF6               	incf	??___ftge,f
  9305  14D2  1903               	skipnz
  9306  14D3  0AF7               	incf	??___ftge+1,f
  9307  14D4  1903               	skipnz
  9308  14D5  0AF8               	incf	??___ftge+2,f
  9309  14D6  3000               	movlw	0
  9310  14D7  0776               	addwf	??___ftge,w
  9311  14D8  00F0               	movwf	___ftge@ff1
  9312  14D9  3000               	movlw	0
  9313  14DA  3D77               	addwfc	??___ftge+1,w
  9314  14DB  00F1               	movwf	___ftge@ff1+1
  9315  14DC  3080               	movlw	128
  9316  14DD  3D78               	addwfc	??___ftge+2,w
  9317  14DE  00F2               	movwf	___ftge@ff1+2
  9318  14DF                     l2414:	
  9319  14DF  1FF5               	btfss	___ftge@ff2+2,7
  9320  14E0  2CF5               	goto	l2418
  9321  14E1  0973               	comf	___ftge@ff2,w
  9322  14E2  00F6               	movwf	??___ftge
  9323  14E3  0974               	comf	___ftge@ff2+1,w
  9324  14E4  00F7               	movwf	??___ftge+1
  9325  14E5  0975               	comf	___ftge@ff2+2,w
  9326  14E6  00F8               	movwf	??___ftge+2
  9327  14E7  0AF6               	incf	??___ftge,f
  9328  14E8  1903               	skipnz
  9329  14E9  0AF7               	incf	??___ftge+1,f
  9330  14EA  1903               	skipnz
  9331  14EB  0AF8               	incf	??___ftge+2,f
  9332  14EC  3000               	movlw	0
  9333  14ED  0776               	addwf	??___ftge,w
  9334  14EE  00F3               	movwf	___ftge@ff2
  9335  14EF  3000               	movlw	0
  9336  14F0  3D77               	addwfc	??___ftge+1,w
  9337  14F1  00F4               	movwf	___ftge@ff2+1
  9338  14F2  3080               	movlw	128
  9339  14F3  3D78               	addwfc	??___ftge+2,w
  9340  14F4  00F5               	movwf	___ftge@ff2+2
  9341  14F5                     l2418:	
  9342  14F5  3080               	movlw	128
  9343  14F6  06F2               	xorwf	___ftge@ff1+2,f
  9344  14F7  3080               	movlw	128
  9345  14F8  06F5               	xorwf	___ftge@ff2+2,f
  9346  14F9  0875               	movf	___ftge@ff2+2,w
  9347  14FA  0272               	subwf	___ftge@ff1+2,w
  9348  14FB  1D03               	skipz
  9349  14FC  0008               	return
  9350  14FD  0874               	movf	___ftge@ff2+1,w
  9351  14FE  0271               	subwf	___ftge@ff1+1,w
  9352  14FF  1D03               	skipz
  9353  1500  0008               	return
  9354  1501  0873               	movf	___ftge@ff2,w
  9355  1502  0270               	subwf	___ftge@ff1,w
  9356  1503  0008               	return
  9357  1504                     __end_of___ftge:	
  9358                           
  9359                           	psect	text7
  9360  1317                     __ptext7:	
  9361 ;; *************** function ___ftsub *****************
  9362 ;; Defined at:
  9363 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
  9364 ;; Parameters:    Size  Location     Type
  9365 ;;  f2              3   45[BANK0 ] float 
  9366 ;;  f1              3   48[BANK0 ] float 
  9367 ;; Auto vars:     Size  Location     Type
  9368 ;;		None
  9369 ;; Return value:  Size  Location     Type
  9370 ;;                  3   45[BANK0 ] float 
  9371 ;; Registers used:
  9372 ;;		wreg, status,2, status,0, pclath, cstack
  9373 ;; Tracked objects:
  9374 ;;		On entry : 0/0
  9375 ;;		On exit  : 0/0
  9376 ;;		Unchanged: 0/0
  9377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9378 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9379 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9380 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9381 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9382 ;;Total ram usage:        6 bytes
  9383 ;; Hardware stack levels used:    1
  9384 ;; Hardware stack levels required when called:    2
  9385 ;; This function calls:
  9386 ;;		___ftadd
  9387 ;; This function is called by:
  9388 ;;		_tempCalc
  9389 ;; This function uses a non-reentrant model
  9390 ;;
  9391                           
  9392                           
  9393                           ;psect for function ___ftsub
  9394  1317                     ___ftsub:	
  9395                           
  9396                           ;incstack = 0
  9397                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  9398  1317  0020               	movlb	0	; select bank0
  9399  1318  084F               	movf	___ftsub@f2+2,w
  9400  1319  044E               	iorwf	___ftsub@f2+1,w
  9401  131A  044D               	iorwf	___ftsub@f2,w
  9402  131B  1903               	skipnz
  9403  131C  2B1F               	goto	l2774
  9404  131D  3080               	movlw	128
  9405  131E  06CF               	xorwf	___ftsub@f2+2,f
  9406  131F                     l2774:	
  9407  131F  0850               	movf	___ftsub@f1,w
  9408  1320  00C0               	movwf	___ftadd@f1
  9409  1321  0851               	movf	___ftsub@f1+1,w
  9410  1322  00C1               	movwf	___ftadd@f1+1
  9411  1323  0852               	movf	___ftsub@f1+2,w
  9412  1324  00C2               	movwf	___ftadd@f1+2
  9413  1325  084D               	movf	___ftsub@f2,w
  9414  1326  00C3               	movwf	___ftadd@f2
  9415  1327  084E               	movf	___ftsub@f2+1,w
  9416  1328  00C4               	movwf	___ftadd@f2+1
  9417  1329  084F               	movf	___ftsub@f2+2,w
  9418  132A  00C5               	movwf	___ftadd@f2+2
  9419  132B  318C  24A1         	fcall	___ftadd
  9420  132D  0020               	movlb	0	; select bank0
  9421  132E  0840               	movf	?___ftadd,w
  9422  132F  00CD               	movwf	?___ftsub
  9423  1330  0841               	movf	?___ftadd+1,w
  9424  1331  00CE               	movwf	?___ftsub+1
  9425  1332  0842               	movf	?___ftadd+2,w
  9426  1333  00CF               	movwf	?___ftsub+2
  9427  1334  0008               	return
  9428  1335                     __end_of___ftsub:	
  9429                           
  9430                           	psect	text8
  9431  0CA1                     __ptext8:	
  9432 ;; *************** function ___ftadd *****************
  9433 ;; Defined at:
  9434 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
  9435 ;; Parameters:    Size  Location     Type
  9436 ;;  f1              3   32[BANK0 ] float 
  9437 ;;  f2              3   35[BANK0 ] float 
  9438 ;; Auto vars:     Size  Location     Type
  9439 ;;  exp1            1   44[BANK0 ] unsigned char 
  9440 ;;  exp2            1   43[BANK0 ] unsigned char 
  9441 ;;  sign            1   42[BANK0 ] unsigned char 
  9442 ;; Return value:  Size  Location     Type
  9443 ;;                  3   32[BANK0 ] float 
  9444 ;; Registers used:
  9445 ;;		wreg, status,2, status,0, pclath, cstack
  9446 ;; Tracked objects:
  9447 ;;		On entry : 0/0
  9448 ;;		On exit  : 0/0
  9449 ;;		Unchanged: 0/0
  9450 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9451 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9452 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9453 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9454 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9455 ;;Total ram usage:       13 bytes
  9456 ;; Hardware stack levels used:    1
  9457 ;; Hardware stack levels required when called:    1
  9458 ;; This function calls:
  9459 ;;		___ftpack
  9460 ;; This function is called by:
  9461 ;;		_tempCalc
  9462 ;;		___ftsub
  9463 ;;		_log
  9464 ;;		_eval_poly
  9465 ;; This function uses a non-reentrant model
  9466 ;;
  9467                           
  9468                           
  9469                           ;psect for function ___ftadd
  9470  0CA1                     ___ftadd:	
  9471                           
  9472                           ;incstack = 0
  9473                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  9474  0CA1  0020               	movlb	0	; select bank0
  9475  0CA2  0840               	movf	___ftadd@f1,w
  9476  0CA3  00C6               	movwf	??___ftadd
  9477  0CA4  0841               	movf	___ftadd@f1+1,w
  9478  0CA5  00C7               	movwf	??___ftadd+1
  9479  0CA6  0842               	movf	___ftadd@f1+2,w
  9480  0CA7  00C8               	movwf	??___ftadd+2
  9481  0CA8  1003               	clrc
  9482  0CA9  0D47               	rlf	??___ftadd+1,w
  9483  0CAA  0D48               	rlf	??___ftadd+2,w
  9484  0CAB  00C9               	movwf	??___ftadd+3
  9485  0CAC  0849               	movf	??___ftadd+3,w
  9486  0CAD  00CC               	movwf	___ftadd@exp1
  9487  0CAE  0843               	movf	___ftadd@f2,w
  9488  0CAF  00C6               	movwf	??___ftadd
  9489  0CB0  0844               	movf	___ftadd@f2+1,w
  9490  0CB1  00C7               	movwf	??___ftadd+1
  9491  0CB2  0845               	movf	___ftadd@f2+2,w
  9492  0CB3  00C8               	movwf	??___ftadd+2
  9493  0CB4  1003               	clrc
  9494  0CB5  0D47               	rlf	??___ftadd+1,w
  9495  0CB6  0D48               	rlf	??___ftadd+2,w
  9496  0CB7  00C9               	movwf	??___ftadd+3
  9497  0CB8  0849               	movf	??___ftadd+3,w
  9498  0CB9  00CB               	movwf	___ftadd@exp2
  9499  0CBA  084C               	movf	___ftadd@exp1,w
  9500  0CBB  1903               	btfsc	3,2
  9501  0CBC  2CC9               	goto	l2270
  9502  0CBD  084B               	movf	___ftadd@exp2,w
  9503  0CBE  024C               	subwf	___ftadd@exp1,w
  9504  0CBF  1803               	skipnc
  9505  0CC0  2CD0               	goto	l2274
  9506  0CC1  034C               	decf	___ftadd@exp1,w
  9507  0CC2  3AFF               	xorlw	255
  9508  0CC3  074B               	addwf	___ftadd@exp2,w
  9509  0CC4  00C6               	movwf	??___ftadd
  9510  0CC5  3019               	movlw	25
  9511  0CC6  0246               	subwf	??___ftadd,w
  9512  0CC7  1C03               	skipc
  9513  0CC8  2CD0               	goto	l2274
  9514  0CC9                     l2270:	
  9515  0CC9  0843               	movf	___ftadd@f2,w
  9516  0CCA  00C0               	movwf	?___ftadd
  9517  0CCB  0844               	movf	___ftadd@f2+1,w
  9518  0CCC  00C1               	movwf	?___ftadd+1
  9519  0CCD  0845               	movf	___ftadd@f2+2,w
  9520  0CCE  00C2               	movwf	?___ftadd+2
  9521  0CCF  0008               	return
  9522  0CD0                     l2274:	
  9523  0CD0  084B               	movf	___ftadd@exp2,w
  9524  0CD1  1903               	btfsc	3,2
  9525  0CD2  0008               	return
  9526  0CD3  084C               	movf	___ftadd@exp1,w
  9527  0CD4  024B               	subwf	___ftadd@exp2,w
  9528  0CD5  1803               	skipnc
  9529  0CD6  2CDF               	goto	l2280
  9530  0CD7  034B               	decf	___ftadd@exp2,w
  9531  0CD8  3AFF               	xorlw	255
  9532  0CD9  074C               	addwf	___ftadd@exp1,w
  9533  0CDA  00C6               	movwf	??___ftadd
  9534  0CDB  3019               	movlw	25
  9535  0CDC  0246               	subwf	??___ftadd,w
  9536  0CDD  1803               	btfsc	3,0
  9537  0CDE  0008               	return
  9538  0CDF                     l2280:	
  9539  0CDF  3006               	movlw	6
  9540  0CE0  00C6               	movwf	??___ftadd
  9541  0CE1  0846               	movf	??___ftadd,w
  9542  0CE2  00CA               	movwf	___ftadd@sign
  9543  0CE3  1BC2               	btfsc	___ftadd@f1+2,7
  9544  0CE4  17CA               	bsf	___ftadd@sign,7
  9545  0CE5  1BC5               	btfsc	___ftadd@f2+2,7
  9546  0CE6  174A               	bsf	___ftadd@sign,6
  9547  0CE7  17C1               	bsf	___ftadd@f1+1,7
  9548  0CE8  30FF               	movlw	255
  9549  0CE9  05C0               	andwf	___ftadd@f1,f
  9550  0CEA  30FF               	movlw	255
  9551  0CEB  05C1               	andwf	___ftadd@f1+1,f
  9552  0CEC  3000               	movlw	0
  9553  0CED  05C2               	andwf	___ftadd@f1+2,f
  9554  0CEE  17C4               	bsf	___ftadd@f2+1,7
  9555  0CEF  30FF               	movlw	255
  9556  0CF0  05C3               	andwf	___ftadd@f2,f
  9557  0CF1  30FF               	movlw	255
  9558  0CF2  05C4               	andwf	___ftadd@f2+1,f
  9559  0CF3  3000               	movlw	0
  9560  0CF4  05C5               	andwf	___ftadd@f2+2,f
  9561  0CF5  084B               	movf	___ftadd@exp2,w
  9562  0CF6  024C               	subwf	___ftadd@exp1,w
  9563  0CF7  1803               	skipnc
  9564  0CF8  2D1B               	goto	l2302
  9565  0CF9                     l2292:	
  9566  0CF9  3001               	movlw	1
  9567  0CFA                     u2285:	
  9568  0CFA  35C3               	lslf	___ftadd@f2,f
  9569  0CFB  0DC4               	rlf	___ftadd@f2+1,f
  9570  0CFC  0DC5               	rlf	___ftadd@f2+2,f
  9571  0CFD  0B89               	decfsz	9,f
  9572  0CFE  2CFA               	goto	u2285
  9573  0CFF  3001               	movlw	1
  9574  0D00  02CB               	subwf	___ftadd@exp2,f
  9575  0D01  084B               	movf	___ftadd@exp2,w
  9576  0D02  064C               	xorwf	___ftadd@exp1,w
  9577  0D03  1903               	skipnz
  9578  0D04  2D16               	goto	l2300
  9579  0D05  3001               	movlw	1
  9580  0D06  02CA               	subwf	___ftadd@sign,f
  9581  0D07  084A               	movf	___ftadd@sign,w
  9582  0D08  3907               	andlw	7
  9583  0D09  1903               	btfsc	3,2
  9584  0D0A  2D16               	goto	l2300
  9585  0D0B  2CF9               	goto	l2292
  9586  0D0C                     l2298:	
  9587  0D0C  3001               	movlw	1
  9588  0D0D                     u2315:	
  9589  0D0D  36C2               	lsrf	___ftadd@f1+2,f
  9590  0D0E  0CC1               	rrf	___ftadd@f1+1,f
  9591  0D0F  0CC0               	rrf	___ftadd@f1,f
  9592  0D10  0B89               	decfsz	9,f
  9593  0D11  2D0D               	goto	u2315
  9594  0D12  3001               	movlw	1
  9595  0D13  00C6               	movwf	??___ftadd
  9596  0D14  0846               	movf	??___ftadd,w
  9597  0D15  07CC               	addwf	___ftadd@exp1,f
  9598  0D16                     l2300:	
  9599  0D16  084C               	movf	___ftadd@exp1,w
  9600  0D17  064B               	xorwf	___ftadd@exp2,w
  9601  0D18  1903               	btfsc	3,2
  9602  0D19  2D40               	goto	l774
  9603  0D1A  2D0C               	goto	l2298
  9604  0D1B                     l2302:	
  9605  0D1B  084C               	movf	___ftadd@exp1,w
  9606  0D1C  024B               	subwf	___ftadd@exp2,w
  9607  0D1D  1803               	skipnc
  9608  0D1E  2D40               	goto	l774
  9609  0D1F                     l2304:	
  9610  0D1F  3001               	movlw	1
  9611  0D20                     u2345:	
  9612  0D20  35C0               	lslf	___ftadd@f1,f
  9613  0D21  0DC1               	rlf	___ftadd@f1+1,f
  9614  0D22  0DC2               	rlf	___ftadd@f1+2,f
  9615  0D23  0B89               	decfsz	9,f
  9616  0D24  2D20               	goto	u2345
  9617  0D25  3001               	movlw	1
  9618  0D26  02CC               	subwf	___ftadd@exp1,f
  9619  0D27  084B               	movf	___ftadd@exp2,w
  9620  0D28  064C               	xorwf	___ftadd@exp1,w
  9621  0D29  1903               	skipnz
  9622  0D2A  2D3C               	goto	l2312
  9623  0D2B  3001               	movlw	1
  9624  0D2C  02CA               	subwf	___ftadd@sign,f
  9625  0D2D  084A               	movf	___ftadd@sign,w
  9626  0D2E  3907               	andlw	7
  9627  0D2F  1903               	btfsc	3,2
  9628  0D30  2D3C               	goto	l2312
  9629  0D31  2D1F               	goto	l2304
  9630  0D32                     l2310:	
  9631  0D32  3001               	movlw	1
  9632  0D33                     u2375:	
  9633  0D33  36C5               	lsrf	___ftadd@f2+2,f
  9634  0D34  0CC4               	rrf	___ftadd@f2+1,f
  9635  0D35  0CC3               	rrf	___ftadd@f2,f
  9636  0D36  0B89               	decfsz	9,f
  9637  0D37  2D33               	goto	u2375
  9638  0D38  3001               	movlw	1
  9639  0D39  00C6               	movwf	??___ftadd
  9640  0D3A  0846               	movf	??___ftadd,w
  9641  0D3B  07CB               	addwf	___ftadd@exp2,f
  9642  0D3C                     l2312:	
  9643  0D3C  084C               	movf	___ftadd@exp1,w
  9644  0D3D  064B               	xorwf	___ftadd@exp2,w
  9645  0D3E  1D03               	skipz
  9646  0D3F  2D32               	goto	l2310
  9647  0D40                     l774:	
  9648  0D40  1FCA               	btfss	___ftadd@sign,7
  9649  0D41  2D52               	goto	l2316
  9650  0D42  30FF               	movlw	255
  9651  0D43  06C0               	xorwf	___ftadd@f1,f
  9652  0D44  30FF               	movlw	255
  9653  0D45  06C1               	xorwf	___ftadd@f1+1,f
  9654  0D46  30FF               	movlw	255
  9655  0D47  06C2               	xorwf	___ftadd@f1+2,f
  9656  0D48  3001               	movlw	1
  9657  0D49  07C0               	addwf	___ftadd@f1,f
  9658  0D4A  3000               	movlw	0
  9659  0D4B  1803               	skipnc
  9660  0D4C  3001               	movlw	1
  9661  0D4D  07C1               	addwf	___ftadd@f1+1,f
  9662  0D4E  3000               	movlw	0
  9663  0D4F  1803               	skipnc
  9664  0D50  3001               	movlw	1
  9665  0D51  07C2               	addwf	___ftadd@f1+2,f
  9666  0D52                     l2316:	
  9667  0D52  1F4A               	btfss	___ftadd@sign,6
  9668  0D53  2D64               	goto	l2320
  9669  0D54  30FF               	movlw	255
  9670  0D55  06C3               	xorwf	___ftadd@f2,f
  9671  0D56  30FF               	movlw	255
  9672  0D57  06C4               	xorwf	___ftadd@f2+1,f
  9673  0D58  30FF               	movlw	255
  9674  0D59  06C5               	xorwf	___ftadd@f2+2,f
  9675  0D5A  3001               	movlw	1
  9676  0D5B  07C3               	addwf	___ftadd@f2,f
  9677  0D5C  3000               	movlw	0
  9678  0D5D  1803               	skipnc
  9679  0D5E  3001               	movlw	1
  9680  0D5F  07C4               	addwf	___ftadd@f2+1,f
  9681  0D60  3000               	movlw	0
  9682  0D61  1803               	skipnc
  9683  0D62  3001               	movlw	1
  9684  0D63  07C5               	addwf	___ftadd@f2+2,f
  9685  0D64                     l2320:	
  9686  0D64  01CA               	clrf	___ftadd@sign
  9687  0D65  0840               	movf	___ftadd@f1,w
  9688  0D66  07C3               	addwf	___ftadd@f2,f
  9689  0D67  0841               	movf	___ftadd@f1+1,w
  9690  0D68  3DC4               	addwfc	___ftadd@f2+1,f
  9691  0D69  0842               	movf	___ftadd@f1+2,w
  9692  0D6A  3DC5               	addwfc	___ftadd@f2+2,f
  9693  0D6B  1FC5               	btfss	___ftadd@f2+2,7
  9694  0D6C  2D7F               	goto	l2330
  9695  0D6D  30FF               	movlw	255
  9696  0D6E  06C3               	xorwf	___ftadd@f2,f
  9697  0D6F  30FF               	movlw	255
  9698  0D70  06C4               	xorwf	___ftadd@f2+1,f
  9699  0D71  30FF               	movlw	255
  9700  0D72  06C5               	xorwf	___ftadd@f2+2,f
  9701  0D73  3001               	movlw	1
  9702  0D74  07C3               	addwf	___ftadd@f2,f
  9703  0D75  3000               	movlw	0
  9704  0D76  1803               	skipnc
  9705  0D77  3001               	movlw	1
  9706  0D78  07C4               	addwf	___ftadd@f2+1,f
  9707  0D79  3000               	movlw	0
  9708  0D7A  1803               	skipnc
  9709  0D7B  3001               	movlw	1
  9710  0D7C  07C5               	addwf	___ftadd@f2+2,f
  9711  0D7D  01CA               	clrf	___ftadd@sign
  9712  0D7E  0ACA               	incf	___ftadd@sign,f
  9713  0D7F                     l2330:	
  9714  0D7F  0843               	movf	___ftadd@f2,w
  9715  0D80  00F0               	movwf	___ftpack@arg
  9716  0D81  0844               	movf	___ftadd@f2+1,w
  9717  0D82  00F1               	movwf	___ftpack@arg+1
  9718  0D83  0845               	movf	___ftadd@f2+2,w
  9719  0D84  00F2               	movwf	___ftpack@arg+2
  9720  0D85  084C               	movf	___ftadd@exp1,w
  9721  0D86  00C6               	movwf	??___ftadd
  9722  0D87  0846               	movf	??___ftadd,w
  9723  0D88  00F3               	movwf	___ftpack@exp
  9724  0D89  084A               	movf	___ftadd@sign,w
  9725  0D8A  00C7               	movwf	??___ftadd+1
  9726  0D8B  0847               	movf	??___ftadd+1,w
  9727  0D8C  00F4               	movwf	___ftpack@sign
  9728  0D8D  3180  2017         	fcall	___ftpack
  9729  0D8F  0870               	movf	?___ftpack,w
  9730  0D90  0020               	movlb	0	; select bank0
  9731  0D91  00C0               	movwf	?___ftadd
  9732  0D92  0871               	movf	?___ftpack+1,w
  9733  0D93  00C1               	movwf	?___ftadd+1
  9734  0D94  0872               	movf	?___ftpack+2,w
  9735  0D95  00C2               	movwf	?___ftadd+2
  9736  0D96  0008               	return
  9737  0D97                     __end_of___ftadd:	
  9738                           
  9739                           	psect	text9
  9740  0EB4                     __ptext9:	
  9741 ;; *************** function _readIAnalog *****************
  9742 ;; Defined at:
  9743 ;;		line 77 in file "adc.c"
  9744 ;; Parameters:    Size  Location     Type
  9745 ;;  channel         2    6[BANK0 ] unsigned int 
  9746 ;; Auto vars:     Size  Location     Type
  9747 ;;  value           2   28[BANK0 ] int 
  9748 ;;  analog_chann    2   26[BANK0 ] unsigned int 
  9749 ;; Return value:  Size  Location     Type
  9750 ;;                  2    6[BANK0 ] int 
  9751 ;; Registers used:
  9752 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9753 ;; Tracked objects:
  9754 ;;		On entry : 0/0
  9755 ;;		On exit  : 0/0
  9756 ;;		Unchanged: 0/0
  9757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9758 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9759 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9760 ;;      Temps:          0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9761 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9762 ;;Total ram usage:       24 bytes
  9763 ;; Hardware stack levels used:    1
  9764 ;; Hardware stack levels required when called:    1
  9765 ;; This function calls:
  9766 ;;		_ADCRead
  9767 ;;		___aldiv
  9768 ;;		___wmul
  9769 ;; This function is called by:
  9770 ;;		_main
  9771 ;; This function uses a non-reentrant model
  9772 ;;
  9773                           
  9774                           
  9775                           ;psect for function _readIAnalog
  9776  0EB4                     _readIAnalog:	
  9777                           
  9778                           ;adc.c: 79: int16_t value;
  9779                           ;adc.c: 81: uint16_t analog_channel = channels[channel];
  9780                           
  9781                           ;incstack = 0
  9782                           ; Regs used in _readIAnalog: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9783  0EB4  0020               	movlb	0	; select bank0
  9784  0EB5  3526               	lslf	readIAnalog@channel,w
  9785  0EB6  3E4B               	addlw	(low (_channels| (0+256)))& (0+255)
  9786  0EB7  0086               	movwf	6
  9787  0EB8  3001               	movlw	1	; select bank2/3
  9788  0EB9  0087               	movwf	7
  9789  0EBA  3F40               	moviw [0]fsr1
  9790  0EBB  00BA               	movwf	readIAnalog@analog_channel
  9791  0EBC  3F41               	moviw [1]fsr1
  9792  0EBD  00BB               	movwf	readIAnalog@analog_channel+1
  9793                           
  9794                           ;adc.c: 83: value = ADCRead(analog_channel);
  9795  0EBE  083A               	movf	readIAnalog@analog_channel,w
  9796  0EBF  3192  22B7  318E   	fcall	_ADCRead
  9797  0EC2  0871               	movf	?_ADCRead+1,w
  9798  0EC3  0020               	movlb	0	; select bank0
  9799  0EC4  00BD               	movwf	readIAnalog@value+1
  9800  0EC5  0870               	movf	?_ADCRead,w
  9801  0EC6  00BC               	movwf	readIAnalog@value
  9802                           
  9803                           ;adc.c: 85: totals[channel] = totals[channel]-samples[channel][sampleIndex];
  9804  0EC7  0826               	movf	readIAnalog@channel,w
  9805  0EC8  00A8               	movwf	??_readIAnalog
  9806  0EC9  3001               	movlw	1
  9807  0ECA                     u3145:	
  9808  0ECA  35A8               	lslf	??_readIAnalog,f
  9809  0ECB  3EFF               	addlw	-1
  9810  0ECC  1D03               	skipz
  9811  0ECD  2ECA               	goto	u3145
  9812  0ECE  3528               	lslf	??_readIAnalog,w
  9813  0ECF  3E20               	addlw	(low (_totals| (0+256)))& (0+255)
  9814  0ED0  0086               	movwf	6
  9815  0ED1  3001               	movlw	1	; select bank2/3
  9816  0ED2  0087               	movwf	7
  9817  0ED3  3F40               	moviw [0]fsr1
  9818  0ED4  00A9               	movwf	??_readIAnalog+1
  9819  0ED5  3F41               	moviw [1]fsr1
  9820  0ED6  00AA               	movwf	??_readIAnalog+2
  9821  0ED7  3F42               	moviw [2]fsr1
  9822  0ED8  00AB               	movwf	??_readIAnalog+3
  9823  0ED9  3F43               	moviw [3]fsr1
  9824  0EDA  00AC               	movwf	??_readIAnalog+4
  9825  0EDB  0021               	movlb	1	; select bank1
  9826  0EDC  0849               	movf	(_sampleIndex+1)^(0+128),w
  9827  0EDD  0020               	movlb	0	; select bank0
  9828  0EDE  00AE               	movwf	??_readIAnalog+6
  9829  0EDF  0021               	movlb	1	; select bank1
  9830  0EE0  0848               	movf	_sampleIndex^(0+128),w
  9831  0EE1  0020               	movlb	0	; select bank0
  9832  0EE2  00AD               	movwf	??_readIAnalog+5
  9833  0EE3  35AD               	lslf	??_readIAnalog+5,f
  9834  0EE4  0DAE               	rlf	??_readIAnalog+6,f
  9835  0EE5  0827               	movf	readIAnalog@channel+1,w
  9836  0EE6  00FA               	movwf	___wmul@multiplier+1
  9837  0EE7  0826               	movf	readIAnalog@channel,w
  9838  0EE8  00F9               	movwf	___wmul@multiplier
  9839  0EE9  3096               	movlw	150
  9840  0EEA  00FB               	movwf	___wmul@multiplicand
  9841  0EEB  3000               	movlw	0
  9842  0EEC  00FC               	movwf	___wmul@multiplicand+1
  9843  0EED  3192  22F9  318E   	fcall	___wmul
  9844  0EF0  3098               	movlw	152
  9845  0EF1  0020               	movlb	0	; select bank0
  9846  0EF2  00AF               	movwf	??_readIAnalog+7
  9847  0EF3  3021               	movlw	33
  9848  0EF4  00B0               	movwf	??_readIAnalog+8
  9849  0EF5  0879               	movf	?___wmul,w
  9850  0EF6  072F               	addwf	??_readIAnalog+7,w
  9851  0EF7  00B1               	movwf	??_readIAnalog+9
  9852  0EF8  087A               	movf	?___wmul+1,w
  9853  0EF9  3D30               	addwfc	??_readIAnalog+8,w
  9854  0EFA  00B2               	movwf	??_readIAnalog+10
  9855  0EFB  082D               	movf	??_readIAnalog+5,w
  9856  0EFC  0731               	addwf	??_readIAnalog+9,w
  9857  0EFD  0086               	movwf	6
  9858  0EFE  082E               	movf	??_readIAnalog+6,w
  9859  0EFF  3D32               	addwfc	??_readIAnalog+10,w
  9860  0F00  0087               	movwf	7
  9861  0F01  3F40               	moviw [0]fsr1
  9862  0F02  00B3               	movwf	??_readIAnalog+11
  9863  0F03  3F41               	moviw [1]fsr1
  9864  0F04  00B4               	movwf	??_readIAnalog+12
  9865  0F05  0833               	movf	??_readIAnalog+11,w
  9866  0F06  00B5               	movwf	??_readIAnalog+13
  9867  0F07  0834               	movf	??_readIAnalog+12,w
  9868  0F08  00B6               	movwf	??_readIAnalog+14
  9869  0F09  3000               	movlw	0
  9870  0F0A  1BB6               	btfsc	??_readIAnalog+14,7
  9871  0F0B  30FF               	movlw	255
  9872  0F0C  00B7               	movwf	??_readIAnalog+15
  9873  0F0D  00B8               	movwf	??_readIAnalog+16
  9874  0F0E  09B5               	comf	??_readIAnalog+13,f
  9875  0F0F  09B6               	comf	??_readIAnalog+14,f
  9876  0F10  09B7               	comf	??_readIAnalog+15,f
  9877  0F11  09B8               	comf	??_readIAnalog+16,f
  9878  0F12  0AB5               	incf	??_readIAnalog+13,f
  9879  0F13  1903               	skipnz
  9880  0F14  0AB6               	incf	??_readIAnalog+14,f
  9881  0F15  1903               	skipnz
  9882  0F16  0AB7               	incf	??_readIAnalog+15,f
  9883  0F17  1903               	skipnz
  9884  0F18  0AB8               	incf	??_readIAnalog+16,f
  9885  0F19  0835               	movf	??_readIAnalog+13,w
  9886  0F1A  07A9               	addwf	??_readIAnalog+1,f
  9887  0F1B  0836               	movf	??_readIAnalog+14,w
  9888  0F1C  3DAA               	addwfc	??_readIAnalog+2,f
  9889  0F1D  0837               	movf	??_readIAnalog+15,w
  9890  0F1E  3DAB               	addwfc	??_readIAnalog+3,f
  9891  0F1F  0838               	movf	??_readIAnalog+16,w
  9892  0F20  3DAC               	addwfc	??_readIAnalog+4,f
  9893  0F21  0826               	movf	readIAnalog@channel,w
  9894  0F22  00B9               	movwf	??_readIAnalog+17
  9895  0F23  3001               	movlw	1
  9896  0F24                     u3155:	
  9897  0F24  35B9               	lslf	??_readIAnalog+17,f
  9898  0F25  3EFF               	addlw	-1
  9899  0F26  1D03               	skipz
  9900  0F27  2F24               	goto	u3155
  9901  0F28  3539               	lslf	??_readIAnalog+17,w
  9902  0F29  3E20               	addlw	(low (_totals| (0+256)))& (0+255)
  9903  0F2A  0086               	movwf	6
  9904  0F2B  3001               	movlw	1	; select bank2/3
  9905  0F2C  0087               	movwf	7
  9906  0F2D  0829               	movf	??_readIAnalog+1,w
  9907  0F2E  3FC0               	movwi [0]fsr1
  9908  0F2F  082A               	movf	??_readIAnalog+2,w
  9909  0F30  3FC1               	movwi [1]fsr1
  9910  0F31  082B               	movf	??_readIAnalog+3,w
  9911  0F32  3FC2               	movwi [2]fsr1
  9912  0F33  082C               	movf	??_readIAnalog+4,w
  9913  0F34  3FC3               	movwi [3]fsr1
  9914                           
  9915                           ;adc.c: 87: samples[channel][sampleIndex] = value;
  9916  0F35  0021               	movlb	1	; select bank1
  9917  0F36  0849               	movf	(_sampleIndex+1)^(0+128),w
  9918  0F37  0020               	movlb	0	; select bank0
  9919  0F38  00A9               	movwf	??_readIAnalog+1
  9920  0F39  0021               	movlb	1	; select bank1
  9921  0F3A  0848               	movf	_sampleIndex^(0+128),w
  9922  0F3B  0020               	movlb	0	; select bank0
  9923  0F3C  00A8               	movwf	??_readIAnalog
  9924  0F3D  35A8               	lslf	??_readIAnalog,f
  9925  0F3E  0DA9               	rlf	??_readIAnalog+1,f
  9926  0F3F  0827               	movf	readIAnalog@channel+1,w
  9927  0F40  00FA               	movwf	___wmul@multiplier+1
  9928  0F41  0826               	movf	readIAnalog@channel,w
  9929  0F42  00F9               	movwf	___wmul@multiplier
  9930  0F43  3096               	movlw	150
  9931  0F44  00FB               	movwf	___wmul@multiplicand
  9932  0F45  3000               	movlw	0
  9933  0F46  00FC               	movwf	___wmul@multiplicand+1
  9934  0F47  3192  22F9  318E   	fcall	___wmul
  9935  0F4A  3098               	movlw	152
  9936  0F4B  0020               	movlb	0	; select bank0
  9937  0F4C  00AA               	movwf	??_readIAnalog+2
  9938  0F4D  3021               	movlw	33
  9939  0F4E  00AB               	movwf	??_readIAnalog+3
  9940  0F4F  0879               	movf	?___wmul,w
  9941  0F50  072A               	addwf	??_readIAnalog+2,w
  9942  0F51  00AC               	movwf	??_readIAnalog+4
  9943  0F52  087A               	movf	?___wmul+1,w
  9944  0F53  3D2B               	addwfc	??_readIAnalog+3,w
  9945  0F54  00AD               	movwf	??_readIAnalog+5
  9946  0F55  0828               	movf	??_readIAnalog,w
  9947  0F56  072C               	addwf	??_readIAnalog+4,w
  9948  0F57  0086               	movwf	6
  9949  0F58  0829               	movf	??_readIAnalog+1,w
  9950  0F59  3D2D               	addwfc	??_readIAnalog+5,w
  9951  0F5A  0087               	movwf	7
  9952  0F5B  083C               	movf	readIAnalog@value,w
  9953  0F5C  3FC0               	movwi [0]fsr1
  9954  0F5D  083D               	movf	readIAnalog@value+1,w
  9955  0F5E  3FC1               	movwi [1]fsr1
  9956                           
  9957                           ;adc.c: 89: totals[channel] = totals[channel]+samples[channel][sampleIndex];
  9958  0F5F  0826               	movf	readIAnalog@channel,w
  9959  0F60  00A8               	movwf	??_readIAnalog
  9960  0F61  3001               	movlw	1
  9961  0F62                     u3165:	
  9962  0F62  35A8               	lslf	??_readIAnalog,f
  9963  0F63  3EFF               	addlw	-1
  9964  0F64  1D03               	skipz
  9965  0F65  2F62               	goto	u3165
  9966  0F66  3528               	lslf	??_readIAnalog,w
  9967  0F67  3E20               	addlw	(low (_totals| (0+256)))& (0+255)
  9968  0F68  0086               	movwf	6
  9969  0F69  3001               	movlw	1	; select bank2/3
  9970  0F6A  0087               	movwf	7
  9971  0F6B  3F40               	moviw [0]fsr1
  9972  0F6C  00A9               	movwf	??_readIAnalog+1
  9973  0F6D  3F41               	moviw [1]fsr1
  9974  0F6E  00AA               	movwf	??_readIAnalog+2
  9975  0F6F  3F42               	moviw [2]fsr1
  9976  0F70  00AB               	movwf	??_readIAnalog+3
  9977  0F71  3F43               	moviw [3]fsr1
  9978  0F72  00AC               	movwf	??_readIAnalog+4
  9979  0F73  0021               	movlb	1	; select bank1
  9980  0F74  0849               	movf	(_sampleIndex+1)^(0+128),w
  9981  0F75  0020               	movlb	0	; select bank0
  9982  0F76  00AE               	movwf	??_readIAnalog+6
  9983  0F77  0021               	movlb	1	; select bank1
  9984  0F78  0848               	movf	_sampleIndex^(0+128),w
  9985  0F79  0020               	movlb	0	; select bank0
  9986  0F7A  00AD               	movwf	??_readIAnalog+5
  9987  0F7B  35AD               	lslf	??_readIAnalog+5,f
  9988  0F7C  0DAE               	rlf	??_readIAnalog+6,f
  9989  0F7D  0827               	movf	readIAnalog@channel+1,w
  9990  0F7E  00FA               	movwf	___wmul@multiplier+1
  9991  0F7F  0826               	movf	readIAnalog@channel,w
  9992  0F80  00F9               	movwf	___wmul@multiplier
  9993  0F81  3096               	movlw	150
  9994  0F82  00FB               	movwf	___wmul@multiplicand
  9995  0F83  3000               	movlw	0
  9996  0F84  00FC               	movwf	___wmul@multiplicand+1
  9997  0F85  3192  22F9  318E   	fcall	___wmul
  9998  0F88  3098               	movlw	152
  9999  0F89  0020               	movlb	0	; select bank0
 10000  0F8A  00AF               	movwf	??_readIAnalog+7
 10001  0F8B  3021               	movlw	33
 10002  0F8C  00B0               	movwf	??_readIAnalog+8
 10003  0F8D  0879               	movf	?___wmul,w
 10004  0F8E  072F               	addwf	??_readIAnalog+7,w
 10005  0F8F  00B1               	movwf	??_readIAnalog+9
 10006  0F90  087A               	movf	?___wmul+1,w
 10007  0F91  3D30               	addwfc	??_readIAnalog+8,w
 10008  0F92  00B2               	movwf	??_readIAnalog+10
 10009  0F93  082D               	movf	??_readIAnalog+5,w
 10010  0F94  0731               	addwf	??_readIAnalog+9,w
 10011  0F95  0086               	movwf	6
 10012  0F96  082E               	movf	??_readIAnalog+6,w
 10013  0F97  3D32               	addwfc	??_readIAnalog+10,w
 10014  0F98  0087               	movwf	7
 10015  0F99  3F40               	moviw [0]fsr1
 10016  0F9A  00B3               	movwf	??_readIAnalog+11
 10017  0F9B  3F41               	moviw [1]fsr1
 10018  0F9C  00B4               	movwf	??_readIAnalog+12
 10019  0F9D  0833               	movf	??_readIAnalog+11,w
 10020  0F9E  00B5               	movwf	??_readIAnalog+13
 10021  0F9F  0834               	movf	??_readIAnalog+12,w
 10022  0FA0  00B6               	movwf	??_readIAnalog+14
 10023  0FA1  3000               	movlw	0
 10024  0FA2  1BB6               	btfsc	??_readIAnalog+14,7
 10025  0FA3  30FF               	movlw	255
 10026  0FA4  00B7               	movwf	??_readIAnalog+15
 10027  0FA5  00B8               	movwf	??_readIAnalog+16
 10028  0FA6  0835               	movf	??_readIAnalog+13,w
 10029  0FA7  07A9               	addwf	??_readIAnalog+1,f
 10030  0FA8  0836               	movf	??_readIAnalog+14,w
 10031  0FA9  3DAA               	addwfc	??_readIAnalog+2,f
 10032  0FAA  0837               	movf	??_readIAnalog+15,w
 10033  0FAB  3DAB               	addwfc	??_readIAnalog+3,f
 10034  0FAC  0838               	movf	??_readIAnalog+16,w
 10035  0FAD  3DAC               	addwfc	??_readIAnalog+4,f
 10036  0FAE  0826               	movf	readIAnalog@channel,w
 10037  0FAF  00B9               	movwf	??_readIAnalog+17
 10038  0FB0  3001               	movlw	1
 10039  0FB1                     u3175:	
 10040  0FB1  35B9               	lslf	??_readIAnalog+17,f
 10041  0FB2  3EFF               	addlw	-1
 10042  0FB3  1D03               	skipz
 10043  0FB4  2FB1               	goto	u3175
 10044  0FB5  3539               	lslf	??_readIAnalog+17,w
 10045  0FB6  3E20               	addlw	(low (_totals| (0+256)))& (0+255)
 10046  0FB7  0086               	movwf	6
 10047  0FB8  3001               	movlw	1	; select bank2/3
 10048  0FB9  0087               	movwf	7
 10049  0FBA  0829               	movf	??_readIAnalog+1,w
 10050  0FBB  3FC0               	movwi [0]fsr1
 10051  0FBC  082A               	movf	??_readIAnalog+2,w
 10052  0FBD  3FC1               	movwi [1]fsr1
 10053  0FBE  082B               	movf	??_readIAnalog+3,w
 10054  0FBF  3FC2               	movwi [2]fsr1
 10055  0FC0  082C               	movf	??_readIAnalog+4,w
 10056  0FC1  3FC3               	movwi [3]fsr1
 10057                           
 10058                           ;adc.c: 91: if(channel>=(4-1))
 10059  0FC2  3000               	movlw	0
 10060  0FC3  0227               	subwf	readIAnalog@channel+1,w
 10061  0FC4  3003               	movlw	3
 10062  0FC5  1903               	skipnz
 10063  0FC6  0226               	subwf	readIAnalog@channel,w
 10064  0FC7  1C03               	skipc
 10065  0FC8  2FD7               	goto	l2856
 10066                           
 10067                           ;adc.c: 92: {
 10068                           ;adc.c: 93: sampleIndex+=1;
 10069  0FC9  3001               	movlw	1
 10070  0FCA  0021               	movlb	1	; select bank1
 10071  0FCB  07C8               	addwf	_sampleIndex^(0+128),f
 10072  0FCC  3000               	movlw	0
 10073  0FCD  3DC9               	addwfc	(_sampleIndex+1)^(0+128),f
 10074                           
 10075                           ;adc.c: 94: if(sampleIndex >= 75)sampleIndex = 0;
 10076  0FCE  3000               	movlw	0
 10077  0FCF  0249               	subwf	(_sampleIndex+1)^(0+128),w
 10078  0FD0  304B               	movlw	75
 10079  0FD1  1903               	skipnz
 10080  0FD2  0248               	subwf	_sampleIndex^(0+128),w
 10081  0FD3  1C03               	skipc
 10082  0FD4  2FD7               	goto	l2856
 10083  0FD5  01C8               	clrf	_sampleIndex^(0+128)
 10084  0FD6  01C9               	clrf	(_sampleIndex+1)^(0+128)
 10085  0FD7                     l2856:	
 10086                           
 10087                           ;adc.c: 95: }
 10088                           ;adc.c: 97: value = totals[channel]/75;
 10089  0FD7  3000               	movlw	0
 10090  0FD8  00F3               	movwf	___aldiv@divisor+3
 10091  0FD9  3000               	movlw	0
 10092  0FDA  00F2               	movwf	___aldiv@divisor+2
 10093  0FDB  3000               	movlw	0
 10094  0FDC  00F1               	movwf	___aldiv@divisor+1
 10095  0FDD  304B               	movlw	75
 10096  0FDE  00F0               	movwf	___aldiv@divisor
 10097  0FDF  0020               	movlb	0	; select bank0
 10098  0FE0  0826               	movf	readIAnalog@channel,w
 10099  0FE1  00A8               	movwf	??_readIAnalog
 10100  0FE2  3001               	movlw	1
 10101  0FE3                     u3205:	
 10102  0FE3  35A8               	lslf	??_readIAnalog,f
 10103  0FE4  3EFF               	addlw	-1
 10104  0FE5  1D03               	skipz
 10105  0FE6  2FE3               	goto	u3205
 10106  0FE7  3528               	lslf	??_readIAnalog,w
 10107  0FE8  3E20               	addlw	(low (_totals| (0+256)))& (0+255)
 10108  0FE9  0086               	movwf	6
 10109  0FEA  3001               	movlw	1	; select bank2/3
 10110  0FEB  0087               	movwf	7
 10111  0FEC  3F40               	moviw [0]fsr1
 10112  0FED  00F4               	movwf	___aldiv@dividend
 10113  0FEE  3F41               	moviw [1]fsr1
 10114  0FEF  00F5               	movwf	___aldiv@dividend+1
 10115  0FF0  3F42               	moviw [2]fsr1
 10116  0FF1  00F6               	movwf	___aldiv@dividend+2
 10117  0FF2  3F43               	moviw [3]fsr1
 10118  0FF3  00F7               	movwf	___aldiv@dividend+3
 10119  0FF4  3197  277E         	fcall	___aldiv
 10120  0FF6  0871               	movf	?___aldiv+1,w
 10121  0FF7  0020               	movlb	0	; select bank0
 10122  0FF8  00BD               	movwf	readIAnalog@value+1
 10123  0FF9  0870               	movf	?___aldiv,w
 10124  0FFA  00BC               	movwf	readIAnalog@value
 10125                           
 10126                           ;adc.c: 99: return value;
 10127  0FFB  083D               	movf	readIAnalog@value+1,w
 10128  0FFC  00A7               	movwf	?_readIAnalog+1
 10129  0FFD  083C               	movf	readIAnalog@value,w
 10130  0FFE  00A6               	movwf	?_readIAnalog
 10131  0FFF  0008               	return
 10132  1000                     __end_of_readIAnalog:	
 10133                           
 10134                           	psect	text10
 10135  177E                     __ptext10:	
 10136 ;; *************** function ___aldiv *****************
 10137 ;; Defined at:
 10138 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\aldiv.c"
 10139 ;; Parameters:    Size  Location     Type
 10140 ;;  divisor         4    0[COMMON] long 
 10141 ;;  dividend        4    4[COMMON] long 
 10142 ;; Auto vars:     Size  Location     Type
 10143 ;;  quotient        4    2[BANK0 ] long 
 10144 ;;  sign            1    1[BANK0 ] unsigned char 
 10145 ;;  counter         1    0[BANK0 ] unsigned char 
 10146 ;; Return value:  Size  Location     Type
 10147 ;;                  4    0[COMMON] long 
 10148 ;; Registers used:
 10149 ;;		wreg, status,2, status,0
 10150 ;; Tracked objects:
 10151 ;;		On entry : 0/0
 10152 ;;		On exit  : 0/0
 10153 ;;		Unchanged: 0/0
 10154 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10155 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10156 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10157 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10158 ;;      Totals:         9       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10159 ;;Total ram usage:       15 bytes
 10160 ;; Hardware stack levels used:    1
 10161 ;; This function calls:
 10162 ;;		Nothing
 10163 ;; This function is called by:
 10164 ;;		_readIAnalog
 10165 ;; This function uses a non-reentrant model
 10166 ;;
 10167                           
 10168                           
 10169                           ;psect for function ___aldiv
 10170  177E                     ___aldiv:	
 10171                           
 10172                           ;incstack = 0
 10173                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
 10174  177E  0020               	movlb	0	; select bank0
 10175  177F  01A1               	clrf	___aldiv@sign
 10176  1780  1FF3               	btfss	___aldiv@divisor+3,7
 10177  1781  2F8F               	goto	l637
 10178  1782  09F0               	comf	___aldiv@divisor,f
 10179  1783  09F1               	comf	___aldiv@divisor+1,f
 10180  1784  09F2               	comf	___aldiv@divisor+2,f
 10181  1785  09F3               	comf	___aldiv@divisor+3,f
 10182  1786  0AF0               	incf	___aldiv@divisor,f
 10183  1787  1903               	skipnz
 10184  1788  0AF1               	incf	___aldiv@divisor+1,f
 10185  1789  1903               	skipnz
 10186  178A  0AF2               	incf	___aldiv@divisor+2,f
 10187  178B  1903               	skipnz
 10188  178C  0AF3               	incf	___aldiv@divisor+3,f
 10189  178D  01A1               	clrf	___aldiv@sign
 10190  178E  0AA1               	incf	___aldiv@sign,f
 10191  178F                     l637:	
 10192  178F  1FF7               	btfss	___aldiv@dividend+3,7
 10193  1790  2FA0               	goto	l2654
 10194  1791  09F4               	comf	___aldiv@dividend,f
 10195  1792  09F5               	comf	___aldiv@dividend+1,f
 10196  1793  09F6               	comf	___aldiv@dividend+2,f
 10197  1794  09F7               	comf	___aldiv@dividend+3,f
 10198  1795  0AF4               	incf	___aldiv@dividend,f
 10199  1796  1903               	skipnz
 10200  1797  0AF5               	incf	___aldiv@dividend+1,f
 10201  1798  1903               	skipnz
 10202  1799  0AF6               	incf	___aldiv@dividend+2,f
 10203  179A  1903               	skipnz
 10204  179B  0AF7               	incf	___aldiv@dividend+3,f
 10205  179C  3001               	movlw	1
 10206  179D  00F8               	movwf	??___aldiv
 10207  179E  0878               	movf	??___aldiv,w
 10208  179F  06A1               	xorwf	___aldiv@sign,f
 10209  17A0                     l2654:	
 10210  17A0  3000               	movlw	0
 10211  17A1  00A5               	movwf	___aldiv@quotient+3
 10212  17A2  3000               	movlw	0
 10213  17A3  00A4               	movwf	___aldiv@quotient+2
 10214  17A4  3000               	movlw	0
 10215  17A5  00A3               	movwf	___aldiv@quotient+1
 10216  17A6  3000               	movlw	0
 10217  17A7  00A2               	movwf	___aldiv@quotient
 10218  17A8  0873               	movf	___aldiv@divisor+3,w
 10219  17A9  0472               	iorwf	___aldiv@divisor+2,w
 10220  17AA  0471               	iorwf	___aldiv@divisor+1,w
 10221  17AB  0470               	iorwf	___aldiv@divisor,w
 10222  17AC  1903               	skipnz
 10223  17AD  2FE9               	goto	l2676
 10224  17AE  01A0               	clrf	___aldiv@counter
 10225  17AF  0AA0               	incf	___aldiv@counter,f
 10226  17B0                     l2662:	
 10227  17B0  1BF3               	btfsc	___aldiv@divisor+3,7
 10228  17B1  2FBE               	goto	l2664
 10229  17B2  3001               	movlw	1
 10230  17B3                     u2725:	
 10231  17B3  35F0               	lslf	___aldiv@divisor,f
 10232  17B4  0DF1               	rlf	___aldiv@divisor+1,f
 10233  17B5  0DF2               	rlf	___aldiv@divisor+2,f
 10234  17B6  0DF3               	rlf	___aldiv@divisor+3,f
 10235  17B7  0B89               	decfsz	9,f
 10236  17B8  2FB3               	goto	u2725
 10237  17B9  3001               	movlw	1
 10238  17BA  00F8               	movwf	??___aldiv
 10239  17BB  0878               	movf	??___aldiv,w
 10240  17BC  07A0               	addwf	___aldiv@counter,f
 10241  17BD  2FB0               	goto	l2662
 10242  17BE                     l2664:	
 10243  17BE  3001               	movlw	1
 10244  17BF                     u2745:	
 10245  17BF  35A2               	lslf	___aldiv@quotient,f
 10246  17C0  0DA3               	rlf	___aldiv@quotient+1,f
 10247  17C1  0DA4               	rlf	___aldiv@quotient+2,f
 10248  17C2  0DA5               	rlf	___aldiv@quotient+3,f
 10249  17C3  0B89               	decfsz	9,f
 10250  17C4  2FBF               	goto	u2745
 10251  17C5  0873               	movf	___aldiv@divisor+3,w
 10252  17C6  0277               	subwf	___aldiv@dividend+3,w
 10253  17C7  1D03               	skipz
 10254  17C8  2FD3               	goto	u2755
 10255  17C9  0872               	movf	___aldiv@divisor+2,w
 10256  17CA  0276               	subwf	___aldiv@dividend+2,w
 10257  17CB  1D03               	skipz
 10258  17CC  2FD3               	goto	u2755
 10259  17CD  0871               	movf	___aldiv@divisor+1,w
 10260  17CE  0275               	subwf	___aldiv@dividend+1,w
 10261  17CF  1D03               	skipz
 10262  17D0  2FD3               	goto	u2755
 10263  17D1  0870               	movf	___aldiv@divisor,w
 10264  17D2  0274               	subwf	___aldiv@dividend,w
 10265  17D3                     u2755:	
 10266  17D3  1C03               	skipc
 10267  17D4  2FDE               	goto	l2672
 10268  17D5  0870               	movf	___aldiv@divisor,w
 10269  17D6  02F4               	subwf	___aldiv@dividend,f
 10270  17D7  0871               	movf	___aldiv@divisor+1,w
 10271  17D8  3BF5               	subwfb	___aldiv@dividend+1,f
 10272  17D9  0872               	movf	___aldiv@divisor+2,w
 10273  17DA  3BF6               	subwfb	___aldiv@dividend+2,f
 10274  17DB  0873               	movf	___aldiv@divisor+3,w
 10275  17DC  3BF7               	subwfb	___aldiv@dividend+3,f
 10276  17DD  1422               	bsf	___aldiv@quotient,0
 10277  17DE                     l2672:	
 10278  17DE  3001               	movlw	1
 10279  17DF                     u2765:	
 10280  17DF  36F3               	lsrf	___aldiv@divisor+3,f
 10281  17E0  0CF2               	rrf	___aldiv@divisor+2,f
 10282  17E1  0CF1               	rrf	___aldiv@divisor+1,f
 10283  17E2  0CF0               	rrf	___aldiv@divisor,f
 10284  17E3  0B89               	decfsz	9,f
 10285  17E4  2FDF               	goto	u2765
 10286  17E5  3001               	movlw	1
 10287  17E6  02A0               	subwf	___aldiv@counter,f
 10288  17E7  1D03               	btfss	3,2
 10289  17E8  2FBE               	goto	l2664
 10290  17E9                     l2676:	
 10291  17E9  0821               	movf	___aldiv@sign,w
 10292  17EA  1903               	btfsc	3,2
 10293  17EB  2FF7               	goto	l2680
 10294  17EC  09A2               	comf	___aldiv@quotient,f
 10295  17ED  09A3               	comf	___aldiv@quotient+1,f
 10296  17EE  09A4               	comf	___aldiv@quotient+2,f
 10297  17EF  09A5               	comf	___aldiv@quotient+3,f
 10298  17F0  0AA2               	incf	___aldiv@quotient,f
 10299  17F1  1903               	skipnz
 10300  17F2  0AA3               	incf	___aldiv@quotient+1,f
 10301  17F3  1903               	skipnz
 10302  17F4  0AA4               	incf	___aldiv@quotient+2,f
 10303  17F5  1903               	skipnz
 10304  17F6  0AA5               	incf	___aldiv@quotient+3,f
 10305  17F7                     l2680:	
 10306  17F7  0825               	movf	___aldiv@quotient+3,w
 10307  17F8  00F3               	movwf	?___aldiv+3
 10308  17F9  0824               	movf	___aldiv@quotient+2,w
 10309  17FA  00F2               	movwf	?___aldiv+2
 10310  17FB  0823               	movf	___aldiv@quotient+1,w
 10311  17FC  00F1               	movwf	?___aldiv+1
 10312  17FD  0822               	movf	___aldiv@quotient,w
 10313  17FE  00F0               	movwf	?___aldiv
 10314  17FF  0008               	return
 10315  1800                     __end_of___aldiv:	
 10316                           
 10317                           	psect	text11
 10318  16FC                     __ptext11:	
 10319 ;; *************** function _readButton *****************
 10320 ;; Defined at:
 10321 ;;		line 9 in file "buttons.c"
 10322 ;; Parameters:    Size  Location     Type
 10323 ;;		None
 10324 ;; Auto vars:     Size  Location     Type
 10325 ;;		None
 10326 ;; Return value:  Size  Location     Type
 10327 ;;                  1    wreg      unsigned char 
 10328 ;; Registers used:
 10329 ;;		wreg, status,2, status,0, pclath, cstack
 10330 ;; Tracked objects:
 10331 ;;		On entry : 0/0
 10332 ;;		On exit  : 0/0
 10333 ;;		Unchanged: 0/0
 10334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10335 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10336 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10337 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10338 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10339 ;;Total ram usage:        2 bytes
 10340 ;; Hardware stack levels used:    1
 10341 ;; Hardware stack levels required when called:    1
 10342 ;; This function calls:
 10343 ;;		_ADCRead
 10344 ;; This function is called by:
 10345 ;;		_main
 10346 ;; This function uses a non-reentrant model
 10347 ;;
 10348                           
 10349                           
 10350                           ;psect for function _readButton
 10351  16FC                     _readButton:	
 10352                           
 10353                           ;buttons.c: 11: readButtons = ADCRead(11);
 10354                           
 10355                           ;incstack = 0
 10356                           ; Regs used in _readButton: [wreg+status,2+status,0+pclath+cstack]
 10357  16FC  300B               	movlw	11
 10358  16FD  3192  22B7  3196   	fcall	_ADCRead
 10359  1700  0871               	movf	?_ADCRead+1,w
 10360  1701  0021               	movlb	1	; select bank1
 10361  1702  00C7               	movwf	(_readButtons+1)^(0+128)
 10362  1703  0870               	movf	?_ADCRead,w
 10363  1704  00C6               	movwf	_readButtons^(0+128)
 10364                           
 10365                           ;buttons.c: 13: if(readButtons >= 425 && readButtons < 485)
 10366  1705  0847               	movf	(_readButtons+1)^(0+128),w
 10367  1706  3A80               	xorlw	128
 10368  1707  00F4               	movwf	??_readButton
 10369  1708  3081               	movlw	129
 10370  1709  0274               	subwf	??_readButton,w
 10371  170A  1D03               	skipz
 10372  170B  2F0E               	goto	u3215
 10373  170C  30A9               	movlw	169
 10374  170D  0246               	subwf	_readButtons^(0+128),w
 10375  170E                     u3215:	
 10376  170E  1C03               	skipc
 10377  170F  2F20               	goto	l2870
 10378  1710  0021               	movlb	1	; select bank1
 10379  1711  0847               	movf	(_readButtons+1)^(0+128),w
 10380  1712  3A80               	xorlw	128
 10381  1713  00F4               	movwf	??_readButton
 10382  1714  3081               	movlw	129
 10383  1715  0274               	subwf	??_readButton,w
 10384  1716  1D03               	skipz
 10385  1717  2F1A               	goto	u3225
 10386  1718  30E5               	movlw	229
 10387  1719  0246               	subwf	_readButtons^(0+128),w
 10388  171A                     u3225:	
 10389  171A  1803               	skipnc
 10390  171B  2F20               	goto	l2870
 10391                           
 10392                           ;buttons.c: 14: {
 10393                           ;buttons.c: 15: button = 1;
 10394  171C  0020               	movlb	0	; select bank0
 10395  171D  01EE               	clrf	_button
 10396  171E  0AEE               	incf	_button,f
 10397                           
 10398                           ;buttons.c: 16: }
 10399  171F  2F4E               	goto	l2882
 10400  1720                     l2870:	
 10401                           
 10402                           ;buttons.c: 18: else if(readButtons >= 615 && readButtons < 690)
 10403  1720  0021               	movlb	1	; select bank1
 10404  1721  0847               	movf	(_readButtons+1)^(0+128),w
 10405  1722  3A80               	xorlw	128
 10406  1723  00F4               	movwf	??_readButton
 10407  1724  3082               	movlw	130
 10408  1725  0274               	subwf	??_readButton,w
 10409  1726  1D03               	skipz
 10410  1727  2F2A               	goto	u3235
 10411  1728  3067               	movlw	103
 10412  1729  0246               	subwf	_readButtons^(0+128),w
 10413  172A                     u3235:	
 10414  172A  1C03               	skipc
 10415  172B  2F3A               	goto	l2876
 10416  172C  0021               	movlb	1	; select bank1
 10417  172D  0847               	movf	(_readButtons+1)^(0+128),w
 10418  172E  3A80               	xorlw	128
 10419  172F  00F4               	movwf	??_readButton
 10420  1730  3082               	movlw	130
 10421  1731  0274               	subwf	??_readButton,w
 10422  1732  1D03               	skipz
 10423  1733  2F36               	goto	u3245
 10424  1734  30B2               	movlw	178
 10425  1735  0246               	subwf	_readButtons^(0+128),w
 10426  1736                     u3245:	
 10427  1736  1803               	skipnc
 10428  1737  2F3A               	goto	l2876
 10429                           
 10430                           ;buttons.c: 19: {
 10431                           ;buttons.c: 20: button = 2;
 10432  1738  3002               	movlw	2
 10433  1739  2F47               	goto	L6
 10434  173A                     l2876:	
 10435                           ;buttons.c: 21: }
 10436                           
 10437                           
 10438                           ;buttons.c: 23: else if(readButtons > 800)
 10439  173A  0021               	movlb	1	; select bank1
 10440  173B  0847               	movf	(_readButtons+1)^(0+128),w
 10441  173C  3A80               	xorlw	128
 10442  173D  00F4               	movwf	??_readButton
 10443  173E  3083               	movlw	131
 10444  173F  0274               	subwf	??_readButton,w
 10445  1740  1D03               	skipz
 10446  1741  2F44               	goto	u3255
 10447  1742  3021               	movlw	33
 10448  1743  0246               	subwf	_readButtons^(0+128),w
 10449  1744                     u3255:	
 10450  1744  1C03               	skipc
 10451  1745  2F4C               	goto	l2880
 10452                           
 10453                           ;buttons.c: 24: {
 10454                           ;buttons.c: 25: button = 3;
 10455  1746  3003               	movlw	3
 10456  1747                     L6:	
 10457  1747  00F4               	movwf	??_readButton
 10458  1748  0874               	movf	??_readButton,w
 10459  1749  0020               	movlb	0	; select bank0
 10460  174A  00EE               	movwf	_button
 10461                           
 10462                           ;buttons.c: 26: }
 10463  174B  2F4E               	goto	l2882
 10464  174C                     l2880:	
 10465                           
 10466                           ;buttons.c: 28: else
 10467                           ;buttons.c: 29: {
 10468                           ;buttons.c: 30: button = 0;
 10469  174C  0020               	movlb	0	; select bank0
 10470  174D  01EE               	clrf	_button
 10471  174E                     l2882:	
 10472                           
 10473                           ;buttons.c: 31: }
 10474                           ;buttons.c: 33: if (button != 0)
 10475  174E  086E               	movf	_button,w
 10476  174F  1903               	btfsc	3,2
 10477  1750  2F7B               	goto	l2902
 10478                           
 10479                           ;buttons.c: 34: {
 10480                           ;buttons.c: 35: if (button != lastButton)
 10481  1751  086E               	movf	_button,w
 10482  1752  066D               	xorwf	_lastButton,w
 10483  1753  1903               	skipnz
 10484  1754  2F5A               	goto	l2890
 10485                           
 10486                           ;buttons.c: 36: {
 10487                           ;buttons.c: 37: lastButton = button;
 10488  1755  086E               	movf	_button,w
 10489  1756  00F4               	movwf	??_readButton
 10490  1757  0874               	movf	??_readButton,w
 10491  1758  00ED               	movwf	_lastButton
 10492  1759  2F7B               	goto	l2902
 10493  175A                     l2890:	
 10494                           ;buttons.c: 39: }
 10495                           
 10496                           ;buttons.c: 38: j = 0;
 10497                           
 10498                           
 10499                           ;buttons.c: 40: else
 10500                           ;buttons.c: 41: {
 10501                           ;buttons.c: 42: j += 1;
 10502  175A  3001               	movlw	1
 10503  175B  00F4               	movwf	??_readButton
 10504  175C  0874               	movf	??_readButton,w
 10505  175D  07EC               	addwf	_j,f
 10506                           
 10507                           ;buttons.c: 44: if(j == 1)
 10508  175E  036C               	decf	_j,w
 10509  175F  1D03               	btfss	3,2
 10510  1760  2F63               	goto	l2896
 10511                           
 10512                           ;buttons.c: 45: {
 10513                           ;buttons.c: 46: return (lastButton);
 10514  1761  086D               	movf	_lastButton,w
 10515  1762  0008               	return
 10516  1763                     l2896:	
 10517                           
 10518                           ;buttons.c: 47: }
 10519                           ;buttons.c: 49: if (j >10)
 10520  1763  086C               	movf	_j,w
 10521  1764  3A80               	xorlw	128
 10522  1765  3E75               	addlw	-139
 10523  1766  1C03               	skipc
 10524  1767  2F7C               	goto	l2904
 10525                           
 10526                           ;buttons.c: 50: {
 10527                           ;buttons.c: 51: _delay((unsigned long)((25)*(32000000/4000.0)));
 10528  1768  3002               	movlw	2
 10529  1769  00F5               	movwf	??_readButton+1
 10530  176A  3004               	movlw	4
 10531  176B  00F4               	movwf	??_readButton
 10532  176C  30BA               	movlw	186
 10533  176D                     u3987:	
 10534  176D  0B89               	decfsz	9,f
 10535  176E  2F6D               	goto	u3987
 10536  176F  0BF4               	decfsz	??_readButton,f
 10537  1770  2F6D               	goto	u3987
 10538  1771  0BF5               	decfsz	??_readButton+1,f
 10539  1772  2F6D               	goto	u3987
 10540  1773  3200               	nop2
 10541                           
 10542                           ;buttons.c: 52: j = 10;
 10543  1774  300A               	movlw	10
 10544  1775  00F4               	movwf	??_readButton
 10545  1776  0874               	movf	??_readButton,w
 10546  1777  0020               	movlb	0	; select bank0
 10547  1778  00EC               	movwf	_j
 10548                           
 10549                           ;buttons.c: 53: return (lastButton);
 10550  1779  086D               	movf	_lastButton,w
 10551  177A  0008               	return
 10552  177B                     l2902:	
 10553                           ;buttons.c: 54: }
 10554                           ;buttons.c: 55: }
 10555                           ;buttons.c: 56: goto end;
 10556                           
 10557                           
 10558                           ;buttons.c: 57: }
 10559                           ;buttons.c: 59: j = 0;
 10560  177B  01EC               	clrf	_j
 10561  177C                     l2904:	
 10562                           ;buttons.c: 61: end:
 10563                           
 10564                           
 10565                           ;buttons.c: 63: return (0);
 10566  177C  3000               	movlw	0
 10567  177D  0008               	return
 10568  177E                     __end_of_readButton:	
 10569                           
 10570                           	psect	text12
 10571  12B7                     __ptext12:	
 10572 ;; *************** function _ADCRead *****************
 10573 ;; Defined at:
 10574 ;;		line 21 in file "adc.c"
 10575 ;; Parameters:    Size  Location     Type
 10576 ;;  channel         1    wreg     enum E14259
 10577 ;; Auto vars:     Size  Location     Type
 10578 ;;  channel         1    3[COMMON] enum E14259
 10579 ;; Return value:  Size  Location     Type
 10580 ;;                  2    0[COMMON] int 
 10581 ;; Registers used:
 10582 ;;		wreg
 10583 ;; Tracked objects:
 10584 ;;		On entry : 0/0
 10585 ;;		On exit  : 0/0
 10586 ;;		Unchanged: 0/0
 10587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10588 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10589 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10590 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10591 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10592 ;;Total ram usage:        4 bytes
 10593 ;; Hardware stack levels used:    1
 10594 ;; This function calls:
 10595 ;;		Nothing
 10596 ;; This function is called by:
 10597 ;;		_readIAnalog
 10598 ;;		_readButton
 10599 ;;		_main
 10600 ;; This function uses a non-reentrant model
 10601 ;;
 10602                           
 10603                           
 10604                           ;psect for function _ADCRead
 10605  12B7                     _ADCRead:	
 10606                           
 10607                           ;incstack = 0
 10608                           ; Regs used in _ADCRead: [wreg]
 10609                           ;ADCRead@channel stored from wreg
 10610  12B7  00F3               	movwf	ADCRead@channel
 10611                           
 10612                           ;adc.c: 23: ADPCH = channel_VSS;
 10613  12B8  303C               	movlw	60
 10614  12B9  0021               	movlb	1	; select bank1
 10615  12BA  009E               	movwf	30	;volatile
 10616                           
 10617                           ;adc.c: 25: ADCON0bits.ADON = 1;
 10618  12BB  1793               	bsf	19,7	;volatile
 10619                           
 10620                           ;adc.c: 27: ADCON0bits.ADCONT = 0;
 10621  12BC  1313               	bcf	19,6	;volatile
 10622                           
 10623                           ;adc.c: 29: ADCON0bits.ADGO = 1;
 10624  12BD  1413               	bsf	19,0	;volatile
 10625  12BE                     l57:	
 10626                           ;adc.c: 32: {
 10627                           
 10628                           ;adc.c: 31: while(ADCON0bits.ADGO)
 10629                           
 10630  12BE  1813               	btfsc	19,0	;volatile
 10631  12BF  2ABE               	goto	l57
 10632                           
 10633                           ;adc.c: 33: }
 10634                           ;adc.c: 35: ADPCH = channel;
 10635  12C0  0873               	movf	ADCRead@channel,w
 10636  12C1  009E               	movwf	30	;volatile
 10637                           
 10638                           ;adc.c: 37: ADCON0bits.ADON = 1;
 10639  12C2  1793               	bsf	19,7	;volatile
 10640                           
 10641                           ;adc.c: 39: ADCON0bits.ADCONT = 0;
 10642  12C3  1313               	bcf	19,6	;volatile
 10643                           
 10644                           ;adc.c: 41: ADCON0bits.ADGO = 1;
 10645  12C4  1413               	bsf	19,0	;volatile
 10646  12C5                     l60:	
 10647                           ;adc.c: 44: {
 10648                           
 10649                           ;adc.c: 43: while(ADCON0bits.ADGO)
 10650                           
 10651  12C5  1813               	btfsc	19,0	;volatile
 10652  12C6  2AC5               	goto	l60
 10653                           
 10654                           ;adc.c: 45: }
 10655                           ;adc.c: 47: return ((ADRESH<<8)+ADRESL);
 10656  12C7  080D               	movf	13,w	;volatile
 10657  12C8  00F1               	movwf	?_ADCRead+1
 10658  12C9  080C               	movf	12,w	;volatile
 10659  12CA  00F0               	movwf	?_ADCRead
 10660  12CB  0008               	return
 10661  12CC                     __end_of_ADCRead:	
 10662                           
 10663                           	psect	text13
 10664  0BC3                     __ptext13:	
 10665 ;; *************** function _cc_cv_mode *****************
 10666 ;; Defined at:
 10667 ;;		line 97 in file "battery_charger.c"
 10668 ;; Parameters:    Size  Location     Type
 10669 ;;  z               1    wreg     unsigned char 
 10670 ;; Auto vars:     Size  Location     Type
 10671 ;;  z               1    5[COMMON] unsigned char 
 10672 ;; Return value:  Size  Location     Type
 10673 ;;                  1    wreg      void 
 10674 ;; Registers used:
 10675 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10676 ;; Tracked objects:
 10677 ;;		On entry : 0/0
 10678 ;;		On exit  : 0/0
 10679 ;;		Unchanged: 0/0
 10680 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10681 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10682 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10683 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10684 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10685 ;;Total ram usage:        6 bytes
 10686 ;; Hardware stack levels used:    1
 10687 ;; This function calls:
 10688 ;;		Nothing
 10689 ;; This function is called by:
 10690 ;;		_main
 10691 ;; This function uses a non-reentrant model
 10692 ;;
 10693                           
 10694                           
 10695                           ;psect for function _cc_cv_mode
 10696  0BC3                     _cc_cv_mode:	
 10697                           
 10698                           ;incstack = 0
 10699                           ; Regs used in _cc_cv_mode: [wreg+fsr1l+fsr1h+status,2+status,0]
 10700                           ;cc_cv_mode@z stored from wreg
 10701  0BC3  00F5               	movwf	cc_cv_mode@z
 10702                           
 10703                           ;battery_charger.c: 99: if(voltage[z]>Vref[z])
 10704  0BC4  3575               	lslf	cc_cv_mode@z,w
 10705  0BC5  3EA8               	addlw	(low (_voltage| 0))& (0+255)
 10706  0BC6  0086               	movwf	6
 10707  0BC7  0187               	clrf	7
 10708  0BC8  3F40               	moviw [0]fsr1
 10709  0BC9  00F0               	movwf	??_cc_cv_mode
 10710  0BCA  3F41               	moviw [1]fsr1
 10711  0BCB  00F1               	movwf	??_cc_cv_mode+1
 10712  0BCC  3575               	lslf	cc_cv_mode@z,w
 10713  0BCD  3EB0               	addlw	(low (_Vref| 0))& (0+255)
 10714  0BCE  0086               	movwf	6
 10715  0BCF  0187               	clrf	7
 10716  0BD0  3F40               	moviw [0]fsr1
 10717  0BD1  00F2               	movwf	??_cc_cv_mode+2
 10718  0BD2  3F41               	moviw [1]fsr1
 10719  0BD3  00F3               	movwf	??_cc_cv_mode+3
 10720  0BD4  0873               	movf	??_cc_cv_mode+3,w
 10721  0BD5  3A80               	xorlw	128
 10722  0BD6  00F4               	movwf	??_cc_cv_mode+4
 10723  0BD7  0871               	movf	??_cc_cv_mode+1,w
 10724  0BD8  3A80               	xorlw	128
 10725  0BD9  0274               	subwf	??_cc_cv_mode+4,w
 10726  0BDA  1D03               	skipz
 10727  0BDB  2BDE               	goto	u3545
 10728  0BDC  0870               	movf	??_cc_cv_mode,w
 10729  0BDD  0272               	subwf	??_cc_cv_mode+2,w
 10730  0BDE                     u3545:	
 10731  0BDE  1803               	skipnc
 10732  0BDF  2C0C               	goto	l3058
 10733                           
 10734                           ;battery_charger.c: 100: {
 10735                           ;battery_charger.c: 101: if(VHoldMode[z]<12)VHoldMode[z]+=1;
 10736  0BE0  0875               	movf	cc_cv_mode@z,w
 10737  0BE1  3EC0               	addlw	(low (_VHoldMode| 0))& (0+255)
 10738  0BE2  0086               	movwf	6
 10739  0BE3  0187               	clrf	7
 10740  0BE4  0801               	movf	1,w
 10741  0BE5  3A80               	xorlw	128
 10742  0BE6  3E74               	addlw	-140
 10743  0BE7  1803               	skipnc
 10744  0BE8  2BF1               	goto	l360
 10745  0BE9  3001               	movlw	1
 10746  0BEA  00F0               	movwf	??_cc_cv_mode
 10747  0BEB  0875               	movf	cc_cv_mode@z,w
 10748  0BEC  3EC0               	addlw	(low (_VHoldMode| 0))& (0+255)
 10749  0BED  0086               	movwf	6
 10750  0BEE  0187               	clrf	7
 10751  0BEF  0870               	movf	??_cc_cv_mode,w
 10752  0BF0  0781               	addwf	1,f
 10753  0BF1                     l360:	
 10754                           
 10755                           ;battery_charger.c: 103: if(cc_cv[z])
 10756  0BF1  0875               	movf	cc_cv_mode@z,w
 10757  0BF2  3EC2               	addlw	(low (_cc_cv| 0))& (0+255)
 10758  0BF3  0086               	movwf	6
 10759  0BF4  0187               	clrf	7
 10760  0BF5  0801               	movf	1,w
 10761  0BF6  1903               	btfsc	3,2
 10762  0BF7  2BFF               	goto	l3054
 10763                           
 10764                           ;battery_charger.c: 104: {
 10765                           ;battery_charger.c: 105: cc_cv[z]-=1;
 10766  0BF8  0875               	movf	cc_cv_mode@z,w
 10767  0BF9  3EC2               	addlw	(low (_cc_cv| 0))& (0+255)
 10768  0BFA  0086               	movwf	6
 10769  0BFB  0187               	clrf	7
 10770  0BFC  3001               	movlw	1
 10771  0BFD  0281               	subwf	1,f
 10772                           
 10773                           ;battery_charger.c: 106: }
 10774  0BFE  2C4F               	goto	l3064
 10775  0BFF                     l3054:	
 10776                           
 10777                           ;battery_charger.c: 107: else
 10778                           ;battery_charger.c: 108: {
 10779                           ;battery_charger.c: 109: if(Imode[z])
 10780  0BFF  0875               	movf	cc_cv_mode@z,w
 10781  0C00  3EEE               	addlw	(low (_Imode| 0))& (0+255)
 10782  0C01  0086               	movwf	6
 10783  0C02  0187               	clrf	7
 10784  0C03  0801               	movf	1,w
 10785  0C04  1903               	btfsc	3,2
 10786  0C05  2C4F               	goto	l3064
 10787                           
 10788                           ;battery_charger.c: 110: {
 10789                           ;battery_charger.c: 111: Imode[z]=0;
 10790  0C06  0875               	movf	cc_cv_mode@z,w
 10791  0C07  3EEE               	addlw	(low (_Imode| 0))& (0+255)
 10792  0C08  0086               	movwf	6
 10793  0C09  0187               	clrf	7
 10794  0C0A  0181               	clrf	1
 10795                           
 10796                           ;battery_charger.c: 112: }
 10797                           ;battery_charger.c: 113: }
 10798                           ;battery_charger.c: 114: }
 10799  0C0B  2C4F               	goto	l3064
 10800  0C0C                     l3058:	
 10801                           
 10802                           ;battery_charger.c: 115: else if(voltage[z]<Vref[z])
 10803  0C0C  3575               	lslf	cc_cv_mode@z,w
 10804  0C0D  3EB0               	addlw	(low (_Vref| 0))& (0+255)
 10805  0C0E  0086               	movwf	6
 10806  0C0F  0187               	clrf	7
 10807  0C10  3F40               	moviw [0]fsr1
 10808  0C11  00F0               	movwf	??_cc_cv_mode
 10809  0C12  3F41               	moviw [1]fsr1
 10810  0C13  00F1               	movwf	??_cc_cv_mode+1
 10811  0C14  3575               	lslf	cc_cv_mode@z,w
 10812  0C15  3EA8               	addlw	(low (_voltage| 0))& (0+255)
 10813  0C16  0086               	movwf	6
 10814  0C17  0187               	clrf	7
 10815  0C18  3F40               	moviw [0]fsr1
 10816  0C19  00F2               	movwf	??_cc_cv_mode+2
 10817  0C1A  3F41               	moviw [1]fsr1
 10818  0C1B  00F3               	movwf	??_cc_cv_mode+3
 10819  0C1C  0873               	movf	??_cc_cv_mode+3,w
 10820  0C1D  3A80               	xorlw	128
 10821  0C1E  00F4               	movwf	??_cc_cv_mode+4
 10822  0C1F  0871               	movf	??_cc_cv_mode+1,w
 10823  0C20  3A80               	xorlw	128
 10824  0C21  0274               	subwf	??_cc_cv_mode+4,w
 10825  0C22  1D03               	skipz
 10826  0C23  2C26               	goto	u3585
 10827  0C24  0870               	movf	??_cc_cv_mode,w
 10828  0C25  0272               	subwf	??_cc_cv_mode+2,w
 10829  0C26                     u3585:	
 10830  0C26  1803               	skipnc
 10831  0C27  2C4F               	goto	l3064
 10832                           
 10833                           ;battery_charger.c: 116: {
 10834                           ;battery_charger.c: 117: VHoldMode[z]-=1;
 10835  0C28  30FF               	movlw	255
 10836  0C29  00F0               	movwf	??_cc_cv_mode
 10837  0C2A  0875               	movf	cc_cv_mode@z,w
 10838  0C2B  3EC0               	addlw	(low (_VHoldMode| 0))& (0+255)
 10839  0C2C  0086               	movwf	6
 10840  0C2D  0187               	clrf	7
 10841  0C2E  0870               	movf	??_cc_cv_mode,w
 10842  0C2F  0781               	addwf	1,f
 10843                           
 10844                           ;battery_charger.c: 118: if(VHoldMode[z]<(10*-1))
 10845  0C30  0875               	movf	cc_cv_mode@z,w
 10846  0C31  3EC0               	addlw	(low (_VHoldMode| 0))& (0+255)
 10847  0C32  0086               	movwf	6
 10848  0C33  0187               	clrf	7
 10849  0C34  0801               	movf	1,w
 10850  0C35  3A80               	xorlw	128
 10851  0C36  3E8A               	addlw	138
 10852  0C37  1803               	skipnc
 10853  0C38  2C4F               	goto	l3064
 10854                           
 10855                           ;battery_charger.c: 119: {
 10856                           ;battery_charger.c: 120: Imode[z]=1;
 10857  0C39  0875               	movf	cc_cv_mode@z,w
 10858  0C3A  3EEE               	addlw	(low (_Imode| 0))& (0+255)
 10859  0C3B  0086               	movwf	6
 10860  0C3C  0187               	clrf	7
 10861  0C3D  0181               	clrf	1
 10862  0C3E  0A81               	incf	1,f
 10863                           
 10864                           ;battery_charger.c: 121: cc_cv[z]=(10*2);
 10865  0C3F  3014               	movlw	20
 10866  0C40  00F0               	movwf	??_cc_cv_mode
 10867  0C41  0875               	movf	cc_cv_mode@z,w
 10868  0C42  3EC2               	addlw	(low (_cc_cv| 0))& (0+255)
 10869  0C43  0086               	movwf	6
 10870  0C44  0187               	clrf	7
 10871  0C45  0870               	movf	??_cc_cv_mode,w
 10872  0C46  0081               	movwf	1
 10873                           
 10874                           ;battery_charger.c: 122: VHoldMode[z]=(10*-1);
 10875  0C47  30F6               	movlw	246
 10876  0C48  00F0               	movwf	??_cc_cv_mode
 10877  0C49  0875               	movf	cc_cv_mode@z,w
 10878  0C4A  3EC0               	addlw	(low (_VHoldMode| 0))& (0+255)
 10879  0C4B  0086               	movwf	6
 10880  0C4C  0187               	clrf	7
 10881  0C4D  0870               	movf	??_cc_cv_mode,w
 10882  0C4E  0081               	movwf	1
 10883  0C4F                     l3064:	
 10884                           ;battery_charger.c: 123: }
 10885                           ;battery_charger.c: 124: }
 10886                           
 10887                           
 10888                           ;battery_charger.c: 127: if(current[z]>Iref[z])
 10889  0C4F  3575               	lslf	cc_cv_mode@z,w
 10890  0C50  3EA0               	addlw	(low (_current| 0))& (0+255)
 10891  0C51  0086               	movwf	6
 10892  0C52  0187               	clrf	7
 10893  0C53  3F40               	moviw [0]fsr1
 10894  0C54  00F0               	movwf	??_cc_cv_mode
 10895  0C55  3F41               	moviw [1]fsr1
 10896  0C56  00F1               	movwf	??_cc_cv_mode+1
 10897  0C57  3575               	lslf	cc_cv_mode@z,w
 10898  0C58  3EB4               	addlw	(low (_Iref| 0))& (0+255)
 10899  0C59  0086               	movwf	6
 10900  0C5A  0187               	clrf	7
 10901  0C5B  3F40               	moviw [0]fsr1
 10902  0C5C  00F2               	movwf	??_cc_cv_mode+2
 10903  0C5D  3F41               	moviw [1]fsr1
 10904  0C5E  00F3               	movwf	??_cc_cv_mode+3
 10905  0C5F  0873               	movf	??_cc_cv_mode+3,w
 10906  0C60  3A80               	xorlw	128
 10907  0C61  00F4               	movwf	??_cc_cv_mode+4
 10908  0C62  0871               	movf	??_cc_cv_mode+1,w
 10909  0C63  3A80               	xorlw	128
 10910  0C64  0274               	subwf	??_cc_cv_mode+4,w
 10911  0C65  1D03               	skipz
 10912  0C66  2C69               	goto	u3605
 10913  0C67  0870               	movf	??_cc_cv_mode,w
 10914  0C68  0272               	subwf	??_cc_cv_mode+2,w
 10915  0C69                     u3605:	
 10916  0C69  1803               	skipnc
 10917  0C6A  0008               	return
 10918                           
 10919                           ;battery_charger.c: 128: {
 10920                           ;battery_charger.c: 129: if(!Imode[z])
 10921  0C6B  0875               	movf	cc_cv_mode@z,w
 10922  0C6C  3EEE               	addlw	(low (_Imode| 0))& (0+255)
 10923  0C6D  0086               	movwf	6
 10924  0C6E  0187               	clrf	7
 10925  0C6F  0801               	movf	1,w
 10926  0C70  1D03               	btfss	3,2
 10927  0C71  0008               	return
 10928                           
 10929                           ;battery_charger.c: 130: {
 10930                           ;battery_charger.c: 131: if(batteryState[z]==FLOAT)
 10931  0C72  0875               	movf	cc_cv_mode@z,w
 10932  0C73  3E6A               	addlw	(low (_batteryState| 0))& (0+255)
 10933  0C74  0086               	movwf	6
 10934  0C75  0187               	clrf	7
 10935  0C76  3005               	movlw	5
 10936  0C77  0601               	xorwf	1,w
 10937  0C78  1D03               	btfss	3,2
 10938  0C79  0008               	return
 10939                           
 10940                           ;battery_charger.c: 132: {
 10941                           ;battery_charger.c: 133: batteryState[z]=CHARGE;
 10942  0C7A  3004               	movlw	4
 10943  0C7B  00F0               	movwf	??_cc_cv_mode
 10944  0C7C  0875               	movf	cc_cv_mode@z,w
 10945  0C7D  3E6A               	addlw	(low (_batteryState| 0))& (0+255)
 10946  0C7E  0086               	movwf	6
 10947  0C7F  0187               	clrf	7
 10948  0C80  0870               	movf	??_cc_cv_mode,w
 10949  0C81  0081               	movwf	1
 10950                           
 10951                           ;battery_charger.c: 134: Vref[z]=1425;
 10952  0C82  3575               	lslf	cc_cv_mode@z,w
 10953  0C83  3EB0               	addlw	(low (_Vref| 0))& (0+255)
 10954  0C84  0086               	movwf	6
 10955  0C85  0187               	clrf	7
 10956  0C86  3091               	movlw	145
 10957  0C87  3FC0               	movwi [0]fsr1
 10958  0C88  3005               	movlw	5
 10959  0C89  3FC1               	movwi [1]fsr1
 10960                           
 10961                           ;battery_charger.c: 135: Iref[z]=35;
 10962  0C8A  3575               	lslf	cc_cv_mode@z,w
 10963  0C8B  3EB4               	addlw	(low (_Iref| 0))& (0+255)
 10964  0C8C  0086               	movwf	6
 10965  0C8D  0187               	clrf	7
 10966  0C8E  3023               	movlw	35
 10967  0C8F  3FC0               	movwi [0]fsr1
 10968  0C90  3000               	movlw	0
 10969  0C91  3FC1               	movwi [1]fsr1
 10970                           
 10971                           ;battery_charger.c: 136: Imode[z]=1;
 10972  0C92  0875               	movf	cc_cv_mode@z,w
 10973  0C93  3EEE               	addlw	(low (_Imode| 0))& (0+255)
 10974  0C94  0086               	movwf	6
 10975  0C95  0187               	clrf	7
 10976  0C96  0181               	clrf	1
 10977  0C97  0A81               	incf	1,f
 10978                           
 10979                           ;battery_charger.c: 137: cc_cv[z]=10;
 10980  0C98  300A               	movlw	10
 10981  0C99  00F0               	movwf	??_cc_cv_mode
 10982  0C9A  0875               	movf	cc_cv_mode@z,w
 10983  0C9B  3EC2               	addlw	(low (_cc_cv| 0))& (0+255)
 10984  0C9C  0086               	movwf	6
 10985  0C9D  0187               	clrf	7
 10986  0C9E  0870               	movf	??_cc_cv_mode,w
 10987  0C9F  0081               	movwf	1
 10988  0CA0  0008               	return
 10989  0CA1                     __end_of_cc_cv_mode:	
 10990                           
 10991                           	psect	text14
 10992  160E                     __ptext14:	
 10993 ;; *************** function _calculateCurrent3 *****************
 10994 ;; Defined at:
 10995 ;;		line 405 in file "main.c"
 10996 ;; Parameters:    Size  Location     Type
 10997 ;;		None
 10998 ;; Auto vars:     Size  Location     Type
 10999 ;;		None
 11000 ;; Return value:  Size  Location     Type
 11001 ;;                  1    wreg      void 
 11002 ;; Registers used:
 11003 ;;		wreg, status,2, status,0, pclath, cstack
 11004 ;; Tracked objects:
 11005 ;;		On entry : 0/0
 11006 ;;		On exit  : 0/0
 11007 ;;		Unchanged: 0/0
 11008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11009 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11010 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11011 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11012 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11013 ;;Total ram usage:        3 bytes
 11014 ;; Hardware stack levels used:    1
 11015 ;; Hardware stack levels required when called:    2
 11016 ;; This function calls:
 11017 ;;		___awtoft
 11018 ;;		___ftdiv
 11019 ;;		___fttol
 11020 ;; This function is called by:
 11021 ;;		_main
 11022 ;; This function uses a non-reentrant model
 11023 ;;
 11024                           
 11025                           
 11026                           ;psect for function _calculateCurrent3
 11027  160E                     _calculateCurrent3:	
 11028                           
 11029                           ;main.c: 407: if(Ianalogs[3]-578<=0)
 11030                           
 11031                           ;incstack = 0
 11032                           ; Regs used in _calculateCurrent3: [wreg+status,2+status,0+pclath+cstack]
 11033  160E  0022               	movlb	2	; select bank2
 11034  160F  0836               	movf	(_Ianalogs^(0+256)+6),w
 11035  1610  3EBE               	addlw	190
 11036  1611  0020               	movlb	0	; select bank0
 11037  1612  00BE               	movwf	??_calculateCurrent3
 11038  1613  30FD               	movlw	253
 11039  1614  0022               	movlb	2	; select bank2
 11040  1615  3D37               	addwfc	((_Ianalogs+1)^(0+256)+6),w
 11041  1616  0020               	movlb	0	; select bank0
 11042  1617  00BF               	movwf	??_calculateCurrent3+1
 11043  1618  083F               	movf	??_calculateCurrent3+1,w
 11044  1619  3A80               	xorlw	128
 11045  161A  00C0               	movwf	??_calculateCurrent3+2
 11046  161B  3080               	movlw	128
 11047  161C  0240               	subwf	??_calculateCurrent3+2,w
 11048  161D  1D03               	skipz
 11049  161E  2E21               	goto	u3665
 11050  161F  3001               	movlw	1
 11051  1620  023E               	subwf	??_calculateCurrent3,w
 11052  1621                     u3665:	
 11053  1621  1803               	skipnc
 11054  1622  2E27               	goto	l3094
 11055                           
 11056                           ;main.c: 408: {
 11057                           ;main.c: 409: current[3]=0;
 11058  1623  0021               	movlb	1	; select bank1
 11059  1624  01A6               	clrf	(_current^(0+128)+6)
 11060  1625  01A7               	clrf	((_current+1)^(0+128)+6)
 11061                           
 11062                           ;main.c: 410: }
 11063  1626  0008               	return
 11064  1627                     l3094:	
 11065                           
 11066                           ;main.c: 411: else
 11067                           ;main.c: 412: {
 11068                           ;main.c: 413: current[3]=(int16_t)((Ianalogs[3]-578)/3.2323);
 11069  1627  0022               	movlb	2	; select bank2
 11070  1628  0836               	movf	(_Ianalogs^(0+256)+6),w
 11071  1629  3EBE               	addlw	190
 11072  162A  00F8               	movwf	___awtoft@c
 11073  162B  30FD               	movlw	253
 11074  162C  3D37               	addwfc	((_Ianalogs+1)^(0+256)+6),w
 11075  162D  00F9               	movwf	___awtoft@c+1
 11076  162E  3193  2354  3196   	fcall	___awtoft
 11077  1631  0878               	movf	?___awtoft,w
 11078  1632  0020               	movlb	0	; select bank0
 11079  1633  00A3               	movwf	___ftdiv@f1
 11080  1634  0879               	movf	?___awtoft+1,w
 11081  1635  00A4               	movwf	___ftdiv@f1+1
 11082  1636  087A               	movf	?___awtoft+2,w
 11083  1637  00A5               	movwf	___ftdiv@f1+2
 11084  1638  30DE               	movlw	222
 11085  1639  00A0               	movwf	___ftdiv@f2
 11086  163A  304E               	movlw	78
 11087  163B  00A1               	movwf	___ftdiv@f2+1
 11088  163C  3040               	movlw	64
 11089  163D  00A2               	movwf	___ftdiv@f2+2
 11090  163E  3188  20FD  3196   	fcall	___ftdiv
 11091  1641  0020               	movlb	0	; select bank0
 11092  1642  0820               	movf	?___ftdiv,w
 11093  1643  00B0               	movwf	___fttol@f1
 11094  1644  0821               	movf	?___ftdiv+1,w
 11095  1645  00B1               	movwf	___fttol@f1+1
 11096  1646  0822               	movf	?___ftdiv+2,w
 11097  1647  00B2               	movwf	___fttol@f1+2
 11098  1648  3188  2076         	fcall	___fttol
 11099  164A  0020               	movlb	0	; select bank0
 11100  164B  0831               	movf	?___fttol+1,w
 11101  164C  0021               	movlb	1	; select bank1
 11102  164D  00A7               	movwf	((_current+1)^(0+128)+6)
 11103  164E  0020               	movlb	0	; select bank0
 11104  164F  0830               	movf	?___fttol,w
 11105  1650  0021               	movlb	1	; select bank1
 11106  1651  00A6               	movwf	(_current^(0+128)+6)
 11107  1652  0008               	return
 11108  1653                     __end_of_calculateCurrent3:	
 11109                           
 11110                           	psect	text15
 11111  15C9                     __ptext15:	
 11112 ;; *************** function _calculateCurrent2 *****************
 11113 ;; Defined at:
 11114 ;;		line 392 in file "main.c"
 11115 ;; Parameters:    Size  Location     Type
 11116 ;;		None
 11117 ;; Auto vars:     Size  Location     Type
 11118 ;;		None
 11119 ;; Return value:  Size  Location     Type
 11120 ;;                  1    wreg      void 
 11121 ;; Registers used:
 11122 ;;		wreg, status,2, status,0, pclath, cstack
 11123 ;; Tracked objects:
 11124 ;;		On entry : 0/0
 11125 ;;		On exit  : 0/0
 11126 ;;		Unchanged: 0/0
 11127 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11128 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11129 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11130 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11131 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11132 ;;Total ram usage:        3 bytes
 11133 ;; Hardware stack levels used:    1
 11134 ;; Hardware stack levels required when called:    2
 11135 ;; This function calls:
 11136 ;;		___awtoft
 11137 ;;		___ftdiv
 11138 ;;		___fttol
 11139 ;; This function is called by:
 11140 ;;		_main
 11141 ;; This function uses a non-reentrant model
 11142 ;;
 11143                           
 11144                           
 11145                           ;psect for function _calculateCurrent2
 11146  15C9                     _calculateCurrent2:	
 11147                           
 11148                           ;main.c: 394: if(Ianalogs[2]-565<=0)
 11149                           
 11150                           ;incstack = 0
 11151                           ; Regs used in _calculateCurrent2: [wreg+status,2+status,0+pclath+cstack]
 11152  15C9  0022               	movlb	2	; select bank2
 11153  15CA  0834               	movf	(_Ianalogs^(0+256)+4),w
 11154  15CB  3ECB               	addlw	203
 11155  15CC  0020               	movlb	0	; select bank0
 11156  15CD  00BE               	movwf	??_calculateCurrent2
 11157  15CE  30FD               	movlw	253
 11158  15CF  0022               	movlb	2	; select bank2
 11159  15D0  3D35               	addwfc	((_Ianalogs+1)^(0+256)+4),w
 11160  15D1  0020               	movlb	0	; select bank0
 11161  15D2  00BF               	movwf	??_calculateCurrent2+1
 11162  15D3  083F               	movf	??_calculateCurrent2+1,w
 11163  15D4  3A80               	xorlw	128
 11164  15D5  00C0               	movwf	??_calculateCurrent2+2
 11165  15D6  3080               	movlw	128
 11166  15D7  0240               	subwf	??_calculateCurrent2+2,w
 11167  15D8  1D03               	skipz
 11168  15D9  2DDC               	goto	u3655
 11169  15DA  3001               	movlw	1
 11170  15DB  023E               	subwf	??_calculateCurrent2,w
 11171  15DC                     u3655:	
 11172  15DC  1803               	skipnc
 11173  15DD  2DE2               	goto	l3088
 11174                           
 11175                           ;main.c: 395: {
 11176                           ;main.c: 396: current[2]=0;
 11177  15DE  0021               	movlb	1	; select bank1
 11178  15DF  01A4               	clrf	(_current^(0+128)+4)
 11179  15E0  01A5               	clrf	((_current+1)^(0+128)+4)
 11180                           
 11181                           ;main.c: 397: }
 11182  15E1  0008               	return
 11183  15E2                     l3088:	
 11184                           
 11185                           ;main.c: 398: else
 11186                           ;main.c: 399: {
 11187                           ;main.c: 401: current[2]=(int16_t)((Ianalogs[2]-565)/3.05);
 11188  15E2  0022               	movlb	2	; select bank2
 11189  15E3  0834               	movf	(_Ianalogs^(0+256)+4),w
 11190  15E4  3ECB               	addlw	203
 11191  15E5  00F8               	movwf	___awtoft@c
 11192  15E6  30FD               	movlw	253
 11193  15E7  3D35               	addwfc	((_Ianalogs+1)^(0+256)+4),w
 11194  15E8  00F9               	movwf	___awtoft@c+1
 11195  15E9  3193  2354  3195   	fcall	___awtoft
 11196  15EC  0878               	movf	?___awtoft,w
 11197  15ED  0020               	movlb	0	; select bank0
 11198  15EE  00A3               	movwf	___ftdiv@f1
 11199  15EF  0879               	movf	?___awtoft+1,w
 11200  15F0  00A4               	movwf	___ftdiv@f1+1
 11201  15F1  087A               	movf	?___awtoft+2,w
 11202  15F2  00A5               	movwf	___ftdiv@f1+2
 11203  15F3  3033               	movlw	51
 11204  15F4  00A0               	movwf	___ftdiv@f2
 11205  15F5  3043               	movlw	67
 11206  15F6  00A1               	movwf	___ftdiv@f2+1
 11207  15F7  3040               	movlw	64
 11208  15F8  00A2               	movwf	___ftdiv@f2+2
 11209  15F9  3188  20FD  3195   	fcall	___ftdiv
 11210  15FC  0020               	movlb	0	; select bank0
 11211  15FD  0820               	movf	?___ftdiv,w
 11212  15FE  00B0               	movwf	___fttol@f1
 11213  15FF  0821               	movf	?___ftdiv+1,w
 11214  1600  00B1               	movwf	___fttol@f1+1
 11215  1601  0822               	movf	?___ftdiv+2,w
 11216  1602  00B2               	movwf	___fttol@f1+2
 11217  1603  3188  2076         	fcall	___fttol
 11218  1605  0020               	movlb	0	; select bank0
 11219  1606  0831               	movf	?___fttol+1,w
 11220  1607  0021               	movlb	1	; select bank1
 11221  1608  00A5               	movwf	((_current+1)^(0+128)+4)
 11222  1609  0020               	movlb	0	; select bank0
 11223  160A  0830               	movf	?___fttol,w
 11224  160B  0021               	movlb	1	; select bank1
 11225  160C  00A4               	movwf	(_current^(0+128)+4)
 11226  160D  0008               	return
 11227  160E                     __end_of_calculateCurrent2:	
 11228                           
 11229                           	psect	text16
 11230  1584                     __ptext16:	
 11231 ;; *************** function _calculateCurrent1 *****************
 11232 ;; Defined at:
 11233 ;;		line 380 in file "main.c"
 11234 ;; Parameters:    Size  Location     Type
 11235 ;;		None
 11236 ;; Auto vars:     Size  Location     Type
 11237 ;;		None
 11238 ;; Return value:  Size  Location     Type
 11239 ;;                  1    wreg      void 
 11240 ;; Registers used:
 11241 ;;		wreg, status,2, status,0, pclath, cstack
 11242 ;; Tracked objects:
 11243 ;;		On entry : 0/0
 11244 ;;		On exit  : 0/0
 11245 ;;		Unchanged: 0/0
 11246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11247 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11248 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11249 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11250 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11251 ;;Total ram usage:        3 bytes
 11252 ;; Hardware stack levels used:    1
 11253 ;; Hardware stack levels required when called:    2
 11254 ;; This function calls:
 11255 ;;		___awtoft
 11256 ;;		___ftdiv
 11257 ;;		___fttol
 11258 ;; This function is called by:
 11259 ;;		_main
 11260 ;; This function uses a non-reentrant model
 11261 ;;
 11262                           
 11263                           
 11264                           ;psect for function _calculateCurrent1
 11265  1584                     _calculateCurrent1:	
 11266                           
 11267                           ;main.c: 382: if(Ianalogs[1]-580<=0)
 11268                           
 11269                           ;incstack = 0
 11270                           ; Regs used in _calculateCurrent1: [wreg+status,2+status,0+pclath+cstack]
 11271  1584  0022               	movlb	2	; select bank2
 11272  1585  0832               	movf	(_Ianalogs^(0+256)+2),w
 11273  1586  3EBC               	addlw	188
 11274  1587  0020               	movlb	0	; select bank0
 11275  1588  00BE               	movwf	??_calculateCurrent1
 11276  1589  30FD               	movlw	253
 11277  158A  0022               	movlb	2	; select bank2
 11278  158B  3D33               	addwfc	((_Ianalogs+1)^(0+256)+2),w
 11279  158C  0020               	movlb	0	; select bank0
 11280  158D  00BF               	movwf	??_calculateCurrent1+1
 11281  158E  083F               	movf	??_calculateCurrent1+1,w
 11282  158F  3A80               	xorlw	128
 11283  1590  00C0               	movwf	??_calculateCurrent1+2
 11284  1591  3080               	movlw	128
 11285  1592  0240               	subwf	??_calculateCurrent1+2,w
 11286  1593  1D03               	skipz
 11287  1594  2D97               	goto	u3645
 11288  1595  3001               	movlw	1
 11289  1596  023E               	subwf	??_calculateCurrent1,w
 11290  1597                     u3645:	
 11291  1597  1803               	skipnc
 11292  1598  2D9D               	goto	l3082
 11293                           
 11294                           ;main.c: 383: {
 11295                           ;main.c: 384: current[1]=0;
 11296  1599  0021               	movlb	1	; select bank1
 11297  159A  01A2               	clrf	(_current^(0+128)+2)
 11298  159B  01A3               	clrf	((_current+1)^(0+128)+2)
 11299                           
 11300                           ;main.c: 385: }
 11301  159C  0008               	return
 11302  159D                     l3082:	
 11303                           
 11304                           ;main.c: 386: else
 11305                           ;main.c: 387: {
 11306                           ;main.c: 388: current[1]=(int16_t)((Ianalogs[1]-580)/3.22);
 11307  159D  0022               	movlb	2	; select bank2
 11308  159E  0832               	movf	(_Ianalogs^(0+256)+2),w
 11309  159F  3EBC               	addlw	188
 11310  15A0  00F8               	movwf	___awtoft@c
 11311  15A1  30FD               	movlw	253
 11312  15A2  3D33               	addwfc	((_Ianalogs+1)^(0+256)+2),w
 11313  15A3  00F9               	movwf	___awtoft@c+1
 11314  15A4  3193  2354  3195   	fcall	___awtoft
 11315  15A7  0878               	movf	?___awtoft,w
 11316  15A8  0020               	movlb	0	; select bank0
 11317  15A9  00A3               	movwf	___ftdiv@f1
 11318  15AA  0879               	movf	?___awtoft+1,w
 11319  15AB  00A4               	movwf	___ftdiv@f1+1
 11320  15AC  087A               	movf	?___awtoft+2,w
 11321  15AD  00A5               	movwf	___ftdiv@f1+2
 11322  15AE  3014               	movlw	20
 11323  15AF  00A0               	movwf	___ftdiv@f2
 11324  15B0  304E               	movlw	78
 11325  15B1  00A1               	movwf	___ftdiv@f2+1
 11326  15B2  3040               	movlw	64
 11327  15B3  00A2               	movwf	___ftdiv@f2+2
 11328  15B4  3188  20FD  3195   	fcall	___ftdiv
 11329  15B7  0020               	movlb	0	; select bank0
 11330  15B8  0820               	movf	?___ftdiv,w
 11331  15B9  00B0               	movwf	___fttol@f1
 11332  15BA  0821               	movf	?___ftdiv+1,w
 11333  15BB  00B1               	movwf	___fttol@f1+1
 11334  15BC  0822               	movf	?___ftdiv+2,w
 11335  15BD  00B2               	movwf	___fttol@f1+2
 11336  15BE  3188  2076         	fcall	___fttol
 11337  15C0  0020               	movlb	0	; select bank0
 11338  15C1  0831               	movf	?___fttol+1,w
 11339  15C2  0021               	movlb	1	; select bank1
 11340  15C3  00A3               	movwf	((_current+1)^(0+128)+2)
 11341  15C4  0020               	movlb	0	; select bank0
 11342  15C5  0830               	movf	?___fttol,w
 11343  15C6  0021               	movlb	1	; select bank1
 11344  15C7  00A2               	movwf	(_current^(0+128)+2)
 11345  15C8  0008               	return
 11346  15C9                     __end_of_calculateCurrent1:	
 11347                           
 11348                           	psect	text17
 11349  153F                     __ptext17:	
 11350 ;; *************** function _calculateCurrent0 *****************
 11351 ;; Defined at:
 11352 ;;		line 367 in file "main.c"
 11353 ;; Parameters:    Size  Location     Type
 11354 ;;		None
 11355 ;; Auto vars:     Size  Location     Type
 11356 ;;		None
 11357 ;; Return value:  Size  Location     Type
 11358 ;;                  1    wreg      void 
 11359 ;; Registers used:
 11360 ;;		wreg, status,2, status,0, pclath, cstack
 11361 ;; Tracked objects:
 11362 ;;		On entry : 0/0
 11363 ;;		On exit  : 0/0
 11364 ;;		Unchanged: 0/0
 11365 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11366 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11367 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11368 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11369 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11370 ;;Total ram usage:        3 bytes
 11371 ;; Hardware stack levels used:    1
 11372 ;; Hardware stack levels required when called:    2
 11373 ;; This function calls:
 11374 ;;		___awtoft
 11375 ;;		___ftdiv
 11376 ;;		___fttol
 11377 ;; This function is called by:
 11378 ;;		_main
 11379 ;; This function uses a non-reentrant model
 11380 ;;
 11381                           
 11382                           
 11383                           ;psect for function _calculateCurrent0
 11384  153F                     _calculateCurrent0:	
 11385                           
 11386                           ;main.c: 369: if(Ianalogs[0]-580<=0)
 11387                           
 11388                           ;incstack = 0
 11389                           ; Regs used in _calculateCurrent0: [wreg+status,2+status,0+pclath+cstack]
 11390  153F  0022               	movlb	2	; select bank2
 11391  1540  0830               	movf	_Ianalogs^(0+256),w
 11392  1541  3EBC               	addlw	188
 11393  1542  0020               	movlb	0	; select bank0
 11394  1543  00BE               	movwf	??_calculateCurrent0
 11395  1544  30FD               	movlw	253
 11396  1545  0022               	movlb	2	; select bank2
 11397  1546  3D31               	addwfc	(_Ianalogs+1)^(0+256),w
 11398  1547  0020               	movlb	0	; select bank0
 11399  1548  00BF               	movwf	??_calculateCurrent0+1
 11400  1549  083F               	movf	??_calculateCurrent0+1,w
 11401  154A  3A80               	xorlw	128
 11402  154B  00C0               	movwf	??_calculateCurrent0+2
 11403  154C  3080               	movlw	128
 11404  154D  0240               	subwf	??_calculateCurrent0+2,w
 11405  154E  1D03               	skipz
 11406  154F  2D52               	goto	u3635
 11407  1550  3001               	movlw	1
 11408  1551  023E               	subwf	??_calculateCurrent0,w
 11409  1552                     u3635:	
 11410  1552  1803               	skipnc
 11411  1553  2D58               	goto	l3076
 11412                           
 11413                           ;main.c: 370: {
 11414                           ;main.c: 371: current[0]=0;
 11415  1554  0021               	movlb	1	; select bank1
 11416  1555  01A0               	clrf	_current^(0+128)
 11417  1556  01A1               	clrf	(_current+1)^(0+128)
 11418                           
 11419                           ;main.c: 372: }
 11420  1557  0008               	return
 11421  1558                     l3076:	
 11422                           
 11423                           ;main.c: 373: else
 11424                           ;main.c: 374: {
 11425                           ;main.c: 376: current[0]=(int16_t)((Ianalogs[0]-580)/3.15);
 11426  1558  0022               	movlb	2	; select bank2
 11427  1559  0830               	movf	_Ianalogs^(0+256),w
 11428  155A  3EBC               	addlw	188
 11429  155B  00F8               	movwf	___awtoft@c
 11430  155C  30FD               	movlw	253
 11431  155D  3D31               	addwfc	(_Ianalogs+1)^(0+256),w
 11432  155E  00F9               	movwf	___awtoft@c+1
 11433  155F  3193  2354  3195   	fcall	___awtoft
 11434  1562  0878               	movf	?___awtoft,w
 11435  1563  0020               	movlb	0	; select bank0
 11436  1564  00A3               	movwf	___ftdiv@f1
 11437  1565  0879               	movf	?___awtoft+1,w
 11438  1566  00A4               	movwf	___ftdiv@f1+1
 11439  1567  087A               	movf	?___awtoft+2,w
 11440  1568  00A5               	movwf	___ftdiv@f1+2
 11441  1569  309A               	movlw	154
 11442  156A  00A0               	movwf	___ftdiv@f2
 11443  156B  3049               	movlw	73
 11444  156C  00A1               	movwf	___ftdiv@f2+1
 11445  156D  3040               	movlw	64
 11446  156E  00A2               	movwf	___ftdiv@f2+2
 11447  156F  3188  20FD  3195   	fcall	___ftdiv
 11448  1572  0020               	movlb	0	; select bank0
 11449  1573  0820               	movf	?___ftdiv,w
 11450  1574  00B0               	movwf	___fttol@f1
 11451  1575  0821               	movf	?___ftdiv+1,w
 11452  1576  00B1               	movwf	___fttol@f1+1
 11453  1577  0822               	movf	?___ftdiv+2,w
 11454  1578  00B2               	movwf	___fttol@f1+2
 11455  1579  3188  2076         	fcall	___fttol
 11456  157B  0020               	movlb	0	; select bank0
 11457  157C  0831               	movf	?___fttol+1,w
 11458  157D  0021               	movlb	1	; select bank1
 11459  157E  00A1               	movwf	(_current+1)^(0+128)
 11460  157F  0020               	movlb	0	; select bank0
 11461  1580  0830               	movf	?___fttol,w
 11462  1581  0021               	movlb	1	; select bank1
 11463  1582  00A0               	movwf	_current^(0+128)
 11464  1583  0008               	return
 11465  1584                     __end_of_calculateCurrent0:	
 11466                           
 11467                           	psect	text18
 11468  0876                     __ptext18:	
 11469 ;; *************** function ___fttol *****************
 11470 ;; Defined at:
 11471 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
 11472 ;; Parameters:    Size  Location     Type
 11473 ;;  f1              3   16[BANK0 ] float 
 11474 ;; Auto vars:     Size  Location     Type
 11475 ;;  lval            4   25[BANK0 ] unsigned long 
 11476 ;;  exp1            1   29[BANK0 ] unsigned char 
 11477 ;;  sign1           1   24[BANK0 ] unsigned char 
 11478 ;; Return value:  Size  Location     Type
 11479 ;;                  4   16[BANK0 ] long 
 11480 ;; Registers used:
 11481 ;;		wreg, status,2, status,0
 11482 ;; Tracked objects:
 11483 ;;		On entry : 0/0
 11484 ;;		On exit  : 0/0
 11485 ;;		Unchanged: 0/0
 11486 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11487 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11488 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11489 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11490 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11491 ;;Total ram usage:       14 bytes
 11492 ;; Hardware stack levels used:    1
 11493 ;; This function calls:
 11494 ;;		Nothing
 11495 ;; This function is called by:
 11496 ;;		_tempCalc
 11497 ;;		_main
 11498 ;;		_calculateCurrent0
 11499 ;;		_calculateCurrent1
 11500 ;;		_calculateCurrent2
 11501 ;;		_calculateCurrent3
 11502 ;; This function uses a non-reentrant model
 11503 ;;
 11504                           
 11505                           
 11506                           ;psect for function ___fttol
 11507  0876                     ___fttol:	
 11508                           
 11509                           ;incstack = 0
 11510                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 11511  0876  0020               	movlb	0	; select bank0
 11512  0877  0830               	movf	___fttol@f1,w
 11513  0878  00B4               	movwf	??___fttol
 11514  0879  0831               	movf	___fttol@f1+1,w
 11515  087A  00B5               	movwf	??___fttol+1
 11516  087B  0832               	movf	___fttol@f1+2,w
 11517  087C  00B6               	movwf	??___fttol+2
 11518  087D  1003               	clrc
 11519  087E  0D35               	rlf	??___fttol+1,w
 11520  087F  0D36               	rlf	??___fttol+2,w
 11521  0880  00B7               	movwf	??___fttol+3
 11522  0881  0837               	movf	??___fttol+3,w
 11523  0882  00BD               	movwf	___fttol@exp1
 11524  0883  083D               	movf	___fttol@exp1,w
 11525  0884  1D03               	btfss	3,2
 11526  0885  288F               	goto	l2784
 11527  0886  3000               	movlw	0
 11528  0887  00B3               	movwf	?___fttol+3
 11529  0888  3000               	movlw	0
 11530  0889  00B2               	movwf	?___fttol+2
 11531  088A  3000               	movlw	0
 11532  088B  00B1               	movwf	?___fttol+1
 11533  088C  3000               	movlw	0
 11534  088D  00B0               	movwf	?___fttol
 11535  088E  0008               	return
 11536  088F                     l2784:	
 11537  088F  0830               	movf	___fttol@f1,w
 11538  0890  00B4               	movwf	??___fttol
 11539  0891  0831               	movf	___fttol@f1+1,w
 11540  0892  00B5               	movwf	??___fttol+1
 11541  0893  0832               	movf	___fttol@f1+2,w
 11542  0894  00B6               	movwf	??___fttol+2
 11543  0895  3017               	movlw	23
 11544  0896                     u2995:	
 11545  0896  36B6               	lsrf	??___fttol+2,f
 11546  0897  0CB5               	rrf	??___fttol+1,f
 11547  0898  0CB4               	rrf	??___fttol,f
 11548  0899  0B89               	decfsz	9,f
 11549  089A  2896               	goto	u2995
 11550  089B  0834               	movf	??___fttol,w
 11551  089C  00B7               	movwf	??___fttol+3
 11552  089D  0837               	movf	??___fttol+3,w
 11553  089E  00B8               	movwf	___fttol@sign1
 11554  089F  17B1               	bsf	___fttol@f1+1,7
 11555  08A0  30FF               	movlw	255
 11556  08A1  05B0               	andwf	___fttol@f1,f
 11557  08A2  30FF               	movlw	255
 11558  08A3  05B1               	andwf	___fttol@f1+1,f
 11559  08A4  3000               	movlw	0
 11560  08A5  05B2               	andwf	___fttol@f1+2,f
 11561  08A6  0830               	movf	___fttol@f1,w
 11562  08A7  00B9               	movwf	___fttol@lval
 11563  08A8  0831               	movf	___fttol@f1+1,w
 11564  08A9  00BA               	movwf	___fttol@lval+1
 11565  08AA  0832               	movf	___fttol@f1+2,w
 11566  08AB  00BB               	movwf	___fttol@lval+2
 11567  08AC  01BC               	clrf	___fttol@lval+3
 11568  08AD  308E               	movlw	142
 11569  08AE  02BD               	subwf	___fttol@exp1,f
 11570  08AF  1FBD               	btfss	___fttol@exp1,7
 11571  08B0  28CD               	goto	l2804
 11572  08B1  083D               	movf	___fttol@exp1,w
 11573  08B2  3A80               	xorlw	128
 11574  08B3  3E8F               	addlw	143
 11575  08B4  1803               	skipnc
 11576  08B5  28BF               	goto	l2802
 11577  08B6  3000               	movlw	0
 11578  08B7  00B3               	movwf	?___fttol+3
 11579  08B8  3000               	movlw	0
 11580  08B9  00B2               	movwf	?___fttol+2
 11581  08BA  3000               	movlw	0
 11582  08BB  00B1               	movwf	?___fttol+1
 11583  08BC  3000               	movlw	0
 11584  08BD  00B0               	movwf	?___fttol
 11585  08BE  0008               	return
 11586  08BF                     l2802:	
 11587  08BF  3001               	movlw	1
 11588  08C0                     u3025:	
 11589  08C0  36BC               	lsrf	___fttol@lval+3,f
 11590  08C1  0CBB               	rrf	___fttol@lval+2,f
 11591  08C2  0CBA               	rrf	___fttol@lval+1,f
 11592  08C3  0CB9               	rrf	___fttol@lval,f
 11593  08C4  0B89               	decfsz	9,f
 11594  08C5  28C0               	goto	u3025
 11595  08C6  3001               	movlw	1
 11596  08C7  00B4               	movwf	??___fttol
 11597  08C8  0834               	movf	??___fttol,w
 11598  08C9  07BD               	addwf	___fttol@exp1,f
 11599  08CA  1903               	btfsc	3,2
 11600  08CB  28E6               	goto	l2812
 11601  08CC  28BF               	goto	l2802
 11602  08CD                     l2804:	
 11603  08CD  3018               	movlw	24
 11604  08CE  023D               	subwf	___fttol@exp1,w
 11605  08CF  1C03               	skipc
 11606  08D0  28E3               	goto	l834
 11607  08D1  3000               	movlw	0
 11608  08D2  00B3               	movwf	?___fttol+3
 11609  08D3  3000               	movlw	0
 11610  08D4  00B2               	movwf	?___fttol+2
 11611  08D5  3000               	movlw	0
 11612  08D6  00B1               	movwf	?___fttol+1
 11613  08D7  3000               	movlw	0
 11614  08D8  00B0               	movwf	?___fttol
 11615  08D9  0008               	return
 11616  08DA                     l2810:	
 11617  08DA  3001               	movlw	1
 11618  08DB                     u3055:	
 11619  08DB  35B9               	lslf	___fttol@lval,f
 11620  08DC  0DBA               	rlf	___fttol@lval+1,f
 11621  08DD  0DBB               	rlf	___fttol@lval+2,f
 11622  08DE  0DBC               	rlf	___fttol@lval+3,f
 11623  08DF  0B89               	decfsz	9,f
 11624  08E0  28DB               	goto	u3055
 11625  08E1  3001               	movlw	1
 11626  08E2  02BD               	subwf	___fttol@exp1,f
 11627  08E3                     l834:	
 11628  08E3  083D               	movf	___fttol@exp1,w
 11629  08E4  1D03               	btfss	3,2
 11630  08E5  28DA               	goto	l2810
 11631  08E6                     l2812:	
 11632  08E6  0838               	movf	___fttol@sign1,w
 11633  08E7  1903               	btfsc	3,2
 11634  08E8  28F4               	goto	l2816
 11635  08E9  09B9               	comf	___fttol@lval,f
 11636  08EA  09BA               	comf	___fttol@lval+1,f
 11637  08EB  09BB               	comf	___fttol@lval+2,f
 11638  08EC  09BC               	comf	___fttol@lval+3,f
 11639  08ED  0AB9               	incf	___fttol@lval,f
 11640  08EE  1903               	skipnz
 11641  08EF  0ABA               	incf	___fttol@lval+1,f
 11642  08F0  1903               	skipnz
 11643  08F1  0ABB               	incf	___fttol@lval+2,f
 11644  08F2  1903               	skipnz
 11645  08F3  0ABC               	incf	___fttol@lval+3,f
 11646  08F4                     l2816:	
 11647  08F4  083C               	movf	___fttol@lval+3,w
 11648  08F5  00B3               	movwf	?___fttol+3
 11649  08F6  083B               	movf	___fttol@lval+2,w
 11650  08F7  00B2               	movwf	?___fttol+2
 11651  08F8  083A               	movf	___fttol@lval+1,w
 11652  08F9  00B1               	movwf	?___fttol+1
 11653  08FA  0839               	movf	___fttol@lval,w
 11654  08FB  00B0               	movwf	?___fttol
 11655  08FC  0008               	return
 11656  08FD                     __end_of___fttol:	
 11657                           
 11658                           	psect	text19
 11659  08FD                     __ptext19:	
 11660 ;; *************** function ___ftdiv *****************
 11661 ;; Defined at:
 11662 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
 11663 ;; Parameters:    Size  Location     Type
 11664 ;;  f2              3    0[BANK0 ] float 
 11665 ;;  f1              3    3[BANK0 ] float 
 11666 ;; Auto vars:     Size  Location     Type
 11667 ;;  f3              3   11[BANK0 ] float 
 11668 ;;  sign            1   15[BANK0 ] unsigned char 
 11669 ;;  exp             1   14[BANK0 ] unsigned char 
 11670 ;;  cntr            1   10[BANK0 ] unsigned char 
 11671 ;; Return value:  Size  Location     Type
 11672 ;;                  3    0[BANK0 ] float 
 11673 ;; Registers used:
 11674 ;;		wreg, status,2, status,0, pclath, cstack
 11675 ;; Tracked objects:
 11676 ;;		On entry : 0/0
 11677 ;;		On exit  : 0/0
 11678 ;;		Unchanged: 0/0
 11679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11680 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11681 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11682 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11683 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11684 ;;Total ram usage:       16 bytes
 11685 ;; Hardware stack levels used:    1
 11686 ;; Hardware stack levels required when called:    1
 11687 ;; This function calls:
 11688 ;;		___ftpack
 11689 ;; This function is called by:
 11690 ;;		_tempCalc
 11691 ;;		_main
 11692 ;;		_calculateCurrent0
 11693 ;;		_calculateCurrent1
 11694 ;;		_calculateCurrent2
 11695 ;;		_calculateCurrent3
 11696 ;; This function uses a non-reentrant model
 11697 ;;
 11698                           
 11699                           
 11700                           ;psect for function ___ftdiv
 11701  08FD                     ___ftdiv:	
 11702                           
 11703                           ;incstack = 0
 11704                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 11705  08FD  0020               	movlb	0	; select bank0
 11706  08FE  0823               	movf	___ftdiv@f1,w
 11707  08FF  00A6               	movwf	??___ftdiv
 11708  0900  0824               	movf	___ftdiv@f1+1,w
 11709  0901  00A7               	movwf	??___ftdiv+1
 11710  0902  0825               	movf	___ftdiv@f1+2,w
 11711  0903  00A8               	movwf	??___ftdiv+2
 11712  0904  1003               	clrc
 11713  0905  0D27               	rlf	??___ftdiv+1,w
 11714  0906  0D28               	rlf	??___ftdiv+2,w
 11715  0907  00A9               	movwf	??___ftdiv+3
 11716  0908  0829               	movf	??___ftdiv+3,w
 11717  0909  00AE               	movwf	___ftdiv@exp
 11718  090A  082E               	movf	___ftdiv@exp,w
 11719  090B  1D03               	btfss	3,2
 11720  090C  2914               	goto	l2734
 11721  090D  3000               	movlw	0
 11722  090E  00A0               	movwf	?___ftdiv
 11723  090F  3000               	movlw	0
 11724  0910  00A1               	movwf	?___ftdiv+1
 11725  0911  3000               	movlw	0
 11726  0912  00A2               	movwf	?___ftdiv+2
 11727  0913  0008               	return
 11728  0914                     l2734:	
 11729  0914  0820               	movf	___ftdiv@f2,w
 11730  0915  00A6               	movwf	??___ftdiv
 11731  0916  0821               	movf	___ftdiv@f2+1,w
 11732  0917  00A7               	movwf	??___ftdiv+1
 11733  0918  0822               	movf	___ftdiv@f2+2,w
 11734  0919  00A8               	movwf	??___ftdiv+2
 11735  091A  1003               	clrc
 11736  091B  0D27               	rlf	??___ftdiv+1,w
 11737  091C  0D28               	rlf	??___ftdiv+2,w
 11738  091D  00A9               	movwf	??___ftdiv+3
 11739  091E  0829               	movf	??___ftdiv+3,w
 11740  091F  00AF               	movwf	___ftdiv@sign
 11741  0920  082F               	movf	___ftdiv@sign,w
 11742  0921  1D03               	btfss	3,2
 11743  0922  292A               	goto	l2740
 11744  0923  3000               	movlw	0
 11745  0924  00A0               	movwf	?___ftdiv
 11746  0925  3000               	movlw	0
 11747  0926  00A1               	movwf	?___ftdiv+1
 11748  0927  3000               	movlw	0
 11749  0928  00A2               	movwf	?___ftdiv+2
 11750  0929  0008               	return
 11751  092A                     l2740:	
 11752  092A  3000               	movlw	0
 11753  092B  00AB               	movwf	___ftdiv@f3
 11754  092C  3000               	movlw	0
 11755  092D  00AC               	movwf	___ftdiv@f3+1
 11756  092E  3000               	movlw	0
 11757  092F  00AD               	movwf	___ftdiv@f3+2
 11758  0930  3089               	movlw	137
 11759  0931  072F               	addwf	___ftdiv@sign,w
 11760  0932  00A6               	movwf	??___ftdiv
 11761  0933  0826               	movf	??___ftdiv,w
 11762  0934  02AE               	subwf	___ftdiv@exp,f
 11763  0935  0823               	movf	___ftdiv@f1,w
 11764  0936  00A6               	movwf	??___ftdiv
 11765  0937  0824               	movf	___ftdiv@f1+1,w
 11766  0938  00A7               	movwf	??___ftdiv+1
 11767  0939  0825               	movf	___ftdiv@f1+2,w
 11768  093A  00A8               	movwf	??___ftdiv+2
 11769  093B  3010               	movlw	16
 11770  093C                     u2915:	
 11771  093C  36A8               	lsrf	??___ftdiv+2,f
 11772  093D  0CA7               	rrf	??___ftdiv+1,f
 11773  093E  0CA6               	rrf	??___ftdiv,f
 11774  093F  0B89               	decfsz	9,f
 11775  0940  293C               	goto	u2915
 11776  0941  0826               	movf	??___ftdiv,w
 11777  0942  00A9               	movwf	??___ftdiv+3
 11778  0943  0829               	movf	??___ftdiv+3,w
 11779  0944  00AF               	movwf	___ftdiv@sign
 11780  0945  0820               	movf	___ftdiv@f2,w
 11781  0946  00A6               	movwf	??___ftdiv
 11782  0947  0821               	movf	___ftdiv@f2+1,w
 11783  0948  00A7               	movwf	??___ftdiv+1
 11784  0949  0822               	movf	___ftdiv@f2+2,w
 11785  094A  00A8               	movwf	??___ftdiv+2
 11786  094B  3010               	movlw	16
 11787  094C                     u2925:	
 11788  094C  36A8               	lsrf	??___ftdiv+2,f
 11789  094D  0CA7               	rrf	??___ftdiv+1,f
 11790  094E  0CA6               	rrf	??___ftdiv,f
 11791  094F  0B89               	decfsz	9,f
 11792  0950  294C               	goto	u2925
 11793  0951  0826               	movf	??___ftdiv,w
 11794  0952  00A9               	movwf	??___ftdiv+3
 11795  0953  0829               	movf	??___ftdiv+3,w
 11796  0954  06AF               	xorwf	___ftdiv@sign,f
 11797  0955  3080               	movlw	128
 11798  0956  00A6               	movwf	??___ftdiv
 11799  0957  0826               	movf	??___ftdiv,w
 11800  0958  05AF               	andwf	___ftdiv@sign,f
 11801  0959  17A4               	bsf	___ftdiv@f1+1,7
 11802  095A  30FF               	movlw	255
 11803  095B  05A3               	andwf	___ftdiv@f1,f
 11804  095C  30FF               	movlw	255
 11805  095D  05A4               	andwf	___ftdiv@f1+1,f
 11806  095E  3000               	movlw	0
 11807  095F  05A5               	andwf	___ftdiv@f1+2,f
 11808  0960  17A1               	bsf	___ftdiv@f2+1,7
 11809  0961  30FF               	movlw	255
 11810  0962  05A0               	andwf	___ftdiv@f2,f
 11811  0963  30FF               	movlw	255
 11812  0964  05A1               	andwf	___ftdiv@f2+1,f
 11813  0965  3000               	movlw	0
 11814  0966  05A2               	andwf	___ftdiv@f2+2,f
 11815  0967  3018               	movlw	24
 11816  0968  00A6               	movwf	??___ftdiv
 11817  0969  0826               	movf	??___ftdiv,w
 11818  096A  00AA               	movwf	___ftdiv@cntr
 11819  096B                     l2754:	
 11820  096B  3001               	movlw	1
 11821  096C                     u2935:	
 11822  096C  35AB               	lslf	___ftdiv@f3,f
 11823  096D  0DAC               	rlf	___ftdiv@f3+1,f
 11824  096E  0DAD               	rlf	___ftdiv@f3+2,f
 11825  096F  0B89               	decfsz	9,f
 11826  0970  296C               	goto	u2935
 11827  0971  0822               	movf	___ftdiv@f2+2,w
 11828  0972  0225               	subwf	___ftdiv@f1+2,w
 11829  0973  1D03               	skipz
 11830  0974  297B               	goto	u2945
 11831  0975  0821               	movf	___ftdiv@f2+1,w
 11832  0976  0224               	subwf	___ftdiv@f1+1,w
 11833  0977  1D03               	skipz
 11834  0978  297B               	goto	u2945
 11835  0979  0820               	movf	___ftdiv@f2,w
 11836  097A  0223               	subwf	___ftdiv@f1,w
 11837  097B                     u2945:	
 11838  097B  1C03               	skipc
 11839  097C  2984               	goto	l2762
 11840  097D  0820               	movf	___ftdiv@f2,w
 11841  097E  02A3               	subwf	___ftdiv@f1,f
 11842  097F  0821               	movf	___ftdiv@f2+1,w
 11843  0980  3BA4               	subwfb	___ftdiv@f1+1,f
 11844  0981  0822               	movf	___ftdiv@f2+2,w
 11845  0982  3BA5               	subwfb	___ftdiv@f1+2,f
 11846  0983  142B               	bsf	___ftdiv@f3,0
 11847  0984                     l2762:	
 11848  0984  3001               	movlw	1
 11849  0985                     u2955:	
 11850  0985  35A3               	lslf	___ftdiv@f1,f
 11851  0986  0DA4               	rlf	___ftdiv@f1+1,f
 11852  0987  0DA5               	rlf	___ftdiv@f1+2,f
 11853  0988  0B89               	decfsz	9,f
 11854  0989  2985               	goto	u2955
 11855  098A  3001               	movlw	1
 11856  098B  02AA               	subwf	___ftdiv@cntr,f
 11857  098C  1D03               	btfss	3,2
 11858  098D  296B               	goto	l2754
 11859  098E  082B               	movf	___ftdiv@f3,w
 11860  098F  00F0               	movwf	___ftpack@arg
 11861  0990  082C               	movf	___ftdiv@f3+1,w
 11862  0991  00F1               	movwf	___ftpack@arg+1
 11863  0992  082D               	movf	___ftdiv@f3+2,w
 11864  0993  00F2               	movwf	___ftpack@arg+2
 11865  0994  082E               	movf	___ftdiv@exp,w
 11866  0995  00A6               	movwf	??___ftdiv
 11867  0996  0826               	movf	??___ftdiv,w
 11868  0997  00F3               	movwf	___ftpack@exp
 11869  0998  082F               	movf	___ftdiv@sign,w
 11870  0999  00A7               	movwf	??___ftdiv+1
 11871  099A  0827               	movf	??___ftdiv+1,w
 11872  099B  00F4               	movwf	___ftpack@sign
 11873  099C  3180  2017         	fcall	___ftpack
 11874  099E  0870               	movf	?___ftpack,w
 11875  099F  0020               	movlb	0	; select bank0
 11876  09A0  00A0               	movwf	?___ftdiv
 11877  09A1  0871               	movf	?___ftpack+1,w
 11878  09A2  00A1               	movwf	?___ftdiv+1
 11879  09A3  0872               	movf	?___ftpack+2,w
 11880  09A4  00A2               	movwf	?___ftdiv+2
 11881  09A5  0008               	return
 11882  09A6                     __end_of___ftdiv:	
 11883                           
 11884                           	psect	text20
 11885  1354                     __ptext20:	
 11886 ;; *************** function ___awtoft *****************
 11887 ;; Defined at:
 11888 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
 11889 ;; Parameters:    Size  Location     Type
 11890 ;;  c               2    8[COMMON] int 
 11891 ;; Auto vars:     Size  Location     Type
 11892 ;;  sign            1   13[COMMON] unsigned char 
 11893 ;; Return value:  Size  Location     Type
 11894 ;;                  3    8[COMMON] float 
 11895 ;; Registers used:
 11896 ;;		wreg, status,2, status,0, pclath, cstack
 11897 ;; Tracked objects:
 11898 ;;		On entry : 0/0
 11899 ;;		On exit  : 0/0
 11900 ;;		Unchanged: 0/0
 11901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11902 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11903 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11904 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11905 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11906 ;;Total ram usage:        6 bytes
 11907 ;; Hardware stack levels used:    1
 11908 ;; Hardware stack levels required when called:    1
 11909 ;; This function calls:
 11910 ;;		___ftpack
 11911 ;; This function is called by:
 11912 ;;		_tempCalc
 11913 ;;		_main
 11914 ;;		_calculateCurrent0
 11915 ;;		_calculateCurrent1
 11916 ;;		_calculateCurrent2
 11917 ;;		_calculateCurrent3
 11918 ;;		_log
 11919 ;; This function uses a non-reentrant model
 11920 ;;
 11921                           
 11922                           
 11923                           ;psect for function ___awtoft
 11924  1354                     ___awtoft:	
 11925                           
 11926                           ;incstack = 0
 11927                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 11928  1354  01FD               	clrf	___awtoft@sign
 11929  1355  1FF9               	btfss	___awtoft@c+1,7
 11930  1356  2B5E               	goto	l2406
 11931  1357  09F8               	comf	___awtoft@c,f
 11932  1358  09F9               	comf	___awtoft@c+1,f
 11933  1359  0AF8               	incf	___awtoft@c,f
 11934  135A  1903               	skipnz
 11935  135B  0AF9               	incf	___awtoft@c+1,f
 11936  135C  01FD               	clrf	___awtoft@sign
 11937  135D  0AFD               	incf	___awtoft@sign,f
 11938  135E                     l2406:	
 11939  135E  0878               	movf	___awtoft@c,w
 11940  135F  00F0               	movwf	___ftpack@arg
 11941  1360  0879               	movf	___awtoft@c+1,w
 11942  1361  00F1               	movwf	___ftpack@arg+1
 11943  1362  01F2               	clrf	___ftpack@arg+2
 11944  1363  308E               	movlw	142
 11945  1364  00FB               	movwf	??___awtoft
 11946  1365  087B               	movf	??___awtoft,w
 11947  1366  00F3               	movwf	___ftpack@exp
 11948  1367  087D               	movf	___awtoft@sign,w
 11949  1368  00FC               	movwf	??___awtoft+1
 11950  1369  087C               	movf	??___awtoft+1,w
 11951  136A  00F4               	movwf	___ftpack@sign
 11952  136B  3180  2017         	fcall	___ftpack
 11953  136D  0870               	movf	?___ftpack,w
 11954  136E  00F8               	movwf	?___awtoft
 11955  136F  0871               	movf	?___ftpack+1,w
 11956  1370  00F9               	movwf	?___awtoft+1
 11957  1371  0872               	movf	?___ftpack+2,w
 11958  1372  00FA               	movwf	?___awtoft+2
 11959  1373  0008               	return
 11960  1374                     __end_of___awtoft:	
 11961                           
 11962                           	psect	text21
 11963  0017                     __ptext21:	
 11964 ;; *************** function ___ftpack *****************
 11965 ;; Defined at:
 11966 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
 11967 ;; Parameters:    Size  Location     Type
 11968 ;;  arg             3    0[COMMON] unsigned um
 11969 ;;  exp             1    3[COMMON] unsigned char 
 11970 ;;  sign            1    4[COMMON] unsigned char 
 11971 ;; Auto vars:     Size  Location     Type
 11972 ;;		None
 11973 ;; Return value:  Size  Location     Type
 11974 ;;                  3    0[COMMON] float 
 11975 ;; Registers used:
 11976 ;;		wreg, status,2, status,0
 11977 ;; Tracked objects:
 11978 ;;		On entry : 0/0
 11979 ;;		On exit  : 0/0
 11980 ;;		Unchanged: 0/0
 11981 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11982 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11983 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11984 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11985 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11986 ;;Total ram usage:        8 bytes
 11987 ;; Hardware stack levels used:    1
 11988 ;; This function calls:
 11989 ;;		Nothing
 11990 ;; This function is called by:
 11991 ;;		___awtoft
 11992 ;;		___ftadd
 11993 ;;		___ftdiv
 11994 ;;		___ftmul
 11995 ;; This function uses a non-reentrant model
 11996 ;;
 11997                           
 11998                           
 11999                           ;psect for function ___ftpack
 12000  0017                     ___ftpack:	
 12001                           
 12002                           ;incstack = 0
 12003                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 12004  0017  0873               	movf	___ftpack@exp,w
 12005  0018  1903               	btfsc	3,2
 12006  0019  281F               	goto	l2200
 12007  001A  0872               	movf	___ftpack@arg+2,w
 12008  001B  0471               	iorwf	___ftpack@arg+1,w
 12009  001C  0470               	iorwf	___ftpack@arg,w
 12010  001D  1D03               	skipz
 12011  001E  2830               	goto	l2206
 12012  001F                     l2200:	
 12013  001F  3000               	movlw	0
 12014  0020  00F0               	movwf	?___ftpack
 12015  0021  3000               	movlw	0
 12016  0022  00F1               	movwf	?___ftpack+1
 12017  0023  3000               	movlw	0
 12018  0024  00F2               	movwf	?___ftpack+2
 12019  0025  0008               	return
 12020  0026                     l2204:	
 12021  0026  3001               	movlw	1
 12022  0027  00F5               	movwf	??___ftpack
 12023  0028  0875               	movf	??___ftpack,w
 12024  0029  07F3               	addwf	___ftpack@exp,f
 12025  002A  3001               	movlw	1
 12026  002B                     u2015:	
 12027  002B  36F2               	lsrf	___ftpack@arg+2,f
 12028  002C  0CF1               	rrf	___ftpack@arg+1,f
 12029  002D  0CF0               	rrf	___ftpack@arg,f
 12030  002E  0B89               	decfsz	9,f
 12031  002F  282B               	goto	u2015
 12032  0030                     l2206:	
 12033  0030  30FE               	movlw	254
 12034  0031  0572               	andwf	___ftpack@arg+2,w
 12035  0032  1903               	btfsc	3,2
 12036  0033  2849               	goto	l743
 12037  0034  2826               	goto	l2204
 12038  0035                     l2208:	
 12039  0035  3001               	movlw	1
 12040  0036  00F5               	movwf	??___ftpack
 12041  0037  0875               	movf	??___ftpack,w
 12042  0038  07F3               	addwf	___ftpack@exp,f
 12043  0039  3001               	movlw	1
 12044  003A  07F0               	addwf	___ftpack@arg,f
 12045  003B  3000               	movlw	0
 12046  003C  1803               	skipnc
 12047  003D  3001               	movlw	1
 12048  003E  07F1               	addwf	___ftpack@arg+1,f
 12049  003F  3000               	movlw	0
 12050  0040  1803               	skipnc
 12051  0041  3001               	movlw	1
 12052  0042  07F2               	addwf	___ftpack@arg+2,f
 12053  0043  3001               	movlw	1
 12054  0044                     u2035:	
 12055  0044  36F2               	lsrf	___ftpack@arg+2,f
 12056  0045  0CF1               	rrf	___ftpack@arg+1,f
 12057  0046  0CF0               	rrf	___ftpack@arg,f
 12058  0047  0B89               	decfsz	9,f
 12059  0048  2844               	goto	u2035
 12060  0049                     l743:	
 12061  0049  30FF               	movlw	255
 12062  004A  0572               	andwf	___ftpack@arg+2,w
 12063  004B  1903               	btfsc	3,2
 12064  004C  2856               	goto	l2216
 12065  004D  2835               	goto	l2208
 12066  004E                     l2214:	
 12067  004E  3001               	movlw	1
 12068  004F  02F3               	subwf	___ftpack@exp,f
 12069  0050  3001               	movlw	1
 12070  0051                     u2055:	
 12071  0051  35F0               	lslf	___ftpack@arg,f
 12072  0052  0DF1               	rlf	___ftpack@arg+1,f
 12073  0053  0DF2               	rlf	___ftpack@arg+2,f
 12074  0054  0B89               	decfsz	9,f
 12075  0055  2851               	goto	u2055
 12076  0056                     l2216:	
 12077  0056  1BF1               	btfsc	___ftpack@arg+1,7
 12078  0057  285C               	goto	l750
 12079  0058  3002               	movlw	2
 12080  0059  0273               	subwf	___ftpack@exp,w
 12081  005A  1803               	skipnc
 12082  005B  284E               	goto	l2214
 12083  005C                     l750:	
 12084  005C  1873               	btfsc	___ftpack@exp,0
 12085  005D  2864               	goto	l751
 12086  005E  30FF               	movlw	255
 12087  005F  05F0               	andwf	___ftpack@arg,f
 12088  0060  307F               	movlw	127
 12089  0061  05F1               	andwf	___ftpack@arg+1,f
 12090  0062  30FF               	movlw	255
 12091  0063  05F2               	andwf	___ftpack@arg+2,f
 12092  0064                     l751:	
 12093  0064  1003               	clrc
 12094  0065  0CF3               	rrf	___ftpack@exp,f
 12095  0066  0873               	movf	___ftpack@exp,w
 12096  0067  00F5               	movwf	??___ftpack
 12097  0068  01F6               	clrf	??___ftpack+1
 12098  0069  01F7               	clrf	??___ftpack+2
 12099  006A  3010               	movlw	16
 12100  006B                     u2095:	
 12101  006B  35F5               	lslf	??___ftpack,f
 12102  006C  0DF6               	rlf	??___ftpack+1,f
 12103  006D  0DF7               	rlf	??___ftpack+2,f
 12104  006E  0B89               	decfsz	9,f
 12105  006F  286B               	goto	u2095
 12106  0070  0875               	movf	??___ftpack,w
 12107  0071  04F0               	iorwf	___ftpack@arg,f
 12108  0072  0876               	movf	??___ftpack+1,w
 12109  0073  04F1               	iorwf	___ftpack@arg+1,f
 12110  0074  0877               	movf	??___ftpack+2,w
 12111  0075  04F2               	iorwf	___ftpack@arg+2,f
 12112  0076  0874               	movf	___ftpack@sign,w
 12113  0077  1903               	btfsc	3,2
 12114  0078  0008               	return
 12115  0079  17F2               	bsf	___ftpack@arg+2,7
 12116  007A  0008               	return
 12117  007B                     __end_of___ftpack:	
 12118                           
 12119                           	psect	text22
 12120  1455                     __ptext22:	
 12121 ;; *************** function _SYSTEM_Initialize *****************
 12122 ;; Defined at:
 12123 ;;		line 71 in file "system.c"
 12124 ;; Parameters:    Size  Location     Type
 12125 ;;		None
 12126 ;; Auto vars:     Size  Location     Type
 12127 ;;		None
 12128 ;; Return value:  Size  Location     Type
 12129 ;;                  1    wreg      void 
 12130 ;; Registers used:
 12131 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12132 ;; Tracked objects:
 12133 ;;		On entry : 0/0
 12134 ;;		On exit  : 0/0
 12135 ;;		Unchanged: 0/0
 12136 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12137 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12138 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12139 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12140 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12141 ;;Total ram usage:        2 bytes
 12142 ;; Hardware stack levels used:    1
 12143 ;; Hardware stack levels required when called:    3
 12144 ;; This function calls:
 12145 ;;		_ADC_Initialize
 12146 ;;		_Init_Battery_State_Machine
 12147 ;;		_LCDClear
 12148 ;;		_LCDInit
 12149 ;;		_OSCILLATOR_Initialize
 12150 ;;		_PIN_MANAGER_Initialize
 12151 ;;		_PWM_Initialize
 12152 ;;		_TMR2_Initialize
 12153 ;;		_TMR4_Initialize
 12154 ;; This function is called by:
 12155 ;;		_main
 12156 ;; This function uses a non-reentrant model
 12157 ;;
 12158                           
 12159                           
 12160                           ;psect for function _SYSTEM_Initialize
 12161  1455                     _SYSTEM_Initialize:	
 12162                           
 12163                           ;system.c: 73: PIN_MANAGER_Initialize();
 12164                           
 12165                           ;incstack = 0
 12166                           ; Regs used in _SYSTEM_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12167  1455  3194  241E  3194   	fcall	_PIN_MANAGER_Initialize
 12168                           
 12169                           ;system.c: 74: OSCILLATOR_Initialize();
 12170  1458  3192  2271  3194   	fcall	_OSCILLATOR_Initialize
 12171                           
 12172                           ;system.c: 76: ADC_Initialize();
 12173  145B  3193  2335  3194   	fcall	_ADC_Initialize
 12174                           
 12175                           ;system.c: 77: PWM_Initialize();
 12176  145E  3192  22A2  3194   	fcall	_PWM_Initialize
 12177                           
 12178                           ;system.c: 79: TMR2_Initialize();
 12179  1461  3192  2286  3194   	fcall	_TMR2_Initialize
 12180                           
 12181                           ;system.c: 80: TMR4_Initialize();
 12182  1464  3192  2294  3194   	fcall	_TMR4_Initialize
 12183                           
 12184                           ;system.c: 81: Init_Battery_State_Machine(0);
 12185  1467  3000               	movlw	0
 12186  1468  3193  23EB  3194   	fcall	_Init_Battery_State_Machine
 12187                           
 12188                           ;system.c: 82: Init_Battery_State_Machine(1);
 12189  146B  3001               	movlw	1
 12190  146C  3193  23EB  3194   	fcall	_Init_Battery_State_Machine
 12191                           
 12192                           ;system.c: 83: LCDInit();
 12193  146F  3194  248E  3194   	fcall	_LCDInit
 12194                           
 12195                           ;system.c: 84: _delay((unsigned long)((200)*(32000000/4000.0)));
 12196  1472  3009               	movlw	9
 12197  1473  00FC               	movwf	??_SYSTEM_Initialize+1
 12198  1474  301E               	movlw	30
 12199  1475  00FB               	movwf	??_SYSTEM_Initialize
 12200  1476  30E4               	movlw	228
 12201  1477                     u3997:	
 12202  1477  0B89               	decfsz	9,f
 12203  1478  2C77               	goto	u3997
 12204  1479  0BFB               	decfsz	??_SYSTEM_Initialize,f
 12205  147A  2C77               	goto	u3997
 12206  147B  0BFC               	decfsz	??_SYSTEM_Initialize+1,f
 12207  147C  2C77               	goto	u3997
 12208  147D  3200               	nop2
 12209                           
 12210                           ;system.c: 85: LCDClear();
 12211  147E  3193  2399  3194   	fcall	_LCDClear
 12212                           
 12213                           ;system.c: 86: _delay((unsigned long)((200)*(32000000/4000.0)));
 12214  1481  3009               	movlw	9
 12215  1482  00FC               	movwf	??_SYSTEM_Initialize+1
 12216  1483  301E               	movlw	30
 12217  1484  00FB               	movwf	??_SYSTEM_Initialize
 12218  1485  30E4               	movlw	228
 12219  1486                     u4007:	
 12220  1486  0B89               	decfsz	9,f
 12221  1487  2C86               	goto	u4007
 12222  1488  0BFB               	decfsz	??_SYSTEM_Initialize,f
 12223  1489  2C86               	goto	u4007
 12224  148A  0BFC               	decfsz	??_SYSTEM_Initialize+1,f
 12225  148B  2C86               	goto	u4007
 12226  148C  3200               	nop2
 12227  148D  0008               	return
 12228  148E                     __end_of_SYSTEM_Initialize:	
 12229                           
 12230                           	psect	text23
 12231  1294                     __ptext23:	
 12232 ;; *************** function _TMR4_Initialize *****************
 12233 ;; Defined at:
 12234 ;;		line 25 in file "tmr.c"
 12235 ;; Parameters:    Size  Location     Type
 12236 ;;		None
 12237 ;; Auto vars:     Size  Location     Type
 12238 ;;		None
 12239 ;; Return value:  Size  Location     Type
 12240 ;;                  1    wreg      void 
 12241 ;; Registers used:
 12242 ;;		wreg, status,2
 12243 ;; Tracked objects:
 12244 ;;		On entry : 0/0
 12245 ;;		On exit  : 0/0
 12246 ;;		Unchanged: 0/0
 12247 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12248 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12249 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12250 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12251 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12252 ;;Total ram usage:        0 bytes
 12253 ;; Hardware stack levels used:    1
 12254 ;; This function calls:
 12255 ;;		Nothing
 12256 ;; This function is called by:
 12257 ;;		_SYSTEM_Initialize
 12258 ;; This function uses a non-reentrant model
 12259 ;;
 12260                           
 12261                           
 12262                           ;psect for function _TMR4_Initialize
 12263  1294                     _TMR4_Initialize:	
 12264                           
 12265                           ;tmr.c: 27: T4CON = 0x00;
 12266                           
 12267                           ;incstack = 0
 12268                           ; Regs used in _TMR4_Initialize: [wreg+status,2]
 12269  1294  0025               	movlb	5	; select bank5
 12270  1295  0194               	clrf	20	;volatile
 12271                           
 12272                           ;tmr.c: 29: T4CLKCON = 0x01;
 12273  1296  3001               	movlw	1
 12274  1297  0096               	movwf	22	;volatile
 12275                           
 12276                           ;tmr.c: 31: T4HLT = 0x00;
 12277  1298  0195               	clrf	21	;volatile
 12278                           
 12279                           ;tmr.c: 33: T4RST = 0x00;
 12280  1299  0197               	clrf	23	;volatile
 12281                           
 12282                           ;tmr.c: 35: T4PR = 0xFE;
 12283  129A  30FE               	movlw	254
 12284  129B  0093               	movwf	19	;volatile
 12285                           
 12286                           ;tmr.c: 39: T4TMR = 0x00;
 12287  129C  0192               	clrf	18	;volatile
 12288                           
 12289                           ;tmr.c: 41: PIR4bits.TMR4IF = 0;
 12290  129D  002E               	movlb	14	; select bank14
 12291  129E  1190               	bcf	16,3	;volatile
 12292                           
 12293                           ;tmr.c: 43: T4CONbits.TMR4ON = 1;
 12294  129F  0025               	movlb	5	; select bank5
 12295  12A0  1794               	bsf	20,7	;volatile
 12296  12A1  0008               	return
 12297  12A2                     __end_of_TMR4_Initialize:	
 12298                           
 12299                           	psect	text24
 12300  1286                     __ptext24:	
 12301 ;; *************** function _TMR2_Initialize *****************
 12302 ;; Defined at:
 12303 ;;		line 3 in file "tmr.c"
 12304 ;; Parameters:    Size  Location     Type
 12305 ;;		None
 12306 ;; Auto vars:     Size  Location     Type
 12307 ;;		None
 12308 ;; Return value:  Size  Location     Type
 12309 ;;                  1    wreg      void 
 12310 ;; Registers used:
 12311 ;;		wreg, status,2
 12312 ;; Tracked objects:
 12313 ;;		On entry : 0/0
 12314 ;;		On exit  : 0/0
 12315 ;;		Unchanged: 0/0
 12316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12318 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12319 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12320 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12321 ;;Total ram usage:        0 bytes
 12322 ;; Hardware stack levels used:    1
 12323 ;; This function calls:
 12324 ;;		Nothing
 12325 ;; This function is called by:
 12326 ;;		_SYSTEM_Initialize
 12327 ;; This function uses a non-reentrant model
 12328 ;;
 12329                           
 12330                           
 12331                           ;psect for function _TMR2_Initialize
 12332  1286                     _TMR2_Initialize:	
 12333                           
 12334                           ;tmr.c: 5: T2CON = 0x00;
 12335                           
 12336                           ;incstack = 0
 12337                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
 12338  1286  0025               	movlb	5	; select bank5
 12339  1287  018E               	clrf	14	;volatile
 12340                           
 12341                           ;tmr.c: 7: T2CLKCON = 0x01;
 12342  1288  3001               	movlw	1
 12343  1289  0090               	movwf	16	;volatile
 12344                           
 12345                           ;tmr.c: 9: T2HLT = 0x00;
 12346  128A  018F               	clrf	15	;volatile
 12347                           
 12348                           ;tmr.c: 11: T2RST = 0x00;
 12349  128B  0191               	clrf	17	;volatile
 12350                           
 12351                           ;tmr.c: 13: T2PR = 0xFE;
 12352  128C  30FE               	movlw	254
 12353  128D  008D               	movwf	13	;volatile
 12354                           
 12355                           ;tmr.c: 18: T2TMR = 0x00;
 12356  128E  018C               	clrf	12	;volatile
 12357                           
 12358                           ;tmr.c: 20: PIR4bits.TMR2IF = 0;
 12359  128F  002E               	movlb	14	; select bank14
 12360  1290  1090               	bcf	16,1	;volatile
 12361                           
 12362                           ;tmr.c: 22: T2CONbits.TMR2ON = 1;
 12363  1291  0025               	movlb	5	; select bank5
 12364  1292  178E               	bsf	14,7	;volatile
 12365  1293  0008               	return
 12366  1294                     __end_of_TMR2_Initialize:	
 12367                           
 12368                           	psect	text25
 12369  12A2                     __ptext25:	
 12370 ;; *************** function _PWM_Initialize *****************
 12371 ;; Defined at:
 12372 ;;		line 3 in file "pwm.c"
 12373 ;; Parameters:    Size  Location     Type
 12374 ;;		None
 12375 ;; Auto vars:     Size  Location     Type
 12376 ;;		None
 12377 ;; Return value:  Size  Location     Type
 12378 ;;                  1    wreg      void 
 12379 ;; Registers used:
 12380 ;;		wreg, status,2, status,0
 12381 ;; Tracked objects:
 12382 ;;		On entry : 0/0
 12383 ;;		On exit  : 0/0
 12384 ;;		Unchanged: 0/0
 12385 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12386 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12387 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12388 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12389 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12390 ;;Total ram usage:        0 bytes
 12391 ;; Hardware stack levels used:    1
 12392 ;; This function calls:
 12393 ;;		Nothing
 12394 ;; This function is called by:
 12395 ;;		_SYSTEM_Initialize
 12396 ;; This function uses a non-reentrant model
 12397 ;;
 12398                           
 12399                           
 12400                           ;psect for function _PWM_Initialize
 12401  12A2                     _PWM_Initialize:	
 12402                           
 12403                           ;pwm.c: 5: PWM6CON = 0x80;
 12404                           
 12405                           ;incstack = 0
 12406                           ; Regs used in _PWM_Initialize: [wreg+status,2+status,0]
 12407  12A2  3080               	movlw	128
 12408  12A3  0027               	movlb	7	; select bank7
 12409  12A4  008E               	movwf	14	;volatile
 12410                           
 12411                           ;pwm.c: 7: PWM6DCH = 0x00;
 12412  12A5  018D               	clrf	13	;volatile
 12413                           
 12414                           ;pwm.c: 9: PWM6DCL = 0x00;
 12415  12A6  018C               	clrf	12	;volatile
 12416                           
 12417                           ;pwm.c: 11: CCPTMRS1bits.P6TSEL = 0x01;
 12418  12A7  0024               	movlb	4	; select bank4
 12419  12A8  081F               	movf	31,w	;volatile
 12420  12A9  39F3               	andlw	-13
 12421  12AA  3804               	iorlw	4
 12422  12AB  009F               	movwf	31	;volatile
 12423                           
 12424                           ;pwm.c: 14: PWM7CON = 0x80;
 12425  12AC  3080               	movlw	128
 12426  12AD  0027               	movlb	7	; select bank7
 12427  12AE  0092               	movwf	18	;volatile
 12428                           
 12429                           ;pwm.c: 16: PWM7DCH = 0x00;
 12430  12AF  0191               	clrf	17	;volatile
 12431                           
 12432                           ;pwm.c: 18: PWM7DCL = 0x00;
 12433  12B0  0190               	clrf	16	;volatile
 12434                           
 12435                           ;pwm.c: 20: CCPTMRS1bits.P7TSEL = 0x02;
 12436  12B1  0024               	movlb	4	; select bank4
 12437  12B2  081F               	movf	31,w	;volatile
 12438  12B3  39CF               	andlw	-49
 12439  12B4  3820               	iorlw	32
 12440  12B5  009F               	movwf	31	;volatile
 12441  12B6  0008               	return
 12442  12B7                     __end_of_PWM_Initialize:	
 12443                           
 12444                           	psect	text26
 12445  141E                     __ptext26:	
 12446 ;; *************** function _PIN_MANAGER_Initialize *****************
 12447 ;; Defined at:
 12448 ;;		line 5 in file "pin_manager.c"
 12449 ;; Parameters:    Size  Location     Type
 12450 ;;		None
 12451 ;; Auto vars:     Size  Location     Type
 12452 ;;  state           1    0[COMMON] char 
 12453 ;; Return value:  Size  Location     Type
 12454 ;;                  1    wreg      void 
 12455 ;; Registers used:
 12456 ;;		wreg, status,2
 12457 ;; Tracked objects:
 12458 ;;		On entry : 0/0
 12459 ;;		On exit  : 0/0
 12460 ;;		Unchanged: 0/0
 12461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12462 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12463 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12464 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12465 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12466 ;;Total ram usage:        1 bytes
 12467 ;; Hardware stack levels used:    1
 12468 ;; This function calls:
 12469 ;;		Nothing
 12470 ;; This function is called by:
 12471 ;;		_SYSTEM_Initialize
 12472 ;; This function uses a non-reentrant model
 12473 ;;
 12474                           
 12475                           
 12476                           ;psect for function _PIN_MANAGER_Initialize
 12477  141E                     _PIN_MANAGER_Initialize:	
 12478                           
 12479                           ;pin_manager.c: 7: LATA = 0x20;
 12480                           
 12481                           ;incstack = 0
 12482                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
 12483  141E  3020               	movlw	32
 12484  141F  0020               	movlb	0	; select bank0
 12485  1420  0096               	movwf	22	;volatile
 12486                           
 12487                           ;pin_manager.c: 8: LATB = 0x00;
 12488  1421  0197               	clrf	23	;volatile
 12489                           
 12490                           ;pin_manager.c: 9: LATC = 0x00;
 12491  1422  0198               	clrf	24	;volatile
 12492                           
 12493                           ;pin_manager.c: 11: WPUA = 0x00;
 12494  1423  003E               	movlb	30	; select bank30
 12495  1424  01B9               	clrf	57	;volatile
 12496                           
 12497                           ;pin_manager.c: 12: WPUB = 0x00;
 12498  1425  01C4               	clrf	68	;volatile
 12499                           
 12500                           ;pin_manager.c: 13: WPUC = 0x00;
 12501  1426  01CF               	clrf	79	;volatile
 12502                           
 12503                           ;pin_manager.c: 14: WPUE = 0x8;
 12504  1427  3008               	movlw	8
 12505  1428  00E5               	movwf	101	;volatile
 12506                           
 12507                           ;pin_manager.c: 16: TRISA = 0x00;
 12508  1429  0020               	movlb	0	; select bank0
 12509  142A  0191               	clrf	17	;volatile
 12510                           
 12511                           ;pin_manager.c: 17: TRISB = 0x0E;
 12512  142B  300E               	movlw	14
 12513  142C  0092               	movwf	18	;volatile
 12514                           
 12515                           ;pin_manager.c: 18: TRISC = 0xFF;
 12516  142D  30FF               	movlw	255
 12517  142E  0093               	movwf	19	;volatile
 12518                           
 12519                           ;pin_manager.c: 20: ANSELA = 0x00;
 12520  142F  003E               	movlb	30	; select bank30
 12521  1430  01B8               	clrf	56	;volatile
 12522                           
 12523                           ;pin_manager.c: 21: ANSELB = 0x0A;
 12524  1431  300A               	movlw	10
 12525  1432  00C3               	movwf	67	;volatile
 12526                           
 12527                           ;pin_manager.c: 22: ANSELC = 0xFF;
 12528  1433  30FF               	movlw	255
 12529  1434  00CE               	movwf	78	;volatile
 12530                           
 12531                           ;pin_manager.c: 25: PIE0bits.IOCIE = 0;
 12532  1435  002E               	movlb	14	; select bank14
 12533  1436  1216               	bcf	22,4	;volatile
 12534                           
 12535                           ;pin_manager.c: 26: int8_t state = GIE;
 12536  1437  3000               	movlw	0
 12537  1438  1B8B               	btfsc	11,7	;volatile
 12538  1439  3001               	movlw	1
 12539  143A  00F0               	movwf	PIN_MANAGER_Initialize@state
 12540                           
 12541                           ;pin_manager.c: 27: GIE = 0;
 12542  143B  138B               	bcf	11,7	;volatile
 12543                           
 12544                           ;pin_manager.c: 28: PPSLOCK = 0x55;
 12545  143C  3055               	movlw	85
 12546  143D  003D               	movlb	29	; select bank29
 12547  143E  008F               	movwf	15	;volsfr
 12548                           
 12549                           ;pin_manager.c: 29: PPSLOCK = 0xAA;
 12550  143F  30AA               	movlw	170
 12551  1440  008F               	movwf	15	;volsfr
 12552                           
 12553                           ;pin_manager.c: 30: PPSLOCKbits.PPSLOCKED = 0x00;
 12554  1441  100F               	bcf	15,0	;volsfr
 12555                           
 12556                           ;pin_manager.c: 32: RA6PPS = 0x0E;
 12557  1442  300E               	movlw	14
 12558  1443  003E               	movlb	30	; select bank30
 12559  1444  0096               	movwf	22	;volatile
 12560                           
 12561                           ;pin_manager.c: 33: RA7PPS = 0x0F;
 12562  1445  300F               	movlw	15
 12563  1446  0097               	movwf	23	;volatile
 12564                           
 12565                           ;pin_manager.c: 34: RB0PPS = 0x09;
 12566  1447  3009               	movlw	9
 12567  1448  0098               	movwf	24	;volatile
 12568                           
 12569                           ;pin_manager.c: 35: PPSLOCK = 0x55;
 12570  1449  3055               	movlw	85
 12571  144A  003D               	movlb	29	; select bank29
 12572  144B  008F               	movwf	15	;volsfr
 12573                           
 12574                           ;pin_manager.c: 36: PPSLOCK = 0xAA;
 12575  144C  30AA               	movlw	170
 12576  144D  008F               	movwf	15	;volsfr
 12577                           
 12578                           ;pin_manager.c: 37: PPSLOCKbits.PPSLOCKED = 0x01;
 12579  144E  140F               	bsf	15,0	;volsfr
 12580                           
 12581                           ;pin_manager.c: 38: GIE = state;
 12582  144F  1C70               	btfss	PIN_MANAGER_Initialize@state,0
 12583  1450  2C53               	goto	u2650
 12584  1451  178B               	bsf	11,7	;volatile
 12585  1452  0008               	return
 12586  1453                     u2650:	
 12587  1453  138B               	bcf	11,7	;volatile
 12588  1454  0008               	return
 12589  1455                     __end_of_PIN_MANAGER_Initialize:	
 12590                           
 12591                           	psect	text27
 12592  1271                     __ptext27:	
 12593 ;; *************** function _OSCILLATOR_Initialize *****************
 12594 ;; Defined at:
 12595 ;;		line 89 in file "system.c"
 12596 ;; Parameters:    Size  Location     Type
 12597 ;;		None
 12598 ;; Auto vars:     Size  Location     Type
 12599 ;;		None
 12600 ;; Return value:  Size  Location     Type
 12601 ;;                  1    wreg      void 
 12602 ;; Registers used:
 12603 ;;		wreg, status,2
 12604 ;; Tracked objects:
 12605 ;;		On entry : 0/0
 12606 ;;		On exit  : 0/0
 12607 ;;		Unchanged: 0/0
 12608 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12609 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12610 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12611 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12612 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12613 ;;Total ram usage:        0 bytes
 12614 ;; Hardware stack levels used:    1
 12615 ;; This function calls:
 12616 ;;		Nothing
 12617 ;; This function is called by:
 12618 ;;		_SYSTEM_Initialize
 12619 ;; This function uses a non-reentrant model
 12620 ;;
 12621                           
 12622                           
 12623                           ;psect for function _OSCILLATOR_Initialize
 12624  1271                     _OSCILLATOR_Initialize:	
 12625                           
 12626                           ;system.c: 91: OSCCON1 = 0x60;
 12627                           
 12628                           ;incstack = 0
 12629                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 12630  1271  3060               	movlw	96
 12631  1272  0031               	movlb	17	; select bank17
 12632  1273  008D               	movwf	13	;volatile
 12633                           
 12634                           ;system.c: 92: OSCCON3 = 0x00;
 12635  1274  018F               	clrf	15	;volatile
 12636                           
 12637                           ;system.c: 93: OSCEN = 0x00;
 12638  1275  0191               	clrf	17	;volatile
 12639                           
 12640                           ;system.c: 94: OSCFRQ = 0x06;
 12641  1276  3006               	movlw	6
 12642  1277  0093               	movwf	19	;volatile
 12643                           
 12644                           ;system.c: 95: OSCTUNE = 0x00;
 12645  1278  0192               	clrf	18	;volatile
 12646  1279  0008               	return
 12647  127A                     __end_of_OSCILLATOR_Initialize:	
 12648                           
 12649                           	psect	text28
 12650  148E                     __ptext28:	
 12651 ;; *************** function _LCDInit *****************
 12652 ;; Defined at:
 12653 ;;		line 247 in file "lcd.c"
 12654 ;; Parameters:    Size  Location     Type
 12655 ;;		None
 12656 ;; Auto vars:     Size  Location     Type
 12657 ;;		None
 12658 ;; Return value:  Size  Location     Type
 12659 ;;                  1    wreg      void 
 12660 ;; Registers used:
 12661 ;;		wreg, status,2, status,0, pclath, cstack
 12662 ;; Tracked objects:
 12663 ;;		On entry : 0/0
 12664 ;;		On exit  : 0/0
 12665 ;;		Unchanged: 0/0
 12666 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12667 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12668 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12669 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12670 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12671 ;;Total ram usage:        1 bytes
 12672 ;; Hardware stack levels used:    1
 12673 ;; Hardware stack levels required when called:    1
 12674 ;; This function calls:
 12675 ;;		_LCDWrite
 12676 ;; This function is called by:
 12677 ;;		_SYSTEM_Initialize
 12678 ;;		_main
 12679 ;; This function uses a non-reentrant model
 12680 ;;
 12681                           
 12682                           
 12683                           ;psect for function _LCDInit
 12684  148E                     _LCDInit:	
 12685                           
 12686                           ;lcd.c: 249: TRISAbits.TRISA0 = 0;
 12687                           
 12688                           ;incstack = 0
 12689                           ; Regs used in _LCDInit: [wreg+status,2+status,0+pclath+cstack]
 12690  148E  0020               	movlb	0	; select bank0
 12691  148F  1011               	bcf	17,0	;volatile
 12692                           
 12693                           ;lcd.c: 250: TRISAbits.TRISA1 = 0;
 12694  1490  1091               	bcf	17,1	;volatile
 12695                           
 12696                           ;lcd.c: 251: TRISAbits.TRISA2 = 0;
 12697  1491  1111               	bcf	17,2	;volatile
 12698                           
 12699                           ;lcd.c: 252: TRISAbits.TRISA3 = 0;
 12700  1492  1191               	bcf	17,3	;volatile
 12701                           
 12702                           ;lcd.c: 253: TRISAbits.TRISA4 = 0;
 12703  1493  1211               	bcf	17,4	;volatile
 12704                           
 12705                           ;lcd.c: 254: LATAbits.LATA3 = 0;
 12706  1494  1196               	bcf	22,3	;volatile
 12707                           
 12708                           ;lcd.c: 255: LATAbits.LATA4 = 0;
 12709  1495  1216               	bcf	22,4	;volatile
 12710                           
 12711                           ;lcd.c: 256: LATAbits.LATA2 = 0;
 12712  1496  1116               	bcf	22,2	;volatile
 12713                           
 12714                           ;lcd.c: 257: LATAbits.LATA0 = 0;
 12715  1497  1016               	bcf	22,0	;volatile
 12716                           
 12717                           ;lcd.c: 259: LATAbits.LATA0 = 1;
 12718  1498  1416               	bsf	22,0	;volatile
 12719                           
 12720                           ;lcd.c: 261: LCDWrite(0, 0x21);
 12721  1499  3021               	movlw	33
 12722  149A  00F5               	movwf	??_LCDInit
 12723  149B  0875               	movf	??_LCDInit,w
 12724  149C  00F0               	movwf	LCDWrite@data
 12725  149D  3000               	movlw	0
 12726  149E  3193  2374  3194   	fcall	_LCDWrite
 12727                           
 12728                           ;lcd.c: 269: LCDWrite(0, 0XB9);
 12729  14A1  30B9               	movlw	185
 12730  14A2  00F5               	movwf	??_LCDInit
 12731  14A3  0875               	movf	??_LCDInit,w
 12732  14A4  00F0               	movwf	LCDWrite@data
 12733  14A5  3000               	movlw	0
 12734  14A6  3193  2374  3194   	fcall	_LCDWrite
 12735                           
 12736                           ;lcd.c: 271: LCDWrite(0, 0x04);
 12737  14A9  3004               	movlw	4
 12738  14AA  00F5               	movwf	??_LCDInit
 12739  14AB  0875               	movf	??_LCDInit,w
 12740  14AC  00F0               	movwf	LCDWrite@data
 12741  14AD  3000               	movlw	0
 12742  14AE  3193  2374  3194   	fcall	_LCDWrite
 12743                           
 12744                           ;lcd.c: 273: LCDWrite(0, 0x14);
 12745  14B1  3014               	movlw	20
 12746  14B2  00F5               	movwf	??_LCDInit
 12747  14B3  0875               	movf	??_LCDInit,w
 12748  14B4  00F0               	movwf	LCDWrite@data
 12749  14B5  3000               	movlw	0
 12750  14B6  3193  2374  3194   	fcall	_LCDWrite
 12751                           
 12752                           ;lcd.c: 275: LCDWrite(0, 0x20);
 12753  14B9  3020               	movlw	32
 12754  14BA  00F5               	movwf	??_LCDInit
 12755  14BB  0875               	movf	??_LCDInit,w
 12756  14BC  00F0               	movwf	LCDWrite@data
 12757  14BD  3000               	movlw	0
 12758  14BE  3193  2374  3194   	fcall	_LCDWrite
 12759                           
 12760                           ;lcd.c: 277: LCDWrite(0, 0x0C);
 12761  14C1  300C               	movlw	12
 12762  14C2  00F5               	movwf	??_LCDInit
 12763  14C3  0875               	movf	??_LCDInit,w
 12764  14C4  00F0               	movwf	LCDWrite@data
 12765  14C5  3000               	movlw	0
 12766  14C6  3193  2374         	fcall	_LCDWrite
 12767  14C8  0008               	return
 12768  14C9                     __end_of_LCDInit:	
 12769                           
 12770                           	psect	text29
 12771  1399                     __ptext29:	
 12772 ;; *************** function _LCDClear *****************
 12773 ;; Defined at:
 12774 ;;		line 182 in file "lcd.c"
 12775 ;; Parameters:    Size  Location     Type
 12776 ;;		None
 12777 ;; Auto vars:     Size  Location     Type
 12778 ;;  index           2    9[COMMON] int 
 12779 ;; Return value:  Size  Location     Type
 12780 ;;                  1    wreg      void 
 12781 ;; Registers used:
 12782 ;;		wreg, status,2, status,0, pclath, cstack
 12783 ;; Tracked objects:
 12784 ;;		On entry : 0/0
 12785 ;;		On exit  : 0/0
 12786 ;;		Unchanged: 0/0
 12787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12788 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12789 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12790 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12791 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12792 ;;Total ram usage:        3 bytes
 12793 ;; Hardware stack levels used:    1
 12794 ;; Hardware stack levels required when called:    2
 12795 ;; This function calls:
 12796 ;;		_LCDWrite
 12797 ;;		_gotoXY
 12798 ;; This function is called by:
 12799 ;;		_SYSTEM_Initialize
 12800 ;;		_main
 12801 ;; This function uses a non-reentrant model
 12802 ;;
 12803                           
 12804                           
 12805                           ;psect for function _LCDClear
 12806  1399                     _LCDClear:	
 12807                           
 12808                           ;lcd.c: 184: int index;
 12809                           ;lcd.c: 185: for (index = 0 ; index < (84 * 48 / 8) ; index++)
 12810                           
 12811                           ;incstack = 0
 12812                           ; Regs used in _LCDClear: [wreg+status,2+status,0+pclath+cstack]
 12813  1399  01F9               	clrf	LCDClear@index
 12814  139A  01FA               	clrf	LCDClear@index+1
 12815  139B  087A               	movf	LCDClear@index+1,w
 12816  139C  3A80               	xorlw	128
 12817  139D  00F8               	movwf	??_LCDClear
 12818  139E  3081               	movlw	129
 12819  139F  0278               	subwf	??_LCDClear,w
 12820  13A0  1D03               	skipz
 12821  13A1  2BA4               	goto	u2635
 12822  13A2  30F8               	movlw	248
 12823  13A3  0279               	subwf	LCDClear@index,w
 12824  13A4                     u2635:	
 12825  13A4  1803               	btfsc	3,0
 12826  13A5  2BBA               	goto	l2530
 12827  13A6                     l2524:	
 12828                           
 12829                           ;lcd.c: 186: LCDWrite(1, 0x00);
 12830  13A6  01F0               	clrf	LCDWrite@data
 12831  13A7  3001               	movlw	1
 12832  13A8  3193  2374  3193   	fcall	_LCDWrite
 12833  13AB  3001               	movlw	1
 12834  13AC  07F9               	addwf	LCDClear@index,f
 12835  13AD  3000               	movlw	0
 12836  13AE  3DFA               	addwfc	LCDClear@index+1,f
 12837  13AF  087A               	movf	LCDClear@index+1,w
 12838  13B0  3A80               	xorlw	128
 12839  13B1  00F8               	movwf	??_LCDClear
 12840  13B2  3081               	movlw	129
 12841  13B3  0278               	subwf	??_LCDClear,w
 12842  13B4  1D03               	skipz
 12843  13B5  2BB8               	goto	u2645
 12844  13B6  30F8               	movlw	248
 12845  13B7  0279               	subwf	LCDClear@index,w
 12846  13B8                     u2645:	
 12847  13B8  1C03               	skipc
 12848  13B9  2BA6               	goto	l2524
 12849  13BA                     l2530:	
 12850                           
 12851                           ;lcd.c: 187: gotoXY(0, 0);
 12852  13BA  01F5               	clrf	gotoXY@y
 12853  13BB  3000               	movlw	0
 12854  13BC  3180  2004         	fcall	_gotoXY
 12855  13BE  0008               	return
 12856  13BF                     __end_of_LCDClear:	
 12857                           
 12858                           	psect	text30
 12859  13EB                     __ptext30:	
 12860 ;; *************** function _Init_Battery_State_Machine *****************
 12861 ;; Defined at:
 12862 ;;		line 20 in file "battery_charger.c"
 12863 ;; Parameters:    Size  Location     Type
 12864 ;;  z               1    wreg     unsigned char 
 12865 ;; Auto vars:     Size  Location     Type
 12866 ;;  z               1    1[COMMON] unsigned char 
 12867 ;; Return value:  Size  Location     Type
 12868 ;;                  1    wreg      void 
 12869 ;; Registers used:
 12870 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12871 ;; Tracked objects:
 12872 ;;		On entry : 0/0
 12873 ;;		On exit  : 0/0
 12874 ;;		Unchanged: 0/0
 12875 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12876 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12877 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12878 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12879 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12880 ;;Total ram usage:        2 bytes
 12881 ;; Hardware stack levels used:    1
 12882 ;; This function calls:
 12883 ;;		Nothing
 12884 ;; This function is called by:
 12885 ;;		_SYSTEM_Initialize
 12886 ;; This function uses a non-reentrant model
 12887 ;;
 12888                           
 12889                           
 12890                           ;psect for function _Init_Battery_State_Machine
 12891  13EB                     _Init_Battery_State_Machine:	
 12892                           
 12893                           ;incstack = 0
 12894                           ; Regs used in _Init_Battery_State_Machine: [wreg+fsr1l+fsr1h+status,2+status,0]
 12895                           ;Init_Battery_State_Machine@z stored from wreg
 12896  13EB  00F1               	movwf	Init_Battery_State_Machine@z
 12897                           
 12898                           ;battery_charger.c: 22: batteryState[z] = PRECHARGE;
 12899  13EC  3003               	movlw	3
 12900  13ED  00F0               	movwf	??_Init_Battery_State_Machine
 12901  13EE  0871               	movf	Init_Battery_State_Machine@z,w
 12902  13EF  3E6A               	addlw	(low (_batteryState| 0))& (0+255)
 12903  13F0  0086               	movwf	6
 12904  13F1  0187               	clrf	7
 12905  13F2  0870               	movf	??_Init_Battery_State_Machine,w
 12906  13F3  0081               	movwf	1
 12907                           
 12908                           ;battery_charger.c: 23: stateCounter[z] = 3;
 12909  13F4  3571               	lslf	Init_Battery_State_Machine@z,w
 12910  13F5  3EB8               	addlw	(low (_stateCounter| 0))& (0+255)
 12911  13F6  0086               	movwf	6
 12912  13F7  0187               	clrf	7
 12913  13F8  3003               	movlw	3
 12914  13F9  3FC0               	movwi [0]fsr1
 12915  13FA  3000               	movlw	0
 12916  13FB  3FC1               	movwi [1]fsr1
 12917                           
 12918                           ;battery_charger.c: 25: Iref[z]=10;
 12919  13FC  3571               	lslf	Init_Battery_State_Machine@z,w
 12920  13FD  3EB4               	addlw	(low (_Iref| 0))& (0+255)
 12921  13FE  0086               	movwf	6
 12922  13FF  0187               	clrf	7
 12923  1400  300A               	movlw	10
 12924  1401  3FC0               	movwi [0]fsr1
 12925  1402  3000               	movlw	0
 12926  1403  3FC1               	movwi [1]fsr1
 12927                           
 12928                           ;battery_charger.c: 26: Vref[z]=1425;
 12929  1404  3571               	lslf	Init_Battery_State_Machine@z,w
 12930  1405  3EB0               	addlw	(low (_Vref| 0))& (0+255)
 12931  1406  0086               	movwf	6
 12932  1407  0187               	clrf	7
 12933  1408  3091               	movlw	145
 12934  1409  3FC0               	movwi [0]fsr1
 12935  140A  3005               	movlw	5
 12936  140B  3FC1               	movwi [1]fsr1
 12937                           
 12938                           ;battery_charger.c: 28: Imin[z]=17;
 12939  140C  3571               	lslf	Init_Battery_State_Machine@z,w
 12940  140D  3E45               	addlw	(low (_Imin| (0+256)))& (0+255)
 12941  140E  0086               	movwf	6
 12942  140F  3001               	movlw	1	; select bank2/3
 12943  1410  0087               	movwf	7
 12944  1411  3011               	movlw	17
 12945  1412  3FC0               	movwi [0]fsr1
 12946  1413  3000               	movlw	0
 12947  1414  3FC1               	movwi [1]fsr1
 12948                           
 12949                           ;battery_charger.c: 29: IminCount[z] = 100;
 12950  1415  3571               	lslf	Init_Battery_State_Machine@z,w
 12951  1416  3EBC               	addlw	(low (_IminCount| 0))& (0+255)
 12952  1417  0086               	movwf	6
 12953  1418  0187               	clrf	7
 12954  1419  3064               	movlw	100
 12955  141A  3FC0               	movwi [0]fsr1
 12956  141B  3000               	movlw	0
 12957  141C  3FC1               	movwi [1]fsr1
 12958  141D  0008               	return
 12959  141E                     __end_of_Init_Battery_State_Machine:	
 12960                           
 12961                           	psect	text31
 12962  1335                     __ptext31:	
 12963 ;; *************** function _ADC_Initialize *****************
 12964 ;; Defined at:
 12965 ;;		line 111 in file "adc.c"
 12966 ;; Parameters:    Size  Location     Type
 12967 ;;		None
 12968 ;; Auto vars:     Size  Location     Type
 12969 ;;		None
 12970 ;; Return value:  Size  Location     Type
 12971 ;;                  1    wreg      void 
 12972 ;; Registers used:
 12973 ;;		wreg, status,2
 12974 ;; Tracked objects:
 12975 ;;		On entry : 0/0
 12976 ;;		On exit  : 0/0
 12977 ;;		Unchanged: 0/0
 12978 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12979 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12980 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12981 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12982 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12983 ;;Total ram usage:        0 bytes
 12984 ;; Hardware stack levels used:    1
 12985 ;; This function calls:
 12986 ;;		Nothing
 12987 ;; This function is called by:
 12988 ;;		_SYSTEM_Initialize
 12989 ;; This function uses a non-reentrant model
 12990 ;;
 12991                           
 12992                           
 12993                           ;psect for function _ADC_Initialize
 12994  1335                     _ADC_Initialize:	
 12995                           
 12996                           ;adc.c: 113: ADCON1 = 0x00;
 12997                           
 12998                           ;incstack = 0
 12999                           ; Regs used in _ADC_Initialize: [wreg+status,2]
 13000  1335  0021               	movlb	1	; select bank1
 13001  1336  0194               	clrf	20	;volatile
 13002                           
 13003                           ;adc.c: 115: ADCON2 = 0x00;
 13004  1337  0195               	clrf	21	;volatile
 13005                           
 13006                           ;adc.c: 117: ADCON3 = 0x00;
 13007  1338  0196               	clrf	22	;volatile
 13008                           
 13009                           ;adc.c: 119: ADACT = 0x00;
 13010  1339  0199               	clrf	25	;volatile
 13011                           
 13012                           ;adc.c: 121: ADSTAT = 0x00;
 13013  133A  0197               	clrf	23	;volatile
 13014                           
 13015                           ;adc.c: 123: FVRCON = 0b11000011;
 13016  133B  30C3               	movlw	195
 13017  133C  0032               	movlb	18	; select bank18
 13018  133D  008C               	movwf	12	;volatile
 13019                           
 13020                           ;adc.c: 124: ADCLK = 0x3F;
 13021  133E  303F               	movlw	63
 13022  133F  0021               	movlb	1	; select bank1
 13023  1340  0098               	movwf	24	;volatile
 13024                           
 13025                           ;adc.c: 131: ADREF = 0x03;
 13026  1341  3003               	movlw	3
 13027  1342  009A               	movwf	26	;volatile
 13028                           
 13029                           ;adc.c: 134: ADCAP = 0x00;
 13030  1343  019B               	clrf	27	;volatile
 13031                           
 13032                           ;adc.c: 137: ADPRE = 0x07;
 13033  1344  3007               	movlw	7
 13034  1345  009C               	movwf	28	;volatile
 13035                           
 13036                           ;adc.c: 139: ADACQ = 0x00;
 13037  1346  019D               	clrf	29	;volatile
 13038                           
 13039                           ;adc.c: 141: ADPCH = 0x00;
 13040  1347  019E               	clrf	30	;volatile
 13041                           
 13042                           ;adc.c: 143: ADRPT = 0x00;
 13043  1348  0022               	movlb	2	; select bank2
 13044  1349  018D               	clrf	13	;volatile
 13045                           
 13046                           ;adc.c: 145: ADLTHL = 0x00;
 13047  134A  018E               	clrf	14	;volatile
 13048                           
 13049                           ;adc.c: 147: ADLTHH = 0x00;
 13050  134B  018F               	clrf	15	;volatile
 13051                           
 13052                           ;adc.c: 149: ADUTHL = 0x00;
 13053  134C  0190               	clrf	16	;volatile
 13054                           
 13055                           ;adc.c: 151: ADUTHH = 0x00;
 13056  134D  0191               	clrf	17	;volatile
 13057                           
 13058                           ;adc.c: 153: ADSTPTL = 0x00;
 13059  134E  0192               	clrf	18	;volatile
 13060                           
 13061                           ;adc.c: 155: ADSTPTH = 0x00;
 13062  134F  0193               	clrf	19	;volatile
 13063                           
 13064                           ;adc.c: 157: ADCON0 = 0x84;
 13065  1350  3084               	movlw	132
 13066  1351  0021               	movlb	1	; select bank1
 13067  1352  0093               	movwf	19	;volatile
 13068  1353  0008               	return
 13069  1354                     __end_of_ADC_Initialize:	
 13070                           
 13071                           	psect	text32
 13072  0800                     __ptext32:	
 13073 ;; *************** function _PWM7_LoadDutyValue *****************
 13074 ;; Defined at:
 13075 ;;		line 37 in file "pwm.c"
 13076 ;; Parameters:    Size  Location     Type
 13077 ;;  dutyCycle7      2    0[COMMON] unsigned int 
 13078 ;; Auto vars:     Size  Location     Type
 13079 ;;		None
 13080 ;; Return value:  Size  Location     Type
 13081 ;;                  1    wreg      void 
 13082 ;; Registers used:
 13083 ;;		wreg, status,2, status,0
 13084 ;; Tracked objects:
 13085 ;;		On entry : 0/0
 13086 ;;		On exit  : 0/0
 13087 ;;		Unchanged: 0/0
 13088 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13089 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13090 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13091 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13092 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13093 ;;Total ram usage:        4 bytes
 13094 ;; Hardware stack levels used:    1
 13095 ;; This function calls:
 13096 ;;		Nothing
 13097 ;; This function is called by:
 13098 ;;		_main
 13099 ;; This function uses a non-reentrant model
 13100 ;;
 13101                           
 13102                           
 13103                           ;psect for function _PWM7_LoadDutyValue
 13104  0800                     _PWM7_LoadDutyValue:	
 13105                           
 13106                           ;pwm.c: 39: PWM7DCH = (dutyCycle7 & 0x03FC)>>2;
 13107                           
 13108                           ;incstack = 0
 13109                           ; Regs used in _PWM7_LoadDutyValue: [wreg+status,2+status,0]
 13110  0800  0871               	movf	PWM7_LoadDutyValue@dutyCycle7+1,w
 13111  0801  00F3               	movwf	??_PWM7_LoadDutyValue+1
 13112  0802  0870               	movf	PWM7_LoadDutyValue@dutyCycle7,w
 13113  0803  00F2               	movwf	??_PWM7_LoadDutyValue
 13114  0804  36F3               	lsrf	??_PWM7_LoadDutyValue+1,f
 13115  0805  0CF2               	rrf	??_PWM7_LoadDutyValue,f
 13116  0806  36F3               	lsrf	??_PWM7_LoadDutyValue+1,f
 13117  0807  0CF2               	rrf	??_PWM7_LoadDutyValue,f
 13118  0808  0872               	movf	??_PWM7_LoadDutyValue,w
 13119  0809  0027               	movlb	7	; select bank7
 13120  080A  0091               	movwf	17	;volatile
 13121                           
 13122                           ;pwm.c: 41: PWM7DCL = (dutyCycle7 & 0x0003)<<6;
 13123  080B  0870               	movf	PWM7_LoadDutyValue@dutyCycle7,w
 13124  080C  3903               	andlw	3
 13125  080D  00F2               	movwf	??_PWM7_LoadDutyValue
 13126  080E  3005               	movlw	5
 13127  080F                     u3405:	
 13128  080F  35F2               	lslf	??_PWM7_LoadDutyValue,f
 13129  0810  3EFF               	addlw	-1
 13130  0811  1D03               	skipz
 13131  0812  280F               	goto	u3405
 13132  0813  3572               	lslf	??_PWM7_LoadDutyValue,w
 13133  0814  0090               	movwf	16	;volatile
 13134  0815  0008               	return
 13135  0816                     __end_of_PWM7_LoadDutyValue:	
 13136                           
 13137                           	psect	text33
 13138  12CC                     __ptext33:	
 13139 ;; *************** function _PWM6_LoadDutyValue *****************
 13140 ;; Defined at:
 13141 ;;		line 30 in file "pwm.c"
 13142 ;; Parameters:    Size  Location     Type
 13143 ;;  dutyCycle6      2    0[COMMON] unsigned int 
 13144 ;; Auto vars:     Size  Location     Type
 13145 ;;		None
 13146 ;; Return value:  Size  Location     Type
 13147 ;;                  1    wreg      void 
 13148 ;; Registers used:
 13149 ;;		wreg, status,2, status,0
 13150 ;; Tracked objects:
 13151 ;;		On entry : 0/0
 13152 ;;		On exit  : 0/0
 13153 ;;		Unchanged: 0/0
 13154 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13155 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13156 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13157 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13158 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13159 ;;Total ram usage:        4 bytes
 13160 ;; Hardware stack levels used:    1
 13161 ;; This function calls:
 13162 ;;		Nothing
 13163 ;; This function is called by:
 13164 ;;		_main
 13165 ;; This function uses a non-reentrant model
 13166 ;;
 13167                           
 13168                           
 13169                           ;psect for function _PWM6_LoadDutyValue
 13170  12CC                     _PWM6_LoadDutyValue:	
 13171                           
 13172                           ;pwm.c: 32: PWM6DCH = (dutyCycle6 & 0x03FC)>>2;
 13173                           
 13174                           ;incstack = 0
 13175                           ; Regs used in _PWM6_LoadDutyValue: [wreg+status,2+status,0]
 13176  12CC  0871               	movf	PWM6_LoadDutyValue@dutyCycle6+1,w
 13177  12CD  00F3               	movwf	??_PWM6_LoadDutyValue+1
 13178  12CE  0870               	movf	PWM6_LoadDutyValue@dutyCycle6,w
 13179  12CF  00F2               	movwf	??_PWM6_LoadDutyValue
 13180  12D0  36F3               	lsrf	??_PWM6_LoadDutyValue+1,f
 13181  12D1  0CF2               	rrf	??_PWM6_LoadDutyValue,f
 13182  12D2  36F3               	lsrf	??_PWM6_LoadDutyValue+1,f
 13183  12D3  0CF2               	rrf	??_PWM6_LoadDutyValue,f
 13184  12D4  0872               	movf	??_PWM6_LoadDutyValue,w
 13185  12D5  0027               	movlb	7	; select bank7
 13186  12D6  008D               	movwf	13	;volatile
 13187                           
 13188                           ;pwm.c: 34: PWM6DCL = (dutyCycle6 & 0x0003)<<6;
 13189  12D7  0870               	movf	PWM6_LoadDutyValue@dutyCycle6,w
 13190  12D8  3903               	andlw	3
 13191  12D9  00F2               	movwf	??_PWM6_LoadDutyValue
 13192  12DA  3005               	movlw	5
 13193  12DB                     u3395:	
 13194  12DB  35F2               	lslf	??_PWM6_LoadDutyValue,f
 13195  12DC  3EFF               	addlw	-1
 13196  12DD  1D03               	skipz
 13197  12DE  2ADB               	goto	u3395
 13198  12DF  3572               	lslf	??_PWM6_LoadDutyValue,w
 13199  12E0  008C               	movwf	12	;volatile
 13200  12E1  0008               	return
 13201  12E2                     __end_of_PWM6_LoadDutyValue:	
 13202                           
 13203                           	psect	text34
 13204  0B0A                     __ptext34:	
 13205 ;; *************** function _LCDWriteInt *****************
 13206 ;; Defined at:
 13207 ;;		line 190 in file "lcd.c"
 13208 ;; Parameters:    Size  Location     Type
 13209 ;;  value           2    8[BANK0 ] int 
 13210 ;;  fieldLength     1   10[BANK0 ] char 
 13211 ;;  numPlaces       1   11[BANK0 ] unsigned char 
 13212 ;;  sign            1   12[BANK0 ] unsigned char 
 13213 ;; Auto vars:     Size  Location     Type
 13214 ;;  str             5   17[BANK0 ] unsigned char [5]
 13215 ;;  i               1   23[BANK0 ] unsigned char 
 13216 ;;  j               1   22[BANK0 ] unsigned char 
 13217 ;; Return value:  Size  Location     Type
 13218 ;;                  1    wreg      void 
 13219 ;; Registers used:
 13220 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13221 ;; Tracked objects:
 13222 ;;		On entry : 0/0
 13223 ;;		On exit  : 0/0
 13224 ;;		Unchanged: 0/0
 13225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13226 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13227 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13228 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13229 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13230 ;;Total ram usage:       16 bytes
 13231 ;; Hardware stack levels used:    1
 13232 ;; Hardware stack levels required when called:    2
 13233 ;; This function calls:
 13234 ;;		_LCDWriteCharacter
 13235 ;;		___awdiv
 13236 ;;		___lwmod
 13237 ;; This function is called by:
 13238 ;;		_main
 13239 ;; This function uses a non-reentrant model
 13240 ;;
 13241                           
 13242                           
 13243                           ;psect for function _LCDWriteInt
 13244  0B0A                     _LCDWriteInt:	
 13245                           
 13246                           ;lcd.c: 192: uint8_t str[5]={0,0,0,0,0};
 13247                           
 13248                           ;incstack = 0
 13249                           ; Regs used in _LCDWriteInt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13250  0B0A  3040               	movlw	low LCDWriteInt@F14387
 13251  0B0B  0086               	movwf	6
 13252  0B0C  3001               	movlw	high LCDWriteInt@F14387
 13253  0B0D  0087               	movwf	7
 13254  0B0E  3031               	movlw	low LCDWriteInt@str
 13255  0B0F  0084               	movwf	4
 13256  0B10  3000               	movlw	high LCDWriteInt@str
 13257  0B11  0085               	movwf	5
 13258  0B12  3005               	movlw	5
 13259  0B13  0020               	movlb	0	; select bank0
 13260  0B14  00AD               	movwf	??_LCDWriteInt
 13261  0B15                     u3300:	
 13262  0B15  0016               	moviw fsr1++
 13263  0B16  001A               	movwi fsr0++
 13264  0B17  0BAD               	decfsz	??_LCDWriteInt,f
 13265  0B18  2B15               	goto	u3300
 13266                           
 13267                           ;lcd.c: 193: uint8_t i=4,j=0;
 13268  0B19  3004               	movlw	4
 13269  0B1A  00AD               	movwf	??_LCDWriteInt
 13270  0B1B  082D               	movf	??_LCDWriteInt,w
 13271  0B1C  00B7               	movwf	LCDWriteInt@i
 13272  0B1D  01B6               	clrf	LCDWriteInt@j
 13273                           
 13274                           ;lcd.c: 195: if(value<0)
 13275  0B1E  1FA9               	btfss	LCDWriteInt@value+1,7
 13276  0B1F  2B2B               	goto	l2920
 13277                           
 13278                           ;lcd.c: 196: {
 13279                           ;lcd.c: 197: LCDWriteCharacter('-');
 13280  0B20  302D               	movlw	45
 13281  0B21  3196  26A4  318B   	fcall	_LCDWriteCharacter
 13282                           
 13283                           ;lcd.c: 198: value=value*-1;
 13284  0B24  0020               	movlb	0	; select bank0
 13285  0B25  09A8               	comf	LCDWriteInt@value,f
 13286  0B26  09A9               	comf	LCDWriteInt@value+1,f
 13287  0B27  0AA8               	incf	LCDWriteInt@value,f
 13288  0B28  1903               	skipnz
 13289  0B29  0AA9               	incf	LCDWriteInt@value+1,f
 13290                           
 13291                           ;lcd.c: 199: }
 13292  0B2A  2B32               	goto	l2930
 13293  0B2B                     l2920:	
 13294                           
 13295                           ;lcd.c: 201: else
 13296                           ;lcd.c: 202: {
 13297                           ;lcd.c: 203: if(sign == 1)
 13298  0B2B  032C               	decf	LCDWriteInt@sign,w
 13299  0B2C  1D03               	btfss	3,2
 13300  0B2D  2B32               	goto	l2930
 13301                           
 13302                           ;lcd.c: 204: {
 13303                           ;lcd.c: 205: LCDWriteCharacter('+');
 13304  0B2E  302B               	movlw	43
 13305  0B2F  3196  26A4  318B   	fcall	_LCDWriteCharacter
 13306  0B32                     l2930:	
 13307                           ;lcd.c: 206: }
 13308                           ;lcd.c: 207: }
 13309                           ;lcd.c: 209: while(value)
 13310                           
 13311  0B32  0020               	movlb	0	; select bank0
 13312  0B33  0828               	movf	LCDWriteInt@value,w
 13313  0B34  0429               	iorwf	LCDWriteInt@value+1,w
 13314  0B35  1903               	btfsc	3,2
 13315  0B36  2B5F               	goto	l2932
 13316                           
 13317                           ;lcd.c: 210: {
 13318                           ;lcd.c: 211: str[i]=(uint16_t)value%10;
 13319  0B37  300A               	movlw	10
 13320  0B38  00F0               	movwf	___lwmod@divisor
 13321  0B39  3000               	movlw	0
 13322  0B3A  00F1               	movwf	___lwmod@divisor+1
 13323  0B3B  0020               	movlb	0	; select bank0
 13324  0B3C  0829               	movf	LCDWriteInt@value+1,w
 13325  0B3D  00F3               	movwf	___lwmod@dividend+1
 13326  0B3E  0828               	movf	LCDWriteInt@value,w
 13327  0B3F  00F2               	movwf	___lwmod@dividend
 13328  0B40  3193  23BF  318B   	fcall	___lwmod
 13329  0B43  0870               	movf	?___lwmod,w
 13330  0B44  0020               	movlb	0	; select bank0
 13331  0B45  00AD               	movwf	??_LCDWriteInt
 13332  0B46  0837               	movf	LCDWriteInt@i,w
 13333  0B47  3E31               	addlw	(low (LCDWriteInt@str| 0))& (0+255)
 13334  0B48  0086               	movwf	6
 13335  0B49  0187               	clrf	7
 13336  0B4A  082D               	movf	??_LCDWriteInt,w
 13337  0B4B  0081               	movwf	1
 13338                           
 13339                           ;lcd.c: 212: value=value/10;
 13340  0B4C  300A               	movlw	10
 13341  0B4D  00F0               	movwf	___awdiv@divisor
 13342  0B4E  3000               	movlw	0
 13343  0B4F  00F1               	movwf	___awdiv@divisor+1
 13344  0B50  0829               	movf	LCDWriteInt@value+1,w
 13345  0B51  00F3               	movwf	___awdiv@dividend+1
 13346  0B52  0828               	movf	LCDWriteInt@value,w
 13347  0B53  00F2               	movwf	___awdiv@dividend
 13348  0B54  3196  2653  318B   	fcall	___awdiv
 13349  0B57  0871               	movf	?___awdiv+1,w
 13350  0B58  0020               	movlb	0	; select bank0
 13351  0B59  00A9               	movwf	LCDWriteInt@value+1
 13352  0B5A  0870               	movf	?___awdiv,w
 13353  0B5B  00A8               	movwf	LCDWriteInt@value
 13354                           
 13355                           ;lcd.c: 213: i--;
 13356  0B5C  3001               	movlw	1
 13357  0B5D  02B7               	subwf	LCDWriteInt@i,f
 13358  0B5E  2B32               	goto	l2930
 13359  0B5F                     l2932:	
 13360                           
 13361                           ;lcd.c: 214: }
 13362                           ;lcd.c: 215: if(fieldLength==-1)
 13363  0B5F  0A2A               	incf	LCDWriteInt@fieldLength,w
 13364  0B60  1903               	btfsc	3,2
 13365  0B61  2B67               	goto	l2938
 13366  0B62  2B6F               	goto	l2940
 13367  0B63                     l2936:	
 13368                           ;lcd.c: 216: {
 13369                           ;lcd.c: 217: while(str[j]==0)
 13370                           
 13371                           
 13372                           ;lcd.c: 218: {
 13373                           ;lcd.c: 219: j++;
 13374  0B63  3001               	movlw	1
 13375  0B64  00AD               	movwf	??_LCDWriteInt
 13376  0B65  082D               	movf	??_LCDWriteInt,w
 13377  0B66  07B6               	addwf	LCDWriteInt@j,f
 13378  0B67                     l2938:	
 13379  0B67  0836               	movf	LCDWriteInt@j,w
 13380  0B68  3E31               	addlw	(low (LCDWriteInt@str| 0))& (0+255)
 13381  0B69  0086               	movwf	6
 13382  0B6A  0187               	clrf	7
 13383  0B6B  0801               	movf	1,w
 13384  0B6C  1D03               	btfss	3,2
 13385  0B6D  2B75               	goto	l2942
 13386  0B6E  2B63               	goto	l2936
 13387  0B6F                     l2940:	
 13388                           ;lcd.c: 220: }
 13389                           ;lcd.c: 221: }
 13390                           
 13391                           
 13392                           ;lcd.c: 222: else
 13393                           ;lcd.c: 223: {
 13394                           ;lcd.c: 224: j=(uint8_t)(5-fieldLength);
 13395  0B6F  032A               	decf	LCDWriteInt@fieldLength,w
 13396  0B70  3AFF               	xorlw	255
 13397  0B71  3E05               	addlw	5
 13398  0B72  00AD               	movwf	??_LCDWriteInt
 13399  0B73  082D               	movf	??_LCDWriteInt,w
 13400  0B74  00B6               	movwf	LCDWriteInt@j
 13401  0B75                     l2942:	
 13402                           
 13403                           ;lcd.c: 225: }
 13404                           ;lcd.c: 227: for(i=j;i<(5-numPlaces);i++)
 13405  0B75  0836               	movf	LCDWriteInt@j,w
 13406  0B76  00AD               	movwf	??_LCDWriteInt
 13407  0B77  082D               	movf	??_LCDWriteInt,w
 13408  0B78  00B7               	movwf	LCDWriteInt@i
 13409  0B79                     l2948:	
 13410  0B79  082B               	movf	LCDWriteInt@numPlaces,w
 13411  0B7A  00AD               	movwf	??_LCDWriteInt
 13412  0B7B  01AE               	clrf	??_LCDWriteInt+1
 13413  0B7C  09AD               	comf	??_LCDWriteInt,f
 13414  0B7D  09AE               	comf	??_LCDWriteInt+1,f
 13415  0B7E  0AAD               	incf	??_LCDWriteInt,f
 13416  0B7F  1903               	skipnz
 13417  0B80  0AAE               	incf	??_LCDWriteInt+1,f
 13418  0B81  082D               	movf	??_LCDWriteInt,w
 13419  0B82  3E05               	addlw	5
 13420  0B83  00AF               	movwf	??_LCDWriteInt+2
 13421  0B84  3000               	movlw	0
 13422  0B85  3D2E               	addwfc	??_LCDWriteInt+1,w
 13423  0B86  00B0               	movwf	??_LCDWriteInt+3
 13424  0B87  0830               	movf	??_LCDWriteInt+3,w
 13425  0B88  3A80               	xorlw	128
 13426  0B89  3C80               	sublw	128
 13427  0B8A  1D03               	skipz
 13428  0B8B  2B8E               	goto	u3365
 13429  0B8C  082F               	movf	??_LCDWriteInt+2,w
 13430  0B8D  0237               	subwf	LCDWriteInt@i,w
 13431  0B8E                     u3365:	
 13432  0B8E  1803               	btfsc	3,0
 13433  0B8F  2BA0               	goto	l2950
 13434                           
 13435                           ;lcd.c: 228: {
 13436                           ;lcd.c: 229: LCDWriteCharacter((uint8_t)(48+str[i]));
 13437  0B90  0020               	movlb	0	; select bank0
 13438  0B91  0837               	movf	LCDWriteInt@i,w
 13439  0B92  3E31               	addlw	(low (LCDWriteInt@str| 0))& (0+255)
 13440  0B93  0086               	movwf	6
 13441  0B94  0187               	clrf	7
 13442  0B95  0801               	movf	1,w
 13443  0B96  3E30               	addlw	48
 13444  0B97  3196  26A4  318B   	fcall	_LCDWriteCharacter
 13445  0B9A  3001               	movlw	1
 13446  0B9B  0020               	movlb	0	; select bank0
 13447  0B9C  00AD               	movwf	??_LCDWriteInt
 13448  0B9D  082D               	movf	??_LCDWriteInt,w
 13449  0B9E  07B7               	addwf	LCDWriteInt@i,f
 13450  0B9F  2B79               	goto	l2948
 13451  0BA0                     l2950:	
 13452                           
 13453                           ;lcd.c: 230: }
 13454                           ;lcd.c: 232: if(numPlaces == 1)
 13455  0BA0  0020               	movlb	0	; select bank0
 13456  0BA1  032B               	decf	LCDWriteInt@numPlaces,w
 13457  0BA2  1D03               	btfss	3,2
 13458  0BA3  2BAE               	goto	l2954
 13459                           
 13460                           ;lcd.c: 233: {
 13461                           ;lcd.c: 234: LCDWriteCharacter(46);
 13462  0BA4  302E               	movlw	46
 13463  0BA5  3196  26A4  318B   	fcall	_LCDWriteCharacter
 13464                           
 13465                           ;lcd.c: 235: LCDWriteCharacter ((uint8_t)(48+str[4]));
 13466  0BA8  0020               	movlb	0	; select bank0
 13467  0BA9  0835               	movf	LCDWriteInt@str+4,w
 13468  0BAA  3E30               	addlw	48
 13469  0BAB  3196  26A4  318B   	fcall	_LCDWriteCharacter
 13470  0BAE                     l2954:	
 13471                           
 13472                           ;lcd.c: 236: }
 13473                           ;lcd.c: 238: if(numPlaces == 2)
 13474  0BAE  3002               	movlw	2
 13475  0BAF  0020               	movlb	0	; select bank0
 13476  0BB0  062B               	xorwf	LCDWriteInt@numPlaces,w
 13477  0BB1  1D03               	btfss	3,2
 13478  0BB2  0008               	return
 13479                           
 13480                           ;lcd.c: 239: {
 13481                           ;lcd.c: 240: LCDWriteCharacter(46);
 13482  0BB3  302E               	movlw	46
 13483  0BB4  3196  26A4  318B   	fcall	_LCDWriteCharacter
 13484                           
 13485                           ;lcd.c: 241: LCDWriteCharacter((uint8_t)(48+str[3]));
 13486  0BB7  0020               	movlb	0	; select bank0
 13487  0BB8  0834               	movf	LCDWriteInt@str+3,w
 13488  0BB9  3E30               	addlw	48
 13489  0BBA  3196  26A4  318B   	fcall	_LCDWriteCharacter
 13490                           
 13491                           ;lcd.c: 242: LCDWriteCharacter((uint8_t)(48+str[4]));
 13492  0BBD  0020               	movlb	0	; select bank0
 13493  0BBE  0835               	movf	LCDWriteInt@str+4,w
 13494  0BBF  3E30               	addlw	48
 13495  0BC0  3196  26A4         	fcall	_LCDWriteCharacter
 13496  0BC2  0008               	return
 13497  0BC3                     __end_of_LCDWriteInt:	
 13498                           
 13499                           	psect	text35
 13500  13BF                     __ptext35:	
 13501 ;; *************** function ___lwmod *****************
 13502 ;; Defined at:
 13503 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 13504 ;; Parameters:    Size  Location     Type
 13505 ;;  divisor         2    0[COMMON] unsigned int 
 13506 ;;  dividend        2    2[COMMON] unsigned int 
 13507 ;; Auto vars:     Size  Location     Type
 13508 ;;  counter         1    5[COMMON] unsigned char 
 13509 ;; Return value:  Size  Location     Type
 13510 ;;                  2    0[COMMON] unsigned int 
 13511 ;; Registers used:
 13512 ;;		wreg, status,2, status,0
 13513 ;; Tracked objects:
 13514 ;;		On entry : 0/0
 13515 ;;		On exit  : 0/0
 13516 ;;		Unchanged: 0/0
 13517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13518 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13519 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13520 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13521 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13522 ;;Total ram usage:        6 bytes
 13523 ;; Hardware stack levels used:    1
 13524 ;; This function calls:
 13525 ;;		Nothing
 13526 ;; This function is called by:
 13527 ;;		_LCDWriteInt
 13528 ;; This function uses a non-reentrant model
 13529 ;;
 13530                           
 13531                           
 13532                           ;psect for function ___lwmod
 13533  13BF                     ___lwmod:	
 13534                           
 13535                           ;incstack = 0
 13536                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
 13537  13BF  0870               	movf	___lwmod@divisor,w
 13538  13C0  0471               	iorwf	___lwmod@divisor+1,w
 13539  13C1  1903               	btfsc	3,2
 13540  13C2  2BE6               	goto	l2838
 13541  13C3  01F5               	clrf	___lwmod@counter
 13542  13C4  0AF5               	incf	___lwmod@counter,f
 13543  13C5                     l2828:	
 13544  13C5  1BF1               	btfsc	___lwmod@divisor+1,7
 13545  13C6  2BD1               	goto	l2830
 13546  13C7  3001               	movlw	1
 13547  13C8                     u3095:	
 13548  13C8  35F0               	lslf	___lwmod@divisor,f
 13549  13C9  0DF1               	rlf	___lwmod@divisor+1,f
 13550  13CA  0B89               	decfsz	9,f
 13551  13CB  2BC8               	goto	u3095
 13552  13CC  3001               	movlw	1
 13553  13CD  00F4               	movwf	??___lwmod
 13554  13CE  0874               	movf	??___lwmod,w
 13555  13CF  07F5               	addwf	___lwmod@counter,f
 13556  13D0  2BC5               	goto	l2828
 13557  13D1                     l2830:	
 13558  13D1  0871               	movf	___lwmod@divisor+1,w
 13559  13D2  0273               	subwf	___lwmod@dividend+1,w
 13560  13D3  1D03               	skipz
 13561  13D4  2BD7               	goto	u3115
 13562  13D5  0870               	movf	___lwmod@divisor,w
 13563  13D6  0272               	subwf	___lwmod@dividend,w
 13564  13D7                     u3115:	
 13565  13D7  1C03               	skipc
 13566  13D8  2BDD               	goto	l2834
 13567  13D9  0870               	movf	___lwmod@divisor,w
 13568  13DA  02F2               	subwf	___lwmod@dividend,f
 13569  13DB  0871               	movf	___lwmod@divisor+1,w
 13570  13DC  3BF3               	subwfb	___lwmod@dividend+1,f
 13571  13DD                     l2834:	
 13572  13DD  3001               	movlw	1
 13573  13DE                     u3125:	
 13574  13DE  36F1               	lsrf	___lwmod@divisor+1,f
 13575  13DF  0CF0               	rrf	___lwmod@divisor,f
 13576  13E0  0B89               	decfsz	9,f
 13577  13E1  2BDE               	goto	u3125
 13578  13E2  3001               	movlw	1
 13579  13E3  02F5               	subwf	___lwmod@counter,f
 13580  13E4  1D03               	btfss	3,2
 13581  13E5  2BD1               	goto	l2830
 13582  13E6                     l2838:	
 13583  13E6  0873               	movf	___lwmod@dividend+1,w
 13584  13E7  00F1               	movwf	?___lwmod+1
 13585  13E8  0872               	movf	___lwmod@dividend,w
 13586  13E9  00F0               	movwf	?___lwmod
 13587  13EA  0008               	return
 13588  13EB                     __end_of___lwmod:	
 13589                           
 13590                           	psect	text36
 13591  1653                     __ptext36:	
 13592 ;; *************** function ___awdiv *****************
 13593 ;; Defined at:
 13594 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
 13595 ;; Parameters:    Size  Location     Type
 13596 ;;  divisor         2    0[COMMON] int 
 13597 ;;  dividend        2    2[COMMON] int 
 13598 ;; Auto vars:     Size  Location     Type
 13599 ;;  quotient        2    7[COMMON] int 
 13600 ;;  sign            1    6[COMMON] unsigned char 
 13601 ;;  counter         1    5[COMMON] unsigned char 
 13602 ;; Return value:  Size  Location     Type
 13603 ;;                  2    0[COMMON] int 
 13604 ;; Registers used:
 13605 ;;		wreg, status,2, status,0
 13606 ;; Tracked objects:
 13607 ;;		On entry : 0/0
 13608 ;;		On exit  : 0/0
 13609 ;;		Unchanged: 0/0
 13610 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13611 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13612 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13613 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13614 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13615 ;;Total ram usage:        9 bytes
 13616 ;; Hardware stack levels used:    1
 13617 ;; This function calls:
 13618 ;;		Nothing
 13619 ;; This function is called by:
 13620 ;;		_LCDWriteInt
 13621 ;;		_main
 13622 ;; This function uses a non-reentrant model
 13623 ;;
 13624                           
 13625                           
 13626                           ;psect for function ___awdiv
 13627  1653                     ___awdiv:	
 13628                           
 13629                           ;incstack = 0
 13630                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 13631  1653  01F6               	clrf	___awdiv@sign
 13632  1654  1FF1               	btfss	___awdiv@divisor+1,7
 13633  1655  2E5D               	goto	l2692
 13634  1656  09F0               	comf	___awdiv@divisor,f
 13635  1657  09F1               	comf	___awdiv@divisor+1,f
 13636  1658  0AF0               	incf	___awdiv@divisor,f
 13637  1659  1903               	skipnz
 13638  165A  0AF1               	incf	___awdiv@divisor+1,f
 13639  165B  01F6               	clrf	___awdiv@sign
 13640  165C  0AF6               	incf	___awdiv@sign,f
 13641  165D                     l2692:	
 13642  165D  1FF3               	btfss	___awdiv@dividend+1,7
 13643  165E  2E68               	goto	l2698
 13644  165F  09F2               	comf	___awdiv@dividend,f
 13645  1660  09F3               	comf	___awdiv@dividend+1,f
 13646  1661  0AF2               	incf	___awdiv@dividend,f
 13647  1662  1903               	skipnz
 13648  1663  0AF3               	incf	___awdiv@dividend+1,f
 13649  1664  3001               	movlw	1
 13650  1665  00F4               	movwf	??___awdiv
 13651  1666  0874               	movf	??___awdiv,w
 13652  1667  06F6               	xorwf	___awdiv@sign,f
 13653  1668                     l2698:	
 13654  1668  01F7               	clrf	___awdiv@quotient
 13655  1669  01F8               	clrf	___awdiv@quotient+1
 13656  166A  0870               	movf	___awdiv@divisor,w
 13657  166B  0471               	iorwf	___awdiv@divisor+1,w
 13658  166C  1903               	btfsc	3,2
 13659  166D  2E97               	goto	l2720
 13660  166E  01F5               	clrf	___awdiv@counter
 13661  166F  0AF5               	incf	___awdiv@counter,f
 13662  1670                     l2708:	
 13663  1670  1BF1               	btfsc	___awdiv@divisor+1,7
 13664  1671  2E7C               	goto	l2710
 13665  1672  3001               	movlw	1
 13666  1673                     u2825:	
 13667  1673  35F0               	lslf	___awdiv@divisor,f
 13668  1674  0DF1               	rlf	___awdiv@divisor+1,f
 13669  1675  0B89               	decfsz	9,f
 13670  1676  2E73               	goto	u2825
 13671  1677  3001               	movlw	1
 13672  1678  00F4               	movwf	??___awdiv
 13673  1679  0874               	movf	??___awdiv,w
 13674  167A  07F5               	addwf	___awdiv@counter,f
 13675  167B  2E70               	goto	l2708
 13676  167C                     l2710:	
 13677  167C  3001               	movlw	1
 13678  167D                     u2845:	
 13679  167D  35F7               	lslf	___awdiv@quotient,f
 13680  167E  0DF8               	rlf	___awdiv@quotient+1,f
 13681  167F  0B89               	decfsz	9,f
 13682  1680  2E7D               	goto	u2845
 13683  1681  0871               	movf	___awdiv@divisor+1,w
 13684  1682  0273               	subwf	___awdiv@dividend+1,w
 13685  1683  1D03               	skipz
 13686  1684  2E87               	goto	u2855
 13687  1685  0870               	movf	___awdiv@divisor,w
 13688  1686  0272               	subwf	___awdiv@dividend,w
 13689  1687                     u2855:	
 13690  1687  1C03               	skipc
 13691  1688  2E8E               	goto	l2716
 13692  1689  0870               	movf	___awdiv@divisor,w
 13693  168A  02F2               	subwf	___awdiv@dividend,f
 13694  168B  0871               	movf	___awdiv@divisor+1,w
 13695  168C  3BF3               	subwfb	___awdiv@dividend+1,f
 13696  168D  1477               	bsf	___awdiv@quotient,0
 13697  168E                     l2716:	
 13698  168E  3001               	movlw	1
 13699  168F                     u2865:	
 13700  168F  36F1               	lsrf	___awdiv@divisor+1,f
 13701  1690  0CF0               	rrf	___awdiv@divisor,f
 13702  1691  0B89               	decfsz	9,f
 13703  1692  2E8F               	goto	u2865
 13704  1693  3001               	movlw	1
 13705  1694  02F5               	subwf	___awdiv@counter,f
 13706  1695  1D03               	btfss	3,2
 13707  1696  2E7C               	goto	l2710
 13708  1697                     l2720:	
 13709  1697  0876               	movf	___awdiv@sign,w
 13710  1698  1903               	btfsc	3,2
 13711  1699  2E9F               	goto	l2724
 13712  169A  09F7               	comf	___awdiv@quotient,f
 13713  169B  09F8               	comf	___awdiv@quotient+1,f
 13714  169C  0AF7               	incf	___awdiv@quotient,f
 13715  169D  1903               	skipnz
 13716  169E  0AF8               	incf	___awdiv@quotient+1,f
 13717  169F                     l2724:	
 13718  169F  0878               	movf	___awdiv@quotient+1,w
 13719  16A0  00F1               	movwf	?___awdiv+1
 13720  16A1  0877               	movf	___awdiv@quotient,w
 13721  16A2  00F0               	movwf	?___awdiv
 13722  16A3  0008               	return
 13723  16A4                     __end_of___awdiv:	
 13724                           
 13725                           	psect	text37
 13726  007B                     __ptext37:	
 13727 ;; *************** function _Battery_State_Machine *****************
 13728 ;; Defined at:
 13729 ;;		line 32 in file "battery_charger.c"
 13730 ;; Parameters:    Size  Location     Type
 13731 ;;  z               1    wreg     unsigned char 
 13732 ;; Auto vars:     Size  Location     Type
 13733 ;;  z               1   15[BANK0 ] unsigned char 
 13734 ;; Return value:  Size  Location     Type
 13735 ;;                  1    wreg      void 
 13736 ;; Registers used:
 13737 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13738 ;; Tracked objects:
 13739 ;;		On entry : 0/0
 13740 ;;		On exit  : 0/0
 13741 ;;		Unchanged: 0/0
 13742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13743 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13744 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13745 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13746 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13747 ;;Total ram usage:        6 bytes
 13748 ;; Hardware stack levels used:    1
 13749 ;; Hardware stack levels required when called:    3
 13750 ;; This function calls:
 13751 ;;		_LCDWriteString
 13752 ;;		_gotoXY
 13753 ;; This function is called by:
 13754 ;;		_main
 13755 ;; This function uses a non-reentrant model
 13756 ;;
 13757                           
 13758                           
 13759                           ;psect for function _Battery_State_Machine
 13760  007B                     _Battery_State_Machine:	
 13761                           
 13762                           ;incstack = 0
 13763                           ; Regs used in _Battery_State_Machine: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13764                           ;Battery_State_Machine@z stored from wreg
 13765  007B  0020               	movlb	0	; select bank0
 13766  007C  00AF               	movwf	Battery_State_Machine@z
 13767                           
 13768                           ;battery_charger.c: 34: if(batteryState[z]==PRECHARGE)
 13769  007D  082F               	movf	Battery_State_Machine@z,w
 13770  007E  3E6A               	addlw	(low (_batteryState| 0))& (0+255)
 13771  007F  0086               	movwf	6
 13772  0080  0187               	clrf	7
 13773  0081  3003               	movlw	3
 13774  0082  0601               	xorwf	1,w
 13775  0083  1D03               	btfss	3,2
 13776  0084  28D2               	goto	l3004
 13777                           
 13778                           ;battery_charger.c: 35: {
 13779                           ;battery_charger.c: 36: if(voltage[z]<1075)
 13780  0085  352F               	lslf	Battery_State_Machine@z,w
 13781  0086  3EA8               	addlw	(low (_voltage| 0))& (0+255)
 13782  0087  0086               	movwf	6
 13783  0088  0187               	clrf	7
 13784  0089  3F40               	moviw [0]fsr1
 13785  008A  00AA               	movwf	??_Battery_State_Machine
 13786  008B  3F41               	moviw [1]fsr1
 13787  008C  00AB               	movwf	??_Battery_State_Machine+1
 13788  008D  082B               	movf	??_Battery_State_Machine+1,w
 13789  008E  3A80               	xorlw	128
 13790  008F  00AC               	movwf	??_Battery_State_Machine+2
 13791  0090  3084               	movlw	132
 13792  0091  022C               	subwf	??_Battery_State_Machine+2,w
 13793  0092  1D03               	skipz
 13794  0093  2896               	goto	u3425
 13795  0094  3033               	movlw	51
 13796  0095  022A               	subwf	??_Battery_State_Machine,w
 13797  0096                     u3425:	
 13798  0096  1803               	skipnc
 13799  0097  28C0               	goto	l3002
 13800                           
 13801                           ;battery_charger.c: 37: {
 13802                           ;battery_charger.c: 38: if(stateCounter[z]>0)
 13803  0098  0020               	movlb	0	; select bank0
 13804  0099  352F               	lslf	Battery_State_Machine@z,w
 13805  009A  3EB8               	addlw	(low (_stateCounter| 0))& (0+255)
 13806  009B  0086               	movwf	6
 13807  009C  0187               	clrf	7
 13808  009D  3F40               	moviw [0]fsr1
 13809  009E  00AA               	movwf	??_Battery_State_Machine
 13810  009F  3F41               	moviw [1]fsr1
 13811  00A0  00AB               	movwf	??_Battery_State_Machine+1
 13812  00A1  082B               	movf	??_Battery_State_Machine+1,w
 13813  00A2  3A80               	xorlw	128
 13814  00A3  00AC               	movwf	??_Battery_State_Machine+2
 13815  00A4  3080               	movlw	128
 13816  00A5  022C               	subwf	??_Battery_State_Machine+2,w
 13817  00A6  1D03               	skipz
 13818  00A7  28AA               	goto	u3435
 13819  00A8  3001               	movlw	1
 13820  00A9  022A               	subwf	??_Battery_State_Machine,w
 13821  00AA                     u3435:	
 13822  00AA  1C03               	skipc
 13823  00AB  28B8               	goto	l3000
 13824                           
 13825                           ;battery_charger.c: 39: {
 13826                           ;battery_charger.c: 40: stateCounter[z]-=1;
 13827  00AC  0020               	movlb	0	; select bank0
 13828  00AD  352F               	lslf	Battery_State_Machine@z,w
 13829  00AE  3EB8               	addlw	(low (_stateCounter| 0))& (0+255)
 13830  00AF  0086               	movwf	6
 13831  00B0  0187               	clrf	7
 13832  00B1  30FF               	movlw	255
 13833  00B2  0781               	addwf	1,f
 13834  00B3  3141               	addfsr 1,1
 13835  00B4  30FF               	movlw	255
 13836  00B5  3D81               	addwfc	1,f
 13837  00B6  317F               	addfsr 1,-1
 13838                           
 13839                           ;battery_charger.c: 41: }
 13840  00B7  0008               	return
 13841  00B8                     l3000:	
 13842                           
 13843                           ;battery_charger.c: 42: else
 13844                           ;battery_charger.c: 43: {
 13845                           ;battery_charger.c: 44: batteryState[z]=FAULT;
 13846  00B8  0020               	movlb	0	; select bank0
 13847  00B9  082F               	movf	Battery_State_Machine@z,w
 13848  00BA  3E6A               	addlw	(low (_batteryState| 0))& (0+255)
 13849  00BB  0086               	movwf	6
 13850  00BC  0187               	clrf	7
 13851  00BD  0181               	clrf	1
 13852  00BE  0A81               	incf	1,f
 13853                           
 13854                           ;battery_charger.c: 45: }
 13855                           ;battery_charger.c: 46: }
 13856  00BF  0008               	return
 13857  00C0                     l3002:	
 13858                           
 13859                           ;battery_charger.c: 47: else
 13860                           ;battery_charger.c: 48: {
 13861                           ;battery_charger.c: 49: batteryState[z]=CHARGE;
 13862  00C0  3004               	movlw	4
 13863  00C1  0020               	movlb	0	; select bank0
 13864  00C2  00AA               	movwf	??_Battery_State_Machine
 13865  00C3  082F               	movf	Battery_State_Machine@z,w
 13866  00C4  3E6A               	addlw	(low (_batteryState| 0))& (0+255)
 13867  00C5  0086               	movwf	6
 13868  00C6  0187               	clrf	7
 13869  00C7  082A               	movf	??_Battery_State_Machine,w
 13870  00C8  0081               	movwf	1
 13871                           
 13872                           ;battery_charger.c: 50: Iref[z]=35;
 13873  00C9  352F               	lslf	Battery_State_Machine@z,w
 13874  00CA  3EB4               	addlw	(low (_Iref| 0))& (0+255)
 13875  00CB  0086               	movwf	6
 13876  00CC  0187               	clrf	7
 13877  00CD  3023               	movlw	35
 13878  00CE  3FC0               	movwi [0]fsr1
 13879  00CF  3000               	movlw	0
 13880  00D0  3FC1               	movwi [1]fsr1
 13881                           
 13882                           ;battery_charger.c: 51: }
 13883                           ;battery_charger.c: 52: }
 13884  00D1  0008               	return
 13885  00D2                     l3004:	
 13886                           
 13887                           ;battery_charger.c: 53: else if(batteryState[z]==CHARGE)
 13888  00D2  082F               	movf	Battery_State_Machine@z,w
 13889  00D3  3E6A               	addlw	(low (_batteryState| 0))& (0+255)
 13890  00D4  0086               	movwf	6
 13891  00D5  0187               	clrf	7
 13892  00D6  3004               	movlw	4
 13893  00D7  0601               	xorwf	1,w
 13894  00D8  1D03               	btfss	3,2
 13895  00D9  2987               	goto	l3032
 13896                           
 13897                           ;battery_charger.c: 54: {
 13898                           ;battery_charger.c: 55: if(!Imode[z])
 13899  00DA  082F               	movf	Battery_State_Machine@z,w
 13900  00DB  3EEE               	addlw	(low (_Imode| 0))& (0+255)
 13901  00DC  0086               	movwf	6
 13902  00DD  0187               	clrf	7
 13903  00DE  0801               	movf	1,w
 13904  00DF  1D03               	btfss	3,2
 13905  00E0  296E               	goto	l3028
 13906                           
 13907                           ;battery_charger.c: 56: {
 13908                           ;battery_charger.c: 57: if(current[z] < Imin[z])
 13909  00E1  352F               	lslf	Battery_State_Machine@z,w
 13910  00E2  3E45               	addlw	(low (_Imin| (0+256)))& (0+255)
 13911  00E3  0086               	movwf	6
 13912  00E4  3001               	movlw	1	; select bank2/3
 13913  00E5  0087               	movwf	7
 13914  00E6  3F40               	moviw [0]fsr1
 13915  00E7  00AA               	movwf	??_Battery_State_Machine
 13916  00E8  3F41               	moviw [1]fsr1
 13917  00E9  00AB               	movwf	??_Battery_State_Machine+1
 13918  00EA  352F               	lslf	Battery_State_Machine@z,w
 13919  00EB  3EA0               	addlw	(low (_current| 0))& (0+255)
 13920  00EC  0086               	movwf	6
 13921  00ED  0187               	clrf	7
 13922  00EE  3F40               	moviw [0]fsr1
 13923  00EF  00AC               	movwf	??_Battery_State_Machine+2
 13924  00F0  3F41               	moviw [1]fsr1
 13925  00F1  00AD               	movwf	??_Battery_State_Machine+3
 13926  00F2  082D               	movf	??_Battery_State_Machine+3,w
 13927  00F3  3A80               	xorlw	128
 13928  00F4  00AE               	movwf	??_Battery_State_Machine+4
 13929  00F5  082B               	movf	??_Battery_State_Machine+1,w
 13930  00F6  3A80               	xorlw	128
 13931  00F7  022E               	subwf	??_Battery_State_Machine+4,w
 13932  00F8  1D03               	skipz
 13933  00F9  28FC               	goto	u3465
 13934  00FA  082A               	movf	??_Battery_State_Machine,w
 13935  00FB  022C               	subwf	??_Battery_State_Machine+2,w
 13936  00FC                     u3465:	
 13937  00FC  1803               	skipnc
 13938  00FD  2929               	goto	l3014
 13939                           
 13940                           ;battery_charger.c: 58: {
 13941                           ;battery_charger.c: 59: IminCount[z]-=2;
 13942  00FE  0020               	movlb	0	; select bank0
 13943  00FF  352F               	lslf	Battery_State_Machine@z,w
 13944  0100  3EBC               	addlw	(low (_IminCount| 0))& (0+255)
 13945  0101  0086               	movwf	6
 13946  0102  0187               	clrf	7
 13947  0103  3002               	movlw	2
 13948  0104  0281               	subwf	1,f
 13949  0105  3141               	addfsr 1,1
 13950  0106  3000               	movlw	0
 13951  0107  3B81               	subwfb	1,f
 13952  0108  317F               	addfsr 1,-1
 13953                           
 13954                           ;battery_charger.c: 60: if(IminCount[z]<10)
 13955  0109  352F               	lslf	Battery_State_Machine@z,w
 13956  010A  3EBC               	addlw	(low (_IminCount| 0))& (0+255)
 13957  010B  0086               	movwf	6
 13958  010C  0187               	clrf	7
 13959  010D  3F40               	moviw [0]fsr1
 13960  010E  00AA               	movwf	??_Battery_State_Machine
 13961  010F  3F41               	moviw [1]fsr1
 13962  0110  00AB               	movwf	??_Battery_State_Machine+1
 13963  0111  3000               	movlw	0
 13964  0112  022B               	subwf	??_Battery_State_Machine+1,w
 13965  0113  300A               	movlw	10
 13966  0114  1903               	skipnz
 13967  0115  022A               	subwf	??_Battery_State_Machine,w
 13968  0116  1803               	skipnc
 13969  0117  0008               	return
 13970                           
 13971                           ;battery_charger.c: 61: {
 13972                           ;battery_charger.c: 62: batteryState[z] = FLOAT;
 13973  0118  3005               	movlw	5
 13974  0119  00AA               	movwf	??_Battery_State_Machine
 13975  011A  082F               	movf	Battery_State_Machine@z,w
 13976  011B  3E6A               	addlw	(low (_batteryState| 0))& (0+255)
 13977  011C  0086               	movwf	6
 13978  011D  0187               	clrf	7
 13979  011E  082A               	movf	??_Battery_State_Machine,w
 13980  011F  0081               	movwf	1
 13981                           
 13982                           ;battery_charger.c: 63: IminCount[z]=10;
 13983  0120  352F               	lslf	Battery_State_Machine@z,w
 13984  0121  3EBC               	addlw	(low (_IminCount| 0))& (0+255)
 13985  0122  0086               	movwf	6
 13986  0123  0187               	clrf	7
 13987  0124  300A               	movlw	10
 13988  0125  3FC0               	movwi [0]fsr1
 13989  0126  3000               	movlw	0
 13990  0127  3FC1               	movwi [1]fsr1
 13991                           
 13992                           ;battery_charger.c: 64: }
 13993                           ;battery_charger.c: 65: }
 13994  0128  0008               	return
 13995  0129                     l3014:	
 13996                           
 13997                           ;battery_charger.c: 66: else
 13998                           ;battery_charger.c: 67: {
 13999                           ;battery_charger.c: 68: x+=1;
 14000  0129  3001               	movlw	1
 14001  012A  0020               	movlb	0	; select bank0
 14002  012B  00AA               	movwf	??_Battery_State_Machine
 14003  012C  082A               	movf	??_Battery_State_Machine,w
 14004  012D  0021               	movlb	1	; select bank1
 14005  012E  07CA               	addwf	_x^(0+128),f
 14006                           
 14007                           ;battery_charger.c: 69: if(x>25)
 14008  012F  301A               	movlw	26
 14009  0130  024A               	subwf	_x^(0+128),w
 14010  0131  1C03               	skipc
 14011  0132  2954               	goto	l3024
 14012                           
 14013                           ;battery_charger.c: 70: {
 14014                           ;battery_charger.c: 71: if(Vref[z]>1379)Vref[z]-=1;
 14015  0133  0020               	movlb	0	; select bank0
 14016  0134  352F               	lslf	Battery_State_Machine@z,w
 14017  0135  3EB0               	addlw	(low (_Vref| 0))& (0+255)
 14018  0136  0086               	movwf	6
 14019  0137  0187               	clrf	7
 14020  0138  3F40               	moviw [0]fsr1
 14021  0139  00AA               	movwf	??_Battery_State_Machine
 14022  013A  3F41               	moviw [1]fsr1
 14023  013B  00AB               	movwf	??_Battery_State_Machine+1
 14024  013C  082B               	movf	??_Battery_State_Machine+1,w
 14025  013D  3A80               	xorlw	128
 14026  013E  00AC               	movwf	??_Battery_State_Machine+2
 14027  013F  3085               	movlw	133
 14028  0140  022C               	subwf	??_Battery_State_Machine+2,w
 14029  0141  1D03               	skipz
 14030  0142  2945               	goto	u3495
 14031  0143  3064               	movlw	100
 14032  0144  022A               	subwf	??_Battery_State_Machine,w
 14033  0145                     u3495:	
 14034  0145  1C03               	skipc
 14035  0146  2952               	goto	l3022
 14036  0147  0020               	movlb	0	; select bank0
 14037  0148  352F               	lslf	Battery_State_Machine@z,w
 14038  0149  3EB0               	addlw	(low (_Vref| 0))& (0+255)
 14039  014A  0086               	movwf	6
 14040  014B  0187               	clrf	7
 14041  014C  30FF               	movlw	255
 14042  014D  0781               	addwf	1,f
 14043  014E  3141               	addfsr 1,1
 14044  014F  30FF               	movlw	255
 14045  0150  3D81               	addwfc	1,f
 14046  0151  317F               	addfsr 1,-1
 14047  0152                     l3022:	
 14048                           
 14049                           ;battery_charger.c: 72: x=0;
 14050  0152  0021               	movlb	1	; select bank1
 14051  0153  01CA               	clrf	_x^(0+128)
 14052  0154                     l3024:	
 14053                           
 14054                           ;battery_charger.c: 73: }
 14055                           ;battery_charger.c: 74: if(IminCount[z]<100)IminCount[z]+=1;
 14056  0154  0020               	movlb	0	; select bank0
 14057  0155  352F               	lslf	Battery_State_Machine@z,w
 14058  0156  3EBC               	addlw	(low (_IminCount| 0))& (0+255)
 14059  0157  0086               	movwf	6
 14060  0158  0187               	clrf	7
 14061  0159  3F40               	moviw [0]fsr1
 14062  015A  00AA               	movwf	??_Battery_State_Machine
 14063  015B  3F41               	moviw [1]fsr1
 14064  015C  00AB               	movwf	??_Battery_State_Machine+1
 14065  015D  3000               	movlw	0
 14066  015E  022B               	subwf	??_Battery_State_Machine+1,w
 14067  015F  3064               	movlw	100
 14068  0160  1903               	skipnz
 14069  0161  022A               	subwf	??_Battery_State_Machine,w
 14070  0162  1803               	skipnc
 14071  0163  0008               	return
 14072  0164  352F               	lslf	Battery_State_Machine@z,w
 14073  0165  3EBC               	addlw	(low (_IminCount| 0))& (0+255)
 14074  0166  0086               	movwf	6
 14075  0167  0187               	clrf	7
 14076  0168  3001               	movlw	1
 14077  0169  0781               	addwf	1,f
 14078  016A  3141               	addfsr 1,1
 14079  016B  1803               	skipnc
 14080  016C  0A81               	incf	1,f
 14081                           
 14082                           ;battery_charger.c: 75: }
 14083                           ;battery_charger.c: 76: }
 14084  016D  0008               	return
 14085  016E                     l3028:	
 14086                           
 14087                           ;battery_charger.c: 77: else if(IminCount[z]<100)IminCount[z]+=1;
 14088  016E  352F               	lslf	Battery_State_Machine@z,w
 14089  016F  3EBC               	addlw	(low (_IminCount| 0))& (0+255)
 14090  0170  0086               	movwf	6
 14091  0171  0187               	clrf	7
 14092  0172  3F40               	moviw [0]fsr1
 14093  0173  00AA               	movwf	??_Battery_State_Machine
 14094  0174  3F41               	moviw [1]fsr1
 14095  0175  00AB               	movwf	??_Battery_State_Machine+1
 14096  0176  3000               	movlw	0
 14097  0177  022B               	subwf	??_Battery_State_Machine+1,w
 14098  0178  3064               	movlw	100
 14099  0179  1903               	skipnz
 14100  017A  022A               	subwf	??_Battery_State_Machine,w
 14101  017B  1803               	skipnc
 14102  017C  0008               	return
 14103  017D  352F               	lslf	Battery_State_Machine@z,w
 14104  017E  3EBC               	addlw	(low (_IminCount| 0))& (0+255)
 14105  017F  0086               	movwf	6
 14106  0180  0187               	clrf	7
 14107  0181  3001               	movlw	1
 14108  0182  0781               	addwf	1,f
 14109  0183  3141               	addfsr 1,1
 14110  0184  1803               	skipnc
 14111  0185  0A81               	incf	1,f
 14112                           
 14113                           ;battery_charger.c: 78: }
 14114  0186  0008               	return
 14115  0187                     l3032:	
 14116                           
 14117                           ;battery_charger.c: 79: else if(batteryState[z] == FLOAT)
 14118  0187  082F               	movf	Battery_State_Machine@z,w
 14119  0188  3E6A               	addlw	(low (_batteryState| 0))& (0+255)
 14120  0189  0086               	movwf	6
 14121  018A  0187               	clrf	7
 14122  018B  3005               	movlw	5
 14123  018C  0601               	xorwf	1,w
 14124  018D  1D03               	btfss	3,2
 14125  018E  29A0               	goto	l3036
 14126                           
 14127                           ;battery_charger.c: 80: {
 14128                           ;battery_charger.c: 81: Vref[z]=1379;
 14129  018F  352F               	lslf	Battery_State_Machine@z,w
 14130  0190  3EB0               	addlw	(low (_Vref| 0))& (0+255)
 14131  0191  0086               	movwf	6
 14132  0192  0187               	clrf	7
 14133  0193  3063               	movlw	99
 14134  0194  3FC0               	movwi [0]fsr1
 14135  0195  3005               	movlw	5
 14136  0196  3FC1               	movwi [1]fsr1
 14137                           
 14138                           ;battery_charger.c: 82: Iref[z]=17;
 14139  0197  352F               	lslf	Battery_State_Machine@z,w
 14140  0198  3EB4               	addlw	(low (_Iref| 0))& (0+255)
 14141  0199  0086               	movwf	6
 14142  019A  0187               	clrf	7
 14143  019B  3011               	movlw	17
 14144  019C  3FC0               	movwi [0]fsr1
 14145  019D  3000               	movlw	0
 14146  019E  3FC1               	movwi [1]fsr1
 14147                           
 14148                           ;battery_charger.c: 83: }
 14149  019F  0008               	return
 14150  01A0                     l3036:	
 14151                           
 14152                           ;battery_charger.c: 84: else
 14153                           ;battery_charger.c: 85: if(batteryState[z] == FAULT)
 14154  01A0  082F               	movf	Battery_State_Machine@z,w
 14155  01A1  3E6A               	addlw	(low (_batteryState| 0))& (0+255)
 14156  01A2  0086               	movwf	6
 14157  01A3  0187               	clrf	7
 14158  01A4  0301               	decf	1,w
 14159  01A5  1D03               	btfss	3,2
 14160  01A6  0008               	return
 14161                           
 14162                           ;battery_charger.c: 86: {
 14163                           ;battery_charger.c: 87: { gotoXY(0,0); LCDWriteString("BATTERY FAULT");};
 14164  01A7  01F5               	clrf	gotoXY@y
 14165  01A8  3000               	movlw	0
 14166  01A9  3180  2004  3180   	fcall	_gotoXY
 14167  01AC  301B               	movlw	low (STR_1| (0+32768))
 14168  01AD  0020               	movlb	0	; select bank0
 14169  01AE  00A8               	movwf	LCDWriteString@characters
 14170  01AF  3098               	movlw	high (STR_1| (0+32768))
 14171  01B0  00A9               	movwf	LCDWriteString@characters+1
 14172  01B1  3192  22E2  3180   	fcall	_LCDWriteString
 14173                           
 14174                           ;battery_charger.c: 88: Imode[z]=0;
 14175  01B4  0020               	movlb	0	; select bank0
 14176  01B5  082F               	movf	Battery_State_Machine@z,w
 14177  01B6  3EEE               	addlw	(low (_Imode| 0))& (0+255)
 14178  01B7  0086               	movwf	6
 14179  01B8  0187               	clrf	7
 14180  01B9  0181               	clrf	1
 14181                           
 14182                           ;battery_charger.c: 90: _delay((unsigned long)((2000)*(32000000/4000.0)));
 14183  01BA  3052               	movlw	82
 14184  01BB  0020               	movlb	0	; select bank0
 14185  01BC  00AB               	movwf	??_Battery_State_Machine+1
 14186  01BD  302B               	movlw	43
 14187  01BE  00AA               	movwf	??_Battery_State_Machine
 14188  01BF  3000               	movlw	0
 14189  01C0                     u4017:	
 14190  01C0  0B89               	decfsz	9,f
 14191  01C1  29C0               	goto	u4017
 14192  01C2  0BAA               	decfsz	??_Battery_State_Machine,f
 14193  01C3  29C0               	goto	u4017
 14194  01C4  0BAB               	decfsz	??_Battery_State_Machine+1,f
 14195  01C5  29C0               	goto	u4017
 14196  01C6  0000               	nop
 14197  01C7  0008               	return
 14198  01C8                     __end_of_Battery_State_Machine:	
 14199                           
 14200                           	psect	text38
 14201  0004                     __ptext38:	
 14202 ;; *************** function _gotoXY *****************
 14203 ;; Defined at:
 14204 ;;		line 124 in file "lcd.c"
 14205 ;; Parameters:    Size  Location     Type
 14206 ;;  x               1    wreg     unsigned char 
 14207 ;;  y               1    5[COMMON] unsigned char 
 14208 ;; Auto vars:     Size  Location     Type
 14209 ;;  x               1    7[COMMON] unsigned char 
 14210 ;; Return value:  Size  Location     Type
 14211 ;;                  1    wreg      void 
 14212 ;; Registers used:
 14213 ;;		wreg, status,2, status,0, pclath, cstack
 14214 ;; Tracked objects:
 14215 ;;		On entry : 0/0
 14216 ;;		On exit  : 0/0
 14217 ;;		Unchanged: 0/0
 14218 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14219 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14220 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14221 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14222 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14223 ;;Total ram usage:        3 bytes
 14224 ;; Hardware stack levels used:    1
 14225 ;; Hardware stack levels required when called:    1
 14226 ;; This function calls:
 14227 ;;		_LCDWrite
 14228 ;; This function is called by:
 14229 ;;		_LCDClear
 14230 ;;		_Battery_State_Machine
 14231 ;;		_main
 14232 ;; This function uses a non-reentrant model
 14233 ;;
 14234                           
 14235                           
 14236                           ;psect for function _gotoXY
 14237  0004                     _gotoXY:	
 14238                           
 14239                           ;incstack = 0
 14240                           ; Regs used in _gotoXY: [wreg+status,2+status,0+pclath+cstack]
 14241                           ;gotoXY@x stored from wreg
 14242  0004  00F7               	movwf	gotoXY@x
 14243                           
 14244                           ;lcd.c: 126: LCDWrite(0,(uint8_t)(0x80 | x));
 14245  0005  0877               	movf	gotoXY@x,w
 14246  0006  3880               	iorlw	128
 14247  0007  00F6               	movwf	??_gotoXY
 14248  0008  0876               	movf	??_gotoXY,w
 14249  0009  00F0               	movwf	LCDWrite@data
 14250  000A  3000               	movlw	0
 14251  000B  3193  2374  3180   	fcall	_LCDWrite
 14252                           
 14253                           ;lcd.c: 127: LCDWrite(0,(uint8_t)(0x40 | y));
 14254  000E  0875               	movf	gotoXY@y,w
 14255  000F  3840               	iorlw	64
 14256  0010  00F6               	movwf	??_gotoXY
 14257  0011  0876               	movf	??_gotoXY,w
 14258  0012  00F0               	movwf	LCDWrite@data
 14259  0013  3000               	movlw	0
 14260  0014  3193  2374         	fcall	_LCDWrite
 14261  0016  0008               	return
 14262  0017                     __end_of_gotoXY:	
 14263                           
 14264                           	psect	text39
 14265  12E2                     __ptext39:	
 14266 ;; *************** function _LCDWriteString *****************
 14267 ;; Defined at:
 14268 ;;		line 176 in file "lcd.c"
 14269 ;; Parameters:    Size  Location     Type
 14270 ;;  characters      2    8[BANK0 ] PTR const unsigned char 
 14271 ;;		 -> STR_1(14), 
 14272 ;; Auto vars:     Size  Location     Type
 14273 ;;		None
 14274 ;; Return value:  Size  Location     Type
 14275 ;;                  1    wreg      void 
 14276 ;; Registers used:
 14277 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 14278 ;; Tracked objects:
 14279 ;;		On entry : 0/0
 14280 ;;		On exit  : 0/0
 14281 ;;		Unchanged: 0/0
 14282 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14283 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14284 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14285 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14286 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14287 ;;Total ram usage:        3 bytes
 14288 ;; Hardware stack levels used:    1
 14289 ;; Hardware stack levels required when called:    2
 14290 ;; This function calls:
 14291 ;;		_LCDWriteCharacter
 14292 ;; This function is called by:
 14293 ;;		_Battery_State_Machine
 14294 ;; This function uses a non-reentrant model
 14295 ;;
 14296                           
 14297                           
 14298                           ;psect for function _LCDWriteString
 14299  12E2                     _LCDWriteString:	
 14300  12E2                     l2516:	
 14301                           ;lcd.c: 178: while (*characters)
 14302                           
 14303                           ;incstack = 0
 14304                           ; Regs used in _LCDWriteString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 14305                           
 14306  12E2  0020               	movlb	0	; select bank0
 14307  12E3  0828               	movf	LCDWriteString@characters,w
 14308  12E4  0084               	movwf	4
 14309  12E5  0829               	movf	LCDWriteString@characters+1,w
 14310  12E6  0085               	movwf	5
 14311  12E7  0012               	moviw fsr0++
 14312  12E8  1903               	btfsc	3,2
 14313  12E9  0008               	return
 14314                           
 14315                           ;lcd.c: 179: LCDWriteCharacter(*characters++);
 14316  12EA  0020               	movlb	0	; select bank0
 14317  12EB  0828               	movf	LCDWriteString@characters,w
 14318  12EC  0084               	movwf	4
 14319  12ED  0829               	movf	LCDWriteString@characters+1,w
 14320  12EE  0085               	movwf	5
 14321  12EF  0800               	movf	0,w	;code access
 14322  12F0  3196  26A4  3192   	fcall	_LCDWriteCharacter
 14323  12F3  3001               	movlw	1
 14324  12F4  0020               	movlb	0	; select bank0
 14325  12F5  07A8               	addwf	LCDWriteString@characters,f
 14326  12F6  3000               	movlw	0
 14327  12F7  3DA9               	addwfc	LCDWriteString@characters+1,f
 14328  12F8  2AE2               	goto	l2516
 14329  12F9                     __end_of_LCDWriteString:	
 14330                           
 14331                           	psect	text40
 14332  16A4                     __ptext40:	
 14333 ;; *************** function _LCDWriteCharacter *****************
 14334 ;; Defined at:
 14335 ;;		line 140 in file "lcd.c"
 14336 ;; Parameters:    Size  Location     Type
 14337 ;;  character       1    wreg     const unsigned char 
 14338 ;; Auto vars:     Size  Location     Type
 14339 ;;  character       1    5[BANK0 ] const unsigned char 
 14340 ;;  base            2    6[BANK0 ] unsigned int 
 14341 ;; Return value:  Size  Location     Type
 14342 ;;                  1    wreg      void 
 14343 ;; Registers used:
 14344 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 14345 ;; Tracked objects:
 14346 ;;		On entry : 0/0
 14347 ;;		On exit  : 0/0
 14348 ;;		Unchanged: 0/0
 14349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14350 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14351 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14352 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14353 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14354 ;;Total ram usage:        6 bytes
 14355 ;; Hardware stack levels used:    1
 14356 ;; Hardware stack levels required when called:    1
 14357 ;; This function calls:
 14358 ;;		_LCDWrite
 14359 ;;		___wmul
 14360 ;; This function is called by:
 14361 ;;		_LCDWriteString
 14362 ;;		_LCDWriteInt
 14363 ;;		_main
 14364 ;; This function uses a non-reentrant model
 14365 ;;
 14366                           
 14367                           
 14368                           ;psect for function _LCDWriteCharacter
 14369  16A4                     _LCDWriteCharacter:	
 14370                           
 14371                           ;incstack = 0
 14372                           ; Regs used in _LCDWriteCharacter: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 14373                           ;LCDWriteCharacter@character stored from wreg
 14374  16A4  0020               	movlb	0	; select bank0
 14375  16A5  00A5               	movwf	LCDWriteCharacter@character
 14376                           
 14377                           ;lcd.c: 142: uint16_t base;
 14378                           ;lcd.c: 143: base = character - 0x20;
 14379  16A6  0825               	movf	LCDWriteCharacter@character,w
 14380  16A7  3EE0               	addlw	224
 14381  16A8  00A6               	movwf	LCDWriteCharacter@base
 14382  16A9  30FF               	movlw	255
 14383  16AA  1803               	skipnc
 14384  16AB  3000               	movlw	0
 14385  16AC  00A7               	movwf	LCDWriteCharacter@base+1
 14386                           
 14387                           ;lcd.c: 144: base *= 3;
 14388  16AD  3003               	movlw	3
 14389  16AE  00F9               	movwf	___wmul@multiplier
 14390  16AF  3000               	movlw	0
 14391  16B0  00FA               	movwf	___wmul@multiplier+1
 14392  16B1  0827               	movf	LCDWriteCharacter@base+1,w
 14393  16B2  00FC               	movwf	___wmul@multiplicand+1
 14394  16B3  0826               	movf	LCDWriteCharacter@base,w
 14395  16B4  00FB               	movwf	___wmul@multiplicand
 14396  16B5  3192  22F9  3196   	fcall	___wmul
 14397  16B8  087A               	movf	?___wmul+1,w
 14398  16B9  0020               	movlb	0	; select bank0
 14399  16BA  00A7               	movwf	LCDWriteCharacter@base+1
 14400  16BB  0879               	movf	?___wmul,w
 14401  16BC  00A6               	movwf	LCDWriteCharacter@base
 14402                           
 14403                           ;lcd.c: 145: LCDWrite(1,fonts[base]);
 14404  16BD  0827               	movf	LCDWriteCharacter@base+1,w
 14405  16BE  0085               	movwf	5
 14406  16BF  0826               	movf	LCDWriteCharacter@base,w
 14407  16C0  0084               	movwf	4
 14408  16C1  3000               	movlw	low (_fonts| (0+32768))
 14409  16C2  0784               	addwf	4,f
 14410  16C3  3090               	movlw	high (_fonts| (0+32768))
 14411  16C4  3D85               	addwfc	5,f
 14412  16C5  0800               	movf	0,w	;code access
 14413  16C6  00A2               	movwf	??_LCDWriteCharacter
 14414  16C7  0822               	movf	??_LCDWriteCharacter,w
 14415  16C8  00F0               	movwf	LCDWrite@data
 14416  16C9  3001               	movlw	1
 14417  16CA  3193  2374  3196   	fcall	_LCDWrite
 14418                           
 14419                           ;lcd.c: 146: LCDWrite(1,fonts[base + 1]);
 14420  16CD  0020               	movlb	0	; select bank0
 14421  16CE  0826               	movf	LCDWriteCharacter@base,w
 14422  16CF  3E01               	addlw	1
 14423  16D0  00A2               	movwf	??_LCDWriteCharacter
 14424  16D1  3000               	movlw	0
 14425  16D2  3D27               	addwfc	LCDWriteCharacter@base+1,w
 14426  16D3  00A3               	movwf	??_LCDWriteCharacter+1
 14427  16D4  3000               	movlw	low (_fonts| (0+32768))
 14428  16D5  0722               	addwf	??_LCDWriteCharacter,w
 14429  16D6  0084               	movwf	4
 14430  16D7  3090               	movlw	high (_fonts| (0+32768))
 14431  16D8  3D23               	addwfc	??_LCDWriteCharacter+1,w
 14432  16D9  0085               	movwf	5
 14433  16DA  0800               	movf	0,w	;code access
 14434  16DB  00A4               	movwf	??_LCDWriteCharacter+2
 14435  16DC  0824               	movf	??_LCDWriteCharacter+2,w
 14436  16DD  00F0               	movwf	LCDWrite@data
 14437  16DE  3001               	movlw	1
 14438  16DF  3193  2374  3196   	fcall	_LCDWrite
 14439                           
 14440                           ;lcd.c: 147: LCDWrite(1,fonts[base + 2]);
 14441  16E2  0020               	movlb	0	; select bank0
 14442  16E3  0826               	movf	LCDWriteCharacter@base,w
 14443  16E4  3E02               	addlw	2
 14444  16E5  00A2               	movwf	??_LCDWriteCharacter
 14445  16E6  3000               	movlw	0
 14446  16E7  3D27               	addwfc	LCDWriteCharacter@base+1,w
 14447  16E8  00A3               	movwf	??_LCDWriteCharacter+1
 14448  16E9  3000               	movlw	low (_fonts| (0+32768))
 14449  16EA  0722               	addwf	??_LCDWriteCharacter,w
 14450  16EB  0084               	movwf	4
 14451  16EC  3090               	movlw	high (_fonts| (0+32768))
 14452  16ED  3D23               	addwfc	??_LCDWriteCharacter+1,w
 14453  16EE  0085               	movwf	5
 14454  16EF  0800               	movf	0,w	;code access
 14455  16F0  00A4               	movwf	??_LCDWriteCharacter+2
 14456  16F1  0824               	movf	??_LCDWriteCharacter+2,w
 14457  16F2  00F0               	movwf	LCDWrite@data
 14458  16F3  3001               	movlw	1
 14459  16F4  3193  2374  3196   	fcall	_LCDWrite
 14460                           
 14461                           ;lcd.c: 148: LCDWrite(1, 0x00);
 14462  16F7  01F0               	clrf	LCDWrite@data
 14463  16F8  3001               	movlw	1
 14464  16F9  3193  2374         	fcall	_LCDWrite
 14465  16FB  0008               	return
 14466  16FC                     __end_of_LCDWriteCharacter:	
 14467                           
 14468                           	psect	text41
 14469  12F9                     __ptext41:	
 14470 ;; *************** function ___wmul *****************
 14471 ;; Defined at:
 14472 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 14473 ;; Parameters:    Size  Location     Type
 14474 ;;  multiplier      2    9[COMMON] unsigned int 
 14475 ;;  multiplicand    2   11[COMMON] unsigned int 
 14476 ;; Auto vars:     Size  Location     Type
 14477 ;;  product         2    0[BANK0 ] unsigned int 
 14478 ;; Return value:  Size  Location     Type
 14479 ;;                  2    9[COMMON] unsigned int 
 14480 ;; Registers used:
 14481 ;;		wreg, status,2, status,0
 14482 ;; Tracked objects:
 14483 ;;		On entry : 0/0
 14484 ;;		On exit  : 0/0
 14485 ;;		Unchanged: 0/0
 14486 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14487 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14488 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14489 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14490 ;;      Totals:         4       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14491 ;;Total ram usage:        6 bytes
 14492 ;; Hardware stack levels used:    1
 14493 ;; This function calls:
 14494 ;;		Nothing
 14495 ;; This function is called by:
 14496 ;;		_readIAnalog
 14497 ;;		_LCDWriteCharacter
 14498 ;;		_main
 14499 ;;		_eval_poly
 14500 ;; This function uses a non-reentrant model
 14501 ;;
 14502                           
 14503                           
 14504                           ;psect for function ___wmul
 14505  12F9                     ___wmul:	
 14506                           
 14507                           ;incstack = 0
 14508                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 14509  12F9  0020               	movlb	0	; select bank0
 14510  12FA  01A0               	clrf	___wmul@product
 14511  12FB  01A1               	clrf	___wmul@product+1
 14512  12FC                     l2252:	
 14513  12FC  1C79               	btfss	___wmul@multiplier,0
 14514  12FD  2B03               	goto	l582
 14515  12FE  087B               	movf	___wmul@multiplicand,w
 14516  12FF  0020               	movlb	0	; select bank0
 14517  1300  07A0               	addwf	___wmul@product,f
 14518  1301  087C               	movf	___wmul@multiplicand+1,w
 14519  1302  3DA1               	addwfc	___wmul@product+1,f
 14520  1303                     l582:	
 14521  1303  3001               	movlw	1
 14522  1304                     u2165:	
 14523  1304  35FB               	lslf	___wmul@multiplicand,f
 14524  1305  0DFC               	rlf	___wmul@multiplicand+1,f
 14525  1306  0B89               	decfsz	9,f
 14526  1307  2B04               	goto	u2165
 14527  1308  3001               	movlw	1
 14528  1309                     u2175:	
 14529  1309  36FA               	lsrf	___wmul@multiplier+1,f
 14530  130A  0CF9               	rrf	___wmul@multiplier,f
 14531  130B  0B89               	decfsz	9,f
 14532  130C  2B09               	goto	u2175
 14533  130D  0879               	movf	___wmul@multiplier,w
 14534  130E  047A               	iorwf	___wmul@multiplier+1,w
 14535  130F  1D03               	btfss	3,2
 14536  1310  2AFC               	goto	l2252
 14537  1311  0020               	movlb	0	; select bank0
 14538  1312  0821               	movf	___wmul@product+1,w
 14539  1313  00FA               	movwf	?___wmul+1
 14540  1314  0820               	movf	___wmul@product,w
 14541  1315  00F9               	movwf	?___wmul
 14542  1316  0008               	return
 14543  1317                     __end_of___wmul:	
 14544                           
 14545                           	psect	text42
 14546  1374                     __ptext42:	
 14547 ;; *************** function _LCDWrite *****************
 14548 ;; Defined at:
 14549 ;;		line 281 in file "lcd.c"
 14550 ;; Parameters:    Size  Location     Type
 14551 ;;  data_or_comm    1    wreg     unsigned char 
 14552 ;;  data            1    0[COMMON] unsigned char 
 14553 ;; Auto vars:     Size  Location     Type
 14554 ;;  data_or_comm    1    2[COMMON] unsigned char 
 14555 ;;  i               1    4[COMMON] unsigned char 
 14556 ;;  d               1    3[COMMON] unsigned char 
 14557 ;; Return value:  Size  Location     Type
 14558 ;;                  1    wreg      void 
 14559 ;; Registers used:
 14560 ;;		wreg, status,2, status,0
 14561 ;; Tracked objects:
 14562 ;;		On entry : 0/0
 14563 ;;		On exit  : 0/0
 14564 ;;		Unchanged: 0/0
 14565 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14566 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14567 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14568 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14569 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14570 ;;Total ram usage:        5 bytes
 14571 ;; Hardware stack levels used:    1
 14572 ;; This function calls:
 14573 ;;		Nothing
 14574 ;; This function is called by:
 14575 ;;		_gotoXY
 14576 ;;		_LCDWriteCharacter
 14577 ;;		_LCDClear
 14578 ;;		_LCDInit
 14579 ;; This function uses a non-reentrant model
 14580 ;;
 14581                           
 14582                           
 14583                           ;psect for function _LCDWrite
 14584  1374                     _LCDWrite:	
 14585                           
 14586                           ;incstack = 0
 14587                           ; Regs used in _LCDWrite: [wreg+status,2+status,0]
 14588                           ;LCDWrite@data_or_command stored from wreg
 14589  1374  00F2               	movwf	LCDWrite@data_or_command
 14590                           
 14591                           ;lcd.c: 283: uint8_t i,d;
 14592                           ;lcd.c: 285: d=data;
 14593  1375  0870               	movf	LCDWrite@data,w
 14594  1376  00F1               	movwf	??_LCDWrite
 14595  1377  0871               	movf	??_LCDWrite,w
 14596  1378  00F3               	movwf	LCDWrite@d
 14597                           
 14598                           ;lcd.c: 287: if(data_or_command == 0)
 14599  1379  0872               	movf	LCDWrite@data_or_command,w
 14600  137A  1D03               	btfss	3,2
 14601  137B  2B7F               	goto	l150
 14602                           
 14603                           ;lcd.c: 288: {
 14604                           ;lcd.c: 289: LATAbits.LATA2 = 0;
 14605  137C  0020               	movlb	0	; select bank0
 14606  137D  1116               	bcf	22,2	;volatile
 14607                           
 14608                           ;lcd.c: 290: }
 14609  137E  2B81               	goto	l151
 14610  137F                     l150:	
 14611                           
 14612                           ;lcd.c: 291: else
 14613                           ;lcd.c: 292: {
 14614                           ;lcd.c: 293: LATAbits.LATA2 = 1;
 14615  137F  0020               	movlb	0	; select bank0
 14616  1380  1516               	bsf	22,2	;volatile
 14617  1381                     l151:	
 14618                           
 14619                           ;lcd.c: 294: }
 14620                           ;lcd.c: 296: LATAbits.LATA1 = 0;
 14621  1381  1096               	bcf	22,1	;volatile
 14622                           
 14623                           ;lcd.c: 298: for(i=0;i<8;i++)
 14624  1382  01F4               	clrf	LCDWrite@i
 14625  1383  3008               	movlw	8
 14626  1384  0274               	subwf	LCDWrite@i,w
 14627  1385  1803               	btfsc	3,0
 14628  1386  2B97               	goto	l153
 14629  1387                     l152:	
 14630                           
 14631                           ;lcd.c: 299: {
 14632                           ;lcd.c: 300: LATAbits.LATA3 = 0;
 14633  1387  1196               	bcf	22,3	;volatile
 14634                           
 14635                           ;lcd.c: 302: if(d&0x80)
 14636  1388  1FF3               	btfss	LCDWrite@d,7
 14637  1389  2B8B               	goto	l154
 14638                           
 14639                           ;lcd.c: 303: {
 14640                           ;lcd.c: 304: LATAbits.LATA3 = 1;
 14641  138A  1596               	bsf	22,3	;volatile
 14642  138B                     l154:	
 14643                           
 14644                           ;lcd.c: 305: }
 14645                           ;lcd.c: 307: LATAbits.LATA4 = 1;
 14646  138B  1616               	bsf	22,4	;volatile
 14647                           
 14648                           ;lcd.c: 309: d<<=1;
 14649  138C  1003               	clrc
 14650  138D  0DF3               	rlf	LCDWrite@d,f
 14651                           
 14652                           ;lcd.c: 311: LATAbits.LATA4=0;
 14653  138E  1216               	bcf	22,4	;volatile
 14654  138F  3001               	movlw	1
 14655  1390  00F1               	movwf	??_LCDWrite
 14656  1391  0871               	movf	??_LCDWrite,w
 14657  1392  07F4               	addwf	LCDWrite@i,f
 14658  1393  3008               	movlw	8
 14659  1394  0274               	subwf	LCDWrite@i,w
 14660  1395  1C03               	skipc
 14661  1396  2B87               	goto	l152
 14662  1397                     l153:	
 14663                           
 14664                           ;lcd.c: 312: }
 14665                           ;lcd.c: 314: LATAbits.LATA1 = 1;
 14666  1397  1496               	bsf	22,1	;volatile
 14667  1398  0008               	return
 14668  1399                     __end_of_LCDWrite:	
 14669  007E                     btemp	set	126	;btemp
 14670  007E                     wtemp0	set	126


Data Sizes:
    Strings     14
    Constant    330
    Data        10
    BSS         91
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     74      79
    BANK1            80     35      80
    BANK2            80      0      51
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5             8      0       0
    BANK6             0      0       0
    BANK7             0      0       0
    BANK8             0      0       0
    BANK9             0      0       0
    BANK10            0      0       0
    BANK11            0      0       0
    BANK12            0      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> log@exponent(BANK0[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 27
		 -> log@coeff(CODE[27]), 

    LCDWriteString@characters	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_1(CODE[14]), 


Critical Paths under _main in COMMON

    _main->___awtoft
    _tempCalc->___awtoft
    _log->___awtoft
    ___ftmul->___awtoft
    ___ftadd->___awtoft
    _readIAnalog->___wmul
    _readButton->_ADCRead
    _calculateCurrent3->___awtoft
    _calculateCurrent2->___awtoft
    _calculateCurrent1->___awtoft
    _calculateCurrent0->___awtoft
    ___fttol->___awtoft
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _SYSTEM_Initialize->_LCDClear
    _LCDInit->_LCDWrite
    _LCDClear->_gotoXY
    _Battery_State_Machine->_LCDWriteString
    _gotoXY->_LCDWrite
    _LCDWriteCharacter->___wmul
    ___wmul->___awdiv

Critical Paths under _main in BANK0

    _main->_tempCalc
    _tempCalc->_log
    _log->_eval_poly
    _eval_poly->___ftadd
    ___ftmul->___ftdiv
    ___ftsub->___ftadd
    ___ftadd->___ftmul
    _readIAnalog->___aldiv
    _calculateCurrent3->___fttol
    _calculateCurrent2->___fttol
    _calculateCurrent1->___fttol
    _calculateCurrent0->___fttol
    ___fttol->___ftdiv
    _LCDWriteInt->_LCDWriteCharacter
    _Battery_State_Machine->_LCDWriteString
    _LCDWriteString->_LCDWriteCharacter
    _LCDWriteCharacter->___wmul

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                37    37      0  102110
                                             72 BANK0      2     2      0
                                              0 BANK1     35    35      0
                            _ADCRead
              _Battery_State_Machine
                           _LCDClear
                            _LCDInit
                  _LCDWriteCharacter
                        _LCDWriteInt
                 _PWM6_LoadDutyValue
                 _PWM7_LoadDutyValue
                  _SYSTEM_Initialize
                            ___awdiv
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                            ___fttol
                             ___wmul
                  _calculateCurrent0
                  _calculateCurrent1
                  _calculateCurrent2
                  _calculateCurrent3
                         _cc_cv_mode
                             _gotoXY
                         _readButton
                        _readIAnalog
                           _tempCalc
 ---------------------------------------------------------------------------------
 (1) _tempCalc                                            11     9      2   34514
                                             61 BANK0     11     9      2
                            _ADCRead (ARG)
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftsub
                            ___fttol
                                _log
 ---------------------------------------------------------------------------------
 (2) _log                                                  6     3      3   17227
                                             55 BANK0      6     3      3
                           ___awtoft
                            ___ftadd
                             ___ftge
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _frexp                                                6     2      4     330
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) _eval_poly                                           10     3      7    7527
                                             45 BANK0     10     3      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             16    10      6    2961
                                             16 BANK0     16    10      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     322
                                              0 COMMON     9     3      6
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    3462
                                             45 BANK0      6     0      6
                            ___ftadd
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             13     7      6    3289
                                             32 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (1) _readIAnalog                                         24    22      2    1710
                                              6 BANK0     24    22      2
                            _ADCRead
                            ___aldiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     406
                                              0 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _readButton                                           2     2      0      22
                                              4 COMMON     2     2      0
                            _ADCRead
 ---------------------------------------------------------------------------------
 (2) _ADCRead                                              4     1      3      22
                                              0 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (1) _cc_cv_mode                                           6     6      0     528
                                              0 COMMON     6     6      0
 ---------------------------------------------------------------------------------
 (1) _calculateCurrent3                                    3     3      0    7270
                                             30 BANK0      3     3      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) _calculateCurrent2                                    3     3      0    7270
                                             30 BANK0      3     3      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) _calculateCurrent1                                    3     3      0    7270
                                             30 BANK0      3     3      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) _calculateCurrent0                                    3     3      0    7270
                                             30 BANK0      3     3      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             14    10      4     729
                                             16 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    4001
                                              0 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             6     3      3    2540
                                              8 COMMON     6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    1707
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    2     2      0    3767
                                             11 COMMON     2     2      0
                     _ADC_Initialize
         _Init_Battery_State_Machine
                           _LCDClear
                            _LCDInit
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _PWM_Initialize
                    _TMR2_Initialize
                    _TMR4_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR4_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               1     1      0      23
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LCDInit                                              1     1      0     803
                                              5 COMMON     1     1      0
                           _LCDWrite
 ---------------------------------------------------------------------------------
 (2) _LCDClear                                             3     3      0    2809
                                              8 COMMON     3     3      0
                           _LCDWrite
                             _gotoXY
 ---------------------------------------------------------------------------------
 (2) _Init_Battery_State_Machine                           2     2      0     132
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM7_LoadDutyValue                                   4     2      2      97
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _PWM6_LoadDutyValue                                   4     2      2      97
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _LCDWriteInt                                         16    11      5    7479
                                              8 BANK0     16    11      5
                            _ADCRead (ARG)
                  _LCDWriteCharacter
                            ___awdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     265
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              9     5      4     830
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (1) _Battery_State_Machine                                6     6      0    4485
                                             10 BANK0      6     6      0
                     _LCDWriteString
                             _gotoXY
 ---------------------------------------------------------------------------------
 (1) _gotoXY                                               3     2      1    1960
                                              5 COMMON     3     2      1
                           _LCDWrite
 ---------------------------------------------------------------------------------
 (2) _LCDWriteString                                       3     1      2    1953
                                             13 COMMON     1     1      0
                                              8 BANK0      2     0      2
                  _LCDWriteCharacter
 ---------------------------------------------------------------------------------
 (2) _LCDWriteCharacter                                    6     6      0    1855
                                              2 BANK0      6     6      0
                           _LCDWrite
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     940
                                              9 COMMON     4     0      4
                                              0 BANK0      2     2      0
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) _LCDWrite                                             5     4      1     803
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCRead
   _Battery_State_Machine
     _LCDWriteString
       _LCDWriteCharacter
         _LCDWrite
         ___wmul
           ___awdiv (ARG)
     _gotoXY
       _LCDWrite
   _LCDClear
     _LCDWrite
     _gotoXY
       _LCDWrite
   _LCDInit
     _LCDWrite
   _LCDWriteCharacter
     _LCDWrite
     ___wmul
       ___awdiv (ARG)
   _LCDWriteInt
     _ADCRead (ARG)
     _LCDWriteCharacter (ARG)
       _LCDWrite
       ___wmul
         ___awdiv (ARG)
     ___awdiv (ARG)
     ___lwmod (ARG)
   _PWM6_LoadDutyValue
   _PWM7_LoadDutyValue
   _SYSTEM_Initialize
     _ADC_Initialize
     _Init_Battery_State_Machine
     _LCDClear
       _LCDWrite
       _gotoXY
         _LCDWrite
     _LCDInit
       _LCDWrite
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM_Initialize
     _TMR2_Initialize
     _TMR4_Initialize
   ___awdiv
   ___awtoft
     ___ftpack
   ___ftdiv
     ___awtoft (ARG)
       ___ftpack
     ___ftpack (ARG)
     ___ftpack (ARG)
   ___ftmul
     ___awtoft (ARG)
       ___ftpack
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftpack (ARG)
     _frexp (ARG)
   ___fttol
     ___awtoft (ARG)
       ___ftpack
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
   ___wmul
     ___awdiv (ARG)
   _calculateCurrent0
     ___awtoft
       ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
   _calculateCurrent1
     ___awtoft
       ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
   _calculateCurrent2
     ___awtoft
       ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
   _calculateCurrent3
     ___awtoft
       ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
   _cc_cv_mode
   _gotoXY
     _LCDWrite
   _readButton
     _ADCRead
   _readIAnalog
     _ADCRead
     ___aldiv
     ___wmul
       ___awdiv (ARG)
   _tempCalc
     _ADCRead (ARG)
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
       _frexp (ARG)
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftsub (ARG)
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
         _frexp (ARG)
     ___fttol (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
     _log (ARG)
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
         _frexp (ARG)
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       _eval_poly
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
       _frexp

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4A      4F       5       98.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     23      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      33       9       63.8%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5                8      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      E0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BANK8                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BANK9                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BANK10               0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BANK11               0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      E0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sat Jul 07 16:31:51 2018

                       _stateCounter 00B8                                    _j 006C  
                                  _x 00CA               LCDWriteInt@fieldLength 002A  
            __size_of_PWM_Initialize 0015                          __CFG_CP$OFF 0000  
                                 l60 12C5                                   l57 12BE  
                       ___awdiv@sign 0076                  ___wmul@multiplicand 007B  
        __size_of_PWM6_LoadDutyValue 0016                         ___ftadd@exp1 004C  
                       ___ftadd@exp2 004B                          __CFG_LVP$ON 0000  
                       ___ftadd@sign 004A                                  l150 137F  
                                l151 1381                                  l152 1387  
                                l153 1397                                  l154 138B  
                                l360 0BF1                        LCDClear@index 0079  
                                l637 178F                                  l582 1303  
                                l750 005C                                  l751 0064  
                                l743 0049                                  l834 08E3  
                                l774 0D40                                  _GIE 005F  
                                _RB2 006A                         __CFG_CPD$OFF 0000  
                                _log 09A6                      __end_of_ADCRead 12CC  
                    _TMR2_Initialize 1286                         __CFG_BORV$LO 0000  
                                wreg 0009                      __end_of_LCDInit 14C9  
                       ?_LCDWriteInt 0028                         __CFG_ZCD$OFF 0000  
                       ___ftdiv@cntr 002A                         ___ftdiv@sign 002F  
                               l3000 00B8                                 l2200 001F  
                               l3002 00C0                                 l3004 00D2  
                               l2204 0026                                 l2300 0D16  
                               l3022 0152                                 l3014 0129  
                               l2214 004E                                 l2206 0030  
                               l2310 0D32                                 l2302 0D1B  
                               l3024 0154                                 l3032 0187  
                               l2216 0056                                 l2208 0035  
                               l2320 0D64                                 l2312 0D3C  
                               l2304 0D1F                                 l2330 0D7F  
                               l3210 03BC                                 l2252 12FC  
                               l3036 01A0                                 l3028 016E  
                               l2316 0D52                                 l2340 0A6D  
                               l3204 03A2                                 l3132 0216  
                               l2406 135E                                 l3054 0BFF  
                               l2270 0CC9                                 l2414 14DF  
                               l3230 0406                                 l3126 0210  
                               l3118 01FC                                 l3064 0C4F  
                               l2280 0CDF                                 l3224 03EF  
                               l3144 0261                                 l2530 13BA  
                               l3082 159D                                 l3058 0C0C  
                               l2274 0CD0                                 l2418 14F5  
                               l2370 0ADA                                 l2362 0AC6  
                               l2346 0A83                                 l3234 040D  
                               l3138 0235                                 l2516 12E2  
                               l2524 13A6                                 l3076 1558  
                               l2292 0CF9                                 l3180 0356  
                               l2710 167C                                 l3094 1627  
                               l2374 0AE2                                 l2358 0ABE  
                               l2438 1516                                 l3246 043B  
                               l3174 0339                                 l2720 1697  
                               l3088 15E2                                 l2456 086F  
                               l2810 08DA                                 l2802 08BF  
                               l2298 0D0C                                 l2634 09D8  
                               l3186 0370                                 l2724 169F  
                               l2716 168E                                 l2708 1670  
                               l2740 092A                                 l2812 08E6  
                               l2804 08CD                                 l2628 09C5  
                               l3372 07B6                                 l2830 13D1  
                               l2734 0914                                 l2902 177B  
                               l2662 17B0                                 l2654 17A0  
                               l3198 0385                                 l2920 0B2B  
                               l2816 08F4                                 l2904 177C  
                               l2680 17F7                                 l2672 17DE  
                               l2664 17BE                                 l3368 07AD  
                               l2834 13DD                                 l2930 0B32  
                               l2762 0984                                 l2754 096B  
                               l2692 165D                                 l2828 13C5  
                               l2940 0B6F                                 l2932 0B5F  
                               l2676 17E9                                 l2838 13E6  
                               l2950 0BA0                                 l2942 0B75  
                               l2870 1720                                 l2774 131F  
                               l2936 0B63                                 l2784 088F  
                               l2880 174C                                 l2856 0FD7  
                               l2698 1668                                 l2954 0BAE  
                               l2938 0B67                                 l2890 175A  
                               l2882 174E                                 l2948 0B79  
                               l2876 173A                                 l2896 1763  
                               ?_log 0057                                 STR_1 181B  
                               u2015 002B                                 u2035 0044  
                               _LATA 0016                                 _LATB 0017  
                               u2055 0051                                 _LATC 0018  
                               u3025 08C0                                 u3115 13D7  
                               u2315 0D0D                                 u3300 0B15  
                               u2165 1304                                 u3125 13DE  
                               u3205 0FE3                                 u2175 1309  
                               u4007 1486                                 u2095 006B  
                               u3055 08DB                                 u3215 170E  
                               u4017 01C0                                 u3225 171A  
                               u3145 0ECA                                 u2345 0D20  
                               _T2PR 028D                                 u3235 172A  
                               u3155 0F24                                 u2515 0AE3  
                               u3405 080F                                 u3245 1736  
                               u3165 0F62                                 u2285 0CFA  
                               u2525 0AE9                                 u2445 0A8F  
                               u3095 13C8                                 u3255 1744  
                               u3175 0FB1                                 u2375 0D33  
                               u2455 0A9F                                 u3425 0096  
                               u2650 1453                                 _T4PR 0293  
                               u3435 00AA                                 u2635 13A4  
                               u2475 0AC7                                 u3365 0B8E  
                               u2645 13B8                                 u3605 0C69  
                               u2725 17B3                                 u2485 0ACD  
                               u3465 00FC                                 u2825 1673  
                               u3545 0BDE                                 u2745 17BF  
                               u3395 12DB                                 u2915 093C  
                               u3635 1552                                 u2755 17D3  
                               u2845 167D                                 u2925 094C  
                               u3645 1597                                 u2765 17DF  
                               u3725 0327                                 u3495 0145  
                               u2855 1687                                 u2935 096C  
                               u3655 15DC                                 u3815 0382  
                               u2865 168F                                 u2945 097B  
                               u3665 1621                                 u3585 0C26  
                               u2955 0985                                 u3915 03FF  
                               u3845 0393                                 u3765 0347  
                               u3865 03B1                                 u3785 0365  
                               u2995 0896                                 u3895 03E8  
                               u3977 0204                                 u3987 176D  
                               u3997 1477                  tempCalc@analogValue 005D  
                               _WPUA 0F39                                 _WPUB 0F44  
                               _WPUC 0F4F                                 _WPUE 0F65  
                               _Imin 0145                                 _Iref 00B4  
                               _Iout 00C4                         __CFG_WRT$OFF 0000  
                      __CFG_FCMEN$ON 0000                                 _Vref 00B0  
                               _main 01C8                         ___ftpack@arg 0070  
                       ___ftpack@exp 0073                                 fsr0h 0005  
                               fsr1h 0007                                 indf0 0000  
                               fsr0l 0004                                 indf1 0001  
                               fsr1l 0006                                 btemp 007E  
                               log@x 0057                         ?_readIAnalog 0026  
                      __CFG_BOREN$ON 0000                                 start 0002  
                      __CFG_CSWEN$ON 0000                        __CFG_MCLRE$ON 0000  
                       ___ftmul@cntr 003E                         ___ftmul@sign 003F  
                   __end_of_LCDClear 13BF                         ___fttol@exp1 003D  
                              ??_log 005A                         ___fttol@lval 0039  
__size_of_Init_Battery_State_Machine 0033       __size_of_OSCILLATOR_Initialize 0009  
                   __end_of_LCDWrite 1399        __end_of_OSCILLATOR_Initialize 127A  
                    __end_of___aldiv 1800                                _ADACQ 009D  
                              _ADACT 0099                                _ADCAP 009B  
                              ?_main 0070                                _ADCLK 0098  
                              _ADPCH 009E                                _ADREF 009A  
                    __end_of___awdiv 16A4                                _ADPRE 009C  
                    __end_of___ftadd 0D97                        __CFG_WDTE$OFF 0000  
                              _ADRPT 010D                      __end_of___ftdiv 09A6  
                    __end_of___ftmul 0B0A                      ___awdiv@divisor 0070  
                    __end_of___ftsub 1335                      __end_of___fttol 08FD  
                              _T2CON 028E                                _LATA5 00B5  
                              _T4CON 0294                                _T2HLT 028F  
                              _T4HLT 0295                                _T2TMR 028C  
                              _T2RST 0291                      __end_of___lwmod 13EB  
                              _T4TMR 0292                                _T4RST 0297  
                    ___awdiv@counter 0075                                _OSCEN 0891  
                              _TRISA 0011                                _TRISB 0012  
                              _TRISC 0013                      _TMR4_Initialize 1294  
                              _Imode 00EE               ?_Battery_State_Machine 0070  
                              _cc_cv 00C2                        ___awtoft@sign 007D  
                              _frexp 1504                                _fonts 1000  
                              _errno 0149                        ___ftpack@sign 0074  
                              main@j 00E7                         main@slowLoop 00DA  
                              status 0003                                wtemp0 007E  
                    __initialization 07B9                          log@exponent 005B  
                       __end_of_main 07B9              __end_of_TMR2_Initialize 1294  
                          ??_ADCRead 0073                               ??_main 0068  
                      ___fttol@sign1 0038                            ??_LCDInit 0075  
             Battery_State_Machine@z 002F              LCDWrite@data_or_command 0072  
                             _ADCON0 0093                               _ADCON1 0094  
                             _ADCON2 0095                               _ADCON3 0096  
                             ?_frexp 0070                               _ADLTHH 010F  
                             _ADLTHL 010E                               _ADRESH 008D  
                             _ADRESL 008C                               _ADSTAT 0097  
                             _ADUTHH 0111                     ___awdiv@dividend 0072  
                             _ADUTHL 0110                     __end_of___awtoft 1374  
                             _ANSELA 0F38                               _ANSELB 0F43  
                             _ANSELC 0F4E                     __end_of___ftpack 007B  
                             _RB0PPS 0F18                               _RA6PPS 0F16  
                             _RA7PPS 0F17                       __CFG_WDTCCS$SC 0000  
                             _FVRCON 090C                               _OSCFRQ 0893  
                     __CFG_PWRTE$OFF 0000                       _LCDWriteString 12E2  
                       _CCPTMRS1bits 021F                               ___ftge 14C9  
                          ??___aldiv 0078                               ___wmul 12F9  
                          ??___awdiv 0074                            ??___ftadd 0046  
                     __CFG_STVREN$ON 0000                       _PWM_Initialize 12A2  
                          ??___ftdiv 0026                            ??___ftmul 0036  
                          ??___ftsub 007E                            ??___fttol 0034  
                          ??___lwmod 0074                               _gotoXY 0004  
                             _button 006E              __end_of_TMR4_Initialize 12A2  
                   ___awdiv@quotient 0077                               _totals 0120  
              ___ftmul@f3_as_product 003B                     __end_of_tempCalc 0EB4  
                       LCDWrite@data 0070                         LCDWriteInt@i 0037  
                       LCDWriteInt@j 0036                            ?_LCDClear 0070  
                  _SYSTEM_Initialize 1455                 __size_of_LCDWriteInt 00B9  
                   __end_oflog@coeff 181B              __end_of__initialization 07FD  
                         ___ftadd@f1 0040                           ___ftadd@f2 0043  
                         ___ftge@ff1 0070                           ___ftge@ff2 0073  
                          ?_LCDWrite 0070                   ?_SYSTEM_Initialize 0070  
             __end_of_LCDWriteString 12F9                         eval_poly@res 0054  
                         ___ftdiv@f1 0023                           ___ftdiv@f2 0020  
                         ___ftdiv@f3 002B                           ___awtoft@c 0078  
                         ___ftmul@f1 0030                           ___ftmul@f2 0033  
             __end_of_PWM_Initialize 12B7                 __size_of_readIAnalog 014C  
                         ___ftsub@f1 0050                           ___ftsub@f2 004D  
                         ___fttol@f1 0030                       __pcstackCOMMON 0070  
                       __pidataBANK1 1267                         __pidataBANK2 1269  
                ??_SYSTEM_Initialize 007B                        __end_of_frexp 153F  
                      __end_of_fonts 112F                            LCDWrite@d 0073  
                          LCDWrite@i 0074                     ?_TMR2_Initialize 0070  
                         _cc_cv_mode 0BC3          __size_of_PWM7_LoadDutyValue 0016  
                     main@efficiency 00E3                    LCDWriteInt@F14387 0140  
                  _calculateCurrent0 153F                    _calculateCurrent1 1584  
                  _calculateCurrent2 15C9                    _calculateCurrent3 160E  
                            ??_frexp 0074            __end_of_SYSTEM_Initialize 148E  
                         __pbssBANK0 006A                           __pbssBANK1 00A0  
                         __pbssBANK2 0120                   ?_calculateCurrent0 0070  
                 ?_calculateCurrent1 0070                   ?_calculateCurrent2 0070  
                 ?_calculateCurrent3 0070                         _batteryState 006A  
                 __size_of_eval_poly 0060                           ??_LCDClear 0078  
                     main@faultCount 00D8                           ??_LCDWrite 0071  
                    ?_LCDWriteString 0028                  ??_calculateCurrent0 003E  
                ??_calculateCurrent1 003E                  ??_calculateCurrent2 003E  
                ??_calculateCurrent3 003E                      ?_PWM_Initialize 0070  
                         __pmaintext 01C8                              ?___ftge 0070  
                            ?___wmul 0079                      __CFG_PPS1WAY$ON 0000  
         __end_of_PWM6_LoadDutyValue 12E2                              ?_gotoXY 0075  
                            _ADCRead 12B7                     ?_TMR4_Initialize 0070  
                          ?___awtoft 0078                            ?___ftpack 0070  
                            _ADSTPTH 0113                              _ADSTPTL 0112  
           __CFG_SCANE$not_available 0000                  __CFG_RSTOSC$HFINT32 0000  
            __size_of_ADC_Initialize 001F              ??_Battery_State_Machine 002A  
                            _LCDInit 148E            __end_of_calculateCurrent0 1584  
          __end_of_calculateCurrent1 15C9            __end_of_calculateCurrent2 160E  
          __end_of_calculateCurrent3 1653                              _OSCCON1 088D  
                            _OSCCON3 088F                              _OSCTUNE 0892  
                            _PWM6DCH 038D                              _PWM6DCL 038C  
                            _PWM7DCH 0391                              _PWM7DCL 0390  
                            _PWM6CON 038E                              _PWM7CON 0392  
                            _PPSLOCK 0E8F                       main@menuButton 00E6  
                     main@dutyCycle1 00D6                       main@dutyCycle6 00EA  
                     main@dutyCycle7 00EC                           _lastButton 006D  
                          ?_tempCalc 005D                              ___aldiv 177E  
                    __size_of___ftge 003B                              ___awdiv 1653  
                            ___ftadd 0CA1                           _readButton 16FC  
                            ___ftdiv 08FD                      __size_of___wmul 001E  
                            ___ftmul 0A56                              ___ftsub 1317  
                            ___fttol 0876                   main@displayRefresh 00DB  
                            ___lwmod 13BF                      __size_of_gotoXY 0013  
                         ??___awtoft 007B                           ??___ftpack 0075  
                  __end_of_eval_poly 0876                              __ptext1 0D97  
                            __ptext2 09A6                              __ptext3 1504  
                            __ptext4 0816                              __ptext5 0A56  
                            __ptext6 14C9                              __ptext7 1317  
                            __ptext8 0CA1                              __ptext9 0EB4  
                        ?_cc_cv_mode 0070                _OSCILLATOR_Initialize 1271  
                          _T2CONbits 028E                              _current 00A0  
                       __size_of_log 00B0                       ADCRead@channel 0073  
                   ___aldiv@dividend 0074                            _T4CONbits 0294  
           ??_PIN_MANAGER_Initialize 0070                              _samples 2198  
         __size_of_SYSTEM_Initialize 0039                              clrloop0 127B  
                            _voltage 00A8         ??_Init_Battery_State_Machine 0070  
               end_of_initialization 07FD                LCDWriteCharacter@base 0026  
                            gotoXY@x 0077                              gotoXY@y 0075  
                         ??_tempCalc 007E                     ___aldiv@quotient 0022  
                  _LCDWriteCharacter 16A4                __CFG_WDTCPS$WDTCPS_31 0000  
                 ?_LCDWriteCharacter 0070           __size_of_calculateCurrent0 0045  
         __size_of_calculateCurrent1 0045           __size_of_calculateCurrent2 0045  
         __size_of_calculateCurrent3 0045                            _TRISAbits 0011  
                ??_LCDWriteCharacter 0022                     __CFG_FEXTOSC$OFF 0000  
                        ___ftdiv@exp 002E                  __size_of_cc_cv_mode 00DE  
                  __size_of_LCDClear 0026           LCDWriteCharacter@character 0025  
                  __size_of_LCDWrite 0025                          ___ftmul@exp 003A  
          __end_of_LCDWriteCharacter 16FC                          ?_readButton 0070  
          readIAnalog@analog_channel 003A                       __end_of___ftge 1504  
                          _VHoldMode 00C0                       __end_of___wmul 1317  
                     _ADC_Initialize 1335                       __end_of_gotoXY 0017  
             ?_OSCILLATOR_Initialize 0070                            _IminCount 00BC  
                start_initialization 07B9                           eval_poly@d 0050  
                         eval_poly@n 0052                           eval_poly@x 004D  
                  main@faultNotReset 00CF      __size_of_PIN_MANAGER_Initialize 0037  
                        __end_of_log 0A56                        ??_LCDWriteInt 002D  
                   ??_LCDWriteString 007D                           frexp@value 0070  
                   ??_PWM_Initialize 0070                        ??_readIAnalog 0028  
                    main@batteryTemp 00CD                     __CFG_LPBOREN$OFF 0000  
                           ??___ftge 0076                    tempCalc@steinhart 0065  
                           ??___wmul 007D               __end_of_ADC_Initialize 1354  
                      _tempCalc$1188 0062                          __pdataBANK1 00EE  
                        __pdataBANK2 014B           __end_of_PWM7_LoadDutyValue 0816  
                           ??_gotoXY 0076                             ?_ADCRead 0070  
       PWM7_LoadDutyValue@dutyCycle7 0070                    __size_of___awtoft 0020  
                           ?_LCDInit 0070                    __size_of___ftpack 0064  
                        __pbssBIGRAM 2198       __size_of_Battery_State_Machine 014D  
      __end_of_Battery_State_Machine 01C8                            ___latbits 0002  
                      __pcstackBANK0 0020                        __pcstackBANK1 00CB  
                 _PWM6_LoadDutyValue 12CC             __size_of_TMR2_Initialize 000E  
 __end_of_Init_Battery_State_Machine 141E           _Init_Battery_State_Machine 13EB  
                __size_of_readButton 0082                  ?_PWM6_LoadDutyValue 0070  
                __end_of_LCDWriteInt 0BC3                            _main$1190 00D1  
                          _main$1191 00DF                            _main$1192 00E1  
                          _main$1189 00DC               _PIN_MANAGER_Initialize 141E  
         __size_of_LCDWriteCharacter 0058                             ?___aldiv 0070  
                __end_of_readIAnalog 1000                    __size_of_tempCalc 011D  
                           ?___awdiv 0070                             ?___ftadd 0040  
                           ?___ftdiv 0020                             ?___ftmul 0030  
                           ?___ftsub 004D                             ?___fttol 0030  
                   LCDWriteInt@value 0028                             ?___lwmod 0070  
                    ?_ADC_Initialize 0070                 ??_PWM6_LoadDutyValue 0072  
                       ??_cc_cv_mode 0070                            _eval_poly 0816  
           __size_of_TMR4_Initialize 000E                       __size_of_frexp 003B  
                           _T2CLKCON 0290                             _T4CLKCON 0296  
                        cc_cv_mode@z 0075                             _LCDClear 1399  
                    ___aldiv@divisor 0070                      ___aldiv@counter 0020  
                     ___wmul@product 0020                             _LATAbits 0016  
                           _LCDWrite 1374                            clear_ram0 127A  
                           _PIE0bits 0716                   __end_of_cc_cv_mode 0CA1  
                           _PIR4bits 0710                     readIAnalog@value 003C  
                          main@MPPT0 00E8                            main@MPPT1 00D4  
                   __size_of_ADCRead 0015                           _ADCON0bits 0093  
                  ___wmul@multiplier 0079                           ?_eval_poly 004D  
                   __size_of_LCDInit 003B                             _Ianalogs 0130  
                        _LCDWriteInt 0B0A          Init_Battery_State_Machine@z 0071  
                  ??_TMR2_Initialize 0070                          _readIAnalog 0EB4  
                          frexp@eptr 0073                             _Vanalogs 0138  
                       ??_readButton 0074              ??_OSCILLATOR_Initialize 0070  
               LCDWriteInt@numPlaces 002B                     __size_of___aldiv 0082  
                   __size_of___awdiv 0051                     __size_of___ftadd 00F6  
                   __size_of___ftdiv 00A9                     __size_of___ftmul 00B4  
                   __size_of___ftsub 001E                     __size_of___fttol 0087  
                   __size_of___lwmod 002C                          _readButtons 00C6  
                           ___awtoft 1354                             ___ftpack 0017  
                           _channels 014B                             __ptext10 177E  
                           __ptext11 16FC                             __ptext20 1354  
                           __ptext12 12B7                             __ptext21 0017  
                           __ptext13 0BC3                             __ptext30 13EB  
                           __ptext22 1455                             __ptext14 160E  
                           __ptext31 1335                             __ptext23 1294  
                           __ptext15 15C9                             __ptext40 16A4  
                           __ptext32 0800                             __ptext24 1286  
                           __ptext16 1584                             __ptext41 12F9  
                           __ptext33 12CC                             __ptext25 12A2  
                           __ptext17 153F                             __ptext42 1374  
                           __ptext34 0B0A                             __ptext26 141E  
                           __ptext18 0876                             __ptext35 13BF  
                           __ptext27 1271                             __ptext19 08FD  
                           __ptext36 1653                             __ptext28 148E  
                           __ptext37 007B                             __ptext29 1399  
                           __ptext38 0004                             __ptext39 12E2  
                    LCDWriteInt@sign 002C                            tempCalc@R 005F  
                 __end_of_readButton 177E                    ??_TMR4_Initialize 0070  
                      __size_of_main 05F1                 __CFG_WDTCWS$WDTCWS_7 0000  
                           _tempCalc 0D97          PIN_MANAGER_Initialize@state 0070  
                           log@coeff 1800                          ??_eval_poly 007E  
                        _sampleIndex 00C8                   _PWM7_LoadDutyValue 0800  
        ?_Init_Battery_State_Machine 0070                     ___lwmod@dividend 0072  
                     LCDWriteInt@str 0031              ?_PIN_MANAGER_Initialize 0070  
                ?_PWM7_LoadDutyValue 0070                    __CFG_CLKOUTEN$OFF 0000  
                        _PPSLOCKbits 0E8F                     ??_ADC_Initialize 0070  
       PWM6_LoadDutyValue@dutyCycle6 0070                        __pstringtext1 1000  
                      __pstringtext2 1800                        __pstringtext3 0000  
               ??_PWM7_LoadDutyValue 0072                      ___lwmod@divisor 0070  
                    ___lwmod@counter 0075             LCDWriteString@characters 0028  
                       ___aldiv@sign 0021                   readIAnalog@channel 0026  
              _Battery_State_Machine 007B       __end_of_PIN_MANAGER_Initialize 1455  
                      main@IOutTotal 00CB              __size_of_LCDWriteString 0017  
