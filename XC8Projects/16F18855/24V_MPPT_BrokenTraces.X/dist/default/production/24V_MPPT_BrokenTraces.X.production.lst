

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Aug 27 16:50:14 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F18855
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	stringtext1,global,class=STRCODE,delta=2
     7                           	psect	stringtext2,global,class=STRCODE,delta=2
     8                           	psect	stringtext3,global,class=STRCODE,delta=2
     9                           	psect	stringtext4,global,class=STRCODE,delta=2
    10                           	psect	stringtext5,global,class=STRCODE,delta=2
    11                           	psect	cinit,global,class=CODE,merge=1,delta=2
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    17                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    18                           	psect	inittext,global,class=CODE,delta=2
    19                           	psect	clrtext,global,class=CODE,delta=2
    20                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    21                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    22                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    23                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    24                           	psect	text1,local,class=CODE,merge=1,delta=2
    25                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    26                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    27                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    28                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    29                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    30                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    31                           	psect	text8,local,class=CODE,merge=1,delta=2
    32                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    33                           	psect	text10,local,class=CODE,merge=1,delta=2
    34                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    35                           	psect	text12,local,class=CODE,merge=1,delta=2
    36                           	psect	text13,local,class=CODE,merge=1,delta=2
    37                           	psect	text14,local,class=CODE,merge=1,delta=2
    38                           	psect	text15,local,class=CODE,merge=1,delta=2
    39                           	psect	text16,local,class=CODE,merge=1,delta=2
    40                           	psect	text17,local,class=CODE,merge=1,delta=2
    41                           	psect	text18,local,class=CODE,merge=1,delta=2,group=2
    42                           	psect	text19,local,class=CODE,merge=1,delta=2
    43                           	psect	text20,local,class=CODE,merge=1,delta=2
    44                           	psect	text21,local,class=CODE,merge=1,delta=2
    45                           	psect	text22,local,class=CODE,merge=1,delta=2
    46                           	psect	text23,local,class=CODE,merge=1,delta=2
    47                           	psect	text24,local,class=CODE,merge=1,delta=2
    48                           	psect	text25,local,class=CODE,merge=1,delta=2
    49                           	psect	text26,local,class=CODE,merge=1,delta=2
    50                           	psect	text27,local,class=CODE,merge=1,delta=2
    51                           	psect	text28,local,class=CODE,merge=1,delta=2
    52                           	psect	text29,local,class=CODE,merge=1,delta=2
    53                           	psect	text30,local,class=CODE,merge=1,delta=2
    54                           	psect	text31,local,class=CODE,merge=1,delta=2
    55                           	psect	text32,local,class=CODE,merge=1,delta=2
    56                           	psect	text33,local,class=CODE,merge=1,delta=2
    57                           	psect	text34,local,class=CODE,merge=1,delta=2
    58                           	psect	text35,local,class=CODE,merge=1,delta=2,group=2
    59                           	psect	text36,local,class=CODE,merge=1,delta=2,group=2
    60                           	psect	text37,local,class=CODE,merge=1,delta=2
    61                           	psect	text38,local,class=CODE,merge=1,delta=2,group=2
    62                           	psect	text39,local,class=CODE,merge=1,delta=2
    63                           	psect	text40,local,class=CODE,merge=1,delta=2
    64                           	psect	text41,local,class=CODE,merge=1,delta=2,group=2
    65                           	psect	text42,local,class=CODE,merge=1,delta=2,group=2
    66                           	psect	text43,local,class=CODE,merge=1,delta=2,group=2
    67                           	psect	text44,local,class=CODE,merge=1,delta=2,group=2
    68                           	dabs	1,0x620,48
    69                           	dabs	1,0x5A0,80
    70                           	dabs	1,0x520,80
    71                           	dabs	1,0x4A0,80
    72                           	dabs	1,0x420,80
    73                           	dabs	1,0x3D0,32
    74                           	dabs	1,0x2260,0,_Isamples
    75                           	dabs	1,0x7E,2
    76  0000                     
    77                           ; Version 1.45
    78                           ; Generated 16/11/2017 GMT
    79                           ; 
    80                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    81                           ; All rights reserved.
    82                           ; 
    83                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    84                           ; 
    85                           ; Redistribution and use in source and binary forms, with or without modification, are
    86                           ; permitted provided that the following conditions are met:
    87                           ; 
    88                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    89                           ;        conditions and the following disclaimer.
    90                           ; 
    91                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    92                           ;        of conditions and the following disclaimer in the documentation and/or other
    93                           ;        materials provided with the distribution.
    94                           ; 
    95                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    96                           ;        software without specific prior written permission.
    97                           ; 
    98                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    99                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   100                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   101                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   102                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   103                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   104                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   105                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   106                           ; 
   107                           ; 
   108                           ; Code-generator required, PIC16F18855 Definitions
   109                           ; 
   110                           ; SFR Addresses
   111  0000                     	;# 
   112  0001                     	;# 
   113  0002                     	;# 
   114  0003                     	;# 
   115  0004                     	;# 
   116  0005                     	;# 
   117  0006                     	;# 
   118  0007                     	;# 
   119  0008                     	;# 
   120  0009                     	;# 
   121  000A                     	;# 
   122  000B                     	;# 
   123  000C                     	;# 
   124  000D                     	;# 
   125  000E                     	;# 
   126  0010                     	;# 
   127  0011                     	;# 
   128  0012                     	;# 
   129  0013                     	;# 
   130  0016                     	;# 
   131  0017                     	;# 
   132  0018                     	;# 
   133  001C                     	;# 
   134  001C                     	;# 
   135  001D                     	;# 
   136  001D                     	;# 
   137  001E                     	;# 
   138  001F                     	;# 
   139  008C                     	;# 
   140  008C                     	;# 
   141  008D                     	;# 
   142  008E                     	;# 
   143  008E                     	;# 
   144  008F                     	;# 
   145  0090                     	;# 
   146  0090                     	;# 
   147  0091                     	;# 
   148  0093                     	;# 
   149  0094                     	;# 
   150  0095                     	;# 
   151  0096                     	;# 
   152  0097                     	;# 
   153  0098                     	;# 
   154  0099                     	;# 
   155  009A                     	;# 
   156  009B                     	;# 
   157  009C                     	;# 
   158  009D                     	;# 
   159  009E                     	;# 
   160  010C                     	;# 
   161  010D                     	;# 
   162  010E                     	;# 
   163  010E                     	;# 
   164  010F                     	;# 
   165  0110                     	;# 
   166  0110                     	;# 
   167  0111                     	;# 
   168  0112                     	;# 
   169  0112                     	;# 
   170  0113                     	;# 
   171  0114                     	;# 
   172  0114                     	;# 
   173  0115                     	;# 
   174  0116                     	;# 
   175  0116                     	;# 
   176  0117                     	;# 
   177  0119                     	;# 
   178  0119                     	;# 
   179  0119                     	;# 
   180  011A                     	;# 
   181  011A                     	;# 
   182  011A                     	;# 
   183  011B                     	;# 
   184  011B                     	;# 
   185  011B                     	;# 
   186  011B                     	;# 
   187  011B                     	;# 
   188  011C                     	;# 
   189  011C                     	;# 
   190  011C                     	;# 
   191  011D                     	;# 
   192  011D                     	;# 
   193  011D                     	;# 
   194  011E                     	;# 
   195  011E                     	;# 
   196  011E                     	;# 
   197  011F                     	;# 
   198  011F                     	;# 
   199  011F                     	;# 
   200  011F                     	;# 
   201  011F                     	;# 
   202  018C                     	;# 
   203  018D                     	;# 
   204  018E                     	;# 
   205  018F                     	;# 
   206  0190                     	;# 
   207  0191                     	;# 
   208  0192                     	;# 
   209  0196                     	;# 
   210  0197                     	;# 
   211  0198                     	;# 
   212  0199                     	;# 
   213  019A                     	;# 
   214  019B                     	;# 
   215  019C                     	;# 
   216  020C                     	;# 
   217  020C                     	;# 
   218  020D                     	;# 
   219  020E                     	;# 
   220  020F                     	;# 
   221  020F                     	;# 
   222  0210                     	;# 
   223  0210                     	;# 
   224  0211                     	;# 
   225  0211                     	;# 
   226  0212                     	;# 
   227  0212                     	;# 
   228  0213                     	;# 
   229  0214                     	;# 
   230  0215                     	;# 
   231  0215                     	;# 
   232  0216                     	;# 
   233  0216                     	;# 
   234  0217                     	;# 
   235  0217                     	;# 
   236  0218                     	;# 
   237  0218                     	;# 
   238  0219                     	;# 
   239  021A                     	;# 
   240  021B                     	;# 
   241  021B                     	;# 
   242  021C                     	;# 
   243  021C                     	;# 
   244  021D                     	;# 
   245  021D                     	;# 
   246  021E                     	;# 
   247  021F                     	;# 
   248  028C                     	;# 
   249  028C                     	;# 
   250  028D                     	;# 
   251  028D                     	;# 
   252  028E                     	;# 
   253  028F                     	;# 
   254  0290                     	;# 
   255  0290                     	;# 
   256  0291                     	;# 
   257  0292                     	;# 
   258  0292                     	;# 
   259  0293                     	;# 
   260  0293                     	;# 
   261  0294                     	;# 
   262  0295                     	;# 
   263  0296                     	;# 
   264  0296                     	;# 
   265  0297                     	;# 
   266  0298                     	;# 
   267  0298                     	;# 
   268  0299                     	;# 
   269  0299                     	;# 
   270  029A                     	;# 
   271  029B                     	;# 
   272  029C                     	;# 
   273  029C                     	;# 
   274  029D                     	;# 
   275  030C                     	;# 
   276  030C                     	;# 
   277  030D                     	;# 
   278  030E                     	;# 
   279  030F                     	;# 
   280  0310                     	;# 
   281  0310                     	;# 
   282  0311                     	;# 
   283  0312                     	;# 
   284  0313                     	;# 
   285  0314                     	;# 
   286  0314                     	;# 
   287  0315                     	;# 
   288  0316                     	;# 
   289  0317                     	;# 
   290  0318                     	;# 
   291  0318                     	;# 
   292  0319                     	;# 
   293  031A                     	;# 
   294  031B                     	;# 
   295  031C                     	;# 
   296  031C                     	;# 
   297  031D                     	;# 
   298  031E                     	;# 
   299  031F                     	;# 
   300  038C                     	;# 
   301  038D                     	;# 
   302  038E                     	;# 
   303  0390                     	;# 
   304  0391                     	;# 
   305  0392                     	;# 
   306  040C                     	;# 
   307  040D                     	;# 
   308  040E                     	;# 
   309  040F                     	;# 
   310  0410                     	;# 
   311  0411                     	;# 
   312  0416                     	;# 
   313  0416                     	;# 
   314  0417                     	;# 
   315  0418                     	;# 
   316  0418                     	;# 
   317  0419                     	;# 
   318  041A                     	;# 
   319  041A                     	;# 
   320  041B                     	;# 
   321  041C                     	;# 
   322  041C                     	;# 
   323  041D                     	;# 
   324  041E                     	;# 
   325  041F                     	;# 
   326  048C                     	;# 
   327  048C                     	;# 
   328  048D                     	;# 
   329  048E                     	;# 
   330  048F                     	;# 
   331  048F                     	;# 
   332  0490                     	;# 
   333  0491                     	;# 
   334  0492                     	;# 
   335  0492                     	;# 
   336  0493                     	;# 
   337  0494                     	;# 
   338  0495                     	;# 
   339  0495                     	;# 
   340  0496                     	;# 
   341  0497                     	;# 
   342  0498                     	;# 
   343  0499                     	;# 
   344  049A                     	;# 
   345  049B                     	;# 
   346  049C                     	;# 
   347  049D                     	;# 
   348  050C                     	;# 
   349  050C                     	;# 
   350  050D                     	;# 
   351  050E                     	;# 
   352  050F                     	;# 
   353  050F                     	;# 
   354  0510                     	;# 
   355  0511                     	;# 
   356  0512                     	;# 
   357  0512                     	;# 
   358  0513                     	;# 
   359  0514                     	;# 
   360  0515                     	;# 
   361  0515                     	;# 
   362  0516                     	;# 
   363  0517                     	;# 
   364  0518                     	;# 
   365  0519                     	;# 
   366  051A                     	;# 
   367  051B                     	;# 
   368  051C                     	;# 
   369  051D                     	;# 
   370  058C                     	;# 
   371  058C                     	;# 
   372  058D                     	;# 
   373  058E                     	;# 
   374  058F                     	;# 
   375  058F                     	;# 
   376  0590                     	;# 
   377  0591                     	;# 
   378  0592                     	;# 
   379  0593                     	;# 
   380  060C                     	;# 
   381  060D                     	;# 
   382  060E                     	;# 
   383  060F                     	;# 
   384  0610                     	;# 
   385  0611                     	;# 
   386  0612                     	;# 
   387  0613                     	;# 
   388  0614                     	;# 
   389  0616                     	;# 
   390  0617                     	;# 
   391  0618                     	;# 
   392  0619                     	;# 
   393  061A                     	;# 
   394  061B                     	;# 
   395  061C                     	;# 
   396  061D                     	;# 
   397  061E                     	;# 
   398  068C                     	;# 
   399  068D                     	;# 
   400  068E                     	;# 
   401  068F                     	;# 
   402  0690                     	;# 
   403  0691                     	;# 
   404  0692                     	;# 
   405  0693                     	;# 
   406  0694                     	;# 
   407  070C                     	;# 
   408  070D                     	;# 
   409  070E                     	;# 
   410  070F                     	;# 
   411  0710                     	;# 
   412  0711                     	;# 
   413  0712                     	;# 
   414  0713                     	;# 
   415  0714                     	;# 
   416  0716                     	;# 
   417  0717                     	;# 
   418  0718                     	;# 
   419  0719                     	;# 
   420  071A                     	;# 
   421  071B                     	;# 
   422  071C                     	;# 
   423  071D                     	;# 
   424  071E                     	;# 
   425  0796                     	;# 
   426  0797                     	;# 
   427  0798                     	;# 
   428  0799                     	;# 
   429  079A                     	;# 
   430  079B                     	;# 
   431  080C                     	;# 
   432  080D                     	;# 
   433  080E                     	;# 
   434  080F                     	;# 
   435  0810                     	;# 
   436  0811                     	;# 
   437  0812                     	;# 
   438  0813                     	;# 
   439  0814                     	;# 
   440  081A                     	;# 
   441  081B                     	;# 
   442  081C                     	;# 
   443  081D                     	;# 
   444  081E                     	;# 
   445  081F                     	;# 
   446  088C                     	;# 
   447  088D                     	;# 
   448  088E                     	;# 
   449  088F                     	;# 
   450  0890                     	;# 
   451  0891                     	;# 
   452  0892                     	;# 
   453  0893                     	;# 
   454  0895                     	;# 
   455  0896                     	;# 
   456  0897                     	;# 
   457  0898                     	;# 
   458  0899                     	;# 
   459  089A                     	;# 
   460  089B                     	;# 
   461  090C                     	;# 
   462  090E                     	;# 
   463  090F                     	;# 
   464  091F                     	;# 
   465  091F                     	;# 
   466  098F                     	;# 
   467  098F                     	;# 
   468  0990                     	;# 
   469  0991                     	;# 
   470  0992                     	;# 
   471  0993                     	;# 
   472  0994                     	;# 
   473  0995                     	;# 
   474  0996                     	;# 
   475  0997                     	;# 
   476  0E0F                     	;# 
   477  0E10                     	;# 
   478  0E11                     	;# 
   479  0E12                     	;# 
   480  0E13                     	;# 
   481  0E14                     	;# 
   482  0E15                     	;# 
   483  0E16                     	;# 
   484  0E17                     	;# 
   485  0E18                     	;# 
   486  0E19                     	;# 
   487  0E1A                     	;# 
   488  0E1B                     	;# 
   489  0E1C                     	;# 
   490  0E1D                     	;# 
   491  0E1E                     	;# 
   492  0E1F                     	;# 
   493  0E20                     	;# 
   494  0E21                     	;# 
   495  0E22                     	;# 
   496  0E23                     	;# 
   497  0E24                     	;# 
   498  0E25                     	;# 
   499  0E26                     	;# 
   500  0E27                     	;# 
   501  0E28                     	;# 
   502  0E29                     	;# 
   503  0E2A                     	;# 
   504  0E2B                     	;# 
   505  0E2C                     	;# 
   506  0E2D                     	;# 
   507  0E2E                     	;# 
   508  0E2F                     	;# 
   509  0E30                     	;# 
   510  0E31                     	;# 
   511  0E32                     	;# 
   512  0E33                     	;# 
   513  0E34                     	;# 
   514  0E35                     	;# 
   515  0E36                     	;# 
   516  0E37                     	;# 
   517  0E8F                     	;# 
   518  0E90                     	;# 
   519  0E91                     	;# 
   520  0E92                     	;# 
   521  0E93                     	;# 
   522  0E94                     	;# 
   523  0E95                     	;# 
   524  0E96                     	;# 
   525  0E97                     	;# 
   526  0E9C                     	;# 
   527  0E9D                     	;# 
   528  0E9E                     	;# 
   529  0EA1                     	;# 
   530  0EA2                     	;# 
   531  0EA3                     	;# 
   532  0EA4                     	;# 
   533  0EA5                     	;# 
   534  0EA9                     	;# 
   535  0EAA                     	;# 
   536  0EAB                     	;# 
   537  0EAC                     	;# 
   538  0EB1                     	;# 
   539  0EB2                     	;# 
   540  0EB3                     	;# 
   541  0EB8                     	;# 
   542  0EB9                     	;# 
   543  0EBA                     	;# 
   544  0EBB                     	;# 
   545  0EBC                     	;# 
   546  0EBD                     	;# 
   547  0EBE                     	;# 
   548  0EC3                     	;# 
   549  0EC5                     	;# 
   550  0EC6                     	;# 
   551  0EC7                     	;# 
   552  0EC8                     	;# 
   553  0EC9                     	;# 
   554  0ECA                     	;# 
   555  0ECB                     	;# 
   556  0ECC                     	;# 
   557  0F10                     	;# 
   558  0F11                     	;# 
   559  0F12                     	;# 
   560  0F13                     	;# 
   561  0F14                     	;# 
   562  0F15                     	;# 
   563  0F16                     	;# 
   564  0F17                     	;# 
   565  0F18                     	;# 
   566  0F19                     	;# 
   567  0F1A                     	;# 
   568  0F1B                     	;# 
   569  0F1C                     	;# 
   570  0F1D                     	;# 
   571  0F1E                     	;# 
   572  0F1F                     	;# 
   573  0F20                     	;# 
   574  0F21                     	;# 
   575  0F22                     	;# 
   576  0F23                     	;# 
   577  0F24                     	;# 
   578  0F25                     	;# 
   579  0F26                     	;# 
   580  0F27                     	;# 
   581  0F38                     	;# 
   582  0F39                     	;# 
   583  0F3A                     	;# 
   584  0F3B                     	;# 
   585  0F3C                     	;# 
   586  0F3D                     	;# 
   587  0F3E                     	;# 
   588  0F3F                     	;# 
   589  0F40                     	;# 
   590  0F41                     	;# 
   591  0F43                     	;# 
   592  0F44                     	;# 
   593  0F45                     	;# 
   594  0F46                     	;# 
   595  0F47                     	;# 
   596  0F48                     	;# 
   597  0F49                     	;# 
   598  0F4A                     	;# 
   599  0F4B                     	;# 
   600  0F4C                     	;# 
   601  0F4E                     	;# 
   602  0F4F                     	;# 
   603  0F50                     	;# 
   604  0F51                     	;# 
   605  0F52                     	;# 
   606  0F53                     	;# 
   607  0F54                     	;# 
   608  0F55                     	;# 
   609  0F56                     	;# 
   610  0F57                     	;# 
   611  0F65                     	;# 
   612  0F68                     	;# 
   613  0F69                     	;# 
   614  0F6A                     	;# 
   615  0F6B                     	;# 
   616  0FE4                     	;# 
   617  0FE5                     	;# 
   618  0FE6                     	;# 
   619  0FE7                     	;# 
   620  0FE8                     	;# 
   621  0FE9                     	;# 
   622  0FEA                     	;# 
   623  0FEB                     	;# 
   624  0FED                     	;# 
   625  0FEE                     	;# 
   626  0FEF                     	;# 
   627  0000                     	;# 
   628  0001                     	;# 
   629  0002                     	;# 
   630  0003                     	;# 
   631  0004                     	;# 
   632  0005                     	;# 
   633  0006                     	;# 
   634  0007                     	;# 
   635  0008                     	;# 
   636  0009                     	;# 
   637  000A                     	;# 
   638  000B                     	;# 
   639  000C                     	;# 
   640  000D                     	;# 
   641  000E                     	;# 
   642  0010                     	;# 
   643  0011                     	;# 
   644  0012                     	;# 
   645  0013                     	;# 
   646  0016                     	;# 
   647  0017                     	;# 
   648  0018                     	;# 
   649  001C                     	;# 
   650  001C                     	;# 
   651  001D                     	;# 
   652  001D                     	;# 
   653  001E                     	;# 
   654  001F                     	;# 
   655  008C                     	;# 
   656  008C                     	;# 
   657  008D                     	;# 
   658  008E                     	;# 
   659  008E                     	;# 
   660  008F                     	;# 
   661  0090                     	;# 
   662  0090                     	;# 
   663  0091                     	;# 
   664  0093                     	;# 
   665  0094                     	;# 
   666  0095                     	;# 
   667  0096                     	;# 
   668  0097                     	;# 
   669  0098                     	;# 
   670  0099                     	;# 
   671  009A                     	;# 
   672  009B                     	;# 
   673  009C                     	;# 
   674  009D                     	;# 
   675  009E                     	;# 
   676  010C                     	;# 
   677  010D                     	;# 
   678  010E                     	;# 
   679  010E                     	;# 
   680  010F                     	;# 
   681  0110                     	;# 
   682  0110                     	;# 
   683  0111                     	;# 
   684  0112                     	;# 
   685  0112                     	;# 
   686  0113                     	;# 
   687  0114                     	;# 
   688  0114                     	;# 
   689  0115                     	;# 
   690  0116                     	;# 
   691  0116                     	;# 
   692  0117                     	;# 
   693  0119                     	;# 
   694  0119                     	;# 
   695  0119                     	;# 
   696  011A                     	;# 
   697  011A                     	;# 
   698  011A                     	;# 
   699  011B                     	;# 
   700  011B                     	;# 
   701  011B                     	;# 
   702  011B                     	;# 
   703  011B                     	;# 
   704  011C                     	;# 
   705  011C                     	;# 
   706  011C                     	;# 
   707  011D                     	;# 
   708  011D                     	;# 
   709  011D                     	;# 
   710  011E                     	;# 
   711  011E                     	;# 
   712  011E                     	;# 
   713  011F                     	;# 
   714  011F                     	;# 
   715  011F                     	;# 
   716  011F                     	;# 
   717  011F                     	;# 
   718  018C                     	;# 
   719  018D                     	;# 
   720  018E                     	;# 
   721  018F                     	;# 
   722  0190                     	;# 
   723  0191                     	;# 
   724  0192                     	;# 
   725  0196                     	;# 
   726  0197                     	;# 
   727  0198                     	;# 
   728  0199                     	;# 
   729  019A                     	;# 
   730  019B                     	;# 
   731  019C                     	;# 
   732  020C                     	;# 
   733  020C                     	;# 
   734  020D                     	;# 
   735  020E                     	;# 
   736  020F                     	;# 
   737  020F                     	;# 
   738  0210                     	;# 
   739  0210                     	;# 
   740  0211                     	;# 
   741  0211                     	;# 
   742  0212                     	;# 
   743  0212                     	;# 
   744  0213                     	;# 
   745  0214                     	;# 
   746  0215                     	;# 
   747  0215                     	;# 
   748  0216                     	;# 
   749  0216                     	;# 
   750  0217                     	;# 
   751  0217                     	;# 
   752  0218                     	;# 
   753  0218                     	;# 
   754  0219                     	;# 
   755  021A                     	;# 
   756  021B                     	;# 
   757  021B                     	;# 
   758  021C                     	;# 
   759  021C                     	;# 
   760  021D                     	;# 
   761  021D                     	;# 
   762  021E                     	;# 
   763  021F                     	;# 
   764  028C                     	;# 
   765  028C                     	;# 
   766  028D                     	;# 
   767  028D                     	;# 
   768  028E                     	;# 
   769  028F                     	;# 
   770  0290                     	;# 
   771  0290                     	;# 
   772  0291                     	;# 
   773  0292                     	;# 
   774  0292                     	;# 
   775  0293                     	;# 
   776  0293                     	;# 
   777  0294                     	;# 
   778  0295                     	;# 
   779  0296                     	;# 
   780  0296                     	;# 
   781  0297                     	;# 
   782  0298                     	;# 
   783  0298                     	;# 
   784  0299                     	;# 
   785  0299                     	;# 
   786  029A                     	;# 
   787  029B                     	;# 
   788  029C                     	;# 
   789  029C                     	;# 
   790  029D                     	;# 
   791  030C                     	;# 
   792  030C                     	;# 
   793  030D                     	;# 
   794  030E                     	;# 
   795  030F                     	;# 
   796  0310                     	;# 
   797  0310                     	;# 
   798  0311                     	;# 
   799  0312                     	;# 
   800  0313                     	;# 
   801  0314                     	;# 
   802  0314                     	;# 
   803  0315                     	;# 
   804  0316                     	;# 
   805  0317                     	;# 
   806  0318                     	;# 
   807  0318                     	;# 
   808  0319                     	;# 
   809  031A                     	;# 
   810  031B                     	;# 
   811  031C                     	;# 
   812  031C                     	;# 
   813  031D                     	;# 
   814  031E                     	;# 
   815  031F                     	;# 
   816  038C                     	;# 
   817  038D                     	;# 
   818  038E                     	;# 
   819  0390                     	;# 
   820  0391                     	;# 
   821  0392                     	;# 
   822  040C                     	;# 
   823  040D                     	;# 
   824  040E                     	;# 
   825  040F                     	;# 
   826  0410                     	;# 
   827  0411                     	;# 
   828  0416                     	;# 
   829  0416                     	;# 
   830  0417                     	;# 
   831  0418                     	;# 
   832  0418                     	;# 
   833  0419                     	;# 
   834  041A                     	;# 
   835  041A                     	;# 
   836  041B                     	;# 
   837  041C                     	;# 
   838  041C                     	;# 
   839  041D                     	;# 
   840  041E                     	;# 
   841  041F                     	;# 
   842  048C                     	;# 
   843  048C                     	;# 
   844  048D                     	;# 
   845  048E                     	;# 
   846  048F                     	;# 
   847  048F                     	;# 
   848  0490                     	;# 
   849  0491                     	;# 
   850  0492                     	;# 
   851  0492                     	;# 
   852  0493                     	;# 
   853  0494                     	;# 
   854  0495                     	;# 
   855  0495                     	;# 
   856  0496                     	;# 
   857  0497                     	;# 
   858  0498                     	;# 
   859  0499                     	;# 
   860  049A                     	;# 
   861  049B                     	;# 
   862  049C                     	;# 
   863  049D                     	;# 
   864  050C                     	;# 
   865  050C                     	;# 
   866  050D                     	;# 
   867  050E                     	;# 
   868  050F                     	;# 
   869  050F                     	;# 
   870  0510                     	;# 
   871  0511                     	;# 
   872  0512                     	;# 
   873  0512                     	;# 
   874  0513                     	;# 
   875  0514                     	;# 
   876  0515                     	;# 
   877  0515                     	;# 
   878  0516                     	;# 
   879  0517                     	;# 
   880  0518                     	;# 
   881  0519                     	;# 
   882  051A                     	;# 
   883  051B                     	;# 
   884  051C                     	;# 
   885  051D                     	;# 
   886  058C                     	;# 
   887  058C                     	;# 
   888  058D                     	;# 
   889  058E                     	;# 
   890  058F                     	;# 
   891  058F                     	;# 
   892  0590                     	;# 
   893  0591                     	;# 
   894  0592                     	;# 
   895  0593                     	;# 
   896  060C                     	;# 
   897  060D                     	;# 
   898  060E                     	;# 
   899  060F                     	;# 
   900  0610                     	;# 
   901  0611                     	;# 
   902  0612                     	;# 
   903  0613                     	;# 
   904  0614                     	;# 
   905  0616                     	;# 
   906  0617                     	;# 
   907  0618                     	;# 
   908  0619                     	;# 
   909  061A                     	;# 
   910  061B                     	;# 
   911  061C                     	;# 
   912  061D                     	;# 
   913  061E                     	;# 
   914  068C                     	;# 
   915  068D                     	;# 
   916  068E                     	;# 
   917  068F                     	;# 
   918  0690                     	;# 
   919  0691                     	;# 
   920  0692                     	;# 
   921  0693                     	;# 
   922  0694                     	;# 
   923  070C                     	;# 
   924  070D                     	;# 
   925  070E                     	;# 
   926  070F                     	;# 
   927  0710                     	;# 
   928  0711                     	;# 
   929  0712                     	;# 
   930  0713                     	;# 
   931  0714                     	;# 
   932  0716                     	;# 
   933  0717                     	;# 
   934  0718                     	;# 
   935  0719                     	;# 
   936  071A                     	;# 
   937  071B                     	;# 
   938  071C                     	;# 
   939  071D                     	;# 
   940  071E                     	;# 
   941  0796                     	;# 
   942  0797                     	;# 
   943  0798                     	;# 
   944  0799                     	;# 
   945  079A                     	;# 
   946  079B                     	;# 
   947  080C                     	;# 
   948  080D                     	;# 
   949  080E                     	;# 
   950  080F                     	;# 
   951  0810                     	;# 
   952  0811                     	;# 
   953  0812                     	;# 
   954  0813                     	;# 
   955  0814                     	;# 
   956  081A                     	;# 
   957  081B                     	;# 
   958  081C                     	;# 
   959  081D                     	;# 
   960  081E                     	;# 
   961  081F                     	;# 
   962  088C                     	;# 
   963  088D                     	;# 
   964  088E                     	;# 
   965  088F                     	;# 
   966  0890                     	;# 
   967  0891                     	;# 
   968  0892                     	;# 
   969  0893                     	;# 
   970  0895                     	;# 
   971  0896                     	;# 
   972  0897                     	;# 
   973  0898                     	;# 
   974  0899                     	;# 
   975  089A                     	;# 
   976  089B                     	;# 
   977  090C                     	;# 
   978  090E                     	;# 
   979  090F                     	;# 
   980  091F                     	;# 
   981  091F                     	;# 
   982  098F                     	;# 
   983  098F                     	;# 
   984  0990                     	;# 
   985  0991                     	;# 
   986  0992                     	;# 
   987  0993                     	;# 
   988  0994                     	;# 
   989  0995                     	;# 
   990  0996                     	;# 
   991  0997                     	;# 
   992  0E0F                     	;# 
   993  0E10                     	;# 
   994  0E11                     	;# 
   995  0E12                     	;# 
   996  0E13                     	;# 
   997  0E14                     	;# 
   998  0E15                     	;# 
   999  0E16                     	;# 
  1000  0E17                     	;# 
  1001  0E18                     	;# 
  1002  0E19                     	;# 
  1003  0E1A                     	;# 
  1004  0E1B                     	;# 
  1005  0E1C                     	;# 
  1006  0E1D                     	;# 
  1007  0E1E                     	;# 
  1008  0E1F                     	;# 
  1009  0E20                     	;# 
  1010  0E21                     	;# 
  1011  0E22                     	;# 
  1012  0E23                     	;# 
  1013  0E24                     	;# 
  1014  0E25                     	;# 
  1015  0E26                     	;# 
  1016  0E27                     	;# 
  1017  0E28                     	;# 
  1018  0E29                     	;# 
  1019  0E2A                     	;# 
  1020  0E2B                     	;# 
  1021  0E2C                     	;# 
  1022  0E2D                     	;# 
  1023  0E2E                     	;# 
  1024  0E2F                     	;# 
  1025  0E30                     	;# 
  1026  0E31                     	;# 
  1027  0E32                     	;# 
  1028  0E33                     	;# 
  1029  0E34                     	;# 
  1030  0E35                     	;# 
  1031  0E36                     	;# 
  1032  0E37                     	;# 
  1033  0E8F                     	;# 
  1034  0E90                     	;# 
  1035  0E91                     	;# 
  1036  0E92                     	;# 
  1037  0E93                     	;# 
  1038  0E94                     	;# 
  1039  0E95                     	;# 
  1040  0E96                     	;# 
  1041  0E97                     	;# 
  1042  0E9C                     	;# 
  1043  0E9D                     	;# 
  1044  0E9E                     	;# 
  1045  0EA1                     	;# 
  1046  0EA2                     	;# 
  1047  0EA3                     	;# 
  1048  0EA4                     	;# 
  1049  0EA5                     	;# 
  1050  0EA9                     	;# 
  1051  0EAA                     	;# 
  1052  0EAB                     	;# 
  1053  0EAC                     	;# 
  1054  0EB1                     	;# 
  1055  0EB2                     	;# 
  1056  0EB3                     	;# 
  1057  0EB8                     	;# 
  1058  0EB9                     	;# 
  1059  0EBA                     	;# 
  1060  0EBB                     	;# 
  1061  0EBC                     	;# 
  1062  0EBD                     	;# 
  1063  0EBE                     	;# 
  1064  0EC3                     	;# 
  1065  0EC5                     	;# 
  1066  0EC6                     	;# 
  1067  0EC7                     	;# 
  1068  0EC8                     	;# 
  1069  0EC9                     	;# 
  1070  0ECA                     	;# 
  1071  0ECB                     	;# 
  1072  0ECC                     	;# 
  1073  0F10                     	;# 
  1074  0F11                     	;# 
  1075  0F12                     	;# 
  1076  0F13                     	;# 
  1077  0F14                     	;# 
  1078  0F15                     	;# 
  1079  0F16                     	;# 
  1080  0F17                     	;# 
  1081  0F18                     	;# 
  1082  0F19                     	;# 
  1083  0F1A                     	;# 
  1084  0F1B                     	;# 
  1085  0F1C                     	;# 
  1086  0F1D                     	;# 
  1087  0F1E                     	;# 
  1088  0F1F                     	;# 
  1089  0F20                     	;# 
  1090  0F21                     	;# 
  1091  0F22                     	;# 
  1092  0F23                     	;# 
  1093  0F24                     	;# 
  1094  0F25                     	;# 
  1095  0F26                     	;# 
  1096  0F27                     	;# 
  1097  0F38                     	;# 
  1098  0F39                     	;# 
  1099  0F3A                     	;# 
  1100  0F3B                     	;# 
  1101  0F3C                     	;# 
  1102  0F3D                     	;# 
  1103  0F3E                     	;# 
  1104  0F3F                     	;# 
  1105  0F40                     	;# 
  1106  0F41                     	;# 
  1107  0F43                     	;# 
  1108  0F44                     	;# 
  1109  0F45                     	;# 
  1110  0F46                     	;# 
  1111  0F47                     	;# 
  1112  0F48                     	;# 
  1113  0F49                     	;# 
  1114  0F4A                     	;# 
  1115  0F4B                     	;# 
  1116  0F4C                     	;# 
  1117  0F4E                     	;# 
  1118  0F4F                     	;# 
  1119  0F50                     	;# 
  1120  0F51                     	;# 
  1121  0F52                     	;# 
  1122  0F53                     	;# 
  1123  0F54                     	;# 
  1124  0F55                     	;# 
  1125  0F56                     	;# 
  1126  0F57                     	;# 
  1127  0F65                     	;# 
  1128  0F68                     	;# 
  1129  0F69                     	;# 
  1130  0F6A                     	;# 
  1131  0F6B                     	;# 
  1132  0FE4                     	;# 
  1133  0FE5                     	;# 
  1134  0FE6                     	;# 
  1135  0FE7                     	;# 
  1136  0FE8                     	;# 
  1137  0FE9                     	;# 
  1138  0FEA                     	;# 
  1139  0FEB                     	;# 
  1140  0FED                     	;# 
  1141  0FEE                     	;# 
  1142  0FEF                     	;# 
  1143  0000                     	;# 
  1144  0001                     	;# 
  1145  0002                     	;# 
  1146  0003                     	;# 
  1147  0004                     	;# 
  1148  0005                     	;# 
  1149  0006                     	;# 
  1150  0007                     	;# 
  1151  0008                     	;# 
  1152  0009                     	;# 
  1153  000A                     	;# 
  1154  000B                     	;# 
  1155  000C                     	;# 
  1156  000D                     	;# 
  1157  000E                     	;# 
  1158  0010                     	;# 
  1159  0011                     	;# 
  1160  0012                     	;# 
  1161  0013                     	;# 
  1162  0016                     	;# 
  1163  0017                     	;# 
  1164  0018                     	;# 
  1165  001C                     	;# 
  1166  001C                     	;# 
  1167  001D                     	;# 
  1168  001D                     	;# 
  1169  001E                     	;# 
  1170  001F                     	;# 
  1171  008C                     	;# 
  1172  008C                     	;# 
  1173  008D                     	;# 
  1174  008E                     	;# 
  1175  008E                     	;# 
  1176  008F                     	;# 
  1177  0090                     	;# 
  1178  0090                     	;# 
  1179  0091                     	;# 
  1180  0093                     	;# 
  1181  0094                     	;# 
  1182  0095                     	;# 
  1183  0096                     	;# 
  1184  0097                     	;# 
  1185  0098                     	;# 
  1186  0099                     	;# 
  1187  009A                     	;# 
  1188  009B                     	;# 
  1189  009C                     	;# 
  1190  009D                     	;# 
  1191  009E                     	;# 
  1192  010C                     	;# 
  1193  010D                     	;# 
  1194  010E                     	;# 
  1195  010E                     	;# 
  1196  010F                     	;# 
  1197  0110                     	;# 
  1198  0110                     	;# 
  1199  0111                     	;# 
  1200  0112                     	;# 
  1201  0112                     	;# 
  1202  0113                     	;# 
  1203  0114                     	;# 
  1204  0114                     	;# 
  1205  0115                     	;# 
  1206  0116                     	;# 
  1207  0116                     	;# 
  1208  0117                     	;# 
  1209  0119                     	;# 
  1210  0119                     	;# 
  1211  0119                     	;# 
  1212  011A                     	;# 
  1213  011A                     	;# 
  1214  011A                     	;# 
  1215  011B                     	;# 
  1216  011B                     	;# 
  1217  011B                     	;# 
  1218  011B                     	;# 
  1219  011B                     	;# 
  1220  011C                     	;# 
  1221  011C                     	;# 
  1222  011C                     	;# 
  1223  011D                     	;# 
  1224  011D                     	;# 
  1225  011D                     	;# 
  1226  011E                     	;# 
  1227  011E                     	;# 
  1228  011E                     	;# 
  1229  011F                     	;# 
  1230  011F                     	;# 
  1231  011F                     	;# 
  1232  011F                     	;# 
  1233  011F                     	;# 
  1234  018C                     	;# 
  1235  018D                     	;# 
  1236  018E                     	;# 
  1237  018F                     	;# 
  1238  0190                     	;# 
  1239  0191                     	;# 
  1240  0192                     	;# 
  1241  0196                     	;# 
  1242  0197                     	;# 
  1243  0198                     	;# 
  1244  0199                     	;# 
  1245  019A                     	;# 
  1246  019B                     	;# 
  1247  019C                     	;# 
  1248  020C                     	;# 
  1249  020C                     	;# 
  1250  020D                     	;# 
  1251  020E                     	;# 
  1252  020F                     	;# 
  1253  020F                     	;# 
  1254  0210                     	;# 
  1255  0210                     	;# 
  1256  0211                     	;# 
  1257  0211                     	;# 
  1258  0212                     	;# 
  1259  0212                     	;# 
  1260  0213                     	;# 
  1261  0214                     	;# 
  1262  0215                     	;# 
  1263  0215                     	;# 
  1264  0216                     	;# 
  1265  0216                     	;# 
  1266  0217                     	;# 
  1267  0217                     	;# 
  1268  0218                     	;# 
  1269  0218                     	;# 
  1270  0219                     	;# 
  1271  021A                     	;# 
  1272  021B                     	;# 
  1273  021B                     	;# 
  1274  021C                     	;# 
  1275  021C                     	;# 
  1276  021D                     	;# 
  1277  021D                     	;# 
  1278  021E                     	;# 
  1279  021F                     	;# 
  1280  028C                     	;# 
  1281  028C                     	;# 
  1282  028D                     	;# 
  1283  028D                     	;# 
  1284  028E                     	;# 
  1285  028F                     	;# 
  1286  0290                     	;# 
  1287  0290                     	;# 
  1288  0291                     	;# 
  1289  0292                     	;# 
  1290  0292                     	;# 
  1291  0293                     	;# 
  1292  0293                     	;# 
  1293  0294                     	;# 
  1294  0295                     	;# 
  1295  0296                     	;# 
  1296  0296                     	;# 
  1297  0297                     	;# 
  1298  0298                     	;# 
  1299  0298                     	;# 
  1300  0299                     	;# 
  1301  0299                     	;# 
  1302  029A                     	;# 
  1303  029B                     	;# 
  1304  029C                     	;# 
  1305  029C                     	;# 
  1306  029D                     	;# 
  1307  030C                     	;# 
  1308  030C                     	;# 
  1309  030D                     	;# 
  1310  030E                     	;# 
  1311  030F                     	;# 
  1312  0310                     	;# 
  1313  0310                     	;# 
  1314  0311                     	;# 
  1315  0312                     	;# 
  1316  0313                     	;# 
  1317  0314                     	;# 
  1318  0314                     	;# 
  1319  0315                     	;# 
  1320  0316                     	;# 
  1321  0317                     	;# 
  1322  0318                     	;# 
  1323  0318                     	;# 
  1324  0319                     	;# 
  1325  031A                     	;# 
  1326  031B                     	;# 
  1327  031C                     	;# 
  1328  031C                     	;# 
  1329  031D                     	;# 
  1330  031E                     	;# 
  1331  031F                     	;# 
  1332  038C                     	;# 
  1333  038D                     	;# 
  1334  038E                     	;# 
  1335  0390                     	;# 
  1336  0391                     	;# 
  1337  0392                     	;# 
  1338  040C                     	;# 
  1339  040D                     	;# 
  1340  040E                     	;# 
  1341  040F                     	;# 
  1342  0410                     	;# 
  1343  0411                     	;# 
  1344  0416                     	;# 
  1345  0416                     	;# 
  1346  0417                     	;# 
  1347  0418                     	;# 
  1348  0418                     	;# 
  1349  0419                     	;# 
  1350  041A                     	;# 
  1351  041A                     	;# 
  1352  041B                     	;# 
  1353  041C                     	;# 
  1354  041C                     	;# 
  1355  041D                     	;# 
  1356  041E                     	;# 
  1357  041F                     	;# 
  1358  048C                     	;# 
  1359  048C                     	;# 
  1360  048D                     	;# 
  1361  048E                     	;# 
  1362  048F                     	;# 
  1363  048F                     	;# 
  1364  0490                     	;# 
  1365  0491                     	;# 
  1366  0492                     	;# 
  1367  0492                     	;# 
  1368  0493                     	;# 
  1369  0494                     	;# 
  1370  0495                     	;# 
  1371  0495                     	;# 
  1372  0496                     	;# 
  1373  0497                     	;# 
  1374  0498                     	;# 
  1375  0499                     	;# 
  1376  049A                     	;# 
  1377  049B                     	;# 
  1378  049C                     	;# 
  1379  049D                     	;# 
  1380  050C                     	;# 
  1381  050C                     	;# 
  1382  050D                     	;# 
  1383  050E                     	;# 
  1384  050F                     	;# 
  1385  050F                     	;# 
  1386  0510                     	;# 
  1387  0511                     	;# 
  1388  0512                     	;# 
  1389  0512                     	;# 
  1390  0513                     	;# 
  1391  0514                     	;# 
  1392  0515                     	;# 
  1393  0515                     	;# 
  1394  0516                     	;# 
  1395  0517                     	;# 
  1396  0518                     	;# 
  1397  0519                     	;# 
  1398  051A                     	;# 
  1399  051B                     	;# 
  1400  051C                     	;# 
  1401  051D                     	;# 
  1402  058C                     	;# 
  1403  058C                     	;# 
  1404  058D                     	;# 
  1405  058E                     	;# 
  1406  058F                     	;# 
  1407  058F                     	;# 
  1408  0590                     	;# 
  1409  0591                     	;# 
  1410  0592                     	;# 
  1411  0593                     	;# 
  1412  060C                     	;# 
  1413  060D                     	;# 
  1414  060E                     	;# 
  1415  060F                     	;# 
  1416  0610                     	;# 
  1417  0611                     	;# 
  1418  0612                     	;# 
  1419  0613                     	;# 
  1420  0614                     	;# 
  1421  0616                     	;# 
  1422  0617                     	;# 
  1423  0618                     	;# 
  1424  0619                     	;# 
  1425  061A                     	;# 
  1426  061B                     	;# 
  1427  061C                     	;# 
  1428  061D                     	;# 
  1429  061E                     	;# 
  1430  068C                     	;# 
  1431  068D                     	;# 
  1432  068E                     	;# 
  1433  068F                     	;# 
  1434  0690                     	;# 
  1435  0691                     	;# 
  1436  0692                     	;# 
  1437  0693                     	;# 
  1438  0694                     	;# 
  1439  070C                     	;# 
  1440  070D                     	;# 
  1441  070E                     	;# 
  1442  070F                     	;# 
  1443  0710                     	;# 
  1444  0711                     	;# 
  1445  0712                     	;# 
  1446  0713                     	;# 
  1447  0714                     	;# 
  1448  0716                     	;# 
  1449  0717                     	;# 
  1450  0718                     	;# 
  1451  0719                     	;# 
  1452  071A                     	;# 
  1453  071B                     	;# 
  1454  071C                     	;# 
  1455  071D                     	;# 
  1456  071E                     	;# 
  1457  0796                     	;# 
  1458  0797                     	;# 
  1459  0798                     	;# 
  1460  0799                     	;# 
  1461  079A                     	;# 
  1462  079B                     	;# 
  1463  080C                     	;# 
  1464  080D                     	;# 
  1465  080E                     	;# 
  1466  080F                     	;# 
  1467  0810                     	;# 
  1468  0811                     	;# 
  1469  0812                     	;# 
  1470  0813                     	;# 
  1471  0814                     	;# 
  1472  081A                     	;# 
  1473  081B                     	;# 
  1474  081C                     	;# 
  1475  081D                     	;# 
  1476  081E                     	;# 
  1477  081F                     	;# 
  1478  088C                     	;# 
  1479  088D                     	;# 
  1480  088E                     	;# 
  1481  088F                     	;# 
  1482  0890                     	;# 
  1483  0891                     	;# 
  1484  0892                     	;# 
  1485  0893                     	;# 
  1486  0895                     	;# 
  1487  0896                     	;# 
  1488  0897                     	;# 
  1489  0898                     	;# 
  1490  0899                     	;# 
  1491  089A                     	;# 
  1492  089B                     	;# 
  1493  090C                     	;# 
  1494  090E                     	;# 
  1495  090F                     	;# 
  1496  091F                     	;# 
  1497  091F                     	;# 
  1498  098F                     	;# 
  1499  098F                     	;# 
  1500  0990                     	;# 
  1501  0991                     	;# 
  1502  0992                     	;# 
  1503  0993                     	;# 
  1504  0994                     	;# 
  1505  0995                     	;# 
  1506  0996                     	;# 
  1507  0997                     	;# 
  1508  0E0F                     	;# 
  1509  0E10                     	;# 
  1510  0E11                     	;# 
  1511  0E12                     	;# 
  1512  0E13                     	;# 
  1513  0E14                     	;# 
  1514  0E15                     	;# 
  1515  0E16                     	;# 
  1516  0E17                     	;# 
  1517  0E18                     	;# 
  1518  0E19                     	;# 
  1519  0E1A                     	;# 
  1520  0E1B                     	;# 
  1521  0E1C                     	;# 
  1522  0E1D                     	;# 
  1523  0E1E                     	;# 
  1524  0E1F                     	;# 
  1525  0E20                     	;# 
  1526  0E21                     	;# 
  1527  0E22                     	;# 
  1528  0E23                     	;# 
  1529  0E24                     	;# 
  1530  0E25                     	;# 
  1531  0E26                     	;# 
  1532  0E27                     	;# 
  1533  0E28                     	;# 
  1534  0E29                     	;# 
  1535  0E2A                     	;# 
  1536  0E2B                     	;# 
  1537  0E2C                     	;# 
  1538  0E2D                     	;# 
  1539  0E2E                     	;# 
  1540  0E2F                     	;# 
  1541  0E30                     	;# 
  1542  0E31                     	;# 
  1543  0E32                     	;# 
  1544  0E33                     	;# 
  1545  0E34                     	;# 
  1546  0E35                     	;# 
  1547  0E36                     	;# 
  1548  0E37                     	;# 
  1549  0E8F                     	;# 
  1550  0E90                     	;# 
  1551  0E91                     	;# 
  1552  0E92                     	;# 
  1553  0E93                     	;# 
  1554  0E94                     	;# 
  1555  0E95                     	;# 
  1556  0E96                     	;# 
  1557  0E97                     	;# 
  1558  0E9C                     	;# 
  1559  0E9D                     	;# 
  1560  0E9E                     	;# 
  1561  0EA1                     	;# 
  1562  0EA2                     	;# 
  1563  0EA3                     	;# 
  1564  0EA4                     	;# 
  1565  0EA5                     	;# 
  1566  0EA9                     	;# 
  1567  0EAA                     	;# 
  1568  0EAB                     	;# 
  1569  0EAC                     	;# 
  1570  0EB1                     	;# 
  1571  0EB2                     	;# 
  1572  0EB3                     	;# 
  1573  0EB8                     	;# 
  1574  0EB9                     	;# 
  1575  0EBA                     	;# 
  1576  0EBB                     	;# 
  1577  0EBC                     	;# 
  1578  0EBD                     	;# 
  1579  0EBE                     	;# 
  1580  0EC3                     	;# 
  1581  0EC5                     	;# 
  1582  0EC6                     	;# 
  1583  0EC7                     	;# 
  1584  0EC8                     	;# 
  1585  0EC9                     	;# 
  1586  0ECA                     	;# 
  1587  0ECB                     	;# 
  1588  0ECC                     	;# 
  1589  0F10                     	;# 
  1590  0F11                     	;# 
  1591  0F12                     	;# 
  1592  0F13                     	;# 
  1593  0F14                     	;# 
  1594  0F15                     	;# 
  1595  0F16                     	;# 
  1596  0F17                     	;# 
  1597  0F18                     	;# 
  1598  0F19                     	;# 
  1599  0F1A                     	;# 
  1600  0F1B                     	;# 
  1601  0F1C                     	;# 
  1602  0F1D                     	;# 
  1603  0F1E                     	;# 
  1604  0F1F                     	;# 
  1605  0F20                     	;# 
  1606  0F21                     	;# 
  1607  0F22                     	;# 
  1608  0F23                     	;# 
  1609  0F24                     	;# 
  1610  0F25                     	;# 
  1611  0F26                     	;# 
  1612  0F27                     	;# 
  1613  0F38                     	;# 
  1614  0F39                     	;# 
  1615  0F3A                     	;# 
  1616  0F3B                     	;# 
  1617  0F3C                     	;# 
  1618  0F3D                     	;# 
  1619  0F3E                     	;# 
  1620  0F3F                     	;# 
  1621  0F40                     	;# 
  1622  0F41                     	;# 
  1623  0F43                     	;# 
  1624  0F44                     	;# 
  1625  0F45                     	;# 
  1626  0F46                     	;# 
  1627  0F47                     	;# 
  1628  0F48                     	;# 
  1629  0F49                     	;# 
  1630  0F4A                     	;# 
  1631  0F4B                     	;# 
  1632  0F4C                     	;# 
  1633  0F4E                     	;# 
  1634  0F4F                     	;# 
  1635  0F50                     	;# 
  1636  0F51                     	;# 
  1637  0F52                     	;# 
  1638  0F53                     	;# 
  1639  0F54                     	;# 
  1640  0F55                     	;# 
  1641  0F56                     	;# 
  1642  0F57                     	;# 
  1643  0F65                     	;# 
  1644  0F68                     	;# 
  1645  0F69                     	;# 
  1646  0F6A                     	;# 
  1647  0F6B                     	;# 
  1648  0FE4                     	;# 
  1649  0FE5                     	;# 
  1650  0FE6                     	;# 
  1651  0FE7                     	;# 
  1652  0FE8                     	;# 
  1653  0FE9                     	;# 
  1654  0FEA                     	;# 
  1655  0FEB                     	;# 
  1656  0FED                     	;# 
  1657  0FEE                     	;# 
  1658  0FEF                     	;# 
  1659  0000                     	;# 
  1660  0001                     	;# 
  1661  0002                     	;# 
  1662  0003                     	;# 
  1663  0004                     	;# 
  1664  0005                     	;# 
  1665  0006                     	;# 
  1666  0007                     	;# 
  1667  0008                     	;# 
  1668  0009                     	;# 
  1669  000A                     	;# 
  1670  000B                     	;# 
  1671  000C                     	;# 
  1672  000D                     	;# 
  1673  000E                     	;# 
  1674  0010                     	;# 
  1675  0011                     	;# 
  1676  0012                     	;# 
  1677  0013                     	;# 
  1678  0016                     	;# 
  1679  0017                     	;# 
  1680  0018                     	;# 
  1681  001C                     	;# 
  1682  001C                     	;# 
  1683  001D                     	;# 
  1684  001D                     	;# 
  1685  001E                     	;# 
  1686  001F                     	;# 
  1687  008C                     	;# 
  1688  008C                     	;# 
  1689  008D                     	;# 
  1690  008E                     	;# 
  1691  008E                     	;# 
  1692  008F                     	;# 
  1693  0090                     	;# 
  1694  0090                     	;# 
  1695  0091                     	;# 
  1696  0093                     	;# 
  1697  0094                     	;# 
  1698  0095                     	;# 
  1699  0096                     	;# 
  1700  0097                     	;# 
  1701  0098                     	;# 
  1702  0099                     	;# 
  1703  009A                     	;# 
  1704  009B                     	;# 
  1705  009C                     	;# 
  1706  009D                     	;# 
  1707  009E                     	;# 
  1708  010C                     	;# 
  1709  010D                     	;# 
  1710  010E                     	;# 
  1711  010E                     	;# 
  1712  010F                     	;# 
  1713  0110                     	;# 
  1714  0110                     	;# 
  1715  0111                     	;# 
  1716  0112                     	;# 
  1717  0112                     	;# 
  1718  0113                     	;# 
  1719  0114                     	;# 
  1720  0114                     	;# 
  1721  0115                     	;# 
  1722  0116                     	;# 
  1723  0116                     	;# 
  1724  0117                     	;# 
  1725  0119                     	;# 
  1726  0119                     	;# 
  1727  0119                     	;# 
  1728  011A                     	;# 
  1729  011A                     	;# 
  1730  011A                     	;# 
  1731  011B                     	;# 
  1732  011B                     	;# 
  1733  011B                     	;# 
  1734  011B                     	;# 
  1735  011B                     	;# 
  1736  011C                     	;# 
  1737  011C                     	;# 
  1738  011C                     	;# 
  1739  011D                     	;# 
  1740  011D                     	;# 
  1741  011D                     	;# 
  1742  011E                     	;# 
  1743  011E                     	;# 
  1744  011E                     	;# 
  1745  011F                     	;# 
  1746  011F                     	;# 
  1747  011F                     	;# 
  1748  011F                     	;# 
  1749  011F                     	;# 
  1750  018C                     	;# 
  1751  018D                     	;# 
  1752  018E                     	;# 
  1753  018F                     	;# 
  1754  0190                     	;# 
  1755  0191                     	;# 
  1756  0192                     	;# 
  1757  0196                     	;# 
  1758  0197                     	;# 
  1759  0198                     	;# 
  1760  0199                     	;# 
  1761  019A                     	;# 
  1762  019B                     	;# 
  1763  019C                     	;# 
  1764  020C                     	;# 
  1765  020C                     	;# 
  1766  020D                     	;# 
  1767  020E                     	;# 
  1768  020F                     	;# 
  1769  020F                     	;# 
  1770  0210                     	;# 
  1771  0210                     	;# 
  1772  0211                     	;# 
  1773  0211                     	;# 
  1774  0212                     	;# 
  1775  0212                     	;# 
  1776  0213                     	;# 
  1777  0214                     	;# 
  1778  0215                     	;# 
  1779  0215                     	;# 
  1780  0216                     	;# 
  1781  0216                     	;# 
  1782  0217                     	;# 
  1783  0217                     	;# 
  1784  0218                     	;# 
  1785  0218                     	;# 
  1786  0219                     	;# 
  1787  021A                     	;# 
  1788  021B                     	;# 
  1789  021B                     	;# 
  1790  021C                     	;# 
  1791  021C                     	;# 
  1792  021D                     	;# 
  1793  021D                     	;# 
  1794  021E                     	;# 
  1795  021F                     	;# 
  1796  028C                     	;# 
  1797  028C                     	;# 
  1798  028D                     	;# 
  1799  028D                     	;# 
  1800  028E                     	;# 
  1801  028F                     	;# 
  1802  0290                     	;# 
  1803  0290                     	;# 
  1804  0291                     	;# 
  1805  0292                     	;# 
  1806  0292                     	;# 
  1807  0293                     	;# 
  1808  0293                     	;# 
  1809  0294                     	;# 
  1810  0295                     	;# 
  1811  0296                     	;# 
  1812  0296                     	;# 
  1813  0297                     	;# 
  1814  0298                     	;# 
  1815  0298                     	;# 
  1816  0299                     	;# 
  1817  0299                     	;# 
  1818  029A                     	;# 
  1819  029B                     	;# 
  1820  029C                     	;# 
  1821  029C                     	;# 
  1822  029D                     	;# 
  1823  030C                     	;# 
  1824  030C                     	;# 
  1825  030D                     	;# 
  1826  030E                     	;# 
  1827  030F                     	;# 
  1828  0310                     	;# 
  1829  0310                     	;# 
  1830  0311                     	;# 
  1831  0312                     	;# 
  1832  0313                     	;# 
  1833  0314                     	;# 
  1834  0314                     	;# 
  1835  0315                     	;# 
  1836  0316                     	;# 
  1837  0317                     	;# 
  1838  0318                     	;# 
  1839  0318                     	;# 
  1840  0319                     	;# 
  1841  031A                     	;# 
  1842  031B                     	;# 
  1843  031C                     	;# 
  1844  031C                     	;# 
  1845  031D                     	;# 
  1846  031E                     	;# 
  1847  031F                     	;# 
  1848  038C                     	;# 
  1849  038D                     	;# 
  1850  038E                     	;# 
  1851  0390                     	;# 
  1852  0391                     	;# 
  1853  0392                     	;# 
  1854  040C                     	;# 
  1855  040D                     	;# 
  1856  040E                     	;# 
  1857  040F                     	;# 
  1858  0410                     	;# 
  1859  0411                     	;# 
  1860  0416                     	;# 
  1861  0416                     	;# 
  1862  0417                     	;# 
  1863  0418                     	;# 
  1864  0418                     	;# 
  1865  0419                     	;# 
  1866  041A                     	;# 
  1867  041A                     	;# 
  1868  041B                     	;# 
  1869  041C                     	;# 
  1870  041C                     	;# 
  1871  041D                     	;# 
  1872  041E                     	;# 
  1873  041F                     	;# 
  1874  048C                     	;# 
  1875  048C                     	;# 
  1876  048D                     	;# 
  1877  048E                     	;# 
  1878  048F                     	;# 
  1879  048F                     	;# 
  1880  0490                     	;# 
  1881  0491                     	;# 
  1882  0492                     	;# 
  1883  0492                     	;# 
  1884  0493                     	;# 
  1885  0494                     	;# 
  1886  0495                     	;# 
  1887  0495                     	;# 
  1888  0496                     	;# 
  1889  0497                     	;# 
  1890  0498                     	;# 
  1891  0499                     	;# 
  1892  049A                     	;# 
  1893  049B                     	;# 
  1894  049C                     	;# 
  1895  049D                     	;# 
  1896  050C                     	;# 
  1897  050C                     	;# 
  1898  050D                     	;# 
  1899  050E                     	;# 
  1900  050F                     	;# 
  1901  050F                     	;# 
  1902  0510                     	;# 
  1903  0511                     	;# 
  1904  0512                     	;# 
  1905  0512                     	;# 
  1906  0513                     	;# 
  1907  0514                     	;# 
  1908  0515                     	;# 
  1909  0515                     	;# 
  1910  0516                     	;# 
  1911  0517                     	;# 
  1912  0518                     	;# 
  1913  0519                     	;# 
  1914  051A                     	;# 
  1915  051B                     	;# 
  1916  051C                     	;# 
  1917  051D                     	;# 
  1918  058C                     	;# 
  1919  058C                     	;# 
  1920  058D                     	;# 
  1921  058E                     	;# 
  1922  058F                     	;# 
  1923  058F                     	;# 
  1924  0590                     	;# 
  1925  0591                     	;# 
  1926  0592                     	;# 
  1927  0593                     	;# 
  1928  060C                     	;# 
  1929  060D                     	;# 
  1930  060E                     	;# 
  1931  060F                     	;# 
  1932  0610                     	;# 
  1933  0611                     	;# 
  1934  0612                     	;# 
  1935  0613                     	;# 
  1936  0614                     	;# 
  1937  0616                     	;# 
  1938  0617                     	;# 
  1939  0618                     	;# 
  1940  0619                     	;# 
  1941  061A                     	;# 
  1942  061B                     	;# 
  1943  061C                     	;# 
  1944  061D                     	;# 
  1945  061E                     	;# 
  1946  068C                     	;# 
  1947  068D                     	;# 
  1948  068E                     	;# 
  1949  068F                     	;# 
  1950  0690                     	;# 
  1951  0691                     	;# 
  1952  0692                     	;# 
  1953  0693                     	;# 
  1954  0694                     	;# 
  1955  070C                     	;# 
  1956  070D                     	;# 
  1957  070E                     	;# 
  1958  070F                     	;# 
  1959  0710                     	;# 
  1960  0711                     	;# 
  1961  0712                     	;# 
  1962  0713                     	;# 
  1963  0714                     	;# 
  1964  0716                     	;# 
  1965  0717                     	;# 
  1966  0718                     	;# 
  1967  0719                     	;# 
  1968  071A                     	;# 
  1969  071B                     	;# 
  1970  071C                     	;# 
  1971  071D                     	;# 
  1972  071E                     	;# 
  1973  0796                     	;# 
  1974  0797                     	;# 
  1975  0798                     	;# 
  1976  0799                     	;# 
  1977  079A                     	;# 
  1978  079B                     	;# 
  1979  080C                     	;# 
  1980  080D                     	;# 
  1981  080E                     	;# 
  1982  080F                     	;# 
  1983  0810                     	;# 
  1984  0811                     	;# 
  1985  0812                     	;# 
  1986  0813                     	;# 
  1987  0814                     	;# 
  1988  081A                     	;# 
  1989  081B                     	;# 
  1990  081C                     	;# 
  1991  081D                     	;# 
  1992  081E                     	;# 
  1993  081F                     	;# 
  1994  088C                     	;# 
  1995  088D                     	;# 
  1996  088E                     	;# 
  1997  088F                     	;# 
  1998  0890                     	;# 
  1999  0891                     	;# 
  2000  0892                     	;# 
  2001  0893                     	;# 
  2002  0895                     	;# 
  2003  0896                     	;# 
  2004  0897                     	;# 
  2005  0898                     	;# 
  2006  0899                     	;# 
  2007  089A                     	;# 
  2008  089B                     	;# 
  2009  090C                     	;# 
  2010  090E                     	;# 
  2011  090F                     	;# 
  2012  091F                     	;# 
  2013  091F                     	;# 
  2014  098F                     	;# 
  2015  098F                     	;# 
  2016  0990                     	;# 
  2017  0991                     	;# 
  2018  0992                     	;# 
  2019  0993                     	;# 
  2020  0994                     	;# 
  2021  0995                     	;# 
  2022  0996                     	;# 
  2023  0997                     	;# 
  2024  0E0F                     	;# 
  2025  0E10                     	;# 
  2026  0E11                     	;# 
  2027  0E12                     	;# 
  2028  0E13                     	;# 
  2029  0E14                     	;# 
  2030  0E15                     	;# 
  2031  0E16                     	;# 
  2032  0E17                     	;# 
  2033  0E18                     	;# 
  2034  0E19                     	;# 
  2035  0E1A                     	;# 
  2036  0E1B                     	;# 
  2037  0E1C                     	;# 
  2038  0E1D                     	;# 
  2039  0E1E                     	;# 
  2040  0E1F                     	;# 
  2041  0E20                     	;# 
  2042  0E21                     	;# 
  2043  0E22                     	;# 
  2044  0E23                     	;# 
  2045  0E24                     	;# 
  2046  0E25                     	;# 
  2047  0E26                     	;# 
  2048  0E27                     	;# 
  2049  0E28                     	;# 
  2050  0E29                     	;# 
  2051  0E2A                     	;# 
  2052  0E2B                     	;# 
  2053  0E2C                     	;# 
  2054  0E2D                     	;# 
  2055  0E2E                     	;# 
  2056  0E2F                     	;# 
  2057  0E30                     	;# 
  2058  0E31                     	;# 
  2059  0E32                     	;# 
  2060  0E33                     	;# 
  2061  0E34                     	;# 
  2062  0E35                     	;# 
  2063  0E36                     	;# 
  2064  0E37                     	;# 
  2065  0E8F                     	;# 
  2066  0E90                     	;# 
  2067  0E91                     	;# 
  2068  0E92                     	;# 
  2069  0E93                     	;# 
  2070  0E94                     	;# 
  2071  0E95                     	;# 
  2072  0E96                     	;# 
  2073  0E97                     	;# 
  2074  0E9C                     	;# 
  2075  0E9D                     	;# 
  2076  0E9E                     	;# 
  2077  0EA1                     	;# 
  2078  0EA2                     	;# 
  2079  0EA3                     	;# 
  2080  0EA4                     	;# 
  2081  0EA5                     	;# 
  2082  0EA9                     	;# 
  2083  0EAA                     	;# 
  2084  0EAB                     	;# 
  2085  0EAC                     	;# 
  2086  0EB1                     	;# 
  2087  0EB2                     	;# 
  2088  0EB3                     	;# 
  2089  0EB8                     	;# 
  2090  0EB9                     	;# 
  2091  0EBA                     	;# 
  2092  0EBB                     	;# 
  2093  0EBC                     	;# 
  2094  0EBD                     	;# 
  2095  0EBE                     	;# 
  2096  0EC3                     	;# 
  2097  0EC5                     	;# 
  2098  0EC6                     	;# 
  2099  0EC7                     	;# 
  2100  0EC8                     	;# 
  2101  0EC9                     	;# 
  2102  0ECA                     	;# 
  2103  0ECB                     	;# 
  2104  0ECC                     	;# 
  2105  0F10                     	;# 
  2106  0F11                     	;# 
  2107  0F12                     	;# 
  2108  0F13                     	;# 
  2109  0F14                     	;# 
  2110  0F15                     	;# 
  2111  0F16                     	;# 
  2112  0F17                     	;# 
  2113  0F18                     	;# 
  2114  0F19                     	;# 
  2115  0F1A                     	;# 
  2116  0F1B                     	;# 
  2117  0F1C                     	;# 
  2118  0F1D                     	;# 
  2119  0F1E                     	;# 
  2120  0F1F                     	;# 
  2121  0F20                     	;# 
  2122  0F21                     	;# 
  2123  0F22                     	;# 
  2124  0F23                     	;# 
  2125  0F24                     	;# 
  2126  0F25                     	;# 
  2127  0F26                     	;# 
  2128  0F27                     	;# 
  2129  0F38                     	;# 
  2130  0F39                     	;# 
  2131  0F3A                     	;# 
  2132  0F3B                     	;# 
  2133  0F3C                     	;# 
  2134  0F3D                     	;# 
  2135  0F3E                     	;# 
  2136  0F3F                     	;# 
  2137  0F40                     	;# 
  2138  0F41                     	;# 
  2139  0F43                     	;# 
  2140  0F44                     	;# 
  2141  0F45                     	;# 
  2142  0F46                     	;# 
  2143  0F47                     	;# 
  2144  0F48                     	;# 
  2145  0F49                     	;# 
  2146  0F4A                     	;# 
  2147  0F4B                     	;# 
  2148  0F4C                     	;# 
  2149  0F4E                     	;# 
  2150  0F4F                     	;# 
  2151  0F50                     	;# 
  2152  0F51                     	;# 
  2153  0F52                     	;# 
  2154  0F53                     	;# 
  2155  0F54                     	;# 
  2156  0F55                     	;# 
  2157  0F56                     	;# 
  2158  0F57                     	;# 
  2159  0F65                     	;# 
  2160  0F68                     	;# 
  2161  0F69                     	;# 
  2162  0F6A                     	;# 
  2163  0F6B                     	;# 
  2164  0FE4                     	;# 
  2165  0FE5                     	;# 
  2166  0FE6                     	;# 
  2167  0FE7                     	;# 
  2168  0FE8                     	;# 
  2169  0FE9                     	;# 
  2170  0FEA                     	;# 
  2171  0FEB                     	;# 
  2172  0FED                     	;# 
  2173  0FEE                     	;# 
  2174  0FEF                     	;# 
  2175  0000                     	;# 
  2176  0001                     	;# 
  2177  0002                     	;# 
  2178  0003                     	;# 
  2179  0004                     	;# 
  2180  0005                     	;# 
  2181  0006                     	;# 
  2182  0007                     	;# 
  2183  0008                     	;# 
  2184  0009                     	;# 
  2185  000A                     	;# 
  2186  000B                     	;# 
  2187  000C                     	;# 
  2188  000D                     	;# 
  2189  000E                     	;# 
  2190  0010                     	;# 
  2191  0011                     	;# 
  2192  0012                     	;# 
  2193  0013                     	;# 
  2194  0016                     	;# 
  2195  0017                     	;# 
  2196  0018                     	;# 
  2197  001C                     	;# 
  2198  001C                     	;# 
  2199  001D                     	;# 
  2200  001D                     	;# 
  2201  001E                     	;# 
  2202  001F                     	;# 
  2203  008C                     	;# 
  2204  008C                     	;# 
  2205  008D                     	;# 
  2206  008E                     	;# 
  2207  008E                     	;# 
  2208  008F                     	;# 
  2209  0090                     	;# 
  2210  0090                     	;# 
  2211  0091                     	;# 
  2212  0093                     	;# 
  2213  0094                     	;# 
  2214  0095                     	;# 
  2215  0096                     	;# 
  2216  0097                     	;# 
  2217  0098                     	;# 
  2218  0099                     	;# 
  2219  009A                     	;# 
  2220  009B                     	;# 
  2221  009C                     	;# 
  2222  009D                     	;# 
  2223  009E                     	;# 
  2224  010C                     	;# 
  2225  010D                     	;# 
  2226  010E                     	;# 
  2227  010E                     	;# 
  2228  010F                     	;# 
  2229  0110                     	;# 
  2230  0110                     	;# 
  2231  0111                     	;# 
  2232  0112                     	;# 
  2233  0112                     	;# 
  2234  0113                     	;# 
  2235  0114                     	;# 
  2236  0114                     	;# 
  2237  0115                     	;# 
  2238  0116                     	;# 
  2239  0116                     	;# 
  2240  0117                     	;# 
  2241  0119                     	;# 
  2242  0119                     	;# 
  2243  0119                     	;# 
  2244  011A                     	;# 
  2245  011A                     	;# 
  2246  011A                     	;# 
  2247  011B                     	;# 
  2248  011B                     	;# 
  2249  011B                     	;# 
  2250  011B                     	;# 
  2251  011B                     	;# 
  2252  011C                     	;# 
  2253  011C                     	;# 
  2254  011C                     	;# 
  2255  011D                     	;# 
  2256  011D                     	;# 
  2257  011D                     	;# 
  2258  011E                     	;# 
  2259  011E                     	;# 
  2260  011E                     	;# 
  2261  011F                     	;# 
  2262  011F                     	;# 
  2263  011F                     	;# 
  2264  011F                     	;# 
  2265  011F                     	;# 
  2266  018C                     	;# 
  2267  018D                     	;# 
  2268  018E                     	;# 
  2269  018F                     	;# 
  2270  0190                     	;# 
  2271  0191                     	;# 
  2272  0192                     	;# 
  2273  0196                     	;# 
  2274  0197                     	;# 
  2275  0198                     	;# 
  2276  0199                     	;# 
  2277  019A                     	;# 
  2278  019B                     	;# 
  2279  019C                     	;# 
  2280  020C                     	;# 
  2281  020C                     	;# 
  2282  020D                     	;# 
  2283  020E                     	;# 
  2284  020F                     	;# 
  2285  020F                     	;# 
  2286  0210                     	;# 
  2287  0210                     	;# 
  2288  0211                     	;# 
  2289  0211                     	;# 
  2290  0212                     	;# 
  2291  0212                     	;# 
  2292  0213                     	;# 
  2293  0214                     	;# 
  2294  0215                     	;# 
  2295  0215                     	;# 
  2296  0216                     	;# 
  2297  0216                     	;# 
  2298  0217                     	;# 
  2299  0217                     	;# 
  2300  0218                     	;# 
  2301  0218                     	;# 
  2302  0219                     	;# 
  2303  021A                     	;# 
  2304  021B                     	;# 
  2305  021B                     	;# 
  2306  021C                     	;# 
  2307  021C                     	;# 
  2308  021D                     	;# 
  2309  021D                     	;# 
  2310  021E                     	;# 
  2311  021F                     	;# 
  2312  028C                     	;# 
  2313  028C                     	;# 
  2314  028D                     	;# 
  2315  028D                     	;# 
  2316  028E                     	;# 
  2317  028F                     	;# 
  2318  0290                     	;# 
  2319  0290                     	;# 
  2320  0291                     	;# 
  2321  0292                     	;# 
  2322  0292                     	;# 
  2323  0293                     	;# 
  2324  0293                     	;# 
  2325  0294                     	;# 
  2326  0295                     	;# 
  2327  0296                     	;# 
  2328  0296                     	;# 
  2329  0297                     	;# 
  2330  0298                     	;# 
  2331  0298                     	;# 
  2332  0299                     	;# 
  2333  0299                     	;# 
  2334  029A                     	;# 
  2335  029B                     	;# 
  2336  029C                     	;# 
  2337  029C                     	;# 
  2338  029D                     	;# 
  2339  030C                     	;# 
  2340  030C                     	;# 
  2341  030D                     	;# 
  2342  030E                     	;# 
  2343  030F                     	;# 
  2344  0310                     	;# 
  2345  0310                     	;# 
  2346  0311                     	;# 
  2347  0312                     	;# 
  2348  0313                     	;# 
  2349  0314                     	;# 
  2350  0314                     	;# 
  2351  0315                     	;# 
  2352  0316                     	;# 
  2353  0317                     	;# 
  2354  0318                     	;# 
  2355  0318                     	;# 
  2356  0319                     	;# 
  2357  031A                     	;# 
  2358  031B                     	;# 
  2359  031C                     	;# 
  2360  031C                     	;# 
  2361  031D                     	;# 
  2362  031E                     	;# 
  2363  031F                     	;# 
  2364  038C                     	;# 
  2365  038D                     	;# 
  2366  038E                     	;# 
  2367  0390                     	;# 
  2368  0391                     	;# 
  2369  0392                     	;# 
  2370  040C                     	;# 
  2371  040D                     	;# 
  2372  040E                     	;# 
  2373  040F                     	;# 
  2374  0410                     	;# 
  2375  0411                     	;# 
  2376  0416                     	;# 
  2377  0416                     	;# 
  2378  0417                     	;# 
  2379  0418                     	;# 
  2380  0418                     	;# 
  2381  0419                     	;# 
  2382  041A                     	;# 
  2383  041A                     	;# 
  2384  041B                     	;# 
  2385  041C                     	;# 
  2386  041C                     	;# 
  2387  041D                     	;# 
  2388  041E                     	;# 
  2389  041F                     	;# 
  2390  048C                     	;# 
  2391  048C                     	;# 
  2392  048D                     	;# 
  2393  048E                     	;# 
  2394  048F                     	;# 
  2395  048F                     	;# 
  2396  0490                     	;# 
  2397  0491                     	;# 
  2398  0492                     	;# 
  2399  0492                     	;# 
  2400  0493                     	;# 
  2401  0494                     	;# 
  2402  0495                     	;# 
  2403  0495                     	;# 
  2404  0496                     	;# 
  2405  0497                     	;# 
  2406  0498                     	;# 
  2407  0499                     	;# 
  2408  049A                     	;# 
  2409  049B                     	;# 
  2410  049C                     	;# 
  2411  049D                     	;# 
  2412  050C                     	;# 
  2413  050C                     	;# 
  2414  050D                     	;# 
  2415  050E                     	;# 
  2416  050F                     	;# 
  2417  050F                     	;# 
  2418  0510                     	;# 
  2419  0511                     	;# 
  2420  0512                     	;# 
  2421  0512                     	;# 
  2422  0513                     	;# 
  2423  0514                     	;# 
  2424  0515                     	;# 
  2425  0515                     	;# 
  2426  0516                     	;# 
  2427  0517                     	;# 
  2428  0518                     	;# 
  2429  0519                     	;# 
  2430  051A                     	;# 
  2431  051B                     	;# 
  2432  051C                     	;# 
  2433  051D                     	;# 
  2434  058C                     	;# 
  2435  058C                     	;# 
  2436  058D                     	;# 
  2437  058E                     	;# 
  2438  058F                     	;# 
  2439  058F                     	;# 
  2440  0590                     	;# 
  2441  0591                     	;# 
  2442  0592                     	;# 
  2443  0593                     	;# 
  2444  060C                     	;# 
  2445  060D                     	;# 
  2446  060E                     	;# 
  2447  060F                     	;# 
  2448  0610                     	;# 
  2449  0611                     	;# 
  2450  0612                     	;# 
  2451  0613                     	;# 
  2452  0614                     	;# 
  2453  0616                     	;# 
  2454  0617                     	;# 
  2455  0618                     	;# 
  2456  0619                     	;# 
  2457  061A                     	;# 
  2458  061B                     	;# 
  2459  061C                     	;# 
  2460  061D                     	;# 
  2461  061E                     	;# 
  2462  068C                     	;# 
  2463  068D                     	;# 
  2464  068E                     	;# 
  2465  068F                     	;# 
  2466  0690                     	;# 
  2467  0691                     	;# 
  2468  0692                     	;# 
  2469  0693                     	;# 
  2470  0694                     	;# 
  2471  070C                     	;# 
  2472  070D                     	;# 
  2473  070E                     	;# 
  2474  070F                     	;# 
  2475  0710                     	;# 
  2476  0711                     	;# 
  2477  0712                     	;# 
  2478  0713                     	;# 
  2479  0714                     	;# 
  2480  0716                     	;# 
  2481  0717                     	;# 
  2482  0718                     	;# 
  2483  0719                     	;# 
  2484  071A                     	;# 
  2485  071B                     	;# 
  2486  071C                     	;# 
  2487  071D                     	;# 
  2488  071E                     	;# 
  2489  0796                     	;# 
  2490  0797                     	;# 
  2491  0798                     	;# 
  2492  0799                     	;# 
  2493  079A                     	;# 
  2494  079B                     	;# 
  2495  080C                     	;# 
  2496  080D                     	;# 
  2497  080E                     	;# 
  2498  080F                     	;# 
  2499  0810                     	;# 
  2500  0811                     	;# 
  2501  0812                     	;# 
  2502  0813                     	;# 
  2503  0814                     	;# 
  2504  081A                     	;# 
  2505  081B                     	;# 
  2506  081C                     	;# 
  2507  081D                     	;# 
  2508  081E                     	;# 
  2509  081F                     	;# 
  2510  088C                     	;# 
  2511  088D                     	;# 
  2512  088E                     	;# 
  2513  088F                     	;# 
  2514  0890                     	;# 
  2515  0891                     	;# 
  2516  0892                     	;# 
  2517  0893                     	;# 
  2518  0895                     	;# 
  2519  0896                     	;# 
  2520  0897                     	;# 
  2521  0898                     	;# 
  2522  0899                     	;# 
  2523  089A                     	;# 
  2524  089B                     	;# 
  2525  090C                     	;# 
  2526  090E                     	;# 
  2527  090F                     	;# 
  2528  091F                     	;# 
  2529  091F                     	;# 
  2530  098F                     	;# 
  2531  098F                     	;# 
  2532  0990                     	;# 
  2533  0991                     	;# 
  2534  0992                     	;# 
  2535  0993                     	;# 
  2536  0994                     	;# 
  2537  0995                     	;# 
  2538  0996                     	;# 
  2539  0997                     	;# 
  2540  0E0F                     	;# 
  2541  0E10                     	;# 
  2542  0E11                     	;# 
  2543  0E12                     	;# 
  2544  0E13                     	;# 
  2545  0E14                     	;# 
  2546  0E15                     	;# 
  2547  0E16                     	;# 
  2548  0E17                     	;# 
  2549  0E18                     	;# 
  2550  0E19                     	;# 
  2551  0E1A                     	;# 
  2552  0E1B                     	;# 
  2553  0E1C                     	;# 
  2554  0E1D                     	;# 
  2555  0E1E                     	;# 
  2556  0E1F                     	;# 
  2557  0E20                     	;# 
  2558  0E21                     	;# 
  2559  0E22                     	;# 
  2560  0E23                     	;# 
  2561  0E24                     	;# 
  2562  0E25                     	;# 
  2563  0E26                     	;# 
  2564  0E27                     	;# 
  2565  0E28                     	;# 
  2566  0E29                     	;# 
  2567  0E2A                     	;# 
  2568  0E2B                     	;# 
  2569  0E2C                     	;# 
  2570  0E2D                     	;# 
  2571  0E2E                     	;# 
  2572  0E2F                     	;# 
  2573  0E30                     	;# 
  2574  0E31                     	;# 
  2575  0E32                     	;# 
  2576  0E33                     	;# 
  2577  0E34                     	;# 
  2578  0E35                     	;# 
  2579  0E36                     	;# 
  2580  0E37                     	;# 
  2581  0E8F                     	;# 
  2582  0E90                     	;# 
  2583  0E91                     	;# 
  2584  0E92                     	;# 
  2585  0E93                     	;# 
  2586  0E94                     	;# 
  2587  0E95                     	;# 
  2588  0E96                     	;# 
  2589  0E97                     	;# 
  2590  0E9C                     	;# 
  2591  0E9D                     	;# 
  2592  0E9E                     	;# 
  2593  0EA1                     	;# 
  2594  0EA2                     	;# 
  2595  0EA3                     	;# 
  2596  0EA4                     	;# 
  2597  0EA5                     	;# 
  2598  0EA9                     	;# 
  2599  0EAA                     	;# 
  2600  0EAB                     	;# 
  2601  0EAC                     	;# 
  2602  0EB1                     	;# 
  2603  0EB2                     	;# 
  2604  0EB3                     	;# 
  2605  0EB8                     	;# 
  2606  0EB9                     	;# 
  2607  0EBA                     	;# 
  2608  0EBB                     	;# 
  2609  0EBC                     	;# 
  2610  0EBD                     	;# 
  2611  0EBE                     	;# 
  2612  0EC3                     	;# 
  2613  0EC5                     	;# 
  2614  0EC6                     	;# 
  2615  0EC7                     	;# 
  2616  0EC8                     	;# 
  2617  0EC9                     	;# 
  2618  0ECA                     	;# 
  2619  0ECB                     	;# 
  2620  0ECC                     	;# 
  2621  0F10                     	;# 
  2622  0F11                     	;# 
  2623  0F12                     	;# 
  2624  0F13                     	;# 
  2625  0F14                     	;# 
  2626  0F15                     	;# 
  2627  0F16                     	;# 
  2628  0F17                     	;# 
  2629  0F18                     	;# 
  2630  0F19                     	;# 
  2631  0F1A                     	;# 
  2632  0F1B                     	;# 
  2633  0F1C                     	;# 
  2634  0F1D                     	;# 
  2635  0F1E                     	;# 
  2636  0F1F                     	;# 
  2637  0F20                     	;# 
  2638  0F21                     	;# 
  2639  0F22                     	;# 
  2640  0F23                     	;# 
  2641  0F24                     	;# 
  2642  0F25                     	;# 
  2643  0F26                     	;# 
  2644  0F27                     	;# 
  2645  0F38                     	;# 
  2646  0F39                     	;# 
  2647  0F3A                     	;# 
  2648  0F3B                     	;# 
  2649  0F3C                     	;# 
  2650  0F3D                     	;# 
  2651  0F3E                     	;# 
  2652  0F3F                     	;# 
  2653  0F40                     	;# 
  2654  0F41                     	;# 
  2655  0F43                     	;# 
  2656  0F44                     	;# 
  2657  0F45                     	;# 
  2658  0F46                     	;# 
  2659  0F47                     	;# 
  2660  0F48                     	;# 
  2661  0F49                     	;# 
  2662  0F4A                     	;# 
  2663  0F4B                     	;# 
  2664  0F4C                     	;# 
  2665  0F4E                     	;# 
  2666  0F4F                     	;# 
  2667  0F50                     	;# 
  2668  0F51                     	;# 
  2669  0F52                     	;# 
  2670  0F53                     	;# 
  2671  0F54                     	;# 
  2672  0F55                     	;# 
  2673  0F56                     	;# 
  2674  0F57                     	;# 
  2675  0F65                     	;# 
  2676  0F68                     	;# 
  2677  0F69                     	;# 
  2678  0F6A                     	;# 
  2679  0F6B                     	;# 
  2680  0FE4                     	;# 
  2681  0FE5                     	;# 
  2682  0FE6                     	;# 
  2683  0FE7                     	;# 
  2684  0FE8                     	;# 
  2685  0FE9                     	;# 
  2686  0FEA                     	;# 
  2687  0FEB                     	;# 
  2688  0FED                     	;# 
  2689  0FEE                     	;# 
  2690  0FEF                     	;# 
  2691  0000                     	;# 
  2692  0001                     	;# 
  2693  0002                     	;# 
  2694  0003                     	;# 
  2695  0004                     	;# 
  2696  0005                     	;# 
  2697  0006                     	;# 
  2698  0007                     	;# 
  2699  0008                     	;# 
  2700  0009                     	;# 
  2701  000A                     	;# 
  2702  000B                     	;# 
  2703  000C                     	;# 
  2704  000D                     	;# 
  2705  000E                     	;# 
  2706  0010                     	;# 
  2707  0011                     	;# 
  2708  0012                     	;# 
  2709  0013                     	;# 
  2710  0016                     	;# 
  2711  0017                     	;# 
  2712  0018                     	;# 
  2713  001C                     	;# 
  2714  001C                     	;# 
  2715  001D                     	;# 
  2716  001D                     	;# 
  2717  001E                     	;# 
  2718  001F                     	;# 
  2719  008C                     	;# 
  2720  008C                     	;# 
  2721  008D                     	;# 
  2722  008E                     	;# 
  2723  008E                     	;# 
  2724  008F                     	;# 
  2725  0090                     	;# 
  2726  0090                     	;# 
  2727  0091                     	;# 
  2728  0093                     	;# 
  2729  0094                     	;# 
  2730  0095                     	;# 
  2731  0096                     	;# 
  2732  0097                     	;# 
  2733  0098                     	;# 
  2734  0099                     	;# 
  2735  009A                     	;# 
  2736  009B                     	;# 
  2737  009C                     	;# 
  2738  009D                     	;# 
  2739  009E                     	;# 
  2740  010C                     	;# 
  2741  010D                     	;# 
  2742  010E                     	;# 
  2743  010E                     	;# 
  2744  010F                     	;# 
  2745  0110                     	;# 
  2746  0110                     	;# 
  2747  0111                     	;# 
  2748  0112                     	;# 
  2749  0112                     	;# 
  2750  0113                     	;# 
  2751  0114                     	;# 
  2752  0114                     	;# 
  2753  0115                     	;# 
  2754  0116                     	;# 
  2755  0116                     	;# 
  2756  0117                     	;# 
  2757  0119                     	;# 
  2758  0119                     	;# 
  2759  0119                     	;# 
  2760  011A                     	;# 
  2761  011A                     	;# 
  2762  011A                     	;# 
  2763  011B                     	;# 
  2764  011B                     	;# 
  2765  011B                     	;# 
  2766  011B                     	;# 
  2767  011B                     	;# 
  2768  011C                     	;# 
  2769  011C                     	;# 
  2770  011C                     	;# 
  2771  011D                     	;# 
  2772  011D                     	;# 
  2773  011D                     	;# 
  2774  011E                     	;# 
  2775  011E                     	;# 
  2776  011E                     	;# 
  2777  011F                     	;# 
  2778  011F                     	;# 
  2779  011F                     	;# 
  2780  011F                     	;# 
  2781  011F                     	;# 
  2782  018C                     	;# 
  2783  018D                     	;# 
  2784  018E                     	;# 
  2785  018F                     	;# 
  2786  0190                     	;# 
  2787  0191                     	;# 
  2788  0192                     	;# 
  2789  0196                     	;# 
  2790  0197                     	;# 
  2791  0198                     	;# 
  2792  0199                     	;# 
  2793  019A                     	;# 
  2794  019B                     	;# 
  2795  019C                     	;# 
  2796  020C                     	;# 
  2797  020C                     	;# 
  2798  020D                     	;# 
  2799  020E                     	;# 
  2800  020F                     	;# 
  2801  020F                     	;# 
  2802  0210                     	;# 
  2803  0210                     	;# 
  2804  0211                     	;# 
  2805  0211                     	;# 
  2806  0212                     	;# 
  2807  0212                     	;# 
  2808  0213                     	;# 
  2809  0214                     	;# 
  2810  0215                     	;# 
  2811  0215                     	;# 
  2812  0216                     	;# 
  2813  0216                     	;# 
  2814  0217                     	;# 
  2815  0217                     	;# 
  2816  0218                     	;# 
  2817  0218                     	;# 
  2818  0219                     	;# 
  2819  021A                     	;# 
  2820  021B                     	;# 
  2821  021B                     	;# 
  2822  021C                     	;# 
  2823  021C                     	;# 
  2824  021D                     	;# 
  2825  021D                     	;# 
  2826  021E                     	;# 
  2827  021F                     	;# 
  2828  028C                     	;# 
  2829  028C                     	;# 
  2830  028D                     	;# 
  2831  028D                     	;# 
  2832  028E                     	;# 
  2833  028F                     	;# 
  2834  0290                     	;# 
  2835  0290                     	;# 
  2836  0291                     	;# 
  2837  0292                     	;# 
  2838  0292                     	;# 
  2839  0293                     	;# 
  2840  0293                     	;# 
  2841  0294                     	;# 
  2842  0295                     	;# 
  2843  0296                     	;# 
  2844  0296                     	;# 
  2845  0297                     	;# 
  2846  0298                     	;# 
  2847  0298                     	;# 
  2848  0299                     	;# 
  2849  0299                     	;# 
  2850  029A                     	;# 
  2851  029B                     	;# 
  2852  029C                     	;# 
  2853  029C                     	;# 
  2854  029D                     	;# 
  2855  030C                     	;# 
  2856  030C                     	;# 
  2857  030D                     	;# 
  2858  030E                     	;# 
  2859  030F                     	;# 
  2860  0310                     	;# 
  2861  0310                     	;# 
  2862  0311                     	;# 
  2863  0312                     	;# 
  2864  0313                     	;# 
  2865  0314                     	;# 
  2866  0314                     	;# 
  2867  0315                     	;# 
  2868  0316                     	;# 
  2869  0317                     	;# 
  2870  0318                     	;# 
  2871  0318                     	;# 
  2872  0319                     	;# 
  2873  031A                     	;# 
  2874  031B                     	;# 
  2875  031C                     	;# 
  2876  031C                     	;# 
  2877  031D                     	;# 
  2878  031E                     	;# 
  2879  031F                     	;# 
  2880  038C                     	;# 
  2881  038D                     	;# 
  2882  038E                     	;# 
  2883  0390                     	;# 
  2884  0391                     	;# 
  2885  0392                     	;# 
  2886  040C                     	;# 
  2887  040D                     	;# 
  2888  040E                     	;# 
  2889  040F                     	;# 
  2890  0410                     	;# 
  2891  0411                     	;# 
  2892  0416                     	;# 
  2893  0416                     	;# 
  2894  0417                     	;# 
  2895  0418                     	;# 
  2896  0418                     	;# 
  2897  0419                     	;# 
  2898  041A                     	;# 
  2899  041A                     	;# 
  2900  041B                     	;# 
  2901  041C                     	;# 
  2902  041C                     	;# 
  2903  041D                     	;# 
  2904  041E                     	;# 
  2905  041F                     	;# 
  2906  048C                     	;# 
  2907  048C                     	;# 
  2908  048D                     	;# 
  2909  048E                     	;# 
  2910  048F                     	;# 
  2911  048F                     	;# 
  2912  0490                     	;# 
  2913  0491                     	;# 
  2914  0492                     	;# 
  2915  0492                     	;# 
  2916  0493                     	;# 
  2917  0494                     	;# 
  2918  0495                     	;# 
  2919  0495                     	;# 
  2920  0496                     	;# 
  2921  0497                     	;# 
  2922  0498                     	;# 
  2923  0499                     	;# 
  2924  049A                     	;# 
  2925  049B                     	;# 
  2926  049C                     	;# 
  2927  049D                     	;# 
  2928  050C                     	;# 
  2929  050C                     	;# 
  2930  050D                     	;# 
  2931  050E                     	;# 
  2932  050F                     	;# 
  2933  050F                     	;# 
  2934  0510                     	;# 
  2935  0511                     	;# 
  2936  0512                     	;# 
  2937  0512                     	;# 
  2938  0513                     	;# 
  2939  0514                     	;# 
  2940  0515                     	;# 
  2941  0515                     	;# 
  2942  0516                     	;# 
  2943  0517                     	;# 
  2944  0518                     	;# 
  2945  0519                     	;# 
  2946  051A                     	;# 
  2947  051B                     	;# 
  2948  051C                     	;# 
  2949  051D                     	;# 
  2950  058C                     	;# 
  2951  058C                     	;# 
  2952  058D                     	;# 
  2953  058E                     	;# 
  2954  058F                     	;# 
  2955  058F                     	;# 
  2956  0590                     	;# 
  2957  0591                     	;# 
  2958  0592                     	;# 
  2959  0593                     	;# 
  2960  060C                     	;# 
  2961  060D                     	;# 
  2962  060E                     	;# 
  2963  060F                     	;# 
  2964  0610                     	;# 
  2965  0611                     	;# 
  2966  0612                     	;# 
  2967  0613                     	;# 
  2968  0614                     	;# 
  2969  0616                     	;# 
  2970  0617                     	;# 
  2971  0618                     	;# 
  2972  0619                     	;# 
  2973  061A                     	;# 
  2974  061B                     	;# 
  2975  061C                     	;# 
  2976  061D                     	;# 
  2977  061E                     	;# 
  2978  068C                     	;# 
  2979  068D                     	;# 
  2980  068E                     	;# 
  2981  068F                     	;# 
  2982  0690                     	;# 
  2983  0691                     	;# 
  2984  0692                     	;# 
  2985  0693                     	;# 
  2986  0694                     	;# 
  2987  070C                     	;# 
  2988  070D                     	;# 
  2989  070E                     	;# 
  2990  070F                     	;# 
  2991  0710                     	;# 
  2992  0711                     	;# 
  2993  0712                     	;# 
  2994  0713                     	;# 
  2995  0714                     	;# 
  2996  0716                     	;# 
  2997  0717                     	;# 
  2998  0718                     	;# 
  2999  0719                     	;# 
  3000  071A                     	;# 
  3001  071B                     	;# 
  3002  071C                     	;# 
  3003  071D                     	;# 
  3004  071E                     	;# 
  3005  0796                     	;# 
  3006  0797                     	;# 
  3007  0798                     	;# 
  3008  0799                     	;# 
  3009  079A                     	;# 
  3010  079B                     	;# 
  3011  080C                     	;# 
  3012  080D                     	;# 
  3013  080E                     	;# 
  3014  080F                     	;# 
  3015  0810                     	;# 
  3016  0811                     	;# 
  3017  0812                     	;# 
  3018  0813                     	;# 
  3019  0814                     	;# 
  3020  081A                     	;# 
  3021  081B                     	;# 
  3022  081C                     	;# 
  3023  081D                     	;# 
  3024  081E                     	;# 
  3025  081F                     	;# 
  3026  088C                     	;# 
  3027  088D                     	;# 
  3028  088E                     	;# 
  3029  088F                     	;# 
  3030  0890                     	;# 
  3031  0891                     	;# 
  3032  0892                     	;# 
  3033  0893                     	;# 
  3034  0895                     	;# 
  3035  0896                     	;# 
  3036  0897                     	;# 
  3037  0898                     	;# 
  3038  0899                     	;# 
  3039  089A                     	;# 
  3040  089B                     	;# 
  3041  090C                     	;# 
  3042  090E                     	;# 
  3043  090F                     	;# 
  3044  091F                     	;# 
  3045  091F                     	;# 
  3046  098F                     	;# 
  3047  098F                     	;# 
  3048  0990                     	;# 
  3049  0991                     	;# 
  3050  0992                     	;# 
  3051  0993                     	;# 
  3052  0994                     	;# 
  3053  0995                     	;# 
  3054  0996                     	;# 
  3055  0997                     	;# 
  3056  0E0F                     	;# 
  3057  0E10                     	;# 
  3058  0E11                     	;# 
  3059  0E12                     	;# 
  3060  0E13                     	;# 
  3061  0E14                     	;# 
  3062  0E15                     	;# 
  3063  0E16                     	;# 
  3064  0E17                     	;# 
  3065  0E18                     	;# 
  3066  0E19                     	;# 
  3067  0E1A                     	;# 
  3068  0E1B                     	;# 
  3069  0E1C                     	;# 
  3070  0E1D                     	;# 
  3071  0E1E                     	;# 
  3072  0E1F                     	;# 
  3073  0E20                     	;# 
  3074  0E21                     	;# 
  3075  0E22                     	;# 
  3076  0E23                     	;# 
  3077  0E24                     	;# 
  3078  0E25                     	;# 
  3079  0E26                     	;# 
  3080  0E27                     	;# 
  3081  0E28                     	;# 
  3082  0E29                     	;# 
  3083  0E2A                     	;# 
  3084  0E2B                     	;# 
  3085  0E2C                     	;# 
  3086  0E2D                     	;# 
  3087  0E2E                     	;# 
  3088  0E2F                     	;# 
  3089  0E30                     	;# 
  3090  0E31                     	;# 
  3091  0E32                     	;# 
  3092  0E33                     	;# 
  3093  0E34                     	;# 
  3094  0E35                     	;# 
  3095  0E36                     	;# 
  3096  0E37                     	;# 
  3097  0E8F                     	;# 
  3098  0E90                     	;# 
  3099  0E91                     	;# 
  3100  0E92                     	;# 
  3101  0E93                     	;# 
  3102  0E94                     	;# 
  3103  0E95                     	;# 
  3104  0E96                     	;# 
  3105  0E97                     	;# 
  3106  0E9C                     	;# 
  3107  0E9D                     	;# 
  3108  0E9E                     	;# 
  3109  0EA1                     	;# 
  3110  0EA2                     	;# 
  3111  0EA3                     	;# 
  3112  0EA4                     	;# 
  3113  0EA5                     	;# 
  3114  0EA9                     	;# 
  3115  0EAA                     	;# 
  3116  0EAB                     	;# 
  3117  0EAC                     	;# 
  3118  0EB1                     	;# 
  3119  0EB2                     	;# 
  3120  0EB3                     	;# 
  3121  0EB8                     	;# 
  3122  0EB9                     	;# 
  3123  0EBA                     	;# 
  3124  0EBB                     	;# 
  3125  0EBC                     	;# 
  3126  0EBD                     	;# 
  3127  0EBE                     	;# 
  3128  0EC3                     	;# 
  3129  0EC5                     	;# 
  3130  0EC6                     	;# 
  3131  0EC7                     	;# 
  3132  0EC8                     	;# 
  3133  0EC9                     	;# 
  3134  0ECA                     	;# 
  3135  0ECB                     	;# 
  3136  0ECC                     	;# 
  3137  0F10                     	;# 
  3138  0F11                     	;# 
  3139  0F12                     	;# 
  3140  0F13                     	;# 
  3141  0F14                     	;# 
  3142  0F15                     	;# 
  3143  0F16                     	;# 
  3144  0F17                     	;# 
  3145  0F18                     	;# 
  3146  0F19                     	;# 
  3147  0F1A                     	;# 
  3148  0F1B                     	;# 
  3149  0F1C                     	;# 
  3150  0F1D                     	;# 
  3151  0F1E                     	;# 
  3152  0F1F                     	;# 
  3153  0F20                     	;# 
  3154  0F21                     	;# 
  3155  0F22                     	;# 
  3156  0F23                     	;# 
  3157  0F24                     	;# 
  3158  0F25                     	;# 
  3159  0F26                     	;# 
  3160  0F27                     	;# 
  3161  0F38                     	;# 
  3162  0F39                     	;# 
  3163  0F3A                     	;# 
  3164  0F3B                     	;# 
  3165  0F3C                     	;# 
  3166  0F3D                     	;# 
  3167  0F3E                     	;# 
  3168  0F3F                     	;# 
  3169  0F40                     	;# 
  3170  0F41                     	;# 
  3171  0F43                     	;# 
  3172  0F44                     	;# 
  3173  0F45                     	;# 
  3174  0F46                     	;# 
  3175  0F47                     	;# 
  3176  0F48                     	;# 
  3177  0F49                     	;# 
  3178  0F4A                     	;# 
  3179  0F4B                     	;# 
  3180  0F4C                     	;# 
  3181  0F4E                     	;# 
  3182  0F4F                     	;# 
  3183  0F50                     	;# 
  3184  0F51                     	;# 
  3185  0F52                     	;# 
  3186  0F53                     	;# 
  3187  0F54                     	;# 
  3188  0F55                     	;# 
  3189  0F56                     	;# 
  3190  0F57                     	;# 
  3191  0F65                     	;# 
  3192  0F68                     	;# 
  3193  0F69                     	;# 
  3194  0F6A                     	;# 
  3195  0F6B                     	;# 
  3196  0FE4                     	;# 
  3197  0FE5                     	;# 
  3198  0FE6                     	;# 
  3199  0FE7                     	;# 
  3200  0FE8                     	;# 
  3201  0FE9                     	;# 
  3202  0FEA                     	;# 
  3203  0FEB                     	;# 
  3204  0FED                     	;# 
  3205  0FEE                     	;# 
  3206  0FEF                     	;# 
  3207  0000                     	;# 
  3208  0001                     	;# 
  3209  0002                     	;# 
  3210  0003                     	;# 
  3211  0004                     	;# 
  3212  0005                     	;# 
  3213  0006                     	;# 
  3214  0007                     	;# 
  3215  0008                     	;# 
  3216  0009                     	;# 
  3217  000A                     	;# 
  3218  000B                     	;# 
  3219  000C                     	;# 
  3220  000D                     	;# 
  3221  000E                     	;# 
  3222  0010                     	;# 
  3223  0011                     	;# 
  3224  0012                     	;# 
  3225  0013                     	;# 
  3226  0016                     	;# 
  3227  0017                     	;# 
  3228  0018                     	;# 
  3229  001C                     	;# 
  3230  001C                     	;# 
  3231  001D                     	;# 
  3232  001D                     	;# 
  3233  001E                     	;# 
  3234  001F                     	;# 
  3235  008C                     	;# 
  3236  008C                     	;# 
  3237  008D                     	;# 
  3238  008E                     	;# 
  3239  008E                     	;# 
  3240  008F                     	;# 
  3241  0090                     	;# 
  3242  0090                     	;# 
  3243  0091                     	;# 
  3244  0093                     	;# 
  3245  0094                     	;# 
  3246  0095                     	;# 
  3247  0096                     	;# 
  3248  0097                     	;# 
  3249  0098                     	;# 
  3250  0099                     	;# 
  3251  009A                     	;# 
  3252  009B                     	;# 
  3253  009C                     	;# 
  3254  009D                     	;# 
  3255  009E                     	;# 
  3256  010C                     	;# 
  3257  010D                     	;# 
  3258  010E                     	;# 
  3259  010E                     	;# 
  3260  010F                     	;# 
  3261  0110                     	;# 
  3262  0110                     	;# 
  3263  0111                     	;# 
  3264  0112                     	;# 
  3265  0112                     	;# 
  3266  0113                     	;# 
  3267  0114                     	;# 
  3268  0114                     	;# 
  3269  0115                     	;# 
  3270  0116                     	;# 
  3271  0116                     	;# 
  3272  0117                     	;# 
  3273  0119                     	;# 
  3274  0119                     	;# 
  3275  0119                     	;# 
  3276  011A                     	;# 
  3277  011A                     	;# 
  3278  011A                     	;# 
  3279  011B                     	;# 
  3280  011B                     	;# 
  3281  011B                     	;# 
  3282  011B                     	;# 
  3283  011B                     	;# 
  3284  011C                     	;# 
  3285  011C                     	;# 
  3286  011C                     	;# 
  3287  011D                     	;# 
  3288  011D                     	;# 
  3289  011D                     	;# 
  3290  011E                     	;# 
  3291  011E                     	;# 
  3292  011E                     	;# 
  3293  011F                     	;# 
  3294  011F                     	;# 
  3295  011F                     	;# 
  3296  011F                     	;# 
  3297  011F                     	;# 
  3298  018C                     	;# 
  3299  018D                     	;# 
  3300  018E                     	;# 
  3301  018F                     	;# 
  3302  0190                     	;# 
  3303  0191                     	;# 
  3304  0192                     	;# 
  3305  0196                     	;# 
  3306  0197                     	;# 
  3307  0198                     	;# 
  3308  0199                     	;# 
  3309  019A                     	;# 
  3310  019B                     	;# 
  3311  019C                     	;# 
  3312  020C                     	;# 
  3313  020C                     	;# 
  3314  020D                     	;# 
  3315  020E                     	;# 
  3316  020F                     	;# 
  3317  020F                     	;# 
  3318  0210                     	;# 
  3319  0210                     	;# 
  3320  0211                     	;# 
  3321  0211                     	;# 
  3322  0212                     	;# 
  3323  0212                     	;# 
  3324  0213                     	;# 
  3325  0214                     	;# 
  3326  0215                     	;# 
  3327  0215                     	;# 
  3328  0216                     	;# 
  3329  0216                     	;# 
  3330  0217                     	;# 
  3331  0217                     	;# 
  3332  0218                     	;# 
  3333  0218                     	;# 
  3334  0219                     	;# 
  3335  021A                     	;# 
  3336  021B                     	;# 
  3337  021B                     	;# 
  3338  021C                     	;# 
  3339  021C                     	;# 
  3340  021D                     	;# 
  3341  021D                     	;# 
  3342  021E                     	;# 
  3343  021F                     	;# 
  3344  028C                     	;# 
  3345  028C                     	;# 
  3346  028D                     	;# 
  3347  028D                     	;# 
  3348  028E                     	;# 
  3349  028F                     	;# 
  3350  0290                     	;# 
  3351  0290                     	;# 
  3352  0291                     	;# 
  3353  0292                     	;# 
  3354  0292                     	;# 
  3355  0293                     	;# 
  3356  0293                     	;# 
  3357  0294                     	;# 
  3358  0295                     	;# 
  3359  0296                     	;# 
  3360  0296                     	;# 
  3361  0297                     	;# 
  3362  0298                     	;# 
  3363  0298                     	;# 
  3364  0299                     	;# 
  3365  0299                     	;# 
  3366  029A                     	;# 
  3367  029B                     	;# 
  3368  029C                     	;# 
  3369  029C                     	;# 
  3370  029D                     	;# 
  3371  030C                     	;# 
  3372  030C                     	;# 
  3373  030D                     	;# 
  3374  030E                     	;# 
  3375  030F                     	;# 
  3376  0310                     	;# 
  3377  0310                     	;# 
  3378  0311                     	;# 
  3379  0312                     	;# 
  3380  0313                     	;# 
  3381  0314                     	;# 
  3382  0314                     	;# 
  3383  0315                     	;# 
  3384  0316                     	;# 
  3385  0317                     	;# 
  3386  0318                     	;# 
  3387  0318                     	;# 
  3388  0319                     	;# 
  3389  031A                     	;# 
  3390  031B                     	;# 
  3391  031C                     	;# 
  3392  031C                     	;# 
  3393  031D                     	;# 
  3394  031E                     	;# 
  3395  031F                     	;# 
  3396  038C                     	;# 
  3397  038D                     	;# 
  3398  038E                     	;# 
  3399  0390                     	;# 
  3400  0391                     	;# 
  3401  0392                     	;# 
  3402  040C                     	;# 
  3403  040D                     	;# 
  3404  040E                     	;# 
  3405  040F                     	;# 
  3406  0410                     	;# 
  3407  0411                     	;# 
  3408  0416                     	;# 
  3409  0416                     	;# 
  3410  0417                     	;# 
  3411  0418                     	;# 
  3412  0418                     	;# 
  3413  0419                     	;# 
  3414  041A                     	;# 
  3415  041A                     	;# 
  3416  041B                     	;# 
  3417  041C                     	;# 
  3418  041C                     	;# 
  3419  041D                     	;# 
  3420  041E                     	;# 
  3421  041F                     	;# 
  3422  048C                     	;# 
  3423  048C                     	;# 
  3424  048D                     	;# 
  3425  048E                     	;# 
  3426  048F                     	;# 
  3427  048F                     	;# 
  3428  0490                     	;# 
  3429  0491                     	;# 
  3430  0492                     	;# 
  3431  0492                     	;# 
  3432  0493                     	;# 
  3433  0494                     	;# 
  3434  0495                     	;# 
  3435  0495                     	;# 
  3436  0496                     	;# 
  3437  0497                     	;# 
  3438  0498                     	;# 
  3439  0499                     	;# 
  3440  049A                     	;# 
  3441  049B                     	;# 
  3442  049C                     	;# 
  3443  049D                     	;# 
  3444  050C                     	;# 
  3445  050C                     	;# 
  3446  050D                     	;# 
  3447  050E                     	;# 
  3448  050F                     	;# 
  3449  050F                     	;# 
  3450  0510                     	;# 
  3451  0511                     	;# 
  3452  0512                     	;# 
  3453  0512                     	;# 
  3454  0513                     	;# 
  3455  0514                     	;# 
  3456  0515                     	;# 
  3457  0515                     	;# 
  3458  0516                     	;# 
  3459  0517                     	;# 
  3460  0518                     	;# 
  3461  0519                     	;# 
  3462  051A                     	;# 
  3463  051B                     	;# 
  3464  051C                     	;# 
  3465  051D                     	;# 
  3466  058C                     	;# 
  3467  058C                     	;# 
  3468  058D                     	;# 
  3469  058E                     	;# 
  3470  058F                     	;# 
  3471  058F                     	;# 
  3472  0590                     	;# 
  3473  0591                     	;# 
  3474  0592                     	;# 
  3475  0593                     	;# 
  3476  060C                     	;# 
  3477  060D                     	;# 
  3478  060E                     	;# 
  3479  060F                     	;# 
  3480  0610                     	;# 
  3481  0611                     	;# 
  3482  0612                     	;# 
  3483  0613                     	;# 
  3484  0614                     	;# 
  3485  0616                     	;# 
  3486  0617                     	;# 
  3487  0618                     	;# 
  3488  0619                     	;# 
  3489  061A                     	;# 
  3490  061B                     	;# 
  3491  061C                     	;# 
  3492  061D                     	;# 
  3493  061E                     	;# 
  3494  068C                     	;# 
  3495  068D                     	;# 
  3496  068E                     	;# 
  3497  068F                     	;# 
  3498  0690                     	;# 
  3499  0691                     	;# 
  3500  0692                     	;# 
  3501  0693                     	;# 
  3502  0694                     	;# 
  3503  070C                     	;# 
  3504  070D                     	;# 
  3505  070E                     	;# 
  3506  070F                     	;# 
  3507  0710                     	;# 
  3508  0711                     	;# 
  3509  0712                     	;# 
  3510  0713                     	;# 
  3511  0714                     	;# 
  3512  0716                     	;# 
  3513  0717                     	;# 
  3514  0718                     	;# 
  3515  0719                     	;# 
  3516  071A                     	;# 
  3517  071B                     	;# 
  3518  071C                     	;# 
  3519  071D                     	;# 
  3520  071E                     	;# 
  3521  0796                     	;# 
  3522  0797                     	;# 
  3523  0798                     	;# 
  3524  0799                     	;# 
  3525  079A                     	;# 
  3526  079B                     	;# 
  3527  080C                     	;# 
  3528  080D                     	;# 
  3529  080E                     	;# 
  3530  080F                     	;# 
  3531  0810                     	;# 
  3532  0811                     	;# 
  3533  0812                     	;# 
  3534  0813                     	;# 
  3535  0814                     	;# 
  3536  081A                     	;# 
  3537  081B                     	;# 
  3538  081C                     	;# 
  3539  081D                     	;# 
  3540  081E                     	;# 
  3541  081F                     	;# 
  3542  088C                     	;# 
  3543  088D                     	;# 
  3544  088E                     	;# 
  3545  088F                     	;# 
  3546  0890                     	;# 
  3547  0891                     	;# 
  3548  0892                     	;# 
  3549  0893                     	;# 
  3550  0895                     	;# 
  3551  0896                     	;# 
  3552  0897                     	;# 
  3553  0898                     	;# 
  3554  0899                     	;# 
  3555  089A                     	;# 
  3556  089B                     	;# 
  3557  090C                     	;# 
  3558  090E                     	;# 
  3559  090F                     	;# 
  3560  091F                     	;# 
  3561  091F                     	;# 
  3562  098F                     	;# 
  3563  098F                     	;# 
  3564  0990                     	;# 
  3565  0991                     	;# 
  3566  0992                     	;# 
  3567  0993                     	;# 
  3568  0994                     	;# 
  3569  0995                     	;# 
  3570  0996                     	;# 
  3571  0997                     	;# 
  3572  0E0F                     	;# 
  3573  0E10                     	;# 
  3574  0E11                     	;# 
  3575  0E12                     	;# 
  3576  0E13                     	;# 
  3577  0E14                     	;# 
  3578  0E15                     	;# 
  3579  0E16                     	;# 
  3580  0E17                     	;# 
  3581  0E18                     	;# 
  3582  0E19                     	;# 
  3583  0E1A                     	;# 
  3584  0E1B                     	;# 
  3585  0E1C                     	;# 
  3586  0E1D                     	;# 
  3587  0E1E                     	;# 
  3588  0E1F                     	;# 
  3589  0E20                     	;# 
  3590  0E21                     	;# 
  3591  0E22                     	;# 
  3592  0E23                     	;# 
  3593  0E24                     	;# 
  3594  0E25                     	;# 
  3595  0E26                     	;# 
  3596  0E27                     	;# 
  3597  0E28                     	;# 
  3598  0E29                     	;# 
  3599  0E2A                     	;# 
  3600  0E2B                     	;# 
  3601  0E2C                     	;# 
  3602  0E2D                     	;# 
  3603  0E2E                     	;# 
  3604  0E2F                     	;# 
  3605  0E30                     	;# 
  3606  0E31                     	;# 
  3607  0E32                     	;# 
  3608  0E33                     	;# 
  3609  0E34                     	;# 
  3610  0E35                     	;# 
  3611  0E36                     	;# 
  3612  0E37                     	;# 
  3613  0E8F                     	;# 
  3614  0E90                     	;# 
  3615  0E91                     	;# 
  3616  0E92                     	;# 
  3617  0E93                     	;# 
  3618  0E94                     	;# 
  3619  0E95                     	;# 
  3620  0E96                     	;# 
  3621  0E97                     	;# 
  3622  0E9C                     	;# 
  3623  0E9D                     	;# 
  3624  0E9E                     	;# 
  3625  0EA1                     	;# 
  3626  0EA2                     	;# 
  3627  0EA3                     	;# 
  3628  0EA4                     	;# 
  3629  0EA5                     	;# 
  3630  0EA9                     	;# 
  3631  0EAA                     	;# 
  3632  0EAB                     	;# 
  3633  0EAC                     	;# 
  3634  0EB1                     	;# 
  3635  0EB2                     	;# 
  3636  0EB3                     	;# 
  3637  0EB8                     	;# 
  3638  0EB9                     	;# 
  3639  0EBA                     	;# 
  3640  0EBB                     	;# 
  3641  0EBC                     	;# 
  3642  0EBD                     	;# 
  3643  0EBE                     	;# 
  3644  0EC3                     	;# 
  3645  0EC5                     	;# 
  3646  0EC6                     	;# 
  3647  0EC7                     	;# 
  3648  0EC8                     	;# 
  3649  0EC9                     	;# 
  3650  0ECA                     	;# 
  3651  0ECB                     	;# 
  3652  0ECC                     	;# 
  3653  0F10                     	;# 
  3654  0F11                     	;# 
  3655  0F12                     	;# 
  3656  0F13                     	;# 
  3657  0F14                     	;# 
  3658  0F15                     	;# 
  3659  0F16                     	;# 
  3660  0F17                     	;# 
  3661  0F18                     	;# 
  3662  0F19                     	;# 
  3663  0F1A                     	;# 
  3664  0F1B                     	;# 
  3665  0F1C                     	;# 
  3666  0F1D                     	;# 
  3667  0F1E                     	;# 
  3668  0F1F                     	;# 
  3669  0F20                     	;# 
  3670  0F21                     	;# 
  3671  0F22                     	;# 
  3672  0F23                     	;# 
  3673  0F24                     	;# 
  3674  0F25                     	;# 
  3675  0F26                     	;# 
  3676  0F27                     	;# 
  3677  0F38                     	;# 
  3678  0F39                     	;# 
  3679  0F3A                     	;# 
  3680  0F3B                     	;# 
  3681  0F3C                     	;# 
  3682  0F3D                     	;# 
  3683  0F3E                     	;# 
  3684  0F3F                     	;# 
  3685  0F40                     	;# 
  3686  0F41                     	;# 
  3687  0F43                     	;# 
  3688  0F44                     	;# 
  3689  0F45                     	;# 
  3690  0F46                     	;# 
  3691  0F47                     	;# 
  3692  0F48                     	;# 
  3693  0F49                     	;# 
  3694  0F4A                     	;# 
  3695  0F4B                     	;# 
  3696  0F4C                     	;# 
  3697  0F4E                     	;# 
  3698  0F4F                     	;# 
  3699  0F50                     	;# 
  3700  0F51                     	;# 
  3701  0F52                     	;# 
  3702  0F53                     	;# 
  3703  0F54                     	;# 
  3704  0F55                     	;# 
  3705  0F56                     	;# 
  3706  0F57                     	;# 
  3707  0F65                     	;# 
  3708  0F68                     	;# 
  3709  0F69                     	;# 
  3710  0F6A                     	;# 
  3711  0F6B                     	;# 
  3712  0FE4                     	;# 
  3713  0FE5                     	;# 
  3714  0FE6                     	;# 
  3715  0FE7                     	;# 
  3716  0FE8                     	;# 
  3717  0FE9                     	;# 
  3718  0FEA                     	;# 
  3719  0FEB                     	;# 
  3720  0FED                     	;# 
  3721  0FEE                     	;# 
  3722  0FEF                     	;# 
  3723  0000                     	;# 
  3724  0001                     	;# 
  3725  0002                     	;# 
  3726  0003                     	;# 
  3727  0004                     	;# 
  3728  0005                     	;# 
  3729  0006                     	;# 
  3730  0007                     	;# 
  3731  0008                     	;# 
  3732  0009                     	;# 
  3733  000A                     	;# 
  3734  000B                     	;# 
  3735  000C                     	;# 
  3736  000D                     	;# 
  3737  000E                     	;# 
  3738  0010                     	;# 
  3739  0011                     	;# 
  3740  0012                     	;# 
  3741  0013                     	;# 
  3742  0016                     	;# 
  3743  0017                     	;# 
  3744  0018                     	;# 
  3745  001C                     	;# 
  3746  001C                     	;# 
  3747  001D                     	;# 
  3748  001D                     	;# 
  3749  001E                     	;# 
  3750  001F                     	;# 
  3751  008C                     	;# 
  3752  008C                     	;# 
  3753  008D                     	;# 
  3754  008E                     	;# 
  3755  008E                     	;# 
  3756  008F                     	;# 
  3757  0090                     	;# 
  3758  0090                     	;# 
  3759  0091                     	;# 
  3760  0093                     	;# 
  3761  0094                     	;# 
  3762  0095                     	;# 
  3763  0096                     	;# 
  3764  0097                     	;# 
  3765  0098                     	;# 
  3766  0099                     	;# 
  3767  009A                     	;# 
  3768  009B                     	;# 
  3769  009C                     	;# 
  3770  009D                     	;# 
  3771  009E                     	;# 
  3772  010C                     	;# 
  3773  010D                     	;# 
  3774  010E                     	;# 
  3775  010E                     	;# 
  3776  010F                     	;# 
  3777  0110                     	;# 
  3778  0110                     	;# 
  3779  0111                     	;# 
  3780  0112                     	;# 
  3781  0112                     	;# 
  3782  0113                     	;# 
  3783  0114                     	;# 
  3784  0114                     	;# 
  3785  0115                     	;# 
  3786  0116                     	;# 
  3787  0116                     	;# 
  3788  0117                     	;# 
  3789  0119                     	;# 
  3790  0119                     	;# 
  3791  0119                     	;# 
  3792  011A                     	;# 
  3793  011A                     	;# 
  3794  011A                     	;# 
  3795  011B                     	;# 
  3796  011B                     	;# 
  3797  011B                     	;# 
  3798  011B                     	;# 
  3799  011B                     	;# 
  3800  011C                     	;# 
  3801  011C                     	;# 
  3802  011C                     	;# 
  3803  011D                     	;# 
  3804  011D                     	;# 
  3805  011D                     	;# 
  3806  011E                     	;# 
  3807  011E                     	;# 
  3808  011E                     	;# 
  3809  011F                     	;# 
  3810  011F                     	;# 
  3811  011F                     	;# 
  3812  011F                     	;# 
  3813  011F                     	;# 
  3814  018C                     	;# 
  3815  018D                     	;# 
  3816  018E                     	;# 
  3817  018F                     	;# 
  3818  0190                     	;# 
  3819  0191                     	;# 
  3820  0192                     	;# 
  3821  0196                     	;# 
  3822  0197                     	;# 
  3823  0198                     	;# 
  3824  0199                     	;# 
  3825  019A                     	;# 
  3826  019B                     	;# 
  3827  019C                     	;# 
  3828  020C                     	;# 
  3829  020C                     	;# 
  3830  020D                     	;# 
  3831  020E                     	;# 
  3832  020F                     	;# 
  3833  020F                     	;# 
  3834  0210                     	;# 
  3835  0210                     	;# 
  3836  0211                     	;# 
  3837  0211                     	;# 
  3838  0212                     	;# 
  3839  0212                     	;# 
  3840  0213                     	;# 
  3841  0214                     	;# 
  3842  0215                     	;# 
  3843  0215                     	;# 
  3844  0216                     	;# 
  3845  0216                     	;# 
  3846  0217                     	;# 
  3847  0217                     	;# 
  3848  0218                     	;# 
  3849  0218                     	;# 
  3850  0219                     	;# 
  3851  021A                     	;# 
  3852  021B                     	;# 
  3853  021B                     	;# 
  3854  021C                     	;# 
  3855  021C                     	;# 
  3856  021D                     	;# 
  3857  021D                     	;# 
  3858  021E                     	;# 
  3859  021F                     	;# 
  3860  028C                     	;# 
  3861  028C                     	;# 
  3862  028D                     	;# 
  3863  028D                     	;# 
  3864  028E                     	;# 
  3865  028F                     	;# 
  3866  0290                     	;# 
  3867  0290                     	;# 
  3868  0291                     	;# 
  3869  0292                     	;# 
  3870  0292                     	;# 
  3871  0293                     	;# 
  3872  0293                     	;# 
  3873  0294                     	;# 
  3874  0295                     	;# 
  3875  0296                     	;# 
  3876  0296                     	;# 
  3877  0297                     	;# 
  3878  0298                     	;# 
  3879  0298                     	;# 
  3880  0299                     	;# 
  3881  0299                     	;# 
  3882  029A                     	;# 
  3883  029B                     	;# 
  3884  029C                     	;# 
  3885  029C                     	;# 
  3886  029D                     	;# 
  3887  030C                     	;# 
  3888  030C                     	;# 
  3889  030D                     	;# 
  3890  030E                     	;# 
  3891  030F                     	;# 
  3892  0310                     	;# 
  3893  0310                     	;# 
  3894  0311                     	;# 
  3895  0312                     	;# 
  3896  0313                     	;# 
  3897  0314                     	;# 
  3898  0314                     	;# 
  3899  0315                     	;# 
  3900  0316                     	;# 
  3901  0317                     	;# 
  3902  0318                     	;# 
  3903  0318                     	;# 
  3904  0319                     	;# 
  3905  031A                     	;# 
  3906  031B                     	;# 
  3907  031C                     	;# 
  3908  031C                     	;# 
  3909  031D                     	;# 
  3910  031E                     	;# 
  3911  031F                     	;# 
  3912  038C                     	;# 
  3913  038D                     	;# 
  3914  038E                     	;# 
  3915  0390                     	;# 
  3916  0391                     	;# 
  3917  0392                     	;# 
  3918  040C                     	;# 
  3919  040D                     	;# 
  3920  040E                     	;# 
  3921  040F                     	;# 
  3922  0410                     	;# 
  3923  0411                     	;# 
  3924  0416                     	;# 
  3925  0416                     	;# 
  3926  0417                     	;# 
  3927  0418                     	;# 
  3928  0418                     	;# 
  3929  0419                     	;# 
  3930  041A                     	;# 
  3931  041A                     	;# 
  3932  041B                     	;# 
  3933  041C                     	;# 
  3934  041C                     	;# 
  3935  041D                     	;# 
  3936  041E                     	;# 
  3937  041F                     	;# 
  3938  048C                     	;# 
  3939  048C                     	;# 
  3940  048D                     	;# 
  3941  048E                     	;# 
  3942  048F                     	;# 
  3943  048F                     	;# 
  3944  0490                     	;# 
  3945  0491                     	;# 
  3946  0492                     	;# 
  3947  0492                     	;# 
  3948  0493                     	;# 
  3949  0494                     	;# 
  3950  0495                     	;# 
  3951  0495                     	;# 
  3952  0496                     	;# 
  3953  0497                     	;# 
  3954  0498                     	;# 
  3955  0499                     	;# 
  3956  049A                     	;# 
  3957  049B                     	;# 
  3958  049C                     	;# 
  3959  049D                     	;# 
  3960  050C                     	;# 
  3961  050C                     	;# 
  3962  050D                     	;# 
  3963  050E                     	;# 
  3964  050F                     	;# 
  3965  050F                     	;# 
  3966  0510                     	;# 
  3967  0511                     	;# 
  3968  0512                     	;# 
  3969  0512                     	;# 
  3970  0513                     	;# 
  3971  0514                     	;# 
  3972  0515                     	;# 
  3973  0515                     	;# 
  3974  0516                     	;# 
  3975  0517                     	;# 
  3976  0518                     	;# 
  3977  0519                     	;# 
  3978  051A                     	;# 
  3979  051B                     	;# 
  3980  051C                     	;# 
  3981  051D                     	;# 
  3982  058C                     	;# 
  3983  058C                     	;# 
  3984  058D                     	;# 
  3985  058E                     	;# 
  3986  058F                     	;# 
  3987  058F                     	;# 
  3988  0590                     	;# 
  3989  0591                     	;# 
  3990  0592                     	;# 
  3991  0593                     	;# 
  3992  060C                     	;# 
  3993  060D                     	;# 
  3994  060E                     	;# 
  3995  060F                     	;# 
  3996  0610                     	;# 
  3997  0611                     	;# 
  3998  0612                     	;# 
  3999  0613                     	;# 
  4000  0614                     	;# 
  4001  0616                     	;# 
  4002  0617                     	;# 
  4003  0618                     	;# 
  4004  0619                     	;# 
  4005  061A                     	;# 
  4006  061B                     	;# 
  4007  061C                     	;# 
  4008  061D                     	;# 
  4009  061E                     	;# 
  4010  068C                     	;# 
  4011  068D                     	;# 
  4012  068E                     	;# 
  4013  068F                     	;# 
  4014  0690                     	;# 
  4015  0691                     	;# 
  4016  0692                     	;# 
  4017  0693                     	;# 
  4018  0694                     	;# 
  4019  070C                     	;# 
  4020  070D                     	;# 
  4021  070E                     	;# 
  4022  070F                     	;# 
  4023  0710                     	;# 
  4024  0711                     	;# 
  4025  0712                     	;# 
  4026  0713                     	;# 
  4027  0714                     	;# 
  4028  0716                     	;# 
  4029  0717                     	;# 
  4030  0718                     	;# 
  4031  0719                     	;# 
  4032  071A                     	;# 
  4033  071B                     	;# 
  4034  071C                     	;# 
  4035  071D                     	;# 
  4036  071E                     	;# 
  4037  0796                     	;# 
  4038  0797                     	;# 
  4039  0798                     	;# 
  4040  0799                     	;# 
  4041  079A                     	;# 
  4042  079B                     	;# 
  4043  080C                     	;# 
  4044  080D                     	;# 
  4045  080E                     	;# 
  4046  080F                     	;# 
  4047  0810                     	;# 
  4048  0811                     	;# 
  4049  0812                     	;# 
  4050  0813                     	;# 
  4051  0814                     	;# 
  4052  081A                     	;# 
  4053  081B                     	;# 
  4054  081C                     	;# 
  4055  081D                     	;# 
  4056  081E                     	;# 
  4057  081F                     	;# 
  4058  088C                     	;# 
  4059  088D                     	;# 
  4060  088E                     	;# 
  4061  088F                     	;# 
  4062  0890                     	;# 
  4063  0891                     	;# 
  4064  0892                     	;# 
  4065  0893                     	;# 
  4066  0895                     	;# 
  4067  0896                     	;# 
  4068  0897                     	;# 
  4069  0898                     	;# 
  4070  0899                     	;# 
  4071  089A                     	;# 
  4072  089B                     	;# 
  4073  090C                     	;# 
  4074  090E                     	;# 
  4075  090F                     	;# 
  4076  091F                     	;# 
  4077  091F                     	;# 
  4078  098F                     	;# 
  4079  098F                     	;# 
  4080  0990                     	;# 
  4081  0991                     	;# 
  4082  0992                     	;# 
  4083  0993                     	;# 
  4084  0994                     	;# 
  4085  0995                     	;# 
  4086  0996                     	;# 
  4087  0997                     	;# 
  4088  0E0F                     	;# 
  4089  0E10                     	;# 
  4090  0E11                     	;# 
  4091  0E12                     	;# 
  4092  0E13                     	;# 
  4093  0E14                     	;# 
  4094  0E15                     	;# 
  4095  0E16                     	;# 
  4096  0E17                     	;# 
  4097  0E18                     	;# 
  4098  0E19                     	;# 
  4099  0E1A                     	;# 
  4100  0E1B                     	;# 
  4101  0E1C                     	;# 
  4102  0E1D                     	;# 
  4103  0E1E                     	;# 
  4104  0E1F                     	;# 
  4105  0E20                     	;# 
  4106  0E21                     	;# 
  4107  0E22                     	;# 
  4108  0E23                     	;# 
  4109  0E24                     	;# 
  4110  0E25                     	;# 
  4111  0E26                     	;# 
  4112  0E27                     	;# 
  4113  0E28                     	;# 
  4114  0E29                     	;# 
  4115  0E2A                     	;# 
  4116  0E2B                     	;# 
  4117  0E2C                     	;# 
  4118  0E2D                     	;# 
  4119  0E2E                     	;# 
  4120  0E2F                     	;# 
  4121  0E30                     	;# 
  4122  0E31                     	;# 
  4123  0E32                     	;# 
  4124  0E33                     	;# 
  4125  0E34                     	;# 
  4126  0E35                     	;# 
  4127  0E36                     	;# 
  4128  0E37                     	;# 
  4129  0E8F                     	;# 
  4130  0E90                     	;# 
  4131  0E91                     	;# 
  4132  0E92                     	;# 
  4133  0E93                     	;# 
  4134  0E94                     	;# 
  4135  0E95                     	;# 
  4136  0E96                     	;# 
  4137  0E97                     	;# 
  4138  0E9C                     	;# 
  4139  0E9D                     	;# 
  4140  0E9E                     	;# 
  4141  0EA1                     	;# 
  4142  0EA2                     	;# 
  4143  0EA3                     	;# 
  4144  0EA4                     	;# 
  4145  0EA5                     	;# 
  4146  0EA9                     	;# 
  4147  0EAA                     	;# 
  4148  0EAB                     	;# 
  4149  0EAC                     	;# 
  4150  0EB1                     	;# 
  4151  0EB2                     	;# 
  4152  0EB3                     	;# 
  4153  0EB8                     	;# 
  4154  0EB9                     	;# 
  4155  0EBA                     	;# 
  4156  0EBB                     	;# 
  4157  0EBC                     	;# 
  4158  0EBD                     	;# 
  4159  0EBE                     	;# 
  4160  0EC3                     	;# 
  4161  0EC5                     	;# 
  4162  0EC6                     	;# 
  4163  0EC7                     	;# 
  4164  0EC8                     	;# 
  4165  0EC9                     	;# 
  4166  0ECA                     	;# 
  4167  0ECB                     	;# 
  4168  0ECC                     	;# 
  4169  0F10                     	;# 
  4170  0F11                     	;# 
  4171  0F12                     	;# 
  4172  0F13                     	;# 
  4173  0F14                     	;# 
  4174  0F15                     	;# 
  4175  0F16                     	;# 
  4176  0F17                     	;# 
  4177  0F18                     	;# 
  4178  0F19                     	;# 
  4179  0F1A                     	;# 
  4180  0F1B                     	;# 
  4181  0F1C                     	;# 
  4182  0F1D                     	;# 
  4183  0F1E                     	;# 
  4184  0F1F                     	;# 
  4185  0F20                     	;# 
  4186  0F21                     	;# 
  4187  0F22                     	;# 
  4188  0F23                     	;# 
  4189  0F24                     	;# 
  4190  0F25                     	;# 
  4191  0F26                     	;# 
  4192  0F27                     	;# 
  4193  0F38                     	;# 
  4194  0F39                     	;# 
  4195  0F3A                     	;# 
  4196  0F3B                     	;# 
  4197  0F3C                     	;# 
  4198  0F3D                     	;# 
  4199  0F3E                     	;# 
  4200  0F3F                     	;# 
  4201  0F40                     	;# 
  4202  0F41                     	;# 
  4203  0F43                     	;# 
  4204  0F44                     	;# 
  4205  0F45                     	;# 
  4206  0F46                     	;# 
  4207  0F47                     	;# 
  4208  0F48                     	;# 
  4209  0F49                     	;# 
  4210  0F4A                     	;# 
  4211  0F4B                     	;# 
  4212  0F4C                     	;# 
  4213  0F4E                     	;# 
  4214  0F4F                     	;# 
  4215  0F50                     	;# 
  4216  0F51                     	;# 
  4217  0F52                     	;# 
  4218  0F53                     	;# 
  4219  0F54                     	;# 
  4220  0F55                     	;# 
  4221  0F56                     	;# 
  4222  0F57                     	;# 
  4223  0F65                     	;# 
  4224  0F68                     	;# 
  4225  0F69                     	;# 
  4226  0F6A                     	;# 
  4227  0F6B                     	;# 
  4228  0FE4                     	;# 
  4229  0FE5                     	;# 
  4230  0FE6                     	;# 
  4231  0FE7                     	;# 
  4232  0FE8                     	;# 
  4233  0FE9                     	;# 
  4234  0FEA                     	;# 
  4235  0FEB                     	;# 
  4236  0FED                     	;# 
  4237  0FEE                     	;# 
  4238  0FEF                     	;# 
  4239  0000                     	;# 
  4240  0001                     	;# 
  4241  0002                     	;# 
  4242  0003                     	;# 
  4243  0004                     	;# 
  4244  0005                     	;# 
  4245  0006                     	;# 
  4246  0007                     	;# 
  4247  0008                     	;# 
  4248  0009                     	;# 
  4249  000A                     	;# 
  4250  000B                     	;# 
  4251  000C                     	;# 
  4252  000D                     	;# 
  4253  000E                     	;# 
  4254  0010                     	;# 
  4255  0011                     	;# 
  4256  0012                     	;# 
  4257  0013                     	;# 
  4258  0016                     	;# 
  4259  0017                     	;# 
  4260  0018                     	;# 
  4261  001C                     	;# 
  4262  001C                     	;# 
  4263  001D                     	;# 
  4264  001D                     	;# 
  4265  001E                     	;# 
  4266  001F                     	;# 
  4267  008C                     	;# 
  4268  008C                     	;# 
  4269  008D                     	;# 
  4270  008E                     	;# 
  4271  008E                     	;# 
  4272  008F                     	;# 
  4273  0090                     	;# 
  4274  0090                     	;# 
  4275  0091                     	;# 
  4276  0093                     	;# 
  4277  0094                     	;# 
  4278  0095                     	;# 
  4279  0096                     	;# 
  4280  0097                     	;# 
  4281  0098                     	;# 
  4282  0099                     	;# 
  4283  009A                     	;# 
  4284  009B                     	;# 
  4285  009C                     	;# 
  4286  009D                     	;# 
  4287  009E                     	;# 
  4288  010C                     	;# 
  4289  010D                     	;# 
  4290  010E                     	;# 
  4291  010E                     	;# 
  4292  010F                     	;# 
  4293  0110                     	;# 
  4294  0110                     	;# 
  4295  0111                     	;# 
  4296  0112                     	;# 
  4297  0112                     	;# 
  4298  0113                     	;# 
  4299  0114                     	;# 
  4300  0114                     	;# 
  4301  0115                     	;# 
  4302  0116                     	;# 
  4303  0116                     	;# 
  4304  0117                     	;# 
  4305  0119                     	;# 
  4306  0119                     	;# 
  4307  0119                     	;# 
  4308  011A                     	;# 
  4309  011A                     	;# 
  4310  011A                     	;# 
  4311  011B                     	;# 
  4312  011B                     	;# 
  4313  011B                     	;# 
  4314  011B                     	;# 
  4315  011B                     	;# 
  4316  011C                     	;# 
  4317  011C                     	;# 
  4318  011C                     	;# 
  4319  011D                     	;# 
  4320  011D                     	;# 
  4321  011D                     	;# 
  4322  011E                     	;# 
  4323  011E                     	;# 
  4324  011E                     	;# 
  4325  011F                     	;# 
  4326  011F                     	;# 
  4327  011F                     	;# 
  4328  011F                     	;# 
  4329  011F                     	;# 
  4330  018C                     	;# 
  4331  018D                     	;# 
  4332  018E                     	;# 
  4333  018F                     	;# 
  4334  0190                     	;# 
  4335  0191                     	;# 
  4336  0192                     	;# 
  4337  0196                     	;# 
  4338  0197                     	;# 
  4339  0198                     	;# 
  4340  0199                     	;# 
  4341  019A                     	;# 
  4342  019B                     	;# 
  4343  019C                     	;# 
  4344  020C                     	;# 
  4345  020C                     	;# 
  4346  020D                     	;# 
  4347  020E                     	;# 
  4348  020F                     	;# 
  4349  020F                     	;# 
  4350  0210                     	;# 
  4351  0210                     	;# 
  4352  0211                     	;# 
  4353  0211                     	;# 
  4354  0212                     	;# 
  4355  0212                     	;# 
  4356  0213                     	;# 
  4357  0214                     	;# 
  4358  0215                     	;# 
  4359  0215                     	;# 
  4360  0216                     	;# 
  4361  0216                     	;# 
  4362  0217                     	;# 
  4363  0217                     	;# 
  4364  0218                     	;# 
  4365  0218                     	;# 
  4366  0219                     	;# 
  4367  021A                     	;# 
  4368  021B                     	;# 
  4369  021B                     	;# 
  4370  021C                     	;# 
  4371  021C                     	;# 
  4372  021D                     	;# 
  4373  021D                     	;# 
  4374  021E                     	;# 
  4375  021F                     	;# 
  4376  028C                     	;# 
  4377  028C                     	;# 
  4378  028D                     	;# 
  4379  028D                     	;# 
  4380  028E                     	;# 
  4381  028F                     	;# 
  4382  0290                     	;# 
  4383  0290                     	;# 
  4384  0291                     	;# 
  4385  0292                     	;# 
  4386  0292                     	;# 
  4387  0293                     	;# 
  4388  0293                     	;# 
  4389  0294                     	;# 
  4390  0295                     	;# 
  4391  0296                     	;# 
  4392  0296                     	;# 
  4393  0297                     	;# 
  4394  0298                     	;# 
  4395  0298                     	;# 
  4396  0299                     	;# 
  4397  0299                     	;# 
  4398  029A                     	;# 
  4399  029B                     	;# 
  4400  029C                     	;# 
  4401  029C                     	;# 
  4402  029D                     	;# 
  4403  030C                     	;# 
  4404  030C                     	;# 
  4405  030D                     	;# 
  4406  030E                     	;# 
  4407  030F                     	;# 
  4408  0310                     	;# 
  4409  0310                     	;# 
  4410  0311                     	;# 
  4411  0312                     	;# 
  4412  0313                     	;# 
  4413  0314                     	;# 
  4414  0314                     	;# 
  4415  0315                     	;# 
  4416  0316                     	;# 
  4417  0317                     	;# 
  4418  0318                     	;# 
  4419  0318                     	;# 
  4420  0319                     	;# 
  4421  031A                     	;# 
  4422  031B                     	;# 
  4423  031C                     	;# 
  4424  031C                     	;# 
  4425  031D                     	;# 
  4426  031E                     	;# 
  4427  031F                     	;# 
  4428  038C                     	;# 
  4429  038D                     	;# 
  4430  038E                     	;# 
  4431  0390                     	;# 
  4432  0391                     	;# 
  4433  0392                     	;# 
  4434  040C                     	;# 
  4435  040D                     	;# 
  4436  040E                     	;# 
  4437  040F                     	;# 
  4438  0410                     	;# 
  4439  0411                     	;# 
  4440  0416                     	;# 
  4441  0416                     	;# 
  4442  0417                     	;# 
  4443  0418                     	;# 
  4444  0418                     	;# 
  4445  0419                     	;# 
  4446  041A                     	;# 
  4447  041A                     	;# 
  4448  041B                     	;# 
  4449  041C                     	;# 
  4450  041C                     	;# 
  4451  041D                     	;# 
  4452  041E                     	;# 
  4453  041F                     	;# 
  4454  048C                     	;# 
  4455  048C                     	;# 
  4456  048D                     	;# 
  4457  048E                     	;# 
  4458  048F                     	;# 
  4459  048F                     	;# 
  4460  0490                     	;# 
  4461  0491                     	;# 
  4462  0492                     	;# 
  4463  0492                     	;# 
  4464  0493                     	;# 
  4465  0494                     	;# 
  4466  0495                     	;# 
  4467  0495                     	;# 
  4468  0496                     	;# 
  4469  0497                     	;# 
  4470  0498                     	;# 
  4471  0499                     	;# 
  4472  049A                     	;# 
  4473  049B                     	;# 
  4474  049C                     	;# 
  4475  049D                     	;# 
  4476  050C                     	;# 
  4477  050C                     	;# 
  4478  050D                     	;# 
  4479  050E                     	;# 
  4480  050F                     	;# 
  4481  050F                     	;# 
  4482  0510                     	;# 
  4483  0511                     	;# 
  4484  0512                     	;# 
  4485  0512                     	;# 
  4486  0513                     	;# 
  4487  0514                     	;# 
  4488  0515                     	;# 
  4489  0515                     	;# 
  4490  0516                     	;# 
  4491  0517                     	;# 
  4492  0518                     	;# 
  4493  0519                     	;# 
  4494  051A                     	;# 
  4495  051B                     	;# 
  4496  051C                     	;# 
  4497  051D                     	;# 
  4498  058C                     	;# 
  4499  058C                     	;# 
  4500  058D                     	;# 
  4501  058E                     	;# 
  4502  058F                     	;# 
  4503  058F                     	;# 
  4504  0590                     	;# 
  4505  0591                     	;# 
  4506  0592                     	;# 
  4507  0593                     	;# 
  4508  060C                     	;# 
  4509  060D                     	;# 
  4510  060E                     	;# 
  4511  060F                     	;# 
  4512  0610                     	;# 
  4513  0611                     	;# 
  4514  0612                     	;# 
  4515  0613                     	;# 
  4516  0614                     	;# 
  4517  0616                     	;# 
  4518  0617                     	;# 
  4519  0618                     	;# 
  4520  0619                     	;# 
  4521  061A                     	;# 
  4522  061B                     	;# 
  4523  061C                     	;# 
  4524  061D                     	;# 
  4525  061E                     	;# 
  4526  068C                     	;# 
  4527  068D                     	;# 
  4528  068E                     	;# 
  4529  068F                     	;# 
  4530  0690                     	;# 
  4531  0691                     	;# 
  4532  0692                     	;# 
  4533  0693                     	;# 
  4534  0694                     	;# 
  4535  070C                     	;# 
  4536  070D                     	;# 
  4537  070E                     	;# 
  4538  070F                     	;# 
  4539  0710                     	;# 
  4540  0711                     	;# 
  4541  0712                     	;# 
  4542  0713                     	;# 
  4543  0714                     	;# 
  4544  0716                     	;# 
  4545  0717                     	;# 
  4546  0718                     	;# 
  4547  0719                     	;# 
  4548  071A                     	;# 
  4549  071B                     	;# 
  4550  071C                     	;# 
  4551  071D                     	;# 
  4552  071E                     	;# 
  4553  0796                     	;# 
  4554  0797                     	;# 
  4555  0798                     	;# 
  4556  0799                     	;# 
  4557  079A                     	;# 
  4558  079B                     	;# 
  4559  080C                     	;# 
  4560  080D                     	;# 
  4561  080E                     	;# 
  4562  080F                     	;# 
  4563  0810                     	;# 
  4564  0811                     	;# 
  4565  0812                     	;# 
  4566  0813                     	;# 
  4567  0814                     	;# 
  4568  081A                     	;# 
  4569  081B                     	;# 
  4570  081C                     	;# 
  4571  081D                     	;# 
  4572  081E                     	;# 
  4573  081F                     	;# 
  4574  088C                     	;# 
  4575  088D                     	;# 
  4576  088E                     	;# 
  4577  088F                     	;# 
  4578  0890                     	;# 
  4579  0891                     	;# 
  4580  0892                     	;# 
  4581  0893                     	;# 
  4582  0895                     	;# 
  4583  0896                     	;# 
  4584  0897                     	;# 
  4585  0898                     	;# 
  4586  0899                     	;# 
  4587  089A                     	;# 
  4588  089B                     	;# 
  4589  090C                     	;# 
  4590  090E                     	;# 
  4591  090F                     	;# 
  4592  091F                     	;# 
  4593  091F                     	;# 
  4594  098F                     	;# 
  4595  098F                     	;# 
  4596  0990                     	;# 
  4597  0991                     	;# 
  4598  0992                     	;# 
  4599  0993                     	;# 
  4600  0994                     	;# 
  4601  0995                     	;# 
  4602  0996                     	;# 
  4603  0997                     	;# 
  4604  0E0F                     	;# 
  4605  0E10                     	;# 
  4606  0E11                     	;# 
  4607  0E12                     	;# 
  4608  0E13                     	;# 
  4609  0E14                     	;# 
  4610  0E15                     	;# 
  4611  0E16                     	;# 
  4612  0E17                     	;# 
  4613  0E18                     	;# 
  4614  0E19                     	;# 
  4615  0E1A                     	;# 
  4616  0E1B                     	;# 
  4617  0E1C                     	;# 
  4618  0E1D                     	;# 
  4619  0E1E                     	;# 
  4620  0E1F                     	;# 
  4621  0E20                     	;# 
  4622  0E21                     	;# 
  4623  0E22                     	;# 
  4624  0E23                     	;# 
  4625  0E24                     	;# 
  4626  0E25                     	;# 
  4627  0E26                     	;# 
  4628  0E27                     	;# 
  4629  0E28                     	;# 
  4630  0E29                     	;# 
  4631  0E2A                     	;# 
  4632  0E2B                     	;# 
  4633  0E2C                     	;# 
  4634  0E2D                     	;# 
  4635  0E2E                     	;# 
  4636  0E2F                     	;# 
  4637  0E30                     	;# 
  4638  0E31                     	;# 
  4639  0E32                     	;# 
  4640  0E33                     	;# 
  4641  0E34                     	;# 
  4642  0E35                     	;# 
  4643  0E36                     	;# 
  4644  0E37                     	;# 
  4645  0E8F                     	;# 
  4646  0E90                     	;# 
  4647  0E91                     	;# 
  4648  0E92                     	;# 
  4649  0E93                     	;# 
  4650  0E94                     	;# 
  4651  0E95                     	;# 
  4652  0E96                     	;# 
  4653  0E97                     	;# 
  4654  0E9C                     	;# 
  4655  0E9D                     	;# 
  4656  0E9E                     	;# 
  4657  0EA1                     	;# 
  4658  0EA2                     	;# 
  4659  0EA3                     	;# 
  4660  0EA4                     	;# 
  4661  0EA5                     	;# 
  4662  0EA9                     	;# 
  4663  0EAA                     	;# 
  4664  0EAB                     	;# 
  4665  0EAC                     	;# 
  4666  0EB1                     	;# 
  4667  0EB2                     	;# 
  4668  0EB3                     	;# 
  4669  0EB8                     	;# 
  4670  0EB9                     	;# 
  4671  0EBA                     	;# 
  4672  0EBB                     	;# 
  4673  0EBC                     	;# 
  4674  0EBD                     	;# 
  4675  0EBE                     	;# 
  4676  0EC3                     	;# 
  4677  0EC5                     	;# 
  4678  0EC6                     	;# 
  4679  0EC7                     	;# 
  4680  0EC8                     	;# 
  4681  0EC9                     	;# 
  4682  0ECA                     	;# 
  4683  0ECB                     	;# 
  4684  0ECC                     	;# 
  4685  0F10                     	;# 
  4686  0F11                     	;# 
  4687  0F12                     	;# 
  4688  0F13                     	;# 
  4689  0F14                     	;# 
  4690  0F15                     	;# 
  4691  0F16                     	;# 
  4692  0F17                     	;# 
  4693  0F18                     	;# 
  4694  0F19                     	;# 
  4695  0F1A                     	;# 
  4696  0F1B                     	;# 
  4697  0F1C                     	;# 
  4698  0F1D                     	;# 
  4699  0F1E                     	;# 
  4700  0F1F                     	;# 
  4701  0F20                     	;# 
  4702  0F21                     	;# 
  4703  0F22                     	;# 
  4704  0F23                     	;# 
  4705  0F24                     	;# 
  4706  0F25                     	;# 
  4707  0F26                     	;# 
  4708  0F27                     	;# 
  4709  0F38                     	;# 
  4710  0F39                     	;# 
  4711  0F3A                     	;# 
  4712  0F3B                     	;# 
  4713  0F3C                     	;# 
  4714  0F3D                     	;# 
  4715  0F3E                     	;# 
  4716  0F3F                     	;# 
  4717  0F40                     	;# 
  4718  0F41                     	;# 
  4719  0F43                     	;# 
  4720  0F44                     	;# 
  4721  0F45                     	;# 
  4722  0F46                     	;# 
  4723  0F47                     	;# 
  4724  0F48                     	;# 
  4725  0F49                     	;# 
  4726  0F4A                     	;# 
  4727  0F4B                     	;# 
  4728  0F4C                     	;# 
  4729  0F4E                     	;# 
  4730  0F4F                     	;# 
  4731  0F50                     	;# 
  4732  0F51                     	;# 
  4733  0F52                     	;# 
  4734  0F53                     	;# 
  4735  0F54                     	;# 
  4736  0F55                     	;# 
  4737  0F56                     	;# 
  4738  0F57                     	;# 
  4739  0F65                     	;# 
  4740  0F68                     	;# 
  4741  0F69                     	;# 
  4742  0F6A                     	;# 
  4743  0F6B                     	;# 
  4744  0FE4                     	;# 
  4745  0FE5                     	;# 
  4746  0FE6                     	;# 
  4747  0FE7                     	;# 
  4748  0FE8                     	;# 
  4749  0FE9                     	;# 
  4750  0FEA                     	;# 
  4751  0FEB                     	;# 
  4752  0FED                     	;# 
  4753  0FEE                     	;# 
  4754  0FEF                     	;# 
  4755  0000                     	;# 
  4756  0001                     	;# 
  4757  0002                     	;# 
  4758  0003                     	;# 
  4759  0004                     	;# 
  4760  0005                     	;# 
  4761  0006                     	;# 
  4762  0007                     	;# 
  4763  0008                     	;# 
  4764  0009                     	;# 
  4765  000A                     	;# 
  4766  000B                     	;# 
  4767  000C                     	;# 
  4768  000D                     	;# 
  4769  000E                     	;# 
  4770  0010                     	;# 
  4771  0011                     	;# 
  4772  0012                     	;# 
  4773  0013                     	;# 
  4774  0016                     	;# 
  4775  0017                     	;# 
  4776  0018                     	;# 
  4777  001C                     	;# 
  4778  001C                     	;# 
  4779  001D                     	;# 
  4780  001D                     	;# 
  4781  001E                     	;# 
  4782  001F                     	;# 
  4783  008C                     	;# 
  4784  008C                     	;# 
  4785  008D                     	;# 
  4786  008E                     	;# 
  4787  008E                     	;# 
  4788  008F                     	;# 
  4789  0090                     	;# 
  4790  0090                     	;# 
  4791  0091                     	;# 
  4792  0093                     	;# 
  4793  0094                     	;# 
  4794  0095                     	;# 
  4795  0096                     	;# 
  4796  0097                     	;# 
  4797  0098                     	;# 
  4798  0099                     	;# 
  4799  009A                     	;# 
  4800  009B                     	;# 
  4801  009C                     	;# 
  4802  009D                     	;# 
  4803  009E                     	;# 
  4804  010C                     	;# 
  4805  010D                     	;# 
  4806  010E                     	;# 
  4807  010E                     	;# 
  4808  010F                     	;# 
  4809  0110                     	;# 
  4810  0110                     	;# 
  4811  0111                     	;# 
  4812  0112                     	;# 
  4813  0112                     	;# 
  4814  0113                     	;# 
  4815  0114                     	;# 
  4816  0114                     	;# 
  4817  0115                     	;# 
  4818  0116                     	;# 
  4819  0116                     	;# 
  4820  0117                     	;# 
  4821  0119                     	;# 
  4822  0119                     	;# 
  4823  0119                     	;# 
  4824  011A                     	;# 
  4825  011A                     	;# 
  4826  011A                     	;# 
  4827  011B                     	;# 
  4828  011B                     	;# 
  4829  011B                     	;# 
  4830  011B                     	;# 
  4831  011B                     	;# 
  4832  011C                     	;# 
  4833  011C                     	;# 
  4834  011C                     	;# 
  4835  011D                     	;# 
  4836  011D                     	;# 
  4837  011D                     	;# 
  4838  011E                     	;# 
  4839  011E                     	;# 
  4840  011E                     	;# 
  4841  011F                     	;# 
  4842  011F                     	;# 
  4843  011F                     	;# 
  4844  011F                     	;# 
  4845  011F                     	;# 
  4846  018C                     	;# 
  4847  018D                     	;# 
  4848  018E                     	;# 
  4849  018F                     	;# 
  4850  0190                     	;# 
  4851  0191                     	;# 
  4852  0192                     	;# 
  4853  0196                     	;# 
  4854  0197                     	;# 
  4855  0198                     	;# 
  4856  0199                     	;# 
  4857  019A                     	;# 
  4858  019B                     	;# 
  4859  019C                     	;# 
  4860  020C                     	;# 
  4861  020C                     	;# 
  4862  020D                     	;# 
  4863  020E                     	;# 
  4864  020F                     	;# 
  4865  020F                     	;# 
  4866  0210                     	;# 
  4867  0210                     	;# 
  4868  0211                     	;# 
  4869  0211                     	;# 
  4870  0212                     	;# 
  4871  0212                     	;# 
  4872  0213                     	;# 
  4873  0214                     	;# 
  4874  0215                     	;# 
  4875  0215                     	;# 
  4876  0216                     	;# 
  4877  0216                     	;# 
  4878  0217                     	;# 
  4879  0217                     	;# 
  4880  0218                     	;# 
  4881  0218                     	;# 
  4882  0219                     	;# 
  4883  021A                     	;# 
  4884  021B                     	;# 
  4885  021B                     	;# 
  4886  021C                     	;# 
  4887  021C                     	;# 
  4888  021D                     	;# 
  4889  021D                     	;# 
  4890  021E                     	;# 
  4891  021F                     	;# 
  4892  028C                     	;# 
  4893  028C                     	;# 
  4894  028D                     	;# 
  4895  028D                     	;# 
  4896  028E                     	;# 
  4897  028F                     	;# 
  4898  0290                     	;# 
  4899  0290                     	;# 
  4900  0291                     	;# 
  4901  0292                     	;# 
  4902  0292                     	;# 
  4903  0293                     	;# 
  4904  0293                     	;# 
  4905  0294                     	;# 
  4906  0295                     	;# 
  4907  0296                     	;# 
  4908  0296                     	;# 
  4909  0297                     	;# 
  4910  0298                     	;# 
  4911  0298                     	;# 
  4912  0299                     	;# 
  4913  0299                     	;# 
  4914  029A                     	;# 
  4915  029B                     	;# 
  4916  029C                     	;# 
  4917  029C                     	;# 
  4918  029D                     	;# 
  4919  030C                     	;# 
  4920  030C                     	;# 
  4921  030D                     	;# 
  4922  030E                     	;# 
  4923  030F                     	;# 
  4924  0310                     	;# 
  4925  0310                     	;# 
  4926  0311                     	;# 
  4927  0312                     	;# 
  4928  0313                     	;# 
  4929  0314                     	;# 
  4930  0314                     	;# 
  4931  0315                     	;# 
  4932  0316                     	;# 
  4933  0317                     	;# 
  4934  0318                     	;# 
  4935  0318                     	;# 
  4936  0319                     	;# 
  4937  031A                     	;# 
  4938  031B                     	;# 
  4939  031C                     	;# 
  4940  031C                     	;# 
  4941  031D                     	;# 
  4942  031E                     	;# 
  4943  031F                     	;# 
  4944  038C                     	;# 
  4945  038D                     	;# 
  4946  038E                     	;# 
  4947  0390                     	;# 
  4948  0391                     	;# 
  4949  0392                     	;# 
  4950  040C                     	;# 
  4951  040D                     	;# 
  4952  040E                     	;# 
  4953  040F                     	;# 
  4954  0410                     	;# 
  4955  0411                     	;# 
  4956  0416                     	;# 
  4957  0416                     	;# 
  4958  0417                     	;# 
  4959  0418                     	;# 
  4960  0418                     	;# 
  4961  0419                     	;# 
  4962  041A                     	;# 
  4963  041A                     	;# 
  4964  041B                     	;# 
  4965  041C                     	;# 
  4966  041C                     	;# 
  4967  041D                     	;# 
  4968  041E                     	;# 
  4969  041F                     	;# 
  4970  048C                     	;# 
  4971  048C                     	;# 
  4972  048D                     	;# 
  4973  048E                     	;# 
  4974  048F                     	;# 
  4975  048F                     	;# 
  4976  0490                     	;# 
  4977  0491                     	;# 
  4978  0492                     	;# 
  4979  0492                     	;# 
  4980  0493                     	;# 
  4981  0494                     	;# 
  4982  0495                     	;# 
  4983  0495                     	;# 
  4984  0496                     	;# 
  4985  0497                     	;# 
  4986  0498                     	;# 
  4987  0499                     	;# 
  4988  049A                     	;# 
  4989  049B                     	;# 
  4990  049C                     	;# 
  4991  049D                     	;# 
  4992  050C                     	;# 
  4993  050C                     	;# 
  4994  050D                     	;# 
  4995  050E                     	;# 
  4996  050F                     	;# 
  4997  050F                     	;# 
  4998  0510                     	;# 
  4999  0511                     	;# 
  5000  0512                     	;# 
  5001  0512                     	;# 
  5002  0513                     	;# 
  5003  0514                     	;# 
  5004  0515                     	;# 
  5005  0515                     	;# 
  5006  0516                     	;# 
  5007  0517                     	;# 
  5008  0518                     	;# 
  5009  0519                     	;# 
  5010  051A                     	;# 
  5011  051B                     	;# 
  5012  051C                     	;# 
  5013  051D                     	;# 
  5014  058C                     	;# 
  5015  058C                     	;# 
  5016  058D                     	;# 
  5017  058E                     	;# 
  5018  058F                     	;# 
  5019  058F                     	;# 
  5020  0590                     	;# 
  5021  0591                     	;# 
  5022  0592                     	;# 
  5023  0593                     	;# 
  5024  060C                     	;# 
  5025  060D                     	;# 
  5026  060E                     	;# 
  5027  060F                     	;# 
  5028  0610                     	;# 
  5029  0611                     	;# 
  5030  0612                     	;# 
  5031  0613                     	;# 
  5032  0614                     	;# 
  5033  0616                     	;# 
  5034  0617                     	;# 
  5035  0618                     	;# 
  5036  0619                     	;# 
  5037  061A                     	;# 
  5038  061B                     	;# 
  5039  061C                     	;# 
  5040  061D                     	;# 
  5041  061E                     	;# 
  5042  068C                     	;# 
  5043  068D                     	;# 
  5044  068E                     	;# 
  5045  068F                     	;# 
  5046  0690                     	;# 
  5047  0691                     	;# 
  5048  0692                     	;# 
  5049  0693                     	;# 
  5050  0694                     	;# 
  5051  070C                     	;# 
  5052  070D                     	;# 
  5053  070E                     	;# 
  5054  070F                     	;# 
  5055  0710                     	;# 
  5056  0711                     	;# 
  5057  0712                     	;# 
  5058  0713                     	;# 
  5059  0714                     	;# 
  5060  0716                     	;# 
  5061  0717                     	;# 
  5062  0718                     	;# 
  5063  0719                     	;# 
  5064  071A                     	;# 
  5065  071B                     	;# 
  5066  071C                     	;# 
  5067  071D                     	;# 
  5068  071E                     	;# 
  5069  0796                     	;# 
  5070  0797                     	;# 
  5071  0798                     	;# 
  5072  0799                     	;# 
  5073  079A                     	;# 
  5074  079B                     	;# 
  5075  080C                     	;# 
  5076  080D                     	;# 
  5077  080E                     	;# 
  5078  080F                     	;# 
  5079  0810                     	;# 
  5080  0811                     	;# 
  5081  0812                     	;# 
  5082  0813                     	;# 
  5083  0814                     	;# 
  5084  081A                     	;# 
  5085  081B                     	;# 
  5086  081C                     	;# 
  5087  081D                     	;# 
  5088  081E                     	;# 
  5089  081F                     	;# 
  5090  088C                     	;# 
  5091  088D                     	;# 
  5092  088E                     	;# 
  5093  088F                     	;# 
  5094  0890                     	;# 
  5095  0891                     	;# 
  5096  0892                     	;# 
  5097  0893                     	;# 
  5098  0895                     	;# 
  5099  0896                     	;# 
  5100  0897                     	;# 
  5101  0898                     	;# 
  5102  0899                     	;# 
  5103  089A                     	;# 
  5104  089B                     	;# 
  5105  090C                     	;# 
  5106  090E                     	;# 
  5107  090F                     	;# 
  5108  091F                     	;# 
  5109  091F                     	;# 
  5110  098F                     	;# 
  5111  098F                     	;# 
  5112  0990                     	;# 
  5113  0991                     	;# 
  5114  0992                     	;# 
  5115  0993                     	;# 
  5116  0994                     	;# 
  5117  0995                     	;# 
  5118  0996                     	;# 
  5119  0997                     	;# 
  5120  0E0F                     	;# 
  5121  0E10                     	;# 
  5122  0E11                     	;# 
  5123  0E12                     	;# 
  5124  0E13                     	;# 
  5125  0E14                     	;# 
  5126  0E15                     	;# 
  5127  0E16                     	;# 
  5128  0E17                     	;# 
  5129  0E18                     	;# 
  5130  0E19                     	;# 
  5131  0E1A                     	;# 
  5132  0E1B                     	;# 
  5133  0E1C                     	;# 
  5134  0E1D                     	;# 
  5135  0E1E                     	;# 
  5136  0E1F                     	;# 
  5137  0E20                     	;# 
  5138  0E21                     	;# 
  5139  0E22                     	;# 
  5140  0E23                     	;# 
  5141  0E24                     	;# 
  5142  0E25                     	;# 
  5143  0E26                     	;# 
  5144  0E27                     	;# 
  5145  0E28                     	;# 
  5146  0E29                     	;# 
  5147  0E2A                     	;# 
  5148  0E2B                     	;# 
  5149  0E2C                     	;# 
  5150  0E2D                     	;# 
  5151  0E2E                     	;# 
  5152  0E2F                     	;# 
  5153  0E30                     	;# 
  5154  0E31                     	;# 
  5155  0E32                     	;# 
  5156  0E33                     	;# 
  5157  0E34                     	;# 
  5158  0E35                     	;# 
  5159  0E36                     	;# 
  5160  0E37                     	;# 
  5161  0E8F                     	;# 
  5162  0E90                     	;# 
  5163  0E91                     	;# 
  5164  0E92                     	;# 
  5165  0E93                     	;# 
  5166  0E94                     	;# 
  5167  0E95                     	;# 
  5168  0E96                     	;# 
  5169  0E97                     	;# 
  5170  0E9C                     	;# 
  5171  0E9D                     	;# 
  5172  0E9E                     	;# 
  5173  0EA1                     	;# 
  5174  0EA2                     	;# 
  5175  0EA3                     	;# 
  5176  0EA4                     	;# 
  5177  0EA5                     	;# 
  5178  0EA9                     	;# 
  5179  0EAA                     	;# 
  5180  0EAB                     	;# 
  5181  0EAC                     	;# 
  5182  0EB1                     	;# 
  5183  0EB2                     	;# 
  5184  0EB3                     	;# 
  5185  0EB8                     	;# 
  5186  0EB9                     	;# 
  5187  0EBA                     	;# 
  5188  0EBB                     	;# 
  5189  0EBC                     	;# 
  5190  0EBD                     	;# 
  5191  0EBE                     	;# 
  5192  0EC3                     	;# 
  5193  0EC5                     	;# 
  5194  0EC6                     	;# 
  5195  0EC7                     	;# 
  5196  0EC8                     	;# 
  5197  0EC9                     	;# 
  5198  0ECA                     	;# 
  5199  0ECB                     	;# 
  5200  0ECC                     	;# 
  5201  0F10                     	;# 
  5202  0F11                     	;# 
  5203  0F12                     	;# 
  5204  0F13                     	;# 
  5205  0F14                     	;# 
  5206  0F15                     	;# 
  5207  0F16                     	;# 
  5208  0F17                     	;# 
  5209  0F18                     	;# 
  5210  0F19                     	;# 
  5211  0F1A                     	;# 
  5212  0F1B                     	;# 
  5213  0F1C                     	;# 
  5214  0F1D                     	;# 
  5215  0F1E                     	;# 
  5216  0F1F                     	;# 
  5217  0F20                     	;# 
  5218  0F21                     	;# 
  5219  0F22                     	;# 
  5220  0F23                     	;# 
  5221  0F24                     	;# 
  5222  0F25                     	;# 
  5223  0F26                     	;# 
  5224  0F27                     	;# 
  5225  0F38                     	;# 
  5226  0F39                     	;# 
  5227  0F3A                     	;# 
  5228  0F3B                     	;# 
  5229  0F3C                     	;# 
  5230  0F3D                     	;# 
  5231  0F3E                     	;# 
  5232  0F3F                     	;# 
  5233  0F40                     	;# 
  5234  0F41                     	;# 
  5235  0F43                     	;# 
  5236  0F44                     	;# 
  5237  0F45                     	;# 
  5238  0F46                     	;# 
  5239  0F47                     	;# 
  5240  0F48                     	;# 
  5241  0F49                     	;# 
  5242  0F4A                     	;# 
  5243  0F4B                     	;# 
  5244  0F4C                     	;# 
  5245  0F4E                     	;# 
  5246  0F4F                     	;# 
  5247  0F50                     	;# 
  5248  0F51                     	;# 
  5249  0F52                     	;# 
  5250  0F53                     	;# 
  5251  0F54                     	;# 
  5252  0F55                     	;# 
  5253  0F56                     	;# 
  5254  0F57                     	;# 
  5255  0F65                     	;# 
  5256  0F68                     	;# 
  5257  0F69                     	;# 
  5258  0F6A                     	;# 
  5259  0F6B                     	;# 
  5260  0FE4                     	;# 
  5261  0FE5                     	;# 
  5262  0FE6                     	;# 
  5263  0FE7                     	;# 
  5264  0FE8                     	;# 
  5265  0FE9                     	;# 
  5266  0FEA                     	;# 
  5267  0FEB                     	;# 
  5268  0FED                     	;# 
  5269  0FEE                     	;# 
  5270  0FEF                     	;_Isamples
  5271                           
  5272                           	psect	idataBANK1
  5273  1E54                     __pidataBANK1:	
  5274                           
  5275                           ;initializer for _batteryTemp
  5276  1E54  34FA               	retlw	250
  5277  1E55  3400               	retlw	0
  5278                           
  5279                           	psect	idataBANK2
  5280  0004                     __pidataBANK2:	
  5281                           
  5282                           ;initializer for _Vchannels
  5283  0004  3415               	retlw	21
  5284  0005  3400               	retlw	0
  5285  0006  3411               	retlw	17
  5286  0007  3400               	retlw	0
  5287  0008  3417               	retlw	23
  5288  0009  3400               	retlw	0
  5289  000A  3413               	retlw	19
  5290  000B  3400               	retlw	0
  5291                           
  5292                           ;initializer for _Ichannels
  5293  000C  3414               	retlw	20
  5294  000D  3400               	retlw	0
  5295  000E  3410               	retlw	16
  5296  000F  3400               	retlw	0
  5297  0010  3416               	retlw	22
  5298  0011  3400               	retlw	0
  5299  0012  3412               	retlw	18
  5300  0013  3400               	retlw	0
  5301                           
  5302                           	psect	stringtext1
  5303  1000                     __pstringtext1:	
  5304  1000                     _fonts:	
  5305  1000  3400               	retlw	0
  5306  1001  3400               	retlw	0
  5307  1002  3400               	retlw	0
  5308  1003  3400               	retlw	0
  5309  1004  344E               	retlw	78
  5310  1005  3400               	retlw	0
  5311  1006  3406               	retlw	6
  5312  1007  3400               	retlw	0
  5313  1008  3406               	retlw	6
  5314  1009  34FF               	retlw	255
  5315  100A  34FF               	retlw	255
  5316  100B  34FF               	retlw	255
  5317  100C  3448               	retlw	72
  5318  100D  34D6               	retlw	214
  5319  100E  3424               	retlw	36
  5320  100F  3412               	retlw	18
  5321  1010  3408               	retlw	8
  5322  1011  3424               	retlw	36
  5323  1012  34FF               	retlw	255
  5324  1013  34FF               	retlw	255
  5325  1014  34FF               	retlw	255
  5326  1015  3400               	retlw	0
  5327  1016  3406               	retlw	6
  5328  1017  3400               	retlw	0
  5329  1018  3438               	retlw	56
  5330  1019  3444               	retlw	68
  5331  101A  3482               	retlw	130
  5332  101B  3482               	retlw	130
  5333  101C  3444               	retlw	68
  5334  101D  3438               	retlw	56
  5335  101E  3414               	retlw	20
  5336  101F  3408               	retlw	8
  5337  1020  343E               	retlw	62
  5338  1021  3410               	retlw	16
  5339  1022  3438               	retlw	56
  5340  1023  3410               	retlw	16
  5341  1024  34A0               	retlw	160
  5342  1025  3460               	retlw	96
  5343  1026  3400               	retlw	0
  5344  1027  3410               	retlw	16
  5345  1028  3410               	retlw	16
  5346  1029  3410               	retlw	16
  5347  102A  3460               	retlw	96
  5348  102B  3460               	retlw	96
  5349  102C  3400               	retlw	0
  5350  102D  3460               	retlw	96
  5351  102E  3418               	retlw	24
  5352  102F  3406               	retlw	6
  5353  1030  347C               	retlw	124
  5354  1031  3442               	retlw	66
  5355  1032  347C               	retlw	124
  5356  1033  3444               	retlw	68
  5357  1034  347E               	retlw	126
  5358  1035  3440               	retlw	64
  5359  1036  3464               	retlw	100
  5360  1037  3452               	retlw	82
  5361  1038  344C               	retlw	76
  5362  1039  344A               	retlw	74
  5363  103A  344A               	retlw	74
  5364  103B  3434               	retlw	52
  5365  103C  3438               	retlw	56
  5366  103D  3424               	retlw	36
  5367  103E  347E               	retlw	126
  5368  103F  344E               	retlw	78
  5369  1040  344A               	retlw	74
  5370  1041  3432               	retlw	50
  5371  1042  343C               	retlw	60
  5372  1043  344A               	retlw	74
  5373  1044  3432               	retlw	50
  5374  1045  3462               	retlw	98
  5375  1046  341A               	retlw	26
  5376  1047  3406               	retlw	6
  5377  1048  3476               	retlw	118
  5378  1049  344A               	retlw	74
  5379  104A  3476               	retlw	118
  5380  104B  344C               	retlw	76
  5381  104C  3452               	retlw	82
  5382  104D  343C               	retlw	60
  5383  104E  346C               	retlw	108
  5384  104F  346C               	retlw	108
  5385  1050  3400               	retlw	0
  5386  1051  34AC               	retlw	172
  5387  1052  346C               	retlw	108
  5388  1053  3400               	retlw	0
  5389  1054  3410               	retlw	16
  5390  1055  3428               	retlw	40
  5391  1056  3444               	retlw	68
  5392  1057  3428               	retlw	40
  5393  1058  3428               	retlw	40
  5394  1059  3428               	retlw	40
  5395  105A  3444               	retlw	68
  5396  105B  3428               	retlw	40
  5397  105C  3410               	retlw	16
  5398  105D  3402               	retlw	2
  5399  105E  3459               	retlw	89
  5400  105F  3406               	retlw	6
  5401  1060  34FF               	retlw	255
  5402  1061  34FF               	retlw	255
  5403  1062  34FF               	retlw	255
  5404  1063  347C               	retlw	124
  5405  1064  3412               	retlw	18
  5406  1065  347C               	retlw	124
  5407  1066  347E               	retlw	126
  5408  1067  345A               	retlw	90
  5409  1068  3434               	retlw	52
  5410  1069  343C               	retlw	60
  5411  106A  3442               	retlw	66
  5412  106B  3442               	retlw	66
  5413  106C  347E               	retlw	126
  5414  106D  3442               	retlw	66
  5415  106E  343C               	retlw	60
  5416  106F  347E               	retlw	126
  5417  1070  344A               	retlw	74
  5418  1071  3442               	retlw	66
  5419  1072  347E               	retlw	126
  5420  1073  340A               	retlw	10
  5421  1074  340A               	retlw	10
  5422  1075  343C               	retlw	60
  5423  1076  3452               	retlw	82
  5424  1077  3434               	retlw	52
  5425  1078  347E               	retlw	126
  5426  1079  3408               	retlw	8
  5427  107A  347E               	retlw	126
  5428  107B  3442               	retlw	66
  5429  107C  347E               	retlw	126
  5430  107D  3442               	retlw	66
  5431  107E  3430               	retlw	48
  5432  107F  3440               	retlw	64
  5433  1080  343E               	retlw	62
  5434  1081  347E               	retlw	126
  5435  1082  3418               	retlw	24
  5436  1083  3466               	retlw	102
  5437  1084  347E               	retlw	126
  5438  1085  3440               	retlw	64
  5439  1086  3440               	retlw	64
  5440  1087  347E               	retlw	126
  5441  1088  341C               	retlw	28
  5442  1089  347E               	retlw	126
  5443  108A  347E               	retlw	126
  5444  108B  3402               	retlw	2
  5445  108C  347E               	retlw	126
  5446  108D  343C               	retlw	60
  5447  108E  3442               	retlw	66
  5448  108F  343C               	retlw	60
  5449  1090  347E               	retlw	126
  5450  1091  3412               	retlw	18
  5451  1092  340C               	retlw	12
  5452  1093  347E               	retlw	126
  5453  1094  3462               	retlw	98
  5454  1095  34FE               	retlw	254
  5455  1096  347E               	retlw	126
  5456  1097  3432               	retlw	50
  5457  1098  344E               	retlw	78
  5458  1099  3444               	retlw	68
  5459  109A  344A               	retlw	74
  5460  109B  3432               	retlw	50
  5461  109C  3402               	retlw	2
  5462  109D  347E               	retlw	126
  5463  109E  3402               	retlw	2
  5464  109F  347E               	retlw	126
  5465  10A0  3440               	retlw	64
  5466  10A1  347E               	retlw	126
  5467  10A2  343E               	retlw	62
  5468  10A3  3440               	retlw	64
  5469  10A4  343E               	retlw	62
  5470  10A5  347E               	retlw	126
  5471  10A6  3438               	retlw	56
  5472  10A7  347E               	retlw	126
  5473  10A8  3466               	retlw	102
  5474  10A9  3418               	retlw	24
  5475  10AA  3466               	retlw	102
  5476  10AB  340E               	retlw	14
  5477  10AC  3470               	retlw	112
  5478  10AD  340E               	retlw	14
  5479  10AE  3462               	retlw	98
  5480  10AF  345A               	retlw	90
  5481  10B0  3446               	retlw	70
  5482  10B1  3400               	retlw	0
  5483  10B2  347E               	retlw	126
  5484  10B3  3442               	retlw	66
  5485  10B4  3406               	retlw	6
  5486  10B5  3418               	retlw	24
  5487  10B6  3460               	retlw	96
  5488  10B7  3442               	retlw	66
  5489  10B8  347E               	retlw	126
  5490  10B9  3400               	retlw	0
  5491  10BA  3404               	retlw	4
  5492  10BB  3402               	retlw	2
  5493  10BC  3404               	retlw	4
  5494  10BD  3440               	retlw	64
  5495  10BE  3440               	retlw	64
  5496  10BF  3440               	retlw	64
  5497  10C0  3400               	retlw	0
  5498  10C1  3402               	retlw	2
  5499  10C2  3404               	retlw	4
  5500  10C3  3474               	retlw	116
  5501  10C4  3454               	retlw	84
  5502  10C5  3478               	retlw	120
  5503  10C6  347E               	retlw	126
  5504  10C7  3448               	retlw	72
  5505  10C8  3430               	retlw	48
  5506  10C9  3430               	retlw	48
  5507  10CA  3448               	retlw	72
  5508  10CB  3448               	retlw	72
  5509  10CC  3430               	retlw	48
  5510  10CD  3448               	retlw	72
  5511  10CE  347E               	retlw	126
  5512  10CF  3438               	retlw	56
  5513  10D0  3454               	retlw	84
  5514  10D1  3458               	retlw	88
  5515  10D2  347C               	retlw	124
  5516  10D3  340A               	retlw	10
  5517  10D4  3402               	retlw	2
  5518  10D5  3498               	retlw	152
  5519  10D6  34A4               	retlw	164
  5520  10D7  347C               	retlw	124
  5521  10D8  347E               	retlw	126
  5522  10D9  3408               	retlw	8
  5523  10DA  3470               	retlw	112
  5524  10DB  3448               	retlw	72
  5525  10DC  347A               	retlw	122
  5526  10DD  3440               	retlw	64
  5527  10DE  3488               	retlw	136
  5528  10DF  34FA               	retlw	250
  5529  10E0  3400               	retlw	0
  5530  10E1  347E               	retlw	126
  5531  10E2  3418               	retlw	24
  5532  10E3  3464               	retlw	100
  5533  10E4  3442               	retlw	66
  5534  10E5  347E               	retlw	126
  5535  10E6  3440               	retlw	64
  5536  10E7  347C               	retlw	124
  5537  10E8  3438               	retlw	56
  5538  10E9  347C               	retlw	124
  5539  10EA  347C               	retlw	124
  5540  10EB  3404               	retlw	4
  5541  10EC  3478               	retlw	120
  5542  10ED  3438               	retlw	56
  5543  10EE  3444               	retlw	68
  5544  10EF  3438               	retlw	56
  5545  10F0  34FC               	retlw	252
  5546  10F1  3424               	retlw	36
  5547  10F2  3418               	retlw	24
  5548  10F3  3418               	retlw	24
  5549  10F4  3424               	retlw	36
  5550  10F5  34FC               	retlw	252
  5551  10F6  3478               	retlw	120
  5552  10F7  3404               	retlw	4
  5553  10F8  3404               	retlw	4
  5554  10F9  3448               	retlw	72
  5555  10FA  3454               	retlw	84
  5556  10FB  3424               	retlw	36
  5557  10FC  3404               	retlw	4
  5558  10FD  343E               	retlw	62
  5559  10FE  3444               	retlw	68
  5560  10FF  347C               	retlw	124
  5561  1100  3440               	retlw	64
  5562  1101  347C               	retlw	124
  5563  1102  343C               	retlw	60
  5564  1103  3440               	retlw	64
  5565  1104  343C               	retlw	60
  5566  1105  347C               	retlw	124
  5567  1106  3430               	retlw	48
  5568  1107  347C               	retlw	124
  5569  1108  346C               	retlw	108
  5570  1109  3410               	retlw	16
  5571  110A  346C               	retlw	108
  5572  110B  349C               	retlw	156
  5573  110C  34A0               	retlw	160
  5574  110D  347C               	retlw	124
  5575  110E  3464               	retlw	100
  5576  110F  3454               	retlw	84
  5577  1110  344C               	retlw	76
  5578  1111  340C               	retlw	12
  5579  1112  3412               	retlw	18
  5580  1113  340C               	retlw	12
  5581  1114  34FF               	retlw	255
  5582  1115  34FF               	retlw	255
  5583  1116  34FF               	retlw	255
  5584  1117  34FF               	retlw	255
  5585  1118  34FF               	retlw	255
  5586  1119  34FF               	retlw	255
  5587  111A  34FF               	retlw	255
  5588  111B  34FF               	retlw	255
  5589  111C  34FF               	retlw	255
  5590  111D  34FF               	retlw	255
  5591  111E  34FF               	retlw	255
  5592  111F  34FF               	retlw	255
  5593  1120  34FF               	retlw	255
  5594  1121  34FF               	retlw	255
  5595  1122  34FF               	retlw	255
  5596  1123  34FF               	retlw	255
  5597  1124  34FF               	retlw	255
  5598  1125  34FF               	retlw	255
  5599  1126  34FC               	retlw	252
  5600  1127  3440               	retlw	64
  5601  1128  347C               	retlw	124
  5602  1129  34FF               	retlw	255
  5603  112A  34FF               	retlw	255
  5604  112B  34FF               	retlw	255
  5605  112C  34FF               	retlw	255
  5606  112D  34FF               	retlw	255
  5607  112E  34FF               	retlw	255
  5608  112F                     __end_of_fonts:	
  5609                           
  5610                           	psect	stringtext2
  5611  1800                     __pstringtext2:	
  5612  1800                     log@coeff:	
  5613  1800  3400               	retlw	0
  5614  1801  3400               	retlw	0
  5615  1802  3400               	retlw	0
  5616  1803  3400               	retlw	0
  5617  1804  3480               	retlw	128
  5618  1805  343F               	retlw	63
  5619  1806  34F0               	retlw	240
  5620  1807  34FF               	retlw	255
  5621  1808  34BE               	retlw	190
  5622  1809  34E2               	retlw	226
  5623  180A  34A9               	retlw	169
  5624  180B  343E               	retlw	62
  5625  180C  3483               	retlw	131
  5626  180D  3476               	retlw	118
  5627  180E  34BE               	retlw	190
  5628  180F  34AE               	retlw	174
  5629  1810  342B               	retlw	43
  5630  1811  343E               	retlw	62
  5631  1812  343C               	retlw	60
  5632  1813  34C3               	retlw	195
  5633  1814  34BD               	retlw	189
  5634  1815  34D2               	retlw	210
  5635  1816  3413               	retlw	19
  5636  1817  343D               	retlw	61
  5637  1818  3478               	retlw	120
  5638  1819  34D3               	retlw	211
  5639  181A  34BB               	retlw	187
  5640  181B                     __end_oflog@coeff:	
  5641  0013                     _TRISC	set	19
  5642  0012                     _TRISB	set	18
  5643  0011                     _TRISA	set	17
  5644  0018                     _LATC	set	24
  5645  0017                     _LATB	set	23
  5646  0016                     _LATA	set	22
  5647  0016                     _LATAbits	set	22
  5648  0011                     _TRISAbits	set	17
  5649  005F                     _GIE	set	95
  5650  00B5                     _LATA5	set	181
  5651  006A                     _RB2	set	106
  5652  0093                     _ADCON0	set	147
  5653  009D                     _ADACQ	set	157
  5654  009C                     _ADPRE	set	156
  5655  009B                     _ADCAP	set	155
  5656  0098                     _ADCLK	set	152
  5657  0097                     _ADSTAT	set	151
  5658  0099                     _ADACT	set	153
  5659  0096                     _ADCON3	set	150
  5660  0095                     _ADCON2	set	149
  5661  0094                     _ADCON1	set	148
  5662  008C                     _ADRESL	set	140
  5663  008D                     _ADRESH	set	141
  5664  0093                     _ADCON0bits	set	147
  5665  009E                     _ADPCH	set	158
  5666  009A                     _ADREF	set	154
  5667  0113                     _ADSTPTH	set	275
  5668  0112                     _ADSTPTL	set	274
  5669  0111                     _ADUTHH	set	273
  5670  0110                     _ADUTHL	set	272
  5671  010F                     _ADLTHH	set	271
  5672  010E                     _ADLTHL	set	270
  5673  010D                     _ADRPT	set	269
  5674  021E                     _CCPTMRS0bits	set	542
  5675  021F                     _CCPTMRS1bits	set	543
  5676  0294                     _T4CONbits	set	660
  5677  0292                     _T4TMR	set	658
  5678  0293                     _T4PR	set	659
  5679  0297                     _T4RST	set	663
  5680  0295                     _T4HLT	set	661
  5681  0296                     _T4CLKCON	set	662
  5682  0294                     _T4CON	set	660
  5683  028E                     _T2CONbits	set	654
  5684  028C                     _T2TMR	set	652
  5685  028D                     _T2PR	set	653
  5686  0291                     _T2RST	set	657
  5687  028F                     _T2HLT	set	655
  5688  0290                     _T2CLKCON	set	656
  5689  028E                     _T2CON	set	654
  5690  030C                     _CCPR1L	set	780
  5691  030D                     _CCPR1H	set	781
  5692  030E                     _CCP1CONbits	set	782
  5693  0390                     _PWM7DCL	set	912
  5694  0391                     _PWM7DCH	set	913
  5695  0392                     _PWM7CON	set	914
  5696  038C                     _PWM6DCL	set	908
  5697  038D                     _PWM6DCH	set	909
  5698  038E                     _PWM6CON	set	910
  5699  0710                     _PIR4bits	set	1808
  5700  0716                     _PIE0bits	set	1814
  5701  0892                     _OSCTUNE	set	2194
  5702  0893                     _OSCFRQ	set	2195
  5703  0891                     _OSCEN	set	2193
  5704  088F                     _OSCCON3	set	2191
  5705  088D                     _OSCCON1	set	2189
  5706  090C                     _FVRCON	set	2316
  5707  0E8F                     _PPSLOCKbits	set	3727
  5708  0E8F                     _PPSLOCK	set	3727
  5709  0F18                     _RB0PPS	set	3864
  5710  0F17                     _RA7PPS	set	3863
  5711  0F16                     _RA6PPS	set	3862
  5712  0F4E                     _ANSELC	set	3918
  5713  0F43                     _ANSELB	set	3907
  5714  0F38                     _ANSELA	set	3896
  5715  0F65                     _WPUE	set	3941
  5716  0F4F                     _WPUC	set	3919
  5717  0F44                     _WPUB	set	3908
  5718  0F39                     _WPUA	set	3897
  5719  181B                     STR_3:	
  5720  181B  3452               	retlw	82	;'R'
  5721  181C  3465               	retlw	101	;'e'
  5722  181D  3466               	retlw	102	;'f'
  5723  181E  343A               	retlw	58	;':'
  5724  181F  3400               	retlw	0
  5725                           
  5726                           	psect	stringtext3
  5727  1820                     __pstringtext3:	
  5728  1820                     STR_2:	
  5729  1820  344F               	retlw	79	;'O'
  5730  1821  3475               	retlw	117	;'u'
  5731  1822  3474               	retlw	116	;'t'
  5732  1823  343A               	retlw	58	;':'
  5733  1824  3400               	retlw	0
  5734                           
  5735                           	psect	stringtext4
  5736  1825                     __pstringtext4:	
  5737  1825                     STR_1:	
  5738  1825  3449               	retlw	73	;'I'
  5739  1826  346E               	retlw	110	;'n'
  5740  1827  343A               	retlw	58	;':'
  5741  1828  3400               	retlw	0
  5742                           
  5743                           	psect	stringtext5
  5744  0000                     __pstringtext5:	
  5745                           
  5746                           ; #config settings
  5747  0000                     
  5748                           	psect	cinit
  5749  07B0                     start_initialization:	
  5750  07B0                     __initialization:		;BIGRAM
  5751                           
  5752                           ; Initialize objects allocated to BANK1
  5753  07B0  0021               	movlb	1	; select bank1
  5754  07B1  319E  2654  3187   	fcall	__pidataBANK1	;fetch initializer
  5755  07B4  00ED               	movwf	__pdataBANK1& (0+127)
  5756  07B5  319E  2655  3187   	fcall	__pidataBANK1+1	;fetch initializer
  5757  07B8  00EE               	movwf	(__pdataBANK1+1)& (0+127)
  5758                           
  5759                           ; Initialize objects allocated to BANK2
  5760  07B9  3004               	movlw	low __pidataBANK2
  5761  07BA  0084               	movwf	4
  5762  07BB  3080               	movlw	(high __pidataBANK2)| (0+128)
  5763  07BC  0085               	movwf	5
  5764  07BD  3051               	movlw	low __pdataBANK2
  5765  07BE  0086               	movwf	6
  5766  07BF  3001               	movlw	high __pdataBANK2
  5767  07C0  0087               	movwf	7
  5768  07C1  3000               	movlw	0
  5769  07C2  00FF               	movwf	btemp+1
  5770  07C3  3010               	movlw	16
  5771  07C4  319E  266B  3187   	fcall	init_ram
  5772                           
  5773                           ; Clear objects allocated to BIGRAM
  5774  07C7  3060               	movlw	low (0+8800)
  5775  07C8  0084               	movwf	4
  5776  07C9  3022               	movlw	high (0+8800)
  5777  07CA  0085               	movwf	5
  5778  07CB  3090               	movlw	144
  5779  07CC  00FE               	movwf	btemp
  5780  07CD  3001               	movlw	1
  5781  07CE  00FF               	movwf	btemp+1
  5782  07CF  319E  265F  3187   	fcall	clear_ram0
  5783                           
  5784                           ; Clear objects allocated to BANK0
  5785  07D2  305B               	movlw	low __pbssBANK0
  5786  07D3  0084               	movwf	4
  5787  07D4  3000               	movlw	high __pbssBANK0
  5788  07D5  0085               	movwf	5
  5789  07D6  3011               	movlw	17
  5790  07D7  00FE               	movwf	btemp
  5791  07D8  3000               	movlw	0
  5792  07D9  00FF               	movwf	btemp+1
  5793  07DA  319E  265F  3187   	fcall	clear_ram0
  5794                           
  5795                           ; Clear objects allocated to BANK1
  5796  07DD  30A0               	movlw	low __pbssBANK1
  5797  07DE  0084               	movwf	4
  5798  07DF  3000               	movlw	high __pbssBANK1
  5799  07E0  0085               	movwf	5
  5800  07E1  3030               	movlw	48
  5801  07E2  00FE               	movwf	btemp
  5802  07E3  3000               	movlw	0
  5803  07E4  00FF               	movwf	btemp+1
  5804  07E5  319E  265F  3187   	fcall	clear_ram0
  5805                           
  5806                           ; Clear objects allocated to BANK2
  5807  07E8  3020               	movlw	low __pbssBANK2
  5808  07E9  0084               	movwf	4
  5809  07EA  3001               	movlw	high __pbssBANK2
  5810  07EB  0085               	movwf	5
  5811  07EC  3031               	movlw	49
  5812  07ED  00FE               	movwf	btemp
  5813  07EE  3000               	movlw	0
  5814  07EF  00FF               	movwf	btemp+1
  5815  07F0  319E  265F  3187   	fcall	clear_ram0
  5816                           
  5817                           ; Clear objects allocated to BANK3
  5818  07F3  30A0               	movlw	low __pbssBANK3
  5819  07F4  0084               	movwf	4
  5820  07F5  3001               	movlw	high __pbssBANK3
  5821  07F6  0085               	movwf	5
  5822  07F7  3028               	movlw	40
  5823  07F8  00FE               	movwf	btemp
  5824  07F9  3000               	movlw	0
  5825  07FA  00FF               	movwf	btemp+1
  5826  07FB  319E  265F         	fcall	clear_ram0
  5827  07FD                     end_of_initialization:	
  5828                           ;End of C runtime variable initialization code
  5829                           
  5830  07FD                     __end_of__initialization:	
  5831  07FD  0020               	movlb	0
  5832  07FE  3180  289B         	ljmp	_main	;jump to C main() function
  5833                           
  5834                           	psect	bssBANK0
  5835  005B                     __pbssBANK0:	
  5836  005B                     _IminCount:	
  5837  005B                     	ds	4
  5838  005F                     _readButtons:	
  5839  005F                     	ds	2
  5840  0061                     _floatCount:	
  5841  0061                     	ds	2
  5842  0063                     _VsampleIndex:	
  5843  0063                     	ds	2
  5844  0065                     _IsampleIndex:	
  5845  0065                     	ds	2
  5846  0067                     _j:	
  5847  0067                     	ds	1
  5848  0068                     _lastButton:	
  5849  0068                     	ds	1
  5850  0069                     _button:	
  5851  0069                     	ds	1
  5852  006A                     _otherState:	
  5853  006A                     	ds	1
  5854  006B                     _x:	
  5855  006B                     	ds	1
  5856                           
  5857                           	psect	bssBANK1
  5858  00A0                     __pbssBANK1:	
  5859  00A0                     _Ianalogs:	
  5860  00A0                     	ds	8
  5861  00A8                     _current:	
  5862  00A8                     	ds	8
  5863  00B0                     _voltage:	
  5864  00B0                     	ds	8
  5865  00B8                     _stateCounter:	
  5866  00B8                     	ds	4
  5867  00BC                     _Vref:	
  5868  00BC                     	ds	4
  5869  00C0                     _Iref:	
  5870  00C0                     	ds	4
  5871  00C4                     _errno:	
  5872  00C4                     	ds	2
  5873  00C6                     _Iout:	
  5874  00C6                     	ds	2
  5875  00C8                     _cc_cv:	
  5876  00C8                     	ds	2
  5877  00CA                     _VHoldMode:	
  5878  00CA                     	ds	2
  5879  00CC                     _Imode:	
  5880  00CC                     	ds	2
  5881  00CE                     _batteryState:	
  5882  00CE                     	ds	2
  5883                           
  5884                           	psect	dataBANK1
  5885  00ED                     __pdataBANK1:	
  5886  00ED                     _batteryTemp:	
  5887  00ED                     	ds	2
  5888                           
  5889                           	psect	bssBANK2
  5890  0120                     __pbssBANK2:	
  5891  0120                     _Vtotals:	
  5892  0120                     	ds	16
  5893  0130                     _Itotals:	
  5894  0130                     	ds	16
  5895  0140                     _Vanalogs:	
  5896  0140                     	ds	8
  5897  0148                     LCDWriteInt@F14392:	
  5898  0148                     	ds	5
  5899  014D                     _Imin:	
  5900  014D                     	ds	4
  5901                           
  5902                           	psect	dataBANK2
  5903  0151                     __pdataBANK2:	
  5904  0151                     _Vchannels:	
  5905  0151                     	ds	8
  5906  0159                     _Ichannels:	
  5907  0159                     	ds	8
  5908                           
  5909                           	psect	bssBANK3
  5910  01A0                     __pbssBANK3:	
  5911  01A0                     _Vsamples:	
  5912  01A0                     	ds	40
  5913                           
  5914                           	psect	inittext
  5915  1E6B                     init_ram:	
  5916  1E6B  00FE               	movwf	126
  5917  1E6C                     initloop:	
  5918  1E6C  0012               	moviw fsr0++
  5919  1E6D  001E               	movwi fsr1++
  5920  1E6E  3001               	movlw	1
  5921  1E6F  02FE               	subwf	126,f
  5922  1E70  3000               	movlw	0
  5923  1E71  3BFF               	subwfb	127,f
  5924  1E72  087F               	movf	127,w
  5925  1E73  047E               	iorwf	126,w
  5926  1E74  1903               	btfsc	3,2
  5927  1E75  3400               	retlw	0
  5928  1E76  2E6C               	goto	initloop
  5929                           
  5930                           	psect	clrtext
  5931  1E5F                     clear_ram0:	
  5932                           ;	Called with FSR0 containing the base address, and
  5933                           ;	btemp/btemp+1 has the size to clear
  5934                           
  5935  1E5F  0064               	clrwdt	;clear the watchdog before getting into this loop
  5936  1E60                     clrloop0:	
  5937  1E60  0180               	clrf	0	;clear RAM location pointed to by FSR
  5938  1E61  3101               	addfsr 0,1
  5939  1E62  3001               	movlw	1
  5940  1E63  02FE               	subwf	126,f
  5941  1E64  3000               	movlw	0
  5942  1E65  3BFF               	subwfb	127,f
  5943  1E66  087F               	movf	127,w
  5944  1E67  047E               	iorwf	126,w
  5945  1E68  1903               	btfsc	3,2
  5946  1E69  3400               	retlw	0	;all done for this memory range, return
  5947  1E6A  2E60               	goto	clrloop0	;have we reached the end yet?
  5948                           
  5949                           	psect	cstackBANK1
  5950  00D0                     __pcstackBANK1:	
  5951  00D0                     main@efficiency:	
  5952                           
  5953                           ; 3 bytes @ 0x0
  5954  00D0                     	ds	3
  5955  00D3                     main@faultCount:	
  5956                           
  5957                           ; 2 bytes @ 0x3
  5958  00D3                     	ds	2
  5959  00D5                     main@faultNotReset:	
  5960                           
  5961                           ; 2 bytes @ 0x5
  5962  00D5                     	ds	2
  5963  00D7                     main@displayRefresh:	
  5964                           
  5965                           ; 1 bytes @ 0x7
  5966  00D7                     	ds	1
  5967  00D8                     main@fastLoop:	
  5968                           
  5969                           ; 1 bytes @ 0x8
  5970  00D8                     	ds	1
  5971  00D9                     main@slowLoop:	
  5972                           
  5973                           ; 1 bytes @ 0x9
  5974  00D9                     	ds	1
  5975  00DA                     main@MPPT0:	
  5976                           
  5977                           ; 2 bytes @ 0xA
  5978  00DA                     	ds	2
  5979  00DC                     main@menuButton:	
  5980                           
  5981                           ; 1 bytes @ 0xC
  5982  00DC                     	ds	1
  5983  00DD                     main@MPPT1:	
  5984                           
  5985                           ; 2 bytes @ 0xD
  5986  00DD                     	ds	2
  5987  00DF                     main@largerIOut:	
  5988                           
  5989                           ; 2 bytes @ 0xF
  5990  00DF                     	ds	2
  5991  00E1                     main@tempFanOutput:	
  5992                           
  5993                           ; 2 bytes @ 0x11
  5994  00E1                     	ds	2
  5995  00E3                     main@dutyCycle1:	
  5996                           
  5997                           ; 2 bytes @ 0x13
  5998  00E3                     	ds	2
  5999  00E5                     _main$1324:	
  6000                           
  6001                           ; 3 bytes @ 0x15
  6002  00E5                     	ds	3
  6003  00E8                     main@dutyCycle6:	
  6004                           
  6005                           ; 2 bytes @ 0x18
  6006  00E8                     	ds	2
  6007  00EA                     main@dutyCycle7:	
  6008                           
  6009                           ; 2 bytes @ 0x1A
  6010  00EA                     	ds	2
  6011  00EC                     main@j:	
  6012                           
  6013                           ; 1 bytes @ 0x1C
  6014  00EC                     	ds	1
  6015                           
  6016                           	psect	cstackCOMMON
  6017  0070                     __pcstackCOMMON:	
  6018  0070                     ?_SYSTEM_Initialize:	
  6019  0070                     ?_LCDClear:	
  6020                           ; 1 bytes @ 0x0
  6021                           
  6022  0070                     ?_PWM6_LoadDutyValue:	
  6023                           ; 1 bytes @ 0x0
  6024                           
  6025  0070                     ?_PWM7_LoadDutyValue:	
  6026                           ; 1 bytes @ 0x0
  6027                           
  6028  0070                     ?_readButton:	
  6029                           ; 1 bytes @ 0x0
  6030                           
  6031  0070                     ?_LCDInit:	
  6032                           ; 1 bytes @ 0x0
  6033                           
  6034  0070                     ?_PWM1_LoadDutyValue:	
  6035                           ; 1 bytes @ 0x0
  6036                           
  6037  0070                     ?_Battery_State_Machine:	
  6038                           ; 1 bytes @ 0x0
  6039                           
  6040  0070                     ?_LCDWriteCharacter:	
  6041                           ; 1 bytes @ 0x0
  6042                           
  6043  0070                     ?_cc_cv_mode:	
  6044                           ; 1 bytes @ 0x0
  6045                           
  6046  0070                     ?_calculateCurrent0:	
  6047                           ; 1 bytes @ 0x0
  6048                           
  6049  0070                     ?_calculateCurrent2:	
  6050                           ; 1 bytes @ 0x0
  6051                           
  6052  0070                     ??_calculateCurrent2:	
  6053                           ; 1 bytes @ 0x0
  6054                           
  6055  0070                     ?_calculateCurrent3:	
  6056                           ; 1 bytes @ 0x0
  6057                           
  6058  0070                     ?_LCDWrite:	
  6059                           ; 1 bytes @ 0x0
  6060                           
  6061  0070                     ?_OSCILLATOR_Initialize:	
  6062                           ; 1 bytes @ 0x0
  6063                           
  6064  0070                     ??_OSCILLATOR_Initialize:	
  6065                           ; 1 bytes @ 0x0
  6066                           
  6067  0070                     ?_TMR2_Initialize:	
  6068                           ; 1 bytes @ 0x0
  6069                           
  6070  0070                     ??_TMR2_Initialize:	
  6071                           ; 1 bytes @ 0x0
  6072                           
  6073  0070                     ?_TMR4_Initialize:	
  6074                           ; 1 bytes @ 0x0
  6075                           
  6076  0070                     ??_TMR4_Initialize:	
  6077                           ; 1 bytes @ 0x0
  6078                           
  6079  0070                     ?_main:	
  6080                           ; 1 bytes @ 0x0
  6081                           
  6082  0070                     ?_ADC_Initialize:	
  6083                           ; 1 bytes @ 0x0
  6084                           
  6085  0070                     ??_ADC_Initialize:	
  6086                           ; 1 bytes @ 0x0
  6087                           
  6088  0070                     ?_Init_Battery_State_Machine:	
  6089                           ; 1 bytes @ 0x0
  6090                           
  6091  0070                     ?_PIN_MANAGER_Initialize:	
  6092                           ; 1 bytes @ 0x0
  6093                           
  6094  0070                     ??_PIN_MANAGER_Initialize:	
  6095                           ; 1 bytes @ 0x0
  6096                           
  6097  0070                     ?_PWM_Initialize:	
  6098                           ; 1 bytes @ 0x0
  6099                           
  6100  0070                     ??_PWM_Initialize:	
  6101                           ; 1 bytes @ 0x0
  6102                           
  6103  0070                     ?___bmul:	
  6104                           ; 1 bytes @ 0x0
  6105                           
  6106  0070                     ?_ADCRead:	
  6107                           ; 1 bytes @ 0x0
  6108                           
  6109  0070                     ?___wmul:	
  6110                           ; 2 bytes @ 0x0
  6111                           
  6112  0070                     ?___awdiv:	
  6113                           ; 2 bytes @ 0x0
  6114                           
  6115  0070                     ?___lwmod:	
  6116                           ; 2 bytes @ 0x0
  6117                           
  6118  0070                     ?___ftpack:	
  6119                           ; 2 bytes @ 0x0
  6120                           
  6121  0070                     ?_frexp:	
  6122                           ; 3 bytes @ 0x0
  6123                           
  6124  0070                     ?___aldiv:	
  6125                           ; 3 bytes @ 0x0
  6126                           
  6127  0070                     LCDWrite@data:	
  6128                           ; 4 bytes @ 0x0
  6129                           
  6130  0070                     PIN_MANAGER_Initialize@state:	
  6131                           ; 1 bytes @ 0x0
  6132                           
  6133  0070                     ___bmul@multiplicand:	
  6134                           ; 1 bytes @ 0x0
  6135                           
  6136  0070                     PWM6_LoadDutyValue@dutyCycle6:	
  6137                           ; 1 bytes @ 0x0
  6138                           
  6139  0070                     PWM7_LoadDutyValue@dutyCycle7:	
  6140                           ; 2 bytes @ 0x0
  6141                           
  6142  0070                     PWM1_LoadDutyValue@dutyCycle1:	
  6143                           ; 2 bytes @ 0x0
  6144                           
  6145  0070                     ___wmul@multiplier:	
  6146                           ; 2 bytes @ 0x0
  6147                           
  6148  0070                     ___awdiv@divisor:	
  6149                           ; 2 bytes @ 0x0
  6150                           
  6151  0070                     ___lwmod@divisor:	
  6152                           ; 2 bytes @ 0x0
  6153                           
  6154  0070                     ___ftpack@arg:	
  6155                           ; 2 bytes @ 0x0
  6156                           
  6157  0070                     frexp@value:	
  6158                           ; 3 bytes @ 0x0
  6159                           
  6160  0070                     ___aldiv@divisor:	
  6161                           ; 3 bytes @ 0x0
  6162                           
  6163                           
  6164                           ; 4 bytes @ 0x0
  6165  0070                     	ds	1
  6166  0071                     ??_LCDWrite:	
  6167  0071                     ??___bmul:	
  6168                           ; 1 bytes @ 0x1
  6169                           
  6170                           
  6171                           ; 1 bytes @ 0x1
  6172  0071                     	ds	1
  6173  0072                     ??_PWM6_LoadDutyValue:	
  6174  0072                     ??_PWM7_LoadDutyValue:	
  6175                           ; 1 bytes @ 0x2
  6176                           
  6177  0072                     ??_PWM1_LoadDutyValue:	
  6178                           ; 1 bytes @ 0x2
  6179                           
  6180  0072                     LCDWrite@data_or_command:	
  6181                           ; 1 bytes @ 0x2
  6182                           
  6183  0072                     ___bmul@product:	
  6184                           ; 1 bytes @ 0x2
  6185                           
  6186  0072                     ___wmul@multiplicand:	
  6187                           ; 1 bytes @ 0x2
  6188                           
  6189  0072                     ___awdiv@dividend:	
  6190                           ; 2 bytes @ 0x2
  6191                           
  6192  0072                     ___lwmod@dividend:	
  6193                           ; 2 bytes @ 0x2
  6194                           
  6195                           
  6196                           ; 2 bytes @ 0x2
  6197  0072                     	ds	1
  6198  0073                     ??_ADCRead:	
  6199  0073                     ADCRead@channel:	
  6200                           ; 1 bytes @ 0x3
  6201                           
  6202  0073                     LCDWrite@d:	
  6203                           ; 1 bytes @ 0x3
  6204                           
  6205  0073                     ___bmul@multiplier:	
  6206                           ; 1 bytes @ 0x3
  6207                           
  6208  0073                     ___ftpack@exp:	
  6209                           ; 1 bytes @ 0x3
  6210                           
  6211  0073                     frexp@eptr:	
  6212                           ; 1 bytes @ 0x3
  6213                           
  6214                           
  6215                           ; 1 bytes @ 0x3
  6216  0073                     	ds	1
  6217  0074                     ??_readButton:	
  6218  0074                     ??_frexp:	
  6219                           ; 1 bytes @ 0x4
  6220                           
  6221  0074                     ??___wmul:	
  6222                           ; 1 bytes @ 0x4
  6223                           
  6224  0074                     ??___awdiv:	
  6225                           ; 1 bytes @ 0x4
  6226                           
  6227  0074                     ??___lwmod:	
  6228                           ; 1 bytes @ 0x4
  6229                           
  6230  0074                     LCDWrite@i:	
  6231                           ; 1 bytes @ 0x4
  6232                           
  6233  0074                     ___ftpack@sign:	
  6234                           ; 1 bytes @ 0x4
  6235                           
  6236  0074                     ___wmul@product:	
  6237                           ; 1 bytes @ 0x4
  6238                           
  6239  0074                     ___aldiv@dividend:	
  6240                           ; 2 bytes @ 0x4
  6241                           
  6242                           
  6243                           ; 4 bytes @ 0x4
  6244  0074                     	ds	1
  6245  0075                     ??_LCDInit:	
  6246  0075                     ?_gotoXY:	
  6247                           ; 1 bytes @ 0x5
  6248                           
  6249  0075                     ??___ftpack:	
  6250                           ; 1 bytes @ 0x5
  6251                           
  6252  0075                     gotoXY@y:	
  6253                           ; 1 bytes @ 0x5
  6254                           
  6255  0075                     ___awdiv@counter:	
  6256                           ; 1 bytes @ 0x5
  6257                           
  6258  0075                     ___lwmod@counter:	
  6259                           ; 1 bytes @ 0x5
  6260                           
  6261                           
  6262                           ; 1 bytes @ 0x5
  6263  0075                     	ds	1
  6264  0076                     ??_gotoXY:	
  6265  0076                     ??_LCDWriteCharacter:	
  6266                           ; 1 bytes @ 0x6
  6267                           
  6268  0076                     ___awdiv@sign:	
  6269                           ; 1 bytes @ 0x6
  6270                           
  6271                           
  6272                           ; 1 bytes @ 0x6
  6273  0076                     	ds	1
  6274  0077                     gotoXY@x:	
  6275  0077                     ___awdiv@quotient:	
  6276                           ; 1 bytes @ 0x7
  6277                           
  6278                           
  6279                           ; 2 bytes @ 0x7
  6280  0077                     	ds	1
  6281  0078                     ??_LCDClear:	
  6282  0078                     ??___aldiv:	
  6283                           ; 1 bytes @ 0x8
  6284                           
  6285                           
  6286                           ; 1 bytes @ 0x8
  6287  0078                     	ds	1
  6288  0079                     ?___awtoft:	
  6289  0079                     LCDWriteCharacter@character:	
  6290                           ; 3 bytes @ 0x9
  6291                           
  6292  0079                     readIAnalog@analog_channel:	
  6293                           ; 1 bytes @ 0x9
  6294                           
  6295  0079                     readVAnalog@analog_channel:	
  6296                           ; 2 bytes @ 0x9
  6297                           
  6298  0079                     LCDClear@index:	
  6299                           ; 2 bytes @ 0x9
  6300                           
  6301  0079                     ___awtoft@c:	
  6302                           ; 2 bytes @ 0x9
  6303                           
  6304                           
  6305                           ; 2 bytes @ 0x9
  6306  0079                     	ds	1
  6307  007A                     LCDWriteCharacter@base:	
  6308                           
  6309                           ; 2 bytes @ 0xA
  6310  007A                     	ds	1
  6311  007B                     readIAnalog@value:	
  6312  007B                     readVAnalog@value:	
  6313                           ; 2 bytes @ 0xB
  6314                           
  6315                           
  6316                           ; 2 bytes @ 0xB
  6317  007B                     	ds	1
  6318  007C                     ?_LCDWriteString:	
  6319  007C                     ??___awtoft:	
  6320                           ; 1 bytes @ 0xC
  6321                           
  6322  007C                     LCDWriteString@characters:	
  6323                           ; 1 bytes @ 0xC
  6324                           
  6325                           
  6326                           ; 2 bytes @ 0xC
  6327  007C                     	ds	2
  6328  007E                     ??_tempCalc:	
  6329  007E                     ??_eval_poly:	
  6330                           ; 1 bytes @ 0xE
  6331                           
  6332  007E                     ??___ftsub:	
  6333                           ; 1 bytes @ 0xE
  6334                           
  6335                           
  6336                           	psect	cstackBANK0
  6337  0020                     __pcstackBANK0:	
  6338                           ; 1 bytes @ 0xE
  6339                           
  6340  0020                     ??_LCDWriteString:	
  6341  0020                     ___aldiv@counter:	
  6342                           ; 1 bytes @ 0x0
  6343                           
  6344  0020                     ___awtoft@sign:	
  6345                           ; 1 bytes @ 0x0
  6346                           
  6347                           
  6348                           ; 1 bytes @ 0x0
  6349  0020                     	ds	1
  6350  0021                     ?___ftdiv:	
  6351  0021                     ?___ftmul:	
  6352                           ; 3 bytes @ 0x1
  6353                           
  6354  0021                     ___aldiv@sign:	
  6355                           ; 3 bytes @ 0x1
  6356                           
  6357  0021                     ___ftdiv@f2:	
  6358                           ; 1 bytes @ 0x1
  6359                           
  6360  0021                     ___ftmul@f1:	
  6361                           ; 3 bytes @ 0x1
  6362                           
  6363                           
  6364                           ; 3 bytes @ 0x1
  6365  0021                     	ds	1
  6366  0022                     ___aldiv@quotient:	
  6367                           
  6368                           ; 4 bytes @ 0x2
  6369  0022                     	ds	2
  6370  0024                     ___ftdiv@f1:	
  6371  0024                     ___ftmul@f2:	
  6372                           ; 3 bytes @ 0x4
  6373                           
  6374                           
  6375                           ; 3 bytes @ 0x4
  6376  0024                     	ds	2
  6377  0026                     ?_readIAnalog:	
  6378  0026                     ?_readVAnalog:	
  6379                           ; 2 bytes @ 0x6
  6380                           
  6381  0026                     readIAnalog@channel:	
  6382                           ; 2 bytes @ 0x6
  6383                           
  6384  0026                     readVAnalog@channel:	
  6385                           ; 2 bytes @ 0x6
  6386                           
  6387                           
  6388                           ; 2 bytes @ 0x6
  6389  0026                     	ds	1
  6390  0027                     ??___ftdiv:	
  6391  0027                     ??___ftmul:	
  6392                           ; 1 bytes @ 0x7
  6393                           
  6394                           
  6395                           ; 1 bytes @ 0x7
  6396  0027                     	ds	1
  6397  0028                     ??_readIAnalog:	
  6398  0028                     ??_readVAnalog:	
  6399                           ; 1 bytes @ 0x8
  6400                           
  6401                           
  6402                           ; 1 bytes @ 0x8
  6403  0028                     	ds	3
  6404  002B                     ___ftdiv@cntr:	
  6405  002B                     ___ftmul@exp:	
  6406                           ; 1 bytes @ 0xB
  6407                           
  6408                           
  6409                           ; 1 bytes @ 0xB
  6410  002B                     	ds	1
  6411  002C                     ___ftdiv@f3:	
  6412  002C                     ___ftmul@f3_as_product:	
  6413                           ; 3 bytes @ 0xC
  6414                           
  6415                           
  6416                           ; 3 bytes @ 0xC
  6417  002C                     	ds	3
  6418  002F                     ___ftdiv@exp:	
  6419  002F                     ___ftmul@cntr:	
  6420                           ; 1 bytes @ 0xF
  6421                           
  6422                           
  6423                           ; 1 bytes @ 0xF
  6424  002F                     	ds	1
  6425  0030                     ___ftdiv@sign:	
  6426  0030                     ___ftmul@sign:	
  6427                           ; 1 bytes @ 0x10
  6428                           
  6429                           
  6430                           ; 1 bytes @ 0x10
  6431  0030                     	ds	1
  6432  0031                     ?___ftge:	
  6433  0031                     ?___ftadd:	
  6434                           ; 1 bit 
  6435                           
  6436  0031                     ?___fttol:	
  6437                           ; 3 bytes @ 0x11
  6438                           
  6439  0031                     ___ftadd@f1:	
  6440                           ; 4 bytes @ 0x11
  6441                           
  6442  0031                     ___ftge@ff1:	
  6443                           ; 3 bytes @ 0x11
  6444                           
  6445  0031                     ___fttol@f1:	
  6446                           ; 3 bytes @ 0x11
  6447                           
  6448                           
  6449                           ; 3 bytes @ 0x11
  6450  0031                     	ds	3
  6451  0034                     ___ftadd@f2:	
  6452  0034                     ___ftge@ff2:	
  6453                           ; 3 bytes @ 0x14
  6454                           
  6455                           
  6456                           ; 3 bytes @ 0x14
  6457  0034                     	ds	1
  6458  0035                     ??___fttol:	
  6459                           
  6460                           ; 1 bytes @ 0x15
  6461  0035                     	ds	2
  6462  0037                     ??___ftadd:	
  6463  0037                     ??___ftge:	
  6464                           ; 1 bytes @ 0x17
  6465                           
  6466                           
  6467                           ; 1 bytes @ 0x17
  6468  0037                     	ds	2
  6469  0039                     ___fttol@sign1:	
  6470                           
  6471                           ; 1 bytes @ 0x19
  6472  0039                     	ds	1
  6473  003A                     ___fttol@lval:	
  6474                           
  6475                           ; 4 bytes @ 0x1A
  6476  003A                     	ds	1
  6477  003B                     ___ftadd@sign:	
  6478                           
  6479                           ; 1 bytes @ 0x1B
  6480  003B                     	ds	1
  6481  003C                     ___ftadd@exp2:	
  6482                           
  6483                           ; 1 bytes @ 0x1C
  6484  003C                     	ds	1
  6485  003D                     ___ftadd@exp1:	
  6486                           
  6487                           ; 1 bytes @ 0x1D
  6488  003D                     	ds	1
  6489  003E                     ?_eval_poly:	
  6490  003E                     ?___ftsub:	
  6491                           ; 3 bytes @ 0x1E
  6492                           
  6493  003E                     ___fttol@exp1:	
  6494                           ; 3 bytes @ 0x1E
  6495                           
  6496  003E                     ___ftsub@f2:	
  6497                           ; 1 bytes @ 0x1E
  6498                           
  6499  003E                     eval_poly@x:	
  6500                           ; 3 bytes @ 0x1E
  6501                           
  6502                           
  6503                           ; 3 bytes @ 0x1E
  6504  003E                     	ds	1
  6505  003F                     ??_Battery_State_Machine:	
  6506  003F                     ?_LCDWriteInt:	
  6507                           ; 1 bytes @ 0x1F
  6508                           
  6509  003F                     ??_cc_cv_mode:	
  6510                           ; 1 bytes @ 0x1F
  6511                           
  6512  003F                     ??_calculateCurrent0:	
  6513                           ; 1 bytes @ 0x1F
  6514                           
  6515  003F                     ??_calculateCurrent3:	
  6516                           ; 1 bytes @ 0x1F
  6517                           
  6518  003F                     ??_Init_Battery_State_Machine:	
  6519                           ; 1 bytes @ 0x1F
  6520                           
  6521  003F                     LCDWriteInt@value:	
  6522                           ; 1 bytes @ 0x1F
  6523                           
  6524                           
  6525                           ; 2 bytes @ 0x1F
  6526  003F                     	ds	2
  6527  0041                     LCDWriteInt@fieldLength:	
  6528  0041                     eval_poly@d:	
  6529                           ; 1 bytes @ 0x21
  6530                           
  6531  0041                     ___ftsub@f1:	
  6532                           ; 2 bytes @ 0x21
  6533                           
  6534                           
  6535                           ; 3 bytes @ 0x21
  6536  0041                     	ds	1
  6537  0042                     LCDWriteInt@numPlaces:	
  6538                           
  6539                           ; 1 bytes @ 0x22
  6540  0042                     	ds	1
  6541  0043                     Init_Battery_State_Machine@z:	
  6542  0043                     LCDWriteInt@sign:	
  6543                           ; 1 bytes @ 0x23
  6544                           
  6545  0043                     eval_poly@n:	
  6546                           ; 1 bytes @ 0x23
  6547                           
  6548                           
  6549                           ; 2 bytes @ 0x23
  6550  0043                     	ds	1
  6551  0044                     ??_SYSTEM_Initialize:	
  6552  0044                     ??_LCDWriteInt:	
  6553                           ; 1 bytes @ 0x24
  6554                           
  6555  0044                     Battery_State_Machine@z:	
  6556                           ; 1 bytes @ 0x24
  6557                           
  6558                           
  6559                           ; 1 bytes @ 0x24
  6560  0044                     	ds	1
  6561  0045                     eval_poly@res:	
  6562                           
  6563                           ; 3 bytes @ 0x25
  6564  0045                     	ds	1
  6565  0046                     cc_cv_mode@z:	
  6566                           
  6567                           ; 1 bytes @ 0x26
  6568  0046                     	ds	2
  6569  0048                     ?_log:	
  6570  0048                     log@x:	
  6571                           ; 3 bytes @ 0x28
  6572                           
  6573  0048                     LCDWriteInt@str:	
  6574                           ; 3 bytes @ 0x28
  6575                           
  6576                           
  6577                           ; 5 bytes @ 0x28
  6578  0048                     	ds	3
  6579  004B                     ??_log:	
  6580                           
  6581                           ; 1 bytes @ 0x2B
  6582  004B                     	ds	1
  6583  004C                     log@exponent:	
  6584                           
  6585                           ; 2 bytes @ 0x2C
  6586  004C                     	ds	1
  6587  004D                     LCDWriteInt@j:	
  6588                           
  6589                           ; 1 bytes @ 0x2D
  6590  004D                     	ds	1
  6591  004E                     ?_tempCalc:	
  6592  004E                     LCDWriteInt@i:	
  6593                           ; 2 bytes @ 0x2E
  6594                           
  6595  004E                     tempCalc@analogValue:	
  6596                           ; 1 bytes @ 0x2E
  6597                           
  6598                           
  6599                           ; 2 bytes @ 0x2E
  6600  004E                     	ds	2
  6601  0050                     tempCalc@R:	
  6602                           
  6603                           ; 3 bytes @ 0x30
  6604  0050                     	ds	3
  6605  0053                     _tempCalc$1325:	
  6606                           
  6607                           ; 3 bytes @ 0x33
  6608  0053                     	ds	3
  6609  0056                     tempCalc@steinhart:	
  6610                           
  6611                           ; 3 bytes @ 0x36
  6612  0056                     	ds	3
  6613  0059                     ??_main:	
  6614                           
  6615                           ; 1 bytes @ 0x39
  6616  0059                     	ds	2
  6617                           
  6618                           	psect	maintext
  6619  009B                     __pmaintext:	
  6620 ;;
  6621 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  6622 ;;
  6623 ;; *************** function _main *****************
  6624 ;; Defined at:
  6625 ;;		line 33 in file "main.c"
  6626 ;; Parameters:    Size  Location     Type
  6627 ;;		None
  6628 ;; Auto vars:     Size  Location     Type
  6629 ;;  efficiency      3    0[BANK1 ] float 
  6630 ;;  dutyCycle7      2   26[BANK1 ] unsigned int 
  6631 ;;  dutyCycle6      2   24[BANK1 ] unsigned int 
  6632 ;;  dutyCycle1      2   19[BANK1 ] unsigned int 
  6633 ;;  tempFanOutpu    2   17[BANK1 ] unsigned int 
  6634 ;;  largerIOut      2   15[BANK1 ] int 
  6635 ;;  MPPT1           2   13[BANK1 ] int 
  6636 ;;  MPPT0           2   10[BANK1 ] int 
  6637 ;;  faultNotRese    2    5[BANK1 ] unsigned int 
  6638 ;;  faultCount      2    3[BANK1 ] unsigned int 
  6639 ;;  j               1   28[BANK1 ] unsigned char 
  6640 ;;  menuButton      1   12[BANK1 ] unsigned char 
  6641 ;;  slowLoop        1    9[BANK1 ] unsigned char 
  6642 ;;  fastLoop        1    8[BANK1 ] unsigned char 
  6643 ;;  displayRefre    1    7[BANK1 ] unsigned char 
  6644 ;; Return value:  Size  Location     Type
  6645 ;;                  1    wreg      void 
  6646 ;; Registers used:
  6647 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6648 ;; Tracked objects:
  6649 ;;		On entry : B1F/0
  6650 ;;		On exit  : 0/0
  6651 ;;		Unchanged: 0/0
  6652 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6653 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6654 ;;      Locals:         0       0      29       0       0       0       0       0       0       0       0       0       
      +0       0
  6655 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6656 ;;      Totals:         0       2      29       0       0       0       0       0       0       0       0       0       
      +0       0
  6657 ;;Total ram usage:       31 bytes
  6658 ;; Hardware stack levels required when called:    5
  6659 ;; This function calls:
  6660 ;;		_ADCRead
  6661 ;;		_Battery_State_Machine
  6662 ;;		_LCDClear
  6663 ;;		_LCDInit
  6664 ;;		_LCDWriteCharacter
  6665 ;;		_LCDWriteInt
  6666 ;;		_LCDWriteString
  6667 ;;		_PWM1_LoadDutyValue
  6668 ;;		_PWM6_LoadDutyValue
  6669 ;;		_PWM7_LoadDutyValue
  6670 ;;		_SYSTEM_Initialize
  6671 ;;		___awdiv
  6672 ;;		___awtoft
  6673 ;;		___ftdiv
  6674 ;;		___ftge
  6675 ;;		___ftmul
  6676 ;;		___fttol
  6677 ;;		_calculateCurrent0
  6678 ;;		_calculateCurrent2
  6679 ;;		_calculateCurrent3
  6680 ;;		_cc_cv_mode
  6681 ;;		_gotoXY
  6682 ;;		_readButton
  6683 ;;		_readIAnalog
  6684 ;;		_readVAnalog
  6685 ;;		_tempCalc
  6686 ;; This function is called by:
  6687 ;;		Startup code after reset
  6688 ;; This function uses a non-reentrant model
  6689 ;;
  6690                           
  6691                           
  6692                           ;psect for function _main
  6693  009B                     _main:	
  6694                           
  6695                           ;main.c: 35: int16_t MPPT0 = 3144;
  6696                           
  6697                           ;incstack = 0
  6698                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6699  009B  3048               	movlw	72
  6700  009C  0021               	movlb	1	; select bank1
  6701  009D  00DA               	movwf	main@MPPT0^(0+128)
  6702  009E  300C               	movlw	12
  6703  009F  00DB               	movwf	(main@MPPT0^(0+128)+1)
  6704                           
  6705                           ;main.c: 36: int16_t MPPT1 = 3144;
  6706  00A0  3048               	movlw	72
  6707  00A1  00DD               	movwf	main@MPPT1^(0+128)
  6708  00A2  300C               	movlw	12
  6709  00A3  00DE               	movwf	(main@MPPT1^(0+128)+1)
  6710                           
  6711                           ;main.c: 38: extern uint8_t batteryState[2];
  6712                           ;main.c: 39: uint8_t displayRefresh = 0;
  6713  00A4  01D7               	clrf	main@displayRefresh^(0+128)
  6714                           
  6715                           ;main.c: 40: uint16_t dutyCycle6 = 1023;
  6716  00A5  30FF               	movlw	255
  6717  00A6  00E8               	movwf	main@dutyCycle6^(0+128)
  6718  00A7  3003               	movlw	3
  6719  00A8  00E9               	movwf	(main@dutyCycle6^(0+128)+1)
  6720                           
  6721                           ;main.c: 41: uint16_t dutyCycle7 = 1023;
  6722  00A9  30FF               	movlw	255
  6723  00AA  00EA               	movwf	main@dutyCycle7^(0+128)
  6724  00AB  3003               	movlw	3
  6725  00AC  00EB               	movwf	(main@dutyCycle7^(0+128)+1)
  6726                           
  6727                           ;main.c: 42: uint16_t dutyCycle1 = 260;
  6728  00AD  3004               	movlw	4
  6729  00AE  00E3               	movwf	main@dutyCycle1^(0+128)
  6730  00AF  3001               	movlw	1
  6731  00B0  00E4               	movwf	(main@dutyCycle1^(0+128)+1)
  6732                           
  6733                           ;main.c: 43: float efficiency = 0;
  6734  00B1  3000               	movlw	0
  6735  00B2  00D0               	movwf	main@efficiency^(0+128)
  6736  00B3  3000               	movlw	0
  6737  00B4  00D1               	movwf	(main@efficiency+1)^(0+128)
  6738  00B5  3000               	movlw	0
  6739  00B6  00D2               	movwf	(main@efficiency+2)^(0+128)
  6740                           
  6741                           ;main.c: 44: uint16_t faultCount = 0;
  6742  00B7  01D3               	clrf	main@faultCount^(0+128)
  6743  00B8  01D4               	clrf	(main@faultCount+1)^(0+128)
  6744                           
  6745                           ;main.c: 45: uint16_t faultNotReset = 0;
  6746  00B9  01D5               	clrf	main@faultNotReset^(0+128)
  6747  00BA  01D6               	clrf	(main@faultNotReset+1)^(0+128)
  6748                           
  6749                           ;main.c: 47: extern int8_t Imode[2];
  6750                           ;main.c: 48: int16_t largerIOut = 0;
  6751  00BB  01DF               	clrf	main@largerIOut^(0+128)
  6752  00BC  01E0               	clrf	(main@largerIOut+1)^(0+128)
  6753                           
  6754                           ;main.c: 49: extern int16_t Iref[2];
  6755                           ;main.c: 50: uint8_t j = 0;
  6756  00BD  01EC               	clrf	main@j^(0+128)
  6757                           
  6758                           ;main.c: 51: uint8_t menuButton = 0;
  6759  00BE  01DC               	clrf	main@menuButton^(0+128)
  6760                           
  6761                           ;main.c: 52: uint8_t fastLoop = 0;
  6762  00BF  01D8               	clrf	main@fastLoop^(0+128)
  6763                           
  6764                           ;main.c: 53: uint8_t slowLoop = 200;
  6765  00C0  30C8               	movlw	200
  6766  00C1  0020               	movlb	0	; select bank0
  6767  00C2  00D9               	movwf	??_main
  6768  00C3  0859               	movf	??_main,w
  6769  00C4  0021               	movlb	1	; select bank1
  6770  00C5  00D9               	movwf	main@slowLoop^(0+128)
  6771                           
  6772                           ;main.c: 54: uint16_t tempFanOutput = 60;
  6773  00C6  303C               	movlw	60
  6774  00C7  00E1               	movwf	main@tempFanOutput^(0+128)
  6775  00C8  3000               	movlw	0
  6776  00C9  00E2               	movwf	(main@tempFanOutput^(0+128)+1)
  6777                           
  6778                           ;main.c: 55: extern int8_t VHoldMode[2];
  6779                           ;main.c: 56: extern int16_t Vref[2];
  6780                           ;main.c: 59: SYSTEM_Initialize();
  6781  00CA  3191  21E2  3180   	fcall	_SYSTEM_Initialize
  6782                           
  6783                           ;main.c: 61: LCDClear();
  6784  00CD  319F  27DA  3180   	fcall	_LCDClear
  6785  00D0                     l3735:	
  6786                           ;main.c: 63: void calculateCurrent0(void);
  6787                           ;main.c: 65: void calculateCurrent2(void);
  6788                           ;main.c: 66: void calculateCurrent3(void);
  6789                           ;main.c: 69: while (1)
  6790                           
  6791                           
  6792                           ;main.c: 70: {
  6793                           ;main.c: 71: if(!(RB2))
  6794  00D0  0020               	movlb	0	; select bank0
  6795  00D1  190D               	btfsc	13,2	;volatile
  6796  00D2  28E4               	goto	l3743
  6797                           
  6798                           ;main.c: 72: {
  6799                           ;main.c: 73: LATA5=0;
  6800  00D3  1296               	bcf	22,5	;volatile
  6801                           
  6802                           ;main.c: 74: _delay((unsigned long)((1000)*(32000000/4000000.0)));
  6803  00D4  300B               	movlw	11
  6804  00D5  0020               	movlb	0	; select bank0
  6805  00D6  00D9               	movwf	??_main
  6806  00D7  3062               	movlw	98
  6807  00D8                     u4867:	
  6808  00D8  0B89               	decfsz	9,f
  6809  00D9  28D8               	goto	u4867
  6810  00DA  0BD9               	decfsz	??_main,f
  6811  00DB  28D8               	goto	u4867
  6812  00DC  0000               	nop
  6813                           
  6814                           ;main.c: 75: faultCount+=1;
  6815  00DD  3001               	movlw	1
  6816  00DE  0021               	movlb	1	; select bank1
  6817  00DF  07D3               	addwf	main@faultCount^(0+128),f
  6818  00E0  3000               	movlw	0
  6819  00E1  3DD4               	addwfc	(main@faultCount+1)^(0+128),f
  6820                           
  6821                           ;main.c: 76: LATA5=1;
  6822  00E2  0020               	movlb	0	; select bank0
  6823  00E3  1696               	bsf	22,5	;volatile
  6824  00E4                     l3743:	
  6825                           
  6826                           ;main.c: 77: }
  6827                           ;main.c: 78: for(j=0;j<4;j++) Ianalogs[j]=readIAnalog(j);
  6828  00E4  0021               	movlb	1	; select bank1
  6829  00E5  01EC               	clrf	main@j^(0+128)
  6830  00E6  3004               	movlw	4
  6831  00E7  026C               	subwf	main@j^(0+128),w
  6832  00E8  1803               	btfsc	3,0
  6833  00E9  2908               	goto	l3755
  6834  00EA                     l3749:	
  6835  00EA  086C               	movf	main@j^(0+128),w
  6836  00EB  0020               	movlb	0	; select bank0
  6837  00EC  00D9               	movwf	??_main
  6838  00ED  01DA               	clrf	??_main+1
  6839  00EE  0859               	movf	??_main,w
  6840  00EF  00A6               	movwf	readIAnalog@channel
  6841  00F0  085A               	movf	??_main+1,w
  6842  00F1  00A7               	movwf	readIAnalog@channel+1
  6843  00F2  318B  23BE  3180   	fcall	_readIAnalog
  6844  00F5  0021               	movlb	1	; select bank1
  6845  00F6  356C               	lslf	main@j^(0+128),w
  6846  00F7  3EA0               	addlw	(low (_Ianalogs| 0))& (0+255)
  6847  00F8  0086               	movwf	6
  6848  00F9  0187               	clrf	7
  6849  00FA  0020               	movlb	0	; select bank0
  6850  00FB  0826               	movf	?_readIAnalog,w
  6851  00FC  3FC0               	movwi [0]fsr1
  6852  00FD  0827               	movf	?_readIAnalog+1,w
  6853  00FE  3FC1               	movwi [1]fsr1
  6854  00FF  3001               	movlw	1
  6855  0100  00D9               	movwf	??_main
  6856  0101  0859               	movf	??_main,w
  6857  0102  0021               	movlb	1	; select bank1
  6858  0103  07EC               	addwf	main@j^(0+128),f
  6859  0104  3004               	movlw	4
  6860  0105  026C               	subwf	main@j^(0+128),w
  6861  0106  1C03               	skipc
  6862  0107  28EA               	goto	l3749
  6863  0108                     l3755:	
  6864                           
  6865                           ;main.c: 80: for(j=0;j<4;j++) Vanalogs[j]=readVAnalog(j);
  6866  0108  01EC               	clrf	main@j^(0+128)
  6867  0109  3004               	movlw	4
  6868  010A  026C               	subwf	main@j^(0+128),w
  6869  010B  1803               	btfsc	3,0
  6870  010C  292C               	goto	l78
  6871  010D                     l3761:	
  6872  010D  086C               	movf	main@j^(0+128),w
  6873  010E  0020               	movlb	0	; select bank0
  6874  010F  00D9               	movwf	??_main
  6875  0110  01DA               	clrf	??_main+1
  6876  0111  0859               	movf	??_main,w
  6877  0112  00A6               	movwf	readVAnalog@channel
  6878  0113  085A               	movf	??_main+1,w
  6879  0114  00A7               	movwf	readVAnalog@channel+1
  6880  0115  318A  22A4  3180   	fcall	_readVAnalog
  6881  0118  0021               	movlb	1	; select bank1
  6882  0119  356C               	lslf	main@j^(0+128),w
  6883  011A  3E40               	addlw	(low (_Vanalogs| (0+256)))& (0+255)
  6884  011B  0086               	movwf	6
  6885  011C  3001               	movlw	1	; select bank2/3
  6886  011D  0087               	movwf	7
  6887  011E  0020               	movlb	0	; select bank0
  6888  011F  0826               	movf	?_readVAnalog,w
  6889  0120  3FC0               	movwi [0]fsr1
  6890  0121  0827               	movf	?_readVAnalog+1,w
  6891  0122  3FC1               	movwi [1]fsr1
  6892  0123  3001               	movlw	1
  6893  0124  00D9               	movwf	??_main
  6894  0125  0859               	movf	??_main,w
  6895  0126  0021               	movlb	1	; select bank1
  6896  0127  07EC               	addwf	main@j^(0+128),f
  6897  0128  3004               	movlw	4
  6898  0129  026C               	subwf	main@j^(0+128),w
  6899  012A  1C03               	skipc
  6900  012B  290D               	goto	l3761
  6901  012C                     l78:	
  6902                           
  6903                           ;main.c: 82: if(!(RB2))faultNotReset+=1;
  6904  012C  0020               	movlb	0	; select bank0
  6905  012D  190D               	btfsc	13,2	;volatile
  6906  012E  2934               	goto	l79
  6907  012F  3001               	movlw	1
  6908  0130  0021               	movlb	1	; select bank1
  6909  0131  07D5               	addwf	main@faultNotReset^(0+128),f
  6910  0132  3000               	movlw	0
  6911  0133  3DD6               	addwfc	(main@faultNotReset+1)^(0+128),f
  6912  0134                     l79:	
  6913                           
  6914                           ;main.c: 84: if(fastLoop>2)
  6915  0134  3003               	movlw	3
  6916  0135  0021               	movlb	1	; select bank1
  6917  0136  0258               	subwf	main@fastLoop^(0+128),w
  6918  0137  1C03               	skipc
  6919  0138  2B00               	goto	l3825
  6920                           
  6921                           ;main.c: 85: {
  6922                           ;main.c: 86: voltage[0]=(int16_t)(Vanalogs[0]/.54245);
  6923  0139  0022               	movlb	2	; select bank2
  6924  013A  0841               	movf	(_Vanalogs+1)^(0+256),w
  6925  013B  00FA               	movwf	___awtoft@c+1
  6926  013C  0840               	movf	_Vanalogs^(0+256),w
  6927  013D  00F9               	movwf	___awtoft@c
  6928  013E  319F  2794  3180   	fcall	___awtoft
  6929  0141  0879               	movf	?___awtoft,w
  6930  0142  0020               	movlb	0	; select bank0
  6931  0143  00A4               	movwf	___ftdiv@f1
  6932  0144  087A               	movf	?___awtoft+1,w
  6933  0145  00A5               	movwf	___ftdiv@f1+1
  6934  0146  087B               	movf	?___awtoft+2,w
  6935  0147  00A6               	movwf	___ftdiv@f1+2
  6936  0148  30DE               	movlw	222
  6937  0149  00A1               	movwf	___ftdiv@f2
  6938  014A  300A               	movlw	10
  6939  014B  00A2               	movwf	___ftdiv@f2+1
  6940  014C  303F               	movlw	63
  6941  014D  00A3               	movwf	___ftdiv@f2+2
  6942  014E  3195  25F3  3180   	fcall	___ftdiv
  6943  0151  0020               	movlb	0	; select bank0
  6944  0152  0821               	movf	?___ftdiv,w
  6945  0153  00B1               	movwf	___fttol@f1
  6946  0154  0822               	movf	?___ftdiv+1,w
  6947  0155  00B2               	movwf	___fttol@f1+1
  6948  0156  0823               	movf	?___ftdiv+2,w
  6949  0157  00B3               	movwf	___fttol@f1+2
  6950  0158  3180  2014  3180   	fcall	___fttol
  6951  015B  0020               	movlb	0	; select bank0
  6952  015C  0832               	movf	?___fttol+1,w
  6953  015D  0021               	movlb	1	; select bank1
  6954  015E  00B1               	movwf	(_voltage+1)^(0+128)
  6955  015F  0020               	movlb	0	; select bank0
  6956  0160  0831               	movf	?___fttol,w
  6957  0161  0021               	movlb	1	; select bank1
  6958  0162  00B0               	movwf	_voltage^(0+128)
  6959                           
  6960                           ;main.c: 88: voltage[1]=(int16_t)(Vanalogs[1]/.54395);
  6961  0163  0022               	movlb	2	; select bank2
  6962  0164  0843               	movf	((_Vanalogs+1)^(0+256)+2),w
  6963  0165  00FA               	movwf	___awtoft@c+1
  6964  0166  0842               	movf	(_Vanalogs^(0+256)+2),w
  6965  0167  00F9               	movwf	___awtoft@c
  6966  0168  319F  2794  3180   	fcall	___awtoft
  6967  016B  0879               	movf	?___awtoft,w
  6968  016C  0020               	movlb	0	; select bank0
  6969  016D  00A4               	movwf	___ftdiv@f1
  6970  016E  087A               	movf	?___awtoft+1,w
  6971  016F  00A5               	movwf	___ftdiv@f1+1
  6972  0170  087B               	movf	?___awtoft+2,w
  6973  0171  00A6               	movwf	___ftdiv@f1+2
  6974  0172  3040               	movlw	64
  6975  0173  00A1               	movwf	___ftdiv@f2
  6976  0174  300B               	movlw	11
  6977  0175  00A2               	movwf	___ftdiv@f2+1
  6978  0176  303F               	movlw	63
  6979  0177  00A3               	movwf	___ftdiv@f2+2
  6980  0178  3195  25F3  3180   	fcall	___ftdiv
  6981  017B  0020               	movlb	0	; select bank0
  6982  017C  0821               	movf	?___ftdiv,w
  6983  017D  00B1               	movwf	___fttol@f1
  6984  017E  0822               	movf	?___ftdiv+1,w
  6985  017F  00B2               	movwf	___fttol@f1+1
  6986  0180  0823               	movf	?___ftdiv+2,w
  6987  0181  00B3               	movwf	___fttol@f1+2
  6988  0182  3180  2014  3180   	fcall	___fttol
  6989  0185  0020               	movlb	0	; select bank0
  6990  0186  0832               	movf	?___fttol+1,w
  6991  0187  0021               	movlb	1	; select bank1
  6992  0188  00B3               	movwf	((_voltage+1)^(0+128)+2)
  6993  0189  0020               	movlb	0	; select bank0
  6994  018A  0831               	movf	?___fttol,w
  6995  018B  0021               	movlb	1	; select bank1
  6996  018C  00B2               	movwf	(_voltage^(0+128)+2)
  6997                           
  6998                           ;main.c: 90: voltage[2]=(int16_t)(Vanalogs[2]/.208100558);
  6999  018D  0022               	movlb	2	; select bank2
  7000  018E  0845               	movf	((_Vanalogs+1)^(0+256)+4),w
  7001  018F  00FA               	movwf	___awtoft@c+1
  7002  0190  0844               	movf	(_Vanalogs^(0+256)+4),w
  7003  0191  00F9               	movwf	___awtoft@c
  7004  0192  319F  2794  3180   	fcall	___awtoft
  7005  0195  0879               	movf	?___awtoft,w
  7006  0196  0020               	movlb	0	; select bank0
  7007  0197  00A4               	movwf	___ftdiv@f1
  7008  0198  087A               	movf	?___awtoft+1,w
  7009  0199  00A5               	movwf	___ftdiv@f1+1
  7010  019A  087B               	movf	?___awtoft+2,w
  7011  019B  00A6               	movwf	___ftdiv@f1+2
  7012  019C  3018               	movlw	24
  7013  019D  00A1               	movwf	___ftdiv@f2
  7014  019E  3055               	movlw	85
  7015  019F  00A2               	movwf	___ftdiv@f2+1
  7016  01A0  303E               	movlw	62
  7017  01A1  00A3               	movwf	___ftdiv@f2+2
  7018  01A2  3195  25F3  3180   	fcall	___ftdiv
  7019  01A5  0020               	movlb	0	; select bank0
  7020  01A6  0821               	movf	?___ftdiv,w
  7021  01A7  00B1               	movwf	___fttol@f1
  7022  01A8  0822               	movf	?___ftdiv+1,w
  7023  01A9  00B2               	movwf	___fttol@f1+1
  7024  01AA  0823               	movf	?___ftdiv+2,w
  7025  01AB  00B3               	movwf	___fttol@f1+2
  7026  01AC  3180  2014  3180   	fcall	___fttol
  7027  01AF  0020               	movlb	0	; select bank0
  7028  01B0  0832               	movf	?___fttol+1,w
  7029  01B1  0021               	movlb	1	; select bank1
  7030  01B2  00B5               	movwf	((_voltage+1)^(0+128)+4)
  7031  01B3  0020               	movlb	0	; select bank0
  7032  01B4  0831               	movf	?___fttol,w
  7033  01B5  0021               	movlb	1	; select bank1
  7034  01B6  00B4               	movwf	(_voltage^(0+128)+4)
  7035                           
  7036                           ;main.c: 92: voltage[3]=(int16_t)(Vanalogs[3]/.207755);
  7037  01B7  0022               	movlb	2	; select bank2
  7038  01B8  0847               	movf	((_Vanalogs+1)^(0+256)+6),w
  7039  01B9  00FA               	movwf	___awtoft@c+1
  7040  01BA  0846               	movf	(_Vanalogs^(0+256)+6),w
  7041  01BB  00F9               	movwf	___awtoft@c
  7042  01BC  319F  2794  3180   	fcall	___awtoft
  7043  01BF  0879               	movf	?___awtoft,w
  7044  01C0  0020               	movlb	0	; select bank0
  7045  01C1  00A4               	movwf	___ftdiv@f1
  7046  01C2  087A               	movf	?___awtoft+1,w
  7047  01C3  00A5               	movwf	___ftdiv@f1+1
  7048  01C4  087B               	movf	?___awtoft+2,w
  7049  01C5  00A6               	movwf	___ftdiv@f1+2
  7050  01C6  30BE               	movlw	190
  7051  01C7  00A1               	movwf	___ftdiv@f2
  7052  01C8  3054               	movlw	84
  7053  01C9  00A2               	movwf	___ftdiv@f2+1
  7054  01CA  303E               	movlw	62
  7055  01CB  00A3               	movwf	___ftdiv@f2+2
  7056  01CC  3195  25F3  3180   	fcall	___ftdiv
  7057  01CF  0020               	movlb	0	; select bank0
  7058  01D0  0821               	movf	?___ftdiv,w
  7059  01D1  00B1               	movwf	___fttol@f1
  7060  01D2  0822               	movf	?___ftdiv+1,w
  7061  01D3  00B2               	movwf	___fttol@f1+1
  7062  01D4  0823               	movf	?___ftdiv+2,w
  7063  01D5  00B3               	movwf	___fttol@f1+2
  7064  01D6  3180  2014  3180   	fcall	___fttol
  7065  01D9  0020               	movlb	0	; select bank0
  7066  01DA  0832               	movf	?___fttol+1,w
  7067  01DB  0021               	movlb	1	; select bank1
  7068  01DC  00B7               	movwf	((_voltage+1)^(0+128)+6)
  7069  01DD  0020               	movlb	0	; select bank0
  7070  01DE  0831               	movf	?___fttol,w
  7071  01DF  0021               	movlb	1	; select bank1
  7072  01E0  00B6               	movwf	(_voltage^(0+128)+6)
  7073                           
  7074                           ;main.c: 94: calculateCurrent0();
  7075  01E1  3192  2294  3180   	fcall	_calculateCurrent0
  7076                           
  7077                           ;main.c: 98: calculateCurrent2();
  7078  01E4  319F  271A  3180   	fcall	_calculateCurrent2
  7079                           
  7080                           ;main.c: 100: calculateCurrent3();
  7081  01E7  3192  22D9  3180   	fcall	_calculateCurrent3
  7082                           
  7083                           ;main.c: 102: current[1]=(int16_t)(current[3]*(voltage[3]/voltage[1]*.9));
  7084  01EA  0021               	movlb	1	; select bank1
  7085  01EB  0837               	movf	((_voltage+1)^(0+128)+6),w
  7086  01EC  00F3               	movwf	___awdiv@dividend+1
  7087  01ED  0836               	movf	(_voltage^(0+128)+6),w
  7088  01EE  00F2               	movwf	___awdiv@dividend
  7089  01EF  0833               	movf	((_voltage+1)^(0+128)+2),w
  7090  01F0  00F1               	movwf	___awdiv@divisor+1
  7091  01F1  0832               	movf	(_voltage^(0+128)+2),w
  7092  01F2  00F0               	movwf	___awdiv@divisor
  7093  01F3  3193  231E  3180   	fcall	___awdiv
  7094  01F6  0871               	movf	?___awdiv+1,w
  7095  01F7  00FA               	movwf	___awtoft@c+1
  7096  01F8  0870               	movf	?___awdiv,w
  7097  01F9  00F9               	movwf	___awtoft@c
  7098  01FA  319F  2794  3180   	fcall	___awtoft
  7099  01FD  0879               	movf	?___awtoft,w
  7100  01FE  0020               	movlb	0	; select bank0
  7101  01FF  00A4               	movwf	___ftmul@f2
  7102  0200  087A               	movf	?___awtoft+1,w
  7103  0201  00A5               	movwf	___ftmul@f2+1
  7104  0202  087B               	movf	?___awtoft+2,w
  7105  0203  00A6               	movwf	___ftmul@f2+2
  7106  0204  3066               	movlw	102
  7107  0205  00A1               	movwf	___ftmul@f1
  7108  0206  3066               	movlw	102
  7109  0207  00A2               	movwf	___ftmul@f1+1
  7110  0208  303F               	movlw	63
  7111  0209  00A3               	movwf	___ftmul@f1+2
  7112  020A  3197  274C  3180   	fcall	___ftmul
  7113  020D  0020               	movlb	0	; select bank0
  7114  020E  0821               	movf	?___ftmul,w
  7115  020F  0021               	movlb	1	; select bank1
  7116  0210  00E5               	movwf	_main$1324^(0+128)
  7117  0211  0020               	movlb	0	; select bank0
  7118  0212  0822               	movf	?___ftmul+1,w
  7119  0213  0021               	movlb	1	; select bank1
  7120  0214  00E6               	movwf	(_main$1324+1)^(0+128)
  7121  0215  0020               	movlb	0	; select bank0
  7122  0216  0823               	movf	?___ftmul+2,w
  7123  0217  0021               	movlb	1	; select bank1
  7124  0218  00E7               	movwf	(_main$1324+2)^(0+128)
  7125                           
  7126                           ;main.c: 102: current[1]=(int16_t)(current[3]*(voltage[3]/voltage[1]*.9));
  7127  0219  082F               	movf	((_current+1)^(0+128)+6),w
  7128  021A  00FA               	movwf	___awtoft@c+1
  7129  021B  082E               	movf	(_current^(0+128)+6),w
  7130  021C  00F9               	movwf	___awtoft@c
  7131  021D  319F  2794  3180   	fcall	___awtoft
  7132  0220  0879               	movf	?___awtoft,w
  7133  0221  0020               	movlb	0	; select bank0
  7134  0222  00A4               	movwf	___ftmul@f2
  7135  0223  087A               	movf	?___awtoft+1,w
  7136  0224  00A5               	movwf	___ftmul@f2+1
  7137  0225  087B               	movf	?___awtoft+2,w
  7138  0226  00A6               	movwf	___ftmul@f2+2
  7139  0227  0021               	movlb	1	; select bank1
  7140  0228  0865               	movf	_main$1324^(0+128),w
  7141  0229  0020               	movlb	0	; select bank0
  7142  022A  00A1               	movwf	___ftmul@f1
  7143  022B  0021               	movlb	1	; select bank1
  7144  022C  0866               	movf	(_main$1324+1)^(0+128),w
  7145  022D  0020               	movlb	0	; select bank0
  7146  022E  00A2               	movwf	___ftmul@f1+1
  7147  022F  0021               	movlb	1	; select bank1
  7148  0230  0867               	movf	(_main$1324+2)^(0+128),w
  7149  0231  0020               	movlb	0	; select bank0
  7150  0232  00A3               	movwf	___ftmul@f1+2
  7151  0233  3197  274C  3180   	fcall	___ftmul
  7152  0236  0020               	movlb	0	; select bank0
  7153  0237  0821               	movf	?___ftmul,w
  7154  0238  00B1               	movwf	___fttol@f1
  7155  0239  0822               	movf	?___ftmul+1,w
  7156  023A  00B2               	movwf	___fttol@f1+1
  7157  023B  0823               	movf	?___ftmul+2,w
  7158  023C  00B3               	movwf	___fttol@f1+2
  7159  023D  3180  2014  3180   	fcall	___fttol
  7160  0240  0020               	movlb	0	; select bank0
  7161  0241  0832               	movf	?___fttol+1,w
  7162  0242  0021               	movlb	1	; select bank1
  7163  0243  00AB               	movwf	((_current+1)^(0+128)+2)
  7164  0244  0020               	movlb	0	; select bank0
  7165  0245  0831               	movf	?___fttol,w
  7166  0246  0021               	movlb	1	; select bank1
  7167  0247  00AA               	movwf	(_current^(0+128)+2)
  7168                           
  7169                           ;main.c: 104: if(Imode[0])
  7170  0248  084C               	movf	_Imode^(0+128),w
  7171  0249  1903               	btfsc	3,2
  7172  024A  2A6B               	goto	l3785
  7173                           
  7174                           ;main.c: 105: {
  7175                           ;main.c: 106: if(voltage[2]<MPPT0)
  7176  024B  0835               	movf	((_voltage+1)^(0+128)+4),w
  7177  024C  3A80               	xorlw	128
  7178  024D  0020               	movlb	0	; select bank0
  7179  024E  00D9               	movwf	??_main
  7180  024F  0021               	movlb	1	; select bank1
  7181  0250  085B               	movf	(main@MPPT0+1)^(0+128),w
  7182  0251  3A80               	xorlw	128
  7183  0252  0020               	movlb	0	; select bank0
  7184  0253  0259               	subwf	??_main,w
  7185  0254  1D03               	skipz
  7186  0255  2A59               	goto	u4535
  7187  0256  0021               	movlb	1	; select bank1
  7188  0257  085A               	movf	main@MPPT0^(0+128),w
  7189  0258  0234               	subwf	(_voltage^(0+128)+4),w
  7190  0259                     u4535:	
  7191  0259  1C03               	btfss	3,0
  7192  025A  2A7B               	goto	L3
  7193                           
  7194                           ;main.c: 113: else if(voltage[2]>MPPT0)
  7195                           
  7196                           ;main.c: 111: }
  7197                           ;main.c: 112: }
  7198                           
  7199                           ;main.c: 109: {
  7200                           ;main.c: 110: dutyCycle6+=1;
  7201                           
  7202                           ;main.c: 107: {
  7203                           ;main.c: 108: if(dutyCycle6<1023)
  7204  025B  0021               	movlb	1	; select bank1
  7205  025C  085B               	movf	(main@MPPT0+1)^(0+128),w
  7206  025D  3A80               	xorlw	128
  7207  025E  0020               	movlb	0	; select bank0
  7208  025F  00D9               	movwf	??_main
  7209  0260  0021               	movlb	1	; select bank1
  7210  0261  0835               	movf	((_voltage+1)^(0+128)+4),w
  7211  0262  3A80               	xorlw	128
  7212  0263  0020               	movlb	0	; select bank0
  7213  0264  0259               	subwf	??_main,w
  7214  0265  1D03               	skipz
  7215  0266  2A97               	goto	u4595
  7216  0267  0021               	movlb	1	; select bank1
  7217  0268  0834               	movf	(_voltage^(0+128)+4),w
  7218  0269  025A               	subwf	main@MPPT0^(0+128),w
  7219  026A  2A97               	goto	u4595
  7220  026B                     l3785:	
  7221                           ;main.c: 121: }
  7222                           
  7223                           ;main.c: 118: }
  7224                           ;main.c: 119: }
  7225                           
  7226                           ;main.c: 116: {
  7227                           ;main.c: 117: dutyCycle6-=1;
  7228                           
  7229                           ;main.c: 114: {
  7230                           ;main.c: 115: if(dutyCycle6>0)
  7231                           
  7232                           
  7233                           ;main.c: 122: else
  7234                           ;main.c: 123: {
  7235                           ;main.c: 124: if(voltage[0]>(int16_t)Vref[0])
  7236  026B  083D               	movf	(_Vref+1)^(0+128),w
  7237  026C  3A80               	xorlw	128
  7238  026D  0020               	movlb	0	; select bank0
  7239  026E  00D9               	movwf	??_main
  7240  026F  0021               	movlb	1	; select bank1
  7241  0270  0831               	movf	(_voltage+1)^(0+128),w
  7242  0271  3A80               	xorlw	128
  7243  0272  0020               	movlb	0	; select bank0
  7244  0273  0259               	subwf	??_main,w
  7245  0274  1D03               	skipz
  7246  0275  2A79               	goto	u4575
  7247  0276  0021               	movlb	1	; select bank1
  7248  0277  0830               	movf	_voltage^(0+128),w
  7249  0278  023C               	subwf	_Vref^(0+128),w
  7250  0279                     u4575:	
  7251  0279  1803               	skipnc
  7252  027A  2A88               	goto	l3791
  7253  027B                     L3:	
  7254                           
  7255                           ;main.c: 125: {
  7256                           ;main.c: 126: if(dutyCycle6<1023) dutyCycle6+=1;
  7257  027B  3003               	movlw	3
  7258  027C  0021               	movlb	1	; select bank1
  7259  027D  0269               	subwf	(main@dutyCycle6+1)^(0+128),w
  7260  027E  30FF               	movlw	255
  7261  027F  1903               	skipnz
  7262  0280  0268               	subwf	main@dutyCycle6^(0+128),w
  7263  0281  1803               	skipnc
  7264  0282  2AA2               	goto	l3797
  7265  0283  3001               	movlw	1
  7266  0284  07E8               	addwf	main@dutyCycle6^(0+128),f
  7267  0285  3000               	movlw	0
  7268  0286  3DE9               	addwfc	(main@dutyCycle6+1)^(0+128),f
  7269                           
  7270                           ;main.c: 127: }
  7271  0287  2AA2               	goto	l3797
  7272  0288                     l3791:	
  7273                           
  7274                           ;main.c: 128: else if(voltage[0]<(int16_t)Vref[0])
  7275  0288  0021               	movlb	1	; select bank1
  7276  0289  0831               	movf	(_voltage+1)^(0+128),w
  7277  028A  3A80               	xorlw	128
  7278  028B  0020               	movlb	0	; select bank0
  7279  028C  00D9               	movwf	??_main
  7280  028D  0021               	movlb	1	; select bank1
  7281  028E  083D               	movf	(_Vref+1)^(0+128),w
  7282  028F  3A80               	xorlw	128
  7283  0290  0020               	movlb	0	; select bank0
  7284  0291  0259               	subwf	??_main,w
  7285  0292  1D03               	skipz
  7286  0293  2A97               	goto	u4595
  7287  0294  0021               	movlb	1	; select bank1
  7288  0295  083C               	movf	_Vref^(0+128),w
  7289  0296  0230               	subwf	_voltage^(0+128),w
  7290  0297                     u4595:	
  7291  0297  1803               	skipnc
  7292  0298  2AA2               	goto	l3797
  7293                           
  7294                           ;main.c: 129: {
  7295                           ;main.c: 130: if(dutyCycle6>0) dutyCycle6-=1;;
  7296  0299  0021               	movlb	1	; select bank1
  7297  029A  0868               	movf	main@dutyCycle6^(0+128),w
  7298  029B  0469               	iorwf	(main@dutyCycle6+1)^(0+128),w
  7299  029C  1903               	btfsc	3,2
  7300  029D  2AA2               	goto	l3797
  7301  029E  3001               	movlw	1
  7302  029F  02E8               	subwf	main@dutyCycle6^(0+128),f
  7303  02A0  3000               	movlw	0
  7304  02A1  3BE9               	subwfb	(main@dutyCycle6+1)^(0+128),f
  7305  02A2                     l3797:	
  7306                           ;main.c: 131: }
  7307                           
  7308                           
  7309                           ;main.c: 133: }
  7310                           ;main.c: 135: if(Imode[1])
  7311  02A2  0021               	movlb	1	; select bank1
  7312  02A3  084D               	movf	(_Imode^(0+128)+1),w
  7313  02A4  1903               	btfsc	3,2
  7314  02A5  2AB7               	goto	l3809
  7315                           
  7316                           ;main.c: 136: {
  7317                           ;main.c: 137: if(voltage[3]<MPPT1)
  7318  02A6  0837               	movf	((_voltage+1)^(0+128)+6),w
  7319  02A7  3A80               	xorlw	128
  7320  02A8  0020               	movlb	0	; select bank0
  7321  02A9  00D9               	movwf	??_main
  7322  02AA  0021               	movlb	1	; select bank1
  7323  02AB  085E               	movf	(main@MPPT1+1)^(0+128),w
  7324  02AC  3A80               	xorlw	128
  7325  02AD  0020               	movlb	0	; select bank0
  7326  02AE  0259               	subwf	??_main,w
  7327  02AF  1D03               	skipz
  7328  02B0  2AB4               	goto	u4625
  7329  02B1  0021               	movlb	1	; select bank1
  7330  02B2  085D               	movf	main@MPPT1^(0+128),w
  7331  02B3  0236               	subwf	(_voltage^(0+128)+6),w
  7332  02B4                     u4625:	
  7333  02B4  1C03               	btfss	3,0
  7334  02B5  2AC7               	goto	L4
  7335                           
  7336                           ;main.c: 142: }
  7337                           ;main.c: 143: }
  7338                           
  7339                           ;main.c: 140: {
  7340                           ;main.c: 141: dutyCycle7+=1;
  7341                           
  7342                           ;main.c: 138: {
  7343                           ;main.c: 139: if(dutyCycle7<1023)
  7344  02B6  2AE5               	goto	L5
  7345  02B7                     l3809:	
  7346                           ;main.c: 147: }
  7347                           ;main.c: 148: }
  7348                           
  7349                           ;main.c: 145: {
  7350                           ;main.c: 146: dutyCycle7-=1;
  7351                           
  7352                           ;main.c: 144: else if(dutyCycle7>0)
  7353                           
  7354                           
  7355                           ;main.c: 149: else
  7356                           ;main.c: 150: {
  7357                           ;main.c: 151: if(voltage[1]>(int16_t)Vref[1])
  7358  02B7  083F               	movf	((_Vref+1)^(0+128)+2),w
  7359  02B8  3A80               	xorlw	128
  7360  02B9  0020               	movlb	0	; select bank0
  7361  02BA  00D9               	movwf	??_main
  7362  02BB  0021               	movlb	1	; select bank1
  7363  02BC  0833               	movf	((_voltage+1)^(0+128)+2),w
  7364  02BD  3A80               	xorlw	128
  7365  02BE  0020               	movlb	0	; select bank0
  7366  02BF  0259               	subwf	??_main,w
  7367  02C0  1D03               	skipz
  7368  02C1  2AC5               	goto	u4655
  7369  02C2  0021               	movlb	1	; select bank1
  7370  02C3  0832               	movf	(_voltage^(0+128)+2),w
  7371  02C4  023E               	subwf	(_Vref^(0+128)+2),w
  7372  02C5                     u4655:	
  7373  02C5  1803               	skipnc
  7374  02C6  2AD4               	goto	l3815
  7375  02C7                     L4:	
  7376                           
  7377                           ;main.c: 152: {
  7378                           ;main.c: 153: if(dutyCycle7<1023) dutyCycle7+=1;
  7379  02C7  3003               	movlw	3
  7380  02C8  0021               	movlb	1	; select bank1
  7381  02C9  026B               	subwf	(main@dutyCycle7+1)^(0+128),w
  7382  02CA  30FF               	movlw	255
  7383  02CB  1903               	skipnz
  7384  02CC  026A               	subwf	main@dutyCycle7^(0+128),w
  7385  02CD  1803               	skipnc
  7386  02CE  2AEE               	goto	l3821
  7387  02CF  3001               	movlw	1
  7388  02D0  07EA               	addwf	main@dutyCycle7^(0+128),f
  7389  02D1  3000               	movlw	0
  7390  02D2  3DEB               	addwfc	(main@dutyCycle7+1)^(0+128),f
  7391                           
  7392                           ;main.c: 154: }
  7393  02D3  2AEE               	goto	l3821
  7394  02D4                     l3815:	
  7395                           
  7396                           ;main.c: 155: else if(voltage[1]<(int16_t)Vref[1])
  7397  02D4  0021               	movlb	1	; select bank1
  7398  02D5  0833               	movf	((_voltage+1)^(0+128)+2),w
  7399  02D6  3A80               	xorlw	128
  7400  02D7  0020               	movlb	0	; select bank0
  7401  02D8  00D9               	movwf	??_main
  7402  02D9  0021               	movlb	1	; select bank1
  7403  02DA  083F               	movf	((_Vref+1)^(0+128)+2),w
  7404  02DB  3A80               	xorlw	128
  7405  02DC  0020               	movlb	0	; select bank0
  7406  02DD  0259               	subwf	??_main,w
  7407  02DE  1D03               	skipz
  7408  02DF  2AE3               	goto	u4675
  7409  02E0  0021               	movlb	1	; select bank1
  7410  02E1  083E               	movf	(_Vref^(0+128)+2),w
  7411  02E2  0232               	subwf	(_voltage^(0+128)+2),w
  7412  02E3                     u4675:	
  7413  02E3  1803               	skipnc
  7414  02E4  2AEE               	goto	l3821
  7415  02E5                     L5:	
  7416                           
  7417                           ;main.c: 156: {
  7418                           ;main.c: 157: if(dutyCycle7>0) dutyCycle7-=1;;
  7419  02E5  0021               	movlb	1	; select bank1
  7420  02E6  086A               	movf	main@dutyCycle7^(0+128),w
  7421  02E7  046B               	iorwf	(main@dutyCycle7+1)^(0+128),w
  7422  02E8  1903               	btfsc	3,2
  7423  02E9  2AEE               	goto	l3821
  7424  02EA  3001               	movlw	1
  7425  02EB  02EA               	subwf	main@dutyCycle7^(0+128),f
  7426  02EC  3000               	movlw	0
  7427  02ED  3BEB               	subwfb	(main@dutyCycle7+1)^(0+128),f
  7428  02EE                     l3821:	
  7429                           ;main.c: 158: }
  7430                           
  7431                           
  7432                           ;main.c: 160: }
  7433                           ;main.c: 161: PWM6_LoadDutyValue(dutyCycle6);
  7434  02EE  0021               	movlb	1	; select bank1
  7435  02EF  0869               	movf	(main@dutyCycle6+1)^(0+128),w
  7436  02F0  00F1               	movwf	PWM6_LoadDutyValue@dutyCycle6+1
  7437  02F1  0868               	movf	main@dutyCycle6^(0+128),w
  7438  02F2  00F0               	movwf	PWM6_LoadDutyValue@dutyCycle6
  7439  02F3  319E  26D3  3180   	fcall	_PWM6_LoadDutyValue
  7440                           
  7441                           ;main.c: 162: PWM7_LoadDutyValue(dutyCycle7);
  7442  02F6  0021               	movlb	1	; select bank1
  7443  02F7  086B               	movf	(main@dutyCycle7+1)^(0+128),w
  7444  02F8  00F1               	movwf	PWM7_LoadDutyValue@dutyCycle7+1
  7445  02F9  086A               	movf	main@dutyCycle7^(0+128),w
  7446  02FA  00F0               	movwf	PWM7_LoadDutyValue@dutyCycle7
  7447  02FB  319E  26E9  3180   	fcall	_PWM7_LoadDutyValue
  7448                           
  7449                           ;main.c: 163: fastLoop=0;
  7450  02FE  0021               	movlb	1	; select bank1
  7451  02FF  01D8               	clrf	main@fastLoop^(0+128)
  7452  0300                     l3825:	
  7453                           
  7454                           ;main.c: 164: }
  7455                           ;main.c: 166: fastLoop+=1;
  7456  0300  3001               	movlw	1
  7457  0301  0020               	movlb	0	; select bank0
  7458  0302  00D9               	movwf	??_main
  7459  0303  0859               	movf	??_main,w
  7460  0304  0021               	movlb	1	; select bank1
  7461  0305  07D8               	addwf	main@fastLoop^(0+128),f
  7462                           
  7463                           ;main.c: 167: slowLoop+=1;
  7464  0306  3001               	movlw	1
  7465  0307  0020               	movlb	0	; select bank0
  7466  0308  00D9               	movwf	??_main
  7467  0309  0859               	movf	??_main,w
  7468  030A  0021               	movlb	1	; select bank1
  7469  030B  07D9               	addwf	main@slowLoop^(0+128),f
  7470                           
  7471                           ;main.c: 170: menuButton = readButton();
  7472  030C  3194  24EF  3180   	fcall	_readButton
  7473  030F  0020               	movlb	0	; select bank0
  7474  0310  00D9               	movwf	??_main
  7475  0311  0859               	movf	??_main,w
  7476  0312  0021               	movlb	1	; select bank1
  7477  0313  00DC               	movwf	main@menuButton^(0+128)
  7478                           
  7479                           ;main.c: 171: if(menuButton == 2) if(MPPT1>2700)MPPT1-=1;
  7480  0314  3002               	movlw	2
  7481  0315  065C               	xorwf	main@menuButton^(0+128),w
  7482  0316  1D03               	btfss	3,2
  7483  0317  2B2A               	goto	l3837
  7484  0318  085E               	movf	(main@MPPT1+1)^(0+128),w
  7485  0319  3A80               	xorlw	128
  7486  031A  0020               	movlb	0	; select bank0
  7487  031B  00D9               	movwf	??_main
  7488  031C  308A               	movlw	138
  7489  031D  0259               	subwf	??_main,w
  7490  031E  1D03               	skipz
  7491  031F  2B23               	goto	u4705
  7492  0320  308D               	movlw	141
  7493  0321  0021               	movlb	1	; select bank1
  7494  0322  025D               	subwf	main@MPPT1^(0+128),w
  7495  0323                     u4705:	
  7496  0323  1C03               	skipc
  7497  0324  2B2A               	goto	l3837
  7498  0325  30FF               	movlw	255
  7499  0326  0021               	movlb	1	; select bank1
  7500  0327  07DD               	addwf	main@MPPT1^(0+128),f
  7501  0328  30FF               	movlw	255
  7502  0329  3DDE               	addwfc	(main@MPPT1+1)^(0+128),f
  7503  032A                     l3837:	
  7504                           
  7505                           ;main.c: 172: if(menuButton == 3)if(MPPT1<3200)MPPT1+=1;
  7506  032A  3003               	movlw	3
  7507  032B  0021               	movlb	1	; select bank1
  7508  032C  065C               	xorwf	main@menuButton^(0+128),w
  7509  032D  1D03               	btfss	3,2
  7510  032E  2B41               	goto	l3843
  7511  032F  085E               	movf	(main@MPPT1+1)^(0+128),w
  7512  0330  3A80               	xorlw	128
  7513  0331  0020               	movlb	0	; select bank0
  7514  0332  00D9               	movwf	??_main
  7515  0333  308C               	movlw	140
  7516  0334  0259               	subwf	??_main,w
  7517  0335  1D03               	skipz
  7518  0336  2B3A               	goto	u4725
  7519  0337  3080               	movlw	128
  7520  0338  0021               	movlb	1	; select bank1
  7521  0339  025D               	subwf	main@MPPT1^(0+128),w
  7522  033A                     u4725:	
  7523  033A  1803               	skipnc
  7524  033B  2B41               	goto	l3843
  7525  033C  3001               	movlw	1
  7526  033D  0021               	movlb	1	; select bank1
  7527  033E  07DD               	addwf	main@MPPT1^(0+128),f
  7528  033F  3000               	movlw	0
  7529  0340  3DDE               	addwfc	(main@MPPT1+1)^(0+128),f
  7530  0341                     l3843:	
  7531                           
  7532                           ;main.c: 173: if(menuButton == 1)LCDInit();
  7533  0341  0021               	movlb	1	; select bank1
  7534  0342  035C               	decf	main@menuButton^(0+128),w
  7535  0343  1D03               	btfss	3,2
  7536  0344  2B48               	goto	l3847
  7537  0345  3191  21A7  3180   	fcall	_LCDInit
  7538  0348                     l3847:	
  7539                           
  7540                           ;main.c: 175: if(slowLoop>250)
  7541  0348  30FB               	movlw	251
  7542  0349  0021               	movlb	1	; select bank1
  7543  034A  0259               	subwf	main@slowLoop^(0+128),w
  7544  034B  1C03               	skipc
  7545  034C  28D0               	goto	l3735
  7546                           
  7547                           ;main.c: 176: {
  7548                           ;main.c: 177: if(current[0]>current[3]*(voltage[3]/voltage[1]*.9))
  7549  034D  0837               	movf	((_voltage+1)^(0+128)+6),w
  7550  034E  00F3               	movwf	___awdiv@dividend+1
  7551  034F  0836               	movf	(_voltage^(0+128)+6),w
  7552  0350  00F2               	movwf	___awdiv@dividend
  7553  0351  0833               	movf	((_voltage+1)^(0+128)+2),w
  7554  0352  00F1               	movwf	___awdiv@divisor+1
  7555  0353  0832               	movf	(_voltage^(0+128)+2),w
  7556  0354  00F0               	movwf	___awdiv@divisor
  7557  0355  3193  231E  3180   	fcall	___awdiv
  7558  0358  0871               	movf	?___awdiv+1,w
  7559  0359  00FA               	movwf	___awtoft@c+1
  7560  035A  0870               	movf	?___awdiv,w
  7561  035B  00F9               	movwf	___awtoft@c
  7562  035C  319F  2794  3180   	fcall	___awtoft
  7563  035F  0879               	movf	?___awtoft,w
  7564  0360  0020               	movlb	0	; select bank0
  7565  0361  00A4               	movwf	___ftmul@f2
  7566  0362  087A               	movf	?___awtoft+1,w
  7567  0363  00A5               	movwf	___ftmul@f2+1
  7568  0364  087B               	movf	?___awtoft+2,w
  7569  0365  00A6               	movwf	___ftmul@f2+2
  7570  0366  3066               	movlw	102
  7571  0367  00A1               	movwf	___ftmul@f1
  7572  0368  3066               	movlw	102
  7573  0369  00A2               	movwf	___ftmul@f1+1
  7574  036A  303F               	movlw	63
  7575  036B  00A3               	movwf	___ftmul@f1+2
  7576  036C  3197  274C  3180   	fcall	___ftmul
  7577  036F  0020               	movlb	0	; select bank0
  7578  0370  0821               	movf	?___ftmul,w
  7579  0371  0021               	movlb	1	; select bank1
  7580  0372  00E5               	movwf	_main$1324^(0+128)
  7581  0373  0020               	movlb	0	; select bank0
  7582  0374  0822               	movf	?___ftmul+1,w
  7583  0375  0021               	movlb	1	; select bank1
  7584  0376  00E6               	movwf	(_main$1324+1)^(0+128)
  7585  0377  0020               	movlb	0	; select bank0
  7586  0378  0823               	movf	?___ftmul+2,w
  7587  0379  0021               	movlb	1	; select bank1
  7588  037A  00E7               	movwf	(_main$1324+2)^(0+128)
  7589                           
  7590                           ;main.c: 176: {
  7591                           ;main.c: 177: if(current[0]>current[3]*(voltage[3]/voltage[1]*.9))
  7592  037B  0865               	movf	_main$1324^(0+128),w
  7593  037C  0020               	movlb	0	; select bank0
  7594  037D  00A1               	movwf	___ftmul@f1
  7595  037E  0021               	movlb	1	; select bank1
  7596  037F  0866               	movf	(_main$1324+1)^(0+128),w
  7597  0380  0020               	movlb	0	; select bank0
  7598  0381  00A2               	movwf	___ftmul@f1+1
  7599  0382  0021               	movlb	1	; select bank1
  7600  0383  0867               	movf	(_main$1324+2)^(0+128),w
  7601  0384  0020               	movlb	0	; select bank0
  7602  0385  00A3               	movwf	___ftmul@f1+2
  7603  0386  0021               	movlb	1	; select bank1
  7604  0387  082F               	movf	((_current+1)^(0+128)+6),w
  7605  0388  00FA               	movwf	___awtoft@c+1
  7606  0389  082E               	movf	(_current^(0+128)+6),w
  7607  038A  00F9               	movwf	___awtoft@c
  7608  038B  319F  2794  3180   	fcall	___awtoft
  7609  038E  0879               	movf	?___awtoft,w
  7610  038F  0020               	movlb	0	; select bank0
  7611  0390  00A4               	movwf	___ftmul@f2
  7612  0391  087A               	movf	?___awtoft+1,w
  7613  0392  00A5               	movwf	___ftmul@f2+1
  7614  0393  087B               	movf	?___awtoft+2,w
  7615  0394  00A6               	movwf	___ftmul@f2+2
  7616  0395  3197  274C  3180   	fcall	___ftmul
  7617  0398  0020               	movlb	0	; select bank0
  7618  0399  0821               	movf	?___ftmul,w
  7619  039A  00B1               	movwf	___ftge@ff1
  7620  039B  0822               	movf	?___ftmul+1,w
  7621  039C  00B2               	movwf	___ftge@ff1+1
  7622  039D  0823               	movf	?___ftmul+2,w
  7623  039E  00B3               	movwf	___ftge@ff1+2
  7624  039F  0021               	movlb	1	; select bank1
  7625  03A0  0829               	movf	(_current+1)^(0+128),w
  7626  03A1  00FA               	movwf	___awtoft@c+1
  7627  03A2  0828               	movf	_current^(0+128),w
  7628  03A3  00F9               	movwf	___awtoft@c
  7629  03A4  319F  2794  3180   	fcall	___awtoft
  7630  03A7  0879               	movf	?___awtoft,w
  7631  03A8  0020               	movlb	0	; select bank0
  7632  03A9  00B4               	movwf	___ftge@ff2
  7633  03AA  087A               	movf	?___awtoft+1,w
  7634  03AB  00B5               	movwf	___ftge@ff2+1
  7635  03AC  087B               	movf	?___awtoft+2,w
  7636  03AD  00B6               	movwf	___ftge@ff2+2
  7637  03AE  3192  2258  3180   	fcall	___ftge
  7638  03B1  1803               	btfsc	3,0
  7639  03B2  2BB8               	goto	l3853
  7640                           
  7641                           ;main.c: 178: {
  7642                           ;main.c: 179: largerIOut=current[0];
  7643  03B3  0021               	movlb	1	; select bank1
  7644  03B4  0829               	movf	(_current+1)^(0+128),w
  7645  03B5  00E0               	movwf	(main@largerIOut+1)^(0+128)
  7646  03B6  0828               	movf	_current^(0+128),w
  7647  03B7  2C15               	goto	L1
  7648  03B8                     l3853:	
  7649                           ;main.c: 180: }
  7650                           
  7651                           
  7652                           ;main.c: 181: else
  7653                           ;main.c: 182: {
  7654                           ;main.c: 183: largerIOut=(int16_t)(current[3]*(voltage[3]/voltage[1]*.9));
  7655  03B8  0021               	movlb	1	; select bank1
  7656  03B9  0837               	movf	((_voltage+1)^(0+128)+6),w
  7657  03BA  00F3               	movwf	___awdiv@dividend+1
  7658  03BB  0836               	movf	(_voltage^(0+128)+6),w
  7659  03BC  00F2               	movwf	___awdiv@dividend
  7660  03BD  0833               	movf	((_voltage+1)^(0+128)+2),w
  7661  03BE  00F1               	movwf	___awdiv@divisor+1
  7662  03BF  0832               	movf	(_voltage^(0+128)+2),w
  7663  03C0  00F0               	movwf	___awdiv@divisor
  7664  03C1  3193  231E  3180   	fcall	___awdiv
  7665  03C4  0871               	movf	?___awdiv+1,w
  7666  03C5  00FA               	movwf	___awtoft@c+1
  7667  03C6  0870               	movf	?___awdiv,w
  7668  03C7  00F9               	movwf	___awtoft@c
  7669  03C8  319F  2794  3180   	fcall	___awtoft
  7670  03CB  0879               	movf	?___awtoft,w
  7671  03CC  0020               	movlb	0	; select bank0
  7672  03CD  00A4               	movwf	___ftmul@f2
  7673  03CE  087A               	movf	?___awtoft+1,w
  7674  03CF  00A5               	movwf	___ftmul@f2+1
  7675  03D0  087B               	movf	?___awtoft+2,w
  7676  03D1  00A6               	movwf	___ftmul@f2+2
  7677  03D2  3066               	movlw	102
  7678  03D3  00A1               	movwf	___ftmul@f1
  7679  03D4  3066               	movlw	102
  7680  03D5  00A2               	movwf	___ftmul@f1+1
  7681  03D6  303F               	movlw	63
  7682  03D7  00A3               	movwf	___ftmul@f1+2
  7683  03D8  3197  274C  3180   	fcall	___ftmul
  7684  03DB  0020               	movlb	0	; select bank0
  7685  03DC  0821               	movf	?___ftmul,w
  7686  03DD  0021               	movlb	1	; select bank1
  7687  03DE  00E5               	movwf	_main$1324^(0+128)
  7688  03DF  0020               	movlb	0	; select bank0
  7689  03E0  0822               	movf	?___ftmul+1,w
  7690  03E1  0021               	movlb	1	; select bank1
  7691  03E2  00E6               	movwf	(_main$1324+1)^(0+128)
  7692  03E3  0020               	movlb	0	; select bank0
  7693  03E4  0823               	movf	?___ftmul+2,w
  7694  03E5  0021               	movlb	1	; select bank1
  7695  03E6  00E7               	movwf	(_main$1324+2)^(0+128)
  7696                           
  7697                           ;main.c: 181: else
  7698                           ;main.c: 182: {
  7699                           ;main.c: 183: largerIOut=(int16_t)(current[3]*(voltage[3]/voltage[1]*.9));
  7700  03E7  082F               	movf	((_current+1)^(0+128)+6),w
  7701  03E8  00FA               	movwf	___awtoft@c+1
  7702  03E9  082E               	movf	(_current^(0+128)+6),w
  7703  03EA  00F9               	movwf	___awtoft@c
  7704  03EB  319F  2794  3180   	fcall	___awtoft
  7705  03EE  0879               	movf	?___awtoft,w
  7706  03EF  0020               	movlb	0	; select bank0
  7707  03F0  00A4               	movwf	___ftmul@f2
  7708  03F1  087A               	movf	?___awtoft+1,w
  7709  03F2  00A5               	movwf	___ftmul@f2+1
  7710  03F3  087B               	movf	?___awtoft+2,w
  7711  03F4  00A6               	movwf	___ftmul@f2+2
  7712  03F5  0021               	movlb	1	; select bank1
  7713  03F6  0865               	movf	_main$1324^(0+128),w
  7714  03F7  0020               	movlb	0	; select bank0
  7715  03F8  00A1               	movwf	___ftmul@f1
  7716  03F9  0021               	movlb	1	; select bank1
  7717  03FA  0866               	movf	(_main$1324+1)^(0+128),w
  7718  03FB  0020               	movlb	0	; select bank0
  7719  03FC  00A2               	movwf	___ftmul@f1+1
  7720  03FD  0021               	movlb	1	; select bank1
  7721  03FE  0867               	movf	(_main$1324+2)^(0+128),w
  7722  03FF  0020               	movlb	0	; select bank0
  7723  0400  00A3               	movwf	___ftmul@f1+2
  7724  0401  3197  274C  3180   	fcall	___ftmul
  7725  0404  0020               	movlb	0	; select bank0
  7726  0405  0821               	movf	?___ftmul,w
  7727  0406  00B1               	movwf	___fttol@f1
  7728  0407  0822               	movf	?___ftmul+1,w
  7729  0408  00B2               	movwf	___fttol@f1+1
  7730  0409  0823               	movf	?___ftmul+2,w
  7731  040A  00B3               	movwf	___fttol@f1+2
  7732  040B  3180  2014  3180   	fcall	___fttol
  7733  040E  0020               	movlb	0	; select bank0
  7734  040F  0832               	movf	?___fttol+1,w
  7735  0410  0021               	movlb	1	; select bank1
  7736  0411  00E0               	movwf	(main@largerIOut+1)^(0+128)
  7737  0412  0020               	movlb	0	; select bank0
  7738  0413  0831               	movf	?___fttol,w
  7739  0414  0021               	movlb	1	; select bank1
  7740  0415                     L1:	
  7741  0415  00DF               	movwf	main@largerIOut^(0+128)
  7742                           
  7743                           ;main.c: 185: }
  7744                           ;main.c: 187: if(largerIOut>25)
  7745  0416  0860               	movf	(main@largerIOut+1)^(0+128),w
  7746  0417  3A80               	xorlw	128
  7747  0418  0020               	movlb	0	; select bank0
  7748  0419  00D9               	movwf	??_main
  7749  041A  3080               	movlw	128
  7750  041B  0259               	subwf	??_main,w
  7751  041C  1D03               	skipz
  7752  041D  2C21               	goto	u4765
  7753  041E  301A               	movlw	26
  7754  041F  0021               	movlb	1	; select bank1
  7755  0420  025F               	subwf	main@largerIOut^(0+128),w
  7756  0421                     u4765:	
  7757  0421  1C03               	skipc
  7758  0422  2C75               	goto	l3875
  7759                           
  7760                           ;main.c: 188: {
  7761                           ;main.c: 189: if((uint16_t)largerIOut+5>dutyCycle1)
  7762  0423  0021               	movlb	1	; select bank1
  7763  0424  085F               	movf	main@largerIOut^(0+128),w
  7764  0425  3E05               	addlw	5
  7765  0426  0020               	movlb	0	; select bank0
  7766  0427  00D9               	movwf	??_main
  7767  0428  3000               	movlw	0
  7768  0429  0021               	movlb	1	; select bank1
  7769  042A  3D60               	addwfc	(main@largerIOut+1)^(0+128),w
  7770  042B  0020               	movlb	0	; select bank0
  7771  042C  00DA               	movwf	??_main+1
  7772  042D  085A               	movf	??_main+1,w
  7773  042E  0021               	movlb	1	; select bank1
  7774  042F  0264               	subwf	(main@dutyCycle1+1)^(0+128),w
  7775  0430  1D03               	skipz
  7776  0431  2C36               	goto	u4775
  7777  0432  0020               	movlb	0	; select bank0
  7778  0433  0859               	movf	??_main,w
  7779  0434  0021               	movlb	1	; select bank1
  7780  0435  0263               	subwf	main@dutyCycle1^(0+128),w
  7781  0436                     u4775:	
  7782  0436  1803               	skipnc
  7783  0437  2C3D               	goto	l3861
  7784                           
  7785                           ;main.c: 190: {
  7786                           ;main.c: 191: dutyCycle1+=1;
  7787  0438  3001               	movlw	1
  7788  0439  07E3               	addwf	main@dutyCycle1^(0+128),f
  7789  043A  3000               	movlw	0
  7790  043B  3DE4               	addwfc	(main@dutyCycle1+1)^(0+128),f
  7791                           
  7792                           ;main.c: 192: }
  7793  043C  2C41               	goto	l3863
  7794  043D                     l3861:	
  7795                           
  7796                           ;main.c: 193: else dutyCycle1-=1;
  7797  043D  3001               	movlw	1
  7798  043E  02E3               	subwf	main@dutyCycle1^(0+128),f
  7799  043F  3000               	movlw	0
  7800  0440  3BE4               	subwfb	(main@dutyCycle1+1)^(0+128),f
  7801  0441                     l3863:	
  7802                           
  7803                           ;main.c: 195: if((uint16_t)largerIOut+5>tempFanOutput)
  7804  0441  085F               	movf	main@largerIOut^(0+128),w
  7805  0442  3E05               	addlw	5
  7806  0443  0020               	movlb	0	; select bank0
  7807  0444  00D9               	movwf	??_main
  7808  0445  3000               	movlw	0
  7809  0446  0021               	movlb	1	; select bank1
  7810  0447  3D60               	addwfc	(main@largerIOut+1)^(0+128),w
  7811  0448  0020               	movlb	0	; select bank0
  7812  0449  00DA               	movwf	??_main+1
  7813  044A  085A               	movf	??_main+1,w
  7814  044B  0021               	movlb	1	; select bank1
  7815  044C  0262               	subwf	(main@tempFanOutput+1)^(0+128),w
  7816  044D  1D03               	skipz
  7817  044E  2C53               	goto	u4785
  7818  044F  0020               	movlb	0	; select bank0
  7819  0450  0859               	movf	??_main,w
  7820  0451  0021               	movlb	1	; select bank1
  7821  0452  0261               	subwf	main@tempFanOutput^(0+128),w
  7822  0453                     u4785:	
  7823  0453  1803               	skipnc
  7824  0454  2C61               	goto	l3869
  7825                           
  7826                           ;main.c: 196: {
  7827                           ;main.c: 197: if(tempFanOutput<75)
  7828  0455  3000               	movlw	0
  7829  0456  0262               	subwf	(main@tempFanOutput+1)^(0+128),w
  7830  0457  304B               	movlw	75
  7831  0458  1903               	skipnz
  7832  0459  0261               	subwf	main@tempFanOutput^(0+128),w
  7833  045A  1803               	skipnc
  7834  045B  2C69               	goto	l120
  7835                           
  7836                           ;main.c: 198: {
  7837                           ;main.c: 199: tempFanOutput+=1;
  7838  045C  3001               	movlw	1
  7839  045D  07E1               	addwf	main@tempFanOutput^(0+128),f
  7840  045E  3000               	movlw	0
  7841  045F  3DE2               	addwfc	(main@tempFanOutput+1)^(0+128),f
  7842                           
  7843                           ;main.c: 200: }
  7844                           ;main.c: 201: }
  7845  0460  2C69               	goto	l120
  7846  0461                     l3869:	
  7847                           
  7848                           ;main.c: 202: else
  7849                           ;main.c: 203: {
  7850                           ;main.c: 204: if(tempFanOutput>0)tempFanOutput-=1;
  7851  0461  0861               	movf	main@tempFanOutput^(0+128),w
  7852  0462  0462               	iorwf	(main@tempFanOutput+1)^(0+128),w
  7853  0463  1903               	btfsc	3,2
  7854  0464  2C69               	goto	l120
  7855  0465  3001               	movlw	1
  7856  0466  02E1               	subwf	main@tempFanOutput^(0+128),f
  7857  0467  3000               	movlw	0
  7858  0468  3BE2               	subwfb	(main@tempFanOutput+1)^(0+128),f
  7859  0469                     l120:	
  7860                           
  7861                           ;main.c: 205: }
  7862                           ;main.c: 207: dutyCycle1=tempFanOutput;
  7863  0469  0862               	movf	(main@tempFanOutput+1)^(0+128),w
  7864  046A  00E4               	movwf	(main@dutyCycle1+1)^(0+128)
  7865  046B  0861               	movf	main@tempFanOutput^(0+128),w
  7866  046C  00E3               	movwf	main@dutyCycle1^(0+128)
  7867                           
  7868                           ;main.c: 208: if(dutyCycle1<19)dutyCycle1=0;
  7869  046D  3000               	movlw	0
  7870  046E  0264               	subwf	(main@dutyCycle1+1)^(0+128),w
  7871  046F  3013               	movlw	19
  7872  0470  1903               	skipnz
  7873  0471  0263               	subwf	main@dutyCycle1^(0+128),w
  7874  0472  1803               	skipnc
  7875  0473  2C78               	goto	l3877
  7876  0474  2C76               	goto	L2
  7877  0475                     l3875:	
  7878                           ;main.c: 209: }
  7879                           
  7880                           
  7881                           ;main.c: 210: else
  7882                           ;main.c: 211: {
  7883                           ;main.c: 212: dutyCycle1=0;
  7884  0475  0021               	movlb	1	; select bank1
  7885  0476                     L2:	
  7886  0476  01E3               	clrf	main@dutyCycle1^(0+128)
  7887  0477  01E4               	clrf	(main@dutyCycle1+1)^(0+128)
  7888  0478                     l3877:	
  7889                           
  7890                           ;main.c: 213: }
  7891                           ;main.c: 214: if(!(RB2))
  7892  0478  0020               	movlb	0	; select bank0
  7893  0479  190D               	btfsc	13,2	;volatile
  7894  047A  2C8C               	goto	l3881
  7895                           
  7896                           ;main.c: 215: {
  7897                           ;main.c: 216: dutyCycle1=55;
  7898  047B  3037               	movlw	55
  7899  047C  0021               	movlb	1	; select bank1
  7900  047D  00E3               	movwf	main@dutyCycle1^(0+128)
  7901  047E  3000               	movlw	0
  7902  047F  00E4               	movwf	(main@dutyCycle1^(0+128)+1)
  7903                           
  7904                           ;main.c: 217: batteryState[0]=CHARGE;
  7905  0480  3004               	movlw	4
  7906  0481  0020               	movlb	0	; select bank0
  7907  0482  00D9               	movwf	??_main
  7908  0483  0859               	movf	??_main,w
  7909  0484  0021               	movlb	1	; select bank1
  7910  0485  00CE               	movwf	_batteryState^(0+128)
  7911                           
  7912                           ;main.c: 218: batteryState[1]=CHARGE;
  7913  0486  3004               	movlw	4
  7914  0487  0020               	movlb	0	; select bank0
  7915  0488  00D9               	movwf	??_main
  7916  0489  0859               	movf	??_main,w
  7917  048A  0021               	movlb	1	; select bank1
  7918  048B  00CF               	movwf	(_batteryState^(0+128)+1)
  7919  048C                     l3881:	
  7920                           
  7921                           ;main.c: 219: }
  7922                           ;main.c: 221: PWM1_LoadDutyValue(dutyCycle1);
  7923  048C  0021               	movlb	1	; select bank1
  7924  048D  0864               	movf	(main@dutyCycle1+1)^(0+128),w
  7925  048E  00F1               	movwf	PWM1_LoadDutyValue@dutyCycle1+1
  7926  048F  0863               	movf	main@dutyCycle1^(0+128),w
  7927  0490  00F0               	movwf	PWM1_LoadDutyValue@dutyCycle1
  7928  0491  319E  26BD  3180   	fcall	_PWM1_LoadDutyValue
  7929                           
  7930                           ;main.c: 223: ADREF = 0x00;
  7931  0494  0021               	movlb	1	; select bank1
  7932  0495  019A               	clrf	26	;volatile
  7933                           
  7934                           ;main.c: 224: batteryTemp=tempCalc(ADCRead(9));
  7935  0496  3009               	movlw	9
  7936  0497  3191  212F  3180   	fcall	_ADCRead
  7937  049A  0871               	movf	?_ADCRead+1,w
  7938  049B  0020               	movlb	0	; select bank0
  7939  049C  00CF               	movwf	tempCalc@analogValue+1
  7940  049D  0870               	movf	?_ADCRead,w
  7941  049E  00CE               	movwf	tempCalc@analogValue
  7942  049F  3188  20C7  3180   	fcall	_tempCalc
  7943  04A2  0020               	movlb	0	; select bank0
  7944  04A3  084F               	movf	?_tempCalc+1,w
  7945  04A4  0021               	movlb	1	; select bank1
  7946  04A5  00EE               	movwf	(_batteryTemp+1)^(0+128)
  7947  04A6  0020               	movlb	0	; select bank0
  7948  04A7  084E               	movf	?_tempCalc,w
  7949  04A8  0021               	movlb	1	; select bank1
  7950  04A9  00ED               	movwf	_batteryTemp^(0+128)
  7951                           
  7952                           ;main.c: 225: ADREF = 0x03;
  7953  04AA  3003               	movlw	3
  7954  04AB  009A               	movwf	26	;volatile
  7955                           
  7956                           ;main.c: 227: displayRefresh+=1;
  7957  04AC  3001               	movlw	1
  7958  04AD  0020               	movlb	0	; select bank0
  7959  04AE  00D9               	movwf	??_main
  7960  04AF  0859               	movf	??_main,w
  7961  04B0  0021               	movlb	1	; select bank1
  7962  04B1  07D7               	addwf	main@displayRefresh^(0+128),f
  7963                           
  7964                           ;main.c: 228: if(displayRefresh>80)
  7965  04B2  3051               	movlw	81
  7966  04B3  0257               	subwf	main@displayRefresh^(0+128),w
  7967  04B4  1C03               	skipc
  7968  04B5  2CBB               	goto	l3897
  7969                           
  7970                           ;main.c: 229: {
  7971                           ;main.c: 230: LCDClear();
  7972  04B6  319F  27DA  3180   	fcall	_LCDClear
  7973                           
  7974                           ;main.c: 231: displayRefresh=0;
  7975  04B9  0021               	movlb	1	; select bank1
  7976  04BA  01D7               	clrf	main@displayRefresh^(0+128)
  7977  04BB                     l3897:	
  7978                           
  7979                           ;main.c: 233: }
  7980                           ;main.c: 234: Battery_State_Machine(0);
  7981  04BB  3000               	movlw	0
  7982  04BC  318E  2643  3180   	fcall	_Battery_State_Machine
  7983                           
  7984                           ;main.c: 235: Battery_State_Machine(1);
  7985  04BF  3001               	movlw	1
  7986  04C0  318E  2643  3180   	fcall	_Battery_State_Machine
  7987                           
  7988                           ;main.c: 238: { gotoXY(0,0); LCDWriteString("In:");};
  7989  04C3  01F5               	clrf	gotoXY@y
  7990  04C4  3000               	movlw	0
  7991  04C5  319E  2696  3180   	fcall	_gotoXY
  7992  04C8  3025               	movlw	low (STR_1| (0+32768))
  7993  04C9  00FC               	movwf	LCDWriteString@characters
  7994  04CA  3098               	movlw	high (STR_1| (0+32768))
  7995  04CB  00FD               	movwf	LCDWriteString@characters+1
  7996  04CC  319E  26A9  3180   	fcall	_LCDWriteString
  7997                           
  7998                           ;main.c: 241: { gotoXY(26,0); LCDWriteString("Out:");};
  7999  04CF  01F5               	clrf	gotoXY@y
  8000  04D0  301A               	movlw	26
  8001  04D1  319E  2696  3180   	fcall	_gotoXY
  8002  04D4  3020               	movlw	low (STR_2| (0+32768))
  8003  04D5  00FC               	movwf	LCDWriteString@characters
  8004  04D6  3098               	movlw	high (STR_2| (0+32768))
  8005  04D7  00FD               	movwf	LCDWriteString@characters+1
  8006  04D8  319E  26A9  3180   	fcall	_LCDWriteString
  8007                           
  8008                           ;main.c: 242: { gotoXY(52,0); LCDWriteString("Ref:");};
  8009  04DB  01F5               	clrf	gotoXY@y
  8010  04DC  3034               	movlw	52
  8011  04DD  319E  2696  3180   	fcall	_gotoXY
  8012  04E0  301B               	movlw	low (STR_3| (0+32768))
  8013  04E1  00FC               	movwf	LCDWriteString@characters
  8014  04E2  3098               	movlw	high (STR_3| (0+32768))
  8015  04E3  00FD               	movwf	LCDWriteString@characters+1
  8016  04E4  319E  26A9  3180   	fcall	_LCDWriteString
  8017                           
  8018                           ;main.c: 244: { gotoXY(0,1); LCDWriteInt(voltage[2],4, 2, 0);};
  8019  04E7  01F5               	clrf	gotoXY@y
  8020  04E8  0AF5               	incf	gotoXY@y,f
  8021  04E9  3000               	movlw	0
  8022  04EA  319E  2696  3180   	fcall	_gotoXY
  8023  04ED  0021               	movlb	1	; select bank1
  8024  04EE  0835               	movf	((_voltage+1)^(0+128)+4),w
  8025  04EF  0020               	movlb	0	; select bank0
  8026  04F0  00C0               	movwf	LCDWriteInt@value+1
  8027  04F1  0021               	movlb	1	; select bank1
  8028  04F2  0834               	movf	(_voltage^(0+128)+4),w
  8029  04F3  0020               	movlb	0	; select bank0
  8030  04F4  00BF               	movwf	LCDWriteInt@value
  8031  04F5  3004               	movlw	4
  8032  04F6  00D9               	movwf	??_main
  8033  04F7  0859               	movf	??_main,w
  8034  04F8  00C1               	movwf	LCDWriteInt@fieldLength
  8035  04F9  3002               	movlw	2
  8036  04FA  00DA               	movwf	??_main+1
  8037  04FB  085A               	movf	??_main+1,w
  8038  04FC  00C2               	movwf	LCDWriteInt@numPlaces
  8039  04FD  01C3               	clrf	LCDWriteInt@sign
  8040  04FE  3188  200E  3180   	fcall	_LCDWriteInt
  8041                           
  8042                           ;main.c: 246: LCDWriteCharacter('V');
  8043  0501  3056               	movlw	86
  8044  0502  3193  236F  3180   	fcall	_LCDWriteCharacter
  8045                           
  8046                           ;main.c: 248: { gotoXY(26,1); LCDWriteInt(voltage[0],4, 2, 0);};
  8047  0505  01F5               	clrf	gotoXY@y
  8048  0506  0AF5               	incf	gotoXY@y,f
  8049  0507  301A               	movlw	26
  8050  0508  319E  2696  3180   	fcall	_gotoXY
  8051  050B  0021               	movlb	1	; select bank1
  8052  050C  0831               	movf	(_voltage+1)^(0+128),w
  8053  050D  0020               	movlb	0	; select bank0
  8054  050E  00C0               	movwf	LCDWriteInt@value+1
  8055  050F  0021               	movlb	1	; select bank1
  8056  0510  0830               	movf	_voltage^(0+128),w
  8057  0511  0020               	movlb	0	; select bank0
  8058  0512  00BF               	movwf	LCDWriteInt@value
  8059  0513  3004               	movlw	4
  8060  0514  00D9               	movwf	??_main
  8061  0515  0859               	movf	??_main,w
  8062  0516  00C1               	movwf	LCDWriteInt@fieldLength
  8063  0517  3002               	movlw	2
  8064  0518  00DA               	movwf	??_main+1
  8065  0519  085A               	movf	??_main+1,w
  8066  051A  00C2               	movwf	LCDWriteInt@numPlaces
  8067  051B  01C3               	clrf	LCDWriteInt@sign
  8068  051C  3188  200E  3180   	fcall	_LCDWriteInt
  8069                           
  8070                           ;main.c: 250: LCDWriteCharacter('V');
  8071  051F  3056               	movlw	86
  8072  0520  3193  236F  3180   	fcall	_LCDWriteCharacter
  8073                           
  8074                           ;main.c: 252: { gotoXY(52,1); LCDWriteInt(Vref[0],4, 2, 0);};
  8075  0523  01F5               	clrf	gotoXY@y
  8076  0524  0AF5               	incf	gotoXY@y,f
  8077  0525  3034               	movlw	52
  8078  0526  319E  2696  3180   	fcall	_gotoXY
  8079  0529  0021               	movlb	1	; select bank1
  8080  052A  083D               	movf	(_Vref+1)^(0+128),w
  8081  052B  0020               	movlb	0	; select bank0
  8082  052C  00C0               	movwf	LCDWriteInt@value+1
  8083  052D  0021               	movlb	1	; select bank1
  8084  052E  083C               	movf	_Vref^(0+128),w
  8085  052F  0020               	movlb	0	; select bank0
  8086  0530  00BF               	movwf	LCDWriteInt@value
  8087  0531  3004               	movlw	4
  8088  0532  00D9               	movwf	??_main
  8089  0533  0859               	movf	??_main,w
  8090  0534  00C1               	movwf	LCDWriteInt@fieldLength
  8091  0535  3002               	movlw	2
  8092  0536  00DA               	movwf	??_main+1
  8093  0537  085A               	movf	??_main+1,w
  8094  0538  00C2               	movwf	LCDWriteInt@numPlaces
  8095  0539  01C3               	clrf	LCDWriteInt@sign
  8096  053A  3188  200E  3180   	fcall	_LCDWriteInt
  8097                           
  8098                           ;main.c: 253: LCDWriteCharacter('V');
  8099  053D  3056               	movlw	86
  8100  053E  3193  236F  3180   	fcall	_LCDWriteCharacter
  8101                           
  8102                           ;main.c: 255: { gotoXY(80,1); LCDWriteInt(Imode[0],1, 0, 0);};
  8103  0541  01F5               	clrf	gotoXY@y
  8104  0542  0AF5               	incf	gotoXY@y,f
  8105  0543  3050               	movlw	80
  8106  0544  319E  2696  3180   	fcall	_gotoXY
  8107  0547  0021               	movlb	1	; select bank1
  8108  0548  084C               	movf	_Imode^(0+128),w
  8109  0549  0020               	movlb	0	; select bank0
  8110  054A  00BF               	movwf	LCDWriteInt@value
  8111  054B  01C0               	clrf	LCDWriteInt@value+1
  8112  054C  1BBF               	btfsc	LCDWriteInt@value,7
  8113  054D  03C0               	decf	LCDWriteInt@value+1,f
  8114  054E  01C1               	clrf	LCDWriteInt@fieldLength
  8115  054F  0AC1               	incf	LCDWriteInt@fieldLength,f
  8116  0550  01C2               	clrf	LCDWriteInt@numPlaces
  8117  0551  01C3               	clrf	LCDWriteInt@sign
  8118  0552  3188  200E  3180   	fcall	_LCDWriteInt
  8119                           
  8120                           ;main.c: 258: { gotoXY(0,2); LCDWriteInt(current[2],3, 1, 0);};
  8121  0555  3002               	movlw	2
  8122  0556  0020               	movlb	0	; select bank0
  8123  0557  00D9               	movwf	??_main
  8124  0558  0859               	movf	??_main,w
  8125  0559  00F5               	movwf	gotoXY@y
  8126  055A  3000               	movlw	0
  8127  055B  319E  2696  3180   	fcall	_gotoXY
  8128  055E  0021               	movlb	1	; select bank1
  8129  055F  082D               	movf	((_current+1)^(0+128)+4),w
  8130  0560  0020               	movlb	0	; select bank0
  8131  0561  00C0               	movwf	LCDWriteInt@value+1
  8132  0562  0021               	movlb	1	; select bank1
  8133  0563  082C               	movf	(_current^(0+128)+4),w
  8134  0564  0020               	movlb	0	; select bank0
  8135  0565  00BF               	movwf	LCDWriteInt@value
  8136  0566  3003               	movlw	3
  8137  0567  00D9               	movwf	??_main
  8138  0568  0859               	movf	??_main,w
  8139  0569  00C1               	movwf	LCDWriteInt@fieldLength
  8140  056A  01C2               	clrf	LCDWriteInt@numPlaces
  8141  056B  0AC2               	incf	LCDWriteInt@numPlaces,f
  8142  056C  01C3               	clrf	LCDWriteInt@sign
  8143  056D  3188  200E  3180   	fcall	_LCDWriteInt
  8144                           
  8145                           ;main.c: 259: LCDWriteCharacter('A');
  8146  0570  3041               	movlw	65
  8147  0571  3193  236F  3180   	fcall	_LCDWriteCharacter
  8148                           
  8149                           ;main.c: 262: { gotoXY(26,2); LCDWriteInt(current[0],3, 1, 0);};
  8150  0574  3002               	movlw	2
  8151  0575  0020               	movlb	0	; select bank0
  8152  0576  00D9               	movwf	??_main
  8153  0577  0859               	movf	??_main,w
  8154  0578  00F5               	movwf	gotoXY@y
  8155  0579  301A               	movlw	26
  8156  057A  319E  2696  3180   	fcall	_gotoXY
  8157  057D  0021               	movlb	1	; select bank1
  8158  057E  0829               	movf	(_current+1)^(0+128),w
  8159  057F  0020               	movlb	0	; select bank0
  8160  0580  00C0               	movwf	LCDWriteInt@value+1
  8161  0581  0021               	movlb	1	; select bank1
  8162  0582  0828               	movf	_current^(0+128),w
  8163  0583  0020               	movlb	0	; select bank0
  8164  0584  00BF               	movwf	LCDWriteInt@value
  8165  0585  3003               	movlw	3
  8166  0586  00D9               	movwf	??_main
  8167  0587  0859               	movf	??_main,w
  8168  0588  00C1               	movwf	LCDWriteInt@fieldLength
  8169  0589  01C2               	clrf	LCDWriteInt@numPlaces
  8170  058A  0AC2               	incf	LCDWriteInt@numPlaces,f
  8171  058B  01C3               	clrf	LCDWriteInt@sign
  8172  058C  3188  200E  3180   	fcall	_LCDWriteInt
  8173                           
  8174                           ;main.c: 263: LCDWriteCharacter('A');
  8175  058F  3041               	movlw	65
  8176  0590  3193  236F  3180   	fcall	_LCDWriteCharacter
  8177                           
  8178                           ;main.c: 265: { gotoXY(52,2); LCDWriteInt(Iref[0],3, 1, 0);};
  8179  0593  3002               	movlw	2
  8180  0594  0020               	movlb	0	; select bank0
  8181  0595  00D9               	movwf	??_main
  8182  0596  0859               	movf	??_main,w
  8183  0597  00F5               	movwf	gotoXY@y
  8184  0598  3034               	movlw	52
  8185  0599  319E  2696  3180   	fcall	_gotoXY
  8186  059C  0021               	movlb	1	; select bank1
  8187  059D  0841               	movf	(_Iref+1)^(0+128),w
  8188  059E  0020               	movlb	0	; select bank0
  8189  059F  00C0               	movwf	LCDWriteInt@value+1
  8190  05A0  0021               	movlb	1	; select bank1
  8191  05A1  0840               	movf	_Iref^(0+128),w
  8192  05A2  0020               	movlb	0	; select bank0
  8193  05A3  00BF               	movwf	LCDWriteInt@value
  8194  05A4  3003               	movlw	3
  8195  05A5  00D9               	movwf	??_main
  8196  05A6  0859               	movf	??_main,w
  8197  05A7  00C1               	movwf	LCDWriteInt@fieldLength
  8198  05A8  01C2               	clrf	LCDWriteInt@numPlaces
  8199  05A9  0AC2               	incf	LCDWriteInt@numPlaces,f
  8200  05AA  01C3               	clrf	LCDWriteInt@sign
  8201  05AB  3188  200E  3180   	fcall	_LCDWriteInt
  8202                           
  8203                           ;main.c: 266: LCDWriteCharacter('A');
  8204  05AE  3041               	movlw	65
  8205  05AF  3193  236F  3180   	fcall	_LCDWriteCharacter
  8206                           
  8207                           ;main.c: 268: { gotoXY(80,2); LCDWriteInt(batteryState[0],1, 0, 0);};
  8208  05B2  3002               	movlw	2
  8209  05B3  0020               	movlb	0	; select bank0
  8210  05B4  00D9               	movwf	??_main
  8211  05B5  0859               	movf	??_main,w
  8212  05B6  00F5               	movwf	gotoXY@y
  8213  05B7  3050               	movlw	80
  8214  05B8  319E  2696  3180   	fcall	_gotoXY
  8215  05BB  0021               	movlb	1	; select bank1
  8216  05BC  084E               	movf	_batteryState^(0+128),w
  8217  05BD  0020               	movlb	0	; select bank0
  8218  05BE  00D9               	movwf	??_main
  8219  05BF  01DA               	clrf	??_main+1
  8220  05C0  0859               	movf	??_main,w
  8221  05C1  00BF               	movwf	LCDWriteInt@value
  8222  05C2  085A               	movf	??_main+1,w
  8223  05C3  00C0               	movwf	LCDWriteInt@value+1
  8224  05C4  01C1               	clrf	LCDWriteInt@fieldLength
  8225  05C5  0AC1               	incf	LCDWriteInt@fieldLength,f
  8226  05C6  01C2               	clrf	LCDWriteInt@numPlaces
  8227  05C7  01C3               	clrf	LCDWriteInt@sign
  8228  05C8  3188  200E  3180   	fcall	_LCDWriteInt
  8229                           
  8230                           ;main.c: 270: { gotoXY(0,3); LCDWriteInt(voltage[3],4, 2, 0);};
  8231  05CB  3003               	movlw	3
  8232  05CC  0020               	movlb	0	; select bank0
  8233  05CD  00D9               	movwf	??_main
  8234  05CE  0859               	movf	??_main,w
  8235  05CF  00F5               	movwf	gotoXY@y
  8236  05D0  3000               	movlw	0
  8237  05D1  319E  2696  3180   	fcall	_gotoXY
  8238  05D4  0021               	movlb	1	; select bank1
  8239  05D5  0837               	movf	((_voltage+1)^(0+128)+6),w
  8240  05D6  0020               	movlb	0	; select bank0
  8241  05D7  00C0               	movwf	LCDWriteInt@value+1
  8242  05D8  0021               	movlb	1	; select bank1
  8243  05D9  0836               	movf	(_voltage^(0+128)+6),w
  8244  05DA  0020               	movlb	0	; select bank0
  8245  05DB  00BF               	movwf	LCDWriteInt@value
  8246  05DC  3004               	movlw	4
  8247  05DD  00D9               	movwf	??_main
  8248  05DE  0859               	movf	??_main,w
  8249  05DF  00C1               	movwf	LCDWriteInt@fieldLength
  8250  05E0  3002               	movlw	2
  8251  05E1  00DA               	movwf	??_main+1
  8252  05E2  085A               	movf	??_main+1,w
  8253  05E3  00C2               	movwf	LCDWriteInt@numPlaces
  8254  05E4  01C3               	clrf	LCDWriteInt@sign
  8255  05E5  3188  200E  3180   	fcall	_LCDWriteInt
  8256                           
  8257                           ;main.c: 272: LCDWriteCharacter('V');
  8258  05E8  3056               	movlw	86
  8259  05E9  3193  236F  3180   	fcall	_LCDWriteCharacter
  8260                           
  8261                           ;main.c: 274: { gotoXY(26,3); LCDWriteInt(voltage[1],4, 2, 0);};
  8262  05EC  3003               	movlw	3
  8263  05ED  0020               	movlb	0	; select bank0
  8264  05EE  00D9               	movwf	??_main
  8265  05EF  0859               	movf	??_main,w
  8266  05F0  00F5               	movwf	gotoXY@y
  8267  05F1  301A               	movlw	26
  8268  05F2  319E  2696  3180   	fcall	_gotoXY
  8269  05F5  0021               	movlb	1	; select bank1
  8270  05F6  0833               	movf	((_voltage+1)^(0+128)+2),w
  8271  05F7  0020               	movlb	0	; select bank0
  8272  05F8  00C0               	movwf	LCDWriteInt@value+1
  8273  05F9  0021               	movlb	1	; select bank1
  8274  05FA  0832               	movf	(_voltage^(0+128)+2),w
  8275  05FB  0020               	movlb	0	; select bank0
  8276  05FC  00BF               	movwf	LCDWriteInt@value
  8277  05FD  3004               	movlw	4
  8278  05FE  00D9               	movwf	??_main
  8279  05FF  0859               	movf	??_main,w
  8280  0600  00C1               	movwf	LCDWriteInt@fieldLength
  8281  0601  3002               	movlw	2
  8282  0602  00DA               	movwf	??_main+1
  8283  0603  085A               	movf	??_main+1,w
  8284  0604  00C2               	movwf	LCDWriteInt@numPlaces
  8285  0605  01C3               	clrf	LCDWriteInt@sign
  8286  0606  3188  200E  3180   	fcall	_LCDWriteInt
  8287                           
  8288                           ;main.c: 276: LCDWriteCharacter('V');
  8289  0609  3056               	movlw	86
  8290  060A  3193  236F  3180   	fcall	_LCDWriteCharacter
  8291                           
  8292                           ;main.c: 278: { gotoXY(52,3); LCDWriteInt(Vref[1],4, 2, 0);};
  8293  060D  3003               	movlw	3
  8294  060E  0020               	movlb	0	; select bank0
  8295  060F  00D9               	movwf	??_main
  8296  0610  0859               	movf	??_main,w
  8297  0611  00F5               	movwf	gotoXY@y
  8298  0612  3034               	movlw	52
  8299  0613  319E  2696  3180   	fcall	_gotoXY
  8300  0616  0021               	movlb	1	; select bank1
  8301  0617  083F               	movf	((_Vref+1)^(0+128)+2),w
  8302  0618  0020               	movlb	0	; select bank0
  8303  0619  00C0               	movwf	LCDWriteInt@value+1
  8304  061A  0021               	movlb	1	; select bank1
  8305  061B  083E               	movf	(_Vref^(0+128)+2),w
  8306  061C  0020               	movlb	0	; select bank0
  8307  061D  00BF               	movwf	LCDWriteInt@value
  8308  061E  3004               	movlw	4
  8309  061F  00D9               	movwf	??_main
  8310  0620  0859               	movf	??_main,w
  8311  0621  00C1               	movwf	LCDWriteInt@fieldLength
  8312  0622  3002               	movlw	2
  8313  0623  00DA               	movwf	??_main+1
  8314  0624  085A               	movf	??_main+1,w
  8315  0625  00C2               	movwf	LCDWriteInt@numPlaces
  8316  0626  01C3               	clrf	LCDWriteInt@sign
  8317  0627  3188  200E  3180   	fcall	_LCDWriteInt
  8318                           
  8319                           ;main.c: 279: LCDWriteCharacter('V');
  8320  062A  3056               	movlw	86
  8321  062B  3193  236F  3180   	fcall	_LCDWriteCharacter
  8322                           
  8323                           ;main.c: 281: { gotoXY(80,3); LCDWriteInt(Imode[1],1, 0, 0);};
  8324  062E  3003               	movlw	3
  8325  062F  0020               	movlb	0	; select bank0
  8326  0630  00D9               	movwf	??_main
  8327  0631  0859               	movf	??_main,w
  8328  0632  00F5               	movwf	gotoXY@y
  8329  0633  3050               	movlw	80
  8330  0634  319E  2696  3180   	fcall	_gotoXY
  8331  0637  0021               	movlb	1	; select bank1
  8332  0638  084D               	movf	(_Imode^(0+128)+1),w
  8333  0639  0020               	movlb	0	; select bank0
  8334  063A  00BF               	movwf	LCDWriteInt@value
  8335  063B  01C0               	clrf	LCDWriteInt@value+1
  8336  063C  1BBF               	btfsc	LCDWriteInt@value,7
  8337  063D  03C0               	decf	LCDWriteInt@value+1,f
  8338  063E  01C1               	clrf	LCDWriteInt@fieldLength
  8339  063F  0AC1               	incf	LCDWriteInt@fieldLength,f
  8340  0640  01C2               	clrf	LCDWriteInt@numPlaces
  8341  0641  01C3               	clrf	LCDWriteInt@sign
  8342  0642  3188  200E  3180   	fcall	_LCDWriteInt
  8343                           
  8344                           ;main.c: 291: { gotoXY(0,4); LCDWriteInt(current[3],3, 1, 0);};
  8345  0645  3004               	movlw	4
  8346  0646  0020               	movlb	0	; select bank0
  8347  0647  00D9               	movwf	??_main
  8348  0648  0859               	movf	??_main,w
  8349  0649  00F5               	movwf	gotoXY@y
  8350  064A  3000               	movlw	0
  8351  064B  319E  2696  3180   	fcall	_gotoXY
  8352  064E  0021               	movlb	1	; select bank1
  8353  064F  082F               	movf	((_current+1)^(0+128)+6),w
  8354  0650  0020               	movlb	0	; select bank0
  8355  0651  00C0               	movwf	LCDWriteInt@value+1
  8356  0652  0021               	movlb	1	; select bank1
  8357  0653  082E               	movf	(_current^(0+128)+6),w
  8358  0654  0020               	movlb	0	; select bank0
  8359  0655  00BF               	movwf	LCDWriteInt@value
  8360  0656  3003               	movlw	3
  8361  0657  00D9               	movwf	??_main
  8362  0658  0859               	movf	??_main,w
  8363  0659  00C1               	movwf	LCDWriteInt@fieldLength
  8364  065A  01C2               	clrf	LCDWriteInt@numPlaces
  8365  065B  0AC2               	incf	LCDWriteInt@numPlaces,f
  8366  065C  01C3               	clrf	LCDWriteInt@sign
  8367  065D  3188  200E  3180   	fcall	_LCDWriteInt
  8368                           
  8369                           ;main.c: 292: LCDWriteCharacter('A');
  8370  0660  3041               	movlw	65
  8371  0661  3193  236F  3180   	fcall	_LCDWriteCharacter
  8372                           
  8373                           ;main.c: 294: { gotoXY(26,4); LCDWriteInt((int16_t)(current[3]*(voltage[3]/voltage[1]*.9
      +                          )),3, 1, 0);};
  8374  0664  3004               	movlw	4
  8375  0665  0020               	movlb	0	; select bank0
  8376  0666  00D9               	movwf	??_main
  8377  0667  0859               	movf	??_main,w
  8378  0668  00F5               	movwf	gotoXY@y
  8379  0669  301A               	movlw	26
  8380  066A  319E  2696  3180   	fcall	_gotoXY
  8381  066D  0021               	movlb	1	; select bank1
  8382  066E  0837               	movf	((_voltage+1)^(0+128)+6),w
  8383  066F  00F3               	movwf	___awdiv@dividend+1
  8384  0670  0836               	movf	(_voltage^(0+128)+6),w
  8385  0671  00F2               	movwf	___awdiv@dividend
  8386  0672  0833               	movf	((_voltage+1)^(0+128)+2),w
  8387  0673  00F1               	movwf	___awdiv@divisor+1
  8388  0674  0832               	movf	(_voltage^(0+128)+2),w
  8389  0675  00F0               	movwf	___awdiv@divisor
  8390  0676  3193  231E  3180   	fcall	___awdiv
  8391  0679  0871               	movf	?___awdiv+1,w
  8392  067A  00FA               	movwf	___awtoft@c+1
  8393  067B  0870               	movf	?___awdiv,w
  8394  067C  00F9               	movwf	___awtoft@c
  8395  067D  319F  2794  3180   	fcall	___awtoft
  8396  0680  0879               	movf	?___awtoft,w
  8397  0681  0020               	movlb	0	; select bank0
  8398  0682  00A4               	movwf	___ftmul@f2
  8399  0683  087A               	movf	?___awtoft+1,w
  8400  0684  00A5               	movwf	___ftmul@f2+1
  8401  0685  087B               	movf	?___awtoft+2,w
  8402  0686  00A6               	movwf	___ftmul@f2+2
  8403  0687  3066               	movlw	102
  8404  0688  00A1               	movwf	___ftmul@f1
  8405  0689  3066               	movlw	102
  8406  068A  00A2               	movwf	___ftmul@f1+1
  8407  068B  303F               	movlw	63
  8408  068C  00A3               	movwf	___ftmul@f1+2
  8409  068D  3197  274C  3180   	fcall	___ftmul
  8410  0690  0020               	movlb	0	; select bank0
  8411  0691  0821               	movf	?___ftmul,w
  8412  0692  0021               	movlb	1	; select bank1
  8413  0693  00E5               	movwf	_main$1324^(0+128)
  8414  0694  0020               	movlb	0	; select bank0
  8415  0695  0822               	movf	?___ftmul+1,w
  8416  0696  0021               	movlb	1	; select bank1
  8417  0697  00E6               	movwf	(_main$1324+1)^(0+128)
  8418  0698  0020               	movlb	0	; select bank0
  8419  0699  0823               	movf	?___ftmul+2,w
  8420  069A  0021               	movlb	1	; select bank1
  8421  069B  00E7               	movwf	(_main$1324+2)^(0+128)
  8422  069C  082F               	movf	((_current+1)^(0+128)+6),w
  8423  069D  00FA               	movwf	___awtoft@c+1
  8424  069E  082E               	movf	(_current^(0+128)+6),w
  8425  069F  00F9               	movwf	___awtoft@c
  8426  06A0  319F  2794  3180   	fcall	___awtoft
  8427  06A3  0879               	movf	?___awtoft,w
  8428  06A4  0020               	movlb	0	; select bank0
  8429  06A5  00A4               	movwf	___ftmul@f2
  8430  06A6  087A               	movf	?___awtoft+1,w
  8431  06A7  00A5               	movwf	___ftmul@f2+1
  8432  06A8  087B               	movf	?___awtoft+2,w
  8433  06A9  00A6               	movwf	___ftmul@f2+2
  8434  06AA  0021               	movlb	1	; select bank1
  8435  06AB  0865               	movf	_main$1324^(0+128),w
  8436  06AC  0020               	movlb	0	; select bank0
  8437  06AD  00A1               	movwf	___ftmul@f1
  8438  06AE  0021               	movlb	1	; select bank1
  8439  06AF  0866               	movf	(_main$1324+1)^(0+128),w
  8440  06B0  0020               	movlb	0	; select bank0
  8441  06B1  00A2               	movwf	___ftmul@f1+1
  8442  06B2  0021               	movlb	1	; select bank1
  8443  06B3  0867               	movf	(_main$1324+2)^(0+128),w
  8444  06B4  0020               	movlb	0	; select bank0
  8445  06B5  00A3               	movwf	___ftmul@f1+2
  8446  06B6  3197  274C  3180   	fcall	___ftmul
  8447  06B9  0020               	movlb	0	; select bank0
  8448  06BA  0821               	movf	?___ftmul,w
  8449  06BB  00B1               	movwf	___fttol@f1
  8450  06BC  0822               	movf	?___ftmul+1,w
  8451  06BD  00B2               	movwf	___fttol@f1+1
  8452  06BE  0823               	movf	?___ftmul+2,w
  8453  06BF  00B3               	movwf	___fttol@f1+2
  8454  06C0  3180  2014  3180   	fcall	___fttol
  8455  06C3  0020               	movlb	0	; select bank0
  8456  06C4  0832               	movf	?___fttol+1,w
  8457  06C5  00C0               	movwf	LCDWriteInt@value+1
  8458  06C6  0831               	movf	?___fttol,w
  8459  06C7  00BF               	movwf	LCDWriteInt@value
  8460  06C8  3003               	movlw	3
  8461  06C9  00D9               	movwf	??_main
  8462  06CA  0859               	movf	??_main,w
  8463  06CB  00C1               	movwf	LCDWriteInt@fieldLength
  8464  06CC  01C2               	clrf	LCDWriteInt@numPlaces
  8465  06CD  0AC2               	incf	LCDWriteInt@numPlaces,f
  8466  06CE  01C3               	clrf	LCDWriteInt@sign
  8467  06CF  3188  200E  3180   	fcall	_LCDWriteInt
  8468                           
  8469                           ;main.c: 296: LCDWriteCharacter('A');
  8470  06D2  3041               	movlw	65
  8471  06D3  3193  236F  3180   	fcall	_LCDWriteCharacter
  8472                           
  8473                           ;main.c: 298: { gotoXY(52,4); LCDWriteInt(Iref[1],3, 1, 0);};
  8474  06D6  3004               	movlw	4
  8475  06D7  0020               	movlb	0	; select bank0
  8476  06D8  00D9               	movwf	??_main
  8477  06D9  0859               	movf	??_main,w
  8478  06DA  00F5               	movwf	gotoXY@y
  8479  06DB  3034               	movlw	52
  8480  06DC  319E  2696  3180   	fcall	_gotoXY
  8481  06DF  0021               	movlb	1	; select bank1
  8482  06E0  0843               	movf	((_Iref+1)^(0+128)+2),w
  8483  06E1  0020               	movlb	0	; select bank0
  8484  06E2  00C0               	movwf	LCDWriteInt@value+1
  8485  06E3  0021               	movlb	1	; select bank1
  8486  06E4  0842               	movf	(_Iref^(0+128)+2),w
  8487  06E5  0020               	movlb	0	; select bank0
  8488  06E6  00BF               	movwf	LCDWriteInt@value
  8489  06E7  3003               	movlw	3
  8490  06E8  00D9               	movwf	??_main
  8491  06E9  0859               	movf	??_main,w
  8492  06EA  00C1               	movwf	LCDWriteInt@fieldLength
  8493  06EB  01C2               	clrf	LCDWriteInt@numPlaces
  8494  06EC  0AC2               	incf	LCDWriteInt@numPlaces,f
  8495  06ED  01C3               	clrf	LCDWriteInt@sign
  8496  06EE  3188  200E  3180   	fcall	_LCDWriteInt
  8497                           
  8498                           ;main.c: 299: LCDWriteCharacter('A');
  8499  06F1  3041               	movlw	65
  8500  06F2  3193  236F  3180   	fcall	_LCDWriteCharacter
  8501                           
  8502                           ;main.c: 301: { gotoXY(80,4); LCDWriteInt(batteryState[1],1, 0, 0);};
  8503  06F5  3004               	movlw	4
  8504  06F6  0020               	movlb	0	; select bank0
  8505  06F7  00D9               	movwf	??_main
  8506  06F8  0859               	movf	??_main,w
  8507  06F9  00F5               	movwf	gotoXY@y
  8508  06FA  3050               	movlw	80
  8509  06FB  319E  2696  3180   	fcall	_gotoXY
  8510  06FE  0021               	movlb	1	; select bank1
  8511  06FF  084F               	movf	(_batteryState^(0+128)+1),w
  8512  0700  0020               	movlb	0	; select bank0
  8513  0701  00D9               	movwf	??_main
  8514  0702  01DA               	clrf	??_main+1
  8515  0703  0859               	movf	??_main,w
  8516  0704  00BF               	movwf	LCDWriteInt@value
  8517  0705  085A               	movf	??_main+1,w
  8518  0706  00C0               	movwf	LCDWriteInt@value+1
  8519  0707  01C1               	clrf	LCDWriteInt@fieldLength
  8520  0708  0AC1               	incf	LCDWriteInt@fieldLength,f
  8521  0709  01C2               	clrf	LCDWriteInt@numPlaces
  8522  070A  01C3               	clrf	LCDWriteInt@sign
  8523  070B  3188  200E  3180   	fcall	_LCDWriteInt
  8524                           
  8525                           ;main.c: 305: { gotoXY(0,5); LCDWriteInt(dutyCycle6,4, 0, 0);};
  8526  070E  3005               	movlw	5
  8527  070F  0020               	movlb	0	; select bank0
  8528  0710  00D9               	movwf	??_main
  8529  0711  0859               	movf	??_main,w
  8530  0712  00F5               	movwf	gotoXY@y
  8531  0713  3000               	movlw	0
  8532  0714  319E  2696  3180   	fcall	_gotoXY
  8533  0717  0021               	movlb	1	; select bank1
  8534  0718  0869               	movf	(main@dutyCycle6+1)^(0+128),w
  8535  0719  0020               	movlb	0	; select bank0
  8536  071A  00C0               	movwf	LCDWriteInt@value+1
  8537  071B  0021               	movlb	1	; select bank1
  8538  071C  0868               	movf	main@dutyCycle6^(0+128),w
  8539  071D  0020               	movlb	0	; select bank0
  8540  071E  00BF               	movwf	LCDWriteInt@value
  8541  071F  3004               	movlw	4
  8542  0720  00D9               	movwf	??_main
  8543  0721  0859               	movf	??_main,w
  8544  0722  00C1               	movwf	LCDWriteInt@fieldLength
  8545  0723  01C2               	clrf	LCDWriteInt@numPlaces
  8546  0724  01C3               	clrf	LCDWriteInt@sign
  8547  0725  3188  200E  3180   	fcall	_LCDWriteInt
  8548                           
  8549                           ;main.c: 306: { gotoXY(18,5); LCDWriteInt(VHoldMode[0],1, 0, 0);};
  8550  0728  3005               	movlw	5
  8551  0729  0020               	movlb	0	; select bank0
  8552  072A  00D9               	movwf	??_main
  8553  072B  0859               	movf	??_main,w
  8554  072C  00F5               	movwf	gotoXY@y
  8555  072D  3012               	movlw	18
  8556  072E  319E  2696  3180   	fcall	_gotoXY
  8557  0731  0021               	movlb	1	; select bank1
  8558  0732  084A               	movf	_VHoldMode^(0+128),w
  8559  0733  0020               	movlb	0	; select bank0
  8560  0734  00BF               	movwf	LCDWriteInt@value
  8561  0735  01C0               	clrf	LCDWriteInt@value+1
  8562  0736  1BBF               	btfsc	LCDWriteInt@value,7
  8563  0737  03C0               	decf	LCDWriteInt@value+1,f
  8564  0738  01C1               	clrf	LCDWriteInt@fieldLength
  8565  0739  0AC1               	incf	LCDWriteInt@fieldLength,f
  8566  073A  01C2               	clrf	LCDWriteInt@numPlaces
  8567  073B  01C3               	clrf	LCDWriteInt@sign
  8568  073C  3188  200E  3180   	fcall	_LCDWriteInt
  8569                           
  8570                           ;main.c: 307: LCDWriteCharacter(' ');
  8571  073F  3020               	movlw	32
  8572  0740  3193  236F  3180   	fcall	_LCDWriteCharacter
  8573                           
  8574                           ;main.c: 308: { gotoXY(28,5); LCDWriteInt(dutyCycle7,4, 0, 0);};
  8575  0743  3005               	movlw	5
  8576  0744  0020               	movlb	0	; select bank0
  8577  0745  00D9               	movwf	??_main
  8578  0746  0859               	movf	??_main,w
  8579  0747  00F5               	movwf	gotoXY@y
  8580  0748  301C               	movlw	28
  8581  0749  319E  2696  3180   	fcall	_gotoXY
  8582  074C  0021               	movlb	1	; select bank1
  8583  074D  086B               	movf	(main@dutyCycle7+1)^(0+128),w
  8584  074E  0020               	movlb	0	; select bank0
  8585  074F  00C0               	movwf	LCDWriteInt@value+1
  8586  0750  0021               	movlb	1	; select bank1
  8587  0751  086A               	movf	main@dutyCycle7^(0+128),w
  8588  0752  0020               	movlb	0	; select bank0
  8589  0753  00BF               	movwf	LCDWriteInt@value
  8590  0754  3004               	movlw	4
  8591  0755  00D9               	movwf	??_main
  8592  0756  0859               	movf	??_main,w
  8593  0757  00C1               	movwf	LCDWriteInt@fieldLength
  8594  0758  01C2               	clrf	LCDWriteInt@numPlaces
  8595  0759  01C3               	clrf	LCDWriteInt@sign
  8596  075A  3188  200E  3180   	fcall	_LCDWriteInt
  8597                           
  8598                           ;main.c: 309: { gotoXY(46,5); LCDWriteInt(VHoldMode[1],1, 0, 0);};
  8599  075D  3005               	movlw	5
  8600  075E  0020               	movlb	0	; select bank0
  8601  075F  00D9               	movwf	??_main
  8602  0760  0859               	movf	??_main,w
  8603  0761  00F5               	movwf	gotoXY@y
  8604  0762  302E               	movlw	46
  8605  0763  319E  2696  3180   	fcall	_gotoXY
  8606  0766  0021               	movlb	1	; select bank1
  8607  0767  084B               	movf	(_VHoldMode^(0+128)+1),w
  8608  0768  0020               	movlb	0	; select bank0
  8609  0769  00BF               	movwf	LCDWriteInt@value
  8610  076A  01C0               	clrf	LCDWriteInt@value+1
  8611  076B  1BBF               	btfsc	LCDWriteInt@value,7
  8612  076C  03C0               	decf	LCDWriteInt@value+1,f
  8613  076D  01C1               	clrf	LCDWriteInt@fieldLength
  8614  076E  0AC1               	incf	LCDWriteInt@fieldLength,f
  8615  076F  01C2               	clrf	LCDWriteInt@numPlaces
  8616  0770  01C3               	clrf	LCDWriteInt@sign
  8617  0771  3188  200E  3180   	fcall	_LCDWriteInt
  8618                           
  8619                           ;main.c: 310: LCDWriteCharacter(' ');
  8620  0774  3020               	movlw	32
  8621  0775  3193  236F  3180   	fcall	_LCDWriteCharacter
  8622                           
  8623                           ;main.c: 311: { gotoXY(56,5); LCDWriteInt(batteryTemp,3, 1, 0);};
  8624  0778  3005               	movlw	5
  8625  0779  0020               	movlb	0	; select bank0
  8626  077A  00D9               	movwf	??_main
  8627  077B  0859               	movf	??_main,w
  8628  077C  00F5               	movwf	gotoXY@y
  8629  077D  3038               	movlw	56
  8630  077E  319E  2696  3180   	fcall	_gotoXY
  8631  0781  0021               	movlb	1	; select bank1
  8632  0782  086E               	movf	(_batteryTemp+1)^(0+128),w
  8633  0783  0020               	movlb	0	; select bank0
  8634  0784  00C0               	movwf	LCDWriteInt@value+1
  8635  0785  0021               	movlb	1	; select bank1
  8636  0786  086D               	movf	_batteryTemp^(0+128),w
  8637  0787  0020               	movlb	0	; select bank0
  8638  0788  00BF               	movwf	LCDWriteInt@value
  8639  0789  3003               	movlw	3
  8640  078A  00D9               	movwf	??_main
  8641  078B  0859               	movf	??_main,w
  8642  078C  00C1               	movwf	LCDWriteInt@fieldLength
  8643  078D  01C2               	clrf	LCDWriteInt@numPlaces
  8644  078E  0AC2               	incf	LCDWriteInt@numPlaces,f
  8645  078F  01C3               	clrf	LCDWriteInt@sign
  8646  0790  3188  200E  3180   	fcall	_LCDWriteInt
  8647                           
  8648                           ;main.c: 312: LCDWriteCharacter(123);
  8649  0793  307B               	movlw	123
  8650  0794  3193  236F  3180   	fcall	_LCDWriteCharacter
  8651                           
  8652                           ;main.c: 313: LCDWriteCharacter('C');
  8653  0797  3043               	movlw	67
  8654  0798  3193  236F  3180   	fcall	_LCDWriteCharacter
  8655                           
  8656                           ;main.c: 383: if(batteryState[0] > FINISHED)
  8657  079B  3003               	movlw	3
  8658  079C  0021               	movlb	1	; select bank1
  8659  079D  024E               	subwf	_batteryState^(0+128),w
  8660  079E  1C03               	skipc
  8661  079F  2FA4               	goto	l4035
  8662                           
  8663                           ;main.c: 384: {
  8664                           ;main.c: 385: cc_cv_mode(0);
  8665  07A0  3000               	movlw	0
  8666  07A1  318C  24FC  3180   	fcall	_cc_cv_mode
  8667  07A4                     l4035:	
  8668                           
  8669                           ;main.c: 386: }
  8670                           ;main.c: 387: if(batteryState[1] > FINISHED)
  8671  07A4  3003               	movlw	3
  8672  07A5  0021               	movlb	1	; select bank1
  8673  07A6  024F               	subwf	(_batteryState^(0+128)+1),w
  8674  07A7  1C03               	skipc
  8675  07A8  2FAD               	goto	l4039
  8676                           
  8677                           ;main.c: 388: {
  8678                           ;main.c: 389: cc_cv_mode(1);
  8679  07A9  3001               	movlw	1
  8680  07AA  318C  24FC  3180   	fcall	_cc_cv_mode
  8681  07AD                     l4039:	
  8682                           
  8683                           ;main.c: 390: }
  8684                           ;main.c: 391: slowLoop=0;
  8685  07AD  0021               	movlb	1	; select bank1
  8686  07AE  01D9               	clrf	main@slowLoop^(0+128)
  8687  07AF  28D0               	goto	l3735
  8688  07B0                     __end_of_main:	
  8689                           
  8690                           	psect	text1
  8691  08C7                     __ptext1:	
  8692 ;; *************** function _tempCalc *****************
  8693 ;; Defined at:
  8694 ;;		line 4 in file "tempCalc.c"
  8695 ;; Parameters:    Size  Location     Type
  8696 ;;  analogValue     2   46[BANK0 ] int 
  8697 ;; Auto vars:     Size  Location     Type
  8698 ;;  steinhart       3   54[BANK0 ] float 
  8699 ;;  R               3   48[BANK0 ] float 
  8700 ;; Return value:  Size  Location     Type
  8701 ;;                  2   46[BANK0 ] int 
  8702 ;; Registers used:
  8703 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8704 ;; Tracked objects:
  8705 ;;		On entry : 0/0
  8706 ;;		On exit  : 0/0
  8707 ;;		Unchanged: 0/0
  8708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8709 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8710 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8711 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8712 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8713 ;;Total ram usage:       11 bytes
  8714 ;; Hardware stack levels used:    1
  8715 ;; Hardware stack levels required when called:    4
  8716 ;; This function calls:
  8717 ;;		___awtoft
  8718 ;;		___ftadd
  8719 ;;		___ftdiv
  8720 ;;		___ftmul
  8721 ;;		___ftsub
  8722 ;;		___fttol
  8723 ;;		_log
  8724 ;; This function is called by:
  8725 ;;		_main
  8726 ;; This function uses a non-reentrant model
  8727 ;;
  8728                           
  8729                           
  8730                           ;psect for function _tempCalc
  8731  08C7                     _tempCalc:	
  8732                           
  8733                           ;tempCalc.c: 6: float R, steinhart;
  8734                           ;tempCalc.c: 7: R=10030/(1023/(float)analogValue-1);
  8735                           
  8736                           ;incstack = 0
  8737                           ; Regs used in _tempCalc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8738  08C7  3000               	movlw	0
  8739  08C8  0020               	movlb	0	; select bank0
  8740  08C9  00B1               	movwf	___ftadd@f1
  8741  08CA  3080               	movlw	128
  8742  08CB  00B2               	movwf	___ftadd@f1+1
  8743  08CC  30BF               	movlw	191
  8744  08CD  00B3               	movwf	___ftadd@f1+2
  8745  08CE  084F               	movf	tempCalc@analogValue+1,w
  8746  08CF  00FA               	movwf	___awtoft@c+1
  8747  08D0  084E               	movf	tempCalc@analogValue,w
  8748  08D1  00F9               	movwf	___awtoft@c
  8749  08D2  319F  2794  3188   	fcall	___awtoft
  8750  08D5  0879               	movf	?___awtoft,w
  8751  08D6  0020               	movlb	0	; select bank0
  8752  08D7  00A1               	movwf	___ftdiv@f2
  8753  08D8  087A               	movf	?___awtoft+1,w
  8754  08D9  00A2               	movwf	___ftdiv@f2+1
  8755  08DA  087B               	movf	?___awtoft+2,w
  8756  08DB  00A3               	movwf	___ftdiv@f2+2
  8757  08DC  30C0               	movlw	192
  8758  08DD  00A4               	movwf	___ftdiv@f1
  8759  08DE  307F               	movlw	127
  8760  08DF  00A5               	movwf	___ftdiv@f1+1
  8761  08E0  3044               	movlw	68
  8762  08E1  00A6               	movwf	___ftdiv@f1+2
  8763  08E2  3195  25F3  3188   	fcall	___ftdiv
  8764  08E5  0020               	movlb	0	; select bank0
  8765  08E6  0821               	movf	?___ftdiv,w
  8766  08E7  00B4               	movwf	___ftadd@f2
  8767  08E8  0822               	movf	?___ftdiv+1,w
  8768  08E9  00B5               	movwf	___ftadd@f2+1
  8769  08EA  0823               	movf	?___ftdiv+2,w
  8770  08EB  00B6               	movwf	___ftadd@f2+2
  8771  08EC  3189  21AE  3188   	fcall	___ftadd
  8772  08EF  0020               	movlb	0	; select bank0
  8773  08F0  0831               	movf	?___ftadd,w
  8774  08F1  00D3               	movwf	_tempCalc$1325
  8775  08F2  0832               	movf	?___ftadd+1,w
  8776  08F3  00D4               	movwf	_tempCalc$1325+1
  8777  08F4  0833               	movf	?___ftadd+2,w
  8778  08F5  00D5               	movwf	_tempCalc$1325+2
  8779                           
  8780                           ;tempCalc.c: 6: float R, steinhart;
  8781                           ;tempCalc.c: 7: R=10030/(1023/(float)analogValue-1);
  8782  08F6  0853               	movf	_tempCalc$1325,w
  8783  08F7  00A1               	movwf	___ftdiv@f2
  8784  08F8  0854               	movf	_tempCalc$1325+1,w
  8785  08F9  00A2               	movwf	___ftdiv@f2+1
  8786  08FA  0855               	movf	_tempCalc$1325+2,w
  8787  08FB  00A3               	movwf	___ftdiv@f2+2
  8788  08FC  30B8               	movlw	184
  8789  08FD  00A4               	movwf	___ftdiv@f1
  8790  08FE  301C               	movlw	28
  8791  08FF  00A5               	movwf	___ftdiv@f1+1
  8792  0900  3046               	movlw	70
  8793  0901  00A6               	movwf	___ftdiv@f1+2
  8794  0902  3195  25F3  3188   	fcall	___ftdiv
  8795  0905  0020               	movlb	0	; select bank0
  8796  0906  0821               	movf	?___ftdiv,w
  8797  0907  00D0               	movwf	tempCalc@R
  8798  0908  0822               	movf	?___ftdiv+1,w
  8799  0909  00D1               	movwf	tempCalc@R+1
  8800  090A  0823               	movf	?___ftdiv+2,w
  8801  090B  00D2               	movwf	tempCalc@R+2
  8802                           
  8803                           ;tempCalc.c: 8: steinhart=R/10010;
  8804  090C  3068               	movlw	104
  8805  090D  00A1               	movwf	___ftdiv@f2
  8806  090E  301C               	movlw	28
  8807  090F  00A2               	movwf	___ftdiv@f2+1
  8808  0910  3046               	movlw	70
  8809  0911  00A3               	movwf	___ftdiv@f2+2
  8810  0912  0850               	movf	tempCalc@R,w
  8811  0913  00A4               	movwf	___ftdiv@f1
  8812  0914  0851               	movf	tempCalc@R+1,w
  8813  0915  00A5               	movwf	___ftdiv@f1+1
  8814  0916  0852               	movf	tempCalc@R+2,w
  8815  0917  00A6               	movwf	___ftdiv@f1+2
  8816  0918  3195  25F3  3188   	fcall	___ftdiv
  8817  091B  0020               	movlb	0	; select bank0
  8818  091C  0821               	movf	?___ftdiv,w
  8819  091D  00D6               	movwf	tempCalc@steinhart
  8820  091E  0822               	movf	?___ftdiv+1,w
  8821  091F  00D7               	movwf	tempCalc@steinhart+1
  8822  0920  0823               	movf	?___ftdiv+2,w
  8823  0921  00D8               	movwf	tempCalc@steinhart+2
  8824                           
  8825                           ;tempCalc.c: 9: steinhart=log(steinhart);
  8826  0922  0856               	movf	tempCalc@steinhart,w
  8827  0923  00C8               	movwf	log@x
  8828  0924  0857               	movf	tempCalc@steinhart+1,w
  8829  0925  00C9               	movwf	log@x+1
  8830  0926  0858               	movf	tempCalc@steinhart+2,w
  8831  0927  00CA               	movwf	log@x+2
  8832  0928  3196  269C  3188   	fcall	_log
  8833  092B  0020               	movlb	0	; select bank0
  8834  092C  0848               	movf	?_log,w
  8835  092D  00D6               	movwf	tempCalc@steinhart
  8836  092E  0849               	movf	?_log+1,w
  8837  092F  00D7               	movwf	tempCalc@steinhart+1
  8838  0930  084A               	movf	?_log+2,w
  8839  0931  00D8               	movwf	tempCalc@steinhart+2
  8840                           
  8841                           ;tempCalc.c: 10: steinhart/=3795.3;
  8842  0932  3035               	movlw	53
  8843  0933  00A1               	movwf	___ftdiv@f2
  8844  0934  306D               	movlw	109
  8845  0935  00A2               	movwf	___ftdiv@f2+1
  8846  0936  3045               	movlw	69
  8847  0937  00A3               	movwf	___ftdiv@f2+2
  8848  0938  0856               	movf	tempCalc@steinhart,w
  8849  0939  00A4               	movwf	___ftdiv@f1
  8850  093A  0857               	movf	tempCalc@steinhart+1,w
  8851  093B  00A5               	movwf	___ftdiv@f1+1
  8852  093C  0858               	movf	tempCalc@steinhart+2,w
  8853  093D  00A6               	movwf	___ftdiv@f1+2
  8854  093E  3195  25F3  3188   	fcall	___ftdiv
  8855  0941  0020               	movlb	0	; select bank0
  8856  0942  0821               	movf	?___ftdiv,w
  8857  0943  00D6               	movwf	tempCalc@steinhart
  8858  0944  0822               	movf	?___ftdiv+1,w
  8859  0945  00D7               	movwf	tempCalc@steinhart+1
  8860  0946  0823               	movf	?___ftdiv+2,w
  8861  0947  00D8               	movwf	tempCalc@steinhart+2
  8862                           
  8863                           ;tempCalc.c: 11: steinhart+=1.0/(25+273.15);
  8864  0948  30CF               	movlw	207
  8865  0949  00B1               	movwf	___ftadd@f1
  8866  094A  305B               	movlw	91
  8867  094B  00B2               	movwf	___ftadd@f1+1
  8868  094C  303B               	movlw	59
  8869  094D  00B3               	movwf	___ftadd@f1+2
  8870  094E  0856               	movf	tempCalc@steinhart,w
  8871  094F  00B4               	movwf	___ftadd@f2
  8872  0950  0857               	movf	tempCalc@steinhart+1,w
  8873  0951  00B5               	movwf	___ftadd@f2+1
  8874  0952  0858               	movf	tempCalc@steinhart+2,w
  8875  0953  00B6               	movwf	___ftadd@f2+2
  8876  0954  3189  21AE  3188   	fcall	___ftadd
  8877  0957  0020               	movlb	0	; select bank0
  8878  0958  0831               	movf	?___ftadd,w
  8879  0959  00D6               	movwf	tempCalc@steinhart
  8880  095A  0832               	movf	?___ftadd+1,w
  8881  095B  00D7               	movwf	tempCalc@steinhart+1
  8882  095C  0833               	movf	?___ftadd+2,w
  8883  095D  00D8               	movwf	tempCalc@steinhart+2
  8884                           
  8885                           ;tempCalc.c: 12: steinhart=1.0/steinhart;
  8886  095E  0856               	movf	tempCalc@steinhart,w
  8887  095F  00A1               	movwf	___ftdiv@f2
  8888  0960  0857               	movf	tempCalc@steinhart+1,w
  8889  0961  00A2               	movwf	___ftdiv@f2+1
  8890  0962  0858               	movf	tempCalc@steinhart+2,w
  8891  0963  00A3               	movwf	___ftdiv@f2+2
  8892  0964  3000               	movlw	0
  8893  0965  00A4               	movwf	___ftdiv@f1
  8894  0966  3080               	movlw	128
  8895  0967  00A5               	movwf	___ftdiv@f1+1
  8896  0968  303F               	movlw	63
  8897  0969  00A6               	movwf	___ftdiv@f1+2
  8898  096A  3195  25F3  3188   	fcall	___ftdiv
  8899  096D  0020               	movlb	0	; select bank0
  8900  096E  0821               	movf	?___ftdiv,w
  8901  096F  00D6               	movwf	tempCalc@steinhart
  8902  0970  0822               	movf	?___ftdiv+1,w
  8903  0971  00D7               	movwf	tempCalc@steinhart+1
  8904  0972  0823               	movf	?___ftdiv+2,w
  8905  0973  00D8               	movwf	tempCalc@steinhart+2
  8906                           
  8907                           ;tempCalc.c: 13: steinhart-=273;
  8908  0974  3080               	movlw	128
  8909  0975  00BE               	movwf	___ftsub@f2
  8910  0976  3088               	movlw	136
  8911  0977  00BF               	movwf	___ftsub@f2+1
  8912  0978  3043               	movlw	67
  8913  0979  00C0               	movwf	___ftsub@f2+2
  8914  097A  0856               	movf	tempCalc@steinhart,w
  8915  097B  00C1               	movwf	___ftsub@f1
  8916  097C  0857               	movf	tempCalc@steinhart+1,w
  8917  097D  00C2               	movwf	___ftsub@f1+1
  8918  097E  0858               	movf	tempCalc@steinhart+2,w
  8919  097F  00C3               	movwf	___ftsub@f1+2
  8920  0980  319F  2738  3188   	fcall	___ftsub
  8921  0983  0020               	movlb	0	; select bank0
  8922  0984  083E               	movf	?___ftsub,w
  8923  0985  00D6               	movwf	tempCalc@steinhart
  8924  0986  083F               	movf	?___ftsub+1,w
  8925  0987  00D7               	movwf	tempCalc@steinhart+1
  8926  0988  0840               	movf	?___ftsub+2,w
  8927  0989  00D8               	movwf	tempCalc@steinhart+2
  8928                           
  8929                           ;tempCalc.c: 15: steinhart*=10;
  8930  098A  3000               	movlw	0
  8931  098B  00A1               	movwf	___ftmul@f1
  8932  098C  3020               	movlw	32
  8933  098D  00A2               	movwf	___ftmul@f1+1
  8934  098E  3041               	movlw	65
  8935  098F  00A3               	movwf	___ftmul@f1+2
  8936  0990  0856               	movf	tempCalc@steinhart,w
  8937  0991  00A4               	movwf	___ftmul@f2
  8938  0992  0857               	movf	tempCalc@steinhart+1,w
  8939  0993  00A5               	movwf	___ftmul@f2+1
  8940  0994  0858               	movf	tempCalc@steinhart+2,w
  8941  0995  00A6               	movwf	___ftmul@f2+2
  8942  0996  3197  274C  3188   	fcall	___ftmul
  8943  0999  0020               	movlb	0	; select bank0
  8944  099A  0821               	movf	?___ftmul,w
  8945  099B  00D6               	movwf	tempCalc@steinhart
  8946  099C  0822               	movf	?___ftmul+1,w
  8947  099D  00D7               	movwf	tempCalc@steinhart+1
  8948  099E  0823               	movf	?___ftmul+2,w
  8949  099F  00D8               	movwf	tempCalc@steinhart+2
  8950                           
  8951                           ;tempCalc.c: 18: return (int16_t)steinhart;
  8952  09A0  0856               	movf	tempCalc@steinhart,w
  8953  09A1  00B1               	movwf	___fttol@f1
  8954  09A2  0857               	movf	tempCalc@steinhart+1,w
  8955  09A3  00B2               	movwf	___fttol@f1+1
  8956  09A4  0858               	movf	tempCalc@steinhart+2,w
  8957  09A5  00B3               	movwf	___fttol@f1+2
  8958  09A6  3180  2014         	fcall	___fttol
  8959  09A8  0020               	movlb	0	; select bank0
  8960  09A9  0832               	movf	?___fttol+1,w
  8961  09AA  00CF               	movwf	?_tempCalc+1
  8962  09AB  0831               	movf	?___fttol,w
  8963  09AC  00CE               	movwf	?_tempCalc
  8964  09AD  0008               	return
  8965  09AE                     __end_of_tempCalc:	
  8966                           
  8967                           	psect	text2
  8968  169C                     __ptext2:	
  8969 ;; *************** function _log *****************
  8970 ;; Defined at:
  8971 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\log.c"
  8972 ;; Parameters:    Size  Location     Type
  8973 ;;  x               3   40[BANK0 ] int 
  8974 ;; Auto vars:     Size  Location     Type
  8975 ;;  exponent        2   44[BANK0 ] int 
  8976 ;; Return value:  Size  Location     Type
  8977 ;;                  3   40[BANK0 ] int 
  8978 ;; Registers used:
  8979 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8980 ;; Tracked objects:
  8981 ;;		On entry : 0/0
  8982 ;;		On exit  : 0/0
  8983 ;;		Unchanged: 0/0
  8984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8985 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8986 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8987 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8988 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8989 ;;Total ram usage:        6 bytes
  8990 ;; Hardware stack levels used:    1
  8991 ;; Hardware stack levels required when called:    3
  8992 ;; This function calls:
  8993 ;;		___awtoft
  8994 ;;		___ftadd
  8995 ;;		___ftge
  8996 ;;		___ftmul
  8997 ;;		_eval_poly
  8998 ;;		_frexp
  8999 ;; This function is called by:
  9000 ;;		_tempCalc
  9001 ;; This function uses a non-reentrant model
  9002 ;;
  9003                           
  9004                           
  9005                           ;psect for function _log
  9006  169C                     _log:	
  9007                           
  9008                           ;incstack = 0
  9009                           ; Regs used in _log: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9010  169C  0020               	movlb	0	; select bank0
  9011  169D  0848               	movf	log@x,w
  9012  169E  00B1               	movwf	___ftge@ff1
  9013  169F  0849               	movf	log@x+1,w
  9014  16A0  00B2               	movwf	___ftge@ff1+1
  9015  16A1  084A               	movf	log@x+2,w
  9016  16A2  00B3               	movwf	___ftge@ff1+2
  9017  16A3  3000               	movlw	0
  9018  16A4  00B4               	movwf	___ftge@ff2
  9019  16A5  3000               	movlw	0
  9020  16A6  00B5               	movwf	___ftge@ff2+1
  9021  16A7  3000               	movlw	0
  9022  16A8  00B6               	movwf	___ftge@ff2+2
  9023  16A9  3192  2258  3196   	fcall	___ftge
  9024  16AC  1803               	btfsc	3,0
  9025  16AD  2EBB               	goto	l3669
  9026  16AE  3021               	movlw	33
  9027  16AF  0021               	movlb	1	; select bank1
  9028  16B0  00C4               	movwf	_errno^(0+128)
  9029  16B1  3000               	movlw	0
  9030  16B2  00C5               	movwf	(_errno^(0+128)+1)
  9031  16B3  3000               	movlw	0
  9032  16B4  0020               	movlb	0	; select bank0
  9033  16B5  00C8               	movwf	?_log
  9034  16B6  3000               	movlw	0
  9035  16B7  00C9               	movwf	?_log+1
  9036  16B8  3000               	movlw	0
  9037  16B9  00CA               	movwf	?_log+2
  9038  16BA  0008               	return
  9039  16BB                     l3669:	
  9040  16BB  0020               	movlb	0	; select bank0
  9041  16BC  084A               	movf	log@x+2,w
  9042  16BD  0449               	iorwf	log@x+1,w
  9043  16BE  0448               	iorwf	log@x,w
  9044  16BF  1D03               	skipz
  9045  16C0  2ECE               	goto	l3675
  9046  16C1  3022               	movlw	34
  9047  16C2  0021               	movlb	1	; select bank1
  9048  16C3  00C4               	movwf	_errno^(0+128)
  9049  16C4  3000               	movlw	0
  9050  16C5  00C5               	movwf	(_errno^(0+128)+1)
  9051  16C6  3000               	movlw	0
  9052  16C7  0020               	movlb	0	; select bank0
  9053  16C8  00C8               	movwf	?_log
  9054  16C9  3000               	movlw	0
  9055  16CA  00C9               	movwf	?_log+1
  9056  16CB  3000               	movlw	0
  9057  16CC  00CA               	movwf	?_log+2
  9058  16CD  0008               	return
  9059  16CE                     l3675:	
  9060  16CE  3000               	movlw	0
  9061  16CF  00B1               	movwf	___ftadd@f1
  9062  16D0  3080               	movlw	128
  9063  16D1  00B2               	movwf	___ftadd@f1+1
  9064  16D2  30BF               	movlw	191
  9065  16D3  00B3               	movwf	___ftadd@f1+2
  9066  16D4  3000               	movlw	0
  9067  16D5  00A1               	movwf	___ftmul@f1
  9068  16D6  3000               	movlw	0
  9069  16D7  00A2               	movwf	___ftmul@f1+1
  9070  16D8  3040               	movlw	64
  9071  16D9  00A3               	movwf	___ftmul@f1+2
  9072  16DA  304C               	movlw	(low (log@exponent| 0))& (0+255)
  9073  16DB  00CB               	movwf	??_log
  9074  16DC  084B               	movf	??_log,w
  9075  16DD  00F3               	movwf	frexp@eptr
  9076  16DE  0848               	movf	log@x,w
  9077  16DF  00F0               	movwf	frexp@value
  9078  16E0  0849               	movf	log@x+1,w
  9079  16E1  00F1               	movwf	frexp@value+1
  9080  16E2  084A               	movf	log@x+2,w
  9081  16E3  00F2               	movwf	frexp@value+2
  9082  16E4  3192  221D  3196   	fcall	_frexp
  9083  16E7  0870               	movf	?_frexp,w
  9084  16E8  0020               	movlb	0	; select bank0
  9085  16E9  00A4               	movwf	___ftmul@f2
  9086  16EA  0871               	movf	?_frexp+1,w
  9087  16EB  00A5               	movwf	___ftmul@f2+1
  9088  16EC  0872               	movf	?_frexp+2,w
  9089  16ED  00A6               	movwf	___ftmul@f2+2
  9090  16EE  3197  274C  3196   	fcall	___ftmul
  9091  16F1  0020               	movlb	0	; select bank0
  9092  16F2  0821               	movf	?___ftmul,w
  9093  16F3  00B4               	movwf	___ftadd@f2
  9094  16F4  0822               	movf	?___ftmul+1,w
  9095  16F5  00B5               	movwf	___ftadd@f2+1
  9096  16F6  0823               	movf	?___ftmul+2,w
  9097  16F7  00B6               	movwf	___ftadd@f2+2
  9098  16F8  3189  21AE  3196   	fcall	___ftadd
  9099  16FB  0020               	movlb	0	; select bank0
  9100  16FC  0831               	movf	?___ftadd,w
  9101  16FD  00C8               	movwf	log@x
  9102  16FE  0832               	movf	?___ftadd+1,w
  9103  16FF  00C9               	movwf	log@x+1
  9104  1700  0833               	movf	?___ftadd+2,w
  9105  1701  00CA               	movwf	log@x+2
  9106  1702  30FF               	movlw	255
  9107  1703  07CC               	addwf	log@exponent,f
  9108  1704  30FF               	movlw	255
  9109  1705  3DCD               	addwfc	log@exponent+1,f
  9110  1706  0848               	movf	log@x,w
  9111  1707  00BE               	movwf	eval_poly@x
  9112  1708  0849               	movf	log@x+1,w
  9113  1709  00BF               	movwf	eval_poly@x+1
  9114  170A  084A               	movf	log@x+2,w
  9115  170B  00C0               	movwf	eval_poly@x+2
  9116  170C  3000               	movlw	low (log@coeff| (0+32768))
  9117  170D  00C1               	movwf	eval_poly@d
  9118  170E  3098               	movlw	high (log@coeff| (0+32768))
  9119  170F  00C2               	movwf	eval_poly@d+1
  9120  1710  3008               	movlw	8
  9121  1711  00C3               	movwf	eval_poly@n
  9122  1712  3000               	movlw	0
  9123  1713  00C4               	movwf	eval_poly@n+1
  9124  1714  3193  23C3  3196   	fcall	_eval_poly
  9125  1717  0020               	movlb	0	; select bank0
  9126  1718  083E               	movf	?_eval_poly,w
  9127  1719  00C8               	movwf	log@x
  9128  171A  083F               	movf	?_eval_poly+1,w
  9129  171B  00C9               	movwf	log@x+1
  9130  171C  0840               	movf	?_eval_poly+2,w
  9131  171D  00CA               	movwf	log@x+2
  9132  171E  0848               	movf	log@x,w
  9133  171F  00B1               	movwf	___ftadd@f1
  9134  1720  0849               	movf	log@x+1,w
  9135  1721  00B2               	movwf	___ftadd@f1+1
  9136  1722  084A               	movf	log@x+2,w
  9137  1723  00B3               	movwf	___ftadd@f1+2
  9138  1724  3072               	movlw	114
  9139  1725  00A1               	movwf	___ftmul@f1
  9140  1726  3031               	movlw	49
  9141  1727  00A2               	movwf	___ftmul@f1+1
  9142  1728  303F               	movlw	63
  9143  1729  00A3               	movwf	___ftmul@f1+2
  9144  172A  084D               	movf	log@exponent+1,w
  9145  172B  00FA               	movwf	___awtoft@c+1
  9146  172C  084C               	movf	log@exponent,w
  9147  172D  00F9               	movwf	___awtoft@c
  9148  172E  319F  2794  3196   	fcall	___awtoft
  9149  1731  0879               	movf	?___awtoft,w
  9150  1732  0020               	movlb	0	; select bank0
  9151  1733  00A4               	movwf	___ftmul@f2
  9152  1734  087A               	movf	?___awtoft+1,w
  9153  1735  00A5               	movwf	___ftmul@f2+1
  9154  1736  087B               	movf	?___awtoft+2,w
  9155  1737  00A6               	movwf	___ftmul@f2+2
  9156  1738  3197  274C  3196   	fcall	___ftmul
  9157  173B  0020               	movlb	0	; select bank0
  9158  173C  0821               	movf	?___ftmul,w
  9159  173D  00B4               	movwf	___ftadd@f2
  9160  173E  0822               	movf	?___ftmul+1,w
  9161  173F  00B5               	movwf	___ftadd@f2+1
  9162  1740  0823               	movf	?___ftmul+2,w
  9163  1741  00B6               	movwf	___ftadd@f2+2
  9164  1742  3189  21AE         	fcall	___ftadd
  9165  1744  0020               	movlb	0	; select bank0
  9166  1745  0831               	movf	?___ftadd,w
  9167  1746  00C8               	movwf	?_log
  9168  1747  0832               	movf	?___ftadd+1,w
  9169  1748  00C9               	movwf	?_log+1
  9170  1749  0833               	movf	?___ftadd+2,w
  9171  174A  00CA               	movwf	?_log+2
  9172  174B  0008               	return
  9173  174C                     __end_of_log:	
  9174                           
  9175                           	psect	text3
  9176  121D                     __ptext3:	
  9177 ;; *************** function _frexp *****************
  9178 ;; Defined at:
  9179 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
  9180 ;; Parameters:    Size  Location     Type
  9181 ;;  value           3    0[COMMON] int 
  9182 ;;  eptr            1    3[COMMON] PTR int 
  9183 ;;		 -> log@exponent(2), 
  9184 ;; Auto vars:     Size  Location     Type
  9185 ;;		None
  9186 ;; Return value:  Size  Location     Type
  9187 ;;                  3    0[COMMON] PTR int 
  9188 ;; Registers used:
  9189 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9190 ;; Tracked objects:
  9191 ;;		On entry : 0/0
  9192 ;;		On exit  : 0/0
  9193 ;;		Unchanged: 0/0
  9194 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9195 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9196 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9197 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9198 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9199 ;;Total ram usage:        6 bytes
  9200 ;; Hardware stack levels used:    1
  9201 ;; This function calls:
  9202 ;;		Nothing
  9203 ;; This function is called by:
  9204 ;;		_log
  9205 ;; This function uses a non-reentrant model
  9206 ;;
  9207                           
  9208                           
  9209                           ;psect for function _frexp
  9210  121D                     _frexp:	
  9211                           
  9212                           ;incstack = 0
  9213                           ; Regs used in _frexp: [wreg+fsr1l+fsr1h+status,2+status,0]
  9214  121D  0872               	movf	frexp@value+2,w
  9215  121E  0471               	iorwf	frexp@value+1,w
  9216  121F  0470               	iorwf	frexp@value,w
  9217  1220  1D03               	skipz
  9218  1221  2A2F               	goto	l2627
  9219  1222  0873               	movf	frexp@eptr,w
  9220  1223  0086               	movwf	6
  9221  1224  0187               	clrf	7
  9222  1225  3000               	movlw	0
  9223  1226  3FC0               	movwi [0]fsr1
  9224  1227  3FC1               	movwi [1]fsr1
  9225  1228  3000               	movlw	0
  9226  1229  00F0               	movwf	?_frexp
  9227  122A  3000               	movlw	0
  9228  122B  00F1               	movwf	?_frexp+1
  9229  122C  3000               	movlw	0
  9230  122D  00F2               	movwf	?_frexp+2
  9231  122E  0008               	return
  9232  122F                     l2627:	
  9233  122F  0872               	movf	frexp@value+2,w
  9234  1230  397F               	andlw	127
  9235  1231  00F4               	movwf	??_frexp
  9236  1232  01F5               	clrf	??_frexp+1
  9237  1233  35F4               	lslf	??_frexp,f
  9238  1234  0DF5               	rlf	??_frexp+1,f
  9239  1235  0873               	movf	frexp@eptr,w
  9240  1236  0086               	movwf	6
  9241  1237  0187               	clrf	7
  9242  1238  0874               	movf	??_frexp,w
  9243  1239  3FC0               	movwi [0]fsr1
  9244  123A  0875               	movf	??_frexp+1,w
  9245  123B  3FC1               	movwi [1]fsr1
  9246  123C  0D71               	rlf	frexp@value+1,w
  9247  123D  0D71               	rlf	frexp@value+1,w
  9248  123E  3901               	andlw	1
  9249  123F  00F4               	movwf	??_frexp
  9250  1240  01F5               	clrf	??_frexp+1
  9251  1241  0873               	movf	frexp@eptr,w
  9252  1242  0086               	movwf	6
  9253  1243  0187               	clrf	7
  9254  1244  0874               	movf	??_frexp,w
  9255  1245  0481               	iorwf	1,f
  9256  1246  3141               	addfsr 1,1
  9257  1247  0875               	movf	??_frexp+1,w
  9258  1248  0481               	iorwf	1,f
  9259  1249  0873               	movf	frexp@eptr,w
  9260  124A  0086               	movwf	6
  9261  124B  0187               	clrf	7
  9262  124C  3082               	movlw	130
  9263  124D  0781               	addwf	1,f
  9264  124E  3141               	addfsr 1,1
  9265  124F  30FF               	movlw	255
  9266  1250  3D81               	addwfc	1,f
  9267  1251  317F               	addfsr 1,-1
  9268  1252  0872               	movf	frexp@value+2,w
  9269  1253  3980               	andlw	-128
  9270  1254  383F               	iorlw	63
  9271  1255  00F2               	movwf	frexp@value+2
  9272  1256  13F1               	bcf	frexp@value+1,7
  9273  1257  0008               	return
  9274  1258                     __end_of_frexp:	
  9275                           
  9276                           	psect	text4
  9277  13C3                     __ptext4:	
  9278 ;; *************** function _eval_poly *****************
  9279 ;; Defined at:
  9280 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\evalpoly.c"
  9281 ;; Parameters:    Size  Location     Type
  9282 ;;  x               3   30[BANK0 ] PTR int 
  9283 ;;  d               2   33[BANK0 ] PTR const 
  9284 ;;		 -> log@coeff(27), 
  9285 ;;  n               2   35[BANK0 ] int 
  9286 ;; Auto vars:     Size  Location     Type
  9287 ;;  res             3   37[BANK0 ] int 
  9288 ;; Return value:  Size  Location     Type
  9289 ;;                  3   30[BANK0 ] int 
  9290 ;; Registers used:
  9291 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9292 ;; Tracked objects:
  9293 ;;		On entry : 0/0
  9294 ;;		On exit  : 0/0
  9295 ;;		Unchanged: 0/0
  9296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9297 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9298 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9299 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9300 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9301 ;;Total ram usage:       10 bytes
  9302 ;; Hardware stack levels used:    1
  9303 ;; Hardware stack levels required when called:    2
  9304 ;; This function calls:
  9305 ;;		___ftadd
  9306 ;;		___ftmul
  9307 ;;		___wmul
  9308 ;; This function is called by:
  9309 ;;		_log
  9310 ;; This function uses a non-reentrant model
  9311 ;;
  9312                           
  9313                           
  9314                           ;psect for function _eval_poly
  9315  13C3                     _eval_poly:	
  9316                           
  9317                           ;incstack = 0
  9318                           ; Regs used in _eval_poly: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9319  13C3  0020               	movlb	0	; select bank0
  9320  13C4  0844               	movf	eval_poly@n+1,w
  9321  13C5  00F1               	movwf	___wmul@multiplier+1
  9322  13C6  0843               	movf	eval_poly@n,w
  9323  13C7  00F0               	movwf	___wmul@multiplier
  9324  13C8  3003               	movlw	3
  9325  13C9  00F2               	movwf	___wmul@multiplicand
  9326  13CA  3000               	movlw	0
  9327  13CB  00F3               	movwf	___wmul@multiplicand+1
  9328  13CC  319E  26FF  3193   	fcall	___wmul
  9329  13CF  0020               	movlb	0	; select bank0
  9330  13D0  0841               	movf	eval_poly@d,w
  9331  13D1  0770               	addwf	?___wmul,w
  9332  13D2  0084               	movwf	4
  9333  13D3  0842               	movf	eval_poly@d+1,w
  9334  13D4  3D71               	addwfc	?___wmul+1,w
  9335  13D5  0085               	movwf	5
  9336  13D6  3F00               	moviw [0]fsr0
  9337  13D7  00C5               	movwf	eval_poly@res
  9338  13D8  3F01               	moviw [1]fsr0
  9339  13D9  00C6               	movwf	eval_poly@res+1
  9340  13DA  3F02               	moviw [2]fsr0
  9341  13DB                     L6:	
  9342  13DB  00C7               	movwf	eval_poly@res+2
  9343  13DC  0843               	movf	eval_poly@n,w
  9344  13DD  0444               	iorwf	eval_poly@n+1,w
  9345  13DE  1903               	btfsc	3,2
  9346  13DF  2C1C               	goto	l2645
  9347  13E0  30FF               	movlw	255
  9348  13E1  07C3               	addwf	eval_poly@n,f
  9349  13E2  30FF               	movlw	255
  9350  13E3  3DC4               	addwfc	eval_poly@n+1,f
  9351  13E4  0844               	movf	eval_poly@n+1,w
  9352  13E5  00F1               	movwf	___wmul@multiplier+1
  9353  13E6  0843               	movf	eval_poly@n,w
  9354  13E7  00F0               	movwf	___wmul@multiplier
  9355  13E8  3003               	movlw	3
  9356  13E9  00F2               	movwf	___wmul@multiplicand
  9357  13EA  3000               	movlw	0
  9358  13EB  00F3               	movwf	___wmul@multiplicand+1
  9359  13EC  319E  26FF  3193   	fcall	___wmul
  9360  13EF  0020               	movlb	0	; select bank0
  9361  13F0  0841               	movf	eval_poly@d,w
  9362  13F1  0770               	addwf	?___wmul,w
  9363  13F2  0084               	movwf	4
  9364  13F3  0842               	movf	eval_poly@d+1,w
  9365  13F4  3D71               	addwfc	?___wmul+1,w
  9366  13F5  0085               	movwf	5
  9367  13F6  3F00               	moviw [0]fsr0
  9368  13F7  00B1               	movwf	___ftadd@f1
  9369  13F8  3F01               	moviw [1]fsr0
  9370  13F9  00B2               	movwf	___ftadd@f1+1
  9371  13FA  3F02               	moviw [2]fsr0
  9372  13FB  00B3               	movwf	___ftadd@f1+2
  9373  13FC  0845               	movf	eval_poly@res,w
  9374  13FD  00A1               	movwf	___ftmul@f1
  9375  13FE  0846               	movf	eval_poly@res+1,w
  9376  13FF  00A2               	movwf	___ftmul@f1+1
  9377  1400  0847               	movf	eval_poly@res+2,w
  9378  1401  00A3               	movwf	___ftmul@f1+2
  9379  1402  083E               	movf	eval_poly@x,w
  9380  1403  00A4               	movwf	___ftmul@f2
  9381  1404  083F               	movf	eval_poly@x+1,w
  9382  1405  00A5               	movwf	___ftmul@f2+1
  9383  1406  0840               	movf	eval_poly@x+2,w
  9384  1407  00A6               	movwf	___ftmul@f2+2
  9385  1408  3197  274C  3193   	fcall	___ftmul
  9386  140B  0020               	movlb	0	; select bank0
  9387  140C  0821               	movf	?___ftmul,w
  9388  140D  00B4               	movwf	___ftadd@f2
  9389  140E  0822               	movf	?___ftmul+1,w
  9390  140F  00B5               	movwf	___ftadd@f2+1
  9391  1410  0823               	movf	?___ftmul+2,w
  9392  1411  00B6               	movwf	___ftadd@f2+2
  9393  1412  3189  21AE  3193   	fcall	___ftadd
  9394  1415  0020               	movlb	0	; select bank0
  9395  1416  0831               	movf	?___ftadd,w
  9396  1417  00C5               	movwf	eval_poly@res
  9397  1418  0832               	movf	?___ftadd+1,w
  9398  1419  00C6               	movwf	eval_poly@res+1
  9399  141A  0833               	movf	?___ftadd+2,w
  9400  141B  2BDB               	goto	L6
  9401  141C                     l2645:	
  9402  141C  0845               	movf	eval_poly@res,w
  9403  141D  00BE               	movwf	?_eval_poly
  9404  141E  0846               	movf	eval_poly@res+1,w
  9405  141F  00BF               	movwf	?_eval_poly+1
  9406  1420  0847               	movf	eval_poly@res+2,w
  9407  1421  00C0               	movwf	?_eval_poly+2
  9408  1422  0008               	return
  9409  1423                     __end_of_eval_poly:	
  9410                           
  9411                           	psect	text5
  9412  1258                     __ptext5:	
  9413 ;; *************** function ___ftge *****************
  9414 ;; Defined at:
  9415 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
  9416 ;; Parameters:    Size  Location     Type
  9417 ;;  ff1             3   17[BANK0 ] float 
  9418 ;;  ff2             3   20[BANK0 ] float 
  9419 ;; Auto vars:     Size  Location     Type
  9420 ;;		None
  9421 ;; Return value:  Size  Location     Type
  9422 ;;		None               void
  9423 ;; Registers used:
  9424 ;;		wreg, status,2, status,0
  9425 ;; Tracked objects:
  9426 ;;		On entry : 0/0
  9427 ;;		On exit  : 0/0
  9428 ;;		Unchanged: 0/0
  9429 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9430 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9431 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9432 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9433 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9434 ;;Total ram usage:        9 bytes
  9435 ;; Hardware stack levels used:    1
  9436 ;; This function calls:
  9437 ;;		Nothing
  9438 ;; This function is called by:
  9439 ;;		_log
  9440 ;;		_main
  9441 ;; This function uses a non-reentrant model
  9442 ;;
  9443                           
  9444                           
  9445                           ;psect for function ___ftge
  9446  1258                     ___ftge:	
  9447                           
  9448                           ;incstack = 0
  9449                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  9450  1258  0020               	movlb	0	; select bank0
  9451  1259  1FB3               	btfss	___ftge@ff1+2,7
  9452  125A  2A6F               	goto	l3647
  9453  125B  0931               	comf	___ftge@ff1,w
  9454  125C  00B7               	movwf	??___ftge
  9455  125D  0932               	comf	___ftge@ff1+1,w
  9456  125E  00B8               	movwf	??___ftge+1
  9457  125F  0933               	comf	___ftge@ff1+2,w
  9458  1260  00B9               	movwf	??___ftge+2
  9459  1261  0AB7               	incf	??___ftge,f
  9460  1262  1903               	skipnz
  9461  1263  0AB8               	incf	??___ftge+1,f
  9462  1264  1903               	skipnz
  9463  1265  0AB9               	incf	??___ftge+2,f
  9464  1266  3000               	movlw	0
  9465  1267  0737               	addwf	??___ftge,w
  9466  1268  00B1               	movwf	___ftge@ff1
  9467  1269  3000               	movlw	0
  9468  126A  3D38               	addwfc	??___ftge+1,w
  9469  126B  00B2               	movwf	___ftge@ff1+1
  9470  126C  3080               	movlw	128
  9471  126D  3D39               	addwfc	??___ftge+2,w
  9472  126E  00B3               	movwf	___ftge@ff1+2
  9473  126F                     l3647:	
  9474  126F  1FB6               	btfss	___ftge@ff2+2,7
  9475  1270  2A85               	goto	l3651
  9476  1271  0934               	comf	___ftge@ff2,w
  9477  1272  00B7               	movwf	??___ftge
  9478  1273  0935               	comf	___ftge@ff2+1,w
  9479  1274  00B8               	movwf	??___ftge+1
  9480  1275  0936               	comf	___ftge@ff2+2,w
  9481  1276  00B9               	movwf	??___ftge+2
  9482  1277  0AB7               	incf	??___ftge,f
  9483  1278  1903               	skipnz
  9484  1279  0AB8               	incf	??___ftge+1,f
  9485  127A  1903               	skipnz
  9486  127B  0AB9               	incf	??___ftge+2,f
  9487  127C  3000               	movlw	0
  9488  127D  0737               	addwf	??___ftge,w
  9489  127E  00B4               	movwf	___ftge@ff2
  9490  127F  3000               	movlw	0
  9491  1280  3D38               	addwfc	??___ftge+1,w
  9492  1281  00B5               	movwf	___ftge@ff2+1
  9493  1282  3080               	movlw	128
  9494  1283  3D39               	addwfc	??___ftge+2,w
  9495  1284  00B6               	movwf	___ftge@ff2+2
  9496  1285                     l3651:	
  9497  1285  3080               	movlw	128
  9498  1286  06B3               	xorwf	___ftge@ff1+2,f
  9499  1287  3080               	movlw	128
  9500  1288  06B6               	xorwf	___ftge@ff2+2,f
  9501  1289  0836               	movf	___ftge@ff2+2,w
  9502  128A  0233               	subwf	___ftge@ff1+2,w
  9503  128B  1D03               	skipz
  9504  128C  0008               	return
  9505  128D  0835               	movf	___ftge@ff2+1,w
  9506  128E  0232               	subwf	___ftge@ff1+1,w
  9507  128F  1D03               	skipz
  9508  1290  0008               	return
  9509  1291  0834               	movf	___ftge@ff2,w
  9510  1292  0231               	subwf	___ftge@ff1,w
  9511  1293  0008               	return
  9512  1294                     __end_of___ftge:	
  9513                           
  9514                           	psect	text6
  9515  1F38                     __ptext6:	
  9516 ;; *************** function ___ftsub *****************
  9517 ;; Defined at:
  9518 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
  9519 ;; Parameters:    Size  Location     Type
  9520 ;;  f2              3   30[BANK0 ] float 
  9521 ;;  f1              3   33[BANK0 ] float 
  9522 ;; Auto vars:     Size  Location     Type
  9523 ;;		None
  9524 ;; Return value:  Size  Location     Type
  9525 ;;                  3   30[BANK0 ] float 
  9526 ;; Registers used:
  9527 ;;		wreg, status,2, status,0, pclath, cstack
  9528 ;; Tracked objects:
  9529 ;;		On entry : 0/0
  9530 ;;		On exit  : 0/0
  9531 ;;		Unchanged: 0/0
  9532 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9533 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9534 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9535 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9536 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9537 ;;Total ram usage:        6 bytes
  9538 ;; Hardware stack levels used:    1
  9539 ;; Hardware stack levels required when called:    2
  9540 ;; This function calls:
  9541 ;;		___ftadd
  9542 ;; This function is called by:
  9543 ;;		_tempCalc
  9544 ;; This function uses a non-reentrant model
  9545 ;;
  9546                           
  9547                           
  9548                           ;psect for function ___ftsub
  9549  1F38                     ___ftsub:	
  9550                           
  9551                           ;incstack = 0
  9552                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  9553  1F38  0020               	movlb	0	; select bank0
  9554  1F39  0840               	movf	___ftsub@f2+2,w
  9555  1F3A  043F               	iorwf	___ftsub@f2+1,w
  9556  1F3B  043E               	iorwf	___ftsub@f2,w
  9557  1F3C  1903               	skipnz
  9558  1F3D  2F40               	goto	l2991
  9559  1F3E  3080               	movlw	128
  9560  1F3F  06C0               	xorwf	___ftsub@f2+2,f
  9561  1F40                     l2991:	
  9562  1F40  0841               	movf	___ftsub@f1,w
  9563  1F41  00B1               	movwf	___ftadd@f1
  9564  1F42  0842               	movf	___ftsub@f1+1,w
  9565  1F43  00B2               	movwf	___ftadd@f1+1
  9566  1F44  0843               	movf	___ftsub@f1+2,w
  9567  1F45  00B3               	movwf	___ftadd@f1+2
  9568  1F46  083E               	movf	___ftsub@f2,w
  9569  1F47  00B4               	movwf	___ftadd@f2
  9570  1F48  083F               	movf	___ftsub@f2+1,w
  9571  1F49  00B5               	movwf	___ftadd@f2+1
  9572  1F4A  0840               	movf	___ftsub@f2+2,w
  9573  1F4B  00B6               	movwf	___ftadd@f2+2
  9574  1F4C  3189  21AE         	fcall	___ftadd
  9575  1F4E  0020               	movlb	0	; select bank0
  9576  1F4F  0831               	movf	?___ftadd,w
  9577  1F50  00BE               	movwf	?___ftsub
  9578  1F51  0832               	movf	?___ftadd+1,w
  9579  1F52  00BF               	movwf	?___ftsub+1
  9580  1F53  0833               	movf	?___ftadd+2,w
  9581  1F54  00C0               	movwf	?___ftsub+2
  9582  1F55  0008               	return
  9583  1F56                     __end_of___ftsub:	
  9584                           
  9585                           	psect	text7
  9586  09AE                     __ptext7:	
  9587 ;; *************** function ___ftadd *****************
  9588 ;; Defined at:
  9589 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
  9590 ;; Parameters:    Size  Location     Type
  9591 ;;  f1              3   17[BANK0 ] float 
  9592 ;;  f2              3   20[BANK0 ] float 
  9593 ;; Auto vars:     Size  Location     Type
  9594 ;;  exp1            1   29[BANK0 ] unsigned char 
  9595 ;;  exp2            1   28[BANK0 ] unsigned char 
  9596 ;;  sign            1   27[BANK0 ] unsigned char 
  9597 ;; Return value:  Size  Location     Type
  9598 ;;                  3   17[BANK0 ] float 
  9599 ;; Registers used:
  9600 ;;		wreg, status,2, status,0, pclath, cstack
  9601 ;; Tracked objects:
  9602 ;;		On entry : 0/0
  9603 ;;		On exit  : 0/0
  9604 ;;		Unchanged: 0/0
  9605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9606 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9607 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9608 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9609 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9610 ;;Total ram usage:       13 bytes
  9611 ;; Hardware stack levels used:    1
  9612 ;; Hardware stack levels required when called:    1
  9613 ;; This function calls:
  9614 ;;		___ftpack
  9615 ;; This function is called by:
  9616 ;;		_tempCalc
  9617 ;;		___ftsub
  9618 ;;		_log
  9619 ;;		_eval_poly
  9620 ;; This function uses a non-reentrant model
  9621 ;;
  9622                           
  9623                           
  9624                           ;psect for function ___ftadd
  9625  09AE                     ___ftadd:	
  9626                           
  9627                           ;incstack = 0
  9628                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  9629  09AE  0020               	movlb	0	; select bank0
  9630  09AF  0831               	movf	___ftadd@f1,w
  9631  09B0  00B7               	movwf	??___ftadd
  9632  09B1  0832               	movf	___ftadd@f1+1,w
  9633  09B2  00B8               	movwf	??___ftadd+1
  9634  09B3  0833               	movf	___ftadd@f1+2,w
  9635  09B4  00B9               	movwf	??___ftadd+2
  9636  09B5  1003               	clrc
  9637  09B6  0D38               	rlf	??___ftadd+1,w
  9638  09B7  0D39               	rlf	??___ftadd+2,w
  9639  09B8  00BA               	movwf	??___ftadd+3
  9640  09B9  083A               	movf	??___ftadd+3,w
  9641  09BA  00BD               	movwf	___ftadd@exp1
  9642  09BB  0834               	movf	___ftadd@f2,w
  9643  09BC  00B7               	movwf	??___ftadd
  9644  09BD  0835               	movf	___ftadd@f2+1,w
  9645  09BE  00B8               	movwf	??___ftadd+1
  9646  09BF  0836               	movf	___ftadd@f2+2,w
  9647  09C0  00B9               	movwf	??___ftadd+2
  9648  09C1  1003               	clrc
  9649  09C2  0D38               	rlf	??___ftadd+1,w
  9650  09C3  0D39               	rlf	??___ftadd+2,w
  9651  09C4  00BA               	movwf	??___ftadd+3
  9652  09C5  083A               	movf	??___ftadd+3,w
  9653  09C6  00BC               	movwf	___ftadd@exp2
  9654  09C7  083D               	movf	___ftadd@exp1,w
  9655  09C8  1903               	btfsc	3,2
  9656  09C9  29D6               	goto	l2429
  9657  09CA  083C               	movf	___ftadd@exp2,w
  9658  09CB  023D               	subwf	___ftadd@exp1,w
  9659  09CC  1803               	skipnc
  9660  09CD  29DD               	goto	l2433
  9661  09CE  033D               	decf	___ftadd@exp1,w
  9662  09CF  3AFF               	xorlw	255
  9663  09D0  073C               	addwf	___ftadd@exp2,w
  9664  09D1  00B7               	movwf	??___ftadd
  9665  09D2  3019               	movlw	25
  9666  09D3  0237               	subwf	??___ftadd,w
  9667  09D4  1C03               	skipc
  9668  09D5  29DD               	goto	l2433
  9669  09D6                     l2429:	
  9670  09D6  0834               	movf	___ftadd@f2,w
  9671  09D7  00B1               	movwf	?___ftadd
  9672  09D8  0835               	movf	___ftadd@f2+1,w
  9673  09D9  00B2               	movwf	?___ftadd+1
  9674  09DA  0836               	movf	___ftadd@f2+2,w
  9675  09DB  00B3               	movwf	?___ftadd+2
  9676  09DC  0008               	return
  9677  09DD                     l2433:	
  9678  09DD  083C               	movf	___ftadd@exp2,w
  9679  09DE  1903               	btfsc	3,2
  9680  09DF  0008               	return
  9681  09E0  083D               	movf	___ftadd@exp1,w
  9682  09E1  023C               	subwf	___ftadd@exp2,w
  9683  09E2  1803               	skipnc
  9684  09E3  29EC               	goto	l2439
  9685  09E4  033C               	decf	___ftadd@exp2,w
  9686  09E5  3AFF               	xorlw	255
  9687  09E6  073D               	addwf	___ftadd@exp1,w
  9688  09E7  00B7               	movwf	??___ftadd
  9689  09E8  3019               	movlw	25
  9690  09E9  0237               	subwf	??___ftadd,w
  9691  09EA  1803               	btfsc	3,0
  9692  09EB  0008               	return
  9693  09EC                     l2439:	
  9694  09EC  3006               	movlw	6
  9695  09ED  00B7               	movwf	??___ftadd
  9696  09EE  0837               	movf	??___ftadd,w
  9697  09EF  00BB               	movwf	___ftadd@sign
  9698  09F0  1BB3               	btfsc	___ftadd@f1+2,7
  9699  09F1  17BB               	bsf	___ftadd@sign,7
  9700  09F2  1BB6               	btfsc	___ftadd@f2+2,7
  9701  09F3  173B               	bsf	___ftadd@sign,6
  9702  09F4  17B2               	bsf	___ftadd@f1+1,7
  9703  09F5  30FF               	movlw	255
  9704  09F6  05B1               	andwf	___ftadd@f1,f
  9705  09F7  30FF               	movlw	255
  9706  09F8  05B2               	andwf	___ftadd@f1+1,f
  9707  09F9  3000               	movlw	0
  9708  09FA  05B3               	andwf	___ftadd@f1+2,f
  9709  09FB  17B5               	bsf	___ftadd@f2+1,7
  9710  09FC  30FF               	movlw	255
  9711  09FD  05B4               	andwf	___ftadd@f2,f
  9712  09FE  30FF               	movlw	255
  9713  09FF  05B5               	andwf	___ftadd@f2+1,f
  9714  0A00  3000               	movlw	0
  9715  0A01  05B6               	andwf	___ftadd@f2+2,f
  9716  0A02  083C               	movf	___ftadd@exp2,w
  9717  0A03  023D               	subwf	___ftadd@exp1,w
  9718  0A04  1803               	skipnc
  9719  0A05  2A28               	goto	l2461
  9720  0A06                     l2451:	
  9721  0A06  3001               	movlw	1
  9722  0A07                     u2475:	
  9723  0A07  35B4               	lslf	___ftadd@f2,f
  9724  0A08  0DB5               	rlf	___ftadd@f2+1,f
  9725  0A09  0DB6               	rlf	___ftadd@f2+2,f
  9726  0A0A  0B89               	decfsz	9,f
  9727  0A0B  2A07               	goto	u2475
  9728  0A0C  3001               	movlw	1
  9729  0A0D  02BC               	subwf	___ftadd@exp2,f
  9730  0A0E  083C               	movf	___ftadd@exp2,w
  9731  0A0F  063D               	xorwf	___ftadd@exp1,w
  9732  0A10  1903               	skipnz
  9733  0A11  2A23               	goto	l2459
  9734  0A12  3001               	movlw	1
  9735  0A13  02BB               	subwf	___ftadd@sign,f
  9736  0A14  083B               	movf	___ftadd@sign,w
  9737  0A15  3907               	andlw	7
  9738  0A16  1903               	btfsc	3,2
  9739  0A17  2A23               	goto	l2459
  9740  0A18  2A06               	goto	l2451
  9741  0A19                     l2457:	
  9742  0A19  3001               	movlw	1
  9743  0A1A                     u2505:	
  9744  0A1A  36B3               	lsrf	___ftadd@f1+2,f
  9745  0A1B  0CB2               	rrf	___ftadd@f1+1,f
  9746  0A1C  0CB1               	rrf	___ftadd@f1,f
  9747  0A1D  0B89               	decfsz	9,f
  9748  0A1E  2A1A               	goto	u2505
  9749  0A1F  3001               	movlw	1
  9750  0A20  00B7               	movwf	??___ftadd
  9751  0A21  0837               	movf	??___ftadd,w
  9752  0A22  07BD               	addwf	___ftadd@exp1,f
  9753  0A23                     l2459:	
  9754  0A23  083D               	movf	___ftadd@exp1,w
  9755  0A24  063C               	xorwf	___ftadd@exp2,w
  9756  0A25  1903               	btfsc	3,2
  9757  0A26  2A4D               	goto	l815
  9758  0A27  2A19               	goto	l2457
  9759  0A28                     l2461:	
  9760  0A28  083D               	movf	___ftadd@exp1,w
  9761  0A29  023C               	subwf	___ftadd@exp2,w
  9762  0A2A  1803               	skipnc
  9763  0A2B  2A4D               	goto	l815
  9764  0A2C                     l2463:	
  9765  0A2C  3001               	movlw	1
  9766  0A2D                     u2535:	
  9767  0A2D  35B1               	lslf	___ftadd@f1,f
  9768  0A2E  0DB2               	rlf	___ftadd@f1+1,f
  9769  0A2F  0DB3               	rlf	___ftadd@f1+2,f
  9770  0A30  0B89               	decfsz	9,f
  9771  0A31  2A2D               	goto	u2535
  9772  0A32  3001               	movlw	1
  9773  0A33  02BD               	subwf	___ftadd@exp1,f
  9774  0A34  083C               	movf	___ftadd@exp2,w
  9775  0A35  063D               	xorwf	___ftadd@exp1,w
  9776  0A36  1903               	skipnz
  9777  0A37  2A49               	goto	l2471
  9778  0A38  3001               	movlw	1
  9779  0A39  02BB               	subwf	___ftadd@sign,f
  9780  0A3A  083B               	movf	___ftadd@sign,w
  9781  0A3B  3907               	andlw	7
  9782  0A3C  1903               	btfsc	3,2
  9783  0A3D  2A49               	goto	l2471
  9784  0A3E  2A2C               	goto	l2463
  9785  0A3F                     l2469:	
  9786  0A3F  3001               	movlw	1
  9787  0A40                     u2565:	
  9788  0A40  36B6               	lsrf	___ftadd@f2+2,f
  9789  0A41  0CB5               	rrf	___ftadd@f2+1,f
  9790  0A42  0CB4               	rrf	___ftadd@f2,f
  9791  0A43  0B89               	decfsz	9,f
  9792  0A44  2A40               	goto	u2565
  9793  0A45  3001               	movlw	1
  9794  0A46  00B7               	movwf	??___ftadd
  9795  0A47  0837               	movf	??___ftadd,w
  9796  0A48  07BC               	addwf	___ftadd@exp2,f
  9797  0A49                     l2471:	
  9798  0A49  083D               	movf	___ftadd@exp1,w
  9799  0A4A  063C               	xorwf	___ftadd@exp2,w
  9800  0A4B  1D03               	skipz
  9801  0A4C  2A3F               	goto	l2469
  9802  0A4D                     l815:	
  9803  0A4D  1FBB               	btfss	___ftadd@sign,7
  9804  0A4E  2A5F               	goto	l2475
  9805  0A4F  30FF               	movlw	255
  9806  0A50  06B1               	xorwf	___ftadd@f1,f
  9807  0A51  30FF               	movlw	255
  9808  0A52  06B2               	xorwf	___ftadd@f1+1,f
  9809  0A53  30FF               	movlw	255
  9810  0A54  06B3               	xorwf	___ftadd@f1+2,f
  9811  0A55  3001               	movlw	1
  9812  0A56  07B1               	addwf	___ftadd@f1,f
  9813  0A57  3000               	movlw	0
  9814  0A58  1803               	skipnc
  9815  0A59  3001               	movlw	1
  9816  0A5A  07B2               	addwf	___ftadd@f1+1,f
  9817  0A5B  3000               	movlw	0
  9818  0A5C  1803               	skipnc
  9819  0A5D  3001               	movlw	1
  9820  0A5E  07B3               	addwf	___ftadd@f1+2,f
  9821  0A5F                     l2475:	
  9822  0A5F  1F3B               	btfss	___ftadd@sign,6
  9823  0A60  2A71               	goto	l2479
  9824  0A61  30FF               	movlw	255
  9825  0A62  06B4               	xorwf	___ftadd@f2,f
  9826  0A63  30FF               	movlw	255
  9827  0A64  06B5               	xorwf	___ftadd@f2+1,f
  9828  0A65  30FF               	movlw	255
  9829  0A66  06B6               	xorwf	___ftadd@f2+2,f
  9830  0A67  3001               	movlw	1
  9831  0A68  07B4               	addwf	___ftadd@f2,f
  9832  0A69  3000               	movlw	0
  9833  0A6A  1803               	skipnc
  9834  0A6B  3001               	movlw	1
  9835  0A6C  07B5               	addwf	___ftadd@f2+1,f
  9836  0A6D  3000               	movlw	0
  9837  0A6E  1803               	skipnc
  9838  0A6F  3001               	movlw	1
  9839  0A70  07B6               	addwf	___ftadd@f2+2,f
  9840  0A71                     l2479:	
  9841  0A71  01BB               	clrf	___ftadd@sign
  9842  0A72  0831               	movf	___ftadd@f1,w
  9843  0A73  07B4               	addwf	___ftadd@f2,f
  9844  0A74  0832               	movf	___ftadd@f1+1,w
  9845  0A75  3DB5               	addwfc	___ftadd@f2+1,f
  9846  0A76  0833               	movf	___ftadd@f1+2,w
  9847  0A77  3DB6               	addwfc	___ftadd@f2+2,f
  9848  0A78  1FB6               	btfss	___ftadd@f2+2,7
  9849  0A79  2A8C               	goto	l2489
  9850  0A7A  30FF               	movlw	255
  9851  0A7B  06B4               	xorwf	___ftadd@f2,f
  9852  0A7C  30FF               	movlw	255
  9853  0A7D  06B5               	xorwf	___ftadd@f2+1,f
  9854  0A7E  30FF               	movlw	255
  9855  0A7F  06B6               	xorwf	___ftadd@f2+2,f
  9856  0A80  3001               	movlw	1
  9857  0A81  07B4               	addwf	___ftadd@f2,f
  9858  0A82  3000               	movlw	0
  9859  0A83  1803               	skipnc
  9860  0A84  3001               	movlw	1
  9861  0A85  07B5               	addwf	___ftadd@f2+1,f
  9862  0A86  3000               	movlw	0
  9863  0A87  1803               	skipnc
  9864  0A88  3001               	movlw	1
  9865  0A89  07B6               	addwf	___ftadd@f2+2,f
  9866  0A8A  01BB               	clrf	___ftadd@sign
  9867  0A8B  0ABB               	incf	___ftadd@sign,f
  9868  0A8C                     l2489:	
  9869  0A8C  0834               	movf	___ftadd@f2,w
  9870  0A8D  00F0               	movwf	___ftpack@arg
  9871  0A8E  0835               	movf	___ftadd@f2+1,w
  9872  0A8F  00F1               	movwf	___ftpack@arg+1
  9873  0A90  0836               	movf	___ftadd@f2+2,w
  9874  0A91  00F2               	movwf	___ftpack@arg+2
  9875  0A92  083D               	movf	___ftadd@exp1,w
  9876  0A93  00B7               	movwf	??___ftadd
  9877  0A94  0837               	movf	??___ftadd,w
  9878  0A95  00F3               	movwf	___ftpack@exp
  9879  0A96  083B               	movf	___ftadd@sign,w
  9880  0A97  00B8               	movwf	??___ftadd+1
  9881  0A98  0838               	movf	??___ftadd+1,w
  9882  0A99  00F4               	movwf	___ftpack@sign
  9883  0A9A  3194  2423         	fcall	___ftpack
  9884  0A9C  0870               	movf	?___ftpack,w
  9885  0A9D  0020               	movlb	0	; select bank0
  9886  0A9E  00B1               	movwf	?___ftadd
  9887  0A9F  0871               	movf	?___ftpack+1,w
  9888  0AA0  00B2               	movwf	?___ftadd+1
  9889  0AA1  0872               	movf	?___ftpack+2,w
  9890  0AA2  00B3               	movwf	?___ftadd+2
  9891  0AA3  0008               	return
  9892  0AA4                     __end_of___ftadd:	
  9893                           
  9894                           	psect	text8
  9895  0AA4                     __ptext8:	
  9896 ;; *************** function _readVAnalog *****************
  9897 ;; Defined at:
  9898 ;;		line 103 in file "adc.c"
  9899 ;; Parameters:    Size  Location     Type
  9900 ;;  channel         2    6[BANK0 ] unsigned int 
  9901 ;; Auto vars:     Size  Location     Type
  9902 ;;  value           2   11[COMMON] int 
  9903 ;;  analog_chann    2    9[COMMON] unsigned int 
  9904 ;; Return value:  Size  Location     Type
  9905 ;;                  2    6[BANK0 ] int 
  9906 ;; Registers used:
  9907 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9908 ;; Tracked objects:
  9909 ;;		On entry : 0/0
  9910 ;;		On exit  : 0/0
  9911 ;;		Unchanged: 0/0
  9912 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9913 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9914 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9915 ;;      Temps:          0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9916 ;;      Totals:         4      17       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9917 ;;Total ram usage:       21 bytes
  9918 ;; Hardware stack levels used:    1
  9919 ;; Hardware stack levels required when called:    1
  9920 ;; This function calls:
  9921 ;;		_ADCRead
  9922 ;;		___aldiv
  9923 ;;		___bmul
  9924 ;; This function is called by:
  9925 ;;		_main
  9926 ;; This function uses a non-reentrant model
  9927 ;;
  9928                           
  9929                           
  9930                           ;psect for function _readVAnalog
  9931  0AA4                     _readVAnalog:	
  9932                           
  9933                           ;adc.c: 105: int16_t value;
  9934                           ;adc.c: 107: uint16_t analog_channel = Vchannels[channel];
  9935                           
  9936                           ;incstack = 0
  9937                           ; Regs used in _readVAnalog: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9938  0AA4  0020               	movlb	0	; select bank0
  9939  0AA5  3526               	lslf	readVAnalog@channel,w
  9940  0AA6  3E51               	addlw	(low (_Vchannels| (0+256)))& (0+255)
  9941  0AA7  0086               	movwf	6
  9942  0AA8  3001               	movlw	1	; select bank2/3
  9943  0AA9  0087               	movwf	7
  9944  0AAA  3F40               	moviw [0]fsr1
  9945  0AAB  00F9               	movwf	readVAnalog@analog_channel
  9946  0AAC  3F41               	moviw [1]fsr1
  9947  0AAD  00FA               	movwf	readVAnalog@analog_channel+1
  9948                           
  9949                           ;adc.c: 109: value = ADCRead(analog_channel);
  9950  0AAE  0879               	movf	readVAnalog@analog_channel,w
  9951  0AAF  3191  212F  318A   	fcall	_ADCRead
  9952  0AB2  0871               	movf	?_ADCRead+1,w
  9953  0AB3  00FC               	movwf	readVAnalog@value+1
  9954  0AB4  0870               	movf	?_ADCRead,w
  9955  0AB5  00FB               	movwf	readVAnalog@value
  9956                           
  9957                           ;adc.c: 111: Vtotals[channel] = Vtotals[channel]-Vsamples[channel][VsampleIndex];
  9958  0AB6  0020               	movlb	0	; select bank0
  9959  0AB7  0826               	movf	readVAnalog@channel,w
  9960  0AB8  00A8               	movwf	??_readVAnalog
  9961  0AB9  3001               	movlw	1
  9962  0ABA                     u3415:	
  9963  0ABA  35A8               	lslf	??_readVAnalog,f
  9964  0ABB  3EFF               	addlw	-1
  9965  0ABC  1D03               	skipz
  9966  0ABD  2ABA               	goto	u3415
  9967  0ABE  3528               	lslf	??_readVAnalog,w
  9968  0ABF  3E20               	addlw	(low (_Vtotals| (0+256)))& (0+255)
  9969  0AC0  0086               	movwf	6
  9970  0AC1  3001               	movlw	1	; select bank2/3
  9971  0AC2  0087               	movwf	7
  9972  0AC3  3F40               	moviw [0]fsr1
  9973  0AC4  00A9               	movwf	??_readVAnalog+1
  9974  0AC5  3F41               	moviw [1]fsr1
  9975  0AC6  00AA               	movwf	??_readVAnalog+2
  9976  0AC7  3F42               	moviw [2]fsr1
  9977  0AC8  00AB               	movwf	??_readVAnalog+3
  9978  0AC9  3F43               	moviw [3]fsr1
  9979  0ACA  00AC               	movwf	??_readVAnalog+4
  9980  0ACB  0863               	movf	_VsampleIndex,w
  9981  0ACC  00AD               	movwf	??_readVAnalog+5
  9982  0ACD  3001               	movlw	1
  9983  0ACE                     u3425:	
  9984  0ACE  35AD               	lslf	??_readVAnalog+5,f
  9985  0ACF  0B89               	decfsz	9,f
  9986  0AD0  2ACE               	goto	u3425
  9987  0AD1  300A               	movlw	10
  9988  0AD2  00AE               	movwf	??_readVAnalog+6
  9989  0AD3  082E               	movf	??_readVAnalog+6,w
  9990  0AD4  00F0               	movwf	___bmul@multiplicand
  9991  0AD5  0826               	movf	readVAnalog@channel,w
  9992  0AD6  319E  2685  318A   	fcall	___bmul
  9993  0AD9  3EA0               	addlw	(low (_Vsamples| (0+256)))& (0+255)
  9994  0ADA  0020               	movlb	0	; select bank0
  9995  0ADB  072D               	addwf	??_readVAnalog+5,w
  9996  0ADC  00AF               	movwf	??_readVAnalog+7
  9997  0ADD  082F               	movf	??_readVAnalog+7,w
  9998  0ADE  0086               	movwf	6
  9999  0ADF  3001               	movlw	1	; select bank3/4
 10000  0AE0  0087               	movwf	7
 10001  0AE1  3F40               	moviw [0]fsr1
 10002  0AE2  00B0               	movwf	??_readVAnalog+8
 10003  0AE3  3F41               	moviw [1]fsr1
 10004  0AE4  00B1               	movwf	??_readVAnalog+9
 10005  0AE5  0830               	movf	??_readVAnalog+8,w
 10006  0AE6  00B2               	movwf	??_readVAnalog+10
 10007  0AE7  0831               	movf	??_readVAnalog+9,w
 10008  0AE8  00B3               	movwf	??_readVAnalog+11
 10009  0AE9  3000               	movlw	0
 10010  0AEA  1BB3               	btfsc	??_readVAnalog+11,7
 10011  0AEB  30FF               	movlw	255
 10012  0AEC  00B4               	movwf	??_readVAnalog+12
 10013  0AED  00B5               	movwf	??_readVAnalog+13
 10014  0AEE  09B2               	comf	??_readVAnalog+10,f
 10015  0AEF  09B3               	comf	??_readVAnalog+11,f
 10016  0AF0  09B4               	comf	??_readVAnalog+12,f
 10017  0AF1  09B5               	comf	??_readVAnalog+13,f
 10018  0AF2  0AB2               	incf	??_readVAnalog+10,f
 10019  0AF3  1903               	skipnz
 10020  0AF4  0AB3               	incf	??_readVAnalog+11,f
 10021  0AF5  1903               	skipnz
 10022  0AF6  0AB4               	incf	??_readVAnalog+12,f
 10023  0AF7  1903               	skipnz
 10024  0AF8  0AB5               	incf	??_readVAnalog+13,f
 10025  0AF9  0832               	movf	??_readVAnalog+10,w
 10026  0AFA  07A9               	addwf	??_readVAnalog+1,f
 10027  0AFB  0833               	movf	??_readVAnalog+11,w
 10028  0AFC  3DAA               	addwfc	??_readVAnalog+2,f
 10029  0AFD  0834               	movf	??_readVAnalog+12,w
 10030  0AFE  3DAB               	addwfc	??_readVAnalog+3,f
 10031  0AFF  0835               	movf	??_readVAnalog+13,w
 10032  0B00  3DAC               	addwfc	??_readVAnalog+4,f
 10033  0B01  0826               	movf	readVAnalog@channel,w
 10034  0B02  00B6               	movwf	??_readVAnalog+14
 10035  0B03  3001               	movlw	1
 10036  0B04                     u3435:	
 10037  0B04  35B6               	lslf	??_readVAnalog+14,f
 10038  0B05  3EFF               	addlw	-1
 10039  0B06  1D03               	skipz
 10040  0B07  2B04               	goto	u3435
 10041  0B08  3536               	lslf	??_readVAnalog+14,w
 10042  0B09  3E20               	addlw	(low (_Vtotals| (0+256)))& (0+255)
 10043  0B0A  0086               	movwf	6
 10044  0B0B  3001               	movlw	1	; select bank2/3
 10045  0B0C  0087               	movwf	7
 10046  0B0D  0829               	movf	??_readVAnalog+1,w
 10047  0B0E  3FC0               	movwi [0]fsr1
 10048  0B0F  082A               	movf	??_readVAnalog+2,w
 10049  0B10  3FC1               	movwi [1]fsr1
 10050  0B11  082B               	movf	??_readVAnalog+3,w
 10051  0B12  3FC2               	movwi [2]fsr1
 10052  0B13  082C               	movf	??_readVAnalog+4,w
 10053  0B14  3FC3               	movwi [3]fsr1
 10054                           
 10055                           ;adc.c: 113: Vsamples[channel][VsampleIndex] = value;
 10056  0B15  0863               	movf	_VsampleIndex,w
 10057  0B16  00A8               	movwf	??_readVAnalog
 10058  0B17  3001               	movlw	1
 10059  0B18                     u3445:	
 10060  0B18  35A8               	lslf	??_readVAnalog,f
 10061  0B19  0B89               	decfsz	9,f
 10062  0B1A  2B18               	goto	u3445
 10063  0B1B  300A               	movlw	10
 10064  0B1C  00A9               	movwf	??_readVAnalog+1
 10065  0B1D  0829               	movf	??_readVAnalog+1,w
 10066  0B1E  00F0               	movwf	___bmul@multiplicand
 10067  0B1F  0826               	movf	readVAnalog@channel,w
 10068  0B20  319E  2685  318A   	fcall	___bmul
 10069  0B23  3EA0               	addlw	(low (_Vsamples| (0+256)))& (0+255)
 10070  0B24  0020               	movlb	0	; select bank0
 10071  0B25  0728               	addwf	??_readVAnalog,w
 10072  0B26  00AA               	movwf	??_readVAnalog+2
 10073  0B27  082A               	movf	??_readVAnalog+2,w
 10074  0B28  0086               	movwf	6
 10075  0B29  3001               	movlw	1	; select bank3/4
 10076  0B2A  0087               	movwf	7
 10077  0B2B  087B               	movf	readVAnalog@value,w
 10078  0B2C  3FC0               	movwi [0]fsr1
 10079  0B2D  087C               	movf	readVAnalog@value+1,w
 10080  0B2E  3FC1               	movwi [1]fsr1
 10081                           
 10082                           ;adc.c: 115: Vtotals[channel] = Vtotals[channel]+Vsamples[channel][VsampleIndex];
 10083  0B2F  0826               	movf	readVAnalog@channel,w
 10084  0B30  00A8               	movwf	??_readVAnalog
 10085  0B31  3001               	movlw	1
 10086  0B32                     u3455:	
 10087  0B32  35A8               	lslf	??_readVAnalog,f
 10088  0B33  3EFF               	addlw	-1
 10089  0B34  1D03               	skipz
 10090  0B35  2B32               	goto	u3455
 10091  0B36  3528               	lslf	??_readVAnalog,w
 10092  0B37  3E20               	addlw	(low (_Vtotals| (0+256)))& (0+255)
 10093  0B38  0086               	movwf	6
 10094  0B39  3001               	movlw	1	; select bank2/3
 10095  0B3A  0087               	movwf	7
 10096  0B3B  3F40               	moviw [0]fsr1
 10097  0B3C  00A9               	movwf	??_readVAnalog+1
 10098  0B3D  3F41               	moviw [1]fsr1
 10099  0B3E  00AA               	movwf	??_readVAnalog+2
 10100  0B3F  3F42               	moviw [2]fsr1
 10101  0B40  00AB               	movwf	??_readVAnalog+3
 10102  0B41  3F43               	moviw [3]fsr1
 10103  0B42  00AC               	movwf	??_readVAnalog+4
 10104  0B43  0863               	movf	_VsampleIndex,w
 10105  0B44  00AD               	movwf	??_readVAnalog+5
 10106  0B45  3001               	movlw	1
 10107  0B46                     u3465:	
 10108  0B46  35AD               	lslf	??_readVAnalog+5,f
 10109  0B47  0B89               	decfsz	9,f
 10110  0B48  2B46               	goto	u3465
 10111  0B49  300A               	movlw	10
 10112  0B4A  00AE               	movwf	??_readVAnalog+6
 10113  0B4B  082E               	movf	??_readVAnalog+6,w
 10114  0B4C  00F0               	movwf	___bmul@multiplicand
 10115  0B4D  0826               	movf	readVAnalog@channel,w
 10116  0B4E  319E  2685  318A   	fcall	___bmul
 10117  0B51  3EA0               	addlw	(low (_Vsamples| (0+256)))& (0+255)
 10118  0B52  0020               	movlb	0	; select bank0
 10119  0B53  072D               	addwf	??_readVAnalog+5,w
 10120  0B54  00AF               	movwf	??_readVAnalog+7
 10121  0B55  082F               	movf	??_readVAnalog+7,w
 10122  0B56  0086               	movwf	6
 10123  0B57  3001               	movlw	1	; select bank3/4
 10124  0B58  0087               	movwf	7
 10125  0B59  3F40               	moviw [0]fsr1
 10126  0B5A  00B0               	movwf	??_readVAnalog+8
 10127  0B5B  3F41               	moviw [1]fsr1
 10128  0B5C  00B1               	movwf	??_readVAnalog+9
 10129  0B5D  0830               	movf	??_readVAnalog+8,w
 10130  0B5E  00B2               	movwf	??_readVAnalog+10
 10131  0B5F  0831               	movf	??_readVAnalog+9,w
 10132  0B60  00B3               	movwf	??_readVAnalog+11
 10133  0B61  3000               	movlw	0
 10134  0B62  1BB3               	btfsc	??_readVAnalog+11,7
 10135  0B63  30FF               	movlw	255
 10136  0B64  00B4               	movwf	??_readVAnalog+12
 10137  0B65  00B5               	movwf	??_readVAnalog+13
 10138  0B66  0832               	movf	??_readVAnalog+10,w
 10139  0B67  07A9               	addwf	??_readVAnalog+1,f
 10140  0B68  0833               	movf	??_readVAnalog+11,w
 10141  0B69  3DAA               	addwfc	??_readVAnalog+2,f
 10142  0B6A  0834               	movf	??_readVAnalog+12,w
 10143  0B6B  3DAB               	addwfc	??_readVAnalog+3,f
 10144  0B6C  0835               	movf	??_readVAnalog+13,w
 10145  0B6D  3DAC               	addwfc	??_readVAnalog+4,f
 10146  0B6E  0826               	movf	readVAnalog@channel,w
 10147  0B6F  00B6               	movwf	??_readVAnalog+14
 10148  0B70  3001               	movlw	1
 10149  0B71                     u3475:	
 10150  0B71  35B6               	lslf	??_readVAnalog+14,f
 10151  0B72  3EFF               	addlw	-1
 10152  0B73  1D03               	skipz
 10153  0B74  2B71               	goto	u3475
 10154  0B75  3536               	lslf	??_readVAnalog+14,w
 10155  0B76  3E20               	addlw	(low (_Vtotals| (0+256)))& (0+255)
 10156  0B77  0086               	movwf	6
 10157  0B78  3001               	movlw	1	; select bank2/3
 10158  0B79  0087               	movwf	7
 10159  0B7A  0829               	movf	??_readVAnalog+1,w
 10160  0B7B  3FC0               	movwi [0]fsr1
 10161  0B7C  082A               	movf	??_readVAnalog+2,w
 10162  0B7D  3FC1               	movwi [1]fsr1
 10163  0B7E  082B               	movf	??_readVAnalog+3,w
 10164  0B7F  3FC2               	movwi [2]fsr1
 10165  0B80  082C               	movf	??_readVAnalog+4,w
 10166  0B81  3FC3               	movwi [3]fsr1
 10167                           
 10168                           ;adc.c: 117: if(channel>=(4-1))
 10169  0B82  3000               	movlw	0
 10170  0B83  0227               	subwf	readVAnalog@channel+1,w
 10171  0B84  3003               	movlw	3
 10172  0B85  1903               	skipnz
 10173  0B86  0226               	subwf	readVAnalog@channel,w
 10174  0B87  1C03               	skipc
 10175  0B88  2B96               	goto	l3061
 10176                           
 10177                           ;adc.c: 118: {
 10178                           ;adc.c: 119: VsampleIndex+=1;
 10179  0B89  3001               	movlw	1
 10180  0B8A  07E3               	addwf	_VsampleIndex,f
 10181  0B8B  3000               	movlw	0
 10182  0B8C  3DE4               	addwfc	_VsampleIndex+1,f
 10183                           
 10184                           ;adc.c: 120: if(VsampleIndex >= 5)VsampleIndex = 0;
 10185  0B8D  3000               	movlw	0
 10186  0B8E  0264               	subwf	_VsampleIndex+1,w
 10187  0B8F  3005               	movlw	5
 10188  0B90  1903               	skipnz
 10189  0B91  0263               	subwf	_VsampleIndex,w
 10190  0B92  1C03               	skipc
 10191  0B93  2B96               	goto	l3061
 10192  0B94  01E3               	clrf	_VsampleIndex
 10193  0B95  01E4               	clrf	_VsampleIndex+1
 10194  0B96                     l3061:	
 10195                           
 10196                           ;adc.c: 121: }
 10197                           ;adc.c: 123: value = Vtotals[channel]/5;
 10198  0B96  3000               	movlw	0
 10199  0B97  00F3               	movwf	___aldiv@divisor+3
 10200  0B98  3000               	movlw	0
 10201  0B99  00F2               	movwf	___aldiv@divisor+2
 10202  0B9A  3000               	movlw	0
 10203  0B9B  00F1               	movwf	___aldiv@divisor+1
 10204  0B9C  3005               	movlw	5
 10205  0B9D  00F0               	movwf	___aldiv@divisor
 10206  0B9E  0826               	movf	readVAnalog@channel,w
 10207  0B9F  00A8               	movwf	??_readVAnalog
 10208  0BA0  3001               	movlw	1
 10209  0BA1                     u3505:	
 10210  0BA1  35A8               	lslf	??_readVAnalog,f
 10211  0BA2  3EFF               	addlw	-1
 10212  0BA3  1D03               	skipz
 10213  0BA4  2BA1               	goto	u3505
 10214  0BA5  3528               	lslf	??_readVAnalog,w
 10215  0BA6  3E20               	addlw	(low (_Vtotals| (0+256)))& (0+255)
 10216  0BA7  0086               	movwf	6
 10217  0BA8  3001               	movlw	1	; select bank2/3
 10218  0BA9  0087               	movwf	7
 10219  0BAA  3F40               	moviw [0]fsr1
 10220  0BAB  00F4               	movwf	___aldiv@dividend
 10221  0BAC  3F41               	moviw [1]fsr1
 10222  0BAD  00F5               	movwf	___aldiv@dividend+1
 10223  0BAE  3F42               	moviw [2]fsr1
 10224  0BAF  00F6               	movwf	___aldiv@dividend+2
 10225  0BB0  3F43               	moviw [3]fsr1
 10226  0BB1  00F7               	movwf	___aldiv@dividend+3
 10227  0BB2  3195  2571         	fcall	___aldiv
 10228  0BB4  0871               	movf	?___aldiv+1,w
 10229  0BB5  00FC               	movwf	readVAnalog@value+1
 10230  0BB6  0870               	movf	?___aldiv,w
 10231  0BB7  00FB               	movwf	readVAnalog@value
 10232                           
 10233                           ;adc.c: 125: return value;
 10234  0BB8  087C               	movf	readVAnalog@value+1,w
 10235  0BB9  0020               	movlb	0	; select bank0
 10236  0BBA  00A7               	movwf	?_readVAnalog+1
 10237  0BBB  087B               	movf	readVAnalog@value,w
 10238  0BBC  00A6               	movwf	?_readVAnalog
 10239  0BBD  0008               	return
 10240  0BBE                     __end_of_readVAnalog:	
 10241                           
 10242                           	psect	text9
 10243  1E85                     __ptext9:	
 10244 ;; *************** function ___bmul *****************
 10245 ;; Defined at:
 10246 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul8.c"
 10247 ;; Parameters:    Size  Location     Type
 10248 ;;  multiplier      1    wreg     unsigned char 
 10249 ;;  multiplicand    1    0[COMMON] unsigned char 
 10250 ;; Auto vars:     Size  Location     Type
 10251 ;;  multiplier      1    3[COMMON] unsigned char 
 10252 ;;  product         1    2[COMMON] unsigned char 
 10253 ;; Return value:  Size  Location     Type
 10254 ;;                  1    wreg      unsigned char 
 10255 ;; Registers used:
 10256 ;;		wreg, status,2, status,0
 10257 ;; Tracked objects:
 10258 ;;		On entry : 0/0
 10259 ;;		On exit  : 0/0
 10260 ;;		Unchanged: 0/0
 10261 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10262 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10263 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10264 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10265 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10266 ;;Total ram usage:        4 bytes
 10267 ;; Hardware stack levels used:    1
 10268 ;; This function calls:
 10269 ;;		Nothing
 10270 ;; This function is called by:
 10271 ;;		_readVAnalog
 10272 ;; This function uses a non-reentrant model
 10273 ;;
 10274                           
 10275                           
 10276                           ;psect for function ___bmul
 10277  1E85                     ___bmul:	
 10278                           
 10279                           ;incstack = 0
 10280                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 10281                           ;___bmul@multiplier stored from wreg
 10282  1E85  00F3               	movwf	___bmul@multiplier
 10283  1E86  01F2               	clrf	___bmul@product
 10284  1E87                     l2849:	
 10285  1E87  1C73               	btfss	___bmul@multiplier,0
 10286  1E88  2E8D               	goto	l2853
 10287  1E89  0870               	movf	___bmul@multiplicand,w
 10288  1E8A  00F1               	movwf	??___bmul
 10289  1E8B  0871               	movf	??___bmul,w
 10290  1E8C  07F2               	addwf	___bmul@product,f
 10291  1E8D                     l2853:	
 10292  1E8D  1003               	clrc
 10293  1E8E  0DF0               	rlf	___bmul@multiplicand,f
 10294  1E8F  1003               	clrc
 10295  1E90  0CF3               	rrf	___bmul@multiplier,f
 10296  1E91  0873               	movf	___bmul@multiplier,w
 10297  1E92  1D03               	btfss	3,2
 10298  1E93  2E87               	goto	l2849
 10299  1E94  0872               	movf	___bmul@product,w
 10300  1E95  0008               	return
 10301  1E96                     __end_of___bmul:	
 10302                           
 10303                           	psect	text10
 10304  0BBE                     __ptext10:	
 10305 ;; *************** function _readIAnalog *****************
 10306 ;; Defined at:
 10307 ;;		line 77 in file "adc.c"
 10308 ;; Parameters:    Size  Location     Type
 10309 ;;  channel         2    6[BANK0 ] unsigned int 
 10310 ;; Auto vars:     Size  Location     Type
 10311 ;;  value           2   11[COMMON] int 
 10312 ;;  analog_chann    2    9[COMMON] unsigned int 
 10313 ;; Return value:  Size  Location     Type
 10314 ;;                  2    6[BANK0 ] int 
 10315 ;; Registers used:
 10316 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10317 ;; Tracked objects:
 10318 ;;		On entry : 0/0
 10319 ;;		On exit  : 0/0
 10320 ;;		Unchanged: 0/0
 10321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10322 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10323 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10324 ;;      Temps:          0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10325 ;;      Totals:         4      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10326 ;;Total ram usage:       24 bytes
 10327 ;; Hardware stack levels used:    1
 10328 ;; Hardware stack levels required when called:    1
 10329 ;; This function calls:
 10330 ;;		_ADCRead
 10331 ;;		___aldiv
 10332 ;;		___wmul
 10333 ;; This function is called by:
 10334 ;;		_main
 10335 ;; This function uses a non-reentrant model
 10336 ;;
 10337                           
 10338                           
 10339                           ;psect for function _readIAnalog
 10340  0BBE                     _readIAnalog:	
 10341                           
 10342                           ;adc.c: 79: int16_t value;
 10343                           ;adc.c: 81: uint16_t analog_channel = Ichannels[channel];
 10344                           
 10345                           ;incstack = 0
 10346                           ; Regs used in _readIAnalog: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10347  0BBE  0020               	movlb	0	; select bank0
 10348  0BBF  3526               	lslf	readIAnalog@channel,w
 10349  0BC0  3E59               	addlw	(low (_Ichannels| (0+256)))& (0+255)
 10350  0BC1  0086               	movwf	6
 10351  0BC2  3001               	movlw	1	; select bank2/3
 10352  0BC3  0087               	movwf	7
 10353  0BC4  3F40               	moviw [0]fsr1
 10354  0BC5  00F9               	movwf	readIAnalog@analog_channel
 10355  0BC6  3F41               	moviw [1]fsr1
 10356  0BC7  00FA               	movwf	readIAnalog@analog_channel+1
 10357                           
 10358                           ;adc.c: 83: value = ADCRead(analog_channel);
 10359  0BC8  0879               	movf	readIAnalog@analog_channel,w
 10360  0BC9  3191  212F  318B   	fcall	_ADCRead
 10361  0BCC  0871               	movf	?_ADCRead+1,w
 10362  0BCD  00FC               	movwf	readIAnalog@value+1
 10363  0BCE  0870               	movf	?_ADCRead,w
 10364  0BCF  00FB               	movwf	readIAnalog@value
 10365                           
 10366                           ;adc.c: 85: Itotals[channel] = Itotals[channel]-Isamples[channel][IsampleIndex];
 10367  0BD0  0020               	movlb	0	; select bank0
 10368  0BD1  0826               	movf	readIAnalog@channel,w
 10369  0BD2  00A8               	movwf	??_readIAnalog
 10370  0BD3  3001               	movlw	1
 10371  0BD4                     u3345:	
 10372  0BD4  35A8               	lslf	??_readIAnalog,f
 10373  0BD5  3EFF               	addlw	-1
 10374  0BD6  1D03               	skipz
 10375  0BD7  2BD4               	goto	u3345
 10376  0BD8  3528               	lslf	??_readIAnalog,w
 10377  0BD9  3E30               	addlw	(low (_Itotals| (0+256)))& (0+255)
 10378  0BDA  0086               	movwf	6
 10379  0BDB  3001               	movlw	1	; select bank2/3
 10380  0BDC  0087               	movwf	7
 10381  0BDD  3F40               	moviw [0]fsr1
 10382  0BDE  00A9               	movwf	??_readIAnalog+1
 10383  0BDF  3F41               	moviw [1]fsr1
 10384  0BE0  00AA               	movwf	??_readIAnalog+2
 10385  0BE1  3F42               	moviw [2]fsr1
 10386  0BE2  00AB               	movwf	??_readIAnalog+3
 10387  0BE3  3F43               	moviw [3]fsr1
 10388  0BE4  00AC               	movwf	??_readIAnalog+4
 10389  0BE5  0866               	movf	_IsampleIndex+1,w
 10390  0BE6  00AE               	movwf	??_readIAnalog+6
 10391  0BE7  0865               	movf	_IsampleIndex,w
 10392  0BE8  00AD               	movwf	??_readIAnalog+5
 10393  0BE9  35AD               	lslf	??_readIAnalog+5,f
 10394  0BEA  0DAE               	rlf	??_readIAnalog+6,f
 10395  0BEB  0827               	movf	readIAnalog@channel+1,w
 10396  0BEC  00F1               	movwf	___wmul@multiplier+1
 10397  0BED  0826               	movf	readIAnalog@channel,w
 10398  0BEE  00F0               	movwf	___wmul@multiplier
 10399  0BEF  3064               	movlw	100
 10400  0BF0  00F2               	movwf	___wmul@multiplicand
 10401  0BF1  3000               	movlw	0
 10402  0BF2  00F3               	movwf	___wmul@multiplicand+1
 10403  0BF3  319E  26FF  318B   	fcall	___wmul
 10404  0BF6  3060               	movlw	96
 10405  0BF7  0020               	movlb	0	; select bank0
 10406  0BF8  00AF               	movwf	??_readIAnalog+7
 10407  0BF9  3022               	movlw	34
 10408  0BFA  00B0               	movwf	??_readIAnalog+8
 10409  0BFB  0870               	movf	?___wmul,w
 10410  0BFC  072F               	addwf	??_readIAnalog+7,w
 10411  0BFD  00B1               	movwf	??_readIAnalog+9
 10412  0BFE  0871               	movf	?___wmul+1,w
 10413  0BFF  3D30               	addwfc	??_readIAnalog+8,w
 10414  0C00  00B2               	movwf	??_readIAnalog+10
 10415  0C01  082D               	movf	??_readIAnalog+5,w
 10416  0C02  0731               	addwf	??_readIAnalog+9,w
 10417  0C03  0086               	movwf	6
 10418  0C04  082E               	movf	??_readIAnalog+6,w
 10419  0C05  3D32               	addwfc	??_readIAnalog+10,w
 10420  0C06  0087               	movwf	7
 10421  0C07  3F40               	moviw [0]fsr1
 10422  0C08  00B3               	movwf	??_readIAnalog+11
 10423  0C09  3F41               	moviw [1]fsr1
 10424  0C0A  00B4               	movwf	??_readIAnalog+12
 10425  0C0B  0833               	movf	??_readIAnalog+11,w
 10426  0C0C  00B5               	movwf	??_readIAnalog+13
 10427  0C0D  0834               	movf	??_readIAnalog+12,w
 10428  0C0E  00B6               	movwf	??_readIAnalog+14
 10429  0C0F  3000               	movlw	0
 10430  0C10  1BB6               	btfsc	??_readIAnalog+14,7
 10431  0C11  30FF               	movlw	255
 10432  0C12  00B7               	movwf	??_readIAnalog+15
 10433  0C13  00B8               	movwf	??_readIAnalog+16
 10434  0C14  09B5               	comf	??_readIAnalog+13,f
 10435  0C15  09B6               	comf	??_readIAnalog+14,f
 10436  0C16  09B7               	comf	??_readIAnalog+15,f
 10437  0C17  09B8               	comf	??_readIAnalog+16,f
 10438  0C18  0AB5               	incf	??_readIAnalog+13,f
 10439  0C19  1903               	skipnz
 10440  0C1A  0AB6               	incf	??_readIAnalog+14,f
 10441  0C1B  1903               	skipnz
 10442  0C1C  0AB7               	incf	??_readIAnalog+15,f
 10443  0C1D  1903               	skipnz
 10444  0C1E  0AB8               	incf	??_readIAnalog+16,f
 10445  0C1F  0835               	movf	??_readIAnalog+13,w
 10446  0C20  07A9               	addwf	??_readIAnalog+1,f
 10447  0C21  0836               	movf	??_readIAnalog+14,w
 10448  0C22  3DAA               	addwfc	??_readIAnalog+2,f
 10449  0C23  0837               	movf	??_readIAnalog+15,w
 10450  0C24  3DAB               	addwfc	??_readIAnalog+3,f
 10451  0C25  0838               	movf	??_readIAnalog+16,w
 10452  0C26  3DAC               	addwfc	??_readIAnalog+4,f
 10453  0C27  0826               	movf	readIAnalog@channel,w
 10454  0C28  00B9               	movwf	??_readIAnalog+17
 10455  0C29  3001               	movlw	1
 10456  0C2A                     u3355:	
 10457  0C2A  35B9               	lslf	??_readIAnalog+17,f
 10458  0C2B  3EFF               	addlw	-1
 10459  0C2C  1D03               	skipz
 10460  0C2D  2C2A               	goto	u3355
 10461  0C2E  3539               	lslf	??_readIAnalog+17,w
 10462  0C2F  3E30               	addlw	(low (_Itotals| (0+256)))& (0+255)
 10463  0C30  0086               	movwf	6
 10464  0C31  3001               	movlw	1	; select bank2/3
 10465  0C32  0087               	movwf	7
 10466  0C33  0829               	movf	??_readIAnalog+1,w
 10467  0C34  3FC0               	movwi [0]fsr1
 10468  0C35  082A               	movf	??_readIAnalog+2,w
 10469  0C36  3FC1               	movwi [1]fsr1
 10470  0C37  082B               	movf	??_readIAnalog+3,w
 10471  0C38  3FC2               	movwi [2]fsr1
 10472  0C39  082C               	movf	??_readIAnalog+4,w
 10473  0C3A  3FC3               	movwi [3]fsr1
 10474                           
 10475                           ;adc.c: 87: Isamples[channel][IsampleIndex] = value;
 10476  0C3B  0866               	movf	_IsampleIndex+1,w
 10477  0C3C  00A9               	movwf	??_readIAnalog+1
 10478  0C3D  0865               	movf	_IsampleIndex,w
 10479  0C3E  00A8               	movwf	??_readIAnalog
 10480  0C3F  35A8               	lslf	??_readIAnalog,f
 10481  0C40  0DA9               	rlf	??_readIAnalog+1,f
 10482  0C41  0827               	movf	readIAnalog@channel+1,w
 10483  0C42  00F1               	movwf	___wmul@multiplier+1
 10484  0C43  0826               	movf	readIAnalog@channel,w
 10485  0C44  00F0               	movwf	___wmul@multiplier
 10486  0C45  3064               	movlw	100
 10487  0C46  00F2               	movwf	___wmul@multiplicand
 10488  0C47  3000               	movlw	0
 10489  0C48  00F3               	movwf	___wmul@multiplicand+1
 10490  0C49  319E  26FF  318B   	fcall	___wmul
 10491  0C4C  3060               	movlw	96
 10492  0C4D  0020               	movlb	0	; select bank0
 10493  0C4E  00AA               	movwf	??_readIAnalog+2
 10494  0C4F  3022               	movlw	34
 10495  0C50  00AB               	movwf	??_readIAnalog+3
 10496  0C51  0870               	movf	?___wmul,w
 10497  0C52  072A               	addwf	??_readIAnalog+2,w
 10498  0C53  00AC               	movwf	??_readIAnalog+4
 10499  0C54  0871               	movf	?___wmul+1,w
 10500  0C55  3D2B               	addwfc	??_readIAnalog+3,w
 10501  0C56  00AD               	movwf	??_readIAnalog+5
 10502  0C57  0828               	movf	??_readIAnalog,w
 10503  0C58  072C               	addwf	??_readIAnalog+4,w
 10504  0C59  0086               	movwf	6
 10505  0C5A  0829               	movf	??_readIAnalog+1,w
 10506  0C5B  3D2D               	addwfc	??_readIAnalog+5,w
 10507  0C5C  0087               	movwf	7
 10508  0C5D  087B               	movf	readIAnalog@value,w
 10509  0C5E  3FC0               	movwi [0]fsr1
 10510  0C5F  087C               	movf	readIAnalog@value+1,w
 10511  0C60  3FC1               	movwi [1]fsr1
 10512                           
 10513                           ;adc.c: 89: Itotals[channel] = Itotals[channel]+Isamples[channel][IsampleIndex];
 10514  0C61  0826               	movf	readIAnalog@channel,w
 10515  0C62  00A8               	movwf	??_readIAnalog
 10516  0C63  3001               	movlw	1
 10517  0C64                     u3365:	
 10518  0C64  35A8               	lslf	??_readIAnalog,f
 10519  0C65  3EFF               	addlw	-1
 10520  0C66  1D03               	skipz
 10521  0C67  2C64               	goto	u3365
 10522  0C68  3528               	lslf	??_readIAnalog,w
 10523  0C69  3E30               	addlw	(low (_Itotals| (0+256)))& (0+255)
 10524  0C6A  0086               	movwf	6
 10525  0C6B  3001               	movlw	1	; select bank2/3
 10526  0C6C  0087               	movwf	7
 10527  0C6D  3F40               	moviw [0]fsr1
 10528  0C6E  00A9               	movwf	??_readIAnalog+1
 10529  0C6F  3F41               	moviw [1]fsr1
 10530  0C70  00AA               	movwf	??_readIAnalog+2
 10531  0C71  3F42               	moviw [2]fsr1
 10532  0C72  00AB               	movwf	??_readIAnalog+3
 10533  0C73  3F43               	moviw [3]fsr1
 10534  0C74  00AC               	movwf	??_readIAnalog+4
 10535  0C75  0866               	movf	_IsampleIndex+1,w
 10536  0C76  00AE               	movwf	??_readIAnalog+6
 10537  0C77  0865               	movf	_IsampleIndex,w
 10538  0C78  00AD               	movwf	??_readIAnalog+5
 10539  0C79  35AD               	lslf	??_readIAnalog+5,f
 10540  0C7A  0DAE               	rlf	??_readIAnalog+6,f
 10541  0C7B  0827               	movf	readIAnalog@channel+1,w
 10542  0C7C  00F1               	movwf	___wmul@multiplier+1
 10543  0C7D  0826               	movf	readIAnalog@channel,w
 10544  0C7E  00F0               	movwf	___wmul@multiplier
 10545  0C7F  3064               	movlw	100
 10546  0C80  00F2               	movwf	___wmul@multiplicand
 10547  0C81  3000               	movlw	0
 10548  0C82  00F3               	movwf	___wmul@multiplicand+1
 10549  0C83  319E  26FF  318B   	fcall	___wmul
 10550  0C86  3060               	movlw	96
 10551  0C87  0020               	movlb	0	; select bank0
 10552  0C88  00AF               	movwf	??_readIAnalog+7
 10553  0C89  3022               	movlw	34
 10554  0C8A  00B0               	movwf	??_readIAnalog+8
 10555  0C8B  0870               	movf	?___wmul,w
 10556  0C8C  072F               	addwf	??_readIAnalog+7,w
 10557  0C8D  00B1               	movwf	??_readIAnalog+9
 10558  0C8E  0871               	movf	?___wmul+1,w
 10559  0C8F  3D30               	addwfc	??_readIAnalog+8,w
 10560  0C90  00B2               	movwf	??_readIAnalog+10
 10561  0C91  082D               	movf	??_readIAnalog+5,w
 10562  0C92  0731               	addwf	??_readIAnalog+9,w
 10563  0C93  0086               	movwf	6
 10564  0C94  082E               	movf	??_readIAnalog+6,w
 10565  0C95  3D32               	addwfc	??_readIAnalog+10,w
 10566  0C96  0087               	movwf	7
 10567  0C97  3F40               	moviw [0]fsr1
 10568  0C98  00B3               	movwf	??_readIAnalog+11
 10569  0C99  3F41               	moviw [1]fsr1
 10570  0C9A  00B4               	movwf	??_readIAnalog+12
 10571  0C9B  0833               	movf	??_readIAnalog+11,w
 10572  0C9C  00B5               	movwf	??_readIAnalog+13
 10573  0C9D  0834               	movf	??_readIAnalog+12,w
 10574  0C9E  00B6               	movwf	??_readIAnalog+14
 10575  0C9F  3000               	movlw	0
 10576  0CA0  1BB6               	btfsc	??_readIAnalog+14,7
 10577  0CA1  30FF               	movlw	255
 10578  0CA2  00B7               	movwf	??_readIAnalog+15
 10579  0CA3  00B8               	movwf	??_readIAnalog+16
 10580  0CA4  0835               	movf	??_readIAnalog+13,w
 10581  0CA5  07A9               	addwf	??_readIAnalog+1,f
 10582  0CA6  0836               	movf	??_readIAnalog+14,w
 10583  0CA7  3DAA               	addwfc	??_readIAnalog+2,f
 10584  0CA8  0837               	movf	??_readIAnalog+15,w
 10585  0CA9  3DAB               	addwfc	??_readIAnalog+3,f
 10586  0CAA  0838               	movf	??_readIAnalog+16,w
 10587  0CAB  3DAC               	addwfc	??_readIAnalog+4,f
 10588  0CAC  0826               	movf	readIAnalog@channel,w
 10589  0CAD  00B9               	movwf	??_readIAnalog+17
 10590  0CAE  3001               	movlw	1
 10591  0CAF                     u3375:	
 10592  0CAF  35B9               	lslf	??_readIAnalog+17,f
 10593  0CB0  3EFF               	addlw	-1
 10594  0CB1  1D03               	skipz
 10595  0CB2  2CAF               	goto	u3375
 10596  0CB3  3539               	lslf	??_readIAnalog+17,w
 10597  0CB4  3E30               	addlw	(low (_Itotals| (0+256)))& (0+255)
 10598  0CB5  0086               	movwf	6
 10599  0CB6  3001               	movlw	1	; select bank2/3
 10600  0CB7  0087               	movwf	7
 10601  0CB8  0829               	movf	??_readIAnalog+1,w
 10602  0CB9  3FC0               	movwi [0]fsr1
 10603  0CBA  082A               	movf	??_readIAnalog+2,w
 10604  0CBB  3FC1               	movwi [1]fsr1
 10605  0CBC  082B               	movf	??_readIAnalog+3,w
 10606  0CBD  3FC2               	movwi [2]fsr1
 10607  0CBE  082C               	movf	??_readIAnalog+4,w
 10608  0CBF  3FC3               	movwi [3]fsr1
 10609                           
 10610                           ;adc.c: 91: if(channel>=(4-1))
 10611  0CC0  3000               	movlw	0
 10612  0CC1  0227               	subwf	readIAnalog@channel+1,w
 10613  0CC2  3003               	movlw	3
 10614  0CC3  1903               	skipnz
 10615  0CC4  0226               	subwf	readIAnalog@channel,w
 10616  0CC5  1C03               	skipc
 10617  0CC6  2CD4               	goto	l3041
 10618                           
 10619                           ;adc.c: 92: {
 10620                           ;adc.c: 93: IsampleIndex+=1;
 10621  0CC7  3001               	movlw	1
 10622  0CC8  07E5               	addwf	_IsampleIndex,f
 10623  0CC9  3000               	movlw	0
 10624  0CCA  3DE6               	addwfc	_IsampleIndex+1,f
 10625                           
 10626                           ;adc.c: 94: if(IsampleIndex >= 50)IsampleIndex = 0;
 10627  0CCB  3000               	movlw	0
 10628  0CCC  0266               	subwf	_IsampleIndex+1,w
 10629  0CCD  3032               	movlw	50
 10630  0CCE  1903               	skipnz
 10631  0CCF  0265               	subwf	_IsampleIndex,w
 10632  0CD0  1C03               	skipc
 10633  0CD1  2CD4               	goto	l3041
 10634  0CD2  01E5               	clrf	_IsampleIndex
 10635  0CD3  01E6               	clrf	_IsampleIndex+1
 10636  0CD4                     l3041:	
 10637                           
 10638                           ;adc.c: 95: }
 10639                           ;adc.c: 97: value = Itotals[channel]/50;
 10640  0CD4  3000               	movlw	0
 10641  0CD5  00F3               	movwf	___aldiv@divisor+3
 10642  0CD6  3000               	movlw	0
 10643  0CD7  00F2               	movwf	___aldiv@divisor+2
 10644  0CD8  3000               	movlw	0
 10645  0CD9  00F1               	movwf	___aldiv@divisor+1
 10646  0CDA  3032               	movlw	50
 10647  0CDB  00F0               	movwf	___aldiv@divisor
 10648  0CDC  0826               	movf	readIAnalog@channel,w
 10649  0CDD  00A8               	movwf	??_readIAnalog
 10650  0CDE  3001               	movlw	1
 10651  0CDF                     u3405:	
 10652  0CDF  35A8               	lslf	??_readIAnalog,f
 10653  0CE0  3EFF               	addlw	-1
 10654  0CE1  1D03               	skipz
 10655  0CE2  2CDF               	goto	u3405
 10656  0CE3  3528               	lslf	??_readIAnalog,w
 10657  0CE4  3E30               	addlw	(low (_Itotals| (0+256)))& (0+255)
 10658  0CE5  0086               	movwf	6
 10659  0CE6  3001               	movlw	1	; select bank2/3
 10660  0CE7  0087               	movwf	7
 10661  0CE8  3F40               	moviw [0]fsr1
 10662  0CE9  00F4               	movwf	___aldiv@dividend
 10663  0CEA  3F41               	moviw [1]fsr1
 10664  0CEB  00F5               	movwf	___aldiv@dividend+1
 10665  0CEC  3F42               	moviw [2]fsr1
 10666  0CED  00F6               	movwf	___aldiv@dividend+2
 10667  0CEE  3F43               	moviw [3]fsr1
 10668  0CEF  00F7               	movwf	___aldiv@dividend+3
 10669  0CF0  3195  2571         	fcall	___aldiv
 10670  0CF2  0871               	movf	?___aldiv+1,w
 10671  0CF3  00FC               	movwf	readIAnalog@value+1
 10672  0CF4  0870               	movf	?___aldiv,w
 10673  0CF5  00FB               	movwf	readIAnalog@value
 10674                           
 10675                           ;adc.c: 99: return value;
 10676  0CF6  087C               	movf	readIAnalog@value+1,w
 10677  0CF7  0020               	movlb	0	; select bank0
 10678  0CF8  00A7               	movwf	?_readIAnalog+1
 10679  0CF9  087B               	movf	readIAnalog@value,w
 10680  0CFA  00A6               	movwf	?_readIAnalog
 10681  0CFB  0008               	return
 10682  0CFC                     __end_of_readIAnalog:	
 10683                           
 10684                           	psect	text11
 10685  1571                     __ptext11:	
 10686 ;; *************** function ___aldiv *****************
 10687 ;; Defined at:
 10688 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\aldiv.c"
 10689 ;; Parameters:    Size  Location     Type
 10690 ;;  divisor         4    0[COMMON] long 
 10691 ;;  dividend        4    4[COMMON] long 
 10692 ;; Auto vars:     Size  Location     Type
 10693 ;;  quotient        4    2[BANK0 ] long 
 10694 ;;  sign            1    1[BANK0 ] unsigned char 
 10695 ;;  counter         1    0[BANK0 ] unsigned char 
 10696 ;; Return value:  Size  Location     Type
 10697 ;;                  4    0[COMMON] long 
 10698 ;; Registers used:
 10699 ;;		wreg, status,2, status,0
 10700 ;; Tracked objects:
 10701 ;;		On entry : 0/0
 10702 ;;		On exit  : 0/0
 10703 ;;		Unchanged: 0/0
 10704 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10705 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10706 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10707 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10708 ;;      Totals:         9       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10709 ;;Total ram usage:       15 bytes
 10710 ;; Hardware stack levels used:    1
 10711 ;; This function calls:
 10712 ;;		Nothing
 10713 ;; This function is called by:
 10714 ;;		_readIAnalog
 10715 ;;		_readVAnalog
 10716 ;; This function uses a non-reentrant model
 10717 ;;
 10718                           
 10719                           
 10720                           ;psect for function ___aldiv
 10721  1571                     ___aldiv:	
 10722                           
 10723                           ;incstack = 0
 10724                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
 10725  1571  0020               	movlb	0	; select bank0
 10726  1572  01A1               	clrf	___aldiv@sign
 10727  1573  1FF3               	btfss	___aldiv@divisor+3,7
 10728  1574  2D82               	goto	l678
 10729  1575  09F0               	comf	___aldiv@divisor,f
 10730  1576  09F1               	comf	___aldiv@divisor+1,f
 10731  1577  09F2               	comf	___aldiv@divisor+2,f
 10732  1578  09F3               	comf	___aldiv@divisor+3,f
 10733  1579  0AF0               	incf	___aldiv@divisor,f
 10734  157A  1903               	skipnz
 10735  157B  0AF1               	incf	___aldiv@divisor+1,f
 10736  157C  1903               	skipnz
 10737  157D  0AF2               	incf	___aldiv@divisor+2,f
 10738  157E  1903               	skipnz
 10739  157F  0AF3               	incf	___aldiv@divisor+3,f
 10740  1580  01A1               	clrf	___aldiv@sign
 10741  1581  0AA1               	incf	___aldiv@sign,f
 10742  1582                     l678:	
 10743  1582  1FF7               	btfss	___aldiv@dividend+3,7
 10744  1583  2D93               	goto	l2871
 10745  1584  09F4               	comf	___aldiv@dividend,f
 10746  1585  09F5               	comf	___aldiv@dividend+1,f
 10747  1586  09F6               	comf	___aldiv@dividend+2,f
 10748  1587  09F7               	comf	___aldiv@dividend+3,f
 10749  1588  0AF4               	incf	___aldiv@dividend,f
 10750  1589  1903               	skipnz
 10751  158A  0AF5               	incf	___aldiv@dividend+1,f
 10752  158B  1903               	skipnz
 10753  158C  0AF6               	incf	___aldiv@dividend+2,f
 10754  158D  1903               	skipnz
 10755  158E  0AF7               	incf	___aldiv@dividend+3,f
 10756  158F  3001               	movlw	1
 10757  1590  00F8               	movwf	??___aldiv
 10758  1591  0878               	movf	??___aldiv,w
 10759  1592  06A1               	xorwf	___aldiv@sign,f
 10760  1593                     l2871:	
 10761  1593  3000               	movlw	0
 10762  1594  00A5               	movwf	___aldiv@quotient+3
 10763  1595  3000               	movlw	0
 10764  1596  00A4               	movwf	___aldiv@quotient+2
 10765  1597  3000               	movlw	0
 10766  1598  00A3               	movwf	___aldiv@quotient+1
 10767  1599  3000               	movlw	0
 10768  159A  00A2               	movwf	___aldiv@quotient
 10769  159B  0873               	movf	___aldiv@divisor+3,w
 10770  159C  0472               	iorwf	___aldiv@divisor+2,w
 10771  159D  0471               	iorwf	___aldiv@divisor+1,w
 10772  159E  0470               	iorwf	___aldiv@divisor,w
 10773  159F  1903               	skipnz
 10774  15A0  2DDC               	goto	l2893
 10775  15A1  01A0               	clrf	___aldiv@counter
 10776  15A2  0AA0               	incf	___aldiv@counter,f
 10777  15A3                     l2879:	
 10778  15A3  1BF3               	btfsc	___aldiv@divisor+3,7
 10779  15A4  2DB1               	goto	l2881
 10780  15A5  3001               	movlw	1
 10781  15A6                     u3025:	
 10782  15A6  35F0               	lslf	___aldiv@divisor,f
 10783  15A7  0DF1               	rlf	___aldiv@divisor+1,f
 10784  15A8  0DF2               	rlf	___aldiv@divisor+2,f
 10785  15A9  0DF3               	rlf	___aldiv@divisor+3,f
 10786  15AA  0B89               	decfsz	9,f
 10787  15AB  2DA6               	goto	u3025
 10788  15AC  3001               	movlw	1
 10789  15AD  00F8               	movwf	??___aldiv
 10790  15AE  0878               	movf	??___aldiv,w
 10791  15AF  07A0               	addwf	___aldiv@counter,f
 10792  15B0  2DA3               	goto	l2879
 10793  15B1                     l2881:	
 10794  15B1  3001               	movlw	1
 10795  15B2                     u3045:	
 10796  15B2  35A2               	lslf	___aldiv@quotient,f
 10797  15B3  0DA3               	rlf	___aldiv@quotient+1,f
 10798  15B4  0DA4               	rlf	___aldiv@quotient+2,f
 10799  15B5  0DA5               	rlf	___aldiv@quotient+3,f
 10800  15B6  0B89               	decfsz	9,f
 10801  15B7  2DB2               	goto	u3045
 10802  15B8  0873               	movf	___aldiv@divisor+3,w
 10803  15B9  0277               	subwf	___aldiv@dividend+3,w
 10804  15BA  1D03               	skipz
 10805  15BB  2DC6               	goto	u3055
 10806  15BC  0872               	movf	___aldiv@divisor+2,w
 10807  15BD  0276               	subwf	___aldiv@dividend+2,w
 10808  15BE  1D03               	skipz
 10809  15BF  2DC6               	goto	u3055
 10810  15C0  0871               	movf	___aldiv@divisor+1,w
 10811  15C1  0275               	subwf	___aldiv@dividend+1,w
 10812  15C2  1D03               	skipz
 10813  15C3  2DC6               	goto	u3055
 10814  15C4  0870               	movf	___aldiv@divisor,w
 10815  15C5  0274               	subwf	___aldiv@dividend,w
 10816  15C6                     u3055:	
 10817  15C6  1C03               	skipc
 10818  15C7  2DD1               	goto	l2889
 10819  15C8  0870               	movf	___aldiv@divisor,w
 10820  15C9  02F4               	subwf	___aldiv@dividend,f
 10821  15CA  0871               	movf	___aldiv@divisor+1,w
 10822  15CB  3BF5               	subwfb	___aldiv@dividend+1,f
 10823  15CC  0872               	movf	___aldiv@divisor+2,w
 10824  15CD  3BF6               	subwfb	___aldiv@dividend+2,f
 10825  15CE  0873               	movf	___aldiv@divisor+3,w
 10826  15CF  3BF7               	subwfb	___aldiv@dividend+3,f
 10827  15D0  1422               	bsf	___aldiv@quotient,0
 10828  15D1                     l2889:	
 10829  15D1  3001               	movlw	1
 10830  15D2                     u3065:	
 10831  15D2  36F3               	lsrf	___aldiv@divisor+3,f
 10832  15D3  0CF2               	rrf	___aldiv@divisor+2,f
 10833  15D4  0CF1               	rrf	___aldiv@divisor+1,f
 10834  15D5  0CF0               	rrf	___aldiv@divisor,f
 10835  15D6  0B89               	decfsz	9,f
 10836  15D7  2DD2               	goto	u3065
 10837  15D8  3001               	movlw	1
 10838  15D9  02A0               	subwf	___aldiv@counter,f
 10839  15DA  1D03               	btfss	3,2
 10840  15DB  2DB1               	goto	l2881
 10841  15DC                     l2893:	
 10842  15DC  0821               	movf	___aldiv@sign,w
 10843  15DD  1903               	btfsc	3,2
 10844  15DE  2DEA               	goto	l2897
 10845  15DF  09A2               	comf	___aldiv@quotient,f
 10846  15E0  09A3               	comf	___aldiv@quotient+1,f
 10847  15E1  09A4               	comf	___aldiv@quotient+2,f
 10848  15E2  09A5               	comf	___aldiv@quotient+3,f
 10849  15E3  0AA2               	incf	___aldiv@quotient,f
 10850  15E4  1903               	skipnz
 10851  15E5  0AA3               	incf	___aldiv@quotient+1,f
 10852  15E6  1903               	skipnz
 10853  15E7  0AA4               	incf	___aldiv@quotient+2,f
 10854  15E8  1903               	skipnz
 10855  15E9  0AA5               	incf	___aldiv@quotient+3,f
 10856  15EA                     l2897:	
 10857  15EA  0825               	movf	___aldiv@quotient+3,w
 10858  15EB  00F3               	movwf	?___aldiv+3
 10859  15EC  0824               	movf	___aldiv@quotient+2,w
 10860  15ED  00F2               	movwf	?___aldiv+2
 10861  15EE  0823               	movf	___aldiv@quotient+1,w
 10862  15EF  00F1               	movwf	?___aldiv+1
 10863  15F0  0822               	movf	___aldiv@quotient,w
 10864  15F1  00F0               	movwf	?___aldiv
 10865  15F2  0008               	return
 10866  15F3                     __end_of___aldiv:	
 10867                           
 10868                           	psect	text12
 10869  14EF                     __ptext12:	
 10870 ;; *************** function _readButton *****************
 10871 ;; Defined at:
 10872 ;;		line 8 in file "buttons.c"
 10873 ;; Parameters:    Size  Location     Type
 10874 ;;		None
 10875 ;; Auto vars:     Size  Location     Type
 10876 ;;		None
 10877 ;; Return value:  Size  Location     Type
 10878 ;;                  1    wreg      unsigned char 
 10879 ;; Registers used:
 10880 ;;		wreg, status,2, status,0, pclath, cstack
 10881 ;; Tracked objects:
 10882 ;;		On entry : 0/0
 10883 ;;		On exit  : 0/0
 10884 ;;		Unchanged: 0/0
 10885 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10886 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10887 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10888 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10889 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10890 ;;Total ram usage:        2 bytes
 10891 ;; Hardware stack levels used:    1
 10892 ;; Hardware stack levels required when called:    1
 10893 ;; This function calls:
 10894 ;;		_ADCRead
 10895 ;; This function is called by:
 10896 ;;		_main
 10897 ;; This function uses a non-reentrant model
 10898 ;;
 10899                           
 10900                           
 10901                           ;psect for function _readButton
 10902  14EF                     _readButton:	
 10903                           
 10904                           ;buttons.c: 10: readButtons=ADCRead(11);
 10905                           
 10906                           ;incstack = 0
 10907                           ; Regs used in _readButton: [wreg+status,2+status,0+pclath+cstack]
 10908  14EF  300B               	movlw	11
 10909  14F0  3191  212F  3194   	fcall	_ADCRead
 10910  14F3  0871               	movf	?_ADCRead+1,w
 10911  14F4  0020               	movlb	0	; select bank0
 10912  14F5  00E0               	movwf	_readButtons+1
 10913  14F6  0870               	movf	?_ADCRead,w
 10914  14F7  00DF               	movwf	_readButtons
 10915                           
 10916                           ;buttons.c: 12: if(readButtons>=365&&readButtons<405)
 10917  14F8  0860               	movf	_readButtons+1,w
 10918  14F9  3A80               	xorlw	128
 10919  14FA  00F4               	movwf	??_readButton
 10920  14FB  3081               	movlw	129
 10921  14FC  0274               	subwf	??_readButton,w
 10922  14FD  1D03               	skipz
 10923  14FE  2D01               	goto	u3565
 10924  14FF  306D               	movlw	109
 10925  1500  025F               	subwf	_readButtons,w
 10926  1501                     u3565:	
 10927  1501  1C03               	skipc
 10928  1502  2D13               	goto	l3097
 10929  1503  0020               	movlb	0	; select bank0
 10930  1504  0860               	movf	_readButtons+1,w
 10931  1505  3A80               	xorlw	128
 10932  1506  00F4               	movwf	??_readButton
 10933  1507  3081               	movlw	129
 10934  1508  0274               	subwf	??_readButton,w
 10935  1509  1D03               	skipz
 10936  150A  2D0D               	goto	u3575
 10937  150B  3095               	movlw	149
 10938  150C  025F               	subwf	_readButtons,w
 10939  150D                     u3575:	
 10940  150D  1803               	skipnc
 10941  150E  2D13               	goto	l3097
 10942                           
 10943                           ;buttons.c: 13: {
 10944                           ;buttons.c: 14: button=1;
 10945  150F  0020               	movlb	0	; select bank0
 10946  1510  01E9               	clrf	_button
 10947  1511  0AE9               	incf	_button,f
 10948                           
 10949                           ;buttons.c: 15: }
 10950  1512  2D41               	goto	l3109
 10951  1513                     l3097:	
 10952                           
 10953                           ;buttons.c: 17: else if(readButtons>=535&&readButtons<590)
 10954  1513  0020               	movlb	0	; select bank0
 10955  1514  0860               	movf	_readButtons+1,w
 10956  1515  3A80               	xorlw	128
 10957  1516  00F4               	movwf	??_readButton
 10958  1517  3082               	movlw	130
 10959  1518  0274               	subwf	??_readButton,w
 10960  1519  1D03               	skipz
 10961  151A  2D1D               	goto	u3585
 10962  151B  3017               	movlw	23
 10963  151C  025F               	subwf	_readButtons,w
 10964  151D                     u3585:	
 10965  151D  1C03               	skipc
 10966  151E  2D2D               	goto	l3103
 10967  151F  0020               	movlb	0	; select bank0
 10968  1520  0860               	movf	_readButtons+1,w
 10969  1521  3A80               	xorlw	128
 10970  1522  00F4               	movwf	??_readButton
 10971  1523  3082               	movlw	130
 10972  1524  0274               	subwf	??_readButton,w
 10973  1525  1D03               	skipz
 10974  1526  2D29               	goto	u3595
 10975  1527  304E               	movlw	78
 10976  1528  025F               	subwf	_readButtons,w
 10977  1529                     u3595:	
 10978  1529  1803               	skipnc
 10979  152A  2D2D               	goto	l3103
 10980                           
 10981                           ;buttons.c: 18: {
 10982                           ;buttons.c: 19: button=2;
 10983  152B  3002               	movlw	2
 10984  152C  2D3A               	goto	L8
 10985  152D                     l3103:	
 10986                           ;buttons.c: 20: }
 10987                           
 10988                           
 10989                           ;buttons.c: 22: else if(readButtons>745)
 10990  152D  0020               	movlb	0	; select bank0
 10991  152E  0860               	movf	_readButtons+1,w
 10992  152F  3A80               	xorlw	128
 10993  1530  00F4               	movwf	??_readButton
 10994  1531  3082               	movlw	130
 10995  1532  0274               	subwf	??_readButton,w
 10996  1533  1D03               	skipz
 10997  1534  2D37               	goto	u3605
 10998  1535  30EA               	movlw	234
 10999  1536  025F               	subwf	_readButtons,w
 11000  1537                     u3605:	
 11001  1537  1C03               	skipc
 11002  1538  2D3F               	goto	l3107
 11003                           
 11004                           ;buttons.c: 23: {
 11005                           ;buttons.c: 24: button=3;
 11006  1539  3003               	movlw	3
 11007  153A                     L8:	
 11008  153A  00F4               	movwf	??_readButton
 11009  153B  0874               	movf	??_readButton,w
 11010  153C  0020               	movlb	0	; select bank0
 11011  153D  00E9               	movwf	_button
 11012                           
 11013                           ;buttons.c: 25: }
 11014  153E  2D41               	goto	l3109
 11015  153F                     l3107:	
 11016                           
 11017                           ;buttons.c: 27: else
 11018                           ;buttons.c: 28: {
 11019                           ;buttons.c: 29: button=0;
 11020  153F  0020               	movlb	0	; select bank0
 11021  1540  01E9               	clrf	_button
 11022  1541                     l3109:	
 11023                           
 11024                           ;buttons.c: 30: }
 11025                           ;buttons.c: 32: if (button!=0)
 11026  1541  0869               	movf	_button,w
 11027  1542  1903               	btfsc	3,2
 11028  1543  2D6E               	goto	l3129
 11029                           
 11030                           ;buttons.c: 33: {
 11031                           ;buttons.c: 34: if (button!=lastButton)
 11032  1544  0869               	movf	_button,w
 11033  1545  0668               	xorwf	_lastButton,w
 11034  1546  1903               	skipnz
 11035  1547  2D4D               	goto	l3117
 11036                           
 11037                           ;buttons.c: 35: {
 11038                           ;buttons.c: 36: lastButton=button;
 11039  1548  0869               	movf	_button,w
 11040  1549  00F4               	movwf	??_readButton
 11041  154A  0874               	movf	??_readButton,w
 11042  154B  00E8               	movwf	_lastButton
 11043  154C  2D6E               	goto	l3129
 11044  154D                     l3117:	
 11045                           ;buttons.c: 38: }
 11046                           
 11047                           ;buttons.c: 37: j=0;
 11048                           
 11049                           
 11050                           ;buttons.c: 39: else
 11051                           ;buttons.c: 40: {
 11052                           ;buttons.c: 41: j+=1;
 11053  154D  3001               	movlw	1
 11054  154E  00F4               	movwf	??_readButton
 11055  154F  0874               	movf	??_readButton,w
 11056  1550  07E7               	addwf	_j,f
 11057                           
 11058                           ;buttons.c: 43: if(j==1)
 11059  1551  0367               	decf	_j,w
 11060  1552  1D03               	btfss	3,2
 11061  1553  2D56               	goto	l3123
 11062                           
 11063                           ;buttons.c: 44: {
 11064                           ;buttons.c: 45: return (lastButton);
 11065  1554  0868               	movf	_lastButton,w
 11066  1555  0008               	return
 11067  1556                     l3123:	
 11068                           
 11069                           ;buttons.c: 46: }
 11070                           ;buttons.c: 48: if (j>10)
 11071  1556  0867               	movf	_j,w
 11072  1557  3A80               	xorlw	128
 11073  1558  3E75               	addlw	-139
 11074  1559  1C03               	skipc
 11075  155A  2D6F               	goto	l3131
 11076                           
 11077                           ;buttons.c: 49: {
 11078                           ;buttons.c: 50: _delay((unsigned long)((25)*(32000000/4000.0)));
 11079  155B  3002               	movlw	2
 11080  155C  00F5               	movwf	??_readButton+1
 11081  155D  3004               	movlw	4
 11082  155E  00F4               	movwf	??_readButton
 11083  155F  30BA               	movlw	186
 11084  1560                     u4877:	
 11085  1560  0B89               	decfsz	9,f
 11086  1561  2D60               	goto	u4877
 11087  1562  0BF4               	decfsz	??_readButton,f
 11088  1563  2D60               	goto	u4877
 11089  1564  0BF5               	decfsz	??_readButton+1,f
 11090  1565  2D60               	goto	u4877
 11091  1566  3200               	nop2
 11092                           
 11093                           ;buttons.c: 51: j=10;
 11094  1567  300A               	movlw	10
 11095  1568  00F4               	movwf	??_readButton
 11096  1569  0874               	movf	??_readButton,w
 11097  156A  0020               	movlb	0	; select bank0
 11098  156B  00E7               	movwf	_j
 11099                           
 11100                           ;buttons.c: 52: return (lastButton);
 11101  156C  0868               	movf	_lastButton,w
 11102  156D  0008               	return
 11103  156E                     l3129:	
 11104                           ;buttons.c: 53: }
 11105                           ;buttons.c: 54: }
 11106                           ;buttons.c: 55: goto end;
 11107                           
 11108                           
 11109                           ;buttons.c: 56: }
 11110                           ;buttons.c: 58: j=0;
 11111  156E  01E7               	clrf	_j
 11112  156F                     l3131:	
 11113                           ;buttons.c: 60: end:
 11114                           
 11115                           
 11116                           ;buttons.c: 62: return (0);
 11117  156F  3000               	movlw	0
 11118  1570  0008               	return
 11119  1571                     __end_of_readButton:	
 11120                           
 11121                           	psect	text13
 11122  112F                     __ptext13:	
 11123 ;; *************** function _ADCRead *****************
 11124 ;; Defined at:
 11125 ;;		line 21 in file "adc.c"
 11126 ;; Parameters:    Size  Location     Type
 11127 ;;  channel         1    wreg     enum E14315
 11128 ;; Auto vars:     Size  Location     Type
 11129 ;;  channel         1    3[COMMON] enum E14315
 11130 ;; Return value:  Size  Location     Type
 11131 ;;                  2    0[COMMON] int 
 11132 ;; Registers used:
 11133 ;;		wreg
 11134 ;; Tracked objects:
 11135 ;;		On entry : 0/0
 11136 ;;		On exit  : 0/0
 11137 ;;		Unchanged: 0/0
 11138 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11139 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11140 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11141 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11142 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11143 ;;Total ram usage:        4 bytes
 11144 ;; Hardware stack levels used:    1
 11145 ;; This function calls:
 11146 ;;		Nothing
 11147 ;; This function is called by:
 11148 ;;		_main
 11149 ;;		_readIAnalog
 11150 ;;		_readVAnalog
 11151 ;;		_readButton
 11152 ;; This function uses a non-reentrant model
 11153 ;;
 11154                           
 11155                           
 11156                           ;psect for function _ADCRead
 11157  112F                     _ADCRead:	
 11158                           
 11159                           ;incstack = 0
 11160                           ; Regs used in _ADCRead: [wreg]
 11161                           ;ADCRead@channel stored from wreg
 11162  112F  00F3               	movwf	ADCRead@channel
 11163                           
 11164                           ;adc.c: 23: ADPCH = channel_VSS;
 11165  1130  303C               	movlw	60
 11166  1131  0021               	movlb	1	; select bank1
 11167  1132  009E               	movwf	30	;volatile
 11168                           
 11169                           ;adc.c: 25: ADCON0bits.ADON = 1;
 11170  1133  1793               	bsf	19,7	;volatile
 11171                           
 11172                           ;adc.c: 27: ADCON0bits.ADCONT = 0;
 11173  1134  1313               	bcf	19,6	;volatile
 11174                           
 11175                           ;adc.c: 29: ADCON0bits.ADGO = 1;
 11176  1135  1413               	bsf	19,0	;volatile
 11177  1136                     l210:	
 11178                           ;adc.c: 32: {
 11179                           
 11180                           ;adc.c: 31: while(ADCON0bits.ADGO)
 11181                           
 11182  1136  1813               	btfsc	19,0	;volatile
 11183  1137  2936               	goto	l210
 11184                           
 11185                           ;adc.c: 33: }
 11186                           ;adc.c: 35: ADPCH = channel;
 11187  1138  0873               	movf	ADCRead@channel,w
 11188  1139  009E               	movwf	30	;volatile
 11189                           
 11190                           ;adc.c: 37: ADCON0bits.ADON = 1;
 11191  113A  1793               	bsf	19,7	;volatile
 11192                           
 11193                           ;adc.c: 39: ADCON0bits.ADCONT = 0;
 11194  113B  1313               	bcf	19,6	;volatile
 11195                           
 11196                           ;adc.c: 41: ADCON0bits.ADGO = 1;
 11197  113C  1413               	bsf	19,0	;volatile
 11198  113D                     l213:	
 11199                           ;adc.c: 44: {
 11200                           
 11201                           ;adc.c: 43: while(ADCON0bits.ADGO)
 11202                           
 11203  113D  1813               	btfsc	19,0	;volatile
 11204  113E  293D               	goto	l213
 11205                           
 11206                           ;adc.c: 45: }
 11207                           ;adc.c: 47: return ((ADRESH<<8)+ADRESL);
 11208  113F  080D               	movf	13,w	;volatile
 11209  1140  00F1               	movwf	?_ADCRead+1
 11210  1141  080C               	movf	12,w	;volatile
 11211  1142  00F0               	movwf	?_ADCRead
 11212  1143  0008               	return
 11213  1144                     __end_of_ADCRead:	
 11214                           
 11215                           	psect	text14
 11216  0CFC                     __ptext14:	
 11217 ;; *************** function _cc_cv_mode *****************
 11218 ;; Defined at:
 11219 ;;		line 103 in file "battery_charger.c"
 11220 ;; Parameters:    Size  Location     Type
 11221 ;;  z               1    wreg     unsigned char 
 11222 ;; Auto vars:     Size  Location     Type
 11223 ;;  z               1   38[BANK0 ] unsigned char 
 11224 ;; Return value:  Size  Location     Type
 11225 ;;                  1    wreg      void 
 11226 ;; Registers used:
 11227 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11228 ;; Tracked objects:
 11229 ;;		On entry : 0/0
 11230 ;;		On exit  : 0/0
 11231 ;;		Unchanged: 0/0
 11232 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11233 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11234 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11235 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11236 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11237 ;;Total ram usage:        8 bytes
 11238 ;; Hardware stack levels used:    1
 11239 ;; Hardware stack levels required when called:    2
 11240 ;; This function calls:
 11241 ;;		___awtoft
 11242 ;;		___ftmul
 11243 ;;		___fttol
 11244 ;; This function is called by:
 11245 ;;		_main
 11246 ;; This function uses a non-reentrant model
 11247 ;;
 11248                           
 11249                           
 11250                           ;psect for function _cc_cv_mode
 11251  0CFC                     _cc_cv_mode:	
 11252                           
 11253                           ;incstack = 0
 11254                           ; Regs used in _cc_cv_mode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11255                           ;cc_cv_mode@z stored from wreg
 11256  0CFC  0020               	movlb	0	; select bank0
 11257  0CFD  00C6               	movwf	cc_cv_mode@z
 11258                           
 11259                           ;battery_charger.c: 105: if(voltage[z]>=Vref[z])
 11260  0CFE  3546               	lslf	cc_cv_mode@z,w
 11261  0CFF  3EBC               	addlw	(low (_Vref| 0))& (0+255)
 11262  0D00  0086               	movwf	6
 11263  0D01  0187               	clrf	7
 11264  0D02  3F40               	moviw [0]fsr1
 11265  0D03  00BF               	movwf	??_cc_cv_mode
 11266  0D04  3F41               	moviw [1]fsr1
 11267  0D05  00C0               	movwf	??_cc_cv_mode+1
 11268  0D06  3546               	lslf	cc_cv_mode@z,w
 11269  0D07  3EB0               	addlw	(low (_voltage| 0))& (0+255)
 11270  0D08  0086               	movwf	6
 11271  0D09  0187               	clrf	7
 11272  0D0A  3F40               	moviw [0]fsr1
 11273  0D0B  00C1               	movwf	??_cc_cv_mode+2
 11274  0D0C  3F41               	moviw [1]fsr1
 11275  0D0D  00C2               	movwf	??_cc_cv_mode+3
 11276  0D0E  0842               	movf	??_cc_cv_mode+3,w
 11277  0D0F  3A80               	xorlw	128
 11278  0D10  00C3               	movwf	??_cc_cv_mode+4
 11279  0D11  0840               	movf	??_cc_cv_mode+1,w
 11280  0D12  3A80               	xorlw	128
 11281  0D13  0243               	subwf	??_cc_cv_mode+4,w
 11282  0D14  1D03               	skipz
 11283  0D15  2D18               	goto	u3895
 11284  0D16  083F               	movf	??_cc_cv_mode,w
 11285  0D17  0241               	subwf	??_cc_cv_mode+2,w
 11286  0D18                     u3895:	
 11287  0D18  1C03               	skipc
 11288  0D19  2D58               	goto	l3285
 11289                           
 11290                           ;battery_charger.c: 106: {
 11291                           ;battery_charger.c: 107: if(VHoldMode[z]<9)VHoldMode[z]+=1;
 11292  0D1A  0020               	movlb	0	; select bank0
 11293  0D1B  0846               	movf	cc_cv_mode@z,w
 11294  0D1C  3ECA               	addlw	(low (_VHoldMode| 0))& (0+255)
 11295  0D1D  0086               	movwf	6
 11296  0D1E  0187               	clrf	7
 11297  0D1F  0801               	movf	1,w
 11298  0D20  3A80               	xorlw	128
 11299  0D21  3E77               	addlw	-137
 11300  0D22  1803               	skipnc
 11301  0D23  2D2C               	goto	l292
 11302  0D24  3001               	movlw	1
 11303  0D25  00BF               	movwf	??_cc_cv_mode
 11304  0D26  0846               	movf	cc_cv_mode@z,w
 11305  0D27  3ECA               	addlw	(low (_VHoldMode| 0))& (0+255)
 11306  0D28  0086               	movwf	6
 11307  0D29  0187               	clrf	7
 11308  0D2A  083F               	movf	??_cc_cv_mode,w
 11309  0D2B  0781               	addwf	1,f
 11310  0D2C                     l292:	
 11311                           
 11312                           ;battery_charger.c: 108: if(VHoldMode[z]<9)VHoldMode[z]+=1;
 11313  0D2C  0846               	movf	cc_cv_mode@z,w
 11314  0D2D  3ECA               	addlw	(low (_VHoldMode| 0))& (0+255)
 11315  0D2E  0086               	movwf	6
 11316  0D2F  0187               	clrf	7
 11317  0D30  0801               	movf	1,w
 11318  0D31  3A80               	xorlw	128
 11319  0D32  3E77               	addlw	-137
 11320  0D33  1803               	skipnc
 11321  0D34  2D3D               	goto	l293
 11322  0D35  3001               	movlw	1
 11323  0D36  00BF               	movwf	??_cc_cv_mode
 11324  0D37  0846               	movf	cc_cv_mode@z,w
 11325  0D38  3ECA               	addlw	(low (_VHoldMode| 0))& (0+255)
 11326  0D39  0086               	movwf	6
 11327  0D3A  0187               	clrf	7
 11328  0D3B  083F               	movf	??_cc_cv_mode,w
 11329  0D3C  0781               	addwf	1,f
 11330  0D3D                     l293:	
 11331                           
 11332                           ;battery_charger.c: 110: if(cc_cv[z])
 11333  0D3D  0846               	movf	cc_cv_mode@z,w
 11334  0D3E  3EC8               	addlw	(low (_cc_cv| 0))& (0+255)
 11335  0D3F  0086               	movwf	6
 11336  0D40  0187               	clrf	7
 11337  0D41  0801               	movf	1,w
 11338  0D42  1903               	btfsc	3,2
 11339  0D43  2D4B               	goto	l3281
 11340                           
 11341                           ;battery_charger.c: 111: {
 11342                           ;battery_charger.c: 112: cc_cv[z]-=1;
 11343  0D44  0846               	movf	cc_cv_mode@z,w
 11344  0D45  3EC8               	addlw	(low (_cc_cv| 0))& (0+255)
 11345  0D46  0086               	movwf	6
 11346  0D47  0187               	clrf	7
 11347  0D48  3001               	movlw	1
 11348  0D49  0281               	subwf	1,f
 11349                           
 11350                           ;battery_charger.c: 113: }
 11351  0D4A  2D80               	goto	l297
 11352  0D4B                     l3281:	
 11353                           
 11354                           ;battery_charger.c: 114: else
 11355                           ;battery_charger.c: 115: {
 11356                           ;battery_charger.c: 116: if(Imode[z])
 11357  0D4B  0846               	movf	cc_cv_mode@z,w
 11358  0D4C  3ECC               	addlw	(low (_Imode| 0))& (0+255)
 11359  0D4D  0086               	movwf	6
 11360  0D4E  0187               	clrf	7
 11361  0D4F  0801               	movf	1,w
 11362  0D50  1903               	btfsc	3,2
 11363  0D51  2D80               	goto	l297
 11364                           
 11365                           ;battery_charger.c: 117: {
 11366                           ;battery_charger.c: 118: Imode[z]=0;
 11367  0D52  0846               	movf	cc_cv_mode@z,w
 11368  0D53  3ECC               	addlw	(low (_Imode| 0))& (0+255)
 11369  0D54  0086               	movwf	6
 11370  0D55  0187               	clrf	7
 11371  0D56  0181               	clrf	1
 11372                           
 11373                           ;battery_charger.c: 119: }
 11374                           ;battery_charger.c: 120: }
 11375                           ;battery_charger.c: 121: }
 11376  0D57  2D80               	goto	l297
 11377  0D58                     l3285:	
 11378                           
 11379                           ;battery_charger.c: 122: else
 11380                           ;battery_charger.c: 123: {
 11381                           ;battery_charger.c: 124: VHoldMode[z]-=1;
 11382  0D58  30FF               	movlw	255
 11383  0D59  0020               	movlb	0	; select bank0
 11384  0D5A  00BF               	movwf	??_cc_cv_mode
 11385  0D5B  0846               	movf	cc_cv_mode@z,w
 11386  0D5C  3ECA               	addlw	(low (_VHoldMode| 0))& (0+255)
 11387  0D5D  0086               	movwf	6
 11388  0D5E  0187               	clrf	7
 11389  0D5F  083F               	movf	??_cc_cv_mode,w
 11390  0D60  0781               	addwf	1,f
 11391                           
 11392                           ;battery_charger.c: 125: if(VHoldMode[z]<(9*-1))
 11393  0D61  0846               	movf	cc_cv_mode@z,w
 11394  0D62  3ECA               	addlw	(low (_VHoldMode| 0))& (0+255)
 11395  0D63  0086               	movwf	6
 11396  0D64  0187               	clrf	7
 11397  0D65  0801               	movf	1,w
 11398  0D66  3A80               	xorlw	128
 11399  0D67  3E89               	addlw	137
 11400  0D68  1803               	skipnc
 11401  0D69  2D80               	goto	l297
 11402                           
 11403                           ;battery_charger.c: 126: {
 11404                           ;battery_charger.c: 127: Imode[z]=1;
 11405  0D6A  0846               	movf	cc_cv_mode@z,w
 11406  0D6B  3ECC               	addlw	(low (_Imode| 0))& (0+255)
 11407  0D6C  0086               	movwf	6
 11408  0D6D  0187               	clrf	7
 11409  0D6E  0181               	clrf	1
 11410  0D6F  0A81               	incf	1,f
 11411                           
 11412                           ;battery_charger.c: 128: cc_cv[z]=(9*2);
 11413  0D70  3012               	movlw	18
 11414  0D71  00BF               	movwf	??_cc_cv_mode
 11415  0D72  0846               	movf	cc_cv_mode@z,w
 11416  0D73  3EC8               	addlw	(low (_cc_cv| 0))& (0+255)
 11417  0D74  0086               	movwf	6
 11418  0D75  0187               	clrf	7
 11419  0D76  083F               	movf	??_cc_cv_mode,w
 11420  0D77  0081               	movwf	1
 11421                           
 11422                           ;battery_charger.c: 129: VHoldMode[z]=(9*-1);
 11423  0D78  30F7               	movlw	247
 11424  0D79  00BF               	movwf	??_cc_cv_mode
 11425  0D7A  0846               	movf	cc_cv_mode@z,w
 11426  0D7B  3ECA               	addlw	(low (_VHoldMode| 0))& (0+255)
 11427  0D7C  0086               	movwf	6
 11428  0D7D  0187               	clrf	7
 11429  0D7E  083F               	movf	??_cc_cv_mode,w
 11430  0D7F  0081               	movwf	1
 11431  0D80                     l297:	
 11432                           
 11433                           ;battery_charger.c: 130: }
 11434                           ;battery_charger.c: 131: }
 11435                           ;battery_charger.c: 133: if(current[z]>Iref[z])
 11436  0D80  3546               	lslf	cc_cv_mode@z,w
 11437  0D81  3EA8               	addlw	(low (_current| 0))& (0+255)
 11438  0D82  0086               	movwf	6
 11439  0D83  0187               	clrf	7
 11440  0D84  3F40               	moviw [0]fsr1
 11441  0D85  00BF               	movwf	??_cc_cv_mode
 11442  0D86  3F41               	moviw [1]fsr1
 11443  0D87  00C0               	movwf	??_cc_cv_mode+1
 11444  0D88  3546               	lslf	cc_cv_mode@z,w
 11445  0D89  3EC0               	addlw	(low (_Iref| 0))& (0+255)
 11446  0D8A  0086               	movwf	6
 11447  0D8B  0187               	clrf	7
 11448  0D8C  3F40               	moviw [0]fsr1
 11449  0D8D  00C1               	movwf	??_cc_cv_mode+2
 11450  0D8E  3F41               	moviw [1]fsr1
 11451  0D8F  00C2               	movwf	??_cc_cv_mode+3
 11452  0D90  0842               	movf	??_cc_cv_mode+3,w
 11453  0D91  3A80               	xorlw	128
 11454  0D92  00C3               	movwf	??_cc_cv_mode+4
 11455  0D93  0840               	movf	??_cc_cv_mode+1,w
 11456  0D94  3A80               	xorlw	128
 11457  0D95  0243               	subwf	??_cc_cv_mode+4,w
 11458  0D96  1D03               	skipz
 11459  0D97  2D9A               	goto	u3955
 11460  0D98  083F               	movf	??_cc_cv_mode,w
 11461  0D99  0241               	subwf	??_cc_cv_mode+2,w
 11462  0D9A                     u3955:	
 11463  0D9A  1803               	skipnc
 11464  0D9B  0008               	return
 11465                           
 11466                           ;battery_charger.c: 134: {
 11467                           ;battery_charger.c: 135: if(!(Imode[z]))
 11468  0D9C  0020               	movlb	0	; select bank0
 11469  0D9D  0846               	movf	cc_cv_mode@z,w
 11470  0D9E  3ECC               	addlw	(low (_Imode| 0))& (0+255)
 11471  0D9F  0086               	movwf	6
 11472  0DA0  0187               	clrf	7
 11473  0DA1  0801               	movf	1,w
 11474  0DA2  1D03               	btfss	3,2
 11475  0DA3  0008               	return
 11476                           
 11477                           ;battery_charger.c: 136: {
 11478                           ;battery_charger.c: 137: if(batteryState[z]==FLOAT)
 11479  0DA4  0846               	movf	cc_cv_mode@z,w
 11480  0DA5  3ECE               	addlw	(low (_batteryState| 0))& (0+255)
 11481  0DA6  0086               	movwf	6
 11482  0DA7  0187               	clrf	7
 11483  0DA8  3005               	movlw	5
 11484  0DA9  0601               	xorwf	1,w
 11485  0DAA  1D03               	btfss	3,2
 11486  0DAB  0008               	return
 11487                           
 11488                           ;battery_charger.c: 138: {
 11489                           ;battery_charger.c: 139: if(voltage[z]<1350+(int16_t)((250-batteryTemp)*.24)-70)
 11490  0DAC  0021               	movlb	1	; select bank1
 11491  0DAD  096D               	comf	_batteryTemp^(0+128),w
 11492  0DAE  0020               	movlb	0	; select bank0
 11493  0DAF  00BF               	movwf	??_cc_cv_mode
 11494  0DB0  0021               	movlb	1	; select bank1
 11495  0DB1  096E               	comf	(_batteryTemp+1)^(0+128),w
 11496  0DB2  0020               	movlb	0	; select bank0
 11497  0DB3  00C0               	movwf	??_cc_cv_mode+1
 11498  0DB4  0ABF               	incf	??_cc_cv_mode,f
 11499  0DB5  1903               	skipnz
 11500  0DB6  0AC0               	incf	??_cc_cv_mode+1,f
 11501  0DB7  083F               	movf	??_cc_cv_mode,w
 11502  0DB8  3EFA               	addlw	250
 11503  0DB9  00F9               	movwf	___awtoft@c
 11504  0DBA  3000               	movlw	0
 11505  0DBB  3D40               	addwfc	??_cc_cv_mode+1,w
 11506  0DBC  00FA               	movwf	___awtoft@c+1
 11507  0DBD  319F  2794  318C   	fcall	___awtoft
 11508  0DC0  0879               	movf	?___awtoft,w
 11509  0DC1  0020               	movlb	0	; select bank0
 11510  0DC2  00A4               	movwf	___ftmul@f2
 11511  0DC3  087A               	movf	?___awtoft+1,w
 11512  0DC4  00A5               	movwf	___ftmul@f2+1
 11513  0DC5  087B               	movf	?___awtoft+2,w
 11514  0DC6  00A6               	movwf	___ftmul@f2+2
 11515  0DC7  30C3               	movlw	195
 11516  0DC8  00A1               	movwf	___ftmul@f1
 11517  0DC9  3075               	movlw	117
 11518  0DCA  00A2               	movwf	___ftmul@f1+1
 11519  0DCB  303E               	movlw	62
 11520  0DCC  00A3               	movwf	___ftmul@f1+2
 11521  0DCD  3197  274C  318C   	fcall	___ftmul
 11522  0DD0  0020               	movlb	0	; select bank0
 11523  0DD1  0821               	movf	?___ftmul,w
 11524  0DD2  00B1               	movwf	___fttol@f1
 11525  0DD3  0822               	movf	?___ftmul+1,w
 11526  0DD4  00B2               	movwf	___fttol@f1+1
 11527  0DD5  0823               	movf	?___ftmul+2,w
 11528  0DD6  00B3               	movwf	___fttol@f1+2
 11529  0DD7  3180  2014  318C   	fcall	___fttol
 11530  0DDA  0020               	movlb	0	; select bank0
 11531  0DDB  0831               	movf	?___fttol,w
 11532  0DDC  3E00               	addlw	0
 11533  0DDD  00C1               	movwf	??_cc_cv_mode+2
 11534  0DDE  3005               	movlw	5
 11535  0DDF  3D32               	addwfc	?___fttol+1,w
 11536  0DE0  00C2               	movwf	??_cc_cv_mode+3
 11537  0DE1  3546               	lslf	cc_cv_mode@z,w
 11538  0DE2  3EB0               	addlw	(low (_voltage| 0))& (0+255)
 11539  0DE3  0086               	movwf	6
 11540  0DE4  0187               	clrf	7
 11541  0DE5  3F40               	moviw [0]fsr1
 11542  0DE6  00C3               	movwf	??_cc_cv_mode+4
 11543  0DE7  3F41               	moviw [1]fsr1
 11544  0DE8  00C4               	movwf	??_cc_cv_mode+5
 11545  0DE9  0844               	movf	??_cc_cv_mode+5,w
 11546  0DEA  3A80               	xorlw	128
 11547  0DEB  00C5               	movwf	??_cc_cv_mode+6
 11548  0DEC  0842               	movf	??_cc_cv_mode+3,w
 11549  0DED  3A80               	xorlw	128
 11550  0DEE  0245               	subwf	??_cc_cv_mode+6,w
 11551  0DEF  1D03               	skipz
 11552  0DF0  2DF3               	goto	u3985
 11553  0DF1  0841               	movf	??_cc_cv_mode+2,w
 11554  0DF2  0243               	subwf	??_cc_cv_mode+4,w
 11555  0DF3                     u3985:	
 11556  0DF3  1803               	skipnc
 11557  0DF4  0008               	return
 11558                           
 11559                           ;battery_charger.c: 140: {
 11560                           ;battery_charger.c: 141: batteryState[z]=CHARGE;
 11561  0DF5  3004               	movlw	4
 11562  0DF6  0020               	movlb	0	; select bank0
 11563  0DF7  00BF               	movwf	??_cc_cv_mode
 11564  0DF8  0846               	movf	cc_cv_mode@z,w
 11565  0DF9  3ECE               	addlw	(low (_batteryState| 0))& (0+255)
 11566  0DFA  0086               	movwf	6
 11567  0DFB  0187               	clrf	7
 11568  0DFC  083F               	movf	??_cc_cv_mode,w
 11569  0DFD  0081               	movwf	1
 11570                           
 11571                           ;battery_charger.c: 142: Vref[z]=1425+(int16_t)((250-batteryTemp)*.24);
 11572  0DFE  0021               	movlb	1	; select bank1
 11573  0DFF  096D               	comf	_batteryTemp^(0+128),w
 11574  0E00  0020               	movlb	0	; select bank0
 11575  0E01  00BF               	movwf	??_cc_cv_mode
 11576  0E02  0021               	movlb	1	; select bank1
 11577  0E03  096E               	comf	(_batteryTemp+1)^(0+128),w
 11578  0E04  0020               	movlb	0	; select bank0
 11579  0E05  00C0               	movwf	??_cc_cv_mode+1
 11580  0E06  0ABF               	incf	??_cc_cv_mode,f
 11581  0E07  1903               	skipnz
 11582  0E08  0AC0               	incf	??_cc_cv_mode+1,f
 11583  0E09  083F               	movf	??_cc_cv_mode,w
 11584  0E0A  3EFA               	addlw	250
 11585  0E0B  00F9               	movwf	___awtoft@c
 11586  0E0C  3000               	movlw	0
 11587  0E0D  3D40               	addwfc	??_cc_cv_mode+1,w
 11588  0E0E  00FA               	movwf	___awtoft@c+1
 11589  0E0F  319F  2794  318C   	fcall	___awtoft
 11590  0E12  0879               	movf	?___awtoft,w
 11591  0E13  0020               	movlb	0	; select bank0
 11592  0E14  00A4               	movwf	___ftmul@f2
 11593  0E15  087A               	movf	?___awtoft+1,w
 11594  0E16  00A5               	movwf	___ftmul@f2+1
 11595  0E17  087B               	movf	?___awtoft+2,w
 11596  0E18  00A6               	movwf	___ftmul@f2+2
 11597  0E19  30C3               	movlw	195
 11598  0E1A  00A1               	movwf	___ftmul@f1
 11599  0E1B  3075               	movlw	117
 11600  0E1C  00A2               	movwf	___ftmul@f1+1
 11601  0E1D  303E               	movlw	62
 11602  0E1E  00A3               	movwf	___ftmul@f1+2
 11603  0E1F  3197  274C  318C   	fcall	___ftmul
 11604  0E22  0020               	movlb	0	; select bank0
 11605  0E23  0821               	movf	?___ftmul,w
 11606  0E24  00B1               	movwf	___fttol@f1
 11607  0E25  0822               	movf	?___ftmul+1,w
 11608  0E26  00B2               	movwf	___fttol@f1+1
 11609  0E27  0823               	movf	?___ftmul+2,w
 11610  0E28  00B3               	movwf	___fttol@f1+2
 11611  0E29  3180  2014         	fcall	___fttol
 11612  0E2B  0020               	movlb	0	; select bank0
 11613  0E2C  0831               	movf	?___fttol,w
 11614  0E2D  3E91               	addlw	145
 11615  0E2E  00C1               	movwf	??_cc_cv_mode+2
 11616  0E2F  3005               	movlw	5
 11617  0E30  3D32               	addwfc	?___fttol+1,w
 11618  0E31  00C2               	movwf	??_cc_cv_mode+3
 11619  0E32  3546               	lslf	cc_cv_mode@z,w
 11620  0E33  3EBC               	addlw	(low (_Vref| 0))& (0+255)
 11621  0E34  0086               	movwf	6
 11622  0E35  0187               	clrf	7
 11623  0E36  0841               	movf	??_cc_cv_mode+2,w
 11624  0E37  3FC0               	movwi [0]fsr1
 11625  0E38  0842               	movf	??_cc_cv_mode+3,w
 11626  0E39  3FC1               	movwi [1]fsr1
 11627                           
 11628                           ;battery_charger.c: 143: Iref[z]=30;
 11629  0E3A  3546               	lslf	cc_cv_mode@z,w
 11630  0E3B  3EC0               	addlw	(low (_Iref| 0))& (0+255)
 11631  0E3C  0086               	movwf	6
 11632  0E3D  0187               	clrf	7
 11633  0E3E  301E               	movlw	30
 11634  0E3F  3FC0               	movwi [0]fsr1
 11635  0E40  3000               	movlw	0
 11636  0E41  3FC1               	movwi [1]fsr1
 11637  0E42  0008               	return
 11638  0E43                     __end_of_cc_cv_mode:	
 11639                           
 11640                           	psect	text15
 11641  12D9                     __ptext15:	
 11642 ;; *************** function _calculateCurrent3 *****************
 11643 ;; Defined at:
 11644 ;;		line 433 in file "main.c"
 11645 ;; Parameters:    Size  Location     Type
 11646 ;;		None
 11647 ;; Auto vars:     Size  Location     Type
 11648 ;;		None
 11649 ;; Return value:  Size  Location     Type
 11650 ;;                  1    wreg      void 
 11651 ;; Registers used:
 11652 ;;		wreg, status,2, status,0, pclath, cstack
 11653 ;; Tracked objects:
 11654 ;;		On entry : 0/0
 11655 ;;		On exit  : 0/0
 11656 ;;		Unchanged: 0/0
 11657 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11658 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11659 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11660 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11661 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11662 ;;Total ram usage:        3 bytes
 11663 ;; Hardware stack levels used:    1
 11664 ;; Hardware stack levels required when called:    2
 11665 ;; This function calls:
 11666 ;;		___awtoft
 11667 ;;		___ftdiv
 11668 ;;		___fttol
 11669 ;; This function is called by:
 11670 ;;		_main
 11671 ;; This function uses a non-reentrant model
 11672 ;;
 11673                           
 11674                           
 11675                           ;psect for function _calculateCurrent3
 11676  12D9                     _calculateCurrent3:	
 11677                           
 11678                           ;main.c: 435: if(Ianalogs[3]-570<=0)
 11679                           
 11680                           ;incstack = 0
 11681                           ; Regs used in _calculateCurrent3: [wreg+status,2+status,0+pclath+cstack]
 11682  12D9  0021               	movlb	1	; select bank1
 11683  12DA  0826               	movf	(_Ianalogs^(0+128)+6),w
 11684  12DB  3EC6               	addlw	198
 11685  12DC  0020               	movlb	0	; select bank0
 11686  12DD  00BF               	movwf	??_calculateCurrent3
 11687  12DE  30FD               	movlw	253
 11688  12DF  0021               	movlb	1	; select bank1
 11689  12E0  3D27               	addwfc	((_Ianalogs+1)^(0+128)+6),w
 11690  12E1  0020               	movlb	0	; select bank0
 11691  12E2  00C0               	movwf	??_calculateCurrent3+1
 11692  12E3  0840               	movf	??_calculateCurrent3+1,w
 11693  12E4  3A80               	xorlw	128
 11694  12E5  00C1               	movwf	??_calculateCurrent3+2
 11695  12E6  3080               	movlw	128
 11696  12E7  0241               	subwf	??_calculateCurrent3+2,w
 11697  12E8  1D03               	skipz
 11698  12E9  2AEC               	goto	u3535
 11699  12EA  3001               	movlw	1
 11700  12EB  023F               	subwf	??_calculateCurrent3,w
 11701  12EC                     u3535:	
 11702  12EC  1803               	skipnc
 11703  12ED  2AF2               	goto	l3083
 11704                           
 11705                           ;main.c: 436: {
 11706                           ;main.c: 437: current[3]=0;
 11707  12EE  0021               	movlb	1	; select bank1
 11708  12EF  01AE               	clrf	(_current^(0+128)+6)
 11709  12F0  01AF               	clrf	((_current+1)^(0+128)+6)
 11710                           
 11711                           ;main.c: 438: }
 11712  12F1  0008               	return
 11713  12F2                     l3083:	
 11714                           
 11715                           ;main.c: 439: else
 11716                           ;main.c: 440: {
 11717                           ;main.c: 441: current[3]=(int16_t)((Ianalogs[3]-570)/2.8);
 11718  12F2  0021               	movlb	1	; select bank1
 11719  12F3  0826               	movf	(_Ianalogs^(0+128)+6),w
 11720  12F4  3EC6               	addlw	198
 11721  12F5  00F9               	movwf	___awtoft@c
 11722  12F6  30FD               	movlw	253
 11723  12F7  3D27               	addwfc	((_Ianalogs+1)^(0+128)+6),w
 11724  12F8  00FA               	movwf	___awtoft@c+1
 11725  12F9  319F  2794  3192   	fcall	___awtoft
 11726  12FC  0879               	movf	?___awtoft,w
 11727  12FD  0020               	movlb	0	; select bank0
 11728  12FE  00A4               	movwf	___ftdiv@f1
 11729  12FF  087A               	movf	?___awtoft+1,w
 11730  1300  00A5               	movwf	___ftdiv@f1+1
 11731  1301  087B               	movf	?___awtoft+2,w
 11732  1302  00A6               	movwf	___ftdiv@f1+2
 11733  1303  3033               	movlw	51
 11734  1304  00A1               	movwf	___ftdiv@f2
 11735  1305  3033               	movlw	51
 11736  1306  00A2               	movwf	___ftdiv@f2+1
 11737  1307  3040               	movlw	64
 11738  1308  00A3               	movwf	___ftdiv@f2+2
 11739  1309  3195  25F3  3192   	fcall	___ftdiv
 11740  130C  0020               	movlb	0	; select bank0
 11741  130D  0821               	movf	?___ftdiv,w
 11742  130E  00B1               	movwf	___fttol@f1
 11743  130F  0822               	movf	?___ftdiv+1,w
 11744  1310  00B2               	movwf	___fttol@f1+1
 11745  1311  0823               	movf	?___ftdiv+2,w
 11746  1312  00B3               	movwf	___fttol@f1+2
 11747  1313  3180  2014         	fcall	___fttol
 11748  1315  0020               	movlb	0	; select bank0
 11749  1316  0832               	movf	?___fttol+1,w
 11750  1317  0021               	movlb	1	; select bank1
 11751  1318  00AF               	movwf	((_current+1)^(0+128)+6)
 11752  1319  0020               	movlb	0	; select bank0
 11753  131A  0831               	movf	?___fttol,w
 11754  131B  0021               	movlb	1	; select bank1
 11755  131C  00AE               	movwf	(_current^(0+128)+6)
 11756  131D  0008               	return
 11757  131E                     __end_of_calculateCurrent3:	
 11758                           
 11759                           	psect	text16
 11760  1F1A                     __ptext16:	
 11761 ;; *************** function _calculateCurrent2 *****************
 11762 ;; Defined at:
 11763 ;;		line 421 in file "main.c"
 11764 ;; Parameters:    Size  Location     Type
 11765 ;;		None
 11766 ;; Auto vars:     Size  Location     Type
 11767 ;;		None
 11768 ;; Return value:  Size  Location     Type
 11769 ;;                  1    wreg      void 
 11770 ;; Registers used:
 11771 ;;		wreg, status,2, status,0
 11772 ;; Tracked objects:
 11773 ;;		On entry : 0/0
 11774 ;;		On exit  : 0/0
 11775 ;;		Unchanged: 0/0
 11776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11777 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11778 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11779 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11780 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11781 ;;Total ram usage:        3 bytes
 11782 ;; Hardware stack levels used:    1
 11783 ;; This function calls:
 11784 ;;		Nothing
 11785 ;; This function is called by:
 11786 ;;		_main
 11787 ;; This function uses a non-reentrant model
 11788 ;;
 11789                           
 11790                           
 11791                           ;psect for function _calculateCurrent2
 11792  1F1A                     _calculateCurrent2:	
 11793                           
 11794                           ;main.c: 423: if(Ianalogs[2]-570<=0)
 11795                           
 11796                           ;incstack = 0
 11797                           ; Regs used in _calculateCurrent2: [wreg+status,2+status,0]
 11798  1F1A  0021               	movlb	1	; select bank1
 11799  1F1B  0824               	movf	(_Ianalogs^(0+128)+4),w
 11800  1F1C  3EC6               	addlw	198
 11801  1F1D  00F0               	movwf	??_calculateCurrent2
 11802  1F1E  30FD               	movlw	253
 11803  1F1F  3D25               	addwfc	((_Ianalogs+1)^(0+128)+4),w
 11804  1F20  00F1               	movwf	??_calculateCurrent2+1
 11805  1F21  0871               	movf	??_calculateCurrent2+1,w
 11806  1F22  3A80               	xorlw	128
 11807  1F23  00F2               	movwf	??_calculateCurrent2+2
 11808  1F24  3080               	movlw	128
 11809  1F25  0272               	subwf	??_calculateCurrent2+2,w
 11810  1F26  1D03               	skipz
 11811  1F27  2F2A               	goto	u3525
 11812  1F28  3001               	movlw	1
 11813  1F29  0270               	subwf	??_calculateCurrent2,w
 11814  1F2A                     u3525:	
 11815  1F2A  1803               	skipnc
 11816  1F2B  2F30               	goto	l3077
 11817                           
 11818                           ;main.c: 424: {
 11819                           ;main.c: 425: current[2]=0;
 11820  1F2C  0021               	movlb	1	; select bank1
 11821  1F2D  01AC               	clrf	(_current^(0+128)+4)
 11822  1F2E  01AD               	clrf	((_current+1)^(0+128)+4)
 11823                           
 11824                           ;main.c: 426: }
 11825  1F2F  0008               	return
 11826  1F30                     l3077:	
 11827                           
 11828                           ;main.c: 427: else
 11829                           ;main.c: 428: {
 11830                           ;main.c: 429: current[2]=(int16_t)(Ianalogs[2]-570);
 11831  1F30  0021               	movlb	1	; select bank1
 11832  1F31  0824               	movf	(_Ianalogs^(0+128)+4),w
 11833  1F32  3EC6               	addlw	198
 11834  1F33  00AC               	movwf	(_current^(0+128)+4)
 11835  1F34  30FD               	movlw	253
 11836  1F35  3D25               	addwfc	((_Ianalogs+1)^(0+128)+4),w
 11837  1F36  00AD               	movwf	((_current+1)^(0+128)+4)
 11838  1F37  0008               	return
 11839  1F38                     __end_of_calculateCurrent2:	
 11840                           
 11841                           	psect	text17
 11842  1294                     __ptext17:	
 11843 ;; *************** function _calculateCurrent0 *****************
 11844 ;; Defined at:
 11845 ;;		line 397 in file "main.c"
 11846 ;; Parameters:    Size  Location     Type
 11847 ;;		None
 11848 ;; Auto vars:     Size  Location     Type
 11849 ;;		None
 11850 ;; Return value:  Size  Location     Type
 11851 ;;                  1    wreg      void 
 11852 ;; Registers used:
 11853 ;;		wreg, status,2, status,0, pclath, cstack
 11854 ;; Tracked objects:
 11855 ;;		On entry : 0/0
 11856 ;;		On exit  : 0/0
 11857 ;;		Unchanged: 0/0
 11858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11859 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11860 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11861 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11862 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11863 ;;Total ram usage:        3 bytes
 11864 ;; Hardware stack levels used:    1
 11865 ;; Hardware stack levels required when called:    2
 11866 ;; This function calls:
 11867 ;;		___awtoft
 11868 ;;		___ftdiv
 11869 ;;		___fttol
 11870 ;; This function is called by:
 11871 ;;		_main
 11872 ;; This function uses a non-reentrant model
 11873 ;;
 11874                           
 11875                           
 11876                           ;psect for function _calculateCurrent0
 11877  1294                     _calculateCurrent0:	
 11878                           
 11879                           ;main.c: 399: if(Ianalogs[0]-562<=0)
 11880                           
 11881                           ;incstack = 0
 11882                           ; Regs used in _calculateCurrent0: [wreg+status,2+status,0+pclath+cstack]
 11883  1294  0021               	movlb	1	; select bank1
 11884  1295  0820               	movf	_Ianalogs^(0+128),w
 11885  1296  3ECE               	addlw	206
 11886  1297  0020               	movlb	0	; select bank0
 11887  1298  00BF               	movwf	??_calculateCurrent0
 11888  1299  30FD               	movlw	253
 11889  129A  0021               	movlb	1	; select bank1
 11890  129B  3D21               	addwfc	(_Ianalogs+1)^(0+128),w
 11891  129C  0020               	movlb	0	; select bank0
 11892  129D  00C0               	movwf	??_calculateCurrent0+1
 11893  129E  0840               	movf	??_calculateCurrent0+1,w
 11894  129F  3A80               	xorlw	128
 11895  12A0  00C1               	movwf	??_calculateCurrent0+2
 11896  12A1  3080               	movlw	128
 11897  12A2  0241               	subwf	??_calculateCurrent0+2,w
 11898  12A3  1D03               	skipz
 11899  12A4  2AA7               	goto	u3515
 11900  12A5  3001               	movlw	1
 11901  12A6  023F               	subwf	??_calculateCurrent0,w
 11902  12A7                     u3515:	
 11903  12A7  1803               	skipnc
 11904  12A8  2AAD               	goto	l3071
 11905                           
 11906                           ;main.c: 400: {
 11907                           ;main.c: 401: current[0]=0;
 11908  12A9  0021               	movlb	1	; select bank1
 11909  12AA  01A8               	clrf	_current^(0+128)
 11910  12AB  01A9               	clrf	(_current+1)^(0+128)
 11911                           
 11912                           ;main.c: 402: }
 11913  12AC  0008               	return
 11914  12AD                     l3071:	
 11915                           
 11916                           ;main.c: 403: else
 11917                           ;main.c: 404: {
 11918                           ;main.c: 405: current[0]=(int16_t)((Ianalogs[0]-562)/2.9943);
 11919  12AD  0021               	movlb	1	; select bank1
 11920  12AE  0820               	movf	_Ianalogs^(0+128),w
 11921  12AF  3ECE               	addlw	206
 11922  12B0  00F9               	movwf	___awtoft@c
 11923  12B1  30FD               	movlw	253
 11924  12B2  3D21               	addwfc	(_Ianalogs+1)^(0+128),w
 11925  12B3  00FA               	movwf	___awtoft@c+1
 11926  12B4  319F  2794  3192   	fcall	___awtoft
 11927  12B7  0879               	movf	?___awtoft,w
 11928  12B8  0020               	movlb	0	; select bank0
 11929  12B9  00A4               	movwf	___ftdiv@f1
 11930  12BA  087A               	movf	?___awtoft+1,w
 11931  12BB  00A5               	movwf	___ftdiv@f1+1
 11932  12BC  087B               	movf	?___awtoft+2,w
 11933  12BD  00A6               	movwf	___ftdiv@f1+2
 11934  12BE  30A3               	movlw	163
 11935  12BF  00A1               	movwf	___ftdiv@f2
 11936  12C0  303F               	movlw	63
 11937  12C1  00A2               	movwf	___ftdiv@f2+1
 11938  12C2  3040               	movlw	64
 11939  12C3  00A3               	movwf	___ftdiv@f2+2
 11940  12C4  3195  25F3  3192   	fcall	___ftdiv
 11941  12C7  0020               	movlb	0	; select bank0
 11942  12C8  0821               	movf	?___ftdiv,w
 11943  12C9  00B1               	movwf	___fttol@f1
 11944  12CA  0822               	movf	?___ftdiv+1,w
 11945  12CB  00B2               	movwf	___fttol@f1+1
 11946  12CC  0823               	movf	?___ftdiv+2,w
 11947  12CD  00B3               	movwf	___fttol@f1+2
 11948  12CE  3180  2014         	fcall	___fttol
 11949  12D0  0020               	movlb	0	; select bank0
 11950  12D1  0832               	movf	?___fttol+1,w
 11951  12D2  0021               	movlb	1	; select bank1
 11952  12D3  00A9               	movwf	(_current+1)^(0+128)
 11953  12D4  0020               	movlb	0	; select bank0
 11954  12D5  0831               	movf	?___fttol,w
 11955  12D6  0021               	movlb	1	; select bank1
 11956  12D7  00A8               	movwf	_current^(0+128)
 11957  12D8  0008               	return
 11958  12D9                     __end_of_calculateCurrent0:	
 11959                           
 11960                           	psect	text18
 11961  15F3                     __ptext18:	
 11962 ;; *************** function ___ftdiv *****************
 11963 ;; Defined at:
 11964 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
 11965 ;; Parameters:    Size  Location     Type
 11966 ;;  f2              3    1[BANK0 ] float 
 11967 ;;  f1              3    4[BANK0 ] float 
 11968 ;; Auto vars:     Size  Location     Type
 11969 ;;  f3              3   12[BANK0 ] float 
 11970 ;;  sign            1   16[BANK0 ] unsigned char 
 11971 ;;  exp             1   15[BANK0 ] unsigned char 
 11972 ;;  cntr            1   11[BANK0 ] unsigned char 
 11973 ;; Return value:  Size  Location     Type
 11974 ;;                  3    1[BANK0 ] float 
 11975 ;; Registers used:
 11976 ;;		wreg, status,2, status,0, pclath, cstack
 11977 ;; Tracked objects:
 11978 ;;		On entry : 0/0
 11979 ;;		On exit  : 0/0
 11980 ;;		Unchanged: 0/0
 11981 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11982 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11983 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11984 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11985 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11986 ;;Total ram usage:       16 bytes
 11987 ;; Hardware stack levels used:    1
 11988 ;; Hardware stack levels required when called:    1
 11989 ;; This function calls:
 11990 ;;		___ftpack
 11991 ;; This function is called by:
 11992 ;;		_main
 11993 ;;		_calculateCurrent0
 11994 ;;		_calculateCurrent3
 11995 ;;		_tempCalc
 11996 ;; This function uses a non-reentrant model
 11997 ;;
 11998                           
 11999                           
 12000                           ;psect for function ___ftdiv
 12001  15F3                     ___ftdiv:	
 12002                           
 12003                           ;incstack = 0
 12004                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 12005  15F3  0020               	movlb	0	; select bank0
 12006  15F4  0824               	movf	___ftdiv@f1,w
 12007  15F5  00A7               	movwf	??___ftdiv
 12008  15F6  0825               	movf	___ftdiv@f1+1,w
 12009  15F7  00A8               	movwf	??___ftdiv+1
 12010  15F8  0826               	movf	___ftdiv@f1+2,w
 12011  15F9  00A9               	movwf	??___ftdiv+2
 12012  15FA  1003               	clrc
 12013  15FB  0D28               	rlf	??___ftdiv+1,w
 12014  15FC  0D29               	rlf	??___ftdiv+2,w
 12015  15FD  00AA               	movwf	??___ftdiv+3
 12016  15FE  082A               	movf	??___ftdiv+3,w
 12017  15FF  00AF               	movwf	___ftdiv@exp
 12018  1600  082F               	movf	___ftdiv@exp,w
 12019  1601  1D03               	btfss	3,2
 12020  1602  2E0A               	goto	l2951
 12021  1603  3000               	movlw	0
 12022  1604  00A1               	movwf	?___ftdiv
 12023  1605  3000               	movlw	0
 12024  1606  00A2               	movwf	?___ftdiv+1
 12025  1607  3000               	movlw	0
 12026  1608  00A3               	movwf	?___ftdiv+2
 12027  1609  0008               	return
 12028  160A                     l2951:	
 12029  160A  0821               	movf	___ftdiv@f2,w
 12030  160B  00A7               	movwf	??___ftdiv
 12031  160C  0822               	movf	___ftdiv@f2+1,w
 12032  160D  00A8               	movwf	??___ftdiv+1
 12033  160E  0823               	movf	___ftdiv@f2+2,w
 12034  160F  00A9               	movwf	??___ftdiv+2
 12035  1610  1003               	clrc
 12036  1611  0D28               	rlf	??___ftdiv+1,w
 12037  1612  0D29               	rlf	??___ftdiv+2,w
 12038  1613  00AA               	movwf	??___ftdiv+3
 12039  1614  082A               	movf	??___ftdiv+3,w
 12040  1615  00B0               	movwf	___ftdiv@sign
 12041  1616  0830               	movf	___ftdiv@sign,w
 12042  1617  1D03               	btfss	3,2
 12043  1618  2E20               	goto	l2957
 12044  1619  3000               	movlw	0
 12045  161A  00A1               	movwf	?___ftdiv
 12046  161B  3000               	movlw	0
 12047  161C  00A2               	movwf	?___ftdiv+1
 12048  161D  3000               	movlw	0
 12049  161E  00A3               	movwf	?___ftdiv+2
 12050  161F  0008               	return
 12051  1620                     l2957:	
 12052  1620  3000               	movlw	0
 12053  1621  00AC               	movwf	___ftdiv@f3
 12054  1622  3000               	movlw	0
 12055  1623  00AD               	movwf	___ftdiv@f3+1
 12056  1624  3000               	movlw	0
 12057  1625  00AE               	movwf	___ftdiv@f3+2
 12058  1626  3089               	movlw	137
 12059  1627  0730               	addwf	___ftdiv@sign,w
 12060  1628  00A7               	movwf	??___ftdiv
 12061  1629  0827               	movf	??___ftdiv,w
 12062  162A  02AF               	subwf	___ftdiv@exp,f
 12063  162B  0824               	movf	___ftdiv@f1,w
 12064  162C  00A7               	movwf	??___ftdiv
 12065  162D  0825               	movf	___ftdiv@f1+1,w
 12066  162E  00A8               	movwf	??___ftdiv+1
 12067  162F  0826               	movf	___ftdiv@f1+2,w
 12068  1630  00A9               	movwf	??___ftdiv+2
 12069  1631  3010               	movlw	16
 12070  1632                     u3215:	
 12071  1632  36A9               	lsrf	??___ftdiv+2,f
 12072  1633  0CA8               	rrf	??___ftdiv+1,f
 12073  1634  0CA7               	rrf	??___ftdiv,f
 12074  1635  0B89               	decfsz	9,f
 12075  1636  2E32               	goto	u3215
 12076  1637  0827               	movf	??___ftdiv,w
 12077  1638  00AA               	movwf	??___ftdiv+3
 12078  1639  082A               	movf	??___ftdiv+3,w
 12079  163A  00B0               	movwf	___ftdiv@sign
 12080  163B  0821               	movf	___ftdiv@f2,w
 12081  163C  00A7               	movwf	??___ftdiv
 12082  163D  0822               	movf	___ftdiv@f2+1,w
 12083  163E  00A8               	movwf	??___ftdiv+1
 12084  163F  0823               	movf	___ftdiv@f2+2,w
 12085  1640  00A9               	movwf	??___ftdiv+2
 12086  1641  3010               	movlw	16
 12087  1642                     u3225:	
 12088  1642  36A9               	lsrf	??___ftdiv+2,f
 12089  1643  0CA8               	rrf	??___ftdiv+1,f
 12090  1644  0CA7               	rrf	??___ftdiv,f
 12091  1645  0B89               	decfsz	9,f
 12092  1646  2E42               	goto	u3225
 12093  1647  0827               	movf	??___ftdiv,w
 12094  1648  00AA               	movwf	??___ftdiv+3
 12095  1649  082A               	movf	??___ftdiv+3,w
 12096  164A  06B0               	xorwf	___ftdiv@sign,f
 12097  164B  3080               	movlw	128
 12098  164C  00A7               	movwf	??___ftdiv
 12099  164D  0827               	movf	??___ftdiv,w
 12100  164E  05B0               	andwf	___ftdiv@sign,f
 12101  164F  17A5               	bsf	___ftdiv@f1+1,7
 12102  1650  30FF               	movlw	255
 12103  1651  05A4               	andwf	___ftdiv@f1,f
 12104  1652  30FF               	movlw	255
 12105  1653  05A5               	andwf	___ftdiv@f1+1,f
 12106  1654  3000               	movlw	0
 12107  1655  05A6               	andwf	___ftdiv@f1+2,f
 12108  1656  17A2               	bsf	___ftdiv@f2+1,7
 12109  1657  30FF               	movlw	255
 12110  1658  05A1               	andwf	___ftdiv@f2,f
 12111  1659  30FF               	movlw	255
 12112  165A  05A2               	andwf	___ftdiv@f2+1,f
 12113  165B  3000               	movlw	0
 12114  165C  05A3               	andwf	___ftdiv@f2+2,f
 12115  165D  3018               	movlw	24
 12116  165E  00A7               	movwf	??___ftdiv
 12117  165F  0827               	movf	??___ftdiv,w
 12118  1660  00AB               	movwf	___ftdiv@cntr
 12119  1661                     l2971:	
 12120  1661  3001               	movlw	1
 12121  1662                     u3235:	
 12122  1662  35AC               	lslf	___ftdiv@f3,f
 12123  1663  0DAD               	rlf	___ftdiv@f3+1,f
 12124  1664  0DAE               	rlf	___ftdiv@f3+2,f
 12125  1665  0B89               	decfsz	9,f
 12126  1666  2E62               	goto	u3235
 12127  1667  0823               	movf	___ftdiv@f2+2,w
 12128  1668  0226               	subwf	___ftdiv@f1+2,w
 12129  1669  1D03               	skipz
 12130  166A  2E71               	goto	u3245
 12131  166B  0822               	movf	___ftdiv@f2+1,w
 12132  166C  0225               	subwf	___ftdiv@f1+1,w
 12133  166D  1D03               	skipz
 12134  166E  2E71               	goto	u3245
 12135  166F  0821               	movf	___ftdiv@f2,w
 12136  1670  0224               	subwf	___ftdiv@f1,w
 12137  1671                     u3245:	
 12138  1671  1C03               	skipc
 12139  1672  2E7A               	goto	l2979
 12140  1673  0821               	movf	___ftdiv@f2,w
 12141  1674  02A4               	subwf	___ftdiv@f1,f
 12142  1675  0822               	movf	___ftdiv@f2+1,w
 12143  1676  3BA5               	subwfb	___ftdiv@f1+1,f
 12144  1677  0823               	movf	___ftdiv@f2+2,w
 12145  1678  3BA6               	subwfb	___ftdiv@f1+2,f
 12146  1679  142C               	bsf	___ftdiv@f3,0
 12147  167A                     l2979:	
 12148  167A  3001               	movlw	1
 12149  167B                     u3255:	
 12150  167B  35A4               	lslf	___ftdiv@f1,f
 12151  167C  0DA5               	rlf	___ftdiv@f1+1,f
 12152  167D  0DA6               	rlf	___ftdiv@f1+2,f
 12153  167E  0B89               	decfsz	9,f
 12154  167F  2E7B               	goto	u3255
 12155  1680  3001               	movlw	1
 12156  1681  02AB               	subwf	___ftdiv@cntr,f
 12157  1682  1D03               	btfss	3,2
 12158  1683  2E61               	goto	l2971
 12159  1684  082C               	movf	___ftdiv@f3,w
 12160  1685  00F0               	movwf	___ftpack@arg
 12161  1686  082D               	movf	___ftdiv@f3+1,w
 12162  1687  00F1               	movwf	___ftpack@arg+1
 12163  1688  082E               	movf	___ftdiv@f3+2,w
 12164  1689  00F2               	movwf	___ftpack@arg+2
 12165  168A  082F               	movf	___ftdiv@exp,w
 12166  168B  00A7               	movwf	??___ftdiv
 12167  168C  0827               	movf	??___ftdiv,w
 12168  168D  00F3               	movwf	___ftpack@exp
 12169  168E  0830               	movf	___ftdiv@sign,w
 12170  168F  00A8               	movwf	??___ftdiv+1
 12171  1690  0828               	movf	??___ftdiv+1,w
 12172  1691  00F4               	movwf	___ftpack@sign
 12173  1692  3194  2423         	fcall	___ftpack
 12174  1694  0870               	movf	?___ftpack,w
 12175  1695  0020               	movlb	0	; select bank0
 12176  1696  00A1               	movwf	?___ftdiv
 12177  1697  0871               	movf	?___ftpack+1,w
 12178  1698  00A2               	movwf	?___ftdiv+1
 12179  1699  0872               	movf	?___ftpack+2,w
 12180  169A  00A3               	movwf	?___ftdiv+2
 12181  169B  0008               	return
 12182  169C                     __end_of___ftdiv:	
 12183                           
 12184                           	psect	text19
 12185  11E2                     __ptext19:	
 12186 ;; *************** function _SYSTEM_Initialize *****************
 12187 ;; Defined at:
 12188 ;;		line 35 in file "system.c"
 12189 ;; Parameters:    Size  Location     Type
 12190 ;;		None
 12191 ;; Auto vars:     Size  Location     Type
 12192 ;;		None
 12193 ;; Return value:  Size  Location     Type
 12194 ;;                  1    wreg      void 
 12195 ;; Registers used:
 12196 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12197 ;; Tracked objects:
 12198 ;;		On entry : 0/0
 12199 ;;		On exit  : 0/0
 12200 ;;		Unchanged: 0/0
 12201 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12202 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12203 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12204 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12205 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12206 ;;Total ram usage:        2 bytes
 12207 ;; Hardware stack levels used:    1
 12208 ;; Hardware stack levels required when called:    3
 12209 ;; This function calls:
 12210 ;;		_ADC_Initialize
 12211 ;;		_Init_Battery_State_Machine
 12212 ;;		_LCDClear
 12213 ;;		_LCDInit
 12214 ;;		_OSCILLATOR_Initialize
 12215 ;;		_PIN_MANAGER_Initialize
 12216 ;;		_PWM_Initialize
 12217 ;;		_TMR2_Initialize
 12218 ;;		_TMR4_Initialize
 12219 ;; This function is called by:
 12220 ;;		_main
 12221 ;; This function uses a non-reentrant model
 12222 ;;
 12223                           
 12224                           
 12225                           ;psect for function _SYSTEM_Initialize
 12226  11E2                     _SYSTEM_Initialize:	
 12227                           
 12228                           ;system.c: 37: PIN_MANAGER_Initialize();
 12229                           
 12230                           ;incstack = 0
 12231                           ; Regs used in _SYSTEM_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12232  11E2  3191  2170  3191   	fcall	_PIN_MANAGER_Initialize
 12233                           
 12234                           ;system.c: 38: OSCILLATOR_Initialize();
 12235  11E5  319E  2656  3191   	fcall	_OSCILLATOR_Initialize
 12236                           
 12237                           ;system.c: 40: ADC_Initialize();
 12238  11E8  319F  2756  3191   	fcall	_ADC_Initialize
 12239                           
 12240                           ;system.c: 41: PWM_Initialize();
 12241  11EB  319F  2775  3191   	fcall	_PWM_Initialize
 12242                           
 12243                           ;system.c: 43: TMR2_Initialize();
 12244  11EE  319E  2677  3191   	fcall	_TMR2_Initialize
 12245                           
 12246                           ;system.c: 44: TMR4_Initialize();
 12247  11F1  3188  2000  3191   	fcall	_TMR4_Initialize
 12248                           
 12249                           ;system.c: 45: Init_Battery_State_Machine(0);
 12250  11F4  3000               	movlw	0
 12251  11F5  3194  2487  3191   	fcall	_Init_Battery_State_Machine
 12252                           
 12253                           ;system.c: 46: Init_Battery_State_Machine(1);
 12254  11F8  3001               	movlw	1
 12255  11F9  3194  2487  3191   	fcall	_Init_Battery_State_Machine
 12256                           
 12257                           ;system.c: 47: LCDInit();
 12258  11FC  3191  21A7  3191   	fcall	_LCDInit
 12259                           
 12260                           ;system.c: 48: _delay((unsigned long)((200)*(32000000/4000.0)));
 12261  11FF  3009               	movlw	9
 12262  1200  0020               	movlb	0	; select bank0
 12263  1201  00C5               	movwf	??_SYSTEM_Initialize+1
 12264  1202  301E               	movlw	30
 12265  1203  00C4               	movwf	??_SYSTEM_Initialize
 12266  1204  30E4               	movlw	228
 12267  1205                     u4887:	
 12268  1205  0B89               	decfsz	9,f
 12269  1206  2A05               	goto	u4887
 12270  1207  0BC4               	decfsz	??_SYSTEM_Initialize,f
 12271  1208  2A05               	goto	u4887
 12272  1209  0BC5               	decfsz	??_SYSTEM_Initialize+1,f
 12273  120A  2A05               	goto	u4887
 12274  120B  0000               	nop
 12275                           
 12276                           ;system.c: 49: LCDClear();
 12277  120C  319F  27DA  3191   	fcall	_LCDClear
 12278                           
 12279                           ;system.c: 50: _delay((unsigned long)((200)*(32000000/4000.0)));
 12280  120F  3009               	movlw	9
 12281  1210  0020               	movlb	0	; select bank0
 12282  1211  00C5               	movwf	??_SYSTEM_Initialize+1
 12283  1212  301E               	movlw	30
 12284  1213  00C4               	movwf	??_SYSTEM_Initialize
 12285  1214  30E4               	movlw	228
 12286  1215                     u4897:	
 12287  1215  0B89               	decfsz	9,f
 12288  1216  2A15               	goto	u4897
 12289  1217  0BC4               	decfsz	??_SYSTEM_Initialize,f
 12290  1218  2A15               	goto	u4897
 12291  1219  0BC5               	decfsz	??_SYSTEM_Initialize+1,f
 12292  121A  2A15               	goto	u4897
 12293  121B  0000               	nop
 12294  121C  0008               	return
 12295  121D                     __end_of_SYSTEM_Initialize:	
 12296                           
 12297                           	psect	text20
 12298  0800                     __ptext20:	
 12299 ;; *************** function _TMR4_Initialize *****************
 12300 ;; Defined at:
 12301 ;;		line 25 in file "tmr.c"
 12302 ;; Parameters:    Size  Location     Type
 12303 ;;		None
 12304 ;; Auto vars:     Size  Location     Type
 12305 ;;		None
 12306 ;; Return value:  Size  Location     Type
 12307 ;;                  1    wreg      void 
 12308 ;; Registers used:
 12309 ;;		wreg, status,2
 12310 ;; Tracked objects:
 12311 ;;		On entry : 0/0
 12312 ;;		On exit  : 0/0
 12313 ;;		Unchanged: 0/0
 12314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12315 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12316 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12317 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12318 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12319 ;;Total ram usage:        0 bytes
 12320 ;; Hardware stack levels used:    1
 12321 ;; This function calls:
 12322 ;;		Nothing
 12323 ;; This function is called by:
 12324 ;;		_SYSTEM_Initialize
 12325 ;; This function uses a non-reentrant model
 12326 ;;
 12327                           
 12328                           
 12329                           ;psect for function _TMR4_Initialize
 12330  0800                     _TMR4_Initialize:	
 12331                           
 12332                           ;tmr.c: 27: T4CON = 0x00;
 12333                           
 12334                           ;incstack = 0
 12335                           ; Regs used in _TMR4_Initialize: [wreg+status,2]
 12336  0800  0025               	movlb	5	; select bank5
 12337  0801  0194               	clrf	20	;volatile
 12338                           
 12339                           ;tmr.c: 29: T4CLKCON = 0x01;
 12340  0802  3001               	movlw	1
 12341  0803  0096               	movwf	22	;volatile
 12342                           
 12343                           ;tmr.c: 31: T4HLT = 0x00;
 12344  0804  0195               	clrf	21	;volatile
 12345                           
 12346                           ;tmr.c: 33: T4RST = 0x00;
 12347  0805  0197               	clrf	23	;volatile
 12348                           
 12349                           ;tmr.c: 35: T4PR = 0xFE;
 12350  0806  30FE               	movlw	254
 12351  0807  0093               	movwf	19	;volatile
 12352                           
 12353                           ;tmr.c: 39: T4TMR = 0x00;
 12354  0808  0192               	clrf	18	;volatile
 12355                           
 12356                           ;tmr.c: 41: PIR4bits.TMR4IF = 0;
 12357  0809  002E               	movlb	14	; select bank14
 12358  080A  1190               	bcf	16,3	;volatile
 12359                           
 12360                           ;tmr.c: 43: T4CONbits.TMR4ON = 1;
 12361  080B  0025               	movlb	5	; select bank5
 12362  080C  1794               	bsf	20,7	;volatile
 12363  080D  0008               	return
 12364  080E                     __end_of_TMR4_Initialize:	
 12365                           
 12366                           	psect	text21
 12367  1E77                     __ptext21:	
 12368 ;; *************** function _TMR2_Initialize *****************
 12369 ;; Defined at:
 12370 ;;		line 3 in file "tmr.c"
 12371 ;; Parameters:    Size  Location     Type
 12372 ;;		None
 12373 ;; Auto vars:     Size  Location     Type
 12374 ;;		None
 12375 ;; Return value:  Size  Location     Type
 12376 ;;                  1    wreg      void 
 12377 ;; Registers used:
 12378 ;;		wreg, status,2
 12379 ;; Tracked objects:
 12380 ;;		On entry : 0/0
 12381 ;;		On exit  : 0/0
 12382 ;;		Unchanged: 0/0
 12383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12384 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12385 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12386 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12387 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12388 ;;Total ram usage:        0 bytes
 12389 ;; Hardware stack levels used:    1
 12390 ;; This function calls:
 12391 ;;		Nothing
 12392 ;; This function is called by:
 12393 ;;		_SYSTEM_Initialize
 12394 ;; This function uses a non-reentrant model
 12395 ;;
 12396                           
 12397                           
 12398                           ;psect for function _TMR2_Initialize
 12399  1E77                     _TMR2_Initialize:	
 12400                           
 12401                           ;tmr.c: 5: T2CON = 0x00;
 12402                           
 12403                           ;incstack = 0
 12404                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
 12405  1E77  0025               	movlb	5	; select bank5
 12406  1E78  018E               	clrf	14	;volatile
 12407                           
 12408                           ;tmr.c: 7: T2CLKCON = 0x01;
 12409  1E79  3001               	movlw	1
 12410  1E7A  0090               	movwf	16	;volatile
 12411                           
 12412                           ;tmr.c: 9: T2HLT = 0x00;
 12413  1E7B  018F               	clrf	15	;volatile
 12414                           
 12415                           ;tmr.c: 11: T2RST = 0x00;
 12416  1E7C  0191               	clrf	17	;volatile
 12417                           
 12418                           ;tmr.c: 13: T2PR = 0xFE;
 12419  1E7D  30FE               	movlw	254
 12420  1E7E  008D               	movwf	13	;volatile
 12421                           
 12422                           ;tmr.c: 18: T2TMR = 0x00;
 12423  1E7F  018C               	clrf	12	;volatile
 12424                           
 12425                           ;tmr.c: 20: PIR4bits.TMR2IF = 0;
 12426  1E80  002E               	movlb	14	; select bank14
 12427  1E81  1090               	bcf	16,1	;volatile
 12428                           
 12429                           ;tmr.c: 22: T2CONbits.TMR2ON = 1;
 12430  1E82  0025               	movlb	5	; select bank5
 12431  1E83  178E               	bsf	14,7	;volatile
 12432  1E84  0008               	return
 12433  1E85                     __end_of_TMR2_Initialize:	
 12434                           
 12435                           	psect	text22
 12436  1F75                     __ptext22:	
 12437 ;; *************** function _PWM_Initialize *****************
 12438 ;; Defined at:
 12439 ;;		line 3 in file "pwm.c"
 12440 ;; Parameters:    Size  Location     Type
 12441 ;;		None
 12442 ;; Auto vars:     Size  Location     Type
 12443 ;;		None
 12444 ;; Return value:  Size  Location     Type
 12445 ;;                  1    wreg      void 
 12446 ;; Registers used:
 12447 ;;		wreg, status,2, status,0
 12448 ;; Tracked objects:
 12449 ;;		On entry : 0/0
 12450 ;;		On exit  : 0/0
 12451 ;;		Unchanged: 0/0
 12452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12453 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12454 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12455 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12456 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12457 ;;Total ram usage:        0 bytes
 12458 ;; Hardware stack levels used:    1
 12459 ;; This function calls:
 12460 ;;		Nothing
 12461 ;; This function is called by:
 12462 ;;		_SYSTEM_Initialize
 12463 ;; This function uses a non-reentrant model
 12464 ;;
 12465                           
 12466                           
 12467                           ;psect for function _PWM_Initialize
 12468  1F75                     _PWM_Initialize:	
 12469                           
 12470                           ;pwm.c: 5: PWM6CON = 0x80;
 12471                           
 12472                           ;incstack = 0
 12473                           ; Regs used in _PWM_Initialize: [wreg+status,2+status,0]
 12474  1F75  3080               	movlw	128
 12475  1F76  0027               	movlb	7	; select bank7
 12476  1F77  008E               	movwf	14	;volatile
 12477                           
 12478                           ;pwm.c: 7: PWM6DCH = 0x00;
 12479  1F78  018D               	clrf	13	;volatile
 12480                           
 12481                           ;pwm.c: 9: PWM6DCL = 0x00;
 12482  1F79  018C               	clrf	12	;volatile
 12483                           
 12484                           ;pwm.c: 11: CCPTMRS1bits.P6TSEL = 0x01;
 12485  1F7A  0024               	movlb	4	; select bank4
 12486  1F7B  081F               	movf	31,w	;volatile
 12487  1F7C  39F3               	andlw	-13
 12488  1F7D  3804               	iorlw	4
 12489  1F7E  009F               	movwf	31	;volatile
 12490                           
 12491                           ;pwm.c: 14: PWM7CON = 0x80;
 12492  1F7F  3080               	movlw	128
 12493  1F80  0027               	movlb	7	; select bank7
 12494  1F81  0092               	movwf	18	;volatile
 12495                           
 12496                           ;pwm.c: 16: PWM7DCH = 0x00;
 12497  1F82  0191               	clrf	17	;volatile
 12498                           
 12499                           ;pwm.c: 18: PWM7DCL = 0x00;
 12500  1F83  0190               	clrf	16	;volatile
 12501                           
 12502                           ;pwm.c: 20: CCPTMRS1bits.P7TSEL = 0x02;
 12503  1F84  0024               	movlb	4	; select bank4
 12504  1F85  081F               	movf	31,w	;volatile
 12505  1F86  39CF               	andlw	-49
 12506  1F87  3820               	iorlw	32
 12507  1F88  009F               	movwf	31	;volatile
 12508                           
 12509                           ;pwm.c: 23: CCP1CONbits.CCP1EN = 1;
 12510  1F89  0026               	movlb	6	; select bank6
 12511  1F8A  178E               	bsf	14,7	;volatile
 12512                           
 12513                           ;pwm.c: 24: CCP1CONbits.CCP1FMT = 1;
 12514  1F8B  160E               	bsf	14,4	;volatile
 12515                           
 12516                           ;pwm.c: 25: CCP1CONbits.CCP1MODE = 0xF;
 12517  1F8C  300F               	movlw	15
 12518  1F8D  048E               	iorwf	14,f	;volatile
 12519                           
 12520                           ;pwm.c: 26: CCPTMRS0bits.C1TSEL = 0x1;
 12521  1F8E  0024               	movlb	4	; select bank4
 12522  1F8F  081E               	movf	30,w	;volatile
 12523  1F90  39FC               	andlw	-4
 12524  1F91  3801               	iorlw	1
 12525  1F92  009E               	movwf	30	;volatile
 12526  1F93  0008               	return
 12527  1F94                     __end_of_PWM_Initialize:	
 12528                           
 12529                           	psect	text23
 12530  1170                     __ptext23:	
 12531 ;; *************** function _PIN_MANAGER_Initialize *****************
 12532 ;; Defined at:
 12533 ;;		line 3 in file "pin_manager.c"
 12534 ;; Parameters:    Size  Location     Type
 12535 ;;		None
 12536 ;; Auto vars:     Size  Location     Type
 12537 ;;  state           1    0[COMMON] char 
 12538 ;; Return value:  Size  Location     Type
 12539 ;;                  1    wreg      void 
 12540 ;; Registers used:
 12541 ;;		wreg, status,2
 12542 ;; Tracked objects:
 12543 ;;		On entry : 0/0
 12544 ;;		On exit  : 0/0
 12545 ;;		Unchanged: 0/0
 12546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12547 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12548 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12549 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12550 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12551 ;;Total ram usage:        1 bytes
 12552 ;; Hardware stack levels used:    1
 12553 ;; This function calls:
 12554 ;;		Nothing
 12555 ;; This function is called by:
 12556 ;;		_SYSTEM_Initialize
 12557 ;; This function uses a non-reentrant model
 12558 ;;
 12559                           
 12560                           
 12561                           ;psect for function _PIN_MANAGER_Initialize
 12562  1170                     _PIN_MANAGER_Initialize:	
 12563                           
 12564                           ;pin_manager.c: 5: LATA = 0x20;
 12565                           
 12566                           ;incstack = 0
 12567                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
 12568  1170  3020               	movlw	32
 12569  1171  0020               	movlb	0	; select bank0
 12570  1172  0096               	movwf	22	;volatile
 12571                           
 12572                           ;pin_manager.c: 6: LATB = 0x00;
 12573  1173  0197               	clrf	23	;volatile
 12574                           
 12575                           ;pin_manager.c: 7: LATC = 0x00;
 12576  1174  0198               	clrf	24	;volatile
 12577                           
 12578                           ;pin_manager.c: 9: WPUA = 0x00;
 12579  1175  003E               	movlb	30	; select bank30
 12580  1176  01B9               	clrf	57	;volatile
 12581                           
 12582                           ;pin_manager.c: 10: WPUB = 0x00;
 12583  1177  01C4               	clrf	68	;volatile
 12584                           
 12585                           ;pin_manager.c: 11: WPUC = 0x00;
 12586  1178  01CF               	clrf	79	;volatile
 12587                           
 12588                           ;pin_manager.c: 12: WPUE = 0x8;
 12589  1179  3008               	movlw	8
 12590  117A  00E5               	movwf	101	;volatile
 12591                           
 12592                           ;pin_manager.c: 14: TRISA = 0x00;
 12593  117B  0020               	movlb	0	; select bank0
 12594  117C  0191               	clrf	17	;volatile
 12595                           
 12596                           ;pin_manager.c: 15: TRISB = 0x0E;
 12597  117D  300E               	movlw	14
 12598  117E  0092               	movwf	18	;volatile
 12599                           
 12600                           ;pin_manager.c: 16: TRISC = 0xFF;
 12601  117F  30FF               	movlw	255
 12602  1180  0093               	movwf	19	;volatile
 12603                           
 12604                           ;pin_manager.c: 18: ANSELA = 0x00;
 12605  1181  003E               	movlb	30	; select bank30
 12606  1182  01B8               	clrf	56	;volatile
 12607                           
 12608                           ;pin_manager.c: 19: ANSELB = 0x0A;
 12609  1183  300A               	movlw	10
 12610  1184  00C3               	movwf	67	;volatile
 12611                           
 12612                           ;pin_manager.c: 20: ANSELC = 0xFF;
 12613  1185  30FF               	movlw	255
 12614  1186  00CE               	movwf	78	;volatile
 12615                           
 12616                           ;pin_manager.c: 23: PIE0bits.IOCIE = 0;
 12617  1187  002E               	movlb	14	; select bank14
 12618  1188  1216               	bcf	22,4	;volatile
 12619                           
 12620                           ;pin_manager.c: 24: int8_t state = GIE;
 12621  1189  3000               	movlw	0
 12622  118A  1B8B               	btfsc	11,7	;volatile
 12623  118B  3001               	movlw	1
 12624  118C  00F0               	movwf	PIN_MANAGER_Initialize@state
 12625                           
 12626                           ;pin_manager.c: 25: GIE = 0;
 12627  118D  138B               	bcf	11,7	;volatile
 12628                           
 12629                           ;pin_manager.c: 26: PPSLOCK = 0x55;
 12630  118E  3055               	movlw	85
 12631  118F  003D               	movlb	29	; select bank29
 12632  1190  008F               	movwf	15	;volsfr
 12633                           
 12634                           ;pin_manager.c: 27: PPSLOCK = 0xAA;
 12635  1191  30AA               	movlw	170
 12636  1192  008F               	movwf	15	;volsfr
 12637                           
 12638                           ;pin_manager.c: 28: PPSLOCKbits.PPSLOCKED = 0x00;
 12639  1193  100F               	bcf	15,0	;volsfr
 12640                           
 12641                           ;pin_manager.c: 30: RA6PPS = 0x0E;
 12642  1194  300E               	movlw	14
 12643  1195  003E               	movlb	30	; select bank30
 12644  1196  0096               	movwf	22	;volatile
 12645                           
 12646                           ;pin_manager.c: 31: RA7PPS = 0x0F;
 12647  1197  300F               	movlw	15
 12648  1198  0097               	movwf	23	;volatile
 12649                           
 12650                           ;pin_manager.c: 32: RB0PPS = 0x09;
 12651  1199  3009               	movlw	9
 12652  119A  0098               	movwf	24	;volatile
 12653                           
 12654                           ;pin_manager.c: 33: PPSLOCK = 0x55;
 12655  119B  3055               	movlw	85
 12656  119C  003D               	movlb	29	; select bank29
 12657  119D  008F               	movwf	15	;volsfr
 12658                           
 12659                           ;pin_manager.c: 34: PPSLOCK = 0xAA;
 12660  119E  30AA               	movlw	170
 12661  119F  008F               	movwf	15	;volsfr
 12662                           
 12663                           ;pin_manager.c: 35: PPSLOCKbits.PPSLOCKED = 0x01;
 12664  11A0  140F               	bsf	15,0	;volsfr
 12665                           
 12666                           ;pin_manager.c: 36: GIE = state;
 12667  11A1  1C70               	btfss	PIN_MANAGER_Initialize@state,0
 12668  11A2  29A5               	goto	u2930
 12669  11A3  178B               	bsf	11,7	;volatile
 12670  11A4  0008               	return
 12671  11A5                     u2930:	
 12672  11A5  138B               	bcf	11,7	;volatile
 12673  11A6  0008               	return
 12674  11A7                     __end_of_PIN_MANAGER_Initialize:	
 12675                           
 12676                           	psect	text24
 12677  1E56                     __ptext24:	
 12678 ;; *************** function _OSCILLATOR_Initialize *****************
 12679 ;; Defined at:
 12680 ;;		line 53 in file "system.c"
 12681 ;; Parameters:    Size  Location     Type
 12682 ;;		None
 12683 ;; Auto vars:     Size  Location     Type
 12684 ;;		None
 12685 ;; Return value:  Size  Location     Type
 12686 ;;                  1    wreg      void 
 12687 ;; Registers used:
 12688 ;;		wreg, status,2
 12689 ;; Tracked objects:
 12690 ;;		On entry : 0/0
 12691 ;;		On exit  : 0/0
 12692 ;;		Unchanged: 0/0
 12693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12694 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12695 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12696 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12697 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12698 ;;Total ram usage:        0 bytes
 12699 ;; Hardware stack levels used:    1
 12700 ;; This function calls:
 12701 ;;		Nothing
 12702 ;; This function is called by:
 12703 ;;		_SYSTEM_Initialize
 12704 ;; This function uses a non-reentrant model
 12705 ;;
 12706                           
 12707                           
 12708                           ;psect for function _OSCILLATOR_Initialize
 12709  1E56                     _OSCILLATOR_Initialize:	
 12710                           
 12711                           ;system.c: 55: OSCCON1 = 0x60;
 12712                           
 12713                           ;incstack = 0
 12714                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 12715  1E56  3060               	movlw	96
 12716  1E57  0031               	movlb	17	; select bank17
 12717  1E58  008D               	movwf	13	;volatile
 12718                           
 12719                           ;system.c: 56: OSCCON3 = 0x00;
 12720  1E59  018F               	clrf	15	;volatile
 12721                           
 12722                           ;system.c: 57: OSCEN = 0x00;
 12723  1E5A  0191               	clrf	17	;volatile
 12724                           
 12725                           ;system.c: 58: OSCFRQ = 0x06;
 12726  1E5B  3006               	movlw	6
 12727  1E5C  0093               	movwf	19	;volatile
 12728                           
 12729                           ;system.c: 59: OSCTUNE = 0x00;
 12730  1E5D  0192               	clrf	18	;volatile
 12731  1E5E  0008               	return
 12732  1E5F                     __end_of_OSCILLATOR_Initialize:	
 12733                           
 12734                           	psect	text25
 12735  11A7                     __ptext25:	
 12736 ;; *************** function _LCDInit *****************
 12737 ;; Defined at:
 12738 ;;		line 247 in file "lcd.c"
 12739 ;; Parameters:    Size  Location     Type
 12740 ;;		None
 12741 ;; Auto vars:     Size  Location     Type
 12742 ;;		None
 12743 ;; Return value:  Size  Location     Type
 12744 ;;                  1    wreg      void 
 12745 ;; Registers used:
 12746 ;;		wreg, status,2, status,0, pclath, cstack
 12747 ;; Tracked objects:
 12748 ;;		On entry : 0/0
 12749 ;;		On exit  : 0/0
 12750 ;;		Unchanged: 0/0
 12751 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12752 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12753 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12754 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12755 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12756 ;;Total ram usage:        1 bytes
 12757 ;; Hardware stack levels used:    1
 12758 ;; Hardware stack levels required when called:    1
 12759 ;; This function calls:
 12760 ;;		_LCDWrite
 12761 ;; This function is called by:
 12762 ;;		_main
 12763 ;;		_SYSTEM_Initialize
 12764 ;; This function uses a non-reentrant model
 12765 ;;
 12766                           
 12767                           
 12768                           ;psect for function _LCDInit
 12769  11A7                     _LCDInit:	
 12770                           
 12771                           ;lcd.c: 249: TRISAbits.TRISA0 = 0;
 12772                           
 12773                           ;incstack = 0
 12774                           ; Regs used in _LCDInit: [wreg+status,2+status,0+pclath+cstack]
 12775  11A7  0020               	movlb	0	; select bank0
 12776  11A8  1011               	bcf	17,0	;volatile
 12777                           
 12778                           ;lcd.c: 250: TRISAbits.TRISA1 = 0;
 12779  11A9  1091               	bcf	17,1	;volatile
 12780                           
 12781                           ;lcd.c: 251: TRISAbits.TRISA2 = 0;
 12782  11AA  1111               	bcf	17,2	;volatile
 12783                           
 12784                           ;lcd.c: 252: TRISAbits.TRISA3 = 0;
 12785  11AB  1191               	bcf	17,3	;volatile
 12786                           
 12787                           ;lcd.c: 253: TRISAbits.TRISA4 = 0;
 12788  11AC  1211               	bcf	17,4	;volatile
 12789                           
 12790                           ;lcd.c: 254: LATAbits.LATA3 = 0;
 12791  11AD  1196               	bcf	22,3	;volatile
 12792                           
 12793                           ;lcd.c: 255: LATAbits.LATA4 = 0;
 12794  11AE  1216               	bcf	22,4	;volatile
 12795                           
 12796                           ;lcd.c: 256: LATAbits.LATA2 = 0;
 12797  11AF  1116               	bcf	22,2	;volatile
 12798                           
 12799                           ;lcd.c: 257: LATAbits.LATA0 = 0;
 12800  11B0  1016               	bcf	22,0	;volatile
 12801                           
 12802                           ;lcd.c: 259: LATAbits.LATA0 = 1;
 12803  11B1  1416               	bsf	22,0	;volatile
 12804                           
 12805                           ;lcd.c: 261: LCDWrite(0, 0x21);
 12806  11B2  3021               	movlw	33
 12807  11B3  00F5               	movwf	??_LCDInit
 12808  11B4  0875               	movf	??_LCDInit,w
 12809  11B5  00F0               	movwf	LCDWrite@data
 12810  11B6  3000               	movlw	0
 12811  11B7  319F  27B5  3191   	fcall	_LCDWrite
 12812                           
 12813                           ;lcd.c: 269: LCDWrite(0, 0XB9);
 12814  11BA  30B9               	movlw	185
 12815  11BB  00F5               	movwf	??_LCDInit
 12816  11BC  0875               	movf	??_LCDInit,w
 12817  11BD  00F0               	movwf	LCDWrite@data
 12818  11BE  3000               	movlw	0
 12819  11BF  319F  27B5  3191   	fcall	_LCDWrite
 12820                           
 12821                           ;lcd.c: 271: LCDWrite(0, 0x04);
 12822  11C2  3004               	movlw	4
 12823  11C3  00F5               	movwf	??_LCDInit
 12824  11C4  0875               	movf	??_LCDInit,w
 12825  11C5  00F0               	movwf	LCDWrite@data
 12826  11C6  3000               	movlw	0
 12827  11C7  319F  27B5  3191   	fcall	_LCDWrite
 12828                           
 12829                           ;lcd.c: 273: LCDWrite(0, 0x14);
 12830  11CA  3014               	movlw	20
 12831  11CB  00F5               	movwf	??_LCDInit
 12832  11CC  0875               	movf	??_LCDInit,w
 12833  11CD  00F0               	movwf	LCDWrite@data
 12834  11CE  3000               	movlw	0
 12835  11CF  319F  27B5  3191   	fcall	_LCDWrite
 12836                           
 12837                           ;lcd.c: 275: LCDWrite(0, 0x20);
 12838  11D2  3020               	movlw	32
 12839  11D3  00F5               	movwf	??_LCDInit
 12840  11D4  0875               	movf	??_LCDInit,w
 12841  11D5  00F0               	movwf	LCDWrite@data
 12842  11D6  3000               	movlw	0
 12843  11D7  319F  27B5  3191   	fcall	_LCDWrite
 12844                           
 12845                           ;lcd.c: 277: LCDWrite(0, 0x0C);
 12846  11DA  300C               	movlw	12
 12847  11DB  00F5               	movwf	??_LCDInit
 12848  11DC  0875               	movf	??_LCDInit,w
 12849  11DD  00F0               	movwf	LCDWrite@data
 12850  11DE  3000               	movlw	0
 12851  11DF  319F  27B5         	fcall	_LCDWrite
 12852  11E1  0008               	return
 12853  11E2                     __end_of_LCDInit:	
 12854                           
 12855                           	psect	text26
 12856  1FDA                     __ptext26:	
 12857 ;; *************** function _LCDClear *****************
 12858 ;; Defined at:
 12859 ;;		line 182 in file "lcd.c"
 12860 ;; Parameters:    Size  Location     Type
 12861 ;;		None
 12862 ;; Auto vars:     Size  Location     Type
 12863 ;;  index           2    9[COMMON] int 
 12864 ;; Return value:  Size  Location     Type
 12865 ;;                  1    wreg      void 
 12866 ;; Registers used:
 12867 ;;		wreg, status,2, status,0, pclath, cstack
 12868 ;; Tracked objects:
 12869 ;;		On entry : 0/0
 12870 ;;		On exit  : 0/0
 12871 ;;		Unchanged: 0/0
 12872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12873 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12874 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12875 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12876 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12877 ;;Total ram usage:        3 bytes
 12878 ;; Hardware stack levels used:    1
 12879 ;; Hardware stack levels required when called:    2
 12880 ;; This function calls:
 12881 ;;		_LCDWrite
 12882 ;;		_gotoXY
 12883 ;; This function is called by:
 12884 ;;		_main
 12885 ;;		_SYSTEM_Initialize
 12886 ;; This function uses a non-reentrant model
 12887 ;;
 12888                           
 12889                           
 12890                           ;psect for function _LCDClear
 12891  1FDA                     _LCDClear:	
 12892                           
 12893                           ;lcd.c: 184: int index;
 12894                           ;lcd.c: 185: for (index = 0 ; index < (84 * 48 / 8) ; index++)
 12895                           
 12896                           ;incstack = 0
 12897                           ; Regs used in _LCDClear: [wreg+status,2+status,0+pclath+cstack]
 12898  1FDA  01F9               	clrf	LCDClear@index
 12899  1FDB  01FA               	clrf	LCDClear@index+1
 12900  1FDC  087A               	movf	LCDClear@index+1,w
 12901  1FDD  3A80               	xorlw	128
 12902  1FDE  00F8               	movwf	??_LCDClear
 12903  1FDF  3081               	movlw	129
 12904  1FE0  0278               	subwf	??_LCDClear,w
 12905  1FE1  1D03               	skipz
 12906  1FE2  2FE5               	goto	u2895
 12907  1FE3  30F8               	movlw	248
 12908  1FE4  0279               	subwf	LCDClear@index,w
 12909  1FE5                     u2895:	
 12910  1FE5  1803               	btfsc	3,0
 12911  1FE6  2FFB               	goto	l2661
 12912  1FE7                     l2655:	
 12913                           
 12914                           ;lcd.c: 186: LCDWrite(1, 0x00);
 12915  1FE7  01F0               	clrf	LCDWrite@data
 12916  1FE8  3001               	movlw	1
 12917  1FE9  319F  27B5  319F   	fcall	_LCDWrite
 12918  1FEC  3001               	movlw	1
 12919  1FED  07F9               	addwf	LCDClear@index,f
 12920  1FEE  3000               	movlw	0
 12921  1FEF  3DFA               	addwfc	LCDClear@index+1,f
 12922  1FF0  087A               	movf	LCDClear@index+1,w
 12923  1FF1  3A80               	xorlw	128
 12924  1FF2  00F8               	movwf	??_LCDClear
 12925  1FF3  3081               	movlw	129
 12926  1FF4  0278               	subwf	??_LCDClear,w
 12927  1FF5  1D03               	skipz
 12928  1FF6  2FF9               	goto	u2905
 12929  1FF7  30F8               	movlw	248
 12930  1FF8  0279               	subwf	LCDClear@index,w
 12931  1FF9                     u2905:	
 12932  1FF9  1C03               	skipc
 12933  1FFA  2FE7               	goto	l2655
 12934  1FFB                     l2661:	
 12935                           
 12936                           ;lcd.c: 187: gotoXY(0, 0);
 12937  1FFB  01F5               	clrf	gotoXY@y
 12938  1FFC  3000               	movlw	0
 12939  1FFD  319E  2696         	fcall	_gotoXY
 12940  1FFF  0008               	return
 12941  2000                     __end_of_LCDClear:	
 12942                           
 12943                           	psect	text27
 12944  1E96                     __ptext27:	
 12945 ;; *************** function _gotoXY *****************
 12946 ;; Defined at:
 12947 ;;		line 124 in file "lcd.c"
 12948 ;; Parameters:    Size  Location     Type
 12949 ;;  x               1    wreg     unsigned char 
 12950 ;;  y               1    5[COMMON] unsigned char 
 12951 ;; Auto vars:     Size  Location     Type
 12952 ;;  x               1    7[COMMON] unsigned char 
 12953 ;; Return value:  Size  Location     Type
 12954 ;;                  1    wreg      void 
 12955 ;; Registers used:
 12956 ;;		wreg, status,2, status,0, pclath, cstack
 12957 ;; Tracked objects:
 12958 ;;		On entry : 0/0
 12959 ;;		On exit  : 0/0
 12960 ;;		Unchanged: 0/0
 12961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12962 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12963 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12964 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12965 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12966 ;;Total ram usage:        3 bytes
 12967 ;; Hardware stack levels used:    1
 12968 ;; Hardware stack levels required when called:    1
 12969 ;; This function calls:
 12970 ;;		_LCDWrite
 12971 ;; This function is called by:
 12972 ;;		_main
 12973 ;;		_LCDClear
 12974 ;; This function uses a non-reentrant model
 12975 ;;
 12976                           
 12977                           
 12978                           ;psect for function _gotoXY
 12979  1E96                     _gotoXY:	
 12980                           
 12981                           ;incstack = 0
 12982                           ; Regs used in _gotoXY: [wreg+status,2+status,0+pclath+cstack]
 12983                           ;gotoXY@x stored from wreg
 12984  1E96  00F7               	movwf	gotoXY@x
 12985                           
 12986                           ;lcd.c: 126: LCDWrite(0,(uint8_t)(0x80 | x));
 12987  1E97  0877               	movf	gotoXY@x,w
 12988  1E98  3880               	iorlw	128
 12989  1E99  00F6               	movwf	??_gotoXY
 12990  1E9A  0876               	movf	??_gotoXY,w
 12991  1E9B  00F0               	movwf	LCDWrite@data
 12992  1E9C  3000               	movlw	0
 12993  1E9D  319F  27B5  319E   	fcall	_LCDWrite
 12994                           
 12995                           ;lcd.c: 127: LCDWrite(0,(uint8_t)(0x40 | y));
 12996  1EA0  0875               	movf	gotoXY@y,w
 12997  1EA1  3840               	iorlw	64
 12998  1EA2  00F6               	movwf	??_gotoXY
 12999  1EA3  0876               	movf	??_gotoXY,w
 13000  1EA4  00F0               	movwf	LCDWrite@data
 13001  1EA5  3000               	movlw	0
 13002  1EA6  319F  27B5         	fcall	_LCDWrite
 13003  1EA8  0008               	return
 13004  1EA9                     __end_of_gotoXY:	
 13005                           
 13006                           	psect	text28
 13007  1487                     __ptext28:	
 13008 ;; *************** function _Init_Battery_State_Machine *****************
 13009 ;; Defined at:
 13010 ;;		line 21 in file "battery_charger.c"
 13011 ;; Parameters:    Size  Location     Type
 13012 ;;  z               1    wreg     unsigned char 
 13013 ;; Auto vars:     Size  Location     Type
 13014 ;;  z               1   35[BANK0 ] unsigned char 
 13015 ;; Return value:  Size  Location     Type
 13016 ;;                  1    wreg      void 
 13017 ;; Registers used:
 13018 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13019 ;; Tracked objects:
 13020 ;;		On entry : 0/0
 13021 ;;		On exit  : 0/0
 13022 ;;		Unchanged: 0/0
 13023 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13024 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13025 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13026 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13027 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13028 ;;Total ram usage:        5 bytes
 13029 ;; Hardware stack levels used:    1
 13030 ;; Hardware stack levels required when called:    2
 13031 ;; This function calls:
 13032 ;;		___awtoft
 13033 ;;		___ftmul
 13034 ;;		___fttol
 13035 ;; This function is called by:
 13036 ;;		_SYSTEM_Initialize
 13037 ;; This function uses a non-reentrant model
 13038 ;;
 13039                           
 13040                           
 13041                           ;psect for function _Init_Battery_State_Machine
 13042  1487                     _Init_Battery_State_Machine:	
 13043                           
 13044                           ;incstack = 0
 13045                           ; Regs used in _Init_Battery_State_Machine: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 13046                           ;Init_Battery_State_Machine@z stored from wreg
 13047  1487  0020               	movlb	0	; select bank0
 13048  1488  00C3               	movwf	Init_Battery_State_Machine@z
 13049                           
 13050                           ;battery_charger.c: 23: batteryState[z] =PRECHARGE;
 13051  1489  3003               	movlw	3
 13052  148A  00BF               	movwf	??_Init_Battery_State_Machine
 13053  148B  0843               	movf	Init_Battery_State_Machine@z,w
 13054  148C  3ECE               	addlw	(low (_batteryState| 0))& (0+255)
 13055  148D  0086               	movwf	6
 13056  148E  0187               	clrf	7
 13057  148F  083F               	movf	??_Init_Battery_State_Machine,w
 13058  1490  0081               	movwf	1
 13059                           
 13060                           ;battery_charger.c: 24: stateCounter[z] =5;
 13061  1491  3543               	lslf	Init_Battery_State_Machine@z,w
 13062  1492  3EB8               	addlw	(low (_stateCounter| 0))& (0+255)
 13063  1493  0086               	movwf	6
 13064  1494  0187               	clrf	7
 13065  1495  3005               	movlw	5
 13066  1496  3FC0               	movwi [0]fsr1
 13067  1497  3000               	movlw	0
 13068  1498  3FC1               	movwi [1]fsr1
 13069                           
 13070                           ;battery_charger.c: 25: Iref[z] =10;
 13071  1499  3543               	lslf	Init_Battery_State_Machine@z,w
 13072  149A  3EC0               	addlw	(low (_Iref| 0))& (0+255)
 13073  149B  0086               	movwf	6
 13074  149C  0187               	clrf	7
 13075  149D  300A               	movlw	10
 13076  149E  3FC0               	movwi [0]fsr1
 13077  149F  3000               	movlw	0
 13078  14A0  3FC1               	movwi [1]fsr1
 13079                           
 13080                           ;battery_charger.c: 26: Vref[z] =1425+(int16_t)((250-batteryTemp)*.24);
 13081  14A1  0021               	movlb	1	; select bank1
 13082  14A2  096D               	comf	_batteryTemp^(0+128),w
 13083  14A3  0020               	movlb	0	; select bank0
 13084  14A4  00BF               	movwf	??_Init_Battery_State_Machine
 13085  14A5  0021               	movlb	1	; select bank1
 13086  14A6  096E               	comf	(_batteryTemp+1)^(0+128),w
 13087  14A7  0020               	movlb	0	; select bank0
 13088  14A8  00C0               	movwf	??_Init_Battery_State_Machine+1
 13089  14A9  0ABF               	incf	??_Init_Battery_State_Machine,f
 13090  14AA  1903               	skipnz
 13091  14AB  0AC0               	incf	??_Init_Battery_State_Machine+1,f
 13092  14AC  083F               	movf	??_Init_Battery_State_Machine,w
 13093  14AD  3EFA               	addlw	250
 13094  14AE  00F9               	movwf	___awtoft@c
 13095  14AF  3000               	movlw	0
 13096  14B0  3D40               	addwfc	??_Init_Battery_State_Machine+1,w
 13097  14B1  00FA               	movwf	___awtoft@c+1
 13098  14B2  319F  2794  3194   	fcall	___awtoft
 13099  14B5  0879               	movf	?___awtoft,w
 13100  14B6  0020               	movlb	0	; select bank0
 13101  14B7  00A4               	movwf	___ftmul@f2
 13102  14B8  087A               	movf	?___awtoft+1,w
 13103  14B9  00A5               	movwf	___ftmul@f2+1
 13104  14BA  087B               	movf	?___awtoft+2,w
 13105  14BB  00A6               	movwf	___ftmul@f2+2
 13106  14BC  30C3               	movlw	195
 13107  14BD  00A1               	movwf	___ftmul@f1
 13108  14BE  3075               	movlw	117
 13109  14BF  00A2               	movwf	___ftmul@f1+1
 13110  14C0  303E               	movlw	62
 13111  14C1  00A3               	movwf	___ftmul@f1+2
 13112  14C2  3197  274C  3194   	fcall	___ftmul
 13113  14C5  0020               	movlb	0	; select bank0
 13114  14C6  0821               	movf	?___ftmul,w
 13115  14C7  00B1               	movwf	___fttol@f1
 13116  14C8  0822               	movf	?___ftmul+1,w
 13117  14C9  00B2               	movwf	___fttol@f1+1
 13118  14CA  0823               	movf	?___ftmul+2,w
 13119  14CB  00B3               	movwf	___fttol@f1+2
 13120  14CC  3180  2014         	fcall	___fttol
 13121  14CE  0020               	movlb	0	; select bank0
 13122  14CF  0831               	movf	?___fttol,w
 13123  14D0  3E91               	addlw	145
 13124  14D1  00C1               	movwf	??_Init_Battery_State_Machine+2
 13125  14D2  3005               	movlw	5
 13126  14D3  3D32               	addwfc	?___fttol+1,w
 13127  14D4  00C2               	movwf	??_Init_Battery_State_Machine+3
 13128  14D5  3543               	lslf	Init_Battery_State_Machine@z,w
 13129  14D6  3EBC               	addlw	(low (_Vref| 0))& (0+255)
 13130  14D7  0086               	movwf	6
 13131  14D8  0187               	clrf	7
 13132  14D9  0841               	movf	??_Init_Battery_State_Machine+2,w
 13133  14DA  3FC0               	movwi [0]fsr1
 13134  14DB  0842               	movf	??_Init_Battery_State_Machine+3,w
 13135  14DC  3FC1               	movwi [1]fsr1
 13136                           
 13137                           ;battery_charger.c: 27: Imin[z] =15;
 13138  14DD  3543               	lslf	Init_Battery_State_Machine@z,w
 13139  14DE  3E4D               	addlw	(low (_Imin| (0+256)))& (0+255)
 13140  14DF  0086               	movwf	6
 13141  14E0  3001               	movlw	1	; select bank2/3
 13142  14E1  0087               	movwf	7
 13143  14E2  300F               	movlw	15
 13144  14E3  3FC0               	movwi [0]fsr1
 13145  14E4  3000               	movlw	0
 13146  14E5  3FC1               	movwi [1]fsr1
 13147                           
 13148                           ;battery_charger.c: 28: IminCount[z] = 600;
 13149  14E6  3543               	lslf	Init_Battery_State_Machine@z,w
 13150  14E7  3E5B               	addlw	(low (_IminCount| 0))& (0+255)
 13151  14E8  0086               	movwf	6
 13152  14E9  0187               	clrf	7
 13153  14EA  3058               	movlw	88
 13154  14EB  3FC0               	movwi [0]fsr1
 13155  14EC  3002               	movlw	2
 13156  14ED  3FC1               	movwi [1]fsr1
 13157  14EE  0008               	return
 13158  14EF                     __end_of_Init_Battery_State_Machine:	
 13159                           
 13160                           	psect	text29
 13161  1F56                     __ptext29:	
 13162 ;; *************** function _ADC_Initialize *****************
 13163 ;; Defined at:
 13164 ;;		line 138 in file "adc.c"
 13165 ;; Parameters:    Size  Location     Type
 13166 ;;		None
 13167 ;; Auto vars:     Size  Location     Type
 13168 ;;		None
 13169 ;; Return value:  Size  Location     Type
 13170 ;;                  1    wreg      void 
 13171 ;; Registers used:
 13172 ;;		wreg, status,2
 13173 ;; Tracked objects:
 13174 ;;		On entry : 0/0
 13175 ;;		On exit  : 0/0
 13176 ;;		Unchanged: 0/0
 13177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13178 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13179 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13180 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13181 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13182 ;;Total ram usage:        0 bytes
 13183 ;; Hardware stack levels used:    1
 13184 ;; This function calls:
 13185 ;;		Nothing
 13186 ;; This function is called by:
 13187 ;;		_SYSTEM_Initialize
 13188 ;; This function uses a non-reentrant model
 13189 ;;
 13190                           
 13191                           
 13192                           ;psect for function _ADC_Initialize
 13193  1F56                     _ADC_Initialize:	
 13194                           
 13195                           ;adc.c: 140: ADCON1 = 0x00;
 13196                           
 13197                           ;incstack = 0
 13198                           ; Regs used in _ADC_Initialize: [wreg+status,2]
 13199  1F56  0021               	movlb	1	; select bank1
 13200  1F57  0194               	clrf	20	;volatile
 13201                           
 13202                           ;adc.c: 142: ADCON2 = 0x00;
 13203  1F58  0195               	clrf	21	;volatile
 13204                           
 13205                           ;adc.c: 144: ADCON3 = 0x00;
 13206  1F59  0196               	clrf	22	;volatile
 13207                           
 13208                           ;adc.c: 146: ADACT = 0x00;
 13209  1F5A  0199               	clrf	25	;volatile
 13210                           
 13211                           ;adc.c: 148: ADSTAT = 0x00;
 13212  1F5B  0197               	clrf	23	;volatile
 13213                           
 13214                           ;adc.c: 150: FVRCON = 0b11000011;
 13215  1F5C  30C3               	movlw	195
 13216  1F5D  0032               	movlb	18	; select bank18
 13217  1F5E  008C               	movwf	12	;volatile
 13218                           
 13219                           ;adc.c: 151: ADCLK = 0x3F;
 13220  1F5F  303F               	movlw	63
 13221  1F60  0021               	movlb	1	; select bank1
 13222  1F61  0098               	movwf	24	;volatile
 13223                           
 13224                           ;adc.c: 158: ADREF = 0x03;
 13225  1F62  3003               	movlw	3
 13226  1F63  009A               	movwf	26	;volatile
 13227                           
 13228                           ;adc.c: 161: ADCAP = 0x00;
 13229  1F64  019B               	clrf	27	;volatile
 13230                           
 13231                           ;adc.c: 164: ADPRE = 0x07;
 13232  1F65  3007               	movlw	7
 13233  1F66  009C               	movwf	28	;volatile
 13234                           
 13235                           ;adc.c: 166: ADACQ = 0x00;
 13236  1F67  019D               	clrf	29	;volatile
 13237                           
 13238                           ;adc.c: 168: ADPCH = 0x00;
 13239  1F68  019E               	clrf	30	;volatile
 13240                           
 13241                           ;adc.c: 170: ADRPT = 0x00;
 13242  1F69  0022               	movlb	2	; select bank2
 13243  1F6A  018D               	clrf	13	;volatile
 13244                           
 13245                           ;adc.c: 172: ADLTHL = 0x00;
 13246  1F6B  018E               	clrf	14	;volatile
 13247                           
 13248                           ;adc.c: 174: ADLTHH = 0x00;
 13249  1F6C  018F               	clrf	15	;volatile
 13250                           
 13251                           ;adc.c: 176: ADUTHL = 0x00;
 13252  1F6D  0190               	clrf	16	;volatile
 13253                           
 13254                           ;adc.c: 178: ADUTHH = 0x00;
 13255  1F6E  0191               	clrf	17	;volatile
 13256                           
 13257                           ;adc.c: 180: ADSTPTL = 0x00;
 13258  1F6F  0192               	clrf	18	;volatile
 13259                           
 13260                           ;adc.c: 182: ADSTPTH = 0x00;
 13261  1F70  0193               	clrf	19	;volatile
 13262                           
 13263                           ;adc.c: 184: ADCON0 = 0x84;
 13264  1F71  3084               	movlw	132
 13265  1F72  0021               	movlb	1	; select bank1
 13266  1F73  0093               	movwf	19	;volatile
 13267  1F74  0008               	return
 13268  1F75                     __end_of_ADC_Initialize:	
 13269                           
 13270                           	psect	text30
 13271  1EE9                     __ptext30:	
 13272 ;; *************** function _PWM7_LoadDutyValue *****************
 13273 ;; Defined at:
 13274 ;;		line 37 in file "pwm.c"
 13275 ;; Parameters:    Size  Location     Type
 13276 ;;  dutyCycle7      2    0[COMMON] unsigned int 
 13277 ;; Auto vars:     Size  Location     Type
 13278 ;;		None
 13279 ;; Return value:  Size  Location     Type
 13280 ;;                  1    wreg      void 
 13281 ;; Registers used:
 13282 ;;		wreg, status,2, status,0
 13283 ;; Tracked objects:
 13284 ;;		On entry : 0/0
 13285 ;;		On exit  : 0/0
 13286 ;;		Unchanged: 0/0
 13287 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13288 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13289 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13290 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13291 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13292 ;;Total ram usage:        4 bytes
 13293 ;; Hardware stack levels used:    1
 13294 ;; This function calls:
 13295 ;;		Nothing
 13296 ;; This function is called by:
 13297 ;;		_main
 13298 ;; This function uses a non-reentrant model
 13299 ;;
 13300                           
 13301                           
 13302                           ;psect for function _PWM7_LoadDutyValue
 13303  1EE9                     _PWM7_LoadDutyValue:	
 13304                           
 13305                           ;pwm.c: 39: PWM7DCH = (dutyCycle7 & 0x03FC)>>2;
 13306                           
 13307                           ;incstack = 0
 13308                           ; Regs used in _PWM7_LoadDutyValue: [wreg+status,2+status,0]
 13309  1EE9  0871               	movf	PWM7_LoadDutyValue@dutyCycle7+1,w
 13310  1EEA  00F3               	movwf	??_PWM7_LoadDutyValue+1
 13311  1EEB  0870               	movf	PWM7_LoadDutyValue@dutyCycle7,w
 13312  1EEC  00F2               	movwf	??_PWM7_LoadDutyValue
 13313  1EED  36F3               	lsrf	??_PWM7_LoadDutyValue+1,f
 13314  1EEE  0CF2               	rrf	??_PWM7_LoadDutyValue,f
 13315  1EEF  36F3               	lsrf	??_PWM7_LoadDutyValue+1,f
 13316  1EF0  0CF2               	rrf	??_PWM7_LoadDutyValue,f
 13317  1EF1  0872               	movf	??_PWM7_LoadDutyValue,w
 13318  1EF2  0027               	movlb	7	; select bank7
 13319  1EF3  0091               	movwf	17	;volatile
 13320                           
 13321                           ;pwm.c: 41: PWM7DCL = (dutyCycle7 & 0x0003)<<6;
 13322  1EF4  0870               	movf	PWM7_LoadDutyValue@dutyCycle7,w
 13323  1EF5  3903               	andlw	3
 13324  1EF6  00F2               	movwf	??_PWM7_LoadDutyValue
 13325  1EF7  3005               	movlw	5
 13326  1EF8                     u3555:	
 13327  1EF8  35F2               	lslf	??_PWM7_LoadDutyValue,f
 13328  1EF9  3EFF               	addlw	-1
 13329  1EFA  1D03               	skipz
 13330  1EFB  2EF8               	goto	u3555
 13331  1EFC  3572               	lslf	??_PWM7_LoadDutyValue,w
 13332  1EFD  0090               	movwf	16	;volatile
 13333  1EFE  0008               	return
 13334  1EFF                     __end_of_PWM7_LoadDutyValue:	
 13335                           
 13336                           	psect	text31
 13337  1ED3                     __ptext31:	
 13338 ;; *************** function _PWM6_LoadDutyValue *****************
 13339 ;; Defined at:
 13340 ;;		line 30 in file "pwm.c"
 13341 ;; Parameters:    Size  Location     Type
 13342 ;;  dutyCycle6      2    0[COMMON] unsigned int 
 13343 ;; Auto vars:     Size  Location     Type
 13344 ;;		None
 13345 ;; Return value:  Size  Location     Type
 13346 ;;                  1    wreg      void 
 13347 ;; Registers used:
 13348 ;;		wreg, status,2, status,0
 13349 ;; Tracked objects:
 13350 ;;		On entry : 0/0
 13351 ;;		On exit  : 0/0
 13352 ;;		Unchanged: 0/0
 13353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13354 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13355 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13356 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13357 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13358 ;;Total ram usage:        4 bytes
 13359 ;; Hardware stack levels used:    1
 13360 ;; This function calls:
 13361 ;;		Nothing
 13362 ;; This function is called by:
 13363 ;;		_main
 13364 ;; This function uses a non-reentrant model
 13365 ;;
 13366                           
 13367                           
 13368                           ;psect for function _PWM6_LoadDutyValue
 13369  1ED3                     _PWM6_LoadDutyValue:	
 13370                           
 13371                           ;pwm.c: 32: PWM6DCH = (dutyCycle6 & 0x03FC)>>2;
 13372                           
 13373                           ;incstack = 0
 13374                           ; Regs used in _PWM6_LoadDutyValue: [wreg+status,2+status,0]
 13375  1ED3  0871               	movf	PWM6_LoadDutyValue@dutyCycle6+1,w
 13376  1ED4  00F3               	movwf	??_PWM6_LoadDutyValue+1
 13377  1ED5  0870               	movf	PWM6_LoadDutyValue@dutyCycle6,w
 13378  1ED6  00F2               	movwf	??_PWM6_LoadDutyValue
 13379  1ED7  36F3               	lsrf	??_PWM6_LoadDutyValue+1,f
 13380  1ED8  0CF2               	rrf	??_PWM6_LoadDutyValue,f
 13381  1ED9  36F3               	lsrf	??_PWM6_LoadDutyValue+1,f
 13382  1EDA  0CF2               	rrf	??_PWM6_LoadDutyValue,f
 13383  1EDB  0872               	movf	??_PWM6_LoadDutyValue,w
 13384  1EDC  0027               	movlb	7	; select bank7
 13385  1EDD  008D               	movwf	13	;volatile
 13386                           
 13387                           ;pwm.c: 34: PWM6DCL = (dutyCycle6 & 0x0003)<<6;
 13388  1EDE  0870               	movf	PWM6_LoadDutyValue@dutyCycle6,w
 13389  1EDF  3903               	andlw	3
 13390  1EE0  00F2               	movwf	??_PWM6_LoadDutyValue
 13391  1EE1  3005               	movlw	5
 13392  1EE2                     u3545:	
 13393  1EE2  35F2               	lslf	??_PWM6_LoadDutyValue,f
 13394  1EE3  3EFF               	addlw	-1
 13395  1EE4  1D03               	skipz
 13396  1EE5  2EE2               	goto	u3545
 13397  1EE6  3572               	lslf	??_PWM6_LoadDutyValue,w
 13398  1EE7  008C               	movwf	12	;volatile
 13399  1EE8  0008               	return
 13400  1EE9                     __end_of_PWM6_LoadDutyValue:	
 13401                           
 13402                           	psect	text32
 13403  1EBD                     __ptext32:	
 13404 ;; *************** function _PWM1_LoadDutyValue *****************
 13405 ;; Defined at:
 13406 ;;		line 44 in file "pwm.c"
 13407 ;; Parameters:    Size  Location     Type
 13408 ;;  dutyCycle1      2    0[COMMON] unsigned int 
 13409 ;; Auto vars:     Size  Location     Type
 13410 ;;		None
 13411 ;; Return value:  Size  Location     Type
 13412 ;;                  1    wreg      void 
 13413 ;; Registers used:
 13414 ;;		wreg, status,2, status,0
 13415 ;; Tracked objects:
 13416 ;;		On entry : 0/0
 13417 ;;		On exit  : 0/0
 13418 ;;		Unchanged: 0/0
 13419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13420 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13421 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13422 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13423 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13424 ;;Total ram usage:        4 bytes
 13425 ;; Hardware stack levels used:    1
 13426 ;; This function calls:
 13427 ;;		Nothing
 13428 ;; This function is called by:
 13429 ;;		_main
 13430 ;; This function uses a non-reentrant model
 13431 ;;
 13432                           
 13433                           
 13434                           ;psect for function _PWM1_LoadDutyValue
 13435  1EBD                     _PWM1_LoadDutyValue:	
 13436                           
 13437                           ;pwm.c: 46: CCPR1H = (dutyCycle1& 0x03FC)>>2;
 13438                           
 13439                           ;incstack = 0
 13440                           ; Regs used in _PWM1_LoadDutyValue: [wreg+status,2+status,0]
 13441  1EBD  0871               	movf	PWM1_LoadDutyValue@dutyCycle1+1,w
 13442  1EBE  00F3               	movwf	??_PWM1_LoadDutyValue+1
 13443  1EBF  0870               	movf	PWM1_LoadDutyValue@dutyCycle1,w
 13444  1EC0  00F2               	movwf	??_PWM1_LoadDutyValue
 13445  1EC1  36F3               	lsrf	??_PWM1_LoadDutyValue+1,f
 13446  1EC2  0CF2               	rrf	??_PWM1_LoadDutyValue,f
 13447  1EC3  36F3               	lsrf	??_PWM1_LoadDutyValue+1,f
 13448  1EC4  0CF2               	rrf	??_PWM1_LoadDutyValue,f
 13449  1EC5  0872               	movf	??_PWM1_LoadDutyValue,w
 13450  1EC6  0026               	movlb	6	; select bank6
 13451  1EC7  008D               	movwf	13	;volatile
 13452                           
 13453                           ;pwm.c: 47: CCPR1L = (dutyCycle1 & 0x0003)<<6;
 13454  1EC8  0870               	movf	PWM1_LoadDutyValue@dutyCycle1,w
 13455  1EC9  3903               	andlw	3
 13456  1ECA  00F2               	movwf	??_PWM1_LoadDutyValue
 13457  1ECB  3005               	movlw	5
 13458  1ECC                     u3655:	
 13459  1ECC  35F2               	lslf	??_PWM1_LoadDutyValue,f
 13460  1ECD  3EFF               	addlw	-1
 13461  1ECE  1D03               	skipz
 13462  1ECF  2ECC               	goto	u3655
 13463  1ED0  3572               	lslf	??_PWM1_LoadDutyValue,w
 13464  1ED1  008C               	movwf	12	;volatile
 13465  1ED2  0008               	return
 13466  1ED3                     __end_of_PWM1_LoadDutyValue:	
 13467                           
 13468                           	psect	text33
 13469  1EA9                     __ptext33:	
 13470 ;; *************** function _LCDWriteString *****************
 13471 ;; Defined at:
 13472 ;;		line 176 in file "lcd.c"
 13473 ;; Parameters:    Size  Location     Type
 13474 ;;  characters      2   12[COMMON] PTR const unsigned char 
 13475 ;;		 -> STR_3(5), STR_2(5), STR_1(4), 
 13476 ;; Auto vars:     Size  Location     Type
 13477 ;;		None
 13478 ;; Return value:  Size  Location     Type
 13479 ;;                  1    wreg      void 
 13480 ;; Registers used:
 13481 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13482 ;; Tracked objects:
 13483 ;;		On entry : 0/0
 13484 ;;		On exit  : 0/0
 13485 ;;		Unchanged: 0/0
 13486 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13487 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13488 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13489 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13490 ;;      Totals:         2       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13491 ;;Total ram usage:        3 bytes
 13492 ;; Hardware stack levels used:    1
 13493 ;; Hardware stack levels required when called:    2
 13494 ;; This function calls:
 13495 ;;		_LCDWriteCharacter
 13496 ;; This function is called by:
 13497 ;;		_main
 13498 ;; This function uses a non-reentrant model
 13499 ;;
 13500                           
 13501                           
 13502                           ;psect for function _LCDWriteString
 13503  1EA9                     _LCDWriteString:	
 13504  1EA9                     l3219:	
 13505                           ;lcd.c: 178: while (*characters)
 13506                           
 13507                           ;incstack = 0
 13508                           ; Regs used in _LCDWriteString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13509                           
 13510  1EA9  087C               	movf	LCDWriteString@characters,w
 13511  1EAA  0084               	movwf	4
 13512  1EAB  087D               	movf	LCDWriteString@characters+1,w
 13513  1EAC  0085               	movwf	5
 13514  1EAD  0012               	moviw fsr0++
 13515  1EAE  1903               	btfsc	3,2
 13516  1EAF  0008               	return
 13517                           
 13518                           ;lcd.c: 179: LCDWriteCharacter(*characters++);
 13519  1EB0  087C               	movf	LCDWriteString@characters,w
 13520  1EB1  0084               	movwf	4
 13521  1EB2  087D               	movf	LCDWriteString@characters+1,w
 13522  1EB3  0085               	movwf	5
 13523  1EB4  0800               	movf	0,w	;code access
 13524  1EB5  3193  236F  319E   	fcall	_LCDWriteCharacter
 13525  1EB8  3001               	movlw	1
 13526  1EB9  07FC               	addwf	LCDWriteString@characters,f
 13527  1EBA  3000               	movlw	0
 13528  1EBB  3DFD               	addwfc	LCDWriteString@characters+1,f
 13529  1EBC  2EA9               	goto	l3219
 13530  1EBD                     __end_of_LCDWriteString:	
 13531                           
 13532                           	psect	text34
 13533  080E                     __ptext34:	
 13534 ;; *************** function _LCDWriteInt *****************
 13535 ;; Defined at:
 13536 ;;		line 190 in file "lcd.c"
 13537 ;; Parameters:    Size  Location     Type
 13538 ;;  value           2   31[BANK0 ] int 
 13539 ;;  fieldLength     1   33[BANK0 ] char 
 13540 ;;  numPlaces       1   34[BANK0 ] unsigned char 
 13541 ;;  sign            1   35[BANK0 ] unsigned char 
 13542 ;; Auto vars:     Size  Location     Type
 13543 ;;  str             5   40[BANK0 ] unsigned char [5]
 13544 ;;  i               1   46[BANK0 ] unsigned char 
 13545 ;;  j               1   45[BANK0 ] unsigned char 
 13546 ;; Return value:  Size  Location     Type
 13547 ;;                  1    wreg      void 
 13548 ;; Registers used:
 13549 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13550 ;; Tracked objects:
 13551 ;;		On entry : 0/0
 13552 ;;		On exit  : 0/0
 13553 ;;		Unchanged: 0/0
 13554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13555 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13556 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13557 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13558 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13559 ;;Total ram usage:       16 bytes
 13560 ;; Hardware stack levels used:    1
 13561 ;; Hardware stack levels required when called:    2
 13562 ;; This function calls:
 13563 ;;		_LCDWriteCharacter
 13564 ;;		___awdiv
 13565 ;;		___lwmod
 13566 ;; This function is called by:
 13567 ;;		_main
 13568 ;; This function uses a non-reentrant model
 13569 ;;
 13570                           
 13571                           
 13572                           ;psect for function _LCDWriteInt
 13573  080E                     _LCDWriteInt:	
 13574                           
 13575                           ;lcd.c: 192: uint8_t str[5]={0,0,0,0,0};
 13576                           
 13577                           ;incstack = 0
 13578                           ; Regs used in _LCDWriteInt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13579  080E  3048               	movlw	low LCDWriteInt@F14392
 13580  080F  0086               	movwf	6
 13581  0810  3001               	movlw	high LCDWriteInt@F14392
 13582  0811  0087               	movwf	7
 13583  0812  3048               	movlw	low LCDWriteInt@str
 13584  0813  0084               	movwf	4
 13585  0814  3000               	movlw	high LCDWriteInt@str
 13586  0815  0085               	movwf	5
 13587  0816  3005               	movlw	5
 13588  0817  0020               	movlb	0	; select bank0
 13589  0818  00C4               	movwf	??_LCDWriteInt
 13590  0819                     u3800:	
 13591  0819  0016               	moviw fsr1++
 13592  081A  001A               	movwi fsr0++
 13593  081B  0BC4               	decfsz	??_LCDWriteInt,f
 13594  081C  2819               	goto	u3800
 13595                           
 13596                           ;lcd.c: 193: uint8_t i=4,j=0;
 13597  081D  3004               	movlw	4
 13598  081E  00C4               	movwf	??_LCDWriteInt
 13599  081F  0844               	movf	??_LCDWriteInt,w
 13600  0820  00CE               	movwf	LCDWriteInt@i
 13601  0821  01CD               	clrf	LCDWriteInt@j
 13602                           
 13603                           ;lcd.c: 195: if(value<0)
 13604  0822  1FC0               	btfss	LCDWriteInt@value+1,7
 13605  0823  282F               	goto	l3233
 13606                           
 13607                           ;lcd.c: 196: {
 13608                           ;lcd.c: 197: LCDWriteCharacter('-');
 13609  0824  302D               	movlw	45
 13610  0825  3193  236F  3188   	fcall	_LCDWriteCharacter
 13611                           
 13612                           ;lcd.c: 198: value=value*-1;
 13613  0828  0020               	movlb	0	; select bank0
 13614  0829  09BF               	comf	LCDWriteInt@value,f
 13615  082A  09C0               	comf	LCDWriteInt@value+1,f
 13616  082B  0ABF               	incf	LCDWriteInt@value,f
 13617  082C  1903               	skipnz
 13618  082D  0AC0               	incf	LCDWriteInt@value+1,f
 13619                           
 13620                           ;lcd.c: 199: }
 13621  082E  2836               	goto	l3243
 13622  082F                     l3233:	
 13623                           
 13624                           ;lcd.c: 201: else
 13625                           ;lcd.c: 202: {
 13626                           ;lcd.c: 203: if(sign == 1)
 13627  082F  0343               	decf	LCDWriteInt@sign,w
 13628  0830  1D03               	btfss	3,2
 13629  0831  2836               	goto	l3243
 13630                           
 13631                           ;lcd.c: 204: {
 13632                           ;lcd.c: 205: LCDWriteCharacter('+');
 13633  0832  302B               	movlw	43
 13634  0833  3193  236F  3188   	fcall	_LCDWriteCharacter
 13635  0836                     l3243:	
 13636                           ;lcd.c: 206: }
 13637                           ;lcd.c: 207: }
 13638                           ;lcd.c: 209: while(value)
 13639                           
 13640  0836  0020               	movlb	0	; select bank0
 13641  0837  083F               	movf	LCDWriteInt@value,w
 13642  0838  0440               	iorwf	LCDWriteInt@value+1,w
 13643  0839  1903               	btfsc	3,2
 13644  083A  2863               	goto	l3245
 13645                           
 13646                           ;lcd.c: 210: {
 13647                           ;lcd.c: 211: str[i]=(uint16_t)value%10;
 13648  083B  300A               	movlw	10
 13649  083C  00F0               	movwf	___lwmod@divisor
 13650  083D  3000               	movlw	0
 13651  083E  00F1               	movwf	___lwmod@divisor+1
 13652  083F  0020               	movlb	0	; select bank0
 13653  0840  0840               	movf	LCDWriteInt@value+1,w
 13654  0841  00F3               	movwf	___lwmod@dividend+1
 13655  0842  083F               	movf	LCDWriteInt@value,w
 13656  0843  00F2               	movwf	___lwmod@dividend
 13657  0844  3191  2144  3188   	fcall	___lwmod
 13658  0847  0870               	movf	?___lwmod,w
 13659  0848  0020               	movlb	0	; select bank0
 13660  0849  00C4               	movwf	??_LCDWriteInt
 13661  084A  084E               	movf	LCDWriteInt@i,w
 13662  084B  3E48               	addlw	(low (LCDWriteInt@str| 0))& (0+255)
 13663  084C  0086               	movwf	6
 13664  084D  0187               	clrf	7
 13665  084E  0844               	movf	??_LCDWriteInt,w
 13666  084F  0081               	movwf	1
 13667                           
 13668                           ;lcd.c: 212: value=value/10;
 13669  0850  300A               	movlw	10
 13670  0851  00F0               	movwf	___awdiv@divisor
 13671  0852  3000               	movlw	0
 13672  0853  00F1               	movwf	___awdiv@divisor+1
 13673  0854  0840               	movf	LCDWriteInt@value+1,w
 13674  0855  00F3               	movwf	___awdiv@dividend+1
 13675  0856  083F               	movf	LCDWriteInt@value,w
 13676  0857  00F2               	movwf	___awdiv@dividend
 13677  0858  3193  231E  3188   	fcall	___awdiv
 13678  085B  0871               	movf	?___awdiv+1,w
 13679  085C  0020               	movlb	0	; select bank0
 13680  085D  00C0               	movwf	LCDWriteInt@value+1
 13681  085E  0870               	movf	?___awdiv,w
 13682  085F  00BF               	movwf	LCDWriteInt@value
 13683                           
 13684                           ;lcd.c: 213: i--;
 13685  0860  3001               	movlw	1
 13686  0861  02CE               	subwf	LCDWriteInt@i,f
 13687  0862  2836               	goto	l3243
 13688  0863                     l3245:	
 13689                           
 13690                           ;lcd.c: 214: }
 13691                           ;lcd.c: 215: if(fieldLength==-1)
 13692  0863  0A41               	incf	LCDWriteInt@fieldLength,w
 13693  0864  1903               	btfsc	3,2
 13694  0865  286B               	goto	l3251
 13695  0866  2873               	goto	l3253
 13696  0867                     l3249:	
 13697                           ;lcd.c: 216: {
 13698                           ;lcd.c: 217: while(str[j]==0)
 13699                           
 13700                           
 13701                           ;lcd.c: 218: {
 13702                           ;lcd.c: 219: j++;
 13703  0867  3001               	movlw	1
 13704  0868  00C4               	movwf	??_LCDWriteInt
 13705  0869  0844               	movf	??_LCDWriteInt,w
 13706  086A  07CD               	addwf	LCDWriteInt@j,f
 13707  086B                     l3251:	
 13708  086B  084D               	movf	LCDWriteInt@j,w
 13709  086C  3E48               	addlw	(low (LCDWriteInt@str| 0))& (0+255)
 13710  086D  0086               	movwf	6
 13711  086E  0187               	clrf	7
 13712  086F  0801               	movf	1,w
 13713  0870  1D03               	btfss	3,2
 13714  0871  2879               	goto	l3255
 13715  0872  2867               	goto	l3249
 13716  0873                     l3253:	
 13717                           ;lcd.c: 220: }
 13718                           ;lcd.c: 221: }
 13719                           
 13720                           
 13721                           ;lcd.c: 222: else
 13722                           ;lcd.c: 223: {
 13723                           ;lcd.c: 224: j=(uint8_t)(5-fieldLength);
 13724  0873  0341               	decf	LCDWriteInt@fieldLength,w
 13725  0874  3AFF               	xorlw	255
 13726  0875  3E05               	addlw	5
 13727  0876  00C4               	movwf	??_LCDWriteInt
 13728  0877  0844               	movf	??_LCDWriteInt,w
 13729  0878  00CD               	movwf	LCDWriteInt@j
 13730  0879                     l3255:	
 13731                           
 13732                           ;lcd.c: 225: }
 13733                           ;lcd.c: 227: for(i=j;i<(5-numPlaces);i++)
 13734  0879  084D               	movf	LCDWriteInt@j,w
 13735  087A  00C4               	movwf	??_LCDWriteInt
 13736  087B  0844               	movf	??_LCDWriteInt,w
 13737  087C  00CE               	movwf	LCDWriteInt@i
 13738  087D                     l3261:	
 13739  087D  0842               	movf	LCDWriteInt@numPlaces,w
 13740  087E  00C4               	movwf	??_LCDWriteInt
 13741  087F  01C5               	clrf	??_LCDWriteInt+1
 13742  0880  09C4               	comf	??_LCDWriteInt,f
 13743  0881  09C5               	comf	??_LCDWriteInt+1,f
 13744  0882  0AC4               	incf	??_LCDWriteInt,f
 13745  0883  1903               	skipnz
 13746  0884  0AC5               	incf	??_LCDWriteInt+1,f
 13747  0885  0844               	movf	??_LCDWriteInt,w
 13748  0886  3E05               	addlw	5
 13749  0887  00C6               	movwf	??_LCDWriteInt+2
 13750  0888  3000               	movlw	0
 13751  0889  3D45               	addwfc	??_LCDWriteInt+1,w
 13752  088A  00C7               	movwf	??_LCDWriteInt+3
 13753  088B  0847               	movf	??_LCDWriteInt+3,w
 13754  088C  3A80               	xorlw	128
 13755  088D  3C80               	sublw	128
 13756  088E  1D03               	skipz
 13757  088F  2892               	goto	u3865
 13758  0890  0846               	movf	??_LCDWriteInt+2,w
 13759  0891  024E               	subwf	LCDWriteInt@i,w
 13760  0892                     u3865:	
 13761  0892  1803               	btfsc	3,0
 13762  0893  28A4               	goto	l3263
 13763                           
 13764                           ;lcd.c: 228: {
 13765                           ;lcd.c: 229: LCDWriteCharacter((uint8_t)(48+str[i]));
 13766  0894  0020               	movlb	0	; select bank0
 13767  0895  084E               	movf	LCDWriteInt@i,w
 13768  0896  3E48               	addlw	(low (LCDWriteInt@str| 0))& (0+255)
 13769  0897  0086               	movwf	6
 13770  0898  0187               	clrf	7
 13771  0899  0801               	movf	1,w
 13772  089A  3E30               	addlw	48
 13773  089B  3193  236F  3188   	fcall	_LCDWriteCharacter
 13774  089E  3001               	movlw	1
 13775  089F  0020               	movlb	0	; select bank0
 13776  08A0  00C4               	movwf	??_LCDWriteInt
 13777  08A1  0844               	movf	??_LCDWriteInt,w
 13778  08A2  07CE               	addwf	LCDWriteInt@i,f
 13779  08A3  287D               	goto	l3261
 13780  08A4                     l3263:	
 13781                           
 13782                           ;lcd.c: 230: }
 13783                           ;lcd.c: 232: if(numPlaces == 1)
 13784  08A4  0020               	movlb	0	; select bank0
 13785  08A5  0342               	decf	LCDWriteInt@numPlaces,w
 13786  08A6  1D03               	btfss	3,2
 13787  08A7  28B2               	goto	l3267
 13788                           
 13789                           ;lcd.c: 233: {
 13790                           ;lcd.c: 234: LCDWriteCharacter(46);
 13791  08A8  302E               	movlw	46
 13792  08A9  3193  236F  3188   	fcall	_LCDWriteCharacter
 13793                           
 13794                           ;lcd.c: 235: LCDWriteCharacter ((uint8_t)(48+str[4]));
 13795  08AC  0020               	movlb	0	; select bank0
 13796  08AD  084C               	movf	LCDWriteInt@str+4,w
 13797  08AE  3E30               	addlw	48
 13798  08AF  3193  236F  3188   	fcall	_LCDWriteCharacter
 13799  08B2                     l3267:	
 13800                           
 13801                           ;lcd.c: 236: }
 13802                           ;lcd.c: 238: if(numPlaces == 2)
 13803  08B2  3002               	movlw	2
 13804  08B3  0020               	movlb	0	; select bank0
 13805  08B4  0642               	xorwf	LCDWriteInt@numPlaces,w
 13806  08B5  1D03               	btfss	3,2
 13807  08B6  0008               	return
 13808                           
 13809                           ;lcd.c: 239: {
 13810                           ;lcd.c: 240: LCDWriteCharacter(46);
 13811  08B7  302E               	movlw	46
 13812  08B8  3193  236F  3188   	fcall	_LCDWriteCharacter
 13813                           
 13814                           ;lcd.c: 241: LCDWriteCharacter((uint8_t)(48+str[3]));
 13815  08BB  0020               	movlb	0	; select bank0
 13816  08BC  084B               	movf	LCDWriteInt@str+3,w
 13817  08BD  3E30               	addlw	48
 13818  08BE  3193  236F  3188   	fcall	_LCDWriteCharacter
 13819                           
 13820                           ;lcd.c: 242: LCDWriteCharacter((uint8_t)(48+str[4]));
 13821  08C1  0020               	movlb	0	; select bank0
 13822  08C2  084C               	movf	LCDWriteInt@str+4,w
 13823  08C3  3E30               	addlw	48
 13824  08C4  3193  236F         	fcall	_LCDWriteCharacter
 13825  08C6  0008               	return
 13826  08C7                     __end_of_LCDWriteInt:	
 13827                           
 13828                           	psect	text35
 13829  1144                     __ptext35:	
 13830 ;; *************** function ___lwmod *****************
 13831 ;; Defined at:
 13832 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 13833 ;; Parameters:    Size  Location     Type
 13834 ;;  divisor         2    0[COMMON] unsigned int 
 13835 ;;  dividend        2    2[COMMON] unsigned int 
 13836 ;; Auto vars:     Size  Location     Type
 13837 ;;  counter         1    5[COMMON] unsigned char 
 13838 ;; Return value:  Size  Location     Type
 13839 ;;                  2    0[COMMON] unsigned int 
 13840 ;; Registers used:
 13841 ;;		wreg, status,2, status,0
 13842 ;; Tracked objects:
 13843 ;;		On entry : 0/0
 13844 ;;		On exit  : 0/0
 13845 ;;		Unchanged: 0/0
 13846 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13847 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13848 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13849 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13850 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13851 ;;Total ram usage:        6 bytes
 13852 ;; Hardware stack levels used:    1
 13853 ;; This function calls:
 13854 ;;		Nothing
 13855 ;; This function is called by:
 13856 ;;		_LCDWriteInt
 13857 ;; This function uses a non-reentrant model
 13858 ;;
 13859                           
 13860                           
 13861                           ;psect for function ___lwmod
 13862  1144                     ___lwmod:	
 13863                           
 13864                           ;incstack = 0
 13865                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
 13866  1144  0870               	movf	___lwmod@divisor,w
 13867  1145  0471               	iorwf	___lwmod@divisor+1,w
 13868  1146  1903               	btfsc	3,2
 13869  1147  296B               	goto	l3013
 13870  1148  01F5               	clrf	___lwmod@counter
 13871  1149  0AF5               	incf	___lwmod@counter,f
 13872  114A                     l3003:	
 13873  114A  1BF1               	btfsc	___lwmod@divisor+1,7
 13874  114B  2956               	goto	l3005
 13875  114C  3001               	movlw	1
 13876  114D                     u3295:	
 13877  114D  35F0               	lslf	___lwmod@divisor,f
 13878  114E  0DF1               	rlf	___lwmod@divisor+1,f
 13879  114F  0B89               	decfsz	9,f
 13880  1150  294D               	goto	u3295
 13881  1151  3001               	movlw	1
 13882  1152  00F4               	movwf	??___lwmod
 13883  1153  0874               	movf	??___lwmod,w
 13884  1154  07F5               	addwf	___lwmod@counter,f
 13885  1155  294A               	goto	l3003
 13886  1156                     l3005:	
 13887  1156  0871               	movf	___lwmod@divisor+1,w
 13888  1157  0273               	subwf	___lwmod@dividend+1,w
 13889  1158  1D03               	skipz
 13890  1159  295C               	goto	u3315
 13891  115A  0870               	movf	___lwmod@divisor,w
 13892  115B  0272               	subwf	___lwmod@dividend,w
 13893  115C                     u3315:	
 13894  115C  1C03               	skipc
 13895  115D  2962               	goto	l3009
 13896  115E  0870               	movf	___lwmod@divisor,w
 13897  115F  02F2               	subwf	___lwmod@dividend,f
 13898  1160  0871               	movf	___lwmod@divisor+1,w
 13899  1161  3BF3               	subwfb	___lwmod@dividend+1,f
 13900  1162                     l3009:	
 13901  1162  3001               	movlw	1
 13902  1163                     u3325:	
 13903  1163  36F1               	lsrf	___lwmod@divisor+1,f
 13904  1164  0CF0               	rrf	___lwmod@divisor,f
 13905  1165  0B89               	decfsz	9,f
 13906  1166  2963               	goto	u3325
 13907  1167  3001               	movlw	1
 13908  1168  02F5               	subwf	___lwmod@counter,f
 13909  1169  1D03               	btfss	3,2
 13910  116A  2956               	goto	l3005
 13911  116B                     l3013:	
 13912  116B  0873               	movf	___lwmod@dividend+1,w
 13913  116C  00F1               	movwf	?___lwmod+1
 13914  116D  0872               	movf	___lwmod@dividend,w
 13915  116E  00F0               	movwf	?___lwmod
 13916  116F  0008               	return
 13917  1170                     __end_of___lwmod:	
 13918                           
 13919                           	psect	text36
 13920  131E                     __ptext36:	
 13921 ;; *************** function ___awdiv *****************
 13922 ;; Defined at:
 13923 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
 13924 ;; Parameters:    Size  Location     Type
 13925 ;;  divisor         2    0[COMMON] int 
 13926 ;;  dividend        2    2[COMMON] int 
 13927 ;; Auto vars:     Size  Location     Type
 13928 ;;  quotient        2    7[COMMON] int 
 13929 ;;  sign            1    6[COMMON] unsigned char 
 13930 ;;  counter         1    5[COMMON] unsigned char 
 13931 ;; Return value:  Size  Location     Type
 13932 ;;                  2    0[COMMON] int 
 13933 ;; Registers used:
 13934 ;;		wreg, status,2, status,0
 13935 ;; Tracked objects:
 13936 ;;		On entry : 0/0
 13937 ;;		On exit  : 0/0
 13938 ;;		Unchanged: 0/0
 13939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13940 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13941 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13942 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13943 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13944 ;;Total ram usage:        9 bytes
 13945 ;; Hardware stack levels used:    1
 13946 ;; This function calls:
 13947 ;;		Nothing
 13948 ;; This function is called by:
 13949 ;;		_main
 13950 ;;		_LCDWriteInt
 13951 ;; This function uses a non-reentrant model
 13952 ;;
 13953                           
 13954                           
 13955                           ;psect for function ___awdiv
 13956  131E                     ___awdiv:	
 13957                           
 13958                           ;incstack = 0
 13959                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 13960  131E  01F6               	clrf	___awdiv@sign
 13961  131F  1FF1               	btfss	___awdiv@divisor+1,7
 13962  1320  2B28               	goto	l2909
 13963  1321  09F0               	comf	___awdiv@divisor,f
 13964  1322  09F1               	comf	___awdiv@divisor+1,f
 13965  1323  0AF0               	incf	___awdiv@divisor,f
 13966  1324  1903               	skipnz
 13967  1325  0AF1               	incf	___awdiv@divisor+1,f
 13968  1326  01F6               	clrf	___awdiv@sign
 13969  1327  0AF6               	incf	___awdiv@sign,f
 13970  1328                     l2909:	
 13971  1328  1FF3               	btfss	___awdiv@dividend+1,7
 13972  1329  2B33               	goto	l2915
 13973  132A  09F2               	comf	___awdiv@dividend,f
 13974  132B  09F3               	comf	___awdiv@dividend+1,f
 13975  132C  0AF2               	incf	___awdiv@dividend,f
 13976  132D  1903               	skipnz
 13977  132E  0AF3               	incf	___awdiv@dividend+1,f
 13978  132F  3001               	movlw	1
 13979  1330  00F4               	movwf	??___awdiv
 13980  1331  0874               	movf	??___awdiv,w
 13981  1332  06F6               	xorwf	___awdiv@sign,f
 13982  1333                     l2915:	
 13983  1333  01F7               	clrf	___awdiv@quotient
 13984  1334  01F8               	clrf	___awdiv@quotient+1
 13985  1335  0870               	movf	___awdiv@divisor,w
 13986  1336  0471               	iorwf	___awdiv@divisor+1,w
 13987  1337  1903               	btfsc	3,2
 13988  1338  2B62               	goto	l2937
 13989  1339  01F5               	clrf	___awdiv@counter
 13990  133A  0AF5               	incf	___awdiv@counter,f
 13991  133B                     l2925:	
 13992  133B  1BF1               	btfsc	___awdiv@divisor+1,7
 13993  133C  2B47               	goto	l2927
 13994  133D  3001               	movlw	1
 13995  133E                     u3125:	
 13996  133E  35F0               	lslf	___awdiv@divisor,f
 13997  133F  0DF1               	rlf	___awdiv@divisor+1,f
 13998  1340  0B89               	decfsz	9,f
 13999  1341  2B3E               	goto	u3125
 14000  1342  3001               	movlw	1
 14001  1343  00F4               	movwf	??___awdiv
 14002  1344  0874               	movf	??___awdiv,w
 14003  1345  07F5               	addwf	___awdiv@counter,f
 14004  1346  2B3B               	goto	l2925
 14005  1347                     l2927:	
 14006  1347  3001               	movlw	1
 14007  1348                     u3145:	
 14008  1348  35F7               	lslf	___awdiv@quotient,f
 14009  1349  0DF8               	rlf	___awdiv@quotient+1,f
 14010  134A  0B89               	decfsz	9,f
 14011  134B  2B48               	goto	u3145
 14012  134C  0871               	movf	___awdiv@divisor+1,w
 14013  134D  0273               	subwf	___awdiv@dividend+1,w
 14014  134E  1D03               	skipz
 14015  134F  2B52               	goto	u3155
 14016  1350  0870               	movf	___awdiv@divisor,w
 14017  1351  0272               	subwf	___awdiv@dividend,w
 14018  1352                     u3155:	
 14019  1352  1C03               	skipc
 14020  1353  2B59               	goto	l2933
 14021  1354  0870               	movf	___awdiv@divisor,w
 14022  1355  02F2               	subwf	___awdiv@dividend,f
 14023  1356  0871               	movf	___awdiv@divisor+1,w
 14024  1357  3BF3               	subwfb	___awdiv@dividend+1,f
 14025  1358  1477               	bsf	___awdiv@quotient,0
 14026  1359                     l2933:	
 14027  1359  3001               	movlw	1
 14028  135A                     u3165:	
 14029  135A  36F1               	lsrf	___awdiv@divisor+1,f
 14030  135B  0CF0               	rrf	___awdiv@divisor,f
 14031  135C  0B89               	decfsz	9,f
 14032  135D  2B5A               	goto	u3165
 14033  135E  3001               	movlw	1
 14034  135F  02F5               	subwf	___awdiv@counter,f
 14035  1360  1D03               	btfss	3,2
 14036  1361  2B47               	goto	l2927
 14037  1362                     l2937:	
 14038  1362  0876               	movf	___awdiv@sign,w
 14039  1363  1903               	btfsc	3,2
 14040  1364  2B6A               	goto	l2941
 14041  1365  09F7               	comf	___awdiv@quotient,f
 14042  1366  09F8               	comf	___awdiv@quotient+1,f
 14043  1367  0AF7               	incf	___awdiv@quotient,f
 14044  1368  1903               	skipnz
 14045  1369  0AF8               	incf	___awdiv@quotient+1,f
 14046  136A                     l2941:	
 14047  136A  0878               	movf	___awdiv@quotient+1,w
 14048  136B  00F1               	movwf	?___awdiv+1
 14049  136C  0877               	movf	___awdiv@quotient,w
 14050  136D  00F0               	movwf	?___awdiv
 14051  136E  0008               	return
 14052  136F                     __end_of___awdiv:	
 14053                           
 14054                           	psect	text37
 14055  136F                     __ptext37:	
 14056 ;; *************** function _LCDWriteCharacter *****************
 14057 ;; Defined at:
 14058 ;;		line 140 in file "lcd.c"
 14059 ;; Parameters:    Size  Location     Type
 14060 ;;  character       1    wreg     const unsigned char 
 14061 ;; Auto vars:     Size  Location     Type
 14062 ;;  character       1    9[COMMON] const unsigned char 
 14063 ;;  base            2   10[COMMON] unsigned int 
 14064 ;; Return value:  Size  Location     Type
 14065 ;;                  1    wreg      void 
 14066 ;; Registers used:
 14067 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 14068 ;; Tracked objects:
 14069 ;;		On entry : 0/0
 14070 ;;		On exit  : 0/0
 14071 ;;		Unchanged: 0/0
 14072 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14073 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14074 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14075 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14076 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14077 ;;Total ram usage:        6 bytes
 14078 ;; Hardware stack levels used:    1
 14079 ;; Hardware stack levels required when called:    1
 14080 ;; This function calls:
 14081 ;;		_LCDWrite
 14082 ;;		___wmul
 14083 ;; This function is called by:
 14084 ;;		_main
 14085 ;;		_LCDWriteString
 14086 ;;		_LCDWriteInt
 14087 ;; This function uses a non-reentrant model
 14088 ;;
 14089                           
 14090                           
 14091                           ;psect for function _LCDWriteCharacter
 14092  136F                     _LCDWriteCharacter:	
 14093                           
 14094                           ;incstack = 0
 14095                           ; Regs used in _LCDWriteCharacter: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 14096                           ;LCDWriteCharacter@character stored from wreg
 14097  136F  00F9               	movwf	LCDWriteCharacter@character
 14098                           
 14099                           ;lcd.c: 142: uint16_t base;
 14100                           ;lcd.c: 143: base = character - 0x20;
 14101  1370  0879               	movf	LCDWriteCharacter@character,w
 14102  1371  3EE0               	addlw	224
 14103  1372  00FA               	movwf	LCDWriteCharacter@base
 14104  1373  30FF               	movlw	255
 14105  1374  1803               	skipnc
 14106  1375  3000               	movlw	0
 14107  1376  00FB               	movwf	LCDWriteCharacter@base+1
 14108                           
 14109                           ;lcd.c: 144: base *= 3;
 14110  1377  3003               	movlw	3
 14111  1378  00F0               	movwf	___wmul@multiplier
 14112  1379  3000               	movlw	0
 14113  137A  00F1               	movwf	___wmul@multiplier+1
 14114  137B  087B               	movf	LCDWriteCharacter@base+1,w
 14115  137C  00F3               	movwf	___wmul@multiplicand+1
 14116  137D  087A               	movf	LCDWriteCharacter@base,w
 14117  137E  00F2               	movwf	___wmul@multiplicand
 14118  137F  319E  26FF  3193   	fcall	___wmul
 14119  1382  0871               	movf	?___wmul+1,w
 14120  1383  00FB               	movwf	LCDWriteCharacter@base+1
 14121  1384  0870               	movf	?___wmul,w
 14122  1385  00FA               	movwf	LCDWriteCharacter@base
 14123                           
 14124                           ;lcd.c: 145: LCDWrite(1,fonts[base]);
 14125  1386  087B               	movf	LCDWriteCharacter@base+1,w
 14126  1387  0085               	movwf	5
 14127  1388  087A               	movf	LCDWriteCharacter@base,w
 14128  1389  0084               	movwf	4
 14129  138A  3000               	movlw	low (_fonts| (0+32768))
 14130  138B  0784               	addwf	4,f
 14131  138C  3090               	movlw	high (_fonts| (0+32768))
 14132  138D  3D85               	addwfc	5,f
 14133  138E  0800               	movf	0,w	;code access
 14134  138F  00F6               	movwf	??_LCDWriteCharacter
 14135  1390  0876               	movf	??_LCDWriteCharacter,w
 14136  1391  00F0               	movwf	LCDWrite@data
 14137  1392  3001               	movlw	1
 14138  1393  319F  27B5  3193   	fcall	_LCDWrite
 14139                           
 14140                           ;lcd.c: 146: LCDWrite(1,fonts[base + 1]);
 14141  1396  087A               	movf	LCDWriteCharacter@base,w
 14142  1397  3E01               	addlw	1
 14143  1398  00F6               	movwf	??_LCDWriteCharacter
 14144  1399  3000               	movlw	0
 14145  139A  3D7B               	addwfc	LCDWriteCharacter@base+1,w
 14146  139B  00F7               	movwf	??_LCDWriteCharacter+1
 14147  139C  3000               	movlw	low (_fonts| (0+32768))
 14148  139D  0776               	addwf	??_LCDWriteCharacter,w
 14149  139E  0084               	movwf	4
 14150  139F  3090               	movlw	high (_fonts| (0+32768))
 14151  13A0  3D77               	addwfc	??_LCDWriteCharacter+1,w
 14152  13A1  0085               	movwf	5
 14153  13A2  0800               	movf	0,w	;code access
 14154  13A3  00F8               	movwf	??_LCDWriteCharacter+2
 14155  13A4  0878               	movf	??_LCDWriteCharacter+2,w
 14156  13A5  00F0               	movwf	LCDWrite@data
 14157  13A6  3001               	movlw	1
 14158  13A7  319F  27B5  3193   	fcall	_LCDWrite
 14159                           
 14160                           ;lcd.c: 147: LCDWrite(1,fonts[base + 2]);
 14161  13AA  087A               	movf	LCDWriteCharacter@base,w
 14162  13AB  3E02               	addlw	2
 14163  13AC  00F6               	movwf	??_LCDWriteCharacter
 14164  13AD  3000               	movlw	0
 14165  13AE  3D7B               	addwfc	LCDWriteCharacter@base+1,w
 14166  13AF  00F7               	movwf	??_LCDWriteCharacter+1
 14167  13B0  3000               	movlw	low (_fonts| (0+32768))
 14168  13B1  0776               	addwf	??_LCDWriteCharacter,w
 14169  13B2  0084               	movwf	4
 14170  13B3  3090               	movlw	high (_fonts| (0+32768))
 14171  13B4  3D77               	addwfc	??_LCDWriteCharacter+1,w
 14172  13B5  0085               	movwf	5
 14173  13B6  0800               	movf	0,w	;code access
 14174  13B7  00F8               	movwf	??_LCDWriteCharacter+2
 14175  13B8  0878               	movf	??_LCDWriteCharacter+2,w
 14176  13B9  00F0               	movwf	LCDWrite@data
 14177  13BA  3001               	movlw	1
 14178  13BB  319F  27B5  3193   	fcall	_LCDWrite
 14179                           
 14180                           ;lcd.c: 148: LCDWrite(1, 0x00);
 14181  13BE  01F0               	clrf	LCDWrite@data
 14182  13BF  3001               	movlw	1
 14183  13C0  319F  27B5         	fcall	_LCDWrite
 14184  13C2  0008               	return
 14185  13C3                     __end_of_LCDWriteCharacter:	
 14186                           
 14187                           	psect	text38
 14188  1EFF                     __ptext38:	
 14189 ;; *************** function ___wmul *****************
 14190 ;; Defined at:
 14191 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 14192 ;; Parameters:    Size  Location     Type
 14193 ;;  multiplier      2    0[COMMON] unsigned int 
 14194 ;;  multiplicand    2    2[COMMON] unsigned int 
 14195 ;; Auto vars:     Size  Location     Type
 14196 ;;  product         2    4[COMMON] unsigned int 
 14197 ;; Return value:  Size  Location     Type
 14198 ;;                  2    0[COMMON] unsigned int 
 14199 ;; Registers used:
 14200 ;;		wreg, status,2, status,0
 14201 ;; Tracked objects:
 14202 ;;		On entry : 0/0
 14203 ;;		On exit  : 0/0
 14204 ;;		Unchanged: 0/0
 14205 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14206 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14207 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14208 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14209 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14210 ;;Total ram usage:        6 bytes
 14211 ;; Hardware stack levels used:    1
 14212 ;; This function calls:
 14213 ;;		Nothing
 14214 ;; This function is called by:
 14215 ;;		_readIAnalog
 14216 ;;		_LCDWriteCharacter
 14217 ;;		_eval_poly
 14218 ;; This function uses a non-reentrant model
 14219 ;;
 14220                           
 14221                           
 14222                           ;psect for function ___wmul
 14223  1EFF                     ___wmul:	
 14224                           
 14225                           ;incstack = 0
 14226                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 14227  1EFF  01F4               	clrf	___wmul@product
 14228  1F00  01F5               	clrf	___wmul@product+1
 14229  1F01                     l2411:	
 14230  1F01  1C70               	btfss	___wmul@multiplier,0
 14231  1F02  2F07               	goto	l623
 14232  1F03  0872               	movf	___wmul@multiplicand,w
 14233  1F04  07F4               	addwf	___wmul@product,f
 14234  1F05  0873               	movf	___wmul@multiplicand+1,w
 14235  1F06  3DF5               	addwfc	___wmul@product+1,f
 14236  1F07                     l623:	
 14237  1F07  3001               	movlw	1
 14238  1F08                     u2355:	
 14239  1F08  35F2               	lslf	___wmul@multiplicand,f
 14240  1F09  0DF3               	rlf	___wmul@multiplicand+1,f
 14241  1F0A  0B89               	decfsz	9,f
 14242  1F0B  2F08               	goto	u2355
 14243  1F0C  3001               	movlw	1
 14244  1F0D                     u2365:	
 14245  1F0D  36F1               	lsrf	___wmul@multiplier+1,f
 14246  1F0E  0CF0               	rrf	___wmul@multiplier,f
 14247  1F0F  0B89               	decfsz	9,f
 14248  1F10  2F0D               	goto	u2365
 14249  1F11  0870               	movf	___wmul@multiplier,w
 14250  1F12  0471               	iorwf	___wmul@multiplier+1,w
 14251  1F13  1D03               	btfss	3,2
 14252  1F14  2F01               	goto	l2411
 14253  1F15  0875               	movf	___wmul@product+1,w
 14254  1F16  00F1               	movwf	?___wmul+1
 14255  1F17  0874               	movf	___wmul@product,w
 14256  1F18  00F0               	movwf	?___wmul
 14257  1F19  0008               	return
 14258  1F1A                     __end_of___wmul:	
 14259                           
 14260                           	psect	text39
 14261  1FB5                     __ptext39:	
 14262 ;; *************** function _LCDWrite *****************
 14263 ;; Defined at:
 14264 ;;		line 281 in file "lcd.c"
 14265 ;; Parameters:    Size  Location     Type
 14266 ;;  data_or_comm    1    wreg     unsigned char 
 14267 ;;  data            1    0[COMMON] unsigned char 
 14268 ;; Auto vars:     Size  Location     Type
 14269 ;;  data_or_comm    1    2[COMMON] unsigned char 
 14270 ;;  i               1    4[COMMON] unsigned char 
 14271 ;;  d               1    3[COMMON] unsigned char 
 14272 ;; Return value:  Size  Location     Type
 14273 ;;                  1    wreg      void 
 14274 ;; Registers used:
 14275 ;;		wreg, status,2, status,0
 14276 ;; Tracked objects:
 14277 ;;		On entry : 0/0
 14278 ;;		On exit  : 0/0
 14279 ;;		Unchanged: 0/0
 14280 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14281 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14282 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14283 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14284 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14285 ;;Total ram usage:        5 bytes
 14286 ;; Hardware stack levels used:    1
 14287 ;; This function calls:
 14288 ;;		Nothing
 14289 ;; This function is called by:
 14290 ;;		_gotoXY
 14291 ;;		_LCDWriteCharacter
 14292 ;;		_LCDClear
 14293 ;;		_LCDInit
 14294 ;; This function uses a non-reentrant model
 14295 ;;
 14296                           
 14297                           
 14298                           ;psect for function _LCDWrite
 14299  1FB5                     _LCDWrite:	
 14300                           
 14301                           ;incstack = 0
 14302                           ; Regs used in _LCDWrite: [wreg+status,2+status,0]
 14303                           ;LCDWrite@data_or_command stored from wreg
 14304  1FB5  00F2               	movwf	LCDWrite@data_or_command
 14305                           
 14306                           ;lcd.c: 283: uint8_t i,d;
 14307                           ;lcd.c: 285: d=data;
 14308  1FB6  0870               	movf	LCDWrite@data,w
 14309  1FB7  00F1               	movwf	??_LCDWrite
 14310  1FB8  0871               	movf	??_LCDWrite,w
 14311  1FB9  00F3               	movwf	LCDWrite@d
 14312                           
 14313                           ;lcd.c: 287: if(data_or_command == 0)
 14314  1FBA  0872               	movf	LCDWrite@data_or_command,w
 14315  1FBB  1D03               	btfss	3,2
 14316  1FBC  2FC0               	goto	l382
 14317                           
 14318                           ;lcd.c: 288: {
 14319                           ;lcd.c: 289: LATAbits.LATA2 = 0;
 14320  1FBD  0020               	movlb	0	; select bank0
 14321  1FBE  1116               	bcf	22,2	;volatile
 14322                           
 14323                           ;lcd.c: 290: }
 14324  1FBF  2FC2               	goto	l383
 14325  1FC0                     l382:	
 14326                           
 14327                           ;lcd.c: 291: else
 14328                           ;lcd.c: 292: {
 14329                           ;lcd.c: 293: LATAbits.LATA2 = 1;
 14330  1FC0  0020               	movlb	0	; select bank0
 14331  1FC1  1516               	bsf	22,2	;volatile
 14332  1FC2                     l383:	
 14333                           
 14334                           ;lcd.c: 294: }
 14335                           ;lcd.c: 296: LATAbits.LATA1 = 0;
 14336  1FC2  1096               	bcf	22,1	;volatile
 14337                           
 14338                           ;lcd.c: 298: for(i=0;i<8;i++)
 14339  1FC3  01F4               	clrf	LCDWrite@i
 14340  1FC4  3008               	movlw	8
 14341  1FC5  0274               	subwf	LCDWrite@i,w
 14342  1FC6  1803               	btfsc	3,0
 14343  1FC7  2FD8               	goto	l385
 14344  1FC8                     l384:	
 14345                           
 14346                           ;lcd.c: 299: {
 14347                           ;lcd.c: 300: LATAbits.LATA3 = 0;
 14348  1FC8  1196               	bcf	22,3	;volatile
 14349                           
 14350                           ;lcd.c: 302: if(d&0x80)
 14351  1FC9  1FF3               	btfss	LCDWrite@d,7
 14352  1FCA  2FCC               	goto	l386
 14353                           
 14354                           ;lcd.c: 303: {
 14355                           ;lcd.c: 304: LATAbits.LATA3 = 1;
 14356  1FCB  1596               	bsf	22,3	;volatile
 14357  1FCC                     l386:	
 14358                           
 14359                           ;lcd.c: 305: }
 14360                           ;lcd.c: 307: LATAbits.LATA4 = 1;
 14361  1FCC  1616               	bsf	22,4	;volatile
 14362                           
 14363                           ;lcd.c: 309: d<<=1;
 14364  1FCD  1003               	clrc
 14365  1FCE  0DF3               	rlf	LCDWrite@d,f
 14366                           
 14367                           ;lcd.c: 311: LATAbits.LATA4=0;
 14368  1FCF  1216               	bcf	22,4	;volatile
 14369  1FD0  3001               	movlw	1
 14370  1FD1  00F1               	movwf	??_LCDWrite
 14371  1FD2  0871               	movf	??_LCDWrite,w
 14372  1FD3  07F4               	addwf	LCDWrite@i,f
 14373  1FD4  3008               	movlw	8
 14374  1FD5  0274               	subwf	LCDWrite@i,w
 14375  1FD6  1C03               	skipc
 14376  1FD7  2FC8               	goto	l384
 14377  1FD8                     l385:	
 14378                           
 14379                           ;lcd.c: 312: }
 14380                           ;lcd.c: 314: LATAbits.LATA1 = 1;
 14381  1FD8  1496               	bsf	22,1	;volatile
 14382  1FD9  0008               	return
 14383  1FDA                     __end_of_LCDWrite:	
 14384                           
 14385                           	psect	text40
 14386  0E43                     __ptext40:	
 14387 ;; *************** function _Battery_State_Machine *****************
 14388 ;; Defined at:
 14389 ;;		line 31 in file "battery_charger.c"
 14390 ;; Parameters:    Size  Location     Type
 14391 ;;  z               1    wreg     unsigned char 
 14392 ;; Auto vars:     Size  Location     Type
 14393 ;;  z               1   36[BANK0 ] unsigned char 
 14394 ;; Return value:  Size  Location     Type
 14395 ;;                  1    wreg      void 
 14396 ;; Registers used:
 14397 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14398 ;; Tracked objects:
 14399 ;;		On entry : 0/0
 14400 ;;		On exit  : 0/0
 14401 ;;		Unchanged: 0/0
 14402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14403 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14404 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14405 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14406 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14407 ;;Total ram usage:        6 bytes
 14408 ;; Hardware stack levels used:    1
 14409 ;; Hardware stack levels required when called:    2
 14410 ;; This function calls:
 14411 ;;		___awtoft
 14412 ;;		___ftmul
 14413 ;;		___fttol
 14414 ;; This function is called by:
 14415 ;;		_main
 14416 ;; This function uses a non-reentrant model
 14417 ;;
 14418                           
 14419                           
 14420                           ;psect for function _Battery_State_Machine
 14421  0E43                     _Battery_State_Machine:	
 14422                           
 14423                           ;incstack = 0
 14424                           ; Regs used in _Battery_State_Machine: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14425                           ;Battery_State_Machine@z stored from wreg
 14426  0E43  0020               	movlb	0	; select bank0
 14427  0E44  00C4               	movwf	Battery_State_Machine@z
 14428                           
 14429                           ;battery_charger.c: 33: if(batteryState[z]==PRECHARGE)
 14430  0E45  0844               	movf	Battery_State_Machine@z,w
 14431  0E46  3ECE               	addlw	(low (_batteryState| 0))& (0+255)
 14432  0E47  0086               	movwf	6
 14433  0E48  0187               	clrf	7
 14434  0E49  3003               	movlw	3
 14435  0E4A  0601               	xorwf	1,w
 14436  0E4B  1D03               	btfss	3,2
 14437  0E4C  2E9A               	goto	l3167
 14438                           
 14439                           ;battery_charger.c: 34: {
 14440                           ;battery_charger.c: 35: if(voltage[z]<1075)
 14441  0E4D  3544               	lslf	Battery_State_Machine@z,w
 14442  0E4E  3EB0               	addlw	(low (_voltage| 0))& (0+255)
 14443  0E4F  0086               	movwf	6
 14444  0E50  0187               	clrf	7
 14445  0E51  3F40               	moviw [0]fsr1
 14446  0E52  00BF               	movwf	??_Battery_State_Machine
 14447  0E53  3F41               	moviw [1]fsr1
 14448  0E54  00C0               	movwf	??_Battery_State_Machine+1
 14449  0E55  0840               	movf	??_Battery_State_Machine+1,w
 14450  0E56  3A80               	xorlw	128
 14451  0E57  00C1               	movwf	??_Battery_State_Machine+2
 14452  0E58  3084               	movlw	132
 14453  0E59  0241               	subwf	??_Battery_State_Machine+2,w
 14454  0E5A  1D03               	skipz
 14455  0E5B  2E5E               	goto	u3675
 14456  0E5C  3033               	movlw	51
 14457  0E5D  023F               	subwf	??_Battery_State_Machine,w
 14458  0E5E                     u3675:	
 14459  0E5E  1803               	skipnc
 14460  0E5F  2E88               	goto	l3165
 14461                           
 14462                           ;battery_charger.c: 36: {
 14463                           ;battery_charger.c: 37: if(stateCounter[z]>0)
 14464  0E60  0020               	movlb	0	; select bank0
 14465  0E61  3544               	lslf	Battery_State_Machine@z,w
 14466  0E62  3EB8               	addlw	(low (_stateCounter| 0))& (0+255)
 14467  0E63  0086               	movwf	6
 14468  0E64  0187               	clrf	7
 14469  0E65  3F40               	moviw [0]fsr1
 14470  0E66  00BF               	movwf	??_Battery_State_Machine
 14471  0E67  3F41               	moviw [1]fsr1
 14472  0E68  00C0               	movwf	??_Battery_State_Machine+1
 14473  0E69  0840               	movf	??_Battery_State_Machine+1,w
 14474  0E6A  3A80               	xorlw	128
 14475  0E6B  00C1               	movwf	??_Battery_State_Machine+2
 14476  0E6C  3080               	movlw	128
 14477  0E6D  0241               	subwf	??_Battery_State_Machine+2,w
 14478  0E6E  1D03               	skipz
 14479  0E6F  2E72               	goto	u3685
 14480  0E70  3001               	movlw	1
 14481  0E71  023F               	subwf	??_Battery_State_Machine,w
 14482  0E72                     u3685:	
 14483  0E72  1C03               	skipc
 14484  0E73  2E80               	goto	l3163
 14485                           
 14486                           ;battery_charger.c: 38: {
 14487                           ;battery_charger.c: 39: stateCounter[z]-=1;
 14488  0E74  0020               	movlb	0	; select bank0
 14489  0E75  3544               	lslf	Battery_State_Machine@z,w
 14490  0E76  3EB8               	addlw	(low (_stateCounter| 0))& (0+255)
 14491  0E77  0086               	movwf	6
 14492  0E78  0187               	clrf	7
 14493  0E79  30FF               	movlw	255
 14494  0E7A  0781               	addwf	1,f
 14495  0E7B  3141               	addfsr 1,1
 14496  0E7C  30FF               	movlw	255
 14497  0E7D  3D81               	addwfc	1,f
 14498  0E7E  317F               	addfsr 1,-1
 14499                           
 14500                           ;battery_charger.c: 40: }
 14501  0E7F  0008               	return
 14502  0E80                     l3163:	
 14503                           
 14504                           ;battery_charger.c: 41: else
 14505                           ;battery_charger.c: 42: {
 14506                           ;battery_charger.c: 43: batteryState[z]=FAULT;
 14507  0E80  0020               	movlb	0	; select bank0
 14508  0E81  0844               	movf	Battery_State_Machine@z,w
 14509  0E82  3ECE               	addlw	(low (_batteryState| 0))& (0+255)
 14510  0E83  0086               	movwf	6
 14511  0E84  0187               	clrf	7
 14512  0E85  0181               	clrf	1
 14513  0E86  0A81               	incf	1,f
 14514                           
 14515                           ;battery_charger.c: 44: }
 14516                           ;battery_charger.c: 45: }
 14517  0E87  0008               	return
 14518  0E88                     l3165:	
 14519                           
 14520                           ;battery_charger.c: 46: else
 14521                           ;battery_charger.c: 47: {
 14522                           ;battery_charger.c: 48: batteryState[z]=CHARGE;
 14523  0E88  3004               	movlw	4
 14524  0E89  0020               	movlb	0	; select bank0
 14525  0E8A  00BF               	movwf	??_Battery_State_Machine
 14526  0E8B  0844               	movf	Battery_State_Machine@z,w
 14527  0E8C  3ECE               	addlw	(low (_batteryState| 0))& (0+255)
 14528  0E8D  0086               	movwf	6
 14529  0E8E  0187               	clrf	7
 14530  0E8F  083F               	movf	??_Battery_State_Machine,w
 14531  0E90  0081               	movwf	1
 14532                           
 14533                           ;battery_charger.c: 49: Iref[z]=30;
 14534  0E91  3544               	lslf	Battery_State_Machine@z,w
 14535  0E92  3EC0               	addlw	(low (_Iref| 0))& (0+255)
 14536  0E93  0086               	movwf	6
 14537  0E94  0187               	clrf	7
 14538  0E95  301E               	movlw	30
 14539  0E96  3FC0               	movwi [0]fsr1
 14540  0E97  3000               	movlw	0
 14541  0E98  3FC1               	movwi [1]fsr1
 14542                           
 14543                           ;battery_charger.c: 50: }
 14544                           ;battery_charger.c: 51: }
 14545  0E99  0008               	return
 14546  0E9A                     l3167:	
 14547                           
 14548                           ;battery_charger.c: 52: else if(batteryState[z]==CHARGE)
 14549  0E9A  0844               	movf	Battery_State_Machine@z,w
 14550  0E9B  3ECE               	addlw	(low (_batteryState| 0))& (0+255)
 14551  0E9C  0086               	movwf	6
 14552  0E9D  0187               	clrf	7
 14553  0E9E  3004               	movlw	4
 14554  0E9F  0601               	xorwf	1,w
 14555  0EA0  1D03               	btfss	3,2
 14556  0EA1  2F61               	goto	l3187
 14557                           
 14558                           ;battery_charger.c: 53: {
 14559                           ;battery_charger.c: 54: Vref[z]=1425+(int16_t)((250-batteryTemp)*.24);
 14560  0EA2  0021               	movlb	1	; select bank1
 14561  0EA3  096D               	comf	_batteryTemp^(0+128),w
 14562  0EA4  0020               	movlb	0	; select bank0
 14563  0EA5  00BF               	movwf	??_Battery_State_Machine
 14564  0EA6  0021               	movlb	1	; select bank1
 14565  0EA7  096E               	comf	(_batteryTemp+1)^(0+128),w
 14566  0EA8  0020               	movlb	0	; select bank0
 14567  0EA9  00C0               	movwf	??_Battery_State_Machine+1
 14568  0EAA  0ABF               	incf	??_Battery_State_Machine,f
 14569  0EAB  1903               	skipnz
 14570  0EAC  0AC0               	incf	??_Battery_State_Machine+1,f
 14571  0EAD  083F               	movf	??_Battery_State_Machine,w
 14572  0EAE  3EFA               	addlw	250
 14573  0EAF  00F9               	movwf	___awtoft@c
 14574  0EB0  3000               	movlw	0
 14575  0EB1  3D40               	addwfc	??_Battery_State_Machine+1,w
 14576  0EB2  00FA               	movwf	___awtoft@c+1
 14577  0EB3  319F  2794  318E   	fcall	___awtoft
 14578  0EB6  0879               	movf	?___awtoft,w
 14579  0EB7  0020               	movlb	0	; select bank0
 14580  0EB8  00A4               	movwf	___ftmul@f2
 14581  0EB9  087A               	movf	?___awtoft+1,w
 14582  0EBA  00A5               	movwf	___ftmul@f2+1
 14583  0EBB  087B               	movf	?___awtoft+2,w
 14584  0EBC  00A6               	movwf	___ftmul@f2+2
 14585  0EBD  30C3               	movlw	195
 14586  0EBE  00A1               	movwf	___ftmul@f1
 14587  0EBF  3075               	movlw	117
 14588  0EC0  00A2               	movwf	___ftmul@f1+1
 14589  0EC1  303E               	movlw	62
 14590  0EC2  00A3               	movwf	___ftmul@f1+2
 14591  0EC3  3197  274C  318E   	fcall	___ftmul
 14592  0EC6  0020               	movlb	0	; select bank0
 14593  0EC7  0821               	movf	?___ftmul,w
 14594  0EC8  00B1               	movwf	___fttol@f1
 14595  0EC9  0822               	movf	?___ftmul+1,w
 14596  0ECA  00B2               	movwf	___fttol@f1+1
 14597  0ECB  0823               	movf	?___ftmul+2,w
 14598  0ECC  00B3               	movwf	___fttol@f1+2
 14599  0ECD  3180  2014  318E   	fcall	___fttol
 14600  0ED0  0020               	movlb	0	; select bank0
 14601  0ED1  0831               	movf	?___fttol,w
 14602  0ED2  3E91               	addlw	145
 14603  0ED3  00C1               	movwf	??_Battery_State_Machine+2
 14604  0ED4  3005               	movlw	5
 14605  0ED5  3D32               	addwfc	?___fttol+1,w
 14606  0ED6  00C2               	movwf	??_Battery_State_Machine+3
 14607  0ED7  3544               	lslf	Battery_State_Machine@z,w
 14608  0ED8  3EBC               	addlw	(low (_Vref| 0))& (0+255)
 14609  0ED9  0086               	movwf	6
 14610  0EDA  0187               	clrf	7
 14611  0EDB  0841               	movf	??_Battery_State_Machine+2,w
 14612  0EDC  3FC0               	movwi [0]fsr1
 14613  0EDD  0842               	movf	??_Battery_State_Machine+3,w
 14614  0EDE  3FC1               	movwi [1]fsr1
 14615                           
 14616                           ;battery_charger.c: 55: if(!(Imode[z]))
 14617  0EDF  0844               	movf	Battery_State_Machine@z,w
 14618  0EE0  3ECC               	addlw	(low (_Imode| 0))& (0+255)
 14619  0EE1  0086               	movwf	6
 14620  0EE2  0187               	clrf	7
 14621  0EE3  0801               	movf	1,w
 14622  0EE4  1D03               	btfss	3,2
 14623  0EE5  2F48               	goto	l3183
 14624                           
 14625                           ;battery_charger.c: 56: {
 14626                           ;battery_charger.c: 57: if(current[z] < Imin[z])
 14627  0EE6  3544               	lslf	Battery_State_Machine@z,w
 14628  0EE7  3E4D               	addlw	(low (_Imin| (0+256)))& (0+255)
 14629  0EE8  0086               	movwf	6
 14630  0EE9  3001               	movlw	1	; select bank2/3
 14631  0EEA  0087               	movwf	7
 14632  0EEB  3F40               	moviw [0]fsr1
 14633  0EEC  00BF               	movwf	??_Battery_State_Machine
 14634  0EED  3F41               	moviw [1]fsr1
 14635  0EEE  00C0               	movwf	??_Battery_State_Machine+1
 14636  0EEF  3544               	lslf	Battery_State_Machine@z,w
 14637  0EF0  3EA8               	addlw	(low (_current| 0))& (0+255)
 14638  0EF1  0086               	movwf	6
 14639  0EF2  0187               	clrf	7
 14640  0EF3  3F40               	moviw [0]fsr1
 14641  0EF4  00C1               	movwf	??_Battery_State_Machine+2
 14642  0EF5  3F41               	moviw [1]fsr1
 14643  0EF6  00C2               	movwf	??_Battery_State_Machine+3
 14644  0EF7  0842               	movf	??_Battery_State_Machine+3,w
 14645  0EF8  3A80               	xorlw	128
 14646  0EF9  00C3               	movwf	??_Battery_State_Machine+4
 14647  0EFA  0840               	movf	??_Battery_State_Machine+1,w
 14648  0EFB  3A80               	xorlw	128
 14649  0EFC  0243               	subwf	??_Battery_State_Machine+4,w
 14650  0EFD  1D03               	skipz
 14651  0EFE  2F01               	goto	u3715
 14652  0EFF  083F               	movf	??_Battery_State_Machine,w
 14653  0F00  0241               	subwf	??_Battery_State_Machine+2,w
 14654  0F01                     u3715:	
 14655  0F01  1803               	skipnc
 14656  0F02  2F2E               	goto	l3179
 14657                           
 14658                           ;battery_charger.c: 58: {
 14659                           ;battery_charger.c: 59: IminCount[z]-=2;
 14660  0F03  0020               	movlb	0	; select bank0
 14661  0F04  3544               	lslf	Battery_State_Machine@z,w
 14662  0F05  3E5B               	addlw	(low (_IminCount| 0))& (0+255)
 14663  0F06  0086               	movwf	6
 14664  0F07  0187               	clrf	7
 14665  0F08  3002               	movlw	2
 14666  0F09  0281               	subwf	1,f
 14667  0F0A  3141               	addfsr 1,1
 14668  0F0B  3000               	movlw	0
 14669  0F0C  3B81               	subwfb	1,f
 14670  0F0D  317F               	addfsr 1,-1
 14671                           
 14672                           ;battery_charger.c: 60: if(IminCount[z]<10)
 14673  0F0E  3544               	lslf	Battery_State_Machine@z,w
 14674  0F0F  3E5B               	addlw	(low (_IminCount| 0))& (0+255)
 14675  0F10  0086               	movwf	6
 14676  0F11  0187               	clrf	7
 14677  0F12  3F40               	moviw [0]fsr1
 14678  0F13  00BF               	movwf	??_Battery_State_Machine
 14679  0F14  3F41               	moviw [1]fsr1
 14680  0F15  00C0               	movwf	??_Battery_State_Machine+1
 14681  0F16  3000               	movlw	0
 14682  0F17  0240               	subwf	??_Battery_State_Machine+1,w
 14683  0F18  300A               	movlw	10
 14684  0F19  1903               	skipnz
 14685  0F1A  023F               	subwf	??_Battery_State_Machine,w
 14686  0F1B  1803               	skipnc
 14687  0F1C  0008               	return
 14688                           
 14689                           ;battery_charger.c: 61: {
 14690                           ;battery_charger.c: 62: batteryState[z] = FLOAT;
 14691  0F1D  3005               	movlw	5
 14692  0F1E  00BF               	movwf	??_Battery_State_Machine
 14693  0F1F  0844               	movf	Battery_State_Machine@z,w
 14694  0F20  3ECE               	addlw	(low (_batteryState| 0))& (0+255)
 14695  0F21  0086               	movwf	6
 14696  0F22  0187               	clrf	7
 14697  0F23  083F               	movf	??_Battery_State_Machine,w
 14698  0F24  0081               	movwf	1
 14699                           
 14700                           ;battery_charger.c: 63: IminCount[z]=10;
 14701  0F25  3544               	lslf	Battery_State_Machine@z,w
 14702  0F26  3E5B               	addlw	(low (_IminCount| 0))& (0+255)
 14703  0F27  0086               	movwf	6
 14704  0F28  0187               	clrf	7
 14705  0F29  300A               	movlw	10
 14706  0F2A  3FC0               	movwi [0]fsr1
 14707  0F2B  3000               	movlw	0
 14708  0F2C  3FC1               	movwi [1]fsr1
 14709                           
 14710                           ;battery_charger.c: 64: }
 14711                           ;battery_charger.c: 65: }
 14712  0F2D  0008               	return
 14713  0F2E                     l3179:	
 14714                           
 14715                           ;battery_charger.c: 66: else
 14716                           ;battery_charger.c: 67: {
 14717                           ;battery_charger.c: 68: if(IminCount[z]<600)IminCount[z]+=1;
 14718  0F2E  0020               	movlb	0	; select bank0
 14719  0F2F  3544               	lslf	Battery_State_Machine@z,w
 14720  0F30  3E5B               	addlw	(low (_IminCount| 0))& (0+255)
 14721  0F31  0086               	movwf	6
 14722  0F32  0187               	clrf	7
 14723  0F33  3F40               	moviw [0]fsr1
 14724  0F34  00BF               	movwf	??_Battery_State_Machine
 14725  0F35  3F41               	moviw [1]fsr1
 14726  0F36  00C0               	movwf	??_Battery_State_Machine+1
 14727  0F37  3002               	movlw	2
 14728  0F38  0240               	subwf	??_Battery_State_Machine+1,w
 14729  0F39  3058               	movlw	88
 14730  0F3A  1903               	skipnz
 14731  0F3B  023F               	subwf	??_Battery_State_Machine,w
 14732  0F3C  1803               	skipnc
 14733  0F3D  0008               	return
 14734  0F3E  3544               	lslf	Battery_State_Machine@z,w
 14735  0F3F  3E5B               	addlw	(low (_IminCount| 0))& (0+255)
 14736  0F40  0086               	movwf	6
 14737  0F41  0187               	clrf	7
 14738  0F42  3001               	movlw	1
 14739  0F43  0781               	addwf	1,f
 14740  0F44  3141               	addfsr 1,1
 14741  0F45  1803               	skipnc
 14742  0F46  0A81               	incf	1,f
 14743                           
 14744                           ;battery_charger.c: 69: }
 14745                           ;battery_charger.c: 70: }
 14746  0F47  0008               	return
 14747  0F48                     l3183:	
 14748                           
 14749                           ;battery_charger.c: 71: else if(IminCount[z]<600)IminCount[z]+=1;
 14750  0F48  3544               	lslf	Battery_State_Machine@z,w
 14751  0F49  3E5B               	addlw	(low (_IminCount| 0))& (0+255)
 14752  0F4A  0086               	movwf	6
 14753  0F4B  0187               	clrf	7
 14754  0F4C  3F40               	moviw [0]fsr1
 14755  0F4D  00BF               	movwf	??_Battery_State_Machine
 14756  0F4E  3F41               	moviw [1]fsr1
 14757  0F4F  00C0               	movwf	??_Battery_State_Machine+1
 14758  0F50  3002               	movlw	2
 14759  0F51  0240               	subwf	??_Battery_State_Machine+1,w
 14760  0F52  3058               	movlw	88
 14761  0F53  1903               	skipnz
 14762  0F54  023F               	subwf	??_Battery_State_Machine,w
 14763  0F55  1803               	skipnc
 14764  0F56  0008               	return
 14765  0F57  3544               	lslf	Battery_State_Machine@z,w
 14766  0F58  3E5B               	addlw	(low (_IminCount| 0))& (0+255)
 14767  0F59  0086               	movwf	6
 14768  0F5A  0187               	clrf	7
 14769  0F5B  3001               	movlw	1
 14770  0F5C  0781               	addwf	1,f
 14771  0F5D  3141               	addfsr 1,1
 14772  0F5E  1803               	skipnc
 14773  0F5F  0A81               	incf	1,f
 14774                           
 14775                           ;battery_charger.c: 72: }
 14776  0F60  0008               	return
 14777  0F61                     l3187:	
 14778                           
 14779                           ;battery_charger.c: 73: else if(batteryState[z] == FLOAT)
 14780  0F61  0844               	movf	Battery_State_Machine@z,w
 14781  0F62  3ECE               	addlw	(low (_batteryState| 0))& (0+255)
 14782  0F63  0086               	movwf	6
 14783  0F64  0187               	clrf	7
 14784  0F65  3005               	movlw	5
 14785  0F66  0601               	xorwf	1,w
 14786  0F67  1D03               	btfss	3,2
 14787  0F68  2FF0               	goto	l3209
 14788                           
 14789                           ;battery_charger.c: 74: {
 14790                           ;battery_charger.c: 75: otherState=(uint8_t)(1-z);
 14791  0F69  0344               	decf	Battery_State_Machine@z,w
 14792  0F6A  3AFF               	xorlw	255
 14793  0F6B  3E01               	addlw	1
 14794  0F6C  00BF               	movwf	??_Battery_State_Machine
 14795  0F6D  083F               	movf	??_Battery_State_Machine,w
 14796  0F6E  00EA               	movwf	_otherState
 14797                           
 14798                           ;battery_charger.c: 77: if(batteryState[otherState]==CHARGE)
 14799  0F6F  086A               	movf	_otherState,w
 14800  0F70  3ECE               	addlw	(low (_batteryState| 0))& (0+255)
 14801  0F71  0086               	movwf	6
 14802  0F72  0187               	clrf	7
 14803  0F73  3004               	movlw	4
 14804  0F74  0601               	xorwf	1,w
 14805  0F75  1D03               	btfss	3,2
 14806  0F76  2FA1               	goto	l3201
 14807                           
 14808                           ;battery_charger.c: 78: {
 14809                           ;battery_charger.c: 79: floatCount[z]+=1;
 14810  0F77  3001               	movlw	1
 14811  0F78  00BF               	movwf	??_Battery_State_Machine
 14812  0F79  0844               	movf	Battery_State_Machine@z,w
 14813  0F7A  3E61               	addlw	(low (_floatCount| 0))& (0+255)
 14814  0F7B  0086               	movwf	6
 14815  0F7C  0187               	clrf	7
 14816  0F7D  083F               	movf	??_Battery_State_Machine,w
 14817  0F7E  0781               	addwf	1,f
 14818                           
 14819                           ;battery_charger.c: 81: if(floatCount[z]>5)
 14820  0F7F  0844               	movf	Battery_State_Machine@z,w
 14821  0F80  3E61               	addlw	(low (_floatCount| 0))& (0+255)
 14822  0F81  0086               	movwf	6
 14823  0F82  0187               	clrf	7
 14824  0F83  3006               	movlw	6
 14825  0F84  0201               	subwf	1,w
 14826  0F85  1C03               	skipc
 14827  0F86  0008               	return
 14828                           
 14829                           ;battery_charger.c: 82: {
 14830                           ;battery_charger.c: 83: IminCount[z]=IminCount[otherState];
 14831  0F87  356A               	lslf	_otherState,w
 14832  0F88  3E5B               	addlw	(low (_IminCount| 0))& (0+255)
 14833  0F89  0086               	movwf	6
 14834  0F8A  0187               	clrf	7
 14835  0F8B  3544               	lslf	Battery_State_Machine@z,w
 14836  0F8C  3E5B               	addlw	(low (_IminCount| 0))& (0+255)
 14837  0F8D  0084               	movwf	4
 14838  0F8E  0185               	clrf	5
 14839  0F8F  3F40               	moviw [0]fsr1
 14840  0F90  3F80               	movwi [0]fsr0
 14841  0F91  3F41               	moviw [1]fsr1
 14842  0F92  3F81               	movwi [1]fsr0
 14843                           
 14844                           ;battery_charger.c: 84: floatCount[z]=0;
 14845  0F93  0844               	movf	Battery_State_Machine@z,w
 14846  0F94  3E61               	addlw	(low (_floatCount| 0))& (0+255)
 14847  0F95  0086               	movwf	6
 14848  0F96  0187               	clrf	7
 14849  0F97  0181               	clrf	1
 14850                           
 14851                           ;battery_charger.c: 85: batteryState[z] = CHARGE;
 14852  0F98  3004               	movlw	4
 14853  0F99  00BF               	movwf	??_Battery_State_Machine
 14854  0F9A  0844               	movf	Battery_State_Machine@z,w
 14855  0F9B  3ECE               	addlw	(low (_batteryState| 0))& (0+255)
 14856  0F9C  0086               	movwf	6
 14857  0F9D  0187               	clrf	7
 14858  0F9E  083F               	movf	??_Battery_State_Machine,w
 14859  0F9F  0081               	movwf	1
 14860                           
 14861                           ;battery_charger.c: 86: }
 14862                           ;battery_charger.c: 87: }
 14863  0FA0  0008               	return
 14864  0FA1                     l3201:	
 14865                           
 14866                           ;battery_charger.c: 88: else
 14867                           ;battery_charger.c: 89: {
 14868                           ;battery_charger.c: 90: Vref[z]=1350+(int16_t)((250-batteryTemp)*.24);
 14869  0FA1  0021               	movlb	1	; select bank1
 14870  0FA2  096D               	comf	_batteryTemp^(0+128),w
 14871  0FA3  0020               	movlb	0	; select bank0
 14872  0FA4  00BF               	movwf	??_Battery_State_Machine
 14873  0FA5  0021               	movlb	1	; select bank1
 14874  0FA6  096E               	comf	(_batteryTemp+1)^(0+128),w
 14875  0FA7  0020               	movlb	0	; select bank0
 14876  0FA8  00C0               	movwf	??_Battery_State_Machine+1
 14877  0FA9  0ABF               	incf	??_Battery_State_Machine,f
 14878  0FAA  1903               	skipnz
 14879  0FAB  0AC0               	incf	??_Battery_State_Machine+1,f
 14880  0FAC  083F               	movf	??_Battery_State_Machine,w
 14881  0FAD  3EFA               	addlw	250
 14882  0FAE  00F9               	movwf	___awtoft@c
 14883  0FAF  3000               	movlw	0
 14884  0FB0  3D40               	addwfc	??_Battery_State_Machine+1,w
 14885  0FB1  00FA               	movwf	___awtoft@c+1
 14886  0FB2  319F  2794  318E   	fcall	___awtoft
 14887  0FB5  0879               	movf	?___awtoft,w
 14888  0FB6  0020               	movlb	0	; select bank0
 14889  0FB7  00A4               	movwf	___ftmul@f2
 14890  0FB8  087A               	movf	?___awtoft+1,w
 14891  0FB9  00A5               	movwf	___ftmul@f2+1
 14892  0FBA  087B               	movf	?___awtoft+2,w
 14893  0FBB  00A6               	movwf	___ftmul@f2+2
 14894  0FBC  30C3               	movlw	195
 14895  0FBD  00A1               	movwf	___ftmul@f1
 14896  0FBE  3075               	movlw	117
 14897  0FBF  00A2               	movwf	___ftmul@f1+1
 14898  0FC0  303E               	movlw	62
 14899  0FC1  00A3               	movwf	___ftmul@f1+2
 14900  0FC2  3197  274C  318E   	fcall	___ftmul
 14901  0FC5  0020               	movlb	0	; select bank0
 14902  0FC6  0821               	movf	?___ftmul,w
 14903  0FC7  00B1               	movwf	___fttol@f1
 14904  0FC8  0822               	movf	?___ftmul+1,w
 14905  0FC9  00B2               	movwf	___fttol@f1+1
 14906  0FCA  0823               	movf	?___ftmul+2,w
 14907  0FCB  00B3               	movwf	___fttol@f1+2
 14908  0FCC  3180  2014         	fcall	___fttol
 14909  0FCE  0020               	movlb	0	; select bank0
 14910  0FCF  0831               	movf	?___fttol,w
 14911  0FD0  3E46               	addlw	70
 14912  0FD1  00C1               	movwf	??_Battery_State_Machine+2
 14913  0FD2  3005               	movlw	5
 14914  0FD3  3D32               	addwfc	?___fttol+1,w
 14915  0FD4  00C2               	movwf	??_Battery_State_Machine+3
 14916  0FD5  3544               	lslf	Battery_State_Machine@z,w
 14917  0FD6  3EBC               	addlw	(low (_Vref| 0))& (0+255)
 14918  0FD7  0086               	movwf	6
 14919  0FD8  0187               	clrf	7
 14920  0FD9  0841               	movf	??_Battery_State_Machine+2,w
 14921  0FDA  3FC0               	movwi [0]fsr1
 14922  0FDB  0842               	movf	??_Battery_State_Machine+3,w
 14923  0FDC  3FC1               	movwi [1]fsr1
 14924                           
 14925                           ;battery_charger.c: 91: Iref[z]=15;
 14926  0FDD  3544               	lslf	Battery_State_Machine@z,w
 14927  0FDE  3EC0               	addlw	(low (_Iref| 0))& (0+255)
 14928  0FDF  0086               	movwf	6
 14929  0FE0  0187               	clrf	7
 14930  0FE1  300F               	movlw	15
 14931  0FE2  3FC0               	movwi [0]fsr1
 14932  0FE3  3000               	movlw	0
 14933  0FE4  3FC1               	movwi [1]fsr1
 14934                           
 14935                           ;battery_charger.c: 92: Imode[z]=0;
 14936  0FE5  0844               	movf	Battery_State_Machine@z,w
 14937  0FE6  3ECC               	addlw	(low (_Imode| 0))& (0+255)
 14938  0FE7  0086               	movwf	6
 14939  0FE8  0187               	clrf	7
 14940  0FE9  0181               	clrf	1
 14941                           
 14942                           ;battery_charger.c: 93: floatCount[z]=0;
 14943  0FEA  0844               	movf	Battery_State_Machine@z,w
 14944  0FEB  3E61               	addlw	(low (_floatCount| 0))& (0+255)
 14945  0FEC  0086               	movwf	6
 14946  0FED  0187               	clrf	7
 14947  0FEE  0181               	clrf	1
 14948                           
 14949                           ;battery_charger.c: 94: }
 14950                           ;battery_charger.c: 95: }
 14951  0FEF  0008               	return
 14952  0FF0                     l3209:	
 14953                           
 14954                           ;battery_charger.c: 96: else
 14955                           ;battery_charger.c: 97: if(batteryState[z] == FAULT)
 14956  0FF0  0844               	movf	Battery_State_Machine@z,w
 14957  0FF1  3ECE               	addlw	(low (_batteryState| 0))& (0+255)
 14958  0FF2  0086               	movwf	6
 14959  0FF3  0187               	clrf	7
 14960  0FF4  0301               	decf	1,w
 14961  0FF5  1D03               	btfss	3,2
 14962  0FF6  0008               	return
 14963                           
 14964                           ;battery_charger.c: 98: {
 14965                           ;battery_charger.c: 99: batteryState[z]=PRECHARGE;
 14966  0FF7  3003               	movlw	3
 14967  0FF8  00BF               	movwf	??_Battery_State_Machine
 14968  0FF9  0844               	movf	Battery_State_Machine@z,w
 14969  0FFA  3ECE               	addlw	(low (_batteryState| 0))& (0+255)
 14970  0FFB  0086               	movwf	6
 14971  0FFC  0187               	clrf	7
 14972  0FFD  083F               	movf	??_Battery_State_Machine,w
 14973  0FFE  0081               	movwf	1
 14974  0FFF  0008               	return
 14975  1000                     __end_of_Battery_State_Machine:	
 14976                           
 14977                           	psect	text41
 14978  0014                     __ptext41:	
 14979 ;; *************** function ___fttol *****************
 14980 ;; Defined at:
 14981 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
 14982 ;; Parameters:    Size  Location     Type
 14983 ;;  f1              3   17[BANK0 ] float 
 14984 ;; Auto vars:     Size  Location     Type
 14985 ;;  lval            4   26[BANK0 ] unsigned long 
 14986 ;;  exp1            1   30[BANK0 ] unsigned char 
 14987 ;;  sign1           1   25[BANK0 ] unsigned char 
 14988 ;; Return value:  Size  Location     Type
 14989 ;;                  4   17[BANK0 ] long 
 14990 ;; Registers used:
 14991 ;;		wreg, status,2, status,0
 14992 ;; Tracked objects:
 14993 ;;		On entry : 0/0
 14994 ;;		On exit  : 0/0
 14995 ;;		Unchanged: 0/0
 14996 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14997 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14998 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14999 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15000 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15001 ;;Total ram usage:       14 bytes
 15002 ;; Hardware stack levels used:    1
 15003 ;; This function calls:
 15004 ;;		Nothing
 15005 ;; This function is called by:
 15006 ;;		_main
 15007 ;;		_calculateCurrent0
 15008 ;;		_calculateCurrent3
 15009 ;;		_Init_Battery_State_Machine
 15010 ;;		_Battery_State_Machine
 15011 ;;		_cc_cv_mode
 15012 ;;		_tempCalc
 15013 ;; This function uses a non-reentrant model
 15014 ;;
 15015                           
 15016                           
 15017                           ;psect for function ___fttol
 15018  0014                     ___fttol:	
 15019                           
 15020                           ;incstack = 0
 15021                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 15022  0014  0020               	movlb	0	; select bank0
 15023  0015  0831               	movf	___fttol@f1,w
 15024  0016  00B5               	movwf	??___fttol
 15025  0017  0832               	movf	___fttol@f1+1,w
 15026  0018  00B6               	movwf	??___fttol+1
 15027  0019  0833               	movf	___fttol@f1+2,w
 15028  001A  00B7               	movwf	??___fttol+2
 15029  001B  1003               	clrc
 15030  001C  0D36               	rlf	??___fttol+1,w
 15031  001D  0D37               	rlf	??___fttol+2,w
 15032  001E  00B8               	movwf	??___fttol+3
 15033  001F  0838               	movf	??___fttol+3,w
 15034  0020  00BE               	movwf	___fttol@exp1
 15035  0021  083E               	movf	___fttol@exp1,w
 15036  0022  1D03               	btfss	3,2
 15037  0023  282D               	goto	l2583
 15038  0024  3000               	movlw	0
 15039  0025  00B4               	movwf	?___fttol+3
 15040  0026  3000               	movlw	0
 15041  0027  00B3               	movwf	?___fttol+2
 15042  0028  3000               	movlw	0
 15043  0029  00B2               	movwf	?___fttol+1
 15044  002A  3000               	movlw	0
 15045  002B  00B1               	movwf	?___fttol
 15046  002C  0008               	return
 15047  002D                     l2583:	
 15048  002D  0831               	movf	___fttol@f1,w
 15049  002E  00B5               	movwf	??___fttol
 15050  002F  0832               	movf	___fttol@f1+1,w
 15051  0030  00B6               	movwf	??___fttol+1
 15052  0031  0833               	movf	___fttol@f1+2,w
 15053  0032  00B7               	movwf	??___fttol+2
 15054  0033  3017               	movlw	23
 15055  0034                     u2785:	
 15056  0034  36B7               	lsrf	??___fttol+2,f
 15057  0035  0CB6               	rrf	??___fttol+1,f
 15058  0036  0CB5               	rrf	??___fttol,f
 15059  0037  0B89               	decfsz	9,f
 15060  0038  2834               	goto	u2785
 15061  0039  0835               	movf	??___fttol,w
 15062  003A  00B8               	movwf	??___fttol+3
 15063  003B  0838               	movf	??___fttol+3,w
 15064  003C  00B9               	movwf	___fttol@sign1
 15065  003D  17B2               	bsf	___fttol@f1+1,7
 15066  003E  30FF               	movlw	255
 15067  003F  05B1               	andwf	___fttol@f1,f
 15068  0040  30FF               	movlw	255
 15069  0041  05B2               	andwf	___fttol@f1+1,f
 15070  0042  3000               	movlw	0
 15071  0043  05B3               	andwf	___fttol@f1+2,f
 15072  0044  0831               	movf	___fttol@f1,w
 15073  0045  00BA               	movwf	___fttol@lval
 15074  0046  0832               	movf	___fttol@f1+1,w
 15075  0047  00BB               	movwf	___fttol@lval+1
 15076  0048  0833               	movf	___fttol@f1+2,w
 15077  0049  00BC               	movwf	___fttol@lval+2
 15078  004A  01BD               	clrf	___fttol@lval+3
 15079  004B  308E               	movlw	142
 15080  004C  02BE               	subwf	___fttol@exp1,f
 15081  004D  1FBE               	btfss	___fttol@exp1,7
 15082  004E  286B               	goto	l2603
 15083  004F  083E               	movf	___fttol@exp1,w
 15084  0050  3A80               	xorlw	128
 15085  0051  3E8F               	addlw	143
 15086  0052  1803               	skipnc
 15087  0053  285D               	goto	l2601
 15088  0054  3000               	movlw	0
 15089  0055  00B4               	movwf	?___fttol+3
 15090  0056  3000               	movlw	0
 15091  0057  00B3               	movwf	?___fttol+2
 15092  0058  3000               	movlw	0
 15093  0059  00B2               	movwf	?___fttol+1
 15094  005A  3000               	movlw	0
 15095  005B  00B1               	movwf	?___fttol
 15096  005C  0008               	return
 15097  005D                     l2601:	
 15098  005D  3001               	movlw	1
 15099  005E                     u2815:	
 15100  005E  36BD               	lsrf	___fttol@lval+3,f
 15101  005F  0CBC               	rrf	___fttol@lval+2,f
 15102  0060  0CBB               	rrf	___fttol@lval+1,f
 15103  0061  0CBA               	rrf	___fttol@lval,f
 15104  0062  0B89               	decfsz	9,f
 15105  0063  285E               	goto	u2815
 15106  0064  3001               	movlw	1
 15107  0065  00B5               	movwf	??___fttol
 15108  0066  0835               	movf	??___fttol,w
 15109  0067  07BE               	addwf	___fttol@exp1,f
 15110  0068  1903               	btfsc	3,2
 15111  0069  2884               	goto	l2611
 15112  006A  285D               	goto	l2601
 15113  006B                     l2603:	
 15114  006B  3018               	movlw	24
 15115  006C  023E               	subwf	___fttol@exp1,w
 15116  006D  1C03               	skipc
 15117  006E  2881               	goto	l875
 15118  006F  3000               	movlw	0
 15119  0070  00B4               	movwf	?___fttol+3
 15120  0071  3000               	movlw	0
 15121  0072  00B3               	movwf	?___fttol+2
 15122  0073  3000               	movlw	0
 15123  0074  00B2               	movwf	?___fttol+1
 15124  0075  3000               	movlw	0
 15125  0076  00B1               	movwf	?___fttol
 15126  0077  0008               	return
 15127  0078                     l2609:	
 15128  0078  3001               	movlw	1
 15129  0079                     u2845:	
 15130  0079  35BA               	lslf	___fttol@lval,f
 15131  007A  0DBB               	rlf	___fttol@lval+1,f
 15132  007B  0DBC               	rlf	___fttol@lval+2,f
 15133  007C  0DBD               	rlf	___fttol@lval+3,f
 15134  007D  0B89               	decfsz	9,f
 15135  007E  2879               	goto	u2845
 15136  007F  3001               	movlw	1
 15137  0080  02BE               	subwf	___fttol@exp1,f
 15138  0081                     l875:	
 15139  0081  083E               	movf	___fttol@exp1,w
 15140  0082  1D03               	btfss	3,2
 15141  0083  2878               	goto	l2609
 15142  0084                     l2611:	
 15143  0084  0839               	movf	___fttol@sign1,w
 15144  0085  1903               	btfsc	3,2
 15145  0086  2892               	goto	l2615
 15146  0087  09BA               	comf	___fttol@lval,f
 15147  0088  09BB               	comf	___fttol@lval+1,f
 15148  0089  09BC               	comf	___fttol@lval+2,f
 15149  008A  09BD               	comf	___fttol@lval+3,f
 15150  008B  0ABA               	incf	___fttol@lval,f
 15151  008C  1903               	skipnz
 15152  008D  0ABB               	incf	___fttol@lval+1,f
 15153  008E  1903               	skipnz
 15154  008F  0ABC               	incf	___fttol@lval+2,f
 15155  0090  1903               	skipnz
 15156  0091  0ABD               	incf	___fttol@lval+3,f
 15157  0092                     l2615:	
 15158  0092  083D               	movf	___fttol@lval+3,w
 15159  0093  00B4               	movwf	?___fttol+3
 15160  0094  083C               	movf	___fttol@lval+2,w
 15161  0095  00B3               	movwf	?___fttol+2
 15162  0096  083B               	movf	___fttol@lval+1,w
 15163  0097  00B2               	movwf	?___fttol+1
 15164  0098  083A               	movf	___fttol@lval,w
 15165  0099  00B1               	movwf	?___fttol
 15166  009A  0008               	return
 15167  009B                     __end_of___fttol:	
 15168                           
 15169                           	psect	text42
 15170  174C                     __ptext42:	
 15171 ;; *************** function ___ftmul *****************
 15172 ;; Defined at:
 15173 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
 15174 ;; Parameters:    Size  Location     Type
 15175 ;;  f1              3    1[BANK0 ] float 
 15176 ;;  f2              3    4[BANK0 ] float 
 15177 ;; Auto vars:     Size  Location     Type
 15178 ;;  f3_as_produc    3   12[BANK0 ] unsigned um
 15179 ;;  sign            1   16[BANK0 ] unsigned char 
 15180 ;;  cntr            1   15[BANK0 ] unsigned char 
 15181 ;;  exp             1   11[BANK0 ] unsigned char 
 15182 ;; Return value:  Size  Location     Type
 15183 ;;                  3    1[BANK0 ] float 
 15184 ;; Registers used:
 15185 ;;		wreg, status,2, status,0, pclath, cstack
 15186 ;; Tracked objects:
 15187 ;;		On entry : 0/0
 15188 ;;		On exit  : 0/0
 15189 ;;		Unchanged: 0/0
 15190 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15191 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15192 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15193 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15194 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15195 ;;Total ram usage:       16 bytes
 15196 ;; Hardware stack levels used:    1
 15197 ;; Hardware stack levels required when called:    1
 15198 ;; This function calls:
 15199 ;;		___ftpack
 15200 ;; This function is called by:
 15201 ;;		_main
 15202 ;;		_Init_Battery_State_Machine
 15203 ;;		_Battery_State_Machine
 15204 ;;		_cc_cv_mode
 15205 ;;		_tempCalc
 15206 ;;		_log
 15207 ;;		_eval_poly
 15208 ;; This function uses a non-reentrant model
 15209 ;;
 15210                           
 15211                           
 15212                           ;psect for function ___ftmul
 15213  174C                     ___ftmul:	
 15214                           
 15215                           ;incstack = 0
 15216                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 15217  174C  0020               	movlb	0	; select bank0
 15218  174D  0821               	movf	___ftmul@f1,w
 15219  174E  00A7               	movwf	??___ftmul
 15220  174F  0822               	movf	___ftmul@f1+1,w
 15221  1750  00A8               	movwf	??___ftmul+1
 15222  1751  0823               	movf	___ftmul@f1+2,w
 15223  1752  00A9               	movwf	??___ftmul+2
 15224  1753  1003               	clrc
 15225  1754  0D28               	rlf	??___ftmul+1,w
 15226  1755  0D29               	rlf	??___ftmul+2,w
 15227  1756  00AA               	movwf	??___ftmul+3
 15228  1757  082A               	movf	??___ftmul+3,w
 15229  1758  00AB               	movwf	___ftmul@exp
 15230  1759  082B               	movf	___ftmul@exp,w
 15231  175A  1D03               	btfss	3,2
 15232  175B  2F63               	goto	l2499
 15233  175C  3000               	movlw	0
 15234  175D  00A1               	movwf	?___ftmul
 15235  175E  3000               	movlw	0
 15236  175F  00A2               	movwf	?___ftmul+1
 15237  1760  3000               	movlw	0
 15238  1761  00A3               	movwf	?___ftmul+2
 15239  1762  0008               	return
 15240  1763                     l2499:	
 15241  1763  0824               	movf	___ftmul@f2,w
 15242  1764  00A7               	movwf	??___ftmul
 15243  1765  0825               	movf	___ftmul@f2+1,w
 15244  1766  00A8               	movwf	??___ftmul+1
 15245  1767  0826               	movf	___ftmul@f2+2,w
 15246  1768  00A9               	movwf	??___ftmul+2
 15247  1769  1003               	clrc
 15248  176A  0D28               	rlf	??___ftmul+1,w
 15249  176B  0D29               	rlf	??___ftmul+2,w
 15250  176C  00AA               	movwf	??___ftmul+3
 15251  176D  082A               	movf	??___ftmul+3,w
 15252  176E  00B0               	movwf	___ftmul@sign
 15253  176F  0830               	movf	___ftmul@sign,w
 15254  1770  1D03               	btfss	3,2
 15255  1771  2F79               	goto	l2505
 15256  1772  3000               	movlw	0
 15257  1773  00A1               	movwf	?___ftmul
 15258  1774  3000               	movlw	0
 15259  1775  00A2               	movwf	?___ftmul+1
 15260  1776  3000               	movlw	0
 15261  1777  00A3               	movwf	?___ftmul+2
 15262  1778  0008               	return
 15263  1779                     l2505:	
 15264  1779  0830               	movf	___ftmul@sign,w
 15265  177A  3E7B               	addlw	123
 15266  177B  00A7               	movwf	??___ftmul
 15267  177C  0827               	movf	??___ftmul,w
 15268  177D  07AB               	addwf	___ftmul@exp,f
 15269  177E  0821               	movf	___ftmul@f1,w
 15270  177F  00A7               	movwf	??___ftmul
 15271  1780  0822               	movf	___ftmul@f1+1,w
 15272  1781  00A8               	movwf	??___ftmul+1
 15273  1782  0823               	movf	___ftmul@f1+2,w
 15274  1783  00A9               	movwf	??___ftmul+2
 15275  1784  3010               	movlw	16
 15276  1785                     u2635:	
 15277  1785  36A9               	lsrf	??___ftmul+2,f
 15278  1786  0CA8               	rrf	??___ftmul+1,f
 15279  1787  0CA7               	rrf	??___ftmul,f
 15280  1788  0B89               	decfsz	9,f
 15281  1789  2F85               	goto	u2635
 15282  178A  0827               	movf	??___ftmul,w
 15283  178B  00AA               	movwf	??___ftmul+3
 15284  178C  082A               	movf	??___ftmul+3,w
 15285  178D  00B0               	movwf	___ftmul@sign
 15286  178E  0824               	movf	___ftmul@f2,w
 15287  178F  00A7               	movwf	??___ftmul
 15288  1790  0825               	movf	___ftmul@f2+1,w
 15289  1791  00A8               	movwf	??___ftmul+1
 15290  1792  0826               	movf	___ftmul@f2+2,w
 15291  1793  00A9               	movwf	??___ftmul+2
 15292  1794  3010               	movlw	16
 15293  1795                     u2645:	
 15294  1795  36A9               	lsrf	??___ftmul+2,f
 15295  1796  0CA8               	rrf	??___ftmul+1,f
 15296  1797  0CA7               	rrf	??___ftmul,f
 15297  1798  0B89               	decfsz	9,f
 15298  1799  2F95               	goto	u2645
 15299  179A  0827               	movf	??___ftmul,w
 15300  179B  00AA               	movwf	??___ftmul+3
 15301  179C  082A               	movf	??___ftmul+3,w
 15302  179D  06B0               	xorwf	___ftmul@sign,f
 15303  179E  3080               	movlw	128
 15304  179F  00A7               	movwf	??___ftmul
 15305  17A0  0827               	movf	??___ftmul,w
 15306  17A1  05B0               	andwf	___ftmul@sign,f
 15307  17A2  17A2               	bsf	___ftmul@f1+1,7
 15308  17A3  17A5               	bsf	___ftmul@f2+1,7
 15309  17A4  30FF               	movlw	255
 15310  17A5  05A4               	andwf	___ftmul@f2,f
 15311  17A6  30FF               	movlw	255
 15312  17A7  05A5               	andwf	___ftmul@f2+1,f
 15313  17A8  3000               	movlw	0
 15314  17A9  05A6               	andwf	___ftmul@f2+2,f
 15315  17AA  3000               	movlw	0
 15316  17AB  00AC               	movwf	___ftmul@f3_as_product
 15317  17AC  3000               	movlw	0
 15318  17AD  00AD               	movwf	___ftmul@f3_as_product+1
 15319  17AE  3000               	movlw	0
 15320  17AF  00AE               	movwf	___ftmul@f3_as_product+2
 15321  17B0  3007               	movlw	7
 15322  17B1  00A7               	movwf	??___ftmul
 15323  17B2  0827               	movf	??___ftmul,w
 15324  17B3  00AF               	movwf	___ftmul@cntr
 15325  17B4                     l2517:	
 15326  17B4  1C21               	btfss	___ftmul@f1,0
 15327  17B5  2FBC               	goto	l2521
 15328  17B6  0824               	movf	___ftmul@f2,w
 15329  17B7  07AC               	addwf	___ftmul@f3_as_product,f
 15330  17B8  0825               	movf	___ftmul@f2+1,w
 15331  17B9  3DAD               	addwfc	___ftmul@f3_as_product+1,f
 15332  17BA  0826               	movf	___ftmul@f2+2,w
 15333  17BB  3DAE               	addwfc	___ftmul@f3_as_product+2,f
 15334  17BC                     l2521:	
 15335  17BC  3001               	movlw	1
 15336  17BD                     u2665:	
 15337  17BD  36A3               	lsrf	___ftmul@f1+2,f
 15338  17BE  0CA2               	rrf	___ftmul@f1+1,f
 15339  17BF  0CA1               	rrf	___ftmul@f1,f
 15340  17C0  0B89               	decfsz	9,f
 15341  17C1  2FBD               	goto	u2665
 15342  17C2  3001               	movlw	1
 15343  17C3                     u2675:	
 15344  17C3  35A4               	lslf	___ftmul@f2,f
 15345  17C4  0DA5               	rlf	___ftmul@f2+1,f
 15346  17C5  0DA6               	rlf	___ftmul@f2+2,f
 15347  17C6  0B89               	decfsz	9,f
 15348  17C7  2FC3               	goto	u2675
 15349  17C8  3001               	movlw	1
 15350  17C9  02AF               	subwf	___ftmul@cntr,f
 15351  17CA  1D03               	btfss	3,2
 15352  17CB  2FB4               	goto	l2517
 15353  17CC  3009               	movlw	9
 15354  17CD  00A7               	movwf	??___ftmul
 15355  17CE  0827               	movf	??___ftmul,w
 15356  17CF  00AF               	movwf	___ftmul@cntr
 15357  17D0                     l2529:	
 15358  17D0  1C21               	btfss	___ftmul@f1,0
 15359  17D1  2FD8               	goto	l2533
 15360  17D2  0824               	movf	___ftmul@f2,w
 15361  17D3  07AC               	addwf	___ftmul@f3_as_product,f
 15362  17D4  0825               	movf	___ftmul@f2+1,w
 15363  17D5  3DAD               	addwfc	___ftmul@f3_as_product+1,f
 15364  17D6  0826               	movf	___ftmul@f2+2,w
 15365  17D7  3DAE               	addwfc	___ftmul@f3_as_product+2,f
 15366  17D8                     l2533:	
 15367  17D8  3001               	movlw	1
 15368  17D9                     u2705:	
 15369  17D9  36A3               	lsrf	___ftmul@f1+2,f
 15370  17DA  0CA2               	rrf	___ftmul@f1+1,f
 15371  17DB  0CA1               	rrf	___ftmul@f1,f
 15372  17DC  0B89               	decfsz	9,f
 15373  17DD  2FD9               	goto	u2705
 15374  17DE  3001               	movlw	1
 15375  17DF                     u2715:	
 15376  17DF  36AE               	lsrf	___ftmul@f3_as_product+2,f
 15377  17E0  0CAD               	rrf	___ftmul@f3_as_product+1,f
 15378  17E1  0CAC               	rrf	___ftmul@f3_as_product,f
 15379  17E2  0B89               	decfsz	9,f
 15380  17E3  2FDF               	goto	u2715
 15381  17E4  3001               	movlw	1
 15382  17E5  02AF               	subwf	___ftmul@cntr,f
 15383  17E6  1D03               	btfss	3,2
 15384  17E7  2FD0               	goto	l2529
 15385  17E8  082C               	movf	___ftmul@f3_as_product,w
 15386  17E9  00F0               	movwf	___ftpack@arg
 15387  17EA  082D               	movf	___ftmul@f3_as_product+1,w
 15388  17EB  00F1               	movwf	___ftpack@arg+1
 15389  17EC  082E               	movf	___ftmul@f3_as_product+2,w
 15390  17ED  00F2               	movwf	___ftpack@arg+2
 15391  17EE  082B               	movf	___ftmul@exp,w
 15392  17EF  00A7               	movwf	??___ftmul
 15393  17F0  0827               	movf	??___ftmul,w
 15394  17F1  00F3               	movwf	___ftpack@exp
 15395  17F2  0830               	movf	___ftmul@sign,w
 15396  17F3  00A8               	movwf	??___ftmul+1
 15397  17F4  0828               	movf	??___ftmul+1,w
 15398  17F5  00F4               	movwf	___ftpack@sign
 15399  17F6  3194  2423         	fcall	___ftpack
 15400  17F8  0870               	movf	?___ftpack,w
 15401  17F9  0020               	movlb	0	; select bank0
 15402  17FA  00A1               	movwf	?___ftmul
 15403  17FB  0871               	movf	?___ftpack+1,w
 15404  17FC  00A2               	movwf	?___ftmul+1
 15405  17FD  0872               	movf	?___ftpack+2,w
 15406  17FE  00A3               	movwf	?___ftmul+2
 15407  17FF  0008               	return
 15408  1800                     __end_of___ftmul:	
 15409                           
 15410                           	psect	text43
 15411  1F94                     __ptext43:	
 15412 ;; *************** function ___awtoft *****************
 15413 ;; Defined at:
 15414 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
 15415 ;; Parameters:    Size  Location     Type
 15416 ;;  c               2    9[COMMON] int 
 15417 ;; Auto vars:     Size  Location     Type
 15418 ;;  sign            1    0[BANK0 ] unsigned char 
 15419 ;; Return value:  Size  Location     Type
 15420 ;;                  3    9[COMMON] float 
 15421 ;; Registers used:
 15422 ;;		wreg, status,2, status,0, pclath, cstack
 15423 ;; Tracked objects:
 15424 ;;		On entry : 0/0
 15425 ;;		On exit  : 0/0
 15426 ;;		Unchanged: 0/0
 15427 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15428 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15429 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15430 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15431 ;;      Totals:         5       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15432 ;;Total ram usage:        6 bytes
 15433 ;; Hardware stack levels used:    1
 15434 ;; Hardware stack levels required when called:    1
 15435 ;; This function calls:
 15436 ;;		___ftpack
 15437 ;; This function is called by:
 15438 ;;		_main
 15439 ;;		_calculateCurrent0
 15440 ;;		_calculateCurrent3
 15441 ;;		_Init_Battery_State_Machine
 15442 ;;		_Battery_State_Machine
 15443 ;;		_cc_cv_mode
 15444 ;;		_tempCalc
 15445 ;;		_log
 15446 ;; This function uses a non-reentrant model
 15447 ;;
 15448                           
 15449                           
 15450                           ;psect for function ___awtoft
 15451  1F94                     ___awtoft:	
 15452                           
 15453                           ;incstack = 0
 15454                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 15455  1F94  0020               	movlb	0	; select bank0
 15456  1F95  01A0               	clrf	___awtoft@sign
 15457  1F96  1FFA               	btfss	___awtoft@c+1,7
 15458  1F97  2F9F               	goto	l2553
 15459  1F98  09F9               	comf	___awtoft@c,f
 15460  1F99  09FA               	comf	___awtoft@c+1,f
 15461  1F9A  0AF9               	incf	___awtoft@c,f
 15462  1F9B  1903               	skipnz
 15463  1F9C  0AFA               	incf	___awtoft@c+1,f
 15464  1F9D  01A0               	clrf	___awtoft@sign
 15465  1F9E  0AA0               	incf	___awtoft@sign,f
 15466  1F9F                     l2553:	
 15467  1F9F  0879               	movf	___awtoft@c,w
 15468  1FA0  00F0               	movwf	___ftpack@arg
 15469  1FA1  087A               	movf	___awtoft@c+1,w
 15470  1FA2  00F1               	movwf	___ftpack@arg+1
 15471  1FA3  01F2               	clrf	___ftpack@arg+2
 15472  1FA4  308E               	movlw	142
 15473  1FA5  00FC               	movwf	??___awtoft
 15474  1FA6  087C               	movf	??___awtoft,w
 15475  1FA7  00F3               	movwf	___ftpack@exp
 15476  1FA8  0820               	movf	___awtoft@sign,w
 15477  1FA9  00FD               	movwf	??___awtoft+1
 15478  1FAA  087D               	movf	??___awtoft+1,w
 15479  1FAB  00F4               	movwf	___ftpack@sign
 15480  1FAC  3194  2423         	fcall	___ftpack
 15481  1FAE  0870               	movf	?___ftpack,w
 15482  1FAF  00F9               	movwf	?___awtoft
 15483  1FB0  0871               	movf	?___ftpack+1,w
 15484  1FB1  00FA               	movwf	?___awtoft+1
 15485  1FB2  0872               	movf	?___ftpack+2,w
 15486  1FB3  00FB               	movwf	?___awtoft+2
 15487  1FB4  0008               	return
 15488  1FB5                     __end_of___awtoft:	
 15489                           
 15490                           	psect	text44
 15491  1423                     __ptext44:	
 15492 ;; *************** function ___ftpack *****************
 15493 ;; Defined at:
 15494 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
 15495 ;; Parameters:    Size  Location     Type
 15496 ;;  arg             3    0[COMMON] unsigned um
 15497 ;;  exp             1    3[COMMON] unsigned char 
 15498 ;;  sign            1    4[COMMON] unsigned char 
 15499 ;; Auto vars:     Size  Location     Type
 15500 ;;		None
 15501 ;; Return value:  Size  Location     Type
 15502 ;;                  3    0[COMMON] float 
 15503 ;; Registers used:
 15504 ;;		wreg, status,2, status,0
 15505 ;; Tracked objects:
 15506 ;;		On entry : 0/0
 15507 ;;		On exit  : 0/0
 15508 ;;		Unchanged: 0/0
 15509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15510 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15511 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15512 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15513 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15514 ;;Total ram usage:        8 bytes
 15515 ;; Hardware stack levels used:    1
 15516 ;; This function calls:
 15517 ;;		Nothing
 15518 ;; This function is called by:
 15519 ;;		___awtoft
 15520 ;;		___ftadd
 15521 ;;		___ftdiv
 15522 ;;		___ftmul
 15523 ;; This function uses a non-reentrant model
 15524 ;;
 15525                           
 15526                           
 15527                           ;psect for function ___ftpack
 15528  1423                     ___ftpack:	
 15529                           
 15530                           ;incstack = 0
 15531                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 15532  1423  0873               	movf	___ftpack@exp,w
 15533  1424  1903               	btfsc	3,2
 15534  1425  2C2B               	goto	l2359
 15535  1426  0872               	movf	___ftpack@arg+2,w
 15536  1427  0471               	iorwf	___ftpack@arg+1,w
 15537  1428  0470               	iorwf	___ftpack@arg,w
 15538  1429  1D03               	skipz
 15539  142A  2C3C               	goto	l2365
 15540  142B                     l2359:	
 15541  142B  3000               	movlw	0
 15542  142C  00F0               	movwf	?___ftpack
 15543  142D  3000               	movlw	0
 15544  142E  00F1               	movwf	?___ftpack+1
 15545  142F  3000               	movlw	0
 15546  1430  00F2               	movwf	?___ftpack+2
 15547  1431  0008               	return
 15548  1432                     l2363:	
 15549  1432  3001               	movlw	1
 15550  1433  00F5               	movwf	??___ftpack
 15551  1434  0875               	movf	??___ftpack,w
 15552  1435  07F3               	addwf	___ftpack@exp,f
 15553  1436  3001               	movlw	1
 15554  1437                     u2205:	
 15555  1437  36F2               	lsrf	___ftpack@arg+2,f
 15556  1438  0CF1               	rrf	___ftpack@arg+1,f
 15557  1439  0CF0               	rrf	___ftpack@arg,f
 15558  143A  0B89               	decfsz	9,f
 15559  143B  2C37               	goto	u2205
 15560  143C                     l2365:	
 15561  143C  30FE               	movlw	254
 15562  143D  0572               	andwf	___ftpack@arg+2,w
 15563  143E  1903               	btfsc	3,2
 15564  143F  2C55               	goto	l784
 15565  1440  2C32               	goto	l2363
 15566  1441                     l2367:	
 15567  1441  3001               	movlw	1
 15568  1442  00F5               	movwf	??___ftpack
 15569  1443  0875               	movf	??___ftpack,w
 15570  1444  07F3               	addwf	___ftpack@exp,f
 15571  1445  3001               	movlw	1
 15572  1446  07F0               	addwf	___ftpack@arg,f
 15573  1447  3000               	movlw	0
 15574  1448  1803               	skipnc
 15575  1449  3001               	movlw	1
 15576  144A  07F1               	addwf	___ftpack@arg+1,f
 15577  144B  3000               	movlw	0
 15578  144C  1803               	skipnc
 15579  144D  3001               	movlw	1
 15580  144E  07F2               	addwf	___ftpack@arg+2,f
 15581  144F  3001               	movlw	1
 15582  1450                     u2225:	
 15583  1450  36F2               	lsrf	___ftpack@arg+2,f
 15584  1451  0CF1               	rrf	___ftpack@arg+1,f
 15585  1452  0CF0               	rrf	___ftpack@arg,f
 15586  1453  0B89               	decfsz	9,f
 15587  1454  2C50               	goto	u2225
 15588  1455                     l784:	
 15589  1455  30FF               	movlw	255
 15590  1456  0572               	andwf	___ftpack@arg+2,w
 15591  1457  1903               	btfsc	3,2
 15592  1458  2C62               	goto	l2375
 15593  1459  2C41               	goto	l2367
 15594  145A                     l2373:	
 15595  145A  3001               	movlw	1
 15596  145B  02F3               	subwf	___ftpack@exp,f
 15597  145C  3001               	movlw	1
 15598  145D                     u2245:	
 15599  145D  35F0               	lslf	___ftpack@arg,f
 15600  145E  0DF1               	rlf	___ftpack@arg+1,f
 15601  145F  0DF2               	rlf	___ftpack@arg+2,f
 15602  1460  0B89               	decfsz	9,f
 15603  1461  2C5D               	goto	u2245
 15604  1462                     l2375:	
 15605  1462  1BF1               	btfsc	___ftpack@arg+1,7
 15606  1463  2C68               	goto	l791
 15607  1464  3002               	movlw	2
 15608  1465  0273               	subwf	___ftpack@exp,w
 15609  1466  1803               	skipnc
 15610  1467  2C5A               	goto	l2373
 15611  1468                     l791:	
 15612  1468  1873               	btfsc	___ftpack@exp,0
 15613  1469  2C70               	goto	l792
 15614  146A  30FF               	movlw	255
 15615  146B  05F0               	andwf	___ftpack@arg,f
 15616  146C  307F               	movlw	127
 15617  146D  05F1               	andwf	___ftpack@arg+1,f
 15618  146E  30FF               	movlw	255
 15619  146F  05F2               	andwf	___ftpack@arg+2,f
 15620  1470                     l792:	
 15621  1470  1003               	clrc
 15622  1471  0CF3               	rrf	___ftpack@exp,f
 15623  1472  0873               	movf	___ftpack@exp,w
 15624  1473  00F5               	movwf	??___ftpack
 15625  1474  01F6               	clrf	??___ftpack+1
 15626  1475  01F7               	clrf	??___ftpack+2
 15627  1476  3010               	movlw	16
 15628  1477                     u2285:	
 15629  1477  35F5               	lslf	??___ftpack,f
 15630  1478  0DF6               	rlf	??___ftpack+1,f
 15631  1479  0DF7               	rlf	??___ftpack+2,f
 15632  147A  0B89               	decfsz	9,f
 15633  147B  2C77               	goto	u2285
 15634  147C  0875               	movf	??___ftpack,w
 15635  147D  04F0               	iorwf	___ftpack@arg,f
 15636  147E  0876               	movf	??___ftpack+1,w
 15637  147F  04F1               	iorwf	___ftpack@arg+1,f
 15638  1480  0877               	movf	??___ftpack+2,w
 15639  1481  04F2               	iorwf	___ftpack@arg+2,f
 15640  1482  0874               	movf	___ftpack@sign,w
 15641  1483  1903               	btfsc	3,2
 15642  1484  0008               	return
 15643  1485  17F2               	bsf	___ftpack@arg+2,7
 15644  1486  0008               	return
 15645  1487                     __end_of___ftpack:	
 15646  007E                     btemp	set	126	;btemp
 15647  007E                     wtemp0	set	126


Data Sizes:
    Strings     14
    Constant    330
    Data        18
    BSS         154
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     59      76
    BANK1            80     29      79
    BANK2            80      0      65
    BANK3            80      0      40
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            48      0       0
    BANK8             0      0       0
    BANK9             0      0       0
    BANK10            0      0       0
    BANK11            0      0       0
    BANK12            0      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> log@exponent(BANK0[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 27
		 -> log@coeff(CODE[27]), 

    LCDWriteString@characters	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_3(CODE[5]), STR_2(CODE[5]), STR_1(CODE[4]), 


Critical Paths under _main in COMMON

    _main->_LCDWriteString
    _main->___awtoft
    _tempCalc->___awtoft
    _log->___awtoft
    ___ftge->___awtoft
    ___ftadd->___awtoft
    _readVAnalog->___aldiv
    _readIAnalog->___aldiv
    _readButton->_ADCRead
    _cc_cv_mode->___awtoft
    _calculateCurrent3->___awtoft
    _calculateCurrent0->___awtoft
    ___ftdiv->___awtoft
    _LCDInit->_LCDWrite
    _LCDClear->_gotoXY
    _gotoXY->_LCDWrite
    _Init_Battery_State_Machine->___awtoft
    _LCDWriteString->_LCDWriteCharacter
    _LCDWriteInt->___awtoft
    _LCDWriteCharacter->___wmul
    _Battery_State_Machine->___awtoft
    ___fttol->___awtoft
    ___ftmul->___awtoft
    ___awtoft->___awdiv

Critical Paths under _main in BANK0

    _main->_tempCalc
    _tempCalc->_log
    _log->_eval_poly
    _eval_poly->___ftadd
    ___ftge->___ftmul
    ___ftsub->___ftadd
    ___ftadd->___ftdiv
    ___ftadd->___ftmul
    _readVAnalog->___aldiv
    _readIAnalog->___aldiv
    _cc_cv_mode->___fttol
    _calculateCurrent3->___fttol
    _calculateCurrent0->___fttol
    ___ftdiv->___awtoft
    _SYSTEM_Initialize->_Init_Battery_State_Machine
    _Init_Battery_State_Machine->___fttol
    _LCDWriteInt->___fttol
    _Battery_State_Machine->___fttol
    ___fttol->___ftdiv
    ___fttol->___ftmul
    ___ftmul->___awtoft

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                31    31      0  115120
                                             57 BANK0      2     2      0
                                              0 BANK1     29    29      0
                            _ADCRead
              _Battery_State_Machine
                           _LCDClear
                            _LCDInit
                  _LCDWriteCharacter
                        _LCDWriteInt
                     _LCDWriteString
                 _PWM1_LoadDutyValue
                 _PWM6_LoadDutyValue
                 _PWM7_LoadDutyValue
                  _SYSTEM_Initialize
                            ___awdiv
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___fttol
                  _calculateCurrent0
                  _calculateCurrent2
                  _calculateCurrent3
                         _cc_cv_mode
                             _gotoXY
                         _readButton
                        _readIAnalog
                        _readVAnalog
                           _tempCalc
 ---------------------------------------------------------------------------------
 (1) _tempCalc                                            11     9      2   37419
                                             46 BANK0     11     9      2
                            _ADCRead (ARG)
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftsub
                            ___fttol
                                _log
 ---------------------------------------------------------------------------------
 (2) _log                                                  6     3      3   19451
                                             40 BANK0      6     3      3
                           ___awtoft
                            ___ftadd
                             ___ftge
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _frexp                                                6     2      4     330
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) _eval_poly                                           10     3      7    8325
                                             30 BANK0     10     3      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     426
                                             17 BANK0      9     3      6
                            ___awdiv (ARG)
                           ___awtoft (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    3356
                                             30 BANK0      6     0      6
                            ___ftadd
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             13     7      6    3183
                                             17 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (1) _readVAnalog                                         21    19      2    1046
                                              9 COMMON     4     4      0
                                              6 BANK0     17    15      2
                            _ADCRead
                            ___aldiv
                             ___bmul
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     170
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) _readIAnalog                                         24    22      2    1766
                                              9 COMMON     4     4      0
                                              6 BANK0     20    18      2
                            _ADCRead
                            ___aldiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     512
                                              0 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _readButton                                           2     2      0      22
                                              4 COMMON     2     2      0
                            _ADCRead
 ---------------------------------------------------------------------------------
 (2) _ADCRead                                              4     1      3      22
                                              0 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (1) _cc_cv_mode                                           8     8      0    8380
                                             31 BANK0      8     8      0
                           ___awtoft
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) _calculateCurrent3                                    3     3      0    7112
                                             31 BANK0      3     3      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) _calculateCurrent2                                    3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _calculateCurrent0                                    3     3      0    7112
                                             31 BANK0      3     3      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    3153
                                              1 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    2     2      0   11853
                                             36 BANK0      2     2      0
                     _ADC_Initialize
         _Init_Battery_State_Machine
                           _LCDClear
                            _LCDInit
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _PWM_Initialize
                    _TMR2_Initialize
                    _TMR4_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR4_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               1     1      0      23
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LCDInit                                              1     1      0     803
                                              5 COMMON     1     1      0
                           _LCDWrite
 ---------------------------------------------------------------------------------
 (2) _LCDClear                                             3     3      0    3021
                                              8 COMMON     3     3      0
                           _LCDWrite
                             _gotoXY
 ---------------------------------------------------------------------------------
 (1) _gotoXY                                               3     2      1    2172
                                              5 COMMON     3     2      1
                           _LCDWrite
 ---------------------------------------------------------------------------------
 (2) _Init_Battery_State_Machine                           5     5      0    8006
                                             31 BANK0      5     5      0
                           ___awtoft
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM7_LoadDutyValue                                   4     2      2      97
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _PWM6_LoadDutyValue                                   4     2      2      97
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _PWM1_LoadDutyValue                                   4     2      2      97
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _LCDWriteString                                       3     1      2    2009
                                             12 COMMON     2     0      2
                                              0 BANK0      1     1      0
                  _LCDWriteCharacter
 ---------------------------------------------------------------------------------
 (1) _LCDWriteInt                                         16    11      5    7853
                                             31 BANK0     16    11      5
                  _LCDWriteCharacter
                            ___awdiv
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                            ___fttol (ARG)
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     265
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              9     5      4     830
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (2) _LCDWriteCharacter                                    6     6      0    1805
                                              6 COMMON     6     6      0
                           _LCDWrite
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     890
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) _LCDWrite                                             5     4      1     803
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (1) _Battery_State_Machine                                6     6      0    8600
                                             31 BANK0      6     6      0
                           ___awtoft
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             14    10      4    1047
                                             17 BANK0     14    10      4
                            ___awdiv (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             16    10      6    3915
                                              1 BANK0     16    10      6
                            ___awdiv (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             6     3      3    2912
                                              9 COMMON     5     2      3
                                              0 BANK0      1     1      0
                            ___awdiv (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    1707
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCRead
   _Battery_State_Machine
     ___awtoft
       ___awdiv (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
   _LCDClear
     _LCDWrite
     _gotoXY
       _LCDWrite
   _LCDInit
     _LCDWrite
   _LCDWriteCharacter
     _LCDWrite
     ___wmul
   _LCDWriteInt
     _LCDWriteCharacter
       _LCDWrite
       ___wmul
     ___awdiv
     ___awtoft (ARG)
       ___awdiv (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol (ARG)
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
     ___lwmod (ARG)
   _LCDWriteString
     _LCDWriteCharacter
       _LCDWrite
       ___wmul
   _PWM1_LoadDutyValue
   _PWM6_LoadDutyValue
   _PWM7_LoadDutyValue
   _SYSTEM_Initialize
     _ADC_Initialize
     _Init_Battery_State_Machine
       ___awtoft
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftmul
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___fttol
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
     _LCDClear
       _LCDWrite
       _gotoXY
         _LCDWrite
     _LCDInit
       _LCDWrite
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM_Initialize
     _TMR2_Initialize
     _TMR4_Initialize
   ___awdiv
   ___awtoft
     ___awdiv (ARG)
     ___ftpack (ARG)
   ___ftdiv
     ___awtoft (ARG)
       ___awdiv (ARG)
       ___ftpack (ARG)
     ___ftpack (ARG)
     ___ftpack (ARG)
   ___ftge
     ___awdiv (ARG)
     ___awtoft (ARG)
       ___awdiv (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
   ___ftmul
     ___awdiv (ARG)
     ___awtoft (ARG)
       ___awdiv (ARG)
       ___ftpack (ARG)
     ___ftpack (ARG)
     _frexp (ARG)
   ___fttol
     ___awdiv (ARG)
     ___awtoft (ARG)
       ___awdiv (ARG)
       ___ftpack (ARG)
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
   _calculateCurrent0
     ___awtoft
       ___awdiv (ARG)
       ___ftpack (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___fttol
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
   _calculateCurrent2
   _calculateCurrent3
     ___awtoft
       ___awdiv (ARG)
       ___ftpack (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___fttol
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
   _cc_cv_mode
     ___awtoft
       ___awdiv (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
   _gotoXY
     _LCDWrite
   _readButton
     _ADCRead
   _readIAnalog
     _ADCRead
     ___aldiv
     ___wmul
   _readVAnalog
     _ADCRead
     ___aldiv
     ___bmul
   _tempCalc
     _ADCRead (ARG)
     ___awtoft (ARG)
       ___awdiv (ARG)
       ___ftpack (ARG)
     ___ftadd (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
       _frexp (ARG)
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftsub (ARG)
       ___ftadd
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
     ___fttol (ARG)
       ___awdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
     _log (ARG)
       ___awtoft
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftadd
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftge
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
       ___ftmul
         ___awdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       _eval_poly
         ___ftadd
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___wmul
       _frexp

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     3B      4C       5       95.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     1D      4F       7       98.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      41       9       81.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      28      11       50.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               30      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     112      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BANK8                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BANK9                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BANK10               0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BANK11               0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     112      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Aug 27 16:50:14 2018

                       _stateCounter 00B8                                    _j 0067  
                                  _x 006B               LCDWriteInt@fieldLength 0041  
                     ___bmul@product 0072              __size_of_PWM_Initialize 001F  
                        __CFG_CP$OFF 0000                                   l78 012C  
                                 l79 0134                         ___awdiv@sign 0076  
                ___wmul@multiplicand 0072          __size_of_PWM6_LoadDutyValue 0016  
                       ___ftadd@exp1 003D                         ___ftadd@exp2 003C  
                        __CFG_LVP$ON 0000                         ___ftadd@sign 003B  
                                l120 0469                                  l210 1136  
                                l213 113D                                  l292 0D2C  
                                l293 0D3D                                  l382 1FC0  
                      LCDClear@index 0079                                  l383 1FC2  
                                l623 1F07                                  l384 1FC8  
                                l385 1FD8                                  l297 0D80  
                                l386 1FCC                                  l815 0A4D  
                                l678 1582                                  l791 1468  
                                l792 1470                                  l784 1455  
                                l875 0081                                  _GIE 005F  
                                _RB2 006A                         __CFG_CPD$OFF 0000  
                       _VsampleIndex 0063                                  _log 169C  
                    __end_of_ADCRead 1144                      _TMR2_Initialize 1E77  
                       __CFG_BORV$LO 0000                                  wreg 0009  
                    __end_of_LCDInit 11E2                         ?_LCDWriteInt 003F  
                       __CFG_ZCD$OFF 0000                         ___ftdiv@cntr 002B  
                       ___ftdiv@sign 0030                                 l3003 114A  
                               l3005 1156                                 l3013 116B  
                               l3103 152D                                 l3201 0FA1  
                               l3009 1162                                 l3041 0CD4  
                               l2411 1F01                                 l3123 1556  
                               l3131 156F                                 l3107 153F  
                               l3117 154D                                 l3109 1541  
                               l3061 0B96                                 l3071 12AD  
                               l2521 17BC                                 l2505 1779  
                               l2601 005D                                 l3209 0FF0  
                               l3233 082F                                 l3129 156E  
                               l2433 09DD                                 l2363 1432  
                               l2611 0084                                 l2603 006B  
                               l3163 0E80                                 l3251 086B  
                               l3243 0836                                 l3219 1EA9  
                               l3083 12F2                                 l2451 0A06  
                               l4035 07A4                                 l2373 145A  
                               l2365 143C                                 l2533 17D8  
                               l2517 17B4                                 l3165 0E88  
                               l3261 087D                                 l3253 0873  
                               l3245 0863                                 l3077 1F30  
                               l2461 0A28                                 l2429 09D6  
                               l2375 1462                                 l2367 1441  
                               l2359 142B                                 l2615 0092  
                               l3183 0F48                                 l3167 0E9A  
                               l3263 08A4                                 l3255 0879  
                               l2471 0A49                                 l2463 0A2C  
                               l2439 09EC                                 l4039 07AD  
                               l2553 1F9F                                 l2529 17D0  
                               l2609 0078                                 l3249 0867  
                               l3281 0D4B                                 l3097 1513  
                               l2457 0A19                                 l3179 0F2E  
                               l3187 0F61                                 l3267 08B2  
                               l2475 0A5F                                 l2459 0A23  
                               l2627 122F                                 l2661 1FFB  
                               l3285 0D58                                 l2469 0A3F  
                               l2645 141C                                 l2583 002D  
                               l2655 1FE7                                 l2479 0A71  
                               l2489 0A8C                                 l2499 1763  
                               l2915 1333                                 l3651 1285  
                               l2941 136A                                 l2933 1359  
                               l2925 133B                                 l2909 1328  
                               l2853 1E8D                                 l3821 02EE  
                               l2927 1347                                 l2951 160A  
                               l2871 1593                                 l3647 126F  
                               l3815 02D4                                 l3743 00E4  
                               l3735 00D0                                 l2937 1362  
                               l2881 15B1                                 l2849 1E87  
                               l3809 02B7                                 l3825 0300  
                               l3761 010D                                 l2971 1661  
                               l3675 16CE                                 l3843 0341  
                               l3755 0108                                 l2957 1620  
                               l2893 15DC                                 l3669 16BB  
                               l3861 043D                                 l3853 03B8  
                               l3837 032A                                 l3749 00EA  
                               l2879 15A3                                 l2991 1F40  
                               l3863 0441                                 l3847 0348  
                               l3791 0288                                 l2897 15EA  
                               l2889 15D1                                 l3881 048C  
                               l3785 026B                                 l2979 167A  
                               l3875 0475                                 l3877 0478  
                               l3869 0461                                 l3797 02A2  
                               ?_log 0048                                 l3897 04BB  
                               STR_1 1825                                 STR_2 1820  
                               STR_3 181B                                 u2205 1437  
                               _LATA 0016                                 _LATB 0017  
                               _LATC 0018                                 u2225 1450  
                               u3025 15A6                                 u2245 145D  
                               u3125 133E                                 u3045 15B2  
                               u3215 1632                                 u3055 15C6  
                               u3145 1348                                 u3225 1642  
                               u3065 15D2                                 u2505 0A1A  
                               _T2PR 028D                                 u2355 1F08  
                               u3155 1352                                 u3315 115C  
                               u3235 1662                                 u2285 1477  
                               u2365 1F0D                                 u3165 135A  
                               u3325 1163                                 u3245 1671  
                               u3405 0CDF                                 u3255 167B  
                               u3415 0ABA                                 u2535 0A2D  
                               u2705 17D9                                 u3345 0BD4  
                               u3505 0BA1                                 u3425 0ACE  
                               _T4PR 0293                                 u2715 17DF  
                               u2635 1785                                 u3515 12A7  
                               u3355 0C2A                                 u3435 0B04  
                               u2475 0A07                                 u2645 1795  
                               u3525 1F2A                                 u3605 1537  
                               u3365 0C64                                 u3445 0B18  
                               u2565 0A40                                 u2815 005E  
                               u3295 114D                                 u3535 12EC  
                               u3375 0CAF                                 u3455 0B32  
                               u3800 0819                                 u2665 17BD  
                               u3545 1EE2                                 u2905 1FF9  
                               u3465 0B46                                 u2930 11A5  
                               u2675 17C3                                 u3715 0F01  
                               u3555 1EF8                                 u3475 0B71  
                               u2845 0079                                 u3565 1501  
                               u3655 1ECC                                 u3575 150D  
                               u4535 0259                                 u2785 0034  
                               u3585 151D                                 u4705 0323  
                               u4625 02B4                                 u3675 0E5E  
                               u3595 1529                                 u3685 0E72  
                               u4725 033A                                 u2895 1FE5  
                               u4655 02C5                                 u4575 0279  
                               u3865 0892                                 u3955 0D9A  
                               u4675 02E3                                 u4595 0297  
                               u4765 0421                                 u3895 0D18  
                               u4775 0436                                 u3985 0DF3  
                               u4785 0453                                 u4867 00D8  
                               u4877 1560                                 u4887 1205  
                               u4897 1215                  tempCalc@analogValue 004E  
                               _WPUA 0F39                                 _WPUB 0F44  
                               _WPUC 0F4F                                 _WPUE 0F65  
                               _Imin 014D                                 _Iref 00C0  
                               _Iout 00C6                         __CFG_WRT$OFF 0000  
                      __CFG_FCMEN$ON 0000                                 _Vref 00BC  
                               _main 009B                         ___ftpack@arg 0070  
                       ___ftpack@exp 0073                                 fsr0h 0005  
                               fsr1h 0007                                 indf0 0000  
                               fsr0l 0004                                 indf1 0001  
                               fsr1l 0006                                 btemp 007E  
                               log@x 0048                         ?_readIAnalog 0026  
                      __CFG_BOREN$ON 0000                                 start 0002  
                      __CFG_CSWEN$ON 0000                    ___bmul@multiplier 0073  
                      __CFG_MCLRE$ON 0000                         ___ftmul@cntr 002F  
                       ___ftmul@sign 0030                         ?_readVAnalog 0026  
                   __end_of_LCDClear 2000                         ___fttol@exp1 003E  
                              ??_log 004B                         ___fttol@lval 003A  
                       main@fastLoop 00D8  __size_of_Init_Battery_State_Machine 0068  
     __size_of_OSCILLATOR_Initialize 0009                     __end_of_LCDWrite 1FDA  
      __end_of_OSCILLATOR_Initialize 1E5F                      __end_of___aldiv 15F3  
                              _ADACQ 009D                                _ADACT 0099  
                              _ADCAP 009B                                ?_main 0070  
                              _ADCLK 0098                                _ADPCH 009E  
                              _ADREF 009A                      __end_of___awdiv 136F  
                              _ADPRE 009C                      __end_of___ftadd 0AA4  
                      __CFG_WDTE$OFF 0000                                _ADRPT 010D  
                    __end_of___ftdiv 169C                      __end_of___ftmul 1800  
                    ___awdiv@divisor 0070                      __end_of___ftsub 1F56  
                    __end_of___fttol 009B                                _T2CON 028E  
                              _LATA5 00B5                                _T4CON 0294  
                              _T2HLT 028F                                _T4HLT 0295  
                              _T2TMR 028C                                _T2RST 0291  
                    __end_of___lwmod 1170                                _T4TMR 0292  
                              _T4RST 0297                      ___awdiv@counter 0075  
                              _OSCEN 0891                                _TRISA 0011  
                              _TRISB 0012                                _TRISC 0013  
                    _TMR4_Initialize 0800                                _Imode 00CC  
             ?_Battery_State_Machine 0070                                _cc_cv 00C8  
                      ___awtoft@sign 0020                                _frexp 121D  
                              _fonts 1000                                _errno 00C4  
                      ___ftpack@sign 0074                                main@j 00EC  
                       main@slowLoop 00D9                                status 0003  
                              wtemp0 007E                      __initialization 07B0  
                        log@exponent 004C                         __end_of_main 07B0  
            __end_of_TMR2_Initialize 1E85                            ??_ADCRead 0073  
                             ??_main 0059                        ___fttol@sign1 0039  
                          ??_LCDInit 0075               Battery_State_Machine@z 0044  
            LCDWrite@data_or_command 0072                               _ADCON0 0093  
                             _ADCON1 0094                               _ADCON2 0095  
                             _ADCON3 0096                               ?_frexp 0070  
                             _ADLTHH 010F                               _ADLTHL 010E  
                             _ADRESH 008D                               _ADRESL 008C  
                             _CCPR1H 030D                               _CCPR1L 030C  
                             _ADSTAT 0097                               _ADUTHH 0111  
                   ___awdiv@dividend 0072                               _ADUTHL 0110  
                   __end_of___awtoft 1FB5                               _ANSELA 0F38  
                             _ANSELB 0F43                               _ANSELC 0F4E  
                   __end_of___ftpack 1487                               _RB0PPS 0F18  
                             _RA6PPS 0F16                               _RA7PPS 0F17  
                     __CFG_WDTCCS$SC 0000                               _FVRCON 090C  
                             _OSCFRQ 0893                       __CFG_PWRTE$OFF 0000  
                     _LCDWriteString 1EA9                         _CCPTMRS0bits 021E  
                       _CCPTMRS1bits 021F                               ___bmul 1E85  
                             ___ftge 1258                            ??___aldiv 0078  
                             ___wmul 1EFF                            ??___awdiv 0074  
                          ??___ftadd 0037                       __CFG_STVREN$ON 0000  
                     _PWM_Initialize 1F75                            ??___ftdiv 0027  
                          ??___ftmul 0027                            ??___ftsub 007E  
                          ??___fttol 0035                            ??___lwmod 0074  
                             _gotoXY 1E96                               _button 0069  
            __end_of_TMR4_Initialize 080E                     ___awdiv@quotient 0077  
          readVAnalog@analog_channel 0079                ___ftmul@f3_as_product 002C  
                   __end_of_tempCalc 09AE                         LCDWrite@data 0070  
                       LCDWriteInt@i 004E                         LCDWriteInt@j 004D  
                          ?_LCDClear 0070                    _SYSTEM_Initialize 11E2  
               __size_of_LCDWriteInt 00B9                     __end_oflog@coeff 181B  
            __end_of__initialization 07FD                           ___ftadd@f1 0031  
                         ___ftadd@f2 0034                           ___ftge@ff1 0031  
                         ___ftge@ff2 0034                            ?_LCDWrite 0070  
                 ?_SYSTEM_Initialize 0070               __end_of_LCDWriteString 1EBD  
                       eval_poly@res 0045                           ___ftdiv@f1 0024  
                         ___ftdiv@f2 0021                           ___ftdiv@f3 002C  
                         ___awtoft@c 0079                  ___bmul@multiplicand 0070  
                         ___ftmul@f1 0021                           ___ftmul@f2 0024  
             __end_of_PWM_Initialize 1F94                 __size_of_readIAnalog 013E  
                         ___ftsub@f1 0041                           ___ftsub@f2 003E  
                         ___fttol@f1 0031                       __pcstackCOMMON 0070  
                       __pidataBANK1 1E54                         __pidataBANK2 0004  
                ??_SYSTEM_Initialize 0044                        __end_of_frexp 1258  
                      __end_of_fonts 112F                            LCDWrite@d 0073  
                          LCDWrite@i 0074                 __size_of_readVAnalog 011A  
                 _PWM1_LoadDutyValue 1EBD                     ?_TMR2_Initialize 0070  
                         _cc_cv_mode 0CFC          __size_of_PWM7_LoadDutyValue 0016  
                     main@efficiency 00D0                  ?_PWM1_LoadDutyValue 0070  
                  LCDWriteInt@F14392 0148                    _calculateCurrent0 1294  
                  _calculateCurrent2 1F1A                    _calculateCurrent3 12D9  
                            ??_frexp 0074            __end_of_SYSTEM_Initialize 121D  
                         __pbssBANK0 005B                           __pbssBANK1 00A0  
                         __pbssBANK2 0120                           __pbssBANK3 01A0  
                 ?_calculateCurrent0 0070                   ?_calculateCurrent2 0070  
                 ?_calculateCurrent3 0070                         _batteryState 00CE  
                 __size_of_eval_poly 0060                           ??_LCDClear 0078  
                     main@faultCount 00D3                           ??_LCDWrite 0071  
                    ?_LCDWriteString 007C                 ??_PWM1_LoadDutyValue 0072  
                ??_calculateCurrent0 003F                  ??_calculateCurrent2 0070  
                ??_calculateCurrent3 003F                      ?_PWM_Initialize 0070  
                         __pmaintext 009B                              ?___bmul 0070  
                            ?___ftge 0031                              ?___wmul 0070  
                    __CFG_PPS1WAY$ON 0000           __end_of_PWM6_LoadDutyValue 1EE9  
                            ?_gotoXY 0075                              _ADCRead 112F  
                   ?_TMR4_Initialize 0070                            ?___awtoft 0079  
                          ?___ftpack 0070                              _ADSTPTH 0113  
                            _ADSTPTL 0112             __CFG_SCANE$not_available 0000  
                __CFG_RSTOSC$HFINT32 0000              __size_of_ADC_Initialize 001F  
            ??_Battery_State_Machine 003F                       main@largerIOut 00DF  
                            _LCDInit 11A7            __end_of_calculateCurrent0 12D9  
          __end_of_calculateCurrent2 1F38            __end_of_calculateCurrent3 131E  
                            _OSCCON1 088D                              _OSCCON3 088F  
                            _OSCTUNE 0892                              _PWM6DCH 038D  
                            _PWM6DCL 038C                              _PWM7DCH 0391  
                            _PWM7DCL 0390                              _PWM6CON 038E  
                            _PWM7CON 0392                              _PPSLOCK 0E8F  
                         _floatCount 0061                       main@menuButton 00DC  
                     main@dutyCycle1 00E3                       main@dutyCycle6 00E8  
                     main@dutyCycle7 00EA                    main@tempFanOutput 00E1  
                         _lastButton 0068                            ?_tempCalc 004E  
                            _Itotals 0130                              ___aldiv 1571  
                    __size_of___bmul 0011                      __size_of___ftge 003C  
                            ___awdiv 131E                              ___ftadd 09AE  
                         _readButton 14EF                              ___ftdiv 15F3  
                    __size_of___wmul 001B                              ___ftmul 174C  
                            ___ftsub 1F38                              ___fttol 0014  
                 main@displayRefresh 00D7                              ___lwmod 1144  
                            _Vtotals 0120                      __size_of_gotoXY 0013  
                         ??___awtoft 007C                           ??___ftpack 0075  
                  __end_of_eval_poly 1423                              __ptext1 08C7  
                            __ptext2 169C                              __ptext3 121D  
                            __ptext4 13C3                              __ptext5 1258  
                            __ptext6 1F38                              __ptext7 09AE  
                            __ptext8 0AA4                              __ptext9 1E85  
                        ?_cc_cv_mode 0070                _OSCILLATOR_Initialize 1E56  
                          _T2CONbits 028E                              _current 00A8  
                       __size_of_log 00B0                       ADCRead@channel 0073  
                   ___aldiv@dividend 0074                            _T4CONbits 0294  
           ??_PIN_MANAGER_Initialize 0070           __size_of_SYSTEM_Initialize 003B  
                            clrloop0 1E60                              _voltage 00B0  
       ??_Init_Battery_State_Machine 003F                 end_of_initialization 07FD  
              LCDWriteCharacter@base 007A                              gotoXY@x 0077  
                            gotoXY@y 0075                              init_ram 1E6B  
                            initloop 1E6C                           ??_tempCalc 007E  
                   ___aldiv@quotient 0022                           _otherState 006A  
                  _LCDWriteCharacter 136F                __CFG_WDTCPS$WDTCPS_31 0000  
                 ?_LCDWriteCharacter 0070                   readVAnalog@channel 0026  
         __size_of_calculateCurrent0 0045           __size_of_calculateCurrent2 001E  
         __size_of_calculateCurrent3 0045                            _TRISAbits 0011  
                ??_LCDWriteCharacter 0076                     __CFG_FEXTOSC$OFF 0000  
       PWM1_LoadDutyValue@dutyCycle1 0070                          _CCP1CONbits 030E  
                        ___ftdiv@exp 002F                  __size_of_cc_cv_mode 0147  
                  __size_of_LCDClear 0026           LCDWriteCharacter@character 0079  
                  __size_of_LCDWrite 0025                          ___ftmul@exp 002B  
          __end_of_LCDWriteCharacter 13C3                          ?_readButton 0070  
                          _Ichannels 0159            readIAnalog@analog_channel 0079  
                     __end_of___bmul 1E96                       __end_of___ftge 1294  
                          _VHoldMode 00CA                       __end_of___wmul 1F1A  
                     _ADC_Initialize 1F56                       __end_of_gotoXY 1EA9  
             ?_OSCILLATOR_Initialize 0070                            _IminCount 005B  
                start_initialization 07B0                           eval_poly@d 0041  
                         eval_poly@n 0043                           eval_poly@x 003E  
                  main@faultNotReset 00D5      __size_of_PIN_MANAGER_Initialize 0037  
                        __end_of_log 174C                        ??_LCDWriteInt 0044  
                   ??_LCDWriteString 0020                           frexp@value 0070  
                       _IsampleIndex 0065                     ??_PWM_Initialize 0070  
                      ??_readIAnalog 0028                            _Vchannels 0151  
                   __CFG_LPBOREN$OFF 0000                        ??_readVAnalog 0028  
                           ??___bmul 0071                             ??___ftge 0037  
                  tempCalc@steinhart 0056                             ??___wmul 0074  
             __end_of_ADC_Initialize 1F75                        _tempCalc$1325 0053  
                        __pdataBANK1 00ED                          __pdataBANK2 0151  
         __end_of_PWM7_LoadDutyValue 1EFF                             ??_gotoXY 0076  
                           ?_ADCRead 0070         PWM7_LoadDutyValue@dutyCycle7 0070  
                  __size_of___awtoft 0021                             ?_LCDInit 0070  
                  __size_of___ftpack 0064                          __pbssBIGRAM 2260  
                   readVAnalog@value 007B       __size_of_Battery_State_Machine 01BD  
      __end_of_Battery_State_Machine 1000                            ___latbits 0002  
                      __pcstackBANK0 0020                        __pcstackBANK1 00D0  
                 _PWM6_LoadDutyValue 1ED3             __size_of_TMR2_Initialize 000E  
 __end_of_Init_Battery_State_Machine 14EF           _Init_Battery_State_Machine 1487  
                __size_of_readButton 0082                  ?_PWM6_LoadDutyValue 0070  
                __end_of_LCDWriteInt 08C7                          _batteryTemp 00ED  
        __size_of_PWM1_LoadDutyValue 0016                            _main$1324 00E5  
             _PIN_MANAGER_Initialize 1170           __size_of_LCDWriteCharacter 0054  
                           ?___aldiv 0070                  __end_of_readIAnalog 0CFC  
                  __size_of_tempCalc 00E7                             ?___awdiv 0070  
                           ?___ftadd 0031                             ?___ftdiv 0021  
                           ?___ftmul 0021                             ?___ftsub 003E  
                           ?___fttol 0031                     LCDWriteInt@value 003F  
                           ?___lwmod 0070                      ?_ADC_Initialize 0070  
               ??_PWM6_LoadDutyValue 0072                         ??_cc_cv_mode 003F  
                __end_of_readVAnalog 0BBE                            _eval_poly 13C3  
           __size_of_TMR4_Initialize 000E                       __size_of_frexp 003B  
                           _T2CLKCON 0290                             _T4CLKCON 0296  
                        cc_cv_mode@z 0046                             _LCDClear 1FDA  
                    ___aldiv@divisor 0070                      ___aldiv@counter 0020  
                     ___wmul@product 0074                             _LATAbits 0016  
                           _LCDWrite 1FB5                            clear_ram0 1E5F  
                           _PIE0bits 0716                   __end_of_cc_cv_mode 0E43  
                           _PIR4bits 0710                     readIAnalog@value 007B  
                          main@MPPT0 00DA                            main@MPPT1 00DD  
                   __size_of_ADCRead 0015                           _ADCON0bits 0093  
                  ___wmul@multiplier 0070                           ?_eval_poly 003E  
                   __size_of_LCDInit 003B                             _Ianalogs 00A0  
                        _LCDWriteInt 080E          Init_Battery_State_Machine@z 0043  
                  ??_TMR2_Initialize 0070                             _Isamples 2260  
                        _readIAnalog 0BBE                            frexp@eptr 0073  
                           _Vanalogs 0140                          _readVAnalog 0AA4  
                       ??_readButton 0074              ??_OSCILLATOR_Initialize 0070  
               LCDWriteInt@numPlaces 0042                     __size_of___aldiv 0082  
                   __size_of___awdiv 0051                     __size_of___ftadd 00F6  
                   __size_of___ftdiv 00A9                     __size_of___ftmul 00B4  
                   __size_of___ftsub 001E                     __size_of___fttol 0087  
                           _Vsamples 01A0                     __size_of___lwmod 002C  
                        _readButtons 005F                             ___awtoft 1F94  
                           ___ftpack 1423                             __ptext10 0BBE  
                           __ptext11 1571                             __ptext20 0800  
                           __ptext12 14EF                             __ptext21 1E77  
                           __ptext13 112F                             __ptext30 1EE9  
                           __ptext22 1F75                             __ptext14 0CFC  
                           __ptext31 1ED3                             __ptext23 1170  
                           __ptext15 12D9                             __ptext40 0E43  
                           __ptext32 1EBD                             __ptext24 1E56  
                           __ptext16 1F1A                             __ptext41 0014  
                           __ptext33 1EA9                             __ptext25 11A7  
                           __ptext17 1294                             __ptext42 174C  
                           __ptext34 080E                             __ptext26 1FDA  
                           __ptext18 15F3                             __ptext43 1F94  
                           __ptext35 1144                             __ptext27 1E96  
                           __ptext19 11E2                             __ptext44 1423  
                           __ptext36 131E                             __ptext28 1487  
                           __ptext37 136F                             __ptext29 1F56  
                           __ptext38 1EFF                             __ptext39 1FB5  
                    LCDWriteInt@sign 0043                            tempCalc@R 0050  
                 __end_of_readButton 1571                    ??_TMR4_Initialize 0070  
                      __size_of_main 0715                 __CFG_WDTCWS$WDTCWS_7 0000  
                           _tempCalc 08C7          PIN_MANAGER_Initialize@state 0070  
                           log@coeff 1800                          ??_eval_poly 007E  
                 _PWM7_LoadDutyValue 1EE9          ?_Init_Battery_State_Machine 0070  
                   ___lwmod@dividend 0072                       LCDWriteInt@str 0048  
            ?_PIN_MANAGER_Initialize 0070                  ?_PWM7_LoadDutyValue 0070  
                  __CFG_CLKOUTEN$OFF 0000                          _PPSLOCKbits 0E8F  
                   ??_ADC_Initialize 0070         PWM6_LoadDutyValue@dutyCycle6 0070  
                      __pstringtext1 1000                        __pstringtext2 1800  
                      __pstringtext3 1820                        __pstringtext4 1825  
                      __pstringtext5 0000                 ??_PWM7_LoadDutyValue 0072  
                    ___lwmod@divisor 0070                      ___lwmod@counter 0075  
           LCDWriteString@characters 007C                         ___aldiv@sign 0021  
                 readIAnalog@channel 0026                _Battery_State_Machine 0E43  
     __end_of_PIN_MANAGER_Initialize 11A7           __end_of_PWM1_LoadDutyValue 1ED3  
            __size_of_LCDWriteString 0014  
