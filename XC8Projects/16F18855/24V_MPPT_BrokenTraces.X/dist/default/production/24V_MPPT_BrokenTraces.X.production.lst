

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sat Aug 25 14:18:07 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F18855
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	stringtext1,global,class=STRCODE,delta=2
     7                           	psect	stringtext2,global,class=STRCODE,delta=2
     8                           	psect	stringtext3,global,class=STRCODE,delta=2
     9                           	psect	stringtext4,global,class=STRCODE,delta=2
    10                           	psect	stringtext5,global,class=STRCODE,delta=2
    11                           	psect	cinit,global,class=CODE,merge=1,delta=2
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    17                           	psect	inittext,global,class=CODE,delta=2
    18                           	psect	clrtext,global,class=CODE,delta=2
    19                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    20                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    22                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    23                           	psect	text1,local,class=CODE,merge=1,delta=2
    24                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    25                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    26                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    27                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    28                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    29                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    30                           	psect	text8,local,class=CODE,merge=1,delta=2
    31                           	psect	text9,local,class=CODE,merge=1,delta=2
    32                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    33                           	psect	text11,local,class=CODE,merge=1,delta=2
    34                           	psect	text12,local,class=CODE,merge=1,delta=2
    35                           	psect	text13,local,class=CODE,merge=1,delta=2
    36                           	psect	text14,local,class=CODE,merge=1,delta=2
    37                           	psect	text15,local,class=CODE,merge=1,delta=2
    38                           	psect	text16,local,class=CODE,merge=1,delta=2
    39                           	psect	text17,local,class=CODE,merge=1,delta=2,group=2
    40                           	psect	text18,local,class=CODE,merge=1,delta=2
    41                           	psect	text19,local,class=CODE,merge=1,delta=2
    42                           	psect	text20,local,class=CODE,merge=1,delta=2
    43                           	psect	text21,local,class=CODE,merge=1,delta=2
    44                           	psect	text22,local,class=CODE,merge=1,delta=2
    45                           	psect	text23,local,class=CODE,merge=1,delta=2
    46                           	psect	text24,local,class=CODE,merge=1,delta=2
    47                           	psect	text25,local,class=CODE,merge=1,delta=2
    48                           	psect	text26,local,class=CODE,merge=1,delta=2
    49                           	psect	text27,local,class=CODE,merge=1,delta=2
    50                           	psect	text28,local,class=CODE,merge=1,delta=2
    51                           	psect	text29,local,class=CODE,merge=1,delta=2
    52                           	psect	text30,local,class=CODE,merge=1,delta=2
    53                           	psect	text31,local,class=CODE,merge=1,delta=2
    54                           	psect	text32,local,class=CODE,merge=1,delta=2
    55                           	psect	text33,local,class=CODE,merge=1,delta=2
    56                           	psect	text34,local,class=CODE,merge=1,delta=2,group=2
    57                           	psect	text35,local,class=CODE,merge=1,delta=2,group=2
    58                           	psect	text36,local,class=CODE,merge=1,delta=2
    59                           	psect	text37,local,class=CODE,merge=1,delta=2,group=2
    60                           	psect	text38,local,class=CODE,merge=1,delta=2
    61                           	psect	text39,local,class=CODE,merge=1,delta=2
    62                           	psect	text40,local,class=CODE,merge=1,delta=2,group=2
    63                           	psect	text41,local,class=CODE,merge=1,delta=2,group=2
    64                           	psect	text42,local,class=CODE,merge=1,delta=2,group=2
    65                           	psect	text43,local,class=CODE,merge=1,delta=2,group=2
    66                           	dabs	1,0x620,48
    67                           	dabs	1,0x5A8,72
    68                           	dabs	1,0x5A0,8
    69                           	dabs	1,0x520,80
    70                           	dabs	1,0x4A0,80
    71                           	dabs	1,0x420,80
    72                           	dabs	1,0x3A0,80
    73                           	dabs	1,0x328,72
    74                           	dabs	1,0x21E8,0,_Isamples
    75                           	dabs	1,0x2378,0,_Vsamples
    76                           	dabs	1,0x7E,2
    77  0000                     
    78                           ; Version 1.45
    79                           ; Generated 16/11/2017 GMT
    80                           ; 
    81                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    82                           ; All rights reserved.
    83                           ; 
    84                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    85                           ; 
    86                           ; Redistribution and use in source and binary forms, with or without modification, are
    87                           ; permitted provided that the following conditions are met:
    88                           ; 
    89                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    90                           ;        conditions and the following disclaimer.
    91                           ; 
    92                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    93                           ;        of conditions and the following disclaimer in the documentation and/or other
    94                           ;        materials provided with the distribution.
    95                           ; 
    96                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    97                           ;        software without specific prior written permission.
    98                           ; 
    99                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   100                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   101                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   102                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   103                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   104                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   105                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   106                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   107                           ; 
   108                           ; 
   109                           ; Code-generator required, PIC16F18855 Definitions
   110                           ; 
   111                           ; SFR Addresses
   112  0000                     	;# 
   113  0001                     	;# 
   114  0002                     	;# 
   115  0003                     	;# 
   116  0004                     	;# 
   117  0005                     	;# 
   118  0006                     	;# 
   119  0007                     	;# 
   120  0008                     	;# 
   121  0009                     	;# 
   122  000A                     	;# 
   123  000B                     	;# 
   124  000C                     	;# 
   125  000D                     	;# 
   126  000E                     	;# 
   127  0010                     	;# 
   128  0011                     	;# 
   129  0012                     	;# 
   130  0013                     	;# 
   131  0016                     	;# 
   132  0017                     	;# 
   133  0018                     	;# 
   134  001C                     	;# 
   135  001C                     	;# 
   136  001D                     	;# 
   137  001D                     	;# 
   138  001E                     	;# 
   139  001F                     	;# 
   140  008C                     	;# 
   141  008C                     	;# 
   142  008D                     	;# 
   143  008E                     	;# 
   144  008E                     	;# 
   145  008F                     	;# 
   146  0090                     	;# 
   147  0090                     	;# 
   148  0091                     	;# 
   149  0093                     	;# 
   150  0094                     	;# 
   151  0095                     	;# 
   152  0096                     	;# 
   153  0097                     	;# 
   154  0098                     	;# 
   155  0099                     	;# 
   156  009A                     	;# 
   157  009B                     	;# 
   158  009C                     	;# 
   159  009D                     	;# 
   160  009E                     	;# 
   161  010C                     	;# 
   162  010D                     	;# 
   163  010E                     	;# 
   164  010E                     	;# 
   165  010F                     	;# 
   166  0110                     	;# 
   167  0110                     	;# 
   168  0111                     	;# 
   169  0112                     	;# 
   170  0112                     	;# 
   171  0113                     	;# 
   172  0114                     	;# 
   173  0114                     	;# 
   174  0115                     	;# 
   175  0116                     	;# 
   176  0116                     	;# 
   177  0117                     	;# 
   178  0119                     	;# 
   179  0119                     	;# 
   180  0119                     	;# 
   181  011A                     	;# 
   182  011A                     	;# 
   183  011A                     	;# 
   184  011B                     	;# 
   185  011B                     	;# 
   186  011B                     	;# 
   187  011B                     	;# 
   188  011B                     	;# 
   189  011C                     	;# 
   190  011C                     	;# 
   191  011C                     	;# 
   192  011D                     	;# 
   193  011D                     	;# 
   194  011D                     	;# 
   195  011E                     	;# 
   196  011E                     	;# 
   197  011E                     	;# 
   198  011F                     	;# 
   199  011F                     	;# 
   200  011F                     	;# 
   201  011F                     	;# 
   202  011F                     	;# 
   203  018C                     	;# 
   204  018D                     	;# 
   205  018E                     	;# 
   206  018F                     	;# 
   207  0190                     	;# 
   208  0191                     	;# 
   209  0192                     	;# 
   210  0196                     	;# 
   211  0197                     	;# 
   212  0198                     	;# 
   213  0199                     	;# 
   214  019A                     	;# 
   215  019B                     	;# 
   216  019C                     	;# 
   217  020C                     	;# 
   218  020C                     	;# 
   219  020D                     	;# 
   220  020E                     	;# 
   221  020F                     	;# 
   222  020F                     	;# 
   223  0210                     	;# 
   224  0210                     	;# 
   225  0211                     	;# 
   226  0211                     	;# 
   227  0212                     	;# 
   228  0212                     	;# 
   229  0213                     	;# 
   230  0214                     	;# 
   231  0215                     	;# 
   232  0215                     	;# 
   233  0216                     	;# 
   234  0216                     	;# 
   235  0217                     	;# 
   236  0217                     	;# 
   237  0218                     	;# 
   238  0218                     	;# 
   239  0219                     	;# 
   240  021A                     	;# 
   241  021B                     	;# 
   242  021B                     	;# 
   243  021C                     	;# 
   244  021C                     	;# 
   245  021D                     	;# 
   246  021D                     	;# 
   247  021E                     	;# 
   248  021F                     	;# 
   249  028C                     	;# 
   250  028C                     	;# 
   251  028D                     	;# 
   252  028D                     	;# 
   253  028E                     	;# 
   254  028F                     	;# 
   255  0290                     	;# 
   256  0290                     	;# 
   257  0291                     	;# 
   258  0292                     	;# 
   259  0292                     	;# 
   260  0293                     	;# 
   261  0293                     	;# 
   262  0294                     	;# 
   263  0295                     	;# 
   264  0296                     	;# 
   265  0296                     	;# 
   266  0297                     	;# 
   267  0298                     	;# 
   268  0298                     	;# 
   269  0299                     	;# 
   270  0299                     	;# 
   271  029A                     	;# 
   272  029B                     	;# 
   273  029C                     	;# 
   274  029C                     	;# 
   275  029D                     	;# 
   276  030C                     	;# 
   277  030C                     	;# 
   278  030D                     	;# 
   279  030E                     	;# 
   280  030F                     	;# 
   281  0310                     	;# 
   282  0310                     	;# 
   283  0311                     	;# 
   284  0312                     	;# 
   285  0313                     	;# 
   286  0314                     	;# 
   287  0314                     	;# 
   288  0315                     	;# 
   289  0316                     	;# 
   290  0317                     	;# 
   291  0318                     	;# 
   292  0318                     	;# 
   293  0319                     	;# 
   294  031A                     	;# 
   295  031B                     	;# 
   296  031C                     	;# 
   297  031C                     	;# 
   298  031D                     	;# 
   299  031E                     	;# 
   300  031F                     	;# 
   301  038C                     	;# 
   302  038D                     	;# 
   303  038E                     	;# 
   304  0390                     	;# 
   305  0391                     	;# 
   306  0392                     	;# 
   307  040C                     	;# 
   308  040D                     	;# 
   309  040E                     	;# 
   310  040F                     	;# 
   311  0410                     	;# 
   312  0411                     	;# 
   313  0416                     	;# 
   314  0416                     	;# 
   315  0417                     	;# 
   316  0418                     	;# 
   317  0418                     	;# 
   318  0419                     	;# 
   319  041A                     	;# 
   320  041A                     	;# 
   321  041B                     	;# 
   322  041C                     	;# 
   323  041C                     	;# 
   324  041D                     	;# 
   325  041E                     	;# 
   326  041F                     	;# 
   327  048C                     	;# 
   328  048C                     	;# 
   329  048D                     	;# 
   330  048E                     	;# 
   331  048F                     	;# 
   332  048F                     	;# 
   333  0490                     	;# 
   334  0491                     	;# 
   335  0492                     	;# 
   336  0492                     	;# 
   337  0493                     	;# 
   338  0494                     	;# 
   339  0495                     	;# 
   340  0495                     	;# 
   341  0496                     	;# 
   342  0497                     	;# 
   343  0498                     	;# 
   344  0499                     	;# 
   345  049A                     	;# 
   346  049B                     	;# 
   347  049C                     	;# 
   348  049D                     	;# 
   349  050C                     	;# 
   350  050C                     	;# 
   351  050D                     	;# 
   352  050E                     	;# 
   353  050F                     	;# 
   354  050F                     	;# 
   355  0510                     	;# 
   356  0511                     	;# 
   357  0512                     	;# 
   358  0512                     	;# 
   359  0513                     	;# 
   360  0514                     	;# 
   361  0515                     	;# 
   362  0515                     	;# 
   363  0516                     	;# 
   364  0517                     	;# 
   365  0518                     	;# 
   366  0519                     	;# 
   367  051A                     	;# 
   368  051B                     	;# 
   369  051C                     	;# 
   370  051D                     	;# 
   371  058C                     	;# 
   372  058C                     	;# 
   373  058D                     	;# 
   374  058E                     	;# 
   375  058F                     	;# 
   376  058F                     	;# 
   377  0590                     	;# 
   378  0591                     	;# 
   379  0592                     	;# 
   380  0593                     	;# 
   381  060C                     	;# 
   382  060D                     	;# 
   383  060E                     	;# 
   384  060F                     	;# 
   385  0610                     	;# 
   386  0611                     	;# 
   387  0612                     	;# 
   388  0613                     	;# 
   389  0614                     	;# 
   390  0616                     	;# 
   391  0617                     	;# 
   392  0618                     	;# 
   393  0619                     	;# 
   394  061A                     	;# 
   395  061B                     	;# 
   396  061C                     	;# 
   397  061D                     	;# 
   398  061E                     	;# 
   399  068C                     	;# 
   400  068D                     	;# 
   401  068E                     	;# 
   402  068F                     	;# 
   403  0690                     	;# 
   404  0691                     	;# 
   405  0692                     	;# 
   406  0693                     	;# 
   407  0694                     	;# 
   408  070C                     	;# 
   409  070D                     	;# 
   410  070E                     	;# 
   411  070F                     	;# 
   412  0710                     	;# 
   413  0711                     	;# 
   414  0712                     	;# 
   415  0713                     	;# 
   416  0714                     	;# 
   417  0716                     	;# 
   418  0717                     	;# 
   419  0718                     	;# 
   420  0719                     	;# 
   421  071A                     	;# 
   422  071B                     	;# 
   423  071C                     	;# 
   424  071D                     	;# 
   425  071E                     	;# 
   426  0796                     	;# 
   427  0797                     	;# 
   428  0798                     	;# 
   429  0799                     	;# 
   430  079A                     	;# 
   431  079B                     	;# 
   432  080C                     	;# 
   433  080D                     	;# 
   434  080E                     	;# 
   435  080F                     	;# 
   436  0810                     	;# 
   437  0811                     	;# 
   438  0812                     	;# 
   439  0813                     	;# 
   440  0814                     	;# 
   441  081A                     	;# 
   442  081B                     	;# 
   443  081C                     	;# 
   444  081D                     	;# 
   445  081E                     	;# 
   446  081F                     	;# 
   447  088C                     	;# 
   448  088D                     	;# 
   449  088E                     	;# 
   450  088F                     	;# 
   451  0890                     	;# 
   452  0891                     	;# 
   453  0892                     	;# 
   454  0893                     	;# 
   455  0895                     	;# 
   456  0896                     	;# 
   457  0897                     	;# 
   458  0898                     	;# 
   459  0899                     	;# 
   460  089A                     	;# 
   461  089B                     	;# 
   462  090C                     	;# 
   463  090E                     	;# 
   464  090F                     	;# 
   465  091F                     	;# 
   466  091F                     	;# 
   467  098F                     	;# 
   468  098F                     	;# 
   469  0990                     	;# 
   470  0991                     	;# 
   471  0992                     	;# 
   472  0993                     	;# 
   473  0994                     	;# 
   474  0995                     	;# 
   475  0996                     	;# 
   476  0997                     	;# 
   477  0E0F                     	;# 
   478  0E10                     	;# 
   479  0E11                     	;# 
   480  0E12                     	;# 
   481  0E13                     	;# 
   482  0E14                     	;# 
   483  0E15                     	;# 
   484  0E16                     	;# 
   485  0E17                     	;# 
   486  0E18                     	;# 
   487  0E19                     	;# 
   488  0E1A                     	;# 
   489  0E1B                     	;# 
   490  0E1C                     	;# 
   491  0E1D                     	;# 
   492  0E1E                     	;# 
   493  0E1F                     	;# 
   494  0E20                     	;# 
   495  0E21                     	;# 
   496  0E22                     	;# 
   497  0E23                     	;# 
   498  0E24                     	;# 
   499  0E25                     	;# 
   500  0E26                     	;# 
   501  0E27                     	;# 
   502  0E28                     	;# 
   503  0E29                     	;# 
   504  0E2A                     	;# 
   505  0E2B                     	;# 
   506  0E2C                     	;# 
   507  0E2D                     	;# 
   508  0E2E                     	;# 
   509  0E2F                     	;# 
   510  0E30                     	;# 
   511  0E31                     	;# 
   512  0E32                     	;# 
   513  0E33                     	;# 
   514  0E34                     	;# 
   515  0E35                     	;# 
   516  0E36                     	;# 
   517  0E37                     	;# 
   518  0E8F                     	;# 
   519  0E90                     	;# 
   520  0E91                     	;# 
   521  0E92                     	;# 
   522  0E93                     	;# 
   523  0E94                     	;# 
   524  0E95                     	;# 
   525  0E96                     	;# 
   526  0E97                     	;# 
   527  0E9C                     	;# 
   528  0E9D                     	;# 
   529  0E9E                     	;# 
   530  0EA1                     	;# 
   531  0EA2                     	;# 
   532  0EA3                     	;# 
   533  0EA4                     	;# 
   534  0EA5                     	;# 
   535  0EA9                     	;# 
   536  0EAA                     	;# 
   537  0EAB                     	;# 
   538  0EAC                     	;# 
   539  0EB1                     	;# 
   540  0EB2                     	;# 
   541  0EB3                     	;# 
   542  0EB8                     	;# 
   543  0EB9                     	;# 
   544  0EBA                     	;# 
   545  0EBB                     	;# 
   546  0EBC                     	;# 
   547  0EBD                     	;# 
   548  0EBE                     	;# 
   549  0EC3                     	;# 
   550  0EC5                     	;# 
   551  0EC6                     	;# 
   552  0EC7                     	;# 
   553  0EC8                     	;# 
   554  0EC9                     	;# 
   555  0ECA                     	;# 
   556  0ECB                     	;# 
   557  0ECC                     	;# 
   558  0F10                     	;# 
   559  0F11                     	;# 
   560  0F12                     	;# 
   561  0F13                     	;# 
   562  0F14                     	;# 
   563  0F15                     	;# 
   564  0F16                     	;# 
   565  0F17                     	;# 
   566  0F18                     	;# 
   567  0F19                     	;# 
   568  0F1A                     	;# 
   569  0F1B                     	;# 
   570  0F1C                     	;# 
   571  0F1D                     	;# 
   572  0F1E                     	;# 
   573  0F1F                     	;# 
   574  0F20                     	;# 
   575  0F21                     	;# 
   576  0F22                     	;# 
   577  0F23                     	;# 
   578  0F24                     	;# 
   579  0F25                     	;# 
   580  0F26                     	;# 
   581  0F27                     	;# 
   582  0F38                     	;# 
   583  0F39                     	;# 
   584  0F3A                     	;# 
   585  0F3B                     	;# 
   586  0F3C                     	;# 
   587  0F3D                     	;# 
   588  0F3E                     	;# 
   589  0F3F                     	;# 
   590  0F40                     	;# 
   591  0F41                     	;# 
   592  0F43                     	;# 
   593  0F44                     	;# 
   594  0F45                     	;# 
   595  0F46                     	;# 
   596  0F47                     	;# 
   597  0F48                     	;# 
   598  0F49                     	;# 
   599  0F4A                     	;# 
   600  0F4B                     	;# 
   601  0F4C                     	;# 
   602  0F4E                     	;# 
   603  0F4F                     	;# 
   604  0F50                     	;# 
   605  0F51                     	;# 
   606  0F52                     	;# 
   607  0F53                     	;# 
   608  0F54                     	;# 
   609  0F55                     	;# 
   610  0F56                     	;# 
   611  0F57                     	;# 
   612  0F65                     	;# 
   613  0F68                     	;# 
   614  0F69                     	;# 
   615  0F6A                     	;# 
   616  0F6B                     	;# 
   617  0FE4                     	;# 
   618  0FE5                     	;# 
   619  0FE6                     	;# 
   620  0FE7                     	;# 
   621  0FE8                     	;# 
   622  0FE9                     	;# 
   623  0FEA                     	;# 
   624  0FEB                     	;# 
   625  0FED                     	;# 
   626  0FEE                     	;# 
   627  0FEF                     	;# 
   628  0000                     	;# 
   629  0001                     	;# 
   630  0002                     	;# 
   631  0003                     	;# 
   632  0004                     	;# 
   633  0005                     	;# 
   634  0006                     	;# 
   635  0007                     	;# 
   636  0008                     	;# 
   637  0009                     	;# 
   638  000A                     	;# 
   639  000B                     	;# 
   640  000C                     	;# 
   641  000D                     	;# 
   642  000E                     	;# 
   643  0010                     	;# 
   644  0011                     	;# 
   645  0012                     	;# 
   646  0013                     	;# 
   647  0016                     	;# 
   648  0017                     	;# 
   649  0018                     	;# 
   650  001C                     	;# 
   651  001C                     	;# 
   652  001D                     	;# 
   653  001D                     	;# 
   654  001E                     	;# 
   655  001F                     	;# 
   656  008C                     	;# 
   657  008C                     	;# 
   658  008D                     	;# 
   659  008E                     	;# 
   660  008E                     	;# 
   661  008F                     	;# 
   662  0090                     	;# 
   663  0090                     	;# 
   664  0091                     	;# 
   665  0093                     	;# 
   666  0094                     	;# 
   667  0095                     	;# 
   668  0096                     	;# 
   669  0097                     	;# 
   670  0098                     	;# 
   671  0099                     	;# 
   672  009A                     	;# 
   673  009B                     	;# 
   674  009C                     	;# 
   675  009D                     	;# 
   676  009E                     	;# 
   677  010C                     	;# 
   678  010D                     	;# 
   679  010E                     	;# 
   680  010E                     	;# 
   681  010F                     	;# 
   682  0110                     	;# 
   683  0110                     	;# 
   684  0111                     	;# 
   685  0112                     	;# 
   686  0112                     	;# 
   687  0113                     	;# 
   688  0114                     	;# 
   689  0114                     	;# 
   690  0115                     	;# 
   691  0116                     	;# 
   692  0116                     	;# 
   693  0117                     	;# 
   694  0119                     	;# 
   695  0119                     	;# 
   696  0119                     	;# 
   697  011A                     	;# 
   698  011A                     	;# 
   699  011A                     	;# 
   700  011B                     	;# 
   701  011B                     	;# 
   702  011B                     	;# 
   703  011B                     	;# 
   704  011B                     	;# 
   705  011C                     	;# 
   706  011C                     	;# 
   707  011C                     	;# 
   708  011D                     	;# 
   709  011D                     	;# 
   710  011D                     	;# 
   711  011E                     	;# 
   712  011E                     	;# 
   713  011E                     	;# 
   714  011F                     	;# 
   715  011F                     	;# 
   716  011F                     	;# 
   717  011F                     	;# 
   718  011F                     	;# 
   719  018C                     	;# 
   720  018D                     	;# 
   721  018E                     	;# 
   722  018F                     	;# 
   723  0190                     	;# 
   724  0191                     	;# 
   725  0192                     	;# 
   726  0196                     	;# 
   727  0197                     	;# 
   728  0198                     	;# 
   729  0199                     	;# 
   730  019A                     	;# 
   731  019B                     	;# 
   732  019C                     	;# 
   733  020C                     	;# 
   734  020C                     	;# 
   735  020D                     	;# 
   736  020E                     	;# 
   737  020F                     	;# 
   738  020F                     	;# 
   739  0210                     	;# 
   740  0210                     	;# 
   741  0211                     	;# 
   742  0211                     	;# 
   743  0212                     	;# 
   744  0212                     	;# 
   745  0213                     	;# 
   746  0214                     	;# 
   747  0215                     	;# 
   748  0215                     	;# 
   749  0216                     	;# 
   750  0216                     	;# 
   751  0217                     	;# 
   752  0217                     	;# 
   753  0218                     	;# 
   754  0218                     	;# 
   755  0219                     	;# 
   756  021A                     	;# 
   757  021B                     	;# 
   758  021B                     	;# 
   759  021C                     	;# 
   760  021C                     	;# 
   761  021D                     	;# 
   762  021D                     	;# 
   763  021E                     	;# 
   764  021F                     	;# 
   765  028C                     	;# 
   766  028C                     	;# 
   767  028D                     	;# 
   768  028D                     	;# 
   769  028E                     	;# 
   770  028F                     	;# 
   771  0290                     	;# 
   772  0290                     	;# 
   773  0291                     	;# 
   774  0292                     	;# 
   775  0292                     	;# 
   776  0293                     	;# 
   777  0293                     	;# 
   778  0294                     	;# 
   779  0295                     	;# 
   780  0296                     	;# 
   781  0296                     	;# 
   782  0297                     	;# 
   783  0298                     	;# 
   784  0298                     	;# 
   785  0299                     	;# 
   786  0299                     	;# 
   787  029A                     	;# 
   788  029B                     	;# 
   789  029C                     	;# 
   790  029C                     	;# 
   791  029D                     	;# 
   792  030C                     	;# 
   793  030C                     	;# 
   794  030D                     	;# 
   795  030E                     	;# 
   796  030F                     	;# 
   797  0310                     	;# 
   798  0310                     	;# 
   799  0311                     	;# 
   800  0312                     	;# 
   801  0313                     	;# 
   802  0314                     	;# 
   803  0314                     	;# 
   804  0315                     	;# 
   805  0316                     	;# 
   806  0317                     	;# 
   807  0318                     	;# 
   808  0318                     	;# 
   809  0319                     	;# 
   810  031A                     	;# 
   811  031B                     	;# 
   812  031C                     	;# 
   813  031C                     	;# 
   814  031D                     	;# 
   815  031E                     	;# 
   816  031F                     	;# 
   817  038C                     	;# 
   818  038D                     	;# 
   819  038E                     	;# 
   820  0390                     	;# 
   821  0391                     	;# 
   822  0392                     	;# 
   823  040C                     	;# 
   824  040D                     	;# 
   825  040E                     	;# 
   826  040F                     	;# 
   827  0410                     	;# 
   828  0411                     	;# 
   829  0416                     	;# 
   830  0416                     	;# 
   831  0417                     	;# 
   832  0418                     	;# 
   833  0418                     	;# 
   834  0419                     	;# 
   835  041A                     	;# 
   836  041A                     	;# 
   837  041B                     	;# 
   838  041C                     	;# 
   839  041C                     	;# 
   840  041D                     	;# 
   841  041E                     	;# 
   842  041F                     	;# 
   843  048C                     	;# 
   844  048C                     	;# 
   845  048D                     	;# 
   846  048E                     	;# 
   847  048F                     	;# 
   848  048F                     	;# 
   849  0490                     	;# 
   850  0491                     	;# 
   851  0492                     	;# 
   852  0492                     	;# 
   853  0493                     	;# 
   854  0494                     	;# 
   855  0495                     	;# 
   856  0495                     	;# 
   857  0496                     	;# 
   858  0497                     	;# 
   859  0498                     	;# 
   860  0499                     	;# 
   861  049A                     	;# 
   862  049B                     	;# 
   863  049C                     	;# 
   864  049D                     	;# 
   865  050C                     	;# 
   866  050C                     	;# 
   867  050D                     	;# 
   868  050E                     	;# 
   869  050F                     	;# 
   870  050F                     	;# 
   871  0510                     	;# 
   872  0511                     	;# 
   873  0512                     	;# 
   874  0512                     	;# 
   875  0513                     	;# 
   876  0514                     	;# 
   877  0515                     	;# 
   878  0515                     	;# 
   879  0516                     	;# 
   880  0517                     	;# 
   881  0518                     	;# 
   882  0519                     	;# 
   883  051A                     	;# 
   884  051B                     	;# 
   885  051C                     	;# 
   886  051D                     	;# 
   887  058C                     	;# 
   888  058C                     	;# 
   889  058D                     	;# 
   890  058E                     	;# 
   891  058F                     	;# 
   892  058F                     	;# 
   893  0590                     	;# 
   894  0591                     	;# 
   895  0592                     	;# 
   896  0593                     	;# 
   897  060C                     	;# 
   898  060D                     	;# 
   899  060E                     	;# 
   900  060F                     	;# 
   901  0610                     	;# 
   902  0611                     	;# 
   903  0612                     	;# 
   904  0613                     	;# 
   905  0614                     	;# 
   906  0616                     	;# 
   907  0617                     	;# 
   908  0618                     	;# 
   909  0619                     	;# 
   910  061A                     	;# 
   911  061B                     	;# 
   912  061C                     	;# 
   913  061D                     	;# 
   914  061E                     	;# 
   915  068C                     	;# 
   916  068D                     	;# 
   917  068E                     	;# 
   918  068F                     	;# 
   919  0690                     	;# 
   920  0691                     	;# 
   921  0692                     	;# 
   922  0693                     	;# 
   923  0694                     	;# 
   924  070C                     	;# 
   925  070D                     	;# 
   926  070E                     	;# 
   927  070F                     	;# 
   928  0710                     	;# 
   929  0711                     	;# 
   930  0712                     	;# 
   931  0713                     	;# 
   932  0714                     	;# 
   933  0716                     	;# 
   934  0717                     	;# 
   935  0718                     	;# 
   936  0719                     	;# 
   937  071A                     	;# 
   938  071B                     	;# 
   939  071C                     	;# 
   940  071D                     	;# 
   941  071E                     	;# 
   942  0796                     	;# 
   943  0797                     	;# 
   944  0798                     	;# 
   945  0799                     	;# 
   946  079A                     	;# 
   947  079B                     	;# 
   948  080C                     	;# 
   949  080D                     	;# 
   950  080E                     	;# 
   951  080F                     	;# 
   952  0810                     	;# 
   953  0811                     	;# 
   954  0812                     	;# 
   955  0813                     	;# 
   956  0814                     	;# 
   957  081A                     	;# 
   958  081B                     	;# 
   959  081C                     	;# 
   960  081D                     	;# 
   961  081E                     	;# 
   962  081F                     	;# 
   963  088C                     	;# 
   964  088D                     	;# 
   965  088E                     	;# 
   966  088F                     	;# 
   967  0890                     	;# 
   968  0891                     	;# 
   969  0892                     	;# 
   970  0893                     	;# 
   971  0895                     	;# 
   972  0896                     	;# 
   973  0897                     	;# 
   974  0898                     	;# 
   975  0899                     	;# 
   976  089A                     	;# 
   977  089B                     	;# 
   978  090C                     	;# 
   979  090E                     	;# 
   980  090F                     	;# 
   981  091F                     	;# 
   982  091F                     	;# 
   983  098F                     	;# 
   984  098F                     	;# 
   985  0990                     	;# 
   986  0991                     	;# 
   987  0992                     	;# 
   988  0993                     	;# 
   989  0994                     	;# 
   990  0995                     	;# 
   991  0996                     	;# 
   992  0997                     	;# 
   993  0E0F                     	;# 
   994  0E10                     	;# 
   995  0E11                     	;# 
   996  0E12                     	;# 
   997  0E13                     	;# 
   998  0E14                     	;# 
   999  0E15                     	;# 
  1000  0E16                     	;# 
  1001  0E17                     	;# 
  1002  0E18                     	;# 
  1003  0E19                     	;# 
  1004  0E1A                     	;# 
  1005  0E1B                     	;# 
  1006  0E1C                     	;# 
  1007  0E1D                     	;# 
  1008  0E1E                     	;# 
  1009  0E1F                     	;# 
  1010  0E20                     	;# 
  1011  0E21                     	;# 
  1012  0E22                     	;# 
  1013  0E23                     	;# 
  1014  0E24                     	;# 
  1015  0E25                     	;# 
  1016  0E26                     	;# 
  1017  0E27                     	;# 
  1018  0E28                     	;# 
  1019  0E29                     	;# 
  1020  0E2A                     	;# 
  1021  0E2B                     	;# 
  1022  0E2C                     	;# 
  1023  0E2D                     	;# 
  1024  0E2E                     	;# 
  1025  0E2F                     	;# 
  1026  0E30                     	;# 
  1027  0E31                     	;# 
  1028  0E32                     	;# 
  1029  0E33                     	;# 
  1030  0E34                     	;# 
  1031  0E35                     	;# 
  1032  0E36                     	;# 
  1033  0E37                     	;# 
  1034  0E8F                     	;# 
  1035  0E90                     	;# 
  1036  0E91                     	;# 
  1037  0E92                     	;# 
  1038  0E93                     	;# 
  1039  0E94                     	;# 
  1040  0E95                     	;# 
  1041  0E96                     	;# 
  1042  0E97                     	;# 
  1043  0E9C                     	;# 
  1044  0E9D                     	;# 
  1045  0E9E                     	;# 
  1046  0EA1                     	;# 
  1047  0EA2                     	;# 
  1048  0EA3                     	;# 
  1049  0EA4                     	;# 
  1050  0EA5                     	;# 
  1051  0EA9                     	;# 
  1052  0EAA                     	;# 
  1053  0EAB                     	;# 
  1054  0EAC                     	;# 
  1055  0EB1                     	;# 
  1056  0EB2                     	;# 
  1057  0EB3                     	;# 
  1058  0EB8                     	;# 
  1059  0EB9                     	;# 
  1060  0EBA                     	;# 
  1061  0EBB                     	;# 
  1062  0EBC                     	;# 
  1063  0EBD                     	;# 
  1064  0EBE                     	;# 
  1065  0EC3                     	;# 
  1066  0EC5                     	;# 
  1067  0EC6                     	;# 
  1068  0EC7                     	;# 
  1069  0EC8                     	;# 
  1070  0EC9                     	;# 
  1071  0ECA                     	;# 
  1072  0ECB                     	;# 
  1073  0ECC                     	;# 
  1074  0F10                     	;# 
  1075  0F11                     	;# 
  1076  0F12                     	;# 
  1077  0F13                     	;# 
  1078  0F14                     	;# 
  1079  0F15                     	;# 
  1080  0F16                     	;# 
  1081  0F17                     	;# 
  1082  0F18                     	;# 
  1083  0F19                     	;# 
  1084  0F1A                     	;# 
  1085  0F1B                     	;# 
  1086  0F1C                     	;# 
  1087  0F1D                     	;# 
  1088  0F1E                     	;# 
  1089  0F1F                     	;# 
  1090  0F20                     	;# 
  1091  0F21                     	;# 
  1092  0F22                     	;# 
  1093  0F23                     	;# 
  1094  0F24                     	;# 
  1095  0F25                     	;# 
  1096  0F26                     	;# 
  1097  0F27                     	;# 
  1098  0F38                     	;# 
  1099  0F39                     	;# 
  1100  0F3A                     	;# 
  1101  0F3B                     	;# 
  1102  0F3C                     	;# 
  1103  0F3D                     	;# 
  1104  0F3E                     	;# 
  1105  0F3F                     	;# 
  1106  0F40                     	;# 
  1107  0F41                     	;# 
  1108  0F43                     	;# 
  1109  0F44                     	;# 
  1110  0F45                     	;# 
  1111  0F46                     	;# 
  1112  0F47                     	;# 
  1113  0F48                     	;# 
  1114  0F49                     	;# 
  1115  0F4A                     	;# 
  1116  0F4B                     	;# 
  1117  0F4C                     	;# 
  1118  0F4E                     	;# 
  1119  0F4F                     	;# 
  1120  0F50                     	;# 
  1121  0F51                     	;# 
  1122  0F52                     	;# 
  1123  0F53                     	;# 
  1124  0F54                     	;# 
  1125  0F55                     	;# 
  1126  0F56                     	;# 
  1127  0F57                     	;# 
  1128  0F65                     	;# 
  1129  0F68                     	;# 
  1130  0F69                     	;# 
  1131  0F6A                     	;# 
  1132  0F6B                     	;# 
  1133  0FE4                     	;# 
  1134  0FE5                     	;# 
  1135  0FE6                     	;# 
  1136  0FE7                     	;# 
  1137  0FE8                     	;# 
  1138  0FE9                     	;# 
  1139  0FEA                     	;# 
  1140  0FEB                     	;# 
  1141  0FED                     	;# 
  1142  0FEE                     	;# 
  1143  0FEF                     	;# 
  1144  0000                     	;# 
  1145  0001                     	;# 
  1146  0002                     	;# 
  1147  0003                     	;# 
  1148  0004                     	;# 
  1149  0005                     	;# 
  1150  0006                     	;# 
  1151  0007                     	;# 
  1152  0008                     	;# 
  1153  0009                     	;# 
  1154  000A                     	;# 
  1155  000B                     	;# 
  1156  000C                     	;# 
  1157  000D                     	;# 
  1158  000E                     	;# 
  1159  0010                     	;# 
  1160  0011                     	;# 
  1161  0012                     	;# 
  1162  0013                     	;# 
  1163  0016                     	;# 
  1164  0017                     	;# 
  1165  0018                     	;# 
  1166  001C                     	;# 
  1167  001C                     	;# 
  1168  001D                     	;# 
  1169  001D                     	;# 
  1170  001E                     	;# 
  1171  001F                     	;# 
  1172  008C                     	;# 
  1173  008C                     	;# 
  1174  008D                     	;# 
  1175  008E                     	;# 
  1176  008E                     	;# 
  1177  008F                     	;# 
  1178  0090                     	;# 
  1179  0090                     	;# 
  1180  0091                     	;# 
  1181  0093                     	;# 
  1182  0094                     	;# 
  1183  0095                     	;# 
  1184  0096                     	;# 
  1185  0097                     	;# 
  1186  0098                     	;# 
  1187  0099                     	;# 
  1188  009A                     	;# 
  1189  009B                     	;# 
  1190  009C                     	;# 
  1191  009D                     	;# 
  1192  009E                     	;# 
  1193  010C                     	;# 
  1194  010D                     	;# 
  1195  010E                     	;# 
  1196  010E                     	;# 
  1197  010F                     	;# 
  1198  0110                     	;# 
  1199  0110                     	;# 
  1200  0111                     	;# 
  1201  0112                     	;# 
  1202  0112                     	;# 
  1203  0113                     	;# 
  1204  0114                     	;# 
  1205  0114                     	;# 
  1206  0115                     	;# 
  1207  0116                     	;# 
  1208  0116                     	;# 
  1209  0117                     	;# 
  1210  0119                     	;# 
  1211  0119                     	;# 
  1212  0119                     	;# 
  1213  011A                     	;# 
  1214  011A                     	;# 
  1215  011A                     	;# 
  1216  011B                     	;# 
  1217  011B                     	;# 
  1218  011B                     	;# 
  1219  011B                     	;# 
  1220  011B                     	;# 
  1221  011C                     	;# 
  1222  011C                     	;# 
  1223  011C                     	;# 
  1224  011D                     	;# 
  1225  011D                     	;# 
  1226  011D                     	;# 
  1227  011E                     	;# 
  1228  011E                     	;# 
  1229  011E                     	;# 
  1230  011F                     	;# 
  1231  011F                     	;# 
  1232  011F                     	;# 
  1233  011F                     	;# 
  1234  011F                     	;# 
  1235  018C                     	;# 
  1236  018D                     	;# 
  1237  018E                     	;# 
  1238  018F                     	;# 
  1239  0190                     	;# 
  1240  0191                     	;# 
  1241  0192                     	;# 
  1242  0196                     	;# 
  1243  0197                     	;# 
  1244  0198                     	;# 
  1245  0199                     	;# 
  1246  019A                     	;# 
  1247  019B                     	;# 
  1248  019C                     	;# 
  1249  020C                     	;# 
  1250  020C                     	;# 
  1251  020D                     	;# 
  1252  020E                     	;# 
  1253  020F                     	;# 
  1254  020F                     	;# 
  1255  0210                     	;# 
  1256  0210                     	;# 
  1257  0211                     	;# 
  1258  0211                     	;# 
  1259  0212                     	;# 
  1260  0212                     	;# 
  1261  0213                     	;# 
  1262  0214                     	;# 
  1263  0215                     	;# 
  1264  0215                     	;# 
  1265  0216                     	;# 
  1266  0216                     	;# 
  1267  0217                     	;# 
  1268  0217                     	;# 
  1269  0218                     	;# 
  1270  0218                     	;# 
  1271  0219                     	;# 
  1272  021A                     	;# 
  1273  021B                     	;# 
  1274  021B                     	;# 
  1275  021C                     	;# 
  1276  021C                     	;# 
  1277  021D                     	;# 
  1278  021D                     	;# 
  1279  021E                     	;# 
  1280  021F                     	;# 
  1281  028C                     	;# 
  1282  028C                     	;# 
  1283  028D                     	;# 
  1284  028D                     	;# 
  1285  028E                     	;# 
  1286  028F                     	;# 
  1287  0290                     	;# 
  1288  0290                     	;# 
  1289  0291                     	;# 
  1290  0292                     	;# 
  1291  0292                     	;# 
  1292  0293                     	;# 
  1293  0293                     	;# 
  1294  0294                     	;# 
  1295  0295                     	;# 
  1296  0296                     	;# 
  1297  0296                     	;# 
  1298  0297                     	;# 
  1299  0298                     	;# 
  1300  0298                     	;# 
  1301  0299                     	;# 
  1302  0299                     	;# 
  1303  029A                     	;# 
  1304  029B                     	;# 
  1305  029C                     	;# 
  1306  029C                     	;# 
  1307  029D                     	;# 
  1308  030C                     	;# 
  1309  030C                     	;# 
  1310  030D                     	;# 
  1311  030E                     	;# 
  1312  030F                     	;# 
  1313  0310                     	;# 
  1314  0310                     	;# 
  1315  0311                     	;# 
  1316  0312                     	;# 
  1317  0313                     	;# 
  1318  0314                     	;# 
  1319  0314                     	;# 
  1320  0315                     	;# 
  1321  0316                     	;# 
  1322  0317                     	;# 
  1323  0318                     	;# 
  1324  0318                     	;# 
  1325  0319                     	;# 
  1326  031A                     	;# 
  1327  031B                     	;# 
  1328  031C                     	;# 
  1329  031C                     	;# 
  1330  031D                     	;# 
  1331  031E                     	;# 
  1332  031F                     	;# 
  1333  038C                     	;# 
  1334  038D                     	;# 
  1335  038E                     	;# 
  1336  0390                     	;# 
  1337  0391                     	;# 
  1338  0392                     	;# 
  1339  040C                     	;# 
  1340  040D                     	;# 
  1341  040E                     	;# 
  1342  040F                     	;# 
  1343  0410                     	;# 
  1344  0411                     	;# 
  1345  0416                     	;# 
  1346  0416                     	;# 
  1347  0417                     	;# 
  1348  0418                     	;# 
  1349  0418                     	;# 
  1350  0419                     	;# 
  1351  041A                     	;# 
  1352  041A                     	;# 
  1353  041B                     	;# 
  1354  041C                     	;# 
  1355  041C                     	;# 
  1356  041D                     	;# 
  1357  041E                     	;# 
  1358  041F                     	;# 
  1359  048C                     	;# 
  1360  048C                     	;# 
  1361  048D                     	;# 
  1362  048E                     	;# 
  1363  048F                     	;# 
  1364  048F                     	;# 
  1365  0490                     	;# 
  1366  0491                     	;# 
  1367  0492                     	;# 
  1368  0492                     	;# 
  1369  0493                     	;# 
  1370  0494                     	;# 
  1371  0495                     	;# 
  1372  0495                     	;# 
  1373  0496                     	;# 
  1374  0497                     	;# 
  1375  0498                     	;# 
  1376  0499                     	;# 
  1377  049A                     	;# 
  1378  049B                     	;# 
  1379  049C                     	;# 
  1380  049D                     	;# 
  1381  050C                     	;# 
  1382  050C                     	;# 
  1383  050D                     	;# 
  1384  050E                     	;# 
  1385  050F                     	;# 
  1386  050F                     	;# 
  1387  0510                     	;# 
  1388  0511                     	;# 
  1389  0512                     	;# 
  1390  0512                     	;# 
  1391  0513                     	;# 
  1392  0514                     	;# 
  1393  0515                     	;# 
  1394  0515                     	;# 
  1395  0516                     	;# 
  1396  0517                     	;# 
  1397  0518                     	;# 
  1398  0519                     	;# 
  1399  051A                     	;# 
  1400  051B                     	;# 
  1401  051C                     	;# 
  1402  051D                     	;# 
  1403  058C                     	;# 
  1404  058C                     	;# 
  1405  058D                     	;# 
  1406  058E                     	;# 
  1407  058F                     	;# 
  1408  058F                     	;# 
  1409  0590                     	;# 
  1410  0591                     	;# 
  1411  0592                     	;# 
  1412  0593                     	;# 
  1413  060C                     	;# 
  1414  060D                     	;# 
  1415  060E                     	;# 
  1416  060F                     	;# 
  1417  0610                     	;# 
  1418  0611                     	;# 
  1419  0612                     	;# 
  1420  0613                     	;# 
  1421  0614                     	;# 
  1422  0616                     	;# 
  1423  0617                     	;# 
  1424  0618                     	;# 
  1425  0619                     	;# 
  1426  061A                     	;# 
  1427  061B                     	;# 
  1428  061C                     	;# 
  1429  061D                     	;# 
  1430  061E                     	;# 
  1431  068C                     	;# 
  1432  068D                     	;# 
  1433  068E                     	;# 
  1434  068F                     	;# 
  1435  0690                     	;# 
  1436  0691                     	;# 
  1437  0692                     	;# 
  1438  0693                     	;# 
  1439  0694                     	;# 
  1440  070C                     	;# 
  1441  070D                     	;# 
  1442  070E                     	;# 
  1443  070F                     	;# 
  1444  0710                     	;# 
  1445  0711                     	;# 
  1446  0712                     	;# 
  1447  0713                     	;# 
  1448  0714                     	;# 
  1449  0716                     	;# 
  1450  0717                     	;# 
  1451  0718                     	;# 
  1452  0719                     	;# 
  1453  071A                     	;# 
  1454  071B                     	;# 
  1455  071C                     	;# 
  1456  071D                     	;# 
  1457  071E                     	;# 
  1458  0796                     	;# 
  1459  0797                     	;# 
  1460  0798                     	;# 
  1461  0799                     	;# 
  1462  079A                     	;# 
  1463  079B                     	;# 
  1464  080C                     	;# 
  1465  080D                     	;# 
  1466  080E                     	;# 
  1467  080F                     	;# 
  1468  0810                     	;# 
  1469  0811                     	;# 
  1470  0812                     	;# 
  1471  0813                     	;# 
  1472  0814                     	;# 
  1473  081A                     	;# 
  1474  081B                     	;# 
  1475  081C                     	;# 
  1476  081D                     	;# 
  1477  081E                     	;# 
  1478  081F                     	;# 
  1479  088C                     	;# 
  1480  088D                     	;# 
  1481  088E                     	;# 
  1482  088F                     	;# 
  1483  0890                     	;# 
  1484  0891                     	;# 
  1485  0892                     	;# 
  1486  0893                     	;# 
  1487  0895                     	;# 
  1488  0896                     	;# 
  1489  0897                     	;# 
  1490  0898                     	;# 
  1491  0899                     	;# 
  1492  089A                     	;# 
  1493  089B                     	;# 
  1494  090C                     	;# 
  1495  090E                     	;# 
  1496  090F                     	;# 
  1497  091F                     	;# 
  1498  091F                     	;# 
  1499  098F                     	;# 
  1500  098F                     	;# 
  1501  0990                     	;# 
  1502  0991                     	;# 
  1503  0992                     	;# 
  1504  0993                     	;# 
  1505  0994                     	;# 
  1506  0995                     	;# 
  1507  0996                     	;# 
  1508  0997                     	;# 
  1509  0E0F                     	;# 
  1510  0E10                     	;# 
  1511  0E11                     	;# 
  1512  0E12                     	;# 
  1513  0E13                     	;# 
  1514  0E14                     	;# 
  1515  0E15                     	;# 
  1516  0E16                     	;# 
  1517  0E17                     	;# 
  1518  0E18                     	;# 
  1519  0E19                     	;# 
  1520  0E1A                     	;# 
  1521  0E1B                     	;# 
  1522  0E1C                     	;# 
  1523  0E1D                     	;# 
  1524  0E1E                     	;# 
  1525  0E1F                     	;# 
  1526  0E20                     	;# 
  1527  0E21                     	;# 
  1528  0E22                     	;# 
  1529  0E23                     	;# 
  1530  0E24                     	;# 
  1531  0E25                     	;# 
  1532  0E26                     	;# 
  1533  0E27                     	;# 
  1534  0E28                     	;# 
  1535  0E29                     	;# 
  1536  0E2A                     	;# 
  1537  0E2B                     	;# 
  1538  0E2C                     	;# 
  1539  0E2D                     	;# 
  1540  0E2E                     	;# 
  1541  0E2F                     	;# 
  1542  0E30                     	;# 
  1543  0E31                     	;# 
  1544  0E32                     	;# 
  1545  0E33                     	;# 
  1546  0E34                     	;# 
  1547  0E35                     	;# 
  1548  0E36                     	;# 
  1549  0E37                     	;# 
  1550  0E8F                     	;# 
  1551  0E90                     	;# 
  1552  0E91                     	;# 
  1553  0E92                     	;# 
  1554  0E93                     	;# 
  1555  0E94                     	;# 
  1556  0E95                     	;# 
  1557  0E96                     	;# 
  1558  0E97                     	;# 
  1559  0E9C                     	;# 
  1560  0E9D                     	;# 
  1561  0E9E                     	;# 
  1562  0EA1                     	;# 
  1563  0EA2                     	;# 
  1564  0EA3                     	;# 
  1565  0EA4                     	;# 
  1566  0EA5                     	;# 
  1567  0EA9                     	;# 
  1568  0EAA                     	;# 
  1569  0EAB                     	;# 
  1570  0EAC                     	;# 
  1571  0EB1                     	;# 
  1572  0EB2                     	;# 
  1573  0EB3                     	;# 
  1574  0EB8                     	;# 
  1575  0EB9                     	;# 
  1576  0EBA                     	;# 
  1577  0EBB                     	;# 
  1578  0EBC                     	;# 
  1579  0EBD                     	;# 
  1580  0EBE                     	;# 
  1581  0EC3                     	;# 
  1582  0EC5                     	;# 
  1583  0EC6                     	;# 
  1584  0EC7                     	;# 
  1585  0EC8                     	;# 
  1586  0EC9                     	;# 
  1587  0ECA                     	;# 
  1588  0ECB                     	;# 
  1589  0ECC                     	;# 
  1590  0F10                     	;# 
  1591  0F11                     	;# 
  1592  0F12                     	;# 
  1593  0F13                     	;# 
  1594  0F14                     	;# 
  1595  0F15                     	;# 
  1596  0F16                     	;# 
  1597  0F17                     	;# 
  1598  0F18                     	;# 
  1599  0F19                     	;# 
  1600  0F1A                     	;# 
  1601  0F1B                     	;# 
  1602  0F1C                     	;# 
  1603  0F1D                     	;# 
  1604  0F1E                     	;# 
  1605  0F1F                     	;# 
  1606  0F20                     	;# 
  1607  0F21                     	;# 
  1608  0F22                     	;# 
  1609  0F23                     	;# 
  1610  0F24                     	;# 
  1611  0F25                     	;# 
  1612  0F26                     	;# 
  1613  0F27                     	;# 
  1614  0F38                     	;# 
  1615  0F39                     	;# 
  1616  0F3A                     	;# 
  1617  0F3B                     	;# 
  1618  0F3C                     	;# 
  1619  0F3D                     	;# 
  1620  0F3E                     	;# 
  1621  0F3F                     	;# 
  1622  0F40                     	;# 
  1623  0F41                     	;# 
  1624  0F43                     	;# 
  1625  0F44                     	;# 
  1626  0F45                     	;# 
  1627  0F46                     	;# 
  1628  0F47                     	;# 
  1629  0F48                     	;# 
  1630  0F49                     	;# 
  1631  0F4A                     	;# 
  1632  0F4B                     	;# 
  1633  0F4C                     	;# 
  1634  0F4E                     	;# 
  1635  0F4F                     	;# 
  1636  0F50                     	;# 
  1637  0F51                     	;# 
  1638  0F52                     	;# 
  1639  0F53                     	;# 
  1640  0F54                     	;# 
  1641  0F55                     	;# 
  1642  0F56                     	;# 
  1643  0F57                     	;# 
  1644  0F65                     	;# 
  1645  0F68                     	;# 
  1646  0F69                     	;# 
  1647  0F6A                     	;# 
  1648  0F6B                     	;# 
  1649  0FE4                     	;# 
  1650  0FE5                     	;# 
  1651  0FE6                     	;# 
  1652  0FE7                     	;# 
  1653  0FE8                     	;# 
  1654  0FE9                     	;# 
  1655  0FEA                     	;# 
  1656  0FEB                     	;# 
  1657  0FED                     	;# 
  1658  0FEE                     	;# 
  1659  0FEF                     	;# 
  1660  0000                     	;# 
  1661  0001                     	;# 
  1662  0002                     	;# 
  1663  0003                     	;# 
  1664  0004                     	;# 
  1665  0005                     	;# 
  1666  0006                     	;# 
  1667  0007                     	;# 
  1668  0008                     	;# 
  1669  0009                     	;# 
  1670  000A                     	;# 
  1671  000B                     	;# 
  1672  000C                     	;# 
  1673  000D                     	;# 
  1674  000E                     	;# 
  1675  0010                     	;# 
  1676  0011                     	;# 
  1677  0012                     	;# 
  1678  0013                     	;# 
  1679  0016                     	;# 
  1680  0017                     	;# 
  1681  0018                     	;# 
  1682  001C                     	;# 
  1683  001C                     	;# 
  1684  001D                     	;# 
  1685  001D                     	;# 
  1686  001E                     	;# 
  1687  001F                     	;# 
  1688  008C                     	;# 
  1689  008C                     	;# 
  1690  008D                     	;# 
  1691  008E                     	;# 
  1692  008E                     	;# 
  1693  008F                     	;# 
  1694  0090                     	;# 
  1695  0090                     	;# 
  1696  0091                     	;# 
  1697  0093                     	;# 
  1698  0094                     	;# 
  1699  0095                     	;# 
  1700  0096                     	;# 
  1701  0097                     	;# 
  1702  0098                     	;# 
  1703  0099                     	;# 
  1704  009A                     	;# 
  1705  009B                     	;# 
  1706  009C                     	;# 
  1707  009D                     	;# 
  1708  009E                     	;# 
  1709  010C                     	;# 
  1710  010D                     	;# 
  1711  010E                     	;# 
  1712  010E                     	;# 
  1713  010F                     	;# 
  1714  0110                     	;# 
  1715  0110                     	;# 
  1716  0111                     	;# 
  1717  0112                     	;# 
  1718  0112                     	;# 
  1719  0113                     	;# 
  1720  0114                     	;# 
  1721  0114                     	;# 
  1722  0115                     	;# 
  1723  0116                     	;# 
  1724  0116                     	;# 
  1725  0117                     	;# 
  1726  0119                     	;# 
  1727  0119                     	;# 
  1728  0119                     	;# 
  1729  011A                     	;# 
  1730  011A                     	;# 
  1731  011A                     	;# 
  1732  011B                     	;# 
  1733  011B                     	;# 
  1734  011B                     	;# 
  1735  011B                     	;# 
  1736  011B                     	;# 
  1737  011C                     	;# 
  1738  011C                     	;# 
  1739  011C                     	;# 
  1740  011D                     	;# 
  1741  011D                     	;# 
  1742  011D                     	;# 
  1743  011E                     	;# 
  1744  011E                     	;# 
  1745  011E                     	;# 
  1746  011F                     	;# 
  1747  011F                     	;# 
  1748  011F                     	;# 
  1749  011F                     	;# 
  1750  011F                     	;# 
  1751  018C                     	;# 
  1752  018D                     	;# 
  1753  018E                     	;# 
  1754  018F                     	;# 
  1755  0190                     	;# 
  1756  0191                     	;# 
  1757  0192                     	;# 
  1758  0196                     	;# 
  1759  0197                     	;# 
  1760  0198                     	;# 
  1761  0199                     	;# 
  1762  019A                     	;# 
  1763  019B                     	;# 
  1764  019C                     	;# 
  1765  020C                     	;# 
  1766  020C                     	;# 
  1767  020D                     	;# 
  1768  020E                     	;# 
  1769  020F                     	;# 
  1770  020F                     	;# 
  1771  0210                     	;# 
  1772  0210                     	;# 
  1773  0211                     	;# 
  1774  0211                     	;# 
  1775  0212                     	;# 
  1776  0212                     	;# 
  1777  0213                     	;# 
  1778  0214                     	;# 
  1779  0215                     	;# 
  1780  0215                     	;# 
  1781  0216                     	;# 
  1782  0216                     	;# 
  1783  0217                     	;# 
  1784  0217                     	;# 
  1785  0218                     	;# 
  1786  0218                     	;# 
  1787  0219                     	;# 
  1788  021A                     	;# 
  1789  021B                     	;# 
  1790  021B                     	;# 
  1791  021C                     	;# 
  1792  021C                     	;# 
  1793  021D                     	;# 
  1794  021D                     	;# 
  1795  021E                     	;# 
  1796  021F                     	;# 
  1797  028C                     	;# 
  1798  028C                     	;# 
  1799  028D                     	;# 
  1800  028D                     	;# 
  1801  028E                     	;# 
  1802  028F                     	;# 
  1803  0290                     	;# 
  1804  0290                     	;# 
  1805  0291                     	;# 
  1806  0292                     	;# 
  1807  0292                     	;# 
  1808  0293                     	;# 
  1809  0293                     	;# 
  1810  0294                     	;# 
  1811  0295                     	;# 
  1812  0296                     	;# 
  1813  0296                     	;# 
  1814  0297                     	;# 
  1815  0298                     	;# 
  1816  0298                     	;# 
  1817  0299                     	;# 
  1818  0299                     	;# 
  1819  029A                     	;# 
  1820  029B                     	;# 
  1821  029C                     	;# 
  1822  029C                     	;# 
  1823  029D                     	;# 
  1824  030C                     	;# 
  1825  030C                     	;# 
  1826  030D                     	;# 
  1827  030E                     	;# 
  1828  030F                     	;# 
  1829  0310                     	;# 
  1830  0310                     	;# 
  1831  0311                     	;# 
  1832  0312                     	;# 
  1833  0313                     	;# 
  1834  0314                     	;# 
  1835  0314                     	;# 
  1836  0315                     	;# 
  1837  0316                     	;# 
  1838  0317                     	;# 
  1839  0318                     	;# 
  1840  0318                     	;# 
  1841  0319                     	;# 
  1842  031A                     	;# 
  1843  031B                     	;# 
  1844  031C                     	;# 
  1845  031C                     	;# 
  1846  031D                     	;# 
  1847  031E                     	;# 
  1848  031F                     	;# 
  1849  038C                     	;# 
  1850  038D                     	;# 
  1851  038E                     	;# 
  1852  0390                     	;# 
  1853  0391                     	;# 
  1854  0392                     	;# 
  1855  040C                     	;# 
  1856  040D                     	;# 
  1857  040E                     	;# 
  1858  040F                     	;# 
  1859  0410                     	;# 
  1860  0411                     	;# 
  1861  0416                     	;# 
  1862  0416                     	;# 
  1863  0417                     	;# 
  1864  0418                     	;# 
  1865  0418                     	;# 
  1866  0419                     	;# 
  1867  041A                     	;# 
  1868  041A                     	;# 
  1869  041B                     	;# 
  1870  041C                     	;# 
  1871  041C                     	;# 
  1872  041D                     	;# 
  1873  041E                     	;# 
  1874  041F                     	;# 
  1875  048C                     	;# 
  1876  048C                     	;# 
  1877  048D                     	;# 
  1878  048E                     	;# 
  1879  048F                     	;# 
  1880  048F                     	;# 
  1881  0490                     	;# 
  1882  0491                     	;# 
  1883  0492                     	;# 
  1884  0492                     	;# 
  1885  0493                     	;# 
  1886  0494                     	;# 
  1887  0495                     	;# 
  1888  0495                     	;# 
  1889  0496                     	;# 
  1890  0497                     	;# 
  1891  0498                     	;# 
  1892  0499                     	;# 
  1893  049A                     	;# 
  1894  049B                     	;# 
  1895  049C                     	;# 
  1896  049D                     	;# 
  1897  050C                     	;# 
  1898  050C                     	;# 
  1899  050D                     	;# 
  1900  050E                     	;# 
  1901  050F                     	;# 
  1902  050F                     	;# 
  1903  0510                     	;# 
  1904  0511                     	;# 
  1905  0512                     	;# 
  1906  0512                     	;# 
  1907  0513                     	;# 
  1908  0514                     	;# 
  1909  0515                     	;# 
  1910  0515                     	;# 
  1911  0516                     	;# 
  1912  0517                     	;# 
  1913  0518                     	;# 
  1914  0519                     	;# 
  1915  051A                     	;# 
  1916  051B                     	;# 
  1917  051C                     	;# 
  1918  051D                     	;# 
  1919  058C                     	;# 
  1920  058C                     	;# 
  1921  058D                     	;# 
  1922  058E                     	;# 
  1923  058F                     	;# 
  1924  058F                     	;# 
  1925  0590                     	;# 
  1926  0591                     	;# 
  1927  0592                     	;# 
  1928  0593                     	;# 
  1929  060C                     	;# 
  1930  060D                     	;# 
  1931  060E                     	;# 
  1932  060F                     	;# 
  1933  0610                     	;# 
  1934  0611                     	;# 
  1935  0612                     	;# 
  1936  0613                     	;# 
  1937  0614                     	;# 
  1938  0616                     	;# 
  1939  0617                     	;# 
  1940  0618                     	;# 
  1941  0619                     	;# 
  1942  061A                     	;# 
  1943  061B                     	;# 
  1944  061C                     	;# 
  1945  061D                     	;# 
  1946  061E                     	;# 
  1947  068C                     	;# 
  1948  068D                     	;# 
  1949  068E                     	;# 
  1950  068F                     	;# 
  1951  0690                     	;# 
  1952  0691                     	;# 
  1953  0692                     	;# 
  1954  0693                     	;# 
  1955  0694                     	;# 
  1956  070C                     	;# 
  1957  070D                     	;# 
  1958  070E                     	;# 
  1959  070F                     	;# 
  1960  0710                     	;# 
  1961  0711                     	;# 
  1962  0712                     	;# 
  1963  0713                     	;# 
  1964  0714                     	;# 
  1965  0716                     	;# 
  1966  0717                     	;# 
  1967  0718                     	;# 
  1968  0719                     	;# 
  1969  071A                     	;# 
  1970  071B                     	;# 
  1971  071C                     	;# 
  1972  071D                     	;# 
  1973  071E                     	;# 
  1974  0796                     	;# 
  1975  0797                     	;# 
  1976  0798                     	;# 
  1977  0799                     	;# 
  1978  079A                     	;# 
  1979  079B                     	;# 
  1980  080C                     	;# 
  1981  080D                     	;# 
  1982  080E                     	;# 
  1983  080F                     	;# 
  1984  0810                     	;# 
  1985  0811                     	;# 
  1986  0812                     	;# 
  1987  0813                     	;# 
  1988  0814                     	;# 
  1989  081A                     	;# 
  1990  081B                     	;# 
  1991  081C                     	;# 
  1992  081D                     	;# 
  1993  081E                     	;# 
  1994  081F                     	;# 
  1995  088C                     	;# 
  1996  088D                     	;# 
  1997  088E                     	;# 
  1998  088F                     	;# 
  1999  0890                     	;# 
  2000  0891                     	;# 
  2001  0892                     	;# 
  2002  0893                     	;# 
  2003  0895                     	;# 
  2004  0896                     	;# 
  2005  0897                     	;# 
  2006  0898                     	;# 
  2007  0899                     	;# 
  2008  089A                     	;# 
  2009  089B                     	;# 
  2010  090C                     	;# 
  2011  090E                     	;# 
  2012  090F                     	;# 
  2013  091F                     	;# 
  2014  091F                     	;# 
  2015  098F                     	;# 
  2016  098F                     	;# 
  2017  0990                     	;# 
  2018  0991                     	;# 
  2019  0992                     	;# 
  2020  0993                     	;# 
  2021  0994                     	;# 
  2022  0995                     	;# 
  2023  0996                     	;# 
  2024  0997                     	;# 
  2025  0E0F                     	;# 
  2026  0E10                     	;# 
  2027  0E11                     	;# 
  2028  0E12                     	;# 
  2029  0E13                     	;# 
  2030  0E14                     	;# 
  2031  0E15                     	;# 
  2032  0E16                     	;# 
  2033  0E17                     	;# 
  2034  0E18                     	;# 
  2035  0E19                     	;# 
  2036  0E1A                     	;# 
  2037  0E1B                     	;# 
  2038  0E1C                     	;# 
  2039  0E1D                     	;# 
  2040  0E1E                     	;# 
  2041  0E1F                     	;# 
  2042  0E20                     	;# 
  2043  0E21                     	;# 
  2044  0E22                     	;# 
  2045  0E23                     	;# 
  2046  0E24                     	;# 
  2047  0E25                     	;# 
  2048  0E26                     	;# 
  2049  0E27                     	;# 
  2050  0E28                     	;# 
  2051  0E29                     	;# 
  2052  0E2A                     	;# 
  2053  0E2B                     	;# 
  2054  0E2C                     	;# 
  2055  0E2D                     	;# 
  2056  0E2E                     	;# 
  2057  0E2F                     	;# 
  2058  0E30                     	;# 
  2059  0E31                     	;# 
  2060  0E32                     	;# 
  2061  0E33                     	;# 
  2062  0E34                     	;# 
  2063  0E35                     	;# 
  2064  0E36                     	;# 
  2065  0E37                     	;# 
  2066  0E8F                     	;# 
  2067  0E90                     	;# 
  2068  0E91                     	;# 
  2069  0E92                     	;# 
  2070  0E93                     	;# 
  2071  0E94                     	;# 
  2072  0E95                     	;# 
  2073  0E96                     	;# 
  2074  0E97                     	;# 
  2075  0E9C                     	;# 
  2076  0E9D                     	;# 
  2077  0E9E                     	;# 
  2078  0EA1                     	;# 
  2079  0EA2                     	;# 
  2080  0EA3                     	;# 
  2081  0EA4                     	;# 
  2082  0EA5                     	;# 
  2083  0EA9                     	;# 
  2084  0EAA                     	;# 
  2085  0EAB                     	;# 
  2086  0EAC                     	;# 
  2087  0EB1                     	;# 
  2088  0EB2                     	;# 
  2089  0EB3                     	;# 
  2090  0EB8                     	;# 
  2091  0EB9                     	;# 
  2092  0EBA                     	;# 
  2093  0EBB                     	;# 
  2094  0EBC                     	;# 
  2095  0EBD                     	;# 
  2096  0EBE                     	;# 
  2097  0EC3                     	;# 
  2098  0EC5                     	;# 
  2099  0EC6                     	;# 
  2100  0EC7                     	;# 
  2101  0EC8                     	;# 
  2102  0EC9                     	;# 
  2103  0ECA                     	;# 
  2104  0ECB                     	;# 
  2105  0ECC                     	;# 
  2106  0F10                     	;# 
  2107  0F11                     	;# 
  2108  0F12                     	;# 
  2109  0F13                     	;# 
  2110  0F14                     	;# 
  2111  0F15                     	;# 
  2112  0F16                     	;# 
  2113  0F17                     	;# 
  2114  0F18                     	;# 
  2115  0F19                     	;# 
  2116  0F1A                     	;# 
  2117  0F1B                     	;# 
  2118  0F1C                     	;# 
  2119  0F1D                     	;# 
  2120  0F1E                     	;# 
  2121  0F1F                     	;# 
  2122  0F20                     	;# 
  2123  0F21                     	;# 
  2124  0F22                     	;# 
  2125  0F23                     	;# 
  2126  0F24                     	;# 
  2127  0F25                     	;# 
  2128  0F26                     	;# 
  2129  0F27                     	;# 
  2130  0F38                     	;# 
  2131  0F39                     	;# 
  2132  0F3A                     	;# 
  2133  0F3B                     	;# 
  2134  0F3C                     	;# 
  2135  0F3D                     	;# 
  2136  0F3E                     	;# 
  2137  0F3F                     	;# 
  2138  0F40                     	;# 
  2139  0F41                     	;# 
  2140  0F43                     	;# 
  2141  0F44                     	;# 
  2142  0F45                     	;# 
  2143  0F46                     	;# 
  2144  0F47                     	;# 
  2145  0F48                     	;# 
  2146  0F49                     	;# 
  2147  0F4A                     	;# 
  2148  0F4B                     	;# 
  2149  0F4C                     	;# 
  2150  0F4E                     	;# 
  2151  0F4F                     	;# 
  2152  0F50                     	;# 
  2153  0F51                     	;# 
  2154  0F52                     	;# 
  2155  0F53                     	;# 
  2156  0F54                     	;# 
  2157  0F55                     	;# 
  2158  0F56                     	;# 
  2159  0F57                     	;# 
  2160  0F65                     	;# 
  2161  0F68                     	;# 
  2162  0F69                     	;# 
  2163  0F6A                     	;# 
  2164  0F6B                     	;# 
  2165  0FE4                     	;# 
  2166  0FE5                     	;# 
  2167  0FE6                     	;# 
  2168  0FE7                     	;# 
  2169  0FE8                     	;# 
  2170  0FE9                     	;# 
  2171  0FEA                     	;# 
  2172  0FEB                     	;# 
  2173  0FED                     	;# 
  2174  0FEE                     	;# 
  2175  0FEF                     	;# 
  2176  0000                     	;# 
  2177  0001                     	;# 
  2178  0002                     	;# 
  2179  0003                     	;# 
  2180  0004                     	;# 
  2181  0005                     	;# 
  2182  0006                     	;# 
  2183  0007                     	;# 
  2184  0008                     	;# 
  2185  0009                     	;# 
  2186  000A                     	;# 
  2187  000B                     	;# 
  2188  000C                     	;# 
  2189  000D                     	;# 
  2190  000E                     	;# 
  2191  0010                     	;# 
  2192  0011                     	;# 
  2193  0012                     	;# 
  2194  0013                     	;# 
  2195  0016                     	;# 
  2196  0017                     	;# 
  2197  0018                     	;# 
  2198  001C                     	;# 
  2199  001C                     	;# 
  2200  001D                     	;# 
  2201  001D                     	;# 
  2202  001E                     	;# 
  2203  001F                     	;# 
  2204  008C                     	;# 
  2205  008C                     	;# 
  2206  008D                     	;# 
  2207  008E                     	;# 
  2208  008E                     	;# 
  2209  008F                     	;# 
  2210  0090                     	;# 
  2211  0090                     	;# 
  2212  0091                     	;# 
  2213  0093                     	;# 
  2214  0094                     	;# 
  2215  0095                     	;# 
  2216  0096                     	;# 
  2217  0097                     	;# 
  2218  0098                     	;# 
  2219  0099                     	;# 
  2220  009A                     	;# 
  2221  009B                     	;# 
  2222  009C                     	;# 
  2223  009D                     	;# 
  2224  009E                     	;# 
  2225  010C                     	;# 
  2226  010D                     	;# 
  2227  010E                     	;# 
  2228  010E                     	;# 
  2229  010F                     	;# 
  2230  0110                     	;# 
  2231  0110                     	;# 
  2232  0111                     	;# 
  2233  0112                     	;# 
  2234  0112                     	;# 
  2235  0113                     	;# 
  2236  0114                     	;# 
  2237  0114                     	;# 
  2238  0115                     	;# 
  2239  0116                     	;# 
  2240  0116                     	;# 
  2241  0117                     	;# 
  2242  0119                     	;# 
  2243  0119                     	;# 
  2244  0119                     	;# 
  2245  011A                     	;# 
  2246  011A                     	;# 
  2247  011A                     	;# 
  2248  011B                     	;# 
  2249  011B                     	;# 
  2250  011B                     	;# 
  2251  011B                     	;# 
  2252  011B                     	;# 
  2253  011C                     	;# 
  2254  011C                     	;# 
  2255  011C                     	;# 
  2256  011D                     	;# 
  2257  011D                     	;# 
  2258  011D                     	;# 
  2259  011E                     	;# 
  2260  011E                     	;# 
  2261  011E                     	;# 
  2262  011F                     	;# 
  2263  011F                     	;# 
  2264  011F                     	;# 
  2265  011F                     	;# 
  2266  011F                     	;# 
  2267  018C                     	;# 
  2268  018D                     	;# 
  2269  018E                     	;# 
  2270  018F                     	;# 
  2271  0190                     	;# 
  2272  0191                     	;# 
  2273  0192                     	;# 
  2274  0196                     	;# 
  2275  0197                     	;# 
  2276  0198                     	;# 
  2277  0199                     	;# 
  2278  019A                     	;# 
  2279  019B                     	;# 
  2280  019C                     	;# 
  2281  020C                     	;# 
  2282  020C                     	;# 
  2283  020D                     	;# 
  2284  020E                     	;# 
  2285  020F                     	;# 
  2286  020F                     	;# 
  2287  0210                     	;# 
  2288  0210                     	;# 
  2289  0211                     	;# 
  2290  0211                     	;# 
  2291  0212                     	;# 
  2292  0212                     	;# 
  2293  0213                     	;# 
  2294  0214                     	;# 
  2295  0215                     	;# 
  2296  0215                     	;# 
  2297  0216                     	;# 
  2298  0216                     	;# 
  2299  0217                     	;# 
  2300  0217                     	;# 
  2301  0218                     	;# 
  2302  0218                     	;# 
  2303  0219                     	;# 
  2304  021A                     	;# 
  2305  021B                     	;# 
  2306  021B                     	;# 
  2307  021C                     	;# 
  2308  021C                     	;# 
  2309  021D                     	;# 
  2310  021D                     	;# 
  2311  021E                     	;# 
  2312  021F                     	;# 
  2313  028C                     	;# 
  2314  028C                     	;# 
  2315  028D                     	;# 
  2316  028D                     	;# 
  2317  028E                     	;# 
  2318  028F                     	;# 
  2319  0290                     	;# 
  2320  0290                     	;# 
  2321  0291                     	;# 
  2322  0292                     	;# 
  2323  0292                     	;# 
  2324  0293                     	;# 
  2325  0293                     	;# 
  2326  0294                     	;# 
  2327  0295                     	;# 
  2328  0296                     	;# 
  2329  0296                     	;# 
  2330  0297                     	;# 
  2331  0298                     	;# 
  2332  0298                     	;# 
  2333  0299                     	;# 
  2334  0299                     	;# 
  2335  029A                     	;# 
  2336  029B                     	;# 
  2337  029C                     	;# 
  2338  029C                     	;# 
  2339  029D                     	;# 
  2340  030C                     	;# 
  2341  030C                     	;# 
  2342  030D                     	;# 
  2343  030E                     	;# 
  2344  030F                     	;# 
  2345  0310                     	;# 
  2346  0310                     	;# 
  2347  0311                     	;# 
  2348  0312                     	;# 
  2349  0313                     	;# 
  2350  0314                     	;# 
  2351  0314                     	;# 
  2352  0315                     	;# 
  2353  0316                     	;# 
  2354  0317                     	;# 
  2355  0318                     	;# 
  2356  0318                     	;# 
  2357  0319                     	;# 
  2358  031A                     	;# 
  2359  031B                     	;# 
  2360  031C                     	;# 
  2361  031C                     	;# 
  2362  031D                     	;# 
  2363  031E                     	;# 
  2364  031F                     	;# 
  2365  038C                     	;# 
  2366  038D                     	;# 
  2367  038E                     	;# 
  2368  0390                     	;# 
  2369  0391                     	;# 
  2370  0392                     	;# 
  2371  040C                     	;# 
  2372  040D                     	;# 
  2373  040E                     	;# 
  2374  040F                     	;# 
  2375  0410                     	;# 
  2376  0411                     	;# 
  2377  0416                     	;# 
  2378  0416                     	;# 
  2379  0417                     	;# 
  2380  0418                     	;# 
  2381  0418                     	;# 
  2382  0419                     	;# 
  2383  041A                     	;# 
  2384  041A                     	;# 
  2385  041B                     	;# 
  2386  041C                     	;# 
  2387  041C                     	;# 
  2388  041D                     	;# 
  2389  041E                     	;# 
  2390  041F                     	;# 
  2391  048C                     	;# 
  2392  048C                     	;# 
  2393  048D                     	;# 
  2394  048E                     	;# 
  2395  048F                     	;# 
  2396  048F                     	;# 
  2397  0490                     	;# 
  2398  0491                     	;# 
  2399  0492                     	;# 
  2400  0492                     	;# 
  2401  0493                     	;# 
  2402  0494                     	;# 
  2403  0495                     	;# 
  2404  0495                     	;# 
  2405  0496                     	;# 
  2406  0497                     	;# 
  2407  0498                     	;# 
  2408  0499                     	;# 
  2409  049A                     	;# 
  2410  049B                     	;# 
  2411  049C                     	;# 
  2412  049D                     	;# 
  2413  050C                     	;# 
  2414  050C                     	;# 
  2415  050D                     	;# 
  2416  050E                     	;# 
  2417  050F                     	;# 
  2418  050F                     	;# 
  2419  0510                     	;# 
  2420  0511                     	;# 
  2421  0512                     	;# 
  2422  0512                     	;# 
  2423  0513                     	;# 
  2424  0514                     	;# 
  2425  0515                     	;# 
  2426  0515                     	;# 
  2427  0516                     	;# 
  2428  0517                     	;# 
  2429  0518                     	;# 
  2430  0519                     	;# 
  2431  051A                     	;# 
  2432  051B                     	;# 
  2433  051C                     	;# 
  2434  051D                     	;# 
  2435  058C                     	;# 
  2436  058C                     	;# 
  2437  058D                     	;# 
  2438  058E                     	;# 
  2439  058F                     	;# 
  2440  058F                     	;# 
  2441  0590                     	;# 
  2442  0591                     	;# 
  2443  0592                     	;# 
  2444  0593                     	;# 
  2445  060C                     	;# 
  2446  060D                     	;# 
  2447  060E                     	;# 
  2448  060F                     	;# 
  2449  0610                     	;# 
  2450  0611                     	;# 
  2451  0612                     	;# 
  2452  0613                     	;# 
  2453  0614                     	;# 
  2454  0616                     	;# 
  2455  0617                     	;# 
  2456  0618                     	;# 
  2457  0619                     	;# 
  2458  061A                     	;# 
  2459  061B                     	;# 
  2460  061C                     	;# 
  2461  061D                     	;# 
  2462  061E                     	;# 
  2463  068C                     	;# 
  2464  068D                     	;# 
  2465  068E                     	;# 
  2466  068F                     	;# 
  2467  0690                     	;# 
  2468  0691                     	;# 
  2469  0692                     	;# 
  2470  0693                     	;# 
  2471  0694                     	;# 
  2472  070C                     	;# 
  2473  070D                     	;# 
  2474  070E                     	;# 
  2475  070F                     	;# 
  2476  0710                     	;# 
  2477  0711                     	;# 
  2478  0712                     	;# 
  2479  0713                     	;# 
  2480  0714                     	;# 
  2481  0716                     	;# 
  2482  0717                     	;# 
  2483  0718                     	;# 
  2484  0719                     	;# 
  2485  071A                     	;# 
  2486  071B                     	;# 
  2487  071C                     	;# 
  2488  071D                     	;# 
  2489  071E                     	;# 
  2490  0796                     	;# 
  2491  0797                     	;# 
  2492  0798                     	;# 
  2493  0799                     	;# 
  2494  079A                     	;# 
  2495  079B                     	;# 
  2496  080C                     	;# 
  2497  080D                     	;# 
  2498  080E                     	;# 
  2499  080F                     	;# 
  2500  0810                     	;# 
  2501  0811                     	;# 
  2502  0812                     	;# 
  2503  0813                     	;# 
  2504  0814                     	;# 
  2505  081A                     	;# 
  2506  081B                     	;# 
  2507  081C                     	;# 
  2508  081D                     	;# 
  2509  081E                     	;# 
  2510  081F                     	;# 
  2511  088C                     	;# 
  2512  088D                     	;# 
  2513  088E                     	;# 
  2514  088F                     	;# 
  2515  0890                     	;# 
  2516  0891                     	;# 
  2517  0892                     	;# 
  2518  0893                     	;# 
  2519  0895                     	;# 
  2520  0896                     	;# 
  2521  0897                     	;# 
  2522  0898                     	;# 
  2523  0899                     	;# 
  2524  089A                     	;# 
  2525  089B                     	;# 
  2526  090C                     	;# 
  2527  090E                     	;# 
  2528  090F                     	;# 
  2529  091F                     	;# 
  2530  091F                     	;# 
  2531  098F                     	;# 
  2532  098F                     	;# 
  2533  0990                     	;# 
  2534  0991                     	;# 
  2535  0992                     	;# 
  2536  0993                     	;# 
  2537  0994                     	;# 
  2538  0995                     	;# 
  2539  0996                     	;# 
  2540  0997                     	;# 
  2541  0E0F                     	;# 
  2542  0E10                     	;# 
  2543  0E11                     	;# 
  2544  0E12                     	;# 
  2545  0E13                     	;# 
  2546  0E14                     	;# 
  2547  0E15                     	;# 
  2548  0E16                     	;# 
  2549  0E17                     	;# 
  2550  0E18                     	;# 
  2551  0E19                     	;# 
  2552  0E1A                     	;# 
  2553  0E1B                     	;# 
  2554  0E1C                     	;# 
  2555  0E1D                     	;# 
  2556  0E1E                     	;# 
  2557  0E1F                     	;# 
  2558  0E20                     	;# 
  2559  0E21                     	;# 
  2560  0E22                     	;# 
  2561  0E23                     	;# 
  2562  0E24                     	;# 
  2563  0E25                     	;# 
  2564  0E26                     	;# 
  2565  0E27                     	;# 
  2566  0E28                     	;# 
  2567  0E29                     	;# 
  2568  0E2A                     	;# 
  2569  0E2B                     	;# 
  2570  0E2C                     	;# 
  2571  0E2D                     	;# 
  2572  0E2E                     	;# 
  2573  0E2F                     	;# 
  2574  0E30                     	;# 
  2575  0E31                     	;# 
  2576  0E32                     	;# 
  2577  0E33                     	;# 
  2578  0E34                     	;# 
  2579  0E35                     	;# 
  2580  0E36                     	;# 
  2581  0E37                     	;# 
  2582  0E8F                     	;# 
  2583  0E90                     	;# 
  2584  0E91                     	;# 
  2585  0E92                     	;# 
  2586  0E93                     	;# 
  2587  0E94                     	;# 
  2588  0E95                     	;# 
  2589  0E96                     	;# 
  2590  0E97                     	;# 
  2591  0E9C                     	;# 
  2592  0E9D                     	;# 
  2593  0E9E                     	;# 
  2594  0EA1                     	;# 
  2595  0EA2                     	;# 
  2596  0EA3                     	;# 
  2597  0EA4                     	;# 
  2598  0EA5                     	;# 
  2599  0EA9                     	;# 
  2600  0EAA                     	;# 
  2601  0EAB                     	;# 
  2602  0EAC                     	;# 
  2603  0EB1                     	;# 
  2604  0EB2                     	;# 
  2605  0EB3                     	;# 
  2606  0EB8                     	;# 
  2607  0EB9                     	;# 
  2608  0EBA                     	;# 
  2609  0EBB                     	;# 
  2610  0EBC                     	;# 
  2611  0EBD                     	;# 
  2612  0EBE                     	;# 
  2613  0EC3                     	;# 
  2614  0EC5                     	;# 
  2615  0EC6                     	;# 
  2616  0EC7                     	;# 
  2617  0EC8                     	;# 
  2618  0EC9                     	;# 
  2619  0ECA                     	;# 
  2620  0ECB                     	;# 
  2621  0ECC                     	;# 
  2622  0F10                     	;# 
  2623  0F11                     	;# 
  2624  0F12                     	;# 
  2625  0F13                     	;# 
  2626  0F14                     	;# 
  2627  0F15                     	;# 
  2628  0F16                     	;# 
  2629  0F17                     	;# 
  2630  0F18                     	;# 
  2631  0F19                     	;# 
  2632  0F1A                     	;# 
  2633  0F1B                     	;# 
  2634  0F1C                     	;# 
  2635  0F1D                     	;# 
  2636  0F1E                     	;# 
  2637  0F1F                     	;# 
  2638  0F20                     	;# 
  2639  0F21                     	;# 
  2640  0F22                     	;# 
  2641  0F23                     	;# 
  2642  0F24                     	;# 
  2643  0F25                     	;# 
  2644  0F26                     	;# 
  2645  0F27                     	;# 
  2646  0F38                     	;# 
  2647  0F39                     	;# 
  2648  0F3A                     	;# 
  2649  0F3B                     	;# 
  2650  0F3C                     	;# 
  2651  0F3D                     	;# 
  2652  0F3E                     	;# 
  2653  0F3F                     	;# 
  2654  0F40                     	;# 
  2655  0F41                     	;# 
  2656  0F43                     	;# 
  2657  0F44                     	;# 
  2658  0F45                     	;# 
  2659  0F46                     	;# 
  2660  0F47                     	;# 
  2661  0F48                     	;# 
  2662  0F49                     	;# 
  2663  0F4A                     	;# 
  2664  0F4B                     	;# 
  2665  0F4C                     	;# 
  2666  0F4E                     	;# 
  2667  0F4F                     	;# 
  2668  0F50                     	;# 
  2669  0F51                     	;# 
  2670  0F52                     	;# 
  2671  0F53                     	;# 
  2672  0F54                     	;# 
  2673  0F55                     	;# 
  2674  0F56                     	;# 
  2675  0F57                     	;# 
  2676  0F65                     	;# 
  2677  0F68                     	;# 
  2678  0F69                     	;# 
  2679  0F6A                     	;# 
  2680  0F6B                     	;# 
  2681  0FE4                     	;# 
  2682  0FE5                     	;# 
  2683  0FE6                     	;# 
  2684  0FE7                     	;# 
  2685  0FE8                     	;# 
  2686  0FE9                     	;# 
  2687  0FEA                     	;# 
  2688  0FEB                     	;# 
  2689  0FED                     	;# 
  2690  0FEE                     	;# 
  2691  0FEF                     	;# 
  2692  0000                     	;# 
  2693  0001                     	;# 
  2694  0002                     	;# 
  2695  0003                     	;# 
  2696  0004                     	;# 
  2697  0005                     	;# 
  2698  0006                     	;# 
  2699  0007                     	;# 
  2700  0008                     	;# 
  2701  0009                     	;# 
  2702  000A                     	;# 
  2703  000B                     	;# 
  2704  000C                     	;# 
  2705  000D                     	;# 
  2706  000E                     	;# 
  2707  0010                     	;# 
  2708  0011                     	;# 
  2709  0012                     	;# 
  2710  0013                     	;# 
  2711  0016                     	;# 
  2712  0017                     	;# 
  2713  0018                     	;# 
  2714  001C                     	;# 
  2715  001C                     	;# 
  2716  001D                     	;# 
  2717  001D                     	;# 
  2718  001E                     	;# 
  2719  001F                     	;# 
  2720  008C                     	;# 
  2721  008C                     	;# 
  2722  008D                     	;# 
  2723  008E                     	;# 
  2724  008E                     	;# 
  2725  008F                     	;# 
  2726  0090                     	;# 
  2727  0090                     	;# 
  2728  0091                     	;# 
  2729  0093                     	;# 
  2730  0094                     	;# 
  2731  0095                     	;# 
  2732  0096                     	;# 
  2733  0097                     	;# 
  2734  0098                     	;# 
  2735  0099                     	;# 
  2736  009A                     	;# 
  2737  009B                     	;# 
  2738  009C                     	;# 
  2739  009D                     	;# 
  2740  009E                     	;# 
  2741  010C                     	;# 
  2742  010D                     	;# 
  2743  010E                     	;# 
  2744  010E                     	;# 
  2745  010F                     	;# 
  2746  0110                     	;# 
  2747  0110                     	;# 
  2748  0111                     	;# 
  2749  0112                     	;# 
  2750  0112                     	;# 
  2751  0113                     	;# 
  2752  0114                     	;# 
  2753  0114                     	;# 
  2754  0115                     	;# 
  2755  0116                     	;# 
  2756  0116                     	;# 
  2757  0117                     	;# 
  2758  0119                     	;# 
  2759  0119                     	;# 
  2760  0119                     	;# 
  2761  011A                     	;# 
  2762  011A                     	;# 
  2763  011A                     	;# 
  2764  011B                     	;# 
  2765  011B                     	;# 
  2766  011B                     	;# 
  2767  011B                     	;# 
  2768  011B                     	;# 
  2769  011C                     	;# 
  2770  011C                     	;# 
  2771  011C                     	;# 
  2772  011D                     	;# 
  2773  011D                     	;# 
  2774  011D                     	;# 
  2775  011E                     	;# 
  2776  011E                     	;# 
  2777  011E                     	;# 
  2778  011F                     	;# 
  2779  011F                     	;# 
  2780  011F                     	;# 
  2781  011F                     	;# 
  2782  011F                     	;# 
  2783  018C                     	;# 
  2784  018D                     	;# 
  2785  018E                     	;# 
  2786  018F                     	;# 
  2787  0190                     	;# 
  2788  0191                     	;# 
  2789  0192                     	;# 
  2790  0196                     	;# 
  2791  0197                     	;# 
  2792  0198                     	;# 
  2793  0199                     	;# 
  2794  019A                     	;# 
  2795  019B                     	;# 
  2796  019C                     	;# 
  2797  020C                     	;# 
  2798  020C                     	;# 
  2799  020D                     	;# 
  2800  020E                     	;# 
  2801  020F                     	;# 
  2802  020F                     	;# 
  2803  0210                     	;# 
  2804  0210                     	;# 
  2805  0211                     	;# 
  2806  0211                     	;# 
  2807  0212                     	;# 
  2808  0212                     	;# 
  2809  0213                     	;# 
  2810  0214                     	;# 
  2811  0215                     	;# 
  2812  0215                     	;# 
  2813  0216                     	;# 
  2814  0216                     	;# 
  2815  0217                     	;# 
  2816  0217                     	;# 
  2817  0218                     	;# 
  2818  0218                     	;# 
  2819  0219                     	;# 
  2820  021A                     	;# 
  2821  021B                     	;# 
  2822  021B                     	;# 
  2823  021C                     	;# 
  2824  021C                     	;# 
  2825  021D                     	;# 
  2826  021D                     	;# 
  2827  021E                     	;# 
  2828  021F                     	;# 
  2829  028C                     	;# 
  2830  028C                     	;# 
  2831  028D                     	;# 
  2832  028D                     	;# 
  2833  028E                     	;# 
  2834  028F                     	;# 
  2835  0290                     	;# 
  2836  0290                     	;# 
  2837  0291                     	;# 
  2838  0292                     	;# 
  2839  0292                     	;# 
  2840  0293                     	;# 
  2841  0293                     	;# 
  2842  0294                     	;# 
  2843  0295                     	;# 
  2844  0296                     	;# 
  2845  0296                     	;# 
  2846  0297                     	;# 
  2847  0298                     	;# 
  2848  0298                     	;# 
  2849  0299                     	;# 
  2850  0299                     	;# 
  2851  029A                     	;# 
  2852  029B                     	;# 
  2853  029C                     	;# 
  2854  029C                     	;# 
  2855  029D                     	;# 
  2856  030C                     	;# 
  2857  030C                     	;# 
  2858  030D                     	;# 
  2859  030E                     	;# 
  2860  030F                     	;# 
  2861  0310                     	;# 
  2862  0310                     	;# 
  2863  0311                     	;# 
  2864  0312                     	;# 
  2865  0313                     	;# 
  2866  0314                     	;# 
  2867  0314                     	;# 
  2868  0315                     	;# 
  2869  0316                     	;# 
  2870  0317                     	;# 
  2871  0318                     	;# 
  2872  0318                     	;# 
  2873  0319                     	;# 
  2874  031A                     	;# 
  2875  031B                     	;# 
  2876  031C                     	;# 
  2877  031C                     	;# 
  2878  031D                     	;# 
  2879  031E                     	;# 
  2880  031F                     	;# 
  2881  038C                     	;# 
  2882  038D                     	;# 
  2883  038E                     	;# 
  2884  0390                     	;# 
  2885  0391                     	;# 
  2886  0392                     	;# 
  2887  040C                     	;# 
  2888  040D                     	;# 
  2889  040E                     	;# 
  2890  040F                     	;# 
  2891  0410                     	;# 
  2892  0411                     	;# 
  2893  0416                     	;# 
  2894  0416                     	;# 
  2895  0417                     	;# 
  2896  0418                     	;# 
  2897  0418                     	;# 
  2898  0419                     	;# 
  2899  041A                     	;# 
  2900  041A                     	;# 
  2901  041B                     	;# 
  2902  041C                     	;# 
  2903  041C                     	;# 
  2904  041D                     	;# 
  2905  041E                     	;# 
  2906  041F                     	;# 
  2907  048C                     	;# 
  2908  048C                     	;# 
  2909  048D                     	;# 
  2910  048E                     	;# 
  2911  048F                     	;# 
  2912  048F                     	;# 
  2913  0490                     	;# 
  2914  0491                     	;# 
  2915  0492                     	;# 
  2916  0492                     	;# 
  2917  0493                     	;# 
  2918  0494                     	;# 
  2919  0495                     	;# 
  2920  0495                     	;# 
  2921  0496                     	;# 
  2922  0497                     	;# 
  2923  0498                     	;# 
  2924  0499                     	;# 
  2925  049A                     	;# 
  2926  049B                     	;# 
  2927  049C                     	;# 
  2928  049D                     	;# 
  2929  050C                     	;# 
  2930  050C                     	;# 
  2931  050D                     	;# 
  2932  050E                     	;# 
  2933  050F                     	;# 
  2934  050F                     	;# 
  2935  0510                     	;# 
  2936  0511                     	;# 
  2937  0512                     	;# 
  2938  0512                     	;# 
  2939  0513                     	;# 
  2940  0514                     	;# 
  2941  0515                     	;# 
  2942  0515                     	;# 
  2943  0516                     	;# 
  2944  0517                     	;# 
  2945  0518                     	;# 
  2946  0519                     	;# 
  2947  051A                     	;# 
  2948  051B                     	;# 
  2949  051C                     	;# 
  2950  051D                     	;# 
  2951  058C                     	;# 
  2952  058C                     	;# 
  2953  058D                     	;# 
  2954  058E                     	;# 
  2955  058F                     	;# 
  2956  058F                     	;# 
  2957  0590                     	;# 
  2958  0591                     	;# 
  2959  0592                     	;# 
  2960  0593                     	;# 
  2961  060C                     	;# 
  2962  060D                     	;# 
  2963  060E                     	;# 
  2964  060F                     	;# 
  2965  0610                     	;# 
  2966  0611                     	;# 
  2967  0612                     	;# 
  2968  0613                     	;# 
  2969  0614                     	;# 
  2970  0616                     	;# 
  2971  0617                     	;# 
  2972  0618                     	;# 
  2973  0619                     	;# 
  2974  061A                     	;# 
  2975  061B                     	;# 
  2976  061C                     	;# 
  2977  061D                     	;# 
  2978  061E                     	;# 
  2979  068C                     	;# 
  2980  068D                     	;# 
  2981  068E                     	;# 
  2982  068F                     	;# 
  2983  0690                     	;# 
  2984  0691                     	;# 
  2985  0692                     	;# 
  2986  0693                     	;# 
  2987  0694                     	;# 
  2988  070C                     	;# 
  2989  070D                     	;# 
  2990  070E                     	;# 
  2991  070F                     	;# 
  2992  0710                     	;# 
  2993  0711                     	;# 
  2994  0712                     	;# 
  2995  0713                     	;# 
  2996  0714                     	;# 
  2997  0716                     	;# 
  2998  0717                     	;# 
  2999  0718                     	;# 
  3000  0719                     	;# 
  3001  071A                     	;# 
  3002  071B                     	;# 
  3003  071C                     	;# 
  3004  071D                     	;# 
  3005  071E                     	;# 
  3006  0796                     	;# 
  3007  0797                     	;# 
  3008  0798                     	;# 
  3009  0799                     	;# 
  3010  079A                     	;# 
  3011  079B                     	;# 
  3012  080C                     	;# 
  3013  080D                     	;# 
  3014  080E                     	;# 
  3015  080F                     	;# 
  3016  0810                     	;# 
  3017  0811                     	;# 
  3018  0812                     	;# 
  3019  0813                     	;# 
  3020  0814                     	;# 
  3021  081A                     	;# 
  3022  081B                     	;# 
  3023  081C                     	;# 
  3024  081D                     	;# 
  3025  081E                     	;# 
  3026  081F                     	;# 
  3027  088C                     	;# 
  3028  088D                     	;# 
  3029  088E                     	;# 
  3030  088F                     	;# 
  3031  0890                     	;# 
  3032  0891                     	;# 
  3033  0892                     	;# 
  3034  0893                     	;# 
  3035  0895                     	;# 
  3036  0896                     	;# 
  3037  0897                     	;# 
  3038  0898                     	;# 
  3039  0899                     	;# 
  3040  089A                     	;# 
  3041  089B                     	;# 
  3042  090C                     	;# 
  3043  090E                     	;# 
  3044  090F                     	;# 
  3045  091F                     	;# 
  3046  091F                     	;# 
  3047  098F                     	;# 
  3048  098F                     	;# 
  3049  0990                     	;# 
  3050  0991                     	;# 
  3051  0992                     	;# 
  3052  0993                     	;# 
  3053  0994                     	;# 
  3054  0995                     	;# 
  3055  0996                     	;# 
  3056  0997                     	;# 
  3057  0E0F                     	;# 
  3058  0E10                     	;# 
  3059  0E11                     	;# 
  3060  0E12                     	;# 
  3061  0E13                     	;# 
  3062  0E14                     	;# 
  3063  0E15                     	;# 
  3064  0E16                     	;# 
  3065  0E17                     	;# 
  3066  0E18                     	;# 
  3067  0E19                     	;# 
  3068  0E1A                     	;# 
  3069  0E1B                     	;# 
  3070  0E1C                     	;# 
  3071  0E1D                     	;# 
  3072  0E1E                     	;# 
  3073  0E1F                     	;# 
  3074  0E20                     	;# 
  3075  0E21                     	;# 
  3076  0E22                     	;# 
  3077  0E23                     	;# 
  3078  0E24                     	;# 
  3079  0E25                     	;# 
  3080  0E26                     	;# 
  3081  0E27                     	;# 
  3082  0E28                     	;# 
  3083  0E29                     	;# 
  3084  0E2A                     	;# 
  3085  0E2B                     	;# 
  3086  0E2C                     	;# 
  3087  0E2D                     	;# 
  3088  0E2E                     	;# 
  3089  0E2F                     	;# 
  3090  0E30                     	;# 
  3091  0E31                     	;# 
  3092  0E32                     	;# 
  3093  0E33                     	;# 
  3094  0E34                     	;# 
  3095  0E35                     	;# 
  3096  0E36                     	;# 
  3097  0E37                     	;# 
  3098  0E8F                     	;# 
  3099  0E90                     	;# 
  3100  0E91                     	;# 
  3101  0E92                     	;# 
  3102  0E93                     	;# 
  3103  0E94                     	;# 
  3104  0E95                     	;# 
  3105  0E96                     	;# 
  3106  0E97                     	;# 
  3107  0E9C                     	;# 
  3108  0E9D                     	;# 
  3109  0E9E                     	;# 
  3110  0EA1                     	;# 
  3111  0EA2                     	;# 
  3112  0EA3                     	;# 
  3113  0EA4                     	;# 
  3114  0EA5                     	;# 
  3115  0EA9                     	;# 
  3116  0EAA                     	;# 
  3117  0EAB                     	;# 
  3118  0EAC                     	;# 
  3119  0EB1                     	;# 
  3120  0EB2                     	;# 
  3121  0EB3                     	;# 
  3122  0EB8                     	;# 
  3123  0EB9                     	;# 
  3124  0EBA                     	;# 
  3125  0EBB                     	;# 
  3126  0EBC                     	;# 
  3127  0EBD                     	;# 
  3128  0EBE                     	;# 
  3129  0EC3                     	;# 
  3130  0EC5                     	;# 
  3131  0EC6                     	;# 
  3132  0EC7                     	;# 
  3133  0EC8                     	;# 
  3134  0EC9                     	;# 
  3135  0ECA                     	;# 
  3136  0ECB                     	;# 
  3137  0ECC                     	;# 
  3138  0F10                     	;# 
  3139  0F11                     	;# 
  3140  0F12                     	;# 
  3141  0F13                     	;# 
  3142  0F14                     	;# 
  3143  0F15                     	;# 
  3144  0F16                     	;# 
  3145  0F17                     	;# 
  3146  0F18                     	;# 
  3147  0F19                     	;# 
  3148  0F1A                     	;# 
  3149  0F1B                     	;# 
  3150  0F1C                     	;# 
  3151  0F1D                     	;# 
  3152  0F1E                     	;# 
  3153  0F1F                     	;# 
  3154  0F20                     	;# 
  3155  0F21                     	;# 
  3156  0F22                     	;# 
  3157  0F23                     	;# 
  3158  0F24                     	;# 
  3159  0F25                     	;# 
  3160  0F26                     	;# 
  3161  0F27                     	;# 
  3162  0F38                     	;# 
  3163  0F39                     	;# 
  3164  0F3A                     	;# 
  3165  0F3B                     	;# 
  3166  0F3C                     	;# 
  3167  0F3D                     	;# 
  3168  0F3E                     	;# 
  3169  0F3F                     	;# 
  3170  0F40                     	;# 
  3171  0F41                     	;# 
  3172  0F43                     	;# 
  3173  0F44                     	;# 
  3174  0F45                     	;# 
  3175  0F46                     	;# 
  3176  0F47                     	;# 
  3177  0F48                     	;# 
  3178  0F49                     	;# 
  3179  0F4A                     	;# 
  3180  0F4B                     	;# 
  3181  0F4C                     	;# 
  3182  0F4E                     	;# 
  3183  0F4F                     	;# 
  3184  0F50                     	;# 
  3185  0F51                     	;# 
  3186  0F52                     	;# 
  3187  0F53                     	;# 
  3188  0F54                     	;# 
  3189  0F55                     	;# 
  3190  0F56                     	;# 
  3191  0F57                     	;# 
  3192  0F65                     	;# 
  3193  0F68                     	;# 
  3194  0F69                     	;# 
  3195  0F6A                     	;# 
  3196  0F6B                     	;# 
  3197  0FE4                     	;# 
  3198  0FE5                     	;# 
  3199  0FE6                     	;# 
  3200  0FE7                     	;# 
  3201  0FE8                     	;# 
  3202  0FE9                     	;# 
  3203  0FEA                     	;# 
  3204  0FEB                     	;# 
  3205  0FED                     	;# 
  3206  0FEE                     	;# 
  3207  0FEF                     	;# 
  3208  0000                     	;# 
  3209  0001                     	;# 
  3210  0002                     	;# 
  3211  0003                     	;# 
  3212  0004                     	;# 
  3213  0005                     	;# 
  3214  0006                     	;# 
  3215  0007                     	;# 
  3216  0008                     	;# 
  3217  0009                     	;# 
  3218  000A                     	;# 
  3219  000B                     	;# 
  3220  000C                     	;# 
  3221  000D                     	;# 
  3222  000E                     	;# 
  3223  0010                     	;# 
  3224  0011                     	;# 
  3225  0012                     	;# 
  3226  0013                     	;# 
  3227  0016                     	;# 
  3228  0017                     	;# 
  3229  0018                     	;# 
  3230  001C                     	;# 
  3231  001C                     	;# 
  3232  001D                     	;# 
  3233  001D                     	;# 
  3234  001E                     	;# 
  3235  001F                     	;# 
  3236  008C                     	;# 
  3237  008C                     	;# 
  3238  008D                     	;# 
  3239  008E                     	;# 
  3240  008E                     	;# 
  3241  008F                     	;# 
  3242  0090                     	;# 
  3243  0090                     	;# 
  3244  0091                     	;# 
  3245  0093                     	;# 
  3246  0094                     	;# 
  3247  0095                     	;# 
  3248  0096                     	;# 
  3249  0097                     	;# 
  3250  0098                     	;# 
  3251  0099                     	;# 
  3252  009A                     	;# 
  3253  009B                     	;# 
  3254  009C                     	;# 
  3255  009D                     	;# 
  3256  009E                     	;# 
  3257  010C                     	;# 
  3258  010D                     	;# 
  3259  010E                     	;# 
  3260  010E                     	;# 
  3261  010F                     	;# 
  3262  0110                     	;# 
  3263  0110                     	;# 
  3264  0111                     	;# 
  3265  0112                     	;# 
  3266  0112                     	;# 
  3267  0113                     	;# 
  3268  0114                     	;# 
  3269  0114                     	;# 
  3270  0115                     	;# 
  3271  0116                     	;# 
  3272  0116                     	;# 
  3273  0117                     	;# 
  3274  0119                     	;# 
  3275  0119                     	;# 
  3276  0119                     	;# 
  3277  011A                     	;# 
  3278  011A                     	;# 
  3279  011A                     	;# 
  3280  011B                     	;# 
  3281  011B                     	;# 
  3282  011B                     	;# 
  3283  011B                     	;# 
  3284  011B                     	;# 
  3285  011C                     	;# 
  3286  011C                     	;# 
  3287  011C                     	;# 
  3288  011D                     	;# 
  3289  011D                     	;# 
  3290  011D                     	;# 
  3291  011E                     	;# 
  3292  011E                     	;# 
  3293  011E                     	;# 
  3294  011F                     	;# 
  3295  011F                     	;# 
  3296  011F                     	;# 
  3297  011F                     	;# 
  3298  011F                     	;# 
  3299  018C                     	;# 
  3300  018D                     	;# 
  3301  018E                     	;# 
  3302  018F                     	;# 
  3303  0190                     	;# 
  3304  0191                     	;# 
  3305  0192                     	;# 
  3306  0196                     	;# 
  3307  0197                     	;# 
  3308  0198                     	;# 
  3309  0199                     	;# 
  3310  019A                     	;# 
  3311  019B                     	;# 
  3312  019C                     	;# 
  3313  020C                     	;# 
  3314  020C                     	;# 
  3315  020D                     	;# 
  3316  020E                     	;# 
  3317  020F                     	;# 
  3318  020F                     	;# 
  3319  0210                     	;# 
  3320  0210                     	;# 
  3321  0211                     	;# 
  3322  0211                     	;# 
  3323  0212                     	;# 
  3324  0212                     	;# 
  3325  0213                     	;# 
  3326  0214                     	;# 
  3327  0215                     	;# 
  3328  0215                     	;# 
  3329  0216                     	;# 
  3330  0216                     	;# 
  3331  0217                     	;# 
  3332  0217                     	;# 
  3333  0218                     	;# 
  3334  0218                     	;# 
  3335  0219                     	;# 
  3336  021A                     	;# 
  3337  021B                     	;# 
  3338  021B                     	;# 
  3339  021C                     	;# 
  3340  021C                     	;# 
  3341  021D                     	;# 
  3342  021D                     	;# 
  3343  021E                     	;# 
  3344  021F                     	;# 
  3345  028C                     	;# 
  3346  028C                     	;# 
  3347  028D                     	;# 
  3348  028D                     	;# 
  3349  028E                     	;# 
  3350  028F                     	;# 
  3351  0290                     	;# 
  3352  0290                     	;# 
  3353  0291                     	;# 
  3354  0292                     	;# 
  3355  0292                     	;# 
  3356  0293                     	;# 
  3357  0293                     	;# 
  3358  0294                     	;# 
  3359  0295                     	;# 
  3360  0296                     	;# 
  3361  0296                     	;# 
  3362  0297                     	;# 
  3363  0298                     	;# 
  3364  0298                     	;# 
  3365  0299                     	;# 
  3366  0299                     	;# 
  3367  029A                     	;# 
  3368  029B                     	;# 
  3369  029C                     	;# 
  3370  029C                     	;# 
  3371  029D                     	;# 
  3372  030C                     	;# 
  3373  030C                     	;# 
  3374  030D                     	;# 
  3375  030E                     	;# 
  3376  030F                     	;# 
  3377  0310                     	;# 
  3378  0310                     	;# 
  3379  0311                     	;# 
  3380  0312                     	;# 
  3381  0313                     	;# 
  3382  0314                     	;# 
  3383  0314                     	;# 
  3384  0315                     	;# 
  3385  0316                     	;# 
  3386  0317                     	;# 
  3387  0318                     	;# 
  3388  0318                     	;# 
  3389  0319                     	;# 
  3390  031A                     	;# 
  3391  031B                     	;# 
  3392  031C                     	;# 
  3393  031C                     	;# 
  3394  031D                     	;# 
  3395  031E                     	;# 
  3396  031F                     	;# 
  3397  038C                     	;# 
  3398  038D                     	;# 
  3399  038E                     	;# 
  3400  0390                     	;# 
  3401  0391                     	;# 
  3402  0392                     	;# 
  3403  040C                     	;# 
  3404  040D                     	;# 
  3405  040E                     	;# 
  3406  040F                     	;# 
  3407  0410                     	;# 
  3408  0411                     	;# 
  3409  0416                     	;# 
  3410  0416                     	;# 
  3411  0417                     	;# 
  3412  0418                     	;# 
  3413  0418                     	;# 
  3414  0419                     	;# 
  3415  041A                     	;# 
  3416  041A                     	;# 
  3417  041B                     	;# 
  3418  041C                     	;# 
  3419  041C                     	;# 
  3420  041D                     	;# 
  3421  041E                     	;# 
  3422  041F                     	;# 
  3423  048C                     	;# 
  3424  048C                     	;# 
  3425  048D                     	;# 
  3426  048E                     	;# 
  3427  048F                     	;# 
  3428  048F                     	;# 
  3429  0490                     	;# 
  3430  0491                     	;# 
  3431  0492                     	;# 
  3432  0492                     	;# 
  3433  0493                     	;# 
  3434  0494                     	;# 
  3435  0495                     	;# 
  3436  0495                     	;# 
  3437  0496                     	;# 
  3438  0497                     	;# 
  3439  0498                     	;# 
  3440  0499                     	;# 
  3441  049A                     	;# 
  3442  049B                     	;# 
  3443  049C                     	;# 
  3444  049D                     	;# 
  3445  050C                     	;# 
  3446  050C                     	;# 
  3447  050D                     	;# 
  3448  050E                     	;# 
  3449  050F                     	;# 
  3450  050F                     	;# 
  3451  0510                     	;# 
  3452  0511                     	;# 
  3453  0512                     	;# 
  3454  0512                     	;# 
  3455  0513                     	;# 
  3456  0514                     	;# 
  3457  0515                     	;# 
  3458  0515                     	;# 
  3459  0516                     	;# 
  3460  0517                     	;# 
  3461  0518                     	;# 
  3462  0519                     	;# 
  3463  051A                     	;# 
  3464  051B                     	;# 
  3465  051C                     	;# 
  3466  051D                     	;# 
  3467  058C                     	;# 
  3468  058C                     	;# 
  3469  058D                     	;# 
  3470  058E                     	;# 
  3471  058F                     	;# 
  3472  058F                     	;# 
  3473  0590                     	;# 
  3474  0591                     	;# 
  3475  0592                     	;# 
  3476  0593                     	;# 
  3477  060C                     	;# 
  3478  060D                     	;# 
  3479  060E                     	;# 
  3480  060F                     	;# 
  3481  0610                     	;# 
  3482  0611                     	;# 
  3483  0612                     	;# 
  3484  0613                     	;# 
  3485  0614                     	;# 
  3486  0616                     	;# 
  3487  0617                     	;# 
  3488  0618                     	;# 
  3489  0619                     	;# 
  3490  061A                     	;# 
  3491  061B                     	;# 
  3492  061C                     	;# 
  3493  061D                     	;# 
  3494  061E                     	;# 
  3495  068C                     	;# 
  3496  068D                     	;# 
  3497  068E                     	;# 
  3498  068F                     	;# 
  3499  0690                     	;# 
  3500  0691                     	;# 
  3501  0692                     	;# 
  3502  0693                     	;# 
  3503  0694                     	;# 
  3504  070C                     	;# 
  3505  070D                     	;# 
  3506  070E                     	;# 
  3507  070F                     	;# 
  3508  0710                     	;# 
  3509  0711                     	;# 
  3510  0712                     	;# 
  3511  0713                     	;# 
  3512  0714                     	;# 
  3513  0716                     	;# 
  3514  0717                     	;# 
  3515  0718                     	;# 
  3516  0719                     	;# 
  3517  071A                     	;# 
  3518  071B                     	;# 
  3519  071C                     	;# 
  3520  071D                     	;# 
  3521  071E                     	;# 
  3522  0796                     	;# 
  3523  0797                     	;# 
  3524  0798                     	;# 
  3525  0799                     	;# 
  3526  079A                     	;# 
  3527  079B                     	;# 
  3528  080C                     	;# 
  3529  080D                     	;# 
  3530  080E                     	;# 
  3531  080F                     	;# 
  3532  0810                     	;# 
  3533  0811                     	;# 
  3534  0812                     	;# 
  3535  0813                     	;# 
  3536  0814                     	;# 
  3537  081A                     	;# 
  3538  081B                     	;# 
  3539  081C                     	;# 
  3540  081D                     	;# 
  3541  081E                     	;# 
  3542  081F                     	;# 
  3543  088C                     	;# 
  3544  088D                     	;# 
  3545  088E                     	;# 
  3546  088F                     	;# 
  3547  0890                     	;# 
  3548  0891                     	;# 
  3549  0892                     	;# 
  3550  0893                     	;# 
  3551  0895                     	;# 
  3552  0896                     	;# 
  3553  0897                     	;# 
  3554  0898                     	;# 
  3555  0899                     	;# 
  3556  089A                     	;# 
  3557  089B                     	;# 
  3558  090C                     	;# 
  3559  090E                     	;# 
  3560  090F                     	;# 
  3561  091F                     	;# 
  3562  091F                     	;# 
  3563  098F                     	;# 
  3564  098F                     	;# 
  3565  0990                     	;# 
  3566  0991                     	;# 
  3567  0992                     	;# 
  3568  0993                     	;# 
  3569  0994                     	;# 
  3570  0995                     	;# 
  3571  0996                     	;# 
  3572  0997                     	;# 
  3573  0E0F                     	;# 
  3574  0E10                     	;# 
  3575  0E11                     	;# 
  3576  0E12                     	;# 
  3577  0E13                     	;# 
  3578  0E14                     	;# 
  3579  0E15                     	;# 
  3580  0E16                     	;# 
  3581  0E17                     	;# 
  3582  0E18                     	;# 
  3583  0E19                     	;# 
  3584  0E1A                     	;# 
  3585  0E1B                     	;# 
  3586  0E1C                     	;# 
  3587  0E1D                     	;# 
  3588  0E1E                     	;# 
  3589  0E1F                     	;# 
  3590  0E20                     	;# 
  3591  0E21                     	;# 
  3592  0E22                     	;# 
  3593  0E23                     	;# 
  3594  0E24                     	;# 
  3595  0E25                     	;# 
  3596  0E26                     	;# 
  3597  0E27                     	;# 
  3598  0E28                     	;# 
  3599  0E29                     	;# 
  3600  0E2A                     	;# 
  3601  0E2B                     	;# 
  3602  0E2C                     	;# 
  3603  0E2D                     	;# 
  3604  0E2E                     	;# 
  3605  0E2F                     	;# 
  3606  0E30                     	;# 
  3607  0E31                     	;# 
  3608  0E32                     	;# 
  3609  0E33                     	;# 
  3610  0E34                     	;# 
  3611  0E35                     	;# 
  3612  0E36                     	;# 
  3613  0E37                     	;# 
  3614  0E8F                     	;# 
  3615  0E90                     	;# 
  3616  0E91                     	;# 
  3617  0E92                     	;# 
  3618  0E93                     	;# 
  3619  0E94                     	;# 
  3620  0E95                     	;# 
  3621  0E96                     	;# 
  3622  0E97                     	;# 
  3623  0E9C                     	;# 
  3624  0E9D                     	;# 
  3625  0E9E                     	;# 
  3626  0EA1                     	;# 
  3627  0EA2                     	;# 
  3628  0EA3                     	;# 
  3629  0EA4                     	;# 
  3630  0EA5                     	;# 
  3631  0EA9                     	;# 
  3632  0EAA                     	;# 
  3633  0EAB                     	;# 
  3634  0EAC                     	;# 
  3635  0EB1                     	;# 
  3636  0EB2                     	;# 
  3637  0EB3                     	;# 
  3638  0EB8                     	;# 
  3639  0EB9                     	;# 
  3640  0EBA                     	;# 
  3641  0EBB                     	;# 
  3642  0EBC                     	;# 
  3643  0EBD                     	;# 
  3644  0EBE                     	;# 
  3645  0EC3                     	;# 
  3646  0EC5                     	;# 
  3647  0EC6                     	;# 
  3648  0EC7                     	;# 
  3649  0EC8                     	;# 
  3650  0EC9                     	;# 
  3651  0ECA                     	;# 
  3652  0ECB                     	;# 
  3653  0ECC                     	;# 
  3654  0F10                     	;# 
  3655  0F11                     	;# 
  3656  0F12                     	;# 
  3657  0F13                     	;# 
  3658  0F14                     	;# 
  3659  0F15                     	;# 
  3660  0F16                     	;# 
  3661  0F17                     	;# 
  3662  0F18                     	;# 
  3663  0F19                     	;# 
  3664  0F1A                     	;# 
  3665  0F1B                     	;# 
  3666  0F1C                     	;# 
  3667  0F1D                     	;# 
  3668  0F1E                     	;# 
  3669  0F1F                     	;# 
  3670  0F20                     	;# 
  3671  0F21                     	;# 
  3672  0F22                     	;# 
  3673  0F23                     	;# 
  3674  0F24                     	;# 
  3675  0F25                     	;# 
  3676  0F26                     	;# 
  3677  0F27                     	;# 
  3678  0F38                     	;# 
  3679  0F39                     	;# 
  3680  0F3A                     	;# 
  3681  0F3B                     	;# 
  3682  0F3C                     	;# 
  3683  0F3D                     	;# 
  3684  0F3E                     	;# 
  3685  0F3F                     	;# 
  3686  0F40                     	;# 
  3687  0F41                     	;# 
  3688  0F43                     	;# 
  3689  0F44                     	;# 
  3690  0F45                     	;# 
  3691  0F46                     	;# 
  3692  0F47                     	;# 
  3693  0F48                     	;# 
  3694  0F49                     	;# 
  3695  0F4A                     	;# 
  3696  0F4B                     	;# 
  3697  0F4C                     	;# 
  3698  0F4E                     	;# 
  3699  0F4F                     	;# 
  3700  0F50                     	;# 
  3701  0F51                     	;# 
  3702  0F52                     	;# 
  3703  0F53                     	;# 
  3704  0F54                     	;# 
  3705  0F55                     	;# 
  3706  0F56                     	;# 
  3707  0F57                     	;# 
  3708  0F65                     	;# 
  3709  0F68                     	;# 
  3710  0F69                     	;# 
  3711  0F6A                     	;# 
  3712  0F6B                     	;# 
  3713  0FE4                     	;# 
  3714  0FE5                     	;# 
  3715  0FE6                     	;# 
  3716  0FE7                     	;# 
  3717  0FE8                     	;# 
  3718  0FE9                     	;# 
  3719  0FEA                     	;# 
  3720  0FEB                     	;# 
  3721  0FED                     	;# 
  3722  0FEE                     	;# 
  3723  0FEF                     	;# 
  3724  0000                     	;# 
  3725  0001                     	;# 
  3726  0002                     	;# 
  3727  0003                     	;# 
  3728  0004                     	;# 
  3729  0005                     	;# 
  3730  0006                     	;# 
  3731  0007                     	;# 
  3732  0008                     	;# 
  3733  0009                     	;# 
  3734  000A                     	;# 
  3735  000B                     	;# 
  3736  000C                     	;# 
  3737  000D                     	;# 
  3738  000E                     	;# 
  3739  0010                     	;# 
  3740  0011                     	;# 
  3741  0012                     	;# 
  3742  0013                     	;# 
  3743  0016                     	;# 
  3744  0017                     	;# 
  3745  0018                     	;# 
  3746  001C                     	;# 
  3747  001C                     	;# 
  3748  001D                     	;# 
  3749  001D                     	;# 
  3750  001E                     	;# 
  3751  001F                     	;# 
  3752  008C                     	;# 
  3753  008C                     	;# 
  3754  008D                     	;# 
  3755  008E                     	;# 
  3756  008E                     	;# 
  3757  008F                     	;# 
  3758  0090                     	;# 
  3759  0090                     	;# 
  3760  0091                     	;# 
  3761  0093                     	;# 
  3762  0094                     	;# 
  3763  0095                     	;# 
  3764  0096                     	;# 
  3765  0097                     	;# 
  3766  0098                     	;# 
  3767  0099                     	;# 
  3768  009A                     	;# 
  3769  009B                     	;# 
  3770  009C                     	;# 
  3771  009D                     	;# 
  3772  009E                     	;# 
  3773  010C                     	;# 
  3774  010D                     	;# 
  3775  010E                     	;# 
  3776  010E                     	;# 
  3777  010F                     	;# 
  3778  0110                     	;# 
  3779  0110                     	;# 
  3780  0111                     	;# 
  3781  0112                     	;# 
  3782  0112                     	;# 
  3783  0113                     	;# 
  3784  0114                     	;# 
  3785  0114                     	;# 
  3786  0115                     	;# 
  3787  0116                     	;# 
  3788  0116                     	;# 
  3789  0117                     	;# 
  3790  0119                     	;# 
  3791  0119                     	;# 
  3792  0119                     	;# 
  3793  011A                     	;# 
  3794  011A                     	;# 
  3795  011A                     	;# 
  3796  011B                     	;# 
  3797  011B                     	;# 
  3798  011B                     	;# 
  3799  011B                     	;# 
  3800  011B                     	;# 
  3801  011C                     	;# 
  3802  011C                     	;# 
  3803  011C                     	;# 
  3804  011D                     	;# 
  3805  011D                     	;# 
  3806  011D                     	;# 
  3807  011E                     	;# 
  3808  011E                     	;# 
  3809  011E                     	;# 
  3810  011F                     	;# 
  3811  011F                     	;# 
  3812  011F                     	;# 
  3813  011F                     	;# 
  3814  011F                     	;# 
  3815  018C                     	;# 
  3816  018D                     	;# 
  3817  018E                     	;# 
  3818  018F                     	;# 
  3819  0190                     	;# 
  3820  0191                     	;# 
  3821  0192                     	;# 
  3822  0196                     	;# 
  3823  0197                     	;# 
  3824  0198                     	;# 
  3825  0199                     	;# 
  3826  019A                     	;# 
  3827  019B                     	;# 
  3828  019C                     	;# 
  3829  020C                     	;# 
  3830  020C                     	;# 
  3831  020D                     	;# 
  3832  020E                     	;# 
  3833  020F                     	;# 
  3834  020F                     	;# 
  3835  0210                     	;# 
  3836  0210                     	;# 
  3837  0211                     	;# 
  3838  0211                     	;# 
  3839  0212                     	;# 
  3840  0212                     	;# 
  3841  0213                     	;# 
  3842  0214                     	;# 
  3843  0215                     	;# 
  3844  0215                     	;# 
  3845  0216                     	;# 
  3846  0216                     	;# 
  3847  0217                     	;# 
  3848  0217                     	;# 
  3849  0218                     	;# 
  3850  0218                     	;# 
  3851  0219                     	;# 
  3852  021A                     	;# 
  3853  021B                     	;# 
  3854  021B                     	;# 
  3855  021C                     	;# 
  3856  021C                     	;# 
  3857  021D                     	;# 
  3858  021D                     	;# 
  3859  021E                     	;# 
  3860  021F                     	;# 
  3861  028C                     	;# 
  3862  028C                     	;# 
  3863  028D                     	;# 
  3864  028D                     	;# 
  3865  028E                     	;# 
  3866  028F                     	;# 
  3867  0290                     	;# 
  3868  0290                     	;# 
  3869  0291                     	;# 
  3870  0292                     	;# 
  3871  0292                     	;# 
  3872  0293                     	;# 
  3873  0293                     	;# 
  3874  0294                     	;# 
  3875  0295                     	;# 
  3876  0296                     	;# 
  3877  0296                     	;# 
  3878  0297                     	;# 
  3879  0298                     	;# 
  3880  0298                     	;# 
  3881  0299                     	;# 
  3882  0299                     	;# 
  3883  029A                     	;# 
  3884  029B                     	;# 
  3885  029C                     	;# 
  3886  029C                     	;# 
  3887  029D                     	;# 
  3888  030C                     	;# 
  3889  030C                     	;# 
  3890  030D                     	;# 
  3891  030E                     	;# 
  3892  030F                     	;# 
  3893  0310                     	;# 
  3894  0310                     	;# 
  3895  0311                     	;# 
  3896  0312                     	;# 
  3897  0313                     	;# 
  3898  0314                     	;# 
  3899  0314                     	;# 
  3900  0315                     	;# 
  3901  0316                     	;# 
  3902  0317                     	;# 
  3903  0318                     	;# 
  3904  0318                     	;# 
  3905  0319                     	;# 
  3906  031A                     	;# 
  3907  031B                     	;# 
  3908  031C                     	;# 
  3909  031C                     	;# 
  3910  031D                     	;# 
  3911  031E                     	;# 
  3912  031F                     	;# 
  3913  038C                     	;# 
  3914  038D                     	;# 
  3915  038E                     	;# 
  3916  0390                     	;# 
  3917  0391                     	;# 
  3918  0392                     	;# 
  3919  040C                     	;# 
  3920  040D                     	;# 
  3921  040E                     	;# 
  3922  040F                     	;# 
  3923  0410                     	;# 
  3924  0411                     	;# 
  3925  0416                     	;# 
  3926  0416                     	;# 
  3927  0417                     	;# 
  3928  0418                     	;# 
  3929  0418                     	;# 
  3930  0419                     	;# 
  3931  041A                     	;# 
  3932  041A                     	;# 
  3933  041B                     	;# 
  3934  041C                     	;# 
  3935  041C                     	;# 
  3936  041D                     	;# 
  3937  041E                     	;# 
  3938  041F                     	;# 
  3939  048C                     	;# 
  3940  048C                     	;# 
  3941  048D                     	;# 
  3942  048E                     	;# 
  3943  048F                     	;# 
  3944  048F                     	;# 
  3945  0490                     	;# 
  3946  0491                     	;# 
  3947  0492                     	;# 
  3948  0492                     	;# 
  3949  0493                     	;# 
  3950  0494                     	;# 
  3951  0495                     	;# 
  3952  0495                     	;# 
  3953  0496                     	;# 
  3954  0497                     	;# 
  3955  0498                     	;# 
  3956  0499                     	;# 
  3957  049A                     	;# 
  3958  049B                     	;# 
  3959  049C                     	;# 
  3960  049D                     	;# 
  3961  050C                     	;# 
  3962  050C                     	;# 
  3963  050D                     	;# 
  3964  050E                     	;# 
  3965  050F                     	;# 
  3966  050F                     	;# 
  3967  0510                     	;# 
  3968  0511                     	;# 
  3969  0512                     	;# 
  3970  0512                     	;# 
  3971  0513                     	;# 
  3972  0514                     	;# 
  3973  0515                     	;# 
  3974  0515                     	;# 
  3975  0516                     	;# 
  3976  0517                     	;# 
  3977  0518                     	;# 
  3978  0519                     	;# 
  3979  051A                     	;# 
  3980  051B                     	;# 
  3981  051C                     	;# 
  3982  051D                     	;# 
  3983  058C                     	;# 
  3984  058C                     	;# 
  3985  058D                     	;# 
  3986  058E                     	;# 
  3987  058F                     	;# 
  3988  058F                     	;# 
  3989  0590                     	;# 
  3990  0591                     	;# 
  3991  0592                     	;# 
  3992  0593                     	;# 
  3993  060C                     	;# 
  3994  060D                     	;# 
  3995  060E                     	;# 
  3996  060F                     	;# 
  3997  0610                     	;# 
  3998  0611                     	;# 
  3999  0612                     	;# 
  4000  0613                     	;# 
  4001  0614                     	;# 
  4002  0616                     	;# 
  4003  0617                     	;# 
  4004  0618                     	;# 
  4005  0619                     	;# 
  4006  061A                     	;# 
  4007  061B                     	;# 
  4008  061C                     	;# 
  4009  061D                     	;# 
  4010  061E                     	;# 
  4011  068C                     	;# 
  4012  068D                     	;# 
  4013  068E                     	;# 
  4014  068F                     	;# 
  4015  0690                     	;# 
  4016  0691                     	;# 
  4017  0692                     	;# 
  4018  0693                     	;# 
  4019  0694                     	;# 
  4020  070C                     	;# 
  4021  070D                     	;# 
  4022  070E                     	;# 
  4023  070F                     	;# 
  4024  0710                     	;# 
  4025  0711                     	;# 
  4026  0712                     	;# 
  4027  0713                     	;# 
  4028  0714                     	;# 
  4029  0716                     	;# 
  4030  0717                     	;# 
  4031  0718                     	;# 
  4032  0719                     	;# 
  4033  071A                     	;# 
  4034  071B                     	;# 
  4035  071C                     	;# 
  4036  071D                     	;# 
  4037  071E                     	;# 
  4038  0796                     	;# 
  4039  0797                     	;# 
  4040  0798                     	;# 
  4041  0799                     	;# 
  4042  079A                     	;# 
  4043  079B                     	;# 
  4044  080C                     	;# 
  4045  080D                     	;# 
  4046  080E                     	;# 
  4047  080F                     	;# 
  4048  0810                     	;# 
  4049  0811                     	;# 
  4050  0812                     	;# 
  4051  0813                     	;# 
  4052  0814                     	;# 
  4053  081A                     	;# 
  4054  081B                     	;# 
  4055  081C                     	;# 
  4056  081D                     	;# 
  4057  081E                     	;# 
  4058  081F                     	;# 
  4059  088C                     	;# 
  4060  088D                     	;# 
  4061  088E                     	;# 
  4062  088F                     	;# 
  4063  0890                     	;# 
  4064  0891                     	;# 
  4065  0892                     	;# 
  4066  0893                     	;# 
  4067  0895                     	;# 
  4068  0896                     	;# 
  4069  0897                     	;# 
  4070  0898                     	;# 
  4071  0899                     	;# 
  4072  089A                     	;# 
  4073  089B                     	;# 
  4074  090C                     	;# 
  4075  090E                     	;# 
  4076  090F                     	;# 
  4077  091F                     	;# 
  4078  091F                     	;# 
  4079  098F                     	;# 
  4080  098F                     	;# 
  4081  0990                     	;# 
  4082  0991                     	;# 
  4083  0992                     	;# 
  4084  0993                     	;# 
  4085  0994                     	;# 
  4086  0995                     	;# 
  4087  0996                     	;# 
  4088  0997                     	;# 
  4089  0E0F                     	;# 
  4090  0E10                     	;# 
  4091  0E11                     	;# 
  4092  0E12                     	;# 
  4093  0E13                     	;# 
  4094  0E14                     	;# 
  4095  0E15                     	;# 
  4096  0E16                     	;# 
  4097  0E17                     	;# 
  4098  0E18                     	;# 
  4099  0E19                     	;# 
  4100  0E1A                     	;# 
  4101  0E1B                     	;# 
  4102  0E1C                     	;# 
  4103  0E1D                     	;# 
  4104  0E1E                     	;# 
  4105  0E1F                     	;# 
  4106  0E20                     	;# 
  4107  0E21                     	;# 
  4108  0E22                     	;# 
  4109  0E23                     	;# 
  4110  0E24                     	;# 
  4111  0E25                     	;# 
  4112  0E26                     	;# 
  4113  0E27                     	;# 
  4114  0E28                     	;# 
  4115  0E29                     	;# 
  4116  0E2A                     	;# 
  4117  0E2B                     	;# 
  4118  0E2C                     	;# 
  4119  0E2D                     	;# 
  4120  0E2E                     	;# 
  4121  0E2F                     	;# 
  4122  0E30                     	;# 
  4123  0E31                     	;# 
  4124  0E32                     	;# 
  4125  0E33                     	;# 
  4126  0E34                     	;# 
  4127  0E35                     	;# 
  4128  0E36                     	;# 
  4129  0E37                     	;# 
  4130  0E8F                     	;# 
  4131  0E90                     	;# 
  4132  0E91                     	;# 
  4133  0E92                     	;# 
  4134  0E93                     	;# 
  4135  0E94                     	;# 
  4136  0E95                     	;# 
  4137  0E96                     	;# 
  4138  0E97                     	;# 
  4139  0E9C                     	;# 
  4140  0E9D                     	;# 
  4141  0E9E                     	;# 
  4142  0EA1                     	;# 
  4143  0EA2                     	;# 
  4144  0EA3                     	;# 
  4145  0EA4                     	;# 
  4146  0EA5                     	;# 
  4147  0EA9                     	;# 
  4148  0EAA                     	;# 
  4149  0EAB                     	;# 
  4150  0EAC                     	;# 
  4151  0EB1                     	;# 
  4152  0EB2                     	;# 
  4153  0EB3                     	;# 
  4154  0EB8                     	;# 
  4155  0EB9                     	;# 
  4156  0EBA                     	;# 
  4157  0EBB                     	;# 
  4158  0EBC                     	;# 
  4159  0EBD                     	;# 
  4160  0EBE                     	;# 
  4161  0EC3                     	;# 
  4162  0EC5                     	;# 
  4163  0EC6                     	;# 
  4164  0EC7                     	;# 
  4165  0EC8                     	;# 
  4166  0EC9                     	;# 
  4167  0ECA                     	;# 
  4168  0ECB                     	;# 
  4169  0ECC                     	;# 
  4170  0F10                     	;# 
  4171  0F11                     	;# 
  4172  0F12                     	;# 
  4173  0F13                     	;# 
  4174  0F14                     	;# 
  4175  0F15                     	;# 
  4176  0F16                     	;# 
  4177  0F17                     	;# 
  4178  0F18                     	;# 
  4179  0F19                     	;# 
  4180  0F1A                     	;# 
  4181  0F1B                     	;# 
  4182  0F1C                     	;# 
  4183  0F1D                     	;# 
  4184  0F1E                     	;# 
  4185  0F1F                     	;# 
  4186  0F20                     	;# 
  4187  0F21                     	;# 
  4188  0F22                     	;# 
  4189  0F23                     	;# 
  4190  0F24                     	;# 
  4191  0F25                     	;# 
  4192  0F26                     	;# 
  4193  0F27                     	;# 
  4194  0F38                     	;# 
  4195  0F39                     	;# 
  4196  0F3A                     	;# 
  4197  0F3B                     	;# 
  4198  0F3C                     	;# 
  4199  0F3D                     	;# 
  4200  0F3E                     	;# 
  4201  0F3F                     	;# 
  4202  0F40                     	;# 
  4203  0F41                     	;# 
  4204  0F43                     	;# 
  4205  0F44                     	;# 
  4206  0F45                     	;# 
  4207  0F46                     	;# 
  4208  0F47                     	;# 
  4209  0F48                     	;# 
  4210  0F49                     	;# 
  4211  0F4A                     	;# 
  4212  0F4B                     	;# 
  4213  0F4C                     	;# 
  4214  0F4E                     	;# 
  4215  0F4F                     	;# 
  4216  0F50                     	;# 
  4217  0F51                     	;# 
  4218  0F52                     	;# 
  4219  0F53                     	;# 
  4220  0F54                     	;# 
  4221  0F55                     	;# 
  4222  0F56                     	;# 
  4223  0F57                     	;# 
  4224  0F65                     	;# 
  4225  0F68                     	;# 
  4226  0F69                     	;# 
  4227  0F6A                     	;# 
  4228  0F6B                     	;# 
  4229  0FE4                     	;# 
  4230  0FE5                     	;# 
  4231  0FE6                     	;# 
  4232  0FE7                     	;# 
  4233  0FE8                     	;# 
  4234  0FE9                     	;# 
  4235  0FEA                     	;# 
  4236  0FEB                     	;# 
  4237  0FED                     	;# 
  4238  0FEE                     	;# 
  4239  0FEF                     	;# 
  4240  0000                     	;# 
  4241  0001                     	;# 
  4242  0002                     	;# 
  4243  0003                     	;# 
  4244  0004                     	;# 
  4245  0005                     	;# 
  4246  0006                     	;# 
  4247  0007                     	;# 
  4248  0008                     	;# 
  4249  0009                     	;# 
  4250  000A                     	;# 
  4251  000B                     	;# 
  4252  000C                     	;# 
  4253  000D                     	;# 
  4254  000E                     	;# 
  4255  0010                     	;# 
  4256  0011                     	;# 
  4257  0012                     	;# 
  4258  0013                     	;# 
  4259  0016                     	;# 
  4260  0017                     	;# 
  4261  0018                     	;# 
  4262  001C                     	;# 
  4263  001C                     	;# 
  4264  001D                     	;# 
  4265  001D                     	;# 
  4266  001E                     	;# 
  4267  001F                     	;# 
  4268  008C                     	;# 
  4269  008C                     	;# 
  4270  008D                     	;# 
  4271  008E                     	;# 
  4272  008E                     	;# 
  4273  008F                     	;# 
  4274  0090                     	;# 
  4275  0090                     	;# 
  4276  0091                     	;# 
  4277  0093                     	;# 
  4278  0094                     	;# 
  4279  0095                     	;# 
  4280  0096                     	;# 
  4281  0097                     	;# 
  4282  0098                     	;# 
  4283  0099                     	;# 
  4284  009A                     	;# 
  4285  009B                     	;# 
  4286  009C                     	;# 
  4287  009D                     	;# 
  4288  009E                     	;# 
  4289  010C                     	;# 
  4290  010D                     	;# 
  4291  010E                     	;# 
  4292  010E                     	;# 
  4293  010F                     	;# 
  4294  0110                     	;# 
  4295  0110                     	;# 
  4296  0111                     	;# 
  4297  0112                     	;# 
  4298  0112                     	;# 
  4299  0113                     	;# 
  4300  0114                     	;# 
  4301  0114                     	;# 
  4302  0115                     	;# 
  4303  0116                     	;# 
  4304  0116                     	;# 
  4305  0117                     	;# 
  4306  0119                     	;# 
  4307  0119                     	;# 
  4308  0119                     	;# 
  4309  011A                     	;# 
  4310  011A                     	;# 
  4311  011A                     	;# 
  4312  011B                     	;# 
  4313  011B                     	;# 
  4314  011B                     	;# 
  4315  011B                     	;# 
  4316  011B                     	;# 
  4317  011C                     	;# 
  4318  011C                     	;# 
  4319  011C                     	;# 
  4320  011D                     	;# 
  4321  011D                     	;# 
  4322  011D                     	;# 
  4323  011E                     	;# 
  4324  011E                     	;# 
  4325  011E                     	;# 
  4326  011F                     	;# 
  4327  011F                     	;# 
  4328  011F                     	;# 
  4329  011F                     	;# 
  4330  011F                     	;# 
  4331  018C                     	;# 
  4332  018D                     	;# 
  4333  018E                     	;# 
  4334  018F                     	;# 
  4335  0190                     	;# 
  4336  0191                     	;# 
  4337  0192                     	;# 
  4338  0196                     	;# 
  4339  0197                     	;# 
  4340  0198                     	;# 
  4341  0199                     	;# 
  4342  019A                     	;# 
  4343  019B                     	;# 
  4344  019C                     	;# 
  4345  020C                     	;# 
  4346  020C                     	;# 
  4347  020D                     	;# 
  4348  020E                     	;# 
  4349  020F                     	;# 
  4350  020F                     	;# 
  4351  0210                     	;# 
  4352  0210                     	;# 
  4353  0211                     	;# 
  4354  0211                     	;# 
  4355  0212                     	;# 
  4356  0212                     	;# 
  4357  0213                     	;# 
  4358  0214                     	;# 
  4359  0215                     	;# 
  4360  0215                     	;# 
  4361  0216                     	;# 
  4362  0216                     	;# 
  4363  0217                     	;# 
  4364  0217                     	;# 
  4365  0218                     	;# 
  4366  0218                     	;# 
  4367  0219                     	;# 
  4368  021A                     	;# 
  4369  021B                     	;# 
  4370  021B                     	;# 
  4371  021C                     	;# 
  4372  021C                     	;# 
  4373  021D                     	;# 
  4374  021D                     	;# 
  4375  021E                     	;# 
  4376  021F                     	;# 
  4377  028C                     	;# 
  4378  028C                     	;# 
  4379  028D                     	;# 
  4380  028D                     	;# 
  4381  028E                     	;# 
  4382  028F                     	;# 
  4383  0290                     	;# 
  4384  0290                     	;# 
  4385  0291                     	;# 
  4386  0292                     	;# 
  4387  0292                     	;# 
  4388  0293                     	;# 
  4389  0293                     	;# 
  4390  0294                     	;# 
  4391  0295                     	;# 
  4392  0296                     	;# 
  4393  0296                     	;# 
  4394  0297                     	;# 
  4395  0298                     	;# 
  4396  0298                     	;# 
  4397  0299                     	;# 
  4398  0299                     	;# 
  4399  029A                     	;# 
  4400  029B                     	;# 
  4401  029C                     	;# 
  4402  029C                     	;# 
  4403  029D                     	;# 
  4404  030C                     	;# 
  4405  030C                     	;# 
  4406  030D                     	;# 
  4407  030E                     	;# 
  4408  030F                     	;# 
  4409  0310                     	;# 
  4410  0310                     	;# 
  4411  0311                     	;# 
  4412  0312                     	;# 
  4413  0313                     	;# 
  4414  0314                     	;# 
  4415  0314                     	;# 
  4416  0315                     	;# 
  4417  0316                     	;# 
  4418  0317                     	;# 
  4419  0318                     	;# 
  4420  0318                     	;# 
  4421  0319                     	;# 
  4422  031A                     	;# 
  4423  031B                     	;# 
  4424  031C                     	;# 
  4425  031C                     	;# 
  4426  031D                     	;# 
  4427  031E                     	;# 
  4428  031F                     	;# 
  4429  038C                     	;# 
  4430  038D                     	;# 
  4431  038E                     	;# 
  4432  0390                     	;# 
  4433  0391                     	;# 
  4434  0392                     	;# 
  4435  040C                     	;# 
  4436  040D                     	;# 
  4437  040E                     	;# 
  4438  040F                     	;# 
  4439  0410                     	;# 
  4440  0411                     	;# 
  4441  0416                     	;# 
  4442  0416                     	;# 
  4443  0417                     	;# 
  4444  0418                     	;# 
  4445  0418                     	;# 
  4446  0419                     	;# 
  4447  041A                     	;# 
  4448  041A                     	;# 
  4449  041B                     	;# 
  4450  041C                     	;# 
  4451  041C                     	;# 
  4452  041D                     	;# 
  4453  041E                     	;# 
  4454  041F                     	;# 
  4455  048C                     	;# 
  4456  048C                     	;# 
  4457  048D                     	;# 
  4458  048E                     	;# 
  4459  048F                     	;# 
  4460  048F                     	;# 
  4461  0490                     	;# 
  4462  0491                     	;# 
  4463  0492                     	;# 
  4464  0492                     	;# 
  4465  0493                     	;# 
  4466  0494                     	;# 
  4467  0495                     	;# 
  4468  0495                     	;# 
  4469  0496                     	;# 
  4470  0497                     	;# 
  4471  0498                     	;# 
  4472  0499                     	;# 
  4473  049A                     	;# 
  4474  049B                     	;# 
  4475  049C                     	;# 
  4476  049D                     	;# 
  4477  050C                     	;# 
  4478  050C                     	;# 
  4479  050D                     	;# 
  4480  050E                     	;# 
  4481  050F                     	;# 
  4482  050F                     	;# 
  4483  0510                     	;# 
  4484  0511                     	;# 
  4485  0512                     	;# 
  4486  0512                     	;# 
  4487  0513                     	;# 
  4488  0514                     	;# 
  4489  0515                     	;# 
  4490  0515                     	;# 
  4491  0516                     	;# 
  4492  0517                     	;# 
  4493  0518                     	;# 
  4494  0519                     	;# 
  4495  051A                     	;# 
  4496  051B                     	;# 
  4497  051C                     	;# 
  4498  051D                     	;# 
  4499  058C                     	;# 
  4500  058C                     	;# 
  4501  058D                     	;# 
  4502  058E                     	;# 
  4503  058F                     	;# 
  4504  058F                     	;# 
  4505  0590                     	;# 
  4506  0591                     	;# 
  4507  0592                     	;# 
  4508  0593                     	;# 
  4509  060C                     	;# 
  4510  060D                     	;# 
  4511  060E                     	;# 
  4512  060F                     	;# 
  4513  0610                     	;# 
  4514  0611                     	;# 
  4515  0612                     	;# 
  4516  0613                     	;# 
  4517  0614                     	;# 
  4518  0616                     	;# 
  4519  0617                     	;# 
  4520  0618                     	;# 
  4521  0619                     	;# 
  4522  061A                     	;# 
  4523  061B                     	;# 
  4524  061C                     	;# 
  4525  061D                     	;# 
  4526  061E                     	;# 
  4527  068C                     	;# 
  4528  068D                     	;# 
  4529  068E                     	;# 
  4530  068F                     	;# 
  4531  0690                     	;# 
  4532  0691                     	;# 
  4533  0692                     	;# 
  4534  0693                     	;# 
  4535  0694                     	;# 
  4536  070C                     	;# 
  4537  070D                     	;# 
  4538  070E                     	;# 
  4539  070F                     	;# 
  4540  0710                     	;# 
  4541  0711                     	;# 
  4542  0712                     	;# 
  4543  0713                     	;# 
  4544  0714                     	;# 
  4545  0716                     	;# 
  4546  0717                     	;# 
  4547  0718                     	;# 
  4548  0719                     	;# 
  4549  071A                     	;# 
  4550  071B                     	;# 
  4551  071C                     	;# 
  4552  071D                     	;# 
  4553  071E                     	;# 
  4554  0796                     	;# 
  4555  0797                     	;# 
  4556  0798                     	;# 
  4557  0799                     	;# 
  4558  079A                     	;# 
  4559  079B                     	;# 
  4560  080C                     	;# 
  4561  080D                     	;# 
  4562  080E                     	;# 
  4563  080F                     	;# 
  4564  0810                     	;# 
  4565  0811                     	;# 
  4566  0812                     	;# 
  4567  0813                     	;# 
  4568  0814                     	;# 
  4569  081A                     	;# 
  4570  081B                     	;# 
  4571  081C                     	;# 
  4572  081D                     	;# 
  4573  081E                     	;# 
  4574  081F                     	;# 
  4575  088C                     	;# 
  4576  088D                     	;# 
  4577  088E                     	;# 
  4578  088F                     	;# 
  4579  0890                     	;# 
  4580  0891                     	;# 
  4581  0892                     	;# 
  4582  0893                     	;# 
  4583  0895                     	;# 
  4584  0896                     	;# 
  4585  0897                     	;# 
  4586  0898                     	;# 
  4587  0899                     	;# 
  4588  089A                     	;# 
  4589  089B                     	;# 
  4590  090C                     	;# 
  4591  090E                     	;# 
  4592  090F                     	;# 
  4593  091F                     	;# 
  4594  091F                     	;# 
  4595  098F                     	;# 
  4596  098F                     	;# 
  4597  0990                     	;# 
  4598  0991                     	;# 
  4599  0992                     	;# 
  4600  0993                     	;# 
  4601  0994                     	;# 
  4602  0995                     	;# 
  4603  0996                     	;# 
  4604  0997                     	;# 
  4605  0E0F                     	;# 
  4606  0E10                     	;# 
  4607  0E11                     	;# 
  4608  0E12                     	;# 
  4609  0E13                     	;# 
  4610  0E14                     	;# 
  4611  0E15                     	;# 
  4612  0E16                     	;# 
  4613  0E17                     	;# 
  4614  0E18                     	;# 
  4615  0E19                     	;# 
  4616  0E1A                     	;# 
  4617  0E1B                     	;# 
  4618  0E1C                     	;# 
  4619  0E1D                     	;# 
  4620  0E1E                     	;# 
  4621  0E1F                     	;# 
  4622  0E20                     	;# 
  4623  0E21                     	;# 
  4624  0E22                     	;# 
  4625  0E23                     	;# 
  4626  0E24                     	;# 
  4627  0E25                     	;# 
  4628  0E26                     	;# 
  4629  0E27                     	;# 
  4630  0E28                     	;# 
  4631  0E29                     	;# 
  4632  0E2A                     	;# 
  4633  0E2B                     	;# 
  4634  0E2C                     	;# 
  4635  0E2D                     	;# 
  4636  0E2E                     	;# 
  4637  0E2F                     	;# 
  4638  0E30                     	;# 
  4639  0E31                     	;# 
  4640  0E32                     	;# 
  4641  0E33                     	;# 
  4642  0E34                     	;# 
  4643  0E35                     	;# 
  4644  0E36                     	;# 
  4645  0E37                     	;# 
  4646  0E8F                     	;# 
  4647  0E90                     	;# 
  4648  0E91                     	;# 
  4649  0E92                     	;# 
  4650  0E93                     	;# 
  4651  0E94                     	;# 
  4652  0E95                     	;# 
  4653  0E96                     	;# 
  4654  0E97                     	;# 
  4655  0E9C                     	;# 
  4656  0E9D                     	;# 
  4657  0E9E                     	;# 
  4658  0EA1                     	;# 
  4659  0EA2                     	;# 
  4660  0EA3                     	;# 
  4661  0EA4                     	;# 
  4662  0EA5                     	;# 
  4663  0EA9                     	;# 
  4664  0EAA                     	;# 
  4665  0EAB                     	;# 
  4666  0EAC                     	;# 
  4667  0EB1                     	;# 
  4668  0EB2                     	;# 
  4669  0EB3                     	;# 
  4670  0EB8                     	;# 
  4671  0EB9                     	;# 
  4672  0EBA                     	;# 
  4673  0EBB                     	;# 
  4674  0EBC                     	;# 
  4675  0EBD                     	;# 
  4676  0EBE                     	;# 
  4677  0EC3                     	;# 
  4678  0EC5                     	;# 
  4679  0EC6                     	;# 
  4680  0EC7                     	;# 
  4681  0EC8                     	;# 
  4682  0EC9                     	;# 
  4683  0ECA                     	;# 
  4684  0ECB                     	;# 
  4685  0ECC                     	;# 
  4686  0F10                     	;# 
  4687  0F11                     	;# 
  4688  0F12                     	;# 
  4689  0F13                     	;# 
  4690  0F14                     	;# 
  4691  0F15                     	;# 
  4692  0F16                     	;# 
  4693  0F17                     	;# 
  4694  0F18                     	;# 
  4695  0F19                     	;# 
  4696  0F1A                     	;# 
  4697  0F1B                     	;# 
  4698  0F1C                     	;# 
  4699  0F1D                     	;# 
  4700  0F1E                     	;# 
  4701  0F1F                     	;# 
  4702  0F20                     	;# 
  4703  0F21                     	;# 
  4704  0F22                     	;# 
  4705  0F23                     	;# 
  4706  0F24                     	;# 
  4707  0F25                     	;# 
  4708  0F26                     	;# 
  4709  0F27                     	;# 
  4710  0F38                     	;# 
  4711  0F39                     	;# 
  4712  0F3A                     	;# 
  4713  0F3B                     	;# 
  4714  0F3C                     	;# 
  4715  0F3D                     	;# 
  4716  0F3E                     	;# 
  4717  0F3F                     	;# 
  4718  0F40                     	;# 
  4719  0F41                     	;# 
  4720  0F43                     	;# 
  4721  0F44                     	;# 
  4722  0F45                     	;# 
  4723  0F46                     	;# 
  4724  0F47                     	;# 
  4725  0F48                     	;# 
  4726  0F49                     	;# 
  4727  0F4A                     	;# 
  4728  0F4B                     	;# 
  4729  0F4C                     	;# 
  4730  0F4E                     	;# 
  4731  0F4F                     	;# 
  4732  0F50                     	;# 
  4733  0F51                     	;# 
  4734  0F52                     	;# 
  4735  0F53                     	;# 
  4736  0F54                     	;# 
  4737  0F55                     	;# 
  4738  0F56                     	;# 
  4739  0F57                     	;# 
  4740  0F65                     	;# 
  4741  0F68                     	;# 
  4742  0F69                     	;# 
  4743  0F6A                     	;# 
  4744  0F6B                     	;# 
  4745  0FE4                     	;# 
  4746  0FE5                     	;# 
  4747  0FE6                     	;# 
  4748  0FE7                     	;# 
  4749  0FE8                     	;# 
  4750  0FE9                     	;# 
  4751  0FEA                     	;# 
  4752  0FEB                     	;# 
  4753  0FED                     	;# 
  4754  0FEE                     	;# 
  4755  0FEF                     	;# 
  4756  0000                     	;# 
  4757  0001                     	;# 
  4758  0002                     	;# 
  4759  0003                     	;# 
  4760  0004                     	;# 
  4761  0005                     	;# 
  4762  0006                     	;# 
  4763  0007                     	;# 
  4764  0008                     	;# 
  4765  0009                     	;# 
  4766  000A                     	;# 
  4767  000B                     	;# 
  4768  000C                     	;# 
  4769  000D                     	;# 
  4770  000E                     	;# 
  4771  0010                     	;# 
  4772  0011                     	;# 
  4773  0012                     	;# 
  4774  0013                     	;# 
  4775  0016                     	;# 
  4776  0017                     	;# 
  4777  0018                     	;# 
  4778  001C                     	;# 
  4779  001C                     	;# 
  4780  001D                     	;# 
  4781  001D                     	;# 
  4782  001E                     	;# 
  4783  001F                     	;# 
  4784  008C                     	;# 
  4785  008C                     	;# 
  4786  008D                     	;# 
  4787  008E                     	;# 
  4788  008E                     	;# 
  4789  008F                     	;# 
  4790  0090                     	;# 
  4791  0090                     	;# 
  4792  0091                     	;# 
  4793  0093                     	;# 
  4794  0094                     	;# 
  4795  0095                     	;# 
  4796  0096                     	;# 
  4797  0097                     	;# 
  4798  0098                     	;# 
  4799  0099                     	;# 
  4800  009A                     	;# 
  4801  009B                     	;# 
  4802  009C                     	;# 
  4803  009D                     	;# 
  4804  009E                     	;# 
  4805  010C                     	;# 
  4806  010D                     	;# 
  4807  010E                     	;# 
  4808  010E                     	;# 
  4809  010F                     	;# 
  4810  0110                     	;# 
  4811  0110                     	;# 
  4812  0111                     	;# 
  4813  0112                     	;# 
  4814  0112                     	;# 
  4815  0113                     	;# 
  4816  0114                     	;# 
  4817  0114                     	;# 
  4818  0115                     	;# 
  4819  0116                     	;# 
  4820  0116                     	;# 
  4821  0117                     	;# 
  4822  0119                     	;# 
  4823  0119                     	;# 
  4824  0119                     	;# 
  4825  011A                     	;# 
  4826  011A                     	;# 
  4827  011A                     	;# 
  4828  011B                     	;# 
  4829  011B                     	;# 
  4830  011B                     	;# 
  4831  011B                     	;# 
  4832  011B                     	;# 
  4833  011C                     	;# 
  4834  011C                     	;# 
  4835  011C                     	;# 
  4836  011D                     	;# 
  4837  011D                     	;# 
  4838  011D                     	;# 
  4839  011E                     	;# 
  4840  011E                     	;# 
  4841  011E                     	;# 
  4842  011F                     	;# 
  4843  011F                     	;# 
  4844  011F                     	;# 
  4845  011F                     	;# 
  4846  011F                     	;# 
  4847  018C                     	;# 
  4848  018D                     	;# 
  4849  018E                     	;# 
  4850  018F                     	;# 
  4851  0190                     	;# 
  4852  0191                     	;# 
  4853  0192                     	;# 
  4854  0196                     	;# 
  4855  0197                     	;# 
  4856  0198                     	;# 
  4857  0199                     	;# 
  4858  019A                     	;# 
  4859  019B                     	;# 
  4860  019C                     	;# 
  4861  020C                     	;# 
  4862  020C                     	;# 
  4863  020D                     	;# 
  4864  020E                     	;# 
  4865  020F                     	;# 
  4866  020F                     	;# 
  4867  0210                     	;# 
  4868  0210                     	;# 
  4869  0211                     	;# 
  4870  0211                     	;# 
  4871  0212                     	;# 
  4872  0212                     	;# 
  4873  0213                     	;# 
  4874  0214                     	;# 
  4875  0215                     	;# 
  4876  0215                     	;# 
  4877  0216                     	;# 
  4878  0216                     	;# 
  4879  0217                     	;# 
  4880  0217                     	;# 
  4881  0218                     	;# 
  4882  0218                     	;# 
  4883  0219                     	;# 
  4884  021A                     	;# 
  4885  021B                     	;# 
  4886  021B                     	;# 
  4887  021C                     	;# 
  4888  021C                     	;# 
  4889  021D                     	;# 
  4890  021D                     	;# 
  4891  021E                     	;# 
  4892  021F                     	;# 
  4893  028C                     	;# 
  4894  028C                     	;# 
  4895  028D                     	;# 
  4896  028D                     	;# 
  4897  028E                     	;# 
  4898  028F                     	;# 
  4899  0290                     	;# 
  4900  0290                     	;# 
  4901  0291                     	;# 
  4902  0292                     	;# 
  4903  0292                     	;# 
  4904  0293                     	;# 
  4905  0293                     	;# 
  4906  0294                     	;# 
  4907  0295                     	;# 
  4908  0296                     	;# 
  4909  0296                     	;# 
  4910  0297                     	;# 
  4911  0298                     	;# 
  4912  0298                     	;# 
  4913  0299                     	;# 
  4914  0299                     	;# 
  4915  029A                     	;# 
  4916  029B                     	;# 
  4917  029C                     	;# 
  4918  029C                     	;# 
  4919  029D                     	;# 
  4920  030C                     	;# 
  4921  030C                     	;# 
  4922  030D                     	;# 
  4923  030E                     	;# 
  4924  030F                     	;# 
  4925  0310                     	;# 
  4926  0310                     	;# 
  4927  0311                     	;# 
  4928  0312                     	;# 
  4929  0313                     	;# 
  4930  0314                     	;# 
  4931  0314                     	;# 
  4932  0315                     	;# 
  4933  0316                     	;# 
  4934  0317                     	;# 
  4935  0318                     	;# 
  4936  0318                     	;# 
  4937  0319                     	;# 
  4938  031A                     	;# 
  4939  031B                     	;# 
  4940  031C                     	;# 
  4941  031C                     	;# 
  4942  031D                     	;# 
  4943  031E                     	;# 
  4944  031F                     	;# 
  4945  038C                     	;# 
  4946  038D                     	;# 
  4947  038E                     	;# 
  4948  0390                     	;# 
  4949  0391                     	;# 
  4950  0392                     	;# 
  4951  040C                     	;# 
  4952  040D                     	;# 
  4953  040E                     	;# 
  4954  040F                     	;# 
  4955  0410                     	;# 
  4956  0411                     	;# 
  4957  0416                     	;# 
  4958  0416                     	;# 
  4959  0417                     	;# 
  4960  0418                     	;# 
  4961  0418                     	;# 
  4962  0419                     	;# 
  4963  041A                     	;# 
  4964  041A                     	;# 
  4965  041B                     	;# 
  4966  041C                     	;# 
  4967  041C                     	;# 
  4968  041D                     	;# 
  4969  041E                     	;# 
  4970  041F                     	;# 
  4971  048C                     	;# 
  4972  048C                     	;# 
  4973  048D                     	;# 
  4974  048E                     	;# 
  4975  048F                     	;# 
  4976  048F                     	;# 
  4977  0490                     	;# 
  4978  0491                     	;# 
  4979  0492                     	;# 
  4980  0492                     	;# 
  4981  0493                     	;# 
  4982  0494                     	;# 
  4983  0495                     	;# 
  4984  0495                     	;# 
  4985  0496                     	;# 
  4986  0497                     	;# 
  4987  0498                     	;# 
  4988  0499                     	;# 
  4989  049A                     	;# 
  4990  049B                     	;# 
  4991  049C                     	;# 
  4992  049D                     	;# 
  4993  050C                     	;# 
  4994  050C                     	;# 
  4995  050D                     	;# 
  4996  050E                     	;# 
  4997  050F                     	;# 
  4998  050F                     	;# 
  4999  0510                     	;# 
  5000  0511                     	;# 
  5001  0512                     	;# 
  5002  0512                     	;# 
  5003  0513                     	;# 
  5004  0514                     	;# 
  5005  0515                     	;# 
  5006  0515                     	;# 
  5007  0516                     	;# 
  5008  0517                     	;# 
  5009  0518                     	;# 
  5010  0519                     	;# 
  5011  051A                     	;# 
  5012  051B                     	;# 
  5013  051C                     	;# 
  5014  051D                     	;# 
  5015  058C                     	;# 
  5016  058C                     	;# 
  5017  058D                     	;# 
  5018  058E                     	;# 
  5019  058F                     	;# 
  5020  058F                     	;# 
  5021  0590                     	;# 
  5022  0591                     	;# 
  5023  0592                     	;# 
  5024  0593                     	;# 
  5025  060C                     	;# 
  5026  060D                     	;# 
  5027  060E                     	;# 
  5028  060F                     	;# 
  5029  0610                     	;# 
  5030  0611                     	;# 
  5031  0612                     	;# 
  5032  0613                     	;# 
  5033  0614                     	;# 
  5034  0616                     	;# 
  5035  0617                     	;# 
  5036  0618                     	;# 
  5037  0619                     	;# 
  5038  061A                     	;# 
  5039  061B                     	;# 
  5040  061C                     	;# 
  5041  061D                     	;# 
  5042  061E                     	;# 
  5043  068C                     	;# 
  5044  068D                     	;# 
  5045  068E                     	;# 
  5046  068F                     	;# 
  5047  0690                     	;# 
  5048  0691                     	;# 
  5049  0692                     	;# 
  5050  0693                     	;# 
  5051  0694                     	;# 
  5052  070C                     	;# 
  5053  070D                     	;# 
  5054  070E                     	;# 
  5055  070F                     	;# 
  5056  0710                     	;# 
  5057  0711                     	;# 
  5058  0712                     	;# 
  5059  0713                     	;# 
  5060  0714                     	;# 
  5061  0716                     	;# 
  5062  0717                     	;# 
  5063  0718                     	;# 
  5064  0719                     	;# 
  5065  071A                     	;# 
  5066  071B                     	;# 
  5067  071C                     	;# 
  5068  071D                     	;# 
  5069  071E                     	;# 
  5070  0796                     	;# 
  5071  0797                     	;# 
  5072  0798                     	;# 
  5073  0799                     	;# 
  5074  079A                     	;# 
  5075  079B                     	;# 
  5076  080C                     	;# 
  5077  080D                     	;# 
  5078  080E                     	;# 
  5079  080F                     	;# 
  5080  0810                     	;# 
  5081  0811                     	;# 
  5082  0812                     	;# 
  5083  0813                     	;# 
  5084  0814                     	;# 
  5085  081A                     	;# 
  5086  081B                     	;# 
  5087  081C                     	;# 
  5088  081D                     	;# 
  5089  081E                     	;# 
  5090  081F                     	;# 
  5091  088C                     	;# 
  5092  088D                     	;# 
  5093  088E                     	;# 
  5094  088F                     	;# 
  5095  0890                     	;# 
  5096  0891                     	;# 
  5097  0892                     	;# 
  5098  0893                     	;# 
  5099  0895                     	;# 
  5100  0896                     	;# 
  5101  0897                     	;# 
  5102  0898                     	;# 
  5103  0899                     	;# 
  5104  089A                     	;# 
  5105  089B                     	;# 
  5106  090C                     	;# 
  5107  090E                     	;# 
  5108  090F                     	;# 
  5109  091F                     	;# 
  5110  091F                     	;# 
  5111  098F                     	;# 
  5112  098F                     	;# 
  5113  0990                     	;# 
  5114  0991                     	;# 
  5115  0992                     	;# 
  5116  0993                     	;# 
  5117  0994                     	;# 
  5118  0995                     	;# 
  5119  0996                     	;# 
  5120  0997                     	;# 
  5121  0E0F                     	;# 
  5122  0E10                     	;# 
  5123  0E11                     	;# 
  5124  0E12                     	;# 
  5125  0E13                     	;# 
  5126  0E14                     	;# 
  5127  0E15                     	;# 
  5128  0E16                     	;# 
  5129  0E17                     	;# 
  5130  0E18                     	;# 
  5131  0E19                     	;# 
  5132  0E1A                     	;# 
  5133  0E1B                     	;# 
  5134  0E1C                     	;# 
  5135  0E1D                     	;# 
  5136  0E1E                     	;# 
  5137  0E1F                     	;# 
  5138  0E20                     	;# 
  5139  0E21                     	;# 
  5140  0E22                     	;# 
  5141  0E23                     	;# 
  5142  0E24                     	;# 
  5143  0E25                     	;# 
  5144  0E26                     	;# 
  5145  0E27                     	;# 
  5146  0E28                     	;# 
  5147  0E29                     	;# 
  5148  0E2A                     	;# 
  5149  0E2B                     	;# 
  5150  0E2C                     	;# 
  5151  0E2D                     	;# 
  5152  0E2E                     	;# 
  5153  0E2F                     	;# 
  5154  0E30                     	;# 
  5155  0E31                     	;# 
  5156  0E32                     	;# 
  5157  0E33                     	;# 
  5158  0E34                     	;# 
  5159  0E35                     	;# 
  5160  0E36                     	;# 
  5161  0E37                     	;# 
  5162  0E8F                     	;# 
  5163  0E90                     	;# 
  5164  0E91                     	;# 
  5165  0E92                     	;# 
  5166  0E93                     	;# 
  5167  0E94                     	;# 
  5168  0E95                     	;# 
  5169  0E96                     	;# 
  5170  0E97                     	;# 
  5171  0E9C                     	;# 
  5172  0E9D                     	;# 
  5173  0E9E                     	;# 
  5174  0EA1                     	;# 
  5175  0EA2                     	;# 
  5176  0EA3                     	;# 
  5177  0EA4                     	;# 
  5178  0EA5                     	;# 
  5179  0EA9                     	;# 
  5180  0EAA                     	;# 
  5181  0EAB                     	;# 
  5182  0EAC                     	;# 
  5183  0EB1                     	;# 
  5184  0EB2                     	;# 
  5185  0EB3                     	;# 
  5186  0EB8                     	;# 
  5187  0EB9                     	;# 
  5188  0EBA                     	;# 
  5189  0EBB                     	;# 
  5190  0EBC                     	;# 
  5191  0EBD                     	;# 
  5192  0EBE                     	;# 
  5193  0EC3                     	;# 
  5194  0EC5                     	;# 
  5195  0EC6                     	;# 
  5196  0EC7                     	;# 
  5197  0EC8                     	;# 
  5198  0EC9                     	;# 
  5199  0ECA                     	;# 
  5200  0ECB                     	;# 
  5201  0ECC                     	;# 
  5202  0F10                     	;# 
  5203  0F11                     	;# 
  5204  0F12                     	;# 
  5205  0F13                     	;# 
  5206  0F14                     	;# 
  5207  0F15                     	;# 
  5208  0F16                     	;# 
  5209  0F17                     	;# 
  5210  0F18                     	;# 
  5211  0F19                     	;# 
  5212  0F1A                     	;# 
  5213  0F1B                     	;# 
  5214  0F1C                     	;# 
  5215  0F1D                     	;# 
  5216  0F1E                     	;# 
  5217  0F1F                     	;# 
  5218  0F20                     	;# 
  5219  0F21                     	;# 
  5220  0F22                     	;# 
  5221  0F23                     	;# 
  5222  0F24                     	;# 
  5223  0F25                     	;# 
  5224  0F26                     	;# 
  5225  0F27                     	;# 
  5226  0F38                     	;# 
  5227  0F39                     	;# 
  5228  0F3A                     	;# 
  5229  0F3B                     	;# 
  5230  0F3C                     	;# 
  5231  0F3D                     	;# 
  5232  0F3E                     	;# 
  5233  0F3F                     	;# 
  5234  0F40                     	;# 
  5235  0F41                     	;# 
  5236  0F43                     	;# 
  5237  0F44                     	;# 
  5238  0F45                     	;# 
  5239  0F46                     	;# 
  5240  0F47                     	;# 
  5241  0F48                     	;# 
  5242  0F49                     	;# 
  5243  0F4A                     	;# 
  5244  0F4B                     	;# 
  5245  0F4C                     	;# 
  5246  0F4E                     	;# 
  5247  0F4F                     	;# 
  5248  0F50                     	;# 
  5249  0F51                     	;# 
  5250  0F52                     	;# 
  5251  0F53                     	;# 
  5252  0F54                     	;# 
  5253  0F55                     	;# 
  5254  0F56                     	;# 
  5255  0F57                     	;# 
  5256  0F65                     	;# 
  5257  0F68                     	;# 
  5258  0F69                     	;# 
  5259  0F6A                     	;# 
  5260  0F6B                     	;# 
  5261  0FE4                     	;# 
  5262  0FE5                     	;# 
  5263  0FE6                     	;# 
  5264  0FE7                     	;# 
  5265  0FE8                     	;# 
  5266  0FE9                     	;# 
  5267  0FEA                     	;# 
  5268  0FEB                     	;# 
  5269  0FED                     	;# 
  5270  0FEE                     	;# 
  5271  0FEF                     	;_Isamples
  5272                           
  5273                           	psect	idataBANK0
  5274  0007                     __pidataBANK0:	
  5275                           
  5276                           ;initializer for _batteryTemp
  5277  0007  34FA               	retlw	250
  5278  0008  3400               	retlw	0
  5279                           
  5280                           	psect	idataBANK2
  5281  1130                     __pidataBANK2:	
  5282                           
  5283                           ;initializer for _Vchannels
  5284  1130  3415               	retlw	21
  5285  1131  3400               	retlw	0
  5286  1132  3411               	retlw	17
  5287  1133  3400               	retlw	0
  5288  1134  3417               	retlw	23
  5289  1135  3400               	retlw	0
  5290  1136  3413               	retlw	19
  5291  1137  3400               	retlw	0
  5292                           
  5293                           ;initializer for _Ichannels
  5294  1138  3414               	retlw	20
  5295  1139  3400               	retlw	0
  5296  113A  3410               	retlw	16
  5297  113B  3400               	retlw	0
  5298  113C  3416               	retlw	22
  5299  113D  3400               	retlw	0
  5300  113E  3412               	retlw	18
  5301  113F  3400               	retlw	0
  5302                           
  5303                           	psect	stringtext1
  5304  1000                     __pstringtext1:	
  5305  1000                     _fonts:	
  5306  1000  3400               	retlw	0
  5307  1001  3400               	retlw	0
  5308  1002  3400               	retlw	0
  5309  1003  3400               	retlw	0
  5310  1004  344E               	retlw	78
  5311  1005  3400               	retlw	0
  5312  1006  3406               	retlw	6
  5313  1007  3400               	retlw	0
  5314  1008  3406               	retlw	6
  5315  1009  34FF               	retlw	255
  5316  100A  34FF               	retlw	255
  5317  100B  34FF               	retlw	255
  5318  100C  3448               	retlw	72
  5319  100D  34D6               	retlw	214
  5320  100E  3424               	retlw	36
  5321  100F  3412               	retlw	18
  5322  1010  3408               	retlw	8
  5323  1011  3424               	retlw	36
  5324  1012  34FF               	retlw	255
  5325  1013  34FF               	retlw	255
  5326  1014  34FF               	retlw	255
  5327  1015  3400               	retlw	0
  5328  1016  3406               	retlw	6
  5329  1017  3400               	retlw	0
  5330  1018  3438               	retlw	56
  5331  1019  3444               	retlw	68
  5332  101A  3482               	retlw	130
  5333  101B  3482               	retlw	130
  5334  101C  3444               	retlw	68
  5335  101D  3438               	retlw	56
  5336  101E  3414               	retlw	20
  5337  101F  3408               	retlw	8
  5338  1020  343E               	retlw	62
  5339  1021  3410               	retlw	16
  5340  1022  3438               	retlw	56
  5341  1023  3410               	retlw	16
  5342  1024  34A0               	retlw	160
  5343  1025  3460               	retlw	96
  5344  1026  3400               	retlw	0
  5345  1027  3410               	retlw	16
  5346  1028  3410               	retlw	16
  5347  1029  3410               	retlw	16
  5348  102A  3460               	retlw	96
  5349  102B  3460               	retlw	96
  5350  102C  3400               	retlw	0
  5351  102D  3460               	retlw	96
  5352  102E  3418               	retlw	24
  5353  102F  3406               	retlw	6
  5354  1030  347C               	retlw	124
  5355  1031  3442               	retlw	66
  5356  1032  347C               	retlw	124
  5357  1033  3444               	retlw	68
  5358  1034  347E               	retlw	126
  5359  1035  3440               	retlw	64
  5360  1036  3464               	retlw	100
  5361  1037  3452               	retlw	82
  5362  1038  344C               	retlw	76
  5363  1039  344A               	retlw	74
  5364  103A  344A               	retlw	74
  5365  103B  3434               	retlw	52
  5366  103C  3438               	retlw	56
  5367  103D  3424               	retlw	36
  5368  103E  347E               	retlw	126
  5369  103F  344E               	retlw	78
  5370  1040  344A               	retlw	74
  5371  1041  3432               	retlw	50
  5372  1042  343C               	retlw	60
  5373  1043  344A               	retlw	74
  5374  1044  3432               	retlw	50
  5375  1045  3462               	retlw	98
  5376  1046  341A               	retlw	26
  5377  1047  3406               	retlw	6
  5378  1048  3476               	retlw	118
  5379  1049  344A               	retlw	74
  5380  104A  3476               	retlw	118
  5381  104B  344C               	retlw	76
  5382  104C  3452               	retlw	82
  5383  104D  343C               	retlw	60
  5384  104E  346C               	retlw	108
  5385  104F  346C               	retlw	108
  5386  1050  3400               	retlw	0
  5387  1051  34AC               	retlw	172
  5388  1052  346C               	retlw	108
  5389  1053  3400               	retlw	0
  5390  1054  3410               	retlw	16
  5391  1055  3428               	retlw	40
  5392  1056  3444               	retlw	68
  5393  1057  3428               	retlw	40
  5394  1058  3428               	retlw	40
  5395  1059  3428               	retlw	40
  5396  105A  3444               	retlw	68
  5397  105B  3428               	retlw	40
  5398  105C  3410               	retlw	16
  5399  105D  3402               	retlw	2
  5400  105E  3459               	retlw	89
  5401  105F  3406               	retlw	6
  5402  1060  34FF               	retlw	255
  5403  1061  34FF               	retlw	255
  5404  1062  34FF               	retlw	255
  5405  1063  347C               	retlw	124
  5406  1064  3412               	retlw	18
  5407  1065  347C               	retlw	124
  5408  1066  347E               	retlw	126
  5409  1067  345A               	retlw	90
  5410  1068  3434               	retlw	52
  5411  1069  343C               	retlw	60
  5412  106A  3442               	retlw	66
  5413  106B  3442               	retlw	66
  5414  106C  347E               	retlw	126
  5415  106D  3442               	retlw	66
  5416  106E  343C               	retlw	60
  5417  106F  347E               	retlw	126
  5418  1070  344A               	retlw	74
  5419  1071  3442               	retlw	66
  5420  1072  347E               	retlw	126
  5421  1073  340A               	retlw	10
  5422  1074  340A               	retlw	10
  5423  1075  343C               	retlw	60
  5424  1076  3452               	retlw	82
  5425  1077  3434               	retlw	52
  5426  1078  347E               	retlw	126
  5427  1079  3408               	retlw	8
  5428  107A  347E               	retlw	126
  5429  107B  3442               	retlw	66
  5430  107C  347E               	retlw	126
  5431  107D  3442               	retlw	66
  5432  107E  3430               	retlw	48
  5433  107F  3440               	retlw	64
  5434  1080  343E               	retlw	62
  5435  1081  347E               	retlw	126
  5436  1082  3418               	retlw	24
  5437  1083  3466               	retlw	102
  5438  1084  347E               	retlw	126
  5439  1085  3440               	retlw	64
  5440  1086  3440               	retlw	64
  5441  1087  347E               	retlw	126
  5442  1088  341C               	retlw	28
  5443  1089  347E               	retlw	126
  5444  108A  347E               	retlw	126
  5445  108B  3402               	retlw	2
  5446  108C  347E               	retlw	126
  5447  108D  343C               	retlw	60
  5448  108E  3442               	retlw	66
  5449  108F  343C               	retlw	60
  5450  1090  347E               	retlw	126
  5451  1091  3412               	retlw	18
  5452  1092  340C               	retlw	12
  5453  1093  347E               	retlw	126
  5454  1094  3462               	retlw	98
  5455  1095  34FE               	retlw	254
  5456  1096  347E               	retlw	126
  5457  1097  3432               	retlw	50
  5458  1098  344E               	retlw	78
  5459  1099  3444               	retlw	68
  5460  109A  344A               	retlw	74
  5461  109B  3432               	retlw	50
  5462  109C  3402               	retlw	2
  5463  109D  347E               	retlw	126
  5464  109E  3402               	retlw	2
  5465  109F  347E               	retlw	126
  5466  10A0  3440               	retlw	64
  5467  10A1  347E               	retlw	126
  5468  10A2  343E               	retlw	62
  5469  10A3  3440               	retlw	64
  5470  10A4  343E               	retlw	62
  5471  10A5  347E               	retlw	126
  5472  10A6  3438               	retlw	56
  5473  10A7  347E               	retlw	126
  5474  10A8  3466               	retlw	102
  5475  10A9  3418               	retlw	24
  5476  10AA  3466               	retlw	102
  5477  10AB  340E               	retlw	14
  5478  10AC  3470               	retlw	112
  5479  10AD  340E               	retlw	14
  5480  10AE  3462               	retlw	98
  5481  10AF  345A               	retlw	90
  5482  10B0  3446               	retlw	70
  5483  10B1  3400               	retlw	0
  5484  10B2  347E               	retlw	126
  5485  10B3  3442               	retlw	66
  5486  10B4  3406               	retlw	6
  5487  10B5  3418               	retlw	24
  5488  10B6  3460               	retlw	96
  5489  10B7  3442               	retlw	66
  5490  10B8  347E               	retlw	126
  5491  10B9  3400               	retlw	0
  5492  10BA  3404               	retlw	4
  5493  10BB  3402               	retlw	2
  5494  10BC  3404               	retlw	4
  5495  10BD  3440               	retlw	64
  5496  10BE  3440               	retlw	64
  5497  10BF  3440               	retlw	64
  5498  10C0  3400               	retlw	0
  5499  10C1  3402               	retlw	2
  5500  10C2  3404               	retlw	4
  5501  10C3  3474               	retlw	116
  5502  10C4  3454               	retlw	84
  5503  10C5  3478               	retlw	120
  5504  10C6  347E               	retlw	126
  5505  10C7  3448               	retlw	72
  5506  10C8  3430               	retlw	48
  5507  10C9  3430               	retlw	48
  5508  10CA  3448               	retlw	72
  5509  10CB  3448               	retlw	72
  5510  10CC  3430               	retlw	48
  5511  10CD  3448               	retlw	72
  5512  10CE  347E               	retlw	126
  5513  10CF  3438               	retlw	56
  5514  10D0  3454               	retlw	84
  5515  10D1  3458               	retlw	88
  5516  10D2  347C               	retlw	124
  5517  10D3  340A               	retlw	10
  5518  10D4  3402               	retlw	2
  5519  10D5  3498               	retlw	152
  5520  10D6  34A4               	retlw	164
  5521  10D7  347C               	retlw	124
  5522  10D8  347E               	retlw	126
  5523  10D9  3408               	retlw	8
  5524  10DA  3470               	retlw	112
  5525  10DB  3448               	retlw	72
  5526  10DC  347A               	retlw	122
  5527  10DD  3440               	retlw	64
  5528  10DE  3488               	retlw	136
  5529  10DF  34FA               	retlw	250
  5530  10E0  3400               	retlw	0
  5531  10E1  347E               	retlw	126
  5532  10E2  3418               	retlw	24
  5533  10E3  3464               	retlw	100
  5534  10E4  3442               	retlw	66
  5535  10E5  347E               	retlw	126
  5536  10E6  3440               	retlw	64
  5537  10E7  347C               	retlw	124
  5538  10E8  3438               	retlw	56
  5539  10E9  347C               	retlw	124
  5540  10EA  347C               	retlw	124
  5541  10EB  3404               	retlw	4
  5542  10EC  3478               	retlw	120
  5543  10ED  3438               	retlw	56
  5544  10EE  3444               	retlw	68
  5545  10EF  3438               	retlw	56
  5546  10F0  34FC               	retlw	252
  5547  10F1  3424               	retlw	36
  5548  10F2  3418               	retlw	24
  5549  10F3  3418               	retlw	24
  5550  10F4  3424               	retlw	36
  5551  10F5  34FC               	retlw	252
  5552  10F6  3478               	retlw	120
  5553  10F7  3404               	retlw	4
  5554  10F8  3404               	retlw	4
  5555  10F9  3448               	retlw	72
  5556  10FA  3454               	retlw	84
  5557  10FB  3424               	retlw	36
  5558  10FC  3404               	retlw	4
  5559  10FD  343E               	retlw	62
  5560  10FE  3444               	retlw	68
  5561  10FF  347C               	retlw	124
  5562  1100  3440               	retlw	64
  5563  1101  347C               	retlw	124
  5564  1102  343C               	retlw	60
  5565  1103  3440               	retlw	64
  5566  1104  343C               	retlw	60
  5567  1105  347C               	retlw	124
  5568  1106  3430               	retlw	48
  5569  1107  347C               	retlw	124
  5570  1108  346C               	retlw	108
  5571  1109  3410               	retlw	16
  5572  110A  346C               	retlw	108
  5573  110B  349C               	retlw	156
  5574  110C  34A0               	retlw	160
  5575  110D  347C               	retlw	124
  5576  110E  3464               	retlw	100
  5577  110F  3454               	retlw	84
  5578  1110  344C               	retlw	76
  5579  1111  340C               	retlw	12
  5580  1112  3412               	retlw	18
  5581  1113  340C               	retlw	12
  5582  1114  34FF               	retlw	255
  5583  1115  34FF               	retlw	255
  5584  1116  34FF               	retlw	255
  5585  1117  34FF               	retlw	255
  5586  1118  34FF               	retlw	255
  5587  1119  34FF               	retlw	255
  5588  111A  34FF               	retlw	255
  5589  111B  34FF               	retlw	255
  5590  111C  34FF               	retlw	255
  5591  111D  34FF               	retlw	255
  5592  111E  34FF               	retlw	255
  5593  111F  34FF               	retlw	255
  5594  1120  34FF               	retlw	255
  5595  1121  34FF               	retlw	255
  5596  1122  34FF               	retlw	255
  5597  1123  34FF               	retlw	255
  5598  1124  34FF               	retlw	255
  5599  1125  34FF               	retlw	255
  5600  1126  34FC               	retlw	252
  5601  1127  3440               	retlw	64
  5602  1128  347C               	retlw	124
  5603  1129  34FF               	retlw	255
  5604  112A  34FF               	retlw	255
  5605  112B  34FF               	retlw	255
  5606  112C  34FF               	retlw	255
  5607  112D  34FF               	retlw	255
  5608  112E  34FF               	retlw	255
  5609  112F                     __end_of_fonts:	
  5610                           
  5611                           	psect	stringtext2
  5612  1800                     __pstringtext2:	
  5613  1800                     log@coeff:	
  5614  1800  3400               	retlw	0
  5615  1801  3400               	retlw	0
  5616  1802  3400               	retlw	0
  5617  1803  3400               	retlw	0
  5618  1804  3480               	retlw	128
  5619  1805  343F               	retlw	63
  5620  1806  34F0               	retlw	240
  5621  1807  34FF               	retlw	255
  5622  1808  34BE               	retlw	190
  5623  1809  34E2               	retlw	226
  5624  180A  34A9               	retlw	169
  5625  180B  343E               	retlw	62
  5626  180C  3483               	retlw	131
  5627  180D  3476               	retlw	118
  5628  180E  34BE               	retlw	190
  5629  180F  34AE               	retlw	174
  5630  1810  342B               	retlw	43
  5631  1811  343E               	retlw	62
  5632  1812  343C               	retlw	60
  5633  1813  34C3               	retlw	195
  5634  1814  34BD               	retlw	189
  5635  1815  34D2               	retlw	210
  5636  1816  3413               	retlw	19
  5637  1817  343D               	retlw	61
  5638  1818  3478               	retlw	120
  5639  1819  34D3               	retlw	211
  5640  181A  34BB               	retlw	187
  5641  181B                     __end_oflog@coeff:	
  5642  0013                     _TRISC	set	19
  5643  0012                     _TRISB	set	18
  5644  0011                     _TRISA	set	17
  5645  0018                     _LATC	set	24
  5646  0017                     _LATB	set	23
  5647  0016                     _LATA	set	22
  5648  0016                     _LATAbits	set	22
  5649  0011                     _TRISAbits	set	17
  5650  00B5                     _LATA5	set	181
  5651  006A                     _RB2	set	106
  5652  005F                     _GIE	set	95
  5653  0093                     _ADCON0	set	147
  5654  009D                     _ADACQ	set	157
  5655  009C                     _ADPRE	set	156
  5656  009B                     _ADCAP	set	155
  5657  009A                     _ADREF	set	154
  5658  0098                     _ADCLK	set	152
  5659  0097                     _ADSTAT	set	151
  5660  0099                     _ADACT	set	153
  5661  0096                     _ADCON3	set	150
  5662  0095                     _ADCON2	set	149
  5663  0094                     _ADCON1	set	148
  5664  008C                     _ADRESL	set	140
  5665  008D                     _ADRESH	set	141
  5666  0093                     _ADCON0bits	set	147
  5667  009E                     _ADPCH	set	158
  5668  0113                     _ADSTPTH	set	275
  5669  0112                     _ADSTPTL	set	274
  5670  0111                     _ADUTHH	set	273
  5671  0110                     _ADUTHL	set	272
  5672  010F                     _ADLTHH	set	271
  5673  010E                     _ADLTHL	set	270
  5674  010D                     _ADRPT	set	269
  5675  021E                     _CCPTMRS0bits	set	542
  5676  021F                     _CCPTMRS1bits	set	543
  5677  0294                     _T4CONbits	set	660
  5678  0292                     _T4TMR	set	658
  5679  0293                     _T4PR	set	659
  5680  0297                     _T4RST	set	663
  5681  0295                     _T4HLT	set	661
  5682  0296                     _T4CLKCON	set	662
  5683  0294                     _T4CON	set	660
  5684  028E                     _T2CONbits	set	654
  5685  028C                     _T2TMR	set	652
  5686  028D                     _T2PR	set	653
  5687  0291                     _T2RST	set	657
  5688  028F                     _T2HLT	set	655
  5689  0290                     _T2CLKCON	set	656
  5690  028E                     _T2CON	set	654
  5691  030C                     _CCPR1L	set	780
  5692  030D                     _CCPR1H	set	781
  5693  030E                     _CCP1CONbits	set	782
  5694  0390                     _PWM7DCL	set	912
  5695  0391                     _PWM7DCH	set	913
  5696  0392                     _PWM7CON	set	914
  5697  038C                     _PWM6DCL	set	908
  5698  038D                     _PWM6DCH	set	909
  5699  038E                     _PWM6CON	set	910
  5700  0710                     _PIR4bits	set	1808
  5701  0716                     _PIE0bits	set	1814
  5702  0892                     _OSCTUNE	set	2194
  5703  0893                     _OSCFRQ	set	2195
  5704  0891                     _OSCEN	set	2193
  5705  088F                     _OSCCON3	set	2191
  5706  088D                     _OSCCON1	set	2189
  5707  090C                     _FVRCON	set	2316
  5708  0E8F                     _PPSLOCKbits	set	3727
  5709  0E8F                     _PPSLOCK	set	3727
  5710  0F18                     _RB0PPS	set	3864
  5711  0F17                     _RA7PPS	set	3863
  5712  0F16                     _RA6PPS	set	3862
  5713  0F4E                     _ANSELC	set	3918
  5714  0F43                     _ANSELB	set	3907
  5715  0F38                     _ANSELA	set	3896
  5716  0F65                     _WPUE	set	3941
  5717  0F4F                     _WPUC	set	3919
  5718  0F44                     _WPUB	set	3908
  5719  0F39                     _WPUA	set	3897
  5720  181B                     STR_3:	
  5721  181B  3452               	retlw	82	;'R'
  5722  181C  3465               	retlw	101	;'e'
  5723  181D  3466               	retlw	102	;'f'
  5724  181E  343A               	retlw	58	;':'
  5725  181F  3400               	retlw	0
  5726                           
  5727                           	psect	stringtext3
  5728  1820                     __pstringtext3:	
  5729  1820                     STR_2:	
  5730  1820  344F               	retlw	79	;'O'
  5731  1821  3475               	retlw	117	;'u'
  5732  1822  3474               	retlw	116	;'t'
  5733  1823  343A               	retlw	58	;':'
  5734  1824  3400               	retlw	0
  5735                           
  5736                           	psect	stringtext4
  5737  1825                     __pstringtext4:	
  5738  1825                     STR_1:	
  5739  1825  3449               	retlw	73	;'I'
  5740  1826  346E               	retlw	110	;'n'
  5741  1827  343A               	retlw	58	;':'
  5742  1828  3400               	retlw	0
  5743                           
  5744                           	psect	stringtext5
  5745  0000                     __pstringtext5:	
  5746                           
  5747                           ; #config settings
  5748  0000                     
  5749                           	psect	cinit
  5750  07BC                     start_initialization:	
  5751  07BC                     __initialization:		;BIGRAM
  5752                           
  5753                           ; Initialize objects allocated to BANK0
  5754  07BC  3180  2007  3187   	fcall	__pidataBANK0	;fetch initializer
  5755  07BF  00ED               	movwf	__pdataBANK0& (0+127)
  5756  07C0  3180  2008  3187   	fcall	__pidataBANK0+1	;fetch initializer
  5757  07C3  00EE               	movwf	(__pdataBANK0+1)& (0+127)
  5758                           
  5759                           ; Initialize objects allocated to BANK2
  5760  07C4  3030               	movlw	low __pidataBANK2
  5761  07C5  0084               	movwf	4
  5762  07C6  3091               	movlw	(high __pidataBANK2)| (0+128)
  5763  07C7  0085               	movwf	5
  5764  07C8  3051               	movlw	low __pdataBANK2
  5765  07C9  0086               	movwf	6
  5766  07CA  3001               	movlw	high __pdataBANK2
  5767  07CB  0087               	movwf	7
  5768  07CC  3000               	movlw	0
  5769  07CD  00FF               	movwf	btemp+1
  5770  07CE  3010               	movlw	16
  5771  07CF  319F  2702  3187   	fcall	init_ram
  5772                           
  5773                           ; Clear objects allocated to BIGRAM
  5774  07D2  30E8               	movlw	low (0+8680)
  5775  07D3  0084               	movwf	4
  5776  07D4  3021               	movlw	high (0+8680)
  5777  07D5  0085               	movwf	5
  5778  07D6  3008               	movlw	8
  5779  07D7  00FE               	movwf	btemp
  5780  07D8  3002               	movlw	2
  5781  07D9  00FF               	movwf	btemp+1
  5782  07DA  319E  26F6  3187   	fcall	clear_ram0
  5783                           
  5784                           ; Clear objects allocated to BANK0
  5785  07DD  3061               	movlw	low __pbssBANK0
  5786  07DE  0084               	movwf	4
  5787  07DF  3000               	movlw	high __pbssBANK0
  5788  07E0  0085               	movwf	5
  5789  07E1  300C               	movlw	12
  5790  07E2  00FE               	movwf	btemp
  5791  07E3  3000               	movlw	0
  5792  07E4  00FF               	movwf	btemp+1
  5793  07E5  319E  26F6  3187   	fcall	clear_ram0
  5794                           
  5795                           ; Clear objects allocated to BANK1
  5796  07E8  30A0               	movlw	low __pbssBANK1
  5797  07E9  0084               	movwf	4
  5798  07EA  3000               	movlw	high __pbssBANK1
  5799  07EB  0085               	movwf	5
  5800  07EC  3032               	movlw	50
  5801  07ED  00FE               	movwf	btemp
  5802  07EE  3000               	movlw	0
  5803  07EF  00FF               	movwf	btemp+1
  5804  07F0  319E  26F6  3187   	fcall	clear_ram0
  5805                           
  5806                           ; Clear objects allocated to BANK2
  5807  07F3  3020               	movlw	low __pbssBANK2
  5808  07F4  0084               	movwf	4
  5809  07F5  3001               	movlw	high __pbssBANK2
  5810  07F6  0085               	movwf	5
  5811  07F7  3031               	movlw	49
  5812  07F8  00FE               	movwf	btemp
  5813  07F9  3000               	movlw	0
  5814  07FA  00FF               	movwf	btemp+1
  5815  07FB  319E  26F6         	fcall	clear_ram0
  5816  07FD                     end_of_initialization:	
  5817                           ;End of C runtime variable initialization code
  5818                           
  5819  07FD                     __end_of__initialization:	
  5820  07FD  0020               	movlb	0
  5821  07FE  3181  2948         	ljmp	_main	;jump to C main() function
  5822                           
  5823                           	psect	bssBANK0
  5824  0061                     __pbssBANK0:	
  5825  0061                     _readButtons:	
  5826  0061                     	ds	2
  5827  0063                     _VHoldMode:	
  5828  0063                     	ds	2
  5829  0065                     _Imode:	
  5830  0065                     	ds	2
  5831  0067                     _batteryState:	
  5832  0067                     	ds	2
  5833  0069                     _j:	
  5834  0069                     	ds	1
  5835  006A                     _lastButton:	
  5836  006A                     	ds	1
  5837  006B                     _button:	
  5838  006B                     	ds	1
  5839  006C                     _x:	
  5840  006C                     	ds	1
  5841                           
  5842                           	psect	dataBANK0
  5843  006D                     __pdataBANK0:	
  5844  006D                     _batteryTemp:	
  5845  006D                     	ds	2
  5846                           
  5847                           	psect	bssBANK1
  5848  00A0                     __pbssBANK1:	
  5849  00A0                     _Ianalogs:	
  5850  00A0                     	ds	8
  5851  00A8                     _voltage:	
  5852  00A8                     	ds	8
  5853  00B0                     _current:	
  5854  00B0                     	ds	8
  5855  00B8                     _Vref:	
  5856  00B8                     	ds	4
  5857  00BC                     _stateCounter:	
  5858  00BC                     	ds	4
  5859  00C0                     _Iref:	
  5860  00C0                     	ds	4
  5861  00C4                     _IminCount:	
  5862  00C4                     	ds	4
  5863  00C8                     _errno:	
  5864  00C8                     	ds	2
  5865  00CA                     _Iout:	
  5866  00CA                     	ds	2
  5867  00CC                     _cc_cv:	
  5868  00CC                     	ds	2
  5869  00CE                     _VsampleIndex:	
  5870  00CE                     	ds	2
  5871  00D0                     _IsampleIndex:	
  5872  00D0                     	ds	2
  5873                           
  5874                           	psect	bssBANK2
  5875  0120                     __pbssBANK2:	
  5876  0120                     _Vtotals:	
  5877  0120                     	ds	16
  5878  0130                     _Itotals:	
  5879  0130                     	ds	16
  5880  0140                     _Vanalogs:	
  5881  0140                     	ds	8
  5882  0148                     LCDWriteInt@F14392:	
  5883  0148                     	ds	5
  5884  014D                     _Imin:	
  5885  014D                     	ds	4
  5886                           
  5887                           	psect	dataBANK2
  5888  0151                     __pdataBANK2:	
  5889  0151                     _Vchannels:	
  5890  0151                     	ds	8
  5891  0159                     _Ichannels:	
  5892  0159                     	ds	8
  5893                           
  5894                           	psect	inittext
  5895  1F02                     init_ram:	
  5896  1F02  00FE               	movwf	126
  5897  1F03                     initloop:	
  5898  1F03  0012               	moviw fsr0++
  5899  1F04  001E               	movwi fsr1++
  5900  1F05  3001               	movlw	1
  5901  1F06  02FE               	subwf	126,f
  5902  1F07  3000               	movlw	0
  5903  1F08  3BFF               	subwfb	127,f
  5904  1F09  087F               	movf	127,w
  5905  1F0A  047E               	iorwf	126,w
  5906  1F0B  1903               	btfsc	3,2
  5907  1F0C  3400               	retlw	0
  5908  1F0D  2F03               	goto	initloop
  5909                           
  5910                           	psect	clrtext
  5911  1EF6                     clear_ram0:	
  5912                           ;	Called with FSR0 containing the base address, and
  5913                           ;	btemp/btemp+1 has the size to clear
  5914                           
  5915  1EF6  0064               	clrwdt	;clear the watchdog before getting into this loop
  5916  1EF7                     clrloop0:	
  5917  1EF7  0180               	clrf	0	;clear RAM location pointed to by FSR
  5918  1EF8  3101               	addfsr 0,1
  5919  1EF9  3001               	movlw	1
  5920  1EFA  02FE               	subwf	126,f
  5921  1EFB  3000               	movlw	0
  5922  1EFC  3BFF               	subwfb	127,f
  5923  1EFD  087F               	movf	127,w
  5924  1EFE  047E               	iorwf	126,w
  5925  1EFF  1903               	btfsc	3,2
  5926  1F00  3400               	retlw	0	;all done for this memory range, return
  5927  1F01  2EF7               	goto	clrloop0	;have we reached the end yet?
  5928                           
  5929                           	psect	cstackBANK1
  5930  00D2                     __pcstackBANK1:	
  5931  00D2                     main@efficiency:	
  5932                           
  5933                           ; 3 bytes @ 0x0
  5934  00D2                     	ds	3
  5935  00D5                     main@faultCount:	
  5936                           
  5937                           ; 2 bytes @ 0x3
  5938  00D5                     	ds	2
  5939  00D7                     main@faultNotReset:	
  5940                           
  5941                           ; 2 bytes @ 0x5
  5942  00D7                     	ds	2
  5943  00D9                     _main$1307:	
  5944                           
  5945                           ; 2 bytes @ 0x7
  5946  00D9                     	ds	2
  5947  00DB                     main@displayRefresh:	
  5948                           
  5949                           ; 1 bytes @ 0x9
  5950  00DB                     	ds	1
  5951  00DC                     main@fastLoop:	
  5952                           
  5953                           ; 1 bytes @ 0xA
  5954  00DC                     	ds	1
  5955  00DD                     main@slowLoop:	
  5956                           
  5957                           ; 1 bytes @ 0xB
  5958  00DD                     	ds	1
  5959  00DE                     main@MPPT1:	
  5960                           
  5961                           ; 2 bytes @ 0xC
  5962  00DE                     	ds	2
  5963  00E0                     main@MPPT0:	
  5964                           
  5965                           ; 2 bytes @ 0xE
  5966  00E0                     	ds	2
  5967  00E2                     main@largerIOut:	
  5968                           
  5969                           ; 2 bytes @ 0x10
  5970  00E2                     	ds	2
  5971  00E4                     main@menuButton:	
  5972                           
  5973                           ; 1 bytes @ 0x12
  5974  00E4                     	ds	1
  5975  00E5                     main@dutyCycle1:	
  5976                           
  5977                           ; 2 bytes @ 0x13
  5978  00E5                     	ds	2
  5979  00E7                     main@tempFanOutput:	
  5980                           
  5981                           ; 2 bytes @ 0x15
  5982  00E7                     	ds	2
  5983  00E9                     main@dutyCycle6:	
  5984                           
  5985                           ; 2 bytes @ 0x17
  5986  00E9                     	ds	2
  5987  00EB                     main@dutyCycle7:	
  5988                           
  5989                           ; 2 bytes @ 0x19
  5990  00EB                     	ds	2
  5991  00ED                     main@j:	
  5992                           
  5993                           ; 1 bytes @ 0x1B
  5994  00ED                     	ds	1
  5995                           
  5996                           	psect	cstackCOMMON
  5997  0070                     __pcstackCOMMON:	
  5998  0070                     ?_LCDWrite:	
  5999  0070                     ?_OSCILLATOR_Initialize:	
  6000                           ; 1 bytes @ 0x0
  6001                           
  6002  0070                     ??_OSCILLATOR_Initialize:	
  6003                           ; 1 bytes @ 0x0
  6004                           
  6005  0070                     ?_TMR2_Initialize:	
  6006                           ; 1 bytes @ 0x0
  6007                           
  6008  0070                     ??_TMR2_Initialize:	
  6009                           ; 1 bytes @ 0x0
  6010                           
  6011  0070                     ?_TMR4_Initialize:	
  6012                           ; 1 bytes @ 0x0
  6013                           
  6014  0070                     ??_TMR4_Initialize:	
  6015                           ; 1 bytes @ 0x0
  6016                           
  6017  0070                     ?_calculateCurrent0:	
  6018                           ; 1 bytes @ 0x0
  6019                           
  6020  0070                     ?_calculateCurrent2:	
  6021                           ; 1 bytes @ 0x0
  6022                           
  6023  0070                     ?_calculateCurrent3:	
  6024                           ; 1 bytes @ 0x0
  6025                           
  6026  0070                     ?_ADC_Initialize:	
  6027                           ; 1 bytes @ 0x0
  6028                           
  6029  0070                     ??_ADC_Initialize:	
  6030                           ; 1 bytes @ 0x0
  6031                           
  6032  0070                     ?_Init_Battery_State_Machine:	
  6033                           ; 1 bytes @ 0x0
  6034                           
  6035  0070                     ?_Battery_State_Machine:	
  6036                           ; 1 bytes @ 0x0
  6037                           
  6038  0070                     ?_cc_cv_mode:	
  6039                           ; 1 bytes @ 0x0
  6040                           
  6041  0070                     ?_readButton:	
  6042                           ; 1 bytes @ 0x0
  6043                           
  6044  0070                     ?_LCDWriteCharacter:	
  6045                           ; 1 bytes @ 0x0
  6046                           
  6047  0070                     ?_LCDClear:	
  6048                           ; 1 bytes @ 0x0
  6049                           
  6050  0070                     ?_LCDInit:	
  6051                           ; 1 bytes @ 0x0
  6052                           
  6053  0070                     ?_PIN_MANAGER_Initialize:	
  6054                           ; 1 bytes @ 0x0
  6055                           
  6056  0070                     ??_PIN_MANAGER_Initialize:	
  6057                           ; 1 bytes @ 0x0
  6058                           
  6059  0070                     ?_PWM_Initialize:	
  6060                           ; 1 bytes @ 0x0
  6061                           
  6062  0070                     ??_PWM_Initialize:	
  6063                           ; 1 bytes @ 0x0
  6064                           
  6065  0070                     ?_PWM6_LoadDutyValue:	
  6066                           ; 1 bytes @ 0x0
  6067                           
  6068  0070                     ?_PWM7_LoadDutyValue:	
  6069                           ; 1 bytes @ 0x0
  6070                           
  6071  0070                     ?_PWM1_LoadDutyValue:	
  6072                           ; 1 bytes @ 0x0
  6073                           
  6074  0070                     ?_SYSTEM_Initialize:	
  6075                           ; 1 bytes @ 0x0
  6076                           
  6077  0070                     ?_main:	
  6078                           ; 1 bytes @ 0x0
  6079                           
  6080  0070                     ?_ADCRead:	
  6081                           ; 1 bytes @ 0x0
  6082                           
  6083  0070                     ?___wmul:	
  6084                           ; 2 bytes @ 0x0
  6085                           
  6086  0070                     ?___lwmod:	
  6087                           ; 2 bytes @ 0x0
  6088                           
  6089  0070                     ?___ftpack:	
  6090                           ; 2 bytes @ 0x0
  6091                           
  6092  0070                     ?_frexp:	
  6093                           ; 3 bytes @ 0x0
  6094                           
  6095  0070                     ?___aldiv:	
  6096                           ; 3 bytes @ 0x0
  6097                           
  6098  0070                     LCDWrite@data:	
  6099                           ; 4 bytes @ 0x0
  6100                           
  6101  0070                     PIN_MANAGER_Initialize@state:	
  6102                           ; 1 bytes @ 0x0
  6103                           
  6104  0070                     PWM6_LoadDutyValue@dutyCycle6:	
  6105                           ; 1 bytes @ 0x0
  6106                           
  6107  0070                     PWM7_LoadDutyValue@dutyCycle7:	
  6108                           ; 2 bytes @ 0x0
  6109                           
  6110  0070                     PWM1_LoadDutyValue@dutyCycle1:	
  6111                           ; 2 bytes @ 0x0
  6112                           
  6113  0070                     ___wmul@multiplier:	
  6114                           ; 2 bytes @ 0x0
  6115                           
  6116  0070                     ___lwmod@divisor:	
  6117                           ; 2 bytes @ 0x0
  6118                           
  6119  0070                     ___ftpack@arg:	
  6120                           ; 2 bytes @ 0x0
  6121                           
  6122  0070                     frexp@value:	
  6123                           ; 3 bytes @ 0x0
  6124                           
  6125  0070                     ___aldiv@divisor:	
  6126                           ; 3 bytes @ 0x0
  6127                           
  6128                           
  6129                           ; 4 bytes @ 0x0
  6130  0070                     	ds	1
  6131  0071                     ??_LCDWrite:	
  6132                           
  6133                           ; 1 bytes @ 0x1
  6134  0071                     	ds	1
  6135  0072                     ??_PWM6_LoadDutyValue:	
  6136  0072                     ??_PWM7_LoadDutyValue:	
  6137                           ; 1 bytes @ 0x2
  6138                           
  6139  0072                     ??_PWM1_LoadDutyValue:	
  6140                           ; 1 bytes @ 0x2
  6141                           
  6142  0072                     LCDWrite@data_or_command:	
  6143                           ; 1 bytes @ 0x2
  6144                           
  6145  0072                     ___wmul@multiplicand:	
  6146                           ; 1 bytes @ 0x2
  6147                           
  6148  0072                     ___lwmod@dividend:	
  6149                           ; 2 bytes @ 0x2
  6150                           
  6151                           
  6152                           ; 2 bytes @ 0x2
  6153  0072                     	ds	1
  6154  0073                     ??_ADCRead:	
  6155  0073                     ADCRead@channel:	
  6156                           ; 1 bytes @ 0x3
  6157                           
  6158  0073                     LCDWrite@d:	
  6159                           ; 1 bytes @ 0x3
  6160                           
  6161  0073                     ___ftpack@exp:	
  6162                           ; 1 bytes @ 0x3
  6163                           
  6164  0073                     frexp@eptr:	
  6165                           ; 1 bytes @ 0x3
  6166                           
  6167                           
  6168                           ; 1 bytes @ 0x3
  6169  0073                     	ds	1
  6170  0074                     ??_frexp:	
  6171  0074                     ??_readButton:	
  6172                           ; 1 bytes @ 0x4
  6173                           
  6174  0074                     ??___wmul:	
  6175                           ; 1 bytes @ 0x4
  6176                           
  6177  0074                     ??___lwmod:	
  6178                           ; 1 bytes @ 0x4
  6179                           
  6180  0074                     LCDWrite@i:	
  6181                           ; 1 bytes @ 0x4
  6182                           
  6183  0074                     ___ftpack@sign:	
  6184                           ; 1 bytes @ 0x4
  6185                           
  6186  0074                     ___wmul@product:	
  6187                           ; 1 bytes @ 0x4
  6188                           
  6189  0074                     ___aldiv@dividend:	
  6190                           ; 2 bytes @ 0x4
  6191                           
  6192                           
  6193                           ; 4 bytes @ 0x4
  6194  0074                     	ds	1
  6195  0075                     ??___ftpack:	
  6196  0075                     ?_gotoXY:	
  6197                           ; 1 bytes @ 0x5
  6198                           
  6199  0075                     ??_LCDInit:	
  6200                           ; 1 bytes @ 0x5
  6201                           
  6202  0075                     gotoXY@y:	
  6203                           ; 1 bytes @ 0x5
  6204                           
  6205  0075                     ___lwmod@counter:	
  6206                           ; 1 bytes @ 0x5
  6207                           
  6208                           
  6209                           ; 1 bytes @ 0x5
  6210  0075                     	ds	1
  6211  0076                     ??_gotoXY:	
  6212  0076                     ??_LCDWriteCharacter:	
  6213                           ; 1 bytes @ 0x6
  6214                           
  6215  0076                     ?___awdiv:	
  6216                           ; 1 bytes @ 0x6
  6217                           
  6218  0076                     ___awdiv@divisor:	
  6219                           ; 2 bytes @ 0x6
  6220                           
  6221                           
  6222                           ; 2 bytes @ 0x6
  6223  0076                     	ds	1
  6224  0077                     gotoXY@x:	
  6225                           
  6226                           ; 1 bytes @ 0x7
  6227  0077                     	ds	1
  6228  0078                     ??_LCDClear:	
  6229  0078                     ??___aldiv:	
  6230                           ; 1 bytes @ 0x8
  6231                           
  6232  0078                     ___awdiv@dividend:	
  6233                           ; 1 bytes @ 0x8
  6234                           
  6235                           
  6236                           ; 2 bytes @ 0x8
  6237  0078                     	ds	1
  6238  0079                     LCDWriteCharacter@character:	
  6239  0079                     readIAnalog@analog_channel:	
  6240                           ; 1 bytes @ 0x9
  6241                           
  6242  0079                     readVAnalog@analog_channel:	
  6243                           ; 2 bytes @ 0x9
  6244                           
  6245  0079                     LCDClear@index:	
  6246                           ; 2 bytes @ 0x9
  6247                           
  6248                           
  6249                           ; 2 bytes @ 0x9
  6250  0079                     	ds	1
  6251  007A                     ??___awdiv:	
  6252  007A                     LCDWriteCharacter@base:	
  6253                           ; 1 bytes @ 0xA
  6254                           
  6255                           
  6256                           ; 2 bytes @ 0xA
  6257  007A                     	ds	1
  6258  007B                     ??___awtoft:	
  6259  007B                     readIAnalog@value:	
  6260                           ; 1 bytes @ 0xB
  6261                           
  6262  007B                     readVAnalog@value:	
  6263                           ; 2 bytes @ 0xB
  6264                           
  6265                           
  6266                           ; 2 bytes @ 0xB
  6267  007B                     	ds	1
  6268  007C                     ?_LCDWriteString:	
  6269  007C                     LCDWriteString@characters:	
  6270                           ; 1 bytes @ 0xC
  6271                           
  6272                           
  6273                           ; 2 bytes @ 0xC
  6274  007C                     	ds	1
  6275  007D                     ___awtoft@sign:	
  6276                           
  6277                           ; 1 bytes @ 0xD
  6278  007D                     	ds	1
  6279  007E                     ??_eval_poly:	
  6280  007E                     ??_tempCalc:	
  6281                           ; 1 bytes @ 0xE
  6282                           
  6283  007E                     ??___ftsub:	
  6284                           ; 1 bytes @ 0xE
  6285                           
  6286                           
  6287                           	psect	cstackBANK0
  6288  0020                     __pcstackBANK0:	
  6289                           ; 1 bytes @ 0xE
  6290                           
  6291  0020                     ??_LCDWriteString:	
  6292  0020                     ___aldiv@counter:	
  6293                           ; 1 bytes @ 0x0
  6294                           
  6295  0020                     ___awdiv@counter:	
  6296                           ; 1 bytes @ 0x0
  6297                           
  6298                           
  6299                           ; 1 bytes @ 0x0
  6300  0020                     	ds	1
  6301  0021                     ___aldiv@sign:	
  6302  0021                     ___awdiv@sign:	
  6303                           ; 1 bytes @ 0x1
  6304                           
  6305                           
  6306                           ; 1 bytes @ 0x1
  6307  0021                     	ds	1
  6308  0022                     ___awdiv@quotient:	
  6309  0022                     ___aldiv@quotient:	
  6310                           ; 2 bytes @ 0x2
  6311                           
  6312                           
  6313                           ; 4 bytes @ 0x2
  6314  0022                     	ds	2
  6315  0024                     ?___awtoft:	
  6316  0024                     ___awtoft@c:	
  6317                           ; 3 bytes @ 0x4
  6318                           
  6319                           
  6320                           ; 2 bytes @ 0x4
  6321  0024                     	ds	2
  6322  0026                     ?_readIAnalog:	
  6323  0026                     ?_readVAnalog:	
  6324                           ; 2 bytes @ 0x6
  6325                           
  6326  0026                     readIAnalog@channel:	
  6327                           ; 2 bytes @ 0x6
  6328                           
  6329  0026                     readVAnalog@channel:	
  6330                           ; 2 bytes @ 0x6
  6331                           
  6332                           
  6333                           ; 2 bytes @ 0x6
  6334  0026                     	ds	1
  6335  0027                     ?___ftdiv:	
  6336  0027                     ?___ftmul:	
  6337                           ; 3 bytes @ 0x7
  6338                           
  6339  0027                     ___ftdiv@f2:	
  6340                           ; 3 bytes @ 0x7
  6341                           
  6342  0027                     ___ftmul@f1:	
  6343                           ; 3 bytes @ 0x7
  6344                           
  6345                           
  6346                           ; 3 bytes @ 0x7
  6347  0027                     	ds	1
  6348  0028                     ??_readIAnalog:	
  6349  0028                     ??_readVAnalog:	
  6350                           ; 1 bytes @ 0x8
  6351                           
  6352                           
  6353                           ; 1 bytes @ 0x8
  6354  0028                     	ds	2
  6355  002A                     ___ftdiv@f1:	
  6356  002A                     ___ftmul@f2:	
  6357                           ; 3 bytes @ 0xA
  6358                           
  6359                           
  6360                           ; 3 bytes @ 0xA
  6361  002A                     	ds	3
  6362  002D                     ??___ftdiv:	
  6363  002D                     ??___ftmul:	
  6364                           ; 1 bytes @ 0xD
  6365                           
  6366                           
  6367                           ; 1 bytes @ 0xD
  6368  002D                     	ds	4
  6369  0031                     ___ftdiv@cntr:	
  6370  0031                     ___ftmul@exp:	
  6371                           ; 1 bytes @ 0x11
  6372                           
  6373                           
  6374                           ; 1 bytes @ 0x11
  6375  0031                     	ds	1
  6376  0032                     ___ftdiv@f3:	
  6377  0032                     ___ftmul@f3_as_product:	
  6378                           ; 3 bytes @ 0x12
  6379                           
  6380                           
  6381                           ; 3 bytes @ 0x12
  6382  0032                     	ds	3
  6383  0035                     ___ftdiv@exp:	
  6384  0035                     ___ftmul@cntr:	
  6385                           ; 1 bytes @ 0x15
  6386                           
  6387                           
  6388                           ; 1 bytes @ 0x15
  6389  0035                     	ds	1
  6390  0036                     ___ftdiv@sign:	
  6391  0036                     ___ftmul@sign:	
  6392                           ; 1 bytes @ 0x16
  6393                           
  6394                           
  6395                           ; 1 bytes @ 0x16
  6396  0036                     	ds	1
  6397  0037                     ?___ftge:	
  6398  0037                     ?___ftadd:	
  6399                           ; 1 bit 
  6400                           
  6401  0037                     ?___fttol:	
  6402                           ; 3 bytes @ 0x17
  6403                           
  6404  0037                     ___ftadd@f1:	
  6405                           ; 4 bytes @ 0x17
  6406                           
  6407  0037                     ___ftge@ff1:	
  6408                           ; 3 bytes @ 0x17
  6409                           
  6410  0037                     ___fttol@f1:	
  6411                           ; 3 bytes @ 0x17
  6412                           
  6413                           
  6414                           ; 3 bytes @ 0x17
  6415  0037                     	ds	3
  6416  003A                     ___ftadd@f2:	
  6417  003A                     ___ftge@ff2:	
  6418                           ; 3 bytes @ 0x1A
  6419                           
  6420                           
  6421                           ; 3 bytes @ 0x1A
  6422  003A                     	ds	1
  6423  003B                     ??___fttol:	
  6424                           
  6425                           ; 1 bytes @ 0x1B
  6426  003B                     	ds	2
  6427  003D                     ??___ftadd:	
  6428  003D                     ??___ftge:	
  6429                           ; 1 bytes @ 0x1D
  6430                           
  6431                           
  6432                           ; 1 bytes @ 0x1D
  6433  003D                     	ds	2
  6434  003F                     ___fttol@sign1:	
  6435                           
  6436                           ; 1 bytes @ 0x1F
  6437  003F                     	ds	1
  6438  0040                     ___fttol@lval:	
  6439                           
  6440                           ; 4 bytes @ 0x20
  6441  0040                     	ds	1
  6442  0041                     ___ftadd@sign:	
  6443                           
  6444                           ; 1 bytes @ 0x21
  6445  0041                     	ds	1
  6446  0042                     ___ftadd@exp2:	
  6447                           
  6448                           ; 1 bytes @ 0x22
  6449  0042                     	ds	1
  6450  0043                     ___ftadd@exp1:	
  6451                           
  6452                           ; 1 bytes @ 0x23
  6453  0043                     	ds	1
  6454  0044                     ?_eval_poly:	
  6455  0044                     ?___ftsub:	
  6456                           ; 3 bytes @ 0x24
  6457                           
  6458  0044                     ___fttol@exp1:	
  6459                           ; 3 bytes @ 0x24
  6460                           
  6461  0044                     ___ftsub@f2:	
  6462                           ; 1 bytes @ 0x24
  6463                           
  6464  0044                     eval_poly@x:	
  6465                           ; 3 bytes @ 0x24
  6466                           
  6467                           
  6468                           ; 3 bytes @ 0x24
  6469  0044                     	ds	1
  6470  0045                     ??_calculateCurrent0:	
  6471  0045                     ??_calculateCurrent2:	
  6472                           ; 1 bytes @ 0x25
  6473                           
  6474  0045                     ??_calculateCurrent3:	
  6475                           ; 1 bytes @ 0x25
  6476                           
  6477  0045                     ??_Init_Battery_State_Machine:	
  6478                           ; 1 bytes @ 0x25
  6479                           
  6480  0045                     ??_Battery_State_Machine:	
  6481                           ; 1 bytes @ 0x25
  6482                           
  6483  0045                     ??_cc_cv_mode:	
  6484                           ; 1 bytes @ 0x25
  6485                           
  6486  0045                     ?_LCDWriteInt:	
  6487                           ; 1 bytes @ 0x25
  6488                           
  6489  0045                     LCDWriteInt@value:	
  6490                           ; 1 bytes @ 0x25
  6491                           
  6492                           
  6493                           ; 2 bytes @ 0x25
  6494  0045                     	ds	2
  6495  0047                     LCDWriteInt@fieldLength:	
  6496  0047                     eval_poly@d:	
  6497                           ; 1 bytes @ 0x27
  6498                           
  6499  0047                     ___ftsub@f1:	
  6500                           ; 2 bytes @ 0x27
  6501                           
  6502                           
  6503                           ; 3 bytes @ 0x27
  6504  0047                     	ds	1
  6505  0048                     LCDWriteInt@numPlaces:	
  6506                           
  6507                           ; 1 bytes @ 0x28
  6508  0048                     	ds	1
  6509  0049                     Init_Battery_State_Machine@z:	
  6510  0049                     LCDWriteInt@sign:	
  6511                           ; 1 bytes @ 0x29
  6512                           
  6513  0049                     eval_poly@n:	
  6514                           ; 1 bytes @ 0x29
  6515                           
  6516                           
  6517                           ; 2 bytes @ 0x29
  6518  0049                     	ds	1
  6519  004A                     ??_LCDWriteInt:	
  6520  004A                     ??_SYSTEM_Initialize:	
  6521                           ; 1 bytes @ 0x2A
  6522                           
  6523  004A                     Battery_State_Machine@z:	
  6524                           ; 1 bytes @ 0x2A
  6525                           
  6526                           
  6527                           ; 1 bytes @ 0x2A
  6528  004A                     	ds	1
  6529  004B                     eval_poly@res:	
  6530                           
  6531                           ; 3 bytes @ 0x2B
  6532  004B                     	ds	1
  6533  004C                     cc_cv_mode@z:	
  6534                           
  6535                           ; 1 bytes @ 0x2C
  6536  004C                     	ds	2
  6537  004E                     ?_log:	
  6538  004E                     log@x:	
  6539                           ; 3 bytes @ 0x2E
  6540                           
  6541  004E                     LCDWriteInt@str:	
  6542                           ; 3 bytes @ 0x2E
  6543                           
  6544                           
  6545                           ; 5 bytes @ 0x2E
  6546  004E                     	ds	3
  6547  0051                     ??_log:	
  6548                           
  6549                           ; 1 bytes @ 0x31
  6550  0051                     	ds	1
  6551  0052                     log@exponent:	
  6552                           
  6553                           ; 2 bytes @ 0x32
  6554  0052                     	ds	1
  6555  0053                     LCDWriteInt@j:	
  6556                           
  6557                           ; 1 bytes @ 0x33
  6558  0053                     	ds	1
  6559  0054                     ?_tempCalc:	
  6560  0054                     LCDWriteInt@i:	
  6561                           ; 2 bytes @ 0x34
  6562                           
  6563  0054                     tempCalc@analogValue:	
  6564                           ; 1 bytes @ 0x34
  6565                           
  6566                           
  6567                           ; 2 bytes @ 0x34
  6568  0054                     	ds	2
  6569  0056                     tempCalc@R:	
  6570                           
  6571                           ; 3 bytes @ 0x36
  6572  0056                     	ds	3
  6573  0059                     _tempCalc$1306:	
  6574                           
  6575                           ; 3 bytes @ 0x39
  6576  0059                     	ds	3
  6577  005C                     tempCalc@steinhart:	
  6578                           
  6579                           ; 3 bytes @ 0x3C
  6580  005C                     	ds	3
  6581  005F                     ??_main:	
  6582                           
  6583                           ; 1 bytes @ 0x3F
  6584  005F                     	ds	2
  6585                           
  6586                           	psect	maintext
  6587  0148                     __pmaintext:	
  6588 ;;
  6589 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  6590 ;;
  6591 ;; *************** function _main *****************
  6592 ;; Defined at:
  6593 ;;		line 33 in file "main.c"
  6594 ;; Parameters:    Size  Location     Type
  6595 ;;		None
  6596 ;; Auto vars:     Size  Location     Type
  6597 ;;  efficiency      3    0[BANK1 ] float 
  6598 ;;  dutyCycle7      2   25[BANK1 ] unsigned int 
  6599 ;;  dutyCycle6      2   23[BANK1 ] unsigned int 
  6600 ;;  tempFanOutpu    2   21[BANK1 ] unsigned int 
  6601 ;;  dutyCycle1      2   19[BANK1 ] unsigned int 
  6602 ;;  largerIOut      2   16[BANK1 ] int 
  6603 ;;  MPPT0           2   14[BANK1 ] int 
  6604 ;;  MPPT1           2   12[BANK1 ] int 
  6605 ;;  faultNotRese    2    5[BANK1 ] unsigned int 
  6606 ;;  faultCount      2    3[BANK1 ] unsigned int 
  6607 ;;  j               1   27[BANK1 ] unsigned char 
  6608 ;;  menuButton      1   18[BANK1 ] unsigned char 
  6609 ;;  slowLoop        1   11[BANK1 ] unsigned char 
  6610 ;;  fastLoop        1   10[BANK1 ] unsigned char 
  6611 ;;  displayRefre    1    9[BANK1 ] unsigned char 
  6612 ;; Return value:  Size  Location     Type
  6613 ;;                  1    wreg      void 
  6614 ;; Registers used:
  6615 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6616 ;; Tracked objects:
  6617 ;;		On entry : B1F/0
  6618 ;;		On exit  : 0/0
  6619 ;;		Unchanged: 0/0
  6620 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6621 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6622 ;;      Locals:         0       0      28       0       0       0       0       0       0       0       0       0       
      +0       0
  6623 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6624 ;;      Totals:         0       2      28       0       0       0       0       0       0       0       0       0       
      +0       0
  6625 ;;Total ram usage:       30 bytes
  6626 ;; Hardware stack levels required when called:    5
  6627 ;; This function calls:
  6628 ;;		_ADCRead
  6629 ;;		_Battery_State_Machine
  6630 ;;		_LCDClear
  6631 ;;		_LCDInit
  6632 ;;		_LCDWriteCharacter
  6633 ;;		_LCDWriteInt
  6634 ;;		_LCDWriteString
  6635 ;;		_PWM1_LoadDutyValue
  6636 ;;		_PWM6_LoadDutyValue
  6637 ;;		_PWM7_LoadDutyValue
  6638 ;;		_SYSTEM_Initialize
  6639 ;;		___awdiv
  6640 ;;		___awtoft
  6641 ;;		___ftdiv
  6642 ;;		___ftge
  6643 ;;		___ftmul
  6644 ;;		___fttol
  6645 ;;		___wmul
  6646 ;;		_calculateCurrent0
  6647 ;;		_calculateCurrent2
  6648 ;;		_calculateCurrent3
  6649 ;;		_cc_cv_mode
  6650 ;;		_gotoXY
  6651 ;;		_readButton
  6652 ;;		_readIAnalog
  6653 ;;		_readVAnalog
  6654 ;;		_tempCalc
  6655 ;; This function is called by:
  6656 ;;		Startup code after reset
  6657 ;; This function uses a non-reentrant model
  6658 ;;
  6659                           
  6660                           
  6661                           ;psect for function _main
  6662  0148                     _main:	
  6663                           
  6664                           ;main.c: 35: int16_t MPPT0 = 3144;
  6665                           
  6666                           ;incstack = 0
  6667                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6668  0148  3048               	movlw	72
  6669  0149  0021               	movlb	1	; select bank1
  6670  014A  00E0               	movwf	main@MPPT0^(0+128)
  6671  014B  300C               	movlw	12
  6672  014C  00E1               	movwf	(main@MPPT0^(0+128)+1)
  6673                           
  6674                           ;main.c: 36: int16_t MPPT1 = 3144;
  6675  014D  3048               	movlw	72
  6676  014E  00DE               	movwf	main@MPPT1^(0+128)
  6677  014F  300C               	movlw	12
  6678  0150  00DF               	movwf	(main@MPPT1^(0+128)+1)
  6679                           
  6680                           ;main.c: 38: extern uint8_t batteryState[2];
  6681                           ;main.c: 39: uint8_t displayRefresh = 0;
  6682  0151  01DB               	clrf	main@displayRefresh^(0+128)
  6683                           
  6684                           ;main.c: 40: uint16_t dutyCycle6 = 1023;
  6685  0152  30FF               	movlw	255
  6686  0153  00E9               	movwf	main@dutyCycle6^(0+128)
  6687  0154  3003               	movlw	3
  6688  0155  00EA               	movwf	(main@dutyCycle6^(0+128)+1)
  6689                           
  6690                           ;main.c: 41: uint16_t dutyCycle7 = 1023;
  6691  0156  30FF               	movlw	255
  6692  0157  00EB               	movwf	main@dutyCycle7^(0+128)
  6693  0158  3003               	movlw	3
  6694  0159  00EC               	movwf	(main@dutyCycle7^(0+128)+1)
  6695                           
  6696                           ;main.c: 42: uint16_t dutyCycle1 = 260;
  6697  015A  3004               	movlw	4
  6698  015B  00E5               	movwf	main@dutyCycle1^(0+128)
  6699  015C  3001               	movlw	1
  6700  015D  00E6               	movwf	(main@dutyCycle1^(0+128)+1)
  6701                           
  6702                           ;main.c: 43: float efficiency = 0;
  6703  015E  3000               	movlw	0
  6704  015F  00D2               	movwf	main@efficiency^(0+128)
  6705  0160  3000               	movlw	0
  6706  0161  00D3               	movwf	(main@efficiency+1)^(0+128)
  6707  0162  3000               	movlw	0
  6708  0163  00D4               	movwf	(main@efficiency+2)^(0+128)
  6709                           
  6710                           ;main.c: 44: uint16_t faultCount = 0;
  6711  0164  01D5               	clrf	main@faultCount^(0+128)
  6712  0165  01D6               	clrf	(main@faultCount+1)^(0+128)
  6713                           
  6714                           ;main.c: 45: uint16_t faultNotReset = 0;
  6715  0166  01D7               	clrf	main@faultNotReset^(0+128)
  6716  0167  01D8               	clrf	(main@faultNotReset+1)^(0+128)
  6717                           
  6718                           ;main.c: 46: extern uint16_t IminCount[2];
  6719                           ;main.c: 47: extern int8_t Imode[2];
  6720                           ;main.c: 48: int16_t largerIOut = 0;
  6721  0168  01E2               	clrf	main@largerIOut^(0+128)
  6722  0169  01E3               	clrf	(main@largerIOut+1)^(0+128)
  6723                           
  6724                           ;main.c: 49: extern int16_t Iref[2];
  6725                           ;main.c: 50: uint8_t j = 0;
  6726  016A  01ED               	clrf	main@j^(0+128)
  6727                           
  6728                           ;main.c: 51: uint8_t menuButton = 0;
  6729  016B  01E4               	clrf	main@menuButton^(0+128)
  6730                           
  6731                           ;main.c: 52: uint8_t fastLoop = 0;
  6732  016C  01DC               	clrf	main@fastLoop^(0+128)
  6733                           
  6734                           ;main.c: 53: uint8_t slowLoop = 200;
  6735  016D  30C8               	movlw	200
  6736  016E  0020               	movlb	0	; select bank0
  6737  016F  00DF               	movwf	??_main
  6738  0170  085F               	movf	??_main,w
  6739  0171  0021               	movlb	1	; select bank1
  6740  0172  00DD               	movwf	main@slowLoop^(0+128)
  6741                           
  6742                           ;main.c: 54: uint16_t tempFanOutput = 60;
  6743  0173  303C               	movlw	60
  6744  0174  00E7               	movwf	main@tempFanOutput^(0+128)
  6745  0175  3000               	movlw	0
  6746  0176  00E8               	movwf	(main@tempFanOutput^(0+128)+1)
  6747                           
  6748                           ;main.c: 55: extern int8_t VHoldMode[2];
  6749                           ;main.c: 56: extern int16_t Vref[2];
  6750                           ;main.c: 59: SYSTEM_Initialize();
  6751  0177  3192  224B  3181   	fcall	_SYSTEM_Initialize
  6752                           
  6753                           ;main.c: 61: LCDClear();
  6754  017A  3191  2187  3181   	fcall	_LCDClear
  6755  017D                     l3252:	
  6756                           ;main.c: 63: void calculateCurrent0(void);
  6757                           ;main.c: 65: void calculateCurrent2(void);
  6758                           ;main.c: 66: void calculateCurrent3(void);
  6759                           ;main.c: 69: while (1)
  6760                           
  6761                           
  6762                           ;main.c: 70: {
  6763                           ;main.c: 71: if(!(RB2))
  6764  017D  0020               	movlb	0	; select bank0
  6765  017E  190D               	btfsc	13,2	;volatile
  6766  017F  2991               	goto	l3260
  6767                           
  6768                           ;main.c: 72: {
  6769                           ;main.c: 73: LATA5=0;
  6770  0180  1296               	bcf	22,5	;volatile
  6771                           
  6772                           ;main.c: 74: _delay((unsigned long)((1000)*(32000000/4000000.0)));
  6773  0181  300B               	movlw	11
  6774  0182  0020               	movlb	0	; select bank0
  6775  0183  00DF               	movwf	??_main
  6776  0184  3062               	movlw	98
  6777  0185                     u4307:	
  6778  0185  0B89               	decfsz	9,f
  6779  0186  2985               	goto	u4307
  6780  0187  0BDF               	decfsz	??_main,f
  6781  0188  2985               	goto	u4307
  6782  0189  0000               	nop
  6783                           
  6784                           ;main.c: 75: faultCount+=1;
  6785  018A  3001               	movlw	1
  6786  018B  0021               	movlb	1	; select bank1
  6787  018C  07D5               	addwf	main@faultCount^(0+128),f
  6788  018D  3000               	movlw	0
  6789  018E  3DD6               	addwfc	(main@faultCount+1)^(0+128),f
  6790                           
  6791                           ;main.c: 76: LATA5=1;
  6792  018F  0020               	movlb	0	; select bank0
  6793  0190  1696               	bsf	22,5	;volatile
  6794  0191                     l3260:	
  6795                           
  6796                           ;main.c: 77: }
  6797                           ;main.c: 78: for(j=0;j<4;j++) Ianalogs[j]=readIAnalog(j);
  6798  0191  0021               	movlb	1	; select bank1
  6799  0192  01ED               	clrf	main@j^(0+128)
  6800  0193  3004               	movlw	4
  6801  0194  026D               	subwf	main@j^(0+128),w
  6802  0195  1803               	btfsc	3,0
  6803  0196  29B5               	goto	l3272
  6804  0197                     l3266:	
  6805  0197  086D               	movf	main@j^(0+128),w
  6806  0198  0020               	movlb	0	; select bank0
  6807  0199  00DF               	movwf	??_main
  6808  019A  01E0               	clrf	??_main+1
  6809  019B  085F               	movf	??_main,w
  6810  019C  00A6               	movwf	readIAnalog@channel
  6811  019D  0860               	movf	??_main+1,w
  6812  019E  00A7               	movwf	readIAnalog@channel+1
  6813  019F  318B  23F0  3181   	fcall	_readIAnalog
  6814  01A2  0021               	movlb	1	; select bank1
  6815  01A3  356D               	lslf	main@j^(0+128),w
  6816  01A4  3EA0               	addlw	(low (_Ianalogs| 0))& (0+255)
  6817  01A5  0086               	movwf	6
  6818  01A6  0187               	clrf	7
  6819  01A7  0020               	movlb	0	; select bank0
  6820  01A8  0826               	movf	?_readIAnalog,w
  6821  01A9  3FC0               	movwi [0]fsr1
  6822  01AA  0827               	movf	?_readIAnalog+1,w
  6823  01AB  3FC1               	movwi [1]fsr1
  6824  01AC  3001               	movlw	1
  6825  01AD  00DF               	movwf	??_main
  6826  01AE  085F               	movf	??_main,w
  6827  01AF  0021               	movlb	1	; select bank1
  6828  01B0  07ED               	addwf	main@j^(0+128),f
  6829  01B1  3004               	movlw	4
  6830  01B2  026D               	subwf	main@j^(0+128),w
  6831  01B3  1C03               	skipc
  6832  01B4  2997               	goto	l3266
  6833  01B5                     l3272:	
  6834                           
  6835                           ;main.c: 80: for(j=0;j<4;j++) Vanalogs[j]=readVAnalog(j);
  6836  01B5  01ED               	clrf	main@j^(0+128)
  6837  01B6  3004               	movlw	4
  6838  01B7  026D               	subwf	main@j^(0+128),w
  6839  01B8  1803               	btfsc	3,0
  6840  01B9  29D9               	goto	l469
  6841  01BA                     l3278:	
  6842  01BA  086D               	movf	main@j^(0+128),w
  6843  01BB  0020               	movlb	0	; select bank0
  6844  01BC  00DF               	movwf	??_main
  6845  01BD  01E0               	clrf	??_main+1
  6846  01BE  085F               	movf	??_main,w
  6847  01BF  00A6               	movwf	readVAnalog@channel
  6848  01C0  0860               	movf	??_main+1,w
  6849  01C1  00A7               	movwf	readVAnalog@channel+1
  6850  01C2  318D  253C  3181   	fcall	_readVAnalog
  6851  01C5  0021               	movlb	1	; select bank1
  6852  01C6  356D               	lslf	main@j^(0+128),w
  6853  01C7  3E40               	addlw	(low (_Vanalogs| (0+256)))& (0+255)
  6854  01C8  0086               	movwf	6
  6855  01C9  3001               	movlw	1	; select bank2/3
  6856  01CA  0087               	movwf	7
  6857  01CB  0020               	movlb	0	; select bank0
  6858  01CC  0826               	movf	?_readVAnalog,w
  6859  01CD  3FC0               	movwi [0]fsr1
  6860  01CE  0827               	movf	?_readVAnalog+1,w
  6861  01CF  3FC1               	movwi [1]fsr1
  6862  01D0  3001               	movlw	1
  6863  01D1  00DF               	movwf	??_main
  6864  01D2  085F               	movf	??_main,w
  6865  01D3  0021               	movlb	1	; select bank1
  6866  01D4  07ED               	addwf	main@j^(0+128),f
  6867  01D5  3004               	movlw	4
  6868  01D6  026D               	subwf	main@j^(0+128),w
  6869  01D7  1C03               	skipc
  6870  01D8  29BA               	goto	l3278
  6871  01D9                     l469:	
  6872                           
  6873                           ;main.c: 82: if(!(RB2))faultNotReset+=1;
  6874  01D9  0020               	movlb	0	; select bank0
  6875  01DA  190D               	btfsc	13,2	;volatile
  6876  01DB  29E1               	goto	l470
  6877  01DC  3001               	movlw	1
  6878  01DD  0021               	movlb	1	; select bank1
  6879  01DE  07D7               	addwf	main@faultNotReset^(0+128),f
  6880  01DF  3000               	movlw	0
  6881  01E0  3DD8               	addwfc	(main@faultNotReset+1)^(0+128),f
  6882  01E1                     l470:	
  6883                           
  6884                           ;main.c: 84: if(fastLoop>5)
  6885  01E1  3006               	movlw	6
  6886  01E2  0021               	movlb	1	; select bank1
  6887  01E3  025C               	subwf	main@fastLoop^(0+128),w
  6888  01E4  1C03               	skipc
  6889  01E5  2B60               	goto	l3342
  6890                           
  6891                           ;main.c: 85: {
  6892                           ;main.c: 86: voltage[0]=(int16_t)(Vanalogs[0]/.54245);
  6893  01E6  0022               	movlb	2	; select bank2
  6894  01E7  0841               	movf	(_Vanalogs+1)^(0+256),w
  6895  01E8  0020               	movlb	0	; select bank0
  6896  01E9  00A5               	movwf	___awtoft@c+1
  6897  01EA  0022               	movlb	2	; select bank2
  6898  01EB  0840               	movf	_Vanalogs^(0+256),w
  6899  01EC  0020               	movlb	0	; select bank0
  6900  01ED  00A4               	movwf	___awtoft@c
  6901  01EE  3191  2140  3181   	fcall	___awtoft
  6902  01F1  0020               	movlb	0	; select bank0
  6903  01F2  0824               	movf	?___awtoft,w
  6904  01F3  00AA               	movwf	___ftdiv@f1
  6905  01F4  0825               	movf	?___awtoft+1,w
  6906  01F5  00AB               	movwf	___ftdiv@f1+1
  6907  01F6  0826               	movf	?___awtoft+2,w
  6908  01F7  00AC               	movwf	___ftdiv@f1+2
  6909  01F8  30DE               	movlw	222
  6910  01F9  00A7               	movwf	___ftdiv@f2
  6911  01FA  300A               	movlw	10
  6912  01FB  00A8               	movwf	___ftdiv@f2+1
  6913  01FC  303F               	movlw	63
  6914  01FD  00A9               	movwf	___ftdiv@f2+2
  6915  01FE  3196  26A7  3181   	fcall	___ftdiv
  6916  0201  0020               	movlb	0	; select bank0
  6917  0202  0827               	movf	?___ftdiv,w
  6918  0203  00B7               	movwf	___fttol@f1
  6919  0204  0828               	movf	?___ftdiv+1,w
  6920  0205  00B8               	movwf	___fttol@f1+1
  6921  0206  0829               	movf	?___ftdiv+2,w
  6922  0207  00B9               	movwf	___fttol@f1+2
  6923  0208  3188  201F  3181   	fcall	___fttol
  6924  020B  0020               	movlb	0	; select bank0
  6925  020C  0838               	movf	?___fttol+1,w
  6926  020D  0021               	movlb	1	; select bank1
  6927  020E  00A9               	movwf	(_voltage+1)^(0+128)
  6928  020F  0020               	movlb	0	; select bank0
  6929  0210  0837               	movf	?___fttol,w
  6930  0211  0021               	movlb	1	; select bank1
  6931  0212  00A8               	movwf	_voltage^(0+128)
  6932                           
  6933                           ;main.c: 88: voltage[1]=(int16_t)(Vanalogs[1]/.54395);
  6934  0213  0022               	movlb	2	; select bank2
  6935  0214  0843               	movf	((_Vanalogs+1)^(0+256)+2),w
  6936  0215  0020               	movlb	0	; select bank0
  6937  0216  00A5               	movwf	___awtoft@c+1
  6938  0217  0022               	movlb	2	; select bank2
  6939  0218  0842               	movf	(_Vanalogs^(0+256)+2),w
  6940  0219  0020               	movlb	0	; select bank0
  6941  021A  00A4               	movwf	___awtoft@c
  6942  021B  3191  2140  3181   	fcall	___awtoft
  6943  021E  0020               	movlb	0	; select bank0
  6944  021F  0824               	movf	?___awtoft,w
  6945  0220  00AA               	movwf	___ftdiv@f1
  6946  0221  0825               	movf	?___awtoft+1,w
  6947  0222  00AB               	movwf	___ftdiv@f1+1
  6948  0223  0826               	movf	?___awtoft+2,w
  6949  0224  00AC               	movwf	___ftdiv@f1+2
  6950  0225  3040               	movlw	64
  6951  0226  00A7               	movwf	___ftdiv@f2
  6952  0227  300B               	movlw	11
  6953  0228  00A8               	movwf	___ftdiv@f2+1
  6954  0229  303F               	movlw	63
  6955  022A  00A9               	movwf	___ftdiv@f2+2
  6956  022B  3196  26A7  3181   	fcall	___ftdiv
  6957  022E  0020               	movlb	0	; select bank0
  6958  022F  0827               	movf	?___ftdiv,w
  6959  0230  00B7               	movwf	___fttol@f1
  6960  0231  0828               	movf	?___ftdiv+1,w
  6961  0232  00B8               	movwf	___fttol@f1+1
  6962  0233  0829               	movf	?___ftdiv+2,w
  6963  0234  00B9               	movwf	___fttol@f1+2
  6964  0235  3188  201F  3181   	fcall	___fttol
  6965  0238  0020               	movlb	0	; select bank0
  6966  0239  0838               	movf	?___fttol+1,w
  6967  023A  0021               	movlb	1	; select bank1
  6968  023B  00AB               	movwf	((_voltage+1)^(0+128)+2)
  6969  023C  0020               	movlb	0	; select bank0
  6970  023D  0837               	movf	?___fttol,w
  6971  023E  0021               	movlb	1	; select bank1
  6972  023F  00AA               	movwf	(_voltage^(0+128)+2)
  6973                           
  6974                           ;main.c: 90: voltage[2]=(int16_t)(Vanalogs[2]/.208100558);
  6975  0240  0022               	movlb	2	; select bank2
  6976  0241  0845               	movf	((_Vanalogs+1)^(0+256)+4),w
  6977  0242  0020               	movlb	0	; select bank0
  6978  0243  00A5               	movwf	___awtoft@c+1
  6979  0244  0022               	movlb	2	; select bank2
  6980  0245  0844               	movf	(_Vanalogs^(0+256)+4),w
  6981  0246  0020               	movlb	0	; select bank0
  6982  0247  00A4               	movwf	___awtoft@c
  6983  0248  3191  2140  3181   	fcall	___awtoft
  6984  024B  0020               	movlb	0	; select bank0
  6985  024C  0824               	movf	?___awtoft,w
  6986  024D  00AA               	movwf	___ftdiv@f1
  6987  024E  0825               	movf	?___awtoft+1,w
  6988  024F  00AB               	movwf	___ftdiv@f1+1
  6989  0250  0826               	movf	?___awtoft+2,w
  6990  0251  00AC               	movwf	___ftdiv@f1+2
  6991  0252  3018               	movlw	24
  6992  0253  00A7               	movwf	___ftdiv@f2
  6993  0254  3055               	movlw	85
  6994  0255  00A8               	movwf	___ftdiv@f2+1
  6995  0256  303E               	movlw	62
  6996  0257  00A9               	movwf	___ftdiv@f2+2
  6997  0258  3196  26A7  3181   	fcall	___ftdiv
  6998  025B  0020               	movlb	0	; select bank0
  6999  025C  0827               	movf	?___ftdiv,w
  7000  025D  00B7               	movwf	___fttol@f1
  7001  025E  0828               	movf	?___ftdiv+1,w
  7002  025F  00B8               	movwf	___fttol@f1+1
  7003  0260  0829               	movf	?___ftdiv+2,w
  7004  0261  00B9               	movwf	___fttol@f1+2
  7005  0262  3188  201F  3181   	fcall	___fttol
  7006  0265  0020               	movlb	0	; select bank0
  7007  0266  0838               	movf	?___fttol+1,w
  7008  0267  0021               	movlb	1	; select bank1
  7009  0268  00AD               	movwf	((_voltage+1)^(0+128)+4)
  7010  0269  0020               	movlb	0	; select bank0
  7011  026A  0837               	movf	?___fttol,w
  7012  026B  0021               	movlb	1	; select bank1
  7013  026C  00AC               	movwf	(_voltage^(0+128)+4)
  7014                           
  7015                           ;main.c: 92: voltage[3]=(int16_t)(Vanalogs[3]/.207755);
  7016  026D  0022               	movlb	2	; select bank2
  7017  026E  0847               	movf	((_Vanalogs+1)^(0+256)+6),w
  7018  026F  0020               	movlb	0	; select bank0
  7019  0270  00A5               	movwf	___awtoft@c+1
  7020  0271  0022               	movlb	2	; select bank2
  7021  0272  0846               	movf	(_Vanalogs^(0+256)+6),w
  7022  0273  0020               	movlb	0	; select bank0
  7023  0274  00A4               	movwf	___awtoft@c
  7024  0275  3191  2140  3181   	fcall	___awtoft
  7025  0278  0020               	movlb	0	; select bank0
  7026  0279  0824               	movf	?___awtoft,w
  7027  027A  00AA               	movwf	___ftdiv@f1
  7028  027B  0825               	movf	?___awtoft+1,w
  7029  027C  00AB               	movwf	___ftdiv@f1+1
  7030  027D  0826               	movf	?___awtoft+2,w
  7031  027E  00AC               	movwf	___ftdiv@f1+2
  7032  027F  30BE               	movlw	190
  7033  0280  00A7               	movwf	___ftdiv@f2
  7034  0281  3054               	movlw	84
  7035  0282  00A8               	movwf	___ftdiv@f2+1
  7036  0283  303E               	movlw	62
  7037  0284  00A9               	movwf	___ftdiv@f2+2
  7038  0285  3196  26A7  3181   	fcall	___ftdiv
  7039  0288  0020               	movlb	0	; select bank0
  7040  0289  0827               	movf	?___ftdiv,w
  7041  028A  00B7               	movwf	___fttol@f1
  7042  028B  0828               	movf	?___ftdiv+1,w
  7043  028C  00B8               	movwf	___fttol@f1+1
  7044  028D  0829               	movf	?___ftdiv+2,w
  7045  028E  00B9               	movwf	___fttol@f1+2
  7046  028F  3188  201F  3181   	fcall	___fttol
  7047  0292  0020               	movlb	0	; select bank0
  7048  0293  0838               	movf	?___fttol+1,w
  7049  0294  0021               	movlb	1	; select bank1
  7050  0295  00AF               	movwf	((_voltage+1)^(0+128)+6)
  7051  0296  0020               	movlb	0	; select bank0
  7052  0297  0837               	movf	?___fttol,w
  7053  0298  0021               	movlb	1	; select bank1
  7054  0299  00AE               	movwf	(_voltage^(0+128)+6)
  7055                           
  7056                           ;main.c: 94: calculateCurrent0();
  7057  029A  3192  22FD  3181   	fcall	_calculateCurrent0
  7058                           
  7059                           ;main.c: 98: calculateCurrent2();
  7060  029D  3193  2345  3181   	fcall	_calculateCurrent2
  7061                           
  7062                           ;main.c: 100: calculateCurrent3();
  7063  02A0  3193  238D  3181   	fcall	_calculateCurrent3
  7064                           
  7065                           ;main.c: 102: if(Imode[0])
  7066  02A3  0020               	movlb	0	; select bank0
  7067  02A4  0865               	movf	_Imode,w
  7068  02A5  1903               	btfsc	3,2
  7069  02A6  2AC8               	goto	l3302
  7070                           
  7071                           ;main.c: 103: {
  7072                           ;main.c: 104: if(voltage[2]<MPPT0)
  7073  02A7  0021               	movlb	1	; select bank1
  7074  02A8  082D               	movf	((_voltage+1)^(0+128)+4),w
  7075  02A9  3A80               	xorlw	128
  7076  02AA  0020               	movlb	0	; select bank0
  7077  02AB  00DF               	movwf	??_main
  7078  02AC  0021               	movlb	1	; select bank1
  7079  02AD  0861               	movf	(main@MPPT0+1)^(0+128),w
  7080  02AE  3A80               	xorlw	128
  7081  02AF  0020               	movlb	0	; select bank0
  7082  02B0  025F               	subwf	??_main,w
  7083  02B1  1D03               	skipz
  7084  02B2  2AB6               	goto	u3975
  7085  02B3  0021               	movlb	1	; select bank1
  7086  02B4  0860               	movf	main@MPPT0^(0+128),w
  7087  02B5  022C               	subwf	(_voltage^(0+128)+4),w
  7088  02B6                     u3975:	
  7089  02B6  1C03               	btfss	3,0
  7090  02B7  2AD9               	goto	L3
  7091                           
  7092                           ;main.c: 111: else if(voltage[2]>MPPT0)
  7093                           
  7094                           ;main.c: 109: }
  7095                           ;main.c: 110: }
  7096                           
  7097                           ;main.c: 107: {
  7098                           ;main.c: 108: dutyCycle6+=1;
  7099                           
  7100                           ;main.c: 105: {
  7101                           ;main.c: 106: if(dutyCycle6<1023)
  7102  02B8  0021               	movlb	1	; select bank1
  7103  02B9  0861               	movf	(main@MPPT0+1)^(0+128),w
  7104  02BA  3A80               	xorlw	128
  7105  02BB  0020               	movlb	0	; select bank0
  7106  02BC  00DF               	movwf	??_main
  7107  02BD  0021               	movlb	1	; select bank1
  7108  02BE  082D               	movf	((_voltage+1)^(0+128)+4),w
  7109  02BF  3A80               	xorlw	128
  7110  02C0  0020               	movlb	0	; select bank0
  7111  02C1  025F               	subwf	??_main,w
  7112  02C2  1D03               	skipz
  7113  02C3  2AF5               	goto	u4035
  7114  02C4  0021               	movlb	1	; select bank1
  7115  02C5  082C               	movf	(_voltage^(0+128)+4),w
  7116  02C6  0260               	subwf	main@MPPT0^(0+128),w
  7117  02C7  2AF5               	goto	u4035
  7118  02C8                     l3302:	
  7119                           ;main.c: 119: }
  7120                           
  7121                           ;main.c: 116: }
  7122                           ;main.c: 117: }
  7123                           
  7124                           ;main.c: 114: {
  7125                           ;main.c: 115: dutyCycle6-=1;
  7126                           
  7127                           ;main.c: 112: {
  7128                           ;main.c: 113: if(dutyCycle6>0)
  7129                           
  7130                           
  7131                           ;main.c: 120: else
  7132                           ;main.c: 121: {
  7133                           ;main.c: 122: if(voltage[0]>(int16_t)Vref[0])
  7134  02C8  0021               	movlb	1	; select bank1
  7135  02C9  0839               	movf	(_Vref+1)^(0+128),w
  7136  02CA  3A80               	xorlw	128
  7137  02CB  0020               	movlb	0	; select bank0
  7138  02CC  00DF               	movwf	??_main
  7139  02CD  0021               	movlb	1	; select bank1
  7140  02CE  0829               	movf	(_voltage+1)^(0+128),w
  7141  02CF  3A80               	xorlw	128
  7142  02D0  0020               	movlb	0	; select bank0
  7143  02D1  025F               	subwf	??_main,w
  7144  02D2  1D03               	skipz
  7145  02D3  2AD7               	goto	u4015
  7146  02D4  0021               	movlb	1	; select bank1
  7147  02D5  0828               	movf	_voltage^(0+128),w
  7148  02D6  0238               	subwf	_Vref^(0+128),w
  7149  02D7                     u4015:	
  7150  02D7  1803               	skipnc
  7151  02D8  2AE6               	goto	l3308
  7152  02D9                     L3:	
  7153                           
  7154                           ;main.c: 123: {
  7155                           ;main.c: 124: if(dutyCycle6<1023) dutyCycle6+=1;
  7156  02D9  3003               	movlw	3
  7157  02DA  0021               	movlb	1	; select bank1
  7158  02DB  026A               	subwf	(main@dutyCycle6+1)^(0+128),w
  7159  02DC  30FF               	movlw	255
  7160  02DD  1903               	skipnz
  7161  02DE  0269               	subwf	main@dutyCycle6^(0+128),w
  7162  02DF  1803               	skipnc
  7163  02E0  2B00               	goto	l3314
  7164  02E1  3001               	movlw	1
  7165  02E2  07E9               	addwf	main@dutyCycle6^(0+128),f
  7166  02E3  3000               	movlw	0
  7167  02E4  3DEA               	addwfc	(main@dutyCycle6+1)^(0+128),f
  7168                           
  7169                           ;main.c: 125: }
  7170  02E5  2B00               	goto	l3314
  7171  02E6                     l3308:	
  7172                           
  7173                           ;main.c: 126: else if(voltage[0]<(int16_t)Vref[0])
  7174  02E6  0021               	movlb	1	; select bank1
  7175  02E7  0829               	movf	(_voltage+1)^(0+128),w
  7176  02E8  3A80               	xorlw	128
  7177  02E9  0020               	movlb	0	; select bank0
  7178  02EA  00DF               	movwf	??_main
  7179  02EB  0021               	movlb	1	; select bank1
  7180  02EC  0839               	movf	(_Vref+1)^(0+128),w
  7181  02ED  3A80               	xorlw	128
  7182  02EE  0020               	movlb	0	; select bank0
  7183  02EF  025F               	subwf	??_main,w
  7184  02F0  1D03               	skipz
  7185  02F1  2AF5               	goto	u4035
  7186  02F2  0021               	movlb	1	; select bank1
  7187  02F3  0838               	movf	_Vref^(0+128),w
  7188  02F4  0228               	subwf	_voltage^(0+128),w
  7189  02F5                     u4035:	
  7190  02F5  1803               	skipnc
  7191  02F6  2B00               	goto	l3314
  7192                           
  7193                           ;main.c: 127: {
  7194                           ;main.c: 128: if(dutyCycle6>0) dutyCycle6-=1;;
  7195  02F7  0021               	movlb	1	; select bank1
  7196  02F8  0869               	movf	main@dutyCycle6^(0+128),w
  7197  02F9  046A               	iorwf	(main@dutyCycle6+1)^(0+128),w
  7198  02FA  1903               	btfsc	3,2
  7199  02FB  2B00               	goto	l3314
  7200  02FC  3001               	movlw	1
  7201  02FD  02E9               	subwf	main@dutyCycle6^(0+128),f
  7202  02FE  3000               	movlw	0
  7203  02FF  3BEA               	subwfb	(main@dutyCycle6+1)^(0+128),f
  7204  0300                     l3314:	
  7205                           ;main.c: 129: }
  7206                           
  7207                           
  7208                           ;main.c: 131: }
  7209                           ;main.c: 133: if(Imode[1])
  7210  0300  0020               	movlb	0	; select bank0
  7211  0301  0866               	movf	_Imode+1,w
  7212  0302  1903               	btfsc	3,2
  7213  0303  2B16               	goto	l3326
  7214                           
  7215                           ;main.c: 134: {
  7216                           ;main.c: 135: if(voltage[3]<MPPT1)
  7217  0304  0021               	movlb	1	; select bank1
  7218  0305  082F               	movf	((_voltage+1)^(0+128)+6),w
  7219  0306  3A80               	xorlw	128
  7220  0307  0020               	movlb	0	; select bank0
  7221  0308  00DF               	movwf	??_main
  7222  0309  0021               	movlb	1	; select bank1
  7223  030A  085F               	movf	(main@MPPT1+1)^(0+128),w
  7224  030B  3A80               	xorlw	128
  7225  030C  0020               	movlb	0	; select bank0
  7226  030D  025F               	subwf	??_main,w
  7227  030E  1D03               	skipz
  7228  030F  2B13               	goto	u4065
  7229  0310  0021               	movlb	1	; select bank1
  7230  0311  085E               	movf	main@MPPT1^(0+128),w
  7231  0312  022E               	subwf	(_voltage^(0+128)+6),w
  7232  0313                     u4065:	
  7233  0313  1C03               	btfss	3,0
  7234  0314  2B27               	goto	L4
  7235                           
  7236                           ;main.c: 140: }
  7237                           ;main.c: 141: }
  7238                           
  7239                           ;main.c: 138: {
  7240                           ;main.c: 139: dutyCycle7+=1;
  7241                           
  7242                           ;main.c: 136: {
  7243                           ;main.c: 137: if(dutyCycle7<1023)
  7244  0315  2B45               	goto	L5
  7245  0316                     l3326:	
  7246                           ;main.c: 145: }
  7247                           ;main.c: 146: }
  7248                           
  7249                           ;main.c: 143: {
  7250                           ;main.c: 144: dutyCycle7-=1;
  7251                           
  7252                           ;main.c: 142: else if(dutyCycle7>0)
  7253                           
  7254                           
  7255                           ;main.c: 147: else
  7256                           ;main.c: 148: {
  7257                           ;main.c: 149: if(voltage[1]>(int16_t)Vref[1])
  7258  0316  0021               	movlb	1	; select bank1
  7259  0317  083B               	movf	((_Vref+1)^(0+128)+2),w
  7260  0318  3A80               	xorlw	128
  7261  0319  0020               	movlb	0	; select bank0
  7262  031A  00DF               	movwf	??_main
  7263  031B  0021               	movlb	1	; select bank1
  7264  031C  082B               	movf	((_voltage+1)^(0+128)+2),w
  7265  031D  3A80               	xorlw	128
  7266  031E  0020               	movlb	0	; select bank0
  7267  031F  025F               	subwf	??_main,w
  7268  0320  1D03               	skipz
  7269  0321  2B25               	goto	u4095
  7270  0322  0021               	movlb	1	; select bank1
  7271  0323  082A               	movf	(_voltage^(0+128)+2),w
  7272  0324  023A               	subwf	(_Vref^(0+128)+2),w
  7273  0325                     u4095:	
  7274  0325  1803               	skipnc
  7275  0326  2B34               	goto	l3332
  7276  0327                     L4:	
  7277                           
  7278                           ;main.c: 150: {
  7279                           ;main.c: 151: if(dutyCycle7<1023) dutyCycle7+=1;
  7280  0327  3003               	movlw	3
  7281  0328  0021               	movlb	1	; select bank1
  7282  0329  026C               	subwf	(main@dutyCycle7+1)^(0+128),w
  7283  032A  30FF               	movlw	255
  7284  032B  1903               	skipnz
  7285  032C  026B               	subwf	main@dutyCycle7^(0+128),w
  7286  032D  1803               	skipnc
  7287  032E  2B4E               	goto	l3338
  7288  032F  3001               	movlw	1
  7289  0330  07EB               	addwf	main@dutyCycle7^(0+128),f
  7290  0331  3000               	movlw	0
  7291  0332  3DEC               	addwfc	(main@dutyCycle7+1)^(0+128),f
  7292                           
  7293                           ;main.c: 152: }
  7294  0333  2B4E               	goto	l3338
  7295  0334                     l3332:	
  7296                           
  7297                           ;main.c: 153: else if(voltage[1]<(int16_t)Vref[1])
  7298  0334  0021               	movlb	1	; select bank1
  7299  0335  082B               	movf	((_voltage+1)^(0+128)+2),w
  7300  0336  3A80               	xorlw	128
  7301  0337  0020               	movlb	0	; select bank0
  7302  0338  00DF               	movwf	??_main
  7303  0339  0021               	movlb	1	; select bank1
  7304  033A  083B               	movf	((_Vref+1)^(0+128)+2),w
  7305  033B  3A80               	xorlw	128
  7306  033C  0020               	movlb	0	; select bank0
  7307  033D  025F               	subwf	??_main,w
  7308  033E  1D03               	skipz
  7309  033F  2B43               	goto	u4115
  7310  0340  0021               	movlb	1	; select bank1
  7311  0341  083A               	movf	(_Vref^(0+128)+2),w
  7312  0342  022A               	subwf	(_voltage^(0+128)+2),w
  7313  0343                     u4115:	
  7314  0343  1803               	skipnc
  7315  0344  2B4E               	goto	l3338
  7316  0345                     L5:	
  7317                           
  7318                           ;main.c: 154: {
  7319                           ;main.c: 155: if(dutyCycle7>0) dutyCycle7-=1;;
  7320  0345  0021               	movlb	1	; select bank1
  7321  0346  086B               	movf	main@dutyCycle7^(0+128),w
  7322  0347  046C               	iorwf	(main@dutyCycle7+1)^(0+128),w
  7323  0348  1903               	btfsc	3,2
  7324  0349  2B4E               	goto	l3338
  7325  034A  3001               	movlw	1
  7326  034B  02EB               	subwf	main@dutyCycle7^(0+128),f
  7327  034C  3000               	movlw	0
  7328  034D  3BEC               	subwfb	(main@dutyCycle7+1)^(0+128),f
  7329  034E                     l3338:	
  7330                           ;main.c: 156: }
  7331                           
  7332                           
  7333                           ;main.c: 158: }
  7334                           ;main.c: 159: PWM6_LoadDutyValue(dutyCycle6);
  7335  034E  0021               	movlb	1	; select bank1
  7336  034F  086A               	movf	(main@dutyCycle6+1)^(0+128),w
  7337  0350  00F1               	movwf	PWM6_LoadDutyValue@dutyCycle6+1
  7338  0351  0869               	movf	main@dutyCycle6^(0+128),w
  7339  0352  00F0               	movwf	PWM6_LoadDutyValue@dutyCycle6
  7340  0353  319F  277C  3181   	fcall	_PWM6_LoadDutyValue
  7341                           
  7342                           ;main.c: 160: PWM7_LoadDutyValue(dutyCycle7);
  7343  0356  0021               	movlb	1	; select bank1
  7344  0357  086C               	movf	(main@dutyCycle7+1)^(0+128),w
  7345  0358  00F1               	movwf	PWM7_LoadDutyValue@dutyCycle7+1
  7346  0359  086B               	movf	main@dutyCycle7^(0+128),w
  7347  035A  00F0               	movwf	PWM7_LoadDutyValue@dutyCycle7
  7348  035B  319F  2792  3181   	fcall	_PWM7_LoadDutyValue
  7349                           
  7350                           ;main.c: 161: fastLoop=0;
  7351  035E  0021               	movlb	1	; select bank1
  7352  035F  01DC               	clrf	main@fastLoop^(0+128)
  7353  0360                     l3342:	
  7354                           
  7355                           ;main.c: 162: }
  7356                           ;main.c: 164: fastLoop+=1;
  7357  0360  3001               	movlw	1
  7358  0361  0020               	movlb	0	; select bank0
  7359  0362  00DF               	movwf	??_main
  7360  0363  085F               	movf	??_main,w
  7361  0364  0021               	movlb	1	; select bank1
  7362  0365  07DC               	addwf	main@fastLoop^(0+128),f
  7363                           
  7364                           ;main.c: 165: slowLoop+=1;
  7365  0366  3001               	movlw	1
  7366  0367  0020               	movlb	0	; select bank0
  7367  0368  00DF               	movwf	??_main
  7368  0369  085F               	movf	??_main,w
  7369  036A  0021               	movlb	1	; select bank1
  7370  036B  07DD               	addwf	main@slowLoop^(0+128),f
  7371                           
  7372                           ;main.c: 168: menuButton = readButton();
  7373  036C  3195  25A3  3181   	fcall	_readButton
  7374  036F  0020               	movlb	0	; select bank0
  7375  0370  00DF               	movwf	??_main
  7376  0371  085F               	movf	??_main,w
  7377  0372  0021               	movlb	1	; select bank1
  7378  0373  00E4               	movwf	main@menuButton^(0+128)
  7379                           
  7380                           ;main.c: 169: if(menuButton == 2) if(MPPT0>2700)MPPT1-=1;
  7381  0374  3002               	movlw	2
  7382  0375  0664               	xorwf	main@menuButton^(0+128),w
  7383  0376  1D03               	btfss	3,2
  7384  0377  2B8A               	goto	l3354
  7385  0378  0861               	movf	(main@MPPT0+1)^(0+128),w
  7386  0379  3A80               	xorlw	128
  7387  037A  0020               	movlb	0	; select bank0
  7388  037B  00DF               	movwf	??_main
  7389  037C  308A               	movlw	138
  7390  037D  025F               	subwf	??_main,w
  7391  037E  1D03               	skipz
  7392  037F  2B83               	goto	u4145
  7393  0380  308D               	movlw	141
  7394  0381  0021               	movlb	1	; select bank1
  7395  0382  0260               	subwf	main@MPPT0^(0+128),w
  7396  0383                     u4145:	
  7397  0383  1C03               	skipc
  7398  0384  2B8A               	goto	l3354
  7399  0385  30FF               	movlw	255
  7400  0386  0021               	movlb	1	; select bank1
  7401  0387  07DE               	addwf	main@MPPT1^(0+128),f
  7402  0388  30FF               	movlw	255
  7403  0389  3DDF               	addwfc	(main@MPPT1+1)^(0+128),f
  7404  038A                     l3354:	
  7405                           
  7406                           ;main.c: 170: if(menuButton == 3)if(MPPT1<3200)MPPT1+=1;
  7407  038A  3003               	movlw	3
  7408  038B  0021               	movlb	1	; select bank1
  7409  038C  0664               	xorwf	main@menuButton^(0+128),w
  7410  038D  1D03               	btfss	3,2
  7411  038E  2BA1               	goto	l3360
  7412  038F  085F               	movf	(main@MPPT1+1)^(0+128),w
  7413  0390  3A80               	xorlw	128
  7414  0391  0020               	movlb	0	; select bank0
  7415  0392  00DF               	movwf	??_main
  7416  0393  308C               	movlw	140
  7417  0394  025F               	subwf	??_main,w
  7418  0395  1D03               	skipz
  7419  0396  2B9A               	goto	u4165
  7420  0397  3080               	movlw	128
  7421  0398  0021               	movlb	1	; select bank1
  7422  0399  025E               	subwf	main@MPPT1^(0+128),w
  7423  039A                     u4165:	
  7424  039A  1803               	skipnc
  7425  039B  2BA1               	goto	l3360
  7426  039C  3001               	movlw	1
  7427  039D  0021               	movlb	1	; select bank1
  7428  039E  07DE               	addwf	main@MPPT1^(0+128),f
  7429  039F  3000               	movlw	0
  7430  03A0  3DDF               	addwfc	(main@MPPT1+1)^(0+128),f
  7431  03A1                     l3360:	
  7432                           
  7433                           ;main.c: 171: if(menuButton == 1)LCDInit();
  7434  03A1  0021               	movlb	1	; select bank1
  7435  03A2  0364               	decf	main@menuButton^(0+128),w
  7436  03A3  1D03               	btfss	3,2
  7437  03A4  2BA8               	goto	l3364
  7438  03A5  3192  2210  3181   	fcall	_LCDInit
  7439  03A8                     l3364:	
  7440                           
  7441                           ;main.c: 173: if(slowLoop>250)
  7442  03A8  30FB               	movlw	251
  7443  03A9  0021               	movlb	1	; select bank1
  7444  03AA  025D               	subwf	main@slowLoop^(0+128),w
  7445  03AB  1C03               	skipc
  7446  03AC  297D               	goto	l3252
  7447                           
  7448                           ;main.c: 174: {
  7449                           ;main.c: 175: if(current[0]>current[3]*voltage[3]/voltage[1]*.9)
  7450  03AD  3066               	movlw	102
  7451  03AE  0020               	movlb	0	; select bank0
  7452  03AF  00A7               	movwf	___ftmul@f1
  7453  03B0  3066               	movlw	102
  7454  03B1  00A8               	movwf	___ftmul@f1+1
  7455  03B2  303F               	movlw	63
  7456  03B3  00A9               	movwf	___ftmul@f1+2
  7457  03B4  0021               	movlb	1	; select bank1
  7458  03B5  082B               	movf	((_voltage+1)^(0+128)+2),w
  7459  03B6  00F7               	movwf	___awdiv@divisor+1
  7460  03B7  082A               	movf	(_voltage^(0+128)+2),w
  7461  03B8  00F6               	movwf	___awdiv@divisor
  7462  03B9  0837               	movf	((_current+1)^(0+128)+6),w
  7463  03BA  00F1               	movwf	___wmul@multiplier+1
  7464  03BB  0836               	movf	(_current^(0+128)+6),w
  7465  03BC  00F0               	movwf	___wmul@multiplier
  7466  03BD  082F               	movf	((_voltage+1)^(0+128)+6),w
  7467  03BE  00F3               	movwf	___wmul@multiplicand+1
  7468  03BF  082E               	movf	(_voltage^(0+128)+6),w
  7469  03C0  00F2               	movwf	___wmul@multiplicand
  7470  03C1  319F  27A8  3181   	fcall	___wmul
  7471  03C4  0871               	movf	?___wmul+1,w
  7472  03C5  00F9               	movwf	___awdiv@dividend+1
  7473  03C6  0870               	movf	?___wmul,w
  7474  03C7  00F8               	movwf	___awdiv@dividend
  7475  03C8  3193  23D5  3181   	fcall	___awdiv
  7476  03CB  0877               	movf	?___awdiv+1,w
  7477  03CC  0020               	movlb	0	; select bank0
  7478  03CD  00A5               	movwf	___awtoft@c+1
  7479  03CE  0876               	movf	?___awdiv,w
  7480  03CF  00A4               	movwf	___awtoft@c
  7481  03D0  3191  2140  3181   	fcall	___awtoft
  7482  03D3  0020               	movlb	0	; select bank0
  7483  03D4  0824               	movf	?___awtoft,w
  7484  03D5  00AA               	movwf	___ftmul@f2
  7485  03D6  0825               	movf	?___awtoft+1,w
  7486  03D7  00AB               	movwf	___ftmul@f2+1
  7487  03D8  0826               	movf	?___awtoft+2,w
  7488  03D9  00AC               	movwf	___ftmul@f2+2
  7489  03DA  3188  20A6  3181   	fcall	___ftmul
  7490  03DD  0020               	movlb	0	; select bank0
  7491  03DE  0827               	movf	?___ftmul,w
  7492  03DF  00B7               	movwf	___ftge@ff1
  7493  03E0  0828               	movf	?___ftmul+1,w
  7494  03E1  00B8               	movwf	___ftge@ff1+1
  7495  03E2  0829               	movf	?___ftmul+2,w
  7496  03E3  00B9               	movwf	___ftge@ff1+2
  7497  03E4  0021               	movlb	1	; select bank1
  7498  03E5  0831               	movf	(_current+1)^(0+128),w
  7499  03E6  0020               	movlb	0	; select bank0
  7500  03E7  00A5               	movwf	___awtoft@c+1
  7501  03E8  0021               	movlb	1	; select bank1
  7502  03E9  0830               	movf	_current^(0+128),w
  7503  03EA  0020               	movlb	0	; select bank0
  7504  03EB  00A4               	movwf	___awtoft@c
  7505  03EC  3191  2140  3181   	fcall	___awtoft
  7506  03EF  0020               	movlb	0	; select bank0
  7507  03F0  0824               	movf	?___awtoft,w
  7508  03F1  00BA               	movwf	___ftge@ff2
  7509  03F2  0825               	movf	?___awtoft+1,w
  7510  03F3  00BB               	movwf	___ftge@ff2+1
  7511  03F4  0826               	movf	?___awtoft+2,w
  7512  03F5  00BC               	movwf	___ftge@ff2+2
  7513  03F6  3192  22C1  3181   	fcall	___ftge
  7514  03F9  1803               	btfsc	3,0
  7515  03FA  2C00               	goto	l3370
  7516                           
  7517                           ;main.c: 176: {
  7518                           ;main.c: 177: largerIOut=current[0];
  7519  03FB  0021               	movlb	1	; select bank1
  7520  03FC  0831               	movf	(_current+1)^(0+128),w
  7521  03FD  00E3               	movwf	(main@largerIOut+1)^(0+128)
  7522  03FE  0830               	movf	_current^(0+128),w
  7523  03FF  2C41               	goto	L1
  7524  0400                     l3370:	
  7525                           ;main.c: 178: }
  7526                           
  7527                           
  7528                           ;main.c: 179: else
  7529                           ;main.c: 180: {
  7530                           ;main.c: 181: largerIOut=current[3]*voltage[3]/voltage[1]*.9;
  7531  0400  0021               	movlb	1	; select bank1
  7532  0401  082F               	movf	((_voltage+1)^(0+128)+6),w
  7533  0402  00F3               	movwf	___wmul@multiplicand+1
  7534  0403  082E               	movf	(_voltage^(0+128)+6),w
  7535  0404  00F2               	movwf	___wmul@multiplicand
  7536  0405  0837               	movf	((_current+1)^(0+128)+6),w
  7537  0406  00F1               	movwf	___wmul@multiplier+1
  7538  0407  0836               	movf	(_current^(0+128)+6),w
  7539  0408  00F0               	movwf	___wmul@multiplier
  7540  0409  319F  27A8  3181   	fcall	___wmul
  7541  040C  0871               	movf	?___wmul+1,w
  7542  040D  00F9               	movwf	___awdiv@dividend+1
  7543  040E  0870               	movf	?___wmul,w
  7544  040F  00F8               	movwf	___awdiv@dividend
  7545  0410  0021               	movlb	1	; select bank1
  7546  0411  082B               	movf	((_voltage+1)^(0+128)+2),w
  7547  0412  00F7               	movwf	___awdiv@divisor+1
  7548  0413  082A               	movf	(_voltage^(0+128)+2),w
  7549  0414  00F6               	movwf	___awdiv@divisor
  7550  0415  3193  23D5  3181   	fcall	___awdiv
  7551  0418  0877               	movf	?___awdiv+1,w
  7552  0419  0020               	movlb	0	; select bank0
  7553  041A  00A5               	movwf	___awtoft@c+1
  7554  041B  0876               	movf	?___awdiv,w
  7555  041C  00A4               	movwf	___awtoft@c
  7556  041D  3191  2140  3181   	fcall	___awtoft
  7557  0420  0020               	movlb	0	; select bank0
  7558  0421  0824               	movf	?___awtoft,w
  7559  0422  00AA               	movwf	___ftmul@f2
  7560  0423  0825               	movf	?___awtoft+1,w
  7561  0424  00AB               	movwf	___ftmul@f2+1
  7562  0425  0826               	movf	?___awtoft+2,w
  7563  0426  00AC               	movwf	___ftmul@f2+2
  7564  0427  3066               	movlw	102
  7565  0428  00A7               	movwf	___ftmul@f1
  7566  0429  3066               	movlw	102
  7567  042A  00A8               	movwf	___ftmul@f1+1
  7568  042B  303F               	movlw	63
  7569  042C  00A9               	movwf	___ftmul@f1+2
  7570  042D  3188  20A6  3181   	fcall	___ftmul
  7571  0430  0020               	movlb	0	; select bank0
  7572  0431  0827               	movf	?___ftmul,w
  7573  0432  00B7               	movwf	___fttol@f1
  7574  0433  0828               	movf	?___ftmul+1,w
  7575  0434  00B8               	movwf	___fttol@f1+1
  7576  0435  0829               	movf	?___ftmul+2,w
  7577  0436  00B9               	movwf	___fttol@f1+2
  7578  0437  3188  201F  3181   	fcall	___fttol
  7579  043A  0020               	movlb	0	; select bank0
  7580  043B  0838               	movf	?___fttol+1,w
  7581  043C  0021               	movlb	1	; select bank1
  7582  043D  00E3               	movwf	(main@largerIOut+1)^(0+128)
  7583  043E  0020               	movlb	0	; select bank0
  7584  043F  0837               	movf	?___fttol,w
  7585  0440  0021               	movlb	1	; select bank1
  7586  0441                     L1:	
  7587  0441  00E2               	movwf	main@largerIOut^(0+128)
  7588                           
  7589                           ;main.c: 182: }
  7590                           ;main.c: 184: if(largerIOut>25)
  7591  0442  0863               	movf	(main@largerIOut+1)^(0+128),w
  7592  0443  3A80               	xorlw	128
  7593  0444  0020               	movlb	0	; select bank0
  7594  0445  00DF               	movwf	??_main
  7595  0446  3080               	movlw	128
  7596  0447  025F               	subwf	??_main,w
  7597  0448  1D03               	skipz
  7598  0449  2C4D               	goto	u4205
  7599  044A  301A               	movlw	26
  7600  044B  0021               	movlb	1	; select bank1
  7601  044C  0262               	subwf	main@largerIOut^(0+128),w
  7602  044D                     u4205:	
  7603  044D  1C03               	skipc
  7604  044E  2CA1               	goto	l3392
  7605                           
  7606                           ;main.c: 185: {
  7607                           ;main.c: 186: if((uint16_t)largerIOut+5>dutyCycle1)
  7608  044F  0021               	movlb	1	; select bank1
  7609  0450  0862               	movf	main@largerIOut^(0+128),w
  7610  0451  3E05               	addlw	5
  7611  0452  0020               	movlb	0	; select bank0
  7612  0453  00DF               	movwf	??_main
  7613  0454  3000               	movlw	0
  7614  0455  0021               	movlb	1	; select bank1
  7615  0456  3D63               	addwfc	(main@largerIOut+1)^(0+128),w
  7616  0457  0020               	movlb	0	; select bank0
  7617  0458  00E0               	movwf	??_main+1
  7618  0459  0860               	movf	??_main+1,w
  7619  045A  0021               	movlb	1	; select bank1
  7620  045B  0266               	subwf	(main@dutyCycle1+1)^(0+128),w
  7621  045C  1D03               	skipz
  7622  045D  2C62               	goto	u4215
  7623  045E  0020               	movlb	0	; select bank0
  7624  045F  085F               	movf	??_main,w
  7625  0460  0021               	movlb	1	; select bank1
  7626  0461  0265               	subwf	main@dutyCycle1^(0+128),w
  7627  0462                     u4215:	
  7628  0462  1803               	skipnc
  7629  0463  2C69               	goto	l3378
  7630                           
  7631                           ;main.c: 187: {
  7632                           ;main.c: 188: dutyCycle1+=1;
  7633  0464  3001               	movlw	1
  7634  0465  07E5               	addwf	main@dutyCycle1^(0+128),f
  7635  0466  3000               	movlw	0
  7636  0467  3DE6               	addwfc	(main@dutyCycle1+1)^(0+128),f
  7637                           
  7638                           ;main.c: 189: }
  7639  0468  2C6D               	goto	l3380
  7640  0469                     l3378:	
  7641                           
  7642                           ;main.c: 190: else dutyCycle1-=1;
  7643  0469  3001               	movlw	1
  7644  046A  02E5               	subwf	main@dutyCycle1^(0+128),f
  7645  046B  3000               	movlw	0
  7646  046C  3BE6               	subwfb	(main@dutyCycle1+1)^(0+128),f
  7647  046D                     l3380:	
  7648                           
  7649                           ;main.c: 192: if((uint16_t)largerIOut+5>tempFanOutput)
  7650  046D  0862               	movf	main@largerIOut^(0+128),w
  7651  046E  3E05               	addlw	5
  7652  046F  0020               	movlb	0	; select bank0
  7653  0470  00DF               	movwf	??_main
  7654  0471  3000               	movlw	0
  7655  0472  0021               	movlb	1	; select bank1
  7656  0473  3D63               	addwfc	(main@largerIOut+1)^(0+128),w
  7657  0474  0020               	movlb	0	; select bank0
  7658  0475  00E0               	movwf	??_main+1
  7659  0476  0860               	movf	??_main+1,w
  7660  0477  0021               	movlb	1	; select bank1
  7661  0478  0268               	subwf	(main@tempFanOutput+1)^(0+128),w
  7662  0479  1D03               	skipz
  7663  047A  2C7F               	goto	u4225
  7664  047B  0020               	movlb	0	; select bank0
  7665  047C  085F               	movf	??_main,w
  7666  047D  0021               	movlb	1	; select bank1
  7667  047E  0267               	subwf	main@tempFanOutput^(0+128),w
  7668  047F                     u4225:	
  7669  047F  1803               	skipnc
  7670  0480  2C8D               	goto	l3386
  7671                           
  7672                           ;main.c: 193: {
  7673                           ;main.c: 194: if(tempFanOutput<75)
  7674  0481  3000               	movlw	0
  7675  0482  0268               	subwf	(main@tempFanOutput+1)^(0+128),w
  7676  0483  304B               	movlw	75
  7677  0484  1903               	skipnz
  7678  0485  0267               	subwf	main@tempFanOutput^(0+128),w
  7679  0486  1803               	skipnc
  7680  0487  2C95               	goto	l511
  7681                           
  7682                           ;main.c: 195: {
  7683                           ;main.c: 196: tempFanOutput+=1;
  7684  0488  3001               	movlw	1
  7685  0489  07E7               	addwf	main@tempFanOutput^(0+128),f
  7686  048A  3000               	movlw	0
  7687  048B  3DE8               	addwfc	(main@tempFanOutput+1)^(0+128),f
  7688                           
  7689                           ;main.c: 197: }
  7690                           ;main.c: 198: }
  7691  048C  2C95               	goto	l511
  7692  048D                     l3386:	
  7693                           
  7694                           ;main.c: 199: else
  7695                           ;main.c: 200: {
  7696                           ;main.c: 201: if(tempFanOutput>0)tempFanOutput-=1;
  7697  048D  0867               	movf	main@tempFanOutput^(0+128),w
  7698  048E  0468               	iorwf	(main@tempFanOutput+1)^(0+128),w
  7699  048F  1903               	btfsc	3,2
  7700  0490  2C95               	goto	l511
  7701  0491  3001               	movlw	1
  7702  0492  02E7               	subwf	main@tempFanOutput^(0+128),f
  7703  0493  3000               	movlw	0
  7704  0494  3BE8               	subwfb	(main@tempFanOutput+1)^(0+128),f
  7705  0495                     l511:	
  7706                           
  7707                           ;main.c: 202: }
  7708                           ;main.c: 204: dutyCycle1=tempFanOutput;
  7709  0495  0868               	movf	(main@tempFanOutput+1)^(0+128),w
  7710  0496  00E6               	movwf	(main@dutyCycle1+1)^(0+128)
  7711  0497  0867               	movf	main@tempFanOutput^(0+128),w
  7712  0498  00E5               	movwf	main@dutyCycle1^(0+128)
  7713                           
  7714                           ;main.c: 205: if(dutyCycle1<19)dutyCycle1=0;
  7715  0499  3000               	movlw	0
  7716  049A  0266               	subwf	(main@dutyCycle1+1)^(0+128),w
  7717  049B  3013               	movlw	19
  7718  049C  1903               	skipnz
  7719  049D  0265               	subwf	main@dutyCycle1^(0+128),w
  7720  049E  1803               	skipnc
  7721  049F  2CA4               	goto	l3394
  7722  04A0  2CA2               	goto	L2
  7723  04A1                     l3392:	
  7724                           ;main.c: 206: }
  7725                           
  7726                           
  7727                           ;main.c: 207: else
  7728                           ;main.c: 208: {
  7729                           ;main.c: 209: dutyCycle1=0;
  7730  04A1  0021               	movlb	1	; select bank1
  7731  04A2                     L2:	
  7732  04A2  01E5               	clrf	main@dutyCycle1^(0+128)
  7733  04A3  01E6               	clrf	(main@dutyCycle1+1)^(0+128)
  7734  04A4                     l3394:	
  7735                           
  7736                           ;main.c: 210: }
  7737                           ;main.c: 211: if(!(RB2))
  7738  04A4  0020               	movlb	0	; select bank0
  7739  04A5  190D               	btfsc	13,2	;volatile
  7740  04A6  2CB5               	goto	l3398
  7741                           
  7742                           ;main.c: 212: {
  7743                           ;main.c: 213: dutyCycle1=55;
  7744  04A7  3037               	movlw	55
  7745  04A8  0021               	movlb	1	; select bank1
  7746  04A9  00E5               	movwf	main@dutyCycle1^(0+128)
  7747  04AA  3000               	movlw	0
  7748  04AB  00E6               	movwf	(main@dutyCycle1^(0+128)+1)
  7749                           
  7750                           ;main.c: 214: batteryState[0]=CHARGE;
  7751  04AC  3004               	movlw	4
  7752  04AD  0020               	movlb	0	; select bank0
  7753  04AE  00DF               	movwf	??_main
  7754  04AF  085F               	movf	??_main,w
  7755  04B0  00E7               	movwf	_batteryState
  7756                           
  7757                           ;main.c: 215: batteryState[1]=CHARGE;
  7758  04B1  3004               	movlw	4
  7759  04B2  00DF               	movwf	??_main
  7760  04B3  085F               	movf	??_main,w
  7761  04B4  00E8               	movwf	_batteryState+1
  7762  04B5                     l3398:	
  7763                           
  7764                           ;main.c: 216: }
  7765                           ;main.c: 218: PWM1_LoadDutyValue(dutyCycle1);
  7766  04B5  0021               	movlb	1	; select bank1
  7767  04B6  0866               	movf	(main@dutyCycle1+1)^(0+128),w
  7768  04B7  00F1               	movwf	PWM1_LoadDutyValue@dutyCycle1+1
  7769  04B8  0865               	movf	main@dutyCycle1^(0+128),w
  7770  04B9  00F0               	movwf	PWM1_LoadDutyValue@dutyCycle1
  7771  04BA  319F  2766  3181   	fcall	_PWM1_LoadDutyValue
  7772                           
  7773                           ;main.c: 220: ADREF = 0x00;
  7774  04BD  0021               	movlb	1	; select bank1
  7775  04BE  019A               	clrf	26	;volatile
  7776                           
  7777                           ;main.c: 221: batteryTemp=tempCalc(ADCRead(9));
  7778  04BF  3009               	movlw	9
  7779  04C0  319F  2751  3181   	fcall	_ADCRead
  7780  04C3  0871               	movf	?_ADCRead+1,w
  7781  04C4  0020               	movlb	0	; select bank0
  7782  04C5  00D5               	movwf	tempCalc@analogValue+1
  7783  04C6  0870               	movf	?_ADCRead,w
  7784  04C7  00D4               	movwf	tempCalc@analogValue
  7785  04C8  318A  2213  3181   	fcall	_tempCalc
  7786  04CB  0020               	movlb	0	; select bank0
  7787  04CC  0855               	movf	?_tempCalc+1,w
  7788  04CD  00EE               	movwf	_batteryTemp+1
  7789  04CE  0854               	movf	?_tempCalc,w
  7790  04CF  00ED               	movwf	_batteryTemp
  7791                           
  7792                           ;main.c: 222: ADREF = 0x03;
  7793  04D0  3003               	movlw	3
  7794  04D1  0021               	movlb	1	; select bank1
  7795  04D2  009A               	movwf	26	;volatile
  7796                           
  7797                           ;main.c: 224: displayRefresh+=1;
  7798  04D3  3001               	movlw	1
  7799  04D4  0020               	movlb	0	; select bank0
  7800  04D5  00DF               	movwf	??_main
  7801  04D6  085F               	movf	??_main,w
  7802  04D7  0021               	movlb	1	; select bank1
  7803  04D8  07DB               	addwf	main@displayRefresh^(0+128),f
  7804                           
  7805                           ;main.c: 225: if(displayRefresh>80)
  7806  04D9  3051               	movlw	81
  7807  04DA  025B               	subwf	main@displayRefresh^(0+128),w
  7808  04DB  1C03               	skipc
  7809  04DC  2CE2               	goto	l3414
  7810                           
  7811                           ;main.c: 226: {
  7812                           ;main.c: 227: LCDClear();
  7813  04DD  3191  2187  3181   	fcall	_LCDClear
  7814                           
  7815                           ;main.c: 228: displayRefresh=0;
  7816  04E0  0021               	movlb	1	; select bank1
  7817  04E1  01DB               	clrf	main@displayRefresh^(0+128)
  7818  04E2                     l3414:	
  7819                           
  7820                           ;main.c: 230: }
  7821                           ;main.c: 231: Battery_State_Machine(0);
  7822  04E2  3000               	movlw	0
  7823  04E3  318E  2688  3181   	fcall	_Battery_State_Machine
  7824                           
  7825                           ;main.c: 232: Battery_State_Machine(1);
  7826  04E6  3001               	movlw	1
  7827  04E7  318E  2688  3181   	fcall	_Battery_State_Machine
  7828                           
  7829                           ;main.c: 235: { gotoXY(0,0); LCDWriteString("In:");};
  7830  04EA  01F5               	clrf	gotoXY@y
  7831  04EB  3000               	movlw	0
  7832  04EC  319F  272A  3181   	fcall	_gotoXY
  7833  04EF  3025               	movlw	low (STR_1| (0+32768))
  7834  04F0  00FC               	movwf	LCDWriteString@characters
  7835  04F1  3098               	movlw	high (STR_1| (0+32768))
  7836  04F2  00FD               	movwf	LCDWriteString@characters+1
  7837  04F3  319F  273D  3181   	fcall	_LCDWriteString
  7838                           
  7839                           ;main.c: 236: { gotoXY(26,0); LCDWriteString("Out:");};
  7840  04F6  01F5               	clrf	gotoXY@y
  7841  04F7  301A               	movlw	26
  7842  04F8  319F  272A  3181   	fcall	_gotoXY
  7843  04FB  3020               	movlw	low (STR_2| (0+32768))
  7844  04FC  00FC               	movwf	LCDWriteString@characters
  7845  04FD  3098               	movlw	high (STR_2| (0+32768))
  7846  04FE  00FD               	movwf	LCDWriteString@characters+1
  7847  04FF  319F  273D  3181   	fcall	_LCDWriteString
  7848                           
  7849                           ;main.c: 237: { gotoXY(52,0); LCDWriteString("Ref:");};
  7850  0502  01F5               	clrf	gotoXY@y
  7851  0503  3034               	movlw	52
  7852  0504  319F  272A  3181   	fcall	_gotoXY
  7853  0507  301B               	movlw	low (STR_3| (0+32768))
  7854  0508  00FC               	movwf	LCDWriteString@characters
  7855  0509  3098               	movlw	high (STR_3| (0+32768))
  7856  050A  00FD               	movwf	LCDWriteString@characters+1
  7857  050B  319F  273D  3181   	fcall	_LCDWriteString
  7858                           
  7859                           ;main.c: 239: { gotoXY(0,1); LCDWriteInt(voltage[2],4, 2, 0);};
  7860  050E  01F5               	clrf	gotoXY@y
  7861  050F  0AF5               	incf	gotoXY@y,f
  7862  0510  3000               	movlw	0
  7863  0511  319F  272A  3181   	fcall	_gotoXY
  7864  0514  0021               	movlb	1	; select bank1
  7865  0515  082D               	movf	((_voltage+1)^(0+128)+4),w
  7866  0516  0020               	movlb	0	; select bank0
  7867  0517  00C6               	movwf	LCDWriteInt@value+1
  7868  0518  0021               	movlb	1	; select bank1
  7869  0519  082C               	movf	(_voltage^(0+128)+4),w
  7870  051A  0020               	movlb	0	; select bank0
  7871  051B  00C5               	movwf	LCDWriteInt@value
  7872  051C  3004               	movlw	4
  7873  051D  00DF               	movwf	??_main
  7874  051E  085F               	movf	??_main,w
  7875  051F  00C7               	movwf	LCDWriteInt@fieldLength
  7876  0520  3002               	movlw	2
  7877  0521  00E0               	movwf	??_main+1
  7878  0522  0860               	movf	??_main+1,w
  7879  0523  00C8               	movwf	LCDWriteInt@numPlaces
  7880  0524  01C9               	clrf	LCDWriteInt@sign
  7881  0525  3189  215A  3181   	fcall	_LCDWriteInt
  7882                           
  7883                           ;main.c: 241: LCDWriteCharacter('V');
  7884  0528  3056               	movlw	86
  7885  0529  3194  2427  3181   	fcall	_LCDWriteCharacter
  7886                           
  7887                           ;main.c: 243: { gotoXY(26,1); LCDWriteInt(voltage[0],4, 2, 0);};
  7888  052C  01F5               	clrf	gotoXY@y
  7889  052D  0AF5               	incf	gotoXY@y,f
  7890  052E  301A               	movlw	26
  7891  052F  319F  272A  3181   	fcall	_gotoXY
  7892  0532  0021               	movlb	1	; select bank1
  7893  0533  0829               	movf	(_voltage+1)^(0+128),w
  7894  0534  0020               	movlb	0	; select bank0
  7895  0535  00C6               	movwf	LCDWriteInt@value+1
  7896  0536  0021               	movlb	1	; select bank1
  7897  0537  0828               	movf	_voltage^(0+128),w
  7898  0538  0020               	movlb	0	; select bank0
  7899  0539  00C5               	movwf	LCDWriteInt@value
  7900  053A  3004               	movlw	4
  7901  053B  00DF               	movwf	??_main
  7902  053C  085F               	movf	??_main,w
  7903  053D  00C7               	movwf	LCDWriteInt@fieldLength
  7904  053E  3002               	movlw	2
  7905  053F  00E0               	movwf	??_main+1
  7906  0540  0860               	movf	??_main+1,w
  7907  0541  00C8               	movwf	LCDWriteInt@numPlaces
  7908  0542  01C9               	clrf	LCDWriteInt@sign
  7909  0543  3189  215A  3181   	fcall	_LCDWriteInt
  7910                           
  7911                           ;main.c: 245: LCDWriteCharacter('V');
  7912  0546  3056               	movlw	86
  7913  0547  3194  2427  3181   	fcall	_LCDWriteCharacter
  7914                           
  7915                           ;main.c: 247: { gotoXY(52,1); LCDWriteInt(Vref[0],4, 2, 0);};
  7916  054A  01F5               	clrf	gotoXY@y
  7917  054B  0AF5               	incf	gotoXY@y,f
  7918  054C  3034               	movlw	52
  7919  054D  319F  272A  3181   	fcall	_gotoXY
  7920  0550  0021               	movlb	1	; select bank1
  7921  0551  0839               	movf	(_Vref+1)^(0+128),w
  7922  0552  0020               	movlb	0	; select bank0
  7923  0553  00C6               	movwf	LCDWriteInt@value+1
  7924  0554  0021               	movlb	1	; select bank1
  7925  0555  0838               	movf	_Vref^(0+128),w
  7926  0556  0020               	movlb	0	; select bank0
  7927  0557  00C5               	movwf	LCDWriteInt@value
  7928  0558  3004               	movlw	4
  7929  0559  00DF               	movwf	??_main
  7930  055A  085F               	movf	??_main,w
  7931  055B  00C7               	movwf	LCDWriteInt@fieldLength
  7932  055C  3002               	movlw	2
  7933  055D  00E0               	movwf	??_main+1
  7934  055E  0860               	movf	??_main+1,w
  7935  055F  00C8               	movwf	LCDWriteInt@numPlaces
  7936  0560  01C9               	clrf	LCDWriteInt@sign
  7937  0561  3189  215A  3181   	fcall	_LCDWriteInt
  7938                           
  7939                           ;main.c: 248: LCDWriteCharacter('V');
  7940  0564  3056               	movlw	86
  7941  0565  3194  2427  3181   	fcall	_LCDWriteCharacter
  7942                           
  7943                           ;main.c: 250: { gotoXY(80,1); LCDWriteInt(Imode[0],1, 0, 0);};
  7944  0568  01F5               	clrf	gotoXY@y
  7945  0569  0AF5               	incf	gotoXY@y,f
  7946  056A  3050               	movlw	80
  7947  056B  319F  272A  3181   	fcall	_gotoXY
  7948  056E  0020               	movlb	0	; select bank0
  7949  056F  0865               	movf	_Imode,w
  7950  0570  00C5               	movwf	LCDWriteInt@value
  7951  0571  01C6               	clrf	LCDWriteInt@value+1
  7952  0572  1BC5               	btfsc	LCDWriteInt@value,7
  7953  0573  03C6               	decf	LCDWriteInt@value+1,f
  7954  0574  01C7               	clrf	LCDWriteInt@fieldLength
  7955  0575  0AC7               	incf	LCDWriteInt@fieldLength,f
  7956  0576  01C8               	clrf	LCDWriteInt@numPlaces
  7957  0577  01C9               	clrf	LCDWriteInt@sign
  7958  0578  3189  215A  3181   	fcall	_LCDWriteInt
  7959                           
  7960                           ;main.c: 252: { gotoXY(0,2); LCDWriteInt(current[2],3, 1, 0);};
  7961  057B  3002               	movlw	2
  7962  057C  0020               	movlb	0	; select bank0
  7963  057D  00DF               	movwf	??_main
  7964  057E  085F               	movf	??_main,w
  7965  057F  00F5               	movwf	gotoXY@y
  7966  0580  3000               	movlw	0
  7967  0581  319F  272A  3181   	fcall	_gotoXY
  7968  0584  0021               	movlb	1	; select bank1
  7969  0585  0835               	movf	((_current+1)^(0+128)+4),w
  7970  0586  0020               	movlb	0	; select bank0
  7971  0587  00C6               	movwf	LCDWriteInt@value+1
  7972  0588  0021               	movlb	1	; select bank1
  7973  0589  0834               	movf	(_current^(0+128)+4),w
  7974  058A  0020               	movlb	0	; select bank0
  7975  058B  00C5               	movwf	LCDWriteInt@value
  7976  058C  3003               	movlw	3
  7977  058D  00DF               	movwf	??_main
  7978  058E  085F               	movf	??_main,w
  7979  058F  00C7               	movwf	LCDWriteInt@fieldLength
  7980  0590  01C8               	clrf	LCDWriteInt@numPlaces
  7981  0591  0AC8               	incf	LCDWriteInt@numPlaces,f
  7982  0592  01C9               	clrf	LCDWriteInt@sign
  7983  0593  3189  215A  3181   	fcall	_LCDWriteInt
  7984                           
  7985                           ;main.c: 253: LCDWriteCharacter('A');
  7986  0596  3041               	movlw	65
  7987  0597  3194  2427  3181   	fcall	_LCDWriteCharacter
  7988                           
  7989                           ;main.c: 255: { gotoXY(26,2); LCDWriteInt(current[0],3, 1, 0);};
  7990  059A  3002               	movlw	2
  7991  059B  0020               	movlb	0	; select bank0
  7992  059C  00DF               	movwf	??_main
  7993  059D  085F               	movf	??_main,w
  7994  059E  00F5               	movwf	gotoXY@y
  7995  059F  301A               	movlw	26
  7996  05A0  319F  272A  3181   	fcall	_gotoXY
  7997  05A3  0021               	movlb	1	; select bank1
  7998  05A4  0831               	movf	(_current+1)^(0+128),w
  7999  05A5  0020               	movlb	0	; select bank0
  8000  05A6  00C6               	movwf	LCDWriteInt@value+1
  8001  05A7  0021               	movlb	1	; select bank1
  8002  05A8  0830               	movf	_current^(0+128),w
  8003  05A9  0020               	movlb	0	; select bank0
  8004  05AA  00C5               	movwf	LCDWriteInt@value
  8005  05AB  3003               	movlw	3
  8006  05AC  00DF               	movwf	??_main
  8007  05AD  085F               	movf	??_main,w
  8008  05AE  00C7               	movwf	LCDWriteInt@fieldLength
  8009  05AF  01C8               	clrf	LCDWriteInt@numPlaces
  8010  05B0  0AC8               	incf	LCDWriteInt@numPlaces,f
  8011  05B1  01C9               	clrf	LCDWriteInt@sign
  8012  05B2  3189  215A  3181   	fcall	_LCDWriteInt
  8013                           
  8014                           ;main.c: 256: LCDWriteCharacter('A');
  8015  05B5  3041               	movlw	65
  8016  05B6  3194  2427  3181   	fcall	_LCDWriteCharacter
  8017                           
  8018                           ;main.c: 258: { gotoXY(52,2); LCDWriteInt(Iref[0],3, 1, 0);};
  8019  05B9  3002               	movlw	2
  8020  05BA  0020               	movlb	0	; select bank0
  8021  05BB  00DF               	movwf	??_main
  8022  05BC  085F               	movf	??_main,w
  8023  05BD  00F5               	movwf	gotoXY@y
  8024  05BE  3034               	movlw	52
  8025  05BF  319F  272A  3181   	fcall	_gotoXY
  8026  05C2  0021               	movlb	1	; select bank1
  8027  05C3  0841               	movf	(_Iref+1)^(0+128),w
  8028  05C4  0020               	movlb	0	; select bank0
  8029  05C5  00C6               	movwf	LCDWriteInt@value+1
  8030  05C6  0021               	movlb	1	; select bank1
  8031  05C7  0840               	movf	_Iref^(0+128),w
  8032  05C8  0020               	movlb	0	; select bank0
  8033  05C9  00C5               	movwf	LCDWriteInt@value
  8034  05CA  3003               	movlw	3
  8035  05CB  00DF               	movwf	??_main
  8036  05CC  085F               	movf	??_main,w
  8037  05CD  00C7               	movwf	LCDWriteInt@fieldLength
  8038  05CE  01C8               	clrf	LCDWriteInt@numPlaces
  8039  05CF  0AC8               	incf	LCDWriteInt@numPlaces,f
  8040  05D0  01C9               	clrf	LCDWriteInt@sign
  8041  05D1  3189  215A  3181   	fcall	_LCDWriteInt
  8042                           
  8043                           ;main.c: 259: LCDWriteCharacter('A');
  8044  05D4  3041               	movlw	65
  8045  05D5  3194  2427  3181   	fcall	_LCDWriteCharacter
  8046                           
  8047                           ;main.c: 261: { gotoXY(80,2); LCDWriteInt(batteryState[0],1, 0, 0);};
  8048  05D8  3002               	movlw	2
  8049  05D9  0020               	movlb	0	; select bank0
  8050  05DA  00DF               	movwf	??_main
  8051  05DB  085F               	movf	??_main,w
  8052  05DC  00F5               	movwf	gotoXY@y
  8053  05DD  3050               	movlw	80
  8054  05DE  319F  272A  3181   	fcall	_gotoXY
  8055  05E1  0020               	movlb	0	; select bank0
  8056  05E2  0867               	movf	_batteryState,w
  8057  05E3  00DF               	movwf	??_main
  8058  05E4  01E0               	clrf	??_main+1
  8059  05E5  085F               	movf	??_main,w
  8060  05E6  00C5               	movwf	LCDWriteInt@value
  8061  05E7  0860               	movf	??_main+1,w
  8062  05E8  00C6               	movwf	LCDWriteInt@value+1
  8063  05E9  01C7               	clrf	LCDWriteInt@fieldLength
  8064  05EA  0AC7               	incf	LCDWriteInt@fieldLength,f
  8065  05EB  01C8               	clrf	LCDWriteInt@numPlaces
  8066  05EC  01C9               	clrf	LCDWriteInt@sign
  8067  05ED  3189  215A  3181   	fcall	_LCDWriteInt
  8068                           
  8069                           ;main.c: 263: { gotoXY(0,3); LCDWriteInt(voltage[3],4, 2, 0);};
  8070  05F0  3003               	movlw	3
  8071  05F1  0020               	movlb	0	; select bank0
  8072  05F2  00DF               	movwf	??_main
  8073  05F3  085F               	movf	??_main,w
  8074  05F4  00F5               	movwf	gotoXY@y
  8075  05F5  3000               	movlw	0
  8076  05F6  319F  272A  3181   	fcall	_gotoXY
  8077  05F9  0021               	movlb	1	; select bank1
  8078  05FA  082F               	movf	((_voltage+1)^(0+128)+6),w
  8079  05FB  0020               	movlb	0	; select bank0
  8080  05FC  00C6               	movwf	LCDWriteInt@value+1
  8081  05FD  0021               	movlb	1	; select bank1
  8082  05FE  082E               	movf	(_voltage^(0+128)+6),w
  8083  05FF  0020               	movlb	0	; select bank0
  8084  0600  00C5               	movwf	LCDWriteInt@value
  8085  0601  3004               	movlw	4
  8086  0602  00DF               	movwf	??_main
  8087  0603  085F               	movf	??_main,w
  8088  0604  00C7               	movwf	LCDWriteInt@fieldLength
  8089  0605  3002               	movlw	2
  8090  0606  00E0               	movwf	??_main+1
  8091  0607  0860               	movf	??_main+1,w
  8092  0608  00C8               	movwf	LCDWriteInt@numPlaces
  8093  0609  01C9               	clrf	LCDWriteInt@sign
  8094  060A  3189  215A  3181   	fcall	_LCDWriteInt
  8095                           
  8096                           ;main.c: 265: LCDWriteCharacter('V');
  8097  060D  3056               	movlw	86
  8098  060E  3194  2427  3181   	fcall	_LCDWriteCharacter
  8099                           
  8100                           ;main.c: 267: { gotoXY(26,3); LCDWriteInt(voltage[1],4, 2, 0);};
  8101  0611  3003               	movlw	3
  8102  0612  0020               	movlb	0	; select bank0
  8103  0613  00DF               	movwf	??_main
  8104  0614  085F               	movf	??_main,w
  8105  0615  00F5               	movwf	gotoXY@y
  8106  0616  301A               	movlw	26
  8107  0617  319F  272A  3181   	fcall	_gotoXY
  8108  061A  0021               	movlb	1	; select bank1
  8109  061B  082B               	movf	((_voltage+1)^(0+128)+2),w
  8110  061C  0020               	movlb	0	; select bank0
  8111  061D  00C6               	movwf	LCDWriteInt@value+1
  8112  061E  0021               	movlb	1	; select bank1
  8113  061F  082A               	movf	(_voltage^(0+128)+2),w
  8114  0620  0020               	movlb	0	; select bank0
  8115  0621  00C5               	movwf	LCDWriteInt@value
  8116  0622  3004               	movlw	4
  8117  0623  00DF               	movwf	??_main
  8118  0624  085F               	movf	??_main,w
  8119  0625  00C7               	movwf	LCDWriteInt@fieldLength
  8120  0626  3002               	movlw	2
  8121  0627  00E0               	movwf	??_main+1
  8122  0628  0860               	movf	??_main+1,w
  8123  0629  00C8               	movwf	LCDWriteInt@numPlaces
  8124  062A  01C9               	clrf	LCDWriteInt@sign
  8125  062B  3189  215A  3181   	fcall	_LCDWriteInt
  8126                           
  8127                           ;main.c: 269: LCDWriteCharacter('V');
  8128  062E  3056               	movlw	86
  8129  062F  3194  2427  3181   	fcall	_LCDWriteCharacter
  8130                           
  8131                           ;main.c: 271: { gotoXY(52,3); LCDWriteInt(Vref[1],4, 2, 0);};
  8132  0632  3003               	movlw	3
  8133  0633  0020               	movlb	0	; select bank0
  8134  0634  00DF               	movwf	??_main
  8135  0635  085F               	movf	??_main,w
  8136  0636  00F5               	movwf	gotoXY@y
  8137  0637  3034               	movlw	52
  8138  0638  319F  272A  3181   	fcall	_gotoXY
  8139  063B  0021               	movlb	1	; select bank1
  8140  063C  083B               	movf	((_Vref+1)^(0+128)+2),w
  8141  063D  0020               	movlb	0	; select bank0
  8142  063E  00C6               	movwf	LCDWriteInt@value+1
  8143  063F  0021               	movlb	1	; select bank1
  8144  0640  083A               	movf	(_Vref^(0+128)+2),w
  8145  0641  0020               	movlb	0	; select bank0
  8146  0642  00C5               	movwf	LCDWriteInt@value
  8147  0643  3004               	movlw	4
  8148  0644  00DF               	movwf	??_main
  8149  0645  085F               	movf	??_main,w
  8150  0646  00C7               	movwf	LCDWriteInt@fieldLength
  8151  0647  3002               	movlw	2
  8152  0648  00E0               	movwf	??_main+1
  8153  0649  0860               	movf	??_main+1,w
  8154  064A  00C8               	movwf	LCDWriteInt@numPlaces
  8155  064B  01C9               	clrf	LCDWriteInt@sign
  8156  064C  3189  215A  3181   	fcall	_LCDWriteInt
  8157                           
  8158                           ;main.c: 272: LCDWriteCharacter('V');
  8159  064F  3056               	movlw	86
  8160  0650  3194  2427  3181   	fcall	_LCDWriteCharacter
  8161                           
  8162                           ;main.c: 274: { gotoXY(80,3); LCDWriteInt(Imode[1],1, 0, 0);};
  8163  0653  3003               	movlw	3
  8164  0654  0020               	movlb	0	; select bank0
  8165  0655  00DF               	movwf	??_main
  8166  0656  085F               	movf	??_main,w
  8167  0657  00F5               	movwf	gotoXY@y
  8168  0658  3050               	movlw	80
  8169  0659  319F  272A  3181   	fcall	_gotoXY
  8170  065C  0020               	movlb	0	; select bank0
  8171  065D  0866               	movf	_Imode+1,w
  8172  065E  00C5               	movwf	LCDWriteInt@value
  8173  065F  01C6               	clrf	LCDWriteInt@value+1
  8174  0660  1BC5               	btfsc	LCDWriteInt@value,7
  8175  0661  03C6               	decf	LCDWriteInt@value+1,f
  8176  0662  01C7               	clrf	LCDWriteInt@fieldLength
  8177  0663  0AC7               	incf	LCDWriteInt@fieldLength,f
  8178  0664  01C8               	clrf	LCDWriteInt@numPlaces
  8179  0665  01C9               	clrf	LCDWriteInt@sign
  8180  0666  3189  215A  3181   	fcall	_LCDWriteInt
  8181                           
  8182                           ;main.c: 283: { gotoXY(0,4); LCDWriteInt(current[3],3, 1, 0);};
  8183  0669  3004               	movlw	4
  8184  066A  0020               	movlb	0	; select bank0
  8185  066B  00DF               	movwf	??_main
  8186  066C  085F               	movf	??_main,w
  8187  066D  00F5               	movwf	gotoXY@y
  8188  066E  3000               	movlw	0
  8189  066F  319F  272A  3181   	fcall	_gotoXY
  8190  0672  0021               	movlb	1	; select bank1
  8191  0673  0837               	movf	((_current+1)^(0+128)+6),w
  8192  0674  0020               	movlb	0	; select bank0
  8193  0675  00C6               	movwf	LCDWriteInt@value+1
  8194  0676  0021               	movlb	1	; select bank1
  8195  0677  0836               	movf	(_current^(0+128)+6),w
  8196  0678  0020               	movlb	0	; select bank0
  8197  0679  00C5               	movwf	LCDWriteInt@value
  8198  067A  3003               	movlw	3
  8199  067B  00DF               	movwf	??_main
  8200  067C  085F               	movf	??_main,w
  8201  067D  00C7               	movwf	LCDWriteInt@fieldLength
  8202  067E  01C8               	clrf	LCDWriteInt@numPlaces
  8203  067F  0AC8               	incf	LCDWriteInt@numPlaces,f
  8204  0680  01C9               	clrf	LCDWriteInt@sign
  8205  0681  3189  215A  3181   	fcall	_LCDWriteInt
  8206                           
  8207                           ;main.c: 284: LCDWriteCharacter('A');
  8208  0684  3041               	movlw	65
  8209  0685  3194  2427  3181   	fcall	_LCDWriteCharacter
  8210                           
  8211                           ;main.c: 286: { gotoXY(26,4); LCDWriteInt(current[3]*voltage[3]/voltage[1]*.9,3, 1, 0);}
      +                          ;
  8212  0688  3004               	movlw	4
  8213  0689  0020               	movlb	0	; select bank0
  8214  068A  00DF               	movwf	??_main
  8215  068B  085F               	movf	??_main,w
  8216  068C  00F5               	movwf	gotoXY@y
  8217  068D  301A               	movlw	26
  8218  068E  319F  272A  3181   	fcall	_gotoXY
  8219  0691  0021               	movlb	1	; select bank1
  8220  0692  082F               	movf	((_voltage+1)^(0+128)+6),w
  8221  0693  00F3               	movwf	___wmul@multiplicand+1
  8222  0694  082E               	movf	(_voltage^(0+128)+6),w
  8223  0695  00F2               	movwf	___wmul@multiplicand
  8224  0696  0837               	movf	((_current+1)^(0+128)+6),w
  8225  0697  00F1               	movwf	___wmul@multiplier+1
  8226  0698  0836               	movf	(_current^(0+128)+6),w
  8227  0699  00F0               	movwf	___wmul@multiplier
  8228  069A  319F  27A8  3181   	fcall	___wmul
  8229  069D  0871               	movf	?___wmul+1,w
  8230  069E  00F9               	movwf	___awdiv@dividend+1
  8231  069F  0870               	movf	?___wmul,w
  8232  06A0  00F8               	movwf	___awdiv@dividend
  8233  06A1  0021               	movlb	1	; select bank1
  8234  06A2  082B               	movf	((_voltage+1)^(0+128)+2),w
  8235  06A3  00F7               	movwf	___awdiv@divisor+1
  8236  06A4  082A               	movf	(_voltage^(0+128)+2),w
  8237  06A5  00F6               	movwf	___awdiv@divisor
  8238  06A6  3193  23D5  3181   	fcall	___awdiv
  8239  06A9  0877               	movf	?___awdiv+1,w
  8240  06AA  0020               	movlb	0	; select bank0
  8241  06AB  00A5               	movwf	___awtoft@c+1
  8242  06AC  0876               	movf	?___awdiv,w
  8243  06AD  00A4               	movwf	___awtoft@c
  8244  06AE  3191  2140  3181   	fcall	___awtoft
  8245  06B1  0020               	movlb	0	; select bank0
  8246  06B2  0824               	movf	?___awtoft,w
  8247  06B3  00AA               	movwf	___ftmul@f2
  8248  06B4  0825               	movf	?___awtoft+1,w
  8249  06B5  00AB               	movwf	___ftmul@f2+1
  8250  06B6  0826               	movf	?___awtoft+2,w
  8251  06B7  00AC               	movwf	___ftmul@f2+2
  8252  06B8  3066               	movlw	102
  8253  06B9  00A7               	movwf	___ftmul@f1
  8254  06BA  3066               	movlw	102
  8255  06BB  00A8               	movwf	___ftmul@f1+1
  8256  06BC  303F               	movlw	63
  8257  06BD  00A9               	movwf	___ftmul@f1+2
  8258  06BE  3188  20A6  3181   	fcall	___ftmul
  8259  06C1  0020               	movlb	0	; select bank0
  8260  06C2  0827               	movf	?___ftmul,w
  8261  06C3  00B7               	movwf	___fttol@f1
  8262  06C4  0828               	movf	?___ftmul+1,w
  8263  06C5  00B8               	movwf	___fttol@f1+1
  8264  06C6  0829               	movf	?___ftmul+2,w
  8265  06C7  00B9               	movwf	___fttol@f1+2
  8266  06C8  3188  201F  3181   	fcall	___fttol
  8267  06CB  0020               	movlb	0	; select bank0
  8268  06CC  0838               	movf	?___fttol+1,w
  8269  06CD  0021               	movlb	1	; select bank1
  8270  06CE  00DA               	movwf	(_main$1307+1)^(0+128)
  8271  06CF  0020               	movlb	0	; select bank0
  8272  06D0  0837               	movf	?___fttol,w
  8273  06D1  0021               	movlb	1	; select bank1
  8274  06D2  00D9               	movwf	_main$1307^(0+128)
  8275  06D3  085A               	movf	(_main$1307+1)^(0+128),w
  8276  06D4  0020               	movlb	0	; select bank0
  8277  06D5  00C6               	movwf	LCDWriteInt@value+1
  8278  06D6  0021               	movlb	1	; select bank1
  8279  06D7  0859               	movf	_main$1307^(0+128),w
  8280  06D8  0020               	movlb	0	; select bank0
  8281  06D9  00C5               	movwf	LCDWriteInt@value
  8282  06DA  3003               	movlw	3
  8283  06DB  00DF               	movwf	??_main
  8284  06DC  085F               	movf	??_main,w
  8285  06DD  00C7               	movwf	LCDWriteInt@fieldLength
  8286  06DE  01C8               	clrf	LCDWriteInt@numPlaces
  8287  06DF  0AC8               	incf	LCDWriteInt@numPlaces,f
  8288  06E0  01C9               	clrf	LCDWriteInt@sign
  8289  06E1  3189  215A  3181   	fcall	_LCDWriteInt
  8290                           
  8291                           ;main.c: 287: LCDWriteCharacter('A');
  8292  06E4  3041               	movlw	65
  8293  06E5  3194  2427  3181   	fcall	_LCDWriteCharacter
  8294                           
  8295                           ;main.c: 289: { gotoXY(52,4); LCDWriteInt(Iref[1],3, 1, 0);};
  8296  06E8  3004               	movlw	4
  8297  06E9  0020               	movlb	0	; select bank0
  8298  06EA  00DF               	movwf	??_main
  8299  06EB  085F               	movf	??_main,w
  8300  06EC  00F5               	movwf	gotoXY@y
  8301  06ED  3034               	movlw	52
  8302  06EE  319F  272A  3181   	fcall	_gotoXY
  8303  06F1  0021               	movlb	1	; select bank1
  8304  06F2  0843               	movf	((_Iref+1)^(0+128)+2),w
  8305  06F3  0020               	movlb	0	; select bank0
  8306  06F4  00C6               	movwf	LCDWriteInt@value+1
  8307  06F5  0021               	movlb	1	; select bank1
  8308  06F6  0842               	movf	(_Iref^(0+128)+2),w
  8309  06F7  0020               	movlb	0	; select bank0
  8310  06F8  00C5               	movwf	LCDWriteInt@value
  8311  06F9  3003               	movlw	3
  8312  06FA  00DF               	movwf	??_main
  8313  06FB  085F               	movf	??_main,w
  8314  06FC  00C7               	movwf	LCDWriteInt@fieldLength
  8315  06FD  01C8               	clrf	LCDWriteInt@numPlaces
  8316  06FE  0AC8               	incf	LCDWriteInt@numPlaces,f
  8317  06FF  01C9               	clrf	LCDWriteInt@sign
  8318  0700  3189  215A  3181   	fcall	_LCDWriteInt
  8319                           
  8320                           ;main.c: 290: LCDWriteCharacter('A');
  8321  0703  3041               	movlw	65
  8322  0704  3194  2427  3181   	fcall	_LCDWriteCharacter
  8323                           
  8324                           ;main.c: 292: { gotoXY(80,4); LCDWriteInt(batteryState[1],1, 0, 0);};
  8325  0707  3004               	movlw	4
  8326  0708  0020               	movlb	0	; select bank0
  8327  0709  00DF               	movwf	??_main
  8328  070A  085F               	movf	??_main,w
  8329  070B  00F5               	movwf	gotoXY@y
  8330  070C  3050               	movlw	80
  8331  070D  319F  272A  3181   	fcall	_gotoXY
  8332  0710  0020               	movlb	0	; select bank0
  8333  0711  0868               	movf	_batteryState+1,w
  8334  0712  00DF               	movwf	??_main
  8335  0713  01E0               	clrf	??_main+1
  8336  0714  085F               	movf	??_main,w
  8337  0715  00C5               	movwf	LCDWriteInt@value
  8338  0716  0860               	movf	??_main+1,w
  8339  0717  00C6               	movwf	LCDWriteInt@value+1
  8340  0718  01C7               	clrf	LCDWriteInt@fieldLength
  8341  0719  0AC7               	incf	LCDWriteInt@fieldLength,f
  8342  071A  01C8               	clrf	LCDWriteInt@numPlaces
  8343  071B  01C9               	clrf	LCDWriteInt@sign
  8344  071C  3189  215A  3181   	fcall	_LCDWriteInt
  8345                           
  8346                           ;main.c: 296: { gotoXY(0,5); LCDWriteInt(dutyCycle6,4, 0, 0);};
  8347  071F  3005               	movlw	5
  8348  0720  0020               	movlb	0	; select bank0
  8349  0721  00DF               	movwf	??_main
  8350  0722  085F               	movf	??_main,w
  8351  0723  00F5               	movwf	gotoXY@y
  8352  0724  3000               	movlw	0
  8353  0725  319F  272A  3181   	fcall	_gotoXY
  8354  0728  0021               	movlb	1	; select bank1
  8355  0729  086A               	movf	(main@dutyCycle6+1)^(0+128),w
  8356  072A  0020               	movlb	0	; select bank0
  8357  072B  00C6               	movwf	LCDWriteInt@value+1
  8358  072C  0021               	movlb	1	; select bank1
  8359  072D  0869               	movf	main@dutyCycle6^(0+128),w
  8360  072E  0020               	movlb	0	; select bank0
  8361  072F  00C5               	movwf	LCDWriteInt@value
  8362  0730  3004               	movlw	4
  8363  0731  00DF               	movwf	??_main
  8364  0732  085F               	movf	??_main,w
  8365  0733  00C7               	movwf	LCDWriteInt@fieldLength
  8366  0734  01C8               	clrf	LCDWriteInt@numPlaces
  8367  0735  01C9               	clrf	LCDWriteInt@sign
  8368  0736  3189  215A  3181   	fcall	_LCDWriteInt
  8369                           
  8370                           ;main.c: 297: { gotoXY(18,5); LCDWriteInt(VHoldMode[0],1, 0, 0);};
  8371  0739  3005               	movlw	5
  8372  073A  0020               	movlb	0	; select bank0
  8373  073B  00DF               	movwf	??_main
  8374  073C  085F               	movf	??_main,w
  8375  073D  00F5               	movwf	gotoXY@y
  8376  073E  3012               	movlw	18
  8377  073F  319F  272A  3181   	fcall	_gotoXY
  8378  0742  0020               	movlb	0	; select bank0
  8379  0743  0863               	movf	_VHoldMode,w
  8380  0744  00C5               	movwf	LCDWriteInt@value
  8381  0745  01C6               	clrf	LCDWriteInt@value+1
  8382  0746  1BC5               	btfsc	LCDWriteInt@value,7
  8383  0747  03C6               	decf	LCDWriteInt@value+1,f
  8384  0748  01C7               	clrf	LCDWriteInt@fieldLength
  8385  0749  0AC7               	incf	LCDWriteInt@fieldLength,f
  8386  074A  01C8               	clrf	LCDWriteInt@numPlaces
  8387  074B  01C9               	clrf	LCDWriteInt@sign
  8388  074C  3189  215A  3181   	fcall	_LCDWriteInt
  8389                           
  8390                           ;main.c: 298: LCDWriteCharacter(' ');
  8391  074F  3020               	movlw	32
  8392  0750  3194  2427  3181   	fcall	_LCDWriteCharacter
  8393                           
  8394                           ;main.c: 299: { gotoXY(28,5); LCDWriteInt(dutyCycle7,4, 0, 0);};
  8395  0753  3005               	movlw	5
  8396  0754  0020               	movlb	0	; select bank0
  8397  0755  00DF               	movwf	??_main
  8398  0756  085F               	movf	??_main,w
  8399  0757  00F5               	movwf	gotoXY@y
  8400  0758  301C               	movlw	28
  8401  0759  319F  272A  3181   	fcall	_gotoXY
  8402  075C  0021               	movlb	1	; select bank1
  8403  075D  086C               	movf	(main@dutyCycle7+1)^(0+128),w
  8404  075E  0020               	movlb	0	; select bank0
  8405  075F  00C6               	movwf	LCDWriteInt@value+1
  8406  0760  0021               	movlb	1	; select bank1
  8407  0761  086B               	movf	main@dutyCycle7^(0+128),w
  8408  0762  0020               	movlb	0	; select bank0
  8409  0763  00C5               	movwf	LCDWriteInt@value
  8410  0764  3004               	movlw	4
  8411  0765  00DF               	movwf	??_main
  8412  0766  085F               	movf	??_main,w
  8413  0767  00C7               	movwf	LCDWriteInt@fieldLength
  8414  0768  01C8               	clrf	LCDWriteInt@numPlaces
  8415  0769  01C9               	clrf	LCDWriteInt@sign
  8416  076A  3189  215A  3181   	fcall	_LCDWriteInt
  8417                           
  8418                           ;main.c: 300: { gotoXY(46,5); LCDWriteInt(VHoldMode[1],1, 0, 0);};
  8419  076D  3005               	movlw	5
  8420  076E  0020               	movlb	0	; select bank0
  8421  076F  00DF               	movwf	??_main
  8422  0770  085F               	movf	??_main,w
  8423  0771  00F5               	movwf	gotoXY@y
  8424  0772  302E               	movlw	46
  8425  0773  319F  272A  3181   	fcall	_gotoXY
  8426  0776  0020               	movlb	0	; select bank0
  8427  0777  0864               	movf	_VHoldMode+1,w
  8428  0778  00C5               	movwf	LCDWriteInt@value
  8429  0779  01C6               	clrf	LCDWriteInt@value+1
  8430  077A  1BC5               	btfsc	LCDWriteInt@value,7
  8431  077B  03C6               	decf	LCDWriteInt@value+1,f
  8432  077C  01C7               	clrf	LCDWriteInt@fieldLength
  8433  077D  0AC7               	incf	LCDWriteInt@fieldLength,f
  8434  077E  01C8               	clrf	LCDWriteInt@numPlaces
  8435  077F  01C9               	clrf	LCDWriteInt@sign
  8436  0780  3189  215A  3181   	fcall	_LCDWriteInt
  8437                           
  8438                           ;main.c: 301: LCDWriteCharacter(' ');
  8439  0783  3020               	movlw	32
  8440  0784  3194  2427  3181   	fcall	_LCDWriteCharacter
  8441                           
  8442                           ;main.c: 302: { gotoXY(56,5); LCDWriteInt(batteryTemp,3, 1, 0);};
  8443  0787  3005               	movlw	5
  8444  0788  0020               	movlb	0	; select bank0
  8445  0789  00DF               	movwf	??_main
  8446  078A  085F               	movf	??_main,w
  8447  078B  00F5               	movwf	gotoXY@y
  8448  078C  3038               	movlw	56
  8449  078D  319F  272A  3181   	fcall	_gotoXY
  8450  0790  0020               	movlb	0	; select bank0
  8451  0791  086E               	movf	_batteryTemp+1,w
  8452  0792  00C6               	movwf	LCDWriteInt@value+1
  8453  0793  086D               	movf	_batteryTemp,w
  8454  0794  00C5               	movwf	LCDWriteInt@value
  8455  0795  3003               	movlw	3
  8456  0796  00DF               	movwf	??_main
  8457  0797  085F               	movf	??_main,w
  8458  0798  00C7               	movwf	LCDWriteInt@fieldLength
  8459  0799  01C8               	clrf	LCDWriteInt@numPlaces
  8460  079A  0AC8               	incf	LCDWriteInt@numPlaces,f
  8461  079B  01C9               	clrf	LCDWriteInt@sign
  8462  079C  3189  215A  3181   	fcall	_LCDWriteInt
  8463                           
  8464                           ;main.c: 303: LCDWriteCharacter(123);
  8465  079F  307B               	movlw	123
  8466  07A0  3194  2427  3181   	fcall	_LCDWriteCharacter
  8467                           
  8468                           ;main.c: 304: LCDWriteCharacter('C');
  8469  07A3  3043               	movlw	67
  8470  07A4  3194  2427  3181   	fcall	_LCDWriteCharacter
  8471                           
  8472                           ;main.c: 374: if(batteryState[0] > FINISHED)
  8473  07A7  3003               	movlw	3
  8474  07A8  0020               	movlb	0	; select bank0
  8475  07A9  0267               	subwf	_batteryState,w
  8476  07AA  1C03               	skipc
  8477  07AB  2FB0               	goto	l3552
  8478                           
  8479                           ;main.c: 375: {
  8480                           ;main.c: 376: cc_cv_mode(0);
  8481  07AC  3000               	movlw	0
  8482  07AD  3180  2009  3181   	fcall	_cc_cv_mode
  8483  07B0                     l3552:	
  8484                           
  8485                           ;main.c: 377: }
  8486                           ;main.c: 378: if(batteryState[1] > FINISHED)
  8487  07B0  3003               	movlw	3
  8488  07B1  0020               	movlb	0	; select bank0
  8489  07B2  0268               	subwf	_batteryState+1,w
  8490  07B3  1C03               	skipc
  8491  07B4  2FB9               	goto	l3556
  8492                           
  8493                           ;main.c: 379: {
  8494                           ;main.c: 380: cc_cv_mode(1);
  8495  07B5  3001               	movlw	1
  8496  07B6  3180  2009  3181   	fcall	_cc_cv_mode
  8497  07B9                     l3556:	
  8498                           
  8499                           ;main.c: 381: }
  8500                           ;main.c: 382: slowLoop=0;
  8501  07B9  0021               	movlb	1	; select bank1
  8502  07BA  01DD               	clrf	main@slowLoop^(0+128)
  8503  07BB  297D               	goto	l3252
  8504  07BC                     __end_of_main:	
  8505                           
  8506                           	psect	text1
  8507  0A13                     __ptext1:	
  8508 ;; *************** function _tempCalc *****************
  8509 ;; Defined at:
  8510 ;;		line 4 in file "tempCalc.c"
  8511 ;; Parameters:    Size  Location     Type
  8512 ;;  analogValue     2   52[BANK0 ] int 
  8513 ;; Auto vars:     Size  Location     Type
  8514 ;;  steinhart       3   60[BANK0 ] float 
  8515 ;;  R               3   54[BANK0 ] float 
  8516 ;; Return value:  Size  Location     Type
  8517 ;;                  2   52[BANK0 ] int 
  8518 ;; Registers used:
  8519 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8520 ;; Tracked objects:
  8521 ;;		On entry : 0/0
  8522 ;;		On exit  : 0/0
  8523 ;;		Unchanged: 0/0
  8524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8525 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8526 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8527 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8528 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8529 ;;Total ram usage:       11 bytes
  8530 ;; Hardware stack levels used:    1
  8531 ;; Hardware stack levels required when called:    4
  8532 ;; This function calls:
  8533 ;;		___awtoft
  8534 ;;		___ftadd
  8535 ;;		___ftdiv
  8536 ;;		___ftmul
  8537 ;;		___ftsub
  8538 ;;		___fttol
  8539 ;;		_log
  8540 ;; This function is called by:
  8541 ;;		_main
  8542 ;; This function uses a non-reentrant model
  8543 ;;
  8544                           
  8545                           
  8546                           ;psect for function _tempCalc
  8547  0A13                     _tempCalc:	
  8548                           
  8549                           ;tempCalc.c: 6: float R, steinhart;
  8550                           ;tempCalc.c: 7: R=10030/(1023/(float)analogValue-1);
  8551                           
  8552                           ;incstack = 0
  8553                           ; Regs used in _tempCalc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8554  0A13  3000               	movlw	0
  8555  0A14  0020               	movlb	0	; select bank0
  8556  0A15  00B7               	movwf	___ftadd@f1
  8557  0A16  3080               	movlw	128
  8558  0A17  00B8               	movwf	___ftadd@f1+1
  8559  0A18  30BF               	movlw	191
  8560  0A19  00B9               	movwf	___ftadd@f1+2
  8561  0A1A  0855               	movf	tempCalc@analogValue+1,w
  8562  0A1B  00A5               	movwf	___awtoft@c+1
  8563  0A1C  0854               	movf	tempCalc@analogValue,w
  8564  0A1D  00A4               	movwf	___awtoft@c
  8565  0A1E  3191  2140  318A   	fcall	___awtoft
  8566  0A21  0020               	movlb	0	; select bank0
  8567  0A22  0824               	movf	?___awtoft,w
  8568  0A23  00A7               	movwf	___ftdiv@f2
  8569  0A24  0825               	movf	?___awtoft+1,w
  8570  0A25  00A8               	movwf	___ftdiv@f2+1
  8571  0A26  0826               	movf	?___awtoft+2,w
  8572  0A27  00A9               	movwf	___ftdiv@f2+2
  8573  0A28  30C0               	movlw	192
  8574  0A29  00AA               	movwf	___ftdiv@f1
  8575  0A2A  307F               	movlw	127
  8576  0A2B  00AB               	movwf	___ftdiv@f1+1
  8577  0A2C  3044               	movlw	68
  8578  0A2D  00AC               	movwf	___ftdiv@f1+2
  8579  0A2E  3196  26A7  318A   	fcall	___ftdiv
  8580  0A31  0020               	movlb	0	; select bank0
  8581  0A32  0827               	movf	?___ftdiv,w
  8582  0A33  00BA               	movwf	___ftadd@f2
  8583  0A34  0828               	movf	?___ftdiv+1,w
  8584  0A35  00BB               	movwf	___ftadd@f2+1
  8585  0A36  0829               	movf	?___ftdiv+2,w
  8586  0A37  00BC               	movwf	___ftadd@f2+2
  8587  0A38  318A  22FA  318A   	fcall	___ftadd
  8588  0A3B  0020               	movlb	0	; select bank0
  8589  0A3C  0837               	movf	?___ftadd,w
  8590  0A3D  00D9               	movwf	_tempCalc$1306
  8591  0A3E  0838               	movf	?___ftadd+1,w
  8592  0A3F  00DA               	movwf	_tempCalc$1306+1
  8593  0A40  0839               	movf	?___ftadd+2,w
  8594  0A41  00DB               	movwf	_tempCalc$1306+2
  8595                           
  8596                           ;tempCalc.c: 6: float R, steinhart;
  8597                           ;tempCalc.c: 7: R=10030/(1023/(float)analogValue-1);
  8598  0A42  0859               	movf	_tempCalc$1306,w
  8599  0A43  00A7               	movwf	___ftdiv@f2
  8600  0A44  085A               	movf	_tempCalc$1306+1,w
  8601  0A45  00A8               	movwf	___ftdiv@f2+1
  8602  0A46  085B               	movf	_tempCalc$1306+2,w
  8603  0A47  00A9               	movwf	___ftdiv@f2+2
  8604  0A48  30B8               	movlw	184
  8605  0A49  00AA               	movwf	___ftdiv@f1
  8606  0A4A  301C               	movlw	28
  8607  0A4B  00AB               	movwf	___ftdiv@f1+1
  8608  0A4C  3046               	movlw	70
  8609  0A4D  00AC               	movwf	___ftdiv@f1+2
  8610  0A4E  3196  26A7  318A   	fcall	___ftdiv
  8611  0A51  0020               	movlb	0	; select bank0
  8612  0A52  0827               	movf	?___ftdiv,w
  8613  0A53  00D6               	movwf	tempCalc@R
  8614  0A54  0828               	movf	?___ftdiv+1,w
  8615  0A55  00D7               	movwf	tempCalc@R+1
  8616  0A56  0829               	movf	?___ftdiv+2,w
  8617  0A57  00D8               	movwf	tempCalc@R+2
  8618                           
  8619                           ;tempCalc.c: 8: steinhart=R/10010;
  8620  0A58  3068               	movlw	104
  8621  0A59  00A7               	movwf	___ftdiv@f2
  8622  0A5A  301C               	movlw	28
  8623  0A5B  00A8               	movwf	___ftdiv@f2+1
  8624  0A5C  3046               	movlw	70
  8625  0A5D  00A9               	movwf	___ftdiv@f2+2
  8626  0A5E  0856               	movf	tempCalc@R,w
  8627  0A5F  00AA               	movwf	___ftdiv@f1
  8628  0A60  0857               	movf	tempCalc@R+1,w
  8629  0A61  00AB               	movwf	___ftdiv@f1+1
  8630  0A62  0858               	movf	tempCalc@R+2,w
  8631  0A63  00AC               	movwf	___ftdiv@f1+2
  8632  0A64  3196  26A7  318A   	fcall	___ftdiv
  8633  0A67  0020               	movlb	0	; select bank0
  8634  0A68  0827               	movf	?___ftdiv,w
  8635  0A69  00DC               	movwf	tempCalc@steinhart
  8636  0A6A  0828               	movf	?___ftdiv+1,w
  8637  0A6B  00DD               	movwf	tempCalc@steinhart+1
  8638  0A6C  0829               	movf	?___ftdiv+2,w
  8639  0A6D  00DE               	movwf	tempCalc@steinhart+2
  8640                           
  8641                           ;tempCalc.c: 9: steinhart=log(steinhart);
  8642  0A6E  085C               	movf	tempCalc@steinhart,w
  8643  0A6F  00CE               	movwf	log@x
  8644  0A70  085D               	movf	tempCalc@steinhart+1,w
  8645  0A71  00CF               	movwf	log@x+1
  8646  0A72  085E               	movf	tempCalc@steinhart+2,w
  8647  0A73  00D0               	movwf	log@x+2
  8648  0A74  3197  2750  318A   	fcall	_log
  8649  0A77  0020               	movlb	0	; select bank0
  8650  0A78  084E               	movf	?_log,w
  8651  0A79  00DC               	movwf	tempCalc@steinhart
  8652  0A7A  084F               	movf	?_log+1,w
  8653  0A7B  00DD               	movwf	tempCalc@steinhart+1
  8654  0A7C  0850               	movf	?_log+2,w
  8655  0A7D  00DE               	movwf	tempCalc@steinhart+2
  8656                           
  8657                           ;tempCalc.c: 10: steinhart/=3795.3;
  8658  0A7E  3035               	movlw	53
  8659  0A7F  00A7               	movwf	___ftdiv@f2
  8660  0A80  306D               	movlw	109
  8661  0A81  00A8               	movwf	___ftdiv@f2+1
  8662  0A82  3045               	movlw	69
  8663  0A83  00A9               	movwf	___ftdiv@f2+2
  8664  0A84  085C               	movf	tempCalc@steinhart,w
  8665  0A85  00AA               	movwf	___ftdiv@f1
  8666  0A86  085D               	movf	tempCalc@steinhart+1,w
  8667  0A87  00AB               	movwf	___ftdiv@f1+1
  8668  0A88  085E               	movf	tempCalc@steinhart+2,w
  8669  0A89  00AC               	movwf	___ftdiv@f1+2
  8670  0A8A  3196  26A7  318A   	fcall	___ftdiv
  8671  0A8D  0020               	movlb	0	; select bank0
  8672  0A8E  0827               	movf	?___ftdiv,w
  8673  0A8F  00DC               	movwf	tempCalc@steinhart
  8674  0A90  0828               	movf	?___ftdiv+1,w
  8675  0A91  00DD               	movwf	tempCalc@steinhart+1
  8676  0A92  0829               	movf	?___ftdiv+2,w
  8677  0A93  00DE               	movwf	tempCalc@steinhart+2
  8678                           
  8679                           ;tempCalc.c: 11: steinhart+=1.0/(25+273.15);
  8680  0A94  30CF               	movlw	207
  8681  0A95  00B7               	movwf	___ftadd@f1
  8682  0A96  305B               	movlw	91
  8683  0A97  00B8               	movwf	___ftadd@f1+1
  8684  0A98  303B               	movlw	59
  8685  0A99  00B9               	movwf	___ftadd@f1+2
  8686  0A9A  085C               	movf	tempCalc@steinhart,w
  8687  0A9B  00BA               	movwf	___ftadd@f2
  8688  0A9C  085D               	movf	tempCalc@steinhart+1,w
  8689  0A9D  00BB               	movwf	___ftadd@f2+1
  8690  0A9E  085E               	movf	tempCalc@steinhart+2,w
  8691  0A9F  00BC               	movwf	___ftadd@f2+2
  8692  0AA0  318A  22FA  318A   	fcall	___ftadd
  8693  0AA3  0020               	movlb	0	; select bank0
  8694  0AA4  0837               	movf	?___ftadd,w
  8695  0AA5  00DC               	movwf	tempCalc@steinhart
  8696  0AA6  0838               	movf	?___ftadd+1,w
  8697  0AA7  00DD               	movwf	tempCalc@steinhart+1
  8698  0AA8  0839               	movf	?___ftadd+2,w
  8699  0AA9  00DE               	movwf	tempCalc@steinhart+2
  8700                           
  8701                           ;tempCalc.c: 12: steinhart=1.0/steinhart;
  8702  0AAA  085C               	movf	tempCalc@steinhart,w
  8703  0AAB  00A7               	movwf	___ftdiv@f2
  8704  0AAC  085D               	movf	tempCalc@steinhart+1,w
  8705  0AAD  00A8               	movwf	___ftdiv@f2+1
  8706  0AAE  085E               	movf	tempCalc@steinhart+2,w
  8707  0AAF  00A9               	movwf	___ftdiv@f2+2
  8708  0AB0  3000               	movlw	0
  8709  0AB1  00AA               	movwf	___ftdiv@f1
  8710  0AB2  3080               	movlw	128
  8711  0AB3  00AB               	movwf	___ftdiv@f1+1
  8712  0AB4  303F               	movlw	63
  8713  0AB5  00AC               	movwf	___ftdiv@f1+2
  8714  0AB6  3196  26A7  318A   	fcall	___ftdiv
  8715  0AB9  0020               	movlb	0	; select bank0
  8716  0ABA  0827               	movf	?___ftdiv,w
  8717  0ABB  00DC               	movwf	tempCalc@steinhart
  8718  0ABC  0828               	movf	?___ftdiv+1,w
  8719  0ABD  00DD               	movwf	tempCalc@steinhart+1
  8720  0ABE  0829               	movf	?___ftdiv+2,w
  8721  0ABF  00DE               	movwf	tempCalc@steinhart+2
  8722                           
  8723                           ;tempCalc.c: 13: steinhart-=273;
  8724  0AC0  3080               	movlw	128
  8725  0AC1  00C4               	movwf	___ftsub@f2
  8726  0AC2  3088               	movlw	136
  8727  0AC3  00C5               	movwf	___ftsub@f2+1
  8728  0AC4  3043               	movlw	67
  8729  0AC5  00C6               	movwf	___ftsub@f2+2
  8730  0AC6  085C               	movf	tempCalc@steinhart,w
  8731  0AC7  00C7               	movwf	___ftsub@f1
  8732  0AC8  085D               	movf	tempCalc@steinhart+1,w
  8733  0AC9  00C8               	movwf	___ftsub@f1+1
  8734  0ACA  085E               	movf	tempCalc@steinhart+2,w
  8735  0ACB  00C9               	movwf	___ftsub@f1+2
  8736  0ACC  319F  27C3  318A   	fcall	___ftsub
  8737  0ACF  0020               	movlb	0	; select bank0
  8738  0AD0  0844               	movf	?___ftsub,w
  8739  0AD1  00DC               	movwf	tempCalc@steinhart
  8740  0AD2  0845               	movf	?___ftsub+1,w
  8741  0AD3  00DD               	movwf	tempCalc@steinhart+1
  8742  0AD4  0846               	movf	?___ftsub+2,w
  8743  0AD5  00DE               	movwf	tempCalc@steinhart+2
  8744                           
  8745                           ;tempCalc.c: 15: steinhart*=10;
  8746  0AD6  3000               	movlw	0
  8747  0AD7  00A7               	movwf	___ftmul@f1
  8748  0AD8  3020               	movlw	32
  8749  0AD9  00A8               	movwf	___ftmul@f1+1
  8750  0ADA  3041               	movlw	65
  8751  0ADB  00A9               	movwf	___ftmul@f1+2
  8752  0ADC  085C               	movf	tempCalc@steinhart,w
  8753  0ADD  00AA               	movwf	___ftmul@f2
  8754  0ADE  085D               	movf	tempCalc@steinhart+1,w
  8755  0ADF  00AB               	movwf	___ftmul@f2+1
  8756  0AE0  085E               	movf	tempCalc@steinhart+2,w
  8757  0AE1  00AC               	movwf	___ftmul@f2+2
  8758  0AE2  3188  20A6  318A   	fcall	___ftmul
  8759  0AE5  0020               	movlb	0	; select bank0
  8760  0AE6  0827               	movf	?___ftmul,w
  8761  0AE7  00DC               	movwf	tempCalc@steinhart
  8762  0AE8  0828               	movf	?___ftmul+1,w
  8763  0AE9  00DD               	movwf	tempCalc@steinhart+1
  8764  0AEA  0829               	movf	?___ftmul+2,w
  8765  0AEB  00DE               	movwf	tempCalc@steinhart+2
  8766                           
  8767                           ;tempCalc.c: 18: return (int16_t)steinhart;
  8768  0AEC  085C               	movf	tempCalc@steinhart,w
  8769  0AED  00B7               	movwf	___fttol@f1
  8770  0AEE  085D               	movf	tempCalc@steinhart+1,w
  8771  0AEF  00B8               	movwf	___fttol@f1+1
  8772  0AF0  085E               	movf	tempCalc@steinhart+2,w
  8773  0AF1  00B9               	movwf	___fttol@f1+2
  8774  0AF2  3188  201F         	fcall	___fttol
  8775  0AF4  0020               	movlb	0	; select bank0
  8776  0AF5  0838               	movf	?___fttol+1,w
  8777  0AF6  00D5               	movwf	?_tempCalc+1
  8778  0AF7  0837               	movf	?___fttol,w
  8779  0AF8  00D4               	movwf	?_tempCalc
  8780  0AF9  0008               	return
  8781  0AFA                     __end_of_tempCalc:	
  8782                           
  8783                           	psect	text2
  8784  1750                     __ptext2:	
  8785 ;; *************** function _log *****************
  8786 ;; Defined at:
  8787 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\log.c"
  8788 ;; Parameters:    Size  Location     Type
  8789 ;;  x               3   46[BANK0 ] int 
  8790 ;; Auto vars:     Size  Location     Type
  8791 ;;  exponent        2   50[BANK0 ] int 
  8792 ;; Return value:  Size  Location     Type
  8793 ;;                  3   46[BANK0 ] int 
  8794 ;; Registers used:
  8795 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8796 ;; Tracked objects:
  8797 ;;		On entry : 0/0
  8798 ;;		On exit  : 0/0
  8799 ;;		Unchanged: 0/0
  8800 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8801 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8802 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8803 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8804 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8805 ;;Total ram usage:        6 bytes
  8806 ;; Hardware stack levels used:    1
  8807 ;; Hardware stack levels required when called:    3
  8808 ;; This function calls:
  8809 ;;		___awtoft
  8810 ;;		___ftadd
  8811 ;;		___ftge
  8812 ;;		___ftmul
  8813 ;;		_eval_poly
  8814 ;;		_frexp
  8815 ;; This function is called by:
  8816 ;;		_tempCalc
  8817 ;; This function uses a non-reentrant model
  8818 ;;
  8819                           
  8820                           
  8821                           ;psect for function _log
  8822  1750                     _log:	
  8823                           
  8824                           ;incstack = 0
  8825                           ; Regs used in _log: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8826  1750  0020               	movlb	0	; select bank0
  8827  1751  084E               	movf	log@x,w
  8828  1752  00B7               	movwf	___ftge@ff1
  8829  1753  084F               	movf	log@x+1,w
  8830  1754  00B8               	movwf	___ftge@ff1+1
  8831  1755  0850               	movf	log@x+2,w
  8832  1756  00B9               	movwf	___ftge@ff1+2
  8833  1757  3000               	movlw	0
  8834  1758  00BA               	movwf	___ftge@ff2
  8835  1759  3000               	movlw	0
  8836  175A  00BB               	movwf	___ftge@ff2+1
  8837  175B  3000               	movlw	0
  8838  175C  00BC               	movwf	___ftge@ff2+2
  8839  175D  3192  22C1  3197   	fcall	___ftge
  8840  1760  1803               	btfsc	3,0
  8841  1761  2F6F               	goto	l2778
  8842  1762  3021               	movlw	33
  8843  1763  0021               	movlb	1	; select bank1
  8844  1764  00C8               	movwf	_errno^(0+128)
  8845  1765  3000               	movlw	0
  8846  1766  00C9               	movwf	(_errno^(0+128)+1)
  8847  1767  3000               	movlw	0
  8848  1768  0020               	movlb	0	; select bank0
  8849  1769  00CE               	movwf	?_log
  8850  176A  3000               	movlw	0
  8851  176B  00CF               	movwf	?_log+1
  8852  176C  3000               	movlw	0
  8853  176D  00D0               	movwf	?_log+2
  8854  176E  0008               	return
  8855  176F                     l2778:	
  8856  176F  0020               	movlb	0	; select bank0
  8857  1770  0850               	movf	log@x+2,w
  8858  1771  044F               	iorwf	log@x+1,w
  8859  1772  044E               	iorwf	log@x,w
  8860  1773  1D03               	skipz
  8861  1774  2F82               	goto	l2784
  8862  1775  3022               	movlw	34
  8863  1776  0021               	movlb	1	; select bank1
  8864  1777  00C8               	movwf	_errno^(0+128)
  8865  1778  3000               	movlw	0
  8866  1779  00C9               	movwf	(_errno^(0+128)+1)
  8867  177A  3000               	movlw	0
  8868  177B  0020               	movlb	0	; select bank0
  8869  177C  00CE               	movwf	?_log
  8870  177D  3000               	movlw	0
  8871  177E  00CF               	movwf	?_log+1
  8872  177F  3000               	movlw	0
  8873  1780  00D0               	movwf	?_log+2
  8874  1781  0008               	return
  8875  1782                     l2784:	
  8876  1782  3000               	movlw	0
  8877  1783  00B7               	movwf	___ftadd@f1
  8878  1784  3080               	movlw	128
  8879  1785  00B8               	movwf	___ftadd@f1+1
  8880  1786  30BF               	movlw	191
  8881  1787  00B9               	movwf	___ftadd@f1+2
  8882  1788  3000               	movlw	0
  8883  1789  00A7               	movwf	___ftmul@f1
  8884  178A  3000               	movlw	0
  8885  178B  00A8               	movwf	___ftmul@f1+1
  8886  178C  3040               	movlw	64
  8887  178D  00A9               	movwf	___ftmul@f1+2
  8888  178E  3052               	movlw	(low (log@exponent| 0))& (0+255)
  8889  178F  00D1               	movwf	??_log
  8890  1790  0851               	movf	??_log,w
  8891  1791  00F3               	movwf	frexp@eptr
  8892  1792  084E               	movf	log@x,w
  8893  1793  00F0               	movwf	frexp@value
  8894  1794  084F               	movf	log@x+1,w
  8895  1795  00F1               	movwf	frexp@value+1
  8896  1796  0850               	movf	log@x+2,w
  8897  1797  00F2               	movwf	frexp@value+2
  8898  1798  3192  2286  3197   	fcall	_frexp
  8899  179B  0870               	movf	?_frexp,w
  8900  179C  0020               	movlb	0	; select bank0
  8901  179D  00AA               	movwf	___ftmul@f2
  8902  179E  0871               	movf	?_frexp+1,w
  8903  179F  00AB               	movwf	___ftmul@f2+1
  8904  17A0  0872               	movf	?_frexp+2,w
  8905  17A1  00AC               	movwf	___ftmul@f2+2
  8906  17A2  3188  20A6  3197   	fcall	___ftmul
  8907  17A5  0020               	movlb	0	; select bank0
  8908  17A6  0827               	movf	?___ftmul,w
  8909  17A7  00BA               	movwf	___ftadd@f2
  8910  17A8  0828               	movf	?___ftmul+1,w
  8911  17A9  00BB               	movwf	___ftadd@f2+1
  8912  17AA  0829               	movf	?___ftmul+2,w
  8913  17AB  00BC               	movwf	___ftadd@f2+2
  8914  17AC  318A  22FA  3197   	fcall	___ftadd
  8915  17AF  0020               	movlb	0	; select bank0
  8916  17B0  0837               	movf	?___ftadd,w
  8917  17B1  00CE               	movwf	log@x
  8918  17B2  0838               	movf	?___ftadd+1,w
  8919  17B3  00CF               	movwf	log@x+1
  8920  17B4  0839               	movf	?___ftadd+2,w
  8921  17B5  00D0               	movwf	log@x+2
  8922  17B6  30FF               	movlw	255
  8923  17B7  07D2               	addwf	log@exponent,f
  8924  17B8  30FF               	movlw	255
  8925  17B9  3DD3               	addwfc	log@exponent+1,f
  8926  17BA  084E               	movf	log@x,w
  8927  17BB  00C4               	movwf	eval_poly@x
  8928  17BC  084F               	movf	log@x+1,w
  8929  17BD  00C5               	movwf	eval_poly@x+1
  8930  17BE  0850               	movf	log@x+2,w
  8931  17BF  00C6               	movwf	eval_poly@x+2
  8932  17C0  3000               	movlw	low (log@coeff| (0+32768))
  8933  17C1  00C7               	movwf	eval_poly@d
  8934  17C2  3098               	movlw	high (log@coeff| (0+32768))
  8935  17C3  00C8               	movwf	eval_poly@d+1
  8936  17C4  3008               	movlw	8
  8937  17C5  00C9               	movwf	eval_poly@n
  8938  17C6  3000               	movlw	0
  8939  17C7  00CA               	movwf	eval_poly@n+1
  8940  17C8  3194  247B  3197   	fcall	_eval_poly
  8941  17CB  0020               	movlb	0	; select bank0
  8942  17CC  0844               	movf	?_eval_poly,w
  8943  17CD  00CE               	movwf	log@x
  8944  17CE  0845               	movf	?_eval_poly+1,w
  8945  17CF  00CF               	movwf	log@x+1
  8946  17D0  0846               	movf	?_eval_poly+2,w
  8947  17D1  00D0               	movwf	log@x+2
  8948  17D2  084E               	movf	log@x,w
  8949  17D3  00B7               	movwf	___ftadd@f1
  8950  17D4  084F               	movf	log@x+1,w
  8951  17D5  00B8               	movwf	___ftadd@f1+1
  8952  17D6  0850               	movf	log@x+2,w
  8953  17D7  00B9               	movwf	___ftadd@f1+2
  8954  17D8  3072               	movlw	114
  8955  17D9  00A7               	movwf	___ftmul@f1
  8956  17DA  3031               	movlw	49
  8957  17DB  00A8               	movwf	___ftmul@f1+1
  8958  17DC  303F               	movlw	63
  8959  17DD  00A9               	movwf	___ftmul@f1+2
  8960  17DE  0853               	movf	log@exponent+1,w
  8961  17DF  00A5               	movwf	___awtoft@c+1
  8962  17E0  0852               	movf	log@exponent,w
  8963  17E1  00A4               	movwf	___awtoft@c
  8964  17E2  3191  2140  3197   	fcall	___awtoft
  8965  17E5  0020               	movlb	0	; select bank0
  8966  17E6  0824               	movf	?___awtoft,w
  8967  17E7  00AA               	movwf	___ftmul@f2
  8968  17E8  0825               	movf	?___awtoft+1,w
  8969  17E9  00AB               	movwf	___ftmul@f2+1
  8970  17EA  0826               	movf	?___awtoft+2,w
  8971  17EB  00AC               	movwf	___ftmul@f2+2
  8972  17EC  3188  20A6  3197   	fcall	___ftmul
  8973  17EF  0020               	movlb	0	; select bank0
  8974  17F0  0827               	movf	?___ftmul,w
  8975  17F1  00BA               	movwf	___ftadd@f2
  8976  17F2  0828               	movf	?___ftmul+1,w
  8977  17F3  00BB               	movwf	___ftadd@f2+1
  8978  17F4  0829               	movf	?___ftmul+2,w
  8979  17F5  00BC               	movwf	___ftadd@f2+2
  8980  17F6  318A  22FA         	fcall	___ftadd
  8981  17F8  0020               	movlb	0	; select bank0
  8982  17F9  0837               	movf	?___ftadd,w
  8983  17FA  00CE               	movwf	?_log
  8984  17FB  0838               	movf	?___ftadd+1,w
  8985  17FC  00CF               	movwf	?_log+1
  8986  17FD  0839               	movf	?___ftadd+2,w
  8987  17FE  00D0               	movwf	?_log+2
  8988  17FF  0008               	return
  8989  1800                     __end_of_log:	
  8990                           
  8991                           	psect	text3
  8992  1286                     __ptext3:	
  8993 ;; *************** function _frexp *****************
  8994 ;; Defined at:
  8995 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
  8996 ;; Parameters:    Size  Location     Type
  8997 ;;  value           3    0[COMMON] int 
  8998 ;;  eptr            1    3[COMMON] PTR int 
  8999 ;;		 -> log@exponent(2), 
  9000 ;; Auto vars:     Size  Location     Type
  9001 ;;		None
  9002 ;; Return value:  Size  Location     Type
  9003 ;;                  3    0[COMMON] PTR int 
  9004 ;; Registers used:
  9005 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9006 ;; Tracked objects:
  9007 ;;		On entry : 0/0
  9008 ;;		On exit  : 0/0
  9009 ;;		Unchanged: 0/0
  9010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9011 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9012 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9013 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9014 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9015 ;;Total ram usage:        6 bytes
  9016 ;; Hardware stack levels used:    1
  9017 ;; This function calls:
  9018 ;;		Nothing
  9019 ;; This function is called by:
  9020 ;;		_log
  9021 ;; This function uses a non-reentrant model
  9022 ;;
  9023                           
  9024                           
  9025                           ;psect for function _frexp
  9026  1286                     _frexp:	
  9027                           
  9028                           ;incstack = 0
  9029                           ; Regs used in _frexp: [wreg+fsr1l+fsr1h+status,2+status,0]
  9030  1286  0872               	movf	frexp@value+2,w
  9031  1287  0471               	iorwf	frexp@value+1,w
  9032  1288  0470               	iorwf	frexp@value,w
  9033  1289  1D03               	skipz
  9034  128A  2A98               	goto	l2574
  9035  128B  0873               	movf	frexp@eptr,w
  9036  128C  0086               	movwf	6
  9037  128D  0187               	clrf	7
  9038  128E  3000               	movlw	0
  9039  128F  3FC0               	movwi [0]fsr1
  9040  1290  3FC1               	movwi [1]fsr1
  9041  1291  3000               	movlw	0
  9042  1292  00F0               	movwf	?_frexp
  9043  1293  3000               	movlw	0
  9044  1294  00F1               	movwf	?_frexp+1
  9045  1295  3000               	movlw	0
  9046  1296  00F2               	movwf	?_frexp+2
  9047  1297  0008               	return
  9048  1298                     l2574:	
  9049  1298  0872               	movf	frexp@value+2,w
  9050  1299  397F               	andlw	127
  9051  129A  00F4               	movwf	??_frexp
  9052  129B  01F5               	clrf	??_frexp+1
  9053  129C  35F4               	lslf	??_frexp,f
  9054  129D  0DF5               	rlf	??_frexp+1,f
  9055  129E  0873               	movf	frexp@eptr,w
  9056  129F  0086               	movwf	6
  9057  12A0  0187               	clrf	7
  9058  12A1  0874               	movf	??_frexp,w
  9059  12A2  3FC0               	movwi [0]fsr1
  9060  12A3  0875               	movf	??_frexp+1,w
  9061  12A4  3FC1               	movwi [1]fsr1
  9062  12A5  0D71               	rlf	frexp@value+1,w
  9063  12A6  0D71               	rlf	frexp@value+1,w
  9064  12A7  3901               	andlw	1
  9065  12A8  00F4               	movwf	??_frexp
  9066  12A9  01F5               	clrf	??_frexp+1
  9067  12AA  0873               	movf	frexp@eptr,w
  9068  12AB  0086               	movwf	6
  9069  12AC  0187               	clrf	7
  9070  12AD  0874               	movf	??_frexp,w
  9071  12AE  0481               	iorwf	1,f
  9072  12AF  3141               	addfsr 1,1
  9073  12B0  0875               	movf	??_frexp+1,w
  9074  12B1  0481               	iorwf	1,f
  9075  12B2  0873               	movf	frexp@eptr,w
  9076  12B3  0086               	movwf	6
  9077  12B4  0187               	clrf	7
  9078  12B5  3082               	movlw	130
  9079  12B6  0781               	addwf	1,f
  9080  12B7  3141               	addfsr 1,1
  9081  12B8  30FF               	movlw	255
  9082  12B9  3D81               	addwfc	1,f
  9083  12BA  317F               	addfsr 1,-1
  9084  12BB  0872               	movf	frexp@value+2,w
  9085  12BC  3980               	andlw	-128
  9086  12BD  383F               	iorlw	63
  9087  12BE  00F2               	movwf	frexp@value+2
  9088  12BF  13F1               	bcf	frexp@value+1,7
  9089  12C0  0008               	return
  9090  12C1                     __end_of_frexp:	
  9091                           
  9092                           	psect	text4
  9093  147B                     __ptext4:	
  9094 ;; *************** function _eval_poly *****************
  9095 ;; Defined at:
  9096 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\evalpoly.c"
  9097 ;; Parameters:    Size  Location     Type
  9098 ;;  x               3   36[BANK0 ] PTR int 
  9099 ;;  d               2   39[BANK0 ] PTR const 
  9100 ;;		 -> log@coeff(27), 
  9101 ;;  n               2   41[BANK0 ] int 
  9102 ;; Auto vars:     Size  Location     Type
  9103 ;;  res             3   43[BANK0 ] int 
  9104 ;; Return value:  Size  Location     Type
  9105 ;;                  3   36[BANK0 ] int 
  9106 ;; Registers used:
  9107 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9108 ;; Tracked objects:
  9109 ;;		On entry : 0/0
  9110 ;;		On exit  : 0/0
  9111 ;;		Unchanged: 0/0
  9112 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9113 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9114 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9115 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9116 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9117 ;;Total ram usage:       10 bytes
  9118 ;; Hardware stack levels used:    1
  9119 ;; Hardware stack levels required when called:    2
  9120 ;; This function calls:
  9121 ;;		___ftadd
  9122 ;;		___ftmul
  9123 ;;		___wmul
  9124 ;; This function is called by:
  9125 ;;		_log
  9126 ;; This function uses a non-reentrant model
  9127 ;;
  9128                           
  9129                           
  9130                           ;psect for function _eval_poly
  9131  147B                     _eval_poly:	
  9132                           
  9133                           ;incstack = 0
  9134                           ; Regs used in _eval_poly: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9135  147B  0020               	movlb	0	; select bank0
  9136  147C  084A               	movf	eval_poly@n+1,w
  9137  147D  00F1               	movwf	___wmul@multiplier+1
  9138  147E  0849               	movf	eval_poly@n,w
  9139  147F  00F0               	movwf	___wmul@multiplier
  9140  1480  3003               	movlw	3
  9141  1481  00F2               	movwf	___wmul@multiplicand
  9142  1482  3000               	movlw	0
  9143  1483  00F3               	movwf	___wmul@multiplicand+1
  9144  1484  319F  27A8  3194   	fcall	___wmul
  9145  1487  0020               	movlb	0	; select bank0
  9146  1488  0847               	movf	eval_poly@d,w
  9147  1489  0770               	addwf	?___wmul,w
  9148  148A  0084               	movwf	4
  9149  148B  0848               	movf	eval_poly@d+1,w
  9150  148C  3D71               	addwfc	?___wmul+1,w
  9151  148D  0085               	movwf	5
  9152  148E  3F00               	moviw [0]fsr0
  9153  148F  00CB               	movwf	eval_poly@res
  9154  1490  3F01               	moviw [1]fsr0
  9155  1491  00CC               	movwf	eval_poly@res+1
  9156  1492  3F02               	moviw [2]fsr0
  9157  1493                     L6:	
  9158  1493  00CD               	movwf	eval_poly@res+2
  9159  1494  0849               	movf	eval_poly@n,w
  9160  1495  044A               	iorwf	eval_poly@n+1,w
  9161  1496  1903               	btfsc	3,2
  9162  1497  2CD4               	goto	l2592
  9163  1498  30FF               	movlw	255
  9164  1499  07C9               	addwf	eval_poly@n,f
  9165  149A  30FF               	movlw	255
  9166  149B  3DCA               	addwfc	eval_poly@n+1,f
  9167  149C  084A               	movf	eval_poly@n+1,w
  9168  149D  00F1               	movwf	___wmul@multiplier+1
  9169  149E  0849               	movf	eval_poly@n,w
  9170  149F  00F0               	movwf	___wmul@multiplier
  9171  14A0  3003               	movlw	3
  9172  14A1  00F2               	movwf	___wmul@multiplicand
  9173  14A2  3000               	movlw	0
  9174  14A3  00F3               	movwf	___wmul@multiplicand+1
  9175  14A4  319F  27A8  3194   	fcall	___wmul
  9176  14A7  0020               	movlb	0	; select bank0
  9177  14A8  0847               	movf	eval_poly@d,w
  9178  14A9  0770               	addwf	?___wmul,w
  9179  14AA  0084               	movwf	4
  9180  14AB  0848               	movf	eval_poly@d+1,w
  9181  14AC  3D71               	addwfc	?___wmul+1,w
  9182  14AD  0085               	movwf	5
  9183  14AE  3F00               	moviw [0]fsr0
  9184  14AF  00B7               	movwf	___ftadd@f1
  9185  14B0  3F01               	moviw [1]fsr0
  9186  14B1  00B8               	movwf	___ftadd@f1+1
  9187  14B2  3F02               	moviw [2]fsr0
  9188  14B3  00B9               	movwf	___ftadd@f1+2
  9189  14B4  084B               	movf	eval_poly@res,w
  9190  14B5  00A7               	movwf	___ftmul@f1
  9191  14B6  084C               	movf	eval_poly@res+1,w
  9192  14B7  00A8               	movwf	___ftmul@f1+1
  9193  14B8  084D               	movf	eval_poly@res+2,w
  9194  14B9  00A9               	movwf	___ftmul@f1+2
  9195  14BA  0844               	movf	eval_poly@x,w
  9196  14BB  00AA               	movwf	___ftmul@f2
  9197  14BC  0845               	movf	eval_poly@x+1,w
  9198  14BD  00AB               	movwf	___ftmul@f2+1
  9199  14BE  0846               	movf	eval_poly@x+2,w
  9200  14BF  00AC               	movwf	___ftmul@f2+2
  9201  14C0  3188  20A6  3194   	fcall	___ftmul
  9202  14C3  0020               	movlb	0	; select bank0
  9203  14C4  0827               	movf	?___ftmul,w
  9204  14C5  00BA               	movwf	___ftadd@f2
  9205  14C6  0828               	movf	?___ftmul+1,w
  9206  14C7  00BB               	movwf	___ftadd@f2+1
  9207  14C8  0829               	movf	?___ftmul+2,w
  9208  14C9  00BC               	movwf	___ftadd@f2+2
  9209  14CA  318A  22FA  3194   	fcall	___ftadd
  9210  14CD  0020               	movlb	0	; select bank0
  9211  14CE  0837               	movf	?___ftadd,w
  9212  14CF  00CB               	movwf	eval_poly@res
  9213  14D0  0838               	movf	?___ftadd+1,w
  9214  14D1  00CC               	movwf	eval_poly@res+1
  9215  14D2  0839               	movf	?___ftadd+2,w
  9216  14D3  2C93               	goto	L6
  9217  14D4                     l2592:	
  9218  14D4  084B               	movf	eval_poly@res,w
  9219  14D5  00C4               	movwf	?_eval_poly
  9220  14D6  084C               	movf	eval_poly@res+1,w
  9221  14D7  00C5               	movwf	?_eval_poly+1
  9222  14D8  084D               	movf	eval_poly@res+2,w
  9223  14D9  00C6               	movwf	?_eval_poly+2
  9224  14DA  0008               	return
  9225  14DB                     __end_of_eval_poly:	
  9226                           
  9227                           	psect	text5
  9228  12C1                     __ptext5:	
  9229 ;; *************** function ___ftge *****************
  9230 ;; Defined at:
  9231 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
  9232 ;; Parameters:    Size  Location     Type
  9233 ;;  ff1             3   23[BANK0 ] float 
  9234 ;;  ff2             3   26[BANK0 ] float 
  9235 ;; Auto vars:     Size  Location     Type
  9236 ;;		None
  9237 ;; Return value:  Size  Location     Type
  9238 ;;		None               void
  9239 ;; Registers used:
  9240 ;;		wreg, status,2, status,0
  9241 ;; Tracked objects:
  9242 ;;		On entry : 0/0
  9243 ;;		On exit  : 0/0
  9244 ;;		Unchanged: 0/0
  9245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9246 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9247 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9248 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9249 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9250 ;;Total ram usage:        9 bytes
  9251 ;; Hardware stack levels used:    1
  9252 ;; This function calls:
  9253 ;;		Nothing
  9254 ;; This function is called by:
  9255 ;;		_main
  9256 ;;		_log
  9257 ;; This function uses a non-reentrant model
  9258 ;;
  9259                           
  9260                           
  9261                           ;psect for function ___ftge
  9262  12C1                     ___ftge:	
  9263                           
  9264                           ;incstack = 0
  9265                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  9266  12C1  0020               	movlb	0	; select bank0
  9267  12C2  1FB9               	btfss	___ftge@ff1+2,7
  9268  12C3  2AD8               	goto	l2508
  9269  12C4  0937               	comf	___ftge@ff1,w
  9270  12C5  00BD               	movwf	??___ftge
  9271  12C6  0938               	comf	___ftge@ff1+1,w
  9272  12C7  00BE               	movwf	??___ftge+1
  9273  12C8  0939               	comf	___ftge@ff1+2,w
  9274  12C9  00BF               	movwf	??___ftge+2
  9275  12CA  0ABD               	incf	??___ftge,f
  9276  12CB  1903               	skipnz
  9277  12CC  0ABE               	incf	??___ftge+1,f
  9278  12CD  1903               	skipnz
  9279  12CE  0ABF               	incf	??___ftge+2,f
  9280  12CF  3000               	movlw	0
  9281  12D0  073D               	addwf	??___ftge,w
  9282  12D1  00B7               	movwf	___ftge@ff1
  9283  12D2  3000               	movlw	0
  9284  12D3  3D3E               	addwfc	??___ftge+1,w
  9285  12D4  00B8               	movwf	___ftge@ff1+1
  9286  12D5  3080               	movlw	128
  9287  12D6  3D3F               	addwfc	??___ftge+2,w
  9288  12D7  00B9               	movwf	___ftge@ff1+2
  9289  12D8                     l2508:	
  9290  12D8  1FBC               	btfss	___ftge@ff2+2,7
  9291  12D9  2AEE               	goto	l2512
  9292  12DA  093A               	comf	___ftge@ff2,w
  9293  12DB  00BD               	movwf	??___ftge
  9294  12DC  093B               	comf	___ftge@ff2+1,w
  9295  12DD  00BE               	movwf	??___ftge+1
  9296  12DE  093C               	comf	___ftge@ff2+2,w
  9297  12DF  00BF               	movwf	??___ftge+2
  9298  12E0  0ABD               	incf	??___ftge,f
  9299  12E1  1903               	skipnz
  9300  12E2  0ABE               	incf	??___ftge+1,f
  9301  12E3  1903               	skipnz
  9302  12E4  0ABF               	incf	??___ftge+2,f
  9303  12E5  3000               	movlw	0
  9304  12E6  073D               	addwf	??___ftge,w
  9305  12E7  00BA               	movwf	___ftge@ff2
  9306  12E8  3000               	movlw	0
  9307  12E9  3D3E               	addwfc	??___ftge+1,w
  9308  12EA  00BB               	movwf	___ftge@ff2+1
  9309  12EB  3080               	movlw	128
  9310  12EC  3D3F               	addwfc	??___ftge+2,w
  9311  12ED  00BC               	movwf	___ftge@ff2+2
  9312  12EE                     l2512:	
  9313  12EE  3080               	movlw	128
  9314  12EF  06B9               	xorwf	___ftge@ff1+2,f
  9315  12F0  3080               	movlw	128
  9316  12F1  06BC               	xorwf	___ftge@ff2+2,f
  9317  12F2  083C               	movf	___ftge@ff2+2,w
  9318  12F3  0239               	subwf	___ftge@ff1+2,w
  9319  12F4  1D03               	skipz
  9320  12F5  0008               	return
  9321  12F6  083B               	movf	___ftge@ff2+1,w
  9322  12F7  0238               	subwf	___ftge@ff1+1,w
  9323  12F8  1D03               	skipz
  9324  12F9  0008               	return
  9325  12FA  083A               	movf	___ftge@ff2,w
  9326  12FB  0237               	subwf	___ftge@ff1,w
  9327  12FC  0008               	return
  9328  12FD                     __end_of___ftge:	
  9329                           
  9330                           	psect	text6
  9331  1FC3                     __ptext6:	
  9332 ;; *************** function ___ftsub *****************
  9333 ;; Defined at:
  9334 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
  9335 ;; Parameters:    Size  Location     Type
  9336 ;;  f2              3   36[BANK0 ] float 
  9337 ;;  f1              3   39[BANK0 ] float 
  9338 ;; Auto vars:     Size  Location     Type
  9339 ;;		None
  9340 ;; Return value:  Size  Location     Type
  9341 ;;                  3   36[BANK0 ] float 
  9342 ;; Registers used:
  9343 ;;		wreg, status,2, status,0, pclath, cstack
  9344 ;; Tracked objects:
  9345 ;;		On entry : 0/0
  9346 ;;		On exit  : 0/0
  9347 ;;		Unchanged: 0/0
  9348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9349 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9350 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9351 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9352 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9353 ;;Total ram usage:        6 bytes
  9354 ;; Hardware stack levels used:    1
  9355 ;; Hardware stack levels required when called:    2
  9356 ;; This function calls:
  9357 ;;		___ftadd
  9358 ;; This function is called by:
  9359 ;;		_tempCalc
  9360 ;; This function uses a non-reentrant model
  9361 ;;
  9362                           
  9363                           
  9364                           ;psect for function ___ftsub
  9365  1FC3                     ___ftsub:	
  9366                           
  9367                           ;incstack = 0
  9368                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  9369  1FC3  0020               	movlb	0	; select bank0
  9370  1FC4  0846               	movf	___ftsub@f2+2,w
  9371  1FC5  0445               	iorwf	___ftsub@f2+1,w
  9372  1FC6  0444               	iorwf	___ftsub@f2,w
  9373  1FC7  1903               	skipnz
  9374  1FC8  2FCB               	goto	l2924
  9375  1FC9  3080               	movlw	128
  9376  1FCA  06C6               	xorwf	___ftsub@f2+2,f
  9377  1FCB                     l2924:	
  9378  1FCB  0847               	movf	___ftsub@f1,w
  9379  1FCC  00B7               	movwf	___ftadd@f1
  9380  1FCD  0848               	movf	___ftsub@f1+1,w
  9381  1FCE  00B8               	movwf	___ftadd@f1+1
  9382  1FCF  0849               	movf	___ftsub@f1+2,w
  9383  1FD0  00B9               	movwf	___ftadd@f1+2
  9384  1FD1  0844               	movf	___ftsub@f2,w
  9385  1FD2  00BA               	movwf	___ftadd@f2
  9386  1FD3  0845               	movf	___ftsub@f2+1,w
  9387  1FD4  00BB               	movwf	___ftadd@f2+1
  9388  1FD5  0846               	movf	___ftsub@f2+2,w
  9389  1FD6  00BC               	movwf	___ftadd@f2+2
  9390  1FD7  318A  22FA         	fcall	___ftadd
  9391  1FD9  0020               	movlb	0	; select bank0
  9392  1FDA  0837               	movf	?___ftadd,w
  9393  1FDB  00C4               	movwf	?___ftsub
  9394  1FDC  0838               	movf	?___ftadd+1,w
  9395  1FDD  00C5               	movwf	?___ftsub+1
  9396  1FDE  0839               	movf	?___ftadd+2,w
  9397  1FDF  00C6               	movwf	?___ftsub+2
  9398  1FE0  0008               	return
  9399  1FE1                     __end_of___ftsub:	
  9400                           
  9401                           	psect	text7
  9402  0AFA                     __ptext7:	
  9403 ;; *************** function ___ftadd *****************
  9404 ;; Defined at:
  9405 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
  9406 ;; Parameters:    Size  Location     Type
  9407 ;;  f1              3   23[BANK0 ] float 
  9408 ;;  f2              3   26[BANK0 ] float 
  9409 ;; Auto vars:     Size  Location     Type
  9410 ;;  exp1            1   35[BANK0 ] unsigned char 
  9411 ;;  exp2            1   34[BANK0 ] unsigned char 
  9412 ;;  sign            1   33[BANK0 ] unsigned char 
  9413 ;; Return value:  Size  Location     Type
  9414 ;;                  3   23[BANK0 ] float 
  9415 ;; Registers used:
  9416 ;;		wreg, status,2, status,0, pclath, cstack
  9417 ;; Tracked objects:
  9418 ;;		On entry : 0/0
  9419 ;;		On exit  : 0/0
  9420 ;;		Unchanged: 0/0
  9421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9422 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9423 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9424 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9425 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9426 ;;Total ram usage:       13 bytes
  9427 ;; Hardware stack levels used:    1
  9428 ;; Hardware stack levels required when called:    1
  9429 ;; This function calls:
  9430 ;;		___ftpack
  9431 ;; This function is called by:
  9432 ;;		_tempCalc
  9433 ;;		___ftsub
  9434 ;;		_log
  9435 ;;		_eval_poly
  9436 ;; This function uses a non-reentrant model
  9437 ;;
  9438                           
  9439                           
  9440                           ;psect for function ___ftadd
  9441  0AFA                     ___ftadd:	
  9442                           
  9443                           ;incstack = 0
  9444                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  9445  0AFA  0020               	movlb	0	; select bank0
  9446  0AFB  0837               	movf	___ftadd@f1,w
  9447  0AFC  00BD               	movwf	??___ftadd
  9448  0AFD  0838               	movf	___ftadd@f1+1,w
  9449  0AFE  00BE               	movwf	??___ftadd+1
  9450  0AFF  0839               	movf	___ftadd@f1+2,w
  9451  0B00  00BF               	movwf	??___ftadd+2
  9452  0B01  1003               	clrc
  9453  0B02  0D3E               	rlf	??___ftadd+1,w
  9454  0B03  0D3F               	rlf	??___ftadd+2,w
  9455  0B04  00C0               	movwf	??___ftadd+3
  9456  0B05  0840               	movf	??___ftadd+3,w
  9457  0B06  00C3               	movwf	___ftadd@exp1
  9458  0B07  083A               	movf	___ftadd@f2,w
  9459  0B08  00BD               	movwf	??___ftadd
  9460  0B09  083B               	movf	___ftadd@f2+1,w
  9461  0B0A  00BE               	movwf	??___ftadd+1
  9462  0B0B  083C               	movf	___ftadd@f2+2,w
  9463  0B0C  00BF               	movwf	??___ftadd+2
  9464  0B0D  1003               	clrc
  9465  0B0E  0D3E               	rlf	??___ftadd+1,w
  9466  0B0F  0D3F               	rlf	??___ftadd+2,w
  9467  0B10  00C0               	movwf	??___ftadd+3
  9468  0B11  0840               	movf	??___ftadd+3,w
  9469  0B12  00C2               	movwf	___ftadd@exp2
  9470  0B13  0843               	movf	___ftadd@exp1,w
  9471  0B14  1903               	btfsc	3,2
  9472  0B15  2B22               	goto	l2376
  9473  0B16  0842               	movf	___ftadd@exp2,w
  9474  0B17  0243               	subwf	___ftadd@exp1,w
  9475  0B18  1803               	skipnc
  9476  0B19  2B29               	goto	l2380
  9477  0B1A  0343               	decf	___ftadd@exp1,w
  9478  0B1B  3AFF               	xorlw	255
  9479  0B1C  0742               	addwf	___ftadd@exp2,w
  9480  0B1D  00BD               	movwf	??___ftadd
  9481  0B1E  3019               	movlw	25
  9482  0B1F  023D               	subwf	??___ftadd,w
  9483  0B20  1C03               	skipc
  9484  0B21  2B29               	goto	l2380
  9485  0B22                     l2376:	
  9486  0B22  083A               	movf	___ftadd@f2,w
  9487  0B23  00B7               	movwf	?___ftadd
  9488  0B24  083B               	movf	___ftadd@f2+1,w
  9489  0B25  00B8               	movwf	?___ftadd+1
  9490  0B26  083C               	movf	___ftadd@f2+2,w
  9491  0B27  00B9               	movwf	?___ftadd+2
  9492  0B28  0008               	return
  9493  0B29                     l2380:	
  9494  0B29  0842               	movf	___ftadd@exp2,w
  9495  0B2A  1903               	btfsc	3,2
  9496  0B2B  0008               	return
  9497  0B2C  0843               	movf	___ftadd@exp1,w
  9498  0B2D  0242               	subwf	___ftadd@exp2,w
  9499  0B2E  1803               	skipnc
  9500  0B2F  2B38               	goto	l2386
  9501  0B30  0342               	decf	___ftadd@exp2,w
  9502  0B31  3AFF               	xorlw	255
  9503  0B32  0743               	addwf	___ftadd@exp1,w
  9504  0B33  00BD               	movwf	??___ftadd
  9505  0B34  3019               	movlw	25
  9506  0B35  023D               	subwf	??___ftadd,w
  9507  0B36  1803               	btfsc	3,0
  9508  0B37  0008               	return
  9509  0B38                     l2386:	
  9510  0B38  3006               	movlw	6
  9511  0B39  00BD               	movwf	??___ftadd
  9512  0B3A  083D               	movf	??___ftadd,w
  9513  0B3B  00C1               	movwf	___ftadd@sign
  9514  0B3C  1BB9               	btfsc	___ftadd@f1+2,7
  9515  0B3D  17C1               	bsf	___ftadd@sign,7
  9516  0B3E  1BBC               	btfsc	___ftadd@f2+2,7
  9517  0B3F  1741               	bsf	___ftadd@sign,6
  9518  0B40  17B8               	bsf	___ftadd@f1+1,7
  9519  0B41  30FF               	movlw	255
  9520  0B42  05B7               	andwf	___ftadd@f1,f
  9521  0B43  30FF               	movlw	255
  9522  0B44  05B8               	andwf	___ftadd@f1+1,f
  9523  0B45  3000               	movlw	0
  9524  0B46  05B9               	andwf	___ftadd@f1+2,f
  9525  0B47  17BB               	bsf	___ftadd@f2+1,7
  9526  0B48  30FF               	movlw	255
  9527  0B49  05BA               	andwf	___ftadd@f2,f
  9528  0B4A  30FF               	movlw	255
  9529  0B4B  05BB               	andwf	___ftadd@f2+1,f
  9530  0B4C  3000               	movlw	0
  9531  0B4D  05BC               	andwf	___ftadd@f2+2,f
  9532  0B4E  0842               	movf	___ftadd@exp2,w
  9533  0B4F  0243               	subwf	___ftadd@exp1,w
  9534  0B50  1803               	skipnc
  9535  0B51  2B74               	goto	l2408
  9536  0B52                     l2398:	
  9537  0B52  3001               	movlw	1
  9538  0B53                     u2445:	
  9539  0B53  35BA               	lslf	___ftadd@f2,f
  9540  0B54  0DBB               	rlf	___ftadd@f2+1,f
  9541  0B55  0DBC               	rlf	___ftadd@f2+2,f
  9542  0B56  0B89               	decfsz	9,f
  9543  0B57  2B53               	goto	u2445
  9544  0B58  3001               	movlw	1
  9545  0B59  02C2               	subwf	___ftadd@exp2,f
  9546  0B5A  0842               	movf	___ftadd@exp2,w
  9547  0B5B  0643               	xorwf	___ftadd@exp1,w
  9548  0B5C  1903               	skipnz
  9549  0B5D  2B6F               	goto	l2406
  9550  0B5E  3001               	movlw	1
  9551  0B5F  02C1               	subwf	___ftadd@sign,f
  9552  0B60  0841               	movf	___ftadd@sign,w
  9553  0B61  3907               	andlw	7
  9554  0B62  1903               	btfsc	3,2
  9555  0B63  2B6F               	goto	l2406
  9556  0B64  2B52               	goto	l2398
  9557  0B65                     l2404:	
  9558  0B65  3001               	movlw	1
  9559  0B66                     u2475:	
  9560  0B66  36B9               	lsrf	___ftadd@f1+2,f
  9561  0B67  0CB8               	rrf	___ftadd@f1+1,f
  9562  0B68  0CB7               	rrf	___ftadd@f1,f
  9563  0B69  0B89               	decfsz	9,f
  9564  0B6A  2B66               	goto	u2475
  9565  0B6B  3001               	movlw	1
  9566  0B6C  00BD               	movwf	??___ftadd
  9567  0B6D  083D               	movf	??___ftadd,w
  9568  0B6E  07C3               	addwf	___ftadd@exp1,f
  9569  0B6F                     l2406:	
  9570  0B6F  0843               	movf	___ftadd@exp1,w
  9571  0B70  0642               	xorwf	___ftadd@exp2,w
  9572  0B71  1903               	btfsc	3,2
  9573  0B72  2B99               	goto	l810
  9574  0B73  2B65               	goto	l2404
  9575  0B74                     l2408:	
  9576  0B74  0843               	movf	___ftadd@exp1,w
  9577  0B75  0242               	subwf	___ftadd@exp2,w
  9578  0B76  1803               	skipnc
  9579  0B77  2B99               	goto	l810
  9580  0B78                     l2410:	
  9581  0B78  3001               	movlw	1
  9582  0B79                     u2505:	
  9583  0B79  35B7               	lslf	___ftadd@f1,f
  9584  0B7A  0DB8               	rlf	___ftadd@f1+1,f
  9585  0B7B  0DB9               	rlf	___ftadd@f1+2,f
  9586  0B7C  0B89               	decfsz	9,f
  9587  0B7D  2B79               	goto	u2505
  9588  0B7E  3001               	movlw	1
  9589  0B7F  02C3               	subwf	___ftadd@exp1,f
  9590  0B80  0842               	movf	___ftadd@exp2,w
  9591  0B81  0643               	xorwf	___ftadd@exp1,w
  9592  0B82  1903               	skipnz
  9593  0B83  2B95               	goto	l2418
  9594  0B84  3001               	movlw	1
  9595  0B85  02C1               	subwf	___ftadd@sign,f
  9596  0B86  0841               	movf	___ftadd@sign,w
  9597  0B87  3907               	andlw	7
  9598  0B88  1903               	btfsc	3,2
  9599  0B89  2B95               	goto	l2418
  9600  0B8A  2B78               	goto	l2410
  9601  0B8B                     l2416:	
  9602  0B8B  3001               	movlw	1
  9603  0B8C                     u2535:	
  9604  0B8C  36BC               	lsrf	___ftadd@f2+2,f
  9605  0B8D  0CBB               	rrf	___ftadd@f2+1,f
  9606  0B8E  0CBA               	rrf	___ftadd@f2,f
  9607  0B8F  0B89               	decfsz	9,f
  9608  0B90  2B8C               	goto	u2535
  9609  0B91  3001               	movlw	1
  9610  0B92  00BD               	movwf	??___ftadd
  9611  0B93  083D               	movf	??___ftadd,w
  9612  0B94  07C2               	addwf	___ftadd@exp2,f
  9613  0B95                     l2418:	
  9614  0B95  0843               	movf	___ftadd@exp1,w
  9615  0B96  0642               	xorwf	___ftadd@exp2,w
  9616  0B97  1D03               	skipz
  9617  0B98  2B8B               	goto	l2416
  9618  0B99                     l810:	
  9619  0B99  1FC1               	btfss	___ftadd@sign,7
  9620  0B9A  2BAB               	goto	l2422
  9621  0B9B  30FF               	movlw	255
  9622  0B9C  06B7               	xorwf	___ftadd@f1,f
  9623  0B9D  30FF               	movlw	255
  9624  0B9E  06B8               	xorwf	___ftadd@f1+1,f
  9625  0B9F  30FF               	movlw	255
  9626  0BA0  06B9               	xorwf	___ftadd@f1+2,f
  9627  0BA1  3001               	movlw	1
  9628  0BA2  07B7               	addwf	___ftadd@f1,f
  9629  0BA3  3000               	movlw	0
  9630  0BA4  1803               	skipnc
  9631  0BA5  3001               	movlw	1
  9632  0BA6  07B8               	addwf	___ftadd@f1+1,f
  9633  0BA7  3000               	movlw	0
  9634  0BA8  1803               	skipnc
  9635  0BA9  3001               	movlw	1
  9636  0BAA  07B9               	addwf	___ftadd@f1+2,f
  9637  0BAB                     l2422:	
  9638  0BAB  1F41               	btfss	___ftadd@sign,6
  9639  0BAC  2BBD               	goto	l2426
  9640  0BAD  30FF               	movlw	255
  9641  0BAE  06BA               	xorwf	___ftadd@f2,f
  9642  0BAF  30FF               	movlw	255
  9643  0BB0  06BB               	xorwf	___ftadd@f2+1,f
  9644  0BB1  30FF               	movlw	255
  9645  0BB2  06BC               	xorwf	___ftadd@f2+2,f
  9646  0BB3  3001               	movlw	1
  9647  0BB4  07BA               	addwf	___ftadd@f2,f
  9648  0BB5  3000               	movlw	0
  9649  0BB6  1803               	skipnc
  9650  0BB7  3001               	movlw	1
  9651  0BB8  07BB               	addwf	___ftadd@f2+1,f
  9652  0BB9  3000               	movlw	0
  9653  0BBA  1803               	skipnc
  9654  0BBB  3001               	movlw	1
  9655  0BBC  07BC               	addwf	___ftadd@f2+2,f
  9656  0BBD                     l2426:	
  9657  0BBD  01C1               	clrf	___ftadd@sign
  9658  0BBE  0837               	movf	___ftadd@f1,w
  9659  0BBF  07BA               	addwf	___ftadd@f2,f
  9660  0BC0  0838               	movf	___ftadd@f1+1,w
  9661  0BC1  3DBB               	addwfc	___ftadd@f2+1,f
  9662  0BC2  0839               	movf	___ftadd@f1+2,w
  9663  0BC3  3DBC               	addwfc	___ftadd@f2+2,f
  9664  0BC4  1FBC               	btfss	___ftadd@f2+2,7
  9665  0BC5  2BD8               	goto	l2436
  9666  0BC6  30FF               	movlw	255
  9667  0BC7  06BA               	xorwf	___ftadd@f2,f
  9668  0BC8  30FF               	movlw	255
  9669  0BC9  06BB               	xorwf	___ftadd@f2+1,f
  9670  0BCA  30FF               	movlw	255
  9671  0BCB  06BC               	xorwf	___ftadd@f2+2,f
  9672  0BCC  3001               	movlw	1
  9673  0BCD  07BA               	addwf	___ftadd@f2,f
  9674  0BCE  3000               	movlw	0
  9675  0BCF  1803               	skipnc
  9676  0BD0  3001               	movlw	1
  9677  0BD1  07BB               	addwf	___ftadd@f2+1,f
  9678  0BD2  3000               	movlw	0
  9679  0BD3  1803               	skipnc
  9680  0BD4  3001               	movlw	1
  9681  0BD5  07BC               	addwf	___ftadd@f2+2,f
  9682  0BD6  01C1               	clrf	___ftadd@sign
  9683  0BD7  0AC1               	incf	___ftadd@sign,f
  9684  0BD8                     l2436:	
  9685  0BD8  083A               	movf	___ftadd@f2,w
  9686  0BD9  00F0               	movwf	___ftpack@arg
  9687  0BDA  083B               	movf	___ftadd@f2+1,w
  9688  0BDB  00F1               	movwf	___ftpack@arg+1
  9689  0BDC  083C               	movf	___ftadd@f2+2,w
  9690  0BDD  00F2               	movwf	___ftpack@arg+2
  9691  0BDE  0843               	movf	___ftadd@exp1,w
  9692  0BDF  00BD               	movwf	??___ftadd
  9693  0BE0  083D               	movf	??___ftadd,w
  9694  0BE1  00F3               	movwf	___ftpack@exp
  9695  0BE2  0841               	movf	___ftadd@sign,w
  9696  0BE3  00BE               	movwf	??___ftadd+1
  9697  0BE4  083E               	movf	??___ftadd+1,w
  9698  0BE5  00F4               	movwf	___ftpack@sign
  9699  0BE6  3194  24DB         	fcall	___ftpack
  9700  0BE8  0870               	movf	?___ftpack,w
  9701  0BE9  0020               	movlb	0	; select bank0
  9702  0BEA  00B7               	movwf	?___ftadd
  9703  0BEB  0871               	movf	?___ftpack+1,w
  9704  0BEC  00B8               	movwf	?___ftadd+1
  9705  0BED  0872               	movf	?___ftpack+2,w
  9706  0BEE  00B9               	movwf	?___ftadd+2
  9707  0BEF  0008               	return
  9708  0BF0                     __end_of___ftadd:	
  9709                           
  9710                           	psect	text8
  9711  0D3C                     __ptext8:	
  9712 ;; *************** function _readVAnalog *****************
  9713 ;; Defined at:
  9714 ;;		line 103 in file "adc.c"
  9715 ;; Parameters:    Size  Location     Type
  9716 ;;  channel         2    6[BANK0 ] unsigned int 
  9717 ;; Auto vars:     Size  Location     Type
  9718 ;;  value           2   11[COMMON] int 
  9719 ;;  analog_chann    2    9[COMMON] unsigned int 
  9720 ;; Return value:  Size  Location     Type
  9721 ;;                  2    6[BANK0 ] int 
  9722 ;; Registers used:
  9723 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9724 ;; Tracked objects:
  9725 ;;		On entry : 0/0
  9726 ;;		On exit  : 0/0
  9727 ;;		Unchanged: 0/0
  9728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9729 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9730 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9731 ;;      Temps:          0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9732 ;;      Totals:         4      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9733 ;;Total ram usage:       24 bytes
  9734 ;; Hardware stack levels used:    1
  9735 ;; Hardware stack levels required when called:    1
  9736 ;; This function calls:
  9737 ;;		_ADCRead
  9738 ;;		___aldiv
  9739 ;;		___wmul
  9740 ;; This function is called by:
  9741 ;;		_main
  9742 ;; This function uses a non-reentrant model
  9743 ;;
  9744                           
  9745                           
  9746                           ;psect for function _readVAnalog
  9747  0D3C                     _readVAnalog:	
  9748                           
  9749                           ;adc.c: 105: int16_t value;
  9750                           ;adc.c: 107: uint16_t analog_channel = Vchannels[channel];
  9751                           
  9752                           ;incstack = 0
  9753                           ; Regs used in _readVAnalog: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9754  0D3C  0020               	movlb	0	; select bank0
  9755  0D3D  3526               	lslf	readVAnalog@channel,w
  9756  0D3E  3E51               	addlw	(low (_Vchannels| (0+256)))& (0+255)
  9757  0D3F  0086               	movwf	6
  9758  0D40  3001               	movlw	1	; select bank2/3
  9759  0D41  0087               	movwf	7
  9760  0D42  3F40               	moviw [0]fsr1
  9761  0D43  00F9               	movwf	readVAnalog@analog_channel
  9762  0D44  3F41               	moviw [1]fsr1
  9763  0D45  00FA               	movwf	readVAnalog@analog_channel+1
  9764                           
  9765                           ;adc.c: 109: value = ADCRead(analog_channel);
  9766  0D46  0879               	movf	readVAnalog@analog_channel,w
  9767  0D47  319F  2751  318D   	fcall	_ADCRead
  9768  0D4A  0871               	movf	?_ADCRead+1,w
  9769  0D4B  00FC               	movwf	readVAnalog@value+1
  9770  0D4C  0870               	movf	?_ADCRead,w
  9771  0D4D  00FB               	movwf	readVAnalog@value
  9772                           
  9773                           ;adc.c: 111: Vtotals[channel] = Vtotals[channel]-Vsamples[channel][VsampleIndex];
  9774  0D4E  0020               	movlb	0	; select bank0
  9775  0D4F  0826               	movf	readVAnalog@channel,w
  9776  0D50  00A8               	movwf	??_readVAnalog
  9777  0D51  3001               	movlw	1
  9778  0D52                     u3365:	
  9779  0D52  35A8               	lslf	??_readVAnalog,f
  9780  0D53  3EFF               	addlw	-1
  9781  0D54  1D03               	skipz
  9782  0D55  2D52               	goto	u3365
  9783  0D56  3528               	lslf	??_readVAnalog,w
  9784  0D57  3E20               	addlw	(low (_Vtotals| (0+256)))& (0+255)
  9785  0D58  0086               	movwf	6
  9786  0D59  3001               	movlw	1	; select bank2/3
  9787  0D5A  0087               	movwf	7
  9788  0D5B  3F40               	moviw [0]fsr1
  9789  0D5C  00A9               	movwf	??_readVAnalog+1
  9790  0D5D  3F41               	moviw [1]fsr1
  9791  0D5E  00AA               	movwf	??_readVAnalog+2
  9792  0D5F  3F42               	moviw [2]fsr1
  9793  0D60  00AB               	movwf	??_readVAnalog+3
  9794  0D61  3F43               	moviw [3]fsr1
  9795  0D62  00AC               	movwf	??_readVAnalog+4
  9796  0D63  0021               	movlb	1	; select bank1
  9797  0D64  084F               	movf	(_VsampleIndex+1)^(0+128),w
  9798  0D65  0020               	movlb	0	; select bank0
  9799  0D66  00AE               	movwf	??_readVAnalog+6
  9800  0D67  0021               	movlb	1	; select bank1
  9801  0D68  084E               	movf	_VsampleIndex^(0+128),w
  9802  0D69  0020               	movlb	0	; select bank0
  9803  0D6A  00AD               	movwf	??_readVAnalog+5
  9804  0D6B  35AD               	lslf	??_readVAnalog+5,f
  9805  0D6C  0DAE               	rlf	??_readVAnalog+6,f
  9806  0D6D  0827               	movf	readVAnalog@channel+1,w
  9807  0D6E  00F1               	movwf	___wmul@multiplier+1
  9808  0D6F  0826               	movf	readVAnalog@channel,w
  9809  0D70  00F0               	movwf	___wmul@multiplier
  9810  0D71  301E               	movlw	30
  9811  0D72  00F2               	movwf	___wmul@multiplicand
  9812  0D73  3000               	movlw	0
  9813  0D74  00F3               	movwf	___wmul@multiplicand+1
  9814  0D75  319F  27A8  318D   	fcall	___wmul
  9815  0D78  3078               	movlw	120
  9816  0D79  0020               	movlb	0	; select bank0
  9817  0D7A  00AF               	movwf	??_readVAnalog+7
  9818  0D7B  3023               	movlw	35
  9819  0D7C  00B0               	movwf	??_readVAnalog+8
  9820  0D7D  0870               	movf	?___wmul,w
  9821  0D7E  072F               	addwf	??_readVAnalog+7,w
  9822  0D7F  00B1               	movwf	??_readVAnalog+9
  9823  0D80  0871               	movf	?___wmul+1,w
  9824  0D81  3D30               	addwfc	??_readVAnalog+8,w
  9825  0D82  00B2               	movwf	??_readVAnalog+10
  9826  0D83  082D               	movf	??_readVAnalog+5,w
  9827  0D84  0731               	addwf	??_readVAnalog+9,w
  9828  0D85  0086               	movwf	6
  9829  0D86  082E               	movf	??_readVAnalog+6,w
  9830  0D87  3D32               	addwfc	??_readVAnalog+10,w
  9831  0D88  0087               	movwf	7
  9832  0D89  3F40               	moviw [0]fsr1
  9833  0D8A  00B3               	movwf	??_readVAnalog+11
  9834  0D8B  3F41               	moviw [1]fsr1
  9835  0D8C  00B4               	movwf	??_readVAnalog+12
  9836  0D8D  0833               	movf	??_readVAnalog+11,w
  9837  0D8E  00B5               	movwf	??_readVAnalog+13
  9838  0D8F  0834               	movf	??_readVAnalog+12,w
  9839  0D90  00B6               	movwf	??_readVAnalog+14
  9840  0D91  3000               	movlw	0
  9841  0D92  1BB6               	btfsc	??_readVAnalog+14,7
  9842  0D93  30FF               	movlw	255
  9843  0D94  00B7               	movwf	??_readVAnalog+15
  9844  0D95  00B8               	movwf	??_readVAnalog+16
  9845  0D96  09B5               	comf	??_readVAnalog+13,f
  9846  0D97  09B6               	comf	??_readVAnalog+14,f
  9847  0D98  09B7               	comf	??_readVAnalog+15,f
  9848  0D99  09B8               	comf	??_readVAnalog+16,f
  9849  0D9A  0AB5               	incf	??_readVAnalog+13,f
  9850  0D9B  1903               	skipnz
  9851  0D9C  0AB6               	incf	??_readVAnalog+14,f
  9852  0D9D  1903               	skipnz
  9853  0D9E  0AB7               	incf	??_readVAnalog+15,f
  9854  0D9F  1903               	skipnz
  9855  0DA0  0AB8               	incf	??_readVAnalog+16,f
  9856  0DA1  0835               	movf	??_readVAnalog+13,w
  9857  0DA2  07A9               	addwf	??_readVAnalog+1,f
  9858  0DA3  0836               	movf	??_readVAnalog+14,w
  9859  0DA4  3DAA               	addwfc	??_readVAnalog+2,f
  9860  0DA5  0837               	movf	??_readVAnalog+15,w
  9861  0DA6  3DAB               	addwfc	??_readVAnalog+3,f
  9862  0DA7  0838               	movf	??_readVAnalog+16,w
  9863  0DA8  3DAC               	addwfc	??_readVAnalog+4,f
  9864  0DA9  0826               	movf	readVAnalog@channel,w
  9865  0DAA  00B9               	movwf	??_readVAnalog+17
  9866  0DAB  3001               	movlw	1
  9867  0DAC                     u3375:	
  9868  0DAC  35B9               	lslf	??_readVAnalog+17,f
  9869  0DAD  3EFF               	addlw	-1
  9870  0DAE  1D03               	skipz
  9871  0DAF  2DAC               	goto	u3375
  9872  0DB0  3539               	lslf	??_readVAnalog+17,w
  9873  0DB1  3E20               	addlw	(low (_Vtotals| (0+256)))& (0+255)
  9874  0DB2  0086               	movwf	6
  9875  0DB3  3001               	movlw	1	; select bank2/3
  9876  0DB4  0087               	movwf	7
  9877  0DB5  0829               	movf	??_readVAnalog+1,w
  9878  0DB6  3FC0               	movwi [0]fsr1
  9879  0DB7  082A               	movf	??_readVAnalog+2,w
  9880  0DB8  3FC1               	movwi [1]fsr1
  9881  0DB9  082B               	movf	??_readVAnalog+3,w
  9882  0DBA  3FC2               	movwi [2]fsr1
  9883  0DBB  082C               	movf	??_readVAnalog+4,w
  9884  0DBC  3FC3               	movwi [3]fsr1
  9885                           
  9886                           ;adc.c: 113: Vsamples[channel][VsampleIndex] = value;
  9887  0DBD  0021               	movlb	1	; select bank1
  9888  0DBE  084F               	movf	(_VsampleIndex+1)^(0+128),w
  9889  0DBF  0020               	movlb	0	; select bank0
  9890  0DC0  00A9               	movwf	??_readVAnalog+1
  9891  0DC1  0021               	movlb	1	; select bank1
  9892  0DC2  084E               	movf	_VsampleIndex^(0+128),w
  9893  0DC3  0020               	movlb	0	; select bank0
  9894  0DC4  00A8               	movwf	??_readVAnalog
  9895  0DC5  35A8               	lslf	??_readVAnalog,f
  9896  0DC6  0DA9               	rlf	??_readVAnalog+1,f
  9897  0DC7  0827               	movf	readVAnalog@channel+1,w
  9898  0DC8  00F1               	movwf	___wmul@multiplier+1
  9899  0DC9  0826               	movf	readVAnalog@channel,w
  9900  0DCA  00F0               	movwf	___wmul@multiplier
  9901  0DCB  301E               	movlw	30
  9902  0DCC  00F2               	movwf	___wmul@multiplicand
  9903  0DCD  3000               	movlw	0
  9904  0DCE  00F3               	movwf	___wmul@multiplicand+1
  9905  0DCF  319F  27A8  318D   	fcall	___wmul
  9906  0DD2  3078               	movlw	120
  9907  0DD3  0020               	movlb	0	; select bank0
  9908  0DD4  00AA               	movwf	??_readVAnalog+2
  9909  0DD5  3023               	movlw	35
  9910  0DD6  00AB               	movwf	??_readVAnalog+3
  9911  0DD7  0870               	movf	?___wmul,w
  9912  0DD8  072A               	addwf	??_readVAnalog+2,w
  9913  0DD9  00AC               	movwf	??_readVAnalog+4
  9914  0DDA  0871               	movf	?___wmul+1,w
  9915  0DDB  3D2B               	addwfc	??_readVAnalog+3,w
  9916  0DDC  00AD               	movwf	??_readVAnalog+5
  9917  0DDD  0828               	movf	??_readVAnalog,w
  9918  0DDE  072C               	addwf	??_readVAnalog+4,w
  9919  0DDF  0086               	movwf	6
  9920  0DE0  0829               	movf	??_readVAnalog+1,w
  9921  0DE1  3D2D               	addwfc	??_readVAnalog+5,w
  9922  0DE2  0087               	movwf	7
  9923  0DE3  087B               	movf	readVAnalog@value,w
  9924  0DE4  3FC0               	movwi [0]fsr1
  9925  0DE5  087C               	movf	readVAnalog@value+1,w
  9926  0DE6  3FC1               	movwi [1]fsr1
  9927                           
  9928                           ;adc.c: 115: Vtotals[channel] = Vtotals[channel]+Vsamples[channel][VsampleIndex];
  9929  0DE7  0826               	movf	readVAnalog@channel,w
  9930  0DE8  00A8               	movwf	??_readVAnalog
  9931  0DE9  3001               	movlw	1
  9932  0DEA                     u3385:	
  9933  0DEA  35A8               	lslf	??_readVAnalog,f
  9934  0DEB  3EFF               	addlw	-1
  9935  0DEC  1D03               	skipz
  9936  0DED  2DEA               	goto	u3385
  9937  0DEE  3528               	lslf	??_readVAnalog,w
  9938  0DEF  3E20               	addlw	(low (_Vtotals| (0+256)))& (0+255)
  9939  0DF0  0086               	movwf	6
  9940  0DF1  3001               	movlw	1	; select bank2/3
  9941  0DF2  0087               	movwf	7
  9942  0DF3  3F40               	moviw [0]fsr1
  9943  0DF4  00A9               	movwf	??_readVAnalog+1
  9944  0DF5  3F41               	moviw [1]fsr1
  9945  0DF6  00AA               	movwf	??_readVAnalog+2
  9946  0DF7  3F42               	moviw [2]fsr1
  9947  0DF8  00AB               	movwf	??_readVAnalog+3
  9948  0DF9  3F43               	moviw [3]fsr1
  9949  0DFA  00AC               	movwf	??_readVAnalog+4
  9950  0DFB  0021               	movlb	1	; select bank1
  9951  0DFC  084F               	movf	(_VsampleIndex+1)^(0+128),w
  9952  0DFD  0020               	movlb	0	; select bank0
  9953  0DFE  00AE               	movwf	??_readVAnalog+6
  9954  0DFF  0021               	movlb	1	; select bank1
  9955  0E00  084E               	movf	_VsampleIndex^(0+128),w
  9956  0E01  0020               	movlb	0	; select bank0
  9957  0E02  00AD               	movwf	??_readVAnalog+5
  9958  0E03  35AD               	lslf	??_readVAnalog+5,f
  9959  0E04  0DAE               	rlf	??_readVAnalog+6,f
  9960  0E05  0827               	movf	readVAnalog@channel+1,w
  9961  0E06  00F1               	movwf	___wmul@multiplier+1
  9962  0E07  0826               	movf	readVAnalog@channel,w
  9963  0E08  00F0               	movwf	___wmul@multiplier
  9964  0E09  301E               	movlw	30
  9965  0E0A  00F2               	movwf	___wmul@multiplicand
  9966  0E0B  3000               	movlw	0
  9967  0E0C  00F3               	movwf	___wmul@multiplicand+1
  9968  0E0D  319F  27A8  318D   	fcall	___wmul
  9969  0E10  3078               	movlw	120
  9970  0E11  0020               	movlb	0	; select bank0
  9971  0E12  00AF               	movwf	??_readVAnalog+7
  9972  0E13  3023               	movlw	35
  9973  0E14  00B0               	movwf	??_readVAnalog+8
  9974  0E15  0870               	movf	?___wmul,w
  9975  0E16  072F               	addwf	??_readVAnalog+7,w
  9976  0E17  00B1               	movwf	??_readVAnalog+9
  9977  0E18  0871               	movf	?___wmul+1,w
  9978  0E19  3D30               	addwfc	??_readVAnalog+8,w
  9979  0E1A  00B2               	movwf	??_readVAnalog+10
  9980  0E1B  082D               	movf	??_readVAnalog+5,w
  9981  0E1C  0731               	addwf	??_readVAnalog+9,w
  9982  0E1D  0086               	movwf	6
  9983  0E1E  082E               	movf	??_readVAnalog+6,w
  9984  0E1F  3D32               	addwfc	??_readVAnalog+10,w
  9985  0E20  0087               	movwf	7
  9986  0E21  3F40               	moviw [0]fsr1
  9987  0E22  00B3               	movwf	??_readVAnalog+11
  9988  0E23  3F41               	moviw [1]fsr1
  9989  0E24  00B4               	movwf	??_readVAnalog+12
  9990  0E25  0833               	movf	??_readVAnalog+11,w
  9991  0E26  00B5               	movwf	??_readVAnalog+13
  9992  0E27  0834               	movf	??_readVAnalog+12,w
  9993  0E28  00B6               	movwf	??_readVAnalog+14
  9994  0E29  3000               	movlw	0
  9995  0E2A  1BB6               	btfsc	??_readVAnalog+14,7
  9996  0E2B  30FF               	movlw	255
  9997  0E2C  00B7               	movwf	??_readVAnalog+15
  9998  0E2D  00B8               	movwf	??_readVAnalog+16
  9999  0E2E  0835               	movf	??_readVAnalog+13,w
 10000  0E2F  07A9               	addwf	??_readVAnalog+1,f
 10001  0E30  0836               	movf	??_readVAnalog+14,w
 10002  0E31  3DAA               	addwfc	??_readVAnalog+2,f
 10003  0E32  0837               	movf	??_readVAnalog+15,w
 10004  0E33  3DAB               	addwfc	??_readVAnalog+3,f
 10005  0E34  0838               	movf	??_readVAnalog+16,w
 10006  0E35  3DAC               	addwfc	??_readVAnalog+4,f
 10007  0E36  0826               	movf	readVAnalog@channel,w
 10008  0E37  00B9               	movwf	??_readVAnalog+17
 10009  0E38  3001               	movlw	1
 10010  0E39                     u3395:	
 10011  0E39  35B9               	lslf	??_readVAnalog+17,f
 10012  0E3A  3EFF               	addlw	-1
 10013  0E3B  1D03               	skipz
 10014  0E3C  2E39               	goto	u3395
 10015  0E3D  3539               	lslf	??_readVAnalog+17,w
 10016  0E3E  3E20               	addlw	(low (_Vtotals| (0+256)))& (0+255)
 10017  0E3F  0086               	movwf	6
 10018  0E40  3001               	movlw	1	; select bank2/3
 10019  0E41  0087               	movwf	7
 10020  0E42  0829               	movf	??_readVAnalog+1,w
 10021  0E43  3FC0               	movwi [0]fsr1
 10022  0E44  082A               	movf	??_readVAnalog+2,w
 10023  0E45  3FC1               	movwi [1]fsr1
 10024  0E46  082B               	movf	??_readVAnalog+3,w
 10025  0E47  3FC2               	movwi [2]fsr1
 10026  0E48  082C               	movf	??_readVAnalog+4,w
 10027  0E49  3FC3               	movwi [3]fsr1
 10028                           
 10029                           ;adc.c: 117: if(channel>=(4-1))
 10030  0E4A  3000               	movlw	0
 10031  0E4B  0227               	subwf	readVAnalog@channel+1,w
 10032  0E4C  3003               	movlw	3
 10033  0E4D  1903               	skipnz
 10034  0E4E  0226               	subwf	readVAnalog@channel,w
 10035  0E4F  1C03               	skipc
 10036  0E50  2E5F               	goto	l2984
 10037                           
 10038                           ;adc.c: 118: {
 10039                           ;adc.c: 119: VsampleIndex+=1;
 10040  0E51  3001               	movlw	1
 10041  0E52  0021               	movlb	1	; select bank1
 10042  0E53  07CE               	addwf	_VsampleIndex^(0+128),f
 10043  0E54  3000               	movlw	0
 10044  0E55  3DCF               	addwfc	(_VsampleIndex+1)^(0+128),f
 10045                           
 10046                           ;adc.c: 120: if(VsampleIndex >= 15)VsampleIndex = 0;
 10047  0E56  3000               	movlw	0
 10048  0E57  024F               	subwf	(_VsampleIndex+1)^(0+128),w
 10049  0E58  300F               	movlw	15
 10050  0E59  1903               	skipnz
 10051  0E5A  024E               	subwf	_VsampleIndex^(0+128),w
 10052  0E5B  1C03               	skipc
 10053  0E5C  2E5F               	goto	l2984
 10054  0E5D  01CE               	clrf	_VsampleIndex^(0+128)
 10055  0E5E  01CF               	clrf	(_VsampleIndex+1)^(0+128)
 10056  0E5F                     l2984:	
 10057                           
 10058                           ;adc.c: 121: }
 10059                           ;adc.c: 123: value = Vtotals[channel]/15;
 10060  0E5F  3000               	movlw	0
 10061  0E60  00F3               	movwf	___aldiv@divisor+3
 10062  0E61  3000               	movlw	0
 10063  0E62  00F2               	movwf	___aldiv@divisor+2
 10064  0E63  3000               	movlw	0
 10065  0E64  00F1               	movwf	___aldiv@divisor+1
 10066  0E65  300F               	movlw	15
 10067  0E66  00F0               	movwf	___aldiv@divisor
 10068  0E67  0020               	movlb	0	; select bank0
 10069  0E68  0826               	movf	readVAnalog@channel,w
 10070  0E69  00A8               	movwf	??_readVAnalog
 10071  0E6A  3001               	movlw	1
 10072  0E6B                     u3425:	
 10073  0E6B  35A8               	lslf	??_readVAnalog,f
 10074  0E6C  3EFF               	addlw	-1
 10075  0E6D  1D03               	skipz
 10076  0E6E  2E6B               	goto	u3425
 10077  0E6F  3528               	lslf	??_readVAnalog,w
 10078  0E70  3E20               	addlw	(low (_Vtotals| (0+256)))& (0+255)
 10079  0E71  0086               	movwf	6
 10080  0E72  3001               	movlw	1	; select bank2/3
 10081  0E73  0087               	movwf	7
 10082  0E74  3F40               	moviw [0]fsr1
 10083  0E75  00F4               	movwf	___aldiv@dividend
 10084  0E76  3F41               	moviw [1]fsr1
 10085  0E77  00F5               	movwf	___aldiv@dividend+1
 10086  0E78  3F42               	moviw [2]fsr1
 10087  0E79  00F6               	movwf	___aldiv@dividend+2
 10088  0E7A  3F43               	moviw [3]fsr1
 10089  0E7B  00F7               	movwf	___aldiv@dividend+3
 10090  0E7C  3196  2625         	fcall	___aldiv
 10091  0E7E  0871               	movf	?___aldiv+1,w
 10092  0E7F  00FC               	movwf	readVAnalog@value+1
 10093  0E80  0870               	movf	?___aldiv,w
 10094  0E81  00FB               	movwf	readVAnalog@value
 10095                           
 10096                           ;adc.c: 125: return value;
 10097  0E82  087C               	movf	readVAnalog@value+1,w
 10098  0E83  0020               	movlb	0	; select bank0
 10099  0E84  00A7               	movwf	?_readVAnalog+1
 10100  0E85  087B               	movf	readVAnalog@value,w
 10101  0E86  00A6               	movwf	?_readVAnalog
 10102  0E87  0008               	return
 10103  0E88                     __end_of_readVAnalog:	
 10104                           
 10105                           	psect	text9
 10106  0BF0                     __ptext9:	
 10107 ;; *************** function _readIAnalog *****************
 10108 ;; Defined at:
 10109 ;;		line 77 in file "adc.c"
 10110 ;; Parameters:    Size  Location     Type
 10111 ;;  channel         2    6[BANK0 ] unsigned int 
 10112 ;; Auto vars:     Size  Location     Type
 10113 ;;  value           2   11[COMMON] int 
 10114 ;;  analog_chann    2    9[COMMON] unsigned int 
 10115 ;; Return value:  Size  Location     Type
 10116 ;;                  2    6[BANK0 ] int 
 10117 ;; Registers used:
 10118 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10119 ;; Tracked objects:
 10120 ;;		On entry : 0/0
 10121 ;;		On exit  : 0/0
 10122 ;;		Unchanged: 0/0
 10123 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10124 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10125 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10126 ;;      Temps:          0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10127 ;;      Totals:         4      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10128 ;;Total ram usage:       24 bytes
 10129 ;; Hardware stack levels used:    1
 10130 ;; Hardware stack levels required when called:    1
 10131 ;; This function calls:
 10132 ;;		_ADCRead
 10133 ;;		___aldiv
 10134 ;;		___wmul
 10135 ;; This function is called by:
 10136 ;;		_main
 10137 ;; This function uses a non-reentrant model
 10138 ;;
 10139                           
 10140                           
 10141                           ;psect for function _readIAnalog
 10142  0BF0                     _readIAnalog:	
 10143                           
 10144                           ;adc.c: 79: int16_t value;
 10145                           ;adc.c: 81: uint16_t analog_channel = Ichannels[channel];
 10146                           
 10147                           ;incstack = 0
 10148                           ; Regs used in _readIAnalog: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10149  0BF0  0020               	movlb	0	; select bank0
 10150  0BF1  3526               	lslf	readIAnalog@channel,w
 10151  0BF2  3E59               	addlw	(low (_Ichannels| (0+256)))& (0+255)
 10152  0BF3  0086               	movwf	6
 10153  0BF4  3001               	movlw	1	; select bank2/3
 10154  0BF5  0087               	movwf	7
 10155  0BF6  3F40               	moviw [0]fsr1
 10156  0BF7  00F9               	movwf	readIAnalog@analog_channel
 10157  0BF8  3F41               	moviw [1]fsr1
 10158  0BF9  00FA               	movwf	readIAnalog@analog_channel+1
 10159                           
 10160                           ;adc.c: 83: value = ADCRead(analog_channel);
 10161  0BFA  0879               	movf	readIAnalog@analog_channel,w
 10162  0BFB  319F  2751  318B   	fcall	_ADCRead
 10163  0BFE  0871               	movf	?_ADCRead+1,w
 10164  0BFF  00FC               	movwf	readIAnalog@value+1
 10165  0C00  0870               	movf	?_ADCRead,w
 10166  0C01  00FB               	movwf	readIAnalog@value
 10167                           
 10168                           ;adc.c: 85: Itotals[channel] = Itotals[channel]-Isamples[channel][IsampleIndex];
 10169  0C02  0020               	movlb	0	; select bank0
 10170  0C03  0826               	movf	readIAnalog@channel,w
 10171  0C04  00A8               	movwf	??_readIAnalog
 10172  0C05  3001               	movlw	1
 10173  0C06                     u3295:	
 10174  0C06  35A8               	lslf	??_readIAnalog,f
 10175  0C07  3EFF               	addlw	-1
 10176  0C08  1D03               	skipz
 10177  0C09  2C06               	goto	u3295
 10178  0C0A  3528               	lslf	??_readIAnalog,w
 10179  0C0B  3E30               	addlw	(low (_Itotals| (0+256)))& (0+255)
 10180  0C0C  0086               	movwf	6
 10181  0C0D  3001               	movlw	1	; select bank2/3
 10182  0C0E  0087               	movwf	7
 10183  0C0F  3F40               	moviw [0]fsr1
 10184  0C10  00A9               	movwf	??_readIAnalog+1
 10185  0C11  3F41               	moviw [1]fsr1
 10186  0C12  00AA               	movwf	??_readIAnalog+2
 10187  0C13  3F42               	moviw [2]fsr1
 10188  0C14  00AB               	movwf	??_readIAnalog+3
 10189  0C15  3F43               	moviw [3]fsr1
 10190  0C16  00AC               	movwf	??_readIAnalog+4
 10191  0C17  0021               	movlb	1	; select bank1
 10192  0C18  0851               	movf	(_IsampleIndex+1)^(0+128),w
 10193  0C19  0020               	movlb	0	; select bank0
 10194  0C1A  00AE               	movwf	??_readIAnalog+6
 10195  0C1B  0021               	movlb	1	; select bank1
 10196  0C1C  0850               	movf	_IsampleIndex^(0+128),w
 10197  0C1D  0020               	movlb	0	; select bank0
 10198  0C1E  00AD               	movwf	??_readIAnalog+5
 10199  0C1F  35AD               	lslf	??_readIAnalog+5,f
 10200  0C20  0DAE               	rlf	??_readIAnalog+6,f
 10201  0C21  0827               	movf	readIAnalog@channel+1,w
 10202  0C22  00F1               	movwf	___wmul@multiplier+1
 10203  0C23  0826               	movf	readIAnalog@channel,w
 10204  0C24  00F0               	movwf	___wmul@multiplier
 10205  0C25  3064               	movlw	100
 10206  0C26  00F2               	movwf	___wmul@multiplicand
 10207  0C27  3000               	movlw	0
 10208  0C28  00F3               	movwf	___wmul@multiplicand+1
 10209  0C29  319F  27A8  318B   	fcall	___wmul
 10210  0C2C  30E8               	movlw	232
 10211  0C2D  0020               	movlb	0	; select bank0
 10212  0C2E  00AF               	movwf	??_readIAnalog+7
 10213  0C2F  3021               	movlw	33
 10214  0C30  00B0               	movwf	??_readIAnalog+8
 10215  0C31  0870               	movf	?___wmul,w
 10216  0C32  072F               	addwf	??_readIAnalog+7,w
 10217  0C33  00B1               	movwf	??_readIAnalog+9
 10218  0C34  0871               	movf	?___wmul+1,w
 10219  0C35  3D30               	addwfc	??_readIAnalog+8,w
 10220  0C36  00B2               	movwf	??_readIAnalog+10
 10221  0C37  082D               	movf	??_readIAnalog+5,w
 10222  0C38  0731               	addwf	??_readIAnalog+9,w
 10223  0C39  0086               	movwf	6
 10224  0C3A  082E               	movf	??_readIAnalog+6,w
 10225  0C3B  3D32               	addwfc	??_readIAnalog+10,w
 10226  0C3C  0087               	movwf	7
 10227  0C3D  3F40               	moviw [0]fsr1
 10228  0C3E  00B3               	movwf	??_readIAnalog+11
 10229  0C3F  3F41               	moviw [1]fsr1
 10230  0C40  00B4               	movwf	??_readIAnalog+12
 10231  0C41  0833               	movf	??_readIAnalog+11,w
 10232  0C42  00B5               	movwf	??_readIAnalog+13
 10233  0C43  0834               	movf	??_readIAnalog+12,w
 10234  0C44  00B6               	movwf	??_readIAnalog+14
 10235  0C45  3000               	movlw	0
 10236  0C46  1BB6               	btfsc	??_readIAnalog+14,7
 10237  0C47  30FF               	movlw	255
 10238  0C48  00B7               	movwf	??_readIAnalog+15
 10239  0C49  00B8               	movwf	??_readIAnalog+16
 10240  0C4A  09B5               	comf	??_readIAnalog+13,f
 10241  0C4B  09B6               	comf	??_readIAnalog+14,f
 10242  0C4C  09B7               	comf	??_readIAnalog+15,f
 10243  0C4D  09B8               	comf	??_readIAnalog+16,f
 10244  0C4E  0AB5               	incf	??_readIAnalog+13,f
 10245  0C4F  1903               	skipnz
 10246  0C50  0AB6               	incf	??_readIAnalog+14,f
 10247  0C51  1903               	skipnz
 10248  0C52  0AB7               	incf	??_readIAnalog+15,f
 10249  0C53  1903               	skipnz
 10250  0C54  0AB8               	incf	??_readIAnalog+16,f
 10251  0C55  0835               	movf	??_readIAnalog+13,w
 10252  0C56  07A9               	addwf	??_readIAnalog+1,f
 10253  0C57  0836               	movf	??_readIAnalog+14,w
 10254  0C58  3DAA               	addwfc	??_readIAnalog+2,f
 10255  0C59  0837               	movf	??_readIAnalog+15,w
 10256  0C5A  3DAB               	addwfc	??_readIAnalog+3,f
 10257  0C5B  0838               	movf	??_readIAnalog+16,w
 10258  0C5C  3DAC               	addwfc	??_readIAnalog+4,f
 10259  0C5D  0826               	movf	readIAnalog@channel,w
 10260  0C5E  00B9               	movwf	??_readIAnalog+17
 10261  0C5F  3001               	movlw	1
 10262  0C60                     u3305:	
 10263  0C60  35B9               	lslf	??_readIAnalog+17,f
 10264  0C61  3EFF               	addlw	-1
 10265  0C62  1D03               	skipz
 10266  0C63  2C60               	goto	u3305
 10267  0C64  3539               	lslf	??_readIAnalog+17,w
 10268  0C65  3E30               	addlw	(low (_Itotals| (0+256)))& (0+255)
 10269  0C66  0086               	movwf	6
 10270  0C67  3001               	movlw	1	; select bank2/3
 10271  0C68  0087               	movwf	7
 10272  0C69  0829               	movf	??_readIAnalog+1,w
 10273  0C6A  3FC0               	movwi [0]fsr1
 10274  0C6B  082A               	movf	??_readIAnalog+2,w
 10275  0C6C  3FC1               	movwi [1]fsr1
 10276  0C6D  082B               	movf	??_readIAnalog+3,w
 10277  0C6E  3FC2               	movwi [2]fsr1
 10278  0C6F  082C               	movf	??_readIAnalog+4,w
 10279  0C70  3FC3               	movwi [3]fsr1
 10280                           
 10281                           ;adc.c: 87: Isamples[channel][IsampleIndex] = value;
 10282  0C71  0021               	movlb	1	; select bank1
 10283  0C72  0851               	movf	(_IsampleIndex+1)^(0+128),w
 10284  0C73  0020               	movlb	0	; select bank0
 10285  0C74  00A9               	movwf	??_readIAnalog+1
 10286  0C75  0021               	movlb	1	; select bank1
 10287  0C76  0850               	movf	_IsampleIndex^(0+128),w
 10288  0C77  0020               	movlb	0	; select bank0
 10289  0C78  00A8               	movwf	??_readIAnalog
 10290  0C79  35A8               	lslf	??_readIAnalog,f
 10291  0C7A  0DA9               	rlf	??_readIAnalog+1,f
 10292  0C7B  0827               	movf	readIAnalog@channel+1,w
 10293  0C7C  00F1               	movwf	___wmul@multiplier+1
 10294  0C7D  0826               	movf	readIAnalog@channel,w
 10295  0C7E  00F0               	movwf	___wmul@multiplier
 10296  0C7F  3064               	movlw	100
 10297  0C80  00F2               	movwf	___wmul@multiplicand
 10298  0C81  3000               	movlw	0
 10299  0C82  00F3               	movwf	___wmul@multiplicand+1
 10300  0C83  319F  27A8  318B   	fcall	___wmul
 10301  0C86  30E8               	movlw	232
 10302  0C87  0020               	movlb	0	; select bank0
 10303  0C88  00AA               	movwf	??_readIAnalog+2
 10304  0C89  3021               	movlw	33
 10305  0C8A  00AB               	movwf	??_readIAnalog+3
 10306  0C8B  0870               	movf	?___wmul,w
 10307  0C8C  072A               	addwf	??_readIAnalog+2,w
 10308  0C8D  00AC               	movwf	??_readIAnalog+4
 10309  0C8E  0871               	movf	?___wmul+1,w
 10310  0C8F  3D2B               	addwfc	??_readIAnalog+3,w
 10311  0C90  00AD               	movwf	??_readIAnalog+5
 10312  0C91  0828               	movf	??_readIAnalog,w
 10313  0C92  072C               	addwf	??_readIAnalog+4,w
 10314  0C93  0086               	movwf	6
 10315  0C94  0829               	movf	??_readIAnalog+1,w
 10316  0C95  3D2D               	addwfc	??_readIAnalog+5,w
 10317  0C96  0087               	movwf	7
 10318  0C97  087B               	movf	readIAnalog@value,w
 10319  0C98  3FC0               	movwi [0]fsr1
 10320  0C99  087C               	movf	readIAnalog@value+1,w
 10321  0C9A  3FC1               	movwi [1]fsr1
 10322                           
 10323                           ;adc.c: 89: Itotals[channel] = Itotals[channel]+Isamples[channel][IsampleIndex];
 10324  0C9B  0826               	movf	readIAnalog@channel,w
 10325  0C9C  00A8               	movwf	??_readIAnalog
 10326  0C9D  3001               	movlw	1
 10327  0C9E                     u3315:	
 10328  0C9E  35A8               	lslf	??_readIAnalog,f
 10329  0C9F  3EFF               	addlw	-1
 10330  0CA0  1D03               	skipz
 10331  0CA1  2C9E               	goto	u3315
 10332  0CA2  3528               	lslf	??_readIAnalog,w
 10333  0CA3  3E30               	addlw	(low (_Itotals| (0+256)))& (0+255)
 10334  0CA4  0086               	movwf	6
 10335  0CA5  3001               	movlw	1	; select bank2/3
 10336  0CA6  0087               	movwf	7
 10337  0CA7  3F40               	moviw [0]fsr1
 10338  0CA8  00A9               	movwf	??_readIAnalog+1
 10339  0CA9  3F41               	moviw [1]fsr1
 10340  0CAA  00AA               	movwf	??_readIAnalog+2
 10341  0CAB  3F42               	moviw [2]fsr1
 10342  0CAC  00AB               	movwf	??_readIAnalog+3
 10343  0CAD  3F43               	moviw [3]fsr1
 10344  0CAE  00AC               	movwf	??_readIAnalog+4
 10345  0CAF  0021               	movlb	1	; select bank1
 10346  0CB0  0851               	movf	(_IsampleIndex+1)^(0+128),w
 10347  0CB1  0020               	movlb	0	; select bank0
 10348  0CB2  00AE               	movwf	??_readIAnalog+6
 10349  0CB3  0021               	movlb	1	; select bank1
 10350  0CB4  0850               	movf	_IsampleIndex^(0+128),w
 10351  0CB5  0020               	movlb	0	; select bank0
 10352  0CB6  00AD               	movwf	??_readIAnalog+5
 10353  0CB7  35AD               	lslf	??_readIAnalog+5,f
 10354  0CB8  0DAE               	rlf	??_readIAnalog+6,f
 10355  0CB9  0827               	movf	readIAnalog@channel+1,w
 10356  0CBA  00F1               	movwf	___wmul@multiplier+1
 10357  0CBB  0826               	movf	readIAnalog@channel,w
 10358  0CBC  00F0               	movwf	___wmul@multiplier
 10359  0CBD  3064               	movlw	100
 10360  0CBE  00F2               	movwf	___wmul@multiplicand
 10361  0CBF  3000               	movlw	0
 10362  0CC0  00F3               	movwf	___wmul@multiplicand+1
 10363  0CC1  319F  27A8  318B   	fcall	___wmul
 10364  0CC4  30E8               	movlw	232
 10365  0CC5  0020               	movlb	0	; select bank0
 10366  0CC6  00AF               	movwf	??_readIAnalog+7
 10367  0CC7  3021               	movlw	33
 10368  0CC8  00B0               	movwf	??_readIAnalog+8
 10369  0CC9  0870               	movf	?___wmul,w
 10370  0CCA  072F               	addwf	??_readIAnalog+7,w
 10371  0CCB  00B1               	movwf	??_readIAnalog+9
 10372  0CCC  0871               	movf	?___wmul+1,w
 10373  0CCD  3D30               	addwfc	??_readIAnalog+8,w
 10374  0CCE  00B2               	movwf	??_readIAnalog+10
 10375  0CCF  082D               	movf	??_readIAnalog+5,w
 10376  0CD0  0731               	addwf	??_readIAnalog+9,w
 10377  0CD1  0086               	movwf	6
 10378  0CD2  082E               	movf	??_readIAnalog+6,w
 10379  0CD3  3D32               	addwfc	??_readIAnalog+10,w
 10380  0CD4  0087               	movwf	7
 10381  0CD5  3F40               	moviw [0]fsr1
 10382  0CD6  00B3               	movwf	??_readIAnalog+11
 10383  0CD7  3F41               	moviw [1]fsr1
 10384  0CD8  00B4               	movwf	??_readIAnalog+12
 10385  0CD9  0833               	movf	??_readIAnalog+11,w
 10386  0CDA  00B5               	movwf	??_readIAnalog+13
 10387  0CDB  0834               	movf	??_readIAnalog+12,w
 10388  0CDC  00B6               	movwf	??_readIAnalog+14
 10389  0CDD  3000               	movlw	0
 10390  0CDE  1BB6               	btfsc	??_readIAnalog+14,7
 10391  0CDF  30FF               	movlw	255
 10392  0CE0  00B7               	movwf	??_readIAnalog+15
 10393  0CE1  00B8               	movwf	??_readIAnalog+16
 10394  0CE2  0835               	movf	??_readIAnalog+13,w
 10395  0CE3  07A9               	addwf	??_readIAnalog+1,f
 10396  0CE4  0836               	movf	??_readIAnalog+14,w
 10397  0CE5  3DAA               	addwfc	??_readIAnalog+2,f
 10398  0CE6  0837               	movf	??_readIAnalog+15,w
 10399  0CE7  3DAB               	addwfc	??_readIAnalog+3,f
 10400  0CE8  0838               	movf	??_readIAnalog+16,w
 10401  0CE9  3DAC               	addwfc	??_readIAnalog+4,f
 10402  0CEA  0826               	movf	readIAnalog@channel,w
 10403  0CEB  00B9               	movwf	??_readIAnalog+17
 10404  0CEC  3001               	movlw	1
 10405  0CED                     u3325:	
 10406  0CED  35B9               	lslf	??_readIAnalog+17,f
 10407  0CEE  3EFF               	addlw	-1
 10408  0CEF  1D03               	skipz
 10409  0CF0  2CED               	goto	u3325
 10410  0CF1  3539               	lslf	??_readIAnalog+17,w
 10411  0CF2  3E30               	addlw	(low (_Itotals| (0+256)))& (0+255)
 10412  0CF3  0086               	movwf	6
 10413  0CF4  3001               	movlw	1	; select bank2/3
 10414  0CF5  0087               	movwf	7
 10415  0CF6  0829               	movf	??_readIAnalog+1,w
 10416  0CF7  3FC0               	movwi [0]fsr1
 10417  0CF8  082A               	movf	??_readIAnalog+2,w
 10418  0CF9  3FC1               	movwi [1]fsr1
 10419  0CFA  082B               	movf	??_readIAnalog+3,w
 10420  0CFB  3FC2               	movwi [2]fsr1
 10421  0CFC  082C               	movf	??_readIAnalog+4,w
 10422  0CFD  3FC3               	movwi [3]fsr1
 10423                           
 10424                           ;adc.c: 91: if(channel>=(4-1))
 10425  0CFE  3000               	movlw	0
 10426  0CFF  0227               	subwf	readIAnalog@channel+1,w
 10427  0D00  3003               	movlw	3
 10428  0D01  1903               	skipnz
 10429  0D02  0226               	subwf	readIAnalog@channel,w
 10430  0D03  1C03               	skipc
 10431  0D04  2D13               	goto	l2964
 10432                           
 10433                           ;adc.c: 92: {
 10434                           ;adc.c: 93: IsampleIndex+=1;
 10435  0D05  3001               	movlw	1
 10436  0D06  0021               	movlb	1	; select bank1
 10437  0D07  07D0               	addwf	_IsampleIndex^(0+128),f
 10438  0D08  3000               	movlw	0
 10439  0D09  3DD1               	addwfc	(_IsampleIndex+1)^(0+128),f
 10440                           
 10441                           ;adc.c: 94: if(IsampleIndex >= 50)IsampleIndex = 0;
 10442  0D0A  3000               	movlw	0
 10443  0D0B  0251               	subwf	(_IsampleIndex+1)^(0+128),w
 10444  0D0C  3032               	movlw	50
 10445  0D0D  1903               	skipnz
 10446  0D0E  0250               	subwf	_IsampleIndex^(0+128),w
 10447  0D0F  1C03               	skipc
 10448  0D10  2D13               	goto	l2964
 10449  0D11  01D0               	clrf	_IsampleIndex^(0+128)
 10450  0D12  01D1               	clrf	(_IsampleIndex+1)^(0+128)
 10451  0D13                     l2964:	
 10452                           
 10453                           ;adc.c: 95: }
 10454                           ;adc.c: 97: value = Itotals[channel]/50;
 10455  0D13  3000               	movlw	0
 10456  0D14  00F3               	movwf	___aldiv@divisor+3
 10457  0D15  3000               	movlw	0
 10458  0D16  00F2               	movwf	___aldiv@divisor+2
 10459  0D17  3000               	movlw	0
 10460  0D18  00F1               	movwf	___aldiv@divisor+1
 10461  0D19  3032               	movlw	50
 10462  0D1A  00F0               	movwf	___aldiv@divisor
 10463  0D1B  0020               	movlb	0	; select bank0
 10464  0D1C  0826               	movf	readIAnalog@channel,w
 10465  0D1D  00A8               	movwf	??_readIAnalog
 10466  0D1E  3001               	movlw	1
 10467  0D1F                     u3355:	
 10468  0D1F  35A8               	lslf	??_readIAnalog,f
 10469  0D20  3EFF               	addlw	-1
 10470  0D21  1D03               	skipz
 10471  0D22  2D1F               	goto	u3355
 10472  0D23  3528               	lslf	??_readIAnalog,w
 10473  0D24  3E30               	addlw	(low (_Itotals| (0+256)))& (0+255)
 10474  0D25  0086               	movwf	6
 10475  0D26  3001               	movlw	1	; select bank2/3
 10476  0D27  0087               	movwf	7
 10477  0D28  3F40               	moviw [0]fsr1
 10478  0D29  00F4               	movwf	___aldiv@dividend
 10479  0D2A  3F41               	moviw [1]fsr1
 10480  0D2B  00F5               	movwf	___aldiv@dividend+1
 10481  0D2C  3F42               	moviw [2]fsr1
 10482  0D2D  00F6               	movwf	___aldiv@dividend+2
 10483  0D2E  3F43               	moviw [3]fsr1
 10484  0D2F  00F7               	movwf	___aldiv@dividend+3
 10485  0D30  3196  2625         	fcall	___aldiv
 10486  0D32  0871               	movf	?___aldiv+1,w
 10487  0D33  00FC               	movwf	readIAnalog@value+1
 10488  0D34  0870               	movf	?___aldiv,w
 10489  0D35  00FB               	movwf	readIAnalog@value
 10490                           
 10491                           ;adc.c: 99: return value;
 10492  0D36  087C               	movf	readIAnalog@value+1,w
 10493  0D37  0020               	movlb	0	; select bank0
 10494  0D38  00A7               	movwf	?_readIAnalog+1
 10495  0D39  087B               	movf	readIAnalog@value,w
 10496  0D3A  00A6               	movwf	?_readIAnalog
 10497  0D3B  0008               	return
 10498  0D3C                     __end_of_readIAnalog:	
 10499                           
 10500                           	psect	text10
 10501  1625                     __ptext10:	
 10502 ;; *************** function ___aldiv *****************
 10503 ;; Defined at:
 10504 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\aldiv.c"
 10505 ;; Parameters:    Size  Location     Type
 10506 ;;  divisor         4    0[COMMON] long 
 10507 ;;  dividend        4    4[COMMON] long 
 10508 ;; Auto vars:     Size  Location     Type
 10509 ;;  quotient        4    2[BANK0 ] long 
 10510 ;;  sign            1    1[BANK0 ] unsigned char 
 10511 ;;  counter         1    0[BANK0 ] unsigned char 
 10512 ;; Return value:  Size  Location     Type
 10513 ;;                  4    0[COMMON] long 
 10514 ;; Registers used:
 10515 ;;		wreg, status,2, status,0
 10516 ;; Tracked objects:
 10517 ;;		On entry : 0/0
 10518 ;;		On exit  : 0/0
 10519 ;;		Unchanged: 0/0
 10520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10521 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10522 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10523 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10524 ;;      Totals:         9       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10525 ;;Total ram usage:       15 bytes
 10526 ;; Hardware stack levels used:    1
 10527 ;; This function calls:
 10528 ;;		Nothing
 10529 ;; This function is called by:
 10530 ;;		_readIAnalog
 10531 ;;		_readVAnalog
 10532 ;; This function uses a non-reentrant model
 10533 ;;
 10534                           
 10535                           
 10536                           ;psect for function ___aldiv
 10537  1625                     ___aldiv:	
 10538                           
 10539                           ;incstack = 0
 10540                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
 10541  1625  0020               	movlb	0	; select bank0
 10542  1626  01A1               	clrf	___aldiv@sign
 10543  1627  1FF3               	btfss	___aldiv@divisor+3,7
 10544  1628  2E36               	goto	l673
 10545  1629  09F0               	comf	___aldiv@divisor,f
 10546  162A  09F1               	comf	___aldiv@divisor+1,f
 10547  162B  09F2               	comf	___aldiv@divisor+2,f
 10548  162C  09F3               	comf	___aldiv@divisor+3,f
 10549  162D  0AF0               	incf	___aldiv@divisor,f
 10550  162E  1903               	skipnz
 10551  162F  0AF1               	incf	___aldiv@divisor+1,f
 10552  1630  1903               	skipnz
 10553  1631  0AF2               	incf	___aldiv@divisor+2,f
 10554  1632  1903               	skipnz
 10555  1633  0AF3               	incf	___aldiv@divisor+3,f
 10556  1634  01A1               	clrf	___aldiv@sign
 10557  1635  0AA1               	incf	___aldiv@sign,f
 10558  1636                     l673:	
 10559  1636  1FF7               	btfss	___aldiv@dividend+3,7
 10560  1637  2E47               	goto	l2804
 10561  1638  09F4               	comf	___aldiv@dividend,f
 10562  1639  09F5               	comf	___aldiv@dividend+1,f
 10563  163A  09F6               	comf	___aldiv@dividend+2,f
 10564  163B  09F7               	comf	___aldiv@dividend+3,f
 10565  163C  0AF4               	incf	___aldiv@dividend,f
 10566  163D  1903               	skipnz
 10567  163E  0AF5               	incf	___aldiv@dividend+1,f
 10568  163F  1903               	skipnz
 10569  1640  0AF6               	incf	___aldiv@dividend+2,f
 10570  1641  1903               	skipnz
 10571  1642  0AF7               	incf	___aldiv@dividend+3,f
 10572  1643  3001               	movlw	1
 10573  1644  00F8               	movwf	??___aldiv
 10574  1645  0878               	movf	??___aldiv,w
 10575  1646  06A1               	xorwf	___aldiv@sign,f
 10576  1647                     l2804:	
 10577  1647  3000               	movlw	0
 10578  1648  00A5               	movwf	___aldiv@quotient+3
 10579  1649  3000               	movlw	0
 10580  164A  00A4               	movwf	___aldiv@quotient+2
 10581  164B  3000               	movlw	0
 10582  164C  00A3               	movwf	___aldiv@quotient+1
 10583  164D  3000               	movlw	0
 10584  164E  00A2               	movwf	___aldiv@quotient
 10585  164F  0873               	movf	___aldiv@divisor+3,w
 10586  1650  0472               	iorwf	___aldiv@divisor+2,w
 10587  1651  0471               	iorwf	___aldiv@divisor+1,w
 10588  1652  0470               	iorwf	___aldiv@divisor,w
 10589  1653  1903               	skipnz
 10590  1654  2E90               	goto	l2826
 10591  1655  01A0               	clrf	___aldiv@counter
 10592  1656  0AA0               	incf	___aldiv@counter,f
 10593  1657                     l2812:	
 10594  1657  1BF3               	btfsc	___aldiv@divisor+3,7
 10595  1658  2E65               	goto	l2814
 10596  1659  3001               	movlw	1
 10597  165A                     u2975:	
 10598  165A  35F0               	lslf	___aldiv@divisor,f
 10599  165B  0DF1               	rlf	___aldiv@divisor+1,f
 10600  165C  0DF2               	rlf	___aldiv@divisor+2,f
 10601  165D  0DF3               	rlf	___aldiv@divisor+3,f
 10602  165E  0B89               	decfsz	9,f
 10603  165F  2E5A               	goto	u2975
 10604  1660  3001               	movlw	1
 10605  1661  00F8               	movwf	??___aldiv
 10606  1662  0878               	movf	??___aldiv,w
 10607  1663  07A0               	addwf	___aldiv@counter,f
 10608  1664  2E57               	goto	l2812
 10609  1665                     l2814:	
 10610  1665  3001               	movlw	1
 10611  1666                     u2995:	
 10612  1666  35A2               	lslf	___aldiv@quotient,f
 10613  1667  0DA3               	rlf	___aldiv@quotient+1,f
 10614  1668  0DA4               	rlf	___aldiv@quotient+2,f
 10615  1669  0DA5               	rlf	___aldiv@quotient+3,f
 10616  166A  0B89               	decfsz	9,f
 10617  166B  2E66               	goto	u2995
 10618  166C  0873               	movf	___aldiv@divisor+3,w
 10619  166D  0277               	subwf	___aldiv@dividend+3,w
 10620  166E  1D03               	skipz
 10621  166F  2E7A               	goto	u3005
 10622  1670  0872               	movf	___aldiv@divisor+2,w
 10623  1671  0276               	subwf	___aldiv@dividend+2,w
 10624  1672  1D03               	skipz
 10625  1673  2E7A               	goto	u3005
 10626  1674  0871               	movf	___aldiv@divisor+1,w
 10627  1675  0275               	subwf	___aldiv@dividend+1,w
 10628  1676  1D03               	skipz
 10629  1677  2E7A               	goto	u3005
 10630  1678  0870               	movf	___aldiv@divisor,w
 10631  1679  0274               	subwf	___aldiv@dividend,w
 10632  167A                     u3005:	
 10633  167A  1C03               	skipc
 10634  167B  2E85               	goto	l2822
 10635  167C  0870               	movf	___aldiv@divisor,w
 10636  167D  02F4               	subwf	___aldiv@dividend,f
 10637  167E  0871               	movf	___aldiv@divisor+1,w
 10638  167F  3BF5               	subwfb	___aldiv@dividend+1,f
 10639  1680  0872               	movf	___aldiv@divisor+2,w
 10640  1681  3BF6               	subwfb	___aldiv@dividend+2,f
 10641  1682  0873               	movf	___aldiv@divisor+3,w
 10642  1683  3BF7               	subwfb	___aldiv@dividend+3,f
 10643  1684  1422               	bsf	___aldiv@quotient,0
 10644  1685                     l2822:	
 10645  1685  3001               	movlw	1
 10646  1686                     u3015:	
 10647  1686  36F3               	lsrf	___aldiv@divisor+3,f
 10648  1687  0CF2               	rrf	___aldiv@divisor+2,f
 10649  1688  0CF1               	rrf	___aldiv@divisor+1,f
 10650  1689  0CF0               	rrf	___aldiv@divisor,f
 10651  168A  0B89               	decfsz	9,f
 10652  168B  2E86               	goto	u3015
 10653  168C  3001               	movlw	1
 10654  168D  02A0               	subwf	___aldiv@counter,f
 10655  168E  1D03               	btfss	3,2
 10656  168F  2E65               	goto	l2814
 10657  1690                     l2826:	
 10658  1690  0821               	movf	___aldiv@sign,w
 10659  1691  1903               	btfsc	3,2
 10660  1692  2E9E               	goto	l2830
 10661  1693  09A2               	comf	___aldiv@quotient,f
 10662  1694  09A3               	comf	___aldiv@quotient+1,f
 10663  1695  09A4               	comf	___aldiv@quotient+2,f
 10664  1696  09A5               	comf	___aldiv@quotient+3,f
 10665  1697  0AA2               	incf	___aldiv@quotient,f
 10666  1698  1903               	skipnz
 10667  1699  0AA3               	incf	___aldiv@quotient+1,f
 10668  169A  1903               	skipnz
 10669  169B  0AA4               	incf	___aldiv@quotient+2,f
 10670  169C  1903               	skipnz
 10671  169D  0AA5               	incf	___aldiv@quotient+3,f
 10672  169E                     l2830:	
 10673  169E  0825               	movf	___aldiv@quotient+3,w
 10674  169F  00F3               	movwf	?___aldiv+3
 10675  16A0  0824               	movf	___aldiv@quotient+2,w
 10676  16A1  00F2               	movwf	?___aldiv+2
 10677  16A2  0823               	movf	___aldiv@quotient+1,w
 10678  16A3  00F1               	movwf	?___aldiv+1
 10679  16A4  0822               	movf	___aldiv@quotient,w
 10680  16A5  00F0               	movwf	?___aldiv
 10681  16A6  0008               	return
 10682  16A7                     __end_of___aldiv:	
 10683                           
 10684                           	psect	text11
 10685  15A3                     __ptext11:	
 10686 ;; *************** function _readButton *****************
 10687 ;; Defined at:
 10688 ;;		line 8 in file "buttons.c"
 10689 ;; Parameters:    Size  Location     Type
 10690 ;;		None
 10691 ;; Auto vars:     Size  Location     Type
 10692 ;;		None
 10693 ;; Return value:  Size  Location     Type
 10694 ;;                  1    wreg      unsigned char 
 10695 ;; Registers used:
 10696 ;;		wreg, status,2, status,0, pclath, cstack
 10697 ;; Tracked objects:
 10698 ;;		On entry : 0/0
 10699 ;;		On exit  : 0/0
 10700 ;;		Unchanged: 0/0
 10701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10702 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10703 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10704 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10705 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10706 ;;Total ram usage:        2 bytes
 10707 ;; Hardware stack levels used:    1
 10708 ;; Hardware stack levels required when called:    1
 10709 ;; This function calls:
 10710 ;;		_ADCRead
 10711 ;; This function is called by:
 10712 ;;		_main
 10713 ;; This function uses a non-reentrant model
 10714 ;;
 10715                           
 10716                           
 10717                           ;psect for function _readButton
 10718  15A3                     _readButton:	
 10719                           
 10720                           ;buttons.c: 10: readButtons=ADCRead(11);
 10721                           
 10722                           ;incstack = 0
 10723                           ; Regs used in _readButton: [wreg+status,2+status,0+pclath+cstack]
 10724  15A3  300B               	movlw	11
 10725  15A4  319F  2751  3195   	fcall	_ADCRead
 10726  15A7  0871               	movf	?_ADCRead+1,w
 10727  15A8  0020               	movlb	0	; select bank0
 10728  15A9  00E2               	movwf	_readButtons+1
 10729  15AA  0870               	movf	?_ADCRead,w
 10730  15AB  00E1               	movwf	_readButtons
 10731                           
 10732                           ;buttons.c: 12: if(readButtons>=365&&readButtons<405)
 10733  15AC  0862               	movf	_readButtons+1,w
 10734  15AD  3A80               	xorlw	128
 10735  15AE  00F4               	movwf	??_readButton
 10736  15AF  3081               	movlw	129
 10737  15B0  0274               	subwf	??_readButton,w
 10738  15B1  1D03               	skipz
 10739  15B2  2DB5               	goto	u3645
 10740  15B3  306D               	movlw	109
 10741  15B4  0261               	subwf	_readButtons,w
 10742  15B5                     u3645:	
 10743  15B5  1C03               	skipc
 10744  15B6  2DC7               	goto	l3072
 10745  15B7  0020               	movlb	0	; select bank0
 10746  15B8  0862               	movf	_readButtons+1,w
 10747  15B9  3A80               	xorlw	128
 10748  15BA  00F4               	movwf	??_readButton
 10749  15BB  3081               	movlw	129
 10750  15BC  0274               	subwf	??_readButton,w
 10751  15BD  1D03               	skipz
 10752  15BE  2DC1               	goto	u3655
 10753  15BF  3095               	movlw	149
 10754  15C0  0261               	subwf	_readButtons,w
 10755  15C1                     u3655:	
 10756  15C1  1803               	skipnc
 10757  15C2  2DC7               	goto	l3072
 10758                           
 10759                           ;buttons.c: 13: {
 10760                           ;buttons.c: 14: button=1;
 10761  15C3  0020               	movlb	0	; select bank0
 10762  15C4  01EB               	clrf	_button
 10763  15C5  0AEB               	incf	_button,f
 10764                           
 10765                           ;buttons.c: 15: }
 10766  15C6  2DF5               	goto	l3084
 10767  15C7                     l3072:	
 10768                           
 10769                           ;buttons.c: 17: else if(readButtons>=535&&readButtons<590)
 10770  15C7  0020               	movlb	0	; select bank0
 10771  15C8  0862               	movf	_readButtons+1,w
 10772  15C9  3A80               	xorlw	128
 10773  15CA  00F4               	movwf	??_readButton
 10774  15CB  3082               	movlw	130
 10775  15CC  0274               	subwf	??_readButton,w
 10776  15CD  1D03               	skipz
 10777  15CE  2DD1               	goto	u3665
 10778  15CF  3017               	movlw	23
 10779  15D0  0261               	subwf	_readButtons,w
 10780  15D1                     u3665:	
 10781  15D1  1C03               	skipc
 10782  15D2  2DE1               	goto	l3078
 10783  15D3  0020               	movlb	0	; select bank0
 10784  15D4  0862               	movf	_readButtons+1,w
 10785  15D5  3A80               	xorlw	128
 10786  15D6  00F4               	movwf	??_readButton
 10787  15D7  3082               	movlw	130
 10788  15D8  0274               	subwf	??_readButton,w
 10789  15D9  1D03               	skipz
 10790  15DA  2DDD               	goto	u3675
 10791  15DB  304E               	movlw	78
 10792  15DC  0261               	subwf	_readButtons,w
 10793  15DD                     u3675:	
 10794  15DD  1803               	skipnc
 10795  15DE  2DE1               	goto	l3078
 10796                           
 10797                           ;buttons.c: 18: {
 10798                           ;buttons.c: 19: button=2;
 10799  15DF  3002               	movlw	2
 10800  15E0  2DEE               	goto	L8
 10801  15E1                     l3078:	
 10802                           ;buttons.c: 20: }
 10803                           
 10804                           
 10805                           ;buttons.c: 22: else if(readButtons>745)
 10806  15E1  0020               	movlb	0	; select bank0
 10807  15E2  0862               	movf	_readButtons+1,w
 10808  15E3  3A80               	xorlw	128
 10809  15E4  00F4               	movwf	??_readButton
 10810  15E5  3082               	movlw	130
 10811  15E6  0274               	subwf	??_readButton,w
 10812  15E7  1D03               	skipz
 10813  15E8  2DEB               	goto	u3685
 10814  15E9  30EA               	movlw	234
 10815  15EA  0261               	subwf	_readButtons,w
 10816  15EB                     u3685:	
 10817  15EB  1C03               	skipc
 10818  15EC  2DF3               	goto	l3082
 10819                           
 10820                           ;buttons.c: 23: {
 10821                           ;buttons.c: 24: button=3;
 10822  15ED  3003               	movlw	3
 10823  15EE                     L8:	
 10824  15EE  00F4               	movwf	??_readButton
 10825  15EF  0874               	movf	??_readButton,w
 10826  15F0  0020               	movlb	0	; select bank0
 10827  15F1  00EB               	movwf	_button
 10828                           
 10829                           ;buttons.c: 25: }
 10830  15F2  2DF5               	goto	l3084
 10831  15F3                     l3082:	
 10832                           
 10833                           ;buttons.c: 27: else
 10834                           ;buttons.c: 28: {
 10835                           ;buttons.c: 29: button=0;
 10836  15F3  0020               	movlb	0	; select bank0
 10837  15F4  01EB               	clrf	_button
 10838  15F5                     l3084:	
 10839                           
 10840                           ;buttons.c: 30: }
 10841                           ;buttons.c: 32: if (button!=0)
 10842  15F5  086B               	movf	_button,w
 10843  15F6  1903               	btfsc	3,2
 10844  15F7  2E22               	goto	l3104
 10845                           
 10846                           ;buttons.c: 33: {
 10847                           ;buttons.c: 34: if (button!=lastButton)
 10848  15F8  086B               	movf	_button,w
 10849  15F9  066A               	xorwf	_lastButton,w
 10850  15FA  1903               	skipnz
 10851  15FB  2E01               	goto	l3092
 10852                           
 10853                           ;buttons.c: 35: {
 10854                           ;buttons.c: 36: lastButton=button;
 10855  15FC  086B               	movf	_button,w
 10856  15FD  00F4               	movwf	??_readButton
 10857  15FE  0874               	movf	??_readButton,w
 10858  15FF  00EA               	movwf	_lastButton
 10859  1600  2E22               	goto	l3104
 10860  1601                     l3092:	
 10861                           ;buttons.c: 38: }
 10862                           
 10863                           ;buttons.c: 37: j=0;
 10864                           
 10865                           
 10866                           ;buttons.c: 39: else
 10867                           ;buttons.c: 40: {
 10868                           ;buttons.c: 41: j+=1;
 10869  1601  3001               	movlw	1
 10870  1602  00F4               	movwf	??_readButton
 10871  1603  0874               	movf	??_readButton,w
 10872  1604  07E9               	addwf	_j,f
 10873                           
 10874                           ;buttons.c: 43: if(j==1)
 10875  1605  0369               	decf	_j,w
 10876  1606  1D03               	btfss	3,2
 10877  1607  2E0A               	goto	l3098
 10878                           
 10879                           ;buttons.c: 44: {
 10880                           ;buttons.c: 45: return (lastButton);
 10881  1608  086A               	movf	_lastButton,w
 10882  1609  0008               	return
 10883  160A                     l3098:	
 10884                           
 10885                           ;buttons.c: 46: }
 10886                           ;buttons.c: 48: if (j>10)
 10887  160A  0869               	movf	_j,w
 10888  160B  3A80               	xorlw	128
 10889  160C  3E75               	addlw	-139
 10890  160D  1C03               	skipc
 10891  160E  2E23               	goto	l3106
 10892                           
 10893                           ;buttons.c: 49: {
 10894                           ;buttons.c: 50: _delay((unsigned long)((25)*(32000000/4000.0)));
 10895  160F  3002               	movlw	2
 10896  1610  00F5               	movwf	??_readButton+1
 10897  1611  3004               	movlw	4
 10898  1612  00F4               	movwf	??_readButton
 10899  1613  30BA               	movlw	186
 10900  1614                     u4317:	
 10901  1614  0B89               	decfsz	9,f
 10902  1615  2E14               	goto	u4317
 10903  1616  0BF4               	decfsz	??_readButton,f
 10904  1617  2E14               	goto	u4317
 10905  1618  0BF5               	decfsz	??_readButton+1,f
 10906  1619  2E14               	goto	u4317
 10907  161A  3200               	nop2
 10908                           
 10909                           ;buttons.c: 51: j=10;
 10910  161B  300A               	movlw	10
 10911  161C  00F4               	movwf	??_readButton
 10912  161D  0874               	movf	??_readButton,w
 10913  161E  0020               	movlb	0	; select bank0
 10914  161F  00E9               	movwf	_j
 10915                           
 10916                           ;buttons.c: 52: return (lastButton);
 10917  1620  086A               	movf	_lastButton,w
 10918  1621  0008               	return
 10919  1622                     l3104:	
 10920                           ;buttons.c: 53: }
 10921                           ;buttons.c: 54: }
 10922                           ;buttons.c: 55: goto end;
 10923                           
 10924                           
 10925                           ;buttons.c: 56: }
 10926                           ;buttons.c: 58: j=0;
 10927  1622  01E9               	clrf	_j
 10928  1623                     l3106:	
 10929                           ;buttons.c: 60: end:
 10930                           
 10931                           
 10932                           ;buttons.c: 62: return (0);
 10933  1623  3000               	movlw	0
 10934  1624  0008               	return
 10935  1625                     __end_of_readButton:	
 10936                           
 10937                           	psect	text12
 10938  1F51                     __ptext12:	
 10939 ;; *************** function _ADCRead *****************
 10940 ;; Defined at:
 10941 ;;		line 21 in file "adc.c"
 10942 ;; Parameters:    Size  Location     Type
 10943 ;;  channel         1    wreg     enum E14315
 10944 ;; Auto vars:     Size  Location     Type
 10945 ;;  channel         1    3[COMMON] enum E14315
 10946 ;; Return value:  Size  Location     Type
 10947 ;;                  2    0[COMMON] int 
 10948 ;; Registers used:
 10949 ;;		wreg
 10950 ;; Tracked objects:
 10951 ;;		On entry : 0/0
 10952 ;;		On exit  : 0/0
 10953 ;;		Unchanged: 0/0
 10954 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10955 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10956 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10957 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10958 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10959 ;;Total ram usage:        4 bytes
 10960 ;; Hardware stack levels used:    1
 10961 ;; This function calls:
 10962 ;;		Nothing
 10963 ;; This function is called by:
 10964 ;;		_readIAnalog
 10965 ;;		_readVAnalog
 10966 ;;		_readButton
 10967 ;;		_main
 10968 ;; This function uses a non-reentrant model
 10969 ;;
 10970                           
 10971                           
 10972                           ;psect for function _ADCRead
 10973  1F51                     _ADCRead:	
 10974                           
 10975                           ;incstack = 0
 10976                           ; Regs used in _ADCRead: [wreg]
 10977                           ;ADCRead@channel stored from wreg
 10978  1F51  00F3               	movwf	ADCRead@channel
 10979                           
 10980                           ;adc.c: 23: ADPCH = channel_VSS;
 10981  1F52  303C               	movlw	60
 10982  1F53  0021               	movlb	1	; select bank1
 10983  1F54  009E               	movwf	30	;volatile
 10984                           
 10985                           ;adc.c: 25: ADCON0bits.ADON = 1;
 10986  1F55  1793               	bsf	19,7	;volatile
 10987                           
 10988                           ;adc.c: 27: ADCON0bits.ADCONT = 0;
 10989  1F56  1313               	bcf	19,6	;volatile
 10990                           
 10991                           ;adc.c: 29: ADCON0bits.ADGO = 1;
 10992  1F57  1413               	bsf	19,0	;volatile
 10993  1F58                     l65:	
 10994                           ;adc.c: 32: {
 10995                           
 10996                           ;adc.c: 31: while(ADCON0bits.ADGO)
 10997                           
 10998  1F58  1813               	btfsc	19,0	;volatile
 10999  1F59  2F58               	goto	l65
 11000                           
 11001                           ;adc.c: 33: }
 11002                           ;adc.c: 35: ADPCH = channel;
 11003  1F5A  0873               	movf	ADCRead@channel,w
 11004  1F5B  009E               	movwf	30	;volatile
 11005                           
 11006                           ;adc.c: 37: ADCON0bits.ADON = 1;
 11007  1F5C  1793               	bsf	19,7	;volatile
 11008                           
 11009                           ;adc.c: 39: ADCON0bits.ADCONT = 0;
 11010  1F5D  1313               	bcf	19,6	;volatile
 11011                           
 11012                           ;adc.c: 41: ADCON0bits.ADGO = 1;
 11013  1F5E  1413               	bsf	19,0	;volatile
 11014  1F5F                     l68:	
 11015                           ;adc.c: 44: {
 11016                           
 11017                           ;adc.c: 43: while(ADCON0bits.ADGO)
 11018                           
 11019  1F5F  1813               	btfsc	19,0	;volatile
 11020  1F60  2F5F               	goto	l68
 11021                           
 11022                           ;adc.c: 45: }
 11023                           ;adc.c: 47: return ((ADRESH<<8)+ADRESL);
 11024  1F61  080D               	movf	13,w	;volatile
 11025  1F62  00F1               	movwf	?_ADCRead+1
 11026  1F63  080C               	movf	12,w	;volatile
 11027  1F64  00F0               	movwf	?_ADCRead
 11028  1F65  0008               	return
 11029  1F66                     __end_of_ADCRead:	
 11030                           
 11031                           	psect	text13
 11032  0009                     __ptext13:	
 11033 ;; *************** function _cc_cv_mode *****************
 11034 ;; Defined at:
 11035 ;;		line 83 in file "battery_charger.c"
 11036 ;; Parameters:    Size  Location     Type
 11037 ;;  z               1    wreg     unsigned char 
 11038 ;; Auto vars:     Size  Location     Type
 11039 ;;  z               1   44[BANK0 ] unsigned char 
 11040 ;; Return value:  Size  Location     Type
 11041 ;;                  1    wreg      void 
 11042 ;; Registers used:
 11043 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11044 ;; Tracked objects:
 11045 ;;		On entry : 0/0
 11046 ;;		On exit  : 0/0
 11047 ;;		Unchanged: 0/0
 11048 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11049 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11050 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11051 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11052 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11053 ;;Total ram usage:        8 bytes
 11054 ;; Hardware stack levels used:    1
 11055 ;; Hardware stack levels required when called:    2
 11056 ;; This function calls:
 11057 ;;		___awtoft
 11058 ;;		___ftmul
 11059 ;;		___fttol
 11060 ;; This function is called by:
 11061 ;;		_main
 11062 ;; This function uses a non-reentrant model
 11063 ;;
 11064                           
 11065                           
 11066                           ;psect for function _cc_cv_mode
 11067  0009                     _cc_cv_mode:	
 11068                           
 11069                           ;incstack = 0
 11070                           ; Regs used in _cc_cv_mode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11071                           ;cc_cv_mode@z stored from wreg
 11072  0009  0020               	movlb	0	; select bank0
 11073  000A  00CC               	movwf	cc_cv_mode@z
 11074                           
 11075                           ;battery_charger.c: 85: if(voltage[z]>=Vref[z])
 11076  000B  354C               	lslf	cc_cv_mode@z,w
 11077  000C  3EB8               	addlw	(low (_Vref| 0))& (0+255)
 11078  000D  0086               	movwf	6
 11079  000E  0187               	clrf	7
 11080  000F  3F40               	moviw [0]fsr1
 11081  0010  00C5               	movwf	??_cc_cv_mode
 11082  0011  3F41               	moviw [1]fsr1
 11083  0012  00C6               	movwf	??_cc_cv_mode+1
 11084  0013  354C               	lslf	cc_cv_mode@z,w
 11085  0014  3EA8               	addlw	(low (_voltage| 0))& (0+255)
 11086  0015  0086               	movwf	6
 11087  0016  0187               	clrf	7
 11088  0017  3F40               	moviw [0]fsr1
 11089  0018  00C7               	movwf	??_cc_cv_mode+2
 11090  0019  3F41               	moviw [1]fsr1
 11091  001A  00C8               	movwf	??_cc_cv_mode+3
 11092  001B  0848               	movf	??_cc_cv_mode+3,w
 11093  001C  3A80               	xorlw	128
 11094  001D  00C9               	movwf	??_cc_cv_mode+4
 11095  001E  0846               	movf	??_cc_cv_mode+1,w
 11096  001F  3A80               	xorlw	128
 11097  0020  0249               	subwf	??_cc_cv_mode+4,w
 11098  0021  1D03               	skipz
 11099  0022  2825               	goto	u3545
 11100  0023  0845               	movf	??_cc_cv_mode,w
 11101  0024  0247               	subwf	??_cc_cv_mode+2,w
 11102  0025                     u3545:	
 11103  0025  1C03               	skipc
 11104  0026  2865               	goto	l3048
 11105                           
 11106                           ;battery_charger.c: 86: {
 11107                           ;battery_charger.c: 87: if(VHoldMode[z]<9)VHoldMode[z]+=1;
 11108  0027  0020               	movlb	0	; select bank0
 11109  0028  084C               	movf	cc_cv_mode@z,w
 11110  0029  3E63               	addlw	(low (_VHoldMode| 0))& (0+255)
 11111  002A  0086               	movwf	6
 11112  002B  0187               	clrf	7
 11113  002C  0801               	movf	1,w
 11114  002D  3A80               	xorlw	128
 11115  002E  3E77               	addlw	-137
 11116  002F  1803               	skipnc
 11117  0030  2839               	goto	l140
 11118  0031  3001               	movlw	1
 11119  0032  00C5               	movwf	??_cc_cv_mode
 11120  0033  084C               	movf	cc_cv_mode@z,w
 11121  0034  3E63               	addlw	(low (_VHoldMode| 0))& (0+255)
 11122  0035  0086               	movwf	6
 11123  0036  0187               	clrf	7
 11124  0037  0845               	movf	??_cc_cv_mode,w
 11125  0038  0781               	addwf	1,f
 11126  0039                     l140:	
 11127                           
 11128                           ;battery_charger.c: 88: if(VHoldMode[z]<9)VHoldMode[z]+=1;
 11129  0039  084C               	movf	cc_cv_mode@z,w
 11130  003A  3E63               	addlw	(low (_VHoldMode| 0))& (0+255)
 11131  003B  0086               	movwf	6
 11132  003C  0187               	clrf	7
 11133  003D  0801               	movf	1,w
 11134  003E  3A80               	xorlw	128
 11135  003F  3E77               	addlw	-137
 11136  0040  1803               	skipnc
 11137  0041  284A               	goto	l141
 11138  0042  3001               	movlw	1
 11139  0043  00C5               	movwf	??_cc_cv_mode
 11140  0044  084C               	movf	cc_cv_mode@z,w
 11141  0045  3E63               	addlw	(low (_VHoldMode| 0))& (0+255)
 11142  0046  0086               	movwf	6
 11143  0047  0187               	clrf	7
 11144  0048  0845               	movf	??_cc_cv_mode,w
 11145  0049  0781               	addwf	1,f
 11146  004A                     l141:	
 11147                           
 11148                           ;battery_charger.c: 90: if(cc_cv[z])
 11149  004A  084C               	movf	cc_cv_mode@z,w
 11150  004B  3ECC               	addlw	(low (_cc_cv| 0))& (0+255)
 11151  004C  0086               	movwf	6
 11152  004D  0187               	clrf	7
 11153  004E  0801               	movf	1,w
 11154  004F  1903               	btfsc	3,2
 11155  0050  2858               	goto	l3044
 11156                           
 11157                           ;battery_charger.c: 91: {
 11158                           ;battery_charger.c: 92: cc_cv[z]-=1;
 11159  0051  084C               	movf	cc_cv_mode@z,w
 11160  0052  3ECC               	addlw	(low (_cc_cv| 0))& (0+255)
 11161  0053  0086               	movwf	6
 11162  0054  0187               	clrf	7
 11163  0055  3001               	movlw	1
 11164  0056  0281               	subwf	1,f
 11165                           
 11166                           ;battery_charger.c: 93: }
 11167  0057  288D               	goto	l145
 11168  0058                     l3044:	
 11169                           
 11170                           ;battery_charger.c: 94: else
 11171                           ;battery_charger.c: 95: {
 11172                           ;battery_charger.c: 96: if(Imode[z])
 11173  0058  084C               	movf	cc_cv_mode@z,w
 11174  0059  3E65               	addlw	(low (_Imode| 0))& (0+255)
 11175  005A  0086               	movwf	6
 11176  005B  0187               	clrf	7
 11177  005C  0801               	movf	1,w
 11178  005D  1903               	btfsc	3,2
 11179  005E  288D               	goto	l145
 11180                           
 11181                           ;battery_charger.c: 97: {
 11182                           ;battery_charger.c: 98: Imode[z]=0;
 11183  005F  084C               	movf	cc_cv_mode@z,w
 11184  0060  3E65               	addlw	(low (_Imode| 0))& (0+255)
 11185  0061  0086               	movwf	6
 11186  0062  0187               	clrf	7
 11187  0063  0181               	clrf	1
 11188                           
 11189                           ;battery_charger.c: 99: }
 11190                           ;battery_charger.c: 100: }
 11191                           ;battery_charger.c: 101: }
 11192  0064  288D               	goto	l145
 11193  0065                     l3048:	
 11194                           
 11195                           ;battery_charger.c: 102: else
 11196                           ;battery_charger.c: 103: {
 11197                           ;battery_charger.c: 104: VHoldMode[z]-=1;
 11198  0065  30FF               	movlw	255
 11199  0066  0020               	movlb	0	; select bank0
 11200  0067  00C5               	movwf	??_cc_cv_mode
 11201  0068  084C               	movf	cc_cv_mode@z,w
 11202  0069  3E63               	addlw	(low (_VHoldMode| 0))& (0+255)
 11203  006A  0086               	movwf	6
 11204  006B  0187               	clrf	7
 11205  006C  0845               	movf	??_cc_cv_mode,w
 11206  006D  0781               	addwf	1,f
 11207                           
 11208                           ;battery_charger.c: 105: if(VHoldMode[z]<(9*-1))
 11209  006E  084C               	movf	cc_cv_mode@z,w
 11210  006F  3E63               	addlw	(low (_VHoldMode| 0))& (0+255)
 11211  0070  0086               	movwf	6
 11212  0071  0187               	clrf	7
 11213  0072  0801               	movf	1,w
 11214  0073  3A80               	xorlw	128
 11215  0074  3E89               	addlw	137
 11216  0075  1803               	skipnc
 11217  0076  288D               	goto	l145
 11218                           
 11219                           ;battery_charger.c: 106: {
 11220                           ;battery_charger.c: 107: Imode[z]=1;
 11221  0077  084C               	movf	cc_cv_mode@z,w
 11222  0078  3E65               	addlw	(low (_Imode| 0))& (0+255)
 11223  0079  0086               	movwf	6
 11224  007A  0187               	clrf	7
 11225  007B  0181               	clrf	1
 11226  007C  0A81               	incf	1,f
 11227                           
 11228                           ;battery_charger.c: 108: cc_cv[z]=(9*2);
 11229  007D  3012               	movlw	18
 11230  007E  00C5               	movwf	??_cc_cv_mode
 11231  007F  084C               	movf	cc_cv_mode@z,w
 11232  0080  3ECC               	addlw	(low (_cc_cv| 0))& (0+255)
 11233  0081  0086               	movwf	6
 11234  0082  0187               	clrf	7
 11235  0083  0845               	movf	??_cc_cv_mode,w
 11236  0084  0081               	movwf	1
 11237                           
 11238                           ;battery_charger.c: 109: VHoldMode[z]=(9*-1);
 11239  0085  30F7               	movlw	247
 11240  0086  00C5               	movwf	??_cc_cv_mode
 11241  0087  084C               	movf	cc_cv_mode@z,w
 11242  0088  3E63               	addlw	(low (_VHoldMode| 0))& (0+255)
 11243  0089  0086               	movwf	6
 11244  008A  0187               	clrf	7
 11245  008B  0845               	movf	??_cc_cv_mode,w
 11246  008C  0081               	movwf	1
 11247  008D                     l145:	
 11248                           
 11249                           ;battery_charger.c: 110: }
 11250                           ;battery_charger.c: 111: }
 11251                           ;battery_charger.c: 113: if(current[z]>Iref[z])
 11252  008D  354C               	lslf	cc_cv_mode@z,w
 11253  008E  3EB0               	addlw	(low (_current| 0))& (0+255)
 11254  008F  0086               	movwf	6
 11255  0090  0187               	clrf	7
 11256  0091  3F40               	moviw [0]fsr1
 11257  0092  00C5               	movwf	??_cc_cv_mode
 11258  0093  3F41               	moviw [1]fsr1
 11259  0094  00C6               	movwf	??_cc_cv_mode+1
 11260  0095  354C               	lslf	cc_cv_mode@z,w
 11261  0096  3EC0               	addlw	(low (_Iref| 0))& (0+255)
 11262  0097  0086               	movwf	6
 11263  0098  0187               	clrf	7
 11264  0099  3F40               	moviw [0]fsr1
 11265  009A  00C7               	movwf	??_cc_cv_mode+2
 11266  009B  3F41               	moviw [1]fsr1
 11267  009C  00C8               	movwf	??_cc_cv_mode+3
 11268  009D  0848               	movf	??_cc_cv_mode+3,w
 11269  009E  3A80               	xorlw	128
 11270  009F  00C9               	movwf	??_cc_cv_mode+4
 11271  00A0  0846               	movf	??_cc_cv_mode+1,w
 11272  00A1  3A80               	xorlw	128
 11273  00A2  0249               	subwf	??_cc_cv_mode+4,w
 11274  00A3  1D03               	skipz
 11275  00A4  28A7               	goto	u3605
 11276  00A5  0845               	movf	??_cc_cv_mode,w
 11277  00A6  0247               	subwf	??_cc_cv_mode+2,w
 11278  00A7                     u3605:	
 11279  00A7  1803               	skipnc
 11280  00A8  0008               	return
 11281                           
 11282                           ;battery_charger.c: 114: {
 11283                           ;battery_charger.c: 115: if(!(Imode[z]))
 11284  00A9  0020               	movlb	0	; select bank0
 11285  00AA  084C               	movf	cc_cv_mode@z,w
 11286  00AB  3E65               	addlw	(low (_Imode| 0))& (0+255)
 11287  00AC  0086               	movwf	6
 11288  00AD  0187               	clrf	7
 11289  00AE  0801               	movf	1,w
 11290  00AF  1D03               	btfss	3,2
 11291  00B0  0008               	return
 11292                           
 11293                           ;battery_charger.c: 116: {
 11294                           ;battery_charger.c: 117: if(batteryState[z]==FLOAT)
 11295  00B1  084C               	movf	cc_cv_mode@z,w
 11296  00B2  3E67               	addlw	(low (_batteryState| 0))& (0+255)
 11297  00B3  0086               	movwf	6
 11298  00B4  0187               	clrf	7
 11299  00B5  3005               	movlw	5
 11300  00B6  0601               	xorwf	1,w
 11301  00B7  1D03               	btfss	3,2
 11302  00B8  0008               	return
 11303                           
 11304                           ;battery_charger.c: 118: {
 11305                           ;battery_charger.c: 119: if(voltage[z]<1350+(int16_t)((250-batteryTemp)*.24)-70)
 11306  00B9  096D               	comf	_batteryTemp,w
 11307  00BA  00C5               	movwf	??_cc_cv_mode
 11308  00BB  096E               	comf	_batteryTemp+1,w
 11309  00BC  00C6               	movwf	??_cc_cv_mode+1
 11310  00BD  0AC5               	incf	??_cc_cv_mode,f
 11311  00BE  1903               	skipnz
 11312  00BF  0AC6               	incf	??_cc_cv_mode+1,f
 11313  00C0  0845               	movf	??_cc_cv_mode,w
 11314  00C1  3EFA               	addlw	250
 11315  00C2  00A4               	movwf	___awtoft@c
 11316  00C3  3000               	movlw	0
 11317  00C4  3D46               	addwfc	??_cc_cv_mode+1,w
 11318  00C5  00A5               	movwf	___awtoft@c+1
 11319  00C6  3191  2140  3180   	fcall	___awtoft
 11320  00C9  0020               	movlb	0	; select bank0
 11321  00CA  0824               	movf	?___awtoft,w
 11322  00CB  00AA               	movwf	___ftmul@f2
 11323  00CC  0825               	movf	?___awtoft+1,w
 11324  00CD  00AB               	movwf	___ftmul@f2+1
 11325  00CE  0826               	movf	?___awtoft+2,w
 11326  00CF  00AC               	movwf	___ftmul@f2+2
 11327  00D0  30C3               	movlw	195
 11328  00D1  00A7               	movwf	___ftmul@f1
 11329  00D2  3075               	movlw	117
 11330  00D3  00A8               	movwf	___ftmul@f1+1
 11331  00D4  303E               	movlw	62
 11332  00D5  00A9               	movwf	___ftmul@f1+2
 11333  00D6  3188  20A6  3180   	fcall	___ftmul
 11334  00D9  0020               	movlb	0	; select bank0
 11335  00DA  0827               	movf	?___ftmul,w
 11336  00DB  00B7               	movwf	___fttol@f1
 11337  00DC  0828               	movf	?___ftmul+1,w
 11338  00DD  00B8               	movwf	___fttol@f1+1
 11339  00DE  0829               	movf	?___ftmul+2,w
 11340  00DF  00B9               	movwf	___fttol@f1+2
 11341  00E0  3188  201F  3180   	fcall	___fttol
 11342  00E3  0020               	movlb	0	; select bank0
 11343  00E4  0837               	movf	?___fttol,w
 11344  00E5  3E00               	addlw	0
 11345  00E6  00C7               	movwf	??_cc_cv_mode+2
 11346  00E7  3005               	movlw	5
 11347  00E8  3D38               	addwfc	?___fttol+1,w
 11348  00E9  00C8               	movwf	??_cc_cv_mode+3
 11349  00EA  354C               	lslf	cc_cv_mode@z,w
 11350  00EB  3EA8               	addlw	(low (_voltage| 0))& (0+255)
 11351  00EC  0086               	movwf	6
 11352  00ED  0187               	clrf	7
 11353  00EE  3F40               	moviw [0]fsr1
 11354  00EF  00C9               	movwf	??_cc_cv_mode+4
 11355  00F0  3F41               	moviw [1]fsr1
 11356  00F1  00CA               	movwf	??_cc_cv_mode+5
 11357  00F2  084A               	movf	??_cc_cv_mode+5,w
 11358  00F3  3A80               	xorlw	128
 11359  00F4  00CB               	movwf	??_cc_cv_mode+6
 11360  00F5  0848               	movf	??_cc_cv_mode+3,w
 11361  00F6  3A80               	xorlw	128
 11362  00F7  024B               	subwf	??_cc_cv_mode+6,w
 11363  00F8  1D03               	skipz
 11364  00F9  28FC               	goto	u3635
 11365  00FA  0847               	movf	??_cc_cv_mode+2,w
 11366  00FB  0249               	subwf	??_cc_cv_mode+4,w
 11367  00FC                     u3635:	
 11368  00FC  1803               	skipnc
 11369  00FD  0008               	return
 11370                           
 11371                           ;battery_charger.c: 120: {
 11372                           ;battery_charger.c: 121: batteryState[z]=CHARGE;
 11373  00FE  3004               	movlw	4
 11374  00FF  0020               	movlb	0	; select bank0
 11375  0100  00C5               	movwf	??_cc_cv_mode
 11376  0101  084C               	movf	cc_cv_mode@z,w
 11377  0102  3E67               	addlw	(low (_batteryState| 0))& (0+255)
 11378  0103  0086               	movwf	6
 11379  0104  0187               	clrf	7
 11380  0105  0845               	movf	??_cc_cv_mode,w
 11381  0106  0081               	movwf	1
 11382                           
 11383                           ;battery_charger.c: 122: Vref[z]=1425+(int16_t)((250-batteryTemp)*.24);
 11384  0107  096D               	comf	_batteryTemp,w
 11385  0108  00C5               	movwf	??_cc_cv_mode
 11386  0109  096E               	comf	_batteryTemp+1,w
 11387  010A  00C6               	movwf	??_cc_cv_mode+1
 11388  010B  0AC5               	incf	??_cc_cv_mode,f
 11389  010C  1903               	skipnz
 11390  010D  0AC6               	incf	??_cc_cv_mode+1,f
 11391  010E  0845               	movf	??_cc_cv_mode,w
 11392  010F  3EFA               	addlw	250
 11393  0110  00A4               	movwf	___awtoft@c
 11394  0111  3000               	movlw	0
 11395  0112  3D46               	addwfc	??_cc_cv_mode+1,w
 11396  0113  00A5               	movwf	___awtoft@c+1
 11397  0114  3191  2140  3180   	fcall	___awtoft
 11398  0117  0020               	movlb	0	; select bank0
 11399  0118  0824               	movf	?___awtoft,w
 11400  0119  00AA               	movwf	___ftmul@f2
 11401  011A  0825               	movf	?___awtoft+1,w
 11402  011B  00AB               	movwf	___ftmul@f2+1
 11403  011C  0826               	movf	?___awtoft+2,w
 11404  011D  00AC               	movwf	___ftmul@f2+2
 11405  011E  30C3               	movlw	195
 11406  011F  00A7               	movwf	___ftmul@f1
 11407  0120  3075               	movlw	117
 11408  0121  00A8               	movwf	___ftmul@f1+1
 11409  0122  303E               	movlw	62
 11410  0123  00A9               	movwf	___ftmul@f1+2
 11411  0124  3188  20A6  3180   	fcall	___ftmul
 11412  0127  0020               	movlb	0	; select bank0
 11413  0128  0827               	movf	?___ftmul,w
 11414  0129  00B7               	movwf	___fttol@f1
 11415  012A  0828               	movf	?___ftmul+1,w
 11416  012B  00B8               	movwf	___fttol@f1+1
 11417  012C  0829               	movf	?___ftmul+2,w
 11418  012D  00B9               	movwf	___fttol@f1+2
 11419  012E  3188  201F         	fcall	___fttol
 11420  0130  0020               	movlb	0	; select bank0
 11421  0131  0837               	movf	?___fttol,w
 11422  0132  3E91               	addlw	145
 11423  0133  00C7               	movwf	??_cc_cv_mode+2
 11424  0134  3005               	movlw	5
 11425  0135  3D38               	addwfc	?___fttol+1,w
 11426  0136  00C8               	movwf	??_cc_cv_mode+3
 11427  0137  354C               	lslf	cc_cv_mode@z,w
 11428  0138  3EB8               	addlw	(low (_Vref| 0))& (0+255)
 11429  0139  0086               	movwf	6
 11430  013A  0187               	clrf	7
 11431  013B  0847               	movf	??_cc_cv_mode+2,w
 11432  013C  3FC0               	movwi [0]fsr1
 11433  013D  0848               	movf	??_cc_cv_mode+3,w
 11434  013E  3FC1               	movwi [1]fsr1
 11435                           
 11436                           ;battery_charger.c: 123: Iref[z]=35;
 11437  013F  354C               	lslf	cc_cv_mode@z,w
 11438  0140  3EC0               	addlw	(low (_Iref| 0))& (0+255)
 11439  0141  0086               	movwf	6
 11440  0142  0187               	clrf	7
 11441  0143  3023               	movlw	35
 11442  0144  3FC0               	movwi [0]fsr1
 11443  0145  3000               	movlw	0
 11444  0146  3FC1               	movwi [1]fsr1
 11445  0147  0008               	return
 11446  0148                     __end_of_cc_cv_mode:	
 11447                           
 11448                           	psect	text14
 11449  138D                     __ptext14:	
 11450 ;; *************** function _calculateCurrent3 *****************
 11451 ;; Defined at:
 11452 ;;		line 424 in file "main.c"
 11453 ;; Parameters:    Size  Location     Type
 11454 ;;		None
 11455 ;; Auto vars:     Size  Location     Type
 11456 ;;		None
 11457 ;; Return value:  Size  Location     Type
 11458 ;;                  1    wreg      void 
 11459 ;; Registers used:
 11460 ;;		wreg, status,2, status,0, pclath, cstack
 11461 ;; Tracked objects:
 11462 ;;		On entry : 0/0
 11463 ;;		On exit  : 0/0
 11464 ;;		Unchanged: 0/0
 11465 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11466 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11467 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11468 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11469 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11470 ;;Total ram usage:        3 bytes
 11471 ;; Hardware stack levels used:    1
 11472 ;; Hardware stack levels required when called:    2
 11473 ;; This function calls:
 11474 ;;		___awtoft
 11475 ;;		___ftdiv
 11476 ;;		___fttol
 11477 ;; This function is called by:
 11478 ;;		_main
 11479 ;; This function uses a non-reentrant model
 11480 ;;
 11481                           
 11482                           
 11483                           ;psect for function _calculateCurrent3
 11484  138D                     _calculateCurrent3:	
 11485                           
 11486                           ;main.c: 426: if(Ianalogs[3]-559<=0)
 11487                           
 11488                           ;incstack = 0
 11489                           ; Regs used in _calculateCurrent3: [wreg+status,2+status,0+pclath+cstack]
 11490  138D  0021               	movlb	1	; select bank1
 11491  138E  0826               	movf	(_Ianalogs^(0+128)+6),w
 11492  138F  3ED1               	addlw	209
 11493  1390  0020               	movlb	0	; select bank0
 11494  1391  00C5               	movwf	??_calculateCurrent3
 11495  1392  30FD               	movlw	253
 11496  1393  0021               	movlb	1	; select bank1
 11497  1394  3D27               	addwfc	((_Ianalogs+1)^(0+128)+6),w
 11498  1395  0020               	movlb	0	; select bank0
 11499  1396  00C6               	movwf	??_calculateCurrent3+1
 11500  1397  0846               	movf	??_calculateCurrent3+1,w
 11501  1398  3A80               	xorlw	128
 11502  1399  00C7               	movwf	??_calculateCurrent3+2
 11503  139A  3080               	movlw	128
 11504  139B  0247               	subwf	??_calculateCurrent3+2,w
 11505  139C  1D03               	skipz
 11506  139D  2BA0               	goto	u3885
 11507  139E  3001               	movlw	1
 11508  139F  0245               	subwf	??_calculateCurrent3,w
 11509  13A0                     u3885:	
 11510  13A0  1803               	skipnc
 11511  13A1  2BA6               	goto	l3218
 11512                           
 11513                           ;main.c: 427: {
 11514                           ;main.c: 428: current[3]=0;
 11515  13A2  0021               	movlb	1	; select bank1
 11516  13A3  01B6               	clrf	(_current^(0+128)+6)
 11517  13A4  01B7               	clrf	((_current+1)^(0+128)+6)
 11518                           
 11519                           ;main.c: 429: }
 11520  13A5  0008               	return
 11521  13A6                     l3218:	
 11522                           
 11523                           ;main.c: 430: else
 11524                           ;main.c: 431: {
 11525                           ;main.c: 432: current[3]=(int16_t)((Ianalogs[3]-559)/1.60575);
 11526  13A6  0021               	movlb	1	; select bank1
 11527  13A7  0826               	movf	(_Ianalogs^(0+128)+6),w
 11528  13A8  3ED1               	addlw	209
 11529  13A9  0020               	movlb	0	; select bank0
 11530  13AA  00A4               	movwf	___awtoft@c
 11531  13AB  30FD               	movlw	253
 11532  13AC  0021               	movlb	1	; select bank1
 11533  13AD  3D27               	addwfc	((_Ianalogs+1)^(0+128)+6),w
 11534  13AE  0020               	movlb	0	; select bank0
 11535  13AF  00A5               	movwf	___awtoft@c+1
 11536  13B0  3191  2140  3193   	fcall	___awtoft
 11537  13B3  0020               	movlb	0	; select bank0
 11538  13B4  0824               	movf	?___awtoft,w
 11539  13B5  00AA               	movwf	___ftdiv@f1
 11540  13B6  0825               	movf	?___awtoft+1,w
 11541  13B7  00AB               	movwf	___ftdiv@f1+1
 11542  13B8  0826               	movf	?___awtoft+2,w
 11543  13B9  00AC               	movwf	___ftdiv@f1+2
 11544  13BA  3089               	movlw	137
 11545  13BB  00A7               	movwf	___ftdiv@f2
 11546  13BC  30CD               	movlw	205
 11547  13BD  00A8               	movwf	___ftdiv@f2+1
 11548  13BE  303F               	movlw	63
 11549  13BF  00A9               	movwf	___ftdiv@f2+2
 11550  13C0  3196  26A7  3193   	fcall	___ftdiv
 11551  13C3  0020               	movlb	0	; select bank0
 11552  13C4  0827               	movf	?___ftdiv,w
 11553  13C5  00B7               	movwf	___fttol@f1
 11554  13C6  0828               	movf	?___ftdiv+1,w
 11555  13C7  00B8               	movwf	___fttol@f1+1
 11556  13C8  0829               	movf	?___ftdiv+2,w
 11557  13C9  00B9               	movwf	___fttol@f1+2
 11558  13CA  3188  201F         	fcall	___fttol
 11559  13CC  0020               	movlb	0	; select bank0
 11560  13CD  0838               	movf	?___fttol+1,w
 11561  13CE  0021               	movlb	1	; select bank1
 11562  13CF  00B7               	movwf	((_current+1)^(0+128)+6)
 11563  13D0  0020               	movlb	0	; select bank0
 11564  13D1  0837               	movf	?___fttol,w
 11565  13D2  0021               	movlb	1	; select bank1
 11566  13D3  00B6               	movwf	(_current^(0+128)+6)
 11567  13D4  0008               	return
 11568  13D5                     __end_of_calculateCurrent3:	
 11569                           
 11570                           	psect	text15
 11571  1345                     __ptext15:	
 11572 ;; *************** function _calculateCurrent2 *****************
 11573 ;; Defined at:
 11574 ;;		line 412 in file "main.c"
 11575 ;; Parameters:    Size  Location     Type
 11576 ;;		None
 11577 ;; Auto vars:     Size  Location     Type
 11578 ;;		None
 11579 ;; Return value:  Size  Location     Type
 11580 ;;                  1    wreg      void 
 11581 ;; Registers used:
 11582 ;;		wreg, status,2, status,0, pclath, cstack
 11583 ;; Tracked objects:
 11584 ;;		On entry : 0/0
 11585 ;;		On exit  : 0/0
 11586 ;;		Unchanged: 0/0
 11587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11588 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11589 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11590 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11591 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11592 ;;Total ram usage:        3 bytes
 11593 ;; Hardware stack levels used:    1
 11594 ;; Hardware stack levels required when called:    2
 11595 ;; This function calls:
 11596 ;;		___awtoft
 11597 ;;		___ftdiv
 11598 ;;		___fttol
 11599 ;; This function is called by:
 11600 ;;		_main
 11601 ;; This function uses a non-reentrant model
 11602 ;;
 11603                           
 11604                           
 11605                           ;psect for function _calculateCurrent2
 11606  1345                     _calculateCurrent2:	
 11607                           
 11608                           ;main.c: 414: if(Ianalogs[2]-589<=0)
 11609                           
 11610                           ;incstack = 0
 11611                           ; Regs used in _calculateCurrent2: [wreg+status,2+status,0+pclath+cstack]
 11612  1345  0021               	movlb	1	; select bank1
 11613  1346  0824               	movf	(_Ianalogs^(0+128)+4),w
 11614  1347  3EB3               	addlw	179
 11615  1348  0020               	movlb	0	; select bank0
 11616  1349  00C5               	movwf	??_calculateCurrent2
 11617  134A  30FD               	movlw	253
 11618  134B  0021               	movlb	1	; select bank1
 11619  134C  3D25               	addwfc	((_Ianalogs+1)^(0+128)+4),w
 11620  134D  0020               	movlb	0	; select bank0
 11621  134E  00C6               	movwf	??_calculateCurrent2+1
 11622  134F  0846               	movf	??_calculateCurrent2+1,w
 11623  1350  3A80               	xorlw	128
 11624  1351  00C7               	movwf	??_calculateCurrent2+2
 11625  1352  3080               	movlw	128
 11626  1353  0247               	subwf	??_calculateCurrent2+2,w
 11627  1354  1D03               	skipz
 11628  1355  2B58               	goto	u3875
 11629  1356  3001               	movlw	1
 11630  1357  0245               	subwf	??_calculateCurrent2,w
 11631  1358                     u3875:	
 11632  1358  1803               	skipnc
 11633  1359  2B5E               	goto	l3212
 11634                           
 11635                           ;main.c: 415: {
 11636                           ;main.c: 416: current[2]=0;
 11637  135A  0021               	movlb	1	; select bank1
 11638  135B  01B4               	clrf	(_current^(0+128)+4)
 11639  135C  01B5               	clrf	((_current+1)^(0+128)+4)
 11640                           
 11641                           ;main.c: 417: }
 11642  135D  0008               	return
 11643  135E                     l3212:	
 11644                           
 11645                           ;main.c: 418: else
 11646                           ;main.c: 419: {
 11647                           ;main.c: 420: current[2]=(int16_t)((Ianalogs[2]-589)/1.3165);
 11648  135E  0021               	movlb	1	; select bank1
 11649  135F  0824               	movf	(_Ianalogs^(0+128)+4),w
 11650  1360  3EB3               	addlw	179
 11651  1361  0020               	movlb	0	; select bank0
 11652  1362  00A4               	movwf	___awtoft@c
 11653  1363  30FD               	movlw	253
 11654  1364  0021               	movlb	1	; select bank1
 11655  1365  3D25               	addwfc	((_Ianalogs+1)^(0+128)+4),w
 11656  1366  0020               	movlb	0	; select bank0
 11657  1367  00A5               	movwf	___awtoft@c+1
 11658  1368  3191  2140  3193   	fcall	___awtoft
 11659  136B  0020               	movlb	0	; select bank0
 11660  136C  0824               	movf	?___awtoft,w
 11661  136D  00AA               	movwf	___ftdiv@f1
 11662  136E  0825               	movf	?___awtoft+1,w
 11663  136F  00AB               	movwf	___ftdiv@f1+1
 11664  1370  0826               	movf	?___awtoft+2,w
 11665  1371  00AC               	movwf	___ftdiv@f1+2
 11666  1372  3083               	movlw	131
 11667  1373  00A7               	movwf	___ftdiv@f2
 11668  1374  30A8               	movlw	168
 11669  1375  00A8               	movwf	___ftdiv@f2+1
 11670  1376  303F               	movlw	63
 11671  1377  00A9               	movwf	___ftdiv@f2+2
 11672  1378  3196  26A7  3193   	fcall	___ftdiv
 11673  137B  0020               	movlb	0	; select bank0
 11674  137C  0827               	movf	?___ftdiv,w
 11675  137D  00B7               	movwf	___fttol@f1
 11676  137E  0828               	movf	?___ftdiv+1,w
 11677  137F  00B8               	movwf	___fttol@f1+1
 11678  1380  0829               	movf	?___ftdiv+2,w
 11679  1381  00B9               	movwf	___fttol@f1+2
 11680  1382  3188  201F         	fcall	___fttol
 11681  1384  0020               	movlb	0	; select bank0
 11682  1385  0838               	movf	?___fttol+1,w
 11683  1386  0021               	movlb	1	; select bank1
 11684  1387  00B5               	movwf	((_current+1)^(0+128)+4)
 11685  1388  0020               	movlb	0	; select bank0
 11686  1389  0837               	movf	?___fttol,w
 11687  138A  0021               	movlb	1	; select bank1
 11688  138B  00B4               	movwf	(_current^(0+128)+4)
 11689  138C  0008               	return
 11690  138D                     __end_of_calculateCurrent2:	
 11691                           
 11692                           	psect	text16
 11693  12FD                     __ptext16:	
 11694 ;; *************** function _calculateCurrent0 *****************
 11695 ;; Defined at:
 11696 ;;		line 388 in file "main.c"
 11697 ;; Parameters:    Size  Location     Type
 11698 ;;		None
 11699 ;; Auto vars:     Size  Location     Type
 11700 ;;		None
 11701 ;; Return value:  Size  Location     Type
 11702 ;;                  1    wreg      void 
 11703 ;; Registers used:
 11704 ;;		wreg, status,2, status,0, pclath, cstack
 11705 ;; Tracked objects:
 11706 ;;		On entry : 0/0
 11707 ;;		On exit  : 0/0
 11708 ;;		Unchanged: 0/0
 11709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11710 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11711 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11712 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11713 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11714 ;;Total ram usage:        3 bytes
 11715 ;; Hardware stack levels used:    1
 11716 ;; Hardware stack levels required when called:    2
 11717 ;; This function calls:
 11718 ;;		___awtoft
 11719 ;;		___ftdiv
 11720 ;;		___fttol
 11721 ;; This function is called by:
 11722 ;;		_main
 11723 ;; This function uses a non-reentrant model
 11724 ;;
 11725                           
 11726                           
 11727                           ;psect for function _calculateCurrent0
 11728  12FD                     _calculateCurrent0:	
 11729                           
 11730                           ;main.c: 390: if(Ianalogs[0]-578<=0)
 11731                           
 11732                           ;incstack = 0
 11733                           ; Regs used in _calculateCurrent0: [wreg+status,2+status,0+pclath+cstack]
 11734  12FD  0021               	movlb	1	; select bank1
 11735  12FE  0820               	movf	_Ianalogs^(0+128),w
 11736  12FF  3EBE               	addlw	190
 11737  1300  0020               	movlb	0	; select bank0
 11738  1301  00C5               	movwf	??_calculateCurrent0
 11739  1302  30FD               	movlw	253
 11740  1303  0021               	movlb	1	; select bank1
 11741  1304  3D21               	addwfc	(_Ianalogs+1)^(0+128),w
 11742  1305  0020               	movlb	0	; select bank0
 11743  1306  00C6               	movwf	??_calculateCurrent0+1
 11744  1307  0846               	movf	??_calculateCurrent0+1,w
 11745  1308  3A80               	xorlw	128
 11746  1309  00C7               	movwf	??_calculateCurrent0+2
 11747  130A  3080               	movlw	128
 11748  130B  0247               	subwf	??_calculateCurrent0+2,w
 11749  130C  1D03               	skipz
 11750  130D  2B10               	goto	u3865
 11751  130E  3001               	movlw	1
 11752  130F  0245               	subwf	??_calculateCurrent0,w
 11753  1310                     u3865:	
 11754  1310  1803               	skipnc
 11755  1311  2B16               	goto	l3206
 11756                           
 11757                           ;main.c: 391: {
 11758                           ;main.c: 392: current[0]=0;
 11759  1312  0021               	movlb	1	; select bank1
 11760  1313  01B0               	clrf	_current^(0+128)
 11761  1314  01B1               	clrf	(_current+1)^(0+128)
 11762                           
 11763                           ;main.c: 393: }
 11764  1315  0008               	return
 11765  1316                     l3206:	
 11766                           
 11767                           ;main.c: 394: else
 11768                           ;main.c: 395: {
 11769                           ;main.c: 396: current[0]=(int16_t)((Ianalogs[0]-578)/3.2323);
 11770  1316  0021               	movlb	1	; select bank1
 11771  1317  0820               	movf	_Ianalogs^(0+128),w
 11772  1318  3EBE               	addlw	190
 11773  1319  0020               	movlb	0	; select bank0
 11774  131A  00A4               	movwf	___awtoft@c
 11775  131B  30FD               	movlw	253
 11776  131C  0021               	movlb	1	; select bank1
 11777  131D  3D21               	addwfc	(_Ianalogs+1)^(0+128),w
 11778  131E  0020               	movlb	0	; select bank0
 11779  131F  00A5               	movwf	___awtoft@c+1
 11780  1320  3191  2140  3192   	fcall	___awtoft
 11781  1323  0020               	movlb	0	; select bank0
 11782  1324  0824               	movf	?___awtoft,w
 11783  1325  00AA               	movwf	___ftdiv@f1
 11784  1326  0825               	movf	?___awtoft+1,w
 11785  1327  00AB               	movwf	___ftdiv@f1+1
 11786  1328  0826               	movf	?___awtoft+2,w
 11787  1329  00AC               	movwf	___ftdiv@f1+2
 11788  132A  30DE               	movlw	222
 11789  132B  00A7               	movwf	___ftdiv@f2
 11790  132C  304E               	movlw	78
 11791  132D  00A8               	movwf	___ftdiv@f2+1
 11792  132E  3040               	movlw	64
 11793  132F  00A9               	movwf	___ftdiv@f2+2
 11794  1330  3196  26A7  3192   	fcall	___ftdiv
 11795  1333  0020               	movlb	0	; select bank0
 11796  1334  0827               	movf	?___ftdiv,w
 11797  1335  00B7               	movwf	___fttol@f1
 11798  1336  0828               	movf	?___ftdiv+1,w
 11799  1337  00B8               	movwf	___fttol@f1+1
 11800  1338  0829               	movf	?___ftdiv+2,w
 11801  1339  00B9               	movwf	___fttol@f1+2
 11802  133A  3188  201F         	fcall	___fttol
 11803  133C  0020               	movlb	0	; select bank0
 11804  133D  0838               	movf	?___fttol+1,w
 11805  133E  0021               	movlb	1	; select bank1
 11806  133F  00B1               	movwf	(_current+1)^(0+128)
 11807  1340  0020               	movlb	0	; select bank0
 11808  1341  0837               	movf	?___fttol,w
 11809  1342  0021               	movlb	1	; select bank1
 11810  1343  00B0               	movwf	_current^(0+128)
 11811  1344  0008               	return
 11812  1345                     __end_of_calculateCurrent0:	
 11813                           
 11814                           	psect	text17
 11815  16A7                     __ptext17:	
 11816 ;; *************** function ___ftdiv *****************
 11817 ;; Defined at:
 11818 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
 11819 ;; Parameters:    Size  Location     Type
 11820 ;;  f2              3    7[BANK0 ] float 
 11821 ;;  f1              3   10[BANK0 ] float 
 11822 ;; Auto vars:     Size  Location     Type
 11823 ;;  f3              3   18[BANK0 ] float 
 11824 ;;  sign            1   22[BANK0 ] unsigned char 
 11825 ;;  exp             1   21[BANK0 ] unsigned char 
 11826 ;;  cntr            1   17[BANK0 ] unsigned char 
 11827 ;; Return value:  Size  Location     Type
 11828 ;;                  3    7[BANK0 ] float 
 11829 ;; Registers used:
 11830 ;;		wreg, status,2, status,0, pclath, cstack
 11831 ;; Tracked objects:
 11832 ;;		On entry : 0/0
 11833 ;;		On exit  : 0/0
 11834 ;;		Unchanged: 0/0
 11835 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11836 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11837 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11838 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11839 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11840 ;;Total ram usage:       16 bytes
 11841 ;; Hardware stack levels used:    1
 11842 ;; Hardware stack levels required when called:    1
 11843 ;; This function calls:
 11844 ;;		___ftpack
 11845 ;; This function is called by:
 11846 ;;		_tempCalc
 11847 ;;		_main
 11848 ;;		_calculateCurrent0
 11849 ;;		_calculateCurrent2
 11850 ;;		_calculateCurrent3
 11851 ;; This function uses a non-reentrant model
 11852 ;;
 11853                           
 11854                           
 11855                           ;psect for function ___ftdiv
 11856  16A7                     ___ftdiv:	
 11857                           
 11858                           ;incstack = 0
 11859                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 11860  16A7  0020               	movlb	0	; select bank0
 11861  16A8  082A               	movf	___ftdiv@f1,w
 11862  16A9  00AD               	movwf	??___ftdiv
 11863  16AA  082B               	movf	___ftdiv@f1+1,w
 11864  16AB  00AE               	movwf	??___ftdiv+1
 11865  16AC  082C               	movf	___ftdiv@f1+2,w
 11866  16AD  00AF               	movwf	??___ftdiv+2
 11867  16AE  1003               	clrc
 11868  16AF  0D2E               	rlf	??___ftdiv+1,w
 11869  16B0  0D2F               	rlf	??___ftdiv+2,w
 11870  16B1  00B0               	movwf	??___ftdiv+3
 11871  16B2  0830               	movf	??___ftdiv+3,w
 11872  16B3  00B5               	movwf	___ftdiv@exp
 11873  16B4  0835               	movf	___ftdiv@exp,w
 11874  16B5  1D03               	btfss	3,2
 11875  16B6  2EBE               	goto	l2884
 11876  16B7  3000               	movlw	0
 11877  16B8  00A7               	movwf	?___ftdiv
 11878  16B9  3000               	movlw	0
 11879  16BA  00A8               	movwf	?___ftdiv+1
 11880  16BB  3000               	movlw	0
 11881  16BC  00A9               	movwf	?___ftdiv+2
 11882  16BD  0008               	return
 11883  16BE                     l2884:	
 11884  16BE  0827               	movf	___ftdiv@f2,w
 11885  16BF  00AD               	movwf	??___ftdiv
 11886  16C0  0828               	movf	___ftdiv@f2+1,w
 11887  16C1  00AE               	movwf	??___ftdiv+1
 11888  16C2  0829               	movf	___ftdiv@f2+2,w
 11889  16C3  00AF               	movwf	??___ftdiv+2
 11890  16C4  1003               	clrc
 11891  16C5  0D2E               	rlf	??___ftdiv+1,w
 11892  16C6  0D2F               	rlf	??___ftdiv+2,w
 11893  16C7  00B0               	movwf	??___ftdiv+3
 11894  16C8  0830               	movf	??___ftdiv+3,w
 11895  16C9  00B6               	movwf	___ftdiv@sign
 11896  16CA  0836               	movf	___ftdiv@sign,w
 11897  16CB  1D03               	btfss	3,2
 11898  16CC  2ED4               	goto	l2890
 11899  16CD  3000               	movlw	0
 11900  16CE  00A7               	movwf	?___ftdiv
 11901  16CF  3000               	movlw	0
 11902  16D0  00A8               	movwf	?___ftdiv+1
 11903  16D1  3000               	movlw	0
 11904  16D2  00A9               	movwf	?___ftdiv+2
 11905  16D3  0008               	return
 11906  16D4                     l2890:	
 11907  16D4  3000               	movlw	0
 11908  16D5  00B2               	movwf	___ftdiv@f3
 11909  16D6  3000               	movlw	0
 11910  16D7  00B3               	movwf	___ftdiv@f3+1
 11911  16D8  3000               	movlw	0
 11912  16D9  00B4               	movwf	___ftdiv@f3+2
 11913  16DA  3089               	movlw	137
 11914  16DB  0736               	addwf	___ftdiv@sign,w
 11915  16DC  00AD               	movwf	??___ftdiv
 11916  16DD  082D               	movf	??___ftdiv,w
 11917  16DE  02B5               	subwf	___ftdiv@exp,f
 11918  16DF  082A               	movf	___ftdiv@f1,w
 11919  16E0  00AD               	movwf	??___ftdiv
 11920  16E1  082B               	movf	___ftdiv@f1+1,w
 11921  16E2  00AE               	movwf	??___ftdiv+1
 11922  16E3  082C               	movf	___ftdiv@f1+2,w
 11923  16E4  00AF               	movwf	??___ftdiv+2
 11924  16E5  3010               	movlw	16
 11925  16E6                     u3165:	
 11926  16E6  36AF               	lsrf	??___ftdiv+2,f
 11927  16E7  0CAE               	rrf	??___ftdiv+1,f
 11928  16E8  0CAD               	rrf	??___ftdiv,f
 11929  16E9  0B89               	decfsz	9,f
 11930  16EA  2EE6               	goto	u3165
 11931  16EB  082D               	movf	??___ftdiv,w
 11932  16EC  00B0               	movwf	??___ftdiv+3
 11933  16ED  0830               	movf	??___ftdiv+3,w
 11934  16EE  00B6               	movwf	___ftdiv@sign
 11935  16EF  0827               	movf	___ftdiv@f2,w
 11936  16F0  00AD               	movwf	??___ftdiv
 11937  16F1  0828               	movf	___ftdiv@f2+1,w
 11938  16F2  00AE               	movwf	??___ftdiv+1
 11939  16F3  0829               	movf	___ftdiv@f2+2,w
 11940  16F4  00AF               	movwf	??___ftdiv+2
 11941  16F5  3010               	movlw	16
 11942  16F6                     u3175:	
 11943  16F6  36AF               	lsrf	??___ftdiv+2,f
 11944  16F7  0CAE               	rrf	??___ftdiv+1,f
 11945  16F8  0CAD               	rrf	??___ftdiv,f
 11946  16F9  0B89               	decfsz	9,f
 11947  16FA  2EF6               	goto	u3175
 11948  16FB  082D               	movf	??___ftdiv,w
 11949  16FC  00B0               	movwf	??___ftdiv+3
 11950  16FD  0830               	movf	??___ftdiv+3,w
 11951  16FE  06B6               	xorwf	___ftdiv@sign,f
 11952  16FF  3080               	movlw	128
 11953  1700  00AD               	movwf	??___ftdiv
 11954  1701  082D               	movf	??___ftdiv,w
 11955  1702  05B6               	andwf	___ftdiv@sign,f
 11956  1703  17AB               	bsf	___ftdiv@f1+1,7
 11957  1704  30FF               	movlw	255
 11958  1705  05AA               	andwf	___ftdiv@f1,f
 11959  1706  30FF               	movlw	255
 11960  1707  05AB               	andwf	___ftdiv@f1+1,f
 11961  1708  3000               	movlw	0
 11962  1709  05AC               	andwf	___ftdiv@f1+2,f
 11963  170A  17A8               	bsf	___ftdiv@f2+1,7
 11964  170B  30FF               	movlw	255
 11965  170C  05A7               	andwf	___ftdiv@f2,f
 11966  170D  30FF               	movlw	255
 11967  170E  05A8               	andwf	___ftdiv@f2+1,f
 11968  170F  3000               	movlw	0
 11969  1710  05A9               	andwf	___ftdiv@f2+2,f
 11970  1711  3018               	movlw	24
 11971  1712  00AD               	movwf	??___ftdiv
 11972  1713  082D               	movf	??___ftdiv,w
 11973  1714  00B1               	movwf	___ftdiv@cntr
 11974  1715                     l2904:	
 11975  1715  3001               	movlw	1
 11976  1716                     u3185:	
 11977  1716  35B2               	lslf	___ftdiv@f3,f
 11978  1717  0DB3               	rlf	___ftdiv@f3+1,f
 11979  1718  0DB4               	rlf	___ftdiv@f3+2,f
 11980  1719  0B89               	decfsz	9,f
 11981  171A  2F16               	goto	u3185
 11982  171B  0829               	movf	___ftdiv@f2+2,w
 11983  171C  022C               	subwf	___ftdiv@f1+2,w
 11984  171D  1D03               	skipz
 11985  171E  2F25               	goto	u3195
 11986  171F  0828               	movf	___ftdiv@f2+1,w
 11987  1720  022B               	subwf	___ftdiv@f1+1,w
 11988  1721  1D03               	skipz
 11989  1722  2F25               	goto	u3195
 11990  1723  0827               	movf	___ftdiv@f2,w
 11991  1724  022A               	subwf	___ftdiv@f1,w
 11992  1725                     u3195:	
 11993  1725  1C03               	skipc
 11994  1726  2F2E               	goto	l2912
 11995  1727  0827               	movf	___ftdiv@f2,w
 11996  1728  02AA               	subwf	___ftdiv@f1,f
 11997  1729  0828               	movf	___ftdiv@f2+1,w
 11998  172A  3BAB               	subwfb	___ftdiv@f1+1,f
 11999  172B  0829               	movf	___ftdiv@f2+2,w
 12000  172C  3BAC               	subwfb	___ftdiv@f1+2,f
 12001  172D  1432               	bsf	___ftdiv@f3,0
 12002  172E                     l2912:	
 12003  172E  3001               	movlw	1
 12004  172F                     u3205:	
 12005  172F  35AA               	lslf	___ftdiv@f1,f
 12006  1730  0DAB               	rlf	___ftdiv@f1+1,f
 12007  1731  0DAC               	rlf	___ftdiv@f1+2,f
 12008  1732  0B89               	decfsz	9,f
 12009  1733  2F2F               	goto	u3205
 12010  1734  3001               	movlw	1
 12011  1735  02B1               	subwf	___ftdiv@cntr,f
 12012  1736  1D03               	btfss	3,2
 12013  1737  2F15               	goto	l2904
 12014  1738  0832               	movf	___ftdiv@f3,w
 12015  1739  00F0               	movwf	___ftpack@arg
 12016  173A  0833               	movf	___ftdiv@f3+1,w
 12017  173B  00F1               	movwf	___ftpack@arg+1
 12018  173C  0834               	movf	___ftdiv@f3+2,w
 12019  173D  00F2               	movwf	___ftpack@arg+2
 12020  173E  0835               	movf	___ftdiv@exp,w
 12021  173F  00AD               	movwf	??___ftdiv
 12022  1740  082D               	movf	??___ftdiv,w
 12023  1741  00F3               	movwf	___ftpack@exp
 12024  1742  0836               	movf	___ftdiv@sign,w
 12025  1743  00AE               	movwf	??___ftdiv+1
 12026  1744  082E               	movf	??___ftdiv+1,w
 12027  1745  00F4               	movwf	___ftpack@sign
 12028  1746  3194  24DB         	fcall	___ftpack
 12029  1748  0870               	movf	?___ftpack,w
 12030  1749  0020               	movlb	0	; select bank0
 12031  174A  00A7               	movwf	?___ftdiv
 12032  174B  0871               	movf	?___ftpack+1,w
 12033  174C  00A8               	movwf	?___ftdiv+1
 12034  174D  0872               	movf	?___ftpack+2,w
 12035  174E  00A9               	movwf	?___ftdiv+2
 12036  174F  0008               	return
 12037  1750                     __end_of___ftdiv:	
 12038                           
 12039                           	psect	text18
 12040  124B                     __ptext18:	
 12041 ;; *************** function _SYSTEM_Initialize *****************
 12042 ;; Defined at:
 12043 ;;		line 35 in file "system.c"
 12044 ;; Parameters:    Size  Location     Type
 12045 ;;		None
 12046 ;; Auto vars:     Size  Location     Type
 12047 ;;		None
 12048 ;; Return value:  Size  Location     Type
 12049 ;;                  1    wreg      void 
 12050 ;; Registers used:
 12051 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12052 ;; Tracked objects:
 12053 ;;		On entry : 0/0
 12054 ;;		On exit  : 0/0
 12055 ;;		Unchanged: 0/0
 12056 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12057 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12058 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12059 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12060 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12061 ;;Total ram usage:        2 bytes
 12062 ;; Hardware stack levels used:    1
 12063 ;; Hardware stack levels required when called:    3
 12064 ;; This function calls:
 12065 ;;		_ADC_Initialize
 12066 ;;		_Init_Battery_State_Machine
 12067 ;;		_LCDClear
 12068 ;;		_LCDInit
 12069 ;;		_OSCILLATOR_Initialize
 12070 ;;		_PIN_MANAGER_Initialize
 12071 ;;		_PWM_Initialize
 12072 ;;		_TMR2_Initialize
 12073 ;;		_TMR4_Initialize
 12074 ;; This function is called by:
 12075 ;;		_main
 12076 ;; This function uses a non-reentrant model
 12077 ;;
 12078                           
 12079                           
 12080                           ;psect for function _SYSTEM_Initialize
 12081  124B                     _SYSTEM_Initialize:	
 12082                           
 12083                           ;system.c: 37: PIN_MANAGER_Initialize();
 12084                           
 12085                           ;incstack = 0
 12086                           ; Regs used in _SYSTEM_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12087  124B  3191  21D9  3192   	fcall	_PIN_MANAGER_Initialize
 12088                           
 12089                           ;system.c: 38: OSCILLATOR_Initialize();
 12090  124E  319E  26ED  3192   	fcall	_OSCILLATOR_Initialize
 12091                           
 12092                           ;system.c: 40: ADC_Initialize();
 12093  1251  319F  27E1  3192   	fcall	_ADC_Initialize
 12094                           
 12095                           ;system.c: 41: PWM_Initialize();
 12096  1254  3188  2000  3192   	fcall	_PWM_Initialize
 12097                           
 12098                           ;system.c: 43: TMR2_Initialize();
 12099  1257  319F  270E  3192   	fcall	_TMR2_Initialize
 12100                           
 12101                           ;system.c: 44: TMR4_Initialize();
 12102  125A  319F  271C  3192   	fcall	_TMR4_Initialize
 12103                           
 12104                           ;system.c: 45: Init_Battery_State_Machine(0);
 12105  125D  3000               	movlw	0
 12106  125E  3195  253F  3192   	fcall	_Init_Battery_State_Machine
 12107                           
 12108                           ;system.c: 46: Init_Battery_State_Machine(1);
 12109  1261  3001               	movlw	1
 12110  1262  3195  253F  3192   	fcall	_Init_Battery_State_Machine
 12111                           
 12112                           ;system.c: 47: LCDInit();
 12113  1265  3192  2210  3192   	fcall	_LCDInit
 12114                           
 12115                           ;system.c: 48: _delay((unsigned long)((200)*(32000000/4000.0)));
 12116  1268  3009               	movlw	9
 12117  1269  0020               	movlb	0	; select bank0
 12118  126A  00CB               	movwf	??_SYSTEM_Initialize+1
 12119  126B  301E               	movlw	30
 12120  126C  00CA               	movwf	??_SYSTEM_Initialize
 12121  126D  30E4               	movlw	228
 12122  126E                     u4327:	
 12123  126E  0B89               	decfsz	9,f
 12124  126F  2A6E               	goto	u4327
 12125  1270  0BCA               	decfsz	??_SYSTEM_Initialize,f
 12126  1271  2A6E               	goto	u4327
 12127  1272  0BCB               	decfsz	??_SYSTEM_Initialize+1,f
 12128  1273  2A6E               	goto	u4327
 12129  1274  0000               	nop
 12130                           
 12131                           ;system.c: 49: LCDClear();
 12132  1275  3191  2187  3192   	fcall	_LCDClear
 12133                           
 12134                           ;system.c: 50: _delay((unsigned long)((200)*(32000000/4000.0)));
 12135  1278  3009               	movlw	9
 12136  1279  0020               	movlb	0	; select bank0
 12137  127A  00CB               	movwf	??_SYSTEM_Initialize+1
 12138  127B  301E               	movlw	30
 12139  127C  00CA               	movwf	??_SYSTEM_Initialize
 12140  127D  30E4               	movlw	228
 12141  127E                     u4337:	
 12142  127E  0B89               	decfsz	9,f
 12143  127F  2A7E               	goto	u4337
 12144  1280  0BCA               	decfsz	??_SYSTEM_Initialize,f
 12145  1281  2A7E               	goto	u4337
 12146  1282  0BCB               	decfsz	??_SYSTEM_Initialize+1,f
 12147  1283  2A7E               	goto	u4337
 12148  1284  0000               	nop
 12149  1285  0008               	return
 12150  1286                     __end_of_SYSTEM_Initialize:	
 12151                           
 12152                           	psect	text19
 12153  1F1C                     __ptext19:	
 12154 ;; *************** function _TMR4_Initialize *****************
 12155 ;; Defined at:
 12156 ;;		line 25 in file "tmr.c"
 12157 ;; Parameters:    Size  Location     Type
 12158 ;;		None
 12159 ;; Auto vars:     Size  Location     Type
 12160 ;;		None
 12161 ;; Return value:  Size  Location     Type
 12162 ;;                  1    wreg      void 
 12163 ;; Registers used:
 12164 ;;		wreg, status,2
 12165 ;; Tracked objects:
 12166 ;;		On entry : 0/0
 12167 ;;		On exit  : 0/0
 12168 ;;		Unchanged: 0/0
 12169 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12170 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12171 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12172 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12173 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12174 ;;Total ram usage:        0 bytes
 12175 ;; Hardware stack levels used:    1
 12176 ;; This function calls:
 12177 ;;		Nothing
 12178 ;; This function is called by:
 12179 ;;		_SYSTEM_Initialize
 12180 ;; This function uses a non-reentrant model
 12181 ;;
 12182                           
 12183                           
 12184                           ;psect for function _TMR4_Initialize
 12185  1F1C                     _TMR4_Initialize:	
 12186                           
 12187                           ;tmr.c: 27: T4CON = 0x00;
 12188                           
 12189                           ;incstack = 0
 12190                           ; Regs used in _TMR4_Initialize: [wreg+status,2]
 12191  1F1C  0025               	movlb	5	; select bank5
 12192  1F1D  0194               	clrf	20	;volatile
 12193                           
 12194                           ;tmr.c: 29: T4CLKCON = 0x01;
 12195  1F1E  3001               	movlw	1
 12196  1F1F  0096               	movwf	22	;volatile
 12197                           
 12198                           ;tmr.c: 31: T4HLT = 0x00;
 12199  1F20  0195               	clrf	21	;volatile
 12200                           
 12201                           ;tmr.c: 33: T4RST = 0x00;
 12202  1F21  0197               	clrf	23	;volatile
 12203                           
 12204                           ;tmr.c: 35: T4PR = 0xFE;
 12205  1F22  30FE               	movlw	254
 12206  1F23  0093               	movwf	19	;volatile
 12207                           
 12208                           ;tmr.c: 39: T4TMR = 0x00;
 12209  1F24  0192               	clrf	18	;volatile
 12210                           
 12211                           ;tmr.c: 41: PIR4bits.TMR4IF = 0;
 12212  1F25  002E               	movlb	14	; select bank14
 12213  1F26  1190               	bcf	16,3	;volatile
 12214                           
 12215                           ;tmr.c: 43: T4CONbits.TMR4ON = 1;
 12216  1F27  0025               	movlb	5	; select bank5
 12217  1F28  1794               	bsf	20,7	;volatile
 12218  1F29  0008               	return
 12219  1F2A                     __end_of_TMR4_Initialize:	
 12220                           
 12221                           	psect	text20
 12222  1F0E                     __ptext20:	
 12223 ;; *************** function _TMR2_Initialize *****************
 12224 ;; Defined at:
 12225 ;;		line 3 in file "tmr.c"
 12226 ;; Parameters:    Size  Location     Type
 12227 ;;		None
 12228 ;; Auto vars:     Size  Location     Type
 12229 ;;		None
 12230 ;; Return value:  Size  Location     Type
 12231 ;;                  1    wreg      void 
 12232 ;; Registers used:
 12233 ;;		wreg, status,2
 12234 ;; Tracked objects:
 12235 ;;		On entry : 0/0
 12236 ;;		On exit  : 0/0
 12237 ;;		Unchanged: 0/0
 12238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12239 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12240 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12241 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12242 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12243 ;;Total ram usage:        0 bytes
 12244 ;; Hardware stack levels used:    1
 12245 ;; This function calls:
 12246 ;;		Nothing
 12247 ;; This function is called by:
 12248 ;;		_SYSTEM_Initialize
 12249 ;; This function uses a non-reentrant model
 12250 ;;
 12251                           
 12252                           
 12253                           ;psect for function _TMR2_Initialize
 12254  1F0E                     _TMR2_Initialize:	
 12255                           
 12256                           ;tmr.c: 5: T2CON = 0x00;
 12257                           
 12258                           ;incstack = 0
 12259                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
 12260  1F0E  0025               	movlb	5	; select bank5
 12261  1F0F  018E               	clrf	14	;volatile
 12262                           
 12263                           ;tmr.c: 7: T2CLKCON = 0x01;
 12264  1F10  3001               	movlw	1
 12265  1F11  0090               	movwf	16	;volatile
 12266                           
 12267                           ;tmr.c: 9: T2HLT = 0x00;
 12268  1F12  018F               	clrf	15	;volatile
 12269                           
 12270                           ;tmr.c: 11: T2RST = 0x00;
 12271  1F13  0191               	clrf	17	;volatile
 12272                           
 12273                           ;tmr.c: 13: T2PR = 0xFE;
 12274  1F14  30FE               	movlw	254
 12275  1F15  008D               	movwf	13	;volatile
 12276                           
 12277                           ;tmr.c: 18: T2TMR = 0x00;
 12278  1F16  018C               	clrf	12	;volatile
 12279                           
 12280                           ;tmr.c: 20: PIR4bits.TMR2IF = 0;
 12281  1F17  002E               	movlb	14	; select bank14
 12282  1F18  1090               	bcf	16,1	;volatile
 12283                           
 12284                           ;tmr.c: 22: T2CONbits.TMR2ON = 1;
 12285  1F19  0025               	movlb	5	; select bank5
 12286  1F1A  178E               	bsf	14,7	;volatile
 12287  1F1B  0008               	return
 12288  1F1C                     __end_of_TMR2_Initialize:	
 12289                           
 12290                           	psect	text21
 12291  0800                     __ptext21:	
 12292 ;; *************** function _PWM_Initialize *****************
 12293 ;; Defined at:
 12294 ;;		line 3 in file "pwm.c"
 12295 ;; Parameters:    Size  Location     Type
 12296 ;;		None
 12297 ;; Auto vars:     Size  Location     Type
 12298 ;;		None
 12299 ;; Return value:  Size  Location     Type
 12300 ;;                  1    wreg      void 
 12301 ;; Registers used:
 12302 ;;		wreg, status,2, status,0
 12303 ;; Tracked objects:
 12304 ;;		On entry : 0/0
 12305 ;;		On exit  : 0/0
 12306 ;;		Unchanged: 0/0
 12307 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12308 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12309 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12310 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12311 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12312 ;;Total ram usage:        0 bytes
 12313 ;; Hardware stack levels used:    1
 12314 ;; This function calls:
 12315 ;;		Nothing
 12316 ;; This function is called by:
 12317 ;;		_SYSTEM_Initialize
 12318 ;; This function uses a non-reentrant model
 12319 ;;
 12320                           
 12321                           
 12322                           ;psect for function _PWM_Initialize
 12323  0800                     _PWM_Initialize:	
 12324                           
 12325                           ;pwm.c: 5: PWM6CON = 0x80;
 12326                           
 12327                           ;incstack = 0
 12328                           ; Regs used in _PWM_Initialize: [wreg+status,2+status,0]
 12329  0800  3080               	movlw	128
 12330  0801  0027               	movlb	7	; select bank7
 12331  0802  008E               	movwf	14	;volatile
 12332                           
 12333                           ;pwm.c: 7: PWM6DCH = 0x00;
 12334  0803  018D               	clrf	13	;volatile
 12335                           
 12336                           ;pwm.c: 9: PWM6DCL = 0x00;
 12337  0804  018C               	clrf	12	;volatile
 12338                           
 12339                           ;pwm.c: 11: CCPTMRS1bits.P6TSEL = 0x01;
 12340  0805  0024               	movlb	4	; select bank4
 12341  0806  081F               	movf	31,w	;volatile
 12342  0807  39F3               	andlw	-13
 12343  0808  3804               	iorlw	4
 12344  0809  009F               	movwf	31	;volatile
 12345                           
 12346                           ;pwm.c: 14: PWM7CON = 0x80;
 12347  080A  3080               	movlw	128
 12348  080B  0027               	movlb	7	; select bank7
 12349  080C  0092               	movwf	18	;volatile
 12350                           
 12351                           ;pwm.c: 16: PWM7DCH = 0x00;
 12352  080D  0191               	clrf	17	;volatile
 12353                           
 12354                           ;pwm.c: 18: PWM7DCL = 0x00;
 12355  080E  0190               	clrf	16	;volatile
 12356                           
 12357                           ;pwm.c: 20: CCPTMRS1bits.P7TSEL = 0x02;
 12358  080F  0024               	movlb	4	; select bank4
 12359  0810  081F               	movf	31,w	;volatile
 12360  0811  39CF               	andlw	-49
 12361  0812  3820               	iorlw	32
 12362  0813  009F               	movwf	31	;volatile
 12363                           
 12364                           ;pwm.c: 23: CCP1CONbits.CCP1EN = 1;
 12365  0814  0026               	movlb	6	; select bank6
 12366  0815  178E               	bsf	14,7	;volatile
 12367                           
 12368                           ;pwm.c: 24: CCP1CONbits.CCP1FMT = 1;
 12369  0816  160E               	bsf	14,4	;volatile
 12370                           
 12371                           ;pwm.c: 25: CCP1CONbits.CCP1MODE = 0xF;
 12372  0817  300F               	movlw	15
 12373  0818  048E               	iorwf	14,f	;volatile
 12374                           
 12375                           ;pwm.c: 26: CCPTMRS0bits.C1TSEL = 0x1;
 12376  0819  0024               	movlb	4	; select bank4
 12377  081A  081E               	movf	30,w	;volatile
 12378  081B  39FC               	andlw	-4
 12379  081C  3801               	iorlw	1
 12380  081D  009E               	movwf	30	;volatile
 12381  081E  0008               	return
 12382  081F                     __end_of_PWM_Initialize:	
 12383                           
 12384                           	psect	text22
 12385  11D9                     __ptext22:	
 12386 ;; *************** function _PIN_MANAGER_Initialize *****************
 12387 ;; Defined at:
 12388 ;;		line 3 in file "pin_manager.c"
 12389 ;; Parameters:    Size  Location     Type
 12390 ;;		None
 12391 ;; Auto vars:     Size  Location     Type
 12392 ;;  state           1    0[COMMON] char 
 12393 ;; Return value:  Size  Location     Type
 12394 ;;                  1    wreg      void 
 12395 ;; Registers used:
 12396 ;;		wreg, status,2
 12397 ;; Tracked objects:
 12398 ;;		On entry : 0/0
 12399 ;;		On exit  : 0/0
 12400 ;;		Unchanged: 0/0
 12401 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12402 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12403 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12404 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12405 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12406 ;;Total ram usage:        1 bytes
 12407 ;; Hardware stack levels used:    1
 12408 ;; This function calls:
 12409 ;;		Nothing
 12410 ;; This function is called by:
 12411 ;;		_SYSTEM_Initialize
 12412 ;; This function uses a non-reentrant model
 12413 ;;
 12414                           
 12415                           
 12416                           ;psect for function _PIN_MANAGER_Initialize
 12417  11D9                     _PIN_MANAGER_Initialize:	
 12418                           
 12419                           ;pin_manager.c: 5: LATA = 0x20;
 12420                           
 12421                           ;incstack = 0
 12422                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
 12423  11D9  3020               	movlw	32
 12424  11DA  0020               	movlb	0	; select bank0
 12425  11DB  0096               	movwf	22	;volatile
 12426                           
 12427                           ;pin_manager.c: 6: LATB = 0x00;
 12428  11DC  0197               	clrf	23	;volatile
 12429                           
 12430                           ;pin_manager.c: 7: LATC = 0x00;
 12431  11DD  0198               	clrf	24	;volatile
 12432                           
 12433                           ;pin_manager.c: 9: WPUA = 0x00;
 12434  11DE  003E               	movlb	30	; select bank30
 12435  11DF  01B9               	clrf	57	;volatile
 12436                           
 12437                           ;pin_manager.c: 10: WPUB = 0x00;
 12438  11E0  01C4               	clrf	68	;volatile
 12439                           
 12440                           ;pin_manager.c: 11: WPUC = 0x00;
 12441  11E1  01CF               	clrf	79	;volatile
 12442                           
 12443                           ;pin_manager.c: 12: WPUE = 0x8;
 12444  11E2  3008               	movlw	8
 12445  11E3  00E5               	movwf	101	;volatile
 12446                           
 12447                           ;pin_manager.c: 14: TRISA = 0x00;
 12448  11E4  0020               	movlb	0	; select bank0
 12449  11E5  0191               	clrf	17	;volatile
 12450                           
 12451                           ;pin_manager.c: 15: TRISB = 0x0E;
 12452  11E6  300E               	movlw	14
 12453  11E7  0092               	movwf	18	;volatile
 12454                           
 12455                           ;pin_manager.c: 16: TRISC = 0xFF;
 12456  11E8  30FF               	movlw	255
 12457  11E9  0093               	movwf	19	;volatile
 12458                           
 12459                           ;pin_manager.c: 18: ANSELA = 0x00;
 12460  11EA  003E               	movlb	30	; select bank30
 12461  11EB  01B8               	clrf	56	;volatile
 12462                           
 12463                           ;pin_manager.c: 19: ANSELB = 0x0A;
 12464  11EC  300A               	movlw	10
 12465  11ED  00C3               	movwf	67	;volatile
 12466                           
 12467                           ;pin_manager.c: 20: ANSELC = 0xFF;
 12468  11EE  30FF               	movlw	255
 12469  11EF  00CE               	movwf	78	;volatile
 12470                           
 12471                           ;pin_manager.c: 23: PIE0bits.IOCIE = 0;
 12472  11F0  002E               	movlb	14	; select bank14
 12473  11F1  1216               	bcf	22,4	;volatile
 12474                           
 12475                           ;pin_manager.c: 24: int8_t state = GIE;
 12476  11F2  3000               	movlw	0
 12477  11F3  1B8B               	btfsc	11,7	;volatile
 12478  11F4  3001               	movlw	1
 12479  11F5  00F0               	movwf	PIN_MANAGER_Initialize@state
 12480                           
 12481                           ;pin_manager.c: 25: GIE = 0;
 12482  11F6  138B               	bcf	11,7	;volatile
 12483                           
 12484                           ;pin_manager.c: 26: PPSLOCK = 0x55;
 12485  11F7  3055               	movlw	85
 12486  11F8  003D               	movlb	29	; select bank29
 12487  11F9  008F               	movwf	15	;volsfr
 12488                           
 12489                           ;pin_manager.c: 27: PPSLOCK = 0xAA;
 12490  11FA  30AA               	movlw	170
 12491  11FB  008F               	movwf	15	;volsfr
 12492                           
 12493                           ;pin_manager.c: 28: PPSLOCKbits.PPSLOCKED = 0x00;
 12494  11FC  100F               	bcf	15,0	;volsfr
 12495                           
 12496                           ;pin_manager.c: 30: RA6PPS = 0x0E;
 12497  11FD  300E               	movlw	14
 12498  11FE  003E               	movlb	30	; select bank30
 12499  11FF  0096               	movwf	22	;volatile
 12500                           
 12501                           ;pin_manager.c: 31: RA7PPS = 0x0F;
 12502  1200  300F               	movlw	15
 12503  1201  0097               	movwf	23	;volatile
 12504                           
 12505                           ;pin_manager.c: 32: RB0PPS = 0x09;
 12506  1202  3009               	movlw	9
 12507  1203  0098               	movwf	24	;volatile
 12508                           
 12509                           ;pin_manager.c: 33: PPSLOCK = 0x55;
 12510  1204  3055               	movlw	85
 12511  1205  003D               	movlb	29	; select bank29
 12512  1206  008F               	movwf	15	;volsfr
 12513                           
 12514                           ;pin_manager.c: 34: PPSLOCK = 0xAA;
 12515  1207  30AA               	movlw	170
 12516  1208  008F               	movwf	15	;volsfr
 12517                           
 12518                           ;pin_manager.c: 35: PPSLOCKbits.PPSLOCKED = 0x01;
 12519  1209  140F               	bsf	15,0	;volsfr
 12520                           
 12521                           ;pin_manager.c: 36: GIE = state;
 12522  120A  1C70               	btfss	PIN_MANAGER_Initialize@state,0
 12523  120B  2A0E               	goto	u2900
 12524  120C  178B               	bsf	11,7	;volatile
 12525  120D  0008               	return
 12526  120E                     u2900:	
 12527  120E  138B               	bcf	11,7	;volatile
 12528  120F  0008               	return
 12529  1210                     __end_of_PIN_MANAGER_Initialize:	
 12530                           
 12531                           	psect	text23
 12532  1EED                     __ptext23:	
 12533 ;; *************** function _OSCILLATOR_Initialize *****************
 12534 ;; Defined at:
 12535 ;;		line 53 in file "system.c"
 12536 ;; Parameters:    Size  Location     Type
 12537 ;;		None
 12538 ;; Auto vars:     Size  Location     Type
 12539 ;;		None
 12540 ;; Return value:  Size  Location     Type
 12541 ;;                  1    wreg      void 
 12542 ;; Registers used:
 12543 ;;		wreg, status,2
 12544 ;; Tracked objects:
 12545 ;;		On entry : 0/0
 12546 ;;		On exit  : 0/0
 12547 ;;		Unchanged: 0/0
 12548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12549 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12550 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12551 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12552 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12553 ;;Total ram usage:        0 bytes
 12554 ;; Hardware stack levels used:    1
 12555 ;; This function calls:
 12556 ;;		Nothing
 12557 ;; This function is called by:
 12558 ;;		_SYSTEM_Initialize
 12559 ;; This function uses a non-reentrant model
 12560 ;;
 12561                           
 12562                           
 12563                           ;psect for function _OSCILLATOR_Initialize
 12564  1EED                     _OSCILLATOR_Initialize:	
 12565                           
 12566                           ;system.c: 55: OSCCON1 = 0x60;
 12567                           
 12568                           ;incstack = 0
 12569                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 12570  1EED  3060               	movlw	96
 12571  1EEE  0031               	movlb	17	; select bank17
 12572  1EEF  008D               	movwf	13	;volatile
 12573                           
 12574                           ;system.c: 56: OSCCON3 = 0x00;
 12575  1EF0  018F               	clrf	15	;volatile
 12576                           
 12577                           ;system.c: 57: OSCEN = 0x00;
 12578  1EF1  0191               	clrf	17	;volatile
 12579                           
 12580                           ;system.c: 58: OSCFRQ = 0x06;
 12581  1EF2  3006               	movlw	6
 12582  1EF3  0093               	movwf	19	;volatile
 12583                           
 12584                           ;system.c: 59: OSCTUNE = 0x00;
 12585  1EF4  0192               	clrf	18	;volatile
 12586  1EF5  0008               	return
 12587  1EF6                     __end_of_OSCILLATOR_Initialize:	
 12588                           
 12589                           	psect	text24
 12590  1210                     __ptext24:	
 12591 ;; *************** function _LCDInit *****************
 12592 ;; Defined at:
 12593 ;;		line 247 in file "lcd.c"
 12594 ;; Parameters:    Size  Location     Type
 12595 ;;		None
 12596 ;; Auto vars:     Size  Location     Type
 12597 ;;		None
 12598 ;; Return value:  Size  Location     Type
 12599 ;;                  1    wreg      void 
 12600 ;; Registers used:
 12601 ;;		wreg, status,2, status,0, pclath, cstack
 12602 ;; Tracked objects:
 12603 ;;		On entry : 0/0
 12604 ;;		On exit  : 0/0
 12605 ;;		Unchanged: 0/0
 12606 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12607 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12608 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12609 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12610 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12611 ;;Total ram usage:        1 bytes
 12612 ;; Hardware stack levels used:    1
 12613 ;; Hardware stack levels required when called:    1
 12614 ;; This function calls:
 12615 ;;		_LCDWrite
 12616 ;; This function is called by:
 12617 ;;		_SYSTEM_Initialize
 12618 ;;		_main
 12619 ;; This function uses a non-reentrant model
 12620 ;;
 12621                           
 12622                           
 12623                           ;psect for function _LCDInit
 12624  1210                     _LCDInit:	
 12625                           
 12626                           ;lcd.c: 249: TRISAbits.TRISA0 = 0;
 12627                           
 12628                           ;incstack = 0
 12629                           ; Regs used in _LCDInit: [wreg+status,2+status,0+pclath+cstack]
 12630  1210  0020               	movlb	0	; select bank0
 12631  1211  1011               	bcf	17,0	;volatile
 12632                           
 12633                           ;lcd.c: 250: TRISAbits.TRISA1 = 0;
 12634  1212  1091               	bcf	17,1	;volatile
 12635                           
 12636                           ;lcd.c: 251: TRISAbits.TRISA2 = 0;
 12637  1213  1111               	bcf	17,2	;volatile
 12638                           
 12639                           ;lcd.c: 252: TRISAbits.TRISA3 = 0;
 12640  1214  1191               	bcf	17,3	;volatile
 12641                           
 12642                           ;lcd.c: 253: TRISAbits.TRISA4 = 0;
 12643  1215  1211               	bcf	17,4	;volatile
 12644                           
 12645                           ;lcd.c: 254: LATAbits.LATA3 = 0;
 12646  1216  1196               	bcf	22,3	;volatile
 12647                           
 12648                           ;lcd.c: 255: LATAbits.LATA4 = 0;
 12649  1217  1216               	bcf	22,4	;volatile
 12650                           
 12651                           ;lcd.c: 256: LATAbits.LATA2 = 0;
 12652  1218  1116               	bcf	22,2	;volatile
 12653                           
 12654                           ;lcd.c: 257: LATAbits.LATA0 = 0;
 12655  1219  1016               	bcf	22,0	;volatile
 12656                           
 12657                           ;lcd.c: 259: LATAbits.LATA0 = 1;
 12658  121A  1416               	bsf	22,0	;volatile
 12659                           
 12660                           ;lcd.c: 261: LCDWrite(0, 0x21);
 12661  121B  3021               	movlw	33
 12662  121C  00F5               	movwf	??_LCDInit
 12663  121D  0875               	movf	??_LCDInit,w
 12664  121E  00F0               	movwf	LCDWrite@data
 12665  121F  3000               	movlw	0
 12666  1220  3191  2162  3192   	fcall	_LCDWrite
 12667                           
 12668                           ;lcd.c: 269: LCDWrite(0, 0XB9);
 12669  1223  30B9               	movlw	185
 12670  1224  00F5               	movwf	??_LCDInit
 12671  1225  0875               	movf	??_LCDInit,w
 12672  1226  00F0               	movwf	LCDWrite@data
 12673  1227  3000               	movlw	0
 12674  1228  3191  2162  3192   	fcall	_LCDWrite
 12675                           
 12676                           ;lcd.c: 271: LCDWrite(0, 0x04);
 12677  122B  3004               	movlw	4
 12678  122C  00F5               	movwf	??_LCDInit
 12679  122D  0875               	movf	??_LCDInit,w
 12680  122E  00F0               	movwf	LCDWrite@data
 12681  122F  3000               	movlw	0
 12682  1230  3191  2162  3192   	fcall	_LCDWrite
 12683                           
 12684                           ;lcd.c: 273: LCDWrite(0, 0x14);
 12685  1233  3014               	movlw	20
 12686  1234  00F5               	movwf	??_LCDInit
 12687  1235  0875               	movf	??_LCDInit,w
 12688  1236  00F0               	movwf	LCDWrite@data
 12689  1237  3000               	movlw	0
 12690  1238  3191  2162  3192   	fcall	_LCDWrite
 12691                           
 12692                           ;lcd.c: 275: LCDWrite(0, 0x20);
 12693  123B  3020               	movlw	32
 12694  123C  00F5               	movwf	??_LCDInit
 12695  123D  0875               	movf	??_LCDInit,w
 12696  123E  00F0               	movwf	LCDWrite@data
 12697  123F  3000               	movlw	0
 12698  1240  3191  2162  3192   	fcall	_LCDWrite
 12699                           
 12700                           ;lcd.c: 277: LCDWrite(0, 0x0C);
 12701  1243  300C               	movlw	12
 12702  1244  00F5               	movwf	??_LCDInit
 12703  1245  0875               	movf	??_LCDInit,w
 12704  1246  00F0               	movwf	LCDWrite@data
 12705  1247  3000               	movlw	0
 12706  1248  3191  2162         	fcall	_LCDWrite
 12707  124A  0008               	return
 12708  124B                     __end_of_LCDInit:	
 12709                           
 12710                           	psect	text25
 12711  1187                     __ptext25:	
 12712 ;; *************** function _LCDClear *****************
 12713 ;; Defined at:
 12714 ;;		line 182 in file "lcd.c"
 12715 ;; Parameters:    Size  Location     Type
 12716 ;;		None
 12717 ;; Auto vars:     Size  Location     Type
 12718 ;;  index           2    9[COMMON] int 
 12719 ;; Return value:  Size  Location     Type
 12720 ;;                  1    wreg      void 
 12721 ;; Registers used:
 12722 ;;		wreg, status,2, status,0, pclath, cstack
 12723 ;; Tracked objects:
 12724 ;;		On entry : 0/0
 12725 ;;		On exit  : 0/0
 12726 ;;		Unchanged: 0/0
 12727 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12728 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12729 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12730 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12731 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12732 ;;Total ram usage:        3 bytes
 12733 ;; Hardware stack levels used:    1
 12734 ;; Hardware stack levels required when called:    2
 12735 ;; This function calls:
 12736 ;;		_LCDWrite
 12737 ;;		_gotoXY
 12738 ;; This function is called by:
 12739 ;;		_SYSTEM_Initialize
 12740 ;;		_main
 12741 ;; This function uses a non-reentrant model
 12742 ;;
 12743                           
 12744                           
 12745                           ;psect for function _LCDClear
 12746  1187                     _LCDClear:	
 12747                           
 12748                           ;lcd.c: 184: int index;
 12749                           ;lcd.c: 185: for (index = 0 ; index < (84 * 48 / 8) ; index++)
 12750                           
 12751                           ;incstack = 0
 12752                           ; Regs used in _LCDClear: [wreg+status,2+status,0+pclath+cstack]
 12753  1187  01F9               	clrf	LCDClear@index
 12754  1188  01FA               	clrf	LCDClear@index+1
 12755  1189  087A               	movf	LCDClear@index+1,w
 12756  118A  3A80               	xorlw	128
 12757  118B  00F8               	movwf	??_LCDClear
 12758  118C  3081               	movlw	129
 12759  118D  0278               	subwf	??_LCDClear,w
 12760  118E  1D03               	skipz
 12761  118F  2992               	goto	u2885
 12762  1190  30F8               	movlw	248
 12763  1191  0279               	subwf	LCDClear@index,w
 12764  1192                     u2885:	
 12765  1192  1803               	btfsc	3,0
 12766  1193  29A8               	goto	l2678
 12767  1194                     l2672:	
 12768                           
 12769                           ;lcd.c: 186: LCDWrite(1, 0x00);
 12770  1194  01F0               	clrf	LCDWrite@data
 12771  1195  3001               	movlw	1
 12772  1196  3191  2162  3191   	fcall	_LCDWrite
 12773  1199  3001               	movlw	1
 12774  119A  07F9               	addwf	LCDClear@index,f
 12775  119B  3000               	movlw	0
 12776  119C  3DFA               	addwfc	LCDClear@index+1,f
 12777  119D  087A               	movf	LCDClear@index+1,w
 12778  119E  3A80               	xorlw	128
 12779  119F  00F8               	movwf	??_LCDClear
 12780  11A0  3081               	movlw	129
 12781  11A1  0278               	subwf	??_LCDClear,w
 12782  11A2  1D03               	skipz
 12783  11A3  29A6               	goto	u2895
 12784  11A4  30F8               	movlw	248
 12785  11A5  0279               	subwf	LCDClear@index,w
 12786  11A6                     u2895:	
 12787  11A6  1C03               	skipc
 12788  11A7  2994               	goto	l2672
 12789  11A8                     l2678:	
 12790                           
 12791                           ;lcd.c: 187: gotoXY(0, 0);
 12792  11A8  01F5               	clrf	gotoXY@y
 12793  11A9  3000               	movlw	0
 12794  11AA  319F  272A         	fcall	_gotoXY
 12795  11AC  0008               	return
 12796  11AD                     __end_of_LCDClear:	
 12797                           
 12798                           	psect	text26
 12799  1F2A                     __ptext26:	
 12800 ;; *************** function _gotoXY *****************
 12801 ;; Defined at:
 12802 ;;		line 124 in file "lcd.c"
 12803 ;; Parameters:    Size  Location     Type
 12804 ;;  x               1    wreg     unsigned char 
 12805 ;;  y               1    5[COMMON] unsigned char 
 12806 ;; Auto vars:     Size  Location     Type
 12807 ;;  x               1    7[COMMON] unsigned char 
 12808 ;; Return value:  Size  Location     Type
 12809 ;;                  1    wreg      void 
 12810 ;; Registers used:
 12811 ;;		wreg, status,2, status,0, pclath, cstack
 12812 ;; Tracked objects:
 12813 ;;		On entry : 0/0
 12814 ;;		On exit  : 0/0
 12815 ;;		Unchanged: 0/0
 12816 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12817 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12818 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12819 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12820 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12821 ;;Total ram usage:        3 bytes
 12822 ;; Hardware stack levels used:    1
 12823 ;; Hardware stack levels required when called:    1
 12824 ;; This function calls:
 12825 ;;		_LCDWrite
 12826 ;; This function is called by:
 12827 ;;		_LCDClear
 12828 ;;		_main
 12829 ;; This function uses a non-reentrant model
 12830 ;;
 12831                           
 12832                           
 12833                           ;psect for function _gotoXY
 12834  1F2A                     _gotoXY:	
 12835                           
 12836                           ;incstack = 0
 12837                           ; Regs used in _gotoXY: [wreg+status,2+status,0+pclath+cstack]
 12838                           ;gotoXY@x stored from wreg
 12839  1F2A  00F7               	movwf	gotoXY@x
 12840                           
 12841                           ;lcd.c: 126: LCDWrite(0,(uint8_t)(0x80 | x));
 12842  1F2B  0877               	movf	gotoXY@x,w
 12843  1F2C  3880               	iorlw	128
 12844  1F2D  00F6               	movwf	??_gotoXY
 12845  1F2E  0876               	movf	??_gotoXY,w
 12846  1F2F  00F0               	movwf	LCDWrite@data
 12847  1F30  3000               	movlw	0
 12848  1F31  3191  2162  319F   	fcall	_LCDWrite
 12849                           
 12850                           ;lcd.c: 127: LCDWrite(0,(uint8_t)(0x40 | y));
 12851  1F34  0875               	movf	gotoXY@y,w
 12852  1F35  3840               	iorlw	64
 12853  1F36  00F6               	movwf	??_gotoXY
 12854  1F37  0876               	movf	??_gotoXY,w
 12855  1F38  00F0               	movwf	LCDWrite@data
 12856  1F39  3000               	movlw	0
 12857  1F3A  3191  2162         	fcall	_LCDWrite
 12858  1F3C  0008               	return
 12859  1F3D                     __end_of_gotoXY:	
 12860                           
 12861                           	psect	text27
 12862  153F                     __ptext27:	
 12863 ;; *************** function _Init_Battery_State_Machine *****************
 12864 ;; Defined at:
 12865 ;;		line 18 in file "battery_charger.c"
 12866 ;; Parameters:    Size  Location     Type
 12867 ;;  z               1    wreg     unsigned char 
 12868 ;; Auto vars:     Size  Location     Type
 12869 ;;  z               1   41[BANK0 ] unsigned char 
 12870 ;; Return value:  Size  Location     Type
 12871 ;;                  1    wreg      void 
 12872 ;; Registers used:
 12873 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12874 ;; Tracked objects:
 12875 ;;		On entry : 0/0
 12876 ;;		On exit  : 0/0
 12877 ;;		Unchanged: 0/0
 12878 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12879 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12880 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12881 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12882 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12883 ;;Total ram usage:        5 bytes
 12884 ;; Hardware stack levels used:    1
 12885 ;; Hardware stack levels required when called:    2
 12886 ;; This function calls:
 12887 ;;		___awtoft
 12888 ;;		___ftmul
 12889 ;;		___fttol
 12890 ;; This function is called by:
 12891 ;;		_SYSTEM_Initialize
 12892 ;; This function uses a non-reentrant model
 12893 ;;
 12894                           
 12895                           
 12896                           ;psect for function _Init_Battery_State_Machine
 12897  153F                     _Init_Battery_State_Machine:	
 12898                           
 12899                           ;incstack = 0
 12900                           ; Regs used in _Init_Battery_State_Machine: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 12901                           ;Init_Battery_State_Machine@z stored from wreg
 12902  153F  0020               	movlb	0	; select bank0
 12903  1540  00C9               	movwf	Init_Battery_State_Machine@z
 12904                           
 12905                           ;battery_charger.c: 20: batteryState[z] =PRECHARGE;
 12906  1541  3003               	movlw	3
 12907  1542  00C5               	movwf	??_Init_Battery_State_Machine
 12908  1543  0849               	movf	Init_Battery_State_Machine@z,w
 12909  1544  3E67               	addlw	(low (_batteryState| 0))& (0+255)
 12910  1545  0086               	movwf	6
 12911  1546  0187               	clrf	7
 12912  1547  0845               	movf	??_Init_Battery_State_Machine,w
 12913  1548  0081               	movwf	1
 12914                           
 12915                           ;battery_charger.c: 21: stateCounter[z] =5;
 12916  1549  3549               	lslf	Init_Battery_State_Machine@z,w
 12917  154A  3EBC               	addlw	(low (_stateCounter| 0))& (0+255)
 12918  154B  0086               	movwf	6
 12919  154C  0187               	clrf	7
 12920  154D  3005               	movlw	5
 12921  154E  3FC0               	movwi [0]fsr1
 12922  154F  3000               	movlw	0
 12923  1550  3FC1               	movwi [1]fsr1
 12924                           
 12925                           ;battery_charger.c: 22: Iref[z] =10;
 12926  1551  3549               	lslf	Init_Battery_State_Machine@z,w
 12927  1552  3EC0               	addlw	(low (_Iref| 0))& (0+255)
 12928  1553  0086               	movwf	6
 12929  1554  0187               	clrf	7
 12930  1555  300A               	movlw	10
 12931  1556  3FC0               	movwi [0]fsr1
 12932  1557  3000               	movlw	0
 12933  1558  3FC1               	movwi [1]fsr1
 12934                           
 12935                           ;battery_charger.c: 23: Vref[z] =1425+(int16_t)((250-batteryTemp)*.24);
 12936  1559  096D               	comf	_batteryTemp,w
 12937  155A  00C5               	movwf	??_Init_Battery_State_Machine
 12938  155B  096E               	comf	_batteryTemp+1,w
 12939  155C  00C6               	movwf	??_Init_Battery_State_Machine+1
 12940  155D  0AC5               	incf	??_Init_Battery_State_Machine,f
 12941  155E  1903               	skipnz
 12942  155F  0AC6               	incf	??_Init_Battery_State_Machine+1,f
 12943  1560  0845               	movf	??_Init_Battery_State_Machine,w
 12944  1561  3EFA               	addlw	250
 12945  1562  00A4               	movwf	___awtoft@c
 12946  1563  3000               	movlw	0
 12947  1564  3D46               	addwfc	??_Init_Battery_State_Machine+1,w
 12948  1565  00A5               	movwf	___awtoft@c+1
 12949  1566  3191  2140  3195   	fcall	___awtoft
 12950  1569  0020               	movlb	0	; select bank0
 12951  156A  0824               	movf	?___awtoft,w
 12952  156B  00AA               	movwf	___ftmul@f2
 12953  156C  0825               	movf	?___awtoft+1,w
 12954  156D  00AB               	movwf	___ftmul@f2+1
 12955  156E  0826               	movf	?___awtoft+2,w
 12956  156F  00AC               	movwf	___ftmul@f2+2
 12957  1570  30C3               	movlw	195
 12958  1571  00A7               	movwf	___ftmul@f1
 12959  1572  3075               	movlw	117
 12960  1573  00A8               	movwf	___ftmul@f1+1
 12961  1574  303E               	movlw	62
 12962  1575  00A9               	movwf	___ftmul@f1+2
 12963  1576  3188  20A6  3195   	fcall	___ftmul
 12964  1579  0020               	movlb	0	; select bank0
 12965  157A  0827               	movf	?___ftmul,w
 12966  157B  00B7               	movwf	___fttol@f1
 12967  157C  0828               	movf	?___ftmul+1,w
 12968  157D  00B8               	movwf	___fttol@f1+1
 12969  157E  0829               	movf	?___ftmul+2,w
 12970  157F  00B9               	movwf	___fttol@f1+2
 12971  1580  3188  201F         	fcall	___fttol
 12972  1582  0020               	movlb	0	; select bank0
 12973  1583  0837               	movf	?___fttol,w
 12974  1584  3E91               	addlw	145
 12975  1585  00C7               	movwf	??_Init_Battery_State_Machine+2
 12976  1586  3005               	movlw	5
 12977  1587  3D38               	addwfc	?___fttol+1,w
 12978  1588  00C8               	movwf	??_Init_Battery_State_Machine+3
 12979  1589  3549               	lslf	Init_Battery_State_Machine@z,w
 12980  158A  3EB8               	addlw	(low (_Vref| 0))& (0+255)
 12981  158B  0086               	movwf	6
 12982  158C  0187               	clrf	7
 12983  158D  0847               	movf	??_Init_Battery_State_Machine+2,w
 12984  158E  3FC0               	movwi [0]fsr1
 12985  158F  0848               	movf	??_Init_Battery_State_Machine+3,w
 12986  1590  3FC1               	movwi [1]fsr1
 12987                           
 12988                           ;battery_charger.c: 24: Imin[z] =15;
 12989  1591  3549               	lslf	Init_Battery_State_Machine@z,w
 12990  1592  3E4D               	addlw	(low (_Imin| (0+256)))& (0+255)
 12991  1593  0086               	movwf	6
 12992  1594  3001               	movlw	1	; select bank2/3
 12993  1595  0087               	movwf	7
 12994  1596  300F               	movlw	15
 12995  1597  3FC0               	movwi [0]fsr1
 12996  1598  3000               	movlw	0
 12997  1599  3FC1               	movwi [1]fsr1
 12998                           
 12999                           ;battery_charger.c: 25: IminCount[z] = 600;
 13000  159A  3549               	lslf	Init_Battery_State_Machine@z,w
 13001  159B  3EC4               	addlw	(low (_IminCount| 0))& (0+255)
 13002  159C  0086               	movwf	6
 13003  159D  0187               	clrf	7
 13004  159E  3058               	movlw	88
 13005  159F  3FC0               	movwi [0]fsr1
 13006  15A0  3002               	movlw	2
 13007  15A1  3FC1               	movwi [1]fsr1
 13008  15A2  0008               	return
 13009  15A3                     __end_of_Init_Battery_State_Machine:	
 13010                           
 13011                           	psect	text28
 13012  1FE1                     __ptext28:	
 13013 ;; *************** function _ADC_Initialize *****************
 13014 ;; Defined at:
 13015 ;;		line 138 in file "adc.c"
 13016 ;; Parameters:    Size  Location     Type
 13017 ;;		None
 13018 ;; Auto vars:     Size  Location     Type
 13019 ;;		None
 13020 ;; Return value:  Size  Location     Type
 13021 ;;                  1    wreg      void 
 13022 ;; Registers used:
 13023 ;;		wreg, status,2
 13024 ;; Tracked objects:
 13025 ;;		On entry : 0/0
 13026 ;;		On exit  : 0/0
 13027 ;;		Unchanged: 0/0
 13028 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13029 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13030 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13031 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13032 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13033 ;;Total ram usage:        0 bytes
 13034 ;; Hardware stack levels used:    1
 13035 ;; This function calls:
 13036 ;;		Nothing
 13037 ;; This function is called by:
 13038 ;;		_SYSTEM_Initialize
 13039 ;; This function uses a non-reentrant model
 13040 ;;
 13041                           
 13042                           
 13043                           ;psect for function _ADC_Initialize
 13044  1FE1                     _ADC_Initialize:	
 13045                           
 13046                           ;adc.c: 140: ADCON1 = 0x00;
 13047                           
 13048                           ;incstack = 0
 13049                           ; Regs used in _ADC_Initialize: [wreg+status,2]
 13050  1FE1  0021               	movlb	1	; select bank1
 13051  1FE2  0194               	clrf	20	;volatile
 13052                           
 13053                           ;adc.c: 142: ADCON2 = 0x00;
 13054  1FE3  0195               	clrf	21	;volatile
 13055                           
 13056                           ;adc.c: 144: ADCON3 = 0x00;
 13057  1FE4  0196               	clrf	22	;volatile
 13058                           
 13059                           ;adc.c: 146: ADACT = 0x00;
 13060  1FE5  0199               	clrf	25	;volatile
 13061                           
 13062                           ;adc.c: 148: ADSTAT = 0x00;
 13063  1FE6  0197               	clrf	23	;volatile
 13064                           
 13065                           ;adc.c: 150: FVRCON = 0b11000011;
 13066  1FE7  30C3               	movlw	195
 13067  1FE8  0032               	movlb	18	; select bank18
 13068  1FE9  008C               	movwf	12	;volatile
 13069                           
 13070                           ;adc.c: 151: ADCLK = 0x3F;
 13071  1FEA  303F               	movlw	63
 13072  1FEB  0021               	movlb	1	; select bank1
 13073  1FEC  0098               	movwf	24	;volatile
 13074                           
 13075                           ;adc.c: 158: ADREF = 0x03;
 13076  1FED  3003               	movlw	3
 13077  1FEE  009A               	movwf	26	;volatile
 13078                           
 13079                           ;adc.c: 161: ADCAP = 0x00;
 13080  1FEF  019B               	clrf	27	;volatile
 13081                           
 13082                           ;adc.c: 164: ADPRE = 0x07;
 13083  1FF0  3007               	movlw	7
 13084  1FF1  009C               	movwf	28	;volatile
 13085                           
 13086                           ;adc.c: 166: ADACQ = 0x00;
 13087  1FF2  019D               	clrf	29	;volatile
 13088                           
 13089                           ;adc.c: 168: ADPCH = 0x00;
 13090  1FF3  019E               	clrf	30	;volatile
 13091                           
 13092                           ;adc.c: 170: ADRPT = 0x00;
 13093  1FF4  0022               	movlb	2	; select bank2
 13094  1FF5  018D               	clrf	13	;volatile
 13095                           
 13096                           ;adc.c: 172: ADLTHL = 0x00;
 13097  1FF6  018E               	clrf	14	;volatile
 13098                           
 13099                           ;adc.c: 174: ADLTHH = 0x00;
 13100  1FF7  018F               	clrf	15	;volatile
 13101                           
 13102                           ;adc.c: 176: ADUTHL = 0x00;
 13103  1FF8  0190               	clrf	16	;volatile
 13104                           
 13105                           ;adc.c: 178: ADUTHH = 0x00;
 13106  1FF9  0191               	clrf	17	;volatile
 13107                           
 13108                           ;adc.c: 180: ADSTPTL = 0x00;
 13109  1FFA  0192               	clrf	18	;volatile
 13110                           
 13111                           ;adc.c: 182: ADSTPTH = 0x00;
 13112  1FFB  0193               	clrf	19	;volatile
 13113                           
 13114                           ;adc.c: 184: ADCON0 = 0x84;
 13115  1FFC  3084               	movlw	132
 13116  1FFD  0021               	movlb	1	; select bank1
 13117  1FFE  0093               	movwf	19	;volatile
 13118  1FFF  0008               	return
 13119  2000                     __end_of_ADC_Initialize:	
 13120                           
 13121                           	psect	text29
 13122  1F92                     __ptext29:	
 13123 ;; *************** function _PWM7_LoadDutyValue *****************
 13124 ;; Defined at:
 13125 ;;		line 37 in file "pwm.c"
 13126 ;; Parameters:    Size  Location     Type
 13127 ;;  dutyCycle7      2    0[COMMON] unsigned int 
 13128 ;; Auto vars:     Size  Location     Type
 13129 ;;		None
 13130 ;; Return value:  Size  Location     Type
 13131 ;;                  1    wreg      void 
 13132 ;; Registers used:
 13133 ;;		wreg, status,2, status,0
 13134 ;; Tracked objects:
 13135 ;;		On entry : 0/0
 13136 ;;		On exit  : 0/0
 13137 ;;		Unchanged: 0/0
 13138 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13139 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13140 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13141 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13142 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13143 ;;Total ram usage:        4 bytes
 13144 ;; Hardware stack levels used:    1
 13145 ;; This function calls:
 13146 ;;		Nothing
 13147 ;; This function is called by:
 13148 ;;		_main
 13149 ;; This function uses a non-reentrant model
 13150 ;;
 13151                           
 13152                           
 13153                           ;psect for function _PWM7_LoadDutyValue
 13154  1F92                     _PWM7_LoadDutyValue:	
 13155                           
 13156                           ;pwm.c: 39: PWM7DCH = (dutyCycle7 & 0x03FC)>>2;
 13157                           
 13158                           ;incstack = 0
 13159                           ; Regs used in _PWM7_LoadDutyValue: [wreg+status,2+status,0]
 13160  1F92  0871               	movf	PWM7_LoadDutyValue@dutyCycle7+1,w
 13161  1F93  00F3               	movwf	??_PWM7_LoadDutyValue+1
 13162  1F94  0870               	movf	PWM7_LoadDutyValue@dutyCycle7,w
 13163  1F95  00F2               	movwf	??_PWM7_LoadDutyValue
 13164  1F96  36F3               	lsrf	??_PWM7_LoadDutyValue+1,f
 13165  1F97  0CF2               	rrf	??_PWM7_LoadDutyValue,f
 13166  1F98  36F3               	lsrf	??_PWM7_LoadDutyValue+1,f
 13167  1F99  0CF2               	rrf	??_PWM7_LoadDutyValue,f
 13168  1F9A  0872               	movf	??_PWM7_LoadDutyValue,w
 13169  1F9B  0027               	movlb	7	; select bank7
 13170  1F9C  0091               	movwf	17	;volatile
 13171                           
 13172                           ;pwm.c: 41: PWM7DCL = (dutyCycle7 & 0x0003)<<6;
 13173  1F9D  0870               	movf	PWM7_LoadDutyValue@dutyCycle7,w
 13174  1F9E  3903               	andlw	3
 13175  1F9F  00F2               	movwf	??_PWM7_LoadDutyValue
 13176  1FA0  3005               	movlw	5
 13177  1FA1                     u3845:	
 13178  1FA1  35F2               	lslf	??_PWM7_LoadDutyValue,f
 13179  1FA2  3EFF               	addlw	-1
 13180  1FA3  1D03               	skipz
 13181  1FA4  2FA1               	goto	u3845
 13182  1FA5  3572               	lslf	??_PWM7_LoadDutyValue,w
 13183  1FA6  0090               	movwf	16	;volatile
 13184  1FA7  0008               	return
 13185  1FA8                     __end_of_PWM7_LoadDutyValue:	
 13186                           
 13187                           	psect	text30
 13188  1F7C                     __ptext30:	
 13189 ;; *************** function _PWM6_LoadDutyValue *****************
 13190 ;; Defined at:
 13191 ;;		line 30 in file "pwm.c"
 13192 ;; Parameters:    Size  Location     Type
 13193 ;;  dutyCycle6      2    0[COMMON] unsigned int 
 13194 ;; Auto vars:     Size  Location     Type
 13195 ;;		None
 13196 ;; Return value:  Size  Location     Type
 13197 ;;                  1    wreg      void 
 13198 ;; Registers used:
 13199 ;;		wreg, status,2, status,0
 13200 ;; Tracked objects:
 13201 ;;		On entry : 0/0
 13202 ;;		On exit  : 0/0
 13203 ;;		Unchanged: 0/0
 13204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13205 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13206 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13207 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13208 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13209 ;;Total ram usage:        4 bytes
 13210 ;; Hardware stack levels used:    1
 13211 ;; This function calls:
 13212 ;;		Nothing
 13213 ;; This function is called by:
 13214 ;;		_main
 13215 ;; This function uses a non-reentrant model
 13216 ;;
 13217                           
 13218                           
 13219                           ;psect for function _PWM6_LoadDutyValue
 13220  1F7C                     _PWM6_LoadDutyValue:	
 13221                           
 13222                           ;pwm.c: 32: PWM6DCH = (dutyCycle6 & 0x03FC)>>2;
 13223                           
 13224                           ;incstack = 0
 13225                           ; Regs used in _PWM6_LoadDutyValue: [wreg+status,2+status,0]
 13226  1F7C  0871               	movf	PWM6_LoadDutyValue@dutyCycle6+1,w
 13227  1F7D  00F3               	movwf	??_PWM6_LoadDutyValue+1
 13228  1F7E  0870               	movf	PWM6_LoadDutyValue@dutyCycle6,w
 13229  1F7F  00F2               	movwf	??_PWM6_LoadDutyValue
 13230  1F80  36F3               	lsrf	??_PWM6_LoadDutyValue+1,f
 13231  1F81  0CF2               	rrf	??_PWM6_LoadDutyValue,f
 13232  1F82  36F3               	lsrf	??_PWM6_LoadDutyValue+1,f
 13233  1F83  0CF2               	rrf	??_PWM6_LoadDutyValue,f
 13234  1F84  0872               	movf	??_PWM6_LoadDutyValue,w
 13235  1F85  0027               	movlb	7	; select bank7
 13236  1F86  008D               	movwf	13	;volatile
 13237                           
 13238                           ;pwm.c: 34: PWM6DCL = (dutyCycle6 & 0x0003)<<6;
 13239  1F87  0870               	movf	PWM6_LoadDutyValue@dutyCycle6,w
 13240  1F88  3903               	andlw	3
 13241  1F89  00F2               	movwf	??_PWM6_LoadDutyValue
 13242  1F8A  3005               	movlw	5
 13243  1F8B                     u3835:	
 13244  1F8B  35F2               	lslf	??_PWM6_LoadDutyValue,f
 13245  1F8C  3EFF               	addlw	-1
 13246  1F8D  1D03               	skipz
 13247  1F8E  2F8B               	goto	u3835
 13248  1F8F  3572               	lslf	??_PWM6_LoadDutyValue,w
 13249  1F90  008C               	movwf	12	;volatile
 13250  1F91  0008               	return
 13251  1F92                     __end_of_PWM6_LoadDutyValue:	
 13252                           
 13253                           	psect	text31
 13254  1F66                     __ptext31:	
 13255 ;; *************** function _PWM1_LoadDutyValue *****************
 13256 ;; Defined at:
 13257 ;;		line 44 in file "pwm.c"
 13258 ;; Parameters:    Size  Location     Type
 13259 ;;  dutyCycle1      2    0[COMMON] unsigned int 
 13260 ;; Auto vars:     Size  Location     Type
 13261 ;;		None
 13262 ;; Return value:  Size  Location     Type
 13263 ;;                  1    wreg      void 
 13264 ;; Registers used:
 13265 ;;		wreg, status,2, status,0
 13266 ;; Tracked objects:
 13267 ;;		On entry : 0/0
 13268 ;;		On exit  : 0/0
 13269 ;;		Unchanged: 0/0
 13270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13271 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13272 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13273 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13274 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13275 ;;Total ram usage:        4 bytes
 13276 ;; Hardware stack levels used:    1
 13277 ;; This function calls:
 13278 ;;		Nothing
 13279 ;; This function is called by:
 13280 ;;		_main
 13281 ;; This function uses a non-reentrant model
 13282 ;;
 13283                           
 13284                           
 13285                           ;psect for function _PWM1_LoadDutyValue
 13286  1F66                     _PWM1_LoadDutyValue:	
 13287                           
 13288                           ;pwm.c: 46: CCPR1H = (dutyCycle1& 0x03FC)>>2;
 13289                           
 13290                           ;incstack = 0
 13291                           ; Regs used in _PWM1_LoadDutyValue: [wreg+status,2+status,0]
 13292  1F66  0871               	movf	PWM1_LoadDutyValue@dutyCycle1+1,w
 13293  1F67  00F3               	movwf	??_PWM1_LoadDutyValue+1
 13294  1F68  0870               	movf	PWM1_LoadDutyValue@dutyCycle1,w
 13295  1F69  00F2               	movwf	??_PWM1_LoadDutyValue
 13296  1F6A  36F3               	lsrf	??_PWM1_LoadDutyValue+1,f
 13297  1F6B  0CF2               	rrf	??_PWM1_LoadDutyValue,f
 13298  1F6C  36F3               	lsrf	??_PWM1_LoadDutyValue+1,f
 13299  1F6D  0CF2               	rrf	??_PWM1_LoadDutyValue,f
 13300  1F6E  0872               	movf	??_PWM1_LoadDutyValue,w
 13301  1F6F  0026               	movlb	6	; select bank6
 13302  1F70  008D               	movwf	13	;volatile
 13303                           
 13304                           ;pwm.c: 47: CCPR1L = (dutyCycle1 & 0x0003)<<6;
 13305  1F71  0870               	movf	PWM1_LoadDutyValue@dutyCycle1,w
 13306  1F72  3903               	andlw	3
 13307  1F73  00F2               	movwf	??_PWM1_LoadDutyValue
 13308  1F74  3005               	movlw	5
 13309  1F75                     u3855:	
 13310  1F75  35F2               	lslf	??_PWM1_LoadDutyValue,f
 13311  1F76  3EFF               	addlw	-1
 13312  1F77  1D03               	skipz
 13313  1F78  2F75               	goto	u3855
 13314  1F79  3572               	lslf	??_PWM1_LoadDutyValue,w
 13315  1F7A  008C               	movwf	12	;volatile
 13316  1F7B  0008               	return
 13317  1F7C                     __end_of_PWM1_LoadDutyValue:	
 13318                           
 13319                           	psect	text32
 13320  1F3D                     __ptext32:	
 13321 ;; *************** function _LCDWriteString *****************
 13322 ;; Defined at:
 13323 ;;		line 176 in file "lcd.c"
 13324 ;; Parameters:    Size  Location     Type
 13325 ;;  characters      2   12[COMMON] PTR const unsigned char 
 13326 ;;		 -> STR_3(5), STR_2(5), STR_1(4), 
 13327 ;; Auto vars:     Size  Location     Type
 13328 ;;		None
 13329 ;; Return value:  Size  Location     Type
 13330 ;;                  1    wreg      void 
 13331 ;; Registers used:
 13332 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13333 ;; Tracked objects:
 13334 ;;		On entry : 0/0
 13335 ;;		On exit  : 0/0
 13336 ;;		Unchanged: 0/0
 13337 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13338 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13339 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13340 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13341 ;;      Totals:         2       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13342 ;;Total ram usage:        3 bytes
 13343 ;; Hardware stack levels used:    1
 13344 ;; Hardware stack levels required when called:    2
 13345 ;; This function calls:
 13346 ;;		_LCDWriteCharacter
 13347 ;; This function is called by:
 13348 ;;		_main
 13349 ;; This function uses a non-reentrant model
 13350 ;;
 13351                           
 13352                           
 13353                           ;psect for function _LCDWriteString
 13354  1F3D                     _LCDWriteString:	
 13355  1F3D                     l3116:	
 13356                           ;lcd.c: 178: while (*characters)
 13357                           
 13358                           ;incstack = 0
 13359                           ; Regs used in _LCDWriteString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13360                           
 13361  1F3D  087C               	movf	LCDWriteString@characters,w
 13362  1F3E  0084               	movwf	4
 13363  1F3F  087D               	movf	LCDWriteString@characters+1,w
 13364  1F40  0085               	movwf	5
 13365  1F41  0012               	moviw fsr0++
 13366  1F42  1903               	btfsc	3,2
 13367  1F43  0008               	return
 13368                           
 13369                           ;lcd.c: 179: LCDWriteCharacter(*characters++);
 13370  1F44  087C               	movf	LCDWriteString@characters,w
 13371  1F45  0084               	movwf	4
 13372  1F46  087D               	movf	LCDWriteString@characters+1,w
 13373  1F47  0085               	movwf	5
 13374  1F48  0800               	movf	0,w	;code access
 13375  1F49  3194  2427  319F   	fcall	_LCDWriteCharacter
 13376  1F4C  3001               	movlw	1
 13377  1F4D  07FC               	addwf	LCDWriteString@characters,f
 13378  1F4E  3000               	movlw	0
 13379  1F4F  3DFD               	addwfc	LCDWriteString@characters+1,f
 13380  1F50  2F3D               	goto	l3116
 13381  1F51                     __end_of_LCDWriteString:	
 13382                           
 13383                           	psect	text33
 13384  095A                     __ptext33:	
 13385 ;; *************** function _LCDWriteInt *****************
 13386 ;; Defined at:
 13387 ;;		line 190 in file "lcd.c"
 13388 ;; Parameters:    Size  Location     Type
 13389 ;;  value           2   37[BANK0 ] int 
 13390 ;;  fieldLength     1   39[BANK0 ] char 
 13391 ;;  numPlaces       1   40[BANK0 ] unsigned char 
 13392 ;;  sign            1   41[BANK0 ] unsigned char 
 13393 ;; Auto vars:     Size  Location     Type
 13394 ;;  str             5   46[BANK0 ] unsigned char [5]
 13395 ;;  i               1   52[BANK0 ] unsigned char 
 13396 ;;  j               1   51[BANK0 ] unsigned char 
 13397 ;; Return value:  Size  Location     Type
 13398 ;;                  1    wreg      void 
 13399 ;; Registers used:
 13400 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13401 ;; Tracked objects:
 13402 ;;		On entry : 0/0
 13403 ;;		On exit  : 0/0
 13404 ;;		Unchanged: 0/0
 13405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13406 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13407 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13408 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13409 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13410 ;;Total ram usage:       16 bytes
 13411 ;; Hardware stack levels used:    1
 13412 ;; Hardware stack levels required when called:    2
 13413 ;; This function calls:
 13414 ;;		_LCDWriteCharacter
 13415 ;;		___awdiv
 13416 ;;		___lwmod
 13417 ;; This function is called by:
 13418 ;;		_main
 13419 ;; This function uses a non-reentrant model
 13420 ;;
 13421                           
 13422                           
 13423                           ;psect for function _LCDWriteInt
 13424  095A                     _LCDWriteInt:	
 13425                           
 13426                           ;lcd.c: 192: uint8_t str[5]={0,0,0,0,0};
 13427                           
 13428                           ;incstack = 0
 13429                           ; Regs used in _LCDWriteInt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13430  095A  3048               	movlw	low LCDWriteInt@F14392
 13431  095B  0086               	movwf	6
 13432  095C  3001               	movlw	high LCDWriteInt@F14392
 13433  095D  0087               	movwf	7
 13434  095E  304E               	movlw	low LCDWriteInt@str
 13435  095F  0084               	movwf	4
 13436  0960  3000               	movlw	high LCDWriteInt@str
 13437  0961  0085               	movwf	5
 13438  0962  3005               	movlw	5
 13439  0963  0020               	movlb	0	; select bank0
 13440  0964  00CA               	movwf	??_LCDWriteInt
 13441  0965                     u3740:	
 13442  0965  0016               	moviw fsr1++
 13443  0966  001A               	movwi fsr0++
 13444  0967  0BCA               	decfsz	??_LCDWriteInt,f
 13445  0968  2965               	goto	u3740
 13446                           
 13447                           ;lcd.c: 193: uint8_t i=4,j=0;
 13448  0969  3004               	movlw	4
 13449  096A  00CA               	movwf	??_LCDWriteInt
 13450  096B  084A               	movf	??_LCDWriteInt,w
 13451  096C  00D4               	movwf	LCDWriteInt@i
 13452  096D  01D3               	clrf	LCDWriteInt@j
 13453                           
 13454                           ;lcd.c: 195: if(value<0)
 13455  096E  1FC6               	btfss	LCDWriteInt@value+1,7
 13456  096F  297B               	goto	l3130
 13457                           
 13458                           ;lcd.c: 196: {
 13459                           ;lcd.c: 197: LCDWriteCharacter('-');
 13460  0970  302D               	movlw	45
 13461  0971  3194  2427  3189   	fcall	_LCDWriteCharacter
 13462                           
 13463                           ;lcd.c: 198: value=value*-1;
 13464  0974  0020               	movlb	0	; select bank0
 13465  0975  09C5               	comf	LCDWriteInt@value,f
 13466  0976  09C6               	comf	LCDWriteInt@value+1,f
 13467  0977  0AC5               	incf	LCDWriteInt@value,f
 13468  0978  1903               	skipnz
 13469  0979  0AC6               	incf	LCDWriteInt@value+1,f
 13470                           
 13471                           ;lcd.c: 199: }
 13472  097A  2982               	goto	l3140
 13473  097B                     l3130:	
 13474                           
 13475                           ;lcd.c: 201: else
 13476                           ;lcd.c: 202: {
 13477                           ;lcd.c: 203: if(sign == 1)
 13478  097B  0349               	decf	LCDWriteInt@sign,w
 13479  097C  1D03               	btfss	3,2
 13480  097D  2982               	goto	l3140
 13481                           
 13482                           ;lcd.c: 204: {
 13483                           ;lcd.c: 205: LCDWriteCharacter('+');
 13484  097E  302B               	movlw	43
 13485  097F  3194  2427  3189   	fcall	_LCDWriteCharacter
 13486  0982                     l3140:	
 13487                           ;lcd.c: 206: }
 13488                           ;lcd.c: 207: }
 13489                           ;lcd.c: 209: while(value)
 13490                           
 13491  0982  0020               	movlb	0	; select bank0
 13492  0983  0845               	movf	LCDWriteInt@value,w
 13493  0984  0446               	iorwf	LCDWriteInt@value+1,w
 13494  0985  1903               	btfsc	3,2
 13495  0986  29AF               	goto	l3142
 13496                           
 13497                           ;lcd.c: 210: {
 13498                           ;lcd.c: 211: str[i]=(uint16_t)value%10;
 13499  0987  300A               	movlw	10
 13500  0988  00F0               	movwf	___lwmod@divisor
 13501  0989  3000               	movlw	0
 13502  098A  00F1               	movwf	___lwmod@divisor+1
 13503  098B  0020               	movlb	0	; select bank0
 13504  098C  0846               	movf	LCDWriteInt@value+1,w
 13505  098D  00F3               	movwf	___lwmod@dividend+1
 13506  098E  0845               	movf	LCDWriteInt@value,w
 13507  098F  00F2               	movwf	___lwmod@dividend
 13508  0990  3191  21AD  3189   	fcall	___lwmod
 13509  0993  0870               	movf	?___lwmod,w
 13510  0994  0020               	movlb	0	; select bank0
 13511  0995  00CA               	movwf	??_LCDWriteInt
 13512  0996  0854               	movf	LCDWriteInt@i,w
 13513  0997  3E4E               	addlw	(low (LCDWriteInt@str| 0))& (0+255)
 13514  0998  0086               	movwf	6
 13515  0999  0187               	clrf	7
 13516  099A  084A               	movf	??_LCDWriteInt,w
 13517  099B  0081               	movwf	1
 13518                           
 13519                           ;lcd.c: 212: value=value/10;
 13520  099C  300A               	movlw	10
 13521  099D  00F6               	movwf	___awdiv@divisor
 13522  099E  3000               	movlw	0
 13523  099F  00F7               	movwf	___awdiv@divisor+1
 13524  09A0  0846               	movf	LCDWriteInt@value+1,w
 13525  09A1  00F9               	movwf	___awdiv@dividend+1
 13526  09A2  0845               	movf	LCDWriteInt@value,w
 13527  09A3  00F8               	movwf	___awdiv@dividend
 13528  09A4  3193  23D5  3189   	fcall	___awdiv
 13529  09A7  0877               	movf	?___awdiv+1,w
 13530  09A8  0020               	movlb	0	; select bank0
 13531  09A9  00C6               	movwf	LCDWriteInt@value+1
 13532  09AA  0876               	movf	?___awdiv,w
 13533  09AB  00C5               	movwf	LCDWriteInt@value
 13534                           
 13535                           ;lcd.c: 213: i--;
 13536  09AC  3001               	movlw	1
 13537  09AD  02D4               	subwf	LCDWriteInt@i,f
 13538  09AE  2982               	goto	l3140
 13539  09AF                     l3142:	
 13540                           
 13541                           ;lcd.c: 214: }
 13542                           ;lcd.c: 215: if(fieldLength==-1)
 13543  09AF  0A47               	incf	LCDWriteInt@fieldLength,w
 13544  09B0  1903               	btfsc	3,2
 13545  09B1  29B7               	goto	l3148
 13546  09B2  29BF               	goto	l3150
 13547  09B3                     l3146:	
 13548                           ;lcd.c: 216: {
 13549                           ;lcd.c: 217: while(str[j]==0)
 13550                           
 13551                           
 13552                           ;lcd.c: 218: {
 13553                           ;lcd.c: 219: j++;
 13554  09B3  3001               	movlw	1
 13555  09B4  00CA               	movwf	??_LCDWriteInt
 13556  09B5  084A               	movf	??_LCDWriteInt,w
 13557  09B6  07D3               	addwf	LCDWriteInt@j,f
 13558  09B7                     l3148:	
 13559  09B7  0853               	movf	LCDWriteInt@j,w
 13560  09B8  3E4E               	addlw	(low (LCDWriteInt@str| 0))& (0+255)
 13561  09B9  0086               	movwf	6
 13562  09BA  0187               	clrf	7
 13563  09BB  0801               	movf	1,w
 13564  09BC  1D03               	btfss	3,2
 13565  09BD  29C5               	goto	l3152
 13566  09BE  29B3               	goto	l3146
 13567  09BF                     l3150:	
 13568                           ;lcd.c: 220: }
 13569                           ;lcd.c: 221: }
 13570                           
 13571                           
 13572                           ;lcd.c: 222: else
 13573                           ;lcd.c: 223: {
 13574                           ;lcd.c: 224: j=(uint8_t)(5-fieldLength);
 13575  09BF  0347               	decf	LCDWriteInt@fieldLength,w
 13576  09C0  3AFF               	xorlw	255
 13577  09C1  3E05               	addlw	5
 13578  09C2  00CA               	movwf	??_LCDWriteInt
 13579  09C3  084A               	movf	??_LCDWriteInt,w
 13580  09C4  00D3               	movwf	LCDWriteInt@j
 13581  09C5                     l3152:	
 13582                           
 13583                           ;lcd.c: 225: }
 13584                           ;lcd.c: 227: for(i=j;i<(5-numPlaces);i++)
 13585  09C5  0853               	movf	LCDWriteInt@j,w
 13586  09C6  00CA               	movwf	??_LCDWriteInt
 13587  09C7  084A               	movf	??_LCDWriteInt,w
 13588  09C8  00D4               	movwf	LCDWriteInt@i
 13589  09C9                     l3158:	
 13590  09C9  0848               	movf	LCDWriteInt@numPlaces,w
 13591  09CA  00CA               	movwf	??_LCDWriteInt
 13592  09CB  01CB               	clrf	??_LCDWriteInt+1
 13593  09CC  09CA               	comf	??_LCDWriteInt,f
 13594  09CD  09CB               	comf	??_LCDWriteInt+1,f
 13595  09CE  0ACA               	incf	??_LCDWriteInt,f
 13596  09CF  1903               	skipnz
 13597  09D0  0ACB               	incf	??_LCDWriteInt+1,f
 13598  09D1  084A               	movf	??_LCDWriteInt,w
 13599  09D2  3E05               	addlw	5
 13600  09D3  00CC               	movwf	??_LCDWriteInt+2
 13601  09D4  3000               	movlw	0
 13602  09D5  3D4B               	addwfc	??_LCDWriteInt+1,w
 13603  09D6  00CD               	movwf	??_LCDWriteInt+3
 13604  09D7  084D               	movf	??_LCDWriteInt+3,w
 13605  09D8  3A80               	xorlw	128
 13606  09D9  3C80               	sublw	128
 13607  09DA  1D03               	skipz
 13608  09DB  29DE               	goto	u3805
 13609  09DC  084C               	movf	??_LCDWriteInt+2,w
 13610  09DD  0254               	subwf	LCDWriteInt@i,w
 13611  09DE                     u3805:	
 13612  09DE  1803               	btfsc	3,0
 13613  09DF  29F0               	goto	l3160
 13614                           
 13615                           ;lcd.c: 228: {
 13616                           ;lcd.c: 229: LCDWriteCharacter((uint8_t)(48+str[i]));
 13617  09E0  0020               	movlb	0	; select bank0
 13618  09E1  0854               	movf	LCDWriteInt@i,w
 13619  09E2  3E4E               	addlw	(low (LCDWriteInt@str| 0))& (0+255)
 13620  09E3  0086               	movwf	6
 13621  09E4  0187               	clrf	7
 13622  09E5  0801               	movf	1,w
 13623  09E6  3E30               	addlw	48
 13624  09E7  3194  2427  3189   	fcall	_LCDWriteCharacter
 13625  09EA  3001               	movlw	1
 13626  09EB  0020               	movlb	0	; select bank0
 13627  09EC  00CA               	movwf	??_LCDWriteInt
 13628  09ED  084A               	movf	??_LCDWriteInt,w
 13629  09EE  07D4               	addwf	LCDWriteInt@i,f
 13630  09EF  29C9               	goto	l3158
 13631  09F0                     l3160:	
 13632                           
 13633                           ;lcd.c: 230: }
 13634                           ;lcd.c: 232: if(numPlaces == 1)
 13635  09F0  0020               	movlb	0	; select bank0
 13636  09F1  0348               	decf	LCDWriteInt@numPlaces,w
 13637  09F2  1D03               	btfss	3,2
 13638  09F3  29FE               	goto	l3164
 13639                           
 13640                           ;lcd.c: 233: {
 13641                           ;lcd.c: 234: LCDWriteCharacter(46);
 13642  09F4  302E               	movlw	46
 13643  09F5  3194  2427  3189   	fcall	_LCDWriteCharacter
 13644                           
 13645                           ;lcd.c: 235: LCDWriteCharacter ((uint8_t)(48+str[4]));
 13646  09F8  0020               	movlb	0	; select bank0
 13647  09F9  0852               	movf	LCDWriteInt@str+4,w
 13648  09FA  3E30               	addlw	48
 13649  09FB  3194  2427  3189   	fcall	_LCDWriteCharacter
 13650  09FE                     l3164:	
 13651                           
 13652                           ;lcd.c: 236: }
 13653                           ;lcd.c: 238: if(numPlaces == 2)
 13654  09FE  3002               	movlw	2
 13655  09FF  0020               	movlb	0	; select bank0
 13656  0A00  0648               	xorwf	LCDWriteInt@numPlaces,w
 13657  0A01  1D03               	btfss	3,2
 13658  0A02  0008               	return
 13659                           
 13660                           ;lcd.c: 239: {
 13661                           ;lcd.c: 240: LCDWriteCharacter(46);
 13662  0A03  302E               	movlw	46
 13663  0A04  3194  2427  3189   	fcall	_LCDWriteCharacter
 13664                           
 13665                           ;lcd.c: 241: LCDWriteCharacter((uint8_t)(48+str[3]));
 13666  0A07  0020               	movlb	0	; select bank0
 13667  0A08  0851               	movf	LCDWriteInt@str+3,w
 13668  0A09  3E30               	addlw	48
 13669  0A0A  3194  2427  3189   	fcall	_LCDWriteCharacter
 13670                           
 13671                           ;lcd.c: 242: LCDWriteCharacter((uint8_t)(48+str[4]));
 13672  0A0D  0020               	movlb	0	; select bank0
 13673  0A0E  0852               	movf	LCDWriteInt@str+4,w
 13674  0A0F  3E30               	addlw	48
 13675  0A10  3194  2427         	fcall	_LCDWriteCharacter
 13676  0A12  0008               	return
 13677  0A13                     __end_of_LCDWriteInt:	
 13678                           
 13679                           	psect	text34
 13680  11AD                     __ptext34:	
 13681 ;; *************** function ___lwmod *****************
 13682 ;; Defined at:
 13683 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 13684 ;; Parameters:    Size  Location     Type
 13685 ;;  divisor         2    0[COMMON] unsigned int 
 13686 ;;  dividend        2    2[COMMON] unsigned int 
 13687 ;; Auto vars:     Size  Location     Type
 13688 ;;  counter         1    5[COMMON] unsigned char 
 13689 ;; Return value:  Size  Location     Type
 13690 ;;                  2    0[COMMON] unsigned int 
 13691 ;; Registers used:
 13692 ;;		wreg, status,2, status,0
 13693 ;; Tracked objects:
 13694 ;;		On entry : 0/0
 13695 ;;		On exit  : 0/0
 13696 ;;		Unchanged: 0/0
 13697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13698 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13699 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13700 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13701 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13702 ;;Total ram usage:        6 bytes
 13703 ;; Hardware stack levels used:    1
 13704 ;; This function calls:
 13705 ;;		Nothing
 13706 ;; This function is called by:
 13707 ;;		_LCDWriteInt
 13708 ;; This function uses a non-reentrant model
 13709 ;;
 13710                           
 13711                           
 13712                           ;psect for function ___lwmod
 13713  11AD                     ___lwmod:	
 13714                           
 13715                           ;incstack = 0
 13716                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
 13717  11AD  0870               	movf	___lwmod@divisor,w
 13718  11AE  0471               	iorwf	___lwmod@divisor+1,w
 13719  11AF  1903               	btfsc	3,2
 13720  11B0  29D4               	goto	l2946
 13721  11B1  01F5               	clrf	___lwmod@counter
 13722  11B2  0AF5               	incf	___lwmod@counter,f
 13723  11B3                     l2936:	
 13724  11B3  1BF1               	btfsc	___lwmod@divisor+1,7
 13725  11B4  29BF               	goto	l2938
 13726  11B5  3001               	movlw	1
 13727  11B6                     u3245:	
 13728  11B6  35F0               	lslf	___lwmod@divisor,f
 13729  11B7  0DF1               	rlf	___lwmod@divisor+1,f
 13730  11B8  0B89               	decfsz	9,f
 13731  11B9  29B6               	goto	u3245
 13732  11BA  3001               	movlw	1
 13733  11BB  00F4               	movwf	??___lwmod
 13734  11BC  0874               	movf	??___lwmod,w
 13735  11BD  07F5               	addwf	___lwmod@counter,f
 13736  11BE  29B3               	goto	l2936
 13737  11BF                     l2938:	
 13738  11BF  0871               	movf	___lwmod@divisor+1,w
 13739  11C0  0273               	subwf	___lwmod@dividend+1,w
 13740  11C1  1D03               	skipz
 13741  11C2  29C5               	goto	u3265
 13742  11C3  0870               	movf	___lwmod@divisor,w
 13743  11C4  0272               	subwf	___lwmod@dividend,w
 13744  11C5                     u3265:	
 13745  11C5  1C03               	skipc
 13746  11C6  29CB               	goto	l2942
 13747  11C7  0870               	movf	___lwmod@divisor,w
 13748  11C8  02F2               	subwf	___lwmod@dividend,f
 13749  11C9  0871               	movf	___lwmod@divisor+1,w
 13750  11CA  3BF3               	subwfb	___lwmod@dividend+1,f
 13751  11CB                     l2942:	
 13752  11CB  3001               	movlw	1
 13753  11CC                     u3275:	
 13754  11CC  36F1               	lsrf	___lwmod@divisor+1,f
 13755  11CD  0CF0               	rrf	___lwmod@divisor,f
 13756  11CE  0B89               	decfsz	9,f
 13757  11CF  29CC               	goto	u3275
 13758  11D0  3001               	movlw	1
 13759  11D1  02F5               	subwf	___lwmod@counter,f
 13760  11D2  1D03               	btfss	3,2
 13761  11D3  29BF               	goto	l2938
 13762  11D4                     l2946:	
 13763  11D4  0873               	movf	___lwmod@dividend+1,w
 13764  11D5  00F1               	movwf	?___lwmod+1
 13765  11D6  0872               	movf	___lwmod@dividend,w
 13766  11D7  00F0               	movwf	?___lwmod
 13767  11D8  0008               	return
 13768  11D9                     __end_of___lwmod:	
 13769                           
 13770                           	psect	text35
 13771  13D5                     __ptext35:	
 13772 ;; *************** function ___awdiv *****************
 13773 ;; Defined at:
 13774 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
 13775 ;; Parameters:    Size  Location     Type
 13776 ;;  divisor         2    6[COMMON] int 
 13777 ;;  dividend        2    8[COMMON] int 
 13778 ;; Auto vars:     Size  Location     Type
 13779 ;;  quotient        2    2[BANK0 ] int 
 13780 ;;  sign            1    1[BANK0 ] unsigned char 
 13781 ;;  counter         1    0[BANK0 ] unsigned char 
 13782 ;; Return value:  Size  Location     Type
 13783 ;;                  2    6[COMMON] int 
 13784 ;; Registers used:
 13785 ;;		wreg, status,2, status,0
 13786 ;; Tracked objects:
 13787 ;;		On entry : 0/0
 13788 ;;		On exit  : 0/0
 13789 ;;		Unchanged: 0/0
 13790 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13791 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13792 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13793 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13794 ;;      Totals:         5       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13795 ;;Total ram usage:        9 bytes
 13796 ;; Hardware stack levels used:    1
 13797 ;; This function calls:
 13798 ;;		Nothing
 13799 ;; This function is called by:
 13800 ;;		_LCDWriteInt
 13801 ;;		_main
 13802 ;; This function uses a non-reentrant model
 13803 ;;
 13804                           
 13805                           
 13806                           ;psect for function ___awdiv
 13807  13D5                     ___awdiv:	
 13808                           
 13809                           ;incstack = 0
 13810                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 13811  13D5  0020               	movlb	0	; select bank0
 13812  13D6  01A1               	clrf	___awdiv@sign
 13813  13D7  1FF7               	btfss	___awdiv@divisor+1,7
 13814  13D8  2BE0               	goto	l2842
 13815  13D9  09F6               	comf	___awdiv@divisor,f
 13816  13DA  09F7               	comf	___awdiv@divisor+1,f
 13817  13DB  0AF6               	incf	___awdiv@divisor,f
 13818  13DC  1903               	skipnz
 13819  13DD  0AF7               	incf	___awdiv@divisor+1,f
 13820  13DE  01A1               	clrf	___awdiv@sign
 13821  13DF  0AA1               	incf	___awdiv@sign,f
 13822  13E0                     l2842:	
 13823  13E0  1FF9               	btfss	___awdiv@dividend+1,7
 13824  13E1  2BEB               	goto	l2848
 13825  13E2  09F8               	comf	___awdiv@dividend,f
 13826  13E3  09F9               	comf	___awdiv@dividend+1,f
 13827  13E4  0AF8               	incf	___awdiv@dividend,f
 13828  13E5  1903               	skipnz
 13829  13E6  0AF9               	incf	___awdiv@dividend+1,f
 13830  13E7  3001               	movlw	1
 13831  13E8  00FA               	movwf	??___awdiv
 13832  13E9  087A               	movf	??___awdiv,w
 13833  13EA  06A1               	xorwf	___awdiv@sign,f
 13834  13EB                     l2848:	
 13835  13EB  01A2               	clrf	___awdiv@quotient
 13836  13EC  01A3               	clrf	___awdiv@quotient+1
 13837  13ED  0876               	movf	___awdiv@divisor,w
 13838  13EE  0477               	iorwf	___awdiv@divisor+1,w
 13839  13EF  1903               	btfsc	3,2
 13840  13F0  2C1A               	goto	l2870
 13841  13F1  01A0               	clrf	___awdiv@counter
 13842  13F2  0AA0               	incf	___awdiv@counter,f
 13843  13F3                     l2858:	
 13844  13F3  1BF7               	btfsc	___awdiv@divisor+1,7
 13845  13F4  2BFF               	goto	l2860
 13846  13F5  3001               	movlw	1
 13847  13F6                     u3075:	
 13848  13F6  35F6               	lslf	___awdiv@divisor,f
 13849  13F7  0DF7               	rlf	___awdiv@divisor+1,f
 13850  13F8  0B89               	decfsz	9,f
 13851  13F9  2BF6               	goto	u3075
 13852  13FA  3001               	movlw	1
 13853  13FB  00FA               	movwf	??___awdiv
 13854  13FC  087A               	movf	??___awdiv,w
 13855  13FD  07A0               	addwf	___awdiv@counter,f
 13856  13FE  2BF3               	goto	l2858
 13857  13FF                     l2860:	
 13858  13FF  3001               	movlw	1
 13859  1400                     u3095:	
 13860  1400  35A2               	lslf	___awdiv@quotient,f
 13861  1401  0DA3               	rlf	___awdiv@quotient+1,f
 13862  1402  0B89               	decfsz	9,f
 13863  1403  2C00               	goto	u3095
 13864  1404  0877               	movf	___awdiv@divisor+1,w
 13865  1405  0279               	subwf	___awdiv@dividend+1,w
 13866  1406  1D03               	skipz
 13867  1407  2C0A               	goto	u3105
 13868  1408  0876               	movf	___awdiv@divisor,w
 13869  1409  0278               	subwf	___awdiv@dividend,w
 13870  140A                     u3105:	
 13871  140A  1C03               	skipc
 13872  140B  2C11               	goto	l2866
 13873  140C  0876               	movf	___awdiv@divisor,w
 13874  140D  02F8               	subwf	___awdiv@dividend,f
 13875  140E  0877               	movf	___awdiv@divisor+1,w
 13876  140F  3BF9               	subwfb	___awdiv@dividend+1,f
 13877  1410  1422               	bsf	___awdiv@quotient,0
 13878  1411                     l2866:	
 13879  1411  3001               	movlw	1
 13880  1412                     u3115:	
 13881  1412  36F7               	lsrf	___awdiv@divisor+1,f
 13882  1413  0CF6               	rrf	___awdiv@divisor,f
 13883  1414  0B89               	decfsz	9,f
 13884  1415  2C12               	goto	u3115
 13885  1416  3001               	movlw	1
 13886  1417  02A0               	subwf	___awdiv@counter,f
 13887  1418  1D03               	btfss	3,2
 13888  1419  2BFF               	goto	l2860
 13889  141A                     l2870:	
 13890  141A  0821               	movf	___awdiv@sign,w
 13891  141B  1903               	btfsc	3,2
 13892  141C  2C22               	goto	l2874
 13893  141D  09A2               	comf	___awdiv@quotient,f
 13894  141E  09A3               	comf	___awdiv@quotient+1,f
 13895  141F  0AA2               	incf	___awdiv@quotient,f
 13896  1420  1903               	skipnz
 13897  1421  0AA3               	incf	___awdiv@quotient+1,f
 13898  1422                     l2874:	
 13899  1422  0823               	movf	___awdiv@quotient+1,w
 13900  1423  00F7               	movwf	?___awdiv+1
 13901  1424  0822               	movf	___awdiv@quotient,w
 13902  1425  00F6               	movwf	?___awdiv
 13903  1426  0008               	return
 13904  1427                     __end_of___awdiv:	
 13905                           
 13906                           	psect	text36
 13907  1427                     __ptext36:	
 13908 ;; *************** function _LCDWriteCharacter *****************
 13909 ;; Defined at:
 13910 ;;		line 140 in file "lcd.c"
 13911 ;; Parameters:    Size  Location     Type
 13912 ;;  character       1    wreg     const unsigned char 
 13913 ;; Auto vars:     Size  Location     Type
 13914 ;;  character       1    9[COMMON] const unsigned char 
 13915 ;;  base            2   10[COMMON] unsigned int 
 13916 ;; Return value:  Size  Location     Type
 13917 ;;                  1    wreg      void 
 13918 ;; Registers used:
 13919 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13920 ;; Tracked objects:
 13921 ;;		On entry : 0/0
 13922 ;;		On exit  : 0/0
 13923 ;;		Unchanged: 0/0
 13924 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13925 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13926 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13927 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13928 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13929 ;;Total ram usage:        6 bytes
 13930 ;; Hardware stack levels used:    1
 13931 ;; Hardware stack levels required when called:    1
 13932 ;; This function calls:
 13933 ;;		_LCDWrite
 13934 ;;		___wmul
 13935 ;; This function is called by:
 13936 ;;		_LCDWriteString
 13937 ;;		_LCDWriteInt
 13938 ;;		_main
 13939 ;; This function uses a non-reentrant model
 13940 ;;
 13941                           
 13942                           
 13943                           ;psect for function _LCDWriteCharacter
 13944  1427                     _LCDWriteCharacter:	
 13945                           
 13946                           ;incstack = 0
 13947                           ; Regs used in _LCDWriteCharacter: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13948                           ;LCDWriteCharacter@character stored from wreg
 13949  1427  00F9               	movwf	LCDWriteCharacter@character
 13950                           
 13951                           ;lcd.c: 142: uint16_t base;
 13952                           ;lcd.c: 143: base = character - 0x20;
 13953  1428  0879               	movf	LCDWriteCharacter@character,w
 13954  1429  3EE0               	addlw	224
 13955  142A  00FA               	movwf	LCDWriteCharacter@base
 13956  142B  30FF               	movlw	255
 13957  142C  1803               	skipnc
 13958  142D  3000               	movlw	0
 13959  142E  00FB               	movwf	LCDWriteCharacter@base+1
 13960                           
 13961                           ;lcd.c: 144: base *= 3;
 13962  142F  3003               	movlw	3
 13963  1430  00F0               	movwf	___wmul@multiplier
 13964  1431  3000               	movlw	0
 13965  1432  00F1               	movwf	___wmul@multiplier+1
 13966  1433  087B               	movf	LCDWriteCharacter@base+1,w
 13967  1434  00F3               	movwf	___wmul@multiplicand+1
 13968  1435  087A               	movf	LCDWriteCharacter@base,w
 13969  1436  00F2               	movwf	___wmul@multiplicand
 13970  1437  319F  27A8  3194   	fcall	___wmul
 13971  143A  0871               	movf	?___wmul+1,w
 13972  143B  00FB               	movwf	LCDWriteCharacter@base+1
 13973  143C  0870               	movf	?___wmul,w
 13974  143D  00FA               	movwf	LCDWriteCharacter@base
 13975                           
 13976                           ;lcd.c: 145: LCDWrite(1,fonts[base]);
 13977  143E  087B               	movf	LCDWriteCharacter@base+1,w
 13978  143F  0085               	movwf	5
 13979  1440  087A               	movf	LCDWriteCharacter@base,w
 13980  1441  0084               	movwf	4
 13981  1442  3000               	movlw	low (_fonts| (0+32768))
 13982  1443  0784               	addwf	4,f
 13983  1444  3090               	movlw	high (_fonts| (0+32768))
 13984  1445  3D85               	addwfc	5,f
 13985  1446  0800               	movf	0,w	;code access
 13986  1447  00F6               	movwf	??_LCDWriteCharacter
 13987  1448  0876               	movf	??_LCDWriteCharacter,w
 13988  1449  00F0               	movwf	LCDWrite@data
 13989  144A  3001               	movlw	1
 13990  144B  3191  2162  3194   	fcall	_LCDWrite
 13991                           
 13992                           ;lcd.c: 146: LCDWrite(1,fonts[base + 1]);
 13993  144E  087A               	movf	LCDWriteCharacter@base,w
 13994  144F  3E01               	addlw	1
 13995  1450  00F6               	movwf	??_LCDWriteCharacter
 13996  1451  3000               	movlw	0
 13997  1452  3D7B               	addwfc	LCDWriteCharacter@base+1,w
 13998  1453  00F7               	movwf	??_LCDWriteCharacter+1
 13999  1454  3000               	movlw	low (_fonts| (0+32768))
 14000  1455  0776               	addwf	??_LCDWriteCharacter,w
 14001  1456  0084               	movwf	4
 14002  1457  3090               	movlw	high (_fonts| (0+32768))
 14003  1458  3D77               	addwfc	??_LCDWriteCharacter+1,w
 14004  1459  0085               	movwf	5
 14005  145A  0800               	movf	0,w	;code access
 14006  145B  00F8               	movwf	??_LCDWriteCharacter+2
 14007  145C  0878               	movf	??_LCDWriteCharacter+2,w
 14008  145D  00F0               	movwf	LCDWrite@data
 14009  145E  3001               	movlw	1
 14010  145F  3191  2162  3194   	fcall	_LCDWrite
 14011                           
 14012                           ;lcd.c: 147: LCDWrite(1,fonts[base + 2]);
 14013  1462  087A               	movf	LCDWriteCharacter@base,w
 14014  1463  3E02               	addlw	2
 14015  1464  00F6               	movwf	??_LCDWriteCharacter
 14016  1465  3000               	movlw	0
 14017  1466  3D7B               	addwfc	LCDWriteCharacter@base+1,w
 14018  1467  00F7               	movwf	??_LCDWriteCharacter+1
 14019  1468  3000               	movlw	low (_fonts| (0+32768))
 14020  1469  0776               	addwf	??_LCDWriteCharacter,w
 14021  146A  0084               	movwf	4
 14022  146B  3090               	movlw	high (_fonts| (0+32768))
 14023  146C  3D77               	addwfc	??_LCDWriteCharacter+1,w
 14024  146D  0085               	movwf	5
 14025  146E  0800               	movf	0,w	;code access
 14026  146F  00F8               	movwf	??_LCDWriteCharacter+2
 14027  1470  0878               	movf	??_LCDWriteCharacter+2,w
 14028  1471  00F0               	movwf	LCDWrite@data
 14029  1472  3001               	movlw	1
 14030  1473  3191  2162  3194   	fcall	_LCDWrite
 14031                           
 14032                           ;lcd.c: 148: LCDWrite(1, 0x00);
 14033  1476  01F0               	clrf	LCDWrite@data
 14034  1477  3001               	movlw	1
 14035  1478  3191  2162         	fcall	_LCDWrite
 14036  147A  0008               	return
 14037  147B                     __end_of_LCDWriteCharacter:	
 14038                           
 14039                           	psect	text37
 14040  1FA8                     __ptext37:	
 14041 ;; *************** function ___wmul *****************
 14042 ;; Defined at:
 14043 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 14044 ;; Parameters:    Size  Location     Type
 14045 ;;  multiplier      2    0[COMMON] unsigned int 
 14046 ;;  multiplicand    2    2[COMMON] unsigned int 
 14047 ;; Auto vars:     Size  Location     Type
 14048 ;;  product         2    4[COMMON] unsigned int 
 14049 ;; Return value:  Size  Location     Type
 14050 ;;                  2    0[COMMON] unsigned int 
 14051 ;; Registers used:
 14052 ;;		wreg, status,2, status,0
 14053 ;; Tracked objects:
 14054 ;;		On entry : 0/0
 14055 ;;		On exit  : 0/0
 14056 ;;		Unchanged: 0/0
 14057 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14058 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14059 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14060 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14061 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14062 ;;Total ram usage:        6 bytes
 14063 ;; Hardware stack levels used:    1
 14064 ;; This function calls:
 14065 ;;		Nothing
 14066 ;; This function is called by:
 14067 ;;		_readIAnalog
 14068 ;;		_readVAnalog
 14069 ;;		_LCDWriteCharacter
 14070 ;;		_main
 14071 ;;		_eval_poly
 14072 ;; This function uses a non-reentrant model
 14073 ;;
 14074                           
 14075                           
 14076                           ;psect for function ___wmul
 14077  1FA8                     ___wmul:	
 14078                           
 14079                           ;incstack = 0
 14080                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 14081  1FA8  01F4               	clrf	___wmul@product
 14082  1FA9  01F5               	clrf	___wmul@product+1
 14083  1FAA                     l2358:	
 14084  1FAA  1C70               	btfss	___wmul@multiplier,0
 14085  1FAB  2FB0               	goto	l618
 14086  1FAC  0872               	movf	___wmul@multiplicand,w
 14087  1FAD  07F4               	addwf	___wmul@product,f
 14088  1FAE  0873               	movf	___wmul@multiplicand+1,w
 14089  1FAF  3DF5               	addwfc	___wmul@product+1,f
 14090  1FB0                     l618:	
 14091  1FB0  3001               	movlw	1
 14092  1FB1                     u2325:	
 14093  1FB1  35F2               	lslf	___wmul@multiplicand,f
 14094  1FB2  0DF3               	rlf	___wmul@multiplicand+1,f
 14095  1FB3  0B89               	decfsz	9,f
 14096  1FB4  2FB1               	goto	u2325
 14097  1FB5  3001               	movlw	1
 14098  1FB6                     u2335:	
 14099  1FB6  36F1               	lsrf	___wmul@multiplier+1,f
 14100  1FB7  0CF0               	rrf	___wmul@multiplier,f
 14101  1FB8  0B89               	decfsz	9,f
 14102  1FB9  2FB6               	goto	u2335
 14103  1FBA  0870               	movf	___wmul@multiplier,w
 14104  1FBB  0471               	iorwf	___wmul@multiplier+1,w
 14105  1FBC  1D03               	btfss	3,2
 14106  1FBD  2FAA               	goto	l2358
 14107  1FBE  0875               	movf	___wmul@product+1,w
 14108  1FBF  00F1               	movwf	?___wmul+1
 14109  1FC0  0874               	movf	___wmul@product,w
 14110  1FC1  00F0               	movwf	?___wmul
 14111  1FC2  0008               	return
 14112  1FC3                     __end_of___wmul:	
 14113                           
 14114                           	psect	text38
 14115  1162                     __ptext38:	
 14116 ;; *************** function _LCDWrite *****************
 14117 ;; Defined at:
 14118 ;;		line 281 in file "lcd.c"
 14119 ;; Parameters:    Size  Location     Type
 14120 ;;  data_or_comm    1    wreg     unsigned char 
 14121 ;;  data            1    0[COMMON] unsigned char 
 14122 ;; Auto vars:     Size  Location     Type
 14123 ;;  data_or_comm    1    2[COMMON] unsigned char 
 14124 ;;  i               1    4[COMMON] unsigned char 
 14125 ;;  d               1    3[COMMON] unsigned char 
 14126 ;; Return value:  Size  Location     Type
 14127 ;;                  1    wreg      void 
 14128 ;; Registers used:
 14129 ;;		wreg, status,2, status,0
 14130 ;; Tracked objects:
 14131 ;;		On entry : 0/0
 14132 ;;		On exit  : 0/0
 14133 ;;		Unchanged: 0/0
 14134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14135 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14136 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14137 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14138 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14139 ;;Total ram usage:        5 bytes
 14140 ;; Hardware stack levels used:    1
 14141 ;; This function calls:
 14142 ;;		Nothing
 14143 ;; This function is called by:
 14144 ;;		_gotoXY
 14145 ;;		_LCDWriteCharacter
 14146 ;;		_LCDClear
 14147 ;;		_LCDInit
 14148 ;; This function uses a non-reentrant model
 14149 ;;
 14150                           
 14151                           
 14152                           ;psect for function _LCDWrite
 14153  1162                     _LCDWrite:	
 14154                           
 14155                           ;incstack = 0
 14156                           ; Regs used in _LCDWrite: [wreg+status,2+status,0]
 14157                           ;LCDWrite@data_or_command stored from wreg
 14158  1162  00F2               	movwf	LCDWrite@data_or_command
 14159                           
 14160                           ;lcd.c: 283: uint8_t i,d;
 14161                           ;lcd.c: 285: d=data;
 14162  1163  0870               	movf	LCDWrite@data,w
 14163  1164  00F1               	movwf	??_LCDWrite
 14164  1165  0871               	movf	??_LCDWrite,w
 14165  1166  00F3               	movwf	LCDWrite@d
 14166                           
 14167                           ;lcd.c: 287: if(data_or_command == 0)
 14168  1167  0872               	movf	LCDWrite@data_or_command,w
 14169  1168  1D03               	btfss	3,2
 14170  1169  296D               	goto	l230
 14171                           
 14172                           ;lcd.c: 288: {
 14173                           ;lcd.c: 289: LATAbits.LATA2 = 0;
 14174  116A  0020               	movlb	0	; select bank0
 14175  116B  1116               	bcf	22,2	;volatile
 14176                           
 14177                           ;lcd.c: 290: }
 14178  116C  296F               	goto	l231
 14179  116D                     l230:	
 14180                           
 14181                           ;lcd.c: 291: else
 14182                           ;lcd.c: 292: {
 14183                           ;lcd.c: 293: LATAbits.LATA2 = 1;
 14184  116D  0020               	movlb	0	; select bank0
 14185  116E  1516               	bsf	22,2	;volatile
 14186  116F                     l231:	
 14187                           
 14188                           ;lcd.c: 294: }
 14189                           ;lcd.c: 296: LATAbits.LATA1 = 0;
 14190  116F  1096               	bcf	22,1	;volatile
 14191                           
 14192                           ;lcd.c: 298: for(i=0;i<8;i++)
 14193  1170  01F4               	clrf	LCDWrite@i
 14194  1171  3008               	movlw	8
 14195  1172  0274               	subwf	LCDWrite@i,w
 14196  1173  1803               	btfsc	3,0
 14197  1174  2985               	goto	l233
 14198  1175                     l232:	
 14199                           
 14200                           ;lcd.c: 299: {
 14201                           ;lcd.c: 300: LATAbits.LATA3 = 0;
 14202  1175  1196               	bcf	22,3	;volatile
 14203                           
 14204                           ;lcd.c: 302: if(d&0x80)
 14205  1176  1FF3               	btfss	LCDWrite@d,7
 14206  1177  2979               	goto	l234
 14207                           
 14208                           ;lcd.c: 303: {
 14209                           ;lcd.c: 304: LATAbits.LATA3 = 1;
 14210  1178  1596               	bsf	22,3	;volatile
 14211  1179                     l234:	
 14212                           
 14213                           ;lcd.c: 305: }
 14214                           ;lcd.c: 307: LATAbits.LATA4 = 1;
 14215  1179  1616               	bsf	22,4	;volatile
 14216                           
 14217                           ;lcd.c: 309: d<<=1;
 14218  117A  1003               	clrc
 14219  117B  0DF3               	rlf	LCDWrite@d,f
 14220                           
 14221                           ;lcd.c: 311: LATAbits.LATA4=0;
 14222  117C  1216               	bcf	22,4	;volatile
 14223  117D  3001               	movlw	1
 14224  117E  00F1               	movwf	??_LCDWrite
 14225  117F  0871               	movf	??_LCDWrite,w
 14226  1180  07F4               	addwf	LCDWrite@i,f
 14227  1181  3008               	movlw	8
 14228  1182  0274               	subwf	LCDWrite@i,w
 14229  1183  1C03               	skipc
 14230  1184  2975               	goto	l232
 14231  1185                     l233:	
 14232                           
 14233                           ;lcd.c: 312: }
 14234                           ;lcd.c: 314: LATAbits.LATA1 = 1;
 14235  1185  1496               	bsf	22,1	;volatile
 14236  1186  0008               	return
 14237  1187                     __end_of_LCDWrite:	
 14238                           
 14239                           	psect	text39
 14240  0E88                     __ptext39:	
 14241 ;; *************** function _Battery_State_Machine *****************
 14242 ;; Defined at:
 14243 ;;		line 28 in file "battery_charger.c"
 14244 ;; Parameters:    Size  Location     Type
 14245 ;;  z               1    wreg     unsigned char 
 14246 ;; Auto vars:     Size  Location     Type
 14247 ;;  z               1   42[BANK0 ] unsigned char 
 14248 ;; Return value:  Size  Location     Type
 14249 ;;                  1    wreg      void 
 14250 ;; Registers used:
 14251 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14252 ;; Tracked objects:
 14253 ;;		On entry : 0/0
 14254 ;;		On exit  : 0/0
 14255 ;;		Unchanged: 0/0
 14256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14257 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14258 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14259 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14260 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14261 ;;Total ram usage:        6 bytes
 14262 ;; Hardware stack levels used:    1
 14263 ;; Hardware stack levels required when called:    2
 14264 ;; This function calls:
 14265 ;;		___awtoft
 14266 ;;		___ftmul
 14267 ;;		___fttol
 14268 ;; This function is called by:
 14269 ;;		_main
 14270 ;; This function uses a non-reentrant model
 14271 ;;
 14272                           
 14273                           
 14274                           ;psect for function _Battery_State_Machine
 14275  0E88                     _Battery_State_Machine:	
 14276                           
 14277                           ;incstack = 0
 14278                           ; Regs used in _Battery_State_Machine: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 14279                           ;Battery_State_Machine@z stored from wreg
 14280  0E88  0020               	movlb	0	; select bank0
 14281  0E89  00CA               	movwf	Battery_State_Machine@z
 14282                           
 14283                           ;battery_charger.c: 30: if(batteryState[z]==PRECHARGE)
 14284  0E8A  084A               	movf	Battery_State_Machine@z,w
 14285  0E8B  3E67               	addlw	(low (_batteryState| 0))& (0+255)
 14286  0E8C  0086               	movwf	6
 14287  0E8D  0187               	clrf	7
 14288  0E8E  3003               	movlw	3
 14289  0E8F  0601               	xorwf	1,w
 14290  0E90  1D03               	btfss	3,2
 14291  0E91  2EDF               	goto	l3002
 14292                           
 14293                           ;battery_charger.c: 31: {
 14294                           ;battery_charger.c: 32: if(voltage[z]<1075)
 14295  0E92  354A               	lslf	Battery_State_Machine@z,w
 14296  0E93  3EA8               	addlw	(low (_voltage| 0))& (0+255)
 14297  0E94  0086               	movwf	6
 14298  0E95  0187               	clrf	7
 14299  0E96  3F40               	moviw [0]fsr1
 14300  0E97  00C5               	movwf	??_Battery_State_Machine
 14301  0E98  3F41               	moviw [1]fsr1
 14302  0E99  00C6               	movwf	??_Battery_State_Machine+1
 14303  0E9A  0846               	movf	??_Battery_State_Machine+1,w
 14304  0E9B  3A80               	xorlw	128
 14305  0E9C  00C7               	movwf	??_Battery_State_Machine+2
 14306  0E9D  3084               	movlw	132
 14307  0E9E  0247               	subwf	??_Battery_State_Machine+2,w
 14308  0E9F  1D03               	skipz
 14309  0EA0  2EA3               	goto	u3445
 14310  0EA1  3033               	movlw	51
 14311  0EA2  0245               	subwf	??_Battery_State_Machine,w
 14312  0EA3                     u3445:	
 14313  0EA3  1803               	skipnc
 14314  0EA4  2ECD               	goto	l3000
 14315                           
 14316                           ;battery_charger.c: 33: {
 14317                           ;battery_charger.c: 34: if(stateCounter[z]>0)
 14318  0EA5  0020               	movlb	0	; select bank0
 14319  0EA6  354A               	lslf	Battery_State_Machine@z,w
 14320  0EA7  3EBC               	addlw	(low (_stateCounter| 0))& (0+255)
 14321  0EA8  0086               	movwf	6
 14322  0EA9  0187               	clrf	7
 14323  0EAA  3F40               	moviw [0]fsr1
 14324  0EAB  00C5               	movwf	??_Battery_State_Machine
 14325  0EAC  3F41               	moviw [1]fsr1
 14326  0EAD  00C6               	movwf	??_Battery_State_Machine+1
 14327  0EAE  0846               	movf	??_Battery_State_Machine+1,w
 14328  0EAF  3A80               	xorlw	128
 14329  0EB0  00C7               	movwf	??_Battery_State_Machine+2
 14330  0EB1  3080               	movlw	128
 14331  0EB2  0247               	subwf	??_Battery_State_Machine+2,w
 14332  0EB3  1D03               	skipz
 14333  0EB4  2EB7               	goto	u3455
 14334  0EB5  3001               	movlw	1
 14335  0EB6  0245               	subwf	??_Battery_State_Machine,w
 14336  0EB7                     u3455:	
 14337  0EB7  1C03               	skipc
 14338  0EB8  2EC5               	goto	l2998
 14339                           
 14340                           ;battery_charger.c: 35: {
 14341                           ;battery_charger.c: 36: stateCounter[z]-=1;
 14342  0EB9  0020               	movlb	0	; select bank0
 14343  0EBA  354A               	lslf	Battery_State_Machine@z,w
 14344  0EBB  3EBC               	addlw	(low (_stateCounter| 0))& (0+255)
 14345  0EBC  0086               	movwf	6
 14346  0EBD  0187               	clrf	7
 14347  0EBE  30FF               	movlw	255
 14348  0EBF  0781               	addwf	1,f
 14349  0EC0  3141               	addfsr 1,1
 14350  0EC1  30FF               	movlw	255
 14351  0EC2  3D81               	addwfc	1,f
 14352  0EC3  317F               	addfsr 1,-1
 14353                           
 14354                           ;battery_charger.c: 37: }
 14355  0EC4  0008               	return
 14356  0EC5                     l2998:	
 14357                           
 14358                           ;battery_charger.c: 38: else
 14359                           ;battery_charger.c: 39: {
 14360                           ;battery_charger.c: 40: batteryState[z]=FAULT;
 14361  0EC5  0020               	movlb	0	; select bank0
 14362  0EC6  084A               	movf	Battery_State_Machine@z,w
 14363  0EC7  3E67               	addlw	(low (_batteryState| 0))& (0+255)
 14364  0EC8  0086               	movwf	6
 14365  0EC9  0187               	clrf	7
 14366  0ECA  0181               	clrf	1
 14367  0ECB  0A81               	incf	1,f
 14368                           
 14369                           ;battery_charger.c: 41: }
 14370                           ;battery_charger.c: 42: }
 14371  0ECC  0008               	return
 14372  0ECD                     l3000:	
 14373                           
 14374                           ;battery_charger.c: 43: else
 14375                           ;battery_charger.c: 44: {
 14376                           ;battery_charger.c: 45: batteryState[z]=CHARGE;
 14377  0ECD  3004               	movlw	4
 14378  0ECE  0020               	movlb	0	; select bank0
 14379  0ECF  00C5               	movwf	??_Battery_State_Machine
 14380  0ED0  084A               	movf	Battery_State_Machine@z,w
 14381  0ED1  3E67               	addlw	(low (_batteryState| 0))& (0+255)
 14382  0ED2  0086               	movwf	6
 14383  0ED3  0187               	clrf	7
 14384  0ED4  0845               	movf	??_Battery_State_Machine,w
 14385  0ED5  0081               	movwf	1
 14386                           
 14387                           ;battery_charger.c: 46: Iref[z]=35;
 14388  0ED6  354A               	lslf	Battery_State_Machine@z,w
 14389  0ED7  3EC0               	addlw	(low (_Iref| 0))& (0+255)
 14390  0ED8  0086               	movwf	6
 14391  0ED9  0187               	clrf	7
 14392  0EDA  3023               	movlw	35
 14393  0EDB  3FC0               	movwi [0]fsr1
 14394  0EDC  3000               	movlw	0
 14395  0EDD  3FC1               	movwi [1]fsr1
 14396                           
 14397                           ;battery_charger.c: 47: }
 14398                           ;battery_charger.c: 48: }
 14399  0EDE  0008               	return
 14400  0EDF                     l3002:	
 14401                           
 14402                           ;battery_charger.c: 49: else if(batteryState[z]==CHARGE)
 14403  0EDF  084A               	movf	Battery_State_Machine@z,w
 14404  0EE0  3E67               	addlw	(low (_batteryState| 0))& (0+255)
 14405  0EE1  0086               	movwf	6
 14406  0EE2  0187               	clrf	7
 14407  0EE3  3004               	movlw	4
 14408  0EE4  0601               	xorwf	1,w
 14409  0EE5  1D03               	btfss	3,2
 14410  0EE6  2FA2               	goto	l3022
 14411                           
 14412                           ;battery_charger.c: 50: {
 14413                           ;battery_charger.c: 51: Vref[z]=1425+(int16_t)((250-batteryTemp)*.24);
 14414  0EE7  096D               	comf	_batteryTemp,w
 14415  0EE8  00C5               	movwf	??_Battery_State_Machine
 14416  0EE9  096E               	comf	_batteryTemp+1,w
 14417  0EEA  00C6               	movwf	??_Battery_State_Machine+1
 14418  0EEB  0AC5               	incf	??_Battery_State_Machine,f
 14419  0EEC  1903               	skipnz
 14420  0EED  0AC6               	incf	??_Battery_State_Machine+1,f
 14421  0EEE  0845               	movf	??_Battery_State_Machine,w
 14422  0EEF  3EFA               	addlw	250
 14423  0EF0  00A4               	movwf	___awtoft@c
 14424  0EF1  3000               	movlw	0
 14425  0EF2  3D46               	addwfc	??_Battery_State_Machine+1,w
 14426  0EF3  00A5               	movwf	___awtoft@c+1
 14427  0EF4  3191  2140  318E   	fcall	___awtoft
 14428  0EF7  0020               	movlb	0	; select bank0
 14429  0EF8  0824               	movf	?___awtoft,w
 14430  0EF9  00AA               	movwf	___ftmul@f2
 14431  0EFA  0825               	movf	?___awtoft+1,w
 14432  0EFB  00AB               	movwf	___ftmul@f2+1
 14433  0EFC  0826               	movf	?___awtoft+2,w
 14434  0EFD  00AC               	movwf	___ftmul@f2+2
 14435  0EFE  30C3               	movlw	195
 14436  0EFF  00A7               	movwf	___ftmul@f1
 14437  0F00  3075               	movlw	117
 14438  0F01  00A8               	movwf	___ftmul@f1+1
 14439  0F02  303E               	movlw	62
 14440  0F03  00A9               	movwf	___ftmul@f1+2
 14441  0F04  3188  20A6  318E   	fcall	___ftmul
 14442  0F07  0020               	movlb	0	; select bank0
 14443  0F08  0827               	movf	?___ftmul,w
 14444  0F09  00B7               	movwf	___fttol@f1
 14445  0F0A  0828               	movf	?___ftmul+1,w
 14446  0F0B  00B8               	movwf	___fttol@f1+1
 14447  0F0C  0829               	movf	?___ftmul+2,w
 14448  0F0D  00B9               	movwf	___fttol@f1+2
 14449  0F0E  3188  201F  318E   	fcall	___fttol
 14450  0F11  0020               	movlb	0	; select bank0
 14451  0F12  0837               	movf	?___fttol,w
 14452  0F13  3E91               	addlw	145
 14453  0F14  00C7               	movwf	??_Battery_State_Machine+2
 14454  0F15  3005               	movlw	5
 14455  0F16  3D38               	addwfc	?___fttol+1,w
 14456  0F17  00C8               	movwf	??_Battery_State_Machine+3
 14457  0F18  354A               	lslf	Battery_State_Machine@z,w
 14458  0F19  3EB8               	addlw	(low (_Vref| 0))& (0+255)
 14459  0F1A  0086               	movwf	6
 14460  0F1B  0187               	clrf	7
 14461  0F1C  0847               	movf	??_Battery_State_Machine+2,w
 14462  0F1D  3FC0               	movwi [0]fsr1
 14463  0F1E  0848               	movf	??_Battery_State_Machine+3,w
 14464  0F1F  3FC1               	movwi [1]fsr1
 14465                           
 14466                           ;battery_charger.c: 52: if(!(Imode[z]))
 14467  0F20  084A               	movf	Battery_State_Machine@z,w
 14468  0F21  3E65               	addlw	(low (_Imode| 0))& (0+255)
 14469  0F22  0086               	movwf	6
 14470  0F23  0187               	clrf	7
 14471  0F24  0801               	movf	1,w
 14472  0F25  1D03               	btfss	3,2
 14473  0F26  2F89               	goto	l3018
 14474                           
 14475                           ;battery_charger.c: 53: {
 14476                           ;battery_charger.c: 54: if(current[z] < Imin[z])
 14477  0F27  354A               	lslf	Battery_State_Machine@z,w
 14478  0F28  3E4D               	addlw	(low (_Imin| (0+256)))& (0+255)
 14479  0F29  0086               	movwf	6
 14480  0F2A  3001               	movlw	1	; select bank2/3
 14481  0F2B  0087               	movwf	7
 14482  0F2C  3F40               	moviw [0]fsr1
 14483  0F2D  00C5               	movwf	??_Battery_State_Machine
 14484  0F2E  3F41               	moviw [1]fsr1
 14485  0F2F  00C6               	movwf	??_Battery_State_Machine+1
 14486  0F30  354A               	lslf	Battery_State_Machine@z,w
 14487  0F31  3EB0               	addlw	(low (_current| 0))& (0+255)
 14488  0F32  0086               	movwf	6
 14489  0F33  0187               	clrf	7
 14490  0F34  3F40               	moviw [0]fsr1
 14491  0F35  00C7               	movwf	??_Battery_State_Machine+2
 14492  0F36  3F41               	moviw [1]fsr1
 14493  0F37  00C8               	movwf	??_Battery_State_Machine+3
 14494  0F38  0848               	movf	??_Battery_State_Machine+3,w
 14495  0F39  3A80               	xorlw	128
 14496  0F3A  00C9               	movwf	??_Battery_State_Machine+4
 14497  0F3B  0846               	movf	??_Battery_State_Machine+1,w
 14498  0F3C  3A80               	xorlw	128
 14499  0F3D  0249               	subwf	??_Battery_State_Machine+4,w
 14500  0F3E  1D03               	skipz
 14501  0F3F  2F42               	goto	u3485
 14502  0F40  0845               	movf	??_Battery_State_Machine,w
 14503  0F41  0247               	subwf	??_Battery_State_Machine+2,w
 14504  0F42                     u3485:	
 14505  0F42  1803               	skipnc
 14506  0F43  2F6F               	goto	l3014
 14507                           
 14508                           ;battery_charger.c: 55: {
 14509                           ;battery_charger.c: 56: IminCount[z]-=2;
 14510  0F44  0020               	movlb	0	; select bank0
 14511  0F45  354A               	lslf	Battery_State_Machine@z,w
 14512  0F46  3EC4               	addlw	(low (_IminCount| 0))& (0+255)
 14513  0F47  0086               	movwf	6
 14514  0F48  0187               	clrf	7
 14515  0F49  3002               	movlw	2
 14516  0F4A  0281               	subwf	1,f
 14517  0F4B  3141               	addfsr 1,1
 14518  0F4C  3000               	movlw	0
 14519  0F4D  3B81               	subwfb	1,f
 14520  0F4E  317F               	addfsr 1,-1
 14521                           
 14522                           ;battery_charger.c: 57: if(IminCount[z]<10)
 14523  0F4F  354A               	lslf	Battery_State_Machine@z,w
 14524  0F50  3EC4               	addlw	(low (_IminCount| 0))& (0+255)
 14525  0F51  0086               	movwf	6
 14526  0F52  0187               	clrf	7
 14527  0F53  3F40               	moviw [0]fsr1
 14528  0F54  00C5               	movwf	??_Battery_State_Machine
 14529  0F55  3F41               	moviw [1]fsr1
 14530  0F56  00C6               	movwf	??_Battery_State_Machine+1
 14531  0F57  3000               	movlw	0
 14532  0F58  0246               	subwf	??_Battery_State_Machine+1,w
 14533  0F59  300A               	movlw	10
 14534  0F5A  1903               	skipnz
 14535  0F5B  0245               	subwf	??_Battery_State_Machine,w
 14536  0F5C  1803               	skipnc
 14537  0F5D  0008               	return
 14538                           
 14539                           ;battery_charger.c: 58: {
 14540                           ;battery_charger.c: 59: batteryState[z] = FLOAT;
 14541  0F5E  3005               	movlw	5
 14542  0F5F  00C5               	movwf	??_Battery_State_Machine
 14543  0F60  084A               	movf	Battery_State_Machine@z,w
 14544  0F61  3E67               	addlw	(low (_batteryState| 0))& (0+255)
 14545  0F62  0086               	movwf	6
 14546  0F63  0187               	clrf	7
 14547  0F64  0845               	movf	??_Battery_State_Machine,w
 14548  0F65  0081               	movwf	1
 14549                           
 14550                           ;battery_charger.c: 60: IminCount[z]=10;
 14551  0F66  354A               	lslf	Battery_State_Machine@z,w
 14552  0F67  3EC4               	addlw	(low (_IminCount| 0))& (0+255)
 14553  0F68  0086               	movwf	6
 14554  0F69  0187               	clrf	7
 14555  0F6A  300A               	movlw	10
 14556  0F6B  3FC0               	movwi [0]fsr1
 14557  0F6C  3000               	movlw	0
 14558  0F6D  3FC1               	movwi [1]fsr1
 14559                           
 14560                           ;battery_charger.c: 61: }
 14561                           ;battery_charger.c: 62: }
 14562  0F6E  0008               	return
 14563  0F6F                     l3014:	
 14564                           
 14565                           ;battery_charger.c: 63: else
 14566                           ;battery_charger.c: 64: {
 14567                           ;battery_charger.c: 65: if(IminCount[z]<600)IminCount[z]+=1;
 14568  0F6F  0020               	movlb	0	; select bank0
 14569  0F70  354A               	lslf	Battery_State_Machine@z,w
 14570  0F71  3EC4               	addlw	(low (_IminCount| 0))& (0+255)
 14571  0F72  0086               	movwf	6
 14572  0F73  0187               	clrf	7
 14573  0F74  3F40               	moviw [0]fsr1
 14574  0F75  00C5               	movwf	??_Battery_State_Machine
 14575  0F76  3F41               	moviw [1]fsr1
 14576  0F77  00C6               	movwf	??_Battery_State_Machine+1
 14577  0F78  3002               	movlw	2
 14578  0F79  0246               	subwf	??_Battery_State_Machine+1,w
 14579  0F7A  3058               	movlw	88
 14580  0F7B  1903               	skipnz
 14581  0F7C  0245               	subwf	??_Battery_State_Machine,w
 14582  0F7D  1803               	skipnc
 14583  0F7E  0008               	return
 14584  0F7F  354A               	lslf	Battery_State_Machine@z,w
 14585  0F80  3EC4               	addlw	(low (_IminCount| 0))& (0+255)
 14586  0F81  0086               	movwf	6
 14587  0F82  0187               	clrf	7
 14588  0F83  3001               	movlw	1
 14589  0F84  0781               	addwf	1,f
 14590  0F85  3141               	addfsr 1,1
 14591  0F86  1803               	skipnc
 14592  0F87  0A81               	incf	1,f
 14593                           
 14594                           ;battery_charger.c: 66: }
 14595                           ;battery_charger.c: 67: }
 14596  0F88  0008               	return
 14597  0F89                     l3018:	
 14598                           
 14599                           ;battery_charger.c: 68: else if(IminCount[z]<600)IminCount[z]+=1;
 14600  0F89  354A               	lslf	Battery_State_Machine@z,w
 14601  0F8A  3EC4               	addlw	(low (_IminCount| 0))& (0+255)
 14602  0F8B  0086               	movwf	6
 14603  0F8C  0187               	clrf	7
 14604  0F8D  3F40               	moviw [0]fsr1
 14605  0F8E  00C5               	movwf	??_Battery_State_Machine
 14606  0F8F  3F41               	moviw [1]fsr1
 14607  0F90  00C6               	movwf	??_Battery_State_Machine+1
 14608  0F91  3002               	movlw	2
 14609  0F92  0246               	subwf	??_Battery_State_Machine+1,w
 14610  0F93  3058               	movlw	88
 14611  0F94  1903               	skipnz
 14612  0F95  0245               	subwf	??_Battery_State_Machine,w
 14613  0F96  1803               	skipnc
 14614  0F97  0008               	return
 14615  0F98  354A               	lslf	Battery_State_Machine@z,w
 14616  0F99  3EC4               	addlw	(low (_IminCount| 0))& (0+255)
 14617  0F9A  0086               	movwf	6
 14618  0F9B  0187               	clrf	7
 14619  0F9C  3001               	movlw	1
 14620  0F9D  0781               	addwf	1,f
 14621  0F9E  3141               	addfsr 1,1
 14622  0F9F  1803               	skipnc
 14623  0FA0  0A81               	incf	1,f
 14624                           
 14625                           ;battery_charger.c: 69: }
 14626  0FA1  0008               	return
 14627  0FA2                     l3022:	
 14628                           
 14629                           ;battery_charger.c: 70: else if(batteryState[z] == FLOAT)
 14630  0FA2  084A               	movf	Battery_State_Machine@z,w
 14631  0FA3  3E67               	addlw	(low (_batteryState| 0))& (0+255)
 14632  0FA4  0086               	movwf	6
 14633  0FA5  0187               	clrf	7
 14634  0FA6  3005               	movlw	5
 14635  0FA7  0601               	xorwf	1,w
 14636  0FA8  1D03               	btfss	3,2
 14637  0FA9  2FF0               	goto	l3030
 14638                           
 14639                           ;battery_charger.c: 71: {
 14640                           ;battery_charger.c: 72: Vref[z]=1350+(int16_t)((250-batteryTemp)*.24);
 14641  0FAA  096D               	comf	_batteryTemp,w
 14642  0FAB  00C5               	movwf	??_Battery_State_Machine
 14643  0FAC  096E               	comf	_batteryTemp+1,w
 14644  0FAD  00C6               	movwf	??_Battery_State_Machine+1
 14645  0FAE  0AC5               	incf	??_Battery_State_Machine,f
 14646  0FAF  1903               	skipnz
 14647  0FB0  0AC6               	incf	??_Battery_State_Machine+1,f
 14648  0FB1  0845               	movf	??_Battery_State_Machine,w
 14649  0FB2  3EFA               	addlw	250
 14650  0FB3  00A4               	movwf	___awtoft@c
 14651  0FB4  3000               	movlw	0
 14652  0FB5  3D46               	addwfc	??_Battery_State_Machine+1,w
 14653  0FB6  00A5               	movwf	___awtoft@c+1
 14654  0FB7  3191  2140  318E   	fcall	___awtoft
 14655  0FBA  0020               	movlb	0	; select bank0
 14656  0FBB  0824               	movf	?___awtoft,w
 14657  0FBC  00AA               	movwf	___ftmul@f2
 14658  0FBD  0825               	movf	?___awtoft+1,w
 14659  0FBE  00AB               	movwf	___ftmul@f2+1
 14660  0FBF  0826               	movf	?___awtoft+2,w
 14661  0FC0  00AC               	movwf	___ftmul@f2+2
 14662  0FC1  30C3               	movlw	195
 14663  0FC2  00A7               	movwf	___ftmul@f1
 14664  0FC3  3075               	movlw	117
 14665  0FC4  00A8               	movwf	___ftmul@f1+1
 14666  0FC5  303E               	movlw	62
 14667  0FC6  00A9               	movwf	___ftmul@f1+2
 14668  0FC7  3188  20A6  318E   	fcall	___ftmul
 14669  0FCA  0020               	movlb	0	; select bank0
 14670  0FCB  0827               	movf	?___ftmul,w
 14671  0FCC  00B7               	movwf	___fttol@f1
 14672  0FCD  0828               	movf	?___ftmul+1,w
 14673  0FCE  00B8               	movwf	___fttol@f1+1
 14674  0FCF  0829               	movf	?___ftmul+2,w
 14675  0FD0  00B9               	movwf	___fttol@f1+2
 14676  0FD1  3188  201F         	fcall	___fttol
 14677  0FD3  0020               	movlb	0	; select bank0
 14678  0FD4  0837               	movf	?___fttol,w
 14679  0FD5  3E46               	addlw	70
 14680  0FD6  00C7               	movwf	??_Battery_State_Machine+2
 14681  0FD7  3005               	movlw	5
 14682  0FD8  3D38               	addwfc	?___fttol+1,w
 14683  0FD9  00C8               	movwf	??_Battery_State_Machine+3
 14684  0FDA  354A               	lslf	Battery_State_Machine@z,w
 14685  0FDB  3EB8               	addlw	(low (_Vref| 0))& (0+255)
 14686  0FDC  0086               	movwf	6
 14687  0FDD  0187               	clrf	7
 14688  0FDE  0847               	movf	??_Battery_State_Machine+2,w
 14689  0FDF  3FC0               	movwi [0]fsr1
 14690  0FE0  0848               	movf	??_Battery_State_Machine+3,w
 14691  0FE1  3FC1               	movwi [1]fsr1
 14692                           
 14693                           ;battery_charger.c: 73: Iref[z]=15;
 14694  0FE2  354A               	lslf	Battery_State_Machine@z,w
 14695  0FE3  3EC0               	addlw	(low (_Iref| 0))& (0+255)
 14696  0FE4  0086               	movwf	6
 14697  0FE5  0187               	clrf	7
 14698  0FE6  300F               	movlw	15
 14699  0FE7  3FC0               	movwi [0]fsr1
 14700  0FE8  3000               	movlw	0
 14701  0FE9  3FC1               	movwi [1]fsr1
 14702                           
 14703                           ;battery_charger.c: 74: Imode[z]=0;
 14704  0FEA  084A               	movf	Battery_State_Machine@z,w
 14705  0FEB  3E65               	addlw	(low (_Imode| 0))& (0+255)
 14706  0FEC  0086               	movwf	6
 14707  0FED  0187               	clrf	7
 14708  0FEE  0181               	clrf	1
 14709                           
 14710                           ;battery_charger.c: 75: }
 14711  0FEF  0008               	return
 14712  0FF0                     l3030:	
 14713                           
 14714                           ;battery_charger.c: 76: else
 14715                           ;battery_charger.c: 77: if(batteryState[z] == FAULT)
 14716  0FF0  084A               	movf	Battery_State_Machine@z,w
 14717  0FF1  3E67               	addlw	(low (_batteryState| 0))& (0+255)
 14718  0FF2  0086               	movwf	6
 14719  0FF3  0187               	clrf	7
 14720  0FF4  0301               	decf	1,w
 14721  0FF5  1D03               	btfss	3,2
 14722  0FF6  0008               	return
 14723                           
 14724                           ;battery_charger.c: 78: {
 14725                           ;battery_charger.c: 79: batteryState[z]=PRECHARGE;
 14726  0FF7  3003               	movlw	3
 14727  0FF8  00C5               	movwf	??_Battery_State_Machine
 14728  0FF9  084A               	movf	Battery_State_Machine@z,w
 14729  0FFA  3E67               	addlw	(low (_batteryState| 0))& (0+255)
 14730  0FFB  0086               	movwf	6
 14731  0FFC  0187               	clrf	7
 14732  0FFD  0845               	movf	??_Battery_State_Machine,w
 14733  0FFE  0081               	movwf	1
 14734  0FFF  0008               	return
 14735  1000                     __end_of_Battery_State_Machine:	
 14736                           
 14737                           	psect	text40
 14738  081F                     __ptext40:	
 14739 ;; *************** function ___fttol *****************
 14740 ;; Defined at:
 14741 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
 14742 ;; Parameters:    Size  Location     Type
 14743 ;;  f1              3   23[BANK0 ] float 
 14744 ;; Auto vars:     Size  Location     Type
 14745 ;;  lval            4   32[BANK0 ] unsigned long 
 14746 ;;  exp1            1   36[BANK0 ] unsigned char 
 14747 ;;  sign1           1   31[BANK0 ] unsigned char 
 14748 ;; Return value:  Size  Location     Type
 14749 ;;                  4   23[BANK0 ] long 
 14750 ;; Registers used:
 14751 ;;		wreg, status,2, status,0
 14752 ;; Tracked objects:
 14753 ;;		On entry : 0/0
 14754 ;;		On exit  : 0/0
 14755 ;;		Unchanged: 0/0
 14756 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14757 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14758 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14759 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14760 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14761 ;;Total ram usage:       14 bytes
 14762 ;; Hardware stack levels used:    1
 14763 ;; This function calls:
 14764 ;;		Nothing
 14765 ;; This function is called by:
 14766 ;;		_tempCalc
 14767 ;;		_main
 14768 ;;		_calculateCurrent0
 14769 ;;		_calculateCurrent2
 14770 ;;		_calculateCurrent3
 14771 ;;		_Init_Battery_State_Machine
 14772 ;;		_Battery_State_Machine
 14773 ;;		_cc_cv_mode
 14774 ;; This function uses a non-reentrant model
 14775 ;;
 14776                           
 14777                           
 14778                           ;psect for function ___fttol
 14779  081F                     ___fttol:	
 14780                           
 14781                           ;incstack = 0
 14782                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 14783  081F  0020               	movlb	0	; select bank0
 14784  0820  0837               	movf	___fttol@f1,w
 14785  0821  00BB               	movwf	??___fttol
 14786  0822  0838               	movf	___fttol@f1+1,w
 14787  0823  00BC               	movwf	??___fttol+1
 14788  0824  0839               	movf	___fttol@f1+2,w
 14789  0825  00BD               	movwf	??___fttol+2
 14790  0826  1003               	clrc
 14791  0827  0D3C               	rlf	??___fttol+1,w
 14792  0828  0D3D               	rlf	??___fttol+2,w
 14793  0829  00BE               	movwf	??___fttol+3
 14794  082A  083E               	movf	??___fttol+3,w
 14795  082B  00C4               	movwf	___fttol@exp1
 14796  082C  0844               	movf	___fttol@exp1,w
 14797  082D  1D03               	btfss	3,2
 14798  082E  2838               	goto	l2530
 14799  082F  3000               	movlw	0
 14800  0830  00BA               	movwf	?___fttol+3
 14801  0831  3000               	movlw	0
 14802  0832  00B9               	movwf	?___fttol+2
 14803  0833  3000               	movlw	0
 14804  0834  00B8               	movwf	?___fttol+1
 14805  0835  3000               	movlw	0
 14806  0836  00B7               	movwf	?___fttol
 14807  0837  0008               	return
 14808  0838                     l2530:	
 14809  0838  0837               	movf	___fttol@f1,w
 14810  0839  00BB               	movwf	??___fttol
 14811  083A  0838               	movf	___fttol@f1+1,w
 14812  083B  00BC               	movwf	??___fttol+1
 14813  083C  0839               	movf	___fttol@f1+2,w
 14814  083D  00BD               	movwf	??___fttol+2
 14815  083E  3017               	movlw	23
 14816  083F                     u2755:	
 14817  083F  36BD               	lsrf	??___fttol+2,f
 14818  0840  0CBC               	rrf	??___fttol+1,f
 14819  0841  0CBB               	rrf	??___fttol,f
 14820  0842  0B89               	decfsz	9,f
 14821  0843  283F               	goto	u2755
 14822  0844  083B               	movf	??___fttol,w
 14823  0845  00BE               	movwf	??___fttol+3
 14824  0846  083E               	movf	??___fttol+3,w
 14825  0847  00BF               	movwf	___fttol@sign1
 14826  0848  17B8               	bsf	___fttol@f1+1,7
 14827  0849  30FF               	movlw	255
 14828  084A  05B7               	andwf	___fttol@f1,f
 14829  084B  30FF               	movlw	255
 14830  084C  05B8               	andwf	___fttol@f1+1,f
 14831  084D  3000               	movlw	0
 14832  084E  05B9               	andwf	___fttol@f1+2,f
 14833  084F  0837               	movf	___fttol@f1,w
 14834  0850  00C0               	movwf	___fttol@lval
 14835  0851  0838               	movf	___fttol@f1+1,w
 14836  0852  00C1               	movwf	___fttol@lval+1
 14837  0853  0839               	movf	___fttol@f1+2,w
 14838  0854  00C2               	movwf	___fttol@lval+2
 14839  0855  01C3               	clrf	___fttol@lval+3
 14840  0856  308E               	movlw	142
 14841  0857  02C4               	subwf	___fttol@exp1,f
 14842  0858  1FC4               	btfss	___fttol@exp1,7
 14843  0859  2876               	goto	l2550
 14844  085A  0844               	movf	___fttol@exp1,w
 14845  085B  3A80               	xorlw	128
 14846  085C  3E8F               	addlw	143
 14847  085D  1803               	skipnc
 14848  085E  2868               	goto	l2548
 14849  085F  3000               	movlw	0
 14850  0860  00BA               	movwf	?___fttol+3
 14851  0861  3000               	movlw	0
 14852  0862  00B9               	movwf	?___fttol+2
 14853  0863  3000               	movlw	0
 14854  0864  00B8               	movwf	?___fttol+1
 14855  0865  3000               	movlw	0
 14856  0866  00B7               	movwf	?___fttol
 14857  0867  0008               	return
 14858  0868                     l2548:	
 14859  0868  3001               	movlw	1
 14860  0869                     u2785:	
 14861  0869  36C3               	lsrf	___fttol@lval+3,f
 14862  086A  0CC2               	rrf	___fttol@lval+2,f
 14863  086B  0CC1               	rrf	___fttol@lval+1,f
 14864  086C  0CC0               	rrf	___fttol@lval,f
 14865  086D  0B89               	decfsz	9,f
 14866  086E  2869               	goto	u2785
 14867  086F  3001               	movlw	1
 14868  0870  00BB               	movwf	??___fttol
 14869  0871  083B               	movf	??___fttol,w
 14870  0872  07C4               	addwf	___fttol@exp1,f
 14871  0873  1903               	btfsc	3,2
 14872  0874  288F               	goto	l2558
 14873  0875  2868               	goto	l2548
 14874  0876                     l2550:	
 14875  0876  3018               	movlw	24
 14876  0877  0244               	subwf	___fttol@exp1,w
 14877  0878  1C03               	skipc
 14878  0879  288C               	goto	l870
 14879  087A  3000               	movlw	0
 14880  087B  00BA               	movwf	?___fttol+3
 14881  087C  3000               	movlw	0
 14882  087D  00B9               	movwf	?___fttol+2
 14883  087E  3000               	movlw	0
 14884  087F  00B8               	movwf	?___fttol+1
 14885  0880  3000               	movlw	0
 14886  0881  00B7               	movwf	?___fttol
 14887  0882  0008               	return
 14888  0883                     l2556:	
 14889  0883  3001               	movlw	1
 14890  0884                     u2815:	
 14891  0884  35C0               	lslf	___fttol@lval,f
 14892  0885  0DC1               	rlf	___fttol@lval+1,f
 14893  0886  0DC2               	rlf	___fttol@lval+2,f
 14894  0887  0DC3               	rlf	___fttol@lval+3,f
 14895  0888  0B89               	decfsz	9,f
 14896  0889  2884               	goto	u2815
 14897  088A  3001               	movlw	1
 14898  088B  02C4               	subwf	___fttol@exp1,f
 14899  088C                     l870:	
 14900  088C  0844               	movf	___fttol@exp1,w
 14901  088D  1D03               	btfss	3,2
 14902  088E  2883               	goto	l2556
 14903  088F                     l2558:	
 14904  088F  083F               	movf	___fttol@sign1,w
 14905  0890  1903               	btfsc	3,2
 14906  0891  289D               	goto	l2562
 14907  0892  09C0               	comf	___fttol@lval,f
 14908  0893  09C1               	comf	___fttol@lval+1,f
 14909  0894  09C2               	comf	___fttol@lval+2,f
 14910  0895  09C3               	comf	___fttol@lval+3,f
 14911  0896  0AC0               	incf	___fttol@lval,f
 14912  0897  1903               	skipnz
 14913  0898  0AC1               	incf	___fttol@lval+1,f
 14914  0899  1903               	skipnz
 14915  089A  0AC2               	incf	___fttol@lval+2,f
 14916  089B  1903               	skipnz
 14917  089C  0AC3               	incf	___fttol@lval+3,f
 14918  089D                     l2562:	
 14919  089D  0843               	movf	___fttol@lval+3,w
 14920  089E  00BA               	movwf	?___fttol+3
 14921  089F  0842               	movf	___fttol@lval+2,w
 14922  08A0  00B9               	movwf	?___fttol+2
 14923  08A1  0841               	movf	___fttol@lval+1,w
 14924  08A2  00B8               	movwf	?___fttol+1
 14925  08A3  0840               	movf	___fttol@lval,w
 14926  08A4  00B7               	movwf	?___fttol
 14927  08A5  0008               	return
 14928  08A6                     __end_of___fttol:	
 14929                           
 14930                           	psect	text41
 14931  08A6                     __ptext41:	
 14932 ;; *************** function ___ftmul *****************
 14933 ;; Defined at:
 14934 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
 14935 ;; Parameters:    Size  Location     Type
 14936 ;;  f1              3    7[BANK0 ] float 
 14937 ;;  f2              3   10[BANK0 ] float 
 14938 ;; Auto vars:     Size  Location     Type
 14939 ;;  f3_as_produc    3   18[BANK0 ] unsigned um
 14940 ;;  sign            1   22[BANK0 ] unsigned char 
 14941 ;;  cntr            1   21[BANK0 ] unsigned char 
 14942 ;;  exp             1   17[BANK0 ] unsigned char 
 14943 ;; Return value:  Size  Location     Type
 14944 ;;                  3    7[BANK0 ] float 
 14945 ;; Registers used:
 14946 ;;		wreg, status,2, status,0, pclath, cstack
 14947 ;; Tracked objects:
 14948 ;;		On entry : 0/0
 14949 ;;		On exit  : 0/0
 14950 ;;		Unchanged: 0/0
 14951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14952 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14953 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14954 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14955 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14956 ;;Total ram usage:       16 bytes
 14957 ;; Hardware stack levels used:    1
 14958 ;; Hardware stack levels required when called:    1
 14959 ;; This function calls:
 14960 ;;		___ftpack
 14961 ;; This function is called by:
 14962 ;;		_Init_Battery_State_Machine
 14963 ;;		_Battery_State_Machine
 14964 ;;		_cc_cv_mode
 14965 ;;		_tempCalc
 14966 ;;		_main
 14967 ;;		_log
 14968 ;;		_eval_poly
 14969 ;; This function uses a non-reentrant model
 14970 ;;
 14971                           
 14972                           
 14973                           ;psect for function ___ftmul
 14974  08A6                     ___ftmul:	
 14975                           
 14976                           ;incstack = 0
 14977                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 14978  08A6  0020               	movlb	0	; select bank0
 14979  08A7  0827               	movf	___ftmul@f1,w
 14980  08A8  00AD               	movwf	??___ftmul
 14981  08A9  0828               	movf	___ftmul@f1+1,w
 14982  08AA  00AE               	movwf	??___ftmul+1
 14983  08AB  0829               	movf	___ftmul@f1+2,w
 14984  08AC  00AF               	movwf	??___ftmul+2
 14985  08AD  1003               	clrc
 14986  08AE  0D2E               	rlf	??___ftmul+1,w
 14987  08AF  0D2F               	rlf	??___ftmul+2,w
 14988  08B0  00B0               	movwf	??___ftmul+3
 14989  08B1  0830               	movf	??___ftmul+3,w
 14990  08B2  00B1               	movwf	___ftmul@exp
 14991  08B3  0831               	movf	___ftmul@exp,w
 14992  08B4  1D03               	btfss	3,2
 14993  08B5  28BD               	goto	l2446
 14994  08B6  3000               	movlw	0
 14995  08B7  00A7               	movwf	?___ftmul
 14996  08B8  3000               	movlw	0
 14997  08B9  00A8               	movwf	?___ftmul+1
 14998  08BA  3000               	movlw	0
 14999  08BB  00A9               	movwf	?___ftmul+2
 15000  08BC  0008               	return
 15001  08BD                     l2446:	
 15002  08BD  082A               	movf	___ftmul@f2,w
 15003  08BE  00AD               	movwf	??___ftmul
 15004  08BF  082B               	movf	___ftmul@f2+1,w
 15005  08C0  00AE               	movwf	??___ftmul+1
 15006  08C1  082C               	movf	___ftmul@f2+2,w
 15007  08C2  00AF               	movwf	??___ftmul+2
 15008  08C3  1003               	clrc
 15009  08C4  0D2E               	rlf	??___ftmul+1,w
 15010  08C5  0D2F               	rlf	??___ftmul+2,w
 15011  08C6  00B0               	movwf	??___ftmul+3
 15012  08C7  0830               	movf	??___ftmul+3,w
 15013  08C8  00B6               	movwf	___ftmul@sign
 15014  08C9  0836               	movf	___ftmul@sign,w
 15015  08CA  1D03               	btfss	3,2
 15016  08CB  28D3               	goto	l2452
 15017  08CC  3000               	movlw	0
 15018  08CD  00A7               	movwf	?___ftmul
 15019  08CE  3000               	movlw	0
 15020  08CF  00A8               	movwf	?___ftmul+1
 15021  08D0  3000               	movlw	0
 15022  08D1  00A9               	movwf	?___ftmul+2
 15023  08D2  0008               	return
 15024  08D3                     l2452:	
 15025  08D3  0836               	movf	___ftmul@sign,w
 15026  08D4  3E7B               	addlw	123
 15027  08D5  00AD               	movwf	??___ftmul
 15028  08D6  082D               	movf	??___ftmul,w
 15029  08D7  07B1               	addwf	___ftmul@exp,f
 15030  08D8  0827               	movf	___ftmul@f1,w
 15031  08D9  00AD               	movwf	??___ftmul
 15032  08DA  0828               	movf	___ftmul@f1+1,w
 15033  08DB  00AE               	movwf	??___ftmul+1
 15034  08DC  0829               	movf	___ftmul@f1+2,w
 15035  08DD  00AF               	movwf	??___ftmul+2
 15036  08DE  3010               	movlw	16
 15037  08DF                     u2605:	
 15038  08DF  36AF               	lsrf	??___ftmul+2,f
 15039  08E0  0CAE               	rrf	??___ftmul+1,f
 15040  08E1  0CAD               	rrf	??___ftmul,f
 15041  08E2  0B89               	decfsz	9,f
 15042  08E3  28DF               	goto	u2605
 15043  08E4  082D               	movf	??___ftmul,w
 15044  08E5  00B0               	movwf	??___ftmul+3
 15045  08E6  0830               	movf	??___ftmul+3,w
 15046  08E7  00B6               	movwf	___ftmul@sign
 15047  08E8  082A               	movf	___ftmul@f2,w
 15048  08E9  00AD               	movwf	??___ftmul
 15049  08EA  082B               	movf	___ftmul@f2+1,w
 15050  08EB  00AE               	movwf	??___ftmul+1
 15051  08EC  082C               	movf	___ftmul@f2+2,w
 15052  08ED  00AF               	movwf	??___ftmul+2
 15053  08EE  3010               	movlw	16
 15054  08EF                     u2615:	
 15055  08EF  36AF               	lsrf	??___ftmul+2,f
 15056  08F0  0CAE               	rrf	??___ftmul+1,f
 15057  08F1  0CAD               	rrf	??___ftmul,f
 15058  08F2  0B89               	decfsz	9,f
 15059  08F3  28EF               	goto	u2615
 15060  08F4  082D               	movf	??___ftmul,w
 15061  08F5  00B0               	movwf	??___ftmul+3
 15062  08F6  0830               	movf	??___ftmul+3,w
 15063  08F7  06B6               	xorwf	___ftmul@sign,f
 15064  08F8  3080               	movlw	128
 15065  08F9  00AD               	movwf	??___ftmul
 15066  08FA  082D               	movf	??___ftmul,w
 15067  08FB  05B6               	andwf	___ftmul@sign,f
 15068  08FC  17A8               	bsf	___ftmul@f1+1,7
 15069  08FD  17AB               	bsf	___ftmul@f2+1,7
 15070  08FE  30FF               	movlw	255
 15071  08FF  05AA               	andwf	___ftmul@f2,f
 15072  0900  30FF               	movlw	255
 15073  0901  05AB               	andwf	___ftmul@f2+1,f
 15074  0902  3000               	movlw	0
 15075  0903  05AC               	andwf	___ftmul@f2+2,f
 15076  0904  3000               	movlw	0
 15077  0905  00B2               	movwf	___ftmul@f3_as_product
 15078  0906  3000               	movlw	0
 15079  0907  00B3               	movwf	___ftmul@f3_as_product+1
 15080  0908  3000               	movlw	0
 15081  0909  00B4               	movwf	___ftmul@f3_as_product+2
 15082  090A  3007               	movlw	7
 15083  090B  00AD               	movwf	??___ftmul
 15084  090C  082D               	movf	??___ftmul,w
 15085  090D  00B5               	movwf	___ftmul@cntr
 15086  090E                     l2464:	
 15087  090E  1C27               	btfss	___ftmul@f1,0
 15088  090F  2916               	goto	l2468
 15089  0910  082A               	movf	___ftmul@f2,w
 15090  0911  07B2               	addwf	___ftmul@f3_as_product,f
 15091  0912  082B               	movf	___ftmul@f2+1,w
 15092  0913  3DB3               	addwfc	___ftmul@f3_as_product+1,f
 15093  0914  082C               	movf	___ftmul@f2+2,w
 15094  0915  3DB4               	addwfc	___ftmul@f3_as_product+2,f
 15095  0916                     l2468:	
 15096  0916  3001               	movlw	1
 15097  0917                     u2635:	
 15098  0917  36A9               	lsrf	___ftmul@f1+2,f
 15099  0918  0CA8               	rrf	___ftmul@f1+1,f
 15100  0919  0CA7               	rrf	___ftmul@f1,f
 15101  091A  0B89               	decfsz	9,f
 15102  091B  2917               	goto	u2635
 15103  091C  3001               	movlw	1
 15104  091D                     u2645:	
 15105  091D  35AA               	lslf	___ftmul@f2,f
 15106  091E  0DAB               	rlf	___ftmul@f2+1,f
 15107  091F  0DAC               	rlf	___ftmul@f2+2,f
 15108  0920  0B89               	decfsz	9,f
 15109  0921  291D               	goto	u2645
 15110  0922  3001               	movlw	1
 15111  0923  02B5               	subwf	___ftmul@cntr,f
 15112  0924  1D03               	btfss	3,2
 15113  0925  290E               	goto	l2464
 15114  0926  3009               	movlw	9
 15115  0927  00AD               	movwf	??___ftmul
 15116  0928  082D               	movf	??___ftmul,w
 15117  0929  00B5               	movwf	___ftmul@cntr
 15118  092A                     l2476:	
 15119  092A  1C27               	btfss	___ftmul@f1,0
 15120  092B  2932               	goto	l2480
 15121  092C  082A               	movf	___ftmul@f2,w
 15122  092D  07B2               	addwf	___ftmul@f3_as_product,f
 15123  092E  082B               	movf	___ftmul@f2+1,w
 15124  092F  3DB3               	addwfc	___ftmul@f3_as_product+1,f
 15125  0930  082C               	movf	___ftmul@f2+2,w
 15126  0931  3DB4               	addwfc	___ftmul@f3_as_product+2,f
 15127  0932                     l2480:	
 15128  0932  3001               	movlw	1
 15129  0933                     u2675:	
 15130  0933  36A9               	lsrf	___ftmul@f1+2,f
 15131  0934  0CA8               	rrf	___ftmul@f1+1,f
 15132  0935  0CA7               	rrf	___ftmul@f1,f
 15133  0936  0B89               	decfsz	9,f
 15134  0937  2933               	goto	u2675
 15135  0938  3001               	movlw	1
 15136  0939                     u2685:	
 15137  0939  36B4               	lsrf	___ftmul@f3_as_product+2,f
 15138  093A  0CB3               	rrf	___ftmul@f3_as_product+1,f
 15139  093B  0CB2               	rrf	___ftmul@f3_as_product,f
 15140  093C  0B89               	decfsz	9,f
 15141  093D  2939               	goto	u2685
 15142  093E  3001               	movlw	1
 15143  093F  02B5               	subwf	___ftmul@cntr,f
 15144  0940  1D03               	btfss	3,2
 15145  0941  292A               	goto	l2476
 15146  0942  0832               	movf	___ftmul@f3_as_product,w
 15147  0943  00F0               	movwf	___ftpack@arg
 15148  0944  0833               	movf	___ftmul@f3_as_product+1,w
 15149  0945  00F1               	movwf	___ftpack@arg+1
 15150  0946  0834               	movf	___ftmul@f3_as_product+2,w
 15151  0947  00F2               	movwf	___ftpack@arg+2
 15152  0948  0831               	movf	___ftmul@exp,w
 15153  0949  00AD               	movwf	??___ftmul
 15154  094A  082D               	movf	??___ftmul,w
 15155  094B  00F3               	movwf	___ftpack@exp
 15156  094C  0836               	movf	___ftmul@sign,w
 15157  094D  00AE               	movwf	??___ftmul+1
 15158  094E  082E               	movf	??___ftmul+1,w
 15159  094F  00F4               	movwf	___ftpack@sign
 15160  0950  3194  24DB         	fcall	___ftpack
 15161  0952  0870               	movf	?___ftpack,w
 15162  0953  0020               	movlb	0	; select bank0
 15163  0954  00A7               	movwf	?___ftmul
 15164  0955  0871               	movf	?___ftpack+1,w
 15165  0956  00A8               	movwf	?___ftmul+1
 15166  0957  0872               	movf	?___ftpack+2,w
 15167  0958  00A9               	movwf	?___ftmul+2
 15168  0959  0008               	return
 15169  095A                     __end_of___ftmul:	
 15170                           
 15171                           	psect	text42
 15172  1140                     __ptext42:	
 15173 ;; *************** function ___awtoft *****************
 15174 ;; Defined at:
 15175 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
 15176 ;; Parameters:    Size  Location     Type
 15177 ;;  c               2    4[BANK0 ] int 
 15178 ;; Auto vars:     Size  Location     Type
 15179 ;;  sign            1   13[COMMON] unsigned char 
 15180 ;; Return value:  Size  Location     Type
 15181 ;;                  3    4[BANK0 ] float 
 15182 ;; Registers used:
 15183 ;;		wreg, status,2, status,0, pclath, cstack
 15184 ;; Tracked objects:
 15185 ;;		On entry : 0/0
 15186 ;;		On exit  : 0/0
 15187 ;;		Unchanged: 0/0
 15188 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15189 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15190 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15191 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15192 ;;      Totals:         3       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15193 ;;Total ram usage:        6 bytes
 15194 ;; Hardware stack levels used:    1
 15195 ;; Hardware stack levels required when called:    1
 15196 ;; This function calls:
 15197 ;;		___ftpack
 15198 ;; This function is called by:
 15199 ;;		_Init_Battery_State_Machine
 15200 ;;		_Battery_State_Machine
 15201 ;;		_cc_cv_mode
 15202 ;;		_tempCalc
 15203 ;;		_main
 15204 ;;		_calculateCurrent0
 15205 ;;		_calculateCurrent2
 15206 ;;		_calculateCurrent3
 15207 ;;		_log
 15208 ;; This function uses a non-reentrant model
 15209 ;;
 15210                           
 15211                           
 15212                           ;psect for function ___awtoft
 15213  1140                     ___awtoft:	
 15214                           
 15215                           ;incstack = 0
 15216                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 15217  1140  01FD               	clrf	___awtoft@sign
 15218  1141  0020               	movlb	0	; select bank0
 15219  1142  1FA5               	btfss	___awtoft@c+1,7
 15220  1143  294B               	goto	l2500
 15221  1144  09A4               	comf	___awtoft@c,f
 15222  1145  09A5               	comf	___awtoft@c+1,f
 15223  1146  0AA4               	incf	___awtoft@c,f
 15224  1147  1903               	skipnz
 15225  1148  0AA5               	incf	___awtoft@c+1,f
 15226  1149  01FD               	clrf	___awtoft@sign
 15227  114A  0AFD               	incf	___awtoft@sign,f
 15228  114B                     l2500:	
 15229  114B  0824               	movf	___awtoft@c,w
 15230  114C  00F0               	movwf	___ftpack@arg
 15231  114D  0825               	movf	___awtoft@c+1,w
 15232  114E  00F1               	movwf	___ftpack@arg+1
 15233  114F  01F2               	clrf	___ftpack@arg+2
 15234  1150  308E               	movlw	142
 15235  1151  00FB               	movwf	??___awtoft
 15236  1152  087B               	movf	??___awtoft,w
 15237  1153  00F3               	movwf	___ftpack@exp
 15238  1154  087D               	movf	___awtoft@sign,w
 15239  1155  00FC               	movwf	??___awtoft+1
 15240  1156  087C               	movf	??___awtoft+1,w
 15241  1157  00F4               	movwf	___ftpack@sign
 15242  1158  3194  24DB         	fcall	___ftpack
 15243  115A  0870               	movf	?___ftpack,w
 15244  115B  0020               	movlb	0	; select bank0
 15245  115C  00A4               	movwf	?___awtoft
 15246  115D  0871               	movf	?___ftpack+1,w
 15247  115E  00A5               	movwf	?___awtoft+1
 15248  115F  0872               	movf	?___ftpack+2,w
 15249  1160  00A6               	movwf	?___awtoft+2
 15250  1161  0008               	return
 15251  1162                     __end_of___awtoft:	
 15252                           
 15253                           	psect	text43
 15254  14DB                     __ptext43:	
 15255 ;; *************** function ___ftpack *****************
 15256 ;; Defined at:
 15257 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
 15258 ;; Parameters:    Size  Location     Type
 15259 ;;  arg             3    0[COMMON] unsigned um
 15260 ;;  exp             1    3[COMMON] unsigned char 
 15261 ;;  sign            1    4[COMMON] unsigned char 
 15262 ;; Auto vars:     Size  Location     Type
 15263 ;;		None
 15264 ;; Return value:  Size  Location     Type
 15265 ;;                  3    0[COMMON] float 
 15266 ;; Registers used:
 15267 ;;		wreg, status,2, status,0
 15268 ;; Tracked objects:
 15269 ;;		On entry : 0/0
 15270 ;;		On exit  : 0/0
 15271 ;;		Unchanged: 0/0
 15272 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15273 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15274 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15275 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15276 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15277 ;;Total ram usage:        8 bytes
 15278 ;; Hardware stack levels used:    1
 15279 ;; This function calls:
 15280 ;;		Nothing
 15281 ;; This function is called by:
 15282 ;;		___awtoft
 15283 ;;		___ftadd
 15284 ;;		___ftdiv
 15285 ;;		___ftmul
 15286 ;; This function uses a non-reentrant model
 15287 ;;
 15288                           
 15289                           
 15290                           ;psect for function ___ftpack
 15291  14DB                     ___ftpack:	
 15292                           
 15293                           ;incstack = 0
 15294                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 15295  14DB  0873               	movf	___ftpack@exp,w
 15296  14DC  1903               	btfsc	3,2
 15297  14DD  2CE3               	goto	l2306
 15298  14DE  0872               	movf	___ftpack@arg+2,w
 15299  14DF  0471               	iorwf	___ftpack@arg+1,w
 15300  14E0  0470               	iorwf	___ftpack@arg,w
 15301  14E1  1D03               	skipz
 15302  14E2  2CF4               	goto	l2312
 15303  14E3                     l2306:	
 15304  14E3  3000               	movlw	0
 15305  14E4  00F0               	movwf	?___ftpack
 15306  14E5  3000               	movlw	0
 15307  14E6  00F1               	movwf	?___ftpack+1
 15308  14E7  3000               	movlw	0
 15309  14E8  00F2               	movwf	?___ftpack+2
 15310  14E9  0008               	return
 15311  14EA                     l2310:	
 15312  14EA  3001               	movlw	1
 15313  14EB  00F5               	movwf	??___ftpack
 15314  14EC  0875               	movf	??___ftpack,w
 15315  14ED  07F3               	addwf	___ftpack@exp,f
 15316  14EE  3001               	movlw	1
 15317  14EF                     u2175:	
 15318  14EF  36F2               	lsrf	___ftpack@arg+2,f
 15319  14F0  0CF1               	rrf	___ftpack@arg+1,f
 15320  14F1  0CF0               	rrf	___ftpack@arg,f
 15321  14F2  0B89               	decfsz	9,f
 15322  14F3  2CEF               	goto	u2175
 15323  14F4                     l2312:	
 15324  14F4  30FE               	movlw	254
 15325  14F5  0572               	andwf	___ftpack@arg+2,w
 15326  14F6  1903               	btfsc	3,2
 15327  14F7  2D0D               	goto	l779
 15328  14F8  2CEA               	goto	l2310
 15329  14F9                     l2314:	
 15330  14F9  3001               	movlw	1
 15331  14FA  00F5               	movwf	??___ftpack
 15332  14FB  0875               	movf	??___ftpack,w
 15333  14FC  07F3               	addwf	___ftpack@exp,f
 15334  14FD  3001               	movlw	1
 15335  14FE  07F0               	addwf	___ftpack@arg,f
 15336  14FF  3000               	movlw	0
 15337  1500  1803               	skipnc
 15338  1501  3001               	movlw	1
 15339  1502  07F1               	addwf	___ftpack@arg+1,f
 15340  1503  3000               	movlw	0
 15341  1504  1803               	skipnc
 15342  1505  3001               	movlw	1
 15343  1506  07F2               	addwf	___ftpack@arg+2,f
 15344  1507  3001               	movlw	1
 15345  1508                     u2195:	
 15346  1508  36F2               	lsrf	___ftpack@arg+2,f
 15347  1509  0CF1               	rrf	___ftpack@arg+1,f
 15348  150A  0CF0               	rrf	___ftpack@arg,f
 15349  150B  0B89               	decfsz	9,f
 15350  150C  2D08               	goto	u2195
 15351  150D                     l779:	
 15352  150D  30FF               	movlw	255
 15353  150E  0572               	andwf	___ftpack@arg+2,w
 15354  150F  1903               	btfsc	3,2
 15355  1510  2D1A               	goto	l2322
 15356  1511  2CF9               	goto	l2314
 15357  1512                     l2320:	
 15358  1512  3001               	movlw	1
 15359  1513  02F3               	subwf	___ftpack@exp,f
 15360  1514  3001               	movlw	1
 15361  1515                     u2215:	
 15362  1515  35F0               	lslf	___ftpack@arg,f
 15363  1516  0DF1               	rlf	___ftpack@arg+1,f
 15364  1517  0DF2               	rlf	___ftpack@arg+2,f
 15365  1518  0B89               	decfsz	9,f
 15366  1519  2D15               	goto	u2215
 15367  151A                     l2322:	
 15368  151A  1BF1               	btfsc	___ftpack@arg+1,7
 15369  151B  2D20               	goto	l786
 15370  151C  3002               	movlw	2
 15371  151D  0273               	subwf	___ftpack@exp,w
 15372  151E  1803               	skipnc
 15373  151F  2D12               	goto	l2320
 15374  1520                     l786:	
 15375  1520  1873               	btfsc	___ftpack@exp,0
 15376  1521  2D28               	goto	l787
 15377  1522  30FF               	movlw	255
 15378  1523  05F0               	andwf	___ftpack@arg,f
 15379  1524  307F               	movlw	127
 15380  1525  05F1               	andwf	___ftpack@arg+1,f
 15381  1526  30FF               	movlw	255
 15382  1527  05F2               	andwf	___ftpack@arg+2,f
 15383  1528                     l787:	
 15384  1528  1003               	clrc
 15385  1529  0CF3               	rrf	___ftpack@exp,f
 15386  152A  0873               	movf	___ftpack@exp,w
 15387  152B  00F5               	movwf	??___ftpack
 15388  152C  01F6               	clrf	??___ftpack+1
 15389  152D  01F7               	clrf	??___ftpack+2
 15390  152E  3010               	movlw	16
 15391  152F                     u2255:	
 15392  152F  35F5               	lslf	??___ftpack,f
 15393  1530  0DF6               	rlf	??___ftpack+1,f
 15394  1531  0DF7               	rlf	??___ftpack+2,f
 15395  1532  0B89               	decfsz	9,f
 15396  1533  2D2F               	goto	u2255
 15397  1534  0875               	movf	??___ftpack,w
 15398  1535  04F0               	iorwf	___ftpack@arg,f
 15399  1536  0876               	movf	??___ftpack+1,w
 15400  1537  04F1               	iorwf	___ftpack@arg+1,f
 15401  1538  0877               	movf	??___ftpack+2,w
 15402  1539  04F2               	iorwf	___ftpack@arg+2,f
 15403  153A  0874               	movf	___ftpack@sign,w
 15404  153B  1903               	btfsc	3,2
 15405  153C  0008               	return
 15406  153D  17F2               	bsf	___ftpack@arg+2,7
 15407  153E  0008               	return
 15408  153F                     __end_of___ftpack:	
 15409  007E                     btemp	set	126	;btemp
 15410  007E                     wtemp0	set	126


Data Sizes:
    Strings     14
    Constant    330
    Data        18
    BSS         111
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     65      79
    BANK1            80     28      78
    BANK2            80      0      65
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6             8      0       0
    BANK7             0      0       0
    BANK8             0      0       0
    BANK9             0      0       0
    BANK10            0      0       0
    BANK11            0      0       0
    BANK12            0      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> log@exponent(BANK0[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 27
		 -> log@coeff(CODE[27]), 

    LCDWriteString@characters	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_3(CODE[5]), STR_2(CODE[5]), STR_1(CODE[4]), 


Critical Paths under _main in COMMON

    _main->_LCDWriteString
    _main->___awtoft
    _tempCalc->___awtoft
    _log->___awtoft
    ___ftge->___awtoft
    ___ftadd->___awtoft
    _readVAnalog->___aldiv
    _readIAnalog->___aldiv
    _readButton->_ADCRead
    _cc_cv_mode->___awtoft
    _calculateCurrent3->___awtoft
    _calculateCurrent2->___awtoft
    _calculateCurrent0->___awtoft
    ___ftdiv->___awtoft
    _LCDInit->_LCDWrite
    _LCDClear->_gotoXY
    _gotoXY->_LCDWrite
    _Init_Battery_State_Machine->___awtoft
    _LCDWriteString->_LCDWriteCharacter
    _LCDWriteInt->___awtoft
    ___awdiv->___wmul
    _LCDWriteCharacter->___wmul
    _Battery_State_Machine->___awtoft
    ___fttol->___awtoft
    ___ftmul->___awtoft
    ___awtoft->___awdiv

Critical Paths under _main in BANK0

    _main->_tempCalc
    _tempCalc->_log
    _log->_eval_poly
    _eval_poly->___ftadd
    ___ftge->___ftmul
    ___ftsub->___ftadd
    ___ftadd->___ftdiv
    ___ftadd->___ftmul
    _readVAnalog->___aldiv
    _readIAnalog->___aldiv
    _cc_cv_mode->___fttol
    _calculateCurrent3->___fttol
    _calculateCurrent2->___fttol
    _calculateCurrent0->___fttol
    ___ftdiv->___awtoft
    _SYSTEM_Initialize->_Init_Battery_State_Machine
    _Init_Battery_State_Machine->___fttol
    _LCDWriteInt->___fttol
    _Battery_State_Machine->___fttol
    ___fttol->___ftdiv
    ___fttol->___ftmul
    ___ftmul->___awtoft
    ___awtoft->___awdiv

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                30    30      0  119298
                                             63 BANK0      2     2      0
                                              0 BANK1     28    28      0
                            _ADCRead
              _Battery_State_Machine
                           _LCDClear
                            _LCDInit
                  _LCDWriteCharacter
                        _LCDWriteInt
                     _LCDWriteString
                 _PWM1_LoadDutyValue
                 _PWM6_LoadDutyValue
                 _PWM7_LoadDutyValue
                  _SYSTEM_Initialize
                            ___awdiv
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___fttol
                             ___wmul
                  _calculateCurrent0
                  _calculateCurrent2
                  _calculateCurrent3
                         _cc_cv_mode
                             _gotoXY
                         _readButton
                        _readIAnalog
                        _readVAnalog
                           _tempCalc
 ---------------------------------------------------------------------------------
 (1) _tempCalc                                            11     9      2   35609
                                             52 BANK0     11     9      2
                            _ADCRead (ARG)
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftsub
                            ___fttol
                                _log
 ---------------------------------------------------------------------------------
 (2) _log                                                  6     3      3   18605
                                             46 BANK0      6     3      3
                           ___awtoft
                            ___ftadd
                             ___ftge
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _frexp                                                6     2      4     330
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) _eval_poly                                           10     3      7    8269
                                             36 BANK0     10     3      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     428
                                             23 BANK0      9     3      6
                            ___awdiv (ARG)
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    3356
                                             36 BANK0      6     0      6
                            ___ftadd
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             13     7      6    3183
                                             23 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (1) _readVAnalog                                         24    22      2    2240
                                              9 COMMON     4     4      0
                                              6 BANK0     20    18      2
                            _ADCRead
                            ___aldiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _readIAnalog                                         24    22      2    2240
                                              9 COMMON     4     4      0
                                              6 BANK0     20    18      2
                            _ADCRead
                            ___aldiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     512
                                              0 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _readButton                                           2     2      0      22
                                              4 COMMON     2     2      0
                            _ADCRead
 ---------------------------------------------------------------------------------
 (2) _ADCRead                                              4     1      3      22
                                              0 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (1) _cc_cv_mode                                           8     8      0    7430
                                             37 BANK0      8     8      0
                           ___awtoft
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) _calculateCurrent3                                    3     3      0    6798
                                             37 BANK0      3     3      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) _calculateCurrent2                                    3     3      0    6798
                                             37 BANK0      3     3      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) _calculateCurrent0                                    3     3      0    6798
                                             37 BANK0      3     3      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    3259
                                              7 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    2     2      0   10903
                                             42 BANK0      2     2      0
                     _ADC_Initialize
         _Init_Battery_State_Machine
                           _LCDClear
                            _LCDInit
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _PWM_Initialize
                    _TMR2_Initialize
                    _TMR4_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR4_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               1     1      0      23
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LCDInit                                              1     1      0     803
                                              5 COMMON     1     1      0
                           _LCDWrite
 ---------------------------------------------------------------------------------
 (2) _LCDClear                                             3     3      0    3021
                                              8 COMMON     3     3      0
                           _LCDWrite
                             _gotoXY
 ---------------------------------------------------------------------------------
 (1) _gotoXY                                               3     2      1    2172
                                              5 COMMON     3     2      1
                           _LCDWrite
 ---------------------------------------------------------------------------------
 (2) _Init_Battery_State_Machine                           5     5      0    7056
                                             37 BANK0      5     5      0
                           ___awtoft
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM7_LoadDutyValue                                   4     2      2      97
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _PWM6_LoadDutyValue                                   4     2      2      97
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _PWM1_LoadDutyValue                                   4     2      2      97
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _LCDWriteString                                       3     1      2    2483
                                             12 COMMON     2     0      2
                                              0 BANK0      1     1      0
                  _LCDWriteCharacter
 ---------------------------------------------------------------------------------
 (1) _LCDWriteInt                                         16    11      5    8221
                                             37 BANK0     16    11      5
                  _LCDWriteCharacter
                            ___awdiv
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                            ___fttol (ARG)
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     265
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              9     5      4     724
                                              6 COMMON     5     1      4
                                              0 BANK0      4     4      0
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _LCDWriteCharacter                                    6     6      0    2279
                                              6 COMMON     6     6      0
                           _LCDWrite
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    1364
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) _LCDWrite                                             5     4      1     803
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (1) _Battery_State_Machine                                6     6      0    7496
                                             37 BANK0      6     6      0
                           ___awtoft
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             14    10      4     787
                                             23 BANK0     14    10      4
                            ___awdiv (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             16    10      6    3385
                                              7 BANK0     16    10      6
                            ___awdiv (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             6     3      3    2752
                                             11 COMMON     3     3      0
                                              4 BANK0      3     0      3
                            ___awdiv (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    1707
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCRead
   _Battery_State_Machine
     ___awtoft
       ___awdiv (ARG)
         ___wmul (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
     ___ftmul
       ___awdiv (ARG)
         ___wmul (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
       _frexp (ARG)
     ___fttol
       ___awdiv (ARG)
         ___wmul (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___wmul (ARG)
   _LCDClear
     _LCDWrite
     _gotoXY
       _LCDWrite
   _LCDInit
     _LCDWrite
   _LCDWriteCharacter
     _LCDWrite
     ___wmul
   _LCDWriteInt
     _LCDWriteCharacter
       _LCDWrite
       ___wmul
     ___awdiv
       ___wmul (ARG)
     ___awtoft (ARG)
       ___awdiv (ARG)
         ___wmul (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___wmul (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
       _frexp (ARG)
     ___fttol (ARG)
       ___awdiv (ARG)
         ___wmul (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___wmul (ARG)
     ___lwmod (ARG)
   _LCDWriteString
     _LCDWriteCharacter
       _LCDWrite
       ___wmul
   _PWM1_LoadDutyValue
   _PWM6_LoadDutyValue
   _PWM7_LoadDutyValue
   _SYSTEM_Initialize
     _ADC_Initialize
     _Init_Battery_State_Machine
       ___awtoft
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___wmul (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___fttol
         ___awdiv (ARG)
           ___wmul (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___wmul (ARG)
     _LCDClear
       _LCDWrite
       _gotoXY
         _LCDWrite
     _LCDInit
       _LCDWrite
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM_Initialize
     _TMR2_Initialize
     _TMR4_Initialize
   ___awdiv
     ___wmul (ARG)
   ___awtoft
     ___awdiv (ARG)
       ___wmul (ARG)
     ___ftpack (ARG)
     ___wmul (ARG)
   ___ftdiv
     ___awtoft (ARG)
       ___awdiv (ARG)
         ___wmul (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
     ___ftpack (ARG)
     ___ftpack (ARG)
   ___ftge
     ___awdiv (ARG)
       ___wmul (ARG)
     ___awtoft (ARG)
       ___awdiv (ARG)
         ___wmul (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___wmul (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
       _frexp (ARG)
     ___wmul (ARG)
   ___ftmul
     ___awdiv (ARG)
       ___wmul (ARG)
     ___awtoft (ARG)
       ___awdiv (ARG)
         ___wmul (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
     ___ftpack (ARG)
     ___wmul (ARG)
     _frexp (ARG)
   ___fttol
     ___awdiv (ARG)
       ___wmul (ARG)
     ___awtoft (ARG)
       ___awdiv (ARG)
         ___wmul (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___wmul (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
       _frexp (ARG)
     ___wmul (ARG)
   ___wmul
   _calculateCurrent0
     ___awtoft
       ___awdiv (ARG)
         ___wmul (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___fttol
       ___awdiv (ARG)
         ___wmul (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___wmul (ARG)
   _calculateCurrent2
     ___awtoft
       ___awdiv (ARG)
         ___wmul (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___fttol
       ___awdiv (ARG)
         ___wmul (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___wmul (ARG)
   _calculateCurrent3
     ___awtoft
       ___awdiv (ARG)
         ___wmul (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___fttol
       ___awdiv (ARG)
         ___wmul (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___wmul (ARG)
   _cc_cv_mode
     ___awtoft
       ___awdiv (ARG)
         ___wmul (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
     ___ftmul
       ___awdiv (ARG)
         ___wmul (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
       _frexp (ARG)
     ___fttol
       ___awdiv (ARG)
         ___wmul (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___wmul (ARG)
   _gotoXY
     _LCDWrite
   _readButton
     _ADCRead
   _readIAnalog
     _ADCRead
     ___aldiv
     ___wmul
   _readVAnalog
     _ADCRead
     ___aldiv
     ___wmul
   _tempCalc
     _ADCRead (ARG)
     ___awtoft (ARG)
       ___awdiv (ARG)
         ___wmul (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
     ___ftadd (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
       _frexp (ARG)
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___wmul (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
       _frexp (ARG)
     ___ftsub (ARG)
       ___ftadd
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
     ___fttol (ARG)
       ___awdiv (ARG)
         ___wmul (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___wmul (ARG)
     _log (ARG)
       ___awtoft
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
       ___ftadd
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftge
         ___awdiv (ARG)
           ___wmul (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___wmul (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___wmul (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       _eval_poly
         ___ftadd
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___wmul
       _frexp

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     41      4F       5       98.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     1C      4E       7       97.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      41       9       81.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6                8      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      EC      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BANK8                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BANK9                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BANK10               0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BANK11               0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      EC      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sat Aug 25 14:18:07 2018

                       _stateCounter 00BC                                    _j 0069  
                                  _x 006C               LCDWriteInt@fieldLength 0047  
            __size_of_PWM_Initialize 001F                          __CFG_CP$OFF 0000  
                                 l65 1F58                                   l68 1F5F  
                       ___awdiv@sign 0021                  ___wmul@multiplicand 0072  
        __size_of_PWM6_LoadDutyValue 0016                         ___ftadd@exp1 0043  
                       ___ftadd@exp2 0042                          __CFG_LVP$ON 0000  
                       ___ftadd@sign 0041                                  l140 0039  
                                l141 004A                                  l230 116D  
                                l231 116F                                  l232 1175  
                                l233 1185                                  l145 008D  
                                l234 1179                                  l511 0495  
                                l470 01E1                        LCDClear@index 0079  
                                l618 1FB0                                  l810 0B99  
                                l469 01D9                                  l673 1636  
                                l870 088C                                  l786 1520  
                                l787 1528                                  l779 150D  
                                _GIE 005F                                  _RB2 006A  
                       __CFG_CPD$OFF 0000                         _VsampleIndex 00CE  
                                _log 1750                      __end_of_ADCRead 1F66  
                    _TMR2_Initialize 1F0E                         __CFG_BORV$LO 0000  
                                wreg 0009                      __end_of_LCDInit 124B  
                       ?_LCDWriteInt 0045                         __CFG_ZCD$OFF 0000  
                       ___ftdiv@cntr 0031                         ___ftdiv@sign 0036  
                               l3000 0ECD                                 l3002 0EDF  
                               l2310 14EA                                 l3030 0FF0  
                               l3014 0F6F                                 l3022 0FA2  
                               l2320 1512                                 l2312 14F4  
                               l3104 1622                                 l2322 151A  
                               l2314 14F9                                 l2306 14E3  
                               l3018 0F89                                 l3130 097B  
                               l3106 1623                                 l2410 0B78  
                               l2500 114B                                 l3140 0982  
                               l3116 1F3D                                 l3212 135E  
                               l3044 0058                                 l2404 0B65  
                               l3150 09BF                                 l3142 09AF  
                               l3206 1316                                 l2422 0BAB  
                               l2406 0B6F                                 l3302 02C8  
                               l3160 09F0                                 l3152 09C5  
                               l3048 0065                                 l3072 15C7  
                               l2416 0B8B                                 l2408 0B74  
                               l2512 12EE                                 l2530 0838  
                               l3146 09B3                                 l3218 13A6  
                               l3082 15F3                                 l2426 0BBD  
                               l2418 0B95                                 l3314 0300  
                               l2452 08D3                                 l3164 09FE  
                               l3148 09B7                                 l3092 1601  
                               l3084 15F5                                 l2436 0BD8  
                               l2380 0B29                                 l2508 12D8  
                               l3332 0334                                 l3308 02E6  
                               l3260 0191                                 l3252 017D  
                               l2446 08BD                                 l2550 0876  
                               l2358 1FAA                                 l3158 09C9  
                               l3078 15E1                                 l3414 04E2  
                               l3326 0316                                 l3342 0360  
                               l2480 0932                                 l2464 090E  
                               l2376 0B22                                 l3360 03A1  
                               l3272 01B5                                 l2562 089D  
                               l3098 160A                                 l2386 0B38  
                               l3370 0400                                 l3354 038A  
                               l3338 034E                                 l3266 0197  
                               l2476 092A                                 l2468 0916  
                               l2556 0883                                 l2548 0868  
                               l2812 1657                                 l2804 1647  
                               l3380 046D                                 l3364 03A8  
                               l2558 088F                                 l2830 169E  
                               l2822 1685                                 l2814 1665  
                               l2398 0B52                                 l2574 1298  
                               l3278 01BA                                 l2672 1194  
                               l2912 172E                                 l2904 1715  
                               l2592 14D4                                 l3552 07B0  
                               l3392 04A1                                 l2842 13E0  
                               l2826 1690                                 l3394 04A4  
                               l3386 048D                                 l3378 0469  
                               l2860 13FF                                 l2924 1FCB  
                               l3556 07B9                                 l2870 141A  
                               l2942 11CB                                 l2678 11A8  
                               l3398 04B5                                 l2848 13EB  
                               l2936 11B3                                 l2784 1782  
                               l2874 1422                                 l2866 1411  
                               l2858 13F3                                 l2938 11BF  
                               l2946 11D4                                 l2890 16D4  
                               l2778 176F                                 l2884 16BE  
                               l2964 0D13                                 l2984 0E5F  
                               ?_log 004E                                 l2998 0EC5  
                               STR_1 1825                                 STR_2 1820  
                               STR_3 181B                                 u3005 167A  
                               _LATA 0016                                 _LATB 0017  
                               u2215 1515                                 u3015 1686  
                               _LATC 0018                                 u3105 140A  
                               u3115 1412                                 u2325 1FB1  
                               u3205 172F                                 u2255 152F  
                               u2175 14EF                                 u2335 1FB6  
                               u4015 02D7                                 u3305 0C60  
                               u2505 0B79                                 _T2PR 028D  
                               u2195 1508                                 u3075 13F6  
                               u3315 0C9E                                 u4115 0343  
                               u4035 02F5                                 u2605 08DF  
                               u3245 11B6                                 u3165 16E6  
                               u3325 0CED                                 u2445 0B53  
                               u4205 044D                                 u2615 08EF  
                               u3095 1400                                 u3175 16F6  
                               u2535 0B8C                                 u4215 0462  
                               u3265 11C5                                 u3185 1716  
                               u3425 0E6B                                 u4225 047F  
                               u4145 0383                                 u4065 0313  
                               _T4PR 0293                                 u2635 0917  
                               u3275 11CC                                 u3195 1725  
                               u3355 0D1F                                 u2475 0B66  
                               u4307 0185                                 u2900 120E  
                               u2645 091D                                 u3445 0EA3  
                               u3605 00A7                                 u4317 1614  
                               u3365 0D52                                 u4165 039A  
                               u2815 0884                                 u3455 0EB7  
                               u4327 126E                                 u3295 0C06  
                               u3375 0DAC                                 u4095 0325  
                               u4337 127E                                 u3545 0025  
                               u3385 0DEA                                 u2675 0933  
                               u2755 083F                                 u3635 00FC  
                               u3395 0E39                                 u3740 0965  
                               u2685 0939                                 u3485 0F42  
                               u3805 09DE                                 u3645 15B5  
                               u3655 15C1                                 u2785 0869  
                               u3665 15D1                                 u3835 1F8B  
                               u3675 15DD                                 u3845 1FA1  
                               u2885 1192                                 u3685 15EB  
                               u3855 1F75                                 u2895 11A6  
                               u2975 165A                                 u3865 1310  
                               u3875 1358                                 u2995 1666  
                               u3885 13A0                                 u3975 02B6  
                tempCalc@analogValue 0054                                 _WPUA 0F39  
                               _WPUB 0F44                                 _WPUC 0F4F  
                               _WPUE 0F65                                 _Imin 014D  
                               _Iref 00C0                                 _Iout 00CA  
                       __CFG_WRT$OFF 0000                        __CFG_FCMEN$ON 0000  
                               _Vref 00B8                                 _main 0148  
                       ___ftpack@arg 0070                         ___ftpack@exp 0073  
                               fsr0h 0005                                 fsr1h 0007  
                               indf0 0000                                 fsr0l 0004  
                               indf1 0001                                 fsr1l 0006  
                               btemp 007E                                 log@x 004E  
                       ?_readIAnalog 0026                        __CFG_BOREN$ON 0000  
                               start 0002                        __CFG_CSWEN$ON 0000  
                      __CFG_MCLRE$ON 0000                         ___ftmul@cntr 0035  
                       ___ftmul@sign 0036                         ?_readVAnalog 0026  
                   __end_of_LCDClear 11AD                         ___fttol@exp1 0044  
                              ??_log 0051                         ___fttol@lval 0040  
                       main@fastLoop 00DC  __size_of_Init_Battery_State_Machine 0064  
     __size_of_OSCILLATOR_Initialize 0009                     __end_of_LCDWrite 1187  
      __end_of_OSCILLATOR_Initialize 1EF6                      __end_of___aldiv 16A7  
                              _ADACQ 009D                                _ADACT 0099  
                              _ADCAP 009B                                ?_main 0070  
                              _ADCLK 0098                                _ADPCH 009E  
                              _ADREF 009A                      __end_of___awdiv 1427  
                              _ADPRE 009C                      __end_of___ftadd 0BF0  
                      __CFG_WDTE$OFF 0000                                _ADRPT 010D  
                    __end_of___ftdiv 1750                      __end_of___ftmul 095A  
                    ___awdiv@divisor 0076                      __end_of___ftsub 1FE1  
                    __end_of___fttol 08A6                                _T2CON 028E  
                              _LATA5 00B5                                _T4CON 0294  
                              _T2HLT 028F                                _T4HLT 0295  
                              _T2TMR 028C                                _T2RST 0291  
                    __end_of___lwmod 11D9                                _T4TMR 0292  
                              _T4RST 0297                      ___awdiv@counter 0020  
                              _OSCEN 0891                                _TRISA 0011  
                              _TRISB 0012                                _TRISC 0013  
                    _TMR4_Initialize 1F1C                                _Imode 0065  
             ?_Battery_State_Machine 0070                                _cc_cv 00CC  
                      ___awtoft@sign 007D                                _frexp 1286  
                              _fonts 1000                                _errno 00C8  
                      ___ftpack@sign 0074                                main@j 00ED  
                       main@slowLoop 00DD                                status 0003  
                              wtemp0 007E                      __initialization 07BC  
                        log@exponent 0052                         __end_of_main 07BC  
            __end_of_TMR2_Initialize 1F1C                            ??_ADCRead 0073  
                             ??_main 005F                        ___fttol@sign1 003F  
                          ??_LCDInit 0075               Battery_State_Machine@z 004A  
            LCDWrite@data_or_command 0072                               _ADCON0 0093  
                             _ADCON1 0094                               _ADCON2 0095  
                             _ADCON3 0096                               ?_frexp 0070  
                             _ADLTHH 010F                               _ADLTHL 010E  
                             _ADRESH 008D                               _ADRESL 008C  
                             _CCPR1H 030D                               _CCPR1L 030C  
                             _ADSTAT 0097                               _ADUTHH 0111  
                   ___awdiv@dividend 0078                               _ADUTHL 0110  
                   __end_of___awtoft 1162                               _ANSELA 0F38  
                             _ANSELB 0F43                               _ANSELC 0F4E  
                   __end_of___ftpack 153F                               _RB0PPS 0F18  
                             _RA6PPS 0F16                               _RA7PPS 0F17  
                     __CFG_WDTCCS$SC 0000                               _FVRCON 090C  
                             _OSCFRQ 0893                       __CFG_PWRTE$OFF 0000  
                     _LCDWriteString 1F3D                         _CCPTMRS0bits 021E  
                       _CCPTMRS1bits 021F                               ___ftge 12C1  
                          ??___aldiv 0078                               ___wmul 1FA8  
                          ??___awdiv 007A                            ??___ftadd 003D  
                     __CFG_STVREN$ON 0000                       _PWM_Initialize 0800  
                          ??___ftdiv 002D                            ??___ftmul 002D  
                          ??___ftsub 007E                            ??___fttol 003B  
                          ??___lwmod 0074                               _gotoXY 1F2A  
                             _button 006B              __end_of_TMR4_Initialize 1F2A  
                   ___awdiv@quotient 0022            readVAnalog@analog_channel 0079  
              ___ftmul@f3_as_product 0032                     __end_of_tempCalc 0AFA  
                       LCDWrite@data 0070                         LCDWriteInt@i 0054  
                       LCDWriteInt@j 0053                            ?_LCDClear 0070  
                  _SYSTEM_Initialize 124B                 __size_of_LCDWriteInt 00B9  
                   __end_oflog@coeff 181B              __end_of__initialization 07FD  
                         ___ftadd@f1 0037                           ___ftadd@f2 003A  
                         ___ftge@ff1 0037                           ___ftge@ff2 003A  
                          ?_LCDWrite 0070                   ?_SYSTEM_Initialize 0070  
             __end_of_LCDWriteString 1F51                         eval_poly@res 004B  
                         ___ftdiv@f1 002A                           ___ftdiv@f2 0027  
                         ___ftdiv@f3 0032                           ___awtoft@c 0024  
                         ___ftmul@f1 0027                           ___ftmul@f2 002A  
             __end_of_PWM_Initialize 081F                 __size_of_readIAnalog 014C  
                         ___ftsub@f1 0047                           ___ftsub@f2 0044  
                         ___fttol@f1 0037                       __pcstackCOMMON 0070  
                       __pidataBANK0 0007                         __pidataBANK2 1130  
                ??_SYSTEM_Initialize 004A                        __end_of_frexp 12C1  
                      __end_of_fonts 112F                            LCDWrite@d 0073  
                          LCDWrite@i 0074                 __size_of_readVAnalog 014C  
                 _PWM1_LoadDutyValue 1F66                     ?_TMR2_Initialize 0070  
                         _cc_cv_mode 0009          __size_of_PWM7_LoadDutyValue 0016  
                     main@efficiency 00D2                  ?_PWM1_LoadDutyValue 0070  
                  LCDWriteInt@F14392 0148                    _calculateCurrent0 12FD  
                  _calculateCurrent2 1345                    _calculateCurrent3 138D  
                            ??_frexp 0074            __end_of_SYSTEM_Initialize 1286  
                         __pbssBANK0 0061                           __pbssBANK1 00A0  
                         __pbssBANK2 0120                   ?_calculateCurrent0 0070  
                 ?_calculateCurrent2 0070                   ?_calculateCurrent3 0070  
                       _batteryState 0067                   __size_of_eval_poly 0060  
                         ??_LCDClear 0078                       main@faultCount 00D5  
                         ??_LCDWrite 0071                      ?_LCDWriteString 007C  
               ??_PWM1_LoadDutyValue 0072                  ??_calculateCurrent0 0045  
                ??_calculateCurrent2 0045                  ??_calculateCurrent3 0045  
                    ?_PWM_Initialize 0070                           __pmaintext 0148  
                            ?___ftge 0037                              ?___wmul 0070  
                    __CFG_PPS1WAY$ON 0000           __end_of_PWM6_LoadDutyValue 1F92  
                            ?_gotoXY 0075                              _ADCRead 1F51  
                   ?_TMR4_Initialize 0070                            ?___awtoft 0024  
                          ?___ftpack 0070                              _ADSTPTH 0113  
                            _ADSTPTL 0112             __CFG_SCANE$not_available 0000  
                __CFG_RSTOSC$HFINT32 0000              __size_of_ADC_Initialize 001F  
            ??_Battery_State_Machine 0045                       main@largerIOut 00E2  
                            _LCDInit 1210            __end_of_calculateCurrent0 1345  
          __end_of_calculateCurrent2 138D            __end_of_calculateCurrent3 13D5  
                            _OSCCON1 088D                              _OSCCON3 088F  
                            _OSCTUNE 0892                              _PWM6DCH 038D  
                            _PWM6DCL 038C                              _PWM7DCH 0391  
                            _PWM7DCL 0390                              _PWM6CON 038E  
                            _PWM7CON 0392                              _PPSLOCK 0E8F  
                     main@menuButton 00E4                       main@dutyCycle1 00E5  
                     main@dutyCycle6 00E9                       main@dutyCycle7 00EB  
                  main@tempFanOutput 00E7                           _lastButton 006A  
                          ?_tempCalc 0054                              _Itotals 0130  
                            ___aldiv 1625                      __size_of___ftge 003C  
                            ___awdiv 13D5                              ___ftadd 0AFA  
                         _readButton 15A3                              ___ftdiv 16A7  
                    __size_of___wmul 001B                              ___ftmul 08A6  
                            ___ftsub 1FC3                              ___fttol 081F  
                 main@displayRefresh 00DB                              ___lwmod 11AD  
                            _Vtotals 0120                      __size_of_gotoXY 0013  
                         ??___awtoft 007B                           ??___ftpack 0075  
                  __end_of_eval_poly 14DB                              __ptext1 0A13  
                            __ptext2 1750                              __ptext3 1286  
                            __ptext4 147B                              __ptext5 12C1  
                            __ptext6 1FC3                              __ptext7 0AFA  
                            __ptext8 0D3C                              __ptext9 0BF0  
                        ?_cc_cv_mode 0070                _OSCILLATOR_Initialize 1EED  
                          _T2CONbits 028E                              _current 00B0  
                       __size_of_log 00B0                       ADCRead@channel 0073  
                   ___aldiv@dividend 0074                            _T4CONbits 0294  
           ??_PIN_MANAGER_Initialize 0070           __size_of_SYSTEM_Initialize 003B  
                            clrloop0 1EF7                              _voltage 00A8  
       ??_Init_Battery_State_Machine 0045                 end_of_initialization 07FD  
              LCDWriteCharacter@base 007A                              gotoXY@x 0077  
                            gotoXY@y 0075                              init_ram 1F02  
                            initloop 1F03                           ??_tempCalc 007E  
                   ___aldiv@quotient 0022                    _LCDWriteCharacter 1427  
              __CFG_WDTCPS$WDTCPS_31 0000                   ?_LCDWriteCharacter 0070  
                 readVAnalog@channel 0026           __size_of_calculateCurrent0 0048  
         __size_of_calculateCurrent2 0048           __size_of_calculateCurrent3 0048  
                          _TRISAbits 0011                  ??_LCDWriteCharacter 0076  
                   __CFG_FEXTOSC$OFF 0000         PWM1_LoadDutyValue@dutyCycle1 0070  
                        _CCP1CONbits 030E                          ___ftdiv@exp 0035  
                __size_of_cc_cv_mode 013F                    __size_of_LCDClear 0026  
         LCDWriteCharacter@character 0079                    __size_of_LCDWrite 0025  
                        ___ftmul@exp 0031            __end_of_LCDWriteCharacter 147B  
                        ?_readButton 0070                            _Ichannels 0159  
          readIAnalog@analog_channel 0079                       __end_of___ftge 12FD  
                          _VHoldMode 0063                       __end_of___wmul 1FC3  
                     _ADC_Initialize 1FE1                       __end_of_gotoXY 1F3D  
             ?_OSCILLATOR_Initialize 0070                            _IminCount 00C4  
                start_initialization 07BC                           eval_poly@d 0047  
                         eval_poly@n 0049                           eval_poly@x 0044  
                  main@faultNotReset 00D7      __size_of_PIN_MANAGER_Initialize 0037  
                        __end_of_log 1800                        ??_LCDWriteInt 004A  
                   ??_LCDWriteString 0020                           frexp@value 0070  
                       _IsampleIndex 00D0                     ??_PWM_Initialize 0070  
                      ??_readIAnalog 0028                            _Vchannels 0151  
                   __CFG_LPBOREN$OFF 0000                        ??_readVAnalog 0028  
                           ??___ftge 003D                    tempCalc@steinhart 005C  
                           ??___wmul 0074               __end_of_ADC_Initialize 2000  
                      _tempCalc$1306 0059                          __pdataBANK0 006D  
                        __pdataBANK2 0151           __end_of_PWM7_LoadDutyValue 1FA8  
                           ??_gotoXY 0076                             ?_ADCRead 0070  
       PWM7_LoadDutyValue@dutyCycle7 0070                    __size_of___awtoft 0022  
                           ?_LCDInit 0070                    __size_of___ftpack 0064  
                        __pbssBIGRAM 21E8                     readVAnalog@value 007B  
     __size_of_Battery_State_Machine 0178        __end_of_Battery_State_Machine 1000  
                          ___latbits 0002                        __pcstackBANK0 0020  
                      __pcstackBANK1 00D2                   _PWM6_LoadDutyValue 1F7C  
           __size_of_TMR2_Initialize 000E   __end_of_Init_Battery_State_Machine 15A3  
         _Init_Battery_State_Machine 153F                  __size_of_readButton 0082  
                ?_PWM6_LoadDutyValue 0070                  __end_of_LCDWriteInt 0A13  
                        _batteryTemp 006D          __size_of_PWM1_LoadDutyValue 0016  
                          _main$1307 00D9               _PIN_MANAGER_Initialize 11D9  
         __size_of_LCDWriteCharacter 0054                             ?___aldiv 0070  
                __end_of_readIAnalog 0D3C                    __size_of_tempCalc 00E7  
                           ?___awdiv 0076                             ?___ftadd 0037  
                           ?___ftdiv 0027                             ?___ftmul 0027  
                           ?___ftsub 0044                             ?___fttol 0037  
                   LCDWriteInt@value 0045                             ?___lwmod 0070  
                    ?_ADC_Initialize 0070                 ??_PWM6_LoadDutyValue 0072  
                       ??_cc_cv_mode 0045                  __end_of_readVAnalog 0E88  
                          _eval_poly 147B             __size_of_TMR4_Initialize 000E  
                     __size_of_frexp 003B                             _T2CLKCON 0290  
                           _T4CLKCON 0296                          cc_cv_mode@z 004C  
                           _LCDClear 1187                      ___aldiv@divisor 0070  
                    ___aldiv@counter 0020                       ___wmul@product 0074  
                           _LATAbits 0016                             _LCDWrite 1162  
                          clear_ram0 1EF6                             _PIE0bits 0716  
                 __end_of_cc_cv_mode 0148                             _PIR4bits 0710  
                   readIAnalog@value 007B                            main@MPPT0 00E0  
                          main@MPPT1 00DE                     __size_of_ADCRead 0015  
                         _ADCON0bits 0093                    ___wmul@multiplier 0070  
                         ?_eval_poly 0044                     __size_of_LCDInit 003B  
                           _Ianalogs 00A0                          _LCDWriteInt 095A  
        Init_Battery_State_Machine@z 0049                    ??_TMR2_Initialize 0070  
                           _Isamples 21E8                          _readIAnalog 0BF0  
                          frexp@eptr 0073                             _Vanalogs 0140  
                        _readVAnalog 0D3C                         ??_readButton 0074  
            ??_OSCILLATOR_Initialize 0070                 LCDWriteInt@numPlaces 0048  
                   __size_of___aldiv 0082                     __size_of___awdiv 0052  
                   __size_of___ftadd 00F6                     __size_of___ftdiv 00A9  
                   __size_of___ftmul 00B4                     __size_of___ftsub 001E  
                   __size_of___fttol 0087                             _Vsamples 2378  
                   __size_of___lwmod 002C                          _readButtons 0061  
                           ___awtoft 1140                             ___ftpack 14DB  
                           __ptext10 1625                             __ptext11 15A3  
                           __ptext20 1F0E                             __ptext12 1F51  
                           __ptext21 0800                             __ptext13 0009  
                           __ptext30 1F7C                             __ptext22 11D9  
                           __ptext14 138D                             __ptext31 1F66  
                           __ptext23 1EED                             __ptext15 1345  
                           __ptext40 081F                             __ptext32 1F3D  
                           __ptext24 1210                             __ptext16 12FD  
                           __ptext41 08A6                             __ptext33 095A  
                           __ptext25 1187                             __ptext17 16A7  
                           __ptext42 1140                             __ptext34 11AD  
                           __ptext26 1F2A                             __ptext18 124B  
                           __ptext43 14DB                             __ptext35 13D5  
                           __ptext27 153F                             __ptext19 1F1C  
                           __ptext36 1427                             __ptext28 1FE1  
                           __ptext37 1FA8                             __ptext29 1F92  
                           __ptext38 1162                             __ptext39 0E88  
                    LCDWriteInt@sign 0049                            tempCalc@R 0056  
                 __end_of_readButton 1625                    ??_TMR4_Initialize 0070  
                      __size_of_main 0674                 __CFG_WDTCWS$WDTCWS_7 0000  
                           _tempCalc 0A13          PIN_MANAGER_Initialize@state 0070  
                           log@coeff 1800                          ??_eval_poly 007E  
                 _PWM7_LoadDutyValue 1F92          ?_Init_Battery_State_Machine 0070  
                   ___lwmod@dividend 0072                       LCDWriteInt@str 004E  
            ?_PIN_MANAGER_Initialize 0070                  ?_PWM7_LoadDutyValue 0070  
                  __CFG_CLKOUTEN$OFF 0000                          _PPSLOCKbits 0E8F  
                   ??_ADC_Initialize 0070         PWM6_LoadDutyValue@dutyCycle6 0070  
                      __pstringtext1 1000                        __pstringtext2 1800  
                      __pstringtext3 1820                        __pstringtext4 1825  
                      __pstringtext5 0000                 ??_PWM7_LoadDutyValue 0072  
                    ___lwmod@divisor 0070                      ___lwmod@counter 0075  
           LCDWriteString@characters 007C                         ___aldiv@sign 0021  
                 readIAnalog@channel 0026                _Battery_State_Machine 0E88  
     __end_of_PIN_MANAGER_Initialize 1210           __end_of_PWM1_LoadDutyValue 1F7C  
            __size_of_LCDWriteString 0014  
