

Microchip Technology PIC LITE Macro Assembler V1.38 build -256452561 
                                                                                               Wed Sep 06 18:11:18 2017

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	16F18855
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK2,global,class=CODE,delta=2
     5                           	psect	stringtext,global,class=STRCODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    10                           	psect	inittext,global,class=CODE,delta=2
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	text6,local,class=CODE,merge=1,delta=2
    22                           	psect	text7,local,class=CODE,merge=1,delta=2
    23                           	psect	text8,local,class=CODE,merge=1,delta=2
    24                           	psect	text9,local,class=CODE,merge=1,delta=2
    25                           	psect	text10,local,class=CODE,merge=1,delta=2
    26                           	psect	text11,local,class=CODE,merge=1,delta=2
    27                           	psect	text12,local,class=CODE,merge=1,delta=2
    28                           	psect	text13,local,class=CODE,merge=1,delta=2
    29                           	psect	text14,local,class=CODE,merge=1,delta=2
    30                           	psect	text15,local,class=CODE,merge=1,delta=2
    31                           	psect	text16,local,class=CODE,merge=1,delta=2
    32                           	psect	text17,local,class=CODE,merge=1,delta=2
    33                           	psect	text18,local,class=CODE,merge=1,delta=2
    34                           	psect	text19,local,class=CODE,merge=1,delta=2
    35                           	psect	text20,local,class=CODE,merge=1,delta=2
    36                           	psect	text21,local,class=CODE,merge=1,delta=2
    37                           	psect	text22,local,class=CODE,merge=1,delta=2
    38                           	psect	text23,local,class=CODE,merge=1,delta=2
    39                           	psect	text24,local,class=CODE,merge=1,delta=2
    40                           	psect	text25,local,class=CODE,merge=1,delta=2
    41                           	psect	text26,local,class=CODE,merge=1,delta=2
    42                           	psect	text27,local,class=CODE,merge=1,delta=2
    43                           	psect	text28,local,class=CODE,merge=1,delta=2
    44                           	psect	text29,local,class=CODE,merge=1,delta=2
    45                           	psect	text30,local,class=CODE,merge=1,delta=2
    46                           	psect	text31,local,class=CODE,merge=1,delta=2
    47                           	psect	text32,local,class=CODE,merge=1,delta=2
    48                           	psect	text33,local,class=CODE,merge=1,delta=2
    49                           	psect	text34,local,class=CODE,merge=1,delta=2
    50                           	psect	text35,local,class=CODE,merge=1,delta=2
    51                           	psect	text36,local,class=CODE,merge=1,delta=2
    52                           	psect	text37,local,class=CODE,merge=1,delta=2
    53                           	psect	text38,local,class=CODE,merge=1,delta=2
    54                           	psect	text39,local,class=CODE,merge=1,delta=2
    55                           	psect	text40,local,class=CODE,merge=1,delta=2
    56                           	psect	text41,local,class=CODE,merge=1,delta=2
    57                           	psect	text42,local,class=CODE,merge=1,delta=2
    58                           	dabs	1,0x620,48
    59                           	dabs	1,0x5BC,52
    60                           	dabs	1,0x238C,0,_samples
    61                           	dabs	1,0x7E,2
    62  0000                     	;# 
    63  0001                     	;# 
    64  0002                     	;# 
    65  0003                     	;# 
    66  0004                     	;# 
    67  0005                     	;# 
    68  0006                     	;# 
    69  0007                     	;# 
    70  0008                     	;# 
    71  0009                     	;# 
    72  000A                     	;# 
    73  000B                     	;# 
    74  000C                     	;# 
    75  000D                     	;# 
    76  000E                     	;# 
    77  0010                     	;# 
    78  0011                     	;# 
    79  0012                     	;# 
    80  0013                     	;# 
    81  0016                     	;# 
    82  0017                     	;# 
    83  0018                     	;# 
    84  001C                     	;# 
    85  001C                     	;# 
    86  001D                     	;# 
    87  001D                     	;# 
    88  001E                     	;# 
    89  001F                     	;# 
    90  008C                     	;# 
    91  008C                     	;# 
    92  008D                     	;# 
    93  008E                     	;# 
    94  008E                     	;# 
    95  008F                     	;# 
    96  0090                     	;# 
    97  0090                     	;# 
    98  0091                     	;# 
    99  0093                     	;# 
   100  0094                     	;# 
   101  0095                     	;# 
   102  0096                     	;# 
   103  0097                     	;# 
   104  0098                     	;# 
   105  0099                     	;# 
   106  009A                     	;# 
   107  009B                     	;# 
   108  009C                     	;# 
   109  009D                     	;# 
   110  009E                     	;# 
   111  010C                     	;# 
   112  010D                     	;# 
   113  010E                     	;# 
   114  010E                     	;# 
   115  010F                     	;# 
   116  0110                     	;# 
   117  0110                     	;# 
   118  0111                     	;# 
   119  0112                     	;# 
   120  0112                     	;# 
   121  0113                     	;# 
   122  0114                     	;# 
   123  0114                     	;# 
   124  0115                     	;# 
   125  0116                     	;# 
   126  0116                     	;# 
   127  0117                     	;# 
   128  0119                     	;# 
   129  0119                     	;# 
   130  0119                     	;# 
   131  011A                     	;# 
   132  011A                     	;# 
   133  011A                     	;# 
   134  011B                     	;# 
   135  011B                     	;# 
   136  011B                     	;# 
   137  011B                     	;# 
   138  011B                     	;# 
   139  011C                     	;# 
   140  011C                     	;# 
   141  011C                     	;# 
   142  011D                     	;# 
   143  011D                     	;# 
   144  011D                     	;# 
   145  011E                     	;# 
   146  011E                     	;# 
   147  011E                     	;# 
   148  011F                     	;# 
   149  011F                     	;# 
   150  011F                     	;# 
   151  011F                     	;# 
   152  011F                     	;# 
   153  018C                     	;# 
   154  018D                     	;# 
   155  018E                     	;# 
   156  018F                     	;# 
   157  0190                     	;# 
   158  0191                     	;# 
   159  0192                     	;# 
   160  0196                     	;# 
   161  0197                     	;# 
   162  0198                     	;# 
   163  0199                     	;# 
   164  019A                     	;# 
   165  019B                     	;# 
   166  019C                     	;# 
   167  020C                     	;# 
   168  020D                     	;# 
   169  020E                     	;# 
   170  020F                     	;# 
   171  020F                     	;# 
   172  0210                     	;# 
   173  0210                     	;# 
   174  0211                     	;# 
   175  0211                     	;# 
   176  0212                     	;# 
   177  0213                     	;# 
   178  0214                     	;# 
   179  0215                     	;# 
   180  0215                     	;# 
   181  0216                     	;# 
   182  0216                     	;# 
   183  0217                     	;# 
   184  0217                     	;# 
   185  0218                     	;# 
   186  0219                     	;# 
   187  021A                     	;# 
   188  021B                     	;# 
   189  021B                     	;# 
   190  021C                     	;# 
   191  021C                     	;# 
   192  021D                     	;# 
   193  021D                     	;# 
   194  021E                     	;# 
   195  021F                     	;# 
   196  028C                     	;# 
   197  028C                     	;# 
   198  028D                     	;# 
   199  028D                     	;# 
   200  028E                     	;# 
   201  028F                     	;# 
   202  0290                     	;# 
   203  0290                     	;# 
   204  0291                     	;# 
   205  0292                     	;# 
   206  0292                     	;# 
   207  0293                     	;# 
   208  0293                     	;# 
   209  0294                     	;# 
   210  0295                     	;# 
   211  0296                     	;# 
   212  0296                     	;# 
   213  0297                     	;# 
   214  0298                     	;# 
   215  0298                     	;# 
   216  0299                     	;# 
   217  0299                     	;# 
   218  029A                     	;# 
   219  029B                     	;# 
   220  029C                     	;# 
   221  029C                     	;# 
   222  029D                     	;# 
   223  030C                     	;# 
   224  030C                     	;# 
   225  030D                     	;# 
   226  030E                     	;# 
   227  030F                     	;# 
   228  0310                     	;# 
   229  0310                     	;# 
   230  0311                     	;# 
   231  0312                     	;# 
   232  0313                     	;# 
   233  0314                     	;# 
   234  0314                     	;# 
   235  0315                     	;# 
   236  0316                     	;# 
   237  0317                     	;# 
   238  0318                     	;# 
   239  0318                     	;# 
   240  0319                     	;# 
   241  031A                     	;# 
   242  031B                     	;# 
   243  031C                     	;# 
   244  031C                     	;# 
   245  031D                     	;# 
   246  031E                     	;# 
   247  031F                     	;# 
   248  038C                     	;# 
   249  038D                     	;# 
   250  038E                     	;# 
   251  0390                     	;# 
   252  0391                     	;# 
   253  0392                     	;# 
   254  040C                     	;# 
   255  040D                     	;# 
   256  040E                     	;# 
   257  040F                     	;# 
   258  0410                     	;# 
   259  0411                     	;# 
   260  0416                     	;# 
   261  0416                     	;# 
   262  0417                     	;# 
   263  0418                     	;# 
   264  0418                     	;# 
   265  0419                     	;# 
   266  041A                     	;# 
   267  041A                     	;# 
   268  041B                     	;# 
   269  041C                     	;# 
   270  041C                     	;# 
   271  041D                     	;# 
   272  041E                     	;# 
   273  041F                     	;# 
   274  048C                     	;# 
   275  048C                     	;# 
   276  048D                     	;# 
   277  048E                     	;# 
   278  048F                     	;# 
   279  048F                     	;# 
   280  0490                     	;# 
   281  0491                     	;# 
   282  0492                     	;# 
   283  0492                     	;# 
   284  0493                     	;# 
   285  0494                     	;# 
   286  0495                     	;# 
   287  0495                     	;# 
   288  0496                     	;# 
   289  0497                     	;# 
   290  0498                     	;# 
   291  0499                     	;# 
   292  049A                     	;# 
   293  049B                     	;# 
   294  049C                     	;# 
   295  049D                     	;# 
   296  050C                     	;# 
   297  050C                     	;# 
   298  050D                     	;# 
   299  050E                     	;# 
   300  050F                     	;# 
   301  050F                     	;# 
   302  0510                     	;# 
   303  0511                     	;# 
   304  0512                     	;# 
   305  0512                     	;# 
   306  0513                     	;# 
   307  0514                     	;# 
   308  0515                     	;# 
   309  0515                     	;# 
   310  0516                     	;# 
   311  0517                     	;# 
   312  0518                     	;# 
   313  0519                     	;# 
   314  051A                     	;# 
   315  051B                     	;# 
   316  051C                     	;# 
   317  051D                     	;# 
   318  058C                     	;# 
   319  058C                     	;# 
   320  058D                     	;# 
   321  058E                     	;# 
   322  058F                     	;# 
   323  058F                     	;# 
   324  0590                     	;# 
   325  0591                     	;# 
   326  0592                     	;# 
   327  0593                     	;# 
   328  060C                     	;# 
   329  060D                     	;# 
   330  060E                     	;# 
   331  060F                     	;# 
   332  0610                     	;# 
   333  0611                     	;# 
   334  0612                     	;# 
   335  0613                     	;# 
   336  0614                     	;# 
   337  0616                     	;# 
   338  0617                     	;# 
   339  0618                     	;# 
   340  0619                     	;# 
   341  061A                     	;# 
   342  061B                     	;# 
   343  061C                     	;# 
   344  061D                     	;# 
   345  061E                     	;# 
   346  068C                     	;# 
   347  068D                     	;# 
   348  068E                     	;# 
   349  068F                     	;# 
   350  0690                     	;# 
   351  0691                     	;# 
   352  0692                     	;# 
   353  0693                     	;# 
   354  0694                     	;# 
   355  070C                     	;# 
   356  070D                     	;# 
   357  070E                     	;# 
   358  070F                     	;# 
   359  0710                     	;# 
   360  0711                     	;# 
   361  0712                     	;# 
   362  0713                     	;# 
   363  0714                     	;# 
   364  0716                     	;# 
   365  0717                     	;# 
   366  0718                     	;# 
   367  0719                     	;# 
   368  071A                     	;# 
   369  071B                     	;# 
   370  071C                     	;# 
   371  071D                     	;# 
   372  071E                     	;# 
   373  0796                     	;# 
   374  0797                     	;# 
   375  0798                     	;# 
   376  0799                     	;# 
   377  079A                     	;# 
   378  079B                     	;# 
   379  080C                     	;# 
   380  080D                     	;# 
   381  080E                     	;# 
   382  080F                     	;# 
   383  0810                     	;# 
   384  0811                     	;# 
   385  0812                     	;# 
   386  0813                     	;# 
   387  0814                     	;# 
   388  081A                     	;# 
   389  081B                     	;# 
   390  081C                     	;# 
   391  081D                     	;# 
   392  081E                     	;# 
   393  081F                     	;# 
   394  088C                     	;# 
   395  088D                     	;# 
   396  088E                     	;# 
   397  088F                     	;# 
   398  0890                     	;# 
   399  0891                     	;# 
   400  0892                     	;# 
   401  0893                     	;# 
   402  0895                     	;# 
   403  0896                     	;# 
   404  0897                     	;# 
   405  0898                     	;# 
   406  0899                     	;# 
   407  089A                     	;# 
   408  089B                     	;# 
   409  090C                     	;# 
   410  090E                     	;# 
   411  090F                     	;# 
   412  091F                     	;# 
   413  091F                     	;# 
   414  098F                     	;# 
   415  098F                     	;# 
   416  0990                     	;# 
   417  0991                     	;# 
   418  0992                     	;# 
   419  0993                     	;# 
   420  0994                     	;# 
   421  0995                     	;# 
   422  0996                     	;# 
   423  0997                     	;# 
   424  0E0F                     	;# 
   425  0E10                     	;# 
   426  0E11                     	;# 
   427  0E12                     	;# 
   428  0E13                     	;# 
   429  0E14                     	;# 
   430  0E15                     	;# 
   431  0E16                     	;# 
   432  0E17                     	;# 
   433  0E18                     	;# 
   434  0E19                     	;# 
   435  0E1A                     	;# 
   436  0E1B                     	;# 
   437  0E1C                     	;# 
   438  0E1D                     	;# 
   439  0E1E                     	;# 
   440  0E1F                     	;# 
   441  0E20                     	;# 
   442  0E21                     	;# 
   443  0E22                     	;# 
   444  0E23                     	;# 
   445  0E24                     	;# 
   446  0E25                     	;# 
   447  0E26                     	;# 
   448  0E27                     	;# 
   449  0E28                     	;# 
   450  0E29                     	;# 
   451  0E2A                     	;# 
   452  0E2B                     	;# 
   453  0E2C                     	;# 
   454  0E2D                     	;# 
   455  0E2E                     	;# 
   456  0E2F                     	;# 
   457  0E30                     	;# 
   458  0E31                     	;# 
   459  0E32                     	;# 
   460  0E33                     	;# 
   461  0E34                     	;# 
   462  0E35                     	;# 
   463  0E36                     	;# 
   464  0E37                     	;# 
   465  0E8F                     	;# 
   466  0E90                     	;# 
   467  0E91                     	;# 
   468  0E92                     	;# 
   469  0E93                     	;# 
   470  0E94                     	;# 
   471  0E95                     	;# 
   472  0E96                     	;# 
   473  0E97                     	;# 
   474  0E9C                     	;# 
   475  0E9D                     	;# 
   476  0E9E                     	;# 
   477  0EA1                     	;# 
   478  0EA2                     	;# 
   479  0EA3                     	;# 
   480  0EA4                     	;# 
   481  0EA5                     	;# 
   482  0EA9                     	;# 
   483  0EAA                     	;# 
   484  0EAB                     	;# 
   485  0EAC                     	;# 
   486  0EB1                     	;# 
   487  0EB2                     	;# 
   488  0EB3                     	;# 
   489  0EB8                     	;# 
   490  0EB9                     	;# 
   491  0EBA                     	;# 
   492  0EBB                     	;# 
   493  0EBC                     	;# 
   494  0EBD                     	;# 
   495  0EBE                     	;# 
   496  0EC3                     	;# 
   497  0EC5                     	;# 
   498  0EC6                     	;# 
   499  0EC7                     	;# 
   500  0EC8                     	;# 
   501  0EC9                     	;# 
   502  0ECA                     	;# 
   503  0ECB                     	;# 
   504  0ECC                     	;# 
   505  0F10                     	;# 
   506  0F11                     	;# 
   507  0F12                     	;# 
   508  0F13                     	;# 
   509  0F14                     	;# 
   510  0F15                     	;# 
   511  0F16                     	;# 
   512  0F17                     	;# 
   513  0F18                     	;# 
   514  0F19                     	;# 
   515  0F1A                     	;# 
   516  0F1B                     	;# 
   517  0F1C                     	;# 
   518  0F1D                     	;# 
   519  0F1E                     	;# 
   520  0F1F                     	;# 
   521  0F20                     	;# 
   522  0F21                     	;# 
   523  0F22                     	;# 
   524  0F23                     	;# 
   525  0F24                     	;# 
   526  0F25                     	;# 
   527  0F26                     	;# 
   528  0F27                     	;# 
   529  0F38                     	;# 
   530  0F39                     	;# 
   531  0F3A                     	;# 
   532  0F3B                     	;# 
   533  0F3C                     	;# 
   534  0F3D                     	;# 
   535  0F3E                     	;# 
   536  0F3F                     	;# 
   537  0F40                     	;# 
   538  0F41                     	;# 
   539  0F43                     	;# 
   540  0F44                     	;# 
   541  0F45                     	;# 
   542  0F46                     	;# 
   543  0F47                     	;# 
   544  0F48                     	;# 
   545  0F49                     	;# 
   546  0F4A                     	;# 
   547  0F4B                     	;# 
   548  0F4C                     	;# 
   549  0F4E                     	;# 
   550  0F4F                     	;# 
   551  0F50                     	;# 
   552  0F51                     	;# 
   553  0F52                     	;# 
   554  0F53                     	;# 
   555  0F54                     	;# 
   556  0F55                     	;# 
   557  0F56                     	;# 
   558  0F57                     	;# 
   559  0F65                     	;# 
   560  0F68                     	;# 
   561  0F69                     	;# 
   562  0F6A                     	;# 
   563  0F6B                     	;# 
   564  0FE4                     	;# 
   565  0FE5                     	;# 
   566  0FE6                     	;# 
   567  0FE7                     	;# 
   568  0FE8                     	;# 
   569  0FE9                     	;# 
   570  0FEA                     	;# 
   571  0FEB                     	;# 
   572  0FED                     	;# 
   573  0FEE                     	;# 
   574  0FEF                     	;# 
   575  0000                     	;# 
   576  0001                     	;# 
   577  0002                     	;# 
   578  0003                     	;# 
   579  0004                     	;# 
   580  0005                     	;# 
   581  0006                     	;# 
   582  0007                     	;# 
   583  0008                     	;# 
   584  0009                     	;# 
   585  000A                     	;# 
   586  000B                     	;# 
   587  000C                     	;# 
   588  000D                     	;# 
   589  000E                     	;# 
   590  0010                     	;# 
   591  0011                     	;# 
   592  0012                     	;# 
   593  0013                     	;# 
   594  0016                     	;# 
   595  0017                     	;# 
   596  0018                     	;# 
   597  001C                     	;# 
   598  001C                     	;# 
   599  001D                     	;# 
   600  001D                     	;# 
   601  001E                     	;# 
   602  001F                     	;# 
   603  008C                     	;# 
   604  008C                     	;# 
   605  008D                     	;# 
   606  008E                     	;# 
   607  008E                     	;# 
   608  008F                     	;# 
   609  0090                     	;# 
   610  0090                     	;# 
   611  0091                     	;# 
   612  0093                     	;# 
   613  0094                     	;# 
   614  0095                     	;# 
   615  0096                     	;# 
   616  0097                     	;# 
   617  0098                     	;# 
   618  0099                     	;# 
   619  009A                     	;# 
   620  009B                     	;# 
   621  009C                     	;# 
   622  009D                     	;# 
   623  009E                     	;# 
   624  010C                     	;# 
   625  010D                     	;# 
   626  010E                     	;# 
   627  010E                     	;# 
   628  010F                     	;# 
   629  0110                     	;# 
   630  0110                     	;# 
   631  0111                     	;# 
   632  0112                     	;# 
   633  0112                     	;# 
   634  0113                     	;# 
   635  0114                     	;# 
   636  0114                     	;# 
   637  0115                     	;# 
   638  0116                     	;# 
   639  0116                     	;# 
   640  0117                     	;# 
   641  0119                     	;# 
   642  0119                     	;# 
   643  0119                     	;# 
   644  011A                     	;# 
   645  011A                     	;# 
   646  011A                     	;# 
   647  011B                     	;# 
   648  011B                     	;# 
   649  011B                     	;# 
   650  011B                     	;# 
   651  011B                     	;# 
   652  011C                     	;# 
   653  011C                     	;# 
   654  011C                     	;# 
   655  011D                     	;# 
   656  011D                     	;# 
   657  011D                     	;# 
   658  011E                     	;# 
   659  011E                     	;# 
   660  011E                     	;# 
   661  011F                     	;# 
   662  011F                     	;# 
   663  011F                     	;# 
   664  011F                     	;# 
   665  011F                     	;# 
   666  018C                     	;# 
   667  018D                     	;# 
   668  018E                     	;# 
   669  018F                     	;# 
   670  0190                     	;# 
   671  0191                     	;# 
   672  0192                     	;# 
   673  0196                     	;# 
   674  0197                     	;# 
   675  0198                     	;# 
   676  0199                     	;# 
   677  019A                     	;# 
   678  019B                     	;# 
   679  019C                     	;# 
   680  020C                     	;# 
   681  020D                     	;# 
   682  020E                     	;# 
   683  020F                     	;# 
   684  020F                     	;# 
   685  0210                     	;# 
   686  0210                     	;# 
   687  0211                     	;# 
   688  0211                     	;# 
   689  0212                     	;# 
   690  0213                     	;# 
   691  0214                     	;# 
   692  0215                     	;# 
   693  0215                     	;# 
   694  0216                     	;# 
   695  0216                     	;# 
   696  0217                     	;# 
   697  0217                     	;# 
   698  0218                     	;# 
   699  0219                     	;# 
   700  021A                     	;# 
   701  021B                     	;# 
   702  021B                     	;# 
   703  021C                     	;# 
   704  021C                     	;# 
   705  021D                     	;# 
   706  021D                     	;# 
   707  021E                     	;# 
   708  021F                     	;# 
   709  028C                     	;# 
   710  028C                     	;# 
   711  028D                     	;# 
   712  028D                     	;# 
   713  028E                     	;# 
   714  028F                     	;# 
   715  0290                     	;# 
   716  0290                     	;# 
   717  0291                     	;# 
   718  0292                     	;# 
   719  0292                     	;# 
   720  0293                     	;# 
   721  0293                     	;# 
   722  0294                     	;# 
   723  0295                     	;# 
   724  0296                     	;# 
   725  0296                     	;# 
   726  0297                     	;# 
   727  0298                     	;# 
   728  0298                     	;# 
   729  0299                     	;# 
   730  0299                     	;# 
   731  029A                     	;# 
   732  029B                     	;# 
   733  029C                     	;# 
   734  029C                     	;# 
   735  029D                     	;# 
   736  030C                     	;# 
   737  030C                     	;# 
   738  030D                     	;# 
   739  030E                     	;# 
   740  030F                     	;# 
   741  0310                     	;# 
   742  0310                     	;# 
   743  0311                     	;# 
   744  0312                     	;# 
   745  0313                     	;# 
   746  0314                     	;# 
   747  0314                     	;# 
   748  0315                     	;# 
   749  0316                     	;# 
   750  0317                     	;# 
   751  0318                     	;# 
   752  0318                     	;# 
   753  0319                     	;# 
   754  031A                     	;# 
   755  031B                     	;# 
   756  031C                     	;# 
   757  031C                     	;# 
   758  031D                     	;# 
   759  031E                     	;# 
   760  031F                     	;# 
   761  038C                     	;# 
   762  038D                     	;# 
   763  038E                     	;# 
   764  0390                     	;# 
   765  0391                     	;# 
   766  0392                     	;# 
   767  040C                     	;# 
   768  040D                     	;# 
   769  040E                     	;# 
   770  040F                     	;# 
   771  0410                     	;# 
   772  0411                     	;# 
   773  0416                     	;# 
   774  0416                     	;# 
   775  0417                     	;# 
   776  0418                     	;# 
   777  0418                     	;# 
   778  0419                     	;# 
   779  041A                     	;# 
   780  041A                     	;# 
   781  041B                     	;# 
   782  041C                     	;# 
   783  041C                     	;# 
   784  041D                     	;# 
   785  041E                     	;# 
   786  041F                     	;# 
   787  048C                     	;# 
   788  048C                     	;# 
   789  048D                     	;# 
   790  048E                     	;# 
   791  048F                     	;# 
   792  048F                     	;# 
   793  0490                     	;# 
   794  0491                     	;# 
   795  0492                     	;# 
   796  0492                     	;# 
   797  0493                     	;# 
   798  0494                     	;# 
   799  0495                     	;# 
   800  0495                     	;# 
   801  0496                     	;# 
   802  0497                     	;# 
   803  0498                     	;# 
   804  0499                     	;# 
   805  049A                     	;# 
   806  049B                     	;# 
   807  049C                     	;# 
   808  049D                     	;# 
   809  050C                     	;# 
   810  050C                     	;# 
   811  050D                     	;# 
   812  050E                     	;# 
   813  050F                     	;# 
   814  050F                     	;# 
   815  0510                     	;# 
   816  0511                     	;# 
   817  0512                     	;# 
   818  0512                     	;# 
   819  0513                     	;# 
   820  0514                     	;# 
   821  0515                     	;# 
   822  0515                     	;# 
   823  0516                     	;# 
   824  0517                     	;# 
   825  0518                     	;# 
   826  0519                     	;# 
   827  051A                     	;# 
   828  051B                     	;# 
   829  051C                     	;# 
   830  051D                     	;# 
   831  058C                     	;# 
   832  058C                     	;# 
   833  058D                     	;# 
   834  058E                     	;# 
   835  058F                     	;# 
   836  058F                     	;# 
   837  0590                     	;# 
   838  0591                     	;# 
   839  0592                     	;# 
   840  0593                     	;# 
   841  060C                     	;# 
   842  060D                     	;# 
   843  060E                     	;# 
   844  060F                     	;# 
   845  0610                     	;# 
   846  0611                     	;# 
   847  0612                     	;# 
   848  0613                     	;# 
   849  0614                     	;# 
   850  0616                     	;# 
   851  0617                     	;# 
   852  0618                     	;# 
   853  0619                     	;# 
   854  061A                     	;# 
   855  061B                     	;# 
   856  061C                     	;# 
   857  061D                     	;# 
   858  061E                     	;# 
   859  068C                     	;# 
   860  068D                     	;# 
   861  068E                     	;# 
   862  068F                     	;# 
   863  0690                     	;# 
   864  0691                     	;# 
   865  0692                     	;# 
   866  0693                     	;# 
   867  0694                     	;# 
   868  070C                     	;# 
   869  070D                     	;# 
   870  070E                     	;# 
   871  070F                     	;# 
   872  0710                     	;# 
   873  0711                     	;# 
   874  0712                     	;# 
   875  0713                     	;# 
   876  0714                     	;# 
   877  0716                     	;# 
   878  0717                     	;# 
   879  0718                     	;# 
   880  0719                     	;# 
   881  071A                     	;# 
   882  071B                     	;# 
   883  071C                     	;# 
   884  071D                     	;# 
   885  071E                     	;# 
   886  0796                     	;# 
   887  0797                     	;# 
   888  0798                     	;# 
   889  0799                     	;# 
   890  079A                     	;# 
   891  079B                     	;# 
   892  080C                     	;# 
   893  080D                     	;# 
   894  080E                     	;# 
   895  080F                     	;# 
   896  0810                     	;# 
   897  0811                     	;# 
   898  0812                     	;# 
   899  0813                     	;# 
   900  0814                     	;# 
   901  081A                     	;# 
   902  081B                     	;# 
   903  081C                     	;# 
   904  081D                     	;# 
   905  081E                     	;# 
   906  081F                     	;# 
   907  088C                     	;# 
   908  088D                     	;# 
   909  088E                     	;# 
   910  088F                     	;# 
   911  0890                     	;# 
   912  0891                     	;# 
   913  0892                     	;# 
   914  0893                     	;# 
   915  0895                     	;# 
   916  0896                     	;# 
   917  0897                     	;# 
   918  0898                     	;# 
   919  0899                     	;# 
   920  089A                     	;# 
   921  089B                     	;# 
   922  090C                     	;# 
   923  090E                     	;# 
   924  090F                     	;# 
   925  091F                     	;# 
   926  091F                     	;# 
   927  098F                     	;# 
   928  098F                     	;# 
   929  0990                     	;# 
   930  0991                     	;# 
   931  0992                     	;# 
   932  0993                     	;# 
   933  0994                     	;# 
   934  0995                     	;# 
   935  0996                     	;# 
   936  0997                     	;# 
   937  0E0F                     	;# 
   938  0E10                     	;# 
   939  0E11                     	;# 
   940  0E12                     	;# 
   941  0E13                     	;# 
   942  0E14                     	;# 
   943  0E15                     	;# 
   944  0E16                     	;# 
   945  0E17                     	;# 
   946  0E18                     	;# 
   947  0E19                     	;# 
   948  0E1A                     	;# 
   949  0E1B                     	;# 
   950  0E1C                     	;# 
   951  0E1D                     	;# 
   952  0E1E                     	;# 
   953  0E1F                     	;# 
   954  0E20                     	;# 
   955  0E21                     	;# 
   956  0E22                     	;# 
   957  0E23                     	;# 
   958  0E24                     	;# 
   959  0E25                     	;# 
   960  0E26                     	;# 
   961  0E27                     	;# 
   962  0E28                     	;# 
   963  0E29                     	;# 
   964  0E2A                     	;# 
   965  0E2B                     	;# 
   966  0E2C                     	;# 
   967  0E2D                     	;# 
   968  0E2E                     	;# 
   969  0E2F                     	;# 
   970  0E30                     	;# 
   971  0E31                     	;# 
   972  0E32                     	;# 
   973  0E33                     	;# 
   974  0E34                     	;# 
   975  0E35                     	;# 
   976  0E36                     	;# 
   977  0E37                     	;# 
   978  0E8F                     	;# 
   979  0E90                     	;# 
   980  0E91                     	;# 
   981  0E92                     	;# 
   982  0E93                     	;# 
   983  0E94                     	;# 
   984  0E95                     	;# 
   985  0E96                     	;# 
   986  0E97                     	;# 
   987  0E9C                     	;# 
   988  0E9D                     	;# 
   989  0E9E                     	;# 
   990  0EA1                     	;# 
   991  0EA2                     	;# 
   992  0EA3                     	;# 
   993  0EA4                     	;# 
   994  0EA5                     	;# 
   995  0EA9                     	;# 
   996  0EAA                     	;# 
   997  0EAB                     	;# 
   998  0EAC                     	;# 
   999  0EB1                     	;# 
  1000  0EB2                     	;# 
  1001  0EB3                     	;# 
  1002  0EB8                     	;# 
  1003  0EB9                     	;# 
  1004  0EBA                     	;# 
  1005  0EBB                     	;# 
  1006  0EBC                     	;# 
  1007  0EBD                     	;# 
  1008  0EBE                     	;# 
  1009  0EC3                     	;# 
  1010  0EC5                     	;# 
  1011  0EC6                     	;# 
  1012  0EC7                     	;# 
  1013  0EC8                     	;# 
  1014  0EC9                     	;# 
  1015  0ECA                     	;# 
  1016  0ECB                     	;# 
  1017  0ECC                     	;# 
  1018  0F10                     	;# 
  1019  0F11                     	;# 
  1020  0F12                     	;# 
  1021  0F13                     	;# 
  1022  0F14                     	;# 
  1023  0F15                     	;# 
  1024  0F16                     	;# 
  1025  0F17                     	;# 
  1026  0F18                     	;# 
  1027  0F19                     	;# 
  1028  0F1A                     	;# 
  1029  0F1B                     	;# 
  1030  0F1C                     	;# 
  1031  0F1D                     	;# 
  1032  0F1E                     	;# 
  1033  0F1F                     	;# 
  1034  0F20                     	;# 
  1035  0F21                     	;# 
  1036  0F22                     	;# 
  1037  0F23                     	;# 
  1038  0F24                     	;# 
  1039  0F25                     	;# 
  1040  0F26                     	;# 
  1041  0F27                     	;# 
  1042  0F38                     	;# 
  1043  0F39                     	;# 
  1044  0F3A                     	;# 
  1045  0F3B                     	;# 
  1046  0F3C                     	;# 
  1047  0F3D                     	;# 
  1048  0F3E                     	;# 
  1049  0F3F                     	;# 
  1050  0F40                     	;# 
  1051  0F41                     	;# 
  1052  0F43                     	;# 
  1053  0F44                     	;# 
  1054  0F45                     	;# 
  1055  0F46                     	;# 
  1056  0F47                     	;# 
  1057  0F48                     	;# 
  1058  0F49                     	;# 
  1059  0F4A                     	;# 
  1060  0F4B                     	;# 
  1061  0F4C                     	;# 
  1062  0F4E                     	;# 
  1063  0F4F                     	;# 
  1064  0F50                     	;# 
  1065  0F51                     	;# 
  1066  0F52                     	;# 
  1067  0F53                     	;# 
  1068  0F54                     	;# 
  1069  0F55                     	;# 
  1070  0F56                     	;# 
  1071  0F57                     	;# 
  1072  0F65                     	;# 
  1073  0F68                     	;# 
  1074  0F69                     	;# 
  1075  0F6A                     	;# 
  1076  0F6B                     	;# 
  1077  0FE4                     	;# 
  1078  0FE5                     	;# 
  1079  0FE6                     	;# 
  1080  0FE7                     	;# 
  1081  0FE8                     	;# 
  1082  0FE9                     	;# 
  1083  0FEA                     	;# 
  1084  0FEB                     	;# 
  1085  0FED                     	;# 
  1086  0FEE                     	;# 
  1087  0FEF                     	;# 
  1088  0000                     	;# 
  1089  0001                     	;# 
  1090  0002                     	;# 
  1091  0003                     	;# 
  1092  0004                     	;# 
  1093  0005                     	;# 
  1094  0006                     	;# 
  1095  0007                     	;# 
  1096  0008                     	;# 
  1097  0009                     	;# 
  1098  000A                     	;# 
  1099  000B                     	;# 
  1100  000C                     	;# 
  1101  000D                     	;# 
  1102  000E                     	;# 
  1103  0010                     	;# 
  1104  0011                     	;# 
  1105  0012                     	;# 
  1106  0013                     	;# 
  1107  0016                     	;# 
  1108  0017                     	;# 
  1109  0018                     	;# 
  1110  001C                     	;# 
  1111  001C                     	;# 
  1112  001D                     	;# 
  1113  001D                     	;# 
  1114  001E                     	;# 
  1115  001F                     	;# 
  1116  008C                     	;# 
  1117  008C                     	;# 
  1118  008D                     	;# 
  1119  008E                     	;# 
  1120  008E                     	;# 
  1121  008F                     	;# 
  1122  0090                     	;# 
  1123  0090                     	;# 
  1124  0091                     	;# 
  1125  0093                     	;# 
  1126  0094                     	;# 
  1127  0095                     	;# 
  1128  0096                     	;# 
  1129  0097                     	;# 
  1130  0098                     	;# 
  1131  0099                     	;# 
  1132  009A                     	;# 
  1133  009B                     	;# 
  1134  009C                     	;# 
  1135  009D                     	;# 
  1136  009E                     	;# 
  1137  010C                     	;# 
  1138  010D                     	;# 
  1139  010E                     	;# 
  1140  010E                     	;# 
  1141  010F                     	;# 
  1142  0110                     	;# 
  1143  0110                     	;# 
  1144  0111                     	;# 
  1145  0112                     	;# 
  1146  0112                     	;# 
  1147  0113                     	;# 
  1148  0114                     	;# 
  1149  0114                     	;# 
  1150  0115                     	;# 
  1151  0116                     	;# 
  1152  0116                     	;# 
  1153  0117                     	;# 
  1154  0119                     	;# 
  1155  0119                     	;# 
  1156  0119                     	;# 
  1157  011A                     	;# 
  1158  011A                     	;# 
  1159  011A                     	;# 
  1160  011B                     	;# 
  1161  011B                     	;# 
  1162  011B                     	;# 
  1163  011B                     	;# 
  1164  011B                     	;# 
  1165  011C                     	;# 
  1166  011C                     	;# 
  1167  011C                     	;# 
  1168  011D                     	;# 
  1169  011D                     	;# 
  1170  011D                     	;# 
  1171  011E                     	;# 
  1172  011E                     	;# 
  1173  011E                     	;# 
  1174  011F                     	;# 
  1175  011F                     	;# 
  1176  011F                     	;# 
  1177  011F                     	;# 
  1178  011F                     	;# 
  1179  018C                     	;# 
  1180  018D                     	;# 
  1181  018E                     	;# 
  1182  018F                     	;# 
  1183  0190                     	;# 
  1184  0191                     	;# 
  1185  0192                     	;# 
  1186  0196                     	;# 
  1187  0197                     	;# 
  1188  0198                     	;# 
  1189  0199                     	;# 
  1190  019A                     	;# 
  1191  019B                     	;# 
  1192  019C                     	;# 
  1193  020C                     	;# 
  1194  020D                     	;# 
  1195  020E                     	;# 
  1196  020F                     	;# 
  1197  020F                     	;# 
  1198  0210                     	;# 
  1199  0210                     	;# 
  1200  0211                     	;# 
  1201  0211                     	;# 
  1202  0212                     	;# 
  1203  0213                     	;# 
  1204  0214                     	;# 
  1205  0215                     	;# 
  1206  0215                     	;# 
  1207  0216                     	;# 
  1208  0216                     	;# 
  1209  0217                     	;# 
  1210  0217                     	;# 
  1211  0218                     	;# 
  1212  0219                     	;# 
  1213  021A                     	;# 
  1214  021B                     	;# 
  1215  021B                     	;# 
  1216  021C                     	;# 
  1217  021C                     	;# 
  1218  021D                     	;# 
  1219  021D                     	;# 
  1220  021E                     	;# 
  1221  021F                     	;# 
  1222  028C                     	;# 
  1223  028C                     	;# 
  1224  028D                     	;# 
  1225  028D                     	;# 
  1226  028E                     	;# 
  1227  028F                     	;# 
  1228  0290                     	;# 
  1229  0290                     	;# 
  1230  0291                     	;# 
  1231  0292                     	;# 
  1232  0292                     	;# 
  1233  0293                     	;# 
  1234  0293                     	;# 
  1235  0294                     	;# 
  1236  0295                     	;# 
  1237  0296                     	;# 
  1238  0296                     	;# 
  1239  0297                     	;# 
  1240  0298                     	;# 
  1241  0298                     	;# 
  1242  0299                     	;# 
  1243  0299                     	;# 
  1244  029A                     	;# 
  1245  029B                     	;# 
  1246  029C                     	;# 
  1247  029C                     	;# 
  1248  029D                     	;# 
  1249  030C                     	;# 
  1250  030C                     	;# 
  1251  030D                     	;# 
  1252  030E                     	;# 
  1253  030F                     	;# 
  1254  0310                     	;# 
  1255  0310                     	;# 
  1256  0311                     	;# 
  1257  0312                     	;# 
  1258  0313                     	;# 
  1259  0314                     	;# 
  1260  0314                     	;# 
  1261  0315                     	;# 
  1262  0316                     	;# 
  1263  0317                     	;# 
  1264  0318                     	;# 
  1265  0318                     	;# 
  1266  0319                     	;# 
  1267  031A                     	;# 
  1268  031B                     	;# 
  1269  031C                     	;# 
  1270  031C                     	;# 
  1271  031D                     	;# 
  1272  031E                     	;# 
  1273  031F                     	;# 
  1274  038C                     	;# 
  1275  038D                     	;# 
  1276  038E                     	;# 
  1277  0390                     	;# 
  1278  0391                     	;# 
  1279  0392                     	;# 
  1280  040C                     	;# 
  1281  040D                     	;# 
  1282  040E                     	;# 
  1283  040F                     	;# 
  1284  0410                     	;# 
  1285  0411                     	;# 
  1286  0416                     	;# 
  1287  0416                     	;# 
  1288  0417                     	;# 
  1289  0418                     	;# 
  1290  0418                     	;# 
  1291  0419                     	;# 
  1292  041A                     	;# 
  1293  041A                     	;# 
  1294  041B                     	;# 
  1295  041C                     	;# 
  1296  041C                     	;# 
  1297  041D                     	;# 
  1298  041E                     	;# 
  1299  041F                     	;# 
  1300  048C                     	;# 
  1301  048C                     	;# 
  1302  048D                     	;# 
  1303  048E                     	;# 
  1304  048F                     	;# 
  1305  048F                     	;# 
  1306  0490                     	;# 
  1307  0491                     	;# 
  1308  0492                     	;# 
  1309  0492                     	;# 
  1310  0493                     	;# 
  1311  0494                     	;# 
  1312  0495                     	;# 
  1313  0495                     	;# 
  1314  0496                     	;# 
  1315  0497                     	;# 
  1316  0498                     	;# 
  1317  0499                     	;# 
  1318  049A                     	;# 
  1319  049B                     	;# 
  1320  049C                     	;# 
  1321  049D                     	;# 
  1322  050C                     	;# 
  1323  050C                     	;# 
  1324  050D                     	;# 
  1325  050E                     	;# 
  1326  050F                     	;# 
  1327  050F                     	;# 
  1328  0510                     	;# 
  1329  0511                     	;# 
  1330  0512                     	;# 
  1331  0512                     	;# 
  1332  0513                     	;# 
  1333  0514                     	;# 
  1334  0515                     	;# 
  1335  0515                     	;# 
  1336  0516                     	;# 
  1337  0517                     	;# 
  1338  0518                     	;# 
  1339  0519                     	;# 
  1340  051A                     	;# 
  1341  051B                     	;# 
  1342  051C                     	;# 
  1343  051D                     	;# 
  1344  058C                     	;# 
  1345  058C                     	;# 
  1346  058D                     	;# 
  1347  058E                     	;# 
  1348  058F                     	;# 
  1349  058F                     	;# 
  1350  0590                     	;# 
  1351  0591                     	;# 
  1352  0592                     	;# 
  1353  0593                     	;# 
  1354  060C                     	;# 
  1355  060D                     	;# 
  1356  060E                     	;# 
  1357  060F                     	;# 
  1358  0610                     	;# 
  1359  0611                     	;# 
  1360  0612                     	;# 
  1361  0613                     	;# 
  1362  0614                     	;# 
  1363  0616                     	;# 
  1364  0617                     	;# 
  1365  0618                     	;# 
  1366  0619                     	;# 
  1367  061A                     	;# 
  1368  061B                     	;# 
  1369  061C                     	;# 
  1370  061D                     	;# 
  1371  061E                     	;# 
  1372  068C                     	;# 
  1373  068D                     	;# 
  1374  068E                     	;# 
  1375  068F                     	;# 
  1376  0690                     	;# 
  1377  0691                     	;# 
  1378  0692                     	;# 
  1379  0693                     	;# 
  1380  0694                     	;# 
  1381  070C                     	;# 
  1382  070D                     	;# 
  1383  070E                     	;# 
  1384  070F                     	;# 
  1385  0710                     	;# 
  1386  0711                     	;# 
  1387  0712                     	;# 
  1388  0713                     	;# 
  1389  0714                     	;# 
  1390  0716                     	;# 
  1391  0717                     	;# 
  1392  0718                     	;# 
  1393  0719                     	;# 
  1394  071A                     	;# 
  1395  071B                     	;# 
  1396  071C                     	;# 
  1397  071D                     	;# 
  1398  071E                     	;# 
  1399  0796                     	;# 
  1400  0797                     	;# 
  1401  0798                     	;# 
  1402  0799                     	;# 
  1403  079A                     	;# 
  1404  079B                     	;# 
  1405  080C                     	;# 
  1406  080D                     	;# 
  1407  080E                     	;# 
  1408  080F                     	;# 
  1409  0810                     	;# 
  1410  0811                     	;# 
  1411  0812                     	;# 
  1412  0813                     	;# 
  1413  0814                     	;# 
  1414  081A                     	;# 
  1415  081B                     	;# 
  1416  081C                     	;# 
  1417  081D                     	;# 
  1418  081E                     	;# 
  1419  081F                     	;# 
  1420  088C                     	;# 
  1421  088D                     	;# 
  1422  088E                     	;# 
  1423  088F                     	;# 
  1424  0890                     	;# 
  1425  0891                     	;# 
  1426  0892                     	;# 
  1427  0893                     	;# 
  1428  0895                     	;# 
  1429  0896                     	;# 
  1430  0897                     	;# 
  1431  0898                     	;# 
  1432  0899                     	;# 
  1433  089A                     	;# 
  1434  089B                     	;# 
  1435  090C                     	;# 
  1436  090E                     	;# 
  1437  090F                     	;# 
  1438  091F                     	;# 
  1439  091F                     	;# 
  1440  098F                     	;# 
  1441  098F                     	;# 
  1442  0990                     	;# 
  1443  0991                     	;# 
  1444  0992                     	;# 
  1445  0993                     	;# 
  1446  0994                     	;# 
  1447  0995                     	;# 
  1448  0996                     	;# 
  1449  0997                     	;# 
  1450  0E0F                     	;# 
  1451  0E10                     	;# 
  1452  0E11                     	;# 
  1453  0E12                     	;# 
  1454  0E13                     	;# 
  1455  0E14                     	;# 
  1456  0E15                     	;# 
  1457  0E16                     	;# 
  1458  0E17                     	;# 
  1459  0E18                     	;# 
  1460  0E19                     	;# 
  1461  0E1A                     	;# 
  1462  0E1B                     	;# 
  1463  0E1C                     	;# 
  1464  0E1D                     	;# 
  1465  0E1E                     	;# 
  1466  0E1F                     	;# 
  1467  0E20                     	;# 
  1468  0E21                     	;# 
  1469  0E22                     	;# 
  1470  0E23                     	;# 
  1471  0E24                     	;# 
  1472  0E25                     	;# 
  1473  0E26                     	;# 
  1474  0E27                     	;# 
  1475  0E28                     	;# 
  1476  0E29                     	;# 
  1477  0E2A                     	;# 
  1478  0E2B                     	;# 
  1479  0E2C                     	;# 
  1480  0E2D                     	;# 
  1481  0E2E                     	;# 
  1482  0E2F                     	;# 
  1483  0E30                     	;# 
  1484  0E31                     	;# 
  1485  0E32                     	;# 
  1486  0E33                     	;# 
  1487  0E34                     	;# 
  1488  0E35                     	;# 
  1489  0E36                     	;# 
  1490  0E37                     	;# 
  1491  0E8F                     	;# 
  1492  0E90                     	;# 
  1493  0E91                     	;# 
  1494  0E92                     	;# 
  1495  0E93                     	;# 
  1496  0E94                     	;# 
  1497  0E95                     	;# 
  1498  0E96                     	;# 
  1499  0E97                     	;# 
  1500  0E9C                     	;# 
  1501  0E9D                     	;# 
  1502  0E9E                     	;# 
  1503  0EA1                     	;# 
  1504  0EA2                     	;# 
  1505  0EA3                     	;# 
  1506  0EA4                     	;# 
  1507  0EA5                     	;# 
  1508  0EA9                     	;# 
  1509  0EAA                     	;# 
  1510  0EAB                     	;# 
  1511  0EAC                     	;# 
  1512  0EB1                     	;# 
  1513  0EB2                     	;# 
  1514  0EB3                     	;# 
  1515  0EB8                     	;# 
  1516  0EB9                     	;# 
  1517  0EBA                     	;# 
  1518  0EBB                     	;# 
  1519  0EBC                     	;# 
  1520  0EBD                     	;# 
  1521  0EBE                     	;# 
  1522  0EC3                     	;# 
  1523  0EC5                     	;# 
  1524  0EC6                     	;# 
  1525  0EC7                     	;# 
  1526  0EC8                     	;# 
  1527  0EC9                     	;# 
  1528  0ECA                     	;# 
  1529  0ECB                     	;# 
  1530  0ECC                     	;# 
  1531  0F10                     	;# 
  1532  0F11                     	;# 
  1533  0F12                     	;# 
  1534  0F13                     	;# 
  1535  0F14                     	;# 
  1536  0F15                     	;# 
  1537  0F16                     	;# 
  1538  0F17                     	;# 
  1539  0F18                     	;# 
  1540  0F19                     	;# 
  1541  0F1A                     	;# 
  1542  0F1B                     	;# 
  1543  0F1C                     	;# 
  1544  0F1D                     	;# 
  1545  0F1E                     	;# 
  1546  0F1F                     	;# 
  1547  0F20                     	;# 
  1548  0F21                     	;# 
  1549  0F22                     	;# 
  1550  0F23                     	;# 
  1551  0F24                     	;# 
  1552  0F25                     	;# 
  1553  0F26                     	;# 
  1554  0F27                     	;# 
  1555  0F38                     	;# 
  1556  0F39                     	;# 
  1557  0F3A                     	;# 
  1558  0F3B                     	;# 
  1559  0F3C                     	;# 
  1560  0F3D                     	;# 
  1561  0F3E                     	;# 
  1562  0F3F                     	;# 
  1563  0F40                     	;# 
  1564  0F41                     	;# 
  1565  0F43                     	;# 
  1566  0F44                     	;# 
  1567  0F45                     	;# 
  1568  0F46                     	;# 
  1569  0F47                     	;# 
  1570  0F48                     	;# 
  1571  0F49                     	;# 
  1572  0F4A                     	;# 
  1573  0F4B                     	;# 
  1574  0F4C                     	;# 
  1575  0F4E                     	;# 
  1576  0F4F                     	;# 
  1577  0F50                     	;# 
  1578  0F51                     	;# 
  1579  0F52                     	;# 
  1580  0F53                     	;# 
  1581  0F54                     	;# 
  1582  0F55                     	;# 
  1583  0F56                     	;# 
  1584  0F57                     	;# 
  1585  0F65                     	;# 
  1586  0F68                     	;# 
  1587  0F69                     	;# 
  1588  0F6A                     	;# 
  1589  0F6B                     	;# 
  1590  0FE4                     	;# 
  1591  0FE5                     	;# 
  1592  0FE6                     	;# 
  1593  0FE7                     	;# 
  1594  0FE8                     	;# 
  1595  0FE9                     	;# 
  1596  0FEA                     	;# 
  1597  0FEB                     	;# 
  1598  0FED                     	;# 
  1599  0FEE                     	;# 
  1600  0FEF                     	;# 
  1601  0000                     	;# 
  1602  0001                     	;# 
  1603  0002                     	;# 
  1604  0003                     	;# 
  1605  0004                     	;# 
  1606  0005                     	;# 
  1607  0006                     	;# 
  1608  0007                     	;# 
  1609  0008                     	;# 
  1610  0009                     	;# 
  1611  000A                     	;# 
  1612  000B                     	;# 
  1613  000C                     	;# 
  1614  000D                     	;# 
  1615  000E                     	;# 
  1616  0010                     	;# 
  1617  0011                     	;# 
  1618  0012                     	;# 
  1619  0013                     	;# 
  1620  0016                     	;# 
  1621  0017                     	;# 
  1622  0018                     	;# 
  1623  001C                     	;# 
  1624  001C                     	;# 
  1625  001D                     	;# 
  1626  001D                     	;# 
  1627  001E                     	;# 
  1628  001F                     	;# 
  1629  008C                     	;# 
  1630  008C                     	;# 
  1631  008D                     	;# 
  1632  008E                     	;# 
  1633  008E                     	;# 
  1634  008F                     	;# 
  1635  0090                     	;# 
  1636  0090                     	;# 
  1637  0091                     	;# 
  1638  0093                     	;# 
  1639  0094                     	;# 
  1640  0095                     	;# 
  1641  0096                     	;# 
  1642  0097                     	;# 
  1643  0098                     	;# 
  1644  0099                     	;# 
  1645  009A                     	;# 
  1646  009B                     	;# 
  1647  009C                     	;# 
  1648  009D                     	;# 
  1649  009E                     	;# 
  1650  010C                     	;# 
  1651  010D                     	;# 
  1652  010E                     	;# 
  1653  010E                     	;# 
  1654  010F                     	;# 
  1655  0110                     	;# 
  1656  0110                     	;# 
  1657  0111                     	;# 
  1658  0112                     	;# 
  1659  0112                     	;# 
  1660  0113                     	;# 
  1661  0114                     	;# 
  1662  0114                     	;# 
  1663  0115                     	;# 
  1664  0116                     	;# 
  1665  0116                     	;# 
  1666  0117                     	;# 
  1667  0119                     	;# 
  1668  0119                     	;# 
  1669  0119                     	;# 
  1670  011A                     	;# 
  1671  011A                     	;# 
  1672  011A                     	;# 
  1673  011B                     	;# 
  1674  011B                     	;# 
  1675  011B                     	;# 
  1676  011B                     	;# 
  1677  011B                     	;# 
  1678  011C                     	;# 
  1679  011C                     	;# 
  1680  011C                     	;# 
  1681  011D                     	;# 
  1682  011D                     	;# 
  1683  011D                     	;# 
  1684  011E                     	;# 
  1685  011E                     	;# 
  1686  011E                     	;# 
  1687  011F                     	;# 
  1688  011F                     	;# 
  1689  011F                     	;# 
  1690  011F                     	;# 
  1691  011F                     	;# 
  1692  018C                     	;# 
  1693  018D                     	;# 
  1694  018E                     	;# 
  1695  018F                     	;# 
  1696  0190                     	;# 
  1697  0191                     	;# 
  1698  0192                     	;# 
  1699  0196                     	;# 
  1700  0197                     	;# 
  1701  0198                     	;# 
  1702  0199                     	;# 
  1703  019A                     	;# 
  1704  019B                     	;# 
  1705  019C                     	;# 
  1706  020C                     	;# 
  1707  020D                     	;# 
  1708  020E                     	;# 
  1709  020F                     	;# 
  1710  020F                     	;# 
  1711  0210                     	;# 
  1712  0210                     	;# 
  1713  0211                     	;# 
  1714  0211                     	;# 
  1715  0212                     	;# 
  1716  0213                     	;# 
  1717  0214                     	;# 
  1718  0215                     	;# 
  1719  0215                     	;# 
  1720  0216                     	;# 
  1721  0216                     	;# 
  1722  0217                     	;# 
  1723  0217                     	;# 
  1724  0218                     	;# 
  1725  0219                     	;# 
  1726  021A                     	;# 
  1727  021B                     	;# 
  1728  021B                     	;# 
  1729  021C                     	;# 
  1730  021C                     	;# 
  1731  021D                     	;# 
  1732  021D                     	;# 
  1733  021E                     	;# 
  1734  021F                     	;# 
  1735  028C                     	;# 
  1736  028C                     	;# 
  1737  028D                     	;# 
  1738  028D                     	;# 
  1739  028E                     	;# 
  1740  028F                     	;# 
  1741  0290                     	;# 
  1742  0290                     	;# 
  1743  0291                     	;# 
  1744  0292                     	;# 
  1745  0292                     	;# 
  1746  0293                     	;# 
  1747  0293                     	;# 
  1748  0294                     	;# 
  1749  0295                     	;# 
  1750  0296                     	;# 
  1751  0296                     	;# 
  1752  0297                     	;# 
  1753  0298                     	;# 
  1754  0298                     	;# 
  1755  0299                     	;# 
  1756  0299                     	;# 
  1757  029A                     	;# 
  1758  029B                     	;# 
  1759  029C                     	;# 
  1760  029C                     	;# 
  1761  029D                     	;# 
  1762  030C                     	;# 
  1763  030C                     	;# 
  1764  030D                     	;# 
  1765  030E                     	;# 
  1766  030F                     	;# 
  1767  0310                     	;# 
  1768  0310                     	;# 
  1769  0311                     	;# 
  1770  0312                     	;# 
  1771  0313                     	;# 
  1772  0314                     	;# 
  1773  0314                     	;# 
  1774  0315                     	;# 
  1775  0316                     	;# 
  1776  0317                     	;# 
  1777  0318                     	;# 
  1778  0318                     	;# 
  1779  0319                     	;# 
  1780  031A                     	;# 
  1781  031B                     	;# 
  1782  031C                     	;# 
  1783  031C                     	;# 
  1784  031D                     	;# 
  1785  031E                     	;# 
  1786  031F                     	;# 
  1787  038C                     	;# 
  1788  038D                     	;# 
  1789  038E                     	;# 
  1790  0390                     	;# 
  1791  0391                     	;# 
  1792  0392                     	;# 
  1793  040C                     	;# 
  1794  040D                     	;# 
  1795  040E                     	;# 
  1796  040F                     	;# 
  1797  0410                     	;# 
  1798  0411                     	;# 
  1799  0416                     	;# 
  1800  0416                     	;# 
  1801  0417                     	;# 
  1802  0418                     	;# 
  1803  0418                     	;# 
  1804  0419                     	;# 
  1805  041A                     	;# 
  1806  041A                     	;# 
  1807  041B                     	;# 
  1808  041C                     	;# 
  1809  041C                     	;# 
  1810  041D                     	;# 
  1811  041E                     	;# 
  1812  041F                     	;# 
  1813  048C                     	;# 
  1814  048C                     	;# 
  1815  048D                     	;# 
  1816  048E                     	;# 
  1817  048F                     	;# 
  1818  048F                     	;# 
  1819  0490                     	;# 
  1820  0491                     	;# 
  1821  0492                     	;# 
  1822  0492                     	;# 
  1823  0493                     	;# 
  1824  0494                     	;# 
  1825  0495                     	;# 
  1826  0495                     	;# 
  1827  0496                     	;# 
  1828  0497                     	;# 
  1829  0498                     	;# 
  1830  0499                     	;# 
  1831  049A                     	;# 
  1832  049B                     	;# 
  1833  049C                     	;# 
  1834  049D                     	;# 
  1835  050C                     	;# 
  1836  050C                     	;# 
  1837  050D                     	;# 
  1838  050E                     	;# 
  1839  050F                     	;# 
  1840  050F                     	;# 
  1841  0510                     	;# 
  1842  0511                     	;# 
  1843  0512                     	;# 
  1844  0512                     	;# 
  1845  0513                     	;# 
  1846  0514                     	;# 
  1847  0515                     	;# 
  1848  0515                     	;# 
  1849  0516                     	;# 
  1850  0517                     	;# 
  1851  0518                     	;# 
  1852  0519                     	;# 
  1853  051A                     	;# 
  1854  051B                     	;# 
  1855  051C                     	;# 
  1856  051D                     	;# 
  1857  058C                     	;# 
  1858  058C                     	;# 
  1859  058D                     	;# 
  1860  058E                     	;# 
  1861  058F                     	;# 
  1862  058F                     	;# 
  1863  0590                     	;# 
  1864  0591                     	;# 
  1865  0592                     	;# 
  1866  0593                     	;# 
  1867  060C                     	;# 
  1868  060D                     	;# 
  1869  060E                     	;# 
  1870  060F                     	;# 
  1871  0610                     	;# 
  1872  0611                     	;# 
  1873  0612                     	;# 
  1874  0613                     	;# 
  1875  0614                     	;# 
  1876  0616                     	;# 
  1877  0617                     	;# 
  1878  0618                     	;# 
  1879  0619                     	;# 
  1880  061A                     	;# 
  1881  061B                     	;# 
  1882  061C                     	;# 
  1883  061D                     	;# 
  1884  061E                     	;# 
  1885  068C                     	;# 
  1886  068D                     	;# 
  1887  068E                     	;# 
  1888  068F                     	;# 
  1889  0690                     	;# 
  1890  0691                     	;# 
  1891  0692                     	;# 
  1892  0693                     	;# 
  1893  0694                     	;# 
  1894  070C                     	;# 
  1895  070D                     	;# 
  1896  070E                     	;# 
  1897  070F                     	;# 
  1898  0710                     	;# 
  1899  0711                     	;# 
  1900  0712                     	;# 
  1901  0713                     	;# 
  1902  0714                     	;# 
  1903  0716                     	;# 
  1904  0717                     	;# 
  1905  0718                     	;# 
  1906  0719                     	;# 
  1907  071A                     	;# 
  1908  071B                     	;# 
  1909  071C                     	;# 
  1910  071D                     	;# 
  1911  071E                     	;# 
  1912  0796                     	;# 
  1913  0797                     	;# 
  1914  0798                     	;# 
  1915  0799                     	;# 
  1916  079A                     	;# 
  1917  079B                     	;# 
  1918  080C                     	;# 
  1919  080D                     	;# 
  1920  080E                     	;# 
  1921  080F                     	;# 
  1922  0810                     	;# 
  1923  0811                     	;# 
  1924  0812                     	;# 
  1925  0813                     	;# 
  1926  0814                     	;# 
  1927  081A                     	;# 
  1928  081B                     	;# 
  1929  081C                     	;# 
  1930  081D                     	;# 
  1931  081E                     	;# 
  1932  081F                     	;# 
  1933  088C                     	;# 
  1934  088D                     	;# 
  1935  088E                     	;# 
  1936  088F                     	;# 
  1937  0890                     	;# 
  1938  0891                     	;# 
  1939  0892                     	;# 
  1940  0893                     	;# 
  1941  0895                     	;# 
  1942  0896                     	;# 
  1943  0897                     	;# 
  1944  0898                     	;# 
  1945  0899                     	;# 
  1946  089A                     	;# 
  1947  089B                     	;# 
  1948  090C                     	;# 
  1949  090E                     	;# 
  1950  090F                     	;# 
  1951  091F                     	;# 
  1952  091F                     	;# 
  1953  098F                     	;# 
  1954  098F                     	;# 
  1955  0990                     	;# 
  1956  0991                     	;# 
  1957  0992                     	;# 
  1958  0993                     	;# 
  1959  0994                     	;# 
  1960  0995                     	;# 
  1961  0996                     	;# 
  1962  0997                     	;# 
  1963  0E0F                     	;# 
  1964  0E10                     	;# 
  1965  0E11                     	;# 
  1966  0E12                     	;# 
  1967  0E13                     	;# 
  1968  0E14                     	;# 
  1969  0E15                     	;# 
  1970  0E16                     	;# 
  1971  0E17                     	;# 
  1972  0E18                     	;# 
  1973  0E19                     	;# 
  1974  0E1A                     	;# 
  1975  0E1B                     	;# 
  1976  0E1C                     	;# 
  1977  0E1D                     	;# 
  1978  0E1E                     	;# 
  1979  0E1F                     	;# 
  1980  0E20                     	;# 
  1981  0E21                     	;# 
  1982  0E22                     	;# 
  1983  0E23                     	;# 
  1984  0E24                     	;# 
  1985  0E25                     	;# 
  1986  0E26                     	;# 
  1987  0E27                     	;# 
  1988  0E28                     	;# 
  1989  0E29                     	;# 
  1990  0E2A                     	;# 
  1991  0E2B                     	;# 
  1992  0E2C                     	;# 
  1993  0E2D                     	;# 
  1994  0E2E                     	;# 
  1995  0E2F                     	;# 
  1996  0E30                     	;# 
  1997  0E31                     	;# 
  1998  0E32                     	;# 
  1999  0E33                     	;# 
  2000  0E34                     	;# 
  2001  0E35                     	;# 
  2002  0E36                     	;# 
  2003  0E37                     	;# 
  2004  0E8F                     	;# 
  2005  0E90                     	;# 
  2006  0E91                     	;# 
  2007  0E92                     	;# 
  2008  0E93                     	;# 
  2009  0E94                     	;# 
  2010  0E95                     	;# 
  2011  0E96                     	;# 
  2012  0E97                     	;# 
  2013  0E9C                     	;# 
  2014  0E9D                     	;# 
  2015  0E9E                     	;# 
  2016  0EA1                     	;# 
  2017  0EA2                     	;# 
  2018  0EA3                     	;# 
  2019  0EA4                     	;# 
  2020  0EA5                     	;# 
  2021  0EA9                     	;# 
  2022  0EAA                     	;# 
  2023  0EAB                     	;# 
  2024  0EAC                     	;# 
  2025  0EB1                     	;# 
  2026  0EB2                     	;# 
  2027  0EB3                     	;# 
  2028  0EB8                     	;# 
  2029  0EB9                     	;# 
  2030  0EBA                     	;# 
  2031  0EBB                     	;# 
  2032  0EBC                     	;# 
  2033  0EBD                     	;# 
  2034  0EBE                     	;# 
  2035  0EC3                     	;# 
  2036  0EC5                     	;# 
  2037  0EC6                     	;# 
  2038  0EC7                     	;# 
  2039  0EC8                     	;# 
  2040  0EC9                     	;# 
  2041  0ECA                     	;# 
  2042  0ECB                     	;# 
  2043  0ECC                     	;# 
  2044  0F10                     	;# 
  2045  0F11                     	;# 
  2046  0F12                     	;# 
  2047  0F13                     	;# 
  2048  0F14                     	;# 
  2049  0F15                     	;# 
  2050  0F16                     	;# 
  2051  0F17                     	;# 
  2052  0F18                     	;# 
  2053  0F19                     	;# 
  2054  0F1A                     	;# 
  2055  0F1B                     	;# 
  2056  0F1C                     	;# 
  2057  0F1D                     	;# 
  2058  0F1E                     	;# 
  2059  0F1F                     	;# 
  2060  0F20                     	;# 
  2061  0F21                     	;# 
  2062  0F22                     	;# 
  2063  0F23                     	;# 
  2064  0F24                     	;# 
  2065  0F25                     	;# 
  2066  0F26                     	;# 
  2067  0F27                     	;# 
  2068  0F38                     	;# 
  2069  0F39                     	;# 
  2070  0F3A                     	;# 
  2071  0F3B                     	;# 
  2072  0F3C                     	;# 
  2073  0F3D                     	;# 
  2074  0F3E                     	;# 
  2075  0F3F                     	;# 
  2076  0F40                     	;# 
  2077  0F41                     	;# 
  2078  0F43                     	;# 
  2079  0F44                     	;# 
  2080  0F45                     	;# 
  2081  0F46                     	;# 
  2082  0F47                     	;# 
  2083  0F48                     	;# 
  2084  0F49                     	;# 
  2085  0F4A                     	;# 
  2086  0F4B                     	;# 
  2087  0F4C                     	;# 
  2088  0F4E                     	;# 
  2089  0F4F                     	;# 
  2090  0F50                     	;# 
  2091  0F51                     	;# 
  2092  0F52                     	;# 
  2093  0F53                     	;# 
  2094  0F54                     	;# 
  2095  0F55                     	;# 
  2096  0F56                     	;# 
  2097  0F57                     	;# 
  2098  0F65                     	;# 
  2099  0F68                     	;# 
  2100  0F69                     	;# 
  2101  0F6A                     	;# 
  2102  0F6B                     	;# 
  2103  0FE4                     	;# 
  2104  0FE5                     	;# 
  2105  0FE6                     	;# 
  2106  0FE7                     	;# 
  2107  0FE8                     	;# 
  2108  0FE9                     	;# 
  2109  0FEA                     	;# 
  2110  0FEB                     	;# 
  2111  0FED                     	;# 
  2112  0FEE                     	;# 
  2113  0FEF                     	;# 
  2114  0000                     	;# 
  2115  0001                     	;# 
  2116  0002                     	;# 
  2117  0003                     	;# 
  2118  0004                     	;# 
  2119  0005                     	;# 
  2120  0006                     	;# 
  2121  0007                     	;# 
  2122  0008                     	;# 
  2123  0009                     	;# 
  2124  000A                     	;# 
  2125  000B                     	;# 
  2126  000C                     	;# 
  2127  000D                     	;# 
  2128  000E                     	;# 
  2129  0010                     	;# 
  2130  0011                     	;# 
  2131  0012                     	;# 
  2132  0013                     	;# 
  2133  0016                     	;# 
  2134  0017                     	;# 
  2135  0018                     	;# 
  2136  001C                     	;# 
  2137  001C                     	;# 
  2138  001D                     	;# 
  2139  001D                     	;# 
  2140  001E                     	;# 
  2141  001F                     	;# 
  2142  008C                     	;# 
  2143  008C                     	;# 
  2144  008D                     	;# 
  2145  008E                     	;# 
  2146  008E                     	;# 
  2147  008F                     	;# 
  2148  0090                     	;# 
  2149  0090                     	;# 
  2150  0091                     	;# 
  2151  0093                     	;# 
  2152  0094                     	;# 
  2153  0095                     	;# 
  2154  0096                     	;# 
  2155  0097                     	;# 
  2156  0098                     	;# 
  2157  0099                     	;# 
  2158  009A                     	;# 
  2159  009B                     	;# 
  2160  009C                     	;# 
  2161  009D                     	;# 
  2162  009E                     	;# 
  2163  010C                     	;# 
  2164  010D                     	;# 
  2165  010E                     	;# 
  2166  010E                     	;# 
  2167  010F                     	;# 
  2168  0110                     	;# 
  2169  0110                     	;# 
  2170  0111                     	;# 
  2171  0112                     	;# 
  2172  0112                     	;# 
  2173  0113                     	;# 
  2174  0114                     	;# 
  2175  0114                     	;# 
  2176  0115                     	;# 
  2177  0116                     	;# 
  2178  0116                     	;# 
  2179  0117                     	;# 
  2180  0119                     	;# 
  2181  0119                     	;# 
  2182  0119                     	;# 
  2183  011A                     	;# 
  2184  011A                     	;# 
  2185  011A                     	;# 
  2186  011B                     	;# 
  2187  011B                     	;# 
  2188  011B                     	;# 
  2189  011B                     	;# 
  2190  011B                     	;# 
  2191  011C                     	;# 
  2192  011C                     	;# 
  2193  011C                     	;# 
  2194  011D                     	;# 
  2195  011D                     	;# 
  2196  011D                     	;# 
  2197  011E                     	;# 
  2198  011E                     	;# 
  2199  011E                     	;# 
  2200  011F                     	;# 
  2201  011F                     	;# 
  2202  011F                     	;# 
  2203  011F                     	;# 
  2204  011F                     	;# 
  2205  018C                     	;# 
  2206  018D                     	;# 
  2207  018E                     	;# 
  2208  018F                     	;# 
  2209  0190                     	;# 
  2210  0191                     	;# 
  2211  0192                     	;# 
  2212  0196                     	;# 
  2213  0197                     	;# 
  2214  0198                     	;# 
  2215  0199                     	;# 
  2216  019A                     	;# 
  2217  019B                     	;# 
  2218  019C                     	;# 
  2219  020C                     	;# 
  2220  020D                     	;# 
  2221  020E                     	;# 
  2222  020F                     	;# 
  2223  020F                     	;# 
  2224  0210                     	;# 
  2225  0210                     	;# 
  2226  0211                     	;# 
  2227  0211                     	;# 
  2228  0212                     	;# 
  2229  0213                     	;# 
  2230  0214                     	;# 
  2231  0215                     	;# 
  2232  0215                     	;# 
  2233  0216                     	;# 
  2234  0216                     	;# 
  2235  0217                     	;# 
  2236  0217                     	;# 
  2237  0218                     	;# 
  2238  0219                     	;# 
  2239  021A                     	;# 
  2240  021B                     	;# 
  2241  021B                     	;# 
  2242  021C                     	;# 
  2243  021C                     	;# 
  2244  021D                     	;# 
  2245  021D                     	;# 
  2246  021E                     	;# 
  2247  021F                     	;# 
  2248  028C                     	;# 
  2249  028C                     	;# 
  2250  028D                     	;# 
  2251  028D                     	;# 
  2252  028E                     	;# 
  2253  028F                     	;# 
  2254  0290                     	;# 
  2255  0290                     	;# 
  2256  0291                     	;# 
  2257  0292                     	;# 
  2258  0292                     	;# 
  2259  0293                     	;# 
  2260  0293                     	;# 
  2261  0294                     	;# 
  2262  0295                     	;# 
  2263  0296                     	;# 
  2264  0296                     	;# 
  2265  0297                     	;# 
  2266  0298                     	;# 
  2267  0298                     	;# 
  2268  0299                     	;# 
  2269  0299                     	;# 
  2270  029A                     	;# 
  2271  029B                     	;# 
  2272  029C                     	;# 
  2273  029C                     	;# 
  2274  029D                     	;# 
  2275  030C                     	;# 
  2276  030C                     	;# 
  2277  030D                     	;# 
  2278  030E                     	;# 
  2279  030F                     	;# 
  2280  0310                     	;# 
  2281  0310                     	;# 
  2282  0311                     	;# 
  2283  0312                     	;# 
  2284  0313                     	;# 
  2285  0314                     	;# 
  2286  0314                     	;# 
  2287  0315                     	;# 
  2288  0316                     	;# 
  2289  0317                     	;# 
  2290  0318                     	;# 
  2291  0318                     	;# 
  2292  0319                     	;# 
  2293  031A                     	;# 
  2294  031B                     	;# 
  2295  031C                     	;# 
  2296  031C                     	;# 
  2297  031D                     	;# 
  2298  031E                     	;# 
  2299  031F                     	;# 
  2300  038C                     	;# 
  2301  038D                     	;# 
  2302  038E                     	;# 
  2303  0390                     	;# 
  2304  0391                     	;# 
  2305  0392                     	;# 
  2306  040C                     	;# 
  2307  040D                     	;# 
  2308  040E                     	;# 
  2309  040F                     	;# 
  2310  0410                     	;# 
  2311  0411                     	;# 
  2312  0416                     	;# 
  2313  0416                     	;# 
  2314  0417                     	;# 
  2315  0418                     	;# 
  2316  0418                     	;# 
  2317  0419                     	;# 
  2318  041A                     	;# 
  2319  041A                     	;# 
  2320  041B                     	;# 
  2321  041C                     	;# 
  2322  041C                     	;# 
  2323  041D                     	;# 
  2324  041E                     	;# 
  2325  041F                     	;# 
  2326  048C                     	;# 
  2327  048C                     	;# 
  2328  048D                     	;# 
  2329  048E                     	;# 
  2330  048F                     	;# 
  2331  048F                     	;# 
  2332  0490                     	;# 
  2333  0491                     	;# 
  2334  0492                     	;# 
  2335  0492                     	;# 
  2336  0493                     	;# 
  2337  0494                     	;# 
  2338  0495                     	;# 
  2339  0495                     	;# 
  2340  0496                     	;# 
  2341  0497                     	;# 
  2342  0498                     	;# 
  2343  0499                     	;# 
  2344  049A                     	;# 
  2345  049B                     	;# 
  2346  049C                     	;# 
  2347  049D                     	;# 
  2348  050C                     	;# 
  2349  050C                     	;# 
  2350  050D                     	;# 
  2351  050E                     	;# 
  2352  050F                     	;# 
  2353  050F                     	;# 
  2354  0510                     	;# 
  2355  0511                     	;# 
  2356  0512                     	;# 
  2357  0512                     	;# 
  2358  0513                     	;# 
  2359  0514                     	;# 
  2360  0515                     	;# 
  2361  0515                     	;# 
  2362  0516                     	;# 
  2363  0517                     	;# 
  2364  0518                     	;# 
  2365  0519                     	;# 
  2366  051A                     	;# 
  2367  051B                     	;# 
  2368  051C                     	;# 
  2369  051D                     	;# 
  2370  058C                     	;# 
  2371  058C                     	;# 
  2372  058D                     	;# 
  2373  058E                     	;# 
  2374  058F                     	;# 
  2375  058F                     	;# 
  2376  0590                     	;# 
  2377  0591                     	;# 
  2378  0592                     	;# 
  2379  0593                     	;# 
  2380  060C                     	;# 
  2381  060D                     	;# 
  2382  060E                     	;# 
  2383  060F                     	;# 
  2384  0610                     	;# 
  2385  0611                     	;# 
  2386  0612                     	;# 
  2387  0613                     	;# 
  2388  0614                     	;# 
  2389  0616                     	;# 
  2390  0617                     	;# 
  2391  0618                     	;# 
  2392  0619                     	;# 
  2393  061A                     	;# 
  2394  061B                     	;# 
  2395  061C                     	;# 
  2396  061D                     	;# 
  2397  061E                     	;# 
  2398  068C                     	;# 
  2399  068D                     	;# 
  2400  068E                     	;# 
  2401  068F                     	;# 
  2402  0690                     	;# 
  2403  0691                     	;# 
  2404  0692                     	;# 
  2405  0693                     	;# 
  2406  0694                     	;# 
  2407  070C                     	;# 
  2408  070D                     	;# 
  2409  070E                     	;# 
  2410  070F                     	;# 
  2411  0710                     	;# 
  2412  0711                     	;# 
  2413  0712                     	;# 
  2414  0713                     	;# 
  2415  0714                     	;# 
  2416  0716                     	;# 
  2417  0717                     	;# 
  2418  0718                     	;# 
  2419  0719                     	;# 
  2420  071A                     	;# 
  2421  071B                     	;# 
  2422  071C                     	;# 
  2423  071D                     	;# 
  2424  071E                     	;# 
  2425  0796                     	;# 
  2426  0797                     	;# 
  2427  0798                     	;# 
  2428  0799                     	;# 
  2429  079A                     	;# 
  2430  079B                     	;# 
  2431  080C                     	;# 
  2432  080D                     	;# 
  2433  080E                     	;# 
  2434  080F                     	;# 
  2435  0810                     	;# 
  2436  0811                     	;# 
  2437  0812                     	;# 
  2438  0813                     	;# 
  2439  0814                     	;# 
  2440  081A                     	;# 
  2441  081B                     	;# 
  2442  081C                     	;# 
  2443  081D                     	;# 
  2444  081E                     	;# 
  2445  081F                     	;# 
  2446  088C                     	;# 
  2447  088D                     	;# 
  2448  088E                     	;# 
  2449  088F                     	;# 
  2450  0890                     	;# 
  2451  0891                     	;# 
  2452  0892                     	;# 
  2453  0893                     	;# 
  2454  0895                     	;# 
  2455  0896                     	;# 
  2456  0897                     	;# 
  2457  0898                     	;# 
  2458  0899                     	;# 
  2459  089A                     	;# 
  2460  089B                     	;# 
  2461  090C                     	;# 
  2462  090E                     	;# 
  2463  090F                     	;# 
  2464  091F                     	;# 
  2465  091F                     	;# 
  2466  098F                     	;# 
  2467  098F                     	;# 
  2468  0990                     	;# 
  2469  0991                     	;# 
  2470  0992                     	;# 
  2471  0993                     	;# 
  2472  0994                     	;# 
  2473  0995                     	;# 
  2474  0996                     	;# 
  2475  0997                     	;# 
  2476  0E0F                     	;# 
  2477  0E10                     	;# 
  2478  0E11                     	;# 
  2479  0E12                     	;# 
  2480  0E13                     	;# 
  2481  0E14                     	;# 
  2482  0E15                     	;# 
  2483  0E16                     	;# 
  2484  0E17                     	;# 
  2485  0E18                     	;# 
  2486  0E19                     	;# 
  2487  0E1A                     	;# 
  2488  0E1B                     	;# 
  2489  0E1C                     	;# 
  2490  0E1D                     	;# 
  2491  0E1E                     	;# 
  2492  0E1F                     	;# 
  2493  0E20                     	;# 
  2494  0E21                     	;# 
  2495  0E22                     	;# 
  2496  0E23                     	;# 
  2497  0E24                     	;# 
  2498  0E25                     	;# 
  2499  0E26                     	;# 
  2500  0E27                     	;# 
  2501  0E28                     	;# 
  2502  0E29                     	;# 
  2503  0E2A                     	;# 
  2504  0E2B                     	;# 
  2505  0E2C                     	;# 
  2506  0E2D                     	;# 
  2507  0E2E                     	;# 
  2508  0E2F                     	;# 
  2509  0E30                     	;# 
  2510  0E31                     	;# 
  2511  0E32                     	;# 
  2512  0E33                     	;# 
  2513  0E34                     	;# 
  2514  0E35                     	;# 
  2515  0E36                     	;# 
  2516  0E37                     	;# 
  2517  0E8F                     	;# 
  2518  0E90                     	;# 
  2519  0E91                     	;# 
  2520  0E92                     	;# 
  2521  0E93                     	;# 
  2522  0E94                     	;# 
  2523  0E95                     	;# 
  2524  0E96                     	;# 
  2525  0E97                     	;# 
  2526  0E9C                     	;# 
  2527  0E9D                     	;# 
  2528  0E9E                     	;# 
  2529  0EA1                     	;# 
  2530  0EA2                     	;# 
  2531  0EA3                     	;# 
  2532  0EA4                     	;# 
  2533  0EA5                     	;# 
  2534  0EA9                     	;# 
  2535  0EAA                     	;# 
  2536  0EAB                     	;# 
  2537  0EAC                     	;# 
  2538  0EB1                     	;# 
  2539  0EB2                     	;# 
  2540  0EB3                     	;# 
  2541  0EB8                     	;# 
  2542  0EB9                     	;# 
  2543  0EBA                     	;# 
  2544  0EBB                     	;# 
  2545  0EBC                     	;# 
  2546  0EBD                     	;# 
  2547  0EBE                     	;# 
  2548  0EC3                     	;# 
  2549  0EC5                     	;# 
  2550  0EC6                     	;# 
  2551  0EC7                     	;# 
  2552  0EC8                     	;# 
  2553  0EC9                     	;# 
  2554  0ECA                     	;# 
  2555  0ECB                     	;# 
  2556  0ECC                     	;# 
  2557  0F10                     	;# 
  2558  0F11                     	;# 
  2559  0F12                     	;# 
  2560  0F13                     	;# 
  2561  0F14                     	;# 
  2562  0F15                     	;# 
  2563  0F16                     	;# 
  2564  0F17                     	;# 
  2565  0F18                     	;# 
  2566  0F19                     	;# 
  2567  0F1A                     	;# 
  2568  0F1B                     	;# 
  2569  0F1C                     	;# 
  2570  0F1D                     	;# 
  2571  0F1E                     	;# 
  2572  0F1F                     	;# 
  2573  0F20                     	;# 
  2574  0F21                     	;# 
  2575  0F22                     	;# 
  2576  0F23                     	;# 
  2577  0F24                     	;# 
  2578  0F25                     	;# 
  2579  0F26                     	;# 
  2580  0F27                     	;# 
  2581  0F38                     	;# 
  2582  0F39                     	;# 
  2583  0F3A                     	;# 
  2584  0F3B                     	;# 
  2585  0F3C                     	;# 
  2586  0F3D                     	;# 
  2587  0F3E                     	;# 
  2588  0F3F                     	;# 
  2589  0F40                     	;# 
  2590  0F41                     	;# 
  2591  0F43                     	;# 
  2592  0F44                     	;# 
  2593  0F45                     	;# 
  2594  0F46                     	;# 
  2595  0F47                     	;# 
  2596  0F48                     	;# 
  2597  0F49                     	;# 
  2598  0F4A                     	;# 
  2599  0F4B                     	;# 
  2600  0F4C                     	;# 
  2601  0F4E                     	;# 
  2602  0F4F                     	;# 
  2603  0F50                     	;# 
  2604  0F51                     	;# 
  2605  0F52                     	;# 
  2606  0F53                     	;# 
  2607  0F54                     	;# 
  2608  0F55                     	;# 
  2609  0F56                     	;# 
  2610  0F57                     	;# 
  2611  0F65                     	;# 
  2612  0F68                     	;# 
  2613  0F69                     	;# 
  2614  0F6A                     	;# 
  2615  0F6B                     	;# 
  2616  0FE4                     	;# 
  2617  0FE5                     	;# 
  2618  0FE6                     	;# 
  2619  0FE7                     	;# 
  2620  0FE8                     	;# 
  2621  0FE9                     	;# 
  2622  0FEA                     	;# 
  2623  0FEB                     	;# 
  2624  0FED                     	;# 
  2625  0FEE                     	;# 
  2626  0FEF                     	;# 
  2627  0000                     	;# 
  2628  0001                     	;# 
  2629  0002                     	;# 
  2630  0003                     	;# 
  2631  0004                     	;# 
  2632  0005                     	;# 
  2633  0006                     	;# 
  2634  0007                     	;# 
  2635  0008                     	;# 
  2636  0009                     	;# 
  2637  000A                     	;# 
  2638  000B                     	;# 
  2639  000C                     	;# 
  2640  000D                     	;# 
  2641  000E                     	;# 
  2642  0010                     	;# 
  2643  0011                     	;# 
  2644  0012                     	;# 
  2645  0013                     	;# 
  2646  0016                     	;# 
  2647  0017                     	;# 
  2648  0018                     	;# 
  2649  001C                     	;# 
  2650  001C                     	;# 
  2651  001D                     	;# 
  2652  001D                     	;# 
  2653  001E                     	;# 
  2654  001F                     	;# 
  2655  008C                     	;# 
  2656  008C                     	;# 
  2657  008D                     	;# 
  2658  008E                     	;# 
  2659  008E                     	;# 
  2660  008F                     	;# 
  2661  0090                     	;# 
  2662  0090                     	;# 
  2663  0091                     	;# 
  2664  0093                     	;# 
  2665  0094                     	;# 
  2666  0095                     	;# 
  2667  0096                     	;# 
  2668  0097                     	;# 
  2669  0098                     	;# 
  2670  0099                     	;# 
  2671  009A                     	;# 
  2672  009B                     	;# 
  2673  009C                     	;# 
  2674  009D                     	;# 
  2675  009E                     	;# 
  2676  010C                     	;# 
  2677  010D                     	;# 
  2678  010E                     	;# 
  2679  010E                     	;# 
  2680  010F                     	;# 
  2681  0110                     	;# 
  2682  0110                     	;# 
  2683  0111                     	;# 
  2684  0112                     	;# 
  2685  0112                     	;# 
  2686  0113                     	;# 
  2687  0114                     	;# 
  2688  0114                     	;# 
  2689  0115                     	;# 
  2690  0116                     	;# 
  2691  0116                     	;# 
  2692  0117                     	;# 
  2693  0119                     	;# 
  2694  0119                     	;# 
  2695  0119                     	;# 
  2696  011A                     	;# 
  2697  011A                     	;# 
  2698  011A                     	;# 
  2699  011B                     	;# 
  2700  011B                     	;# 
  2701  011B                     	;# 
  2702  011B                     	;# 
  2703  011B                     	;# 
  2704  011C                     	;# 
  2705  011C                     	;# 
  2706  011C                     	;# 
  2707  011D                     	;# 
  2708  011D                     	;# 
  2709  011D                     	;# 
  2710  011E                     	;# 
  2711  011E                     	;# 
  2712  011E                     	;# 
  2713  011F                     	;# 
  2714  011F                     	;# 
  2715  011F                     	;# 
  2716  011F                     	;# 
  2717  011F                     	;# 
  2718  018C                     	;# 
  2719  018D                     	;# 
  2720  018E                     	;# 
  2721  018F                     	;# 
  2722  0190                     	;# 
  2723  0191                     	;# 
  2724  0192                     	;# 
  2725  0196                     	;# 
  2726  0197                     	;# 
  2727  0198                     	;# 
  2728  0199                     	;# 
  2729  019A                     	;# 
  2730  019B                     	;# 
  2731  019C                     	;# 
  2732  020C                     	;# 
  2733  020D                     	;# 
  2734  020E                     	;# 
  2735  020F                     	;# 
  2736  020F                     	;# 
  2737  0210                     	;# 
  2738  0210                     	;# 
  2739  0211                     	;# 
  2740  0211                     	;# 
  2741  0212                     	;# 
  2742  0213                     	;# 
  2743  0214                     	;# 
  2744  0215                     	;# 
  2745  0215                     	;# 
  2746  0216                     	;# 
  2747  0216                     	;# 
  2748  0217                     	;# 
  2749  0217                     	;# 
  2750  0218                     	;# 
  2751  0219                     	;# 
  2752  021A                     	;# 
  2753  021B                     	;# 
  2754  021B                     	;# 
  2755  021C                     	;# 
  2756  021C                     	;# 
  2757  021D                     	;# 
  2758  021D                     	;# 
  2759  021E                     	;# 
  2760  021F                     	;# 
  2761  028C                     	;# 
  2762  028C                     	;# 
  2763  028D                     	;# 
  2764  028D                     	;# 
  2765  028E                     	;# 
  2766  028F                     	;# 
  2767  0290                     	;# 
  2768  0290                     	;# 
  2769  0291                     	;# 
  2770  0292                     	;# 
  2771  0292                     	;# 
  2772  0293                     	;# 
  2773  0293                     	;# 
  2774  0294                     	;# 
  2775  0295                     	;# 
  2776  0296                     	;# 
  2777  0296                     	;# 
  2778  0297                     	;# 
  2779  0298                     	;# 
  2780  0298                     	;# 
  2781  0299                     	;# 
  2782  0299                     	;# 
  2783  029A                     	;# 
  2784  029B                     	;# 
  2785  029C                     	;# 
  2786  029C                     	;# 
  2787  029D                     	;# 
  2788  030C                     	;# 
  2789  030C                     	;# 
  2790  030D                     	;# 
  2791  030E                     	;# 
  2792  030F                     	;# 
  2793  0310                     	;# 
  2794  0310                     	;# 
  2795  0311                     	;# 
  2796  0312                     	;# 
  2797  0313                     	;# 
  2798  0314                     	;# 
  2799  0314                     	;# 
  2800  0315                     	;# 
  2801  0316                     	;# 
  2802  0317                     	;# 
  2803  0318                     	;# 
  2804  0318                     	;# 
  2805  0319                     	;# 
  2806  031A                     	;# 
  2807  031B                     	;# 
  2808  031C                     	;# 
  2809  031C                     	;# 
  2810  031D                     	;# 
  2811  031E                     	;# 
  2812  031F                     	;# 
  2813  038C                     	;# 
  2814  038D                     	;# 
  2815  038E                     	;# 
  2816  0390                     	;# 
  2817  0391                     	;# 
  2818  0392                     	;# 
  2819  040C                     	;# 
  2820  040D                     	;# 
  2821  040E                     	;# 
  2822  040F                     	;# 
  2823  0410                     	;# 
  2824  0411                     	;# 
  2825  0416                     	;# 
  2826  0416                     	;# 
  2827  0417                     	;# 
  2828  0418                     	;# 
  2829  0418                     	;# 
  2830  0419                     	;# 
  2831  041A                     	;# 
  2832  041A                     	;# 
  2833  041B                     	;# 
  2834  041C                     	;# 
  2835  041C                     	;# 
  2836  041D                     	;# 
  2837  041E                     	;# 
  2838  041F                     	;# 
  2839  048C                     	;# 
  2840  048C                     	;# 
  2841  048D                     	;# 
  2842  048E                     	;# 
  2843  048F                     	;# 
  2844  048F                     	;# 
  2845  0490                     	;# 
  2846  0491                     	;# 
  2847  0492                     	;# 
  2848  0492                     	;# 
  2849  0493                     	;# 
  2850  0494                     	;# 
  2851  0495                     	;# 
  2852  0495                     	;# 
  2853  0496                     	;# 
  2854  0497                     	;# 
  2855  0498                     	;# 
  2856  0499                     	;# 
  2857  049A                     	;# 
  2858  049B                     	;# 
  2859  049C                     	;# 
  2860  049D                     	;# 
  2861  050C                     	;# 
  2862  050C                     	;# 
  2863  050D                     	;# 
  2864  050E                     	;# 
  2865  050F                     	;# 
  2866  050F                     	;# 
  2867  0510                     	;# 
  2868  0511                     	;# 
  2869  0512                     	;# 
  2870  0512                     	;# 
  2871  0513                     	;# 
  2872  0514                     	;# 
  2873  0515                     	;# 
  2874  0515                     	;# 
  2875  0516                     	;# 
  2876  0517                     	;# 
  2877  0518                     	;# 
  2878  0519                     	;# 
  2879  051A                     	;# 
  2880  051B                     	;# 
  2881  051C                     	;# 
  2882  051D                     	;# 
  2883  058C                     	;# 
  2884  058C                     	;# 
  2885  058D                     	;# 
  2886  058E                     	;# 
  2887  058F                     	;# 
  2888  058F                     	;# 
  2889  0590                     	;# 
  2890  0591                     	;# 
  2891  0592                     	;# 
  2892  0593                     	;# 
  2893  060C                     	;# 
  2894  060D                     	;# 
  2895  060E                     	;# 
  2896  060F                     	;# 
  2897  0610                     	;# 
  2898  0611                     	;# 
  2899  0612                     	;# 
  2900  0613                     	;# 
  2901  0614                     	;# 
  2902  0616                     	;# 
  2903  0617                     	;# 
  2904  0618                     	;# 
  2905  0619                     	;# 
  2906  061A                     	;# 
  2907  061B                     	;# 
  2908  061C                     	;# 
  2909  061D                     	;# 
  2910  061E                     	;# 
  2911  068C                     	;# 
  2912  068D                     	;# 
  2913  068E                     	;# 
  2914  068F                     	;# 
  2915  0690                     	;# 
  2916  0691                     	;# 
  2917  0692                     	;# 
  2918  0693                     	;# 
  2919  0694                     	;# 
  2920  070C                     	;# 
  2921  070D                     	;# 
  2922  070E                     	;# 
  2923  070F                     	;# 
  2924  0710                     	;# 
  2925  0711                     	;# 
  2926  0712                     	;# 
  2927  0713                     	;# 
  2928  0714                     	;# 
  2929  0716                     	;# 
  2930  0717                     	;# 
  2931  0718                     	;# 
  2932  0719                     	;# 
  2933  071A                     	;# 
  2934  071B                     	;# 
  2935  071C                     	;# 
  2936  071D                     	;# 
  2937  071E                     	;# 
  2938  0796                     	;# 
  2939  0797                     	;# 
  2940  0798                     	;# 
  2941  0799                     	;# 
  2942  079A                     	;# 
  2943  079B                     	;# 
  2944  080C                     	;# 
  2945  080D                     	;# 
  2946  080E                     	;# 
  2947  080F                     	;# 
  2948  0810                     	;# 
  2949  0811                     	;# 
  2950  0812                     	;# 
  2951  0813                     	;# 
  2952  0814                     	;# 
  2953  081A                     	;# 
  2954  081B                     	;# 
  2955  081C                     	;# 
  2956  081D                     	;# 
  2957  081E                     	;# 
  2958  081F                     	;# 
  2959  088C                     	;# 
  2960  088D                     	;# 
  2961  088E                     	;# 
  2962  088F                     	;# 
  2963  0890                     	;# 
  2964  0891                     	;# 
  2965  0892                     	;# 
  2966  0893                     	;# 
  2967  0895                     	;# 
  2968  0896                     	;# 
  2969  0897                     	;# 
  2970  0898                     	;# 
  2971  0899                     	;# 
  2972  089A                     	;# 
  2973  089B                     	;# 
  2974  090C                     	;# 
  2975  090E                     	;# 
  2976  090F                     	;# 
  2977  091F                     	;# 
  2978  091F                     	;# 
  2979  098F                     	;# 
  2980  098F                     	;# 
  2981  0990                     	;# 
  2982  0991                     	;# 
  2983  0992                     	;# 
  2984  0993                     	;# 
  2985  0994                     	;# 
  2986  0995                     	;# 
  2987  0996                     	;# 
  2988  0997                     	;# 
  2989  0E0F                     	;# 
  2990  0E10                     	;# 
  2991  0E11                     	;# 
  2992  0E12                     	;# 
  2993  0E13                     	;# 
  2994  0E14                     	;# 
  2995  0E15                     	;# 
  2996  0E16                     	;# 
  2997  0E17                     	;# 
  2998  0E18                     	;# 
  2999  0E19                     	;# 
  3000  0E1A                     	;# 
  3001  0E1B                     	;# 
  3002  0E1C                     	;# 
  3003  0E1D                     	;# 
  3004  0E1E                     	;# 
  3005  0E1F                     	;# 
  3006  0E20                     	;# 
  3007  0E21                     	;# 
  3008  0E22                     	;# 
  3009  0E23                     	;# 
  3010  0E24                     	;# 
  3011  0E25                     	;# 
  3012  0E26                     	;# 
  3013  0E27                     	;# 
  3014  0E28                     	;# 
  3015  0E29                     	;# 
  3016  0E2A                     	;# 
  3017  0E2B                     	;# 
  3018  0E2C                     	;# 
  3019  0E2D                     	;# 
  3020  0E2E                     	;# 
  3021  0E2F                     	;# 
  3022  0E30                     	;# 
  3023  0E31                     	;# 
  3024  0E32                     	;# 
  3025  0E33                     	;# 
  3026  0E34                     	;# 
  3027  0E35                     	;# 
  3028  0E36                     	;# 
  3029  0E37                     	;# 
  3030  0E8F                     	;# 
  3031  0E90                     	;# 
  3032  0E91                     	;# 
  3033  0E92                     	;# 
  3034  0E93                     	;# 
  3035  0E94                     	;# 
  3036  0E95                     	;# 
  3037  0E96                     	;# 
  3038  0E97                     	;# 
  3039  0E9C                     	;# 
  3040  0E9D                     	;# 
  3041  0E9E                     	;# 
  3042  0EA1                     	;# 
  3043  0EA2                     	;# 
  3044  0EA3                     	;# 
  3045  0EA4                     	;# 
  3046  0EA5                     	;# 
  3047  0EA9                     	;# 
  3048  0EAA                     	;# 
  3049  0EAB                     	;# 
  3050  0EAC                     	;# 
  3051  0EB1                     	;# 
  3052  0EB2                     	;# 
  3053  0EB3                     	;# 
  3054  0EB8                     	;# 
  3055  0EB9                     	;# 
  3056  0EBA                     	;# 
  3057  0EBB                     	;# 
  3058  0EBC                     	;# 
  3059  0EBD                     	;# 
  3060  0EBE                     	;# 
  3061  0EC3                     	;# 
  3062  0EC5                     	;# 
  3063  0EC6                     	;# 
  3064  0EC7                     	;# 
  3065  0EC8                     	;# 
  3066  0EC9                     	;# 
  3067  0ECA                     	;# 
  3068  0ECB                     	;# 
  3069  0ECC                     	;# 
  3070  0F10                     	;# 
  3071  0F11                     	;# 
  3072  0F12                     	;# 
  3073  0F13                     	;# 
  3074  0F14                     	;# 
  3075  0F15                     	;# 
  3076  0F16                     	;# 
  3077  0F17                     	;# 
  3078  0F18                     	;# 
  3079  0F19                     	;# 
  3080  0F1A                     	;# 
  3081  0F1B                     	;# 
  3082  0F1C                     	;# 
  3083  0F1D                     	;# 
  3084  0F1E                     	;# 
  3085  0F1F                     	;# 
  3086  0F20                     	;# 
  3087  0F21                     	;# 
  3088  0F22                     	;# 
  3089  0F23                     	;# 
  3090  0F24                     	;# 
  3091  0F25                     	;# 
  3092  0F26                     	;# 
  3093  0F27                     	;# 
  3094  0F38                     	;# 
  3095  0F39                     	;# 
  3096  0F3A                     	;# 
  3097  0F3B                     	;# 
  3098  0F3C                     	;# 
  3099  0F3D                     	;# 
  3100  0F3E                     	;# 
  3101  0F3F                     	;# 
  3102  0F40                     	;# 
  3103  0F41                     	;# 
  3104  0F43                     	;# 
  3105  0F44                     	;# 
  3106  0F45                     	;# 
  3107  0F46                     	;# 
  3108  0F47                     	;# 
  3109  0F48                     	;# 
  3110  0F49                     	;# 
  3111  0F4A                     	;# 
  3112  0F4B                     	;# 
  3113  0F4C                     	;# 
  3114  0F4E                     	;# 
  3115  0F4F                     	;# 
  3116  0F50                     	;# 
  3117  0F51                     	;# 
  3118  0F52                     	;# 
  3119  0F53                     	;# 
  3120  0F54                     	;# 
  3121  0F55                     	;# 
  3122  0F56                     	;# 
  3123  0F57                     	;# 
  3124  0F65                     	;# 
  3125  0F68                     	;# 
  3126  0F69                     	;# 
  3127  0F6A                     	;# 
  3128  0F6B                     	;# 
  3129  0FE4                     	;# 
  3130  0FE5                     	;# 
  3131  0FE6                     	;# 
  3132  0FE7                     	;# 
  3133  0FE8                     	;# 
  3134  0FE9                     	;# 
  3135  0FEA                     	;# 
  3136  0FEB                     	;# 
  3137  0FED                     	;# 
  3138  0FEE                     	;# 
  3139  0FEF                     	;# 
  3140  0000                     	;# 
  3141  0001                     	;# 
  3142  0002                     	;# 
  3143  0003                     	;# 
  3144  0004                     	;# 
  3145  0005                     	;# 
  3146  0006                     	;# 
  3147  0007                     	;# 
  3148  0008                     	;# 
  3149  0009                     	;# 
  3150  000A                     	;# 
  3151  000B                     	;# 
  3152  000C                     	;# 
  3153  000D                     	;# 
  3154  000E                     	;# 
  3155  0010                     	;# 
  3156  0011                     	;# 
  3157  0012                     	;# 
  3158  0013                     	;# 
  3159  0016                     	;# 
  3160  0017                     	;# 
  3161  0018                     	;# 
  3162  001C                     	;# 
  3163  001C                     	;# 
  3164  001D                     	;# 
  3165  001D                     	;# 
  3166  001E                     	;# 
  3167  001F                     	;# 
  3168  008C                     	;# 
  3169  008C                     	;# 
  3170  008D                     	;# 
  3171  008E                     	;# 
  3172  008E                     	;# 
  3173  008F                     	;# 
  3174  0090                     	;# 
  3175  0090                     	;# 
  3176  0091                     	;# 
  3177  0093                     	;# 
  3178  0094                     	;# 
  3179  0095                     	;# 
  3180  0096                     	;# 
  3181  0097                     	;# 
  3182  0098                     	;# 
  3183  0099                     	;# 
  3184  009A                     	;# 
  3185  009B                     	;# 
  3186  009C                     	;# 
  3187  009D                     	;# 
  3188  009E                     	;# 
  3189  010C                     	;# 
  3190  010D                     	;# 
  3191  010E                     	;# 
  3192  010E                     	;# 
  3193  010F                     	;# 
  3194  0110                     	;# 
  3195  0110                     	;# 
  3196  0111                     	;# 
  3197  0112                     	;# 
  3198  0112                     	;# 
  3199  0113                     	;# 
  3200  0114                     	;# 
  3201  0114                     	;# 
  3202  0115                     	;# 
  3203  0116                     	;# 
  3204  0116                     	;# 
  3205  0117                     	;# 
  3206  0119                     	;# 
  3207  0119                     	;# 
  3208  0119                     	;# 
  3209  011A                     	;# 
  3210  011A                     	;# 
  3211  011A                     	;# 
  3212  011B                     	;# 
  3213  011B                     	;# 
  3214  011B                     	;# 
  3215  011B                     	;# 
  3216  011B                     	;# 
  3217  011C                     	;# 
  3218  011C                     	;# 
  3219  011C                     	;# 
  3220  011D                     	;# 
  3221  011D                     	;# 
  3222  011D                     	;# 
  3223  011E                     	;# 
  3224  011E                     	;# 
  3225  011E                     	;# 
  3226  011F                     	;# 
  3227  011F                     	;# 
  3228  011F                     	;# 
  3229  011F                     	;# 
  3230  011F                     	;# 
  3231  018C                     	;# 
  3232  018D                     	;# 
  3233  018E                     	;# 
  3234  018F                     	;# 
  3235  0190                     	;# 
  3236  0191                     	;# 
  3237  0192                     	;# 
  3238  0196                     	;# 
  3239  0197                     	;# 
  3240  0198                     	;# 
  3241  0199                     	;# 
  3242  019A                     	;# 
  3243  019B                     	;# 
  3244  019C                     	;# 
  3245  020C                     	;# 
  3246  020D                     	;# 
  3247  020E                     	;# 
  3248  020F                     	;# 
  3249  020F                     	;# 
  3250  0210                     	;# 
  3251  0210                     	;# 
  3252  0211                     	;# 
  3253  0211                     	;# 
  3254  0212                     	;# 
  3255  0213                     	;# 
  3256  0214                     	;# 
  3257  0215                     	;# 
  3258  0215                     	;# 
  3259  0216                     	;# 
  3260  0216                     	;# 
  3261  0217                     	;# 
  3262  0217                     	;# 
  3263  0218                     	;# 
  3264  0219                     	;# 
  3265  021A                     	;# 
  3266  021B                     	;# 
  3267  021B                     	;# 
  3268  021C                     	;# 
  3269  021C                     	;# 
  3270  021D                     	;# 
  3271  021D                     	;# 
  3272  021E                     	;# 
  3273  021F                     	;# 
  3274  028C                     	;# 
  3275  028C                     	;# 
  3276  028D                     	;# 
  3277  028D                     	;# 
  3278  028E                     	;# 
  3279  028F                     	;# 
  3280  0290                     	;# 
  3281  0290                     	;# 
  3282  0291                     	;# 
  3283  0292                     	;# 
  3284  0292                     	;# 
  3285  0293                     	;# 
  3286  0293                     	;# 
  3287  0294                     	;# 
  3288  0295                     	;# 
  3289  0296                     	;# 
  3290  0296                     	;# 
  3291  0297                     	;# 
  3292  0298                     	;# 
  3293  0298                     	;# 
  3294  0299                     	;# 
  3295  0299                     	;# 
  3296  029A                     	;# 
  3297  029B                     	;# 
  3298  029C                     	;# 
  3299  029C                     	;# 
  3300  029D                     	;# 
  3301  030C                     	;# 
  3302  030C                     	;# 
  3303  030D                     	;# 
  3304  030E                     	;# 
  3305  030F                     	;# 
  3306  0310                     	;# 
  3307  0310                     	;# 
  3308  0311                     	;# 
  3309  0312                     	;# 
  3310  0313                     	;# 
  3311  0314                     	;# 
  3312  0314                     	;# 
  3313  0315                     	;# 
  3314  0316                     	;# 
  3315  0317                     	;# 
  3316  0318                     	;# 
  3317  0318                     	;# 
  3318  0319                     	;# 
  3319  031A                     	;# 
  3320  031B                     	;# 
  3321  031C                     	;# 
  3322  031C                     	;# 
  3323  031D                     	;# 
  3324  031E                     	;# 
  3325  031F                     	;# 
  3326  038C                     	;# 
  3327  038D                     	;# 
  3328  038E                     	;# 
  3329  0390                     	;# 
  3330  0391                     	;# 
  3331  0392                     	;# 
  3332  040C                     	;# 
  3333  040D                     	;# 
  3334  040E                     	;# 
  3335  040F                     	;# 
  3336  0410                     	;# 
  3337  0411                     	;# 
  3338  0416                     	;# 
  3339  0416                     	;# 
  3340  0417                     	;# 
  3341  0418                     	;# 
  3342  0418                     	;# 
  3343  0419                     	;# 
  3344  041A                     	;# 
  3345  041A                     	;# 
  3346  041B                     	;# 
  3347  041C                     	;# 
  3348  041C                     	;# 
  3349  041D                     	;# 
  3350  041E                     	;# 
  3351  041F                     	;# 
  3352  048C                     	;# 
  3353  048C                     	;# 
  3354  048D                     	;# 
  3355  048E                     	;# 
  3356  048F                     	;# 
  3357  048F                     	;# 
  3358  0490                     	;# 
  3359  0491                     	;# 
  3360  0492                     	;# 
  3361  0492                     	;# 
  3362  0493                     	;# 
  3363  0494                     	;# 
  3364  0495                     	;# 
  3365  0495                     	;# 
  3366  0496                     	;# 
  3367  0497                     	;# 
  3368  0498                     	;# 
  3369  0499                     	;# 
  3370  049A                     	;# 
  3371  049B                     	;# 
  3372  049C                     	;# 
  3373  049D                     	;# 
  3374  050C                     	;# 
  3375  050C                     	;# 
  3376  050D                     	;# 
  3377  050E                     	;# 
  3378  050F                     	;# 
  3379  050F                     	;# 
  3380  0510                     	;# 
  3381  0511                     	;# 
  3382  0512                     	;# 
  3383  0512                     	;# 
  3384  0513                     	;# 
  3385  0514                     	;# 
  3386  0515                     	;# 
  3387  0515                     	;# 
  3388  0516                     	;# 
  3389  0517                     	;# 
  3390  0518                     	;# 
  3391  0519                     	;# 
  3392  051A                     	;# 
  3393  051B                     	;# 
  3394  051C                     	;# 
  3395  051D                     	;# 
  3396  058C                     	;# 
  3397  058C                     	;# 
  3398  058D                     	;# 
  3399  058E                     	;# 
  3400  058F                     	;# 
  3401  058F                     	;# 
  3402  0590                     	;# 
  3403  0591                     	;# 
  3404  0592                     	;# 
  3405  0593                     	;# 
  3406  060C                     	;# 
  3407  060D                     	;# 
  3408  060E                     	;# 
  3409  060F                     	;# 
  3410  0610                     	;# 
  3411  0611                     	;# 
  3412  0612                     	;# 
  3413  0613                     	;# 
  3414  0614                     	;# 
  3415  0616                     	;# 
  3416  0617                     	;# 
  3417  0618                     	;# 
  3418  0619                     	;# 
  3419  061A                     	;# 
  3420  061B                     	;# 
  3421  061C                     	;# 
  3422  061D                     	;# 
  3423  061E                     	;# 
  3424  068C                     	;# 
  3425  068D                     	;# 
  3426  068E                     	;# 
  3427  068F                     	;# 
  3428  0690                     	;# 
  3429  0691                     	;# 
  3430  0692                     	;# 
  3431  0693                     	;# 
  3432  0694                     	;# 
  3433  070C                     	;# 
  3434  070D                     	;# 
  3435  070E                     	;# 
  3436  070F                     	;# 
  3437  0710                     	;# 
  3438  0711                     	;# 
  3439  0712                     	;# 
  3440  0713                     	;# 
  3441  0714                     	;# 
  3442  0716                     	;# 
  3443  0717                     	;# 
  3444  0718                     	;# 
  3445  0719                     	;# 
  3446  071A                     	;# 
  3447  071B                     	;# 
  3448  071C                     	;# 
  3449  071D                     	;# 
  3450  071E                     	;# 
  3451  0796                     	;# 
  3452  0797                     	;# 
  3453  0798                     	;# 
  3454  0799                     	;# 
  3455  079A                     	;# 
  3456  079B                     	;# 
  3457  080C                     	;# 
  3458  080D                     	;# 
  3459  080E                     	;# 
  3460  080F                     	;# 
  3461  0810                     	;# 
  3462  0811                     	;# 
  3463  0812                     	;# 
  3464  0813                     	;# 
  3465  0814                     	;# 
  3466  081A                     	;# 
  3467  081B                     	;# 
  3468  081C                     	;# 
  3469  081D                     	;# 
  3470  081E                     	;# 
  3471  081F                     	;# 
  3472  088C                     	;# 
  3473  088D                     	;# 
  3474  088E                     	;# 
  3475  088F                     	;# 
  3476  0890                     	;# 
  3477  0891                     	;# 
  3478  0892                     	;# 
  3479  0893                     	;# 
  3480  0895                     	;# 
  3481  0896                     	;# 
  3482  0897                     	;# 
  3483  0898                     	;# 
  3484  0899                     	;# 
  3485  089A                     	;# 
  3486  089B                     	;# 
  3487  090C                     	;# 
  3488  090E                     	;# 
  3489  090F                     	;# 
  3490  091F                     	;# 
  3491  091F                     	;# 
  3492  098F                     	;# 
  3493  098F                     	;# 
  3494  0990                     	;# 
  3495  0991                     	;# 
  3496  0992                     	;# 
  3497  0993                     	;# 
  3498  0994                     	;# 
  3499  0995                     	;# 
  3500  0996                     	;# 
  3501  0997                     	;# 
  3502  0E0F                     	;# 
  3503  0E10                     	;# 
  3504  0E11                     	;# 
  3505  0E12                     	;# 
  3506  0E13                     	;# 
  3507  0E14                     	;# 
  3508  0E15                     	;# 
  3509  0E16                     	;# 
  3510  0E17                     	;# 
  3511  0E18                     	;# 
  3512  0E19                     	;# 
  3513  0E1A                     	;# 
  3514  0E1B                     	;# 
  3515  0E1C                     	;# 
  3516  0E1D                     	;# 
  3517  0E1E                     	;# 
  3518  0E1F                     	;# 
  3519  0E20                     	;# 
  3520  0E21                     	;# 
  3521  0E22                     	;# 
  3522  0E23                     	;# 
  3523  0E24                     	;# 
  3524  0E25                     	;# 
  3525  0E26                     	;# 
  3526  0E27                     	;# 
  3527  0E28                     	;# 
  3528  0E29                     	;# 
  3529  0E2A                     	;# 
  3530  0E2B                     	;# 
  3531  0E2C                     	;# 
  3532  0E2D                     	;# 
  3533  0E2E                     	;# 
  3534  0E2F                     	;# 
  3535  0E30                     	;# 
  3536  0E31                     	;# 
  3537  0E32                     	;# 
  3538  0E33                     	;# 
  3539  0E34                     	;# 
  3540  0E35                     	;# 
  3541  0E36                     	;# 
  3542  0E37                     	;# 
  3543  0E8F                     	;# 
  3544  0E90                     	;# 
  3545  0E91                     	;# 
  3546  0E92                     	;# 
  3547  0E93                     	;# 
  3548  0E94                     	;# 
  3549  0E95                     	;# 
  3550  0E96                     	;# 
  3551  0E97                     	;# 
  3552  0E9C                     	;# 
  3553  0E9D                     	;# 
  3554  0E9E                     	;# 
  3555  0EA1                     	;# 
  3556  0EA2                     	;# 
  3557  0EA3                     	;# 
  3558  0EA4                     	;# 
  3559  0EA5                     	;# 
  3560  0EA9                     	;# 
  3561  0EAA                     	;# 
  3562  0EAB                     	;# 
  3563  0EAC                     	;# 
  3564  0EB1                     	;# 
  3565  0EB2                     	;# 
  3566  0EB3                     	;# 
  3567  0EB8                     	;# 
  3568  0EB9                     	;# 
  3569  0EBA                     	;# 
  3570  0EBB                     	;# 
  3571  0EBC                     	;# 
  3572  0EBD                     	;# 
  3573  0EBE                     	;# 
  3574  0EC3                     	;# 
  3575  0EC5                     	;# 
  3576  0EC6                     	;# 
  3577  0EC7                     	;# 
  3578  0EC8                     	;# 
  3579  0EC9                     	;# 
  3580  0ECA                     	;# 
  3581  0ECB                     	;# 
  3582  0ECC                     	;# 
  3583  0F10                     	;# 
  3584  0F11                     	;# 
  3585  0F12                     	;# 
  3586  0F13                     	;# 
  3587  0F14                     	;# 
  3588  0F15                     	;# 
  3589  0F16                     	;# 
  3590  0F17                     	;# 
  3591  0F18                     	;# 
  3592  0F19                     	;# 
  3593  0F1A                     	;# 
  3594  0F1B                     	;# 
  3595  0F1C                     	;# 
  3596  0F1D                     	;# 
  3597  0F1E                     	;# 
  3598  0F1F                     	;# 
  3599  0F20                     	;# 
  3600  0F21                     	;# 
  3601  0F22                     	;# 
  3602  0F23                     	;# 
  3603  0F24                     	;# 
  3604  0F25                     	;# 
  3605  0F26                     	;# 
  3606  0F27                     	;# 
  3607  0F38                     	;# 
  3608  0F39                     	;# 
  3609  0F3A                     	;# 
  3610  0F3B                     	;# 
  3611  0F3C                     	;# 
  3612  0F3D                     	;# 
  3613  0F3E                     	;# 
  3614  0F3F                     	;# 
  3615  0F40                     	;# 
  3616  0F41                     	;# 
  3617  0F43                     	;# 
  3618  0F44                     	;# 
  3619  0F45                     	;# 
  3620  0F46                     	;# 
  3621  0F47                     	;# 
  3622  0F48                     	;# 
  3623  0F49                     	;# 
  3624  0F4A                     	;# 
  3625  0F4B                     	;# 
  3626  0F4C                     	;# 
  3627  0F4E                     	;# 
  3628  0F4F                     	;# 
  3629  0F50                     	;# 
  3630  0F51                     	;# 
  3631  0F52                     	;# 
  3632  0F53                     	;# 
  3633  0F54                     	;# 
  3634  0F55                     	;# 
  3635  0F56                     	;# 
  3636  0F57                     	;# 
  3637  0F65                     	;# 
  3638  0F68                     	;# 
  3639  0F69                     	;# 
  3640  0F6A                     	;# 
  3641  0F6B                     	;# 
  3642  0FE4                     	;# 
  3643  0FE5                     	;# 
  3644  0FE6                     	;# 
  3645  0FE7                     	;# 
  3646  0FE8                     	;# 
  3647  0FE9                     	;# 
  3648  0FEA                     	;# 
  3649  0FEB                     	;# 
  3650  0FED                     	;# 
  3651  0FEE                     	;# 
  3652  0FEF                     	;_samples
  3653                           
  3654                           	psect	idataBANK2
  3655  10F5                     __pidataBANK2:	
  3656                           
  3657                           ;initializer for ___cgram
  3658  10F5  340C               	retlw	12
  3659  10F6  3412               	retlw	18
  3660  10F7  3412               	retlw	18
  3661  10F8  340C               	retlw	12
  3662  10F9  3400               	retlw	0
  3663  10FA  3400               	retlw	0
  3664  10FB  3400               	retlw	0
  3665  10FC  3400               	retlw	0
  3666  10FD  340A               	retlw	10
  3667  10FE  3415               	retlw	21
  3668  10FF  3411               	retlw	17
  3669  1100  340A               	retlw	10
  3670  1101  3404               	retlw	4
  3671  1102  3400               	retlw	0
  3672  1103  3400               	retlw	0
  3673  1104  3400               	retlw	0
  3674  1105  340A               	retlw	10
  3675  1106  341F               	retlw	31
  3676  1107  341F               	retlw	31
  3677  1108  340E               	retlw	14
  3678  1109  3404               	retlw	4
  3679  110A  3400               	retlw	0
  3680  110B  3400               	retlw	0
  3681  110C  3400               	retlw	0
  3682                           
  3683                           	psect	stringtext
  3684  1800                     __pstringtext:	
  3685  1800                     _dpowers:	
  3686  1800  3401               	retlw	1
  3687  1801  3400               	retlw	0
  3688  1802  3400               	retlw	0
  3689  1803  3400               	retlw	0
  3690  1804  340A               	retlw	10
  3691  1805  3400               	retlw	0
  3692  1806  3400               	retlw	0
  3693  1807  3400               	retlw	0
  3694  1808  3464               	retlw	100
  3695  1809  3400               	retlw	0
  3696  180A  3400               	retlw	0
  3697  180B  3400               	retlw	0
  3698  180C  34E8               	retlw	232
  3699  180D  3403               	retlw	3
  3700  180E  3400               	retlw	0
  3701  180F  3400               	retlw	0
  3702  1810  3410               	retlw	16
  3703  1811  3427               	retlw	39
  3704  1812  3400               	retlw	0
  3705  1813  3400               	retlw	0
  3706  1814  34A0               	retlw	160
  3707  1815  3486               	retlw	134
  3708  1816  3401               	retlw	1
  3709  1817  3400               	retlw	0
  3710  1818  3440               	retlw	64
  3711  1819  3442               	retlw	66
  3712  181A  340F               	retlw	15
  3713  181B  3400               	retlw	0
  3714  181C  3480               	retlw	128
  3715  181D  3496               	retlw	150
  3716  181E  3498               	retlw	152
  3717  181F  3400               	retlw	0
  3718  1820  3400               	retlw	0
  3719  1821  34E1               	retlw	225
  3720  1822  34F5               	retlw	245
  3721  1823  3405               	retlw	5
  3722  1824  3400               	retlw	0
  3723  1825  34CA               	retlw	202
  3724  1826  349A               	retlw	154
  3725  1827  343B               	retlw	59
  3726  1828                     __end_of_dpowers:	
  3727  1828                     __npowers_:	
  3728  1828  3400               	retlw	0
  3729  1829  3480               	retlw	128
  3730  182A  343F               	retlw	63
  3731  182B  34CD               	retlw	205
  3732  182C  34CC               	retlw	204
  3733  182D  343D               	retlw	61
  3734  182E  34D7               	retlw	215
  3735  182F  3423               	retlw	35
  3736  1830  343C               	retlw	60
  3737  1831  3412               	retlw	18
  3738  1832  3483               	retlw	131
  3739  1833  343A               	retlw	58
  3740  1834  34B7               	retlw	183
  3741  1835  34D1               	retlw	209
  3742  1836  3438               	retlw	56
  3743  1837  34C6               	retlw	198
  3744  1838  3427               	retlw	39
  3745  1839  3437               	retlw	55
  3746  183A  3438               	retlw	56
  3747  183B  3486               	retlw	134
  3748  183C  3435               	retlw	53
  3749  183D  34C0               	retlw	192
  3750  183E  34D6               	retlw	214
  3751  183F  3433               	retlw	51
  3752  1840  34CC               	retlw	204
  3753  1841  342B               	retlw	43
  3754  1842  3432               	retlw	50
  3755  1843  3470               	retlw	112
  3756  1844  3489               	retlw	137
  3757  1845  3430               	retlw	48
  3758  1846  34E7               	retlw	231
  3759  1847  34DB               	retlw	219
  3760  1848  342E               	retlw	46
  3761  1849  34E5               	retlw	229
  3762  184A  343C               	retlw	60
  3763  184B  341E               	retlw	30
  3764  184C  3442               	retlw	66
  3765  184D  34A2               	retlw	162
  3766  184E  340D               	retlw	13
  3767  184F                     __end_of__npowers_:	
  3768  184F                     __powers_:	
  3769  184F  3400               	retlw	0
  3770  1850  3480               	retlw	128
  3771  1851  343F               	retlw	63
  3772  1852  3400               	retlw	0
  3773  1853  3420               	retlw	32
  3774  1854  3441               	retlw	65
  3775  1855  3400               	retlw	0
  3776  1856  34C8               	retlw	200
  3777  1857  3442               	retlw	66
  3778  1858  3400               	retlw	0
  3779  1859  347A               	retlw	122
  3780  185A  3444               	retlw	68
  3781  185B  3440               	retlw	64
  3782  185C  341C               	retlw	28
  3783  185D  3446               	retlw	70
  3784  185E  3450               	retlw	80
  3785  185F  34C3               	retlw	195
  3786  1860  3447               	retlw	71
  3787  1861  3424               	retlw	36
  3788  1862  3474               	retlw	116
  3789  1863  3449               	retlw	73
  3790  1864  3497               	retlw	151
  3791  1865  3418               	retlw	24
  3792  1866  344B               	retlw	75
  3793  1867  34BC               	retlw	188
  3794  1868  34BE               	retlw	190
  3795  1869  344C               	retlw	76
  3796  186A  346B               	retlw	107
  3797  186B  346E               	retlw	110
  3798  186C  344E               	retlw	78
  3799  186D  3403               	retlw	3
  3800  186E  3415               	retlw	21
  3801  186F  3450               	retlw	80
  3802  1870  3479               	retlw	121
  3803  1871  34AD               	retlw	173
  3804  1872  3460               	retlw	96
  3805  1873  34F3               	retlw	243
  3806  1874  3449               	retlw	73
  3807  1875  3471               	retlw	113
  3808  1876                     __end_of__powers_:	
  3809  1876                     log@coeff:	
  3810  1876  3400               	retlw	0
  3811  1877  3400               	retlw	0
  3812  1878  3400               	retlw	0
  3813  1879  3400               	retlw	0
  3814  187A  3480               	retlw	128
  3815  187B  343F               	retlw	63
  3816  187C  34F0               	retlw	240
  3817  187D  34FF               	retlw	255
  3818  187E  34BE               	retlw	190
  3819  187F  34E2               	retlw	226
  3820  1880  34A9               	retlw	169
  3821  1881  343E               	retlw	62
  3822  1882  3483               	retlw	131
  3823  1883  3476               	retlw	118
  3824  1884  34BE               	retlw	190
  3825  1885  34AE               	retlw	174
  3826  1886  342B               	retlw	43
  3827  1887  343E               	retlw	62
  3828  1888  343C               	retlw	60
  3829  1889  34C3               	retlw	195
  3830  188A  34BD               	retlw	189
  3831  188B  34D2               	retlw	210
  3832  188C  3413               	retlw	19
  3833  188D  343D               	retlw	61
  3834  188E  3478               	retlw	120
  3835  188F  34D3               	retlw	211
  3836  1890  34BB               	retlw	187
  3837  1891                     __end_oflog@coeff:	
  3838  0016                     _LATA	set	22
  3839  0017                     _LATB	set	23
  3840  0018                     _LATC	set	24
  3841  0011                     _TRISA	set	17
  3842  0012                     _TRISB	set	18
  3843  0013                     _TRISC	set	19
  3844  005F                     _GIE	set	95
  3845  0068                     _RB0	set	104
  3846  0069                     _RB1	set	105
  3847  006A                     _RB2	set	106
  3848  006B                     _RB3	set	107
  3849  006C                     _RB4	set	108
  3850  006D                     _RB5	set	109
  3851  009D                     _ADACQ	set	157
  3852  0099                     _ADACT	set	153
  3853  009B                     _ADCAP	set	155
  3854  0098                     _ADCLK	set	152
  3855  0093                     _ADCON0	set	147
  3856  0093                     _ADCON0bits	set	147
  3857  0094                     _ADCON1	set	148
  3858  0095                     _ADCON2	set	149
  3859  0096                     _ADCON3	set	150
  3860  009E                     _ADPCH	set	158
  3861  009C                     _ADPRE	set	156
  3862  009A                     _ADREF	set	154
  3863  008D                     _ADRESH	set	141
  3864  008C                     _ADRESL	set	140
  3865  0097                     _ADSTAT	set	151
  3866  010F                     _ADLTHH	set	271
  3867  010E                     _ADLTHL	set	270
  3868  010D                     _ADRPT	set	269
  3869  0113                     _ADSTPTH	set	275
  3870  0112                     _ADSTPTL	set	274
  3871  0111                     _ADUTHH	set	273
  3872  0110                     _ADUTHL	set	272
  3873  021F                     _CCPTMRS1bits	set	543
  3874  0290                     _T2CLKCON	set	656
  3875  028E                     _T2CON	set	654
  3876  028E                     _T2CONbits	set	654
  3877  028F                     _T2HLT	set	655
  3878  028D                     _T2PR	set	653
  3879  0291                     _T2RST	set	657
  3880  028C                     _T2TMR	set	652
  3881  038E                     _PWM6CON	set	910
  3882  038D                     _PWM6DCH	set	909
  3883  038C                     _PWM6DCL	set	908
  3884  0716                     _PIE0bits	set	1814
  3885  0710                     _PIR4bits	set	1808
  3886  088D                     _OSCCON1	set	2189
  3887  088F                     _OSCCON3	set	2191
  3888  0891                     _OSCEN	set	2193
  3889  0893                     _OSCFRQ	set	2195
  3890  0892                     _OSCTUNE	set	2194
  3891  090C                     _FVRCON	set	2316
  3892  0E8F                     _PPSLOCK	set	3727
  3893  0E8F                     _PPSLOCKbits	set	3727
  3894  0F38                     _ANSELA	set	3896
  3895  0F43                     _ANSELB	set	3907
  3896  0F4E                     _ANSELC	set	3918
  3897  0F11                     _RA1PPS	set	3857
  3898  0F39                     _WPUA	set	3897
  3899  0F44                     _WPUB	set	3908
  3900  0F4F                     _WPUC	set	3919
  3901  0F65                     _WPUE	set	3941
  3902  1891                     STR_2:	
  3903  1891  3425               	retlw	37	;'%'
  3904  1892  3435               	retlw	53	;'5'
  3905  1893  342E               	retlw	46	;'.'
  3906  1894  3430               	retlw	48	;'0'
  3907  1895  3466               	retlw	102	;'f'
  3908  1896  3420               	retlw	32	;' '
  3909  1897  3420               	retlw	32	;' '
  3910  1898  3400               	retlw	0
  3911  1899                     STR_1:	
  3912  1899  3425               	retlw	37	;'%'
  3913  189A  3433               	retlw	51	;'3'
  3914  189B  342E               	retlw	46	;'.'
  3915  189C  3431               	retlw	49	;'1'
  3916  189D  3466               	retlw	102	;'f'
  3917  189E  3420               	retlw	32	;' '
  3918  189F  3420               	retlw	32	;' '
  3919  18A0  3400               	retlw	0
  3920                           
  3921                           ; #config settings
  3922  0000                     
  3923                           	psect	cinit
  3924  07DB                     start_initialization:	
  3925  07DB                     __initialization:		;BIGRAM
  3926                           
  3927                           ; Initialize objects allocated to BANK2
  3928  07DB  30F5               	movlw	low __pidataBANK2
  3929  07DC  0084               	movwf	4
  3930  07DD  3090               	movlw	(high __pidataBANK2)| (0+128)
  3931  07DE  0085               	movwf	5
  3932  07DF  3020               	movlw	low __pdataBANK2
  3933  07E0  0086               	movwf	6
  3934  07E1  3001               	movlw	high __pdataBANK2
  3935  07E2  0087               	movwf	7
  3936  07E3  3000               	movlw	0
  3937  07E4  00FF               	movwf	btemp+1
  3938  07E5  3018               	movlw	24
  3939  07E6  3190  204D  3187   	fcall	init_ram
  3940                           
  3941                           ; Clear objects allocated to BIGRAM
  3942  07E9  308C               	movlw	low (0+9100)
  3943  07EA  0084               	movwf	4
  3944  07EB  3023               	movlw	high (0+9100)
  3945  07EC  0085               	movwf	5
  3946  07ED  3064               	movlw	100
  3947  07EE  00FE               	movwf	btemp
  3948  07EF  3000               	movlw	0
  3949  07F0  00FF               	movwf	btemp+1
  3950  07F1  3190  2041         	fcall	clear_ram0
  3951                           
  3952                           ; Clear objects allocated to BANK0
  3953  07F3  01EE               	clrf	__pbssBANK0& (0+127)
  3954  07F4  01EF               	clrf	(__pbssBANK0+1)& (0+127)
  3955                           
  3956                           ; Clear objects allocated to BANK1
  3957  07F5  0021               	movlb	1	; select bank1
  3958  07F6  01D6               	clrf	__pbssBANK1& (0+127)
  3959  07F7  01D7               	clrf	(__pbssBANK1+1)& (0+127)
  3960  07F8  01D8               	clrf	(__pbssBANK1+2)& (0+127)
  3961  07F9  01D9               	clrf	(__pbssBANK1+3)& (0+127)
  3962  07FA  01DA               	clrf	(__pbssBANK1+4)& (0+127)
  3963  07FB  01DB               	clrf	(__pbssBANK1+5)& (0+127)
  3964  07FC  01DC               	clrf	(__pbssBANK1+6)& (0+127)
  3965  07FD                     end_of_initialization:	
  3966                           ;End of C runtime variable initialization code
  3967                           
  3968  07FD                     __end_of__initialization:	
  3969  07FD  0020               	movlb	0
  3970  07FE  318D  2D65         	ljmp	_main	;jump to C main() function
  3971                           
  3972                           	psect	bssBANK0
  3973  006E                     __pbssBANK0:	
  3974  006E                     _errno:	
  3975  006E                     	ds	2
  3976                           
  3977                           	psect	bssBANK1
  3978  00D6                     __pbssBANK1:	
  3979  00D6                     LCD_Write_Int@F13684:	
  3980  00D6                     	ds	5
  3981  00DB                     main@sampleIndex:	
  3982  00DB                     	ds	2
  3983                           
  3984                           	psect	dataBANK2
  3985  0120                     __pdataBANK2:	
  3986  0120                     ___cgram:	
  3987  0120                     	ds	24
  3988                           
  3989                           	psect	inittext
  3990  104D                     init_ram:	
  3991  104D  00FE               	movwf	126
  3992  104E                     initloop:	
  3993  104E  0012               	moviw fsr0++
  3994  104F  001E               	movwi fsr1++
  3995  1050  3001               	movlw	1
  3996  1051  02FE               	subwf	126,f
  3997  1052  3000               	movlw	0
  3998  1053  3BFF               	subwfb	127,f
  3999  1054  087F               	movf	127,w
  4000  1055  047E               	iorwf	126,w
  4001  1056  1903               	btfsc	3,2
  4002  1057  3400               	retlw	0
  4003  1058  284E               	goto	initloop
  4004                           
  4005                           	psect	clrtext
  4006  1041                     clear_ram0:	
  4007                           ;	Called with FSR0 containing the base address, and
  4008                           ;	btemp/btemp+1 has the size to clear
  4009                           
  4010  1041  0064               	clrwdt	;clear the watchdog before getting into this loop
  4011  1042                     clrloop0:	
  4012  1042  0180               	clrf	0	;clear RAM location pointed to by FSR
  4013  1043  3101               	addfsr 0,1
  4014  1044  3001               	movlw	1
  4015  1045  02FE               	subwf	126,f
  4016  1046  3000               	movlw	0
  4017  1047  3BFF               	subwfb	127,f
  4018  1048  087F               	movf	127,w
  4019  1049  047E               	iorwf	126,w
  4020  104A  1903               	btfsc	3,2
  4021  104B  3400               	retlw	0	;all done for this memory range, return
  4022  104C  2842               	goto	clrloop0	;have we reached the end yet?
  4023                           
  4024                           	psect	cstackBANK1
  4025  00A0                     __pcstackBANK1:	
  4026  00A0                     _sprintf$1011:	
  4027                           
  4028                           ; 3 bytes @ 0x0
  4029  00A0                     	ds	3
  4030  00A3                     sprintf@ap:	
  4031                           
  4032                           ; 1 bytes @ 0x3
  4033  00A3                     	ds	1
  4034  00A4                     sprintf@val:	
  4035                           
  4036                           ; 4 bytes @ 0x4
  4037  00A4                     	ds	4
  4038  00A8                     sprintf@flag:	
  4039                           
  4040                           ; 2 bytes @ 0x8
  4041  00A8                     	ds	2
  4042  00AA                     sprintf@width:	
  4043                           
  4044                           ; 2 bytes @ 0xA
  4045  00AA                     	ds	2
  4046  00AC                     sprintf@tmpval:	
  4047                           
  4048                           ; 4 bytes @ 0xC
  4049  00AC                     	ds	4
  4050  00B0                     sprintf@exp:	
  4051                           
  4052                           ; 2 bytes @ 0x10
  4053  00B0                     	ds	2
  4054  00B2                     sprintf@fval:	
  4055                           
  4056                           ; 3 bytes @ 0x12
  4057  00B2                     	ds	3
  4058  00B5                     sprintf@sp:	
  4059                           
  4060                           ; 1 bytes @ 0x15
  4061  00B5                     	ds	1
  4062  00B6                     sprintf@prec:	
  4063                           
  4064                           ; 2 bytes @ 0x16
  4065  00B6                     	ds	2
  4066  00B8                     sprintf@c:	
  4067                           
  4068                           ; 1 bytes @ 0x18
  4069  00B8                     	ds	1
  4070  00B9                     main@s:	
  4071                           
  4072                           ; 8 bytes @ 0x19
  4073  00B9                     	ds	8
  4074  00C1                     _main$1007:	
  4075                           
  4076                           ; 3 bytes @ 0x21
  4077  00C1                     	ds	3
  4078  00C4                     main@R:	
  4079                           
  4080                           ; 3 bytes @ 0x24
  4081  00C4                     	ds	3
  4082  00C7                     main@setpoint:	
  4083                           
  4084                           ; 2 bytes @ 0x27
  4085  00C7                     	ds	2
  4086  00C9                     main@totals:	
  4087                           
  4088                           ; 4 bytes @ 0x29
  4089  00C9                     	ds	4
  4090  00CD                     main@readTemperatureOld:	
  4091                           
  4092                           ; 2 bytes @ 0x2D
  4093  00CD                     	ds	2
  4094  00CF                     main@outCurrent:	
  4095                           
  4096                           ; 2 bytes @ 0x2F
  4097  00CF                     	ds	2
  4098  00D1                     main@readTemperature:	
  4099                           
  4100                           ; 2 bytes @ 0x31
  4101  00D1                     	ds	2
  4102  00D3                     main@steinhart:	
  4103                           
  4104                           ; 3 bytes @ 0x33
  4105  00D3                     	ds	3
  4106                           
  4107                           	psect	cstackCOMMON
  4108  0070                     __pcstackCOMMON:	
  4109  0070                     ?_isdigit:	
  4110  0070                     ?___ftge:	
  4111                           ; 1 bit 
  4112                           
  4113  0070                     ?_OSCILLATOR_Initialize:	
  4114                           ; 1 bit 
  4115                           
  4116  0070                     ??_OSCILLATOR_Initialize:	
  4117                           ; 1 bytes @ 0x0
  4118                           
  4119  0070                     ?_ADCC_Initialize:	
  4120                           ; 1 bytes @ 0x0
  4121                           
  4122  0070                     ??_ADCC_Initialize:	
  4123                           ; 1 bytes @ 0x0
  4124                           
  4125  0070                     ?_PWM6_Initialize:	
  4126                           ; 1 bytes @ 0x0
  4127                           
  4128  0070                     ??_PWM6_Initialize:	
  4129                           ; 1 bytes @ 0x0
  4130                           
  4131  0070                     ?_LCD_Cmd:	
  4132                           ; 1 bytes @ 0x0
  4133                           
  4134  0070                     ?_LCD_Write_Char:	
  4135                           ; 1 bytes @ 0x0
  4136                           
  4137  0070                     ??_isdigit:	
  4138                           ; 1 bytes @ 0x0
  4139                           
  4140  0070                     ?_PIN_MANAGER_Initialize:	
  4141                           ; 1 bytes @ 0x0
  4142                           
  4143  0070                     ??_PIN_MANAGER_Initialize:	
  4144                           ; 1 bytes @ 0x0
  4145                           
  4146  0070                     ?_TMR2_Initialize:	
  4147                           ; 1 bytes @ 0x0
  4148                           
  4149  0070                     ??_TMR2_Initialize:	
  4150                           ; 1 bytes @ 0x0
  4151                           
  4152  0070                     ?_SYSTEM_Initialize:	
  4153                           ; 1 bytes @ 0x0
  4154                           
  4155  0070                     ?_InitCustomChars:	
  4156                           ; 1 bytes @ 0x0
  4157                           
  4158  0070                     ?_LCD_Port:	
  4159                           ; 1 bytes @ 0x0
  4160                           
  4161  0070                     ??_LCD_Port:	
  4162                           ; 1 bytes @ 0x0
  4163                           
  4164  0070                     ?_LCD_Clear:	
  4165                           ; 1 bytes @ 0x0
  4166                           
  4167  0070                     ?_LCD_Init:	
  4168                           ; 1 bytes @ 0x0
  4169                           
  4170  0070                     ?_LCD_Write_String:	
  4171                           ; 1 bytes @ 0x0
  4172                           
  4173  0070                     ?_PWM6_LoadDutyValue:	
  4174                           ; 1 bytes @ 0x0
  4175                           
  4176  0070                     ?_main:	
  4177                           ; 1 bytes @ 0x0
  4178                           
  4179  0070                     ?_ADCC_GetSingleConversion:	
  4180                           ; 1 bytes @ 0x0
  4181                           
  4182  0070                     ?___awmod:	
  4183                           ; 2 bytes @ 0x0
  4184                           
  4185  0070                     ?___ftpack:	
  4186                           ; 2 bytes @ 0x0
  4187                           
  4188  0070                     ?_frexp:	
  4189                           ; 3 bytes @ 0x0
  4190                           
  4191  0070                     ?___ftneg:	
  4192                           ; 3 bytes @ 0x0
  4193                           
  4194  0070                     ?__tdiv_to_l_:	
  4195                           ; 3 bytes @ 0x0
  4196                           
  4197  0070                     ?__div_to_l_:	
  4198                           ; 4 bytes @ 0x0
  4199                           
  4200  0070                     ?___aldiv:	
  4201                           ; 4 bytes @ 0x0
  4202                           
  4203  0070                     ?___lldiv:	
  4204                           ; 4 bytes @ 0x0
  4205                           
  4206  0070                     ?___llmod:	
  4207                           ; 4 bytes @ 0x0
  4208                           
  4209  0070                     PIN_MANAGER_Initialize@state:	
  4210                           ; 4 bytes @ 0x0
  4211                           
  4212  0070                     LCD_Port@a:	
  4213                           ; 1 bytes @ 0x0
  4214                           
  4215  0070                     _isdigit$719:	
  4216                           ; 1 bytes @ 0x0
  4217                           
  4218  0070                     PWM6_LoadDutyValue@dutyValue:	
  4219                           ; 1 bytes @ 0x0
  4220                           
  4221  0070                     ___awmod@divisor:	
  4222                           ; 2 bytes @ 0x0
  4223                           
  4224  0070                     __div_to_l_@f1:	
  4225                           ; 2 bytes @ 0x0
  4226                           
  4227  0070                     ___ftpack@arg:	
  4228                           ; 3 bytes @ 0x0
  4229                           
  4230  0070                     __tdiv_to_l_@f1:	
  4231                           ; 3 bytes @ 0x0
  4232                           
  4233  0070                     ___ftge@ff1:	
  4234                           ; 3 bytes @ 0x0
  4235                           
  4236  0070                     ___ftneg@f1:	
  4237                           ; 3 bytes @ 0x0
  4238                           
  4239  0070                     frexp@value:	
  4240                           ; 3 bytes @ 0x0
  4241                           
  4242  0070                     ___aldiv@divisor:	
  4243                           ; 3 bytes @ 0x0
  4244                           
  4245  0070                     ___lldiv@divisor:	
  4246                           ; 4 bytes @ 0x0
  4247                           
  4248  0070                     ___llmod@divisor:	
  4249                           ; 4 bytes @ 0x0
  4250                           
  4251                           
  4252                           ; 4 bytes @ 0x0
  4253  0070                     	ds	1
  4254  0071                     ??_LCD_Cmd:	
  4255  0071                     ??_LCD_Write_Char:	
  4256                           ; 1 bytes @ 0x1
  4257                           
  4258  0071                     ??_SYSTEM_Initialize:	
  4259                           ; 1 bytes @ 0x1
  4260                           
  4261  0071                     isdigit@c:	
  4262                           ; 1 bytes @ 0x1
  4263                           
  4264                           
  4265                           ; 1 bytes @ 0x1
  4266  0071                     	ds	1
  4267  0072                     ??_PWM6_LoadDutyValue:	
  4268  0072                     LCD_Cmd@a:	
  4269                           ; 1 bytes @ 0x2
  4270                           
  4271  0072                     LCD_Write_Char@temp:	
  4272                           ; 1 bytes @ 0x2
  4273                           
  4274  0072                     ___awmod@dividend:	
  4275                           ; 1 bytes @ 0x2
  4276                           
  4277                           
  4278                           ; 2 bytes @ 0x2
  4279  0072                     	ds	1
  4280  0073                     ??_LCD_Clear:	
  4281  0073                     ?_LCD_Set_Cursor:	
  4282                           ; 1 bytes @ 0x3
  4283                           
  4284  0073                     ??_LCD_Init:	
  4285                           ; 1 bytes @ 0x3
  4286                           
  4287  0073                     ??_ADCC_GetSingleConversion:	
  4288                           ; 1 bytes @ 0x3
  4289                           
  4290  0073                     ??___ftneg:	
  4291                           ; 1 bytes @ 0x3
  4292                           
  4293  0073                     LCD_Set_Cursor@y:	
  4294                           ; 1 bytes @ 0x3
  4295                           
  4296  0073                     LCD_Write_Char@y:	
  4297                           ; 1 bytes @ 0x3
  4298                           
  4299  0073                     ADCC_GetSingleConversion@channel:	
  4300                           ; 1 bytes @ 0x3
  4301                           
  4302  0073                     ___ftpack@exp:	
  4303                           ; 1 bytes @ 0x3
  4304                           
  4305  0073                     frexp@eptr:	
  4306                           ; 1 bytes @ 0x3
  4307                           
  4308  0073                     __div_to_l_@f2:	
  4309                           ; 1 bytes @ 0x3
  4310                           
  4311  0073                     __tdiv_to_l_@f2:	
  4312                           ; 3 bytes @ 0x3
  4313                           
  4314  0073                     ___ftge@ff2:	
  4315                           ; 3 bytes @ 0x3
  4316                           
  4317                           
  4318                           ; 3 bytes @ 0x3
  4319  0073                     	ds	1
  4320  0074                     ??_frexp:	
  4321  0074                     ??_LCD_Set_Cursor:	
  4322                           ; 1 bytes @ 0x4
  4323                           
  4324  0074                     ??___awmod:	
  4325                           ; 1 bytes @ 0x4
  4326                           
  4327  0074                     LCD_Write_Char@a:	
  4328                           ; 1 bytes @ 0x4
  4329                           
  4330  0074                     ___ftpack@sign:	
  4331                           ; 1 bytes @ 0x4
  4332                           
  4333  0074                     ___aldiv@dividend:	
  4334                           ; 1 bytes @ 0x4
  4335                           
  4336  0074                     ___lldiv@dividend:	
  4337                           ; 4 bytes @ 0x4
  4338                           
  4339  0074                     ___llmod@dividend:	
  4340                           ; 4 bytes @ 0x4
  4341                           
  4342                           
  4343                           ; 4 bytes @ 0x4
  4344  0074                     	ds	1
  4345  0075                     ??___ftpack:	
  4346  0075                     ??_InitCustomChars:	
  4347                           ; 1 bytes @ 0x5
  4348                           
  4349  0075                     ??_LCD_Write_String:	
  4350                           ; 1 bytes @ 0x5
  4351                           
  4352  0075                     LCD_Init@style:	
  4353                           ; 1 bytes @ 0x5
  4354                           
  4355  0075                     ___awmod@counter:	
  4356                           ; 1 bytes @ 0x5
  4357                           
  4358                           
  4359                           ; 1 bytes @ 0x5
  4360  0075                     	ds	1
  4361  0076                     ??__tdiv_to_l_:	
  4362  0076                     ??__div_to_l_:	
  4363                           ; 1 bytes @ 0x6
  4364                           
  4365  0076                     ??___ftge:	
  4366                           ; 1 bytes @ 0x6
  4367                           
  4368  0076                     InitCustomChars@i:	
  4369                           ; 1 bytes @ 0x6
  4370                           
  4371  0076                     LCD_Set_Cursor@x:	
  4372                           ; 1 bytes @ 0x6
  4373                           
  4374  0076                     ___awmod@sign:	
  4375                           ; 1 bytes @ 0x6
  4376                           
  4377  0076                     LCD_Write_String@i:	
  4378                           ; 1 bytes @ 0x6
  4379                           
  4380                           
  4381                           ; 2 bytes @ 0x6
  4382  0076                     	ds	1
  4383  0077                     ?___awdiv:	
  4384  0077                     LCD_Set_Cursor@z:	
  4385                           ; 2 bytes @ 0x7
  4386                           
  4387  0077                     ___awdiv@divisor:	
  4388                           ; 1 bytes @ 0x7
  4389                           
  4390                           
  4391                           ; 2 bytes @ 0x7
  4392  0077                     	ds	1
  4393  0078                     ??___aldiv:	
  4394  0078                     ??___lldiv:	
  4395                           ; 1 bytes @ 0x8
  4396                           
  4397  0078                     ??___llmod:	
  4398                           ; 1 bytes @ 0x8
  4399                           
  4400  0078                     ?___awtoft:	
  4401                           ; 1 bytes @ 0x8
  4402                           
  4403  0078                     ?___lltoft:	
  4404                           ; 3 bytes @ 0x8
  4405                           
  4406  0078                     ?___lwtoft:	
  4407                           ; 3 bytes @ 0x8
  4408                           
  4409  0078                     LCD_Set_Cursor@w:	
  4410                           ; 3 bytes @ 0x8
  4411                           
  4412  0078                     LCD_Write_String@a:	
  4413                           ; 1 bytes @ 0x8
  4414                           
  4415  0078                     ___awtoft@c:	
  4416                           ; 1 bytes @ 0x8
  4417                           
  4418  0078                     ___lwtoft@c:	
  4419                           ; 2 bytes @ 0x8
  4420                           
  4421  0078                     ___lltoft@c:	
  4422                           ; 2 bytes @ 0x8
  4423                           
  4424                           
  4425                           ; 4 bytes @ 0x8
  4426  0078                     	ds	1
  4427  0079                     LCD_Set_Cursor@temp:	
  4428  0079                     ___llmod@counter:	
  4429                           ; 1 bytes @ 0x9
  4430                           
  4431  0079                     ___awdiv@dividend:	
  4432                           ; 1 bytes @ 0x9
  4433                           
  4434  0079                     ___lldiv@quotient:	
  4435                           ; 2 bytes @ 0x9
  4436                           
  4437                           
  4438                           ; 4 bytes @ 0x9
  4439  0079                     	ds	2
  4440  007B                     ??___awdiv:	
  4441  007B                     ??___awtoft:	
  4442                           ; 1 bytes @ 0xB
  4443                           
  4444  007B                     ??___lwtoft:	
  4445                           ; 1 bytes @ 0xB
  4446                           
  4447                           
  4448                           ; 1 bytes @ 0xB
  4449  007B                     	ds	1
  4450  007C                     ??___wmul:	
  4451  007C                     ??___lltoft:	
  4452                           ; 1 bytes @ 0xC
  4453                           
  4454  007C                     ___wmul@product:	
  4455                           ; 1 bytes @ 0xC
  4456                           
  4457                           
  4458                           ; 2 bytes @ 0xC
  4459  007C                     	ds	1
  4460  007D                     ___awtoft@sign:	
  4461  007D                     ___lldiv@counter:	
  4462                           ; 1 bytes @ 0xD
  4463                           
  4464  007D                     ___lltoft@exp:	
  4465                           ; 1 bytes @ 0xD
  4466                           
  4467                           
  4468                           ; 1 bytes @ 0xD
  4469  007D                     	ds	1
  4470  007E                     ??_eval_poly:	
  4471  007E                     ??___ftsub:	
  4472                           ; 1 bytes @ 0xE
  4473                           
  4474                           
  4475                           	psect	cstackBANK0
  4476  0020                     __pcstackBANK0:	
  4477                           ; 1 bytes @ 0xE
  4478                           
  4479  0020                     ?___ftdiv:	
  4480  0020                     ___aldiv@counter:	
  4481                           ; 3 bytes @ 0x0
  4482                           
  4483  0020                     ___awdiv@counter:	
  4484                           ; 1 bytes @ 0x0
  4485                           
  4486  0020                     ___ftdiv@f2:	
  4487                           ; 1 bytes @ 0x0
  4488                           
  4489  0020                     __div_to_l_@quot:	
  4490                           ; 3 bytes @ 0x0
  4491                           
  4492  0020                     __tdiv_to_l_@quot:	
  4493                           ; 4 bytes @ 0x0
  4494                           
  4495                           
  4496                           ; 4 bytes @ 0x0
  4497  0020                     	ds	1
  4498  0021                     ___aldiv@sign:	
  4499  0021                     ___awdiv@sign:	
  4500                           ; 1 bytes @ 0x1
  4501                           
  4502                           
  4503                           ; 1 bytes @ 0x1
  4504  0021                     	ds	1
  4505  0022                     ___awdiv@quotient:	
  4506  0022                     ___aldiv@quotient:	
  4507                           ; 2 bytes @ 0x2
  4508                           
  4509                           
  4510                           ; 4 bytes @ 0x2
  4511  0022                     	ds	1
  4512  0023                     ___ftdiv@f1:	
  4513                           
  4514                           ; 3 bytes @ 0x3
  4515  0023                     	ds	1
  4516  0024                     ?___wmul:	
  4517  0024                     __div_to_l_@cntr:	
  4518                           ; 2 bytes @ 0x4
  4519                           
  4520  0024                     __tdiv_to_l_@cntr:	
  4521                           ; 1 bytes @ 0x4
  4522                           
  4523  0024                     ___wmul@multiplier:	
  4524                           ; 1 bytes @ 0x4
  4525                           
  4526                           
  4527                           ; 2 bytes @ 0x4
  4528  0024                     	ds	1
  4529  0025                     __div_to_l_@exp1:	
  4530  0025                     __tdiv_to_l_@exp1:	
  4531                           ; 1 bytes @ 0x5
  4532                           
  4533                           
  4534                           ; 1 bytes @ 0x5
  4535  0025                     	ds	1
  4536  0026                     ??___ftdiv:	
  4537  0026                     ___wmul@multiplicand:	
  4538                           ; 1 bytes @ 0x6
  4539                           
  4540                           
  4541                           ; 2 bytes @ 0x6
  4542  0026                     	ds	2
  4543  0028                     ?___ftmul:	
  4544  0028                     ___ftmul@f1:	
  4545                           ; 3 bytes @ 0x8
  4546                           
  4547                           
  4548                           ; 3 bytes @ 0x8
  4549  0028                     	ds	2
  4550  002A                     ___ftdiv@cntr:	
  4551                           
  4552                           ; 1 bytes @ 0xA
  4553  002A                     	ds	1
  4554  002B                     ___ftdiv@f3:	
  4555  002B                     ___ftmul@f2:	
  4556                           ; 3 bytes @ 0xB
  4557                           
  4558                           
  4559                           ; 3 bytes @ 0xB
  4560  002B                     	ds	3
  4561  002E                     ??___ftmul:	
  4562  002E                     ___ftdiv@exp:	
  4563                           ; 1 bytes @ 0xE
  4564                           
  4565                           
  4566                           ; 1 bytes @ 0xE
  4567  002E                     	ds	1
  4568  002F                     ___ftdiv@sign:	
  4569                           
  4570                           ; 1 bytes @ 0xF
  4571  002F                     	ds	3
  4572  0032                     ___ftmul@exp:	
  4573                           
  4574                           ; 1 bytes @ 0x12
  4575  0032                     	ds	1
  4576  0033                     ___ftmul@f3_as_product:	
  4577                           
  4578                           ; 3 bytes @ 0x13
  4579  0033                     	ds	3
  4580  0036                     ___ftmul@cntr:	
  4581                           
  4582                           ; 1 bytes @ 0x16
  4583  0036                     	ds	1
  4584  0037                     ___ftmul@sign:	
  4585                           
  4586                           ; 1 bytes @ 0x17
  4587  0037                     	ds	1
  4588  0038                     ?_fround:	
  4589  0038                     ?_scale:	
  4590                           ; 3 bytes @ 0x18
  4591                           
  4592                           
  4593                           ; 3 bytes @ 0x18
  4594  0038                     	ds	3
  4595  003B                     ??_fround:	
  4596  003B                     ??_scale:	
  4597                           ; 1 bytes @ 0x1B
  4598                           
  4599                           
  4600                           ; 1 bytes @ 0x1B
  4601  003B                     	ds	2
  4602  003D                     _scale$1010:	
  4603                           
  4604                           ; 3 bytes @ 0x1D
  4605  003D                     	ds	2
  4606  003F                     _fround$1009:	
  4607                           
  4608                           ; 3 bytes @ 0x1F
  4609  003F                     	ds	1
  4610  0040                     scale@scl:	
  4611                           
  4612                           ; 1 bytes @ 0x20
  4613  0040                     	ds	1
  4614  0041                     ?___fttol:	
  4615  0041                     ___fttol@f1:	
  4616                           ; 4 bytes @ 0x21
  4617                           
  4618                           
  4619                           ; 3 bytes @ 0x21
  4620  0041                     	ds	1
  4621  0042                     _fround$1008:	
  4622                           
  4623                           ; 3 bytes @ 0x22
  4624  0042                     	ds	3
  4625  0045                     ??___fttol:	
  4626  0045                     fround@prec:	
  4627                           ; 1 bytes @ 0x25
  4628                           
  4629                           
  4630                           ; 1 bytes @ 0x25
  4631  0045                     	ds	1
  4632  0046                     ?___ftadd:	
  4633  0046                     ___ftadd@f1:	
  4634                           ; 3 bytes @ 0x26
  4635                           
  4636                           
  4637                           ; 3 bytes @ 0x26
  4638  0046                     	ds	3
  4639  0049                     ___fttol@sign1:	
  4640  0049                     ___ftadd@f2:	
  4641                           ; 1 bytes @ 0x29
  4642                           
  4643                           
  4644                           ; 3 bytes @ 0x29
  4645  0049                     	ds	1
  4646  004A                     ___fttol@lval:	
  4647                           
  4648                           ; 4 bytes @ 0x2A
  4649  004A                     	ds	2
  4650  004C                     ??___ftadd:	
  4651                           
  4652                           ; 1 bytes @ 0x2C
  4653  004C                     	ds	2
  4654  004E                     ___fttol@exp1:	
  4655                           
  4656                           ; 1 bytes @ 0x2E
  4657  004E                     	ds	2
  4658  0050                     ___ftadd@sign:	
  4659                           
  4660                           ; 1 bytes @ 0x30
  4661  0050                     	ds	1
  4662  0051                     ___ftadd@exp2:	
  4663                           
  4664                           ; 1 bytes @ 0x31
  4665  0051                     	ds	1
  4666  0052                     ___ftadd@exp1:	
  4667                           
  4668                           ; 1 bytes @ 0x32
  4669  0052                     	ds	1
  4670  0053                     ?_eval_poly:	
  4671  0053                     ?___ftsub:	
  4672                           ; 3 bytes @ 0x33
  4673                           
  4674  0053                     ___ftsub@f2:	
  4675                           ; 3 bytes @ 0x33
  4676                           
  4677  0053                     eval_poly@x:	
  4678                           ; 3 bytes @ 0x33
  4679                           
  4680                           
  4681                           ; 3 bytes @ 0x33
  4682  0053                     	ds	3
  4683  0056                     eval_poly@d:	
  4684  0056                     ___ftsub@f1:	
  4685                           ; 2 bytes @ 0x36
  4686                           
  4687                           
  4688                           ; 3 bytes @ 0x36
  4689  0056                     	ds	2
  4690  0058                     eval_poly@n:	
  4691                           
  4692                           ; 2 bytes @ 0x38
  4693  0058                     	ds	1
  4694  0059                     ?_sprintf:	
  4695  0059                     sprintf@f:	
  4696                           ; 2 bytes @ 0x39
  4697                           
  4698                           
  4699                           ; 2 bytes @ 0x39
  4700  0059                     	ds	1
  4701  005A                     eval_poly@res:	
  4702                           
  4703                           ; 3 bytes @ 0x3A
  4704  005A                     	ds	3
  4705  005D                     ?_log:	
  4706  005D                     log@x:	
  4707                           ; 3 bytes @ 0x3D
  4708                           
  4709                           
  4710                           ; 3 bytes @ 0x3D
  4711  005D                     	ds	1
  4712  005E                     ??_sprintf:	
  4713                           
  4714                           ; 1 bytes @ 0x3E
  4715  005E                     	ds	2
  4716  0060                     ??_log:	
  4717                           
  4718                           ; 1 bytes @ 0x40
  4719  0060                     	ds	1
  4720  0061                     log@exponent:	
  4721                           
  4722                           ; 2 bytes @ 0x41
  4723  0061                     	ds	3
  4724  0064                     ??_main:	
  4725                           
  4726                           ; 1 bytes @ 0x44
  4727  0064                     	ds	10
  4728                           
  4729                           	psect	maintext
  4730  0D65                     __pmaintext:	
  4731 ;;
  4732 ;;Main: autosize = 0, tempsize = 10, incstack = 0, save=0
  4733 ;;
  4734 ;; *************** function _main *****************
  4735 ;; Defined at:
  4736 ;;		line 12 in file "main.c"
  4737 ;; Parameters:    Size  Location     Type
  4738 ;;		None
  4739 ;; Auto vars:     Size  Location     Type
  4740 ;;  s               8   25[BANK1 ] unsigned char [8]
  4741 ;;  totals          4   41[BANK1 ] long 
  4742 ;;  steinhart       3   51[BANK1 ] float 
  4743 ;;  R               3   36[BANK1 ] float 
  4744 ;;  readTemperat    2   49[BANK1 ] unsigned int 
  4745 ;;  outCurrent      2   47[BANK1 ] unsigned int 
  4746 ;;  readTemperat    2   45[BANK1 ] unsigned int 
  4747 ;;  setpoint        2   39[BANK1 ] unsigned int 
  4748 ;; Return value:  Size  Location     Type
  4749 ;;                  1    wreg      void 
  4750 ;; Registers used:
  4751 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4752 ;; Tracked objects:
  4753 ;;		On entry : B1F/0
  4754 ;;		On exit  : 0/0
  4755 ;;		Unchanged: 0/0
  4756 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4757 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4758 ;;      Locals:         0       0      29       0       0       0       0       0       0       0       0       0       
      +0       0
  4759 ;;      Temps:          0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4760 ;;      Totals:         0      10      29       0       0       0       0       0       0       0       0       0       
      +0       0
  4761 ;;Total ram usage:       39 bytes
  4762 ;; Hardware stack levels required when called:    4
  4763 ;; This function calls:
  4764 ;;		_ADCC_GetSingleConversion
  4765 ;;		_InitCustomChars
  4766 ;;		_LCD_Clear
  4767 ;;		_LCD_Init
  4768 ;;		_LCD_Set_Cursor
  4769 ;;		_LCD_Write_String
  4770 ;;		_PWM6_LoadDutyValue
  4771 ;;		_SYSTEM_Initialize
  4772 ;;		___aldiv
  4773 ;;		___ftadd
  4774 ;;		___ftdiv
  4775 ;;		___ftsub
  4776 ;;		___lwtoft
  4777 ;;		_log
  4778 ;;		_sprintf
  4779 ;; This function is called by:
  4780 ;;		Startup code after reset
  4781 ;; This function uses a non-reentrant model
  4782 ;;
  4783                           
  4784                           
  4785                           ;psect for function _main
  4786  0D65                     _main:	
  4787                           
  4788                           ;main.c: 14: SYSTEM_Initialize();
  4789                           
  4790                           ;incstack = 0
  4791                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4792  0D65  3190  2091  318D   	fcall	_SYSTEM_Initialize
  4793                           
  4794                           ;main.c: 16: LCD_Init(0X00);
  4795  0D68  3000               	movlw	0
  4796  0D69  3193  23F3  318D   	fcall	_LCD_Init
  4797                           
  4798                           ;main.c: 18: _delay((unsigned long)((100)*(1000000/4000.0)));
  4799  0D6C  3021               	movlw	33
  4800  0D6D  0020               	movlb	0	; select bank0
  4801  0D6E  00E5               	movwf	??_main+1
  4802  0D6F  3076               	movlw	118
  4803  0D70  00E4               	movwf	??_main
  4804  0D71                     u4777:	
  4805  0D71  0BE4               	decfsz	??_main,f
  4806  0D72  2D71               	goto	u4777
  4807  0D73  0BE5               	decfsz	??_main+1,f
  4808  0D74  2D71               	goto	u4777
  4809  0D75  0000               	nop
  4810                           
  4811                           ;main.c: 20: LCD_Clear();
  4812  0D76  3190  2030  318D   	fcall	_LCD_Clear
  4813                           
  4814                           ;main.c: 22: InitCustomChars();
  4815  0D79  3191  219B  318D   	fcall	_InitCustomChars
  4816                           
  4817                           ;main.c: 24: uint16_t readTemperature, setpoint = 70, outCurrent = 1023, readTemperature
      +                          Old = 20;
  4818  0D7C  3046               	movlw	70
  4819  0D7D  0021               	movlb	1	; select bank1
  4820  0D7E  00C7               	movwf	main@setpoint^(0+128)
  4821  0D7F  3000               	movlw	0
  4822  0D80  00C8               	movwf	(main@setpoint^(0+128)+1)
  4823  0D81  30FF               	movlw	255
  4824  0D82  00CF               	movwf	main@outCurrent^(0+128)
  4825  0D83  3003               	movlw	3
  4826  0D84  00D0               	movwf	(main@outCurrent^(0+128)+1)
  4827  0D85  3014               	movlw	20
  4828  0D86  00CD               	movwf	main@readTemperatureOld^(0+128)
  4829  0D87  3000               	movlw	0
  4830  0D88  00CE               	movwf	(main@readTemperatureOld^(0+128)+1)
  4831                           
  4832                           ;main.c: 26: float R, steinhart;
  4833                           ;main.c: 28: char s[8];
  4834                           ;main.c: 30: static uint16_t sampleIndex = 0;
  4835                           ;main.c: 32: int32_t totals = 0;
  4836  0D89  3000               	movlw	0
  4837  0D8A  00CC               	movwf	(main@totals+3)^(0+128)
  4838  0D8B  3000               	movlw	0
  4839  0D8C  00CB               	movwf	(main@totals+2)^(0+128)
  4840  0D8D  3000               	movlw	0
  4841  0D8E  00CA               	movwf	(main@totals+1)^(0+128)
  4842  0D8F  3000               	movlw	0
  4843  0D90  00C9               	movwf	main@totals^(0+128)
  4844  0D91                     l3568:	
  4845                           ;main.c: 36: while (1)
  4846                           
  4847                           
  4848                           ;main.c: 37: {
  4849                           ;main.c: 38: readTemperature = ADCC_GetSingleConversion(2);
  4850  0D91  3002               	movlw	2
  4851  0D92  3190  2066  318D   	fcall	_ADCC_GetSingleConversion
  4852  0D95  0871               	movf	?_ADCC_GetSingleConversion+1,w
  4853  0D96  0021               	movlb	1	; select bank1
  4854  0D97  00D2               	movwf	(main@readTemperature+1)^(0+128)
  4855  0D98  0870               	movf	?_ADCC_GetSingleConversion,w
  4856  0D99  00D1               	movwf	main@readTemperature^(0+128)
  4857                           
  4858                           ;main.c: 40: totals = totals - samples[sampleIndex];
  4859  0D9A  0849               	movf	main@totals^(0+128),w
  4860  0D9B  0020               	movlb	0	; select bank0
  4861  0D9C  00E4               	movwf	??_main
  4862  0D9D  0021               	movlb	1	; select bank1
  4863  0D9E  084A               	movf	(main@totals+1)^(0+128),w
  4864  0D9F  0020               	movlb	0	; select bank0
  4865  0DA0  00E5               	movwf	??_main+1
  4866  0DA1  0021               	movlb	1	; select bank1
  4867  0DA2  084B               	movf	(main@totals+2)^(0+128),w
  4868  0DA3  0020               	movlb	0	; select bank0
  4869  0DA4  00E6               	movwf	??_main+2
  4870  0DA5  0021               	movlb	1	; select bank1
  4871  0DA6  084C               	movf	(main@totals+3)^(0+128),w
  4872  0DA7  0020               	movlb	0	; select bank0
  4873  0DA8  00E7               	movwf	??_main+3
  4874  0DA9  0021               	movlb	1	; select bank1
  4875  0DAA  085C               	movf	(main@sampleIndex+1)^(0+128),w
  4876  0DAB  0020               	movlb	0	; select bank0
  4877  0DAC  00E9               	movwf	??_main+5
  4878  0DAD  0021               	movlb	1	; select bank1
  4879  0DAE  085B               	movf	main@sampleIndex^(0+128),w
  4880  0DAF  0020               	movlb	0	; select bank0
  4881  0DB0  00E8               	movwf	??_main+4
  4882  0DB1  35E8               	lslf	??_main+4,f
  4883  0DB2  0DE9               	rlf	??_main+5,f
  4884  0DB3  308C               	movlw	140
  4885  0DB4  0768               	addwf	??_main+4,w
  4886  0DB5  0084               	movwf	4
  4887  0DB6  3023               	movlw	35
  4888  0DB7  3D69               	addwfc	??_main+5,w
  4889  0DB8  0085               	movwf	5
  4890  0DB9  3F00               	moviw [0]fsr0
  4891  0DBA  00EA               	movwf	??_main+6
  4892  0DBB  3F01               	moviw [1]fsr0
  4893  0DBC  00EB               	movwf	??_main+7
  4894  0DBD  01EC               	clrf	??_main+8
  4895  0DBE  01ED               	clrf	??_main+9
  4896  0DBF  09EA               	comf	??_main+6,f
  4897  0DC0  09EB               	comf	??_main+7,f
  4898  0DC1  09EC               	comf	??_main+8,f
  4899  0DC2  09ED               	comf	??_main+9,f
  4900  0DC3  0AEA               	incf	??_main+6,f
  4901  0DC4  1903               	skipnz
  4902  0DC5  0AEB               	incf	??_main+7,f
  4903  0DC6  1903               	skipnz
  4904  0DC7  0AEC               	incf	??_main+8,f
  4905  0DC8  1903               	skipnz
  4906  0DC9  0AED               	incf	??_main+9,f
  4907  0DCA  086A               	movf	??_main+6,w
  4908  0DCB  07E4               	addwf	??_main,f
  4909  0DCC  086B               	movf	??_main+7,w
  4910  0DCD  3DE5               	addwfc	??_main+1,f
  4911  0DCE  086C               	movf	??_main+8,w
  4912  0DCF  3DE6               	addwfc	??_main+2,f
  4913  0DD0  086D               	movf	??_main+9,w
  4914  0DD1  3DE7               	addwfc	??_main+3,f
  4915  0DD2  0867               	movf	??_main+3,w
  4916  0DD3  0021               	movlb	1	; select bank1
  4917  0DD4  00CC               	movwf	(main@totals+3)^(0+128)
  4918  0DD5  0020               	movlb	0	; select bank0
  4919  0DD6  0866               	movf	??_main+2,w
  4920  0DD7  0021               	movlb	1	; select bank1
  4921  0DD8  00CB               	movwf	(main@totals+2)^(0+128)
  4922  0DD9  0020               	movlb	0	; select bank0
  4923  0DDA  0865               	movf	??_main+1,w
  4924  0DDB  0021               	movlb	1	; select bank1
  4925  0DDC  00CA               	movwf	(main@totals+1)^(0+128)
  4926  0DDD  0020               	movlb	0	; select bank0
  4927  0DDE  0864               	movf	??_main,w
  4928  0DDF  0021               	movlb	1	; select bank1
  4929  0DE0  00C9               	movwf	main@totals^(0+128)
  4930                           
  4931                           ;main.c: 42: samples[sampleIndex] = readTemperature;
  4932  0DE1  085C               	movf	(main@sampleIndex+1)^(0+128),w
  4933  0DE2  0020               	movlb	0	; select bank0
  4934  0DE3  00E5               	movwf	??_main+1
  4935  0DE4  0021               	movlb	1	; select bank1
  4936  0DE5  085B               	movf	main@sampleIndex^(0+128),w
  4937  0DE6  0020               	movlb	0	; select bank0
  4938  0DE7  00E4               	movwf	??_main
  4939  0DE8  35E4               	lslf	??_main,f
  4940  0DE9  0DE5               	rlf	??_main+1,f
  4941  0DEA  308C               	movlw	140
  4942  0DEB  00E6               	movwf	??_main+2
  4943  0DEC  3023               	movlw	35
  4944  0DED  00E7               	movwf	??_main+3
  4945  0DEE  0864               	movf	??_main,w
  4946  0DEF  0766               	addwf	??_main+2,w
  4947  0DF0  0086               	movwf	6
  4948  0DF1  0865               	movf	??_main+1,w
  4949  0DF2  3D67               	addwfc	??_main+3,w
  4950  0DF3  0087               	movwf	7
  4951  0DF4  0021               	movlb	1	; select bank1
  4952  0DF5  0851               	movf	main@readTemperature^(0+128),w
  4953  0DF6  3FC0               	movwi [0]fsr1
  4954  0DF7  0852               	movf	(main@readTemperature+1)^(0+128),w
  4955  0DF8  3FC1               	movwi [1]fsr1
  4956                           
  4957                           ;main.c: 44: totals = totals + samples[sampleIndex];
  4958  0DF9  0849               	movf	main@totals^(0+128),w
  4959  0DFA  0020               	movlb	0	; select bank0
  4960  0DFB  00E4               	movwf	??_main
  4961  0DFC  0021               	movlb	1	; select bank1
  4962  0DFD  084A               	movf	(main@totals+1)^(0+128),w
  4963  0DFE  0020               	movlb	0	; select bank0
  4964  0DFF  00E5               	movwf	??_main+1
  4965  0E00  0021               	movlb	1	; select bank1
  4966  0E01  084B               	movf	(main@totals+2)^(0+128),w
  4967  0E02  0020               	movlb	0	; select bank0
  4968  0E03  00E6               	movwf	??_main+2
  4969  0E04  0021               	movlb	1	; select bank1
  4970  0E05  084C               	movf	(main@totals+3)^(0+128),w
  4971  0E06  0020               	movlb	0	; select bank0
  4972  0E07  00E7               	movwf	??_main+3
  4973  0E08  0021               	movlb	1	; select bank1
  4974  0E09  085C               	movf	(main@sampleIndex+1)^(0+128),w
  4975  0E0A  0020               	movlb	0	; select bank0
  4976  0E0B  00E9               	movwf	??_main+5
  4977  0E0C  0021               	movlb	1	; select bank1
  4978  0E0D  085B               	movf	main@sampleIndex^(0+128),w
  4979  0E0E  0020               	movlb	0	; select bank0
  4980  0E0F  00E8               	movwf	??_main+4
  4981  0E10  35E8               	lslf	??_main+4,f
  4982  0E11  0DE9               	rlf	??_main+5,f
  4983  0E12  308C               	movlw	140
  4984  0E13  0768               	addwf	??_main+4,w
  4985  0E14  0084               	movwf	4
  4986  0E15  3023               	movlw	35
  4987  0E16  3D69               	addwfc	??_main+5,w
  4988  0E17  0085               	movwf	5
  4989  0E18  3F00               	moviw [0]fsr0
  4990  0E19  00EA               	movwf	??_main+6
  4991  0E1A  3F01               	moviw [1]fsr0
  4992  0E1B  00EB               	movwf	??_main+7
  4993  0E1C  01EC               	clrf	??_main+8
  4994  0E1D  01ED               	clrf	??_main+9
  4995  0E1E  086A               	movf	??_main+6,w
  4996  0E1F  07E4               	addwf	??_main,f
  4997  0E20  086B               	movf	??_main+7,w
  4998  0E21  3DE5               	addwfc	??_main+1,f
  4999  0E22  086C               	movf	??_main+8,w
  5000  0E23  3DE6               	addwfc	??_main+2,f
  5001  0E24  086D               	movf	??_main+9,w
  5002  0E25  3DE7               	addwfc	??_main+3,f
  5003  0E26  0867               	movf	??_main+3,w
  5004  0E27  0021               	movlb	1	; select bank1
  5005  0E28  00CC               	movwf	(main@totals+3)^(0+128)
  5006  0E29  0020               	movlb	0	; select bank0
  5007  0E2A  0866               	movf	??_main+2,w
  5008  0E2B  0021               	movlb	1	; select bank1
  5009  0E2C  00CB               	movwf	(main@totals+2)^(0+128)
  5010  0E2D  0020               	movlb	0	; select bank0
  5011  0E2E  0865               	movf	??_main+1,w
  5012  0E2F  0021               	movlb	1	; select bank1
  5013  0E30  00CA               	movwf	(main@totals+1)^(0+128)
  5014  0E31  0020               	movlb	0	; select bank0
  5015  0E32  0864               	movf	??_main,w
  5016  0E33  0021               	movlb	1	; select bank1
  5017  0E34  00C9               	movwf	main@totals^(0+128)
  5018                           
  5019                           ;main.c: 46: sampleIndex += 1;
  5020  0E35  3001               	movlw	1
  5021  0E36  07DB               	addwf	main@sampleIndex^(0+128),f
  5022  0E37  3000               	movlw	0
  5023  0E38  3DDC               	addwfc	(main@sampleIndex+1)^(0+128),f
  5024                           
  5025                           ;main.c: 48: if(sampleIndex >= 50)
  5026  0E39  3000               	movlw	0
  5027  0E3A  025C               	subwf	(main@sampleIndex+1)^(0+128),w
  5028  0E3B  3032               	movlw	50
  5029  0E3C  1903               	skipnz
  5030  0E3D  025B               	subwf	main@sampleIndex^(0+128),w
  5031  0E3E  1C03               	skipc
  5032  0E3F  2E42               	goto	l3580
  5033                           
  5034                           ;main.c: 49: {
  5035                           ;main.c: 50: sampleIndex = 0;
  5036  0E40  01DB               	clrf	main@sampleIndex^(0+128)
  5037  0E41  01DC               	clrf	(main@sampleIndex+1)^(0+128)
  5038  0E42                     l3580:	
  5039                           
  5040                           ;main.c: 51: }
  5041                           ;main.c: 53: readTemperature = totals / 50;
  5042  0E42  3000               	movlw	0
  5043  0E43  00F3               	movwf	___aldiv@divisor+3
  5044  0E44  3000               	movlw	0
  5045  0E45  00F2               	movwf	___aldiv@divisor+2
  5046  0E46  3000               	movlw	0
  5047  0E47  00F1               	movwf	___aldiv@divisor+1
  5048  0E48  3032               	movlw	50
  5049  0E49  00F0               	movwf	___aldiv@divisor
  5050  0E4A  084C               	movf	(main@totals+3)^(0+128),w
  5051  0E4B  00F7               	movwf	___aldiv@dividend+3
  5052  0E4C  084B               	movf	(main@totals+2)^(0+128),w
  5053  0E4D  00F6               	movwf	___aldiv@dividend+2
  5054  0E4E  084A               	movf	(main@totals+1)^(0+128),w
  5055  0E4F  00F5               	movwf	___aldiv@dividend+1
  5056  0E50  0849               	movf	main@totals^(0+128),w
  5057  0E51  00F4               	movwf	___aldiv@dividend
  5058  0E52  3194  24ED  318D   	fcall	___aldiv
  5059  0E55  0871               	movf	?___aldiv+1,w
  5060  0E56  0021               	movlb	1	; select bank1
  5061  0E57  00D2               	movwf	(main@readTemperature+1)^(0+128)
  5062  0E58  0870               	movf	?___aldiv,w
  5063  0E59  00D1               	movwf	main@readTemperature^(0+128)
  5064                           
  5065                           ;main.c: 55: if(readTemperature > readTemperatureOld)
  5066  0E5A  0852               	movf	(main@readTemperature+1)^(0+128),w
  5067  0E5B  024E               	subwf	(main@readTemperatureOld+1)^(0+128),w
  5068  0E5C  1D03               	skipz
  5069  0E5D  2E60               	goto	u4715
  5070  0E5E  0851               	movf	main@readTemperature^(0+128),w
  5071  0E5F  024D               	subwf	main@readTemperatureOld^(0+128),w
  5072  0E60                     u4715:	
  5073  0E60  1803               	skipnc
  5074  0E61  2E66               	goto	l269
  5075                           
  5076                           ;main.c: 56: {
  5077                           ;main.c: 57: readTemperatureOld += 1;
  5078  0E62  3001               	movlw	1
  5079  0E63  07CD               	addwf	main@readTemperatureOld^(0+128),f
  5080  0E64  3000               	movlw	0
  5081  0E65  3DCE               	addwfc	(main@readTemperatureOld+1)^(0+128),f
  5082  0E66                     l269:	
  5083                           
  5084                           ;main.c: 58: }
  5085                           ;main.c: 60: if(readTemperature < readTemperatureOld)
  5086  0E66  084E               	movf	(main@readTemperatureOld+1)^(0+128),w
  5087  0E67  0252               	subwf	(main@readTemperature+1)^(0+128),w
  5088  0E68  1D03               	skipz
  5089  0E69  2E6C               	goto	u4725
  5090  0E6A  084D               	movf	main@readTemperatureOld^(0+128),w
  5091  0E6B  0251               	subwf	main@readTemperature^(0+128),w
  5092  0E6C                     u4725:	
  5093  0E6C  1803               	skipnc
  5094  0E6D  2E72               	goto	l270
  5095                           
  5096                           ;main.c: 61: {
  5097                           ;main.c: 62: readTemperatureOld -= 1;
  5098  0E6E  3001               	movlw	1
  5099  0E6F  02CD               	subwf	main@readTemperatureOld^(0+128),f
  5100  0E70  3000               	movlw	0
  5101  0E71  3BCE               	subwfb	(main@readTemperatureOld+1)^(0+128),f
  5102  0E72                     l270:	
  5103                           
  5104                           ;main.c: 63: }
  5105                           ;main.c: 65: readTemperature = readTemperatureOld;
  5106  0E72  084E               	movf	(main@readTemperatureOld+1)^(0+128),w
  5107  0E73  00D2               	movwf	(main@readTemperature+1)^(0+128)
  5108  0E74  084D               	movf	main@readTemperatureOld^(0+128),w
  5109  0E75  00D1               	movwf	main@readTemperature^(0+128)
  5110                           
  5111                           ;main.c: 68: if(setpoint > readTemperature)
  5112  0E76  0848               	movf	(main@setpoint+1)^(0+128),w
  5113  0E77  0252               	subwf	(main@readTemperature+1)^(0+128),w
  5114  0E78  1D03               	skipz
  5115  0E79  2E7C               	goto	u4735
  5116  0E7A  0847               	movf	main@setpoint^(0+128),w
  5117  0E7B  0251               	subwf	main@readTemperature^(0+128),w
  5118  0E7C                     u4735:	
  5119  0E7C  1803               	skipnc
  5120  0E7D  2E8E               	goto	l271
  5121                           
  5122                           ;main.c: 69: {
  5123                           ;main.c: 70: if(outCurrent < 1022)
  5124  0E7E  3003               	movlw	3
  5125  0E7F  0250               	subwf	(main@outCurrent+1)^(0+128),w
  5126  0E80  30FE               	movlw	254
  5127  0E81  1903               	skipnz
  5128  0E82  024F               	subwf	main@outCurrent^(0+128),w
  5129  0E83  1803               	skipnc
  5130  0E84  2E8A               	goto	l3592
  5131                           
  5132                           ;main.c: 71: {
  5133                           ;main.c: 75: outCurrent++;
  5134  0E85  3001               	movlw	1
  5135  0E86  07CF               	addwf	main@outCurrent^(0+128),f
  5136  0E87  3000               	movlw	0
  5137  0E88  3DD0               	addwfc	(main@outCurrent+1)^(0+128),f
  5138                           
  5139                           ;main.c: 78: }
  5140  0E89  2E8E               	goto	l271
  5141  0E8A                     l3592:	
  5142                           
  5143                           ;main.c: 79: else
  5144                           ;main.c: 80: {
  5145                           ;main.c: 81: outCurrent = 1023;
  5146  0E8A  30FF               	movlw	255
  5147  0E8B  00CF               	movwf	main@outCurrent^(0+128)
  5148  0E8C  3003               	movlw	3
  5149  0E8D  00D0               	movwf	(main@outCurrent^(0+128)+1)
  5150  0E8E                     l271:	
  5151                           
  5152                           ;main.c: 82: }
  5153                           ;main.c: 83: }
  5154                           ;main.c: 85: if(setpoint < readTemperature)
  5155  0E8E  0852               	movf	(main@readTemperature+1)^(0+128),w
  5156  0E8F  0248               	subwf	(main@setpoint+1)^(0+128),w
  5157  0E90  1D03               	skipz
  5158  0E91  2E94               	goto	u4755
  5159  0E92  0851               	movf	main@readTemperature^(0+128),w
  5160  0E93  0247               	subwf	main@setpoint^(0+128),w
  5161  0E94                     u4755:	
  5162  0E94  1803               	skipnc
  5163  0E95  2EA4               	goto	l3600
  5164                           
  5165                           ;main.c: 86: {
  5166                           ;main.c: 87: if(outCurrent > 1)
  5167  0E96  3000               	movlw	0
  5168  0E97  0250               	subwf	(main@outCurrent+1)^(0+128),w
  5169  0E98  3002               	movlw	2
  5170  0E99  1903               	skipnz
  5171  0E9A  024F               	subwf	main@outCurrent^(0+128),w
  5172  0E9B  1C03               	skipc
  5173  0E9C  2EA2               	goto	l3598
  5174                           
  5175                           ;main.c: 88: {
  5176                           ;main.c: 92: outCurrent-=1;
  5177  0E9D  3001               	movlw	1
  5178  0E9E  02CF               	subwf	main@outCurrent^(0+128),f
  5179  0E9F  3000               	movlw	0
  5180  0EA0  3BD0               	subwfb	(main@outCurrent+1)^(0+128),f
  5181                           
  5182                           ;main.c: 95: }
  5183  0EA1  2EA4               	goto	l3600
  5184  0EA2                     l3598:	
  5185                           
  5186                           ;main.c: 96: else
  5187                           ;main.c: 97: {
  5188                           ;main.c: 98: outCurrent = 0;
  5189  0EA2  01CF               	clrf	main@outCurrent^(0+128)
  5190  0EA3  01D0               	clrf	(main@outCurrent+1)^(0+128)
  5191  0EA4                     l3600:	
  5192                           
  5193                           ;main.c: 99: }
  5194                           ;main.c: 100: }
  5195                           ;main.c: 102: R = 10200/(1023/(float)readTemperature - 1);
  5196  0EA4  3000               	movlw	0
  5197  0EA5  0020               	movlb	0	; select bank0
  5198  0EA6  00C6               	movwf	___ftadd@f1
  5199  0EA7  3080               	movlw	128
  5200  0EA8  00C7               	movwf	___ftadd@f1+1
  5201  0EA9  30BF               	movlw	191
  5202  0EAA  00C8               	movwf	___ftadd@f1+2
  5203  0EAB  0021               	movlb	1	; select bank1
  5204  0EAC  0852               	movf	(main@readTemperature+1)^(0+128),w
  5205  0EAD  00F9               	movwf	___lwtoft@c+1
  5206  0EAE  0851               	movf	main@readTemperature^(0+128),w
  5207  0EAF  00F8               	movwf	___lwtoft@c
  5208  0EB0  3190  20B4  318D   	fcall	___lwtoft
  5209  0EB3  0878               	movf	?___lwtoft,w
  5210  0EB4  0020               	movlb	0	; select bank0
  5211  0EB5  00A0               	movwf	___ftdiv@f2
  5212  0EB6  0879               	movf	?___lwtoft+1,w
  5213  0EB7  00A1               	movwf	___ftdiv@f2+1
  5214  0EB8  087A               	movf	?___lwtoft+2,w
  5215  0EB9  00A2               	movwf	___ftdiv@f2+2
  5216  0EBA  30C0               	movlw	192
  5217  0EBB  00A3               	movwf	___ftdiv@f1
  5218  0EBC  307F               	movlw	127
  5219  0EBD  00A4               	movwf	___ftdiv@f1+1
  5220  0EBE  3044               	movlw	68
  5221  0EBF  00A5               	movwf	___ftdiv@f1+2
  5222  0EC0  3195  25F6  318D   	fcall	___ftdiv
  5223  0EC3  0020               	movlb	0	; select bank0
  5224  0EC4  0820               	movf	?___ftdiv,w
  5225  0EC5  00C9               	movwf	___ftadd@f2
  5226  0EC6  0821               	movf	?___ftdiv+1,w
  5227  0EC7  00CA               	movwf	___ftadd@f2+1
  5228  0EC8  0822               	movf	?___ftdiv+2,w
  5229  0EC9  00CB               	movwf	___ftadd@f2+2
  5230  0ECA  3189  210E  318D   	fcall	___ftadd
  5231  0ECD  0020               	movlb	0	; select bank0
  5232  0ECE  0846               	movf	?___ftadd,w
  5233  0ECF  0021               	movlb	1	; select bank1
  5234  0ED0  00C1               	movwf	_main$1007^(0+128)
  5235  0ED1  0020               	movlb	0	; select bank0
  5236  0ED2  0847               	movf	?___ftadd+1,w
  5237  0ED3  0021               	movlb	1	; select bank1
  5238  0ED4  00C2               	movwf	(_main$1007+1)^(0+128)
  5239  0ED5  0020               	movlb	0	; select bank0
  5240  0ED6  0848               	movf	?___ftadd+2,w
  5241  0ED7  0021               	movlb	1	; select bank1
  5242  0ED8  00C3               	movwf	(_main$1007+2)^(0+128)
  5243                           
  5244                           ;main.c: 99: }
  5245                           ;main.c: 100: }
  5246                           ;main.c: 102: R = 10200/(1023/(float)readTemperature - 1);
  5247  0ED9  0841               	movf	_main$1007^(0+128),w
  5248  0EDA  0020               	movlb	0	; select bank0
  5249  0EDB  00A0               	movwf	___ftdiv@f2
  5250  0EDC  0021               	movlb	1	; select bank1
  5251  0EDD  0842               	movf	(_main$1007+1)^(0+128),w
  5252  0EDE  0020               	movlb	0	; select bank0
  5253  0EDF  00A1               	movwf	___ftdiv@f2+1
  5254  0EE0  0021               	movlb	1	; select bank1
  5255  0EE1  0843               	movf	(_main$1007+2)^(0+128),w
  5256  0EE2  0020               	movlb	0	; select bank0
  5257  0EE3  00A2               	movwf	___ftdiv@f2+2
  5258  0EE4  3060               	movlw	96
  5259  0EE5  00A3               	movwf	___ftdiv@f1
  5260  0EE6  301F               	movlw	31
  5261  0EE7  00A4               	movwf	___ftdiv@f1+1
  5262  0EE8  3046               	movlw	70
  5263  0EE9  00A5               	movwf	___ftdiv@f1+2
  5264  0EEA  3195  25F6  318D   	fcall	___ftdiv
  5265  0EED  0020               	movlb	0	; select bank0
  5266  0EEE  0820               	movf	?___ftdiv,w
  5267  0EEF  0021               	movlb	1	; select bank1
  5268  0EF0  00C4               	movwf	main@R^(0+128)
  5269  0EF1  0020               	movlb	0	; select bank0
  5270  0EF2  0821               	movf	?___ftdiv+1,w
  5271  0EF3  0021               	movlb	1	; select bank1
  5272  0EF4  00C5               	movwf	(main@R+1)^(0+128)
  5273  0EF5  0020               	movlb	0	; select bank0
  5274  0EF6  0822               	movf	?___ftdiv+2,w
  5275  0EF7  0021               	movlb	1	; select bank1
  5276  0EF8  00C6               	movwf	(main@R+2)^(0+128)
  5277                           
  5278                           ;main.c: 104: steinhart = R /10061;
  5279  0EF9  3034               	movlw	52
  5280  0EFA  0020               	movlb	0	; select bank0
  5281  0EFB  00A0               	movwf	___ftdiv@f2
  5282  0EFC  301D               	movlw	29
  5283  0EFD  00A1               	movwf	___ftdiv@f2+1
  5284  0EFE  3046               	movlw	70
  5285  0EFF  00A2               	movwf	___ftdiv@f2+2
  5286  0F00  0021               	movlb	1	; select bank1
  5287  0F01  0844               	movf	main@R^(0+128),w
  5288  0F02  0020               	movlb	0	; select bank0
  5289  0F03  00A3               	movwf	___ftdiv@f1
  5290  0F04  0021               	movlb	1	; select bank1
  5291  0F05  0845               	movf	(main@R+1)^(0+128),w
  5292  0F06  0020               	movlb	0	; select bank0
  5293  0F07  00A4               	movwf	___ftdiv@f1+1
  5294  0F08  0021               	movlb	1	; select bank1
  5295  0F09  0846               	movf	(main@R+2)^(0+128),w
  5296  0F0A  0020               	movlb	0	; select bank0
  5297  0F0B  00A5               	movwf	___ftdiv@f1+2
  5298  0F0C  3195  25F6  318D   	fcall	___ftdiv
  5299  0F0F  0020               	movlb	0	; select bank0
  5300  0F10  0820               	movf	?___ftdiv,w
  5301  0F11  0021               	movlb	1	; select bank1
  5302  0F12  00D3               	movwf	main@steinhart^(0+128)
  5303  0F13  0020               	movlb	0	; select bank0
  5304  0F14  0821               	movf	?___ftdiv+1,w
  5305  0F15  0021               	movlb	1	; select bank1
  5306  0F16  00D4               	movwf	(main@steinhart+1)^(0+128)
  5307  0F17  0020               	movlb	0	; select bank0
  5308  0F18  0822               	movf	?___ftdiv+2,w
  5309  0F19  0021               	movlb	1	; select bank1
  5310  0F1A  00D5               	movwf	(main@steinhart+2)^(0+128)
  5311                           
  5312                           ;main.c: 105: steinhart = log(steinhart);
  5313  0F1B  0853               	movf	main@steinhart^(0+128),w
  5314  0F1C  0020               	movlb	0	; select bank0
  5315  0F1D  00DD               	movwf	log@x
  5316  0F1E  0021               	movlb	1	; select bank1
  5317  0F1F  0854               	movf	(main@steinhart+1)^(0+128),w
  5318  0F20  0020               	movlb	0	; select bank0
  5319  0F21  00DE               	movwf	log@x+1
  5320  0F22  0021               	movlb	1	; select bank1
  5321  0F23  0855               	movf	(main@steinhart+2)^(0+128),w
  5322  0F24  0020               	movlb	0	; select bank0
  5323  0F25  00DF               	movwf	log@x+2
  5324  0F26  3196  269F  318D   	fcall	_log
  5325  0F29  0020               	movlb	0	; select bank0
  5326  0F2A  085D               	movf	?_log,w
  5327  0F2B  0021               	movlb	1	; select bank1
  5328  0F2C  00D3               	movwf	main@steinhart^(0+128)
  5329  0F2D  0020               	movlb	0	; select bank0
  5330  0F2E  085E               	movf	?_log+1,w
  5331  0F2F  0021               	movlb	1	; select bank1
  5332  0F30  00D4               	movwf	(main@steinhart+1)^(0+128)
  5333  0F31  0020               	movlb	0	; select bank0
  5334  0F32  085F               	movf	?_log+2,w
  5335  0F33  0021               	movlb	1	; select bank1
  5336  0F34  00D5               	movwf	(main@steinhart+2)^(0+128)
  5337                           
  5338                           ;main.c: 106: steinhart /= 3995;
  5339  0F35  30B0               	movlw	176
  5340  0F36  0020               	movlb	0	; select bank0
  5341  0F37  00A0               	movwf	___ftdiv@f2
  5342  0F38  3079               	movlw	121
  5343  0F39  00A1               	movwf	___ftdiv@f2+1
  5344  0F3A  3045               	movlw	69
  5345  0F3B  00A2               	movwf	___ftdiv@f2+2
  5346  0F3C  0021               	movlb	1	; select bank1
  5347  0F3D  0853               	movf	main@steinhart^(0+128),w
  5348  0F3E  0020               	movlb	0	; select bank0
  5349  0F3F  00A3               	movwf	___ftdiv@f1
  5350  0F40  0021               	movlb	1	; select bank1
  5351  0F41  0854               	movf	(main@steinhart+1)^(0+128),w
  5352  0F42  0020               	movlb	0	; select bank0
  5353  0F43  00A4               	movwf	___ftdiv@f1+1
  5354  0F44  0021               	movlb	1	; select bank1
  5355  0F45  0855               	movf	(main@steinhart+2)^(0+128),w
  5356  0F46  0020               	movlb	0	; select bank0
  5357  0F47  00A5               	movwf	___ftdiv@f1+2
  5358  0F48  3195  25F6  318D   	fcall	___ftdiv
  5359  0F4B  0020               	movlb	0	; select bank0
  5360  0F4C  0820               	movf	?___ftdiv,w
  5361  0F4D  0021               	movlb	1	; select bank1
  5362  0F4E  00D3               	movwf	main@steinhart^(0+128)
  5363  0F4F  0020               	movlb	0	; select bank0
  5364  0F50  0821               	movf	?___ftdiv+1,w
  5365  0F51  0021               	movlb	1	; select bank1
  5366  0F52  00D4               	movwf	(main@steinhart+1)^(0+128)
  5367  0F53  0020               	movlb	0	; select bank0
  5368  0F54  0822               	movf	?___ftdiv+2,w
  5369  0F55  0021               	movlb	1	; select bank1
  5370  0F56  00D5               	movwf	(main@steinhart+2)^(0+128)
  5371                           
  5372                           ;main.c: 107: steinhart += 1.0 / (25 + 273.15);
  5373  0F57  30CF               	movlw	207
  5374  0F58  0020               	movlb	0	; select bank0
  5375  0F59  00C6               	movwf	___ftadd@f1
  5376  0F5A  305B               	movlw	91
  5377  0F5B  00C7               	movwf	___ftadd@f1+1
  5378  0F5C  303B               	movlw	59
  5379  0F5D  00C8               	movwf	___ftadd@f1+2
  5380  0F5E  0021               	movlb	1	; select bank1
  5381  0F5F  0853               	movf	main@steinhart^(0+128),w
  5382  0F60  0020               	movlb	0	; select bank0
  5383  0F61  00C9               	movwf	___ftadd@f2
  5384  0F62  0021               	movlb	1	; select bank1
  5385  0F63  0854               	movf	(main@steinhart+1)^(0+128),w
  5386  0F64  0020               	movlb	0	; select bank0
  5387  0F65  00CA               	movwf	___ftadd@f2+1
  5388  0F66  0021               	movlb	1	; select bank1
  5389  0F67  0855               	movf	(main@steinhart+2)^(0+128),w
  5390  0F68  0020               	movlb	0	; select bank0
  5391  0F69  00CB               	movwf	___ftadd@f2+2
  5392  0F6A  3189  210E  318D   	fcall	___ftadd
  5393  0F6D  0020               	movlb	0	; select bank0
  5394  0F6E  0846               	movf	?___ftadd,w
  5395  0F6F  0021               	movlb	1	; select bank1
  5396  0F70  00D3               	movwf	main@steinhart^(0+128)
  5397  0F71  0020               	movlb	0	; select bank0
  5398  0F72  0847               	movf	?___ftadd+1,w
  5399  0F73  0021               	movlb	1	; select bank1
  5400  0F74  00D4               	movwf	(main@steinhart+1)^(0+128)
  5401  0F75  0020               	movlb	0	; select bank0
  5402  0F76  0848               	movf	?___ftadd+2,w
  5403  0F77  0021               	movlb	1	; select bank1
  5404  0F78  00D5               	movwf	(main@steinhart+2)^(0+128)
  5405                           
  5406                           ;main.c: 108: steinhart = 1.0 / steinhart;
  5407  0F79  0853               	movf	main@steinhart^(0+128),w
  5408  0F7A  0020               	movlb	0	; select bank0
  5409  0F7B  00A0               	movwf	___ftdiv@f2
  5410  0F7C  0021               	movlb	1	; select bank1
  5411  0F7D  0854               	movf	(main@steinhart+1)^(0+128),w
  5412  0F7E  0020               	movlb	0	; select bank0
  5413  0F7F  00A1               	movwf	___ftdiv@f2+1
  5414  0F80  0021               	movlb	1	; select bank1
  5415  0F81  0855               	movf	(main@steinhart+2)^(0+128),w
  5416  0F82  0020               	movlb	0	; select bank0
  5417  0F83  00A2               	movwf	___ftdiv@f2+2
  5418  0F84  3000               	movlw	0
  5419  0F85  00A3               	movwf	___ftdiv@f1
  5420  0F86  3080               	movlw	128
  5421  0F87  00A4               	movwf	___ftdiv@f1+1
  5422  0F88  303F               	movlw	63
  5423  0F89  00A5               	movwf	___ftdiv@f1+2
  5424  0F8A  3195  25F6  318D   	fcall	___ftdiv
  5425  0F8D  0020               	movlb	0	; select bank0
  5426  0F8E  0820               	movf	?___ftdiv,w
  5427  0F8F  0021               	movlb	1	; select bank1
  5428  0F90  00D3               	movwf	main@steinhart^(0+128)
  5429  0F91  0020               	movlb	0	; select bank0
  5430  0F92  0821               	movf	?___ftdiv+1,w
  5431  0F93  0021               	movlb	1	; select bank1
  5432  0F94  00D4               	movwf	(main@steinhart+1)^(0+128)
  5433  0F95  0020               	movlb	0	; select bank0
  5434  0F96  0822               	movf	?___ftdiv+2,w
  5435  0F97  0021               	movlb	1	; select bank1
  5436  0F98  00D5               	movwf	(main@steinhart+2)^(0+128)
  5437                           
  5438                           ;main.c: 109: steinhart -= 273.15;
  5439  0F99  3093               	movlw	147
  5440  0F9A  0020               	movlb	0	; select bank0
  5441  0F9B  00D3               	movwf	___ftsub@f2
  5442  0F9C  3088               	movlw	136
  5443  0F9D  00D4               	movwf	___ftsub@f2+1
  5444  0F9E  3043               	movlw	67
  5445  0F9F  00D5               	movwf	___ftsub@f2+2
  5446  0FA0  0021               	movlb	1	; select bank1
  5447  0FA1  0853               	movf	main@steinhart^(0+128),w
  5448  0FA2  0020               	movlb	0	; select bank0
  5449  0FA3  00D6               	movwf	___ftsub@f1
  5450  0FA4  0021               	movlb	1	; select bank1
  5451  0FA5  0854               	movf	(main@steinhart+1)^(0+128),w
  5452  0FA6  0020               	movlb	0	; select bank0
  5453  0FA7  00D7               	movwf	___ftsub@f1+1
  5454  0FA8  0021               	movlb	1	; select bank1
  5455  0FA9  0855               	movf	(main@steinhart+2)^(0+128),w
  5456  0FAA  0020               	movlb	0	; select bank0
  5457  0FAB  00D8               	movwf	___ftsub@f1+2
  5458  0FAC  3191  215D  318D   	fcall	___ftsub
  5459  0FAF  0020               	movlb	0	; select bank0
  5460  0FB0  0853               	movf	?___ftsub,w
  5461  0FB1  0021               	movlb	1	; select bank1
  5462  0FB2  00D3               	movwf	main@steinhart^(0+128)
  5463  0FB3  0020               	movlb	0	; select bank0
  5464  0FB4  0854               	movf	?___ftsub+1,w
  5465  0FB5  0021               	movlb	1	; select bank1
  5466  0FB6  00D4               	movwf	(main@steinhart+1)^(0+128)
  5467  0FB7  0020               	movlb	0	; select bank0
  5468  0FB8  0855               	movf	?___ftsub+2,w
  5469  0FB9  0021               	movlb	1	; select bank1
  5470  0FBA  00D5               	movwf	(main@steinhart+2)^(0+128)
  5471                           
  5472                           ;main.c: 129: sprintf(s,"%3.1f  ", steinhart );
  5473  0FBB  3099               	movlw	low (STR_1| (0+32768))
  5474  0FBC  0020               	movlb	0	; select bank0
  5475  0FBD  00D9               	movwf	sprintf@f
  5476  0FBE  3098               	movlw	high (STR_1| (0+32768))
  5477  0FBF  00DA               	movwf	sprintf@f+1
  5478  0FC0  0021               	movlb	1	; select bank1
  5479  0FC1  0853               	movf	main@steinhart^(0+128),w
  5480  0FC2  0020               	movlb	0	; select bank0
  5481  0FC3  00DB               	movwf	?_sprintf+2
  5482  0FC4  0021               	movlb	1	; select bank1
  5483  0FC5  0854               	movf	(main@steinhart+1)^(0+128),w
  5484  0FC6  0020               	movlb	0	; select bank0
  5485  0FC7  00DC               	movwf	?_sprintf+3
  5486  0FC8  0021               	movlb	1	; select bank1
  5487  0FC9  0855               	movf	(main@steinhart+2)^(0+128),w
  5488  0FCA  0020               	movlb	0	; select bank0
  5489  0FCB  00DD               	movwf	?_sprintf+4
  5490  0FCC  30B9               	movlw	(low (main@s| 0))& (0+255)
  5491  0FCD  3181  21D5  318D   	fcall	_sprintf
  5492                           
  5493                           ;main.c: 130: LCD_Set_Cursor(0,0);
  5494  0FD0  01F3               	clrf	LCD_Set_Cursor@y
  5495  0FD1  3000               	movlw	0
  5496  0FD2  3194  246E  318D   	fcall	_LCD_Set_Cursor
  5497                           
  5498                           ;main.c: 131: LCD_Write_String(s);
  5499  0FD5  30B9               	movlw	(low (main@s| 0))& (0+255)
  5500  0FD6  3191  2126  318D   	fcall	_LCD_Write_String
  5501                           
  5502                           ;main.c: 133: sprintf(s,"%5.0f  ", R );
  5503  0FD9  3091               	movlw	low (STR_2| (0+32768))
  5504  0FDA  0020               	movlb	0	; select bank0
  5505  0FDB  00D9               	movwf	sprintf@f
  5506  0FDC  3098               	movlw	high (STR_2| (0+32768))
  5507  0FDD  00DA               	movwf	sprintf@f+1
  5508  0FDE  0021               	movlb	1	; select bank1
  5509  0FDF  0844               	movf	main@R^(0+128),w
  5510  0FE0  0020               	movlb	0	; select bank0
  5511  0FE1  00DB               	movwf	?_sprintf+2
  5512  0FE2  0021               	movlb	1	; select bank1
  5513  0FE3  0845               	movf	(main@R+1)^(0+128),w
  5514  0FE4  0020               	movlb	0	; select bank0
  5515  0FE5  00DC               	movwf	?_sprintf+3
  5516  0FE6  0021               	movlb	1	; select bank1
  5517  0FE7  0846               	movf	(main@R+2)^(0+128),w
  5518  0FE8  0020               	movlb	0	; select bank0
  5519  0FE9  00DD               	movwf	?_sprintf+4
  5520  0FEA  30B9               	movlw	(low (main@s| 0))& (0+255)
  5521  0FEB  3181  21D5  318D   	fcall	_sprintf
  5522                           
  5523                           ;main.c: 134: LCD_Set_Cursor(1,0);
  5524  0FEE  01F3               	clrf	LCD_Set_Cursor@y
  5525  0FEF  3001               	movlw	1
  5526  0FF0  3194  246E  318D   	fcall	_LCD_Set_Cursor
  5527                           
  5528                           ;main.c: 135: LCD_Write_String(s);
  5529  0FF3  30B9               	movlw	(low (main@s| 0))& (0+255)
  5530  0FF4  3191  2126  318D   	fcall	_LCD_Write_String
  5531                           
  5532                           ;main.c: 149: PWM6_LoadDutyValue(outCurrent);
  5533  0FF7  0021               	movlb	1	; select bank1
  5534  0FF8  0850               	movf	(main@outCurrent+1)^(0+128),w
  5535  0FF9  00F1               	movwf	PWM6_LoadDutyValue@dutyValue+1
  5536  0FFA  084F               	movf	main@outCurrent^(0+128),w
  5537  0FFB  00F0               	movwf	PWM6_LoadDutyValue@dutyValue
  5538  0FFC  3190  20C7  318D   	fcall	_PWM6_LoadDutyValue
  5539  0FFF  2D91               	goto	l3568
  5540  1000                     __end_of_main:	
  5541                           
  5542                           	psect	text1
  5543  01D5                     __ptext1:	
  5544 ;; *************** function _sprintf *****************
  5545 ;; Defined at:
  5546 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\doprnt.c"
  5547 ;; Parameters:    Size  Location     Type
  5548 ;;  sp              1    wreg     PTR unsigned char 
  5549 ;;		 -> main@s(8), 
  5550 ;;  f               2   57[BANK0 ] PTR const unsigned char 
  5551 ;;		 -> STR_2(8), STR_1(8), 
  5552 ;; Auto vars:     Size  Location     Type
  5553 ;;  sp              1   21[BANK1 ] PTR unsigned char 
  5554 ;;		 -> main@s(8), 
  5555 ;;  tmpval          4   12[BANK1 ] struct .
  5556 ;;  val             4    4[BANK1 ] unsigned long 
  5557 ;;  fval            3   18[BANK1 ] unsigned long 
  5558 ;;  prec            2   22[BANK1 ] int 
  5559 ;;  exp             2   16[BANK1 ] int 
  5560 ;;  width           2   10[BANK1 ] int 
  5561 ;;  flag            2    8[BANK1 ] unsigned short 
  5562 ;;  cp              2    0        PTR const unsigned char 
  5563 ;;  len             2    0        unsigned int 
  5564 ;;  c               1   24[BANK1 ] char 
  5565 ;;  ap              1    3[BANK1 ] PTR void [1]
  5566 ;;		 -> ?_sprintf(2), 
  5567 ;;  d               1    0        unsigned char 
  5568 ;; Return value:  Size  Location     Type
  5569 ;;                  2   57[BANK0 ] int 
  5570 ;; Registers used:
  5571 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5572 ;; Tracked objects:
  5573 ;;		On entry : 0/0
  5574 ;;		On exit  : 0/0
  5575 ;;		Unchanged: 0/0
  5576 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5577 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5578 ;;      Locals:         0       0      25       0       0       0       0       0       0       0       0       0       
      +0       0
  5579 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5580 ;;      Totals:         0      11      25       0       0       0       0       0       0       0       0       0       
      +0       0
  5581 ;;Total ram usage:       36 bytes
  5582 ;; Hardware stack levels used:    1
  5583 ;; Hardware stack levels required when called:    3
  5584 ;; This function calls:
  5585 ;;		___awdiv
  5586 ;;		___ftadd
  5587 ;;		___ftge
  5588 ;;		___ftmul
  5589 ;;		___ftneg
  5590 ;;		___ftsub
  5591 ;;		___fttol
  5592 ;;		___lldiv
  5593 ;;		___llmod
  5594 ;;		___lltoft
  5595 ;;		___wmul
  5596 ;;		__div_to_l_
  5597 ;;		__tdiv_to_l_
  5598 ;;		_fround
  5599 ;;		_isdigit
  5600 ;;		_scale
  5601 ;; This function is called by:
  5602 ;;		_main
  5603 ;; This function uses a non-reentrant model
  5604 ;;
  5605                           
  5606                           
  5607                           ;psect for function _sprintf
  5608  01D5                     _sprintf:	
  5609                           
  5610                           ;incstack = 0
  5611                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5612                           ;sprintf@sp stored from wreg
  5613  01D5  0021               	movlb	1	; select bank1
  5614  01D6  00B5               	movwf	sprintf@sp^(0+128)
  5615                           
  5616                           ;doprnt.c: 494: va_list ap;
  5617                           ;doprnt.c: 499: signed char c;
  5618                           ;doprnt.c: 501: int width;
  5619                           ;doprnt.c: 504: int prec;
  5620                           ;doprnt.c: 508: unsigned short flag;
  5621                           ;doprnt.c: 515: char d;
  5622                           ;doprnt.c: 516: double fval;
  5623                           ;doprnt.c: 517: int exp;
  5624                           ;doprnt.c: 523: union {
  5625                           ;doprnt.c: 524: unsigned long vd;
  5626                           ;doprnt.c: 525: double integ;
  5627                           ;doprnt.c: 526: } tmpval;
  5628                           ;doprnt.c: 528: unsigned long val;
  5629                           ;doprnt.c: 529: unsigned len;
  5630                           ;doprnt.c: 530: const char * cp;
  5631                           ;doprnt.c: 533: *ap = __va_start();
  5632  01D7  305B               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  5633  01D8  0020               	movlb	0	; select bank0
  5634  01D9  00DE               	movwf	??_sprintf
  5635  01DA  085E               	movf	??_sprintf,w
  5636  01DB  0021               	movlb	1	; select bank1
  5637  01DC  00A3               	movwf	sprintf@ap^(0+128)
  5638  01DD                     l3410:	
  5639                           ;doprnt.c: 536: while(c = *f++) {
  5640                           
  5641  01DD  0020               	movlb	0	; select bank0
  5642  01DE  085A               	movf	sprintf@f+1,w
  5643  01DF  00DF               	movwf	??_sprintf+1
  5644  01E0  0859               	movf	sprintf@f,w
  5645  01E1  00DE               	movwf	??_sprintf
  5646  01E2  0AD9               	incf	sprintf@f,f
  5647  01E3  1903               	skipnz
  5648  01E4  0ADA               	incf	sprintf@f+1,f
  5649  01E5  085E               	movf	??_sprintf,w
  5650  01E6  0084               	movwf	4
  5651  01E7  085F               	movf	??_sprintf+1,w
  5652  01E8  0085               	movwf	5
  5653  01E9  0800               	movf	0,w	;code access
  5654  01EA  00E0               	movwf	??_sprintf+2
  5655  01EB  0860               	movf	??_sprintf+2,w
  5656  01EC  0021               	movlb	1	; select bank1
  5657  01ED  00B8               	movwf	sprintf@c^(0+128)
  5658  01EE  0838               	movf	sprintf@c^(0+128),w
  5659  01EF  1903               	btfsc	3,2
  5660  01F0  2FD6               	goto	l3412
  5661                           
  5662                           ;doprnt.c: 538: if(c != '%')
  5663  01F1  3025               	movlw	37
  5664  01F2  0638               	xorwf	sprintf@c^(0+128),w
  5665  01F3  1903               	btfsc	3,2
  5666  01F4  29F8               	goto	l3170
  5667                           
  5668                           ;doprnt.c: 540: {
  5669                           ;doprnt.c: 541: ((*sp++ = (c)));
  5670  01F5  0838               	movf	sprintf@c^(0+128),w
  5671  01F6  0020               	movlb	0	; select bank0
  5672  01F7  2FC8               	goto	L6
  5673  01F8                     l3170:	
  5674                           ;doprnt.c: 542: continue;
  5675                           
  5676                           
  5677                           ;doprnt.c: 543: }
  5678                           ;doprnt.c: 546: width = 0;
  5679  01F8  01AA               	clrf	sprintf@width^(0+128)
  5680  01F9  01AB               	clrf	(sprintf@width+1)^(0+128)
  5681                           
  5682                           ;doprnt.c: 548: flag = 0;
  5683  01FA  01A8               	clrf	sprintf@flag^(0+128)
  5684  01FB  01A9               	clrf	(sprintf@flag+1)^(0+128)
  5685                           
  5686                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  5687  01FC  0020               	movlb	0	; select bank0
  5688  01FD  0859               	movf	sprintf@f,w
  5689  01FE  0084               	movwf	4
  5690  01FF  085A               	movf	sprintf@f+1,w
  5691  0200  0085               	movwf	5
  5692  0201  0800               	movf	0,w	;code access
  5693  0202  3190  2074  3181   	fcall	_isdigit
  5694  0205  1C03               	btfss	3,0
  5695  0206  2A44               	goto	l3184
  5696                           
  5697                           ;doprnt.c: 598: width = 0;
  5698  0207  0021               	movlb	1	; select bank1
  5699  0208  01AA               	clrf	sprintf@width^(0+128)
  5700  0209  01AB               	clrf	(sprintf@width+1)^(0+128)
  5701  020A                     l3176:	
  5702                           ;doprnt.c: 599: do {
  5703                           
  5704                           
  5705                           ;doprnt.c: 600: width *= 10;
  5706  020A  300A               	movlw	10
  5707  020B  0020               	movlb	0	; select bank0
  5708  020C  00A4               	movwf	___wmul@multiplier
  5709  020D  3000               	movlw	0
  5710  020E  00A5               	movwf	___wmul@multiplier+1
  5711  020F  0021               	movlb	1	; select bank1
  5712  0210  082B               	movf	(sprintf@width+1)^(0+128),w
  5713  0211  0020               	movlb	0	; select bank0
  5714  0212  00A7               	movwf	___wmul@multiplicand+1
  5715  0213  0021               	movlb	1	; select bank1
  5716  0214  082A               	movf	sprintf@width^(0+128),w
  5717  0215  0020               	movlb	0	; select bank0
  5718  0216  00A6               	movwf	___wmul@multiplicand
  5719  0217  3191  2141  3181   	fcall	___wmul
  5720  021A  0020               	movlb	0	; select bank0
  5721  021B  0825               	movf	?___wmul+1,w
  5722  021C  0021               	movlb	1	; select bank1
  5723  021D  00AB               	movwf	(sprintf@width+1)^(0+128)
  5724  021E  0020               	movlb	0	; select bank0
  5725  021F  0824               	movf	?___wmul,w
  5726  0220  0021               	movlb	1	; select bank1
  5727  0221  00AA               	movwf	sprintf@width^(0+128)
  5728                           
  5729                           ;doprnt.c: 601: width += *f++ - '0';
  5730  0222  0020               	movlb	0	; select bank0
  5731  0223  0859               	movf	sprintf@f,w
  5732  0224  0084               	movwf	4
  5733  0225  085A               	movf	sprintf@f+1,w
  5734  0226  0085               	movwf	5
  5735  0227  0800               	movf	0,w	;code access
  5736  0228  3ED0               	addlw	208
  5737  0229  00DE               	movwf	??_sprintf
  5738  022A  30FF               	movlw	255
  5739  022B  1803               	skipnc
  5740  022C  3000               	movlw	0
  5741  022D  00DF               	movwf	??_sprintf+1
  5742  022E  085E               	movf	??_sprintf,w
  5743  022F  0021               	movlb	1	; select bank1
  5744  0230  07AA               	addwf	sprintf@width^(0+128),f
  5745  0231  0020               	movlb	0	; select bank0
  5746  0232  085F               	movf	??_sprintf+1,w
  5747  0233  0021               	movlb	1	; select bank1
  5748  0234  3DAB               	addwfc	(sprintf@width+1)^(0+128),f
  5749  0235  3001               	movlw	1
  5750  0236  0020               	movlb	0	; select bank0
  5751  0237  07D9               	addwf	sprintf@f,f
  5752  0238  3000               	movlw	0
  5753  0239  3DDA               	addwfc	sprintf@f+1,f
  5754                           
  5755                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  5756  023A  0859               	movf	sprintf@f,w
  5757  023B  0084               	movwf	4
  5758  023C  085A               	movf	sprintf@f+1,w
  5759  023D  0085               	movwf	5
  5760  023E  0800               	movf	0,w	;code access
  5761  023F  3190  2074  3181   	fcall	_isdigit
  5762  0242  1803               	btfsc	3,0
  5763  0243  2A0A               	goto	l3176
  5764  0244                     l3184:	
  5765                           
  5766                           ;doprnt.c: 608: }
  5767                           ;doprnt.c: 611: if(*f == '.') {
  5768  0244  0020               	movlb	0	; select bank0
  5769  0245  0859               	movf	sprintf@f,w
  5770  0246  0084               	movwf	4
  5771  0247  085A               	movf	sprintf@f+1,w
  5772  0248  0085               	movwf	5
  5773  0249  0012               	moviw fsr0++
  5774  024A  3A2E               	xorlw	46
  5775  024B  1D03               	btfss	3,2
  5776  024C  2A8F               	goto	l3198
  5777                           
  5778                           ;doprnt.c: 612: flag |= 0x4000;
  5779  024D  0021               	movlb	1	; select bank1
  5780  024E  1729               	bsf	(sprintf@flag^(0+128)+1),6
  5781                           
  5782                           ;doprnt.c: 613: f++;
  5783  024F  3001               	movlw	1
  5784  0250  0020               	movlb	0	; select bank0
  5785  0251  07D9               	addwf	sprintf@f,f
  5786  0252  3000               	movlw	0
  5787  0253  3DDA               	addwfc	sprintf@f+1,f
  5788                           
  5789                           ;doprnt.c: 620: {
  5790                           ;doprnt.c: 621: prec = 0;
  5791  0254  0021               	movlb	1	; select bank1
  5792  0255  01B6               	clrf	sprintf@prec^(0+128)
  5793  0256  01B7               	clrf	(sprintf@prec+1)^(0+128)
  5794  0257                     l3196:	
  5795                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  5796                           
  5797  0257  0020               	movlb	0	; select bank0
  5798  0258  0859               	movf	sprintf@f,w
  5799  0259  0084               	movwf	4
  5800  025A  085A               	movf	sprintf@f+1,w
  5801  025B  0085               	movwf	5
  5802  025C  0800               	movf	0,w	;code access
  5803  025D  3190  2074  3181   	fcall	_isdigit
  5804  0260  1C03               	btfss	3,0
  5805  0261  2A96               	goto	l3204
  5806                           
  5807                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  5808  0262  0020               	movlb	0	; select bank0
  5809  0263  0859               	movf	sprintf@f,w
  5810  0264  0084               	movwf	4
  5811  0265  085A               	movf	sprintf@f+1,w
  5812  0266  0085               	movwf	5
  5813  0267  0800               	movf	0,w	;code access
  5814  0268  00DE               	movwf	??_sprintf
  5815  0269  01DF               	clrf	??_sprintf+1
  5816  026A  0021               	movlb	1	; select bank1
  5817  026B  0837               	movf	(sprintf@prec+1)^(0+128),w
  5818  026C  0020               	movlb	0	; select bank0
  5819  026D  00A5               	movwf	___wmul@multiplier+1
  5820  026E  0021               	movlb	1	; select bank1
  5821  026F  0836               	movf	sprintf@prec^(0+128),w
  5822  0270  0020               	movlb	0	; select bank0
  5823  0271  00A4               	movwf	___wmul@multiplier
  5824  0272  300A               	movlw	10
  5825  0273  00A6               	movwf	___wmul@multiplicand
  5826  0274  3000               	movlw	0
  5827  0275  00A7               	movwf	___wmul@multiplicand+1
  5828  0276  3191  2141  3181   	fcall	___wmul
  5829  0279  0020               	movlb	0	; select bank0
  5830  027A  085E               	movf	??_sprintf,w
  5831  027B  0724               	addwf	?___wmul,w
  5832  027C  00E0               	movwf	??_sprintf+2
  5833  027D  085F               	movf	??_sprintf+1,w
  5834  027E  3D25               	addwfc	?___wmul+1,w
  5835  027F  00E1               	movwf	??_sprintf+3
  5836  0280  0860               	movf	??_sprintf+2,w
  5837  0281  3ED0               	addlw	208
  5838  0282  0021               	movlb	1	; select bank1
  5839  0283  00B6               	movwf	sprintf@prec^(0+128)
  5840  0284  30FF               	movlw	255
  5841  0285  0020               	movlb	0	; select bank0
  5842  0286  3D61               	addwfc	??_sprintf+3,w
  5843  0287  0021               	movlb	1	; select bank1
  5844  0288  00B7               	movwf	(sprintf@prec+1)^(0+128)
  5845  0289  3001               	movlw	1
  5846  028A  0020               	movlb	0	; select bank0
  5847  028B  07D9               	addwf	sprintf@f,f
  5848  028C  3000               	movlw	0
  5849  028D  3DDA               	addwfc	sprintf@f+1,f
  5850  028E  2A57               	goto	l3196
  5851  028F                     l3198:	
  5852                           ;doprnt.c: 624: }
  5853                           ;doprnt.c: 625: } else {
  5854                           
  5855                           
  5856                           ;doprnt.c: 626: prec = 0;
  5857  028F  0021               	movlb	1	; select bank1
  5858  0290  01B6               	clrf	sprintf@prec^(0+128)
  5859  0291  01B7               	clrf	(sprintf@prec+1)^(0+128)
  5860                           
  5861                           ;doprnt.c: 628: flag |= 0x1000;
  5862  0292  1629               	bsf	(sprintf@flag^(0+128)+1),4
  5863                           
  5864                           ;doprnt.c: 630: }
  5865                           ;doprnt.c: 635: switch(c = *f++) {
  5866  0293  2A96               	goto	l3204
  5867  0294                     l328:	
  5868                           ;doprnt.c: 662: case 'f':
  5869                           
  5870                           ;doprnt.c: 638: goto alldone;
  5871                           
  5872                           ;doprnt.c: 637: case 0:
  5873                           
  5874                           
  5875                           ;doprnt.c: 663: flag |= 0x400;
  5876  0294  1529               	bsf	(sprintf@flag^(0+128)+1),2
  5877                           
  5878                           ;doprnt.c: 664: break;
  5879  0295  2AAC               	goto	l3206
  5880  0296                     l3204:	
  5881                           ;doprnt.c: 822: }
  5882                           
  5883                           ;doprnt.c: 813: continue;
  5884                           
  5885                           ;doprnt.c: 802: default:
  5886                           
  5887  0296  0020               	movlb	0	; select bank0
  5888  0297  085A               	movf	sprintf@f+1,w
  5889  0298  00DF               	movwf	??_sprintf+1
  5890  0299  0859               	movf	sprintf@f,w
  5891  029A  00DE               	movwf	??_sprintf
  5892  029B  0AD9               	incf	sprintf@f,f
  5893  029C  1903               	skipnz
  5894  029D  0ADA               	incf	sprintf@f+1,f
  5895  029E  085E               	movf	??_sprintf,w
  5896  029F  0084               	movwf	4
  5897  02A0  085F               	movf	??_sprintf+1,w
  5898  02A1  0085               	movwf	5
  5899  02A2  0800               	movf	0,w	;code access
  5900  02A3  0021               	movlb	1	; select bank1
  5901  02A4  00B8               	movwf	sprintf@c^(0+128)
  5902                           
  5903                           ; Switch size 1, requested type "space"
  5904                           ; Number of cases is 2, Range of values is 0 to 102
  5905                           ; switch strategies available:
  5906                           ; Name         Instructions Cycles
  5907                           ; simple_byte            7     4 (average)
  5908                           ; direct_byte          212     6 (fixed)
  5909                           ; jumptable            260     6 (fixed)
  5910                           ;	Chosen strategy is simple_byte
  5911  02A5  3A00               	xorlw	0	; case 0
  5912  02A6  1903               	skipnz
  5913  02A7  2FD6               	goto	l3412
  5914  02A8  3A66               	xorlw	102	; case 102
  5915  02A9  1903               	skipnz
  5916  02AA  2A94               	goto	l328
  5917  02AB  29DD               	goto	l3410
  5918  02AC                     l3206:	
  5919                           
  5920                           ;doprnt.c: 825: if(flag & (0x700)) {
  5921  02AC  3000               	movlw	0
  5922  02AD  0528               	andwf	sprintf@flag^(0+128),w
  5923  02AE  0020               	movlb	0	; select bank0
  5924  02AF  00DE               	movwf	??_sprintf
  5925  02B0  3007               	movlw	7
  5926  02B1  0021               	movlb	1	; select bank1
  5927  02B2  0529               	andwf	(sprintf@flag+1)^(0+128),w
  5928  02B3  0020               	movlb	0	; select bank0
  5929  02B4  00DF               	movwf	??_sprintf+1
  5930  02B5  085E               	movf	??_sprintf,w
  5931  02B6  045F               	iorwf	??_sprintf+1,w
  5932  02B7  1903               	btfsc	3,2
  5933  02B8  2EFB               	goto	l3366
  5934                           
  5935                           ;doprnt.c: 827: if(flag & 0x1000)
  5936  02B9  0021               	movlb	1	; select bank1
  5937  02BA  1E29               	btfss	(sprintf@flag+1)^(0+128),4
  5938  02BB  2AC0               	goto	l3212
  5939                           
  5940                           ;doprnt.c: 829: prec = 6;
  5941  02BC  3006               	movlw	6
  5942  02BD  00B6               	movwf	sprintf@prec^(0+128)
  5943  02BE  3000               	movlw	0
  5944  02BF  00B7               	movwf	(sprintf@prec^(0+128)+1)
  5945  02C0                     l3212:	
  5946                           
  5947                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  5948  02C0  0823               	movf	sprintf@ap^(0+128),w
  5949  02C1  0086               	movwf	6
  5950  02C2  0187               	clrf	7
  5951  02C3  3F40               	moviw [0]fsr1
  5952  02C4  00B2               	movwf	sprintf@fval^(0+128)
  5953  02C5  3F41               	moviw [1]fsr1
  5954  02C6  00B3               	movwf	(sprintf@fval+1)^(0+128)
  5955  02C7  3F42               	moviw [2]fsr1
  5956  02C8  00B4               	movwf	(sprintf@fval+2)^(0+128)
  5957  02C9  3003               	movlw	3
  5958  02CA  0020               	movlb	0	; select bank0
  5959  02CB  00DE               	movwf	??_sprintf
  5960  02CC  085E               	movf	??_sprintf,w
  5961  02CD  0021               	movlb	1	; select bank1
  5962  02CE  07A3               	addwf	sprintf@ap^(0+128),f
  5963                           
  5964                           ;doprnt.c: 831: if(fval < 0.0) {
  5965  02CF  0832               	movf	sprintf@fval^(0+128),w
  5966  02D0  00F0               	movwf	___ftge@ff1
  5967  02D1  0833               	movf	(sprintf@fval+1)^(0+128),w
  5968  02D2  00F1               	movwf	___ftge@ff1+1
  5969  02D3  0834               	movf	(sprintf@fval+2)^(0+128),w
  5970  02D4  00F2               	movwf	___ftge@ff1+2
  5971  02D5  3000               	movlw	0
  5972  02D6  00F3               	movwf	___ftge@ff2
  5973  02D7  3000               	movlw	0
  5974  02D8  00F4               	movwf	___ftge@ff2+1
  5975  02D9  3000               	movlw	0
  5976  02DA  00F5               	movwf	___ftge@ff2+2
  5977  02DB  3192  2244  3181   	fcall	___ftge
  5978  02DE  1803               	btfsc	3,0
  5979  02DF  2AF5               	goto	l3222
  5980                           
  5981                           ;doprnt.c: 832: fval = -fval;
  5982  02E0  0021               	movlb	1	; select bank1
  5983  02E1  0832               	movf	sprintf@fval^(0+128),w
  5984  02E2  00F0               	movwf	___ftneg@f1
  5985  02E3  0833               	movf	(sprintf@fval+1)^(0+128),w
  5986  02E4  00F1               	movwf	___ftneg@f1+1
  5987  02E5  0834               	movf	(sprintf@fval+2)^(0+128),w
  5988  02E6  00F2               	movwf	___ftneg@f1+2
  5989  02E7  3180  2004  3181   	fcall	___ftneg
  5990  02EA  0870               	movf	?___ftneg,w
  5991  02EB  0021               	movlb	1	; select bank1
  5992  02EC  00B2               	movwf	sprintf@fval^(0+128)
  5993  02ED  0871               	movf	?___ftneg+1,w
  5994  02EE  00B3               	movwf	(sprintf@fval+1)^(0+128)
  5995  02EF  0872               	movf	?___ftneg+2,w
  5996  02F0  00B4               	movwf	(sprintf@fval+2)^(0+128)
  5997                           
  5998                           ;doprnt.c: 833: flag |= 0x03;
  5999  02F1  3003               	movlw	3
  6000  02F2  04A8               	iorwf	sprintf@flag^(0+128),f
  6001  02F3  3000               	movlw	0
  6002  02F4  04A9               	iorwf	(sprintf@flag+1)^(0+128),f
  6003  02F5                     l3222:	
  6004                           
  6005                           ;doprnt.c: 834: }
  6006                           ;doprnt.c: 835: exp = 0;
  6007  02F5  0021               	movlb	1	; select bank1
  6008  02F6  01B0               	clrf	sprintf@exp^(0+128)
  6009  02F7  01B1               	clrf	(sprintf@exp+1)^(0+128)
  6010                           
  6011                           ;doprnt.c: 836: if( fval!=0) {
  6012  02F8  0834               	movf	(sprintf@fval+2)^(0+128),w
  6013  02F9  0433               	iorwf	(sprintf@fval+1)^(0+128),w
  6014  02FA  0432               	iorwf	sprintf@fval^(0+128),w
  6015  02FB  1903               	skipnz
  6016  02FC  2BB5               	goto	l334
  6017                           
  6018                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  6019  02FD  30B2               	movlw	low (sprintf@fval| 0)
  6020  02FE  0086               	movwf	6
  6021  02FF  0187               	clrf	7
  6022  0300  3F40               	moviw [0]fsr1
  6023  0301  0020               	movlb	0	; select bank0
  6024  0302  00DE               	movwf	??_sprintf
  6025  0303  3F41               	moviw [1]fsr1
  6026  0304  00DF               	movwf	??_sprintf+1
  6027  0305  3F42               	moviw [2]fsr1
  6028  0306  00E0               	movwf	??_sprintf+2
  6029  0307  3F43               	moviw [3]fsr1
  6030  0308  00E1               	movwf	??_sprintf+3
  6031  0309  300F               	movlw	15
  6032  030A                     u4075:	
  6033  030A  36E1               	lsrf	??_sprintf+3,f
  6034  030B  0CE0               	rrf	??_sprintf+2,f
  6035  030C  0CDF               	rrf	??_sprintf+1,f
  6036  030D  0CDE               	rrf	??_sprintf,f
  6037  030E  0B89               	decfsz	9,f
  6038  030F  2B0A               	goto	u4075
  6039  0310  30FF               	movlw	255
  6040  0311  055E               	andwf	??_sprintf,w
  6041  0312  00E2               	movwf	??_sprintf+4
  6042  0313  3000               	movlw	0
  6043  0314  055F               	andwf	??_sprintf+1,w
  6044  0315  00E3               	movwf	??_sprintf+5
  6045  0316  0862               	movf	??_sprintf+4,w
  6046  0317  3E82               	addlw	130
  6047  0318  0021               	movlb	1	; select bank1
  6048  0319  00B0               	movwf	sprintf@exp^(0+128)
  6049  031A  30FF               	movlw	255
  6050  031B  0020               	movlb	0	; select bank0
  6051  031C  3D63               	addwfc	??_sprintf+5,w
  6052  031D  0021               	movlb	1	; select bank1
  6053  031E  00B1               	movwf	(sprintf@exp+1)^(0+128)
  6054                           
  6055                           ;doprnt.c: 838: exp--;
  6056  031F  30FF               	movlw	255
  6057  0320  07B0               	addwf	sprintf@exp^(0+128),f
  6058  0321  30FF               	movlw	255
  6059  0322  3DB1               	addwfc	(sprintf@exp+1)^(0+128),f
  6060                           
  6061                           ;doprnt.c: 839: exp *= 3;
  6062  0323  3003               	movlw	3
  6063  0324  0020               	movlb	0	; select bank0
  6064  0325  00A4               	movwf	___wmul@multiplier
  6065  0326  3000               	movlw	0
  6066  0327  00A5               	movwf	___wmul@multiplier+1
  6067  0328  0021               	movlb	1	; select bank1
  6068  0329  0831               	movf	(sprintf@exp+1)^(0+128),w
  6069  032A  0020               	movlb	0	; select bank0
  6070  032B  00A7               	movwf	___wmul@multiplicand+1
  6071  032C  0021               	movlb	1	; select bank1
  6072  032D  0830               	movf	sprintf@exp^(0+128),w
  6073  032E  0020               	movlb	0	; select bank0
  6074  032F  00A6               	movwf	___wmul@multiplicand
  6075  0330  3191  2141  3181   	fcall	___wmul
  6076  0333  0020               	movlb	0	; select bank0
  6077  0334  0825               	movf	?___wmul+1,w
  6078  0335  0021               	movlb	1	; select bank1
  6079  0336  00B1               	movwf	(sprintf@exp+1)^(0+128)
  6080  0337  0020               	movlb	0	; select bank0
  6081  0338  0824               	movf	?___wmul,w
  6082  0339  0021               	movlb	1	; select bank1
  6083  033A  00B0               	movwf	sprintf@exp^(0+128)
  6084                           
  6085                           ;doprnt.c: 840: exp /= 10;
  6086  033B  300A               	movlw	10
  6087  033C  00F7               	movwf	___awdiv@divisor
  6088  033D  3000               	movlw	0
  6089  033E  00F8               	movwf	___awdiv@divisor+1
  6090  033F  0831               	movf	(sprintf@exp+1)^(0+128),w
  6091  0340  00FA               	movwf	___awdiv@dividend+1
  6092  0341  0830               	movf	sprintf@exp^(0+128),w
  6093  0342  00F9               	movwf	___awdiv@dividend
  6094  0343  3188  2006  3181   	fcall	___awdiv
  6095  0346  0878               	movf	?___awdiv+1,w
  6096  0347  0021               	movlb	1	; select bank1
  6097  0348  00B1               	movwf	(sprintf@exp+1)^(0+128)
  6098  0349  0877               	movf	?___awdiv,w
  6099  034A  00B0               	movwf	sprintf@exp^(0+128)
  6100                           
  6101                           ;doprnt.c: 841: if(exp < 0)
  6102  034B  1FB1               	btfss	(sprintf@exp+1)^(0+128),7
  6103  034C  2B51               	goto	l3238
  6104                           
  6105                           ;doprnt.c: 842: exp--;
  6106  034D  30FF               	movlw	255
  6107  034E  07B0               	addwf	sprintf@exp^(0+128),f
  6108  034F  30FF               	movlw	255
  6109  0350  3DB1               	addwfc	(sprintf@exp+1)^(0+128),f
  6110  0351                     l3238:	
  6111                           
  6112                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  6113  0351  0330               	decf	sprintf@exp^(0+128),w
  6114  0352  3AFF               	xorlw	255
  6115  0353  318B  2321  3181   	fcall	_scale
  6116  0356  0020               	movlb	0	; select bank0
  6117  0357  0838               	movf	?_scale,w
  6118  0358  0021               	movlb	1	; select bank1
  6119  0359  00AC               	movwf	sprintf@tmpval^(0+128)
  6120  035A  0020               	movlb	0	; select bank0
  6121  035B  0839               	movf	?_scale+1,w
  6122  035C  0021               	movlb	1	; select bank1
  6123  035D  00AD               	movwf	(sprintf@tmpval+1)^(0+128)
  6124  035E  0020               	movlb	0	; select bank0
  6125  035F  083A               	movf	?_scale+2,w
  6126  0360  0021               	movlb	1	; select bank1
  6127  0361  00AE               	movwf	(sprintf@tmpval+2)^(0+128)
  6128                           
  6129                           ;doprnt.c: 847: tmpval.integ *= fval;
  6130  0362  0832               	movf	sprintf@fval^(0+128),w
  6131  0363  0020               	movlb	0	; select bank0
  6132  0364  00A8               	movwf	___ftmul@f1
  6133  0365  0021               	movlb	1	; select bank1
  6134  0366  0833               	movf	(sprintf@fval+1)^(0+128),w
  6135  0367  0020               	movlb	0	; select bank0
  6136  0368  00A9               	movwf	___ftmul@f1+1
  6137  0369  0021               	movlb	1	; select bank1
  6138  036A  0834               	movf	(sprintf@fval+2)^(0+128),w
  6139  036B  0020               	movlb	0	; select bank0
  6140  036C  00AA               	movwf	___ftmul@f1+2
  6141  036D  0021               	movlb	1	; select bank1
  6142  036E  082C               	movf	sprintf@tmpval^(0+128),w
  6143  036F  0020               	movlb	0	; select bank0
  6144  0370  00AB               	movwf	___ftmul@f2
  6145  0371  0021               	movlb	1	; select bank1
  6146  0372  082D               	movf	(sprintf@tmpval+1)^(0+128),w
  6147  0373  0020               	movlb	0	; select bank0
  6148  0374  00AC               	movwf	___ftmul@f2+1
  6149  0375  0021               	movlb	1	; select bank1
  6150  0376  082E               	movf	(sprintf@tmpval+2)^(0+128),w
  6151  0377  0020               	movlb	0	; select bank0
  6152  0378  00AD               	movwf	___ftmul@f2+2
  6153  0379  3197  274C  3181   	fcall	___ftmul
  6154  037C  0020               	movlb	0	; select bank0
  6155  037D  0828               	movf	?___ftmul,w
  6156  037E  0021               	movlb	1	; select bank1
  6157  037F  00AC               	movwf	sprintf@tmpval^(0+128)
  6158  0380  0020               	movlb	0	; select bank0
  6159  0381  0829               	movf	?___ftmul+1,w
  6160  0382  0021               	movlb	1	; select bank1
  6161  0383  00AD               	movwf	(sprintf@tmpval+1)^(0+128)
  6162  0384  0020               	movlb	0	; select bank0
  6163  0385  082A               	movf	?___ftmul+2,w
  6164  0386  0021               	movlb	1	; select bank1
  6165  0387  00AE               	movwf	(sprintf@tmpval+2)^(0+128)
  6166                           
  6167                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  6168  0388  082C               	movf	sprintf@tmpval^(0+128),w
  6169  0389  00F0               	movwf	___ftge@ff1
  6170  038A  082D               	movf	(sprintf@tmpval+1)^(0+128),w
  6171  038B  00F1               	movwf	___ftge@ff1+1
  6172  038C  082E               	movf	(sprintf@tmpval+2)^(0+128),w
  6173  038D  00F2               	movwf	___ftge@ff1+2
  6174  038E  3000               	movlw	0
  6175  038F  00F3               	movwf	___ftge@ff2
  6176  0390  3080               	movlw	128
  6177  0391  00F4               	movwf	___ftge@ff2+1
  6178  0392  303F               	movlw	63
  6179  0393  00F5               	movwf	___ftge@ff2+2
  6180  0394  3192  2244  3181   	fcall	___ftge
  6181  0397  1803               	btfsc	3,0
  6182  0398  2B9E               	goto	l3246
  6183                           
  6184                           ;doprnt.c: 849: exp--;
  6185  0399  30FF               	movlw	255
  6186  039A  0021               	movlb	1	; select bank1
  6187  039B  07B0               	addwf	sprintf@exp^(0+128),f
  6188  039C  30FF               	movlw	255
  6189  039D  2BB4               	goto	L1
  6190  039E                     l3246:	
  6191                           
  6192                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  6193  039E  0021               	movlb	1	; select bank1
  6194  039F  082C               	movf	sprintf@tmpval^(0+128),w
  6195  03A0  00F0               	movwf	___ftge@ff1
  6196  03A1  082D               	movf	(sprintf@tmpval+1)^(0+128),w
  6197  03A2  00F1               	movwf	___ftge@ff1+1
  6198  03A3  082E               	movf	(sprintf@tmpval+2)^(0+128),w
  6199  03A4  00F2               	movwf	___ftge@ff1+2
  6200  03A5  3000               	movlw	0
  6201  03A6  00F3               	movwf	___ftge@ff2
  6202  03A7  3020               	movlw	32
  6203  03A8  00F4               	movwf	___ftge@ff2+1
  6204  03A9  3041               	movlw	65
  6205  03AA  00F5               	movwf	___ftge@ff2+2
  6206  03AB  3192  2244  3181   	fcall	___ftge
  6207  03AE  1C03               	btfss	3,0
  6208  03AF  2BB5               	goto	l334
  6209                           
  6210                           ;doprnt.c: 851: exp++;
  6211  03B0  3001               	movlw	1
  6212  03B1  0021               	movlb	1	; select bank1
  6213  03B2  07B0               	addwf	sprintf@exp^(0+128),f
  6214  03B3  3000               	movlw	0
  6215  03B4                     L1:	
  6216  03B4  3DB1               	addwfc	(sprintf@exp+1)^(0+128),f
  6217  03B5                     l334:	
  6218                           
  6219                           ;doprnt.c: 852: }
  6220                           ;doprnt.c: 1112: if(prec <= 12)
  6221  03B5  0021               	movlb	1	; select bank1
  6222  03B6  0837               	movf	(sprintf@prec+1)^(0+128),w
  6223  03B7  3A80               	xorlw	128
  6224  03B8  0020               	movlb	0	; select bank0
  6225  03B9  00DE               	movwf	??_sprintf
  6226  03BA  3080               	movlw	128
  6227  03BB  025E               	subwf	??_sprintf,w
  6228  03BC  1D03               	skipz
  6229  03BD  2BC1               	goto	u4115
  6230  03BE  300D               	movlw	13
  6231  03BF  0021               	movlb	1	; select bank1
  6232  03C0  0236               	subwf	sprintf@prec^(0+128),w
  6233  03C1                     u4115:	
  6234  03C1  1803               	skipnc
  6235  03C2  2BEA               	goto	l3252
  6236                           
  6237                           ;doprnt.c: 1113: fval += fround(prec);
  6238  03C3  0021               	movlb	1	; select bank1
  6239  03C4  0836               	movf	sprintf@prec^(0+128),w
  6240  03C5  3180  2070  3181   	fcall	_fround
  6241  03C8  0020               	movlb	0	; select bank0
  6242  03C9  0838               	movf	?_fround,w
  6243  03CA  00C6               	movwf	___ftadd@f1
  6244  03CB  0839               	movf	?_fround+1,w
  6245  03CC  00C7               	movwf	___ftadd@f1+1
  6246  03CD  083A               	movf	?_fround+2,w
  6247  03CE  00C8               	movwf	___ftadd@f1+2
  6248  03CF  0021               	movlb	1	; select bank1
  6249  03D0  0832               	movf	sprintf@fval^(0+128),w
  6250  03D1  0020               	movlb	0	; select bank0
  6251  03D2  00C9               	movwf	___ftadd@f2
  6252  03D3  0021               	movlb	1	; select bank1
  6253  03D4  0833               	movf	(sprintf@fval+1)^(0+128),w
  6254  03D5  0020               	movlb	0	; select bank0
  6255  03D6  00CA               	movwf	___ftadd@f2+1
  6256  03D7  0021               	movlb	1	; select bank1
  6257  03D8  0834               	movf	(sprintf@fval+2)^(0+128),w
  6258  03D9  0020               	movlb	0	; select bank0
  6259  03DA  00CB               	movwf	___ftadd@f2+2
  6260  03DB  3189  210E  3181   	fcall	___ftadd
  6261  03DE  0020               	movlb	0	; select bank0
  6262  03DF  0846               	movf	?___ftadd,w
  6263  03E0  0021               	movlb	1	; select bank1
  6264  03E1  00B2               	movwf	sprintf@fval^(0+128)
  6265  03E2  0020               	movlb	0	; select bank0
  6266  03E3  0847               	movf	?___ftadd+1,w
  6267  03E4  0021               	movlb	1	; select bank1
  6268  03E5  00B3               	movwf	(sprintf@fval+1)^(0+128)
  6269  03E6  0020               	movlb	0	; select bank0
  6270  03E7  0848               	movf	?___ftadd+2,w
  6271  03E8  0021               	movlb	1	; select bank1
  6272  03E9  00B4               	movwf	(sprintf@fval+2)^(0+128)
  6273  03EA                     l3252:	
  6274                           
  6275                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  6276  03EA  0021               	movlb	1	; select bank1
  6277  03EB  0831               	movf	(sprintf@exp+1)^(0+128),w
  6278  03EC  3A80               	xorlw	128
  6279  03ED  0020               	movlb	0	; select bank0
  6280  03EE  00DE               	movwf	??_sprintf
  6281  03EF  3080               	movlw	128
  6282  03F0  025E               	subwf	??_sprintf,w
  6283  03F1  1D03               	skipz
  6284  03F2  2BF6               	goto	u4125
  6285  03F3  300A               	movlw	10
  6286  03F4  0021               	movlb	1	; select bank1
  6287  03F5  0230               	subwf	sprintf@exp^(0+128),w
  6288  03F6                     u4125:	
  6289  03F6  1803               	skipnc
  6290  03F7  2C21               	goto	l3260
  6291  03F8  0021               	movlb	1	; select bank1
  6292  03F9  0834               	movf	(sprintf@fval+2)^(0+128),w
  6293  03FA  0433               	iorwf	(sprintf@fval+1)^(0+128),w
  6294  03FB  0432               	iorwf	sprintf@fval^(0+128),w
  6295  03FC  1903               	skipnz
  6296  03FD  2C69               	goto	l3274
  6297  03FE  0832               	movf	sprintf@fval^(0+128),w
  6298  03FF  0020               	movlb	0	; select bank0
  6299  0400  00C1               	movwf	___fttol@f1
  6300  0401  0021               	movlb	1	; select bank1
  6301  0402  0833               	movf	(sprintf@fval+1)^(0+128),w
  6302  0403  0020               	movlb	0	; select bank0
  6303  0404  00C2               	movwf	___fttol@f1+1
  6304  0405  0021               	movlb	1	; select bank1
  6305  0406  0834               	movf	(sprintf@fval+2)^(0+128),w
  6306  0407  0020               	movlb	0	; select bank0
  6307  0408  00C3               	movwf	___fttol@f1+2
  6308  0409  3195  256F  3181   	fcall	___fttol
  6309  040C  0020               	movlb	0	; select bank0
  6310  040D  0844               	movf	?___fttol+3,w
  6311  040E  0443               	iorwf	?___fttol+2,w
  6312  040F  0442               	iorwf	?___fttol+1,w
  6313  0410  0441               	iorwf	?___fttol,w
  6314  0411  1D03               	skipz
  6315  0412  2C69               	goto	l3274
  6316  0413  0021               	movlb	1	; select bank1
  6317  0414  0831               	movf	(sprintf@exp+1)^(0+128),w
  6318  0415  3A80               	xorlw	128
  6319  0416  0020               	movlb	0	; select bank0
  6320  0417  00DE               	movwf	??_sprintf
  6321  0418  3080               	movlw	128
  6322  0419  025E               	subwf	??_sprintf,w
  6323  041A  1D03               	skipz
  6324  041B  2C1F               	goto	u4155
  6325  041C  3002               	movlw	2
  6326  041D  0021               	movlb	1	; select bank1
  6327  041E  0230               	subwf	sprintf@exp^(0+128),w
  6328  041F                     u4155:	
  6329  041F  1C03               	skipc
  6330  0420  2C69               	goto	l3274
  6331  0421                     l3260:	
  6332                           
  6333                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  6334  0421  0021               	movlb	1	; select bank1
  6335  0422  082C               	movf	sprintf@tmpval^(0+128),w
  6336  0423  00F0               	movwf	___ftge@ff1
  6337  0424  082D               	movf	(sprintf@tmpval+1)^(0+128),w
  6338  0425  00F1               	movwf	___ftge@ff1+1
  6339  0426  082E               	movf	(sprintf@tmpval+2)^(0+128),w
  6340  0427  00F2               	movwf	___ftge@ff1+2
  6341  0428  3070               	movlw	112
  6342  0429  00F3               	movwf	___ftge@ff2
  6343  042A  3089               	movlw	137
  6344  042B  00F4               	movwf	___ftge@ff2+1
  6345  042C  3040               	movlw	64
  6346  042D  00F5               	movwf	___ftge@ff2+2
  6347  042E  3192  2244  3181   	fcall	___ftge
  6348  0431  1803               	btfsc	3,0
  6349  0432  2C35               	goto	l3264
  6350                           
  6351                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  6352  0433  30F7               	movlw	247
  6353  0434  2C36               	goto	L2
  6354  0435                     l3264:	
  6355                           ;doprnt.c: 1122: }else{
  6356                           
  6357                           
  6358                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  6359  0435  30F8               	movlw	248
  6360  0436                     L2:	
  6361  0436  0021               	movlb	1	; select bank1
  6362  0437  07B0               	addwf	sprintf@exp^(0+128),f
  6363  0438  30FF               	movlw	255
  6364  0439  3DB1               	addwfc	(sprintf@exp+1)^(0+128),f
  6365                           
  6366                           ;doprnt.c: 1124: }
  6367                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  6368  043A  0830               	movf	sprintf@exp^(0+128),w
  6369  043B  318B  2321  3181   	fcall	_scale
  6370  043E  0020               	movlb	0	; select bank0
  6371  043F  0838               	movf	?_scale,w
  6372  0440  0021               	movlb	1	; select bank1
  6373  0441  00AC               	movwf	sprintf@tmpval^(0+128)
  6374  0442  0020               	movlb	0	; select bank0
  6375  0443  0839               	movf	?_scale+1,w
  6376  0444  0021               	movlb	1	; select bank1
  6377  0445  00AD               	movwf	(sprintf@tmpval+1)^(0+128)
  6378  0446  0020               	movlb	0	; select bank0
  6379  0447  083A               	movf	?_scale+2,w
  6380  0448  0021               	movlb	1	; select bank1
  6381  0449  00AE               	movwf	(sprintf@tmpval+2)^(0+128)
  6382                           
  6383                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  6384  044A  0832               	movf	sprintf@fval^(0+128),w
  6385  044B  00F0               	movwf	__tdiv_to_l_@f1
  6386  044C  0833               	movf	(sprintf@fval+1)^(0+128),w
  6387  044D  00F1               	movwf	__tdiv_to_l_@f1+1
  6388  044E  0834               	movf	(sprintf@fval+2)^(0+128),w
  6389  044F  00F2               	movwf	__tdiv_to_l_@f1+2
  6390  0450  082C               	movf	sprintf@tmpval^(0+128),w
  6391  0451  00F3               	movwf	__tdiv_to_l_@f2
  6392  0452  082D               	movf	(sprintf@tmpval+1)^(0+128),w
  6393  0453  00F4               	movwf	__tdiv_to_l_@f2+1
  6394  0454  082E               	movf	(sprintf@tmpval+2)^(0+128),w
  6395  0455  00F5               	movwf	__tdiv_to_l_@f2+2
  6396  0456  3188  2058  3181   	fcall	__tdiv_to_l_
  6397  0459  0873               	movf	?__tdiv_to_l_+3,w
  6398  045A  0021               	movlb	1	; select bank1
  6399  045B  00A7               	movwf	(sprintf@val+3)^(0+128)
  6400  045C  0872               	movf	?__tdiv_to_l_+2,w
  6401  045D  00A6               	movwf	(sprintf@val+2)^(0+128)
  6402  045E  0871               	movf	?__tdiv_to_l_+1,w
  6403  045F  00A5               	movwf	(sprintf@val+1)^(0+128)
  6404  0460  0870               	movf	?__tdiv_to_l_,w
  6405  0461  00A4               	movwf	sprintf@val^(0+128)
  6406                           
  6407                           ;doprnt.c: 1129: fval = 0.0;
  6408  0462  3000               	movlw	0
  6409  0463  00B2               	movwf	sprintf@fval^(0+128)
  6410  0464  3000               	movlw	0
  6411  0465  00B3               	movwf	(sprintf@fval+1)^(0+128)
  6412  0466  3000               	movlw	0
  6413  0467  00B4               	movwf	(sprintf@fval+2)^(0+128)
  6414                           
  6415                           ;doprnt.c: 1130: } else {
  6416  0468  2CB7               	goto	l3278
  6417  0469                     l3274:	
  6418                           
  6419                           ;doprnt.c: 1131: val = (unsigned long)fval;
  6420  0469  0021               	movlb	1	; select bank1
  6421  046A  0832               	movf	sprintf@fval^(0+128),w
  6422  046B  0020               	movlb	0	; select bank0
  6423  046C  00C1               	movwf	___fttol@f1
  6424  046D  0021               	movlb	1	; select bank1
  6425  046E  0833               	movf	(sprintf@fval+1)^(0+128),w
  6426  046F  0020               	movlb	0	; select bank0
  6427  0470  00C2               	movwf	___fttol@f1+1
  6428  0471  0021               	movlb	1	; select bank1
  6429  0472  0834               	movf	(sprintf@fval+2)^(0+128),w
  6430  0473  0020               	movlb	0	; select bank0
  6431  0474  00C3               	movwf	___fttol@f1+2
  6432  0475  3195  256F  3181   	fcall	___fttol
  6433  0478  0020               	movlb	0	; select bank0
  6434  0479  0844               	movf	?___fttol+3,w
  6435  047A  0021               	movlb	1	; select bank1
  6436  047B  00A7               	movwf	(sprintf@val+3)^(0+128)
  6437  047C  0020               	movlb	0	; select bank0
  6438  047D  0843               	movf	?___fttol+2,w
  6439  047E  0021               	movlb	1	; select bank1
  6440  047F  00A6               	movwf	(sprintf@val+2)^(0+128)
  6441  0480  0020               	movlb	0	; select bank0
  6442  0481  0842               	movf	?___fttol+1,w
  6443  0482  0021               	movlb	1	; select bank1
  6444  0483  00A5               	movwf	(sprintf@val+1)^(0+128)
  6445  0484  0020               	movlb	0	; select bank0
  6446  0485  0841               	movf	?___fttol,w
  6447  0486  0021               	movlb	1	; select bank1
  6448  0487  00A4               	movwf	sprintf@val^(0+128)
  6449                           
  6450                           ;doprnt.c: 1132: fval -= (double)val;
  6451  0488  0827               	movf	(sprintf@val+3)^(0+128),w
  6452  0489  00FB               	movwf	___lltoft@c+3
  6453  048A  0826               	movf	(sprintf@val+2)^(0+128),w
  6454  048B  00FA               	movwf	___lltoft@c+2
  6455  048C  0825               	movf	(sprintf@val+1)^(0+128),w
  6456  048D  00F9               	movwf	___lltoft@c+1
  6457  048E  0824               	movf	sprintf@val^(0+128),w
  6458  048F  00F8               	movwf	___lltoft@c
  6459  0490  3191  21C1  3181   	fcall	___lltoft
  6460  0493  0878               	movf	?___lltoft,w
  6461  0494  0020               	movlb	0	; select bank0
  6462  0495  00D3               	movwf	___ftsub@f2
  6463  0496  0879               	movf	?___lltoft+1,w
  6464  0497  00D4               	movwf	___ftsub@f2+1
  6465  0498  087A               	movf	?___lltoft+2,w
  6466  0499  00D5               	movwf	___ftsub@f2+2
  6467  049A  0021               	movlb	1	; select bank1
  6468  049B  0832               	movf	sprintf@fval^(0+128),w
  6469  049C  0020               	movlb	0	; select bank0
  6470  049D  00D6               	movwf	___ftsub@f1
  6471  049E  0021               	movlb	1	; select bank1
  6472  049F  0833               	movf	(sprintf@fval+1)^(0+128),w
  6473  04A0  0020               	movlb	0	; select bank0
  6474  04A1  00D7               	movwf	___ftsub@f1+1
  6475  04A2  0021               	movlb	1	; select bank1
  6476  04A3  0834               	movf	(sprintf@fval+2)^(0+128),w
  6477  04A4  0020               	movlb	0	; select bank0
  6478  04A5  00D8               	movwf	___ftsub@f1+2
  6479  04A6  3191  215D  3181   	fcall	___ftsub
  6480  04A9  0020               	movlb	0	; select bank0
  6481  04AA  0853               	movf	?___ftsub,w
  6482  04AB  0021               	movlb	1	; select bank1
  6483  04AC  00B2               	movwf	sprintf@fval^(0+128)
  6484  04AD  0020               	movlb	0	; select bank0
  6485  04AE  0854               	movf	?___ftsub+1,w
  6486  04AF  0021               	movlb	1	; select bank1
  6487  04B0  00B3               	movwf	(sprintf@fval+1)^(0+128)
  6488  04B1  0020               	movlb	0	; select bank0
  6489  04B2  0855               	movf	?___ftsub+2,w
  6490  04B3  0021               	movlb	1	; select bank1
  6491  04B4  00B4               	movwf	(sprintf@fval+2)^(0+128)
  6492                           
  6493                           ;doprnt.c: 1133: exp = 0;
  6494  04B5  01B0               	clrf	sprintf@exp^(0+128)
  6495  04B6  01B1               	clrf	(sprintf@exp+1)^(0+128)
  6496  04B7                     l3278:	
  6497                           
  6498                           ;doprnt.c: 1134: }
  6499                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  6500  04B7  01B8               	clrf	sprintf@c^(0+128)
  6501  04B8  0AB8               	incf	sprintf@c^(0+128),f
  6502  04B9  300A               	movlw	10
  6503  04BA  0638               	xorwf	sprintf@c^(0+128),w
  6504  04BB  1903               	btfsc	3,2
  6505  04BC  2CF4               	goto	l3290
  6506  04BD                     l3284:	
  6507                           
  6508                           ;doprnt.c: 1137: if(val < dpowers[c])
  6509  04BD  0838               	movf	sprintf@c^(0+128),w
  6510  04BE  0020               	movlb	0	; select bank0
  6511  04BF  00DE               	movwf	??_sprintf
  6512  04C0  01DF               	clrf	??_sprintf+1
  6513  04C1  35DE               	lslf	??_sprintf,f
  6514  04C2  0DDF               	rlf	??_sprintf+1,f
  6515  04C3  35DE               	lslf	??_sprintf,f
  6516  04C4  0DDF               	rlf	??_sprintf+1,f
  6517  04C5  3000               	movlw	low (_dpowers| (0+32768))
  6518  04C6  075E               	addwf	??_sprintf,w
  6519  04C7  0084               	movwf	4
  6520  04C8  3098               	movlw	high (_dpowers| (0+32768))
  6521  04C9  3D5F               	addwfc	??_sprintf+1,w
  6522  04CA  0085               	movwf	5
  6523  04CB  3F00               	moviw [0]fsr0
  6524  04CC  00E0               	movwf	??_sprintf+2
  6525  04CD  3F01               	moviw [1]fsr0
  6526  04CE  00E1               	movwf	??_sprintf+3
  6527  04CF  3F02               	moviw [2]fsr0
  6528  04D0  00E2               	movwf	??_sprintf+4
  6529  04D1  3F03               	moviw [3]fsr0
  6530  04D2  00E3               	movwf	??_sprintf+5
  6531  04D3  0863               	movf	??_sprintf+5,w
  6532  04D4  0021               	movlb	1	; select bank1
  6533  04D5  0227               	subwf	(sprintf@val+3)^(0+128),w
  6534  04D6  1D03               	skipz
  6535  04D7  2CE8               	goto	u4185
  6536  04D8  0020               	movlb	0	; select bank0
  6537  04D9  0862               	movf	??_sprintf+4,w
  6538  04DA  0021               	movlb	1	; select bank1
  6539  04DB  0226               	subwf	(sprintf@val+2)^(0+128),w
  6540  04DC  1D03               	skipz
  6541  04DD  2CE8               	goto	u4185
  6542  04DE  0020               	movlb	0	; select bank0
  6543  04DF  0861               	movf	??_sprintf+3,w
  6544  04E0  0021               	movlb	1	; select bank1
  6545  04E1  0225               	subwf	(sprintf@val+1)^(0+128),w
  6546  04E2  1D03               	skipz
  6547  04E3  2CE8               	goto	u4185
  6548  04E4  0020               	movlb	0	; select bank0
  6549  04E5  0860               	movf	??_sprintf+2,w
  6550  04E6  0021               	movlb	1	; select bank1
  6551  04E7  0224               	subwf	sprintf@val^(0+128),w
  6552  04E8                     u4185:	
  6553  04E8  1C03               	btfss	3,0
  6554  04E9  2CF4               	goto	l3290
  6555                           
  6556                           ;doprnt.c: 1138: break;
  6557  04EA  3001               	movlw	1
  6558  04EB  0020               	movlb	0	; select bank0
  6559  04EC  00DE               	movwf	??_sprintf
  6560  04ED  085E               	movf	??_sprintf,w
  6561  04EE  0021               	movlb	1	; select bank1
  6562  04EF  07B8               	addwf	sprintf@c^(0+128),f
  6563  04F0  300A               	movlw	10
  6564  04F1  0638               	xorwf	sprintf@c^(0+128),w
  6565  04F2  1D03               	btfss	3,2
  6566  04F3  2CBD               	goto	l3284
  6567  04F4                     l3290:	
  6568                           
  6569                           ;doprnt.c: 1142: width -= prec + c + exp;
  6570  04F4  0838               	movf	sprintf@c^(0+128),w
  6571  04F5  0020               	movlb	0	; select bank0
  6572  04F6  00DE               	movwf	??_sprintf
  6573  04F7  01DF               	clrf	??_sprintf+1
  6574  04F8  1BDE               	btfsc	??_sprintf,7
  6575  04F9  03DF               	decf	??_sprintf+1,f
  6576  04FA  0021               	movlb	1	; select bank1
  6577  04FB  0836               	movf	sprintf@prec^(0+128),w
  6578  04FC  0020               	movlb	0	; select bank0
  6579  04FD  075E               	addwf	??_sprintf,w
  6580  04FE  00E0               	movwf	??_sprintf+2
  6581  04FF  0021               	movlb	1	; select bank1
  6582  0500  0837               	movf	(sprintf@prec+1)^(0+128),w
  6583  0501  0020               	movlb	0	; select bank0
  6584  0502  3D5F               	addwfc	??_sprintf+1,w
  6585  0503  00E1               	movwf	??_sprintf+3
  6586  0504  0021               	movlb	1	; select bank1
  6587  0505  0830               	movf	sprintf@exp^(0+128),w
  6588  0506  0020               	movlb	0	; select bank0
  6589  0507  0760               	addwf	??_sprintf+2,w
  6590  0508  00E2               	movwf	??_sprintf+4
  6591  0509  0021               	movlb	1	; select bank1
  6592  050A  0831               	movf	(sprintf@exp+1)^(0+128),w
  6593  050B  0020               	movlb	0	; select bank0
  6594  050C  3D61               	addwfc	??_sprintf+3,w
  6595  050D  00E3               	movwf	??_sprintf+5
  6596  050E  0862               	movf	??_sprintf+4,w
  6597  050F  0021               	movlb	1	; select bank1
  6598  0510  02AA               	subwf	sprintf@width^(0+128),f
  6599  0511  0020               	movlb	0	; select bank0
  6600  0512  0863               	movf	??_sprintf+5,w
  6601  0513  0021               	movlb	1	; select bank1
  6602  0514  3BAB               	subwfb	(sprintf@width+1)^(0+128),f
  6603                           
  6604                           ;doprnt.c: 1143: if(
  6605                           ;doprnt.c: 1147: prec)
  6606  0515  0836               	movf	sprintf@prec^(0+128),w
  6607  0516  0437               	iorwf	(sprintf@prec+1)^(0+128),w
  6608  0517  1903               	btfsc	3,2
  6609  0518  2D1D               	goto	l3294
  6610                           
  6611                           ;doprnt.c: 1148: width--;
  6612  0519  30FF               	movlw	255
  6613  051A  07AA               	addwf	sprintf@width^(0+128),f
  6614  051B  30FF               	movlw	255
  6615  051C  3DAB               	addwfc	(sprintf@width+1)^(0+128),f
  6616  051D                     l3294:	
  6617                           
  6618                           ;doprnt.c: 1149: if(flag & 0x03)
  6619  051D  3003               	movlw	3
  6620  051E  0528               	andwf	sprintf@flag^(0+128),w
  6621  051F  0020               	movlb	0	; select bank0
  6622  0520  00DE               	movwf	??_sprintf
  6623  0521  3000               	movlw	0
  6624  0522  0021               	movlb	1	; select bank1
  6625  0523  0529               	andwf	(sprintf@flag+1)^(0+128),w
  6626  0524  0020               	movlb	0	; select bank0
  6627  0525  00DF               	movwf	??_sprintf+1
  6628  0526  085E               	movf	??_sprintf,w
  6629  0527  045F               	iorwf	??_sprintf+1,w
  6630  0528  1903               	btfsc	3,2
  6631  0529  2D2F               	goto	l3304
  6632                           
  6633                           ;doprnt.c: 1150: width--;
  6634  052A  30FF               	movlw	255
  6635  052B  0021               	movlb	1	; select bank1
  6636  052C                     L3:	
  6637  052C  07AA               	addwf	sprintf@width^(0+128),f
  6638  052D  30FF               	movlw	255
  6639  052E  3DAB               	addwfc	(sprintf@width+1)^(0+128),f
  6640  052F                     l3304:	
  6641  052F  0021               	movlb	1	; select bank1
  6642  0530  082B               	movf	(sprintf@width+1)^(0+128),w
  6643  0531  3A80               	xorlw	128
  6644  0532  0020               	movlb	0	; select bank0
  6645  0533  00DE               	movwf	??_sprintf
  6646  0534  3080               	movlw	128
  6647  0535  025E               	subwf	??_sprintf,w
  6648  0536  1D03               	skipz
  6649  0537  2D3B               	goto	u4225
  6650  0538  3001               	movlw	1
  6651  0539  0021               	movlb	1	; select bank1
  6652  053A  022A               	subwf	sprintf@width^(0+128),w
  6653  053B                     u4225:	
  6654  053B  1C03               	btfss	3,0
  6655  053C  2D4E               	goto	l3306
  6656                           
  6657                           ;doprnt.c: 1181: ((*sp++ = (' ')));
  6658                           
  6659                           ;doprnt.c: 1175: {
  6660                           ;doprnt.c: 1180: while(width > 0) {
  6661  053D  3020               	movlw	32
  6662  053E  0020               	movlb	0	; select bank0
  6663  053F  00DE               	movwf	??_sprintf
  6664  0540  0021               	movlb	1	; select bank1
  6665  0541  0835               	movf	sprintf@sp^(0+128),w
  6666  0542  0086               	movwf	6
  6667  0543  0187               	clrf	7
  6668  0544  0020               	movlb	0	; select bank0
  6669  0545  085E               	movf	??_sprintf,w
  6670  0546  0081               	movwf	1
  6671  0547  3001               	movlw	1
  6672  0548  00DE               	movwf	??_sprintf
  6673  0549  085E               	movf	??_sprintf,w
  6674  054A  0021               	movlb	1	; select bank1
  6675  054B  07B5               	addwf	sprintf@sp^(0+128),f
  6676                           
  6677                           ;doprnt.c: 1182: width--;
  6678  054C  30FF               	movlw	255
  6679  054D  2D2C               	goto	L3
  6680  054E                     l3306:	
  6681                           
  6682                           ;doprnt.c: 1183: }
  6683                           ;doprnt.c: 1188: if(flag & 0x03)
  6684  054E  3003               	movlw	3
  6685  054F  0021               	movlb	1	; select bank1
  6686  0550  0528               	andwf	sprintf@flag^(0+128),w
  6687  0551  0020               	movlb	0	; select bank0
  6688  0552  00DE               	movwf	??_sprintf
  6689  0553  3000               	movlw	0
  6690  0554  0021               	movlb	1	; select bank1
  6691  0555  0529               	andwf	(sprintf@flag+1)^(0+128),w
  6692  0556  0020               	movlb	0	; select bank0
  6693  0557  00DF               	movwf	??_sprintf+1
  6694  0558  085E               	movf	??_sprintf,w
  6695  0559  045F               	iorwf	??_sprintf+1,w
  6696  055A  1903               	btfsc	3,2
  6697  055B  2D6A               	goto	l3320
  6698                           
  6699                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  6700  055C  302D               	movlw	45
  6701  055D                     L7:	
  6702  055D  00DE               	movwf	??_sprintf
  6703  055E  0021               	movlb	1	; select bank1
  6704  055F  0835               	movf	sprintf@sp^(0+128),w
  6705  0560  0086               	movwf	6
  6706  0561  0187               	clrf	7
  6707  0562  0020               	movlb	0	; select bank0
  6708  0563  085E               	movf	??_sprintf,w
  6709  0564  0081               	movwf	1
  6710  0565  3001               	movlw	1
  6711  0566  00DE               	movwf	??_sprintf
  6712  0567  085E               	movf	??_sprintf,w
  6713  0568  0021               	movlb	1	; select bank1
  6714  0569  07B5               	addwf	sprintf@sp^(0+128),f
  6715  056A                     l3320:	
  6716  056A  30FF               	movlw	255
  6717  056B  0020               	movlb	0	; select bank0
  6718  056C  00DE               	movwf	??_sprintf
  6719  056D  085E               	movf	??_sprintf,w
  6720  056E  0021               	movlb	1	; select bank1
  6721  056F  07B8               	addwf	sprintf@c^(0+128),f
  6722  0570  0A38               	incf	sprintf@c^(0+128),w
  6723  0571  1903               	btfsc	3,2
  6724  0572  2DD1               	goto	l3328
  6725                           
  6726                           ;doprnt.c: 1200: {
  6727                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  6728                           
  6729                           ;doprnt.c: 1195: }
  6730                           ;doprnt.c: 1196: while(c--) {
  6731  0573  0838               	movf	sprintf@c^(0+128),w
  6732  0574  0020               	movlb	0	; select bank0
  6733  0575  00DE               	movwf	??_sprintf
  6734  0576  01DF               	clrf	??_sprintf+1
  6735  0577  35DE               	lslf	??_sprintf,f
  6736  0578  0DDF               	rlf	??_sprintf+1,f
  6737  0579  35DE               	lslf	??_sprintf,f
  6738  057A  0DDF               	rlf	??_sprintf+1,f
  6739  057B  3000               	movlw	low (_dpowers| (0+32768))
  6740  057C  075E               	addwf	??_sprintf,w
  6741  057D  0084               	movwf	4
  6742  057E  3098               	movlw	high (_dpowers| (0+32768))
  6743  057F  3D5F               	addwfc	??_sprintf+1,w
  6744  0580  0085               	movwf	5
  6745  0581  3F00               	moviw [0]fsr0
  6746  0582  00F0               	movwf	___lldiv@divisor
  6747  0583  3F01               	moviw [1]fsr0
  6748  0584  00F1               	movwf	___lldiv@divisor+1
  6749  0585  3F02               	moviw [2]fsr0
  6750  0586  00F2               	movwf	___lldiv@divisor+2
  6751  0587  3F03               	moviw [3]fsr0
  6752  0588  00F3               	movwf	___lldiv@divisor+3
  6753  0589  0021               	movlb	1	; select bank1
  6754  058A  0827               	movf	(sprintf@val+3)^(0+128),w
  6755  058B  00F7               	movwf	___lldiv@dividend+3
  6756  058C  0826               	movf	(sprintf@val+2)^(0+128),w
  6757  058D  00F6               	movwf	___lldiv@dividend+2
  6758  058E  0825               	movf	(sprintf@val+1)^(0+128),w
  6759  058F  00F5               	movwf	___lldiv@dividend+1
  6760  0590  0824               	movf	sprintf@val^(0+128),w
  6761  0591  00F4               	movwf	___lldiv@dividend
  6762  0592  3193  2341  3181   	fcall	___lldiv
  6763  0595  0873               	movf	?___lldiv+3,w
  6764  0596  0021               	movlb	1	; select bank1
  6765  0597  00AF               	movwf	(sprintf@tmpval+3)^(0+128)
  6766  0598  0872               	movf	?___lldiv+2,w
  6767  0599  00AE               	movwf	(sprintf@tmpval+2)^(0+128)
  6768  059A  0871               	movf	?___lldiv+1,w
  6769  059B  00AD               	movwf	(sprintf@tmpval+1)^(0+128)
  6770  059C  0870               	movf	?___lldiv,w
  6771  059D  00AC               	movwf	sprintf@tmpval^(0+128)
  6772                           
  6773                           ;doprnt.c: 1202: tmpval.vd %= 10;
  6774  059E  3000               	movlw	0
  6775  059F  00F3               	movwf	___llmod@divisor+3
  6776  05A0  3000               	movlw	0
  6777  05A1  00F2               	movwf	___llmod@divisor+2
  6778  05A2  3000               	movlw	0
  6779  05A3  00F1               	movwf	___llmod@divisor+1
  6780  05A4  300A               	movlw	10
  6781  05A5  00F0               	movwf	___llmod@divisor
  6782  05A6  082F               	movf	(sprintf@tmpval+3)^(0+128),w
  6783  05A7  00F7               	movwf	___llmod@dividend+3
  6784  05A8  082E               	movf	(sprintf@tmpval+2)^(0+128),w
  6785  05A9  00F6               	movwf	___llmod@dividend+2
  6786  05AA  082D               	movf	(sprintf@tmpval+1)^(0+128),w
  6787  05AB  00F5               	movwf	___llmod@dividend+1
  6788  05AC  082C               	movf	sprintf@tmpval^(0+128),w
  6789  05AD  00F4               	movwf	___llmod@dividend
  6790  05AE  3192  22BA  3181   	fcall	___llmod
  6791  05B1  0873               	movf	?___llmod+3,w
  6792  05B2  0021               	movlb	1	; select bank1
  6793  05B3  00AF               	movwf	(sprintf@tmpval+3)^(0+128)
  6794  05B4  0872               	movf	?___llmod+2,w
  6795  05B5  00AE               	movwf	(sprintf@tmpval+2)^(0+128)
  6796  05B6  0871               	movf	?___llmod+1,w
  6797  05B7  00AD               	movwf	(sprintf@tmpval+1)^(0+128)
  6798  05B8  0870               	movf	?___llmod,w
  6799  05B9  00AC               	movwf	sprintf@tmpval^(0+128)
  6800                           
  6801                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  6802  05BA  082C               	movf	sprintf@tmpval^(0+128),w
  6803  05BB  3E30               	addlw	48
  6804  05BC  0020               	movlb	0	; select bank0
  6805  05BD  2D5D               	goto	L7
  6806  05BE                     l3322:	
  6807                           ;doprnt.c: 1204: }
  6808                           ;doprnt.c: 1206: }
  6809                           ;doprnt.c: 1207: while(exp > 0) {
  6810                           
  6811                           
  6812                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  6813  05BE  3030               	movlw	48
  6814  05BF  0020               	movlb	0	; select bank0
  6815  05C0  00DE               	movwf	??_sprintf
  6816  05C1  0021               	movlb	1	; select bank1
  6817  05C2  0835               	movf	sprintf@sp^(0+128),w
  6818  05C3  0086               	movwf	6
  6819  05C4  0187               	clrf	7
  6820  05C5  0020               	movlb	0	; select bank0
  6821  05C6  085E               	movf	??_sprintf,w
  6822  05C7  0081               	movwf	1
  6823  05C8  3001               	movlw	1
  6824  05C9  00DE               	movwf	??_sprintf
  6825  05CA  085E               	movf	??_sprintf,w
  6826  05CB  0021               	movlb	1	; select bank1
  6827  05CC  07B5               	addwf	sprintf@sp^(0+128),f
  6828                           
  6829                           ;doprnt.c: 1209: exp--;
  6830  05CD  30FF               	movlw	255
  6831  05CE  07B0               	addwf	sprintf@exp^(0+128),f
  6832  05CF  30FF               	movlw	255
  6833  05D0  3DB1               	addwfc	(sprintf@exp+1)^(0+128),f
  6834  05D1                     l3328:	
  6835  05D1  0831               	movf	(sprintf@exp+1)^(0+128),w
  6836  05D2  3A80               	xorlw	128
  6837  05D3  0020               	movlb	0	; select bank0
  6838  05D4  00DE               	movwf	??_sprintf
  6839  05D5  3080               	movlw	128
  6840  05D6  025E               	subwf	??_sprintf,w
  6841  05D7  1D03               	skipz
  6842  05D8  2DDC               	goto	u4255
  6843  05D9  3001               	movlw	1
  6844  05DA  0021               	movlb	1	; select bank1
  6845  05DB  0230               	subwf	sprintf@exp^(0+128),w
  6846  05DC                     u4255:	
  6847  05DC  1803               	skipnc
  6848  05DD  2DBE               	goto	l3322
  6849                           
  6850                           ;doprnt.c: 1210: }
  6851                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  6852  05DE  0021               	movlb	1	; select bank1
  6853  05DF  0837               	movf	(sprintf@prec+1)^(0+128),w
  6854  05E0  3A80               	xorlw	128
  6855  05E1  0020               	movlb	0	; select bank0
  6856  05E2  00DE               	movwf	??_sprintf
  6857  05E3  3080               	movlw	128
  6858  05E4  025E               	subwf	??_sprintf,w
  6859  05E5  1D03               	skipz
  6860  05E6  2DEA               	goto	u4265
  6861  05E7  3009               	movlw	9
  6862  05E8  0021               	movlb	1	; select bank1
  6863  05E9  0236               	subwf	sprintf@prec^(0+128),w
  6864  05EA                     u4265:	
  6865  05EA  1C03               	skipc
  6866  05EB  2DEE               	goto	l3334
  6867                           
  6868                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  6869  05EC  3008               	movlw	8
  6870  05ED  2DF0               	goto	L4
  6871  05EE                     l3334:	
  6872                           
  6873                           ;doprnt.c: 1213: else
  6874                           ;doprnt.c: 1214: c = prec;
  6875  05EE  0021               	movlb	1	; select bank1
  6876  05EF  0836               	movf	sprintf@prec^(0+128),w
  6877  05F0                     L4:	
  6878  05F0  0020               	movlb	0	; select bank0
  6879  05F1  00DE               	movwf	??_sprintf
  6880  05F2  085E               	movf	??_sprintf,w
  6881  05F3  0021               	movlb	1	; select bank1
  6882  05F4  00B8               	movwf	sprintf@c^(0+128)
  6883                           
  6884                           ;doprnt.c: 1215: prec -= c;
  6885  05F5  0838               	movf	sprintf@c^(0+128),w
  6886  05F6  0020               	movlb	0	; select bank0
  6887  05F7  00DE               	movwf	??_sprintf
  6888  05F8  01DF               	clrf	??_sprintf+1
  6889  05F9  1BDE               	btfsc	??_sprintf,7
  6890  05FA  03DF               	decf	??_sprintf+1,f
  6891  05FB  085E               	movf	??_sprintf,w
  6892  05FC  0021               	movlb	1	; select bank1
  6893  05FD  02B6               	subwf	sprintf@prec^(0+128),f
  6894  05FE  0020               	movlb	0	; select bank0
  6895  05FF  085F               	movf	??_sprintf+1,w
  6896  0600  0021               	movlb	1	; select bank1
  6897  0601  3BB7               	subwfb	(sprintf@prec+1)^(0+128),f
  6898                           
  6899                           ;doprnt.c: 1219: if(c)
  6900  0602  0838               	movf	sprintf@c^(0+128),w
  6901  0603  1903               	btfsc	3,2
  6902  0604  2E14               	goto	l3342
  6903                           
  6904                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  6905  0605  302E               	movlw	46
  6906  0606  0020               	movlb	0	; select bank0
  6907  0607  00DE               	movwf	??_sprintf
  6908  0608  0021               	movlb	1	; select bank1
  6909  0609  0835               	movf	sprintf@sp^(0+128),w
  6910  060A  0086               	movwf	6
  6911  060B  0187               	clrf	7
  6912  060C  0020               	movlb	0	; select bank0
  6913  060D  085E               	movf	??_sprintf,w
  6914  060E  0081               	movwf	1
  6915  060F  3001               	movlw	1
  6916  0610  00DE               	movwf	??_sprintf
  6917  0611  085E               	movf	??_sprintf,w
  6918  0612  0021               	movlb	1	; select bank1
  6919  0613  07B5               	addwf	sprintf@sp^(0+128),f
  6920  0614                     l3342:	
  6921                           
  6922                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  6923  0614  0838               	movf	sprintf@c^(0+128),w
  6924  0615  318B  2321  3181   	fcall	_scale
  6925  0618  0020               	movlb	0	; select bank0
  6926  0619  0838               	movf	?_scale,w
  6927  061A  0021               	movlb	1	; select bank1
  6928  061B  00A0               	movwf	_sprintf$1011^(0+128)
  6929  061C  0020               	movlb	0	; select bank0
  6930  061D  0839               	movf	?_scale+1,w
  6931  061E  0021               	movlb	1	; select bank1
  6932  061F  00A1               	movwf	(_sprintf$1011+1)^(0+128)
  6933  0620  0020               	movlb	0	; select bank0
  6934  0621  083A               	movf	?_scale+2,w
  6935  0622  0021               	movlb	1	; select bank1
  6936  0623  00A2               	movwf	(_sprintf$1011+2)^(0+128)
  6937                           
  6938                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  6939  0624  0820               	movf	_sprintf$1011^(0+128),w
  6940  0625  0020               	movlb	0	; select bank0
  6941  0626  00AB               	movwf	___ftmul@f2
  6942  0627  0021               	movlb	1	; select bank1
  6943  0628  0821               	movf	(_sprintf$1011+1)^(0+128),w
  6944  0629  0020               	movlb	0	; select bank0
  6945  062A  00AC               	movwf	___ftmul@f2+1
  6946  062B  0021               	movlb	1	; select bank1
  6947  062C  0822               	movf	(_sprintf$1011+2)^(0+128),w
  6948  062D  0020               	movlb	0	; select bank0
  6949  062E  00AD               	movwf	___ftmul@f2+2
  6950  062F  0021               	movlb	1	; select bank1
  6951  0630  0832               	movf	sprintf@fval^(0+128),w
  6952  0631  0020               	movlb	0	; select bank0
  6953  0632  00A8               	movwf	___ftmul@f1
  6954  0633  0021               	movlb	1	; select bank1
  6955  0634  0833               	movf	(sprintf@fval+1)^(0+128),w
  6956  0635  0020               	movlb	0	; select bank0
  6957  0636  00A9               	movwf	___ftmul@f1+1
  6958  0637  0021               	movlb	1	; select bank1
  6959  0638  0834               	movf	(sprintf@fval+2)^(0+128),w
  6960  0639  0020               	movlb	0	; select bank0
  6961  063A  00AA               	movwf	___ftmul@f1+2
  6962  063B  3197  274C  3181   	fcall	___ftmul
  6963  063E  0020               	movlb	0	; select bank0
  6964  063F  0828               	movf	?___ftmul,w
  6965  0640  00C1               	movwf	___fttol@f1
  6966  0641  0829               	movf	?___ftmul+1,w
  6967  0642  00C2               	movwf	___fttol@f1+1
  6968  0643  082A               	movf	?___ftmul+2,w
  6969  0644  00C3               	movwf	___fttol@f1+2
  6970  0645  3195  256F  3181   	fcall	___fttol
  6971  0648  0020               	movlb	0	; select bank0
  6972  0649  0844               	movf	?___fttol+3,w
  6973  064A  0021               	movlb	1	; select bank1
  6974  064B  00A7               	movwf	(sprintf@val+3)^(0+128)
  6975  064C  0020               	movlb	0	; select bank0
  6976  064D  0843               	movf	?___fttol+2,w
  6977  064E  0021               	movlb	1	; select bank1
  6978  064F  00A6               	movwf	(sprintf@val+2)^(0+128)
  6979  0650  0020               	movlb	0	; select bank0
  6980  0651  0842               	movf	?___fttol+1,w
  6981  0652  0021               	movlb	1	; select bank1
  6982  0653  00A5               	movwf	(sprintf@val+1)^(0+128)
  6983  0654  0020               	movlb	0	; select bank0
  6984  0655  0841               	movf	?___fttol,w
  6985  0656  0021               	movlb	1	; select bank1
  6986  0657                     L5:	
  6987  0657  00A4               	movwf	sprintf@val^(0+128)
  6988  0658  30FF               	movlw	255
  6989  0659  0020               	movlb	0	; select bank0
  6990  065A  00DE               	movwf	??_sprintf
  6991  065B  085E               	movf	??_sprintf,w
  6992  065C  0021               	movlb	1	; select bank1
  6993  065D  07B8               	addwf	sprintf@c^(0+128),f
  6994  065E  0A38               	incf	sprintf@c^(0+128),w
  6995  065F  1903               	btfsc	3,2
  6996  0660  2EF6               	goto	l3364
  6997                           
  6998                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  6999                           
  7000                           ;doprnt.c: 1228: while(c--) {
  7001  0661  0838               	movf	sprintf@c^(0+128),w
  7002  0662  0020               	movlb	0	; select bank0
  7003  0663  00DE               	movwf	??_sprintf
  7004  0664  01DF               	clrf	??_sprintf+1
  7005  0665  35DE               	lslf	??_sprintf,f
  7006  0666  0DDF               	rlf	??_sprintf+1,f
  7007  0667  35DE               	lslf	??_sprintf,f
  7008  0668  0DDF               	rlf	??_sprintf+1,f
  7009  0669  3000               	movlw	low (_dpowers| (0+32768))
  7010  066A  075E               	addwf	??_sprintf,w
  7011  066B  0084               	movwf	4
  7012  066C  3098               	movlw	high (_dpowers| (0+32768))
  7013  066D  3D5F               	addwfc	??_sprintf+1,w
  7014  066E  0085               	movwf	5
  7015  066F  3F00               	moviw [0]fsr0
  7016  0670  00F0               	movwf	___lldiv@divisor
  7017  0671  3F01               	moviw [1]fsr0
  7018  0672  00F1               	movwf	___lldiv@divisor+1
  7019  0673  3F02               	moviw [2]fsr0
  7020  0674  00F2               	movwf	___lldiv@divisor+2
  7021  0675  3F03               	moviw [3]fsr0
  7022  0676  00F3               	movwf	___lldiv@divisor+3
  7023  0677  0021               	movlb	1	; select bank1
  7024  0678  0827               	movf	(sprintf@val+3)^(0+128),w
  7025  0679  00F7               	movwf	___lldiv@dividend+3
  7026  067A  0826               	movf	(sprintf@val+2)^(0+128),w
  7027  067B  00F6               	movwf	___lldiv@dividend+2
  7028  067C  0825               	movf	(sprintf@val+1)^(0+128),w
  7029  067D  00F5               	movwf	___lldiv@dividend+1
  7030  067E  0824               	movf	sprintf@val^(0+128),w
  7031  067F  00F4               	movwf	___lldiv@dividend
  7032  0680  3193  2341  3181   	fcall	___lldiv
  7033  0683  0873               	movf	?___lldiv+3,w
  7034  0684  0021               	movlb	1	; select bank1
  7035  0685  00AF               	movwf	(sprintf@tmpval+3)^(0+128)
  7036  0686  0872               	movf	?___lldiv+2,w
  7037  0687  00AE               	movwf	(sprintf@tmpval+2)^(0+128)
  7038  0688  0871               	movf	?___lldiv+1,w
  7039  0689  00AD               	movwf	(sprintf@tmpval+1)^(0+128)
  7040  068A  0870               	movf	?___lldiv,w
  7041  068B  00AC               	movwf	sprintf@tmpval^(0+128)
  7042                           
  7043                           ;doprnt.c: 1230: tmpval.vd %= 10;
  7044  068C  3000               	movlw	0
  7045  068D  00F3               	movwf	___llmod@divisor+3
  7046  068E  3000               	movlw	0
  7047  068F  00F2               	movwf	___llmod@divisor+2
  7048  0690  3000               	movlw	0
  7049  0691  00F1               	movwf	___llmod@divisor+1
  7050  0692  300A               	movlw	10
  7051  0693  00F0               	movwf	___llmod@divisor
  7052  0694  082F               	movf	(sprintf@tmpval+3)^(0+128),w
  7053  0695  00F7               	movwf	___llmod@dividend+3
  7054  0696  082E               	movf	(sprintf@tmpval+2)^(0+128),w
  7055  0697  00F6               	movwf	___llmod@dividend+2
  7056  0698  082D               	movf	(sprintf@tmpval+1)^(0+128),w
  7057  0699  00F5               	movwf	___llmod@dividend+1
  7058  069A  082C               	movf	sprintf@tmpval^(0+128),w
  7059  069B  00F4               	movwf	___llmod@dividend
  7060  069C  3192  22BA  3181   	fcall	___llmod
  7061  069F  0873               	movf	?___llmod+3,w
  7062  06A0  0021               	movlb	1	; select bank1
  7063  06A1  00AF               	movwf	(sprintf@tmpval+3)^(0+128)
  7064  06A2  0872               	movf	?___llmod+2,w
  7065  06A3  00AE               	movwf	(sprintf@tmpval+2)^(0+128)
  7066  06A4  0871               	movf	?___llmod+1,w
  7067  06A5  00AD               	movwf	(sprintf@tmpval+1)^(0+128)
  7068  06A6  0870               	movf	?___llmod,w
  7069  06A7  00AC               	movwf	sprintf@tmpval^(0+128)
  7070                           
  7071                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  7072  06A8  082C               	movf	sprintf@tmpval^(0+128),w
  7073  06A9  3E30               	addlw	48
  7074  06AA  0020               	movlb	0	; select bank0
  7075  06AB  00DE               	movwf	??_sprintf
  7076  06AC  0021               	movlb	1	; select bank1
  7077  06AD  0835               	movf	sprintf@sp^(0+128),w
  7078  06AE  0086               	movwf	6
  7079  06AF  0187               	clrf	7
  7080  06B0  0020               	movlb	0	; select bank0
  7081  06B1  085E               	movf	??_sprintf,w
  7082  06B2  0081               	movwf	1
  7083  06B3  3001               	movlw	1
  7084  06B4  00DE               	movwf	??_sprintf
  7085  06B5  085E               	movf	??_sprintf,w
  7086  06B6  0021               	movlb	1	; select bank1
  7087  06B7  07B5               	addwf	sprintf@sp^(0+128),f
  7088                           
  7089                           ;doprnt.c: 1232: val %= dpowers[c];
  7090  06B8  0838               	movf	sprintf@c^(0+128),w
  7091  06B9  0020               	movlb	0	; select bank0
  7092  06BA  00DE               	movwf	??_sprintf
  7093  06BB  01DF               	clrf	??_sprintf+1
  7094  06BC  35DE               	lslf	??_sprintf,f
  7095  06BD  0DDF               	rlf	??_sprintf+1,f
  7096  06BE  35DE               	lslf	??_sprintf,f
  7097  06BF  0DDF               	rlf	??_sprintf+1,f
  7098  06C0  3000               	movlw	low (_dpowers| (0+32768))
  7099  06C1  075E               	addwf	??_sprintf,w
  7100  06C2  0084               	movwf	4
  7101  06C3  3098               	movlw	high (_dpowers| (0+32768))
  7102  06C4  3D5F               	addwfc	??_sprintf+1,w
  7103  06C5  0085               	movwf	5
  7104  06C6  3F00               	moviw [0]fsr0
  7105  06C7  00F0               	movwf	___llmod@divisor
  7106  06C8  3F01               	moviw [1]fsr0
  7107  06C9  00F1               	movwf	___llmod@divisor+1
  7108  06CA  3F02               	moviw [2]fsr0
  7109  06CB  00F2               	movwf	___llmod@divisor+2
  7110  06CC  3F03               	moviw [3]fsr0
  7111  06CD  00F3               	movwf	___llmod@divisor+3
  7112  06CE  0021               	movlb	1	; select bank1
  7113  06CF  0827               	movf	(sprintf@val+3)^(0+128),w
  7114  06D0  00F7               	movwf	___llmod@dividend+3
  7115  06D1  0826               	movf	(sprintf@val+2)^(0+128),w
  7116  06D2  00F6               	movwf	___llmod@dividend+2
  7117  06D3  0825               	movf	(sprintf@val+1)^(0+128),w
  7118  06D4  00F5               	movwf	___llmod@dividend+1
  7119  06D5  0824               	movf	sprintf@val^(0+128),w
  7120  06D6  00F4               	movwf	___llmod@dividend
  7121  06D7  3192  22BA  3181   	fcall	___llmod
  7122  06DA  0873               	movf	?___llmod+3,w
  7123  06DB  0021               	movlb	1	; select bank1
  7124  06DC  00A7               	movwf	(sprintf@val+3)^(0+128)
  7125  06DD  0872               	movf	?___llmod+2,w
  7126  06DE  00A6               	movwf	(sprintf@val+2)^(0+128)
  7127  06DF  0871               	movf	?___llmod+1,w
  7128  06E0  00A5               	movwf	(sprintf@val+1)^(0+128)
  7129  06E1  0870               	movf	?___llmod,w
  7130  06E2  2E57               	goto	L5
  7131  06E3                     l3358:	
  7132                           ;doprnt.c: 1233: }
  7133                           ;doprnt.c: 1235: while(prec) {
  7134                           
  7135                           
  7136                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  7137  06E3  3030               	movlw	48
  7138  06E4  0020               	movlb	0	; select bank0
  7139  06E5  00DE               	movwf	??_sprintf
  7140  06E6  0021               	movlb	1	; select bank1
  7141  06E7  0835               	movf	sprintf@sp^(0+128),w
  7142  06E8  0086               	movwf	6
  7143  06E9  0187               	clrf	7
  7144  06EA  0020               	movlb	0	; select bank0
  7145  06EB  085E               	movf	??_sprintf,w
  7146  06EC  0081               	movwf	1
  7147  06ED  3001               	movlw	1
  7148  06EE  00DE               	movwf	??_sprintf
  7149  06EF  085E               	movf	??_sprintf,w
  7150  06F0  0021               	movlb	1	; select bank1
  7151  06F1  07B5               	addwf	sprintf@sp^(0+128),f
  7152                           
  7153                           ;doprnt.c: 1237: prec--;
  7154  06F2  30FF               	movlw	255
  7155  06F3  07B6               	addwf	sprintf@prec^(0+128),f
  7156  06F4  30FF               	movlw	255
  7157  06F5  3DB7               	addwfc	(sprintf@prec+1)^(0+128),f
  7158  06F6                     l3364:	
  7159  06F6  0836               	movf	sprintf@prec^(0+128),w
  7160  06F7  0437               	iorwf	(sprintf@prec+1)^(0+128),w
  7161  06F8  1903               	btfsc	3,2
  7162  06F9  29DD               	goto	l3410
  7163  06FA  2EE3               	goto	l3358
  7164  06FB                     l3366:	
  7165                           ;doprnt.c: 1238: }
  7166                           ;doprnt.c: 1245: continue;
  7167                           
  7168                           
  7169                           ;doprnt.c: 1246: }
  7170                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  7171  06FB  0021               	movlb	1	; select bank1
  7172  06FC  0836               	movf	sprintf@prec^(0+128),w
  7173  06FD  0437               	iorwf	(sprintf@prec+1)^(0+128),w
  7174  06FE  1D03               	btfss	3,2
  7175  06FF  2F0A               	goto	l374
  7176  0700  0827               	movf	(sprintf@val+3)^(0+128),w
  7177  0701  0426               	iorwf	(sprintf@val+2)^(0+128),w
  7178  0702  0425               	iorwf	(sprintf@val+1)^(0+128),w
  7179  0703  0424               	iorwf	sprintf@val^(0+128),w
  7180  0704  1D03               	skipz
  7181  0705  2F0A               	goto	l374
  7182                           
  7183                           ;doprnt.c: 1291: prec++;
  7184  0706  3001               	movlw	1
  7185  0707  07B6               	addwf	sprintf@prec^(0+128),f
  7186  0708  3000               	movlw	0
  7187  0709  3DB7               	addwfc	(sprintf@prec+1)^(0+128),f
  7188  070A                     l374:	
  7189                           
  7190                           ;doprnt.c: 1339: if(c < prec)
  7191  070A  0838               	movf	sprintf@c^(0+128),w
  7192  070B  0020               	movlb	0	; select bank0
  7193  070C  00DE               	movwf	??_sprintf
  7194  070D  01DF               	clrf	??_sprintf+1
  7195  070E  1BDE               	btfsc	??_sprintf,7
  7196  070F  03DF               	decf	??_sprintf+1,f
  7197  0710  085F               	movf	??_sprintf+1,w
  7198  0711  3A80               	xorlw	128
  7199  0712  00E0               	movwf	??_sprintf+2
  7200  0713  0021               	movlb	1	; select bank1
  7201  0714  0837               	movf	(sprintf@prec+1)^(0+128),w
  7202  0715  3A80               	xorlw	128
  7203  0716  0020               	movlb	0	; select bank0
  7204  0717  0260               	subwf	??_sprintf+2,w
  7205  0718  1D03               	skipz
  7206  0719  2F1E               	goto	u4325
  7207  071A  0021               	movlb	1	; select bank1
  7208  071B  0836               	movf	sprintf@prec^(0+128),w
  7209  071C  0020               	movlb	0	; select bank0
  7210  071D  025E               	subwf	??_sprintf,w
  7211  071E                     u4325:	
  7212  071E  1803               	skipnc
  7213  071F  2F28               	goto	l3374
  7214                           
  7215                           ;doprnt.c: 1340: c = prec;
  7216  0720  0021               	movlb	1	; select bank1
  7217  0721  0836               	movf	sprintf@prec^(0+128),w
  7218  0722  0020               	movlb	0	; select bank0
  7219  0723  00DE               	movwf	??_sprintf
  7220  0724  085E               	movf	??_sprintf,w
  7221  0725  0021               	movlb	1	; select bank1
  7222  0726  00B8               	movwf	sprintf@c^(0+128)
  7223  0727  2F44               	goto	l376
  7224  0728                     l3374:	
  7225                           
  7226                           ;doprnt.c: 1341: else if(prec < c)
  7227  0728  0021               	movlb	1	; select bank1
  7228  0729  0838               	movf	sprintf@c^(0+128),w
  7229  072A  0020               	movlb	0	; select bank0
  7230  072B  00DE               	movwf	??_sprintf
  7231  072C  01DF               	clrf	??_sprintf+1
  7232  072D  1BDE               	btfsc	??_sprintf,7
  7233  072E  03DF               	decf	??_sprintf+1,f
  7234  072F  0021               	movlb	1	; select bank1
  7235  0730  0837               	movf	(sprintf@prec+1)^(0+128),w
  7236  0731  3A80               	xorlw	128
  7237  0732  0020               	movlb	0	; select bank0
  7238  0733  00E0               	movwf	??_sprintf+2
  7239  0734  085F               	movf	??_sprintf+1,w
  7240  0735  3A80               	xorlw	128
  7241  0736  0260               	subwf	??_sprintf+2,w
  7242  0737  1D03               	skipz
  7243  0738  2F3C               	goto	u4335
  7244  0739  085E               	movf	??_sprintf,w
  7245  073A  0021               	movlb	1	; select bank1
  7246  073B  0236               	subwf	sprintf@prec^(0+128),w
  7247  073C                     u4335:	
  7248  073C  1803               	skipnc
  7249  073D  2F44               	goto	l376
  7250                           
  7251                           ;doprnt.c: 1342: prec = c;
  7252  073E  0021               	movlb	1	; select bank1
  7253  073F  0838               	movf	sprintf@c^(0+128),w
  7254  0740  00B6               	movwf	sprintf@prec^(0+128)
  7255  0741  01B7               	clrf	(sprintf@prec+1)^(0+128)
  7256  0742  1BB6               	btfsc	sprintf@prec^(0+128),7
  7257  0743  03B7               	decf	(sprintf@prec+1)^(0+128),f
  7258  0744                     l376:	
  7259                           
  7260                           ;doprnt.c: 1345: if(width && flag & 0x03)
  7261  0744  0021               	movlb	1	; select bank1
  7262  0745  082A               	movf	sprintf@width^(0+128),w
  7263  0746  042B               	iorwf	(sprintf@width+1)^(0+128),w
  7264  0747  1903               	btfsc	3,2
  7265  0748  2F5B               	goto	l3382
  7266  0749  3003               	movlw	3
  7267  074A  0528               	andwf	sprintf@flag^(0+128),w
  7268  074B  0020               	movlb	0	; select bank0
  7269  074C  00DE               	movwf	??_sprintf
  7270  074D  3000               	movlw	0
  7271  074E  0021               	movlb	1	; select bank1
  7272  074F  0529               	andwf	(sprintf@flag+1)^(0+128),w
  7273  0750  0020               	movlb	0	; select bank0
  7274  0751  00DF               	movwf	??_sprintf+1
  7275  0752  085E               	movf	??_sprintf,w
  7276  0753  045F               	iorwf	??_sprintf+1,w
  7277  0754  1903               	btfsc	3,2
  7278  0755  2F5B               	goto	l3382
  7279                           
  7280                           ;doprnt.c: 1346: width--;
  7281  0756  30FF               	movlw	255
  7282  0757  0021               	movlb	1	; select bank1
  7283  0758  07AA               	addwf	sprintf@width^(0+128),f
  7284  0759  30FF               	movlw	255
  7285  075A  3DAB               	addwfc	(sprintf@width+1)^(0+128),f
  7286  075B                     l3382:	
  7287                           
  7288                           ;doprnt.c: 1348: if(flag & 0x4000) {
  7289  075B  0021               	movlb	1	; select bank1
  7290  075C  1F29               	btfss	(sprintf@flag+1)^(0+128),6
  7291  075D  2F77               	goto	l3390
  7292                           
  7293                           ;doprnt.c: 1349: if(width > prec)
  7294  075E  0837               	movf	(sprintf@prec+1)^(0+128),w
  7295  075F  3A80               	xorlw	128
  7296  0760  0020               	movlb	0	; select bank0
  7297  0761  00DE               	movwf	??_sprintf
  7298  0762  0021               	movlb	1	; select bank1
  7299  0763  082B               	movf	(sprintf@width+1)^(0+128),w
  7300  0764  3A80               	xorlw	128
  7301  0765  0020               	movlb	0	; select bank0
  7302  0766  025E               	subwf	??_sprintf,w
  7303  0767  1D03               	skipz
  7304  0768  2F6C               	goto	u4375
  7305  0769  0021               	movlb	1	; select bank1
  7306  076A  082A               	movf	sprintf@width^(0+128),w
  7307  076B  0236               	subwf	sprintf@prec^(0+128),w
  7308  076C                     u4375:	
  7309  076C  1803               	skipnc
  7310  076D  2F74               	goto	l3388
  7311                           
  7312                           ;doprnt.c: 1350: width -= prec;
  7313  076E  0021               	movlb	1	; select bank1
  7314  076F  0836               	movf	sprintf@prec^(0+128),w
  7315  0770  02AA               	subwf	sprintf@width^(0+128),f
  7316  0771  0837               	movf	(sprintf@prec+1)^(0+128),w
  7317  0772  3BAB               	subwfb	(sprintf@width+1)^(0+128),f
  7318  0773  2F77               	goto	l3390
  7319  0774                     l3388:	
  7320                           
  7321                           ;doprnt.c: 1351: else
  7322                           ;doprnt.c: 1352: width = 0;
  7323  0774  0021               	movlb	1	; select bank1
  7324  0775  01AA               	clrf	sprintf@width^(0+128)
  7325  0776  01AB               	clrf	(sprintf@width+1)^(0+128)
  7326  0777                     l3390:	
  7327                           
  7328                           ;doprnt.c: 1353: }
  7329                           ;doprnt.c: 1381: if(width > c)
  7330  0777  0838               	movf	sprintf@c^(0+128),w
  7331  0778  0020               	movlb	0	; select bank0
  7332  0779  00DE               	movwf	??_sprintf
  7333  077A  01DF               	clrf	??_sprintf+1
  7334  077B  1BDE               	btfsc	??_sprintf,7
  7335  077C  03DF               	decf	??_sprintf+1,f
  7336  077D  085F               	movf	??_sprintf+1,w
  7337  077E  3A80               	xorlw	128
  7338  077F  00E0               	movwf	??_sprintf+2
  7339  0780  0021               	movlb	1	; select bank1
  7340  0781  082B               	movf	(sprintf@width+1)^(0+128),w
  7341  0782  3A80               	xorlw	128
  7342  0783  0020               	movlb	0	; select bank0
  7343  0784  0260               	subwf	??_sprintf+2,w
  7344  0785  1D03               	skipz
  7345  0786  2F8B               	goto	u4385
  7346  0787  0021               	movlb	1	; select bank1
  7347  0788  082A               	movf	sprintf@width^(0+128),w
  7348  0789  0020               	movlb	0	; select bank0
  7349  078A  025E               	subwf	??_sprintf,w
  7350  078B                     u4385:	
  7351  078B  1803               	skipnc
  7352  078C  2F9C               	goto	l3394
  7353                           
  7354                           ;doprnt.c: 1382: width -= c;
  7355  078D  0021               	movlb	1	; select bank1
  7356  078E  0838               	movf	sprintf@c^(0+128),w
  7357  078F  0020               	movlb	0	; select bank0
  7358  0790  00DE               	movwf	??_sprintf
  7359  0791  01DF               	clrf	??_sprintf+1
  7360  0792  1BDE               	btfsc	??_sprintf,7
  7361  0793  03DF               	decf	??_sprintf+1,f
  7362  0794  085E               	movf	??_sprintf,w
  7363  0795  0021               	movlb	1	; select bank1
  7364  0796  02AA               	subwf	sprintf@width^(0+128),f
  7365  0797  0020               	movlb	0	; select bank0
  7366  0798  085F               	movf	??_sprintf+1,w
  7367  0799  0021               	movlb	1	; select bank1
  7368  079A  3BAB               	subwfb	(sprintf@width+1)^(0+128),f
  7369  079B  2F9F               	goto	l3396
  7370  079C                     l3394:	
  7371                           
  7372                           ;doprnt.c: 1383: else
  7373                           ;doprnt.c: 1384: width = 0;
  7374  079C  0021               	movlb	1	; select bank1
  7375  079D  01AA               	clrf	sprintf@width^(0+128)
  7376  079E  01AB               	clrf	(sprintf@width+1)^(0+128)
  7377  079F                     l3396:	
  7378                           
  7379                           ;doprnt.c: 1422: {
  7380                           ;doprnt.c: 1424: if(width
  7381                           ;doprnt.c: 1428: )
  7382  079F  082A               	movf	sprintf@width^(0+128),w
  7383  07A0  042B               	iorwf	(sprintf@width+1)^(0+128),w
  7384  07A1  1903               	btfsc	3,2
  7385  07A2  2FBA               	goto	l3404
  7386  07A3                     l3398:	
  7387                           ;doprnt.c: 1429: do
  7388                           
  7389                           
  7390                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  7391  07A3  3020               	movlw	32
  7392  07A4  0020               	movlb	0	; select bank0
  7393  07A5  00DE               	movwf	??_sprintf
  7394  07A6  0021               	movlb	1	; select bank1
  7395  07A7  0835               	movf	sprintf@sp^(0+128),w
  7396  07A8  0086               	movwf	6
  7397  07A9  0187               	clrf	7
  7398  07AA  0020               	movlb	0	; select bank0
  7399  07AB  085E               	movf	??_sprintf,w
  7400  07AC  0081               	movwf	1
  7401  07AD  3001               	movlw	1
  7402  07AE  00DE               	movwf	??_sprintf
  7403  07AF  085E               	movf	??_sprintf,w
  7404  07B0  0021               	movlb	1	; select bank1
  7405  07B1  07B5               	addwf	sprintf@sp^(0+128),f
  7406                           
  7407                           ;doprnt.c: 1431: while(--width);
  7408  07B2  30FF               	movlw	255
  7409  07B3  07AA               	addwf	sprintf@width^(0+128),f
  7410  07B4  30FF               	movlw	255
  7411  07B5  3DAB               	addwfc	(sprintf@width+1)^(0+128),f
  7412  07B6  082A               	movf	sprintf@width^(0+128),w
  7413  07B7  042B               	iorwf	(sprintf@width+1)^(0+128),w
  7414  07B8  1D03               	btfss	3,2
  7415  07B9  2FA3               	goto	l3398
  7416  07BA                     l3404:	
  7417                           
  7418                           ;doprnt.c: 1438: if(flag & 0x03)
  7419  07BA  3003               	movlw	3
  7420  07BB  0528               	andwf	sprintf@flag^(0+128),w
  7421  07BC  0020               	movlb	0	; select bank0
  7422  07BD  00DE               	movwf	??_sprintf
  7423  07BE  3000               	movlw	0
  7424  07BF  0021               	movlb	1	; select bank1
  7425  07C0  0529               	andwf	(sprintf@flag+1)^(0+128),w
  7426  07C1  0020               	movlb	0	; select bank0
  7427  07C2  00DF               	movwf	??_sprintf+1
  7428  07C3  085E               	movf	??_sprintf,w
  7429  07C4  045F               	iorwf	??_sprintf+1,w
  7430  07C5  1903               	btfsc	3,2
  7431  07C6  29DD               	goto	l3410
  7432                           
  7433                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  7434  07C7  302D               	movlw	45
  7435  07C8                     L6:	
  7436  07C8  00DE               	movwf	??_sprintf
  7437  07C9  0021               	movlb	1	; select bank1
  7438  07CA  0835               	movf	sprintf@sp^(0+128),w
  7439  07CB  0086               	movwf	6
  7440  07CC  0187               	clrf	7
  7441  07CD  0020               	movlb	0	; select bank0
  7442  07CE  085E               	movf	??_sprintf,w
  7443  07CF  0081               	movwf	1
  7444  07D0  3001               	movlw	1
  7445  07D1  00DE               	movwf	??_sprintf
  7446  07D2  085E               	movf	??_sprintf,w
  7447  07D3  0021               	movlb	1	; select bank1
  7448  07D4  07B5               	addwf	sprintf@sp^(0+128),f
  7449  07D5  29DD               	goto	l3410
  7450  07D6                     l3412:	
  7451                           ;doprnt.c: 1469: }
  7452                           ;doprnt.c: 1533: }
  7453                           ;doprnt.c: 1535: alldone:
  7454                           
  7455                           
  7456                           ;doprnt.c: 1538: *sp = 0;
  7457  07D6  0835               	movf	sprintf@sp^(0+128),w
  7458  07D7  0086               	movwf	6
  7459  07D8  0187               	clrf	7
  7460  07D9  0181               	clrf	1
  7461  07DA  0008               	return
  7462  07DB                     __end_of_sprintf:	
  7463                           ;doprnt.c: 1540: return 0;
  7464                           ;	Return value of _sprintf is never used
  7465                           
  7466                           
  7467                           	psect	text2
  7468  0B21                     __ptext2:	
  7469 ;; *************** function _scale *****************
  7470 ;; Defined at:
  7471 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\doprnt.c"
  7472 ;; Parameters:    Size  Location     Type
  7473 ;;  scl             1    wreg     char 
  7474 ;; Auto vars:     Size  Location     Type
  7475 ;;  scl             1   32[BANK0 ] char 
  7476 ;; Return value:  Size  Location     Type
  7477 ;;                  3   24[BANK0 ] char 
  7478 ;; Registers used:
  7479 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7480 ;; Tracked objects:
  7481 ;;		On entry : 0/0
  7482 ;;		On exit  : 0/0
  7483 ;;		Unchanged: 0/0
  7484 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7485 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7486 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7487 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7488 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7489 ;;Total ram usage:        9 bytes
  7490 ;; Hardware stack levels used:    1
  7491 ;; Hardware stack levels required when called:    2
  7492 ;; This function calls:
  7493 ;;		___awdiv
  7494 ;;		___awmod
  7495 ;;		___ftmul
  7496 ;;		___wmul
  7497 ;; This function is called by:
  7498 ;;		_sprintf
  7499 ;; This function uses a non-reentrant model
  7500 ;;
  7501                           
  7502                           
  7503                           ;psect for function _scale
  7504  0B21                     _scale:	
  7505                           
  7506                           ;incstack = 0
  7507                           ; Regs used in _scale: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7508                           ;scale@scl stored from wreg
  7509  0B21  0020               	movlb	0	; select bank0
  7510  0B22  00C0               	movwf	scale@scl
  7511                           
  7512                           ;doprnt.c: 428: if(scl < 0) {
  7513  0B23  1FC0               	btfss	scale@scl,7
  7514  0B24  2C46               	goto	l2706
  7515                           
  7516                           ;doprnt.c: 429: scl = -scl;
  7517  0B25  09C0               	comf	scale@scl,f
  7518  0B26  0AC0               	incf	scale@scl,f
  7519                           
  7520                           ;doprnt.c: 430: if(scl>=110)
  7521  0B27  0840               	movf	scale@scl,w
  7522  0B28  3A80               	xorlw	128
  7523  0B29  3E12               	addlw	-238
  7524  0B2A  1C03               	skipc
  7525  0B2B  2BCA               	goto	l2696
  7526                           
  7527                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  7528  0B2C  300A               	movlw	10
  7529  0B2D  00F7               	movwf	___awdiv@divisor
  7530  0B2E  3000               	movlw	0
  7531  0B2F  00F8               	movwf	___awdiv@divisor+1
  7532  0B30  0840               	movf	scale@scl,w
  7533  0B31  00F2               	movwf	___awmod@dividend
  7534  0B32  01F3               	clrf	___awmod@dividend+1
  7535  0B33  1BF2               	btfsc	___awmod@dividend,7
  7536  0B34  03F3               	decf	___awmod@dividend+1,f
  7537  0B35  3064               	movlw	100
  7538  0B36  00F0               	movwf	___awmod@divisor
  7539  0B37  3000               	movlw	0
  7540  0B38  00F1               	movwf	___awmod@divisor+1
  7541  0B39  3192  22FC  318B   	fcall	___awmod
  7542  0B3C  0871               	movf	?___awmod+1,w
  7543  0B3D  00FA               	movwf	___awdiv@dividend+1
  7544  0B3E  0870               	movf	?___awmod,w
  7545  0B3F  00F9               	movwf	___awdiv@dividend
  7546  0B40  3188  2006  318B   	fcall	___awdiv
  7547  0B43  0877               	movf	?___awdiv,w
  7548  0B44  3E09               	addlw	9
  7549  0B45  0020               	movlb	0	; select bank0
  7550  0B46  00A4               	movwf	___wmul@multiplier
  7551  0B47  3000               	movlw	0
  7552  0B48  3D78               	addwfc	?___awdiv+1,w
  7553  0B49  00A5               	movwf	___wmul@multiplier+1
  7554  0B4A  3003               	movlw	3
  7555  0B4B  00A6               	movwf	___wmul@multiplicand
  7556  0B4C  3000               	movlw	0
  7557  0B4D  00A7               	movwf	___wmul@multiplicand+1
  7558  0B4E  3191  2141  318B   	fcall	___wmul
  7559  0B51  0020               	movlb	0	; select bank0
  7560  0B52  0825               	movf	?___wmul+1,w
  7561  0B53  0085               	movwf	5
  7562  0B54  0824               	movf	?___wmul,w
  7563  0B55  0084               	movwf	4
  7564  0B56  3028               	movlw	low (__npowers_| (0+32768))
  7565  0B57  0784               	addwf	4,f
  7566  0B58  3098               	movlw	high (__npowers_| (0+32768))
  7567  0B59  3D85               	addwfc	5,f
  7568  0B5A  3F00               	moviw [0]fsr0
  7569  0B5B  00A8               	movwf	___ftmul@f1
  7570  0B5C  3F01               	moviw [1]fsr0
  7571  0B5D  00A9               	movwf	___ftmul@f1+1
  7572  0B5E  3F02               	moviw [2]fsr0
  7573  0B5F  00AA               	movwf	___ftmul@f1+2
  7574  0B60  3064               	movlw	100
  7575  0B61  00F7               	movwf	___awdiv@divisor
  7576  0B62  3000               	movlw	0
  7577  0B63  00F8               	movwf	___awdiv@divisor+1
  7578  0B64  0840               	movf	scale@scl,w
  7579  0B65  00F9               	movwf	___awdiv@dividend
  7580  0B66  01FA               	clrf	___awdiv@dividend+1
  7581  0B67  1BF9               	btfsc	___awdiv@dividend,7
  7582  0B68  03FA               	decf	___awdiv@dividend+1,f
  7583  0B69  3188  2006  318B   	fcall	___awdiv
  7584  0B6C  0877               	movf	?___awdiv,w
  7585  0B6D  3E12               	addlw	18
  7586  0B6E  0020               	movlb	0	; select bank0
  7587  0B6F  00A4               	movwf	___wmul@multiplier
  7588  0B70  3000               	movlw	0
  7589  0B71  3D78               	addwfc	?___awdiv+1,w
  7590  0B72  00A5               	movwf	___wmul@multiplier+1
  7591  0B73  3003               	movlw	3
  7592  0B74  00A6               	movwf	___wmul@multiplicand
  7593  0B75  3000               	movlw	0
  7594  0B76  00A7               	movwf	___wmul@multiplicand+1
  7595  0B77  3191  2141  318B   	fcall	___wmul
  7596  0B7A  0020               	movlb	0	; select bank0
  7597  0B7B  0825               	movf	?___wmul+1,w
  7598  0B7C  0085               	movwf	5
  7599  0B7D  0824               	movf	?___wmul,w
  7600  0B7E  0084               	movwf	4
  7601  0B7F  3028               	movlw	low (__npowers_| (0+32768))
  7602  0B80  0784               	addwf	4,f
  7603  0B81  3098               	movlw	high (__npowers_| (0+32768))
  7604  0B82  3D85               	addwfc	5,f
  7605  0B83  3F00               	moviw [0]fsr0
  7606  0B84  00AB               	movwf	___ftmul@f2
  7607  0B85  3F01               	moviw [1]fsr0
  7608  0B86  00AC               	movwf	___ftmul@f2+1
  7609  0B87  3F02               	moviw [2]fsr0
  7610  0B88  00AD               	movwf	___ftmul@f2+2
  7611  0B89  3197  274C  318B   	fcall	___ftmul
  7612  0B8C  0020               	movlb	0	; select bank0
  7613  0B8D  0828               	movf	?___ftmul,w
  7614  0B8E  00BD               	movwf	_scale$1010
  7615  0B8F  0829               	movf	?___ftmul+1,w
  7616  0B90  00BE               	movwf	_scale$1010+1
  7617  0B91  082A               	movf	?___ftmul+2,w
  7618  0B92  00BF               	movwf	_scale$1010+2
  7619                           
  7620                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  7621  0B93  0840               	movf	scale@scl,w
  7622  0B94  00F2               	movwf	___awmod@dividend
  7623  0B95  01F3               	clrf	___awmod@dividend+1
  7624  0B96  1BF2               	btfsc	___awmod@dividend,7
  7625  0B97  03F3               	decf	___awmod@dividend+1,f
  7626  0B98  300A               	movlw	10
  7627  0B99  00F0               	movwf	___awmod@divisor
  7628  0B9A  3000               	movlw	0
  7629  0B9B  00F1               	movwf	___awmod@divisor+1
  7630  0B9C  3192  22FC  318B   	fcall	___awmod
  7631  0B9F  0871               	movf	?___awmod+1,w
  7632  0BA0  0020               	movlb	0	; select bank0
  7633  0BA1  00A5               	movwf	___wmul@multiplier+1
  7634  0BA2  0870               	movf	?___awmod,w
  7635  0BA3  00A4               	movwf	___wmul@multiplier
  7636  0BA4  3003               	movlw	3
  7637  0BA5  00A6               	movwf	___wmul@multiplicand
  7638  0BA6  3000               	movlw	0
  7639  0BA7  00A7               	movwf	___wmul@multiplicand+1
  7640  0BA8  3191  2141  318B   	fcall	___wmul
  7641  0BAB  0020               	movlb	0	; select bank0
  7642  0BAC  0825               	movf	?___wmul+1,w
  7643  0BAD  0085               	movwf	5
  7644  0BAE  0824               	movf	?___wmul,w
  7645  0BAF  0084               	movwf	4
  7646  0BB0  3028               	movlw	low (__npowers_| (0+32768))
  7647  0BB1  0784               	addwf	4,f
  7648  0BB2  3098               	movlw	high (__npowers_| (0+32768))
  7649  0BB3  3D85               	addwfc	5,f
  7650  0BB4  3F00               	moviw [0]fsr0
  7651  0BB5  00A8               	movwf	___ftmul@f1
  7652  0BB6  3F01               	moviw [1]fsr0
  7653  0BB7  00A9               	movwf	___ftmul@f1+1
  7654  0BB8  3F02               	moviw [2]fsr0
  7655  0BB9  00AA               	movwf	___ftmul@f1+2
  7656  0BBA  083D               	movf	_scale$1010,w
  7657  0BBB  00AB               	movwf	___ftmul@f2
  7658  0BBC  083E               	movf	_scale$1010+1,w
  7659  0BBD  00AC               	movwf	___ftmul@f2+1
  7660  0BBE  083F               	movf	_scale$1010+2,w
  7661  0BBF  00AD               	movwf	___ftmul@f2+2
  7662  0BC0  3197  274C         	fcall	___ftmul
  7663  0BC2  0020               	movlb	0	; select bank0
  7664  0BC3  0828               	movf	?___ftmul,w
  7665  0BC4  00B8               	movwf	?_scale
  7666  0BC5  0829               	movf	?___ftmul+1,w
  7667  0BC6  00B9               	movwf	?_scale+1
  7668  0BC7  082A               	movf	?___ftmul+2,w
  7669  0BC8  00BA               	movwf	?_scale+2
  7670  0BC9  0008               	return
  7671  0BCA                     l2696:	
  7672                           
  7673                           ;doprnt.c: 432: else if(scl > 10)
  7674  0BCA  0840               	movf	scale@scl,w
  7675  0BCB  3A80               	xorlw	128
  7676  0BCC  3E75               	addlw	-139
  7677  0BCD  1C03               	skipc
  7678  0BCE  2C29               	goto	l2702
  7679                           
  7680                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  7681  0BCF  0840               	movf	scale@scl,w
  7682  0BD0  00F2               	movwf	___awmod@dividend
  7683  0BD1  01F3               	clrf	___awmod@dividend+1
  7684  0BD2  1BF2               	btfsc	___awmod@dividend,7
  7685  0BD3  03F3               	decf	___awmod@dividend+1,f
  7686  0BD4  300A               	movlw	10
  7687  0BD5  00F0               	movwf	___awmod@divisor
  7688  0BD6  3000               	movlw	0
  7689  0BD7  00F1               	movwf	___awmod@divisor+1
  7690  0BD8  3192  22FC  318B   	fcall	___awmod
  7691  0BDB  0871               	movf	?___awmod+1,w
  7692  0BDC  0020               	movlb	0	; select bank0
  7693  0BDD  00A5               	movwf	___wmul@multiplier+1
  7694  0BDE  0870               	movf	?___awmod,w
  7695  0BDF  00A4               	movwf	___wmul@multiplier
  7696  0BE0  3003               	movlw	3
  7697  0BE1  00A6               	movwf	___wmul@multiplicand
  7698  0BE2  3000               	movlw	0
  7699  0BE3  00A7               	movwf	___wmul@multiplicand+1
  7700  0BE4  3191  2141  318B   	fcall	___wmul
  7701  0BE7  0020               	movlb	0	; select bank0
  7702  0BE8  0825               	movf	?___wmul+1,w
  7703  0BE9  0085               	movwf	5
  7704  0BEA  0824               	movf	?___wmul,w
  7705  0BEB  0084               	movwf	4
  7706  0BEC  3028               	movlw	low (__npowers_| (0+32768))
  7707  0BED  0784               	addwf	4,f
  7708  0BEE  3098               	movlw	high (__npowers_| (0+32768))
  7709  0BEF  3D85               	addwfc	5,f
  7710  0BF0  3F00               	moviw [0]fsr0
  7711  0BF1  00A8               	movwf	___ftmul@f1
  7712  0BF2  3F01               	moviw [1]fsr0
  7713  0BF3  00A9               	movwf	___ftmul@f1+1
  7714  0BF4  3F02               	moviw [2]fsr0
  7715  0BF5  00AA               	movwf	___ftmul@f1+2
  7716  0BF6  300A               	movlw	10
  7717  0BF7  00F7               	movwf	___awdiv@divisor
  7718  0BF8  3000               	movlw	0
  7719  0BF9  00F8               	movwf	___awdiv@divisor+1
  7720  0BFA  0840               	movf	scale@scl,w
  7721  0BFB  00F9               	movwf	___awdiv@dividend
  7722  0BFC  01FA               	clrf	___awdiv@dividend+1
  7723  0BFD  1BF9               	btfsc	___awdiv@dividend,7
  7724  0BFE  03FA               	decf	___awdiv@dividend+1,f
  7725  0BFF  3188  2006  318B   	fcall	___awdiv
  7726  0C02  0877               	movf	?___awdiv,w
  7727  0C03  3E09               	addlw	9
  7728  0C04  0020               	movlb	0	; select bank0
  7729  0C05  00A4               	movwf	___wmul@multiplier
  7730  0C06  3000               	movlw	0
  7731  0C07  3D78               	addwfc	?___awdiv+1,w
  7732  0C08  00A5               	movwf	___wmul@multiplier+1
  7733  0C09  3003               	movlw	3
  7734  0C0A  00A6               	movwf	___wmul@multiplicand
  7735  0C0B  3000               	movlw	0
  7736  0C0C  00A7               	movwf	___wmul@multiplicand+1
  7737  0C0D  3191  2141  318B   	fcall	___wmul
  7738  0C10  0020               	movlb	0	; select bank0
  7739  0C11  0825               	movf	?___wmul+1,w
  7740  0C12  0085               	movwf	5
  7741  0C13  0824               	movf	?___wmul,w
  7742  0C14  0084               	movwf	4
  7743  0C15  3028               	movlw	low (__npowers_| (0+32768))
  7744  0C16  0784               	addwf	4,f
  7745  0C17  3098               	movlw	high (__npowers_| (0+32768))
  7746  0C18  3D85               	addwfc	5,f
  7747  0C19  3F00               	moviw [0]fsr0
  7748  0C1A  00AB               	movwf	___ftmul@f2
  7749  0C1B  3F01               	moviw [1]fsr0
  7750  0C1C  00AC               	movwf	___ftmul@f2+1
  7751  0C1D  3F02               	moviw [2]fsr0
  7752  0C1E  00AD               	movwf	___ftmul@f2+2
  7753  0C1F  3197  274C         	fcall	___ftmul
  7754  0C21  0020               	movlb	0	; select bank0
  7755  0C22  0828               	movf	?___ftmul,w
  7756  0C23  00B8               	movwf	?_scale
  7757  0C24  0829               	movf	?___ftmul+1,w
  7758  0C25  00B9               	movwf	?_scale+1
  7759  0C26  082A               	movf	?___ftmul+2,w
  7760  0C27  00BA               	movwf	?_scale+2
  7761  0C28  0008               	return
  7762  0C29                     l2702:	
  7763                           
  7764                           ;doprnt.c: 434: return _npowers_[scl];
  7765  0C29  0840               	movf	scale@scl,w
  7766  0C2A  00BB               	movwf	??_scale
  7767  0C2B  01BC               	clrf	??_scale+1
  7768  0C2C  083B               	movf	??_scale,w
  7769  0C2D  00A4               	movwf	___wmul@multiplier
  7770  0C2E  083C               	movf	??_scale+1,w
  7771  0C2F  00A5               	movwf	___wmul@multiplier+1
  7772  0C30  3003               	movlw	3
  7773  0C31  00A6               	movwf	___wmul@multiplicand
  7774  0C32  3000               	movlw	0
  7775  0C33  00A7               	movwf	___wmul@multiplicand+1
  7776  0C34  3191  2141         	fcall	___wmul
  7777  0C36  0020               	movlb	0	; select bank0
  7778  0C37  0825               	movf	?___wmul+1,w
  7779  0C38  0085               	movwf	5
  7780  0C39  0824               	movf	?___wmul,w
  7781  0C3A  0084               	movwf	4
  7782  0C3B  3028               	movlw	low (__npowers_| (0+32768))
  7783  0C3C  0784               	addwf	4,f
  7784  0C3D  3098               	movlw	high (__npowers_| (0+32768))
  7785  0C3E  3D85               	addwfc	5,f
  7786  0C3F  3F00               	moviw [0]fsr0
  7787  0C40  00B8               	movwf	?_scale
  7788  0C41  3F01               	moviw [1]fsr0
  7789  0C42  00B9               	movwf	?_scale+1
  7790  0C43  3F02               	moviw [2]fsr0
  7791  0C44  00BA               	movwf	?_scale+2
  7792  0C45  0008               	return
  7793  0C46                     l2706:	
  7794                           
  7795                           ;doprnt.c: 435: }
  7796                           ;doprnt.c: 436: if(scl>=110)
  7797  0C46  0840               	movf	scale@scl,w
  7798  0C47  3A80               	xorlw	128
  7799  0C48  3E12               	addlw	-238
  7800  0C49  1C03               	skipc
  7801  0C4A  2CE9               	goto	l2714
  7802                           
  7803                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  7804  0C4B  300A               	movlw	10
  7805  0C4C  00F7               	movwf	___awdiv@divisor
  7806  0C4D  3000               	movlw	0
  7807  0C4E  00F8               	movwf	___awdiv@divisor+1
  7808  0C4F  0840               	movf	scale@scl,w
  7809  0C50  00F2               	movwf	___awmod@dividend
  7810  0C51  01F3               	clrf	___awmod@dividend+1
  7811  0C52  1BF2               	btfsc	___awmod@dividend,7
  7812  0C53  03F3               	decf	___awmod@dividend+1,f
  7813  0C54  3064               	movlw	100
  7814  0C55  00F0               	movwf	___awmod@divisor
  7815  0C56  3000               	movlw	0
  7816  0C57  00F1               	movwf	___awmod@divisor+1
  7817  0C58  3192  22FC  318B   	fcall	___awmod
  7818  0C5B  0871               	movf	?___awmod+1,w
  7819  0C5C  00FA               	movwf	___awdiv@dividend+1
  7820  0C5D  0870               	movf	?___awmod,w
  7821  0C5E  00F9               	movwf	___awdiv@dividend
  7822  0C5F  3188  2006  318B   	fcall	___awdiv
  7823  0C62  0877               	movf	?___awdiv,w
  7824  0C63  3E09               	addlw	9
  7825  0C64  0020               	movlb	0	; select bank0
  7826  0C65  00A4               	movwf	___wmul@multiplier
  7827  0C66  3000               	movlw	0
  7828  0C67  3D78               	addwfc	?___awdiv+1,w
  7829  0C68  00A5               	movwf	___wmul@multiplier+1
  7830  0C69  3003               	movlw	3
  7831  0C6A  00A6               	movwf	___wmul@multiplicand
  7832  0C6B  3000               	movlw	0
  7833  0C6C  00A7               	movwf	___wmul@multiplicand+1
  7834  0C6D  3191  2141  318B   	fcall	___wmul
  7835  0C70  0020               	movlb	0	; select bank0
  7836  0C71  0825               	movf	?___wmul+1,w
  7837  0C72  0085               	movwf	5
  7838  0C73  0824               	movf	?___wmul,w
  7839  0C74  0084               	movwf	4
  7840  0C75  304F               	movlw	low (__powers_| (0+32768))
  7841  0C76  0784               	addwf	4,f
  7842  0C77  3098               	movlw	high (__powers_| (0+32768))
  7843  0C78  3D85               	addwfc	5,f
  7844  0C79  3F00               	moviw [0]fsr0
  7845  0C7A  00A8               	movwf	___ftmul@f1
  7846  0C7B  3F01               	moviw [1]fsr0
  7847  0C7C  00A9               	movwf	___ftmul@f1+1
  7848  0C7D  3F02               	moviw [2]fsr0
  7849  0C7E  00AA               	movwf	___ftmul@f1+2
  7850  0C7F  3064               	movlw	100
  7851  0C80  00F7               	movwf	___awdiv@divisor
  7852  0C81  3000               	movlw	0
  7853  0C82  00F8               	movwf	___awdiv@divisor+1
  7854  0C83  0840               	movf	scale@scl,w
  7855  0C84  00F9               	movwf	___awdiv@dividend
  7856  0C85  01FA               	clrf	___awdiv@dividend+1
  7857  0C86  1BF9               	btfsc	___awdiv@dividend,7
  7858  0C87  03FA               	decf	___awdiv@dividend+1,f
  7859  0C88  3188  2006  318B   	fcall	___awdiv
  7860  0C8B  0877               	movf	?___awdiv,w
  7861  0C8C  3E12               	addlw	18
  7862  0C8D  0020               	movlb	0	; select bank0
  7863  0C8E  00A4               	movwf	___wmul@multiplier
  7864  0C8F  3000               	movlw	0
  7865  0C90  3D78               	addwfc	?___awdiv+1,w
  7866  0C91  00A5               	movwf	___wmul@multiplier+1
  7867  0C92  3003               	movlw	3
  7868  0C93  00A6               	movwf	___wmul@multiplicand
  7869  0C94  3000               	movlw	0
  7870  0C95  00A7               	movwf	___wmul@multiplicand+1
  7871  0C96  3191  2141  318B   	fcall	___wmul
  7872  0C99  0020               	movlb	0	; select bank0
  7873  0C9A  0825               	movf	?___wmul+1,w
  7874  0C9B  0085               	movwf	5
  7875  0C9C  0824               	movf	?___wmul,w
  7876  0C9D  0084               	movwf	4
  7877  0C9E  304F               	movlw	low (__powers_| (0+32768))
  7878  0C9F  0784               	addwf	4,f
  7879  0CA0  3098               	movlw	high (__powers_| (0+32768))
  7880  0CA1  3D85               	addwfc	5,f
  7881  0CA2  3F00               	moviw [0]fsr0
  7882  0CA3  00AB               	movwf	___ftmul@f2
  7883  0CA4  3F01               	moviw [1]fsr0
  7884  0CA5  00AC               	movwf	___ftmul@f2+1
  7885  0CA6  3F02               	moviw [2]fsr0
  7886  0CA7  00AD               	movwf	___ftmul@f2+2
  7887  0CA8  3197  274C  318B   	fcall	___ftmul
  7888  0CAB  0020               	movlb	0	; select bank0
  7889  0CAC  0828               	movf	?___ftmul,w
  7890  0CAD  00BD               	movwf	_scale$1010
  7891  0CAE  0829               	movf	?___ftmul+1,w
  7892  0CAF  00BE               	movwf	_scale$1010+1
  7893  0CB0  082A               	movf	?___ftmul+2,w
  7894  0CB1  00BF               	movwf	_scale$1010+2
  7895                           
  7896                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  7897  0CB2  0840               	movf	scale@scl,w
  7898  0CB3  00F2               	movwf	___awmod@dividend
  7899  0CB4  01F3               	clrf	___awmod@dividend+1
  7900  0CB5  1BF2               	btfsc	___awmod@dividend,7
  7901  0CB6  03F3               	decf	___awmod@dividend+1,f
  7902  0CB7  300A               	movlw	10
  7903  0CB8  00F0               	movwf	___awmod@divisor
  7904  0CB9  3000               	movlw	0
  7905  0CBA  00F1               	movwf	___awmod@divisor+1
  7906  0CBB  3192  22FC  318B   	fcall	___awmod
  7907  0CBE  0871               	movf	?___awmod+1,w
  7908  0CBF  0020               	movlb	0	; select bank0
  7909  0CC0  00A5               	movwf	___wmul@multiplier+1
  7910  0CC1  0870               	movf	?___awmod,w
  7911  0CC2  00A4               	movwf	___wmul@multiplier
  7912  0CC3  3003               	movlw	3
  7913  0CC4  00A6               	movwf	___wmul@multiplicand
  7914  0CC5  3000               	movlw	0
  7915  0CC6  00A7               	movwf	___wmul@multiplicand+1
  7916  0CC7  3191  2141  318B   	fcall	___wmul
  7917  0CCA  0020               	movlb	0	; select bank0
  7918  0CCB  0825               	movf	?___wmul+1,w
  7919  0CCC  0085               	movwf	5
  7920  0CCD  0824               	movf	?___wmul,w
  7921  0CCE  0084               	movwf	4
  7922  0CCF  304F               	movlw	low (__powers_| (0+32768))
  7923  0CD0  0784               	addwf	4,f
  7924  0CD1  3098               	movlw	high (__powers_| (0+32768))
  7925  0CD2  3D85               	addwfc	5,f
  7926  0CD3  3F00               	moviw [0]fsr0
  7927  0CD4  00A8               	movwf	___ftmul@f1
  7928  0CD5  3F01               	moviw [1]fsr0
  7929  0CD6  00A9               	movwf	___ftmul@f1+1
  7930  0CD7  3F02               	moviw [2]fsr0
  7931  0CD8  00AA               	movwf	___ftmul@f1+2
  7932  0CD9  083D               	movf	_scale$1010,w
  7933  0CDA  00AB               	movwf	___ftmul@f2
  7934  0CDB  083E               	movf	_scale$1010+1,w
  7935  0CDC  00AC               	movwf	___ftmul@f2+1
  7936  0CDD  083F               	movf	_scale$1010+2,w
  7937  0CDE  00AD               	movwf	___ftmul@f2+2
  7938  0CDF  3197  274C         	fcall	___ftmul
  7939  0CE1  0020               	movlb	0	; select bank0
  7940  0CE2  0828               	movf	?___ftmul,w
  7941  0CE3  00B8               	movwf	?_scale
  7942  0CE4  0829               	movf	?___ftmul+1,w
  7943  0CE5  00B9               	movwf	?_scale+1
  7944  0CE6  082A               	movf	?___ftmul+2,w
  7945  0CE7  00BA               	movwf	?_scale+2
  7946  0CE8  0008               	return
  7947  0CE9                     l2714:	
  7948                           
  7949                           ;doprnt.c: 438: else if(scl > 10)
  7950  0CE9  0840               	movf	scale@scl,w
  7951  0CEA  3A80               	xorlw	128
  7952  0CEB  3E75               	addlw	-139
  7953  0CEC  1C03               	skipc
  7954  0CED  2D48               	goto	l2720
  7955                           
  7956                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  7957  0CEE  0840               	movf	scale@scl,w
  7958  0CEF  00F2               	movwf	___awmod@dividend
  7959  0CF0  01F3               	clrf	___awmod@dividend+1
  7960  0CF1  1BF2               	btfsc	___awmod@dividend,7
  7961  0CF2  03F3               	decf	___awmod@dividend+1,f
  7962  0CF3  300A               	movlw	10
  7963  0CF4  00F0               	movwf	___awmod@divisor
  7964  0CF5  3000               	movlw	0
  7965  0CF6  00F1               	movwf	___awmod@divisor+1
  7966  0CF7  3192  22FC  318B   	fcall	___awmod
  7967  0CFA  0871               	movf	?___awmod+1,w
  7968  0CFB  0020               	movlb	0	; select bank0
  7969  0CFC  00A5               	movwf	___wmul@multiplier+1
  7970  0CFD  0870               	movf	?___awmod,w
  7971  0CFE  00A4               	movwf	___wmul@multiplier
  7972  0CFF  3003               	movlw	3
  7973  0D00  00A6               	movwf	___wmul@multiplicand
  7974  0D01  3000               	movlw	0
  7975  0D02  00A7               	movwf	___wmul@multiplicand+1
  7976  0D03  3191  2141  318B   	fcall	___wmul
  7977  0D06  0020               	movlb	0	; select bank0
  7978  0D07  0825               	movf	?___wmul+1,w
  7979  0D08  0085               	movwf	5
  7980  0D09  0824               	movf	?___wmul,w
  7981  0D0A  0084               	movwf	4
  7982  0D0B  304F               	movlw	low (__powers_| (0+32768))
  7983  0D0C  0784               	addwf	4,f
  7984  0D0D  3098               	movlw	high (__powers_| (0+32768))
  7985  0D0E  3D85               	addwfc	5,f
  7986  0D0F  3F00               	moviw [0]fsr0
  7987  0D10  00A8               	movwf	___ftmul@f1
  7988  0D11  3F01               	moviw [1]fsr0
  7989  0D12  00A9               	movwf	___ftmul@f1+1
  7990  0D13  3F02               	moviw [2]fsr0
  7991  0D14  00AA               	movwf	___ftmul@f1+2
  7992  0D15  300A               	movlw	10
  7993  0D16  00F7               	movwf	___awdiv@divisor
  7994  0D17  3000               	movlw	0
  7995  0D18  00F8               	movwf	___awdiv@divisor+1
  7996  0D19  0840               	movf	scale@scl,w
  7997  0D1A  00F9               	movwf	___awdiv@dividend
  7998  0D1B  01FA               	clrf	___awdiv@dividend+1
  7999  0D1C  1BF9               	btfsc	___awdiv@dividend,7
  8000  0D1D  03FA               	decf	___awdiv@dividend+1,f
  8001  0D1E  3188  2006  318B   	fcall	___awdiv
  8002  0D21  0877               	movf	?___awdiv,w
  8003  0D22  3E09               	addlw	9
  8004  0D23  0020               	movlb	0	; select bank0
  8005  0D24  00A4               	movwf	___wmul@multiplier
  8006  0D25  3000               	movlw	0
  8007  0D26  3D78               	addwfc	?___awdiv+1,w
  8008  0D27  00A5               	movwf	___wmul@multiplier+1
  8009  0D28  3003               	movlw	3
  8010  0D29  00A6               	movwf	___wmul@multiplicand
  8011  0D2A  3000               	movlw	0
  8012  0D2B  00A7               	movwf	___wmul@multiplicand+1
  8013  0D2C  3191  2141  318B   	fcall	___wmul
  8014  0D2F  0020               	movlb	0	; select bank0
  8015  0D30  0825               	movf	?___wmul+1,w
  8016  0D31  0085               	movwf	5
  8017  0D32  0824               	movf	?___wmul,w
  8018  0D33  0084               	movwf	4
  8019  0D34  304F               	movlw	low (__powers_| (0+32768))
  8020  0D35  0784               	addwf	4,f
  8021  0D36  3098               	movlw	high (__powers_| (0+32768))
  8022  0D37  3D85               	addwfc	5,f
  8023  0D38  3F00               	moviw [0]fsr0
  8024  0D39  00AB               	movwf	___ftmul@f2
  8025  0D3A  3F01               	moviw [1]fsr0
  8026  0D3B  00AC               	movwf	___ftmul@f2+1
  8027  0D3C  3F02               	moviw [2]fsr0
  8028  0D3D  00AD               	movwf	___ftmul@f2+2
  8029  0D3E  3197  274C         	fcall	___ftmul
  8030  0D40  0020               	movlb	0	; select bank0
  8031  0D41  0828               	movf	?___ftmul,w
  8032  0D42  00B8               	movwf	?_scale
  8033  0D43  0829               	movf	?___ftmul+1,w
  8034  0D44  00B9               	movwf	?_scale+1
  8035  0D45  082A               	movf	?___ftmul+2,w
  8036  0D46  00BA               	movwf	?_scale+2
  8037  0D47  0008               	return
  8038  0D48                     l2720:	
  8039                           
  8040                           ;doprnt.c: 440: return _powers_[scl];
  8041  0D48  0840               	movf	scale@scl,w
  8042  0D49  00BB               	movwf	??_scale
  8043  0D4A  01BC               	clrf	??_scale+1
  8044  0D4B  083B               	movf	??_scale,w
  8045  0D4C  00A4               	movwf	___wmul@multiplier
  8046  0D4D  083C               	movf	??_scale+1,w
  8047  0D4E  00A5               	movwf	___wmul@multiplier+1
  8048  0D4F  3003               	movlw	3
  8049  0D50  00A6               	movwf	___wmul@multiplicand
  8050  0D51  3000               	movlw	0
  8051  0D52  00A7               	movwf	___wmul@multiplicand+1
  8052  0D53  3191  2141         	fcall	___wmul
  8053  0D55  0020               	movlb	0	; select bank0
  8054  0D56  0825               	movf	?___wmul+1,w
  8055  0D57  0085               	movwf	5
  8056  0D58  0824               	movf	?___wmul,w
  8057  0D59  0084               	movwf	4
  8058  0D5A  304F               	movlw	low (__powers_| (0+32768))
  8059  0D5B  0784               	addwf	4,f
  8060  0D5C  3098               	movlw	high (__powers_| (0+32768))
  8061  0D5D  3D85               	addwfc	5,f
  8062  0D5E  3F00               	moviw [0]fsr0
  8063  0D5F  00B8               	movwf	?_scale
  8064  0D60  3F01               	moviw [1]fsr0
  8065  0D61  00B9               	movwf	?_scale+1
  8066  0D62  3F02               	moviw [2]fsr0
  8067  0D63  00BA               	movwf	?_scale+2
  8068  0D64  0008               	return
  8069  0D65                     __end_of_scale:	
  8070                           
  8071                           	psect	text3
  8072  1074                     __ptext3:	
  8073 ;; *************** function _isdigit *****************
  8074 ;; Defined at:
  8075 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\isdigit.c"
  8076 ;; Parameters:    Size  Location     Type
  8077 ;;  c               1    wreg     unsigned char 
  8078 ;; Auto vars:     Size  Location     Type
  8079 ;;  c               1    1[COMMON] unsigned char 
  8080 ;; Return value:  Size  Location     Type
  8081 ;;		None               void
  8082 ;; Registers used:
  8083 ;;		wreg, status,2, status,0
  8084 ;; Tracked objects:
  8085 ;;		On entry : 0/0
  8086 ;;		On exit  : 0/0
  8087 ;;		Unchanged: 0/0
  8088 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8089 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8090 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8091 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8092 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8093 ;;Total ram usage:        2 bytes
  8094 ;; Hardware stack levels used:    1
  8095 ;; This function calls:
  8096 ;;		Nothing
  8097 ;; This function is called by:
  8098 ;;		_sprintf
  8099 ;; This function uses a non-reentrant model
  8100 ;;
  8101                           
  8102                           
  8103                           ;psect for function _isdigit
  8104  1074                     _isdigit:	
  8105                           
  8106                           ;incstack = 0
  8107                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  8108                           ;isdigit@c stored from wreg
  8109  1074  00F1               	movwf	isdigit@c
  8110  1075  01F0               	clrf	_isdigit$719
  8111  1076  303A               	movlw	58
  8112  1077  0271               	subwf	isdigit@c,w
  8113  1078  1803               	skipnc
  8114  1079  2880               	goto	l2732
  8115  107A  3030               	movlw	48
  8116  107B  0271               	subwf	isdigit@c,w
  8117  107C  1C03               	skipc
  8118  107D  2880               	goto	l2732
  8119  107E  01F0               	clrf	_isdigit$719
  8120  107F  0AF0               	incf	_isdigit$719,f
  8121  1080                     l2732:	
  8122  1080  0C70               	rrf	_isdigit$719,w
  8123  1081  0008               	return
  8124  1082                     __end_of_isdigit:	
  8125                           
  8126                           	psect	text4
  8127  0070                     __ptext4:	
  8128 ;; *************** function _fround *****************
  8129 ;; Defined at:
  8130 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\doprnt.c"
  8131 ;; Parameters:    Size  Location     Type
  8132 ;;  prec            1    wreg     unsigned char 
  8133 ;; Auto vars:     Size  Location     Type
  8134 ;;  prec            1   37[BANK0 ] unsigned char 
  8135 ;; Return value:  Size  Location     Type
  8136 ;;                  3   24[BANK0 ] unsigned char 
  8137 ;; Registers used:
  8138 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8139 ;; Tracked objects:
  8140 ;;		On entry : 0/0
  8141 ;;		On exit  : 0/0
  8142 ;;		Unchanged: 0/0
  8143 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8144 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8145 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8146 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8147 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8148 ;;Total ram usage:       14 bytes
  8149 ;; Hardware stack levels used:    1
  8150 ;; Hardware stack levels required when called:    2
  8151 ;; This function calls:
  8152 ;;		___awdiv
  8153 ;;		___awmod
  8154 ;;		___ftmul
  8155 ;;		___wmul
  8156 ;; This function is called by:
  8157 ;;		_sprintf
  8158 ;; This function uses a non-reentrant model
  8159 ;;
  8160                           
  8161                           
  8162                           ;psect for function _fround
  8163  0070                     _fround:	
  8164                           
  8165                           ;incstack = 0
  8166                           ; Regs used in _fround: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8167                           ;fround@prec stored from wreg
  8168  0070  0020               	movlb	0	; select bank0
  8169  0071  00C5               	movwf	fround@prec
  8170                           
  8171                           ;doprnt.c: 413: if(prec>=110)
  8172  0072  306E               	movlw	110
  8173  0073  0245               	subwf	fround@prec,w
  8174  0074  1C03               	skipc
  8175  0075  2930               	goto	l2672
  8176                           
  8177                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  8178  0076  300A               	movlw	10
  8179  0077  00F7               	movwf	___awdiv@divisor
  8180  0078  3000               	movlw	0
  8181  0079  00F8               	movwf	___awdiv@divisor+1
  8182  007A  0845               	movf	fround@prec,w
  8183  007B  00BB               	movwf	??_fround
  8184  007C  01BC               	clrf	??_fround+1
  8185  007D  083B               	movf	??_fround,w
  8186  007E  00F2               	movwf	___awmod@dividend
  8187  007F  083C               	movf	??_fround+1,w
  8188  0080  00F3               	movwf	___awmod@dividend+1
  8189  0081  3064               	movlw	100
  8190  0082  00F0               	movwf	___awmod@divisor
  8191  0083  3000               	movlw	0
  8192  0084  00F1               	movwf	___awmod@divisor+1
  8193  0085  3192  22FC  3180   	fcall	___awmod
  8194  0088  0871               	movf	?___awmod+1,w
  8195  0089  00FA               	movwf	___awdiv@dividend+1
  8196  008A  0870               	movf	?___awmod,w
  8197  008B  00F9               	movwf	___awdiv@dividend
  8198  008C  3188  2006  3180   	fcall	___awdiv
  8199  008F  0877               	movf	?___awdiv,w
  8200  0090  3E09               	addlw	9
  8201  0091  0020               	movlb	0	; select bank0
  8202  0092  00A4               	movwf	___wmul@multiplier
  8203  0093  3000               	movlw	0
  8204  0094  3D78               	addwfc	?___awdiv+1,w
  8205  0095  00A5               	movwf	___wmul@multiplier+1
  8206  0096  3003               	movlw	3
  8207  0097  00A6               	movwf	___wmul@multiplicand
  8208  0098  3000               	movlw	0
  8209  0099  00A7               	movwf	___wmul@multiplicand+1
  8210  009A  3191  2141  3180   	fcall	___wmul
  8211  009D  0020               	movlb	0	; select bank0
  8212  009E  0825               	movf	?___wmul+1,w
  8213  009F  0085               	movwf	5
  8214  00A0  0824               	movf	?___wmul,w
  8215  00A1  0084               	movwf	4
  8216  00A2  3028               	movlw	low (__npowers_| (0+32768))
  8217  00A3  0784               	addwf	4,f
  8218  00A4  3098               	movlw	high (__npowers_| (0+32768))
  8219  00A5  3D85               	addwfc	5,f
  8220  00A6  3F00               	moviw [0]fsr0
  8221  00A7  00A8               	movwf	___ftmul@f1
  8222  00A8  3F01               	moviw [1]fsr0
  8223  00A9  00A9               	movwf	___ftmul@f1+1
  8224  00AA  3F02               	moviw [2]fsr0
  8225  00AB  00AA               	movwf	___ftmul@f1+2
  8226  00AC  3064               	movlw	100
  8227  00AD  00F7               	movwf	___awdiv@divisor
  8228  00AE  3000               	movlw	0
  8229  00AF  00F8               	movwf	___awdiv@divisor+1
  8230  00B0  0845               	movf	fround@prec,w
  8231  00B1  00BD               	movwf	??_fround+2
  8232  00B2  01BE               	clrf	??_fround+3
  8233  00B3  083D               	movf	??_fround+2,w
  8234  00B4  00F9               	movwf	___awdiv@dividend
  8235  00B5  083E               	movf	??_fround+3,w
  8236  00B6  00FA               	movwf	___awdiv@dividend+1
  8237  00B7  3188  2006  3180   	fcall	___awdiv
  8238  00BA  0877               	movf	?___awdiv,w
  8239  00BB  3E12               	addlw	18
  8240  00BC  0020               	movlb	0	; select bank0
  8241  00BD  00A4               	movwf	___wmul@multiplier
  8242  00BE  3000               	movlw	0
  8243  00BF  3D78               	addwfc	?___awdiv+1,w
  8244  00C0  00A5               	movwf	___wmul@multiplier+1
  8245  00C1  3003               	movlw	3
  8246  00C2  00A6               	movwf	___wmul@multiplicand
  8247  00C3  3000               	movlw	0
  8248  00C4  00A7               	movwf	___wmul@multiplicand+1
  8249  00C5  3191  2141  3180   	fcall	___wmul
  8250  00C8  0020               	movlb	0	; select bank0
  8251  00C9  0825               	movf	?___wmul+1,w
  8252  00CA  0085               	movwf	5
  8253  00CB  0824               	movf	?___wmul,w
  8254  00CC  0084               	movwf	4
  8255  00CD  3028               	movlw	low (__npowers_| (0+32768))
  8256  00CE  0784               	addwf	4,f
  8257  00CF  3098               	movlw	high (__npowers_| (0+32768))
  8258  00D0  3D85               	addwfc	5,f
  8259  00D1  3F00               	moviw [0]fsr0
  8260  00D2  00AB               	movwf	___ftmul@f2
  8261  00D3  3F01               	moviw [1]fsr0
  8262  00D4  00AC               	movwf	___ftmul@f2+1
  8263  00D5  3F02               	moviw [2]fsr0
  8264  00D6  00AD               	movwf	___ftmul@f2+2
  8265  00D7  3197  274C  3180   	fcall	___ftmul
  8266  00DA  0020               	movlb	0	; select bank0
  8267  00DB  0828               	movf	?___ftmul,w
  8268  00DC  00C2               	movwf	_fround$1008
  8269  00DD  0829               	movf	?___ftmul+1,w
  8270  00DE  00C3               	movwf	_fround$1008+1
  8271  00DF  082A               	movf	?___ftmul+2,w
  8272  00E0  00C4               	movwf	_fround$1008+2
  8273                           
  8274                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  8275  00E1  0845               	movf	fround@prec,w
  8276  00E2  00BB               	movwf	??_fround
  8277  00E3  01BC               	clrf	??_fround+1
  8278  00E4  083B               	movf	??_fround,w
  8279  00E5  00F2               	movwf	___awmod@dividend
  8280  00E6  083C               	movf	??_fround+1,w
  8281  00E7  00F3               	movwf	___awmod@dividend+1
  8282  00E8  300A               	movlw	10
  8283  00E9  00F0               	movwf	___awmod@divisor
  8284  00EA  3000               	movlw	0
  8285  00EB  00F1               	movwf	___awmod@divisor+1
  8286  00EC  3192  22FC  3180   	fcall	___awmod
  8287  00EF  0871               	movf	?___awmod+1,w
  8288  00F0  0020               	movlb	0	; select bank0
  8289  00F1  00A5               	movwf	___wmul@multiplier+1
  8290  00F2  0870               	movf	?___awmod,w
  8291  00F3  00A4               	movwf	___wmul@multiplier
  8292  00F4  3003               	movlw	3
  8293  00F5  00A6               	movwf	___wmul@multiplicand
  8294  00F6  3000               	movlw	0
  8295  00F7  00A7               	movwf	___wmul@multiplicand+1
  8296  00F8  3191  2141  3180   	fcall	___wmul
  8297  00FB  0020               	movlb	0	; select bank0
  8298  00FC  0825               	movf	?___wmul+1,w
  8299  00FD  0085               	movwf	5
  8300  00FE  0824               	movf	?___wmul,w
  8301  00FF  0084               	movwf	4
  8302  0100  3028               	movlw	low (__npowers_| (0+32768))
  8303  0101  0784               	addwf	4,f
  8304  0102  3098               	movlw	high (__npowers_| (0+32768))
  8305  0103  3D85               	addwfc	5,f
  8306  0104  3F00               	moviw [0]fsr0
  8307  0105  00A8               	movwf	___ftmul@f1
  8308  0106  3F01               	moviw [1]fsr0
  8309  0107  00A9               	movwf	___ftmul@f1+1
  8310  0108  3F02               	moviw [2]fsr0
  8311  0109  00AA               	movwf	___ftmul@f1+2
  8312  010A  0842               	movf	_fround$1008,w
  8313  010B  00AB               	movwf	___ftmul@f2
  8314  010C  0843               	movf	_fround$1008+1,w
  8315  010D  00AC               	movwf	___ftmul@f2+1
  8316  010E  0844               	movf	_fround$1008+2,w
  8317  010F  00AD               	movwf	___ftmul@f2+2
  8318  0110  3197  274C  3180   	fcall	___ftmul
  8319  0113  0020               	movlb	0	; select bank0
  8320  0114  0828               	movf	?___ftmul,w
  8321  0115  00BF               	movwf	_fround$1009
  8322  0116  0829               	movf	?___ftmul+1,w
  8323  0117  00C0               	movwf	_fround$1009+1
  8324  0118  082A               	movf	?___ftmul+2,w
  8325  0119  00C1               	movwf	_fround$1009+2
  8326                           
  8327                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  8328  011A  3000               	movlw	0
  8329  011B  00A8               	movwf	___ftmul@f1
  8330  011C  3000               	movlw	0
  8331  011D  00A9               	movwf	___ftmul@f1+1
  8332  011E  303F               	movlw	63
  8333  011F  00AA               	movwf	___ftmul@f1+2
  8334  0120  083F               	movf	_fround$1009,w
  8335  0121  00AB               	movwf	___ftmul@f2
  8336  0122  0840               	movf	_fround$1009+1,w
  8337  0123  00AC               	movwf	___ftmul@f2+1
  8338  0124  0841               	movf	_fround$1009+2,w
  8339  0125  00AD               	movwf	___ftmul@f2+2
  8340  0126  3197  274C         	fcall	___ftmul
  8341  0128  0020               	movlb	0	; select bank0
  8342  0129  0828               	movf	?___ftmul,w
  8343  012A  00B8               	movwf	?_fround
  8344  012B  0829               	movf	?___ftmul+1,w
  8345  012C  00B9               	movwf	?_fround+1
  8346  012D  082A               	movf	?___ftmul+2,w
  8347  012E  00BA               	movwf	?_fround+2
  8348  012F  0008               	return
  8349  0130                     l2672:	
  8350                           
  8351                           ;doprnt.c: 415: else if(prec > 10)
  8352  0130  300B               	movlw	11
  8353  0131  0245               	subwf	fround@prec,w
  8354  0132  1C03               	skipc
  8355  0133  29A8               	goto	l2680
  8356                           
  8357                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  8358  0134  0845               	movf	fround@prec,w
  8359  0135  00BB               	movwf	??_fround
  8360  0136  01BC               	clrf	??_fround+1
  8361  0137  083B               	movf	??_fround,w
  8362  0138  00F2               	movwf	___awmod@dividend
  8363  0139  083C               	movf	??_fround+1,w
  8364  013A  00F3               	movwf	___awmod@dividend+1
  8365  013B  300A               	movlw	10
  8366  013C  00F0               	movwf	___awmod@divisor
  8367  013D  3000               	movlw	0
  8368  013E  00F1               	movwf	___awmod@divisor+1
  8369  013F  3192  22FC  3180   	fcall	___awmod
  8370  0142  0871               	movf	?___awmod+1,w
  8371  0143  0020               	movlb	0	; select bank0
  8372  0144  00A5               	movwf	___wmul@multiplier+1
  8373  0145  0870               	movf	?___awmod,w
  8374  0146  00A4               	movwf	___wmul@multiplier
  8375  0147  3003               	movlw	3
  8376  0148  00A6               	movwf	___wmul@multiplicand
  8377  0149  3000               	movlw	0
  8378  014A  00A7               	movwf	___wmul@multiplicand+1
  8379  014B  3191  2141  3180   	fcall	___wmul
  8380  014E  0020               	movlb	0	; select bank0
  8381  014F  0825               	movf	?___wmul+1,w
  8382  0150  0085               	movwf	5
  8383  0151  0824               	movf	?___wmul,w
  8384  0152  0084               	movwf	4
  8385  0153  3028               	movlw	low (__npowers_| (0+32768))
  8386  0154  0784               	addwf	4,f
  8387  0155  3098               	movlw	high (__npowers_| (0+32768))
  8388  0156  3D85               	addwfc	5,f
  8389  0157  3F00               	moviw [0]fsr0
  8390  0158  00A8               	movwf	___ftmul@f1
  8391  0159  3F01               	moviw [1]fsr0
  8392  015A  00A9               	movwf	___ftmul@f1+1
  8393  015B  3F02               	moviw [2]fsr0
  8394  015C  00AA               	movwf	___ftmul@f1+2
  8395  015D  300A               	movlw	10
  8396  015E  00F7               	movwf	___awdiv@divisor
  8397  015F  3000               	movlw	0
  8398  0160  00F8               	movwf	___awdiv@divisor+1
  8399  0161  0845               	movf	fround@prec,w
  8400  0162  00BD               	movwf	??_fround+2
  8401  0163  01BE               	clrf	??_fround+3
  8402  0164  083D               	movf	??_fround+2,w
  8403  0165  00F9               	movwf	___awdiv@dividend
  8404  0166  083E               	movf	??_fround+3,w
  8405  0167  00FA               	movwf	___awdiv@dividend+1
  8406  0168  3188  2006  3180   	fcall	___awdiv
  8407  016B  0877               	movf	?___awdiv,w
  8408  016C  3E09               	addlw	9
  8409  016D  0020               	movlb	0	; select bank0
  8410  016E  00A4               	movwf	___wmul@multiplier
  8411  016F  3000               	movlw	0
  8412  0170  3D78               	addwfc	?___awdiv+1,w
  8413  0171  00A5               	movwf	___wmul@multiplier+1
  8414  0172  3003               	movlw	3
  8415  0173  00A6               	movwf	___wmul@multiplicand
  8416  0174  3000               	movlw	0
  8417  0175  00A7               	movwf	___wmul@multiplicand+1
  8418  0176  3191  2141  3180   	fcall	___wmul
  8419  0179  0020               	movlb	0	; select bank0
  8420  017A  0825               	movf	?___wmul+1,w
  8421  017B  0085               	movwf	5
  8422  017C  0824               	movf	?___wmul,w
  8423  017D  0084               	movwf	4
  8424  017E  3028               	movlw	low (__npowers_| (0+32768))
  8425  017F  0784               	addwf	4,f
  8426  0180  3098               	movlw	high (__npowers_| (0+32768))
  8427  0181  3D85               	addwfc	5,f
  8428  0182  3F00               	moviw [0]fsr0
  8429  0183  00AB               	movwf	___ftmul@f2
  8430  0184  3F01               	moviw [1]fsr0
  8431  0185  00AC               	movwf	___ftmul@f2+1
  8432  0186  3F02               	moviw [2]fsr0
  8433  0187  00AD               	movwf	___ftmul@f2+2
  8434  0188  3197  274C  3180   	fcall	___ftmul
  8435  018B  0020               	movlb	0	; select bank0
  8436  018C  0828               	movf	?___ftmul,w
  8437  018D  00C2               	movwf	_fround$1008
  8438  018E  0829               	movf	?___ftmul+1,w
  8439  018F  00C3               	movwf	_fround$1008+1
  8440  0190  082A               	movf	?___ftmul+2,w
  8441  0191  00C4               	movwf	_fround$1008+2
  8442                           
  8443                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  8444  0192  3000               	movlw	0
  8445  0193  00A8               	movwf	___ftmul@f1
  8446  0194  3000               	movlw	0
  8447  0195  00A9               	movwf	___ftmul@f1+1
  8448  0196  303F               	movlw	63
  8449  0197  00AA               	movwf	___ftmul@f1+2
  8450  0198  0842               	movf	_fround$1008,w
  8451  0199  00AB               	movwf	___ftmul@f2
  8452  019A  0843               	movf	_fround$1008+1,w
  8453  019B  00AC               	movwf	___ftmul@f2+1
  8454  019C  0844               	movf	_fround$1008+2,w
  8455  019D  00AD               	movwf	___ftmul@f2+2
  8456  019E  3197  274C         	fcall	___ftmul
  8457  01A0  0020               	movlb	0	; select bank0
  8458  01A1  0828               	movf	?___ftmul,w
  8459  01A2  00B8               	movwf	?_fround
  8460  01A3  0829               	movf	?___ftmul+1,w
  8461  01A4  00B9               	movwf	?_fround+1
  8462  01A5  082A               	movf	?___ftmul+2,w
  8463  01A6  00BA               	movwf	?_fround+2
  8464  01A7  0008               	return
  8465  01A8                     l2680:	
  8466                           
  8467                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  8468  01A8  3000               	movlw	0
  8469  01A9  00A8               	movwf	___ftmul@f1
  8470  01AA  3000               	movlw	0
  8471  01AB  00A9               	movwf	___ftmul@f1+1
  8472  01AC  303F               	movlw	63
  8473  01AD  00AA               	movwf	___ftmul@f1+2
  8474  01AE  0845               	movf	fround@prec,w
  8475  01AF  00BB               	movwf	??_fround
  8476  01B0  01BC               	clrf	??_fround+1
  8477  01B1  083B               	movf	??_fround,w
  8478  01B2  00A4               	movwf	___wmul@multiplier
  8479  01B3  083C               	movf	??_fround+1,w
  8480  01B4  00A5               	movwf	___wmul@multiplier+1
  8481  01B5  3003               	movlw	3
  8482  01B6  00A6               	movwf	___wmul@multiplicand
  8483  01B7  3000               	movlw	0
  8484  01B8  00A7               	movwf	___wmul@multiplicand+1
  8485  01B9  3191  2141  3180   	fcall	___wmul
  8486  01BC  0020               	movlb	0	; select bank0
  8487  01BD  0825               	movf	?___wmul+1,w
  8488  01BE  0085               	movwf	5
  8489  01BF  0824               	movf	?___wmul,w
  8490  01C0  0084               	movwf	4
  8491  01C1  3028               	movlw	low (__npowers_| (0+32768))
  8492  01C2  0784               	addwf	4,f
  8493  01C3  3098               	movlw	high (__npowers_| (0+32768))
  8494  01C4  3D85               	addwfc	5,f
  8495  01C5  3F00               	moviw [0]fsr0
  8496  01C6  00AB               	movwf	___ftmul@f2
  8497  01C7  3F01               	moviw [1]fsr0
  8498  01C8  00AC               	movwf	___ftmul@f2+1
  8499  01C9  3F02               	moviw [2]fsr0
  8500  01CA  00AD               	movwf	___ftmul@f2+2
  8501  01CB  3197  274C         	fcall	___ftmul
  8502  01CD  0020               	movlb	0	; select bank0
  8503  01CE  0828               	movf	?___ftmul,w
  8504  01CF  00B8               	movwf	?_fround
  8505  01D0  0829               	movf	?___ftmul+1,w
  8506  01D1  00B9               	movwf	?_fround+1
  8507  01D2  082A               	movf	?___ftmul+2,w
  8508  01D3  00BA               	movwf	?_fround+2
  8509  01D4  0008               	return
  8510  01D5                     __end_of_fround:	
  8511                           
  8512                           	psect	text5
  8513  12FC                     __ptext5:	
  8514 ;; *************** function ___awmod *****************
  8515 ;; Defined at:
  8516 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awmod.c"
  8517 ;; Parameters:    Size  Location     Type
  8518 ;;  divisor         2    0[COMMON] int 
  8519 ;;  dividend        2    2[COMMON] int 
  8520 ;; Auto vars:     Size  Location     Type
  8521 ;;  sign            1    6[COMMON] unsigned char 
  8522 ;;  counter         1    5[COMMON] unsigned char 
  8523 ;; Return value:  Size  Location     Type
  8524 ;;                  2    0[COMMON] int 
  8525 ;; Registers used:
  8526 ;;		wreg, status,2, status,0
  8527 ;; Tracked objects:
  8528 ;;		On entry : 0/0
  8529 ;;		On exit  : 0/0
  8530 ;;		Unchanged: 0/0
  8531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8532 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8533 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8534 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8535 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8536 ;;Total ram usage:        7 bytes
  8537 ;; Hardware stack levels used:    1
  8538 ;; This function calls:
  8539 ;;		Nothing
  8540 ;; This function is called by:
  8541 ;;		_fround
  8542 ;;		_scale
  8543 ;;		_LCD_Write_Int
  8544 ;; This function uses a non-reentrant model
  8545 ;;
  8546                           
  8547                           
  8548                           ;psect for function ___awmod
  8549  12FC                     ___awmod:	
  8550                           
  8551                           ;incstack = 0
  8552                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  8553  12FC  01F6               	clrf	___awmod@sign
  8554  12FD  1FF3               	btfss	___awmod@dividend+1,7
  8555  12FE  2B06               	goto	l2406
  8556  12FF  09F2               	comf	___awmod@dividend,f
  8557  1300  09F3               	comf	___awmod@dividend+1,f
  8558  1301  0AF2               	incf	___awmod@dividend,f
  8559  1302  1903               	skipnz
  8560  1303  0AF3               	incf	___awmod@dividend+1,f
  8561  1304  01F6               	clrf	___awmod@sign
  8562  1305  0AF6               	incf	___awmod@sign,f
  8563  1306                     l2406:	
  8564  1306  1FF1               	btfss	___awmod@divisor+1,7
  8565  1307  2B0D               	goto	l2410
  8566  1308  09F0               	comf	___awmod@divisor,f
  8567  1309  09F1               	comf	___awmod@divisor+1,f
  8568  130A  0AF0               	incf	___awmod@divisor,f
  8569  130B  1903               	skipnz
  8570  130C  0AF1               	incf	___awmod@divisor+1,f
  8571  130D                     l2410:	
  8572  130D  0870               	movf	___awmod@divisor,w
  8573  130E  0471               	iorwf	___awmod@divisor+1,w
  8574  130F  1903               	btfsc	3,2
  8575  1310  2B34               	goto	l2428
  8576  1311  01F5               	clrf	___awmod@counter
  8577  1312  0AF5               	incf	___awmod@counter,f
  8578  1313                     l2418:	
  8579  1313  1BF1               	btfsc	___awmod@divisor+1,7
  8580  1314  2B1F               	goto	l2420
  8581  1315  3001               	movlw	1
  8582  1316                     u2725:	
  8583  1316  35F0               	lslf	___awmod@divisor,f
  8584  1317  0DF1               	rlf	___awmod@divisor+1,f
  8585  1318  0B89               	decfsz	9,f
  8586  1319  2B16               	goto	u2725
  8587  131A  3001               	movlw	1
  8588  131B  00F4               	movwf	??___awmod
  8589  131C  0874               	movf	??___awmod,w
  8590  131D  07F5               	addwf	___awmod@counter,f
  8591  131E  2B13               	goto	l2418
  8592  131F                     l2420:	
  8593  131F  0871               	movf	___awmod@divisor+1,w
  8594  1320  0273               	subwf	___awmod@dividend+1,w
  8595  1321  1D03               	skipz
  8596  1322  2B25               	goto	u2745
  8597  1323  0870               	movf	___awmod@divisor,w
  8598  1324  0272               	subwf	___awmod@dividend,w
  8599  1325                     u2745:	
  8600  1325  1C03               	skipc
  8601  1326  2B2B               	goto	l2424
  8602  1327  0870               	movf	___awmod@divisor,w
  8603  1328  02F2               	subwf	___awmod@dividend,f
  8604  1329  0871               	movf	___awmod@divisor+1,w
  8605  132A  3BF3               	subwfb	___awmod@dividend+1,f
  8606  132B                     l2424:	
  8607  132B  3001               	movlw	1
  8608  132C                     u2755:	
  8609  132C  36F1               	lsrf	___awmod@divisor+1,f
  8610  132D  0CF0               	rrf	___awmod@divisor,f
  8611  132E  0B89               	decfsz	9,f
  8612  132F  2B2C               	goto	u2755
  8613  1330  3001               	movlw	1
  8614  1331  02F5               	subwf	___awmod@counter,f
  8615  1332  1D03               	btfss	3,2
  8616  1333  2B1F               	goto	l2420
  8617  1334                     l2428:	
  8618  1334  0876               	movf	___awmod@sign,w
  8619  1335  1903               	btfsc	3,2
  8620  1336  2B3C               	goto	l2432
  8621  1337  09F2               	comf	___awmod@dividend,f
  8622  1338  09F3               	comf	___awmod@dividend+1,f
  8623  1339  0AF2               	incf	___awmod@dividend,f
  8624  133A  1903               	skipnz
  8625  133B  0AF3               	incf	___awmod@dividend+1,f
  8626  133C                     l2432:	
  8627  133C  0873               	movf	___awmod@dividend+1,w
  8628  133D  00F1               	movwf	?___awmod+1
  8629  133E  0872               	movf	___awmod@dividend,w
  8630  133F  00F0               	movwf	?___awmod
  8631  1340  0008               	return
  8632  1341                     __end_of___awmod:	
  8633                           
  8634                           	psect	text6
  8635  0806                     __ptext6:	
  8636 ;; *************** function ___awdiv *****************
  8637 ;; Defined at:
  8638 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awdiv.c"
  8639 ;; Parameters:    Size  Location     Type
  8640 ;;  divisor         2    7[COMMON] int 
  8641 ;;  dividend        2    9[COMMON] int 
  8642 ;; Auto vars:     Size  Location     Type
  8643 ;;  quotient        2    2[BANK0 ] int 
  8644 ;;  sign            1    1[BANK0 ] unsigned char 
  8645 ;;  counter         1    0[BANK0 ] unsigned char 
  8646 ;; Return value:  Size  Location     Type
  8647 ;;                  2    7[COMMON] int 
  8648 ;; Registers used:
  8649 ;;		wreg, status,2, status,0
  8650 ;; Tracked objects:
  8651 ;;		On entry : 0/0
  8652 ;;		On exit  : 0/0
  8653 ;;		Unchanged: 0/0
  8654 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8655 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8656 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8657 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8658 ;;      Totals:         5       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8659 ;;Total ram usage:        9 bytes
  8660 ;; Hardware stack levels used:    1
  8661 ;; This function calls:
  8662 ;;		Nothing
  8663 ;; This function is called by:
  8664 ;;		_fround
  8665 ;;		_scale
  8666 ;;		_sprintf
  8667 ;;		_LCD_Write_Int
  8668 ;; This function uses a non-reentrant model
  8669 ;;
  8670                           
  8671                           
  8672                           ;psect for function ___awdiv
  8673  0806                     ___awdiv:	
  8674                           
  8675                           ;incstack = 0
  8676                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  8677  0806  0020               	movlb	0	; select bank0
  8678  0807  01A1               	clrf	___awdiv@sign
  8679  0808  1FF8               	btfss	___awdiv@divisor+1,7
  8680  0809  2811               	goto	l2362
  8681  080A  09F7               	comf	___awdiv@divisor,f
  8682  080B  09F8               	comf	___awdiv@divisor+1,f
  8683  080C  0AF7               	incf	___awdiv@divisor,f
  8684  080D  1903               	skipnz
  8685  080E  0AF8               	incf	___awdiv@divisor+1,f
  8686  080F  01A1               	clrf	___awdiv@sign
  8687  0810  0AA1               	incf	___awdiv@sign,f
  8688  0811                     l2362:	
  8689  0811  1FFA               	btfss	___awdiv@dividend+1,7
  8690  0812  281C               	goto	l2368
  8691  0813  09F9               	comf	___awdiv@dividend,f
  8692  0814  09FA               	comf	___awdiv@dividend+1,f
  8693  0815  0AF9               	incf	___awdiv@dividend,f
  8694  0816  1903               	skipnz
  8695  0817  0AFA               	incf	___awdiv@dividend+1,f
  8696  0818  3001               	movlw	1
  8697  0819  00FB               	movwf	??___awdiv
  8698  081A  087B               	movf	??___awdiv,w
  8699  081B  06A1               	xorwf	___awdiv@sign,f
  8700  081C                     l2368:	
  8701  081C  01A2               	clrf	___awdiv@quotient
  8702  081D  01A3               	clrf	___awdiv@quotient+1
  8703  081E  0877               	movf	___awdiv@divisor,w
  8704  081F  0478               	iorwf	___awdiv@divisor+1,w
  8705  0820  1903               	btfsc	3,2
  8706  0821  284B               	goto	l2390
  8707  0822  01A0               	clrf	___awdiv@counter
  8708  0823  0AA0               	incf	___awdiv@counter,f
  8709  0824                     l2378:	
  8710  0824  1BF8               	btfsc	___awdiv@divisor+1,7
  8711  0825  2830               	goto	l2380
  8712  0826  3001               	movlw	1
  8713  0827                     u2625:	
  8714  0827  35F7               	lslf	___awdiv@divisor,f
  8715  0828  0DF8               	rlf	___awdiv@divisor+1,f
  8716  0829  0B89               	decfsz	9,f
  8717  082A  2827               	goto	u2625
  8718  082B  3001               	movlw	1
  8719  082C  00FB               	movwf	??___awdiv
  8720  082D  087B               	movf	??___awdiv,w
  8721  082E  07A0               	addwf	___awdiv@counter,f
  8722  082F  2824               	goto	l2378
  8723  0830                     l2380:	
  8724  0830  3001               	movlw	1
  8725  0831                     u2645:	
  8726  0831  35A2               	lslf	___awdiv@quotient,f
  8727  0832  0DA3               	rlf	___awdiv@quotient+1,f
  8728  0833  0B89               	decfsz	9,f
  8729  0834  2831               	goto	u2645
  8730  0835  0878               	movf	___awdiv@divisor+1,w
  8731  0836  027A               	subwf	___awdiv@dividend+1,w
  8732  0837  1D03               	skipz
  8733  0838  283B               	goto	u2655
  8734  0839  0877               	movf	___awdiv@divisor,w
  8735  083A  0279               	subwf	___awdiv@dividend,w
  8736  083B                     u2655:	
  8737  083B  1C03               	skipc
  8738  083C  2842               	goto	l2386
  8739  083D  0877               	movf	___awdiv@divisor,w
  8740  083E  02F9               	subwf	___awdiv@dividend,f
  8741  083F  0878               	movf	___awdiv@divisor+1,w
  8742  0840  3BFA               	subwfb	___awdiv@dividend+1,f
  8743  0841  1422               	bsf	___awdiv@quotient,0
  8744  0842                     l2386:	
  8745  0842  3001               	movlw	1
  8746  0843                     u2665:	
  8747  0843  36F8               	lsrf	___awdiv@divisor+1,f
  8748  0844  0CF7               	rrf	___awdiv@divisor,f
  8749  0845  0B89               	decfsz	9,f
  8750  0846  2843               	goto	u2665
  8751  0847  3001               	movlw	1
  8752  0848  02A0               	subwf	___awdiv@counter,f
  8753  0849  1D03               	btfss	3,2
  8754  084A  2830               	goto	l2380
  8755  084B                     l2390:	
  8756  084B  0821               	movf	___awdiv@sign,w
  8757  084C  1903               	btfsc	3,2
  8758  084D  2853               	goto	l2394
  8759  084E  09A2               	comf	___awdiv@quotient,f
  8760  084F  09A3               	comf	___awdiv@quotient+1,f
  8761  0850  0AA2               	incf	___awdiv@quotient,f
  8762  0851  1903               	skipnz
  8763  0852  0AA3               	incf	___awdiv@quotient+1,f
  8764  0853                     l2394:	
  8765  0853  0823               	movf	___awdiv@quotient+1,w
  8766  0854  00F8               	movwf	?___awdiv+1
  8767  0855  0822               	movf	___awdiv@quotient,w
  8768  0856  00F7               	movwf	?___awdiv
  8769  0857  0008               	return
  8770  0858                     __end_of___awdiv:	
  8771                           
  8772                           	psect	text7
  8773  0858                     __ptext7:	
  8774 ;; *************** function __tdiv_to_l_ *****************
  8775 ;; Defined at:
  8776 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftdivl.c"
  8777 ;; Parameters:    Size  Location     Type
  8778 ;;  f1              3    0[COMMON] float 
  8779 ;;  f2              3    3[COMMON] float 
  8780 ;; Auto vars:     Size  Location     Type
  8781 ;;  quot            4    0[BANK0 ] unsigned long 
  8782 ;;  exp1            1    5[BANK0 ] unsigned char 
  8783 ;;  cntr            1    4[BANK0 ] unsigned char 
  8784 ;; Return value:  Size  Location     Type
  8785 ;;                  4    0[COMMON] unsigned long 
  8786 ;; Registers used:
  8787 ;;		wreg, status,2, status,0
  8788 ;; Tracked objects:
  8789 ;;		On entry : 0/0
  8790 ;;		On exit  : 0/0
  8791 ;;		Unchanged: 0/0
  8792 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8793 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8794 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8795 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8796 ;;      Totals:        10       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8797 ;;Total ram usage:       16 bytes
  8798 ;; Hardware stack levels used:    1
  8799 ;; This function calls:
  8800 ;;		Nothing
  8801 ;; This function is called by:
  8802 ;;		_sprintf
  8803 ;; This function uses a non-reentrant model
  8804 ;;
  8805                           
  8806                           
  8807                           ;psect for function __tdiv_to_l_
  8808  0858                     __tdiv_to_l_:	
  8809                           
  8810                           ;incstack = 0
  8811                           ; Regs used in __tdiv_to_l_: [wreg+status,2+status,0]
  8812  0858  0870               	movf	__tdiv_to_l_@f1,w
  8813  0859  00F6               	movwf	??__tdiv_to_l_
  8814  085A  0871               	movf	__tdiv_to_l_@f1+1,w
  8815  085B  00F7               	movwf	??__tdiv_to_l_+1
  8816  085C  0872               	movf	__tdiv_to_l_@f1+2,w
  8817  085D  00F8               	movwf	??__tdiv_to_l_+2
  8818  085E  1003               	clrc
  8819  085F  0D77               	rlf	??__tdiv_to_l_+1,w
  8820  0860  0D78               	rlf	??__tdiv_to_l_+2,w
  8821  0861  00F9               	movwf	??__tdiv_to_l_+3
  8822  0862  0879               	movf	??__tdiv_to_l_+3,w
  8823  0863  0020               	movlb	0	; select bank0
  8824  0864  00A5               	movwf	__tdiv_to_l_@exp1
  8825  0865  0825               	movf	__tdiv_to_l_@exp1,w
  8826  0866  1D03               	btfss	3,2
  8827  0867  2871               	goto	l2742
  8828  0868  3000               	movlw	0
  8829  0869  00F3               	movwf	?__tdiv_to_l_+3
  8830  086A  3000               	movlw	0
  8831  086B  00F2               	movwf	?__tdiv_to_l_+2
  8832  086C  3000               	movlw	0
  8833  086D  00F1               	movwf	?__tdiv_to_l_+1
  8834  086E  3000               	movlw	0
  8835  086F  00F0               	movwf	?__tdiv_to_l_
  8836  0870  0008               	return
  8837  0871                     l2742:	
  8838  0871  0873               	movf	__tdiv_to_l_@f2,w
  8839  0872  00F6               	movwf	??__tdiv_to_l_
  8840  0873  0874               	movf	__tdiv_to_l_@f2+1,w
  8841  0874  00F7               	movwf	??__tdiv_to_l_+1
  8842  0875  0875               	movf	__tdiv_to_l_@f2+2,w
  8843  0876  00F8               	movwf	??__tdiv_to_l_+2
  8844  0877  1003               	clrc
  8845  0878  0D77               	rlf	??__tdiv_to_l_+1,w
  8846  0879  0D78               	rlf	??__tdiv_to_l_+2,w
  8847  087A  00F9               	movwf	??__tdiv_to_l_+3
  8848  087B  0879               	movf	??__tdiv_to_l_+3,w
  8849  087C  00A4               	movwf	__tdiv_to_l_@cntr
  8850  087D  0824               	movf	__tdiv_to_l_@cntr,w
  8851  087E  1D03               	btfss	3,2
  8852  087F  2889               	goto	l706
  8853  0880  3000               	movlw	0
  8854  0881  00F3               	movwf	?__tdiv_to_l_+3
  8855  0882  3000               	movlw	0
  8856  0883  00F2               	movwf	?__tdiv_to_l_+2
  8857  0884  3000               	movlw	0
  8858  0885  00F1               	movwf	?__tdiv_to_l_+1
  8859  0886  3000               	movlw	0
  8860  0887  00F0               	movwf	?__tdiv_to_l_
  8861  0888  0008               	return
  8862  0889                     l706:	
  8863  0889  17F1               	bsf	__tdiv_to_l_@f1+1,7
  8864  088A  30FF               	movlw	255
  8865  088B  05F0               	andwf	__tdiv_to_l_@f1,f
  8866  088C  30FF               	movlw	255
  8867  088D  05F1               	andwf	__tdiv_to_l_@f1+1,f
  8868  088E  3000               	movlw	0
  8869  088F  05F2               	andwf	__tdiv_to_l_@f1+2,f
  8870  0890  17F4               	bsf	__tdiv_to_l_@f2+1,7
  8871  0891  30FF               	movlw	255
  8872  0892  05F3               	andwf	__tdiv_to_l_@f2,f
  8873  0893  30FF               	movlw	255
  8874  0894  05F4               	andwf	__tdiv_to_l_@f2+1,f
  8875  0895  3000               	movlw	0
  8876  0896  05F5               	andwf	__tdiv_to_l_@f2+2,f
  8877  0897  3000               	movlw	0
  8878  0898  00A3               	movwf	__tdiv_to_l_@quot+3
  8879  0899  3000               	movlw	0
  8880  089A  00A2               	movwf	__tdiv_to_l_@quot+2
  8881  089B  3000               	movlw	0
  8882  089C  00A1               	movwf	__tdiv_to_l_@quot+1
  8883  089D  3000               	movlw	0
  8884  089E  00A0               	movwf	__tdiv_to_l_@quot
  8885  089F  307F               	movlw	127
  8886  08A0  02A5               	subwf	__tdiv_to_l_@exp1,f
  8887  08A1  3098               	movlw	152
  8888  08A2  0724               	addwf	__tdiv_to_l_@cntr,w
  8889  08A3  00F6               	movwf	??__tdiv_to_l_
  8890  08A4  0876               	movf	??__tdiv_to_l_,w
  8891  08A5  02A5               	subwf	__tdiv_to_l_@exp1,f
  8892  08A6  3018               	movlw	24
  8893  08A7  00F6               	movwf	??__tdiv_to_l_
  8894  08A8  0876               	movf	??__tdiv_to_l_,w
  8895  08A9  00A4               	movwf	__tdiv_to_l_@cntr
  8896  08AA                     l2756:	
  8897  08AA  3001               	movlw	1
  8898  08AB                     u3275:	
  8899  08AB  35A0               	lslf	__tdiv_to_l_@quot,f
  8900  08AC  0DA1               	rlf	__tdiv_to_l_@quot+1,f
  8901  08AD  0DA2               	rlf	__tdiv_to_l_@quot+2,f
  8902  08AE  0DA3               	rlf	__tdiv_to_l_@quot+3,f
  8903  08AF  0B89               	decfsz	9,f
  8904  08B0  28AB               	goto	u3275
  8905  08B1  0875               	movf	__tdiv_to_l_@f2+2,w
  8906  08B2  0272               	subwf	__tdiv_to_l_@f1+2,w
  8907  08B3  1D03               	skipz
  8908  08B4  28BB               	goto	u3285
  8909  08B5  0874               	movf	__tdiv_to_l_@f2+1,w
  8910  08B6  0271               	subwf	__tdiv_to_l_@f1+1,w
  8911  08B7  1D03               	skipz
  8912  08B8  28BB               	goto	u3285
  8913  08B9  0873               	movf	__tdiv_to_l_@f2,w
  8914  08BA  0270               	subwf	__tdiv_to_l_@f1,w
  8915  08BB                     u3285:	
  8916  08BB  1C03               	skipc
  8917  08BC  28C4               	goto	l2764
  8918  08BD  0873               	movf	__tdiv_to_l_@f2,w
  8919  08BE  02F0               	subwf	__tdiv_to_l_@f1,f
  8920  08BF  0874               	movf	__tdiv_to_l_@f2+1,w
  8921  08C0  3BF1               	subwfb	__tdiv_to_l_@f1+1,f
  8922  08C1  0875               	movf	__tdiv_to_l_@f2+2,w
  8923  08C2  3BF2               	subwfb	__tdiv_to_l_@f1+2,f
  8924  08C3  1420               	bsf	__tdiv_to_l_@quot,0
  8925  08C4                     l2764:	
  8926  08C4  3001               	movlw	1
  8927  08C5                     u3295:	
  8928  08C5  35F0               	lslf	__tdiv_to_l_@f1,f
  8929  08C6  0DF1               	rlf	__tdiv_to_l_@f1+1,f
  8930  08C7  0DF2               	rlf	__tdiv_to_l_@f1+2,f
  8931  08C8  0B89               	decfsz	9,f
  8932  08C9  28C5               	goto	u3295
  8933  08CA  3001               	movlw	1
  8934  08CB  02A4               	subwf	__tdiv_to_l_@cntr,f
  8935  08CC  1D03               	btfss	3,2
  8936  08CD  28AA               	goto	l2756
  8937  08CE  1FA5               	btfss	__tdiv_to_l_@exp1,7
  8938  08CF  28EC               	goto	l2776
  8939  08D0  0825               	movf	__tdiv_to_l_@exp1,w
  8940  08D1  3A80               	xorlw	128
  8941  08D2  3E97               	addlw	151
  8942  08D3  1803               	skipnc
  8943  08D4  28DE               	goto	l2774
  8944  08D5  3000               	movlw	0
  8945  08D6  00F3               	movwf	?__tdiv_to_l_+3
  8946  08D7  3000               	movlw	0
  8947  08D8  00F2               	movwf	?__tdiv_to_l_+2
  8948  08D9  3000               	movlw	0
  8949  08DA  00F1               	movwf	?__tdiv_to_l_+1
  8950  08DB  3000               	movlw	0
  8951  08DC  00F0               	movwf	?__tdiv_to_l_
  8952  08DD  0008               	return
  8953  08DE                     l2774:	
  8954  08DE  3001               	movlw	1
  8955  08DF                     u3335:	
  8956  08DF  36A3               	lsrf	__tdiv_to_l_@quot+3,f
  8957  08E0  0CA2               	rrf	__tdiv_to_l_@quot+2,f
  8958  08E1  0CA1               	rrf	__tdiv_to_l_@quot+1,f
  8959  08E2  0CA0               	rrf	__tdiv_to_l_@quot,f
  8960  08E3  0B89               	decfsz	9,f
  8961  08E4  28DF               	goto	u3335
  8962  08E5  3001               	movlw	1
  8963  08E6  00F6               	movwf	??__tdiv_to_l_
  8964  08E7  0876               	movf	??__tdiv_to_l_,w
  8965  08E8  07A5               	addwf	__tdiv_to_l_@exp1,f
  8966  08E9  1903               	btfsc	3,2
  8967  08EA  2905               	goto	l2784
  8968  08EB  28DE               	goto	l2774
  8969  08EC                     l2776:	
  8970  08EC  3018               	movlw	24
  8971  08ED  0225               	subwf	__tdiv_to_l_@exp1,w
  8972  08EE  1C03               	skipc
  8973  08EF  2902               	goto	l716
  8974  08F0  3000               	movlw	0
  8975  08F1  00F3               	movwf	?__tdiv_to_l_+3
  8976  08F2  3000               	movlw	0
  8977  08F3  00F2               	movwf	?__tdiv_to_l_+2
  8978  08F4  3000               	movlw	0
  8979  08F5  00F1               	movwf	?__tdiv_to_l_+1
  8980  08F6  3000               	movlw	0
  8981  08F7  00F0               	movwf	?__tdiv_to_l_
  8982  08F8  0008               	return
  8983  08F9                     l2782:	
  8984  08F9  3001               	movlw	1
  8985  08FA                     u3365:	
  8986  08FA  35A0               	lslf	__tdiv_to_l_@quot,f
  8987  08FB  0DA1               	rlf	__tdiv_to_l_@quot+1,f
  8988  08FC  0DA2               	rlf	__tdiv_to_l_@quot+2,f
  8989  08FD  0DA3               	rlf	__tdiv_to_l_@quot+3,f
  8990  08FE  0B89               	decfsz	9,f
  8991  08FF  28FA               	goto	u3365
  8992  0900  3001               	movlw	1
  8993  0901  02A5               	subwf	__tdiv_to_l_@exp1,f
  8994  0902                     l716:	
  8995  0902  0825               	movf	__tdiv_to_l_@exp1,w
  8996  0903  1D03               	btfss	3,2
  8997  0904  28F9               	goto	l2782
  8998  0905                     l2784:	
  8999  0905  0823               	movf	__tdiv_to_l_@quot+3,w
  9000  0906  00F3               	movwf	?__tdiv_to_l_+3
  9001  0907  0822               	movf	__tdiv_to_l_@quot+2,w
  9002  0908  00F2               	movwf	?__tdiv_to_l_+2
  9003  0909  0821               	movf	__tdiv_to_l_@quot+1,w
  9004  090A  00F1               	movwf	?__tdiv_to_l_+1
  9005  090B  0820               	movf	__tdiv_to_l_@quot,w
  9006  090C  00F0               	movwf	?__tdiv_to_l_
  9007  090D  0008               	return
  9008  090E                     __end_of__tdiv_to_l_:	
  9009                           
  9010                           	psect	text8
  9011  0A04                     __ptext8:	
  9012 ;; *************** function __div_to_l_ *****************
  9013 ;; Defined at:
  9014 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\fldivl.c"
  9015 ;; Parameters:    Size  Location     Type
  9016 ;;  f1              3    0[COMMON] unsigned long 
  9017 ;;  f2              3    3[COMMON] unsigned long 
  9018 ;; Auto vars:     Size  Location     Type
  9019 ;;  quot            4    0[BANK0 ] unsigned long 
  9020 ;;  exp1            1    5[BANK0 ] unsigned char 
  9021 ;;  cntr            1    4[BANK0 ] unsigned char 
  9022 ;; Return value:  Size  Location     Type
  9023 ;;                  4    0[COMMON] unsigned long 
  9024 ;; Registers used:
  9025 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9026 ;; Tracked objects:
  9027 ;;		On entry : 0/0
  9028 ;;		On exit  : 0/0
  9029 ;;		Unchanged: 0/0
  9030 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9031 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9032 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9033 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9034 ;;      Totals:        14       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9035 ;;Total ram usage:       20 bytes
  9036 ;; Hardware stack levels used:    1
  9037 ;; This function calls:
  9038 ;;		Nothing
  9039 ;; This function is called by:
  9040 ;;		_sprintf
  9041 ;; This function uses a non-reentrant model
  9042 ;;
  9043                           
  9044                           
  9045                           ;psect for function __div_to_l_
  9046  0A04                     __div_to_l_:	
  9047                           
  9048                           ;incstack = 0
  9049                           ; Regs used in __div_to_l_: [wreg+fsr1l+fsr1h+status,2+status,0]
  9050  0A04  3070               	movlw	low (__div_to_l_@f1| 0)
  9051  0A05  0086               	movwf	6
  9052  0A06  0187               	clrf	7
  9053  0A07  3F40               	moviw [0]fsr1
  9054  0A08  00F6               	movwf	??__div_to_l_
  9055  0A09  3F41               	moviw [1]fsr1
  9056  0A0A  00F7               	movwf	??__div_to_l_+1
  9057  0A0B  3F42               	moviw [2]fsr1
  9058  0A0C  00F8               	movwf	??__div_to_l_+2
  9059  0A0D  3F43               	moviw [3]fsr1
  9060  0A0E  00F9               	movwf	??__div_to_l_+3
  9061  0A0F  1003               	clrc
  9062  0A10  0D78               	rlf	??__div_to_l_+2,w
  9063  0A11  0D79               	rlf	??__div_to_l_+3,w
  9064  0A12  00FA               	movwf	??__div_to_l_+4
  9065  0A13  087A               	movf	??__div_to_l_+4,w
  9066  0A14  0020               	movlb	0	; select bank0
  9067  0A15  00A5               	movwf	__div_to_l_@exp1
  9068  0A16  0825               	movf	__div_to_l_@exp1,w
  9069  0A17  1D03               	btfss	3,2
  9070  0A18  2A22               	goto	l2794
  9071  0A19  3000               	movlw	0
  9072  0A1A  00F3               	movwf	?__div_to_l_+3
  9073  0A1B  3000               	movlw	0
  9074  0A1C  00F2               	movwf	?__div_to_l_+2
  9075  0A1D  3000               	movlw	0
  9076  0A1E  00F1               	movwf	?__div_to_l_+1
  9077  0A1F  3000               	movlw	0
  9078  0A20  00F0               	movwf	?__div_to_l_
  9079  0A21  0008               	return
  9080  0A22                     l2794:	
  9081  0A22  3073               	movlw	low (__div_to_l_@f2| 0)
  9082  0A23  0086               	movwf	6
  9083  0A24  0187               	clrf	7
  9084  0A25  3F40               	moviw [0]fsr1
  9085  0A26  00F6               	movwf	??__div_to_l_
  9086  0A27  3F41               	moviw [1]fsr1
  9087  0A28  00F7               	movwf	??__div_to_l_+1
  9088  0A29  3F42               	moviw [2]fsr1
  9089  0A2A  00F8               	movwf	??__div_to_l_+2
  9090  0A2B  3F43               	moviw [3]fsr1
  9091  0A2C  00F9               	movwf	??__div_to_l_+3
  9092  0A2D  1003               	clrc
  9093  0A2E  0D78               	rlf	??__div_to_l_+2,w
  9094  0A2F  0D79               	rlf	??__div_to_l_+3,w
  9095  0A30  00FA               	movwf	??__div_to_l_+4
  9096  0A31  087A               	movf	??__div_to_l_+4,w
  9097  0A32  00A4               	movwf	__div_to_l_@cntr
  9098  0A33  0824               	movf	__div_to_l_@cntr,w
  9099  0A34  1D03               	btfss	3,2
  9100  0A35  2A3F               	goto	l2800
  9101  0A36  3000               	movlw	0
  9102  0A37  00F3               	movwf	?__div_to_l_+3
  9103  0A38  3000               	movlw	0
  9104  0A39  00F2               	movwf	?__div_to_l_+2
  9105  0A3A  3000               	movlw	0
  9106  0A3B  00F1               	movwf	?__div_to_l_+1
  9107  0A3C  3000               	movlw	0
  9108  0A3D  00F0               	movwf	?__div_to_l_
  9109  0A3E  0008               	return
  9110  0A3F                     l2800:	
  9111  0A3F  3070               	movlw	low (__div_to_l_@f1| 0)
  9112  0A40  0086               	movwf	6
  9113  0A41  0187               	clrf	7
  9114  0A42  3000               	movlw	0
  9115  0A43  0481               	iorwf	1,f
  9116  0A44  3141               	addfsr 1,1
  9117  0A45  3000               	movlw	0
  9118  0A46  0481               	iorwf	1,f
  9119  0A47  3141               	addfsr 1,1
  9120  0A48  3080               	movlw	128
  9121  0A49  0481               	iorwf	1,f
  9122  0A4A  3141               	addfsr 1,1
  9123  0A4B  3000               	movlw	0
  9124  0A4C  0481               	iorwf	1,f
  9125  0A4D  3070               	movlw	low (__div_to_l_@f1| 0)
  9126  0A4E  0086               	movwf	6
  9127  0A4F  0187               	clrf	7
  9128  0A50  30FF               	movlw	255
  9129  0A51  0581               	andwf	1,f
  9130  0A52  3141               	addfsr 1,1
  9131  0A53  30FF               	movlw	255
  9132  0A54  0581               	andwf	1,f
  9133  0A55  3141               	addfsr 1,1
  9134  0A56  30FF               	movlw	255
  9135  0A57  0581               	andwf	1,f
  9136  0A58  3141               	addfsr 1,1
  9137  0A59  3000               	movlw	0
  9138  0A5A  0581               	andwf	1,f
  9139  0A5B  3073               	movlw	low (__div_to_l_@f2| 0)
  9140  0A5C  0086               	movwf	6
  9141  0A5D  0187               	clrf	7
  9142  0A5E  3000               	movlw	0
  9143  0A5F  0481               	iorwf	1,f
  9144  0A60  3141               	addfsr 1,1
  9145  0A61  3000               	movlw	0
  9146  0A62  0481               	iorwf	1,f
  9147  0A63  3141               	addfsr 1,1
  9148  0A64  3080               	movlw	128
  9149  0A65  0481               	iorwf	1,f
  9150  0A66  3141               	addfsr 1,1
  9151  0A67  3000               	movlw	0
  9152  0A68  0481               	iorwf	1,f
  9153  0A69  3073               	movlw	low (__div_to_l_@f2| 0)
  9154  0A6A  0086               	movwf	6
  9155  0A6B  0187               	clrf	7
  9156  0A6C  30FF               	movlw	255
  9157  0A6D  0581               	andwf	1,f
  9158  0A6E  3141               	addfsr 1,1
  9159  0A6F  30FF               	movlw	255
  9160  0A70  0581               	andwf	1,f
  9161  0A71  3141               	addfsr 1,1
  9162  0A72  30FF               	movlw	255
  9163  0A73  0581               	andwf	1,f
  9164  0A74  3141               	addfsr 1,1
  9165  0A75  3000               	movlw	0
  9166  0A76  0581               	andwf	1,f
  9167  0A77  3000               	movlw	0
  9168  0A78  00A3               	movwf	__div_to_l_@quot+3
  9169  0A79  3000               	movlw	0
  9170  0A7A  00A2               	movwf	__div_to_l_@quot+2
  9171  0A7B  3000               	movlw	0
  9172  0A7C  00A1               	movwf	__div_to_l_@quot+1
  9173  0A7D  3000               	movlw	0
  9174  0A7E  00A0               	movwf	__div_to_l_@quot
  9175  0A7F  307F               	movlw	127
  9176  0A80  02A5               	subwf	__div_to_l_@exp1,f
  9177  0A81  30A0               	movlw	160
  9178  0A82  0724               	addwf	__div_to_l_@cntr,w
  9179  0A83  00F6               	movwf	??__div_to_l_
  9180  0A84  0876               	movf	??__div_to_l_,w
  9181  0A85  02A5               	subwf	__div_to_l_@exp1,f
  9182  0A86  3020               	movlw	32
  9183  0A87  00F6               	movwf	??__div_to_l_
  9184  0A88  0876               	movf	??__div_to_l_,w
  9185  0A89  00A4               	movwf	__div_to_l_@cntr
  9186  0A8A                     l2810:	
  9187  0A8A  3001               	movlw	1
  9188  0A8B                     u3405:	
  9189  0A8B  35A0               	lslf	__div_to_l_@quot,f
  9190  0A8C  0DA1               	rlf	__div_to_l_@quot+1,f
  9191  0A8D  0DA2               	rlf	__div_to_l_@quot+2,f
  9192  0A8E  0DA3               	rlf	__div_to_l_@quot+3,f
  9193  0A8F  0B89               	decfsz	9,f
  9194  0A90  2A8B               	goto	u3405
  9195  0A91  3073               	movlw	low (__div_to_l_@f2| 0)
  9196  0A92  0086               	movwf	6
  9197  0A93  0187               	clrf	7
  9198  0A94  3F40               	moviw [0]fsr1
  9199  0A95  00F6               	movwf	??__div_to_l_
  9200  0A96  3F41               	moviw [1]fsr1
  9201  0A97  00F7               	movwf	??__div_to_l_+1
  9202  0A98  3F42               	moviw [2]fsr1
  9203  0A99  00F8               	movwf	??__div_to_l_+2
  9204  0A9A  3F43               	moviw [3]fsr1
  9205  0A9B  00F9               	movwf	??__div_to_l_+3
  9206  0A9C  3070               	movlw	low (__div_to_l_@f1| 0)
  9207  0A9D  0086               	movwf	6
  9208  0A9E  0187               	clrf	7
  9209  0A9F  3F40               	moviw [0]fsr1
  9210  0AA0  00FA               	movwf	??__div_to_l_+4
  9211  0AA1  3F41               	moviw [1]fsr1
  9212  0AA2  00FB               	movwf	??__div_to_l_+5
  9213  0AA3  3F42               	moviw [2]fsr1
  9214  0AA4  00FC               	movwf	??__div_to_l_+6
  9215  0AA5  3F43               	moviw [3]fsr1
  9216  0AA6  00FD               	movwf	??__div_to_l_+7
  9217  0AA7  0879               	movf	??__div_to_l_+3,w
  9218  0AA8  027D               	subwf	??__div_to_l_+7,w
  9219  0AA9  1D03               	skipz
  9220  0AAA  2AB5               	goto	u3415
  9221  0AAB  0878               	movf	??__div_to_l_+2,w
  9222  0AAC  027C               	subwf	??__div_to_l_+6,w
  9223  0AAD  1D03               	skipz
  9224  0AAE  2AB5               	goto	u3415
  9225  0AAF  0877               	movf	??__div_to_l_+1,w
  9226  0AB0  027B               	subwf	??__div_to_l_+5,w
  9227  0AB1  1D03               	skipz
  9228  0AB2  2AB5               	goto	u3415
  9229  0AB3  0876               	movf	??__div_to_l_,w
  9230  0AB4  027A               	subwf	??__div_to_l_+4,w
  9231  0AB5                     u3415:	
  9232  0AB5  1C03               	skipc
  9233  0AB6  2AD2               	goto	l2818
  9234  0AB7  3073               	movlw	low (__div_to_l_@f2| 0)
  9235  0AB8  0086               	movwf	6
  9236  0AB9  0187               	clrf	7
  9237  0ABA  3F40               	moviw [0]fsr1
  9238  0ABB  00F6               	movwf	??__div_to_l_
  9239  0ABC  3F41               	moviw [1]fsr1
  9240  0ABD  00F7               	movwf	??__div_to_l_+1
  9241  0ABE  3F42               	moviw [2]fsr1
  9242  0ABF  00F8               	movwf	??__div_to_l_+2
  9243  0AC0  3F43               	moviw [3]fsr1
  9244  0AC1  00F9               	movwf	??__div_to_l_+3
  9245  0AC2  3070               	movlw	low (__div_to_l_@f1| 0)
  9246  0AC3  0086               	movwf	6
  9247  0AC4  0187               	clrf	7
  9248  0AC5  0876               	movf	??__div_to_l_,w
  9249  0AC6  0281               	subwf	1,f
  9250  0AC7  3141               	addfsr 1,1
  9251  0AC8  0877               	movf	??__div_to_l_+1,w
  9252  0AC9  3B81               	subwfb	1,f
  9253  0ACA  3141               	addfsr 1,1
  9254  0ACB  0878               	movf	??__div_to_l_+2,w
  9255  0ACC  3B81               	subwfb	1,f
  9256  0ACD  3141               	addfsr 1,1
  9257  0ACE  0879               	movf	??__div_to_l_+3,w
  9258  0ACF  3B81               	subwfb	1,f
  9259  0AD0  317D               	addfsr 1,-3
  9260  0AD1  1420               	bsf	__div_to_l_@quot,0
  9261  0AD2                     l2818:	
  9262  0AD2  3070               	movlw	low (__div_to_l_@f1| 0)
  9263  0AD3  0086               	movwf	6
  9264  0AD4  0187               	clrf	7
  9265  0AD5  3581               	lslf	1,f
  9266  0AD6  3141               	addfsr 1,1
  9267  0AD7  0D81               	rlf	1,f
  9268  0AD8  3141               	addfsr 1,1
  9269  0AD9  0D81               	rlf	1,f
  9270  0ADA  3141               	addfsr 1,1
  9271  0ADB  0D81               	rlf	1,f
  9272  0ADC  317D               	addfsr 1,-3
  9273  0ADD  3001               	movlw	1
  9274  0ADE  02A4               	subwf	__div_to_l_@cntr,f
  9275  0ADF  1D03               	btfss	3,2
  9276  0AE0  2A8A               	goto	l2810
  9277  0AE1  1FA5               	btfss	__div_to_l_@exp1,7
  9278  0AE2  2AFF               	goto	l2830
  9279  0AE3  0825               	movf	__div_to_l_@exp1,w
  9280  0AE4  3A80               	xorlw	128
  9281  0AE5  3E9F               	addlw	159
  9282  0AE6  1803               	skipnc
  9283  0AE7  2AF1               	goto	l2828
  9284  0AE8  3000               	movlw	0
  9285  0AE9  00F3               	movwf	?__div_to_l_+3
  9286  0AEA  3000               	movlw	0
  9287  0AEB  00F2               	movwf	?__div_to_l_+2
  9288  0AEC  3000               	movlw	0
  9289  0AED  00F1               	movwf	?__div_to_l_+1
  9290  0AEE  3000               	movlw	0
  9291  0AEF  00F0               	movwf	?__div_to_l_
  9292  0AF0  0008               	return
  9293  0AF1                     l2828:	
  9294  0AF1  3001               	movlw	1
  9295  0AF2                     u3455:	
  9296  0AF2  36A3               	lsrf	__div_to_l_@quot+3,f
  9297  0AF3  0CA2               	rrf	__div_to_l_@quot+2,f
  9298  0AF4  0CA1               	rrf	__div_to_l_@quot+1,f
  9299  0AF5  0CA0               	rrf	__div_to_l_@quot,f
  9300  0AF6  0B89               	decfsz	9,f
  9301  0AF7  2AF2               	goto	u3455
  9302  0AF8  3001               	movlw	1
  9303  0AF9  00F6               	movwf	??__div_to_l_
  9304  0AFA  0876               	movf	??__div_to_l_,w
  9305  0AFB  07A5               	addwf	__div_to_l_@exp1,f
  9306  0AFC  1903               	btfsc	3,2
  9307  0AFD  2B18               	goto	l2838
  9308  0AFE  2AF1               	goto	l2828
  9309  0AFF                     l2830:	
  9310  0AFF  3020               	movlw	32
  9311  0B00  0225               	subwf	__div_to_l_@exp1,w
  9312  0B01  1C03               	skipc
  9313  0B02  2B15               	goto	l637
  9314  0B03  3000               	movlw	0
  9315  0B04  00F3               	movwf	?__div_to_l_+3
  9316  0B05  3000               	movlw	0
  9317  0B06  00F2               	movwf	?__div_to_l_+2
  9318  0B07  3000               	movlw	0
  9319  0B08  00F1               	movwf	?__div_to_l_+1
  9320  0B09  3000               	movlw	0
  9321  0B0A  00F0               	movwf	?__div_to_l_
  9322  0B0B  0008               	return
  9323  0B0C                     l2836:	
  9324  0B0C  3001               	movlw	1
  9325  0B0D                     u3485:	
  9326  0B0D  35A0               	lslf	__div_to_l_@quot,f
  9327  0B0E  0DA1               	rlf	__div_to_l_@quot+1,f
  9328  0B0F  0DA2               	rlf	__div_to_l_@quot+2,f
  9329  0B10  0DA3               	rlf	__div_to_l_@quot+3,f
  9330  0B11  0B89               	decfsz	9,f
  9331  0B12  2B0D               	goto	u3485
  9332  0B13  3001               	movlw	1
  9333  0B14  02A5               	subwf	__div_to_l_@exp1,f
  9334  0B15                     l637:	
  9335  0B15  0825               	movf	__div_to_l_@exp1,w
  9336  0B16  1D03               	btfss	3,2
  9337  0B17  2B0C               	goto	l2836
  9338  0B18                     l2838:	
  9339  0B18  0823               	movf	__div_to_l_@quot+3,w
  9340  0B19  00F3               	movwf	?__div_to_l_+3
  9341  0B1A  0822               	movf	__div_to_l_@quot+2,w
  9342  0B1B  00F2               	movwf	?__div_to_l_+2
  9343  0B1C  0821               	movf	__div_to_l_@quot+1,w
  9344  0B1D  00F1               	movwf	?__div_to_l_+1
  9345  0B1E  0820               	movf	__div_to_l_@quot,w
  9346  0B1F  00F0               	movwf	?__div_to_l_
  9347  0B20  0008               	return
  9348  0B21                     __end_of__div_to_l_:	
  9349                           
  9350                           	psect	text9
  9351  11C1                     __ptext9:	
  9352 ;; *************** function ___lltoft *****************
  9353 ;; Defined at:
  9354 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lltoft.c"
  9355 ;; Parameters:    Size  Location     Type
  9356 ;;  c               4    8[COMMON] unsigned long 
  9357 ;; Auto vars:     Size  Location     Type
  9358 ;;  exp             1   13[COMMON] unsigned char 
  9359 ;; Return value:  Size  Location     Type
  9360 ;;                  3    8[COMMON] float 
  9361 ;; Registers used:
  9362 ;;		wreg, status,2, status,0, pclath, cstack
  9363 ;; Tracked objects:
  9364 ;;		On entry : 0/0
  9365 ;;		On exit  : 0/0
  9366 ;;		Unchanged: 0/0
  9367 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9368 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9369 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9370 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9371 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9372 ;;Total ram usage:        6 bytes
  9373 ;; Hardware stack levels used:    1
  9374 ;; Hardware stack levels required when called:    1
  9375 ;; This function calls:
  9376 ;;		___ftpack
  9377 ;; This function is called by:
  9378 ;;		_sprintf
  9379 ;; This function uses a non-reentrant model
  9380 ;;
  9381                           
  9382                           
  9383                           ;psect for function ___lltoft
  9384  11C1                     ___lltoft:	
  9385                           
  9386                           ;incstack = 0
  9387                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  9388  11C1  308E               	movlw	142
  9389  11C2  00FC               	movwf	??___lltoft
  9390  11C3  087C               	movf	??___lltoft,w
  9391  11C4  00FD               	movwf	___lltoft@exp
  9392  11C5                     l2980:	
  9393  11C5  30FF               	movlw	255
  9394  11C6  057B               	andwf	___lltoft@c+3,w
  9395  11C7  1903               	btfsc	3,2
  9396  11C8  29D5               	goto	l2982
  9397  11C9  3001               	movlw	1
  9398  11CA                     u3795:	
  9399  11CA  36FB               	lsrf	___lltoft@c+3,f
  9400  11CB  0CFA               	rrf	___lltoft@c+2,f
  9401  11CC  0CF9               	rrf	___lltoft@c+1,f
  9402  11CD  0CF8               	rrf	___lltoft@c,f
  9403  11CE  0B89               	decfsz	9,f
  9404  11CF  29CA               	goto	u3795
  9405  11D0  3001               	movlw	1
  9406  11D1  00FC               	movwf	??___lltoft
  9407  11D2  087C               	movf	??___lltoft,w
  9408  11D3  07FD               	addwf	___lltoft@exp,f
  9409  11D4  29C5               	goto	l2980
  9410  11D5                     l2982:	
  9411  11D5  0878               	movf	___lltoft@c,w
  9412  11D6  00F0               	movwf	___ftpack@arg
  9413  11D7  0879               	movf	___lltoft@c+1,w
  9414  11D8  00F1               	movwf	___ftpack@arg+1
  9415  11D9  087A               	movf	___lltoft@c+2,w
  9416  11DA  00F2               	movwf	___ftpack@arg+2
  9417  11DB  087D               	movf	___lltoft@exp,w
  9418  11DC  00FC               	movwf	??___lltoft
  9419  11DD  087C               	movf	??___lltoft,w
  9420  11DE  00F3               	movwf	___ftpack@exp
  9421  11DF  01F4               	clrf	___ftpack@sign
  9422  11E0  3180  200C         	fcall	___ftpack
  9423  11E2  0870               	movf	?___ftpack,w
  9424  11E3  00F8               	movwf	?___lltoft
  9425  11E4  0871               	movf	?___ftpack+1,w
  9426  11E5  00F9               	movwf	?___lltoft+1
  9427  11E6  0872               	movf	?___ftpack+2,w
  9428  11E7  00FA               	movwf	?___lltoft+2
  9429  11E8  0008               	return
  9430  11E9                     __end_of___lltoft:	
  9431                           
  9432                           	psect	text10
  9433  12BA                     __ptext10:	
  9434 ;; *************** function ___llmod *****************
  9435 ;; Defined at:
  9436 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\llmod.c"
  9437 ;; Parameters:    Size  Location     Type
  9438 ;;  divisor         4    0[COMMON] unsigned long 
  9439 ;;  dividend        4    4[COMMON] unsigned long 
  9440 ;; Auto vars:     Size  Location     Type
  9441 ;;  counter         1    9[COMMON] unsigned char 
  9442 ;; Return value:  Size  Location     Type
  9443 ;;                  4    0[COMMON] unsigned long 
  9444 ;; Registers used:
  9445 ;;		wreg, status,2, status,0
  9446 ;; Tracked objects:
  9447 ;;		On entry : 0/0
  9448 ;;		On exit  : 0/0
  9449 ;;		Unchanged: 0/0
  9450 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9451 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9452 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9453 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9454 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9455 ;;Total ram usage:       10 bytes
  9456 ;; Hardware stack levels used:    1
  9457 ;; This function calls:
  9458 ;;		Nothing
  9459 ;; This function is called by:
  9460 ;;		_sprintf
  9461 ;; This function uses a non-reentrant model
  9462 ;;
  9463                           
  9464                           
  9465                           ;psect for function ___llmod
  9466  12BA                     ___llmod:	
  9467                           
  9468                           ;incstack = 0
  9469                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  9470  12BA  0873               	movf	___llmod@divisor+3,w
  9471  12BB  0472               	iorwf	___llmod@divisor+2,w
  9472  12BC  0471               	iorwf	___llmod@divisor+1,w
  9473  12BD  0470               	iorwf	___llmod@divisor,w
  9474  12BE  1903               	skipnz
  9475  12BF  2AF3               	goto	l2972
  9476  12C0  01F9               	clrf	___llmod@counter
  9477  12C1  0AF9               	incf	___llmod@counter,f
  9478  12C2                     l2962:	
  9479  12C2  1BF3               	btfsc	___llmod@divisor+3,7
  9480  12C3  2AD0               	goto	l2964
  9481  12C4  3001               	movlw	1
  9482  12C5                     u3745:	
  9483  12C5  35F0               	lslf	___llmod@divisor,f
  9484  12C6  0DF1               	rlf	___llmod@divisor+1,f
  9485  12C7  0DF2               	rlf	___llmod@divisor+2,f
  9486  12C8  0DF3               	rlf	___llmod@divisor+3,f
  9487  12C9  0B89               	decfsz	9,f
  9488  12CA  2AC5               	goto	u3745
  9489  12CB  3001               	movlw	1
  9490  12CC  00F8               	movwf	??___llmod
  9491  12CD  0878               	movf	??___llmod,w
  9492  12CE  07F9               	addwf	___llmod@counter,f
  9493  12CF  2AC2               	goto	l2962
  9494  12D0                     l2964:	
  9495  12D0  0873               	movf	___llmod@divisor+3,w
  9496  12D1  0277               	subwf	___llmod@dividend+3,w
  9497  12D2  1D03               	skipz
  9498  12D3  2ADE               	goto	u3765
  9499  12D4  0872               	movf	___llmod@divisor+2,w
  9500  12D5  0276               	subwf	___llmod@dividend+2,w
  9501  12D6  1D03               	skipz
  9502  12D7  2ADE               	goto	u3765
  9503  12D8  0871               	movf	___llmod@divisor+1,w
  9504  12D9  0275               	subwf	___llmod@dividend+1,w
  9505  12DA  1D03               	skipz
  9506  12DB  2ADE               	goto	u3765
  9507  12DC  0870               	movf	___llmod@divisor,w
  9508  12DD  0274               	subwf	___llmod@dividend,w
  9509  12DE                     u3765:	
  9510  12DE  1C03               	skipc
  9511  12DF  2AE8               	goto	l2968
  9512  12E0  0870               	movf	___llmod@divisor,w
  9513  12E1  02F4               	subwf	___llmod@dividend,f
  9514  12E2  0871               	movf	___llmod@divisor+1,w
  9515  12E3  3BF5               	subwfb	___llmod@dividend+1,f
  9516  12E4  0872               	movf	___llmod@divisor+2,w
  9517  12E5  3BF6               	subwfb	___llmod@dividend+2,f
  9518  12E6  0873               	movf	___llmod@divisor+3,w
  9519  12E7  3BF7               	subwfb	___llmod@dividend+3,f
  9520  12E8                     l2968:	
  9521  12E8  3001               	movlw	1
  9522  12E9                     u3775:	
  9523  12E9  36F3               	lsrf	___llmod@divisor+3,f
  9524  12EA  0CF2               	rrf	___llmod@divisor+2,f
  9525  12EB  0CF1               	rrf	___llmod@divisor+1,f
  9526  12EC  0CF0               	rrf	___llmod@divisor,f
  9527  12ED  0B89               	decfsz	9,f
  9528  12EE  2AE9               	goto	u3775
  9529  12EF  3001               	movlw	1
  9530  12F0  02F9               	subwf	___llmod@counter,f
  9531  12F1  1D03               	btfss	3,2
  9532  12F2  2AD0               	goto	l2964
  9533  12F3                     l2972:	
  9534  12F3  0877               	movf	___llmod@dividend+3,w
  9535  12F4  00F3               	movwf	?___llmod+3
  9536  12F5  0876               	movf	___llmod@dividend+2,w
  9537  12F6  00F2               	movwf	?___llmod+2
  9538  12F7  0875               	movf	___llmod@dividend+1,w
  9539  12F8  00F1               	movwf	?___llmod+1
  9540  12F9  0874               	movf	___llmod@dividend,w
  9541  12FA  00F0               	movwf	?___llmod
  9542  12FB  0008               	return
  9543  12FC                     __end_of___llmod:	
  9544                           
  9545                           	psect	text11
  9546  1341                     __ptext11:	
  9547 ;; *************** function ___lldiv *****************
  9548 ;; Defined at:
  9549 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lldiv.c"
  9550 ;; Parameters:    Size  Location     Type
  9551 ;;  divisor         4    0[COMMON] unsigned long 
  9552 ;;  dividend        4    4[COMMON] unsigned long 
  9553 ;; Auto vars:     Size  Location     Type
  9554 ;;  quotient        4    9[COMMON] unsigned long 
  9555 ;;  counter         1   13[COMMON] unsigned char 
  9556 ;; Return value:  Size  Location     Type
  9557 ;;                  4    0[COMMON] unsigned long 
  9558 ;; Registers used:
  9559 ;;		wreg, status,2, status,0
  9560 ;; Tracked objects:
  9561 ;;		On entry : 0/0
  9562 ;;		On exit  : 0/0
  9563 ;;		Unchanged: 0/0
  9564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9565 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9566 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9567 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9568 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9569 ;;Total ram usage:       14 bytes
  9570 ;; Hardware stack levels used:    1
  9571 ;; This function calls:
  9572 ;;		Nothing
  9573 ;; This function is called by:
  9574 ;;		_sprintf
  9575 ;; This function uses a non-reentrant model
  9576 ;;
  9577                           
  9578                           
  9579                           ;psect for function ___lldiv
  9580  1341                     ___lldiv:	
  9581                           
  9582                           ;incstack = 0
  9583                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  9584  1341  3000               	movlw	0
  9585  1342  00FC               	movwf	___lldiv@quotient+3
  9586  1343  3000               	movlw	0
  9587  1344  00FB               	movwf	___lldiv@quotient+2
  9588  1345  3000               	movlw	0
  9589  1346  00FA               	movwf	___lldiv@quotient+1
  9590  1347  3000               	movlw	0
  9591  1348  00F9               	movwf	___lldiv@quotient
  9592  1349  0873               	movf	___lldiv@divisor+3,w
  9593  134A  0472               	iorwf	___lldiv@divisor+2,w
  9594  134B  0471               	iorwf	___lldiv@divisor+1,w
  9595  134C  0470               	iorwf	___lldiv@divisor,w
  9596  134D  1903               	skipnz
  9597  134E  2B8A               	goto	l2952
  9598  134F  01FD               	clrf	___lldiv@counter
  9599  1350  0AFD               	incf	___lldiv@counter,f
  9600  1351                     l2938:	
  9601  1351  1BF3               	btfsc	___lldiv@divisor+3,7
  9602  1352  2B5F               	goto	l2940
  9603  1353  3001               	movlw	1
  9604  1354                     u3675:	
  9605  1354  35F0               	lslf	___lldiv@divisor,f
  9606  1355  0DF1               	rlf	___lldiv@divisor+1,f
  9607  1356  0DF2               	rlf	___lldiv@divisor+2,f
  9608  1357  0DF3               	rlf	___lldiv@divisor+3,f
  9609  1358  0B89               	decfsz	9,f
  9610  1359  2B54               	goto	u3675
  9611  135A  3001               	movlw	1
  9612  135B  00F8               	movwf	??___lldiv
  9613  135C  0878               	movf	??___lldiv,w
  9614  135D  07FD               	addwf	___lldiv@counter,f
  9615  135E  2B51               	goto	l2938
  9616  135F                     l2940:	
  9617  135F  3001               	movlw	1
  9618  1360                     u3695:	
  9619  1360  35F9               	lslf	___lldiv@quotient,f
  9620  1361  0DFA               	rlf	___lldiv@quotient+1,f
  9621  1362  0DFB               	rlf	___lldiv@quotient+2,f
  9622  1363  0DFC               	rlf	___lldiv@quotient+3,f
  9623  1364  0B89               	decfsz	9,f
  9624  1365  2B60               	goto	u3695
  9625  1366  0873               	movf	___lldiv@divisor+3,w
  9626  1367  0277               	subwf	___lldiv@dividend+3,w
  9627  1368  1D03               	skipz
  9628  1369  2B74               	goto	u3705
  9629  136A  0872               	movf	___lldiv@divisor+2,w
  9630  136B  0276               	subwf	___lldiv@dividend+2,w
  9631  136C  1D03               	skipz
  9632  136D  2B74               	goto	u3705
  9633  136E  0871               	movf	___lldiv@divisor+1,w
  9634  136F  0275               	subwf	___lldiv@dividend+1,w
  9635  1370  1D03               	skipz
  9636  1371  2B74               	goto	u3705
  9637  1372  0870               	movf	___lldiv@divisor,w
  9638  1373  0274               	subwf	___lldiv@dividend,w
  9639  1374                     u3705:	
  9640  1374  1C03               	skipc
  9641  1375  2B7F               	goto	l2948
  9642  1376  0870               	movf	___lldiv@divisor,w
  9643  1377  02F4               	subwf	___lldiv@dividend,f
  9644  1378  0871               	movf	___lldiv@divisor+1,w
  9645  1379  3BF5               	subwfb	___lldiv@dividend+1,f
  9646  137A  0872               	movf	___lldiv@divisor+2,w
  9647  137B  3BF6               	subwfb	___lldiv@dividend+2,f
  9648  137C  0873               	movf	___lldiv@divisor+3,w
  9649  137D  3BF7               	subwfb	___lldiv@dividend+3,f
  9650  137E  1479               	bsf	___lldiv@quotient,0
  9651  137F                     l2948:	
  9652  137F  3001               	movlw	1
  9653  1380                     u3715:	
  9654  1380  36F3               	lsrf	___lldiv@divisor+3,f
  9655  1381  0CF2               	rrf	___lldiv@divisor+2,f
  9656  1382  0CF1               	rrf	___lldiv@divisor+1,f
  9657  1383  0CF0               	rrf	___lldiv@divisor,f
  9658  1384  0B89               	decfsz	9,f
  9659  1385  2B80               	goto	u3715
  9660  1386  3001               	movlw	1
  9661  1387  02FD               	subwf	___lldiv@counter,f
  9662  1388  1D03               	btfss	3,2
  9663  1389  2B5F               	goto	l2940
  9664  138A                     l2952:	
  9665  138A  087C               	movf	___lldiv@quotient+3,w
  9666  138B  00F3               	movwf	?___lldiv+3
  9667  138C  087B               	movf	___lldiv@quotient+2,w
  9668  138D  00F2               	movwf	?___lldiv+2
  9669  138E  087A               	movf	___lldiv@quotient+1,w
  9670  138F  00F1               	movwf	?___lldiv+1
  9671  1390  0879               	movf	___lldiv@quotient,w
  9672  1391  00F0               	movwf	?___lldiv
  9673  1392  0008               	return
  9674  1393                     __end_of___lldiv:	
  9675                           
  9676                           	psect	text12
  9677  156F                     __ptext12:	
  9678 ;; *************** function ___fttol *****************
  9679 ;; Defined at:
  9680 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\fttol.c"
  9681 ;; Parameters:    Size  Location     Type
  9682 ;;  f1              3   33[BANK0 ] float 
  9683 ;; Auto vars:     Size  Location     Type
  9684 ;;  lval            4   42[BANK0 ] unsigned long 
  9685 ;;  exp1            1   46[BANK0 ] unsigned char 
  9686 ;;  sign1           1   41[BANK0 ] unsigned char 
  9687 ;; Return value:  Size  Location     Type
  9688 ;;                  4   33[BANK0 ] long 
  9689 ;; Registers used:
  9690 ;;		wreg, status,2, status,0
  9691 ;; Tracked objects:
  9692 ;;		On entry : 0/0
  9693 ;;		On exit  : 0/0
  9694 ;;		Unchanged: 0/0
  9695 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9696 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9697 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9698 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9699 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9700 ;;Total ram usage:       14 bytes
  9701 ;; Hardware stack levels used:    1
  9702 ;; This function calls:
  9703 ;;		Nothing
  9704 ;; This function is called by:
  9705 ;;		_sprintf
  9706 ;; This function uses a non-reentrant model
  9707 ;;
  9708                           
  9709                           
  9710                           ;psect for function ___fttol
  9711  156F                     ___fttol:	
  9712                           
  9713                           ;incstack = 0
  9714                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  9715  156F  0020               	movlb	0	; select bank0
  9716  1570  0841               	movf	___fttol@f1,w
  9717  1571  00C5               	movwf	??___fttol
  9718  1572  0842               	movf	___fttol@f1+1,w
  9719  1573  00C6               	movwf	??___fttol+1
  9720  1574  0843               	movf	___fttol@f1+2,w
  9721  1575  00C7               	movwf	??___fttol+2
  9722  1576  1003               	clrc
  9723  1577  0D46               	rlf	??___fttol+1,w
  9724  1578  0D47               	rlf	??___fttol+2,w
  9725  1579  00C8               	movwf	??___fttol+3
  9726  157A  0848               	movf	??___fttol+3,w
  9727  157B  00CE               	movwf	___fttol@exp1
  9728  157C  084E               	movf	___fttol@exp1,w
  9729  157D  1D03               	btfss	3,2
  9730  157E  2D88               	goto	l2896
  9731  157F  3000               	movlw	0
  9732  1580  00C4               	movwf	?___fttol+3
  9733  1581  3000               	movlw	0
  9734  1582  00C3               	movwf	?___fttol+2
  9735  1583  3000               	movlw	0
  9736  1584  00C2               	movwf	?___fttol+1
  9737  1585  3000               	movlw	0
  9738  1586  00C1               	movwf	?___fttol
  9739  1587  0008               	return
  9740  1588                     l2896:	
  9741  1588  0841               	movf	___fttol@f1,w
  9742  1589  00C5               	movwf	??___fttol
  9743  158A  0842               	movf	___fttol@f1+1,w
  9744  158B  00C6               	movwf	??___fttol+1
  9745  158C  0843               	movf	___fttol@f1+2,w
  9746  158D  00C7               	movwf	??___fttol+2
  9747  158E  3017               	movlw	23
  9748  158F                     u3575:	
  9749  158F  36C7               	lsrf	??___fttol+2,f
  9750  1590  0CC6               	rrf	??___fttol+1,f
  9751  1591  0CC5               	rrf	??___fttol,f
  9752  1592  0B89               	decfsz	9,f
  9753  1593  2D8F               	goto	u3575
  9754  1594  0845               	movf	??___fttol,w
  9755  1595  00C8               	movwf	??___fttol+3
  9756  1596  0848               	movf	??___fttol+3,w
  9757  1597  00C9               	movwf	___fttol@sign1
  9758  1598  17C2               	bsf	___fttol@f1+1,7
  9759  1599  30FF               	movlw	255
  9760  159A  05C1               	andwf	___fttol@f1,f
  9761  159B  30FF               	movlw	255
  9762  159C  05C2               	andwf	___fttol@f1+1,f
  9763  159D  3000               	movlw	0
  9764  159E  05C3               	andwf	___fttol@f1+2,f
  9765  159F  0841               	movf	___fttol@f1,w
  9766  15A0  00CA               	movwf	___fttol@lval
  9767  15A1  0842               	movf	___fttol@f1+1,w
  9768  15A2  00CB               	movwf	___fttol@lval+1
  9769  15A3  0843               	movf	___fttol@f1+2,w
  9770  15A4  00CC               	movwf	___fttol@lval+2
  9771  15A5  01CD               	clrf	___fttol@lval+3
  9772  15A6  308E               	movlw	142
  9773  15A7  02CE               	subwf	___fttol@exp1,f
  9774  15A8  1FCE               	btfss	___fttol@exp1,7
  9775  15A9  2DC6               	goto	l2916
  9776  15AA  084E               	movf	___fttol@exp1,w
  9777  15AB  3A80               	xorlw	128
  9778  15AC  3E8F               	addlw	143
  9779  15AD  1803               	skipnc
  9780  15AE  2DB8               	goto	l2914
  9781  15AF  3000               	movlw	0
  9782  15B0  00C4               	movwf	?___fttol+3
  9783  15B1  3000               	movlw	0
  9784  15B2  00C3               	movwf	?___fttol+2
  9785  15B3  3000               	movlw	0
  9786  15B4  00C2               	movwf	?___fttol+1
  9787  15B5  3000               	movlw	0
  9788  15B6  00C1               	movwf	?___fttol
  9789  15B7  0008               	return
  9790  15B8                     l2914:	
  9791  15B8  3001               	movlw	1
  9792  15B9                     u3605:	
  9793  15B9  36CD               	lsrf	___fttol@lval+3,f
  9794  15BA  0CCC               	rrf	___fttol@lval+2,f
  9795  15BB  0CCB               	rrf	___fttol@lval+1,f
  9796  15BC  0CCA               	rrf	___fttol@lval,f
  9797  15BD  0B89               	decfsz	9,f
  9798  15BE  2DB9               	goto	u3605
  9799  15BF  3001               	movlw	1
  9800  15C0  00C5               	movwf	??___fttol
  9801  15C1  0845               	movf	??___fttol,w
  9802  15C2  07CE               	addwf	___fttol@exp1,f
  9803  15C3  1903               	btfsc	3,2
  9804  15C4  2DDF               	goto	l2924
  9805  15C5  2DB8               	goto	l2914
  9806  15C6                     l2916:	
  9807  15C6  3018               	movlw	24
  9808  15C7  024E               	subwf	___fttol@exp1,w
  9809  15C8  1C03               	skipc
  9810  15C9  2DDC               	goto	l757
  9811  15CA  3000               	movlw	0
  9812  15CB  00C4               	movwf	?___fttol+3
  9813  15CC  3000               	movlw	0
  9814  15CD  00C3               	movwf	?___fttol+2
  9815  15CE  3000               	movlw	0
  9816  15CF  00C2               	movwf	?___fttol+1
  9817  15D0  3000               	movlw	0
  9818  15D1  00C1               	movwf	?___fttol
  9819  15D2  0008               	return
  9820  15D3                     l2922:	
  9821  15D3  3001               	movlw	1
  9822  15D4                     u3635:	
  9823  15D4  35CA               	lslf	___fttol@lval,f
  9824  15D5  0DCB               	rlf	___fttol@lval+1,f
  9825  15D6  0DCC               	rlf	___fttol@lval+2,f
  9826  15D7  0DCD               	rlf	___fttol@lval+3,f
  9827  15D8  0B89               	decfsz	9,f
  9828  15D9  2DD4               	goto	u3635
  9829  15DA  3001               	movlw	1
  9830  15DB  02CE               	subwf	___fttol@exp1,f
  9831  15DC                     l757:	
  9832  15DC  084E               	movf	___fttol@exp1,w
  9833  15DD  1D03               	btfss	3,2
  9834  15DE  2DD3               	goto	l2922
  9835  15DF                     l2924:	
  9836  15DF  0849               	movf	___fttol@sign1,w
  9837  15E0  1903               	btfsc	3,2
  9838  15E1  2DED               	goto	l2928
  9839  15E2  09CA               	comf	___fttol@lval,f
  9840  15E3  09CB               	comf	___fttol@lval+1,f
  9841  15E4  09CC               	comf	___fttol@lval+2,f
  9842  15E5  09CD               	comf	___fttol@lval+3,f
  9843  15E6  0ACA               	incf	___fttol@lval,f
  9844  15E7  1903               	skipnz
  9845  15E8  0ACB               	incf	___fttol@lval+1,f
  9846  15E9  1903               	skipnz
  9847  15EA  0ACC               	incf	___fttol@lval+2,f
  9848  15EB  1903               	skipnz
  9849  15EC  0ACD               	incf	___fttol@lval+3,f
  9850  15ED                     l2928:	
  9851  15ED  084D               	movf	___fttol@lval+3,w
  9852  15EE  00C4               	movwf	?___fttol+3
  9853  15EF  084C               	movf	___fttol@lval+2,w
  9854  15F0  00C3               	movwf	?___fttol+2
  9855  15F1  084B               	movf	___fttol@lval+1,w
  9856  15F2  00C2               	movwf	?___fttol+1
  9857  15F3  084A               	movf	___fttol@lval,w
  9858  15F4  00C1               	movwf	?___fttol
  9859  15F5  0008               	return
  9860  15F6                     __end_of___fttol:	
  9861                           
  9862                           	psect	text13
  9863  115D                     __ptext13:	
  9864 ;; *************** function ___ftsub *****************
  9865 ;; Defined at:
  9866 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftsub.c"
  9867 ;; Parameters:    Size  Location     Type
  9868 ;;  f2              3   51[BANK0 ] float 
  9869 ;;  f1              3   54[BANK0 ] float 
  9870 ;; Auto vars:     Size  Location     Type
  9871 ;;		None
  9872 ;; Return value:  Size  Location     Type
  9873 ;;                  3   51[BANK0 ] float 
  9874 ;; Registers used:
  9875 ;;		wreg, status,2, status,0, pclath, cstack
  9876 ;; Tracked objects:
  9877 ;;		On entry : 0/0
  9878 ;;		On exit  : 0/0
  9879 ;;		Unchanged: 0/0
  9880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9881 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9882 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9883 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9884 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9885 ;;Total ram usage:        6 bytes
  9886 ;; Hardware stack levels used:    1
  9887 ;; Hardware stack levels required when called:    2
  9888 ;; This function calls:
  9889 ;;		___ftadd
  9890 ;; This function is called by:
  9891 ;;		_main
  9892 ;;		_sprintf
  9893 ;; This function uses a non-reentrant model
  9894 ;;
  9895                           
  9896                           
  9897                           ;psect for function ___ftsub
  9898  115D                     ___ftsub:	
  9899                           
  9900                           ;incstack = 0
  9901                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  9902  115D  0020               	movlb	0	; select bank0
  9903  115E  0855               	movf	___ftsub@f2+2,w
  9904  115F  0454               	iorwf	___ftsub@f2+1,w
  9905  1160  0453               	iorwf	___ftsub@f2,w
  9906  1161  1903               	skipnz
  9907  1162  2965               	goto	l2886
  9908  1163  3080               	movlw	128
  9909  1164  06D5               	xorwf	___ftsub@f2+2,f
  9910  1165                     l2886:	
  9911  1165  0856               	movf	___ftsub@f1,w
  9912  1166  00C6               	movwf	___ftadd@f1
  9913  1167  0857               	movf	___ftsub@f1+1,w
  9914  1168  00C7               	movwf	___ftadd@f1+1
  9915  1169  0858               	movf	___ftsub@f1+2,w
  9916  116A  00C8               	movwf	___ftadd@f1+2
  9917  116B  0853               	movf	___ftsub@f2,w
  9918  116C  00C9               	movwf	___ftadd@f2
  9919  116D  0854               	movf	___ftsub@f2+1,w
  9920  116E  00CA               	movwf	___ftadd@f2+1
  9921  116F  0855               	movf	___ftsub@f2+2,w
  9922  1170  00CB               	movwf	___ftadd@f2+2
  9923  1171  3189  210E         	fcall	___ftadd
  9924  1173  0020               	movlb	0	; select bank0
  9925  1174  0846               	movf	?___ftadd,w
  9926  1175  00D3               	movwf	?___ftsub
  9927  1176  0847               	movf	?___ftadd+1,w
  9928  1177  00D4               	movwf	?___ftsub+1
  9929  1178  0848               	movf	?___ftadd+2,w
  9930  1179  00D5               	movwf	?___ftsub+2
  9931  117A  0008               	return
  9932  117B                     __end_of___ftsub:	
  9933                           
  9934                           	psect	text14
  9935  0004                     __ptext14:	
  9936 ;; *************** function ___ftneg *****************
  9937 ;; Defined at:
  9938 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftneg.c"
  9939 ;; Parameters:    Size  Location     Type
  9940 ;;  f1              3    0[COMMON] float 
  9941 ;; Auto vars:     Size  Location     Type
  9942 ;;		None
  9943 ;; Return value:  Size  Location     Type
  9944 ;;                  3    0[COMMON] float 
  9945 ;; Registers used:
  9946 ;;		wreg
  9947 ;; Tracked objects:
  9948 ;;		On entry : 0/0
  9949 ;;		On exit  : 0/0
  9950 ;;		Unchanged: 0/0
  9951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9952 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9953 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9954 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9955 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9956 ;;Total ram usage:        3 bytes
  9957 ;; Hardware stack levels used:    1
  9958 ;; This function calls:
  9959 ;;		Nothing
  9960 ;; This function is called by:
  9961 ;;		_sprintf
  9962 ;; This function uses a non-reentrant model
  9963 ;;
  9964                           
  9965                           
  9966                           ;psect for function ___ftneg
  9967  0004                     ___ftneg:	
  9968                           
  9969                           ;incstack = 0
  9970                           ; Regs used in ___ftneg: [wreg]
  9971  0004  0872               	movf	___ftneg@f1+2,w
  9972  0005  0471               	iorwf	___ftneg@f1+1,w
  9973  0006  0470               	iorwf	___ftneg@f1,w
  9974  0007  1903               	skipnz
  9975  0008  0008               	return
  9976  0009  3080               	movlw	128
  9977  000A  06F2               	xorwf	___ftneg@f1+2,f
  9978  000B  0008               	return
  9979  000C                     __end_of___ftneg:	
  9980                           
  9981                           	psect	text15
  9982  169F                     __ptext15:	
  9983 ;; *************** function _log *****************
  9984 ;; Defined at:
  9985 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\log.c"
  9986 ;; Parameters:    Size  Location     Type
  9987 ;;  x               3   61[BANK0 ] float 
  9988 ;; Auto vars:     Size  Location     Type
  9989 ;;  exponent        2   65[BANK0 ] int 
  9990 ;; Return value:  Size  Location     Type
  9991 ;;                  3   61[BANK0 ] int 
  9992 ;; Registers used:
  9993 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9994 ;; Tracked objects:
  9995 ;;		On entry : 0/0
  9996 ;;		On exit  : 0/0
  9997 ;;		Unchanged: 0/0
  9998 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9999 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10000 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10001 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10002 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10003 ;;Total ram usage:        6 bytes
 10004 ;; Hardware stack levels used:    1
 10005 ;; Hardware stack levels required when called:    3
 10006 ;; This function calls:
 10007 ;;		___awtoft
 10008 ;;		___ftadd
 10009 ;;		___ftge
 10010 ;;		___ftmul
 10011 ;;		_eval_poly
 10012 ;;		_frexp
 10013 ;; This function is called by:
 10014 ;;		_main
 10015 ;; This function uses a non-reentrant model
 10016 ;;
 10017                           
 10018                           
 10019                           ;psect for function _log
 10020  169F                     _log:	
 10021                           
 10022                           ;incstack = 0
 10023                           ; Regs used in _log: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10024  169F  0020               	movlb	0	; select bank0
 10025  16A0  085D               	movf	log@x,w
 10026  16A1  00F0               	movwf	___ftge@ff1
 10027  16A2  085E               	movf	log@x+1,w
 10028  16A3  00F1               	movwf	___ftge@ff1+1
 10029  16A4  085F               	movf	log@x+2,w
 10030  16A5  00F2               	movwf	___ftge@ff1+2
 10031  16A6  3000               	movlw	0
 10032  16A7  00F3               	movwf	___ftge@ff2
 10033  16A8  3000               	movlw	0
 10034  16A9  00F4               	movwf	___ftge@ff2+1
 10035  16AA  3000               	movlw	0
 10036  16AB  00F5               	movwf	___ftge@ff2+2
 10037  16AC  3192  2244  3196   	fcall	___ftge
 10038  16AF  1803               	btfsc	3,0
 10039  16B0  2EBD               	goto	l3146
 10040  16B1  3021               	movlw	33
 10041  16B2  0020               	movlb	0	; select bank0
 10042  16B3  00EE               	movwf	_errno
 10043  16B4  3000               	movlw	0
 10044  16B5  00EF               	movwf	_errno+1
 10045  16B6  3000               	movlw	0
 10046  16B7  00DD               	movwf	?_log
 10047  16B8  3000               	movlw	0
 10048  16B9  00DE               	movwf	?_log+1
 10049  16BA  3000               	movlw	0
 10050  16BB  00DF               	movwf	?_log+2
 10051  16BC  0008               	return
 10052  16BD                     l3146:	
 10053  16BD  0020               	movlb	0	; select bank0
 10054  16BE  085F               	movf	log@x+2,w
 10055  16BF  045E               	iorwf	log@x+1,w
 10056  16C0  045D               	iorwf	log@x,w
 10057  16C1  1D03               	skipz
 10058  16C2  2ECE               	goto	l3152
 10059  16C3  3022               	movlw	34
 10060  16C4  00EE               	movwf	_errno
 10061  16C5  3000               	movlw	0
 10062  16C6  00EF               	movwf	_errno+1
 10063  16C7  3000               	movlw	0
 10064  16C8  00DD               	movwf	?_log
 10065  16C9  3000               	movlw	0
 10066  16CA  00DE               	movwf	?_log+1
 10067  16CB  3000               	movlw	0
 10068  16CC  00DF               	movwf	?_log+2
 10069  16CD  0008               	return
 10070  16CE                     l3152:	
 10071  16CE  3000               	movlw	0
 10072  16CF  00C6               	movwf	___ftadd@f1
 10073  16D0  3080               	movlw	128
 10074  16D1  00C7               	movwf	___ftadd@f1+1
 10075  16D2  30BF               	movlw	191
 10076  16D3  00C8               	movwf	___ftadd@f1+2
 10077  16D4  3000               	movlw	0
 10078  16D5  00A8               	movwf	___ftmul@f1
 10079  16D6  3000               	movlw	0
 10080  16D7  00A9               	movwf	___ftmul@f1+1
 10081  16D8  3040               	movlw	64
 10082  16D9  00AA               	movwf	___ftmul@f1+2
 10083  16DA  3061               	movlw	(low (log@exponent| 0))& (0+255)
 10084  16DB  00E0               	movwf	??_log
 10085  16DC  0860               	movf	??_log,w
 10086  16DD  00F3               	movwf	frexp@eptr
 10087  16DE  085D               	movf	log@x,w
 10088  16DF  00F0               	movwf	frexp@value
 10089  16E0  085E               	movf	log@x+1,w
 10090  16E1  00F1               	movwf	frexp@value+1
 10091  16E2  085F               	movf	log@x+2,w
 10092  16E3  00F2               	movwf	frexp@value+2
 10093  16E4  3192  227F  3196   	fcall	_frexp
 10094  16E7  0870               	movf	?_frexp,w
 10095  16E8  0020               	movlb	0	; select bank0
 10096  16E9  00AB               	movwf	___ftmul@f2
 10097  16EA  0871               	movf	?_frexp+1,w
 10098  16EB  00AC               	movwf	___ftmul@f2+1
 10099  16EC  0872               	movf	?_frexp+2,w
 10100  16ED  00AD               	movwf	___ftmul@f2+2
 10101  16EE  3197  274C  3196   	fcall	___ftmul
 10102  16F1  0020               	movlb	0	; select bank0
 10103  16F2  0828               	movf	?___ftmul,w
 10104  16F3  00C9               	movwf	___ftadd@f2
 10105  16F4  0829               	movf	?___ftmul+1,w
 10106  16F5  00CA               	movwf	___ftadd@f2+1
 10107  16F6  082A               	movf	?___ftmul+2,w
 10108  16F7  00CB               	movwf	___ftadd@f2+2
 10109  16F8  3189  210E  3196   	fcall	___ftadd
 10110  16FB  0020               	movlb	0	; select bank0
 10111  16FC  0846               	movf	?___ftadd,w
 10112  16FD  00DD               	movwf	log@x
 10113  16FE  0847               	movf	?___ftadd+1,w
 10114  16FF  00DE               	movwf	log@x+1
 10115  1700  0848               	movf	?___ftadd+2,w
 10116  1701  00DF               	movwf	log@x+2
 10117  1702  30FF               	movlw	255
 10118  1703  07E1               	addwf	log@exponent,f
 10119  1704  30FF               	movlw	255
 10120  1705  3DE2               	addwfc	log@exponent+1,f
 10121  1706  085D               	movf	log@x,w
 10122  1707  00D3               	movwf	eval_poly@x
 10123  1708  085E               	movf	log@x+1,w
 10124  1709  00D4               	movwf	eval_poly@x+1
 10125  170A  085F               	movf	log@x+2,w
 10126  170B  00D5               	movwf	eval_poly@x+2
 10127  170C  3076               	movlw	low (log@coeff| (0+32768))
 10128  170D  00D6               	movwf	eval_poly@d
 10129  170E  3098               	movlw	high (log@coeff| (0+32768))
 10130  170F  00D7               	movwf	eval_poly@d+1
 10131  1710  3008               	movlw	8
 10132  1711  00D8               	movwf	eval_poly@n
 10133  1712  3000               	movlw	0
 10134  1713  00D9               	movwf	eval_poly@n+1
 10135  1714  3193  2393  3196   	fcall	_eval_poly
 10136  1717  0020               	movlb	0	; select bank0
 10137  1718  0853               	movf	?_eval_poly,w
 10138  1719  00DD               	movwf	log@x
 10139  171A  0854               	movf	?_eval_poly+1,w
 10140  171B  00DE               	movwf	log@x+1
 10141  171C  0855               	movf	?_eval_poly+2,w
 10142  171D  00DF               	movwf	log@x+2
 10143  171E  085D               	movf	log@x,w
 10144  171F  00C6               	movwf	___ftadd@f1
 10145  1720  085E               	movf	log@x+1,w
 10146  1721  00C7               	movwf	___ftadd@f1+1
 10147  1722  085F               	movf	log@x+2,w
 10148  1723  00C8               	movwf	___ftadd@f1+2
 10149  1724  3072               	movlw	114
 10150  1725  00A8               	movwf	___ftmul@f1
 10151  1726  3031               	movlw	49
 10152  1727  00A9               	movwf	___ftmul@f1+1
 10153  1728  303F               	movlw	63
 10154  1729  00AA               	movwf	___ftmul@f1+2
 10155  172A  0862               	movf	log@exponent+1,w
 10156  172B  00F9               	movwf	___awtoft@c+1
 10157  172C  0861               	movf	log@exponent,w
 10158  172D  00F8               	movwf	___awtoft@c
 10159  172E  3191  217B  3196   	fcall	___awtoft
 10160  1731  0878               	movf	?___awtoft,w
 10161  1732  0020               	movlb	0	; select bank0
 10162  1733  00AB               	movwf	___ftmul@f2
 10163  1734  0879               	movf	?___awtoft+1,w
 10164  1735  00AC               	movwf	___ftmul@f2+1
 10165  1736  087A               	movf	?___awtoft+2,w
 10166  1737  00AD               	movwf	___ftmul@f2+2
 10167  1738  3197  274C  3196   	fcall	___ftmul
 10168  173B  0020               	movlb	0	; select bank0
 10169  173C  0828               	movf	?___ftmul,w
 10170  173D  00C9               	movwf	___ftadd@f2
 10171  173E  0829               	movf	?___ftmul+1,w
 10172  173F  00CA               	movwf	___ftadd@f2+1
 10173  1740  082A               	movf	?___ftmul+2,w
 10174  1741  00CB               	movwf	___ftadd@f2+2
 10175  1742  3189  210E         	fcall	___ftadd
 10176  1744  0020               	movlb	0	; select bank0
 10177  1745  0846               	movf	?___ftadd,w
 10178  1746  00DD               	movwf	?_log
 10179  1747  0847               	movf	?___ftadd+1,w
 10180  1748  00DE               	movwf	?_log+1
 10181  1749  0848               	movf	?___ftadd+2,w
 10182  174A  00DF               	movwf	?_log+2
 10183  174B  0008               	return
 10184  174C                     __end_of_log:	
 10185                           
 10186                           	psect	text16
 10187  127F                     __ptext16:	
 10188 ;; *************** function _frexp *****************
 10189 ;; Defined at:
 10190 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\frexp.c"
 10191 ;; Parameters:    Size  Location     Type
 10192 ;;  value           3    0[COMMON] int 
 10193 ;;  eptr            1    3[COMMON] PTR int 
 10194 ;;		 -> log@exponent(2), 
 10195 ;; Auto vars:     Size  Location     Type
 10196 ;;		None
 10197 ;; Return value:  Size  Location     Type
 10198 ;;                  3    0[COMMON] PTR int 
 10199 ;; Registers used:
 10200 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10201 ;; Tracked objects:
 10202 ;;		On entry : 0/0
 10203 ;;		On exit  : 0/0
 10204 ;;		Unchanged: 0/0
 10205 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10206 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10207 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10208 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10209 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10210 ;;Total ram usage:        6 bytes
 10211 ;; Hardware stack levels used:    1
 10212 ;; This function calls:
 10213 ;;		Nothing
 10214 ;; This function is called by:
 10215 ;;		_log
 10216 ;; This function uses a non-reentrant model
 10217 ;;
 10218                           
 10219                           
 10220                           ;psect for function _frexp
 10221  127F                     _frexp:	
 10222                           
 10223                           ;incstack = 0
 10224                           ; Regs used in _frexp: [wreg+fsr1l+fsr1h+status,2+status,0]
 10225  127F  0872               	movf	frexp@value+2,w
 10226  1280  0471               	iorwf	frexp@value+1,w
 10227  1281  0470               	iorwf	frexp@value,w
 10228  1282  1D03               	skipz
 10229  1283  2A91               	goto	l2994
 10230  1284  0873               	movf	frexp@eptr,w
 10231  1285  0086               	movwf	6
 10232  1286  0187               	clrf	7
 10233  1287  3000               	movlw	0
 10234  1288  3FC0               	movwi [0]fsr1
 10235  1289  3FC1               	movwi [1]fsr1
 10236  128A  3000               	movlw	0
 10237  128B  00F0               	movwf	?_frexp
 10238  128C  3000               	movlw	0
 10239  128D  00F1               	movwf	?_frexp+1
 10240  128E  3000               	movlw	0
 10241  128F  00F2               	movwf	?_frexp+2
 10242  1290  0008               	return
 10243  1291                     l2994:	
 10244  1291  0872               	movf	frexp@value+2,w
 10245  1292  397F               	andlw	127
 10246  1293  00F4               	movwf	??_frexp
 10247  1294  01F5               	clrf	??_frexp+1
 10248  1295  35F4               	lslf	??_frexp,f
 10249  1296  0DF5               	rlf	??_frexp+1,f
 10250  1297  0873               	movf	frexp@eptr,w
 10251  1298  0086               	movwf	6
 10252  1299  0187               	clrf	7
 10253  129A  0874               	movf	??_frexp,w
 10254  129B  3FC0               	movwi [0]fsr1
 10255  129C  0875               	movf	??_frexp+1,w
 10256  129D  3FC1               	movwi [1]fsr1
 10257  129E  0D71               	rlf	frexp@value+1,w
 10258  129F  0D71               	rlf	frexp@value+1,w
 10259  12A0  3901               	andlw	1
 10260  12A1  00F4               	movwf	??_frexp
 10261  12A2  01F5               	clrf	??_frexp+1
 10262  12A3  0873               	movf	frexp@eptr,w
 10263  12A4  0086               	movwf	6
 10264  12A5  0187               	clrf	7
 10265  12A6  0874               	movf	??_frexp,w
 10266  12A7  0481               	iorwf	1,f
 10267  12A8  3141               	addfsr 1,1
 10268  12A9  0875               	movf	??_frexp+1,w
 10269  12AA  0481               	iorwf	1,f
 10270  12AB  0873               	movf	frexp@eptr,w
 10271  12AC  0086               	movwf	6
 10272  12AD  0187               	clrf	7
 10273  12AE  3082               	movlw	130
 10274  12AF  0781               	addwf	1,f
 10275  12B0  3141               	addfsr 1,1
 10276  12B1  30FF               	movlw	255
 10277  12B2  3D81               	addwfc	1,f
 10278  12B3  317F               	addfsr 1,-1
 10279  12B4  0872               	movf	frexp@value+2,w
 10280  12B5  3980               	andlw	-128
 10281  12B6  383F               	iorlw	63
 10282  12B7  00F2               	movwf	frexp@value+2
 10283  12B8  13F1               	bcf	frexp@value+1,7
 10284  12B9  0008               	return
 10285  12BA                     __end_of_frexp:	
 10286                           
 10287                           	psect	text17
 10288  1393                     __ptext17:	
 10289 ;; *************** function _eval_poly *****************
 10290 ;; Defined at:
 10291 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\evalpoly.c"
 10292 ;; Parameters:    Size  Location     Type
 10293 ;;  x               3   51[BANK0 ] PTR int 
 10294 ;;  d               2   54[BANK0 ] PTR const 
 10295 ;;		 -> log@coeff(27), 
 10296 ;;  n               2   56[BANK0 ] int 
 10297 ;; Auto vars:     Size  Location     Type
 10298 ;;  res             3   58[BANK0 ] int 
 10299 ;; Return value:  Size  Location     Type
 10300 ;;                  3   51[BANK0 ] int 
 10301 ;; Registers used:
 10302 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10303 ;; Tracked objects:
 10304 ;;		On entry : 0/0
 10305 ;;		On exit  : 0/0
 10306 ;;		Unchanged: 0/0
 10307 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10308 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10309 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10310 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10311 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10312 ;;Total ram usage:       10 bytes
 10313 ;; Hardware stack levels used:    1
 10314 ;; Hardware stack levels required when called:    2
 10315 ;; This function calls:
 10316 ;;		___ftadd
 10317 ;;		___ftmul
 10318 ;;		___wmul
 10319 ;; This function is called by:
 10320 ;;		_log
 10321 ;; This function uses a non-reentrant model
 10322 ;;
 10323                           
 10324                           
 10325                           ;psect for function _eval_poly
 10326  1393                     _eval_poly:	
 10327                           
 10328                           ;incstack = 0
 10329                           ; Regs used in _eval_poly: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10330  1393  0020               	movlb	0	; select bank0
 10331  1394  0859               	movf	eval_poly@n+1,w
 10332  1395  00A5               	movwf	___wmul@multiplier+1
 10333  1396  0858               	movf	eval_poly@n,w
 10334  1397  00A4               	movwf	___wmul@multiplier
 10335  1398  3003               	movlw	3
 10336  1399  00A6               	movwf	___wmul@multiplicand
 10337  139A  3000               	movlw	0
 10338  139B  00A7               	movwf	___wmul@multiplicand+1
 10339  139C  3191  2141  3193   	fcall	___wmul
 10340  139F  0020               	movlb	0	; select bank0
 10341  13A0  0856               	movf	eval_poly@d,w
 10342  13A1  0724               	addwf	?___wmul,w
 10343  13A2  0084               	movwf	4
 10344  13A3  0857               	movf	eval_poly@d+1,w
 10345  13A4  3D25               	addwfc	?___wmul+1,w
 10346  13A5  0085               	movwf	5
 10347  13A6  3F00               	moviw [0]fsr0
 10348  13A7  00DA               	movwf	eval_poly@res
 10349  13A8  3F01               	moviw [1]fsr0
 10350  13A9  00DB               	movwf	eval_poly@res+1
 10351  13AA  3F02               	moviw [2]fsr0
 10352  13AB                     L8:	
 10353  13AB  00DC               	movwf	eval_poly@res+2
 10354  13AC  0858               	movf	eval_poly@n,w
 10355  13AD  0459               	iorwf	eval_poly@n+1,w
 10356  13AE  1903               	btfsc	3,2
 10357  13AF  2BEC               	goto	l3012
 10358  13B0  30FF               	movlw	255
 10359  13B1  07D8               	addwf	eval_poly@n,f
 10360  13B2  30FF               	movlw	255
 10361  13B3  3DD9               	addwfc	eval_poly@n+1,f
 10362  13B4  0859               	movf	eval_poly@n+1,w
 10363  13B5  00A5               	movwf	___wmul@multiplier+1
 10364  13B6  0858               	movf	eval_poly@n,w
 10365  13B7  00A4               	movwf	___wmul@multiplier
 10366  13B8  3003               	movlw	3
 10367  13B9  00A6               	movwf	___wmul@multiplicand
 10368  13BA  3000               	movlw	0
 10369  13BB  00A7               	movwf	___wmul@multiplicand+1
 10370  13BC  3191  2141  3193   	fcall	___wmul
 10371  13BF  0020               	movlb	0	; select bank0
 10372  13C0  0856               	movf	eval_poly@d,w
 10373  13C1  0724               	addwf	?___wmul,w
 10374  13C2  0084               	movwf	4
 10375  13C3  0857               	movf	eval_poly@d+1,w
 10376  13C4  3D25               	addwfc	?___wmul+1,w
 10377  13C5  0085               	movwf	5
 10378  13C6  3F00               	moviw [0]fsr0
 10379  13C7  00C6               	movwf	___ftadd@f1
 10380  13C8  3F01               	moviw [1]fsr0
 10381  13C9  00C7               	movwf	___ftadd@f1+1
 10382  13CA  3F02               	moviw [2]fsr0
 10383  13CB  00C8               	movwf	___ftadd@f1+2
 10384  13CC  085A               	movf	eval_poly@res,w
 10385  13CD  00A8               	movwf	___ftmul@f1
 10386  13CE  085B               	movf	eval_poly@res+1,w
 10387  13CF  00A9               	movwf	___ftmul@f1+1
 10388  13D0  085C               	movf	eval_poly@res+2,w
 10389  13D1  00AA               	movwf	___ftmul@f1+2
 10390  13D2  0853               	movf	eval_poly@x,w
 10391  13D3  00AB               	movwf	___ftmul@f2
 10392  13D4  0854               	movf	eval_poly@x+1,w
 10393  13D5  00AC               	movwf	___ftmul@f2+1
 10394  13D6  0855               	movf	eval_poly@x+2,w
 10395  13D7  00AD               	movwf	___ftmul@f2+2
 10396  13D8  3197  274C  3193   	fcall	___ftmul
 10397  13DB  0020               	movlb	0	; select bank0
 10398  13DC  0828               	movf	?___ftmul,w
 10399  13DD  00C9               	movwf	___ftadd@f2
 10400  13DE  0829               	movf	?___ftmul+1,w
 10401  13DF  00CA               	movwf	___ftadd@f2+1
 10402  13E0  082A               	movf	?___ftmul+2,w
 10403  13E1  00CB               	movwf	___ftadd@f2+2
 10404  13E2  3189  210E  3193   	fcall	___ftadd
 10405  13E5  0020               	movlb	0	; select bank0
 10406  13E6  0846               	movf	?___ftadd,w
 10407  13E7  00DA               	movwf	eval_poly@res
 10408  13E8  0847               	movf	?___ftadd+1,w
 10409  13E9  00DB               	movwf	eval_poly@res+1
 10410  13EA  0848               	movf	?___ftadd+2,w
 10411  13EB  2BAB               	goto	L8
 10412  13EC                     l3012:	
 10413  13EC  085A               	movf	eval_poly@res,w
 10414  13ED  00D3               	movwf	?_eval_poly
 10415  13EE  085B               	movf	eval_poly@res+1,w
 10416  13EF  00D4               	movwf	?_eval_poly+1
 10417  13F0  085C               	movf	eval_poly@res+2,w
 10418  13F1  00D5               	movwf	?_eval_poly+2
 10419  13F2  0008               	return
 10420  13F3                     __end_of_eval_poly:	
 10421                           
 10422                           	psect	text18
 10423  1141                     __ptext18:	
 10424 ;; *************** function ___wmul *****************
 10425 ;; Defined at:
 10426 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul16.c"
 10427 ;; Parameters:    Size  Location     Type
 10428 ;;  multiplier      2    4[BANK0 ] unsigned int 
 10429 ;;  multiplicand    2    6[BANK0 ] unsigned int 
 10430 ;; Auto vars:     Size  Location     Type
 10431 ;;  product         2   12[COMMON] unsigned int 
 10432 ;; Return value:  Size  Location     Type
 10433 ;;                  2    4[BANK0 ] unsigned int 
 10434 ;; Registers used:
 10435 ;;		wreg, status,2, status,0
 10436 ;; Tracked objects:
 10437 ;;		On entry : 0/0
 10438 ;;		On exit  : 0/0
 10439 ;;		Unchanged: 0/0
 10440 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10441 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10442 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10443 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10444 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10445 ;;Total ram usage:        6 bytes
 10446 ;; Hardware stack levels used:    1
 10447 ;; This function calls:
 10448 ;;		Nothing
 10449 ;; This function is called by:
 10450 ;;		_fround
 10451 ;;		_scale
 10452 ;;		_sprintf
 10453 ;;		_eval_poly
 10454 ;; This function uses a non-reentrant model
 10455 ;;
 10456                           
 10457                           
 10458                           ;psect for function ___wmul
 10459  1141                     ___wmul:	
 10460                           
 10461                           ;incstack = 0
 10462                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 10463  1141  01FC               	clrf	___wmul@product
 10464  1142  01FD               	clrf	___wmul@product+1
 10465  1143                     l2342:	
 10466  1143  0020               	movlb	0	; select bank0
 10467  1144  1C24               	btfss	___wmul@multiplier,0
 10468  1145  294A               	goto	l471
 10469  1146  0826               	movf	___wmul@multiplicand,w
 10470  1147  07FC               	addwf	___wmul@product,f
 10471  1148  0827               	movf	___wmul@multiplicand+1,w
 10472  1149  3DFD               	addwfc	___wmul@product+1,f
 10473  114A                     l471:	
 10474  114A  3001               	movlw	1
 10475  114B                     u2565:	
 10476  114B  35A6               	lslf	___wmul@multiplicand,f
 10477  114C  0DA7               	rlf	___wmul@multiplicand+1,f
 10478  114D  0B89               	decfsz	9,f
 10479  114E  294B               	goto	u2565
 10480  114F  3001               	movlw	1
 10481  1150                     u2575:	
 10482  1150  36A5               	lsrf	___wmul@multiplier+1,f
 10483  1151  0CA4               	rrf	___wmul@multiplier,f
 10484  1152  0B89               	decfsz	9,f
 10485  1153  2950               	goto	u2575
 10486  1154  0824               	movf	___wmul@multiplier,w
 10487  1155  0425               	iorwf	___wmul@multiplier+1,w
 10488  1156  1D03               	btfss	3,2
 10489  1157  2943               	goto	l2342
 10490  1158  087D               	movf	___wmul@product+1,w
 10491  1159  00A5               	movwf	?___wmul+1
 10492  115A  087C               	movf	___wmul@product,w
 10493  115B  00A4               	movwf	?___wmul
 10494  115C  0008               	return
 10495  115D                     __end_of___wmul:	
 10496                           
 10497                           	psect	text19
 10498  174C                     __ptext19:	
 10499 ;; *************** function ___ftmul *****************
 10500 ;; Defined at:
 10501 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftmul.c"
 10502 ;; Parameters:    Size  Location     Type
 10503 ;;  f1              3    8[BANK0 ] float 
 10504 ;;  f2              3   11[BANK0 ] float 
 10505 ;; Auto vars:     Size  Location     Type
 10506 ;;  f3_as_produc    3   19[BANK0 ] unsigned um
 10507 ;;  sign            1   23[BANK0 ] unsigned char 
 10508 ;;  cntr            1   22[BANK0 ] unsigned char 
 10509 ;;  exp             1   18[BANK0 ] unsigned char 
 10510 ;; Return value:  Size  Location     Type
 10511 ;;                  3    8[BANK0 ] float 
 10512 ;; Registers used:
 10513 ;;		wreg, status,2, status,0, pclath, cstack
 10514 ;; Tracked objects:
 10515 ;;		On entry : 0/0
 10516 ;;		On exit  : 0/0
 10517 ;;		Unchanged: 0/0
 10518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10519 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10520 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10521 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10522 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10523 ;;Total ram usage:       16 bytes
 10524 ;; Hardware stack levels used:    1
 10525 ;; Hardware stack levels required when called:    1
 10526 ;; This function calls:
 10527 ;;		___ftpack
 10528 ;; This function is called by:
 10529 ;;		_fround
 10530 ;;		_scale
 10531 ;;		_sprintf
 10532 ;;		_log
 10533 ;;		_eval_poly
 10534 ;; This function uses a non-reentrant model
 10535 ;;
 10536                           
 10537                           
 10538                           ;psect for function ___ftmul
 10539  174C                     ___ftmul:	
 10540                           
 10541                           ;incstack = 0
 10542                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 10543  174C  0020               	movlb	0	; select bank0
 10544  174D  0828               	movf	___ftmul@f1,w
 10545  174E  00AE               	movwf	??___ftmul
 10546  174F  0829               	movf	___ftmul@f1+1,w
 10547  1750  00AF               	movwf	??___ftmul+1
 10548  1751  082A               	movf	___ftmul@f1+2,w
 10549  1752  00B0               	movwf	??___ftmul+2
 10550  1753  1003               	clrc
 10551  1754  0D2F               	rlf	??___ftmul+1,w
 10552  1755  0D30               	rlf	??___ftmul+2,w
 10553  1756  00B1               	movwf	??___ftmul+3
 10554  1757  0831               	movf	??___ftmul+3,w
 10555  1758  00B2               	movwf	___ftmul@exp
 10556  1759  0832               	movf	___ftmul@exp,w
 10557  175A  1D03               	btfss	3,2
 10558  175B  2F63               	goto	l2512
 10559  175C  3000               	movlw	0
 10560  175D  00A8               	movwf	?___ftmul
 10561  175E  3000               	movlw	0
 10562  175F  00A9               	movwf	?___ftmul+1
 10563  1760  3000               	movlw	0
 10564  1761  00AA               	movwf	?___ftmul+2
 10565  1762  0008               	return
 10566  1763                     l2512:	
 10567  1763  082B               	movf	___ftmul@f2,w
 10568  1764  00AE               	movwf	??___ftmul
 10569  1765  082C               	movf	___ftmul@f2+1,w
 10570  1766  00AF               	movwf	??___ftmul+1
 10571  1767  082D               	movf	___ftmul@f2+2,w
 10572  1768  00B0               	movwf	??___ftmul+2
 10573  1769  1003               	clrc
 10574  176A  0D2F               	rlf	??___ftmul+1,w
 10575  176B  0D30               	rlf	??___ftmul+2,w
 10576  176C  00B1               	movwf	??___ftmul+3
 10577  176D  0831               	movf	??___ftmul+3,w
 10578  176E  00B7               	movwf	___ftmul@sign
 10579  176F  0837               	movf	___ftmul@sign,w
 10580  1770  1D03               	btfss	3,2
 10581  1771  2F79               	goto	l2518
 10582  1772  3000               	movlw	0
 10583  1773  00A8               	movwf	?___ftmul
 10584  1774  3000               	movlw	0
 10585  1775  00A9               	movwf	?___ftmul+1
 10586  1776  3000               	movlw	0
 10587  1777  00AA               	movwf	?___ftmul+2
 10588  1778  0008               	return
 10589  1779                     l2518:	
 10590  1779  0837               	movf	___ftmul@sign,w
 10591  177A  3E7B               	addlw	123
 10592  177B  00AE               	movwf	??___ftmul
 10593  177C  082E               	movf	??___ftmul,w
 10594  177D  07B2               	addwf	___ftmul@exp,f
 10595  177E  0828               	movf	___ftmul@f1,w
 10596  177F  00AE               	movwf	??___ftmul
 10597  1780  0829               	movf	___ftmul@f1+1,w
 10598  1781  00AF               	movwf	??___ftmul+1
 10599  1782  082A               	movf	___ftmul@f1+2,w
 10600  1783  00B0               	movwf	??___ftmul+2
 10601  1784  3010               	movlw	16
 10602  1785                     u3035:	
 10603  1785  36B0               	lsrf	??___ftmul+2,f
 10604  1786  0CAF               	rrf	??___ftmul+1,f
 10605  1787  0CAE               	rrf	??___ftmul,f
 10606  1788  0B89               	decfsz	9,f
 10607  1789  2F85               	goto	u3035
 10608  178A  082E               	movf	??___ftmul,w
 10609  178B  00B1               	movwf	??___ftmul+3
 10610  178C  0831               	movf	??___ftmul+3,w
 10611  178D  00B7               	movwf	___ftmul@sign
 10612  178E  082B               	movf	___ftmul@f2,w
 10613  178F  00AE               	movwf	??___ftmul
 10614  1790  082C               	movf	___ftmul@f2+1,w
 10615  1791  00AF               	movwf	??___ftmul+1
 10616  1792  082D               	movf	___ftmul@f2+2,w
 10617  1793  00B0               	movwf	??___ftmul+2
 10618  1794  3010               	movlw	16
 10619  1795                     u3045:	
 10620  1795  36B0               	lsrf	??___ftmul+2,f
 10621  1796  0CAF               	rrf	??___ftmul+1,f
 10622  1797  0CAE               	rrf	??___ftmul,f
 10623  1798  0B89               	decfsz	9,f
 10624  1799  2F95               	goto	u3045
 10625  179A  082E               	movf	??___ftmul,w
 10626  179B  00B1               	movwf	??___ftmul+3
 10627  179C  0831               	movf	??___ftmul+3,w
 10628  179D  06B7               	xorwf	___ftmul@sign,f
 10629  179E  3080               	movlw	128
 10630  179F  00AE               	movwf	??___ftmul
 10631  17A0  082E               	movf	??___ftmul,w
 10632  17A1  05B7               	andwf	___ftmul@sign,f
 10633  17A2  17A9               	bsf	___ftmul@f1+1,7
 10634  17A3  17AC               	bsf	___ftmul@f2+1,7
 10635  17A4  30FF               	movlw	255
 10636  17A5  05AB               	andwf	___ftmul@f2,f
 10637  17A6  30FF               	movlw	255
 10638  17A7  05AC               	andwf	___ftmul@f2+1,f
 10639  17A8  3000               	movlw	0
 10640  17A9  05AD               	andwf	___ftmul@f2+2,f
 10641  17AA  3000               	movlw	0
 10642  17AB  00B3               	movwf	___ftmul@f3_as_product
 10643  17AC  3000               	movlw	0
 10644  17AD  00B4               	movwf	___ftmul@f3_as_product+1
 10645  17AE  3000               	movlw	0
 10646  17AF  00B5               	movwf	___ftmul@f3_as_product+2
 10647  17B0  3007               	movlw	7
 10648  17B1  00AE               	movwf	??___ftmul
 10649  17B2  082E               	movf	??___ftmul,w
 10650  17B3  00B6               	movwf	___ftmul@cntr
 10651  17B4                     l2530:	
 10652  17B4  1C28               	btfss	___ftmul@f1,0
 10653  17B5  2FBC               	goto	l2534
 10654  17B6  082B               	movf	___ftmul@f2,w
 10655  17B7  07B3               	addwf	___ftmul@f3_as_product,f
 10656  17B8  082C               	movf	___ftmul@f2+1,w
 10657  17B9  3DB4               	addwfc	___ftmul@f3_as_product+1,f
 10658  17BA  082D               	movf	___ftmul@f2+2,w
 10659  17BB  3DB5               	addwfc	___ftmul@f3_as_product+2,f
 10660  17BC                     l2534:	
 10661  17BC  3001               	movlw	1
 10662  17BD                     u3065:	
 10663  17BD  36AA               	lsrf	___ftmul@f1+2,f
 10664  17BE  0CA9               	rrf	___ftmul@f1+1,f
 10665  17BF  0CA8               	rrf	___ftmul@f1,f
 10666  17C0  0B89               	decfsz	9,f
 10667  17C1  2FBD               	goto	u3065
 10668  17C2  3001               	movlw	1
 10669  17C3                     u3075:	
 10670  17C3  35AB               	lslf	___ftmul@f2,f
 10671  17C4  0DAC               	rlf	___ftmul@f2+1,f
 10672  17C5  0DAD               	rlf	___ftmul@f2+2,f
 10673  17C6  0B89               	decfsz	9,f
 10674  17C7  2FC3               	goto	u3075
 10675  17C8  3001               	movlw	1
 10676  17C9  02B6               	subwf	___ftmul@cntr,f
 10677  17CA  1D03               	btfss	3,2
 10678  17CB  2FB4               	goto	l2530
 10679  17CC  3009               	movlw	9
 10680  17CD  00AE               	movwf	??___ftmul
 10681  17CE  082E               	movf	??___ftmul,w
 10682  17CF  00B6               	movwf	___ftmul@cntr
 10683  17D0                     l2542:	
 10684  17D0  1C28               	btfss	___ftmul@f1,0
 10685  17D1  2FD8               	goto	l2546
 10686  17D2  082B               	movf	___ftmul@f2,w
 10687  17D3  07B3               	addwf	___ftmul@f3_as_product,f
 10688  17D4  082C               	movf	___ftmul@f2+1,w
 10689  17D5  3DB4               	addwfc	___ftmul@f3_as_product+1,f
 10690  17D6  082D               	movf	___ftmul@f2+2,w
 10691  17D7  3DB5               	addwfc	___ftmul@f3_as_product+2,f
 10692  17D8                     l2546:	
 10693  17D8  3001               	movlw	1
 10694  17D9                     u3105:	
 10695  17D9  36AA               	lsrf	___ftmul@f1+2,f
 10696  17DA  0CA9               	rrf	___ftmul@f1+1,f
 10697  17DB  0CA8               	rrf	___ftmul@f1,f
 10698  17DC  0B89               	decfsz	9,f
 10699  17DD  2FD9               	goto	u3105
 10700  17DE  3001               	movlw	1
 10701  17DF                     u3115:	
 10702  17DF  36B5               	lsrf	___ftmul@f3_as_product+2,f
 10703  17E0  0CB4               	rrf	___ftmul@f3_as_product+1,f
 10704  17E1  0CB3               	rrf	___ftmul@f3_as_product,f
 10705  17E2  0B89               	decfsz	9,f
 10706  17E3  2FDF               	goto	u3115
 10707  17E4  3001               	movlw	1
 10708  17E5  02B6               	subwf	___ftmul@cntr,f
 10709  17E6  1D03               	btfss	3,2
 10710  17E7  2FD0               	goto	l2542
 10711  17E8  0833               	movf	___ftmul@f3_as_product,w
 10712  17E9  00F0               	movwf	___ftpack@arg
 10713  17EA  0834               	movf	___ftmul@f3_as_product+1,w
 10714  17EB  00F1               	movwf	___ftpack@arg+1
 10715  17EC  0835               	movf	___ftmul@f3_as_product+2,w
 10716  17ED  00F2               	movwf	___ftpack@arg+2
 10717  17EE  0832               	movf	___ftmul@exp,w
 10718  17EF  00AE               	movwf	??___ftmul
 10719  17F0  082E               	movf	??___ftmul,w
 10720  17F1  00F3               	movwf	___ftpack@exp
 10721  17F2  0837               	movf	___ftmul@sign,w
 10722  17F3  00AF               	movwf	??___ftmul+1
 10723  17F4  082F               	movf	??___ftmul+1,w
 10724  17F5  00F4               	movwf	___ftpack@sign
 10725  17F6  3180  200C         	fcall	___ftpack
 10726  17F8  0870               	movf	?___ftpack,w
 10727  17F9  0020               	movlb	0	; select bank0
 10728  17FA  00A8               	movwf	?___ftmul
 10729  17FB  0871               	movf	?___ftpack+1,w
 10730  17FC  00A9               	movwf	?___ftmul+1
 10731  17FD  0872               	movf	?___ftpack+2,w
 10732  17FE  00AA               	movwf	?___ftmul+2
 10733  17FF  0008               	return
 10734  1800                     __end_of___ftmul:	
 10735                           
 10736                           	psect	text20
 10737  090E                     __ptext20:	
 10738 ;; *************** function ___ftadd *****************
 10739 ;; Defined at:
 10740 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftadd.c"
 10741 ;; Parameters:    Size  Location     Type
 10742 ;;  f1              3   38[BANK0 ] float 
 10743 ;;  f2              3   41[BANK0 ] float 
 10744 ;; Auto vars:     Size  Location     Type
 10745 ;;  exp1            1   50[BANK0 ] unsigned char 
 10746 ;;  exp2            1   49[BANK0 ] unsigned char 
 10747 ;;  sign            1   48[BANK0 ] unsigned char 
 10748 ;; Return value:  Size  Location     Type
 10749 ;;                  3   38[BANK0 ] float 
 10750 ;; Registers used:
 10751 ;;		wreg, status,2, status,0, pclath, cstack
 10752 ;; Tracked objects:
 10753 ;;		On entry : 0/0
 10754 ;;		On exit  : 0/0
 10755 ;;		Unchanged: 0/0
 10756 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10757 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10758 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10759 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10760 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10761 ;;Total ram usage:       13 bytes
 10762 ;; Hardware stack levels used:    1
 10763 ;; Hardware stack levels required when called:    1
 10764 ;; This function calls:
 10765 ;;		___ftpack
 10766 ;; This function is called by:
 10767 ;;		_main
 10768 ;;		_sprintf
 10769 ;;		___ftsub
 10770 ;;		_log
 10771 ;;		_eval_poly
 10772 ;; This function uses a non-reentrant model
 10773 ;;
 10774                           
 10775                           
 10776                           ;psect for function ___ftadd
 10777  090E                     ___ftadd:	
 10778                           
 10779                           ;incstack = 0
 10780                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 10781  090E  0020               	movlb	0	; select bank0
 10782  090F  0846               	movf	___ftadd@f1,w
 10783  0910  00CC               	movwf	??___ftadd
 10784  0911  0847               	movf	___ftadd@f1+1,w
 10785  0912  00CD               	movwf	??___ftadd+1
 10786  0913  0848               	movf	___ftadd@f1+2,w
 10787  0914  00CE               	movwf	??___ftadd+2
 10788  0915  1003               	clrc
 10789  0916  0D4D               	rlf	??___ftadd+1,w
 10790  0917  0D4E               	rlf	??___ftadd+2,w
 10791  0918  00CF               	movwf	??___ftadd+3
 10792  0919  084F               	movf	??___ftadd+3,w
 10793  091A  00D2               	movwf	___ftadd@exp1
 10794  091B  0849               	movf	___ftadd@f2,w
 10795  091C  00CC               	movwf	??___ftadd
 10796  091D  084A               	movf	___ftadd@f2+1,w
 10797  091E  00CD               	movwf	??___ftadd+1
 10798  091F  084B               	movf	___ftadd@f2+2,w
 10799  0920  00CE               	movwf	??___ftadd+2
 10800  0921  1003               	clrc
 10801  0922  0D4D               	rlf	??___ftadd+1,w
 10802  0923  0D4E               	rlf	??___ftadd+2,w
 10803  0924  00CF               	movwf	??___ftadd+3
 10804  0925  084F               	movf	??___ftadd+3,w
 10805  0926  00D1               	movwf	___ftadd@exp2
 10806  0927  0852               	movf	___ftadd@exp1,w
 10807  0928  1903               	btfsc	3,2
 10808  0929  2936               	goto	l2442
 10809  092A  0851               	movf	___ftadd@exp2,w
 10810  092B  0252               	subwf	___ftadd@exp1,w
 10811  092C  1803               	skipnc
 10812  092D  293D               	goto	l2446
 10813  092E  0352               	decf	___ftadd@exp1,w
 10814  092F  3AFF               	xorlw	255
 10815  0930  0751               	addwf	___ftadd@exp2,w
 10816  0931  00CC               	movwf	??___ftadd
 10817  0932  3019               	movlw	25
 10818  0933  024C               	subwf	??___ftadd,w
 10819  0934  1C03               	skipc
 10820  0935  293D               	goto	l2446
 10821  0936                     l2442:	
 10822  0936  0849               	movf	___ftadd@f2,w
 10823  0937  00C6               	movwf	?___ftadd
 10824  0938  084A               	movf	___ftadd@f2+1,w
 10825  0939  00C7               	movwf	?___ftadd+1
 10826  093A  084B               	movf	___ftadd@f2+2,w
 10827  093B  00C8               	movwf	?___ftadd+2
 10828  093C  0008               	return
 10829  093D                     l2446:	
 10830  093D  0851               	movf	___ftadd@exp2,w
 10831  093E  1903               	btfsc	3,2
 10832  093F  0008               	return
 10833  0940  0852               	movf	___ftadd@exp1,w
 10834  0941  0251               	subwf	___ftadd@exp2,w
 10835  0942  1803               	skipnc
 10836  0943  294C               	goto	l2452
 10837  0944  0351               	decf	___ftadd@exp2,w
 10838  0945  3AFF               	xorlw	255
 10839  0946  0752               	addwf	___ftadd@exp1,w
 10840  0947  00CC               	movwf	??___ftadd
 10841  0948  3019               	movlw	25
 10842  0949  024C               	subwf	??___ftadd,w
 10843  094A  1803               	btfsc	3,0
 10844  094B  0008               	return
 10845  094C                     l2452:	
 10846  094C  3006               	movlw	6
 10847  094D  00CC               	movwf	??___ftadd
 10848  094E  084C               	movf	??___ftadd,w
 10849  094F  00D0               	movwf	___ftadd@sign
 10850  0950  1BC8               	btfsc	___ftadd@f1+2,7
 10851  0951  17D0               	bsf	___ftadd@sign,7
 10852  0952  1BCB               	btfsc	___ftadd@f2+2,7
 10853  0953  1750               	bsf	___ftadd@sign,6
 10854  0954  17C7               	bsf	___ftadd@f1+1,7
 10855  0955  30FF               	movlw	255
 10856  0956  05C6               	andwf	___ftadd@f1,f
 10857  0957  30FF               	movlw	255
 10858  0958  05C7               	andwf	___ftadd@f1+1,f
 10859  0959  3000               	movlw	0
 10860  095A  05C8               	andwf	___ftadd@f1+2,f
 10861  095B  17CA               	bsf	___ftadd@f2+1,7
 10862  095C  30FF               	movlw	255
 10863  095D  05C9               	andwf	___ftadd@f2,f
 10864  095E  30FF               	movlw	255
 10865  095F  05CA               	andwf	___ftadd@f2+1,f
 10866  0960  3000               	movlw	0
 10867  0961  05CB               	andwf	___ftadd@f2+2,f
 10868  0962  0851               	movf	___ftadd@exp2,w
 10869  0963  0252               	subwf	___ftadd@exp1,w
 10870  0964  1803               	skipnc
 10871  0965  2988               	goto	l2474
 10872  0966                     l2464:	
 10873  0966  3001               	movlw	1
 10874  0967                     u2875:	
 10875  0967  35C9               	lslf	___ftadd@f2,f
 10876  0968  0DCA               	rlf	___ftadd@f2+1,f
 10877  0969  0DCB               	rlf	___ftadd@f2+2,f
 10878  096A  0B89               	decfsz	9,f
 10879  096B  2967               	goto	u2875
 10880  096C  3001               	movlw	1
 10881  096D  02D1               	subwf	___ftadd@exp2,f
 10882  096E  0851               	movf	___ftadd@exp2,w
 10883  096F  0652               	xorwf	___ftadd@exp1,w
 10884  0970  1903               	skipnz
 10885  0971  2983               	goto	l2472
 10886  0972  3001               	movlw	1
 10887  0973  02D0               	subwf	___ftadd@sign,f
 10888  0974  0850               	movf	___ftadd@sign,w
 10889  0975  3907               	andlw	7
 10890  0976  1903               	btfsc	3,2
 10891  0977  2983               	goto	l2472
 10892  0978  2966               	goto	l2464
 10893  0979                     l2470:	
 10894  0979  3001               	movlw	1
 10895  097A                     u2905:	
 10896  097A  36C8               	lsrf	___ftadd@f1+2,f
 10897  097B  0CC7               	rrf	___ftadd@f1+1,f
 10898  097C  0CC6               	rrf	___ftadd@f1,f
 10899  097D  0B89               	decfsz	9,f
 10900  097E  297A               	goto	u2905
 10901  097F  3001               	movlw	1
 10902  0980  00CC               	movwf	??___ftadd
 10903  0981  084C               	movf	??___ftadd,w
 10904  0982  07D2               	addwf	___ftadd@exp1,f
 10905  0983                     l2472:	
 10906  0983  0852               	movf	___ftadd@exp1,w
 10907  0984  0651               	xorwf	___ftadd@exp2,w
 10908  0985  1903               	btfsc	3,2
 10909  0986  29AD               	goto	l680
 10910  0987  2979               	goto	l2470
 10911  0988                     l2474:	
 10912  0988  0852               	movf	___ftadd@exp1,w
 10913  0989  0251               	subwf	___ftadd@exp2,w
 10914  098A  1803               	skipnc
 10915  098B  29AD               	goto	l680
 10916  098C                     l2476:	
 10917  098C  3001               	movlw	1
 10918  098D                     u2935:	
 10919  098D  35C6               	lslf	___ftadd@f1,f
 10920  098E  0DC7               	rlf	___ftadd@f1+1,f
 10921  098F  0DC8               	rlf	___ftadd@f1+2,f
 10922  0990  0B89               	decfsz	9,f
 10923  0991  298D               	goto	u2935
 10924  0992  3001               	movlw	1
 10925  0993  02D2               	subwf	___ftadd@exp1,f
 10926  0994  0851               	movf	___ftadd@exp2,w
 10927  0995  0652               	xorwf	___ftadd@exp1,w
 10928  0996  1903               	skipnz
 10929  0997  29A9               	goto	l2484
 10930  0998  3001               	movlw	1
 10931  0999  02D0               	subwf	___ftadd@sign,f
 10932  099A  0850               	movf	___ftadd@sign,w
 10933  099B  3907               	andlw	7
 10934  099C  1903               	btfsc	3,2
 10935  099D  29A9               	goto	l2484
 10936  099E  298C               	goto	l2476
 10937  099F                     l2482:	
 10938  099F  3001               	movlw	1
 10939  09A0                     u2965:	
 10940  09A0  36CB               	lsrf	___ftadd@f2+2,f
 10941  09A1  0CCA               	rrf	___ftadd@f2+1,f
 10942  09A2  0CC9               	rrf	___ftadd@f2,f
 10943  09A3  0B89               	decfsz	9,f
 10944  09A4  29A0               	goto	u2965
 10945  09A5  3001               	movlw	1
 10946  09A6  00CC               	movwf	??___ftadd
 10947  09A7  084C               	movf	??___ftadd,w
 10948  09A8  07D1               	addwf	___ftadd@exp2,f
 10949  09A9                     l2484:	
 10950  09A9  0852               	movf	___ftadd@exp1,w
 10951  09AA  0651               	xorwf	___ftadd@exp2,w
 10952  09AB  1D03               	skipz
 10953  09AC  299F               	goto	l2482
 10954  09AD                     l680:	
 10955  09AD  1FD0               	btfss	___ftadd@sign,7
 10956  09AE  29BF               	goto	l2488
 10957  09AF  30FF               	movlw	255
 10958  09B0  06C6               	xorwf	___ftadd@f1,f
 10959  09B1  30FF               	movlw	255
 10960  09B2  06C7               	xorwf	___ftadd@f1+1,f
 10961  09B3  30FF               	movlw	255
 10962  09B4  06C8               	xorwf	___ftadd@f1+2,f
 10963  09B5  3001               	movlw	1
 10964  09B6  07C6               	addwf	___ftadd@f1,f
 10965  09B7  3000               	movlw	0
 10966  09B8  1803               	skipnc
 10967  09B9  3001               	movlw	1
 10968  09BA  07C7               	addwf	___ftadd@f1+1,f
 10969  09BB  3000               	movlw	0
 10970  09BC  1803               	skipnc
 10971  09BD  3001               	movlw	1
 10972  09BE  07C8               	addwf	___ftadd@f1+2,f
 10973  09BF                     l2488:	
 10974  09BF  1F50               	btfss	___ftadd@sign,6
 10975  09C0  29D1               	goto	l2492
 10976  09C1  30FF               	movlw	255
 10977  09C2  06C9               	xorwf	___ftadd@f2,f
 10978  09C3  30FF               	movlw	255
 10979  09C4  06CA               	xorwf	___ftadd@f2+1,f
 10980  09C5  30FF               	movlw	255
 10981  09C6  06CB               	xorwf	___ftadd@f2+2,f
 10982  09C7  3001               	movlw	1
 10983  09C8  07C9               	addwf	___ftadd@f2,f
 10984  09C9  3000               	movlw	0
 10985  09CA  1803               	skipnc
 10986  09CB  3001               	movlw	1
 10987  09CC  07CA               	addwf	___ftadd@f2+1,f
 10988  09CD  3000               	movlw	0
 10989  09CE  1803               	skipnc
 10990  09CF  3001               	movlw	1
 10991  09D0  07CB               	addwf	___ftadd@f2+2,f
 10992  09D1                     l2492:	
 10993  09D1  01D0               	clrf	___ftadd@sign
 10994  09D2  0846               	movf	___ftadd@f1,w
 10995  09D3  07C9               	addwf	___ftadd@f2,f
 10996  09D4  0847               	movf	___ftadd@f1+1,w
 10997  09D5  3DCA               	addwfc	___ftadd@f2+1,f
 10998  09D6  0848               	movf	___ftadd@f1+2,w
 10999  09D7  3DCB               	addwfc	___ftadd@f2+2,f
 11000  09D8  1FCB               	btfss	___ftadd@f2+2,7
 11001  09D9  29EC               	goto	l2502
 11002  09DA  30FF               	movlw	255
 11003  09DB  06C9               	xorwf	___ftadd@f2,f
 11004  09DC  30FF               	movlw	255
 11005  09DD  06CA               	xorwf	___ftadd@f2+1,f
 11006  09DE  30FF               	movlw	255
 11007  09DF  06CB               	xorwf	___ftadd@f2+2,f
 11008  09E0  3001               	movlw	1
 11009  09E1  07C9               	addwf	___ftadd@f2,f
 11010  09E2  3000               	movlw	0
 11011  09E3  1803               	skipnc
 11012  09E4  3001               	movlw	1
 11013  09E5  07CA               	addwf	___ftadd@f2+1,f
 11014  09E6  3000               	movlw	0
 11015  09E7  1803               	skipnc
 11016  09E8  3001               	movlw	1
 11017  09E9  07CB               	addwf	___ftadd@f2+2,f
 11018  09EA  01D0               	clrf	___ftadd@sign
 11019  09EB  0AD0               	incf	___ftadd@sign,f
 11020  09EC                     l2502:	
 11021  09EC  0849               	movf	___ftadd@f2,w
 11022  09ED  00F0               	movwf	___ftpack@arg
 11023  09EE  084A               	movf	___ftadd@f2+1,w
 11024  09EF  00F1               	movwf	___ftpack@arg+1
 11025  09F0  084B               	movf	___ftadd@f2+2,w
 11026  09F1  00F2               	movwf	___ftpack@arg+2
 11027  09F2  0852               	movf	___ftadd@exp1,w
 11028  09F3  00CC               	movwf	??___ftadd
 11029  09F4  084C               	movf	??___ftadd,w
 11030  09F5  00F3               	movwf	___ftpack@exp
 11031  09F6  0850               	movf	___ftadd@sign,w
 11032  09F7  00CD               	movwf	??___ftadd+1
 11033  09F8  084D               	movf	??___ftadd+1,w
 11034  09F9  00F4               	movwf	___ftpack@sign
 11035  09FA  3180  200C         	fcall	___ftpack
 11036  09FC  0870               	movf	?___ftpack,w
 11037  09FD  0020               	movlb	0	; select bank0
 11038  09FE  00C6               	movwf	?___ftadd
 11039  09FF  0871               	movf	?___ftpack+1,w
 11040  0A00  00C7               	movwf	?___ftadd+1
 11041  0A01  0872               	movf	?___ftpack+2,w
 11042  0A02  00C8               	movwf	?___ftadd+2
 11043  0A03  0008               	return
 11044  0A04                     __end_of___ftadd:	
 11045                           
 11046                           	psect	text21
 11047  1244                     __ptext21:	
 11048 ;; *************** function ___ftge *****************
 11049 ;; Defined at:
 11050 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftge.c"
 11051 ;; Parameters:    Size  Location     Type
 11052 ;;  ff1             3    0[COMMON] float 
 11053 ;;  ff2             3    3[COMMON] float 
 11054 ;; Auto vars:     Size  Location     Type
 11055 ;;		None
 11056 ;; Return value:  Size  Location     Type
 11057 ;;		None               void
 11058 ;; Registers used:
 11059 ;;		wreg, status,2, status,0
 11060 ;; Tracked objects:
 11061 ;;		On entry : 0/0
 11062 ;;		On exit  : 0/0
 11063 ;;		Unchanged: 0/0
 11064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11065 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11066 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11067 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11068 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11069 ;;Total ram usage:        9 bytes
 11070 ;; Hardware stack levels used:    1
 11071 ;; This function calls:
 11072 ;;		Nothing
 11073 ;; This function is called by:
 11074 ;;		_sprintf
 11075 ;;		_log
 11076 ;; This function uses a non-reentrant model
 11077 ;;
 11078                           
 11079                           
 11080                           ;psect for function ___ftge
 11081  1244                     ___ftge:	
 11082                           
 11083                           ;incstack = 0
 11084                           ; Regs used in ___ftge: [wreg+status,2+status,0]
 11085  1244  1FF2               	btfss	___ftge@ff1+2,7
 11086  1245  2A5A               	goto	l2858
 11087  1246  0970               	comf	___ftge@ff1,w
 11088  1247  00F6               	movwf	??___ftge
 11089  1248  0971               	comf	___ftge@ff1+1,w
 11090  1249  00F7               	movwf	??___ftge+1
 11091  124A  0972               	comf	___ftge@ff1+2,w
 11092  124B  00F8               	movwf	??___ftge+2
 11093  124C  0AF6               	incf	??___ftge,f
 11094  124D  1903               	skipnz
 11095  124E  0AF7               	incf	??___ftge+1,f
 11096  124F  1903               	skipnz
 11097  1250  0AF8               	incf	??___ftge+2,f
 11098  1251  3000               	movlw	0
 11099  1252  0776               	addwf	??___ftge,w
 11100  1253  00F0               	movwf	___ftge@ff1
 11101  1254  3000               	movlw	0
 11102  1255  3D77               	addwfc	??___ftge+1,w
 11103  1256  00F1               	movwf	___ftge@ff1+1
 11104  1257  3080               	movlw	128
 11105  1258  3D78               	addwfc	??___ftge+2,w
 11106  1259  00F2               	movwf	___ftge@ff1+2
 11107  125A                     l2858:	
 11108  125A  1FF5               	btfss	___ftge@ff2+2,7
 11109  125B  2A70               	goto	l2862
 11110  125C  0973               	comf	___ftge@ff2,w
 11111  125D  00F6               	movwf	??___ftge
 11112  125E  0974               	comf	___ftge@ff2+1,w
 11113  125F  00F7               	movwf	??___ftge+1
 11114  1260  0975               	comf	___ftge@ff2+2,w
 11115  1261  00F8               	movwf	??___ftge+2
 11116  1262  0AF6               	incf	??___ftge,f
 11117  1263  1903               	skipnz
 11118  1264  0AF7               	incf	??___ftge+1,f
 11119  1265  1903               	skipnz
 11120  1266  0AF8               	incf	??___ftge+2,f
 11121  1267  3000               	movlw	0
 11122  1268  0776               	addwf	??___ftge,w
 11123  1269  00F3               	movwf	___ftge@ff2
 11124  126A  3000               	movlw	0
 11125  126B  3D77               	addwfc	??___ftge+1,w
 11126  126C  00F4               	movwf	___ftge@ff2+1
 11127  126D  3080               	movlw	128
 11128  126E  3D78               	addwfc	??___ftge+2,w
 11129  126F  00F5               	movwf	___ftge@ff2+2
 11130  1270                     l2862:	
 11131  1270  3080               	movlw	128
 11132  1271  06F2               	xorwf	___ftge@ff1+2,f
 11133  1272  3080               	movlw	128
 11134  1273  06F5               	xorwf	___ftge@ff2+2,f
 11135  1274  0875               	movf	___ftge@ff2+2,w
 11136  1275  0272               	subwf	___ftge@ff1+2,w
 11137  1276  1D03               	skipz
 11138  1277  0008               	return
 11139  1278  0874               	movf	___ftge@ff2+1,w
 11140  1279  0271               	subwf	___ftge@ff1+1,w
 11141  127A  1D03               	skipz
 11142  127B  0008               	return
 11143  127C  0873               	movf	___ftge@ff2,w
 11144  127D  0270               	subwf	___ftge@ff1,w
 11145  127E  0008               	return
 11146  127F                     __end_of___ftge:	
 11147                           
 11148                           	psect	text22
 11149  117B                     __ptext22:	
 11150 ;; *************** function ___awtoft *****************
 11151 ;; Defined at:
 11152 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awtoft.c"
 11153 ;; Parameters:    Size  Location     Type
 11154 ;;  c               2    8[COMMON] int 
 11155 ;; Auto vars:     Size  Location     Type
 11156 ;;  sign            1   13[COMMON] unsigned char 
 11157 ;; Return value:  Size  Location     Type
 11158 ;;                  3    8[COMMON] float 
 11159 ;; Registers used:
 11160 ;;		wreg, status,2, status,0, pclath, cstack
 11161 ;; Tracked objects:
 11162 ;;		On entry : 0/0
 11163 ;;		On exit  : 0/0
 11164 ;;		Unchanged: 0/0
 11165 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11166 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11167 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11168 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11169 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11170 ;;Total ram usage:        6 bytes
 11171 ;; Hardware stack levels used:    1
 11172 ;; Hardware stack levels required when called:    1
 11173 ;; This function calls:
 11174 ;;		___ftpack
 11175 ;; This function is called by:
 11176 ;;		_log
 11177 ;; This function uses a non-reentrant model
 11178 ;;
 11179                           
 11180                           
 11181                           ;psect for function ___awtoft
 11182  117B                     ___awtoft:	
 11183                           
 11184                           ;incstack = 0
 11185                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 11186  117B  01FD               	clrf	___awtoft@sign
 11187  117C  1FF9               	btfss	___awtoft@c+1,7
 11188  117D  2985               	goto	l2850
 11189  117E  09F8               	comf	___awtoft@c,f
 11190  117F  09F9               	comf	___awtoft@c+1,f
 11191  1180  0AF8               	incf	___awtoft@c,f
 11192  1181  1903               	skipnz
 11193  1182  0AF9               	incf	___awtoft@c+1,f
 11194  1183  01FD               	clrf	___awtoft@sign
 11195  1184  0AFD               	incf	___awtoft@sign,f
 11196  1185                     l2850:	
 11197  1185  0878               	movf	___awtoft@c,w
 11198  1186  00F0               	movwf	___ftpack@arg
 11199  1187  0879               	movf	___awtoft@c+1,w
 11200  1188  00F1               	movwf	___ftpack@arg+1
 11201  1189  01F2               	clrf	___ftpack@arg+2
 11202  118A  308E               	movlw	142
 11203  118B  00FB               	movwf	??___awtoft
 11204  118C  087B               	movf	??___awtoft,w
 11205  118D  00F3               	movwf	___ftpack@exp
 11206  118E  087D               	movf	___awtoft@sign,w
 11207  118F  00FC               	movwf	??___awtoft+1
 11208  1190  087C               	movf	??___awtoft+1,w
 11209  1191  00F4               	movwf	___ftpack@sign
 11210  1192  3180  200C         	fcall	___ftpack
 11211  1194  0870               	movf	?___ftpack,w
 11212  1195  00F8               	movwf	?___awtoft
 11213  1196  0871               	movf	?___ftpack+1,w
 11214  1197  00F9               	movwf	?___awtoft+1
 11215  1198  0872               	movf	?___ftpack+2,w
 11216  1199  00FA               	movwf	?___awtoft+2
 11217  119A  0008               	return
 11218  119B                     __end_of___awtoft:	
 11219                           
 11220                           	psect	text23
 11221  10B4                     __ptext23:	
 11222 ;; *************** function ___lwtoft *****************
 11223 ;; Defined at:
 11224 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwtoft.c"
 11225 ;; Parameters:    Size  Location     Type
 11226 ;;  c               2    8[COMMON] unsigned int 
 11227 ;; Auto vars:     Size  Location     Type
 11228 ;;		None
 11229 ;; Return value:  Size  Location     Type
 11230 ;;                  3    8[COMMON] float 
 11231 ;; Registers used:
 11232 ;;		wreg, status,2, status,0, pclath, cstack
 11233 ;; Tracked objects:
 11234 ;;		On entry : 0/0
 11235 ;;		On exit  : 0/0
 11236 ;;		Unchanged: 0/0
 11237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11238 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11239 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11240 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11241 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11242 ;;Total ram usage:        4 bytes
 11243 ;; Hardware stack levels used:    1
 11244 ;; Hardware stack levels required when called:    1
 11245 ;; This function calls:
 11246 ;;		___ftpack
 11247 ;; This function is called by:
 11248 ;;		_main
 11249 ;; This function uses a non-reentrant model
 11250 ;;
 11251                           
 11252                           
 11253                           ;psect for function ___lwtoft
 11254  10B4                     ___lwtoft:	
 11255                           
 11256                           ;incstack = 0
 11257                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
 11258  10B4  0878               	movf	___lwtoft@c,w
 11259  10B5  00F0               	movwf	___ftpack@arg
 11260  10B6  0879               	movf	___lwtoft@c+1,w
 11261  10B7  00F1               	movwf	___ftpack@arg+1
 11262  10B8  01F2               	clrf	___ftpack@arg+2
 11263  10B9  308E               	movlw	142
 11264  10BA  00FB               	movwf	??___lwtoft
 11265  10BB  087B               	movf	??___lwtoft,w
 11266  10BC  00F3               	movwf	___ftpack@exp
 11267  10BD  01F4               	clrf	___ftpack@sign
 11268  10BE  3180  200C         	fcall	___ftpack
 11269  10C0  0870               	movf	?___ftpack,w
 11270  10C1  00F8               	movwf	?___lwtoft
 11271  10C2  0871               	movf	?___ftpack+1,w
 11272  10C3  00F9               	movwf	?___lwtoft+1
 11273  10C4  0872               	movf	?___ftpack+2,w
 11274  10C5  00FA               	movwf	?___lwtoft+2
 11275  10C6  0008               	return
 11276  10C7                     __end_of___lwtoft:	
 11277                           
 11278                           	psect	text24
 11279  15F6                     __ptext24:	
 11280 ;; *************** function ___ftdiv *****************
 11281 ;; Defined at:
 11282 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftdiv.c"
 11283 ;; Parameters:    Size  Location     Type
 11284 ;;  f2              3    0[BANK0 ] float 
 11285 ;;  f1              3    3[BANK0 ] float 
 11286 ;; Auto vars:     Size  Location     Type
 11287 ;;  f3              3   11[BANK0 ] float 
 11288 ;;  sign            1   15[BANK0 ] unsigned char 
 11289 ;;  exp             1   14[BANK0 ] unsigned char 
 11290 ;;  cntr            1   10[BANK0 ] unsigned char 
 11291 ;; Return value:  Size  Location     Type
 11292 ;;                  3    0[BANK0 ] float 
 11293 ;; Registers used:
 11294 ;;		wreg, status,2, status,0, pclath, cstack
 11295 ;; Tracked objects:
 11296 ;;		On entry : 0/0
 11297 ;;		On exit  : 0/0
 11298 ;;		Unchanged: 0/0
 11299 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11300 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11301 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11302 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11303 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11304 ;;Total ram usage:       16 bytes
 11305 ;; Hardware stack levels used:    1
 11306 ;; Hardware stack levels required when called:    1
 11307 ;; This function calls:
 11308 ;;		___ftpack
 11309 ;; This function is called by:
 11310 ;;		_main
 11311 ;; This function uses a non-reentrant model
 11312 ;;
 11313                           
 11314                           
 11315                           ;psect for function ___ftdiv
 11316  15F6                     ___ftdiv:	
 11317                           
 11318                           ;incstack = 0
 11319                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 11320  15F6  0020               	movlb	0	; select bank0
 11321  15F7  0823               	movf	___ftdiv@f1,w
 11322  15F8  00A6               	movwf	??___ftdiv
 11323  15F9  0824               	movf	___ftdiv@f1+1,w
 11324  15FA  00A7               	movwf	??___ftdiv+1
 11325  15FB  0825               	movf	___ftdiv@f1+2,w
 11326  15FC  00A8               	movwf	??___ftdiv+2
 11327  15FD  1003               	clrc
 11328  15FE  0D27               	rlf	??___ftdiv+1,w
 11329  15FF  0D28               	rlf	??___ftdiv+2,w
 11330  1600  00A9               	movwf	??___ftdiv+3
 11331  1601  0829               	movf	??___ftdiv+3,w
 11332  1602  00AE               	movwf	___ftdiv@exp
 11333  1603  082E               	movf	___ftdiv@exp,w
 11334  1604  1D03               	btfss	3,2
 11335  1605  2E0D               	goto	l3462
 11336  1606  3000               	movlw	0
 11337  1607  00A0               	movwf	?___ftdiv
 11338  1608  3000               	movlw	0
 11339  1609  00A1               	movwf	?___ftdiv+1
 11340  160A  3000               	movlw	0
 11341  160B  00A2               	movwf	?___ftdiv+2
 11342  160C  0008               	return
 11343  160D                     l3462:	
 11344  160D  0820               	movf	___ftdiv@f2,w
 11345  160E  00A6               	movwf	??___ftdiv
 11346  160F  0821               	movf	___ftdiv@f2+1,w
 11347  1610  00A7               	movwf	??___ftdiv+1
 11348  1611  0822               	movf	___ftdiv@f2+2,w
 11349  1612  00A8               	movwf	??___ftdiv+2
 11350  1613  1003               	clrc
 11351  1614  0D27               	rlf	??___ftdiv+1,w
 11352  1615  0D28               	rlf	??___ftdiv+2,w
 11353  1616  00A9               	movwf	??___ftdiv+3
 11354  1617  0829               	movf	??___ftdiv+3,w
 11355  1618  00AF               	movwf	___ftdiv@sign
 11356  1619  082F               	movf	___ftdiv@sign,w
 11357  161A  1D03               	btfss	3,2
 11358  161B  2E23               	goto	l3468
 11359  161C  3000               	movlw	0
 11360  161D  00A0               	movwf	?___ftdiv
 11361  161E  3000               	movlw	0
 11362  161F  00A1               	movwf	?___ftdiv+1
 11363  1620  3000               	movlw	0
 11364  1621  00A2               	movwf	?___ftdiv+2
 11365  1622  0008               	return
 11366  1623                     l3468:	
 11367  1623  3000               	movlw	0
 11368  1624  00AB               	movwf	___ftdiv@f3
 11369  1625  3000               	movlw	0
 11370  1626  00AC               	movwf	___ftdiv@f3+1
 11371  1627  3000               	movlw	0
 11372  1628  00AD               	movwf	___ftdiv@f3+2
 11373  1629  3089               	movlw	137
 11374  162A  072F               	addwf	___ftdiv@sign,w
 11375  162B  00A6               	movwf	??___ftdiv
 11376  162C  0826               	movf	??___ftdiv,w
 11377  162D  02AE               	subwf	___ftdiv@exp,f
 11378  162E  0823               	movf	___ftdiv@f1,w
 11379  162F  00A6               	movwf	??___ftdiv
 11380  1630  0824               	movf	___ftdiv@f1+1,w
 11381  1631  00A7               	movwf	??___ftdiv+1
 11382  1632  0825               	movf	___ftdiv@f1+2,w
 11383  1633  00A8               	movwf	??___ftdiv+2
 11384  1634  3010               	movlw	16
 11385  1635                     u4555:	
 11386  1635  36A8               	lsrf	??___ftdiv+2,f
 11387  1636  0CA7               	rrf	??___ftdiv+1,f
 11388  1637  0CA6               	rrf	??___ftdiv,f
 11389  1638  0B89               	decfsz	9,f
 11390  1639  2E35               	goto	u4555
 11391  163A  0826               	movf	??___ftdiv,w
 11392  163B  00A9               	movwf	??___ftdiv+3
 11393  163C  0829               	movf	??___ftdiv+3,w
 11394  163D  00AF               	movwf	___ftdiv@sign
 11395  163E  0820               	movf	___ftdiv@f2,w
 11396  163F  00A6               	movwf	??___ftdiv
 11397  1640  0821               	movf	___ftdiv@f2+1,w
 11398  1641  00A7               	movwf	??___ftdiv+1
 11399  1642  0822               	movf	___ftdiv@f2+2,w
 11400  1643  00A8               	movwf	??___ftdiv+2
 11401  1644  3010               	movlw	16
 11402  1645                     u4565:	
 11403  1645  36A8               	lsrf	??___ftdiv+2,f
 11404  1646  0CA7               	rrf	??___ftdiv+1,f
 11405  1647  0CA6               	rrf	??___ftdiv,f
 11406  1648  0B89               	decfsz	9,f
 11407  1649  2E45               	goto	u4565
 11408  164A  0826               	movf	??___ftdiv,w
 11409  164B  00A9               	movwf	??___ftdiv+3
 11410  164C  0829               	movf	??___ftdiv+3,w
 11411  164D  06AF               	xorwf	___ftdiv@sign,f
 11412  164E  3080               	movlw	128
 11413  164F  00A6               	movwf	??___ftdiv
 11414  1650  0826               	movf	??___ftdiv,w
 11415  1651  05AF               	andwf	___ftdiv@sign,f
 11416  1652  17A4               	bsf	___ftdiv@f1+1,7
 11417  1653  30FF               	movlw	255
 11418  1654  05A3               	andwf	___ftdiv@f1,f
 11419  1655  30FF               	movlw	255
 11420  1656  05A4               	andwf	___ftdiv@f1+1,f
 11421  1657  3000               	movlw	0
 11422  1658  05A5               	andwf	___ftdiv@f1+2,f
 11423  1659  17A1               	bsf	___ftdiv@f2+1,7
 11424  165A  30FF               	movlw	255
 11425  165B  05A0               	andwf	___ftdiv@f2,f
 11426  165C  30FF               	movlw	255
 11427  165D  05A1               	andwf	___ftdiv@f2+1,f
 11428  165E  3000               	movlw	0
 11429  165F  05A2               	andwf	___ftdiv@f2+2,f
 11430  1660  3018               	movlw	24
 11431  1661  00A6               	movwf	??___ftdiv
 11432  1662  0826               	movf	??___ftdiv,w
 11433  1663  00AA               	movwf	___ftdiv@cntr
 11434  1664                     l3482:	
 11435  1664  3001               	movlw	1
 11436  1665                     u4575:	
 11437  1665  35AB               	lslf	___ftdiv@f3,f
 11438  1666  0DAC               	rlf	___ftdiv@f3+1,f
 11439  1667  0DAD               	rlf	___ftdiv@f3+2,f
 11440  1668  0B89               	decfsz	9,f
 11441  1669  2E65               	goto	u4575
 11442  166A  0822               	movf	___ftdiv@f2+2,w
 11443  166B  0225               	subwf	___ftdiv@f1+2,w
 11444  166C  1D03               	skipz
 11445  166D  2E74               	goto	u4585
 11446  166E  0821               	movf	___ftdiv@f2+1,w
 11447  166F  0224               	subwf	___ftdiv@f1+1,w
 11448  1670  1D03               	skipz
 11449  1671  2E74               	goto	u4585
 11450  1672  0820               	movf	___ftdiv@f2,w
 11451  1673  0223               	subwf	___ftdiv@f1,w
 11452  1674                     u4585:	
 11453  1674  1C03               	skipc
 11454  1675  2E7D               	goto	l3490
 11455  1676  0820               	movf	___ftdiv@f2,w
 11456  1677  02A3               	subwf	___ftdiv@f1,f
 11457  1678  0821               	movf	___ftdiv@f2+1,w
 11458  1679  3BA4               	subwfb	___ftdiv@f1+1,f
 11459  167A  0822               	movf	___ftdiv@f2+2,w
 11460  167B  3BA5               	subwfb	___ftdiv@f1+2,f
 11461  167C  142B               	bsf	___ftdiv@f3,0
 11462  167D                     l3490:	
 11463  167D  3001               	movlw	1
 11464  167E                     u4595:	
 11465  167E  35A3               	lslf	___ftdiv@f1,f
 11466  167F  0DA4               	rlf	___ftdiv@f1+1,f
 11467  1680  0DA5               	rlf	___ftdiv@f1+2,f
 11468  1681  0B89               	decfsz	9,f
 11469  1682  2E7E               	goto	u4595
 11470  1683  3001               	movlw	1
 11471  1684  02AA               	subwf	___ftdiv@cntr,f
 11472  1685  1D03               	btfss	3,2
 11473  1686  2E64               	goto	l3482
 11474  1687  082B               	movf	___ftdiv@f3,w
 11475  1688  00F0               	movwf	___ftpack@arg
 11476  1689  082C               	movf	___ftdiv@f3+1,w
 11477  168A  00F1               	movwf	___ftpack@arg+1
 11478  168B  082D               	movf	___ftdiv@f3+2,w
 11479  168C  00F2               	movwf	___ftpack@arg+2
 11480  168D  082E               	movf	___ftdiv@exp,w
 11481  168E  00A6               	movwf	??___ftdiv
 11482  168F  0826               	movf	??___ftdiv,w
 11483  1690  00F3               	movwf	___ftpack@exp
 11484  1691  082F               	movf	___ftdiv@sign,w
 11485  1692  00A7               	movwf	??___ftdiv+1
 11486  1693  0827               	movf	??___ftdiv+1,w
 11487  1694  00F4               	movwf	___ftpack@sign
 11488  1695  3180  200C         	fcall	___ftpack
 11489  1697  0870               	movf	?___ftpack,w
 11490  1698  0020               	movlb	0	; select bank0
 11491  1699  00A0               	movwf	?___ftdiv
 11492  169A  0871               	movf	?___ftpack+1,w
 11493  169B  00A1               	movwf	?___ftdiv+1
 11494  169C  0872               	movf	?___ftpack+2,w
 11495  169D  00A2               	movwf	?___ftdiv+2
 11496  169E  0008               	return
 11497  169F                     __end_of___ftdiv:	
 11498                           
 11499                           	psect	text25
 11500  000C                     __ptext25:	
 11501 ;; *************** function ___ftpack *****************
 11502 ;; Defined at:
 11503 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\float.c"
 11504 ;; Parameters:    Size  Location     Type
 11505 ;;  arg             3    0[COMMON] unsigned um
 11506 ;;  exp             1    3[COMMON] unsigned char 
 11507 ;;  sign            1    4[COMMON] unsigned char 
 11508 ;; Auto vars:     Size  Location     Type
 11509 ;;		None
 11510 ;; Return value:  Size  Location     Type
 11511 ;;                  3    0[COMMON] float 
 11512 ;; Registers used:
 11513 ;;		wreg, status,2, status,0
 11514 ;; Tracked objects:
 11515 ;;		On entry : 0/0
 11516 ;;		On exit  : 0/0
 11517 ;;		Unchanged: 0/0
 11518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11519 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11520 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11521 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11522 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11523 ;;Total ram usage:        8 bytes
 11524 ;; Hardware stack levels used:    1
 11525 ;; This function calls:
 11526 ;;		Nothing
 11527 ;; This function is called by:
 11528 ;;		___awtoft
 11529 ;;		___ftadd
 11530 ;;		___ftdiv
 11531 ;;		___ftmul
 11532 ;;		___lltoft
 11533 ;;		___lwtoft
 11534 ;; This function uses a non-reentrant model
 11535 ;;
 11536                           
 11537                           
 11538                           ;psect for function ___ftpack
 11539  000C                     ___ftpack:	
 11540                           
 11541                           ;incstack = 0
 11542                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 11543  000C  0873               	movf	___ftpack@exp,w
 11544  000D  1903               	btfsc	3,2
 11545  000E  2814               	goto	l2296
 11546  000F  0872               	movf	___ftpack@arg+2,w
 11547  0010  0471               	iorwf	___ftpack@arg+1,w
 11548  0011  0470               	iorwf	___ftpack@arg,w
 11549  0012  1D03               	skipz
 11550  0013  2825               	goto	l2302
 11551  0014                     l2296:	
 11552  0014  3000               	movlw	0
 11553  0015  00F0               	movwf	?___ftpack
 11554  0016  3000               	movlw	0
 11555  0017  00F1               	movwf	?___ftpack+1
 11556  0018  3000               	movlw	0
 11557  0019  00F2               	movwf	?___ftpack+2
 11558  001A  0008               	return
 11559  001B                     l2300:	
 11560  001B  3001               	movlw	1
 11561  001C  00F5               	movwf	??___ftpack
 11562  001D  0875               	movf	??___ftpack,w
 11563  001E  07F3               	addwf	___ftpack@exp,f
 11564  001F  3001               	movlw	1
 11565  0020                     u2415:	
 11566  0020  36F2               	lsrf	___ftpack@arg+2,f
 11567  0021  0CF1               	rrf	___ftpack@arg+1,f
 11568  0022  0CF0               	rrf	___ftpack@arg,f
 11569  0023  0B89               	decfsz	9,f
 11570  0024  2820               	goto	u2415
 11571  0025                     l2302:	
 11572  0025  30FE               	movlw	254
 11573  0026  0572               	andwf	___ftpack@arg+2,w
 11574  0027  1903               	btfsc	3,2
 11575  0028  283E               	goto	l649
 11576  0029  281B               	goto	l2300
 11577  002A                     l2304:	
 11578  002A  3001               	movlw	1
 11579  002B  00F5               	movwf	??___ftpack
 11580  002C  0875               	movf	??___ftpack,w
 11581  002D  07F3               	addwf	___ftpack@exp,f
 11582  002E  3001               	movlw	1
 11583  002F  07F0               	addwf	___ftpack@arg,f
 11584  0030  3000               	movlw	0
 11585  0031  1803               	skipnc
 11586  0032  3001               	movlw	1
 11587  0033  07F1               	addwf	___ftpack@arg+1,f
 11588  0034  3000               	movlw	0
 11589  0035  1803               	skipnc
 11590  0036  3001               	movlw	1
 11591  0037  07F2               	addwf	___ftpack@arg+2,f
 11592  0038  3001               	movlw	1
 11593  0039                     u2435:	
 11594  0039  36F2               	lsrf	___ftpack@arg+2,f
 11595  003A  0CF1               	rrf	___ftpack@arg+1,f
 11596  003B  0CF0               	rrf	___ftpack@arg,f
 11597  003C  0B89               	decfsz	9,f
 11598  003D  2839               	goto	u2435
 11599  003E                     l649:	
 11600  003E  30FF               	movlw	255
 11601  003F  0572               	andwf	___ftpack@arg+2,w
 11602  0040  1903               	btfsc	3,2
 11603  0041  284B               	goto	l2312
 11604  0042  282A               	goto	l2304
 11605  0043                     l2310:	
 11606  0043  3001               	movlw	1
 11607  0044  02F3               	subwf	___ftpack@exp,f
 11608  0045  3001               	movlw	1
 11609  0046                     u2455:	
 11610  0046  35F0               	lslf	___ftpack@arg,f
 11611  0047  0DF1               	rlf	___ftpack@arg+1,f
 11612  0048  0DF2               	rlf	___ftpack@arg+2,f
 11613  0049  0B89               	decfsz	9,f
 11614  004A  2846               	goto	u2455
 11615  004B                     l2312:	
 11616  004B  1BF1               	btfsc	___ftpack@arg+1,7
 11617  004C  2851               	goto	l656
 11618  004D  3002               	movlw	2
 11619  004E  0273               	subwf	___ftpack@exp,w
 11620  004F  1803               	skipnc
 11621  0050  2843               	goto	l2310
 11622  0051                     l656:	
 11623  0051  1873               	btfsc	___ftpack@exp,0
 11624  0052  2859               	goto	l657
 11625  0053  30FF               	movlw	255
 11626  0054  05F0               	andwf	___ftpack@arg,f
 11627  0055  307F               	movlw	127
 11628  0056  05F1               	andwf	___ftpack@arg+1,f
 11629  0057  30FF               	movlw	255
 11630  0058  05F2               	andwf	___ftpack@arg+2,f
 11631  0059                     l657:	
 11632  0059  1003               	clrc
 11633  005A  0CF3               	rrf	___ftpack@exp,f
 11634  005B  0873               	movf	___ftpack@exp,w
 11635  005C  00F5               	movwf	??___ftpack
 11636  005D  01F6               	clrf	??___ftpack+1
 11637  005E  01F7               	clrf	??___ftpack+2
 11638  005F  3010               	movlw	16
 11639  0060                     u2495:	
 11640  0060  35F5               	lslf	??___ftpack,f
 11641  0061  0DF6               	rlf	??___ftpack+1,f
 11642  0062  0DF7               	rlf	??___ftpack+2,f
 11643  0063  0B89               	decfsz	9,f
 11644  0064  2860               	goto	u2495
 11645  0065  0875               	movf	??___ftpack,w
 11646  0066  04F0               	iorwf	___ftpack@arg,f
 11647  0067  0876               	movf	??___ftpack+1,w
 11648  0068  04F1               	iorwf	___ftpack@arg+1,f
 11649  0069  0877               	movf	??___ftpack+2,w
 11650  006A  04F2               	iorwf	___ftpack@arg+2,f
 11651  006B  0874               	movf	___ftpack@sign,w
 11652  006C  1903               	btfsc	3,2
 11653  006D  0008               	return
 11654  006E  17F2               	bsf	___ftpack@arg+2,7
 11655  006F  0008               	return
 11656  0070                     __end_of___ftpack:	
 11657                           
 11658                           	psect	text26
 11659  14ED                     __ptext26:	
 11660 ;; *************** function ___aldiv *****************
 11661 ;; Defined at:
 11662 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\aldiv.c"
 11663 ;; Parameters:    Size  Location     Type
 11664 ;;  divisor         4    0[COMMON] long 
 11665 ;;  dividend        4    4[COMMON] long 
 11666 ;; Auto vars:     Size  Location     Type
 11667 ;;  quotient        4    2[BANK0 ] long 
 11668 ;;  sign            1    1[BANK0 ] unsigned char 
 11669 ;;  counter         1    0[BANK0 ] unsigned char 
 11670 ;; Return value:  Size  Location     Type
 11671 ;;                  4    0[COMMON] long 
 11672 ;; Registers used:
 11673 ;;		wreg, status,2, status,0
 11674 ;; Tracked objects:
 11675 ;;		On entry : 0/0
 11676 ;;		On exit  : 0/0
 11677 ;;		Unchanged: 0/0
 11678 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11679 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11680 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11681 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11682 ;;      Totals:         9       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11683 ;;Total ram usage:       15 bytes
 11684 ;; Hardware stack levels used:    1
 11685 ;; This function calls:
 11686 ;;		Nothing
 11687 ;; This function is called by:
 11688 ;;		_main
 11689 ;; This function uses a non-reentrant model
 11690 ;;
 11691                           
 11692                           
 11693                           ;psect for function ___aldiv
 11694  14ED                     ___aldiv:	
 11695                           
 11696                           ;incstack = 0
 11697                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
 11698  14ED  0020               	movlb	0	; select bank0
 11699  14EE  01A1               	clrf	___aldiv@sign
 11700  14EF  1FF3               	btfss	___aldiv@divisor+3,7
 11701  14F0  2CFE               	goto	l526
 11702  14F1  09F0               	comf	___aldiv@divisor,f
 11703  14F2  09F1               	comf	___aldiv@divisor+1,f
 11704  14F3  09F2               	comf	___aldiv@divisor+2,f
 11705  14F4  09F3               	comf	___aldiv@divisor+3,f
 11706  14F5  0AF0               	incf	___aldiv@divisor,f
 11707  14F6  1903               	skipnz
 11708  14F7  0AF1               	incf	___aldiv@divisor+1,f
 11709  14F8  1903               	skipnz
 11710  14F9  0AF2               	incf	___aldiv@divisor+2,f
 11711  14FA  1903               	skipnz
 11712  14FB  0AF3               	incf	___aldiv@divisor+3,f
 11713  14FC  01A1               	clrf	___aldiv@sign
 11714  14FD  0AA1               	incf	___aldiv@sign,f
 11715  14FE                     l526:	
 11716  14FE  1FF7               	btfss	___aldiv@dividend+3,7
 11717  14FF  2D0F               	goto	l3426
 11718  1500  09F4               	comf	___aldiv@dividend,f
 11719  1501  09F5               	comf	___aldiv@dividend+1,f
 11720  1502  09F6               	comf	___aldiv@dividend+2,f
 11721  1503  09F7               	comf	___aldiv@dividend+3,f
 11722  1504  0AF4               	incf	___aldiv@dividend,f
 11723  1505  1903               	skipnz
 11724  1506  0AF5               	incf	___aldiv@dividend+1,f
 11725  1507  1903               	skipnz
 11726  1508  0AF6               	incf	___aldiv@dividend+2,f
 11727  1509  1903               	skipnz
 11728  150A  0AF7               	incf	___aldiv@dividend+3,f
 11729  150B  3001               	movlw	1
 11730  150C  00F8               	movwf	??___aldiv
 11731  150D  0878               	movf	??___aldiv,w
 11732  150E  06A1               	xorwf	___aldiv@sign,f
 11733  150F                     l3426:	
 11734  150F  3000               	movlw	0
 11735  1510  00A5               	movwf	___aldiv@quotient+3
 11736  1511  3000               	movlw	0
 11737  1512  00A4               	movwf	___aldiv@quotient+2
 11738  1513  3000               	movlw	0
 11739  1514  00A3               	movwf	___aldiv@quotient+1
 11740  1515  3000               	movlw	0
 11741  1516  00A2               	movwf	___aldiv@quotient
 11742  1517  0873               	movf	___aldiv@divisor+3,w
 11743  1518  0472               	iorwf	___aldiv@divisor+2,w
 11744  1519  0471               	iorwf	___aldiv@divisor+1,w
 11745  151A  0470               	iorwf	___aldiv@divisor,w
 11746  151B  1903               	skipnz
 11747  151C  2D58               	goto	l3448
 11748  151D  01A0               	clrf	___aldiv@counter
 11749  151E  0AA0               	incf	___aldiv@counter,f
 11750  151F                     l3434:	
 11751  151F  1BF3               	btfsc	___aldiv@divisor+3,7
 11752  1520  2D2D               	goto	l3436
 11753  1521  3001               	movlw	1
 11754  1522                     u4465:	
 11755  1522  35F0               	lslf	___aldiv@divisor,f
 11756  1523  0DF1               	rlf	___aldiv@divisor+1,f
 11757  1524  0DF2               	rlf	___aldiv@divisor+2,f
 11758  1525  0DF3               	rlf	___aldiv@divisor+3,f
 11759  1526  0B89               	decfsz	9,f
 11760  1527  2D22               	goto	u4465
 11761  1528  3001               	movlw	1
 11762  1529  00F8               	movwf	??___aldiv
 11763  152A  0878               	movf	??___aldiv,w
 11764  152B  07A0               	addwf	___aldiv@counter,f
 11765  152C  2D1F               	goto	l3434
 11766  152D                     l3436:	
 11767  152D  3001               	movlw	1
 11768  152E                     u4485:	
 11769  152E  35A2               	lslf	___aldiv@quotient,f
 11770  152F  0DA3               	rlf	___aldiv@quotient+1,f
 11771  1530  0DA4               	rlf	___aldiv@quotient+2,f
 11772  1531  0DA5               	rlf	___aldiv@quotient+3,f
 11773  1532  0B89               	decfsz	9,f
 11774  1533  2D2E               	goto	u4485
 11775  1534  0873               	movf	___aldiv@divisor+3,w
 11776  1535  0277               	subwf	___aldiv@dividend+3,w
 11777  1536  1D03               	skipz
 11778  1537  2D42               	goto	u4495
 11779  1538  0872               	movf	___aldiv@divisor+2,w
 11780  1539  0276               	subwf	___aldiv@dividend+2,w
 11781  153A  1D03               	skipz
 11782  153B  2D42               	goto	u4495
 11783  153C  0871               	movf	___aldiv@divisor+1,w
 11784  153D  0275               	subwf	___aldiv@dividend+1,w
 11785  153E  1D03               	skipz
 11786  153F  2D42               	goto	u4495
 11787  1540  0870               	movf	___aldiv@divisor,w
 11788  1541  0274               	subwf	___aldiv@dividend,w
 11789  1542                     u4495:	
 11790  1542  1C03               	skipc
 11791  1543  2D4D               	goto	l3444
 11792  1544  0870               	movf	___aldiv@divisor,w
 11793  1545  02F4               	subwf	___aldiv@dividend,f
 11794  1546  0871               	movf	___aldiv@divisor+1,w
 11795  1547  3BF5               	subwfb	___aldiv@dividend+1,f
 11796  1548  0872               	movf	___aldiv@divisor+2,w
 11797  1549  3BF6               	subwfb	___aldiv@dividend+2,f
 11798  154A  0873               	movf	___aldiv@divisor+3,w
 11799  154B  3BF7               	subwfb	___aldiv@dividend+3,f
 11800  154C  1422               	bsf	___aldiv@quotient,0
 11801  154D                     l3444:	
 11802  154D  3001               	movlw	1
 11803  154E                     u4505:	
 11804  154E  36F3               	lsrf	___aldiv@divisor+3,f
 11805  154F  0CF2               	rrf	___aldiv@divisor+2,f
 11806  1550  0CF1               	rrf	___aldiv@divisor+1,f
 11807  1551  0CF0               	rrf	___aldiv@divisor,f
 11808  1552  0B89               	decfsz	9,f
 11809  1553  2D4E               	goto	u4505
 11810  1554  3001               	movlw	1
 11811  1555  02A0               	subwf	___aldiv@counter,f
 11812  1556  1D03               	btfss	3,2
 11813  1557  2D2D               	goto	l3436
 11814  1558                     l3448:	
 11815  1558  0821               	movf	___aldiv@sign,w
 11816  1559  1903               	btfsc	3,2
 11817  155A  2D66               	goto	l3452
 11818  155B  09A2               	comf	___aldiv@quotient,f
 11819  155C  09A3               	comf	___aldiv@quotient+1,f
 11820  155D  09A4               	comf	___aldiv@quotient+2,f
 11821  155E  09A5               	comf	___aldiv@quotient+3,f
 11822  155F  0AA2               	incf	___aldiv@quotient,f
 11823  1560  1903               	skipnz
 11824  1561  0AA3               	incf	___aldiv@quotient+1,f
 11825  1562  1903               	skipnz
 11826  1563  0AA4               	incf	___aldiv@quotient+2,f
 11827  1564  1903               	skipnz
 11828  1565  0AA5               	incf	___aldiv@quotient+3,f
 11829  1566                     l3452:	
 11830  1566  0825               	movf	___aldiv@quotient+3,w
 11831  1567  00F3               	movwf	?___aldiv+3
 11832  1568  0824               	movf	___aldiv@quotient+2,w
 11833  1569  00F2               	movwf	?___aldiv+2
 11834  156A  0823               	movf	___aldiv@quotient+1,w
 11835  156B  00F1               	movwf	?___aldiv+1
 11836  156C  0822               	movf	___aldiv@quotient,w
 11837  156D  00F0               	movwf	?___aldiv
 11838  156E  0008               	return
 11839  156F                     __end_of___aldiv:	
 11840                           
 11841                           	psect	text27
 11842  1091                     __ptext27:	
 11843 ;; *************** function _SYSTEM_Initialize *****************
 11844 ;; Defined at:
 11845 ;;		line 68 in file "system.c"
 11846 ;; Parameters:    Size  Location     Type
 11847 ;;		None
 11848 ;; Auto vars:     Size  Location     Type
 11849 ;;		None
 11850 ;; Return value:  Size  Location     Type
 11851 ;;                  1    wreg      void 
 11852 ;; Registers used:
 11853 ;;		wreg, status,2, status,0, pclath, cstack
 11854 ;; Tracked objects:
 11855 ;;		On entry : 0/0
 11856 ;;		On exit  : 0/0
 11857 ;;		Unchanged: 0/0
 11858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11859 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11860 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11861 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11862 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11863 ;;Total ram usage:        0 bytes
 11864 ;; Hardware stack levels used:    1
 11865 ;; Hardware stack levels required when called:    1
 11866 ;; This function calls:
 11867 ;;		_ADCC_Initialize
 11868 ;;		_OSCILLATOR_Initialize
 11869 ;;		_PIN_MANAGER_Initialize
 11870 ;;		_PWM6_Initialize
 11871 ;;		_TMR2_Initialize
 11872 ;; This function is called by:
 11873 ;;		_main
 11874 ;; This function uses a non-reentrant model
 11875 ;;
 11876                           
 11877                           
 11878                           ;psect for function _SYSTEM_Initialize
 11879  1091                     _SYSTEM_Initialize:	
 11880                           
 11881                           ;system.c: 71: PIN_MANAGER_Initialize();
 11882                           
 11883                           ;incstack = 0
 11884                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
 11885  1091  3192  2213  3190   	fcall	_PIN_MANAGER_Initialize
 11886                           
 11887                           ;system.c: 72: OSCILLATOR_Initialize();
 11888  1094  3190  2038  3190   	fcall	_OSCILLATOR_Initialize
 11889                           
 11890                           ;system.c: 73: FVRCON = 0x00;
 11891  1097  0032               	movlb	18	; select bank18
 11892  1098  018C               	clrf	12	;volatile
 11893                           
 11894                           ;system.c: 74: ADCC_Initialize();
 11895  1099  3191  210D  3190   	fcall	_ADCC_Initialize
 11896                           
 11897                           ;system.c: 75: PWM6_Initialize();
 11898  109C  3190  2059  3190   	fcall	_PWM6_Initialize
 11899                           
 11900                           ;system.c: 76: TMR2_Initialize();
 11901  109F  3190  2082         	fcall	_TMR2_Initialize
 11902  10A1  0008               	return
 11903  10A2                     __end_of_SYSTEM_Initialize:	
 11904                           
 11905                           	psect	text28
 11906  1082                     __ptext28:	
 11907 ;; *************** function _TMR2_Initialize *****************
 11908 ;; Defined at:
 11909 ;;		line 4 in file "tmr2.c"
 11910 ;; Parameters:    Size  Location     Type
 11911 ;;		None
 11912 ;; Auto vars:     Size  Location     Type
 11913 ;;		None
 11914 ;; Return value:  Size  Location     Type
 11915 ;;                  1    wreg      void 
 11916 ;; Registers used:
 11917 ;;		wreg, status,2
 11918 ;; Tracked objects:
 11919 ;;		On entry : 0/0
 11920 ;;		On exit  : 0/0
 11921 ;;		Unchanged: 0/0
 11922 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11923 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11924 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11925 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11926 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11927 ;;Total ram usage:        0 bytes
 11928 ;; Hardware stack levels used:    1
 11929 ;; This function calls:
 11930 ;;		Nothing
 11931 ;; This function is called by:
 11932 ;;		_SYSTEM_Initialize
 11933 ;; This function uses a non-reentrant model
 11934 ;;
 11935                           
 11936                           
 11937                           ;psect for function _TMR2_Initialize
 11938  1082                     _TMR2_Initialize:	
 11939                           
 11940                           ;tmr2.c: 6: T2CON = 0x02;
 11941                           
 11942                           ;incstack = 0
 11943                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
 11944  1082  3002               	movlw	2
 11945  1083  0025               	movlb	5	; select bank5
 11946  1084  008E               	movwf	14	;volatile
 11947                           
 11948                           ;tmr2.c: 8: T2CLKCON = 0x01;
 11949  1085  3001               	movlw	1
 11950  1086  0090               	movwf	16	;volatile
 11951                           
 11952                           ;tmr2.c: 10: T2HLT = 0x00;
 11953  1087  018F               	clrf	15	;volatile
 11954                           
 11955                           ;tmr2.c: 12: T2RST = 0x00;
 11956  1088  0191               	clrf	17	;volatile
 11957                           
 11958                           ;tmr2.c: 14: T2PR = 0xFF;
 11959  1089  30FF               	movlw	255
 11960  108A  008D               	movwf	13	;volatile
 11961                           
 11962                           ;tmr2.c: 16: T2TMR = 0x00;
 11963  108B  018C               	clrf	12	;volatile
 11964                           
 11965                           ;tmr2.c: 18: PIR4bits.TMR2IF = 0;
 11966  108C  002E               	movlb	14	; select bank14
 11967  108D  1090               	bcf	16,1	;volatile
 11968                           
 11969                           ;tmr2.c: 20: T2CONbits.TMR2ON = 1;
 11970  108E  0025               	movlb	5	; select bank5
 11971  108F  178E               	bsf	14,7	;volatile
 11972  1090  0008               	return
 11973  1091                     __end_of_TMR2_Initialize:	
 11974                           
 11975                           	psect	text29
 11976  1059                     __ptext29:	
 11977 ;; *************** function _PWM6_Initialize *****************
 11978 ;; Defined at:
 11979 ;;		line 4 in file "pwm6.c"
 11980 ;; Parameters:    Size  Location     Type
 11981 ;;		None
 11982 ;; Auto vars:     Size  Location     Type
 11983 ;;		None
 11984 ;; Return value:  Size  Location     Type
 11985 ;;                  1    wreg      void 
 11986 ;; Registers used:
 11987 ;;		wreg, status,2, status,0
 11988 ;; Tracked objects:
 11989 ;;		On entry : 0/0
 11990 ;;		On exit  : 0/0
 11991 ;;		Unchanged: 0/0
 11992 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11993 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11994 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11995 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11996 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11997 ;;Total ram usage:        0 bytes
 11998 ;; Hardware stack levels used:    1
 11999 ;; This function calls:
 12000 ;;		Nothing
 12001 ;; This function is called by:
 12002 ;;		_SYSTEM_Initialize
 12003 ;; This function uses a non-reentrant model
 12004 ;;
 12005                           
 12006                           
 12007                           ;psect for function _PWM6_Initialize
 12008  1059                     _PWM6_Initialize:	
 12009                           
 12010                           ;pwm6.c: 6: PWM6CON = 0x80;
 12011                           
 12012                           ;incstack = 0
 12013                           ; Regs used in _PWM6_Initialize: [wreg+status,2+status,0]
 12014  1059  3080               	movlw	128
 12015  105A  0027               	movlb	7	; select bank7
 12016  105B  008E               	movwf	14	;volatile
 12017                           
 12018                           ;pwm6.c: 8: PWM6DCH = 0x3C;
 12019  105C  303C               	movlw	60
 12020  105D  008D               	movwf	13	;volatile
 12021                           
 12022                           ;pwm6.c: 10: PWM6DCL = 0x40;
 12023  105E  3040               	movlw	64
 12024  105F  008C               	movwf	12	;volatile
 12025                           
 12026                           ;pwm6.c: 12: CCPTMRS1bits.P6TSEL = 0x1;
 12027  1060  0024               	movlb	4	; select bank4
 12028  1061  081F               	movf	31,w	;volatile
 12029  1062  39F3               	andlw	-13
 12030  1063  3804               	iorlw	4
 12031  1064  009F               	movwf	31	;volatile
 12032  1065  0008               	return
 12033  1066                     __end_of_PWM6_Initialize:	
 12034                           
 12035                           	psect	text30
 12036  1213                     __ptext30:	
 12037 ;; *************** function _PIN_MANAGER_Initialize *****************
 12038 ;; Defined at:
 12039 ;;		line 5 in file "pin_manager.c"
 12040 ;; Parameters:    Size  Location     Type
 12041 ;;		None
 12042 ;; Auto vars:     Size  Location     Type
 12043 ;;  state           1    0[COMMON] unsigned char 
 12044 ;; Return value:  Size  Location     Type
 12045 ;;                  1    wreg      void 
 12046 ;; Registers used:
 12047 ;;		wreg, status,2
 12048 ;; Tracked objects:
 12049 ;;		On entry : 0/0
 12050 ;;		On exit  : 0/0
 12051 ;;		Unchanged: 0/0
 12052 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12053 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12054 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12055 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12056 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12057 ;;Total ram usage:        1 bytes
 12058 ;; Hardware stack levels used:    1
 12059 ;; This function calls:
 12060 ;;		Nothing
 12061 ;; This function is called by:
 12062 ;;		_SYSTEM_Initialize
 12063 ;; This function uses a non-reentrant model
 12064 ;;
 12065                           
 12066                           
 12067                           ;psect for function _PIN_MANAGER_Initialize
 12068  1213                     _PIN_MANAGER_Initialize:	
 12069                           
 12070                           ;pin_manager.c: 7: LATA = 0x00;
 12071                           
 12072                           ;incstack = 0
 12073                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
 12074  1213  0020               	movlb	0	; select bank0
 12075  1214  0196               	clrf	22	;volatile
 12076                           
 12077                           ;pin_manager.c: 8: LATB = 0x0;
 12078  1215  0197               	clrf	23	;volatile
 12079                           
 12080                           ;pin_manager.c: 9: LATC = 0x0;
 12081  1216  0198               	clrf	24	;volatile
 12082                           
 12083                           ;pin_manager.c: 11: WPUA = 0x00;
 12084  1217  003E               	movlb	30	; select bank30
 12085  1218  01B9               	clrf	57	;volatile
 12086                           
 12087                           ;pin_manager.c: 12: WPUB = 0x00;
 12088  1219  01C4               	clrf	68	;volatile
 12089                           
 12090                           ;pin_manager.c: 13: WPUC = 0x00;
 12091  121A  01CF               	clrf	79	;volatile
 12092                           
 12093                           ;pin_manager.c: 14: WPUE = 0x8;
 12094  121B  3008               	movlw	8
 12095  121C  00E5               	movwf	101	;volatile
 12096                           
 12097                           ;pin_manager.c: 16: TRISA = 0x04;
 12098  121D  3004               	movlw	4
 12099  121E  0020               	movlb	0	; select bank0
 12100  121F  0091               	movwf	17	;volatile
 12101                           
 12102                           ;pin_manager.c: 17: TRISB = 0x00;
 12103  1220  0192               	clrf	18	;volatile
 12104                           
 12105                           ;pin_manager.c: 18: TRISC = 0x10;
 12106  1221  3010               	movlw	16
 12107  1222  0093               	movwf	19	;volatile
 12108                           
 12109                           ;pin_manager.c: 20: ANSELA = 0x04;
 12110  1223  3004               	movlw	4
 12111  1224  003E               	movlb	30	; select bank30
 12112  1225  00B8               	movwf	56	;volatile
 12113                           
 12114                           ;pin_manager.c: 21: ANSELB = 0x00;
 12115  1226  01C3               	clrf	67	;volatile
 12116                           
 12117                           ;pin_manager.c: 22: ANSELC = 0x00;
 12118  1227  01CE               	clrf	78	;volatile
 12119                           
 12120                           ;pin_manager.c: 26: PIE0bits.IOCIE = 0;
 12121  1228  002E               	movlb	14	; select bank14
 12122  1229  1216               	bcf	22,4	;volatile
 12123                           
 12124                           ;pin_manager.c: 27: bool state = GIE;
 12125  122A  3000               	movlw	0
 12126  122B  1B8B               	btfsc	11,7	;volatile
 12127  122C  3001               	movlw	1
 12128  122D  00F0               	movwf	PIN_MANAGER_Initialize@state
 12129                           
 12130                           ;pin_manager.c: 28: GIE = 0;
 12131  122E  138B               	bcf	11,7	;volatile
 12132                           
 12133                           ;pin_manager.c: 29: PPSLOCK = 0x55;
 12134  122F  3055               	movlw	85
 12135  1230  003D               	movlb	29	; select bank29
 12136  1231  008F               	movwf	15	;volatile
 12137                           
 12138                           ;pin_manager.c: 30: PPSLOCK = 0xAA;
 12139  1232  30AA               	movlw	170
 12140  1233  008F               	movwf	15	;volatile
 12141                           
 12142                           ;pin_manager.c: 31: PPSLOCKbits.PPSLOCKED = 0x00;
 12143  1234  100F               	bcf	15,0	;volatile
 12144                           
 12145                           ;pin_manager.c: 34: RA1PPS = 0x000E;
 12146  1235  300E               	movlw	14
 12147  1236  003E               	movlb	30	; select bank30
 12148  1237  0091               	movwf	17	;volatile
 12149                           
 12150                           ;pin_manager.c: 38: PPSLOCK = 0x55;
 12151  1238  3055               	movlw	85
 12152  1239  003D               	movlb	29	; select bank29
 12153  123A  008F               	movwf	15	;volatile
 12154                           
 12155                           ;pin_manager.c: 39: PPSLOCK = 0xAA;
 12156  123B  30AA               	movlw	170
 12157  123C  008F               	movwf	15	;volatile
 12158                           
 12159                           ;pin_manager.c: 40: PPSLOCKbits.PPSLOCKED = 0x01;
 12160  123D  140F               	bsf	15,0	;volatile
 12161                           
 12162                           ;pin_manager.c: 41: GIE = state;
 12163  123E  1C70               	btfss	PIN_MANAGER_Initialize@state,0
 12164  123F  2A42               	goto	u3130
 12165  1240  178B               	bsf	11,7	;volatile
 12166  1241  0008               	return
 12167  1242                     u3130:	
 12168  1242  138B               	bcf	11,7	;volatile
 12169  1243  0008               	return
 12170  1244                     __end_of_PIN_MANAGER_Initialize:	
 12171                           
 12172                           	psect	text31
 12173  1038                     __ptext31:	
 12174 ;; *************** function _OSCILLATOR_Initialize *****************
 12175 ;; Defined at:
 12176 ;;		line 79 in file "system.c"
 12177 ;; Parameters:    Size  Location     Type
 12178 ;;		None
 12179 ;; Auto vars:     Size  Location     Type
 12180 ;;		None
 12181 ;; Return value:  Size  Location     Type
 12182 ;;                  1    wreg      void 
 12183 ;; Registers used:
 12184 ;;		wreg, status,2
 12185 ;; Tracked objects:
 12186 ;;		On entry : 0/0
 12187 ;;		On exit  : 0/0
 12188 ;;		Unchanged: 0/0
 12189 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12190 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12191 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12192 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12193 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12194 ;;Total ram usage:        0 bytes
 12195 ;; Hardware stack levels used:    1
 12196 ;; This function calls:
 12197 ;;		Nothing
 12198 ;; This function is called by:
 12199 ;;		_SYSTEM_Initialize
 12200 ;; This function uses a non-reentrant model
 12201 ;;
 12202                           
 12203                           
 12204                           ;psect for function _OSCILLATOR_Initialize
 12205  1038                     _OSCILLATOR_Initialize:	
 12206                           
 12207                           ;system.c: 94: OSCCON1 = 0x62;
 12208                           
 12209                           ;incstack = 0
 12210                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 12211  1038  3062               	movlw	98
 12212  1039  0031               	movlb	17	; select bank17
 12213  103A  008D               	movwf	13	;volatile
 12214                           
 12215                           ;system.c: 96: OSCCON3 = 0x00;
 12216  103B  018F               	clrf	15	;volatile
 12217                           
 12218                           ;system.c: 98: OSCEN = 0x00;
 12219  103C  0191               	clrf	17	;volatile
 12220                           
 12221                           ;system.c: 100: OSCFRQ = 0x02;
 12222  103D  3002               	movlw	2
 12223  103E  0093               	movwf	19	;volatile
 12224                           
 12225                           ;system.c: 102: OSCTUNE = 0x00;
 12226  103F  0192               	clrf	18	;volatile
 12227  1040  0008               	return
 12228  1041                     __end_of_OSCILLATOR_Initialize:	
 12229                           
 12230                           	psect	text32
 12231  110D                     __ptext32:	
 12232 ;; *************** function _ADCC_Initialize *****************
 12233 ;; Defined at:
 12234 ;;		line 5 in file "adcc.c"
 12235 ;; Parameters:    Size  Location     Type
 12236 ;;		None
 12237 ;; Auto vars:     Size  Location     Type
 12238 ;;		None
 12239 ;; Return value:  Size  Location     Type
 12240 ;;                  1    wreg      void 
 12241 ;; Registers used:
 12242 ;;		wreg, status,2
 12243 ;; Tracked objects:
 12244 ;;		On entry : 0/0
 12245 ;;		On exit  : 0/0
 12246 ;;		Unchanged: 0/0
 12247 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12248 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12249 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12250 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12251 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12252 ;;Total ram usage:        0 bytes
 12253 ;; Hardware stack levels used:    1
 12254 ;; This function calls:
 12255 ;;		Nothing
 12256 ;; This function is called by:
 12257 ;;		_SYSTEM_Initialize
 12258 ;; This function uses a non-reentrant model
 12259 ;;
 12260                           
 12261                           
 12262                           ;psect for function _ADCC_Initialize
 12263  110D                     _ADCC_Initialize:	
 12264                           
 12265                           ;adcc.c: 9: ADCON1 = 0x00;
 12266                           
 12267                           ;incstack = 0
 12268                           ; Regs used in _ADCC_Initialize: [wreg+status,2]
 12269  110D  0021               	movlb	1	; select bank1
 12270  110E  0194               	clrf	20	;volatile
 12271                           
 12272                           ;adcc.c: 11: ADCON2 = 0x00;
 12273  110F  0195               	clrf	21	;volatile
 12274                           
 12275                           ;adcc.c: 13: ADCON3 = 0x00;
 12276  1110  0196               	clrf	22	;volatile
 12277                           
 12278                           ;adcc.c: 15: ADACT = 0x00;
 12279  1111  0199               	clrf	25	;volatile
 12280                           
 12281                           ;adcc.c: 17: ADSTAT = 0x00;
 12282  1112  0197               	clrf	23	;volatile
 12283                           
 12284                           ;adcc.c: 19: ADCLK = 0x0F;
 12285  1113  300F               	movlw	15
 12286  1114  0098               	movwf	24	;volatile
 12287                           
 12288                           ;adcc.c: 22: ADREF = 0x00;
 12289  1115  019A               	clrf	26	;volatile
 12290                           
 12291                           ;adcc.c: 24: ADCAP = 0x00;
 12292  1116  019B               	clrf	27	;volatile
 12293                           
 12294                           ;adcc.c: 26: ADPRE = 0x00;
 12295  1117  019C               	clrf	28	;volatile
 12296                           
 12297                           ;adcc.c: 28: ADACQ = 0x00;
 12298  1118  019D               	clrf	29	;volatile
 12299                           
 12300                           ;adcc.c: 30: ADPCH = 0x00;
 12301  1119  019E               	clrf	30	;volatile
 12302                           
 12303                           ;adcc.c: 32: ADRPT = 0x00;
 12304  111A  0022               	movlb	2	; select bank2
 12305  111B  018D               	clrf	13	;volatile
 12306                           
 12307                           ;adcc.c: 34: ADLTHL = 0x00;
 12308  111C  018E               	clrf	14	;volatile
 12309                           
 12310                           ;adcc.c: 36: ADLTHH = 0x00;
 12311  111D  018F               	clrf	15	;volatile
 12312                           
 12313                           ;adcc.c: 38: ADUTHL = 0x00;
 12314  111E  0190               	clrf	16	;volatile
 12315                           
 12316                           ;adcc.c: 40: ADUTHH = 0x00;
 12317  111F  0191               	clrf	17	;volatile
 12318                           
 12319                           ;adcc.c: 42: ADSTPTL = 0x00;
 12320  1120  0192               	clrf	18	;volatile
 12321                           
 12322                           ;adcc.c: 44: ADSTPTH = 0x00;
 12323  1121  0193               	clrf	19	;volatile
 12324                           
 12325                           ;adcc.c: 47: ADCON0 = 0x84;
 12326  1122  3084               	movlw	132
 12327  1123  0021               	movlb	1	; select bank1
 12328  1124  0093               	movwf	19	;volatile
 12329  1125  0008               	return
 12330  1126                     __end_of_ADCC_Initialize:	
 12331                           
 12332                           	psect	text33
 12333  10C7                     __ptext33:	
 12334 ;; *************** function _PWM6_LoadDutyValue *****************
 12335 ;; Defined at:
 12336 ;;		line 15 in file "pwm6.c"
 12337 ;; Parameters:    Size  Location     Type
 12338 ;;  dutyValue       2    0[COMMON] unsigned int 
 12339 ;; Auto vars:     Size  Location     Type
 12340 ;;		None
 12341 ;; Return value:  Size  Location     Type
 12342 ;;                  1    wreg      void 
 12343 ;; Registers used:
 12344 ;;		wreg, status,2, status,0
 12345 ;; Tracked objects:
 12346 ;;		On entry : 0/0
 12347 ;;		On exit  : 0/0
 12348 ;;		Unchanged: 0/0
 12349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12350 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12351 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12352 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12353 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12354 ;;Total ram usage:        4 bytes
 12355 ;; Hardware stack levels used:    1
 12356 ;; This function calls:
 12357 ;;		Nothing
 12358 ;; This function is called by:
 12359 ;;		_main
 12360 ;; This function uses a non-reentrant model
 12361 ;;
 12362                           
 12363                           
 12364                           ;psect for function _PWM6_LoadDutyValue
 12365  10C7                     _PWM6_LoadDutyValue:	
 12366                           
 12367                           ;pwm6.c: 17: PWM6DCH = (dutyValue & 0x03FC)>>2;
 12368                           
 12369                           ;incstack = 0
 12370                           ; Regs used in _PWM6_LoadDutyValue: [wreg+status,2+status,0]
 12371  10C7  0871               	movf	PWM6_LoadDutyValue@dutyValue+1,w
 12372  10C8  00F3               	movwf	??_PWM6_LoadDutyValue+1
 12373  10C9  0870               	movf	PWM6_LoadDutyValue@dutyValue,w
 12374  10CA  00F2               	movwf	??_PWM6_LoadDutyValue
 12375  10CB  36F3               	lsrf	??_PWM6_LoadDutyValue+1,f
 12376  10CC  0CF2               	rrf	??_PWM6_LoadDutyValue,f
 12377  10CD  36F3               	lsrf	??_PWM6_LoadDutyValue+1,f
 12378  10CE  0CF2               	rrf	??_PWM6_LoadDutyValue,f
 12379  10CF  0872               	movf	??_PWM6_LoadDutyValue,w
 12380  10D0  0027               	movlb	7	; select bank7
 12381  10D1  008D               	movwf	13	;volatile
 12382                           
 12383                           ;pwm6.c: 19: PWM6DCL = (dutyValue & 0x0003)<<6;
 12384  10D2  0870               	movf	PWM6_LoadDutyValue@dutyValue,w
 12385  10D3  3903               	andlw	3
 12386  10D4  00F2               	movwf	??_PWM6_LoadDutyValue
 12387  10D5  3005               	movlw	5
 12388  10D6                     u3945:	
 12389  10D6  35F2               	lslf	??_PWM6_LoadDutyValue,f
 12390  10D7  3EFF               	addlw	-1
 12391  10D8  1D03               	skipz
 12392  10D9  28D6               	goto	u3945
 12393  10DA  3572               	lslf	??_PWM6_LoadDutyValue,w
 12394  10DB  008C               	movwf	12	;volatile
 12395  10DC  0008               	return
 12396  10DD                     __end_of_PWM6_LoadDutyValue:	
 12397                           
 12398                           	psect	text34
 12399  1126                     __ptext34:	
 12400 ;; *************** function _LCD_Write_String *****************
 12401 ;; Defined at:
 12402 ;;		line 239 in file "lcd.c"
 12403 ;; Parameters:    Size  Location     Type
 12404 ;;  a               1    wreg     PTR unsigned char 
 12405 ;;		 -> main@s(8), 
 12406 ;; Auto vars:     Size  Location     Type
 12407 ;;  a               1    8[COMMON] PTR unsigned char 
 12408 ;;		 -> main@s(8), 
 12409 ;;  i               2    6[COMMON] int 
 12410 ;; Return value:  Size  Location     Type
 12411 ;;                  1    wreg      void 
 12412 ;; Registers used:
 12413 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12414 ;; Tracked objects:
 12415 ;;		On entry : 0/0
 12416 ;;		On exit  : 0/0
 12417 ;;		Unchanged: 0/0
 12418 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12419 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12420 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12421 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12422 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12423 ;;Total ram usage:        4 bytes
 12424 ;; Hardware stack levels used:    1
 12425 ;; Hardware stack levels required when called:    2
 12426 ;; This function calls:
 12427 ;;		_LCD_Write_Char
 12428 ;; This function is called by:
 12429 ;;		_main
 12430 ;; This function uses a non-reentrant model
 12431 ;;
 12432                           
 12433                           
 12434                           ;psect for function _LCD_Write_String
 12435  1126                     _LCD_Write_String:	
 12436                           
 12437                           ;incstack = 0
 12438                           ; Regs used in _LCD_Write_String: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12439                           ;LCD_Write_String@a stored from wreg
 12440  1126  00F8               	movwf	LCD_Write_String@a
 12441                           
 12442                           ;lcd.c: 241: int i;
 12443                           ;lcd.c: 242: for(i=0;a[i]!='\0';i++)
 12444  1127  01F6               	clrf	LCD_Write_String@i
 12445  1128  01F7               	clrf	LCD_Write_String@i+1
 12446  1129                     l3124:	
 12447  1129  0876               	movf	LCD_Write_String@i,w
 12448  112A  0778               	addwf	LCD_Write_String@a,w
 12449  112B  00F5               	movwf	??_LCD_Write_String
 12450  112C  0875               	movf	??_LCD_Write_String,w
 12451  112D  0086               	movwf	6
 12452  112E  0187               	clrf	7
 12453  112F  0801               	movf	1,w
 12454  1130  1903               	btfsc	3,2
 12455  1131  0008               	return
 12456                           
 12457                           ;lcd.c: 243: LCD_Write_Char(a[i]);
 12458  1132  0876               	movf	LCD_Write_String@i,w
 12459  1133  0778               	addwf	LCD_Write_String@a,w
 12460  1134  00F5               	movwf	??_LCD_Write_String
 12461  1135  0875               	movf	??_LCD_Write_String,w
 12462  1136  0086               	movwf	6
 12463  1137  0187               	clrf	7
 12464  1138  0801               	movf	1,w
 12465  1139  3191  21E9  3191   	fcall	_LCD_Write_Char
 12466  113C  3001               	movlw	1
 12467  113D  07F6               	addwf	LCD_Write_String@i,f
 12468  113E  3000               	movlw	0
 12469  113F  3DF7               	addwfc	LCD_Write_String@i+1,f
 12470  1140  2929               	goto	l3124
 12471  1141                     __end_of_LCD_Write_String:	
 12472                           
 12473                           	psect	text35
 12474  146E                     __ptext35:	
 12475 ;; *************** function _LCD_Set_Cursor *****************
 12476 ;; Defined at:
 12477 ;;		line 82 in file "lcd.c"
 12478 ;; Parameters:    Size  Location     Type
 12479 ;;  x               1    wreg     unsigned char 
 12480 ;;  y               1    3[COMMON] unsigned char 
 12481 ;; Auto vars:     Size  Location     Type
 12482 ;;  x               1    6[COMMON] unsigned char 
 12483 ;;  temp            1    9[COMMON] unsigned char 
 12484 ;;  w               1    8[COMMON] unsigned char 
 12485 ;;  z               1    7[COMMON] unsigned char 
 12486 ;; Return value:  Size  Location     Type
 12487 ;;                  1    wreg      void 
 12488 ;; Registers used:
 12489 ;;		wreg, status,2, status,0, pclath, cstack
 12490 ;; Tracked objects:
 12491 ;;		On entry : 0/0
 12492 ;;		On exit  : 0/0
 12493 ;;		Unchanged: 0/0
 12494 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12495 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12496 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12497 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12498 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12499 ;;Total ram usage:        7 bytes
 12500 ;; Hardware stack levels used:    1
 12501 ;; Hardware stack levels required when called:    2
 12502 ;; This function calls:
 12503 ;;		_LCD_Cmd
 12504 ;; This function is called by:
 12505 ;;		_main
 12506 ;; This function uses a non-reentrant model
 12507 ;;
 12508                           
 12509                           
 12510                           ;psect for function _LCD_Set_Cursor
 12511  146E                     _LCD_Set_Cursor:	
 12512                           
 12513                           ;incstack = 0
 12514                           ; Regs used in _LCD_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
 12515                           ;LCD_Set_Cursor@x stored from wreg
 12516  146E  00F6               	movwf	LCD_Set_Cursor@x
 12517                           
 12518                           ;lcd.c: 109: char temp,z,w;
 12519                           ;lcd.c: 111: if(x == 0)
 12520  146F  0876               	movf	LCD_Set_Cursor@x,w
 12521  1470  1D03               	btfss	3,2
 12522  1471  2C8E               	goto	l3054
 12523                           
 12524                           ;lcd.c: 112: {
 12525                           ;lcd.c: 113: temp = 0x80 + y;
 12526  1472  0873               	movf	LCD_Set_Cursor@y,w
 12527  1473  3E80               	addlw	128
 12528  1474  00F4               	movwf	??_LCD_Set_Cursor
 12529  1475  0874               	movf	??_LCD_Set_Cursor,w
 12530  1476  00F9               	movwf	LCD_Set_Cursor@temp
 12531                           
 12532                           ;lcd.c: 115: z = temp>>4;
 12533  1477  0879               	movf	LCD_Set_Cursor@temp,w
 12534  1478  00F4               	movwf	??_LCD_Set_Cursor
 12535  1479  3004               	movlw	4
 12536  147A                     u3865:	
 12537  147A  36F4               	lsrf	??_LCD_Set_Cursor,f
 12538  147B  0B89               	decfsz	9,f
 12539  147C  2C7A               	goto	u3865
 12540  147D  0874               	movf	??_LCD_Set_Cursor,w
 12541  147E  00F5               	movwf	??_LCD_Set_Cursor+1
 12542  147F  0875               	movf	??_LCD_Set_Cursor+1,w
 12543  1480  00F7               	movwf	LCD_Set_Cursor@z
 12544                           
 12545                           ;lcd.c: 116: w = temp & 0x0F;
 12546  1481  0879               	movf	LCD_Set_Cursor@temp,w
 12547  1482  390F               	andlw	15
 12548  1483  00F4               	movwf	??_LCD_Set_Cursor
 12549  1484  0874               	movf	??_LCD_Set_Cursor,w
 12550  1485  00F8               	movwf	LCD_Set_Cursor@w
 12551                           
 12552                           ;lcd.c: 117: LCD_Cmd(z);
 12553  1486  0877               	movf	LCD_Set_Cursor@z,w
 12554  1487  3190  20A2  3194   	fcall	_LCD_Cmd
 12555                           
 12556                           ;lcd.c: 118: LCD_Cmd(w);
 12557  148A  0878               	movf	LCD_Set_Cursor@w,w
 12558  148B  3190  20A2         	fcall	_LCD_Cmd
 12559                           
 12560                           ;lcd.c: 119: }
 12561  148D  0008               	return
 12562  148E                     l3054:	
 12563                           
 12564                           ;lcd.c: 121: else if(x == 1)
 12565  148E  0376               	decf	LCD_Set_Cursor@x,w
 12566  148F  1D03               	btfss	3,2
 12567  1490  2CAD               	goto	l3064
 12568                           
 12569                           ;lcd.c: 122: {
 12570                           ;lcd.c: 123: temp = 0xC0 + y;
 12571  1491  0873               	movf	LCD_Set_Cursor@y,w
 12572  1492  3EC0               	addlw	192
 12573  1493  00F4               	movwf	??_LCD_Set_Cursor
 12574  1494  0874               	movf	??_LCD_Set_Cursor,w
 12575  1495  00F9               	movwf	LCD_Set_Cursor@temp
 12576                           
 12577                           ;lcd.c: 125: z = temp>>4;
 12578  1496  0879               	movf	LCD_Set_Cursor@temp,w
 12579  1497  00F4               	movwf	??_LCD_Set_Cursor
 12580  1498  3004               	movlw	4
 12581  1499                     u3885:	
 12582  1499  36F4               	lsrf	??_LCD_Set_Cursor,f
 12583  149A  0B89               	decfsz	9,f
 12584  149B  2C99               	goto	u3885
 12585  149C  0874               	movf	??_LCD_Set_Cursor,w
 12586  149D  00F5               	movwf	??_LCD_Set_Cursor+1
 12587  149E  0875               	movf	??_LCD_Set_Cursor+1,w
 12588  149F  00F7               	movwf	LCD_Set_Cursor@z
 12589                           
 12590                           ;lcd.c: 126: w = temp & 0x0F;
 12591  14A0  0879               	movf	LCD_Set_Cursor@temp,w
 12592  14A1  390F               	andlw	15
 12593  14A2  00F4               	movwf	??_LCD_Set_Cursor
 12594  14A3  0874               	movf	??_LCD_Set_Cursor,w
 12595  14A4  00F8               	movwf	LCD_Set_Cursor@w
 12596                           
 12597                           ;lcd.c: 127: LCD_Cmd(z);
 12598  14A5  0877               	movf	LCD_Set_Cursor@z,w
 12599  14A6  3190  20A2  3194   	fcall	_LCD_Cmd
 12600                           
 12601                           ;lcd.c: 128: LCD_Cmd(w);
 12602  14A9  0878               	movf	LCD_Set_Cursor@w,w
 12603  14AA  3190  20A2         	fcall	_LCD_Cmd
 12604                           
 12605                           ;lcd.c: 129: }
 12606  14AC  0008               	return
 12607  14AD                     l3064:	
 12608                           
 12609                           ;lcd.c: 132: else if(x == 2)
 12610  14AD  3002               	movlw	2
 12611  14AE  0676               	xorwf	LCD_Set_Cursor@x,w
 12612  14AF  1D03               	btfss	3,2
 12613  14B0  2CCD               	goto	l3074
 12614                           
 12615                           ;lcd.c: 133: {
 12616                           ;lcd.c: 134: temp = 0x94 + y;
 12617  14B1  0873               	movf	LCD_Set_Cursor@y,w
 12618  14B2  3E94               	addlw	148
 12619  14B3  00F4               	movwf	??_LCD_Set_Cursor
 12620  14B4  0874               	movf	??_LCD_Set_Cursor,w
 12621  14B5  00F9               	movwf	LCD_Set_Cursor@temp
 12622                           
 12623                           ;lcd.c: 136: z = temp>>4;
 12624  14B6  0879               	movf	LCD_Set_Cursor@temp,w
 12625  14B7  00F4               	movwf	??_LCD_Set_Cursor
 12626  14B8  3004               	movlw	4
 12627  14B9                     u3905:	
 12628  14B9  36F4               	lsrf	??_LCD_Set_Cursor,f
 12629  14BA  0B89               	decfsz	9,f
 12630  14BB  2CB9               	goto	u3905
 12631  14BC  0874               	movf	??_LCD_Set_Cursor,w
 12632  14BD  00F5               	movwf	??_LCD_Set_Cursor+1
 12633  14BE  0875               	movf	??_LCD_Set_Cursor+1,w
 12634  14BF  00F7               	movwf	LCD_Set_Cursor@z
 12635                           
 12636                           ;lcd.c: 137: w = temp & 0x0F;
 12637  14C0  0879               	movf	LCD_Set_Cursor@temp,w
 12638  14C1  390F               	andlw	15
 12639  14C2  00F4               	movwf	??_LCD_Set_Cursor
 12640  14C3  0874               	movf	??_LCD_Set_Cursor,w
 12641  14C4  00F8               	movwf	LCD_Set_Cursor@w
 12642                           
 12643                           ;lcd.c: 138: LCD_Cmd(z);
 12644  14C5  0877               	movf	LCD_Set_Cursor@z,w
 12645  14C6  3190  20A2  3194   	fcall	_LCD_Cmd
 12646                           
 12647                           ;lcd.c: 139: LCD_Cmd(w);
 12648  14C9  0878               	movf	LCD_Set_Cursor@w,w
 12649  14CA  3190  20A2         	fcall	_LCD_Cmd
 12650                           
 12651                           ;lcd.c: 140: }
 12652  14CC  0008               	return
 12653  14CD                     l3074:	
 12654                           
 12655                           ;lcd.c: 142: else if(x == 3)
 12656  14CD  3003               	movlw	3
 12657  14CE  0676               	xorwf	LCD_Set_Cursor@x,w
 12658  14CF  1D03               	btfss	3,2
 12659  14D0  0008               	return
 12660                           
 12661                           ;lcd.c: 143: {
 12662                           ;lcd.c: 144: temp = 0xD4 + y;
 12663  14D1  0873               	movf	LCD_Set_Cursor@y,w
 12664  14D2  3ED4               	addlw	212
 12665  14D3  00F4               	movwf	??_LCD_Set_Cursor
 12666  14D4  0874               	movf	??_LCD_Set_Cursor,w
 12667  14D5  00F9               	movwf	LCD_Set_Cursor@temp
 12668                           
 12669                           ;lcd.c: 146: z = temp>>4;
 12670  14D6  0879               	movf	LCD_Set_Cursor@temp,w
 12671  14D7  00F4               	movwf	??_LCD_Set_Cursor
 12672  14D8  3004               	movlw	4
 12673  14D9                     u3925:	
 12674  14D9  36F4               	lsrf	??_LCD_Set_Cursor,f
 12675  14DA  0B89               	decfsz	9,f
 12676  14DB  2CD9               	goto	u3925
 12677  14DC  0874               	movf	??_LCD_Set_Cursor,w
 12678  14DD  00F5               	movwf	??_LCD_Set_Cursor+1
 12679  14DE  0875               	movf	??_LCD_Set_Cursor+1,w
 12680  14DF  00F7               	movwf	LCD_Set_Cursor@z
 12681                           
 12682                           ;lcd.c: 147: w = temp & 0x0F;
 12683  14E0  0879               	movf	LCD_Set_Cursor@temp,w
 12684  14E1  390F               	andlw	15
 12685  14E2  00F4               	movwf	??_LCD_Set_Cursor
 12686  14E3  0874               	movf	??_LCD_Set_Cursor,w
 12687  14E4  00F8               	movwf	LCD_Set_Cursor@w
 12688                           
 12689                           ;lcd.c: 148: LCD_Cmd(z);
 12690  14E5  0877               	movf	LCD_Set_Cursor@z,w
 12691  14E6  3190  20A2  3194   	fcall	_LCD_Cmd
 12692                           
 12693                           ;lcd.c: 149: LCD_Cmd(w);
 12694  14E9  0878               	movf	LCD_Set_Cursor@w,w
 12695  14EA  3190  20A2         	fcall	_LCD_Cmd
 12696  14EC  0008               	return
 12697  14ED                     __end_of_LCD_Set_Cursor:	
 12698                           
 12699                           	psect	text36
 12700  13F3                     __ptext36:	
 12701 ;; *************** function _LCD_Init *****************
 12702 ;; Defined at:
 12703 ;;		line 154 in file "lcd.c"
 12704 ;; Parameters:    Size  Location     Type
 12705 ;;  style           1    wreg     unsigned char 
 12706 ;; Auto vars:     Size  Location     Type
 12707 ;;  style           1    5[COMMON] unsigned char 
 12708 ;; Return value:  Size  Location     Type
 12709 ;;                  1    wreg      void 
 12710 ;; Registers used:
 12711 ;;		wreg, status,2, status,0, pclath, cstack
 12712 ;; Tracked objects:
 12713 ;;		On entry : 0/0
 12714 ;;		On exit  : 0/0
 12715 ;;		Unchanged: 0/0
 12716 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12717 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12718 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12719 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12720 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12721 ;;Total ram usage:        3 bytes
 12722 ;; Hardware stack levels used:    1
 12723 ;; Hardware stack levels required when called:    2
 12724 ;; This function calls:
 12725 ;;		_LCD_Cmd
 12726 ;;		_LCD_Port
 12727 ;; This function is called by:
 12728 ;;		_main
 12729 ;; This function uses a non-reentrant model
 12730 ;;
 12731                           
 12732                           
 12733                           ;psect for function _LCD_Init
 12734  13F3                     _LCD_Init:	
 12735                           
 12736                           ;incstack = 0
 12737                           ; Regs used in _LCD_Init: [wreg+status,2+status,0+pclath+cstack]
 12738                           ;LCD_Init@style stored from wreg
 12739  13F3  00F5               	movwf	LCD_Init@style
 12740                           
 12741                           ;lcd.c: 156: LCD_Port(0x00);
 12742  13F4  3000               	movlw	0
 12743  13F5  3190  20DD  3193   	fcall	_LCD_Port
 12744                           
 12745                           ;lcd.c: 158: _delay((unsigned long)((100)*(1000000/4000.0)));
 12746  13F8  3021               	movlw	33
 12747  13F9  00F4               	movwf	??_LCD_Init+1
 12748  13FA  3076               	movlw	118
 12749  13FB  00F3               	movwf	??_LCD_Init
 12750  13FC                     u4787:	
 12751  13FC  0BF3               	decfsz	??_LCD_Init,f
 12752  13FD  2BFC               	goto	u4787
 12753  13FE  0BF4               	decfsz	??_LCD_Init+1,f
 12754  13FF  2BFC               	goto	u4787
 12755  1400  0000               	nop
 12756                           
 12757                           ;lcd.c: 160: LCD_Cmd(0x03);
 12758  1401  3003               	movlw	3
 12759  1402  3190  20A2  3193   	fcall	_LCD_Cmd
 12760                           
 12761                           ;lcd.c: 162: _delay((unsigned long)((10)*(1000000/4000.0)));
 12762  1405  3004               	movlw	4
 12763  1406  00F4               	movwf	??_LCD_Init+1
 12764  1407  303D               	movlw	61
 12765  1408  00F3               	movwf	??_LCD_Init
 12766  1409                     u4797:	
 12767  1409  0BF3               	decfsz	??_LCD_Init,f
 12768  140A  2C09               	goto	u4797
 12769  140B  0BF4               	decfsz	??_LCD_Init+1,f
 12770  140C  2C09               	goto	u4797
 12771  140D  3200               	nop2
 12772                           
 12773                           ;lcd.c: 164: LCD_Cmd(0x03);
 12774  140E  3003               	movlw	3
 12775  140F  3190  20A2  3193   	fcall	_LCD_Cmd
 12776                           
 12777                           ;lcd.c: 166: _delay((unsigned long)((120)*(1000000/4000000.0)));
 12778  1412  3009               	movlw	9
 12779  1413  00F3               	movwf	??_LCD_Init
 12780  1414                     u4807:	
 12781  1414  0BF3               	decfsz	??_LCD_Init,f
 12782  1415  2C14               	goto	u4807
 12783  1416  3200               	nop2	;nop
 12784                           
 12785                           ;lcd.c: 168: LCD_Cmd(0x03);
 12786  1417  3003               	movlw	3
 12787  1418  3190  20A2  3193   	fcall	_LCD_Cmd
 12788                           
 12789                           ;lcd.c: 170: _delay((unsigned long)((120)*(1000000/4000000.0)));
 12790  141B  3009               	movlw	9
 12791  141C  00F3               	movwf	??_LCD_Init
 12792  141D                     u4817:	
 12793  141D  0BF3               	decfsz	??_LCD_Init,f
 12794  141E  2C1D               	goto	u4817
 12795  141F  3200               	nop2	;nop
 12796                           
 12797                           ;lcd.c: 172: LCD_Cmd(0x02);
 12798  1420  3002               	movlw	2
 12799  1421  3190  20A2  3193   	fcall	_LCD_Cmd
 12800                           
 12801                           ;lcd.c: 174: _delay((unsigned long)((120)*(1000000/4000000.0)));
 12802  1424  3009               	movlw	9
 12803  1425  00F3               	movwf	??_LCD_Init
 12804  1426                     u4827:	
 12805  1426  0BF3               	decfsz	??_LCD_Init,f
 12806  1427  2C26               	goto	u4827
 12807  1428  3200               	nop2	;nop
 12808                           
 12809                           ;lcd.c: 176: LCD_Cmd(0x2);
 12810  1429  3002               	movlw	2
 12811  142A  3190  20A2  3193   	fcall	_LCD_Cmd
 12812                           
 12813                           ;lcd.c: 178: LCD_Cmd(0x8);
 12814  142D  3008               	movlw	8
 12815  142E  3190  20A2  3193   	fcall	_LCD_Cmd
 12816                           
 12817                           ;lcd.c: 180: _delay((unsigned long)((120)*(1000000/4000000.0)));
 12818  1431  3009               	movlw	9
 12819  1432  00F3               	movwf	??_LCD_Init
 12820  1433                     u4837:	
 12821  1433  0BF3               	decfsz	??_LCD_Init,f
 12822  1434  2C33               	goto	u4837
 12823  1435  3200               	nop2	;nop
 12824                           
 12825                           ;lcd.c: 182: LCD_Cmd(0x0);
 12826  1436  3000               	movlw	0
 12827  1437  3190  20A2  3193   	fcall	_LCD_Cmd
 12828                           
 12829                           ;lcd.c: 184: LCD_Cmd(0x8);
 12830  143A  3008               	movlw	8
 12831  143B  3190  20A2  3193   	fcall	_LCD_Cmd
 12832                           
 12833                           ;lcd.c: 186: _delay((unsigned long)((120)*(1000000/4000000.0)));
 12834  143E  3009               	movlw	9
 12835  143F  00F3               	movwf	??_LCD_Init
 12836  1440                     u4847:	
 12837  1440  0BF3               	decfsz	??_LCD_Init,f
 12838  1441  2C40               	goto	u4847
 12839  1442  3200               	nop2	;nop
 12840                           
 12841                           ;lcd.c: 188: LCD_Cmd(0x0);
 12842  1443  3000               	movlw	0
 12843  1444  3190  20A2  3193   	fcall	_LCD_Cmd
 12844                           
 12845                           ;lcd.c: 190: LCD_Cmd(0x1);
 12846  1447  3001               	movlw	1
 12847  1448  3190  20A2  3193   	fcall	_LCD_Cmd
 12848                           
 12849                           ;lcd.c: 192: _delay((unsigned long)((5)*(1000000/4000.0)));
 12850  144B  30F9               	movlw	249
 12851  144C  00F3               	movwf	??_LCD_Init
 12852  144D                     u4857:	
 12853  144D  3200               	nop2
 12854  144E  0BF3               	decfsz	??_LCD_Init,f
 12855  144F  2C4D               	goto	u4857
 12856  1450  3200               	nop2	;nop
 12857  1451  3200               	nop2	;nop
 12858                           
 12859                           ;lcd.c: 194: LCD_Cmd(0x0);
 12860  1452  3000               	movlw	0
 12861  1453  3190  20A2  3193   	fcall	_LCD_Cmd
 12862                           
 12863                           ;lcd.c: 196: LCD_Cmd(0x6);
 12864  1456  3006               	movlw	6
 12865  1457  3190  20A2  3193   	fcall	_LCD_Cmd
 12866                           
 12867                           ;lcd.c: 198: _delay((unsigned long)((120)*(1000000/4000000.0)));
 12868  145A  3009               	movlw	9
 12869  145B  00F3               	movwf	??_LCD_Init
 12870  145C                     u4867:	
 12871  145C  0BF3               	decfsz	??_LCD_Init,f
 12872  145D  2C5C               	goto	u4867
 12873  145E  3200               	nop2	;nop
 12874                           
 12875                           ;lcd.c: 200: LCD_Cmd(0x0);
 12876  145F  3000               	movlw	0
 12877  1460  3190  20A2  3193   	fcall	_LCD_Cmd
 12878                           
 12879                           ;lcd.c: 202: LCD_Cmd(0xc|style);
 12880  1463  0875               	movf	LCD_Init@style,w
 12881  1464  380C               	iorlw	12
 12882  1465  3190  20A2  3193   	fcall	_LCD_Cmd
 12883                           
 12884                           ;lcd.c: 204: _delay((unsigned long)((120)*(1000000/4000000.0)));
 12885  1468  3009               	movlw	9
 12886  1469  00F3               	movwf	??_LCD_Init
 12887  146A                     u4877:	
 12888  146A  0BF3               	decfsz	??_LCD_Init,f
 12889  146B  2C6A               	goto	u4877
 12890  146C  3200               	nop2	;nop
 12891  146D  0008               	return
 12892  146E                     __end_of_LCD_Init:	
 12893                           
 12894                           	psect	text37
 12895  1030                     __ptext37:	
 12896 ;; *************** function _LCD_Clear *****************
 12897 ;; Defined at:
 12898 ;;		line 75 in file "lcd.c"
 12899 ;; Parameters:    Size  Location     Type
 12900 ;;		None
 12901 ;; Auto vars:     Size  Location     Type
 12902 ;;		None
 12903 ;; Return value:  Size  Location     Type
 12904 ;;                  1    wreg      void 
 12905 ;; Registers used:
 12906 ;;		wreg, status,2, status,0, pclath, cstack
 12907 ;; Tracked objects:
 12908 ;;		On entry : 0/0
 12909 ;;		On exit  : 0/0
 12910 ;;		Unchanged: 0/0
 12911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12912 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12913 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12914 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12915 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12916 ;;Total ram usage:        0 bytes
 12917 ;; Hardware stack levels used:    1
 12918 ;; Hardware stack levels required when called:    2
 12919 ;; This function calls:
 12920 ;;		_LCD_Cmd
 12921 ;; This function is called by:
 12922 ;;		_main
 12923 ;; This function uses a non-reentrant model
 12924 ;;
 12925                           
 12926                           
 12927                           ;psect for function _LCD_Clear
 12928  1030                     _LCD_Clear:	
 12929                           
 12930                           ;lcd.c: 77: LCD_Cmd(0);
 12931                           
 12932                           ;incstack = 0
 12933                           ; Regs used in _LCD_Clear: [wreg+status,2+status,0+pclath+cstack]
 12934  1030  3000               	movlw	0
 12935  1031  3190  20A2  3190   	fcall	_LCD_Cmd
 12936                           
 12937                           ;lcd.c: 78: LCD_Cmd(1);
 12938  1034  3001               	movlw	1
 12939  1035  3190  20A2         	fcall	_LCD_Cmd
 12940  1037  0008               	return
 12941  1038                     __end_of_LCD_Clear:	
 12942                           
 12943                           	psect	text38
 12944  119B                     __ptext38:	
 12945 ;; *************** function _InitCustomChars *****************
 12946 ;; Defined at:
 12947 ;;		line 29 in file "lcd.c"
 12948 ;; Parameters:    Size  Location     Type
 12949 ;;		None
 12950 ;; Auto vars:     Size  Location     Type
 12951 ;;  i               1    6[COMMON] unsigned char 
 12952 ;; Return value:  Size  Location     Type
 12953 ;;                  1    wreg      void 
 12954 ;; Registers used:
 12955 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12956 ;; Tracked objects:
 12957 ;;		On entry : 0/0
 12958 ;;		On exit  : 0/0
 12959 ;;		Unchanged: 0/0
 12960 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12961 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12962 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12963 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12964 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12965 ;;Total ram usage:        2 bytes
 12966 ;; Hardware stack levels used:    1
 12967 ;; Hardware stack levels required when called:    2
 12968 ;; This function calls:
 12969 ;;		_LCD_Cmd
 12970 ;;		_LCD_Write_Char
 12971 ;; This function is called by:
 12972 ;;		_main
 12973 ;; This function uses a non-reentrant model
 12974 ;;
 12975                           
 12976                           
 12977                           ;psect for function _InitCustomChars
 12978  119B                     _InitCustomChars:	
 12979                           
 12980                           ;lcd.c: 31: uint8_t i;
 12981                           ;lcd.c: 32: LCD_Cmd(0x04);
 12982                           
 12983                           ;incstack = 0
 12984                           ; Regs used in _InitCustomChars: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12985  119B  3004               	movlw	4
 12986  119C  3190  20A2  3191   	fcall	_LCD_Cmd
 12987                           
 12988                           ;lcd.c: 33: LCD_Cmd(0x00);
 12989  119F  3000               	movlw	0
 12990  11A0  3190  20A2  3191   	fcall	_LCD_Cmd
 12991                           
 12992                           ;lcd.c: 34: for (i = 0; i < sizeof(__cgram) ; i++)
 12993  11A3  01F6               	clrf	InitCustomChars@i
 12994  11A4  3018               	movlw	24
 12995  11A5  0276               	subwf	InitCustomChars@i,w
 12996  11A6  1803               	btfsc	3,0
 12997  11A7  29B9               	goto	l3040
 12998  11A8                     l3034:	
 12999                           
 13000                           ;lcd.c: 35: LCD_Write_Char(__cgram[i]);
 13001  11A8  0876               	movf	InitCustomChars@i,w
 13002  11A9  3E20               	addlw	(low (___cgram| (0+256)))& (0+255)
 13003  11AA  0086               	movwf	6
 13004  11AB  3001               	movlw	1	; select bank2/3
 13005  11AC  0087               	movwf	7
 13006  11AD  0801               	movf	1,w
 13007  11AE  3191  21E9  3191   	fcall	_LCD_Write_Char
 13008  11B1  3001               	movlw	1
 13009  11B2  00F5               	movwf	??_InitCustomChars
 13010  11B3  0875               	movf	??_InitCustomChars,w
 13011  11B4  07F6               	addwf	InitCustomChars@i,f
 13012  11B5  3018               	movlw	24
 13013  11B6  0276               	subwf	InitCustomChars@i,w
 13014  11B7  1C03               	skipc
 13015  11B8  29A8               	goto	l3034
 13016  11B9                     l3040:	
 13017                           
 13018                           ;lcd.c: 36: LCD_Cmd(0);
 13019  11B9  3000               	movlw	0
 13020  11BA  3190  20A2  3191   	fcall	_LCD_Cmd
 13021                           
 13022                           ;lcd.c: 37: LCD_Cmd(2);
 13023  11BD  3002               	movlw	2
 13024  11BE  3190  20A2         	fcall	_LCD_Cmd
 13025  11C0  0008               	return
 13026  11C1                     __end_of_InitCustomChars:	
 13027                           
 13028                           	psect	text39
 13029  11E9                     __ptext39:	
 13030 ;; *************** function _LCD_Write_Char *****************
 13031 ;; Defined at:
 13032 ;;		line 223 in file "lcd.c"
 13033 ;; Parameters:    Size  Location     Type
 13034 ;;  a               1    wreg     unsigned char 
 13035 ;; Auto vars:     Size  Location     Type
 13036 ;;  a               1    4[COMMON] unsigned char 
 13037 ;;  y               1    3[COMMON] unsigned char 
 13038 ;;  temp            1    2[COMMON] unsigned char 
 13039 ;; Return value:  Size  Location     Type
 13040 ;;                  1    wreg      void 
 13041 ;; Registers used:
 13042 ;;		wreg, status,2, status,0, pclath, cstack
 13043 ;; Tracked objects:
 13044 ;;		On entry : 0/0
 13045 ;;		On exit  : 0/0
 13046 ;;		Unchanged: 0/0
 13047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13048 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13049 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13050 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13051 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13052 ;;Total ram usage:        4 bytes
 13053 ;; Hardware stack levels used:    1
 13054 ;; Hardware stack levels required when called:    1
 13055 ;; This function calls:
 13056 ;;		_LCD_Port
 13057 ;; This function is called by:
 13058 ;;		_InitCustomChars
 13059 ;;		_LCD_Write_String
 13060 ;;		_LCD_Write_Int
 13061 ;; This function uses a non-reentrant model
 13062 ;;
 13063                           
 13064                           
 13065                           ;psect for function _LCD_Write_Char
 13066  11E9                     _LCD_Write_Char:	
 13067                           
 13068                           ;incstack = 0
 13069                           ; Regs used in _LCD_Write_Char: [wreg+status,2+status,0+pclath+cstack]
 13070                           ;LCD_Write_Char@a stored from wreg
 13071  11E9  00F4               	movwf	LCD_Write_Char@a
 13072                           
 13073                           ;lcd.c: 225: char temp,y;
 13074                           ;lcd.c: 226: temp = a&0x0F;
 13075  11EA  0874               	movf	LCD_Write_Char@a,w
 13076  11EB  390F               	andlw	15
 13077  11EC  00F1               	movwf	??_LCD_Write_Char
 13078  11ED  0871               	movf	??_LCD_Write_Char,w
 13079  11EE  00F2               	movwf	LCD_Write_Char@temp
 13080                           
 13081                           ;lcd.c: 227: y = a&0xF0;
 13082  11EF  0874               	movf	LCD_Write_Char@a,w
 13083  11F0  39F0               	andlw	240
 13084  11F1  00F1               	movwf	??_LCD_Write_Char
 13085  11F2  0871               	movf	??_LCD_Write_Char,w
 13086  11F3  00F3               	movwf	LCD_Write_Char@y
 13087                           
 13088                           ;lcd.c: 228: RB0 = 1;
 13089  11F4  0020               	movlb	0	; select bank0
 13090  11F5  140D               	bsf	13,0	;volatile
 13091                           
 13092                           ;lcd.c: 229: LCD_Port(y>>4);
 13093  11F6  0873               	movf	LCD_Write_Char@y,w
 13094  11F7  00F1               	movwf	??_LCD_Write_Char
 13095  11F8  3004               	movlw	4
 13096  11F9                     u3155:	
 13097  11F9  36F1               	lsrf	??_LCD_Write_Char,f
 13098  11FA  0B89               	decfsz	9,f
 13099  11FB  29F9               	goto	u3155
 13100  11FC  0871               	movf	??_LCD_Write_Char,w
 13101  11FD  3190  20DD  3191   	fcall	_LCD_Port
 13102                           
 13103                           ;lcd.c: 230: RB1 = 1;
 13104  1200  0020               	movlb	0	; select bank0
 13105  1201  148D               	bsf	13,1	;volatile
 13106                           
 13107                           ;lcd.c: 231: RB1 = 0;
 13108  1202  108D               	bcf	13,1	;volatile
 13109                           
 13110                           ;lcd.c: 232: _delay((unsigned long)((40)*(1000000/4000000.0)));
 13111  1203  3003               	movlw	3
 13112  1204  00F1               	movwf	??_LCD_Write_Char
 13113  1205                     u4887:	
 13114  1205  0BF1               	decfsz	??_LCD_Write_Char,f
 13115  1206  2A05               	goto	u4887
 13116                           
 13117                           ;lcd.c: 233: LCD_Port(temp);
 13118  1207  0872               	movf	LCD_Write_Char@temp,w
 13119  1208  3190  20DD  3191   	fcall	_LCD_Port
 13120                           
 13121                           ;lcd.c: 234: RB1 = 1;
 13122  120B  0020               	movlb	0	; select bank0
 13123  120C  148D               	bsf	13,1	;volatile
 13124                           
 13125                           ;lcd.c: 235: RB1 = 0;
 13126  120D  108D               	bcf	13,1	;volatile
 13127                           
 13128                           ;lcd.c: 236: _delay((unsigned long)((40)*(1000000/4000000.0)));
 13129  120E  3003               	movlw	3
 13130  120F  00F1               	movwf	??_LCD_Write_Char
 13131  1210                     u4897:	
 13132  1210  0BF1               	decfsz	??_LCD_Write_Char,f
 13133  1211  2A10               	goto	u4897
 13134  1212  0008               	return
 13135  1213                     __end_of_LCD_Write_Char:	
 13136                           
 13137                           	psect	text40
 13138  10A2                     __ptext40:	
 13139 ;; *************** function _LCD_Cmd *****************
 13140 ;; Defined at:
 13141 ;;		line 65 in file "lcd.c"
 13142 ;; Parameters:    Size  Location     Type
 13143 ;;  a               1    wreg     unsigned char 
 13144 ;; Auto vars:     Size  Location     Type
 13145 ;;  a               1    2[COMMON] unsigned char 
 13146 ;; Return value:  Size  Location     Type
 13147 ;;                  1    wreg      void 
 13148 ;; Registers used:
 13149 ;;		wreg, status,2, status,0, pclath, cstack
 13150 ;; Tracked objects:
 13151 ;;		On entry : 0/0
 13152 ;;		On exit  : 0/0
 13153 ;;		Unchanged: 0/0
 13154 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13155 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13156 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13157 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13158 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13159 ;;Total ram usage:        2 bytes
 13160 ;; Hardware stack levels used:    1
 13161 ;; Hardware stack levels required when called:    1
 13162 ;; This function calls:
 13163 ;;		_LCD_Port
 13164 ;; This function is called by:
 13165 ;;		_InitCustomChars
 13166 ;;		_LCD_Clear
 13167 ;;		_LCD_Set_Cursor
 13168 ;;		_LCD_Init
 13169 ;; This function uses a non-reentrant model
 13170 ;;
 13171                           
 13172                           
 13173                           ;psect for function _LCD_Cmd
 13174  10A2                     _LCD_Cmd:	
 13175                           
 13176                           ;incstack = 0
 13177                           ; Regs used in _LCD_Cmd: [wreg+status,2+status,0+pclath+cstack]
 13178                           ;LCD_Cmd@a stored from wreg
 13179  10A2  00F2               	movwf	LCD_Cmd@a
 13180                           
 13181                           ;lcd.c: 67: RB0 = 0;
 13182  10A3  0020               	movlb	0	; select bank0
 13183  10A4  100D               	bcf	13,0	;volatile
 13184                           
 13185                           ;lcd.c: 68: LCD_Port(a);
 13186  10A5  0872               	movf	LCD_Cmd@a,w
 13187  10A6  3190  20DD  3190   	fcall	_LCD_Port
 13188                           
 13189                           ;lcd.c: 69: RB1 = 1;
 13190  10A9  0020               	movlb	0	; select bank0
 13191  10AA  148D               	bsf	13,1	;volatile
 13192                           
 13193                           ;lcd.c: 70: RB1 = 0;
 13194  10AB  108D               	bcf	13,1	;volatile
 13195                           
 13196                           ;lcd.c: 71: _delay((unsigned long)((4)*(1000000/4000.0)));
 13197  10AC  30F9               	movlw	249
 13198  10AD  00F1               	movwf	??_LCD_Cmd
 13199  10AE                     u4907:	
 13200  10AE  0000               	nop
 13201  10AF  0BF1               	decfsz	??_LCD_Cmd,f
 13202  10B0  28AE               	goto	u4907
 13203  10B1  3200               	nop2	;nop
 13204  10B2  0000               	nop
 13205  10B3  0008               	return
 13206  10B4                     __end_of_LCD_Cmd:	
 13207                           
 13208                           	psect	text41
 13209  10DD                     __ptext41:	
 13210 ;; *************** function _LCD_Port *****************
 13211 ;; Defined at:
 13212 ;;		line 41 in file "lcd.c"
 13213 ;; Parameters:    Size  Location     Type
 13214 ;;  a               1    wreg     unsigned char 
 13215 ;; Auto vars:     Size  Location     Type
 13216 ;;  a               1    0[COMMON] unsigned char 
 13217 ;; Return value:  Size  Location     Type
 13218 ;;                  1    wreg      void 
 13219 ;; Registers used:
 13220 ;;		wreg
 13221 ;; Tracked objects:
 13222 ;;		On entry : 0/0
 13223 ;;		On exit  : 0/0
 13224 ;;		Unchanged: 0/0
 13225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13226 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13227 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13228 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13229 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13230 ;;Total ram usage:        1 bytes
 13231 ;; Hardware stack levels used:    1
 13232 ;; This function calls:
 13233 ;;		Nothing
 13234 ;; This function is called by:
 13235 ;;		_LCD_Cmd
 13236 ;;		_LCD_Init
 13237 ;;		_LCD_Write_Char
 13238 ;; This function uses a non-reentrant model
 13239 ;;
 13240                           
 13241                           
 13242                           ;psect for function _LCD_Port
 13243  10DD                     _LCD_Port:	
 13244                           
 13245                           ;incstack = 0
 13246                           ; Regs used in _LCD_Port: [wreg]
 13247                           ;LCD_Port@a stored from wreg
 13248  10DD  00F0               	movwf	LCD_Port@a
 13249                           
 13250                           ;lcd.c: 43: if(a & 1)
 13251  10DE  1C70               	btfss	LCD_Port@a,0
 13252  10DF  28E3               	goto	l114
 13253                           
 13254                           ;lcd.c: 44: RB2 = 1;
 13255  10E0  0020               	movlb	0	; select bank0
 13256  10E1  150D               	bsf	13,2	;volatile
 13257  10E2  28E5               	goto	l2328
 13258  10E3                     l114:	
 13259                           
 13260                           ;lcd.c: 45: else
 13261                           ;lcd.c: 46: RB2 = 0;
 13262  10E3  0020               	movlb	0	; select bank0
 13263  10E4  110D               	bcf	13,2	;volatile
 13264  10E5                     l2328:	
 13265                           
 13266                           ;lcd.c: 48: if(a & 2)
 13267  10E5  1CF0               	btfss	LCD_Port@a,1
 13268  10E6  28E9               	goto	l116
 13269                           
 13270                           ;lcd.c: 49: RB3 = 1;
 13271  10E7  158D               	bsf	13,3	;volatile
 13272  10E8  28EA               	goto	l2332
 13273  10E9                     l116:	
 13274                           
 13275                           ;lcd.c: 50: else
 13276                           ;lcd.c: 51: RB3 = 0;
 13277  10E9  118D               	bcf	13,3	;volatile
 13278  10EA                     l2332:	
 13279                           
 13280                           ;lcd.c: 53: if(a & 4)
 13281  10EA  1D70               	btfss	LCD_Port@a,2
 13282  10EB  28EE               	goto	l118
 13283                           
 13284                           ;lcd.c: 54: RB4 = 1;
 13285  10EC  160D               	bsf	13,4	;volatile
 13286  10ED  28EF               	goto	l2336
 13287  10EE                     l118:	
 13288                           
 13289                           ;lcd.c: 55: else
 13290                           ;lcd.c: 56: RB4 = 0;
 13291  10EE  120D               	bcf	13,4	;volatile
 13292  10EF                     l2336:	
 13293                           
 13294                           ;lcd.c: 58: if(a & 8)
 13295  10EF  1DF0               	btfss	LCD_Port@a,3
 13296  10F0  28F3               	goto	l120
 13297                           
 13298                           ;lcd.c: 59: RB5 = 1;
 13299  10F1  168D               	bsf	13,5	;volatile
 13300  10F2  0008               	return
 13301  10F3                     l120:	
 13302                           
 13303                           ;lcd.c: 60: else
 13304                           ;lcd.c: 61: RB5 = 0;
 13305  10F3  128D               	bcf	13,5	;volatile
 13306  10F4  0008               	return
 13307  10F5                     __end_of_LCD_Port:	
 13308                           
 13309                           	psect	text42
 13310  1066                     __ptext42:	
 13311 ;; *************** function _ADCC_GetSingleConversion *****************
 13312 ;; Defined at:
 13313 ;;		line 53 in file "adcc.c"
 13314 ;; Parameters:    Size  Location     Type
 13315 ;;  channel         1    wreg     enum E13559
 13316 ;; Auto vars:     Size  Location     Type
 13317 ;;  channel         1    3[COMMON] enum E13559
 13318 ;; Return value:  Size  Location     Type
 13319 ;;                  2    0[COMMON] unsigned int 
 13320 ;; Registers used:
 13321 ;;		wreg
 13322 ;; Tracked objects:
 13323 ;;		On entry : 0/0
 13324 ;;		On exit  : 0/0
 13325 ;;		Unchanged: 0/0
 13326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13327 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13328 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13329 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13330 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13331 ;;Total ram usage:        4 bytes
 13332 ;; Hardware stack levels used:    1
 13333 ;; This function calls:
 13334 ;;		Nothing
 13335 ;; This function is called by:
 13336 ;;		_main
 13337 ;; This function uses a non-reentrant model
 13338 ;;
 13339                           
 13340                           
 13341                           ;psect for function _ADCC_GetSingleConversion
 13342  1066                     _ADCC_GetSingleConversion:	
 13343                           
 13344                           ;incstack = 0
 13345                           ; Regs used in _ADCC_GetSingleConversion: [wreg]
 13346                           ;ADCC_GetSingleConversion@channel stored from wreg
 13347  1066  00F3               	movwf	ADCC_GetSingleConversion@channel
 13348                           
 13349                           ;adcc.c: 56: ADPCH = channel;
 13350  1067  0873               	movf	ADCC_GetSingleConversion@channel,w
 13351  1068  0021               	movlb	1	; select bank1
 13352  1069  009E               	movwf	30	;volatile
 13353                           
 13354                           ;adcc.c: 59: ADCON0bits.ADON = 1;
 13355  106A  1793               	bsf	19,7	;volatile
 13356                           
 13357                           ;adcc.c: 62: ADCON0bits.ADCONT = 0;
 13358  106B  1313               	bcf	19,6	;volatile
 13359                           
 13360                           ;adcc.c: 65: ADCON0bits.ADGO = 1;
 13361  106C  1413               	bsf	19,0	;volatile
 13362  106D                     l235:	
 13363                           ;adcc.c: 69: {
 13364                           
 13365                           ;adcc.c: 68: while (ADCON0bits.ADGO)
 13366                           
 13367  106D  1813               	btfsc	19,0	;volatile
 13368  106E  286D               	goto	l235
 13369                           
 13370                           ;adcc.c: 70: }
 13371                           ;adcc.c: 73: return ((ADRESH << 8) + ADRESL);
 13372  106F  080D               	movf	13,w	;volatile
 13373  1070  00F1               	movwf	?_ADCC_GetSingleConversion+1
 13374  1071  080C               	movf	12,w	;volatile
 13375  1072  00F0               	movwf	?_ADCC_GetSingleConversion
 13376  1073  0008               	return
 13377  1074                     __end_of_ADCC_GetSingleConversion:	
 13378  007E                     btemp	set	126	;btemp
 13379  007E                     wtemp	set	126
 13380  007E                     wtemp0	set	126
 13381  0080                     wtemp1	set	128
 13382  0082                     wtemp2	set	130
 13383  0084                     wtemp3	set	132
 13384  0086                     wtemp4	set	134
 13385  0088                     wtemp5	set	136
 13386  007F                     wtemp6	set	127
 13387  007E                     ttemp	set	126
 13388  007E                     ttemp0	set	126
 13389  0081                     ttemp1	set	129
 13390  0084                     ttemp2	set	132
 13391  0087                     ttemp3	set	135
 13392  007F                     ttemp4	set	127
 13393  007E                     ltemp	set	126
 13394  007E                     ltemp0	set	126
 13395  0082                     ltemp1	set	130
 13396  0086                     ltemp2	set	134
 13397  0080                     ltemp3	set	128


Data Sizes:
    Strings     16
    Constant    145
    Data        24
    BSS         9
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     78      80
    BANK1            80     54      61
    BANK2            80      0      24
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           28      0       0
    BANK12            0      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> log@exponent(BANK0[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 27
		 -> log@coeff(CODE[27]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_2(CODE[8]), STR_1(CODE[8]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 8
		 -> main@s(BANK1[8]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    LCD_Write_String@a	PTR unsigned char  size(1) Largest target is 8
		 -> main@s(BANK1[8]), 


Critical Paths under _main in COMMON

    _sprintf->___lldiv
    _sprintf->___lltoft
    _sprintf->___wmul
    _sprintf->__div_to_l_
    _scale->___wmul
    _fround->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___ftsub->___lltoft
    _log->___awtoft
    _eval_poly->___wmul
    ___wmul->___awdiv
    ___ftmul->___awtoft
    ___ftmul->___wmul
    ___ftadd->___awtoft
    ___ftadd->___wmul
    ___awtoft->___ftpack
    ___lwtoft->___ftpack
    ___ftdiv->___lwtoft
    _SYSTEM_Initialize->_PIN_MANAGER_Initialize
    _LCD_Write_String->_LCD_Write_Char
    _LCD_Set_Cursor->_LCD_Cmd
    _LCD_Init->_LCD_Cmd
    _LCD_Clear->_LCD_Cmd
    _InitCustomChars->_LCD_Write_Char
    _LCD_Write_Char->_LCD_Port
    _LCD_Cmd->_LCD_Port

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___fttol->_scale
    ___ftsub->___ftadd
    _log->_eval_poly
    _eval_poly->___ftadd
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___ftadd->_fround

Critical Paths under _main in BANK1

    _main->_sprintf

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                39    39      0   77462
                                             68 BANK0     10    10      0
                                             25 BANK1     29    29      0
           _ADCC_GetSingleConversion
                    _InitCustomChars
                          _LCD_Clear
                           _LCD_Init
                     _LCD_Set_Cursor
                   _LCD_Write_String
                 _PWM6_LoadDutyValue
                  _SYSTEM_Initialize
                            ___aldiv
                            ___ftadd
                            ___ftdiv
                            ___ftsub
                           ___lwtoft
                                _log
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             41    36      5   42125
                                             57 BANK0     11     6      5
                                              0 BANK1     25    25      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               12     9      3    9834
                                             24 BANK0      9     6      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              17    14      3    9636
                                             24 BANK0     14    11      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4    1356
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4    1466
                                              7 COMMON     5     1      4
                                              0 BANK0      4     4      0
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         16    10      6     409
                                              0 COMMON    10     4      6
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          20    14      6     552
                                              0 COMMON    14     8      6
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             6     2      4    1907
                                              8 COMMON     6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                             10     2      8     477
                                              0 COMMON    10     2      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     374
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             14    10      4     411
                                             33 BANK0     14    10      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    3646
                                             51 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     138
                                              0 COMMON     3     0      3
 ---------------------------------------------------------------------------------
 (1) _log                                                  6     3      3   20850
                                             61 BANK0      6     3      3
                           ___awtoft
                            ___ftadd
                             ___ftge
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (2) _frexp                                                6     2      4     330
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) _eval_poly                                           10     3      7   10227
                                             51 BANK0     10     3      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2530
                                             12 COMMON     2     2      0
                                              4 BANK0      4     0      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             16    10      6    3993
                                              8 BANK0     16    10      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             13     7      6    3367
                                             38 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___wmul (ARG)
                              _frexp (ARG)
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     746
                                              0 COMMON     9     3      6
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             6     3      3    1929
                                              8 COMMON     6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___lwtoft                                             4     1      3    1860
                                              8 COMMON     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             16    10      6    2595
                                              0 BANK0     16    10      6
                           ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    1785
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (1) ___aldiv                                             15     7      8     406
                                              0 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0      23
                    _ADCC_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _PWM6_Initialize
                    _TMR2_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM6_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               1     1      0      23
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADCC_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM6_LoadDutyValue                                   4     2      2      97
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _LCD_Write_String                                     4     4      0     322
                                              5 COMMON     4     4      0
                     _LCD_Write_Char
 ---------------------------------------------------------------------------------
 (1) _LCD_Set_Cursor                                       7     6      1     756
                                              3 COMMON     7     6      1
                            _LCD_Cmd
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             3     3      0     220
                                              3 COMMON     3     3      0
                            _LCD_Cmd
                           _LCD_Port
 ---------------------------------------------------------------------------------
 (1) _LCD_Clear                                            0     0      0     110
                            _LCD_Cmd
 ---------------------------------------------------------------------------------
 (1) _InitCustomChars                                      2     2      0     356
                                              5 COMMON     2     2      0
                            _LCD_Cmd
                     _LCD_Write_Char
 ---------------------------------------------------------------------------------
 (2) _LCD_Write_Char                                       4     4      0     178
                                              1 COMMON     4     4      0
                           _LCD_Port
 ---------------------------------------------------------------------------------
 (2) _LCD_Cmd                                              2     2      0     110
                                              1 COMMON     2     2      0
                           _LCD_Port
 ---------------------------------------------------------------------------------
 (3) _LCD_Port                                             1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADCC_GetSingleConversion                             4     1      3      22
                                              0 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCC_GetSingleConversion
   _InitCustomChars
     _LCD_Cmd
       _LCD_Port
     _LCD_Write_Char
       _LCD_Port
   _LCD_Clear
     _LCD_Cmd
       _LCD_Port
   _LCD_Init
     _LCD_Cmd
       _LCD_Port
     _LCD_Port
   _LCD_Set_Cursor
     _LCD_Cmd
       _LCD_Port
   _LCD_Write_String
     _LCD_Write_Char
       _LCD_Port
   _PWM6_LoadDutyValue
   _SYSTEM_Initialize
     _ADCC_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM6_Initialize
     _TMR2_Initialize
   ___aldiv
   ___ftadd
     ___awtoft (ARG)
       ___ftpack
     ___ftdiv (ARG)
       ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
     ___ftpack (ARG)
     ___lwtoft (ARG)
       ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     _frexp (ARG)
     _fround (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   ___ftdiv
     ___ftpack
     ___ftpack (ARG)
     ___lwtoft (ARG)
       ___ftpack
   ___ftsub
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lltoft (ARG)
       ___ftpack
   ___lwtoft
     ___ftpack
   _log
     ___awtoft
       ___ftpack
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
     _eval_poly
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _frexp
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4E      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     36      3D       7       76.3%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      18       9       30.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      B3      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              1C      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      B3      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Wed Sep 06 18:11:18 2017

                      __CFG_CP$OFF 0000                       ___awdiv@sign 0021  
              ___wmul@multiplicand 0026        __size_of_PWM6_LoadDutyValue 0016  
                     ___ftadd@exp1 0052                       ___ftadd@exp2 0051  
                      __CFG_LVP$ON 0000                       ___ftadd@sign 0050  
                              l120 10F3                                l114 10E3  
                              l116 10E9                                l118 10EE  
                              l235 106D                                l334 03B5  
                              l270 0E72                                l271 0E8E  
                              l328 0294                                l269 0E66  
                              l526 14FE                                l374 070A  
                              l471 114A                                l376 0744  
                              l706 0889                                l716 0902  
                              l637 0B15                                l656 0051  
                              l680 09AD                                l657 0059  
                              l649 003E                                l757 15DC  
                              _GIE 005F                                _RB0 0068  
                              _RB1 0069                                _RB2 006A  
                              _RB3 006B                                _RB4 006C  
                              _RB5 006D                       __CFG_CPD$OFF 0000  
                              _log 169F                       ___awmod@sign 0076  
                  _TMR2_Initialize 1082                       __CFG_BORV$LO 0000  
                              wreg 0009                    __end_of_LCD_Cmd 10B4  
                     __CFG_ZCD$OFF 0000                       ___ftdiv@cntr 002A  
                   _LCD_Set_Cursor 146E                       ___ftdiv@sign 002F  
                             l2300 001B                               l3012 13EC  
                             l2310 0043                               l2302 0025  
                             l3040 11B9                               l2312 004B  
                             l2304 002A                               l3034 11A8  
                             l2410 130D                               l2332 10EA  
                             l3124 1129                               l2420 131F  
                             l3212 02C0                               l3204 0296  
                             l3054 148E                               l2502 09EC  
                             l2342 1143                               l2406 1306  
                             l3222 02F5                               l3206 02AC  
                             l2336 10EF                               l2328 10E5  
                             l3064 14AD                               l2512 1763  
                             l3152 16CE                               l2432 133C  
                             l2424 132B                               l3320 056A  
                             l3304 052F                               l3074 14CD  
                             l2442 0936                               l2530 17B4  
                             l3146 16BD                               l2362 0811  
                             l2418 1313                               l3322 05BE  
                             l3306 054E                               l3170 01F8  
                             l3410 01DD                               l2452 094C  
                             l2380 0830                               l2428 1334  
                             l3404 07BA                               l3260 0421  
                             l3252 03EA                               l3412 07D6  
                             l2470 0979                               l2446 093D  
                             l2542 17D0                               l2534 17BC  
                             l2518 1779                               l2390 084B  
                             l2702 0C29                               l3342 0614  
                             l3334 05EE                               l3246 039E  
                             l3238 0351                               l2296 0014  
                             l2472 0983                               l2464 0966  
                             l2800 0A3F                               l2368 081C  
                             l2720 0D48                               l3328 05D1  
                             l3264 0435                               l3176 020A  
                             l3184 0244                               l3600 0EA4  
                             l3434 151F                               l3426 150F  
                             l2482 099F                               l2474 0988  
                             l2546 17D8                               l2810 0A8A  
                             l2394 0853                               l2386 0842  
                             l2378 0824                               l2714 0CE9  
                             l2706 0C46                               l3290 04F4  
                             l3274 0469                               l3452 1566  
                             l3444 154D                               l3436 152D  
                             l2492 09D1                               l2484 09A9  
                             l2476 098C                               l2732 1080  
                             l3364 06F6                               l3284 04BD  
                             l3196 0257                               l3462 160D  
                             l2830 0AFF                               l2742 0871  
                             l3390 0777                               l3382 075B  
                             l3374 0728                               l3358 06E3  
                             l3294 051D                               l3278 04B7  
                             l3366 06FB                               l3198 028F  
                             l3448 1558                               l2488 09BF  
                             l2680 01A8                               l2672 0130  
                             l3490 167D                               l3482 1664  
                             l2850 1185                               l2922 15D3  
                             l2914 15B8                               l2818 0AD2  
                             l3394 079C                               l3468 1623  
                             l2924 15DF                               l2916 15C6  
                             l2940 135F                               l2836 0B0C  
                             l2828 0AF1                               l2764 08C4  
                             l2756 08AA                               l3396 079F  
                             l3388 0774                               l3580 0E42  
                             l2862 1270                               l2838 0B18  
                             l2782 08F9                               l2774 08DE  
                             l3398 07A3                               l2928 15ED  
                             l2952 138A                               l2784 0905  
                             l2776 08EC                               l2696 0BCA  
                             l3592 0E8A                               l3568 0D91  
                             l2858 125A                               l2938 1351  
                             l2962 12C2                               l2794 0A22  
                             l2948 137F                               l2964 12D0  
                             l2972 12F3                               l2980 11C5  
                             l2886 1165                               l2982 11D5  
                             l3598 0EA2                               l2896 1588  
                             l2968 12E8                               l2994 1291  
                             ?_log 005D                               STR_1 1899  
                             STR_2 1891                               _LATA 0016  
                             _LATB 0017                               _LATC 0018  
                             u3105 17D9                               u3130 1242  
                             u3115 17DF                               u3035 1785  
                             u3045 1795                               u2415 0020  
                             u3065 17BD                               _T2PR 028D  
                             u3155 11F9                               u2435 0039  
                             u3075 17C3                               u4115 03C1  
                             u3405 0A8B                               u4125 03F6  
                             u2455 0046                               u3415 0AB5  
                             u3335 08DF                               u2625 0827  
                             u4225 053B                               u3275 08AB  
                             u4155 041F                               u4075 030A  
                             u2565 114B                               u3605 15B9  
                             u3365 08FA                               u3285 08BB  
                             u2645 0831                               u2725 1316  
                             u4325 071E                               u2495 0060  
                             u2575 1150                               u3455 0AF2  
                             u3295 08C5                               u2655 083B  
                             u4335 073C                               u4255 05DC  
                             u4505 154E                               u2905 097A  
                             u3705 1374                               u2665 0843  
                             u2745 1325                               u4265 05EA  
                             u4185 04E8                               u3635 15D4  
                             u3715 1380                               u2755 132C  
                             u3485 0B0D                               u2935 098D  
                             u3575 158F                               u4375 076C  
                             u3905 14B9                               u4465 1522  
                             u3745 12C5                               u4385 078B  
                             u4555 1635                               u2875 0967  
                             u3675 1354                               u4715 0E60  
                             u3925 14D9                               u4485 152E  
                             u4565 1645                               u2965 09A0  
                             u3765 12DE                               u4725 0E6C  
                             u4807 1414                               u4495 1542  
                             u4575 1665                               u3695 1360  
                             u3775 12E9                               u4735 0E7C  
                             u4817 141D                               u3865 147A  
                             u3945 10D6                               u4585 1674  
                             u4907 10AE                               u4827 1426  
                             u4595 167E                               u3795 11CA  
                             u4755 0E94                               u4837 1433  
                             u3885 1499                               u4847 1440  
                             u4857 144D                               u4777 0D71  
                             u4867 145C                               u4787 13FC  
                             u4877 146A                               u4797 1409  
                             u4887 1205                               u4897 1210  
                             _WPUA 0F39                               _WPUB 0F44  
                             _WPUC 0F4F                               _WPUE 0F65  
                     __CFG_WRT$OFF 0000                      __CFG_FCMEN$ON 0000  
                ?_LCD_Write_String 0070                               _main 0D65  
                     ___ftpack@arg 0070                 __size_of_LCD_Clear 0008  
                     ___ftpack@exp 0073                               fsr0h 0005  
                             fsr1h 0007                               fsr0l 0004  
                             indf0 0000                               indf1 0001  
                             fsr1l 0006                               btemp 007E  
                             log@x 005D                               ltemp 007E  
                             start 0002                 ??_LCD_Write_String 0075  
                             ttemp 007E                               wtemp 007E  
                     _sprintf$1011 00A0                      __CFG_CSWEN$ON 0000  
                    __CFG_MCLRE$ON 0000                       ___ftmul@cntr 0036  
                     ___ftmul@sign 0037                       ___fttol@exp1 004E  
                            ??_log 0060                       ___fttol@lval 004A  
                 __end_of_LCD_Init 146E                   __end_of_LCD_Port 10F5  
   __size_of_OSCILLATOR_Initialize 0009      __end_of_OSCILLATOR_Initialize 1041  
                  __end_of___aldiv 156F                              _ADACQ 009D  
                            _ADCAP 009B                              _ADACT 0099  
                            ?_main 0070                              _ADCLK 0098  
                            _ADPCH 009E                              _ADREF 009A  
                  __end_of___awdiv 0858                              _ADPRE 009C  
                  __end_of___ftadd 0A04                      __CFG_WDTE$OFF 0000  
                  __end_of___awmod 1341                              _ADRPT 010D  
                  __end_of___ftdiv 169F                    __end_of___ftneg 000C  
                  __end_of___lldiv 1393                    __end_of___ftmul 1800  
                  ___awdiv@divisor 0077                    __end_of___llmod 12FC  
                  __end_of___ftsub 117B                    __end_of___fttol 15F6  
                            _T2CON 028E                main@readTemperature 00D1  
                            _T2HLT 028F                              _T2TMR 028C  
                            _T2RST 0291                    ___awdiv@counter 0020  
                            _OSCEN 0891                              _TRISA 0011  
                            _TRISB 0012                              _TRISC 0013  
                  _PWM6_Initialize 1059                       ___lltoft@exp 007D  
           __end_of_LCD_Set_Cursor 14ED                      ___awtoft@sign 007D  
                  __end_of_dpowers 1828                              _frexp 127F  
                            _errno 006E                              _scale 0B21  
                  __end_of_isdigit 1082                      ___ftpack@sign 0074  
                            main@R 00C4                              main@s 00B9  
                   __CFG_BOREN$OFF 0000                       main@setpoint 00C7  
                            ltemp0 007E                              ltemp1 0082  
                            ltemp2 0086                              ltemp3 0080  
                            ttemp0 007E                              ttemp1 0081  
                            ttemp2 0084                              ttemp3 0087  
                            ttemp4 007F                              status 0003  
                            wtemp0 007E                              wtemp1 0080  
                            wtemp2 0082                              wtemp3 0084  
                            wtemp4 0086                              wtemp5 0088  
                            wtemp6 007F                    __end_of_sprintf 07DB  
                 InitCustomChars@i 0076                     _LCD_Write_Char 11E9  
                  __initialization 07DB                        log@exponent 0061  
                     __end_of_main 1000            __end_of_TMR2_Initialize 1091  
                           ??_main 0064                      ___fttol@sign1 0049  
                __end_of_LCD_Clear 1038                          ??_LCD_Cmd 0071  
             __size_of__tdiv_to_l_ 00B6                    ?_LCD_Set_Cursor 0073  
                           _ADCON0 0093                             _ADCON1 0094  
                           _ADCON2 0095                             _ADCON3 0096  
                           ?_frexp 0070                   ___llmod@dividend 0074  
                           _ADLTHH 010F                             ?_scale 0038  
                           _ADLTHL 010E                             _ADRESH 008D  
                           _ADRESL 008C                             _ADSTAT 0097  
                           _ADUTHH 0111                   ___awdiv@dividend 0079  
                           _ADUTHL 0110                   __end_of___awtoft 119B  
                           _ANSELA 0F38                             _ANSELB 0F43  
                           _ANSELC 0F4E                   __end_of___ftpack 0070  
               __CFG_RSTOSC$HFINT1 0000                             _RA1PPS 0F11  
                 __end_of___lltoft 11E9                     __CFG_WDTCCS$SC 0000  
                           _FVRCON 090C                   __end_of___lwtoft 10C7  
                           _OSCFRQ 0893             __end_of_LCD_Write_Char 1213  
                   __CFG_PWRTE$OFF 0000                   __end_of__powers_ 1876  
                     _CCPTMRS1bits 021F                             ___ftge 1244  
                        ??___aldiv 0078                             ___wmul 1141  
                        ??___awdiv 007B                          ??___ftadd 004C  
                   __CFG_STVREN$ON 0000                          ??___awmod 0074  
                        ??___ftdiv 0026                          ??___ftneg 0073  
                        ??___lldiv 0078                          ??___ftmul 002E  
                        ??___llmod 0078                          ??___ftsub 007E  
                        ??___fttol 0045            __end_of_PWM6_Initialize 1066  
                           _fround 0070                   ___awdiv@quotient 0022  
                  ___awmod@divisor 0070                    ___awmod@counter 0075  
            ___ftmul@f3_as_product 0033                    _ADCC_Initialize 110D  
                        ??_isdigit 0070  __size_of_ADCC_GetSingleConversion 000E  
        ?_ADCC_GetSingleConversion 0070                      main@steinhart 00D3  
                        ??_sprintf 005E                    _InitCustomChars 119B  
                  LCD_Set_Cursor@w 0078                    LCD_Set_Cursor@x 0076  
                  LCD_Set_Cursor@y 0073                    LCD_Set_Cursor@z 0077  
                _SYSTEM_Initialize 1091                   __end_oflog@coeff 1891  
          __end_of__initialization 07FD                          ?_LCD_Init 0070  
                        ?_LCD_Port 0070                         ___ftadd@f1 0046  
                       ___ftadd@f2 0049                         ___ftge@ff1 0070  
                       ___ftge@ff2 0073                 ?_SYSTEM_Initialize 0070  
                     eval_poly@res 005A                         ___ftdiv@f1 0023  
                       ___ftdiv@f2 0020                         ___ftdiv@f3 002B  
                  ?_LCD_Write_Char 0070                         ___ftneg@f1 0070  
                    LCD_Init@style 0075                         ___awtoft@c 0078  
                       ___ftmul@f1 0028                         ___ftmul@f2 002B  
                       ___ftsub@f1 0056                         ___ftsub@f2 0053  
                       ___fttol@f1 0041                     __pcstackCOMMON 0070  
                        LCD_Port@a 0070                       __pidataBANK2 10F5  
              ??_SYSTEM_Initialize 0071                         ___lltoft@c 0078  
                    __end_of_frexp 12BA                      __end_of_scale 0D65  
                 ?_TMR2_Initialize 0070                         ___lwtoft@c 0078  
                       __div_to_l_ 0A04                    __div_to_l_@exp1 0025  
                  __div_to_l_@cntr 0024                            ??_frexp 0074  
                          ??_scale 003B          __end_of_SYSTEM_Initialize 10A2  
                  __div_to_l_@quot 0020                       sprintf@width 00AA  
                       __pbssBANK0 006E                         __pbssBANK1 00D6  
               __size_of_eval_poly 0060                         ??_LCD_Init 0073  
                       ??_LCD_Port 0070                      __div_to_l_@f1 0070  
                    __div_to_l_@f2 0073                         __pmaintext 0D65  
                          ?___ftge 0070                            ?___wmul 0024  
                  __CFG_PPS1WAY$ON 0000            __end_of_ADCC_Initialize 1126  
       __end_of_PWM6_LoadDutyValue 10DD                            ?_fround 0038  
        __size_of_LCD_Write_String 001B                   ?_PWM6_Initialize 0070  
                        ?___awtoft 0078                          ?___ftpack 0070  
                          _ADSTPTH 0113                            _ADSTPTL 0112  
                        ?___lltoft 0078                          ?___lwtoft 0078  
          __end_of_InitCustomChars 11C1                            _LCD_Cmd 10A2  
                          _OSCCON1 088D                            _OSCCON3 088F  
                          _OSCTUNE 0892                            _PWM6DCH 038D  
                          _PWM6DCL 038C                            _PWM6CON 038E  
                          _PPSLOCK 0E8F                  __end_of__npowers_ 184F  
                       _scale$1010 003D               __CFG_SCANE$available 0000  
                          ___aldiv 14ED                            ___cgram 0120  
                  __size_of___ftge 003B                            ___awdiv 0806  
                          ___ftadd 090E                            ___awmod 12FC  
                          ___ftdiv 15F6                            ___ftneg 0004  
                          ___lldiv 1341                    __size_of___wmul 001C  
                          ___ftmul 174C                            ___llmod 12BA  
                          ___ftsub 115D                            ___fttol 156F  
                       ??___awtoft 007B                         ??___ftpack 0075  
                __end_of_eval_poly 13F3                    __size_of_fround 0165  
                       ??___lltoft 007C                   ??_LCD_Set_Cursor 0074  
                          __ptext1 01D5                            __ptext2 0B21  
                          __ptext3 1074                            __ptext4 0070  
                          __ptext5 12FC                            __ptext6 0806  
                          __ptext7 0858                            __ptext8 0A04  
                          __ptext9 11C1                         ??___lwtoft 007B  
                      ?__div_to_l_ 0070                            _dpowers 1800  
            _OSCILLATOR_Initialize 1038                          _T2CONbits 028E  
                     __size_of_log 00AD                            _isdigit 1074  
                 ___awmod@dividend 0072                   ___aldiv@dividend 0074  
         ??_PIN_MANAGER_Initialize 0070                            _samples 238C  
                        _LCD_Clear 1030         __size_of_SYSTEM_Initialize 0011  
                          _sprintf 01D5                            clrloop0 1042  
             end_of_initialization 07FD                     main@outCurrent 00CF  
                          init_ram 104D                            initloop 104E  
                  ___lldiv@divisor 0070                    ___lldiv@counter 007D  
                 ___aldiv@quotient 0022                       __pstringtext 1800  
                 ?_ADCC_Initialize 0070                     __tdiv_to_l_@f1 0070  
                   __tdiv_to_l_@f2 0073   __end_of_ADCC_GetSingleConversion 1074  
            __CFG_WDTCPS$WDTCPS_31 0000                      ??__tdiv_to_l_ 0076  
                 ?_InitCustomChars 0070                         ?_LCD_Clear 0070  
                 __CFG_FEXTOSC$OFF 0000                  LCD_Write_String@a 0078  
                LCD_Write_String@i 0076                   ??_LCD_Write_Char 0071  
                      ___ftdiv@exp 002E                  __size_of_LCD_Init 007B  
              __size_of__div_to_l_ 011D                  __size_of_LCD_Port 0018  
                       main@totals 00C9                        ___ftmul@exp 0032  
                   __end_of___ftge 127F                     __end_of___wmul 115D  
                 _LCD_Write_String 1126             ?_OSCILLATOR_Initialize 0070  
                   __end_of_fround 01D5                start_initialization 07DB  
                       eval_poly@d 0056                         eval_poly@n 0058  
                       eval_poly@x 0053    __size_of_PIN_MANAGER_Initialize 0031  
              __end_of__tdiv_to_l_ 090E                        __end_of_log 174C  
                       frexp@value 0070                    ___llmod@divisor 0070  
                  ___llmod@counter 0079                   __CFG_LPBOREN$OFF 0000  
                         ??___ftge 0076                           ??___wmul 007C  
                      __pdataBANK2 0120                    LCD_Write_Char@a 0074  
                  LCD_Write_Char@y 0073                           ??_fround 003B  
                    sprintf@tmpval 00AC                         fround@prec 0045  
                         ?_LCD_Cmd 0070                  __size_of___awtoft 0020  
         _ADCC_GetSingleConversion 1066                  __size_of___ftpack 0064  
                      __pbssBIGRAM 238C                  __size_of___lltoft 0028  
                         LCD_Cmd@a 0072                          ___latbits 0002  
                __size_of___lwtoft 0013                      __pcstackBANK0 0020  
                    __pcstackBANK1 00A0                 _PWM6_LoadDutyValue 10C7  
         __size_of_TMR2_Initialize 000F                        ??_LCD_Clear 0073  
              ?_PWM6_LoadDutyValue 0070                        sprintf@flag 00A8  
                      sprintf@fval 00B2                        sprintf@prec 00B6  
                        _main$1007 00C1             _PIN_MANAGER_Initialize 1213  
                         ?___aldiv 0070    ADCC_GetSingleConversion@channel 0073  
                         ?___awdiv 0077                           ?___ftadd 0046  
                         ?___awmod 0070                           ?___ftdiv 0020  
                         ?___ftneg 0070                           ?___lldiv 0070  
                         ?___ftmul 0028                           ?___llmod 0070  
                         ?___ftsub 0053                          __npowers_ 1828  
                         ?___fttol 0041               ??_PWM6_LoadDutyValue 0072  
                      __tdiv_to_l_ 0858                       ??__div_to_l_ 0076  
                         ?_isdigit 0070                          _eval_poly 1393  
         __size_of_PWM6_Initialize 000D                           ?_sprintf 0059  
                   __size_of_frexp 003B                           _T2CLKCON 0290  
                   __size_of_scale 0244             main@readTemperatureOld 00CD  
                  ___aldiv@divisor 0070                    ___aldiv@counter 0020  
                         _LCD_Init 13F3                     ___wmul@product 007C  
                         _LCD_Port 10DD                          clear_ram0 1041  
                         _PIE0bits 0716                 __end_of__div_to_l_ 0B21  
                         _PIR4bits 0710                         _ADCON0bits 0093  
                ___wmul@multiplier 0024                         ?_eval_poly 0053  
                 __size_of_LCD_Cmd 0012           __end_of_LCD_Write_String 1141  
                ??_TMR2_Initialize 0070                          frexp@eptr 0073  
          ??_OSCILLATOR_Initialize 0070                   __size_of___aldiv 0082  
                 __size_of___awdiv 0052                   __size_of___ftadd 00F6  
                 __size_of___awmod 0045                   __size_of___ftdiv 00A9  
                 __size_of___ftneg 0008                   __size_of___lldiv 0052  
                 __size_of___ftmul 00B4                   __size_of___llmod 0042  
                 __size_of___ftsub 001E                   __size_of___fttol 0087  
                         ___awtoft 117B                           ___ftpack 000C  
                      _fround$1008 0042                        _fround$1009 003F  
                         ___lltoft 11C1                        _isdigit$719 0070  
                         ___lwtoft 10B4                         sprintf@exp 00B0  
                       sprintf@val 00A4           __size_of_ADCC_Initialize 0019  
                  main@sampleIndex 00DB                   __size_of_isdigit 000E  
                         __ptext10 12BA                           __ptext11 1341  
                         __ptext20 090E                           __ptext12 156F  
                         __ptext21 1244                           __ptext13 115D  
                         __ptext30 1213                           __ptext22 117B  
                         __ptext14 0004                           __ptext31 1038  
                         __ptext23 10B4                           __ptext15 169F  
                         __ptext40 10A2                           __ptext32 110D  
                         __ptext24 15F6                           __ptext16 127F  
                         __ptext41 10DD                           __ptext33 10C7  
                         __ptext25 000C                           __ptext17 1393  
                         __ptext42 1066                           __ptext34 1126  
                         __ptext26 14ED                           __ptext18 1141  
                         __ptext35 146E                           __ptext27 1091  
                         __ptext19 174C                           __ptext36 13F3  
                         __ptext28 1082                           __ptext37 1030  
                         __ptext29 1059                           __ptext38 119B  
                         __ptext39 11E9                           __powers_ 184F  
          __size_of_LCD_Set_Cursor 007F                   __size_of_sprintf 0606  
         __size_of_InitCustomChars 0026                LCD_Write_Int@F13684 00D6  
                ??_PWM6_Initialize 0070                      __size_of_main 029B  
             __CFG_WDTCWS$WDTCWS_7 0000         ??_ADCC_GetSingleConversion 0073  
      PIN_MANAGER_Initialize@state 0070                           log@coeff 1876  
                      ??_eval_poly 007E                           isdigit@c 0071  
                         scale@scl 0040                 LCD_Write_Char@temp 0072  
                        sprintf@ap 00A3                   __tdiv_to_l_@exp1 0025  
                 __tdiv_to_l_@cntr 0024                          sprintf@sp 00B5  
                 __tdiv_to_l_@quot 0020                   ___lldiv@dividend 0074  
          ?_PIN_MANAGER_Initialize 0070                  __CFG_CLKOUTEN$OFF 0000  
                      _PPSLOCKbits 0E8F            __size_of_LCD_Write_Char 002A  
               LCD_Set_Cursor@temp 0079                       ?__tdiv_to_l_ 0070  
                         sprintf@c 00B8                           sprintf@f 0059  
                 ___lldiv@quotient 0079                       ___aldiv@sign 0021  
      PWM6_LoadDutyValue@dutyValue 0070     __end_of_PIN_MANAGER_Initialize 1244  
                ??_ADCC_Initialize 0070                  ??_InitCustomChars 0075  
