

Microchip Technology PIC LITE Macro Assembler V1.38 build -256452561 
                                                                                               Thu Sep 07 00:20:45 2017

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	16F18855
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK2,global,class=CODE,delta=2
     5                           	psect	stringtext,global,class=STRCODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    10                           	psect	inittext,global,class=CODE,delta=2
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	text6,local,class=CODE,merge=1,delta=2
    22                           	psect	text7,local,class=CODE,merge=1,delta=2
    23                           	psect	text8,local,class=CODE,merge=1,delta=2
    24                           	psect	text9,local,class=CODE,merge=1,delta=2
    25                           	psect	text10,local,class=CODE,merge=1,delta=2
    26                           	psect	text11,local,class=CODE,merge=1,delta=2
    27                           	psect	text12,local,class=CODE,merge=1,delta=2
    28                           	psect	text13,local,class=CODE,merge=1,delta=2
    29                           	psect	text14,local,class=CODE,merge=1,delta=2
    30                           	psect	text15,local,class=CODE,merge=1,delta=2
    31                           	psect	text16,local,class=CODE,merge=1,delta=2
    32                           	psect	text17,local,class=CODE,merge=1,delta=2
    33                           	psect	text18,local,class=CODE,merge=1,delta=2
    34                           	psect	text19,local,class=CODE,merge=1,delta=2
    35                           	psect	text20,local,class=CODE,merge=1,delta=2
    36                           	psect	text21,local,class=CODE,merge=1,delta=2
    37                           	psect	text22,local,class=CODE,merge=1,delta=2
    38                           	psect	text23,local,class=CODE,merge=1,delta=2
    39                           	psect	text24,local,class=CODE,merge=1,delta=2
    40                           	psect	text25,local,class=CODE,merge=1,delta=2
    41                           	psect	text26,local,class=CODE,merge=1,delta=2
    42                           	psect	text27,local,class=CODE,merge=1,delta=2
    43                           	psect	text28,local,class=CODE,merge=1,delta=2
    44                           	psect	text29,local,class=CODE,merge=1,delta=2
    45                           	psect	text30,local,class=CODE,merge=1,delta=2
    46                           	psect	text31,local,class=CODE,merge=1,delta=2
    47                           	psect	text32,local,class=CODE,merge=1,delta=2
    48                           	psect	text33,local,class=CODE,merge=1,delta=2
    49                           	psect	text34,local,class=CODE,merge=1,delta=2
    50                           	psect	text35,local,class=CODE,merge=1,delta=2
    51                           	psect	text36,local,class=CODE,merge=1,delta=2
    52                           	psect	text37,local,class=CODE,merge=1,delta=2
    53                           	psect	text38,local,class=CODE,merge=1,delta=2
    54                           	psect	text39,local,class=CODE,merge=1,delta=2
    55                           	psect	text40,local,class=CODE,merge=1,delta=2
    56                           	psect	text41,local,class=CODE,merge=1,delta=2
    57                           	psect	text42,local,class=CODE,merge=1,delta=2
    58                           	dabs	1,0x620,48
    59                           	dabs	1,0x5BC,52
    60                           	dabs	1,0x238C,0,_samples
    61                           	dabs	1,0x7E,2
    62  0000                     	;# 
    63  0001                     	;# 
    64  0002                     	;# 
    65  0003                     	;# 
    66  0004                     	;# 
    67  0005                     	;# 
    68  0006                     	;# 
    69  0007                     	;# 
    70  0008                     	;# 
    71  0009                     	;# 
    72  000A                     	;# 
    73  000B                     	;# 
    74  000C                     	;# 
    75  000D                     	;# 
    76  000E                     	;# 
    77  0010                     	;# 
    78  0011                     	;# 
    79  0012                     	;# 
    80  0013                     	;# 
    81  0016                     	;# 
    82  0017                     	;# 
    83  0018                     	;# 
    84  001C                     	;# 
    85  001C                     	;# 
    86  001D                     	;# 
    87  001D                     	;# 
    88  001E                     	;# 
    89  001F                     	;# 
    90  008C                     	;# 
    91  008C                     	;# 
    92  008D                     	;# 
    93  008E                     	;# 
    94  008E                     	;# 
    95  008F                     	;# 
    96  0090                     	;# 
    97  0090                     	;# 
    98  0091                     	;# 
    99  0093                     	;# 
   100  0094                     	;# 
   101  0095                     	;# 
   102  0096                     	;# 
   103  0097                     	;# 
   104  0098                     	;# 
   105  0099                     	;# 
   106  009A                     	;# 
   107  009B                     	;# 
   108  009C                     	;# 
   109  009D                     	;# 
   110  009E                     	;# 
   111  010C                     	;# 
   112  010D                     	;# 
   113  010E                     	;# 
   114  010E                     	;# 
   115  010F                     	;# 
   116  0110                     	;# 
   117  0110                     	;# 
   118  0111                     	;# 
   119  0112                     	;# 
   120  0112                     	;# 
   121  0113                     	;# 
   122  0114                     	;# 
   123  0114                     	;# 
   124  0115                     	;# 
   125  0116                     	;# 
   126  0116                     	;# 
   127  0117                     	;# 
   128  0119                     	;# 
   129  0119                     	;# 
   130  0119                     	;# 
   131  011A                     	;# 
   132  011A                     	;# 
   133  011A                     	;# 
   134  011B                     	;# 
   135  011B                     	;# 
   136  011B                     	;# 
   137  011B                     	;# 
   138  011B                     	;# 
   139  011C                     	;# 
   140  011C                     	;# 
   141  011C                     	;# 
   142  011D                     	;# 
   143  011D                     	;# 
   144  011D                     	;# 
   145  011E                     	;# 
   146  011E                     	;# 
   147  011E                     	;# 
   148  011F                     	;# 
   149  011F                     	;# 
   150  011F                     	;# 
   151  011F                     	;# 
   152  011F                     	;# 
   153  018C                     	;# 
   154  018D                     	;# 
   155  018E                     	;# 
   156  018F                     	;# 
   157  0190                     	;# 
   158  0191                     	;# 
   159  0192                     	;# 
   160  0196                     	;# 
   161  0197                     	;# 
   162  0198                     	;# 
   163  0199                     	;# 
   164  019A                     	;# 
   165  019B                     	;# 
   166  019C                     	;# 
   167  020C                     	;# 
   168  020D                     	;# 
   169  020E                     	;# 
   170  020F                     	;# 
   171  020F                     	;# 
   172  0210                     	;# 
   173  0210                     	;# 
   174  0211                     	;# 
   175  0211                     	;# 
   176  0212                     	;# 
   177  0213                     	;# 
   178  0214                     	;# 
   179  0215                     	;# 
   180  0215                     	;# 
   181  0216                     	;# 
   182  0216                     	;# 
   183  0217                     	;# 
   184  0217                     	;# 
   185  0218                     	;# 
   186  0219                     	;# 
   187  021A                     	;# 
   188  021B                     	;# 
   189  021B                     	;# 
   190  021C                     	;# 
   191  021C                     	;# 
   192  021D                     	;# 
   193  021D                     	;# 
   194  021E                     	;# 
   195  021F                     	;# 
   196  028C                     	;# 
   197  028C                     	;# 
   198  028D                     	;# 
   199  028D                     	;# 
   200  028E                     	;# 
   201  028F                     	;# 
   202  0290                     	;# 
   203  0290                     	;# 
   204  0291                     	;# 
   205  0292                     	;# 
   206  0292                     	;# 
   207  0293                     	;# 
   208  0293                     	;# 
   209  0294                     	;# 
   210  0295                     	;# 
   211  0296                     	;# 
   212  0296                     	;# 
   213  0297                     	;# 
   214  0298                     	;# 
   215  0298                     	;# 
   216  0299                     	;# 
   217  0299                     	;# 
   218  029A                     	;# 
   219  029B                     	;# 
   220  029C                     	;# 
   221  029C                     	;# 
   222  029D                     	;# 
   223  030C                     	;# 
   224  030C                     	;# 
   225  030D                     	;# 
   226  030E                     	;# 
   227  030F                     	;# 
   228  0310                     	;# 
   229  0310                     	;# 
   230  0311                     	;# 
   231  0312                     	;# 
   232  0313                     	;# 
   233  0314                     	;# 
   234  0314                     	;# 
   235  0315                     	;# 
   236  0316                     	;# 
   237  0317                     	;# 
   238  0318                     	;# 
   239  0318                     	;# 
   240  0319                     	;# 
   241  031A                     	;# 
   242  031B                     	;# 
   243  031C                     	;# 
   244  031C                     	;# 
   245  031D                     	;# 
   246  031E                     	;# 
   247  031F                     	;# 
   248  038C                     	;# 
   249  038D                     	;# 
   250  038E                     	;# 
   251  0390                     	;# 
   252  0391                     	;# 
   253  0392                     	;# 
   254  040C                     	;# 
   255  040D                     	;# 
   256  040E                     	;# 
   257  040F                     	;# 
   258  0410                     	;# 
   259  0411                     	;# 
   260  0416                     	;# 
   261  0416                     	;# 
   262  0417                     	;# 
   263  0418                     	;# 
   264  0418                     	;# 
   265  0419                     	;# 
   266  041A                     	;# 
   267  041A                     	;# 
   268  041B                     	;# 
   269  041C                     	;# 
   270  041C                     	;# 
   271  041D                     	;# 
   272  041E                     	;# 
   273  041F                     	;# 
   274  048C                     	;# 
   275  048C                     	;# 
   276  048D                     	;# 
   277  048E                     	;# 
   278  048F                     	;# 
   279  048F                     	;# 
   280  0490                     	;# 
   281  0491                     	;# 
   282  0492                     	;# 
   283  0492                     	;# 
   284  0493                     	;# 
   285  0494                     	;# 
   286  0495                     	;# 
   287  0495                     	;# 
   288  0496                     	;# 
   289  0497                     	;# 
   290  0498                     	;# 
   291  0499                     	;# 
   292  049A                     	;# 
   293  049B                     	;# 
   294  049C                     	;# 
   295  049D                     	;# 
   296  050C                     	;# 
   297  050C                     	;# 
   298  050D                     	;# 
   299  050E                     	;# 
   300  050F                     	;# 
   301  050F                     	;# 
   302  0510                     	;# 
   303  0511                     	;# 
   304  0512                     	;# 
   305  0512                     	;# 
   306  0513                     	;# 
   307  0514                     	;# 
   308  0515                     	;# 
   309  0515                     	;# 
   310  0516                     	;# 
   311  0517                     	;# 
   312  0518                     	;# 
   313  0519                     	;# 
   314  051A                     	;# 
   315  051B                     	;# 
   316  051C                     	;# 
   317  051D                     	;# 
   318  058C                     	;# 
   319  058C                     	;# 
   320  058D                     	;# 
   321  058E                     	;# 
   322  058F                     	;# 
   323  058F                     	;# 
   324  0590                     	;# 
   325  0591                     	;# 
   326  0592                     	;# 
   327  0593                     	;# 
   328  060C                     	;# 
   329  060D                     	;# 
   330  060E                     	;# 
   331  060F                     	;# 
   332  0610                     	;# 
   333  0611                     	;# 
   334  0612                     	;# 
   335  0613                     	;# 
   336  0614                     	;# 
   337  0616                     	;# 
   338  0617                     	;# 
   339  0618                     	;# 
   340  0619                     	;# 
   341  061A                     	;# 
   342  061B                     	;# 
   343  061C                     	;# 
   344  061D                     	;# 
   345  061E                     	;# 
   346  068C                     	;# 
   347  068D                     	;# 
   348  068E                     	;# 
   349  068F                     	;# 
   350  0690                     	;# 
   351  0691                     	;# 
   352  0692                     	;# 
   353  0693                     	;# 
   354  0694                     	;# 
   355  070C                     	;# 
   356  070D                     	;# 
   357  070E                     	;# 
   358  070F                     	;# 
   359  0710                     	;# 
   360  0711                     	;# 
   361  0712                     	;# 
   362  0713                     	;# 
   363  0714                     	;# 
   364  0716                     	;# 
   365  0717                     	;# 
   366  0718                     	;# 
   367  0719                     	;# 
   368  071A                     	;# 
   369  071B                     	;# 
   370  071C                     	;# 
   371  071D                     	;# 
   372  071E                     	;# 
   373  0796                     	;# 
   374  0797                     	;# 
   375  0798                     	;# 
   376  0799                     	;# 
   377  079A                     	;# 
   378  079B                     	;# 
   379  080C                     	;# 
   380  080D                     	;# 
   381  080E                     	;# 
   382  080F                     	;# 
   383  0810                     	;# 
   384  0811                     	;# 
   385  0812                     	;# 
   386  0813                     	;# 
   387  0814                     	;# 
   388  081A                     	;# 
   389  081B                     	;# 
   390  081C                     	;# 
   391  081D                     	;# 
   392  081E                     	;# 
   393  081F                     	;# 
   394  088C                     	;# 
   395  088D                     	;# 
   396  088E                     	;# 
   397  088F                     	;# 
   398  0890                     	;# 
   399  0891                     	;# 
   400  0892                     	;# 
   401  0893                     	;# 
   402  0895                     	;# 
   403  0896                     	;# 
   404  0897                     	;# 
   405  0898                     	;# 
   406  0899                     	;# 
   407  089A                     	;# 
   408  089B                     	;# 
   409  090C                     	;# 
   410  090E                     	;# 
   411  090F                     	;# 
   412  091F                     	;# 
   413  091F                     	;# 
   414  098F                     	;# 
   415  098F                     	;# 
   416  0990                     	;# 
   417  0991                     	;# 
   418  0992                     	;# 
   419  0993                     	;# 
   420  0994                     	;# 
   421  0995                     	;# 
   422  0996                     	;# 
   423  0997                     	;# 
   424  0E0F                     	;# 
   425  0E10                     	;# 
   426  0E11                     	;# 
   427  0E12                     	;# 
   428  0E13                     	;# 
   429  0E14                     	;# 
   430  0E15                     	;# 
   431  0E16                     	;# 
   432  0E17                     	;# 
   433  0E18                     	;# 
   434  0E19                     	;# 
   435  0E1A                     	;# 
   436  0E1B                     	;# 
   437  0E1C                     	;# 
   438  0E1D                     	;# 
   439  0E1E                     	;# 
   440  0E1F                     	;# 
   441  0E20                     	;# 
   442  0E21                     	;# 
   443  0E22                     	;# 
   444  0E23                     	;# 
   445  0E24                     	;# 
   446  0E25                     	;# 
   447  0E26                     	;# 
   448  0E27                     	;# 
   449  0E28                     	;# 
   450  0E29                     	;# 
   451  0E2A                     	;# 
   452  0E2B                     	;# 
   453  0E2C                     	;# 
   454  0E2D                     	;# 
   455  0E2E                     	;# 
   456  0E2F                     	;# 
   457  0E30                     	;# 
   458  0E31                     	;# 
   459  0E32                     	;# 
   460  0E33                     	;# 
   461  0E34                     	;# 
   462  0E35                     	;# 
   463  0E36                     	;# 
   464  0E37                     	;# 
   465  0E8F                     	;# 
   466  0E90                     	;# 
   467  0E91                     	;# 
   468  0E92                     	;# 
   469  0E93                     	;# 
   470  0E94                     	;# 
   471  0E95                     	;# 
   472  0E96                     	;# 
   473  0E97                     	;# 
   474  0E9C                     	;# 
   475  0E9D                     	;# 
   476  0E9E                     	;# 
   477  0EA1                     	;# 
   478  0EA2                     	;# 
   479  0EA3                     	;# 
   480  0EA4                     	;# 
   481  0EA5                     	;# 
   482  0EA9                     	;# 
   483  0EAA                     	;# 
   484  0EAB                     	;# 
   485  0EAC                     	;# 
   486  0EB1                     	;# 
   487  0EB2                     	;# 
   488  0EB3                     	;# 
   489  0EB8                     	;# 
   490  0EB9                     	;# 
   491  0EBA                     	;# 
   492  0EBB                     	;# 
   493  0EBC                     	;# 
   494  0EBD                     	;# 
   495  0EBE                     	;# 
   496  0EC3                     	;# 
   497  0EC5                     	;# 
   498  0EC6                     	;# 
   499  0EC7                     	;# 
   500  0EC8                     	;# 
   501  0EC9                     	;# 
   502  0ECA                     	;# 
   503  0ECB                     	;# 
   504  0ECC                     	;# 
   505  0F10                     	;# 
   506  0F11                     	;# 
   507  0F12                     	;# 
   508  0F13                     	;# 
   509  0F14                     	;# 
   510  0F15                     	;# 
   511  0F16                     	;# 
   512  0F17                     	;# 
   513  0F18                     	;# 
   514  0F19                     	;# 
   515  0F1A                     	;# 
   516  0F1B                     	;# 
   517  0F1C                     	;# 
   518  0F1D                     	;# 
   519  0F1E                     	;# 
   520  0F1F                     	;# 
   521  0F20                     	;# 
   522  0F21                     	;# 
   523  0F22                     	;# 
   524  0F23                     	;# 
   525  0F24                     	;# 
   526  0F25                     	;# 
   527  0F26                     	;# 
   528  0F27                     	;# 
   529  0F38                     	;# 
   530  0F39                     	;# 
   531  0F3A                     	;# 
   532  0F3B                     	;# 
   533  0F3C                     	;# 
   534  0F3D                     	;# 
   535  0F3E                     	;# 
   536  0F3F                     	;# 
   537  0F40                     	;# 
   538  0F41                     	;# 
   539  0F43                     	;# 
   540  0F44                     	;# 
   541  0F45                     	;# 
   542  0F46                     	;# 
   543  0F47                     	;# 
   544  0F48                     	;# 
   545  0F49                     	;# 
   546  0F4A                     	;# 
   547  0F4B                     	;# 
   548  0F4C                     	;# 
   549  0F4E                     	;# 
   550  0F4F                     	;# 
   551  0F50                     	;# 
   552  0F51                     	;# 
   553  0F52                     	;# 
   554  0F53                     	;# 
   555  0F54                     	;# 
   556  0F55                     	;# 
   557  0F56                     	;# 
   558  0F57                     	;# 
   559  0F65                     	;# 
   560  0F68                     	;# 
   561  0F69                     	;# 
   562  0F6A                     	;# 
   563  0F6B                     	;# 
   564  0FE4                     	;# 
   565  0FE5                     	;# 
   566  0FE6                     	;# 
   567  0FE7                     	;# 
   568  0FE8                     	;# 
   569  0FE9                     	;# 
   570  0FEA                     	;# 
   571  0FEB                     	;# 
   572  0FED                     	;# 
   573  0FEE                     	;# 
   574  0FEF                     	;# 
   575  0000                     	;# 
   576  0001                     	;# 
   577  0002                     	;# 
   578  0003                     	;# 
   579  0004                     	;# 
   580  0005                     	;# 
   581  0006                     	;# 
   582  0007                     	;# 
   583  0008                     	;# 
   584  0009                     	;# 
   585  000A                     	;# 
   586  000B                     	;# 
   587  000C                     	;# 
   588  000D                     	;# 
   589  000E                     	;# 
   590  0010                     	;# 
   591  0011                     	;# 
   592  0012                     	;# 
   593  0013                     	;# 
   594  0016                     	;# 
   595  0017                     	;# 
   596  0018                     	;# 
   597  001C                     	;# 
   598  001C                     	;# 
   599  001D                     	;# 
   600  001D                     	;# 
   601  001E                     	;# 
   602  001F                     	;# 
   603  008C                     	;# 
   604  008C                     	;# 
   605  008D                     	;# 
   606  008E                     	;# 
   607  008E                     	;# 
   608  008F                     	;# 
   609  0090                     	;# 
   610  0090                     	;# 
   611  0091                     	;# 
   612  0093                     	;# 
   613  0094                     	;# 
   614  0095                     	;# 
   615  0096                     	;# 
   616  0097                     	;# 
   617  0098                     	;# 
   618  0099                     	;# 
   619  009A                     	;# 
   620  009B                     	;# 
   621  009C                     	;# 
   622  009D                     	;# 
   623  009E                     	;# 
   624  010C                     	;# 
   625  010D                     	;# 
   626  010E                     	;# 
   627  010E                     	;# 
   628  010F                     	;# 
   629  0110                     	;# 
   630  0110                     	;# 
   631  0111                     	;# 
   632  0112                     	;# 
   633  0112                     	;# 
   634  0113                     	;# 
   635  0114                     	;# 
   636  0114                     	;# 
   637  0115                     	;# 
   638  0116                     	;# 
   639  0116                     	;# 
   640  0117                     	;# 
   641  0119                     	;# 
   642  0119                     	;# 
   643  0119                     	;# 
   644  011A                     	;# 
   645  011A                     	;# 
   646  011A                     	;# 
   647  011B                     	;# 
   648  011B                     	;# 
   649  011B                     	;# 
   650  011B                     	;# 
   651  011B                     	;# 
   652  011C                     	;# 
   653  011C                     	;# 
   654  011C                     	;# 
   655  011D                     	;# 
   656  011D                     	;# 
   657  011D                     	;# 
   658  011E                     	;# 
   659  011E                     	;# 
   660  011E                     	;# 
   661  011F                     	;# 
   662  011F                     	;# 
   663  011F                     	;# 
   664  011F                     	;# 
   665  011F                     	;# 
   666  018C                     	;# 
   667  018D                     	;# 
   668  018E                     	;# 
   669  018F                     	;# 
   670  0190                     	;# 
   671  0191                     	;# 
   672  0192                     	;# 
   673  0196                     	;# 
   674  0197                     	;# 
   675  0198                     	;# 
   676  0199                     	;# 
   677  019A                     	;# 
   678  019B                     	;# 
   679  019C                     	;# 
   680  020C                     	;# 
   681  020D                     	;# 
   682  020E                     	;# 
   683  020F                     	;# 
   684  020F                     	;# 
   685  0210                     	;# 
   686  0210                     	;# 
   687  0211                     	;# 
   688  0211                     	;# 
   689  0212                     	;# 
   690  0213                     	;# 
   691  0214                     	;# 
   692  0215                     	;# 
   693  0215                     	;# 
   694  0216                     	;# 
   695  0216                     	;# 
   696  0217                     	;# 
   697  0217                     	;# 
   698  0218                     	;# 
   699  0219                     	;# 
   700  021A                     	;# 
   701  021B                     	;# 
   702  021B                     	;# 
   703  021C                     	;# 
   704  021C                     	;# 
   705  021D                     	;# 
   706  021D                     	;# 
   707  021E                     	;# 
   708  021F                     	;# 
   709  028C                     	;# 
   710  028C                     	;# 
   711  028D                     	;# 
   712  028D                     	;# 
   713  028E                     	;# 
   714  028F                     	;# 
   715  0290                     	;# 
   716  0290                     	;# 
   717  0291                     	;# 
   718  0292                     	;# 
   719  0292                     	;# 
   720  0293                     	;# 
   721  0293                     	;# 
   722  0294                     	;# 
   723  0295                     	;# 
   724  0296                     	;# 
   725  0296                     	;# 
   726  0297                     	;# 
   727  0298                     	;# 
   728  0298                     	;# 
   729  0299                     	;# 
   730  0299                     	;# 
   731  029A                     	;# 
   732  029B                     	;# 
   733  029C                     	;# 
   734  029C                     	;# 
   735  029D                     	;# 
   736  030C                     	;# 
   737  030C                     	;# 
   738  030D                     	;# 
   739  030E                     	;# 
   740  030F                     	;# 
   741  0310                     	;# 
   742  0310                     	;# 
   743  0311                     	;# 
   744  0312                     	;# 
   745  0313                     	;# 
   746  0314                     	;# 
   747  0314                     	;# 
   748  0315                     	;# 
   749  0316                     	;# 
   750  0317                     	;# 
   751  0318                     	;# 
   752  0318                     	;# 
   753  0319                     	;# 
   754  031A                     	;# 
   755  031B                     	;# 
   756  031C                     	;# 
   757  031C                     	;# 
   758  031D                     	;# 
   759  031E                     	;# 
   760  031F                     	;# 
   761  038C                     	;# 
   762  038D                     	;# 
   763  038E                     	;# 
   764  0390                     	;# 
   765  0391                     	;# 
   766  0392                     	;# 
   767  040C                     	;# 
   768  040D                     	;# 
   769  040E                     	;# 
   770  040F                     	;# 
   771  0410                     	;# 
   772  0411                     	;# 
   773  0416                     	;# 
   774  0416                     	;# 
   775  0417                     	;# 
   776  0418                     	;# 
   777  0418                     	;# 
   778  0419                     	;# 
   779  041A                     	;# 
   780  041A                     	;# 
   781  041B                     	;# 
   782  041C                     	;# 
   783  041C                     	;# 
   784  041D                     	;# 
   785  041E                     	;# 
   786  041F                     	;# 
   787  048C                     	;# 
   788  048C                     	;# 
   789  048D                     	;# 
   790  048E                     	;# 
   791  048F                     	;# 
   792  048F                     	;# 
   793  0490                     	;# 
   794  0491                     	;# 
   795  0492                     	;# 
   796  0492                     	;# 
   797  0493                     	;# 
   798  0494                     	;# 
   799  0495                     	;# 
   800  0495                     	;# 
   801  0496                     	;# 
   802  0497                     	;# 
   803  0498                     	;# 
   804  0499                     	;# 
   805  049A                     	;# 
   806  049B                     	;# 
   807  049C                     	;# 
   808  049D                     	;# 
   809  050C                     	;# 
   810  050C                     	;# 
   811  050D                     	;# 
   812  050E                     	;# 
   813  050F                     	;# 
   814  050F                     	;# 
   815  0510                     	;# 
   816  0511                     	;# 
   817  0512                     	;# 
   818  0512                     	;# 
   819  0513                     	;# 
   820  0514                     	;# 
   821  0515                     	;# 
   822  0515                     	;# 
   823  0516                     	;# 
   824  0517                     	;# 
   825  0518                     	;# 
   826  0519                     	;# 
   827  051A                     	;# 
   828  051B                     	;# 
   829  051C                     	;# 
   830  051D                     	;# 
   831  058C                     	;# 
   832  058C                     	;# 
   833  058D                     	;# 
   834  058E                     	;# 
   835  058F                     	;# 
   836  058F                     	;# 
   837  0590                     	;# 
   838  0591                     	;# 
   839  0592                     	;# 
   840  0593                     	;# 
   841  060C                     	;# 
   842  060D                     	;# 
   843  060E                     	;# 
   844  060F                     	;# 
   845  0610                     	;# 
   846  0611                     	;# 
   847  0612                     	;# 
   848  0613                     	;# 
   849  0614                     	;# 
   850  0616                     	;# 
   851  0617                     	;# 
   852  0618                     	;# 
   853  0619                     	;# 
   854  061A                     	;# 
   855  061B                     	;# 
   856  061C                     	;# 
   857  061D                     	;# 
   858  061E                     	;# 
   859  068C                     	;# 
   860  068D                     	;# 
   861  068E                     	;# 
   862  068F                     	;# 
   863  0690                     	;# 
   864  0691                     	;# 
   865  0692                     	;# 
   866  0693                     	;# 
   867  0694                     	;# 
   868  070C                     	;# 
   869  070D                     	;# 
   870  070E                     	;# 
   871  070F                     	;# 
   872  0710                     	;# 
   873  0711                     	;# 
   874  0712                     	;# 
   875  0713                     	;# 
   876  0714                     	;# 
   877  0716                     	;# 
   878  0717                     	;# 
   879  0718                     	;# 
   880  0719                     	;# 
   881  071A                     	;# 
   882  071B                     	;# 
   883  071C                     	;# 
   884  071D                     	;# 
   885  071E                     	;# 
   886  0796                     	;# 
   887  0797                     	;# 
   888  0798                     	;# 
   889  0799                     	;# 
   890  079A                     	;# 
   891  079B                     	;# 
   892  080C                     	;# 
   893  080D                     	;# 
   894  080E                     	;# 
   895  080F                     	;# 
   896  0810                     	;# 
   897  0811                     	;# 
   898  0812                     	;# 
   899  0813                     	;# 
   900  0814                     	;# 
   901  081A                     	;# 
   902  081B                     	;# 
   903  081C                     	;# 
   904  081D                     	;# 
   905  081E                     	;# 
   906  081F                     	;# 
   907  088C                     	;# 
   908  088D                     	;# 
   909  088E                     	;# 
   910  088F                     	;# 
   911  0890                     	;# 
   912  0891                     	;# 
   913  0892                     	;# 
   914  0893                     	;# 
   915  0895                     	;# 
   916  0896                     	;# 
   917  0897                     	;# 
   918  0898                     	;# 
   919  0899                     	;# 
   920  089A                     	;# 
   921  089B                     	;# 
   922  090C                     	;# 
   923  090E                     	;# 
   924  090F                     	;# 
   925  091F                     	;# 
   926  091F                     	;# 
   927  098F                     	;# 
   928  098F                     	;# 
   929  0990                     	;# 
   930  0991                     	;# 
   931  0992                     	;# 
   932  0993                     	;# 
   933  0994                     	;# 
   934  0995                     	;# 
   935  0996                     	;# 
   936  0997                     	;# 
   937  0E0F                     	;# 
   938  0E10                     	;# 
   939  0E11                     	;# 
   940  0E12                     	;# 
   941  0E13                     	;# 
   942  0E14                     	;# 
   943  0E15                     	;# 
   944  0E16                     	;# 
   945  0E17                     	;# 
   946  0E18                     	;# 
   947  0E19                     	;# 
   948  0E1A                     	;# 
   949  0E1B                     	;# 
   950  0E1C                     	;# 
   951  0E1D                     	;# 
   952  0E1E                     	;# 
   953  0E1F                     	;# 
   954  0E20                     	;# 
   955  0E21                     	;# 
   956  0E22                     	;# 
   957  0E23                     	;# 
   958  0E24                     	;# 
   959  0E25                     	;# 
   960  0E26                     	;# 
   961  0E27                     	;# 
   962  0E28                     	;# 
   963  0E29                     	;# 
   964  0E2A                     	;# 
   965  0E2B                     	;# 
   966  0E2C                     	;# 
   967  0E2D                     	;# 
   968  0E2E                     	;# 
   969  0E2F                     	;# 
   970  0E30                     	;# 
   971  0E31                     	;# 
   972  0E32                     	;# 
   973  0E33                     	;# 
   974  0E34                     	;# 
   975  0E35                     	;# 
   976  0E36                     	;# 
   977  0E37                     	;# 
   978  0E8F                     	;# 
   979  0E90                     	;# 
   980  0E91                     	;# 
   981  0E92                     	;# 
   982  0E93                     	;# 
   983  0E94                     	;# 
   984  0E95                     	;# 
   985  0E96                     	;# 
   986  0E97                     	;# 
   987  0E9C                     	;# 
   988  0E9D                     	;# 
   989  0E9E                     	;# 
   990  0EA1                     	;# 
   991  0EA2                     	;# 
   992  0EA3                     	;# 
   993  0EA4                     	;# 
   994  0EA5                     	;# 
   995  0EA9                     	;# 
   996  0EAA                     	;# 
   997  0EAB                     	;# 
   998  0EAC                     	;# 
   999  0EB1                     	;# 
  1000  0EB2                     	;# 
  1001  0EB3                     	;# 
  1002  0EB8                     	;# 
  1003  0EB9                     	;# 
  1004  0EBA                     	;# 
  1005  0EBB                     	;# 
  1006  0EBC                     	;# 
  1007  0EBD                     	;# 
  1008  0EBE                     	;# 
  1009  0EC3                     	;# 
  1010  0EC5                     	;# 
  1011  0EC6                     	;# 
  1012  0EC7                     	;# 
  1013  0EC8                     	;# 
  1014  0EC9                     	;# 
  1015  0ECA                     	;# 
  1016  0ECB                     	;# 
  1017  0ECC                     	;# 
  1018  0F10                     	;# 
  1019  0F11                     	;# 
  1020  0F12                     	;# 
  1021  0F13                     	;# 
  1022  0F14                     	;# 
  1023  0F15                     	;# 
  1024  0F16                     	;# 
  1025  0F17                     	;# 
  1026  0F18                     	;# 
  1027  0F19                     	;# 
  1028  0F1A                     	;# 
  1029  0F1B                     	;# 
  1030  0F1C                     	;# 
  1031  0F1D                     	;# 
  1032  0F1E                     	;# 
  1033  0F1F                     	;# 
  1034  0F20                     	;# 
  1035  0F21                     	;# 
  1036  0F22                     	;# 
  1037  0F23                     	;# 
  1038  0F24                     	;# 
  1039  0F25                     	;# 
  1040  0F26                     	;# 
  1041  0F27                     	;# 
  1042  0F38                     	;# 
  1043  0F39                     	;# 
  1044  0F3A                     	;# 
  1045  0F3B                     	;# 
  1046  0F3C                     	;# 
  1047  0F3D                     	;# 
  1048  0F3E                     	;# 
  1049  0F3F                     	;# 
  1050  0F40                     	;# 
  1051  0F41                     	;# 
  1052  0F43                     	;# 
  1053  0F44                     	;# 
  1054  0F45                     	;# 
  1055  0F46                     	;# 
  1056  0F47                     	;# 
  1057  0F48                     	;# 
  1058  0F49                     	;# 
  1059  0F4A                     	;# 
  1060  0F4B                     	;# 
  1061  0F4C                     	;# 
  1062  0F4E                     	;# 
  1063  0F4F                     	;# 
  1064  0F50                     	;# 
  1065  0F51                     	;# 
  1066  0F52                     	;# 
  1067  0F53                     	;# 
  1068  0F54                     	;# 
  1069  0F55                     	;# 
  1070  0F56                     	;# 
  1071  0F57                     	;# 
  1072  0F65                     	;# 
  1073  0F68                     	;# 
  1074  0F69                     	;# 
  1075  0F6A                     	;# 
  1076  0F6B                     	;# 
  1077  0FE4                     	;# 
  1078  0FE5                     	;# 
  1079  0FE6                     	;# 
  1080  0FE7                     	;# 
  1081  0FE8                     	;# 
  1082  0FE9                     	;# 
  1083  0FEA                     	;# 
  1084  0FEB                     	;# 
  1085  0FED                     	;# 
  1086  0FEE                     	;# 
  1087  0FEF                     	;# 
  1088  0000                     	;# 
  1089  0001                     	;# 
  1090  0002                     	;# 
  1091  0003                     	;# 
  1092  0004                     	;# 
  1093  0005                     	;# 
  1094  0006                     	;# 
  1095  0007                     	;# 
  1096  0008                     	;# 
  1097  0009                     	;# 
  1098  000A                     	;# 
  1099  000B                     	;# 
  1100  000C                     	;# 
  1101  000D                     	;# 
  1102  000E                     	;# 
  1103  0010                     	;# 
  1104  0011                     	;# 
  1105  0012                     	;# 
  1106  0013                     	;# 
  1107  0016                     	;# 
  1108  0017                     	;# 
  1109  0018                     	;# 
  1110  001C                     	;# 
  1111  001C                     	;# 
  1112  001D                     	;# 
  1113  001D                     	;# 
  1114  001E                     	;# 
  1115  001F                     	;# 
  1116  008C                     	;# 
  1117  008C                     	;# 
  1118  008D                     	;# 
  1119  008E                     	;# 
  1120  008E                     	;# 
  1121  008F                     	;# 
  1122  0090                     	;# 
  1123  0090                     	;# 
  1124  0091                     	;# 
  1125  0093                     	;# 
  1126  0094                     	;# 
  1127  0095                     	;# 
  1128  0096                     	;# 
  1129  0097                     	;# 
  1130  0098                     	;# 
  1131  0099                     	;# 
  1132  009A                     	;# 
  1133  009B                     	;# 
  1134  009C                     	;# 
  1135  009D                     	;# 
  1136  009E                     	;# 
  1137  010C                     	;# 
  1138  010D                     	;# 
  1139  010E                     	;# 
  1140  010E                     	;# 
  1141  010F                     	;# 
  1142  0110                     	;# 
  1143  0110                     	;# 
  1144  0111                     	;# 
  1145  0112                     	;# 
  1146  0112                     	;# 
  1147  0113                     	;# 
  1148  0114                     	;# 
  1149  0114                     	;# 
  1150  0115                     	;# 
  1151  0116                     	;# 
  1152  0116                     	;# 
  1153  0117                     	;# 
  1154  0119                     	;# 
  1155  0119                     	;# 
  1156  0119                     	;# 
  1157  011A                     	;# 
  1158  011A                     	;# 
  1159  011A                     	;# 
  1160  011B                     	;# 
  1161  011B                     	;# 
  1162  011B                     	;# 
  1163  011B                     	;# 
  1164  011B                     	;# 
  1165  011C                     	;# 
  1166  011C                     	;# 
  1167  011C                     	;# 
  1168  011D                     	;# 
  1169  011D                     	;# 
  1170  011D                     	;# 
  1171  011E                     	;# 
  1172  011E                     	;# 
  1173  011E                     	;# 
  1174  011F                     	;# 
  1175  011F                     	;# 
  1176  011F                     	;# 
  1177  011F                     	;# 
  1178  011F                     	;# 
  1179  018C                     	;# 
  1180  018D                     	;# 
  1181  018E                     	;# 
  1182  018F                     	;# 
  1183  0190                     	;# 
  1184  0191                     	;# 
  1185  0192                     	;# 
  1186  0196                     	;# 
  1187  0197                     	;# 
  1188  0198                     	;# 
  1189  0199                     	;# 
  1190  019A                     	;# 
  1191  019B                     	;# 
  1192  019C                     	;# 
  1193  020C                     	;# 
  1194  020D                     	;# 
  1195  020E                     	;# 
  1196  020F                     	;# 
  1197  020F                     	;# 
  1198  0210                     	;# 
  1199  0210                     	;# 
  1200  0211                     	;# 
  1201  0211                     	;# 
  1202  0212                     	;# 
  1203  0213                     	;# 
  1204  0214                     	;# 
  1205  0215                     	;# 
  1206  0215                     	;# 
  1207  0216                     	;# 
  1208  0216                     	;# 
  1209  0217                     	;# 
  1210  0217                     	;# 
  1211  0218                     	;# 
  1212  0219                     	;# 
  1213  021A                     	;# 
  1214  021B                     	;# 
  1215  021B                     	;# 
  1216  021C                     	;# 
  1217  021C                     	;# 
  1218  021D                     	;# 
  1219  021D                     	;# 
  1220  021E                     	;# 
  1221  021F                     	;# 
  1222  028C                     	;# 
  1223  028C                     	;# 
  1224  028D                     	;# 
  1225  028D                     	;# 
  1226  028E                     	;# 
  1227  028F                     	;# 
  1228  0290                     	;# 
  1229  0290                     	;# 
  1230  0291                     	;# 
  1231  0292                     	;# 
  1232  0292                     	;# 
  1233  0293                     	;# 
  1234  0293                     	;# 
  1235  0294                     	;# 
  1236  0295                     	;# 
  1237  0296                     	;# 
  1238  0296                     	;# 
  1239  0297                     	;# 
  1240  0298                     	;# 
  1241  0298                     	;# 
  1242  0299                     	;# 
  1243  0299                     	;# 
  1244  029A                     	;# 
  1245  029B                     	;# 
  1246  029C                     	;# 
  1247  029C                     	;# 
  1248  029D                     	;# 
  1249  030C                     	;# 
  1250  030C                     	;# 
  1251  030D                     	;# 
  1252  030E                     	;# 
  1253  030F                     	;# 
  1254  0310                     	;# 
  1255  0310                     	;# 
  1256  0311                     	;# 
  1257  0312                     	;# 
  1258  0313                     	;# 
  1259  0314                     	;# 
  1260  0314                     	;# 
  1261  0315                     	;# 
  1262  0316                     	;# 
  1263  0317                     	;# 
  1264  0318                     	;# 
  1265  0318                     	;# 
  1266  0319                     	;# 
  1267  031A                     	;# 
  1268  031B                     	;# 
  1269  031C                     	;# 
  1270  031C                     	;# 
  1271  031D                     	;# 
  1272  031E                     	;# 
  1273  031F                     	;# 
  1274  038C                     	;# 
  1275  038D                     	;# 
  1276  038E                     	;# 
  1277  0390                     	;# 
  1278  0391                     	;# 
  1279  0392                     	;# 
  1280  040C                     	;# 
  1281  040D                     	;# 
  1282  040E                     	;# 
  1283  040F                     	;# 
  1284  0410                     	;# 
  1285  0411                     	;# 
  1286  0416                     	;# 
  1287  0416                     	;# 
  1288  0417                     	;# 
  1289  0418                     	;# 
  1290  0418                     	;# 
  1291  0419                     	;# 
  1292  041A                     	;# 
  1293  041A                     	;# 
  1294  041B                     	;# 
  1295  041C                     	;# 
  1296  041C                     	;# 
  1297  041D                     	;# 
  1298  041E                     	;# 
  1299  041F                     	;# 
  1300  048C                     	;# 
  1301  048C                     	;# 
  1302  048D                     	;# 
  1303  048E                     	;# 
  1304  048F                     	;# 
  1305  048F                     	;# 
  1306  0490                     	;# 
  1307  0491                     	;# 
  1308  0492                     	;# 
  1309  0492                     	;# 
  1310  0493                     	;# 
  1311  0494                     	;# 
  1312  0495                     	;# 
  1313  0495                     	;# 
  1314  0496                     	;# 
  1315  0497                     	;# 
  1316  0498                     	;# 
  1317  0499                     	;# 
  1318  049A                     	;# 
  1319  049B                     	;# 
  1320  049C                     	;# 
  1321  049D                     	;# 
  1322  050C                     	;# 
  1323  050C                     	;# 
  1324  050D                     	;# 
  1325  050E                     	;# 
  1326  050F                     	;# 
  1327  050F                     	;# 
  1328  0510                     	;# 
  1329  0511                     	;# 
  1330  0512                     	;# 
  1331  0512                     	;# 
  1332  0513                     	;# 
  1333  0514                     	;# 
  1334  0515                     	;# 
  1335  0515                     	;# 
  1336  0516                     	;# 
  1337  0517                     	;# 
  1338  0518                     	;# 
  1339  0519                     	;# 
  1340  051A                     	;# 
  1341  051B                     	;# 
  1342  051C                     	;# 
  1343  051D                     	;# 
  1344  058C                     	;# 
  1345  058C                     	;# 
  1346  058D                     	;# 
  1347  058E                     	;# 
  1348  058F                     	;# 
  1349  058F                     	;# 
  1350  0590                     	;# 
  1351  0591                     	;# 
  1352  0592                     	;# 
  1353  0593                     	;# 
  1354  060C                     	;# 
  1355  060D                     	;# 
  1356  060E                     	;# 
  1357  060F                     	;# 
  1358  0610                     	;# 
  1359  0611                     	;# 
  1360  0612                     	;# 
  1361  0613                     	;# 
  1362  0614                     	;# 
  1363  0616                     	;# 
  1364  0617                     	;# 
  1365  0618                     	;# 
  1366  0619                     	;# 
  1367  061A                     	;# 
  1368  061B                     	;# 
  1369  061C                     	;# 
  1370  061D                     	;# 
  1371  061E                     	;# 
  1372  068C                     	;# 
  1373  068D                     	;# 
  1374  068E                     	;# 
  1375  068F                     	;# 
  1376  0690                     	;# 
  1377  0691                     	;# 
  1378  0692                     	;# 
  1379  0693                     	;# 
  1380  0694                     	;# 
  1381  070C                     	;# 
  1382  070D                     	;# 
  1383  070E                     	;# 
  1384  070F                     	;# 
  1385  0710                     	;# 
  1386  0711                     	;# 
  1387  0712                     	;# 
  1388  0713                     	;# 
  1389  0714                     	;# 
  1390  0716                     	;# 
  1391  0717                     	;# 
  1392  0718                     	;# 
  1393  0719                     	;# 
  1394  071A                     	;# 
  1395  071B                     	;# 
  1396  071C                     	;# 
  1397  071D                     	;# 
  1398  071E                     	;# 
  1399  0796                     	;# 
  1400  0797                     	;# 
  1401  0798                     	;# 
  1402  0799                     	;# 
  1403  079A                     	;# 
  1404  079B                     	;# 
  1405  080C                     	;# 
  1406  080D                     	;# 
  1407  080E                     	;# 
  1408  080F                     	;# 
  1409  0810                     	;# 
  1410  0811                     	;# 
  1411  0812                     	;# 
  1412  0813                     	;# 
  1413  0814                     	;# 
  1414  081A                     	;# 
  1415  081B                     	;# 
  1416  081C                     	;# 
  1417  081D                     	;# 
  1418  081E                     	;# 
  1419  081F                     	;# 
  1420  088C                     	;# 
  1421  088D                     	;# 
  1422  088E                     	;# 
  1423  088F                     	;# 
  1424  0890                     	;# 
  1425  0891                     	;# 
  1426  0892                     	;# 
  1427  0893                     	;# 
  1428  0895                     	;# 
  1429  0896                     	;# 
  1430  0897                     	;# 
  1431  0898                     	;# 
  1432  0899                     	;# 
  1433  089A                     	;# 
  1434  089B                     	;# 
  1435  090C                     	;# 
  1436  090E                     	;# 
  1437  090F                     	;# 
  1438  091F                     	;# 
  1439  091F                     	;# 
  1440  098F                     	;# 
  1441  098F                     	;# 
  1442  0990                     	;# 
  1443  0991                     	;# 
  1444  0992                     	;# 
  1445  0993                     	;# 
  1446  0994                     	;# 
  1447  0995                     	;# 
  1448  0996                     	;# 
  1449  0997                     	;# 
  1450  0E0F                     	;# 
  1451  0E10                     	;# 
  1452  0E11                     	;# 
  1453  0E12                     	;# 
  1454  0E13                     	;# 
  1455  0E14                     	;# 
  1456  0E15                     	;# 
  1457  0E16                     	;# 
  1458  0E17                     	;# 
  1459  0E18                     	;# 
  1460  0E19                     	;# 
  1461  0E1A                     	;# 
  1462  0E1B                     	;# 
  1463  0E1C                     	;# 
  1464  0E1D                     	;# 
  1465  0E1E                     	;# 
  1466  0E1F                     	;# 
  1467  0E20                     	;# 
  1468  0E21                     	;# 
  1469  0E22                     	;# 
  1470  0E23                     	;# 
  1471  0E24                     	;# 
  1472  0E25                     	;# 
  1473  0E26                     	;# 
  1474  0E27                     	;# 
  1475  0E28                     	;# 
  1476  0E29                     	;# 
  1477  0E2A                     	;# 
  1478  0E2B                     	;# 
  1479  0E2C                     	;# 
  1480  0E2D                     	;# 
  1481  0E2E                     	;# 
  1482  0E2F                     	;# 
  1483  0E30                     	;# 
  1484  0E31                     	;# 
  1485  0E32                     	;# 
  1486  0E33                     	;# 
  1487  0E34                     	;# 
  1488  0E35                     	;# 
  1489  0E36                     	;# 
  1490  0E37                     	;# 
  1491  0E8F                     	;# 
  1492  0E90                     	;# 
  1493  0E91                     	;# 
  1494  0E92                     	;# 
  1495  0E93                     	;# 
  1496  0E94                     	;# 
  1497  0E95                     	;# 
  1498  0E96                     	;# 
  1499  0E97                     	;# 
  1500  0E9C                     	;# 
  1501  0E9D                     	;# 
  1502  0E9E                     	;# 
  1503  0EA1                     	;# 
  1504  0EA2                     	;# 
  1505  0EA3                     	;# 
  1506  0EA4                     	;# 
  1507  0EA5                     	;# 
  1508  0EA9                     	;# 
  1509  0EAA                     	;# 
  1510  0EAB                     	;# 
  1511  0EAC                     	;# 
  1512  0EB1                     	;# 
  1513  0EB2                     	;# 
  1514  0EB3                     	;# 
  1515  0EB8                     	;# 
  1516  0EB9                     	;# 
  1517  0EBA                     	;# 
  1518  0EBB                     	;# 
  1519  0EBC                     	;# 
  1520  0EBD                     	;# 
  1521  0EBE                     	;# 
  1522  0EC3                     	;# 
  1523  0EC5                     	;# 
  1524  0EC6                     	;# 
  1525  0EC7                     	;# 
  1526  0EC8                     	;# 
  1527  0EC9                     	;# 
  1528  0ECA                     	;# 
  1529  0ECB                     	;# 
  1530  0ECC                     	;# 
  1531  0F10                     	;# 
  1532  0F11                     	;# 
  1533  0F12                     	;# 
  1534  0F13                     	;# 
  1535  0F14                     	;# 
  1536  0F15                     	;# 
  1537  0F16                     	;# 
  1538  0F17                     	;# 
  1539  0F18                     	;# 
  1540  0F19                     	;# 
  1541  0F1A                     	;# 
  1542  0F1B                     	;# 
  1543  0F1C                     	;# 
  1544  0F1D                     	;# 
  1545  0F1E                     	;# 
  1546  0F1F                     	;# 
  1547  0F20                     	;# 
  1548  0F21                     	;# 
  1549  0F22                     	;# 
  1550  0F23                     	;# 
  1551  0F24                     	;# 
  1552  0F25                     	;# 
  1553  0F26                     	;# 
  1554  0F27                     	;# 
  1555  0F38                     	;# 
  1556  0F39                     	;# 
  1557  0F3A                     	;# 
  1558  0F3B                     	;# 
  1559  0F3C                     	;# 
  1560  0F3D                     	;# 
  1561  0F3E                     	;# 
  1562  0F3F                     	;# 
  1563  0F40                     	;# 
  1564  0F41                     	;# 
  1565  0F43                     	;# 
  1566  0F44                     	;# 
  1567  0F45                     	;# 
  1568  0F46                     	;# 
  1569  0F47                     	;# 
  1570  0F48                     	;# 
  1571  0F49                     	;# 
  1572  0F4A                     	;# 
  1573  0F4B                     	;# 
  1574  0F4C                     	;# 
  1575  0F4E                     	;# 
  1576  0F4F                     	;# 
  1577  0F50                     	;# 
  1578  0F51                     	;# 
  1579  0F52                     	;# 
  1580  0F53                     	;# 
  1581  0F54                     	;# 
  1582  0F55                     	;# 
  1583  0F56                     	;# 
  1584  0F57                     	;# 
  1585  0F65                     	;# 
  1586  0F68                     	;# 
  1587  0F69                     	;# 
  1588  0F6A                     	;# 
  1589  0F6B                     	;# 
  1590  0FE4                     	;# 
  1591  0FE5                     	;# 
  1592  0FE6                     	;# 
  1593  0FE7                     	;# 
  1594  0FE8                     	;# 
  1595  0FE9                     	;# 
  1596  0FEA                     	;# 
  1597  0FEB                     	;# 
  1598  0FED                     	;# 
  1599  0FEE                     	;# 
  1600  0FEF                     	;# 
  1601  0000                     	;# 
  1602  0001                     	;# 
  1603  0002                     	;# 
  1604  0003                     	;# 
  1605  0004                     	;# 
  1606  0005                     	;# 
  1607  0006                     	;# 
  1608  0007                     	;# 
  1609  0008                     	;# 
  1610  0009                     	;# 
  1611  000A                     	;# 
  1612  000B                     	;# 
  1613  000C                     	;# 
  1614  000D                     	;# 
  1615  000E                     	;# 
  1616  0010                     	;# 
  1617  0011                     	;# 
  1618  0012                     	;# 
  1619  0013                     	;# 
  1620  0016                     	;# 
  1621  0017                     	;# 
  1622  0018                     	;# 
  1623  001C                     	;# 
  1624  001C                     	;# 
  1625  001D                     	;# 
  1626  001D                     	;# 
  1627  001E                     	;# 
  1628  001F                     	;# 
  1629  008C                     	;# 
  1630  008C                     	;# 
  1631  008D                     	;# 
  1632  008E                     	;# 
  1633  008E                     	;# 
  1634  008F                     	;# 
  1635  0090                     	;# 
  1636  0090                     	;# 
  1637  0091                     	;# 
  1638  0093                     	;# 
  1639  0094                     	;# 
  1640  0095                     	;# 
  1641  0096                     	;# 
  1642  0097                     	;# 
  1643  0098                     	;# 
  1644  0099                     	;# 
  1645  009A                     	;# 
  1646  009B                     	;# 
  1647  009C                     	;# 
  1648  009D                     	;# 
  1649  009E                     	;# 
  1650  010C                     	;# 
  1651  010D                     	;# 
  1652  010E                     	;# 
  1653  010E                     	;# 
  1654  010F                     	;# 
  1655  0110                     	;# 
  1656  0110                     	;# 
  1657  0111                     	;# 
  1658  0112                     	;# 
  1659  0112                     	;# 
  1660  0113                     	;# 
  1661  0114                     	;# 
  1662  0114                     	;# 
  1663  0115                     	;# 
  1664  0116                     	;# 
  1665  0116                     	;# 
  1666  0117                     	;# 
  1667  0119                     	;# 
  1668  0119                     	;# 
  1669  0119                     	;# 
  1670  011A                     	;# 
  1671  011A                     	;# 
  1672  011A                     	;# 
  1673  011B                     	;# 
  1674  011B                     	;# 
  1675  011B                     	;# 
  1676  011B                     	;# 
  1677  011B                     	;# 
  1678  011C                     	;# 
  1679  011C                     	;# 
  1680  011C                     	;# 
  1681  011D                     	;# 
  1682  011D                     	;# 
  1683  011D                     	;# 
  1684  011E                     	;# 
  1685  011E                     	;# 
  1686  011E                     	;# 
  1687  011F                     	;# 
  1688  011F                     	;# 
  1689  011F                     	;# 
  1690  011F                     	;# 
  1691  011F                     	;# 
  1692  018C                     	;# 
  1693  018D                     	;# 
  1694  018E                     	;# 
  1695  018F                     	;# 
  1696  0190                     	;# 
  1697  0191                     	;# 
  1698  0192                     	;# 
  1699  0196                     	;# 
  1700  0197                     	;# 
  1701  0198                     	;# 
  1702  0199                     	;# 
  1703  019A                     	;# 
  1704  019B                     	;# 
  1705  019C                     	;# 
  1706  020C                     	;# 
  1707  020D                     	;# 
  1708  020E                     	;# 
  1709  020F                     	;# 
  1710  020F                     	;# 
  1711  0210                     	;# 
  1712  0210                     	;# 
  1713  0211                     	;# 
  1714  0211                     	;# 
  1715  0212                     	;# 
  1716  0213                     	;# 
  1717  0214                     	;# 
  1718  0215                     	;# 
  1719  0215                     	;# 
  1720  0216                     	;# 
  1721  0216                     	;# 
  1722  0217                     	;# 
  1723  0217                     	;# 
  1724  0218                     	;# 
  1725  0219                     	;# 
  1726  021A                     	;# 
  1727  021B                     	;# 
  1728  021B                     	;# 
  1729  021C                     	;# 
  1730  021C                     	;# 
  1731  021D                     	;# 
  1732  021D                     	;# 
  1733  021E                     	;# 
  1734  021F                     	;# 
  1735  028C                     	;# 
  1736  028C                     	;# 
  1737  028D                     	;# 
  1738  028D                     	;# 
  1739  028E                     	;# 
  1740  028F                     	;# 
  1741  0290                     	;# 
  1742  0290                     	;# 
  1743  0291                     	;# 
  1744  0292                     	;# 
  1745  0292                     	;# 
  1746  0293                     	;# 
  1747  0293                     	;# 
  1748  0294                     	;# 
  1749  0295                     	;# 
  1750  0296                     	;# 
  1751  0296                     	;# 
  1752  0297                     	;# 
  1753  0298                     	;# 
  1754  0298                     	;# 
  1755  0299                     	;# 
  1756  0299                     	;# 
  1757  029A                     	;# 
  1758  029B                     	;# 
  1759  029C                     	;# 
  1760  029C                     	;# 
  1761  029D                     	;# 
  1762  030C                     	;# 
  1763  030C                     	;# 
  1764  030D                     	;# 
  1765  030E                     	;# 
  1766  030F                     	;# 
  1767  0310                     	;# 
  1768  0310                     	;# 
  1769  0311                     	;# 
  1770  0312                     	;# 
  1771  0313                     	;# 
  1772  0314                     	;# 
  1773  0314                     	;# 
  1774  0315                     	;# 
  1775  0316                     	;# 
  1776  0317                     	;# 
  1777  0318                     	;# 
  1778  0318                     	;# 
  1779  0319                     	;# 
  1780  031A                     	;# 
  1781  031B                     	;# 
  1782  031C                     	;# 
  1783  031C                     	;# 
  1784  031D                     	;# 
  1785  031E                     	;# 
  1786  031F                     	;# 
  1787  038C                     	;# 
  1788  038D                     	;# 
  1789  038E                     	;# 
  1790  0390                     	;# 
  1791  0391                     	;# 
  1792  0392                     	;# 
  1793  040C                     	;# 
  1794  040D                     	;# 
  1795  040E                     	;# 
  1796  040F                     	;# 
  1797  0410                     	;# 
  1798  0411                     	;# 
  1799  0416                     	;# 
  1800  0416                     	;# 
  1801  0417                     	;# 
  1802  0418                     	;# 
  1803  0418                     	;# 
  1804  0419                     	;# 
  1805  041A                     	;# 
  1806  041A                     	;# 
  1807  041B                     	;# 
  1808  041C                     	;# 
  1809  041C                     	;# 
  1810  041D                     	;# 
  1811  041E                     	;# 
  1812  041F                     	;# 
  1813  048C                     	;# 
  1814  048C                     	;# 
  1815  048D                     	;# 
  1816  048E                     	;# 
  1817  048F                     	;# 
  1818  048F                     	;# 
  1819  0490                     	;# 
  1820  0491                     	;# 
  1821  0492                     	;# 
  1822  0492                     	;# 
  1823  0493                     	;# 
  1824  0494                     	;# 
  1825  0495                     	;# 
  1826  0495                     	;# 
  1827  0496                     	;# 
  1828  0497                     	;# 
  1829  0498                     	;# 
  1830  0499                     	;# 
  1831  049A                     	;# 
  1832  049B                     	;# 
  1833  049C                     	;# 
  1834  049D                     	;# 
  1835  050C                     	;# 
  1836  050C                     	;# 
  1837  050D                     	;# 
  1838  050E                     	;# 
  1839  050F                     	;# 
  1840  050F                     	;# 
  1841  0510                     	;# 
  1842  0511                     	;# 
  1843  0512                     	;# 
  1844  0512                     	;# 
  1845  0513                     	;# 
  1846  0514                     	;# 
  1847  0515                     	;# 
  1848  0515                     	;# 
  1849  0516                     	;# 
  1850  0517                     	;# 
  1851  0518                     	;# 
  1852  0519                     	;# 
  1853  051A                     	;# 
  1854  051B                     	;# 
  1855  051C                     	;# 
  1856  051D                     	;# 
  1857  058C                     	;# 
  1858  058C                     	;# 
  1859  058D                     	;# 
  1860  058E                     	;# 
  1861  058F                     	;# 
  1862  058F                     	;# 
  1863  0590                     	;# 
  1864  0591                     	;# 
  1865  0592                     	;# 
  1866  0593                     	;# 
  1867  060C                     	;# 
  1868  060D                     	;# 
  1869  060E                     	;# 
  1870  060F                     	;# 
  1871  0610                     	;# 
  1872  0611                     	;# 
  1873  0612                     	;# 
  1874  0613                     	;# 
  1875  0614                     	;# 
  1876  0616                     	;# 
  1877  0617                     	;# 
  1878  0618                     	;# 
  1879  0619                     	;# 
  1880  061A                     	;# 
  1881  061B                     	;# 
  1882  061C                     	;# 
  1883  061D                     	;# 
  1884  061E                     	;# 
  1885  068C                     	;# 
  1886  068D                     	;# 
  1887  068E                     	;# 
  1888  068F                     	;# 
  1889  0690                     	;# 
  1890  0691                     	;# 
  1891  0692                     	;# 
  1892  0693                     	;# 
  1893  0694                     	;# 
  1894  070C                     	;# 
  1895  070D                     	;# 
  1896  070E                     	;# 
  1897  070F                     	;# 
  1898  0710                     	;# 
  1899  0711                     	;# 
  1900  0712                     	;# 
  1901  0713                     	;# 
  1902  0714                     	;# 
  1903  0716                     	;# 
  1904  0717                     	;# 
  1905  0718                     	;# 
  1906  0719                     	;# 
  1907  071A                     	;# 
  1908  071B                     	;# 
  1909  071C                     	;# 
  1910  071D                     	;# 
  1911  071E                     	;# 
  1912  0796                     	;# 
  1913  0797                     	;# 
  1914  0798                     	;# 
  1915  0799                     	;# 
  1916  079A                     	;# 
  1917  079B                     	;# 
  1918  080C                     	;# 
  1919  080D                     	;# 
  1920  080E                     	;# 
  1921  080F                     	;# 
  1922  0810                     	;# 
  1923  0811                     	;# 
  1924  0812                     	;# 
  1925  0813                     	;# 
  1926  0814                     	;# 
  1927  081A                     	;# 
  1928  081B                     	;# 
  1929  081C                     	;# 
  1930  081D                     	;# 
  1931  081E                     	;# 
  1932  081F                     	;# 
  1933  088C                     	;# 
  1934  088D                     	;# 
  1935  088E                     	;# 
  1936  088F                     	;# 
  1937  0890                     	;# 
  1938  0891                     	;# 
  1939  0892                     	;# 
  1940  0893                     	;# 
  1941  0895                     	;# 
  1942  0896                     	;# 
  1943  0897                     	;# 
  1944  0898                     	;# 
  1945  0899                     	;# 
  1946  089A                     	;# 
  1947  089B                     	;# 
  1948  090C                     	;# 
  1949  090E                     	;# 
  1950  090F                     	;# 
  1951  091F                     	;# 
  1952  091F                     	;# 
  1953  098F                     	;# 
  1954  098F                     	;# 
  1955  0990                     	;# 
  1956  0991                     	;# 
  1957  0992                     	;# 
  1958  0993                     	;# 
  1959  0994                     	;# 
  1960  0995                     	;# 
  1961  0996                     	;# 
  1962  0997                     	;# 
  1963  0E0F                     	;# 
  1964  0E10                     	;# 
  1965  0E11                     	;# 
  1966  0E12                     	;# 
  1967  0E13                     	;# 
  1968  0E14                     	;# 
  1969  0E15                     	;# 
  1970  0E16                     	;# 
  1971  0E17                     	;# 
  1972  0E18                     	;# 
  1973  0E19                     	;# 
  1974  0E1A                     	;# 
  1975  0E1B                     	;# 
  1976  0E1C                     	;# 
  1977  0E1D                     	;# 
  1978  0E1E                     	;# 
  1979  0E1F                     	;# 
  1980  0E20                     	;# 
  1981  0E21                     	;# 
  1982  0E22                     	;# 
  1983  0E23                     	;# 
  1984  0E24                     	;# 
  1985  0E25                     	;# 
  1986  0E26                     	;# 
  1987  0E27                     	;# 
  1988  0E28                     	;# 
  1989  0E29                     	;# 
  1990  0E2A                     	;# 
  1991  0E2B                     	;# 
  1992  0E2C                     	;# 
  1993  0E2D                     	;# 
  1994  0E2E                     	;# 
  1995  0E2F                     	;# 
  1996  0E30                     	;# 
  1997  0E31                     	;# 
  1998  0E32                     	;# 
  1999  0E33                     	;# 
  2000  0E34                     	;# 
  2001  0E35                     	;# 
  2002  0E36                     	;# 
  2003  0E37                     	;# 
  2004  0E8F                     	;# 
  2005  0E90                     	;# 
  2006  0E91                     	;# 
  2007  0E92                     	;# 
  2008  0E93                     	;# 
  2009  0E94                     	;# 
  2010  0E95                     	;# 
  2011  0E96                     	;# 
  2012  0E97                     	;# 
  2013  0E9C                     	;# 
  2014  0E9D                     	;# 
  2015  0E9E                     	;# 
  2016  0EA1                     	;# 
  2017  0EA2                     	;# 
  2018  0EA3                     	;# 
  2019  0EA4                     	;# 
  2020  0EA5                     	;# 
  2021  0EA9                     	;# 
  2022  0EAA                     	;# 
  2023  0EAB                     	;# 
  2024  0EAC                     	;# 
  2025  0EB1                     	;# 
  2026  0EB2                     	;# 
  2027  0EB3                     	;# 
  2028  0EB8                     	;# 
  2029  0EB9                     	;# 
  2030  0EBA                     	;# 
  2031  0EBB                     	;# 
  2032  0EBC                     	;# 
  2033  0EBD                     	;# 
  2034  0EBE                     	;# 
  2035  0EC3                     	;# 
  2036  0EC5                     	;# 
  2037  0EC6                     	;# 
  2038  0EC7                     	;# 
  2039  0EC8                     	;# 
  2040  0EC9                     	;# 
  2041  0ECA                     	;# 
  2042  0ECB                     	;# 
  2043  0ECC                     	;# 
  2044  0F10                     	;# 
  2045  0F11                     	;# 
  2046  0F12                     	;# 
  2047  0F13                     	;# 
  2048  0F14                     	;# 
  2049  0F15                     	;# 
  2050  0F16                     	;# 
  2051  0F17                     	;# 
  2052  0F18                     	;# 
  2053  0F19                     	;# 
  2054  0F1A                     	;# 
  2055  0F1B                     	;# 
  2056  0F1C                     	;# 
  2057  0F1D                     	;# 
  2058  0F1E                     	;# 
  2059  0F1F                     	;# 
  2060  0F20                     	;# 
  2061  0F21                     	;# 
  2062  0F22                     	;# 
  2063  0F23                     	;# 
  2064  0F24                     	;# 
  2065  0F25                     	;# 
  2066  0F26                     	;# 
  2067  0F27                     	;# 
  2068  0F38                     	;# 
  2069  0F39                     	;# 
  2070  0F3A                     	;# 
  2071  0F3B                     	;# 
  2072  0F3C                     	;# 
  2073  0F3D                     	;# 
  2074  0F3E                     	;# 
  2075  0F3F                     	;# 
  2076  0F40                     	;# 
  2077  0F41                     	;# 
  2078  0F43                     	;# 
  2079  0F44                     	;# 
  2080  0F45                     	;# 
  2081  0F46                     	;# 
  2082  0F47                     	;# 
  2083  0F48                     	;# 
  2084  0F49                     	;# 
  2085  0F4A                     	;# 
  2086  0F4B                     	;# 
  2087  0F4C                     	;# 
  2088  0F4E                     	;# 
  2089  0F4F                     	;# 
  2090  0F50                     	;# 
  2091  0F51                     	;# 
  2092  0F52                     	;# 
  2093  0F53                     	;# 
  2094  0F54                     	;# 
  2095  0F55                     	;# 
  2096  0F56                     	;# 
  2097  0F57                     	;# 
  2098  0F65                     	;# 
  2099  0F68                     	;# 
  2100  0F69                     	;# 
  2101  0F6A                     	;# 
  2102  0F6B                     	;# 
  2103  0FE4                     	;# 
  2104  0FE5                     	;# 
  2105  0FE6                     	;# 
  2106  0FE7                     	;# 
  2107  0FE8                     	;# 
  2108  0FE9                     	;# 
  2109  0FEA                     	;# 
  2110  0FEB                     	;# 
  2111  0FED                     	;# 
  2112  0FEE                     	;# 
  2113  0FEF                     	;# 
  2114  0000                     	;# 
  2115  0001                     	;# 
  2116  0002                     	;# 
  2117  0003                     	;# 
  2118  0004                     	;# 
  2119  0005                     	;# 
  2120  0006                     	;# 
  2121  0007                     	;# 
  2122  0008                     	;# 
  2123  0009                     	;# 
  2124  000A                     	;# 
  2125  000B                     	;# 
  2126  000C                     	;# 
  2127  000D                     	;# 
  2128  000E                     	;# 
  2129  0010                     	;# 
  2130  0011                     	;# 
  2131  0012                     	;# 
  2132  0013                     	;# 
  2133  0016                     	;# 
  2134  0017                     	;# 
  2135  0018                     	;# 
  2136  001C                     	;# 
  2137  001C                     	;# 
  2138  001D                     	;# 
  2139  001D                     	;# 
  2140  001E                     	;# 
  2141  001F                     	;# 
  2142  008C                     	;# 
  2143  008C                     	;# 
  2144  008D                     	;# 
  2145  008E                     	;# 
  2146  008E                     	;# 
  2147  008F                     	;# 
  2148  0090                     	;# 
  2149  0090                     	;# 
  2150  0091                     	;# 
  2151  0093                     	;# 
  2152  0094                     	;# 
  2153  0095                     	;# 
  2154  0096                     	;# 
  2155  0097                     	;# 
  2156  0098                     	;# 
  2157  0099                     	;# 
  2158  009A                     	;# 
  2159  009B                     	;# 
  2160  009C                     	;# 
  2161  009D                     	;# 
  2162  009E                     	;# 
  2163  010C                     	;# 
  2164  010D                     	;# 
  2165  010E                     	;# 
  2166  010E                     	;# 
  2167  010F                     	;# 
  2168  0110                     	;# 
  2169  0110                     	;# 
  2170  0111                     	;# 
  2171  0112                     	;# 
  2172  0112                     	;# 
  2173  0113                     	;# 
  2174  0114                     	;# 
  2175  0114                     	;# 
  2176  0115                     	;# 
  2177  0116                     	;# 
  2178  0116                     	;# 
  2179  0117                     	;# 
  2180  0119                     	;# 
  2181  0119                     	;# 
  2182  0119                     	;# 
  2183  011A                     	;# 
  2184  011A                     	;# 
  2185  011A                     	;# 
  2186  011B                     	;# 
  2187  011B                     	;# 
  2188  011B                     	;# 
  2189  011B                     	;# 
  2190  011B                     	;# 
  2191  011C                     	;# 
  2192  011C                     	;# 
  2193  011C                     	;# 
  2194  011D                     	;# 
  2195  011D                     	;# 
  2196  011D                     	;# 
  2197  011E                     	;# 
  2198  011E                     	;# 
  2199  011E                     	;# 
  2200  011F                     	;# 
  2201  011F                     	;# 
  2202  011F                     	;# 
  2203  011F                     	;# 
  2204  011F                     	;# 
  2205  018C                     	;# 
  2206  018D                     	;# 
  2207  018E                     	;# 
  2208  018F                     	;# 
  2209  0190                     	;# 
  2210  0191                     	;# 
  2211  0192                     	;# 
  2212  0196                     	;# 
  2213  0197                     	;# 
  2214  0198                     	;# 
  2215  0199                     	;# 
  2216  019A                     	;# 
  2217  019B                     	;# 
  2218  019C                     	;# 
  2219  020C                     	;# 
  2220  020D                     	;# 
  2221  020E                     	;# 
  2222  020F                     	;# 
  2223  020F                     	;# 
  2224  0210                     	;# 
  2225  0210                     	;# 
  2226  0211                     	;# 
  2227  0211                     	;# 
  2228  0212                     	;# 
  2229  0213                     	;# 
  2230  0214                     	;# 
  2231  0215                     	;# 
  2232  0215                     	;# 
  2233  0216                     	;# 
  2234  0216                     	;# 
  2235  0217                     	;# 
  2236  0217                     	;# 
  2237  0218                     	;# 
  2238  0219                     	;# 
  2239  021A                     	;# 
  2240  021B                     	;# 
  2241  021B                     	;# 
  2242  021C                     	;# 
  2243  021C                     	;# 
  2244  021D                     	;# 
  2245  021D                     	;# 
  2246  021E                     	;# 
  2247  021F                     	;# 
  2248  028C                     	;# 
  2249  028C                     	;# 
  2250  028D                     	;# 
  2251  028D                     	;# 
  2252  028E                     	;# 
  2253  028F                     	;# 
  2254  0290                     	;# 
  2255  0290                     	;# 
  2256  0291                     	;# 
  2257  0292                     	;# 
  2258  0292                     	;# 
  2259  0293                     	;# 
  2260  0293                     	;# 
  2261  0294                     	;# 
  2262  0295                     	;# 
  2263  0296                     	;# 
  2264  0296                     	;# 
  2265  0297                     	;# 
  2266  0298                     	;# 
  2267  0298                     	;# 
  2268  0299                     	;# 
  2269  0299                     	;# 
  2270  029A                     	;# 
  2271  029B                     	;# 
  2272  029C                     	;# 
  2273  029C                     	;# 
  2274  029D                     	;# 
  2275  030C                     	;# 
  2276  030C                     	;# 
  2277  030D                     	;# 
  2278  030E                     	;# 
  2279  030F                     	;# 
  2280  0310                     	;# 
  2281  0310                     	;# 
  2282  0311                     	;# 
  2283  0312                     	;# 
  2284  0313                     	;# 
  2285  0314                     	;# 
  2286  0314                     	;# 
  2287  0315                     	;# 
  2288  0316                     	;# 
  2289  0317                     	;# 
  2290  0318                     	;# 
  2291  0318                     	;# 
  2292  0319                     	;# 
  2293  031A                     	;# 
  2294  031B                     	;# 
  2295  031C                     	;# 
  2296  031C                     	;# 
  2297  031D                     	;# 
  2298  031E                     	;# 
  2299  031F                     	;# 
  2300  038C                     	;# 
  2301  038D                     	;# 
  2302  038E                     	;# 
  2303  0390                     	;# 
  2304  0391                     	;# 
  2305  0392                     	;# 
  2306  040C                     	;# 
  2307  040D                     	;# 
  2308  040E                     	;# 
  2309  040F                     	;# 
  2310  0410                     	;# 
  2311  0411                     	;# 
  2312  0416                     	;# 
  2313  0416                     	;# 
  2314  0417                     	;# 
  2315  0418                     	;# 
  2316  0418                     	;# 
  2317  0419                     	;# 
  2318  041A                     	;# 
  2319  041A                     	;# 
  2320  041B                     	;# 
  2321  041C                     	;# 
  2322  041C                     	;# 
  2323  041D                     	;# 
  2324  041E                     	;# 
  2325  041F                     	;# 
  2326  048C                     	;# 
  2327  048C                     	;# 
  2328  048D                     	;# 
  2329  048E                     	;# 
  2330  048F                     	;# 
  2331  048F                     	;# 
  2332  0490                     	;# 
  2333  0491                     	;# 
  2334  0492                     	;# 
  2335  0492                     	;# 
  2336  0493                     	;# 
  2337  0494                     	;# 
  2338  0495                     	;# 
  2339  0495                     	;# 
  2340  0496                     	;# 
  2341  0497                     	;# 
  2342  0498                     	;# 
  2343  0499                     	;# 
  2344  049A                     	;# 
  2345  049B                     	;# 
  2346  049C                     	;# 
  2347  049D                     	;# 
  2348  050C                     	;# 
  2349  050C                     	;# 
  2350  050D                     	;# 
  2351  050E                     	;# 
  2352  050F                     	;# 
  2353  050F                     	;# 
  2354  0510                     	;# 
  2355  0511                     	;# 
  2356  0512                     	;# 
  2357  0512                     	;# 
  2358  0513                     	;# 
  2359  0514                     	;# 
  2360  0515                     	;# 
  2361  0515                     	;# 
  2362  0516                     	;# 
  2363  0517                     	;# 
  2364  0518                     	;# 
  2365  0519                     	;# 
  2366  051A                     	;# 
  2367  051B                     	;# 
  2368  051C                     	;# 
  2369  051D                     	;# 
  2370  058C                     	;# 
  2371  058C                     	;# 
  2372  058D                     	;# 
  2373  058E                     	;# 
  2374  058F                     	;# 
  2375  058F                     	;# 
  2376  0590                     	;# 
  2377  0591                     	;# 
  2378  0592                     	;# 
  2379  0593                     	;# 
  2380  060C                     	;# 
  2381  060D                     	;# 
  2382  060E                     	;# 
  2383  060F                     	;# 
  2384  0610                     	;# 
  2385  0611                     	;# 
  2386  0612                     	;# 
  2387  0613                     	;# 
  2388  0614                     	;# 
  2389  0616                     	;# 
  2390  0617                     	;# 
  2391  0618                     	;# 
  2392  0619                     	;# 
  2393  061A                     	;# 
  2394  061B                     	;# 
  2395  061C                     	;# 
  2396  061D                     	;# 
  2397  061E                     	;# 
  2398  068C                     	;# 
  2399  068D                     	;# 
  2400  068E                     	;# 
  2401  068F                     	;# 
  2402  0690                     	;# 
  2403  0691                     	;# 
  2404  0692                     	;# 
  2405  0693                     	;# 
  2406  0694                     	;# 
  2407  070C                     	;# 
  2408  070D                     	;# 
  2409  070E                     	;# 
  2410  070F                     	;# 
  2411  0710                     	;# 
  2412  0711                     	;# 
  2413  0712                     	;# 
  2414  0713                     	;# 
  2415  0714                     	;# 
  2416  0716                     	;# 
  2417  0717                     	;# 
  2418  0718                     	;# 
  2419  0719                     	;# 
  2420  071A                     	;# 
  2421  071B                     	;# 
  2422  071C                     	;# 
  2423  071D                     	;# 
  2424  071E                     	;# 
  2425  0796                     	;# 
  2426  0797                     	;# 
  2427  0798                     	;# 
  2428  0799                     	;# 
  2429  079A                     	;# 
  2430  079B                     	;# 
  2431  080C                     	;# 
  2432  080D                     	;# 
  2433  080E                     	;# 
  2434  080F                     	;# 
  2435  0810                     	;# 
  2436  0811                     	;# 
  2437  0812                     	;# 
  2438  0813                     	;# 
  2439  0814                     	;# 
  2440  081A                     	;# 
  2441  081B                     	;# 
  2442  081C                     	;# 
  2443  081D                     	;# 
  2444  081E                     	;# 
  2445  081F                     	;# 
  2446  088C                     	;# 
  2447  088D                     	;# 
  2448  088E                     	;# 
  2449  088F                     	;# 
  2450  0890                     	;# 
  2451  0891                     	;# 
  2452  0892                     	;# 
  2453  0893                     	;# 
  2454  0895                     	;# 
  2455  0896                     	;# 
  2456  0897                     	;# 
  2457  0898                     	;# 
  2458  0899                     	;# 
  2459  089A                     	;# 
  2460  089B                     	;# 
  2461  090C                     	;# 
  2462  090E                     	;# 
  2463  090F                     	;# 
  2464  091F                     	;# 
  2465  091F                     	;# 
  2466  098F                     	;# 
  2467  098F                     	;# 
  2468  0990                     	;# 
  2469  0991                     	;# 
  2470  0992                     	;# 
  2471  0993                     	;# 
  2472  0994                     	;# 
  2473  0995                     	;# 
  2474  0996                     	;# 
  2475  0997                     	;# 
  2476  0E0F                     	;# 
  2477  0E10                     	;# 
  2478  0E11                     	;# 
  2479  0E12                     	;# 
  2480  0E13                     	;# 
  2481  0E14                     	;# 
  2482  0E15                     	;# 
  2483  0E16                     	;# 
  2484  0E17                     	;# 
  2485  0E18                     	;# 
  2486  0E19                     	;# 
  2487  0E1A                     	;# 
  2488  0E1B                     	;# 
  2489  0E1C                     	;# 
  2490  0E1D                     	;# 
  2491  0E1E                     	;# 
  2492  0E1F                     	;# 
  2493  0E20                     	;# 
  2494  0E21                     	;# 
  2495  0E22                     	;# 
  2496  0E23                     	;# 
  2497  0E24                     	;# 
  2498  0E25                     	;# 
  2499  0E26                     	;# 
  2500  0E27                     	;# 
  2501  0E28                     	;# 
  2502  0E29                     	;# 
  2503  0E2A                     	;# 
  2504  0E2B                     	;# 
  2505  0E2C                     	;# 
  2506  0E2D                     	;# 
  2507  0E2E                     	;# 
  2508  0E2F                     	;# 
  2509  0E30                     	;# 
  2510  0E31                     	;# 
  2511  0E32                     	;# 
  2512  0E33                     	;# 
  2513  0E34                     	;# 
  2514  0E35                     	;# 
  2515  0E36                     	;# 
  2516  0E37                     	;# 
  2517  0E8F                     	;# 
  2518  0E90                     	;# 
  2519  0E91                     	;# 
  2520  0E92                     	;# 
  2521  0E93                     	;# 
  2522  0E94                     	;# 
  2523  0E95                     	;# 
  2524  0E96                     	;# 
  2525  0E97                     	;# 
  2526  0E9C                     	;# 
  2527  0E9D                     	;# 
  2528  0E9E                     	;# 
  2529  0EA1                     	;# 
  2530  0EA2                     	;# 
  2531  0EA3                     	;# 
  2532  0EA4                     	;# 
  2533  0EA5                     	;# 
  2534  0EA9                     	;# 
  2535  0EAA                     	;# 
  2536  0EAB                     	;# 
  2537  0EAC                     	;# 
  2538  0EB1                     	;# 
  2539  0EB2                     	;# 
  2540  0EB3                     	;# 
  2541  0EB8                     	;# 
  2542  0EB9                     	;# 
  2543  0EBA                     	;# 
  2544  0EBB                     	;# 
  2545  0EBC                     	;# 
  2546  0EBD                     	;# 
  2547  0EBE                     	;# 
  2548  0EC3                     	;# 
  2549  0EC5                     	;# 
  2550  0EC6                     	;# 
  2551  0EC7                     	;# 
  2552  0EC8                     	;# 
  2553  0EC9                     	;# 
  2554  0ECA                     	;# 
  2555  0ECB                     	;# 
  2556  0ECC                     	;# 
  2557  0F10                     	;# 
  2558  0F11                     	;# 
  2559  0F12                     	;# 
  2560  0F13                     	;# 
  2561  0F14                     	;# 
  2562  0F15                     	;# 
  2563  0F16                     	;# 
  2564  0F17                     	;# 
  2565  0F18                     	;# 
  2566  0F19                     	;# 
  2567  0F1A                     	;# 
  2568  0F1B                     	;# 
  2569  0F1C                     	;# 
  2570  0F1D                     	;# 
  2571  0F1E                     	;# 
  2572  0F1F                     	;# 
  2573  0F20                     	;# 
  2574  0F21                     	;# 
  2575  0F22                     	;# 
  2576  0F23                     	;# 
  2577  0F24                     	;# 
  2578  0F25                     	;# 
  2579  0F26                     	;# 
  2580  0F27                     	;# 
  2581  0F38                     	;# 
  2582  0F39                     	;# 
  2583  0F3A                     	;# 
  2584  0F3B                     	;# 
  2585  0F3C                     	;# 
  2586  0F3D                     	;# 
  2587  0F3E                     	;# 
  2588  0F3F                     	;# 
  2589  0F40                     	;# 
  2590  0F41                     	;# 
  2591  0F43                     	;# 
  2592  0F44                     	;# 
  2593  0F45                     	;# 
  2594  0F46                     	;# 
  2595  0F47                     	;# 
  2596  0F48                     	;# 
  2597  0F49                     	;# 
  2598  0F4A                     	;# 
  2599  0F4B                     	;# 
  2600  0F4C                     	;# 
  2601  0F4E                     	;# 
  2602  0F4F                     	;# 
  2603  0F50                     	;# 
  2604  0F51                     	;# 
  2605  0F52                     	;# 
  2606  0F53                     	;# 
  2607  0F54                     	;# 
  2608  0F55                     	;# 
  2609  0F56                     	;# 
  2610  0F57                     	;# 
  2611  0F65                     	;# 
  2612  0F68                     	;# 
  2613  0F69                     	;# 
  2614  0F6A                     	;# 
  2615  0F6B                     	;# 
  2616  0FE4                     	;# 
  2617  0FE5                     	;# 
  2618  0FE6                     	;# 
  2619  0FE7                     	;# 
  2620  0FE8                     	;# 
  2621  0FE9                     	;# 
  2622  0FEA                     	;# 
  2623  0FEB                     	;# 
  2624  0FED                     	;# 
  2625  0FEE                     	;# 
  2626  0FEF                     	;# 
  2627  0000                     	;# 
  2628  0001                     	;# 
  2629  0002                     	;# 
  2630  0003                     	;# 
  2631  0004                     	;# 
  2632  0005                     	;# 
  2633  0006                     	;# 
  2634  0007                     	;# 
  2635  0008                     	;# 
  2636  0009                     	;# 
  2637  000A                     	;# 
  2638  000B                     	;# 
  2639  000C                     	;# 
  2640  000D                     	;# 
  2641  000E                     	;# 
  2642  0010                     	;# 
  2643  0011                     	;# 
  2644  0012                     	;# 
  2645  0013                     	;# 
  2646  0016                     	;# 
  2647  0017                     	;# 
  2648  0018                     	;# 
  2649  001C                     	;# 
  2650  001C                     	;# 
  2651  001D                     	;# 
  2652  001D                     	;# 
  2653  001E                     	;# 
  2654  001F                     	;# 
  2655  008C                     	;# 
  2656  008C                     	;# 
  2657  008D                     	;# 
  2658  008E                     	;# 
  2659  008E                     	;# 
  2660  008F                     	;# 
  2661  0090                     	;# 
  2662  0090                     	;# 
  2663  0091                     	;# 
  2664  0093                     	;# 
  2665  0094                     	;# 
  2666  0095                     	;# 
  2667  0096                     	;# 
  2668  0097                     	;# 
  2669  0098                     	;# 
  2670  0099                     	;# 
  2671  009A                     	;# 
  2672  009B                     	;# 
  2673  009C                     	;# 
  2674  009D                     	;# 
  2675  009E                     	;# 
  2676  010C                     	;# 
  2677  010D                     	;# 
  2678  010E                     	;# 
  2679  010E                     	;# 
  2680  010F                     	;# 
  2681  0110                     	;# 
  2682  0110                     	;# 
  2683  0111                     	;# 
  2684  0112                     	;# 
  2685  0112                     	;# 
  2686  0113                     	;# 
  2687  0114                     	;# 
  2688  0114                     	;# 
  2689  0115                     	;# 
  2690  0116                     	;# 
  2691  0116                     	;# 
  2692  0117                     	;# 
  2693  0119                     	;# 
  2694  0119                     	;# 
  2695  0119                     	;# 
  2696  011A                     	;# 
  2697  011A                     	;# 
  2698  011A                     	;# 
  2699  011B                     	;# 
  2700  011B                     	;# 
  2701  011B                     	;# 
  2702  011B                     	;# 
  2703  011B                     	;# 
  2704  011C                     	;# 
  2705  011C                     	;# 
  2706  011C                     	;# 
  2707  011D                     	;# 
  2708  011D                     	;# 
  2709  011D                     	;# 
  2710  011E                     	;# 
  2711  011E                     	;# 
  2712  011E                     	;# 
  2713  011F                     	;# 
  2714  011F                     	;# 
  2715  011F                     	;# 
  2716  011F                     	;# 
  2717  011F                     	;# 
  2718  018C                     	;# 
  2719  018D                     	;# 
  2720  018E                     	;# 
  2721  018F                     	;# 
  2722  0190                     	;# 
  2723  0191                     	;# 
  2724  0192                     	;# 
  2725  0196                     	;# 
  2726  0197                     	;# 
  2727  0198                     	;# 
  2728  0199                     	;# 
  2729  019A                     	;# 
  2730  019B                     	;# 
  2731  019C                     	;# 
  2732  020C                     	;# 
  2733  020D                     	;# 
  2734  020E                     	;# 
  2735  020F                     	;# 
  2736  020F                     	;# 
  2737  0210                     	;# 
  2738  0210                     	;# 
  2739  0211                     	;# 
  2740  0211                     	;# 
  2741  0212                     	;# 
  2742  0213                     	;# 
  2743  0214                     	;# 
  2744  0215                     	;# 
  2745  0215                     	;# 
  2746  0216                     	;# 
  2747  0216                     	;# 
  2748  0217                     	;# 
  2749  0217                     	;# 
  2750  0218                     	;# 
  2751  0219                     	;# 
  2752  021A                     	;# 
  2753  021B                     	;# 
  2754  021B                     	;# 
  2755  021C                     	;# 
  2756  021C                     	;# 
  2757  021D                     	;# 
  2758  021D                     	;# 
  2759  021E                     	;# 
  2760  021F                     	;# 
  2761  028C                     	;# 
  2762  028C                     	;# 
  2763  028D                     	;# 
  2764  028D                     	;# 
  2765  028E                     	;# 
  2766  028F                     	;# 
  2767  0290                     	;# 
  2768  0290                     	;# 
  2769  0291                     	;# 
  2770  0292                     	;# 
  2771  0292                     	;# 
  2772  0293                     	;# 
  2773  0293                     	;# 
  2774  0294                     	;# 
  2775  0295                     	;# 
  2776  0296                     	;# 
  2777  0296                     	;# 
  2778  0297                     	;# 
  2779  0298                     	;# 
  2780  0298                     	;# 
  2781  0299                     	;# 
  2782  0299                     	;# 
  2783  029A                     	;# 
  2784  029B                     	;# 
  2785  029C                     	;# 
  2786  029C                     	;# 
  2787  029D                     	;# 
  2788  030C                     	;# 
  2789  030C                     	;# 
  2790  030D                     	;# 
  2791  030E                     	;# 
  2792  030F                     	;# 
  2793  0310                     	;# 
  2794  0310                     	;# 
  2795  0311                     	;# 
  2796  0312                     	;# 
  2797  0313                     	;# 
  2798  0314                     	;# 
  2799  0314                     	;# 
  2800  0315                     	;# 
  2801  0316                     	;# 
  2802  0317                     	;# 
  2803  0318                     	;# 
  2804  0318                     	;# 
  2805  0319                     	;# 
  2806  031A                     	;# 
  2807  031B                     	;# 
  2808  031C                     	;# 
  2809  031C                     	;# 
  2810  031D                     	;# 
  2811  031E                     	;# 
  2812  031F                     	;# 
  2813  038C                     	;# 
  2814  038D                     	;# 
  2815  038E                     	;# 
  2816  0390                     	;# 
  2817  0391                     	;# 
  2818  0392                     	;# 
  2819  040C                     	;# 
  2820  040D                     	;# 
  2821  040E                     	;# 
  2822  040F                     	;# 
  2823  0410                     	;# 
  2824  0411                     	;# 
  2825  0416                     	;# 
  2826  0416                     	;# 
  2827  0417                     	;# 
  2828  0418                     	;# 
  2829  0418                     	;# 
  2830  0419                     	;# 
  2831  041A                     	;# 
  2832  041A                     	;# 
  2833  041B                     	;# 
  2834  041C                     	;# 
  2835  041C                     	;# 
  2836  041D                     	;# 
  2837  041E                     	;# 
  2838  041F                     	;# 
  2839  048C                     	;# 
  2840  048C                     	;# 
  2841  048D                     	;# 
  2842  048E                     	;# 
  2843  048F                     	;# 
  2844  048F                     	;# 
  2845  0490                     	;# 
  2846  0491                     	;# 
  2847  0492                     	;# 
  2848  0492                     	;# 
  2849  0493                     	;# 
  2850  0494                     	;# 
  2851  0495                     	;# 
  2852  0495                     	;# 
  2853  0496                     	;# 
  2854  0497                     	;# 
  2855  0498                     	;# 
  2856  0499                     	;# 
  2857  049A                     	;# 
  2858  049B                     	;# 
  2859  049C                     	;# 
  2860  049D                     	;# 
  2861  050C                     	;# 
  2862  050C                     	;# 
  2863  050D                     	;# 
  2864  050E                     	;# 
  2865  050F                     	;# 
  2866  050F                     	;# 
  2867  0510                     	;# 
  2868  0511                     	;# 
  2869  0512                     	;# 
  2870  0512                     	;# 
  2871  0513                     	;# 
  2872  0514                     	;# 
  2873  0515                     	;# 
  2874  0515                     	;# 
  2875  0516                     	;# 
  2876  0517                     	;# 
  2877  0518                     	;# 
  2878  0519                     	;# 
  2879  051A                     	;# 
  2880  051B                     	;# 
  2881  051C                     	;# 
  2882  051D                     	;# 
  2883  058C                     	;# 
  2884  058C                     	;# 
  2885  058D                     	;# 
  2886  058E                     	;# 
  2887  058F                     	;# 
  2888  058F                     	;# 
  2889  0590                     	;# 
  2890  0591                     	;# 
  2891  0592                     	;# 
  2892  0593                     	;# 
  2893  060C                     	;# 
  2894  060D                     	;# 
  2895  060E                     	;# 
  2896  060F                     	;# 
  2897  0610                     	;# 
  2898  0611                     	;# 
  2899  0612                     	;# 
  2900  0613                     	;# 
  2901  0614                     	;# 
  2902  0616                     	;# 
  2903  0617                     	;# 
  2904  0618                     	;# 
  2905  0619                     	;# 
  2906  061A                     	;# 
  2907  061B                     	;# 
  2908  061C                     	;# 
  2909  061D                     	;# 
  2910  061E                     	;# 
  2911  068C                     	;# 
  2912  068D                     	;# 
  2913  068E                     	;# 
  2914  068F                     	;# 
  2915  0690                     	;# 
  2916  0691                     	;# 
  2917  0692                     	;# 
  2918  0693                     	;# 
  2919  0694                     	;# 
  2920  070C                     	;# 
  2921  070D                     	;# 
  2922  070E                     	;# 
  2923  070F                     	;# 
  2924  0710                     	;# 
  2925  0711                     	;# 
  2926  0712                     	;# 
  2927  0713                     	;# 
  2928  0714                     	;# 
  2929  0716                     	;# 
  2930  0717                     	;# 
  2931  0718                     	;# 
  2932  0719                     	;# 
  2933  071A                     	;# 
  2934  071B                     	;# 
  2935  071C                     	;# 
  2936  071D                     	;# 
  2937  071E                     	;# 
  2938  0796                     	;# 
  2939  0797                     	;# 
  2940  0798                     	;# 
  2941  0799                     	;# 
  2942  079A                     	;# 
  2943  079B                     	;# 
  2944  080C                     	;# 
  2945  080D                     	;# 
  2946  080E                     	;# 
  2947  080F                     	;# 
  2948  0810                     	;# 
  2949  0811                     	;# 
  2950  0812                     	;# 
  2951  0813                     	;# 
  2952  0814                     	;# 
  2953  081A                     	;# 
  2954  081B                     	;# 
  2955  081C                     	;# 
  2956  081D                     	;# 
  2957  081E                     	;# 
  2958  081F                     	;# 
  2959  088C                     	;# 
  2960  088D                     	;# 
  2961  088E                     	;# 
  2962  088F                     	;# 
  2963  0890                     	;# 
  2964  0891                     	;# 
  2965  0892                     	;# 
  2966  0893                     	;# 
  2967  0895                     	;# 
  2968  0896                     	;# 
  2969  0897                     	;# 
  2970  0898                     	;# 
  2971  0899                     	;# 
  2972  089A                     	;# 
  2973  089B                     	;# 
  2974  090C                     	;# 
  2975  090E                     	;# 
  2976  090F                     	;# 
  2977  091F                     	;# 
  2978  091F                     	;# 
  2979  098F                     	;# 
  2980  098F                     	;# 
  2981  0990                     	;# 
  2982  0991                     	;# 
  2983  0992                     	;# 
  2984  0993                     	;# 
  2985  0994                     	;# 
  2986  0995                     	;# 
  2987  0996                     	;# 
  2988  0997                     	;# 
  2989  0E0F                     	;# 
  2990  0E10                     	;# 
  2991  0E11                     	;# 
  2992  0E12                     	;# 
  2993  0E13                     	;# 
  2994  0E14                     	;# 
  2995  0E15                     	;# 
  2996  0E16                     	;# 
  2997  0E17                     	;# 
  2998  0E18                     	;# 
  2999  0E19                     	;# 
  3000  0E1A                     	;# 
  3001  0E1B                     	;# 
  3002  0E1C                     	;# 
  3003  0E1D                     	;# 
  3004  0E1E                     	;# 
  3005  0E1F                     	;# 
  3006  0E20                     	;# 
  3007  0E21                     	;# 
  3008  0E22                     	;# 
  3009  0E23                     	;# 
  3010  0E24                     	;# 
  3011  0E25                     	;# 
  3012  0E26                     	;# 
  3013  0E27                     	;# 
  3014  0E28                     	;# 
  3015  0E29                     	;# 
  3016  0E2A                     	;# 
  3017  0E2B                     	;# 
  3018  0E2C                     	;# 
  3019  0E2D                     	;# 
  3020  0E2E                     	;# 
  3021  0E2F                     	;# 
  3022  0E30                     	;# 
  3023  0E31                     	;# 
  3024  0E32                     	;# 
  3025  0E33                     	;# 
  3026  0E34                     	;# 
  3027  0E35                     	;# 
  3028  0E36                     	;# 
  3029  0E37                     	;# 
  3030  0E8F                     	;# 
  3031  0E90                     	;# 
  3032  0E91                     	;# 
  3033  0E92                     	;# 
  3034  0E93                     	;# 
  3035  0E94                     	;# 
  3036  0E95                     	;# 
  3037  0E96                     	;# 
  3038  0E97                     	;# 
  3039  0E9C                     	;# 
  3040  0E9D                     	;# 
  3041  0E9E                     	;# 
  3042  0EA1                     	;# 
  3043  0EA2                     	;# 
  3044  0EA3                     	;# 
  3045  0EA4                     	;# 
  3046  0EA5                     	;# 
  3047  0EA9                     	;# 
  3048  0EAA                     	;# 
  3049  0EAB                     	;# 
  3050  0EAC                     	;# 
  3051  0EB1                     	;# 
  3052  0EB2                     	;# 
  3053  0EB3                     	;# 
  3054  0EB8                     	;# 
  3055  0EB9                     	;# 
  3056  0EBA                     	;# 
  3057  0EBB                     	;# 
  3058  0EBC                     	;# 
  3059  0EBD                     	;# 
  3060  0EBE                     	;# 
  3061  0EC3                     	;# 
  3062  0EC5                     	;# 
  3063  0EC6                     	;# 
  3064  0EC7                     	;# 
  3065  0EC8                     	;# 
  3066  0EC9                     	;# 
  3067  0ECA                     	;# 
  3068  0ECB                     	;# 
  3069  0ECC                     	;# 
  3070  0F10                     	;# 
  3071  0F11                     	;# 
  3072  0F12                     	;# 
  3073  0F13                     	;# 
  3074  0F14                     	;# 
  3075  0F15                     	;# 
  3076  0F16                     	;# 
  3077  0F17                     	;# 
  3078  0F18                     	;# 
  3079  0F19                     	;# 
  3080  0F1A                     	;# 
  3081  0F1B                     	;# 
  3082  0F1C                     	;# 
  3083  0F1D                     	;# 
  3084  0F1E                     	;# 
  3085  0F1F                     	;# 
  3086  0F20                     	;# 
  3087  0F21                     	;# 
  3088  0F22                     	;# 
  3089  0F23                     	;# 
  3090  0F24                     	;# 
  3091  0F25                     	;# 
  3092  0F26                     	;# 
  3093  0F27                     	;# 
  3094  0F38                     	;# 
  3095  0F39                     	;# 
  3096  0F3A                     	;# 
  3097  0F3B                     	;# 
  3098  0F3C                     	;# 
  3099  0F3D                     	;# 
  3100  0F3E                     	;# 
  3101  0F3F                     	;# 
  3102  0F40                     	;# 
  3103  0F41                     	;# 
  3104  0F43                     	;# 
  3105  0F44                     	;# 
  3106  0F45                     	;# 
  3107  0F46                     	;# 
  3108  0F47                     	;# 
  3109  0F48                     	;# 
  3110  0F49                     	;# 
  3111  0F4A                     	;# 
  3112  0F4B                     	;# 
  3113  0F4C                     	;# 
  3114  0F4E                     	;# 
  3115  0F4F                     	;# 
  3116  0F50                     	;# 
  3117  0F51                     	;# 
  3118  0F52                     	;# 
  3119  0F53                     	;# 
  3120  0F54                     	;# 
  3121  0F55                     	;# 
  3122  0F56                     	;# 
  3123  0F57                     	;# 
  3124  0F65                     	;# 
  3125  0F68                     	;# 
  3126  0F69                     	;# 
  3127  0F6A                     	;# 
  3128  0F6B                     	;# 
  3129  0FE4                     	;# 
  3130  0FE5                     	;# 
  3131  0FE6                     	;# 
  3132  0FE7                     	;# 
  3133  0FE8                     	;# 
  3134  0FE9                     	;# 
  3135  0FEA                     	;# 
  3136  0FEB                     	;# 
  3137  0FED                     	;# 
  3138  0FEE                     	;# 
  3139  0FEF                     	;# 
  3140  0000                     	;# 
  3141  0001                     	;# 
  3142  0002                     	;# 
  3143  0003                     	;# 
  3144  0004                     	;# 
  3145  0005                     	;# 
  3146  0006                     	;# 
  3147  0007                     	;# 
  3148  0008                     	;# 
  3149  0009                     	;# 
  3150  000A                     	;# 
  3151  000B                     	;# 
  3152  000C                     	;# 
  3153  000D                     	;# 
  3154  000E                     	;# 
  3155  0010                     	;# 
  3156  0011                     	;# 
  3157  0012                     	;# 
  3158  0013                     	;# 
  3159  0016                     	;# 
  3160  0017                     	;# 
  3161  0018                     	;# 
  3162  001C                     	;# 
  3163  001C                     	;# 
  3164  001D                     	;# 
  3165  001D                     	;# 
  3166  001E                     	;# 
  3167  001F                     	;# 
  3168  008C                     	;# 
  3169  008C                     	;# 
  3170  008D                     	;# 
  3171  008E                     	;# 
  3172  008E                     	;# 
  3173  008F                     	;# 
  3174  0090                     	;# 
  3175  0090                     	;# 
  3176  0091                     	;# 
  3177  0093                     	;# 
  3178  0094                     	;# 
  3179  0095                     	;# 
  3180  0096                     	;# 
  3181  0097                     	;# 
  3182  0098                     	;# 
  3183  0099                     	;# 
  3184  009A                     	;# 
  3185  009B                     	;# 
  3186  009C                     	;# 
  3187  009D                     	;# 
  3188  009E                     	;# 
  3189  010C                     	;# 
  3190  010D                     	;# 
  3191  010E                     	;# 
  3192  010E                     	;# 
  3193  010F                     	;# 
  3194  0110                     	;# 
  3195  0110                     	;# 
  3196  0111                     	;# 
  3197  0112                     	;# 
  3198  0112                     	;# 
  3199  0113                     	;# 
  3200  0114                     	;# 
  3201  0114                     	;# 
  3202  0115                     	;# 
  3203  0116                     	;# 
  3204  0116                     	;# 
  3205  0117                     	;# 
  3206  0119                     	;# 
  3207  0119                     	;# 
  3208  0119                     	;# 
  3209  011A                     	;# 
  3210  011A                     	;# 
  3211  011A                     	;# 
  3212  011B                     	;# 
  3213  011B                     	;# 
  3214  011B                     	;# 
  3215  011B                     	;# 
  3216  011B                     	;# 
  3217  011C                     	;# 
  3218  011C                     	;# 
  3219  011C                     	;# 
  3220  011D                     	;# 
  3221  011D                     	;# 
  3222  011D                     	;# 
  3223  011E                     	;# 
  3224  011E                     	;# 
  3225  011E                     	;# 
  3226  011F                     	;# 
  3227  011F                     	;# 
  3228  011F                     	;# 
  3229  011F                     	;# 
  3230  011F                     	;# 
  3231  018C                     	;# 
  3232  018D                     	;# 
  3233  018E                     	;# 
  3234  018F                     	;# 
  3235  0190                     	;# 
  3236  0191                     	;# 
  3237  0192                     	;# 
  3238  0196                     	;# 
  3239  0197                     	;# 
  3240  0198                     	;# 
  3241  0199                     	;# 
  3242  019A                     	;# 
  3243  019B                     	;# 
  3244  019C                     	;# 
  3245  020C                     	;# 
  3246  020D                     	;# 
  3247  020E                     	;# 
  3248  020F                     	;# 
  3249  020F                     	;# 
  3250  0210                     	;# 
  3251  0210                     	;# 
  3252  0211                     	;# 
  3253  0211                     	;# 
  3254  0212                     	;# 
  3255  0213                     	;# 
  3256  0214                     	;# 
  3257  0215                     	;# 
  3258  0215                     	;# 
  3259  0216                     	;# 
  3260  0216                     	;# 
  3261  0217                     	;# 
  3262  0217                     	;# 
  3263  0218                     	;# 
  3264  0219                     	;# 
  3265  021A                     	;# 
  3266  021B                     	;# 
  3267  021B                     	;# 
  3268  021C                     	;# 
  3269  021C                     	;# 
  3270  021D                     	;# 
  3271  021D                     	;# 
  3272  021E                     	;# 
  3273  021F                     	;# 
  3274  028C                     	;# 
  3275  028C                     	;# 
  3276  028D                     	;# 
  3277  028D                     	;# 
  3278  028E                     	;# 
  3279  028F                     	;# 
  3280  0290                     	;# 
  3281  0290                     	;# 
  3282  0291                     	;# 
  3283  0292                     	;# 
  3284  0292                     	;# 
  3285  0293                     	;# 
  3286  0293                     	;# 
  3287  0294                     	;# 
  3288  0295                     	;# 
  3289  0296                     	;# 
  3290  0296                     	;# 
  3291  0297                     	;# 
  3292  0298                     	;# 
  3293  0298                     	;# 
  3294  0299                     	;# 
  3295  0299                     	;# 
  3296  029A                     	;# 
  3297  029B                     	;# 
  3298  029C                     	;# 
  3299  029C                     	;# 
  3300  029D                     	;# 
  3301  030C                     	;# 
  3302  030C                     	;# 
  3303  030D                     	;# 
  3304  030E                     	;# 
  3305  030F                     	;# 
  3306  0310                     	;# 
  3307  0310                     	;# 
  3308  0311                     	;# 
  3309  0312                     	;# 
  3310  0313                     	;# 
  3311  0314                     	;# 
  3312  0314                     	;# 
  3313  0315                     	;# 
  3314  0316                     	;# 
  3315  0317                     	;# 
  3316  0318                     	;# 
  3317  0318                     	;# 
  3318  0319                     	;# 
  3319  031A                     	;# 
  3320  031B                     	;# 
  3321  031C                     	;# 
  3322  031C                     	;# 
  3323  031D                     	;# 
  3324  031E                     	;# 
  3325  031F                     	;# 
  3326  038C                     	;# 
  3327  038D                     	;# 
  3328  038E                     	;# 
  3329  0390                     	;# 
  3330  0391                     	;# 
  3331  0392                     	;# 
  3332  040C                     	;# 
  3333  040D                     	;# 
  3334  040E                     	;# 
  3335  040F                     	;# 
  3336  0410                     	;# 
  3337  0411                     	;# 
  3338  0416                     	;# 
  3339  0416                     	;# 
  3340  0417                     	;# 
  3341  0418                     	;# 
  3342  0418                     	;# 
  3343  0419                     	;# 
  3344  041A                     	;# 
  3345  041A                     	;# 
  3346  041B                     	;# 
  3347  041C                     	;# 
  3348  041C                     	;# 
  3349  041D                     	;# 
  3350  041E                     	;# 
  3351  041F                     	;# 
  3352  048C                     	;# 
  3353  048C                     	;# 
  3354  048D                     	;# 
  3355  048E                     	;# 
  3356  048F                     	;# 
  3357  048F                     	;# 
  3358  0490                     	;# 
  3359  0491                     	;# 
  3360  0492                     	;# 
  3361  0492                     	;# 
  3362  0493                     	;# 
  3363  0494                     	;# 
  3364  0495                     	;# 
  3365  0495                     	;# 
  3366  0496                     	;# 
  3367  0497                     	;# 
  3368  0498                     	;# 
  3369  0499                     	;# 
  3370  049A                     	;# 
  3371  049B                     	;# 
  3372  049C                     	;# 
  3373  049D                     	;# 
  3374  050C                     	;# 
  3375  050C                     	;# 
  3376  050D                     	;# 
  3377  050E                     	;# 
  3378  050F                     	;# 
  3379  050F                     	;# 
  3380  0510                     	;# 
  3381  0511                     	;# 
  3382  0512                     	;# 
  3383  0512                     	;# 
  3384  0513                     	;# 
  3385  0514                     	;# 
  3386  0515                     	;# 
  3387  0515                     	;# 
  3388  0516                     	;# 
  3389  0517                     	;# 
  3390  0518                     	;# 
  3391  0519                     	;# 
  3392  051A                     	;# 
  3393  051B                     	;# 
  3394  051C                     	;# 
  3395  051D                     	;# 
  3396  058C                     	;# 
  3397  058C                     	;# 
  3398  058D                     	;# 
  3399  058E                     	;# 
  3400  058F                     	;# 
  3401  058F                     	;# 
  3402  0590                     	;# 
  3403  0591                     	;# 
  3404  0592                     	;# 
  3405  0593                     	;# 
  3406  060C                     	;# 
  3407  060D                     	;# 
  3408  060E                     	;# 
  3409  060F                     	;# 
  3410  0610                     	;# 
  3411  0611                     	;# 
  3412  0612                     	;# 
  3413  0613                     	;# 
  3414  0614                     	;# 
  3415  0616                     	;# 
  3416  0617                     	;# 
  3417  0618                     	;# 
  3418  0619                     	;# 
  3419  061A                     	;# 
  3420  061B                     	;# 
  3421  061C                     	;# 
  3422  061D                     	;# 
  3423  061E                     	;# 
  3424  068C                     	;# 
  3425  068D                     	;# 
  3426  068E                     	;# 
  3427  068F                     	;# 
  3428  0690                     	;# 
  3429  0691                     	;# 
  3430  0692                     	;# 
  3431  0693                     	;# 
  3432  0694                     	;# 
  3433  070C                     	;# 
  3434  070D                     	;# 
  3435  070E                     	;# 
  3436  070F                     	;# 
  3437  0710                     	;# 
  3438  0711                     	;# 
  3439  0712                     	;# 
  3440  0713                     	;# 
  3441  0714                     	;# 
  3442  0716                     	;# 
  3443  0717                     	;# 
  3444  0718                     	;# 
  3445  0719                     	;# 
  3446  071A                     	;# 
  3447  071B                     	;# 
  3448  071C                     	;# 
  3449  071D                     	;# 
  3450  071E                     	;# 
  3451  0796                     	;# 
  3452  0797                     	;# 
  3453  0798                     	;# 
  3454  0799                     	;# 
  3455  079A                     	;# 
  3456  079B                     	;# 
  3457  080C                     	;# 
  3458  080D                     	;# 
  3459  080E                     	;# 
  3460  080F                     	;# 
  3461  0810                     	;# 
  3462  0811                     	;# 
  3463  0812                     	;# 
  3464  0813                     	;# 
  3465  0814                     	;# 
  3466  081A                     	;# 
  3467  081B                     	;# 
  3468  081C                     	;# 
  3469  081D                     	;# 
  3470  081E                     	;# 
  3471  081F                     	;# 
  3472  088C                     	;# 
  3473  088D                     	;# 
  3474  088E                     	;# 
  3475  088F                     	;# 
  3476  0890                     	;# 
  3477  0891                     	;# 
  3478  0892                     	;# 
  3479  0893                     	;# 
  3480  0895                     	;# 
  3481  0896                     	;# 
  3482  0897                     	;# 
  3483  0898                     	;# 
  3484  0899                     	;# 
  3485  089A                     	;# 
  3486  089B                     	;# 
  3487  090C                     	;# 
  3488  090E                     	;# 
  3489  090F                     	;# 
  3490  091F                     	;# 
  3491  091F                     	;# 
  3492  098F                     	;# 
  3493  098F                     	;# 
  3494  0990                     	;# 
  3495  0991                     	;# 
  3496  0992                     	;# 
  3497  0993                     	;# 
  3498  0994                     	;# 
  3499  0995                     	;# 
  3500  0996                     	;# 
  3501  0997                     	;# 
  3502  0E0F                     	;# 
  3503  0E10                     	;# 
  3504  0E11                     	;# 
  3505  0E12                     	;# 
  3506  0E13                     	;# 
  3507  0E14                     	;# 
  3508  0E15                     	;# 
  3509  0E16                     	;# 
  3510  0E17                     	;# 
  3511  0E18                     	;# 
  3512  0E19                     	;# 
  3513  0E1A                     	;# 
  3514  0E1B                     	;# 
  3515  0E1C                     	;# 
  3516  0E1D                     	;# 
  3517  0E1E                     	;# 
  3518  0E1F                     	;# 
  3519  0E20                     	;# 
  3520  0E21                     	;# 
  3521  0E22                     	;# 
  3522  0E23                     	;# 
  3523  0E24                     	;# 
  3524  0E25                     	;# 
  3525  0E26                     	;# 
  3526  0E27                     	;# 
  3527  0E28                     	;# 
  3528  0E29                     	;# 
  3529  0E2A                     	;# 
  3530  0E2B                     	;# 
  3531  0E2C                     	;# 
  3532  0E2D                     	;# 
  3533  0E2E                     	;# 
  3534  0E2F                     	;# 
  3535  0E30                     	;# 
  3536  0E31                     	;# 
  3537  0E32                     	;# 
  3538  0E33                     	;# 
  3539  0E34                     	;# 
  3540  0E35                     	;# 
  3541  0E36                     	;# 
  3542  0E37                     	;# 
  3543  0E8F                     	;# 
  3544  0E90                     	;# 
  3545  0E91                     	;# 
  3546  0E92                     	;# 
  3547  0E93                     	;# 
  3548  0E94                     	;# 
  3549  0E95                     	;# 
  3550  0E96                     	;# 
  3551  0E97                     	;# 
  3552  0E9C                     	;# 
  3553  0E9D                     	;# 
  3554  0E9E                     	;# 
  3555  0EA1                     	;# 
  3556  0EA2                     	;# 
  3557  0EA3                     	;# 
  3558  0EA4                     	;# 
  3559  0EA5                     	;# 
  3560  0EA9                     	;# 
  3561  0EAA                     	;# 
  3562  0EAB                     	;# 
  3563  0EAC                     	;# 
  3564  0EB1                     	;# 
  3565  0EB2                     	;# 
  3566  0EB3                     	;# 
  3567  0EB8                     	;# 
  3568  0EB9                     	;# 
  3569  0EBA                     	;# 
  3570  0EBB                     	;# 
  3571  0EBC                     	;# 
  3572  0EBD                     	;# 
  3573  0EBE                     	;# 
  3574  0EC3                     	;# 
  3575  0EC5                     	;# 
  3576  0EC6                     	;# 
  3577  0EC7                     	;# 
  3578  0EC8                     	;# 
  3579  0EC9                     	;# 
  3580  0ECA                     	;# 
  3581  0ECB                     	;# 
  3582  0ECC                     	;# 
  3583  0F10                     	;# 
  3584  0F11                     	;# 
  3585  0F12                     	;# 
  3586  0F13                     	;# 
  3587  0F14                     	;# 
  3588  0F15                     	;# 
  3589  0F16                     	;# 
  3590  0F17                     	;# 
  3591  0F18                     	;# 
  3592  0F19                     	;# 
  3593  0F1A                     	;# 
  3594  0F1B                     	;# 
  3595  0F1C                     	;# 
  3596  0F1D                     	;# 
  3597  0F1E                     	;# 
  3598  0F1F                     	;# 
  3599  0F20                     	;# 
  3600  0F21                     	;# 
  3601  0F22                     	;# 
  3602  0F23                     	;# 
  3603  0F24                     	;# 
  3604  0F25                     	;# 
  3605  0F26                     	;# 
  3606  0F27                     	;# 
  3607  0F38                     	;# 
  3608  0F39                     	;# 
  3609  0F3A                     	;# 
  3610  0F3B                     	;# 
  3611  0F3C                     	;# 
  3612  0F3D                     	;# 
  3613  0F3E                     	;# 
  3614  0F3F                     	;# 
  3615  0F40                     	;# 
  3616  0F41                     	;# 
  3617  0F43                     	;# 
  3618  0F44                     	;# 
  3619  0F45                     	;# 
  3620  0F46                     	;# 
  3621  0F47                     	;# 
  3622  0F48                     	;# 
  3623  0F49                     	;# 
  3624  0F4A                     	;# 
  3625  0F4B                     	;# 
  3626  0F4C                     	;# 
  3627  0F4E                     	;# 
  3628  0F4F                     	;# 
  3629  0F50                     	;# 
  3630  0F51                     	;# 
  3631  0F52                     	;# 
  3632  0F53                     	;# 
  3633  0F54                     	;# 
  3634  0F55                     	;# 
  3635  0F56                     	;# 
  3636  0F57                     	;# 
  3637  0F65                     	;# 
  3638  0F68                     	;# 
  3639  0F69                     	;# 
  3640  0F6A                     	;# 
  3641  0F6B                     	;# 
  3642  0FE4                     	;# 
  3643  0FE5                     	;# 
  3644  0FE6                     	;# 
  3645  0FE7                     	;# 
  3646  0FE8                     	;# 
  3647  0FE9                     	;# 
  3648  0FEA                     	;# 
  3649  0FEB                     	;# 
  3650  0FED                     	;# 
  3651  0FEE                     	;# 
  3652  0FEF                     	;_samples
  3653                           
  3654                           	psect	idataBANK2
  3655  1F5A                     __pidataBANK2:	
  3656                           
  3657                           ;initializer for ___cgram
  3658  1F5A  340C               	retlw	12
  3659  1F5B  3412               	retlw	18
  3660  1F5C  3412               	retlw	18
  3661  1F5D  340C               	retlw	12
  3662  1F5E  3400               	retlw	0
  3663  1F5F  3400               	retlw	0
  3664  1F60  3400               	retlw	0
  3665  1F61  3400               	retlw	0
  3666  1F62  340A               	retlw	10
  3667  1F63  3415               	retlw	21
  3668  1F64  3411               	retlw	17
  3669  1F65  340A               	retlw	10
  3670  1F66  3404               	retlw	4
  3671  1F67  3400               	retlw	0
  3672  1F68  3400               	retlw	0
  3673  1F69  3400               	retlw	0
  3674  1F6A  340A               	retlw	10
  3675  1F6B  341F               	retlw	31
  3676  1F6C  341F               	retlw	31
  3677  1F6D  340E               	retlw	14
  3678  1F6E  3404               	retlw	4
  3679  1F6F  3400               	retlw	0
  3680  1F70  3400               	retlw	0
  3681  1F71  3400               	retlw	0
  3682                           
  3683                           	psect	stringtext
  3684  1800                     __pstringtext:	
  3685  1800                     _dpowers:	
  3686  1800  3401               	retlw	1
  3687  1801  3400               	retlw	0
  3688  1802  3400               	retlw	0
  3689  1803  3400               	retlw	0
  3690  1804  340A               	retlw	10
  3691  1805  3400               	retlw	0
  3692  1806  3400               	retlw	0
  3693  1807  3400               	retlw	0
  3694  1808  3464               	retlw	100
  3695  1809  3400               	retlw	0
  3696  180A  3400               	retlw	0
  3697  180B  3400               	retlw	0
  3698  180C  34E8               	retlw	232
  3699  180D  3403               	retlw	3
  3700  180E  3400               	retlw	0
  3701  180F  3400               	retlw	0
  3702  1810  3410               	retlw	16
  3703  1811  3427               	retlw	39
  3704  1812  3400               	retlw	0
  3705  1813  3400               	retlw	0
  3706  1814  34A0               	retlw	160
  3707  1815  3486               	retlw	134
  3708  1816  3401               	retlw	1
  3709  1817  3400               	retlw	0
  3710  1818  3440               	retlw	64
  3711  1819  3442               	retlw	66
  3712  181A  340F               	retlw	15
  3713  181B  3400               	retlw	0
  3714  181C  3480               	retlw	128
  3715  181D  3496               	retlw	150
  3716  181E  3498               	retlw	152
  3717  181F  3400               	retlw	0
  3718  1820  3400               	retlw	0
  3719  1821  34E1               	retlw	225
  3720  1822  34F5               	retlw	245
  3721  1823  3405               	retlw	5
  3722  1824  3400               	retlw	0
  3723  1825  34CA               	retlw	202
  3724  1826  349A               	retlw	154
  3725  1827  343B               	retlw	59
  3726  1828                     __end_of_dpowers:	
  3727  1828                     __npowers_:	
  3728  1828  3400               	retlw	0
  3729  1829  3480               	retlw	128
  3730  182A  343F               	retlw	63
  3731  182B  34CD               	retlw	205
  3732  182C  34CC               	retlw	204
  3733  182D  343D               	retlw	61
  3734  182E  34D7               	retlw	215
  3735  182F  3423               	retlw	35
  3736  1830  343C               	retlw	60
  3737  1831  3412               	retlw	18
  3738  1832  3483               	retlw	131
  3739  1833  343A               	retlw	58
  3740  1834  34B7               	retlw	183
  3741  1835  34D1               	retlw	209
  3742  1836  3438               	retlw	56
  3743  1837  34C6               	retlw	198
  3744  1838  3427               	retlw	39
  3745  1839  3437               	retlw	55
  3746  183A  3438               	retlw	56
  3747  183B  3486               	retlw	134
  3748  183C  3435               	retlw	53
  3749  183D  34C0               	retlw	192
  3750  183E  34D6               	retlw	214
  3751  183F  3433               	retlw	51
  3752  1840  34CC               	retlw	204
  3753  1841  342B               	retlw	43
  3754  1842  3432               	retlw	50
  3755  1843  3470               	retlw	112
  3756  1844  3489               	retlw	137
  3757  1845  3430               	retlw	48
  3758  1846  34E7               	retlw	231
  3759  1847  34DB               	retlw	219
  3760  1848  342E               	retlw	46
  3761  1849  34E5               	retlw	229
  3762  184A  343C               	retlw	60
  3763  184B  341E               	retlw	30
  3764  184C  3442               	retlw	66
  3765  184D  34A2               	retlw	162
  3766  184E  340D               	retlw	13
  3767  184F                     __end_of__npowers_:	
  3768  184F                     __powers_:	
  3769  184F  3400               	retlw	0
  3770  1850  3480               	retlw	128
  3771  1851  343F               	retlw	63
  3772  1852  3400               	retlw	0
  3773  1853  3420               	retlw	32
  3774  1854  3441               	retlw	65
  3775  1855  3400               	retlw	0
  3776  1856  34C8               	retlw	200
  3777  1857  3442               	retlw	66
  3778  1858  3400               	retlw	0
  3779  1859  347A               	retlw	122
  3780  185A  3444               	retlw	68
  3781  185B  3440               	retlw	64
  3782  185C  341C               	retlw	28
  3783  185D  3446               	retlw	70
  3784  185E  3450               	retlw	80
  3785  185F  34C3               	retlw	195
  3786  1860  3447               	retlw	71
  3787  1861  3424               	retlw	36
  3788  1862  3474               	retlw	116
  3789  1863  3449               	retlw	73
  3790  1864  3497               	retlw	151
  3791  1865  3418               	retlw	24
  3792  1866  344B               	retlw	75
  3793  1867  34BC               	retlw	188
  3794  1868  34BE               	retlw	190
  3795  1869  344C               	retlw	76
  3796  186A  346B               	retlw	107
  3797  186B  346E               	retlw	110
  3798  186C  344E               	retlw	78
  3799  186D  3403               	retlw	3
  3800  186E  3415               	retlw	21
  3801  186F  3450               	retlw	80
  3802  1870  3479               	retlw	121
  3803  1871  34AD               	retlw	173
  3804  1872  3460               	retlw	96
  3805  1873  34F3               	retlw	243
  3806  1874  3449               	retlw	73
  3807  1875  3471               	retlw	113
  3808  1876                     __end_of__powers_:	
  3809  1876                     log@coeff:	
  3810  1876  3400               	retlw	0
  3811  1877  3400               	retlw	0
  3812  1878  3400               	retlw	0
  3813  1879  3400               	retlw	0
  3814  187A  3480               	retlw	128
  3815  187B  343F               	retlw	63
  3816  187C  34F0               	retlw	240
  3817  187D  34FF               	retlw	255
  3818  187E  34BE               	retlw	190
  3819  187F  34E2               	retlw	226
  3820  1880  34A9               	retlw	169
  3821  1881  343E               	retlw	62
  3822  1882  3483               	retlw	131
  3823  1883  3476               	retlw	118
  3824  1884  34BE               	retlw	190
  3825  1885  34AE               	retlw	174
  3826  1886  342B               	retlw	43
  3827  1887  343E               	retlw	62
  3828  1888  343C               	retlw	60
  3829  1889  34C3               	retlw	195
  3830  188A  34BD               	retlw	189
  3831  188B  34D2               	retlw	210
  3832  188C  3413               	retlw	19
  3833  188D  343D               	retlw	61
  3834  188E  3478               	retlw	120
  3835  188F  34D3               	retlw	211
  3836  1890  34BB               	retlw	187
  3837  1891                     __end_oflog@coeff:	
  3838  0016                     _LATA	set	22
  3839  0017                     _LATB	set	23
  3840  0018                     _LATC	set	24
  3841  0011                     _TRISA	set	17
  3842  0012                     _TRISB	set	18
  3843  0013                     _TRISC	set	19
  3844  005F                     _GIE	set	95
  3845  0068                     _RB0	set	104
  3846  0069                     _RB1	set	105
  3847  006A                     _RB2	set	106
  3848  006B                     _RB3	set	107
  3849  006C                     _RB4	set	108
  3850  006D                     _RB5	set	109
  3851  009D                     _ADACQ	set	157
  3852  0099                     _ADACT	set	153
  3853  009B                     _ADCAP	set	155
  3854  0098                     _ADCLK	set	152
  3855  0093                     _ADCON0	set	147
  3856  0093                     _ADCON0bits	set	147
  3857  0094                     _ADCON1	set	148
  3858  0095                     _ADCON2	set	149
  3859  0096                     _ADCON3	set	150
  3860  009E                     _ADPCH	set	158
  3861  009C                     _ADPRE	set	156
  3862  009A                     _ADREF	set	154
  3863  008D                     _ADRESH	set	141
  3864  008C                     _ADRESL	set	140
  3865  0097                     _ADSTAT	set	151
  3866  010F                     _ADLTHH	set	271
  3867  010E                     _ADLTHL	set	270
  3868  010D                     _ADRPT	set	269
  3869  0113                     _ADSTPTH	set	275
  3870  0112                     _ADSTPTL	set	274
  3871  0111                     _ADUTHH	set	273
  3872  0110                     _ADUTHL	set	272
  3873  021F                     _CCPTMRS1bits	set	543
  3874  0290                     _T2CLKCON	set	656
  3875  028E                     _T2CON	set	654
  3876  028E                     _T2CONbits	set	654
  3877  028F                     _T2HLT	set	655
  3878  028D                     _T2PR	set	653
  3879  0291                     _T2RST	set	657
  3880  028C                     _T2TMR	set	652
  3881  038E                     _PWM6CON	set	910
  3882  038D                     _PWM6DCH	set	909
  3883  038C                     _PWM6DCL	set	908
  3884  0716                     _PIE0bits	set	1814
  3885  0710                     _PIR4bits	set	1808
  3886  088D                     _OSCCON1	set	2189
  3887  088F                     _OSCCON3	set	2191
  3888  0891                     _OSCEN	set	2193
  3889  0893                     _OSCFRQ	set	2195
  3890  0892                     _OSCTUNE	set	2194
  3891  090C                     _FVRCON	set	2316
  3892  0E8F                     _PPSLOCK	set	3727
  3893  0E8F                     _PPSLOCKbits	set	3727
  3894  0F38                     _ANSELA	set	3896
  3895  0F43                     _ANSELB	set	3907
  3896  0F4E                     _ANSELC	set	3918
  3897  0F11                     _RA1PPS	set	3857
  3898  0F39                     _WPUA	set	3897
  3899  0F44                     _WPUB	set	3908
  3900  0F4F                     _WPUC	set	3919
  3901  0F65                     _WPUE	set	3941
  3902  1891                     STR_1:	
  3903  1891  3425               	retlw	37	;'%'
  3904  1892  3433               	retlw	51	;'3'
  3905  1893  342E               	retlw	46	;'.'
  3906  1894  3431               	retlw	49	;'1'
  3907  1895  3466               	retlw	102	;'f'
  3908  1896  3400               	retlw	0
  3909  1897                     STR_2:	
  3910  1897  3425               	retlw	37	;'%'
  3911  1898  3464               	retlw	100	;'d'
  3912  1899  3420               	retlw	32	;' '
  3913  189A  3420               	retlw	32	;' '
  3914  189B  3400               	retlw	0
  3915                           
  3916                           ; #config settings
  3917  0000                     
  3918                           	psect	cinit
  3919  07DB                     start_initialization:	
  3920  07DB                     __initialization:		;BIGRAM
  3921                           
  3922                           ; Initialize objects allocated to BANK2
  3923  07DB  305A               	movlw	low __pidataBANK2
  3924  07DC  0084               	movwf	4
  3925  07DD  309F               	movlw	(high __pidataBANK2)| (0+128)
  3926  07DE  0085               	movwf	5
  3927  07DF  3020               	movlw	low __pdataBANK2
  3928  07E0  0086               	movwf	6
  3929  07E1  3001               	movlw	high __pdataBANK2
  3930  07E2  0087               	movwf	7
  3931  07E3  3000               	movlw	0
  3932  07E4  00FF               	movwf	btemp+1
  3933  07E5  3018               	movlw	24
  3934  07E6  319E  26DC  3187   	fcall	init_ram
  3935                           
  3936                           ; Clear objects allocated to BIGRAM
  3937  07E9  308C               	movlw	low (0+9100)
  3938  07EA  0084               	movwf	4
  3939  07EB  3023               	movlw	high (0+9100)
  3940  07EC  0085               	movwf	5
  3941  07ED  3064               	movlw	100
  3942  07EE  00FE               	movwf	btemp
  3943  07EF  3000               	movlw	0
  3944  07F0  00FF               	movwf	btemp+1
  3945  07F1  319E  26D0         	fcall	clear_ram0
  3946                           
  3947                           ; Clear objects allocated to BANK0
  3948  07F3  01E7               	clrf	__pbssBANK0& (0+127)
  3949  07F4  01E8               	clrf	(__pbssBANK0+1)& (0+127)
  3950  07F5  01E9               	clrf	(__pbssBANK0+2)& (0+127)
  3951  07F6  01EA               	clrf	(__pbssBANK0+3)& (0+127)
  3952  07F7  01EB               	clrf	(__pbssBANK0+4)& (0+127)
  3953  07F8  01EC               	clrf	(__pbssBANK0+5)& (0+127)
  3954  07F9  01ED               	clrf	(__pbssBANK0+6)& (0+127)
  3955                           
  3956                           ; Clear objects allocated to BANK1
  3957  07FA  0021               	movlb	1	; select bank1
  3958  07FB  01E8               	clrf	__pbssBANK1& (0+127)
  3959  07FC  01E9               	clrf	(__pbssBANK1+1)& (0+127)
  3960  07FD                     end_of_initialization:	
  3961                           ;End of C runtime variable initialization code
  3962                           
  3963  07FD                     __end_of__initialization:	
  3964  07FD  0020               	movlb	0
  3965  07FE  318D  2D01         	ljmp	_main	;jump to C main() function
  3966                           
  3967                           	psect	bssBANK0
  3968  0067                     __pbssBANK0:	
  3969  0067                     LCD_Write_Int@F13684:	
  3970  0067                     	ds	5
  3971  006C                     _errno:	
  3972  006C                     	ds	2
  3973                           
  3974                           	psect	bssBANK1
  3975  00E8                     __pbssBANK1:	
  3976  00E8                     main@sampleIndex:	
  3977  00E8                     	ds	2
  3978                           
  3979                           	psect	dataBANK2
  3980  0120                     __pdataBANK2:	
  3981  0120                     ___cgram:	
  3982  0120                     	ds	24
  3983                           
  3984                           	psect	inittext
  3985  1EDC                     init_ram:	
  3986  1EDC  00FE               	movwf	126
  3987  1EDD                     initloop:	
  3988  1EDD  0012               	moviw fsr0++
  3989  1EDE  001E               	movwi fsr1++
  3990  1EDF  3001               	movlw	1
  3991  1EE0  02FE               	subwf	126,f
  3992  1EE1  3000               	movlw	0
  3993  1EE2  3BFF               	subwfb	127,f
  3994  1EE3  087F               	movf	127,w
  3995  1EE4  047E               	iorwf	126,w
  3996  1EE5  1903               	btfsc	3,2
  3997  1EE6  3400               	retlw	0
  3998  1EE7  2EDD               	goto	initloop
  3999                           
  4000                           	psect	clrtext
  4001  1ED0                     clear_ram0:	
  4002                           ;	Called with FSR0 containing the base address, and
  4003                           ;	btemp/btemp+1 has the size to clear
  4004                           
  4005  1ED0  0064               	clrwdt	;clear the watchdog before getting into this loop
  4006  1ED1                     clrloop0:	
  4007  1ED1  0180               	clrf	0	;clear RAM location pointed to by FSR
  4008  1ED2  3101               	addfsr 0,1
  4009  1ED3  3001               	movlw	1
  4010  1ED4  02FE               	subwf	126,f
  4011  1ED5  3000               	movlw	0
  4012  1ED6  3BFF               	subwfb	127,f
  4013  1ED7  087F               	movf	127,w
  4014  1ED8  047E               	iorwf	126,w
  4015  1ED9  1903               	btfsc	3,2
  4016  1EDA  3400               	retlw	0	;all done for this memory range, return
  4017  1EDB  2ED1               	goto	clrloop0	;have we reached the end yet?
  4018                           
  4019                           	psect	cstackBANK1
  4020  00A0                     __pcstackBANK1:	
  4021  00A0                     _sprintf$1017:	
  4022                           
  4023                           ; 3 bytes @ 0x0
  4024  00A0                     	ds	3
  4025  00A3                     sprintf@ap:	
  4026                           
  4027                           ; 1 bytes @ 0x3
  4028  00A3                     	ds	1
  4029  00A4                     sprintf@flag:	
  4030                           
  4031                           ; 2 bytes @ 0x4
  4032  00A4                     	ds	2
  4033  00A6                     sprintf@width:	
  4034                           
  4035                           ; 2 bytes @ 0x6
  4036  00A6                     	ds	2
  4037  00A8                     sprintf@tmpval:	
  4038                           
  4039                           ; 4 bytes @ 0x8
  4040  00A8                     	ds	4
  4041  00AC                     sprintf@val:	
  4042                           
  4043                           ; 4 bytes @ 0xC
  4044  00AC                     	ds	4
  4045  00B0                     sprintf@exp:	
  4046                           
  4047                           ; 2 bytes @ 0x10
  4048  00B0                     	ds	2
  4049  00B2                     sprintf@fval:	
  4050                           
  4051                           ; 3 bytes @ 0x12
  4052  00B2                     	ds	3
  4053  00B5                     sprintf@sp:	
  4054                           
  4055                           ; 1 bytes @ 0x15
  4056  00B5                     	ds	1
  4057  00B6                     sprintf@prec:	
  4058                           
  4059                           ; 2 bytes @ 0x16
  4060  00B6                     	ds	2
  4061  00B8                     sprintf@c:	
  4062                           
  4063                           ; 1 bytes @ 0x18
  4064  00B8                     	ds	1
  4065  00B9                     ??_main:	
  4066                           
  4067                           ; 1 bytes @ 0x19
  4068  00B9                     	ds	10
  4069  00C3                     main@timer:	
  4070                           
  4071                           ; 2 bytes @ 0x23
  4072  00C3                     	ds	2
  4073  00C5                     main@s:	
  4074                           
  4075                           ; 8 bytes @ 0x25
  4076  00C5                     	ds	8
  4077  00CD                     main@R:	
  4078                           
  4079                           ; 3 bytes @ 0x2D
  4080  00CD                     	ds	3
  4081  00D0                     _main$1013:	
  4082                           
  4083                           ; 3 bytes @ 0x30
  4084  00D0                     	ds	3
  4085  00D3                     main@minute:	
  4086                           
  4087                           ; 2 bytes @ 0x33
  4088  00D3                     	ds	2
  4089  00D5                     main@counter:	
  4090                           
  4091                           ; 2 bytes @ 0x35
  4092  00D5                     	ds	2
  4093  00D7                     main@firstTimeThrough:	
  4094                           
  4095                           ; 1 bytes @ 0x37
  4096  00D7                     	ds	1
  4097  00D8                     main@startupTimer:	
  4098                           
  4099                           ; 1 bytes @ 0x38
  4100  00D8                     	ds	1
  4101  00D9                     main@setpoint:	
  4102                           
  4103                           ; 2 bytes @ 0x39
  4104  00D9                     	ds	2
  4105  00DB                     main@totals:	
  4106                           
  4107                           ; 4 bytes @ 0x3B
  4108  00DB                     	ds	4
  4109  00DF                     main@readTemperatureOld:	
  4110                           
  4111                           ; 2 bytes @ 0x3F
  4112  00DF                     	ds	2
  4113  00E1                     main@outCurrent:	
  4114                           
  4115                           ; 2 bytes @ 0x41
  4116  00E1                     	ds	2
  4117  00E3                     main@readTemperature:	
  4118                           
  4119                           ; 2 bytes @ 0x43
  4120  00E3                     	ds	2
  4121  00E5                     main@steinhart:	
  4122                           
  4123                           ; 3 bytes @ 0x45
  4124  00E5                     	ds	3
  4125                           
  4126                           	psect	cstackCOMMON
  4127  0070                     __pcstackCOMMON:	
  4128  0070                     ?_isdigit:	
  4129  0070                     ?_LCD_Cmd:	
  4130                           ; 1 bit 
  4131                           
  4132  0070                     ?_LCD_Write_Char:	
  4133                           ; 1 bytes @ 0x0
  4134                           
  4135  0070                     ?_OSCILLATOR_Initialize:	
  4136                           ; 1 bytes @ 0x0
  4137                           
  4138  0070                     ??_OSCILLATOR_Initialize:	
  4139                           ; 1 bytes @ 0x0
  4140                           
  4141  0070                     ?_ADCC_Initialize:	
  4142                           ; 1 bytes @ 0x0
  4143                           
  4144  0070                     ??_ADCC_Initialize:	
  4145                           ; 1 bytes @ 0x0
  4146                           
  4147  0070                     ?_PWM6_Initialize:	
  4148                           ; 1 bytes @ 0x0
  4149                           
  4150  0070                     ??_PWM6_Initialize:	
  4151                           ; 1 bytes @ 0x0
  4152                           
  4153  0070                     ?_TMR2_Initialize:	
  4154                           ; 1 bytes @ 0x0
  4155                           
  4156  0070                     ??_TMR2_Initialize:	
  4157                           ; 1 bytes @ 0x0
  4158                           
  4159  0070                     ??_isdigit:	
  4160                           ; 1 bytes @ 0x0
  4161                           
  4162  0070                     ?_InitCustomChars:	
  4163                           ; 1 bytes @ 0x0
  4164                           
  4165  0070                     ?_LCD_Port:	
  4166                           ; 1 bytes @ 0x0
  4167                           
  4168  0070                     ??_LCD_Port:	
  4169                           ; 1 bytes @ 0x0
  4170                           
  4171  0070                     ?_LCD_Clear:	
  4172                           ; 1 bytes @ 0x0
  4173                           
  4174  0070                     ?_LCD_Init:	
  4175                           ; 1 bytes @ 0x0
  4176                           
  4177  0070                     ?_LCD_Write_String:	
  4178                           ; 1 bytes @ 0x0
  4179                           
  4180  0070                     ?_PIN_MANAGER_Initialize:	
  4181                           ; 1 bytes @ 0x0
  4182                           
  4183  0070                     ??_PIN_MANAGER_Initialize:	
  4184                           ; 1 bytes @ 0x0
  4185                           
  4186  0070                     ?_SYSTEM_Initialize:	
  4187                           ; 1 bytes @ 0x0
  4188                           
  4189  0070                     ?_PWM6_LoadDutyValue:	
  4190                           ; 1 bytes @ 0x0
  4191                           
  4192  0070                     ?_main:	
  4193                           ; 1 bytes @ 0x0
  4194                           
  4195  0070                     ?_ADCC_GetSingleConversion:	
  4196                           ; 1 bytes @ 0x0
  4197                           
  4198  0070                     ?___awmod:	
  4199                           ; 2 bytes @ 0x0
  4200                           
  4201  0070                     ?___ftpack:	
  4202                           ; 2 bytes @ 0x0
  4203                           
  4204  0070                     ?_frexp:	
  4205                           ; 3 bytes @ 0x0
  4206                           
  4207  0070                     ?___ftneg:	
  4208                           ; 3 bytes @ 0x0
  4209                           
  4210  0070                     ?__tdiv_to_l_:	
  4211                           ; 3 bytes @ 0x0
  4212                           
  4213  0070                     ?__div_to_l_:	
  4214                           ; 4 bytes @ 0x0
  4215                           
  4216  0070                     ?___aldiv:	
  4217                           ; 4 bytes @ 0x0
  4218                           
  4219  0070                     ?___lldiv:	
  4220                           ; 4 bytes @ 0x0
  4221                           
  4222  0070                     LCD_Port@a:	
  4223                           ; 4 bytes @ 0x0
  4224                           
  4225  0070                     PIN_MANAGER_Initialize@state:	
  4226                           ; 1 bytes @ 0x0
  4227                           
  4228  0070                     _isdigit$727:	
  4229                           ; 1 bytes @ 0x0
  4230                           
  4231  0070                     PWM6_LoadDutyValue@dutyValue:	
  4232                           ; 1 bytes @ 0x0
  4233                           
  4234  0070                     ___awmod@divisor:	
  4235                           ; 2 bytes @ 0x0
  4236                           
  4237  0070                     __div_to_l_@f1:	
  4238                           ; 2 bytes @ 0x0
  4239                           
  4240  0070                     ___ftpack@arg:	
  4241                           ; 3 bytes @ 0x0
  4242                           
  4243  0070                     __tdiv_to_l_@f1:	
  4244                           ; 3 bytes @ 0x0
  4245                           
  4246  0070                     ___ftneg@f1:	
  4247                           ; 3 bytes @ 0x0
  4248                           
  4249  0070                     frexp@value:	
  4250                           ; 3 bytes @ 0x0
  4251                           
  4252  0070                     ___aldiv@divisor:	
  4253                           ; 3 bytes @ 0x0
  4254                           
  4255  0070                     ___lldiv@divisor:	
  4256                           ; 4 bytes @ 0x0
  4257                           
  4258                           
  4259                           ; 4 bytes @ 0x0
  4260  0070                     	ds	1
  4261  0071                     ??_LCD_Cmd:	
  4262  0071                     ??_LCD_Write_Char:	
  4263                           ; 1 bytes @ 0x1
  4264                           
  4265  0071                     isdigit@c:	
  4266                           ; 1 bytes @ 0x1
  4267                           
  4268                           
  4269                           ; 1 bytes @ 0x1
  4270  0071                     	ds	1
  4271  0072                     ??_PWM6_LoadDutyValue:	
  4272  0072                     LCD_Cmd@a:	
  4273                           ; 1 bytes @ 0x2
  4274                           
  4275  0072                     LCD_Write_Char@temp:	
  4276                           ; 1 bytes @ 0x2
  4277                           
  4278  0072                     ___awmod@dividend:	
  4279                           ; 1 bytes @ 0x2
  4280                           
  4281                           
  4282                           ; 2 bytes @ 0x2
  4283  0072                     	ds	1
  4284  0073                     ??_LCD_Clear:	
  4285  0073                     ?_LCD_Set_Cursor:	
  4286                           ; 1 bytes @ 0x3
  4287                           
  4288  0073                     ??_LCD_Init:	
  4289                           ; 1 bytes @ 0x3
  4290                           
  4291  0073                     ??_ADCC_GetSingleConversion:	
  4292                           ; 1 bytes @ 0x3
  4293                           
  4294  0073                     ??___ftneg:	
  4295                           ; 1 bytes @ 0x3
  4296                           
  4297  0073                     LCD_Set_Cursor@y:	
  4298                           ; 1 bytes @ 0x3
  4299                           
  4300  0073                     LCD_Write_Char@y:	
  4301                           ; 1 bytes @ 0x3
  4302                           
  4303  0073                     ADCC_GetSingleConversion@channel:	
  4304                           ; 1 bytes @ 0x3
  4305                           
  4306  0073                     ___ftpack@exp:	
  4307                           ; 1 bytes @ 0x3
  4308                           
  4309  0073                     frexp@eptr:	
  4310                           ; 1 bytes @ 0x3
  4311                           
  4312  0073                     __div_to_l_@f2:	
  4313                           ; 1 bytes @ 0x3
  4314                           
  4315  0073                     __tdiv_to_l_@f2:	
  4316                           ; 3 bytes @ 0x3
  4317                           
  4318                           
  4319                           ; 3 bytes @ 0x3
  4320  0073                     	ds	1
  4321  0074                     ??_frexp:	
  4322  0074                     ??_LCD_Set_Cursor:	
  4323                           ; 1 bytes @ 0x4
  4324                           
  4325  0074                     ??___awmod:	
  4326                           ; 1 bytes @ 0x4
  4327                           
  4328  0074                     LCD_Write_Char@a:	
  4329                           ; 1 bytes @ 0x4
  4330                           
  4331  0074                     ___ftpack@sign:	
  4332                           ; 1 bytes @ 0x4
  4333                           
  4334  0074                     ___aldiv@dividend:	
  4335                           ; 1 bytes @ 0x4
  4336                           
  4337  0074                     ___lldiv@dividend:	
  4338                           ; 4 bytes @ 0x4
  4339                           
  4340                           
  4341                           ; 4 bytes @ 0x4
  4342  0074                     	ds	1
  4343  0075                     ??___ftpack:	
  4344  0075                     ??_InitCustomChars:	
  4345                           ; 1 bytes @ 0x5
  4346                           
  4347  0075                     ??_LCD_Write_String:	
  4348                           ; 1 bytes @ 0x5
  4349                           
  4350  0075                     LCD_Init@style:	
  4351                           ; 1 bytes @ 0x5
  4352                           
  4353  0075                     ___awmod@counter:	
  4354                           ; 1 bytes @ 0x5
  4355                           
  4356                           
  4357                           ; 1 bytes @ 0x5
  4358  0075                     	ds	1
  4359  0076                     ??__tdiv_to_l_:	
  4360  0076                     ??__div_to_l_:	
  4361                           ; 1 bytes @ 0x6
  4362                           
  4363  0076                     InitCustomChars@i:	
  4364                           ; 1 bytes @ 0x6
  4365                           
  4366  0076                     LCD_Set_Cursor@x:	
  4367                           ; 1 bytes @ 0x6
  4368                           
  4369  0076                     ___awmod@sign:	
  4370                           ; 1 bytes @ 0x6
  4371                           
  4372  0076                     LCD_Write_String@i:	
  4373                           ; 1 bytes @ 0x6
  4374                           
  4375                           
  4376                           ; 2 bytes @ 0x6
  4377  0076                     	ds	1
  4378  0077                     ??_SYSTEM_Initialize:	
  4379  0077                     ?___awdiv:	
  4380                           ; 1 bytes @ 0x7
  4381                           
  4382  0077                     LCD_Set_Cursor@z:	
  4383                           ; 2 bytes @ 0x7
  4384                           
  4385  0077                     ___awdiv@divisor:	
  4386                           ; 1 bytes @ 0x7
  4387                           
  4388                           
  4389                           ; 2 bytes @ 0x7
  4390  0077                     	ds	1
  4391  0078                     ??___aldiv:	
  4392  0078                     ??___lldiv:	
  4393                           ; 1 bytes @ 0x8
  4394                           
  4395  0078                     ?___awtoft:	
  4396                           ; 1 bytes @ 0x8
  4397                           
  4398  0078                     ?___lltoft:	
  4399                           ; 3 bytes @ 0x8
  4400                           
  4401  0078                     ?___lwtoft:	
  4402                           ; 3 bytes @ 0x8
  4403                           
  4404  0078                     LCD_Set_Cursor@w:	
  4405                           ; 3 bytes @ 0x8
  4406                           
  4407  0078                     LCD_Write_String@a:	
  4408                           ; 1 bytes @ 0x8
  4409                           
  4410  0078                     ___awtoft@c:	
  4411                           ; 1 bytes @ 0x8
  4412                           
  4413  0078                     ___lwtoft@c:	
  4414                           ; 2 bytes @ 0x8
  4415                           
  4416  0078                     ___lltoft@c:	
  4417                           ; 2 bytes @ 0x8
  4418                           
  4419                           
  4420                           ; 4 bytes @ 0x8
  4421  0078                     	ds	1
  4422  0079                     LCD_Set_Cursor@temp:	
  4423  0079                     ___awdiv@dividend:	
  4424                           ; 1 bytes @ 0x9
  4425                           
  4426  0079                     ___lldiv@quotient:	
  4427                           ; 2 bytes @ 0x9
  4428                           
  4429                           
  4430                           ; 4 bytes @ 0x9
  4431  0079                     	ds	2
  4432  007B                     ??___awdiv:	
  4433  007B                     ??___awtoft:	
  4434                           ; 1 bytes @ 0xB
  4435                           
  4436  007B                     ??___lwtoft:	
  4437                           ; 1 bytes @ 0xB
  4438                           
  4439                           
  4440                           ; 1 bytes @ 0xB
  4441  007B                     	ds	1
  4442  007C                     ??___wmul:	
  4443  007C                     ??___lltoft:	
  4444                           ; 1 bytes @ 0xC
  4445                           
  4446  007C                     ___wmul@product:	
  4447                           ; 1 bytes @ 0xC
  4448                           
  4449                           
  4450                           ; 2 bytes @ 0xC
  4451  007C                     	ds	1
  4452  007D                     ___awtoft@sign:	
  4453  007D                     ___lldiv@counter:	
  4454                           ; 1 bytes @ 0xD
  4455                           
  4456  007D                     ___lltoft@exp:	
  4457                           ; 1 bytes @ 0xD
  4458                           
  4459                           
  4460                           ; 1 bytes @ 0xD
  4461  007D                     	ds	1
  4462  007E                     ??_eval_poly:	
  4463  007E                     ??___ftsub:	
  4464                           ; 1 bytes @ 0xE
  4465                           
  4466                           
  4467                           	psect	cstackBANK0
  4468  0020                     __pcstackBANK0:	
  4469                           ; 1 bytes @ 0xE
  4470                           
  4471  0020                     ?___ftdiv:	
  4472  0020                     ?___llmod:	
  4473                           ; 3 bytes @ 0x0
  4474                           
  4475  0020                     ___aldiv@counter:	
  4476                           ; 4 bytes @ 0x0
  4477                           
  4478  0020                     ___awdiv@counter:	
  4479                           ; 1 bytes @ 0x0
  4480                           
  4481  0020                     ___ftdiv@f2:	
  4482                           ; 1 bytes @ 0x0
  4483                           
  4484  0020                     __div_to_l_@quot:	
  4485                           ; 3 bytes @ 0x0
  4486                           
  4487  0020                     __tdiv_to_l_@quot:	
  4488                           ; 4 bytes @ 0x0
  4489                           
  4490  0020                     ___llmod@divisor:	
  4491                           ; 4 bytes @ 0x0
  4492                           
  4493                           
  4494                           ; 4 bytes @ 0x0
  4495  0020                     	ds	1
  4496  0021                     ___aldiv@sign:	
  4497  0021                     ___awdiv@sign:	
  4498                           ; 1 bytes @ 0x1
  4499                           
  4500                           
  4501                           ; 1 bytes @ 0x1
  4502  0021                     	ds	1
  4503  0022                     ___awdiv@quotient:	
  4504  0022                     ___aldiv@quotient:	
  4505                           ; 2 bytes @ 0x2
  4506                           
  4507                           
  4508                           ; 4 bytes @ 0x2
  4509  0022                     	ds	1
  4510  0023                     ___ftdiv@f1:	
  4511                           
  4512                           ; 3 bytes @ 0x3
  4513  0023                     	ds	1
  4514  0024                     ?___wmul:	
  4515  0024                     __div_to_l_@cntr:	
  4516                           ; 2 bytes @ 0x4
  4517                           
  4518  0024                     __tdiv_to_l_@cntr:	
  4519                           ; 1 bytes @ 0x4
  4520                           
  4521  0024                     ___wmul@multiplier:	
  4522                           ; 1 bytes @ 0x4
  4523                           
  4524  0024                     ___llmod@dividend:	
  4525                           ; 2 bytes @ 0x4
  4526                           
  4527                           
  4528                           ; 4 bytes @ 0x4
  4529  0024                     	ds	1
  4530  0025                     __div_to_l_@exp1:	
  4531  0025                     __tdiv_to_l_@exp1:	
  4532                           ; 1 bytes @ 0x5
  4533                           
  4534                           
  4535                           ; 1 bytes @ 0x5
  4536  0025                     	ds	1
  4537  0026                     ??___ftdiv:	
  4538  0026                     ___wmul@multiplicand:	
  4539                           ; 1 bytes @ 0x6
  4540                           
  4541                           
  4542                           ; 2 bytes @ 0x6
  4543  0026                     	ds	2
  4544  0028                     ??___llmod:	
  4545  0028                     ?___ftmul:	
  4546                           ; 1 bytes @ 0x8
  4547                           
  4548  0028                     ___ftmul@f1:	
  4549                           ; 3 bytes @ 0x8
  4550                           
  4551                           
  4552                           ; 3 bytes @ 0x8
  4553  0028                     	ds	1
  4554  0029                     ___llmod@counter:	
  4555                           
  4556                           ; 1 bytes @ 0x9
  4557  0029                     	ds	1
  4558  002A                     ___ftdiv@cntr:	
  4559                           
  4560                           ; 1 bytes @ 0xA
  4561  002A                     	ds	1
  4562  002B                     ___ftdiv@f3:	
  4563  002B                     ___ftmul@f2:	
  4564                           ; 3 bytes @ 0xB
  4565                           
  4566                           
  4567                           ; 3 bytes @ 0xB
  4568  002B                     	ds	3
  4569  002E                     ??___ftmul:	
  4570  002E                     ___ftdiv@exp:	
  4571                           ; 1 bytes @ 0xE
  4572                           
  4573                           
  4574                           ; 1 bytes @ 0xE
  4575  002E                     	ds	1
  4576  002F                     ___ftdiv@sign:	
  4577                           
  4578                           ; 1 bytes @ 0xF
  4579  002F                     	ds	3
  4580  0032                     ___ftmul@exp:	
  4581                           
  4582                           ; 1 bytes @ 0x12
  4583  0032                     	ds	1
  4584  0033                     ___ftmul@f3_as_product:	
  4585                           
  4586                           ; 3 bytes @ 0x13
  4587  0033                     	ds	3
  4588  0036                     ___ftmul@cntr:	
  4589                           
  4590                           ; 1 bytes @ 0x16
  4591  0036                     	ds	1
  4592  0037                     ___ftmul@sign:	
  4593                           
  4594                           ; 1 bytes @ 0x17
  4595  0037                     	ds	1
  4596  0038                     ?_fround:	
  4597  0038                     ?_scale:	
  4598                           ; 3 bytes @ 0x18
  4599                           
  4600                           
  4601                           ; 3 bytes @ 0x18
  4602  0038                     	ds	3
  4603  003B                     ??_fround:	
  4604  003B                     ??_scale:	
  4605                           ; 1 bytes @ 0x1B
  4606                           
  4607                           
  4608                           ; 1 bytes @ 0x1B
  4609  003B                     	ds	2
  4610  003D                     _scale$1016:	
  4611                           
  4612                           ; 3 bytes @ 0x1D
  4613  003D                     	ds	2
  4614  003F                     _fround$1015:	
  4615                           
  4616                           ; 3 bytes @ 0x1F
  4617  003F                     	ds	1
  4618  0040                     scale@scl:	
  4619                           
  4620                           ; 1 bytes @ 0x20
  4621  0040                     	ds	1
  4622  0041                     ?___fttol:	
  4623  0041                     ___fttol@f1:	
  4624                           ; 4 bytes @ 0x21
  4625                           
  4626                           
  4627                           ; 3 bytes @ 0x21
  4628  0041                     	ds	1
  4629  0042                     _fround$1014:	
  4630                           
  4631                           ; 3 bytes @ 0x22
  4632  0042                     	ds	3
  4633  0045                     ??___fttol:	
  4634  0045                     fround@prec:	
  4635                           ; 1 bytes @ 0x25
  4636                           
  4637                           
  4638                           ; 1 bytes @ 0x25
  4639  0045                     	ds	1
  4640  0046                     ?___ftadd:	
  4641  0046                     ___ftadd@f1:	
  4642                           ; 3 bytes @ 0x26
  4643                           
  4644                           
  4645                           ; 3 bytes @ 0x26
  4646  0046                     	ds	3
  4647  0049                     ___fttol@sign1:	
  4648  0049                     ___ftadd@f2:	
  4649                           ; 1 bytes @ 0x29
  4650                           
  4651                           
  4652                           ; 3 bytes @ 0x29
  4653  0049                     	ds	1
  4654  004A                     ___fttol@lval:	
  4655                           
  4656                           ; 4 bytes @ 0x2A
  4657  004A                     	ds	2
  4658  004C                     ??___ftadd:	
  4659                           
  4660                           ; 1 bytes @ 0x2C
  4661  004C                     	ds	2
  4662  004E                     ___fttol@exp1:	
  4663                           
  4664                           ; 1 bytes @ 0x2E
  4665  004E                     	ds	2
  4666  0050                     ___ftadd@sign:	
  4667                           
  4668                           ; 1 bytes @ 0x30
  4669  0050                     	ds	1
  4670  0051                     ___ftadd@exp2:	
  4671                           
  4672                           ; 1 bytes @ 0x31
  4673  0051                     	ds	1
  4674  0052                     ___ftadd@exp1:	
  4675                           
  4676                           ; 1 bytes @ 0x32
  4677  0052                     	ds	1
  4678  0053                     ?___ftge:	
  4679  0053                     ?_eval_poly:	
  4680                           ; 1 bit 
  4681                           
  4682  0053                     ?___ftsub:	
  4683                           ; 3 bytes @ 0x33
  4684                           
  4685  0053                     ___ftge@ff1:	
  4686                           ; 3 bytes @ 0x33
  4687                           
  4688  0053                     ___ftsub@f2:	
  4689                           ; 3 bytes @ 0x33
  4690                           
  4691  0053                     eval_poly@x:	
  4692                           ; 3 bytes @ 0x33
  4693                           
  4694                           
  4695                           ; 3 bytes @ 0x33
  4696  0053                     	ds	3
  4697  0056                     eval_poly@d:	
  4698  0056                     ___ftge@ff2:	
  4699                           ; 2 bytes @ 0x36
  4700                           
  4701  0056                     ___ftsub@f1:	
  4702                           ; 3 bytes @ 0x36
  4703                           
  4704                           
  4705                           ; 3 bytes @ 0x36
  4706  0056                     	ds	2
  4707  0058                     eval_poly@n:	
  4708                           
  4709                           ; 2 bytes @ 0x38
  4710  0058                     	ds	1
  4711  0059                     ??___ftge:	
  4712                           
  4713                           ; 1 bytes @ 0x39
  4714  0059                     	ds	1
  4715  005A                     eval_poly@res:	
  4716                           
  4717                           ; 3 bytes @ 0x3A
  4718  005A                     	ds	2
  4719  005C                     ?_sprintf:	
  4720  005C                     sprintf@f:	
  4721                           ; 2 bytes @ 0x3C
  4722                           
  4723                           
  4724                           ; 2 bytes @ 0x3C
  4725  005C                     	ds	1
  4726  005D                     ?_log:	
  4727  005D                     log@x:	
  4728                           ; 3 bytes @ 0x3D
  4729                           
  4730                           
  4731                           ; 3 bytes @ 0x3D
  4732  005D                     	ds	3
  4733  0060                     ??_log:	
  4734                           
  4735                           ; 1 bytes @ 0x40
  4736  0060                     	ds	1
  4737  0061                     ??_sprintf:	
  4738  0061                     log@exponent:	
  4739                           ; 1 bytes @ 0x41
  4740                           
  4741                           
  4742                           ; 2 bytes @ 0x41
  4743  0061                     	ds	6
  4744                           
  4745                           	psect	maintext
  4746  0D01                     __pmaintext:	
  4747 ;;
  4748 ;;Main: autosize = 0, tempsize = 10, incstack = 0, save=0
  4749 ;;
  4750 ;; *************** function _main *****************
  4751 ;; Defined at:
  4752 ;;		line 12 in file "main.c"
  4753 ;; Parameters:    Size  Location     Type
  4754 ;;		None
  4755 ;; Auto vars:     Size  Location     Type
  4756 ;;  s               8   37[BANK1 ] unsigned char [8]
  4757 ;;  totals          4   59[BANK1 ] long 
  4758 ;;  steinhart       3   69[BANK1 ] float 
  4759 ;;  R               3   45[BANK1 ] float 
  4760 ;;  readTemperat    2   67[BANK1 ] unsigned int 
  4761 ;;  outCurrent      2   65[BANK1 ] unsigned int 
  4762 ;;  readTemperat    2   63[BANK1 ] unsigned int 
  4763 ;;  setpoint        2   57[BANK1 ] unsigned int 
  4764 ;;  counter         2   53[BANK1 ] unsigned int 
  4765 ;;  minute          2   51[BANK1 ] unsigned int 
  4766 ;;  timer           2   35[BANK1 ] unsigned int 
  4767 ;;  startupTimer    1   56[BANK1 ] unsigned char 
  4768 ;;  firstTimeThr    1   55[BANK1 ] unsigned char 
  4769 ;; Return value:  Size  Location     Type
  4770 ;;                  1    wreg      void 
  4771 ;; Registers used:
  4772 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4773 ;; Tracked objects:
  4774 ;;		On entry : B1F/0
  4775 ;;		On exit  : 0/0
  4776 ;;		Unchanged: 0/0
  4777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4778 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4779 ;;      Locals:         0       0      37       0       0       0       0       0       0       0       0       0       
      +0       0
  4780 ;;      Temps:          0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0
  4781 ;;      Totals:         0       0      47       0       0       0       0       0       0       0       0       0       
      +0       0
  4782 ;;Total ram usage:       47 bytes
  4783 ;; Hardware stack levels required when called:    4
  4784 ;; This function calls:
  4785 ;;		_ADCC_GetSingleConversion
  4786 ;;		_LCD_Set_Cursor
  4787 ;;		_LCD_Write_Char
  4788 ;;		_LCD_Write_String
  4789 ;;		_PWM6_LoadDutyValue
  4790 ;;		_SYSTEM_Initialize
  4791 ;;		___aldiv
  4792 ;;		___ftadd
  4793 ;;		___ftdiv
  4794 ;;		___ftge
  4795 ;;		___ftneg
  4796 ;;		___ftsub
  4797 ;;		___lwtoft
  4798 ;;		_log
  4799 ;;		_sprintf
  4800 ;; This function is called by:
  4801 ;;		Startup code after reset
  4802 ;; This function uses a non-reentrant model
  4803 ;;
  4804                           
  4805                           
  4806                           ;psect for function _main
  4807  0D01                     _main:	
  4808                           
  4809                           ;main.c: 14: SYSTEM_Initialize();
  4810                           
  4811                           ;incstack = 0
  4812                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4813  0D01  3190  20A8  318D   	fcall	_SYSTEM_Initialize
  4814                           
  4815                           ;main.c: 16: uint16_t readTemperature, setpoint = 24, outCurrent = 1023, readTemperature
      +                          Old, timer = 0, counter = 0, minute = 0;
  4816  0D04  3018               	movlw	24
  4817  0D05  0021               	movlb	1	; select bank1
  4818  0D06  00D9               	movwf	main@setpoint^(0+128)
  4819  0D07  3000               	movlw	0
  4820  0D08  00DA               	movwf	(main@setpoint^(0+128)+1)
  4821  0D09  30FF               	movlw	255
  4822  0D0A  00E1               	movwf	main@outCurrent^(0+128)
  4823  0D0B  3003               	movlw	3
  4824  0D0C  00E2               	movwf	(main@outCurrent^(0+128)+1)
  4825  0D0D  01C3               	clrf	main@timer^(0+128)
  4826  0D0E  01C4               	clrf	(main@timer+1)^(0+128)
  4827  0D0F  01D5               	clrf	main@counter^(0+128)
  4828  0D10  01D6               	clrf	(main@counter+1)^(0+128)
  4829  0D11  01D3               	clrf	main@minute^(0+128)
  4830  0D12  01D4               	clrf	(main@minute+1)^(0+128)
  4831                           
  4832                           ;main.c: 18: unsigned char startupTimer = 0, firstTimeThrough = 0;
  4833  0D13  01D8               	clrf	main@startupTimer^(0+128)
  4834  0D14  01D7               	clrf	main@firstTimeThrough^(0+128)
  4835                           
  4836                           ;main.c: 20: float R, steinhart;
  4837                           ;main.c: 22: char s[8];
  4838                           ;main.c: 24: static uint16_t sampleIndex = 0;
  4839                           ;main.c: 26: int32_t totals = 0;
  4840  0D15  3000               	movlw	0
  4841  0D16  00DE               	movwf	(main@totals+3)^(0+128)
  4842  0D17  3000               	movlw	0
  4843  0D18  00DD               	movwf	(main@totals+2)^(0+128)
  4844  0D19  3000               	movlw	0
  4845  0D1A  00DC               	movwf	(main@totals+1)^(0+128)
  4846  0D1B  3000               	movlw	0
  4847  0D1C  00DB               	movwf	main@totals^(0+128)
  4848  0D1D                     l3713:	
  4849                           ;main.c: 30: while (1)
  4850                           
  4851                           
  4852                           ;main.c: 31: {
  4853                           ;main.c: 32: readTemperature = ADCC_GetSingleConversion(2);
  4854  0D1D  3002               	movlw	2
  4855  0D1E  319E  26F5  318D   	fcall	_ADCC_GetSingleConversion
  4856  0D21  0871               	movf	?_ADCC_GetSingleConversion+1,w
  4857  0D22  0021               	movlb	1	; select bank1
  4858  0D23  00E4               	movwf	(main@readTemperature+1)^(0+128)
  4859  0D24  0870               	movf	?_ADCC_GetSingleConversion,w
  4860  0D25  00E3               	movwf	main@readTemperature^(0+128)
  4861                           
  4862                           ;main.c: 34: totals = totals - samples[sampleIndex];
  4863  0D26  085B               	movf	main@totals^(0+128),w
  4864  0D27  00B9               	movwf	??_main^(0+128)
  4865  0D28  085C               	movf	(main@totals+1)^(0+128),w
  4866  0D29  00BA               	movwf	(??_main^(0+128)+1)
  4867  0D2A  085D               	movf	(main@totals+2)^(0+128),w
  4868  0D2B  00BB               	movwf	(??_main^(0+128)+2)
  4869  0D2C  085E               	movf	(main@totals+3)^(0+128),w
  4870  0D2D  00BC               	movwf	(??_main^(0+128)+3)
  4871  0D2E  0869               	movf	(main@sampleIndex+1)^(0+128),w
  4872  0D2F  00BE               	movwf	((??_main+4)^(0+128)+1)
  4873  0D30  0868               	movf	main@sampleIndex^(0+128),w
  4874  0D31  00BD               	movwf	(??_main+4)^(0+128)
  4875  0D32  35BD               	lslf	(??_main+4)^(0+128),f
  4876  0D33  0DBE               	rlf	((??_main+4)^(0+128)+1),f
  4877  0D34  308C               	movlw	140
  4878  0D35  073D               	addwf	(??_main+4)^(0+128),w
  4879  0D36  0084               	movwf	4
  4880  0D37  3023               	movlw	35
  4881  0D38  3D3E               	addwfc	(??_main+5)^(0+128),w
  4882  0D39  0085               	movwf	5
  4883  0D3A  3F00               	moviw [0]fsr0
  4884  0D3B  00BF               	movwf	(??_main+6)^(0+128)
  4885  0D3C  3F01               	moviw [1]fsr0
  4886  0D3D  00C0               	movwf	((??_main+6)^(0+128)+1)
  4887  0D3E  01C1               	clrf	((??_main+6)^(0+128)+2)
  4888  0D3F  01C2               	clrf	((??_main+6)^(0+128)+3)
  4889  0D40  09BF               	comf	(??_main+6)^(0+128),f
  4890  0D41  09C0               	comf	((??_main+6)^(0+128)+1),f
  4891  0D42  09C1               	comf	((??_main+6)^(0+128)+2),f
  4892  0D43  09C2               	comf	((??_main+6)^(0+128)+3),f
  4893  0D44  0ABF               	incf	(??_main+6)^(0+128),f
  4894  0D45  1903               	skipnz
  4895  0D46  0AC0               	incf	((??_main+6)^(0+128)+1),f
  4896  0D47  1903               	skipnz
  4897  0D48  0AC1               	incf	((??_main+6)^(0+128)+2),f
  4898  0D49  1903               	skipnz
  4899  0D4A  0AC2               	incf	((??_main+6)^(0+128)+3),f
  4900  0D4B  083F               	movf	(??_main+6)^(0+128),w
  4901  0D4C  07B9               	addwf	??_main^(0+128),f
  4902  0D4D  0840               	movf	(??_main+7)^(0+128),w
  4903  0D4E  3DBA               	addwfc	(??_main^(0+128)+1),f
  4904  0D4F  0841               	movf	(??_main+8)^(0+128),w
  4905  0D50  3DBB               	addwfc	(??_main^(0+128)+2),f
  4906  0D51  0842               	movf	(??_main+9)^(0+128),w
  4907  0D52  3DBC               	addwfc	(??_main^(0+128)+3),f
  4908  0D53  083C               	movf	(??_main+3)^(0+128),w
  4909  0D54  00DE               	movwf	(main@totals+3)^(0+128)
  4910  0D55  083B               	movf	(??_main+2)^(0+128),w
  4911  0D56  00DD               	movwf	(main@totals+2)^(0+128)
  4912  0D57  083A               	movf	(??_main+1)^(0+128),w
  4913  0D58  00DC               	movwf	(main@totals+1)^(0+128)
  4914  0D59  0839               	movf	??_main^(0+128),w
  4915  0D5A  00DB               	movwf	main@totals^(0+128)
  4916                           
  4917                           ;main.c: 36: samples[sampleIndex] = readTemperature;
  4918  0D5B  0869               	movf	(main@sampleIndex+1)^(0+128),w
  4919  0D5C  00BA               	movwf	(??_main^(0+128)+1)
  4920  0D5D  0868               	movf	main@sampleIndex^(0+128),w
  4921  0D5E  00B9               	movwf	??_main^(0+128)
  4922  0D5F  35B9               	lslf	??_main^(0+128),f
  4923  0D60  0DBA               	rlf	(??_main^(0+128)+1),f
  4924  0D61  308C               	movlw	140
  4925  0D62  00BB               	movwf	(??_main+2)^(0+128)
  4926  0D63  3023               	movlw	35
  4927  0D64  00BC               	movwf	((??_main+2)^(0+128)+1)
  4928  0D65  0839               	movf	??_main^(0+128),w
  4929  0D66  073B               	addwf	(??_main+2)^(0+128),w
  4930  0D67  0086               	movwf	6
  4931  0D68  083A               	movf	(??_main+1)^(0+128),w
  4932  0D69  3D3C               	addwfc	(??_main+3)^(0+128),w
  4933  0D6A  0087               	movwf	7
  4934  0D6B  0863               	movf	main@readTemperature^(0+128),w
  4935  0D6C  3FC0               	movwi [0]fsr1
  4936  0D6D  0864               	movf	(main@readTemperature+1)^(0+128),w
  4937  0D6E  3FC1               	movwi [1]fsr1
  4938                           
  4939                           ;main.c: 38: totals = totals + samples[sampleIndex];
  4940  0D6F  085B               	movf	main@totals^(0+128),w
  4941  0D70  00B9               	movwf	??_main^(0+128)
  4942  0D71  085C               	movf	(main@totals+1)^(0+128),w
  4943  0D72  00BA               	movwf	(??_main^(0+128)+1)
  4944  0D73  085D               	movf	(main@totals+2)^(0+128),w
  4945  0D74  00BB               	movwf	(??_main^(0+128)+2)
  4946  0D75  085E               	movf	(main@totals+3)^(0+128),w
  4947  0D76  00BC               	movwf	(??_main^(0+128)+3)
  4948  0D77  0869               	movf	(main@sampleIndex+1)^(0+128),w
  4949  0D78  00BE               	movwf	((??_main+4)^(0+128)+1)
  4950  0D79  0868               	movf	main@sampleIndex^(0+128),w
  4951  0D7A  00BD               	movwf	(??_main+4)^(0+128)
  4952  0D7B  35BD               	lslf	(??_main+4)^(0+128),f
  4953  0D7C  0DBE               	rlf	((??_main+4)^(0+128)+1),f
  4954  0D7D  308C               	movlw	140
  4955  0D7E  073D               	addwf	(??_main+4)^(0+128),w
  4956  0D7F  0084               	movwf	4
  4957  0D80  3023               	movlw	35
  4958  0D81  3D3E               	addwfc	(??_main+5)^(0+128),w
  4959  0D82  0085               	movwf	5
  4960  0D83  3F00               	moviw [0]fsr0
  4961  0D84  00BF               	movwf	(??_main+6)^(0+128)
  4962  0D85  3F01               	moviw [1]fsr0
  4963  0D86  00C0               	movwf	((??_main+6)^(0+128)+1)
  4964  0D87  01C1               	clrf	((??_main+6)^(0+128)+2)
  4965  0D88  01C2               	clrf	((??_main+6)^(0+128)+3)
  4966  0D89  083F               	movf	(??_main+6)^(0+128),w
  4967  0D8A  07B9               	addwf	??_main^(0+128),f
  4968  0D8B  0840               	movf	(??_main+7)^(0+128),w
  4969  0D8C  3DBA               	addwfc	(??_main^(0+128)+1),f
  4970  0D8D  0841               	movf	(??_main+8)^(0+128),w
  4971  0D8E  3DBB               	addwfc	(??_main^(0+128)+2),f
  4972  0D8F  0842               	movf	(??_main+9)^(0+128),w
  4973  0D90  3DBC               	addwfc	(??_main^(0+128)+3),f
  4974  0D91  083C               	movf	(??_main+3)^(0+128),w
  4975  0D92  00DE               	movwf	(main@totals+3)^(0+128)
  4976  0D93  083B               	movf	(??_main+2)^(0+128),w
  4977  0D94  00DD               	movwf	(main@totals+2)^(0+128)
  4978  0D95  083A               	movf	(??_main+1)^(0+128),w
  4979  0D96  00DC               	movwf	(main@totals+1)^(0+128)
  4980  0D97  0839               	movf	??_main^(0+128),w
  4981  0D98  00DB               	movwf	main@totals^(0+128)
  4982                           
  4983                           ;main.c: 40: sampleIndex += 1;
  4984  0D99  3001               	movlw	1
  4985  0D9A  07E8               	addwf	main@sampleIndex^(0+128),f
  4986  0D9B  3000               	movlw	0
  4987  0D9C  3DE9               	addwfc	(main@sampleIndex+1)^(0+128),f
  4988                           
  4989                           ;main.c: 42: if(sampleIndex >= 50)
  4990  0D9D  3000               	movlw	0
  4991  0D9E  0269               	subwf	(main@sampleIndex+1)^(0+128),w
  4992  0D9F  3032               	movlw	50
  4993  0DA0  1903               	skipnz
  4994  0DA1  0268               	subwf	main@sampleIndex^(0+128),w
  4995  0DA2  1C03               	skipc
  4996  0DA3  2DA6               	goto	l3727
  4997                           
  4998                           ;main.c: 43: {
  4999                           ;main.c: 44: sampleIndex = 0;
  5000  0DA4  01E8               	clrf	main@sampleIndex^(0+128)
  5001  0DA5  01E9               	clrf	(main@sampleIndex+1)^(0+128)
  5002  0DA6                     l3727:	
  5003                           
  5004                           ;main.c: 45: }
  5005                           ;main.c: 47: readTemperature = totals / 50;
  5006  0DA6  3000               	movlw	0
  5007  0DA7  00F3               	movwf	___aldiv@divisor+3
  5008  0DA8  3000               	movlw	0
  5009  0DA9  00F2               	movwf	___aldiv@divisor+2
  5010  0DAA  3000               	movlw	0
  5011  0DAB  00F1               	movwf	___aldiv@divisor+1
  5012  0DAC  3032               	movlw	50
  5013  0DAD  00F0               	movwf	___aldiv@divisor
  5014  0DAE  085E               	movf	(main@totals+3)^(0+128),w
  5015  0DAF  00F7               	movwf	___aldiv@dividend+3
  5016  0DB0  085D               	movf	(main@totals+2)^(0+128),w
  5017  0DB1  00F6               	movwf	___aldiv@dividend+2
  5018  0DB2  085C               	movf	(main@totals+1)^(0+128),w
  5019  0DB3  00F5               	movwf	___aldiv@dividend+1
  5020  0DB4  085B               	movf	main@totals^(0+128),w
  5021  0DB5  00F4               	movwf	___aldiv@dividend
  5022  0DB6  3193  23F7  318D   	fcall	___aldiv
  5023  0DB9  0871               	movf	?___aldiv+1,w
  5024  0DBA  0021               	movlb	1	; select bank1
  5025  0DBB  00E4               	movwf	(main@readTemperature+1)^(0+128)
  5026  0DBC  0870               	movf	?___aldiv,w
  5027  0DBD  00E3               	movwf	main@readTemperature^(0+128)
  5028                           
  5029                           ;main.c: 49: if(startupTimer >= 250)
  5030  0DBE  30FA               	movlw	250
  5031  0DBF  0258               	subwf	main@startupTimer^(0+128),w
  5032  0DC0  1C03               	skipc
  5033  0DC1  2DED               	goto	l3743
  5034                           
  5035                           ;main.c: 50: {
  5036                           ;main.c: 51: if(firstTimeThrough == 0)
  5037  0DC2  0857               	movf	main@firstTimeThrough^(0+128),w
  5038  0DC3  1D03               	btfss	3,2
  5039  0DC4  2DCD               	goto	l3737
  5040                           
  5041                           ;main.c: 52: {
  5042                           ;main.c: 53: readTemperatureOld = readTemperature;
  5043  0DC5  0864               	movf	(main@readTemperature+1)^(0+128),w
  5044  0DC6  00E0               	movwf	(main@readTemperatureOld+1)^(0+128)
  5045  0DC7  0863               	movf	main@readTemperature^(0+128),w
  5046  0DC8  00DF               	movwf	main@readTemperatureOld^(0+128)
  5047                           
  5048                           ;main.c: 54: firstTimeThrough +=1;
  5049  0DC9  3001               	movlw	1
  5050  0DCA  00B9               	movwf	??_main^(0+128)
  5051  0DCB  0839               	movf	??_main^(0+128),w
  5052  0DCC  07D7               	addwf	main@firstTimeThrough^(0+128),f
  5053  0DCD                     l3737:	
  5054                           
  5055                           ;main.c: 55: }
  5056                           ;main.c: 57: if(readTemperature > readTemperatureOld)
  5057  0DCD  0864               	movf	(main@readTemperature+1)^(0+128),w
  5058  0DCE  0260               	subwf	(main@readTemperatureOld+1)^(0+128),w
  5059  0DCF  1D03               	skipz
  5060  0DD0  2DD3               	goto	u4875
  5061  0DD1  0863               	movf	main@readTemperature^(0+128),w
  5062  0DD2  025F               	subwf	main@readTemperatureOld^(0+128),w
  5063  0DD3                     u4875:	
  5064  0DD3  1803               	skipnc
  5065  0DD4  2DD9               	goto	l273
  5066                           
  5067                           ;main.c: 58: {
  5068                           ;main.c: 59: readTemperatureOld += 1;
  5069  0DD5  3001               	movlw	1
  5070  0DD6  07DF               	addwf	main@readTemperatureOld^(0+128),f
  5071  0DD7  3000               	movlw	0
  5072  0DD8  3DE0               	addwfc	(main@readTemperatureOld+1)^(0+128),f
  5073  0DD9                     l273:	
  5074                           
  5075                           ;main.c: 60: }
  5076                           ;main.c: 62: if(readTemperature < readTemperatureOld)
  5077  0DD9  0860               	movf	(main@readTemperatureOld+1)^(0+128),w
  5078  0DDA  0264               	subwf	(main@readTemperature+1)^(0+128),w
  5079  0DDB  1D03               	skipz
  5080  0DDC  2DDF               	goto	u4885
  5081  0DDD  085F               	movf	main@readTemperatureOld^(0+128),w
  5082  0DDE  0263               	subwf	main@readTemperature^(0+128),w
  5083  0DDF                     u4885:	
  5084  0DDF  1803               	skipnc
  5085  0DE0  2DE5               	goto	l274
  5086                           
  5087                           ;main.c: 63: {
  5088                           ;main.c: 64: readTemperatureOld -= 1;
  5089  0DE1  3001               	movlw	1
  5090  0DE2  02DF               	subwf	main@readTemperatureOld^(0+128),f
  5091  0DE3  3000               	movlw	0
  5092  0DE4  3BE0               	subwfb	(main@readTemperatureOld+1)^(0+128),f
  5093  0DE5                     l274:	
  5094                           
  5095                           ;main.c: 65: }
  5096                           ;main.c: 67: readTemperature = readTemperatureOld;
  5097  0DE5  0860               	movf	(main@readTemperatureOld+1)^(0+128),w
  5098  0DE6  00E4               	movwf	(main@readTemperature+1)^(0+128)
  5099  0DE7  085F               	movf	main@readTemperatureOld^(0+128),w
  5100  0DE8  00E3               	movwf	main@readTemperature^(0+128)
  5101                           
  5102                           ;main.c: 69: startupTimer = 249;
  5103  0DE9  30F9               	movlw	249
  5104  0DEA  00B9               	movwf	??_main^(0+128)
  5105  0DEB  0839               	movf	??_main^(0+128),w
  5106  0DEC  00D8               	movwf	main@startupTimer^(0+128)
  5107  0DED                     l3743:	
  5108                           
  5109                           ;main.c: 70: }
  5110                           ;main.c: 74: if(setpoint > steinhart)
  5111  0DED  0865               	movf	main@steinhart^(0+128),w
  5112  0DEE  0020               	movlb	0	; select bank0
  5113  0DEF  00D3               	movwf	___ftge@ff1
  5114  0DF0  0021               	movlb	1	; select bank1
  5115  0DF1  0866               	movf	(main@steinhart+1)^(0+128),w
  5116  0DF2  0020               	movlb	0	; select bank0
  5117  0DF3  00D4               	movwf	___ftge@ff1+1
  5118  0DF4  0021               	movlb	1	; select bank1
  5119  0DF5  0867               	movf	(main@steinhart+2)^(0+128),w
  5120  0DF6  0020               	movlb	0	; select bank0
  5121  0DF7  00D5               	movwf	___ftge@ff1+2
  5122  0DF8  0021               	movlb	1	; select bank1
  5123  0DF9  085A               	movf	(main@setpoint+1)^(0+128),w
  5124  0DFA  00F9               	movwf	___lwtoft@c+1
  5125  0DFB  0859               	movf	main@setpoint^(0+128),w
  5126  0DFC  00F8               	movwf	___lwtoft@c
  5127  0DFD  319F  272F  318D   	fcall	___lwtoft
  5128  0E00  0878               	movf	?___lwtoft,w
  5129  0E01  0020               	movlb	0	; select bank0
  5130  0E02  00D6               	movwf	___ftge@ff2
  5131  0E03  0879               	movf	?___lwtoft+1,w
  5132  0E04  00D7               	movwf	___ftge@ff2+1
  5133  0E05  087A               	movf	?___lwtoft+2,w
  5134  0E06  00D8               	movwf	___ftge@ff2+2
  5135  0E07  3190  20DF  318D   	fcall	___ftge
  5136  0E0A  1803               	btfsc	3,0
  5137  0E0B  2E1D               	goto	l3751
  5138                           
  5139                           ;main.c: 75: {
  5140                           ;main.c: 76: if(outCurrent < 1022)
  5141  0E0C  3003               	movlw	3
  5142  0E0D  0021               	movlb	1	; select bank1
  5143  0E0E  0262               	subwf	(main@outCurrent+1)^(0+128),w
  5144  0E0F  30FE               	movlw	254
  5145  0E10  1903               	skipnz
  5146  0E11  0261               	subwf	main@outCurrent^(0+128),w
  5147  0E12  1803               	skipnc
  5148  0E13  2E19               	goto	l3749
  5149                           
  5150                           ;main.c: 77: {
  5151                           ;main.c: 78: outCurrent++;
  5152  0E14  3001               	movlw	1
  5153  0E15  07E1               	addwf	main@outCurrent^(0+128),f
  5154  0E16  3000               	movlw	0
  5155  0E17  3DE2               	addwfc	(main@outCurrent+1)^(0+128),f
  5156                           
  5157                           ;main.c: 79: }
  5158  0E18  2E1D               	goto	l3751
  5159  0E19                     l3749:	
  5160                           
  5161                           ;main.c: 80: else
  5162                           ;main.c: 81: {
  5163                           ;main.c: 82: outCurrent = 1023;
  5164  0E19  30FF               	movlw	255
  5165  0E1A  00E1               	movwf	main@outCurrent^(0+128)
  5166  0E1B  3003               	movlw	3
  5167  0E1C  00E2               	movwf	(main@outCurrent^(0+128)+1)
  5168  0E1D                     l3751:	
  5169                           
  5170                           ;main.c: 83: }
  5171                           ;main.c: 84: }
  5172                           ;main.c: 86: if(setpoint < steinhart)
  5173  0E1D  0021               	movlb	1	; select bank1
  5174  0E1E  085A               	movf	(main@setpoint+1)^(0+128),w
  5175  0E1F  00F9               	movwf	___lwtoft@c+1
  5176  0E20  0859               	movf	main@setpoint^(0+128),w
  5177  0E21  00F8               	movwf	___lwtoft@c
  5178  0E22  319F  272F  318D   	fcall	___lwtoft
  5179  0E25  0878               	movf	?___lwtoft,w
  5180  0E26  0020               	movlb	0	; select bank0
  5181  0E27  00D3               	movwf	___ftge@ff1
  5182  0E28  0879               	movf	?___lwtoft+1,w
  5183  0E29  00D4               	movwf	___ftge@ff1+1
  5184  0E2A  087A               	movf	?___lwtoft+2,w
  5185  0E2B  00D5               	movwf	___ftge@ff1+2
  5186  0E2C  0021               	movlb	1	; select bank1
  5187  0E2D  0865               	movf	main@steinhart^(0+128),w
  5188  0E2E  0020               	movlb	0	; select bank0
  5189  0E2F  00D6               	movwf	___ftge@ff2
  5190  0E30  0021               	movlb	1	; select bank1
  5191  0E31  0866               	movf	(main@steinhart+1)^(0+128),w
  5192  0E32  0020               	movlb	0	; select bank0
  5193  0E33  00D7               	movwf	___ftge@ff2+1
  5194  0E34  0021               	movlb	1	; select bank1
  5195  0E35  0867               	movf	(main@steinhart+2)^(0+128),w
  5196  0E36  0020               	movlb	0	; select bank0
  5197  0E37  00D8               	movwf	___ftge@ff2+2
  5198  0E38  3190  20DF  318D   	fcall	___ftge
  5199  0E3B  1803               	btfsc	3,0
  5200  0E3C  2E4C               	goto	l3759
  5201                           
  5202                           ;main.c: 87: {
  5203                           ;main.c: 88: if(outCurrent > 1)
  5204  0E3D  3000               	movlw	0
  5205  0E3E  0021               	movlb	1	; select bank1
  5206  0E3F  0262               	subwf	(main@outCurrent+1)^(0+128),w
  5207  0E40  3002               	movlw	2
  5208  0E41  1903               	skipnz
  5209  0E42  0261               	subwf	main@outCurrent^(0+128),w
  5210  0E43  1C03               	skipc
  5211  0E44  2E4A               	goto	l3757
  5212                           
  5213                           ;main.c: 89: {
  5214                           ;main.c: 90: outCurrent-=1;
  5215  0E45  3001               	movlw	1
  5216  0E46  02E1               	subwf	main@outCurrent^(0+128),f
  5217  0E47  3000               	movlw	0
  5218  0E48  3BE2               	subwfb	(main@outCurrent+1)^(0+128),f
  5219                           
  5220                           ;main.c: 91: }
  5221  0E49  2E4C               	goto	l3759
  5222  0E4A                     l3757:	
  5223                           
  5224                           ;main.c: 92: else
  5225                           ;main.c: 93: {
  5226                           ;main.c: 94: outCurrent = 0;
  5227  0E4A  01E1               	clrf	main@outCurrent^(0+128)
  5228  0E4B  01E2               	clrf	(main@outCurrent+1)^(0+128)
  5229  0E4C                     l3759:	
  5230                           
  5231                           ;main.c: 95: }
  5232                           ;main.c: 96: }
  5233                           ;main.c: 98: PWM6_LoadDutyValue(outCurrent);
  5234  0E4C  0021               	movlb	1	; select bank1
  5235  0E4D  0862               	movf	(main@outCurrent+1)^(0+128),w
  5236  0E4E  00F1               	movwf	PWM6_LoadDutyValue@dutyValue+1
  5237  0E4F  0861               	movf	main@outCurrent^(0+128),w
  5238  0E50  00F0               	movwf	PWM6_LoadDutyValue@dutyValue
  5239  0E51  3180  2005  318D   	fcall	_PWM6_LoadDutyValue
  5240                           
  5241                           ;main.c: 100: R = 10200/(1023/(float)readTemperature - 1);
  5242  0E54  3000               	movlw	0
  5243  0E55  0020               	movlb	0	; select bank0
  5244  0E56  00C6               	movwf	___ftadd@f1
  5245  0E57  3080               	movlw	128
  5246  0E58  00C7               	movwf	___ftadd@f1+1
  5247  0E59  30BF               	movlw	191
  5248  0E5A  00C8               	movwf	___ftadd@f1+2
  5249  0E5B  0021               	movlb	1	; select bank1
  5250  0E5C  0864               	movf	(main@readTemperature+1)^(0+128),w
  5251  0E5D  00F9               	movwf	___lwtoft@c+1
  5252  0E5E  0863               	movf	main@readTemperature^(0+128),w
  5253  0E5F  00F8               	movwf	___lwtoft@c
  5254  0E60  319F  272F  318D   	fcall	___lwtoft
  5255  0E63  0878               	movf	?___lwtoft,w
  5256  0E64  0020               	movlb	0	; select bank0
  5257  0E65  00A0               	movwf	___ftdiv@f2
  5258  0E66  0879               	movf	?___lwtoft+1,w
  5259  0E67  00A1               	movwf	___ftdiv@f2+1
  5260  0E68  087A               	movf	?___lwtoft+2,w
  5261  0E69  00A2               	movwf	___ftdiv@f2+2
  5262  0E6A  30C0               	movlw	192
  5263  0E6B  00A3               	movwf	___ftdiv@f1
  5264  0E6C  307F               	movlw	127
  5265  0E6D  00A4               	movwf	___ftdiv@f1+1
  5266  0E6E  3044               	movlw	68
  5267  0E6F  00A5               	movwf	___ftdiv@f1+2
  5268  0E70  3195  2500  318D   	fcall	___ftdiv
  5269  0E73  0020               	movlb	0	; select bank0
  5270  0E74  0820               	movf	?___ftdiv,w
  5271  0E75  00C9               	movwf	___ftadd@f2
  5272  0E76  0821               	movf	?___ftdiv+1,w
  5273  0E77  00CA               	movwf	___ftadd@f2+1
  5274  0E78  0822               	movf	?___ftdiv+2,w
  5275  0E79  00CB               	movwf	___ftadd@f2+2
  5276  0E7A  3197  270A  318D   	fcall	___ftadd
  5277  0E7D  0020               	movlb	0	; select bank0
  5278  0E7E  0846               	movf	?___ftadd,w
  5279  0E7F  0021               	movlb	1	; select bank1
  5280  0E80  00D0               	movwf	_main$1013^(0+128)
  5281  0E81  0020               	movlb	0	; select bank0
  5282  0E82  0847               	movf	?___ftadd+1,w
  5283  0E83  0021               	movlb	1	; select bank1
  5284  0E84  00D1               	movwf	(_main$1013+1)^(0+128)
  5285  0E85  0020               	movlb	0	; select bank0
  5286  0E86  0848               	movf	?___ftadd+2,w
  5287  0E87  0021               	movlb	1	; select bank1
  5288  0E88  00D2               	movwf	(_main$1013+2)^(0+128)
  5289                           
  5290                           ;main.c: 100: R = 10200/(1023/(float)readTemperature - 1);
  5291  0E89  0850               	movf	_main$1013^(0+128),w
  5292  0E8A  0020               	movlb	0	; select bank0
  5293  0E8B  00A0               	movwf	___ftdiv@f2
  5294  0E8C  0021               	movlb	1	; select bank1
  5295  0E8D  0851               	movf	(_main$1013+1)^(0+128),w
  5296  0E8E  0020               	movlb	0	; select bank0
  5297  0E8F  00A1               	movwf	___ftdiv@f2+1
  5298  0E90  0021               	movlb	1	; select bank1
  5299  0E91  0852               	movf	(_main$1013+2)^(0+128),w
  5300  0E92  0020               	movlb	0	; select bank0
  5301  0E93  00A2               	movwf	___ftdiv@f2+2
  5302  0E94  3060               	movlw	96
  5303  0E95  00A3               	movwf	___ftdiv@f1
  5304  0E96  301F               	movlw	31
  5305  0E97  00A4               	movwf	___ftdiv@f1+1
  5306  0E98  3046               	movlw	70
  5307  0E99  00A5               	movwf	___ftdiv@f1+2
  5308  0E9A  3195  2500  318D   	fcall	___ftdiv
  5309  0E9D  0020               	movlb	0	; select bank0
  5310  0E9E  0820               	movf	?___ftdiv,w
  5311  0E9F  0021               	movlb	1	; select bank1
  5312  0EA0  00CD               	movwf	main@R^(0+128)
  5313  0EA1  0020               	movlb	0	; select bank0
  5314  0EA2  0821               	movf	?___ftdiv+1,w
  5315  0EA3  0021               	movlb	1	; select bank1
  5316  0EA4  00CE               	movwf	(main@R+1)^(0+128)
  5317  0EA5  0020               	movlb	0	; select bank0
  5318  0EA6  0822               	movf	?___ftdiv+2,w
  5319  0EA7  0021               	movlb	1	; select bank1
  5320  0EA8  00CF               	movwf	(main@R+2)^(0+128)
  5321                           
  5322                           ;main.c: 102: steinhart = R /10061;
  5323  0EA9  3034               	movlw	52
  5324  0EAA  0020               	movlb	0	; select bank0
  5325  0EAB  00A0               	movwf	___ftdiv@f2
  5326  0EAC  301D               	movlw	29
  5327  0EAD  00A1               	movwf	___ftdiv@f2+1
  5328  0EAE  3046               	movlw	70
  5329  0EAF  00A2               	movwf	___ftdiv@f2+2
  5330  0EB0  0021               	movlb	1	; select bank1
  5331  0EB1  084D               	movf	main@R^(0+128),w
  5332  0EB2  0020               	movlb	0	; select bank0
  5333  0EB3  00A3               	movwf	___ftdiv@f1
  5334  0EB4  0021               	movlb	1	; select bank1
  5335  0EB5  084E               	movf	(main@R+1)^(0+128),w
  5336  0EB6  0020               	movlb	0	; select bank0
  5337  0EB7  00A4               	movwf	___ftdiv@f1+1
  5338  0EB8  0021               	movlb	1	; select bank1
  5339  0EB9  084F               	movf	(main@R+2)^(0+128),w
  5340  0EBA  0020               	movlb	0	; select bank0
  5341  0EBB  00A5               	movwf	___ftdiv@f1+2
  5342  0EBC  3195  2500  318D   	fcall	___ftdiv
  5343  0EBF  0020               	movlb	0	; select bank0
  5344  0EC0  0820               	movf	?___ftdiv,w
  5345  0EC1  0021               	movlb	1	; select bank1
  5346  0EC2  00E5               	movwf	main@steinhart^(0+128)
  5347  0EC3  0020               	movlb	0	; select bank0
  5348  0EC4  0821               	movf	?___ftdiv+1,w
  5349  0EC5  0021               	movlb	1	; select bank1
  5350  0EC6  00E6               	movwf	(main@steinhart+1)^(0+128)
  5351  0EC7  0020               	movlb	0	; select bank0
  5352  0EC8  0822               	movf	?___ftdiv+2,w
  5353  0EC9  0021               	movlb	1	; select bank1
  5354  0ECA  00E7               	movwf	(main@steinhart+2)^(0+128)
  5355                           
  5356                           ;main.c: 103: steinhart = log(steinhart);
  5357  0ECB  0865               	movf	main@steinhart^(0+128),w
  5358  0ECC  0020               	movlb	0	; select bank0
  5359  0ECD  00DD               	movwf	log@x
  5360  0ECE  0021               	movlb	1	; select bank1
  5361  0ECF  0866               	movf	(main@steinhart+1)^(0+128),w
  5362  0ED0  0020               	movlb	0	; select bank0
  5363  0ED1  00DE               	movwf	log@x+1
  5364  0ED2  0021               	movlb	1	; select bank1
  5365  0ED3  0867               	movf	(main@steinhart+2)^(0+128),w
  5366  0ED4  0020               	movlb	0	; select bank0
  5367  0ED5  00DF               	movwf	log@x+2
  5368  0ED6  3195  25A9  318D   	fcall	_log
  5369  0ED9  0020               	movlb	0	; select bank0
  5370  0EDA  085D               	movf	?_log,w
  5371  0EDB  0021               	movlb	1	; select bank1
  5372  0EDC  00E5               	movwf	main@steinhart^(0+128)
  5373  0EDD  0020               	movlb	0	; select bank0
  5374  0EDE  085E               	movf	?_log+1,w
  5375  0EDF  0021               	movlb	1	; select bank1
  5376  0EE0  00E6               	movwf	(main@steinhart+1)^(0+128)
  5377  0EE1  0020               	movlb	0	; select bank0
  5378  0EE2  085F               	movf	?_log+2,w
  5379  0EE3  0021               	movlb	1	; select bank1
  5380  0EE4  00E7               	movwf	(main@steinhart+2)^(0+128)
  5381                           
  5382                           ;main.c: 104: steinhart /= 3995;
  5383  0EE5  30B0               	movlw	176
  5384  0EE6  0020               	movlb	0	; select bank0
  5385  0EE7  00A0               	movwf	___ftdiv@f2
  5386  0EE8  3079               	movlw	121
  5387  0EE9  00A1               	movwf	___ftdiv@f2+1
  5388  0EEA  3045               	movlw	69
  5389  0EEB  00A2               	movwf	___ftdiv@f2+2
  5390  0EEC  0021               	movlb	1	; select bank1
  5391  0EED  0865               	movf	main@steinhart^(0+128),w
  5392  0EEE  0020               	movlb	0	; select bank0
  5393  0EEF  00A3               	movwf	___ftdiv@f1
  5394  0EF0  0021               	movlb	1	; select bank1
  5395  0EF1  0866               	movf	(main@steinhart+1)^(0+128),w
  5396  0EF2  0020               	movlb	0	; select bank0
  5397  0EF3  00A4               	movwf	___ftdiv@f1+1
  5398  0EF4  0021               	movlb	1	; select bank1
  5399  0EF5  0867               	movf	(main@steinhart+2)^(0+128),w
  5400  0EF6  0020               	movlb	0	; select bank0
  5401  0EF7  00A5               	movwf	___ftdiv@f1+2
  5402  0EF8  3195  2500  318D   	fcall	___ftdiv
  5403  0EFB  0020               	movlb	0	; select bank0
  5404  0EFC  0820               	movf	?___ftdiv,w
  5405  0EFD  0021               	movlb	1	; select bank1
  5406  0EFE  00E5               	movwf	main@steinhart^(0+128)
  5407  0EFF  0020               	movlb	0	; select bank0
  5408  0F00  0821               	movf	?___ftdiv+1,w
  5409  0F01  0021               	movlb	1	; select bank1
  5410  0F02  00E6               	movwf	(main@steinhart+1)^(0+128)
  5411  0F03  0020               	movlb	0	; select bank0
  5412  0F04  0822               	movf	?___ftdiv+2,w
  5413  0F05  0021               	movlb	1	; select bank1
  5414  0F06  00E7               	movwf	(main@steinhart+2)^(0+128)
  5415                           
  5416                           ;main.c: 105: steinhart += 1.0 / (25 + 273.15);
  5417  0F07  30CF               	movlw	207
  5418  0F08  0020               	movlb	0	; select bank0
  5419  0F09  00C6               	movwf	___ftadd@f1
  5420  0F0A  305B               	movlw	91
  5421  0F0B  00C7               	movwf	___ftadd@f1+1
  5422  0F0C  303B               	movlw	59
  5423  0F0D  00C8               	movwf	___ftadd@f1+2
  5424  0F0E  0021               	movlb	1	; select bank1
  5425  0F0F  0865               	movf	main@steinhart^(0+128),w
  5426  0F10  0020               	movlb	0	; select bank0
  5427  0F11  00C9               	movwf	___ftadd@f2
  5428  0F12  0021               	movlb	1	; select bank1
  5429  0F13  0866               	movf	(main@steinhart+1)^(0+128),w
  5430  0F14  0020               	movlb	0	; select bank0
  5431  0F15  00CA               	movwf	___ftadd@f2+1
  5432  0F16  0021               	movlb	1	; select bank1
  5433  0F17  0867               	movf	(main@steinhart+2)^(0+128),w
  5434  0F18  0020               	movlb	0	; select bank0
  5435  0F19  00CB               	movwf	___ftadd@f2+2
  5436  0F1A  3197  270A  318D   	fcall	___ftadd
  5437  0F1D  0020               	movlb	0	; select bank0
  5438  0F1E  0846               	movf	?___ftadd,w
  5439  0F1F  0021               	movlb	1	; select bank1
  5440  0F20  00E5               	movwf	main@steinhart^(0+128)
  5441  0F21  0020               	movlb	0	; select bank0
  5442  0F22  0847               	movf	?___ftadd+1,w
  5443  0F23  0021               	movlb	1	; select bank1
  5444  0F24  00E6               	movwf	(main@steinhart+1)^(0+128)
  5445  0F25  0020               	movlb	0	; select bank0
  5446  0F26  0848               	movf	?___ftadd+2,w
  5447  0F27  0021               	movlb	1	; select bank1
  5448  0F28  00E7               	movwf	(main@steinhart+2)^(0+128)
  5449                           
  5450                           ;main.c: 106: steinhart = 1.0 / steinhart;
  5451  0F29  0865               	movf	main@steinhart^(0+128),w
  5452  0F2A  0020               	movlb	0	; select bank0
  5453  0F2B  00A0               	movwf	___ftdiv@f2
  5454  0F2C  0021               	movlb	1	; select bank1
  5455  0F2D  0866               	movf	(main@steinhart+1)^(0+128),w
  5456  0F2E  0020               	movlb	0	; select bank0
  5457  0F2F  00A1               	movwf	___ftdiv@f2+1
  5458  0F30  0021               	movlb	1	; select bank1
  5459  0F31  0867               	movf	(main@steinhart+2)^(0+128),w
  5460  0F32  0020               	movlb	0	; select bank0
  5461  0F33  00A2               	movwf	___ftdiv@f2+2
  5462  0F34  3000               	movlw	0
  5463  0F35  00A3               	movwf	___ftdiv@f1
  5464  0F36  3080               	movlw	128
  5465  0F37  00A4               	movwf	___ftdiv@f1+1
  5466  0F38  303F               	movlw	63
  5467  0F39  00A5               	movwf	___ftdiv@f1+2
  5468  0F3A  3195  2500  318D   	fcall	___ftdiv
  5469  0F3D  0020               	movlb	0	; select bank0
  5470  0F3E  0820               	movf	?___ftdiv,w
  5471  0F3F  0021               	movlb	1	; select bank1
  5472  0F40  00E5               	movwf	main@steinhart^(0+128)
  5473  0F41  0020               	movlb	0	; select bank0
  5474  0F42  0821               	movf	?___ftdiv+1,w
  5475  0F43  0021               	movlb	1	; select bank1
  5476  0F44  00E6               	movwf	(main@steinhart+1)^(0+128)
  5477  0F45  0020               	movlb	0	; select bank0
  5478  0F46  0822               	movf	?___ftdiv+2,w
  5479  0F47  0021               	movlb	1	; select bank1
  5480  0F48  00E7               	movwf	(main@steinhart+2)^(0+128)
  5481                           
  5482                           ;main.c: 107: steinhart -= 273.15;
  5483  0F49  3093               	movlw	147
  5484  0F4A  0020               	movlb	0	; select bank0
  5485  0F4B  00D3               	movwf	___ftsub@f2
  5486  0F4C  3088               	movlw	136
  5487  0F4D  00D4               	movwf	___ftsub@f2+1
  5488  0F4E  3043               	movlw	67
  5489  0F4F  00D5               	movwf	___ftsub@f2+2
  5490  0F50  0021               	movlb	1	; select bank1
  5491  0F51  0865               	movf	main@steinhart^(0+128),w
  5492  0F52  0020               	movlb	0	; select bank0
  5493  0F53  00D6               	movwf	___ftsub@f1
  5494  0F54  0021               	movlb	1	; select bank1
  5495  0F55  0866               	movf	(main@steinhart+1)^(0+128),w
  5496  0F56  0020               	movlb	0	; select bank0
  5497  0F57  00D7               	movwf	___ftsub@f1+1
  5498  0F58  0021               	movlb	1	; select bank1
  5499  0F59  0867               	movf	(main@steinhart+2)^(0+128),w
  5500  0F5A  0020               	movlb	0	; select bank0
  5501  0F5B  00D8               	movwf	___ftsub@f1+2
  5502  0F5C  319F  27C2  318D   	fcall	___ftsub
  5503  0F5F  0020               	movlb	0	; select bank0
  5504  0F60  0853               	movf	?___ftsub,w
  5505  0F61  0021               	movlb	1	; select bank1
  5506  0F62  00E5               	movwf	main@steinhart^(0+128)
  5507  0F63  0020               	movlb	0	; select bank0
  5508  0F64  0854               	movf	?___ftsub+1,w
  5509  0F65  0021               	movlb	1	; select bank1
  5510  0F66  00E6               	movwf	(main@steinhart+1)^(0+128)
  5511  0F67  0020               	movlb	0	; select bank0
  5512  0F68  0855               	movf	?___ftsub+2,w
  5513  0F69  0021               	movlb	1	; select bank1
  5514  0F6A  00E7               	movwf	(main@steinhart+2)^(0+128)
  5515                           
  5516                           ;main.c: 127: sprintf(s,"%3.1f", steinhart );
  5517  0F6B  3091               	movlw	low (STR_1| (0+32768))
  5518  0F6C  0020               	movlb	0	; select bank0
  5519  0F6D  00DC               	movwf	sprintf@f
  5520  0F6E  3098               	movlw	high (STR_1| (0+32768))
  5521  0F6F  00DD               	movwf	sprintf@f+1
  5522  0F70  0021               	movlb	1	; select bank1
  5523  0F71  0865               	movf	main@steinhart^(0+128),w
  5524  0F72  0020               	movlb	0	; select bank0
  5525  0F73  00DE               	movwf	?_sprintf+2
  5526  0F74  0021               	movlb	1	; select bank1
  5527  0F75  0866               	movf	(main@steinhart+1)^(0+128),w
  5528  0F76  0020               	movlb	0	; select bank0
  5529  0F77  00DF               	movwf	?_sprintf+3
  5530  0F78  0021               	movlb	1	; select bank1
  5531  0F79  0867               	movf	(main@steinhart+2)^(0+128),w
  5532  0F7A  0020               	movlb	0	; select bank0
  5533  0F7B  00E0               	movwf	?_sprintf+4
  5534  0F7C  30C5               	movlw	(low (main@s| 0))& (0+255)
  5535  0F7D  3180  20D1  318D   	fcall	_sprintf
  5536                           
  5537                           ;main.c: 128: LCD_Set_Cursor(0,0);
  5538  0F80  01F3               	clrf	LCD_Set_Cursor@y
  5539  0F81  3000               	movlw	0
  5540  0F82  3193  2378  318D   	fcall	_LCD_Set_Cursor
  5541                           
  5542                           ;main.c: 129: LCD_Write_String(s);
  5543  0F85  30C5               	movlw	(low (main@s| 0))& (0+255)
  5544  0F86  319F  278B  318D   	fcall	_LCD_Write_String
  5545                           
  5546                           ;main.c: 130: LCD_Write_Char(0);
  5547  0F89  3000               	movlw	0
  5548  0F8A  3190  2006  318D   	fcall	_LCD_Write_Char
  5549                           
  5550                           ;main.c: 131: LCD_Write_Char('C');
  5551  0F8D  3043               	movlw	67
  5552  0F8E  3190  2006  318D   	fcall	_LCD_Write_Char
  5553                           
  5554                           ;main.c: 132: LCD_Write_Char(' ');
  5555  0F91  3020               	movlw	32
  5556  0F92  3190  2006  318D   	fcall	_LCD_Write_Char
  5557                           
  5558                           ;main.c: 133: LCD_Write_Char(' ');
  5559  0F95  3020               	movlw	32
  5560  0F96  3190  2006  318D   	fcall	_LCD_Write_Char
  5561                           
  5562                           ;main.c: 135: sprintf(s,"%d  ", minute);
  5563  0F99  3097               	movlw	low (STR_2| (0+32768))
  5564  0F9A  0020               	movlb	0	; select bank0
  5565  0F9B  00DC               	movwf	sprintf@f
  5566  0F9C  3098               	movlw	high (STR_2| (0+32768))
  5567  0F9D  00DD               	movwf	sprintf@f+1
  5568  0F9E  0021               	movlb	1	; select bank1
  5569  0F9F  0854               	movf	(main@minute+1)^(0+128),w
  5570  0FA0  0020               	movlb	0	; select bank0
  5571  0FA1  00DF               	movwf	?_sprintf+3
  5572  0FA2  0021               	movlb	1	; select bank1
  5573  0FA3  0853               	movf	main@minute^(0+128),w
  5574  0FA4  0020               	movlb	0	; select bank0
  5575  0FA5  00DE               	movwf	?_sprintf+2
  5576  0FA6  30C5               	movlw	(low (main@s| 0))& (0+255)
  5577  0FA7  3180  20D1  318D   	fcall	_sprintf
  5578                           
  5579                           ;main.c: 136: LCD_Set_Cursor(1,0);
  5580  0FAA  01F3               	clrf	LCD_Set_Cursor@y
  5581  0FAB  3001               	movlw	1
  5582  0FAC  3193  2378  318D   	fcall	_LCD_Set_Cursor
  5583                           
  5584                           ;main.c: 137: LCD_Write_String(s);
  5585  0FAF  30C5               	movlw	(low (main@s| 0))& (0+255)
  5586  0FB0  319F  278B  318D   	fcall	_LCD_Write_String
  5587                           
  5588                           ;main.c: 139: startupTimer +=1;
  5589  0FB3  3001               	movlw	1
  5590  0FB4  0021               	movlb	1	; select bank1
  5591  0FB5  00B9               	movwf	??_main^(0+128)
  5592  0FB6  0839               	movf	??_main^(0+128),w
  5593  0FB7  07D8               	addwf	main@startupTimer^(0+128),f
  5594                           
  5595                           ;main.c: 140: counter+=1;
  5596  0FB8  3001               	movlw	1
  5597  0FB9  07D5               	addwf	main@counter^(0+128),f
  5598  0FBA  3000               	movlw	0
  5599  0FBB  3DD6               	addwfc	(main@counter+1)^(0+128),f
  5600                           
  5601                           ;main.c: 142: if(setpoint - steinhart < 2)
  5602  0FBC  0865               	movf	main@steinhart^(0+128),w
  5603  0FBD  00F0               	movwf	___ftneg@f1
  5604  0FBE  0866               	movf	(main@steinhart+1)^(0+128),w
  5605  0FBF  00F1               	movwf	___ftneg@f1+1
  5606  0FC0  0867               	movf	(main@steinhart+2)^(0+128),w
  5607  0FC1  00F2               	movwf	___ftneg@f1+2
  5608  0FC2  319E  26C8  318D   	fcall	___ftneg
  5609  0FC5  0870               	movf	?___ftneg,w
  5610  0FC6  0020               	movlb	0	; select bank0
  5611  0FC7  00C6               	movwf	___ftadd@f1
  5612  0FC8  0871               	movf	?___ftneg+1,w
  5613  0FC9  00C7               	movwf	___ftadd@f1+1
  5614  0FCA  0872               	movf	?___ftneg+2,w
  5615  0FCB  00C8               	movwf	___ftadd@f1+2
  5616  0FCC  0021               	movlb	1	; select bank1
  5617  0FCD  085A               	movf	(main@setpoint+1)^(0+128),w
  5618  0FCE  00F9               	movwf	___lwtoft@c+1
  5619  0FCF  0859               	movf	main@setpoint^(0+128),w
  5620  0FD0  00F8               	movwf	___lwtoft@c
  5621  0FD1  319F  272F  318D   	fcall	___lwtoft
  5622  0FD4  0878               	movf	?___lwtoft,w
  5623  0FD5  0020               	movlb	0	; select bank0
  5624  0FD6  00C9               	movwf	___ftadd@f2
  5625  0FD7  0879               	movf	?___lwtoft+1,w
  5626  0FD8  00CA               	movwf	___ftadd@f2+1
  5627  0FD9  087A               	movf	?___lwtoft+2,w
  5628  0FDA  00CB               	movwf	___ftadd@f2+2
  5629  0FDB  3197  270A  318D   	fcall	___ftadd
  5630  0FDE  0020               	movlb	0	; select bank0
  5631  0FDF  0846               	movf	?___ftadd,w
  5632  0FE0  00D3               	movwf	___ftge@ff1
  5633  0FE1  0847               	movf	?___ftadd+1,w
  5634  0FE2  00D4               	movwf	___ftge@ff1+1
  5635  0FE3  0848               	movf	?___ftadd+2,w
  5636  0FE4  00D5               	movwf	___ftge@ff1+2
  5637  0FE5  3000               	movlw	0
  5638  0FE6  00D6               	movwf	___ftge@ff2
  5639  0FE7  3000               	movlw	0
  5640  0FE8  00D7               	movwf	___ftge@ff2+1
  5641  0FE9  3040               	movlw	64
  5642  0FEA  00D8               	movwf	___ftge@ff2+2
  5643  0FEB  3190  20DF  318D   	fcall	___ftge
  5644  0FEE  1803               	btfsc	3,0
  5645  0FEF  2FFE               	goto	l281
  5646                           
  5647                           ;main.c: 143: {
  5648                           ;main.c: 144: if(counter>=314)
  5649  0FF0  3001               	movlw	1
  5650  0FF1  0021               	movlb	1	; select bank1
  5651  0FF2  0256               	subwf	(main@counter+1)^(0+128),w
  5652  0FF3  303A               	movlw	58
  5653  0FF4  1903               	skipnz
  5654  0FF5  0255               	subwf	main@counter^(0+128),w
  5655  0FF6  1C03               	skipc
  5656  0FF7  2FFE               	goto	l281
  5657                           
  5658                           ;main.c: 145: {
  5659                           ;main.c: 146: minute+=1;
  5660  0FF8  3001               	movlw	1
  5661  0FF9  07D3               	addwf	main@minute^(0+128),f
  5662  0FFA  3000               	movlw	0
  5663  0FFB  3DD4               	addwfc	(main@minute+1)^(0+128),f
  5664                           
  5665                           ;main.c: 147: counter = 0;
  5666  0FFC  01D5               	clrf	main@counter^(0+128)
  5667  0FFD  01D6               	clrf	(main@counter+1)^(0+128)
  5668  0FFE                     l281:	
  5669  0FFE  0064               	clrwdt	;# 
  5670  0FFF  2D1D               	goto	l3713
  5671  1000                     __end_of_main:	
  5672                           
  5673                           	psect	text1
  5674  00D1                     __ptext1:	
  5675 ;; *************** function _sprintf *****************
  5676 ;; Defined at:
  5677 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\doprnt.c"
  5678 ;; Parameters:    Size  Location     Type
  5679 ;;  sp              1    wreg     PTR unsigned char 
  5680 ;;		 -> main@s(8), 
  5681 ;;  f               2   60[BANK0 ] PTR const unsigned char 
  5682 ;;		 -> STR_2(5), STR_1(6), 
  5683 ;; Auto vars:     Size  Location     Type
  5684 ;;  sp              1   21[BANK1 ] PTR unsigned char 
  5685 ;;		 -> main@s(8), 
  5686 ;;  val             4   12[BANK1 ] unsigned long 
  5687 ;;  tmpval          4    8[BANK1 ] struct .
  5688 ;;  fval            3   18[BANK1 ] struct .
  5689 ;;  prec            2   22[BANK1 ] int 
  5690 ;;  exp             2   16[BANK1 ] int 
  5691 ;;  width           2    6[BANK1 ] int 
  5692 ;;  flag            2    4[BANK1 ] unsigned short 
  5693 ;;  cp              2    0        PTR const unsigned char 
  5694 ;;  len             2    0        unsigned int 
  5695 ;;  c               1   24[BANK1 ] char 
  5696 ;;  ap              1    3[BANK1 ] PTR void [1]
  5697 ;;		 -> ?_sprintf(2), 
  5698 ;;  d               1    0        unsigned char 
  5699 ;; Return value:  Size  Location     Type
  5700 ;;                  2   60[BANK0 ] int 
  5701 ;; Registers used:
  5702 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5703 ;; Tracked objects:
  5704 ;;		On entry : 0/0
  5705 ;;		On exit  : 0/0
  5706 ;;		Unchanged: 0/0
  5707 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5708 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5709 ;;      Locals:         0       0      25       0       0       0       0       0       0       0       0       0       
      +0       0
  5710 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5711 ;;      Totals:         0      11      25       0       0       0       0       0       0       0       0       0       
      +0       0
  5712 ;;Total ram usage:       36 bytes
  5713 ;; Hardware stack levels used:    1
  5714 ;; Hardware stack levels required when called:    3
  5715 ;; This function calls:
  5716 ;;		___awdiv
  5717 ;;		___ftadd
  5718 ;;		___ftge
  5719 ;;		___ftmul
  5720 ;;		___ftneg
  5721 ;;		___ftsub
  5722 ;;		___fttol
  5723 ;;		___lldiv
  5724 ;;		___llmod
  5725 ;;		___lltoft
  5726 ;;		___wmul
  5727 ;;		__div_to_l_
  5728 ;;		__tdiv_to_l_
  5729 ;;		_fround
  5730 ;;		_isdigit
  5731 ;;		_scale
  5732 ;; This function is called by:
  5733 ;;		_main
  5734 ;; This function uses a non-reentrant model
  5735 ;;
  5736                           
  5737                           
  5738                           ;psect for function _sprintf
  5739  00D1                     _sprintf:	
  5740                           
  5741                           ;incstack = 0
  5742                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5743                           ;sprintf@sp stored from wreg
  5744  00D1  0021               	movlb	1	; select bank1
  5745  00D2  00B5               	movwf	sprintf@sp^(0+128)
  5746                           
  5747                           ;doprnt.c: 494: va_list ap;
  5748                           ;doprnt.c: 499: signed char c;
  5749                           ;doprnt.c: 501: int width;
  5750                           ;doprnt.c: 504: int prec;
  5751                           ;doprnt.c: 508: unsigned short flag;
  5752                           ;doprnt.c: 515: char d;
  5753                           ;doprnt.c: 516: double fval;
  5754                           ;doprnt.c: 517: int exp;
  5755                           ;doprnt.c: 523: union {
  5756                           ;doprnt.c: 524: unsigned long vd;
  5757                           ;doprnt.c: 525: double integ;
  5758                           ;doprnt.c: 526: } tmpval;
  5759                           ;doprnt.c: 528: unsigned long val;
  5760                           ;doprnt.c: 529: unsigned len;
  5761                           ;doprnt.c: 530: const char * cp;
  5762                           ;doprnt.c: 533: *ap = __va_start();
  5763  00D3  305E               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  5764  00D4  0020               	movlb	0	; select bank0
  5765  00D5  00E1               	movwf	??_sprintf
  5766  00D6  0861               	movf	??_sprintf,w
  5767  00D7  0021               	movlb	1	; select bank1
  5768  00D8  00A3               	movwf	sprintf@ap^(0+128)
  5769  00D9                     l3553:	
  5770                           ;doprnt.c: 536: while(c = *f++) {
  5771                           
  5772  00D9  0020               	movlb	0	; select bank0
  5773  00DA  085D               	movf	sprintf@f+1,w
  5774  00DB  00E2               	movwf	??_sprintf+1
  5775  00DC  085C               	movf	sprintf@f,w
  5776  00DD  00E1               	movwf	??_sprintf
  5777  00DE  0ADC               	incf	sprintf@f,f
  5778  00DF  1903               	skipnz
  5779  00E0  0ADD               	incf	sprintf@f+1,f
  5780  00E1  0861               	movf	??_sprintf,w
  5781  00E2  0084               	movwf	4
  5782  00E3  0862               	movf	??_sprintf+1,w
  5783  00E4  0085               	movwf	5
  5784  00E5  0800               	movf	0,w	;code access
  5785  00E6  00E3               	movwf	??_sprintf+2
  5786  00E7  0863               	movf	??_sprintf+2,w
  5787  00E8  0021               	movlb	1	; select bank1
  5788  00E9  00B8               	movwf	sprintf@c^(0+128)
  5789  00EA  0838               	movf	sprintf@c^(0+128),w
  5790  00EB  1903               	btfsc	3,2
  5791  00EC  2FD6               	goto	l3555
  5792                           
  5793                           ;doprnt.c: 538: if(c != '%')
  5794  00ED  3025               	movlw	37
  5795  00EE  0638               	xorwf	sprintf@c^(0+128),w
  5796  00EF  1903               	btfsc	3,2
  5797  00F0  2901               	goto	l3281
  5798                           
  5799                           ;doprnt.c: 540: {
  5800                           ;doprnt.c: 541: ((*sp++ = (c)));
  5801  00F1  0838               	movf	sprintf@c^(0+128),w
  5802  00F2  0020               	movlb	0	; select bank0
  5803  00F3  00E1               	movwf	??_sprintf
  5804  00F4  0021               	movlb	1	; select bank1
  5805  00F5  0835               	movf	sprintf@sp^(0+128),w
  5806  00F6  0086               	movwf	6
  5807  00F7  0187               	clrf	7
  5808  00F8  0020               	movlb	0	; select bank0
  5809  00F9  0861               	movf	??_sprintf,w
  5810  00FA  0081               	movwf	1
  5811  00FB  3001               	movlw	1
  5812  00FC  00E1               	movwf	??_sprintf
  5813  00FD  0861               	movf	??_sprintf,w
  5814  00FE  0021               	movlb	1	; select bank1
  5815  00FF  07B5               	addwf	sprintf@sp^(0+128),f
  5816                           
  5817                           ;doprnt.c: 542: continue;
  5818  0100  28D9               	goto	l3553
  5819  0101                     l3281:	
  5820                           
  5821                           ;doprnt.c: 543: }
  5822                           ;doprnt.c: 546: width = 0;
  5823  0101  01A6               	clrf	sprintf@width^(0+128)
  5824  0102  01A7               	clrf	(sprintf@width+1)^(0+128)
  5825                           
  5826                           ;doprnt.c: 548: flag = 0;
  5827  0103  01A4               	clrf	sprintf@flag^(0+128)
  5828  0104  01A5               	clrf	(sprintf@flag+1)^(0+128)
  5829                           
  5830                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  5831  0105  0020               	movlb	0	; select bank0
  5832  0106  085C               	movf	sprintf@f,w
  5833  0107  0084               	movwf	4
  5834  0108  085D               	movf	sprintf@f+1,w
  5835  0109  0085               	movwf	5
  5836  010A  0800               	movf	0,w	;code access
  5837  010B  319F  2703  3180   	fcall	_isdigit
  5838  010E  1C03               	btfss	3,0
  5839  010F  294D               	goto	l3295
  5840                           
  5841                           ;doprnt.c: 598: width = 0;
  5842  0110  0021               	movlb	1	; select bank1
  5843  0111  01A6               	clrf	sprintf@width^(0+128)
  5844  0112  01A7               	clrf	(sprintf@width+1)^(0+128)
  5845  0113                     l3287:	
  5846                           ;doprnt.c: 599: do {
  5847                           
  5848                           
  5849                           ;doprnt.c: 600: width *= 10;
  5850  0113  300A               	movlw	10
  5851  0114  0020               	movlb	0	; select bank0
  5852  0115  00A4               	movwf	___wmul@multiplier
  5853  0116  3000               	movlw	0
  5854  0117  00A5               	movwf	___wmul@multiplier+1
  5855  0118  0021               	movlb	1	; select bank1
  5856  0119  0827               	movf	(sprintf@width+1)^(0+128),w
  5857  011A  0020               	movlb	0	; select bank0
  5858  011B  00A7               	movwf	___wmul@multiplicand+1
  5859  011C  0021               	movlb	1	; select bank1
  5860  011D  0826               	movf	sprintf@width^(0+128),w
  5861  011E  0020               	movlb	0	; select bank0
  5862  011F  00A6               	movwf	___wmul@multiplicand
  5863  0120  319F  27A6  3180   	fcall	___wmul
  5864  0123  0020               	movlb	0	; select bank0
  5865  0124  0825               	movf	?___wmul+1,w
  5866  0125  0021               	movlb	1	; select bank1
  5867  0126  00A7               	movwf	(sprintf@width+1)^(0+128)
  5868  0127  0020               	movlb	0	; select bank0
  5869  0128  0824               	movf	?___wmul,w
  5870  0129  0021               	movlb	1	; select bank1
  5871  012A  00A6               	movwf	sprintf@width^(0+128)
  5872                           
  5873                           ;doprnt.c: 601: width += *f++ - '0';
  5874  012B  0020               	movlb	0	; select bank0
  5875  012C  085C               	movf	sprintf@f,w
  5876  012D  0084               	movwf	4
  5877  012E  085D               	movf	sprintf@f+1,w
  5878  012F  0085               	movwf	5
  5879  0130  0800               	movf	0,w	;code access
  5880  0131  3ED0               	addlw	208
  5881  0132  00E1               	movwf	??_sprintf
  5882  0133  30FF               	movlw	255
  5883  0134  1803               	skipnc
  5884  0135  3000               	movlw	0
  5885  0136  00E2               	movwf	??_sprintf+1
  5886  0137  0861               	movf	??_sprintf,w
  5887  0138  0021               	movlb	1	; select bank1
  5888  0139  07A6               	addwf	sprintf@width^(0+128),f
  5889  013A  0020               	movlb	0	; select bank0
  5890  013B  0862               	movf	??_sprintf+1,w
  5891  013C  0021               	movlb	1	; select bank1
  5892  013D  3DA7               	addwfc	(sprintf@width+1)^(0+128),f
  5893  013E  3001               	movlw	1
  5894  013F  0020               	movlb	0	; select bank0
  5895  0140  07DC               	addwf	sprintf@f,f
  5896  0141  3000               	movlw	0
  5897  0142  3DDD               	addwfc	sprintf@f+1,f
  5898                           
  5899                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  5900  0143  085C               	movf	sprintf@f,w
  5901  0144  0084               	movwf	4
  5902  0145  085D               	movf	sprintf@f+1,w
  5903  0146  0085               	movwf	5
  5904  0147  0800               	movf	0,w	;code access
  5905  0148  319F  2703  3180   	fcall	_isdigit
  5906  014B  1803               	btfsc	3,0
  5907  014C  2913               	goto	l3287
  5908  014D                     l3295:	
  5909                           
  5910                           ;doprnt.c: 608: }
  5911                           ;doprnt.c: 611: if(*f == '.') {
  5912  014D  0020               	movlb	0	; select bank0
  5913  014E  085C               	movf	sprintf@f,w
  5914  014F  0084               	movwf	4
  5915  0150  085D               	movf	sprintf@f+1,w
  5916  0151  0085               	movwf	5
  5917  0152  0012               	moviw fsr0++
  5918  0153  3A2E               	xorlw	46
  5919  0154  1D03               	btfss	3,2
  5920  0155  2998               	goto	l3309
  5921                           
  5922                           ;doprnt.c: 612: flag |= 0x4000;
  5923  0156  0021               	movlb	1	; select bank1
  5924  0157  1725               	bsf	(sprintf@flag^(0+128)+1),6
  5925                           
  5926                           ;doprnt.c: 613: f++;
  5927  0158  3001               	movlw	1
  5928  0159  0020               	movlb	0	; select bank0
  5929  015A  07DC               	addwf	sprintf@f,f
  5930  015B  3000               	movlw	0
  5931  015C  3DDD               	addwfc	sprintf@f+1,f
  5932                           
  5933                           ;doprnt.c: 620: {
  5934                           ;doprnt.c: 621: prec = 0;
  5935  015D  0021               	movlb	1	; select bank1
  5936  015E  01B6               	clrf	sprintf@prec^(0+128)
  5937  015F  01B7               	clrf	(sprintf@prec+1)^(0+128)
  5938  0160                     l3307:	
  5939                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  5940                           
  5941  0160  0020               	movlb	0	; select bank0
  5942  0161  085C               	movf	sprintf@f,w
  5943  0162  0084               	movwf	4
  5944  0163  085D               	movf	sprintf@f+1,w
  5945  0164  0085               	movwf	5
  5946  0165  0800               	movf	0,w	;code access
  5947  0166  319F  2703  3180   	fcall	_isdigit
  5948  0169  1C03               	btfss	3,0
  5949  016A  299F               	goto	l3315
  5950                           
  5951                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  5952  016B  0020               	movlb	0	; select bank0
  5953  016C  085C               	movf	sprintf@f,w
  5954  016D  0084               	movwf	4
  5955  016E  085D               	movf	sprintf@f+1,w
  5956  016F  0085               	movwf	5
  5957  0170  0800               	movf	0,w	;code access
  5958  0171  00E1               	movwf	??_sprintf
  5959  0172  01E2               	clrf	??_sprintf+1
  5960  0173  0021               	movlb	1	; select bank1
  5961  0174  0837               	movf	(sprintf@prec+1)^(0+128),w
  5962  0175  0020               	movlb	0	; select bank0
  5963  0176  00A5               	movwf	___wmul@multiplier+1
  5964  0177  0021               	movlb	1	; select bank1
  5965  0178  0836               	movf	sprintf@prec^(0+128),w
  5966  0179  0020               	movlb	0	; select bank0
  5967  017A  00A4               	movwf	___wmul@multiplier
  5968  017B  300A               	movlw	10
  5969  017C  00A6               	movwf	___wmul@multiplicand
  5970  017D  3000               	movlw	0
  5971  017E  00A7               	movwf	___wmul@multiplicand+1
  5972  017F  319F  27A6  3180   	fcall	___wmul
  5973  0182  0020               	movlb	0	; select bank0
  5974  0183  0861               	movf	??_sprintf,w
  5975  0184  0724               	addwf	?___wmul,w
  5976  0185  00E3               	movwf	??_sprintf+2
  5977  0186  0862               	movf	??_sprintf+1,w
  5978  0187  3D25               	addwfc	?___wmul+1,w
  5979  0188  00E4               	movwf	??_sprintf+3
  5980  0189  0863               	movf	??_sprintf+2,w
  5981  018A  3ED0               	addlw	208
  5982  018B  0021               	movlb	1	; select bank1
  5983  018C  00B6               	movwf	sprintf@prec^(0+128)
  5984  018D  30FF               	movlw	255
  5985  018E  0020               	movlb	0	; select bank0
  5986  018F  3D64               	addwfc	??_sprintf+3,w
  5987  0190  0021               	movlb	1	; select bank1
  5988  0191  00B7               	movwf	(sprintf@prec+1)^(0+128)
  5989  0192  3001               	movlw	1
  5990  0193  0020               	movlb	0	; select bank0
  5991  0194  07DC               	addwf	sprintf@f,f
  5992  0195  3000               	movlw	0
  5993  0196  3DDD               	addwfc	sprintf@f+1,f
  5994  0197  2960               	goto	l3307
  5995  0198                     l3309:	
  5996                           ;doprnt.c: 624: }
  5997                           ;doprnt.c: 625: } else {
  5998                           
  5999                           
  6000                           ;doprnt.c: 626: prec = 0;
  6001  0198  0021               	movlb	1	; select bank1
  6002  0199  01B6               	clrf	sprintf@prec^(0+128)
  6003  019A  01B7               	clrf	(sprintf@prec+1)^(0+128)
  6004                           
  6005                           ;doprnt.c: 628: flag |= 0x1000;
  6006  019B  1625               	bsf	(sprintf@flag^(0+128)+1),4
  6007                           
  6008                           ;doprnt.c: 630: }
  6009                           ;doprnt.c: 635: switch(c = *f++) {
  6010  019C  299F               	goto	l3315
  6011  019D                     l334:	
  6012                           ;doprnt.c: 662: case 'f':
  6013                           
  6014                           ;doprnt.c: 638: goto alldone;
  6015                           
  6016                           ;doprnt.c: 637: case 0:
  6017                           
  6018                           
  6019                           ;doprnt.c: 663: flag |= 0x400;
  6020  019D  1525               	bsf	(sprintf@flag^(0+128)+1),2
  6021                           
  6022                           ;doprnt.c: 698: case 'i':
  6023                           ;doprnt.c: 699: break;
  6024                           
  6025                           ;doprnt.c: 697: case 'd':
  6026                           
  6027                           ;doprnt.c: 664: break;
  6028  019E  29BB               	goto	l3317
  6029  019F                     l3315:	
  6030                           ;doprnt.c: 822: }
  6031                           
  6032                           ;doprnt.c: 813: continue;
  6033                           
  6034                           ;doprnt.c: 802: default:
  6035                           
  6036  019F  0020               	movlb	0	; select bank0
  6037  01A0  085D               	movf	sprintf@f+1,w
  6038  01A1  00E2               	movwf	??_sprintf+1
  6039  01A2  085C               	movf	sprintf@f,w
  6040  01A3  00E1               	movwf	??_sprintf
  6041  01A4  0ADC               	incf	sprintf@f,f
  6042  01A5  1903               	skipnz
  6043  01A6  0ADD               	incf	sprintf@f+1,f
  6044  01A7  0861               	movf	??_sprintf,w
  6045  01A8  0084               	movwf	4
  6046  01A9  0862               	movf	??_sprintf+1,w
  6047  01AA  0085               	movwf	5
  6048  01AB  0800               	movf	0,w	;code access
  6049  01AC  0021               	movlb	1	; select bank1
  6050  01AD  00B8               	movwf	sprintf@c^(0+128)
  6051                           
  6052                           ; Switch size 1, requested type "space"
  6053                           ; Number of cases is 4, Range of values is 0 to 105
  6054                           ; switch strategies available:
  6055                           ; Name         Instructions Cycles
  6056                           ; simple_byte           13     7 (average)
  6057                           ; direct_byte          218     6 (fixed)
  6058                           ; jumptable            260     6 (fixed)
  6059                           ;	Chosen strategy is simple_byte
  6060  01AE  3A00               	xorlw	0	; case 0
  6061  01AF  1903               	skipnz
  6062  01B0  2FD6               	goto	l3555
  6063  01B1  3A64               	xorlw	100	; case 100
  6064  01B2  1903               	skipnz
  6065  01B3  29BB               	goto	l3317
  6066  01B4  3A02               	xorlw	2	; case 102
  6067  01B5  1903               	skipnz
  6068  01B6  299D               	goto	l334
  6069  01B7  3A0F               	xorlw	15	; case 105
  6070  01B8  1903               	skipnz
  6071  01B9  29BB               	goto	l3317
  6072  01BA  28D9               	goto	l3553
  6073  01BB                     l3317:	
  6074                           
  6075                           ;doprnt.c: 825: if(flag & (0x700)) {
  6076  01BB  3000               	movlw	0
  6077  01BC  0524               	andwf	sprintf@flag^(0+128),w
  6078  01BD  0020               	movlb	0	; select bank0
  6079  01BE  00E1               	movwf	??_sprintf
  6080  01BF  3007               	movlw	7
  6081  01C0  0021               	movlb	1	; select bank1
  6082  01C1  0525               	andwf	(sprintf@flag+1)^(0+128),w
  6083  01C2  0020               	movlb	0	; select bank0
  6084  01C3  00E2               	movwf	??_sprintf+1
  6085  01C4  0861               	movf	??_sprintf,w
  6086  01C5  0462               	iorwf	??_sprintf+1,w
  6087  01C6  1903               	btfsc	3,2
  6088  01C7  2E4B               	goto	l3477
  6089                           
  6090                           ;doprnt.c: 827: if(flag & 0x1000)
  6091  01C8  0021               	movlb	1	; select bank1
  6092  01C9  1E25               	btfss	(sprintf@flag+1)^(0+128),4
  6093  01CA  29CF               	goto	l3323
  6094                           
  6095                           ;doprnt.c: 829: prec = 6;
  6096  01CB  3006               	movlw	6
  6097  01CC  00B6               	movwf	sprintf@prec^(0+128)
  6098  01CD  3000               	movlw	0
  6099  01CE  00B7               	movwf	(sprintf@prec^(0+128)+1)
  6100  01CF                     l3323:	
  6101                           
  6102                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  6103  01CF  0823               	movf	sprintf@ap^(0+128),w
  6104  01D0  0086               	movwf	6
  6105  01D1  0187               	clrf	7
  6106  01D2  3F40               	moviw [0]fsr1
  6107  01D3  00B2               	movwf	sprintf@fval^(0+128)
  6108  01D4  3F41               	moviw [1]fsr1
  6109  01D5  00B3               	movwf	(sprintf@fval+1)^(0+128)
  6110  01D6  3F42               	moviw [2]fsr1
  6111  01D7  00B4               	movwf	(sprintf@fval+2)^(0+128)
  6112  01D8  3003               	movlw	3
  6113  01D9  0020               	movlb	0	; select bank0
  6114  01DA  00E1               	movwf	??_sprintf
  6115  01DB  0861               	movf	??_sprintf,w
  6116  01DC  0021               	movlb	1	; select bank1
  6117  01DD  07A3               	addwf	sprintf@ap^(0+128),f
  6118                           
  6119                           ;doprnt.c: 831: if(fval < 0.0) {
  6120  01DE  0832               	movf	sprintf@fval^(0+128),w
  6121  01DF  0020               	movlb	0	; select bank0
  6122  01E0  00D3               	movwf	___ftge@ff1
  6123  01E1  0021               	movlb	1	; select bank1
  6124  01E2  0833               	movf	(sprintf@fval+1)^(0+128),w
  6125  01E3  0020               	movlb	0	; select bank0
  6126  01E4  00D4               	movwf	___ftge@ff1+1
  6127  01E5  0021               	movlb	1	; select bank1
  6128  01E6  0834               	movf	(sprintf@fval+2)^(0+128),w
  6129  01E7  0020               	movlb	0	; select bank0
  6130  01E8  00D5               	movwf	___ftge@ff1+2
  6131  01E9  3000               	movlw	0
  6132  01EA  00D6               	movwf	___ftge@ff2
  6133  01EB  3000               	movlw	0
  6134  01EC  00D7               	movwf	___ftge@ff2+1
  6135  01ED  3000               	movlw	0
  6136  01EE  00D8               	movwf	___ftge@ff2+2
  6137  01EF  3190  20DF  3180   	fcall	___ftge
  6138  01F2  1803               	btfsc	3,0
  6139  01F3  2A09               	goto	l3333
  6140                           
  6141                           ;doprnt.c: 832: fval = -fval;
  6142  01F4  0021               	movlb	1	; select bank1
  6143  01F5  0832               	movf	sprintf@fval^(0+128),w
  6144  01F6  00F0               	movwf	___ftneg@f1
  6145  01F7  0833               	movf	(sprintf@fval+1)^(0+128),w
  6146  01F8  00F1               	movwf	___ftneg@f1+1
  6147  01F9  0834               	movf	(sprintf@fval+2)^(0+128),w
  6148  01FA  00F2               	movwf	___ftneg@f1+2
  6149  01FB  319E  26C8  3180   	fcall	___ftneg
  6150  01FE  0870               	movf	?___ftneg,w
  6151  01FF  0021               	movlb	1	; select bank1
  6152  0200  00B2               	movwf	sprintf@fval^(0+128)
  6153  0201  0871               	movf	?___ftneg+1,w
  6154  0202  00B3               	movwf	(sprintf@fval+1)^(0+128)
  6155  0203  0872               	movf	?___ftneg+2,w
  6156  0204  00B4               	movwf	(sprintf@fval+2)^(0+128)
  6157                           
  6158                           ;doprnt.c: 833: flag |= 0x03;
  6159  0205  3003               	movlw	3
  6160  0206  04A4               	iorwf	sprintf@flag^(0+128),f
  6161  0207  3000               	movlw	0
  6162  0208  04A5               	iorwf	(sprintf@flag+1)^(0+128),f
  6163  0209                     l3333:	
  6164                           
  6165                           ;doprnt.c: 834: }
  6166                           ;doprnt.c: 835: exp = 0;
  6167  0209  0021               	movlb	1	; select bank1
  6168  020A  01B0               	clrf	sprintf@exp^(0+128)
  6169  020B  01B1               	clrf	(sprintf@exp+1)^(0+128)
  6170                           
  6171                           ;doprnt.c: 836: if( fval!=0) {
  6172  020C  0834               	movf	(sprintf@fval+2)^(0+128),w
  6173  020D  0433               	iorwf	(sprintf@fval+1)^(0+128),w
  6174  020E  0432               	iorwf	sprintf@fval^(0+128),w
  6175  020F  1903               	skipnz
  6176  0210  2AD3               	goto	l342
  6177                           
  6178                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  6179  0211  30B2               	movlw	low (sprintf@fval| 0)
  6180  0212  0086               	movwf	6
  6181  0213  0187               	clrf	7
  6182  0214  3F40               	moviw [0]fsr1
  6183  0215  0020               	movlb	0	; select bank0
  6184  0216  00E1               	movwf	??_sprintf
  6185  0217  3F41               	moviw [1]fsr1
  6186  0218  00E2               	movwf	??_sprintf+1
  6187  0219  3F42               	moviw [2]fsr1
  6188  021A  00E3               	movwf	??_sprintf+2
  6189  021B  3F43               	moviw [3]fsr1
  6190  021C  00E4               	movwf	??_sprintf+3
  6191  021D  300F               	movlw	15
  6192  021E                     u4165:	
  6193  021E  36E4               	lsrf	??_sprintf+3,f
  6194  021F  0CE3               	rrf	??_sprintf+2,f
  6195  0220  0CE2               	rrf	??_sprintf+1,f
  6196  0221  0CE1               	rrf	??_sprintf,f
  6197  0222  0B89               	decfsz	9,f
  6198  0223  2A1E               	goto	u4165
  6199  0224  30FF               	movlw	255
  6200  0225  0561               	andwf	??_sprintf,w
  6201  0226  00E5               	movwf	??_sprintf+4
  6202  0227  3000               	movlw	0
  6203  0228  0562               	andwf	??_sprintf+1,w
  6204  0229  00E6               	movwf	??_sprintf+5
  6205  022A  0865               	movf	??_sprintf+4,w
  6206  022B  3E82               	addlw	130
  6207  022C  0021               	movlb	1	; select bank1
  6208  022D  00B0               	movwf	sprintf@exp^(0+128)
  6209  022E  30FF               	movlw	255
  6210  022F  0020               	movlb	0	; select bank0
  6211  0230  3D66               	addwfc	??_sprintf+5,w
  6212  0231  0021               	movlb	1	; select bank1
  6213  0232  00B1               	movwf	(sprintf@exp+1)^(0+128)
  6214                           
  6215                           ;doprnt.c: 838: exp--;
  6216  0233  30FF               	movlw	255
  6217  0234  07B0               	addwf	sprintf@exp^(0+128),f
  6218  0235  30FF               	movlw	255
  6219  0236  3DB1               	addwfc	(sprintf@exp+1)^(0+128),f
  6220                           
  6221                           ;doprnt.c: 839: exp *= 3;
  6222  0237  3003               	movlw	3
  6223  0238  0020               	movlb	0	; select bank0
  6224  0239  00A4               	movwf	___wmul@multiplier
  6225  023A  3000               	movlw	0
  6226  023B  00A5               	movwf	___wmul@multiplier+1
  6227  023C  0021               	movlb	1	; select bank1
  6228  023D  0831               	movf	(sprintf@exp+1)^(0+128),w
  6229  023E  0020               	movlb	0	; select bank0
  6230  023F  00A7               	movwf	___wmul@multiplicand+1
  6231  0240  0021               	movlb	1	; select bank1
  6232  0241  0830               	movf	sprintf@exp^(0+128),w
  6233  0242  0020               	movlb	0	; select bank0
  6234  0243  00A6               	movwf	___wmul@multiplicand
  6235  0244  319F  27A6  3180   	fcall	___wmul
  6236  0247  0020               	movlb	0	; select bank0
  6237  0248  0825               	movf	?___wmul+1,w
  6238  0249  0021               	movlb	1	; select bank1
  6239  024A  00B1               	movwf	(sprintf@exp+1)^(0+128)
  6240  024B  0020               	movlb	0	; select bank0
  6241  024C  0824               	movf	?___wmul,w
  6242  024D  0021               	movlb	1	; select bank1
  6243  024E  00B0               	movwf	sprintf@exp^(0+128)
  6244                           
  6245                           ;doprnt.c: 840: exp /= 10;
  6246  024F  300A               	movlw	10
  6247  0250  00F7               	movwf	___awdiv@divisor
  6248  0251  3000               	movlw	0
  6249  0252  00F8               	movwf	___awdiv@divisor+1
  6250  0253  0831               	movf	(sprintf@exp+1)^(0+128),w
  6251  0254  00FA               	movwf	___awdiv@dividend+1
  6252  0255  0830               	movf	sprintf@exp^(0+128),w
  6253  0256  00F9               	movwf	___awdiv@dividend
  6254  0257  3191  21F5  3180   	fcall	___awdiv
  6255  025A  0878               	movf	?___awdiv+1,w
  6256  025B  0021               	movlb	1	; select bank1
  6257  025C  00B1               	movwf	(sprintf@exp+1)^(0+128)
  6258  025D  0877               	movf	?___awdiv,w
  6259  025E  00B0               	movwf	sprintf@exp^(0+128)
  6260                           
  6261                           ;doprnt.c: 841: if(exp < 0)
  6262  025F  1FB1               	btfss	(sprintf@exp+1)^(0+128),7
  6263  0260  2A65               	goto	l3349
  6264                           
  6265                           ;doprnt.c: 842: exp--;
  6266  0261  30FF               	movlw	255
  6267  0262  07B0               	addwf	sprintf@exp^(0+128),f
  6268  0263  30FF               	movlw	255
  6269  0264  3DB1               	addwfc	(sprintf@exp+1)^(0+128),f
  6270  0265                     l3349:	
  6271                           
  6272                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  6273  0265  0330               	decf	sprintf@exp^(0+128),w
  6274  0266  3AFF               	xorlw	255
  6275  0267  318A  22BD  3180   	fcall	_scale
  6276  026A  0020               	movlb	0	; select bank0
  6277  026B  0838               	movf	?_scale,w
  6278  026C  0021               	movlb	1	; select bank1
  6279  026D  00A8               	movwf	sprintf@tmpval^(0+128)
  6280  026E  0020               	movlb	0	; select bank0
  6281  026F  0839               	movf	?_scale+1,w
  6282  0270  0021               	movlb	1	; select bank1
  6283  0271  00A9               	movwf	(sprintf@tmpval+1)^(0+128)
  6284  0272  0020               	movlb	0	; select bank0
  6285  0273  083A               	movf	?_scale+2,w
  6286  0274  0021               	movlb	1	; select bank1
  6287  0275  00AA               	movwf	(sprintf@tmpval+2)^(0+128)
  6288                           
  6289                           ;doprnt.c: 847: tmpval.integ *= fval;
  6290  0276  0832               	movf	sprintf@fval^(0+128),w
  6291  0277  0020               	movlb	0	; select bank0
  6292  0278  00A8               	movwf	___ftmul@f1
  6293  0279  0021               	movlb	1	; select bank1
  6294  027A  0833               	movf	(sprintf@fval+1)^(0+128),w
  6295  027B  0020               	movlb	0	; select bank0
  6296  027C  00A9               	movwf	___ftmul@f1+1
  6297  027D  0021               	movlb	1	; select bank1
  6298  027E  0834               	movf	(sprintf@fval+2)^(0+128),w
  6299  027F  0020               	movlb	0	; select bank0
  6300  0280  00AA               	movwf	___ftmul@f1+2
  6301  0281  0021               	movlb	1	; select bank1
  6302  0282  0828               	movf	sprintf@tmpval^(0+128),w
  6303  0283  0020               	movlb	0	; select bank0
  6304  0284  00AB               	movwf	___ftmul@f2
  6305  0285  0021               	movlb	1	; select bank1
  6306  0286  0829               	movf	(sprintf@tmpval+1)^(0+128),w
  6307  0287  0020               	movlb	0	; select bank0
  6308  0288  00AC               	movwf	___ftmul@f2+1
  6309  0289  0021               	movlb	1	; select bank1
  6310  028A  082A               	movf	(sprintf@tmpval+2)^(0+128),w
  6311  028B  0020               	movlb	0	; select bank0
  6312  028C  00AD               	movwf	___ftmul@f2+2
  6313  028D  3196  2656  3180   	fcall	___ftmul
  6314  0290  0020               	movlb	0	; select bank0
  6315  0291  0828               	movf	?___ftmul,w
  6316  0292  0021               	movlb	1	; select bank1
  6317  0293  00A8               	movwf	sprintf@tmpval^(0+128)
  6318  0294  0020               	movlb	0	; select bank0
  6319  0295  0829               	movf	?___ftmul+1,w
  6320  0296  0021               	movlb	1	; select bank1
  6321  0297  00A9               	movwf	(sprintf@tmpval+1)^(0+128)
  6322  0298  0020               	movlb	0	; select bank0
  6323  0299  082A               	movf	?___ftmul+2,w
  6324  029A  0021               	movlb	1	; select bank1
  6325  029B  00AA               	movwf	(sprintf@tmpval+2)^(0+128)
  6326                           
  6327                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  6328  029C  0828               	movf	sprintf@tmpval^(0+128),w
  6329  029D  0020               	movlb	0	; select bank0
  6330  029E  00D3               	movwf	___ftge@ff1
  6331  029F  0021               	movlb	1	; select bank1
  6332  02A0  0829               	movf	(sprintf@tmpval+1)^(0+128),w
  6333  02A1  0020               	movlb	0	; select bank0
  6334  02A2  00D4               	movwf	___ftge@ff1+1
  6335  02A3  0021               	movlb	1	; select bank1
  6336  02A4  082A               	movf	(sprintf@tmpval+2)^(0+128),w
  6337  02A5  0020               	movlb	0	; select bank0
  6338  02A6  00D5               	movwf	___ftge@ff1+2
  6339  02A7  3000               	movlw	0
  6340  02A8  00D6               	movwf	___ftge@ff2
  6341  02A9  3080               	movlw	128
  6342  02AA  00D7               	movwf	___ftge@ff2+1
  6343  02AB  303F               	movlw	63
  6344  02AC  00D8               	movwf	___ftge@ff2+2
  6345  02AD  3190  20DF  3180   	fcall	___ftge
  6346  02B0  1803               	btfsc	3,0
  6347  02B1  2AB7               	goto	l3357
  6348                           
  6349                           ;doprnt.c: 849: exp--;
  6350  02B2  30FF               	movlw	255
  6351  02B3  0021               	movlb	1	; select bank1
  6352  02B4  07B0               	addwf	sprintf@exp^(0+128),f
  6353  02B5  30FF               	movlw	255
  6354  02B6  2AD2               	goto	L1
  6355  02B7                     l3357:	
  6356                           
  6357                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  6358  02B7  0021               	movlb	1	; select bank1
  6359  02B8  0828               	movf	sprintf@tmpval^(0+128),w
  6360  02B9  0020               	movlb	0	; select bank0
  6361  02BA  00D3               	movwf	___ftge@ff1
  6362  02BB  0021               	movlb	1	; select bank1
  6363  02BC  0829               	movf	(sprintf@tmpval+1)^(0+128),w
  6364  02BD  0020               	movlb	0	; select bank0
  6365  02BE  00D4               	movwf	___ftge@ff1+1
  6366  02BF  0021               	movlb	1	; select bank1
  6367  02C0  082A               	movf	(sprintf@tmpval+2)^(0+128),w
  6368  02C1  0020               	movlb	0	; select bank0
  6369  02C2  00D5               	movwf	___ftge@ff1+2
  6370  02C3  3000               	movlw	0
  6371  02C4  00D6               	movwf	___ftge@ff2
  6372  02C5  3020               	movlw	32
  6373  02C6  00D7               	movwf	___ftge@ff2+1
  6374  02C7  3041               	movlw	65
  6375  02C8  00D8               	movwf	___ftge@ff2+2
  6376  02C9  3190  20DF  3180   	fcall	___ftge
  6377  02CC  1C03               	btfss	3,0
  6378  02CD  2AD3               	goto	l342
  6379                           
  6380                           ;doprnt.c: 851: exp++;
  6381  02CE  3001               	movlw	1
  6382  02CF  0021               	movlb	1	; select bank1
  6383  02D0  07B0               	addwf	sprintf@exp^(0+128),f
  6384  02D1  3000               	movlw	0
  6385  02D2                     L1:	
  6386  02D2  3DB1               	addwfc	(sprintf@exp+1)^(0+128),f
  6387  02D3                     l342:	
  6388                           
  6389                           ;doprnt.c: 852: }
  6390                           ;doprnt.c: 1112: if(prec <= 12)
  6391  02D3  0021               	movlb	1	; select bank1
  6392  02D4  0837               	movf	(sprintf@prec+1)^(0+128),w
  6393  02D5  3A80               	xorlw	128
  6394  02D6  0020               	movlb	0	; select bank0
  6395  02D7  00E1               	movwf	??_sprintf
  6396  02D8  3080               	movlw	128
  6397  02D9  0261               	subwf	??_sprintf,w
  6398  02DA  1D03               	skipz
  6399  02DB  2ADF               	goto	u4205
  6400  02DC  300D               	movlw	13
  6401  02DD  0021               	movlb	1	; select bank1
  6402  02DE  0236               	subwf	sprintf@prec^(0+128),w
  6403  02DF                     u4205:	
  6404  02DF  1803               	skipnc
  6405  02E0  2B08               	goto	l3363
  6406                           
  6407                           ;doprnt.c: 1113: fval += fround(prec);
  6408  02E1  0021               	movlb	1	; select bank1
  6409  02E2  0836               	movf	sprintf@prec^(0+128),w
  6410  02E3  3189  2158  3180   	fcall	_fround
  6411  02E6  0020               	movlb	0	; select bank0
  6412  02E7  0838               	movf	?_fround,w
  6413  02E8  00C6               	movwf	___ftadd@f1
  6414  02E9  0839               	movf	?_fround+1,w
  6415  02EA  00C7               	movwf	___ftadd@f1+1
  6416  02EB  083A               	movf	?_fround+2,w
  6417  02EC  00C8               	movwf	___ftadd@f1+2
  6418  02ED  0021               	movlb	1	; select bank1
  6419  02EE  0832               	movf	sprintf@fval^(0+128),w
  6420  02EF  0020               	movlb	0	; select bank0
  6421  02F0  00C9               	movwf	___ftadd@f2
  6422  02F1  0021               	movlb	1	; select bank1
  6423  02F2  0833               	movf	(sprintf@fval+1)^(0+128),w
  6424  02F3  0020               	movlb	0	; select bank0
  6425  02F4  00CA               	movwf	___ftadd@f2+1
  6426  02F5  0021               	movlb	1	; select bank1
  6427  02F6  0834               	movf	(sprintf@fval+2)^(0+128),w
  6428  02F7  0020               	movlb	0	; select bank0
  6429  02F8  00CB               	movwf	___ftadd@f2+2
  6430  02F9  3197  270A  3180   	fcall	___ftadd
  6431  02FC  0020               	movlb	0	; select bank0
  6432  02FD  0846               	movf	?___ftadd,w
  6433  02FE  0021               	movlb	1	; select bank1
  6434  02FF  00B2               	movwf	sprintf@fval^(0+128)
  6435  0300  0020               	movlb	0	; select bank0
  6436  0301  0847               	movf	?___ftadd+1,w
  6437  0302  0021               	movlb	1	; select bank1
  6438  0303  00B3               	movwf	(sprintf@fval+1)^(0+128)
  6439  0304  0020               	movlb	0	; select bank0
  6440  0305  0848               	movf	?___ftadd+2,w
  6441  0306  0021               	movlb	1	; select bank1
  6442  0307  00B4               	movwf	(sprintf@fval+2)^(0+128)
  6443  0308                     l3363:	
  6444                           
  6445                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  6446  0308  0021               	movlb	1	; select bank1
  6447  0309  0831               	movf	(sprintf@exp+1)^(0+128),w
  6448  030A  3A80               	xorlw	128
  6449  030B  0020               	movlb	0	; select bank0
  6450  030C  00E1               	movwf	??_sprintf
  6451  030D  3080               	movlw	128
  6452  030E  0261               	subwf	??_sprintf,w
  6453  030F  1D03               	skipz
  6454  0310  2B14               	goto	u4215
  6455  0311  300A               	movlw	10
  6456  0312  0021               	movlb	1	; select bank1
  6457  0313  0230               	subwf	sprintf@exp^(0+128),w
  6458  0314                     u4215:	
  6459  0314  1803               	skipnc
  6460  0315  2B3F               	goto	l3371
  6461  0316  0021               	movlb	1	; select bank1
  6462  0317  0834               	movf	(sprintf@fval+2)^(0+128),w
  6463  0318  0433               	iorwf	(sprintf@fval+1)^(0+128),w
  6464  0319  0432               	iorwf	sprintf@fval^(0+128),w
  6465  031A  1903               	skipnz
  6466  031B  2B8C               	goto	l3385
  6467  031C  0832               	movf	sprintf@fval^(0+128),w
  6468  031D  0020               	movlb	0	; select bank0
  6469  031E  00C1               	movwf	___fttol@f1
  6470  031F  0021               	movlb	1	; select bank1
  6471  0320  0833               	movf	(sprintf@fval+1)^(0+128),w
  6472  0321  0020               	movlb	0	; select bank0
  6473  0322  00C2               	movwf	___fttol@f1+1
  6474  0323  0021               	movlb	1	; select bank1
  6475  0324  0834               	movf	(sprintf@fval+2)^(0+128),w
  6476  0325  0020               	movlb	0	; select bank0
  6477  0326  00C3               	movwf	___fttol@f1+2
  6478  0327  3194  2479  3180   	fcall	___fttol
  6479  032A  0020               	movlb	0	; select bank0
  6480  032B  0844               	movf	?___fttol+3,w
  6481  032C  0443               	iorwf	?___fttol+2,w
  6482  032D  0442               	iorwf	?___fttol+1,w
  6483  032E  0441               	iorwf	?___fttol,w
  6484  032F  1D03               	skipz
  6485  0330  2B8C               	goto	l3385
  6486  0331  0021               	movlb	1	; select bank1
  6487  0332  0831               	movf	(sprintf@exp+1)^(0+128),w
  6488  0333  3A80               	xorlw	128
  6489  0334  0020               	movlb	0	; select bank0
  6490  0335  00E1               	movwf	??_sprintf
  6491  0336  3080               	movlw	128
  6492  0337  0261               	subwf	??_sprintf,w
  6493  0338  1D03               	skipz
  6494  0339  2B3D               	goto	u4245
  6495  033A  3002               	movlw	2
  6496  033B  0021               	movlb	1	; select bank1
  6497  033C  0230               	subwf	sprintf@exp^(0+128),w
  6498  033D                     u4245:	
  6499  033D  1C03               	skipc
  6500  033E  2B8C               	goto	l3385
  6501  033F                     l3371:	
  6502                           
  6503                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  6504  033F  0021               	movlb	1	; select bank1
  6505  0340  0828               	movf	sprintf@tmpval^(0+128),w
  6506  0341  0020               	movlb	0	; select bank0
  6507  0342  00D3               	movwf	___ftge@ff1
  6508  0343  0021               	movlb	1	; select bank1
  6509  0344  0829               	movf	(sprintf@tmpval+1)^(0+128),w
  6510  0345  0020               	movlb	0	; select bank0
  6511  0346  00D4               	movwf	___ftge@ff1+1
  6512  0347  0021               	movlb	1	; select bank1
  6513  0348  082A               	movf	(sprintf@tmpval+2)^(0+128),w
  6514  0349  0020               	movlb	0	; select bank0
  6515  034A  00D5               	movwf	___ftge@ff1+2
  6516  034B  3070               	movlw	112
  6517  034C  00D6               	movwf	___ftge@ff2
  6518  034D  3089               	movlw	137
  6519  034E  00D7               	movwf	___ftge@ff2+1
  6520  034F  3040               	movlw	64
  6521  0350  00D8               	movwf	___ftge@ff2+2
  6522  0351  3190  20DF  3180   	fcall	___ftge
  6523  0354  1803               	btfsc	3,0
  6524  0355  2B58               	goto	l3375
  6525                           
  6526                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  6527  0356  30F7               	movlw	247
  6528  0357  2B59               	goto	L2
  6529  0358                     l3375:	
  6530                           ;doprnt.c: 1122: }else{
  6531                           
  6532                           
  6533                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  6534  0358  30F8               	movlw	248
  6535  0359                     L2:	
  6536  0359  0021               	movlb	1	; select bank1
  6537  035A  07B0               	addwf	sprintf@exp^(0+128),f
  6538  035B  30FF               	movlw	255
  6539  035C  3DB1               	addwfc	(sprintf@exp+1)^(0+128),f
  6540                           
  6541                           ;doprnt.c: 1124: }
  6542                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  6543  035D  0830               	movf	sprintf@exp^(0+128),w
  6544  035E  318A  22BD  3180   	fcall	_scale
  6545  0361  0020               	movlb	0	; select bank0
  6546  0362  0838               	movf	?_scale,w
  6547  0363  0021               	movlb	1	; select bank1
  6548  0364  00A8               	movwf	sprintf@tmpval^(0+128)
  6549  0365  0020               	movlb	0	; select bank0
  6550  0366  0839               	movf	?_scale+1,w
  6551  0367  0021               	movlb	1	; select bank1
  6552  0368  00A9               	movwf	(sprintf@tmpval+1)^(0+128)
  6553  0369  0020               	movlb	0	; select bank0
  6554  036A  083A               	movf	?_scale+2,w
  6555  036B  0021               	movlb	1	; select bank1
  6556  036C  00AA               	movwf	(sprintf@tmpval+2)^(0+128)
  6557                           
  6558                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  6559  036D  0832               	movf	sprintf@fval^(0+128),w
  6560  036E  00F0               	movwf	__tdiv_to_l_@f1
  6561  036F  0833               	movf	(sprintf@fval+1)^(0+128),w
  6562  0370  00F1               	movwf	__tdiv_to_l_@f1+1
  6563  0371  0834               	movf	(sprintf@fval+2)^(0+128),w
  6564  0372  00F2               	movwf	__tdiv_to_l_@f1+2
  6565  0373  0828               	movf	sprintf@tmpval^(0+128),w
  6566  0374  00F3               	movwf	__tdiv_to_l_@f2
  6567  0375  0829               	movf	(sprintf@tmpval+1)^(0+128),w
  6568  0376  00F4               	movwf	__tdiv_to_l_@f2+1
  6569  0377  082A               	movf	(sprintf@tmpval+2)^(0+128),w
  6570  0378  00F5               	movwf	__tdiv_to_l_@f2+2
  6571  0379  3180  201B  3180   	fcall	__tdiv_to_l_
  6572  037C  0873               	movf	?__tdiv_to_l_+3,w
  6573  037D  0021               	movlb	1	; select bank1
  6574  037E  00AF               	movwf	(sprintf@val+3)^(0+128)
  6575  037F  0872               	movf	?__tdiv_to_l_+2,w
  6576  0380  00AE               	movwf	(sprintf@val+2)^(0+128)
  6577  0381  0871               	movf	?__tdiv_to_l_+1,w
  6578  0382  00AD               	movwf	(sprintf@val+1)^(0+128)
  6579  0383  0870               	movf	?__tdiv_to_l_,w
  6580  0384  00AC               	movwf	sprintf@val^(0+128)
  6581                           
  6582                           ;doprnt.c: 1129: fval = 0.0;
  6583  0385  3000               	movlw	0
  6584  0386  00B2               	movwf	sprintf@fval^(0+128)
  6585  0387  3000               	movlw	0
  6586  0388  00B3               	movwf	(sprintf@fval+1)^(0+128)
  6587  0389  3000               	movlw	0
  6588  038A  00B4               	movwf	(sprintf@fval+2)^(0+128)
  6589                           
  6590                           ;doprnt.c: 1130: } else {
  6591  038B  2BDA               	goto	l3389
  6592  038C                     l3385:	
  6593                           
  6594                           ;doprnt.c: 1131: val = (unsigned long)fval;
  6595  038C  0021               	movlb	1	; select bank1
  6596  038D  0832               	movf	sprintf@fval^(0+128),w
  6597  038E  0020               	movlb	0	; select bank0
  6598  038F  00C1               	movwf	___fttol@f1
  6599  0390  0021               	movlb	1	; select bank1
  6600  0391  0833               	movf	(sprintf@fval+1)^(0+128),w
  6601  0392  0020               	movlb	0	; select bank0
  6602  0393  00C2               	movwf	___fttol@f1+1
  6603  0394  0021               	movlb	1	; select bank1
  6604  0395  0834               	movf	(sprintf@fval+2)^(0+128),w
  6605  0396  0020               	movlb	0	; select bank0
  6606  0397  00C3               	movwf	___fttol@f1+2
  6607  0398  3194  2479  3180   	fcall	___fttol
  6608  039B  0020               	movlb	0	; select bank0
  6609  039C  0844               	movf	?___fttol+3,w
  6610  039D  0021               	movlb	1	; select bank1
  6611  039E  00AF               	movwf	(sprintf@val+3)^(0+128)
  6612  039F  0020               	movlb	0	; select bank0
  6613  03A0  0843               	movf	?___fttol+2,w
  6614  03A1  0021               	movlb	1	; select bank1
  6615  03A2  00AE               	movwf	(sprintf@val+2)^(0+128)
  6616  03A3  0020               	movlb	0	; select bank0
  6617  03A4  0842               	movf	?___fttol+1,w
  6618  03A5  0021               	movlb	1	; select bank1
  6619  03A6  00AD               	movwf	(sprintf@val+1)^(0+128)
  6620  03A7  0020               	movlb	0	; select bank0
  6621  03A8  0841               	movf	?___fttol,w
  6622  03A9  0021               	movlb	1	; select bank1
  6623  03AA  00AC               	movwf	sprintf@val^(0+128)
  6624                           
  6625                           ;doprnt.c: 1132: fval -= (double)val;
  6626  03AB  082F               	movf	(sprintf@val+3)^(0+128),w
  6627  03AC  00FB               	movwf	___lltoft@c+3
  6628  03AD  082E               	movf	(sprintf@val+2)^(0+128),w
  6629  03AE  00FA               	movwf	___lltoft@c+2
  6630  03AF  082D               	movf	(sprintf@val+1)^(0+128),w
  6631  03B0  00F9               	movwf	___lltoft@c+1
  6632  03B1  082C               	movf	sprintf@val^(0+128),w
  6633  03B2  00F8               	movwf	___lltoft@c
  6634  03B3  3190  204F  3180   	fcall	___lltoft
  6635  03B6  0878               	movf	?___lltoft,w
  6636  03B7  0020               	movlb	0	; select bank0
  6637  03B8  00D3               	movwf	___ftsub@f2
  6638  03B9  0879               	movf	?___lltoft+1,w
  6639  03BA  00D4               	movwf	___ftsub@f2+1
  6640  03BB  087A               	movf	?___lltoft+2,w
  6641  03BC  00D5               	movwf	___ftsub@f2+2
  6642  03BD  0021               	movlb	1	; select bank1
  6643  03BE  0832               	movf	sprintf@fval^(0+128),w
  6644  03BF  0020               	movlb	0	; select bank0
  6645  03C0  00D6               	movwf	___ftsub@f1
  6646  03C1  0021               	movlb	1	; select bank1
  6647  03C2  0833               	movf	(sprintf@fval+1)^(0+128),w
  6648  03C3  0020               	movlb	0	; select bank0
  6649  03C4  00D7               	movwf	___ftsub@f1+1
  6650  03C5  0021               	movlb	1	; select bank1
  6651  03C6  0834               	movf	(sprintf@fval+2)^(0+128),w
  6652  03C7  0020               	movlb	0	; select bank0
  6653  03C8  00D8               	movwf	___ftsub@f1+2
  6654  03C9  319F  27C2  3180   	fcall	___ftsub
  6655  03CC  0020               	movlb	0	; select bank0
  6656  03CD  0853               	movf	?___ftsub,w
  6657  03CE  0021               	movlb	1	; select bank1
  6658  03CF  00B2               	movwf	sprintf@fval^(0+128)
  6659  03D0  0020               	movlb	0	; select bank0
  6660  03D1  0854               	movf	?___ftsub+1,w
  6661  03D2  0021               	movlb	1	; select bank1
  6662  03D3  00B3               	movwf	(sprintf@fval+1)^(0+128)
  6663  03D4  0020               	movlb	0	; select bank0
  6664  03D5  0855               	movf	?___ftsub+2,w
  6665  03D6  0021               	movlb	1	; select bank1
  6666  03D7  00B4               	movwf	(sprintf@fval+2)^(0+128)
  6667                           
  6668                           ;doprnt.c: 1133: exp = 0;
  6669  03D8  01B0               	clrf	sprintf@exp^(0+128)
  6670  03D9  01B1               	clrf	(sprintf@exp+1)^(0+128)
  6671  03DA                     l3389:	
  6672                           
  6673                           ;doprnt.c: 1134: }
  6674                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  6675  03DA  01B8               	clrf	sprintf@c^(0+128)
  6676  03DB  0AB8               	incf	sprintf@c^(0+128),f
  6677  03DC  300A               	movlw	10
  6678  03DD  0638               	xorwf	sprintf@c^(0+128),w
  6679  03DE  1903               	btfsc	3,2
  6680  03DF  2C17               	goto	l3401
  6681  03E0                     l3395:	
  6682                           
  6683                           ;doprnt.c: 1137: if(val < dpowers[c])
  6684  03E0  0838               	movf	sprintf@c^(0+128),w
  6685  03E1  0020               	movlb	0	; select bank0
  6686  03E2  00E1               	movwf	??_sprintf
  6687  03E3  01E2               	clrf	??_sprintf+1
  6688  03E4  35E1               	lslf	??_sprintf,f
  6689  03E5  0DE2               	rlf	??_sprintf+1,f
  6690  03E6  35E1               	lslf	??_sprintf,f
  6691  03E7  0DE2               	rlf	??_sprintf+1,f
  6692  03E8  3000               	movlw	low (_dpowers| (0+32768))
  6693  03E9  0761               	addwf	??_sprintf,w
  6694  03EA  0084               	movwf	4
  6695  03EB  3098               	movlw	high (_dpowers| (0+32768))
  6696  03EC  3D62               	addwfc	??_sprintf+1,w
  6697  03ED  0085               	movwf	5
  6698  03EE  3F00               	moviw [0]fsr0
  6699  03EF  00E3               	movwf	??_sprintf+2
  6700  03F0  3F01               	moviw [1]fsr0
  6701  03F1  00E4               	movwf	??_sprintf+3
  6702  03F2  3F02               	moviw [2]fsr0
  6703  03F3  00E5               	movwf	??_sprintf+4
  6704  03F4  3F03               	moviw [3]fsr0
  6705  03F5  00E6               	movwf	??_sprintf+5
  6706  03F6  0866               	movf	??_sprintf+5,w
  6707  03F7  0021               	movlb	1	; select bank1
  6708  03F8  022F               	subwf	(sprintf@val+3)^(0+128),w
  6709  03F9  1D03               	skipz
  6710  03FA  2C0B               	goto	u4275
  6711  03FB  0020               	movlb	0	; select bank0
  6712  03FC  0865               	movf	??_sprintf+4,w
  6713  03FD  0021               	movlb	1	; select bank1
  6714  03FE  022E               	subwf	(sprintf@val+2)^(0+128),w
  6715  03FF  1D03               	skipz
  6716  0400  2C0B               	goto	u4275
  6717  0401  0020               	movlb	0	; select bank0
  6718  0402  0864               	movf	??_sprintf+3,w
  6719  0403  0021               	movlb	1	; select bank1
  6720  0404  022D               	subwf	(sprintf@val+1)^(0+128),w
  6721  0405  1D03               	skipz
  6722  0406  2C0B               	goto	u4275
  6723  0407  0020               	movlb	0	; select bank0
  6724  0408  0863               	movf	??_sprintf+2,w
  6725  0409  0021               	movlb	1	; select bank1
  6726  040A  022C               	subwf	sprintf@val^(0+128),w
  6727  040B                     u4275:	
  6728  040B  1C03               	btfss	3,0
  6729  040C  2C17               	goto	l3401
  6730                           
  6731                           ;doprnt.c: 1138: break;
  6732  040D  3001               	movlw	1
  6733  040E  0020               	movlb	0	; select bank0
  6734  040F  00E1               	movwf	??_sprintf
  6735  0410  0861               	movf	??_sprintf,w
  6736  0411  0021               	movlb	1	; select bank1
  6737  0412  07B8               	addwf	sprintf@c^(0+128),f
  6738  0413  300A               	movlw	10
  6739  0414  0638               	xorwf	sprintf@c^(0+128),w
  6740  0415  1D03               	btfss	3,2
  6741  0416  2BE0               	goto	l3395
  6742  0417                     l3401:	
  6743                           
  6744                           ;doprnt.c: 1142: width -= prec + c + exp;
  6745  0417  0838               	movf	sprintf@c^(0+128),w
  6746  0418  0020               	movlb	0	; select bank0
  6747  0419  00E1               	movwf	??_sprintf
  6748  041A  01E2               	clrf	??_sprintf+1
  6749  041B  1BE1               	btfsc	??_sprintf,7
  6750  041C  03E2               	decf	??_sprintf+1,f
  6751  041D  0021               	movlb	1	; select bank1
  6752  041E  0836               	movf	sprintf@prec^(0+128),w
  6753  041F  0020               	movlb	0	; select bank0
  6754  0420  0761               	addwf	??_sprintf,w
  6755  0421  00E3               	movwf	??_sprintf+2
  6756  0422  0021               	movlb	1	; select bank1
  6757  0423  0837               	movf	(sprintf@prec+1)^(0+128),w
  6758  0424  0020               	movlb	0	; select bank0
  6759  0425  3D62               	addwfc	??_sprintf+1,w
  6760  0426  00E4               	movwf	??_sprintf+3
  6761  0427  0021               	movlb	1	; select bank1
  6762  0428  0830               	movf	sprintf@exp^(0+128),w
  6763  0429  0020               	movlb	0	; select bank0
  6764  042A  0763               	addwf	??_sprintf+2,w
  6765  042B  00E5               	movwf	??_sprintf+4
  6766  042C  0021               	movlb	1	; select bank1
  6767  042D  0831               	movf	(sprintf@exp+1)^(0+128),w
  6768  042E  0020               	movlb	0	; select bank0
  6769  042F  3D64               	addwfc	??_sprintf+3,w
  6770  0430  00E6               	movwf	??_sprintf+5
  6771  0431  0865               	movf	??_sprintf+4,w
  6772  0432  0021               	movlb	1	; select bank1
  6773  0433  02A6               	subwf	sprintf@width^(0+128),f
  6774  0434  0020               	movlb	0	; select bank0
  6775  0435  0866               	movf	??_sprintf+5,w
  6776  0436  0021               	movlb	1	; select bank1
  6777  0437  3BA7               	subwfb	(sprintf@width+1)^(0+128),f
  6778                           
  6779                           ;doprnt.c: 1143: if(
  6780                           ;doprnt.c: 1147: prec)
  6781  0438  0836               	movf	sprintf@prec^(0+128),w
  6782  0439  0437               	iorwf	(sprintf@prec+1)^(0+128),w
  6783  043A  1903               	btfsc	3,2
  6784  043B  2C40               	goto	l3405
  6785                           
  6786                           ;doprnt.c: 1148: width--;
  6787  043C  30FF               	movlw	255
  6788  043D  07A6               	addwf	sprintf@width^(0+128),f
  6789  043E  30FF               	movlw	255
  6790  043F  3DA7               	addwfc	(sprintf@width+1)^(0+128),f
  6791  0440                     l3405:	
  6792                           
  6793                           ;doprnt.c: 1149: if(flag & 0x03)
  6794  0440  3003               	movlw	3
  6795  0441  0524               	andwf	sprintf@flag^(0+128),w
  6796  0442  0020               	movlb	0	; select bank0
  6797  0443  00E1               	movwf	??_sprintf
  6798  0444  3000               	movlw	0
  6799  0445  0021               	movlb	1	; select bank1
  6800  0446  0525               	andwf	(sprintf@flag+1)^(0+128),w
  6801  0447  0020               	movlb	0	; select bank0
  6802  0448  00E2               	movwf	??_sprintf+1
  6803  0449  0861               	movf	??_sprintf,w
  6804  044A  0462               	iorwf	??_sprintf+1,w
  6805  044B  1903               	btfsc	3,2
  6806  044C  2C52               	goto	l3415
  6807                           
  6808                           ;doprnt.c: 1150: width--;
  6809  044D  30FF               	movlw	255
  6810  044E  0021               	movlb	1	; select bank1
  6811  044F                     L3:	
  6812  044F  07A6               	addwf	sprintf@width^(0+128),f
  6813  0450  30FF               	movlw	255
  6814  0451  3DA7               	addwfc	(sprintf@width+1)^(0+128),f
  6815  0452                     l3415:	
  6816  0452  0021               	movlb	1	; select bank1
  6817  0453  0827               	movf	(sprintf@width+1)^(0+128),w
  6818  0454  3A80               	xorlw	128
  6819  0455  0020               	movlb	0	; select bank0
  6820  0456  00E1               	movwf	??_sprintf
  6821  0457  3080               	movlw	128
  6822  0458  0261               	subwf	??_sprintf,w
  6823  0459  1D03               	skipz
  6824  045A  2C5E               	goto	u4315
  6825  045B  3001               	movlw	1
  6826  045C  0021               	movlb	1	; select bank1
  6827  045D  0226               	subwf	sprintf@width^(0+128),w
  6828  045E                     u4315:	
  6829  045E  1C03               	btfss	3,0
  6830  045F  2C71               	goto	l3417
  6831                           
  6832                           ;doprnt.c: 1181: ((*sp++ = (' ')));
  6833                           
  6834                           ;doprnt.c: 1175: {
  6835                           ;doprnt.c: 1180: while(width > 0) {
  6836  0460  3020               	movlw	32
  6837  0461  0020               	movlb	0	; select bank0
  6838  0462  00E1               	movwf	??_sprintf
  6839  0463  0021               	movlb	1	; select bank1
  6840  0464  0835               	movf	sprintf@sp^(0+128),w
  6841  0465  0086               	movwf	6
  6842  0466  0187               	clrf	7
  6843  0467  0020               	movlb	0	; select bank0
  6844  0468  0861               	movf	??_sprintf,w
  6845  0469  0081               	movwf	1
  6846  046A  3001               	movlw	1
  6847  046B  00E1               	movwf	??_sprintf
  6848  046C  0861               	movf	??_sprintf,w
  6849  046D  0021               	movlb	1	; select bank1
  6850  046E  07B5               	addwf	sprintf@sp^(0+128),f
  6851                           
  6852                           ;doprnt.c: 1182: width--;
  6853  046F  30FF               	movlw	255
  6854  0470  2C4F               	goto	L3
  6855  0471                     l3417:	
  6856                           
  6857                           ;doprnt.c: 1183: }
  6858                           ;doprnt.c: 1188: if(flag & 0x03)
  6859  0471  3003               	movlw	3
  6860  0472  0021               	movlb	1	; select bank1
  6861  0473  0524               	andwf	sprintf@flag^(0+128),w
  6862  0474  0020               	movlb	0	; select bank0
  6863  0475  00E1               	movwf	??_sprintf
  6864  0476  3000               	movlw	0
  6865  0477  0021               	movlb	1	; select bank1
  6866  0478  0525               	andwf	(sprintf@flag+1)^(0+128),w
  6867  0479  0020               	movlb	0	; select bank0
  6868  047A  00E2               	movwf	??_sprintf+1
  6869  047B  0861               	movf	??_sprintf,w
  6870  047C  0462               	iorwf	??_sprintf+1,w
  6871  047D  1903               	btfsc	3,2
  6872  047E  2C8D               	goto	l3431
  6873                           
  6874                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  6875  047F  302D               	movlw	45
  6876  0480                     L6:	
  6877  0480  00E1               	movwf	??_sprintf
  6878  0481  0021               	movlb	1	; select bank1
  6879  0482  0835               	movf	sprintf@sp^(0+128),w
  6880  0483  0086               	movwf	6
  6881  0484  0187               	clrf	7
  6882  0485  0020               	movlb	0	; select bank0
  6883  0486  0861               	movf	??_sprintf,w
  6884  0487  0081               	movwf	1
  6885  0488  3001               	movlw	1
  6886  0489  00E1               	movwf	??_sprintf
  6887  048A  0861               	movf	??_sprintf,w
  6888  048B  0021               	movlb	1	; select bank1
  6889  048C  07B5               	addwf	sprintf@sp^(0+128),f
  6890  048D                     l3431:	
  6891  048D  30FF               	movlw	255
  6892  048E  0020               	movlb	0	; select bank0
  6893  048F  00E1               	movwf	??_sprintf
  6894  0490  0861               	movf	??_sprintf,w
  6895  0491  0021               	movlb	1	; select bank1
  6896  0492  07B8               	addwf	sprintf@c^(0+128),f
  6897  0493  0A38               	incf	sprintf@c^(0+128),w
  6898  0494  1903               	btfsc	3,2
  6899  0495  2D04               	goto	l3439
  6900                           
  6901                           ;doprnt.c: 1200: {
  6902                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  6903                           
  6904                           ;doprnt.c: 1195: }
  6905                           ;doprnt.c: 1196: while(c--) {
  6906  0496  0838               	movf	sprintf@c^(0+128),w
  6907  0497  0020               	movlb	0	; select bank0
  6908  0498  00E1               	movwf	??_sprintf
  6909  0499  01E2               	clrf	??_sprintf+1
  6910  049A  35E1               	lslf	??_sprintf,f
  6911  049B  0DE2               	rlf	??_sprintf+1,f
  6912  049C  35E1               	lslf	??_sprintf,f
  6913  049D  0DE2               	rlf	??_sprintf+1,f
  6914  049E  3000               	movlw	low (_dpowers| (0+32768))
  6915  049F  0761               	addwf	??_sprintf,w
  6916  04A0  0084               	movwf	4
  6917  04A1  3098               	movlw	high (_dpowers| (0+32768))
  6918  04A2  3D62               	addwfc	??_sprintf+1,w
  6919  04A3  0085               	movwf	5
  6920  04A4  3F00               	moviw [0]fsr0
  6921  04A5  00F0               	movwf	___lldiv@divisor
  6922  04A6  3F01               	moviw [1]fsr0
  6923  04A7  00F1               	movwf	___lldiv@divisor+1
  6924  04A8  3F02               	moviw [2]fsr0
  6925  04A9  00F2               	movwf	___lldiv@divisor+2
  6926  04AA  3F03               	moviw [3]fsr0
  6927  04AB  00F3               	movwf	___lldiv@divisor+3
  6928  04AC  0021               	movlb	1	; select bank1
  6929  04AD  082F               	movf	(sprintf@val+3)^(0+128),w
  6930  04AE  00F7               	movwf	___lldiv@dividend+3
  6931  04AF  082E               	movf	(sprintf@val+2)^(0+128),w
  6932  04B0  00F6               	movwf	___lldiv@dividend+2
  6933  04B1  082D               	movf	(sprintf@val+1)^(0+128),w
  6934  04B2  00F5               	movwf	___lldiv@dividend+1
  6935  04B3  082C               	movf	sprintf@val^(0+128),w
  6936  04B4  00F4               	movwf	___lldiv@dividend
  6937  04B5  3191  21A3  3180   	fcall	___lldiv
  6938  04B8  0873               	movf	?___lldiv+3,w
  6939  04B9  0021               	movlb	1	; select bank1
  6940  04BA  00AB               	movwf	(sprintf@tmpval+3)^(0+128)
  6941  04BB  0872               	movf	?___lldiv+2,w
  6942  04BC  00AA               	movwf	(sprintf@tmpval+2)^(0+128)
  6943  04BD  0871               	movf	?___lldiv+1,w
  6944  04BE  00A9               	movwf	(sprintf@tmpval+1)^(0+128)
  6945  04BF  0870               	movf	?___lldiv,w
  6946  04C0  00A8               	movwf	sprintf@tmpval^(0+128)
  6947                           
  6948                           ;doprnt.c: 1202: tmpval.vd %= 10;
  6949  04C1  3000               	movlw	0
  6950  04C2  0020               	movlb	0	; select bank0
  6951  04C3  00A3               	movwf	___llmod@divisor+3
  6952  04C4  3000               	movlw	0
  6953  04C5  00A2               	movwf	___llmod@divisor+2
  6954  04C6  3000               	movlw	0
  6955  04C7  00A1               	movwf	___llmod@divisor+1
  6956  04C8  300A               	movlw	10
  6957  04C9  00A0               	movwf	___llmod@divisor
  6958  04CA  0021               	movlb	1	; select bank1
  6959  04CB  082B               	movf	(sprintf@tmpval+3)^(0+128),w
  6960  04CC  0020               	movlb	0	; select bank0
  6961  04CD  00A7               	movwf	___llmod@dividend+3
  6962  04CE  0021               	movlb	1	; select bank1
  6963  04CF  082A               	movf	(sprintf@tmpval+2)^(0+128),w
  6964  04D0  0020               	movlb	0	; select bank0
  6965  04D1  00A6               	movwf	___llmod@dividend+2
  6966  04D2  0021               	movlb	1	; select bank1
  6967  04D3  0829               	movf	(sprintf@tmpval+1)^(0+128),w
  6968  04D4  0020               	movlb	0	; select bank0
  6969  04D5  00A5               	movwf	___llmod@dividend+1
  6970  04D6  0021               	movlb	1	; select bank1
  6971  04D7  0828               	movf	sprintf@tmpval^(0+128),w
  6972  04D8  0020               	movlb	0	; select bank0
  6973  04D9  00A4               	movwf	___llmod@dividend
  6974  04DA  3191  211B  3180   	fcall	___llmod
  6975  04DD  0020               	movlb	0	; select bank0
  6976  04DE  0823               	movf	?___llmod+3,w
  6977  04DF  0021               	movlb	1	; select bank1
  6978  04E0  00AB               	movwf	(sprintf@tmpval+3)^(0+128)
  6979  04E1  0020               	movlb	0	; select bank0
  6980  04E2  0822               	movf	?___llmod+2,w
  6981  04E3  0021               	movlb	1	; select bank1
  6982  04E4  00AA               	movwf	(sprintf@tmpval+2)^(0+128)
  6983  04E5  0020               	movlb	0	; select bank0
  6984  04E6  0821               	movf	?___llmod+1,w
  6985  04E7  0021               	movlb	1	; select bank1
  6986  04E8  00A9               	movwf	(sprintf@tmpval+1)^(0+128)
  6987  04E9  0020               	movlb	0	; select bank0
  6988  04EA  0820               	movf	?___llmod,w
  6989  04EB  0021               	movlb	1	; select bank1
  6990  04EC  00A8               	movwf	sprintf@tmpval^(0+128)
  6991                           
  6992                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  6993  04ED  0828               	movf	sprintf@tmpval^(0+128),w
  6994  04EE  3E30               	addlw	48
  6995  04EF  0020               	movlb	0	; select bank0
  6996  04F0  2C80               	goto	L6
  6997  04F1                     l3433:	
  6998                           ;doprnt.c: 1204: }
  6999                           ;doprnt.c: 1206: }
  7000                           ;doprnt.c: 1207: while(exp > 0) {
  7001                           
  7002                           
  7003                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  7004  04F1  3030               	movlw	48
  7005  04F2  0020               	movlb	0	; select bank0
  7006  04F3  00E1               	movwf	??_sprintf
  7007  04F4  0021               	movlb	1	; select bank1
  7008  04F5  0835               	movf	sprintf@sp^(0+128),w
  7009  04F6  0086               	movwf	6
  7010  04F7  0187               	clrf	7
  7011  04F8  0020               	movlb	0	; select bank0
  7012  04F9  0861               	movf	??_sprintf,w
  7013  04FA  0081               	movwf	1
  7014  04FB  3001               	movlw	1
  7015  04FC  00E1               	movwf	??_sprintf
  7016  04FD  0861               	movf	??_sprintf,w
  7017  04FE  0021               	movlb	1	; select bank1
  7018  04FF  07B5               	addwf	sprintf@sp^(0+128),f
  7019                           
  7020                           ;doprnt.c: 1209: exp--;
  7021  0500  30FF               	movlw	255
  7022  0501  07B0               	addwf	sprintf@exp^(0+128),f
  7023  0502  30FF               	movlw	255
  7024  0503  3DB1               	addwfc	(sprintf@exp+1)^(0+128),f
  7025  0504                     l3439:	
  7026  0504  0831               	movf	(sprintf@exp+1)^(0+128),w
  7027  0505  3A80               	xorlw	128
  7028  0506  0020               	movlb	0	; select bank0
  7029  0507  00E1               	movwf	??_sprintf
  7030  0508  3080               	movlw	128
  7031  0509  0261               	subwf	??_sprintf,w
  7032  050A  1D03               	skipz
  7033  050B  2D0F               	goto	u4345
  7034  050C  3001               	movlw	1
  7035  050D  0021               	movlb	1	; select bank1
  7036  050E  0230               	subwf	sprintf@exp^(0+128),w
  7037  050F                     u4345:	
  7038  050F  1803               	skipnc
  7039  0510  2CF1               	goto	l3433
  7040                           
  7041                           ;doprnt.c: 1210: }
  7042                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  7043  0511  0021               	movlb	1	; select bank1
  7044  0512  0837               	movf	(sprintf@prec+1)^(0+128),w
  7045  0513  3A80               	xorlw	128
  7046  0514  0020               	movlb	0	; select bank0
  7047  0515  00E1               	movwf	??_sprintf
  7048  0516  3080               	movlw	128
  7049  0517  0261               	subwf	??_sprintf,w
  7050  0518  1D03               	skipz
  7051  0519  2D1D               	goto	u4355
  7052  051A  3009               	movlw	9
  7053  051B  0021               	movlb	1	; select bank1
  7054  051C  0236               	subwf	sprintf@prec^(0+128),w
  7055  051D                     u4355:	
  7056  051D  1C03               	skipc
  7057  051E  2D21               	goto	l3445
  7058                           
  7059                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  7060  051F  3008               	movlw	8
  7061  0520  2D23               	goto	L4
  7062  0521                     l3445:	
  7063                           
  7064                           ;doprnt.c: 1213: else
  7065                           ;doprnt.c: 1214: c = prec;
  7066  0521  0021               	movlb	1	; select bank1
  7067  0522  0836               	movf	sprintf@prec^(0+128),w
  7068  0523                     L4:	
  7069  0523  0020               	movlb	0	; select bank0
  7070  0524  00E1               	movwf	??_sprintf
  7071  0525  0861               	movf	??_sprintf,w
  7072  0526  0021               	movlb	1	; select bank1
  7073  0527  00B8               	movwf	sprintf@c^(0+128)
  7074                           
  7075                           ;doprnt.c: 1215: prec -= c;
  7076  0528  0838               	movf	sprintf@c^(0+128),w
  7077  0529  0020               	movlb	0	; select bank0
  7078  052A  00E1               	movwf	??_sprintf
  7079  052B  01E2               	clrf	??_sprintf+1
  7080  052C  1BE1               	btfsc	??_sprintf,7
  7081  052D  03E2               	decf	??_sprintf+1,f
  7082  052E  0861               	movf	??_sprintf,w
  7083  052F  0021               	movlb	1	; select bank1
  7084  0530  02B6               	subwf	sprintf@prec^(0+128),f
  7085  0531  0020               	movlb	0	; select bank0
  7086  0532  0862               	movf	??_sprintf+1,w
  7087  0533  0021               	movlb	1	; select bank1
  7088  0534  3BB7               	subwfb	(sprintf@prec+1)^(0+128),f
  7089                           
  7090                           ;doprnt.c: 1219: if(c)
  7091  0535  0838               	movf	sprintf@c^(0+128),w
  7092  0536  1903               	btfsc	3,2
  7093  0537  2D47               	goto	l3453
  7094                           
  7095                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  7096  0538  302E               	movlw	46
  7097  0539  0020               	movlb	0	; select bank0
  7098  053A  00E1               	movwf	??_sprintf
  7099  053B  0021               	movlb	1	; select bank1
  7100  053C  0835               	movf	sprintf@sp^(0+128),w
  7101  053D  0086               	movwf	6
  7102  053E  0187               	clrf	7
  7103  053F  0020               	movlb	0	; select bank0
  7104  0540  0861               	movf	??_sprintf,w
  7105  0541  0081               	movwf	1
  7106  0542  3001               	movlw	1
  7107  0543  00E1               	movwf	??_sprintf
  7108  0544  0861               	movf	??_sprintf,w
  7109  0545  0021               	movlb	1	; select bank1
  7110  0546  07B5               	addwf	sprintf@sp^(0+128),f
  7111  0547                     l3453:	
  7112                           
  7113                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  7114  0547  0838               	movf	sprintf@c^(0+128),w
  7115  0548  318A  22BD  3180   	fcall	_scale
  7116  054B  0020               	movlb	0	; select bank0
  7117  054C  0838               	movf	?_scale,w
  7118  054D  0021               	movlb	1	; select bank1
  7119  054E  00A0               	movwf	_sprintf$1017^(0+128)
  7120  054F  0020               	movlb	0	; select bank0
  7121  0550  0839               	movf	?_scale+1,w
  7122  0551  0021               	movlb	1	; select bank1
  7123  0552  00A1               	movwf	(_sprintf$1017+1)^(0+128)
  7124  0553  0020               	movlb	0	; select bank0
  7125  0554  083A               	movf	?_scale+2,w
  7126  0555  0021               	movlb	1	; select bank1
  7127  0556  00A2               	movwf	(_sprintf$1017+2)^(0+128)
  7128                           
  7129                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  7130  0557  0820               	movf	_sprintf$1017^(0+128),w
  7131  0558  0020               	movlb	0	; select bank0
  7132  0559  00AB               	movwf	___ftmul@f2
  7133  055A  0021               	movlb	1	; select bank1
  7134  055B  0821               	movf	(_sprintf$1017+1)^(0+128),w
  7135  055C  0020               	movlb	0	; select bank0
  7136  055D  00AC               	movwf	___ftmul@f2+1
  7137  055E  0021               	movlb	1	; select bank1
  7138  055F  0822               	movf	(_sprintf$1017+2)^(0+128),w
  7139  0560  0020               	movlb	0	; select bank0
  7140  0561  00AD               	movwf	___ftmul@f2+2
  7141  0562  0021               	movlb	1	; select bank1
  7142  0563  0832               	movf	sprintf@fval^(0+128),w
  7143  0564  0020               	movlb	0	; select bank0
  7144  0565  00A8               	movwf	___ftmul@f1
  7145  0566  0021               	movlb	1	; select bank1
  7146  0567  0833               	movf	(sprintf@fval+1)^(0+128),w
  7147  0568  0020               	movlb	0	; select bank0
  7148  0569  00A9               	movwf	___ftmul@f1+1
  7149  056A  0021               	movlb	1	; select bank1
  7150  056B  0834               	movf	(sprintf@fval+2)^(0+128),w
  7151  056C  0020               	movlb	0	; select bank0
  7152  056D  00AA               	movwf	___ftmul@f1+2
  7153  056E  3196  2656  3180   	fcall	___ftmul
  7154  0571  0020               	movlb	0	; select bank0
  7155  0572  0828               	movf	?___ftmul,w
  7156  0573  00C1               	movwf	___fttol@f1
  7157  0574  0829               	movf	?___ftmul+1,w
  7158  0575  00C2               	movwf	___fttol@f1+1
  7159  0576  082A               	movf	?___ftmul+2,w
  7160  0577  00C3               	movwf	___fttol@f1+2
  7161  0578  3194  2479  3180   	fcall	___fttol
  7162  057B  0020               	movlb	0	; select bank0
  7163  057C  0844               	movf	?___fttol+3,w
  7164  057D  0021               	movlb	1	; select bank1
  7165  057E  00AF               	movwf	(sprintf@val+3)^(0+128)
  7166  057F  0020               	movlb	0	; select bank0
  7167  0580  0843               	movf	?___fttol+2,w
  7168  0581  0021               	movlb	1	; select bank1
  7169  0582  00AE               	movwf	(sprintf@val+2)^(0+128)
  7170  0583  0020               	movlb	0	; select bank0
  7171  0584  0842               	movf	?___fttol+1,w
  7172  0585  0021               	movlb	1	; select bank1
  7173  0586  00AD               	movwf	(sprintf@val+1)^(0+128)
  7174  0587  0020               	movlb	0	; select bank0
  7175  0588  0841               	movf	?___fttol,w
  7176  0589                     L5:	
  7177  0589  0021               	movlb	1	; select bank1
  7178  058A  00AC               	movwf	sprintf@val^(0+128)
  7179  058B  30FF               	movlw	255
  7180  058C  0020               	movlb	0	; select bank0
  7181  058D  00E1               	movwf	??_sprintf
  7182  058E  0861               	movf	??_sprintf,w
  7183  058F  0021               	movlb	1	; select bank1
  7184  0590  07B8               	addwf	sprintf@c^(0+128),f
  7185  0591  0A38               	incf	sprintf@c^(0+128),w
  7186  0592  1903               	btfsc	3,2
  7187  0593  2E46               	goto	l3475
  7188                           
  7189                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  7190                           
  7191                           ;doprnt.c: 1228: while(c--) {
  7192  0594  0838               	movf	sprintf@c^(0+128),w
  7193  0595  0020               	movlb	0	; select bank0
  7194  0596  00E1               	movwf	??_sprintf
  7195  0597  01E2               	clrf	??_sprintf+1
  7196  0598  35E1               	lslf	??_sprintf,f
  7197  0599  0DE2               	rlf	??_sprintf+1,f
  7198  059A  35E1               	lslf	??_sprintf,f
  7199  059B  0DE2               	rlf	??_sprintf+1,f
  7200  059C  3000               	movlw	low (_dpowers| (0+32768))
  7201  059D  0761               	addwf	??_sprintf,w
  7202  059E  0084               	movwf	4
  7203  059F  3098               	movlw	high (_dpowers| (0+32768))
  7204  05A0  3D62               	addwfc	??_sprintf+1,w
  7205  05A1  0085               	movwf	5
  7206  05A2  3F00               	moviw [0]fsr0
  7207  05A3  00F0               	movwf	___lldiv@divisor
  7208  05A4  3F01               	moviw [1]fsr0
  7209  05A5  00F1               	movwf	___lldiv@divisor+1
  7210  05A6  3F02               	moviw [2]fsr0
  7211  05A7  00F2               	movwf	___lldiv@divisor+2
  7212  05A8  3F03               	moviw [3]fsr0
  7213  05A9  00F3               	movwf	___lldiv@divisor+3
  7214  05AA  0021               	movlb	1	; select bank1
  7215  05AB  082F               	movf	(sprintf@val+3)^(0+128),w
  7216  05AC  00F7               	movwf	___lldiv@dividend+3
  7217  05AD  082E               	movf	(sprintf@val+2)^(0+128),w
  7218  05AE  00F6               	movwf	___lldiv@dividend+2
  7219  05AF  082D               	movf	(sprintf@val+1)^(0+128),w
  7220  05B0  00F5               	movwf	___lldiv@dividend+1
  7221  05B1  082C               	movf	sprintf@val^(0+128),w
  7222  05B2  00F4               	movwf	___lldiv@dividend
  7223  05B3  3191  21A3  3180   	fcall	___lldiv
  7224  05B6  0873               	movf	?___lldiv+3,w
  7225  05B7  0021               	movlb	1	; select bank1
  7226  05B8  00AB               	movwf	(sprintf@tmpval+3)^(0+128)
  7227  05B9  0872               	movf	?___lldiv+2,w
  7228  05BA  00AA               	movwf	(sprintf@tmpval+2)^(0+128)
  7229  05BB  0871               	movf	?___lldiv+1,w
  7230  05BC  00A9               	movwf	(sprintf@tmpval+1)^(0+128)
  7231  05BD  0870               	movf	?___lldiv,w
  7232  05BE  00A8               	movwf	sprintf@tmpval^(0+128)
  7233                           
  7234                           ;doprnt.c: 1230: tmpval.vd %= 10;
  7235  05BF  3000               	movlw	0
  7236  05C0  0020               	movlb	0	; select bank0
  7237  05C1  00A3               	movwf	___llmod@divisor+3
  7238  05C2  3000               	movlw	0
  7239  05C3  00A2               	movwf	___llmod@divisor+2
  7240  05C4  3000               	movlw	0
  7241  05C5  00A1               	movwf	___llmod@divisor+1
  7242  05C6  300A               	movlw	10
  7243  05C7  00A0               	movwf	___llmod@divisor
  7244  05C8  0021               	movlb	1	; select bank1
  7245  05C9  082B               	movf	(sprintf@tmpval+3)^(0+128),w
  7246  05CA  0020               	movlb	0	; select bank0
  7247  05CB  00A7               	movwf	___llmod@dividend+3
  7248  05CC  0021               	movlb	1	; select bank1
  7249  05CD  082A               	movf	(sprintf@tmpval+2)^(0+128),w
  7250  05CE  0020               	movlb	0	; select bank0
  7251  05CF  00A6               	movwf	___llmod@dividend+2
  7252  05D0  0021               	movlb	1	; select bank1
  7253  05D1  0829               	movf	(sprintf@tmpval+1)^(0+128),w
  7254  05D2  0020               	movlb	0	; select bank0
  7255  05D3  00A5               	movwf	___llmod@dividend+1
  7256  05D4  0021               	movlb	1	; select bank1
  7257  05D5  0828               	movf	sprintf@tmpval^(0+128),w
  7258  05D6  0020               	movlb	0	; select bank0
  7259  05D7  00A4               	movwf	___llmod@dividend
  7260  05D8  3191  211B  3180   	fcall	___llmod
  7261  05DB  0020               	movlb	0	; select bank0
  7262  05DC  0823               	movf	?___llmod+3,w
  7263  05DD  0021               	movlb	1	; select bank1
  7264  05DE  00AB               	movwf	(sprintf@tmpval+3)^(0+128)
  7265  05DF  0020               	movlb	0	; select bank0
  7266  05E0  0822               	movf	?___llmod+2,w
  7267  05E1  0021               	movlb	1	; select bank1
  7268  05E2  00AA               	movwf	(sprintf@tmpval+2)^(0+128)
  7269  05E3  0020               	movlb	0	; select bank0
  7270  05E4  0821               	movf	?___llmod+1,w
  7271  05E5  0021               	movlb	1	; select bank1
  7272  05E6  00A9               	movwf	(sprintf@tmpval+1)^(0+128)
  7273  05E7  0020               	movlb	0	; select bank0
  7274  05E8  0820               	movf	?___llmod,w
  7275  05E9  0021               	movlb	1	; select bank1
  7276  05EA  00A8               	movwf	sprintf@tmpval^(0+128)
  7277                           
  7278                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  7279  05EB  0828               	movf	sprintf@tmpval^(0+128),w
  7280  05EC  3E30               	addlw	48
  7281  05ED  0020               	movlb	0	; select bank0
  7282  05EE  00E1               	movwf	??_sprintf
  7283  05EF  0021               	movlb	1	; select bank1
  7284  05F0  0835               	movf	sprintf@sp^(0+128),w
  7285  05F1  0086               	movwf	6
  7286  05F2  0187               	clrf	7
  7287  05F3  0020               	movlb	0	; select bank0
  7288  05F4  0861               	movf	??_sprintf,w
  7289  05F5  0081               	movwf	1
  7290  05F6  3001               	movlw	1
  7291  05F7  00E1               	movwf	??_sprintf
  7292  05F8  0861               	movf	??_sprintf,w
  7293  05F9  0021               	movlb	1	; select bank1
  7294  05FA  07B5               	addwf	sprintf@sp^(0+128),f
  7295                           
  7296                           ;doprnt.c: 1232: val %= dpowers[c];
  7297  05FB  0838               	movf	sprintf@c^(0+128),w
  7298  05FC  0020               	movlb	0	; select bank0
  7299  05FD  00E1               	movwf	??_sprintf
  7300  05FE  01E2               	clrf	??_sprintf+1
  7301  05FF  35E1               	lslf	??_sprintf,f
  7302  0600  0DE2               	rlf	??_sprintf+1,f
  7303  0601  35E1               	lslf	??_sprintf,f
  7304  0602  0DE2               	rlf	??_sprintf+1,f
  7305  0603  3000               	movlw	low (_dpowers| (0+32768))
  7306  0604  0761               	addwf	??_sprintf,w
  7307  0605  0084               	movwf	4
  7308  0606  3098               	movlw	high (_dpowers| (0+32768))
  7309  0607  3D62               	addwfc	??_sprintf+1,w
  7310  0608  0085               	movwf	5
  7311  0609  3F00               	moviw [0]fsr0
  7312  060A  00A0               	movwf	___llmod@divisor
  7313  060B  3F01               	moviw [1]fsr0
  7314  060C  00A1               	movwf	___llmod@divisor+1
  7315  060D  3F02               	moviw [2]fsr0
  7316  060E  00A2               	movwf	___llmod@divisor+2
  7317  060F  3F03               	moviw [3]fsr0
  7318  0610  00A3               	movwf	___llmod@divisor+3
  7319  0611  0021               	movlb	1	; select bank1
  7320  0612  082F               	movf	(sprintf@val+3)^(0+128),w
  7321  0613  0020               	movlb	0	; select bank0
  7322  0614  00A7               	movwf	___llmod@dividend+3
  7323  0615  0021               	movlb	1	; select bank1
  7324  0616  082E               	movf	(sprintf@val+2)^(0+128),w
  7325  0617  0020               	movlb	0	; select bank0
  7326  0618  00A6               	movwf	___llmod@dividend+2
  7327  0619  0021               	movlb	1	; select bank1
  7328  061A  082D               	movf	(sprintf@val+1)^(0+128),w
  7329  061B  0020               	movlb	0	; select bank0
  7330  061C  00A5               	movwf	___llmod@dividend+1
  7331  061D  0021               	movlb	1	; select bank1
  7332  061E  082C               	movf	sprintf@val^(0+128),w
  7333  061F  0020               	movlb	0	; select bank0
  7334  0620  00A4               	movwf	___llmod@dividend
  7335  0621  3191  211B  3180   	fcall	___llmod
  7336  0624  0020               	movlb	0	; select bank0
  7337  0625  0823               	movf	?___llmod+3,w
  7338  0626  0021               	movlb	1	; select bank1
  7339  0627  00AF               	movwf	(sprintf@val+3)^(0+128)
  7340  0628  0020               	movlb	0	; select bank0
  7341  0629  0822               	movf	?___llmod+2,w
  7342  062A  0021               	movlb	1	; select bank1
  7343  062B  00AE               	movwf	(sprintf@val+2)^(0+128)
  7344  062C  0020               	movlb	0	; select bank0
  7345  062D  0821               	movf	?___llmod+1,w
  7346  062E  0021               	movlb	1	; select bank1
  7347  062F  00AD               	movwf	(sprintf@val+1)^(0+128)
  7348  0630  0020               	movlb	0	; select bank0
  7349  0631  0820               	movf	?___llmod,w
  7350  0632  2D89               	goto	L5
  7351  0633                     l3469:	
  7352                           ;doprnt.c: 1233: }
  7353                           ;doprnt.c: 1235: while(prec) {
  7354                           
  7355                           
  7356                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  7357  0633  3030               	movlw	48
  7358  0634  0020               	movlb	0	; select bank0
  7359  0635  00E1               	movwf	??_sprintf
  7360  0636  0021               	movlb	1	; select bank1
  7361  0637  0835               	movf	sprintf@sp^(0+128),w
  7362  0638  0086               	movwf	6
  7363  0639  0187               	clrf	7
  7364  063A  0020               	movlb	0	; select bank0
  7365  063B  0861               	movf	??_sprintf,w
  7366  063C  0081               	movwf	1
  7367  063D  3001               	movlw	1
  7368  063E  00E1               	movwf	??_sprintf
  7369  063F  0861               	movf	??_sprintf,w
  7370  0640  0021               	movlb	1	; select bank1
  7371  0641  07B5               	addwf	sprintf@sp^(0+128),f
  7372                           
  7373                           ;doprnt.c: 1237: prec--;
  7374  0642  30FF               	movlw	255
  7375  0643  07B6               	addwf	sprintf@prec^(0+128),f
  7376  0644  30FF               	movlw	255
  7377  0645  3DB7               	addwfc	(sprintf@prec+1)^(0+128),f
  7378  0646                     l3475:	
  7379  0646  0836               	movf	sprintf@prec^(0+128),w
  7380  0647  0437               	iorwf	(sprintf@prec+1)^(0+128),w
  7381  0648  1903               	btfsc	3,2
  7382  0649  28D9               	goto	l3553
  7383  064A  2E33               	goto	l3469
  7384  064B                     l3477:	
  7385                           ;doprnt.c: 1238: }
  7386                           ;doprnt.c: 1245: continue;
  7387                           
  7388                           
  7389                           ;doprnt.c: 1246: }
  7390                           ;doprnt.c: 1253: {
  7391                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  7392  064B  0021               	movlb	1	; select bank1
  7393  064C  0823               	movf	sprintf@ap^(0+128),w
  7394  064D  0086               	movwf	6
  7395  064E  0187               	clrf	7
  7396  064F  3F40               	moviw [0]fsr1
  7397  0650  0020               	movlb	0	; select bank0
  7398  0651  00E1               	movwf	??_sprintf
  7399  0652  3F41               	moviw [1]fsr1
  7400  0653  00E2               	movwf	??_sprintf+1
  7401  0654  0861               	movf	??_sprintf,w
  7402  0655  0021               	movlb	1	; select bank1
  7403  0656  00AC               	movwf	sprintf@val^(0+128)
  7404  0657  0020               	movlb	0	; select bank0
  7405  0658  0862               	movf	??_sprintf+1,w
  7406  0659  0021               	movlb	1	; select bank1
  7407  065A  00AD               	movwf	(sprintf@val+1)^(0+128)
  7408  065B  0D89               	rlf	9,f
  7409  065C  3B89               	subwfb	9,f
  7410  065D  0989               	comf	9,f
  7411  065E  00AE               	movwf	(sprintf@val+2)^(0+128)
  7412  065F  00AF               	movwf	(sprintf@val+3)^(0+128)
  7413  0660  3002               	movlw	2
  7414  0661  0020               	movlb	0	; select bank0
  7415  0662  00E1               	movwf	??_sprintf
  7416  0663  0861               	movf	??_sprintf,w
  7417  0664  0021               	movlb	1	; select bank1
  7418  0665  07A3               	addwf	sprintf@ap^(0+128),f
  7419                           
  7420                           ;doprnt.c: 1261: if((long)val < 0) {
  7421  0666  1FAF               	btfss	(sprintf@val+3)^(0+128),7
  7422  0667  2E77               	goto	l3487
  7423                           
  7424                           ;doprnt.c: 1262: flag |= 0x03;
  7425  0668  3003               	movlw	3
  7426  0669  04A4               	iorwf	sprintf@flag^(0+128),f
  7427  066A  3000               	movlw	0
  7428  066B  04A5               	iorwf	(sprintf@flag+1)^(0+128),f
  7429                           
  7430                           ;doprnt.c: 1263: val = -val;
  7431  066C  09AC               	comf	sprintf@val^(0+128),f
  7432  066D  09AD               	comf	(sprintf@val+1)^(0+128),f
  7433  066E  09AE               	comf	(sprintf@val+2)^(0+128),f
  7434  066F  09AF               	comf	(sprintf@val+3)^(0+128),f
  7435  0670  0AAC               	incf	sprintf@val^(0+128),f
  7436  0671  1903               	skipnz
  7437  0672  0AAD               	incf	(sprintf@val+1)^(0+128),f
  7438  0673  1903               	skipnz
  7439  0674  0AAE               	incf	(sprintf@val+2)^(0+128),f
  7440  0675  1903               	skipnz
  7441  0676  0AAF               	incf	(sprintf@val+3)^(0+128),f
  7442  0677                     l3487:	
  7443                           
  7444                           ;doprnt.c: 1264: }
  7445                           ;doprnt.c: 1266: }
  7446                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  7447  0677  0836               	movf	sprintf@prec^(0+128),w
  7448  0678  0437               	iorwf	(sprintf@prec+1)^(0+128),w
  7449  0679  1D03               	btfss	3,2
  7450  067A  2E85               	goto	l3493
  7451  067B  082F               	movf	(sprintf@val+3)^(0+128),w
  7452  067C  042E               	iorwf	(sprintf@val+2)^(0+128),w
  7453  067D  042D               	iorwf	(sprintf@val+1)^(0+128),w
  7454  067E  042C               	iorwf	sprintf@val^(0+128),w
  7455  067F  1D03               	skipz
  7456  0680  2E85               	goto	l3493
  7457                           
  7458                           ;doprnt.c: 1291: prec++;
  7459  0681  3001               	movlw	1
  7460  0682  07B6               	addwf	sprintf@prec^(0+128),f
  7461  0683  3000               	movlw	0
  7462  0684  3DB7               	addwfc	(sprintf@prec+1)^(0+128),f
  7463  0685                     l3493:	
  7464                           
  7465                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7466  0685  01B8               	clrf	sprintf@c^(0+128)
  7467  0686  0AB8               	incf	sprintf@c^(0+128),f
  7468  0687  300A               	movlw	10
  7469  0688  0638               	xorwf	sprintf@c^(0+128),w
  7470  0689  1903               	btfsc	3,2
  7471  068A  2EC2               	goto	l3505
  7472  068B                     l3499:	
  7473                           
  7474                           ;doprnt.c: 1306: if(val < dpowers[c])
  7475  068B  0838               	movf	sprintf@c^(0+128),w
  7476  068C  0020               	movlb	0	; select bank0
  7477  068D  00E1               	movwf	??_sprintf
  7478  068E  01E2               	clrf	??_sprintf+1
  7479  068F  35E1               	lslf	??_sprintf,f
  7480  0690  0DE2               	rlf	??_sprintf+1,f
  7481  0691  35E1               	lslf	??_sprintf,f
  7482  0692  0DE2               	rlf	??_sprintf+1,f
  7483  0693  3000               	movlw	low (_dpowers| (0+32768))
  7484  0694  0761               	addwf	??_sprintf,w
  7485  0695  0084               	movwf	4
  7486  0696  3098               	movlw	high (_dpowers| (0+32768))
  7487  0697  3D62               	addwfc	??_sprintf+1,w
  7488  0698  0085               	movwf	5
  7489  0699  3F00               	moviw [0]fsr0
  7490  069A  00E3               	movwf	??_sprintf+2
  7491  069B  3F01               	moviw [1]fsr0
  7492  069C  00E4               	movwf	??_sprintf+3
  7493  069D  3F02               	moviw [2]fsr0
  7494  069E  00E5               	movwf	??_sprintf+4
  7495  069F  3F03               	moviw [3]fsr0
  7496  06A0  00E6               	movwf	??_sprintf+5
  7497  06A1  0866               	movf	??_sprintf+5,w
  7498  06A2  0021               	movlb	1	; select bank1
  7499  06A3  022F               	subwf	(sprintf@val+3)^(0+128),w
  7500  06A4  1D03               	skipz
  7501  06A5  2EB6               	goto	u4435
  7502  06A6  0020               	movlb	0	; select bank0
  7503  06A7  0865               	movf	??_sprintf+4,w
  7504  06A8  0021               	movlb	1	; select bank1
  7505  06A9  022E               	subwf	(sprintf@val+2)^(0+128),w
  7506  06AA  1D03               	skipz
  7507  06AB  2EB6               	goto	u4435
  7508  06AC  0020               	movlb	0	; select bank0
  7509  06AD  0864               	movf	??_sprintf+3,w
  7510  06AE  0021               	movlb	1	; select bank1
  7511  06AF  022D               	subwf	(sprintf@val+1)^(0+128),w
  7512  06B0  1D03               	skipz
  7513  06B1  2EB6               	goto	u4435
  7514  06B2  0020               	movlb	0	; select bank0
  7515  06B3  0863               	movf	??_sprintf+2,w
  7516  06B4  0021               	movlb	1	; select bank1
  7517  06B5  022C               	subwf	sprintf@val^(0+128),w
  7518  06B6                     u4435:	
  7519  06B6  1C03               	btfss	3,0
  7520  06B7  2EC2               	goto	l3505
  7521                           
  7522                           ;doprnt.c: 1307: break;
  7523  06B8  3001               	movlw	1
  7524  06B9  0020               	movlb	0	; select bank0
  7525  06BA  00E1               	movwf	??_sprintf
  7526  06BB  0861               	movf	??_sprintf,w
  7527  06BC  0021               	movlb	1	; select bank1
  7528  06BD  07B8               	addwf	sprintf@c^(0+128),f
  7529  06BE  300A               	movlw	10
  7530  06BF  0638               	xorwf	sprintf@c^(0+128),w
  7531  06C0  1D03               	btfss	3,2
  7532  06C1  2E8B               	goto	l3499
  7533  06C2                     l3505:	
  7534                           
  7535                           ;doprnt.c: 1339: if(c < prec)
  7536  06C2  0838               	movf	sprintf@c^(0+128),w
  7537  06C3  0020               	movlb	0	; select bank0
  7538  06C4  00E1               	movwf	??_sprintf
  7539  06C5  01E2               	clrf	??_sprintf+1
  7540  06C6  1BE1               	btfsc	??_sprintf,7
  7541  06C7  03E2               	decf	??_sprintf+1,f
  7542  06C8  0862               	movf	??_sprintf+1,w
  7543  06C9  3A80               	xorlw	128
  7544  06CA  00E3               	movwf	??_sprintf+2
  7545  06CB  0021               	movlb	1	; select bank1
  7546  06CC  0837               	movf	(sprintf@prec+1)^(0+128),w
  7547  06CD  3A80               	xorlw	128
  7548  06CE  0020               	movlb	0	; select bank0
  7549  06CF  0263               	subwf	??_sprintf+2,w
  7550  06D0  1D03               	skipz
  7551  06D1  2ED6               	goto	u4455
  7552  06D2  0021               	movlb	1	; select bank1
  7553  06D3  0836               	movf	sprintf@prec^(0+128),w
  7554  06D4  0020               	movlb	0	; select bank0
  7555  06D5  0261               	subwf	??_sprintf,w
  7556  06D6                     u4455:	
  7557  06D6  1803               	skipnc
  7558  06D7  2EE0               	goto	l3509
  7559                           
  7560                           ;doprnt.c: 1340: c = prec;
  7561  06D8  0021               	movlb	1	; select bank1
  7562  06D9  0836               	movf	sprintf@prec^(0+128),w
  7563  06DA  0020               	movlb	0	; select bank0
  7564  06DB  00E1               	movwf	??_sprintf
  7565  06DC  0861               	movf	??_sprintf,w
  7566  06DD  0021               	movlb	1	; select bank1
  7567  06DE  00B8               	movwf	sprintf@c^(0+128)
  7568  06DF  2EFC               	goto	l388
  7569  06E0                     l3509:	
  7570                           
  7571                           ;doprnt.c: 1341: else if(prec < c)
  7572  06E0  0021               	movlb	1	; select bank1
  7573  06E1  0838               	movf	sprintf@c^(0+128),w
  7574  06E2  0020               	movlb	0	; select bank0
  7575  06E3  00E1               	movwf	??_sprintf
  7576  06E4  01E2               	clrf	??_sprintf+1
  7577  06E5  1BE1               	btfsc	??_sprintf,7
  7578  06E6  03E2               	decf	??_sprintf+1,f
  7579  06E7  0021               	movlb	1	; select bank1
  7580  06E8  0837               	movf	(sprintf@prec+1)^(0+128),w
  7581  06E9  3A80               	xorlw	128
  7582  06EA  0020               	movlb	0	; select bank0
  7583  06EB  00E3               	movwf	??_sprintf+2
  7584  06EC  0862               	movf	??_sprintf+1,w
  7585  06ED  3A80               	xorlw	128
  7586  06EE  0263               	subwf	??_sprintf+2,w
  7587  06EF  1D03               	skipz
  7588  06F0  2EF4               	goto	u4465
  7589  06F1  0861               	movf	??_sprintf,w
  7590  06F2  0021               	movlb	1	; select bank1
  7591  06F3  0236               	subwf	sprintf@prec^(0+128),w
  7592  06F4                     u4465:	
  7593  06F4  1803               	skipnc
  7594  06F5  2EFC               	goto	l388
  7595                           
  7596                           ;doprnt.c: 1342: prec = c;
  7597  06F6  0021               	movlb	1	; select bank1
  7598  06F7  0838               	movf	sprintf@c^(0+128),w
  7599  06F8  00B6               	movwf	sprintf@prec^(0+128)
  7600  06F9  01B7               	clrf	(sprintf@prec+1)^(0+128)
  7601  06FA  1BB6               	btfsc	sprintf@prec^(0+128),7
  7602  06FB  03B7               	decf	(sprintf@prec+1)^(0+128),f
  7603  06FC                     l388:	
  7604                           
  7605                           ;doprnt.c: 1345: if(width && flag & 0x03)
  7606  06FC  0021               	movlb	1	; select bank1
  7607  06FD  0826               	movf	sprintf@width^(0+128),w
  7608  06FE  0427               	iorwf	(sprintf@width+1)^(0+128),w
  7609  06FF  1903               	btfsc	3,2
  7610  0700  2F13               	goto	l3517
  7611  0701  3003               	movlw	3
  7612  0702  0524               	andwf	sprintf@flag^(0+128),w
  7613  0703  0020               	movlb	0	; select bank0
  7614  0704  00E1               	movwf	??_sprintf
  7615  0705  3000               	movlw	0
  7616  0706  0021               	movlb	1	; select bank1
  7617  0707  0525               	andwf	(sprintf@flag+1)^(0+128),w
  7618  0708  0020               	movlb	0	; select bank0
  7619  0709  00E2               	movwf	??_sprintf+1
  7620  070A  0861               	movf	??_sprintf,w
  7621  070B  0462               	iorwf	??_sprintf+1,w
  7622  070C  1903               	btfsc	3,2
  7623  070D  2F13               	goto	l3517
  7624                           
  7625                           ;doprnt.c: 1346: width--;
  7626  070E  30FF               	movlw	255
  7627  070F  0021               	movlb	1	; select bank1
  7628  0710  07A6               	addwf	sprintf@width^(0+128),f
  7629  0711  30FF               	movlw	255
  7630  0712  3DA7               	addwfc	(sprintf@width+1)^(0+128),f
  7631  0713                     l3517:	
  7632                           
  7633                           ;doprnt.c: 1348: if(flag & 0x4000) {
  7634  0713  0021               	movlb	1	; select bank1
  7635  0714  1F25               	btfss	(sprintf@flag+1)^(0+128),6
  7636  0715  2F2F               	goto	l3525
  7637                           
  7638                           ;doprnt.c: 1349: if(width > prec)
  7639  0716  0837               	movf	(sprintf@prec+1)^(0+128),w
  7640  0717  3A80               	xorlw	128
  7641  0718  0020               	movlb	0	; select bank0
  7642  0719  00E1               	movwf	??_sprintf
  7643  071A  0021               	movlb	1	; select bank1
  7644  071B  0827               	movf	(sprintf@width+1)^(0+128),w
  7645  071C  3A80               	xorlw	128
  7646  071D  0020               	movlb	0	; select bank0
  7647  071E  0261               	subwf	??_sprintf,w
  7648  071F  1D03               	skipz
  7649  0720  2F24               	goto	u4505
  7650  0721  0021               	movlb	1	; select bank1
  7651  0722  0826               	movf	sprintf@width^(0+128),w
  7652  0723  0236               	subwf	sprintf@prec^(0+128),w
  7653  0724                     u4505:	
  7654  0724  1803               	skipnc
  7655  0725  2F2C               	goto	l3523
  7656                           
  7657                           ;doprnt.c: 1350: width -= prec;
  7658  0726  0021               	movlb	1	; select bank1
  7659  0727  0836               	movf	sprintf@prec^(0+128),w
  7660  0728  02A6               	subwf	sprintf@width^(0+128),f
  7661  0729  0837               	movf	(sprintf@prec+1)^(0+128),w
  7662  072A  3BA7               	subwfb	(sprintf@width+1)^(0+128),f
  7663  072B  2F2F               	goto	l3525
  7664  072C                     l3523:	
  7665                           
  7666                           ;doprnt.c: 1351: else
  7667                           ;doprnt.c: 1352: width = 0;
  7668  072C  0021               	movlb	1	; select bank1
  7669  072D  01A6               	clrf	sprintf@width^(0+128)
  7670  072E  01A7               	clrf	(sprintf@width+1)^(0+128)
  7671  072F                     l3525:	
  7672                           
  7673                           ;doprnt.c: 1353: }
  7674                           ;doprnt.c: 1381: if(width > c)
  7675  072F  0838               	movf	sprintf@c^(0+128),w
  7676  0730  0020               	movlb	0	; select bank0
  7677  0731  00E1               	movwf	??_sprintf
  7678  0732  01E2               	clrf	??_sprintf+1
  7679  0733  1BE1               	btfsc	??_sprintf,7
  7680  0734  03E2               	decf	??_sprintf+1,f
  7681  0735  0862               	movf	??_sprintf+1,w
  7682  0736  3A80               	xorlw	128
  7683  0737  00E3               	movwf	??_sprintf+2
  7684  0738  0021               	movlb	1	; select bank1
  7685  0739  0827               	movf	(sprintf@width+1)^(0+128),w
  7686  073A  3A80               	xorlw	128
  7687  073B  0020               	movlb	0	; select bank0
  7688  073C  0263               	subwf	??_sprintf+2,w
  7689  073D  1D03               	skipz
  7690  073E  2F43               	goto	u4515
  7691  073F  0021               	movlb	1	; select bank1
  7692  0740  0826               	movf	sprintf@width^(0+128),w
  7693  0741  0020               	movlb	0	; select bank0
  7694  0742  0261               	subwf	??_sprintf,w
  7695  0743                     u4515:	
  7696  0743  1803               	skipnc
  7697  0744  2F54               	goto	l3529
  7698                           
  7699                           ;doprnt.c: 1382: width -= c;
  7700  0745  0021               	movlb	1	; select bank1
  7701  0746  0838               	movf	sprintf@c^(0+128),w
  7702  0747  0020               	movlb	0	; select bank0
  7703  0748  00E1               	movwf	??_sprintf
  7704  0749  01E2               	clrf	??_sprintf+1
  7705  074A  1BE1               	btfsc	??_sprintf,7
  7706  074B  03E2               	decf	??_sprintf+1,f
  7707  074C  0861               	movf	??_sprintf,w
  7708  074D  0021               	movlb	1	; select bank1
  7709  074E  02A6               	subwf	sprintf@width^(0+128),f
  7710  074F  0020               	movlb	0	; select bank0
  7711  0750  0862               	movf	??_sprintf+1,w
  7712  0751  0021               	movlb	1	; select bank1
  7713  0752  3BA7               	subwfb	(sprintf@width+1)^(0+128),f
  7714  0753  2F57               	goto	l3531
  7715  0754                     l3529:	
  7716                           
  7717                           ;doprnt.c: 1383: else
  7718                           ;doprnt.c: 1384: width = 0;
  7719  0754  0021               	movlb	1	; select bank1
  7720  0755  01A6               	clrf	sprintf@width^(0+128)
  7721  0756  01A7               	clrf	(sprintf@width+1)^(0+128)
  7722  0757                     l3531:	
  7723                           
  7724                           ;doprnt.c: 1422: {
  7725                           ;doprnt.c: 1424: if(width
  7726                           ;doprnt.c: 1428: )
  7727  0757  0826               	movf	sprintf@width^(0+128),w
  7728  0758  0427               	iorwf	(sprintf@width+1)^(0+128),w
  7729  0759  1903               	btfsc	3,2
  7730  075A  2F72               	goto	l3539
  7731  075B                     l3533:	
  7732                           ;doprnt.c: 1429: do
  7733                           
  7734                           
  7735                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  7736  075B  3020               	movlw	32
  7737  075C  0020               	movlb	0	; select bank0
  7738  075D  00E1               	movwf	??_sprintf
  7739  075E  0021               	movlb	1	; select bank1
  7740  075F  0835               	movf	sprintf@sp^(0+128),w
  7741  0760  0086               	movwf	6
  7742  0761  0187               	clrf	7
  7743  0762  0020               	movlb	0	; select bank0
  7744  0763  0861               	movf	??_sprintf,w
  7745  0764  0081               	movwf	1
  7746  0765  3001               	movlw	1
  7747  0766  00E1               	movwf	??_sprintf
  7748  0767  0861               	movf	??_sprintf,w
  7749  0768  0021               	movlb	1	; select bank1
  7750  0769  07B5               	addwf	sprintf@sp^(0+128),f
  7751                           
  7752                           ;doprnt.c: 1431: while(--width);
  7753  076A  30FF               	movlw	255
  7754  076B  07A6               	addwf	sprintf@width^(0+128),f
  7755  076C  30FF               	movlw	255
  7756  076D  3DA7               	addwfc	(sprintf@width+1)^(0+128),f
  7757  076E  0826               	movf	sprintf@width^(0+128),w
  7758  076F  0427               	iorwf	(sprintf@width+1)^(0+128),w
  7759  0770  1D03               	btfss	3,2
  7760  0771  2F5B               	goto	l3533
  7761  0772                     l3539:	
  7762                           
  7763                           ;doprnt.c: 1438: if(flag & 0x03)
  7764  0772  3003               	movlw	3
  7765  0773  0524               	andwf	sprintf@flag^(0+128),w
  7766  0774  0020               	movlb	0	; select bank0
  7767  0775  00E1               	movwf	??_sprintf
  7768  0776  3000               	movlw	0
  7769  0777  0021               	movlb	1	; select bank1
  7770  0778  0525               	andwf	(sprintf@flag+1)^(0+128),w
  7771  0779  0020               	movlb	0	; select bank0
  7772  077A  00E2               	movwf	??_sprintf+1
  7773  077B  0861               	movf	??_sprintf,w
  7774  077C  0462               	iorwf	??_sprintf+1,w
  7775  077D  1903               	btfsc	3,2
  7776  077E  2F8D               	goto	l3551
  7777                           
  7778                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  7779  077F  302D               	movlw	45
  7780  0780                     L7:	
  7781  0780  00E1               	movwf	??_sprintf
  7782  0781  0021               	movlb	1	; select bank1
  7783  0782  0835               	movf	sprintf@sp^(0+128),w
  7784  0783  0086               	movwf	6
  7785  0784  0187               	clrf	7
  7786  0785  0020               	movlb	0	; select bank0
  7787  0786  0861               	movf	??_sprintf,w
  7788  0787  0081               	movwf	1
  7789  0788  3001               	movlw	1
  7790  0789  00E1               	movwf	??_sprintf
  7791  078A  0861               	movf	??_sprintf,w
  7792  078B  0021               	movlb	1	; select bank1
  7793  078C  07B5               	addwf	sprintf@sp^(0+128),f
  7794  078D                     l3551:	
  7795  078D  30FF               	movlw	255
  7796  078E  0021               	movlb	1	; select bank1
  7797  078F  07B6               	addwf	sprintf@prec^(0+128),f
  7798  0790  30FF               	movlw	255
  7799  0791  3DB7               	addwfc	(sprintf@prec+1)^(0+128),f
  7800  0792  0A36               	incf	sprintf@prec^(0+128),w
  7801  0793  1903               	btfsc	3,2
  7802  0794  0A37               	incf	(sprintf@prec+1)^(0+128),w
  7803  0795  1903               	btfsc	3,2
  7804  0796  28D9               	goto	l3553
  7805                           
  7806                           ;doprnt.c: 1478: {
  7807                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  7808                           
  7809                           ;doprnt.c: 1469: }
  7810                           ;doprnt.c: 1474: while(prec--) {
  7811  0797  3000               	movlw	0
  7812  0798  0020               	movlb	0	; select bank0
  7813  0799  00A3               	movwf	___llmod@divisor+3
  7814  079A  3000               	movlw	0
  7815  079B  00A2               	movwf	___llmod@divisor+2
  7816  079C  3000               	movlw	0
  7817  079D  00A1               	movwf	___llmod@divisor+1
  7818  079E  300A               	movlw	10
  7819  079F  00A0               	movwf	___llmod@divisor
  7820  07A0  0021               	movlb	1	; select bank1
  7821  07A1  0837               	movf	(sprintf@prec+1)^(0+128),w
  7822  07A2  0085               	movwf	5
  7823  07A3  0836               	movf	sprintf@prec^(0+128),w
  7824  07A4  0084               	movwf	4
  7825  07A5  3584               	lslf	4,f
  7826  07A6  0D85               	rlf	5,f
  7827  07A7  3584               	lslf	4,f
  7828  07A8  0D85               	rlf	5,f
  7829  07A9  3000               	movlw	low (_dpowers| (0+32768))
  7830  07AA  0784               	addwf	4,f
  7831  07AB  3098               	movlw	high (_dpowers| (0+32768))
  7832  07AC  3D85               	addwfc	5,f
  7833  07AD  3F00               	moviw [0]fsr0
  7834  07AE  00F0               	movwf	___lldiv@divisor
  7835  07AF  3F01               	moviw [1]fsr0
  7836  07B0  00F1               	movwf	___lldiv@divisor+1
  7837  07B1  3F02               	moviw [2]fsr0
  7838  07B2  00F2               	movwf	___lldiv@divisor+2
  7839  07B3  3F03               	moviw [3]fsr0
  7840  07B4  00F3               	movwf	___lldiv@divisor+3
  7841  07B5  082F               	movf	(sprintf@val+3)^(0+128),w
  7842  07B6  00F7               	movwf	___lldiv@dividend+3
  7843  07B7  082E               	movf	(sprintf@val+2)^(0+128),w
  7844  07B8  00F6               	movwf	___lldiv@dividend+2
  7845  07B9  082D               	movf	(sprintf@val+1)^(0+128),w
  7846  07BA  00F5               	movwf	___lldiv@dividend+1
  7847  07BB  082C               	movf	sprintf@val^(0+128),w
  7848  07BC  00F4               	movwf	___lldiv@dividend
  7849  07BD  3191  21A3  3180   	fcall	___lldiv
  7850  07C0  0873               	movf	?___lldiv+3,w
  7851  07C1  0020               	movlb	0	; select bank0
  7852  07C2  00A7               	movwf	___llmod@dividend+3
  7853  07C3  0872               	movf	?___lldiv+2,w
  7854  07C4  00A6               	movwf	___llmod@dividend+2
  7855  07C5  0871               	movf	?___lldiv+1,w
  7856  07C6  00A5               	movwf	___llmod@dividend+1
  7857  07C7  0870               	movf	?___lldiv,w
  7858  07C8  00A4               	movwf	___llmod@dividend
  7859  07C9  3191  211B  3180   	fcall	___llmod
  7860  07CC  0020               	movlb	0	; select bank0
  7861  07CD  0820               	movf	?___llmod,w
  7862  07CE  3E30               	addlw	48
  7863  07CF  00E1               	movwf	??_sprintf
  7864  07D0  0861               	movf	??_sprintf,w
  7865  07D1  0021               	movlb	1	; select bank1
  7866  07D2  00B8               	movwf	sprintf@c^(0+128)
  7867                           
  7868                           ;doprnt.c: 1523: }
  7869                           ;doprnt.c: 1524: ((*sp++ = (c)));
  7870  07D3  0838               	movf	sprintf@c^(0+128),w
  7871  07D4  0020               	movlb	0	; select bank0
  7872  07D5  2F80               	goto	L7
  7873  07D6                     l3555:	
  7874                           ;doprnt.c: 1525: }
  7875                           ;doprnt.c: 1533: }
  7876                           ;doprnt.c: 1535: alldone:
  7877                           
  7878                           
  7879                           ;doprnt.c: 1538: *sp = 0;
  7880  07D6  0835               	movf	sprintf@sp^(0+128),w
  7881  07D7  0086               	movwf	6
  7882  07D8  0187               	clrf	7
  7883  07D9  0181               	clrf	1
  7884  07DA  0008               	return
  7885  07DB                     __end_of_sprintf:	
  7886                           ;doprnt.c: 1540: return 0;
  7887                           ;	Return value of _sprintf is never used
  7888                           
  7889                           
  7890                           	psect	text2
  7891  0ABD                     __ptext2:	
  7892 ;; *************** function _scale *****************
  7893 ;; Defined at:
  7894 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\doprnt.c"
  7895 ;; Parameters:    Size  Location     Type
  7896 ;;  scl             1    wreg     char 
  7897 ;; Auto vars:     Size  Location     Type
  7898 ;;  scl             1   32[BANK0 ] char 
  7899 ;; Return value:  Size  Location     Type
  7900 ;;                  3   24[BANK0 ] char 
  7901 ;; Registers used:
  7902 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7903 ;; Tracked objects:
  7904 ;;		On entry : 0/0
  7905 ;;		On exit  : 0/0
  7906 ;;		Unchanged: 0/0
  7907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7908 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7909 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7910 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7911 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7912 ;;Total ram usage:        9 bytes
  7913 ;; Hardware stack levels used:    1
  7914 ;; Hardware stack levels required when called:    2
  7915 ;; This function calls:
  7916 ;;		___awdiv
  7917 ;;		___awmod
  7918 ;;		___ftmul
  7919 ;;		___wmul
  7920 ;; This function is called by:
  7921 ;;		_sprintf
  7922 ;; This function uses a non-reentrant model
  7923 ;;
  7924                           
  7925                           
  7926                           ;psect for function _scale
  7927  0ABD                     _scale:	
  7928                           
  7929                           ;incstack = 0
  7930                           ; Regs used in _scale: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7931                           ;scale@scl stored from wreg
  7932  0ABD  0020               	movlb	0	; select bank0
  7933  0ABE  00C0               	movwf	scale@scl
  7934                           
  7935                           ;doprnt.c: 428: if(scl < 0) {
  7936  0ABF  1FC0               	btfss	scale@scl,7
  7937  0AC0  2BE2               	goto	l2857
  7938                           
  7939                           ;doprnt.c: 429: scl = -scl;
  7940  0AC1  09C0               	comf	scale@scl,f
  7941  0AC2  0AC0               	incf	scale@scl,f
  7942                           
  7943                           ;doprnt.c: 430: if(scl>=110)
  7944  0AC3  0840               	movf	scale@scl,w
  7945  0AC4  3A80               	xorlw	128
  7946  0AC5  3E12               	addlw	-238
  7947  0AC6  1C03               	skipc
  7948  0AC7  2B66               	goto	l2847
  7949                           
  7950                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  7951  0AC8  300A               	movlw	10
  7952  0AC9  00F7               	movwf	___awdiv@divisor
  7953  0ACA  3000               	movlw	0
  7954  0ACB  00F8               	movwf	___awdiv@divisor+1
  7955  0ACC  0840               	movf	scale@scl,w
  7956  0ACD  00F2               	movwf	___awmod@dividend
  7957  0ACE  01F3               	clrf	___awmod@dividend+1
  7958  0ACF  1BF2               	btfsc	___awmod@dividend,7
  7959  0AD0  03F3               	decf	___awmod@dividend+1,f
  7960  0AD1  3064               	movlw	100
  7961  0AD2  00F0               	movwf	___awmod@divisor
  7962  0AD3  3000               	movlw	0
  7963  0AD4  00F1               	movwf	___awmod@divisor+1
  7964  0AD5  3191  215E  318A   	fcall	___awmod
  7965  0AD8  0871               	movf	?___awmod+1,w
  7966  0AD9  00FA               	movwf	___awdiv@dividend+1
  7967  0ADA  0870               	movf	?___awmod,w
  7968  0ADB  00F9               	movwf	___awdiv@dividend
  7969  0ADC  3191  21F5  318A   	fcall	___awdiv
  7970  0ADF  0877               	movf	?___awdiv,w
  7971  0AE0  3E09               	addlw	9
  7972  0AE1  0020               	movlb	0	; select bank0
  7973  0AE2  00A4               	movwf	___wmul@multiplier
  7974  0AE3  3000               	movlw	0
  7975  0AE4  3D78               	addwfc	?___awdiv+1,w
  7976  0AE5  00A5               	movwf	___wmul@multiplier+1
  7977  0AE6  3003               	movlw	3
  7978  0AE7  00A6               	movwf	___wmul@multiplicand
  7979  0AE8  3000               	movlw	0
  7980  0AE9  00A7               	movwf	___wmul@multiplicand+1
  7981  0AEA  319F  27A6  318A   	fcall	___wmul
  7982  0AED  0020               	movlb	0	; select bank0
  7983  0AEE  0825               	movf	?___wmul+1,w
  7984  0AEF  0085               	movwf	5
  7985  0AF0  0824               	movf	?___wmul,w
  7986  0AF1  0084               	movwf	4
  7987  0AF2  3028               	movlw	low (__npowers_| (0+32768))
  7988  0AF3  0784               	addwf	4,f
  7989  0AF4  3098               	movlw	high (__npowers_| (0+32768))
  7990  0AF5  3D85               	addwfc	5,f
  7991  0AF6  3F00               	moviw [0]fsr0
  7992  0AF7  00A8               	movwf	___ftmul@f1
  7993  0AF8  3F01               	moviw [1]fsr0
  7994  0AF9  00A9               	movwf	___ftmul@f1+1
  7995  0AFA  3F02               	moviw [2]fsr0
  7996  0AFB  00AA               	movwf	___ftmul@f1+2
  7997  0AFC  3064               	movlw	100
  7998  0AFD  00F7               	movwf	___awdiv@divisor
  7999  0AFE  3000               	movlw	0
  8000  0AFF  00F8               	movwf	___awdiv@divisor+1
  8001  0B00  0840               	movf	scale@scl,w
  8002  0B01  00F9               	movwf	___awdiv@dividend
  8003  0B02  01FA               	clrf	___awdiv@dividend+1
  8004  0B03  1BF9               	btfsc	___awdiv@dividend,7
  8005  0B04  03FA               	decf	___awdiv@dividend+1,f
  8006  0B05  3191  21F5  318A   	fcall	___awdiv
  8007  0B08  0877               	movf	?___awdiv,w
  8008  0B09  3E12               	addlw	18
  8009  0B0A  0020               	movlb	0	; select bank0
  8010  0B0B  00A4               	movwf	___wmul@multiplier
  8011  0B0C  3000               	movlw	0
  8012  0B0D  3D78               	addwfc	?___awdiv+1,w
  8013  0B0E  00A5               	movwf	___wmul@multiplier+1
  8014  0B0F  3003               	movlw	3
  8015  0B10  00A6               	movwf	___wmul@multiplicand
  8016  0B11  3000               	movlw	0
  8017  0B12  00A7               	movwf	___wmul@multiplicand+1
  8018  0B13  319F  27A6  318A   	fcall	___wmul
  8019  0B16  0020               	movlb	0	; select bank0
  8020  0B17  0825               	movf	?___wmul+1,w
  8021  0B18  0085               	movwf	5
  8022  0B19  0824               	movf	?___wmul,w
  8023  0B1A  0084               	movwf	4
  8024  0B1B  3028               	movlw	low (__npowers_| (0+32768))
  8025  0B1C  0784               	addwf	4,f
  8026  0B1D  3098               	movlw	high (__npowers_| (0+32768))
  8027  0B1E  3D85               	addwfc	5,f
  8028  0B1F  3F00               	moviw [0]fsr0
  8029  0B20  00AB               	movwf	___ftmul@f2
  8030  0B21  3F01               	moviw [1]fsr0
  8031  0B22  00AC               	movwf	___ftmul@f2+1
  8032  0B23  3F02               	moviw [2]fsr0
  8033  0B24  00AD               	movwf	___ftmul@f2+2
  8034  0B25  3196  2656  318A   	fcall	___ftmul
  8035  0B28  0020               	movlb	0	; select bank0
  8036  0B29  0828               	movf	?___ftmul,w
  8037  0B2A  00BD               	movwf	_scale$1016
  8038  0B2B  0829               	movf	?___ftmul+1,w
  8039  0B2C  00BE               	movwf	_scale$1016+1
  8040  0B2D  082A               	movf	?___ftmul+2,w
  8041  0B2E  00BF               	movwf	_scale$1016+2
  8042                           
  8043                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  8044  0B2F  0840               	movf	scale@scl,w
  8045  0B30  00F2               	movwf	___awmod@dividend
  8046  0B31  01F3               	clrf	___awmod@dividend+1
  8047  0B32  1BF2               	btfsc	___awmod@dividend,7
  8048  0B33  03F3               	decf	___awmod@dividend+1,f
  8049  0B34  300A               	movlw	10
  8050  0B35  00F0               	movwf	___awmod@divisor
  8051  0B36  3000               	movlw	0
  8052  0B37  00F1               	movwf	___awmod@divisor+1
  8053  0B38  3191  215E  318A   	fcall	___awmod
  8054  0B3B  0871               	movf	?___awmod+1,w
  8055  0B3C  0020               	movlb	0	; select bank0
  8056  0B3D  00A5               	movwf	___wmul@multiplier+1
  8057  0B3E  0870               	movf	?___awmod,w
  8058  0B3F  00A4               	movwf	___wmul@multiplier
  8059  0B40  3003               	movlw	3
  8060  0B41  00A6               	movwf	___wmul@multiplicand
  8061  0B42  3000               	movlw	0
  8062  0B43  00A7               	movwf	___wmul@multiplicand+1
  8063  0B44  319F  27A6  318A   	fcall	___wmul
  8064  0B47  0020               	movlb	0	; select bank0
  8065  0B48  0825               	movf	?___wmul+1,w
  8066  0B49  0085               	movwf	5
  8067  0B4A  0824               	movf	?___wmul,w
  8068  0B4B  0084               	movwf	4
  8069  0B4C  3028               	movlw	low (__npowers_| (0+32768))
  8070  0B4D  0784               	addwf	4,f
  8071  0B4E  3098               	movlw	high (__npowers_| (0+32768))
  8072  0B4F  3D85               	addwfc	5,f
  8073  0B50  3F00               	moviw [0]fsr0
  8074  0B51  00A8               	movwf	___ftmul@f1
  8075  0B52  3F01               	moviw [1]fsr0
  8076  0B53  00A9               	movwf	___ftmul@f1+1
  8077  0B54  3F02               	moviw [2]fsr0
  8078  0B55  00AA               	movwf	___ftmul@f1+2
  8079  0B56  083D               	movf	_scale$1016,w
  8080  0B57  00AB               	movwf	___ftmul@f2
  8081  0B58  083E               	movf	_scale$1016+1,w
  8082  0B59  00AC               	movwf	___ftmul@f2+1
  8083  0B5A  083F               	movf	_scale$1016+2,w
  8084  0B5B  00AD               	movwf	___ftmul@f2+2
  8085  0B5C  3196  2656         	fcall	___ftmul
  8086  0B5E  0020               	movlb	0	; select bank0
  8087  0B5F  0828               	movf	?___ftmul,w
  8088  0B60  00B8               	movwf	?_scale
  8089  0B61  0829               	movf	?___ftmul+1,w
  8090  0B62  00B9               	movwf	?_scale+1
  8091  0B63  082A               	movf	?___ftmul+2,w
  8092  0B64  00BA               	movwf	?_scale+2
  8093  0B65  0008               	return
  8094  0B66                     l2847:	
  8095                           
  8096                           ;doprnt.c: 432: else if(scl > 10)
  8097  0B66  0840               	movf	scale@scl,w
  8098  0B67  3A80               	xorlw	128
  8099  0B68  3E75               	addlw	-139
  8100  0B69  1C03               	skipc
  8101  0B6A  2BC5               	goto	l2853
  8102                           
  8103                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  8104  0B6B  0840               	movf	scale@scl,w
  8105  0B6C  00F2               	movwf	___awmod@dividend
  8106  0B6D  01F3               	clrf	___awmod@dividend+1
  8107  0B6E  1BF2               	btfsc	___awmod@dividend,7
  8108  0B6F  03F3               	decf	___awmod@dividend+1,f
  8109  0B70  300A               	movlw	10
  8110  0B71  00F0               	movwf	___awmod@divisor
  8111  0B72  3000               	movlw	0
  8112  0B73  00F1               	movwf	___awmod@divisor+1
  8113  0B74  3191  215E  318A   	fcall	___awmod
  8114  0B77  0871               	movf	?___awmod+1,w
  8115  0B78  0020               	movlb	0	; select bank0
  8116  0B79  00A5               	movwf	___wmul@multiplier+1
  8117  0B7A  0870               	movf	?___awmod,w
  8118  0B7B  00A4               	movwf	___wmul@multiplier
  8119  0B7C  3003               	movlw	3
  8120  0B7D  00A6               	movwf	___wmul@multiplicand
  8121  0B7E  3000               	movlw	0
  8122  0B7F  00A7               	movwf	___wmul@multiplicand+1
  8123  0B80  319F  27A6  318A   	fcall	___wmul
  8124  0B83  0020               	movlb	0	; select bank0
  8125  0B84  0825               	movf	?___wmul+1,w
  8126  0B85  0085               	movwf	5
  8127  0B86  0824               	movf	?___wmul,w
  8128  0B87  0084               	movwf	4
  8129  0B88  3028               	movlw	low (__npowers_| (0+32768))
  8130  0B89  0784               	addwf	4,f
  8131  0B8A  3098               	movlw	high (__npowers_| (0+32768))
  8132  0B8B  3D85               	addwfc	5,f
  8133  0B8C  3F00               	moviw [0]fsr0
  8134  0B8D  00A8               	movwf	___ftmul@f1
  8135  0B8E  3F01               	moviw [1]fsr0
  8136  0B8F  00A9               	movwf	___ftmul@f1+1
  8137  0B90  3F02               	moviw [2]fsr0
  8138  0B91  00AA               	movwf	___ftmul@f1+2
  8139  0B92  300A               	movlw	10
  8140  0B93  00F7               	movwf	___awdiv@divisor
  8141  0B94  3000               	movlw	0
  8142  0B95  00F8               	movwf	___awdiv@divisor+1
  8143  0B96  0840               	movf	scale@scl,w
  8144  0B97  00F9               	movwf	___awdiv@dividend
  8145  0B98  01FA               	clrf	___awdiv@dividend+1
  8146  0B99  1BF9               	btfsc	___awdiv@dividend,7
  8147  0B9A  03FA               	decf	___awdiv@dividend+1,f
  8148  0B9B  3191  21F5  318A   	fcall	___awdiv
  8149  0B9E  0877               	movf	?___awdiv,w
  8150  0B9F  3E09               	addlw	9
  8151  0BA0  0020               	movlb	0	; select bank0
  8152  0BA1  00A4               	movwf	___wmul@multiplier
  8153  0BA2  3000               	movlw	0
  8154  0BA3  3D78               	addwfc	?___awdiv+1,w
  8155  0BA4  00A5               	movwf	___wmul@multiplier+1
  8156  0BA5  3003               	movlw	3
  8157  0BA6  00A6               	movwf	___wmul@multiplicand
  8158  0BA7  3000               	movlw	0
  8159  0BA8  00A7               	movwf	___wmul@multiplicand+1
  8160  0BA9  319F  27A6  318A   	fcall	___wmul
  8161  0BAC  0020               	movlb	0	; select bank0
  8162  0BAD  0825               	movf	?___wmul+1,w
  8163  0BAE  0085               	movwf	5
  8164  0BAF  0824               	movf	?___wmul,w
  8165  0BB0  0084               	movwf	4
  8166  0BB1  3028               	movlw	low (__npowers_| (0+32768))
  8167  0BB2  0784               	addwf	4,f
  8168  0BB3  3098               	movlw	high (__npowers_| (0+32768))
  8169  0BB4  3D85               	addwfc	5,f
  8170  0BB5  3F00               	moviw [0]fsr0
  8171  0BB6  00AB               	movwf	___ftmul@f2
  8172  0BB7  3F01               	moviw [1]fsr0
  8173  0BB8  00AC               	movwf	___ftmul@f2+1
  8174  0BB9  3F02               	moviw [2]fsr0
  8175  0BBA  00AD               	movwf	___ftmul@f2+2
  8176  0BBB  3196  2656         	fcall	___ftmul
  8177  0BBD  0020               	movlb	0	; select bank0
  8178  0BBE  0828               	movf	?___ftmul,w
  8179  0BBF  00B8               	movwf	?_scale
  8180  0BC0  0829               	movf	?___ftmul+1,w
  8181  0BC1  00B9               	movwf	?_scale+1
  8182  0BC2  082A               	movf	?___ftmul+2,w
  8183  0BC3  00BA               	movwf	?_scale+2
  8184  0BC4  0008               	return
  8185  0BC5                     l2853:	
  8186                           
  8187                           ;doprnt.c: 434: return _npowers_[scl];
  8188  0BC5  0840               	movf	scale@scl,w
  8189  0BC6  00BB               	movwf	??_scale
  8190  0BC7  01BC               	clrf	??_scale+1
  8191  0BC8  083B               	movf	??_scale,w
  8192  0BC9  00A4               	movwf	___wmul@multiplier
  8193  0BCA  083C               	movf	??_scale+1,w
  8194  0BCB  00A5               	movwf	___wmul@multiplier+1
  8195  0BCC  3003               	movlw	3
  8196  0BCD  00A6               	movwf	___wmul@multiplicand
  8197  0BCE  3000               	movlw	0
  8198  0BCF  00A7               	movwf	___wmul@multiplicand+1
  8199  0BD0  319F  27A6         	fcall	___wmul
  8200  0BD2  0020               	movlb	0	; select bank0
  8201  0BD3  0825               	movf	?___wmul+1,w
  8202  0BD4  0085               	movwf	5
  8203  0BD5  0824               	movf	?___wmul,w
  8204  0BD6  0084               	movwf	4
  8205  0BD7  3028               	movlw	low (__npowers_| (0+32768))
  8206  0BD8  0784               	addwf	4,f
  8207  0BD9  3098               	movlw	high (__npowers_| (0+32768))
  8208  0BDA  3D85               	addwfc	5,f
  8209  0BDB  3F00               	moviw [0]fsr0
  8210  0BDC  00B8               	movwf	?_scale
  8211  0BDD  3F01               	moviw [1]fsr0
  8212  0BDE  00B9               	movwf	?_scale+1
  8213  0BDF  3F02               	moviw [2]fsr0
  8214  0BE0  00BA               	movwf	?_scale+2
  8215  0BE1  0008               	return
  8216  0BE2                     l2857:	
  8217                           
  8218                           ;doprnt.c: 435: }
  8219                           ;doprnt.c: 436: if(scl>=110)
  8220  0BE2  0840               	movf	scale@scl,w
  8221  0BE3  3A80               	xorlw	128
  8222  0BE4  3E12               	addlw	-238
  8223  0BE5  1C03               	skipc
  8224  0BE6  2C85               	goto	l2865
  8225                           
  8226                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  8227  0BE7  300A               	movlw	10
  8228  0BE8  00F7               	movwf	___awdiv@divisor
  8229  0BE9  3000               	movlw	0
  8230  0BEA  00F8               	movwf	___awdiv@divisor+1
  8231  0BEB  0840               	movf	scale@scl,w
  8232  0BEC  00F2               	movwf	___awmod@dividend
  8233  0BED  01F3               	clrf	___awmod@dividend+1
  8234  0BEE  1BF2               	btfsc	___awmod@dividend,7
  8235  0BEF  03F3               	decf	___awmod@dividend+1,f
  8236  0BF0  3064               	movlw	100
  8237  0BF1  00F0               	movwf	___awmod@divisor
  8238  0BF2  3000               	movlw	0
  8239  0BF3  00F1               	movwf	___awmod@divisor+1
  8240  0BF4  3191  215E  318A   	fcall	___awmod
  8241  0BF7  0871               	movf	?___awmod+1,w
  8242  0BF8  00FA               	movwf	___awdiv@dividend+1
  8243  0BF9  0870               	movf	?___awmod,w
  8244  0BFA  00F9               	movwf	___awdiv@dividend
  8245  0BFB  3191  21F5  318A   	fcall	___awdiv
  8246  0BFE  0877               	movf	?___awdiv,w
  8247  0BFF  3E09               	addlw	9
  8248  0C00  0020               	movlb	0	; select bank0
  8249  0C01  00A4               	movwf	___wmul@multiplier
  8250  0C02  3000               	movlw	0
  8251  0C03  3D78               	addwfc	?___awdiv+1,w
  8252  0C04  00A5               	movwf	___wmul@multiplier+1
  8253  0C05  3003               	movlw	3
  8254  0C06  00A6               	movwf	___wmul@multiplicand
  8255  0C07  3000               	movlw	0
  8256  0C08  00A7               	movwf	___wmul@multiplicand+1
  8257  0C09  319F  27A6  318A   	fcall	___wmul
  8258  0C0C  0020               	movlb	0	; select bank0
  8259  0C0D  0825               	movf	?___wmul+1,w
  8260  0C0E  0085               	movwf	5
  8261  0C0F  0824               	movf	?___wmul,w
  8262  0C10  0084               	movwf	4
  8263  0C11  304F               	movlw	low (__powers_| (0+32768))
  8264  0C12  0784               	addwf	4,f
  8265  0C13  3098               	movlw	high (__powers_| (0+32768))
  8266  0C14  3D85               	addwfc	5,f
  8267  0C15  3F00               	moviw [0]fsr0
  8268  0C16  00A8               	movwf	___ftmul@f1
  8269  0C17  3F01               	moviw [1]fsr0
  8270  0C18  00A9               	movwf	___ftmul@f1+1
  8271  0C19  3F02               	moviw [2]fsr0
  8272  0C1A  00AA               	movwf	___ftmul@f1+2
  8273  0C1B  3064               	movlw	100
  8274  0C1C  00F7               	movwf	___awdiv@divisor
  8275  0C1D  3000               	movlw	0
  8276  0C1E  00F8               	movwf	___awdiv@divisor+1
  8277  0C1F  0840               	movf	scale@scl,w
  8278  0C20  00F9               	movwf	___awdiv@dividend
  8279  0C21  01FA               	clrf	___awdiv@dividend+1
  8280  0C22  1BF9               	btfsc	___awdiv@dividend,7
  8281  0C23  03FA               	decf	___awdiv@dividend+1,f
  8282  0C24  3191  21F5  318A   	fcall	___awdiv
  8283  0C27  0877               	movf	?___awdiv,w
  8284  0C28  3E12               	addlw	18
  8285  0C29  0020               	movlb	0	; select bank0
  8286  0C2A  00A4               	movwf	___wmul@multiplier
  8287  0C2B  3000               	movlw	0
  8288  0C2C  3D78               	addwfc	?___awdiv+1,w
  8289  0C2D  00A5               	movwf	___wmul@multiplier+1
  8290  0C2E  3003               	movlw	3
  8291  0C2F  00A6               	movwf	___wmul@multiplicand
  8292  0C30  3000               	movlw	0
  8293  0C31  00A7               	movwf	___wmul@multiplicand+1
  8294  0C32  319F  27A6  318A   	fcall	___wmul
  8295  0C35  0020               	movlb	0	; select bank0
  8296  0C36  0825               	movf	?___wmul+1,w
  8297  0C37  0085               	movwf	5
  8298  0C38  0824               	movf	?___wmul,w
  8299  0C39  0084               	movwf	4
  8300  0C3A  304F               	movlw	low (__powers_| (0+32768))
  8301  0C3B  0784               	addwf	4,f
  8302  0C3C  3098               	movlw	high (__powers_| (0+32768))
  8303  0C3D  3D85               	addwfc	5,f
  8304  0C3E  3F00               	moviw [0]fsr0
  8305  0C3F  00AB               	movwf	___ftmul@f2
  8306  0C40  3F01               	moviw [1]fsr0
  8307  0C41  00AC               	movwf	___ftmul@f2+1
  8308  0C42  3F02               	moviw [2]fsr0
  8309  0C43  00AD               	movwf	___ftmul@f2+2
  8310  0C44  3196  2656  318A   	fcall	___ftmul
  8311  0C47  0020               	movlb	0	; select bank0
  8312  0C48  0828               	movf	?___ftmul,w
  8313  0C49  00BD               	movwf	_scale$1016
  8314  0C4A  0829               	movf	?___ftmul+1,w
  8315  0C4B  00BE               	movwf	_scale$1016+1
  8316  0C4C  082A               	movf	?___ftmul+2,w
  8317  0C4D  00BF               	movwf	_scale$1016+2
  8318                           
  8319                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  8320  0C4E  0840               	movf	scale@scl,w
  8321  0C4F  00F2               	movwf	___awmod@dividend
  8322  0C50  01F3               	clrf	___awmod@dividend+1
  8323  0C51  1BF2               	btfsc	___awmod@dividend,7
  8324  0C52  03F3               	decf	___awmod@dividend+1,f
  8325  0C53  300A               	movlw	10
  8326  0C54  00F0               	movwf	___awmod@divisor
  8327  0C55  3000               	movlw	0
  8328  0C56  00F1               	movwf	___awmod@divisor+1
  8329  0C57  3191  215E  318A   	fcall	___awmod
  8330  0C5A  0871               	movf	?___awmod+1,w
  8331  0C5B  0020               	movlb	0	; select bank0
  8332  0C5C  00A5               	movwf	___wmul@multiplier+1
  8333  0C5D  0870               	movf	?___awmod,w
  8334  0C5E  00A4               	movwf	___wmul@multiplier
  8335  0C5F  3003               	movlw	3
  8336  0C60  00A6               	movwf	___wmul@multiplicand
  8337  0C61  3000               	movlw	0
  8338  0C62  00A7               	movwf	___wmul@multiplicand+1
  8339  0C63  319F  27A6  318A   	fcall	___wmul
  8340  0C66  0020               	movlb	0	; select bank0
  8341  0C67  0825               	movf	?___wmul+1,w
  8342  0C68  0085               	movwf	5
  8343  0C69  0824               	movf	?___wmul,w
  8344  0C6A  0084               	movwf	4
  8345  0C6B  304F               	movlw	low (__powers_| (0+32768))
  8346  0C6C  0784               	addwf	4,f
  8347  0C6D  3098               	movlw	high (__powers_| (0+32768))
  8348  0C6E  3D85               	addwfc	5,f
  8349  0C6F  3F00               	moviw [0]fsr0
  8350  0C70  00A8               	movwf	___ftmul@f1
  8351  0C71  3F01               	moviw [1]fsr0
  8352  0C72  00A9               	movwf	___ftmul@f1+1
  8353  0C73  3F02               	moviw [2]fsr0
  8354  0C74  00AA               	movwf	___ftmul@f1+2
  8355  0C75  083D               	movf	_scale$1016,w
  8356  0C76  00AB               	movwf	___ftmul@f2
  8357  0C77  083E               	movf	_scale$1016+1,w
  8358  0C78  00AC               	movwf	___ftmul@f2+1
  8359  0C79  083F               	movf	_scale$1016+2,w
  8360  0C7A  00AD               	movwf	___ftmul@f2+2
  8361  0C7B  3196  2656         	fcall	___ftmul
  8362  0C7D  0020               	movlb	0	; select bank0
  8363  0C7E  0828               	movf	?___ftmul,w
  8364  0C7F  00B8               	movwf	?_scale
  8365  0C80  0829               	movf	?___ftmul+1,w
  8366  0C81  00B9               	movwf	?_scale+1
  8367  0C82  082A               	movf	?___ftmul+2,w
  8368  0C83  00BA               	movwf	?_scale+2
  8369  0C84  0008               	return
  8370  0C85                     l2865:	
  8371                           
  8372                           ;doprnt.c: 438: else if(scl > 10)
  8373  0C85  0840               	movf	scale@scl,w
  8374  0C86  3A80               	xorlw	128
  8375  0C87  3E75               	addlw	-139
  8376  0C88  1C03               	skipc
  8377  0C89  2CE4               	goto	l2871
  8378                           
  8379                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  8380  0C8A  0840               	movf	scale@scl,w
  8381  0C8B  00F2               	movwf	___awmod@dividend
  8382  0C8C  01F3               	clrf	___awmod@dividend+1
  8383  0C8D  1BF2               	btfsc	___awmod@dividend,7
  8384  0C8E  03F3               	decf	___awmod@dividend+1,f
  8385  0C8F  300A               	movlw	10
  8386  0C90  00F0               	movwf	___awmod@divisor
  8387  0C91  3000               	movlw	0
  8388  0C92  00F1               	movwf	___awmod@divisor+1
  8389  0C93  3191  215E  318A   	fcall	___awmod
  8390  0C96  0871               	movf	?___awmod+1,w
  8391  0C97  0020               	movlb	0	; select bank0
  8392  0C98  00A5               	movwf	___wmul@multiplier+1
  8393  0C99  0870               	movf	?___awmod,w
  8394  0C9A  00A4               	movwf	___wmul@multiplier
  8395  0C9B  3003               	movlw	3
  8396  0C9C  00A6               	movwf	___wmul@multiplicand
  8397  0C9D  3000               	movlw	0
  8398  0C9E  00A7               	movwf	___wmul@multiplicand+1
  8399  0C9F  319F  27A6  318A   	fcall	___wmul
  8400  0CA2  0020               	movlb	0	; select bank0
  8401  0CA3  0825               	movf	?___wmul+1,w
  8402  0CA4  0085               	movwf	5
  8403  0CA5  0824               	movf	?___wmul,w
  8404  0CA6  0084               	movwf	4
  8405  0CA7  304F               	movlw	low (__powers_| (0+32768))
  8406  0CA8  0784               	addwf	4,f
  8407  0CA9  3098               	movlw	high (__powers_| (0+32768))
  8408  0CAA  3D85               	addwfc	5,f
  8409  0CAB  3F00               	moviw [0]fsr0
  8410  0CAC  00A8               	movwf	___ftmul@f1
  8411  0CAD  3F01               	moviw [1]fsr0
  8412  0CAE  00A9               	movwf	___ftmul@f1+1
  8413  0CAF  3F02               	moviw [2]fsr0
  8414  0CB0  00AA               	movwf	___ftmul@f1+2
  8415  0CB1  300A               	movlw	10
  8416  0CB2  00F7               	movwf	___awdiv@divisor
  8417  0CB3  3000               	movlw	0
  8418  0CB4  00F8               	movwf	___awdiv@divisor+1
  8419  0CB5  0840               	movf	scale@scl,w
  8420  0CB6  00F9               	movwf	___awdiv@dividend
  8421  0CB7  01FA               	clrf	___awdiv@dividend+1
  8422  0CB8  1BF9               	btfsc	___awdiv@dividend,7
  8423  0CB9  03FA               	decf	___awdiv@dividend+1,f
  8424  0CBA  3191  21F5  318A   	fcall	___awdiv
  8425  0CBD  0877               	movf	?___awdiv,w
  8426  0CBE  3E09               	addlw	9
  8427  0CBF  0020               	movlb	0	; select bank0
  8428  0CC0  00A4               	movwf	___wmul@multiplier
  8429  0CC1  3000               	movlw	0
  8430  0CC2  3D78               	addwfc	?___awdiv+1,w
  8431  0CC3  00A5               	movwf	___wmul@multiplier+1
  8432  0CC4  3003               	movlw	3
  8433  0CC5  00A6               	movwf	___wmul@multiplicand
  8434  0CC6  3000               	movlw	0
  8435  0CC7  00A7               	movwf	___wmul@multiplicand+1
  8436  0CC8  319F  27A6  318A   	fcall	___wmul
  8437  0CCB  0020               	movlb	0	; select bank0
  8438  0CCC  0825               	movf	?___wmul+1,w
  8439  0CCD  0085               	movwf	5
  8440  0CCE  0824               	movf	?___wmul,w
  8441  0CCF  0084               	movwf	4
  8442  0CD0  304F               	movlw	low (__powers_| (0+32768))
  8443  0CD1  0784               	addwf	4,f
  8444  0CD2  3098               	movlw	high (__powers_| (0+32768))
  8445  0CD3  3D85               	addwfc	5,f
  8446  0CD4  3F00               	moviw [0]fsr0
  8447  0CD5  00AB               	movwf	___ftmul@f2
  8448  0CD6  3F01               	moviw [1]fsr0
  8449  0CD7  00AC               	movwf	___ftmul@f2+1
  8450  0CD8  3F02               	moviw [2]fsr0
  8451  0CD9  00AD               	movwf	___ftmul@f2+2
  8452  0CDA  3196  2656         	fcall	___ftmul
  8453  0CDC  0020               	movlb	0	; select bank0
  8454  0CDD  0828               	movf	?___ftmul,w
  8455  0CDE  00B8               	movwf	?_scale
  8456  0CDF  0829               	movf	?___ftmul+1,w
  8457  0CE0  00B9               	movwf	?_scale+1
  8458  0CE1  082A               	movf	?___ftmul+2,w
  8459  0CE2  00BA               	movwf	?_scale+2
  8460  0CE3  0008               	return
  8461  0CE4                     l2871:	
  8462                           
  8463                           ;doprnt.c: 440: return _powers_[scl];
  8464  0CE4  0840               	movf	scale@scl,w
  8465  0CE5  00BB               	movwf	??_scale
  8466  0CE6  01BC               	clrf	??_scale+1
  8467  0CE7  083B               	movf	??_scale,w
  8468  0CE8  00A4               	movwf	___wmul@multiplier
  8469  0CE9  083C               	movf	??_scale+1,w
  8470  0CEA  00A5               	movwf	___wmul@multiplier+1
  8471  0CEB  3003               	movlw	3
  8472  0CEC  00A6               	movwf	___wmul@multiplicand
  8473  0CED  3000               	movlw	0
  8474  0CEE  00A7               	movwf	___wmul@multiplicand+1
  8475  0CEF  319F  27A6         	fcall	___wmul
  8476  0CF1  0020               	movlb	0	; select bank0
  8477  0CF2  0825               	movf	?___wmul+1,w
  8478  0CF3  0085               	movwf	5
  8479  0CF4  0824               	movf	?___wmul,w
  8480  0CF5  0084               	movwf	4
  8481  0CF6  304F               	movlw	low (__powers_| (0+32768))
  8482  0CF7  0784               	addwf	4,f
  8483  0CF8  3098               	movlw	high (__powers_| (0+32768))
  8484  0CF9  3D85               	addwfc	5,f
  8485  0CFA  3F00               	moviw [0]fsr0
  8486  0CFB  00B8               	movwf	?_scale
  8487  0CFC  3F01               	moviw [1]fsr0
  8488  0CFD  00B9               	movwf	?_scale+1
  8489  0CFE  3F02               	moviw [2]fsr0
  8490  0CFF  00BA               	movwf	?_scale+2
  8491  0D00  0008               	return
  8492  0D01                     __end_of_scale:	
  8493                           
  8494                           	psect	text3
  8495  1F03                     __ptext3:	
  8496 ;; *************** function _isdigit *****************
  8497 ;; Defined at:
  8498 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\isdigit.c"
  8499 ;; Parameters:    Size  Location     Type
  8500 ;;  c               1    wreg     unsigned char 
  8501 ;; Auto vars:     Size  Location     Type
  8502 ;;  c               1    1[COMMON] unsigned char 
  8503 ;; Return value:  Size  Location     Type
  8504 ;;		None               void
  8505 ;; Registers used:
  8506 ;;		wreg, status,2, status,0
  8507 ;; Tracked objects:
  8508 ;;		On entry : 0/0
  8509 ;;		On exit  : 0/0
  8510 ;;		Unchanged: 0/0
  8511 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8512 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8513 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8514 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8515 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8516 ;;Total ram usage:        2 bytes
  8517 ;; Hardware stack levels used:    1
  8518 ;; This function calls:
  8519 ;;		Nothing
  8520 ;; This function is called by:
  8521 ;;		_sprintf
  8522 ;; This function uses a non-reentrant model
  8523 ;;
  8524                           
  8525                           
  8526                           ;psect for function _isdigit
  8527  1F03                     _isdigit:	
  8528                           
  8529                           ;incstack = 0
  8530                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  8531                           ;isdigit@c stored from wreg
  8532  1F03  00F1               	movwf	isdigit@c
  8533  1F04  01F0               	clrf	_isdigit$727
  8534  1F05  303A               	movlw	58
  8535  1F06  0271               	subwf	isdigit@c,w
  8536  1F07  1803               	skipnc
  8537  1F08  2F0F               	goto	l2883
  8538  1F09  3030               	movlw	48
  8539  1F0A  0271               	subwf	isdigit@c,w
  8540  1F0B  1C03               	skipc
  8541  1F0C  2F0F               	goto	l2883
  8542  1F0D  01F0               	clrf	_isdigit$727
  8543  1F0E  0AF0               	incf	_isdigit$727,f
  8544  1F0F                     l2883:	
  8545  1F0F  0C70               	rrf	_isdigit$727,w
  8546  1F10  0008               	return
  8547  1F11                     __end_of_isdigit:	
  8548                           
  8549                           	psect	text4
  8550  0958                     __ptext4:	
  8551 ;; *************** function _fround *****************
  8552 ;; Defined at:
  8553 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\doprnt.c"
  8554 ;; Parameters:    Size  Location     Type
  8555 ;;  prec            1    wreg     unsigned char 
  8556 ;; Auto vars:     Size  Location     Type
  8557 ;;  prec            1   37[BANK0 ] unsigned char 
  8558 ;; Return value:  Size  Location     Type
  8559 ;;                  3   24[BANK0 ] unsigned char 
  8560 ;; Registers used:
  8561 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8562 ;; Tracked objects:
  8563 ;;		On entry : 0/0
  8564 ;;		On exit  : 0/0
  8565 ;;		Unchanged: 0/0
  8566 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8567 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8568 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8569 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8570 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8571 ;;Total ram usage:       14 bytes
  8572 ;; Hardware stack levels used:    1
  8573 ;; Hardware stack levels required when called:    2
  8574 ;; This function calls:
  8575 ;;		___awdiv
  8576 ;;		___awmod
  8577 ;;		___ftmul
  8578 ;;		___wmul
  8579 ;; This function is called by:
  8580 ;;		_sprintf
  8581 ;; This function uses a non-reentrant model
  8582 ;;
  8583                           
  8584                           
  8585                           ;psect for function _fround
  8586  0958                     _fround:	
  8587                           
  8588                           ;incstack = 0
  8589                           ; Regs used in _fround: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8590                           ;fround@prec stored from wreg
  8591  0958  0020               	movlb	0	; select bank0
  8592  0959  00C5               	movwf	fround@prec
  8593                           
  8594                           ;doprnt.c: 413: if(prec>=110)
  8595  095A  306E               	movlw	110
  8596  095B  0245               	subwf	fround@prec,w
  8597  095C  1C03               	skipc
  8598  095D  2A18               	goto	l2823
  8599                           
  8600                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  8601  095E  300A               	movlw	10
  8602  095F  00F7               	movwf	___awdiv@divisor
  8603  0960  3000               	movlw	0
  8604  0961  00F8               	movwf	___awdiv@divisor+1
  8605  0962  0845               	movf	fround@prec,w
  8606  0963  00BB               	movwf	??_fround
  8607  0964  01BC               	clrf	??_fround+1
  8608  0965  083B               	movf	??_fround,w
  8609  0966  00F2               	movwf	___awmod@dividend
  8610  0967  083C               	movf	??_fround+1,w
  8611  0968  00F3               	movwf	___awmod@dividend+1
  8612  0969  3064               	movlw	100
  8613  096A  00F0               	movwf	___awmod@divisor
  8614  096B  3000               	movlw	0
  8615  096C  00F1               	movwf	___awmod@divisor+1
  8616  096D  3191  215E  3189   	fcall	___awmod
  8617  0970  0871               	movf	?___awmod+1,w
  8618  0971  00FA               	movwf	___awdiv@dividend+1
  8619  0972  0870               	movf	?___awmod,w
  8620  0973  00F9               	movwf	___awdiv@dividend
  8621  0974  3191  21F5  3189   	fcall	___awdiv
  8622  0977  0877               	movf	?___awdiv,w
  8623  0978  3E09               	addlw	9
  8624  0979  0020               	movlb	0	; select bank0
  8625  097A  00A4               	movwf	___wmul@multiplier
  8626  097B  3000               	movlw	0
  8627  097C  3D78               	addwfc	?___awdiv+1,w
  8628  097D  00A5               	movwf	___wmul@multiplier+1
  8629  097E  3003               	movlw	3
  8630  097F  00A6               	movwf	___wmul@multiplicand
  8631  0980  3000               	movlw	0
  8632  0981  00A7               	movwf	___wmul@multiplicand+1
  8633  0982  319F  27A6  3189   	fcall	___wmul
  8634  0985  0020               	movlb	0	; select bank0
  8635  0986  0825               	movf	?___wmul+1,w
  8636  0987  0085               	movwf	5
  8637  0988  0824               	movf	?___wmul,w
  8638  0989  0084               	movwf	4
  8639  098A  3028               	movlw	low (__npowers_| (0+32768))
  8640  098B  0784               	addwf	4,f
  8641  098C  3098               	movlw	high (__npowers_| (0+32768))
  8642  098D  3D85               	addwfc	5,f
  8643  098E  3F00               	moviw [0]fsr0
  8644  098F  00A8               	movwf	___ftmul@f1
  8645  0990  3F01               	moviw [1]fsr0
  8646  0991  00A9               	movwf	___ftmul@f1+1
  8647  0992  3F02               	moviw [2]fsr0
  8648  0993  00AA               	movwf	___ftmul@f1+2
  8649  0994  3064               	movlw	100
  8650  0995  00F7               	movwf	___awdiv@divisor
  8651  0996  3000               	movlw	0
  8652  0997  00F8               	movwf	___awdiv@divisor+1
  8653  0998  0845               	movf	fround@prec,w
  8654  0999  00BD               	movwf	??_fround+2
  8655  099A  01BE               	clrf	??_fround+3
  8656  099B  083D               	movf	??_fround+2,w
  8657  099C  00F9               	movwf	___awdiv@dividend
  8658  099D  083E               	movf	??_fround+3,w
  8659  099E  00FA               	movwf	___awdiv@dividend+1
  8660  099F  3191  21F5  3189   	fcall	___awdiv
  8661  09A2  0877               	movf	?___awdiv,w
  8662  09A3  3E12               	addlw	18
  8663  09A4  0020               	movlb	0	; select bank0
  8664  09A5  00A4               	movwf	___wmul@multiplier
  8665  09A6  3000               	movlw	0
  8666  09A7  3D78               	addwfc	?___awdiv+1,w
  8667  09A8  00A5               	movwf	___wmul@multiplier+1
  8668  09A9  3003               	movlw	3
  8669  09AA  00A6               	movwf	___wmul@multiplicand
  8670  09AB  3000               	movlw	0
  8671  09AC  00A7               	movwf	___wmul@multiplicand+1
  8672  09AD  319F  27A6  3189   	fcall	___wmul
  8673  09B0  0020               	movlb	0	; select bank0
  8674  09B1  0825               	movf	?___wmul+1,w
  8675  09B2  0085               	movwf	5
  8676  09B3  0824               	movf	?___wmul,w
  8677  09B4  0084               	movwf	4
  8678  09B5  3028               	movlw	low (__npowers_| (0+32768))
  8679  09B6  0784               	addwf	4,f
  8680  09B7  3098               	movlw	high (__npowers_| (0+32768))
  8681  09B8  3D85               	addwfc	5,f
  8682  09B9  3F00               	moviw [0]fsr0
  8683  09BA  00AB               	movwf	___ftmul@f2
  8684  09BB  3F01               	moviw [1]fsr0
  8685  09BC  00AC               	movwf	___ftmul@f2+1
  8686  09BD  3F02               	moviw [2]fsr0
  8687  09BE  00AD               	movwf	___ftmul@f2+2
  8688  09BF  3196  2656  3189   	fcall	___ftmul
  8689  09C2  0020               	movlb	0	; select bank0
  8690  09C3  0828               	movf	?___ftmul,w
  8691  09C4  00C2               	movwf	_fround$1014
  8692  09C5  0829               	movf	?___ftmul+1,w
  8693  09C6  00C3               	movwf	_fround$1014+1
  8694  09C7  082A               	movf	?___ftmul+2,w
  8695  09C8  00C4               	movwf	_fround$1014+2
  8696                           
  8697                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  8698  09C9  0845               	movf	fround@prec,w
  8699  09CA  00BB               	movwf	??_fround
  8700  09CB  01BC               	clrf	??_fround+1
  8701  09CC  083B               	movf	??_fround,w
  8702  09CD  00F2               	movwf	___awmod@dividend
  8703  09CE  083C               	movf	??_fround+1,w
  8704  09CF  00F3               	movwf	___awmod@dividend+1
  8705  09D0  300A               	movlw	10
  8706  09D1  00F0               	movwf	___awmod@divisor
  8707  09D2  3000               	movlw	0
  8708  09D3  00F1               	movwf	___awmod@divisor+1
  8709  09D4  3191  215E  3189   	fcall	___awmod
  8710  09D7  0871               	movf	?___awmod+1,w
  8711  09D8  0020               	movlb	0	; select bank0
  8712  09D9  00A5               	movwf	___wmul@multiplier+1
  8713  09DA  0870               	movf	?___awmod,w
  8714  09DB  00A4               	movwf	___wmul@multiplier
  8715  09DC  3003               	movlw	3
  8716  09DD  00A6               	movwf	___wmul@multiplicand
  8717  09DE  3000               	movlw	0
  8718  09DF  00A7               	movwf	___wmul@multiplicand+1
  8719  09E0  319F  27A6  3189   	fcall	___wmul
  8720  09E3  0020               	movlb	0	; select bank0
  8721  09E4  0825               	movf	?___wmul+1,w
  8722  09E5  0085               	movwf	5
  8723  09E6  0824               	movf	?___wmul,w
  8724  09E7  0084               	movwf	4
  8725  09E8  3028               	movlw	low (__npowers_| (0+32768))
  8726  09E9  0784               	addwf	4,f
  8727  09EA  3098               	movlw	high (__npowers_| (0+32768))
  8728  09EB  3D85               	addwfc	5,f
  8729  09EC  3F00               	moviw [0]fsr0
  8730  09ED  00A8               	movwf	___ftmul@f1
  8731  09EE  3F01               	moviw [1]fsr0
  8732  09EF  00A9               	movwf	___ftmul@f1+1
  8733  09F0  3F02               	moviw [2]fsr0
  8734  09F1  00AA               	movwf	___ftmul@f1+2
  8735  09F2  0842               	movf	_fround$1014,w
  8736  09F3  00AB               	movwf	___ftmul@f2
  8737  09F4  0843               	movf	_fround$1014+1,w
  8738  09F5  00AC               	movwf	___ftmul@f2+1
  8739  09F6  0844               	movf	_fround$1014+2,w
  8740  09F7  00AD               	movwf	___ftmul@f2+2
  8741  09F8  3196  2656  3189   	fcall	___ftmul
  8742  09FB  0020               	movlb	0	; select bank0
  8743  09FC  0828               	movf	?___ftmul,w
  8744  09FD  00BF               	movwf	_fround$1015
  8745  09FE  0829               	movf	?___ftmul+1,w
  8746  09FF  00C0               	movwf	_fround$1015+1
  8747  0A00  082A               	movf	?___ftmul+2,w
  8748  0A01  00C1               	movwf	_fround$1015+2
  8749                           
  8750                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  8751  0A02  3000               	movlw	0
  8752  0A03  00A8               	movwf	___ftmul@f1
  8753  0A04  3000               	movlw	0
  8754  0A05  00A9               	movwf	___ftmul@f1+1
  8755  0A06  303F               	movlw	63
  8756  0A07  00AA               	movwf	___ftmul@f1+2
  8757  0A08  083F               	movf	_fround$1015,w
  8758  0A09  00AB               	movwf	___ftmul@f2
  8759  0A0A  0840               	movf	_fround$1015+1,w
  8760  0A0B  00AC               	movwf	___ftmul@f2+1
  8761  0A0C  0841               	movf	_fround$1015+2,w
  8762  0A0D  00AD               	movwf	___ftmul@f2+2
  8763  0A0E  3196  2656         	fcall	___ftmul
  8764  0A10  0020               	movlb	0	; select bank0
  8765  0A11  0828               	movf	?___ftmul,w
  8766  0A12  00B8               	movwf	?_fround
  8767  0A13  0829               	movf	?___ftmul+1,w
  8768  0A14  00B9               	movwf	?_fround+1
  8769  0A15  082A               	movf	?___ftmul+2,w
  8770  0A16  00BA               	movwf	?_fround+2
  8771  0A17  0008               	return
  8772  0A18                     l2823:	
  8773                           
  8774                           ;doprnt.c: 415: else if(prec > 10)
  8775  0A18  300B               	movlw	11
  8776  0A19  0245               	subwf	fround@prec,w
  8777  0A1A  1C03               	skipc
  8778  0A1B  2A90               	goto	l2831
  8779                           
  8780                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  8781  0A1C  0845               	movf	fround@prec,w
  8782  0A1D  00BB               	movwf	??_fround
  8783  0A1E  01BC               	clrf	??_fround+1
  8784  0A1F  083B               	movf	??_fround,w
  8785  0A20  00F2               	movwf	___awmod@dividend
  8786  0A21  083C               	movf	??_fround+1,w
  8787  0A22  00F3               	movwf	___awmod@dividend+1
  8788  0A23  300A               	movlw	10
  8789  0A24  00F0               	movwf	___awmod@divisor
  8790  0A25  3000               	movlw	0
  8791  0A26  00F1               	movwf	___awmod@divisor+1
  8792  0A27  3191  215E  3189   	fcall	___awmod
  8793  0A2A  0871               	movf	?___awmod+1,w
  8794  0A2B  0020               	movlb	0	; select bank0
  8795  0A2C  00A5               	movwf	___wmul@multiplier+1
  8796  0A2D  0870               	movf	?___awmod,w
  8797  0A2E  00A4               	movwf	___wmul@multiplier
  8798  0A2F  3003               	movlw	3
  8799  0A30  00A6               	movwf	___wmul@multiplicand
  8800  0A31  3000               	movlw	0
  8801  0A32  00A7               	movwf	___wmul@multiplicand+1
  8802  0A33  319F  27A6  3189   	fcall	___wmul
  8803  0A36  0020               	movlb	0	; select bank0
  8804  0A37  0825               	movf	?___wmul+1,w
  8805  0A38  0085               	movwf	5
  8806  0A39  0824               	movf	?___wmul,w
  8807  0A3A  0084               	movwf	4
  8808  0A3B  3028               	movlw	low (__npowers_| (0+32768))
  8809  0A3C  0784               	addwf	4,f
  8810  0A3D  3098               	movlw	high (__npowers_| (0+32768))
  8811  0A3E  3D85               	addwfc	5,f
  8812  0A3F  3F00               	moviw [0]fsr0
  8813  0A40  00A8               	movwf	___ftmul@f1
  8814  0A41  3F01               	moviw [1]fsr0
  8815  0A42  00A9               	movwf	___ftmul@f1+1
  8816  0A43  3F02               	moviw [2]fsr0
  8817  0A44  00AA               	movwf	___ftmul@f1+2
  8818  0A45  300A               	movlw	10
  8819  0A46  00F7               	movwf	___awdiv@divisor
  8820  0A47  3000               	movlw	0
  8821  0A48  00F8               	movwf	___awdiv@divisor+1
  8822  0A49  0845               	movf	fround@prec,w
  8823  0A4A  00BD               	movwf	??_fround+2
  8824  0A4B  01BE               	clrf	??_fround+3
  8825  0A4C  083D               	movf	??_fround+2,w
  8826  0A4D  00F9               	movwf	___awdiv@dividend
  8827  0A4E  083E               	movf	??_fround+3,w
  8828  0A4F  00FA               	movwf	___awdiv@dividend+1
  8829  0A50  3191  21F5  3189   	fcall	___awdiv
  8830  0A53  0877               	movf	?___awdiv,w
  8831  0A54  3E09               	addlw	9
  8832  0A55  0020               	movlb	0	; select bank0
  8833  0A56  00A4               	movwf	___wmul@multiplier
  8834  0A57  3000               	movlw	0
  8835  0A58  3D78               	addwfc	?___awdiv+1,w
  8836  0A59  00A5               	movwf	___wmul@multiplier+1
  8837  0A5A  3003               	movlw	3
  8838  0A5B  00A6               	movwf	___wmul@multiplicand
  8839  0A5C  3000               	movlw	0
  8840  0A5D  00A7               	movwf	___wmul@multiplicand+1
  8841  0A5E  319F  27A6  3189   	fcall	___wmul
  8842  0A61  0020               	movlb	0	; select bank0
  8843  0A62  0825               	movf	?___wmul+1,w
  8844  0A63  0085               	movwf	5
  8845  0A64  0824               	movf	?___wmul,w
  8846  0A65  0084               	movwf	4
  8847  0A66  3028               	movlw	low (__npowers_| (0+32768))
  8848  0A67  0784               	addwf	4,f
  8849  0A68  3098               	movlw	high (__npowers_| (0+32768))
  8850  0A69  3D85               	addwfc	5,f
  8851  0A6A  3F00               	moviw [0]fsr0
  8852  0A6B  00AB               	movwf	___ftmul@f2
  8853  0A6C  3F01               	moviw [1]fsr0
  8854  0A6D  00AC               	movwf	___ftmul@f2+1
  8855  0A6E  3F02               	moviw [2]fsr0
  8856  0A6F  00AD               	movwf	___ftmul@f2+2
  8857  0A70  3196  2656  3189   	fcall	___ftmul
  8858  0A73  0020               	movlb	0	; select bank0
  8859  0A74  0828               	movf	?___ftmul,w
  8860  0A75  00C2               	movwf	_fround$1014
  8861  0A76  0829               	movf	?___ftmul+1,w
  8862  0A77  00C3               	movwf	_fround$1014+1
  8863  0A78  082A               	movf	?___ftmul+2,w
  8864  0A79  00C4               	movwf	_fround$1014+2
  8865                           
  8866                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  8867  0A7A  3000               	movlw	0
  8868  0A7B  00A8               	movwf	___ftmul@f1
  8869  0A7C  3000               	movlw	0
  8870  0A7D  00A9               	movwf	___ftmul@f1+1
  8871  0A7E  303F               	movlw	63
  8872  0A7F  00AA               	movwf	___ftmul@f1+2
  8873  0A80  0842               	movf	_fround$1014,w
  8874  0A81  00AB               	movwf	___ftmul@f2
  8875  0A82  0843               	movf	_fround$1014+1,w
  8876  0A83  00AC               	movwf	___ftmul@f2+1
  8877  0A84  0844               	movf	_fround$1014+2,w
  8878  0A85  00AD               	movwf	___ftmul@f2+2
  8879  0A86  3196  2656         	fcall	___ftmul
  8880  0A88  0020               	movlb	0	; select bank0
  8881  0A89  0828               	movf	?___ftmul,w
  8882  0A8A  00B8               	movwf	?_fround
  8883  0A8B  0829               	movf	?___ftmul+1,w
  8884  0A8C  00B9               	movwf	?_fround+1
  8885  0A8D  082A               	movf	?___ftmul+2,w
  8886  0A8E  00BA               	movwf	?_fround+2
  8887  0A8F  0008               	return
  8888  0A90                     l2831:	
  8889                           
  8890                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  8891  0A90  3000               	movlw	0
  8892  0A91  00A8               	movwf	___ftmul@f1
  8893  0A92  3000               	movlw	0
  8894  0A93  00A9               	movwf	___ftmul@f1+1
  8895  0A94  303F               	movlw	63
  8896  0A95  00AA               	movwf	___ftmul@f1+2
  8897  0A96  0845               	movf	fround@prec,w
  8898  0A97  00BB               	movwf	??_fround
  8899  0A98  01BC               	clrf	??_fround+1
  8900  0A99  083B               	movf	??_fround,w
  8901  0A9A  00A4               	movwf	___wmul@multiplier
  8902  0A9B  083C               	movf	??_fround+1,w
  8903  0A9C  00A5               	movwf	___wmul@multiplier+1
  8904  0A9D  3003               	movlw	3
  8905  0A9E  00A6               	movwf	___wmul@multiplicand
  8906  0A9F  3000               	movlw	0
  8907  0AA0  00A7               	movwf	___wmul@multiplicand+1
  8908  0AA1  319F  27A6  3189   	fcall	___wmul
  8909  0AA4  0020               	movlb	0	; select bank0
  8910  0AA5  0825               	movf	?___wmul+1,w
  8911  0AA6  0085               	movwf	5
  8912  0AA7  0824               	movf	?___wmul,w
  8913  0AA8  0084               	movwf	4
  8914  0AA9  3028               	movlw	low (__npowers_| (0+32768))
  8915  0AAA  0784               	addwf	4,f
  8916  0AAB  3098               	movlw	high (__npowers_| (0+32768))
  8917  0AAC  3D85               	addwfc	5,f
  8918  0AAD  3F00               	moviw [0]fsr0
  8919  0AAE  00AB               	movwf	___ftmul@f2
  8920  0AAF  3F01               	moviw [1]fsr0
  8921  0AB0  00AC               	movwf	___ftmul@f2+1
  8922  0AB1  3F02               	moviw [2]fsr0
  8923  0AB2  00AD               	movwf	___ftmul@f2+2
  8924  0AB3  3196  2656         	fcall	___ftmul
  8925  0AB5  0020               	movlb	0	; select bank0
  8926  0AB6  0828               	movf	?___ftmul,w
  8927  0AB7  00B8               	movwf	?_fround
  8928  0AB8  0829               	movf	?___ftmul+1,w
  8929  0AB9  00B9               	movwf	?_fround+1
  8930  0ABA  082A               	movf	?___ftmul+2,w
  8931  0ABB  00BA               	movwf	?_fround+2
  8932  0ABC  0008               	return
  8933  0ABD                     __end_of_fround:	
  8934                           
  8935                           	psect	text5
  8936  115E                     __ptext5:	
  8937 ;; *************** function ___awmod *****************
  8938 ;; Defined at:
  8939 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awmod.c"
  8940 ;; Parameters:    Size  Location     Type
  8941 ;;  divisor         2    0[COMMON] int 
  8942 ;;  dividend        2    2[COMMON] int 
  8943 ;; Auto vars:     Size  Location     Type
  8944 ;;  sign            1    6[COMMON] unsigned char 
  8945 ;;  counter         1    5[COMMON] unsigned char 
  8946 ;; Return value:  Size  Location     Type
  8947 ;;                  2    0[COMMON] int 
  8948 ;; Registers used:
  8949 ;;		wreg, status,2, status,0
  8950 ;; Tracked objects:
  8951 ;;		On entry : 0/0
  8952 ;;		On exit  : 0/0
  8953 ;;		Unchanged: 0/0
  8954 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8955 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8956 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8957 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8958 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8959 ;;Total ram usage:        7 bytes
  8960 ;; Hardware stack levels used:    1
  8961 ;; This function calls:
  8962 ;;		Nothing
  8963 ;; This function is called by:
  8964 ;;		_fround
  8965 ;;		_scale
  8966 ;;		_LCD_Write_Int
  8967 ;; This function uses a non-reentrant model
  8968 ;;
  8969                           
  8970                           
  8971                           ;psect for function ___awmod
  8972  115E                     ___awmod:	
  8973                           
  8974                           ;incstack = 0
  8975                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  8976  115E  01F6               	clrf	___awmod@sign
  8977  115F  1FF3               	btfss	___awmod@dividend+1,7
  8978  1160  2968               	goto	l2533
  8979  1161  09F2               	comf	___awmod@dividend,f
  8980  1162  09F3               	comf	___awmod@dividend+1,f
  8981  1163  0AF2               	incf	___awmod@dividend,f
  8982  1164  1903               	skipnz
  8983  1165  0AF3               	incf	___awmod@dividend+1,f
  8984  1166  01F6               	clrf	___awmod@sign
  8985  1167  0AF6               	incf	___awmod@sign,f
  8986  1168                     l2533:	
  8987  1168  1FF1               	btfss	___awmod@divisor+1,7
  8988  1169  296F               	goto	l2537
  8989  116A  09F0               	comf	___awmod@divisor,f
  8990  116B  09F1               	comf	___awmod@divisor+1,f
  8991  116C  0AF0               	incf	___awmod@divisor,f
  8992  116D  1903               	skipnz
  8993  116E  0AF1               	incf	___awmod@divisor+1,f
  8994  116F                     l2537:	
  8995  116F  0870               	movf	___awmod@divisor,w
  8996  1170  0471               	iorwf	___awmod@divisor+1,w
  8997  1171  1903               	btfsc	3,2
  8998  1172  2996               	goto	l2555
  8999  1173  01F5               	clrf	___awmod@counter
  9000  1174  0AF5               	incf	___awmod@counter,f
  9001  1175                     l2545:	
  9002  1175  1BF1               	btfsc	___awmod@divisor+1,7
  9003  1176  2981               	goto	l2547
  9004  1177  3001               	movlw	1
  9005  1178                     u2825:	
  9006  1178  35F0               	lslf	___awmod@divisor,f
  9007  1179  0DF1               	rlf	___awmod@divisor+1,f
  9008  117A  0B89               	decfsz	9,f
  9009  117B  2978               	goto	u2825
  9010  117C  3001               	movlw	1
  9011  117D  00F4               	movwf	??___awmod
  9012  117E  0874               	movf	??___awmod,w
  9013  117F  07F5               	addwf	___awmod@counter,f
  9014  1180  2975               	goto	l2545
  9015  1181                     l2547:	
  9016  1181  0871               	movf	___awmod@divisor+1,w
  9017  1182  0273               	subwf	___awmod@dividend+1,w
  9018  1183  1D03               	skipz
  9019  1184  2987               	goto	u2845
  9020  1185  0870               	movf	___awmod@divisor,w
  9021  1186  0272               	subwf	___awmod@dividend,w
  9022  1187                     u2845:	
  9023  1187  1C03               	skipc
  9024  1188  298D               	goto	l2551
  9025  1189  0870               	movf	___awmod@divisor,w
  9026  118A  02F2               	subwf	___awmod@dividend,f
  9027  118B  0871               	movf	___awmod@divisor+1,w
  9028  118C  3BF3               	subwfb	___awmod@dividend+1,f
  9029  118D                     l2551:	
  9030  118D  3001               	movlw	1
  9031  118E                     u2855:	
  9032  118E  36F1               	lsrf	___awmod@divisor+1,f
  9033  118F  0CF0               	rrf	___awmod@divisor,f
  9034  1190  0B89               	decfsz	9,f
  9035  1191  298E               	goto	u2855
  9036  1192  3001               	movlw	1
  9037  1193  02F5               	subwf	___awmod@counter,f
  9038  1194  1D03               	btfss	3,2
  9039  1195  2981               	goto	l2547
  9040  1196                     l2555:	
  9041  1196  0876               	movf	___awmod@sign,w
  9042  1197  1903               	btfsc	3,2
  9043  1198  299E               	goto	l2559
  9044  1199  09F2               	comf	___awmod@dividend,f
  9045  119A  09F3               	comf	___awmod@dividend+1,f
  9046  119B  0AF2               	incf	___awmod@dividend,f
  9047  119C  1903               	skipnz
  9048  119D  0AF3               	incf	___awmod@dividend+1,f
  9049  119E                     l2559:	
  9050  119E  0873               	movf	___awmod@dividend+1,w
  9051  119F  00F1               	movwf	?___awmod+1
  9052  11A0  0872               	movf	___awmod@dividend,w
  9053  11A1  00F0               	movwf	?___awmod
  9054  11A2  0008               	return
  9055  11A3                     __end_of___awmod:	
  9056                           
  9057                           	psect	text6
  9058  11F5                     __ptext6:	
  9059 ;; *************** function ___awdiv *****************
  9060 ;; Defined at:
  9061 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awdiv.c"
  9062 ;; Parameters:    Size  Location     Type
  9063 ;;  divisor         2    7[COMMON] int 
  9064 ;;  dividend        2    9[COMMON] int 
  9065 ;; Auto vars:     Size  Location     Type
  9066 ;;  quotient        2    2[BANK0 ] int 
  9067 ;;  sign            1    1[BANK0 ] unsigned char 
  9068 ;;  counter         1    0[BANK0 ] unsigned char 
  9069 ;; Return value:  Size  Location     Type
  9070 ;;                  2    7[COMMON] int 
  9071 ;; Registers used:
  9072 ;;		wreg, status,2, status,0
  9073 ;; Tracked objects:
  9074 ;;		On entry : 0/0
  9075 ;;		On exit  : 0/0
  9076 ;;		Unchanged: 0/0
  9077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9078 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9079 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9080 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9081 ;;      Totals:         5       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9082 ;;Total ram usage:        9 bytes
  9083 ;; Hardware stack levels used:    1
  9084 ;; This function calls:
  9085 ;;		Nothing
  9086 ;; This function is called by:
  9087 ;;		_fround
  9088 ;;		_scale
  9089 ;;		_sprintf
  9090 ;;		_LCD_Write_Int
  9091 ;; This function uses a non-reentrant model
  9092 ;;
  9093                           
  9094                           
  9095                           ;psect for function ___awdiv
  9096  11F5                     ___awdiv:	
  9097                           
  9098                           ;incstack = 0
  9099                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  9100  11F5  0020               	movlb	0	; select bank0
  9101  11F6  01A1               	clrf	___awdiv@sign
  9102  11F7  1FF8               	btfss	___awdiv@divisor+1,7
  9103  11F8  2A00               	goto	l2489
  9104  11F9  09F7               	comf	___awdiv@divisor,f
  9105  11FA  09F8               	comf	___awdiv@divisor+1,f
  9106  11FB  0AF7               	incf	___awdiv@divisor,f
  9107  11FC  1903               	skipnz
  9108  11FD  0AF8               	incf	___awdiv@divisor+1,f
  9109  11FE  01A1               	clrf	___awdiv@sign
  9110  11FF  0AA1               	incf	___awdiv@sign,f
  9111  1200                     l2489:	
  9112  1200  1FFA               	btfss	___awdiv@dividend+1,7
  9113  1201  2A0B               	goto	l2495
  9114  1202  09F9               	comf	___awdiv@dividend,f
  9115  1203  09FA               	comf	___awdiv@dividend+1,f
  9116  1204  0AF9               	incf	___awdiv@dividend,f
  9117  1205  1903               	skipnz
  9118  1206  0AFA               	incf	___awdiv@dividend+1,f
  9119  1207  3001               	movlw	1
  9120  1208  00FB               	movwf	??___awdiv
  9121  1209  087B               	movf	??___awdiv,w
  9122  120A  06A1               	xorwf	___awdiv@sign,f
  9123  120B                     l2495:	
  9124  120B  01A2               	clrf	___awdiv@quotient
  9125  120C  01A3               	clrf	___awdiv@quotient+1
  9126  120D  0877               	movf	___awdiv@divisor,w
  9127  120E  0478               	iorwf	___awdiv@divisor+1,w
  9128  120F  1903               	btfsc	3,2
  9129  1210  2A3A               	goto	l2517
  9130  1211  01A0               	clrf	___awdiv@counter
  9131  1212  0AA0               	incf	___awdiv@counter,f
  9132  1213                     l2505:	
  9133  1213  1BF8               	btfsc	___awdiv@divisor+1,7
  9134  1214  2A1F               	goto	l2507
  9135  1215  3001               	movlw	1
  9136  1216                     u2725:	
  9137  1216  35F7               	lslf	___awdiv@divisor,f
  9138  1217  0DF8               	rlf	___awdiv@divisor+1,f
  9139  1218  0B89               	decfsz	9,f
  9140  1219  2A16               	goto	u2725
  9141  121A  3001               	movlw	1
  9142  121B  00FB               	movwf	??___awdiv
  9143  121C  087B               	movf	??___awdiv,w
  9144  121D  07A0               	addwf	___awdiv@counter,f
  9145  121E  2A13               	goto	l2505
  9146  121F                     l2507:	
  9147  121F  3001               	movlw	1
  9148  1220                     u2745:	
  9149  1220  35A2               	lslf	___awdiv@quotient,f
  9150  1221  0DA3               	rlf	___awdiv@quotient+1,f
  9151  1222  0B89               	decfsz	9,f
  9152  1223  2A20               	goto	u2745
  9153  1224  0878               	movf	___awdiv@divisor+1,w
  9154  1225  027A               	subwf	___awdiv@dividend+1,w
  9155  1226  1D03               	skipz
  9156  1227  2A2A               	goto	u2755
  9157  1228  0877               	movf	___awdiv@divisor,w
  9158  1229  0279               	subwf	___awdiv@dividend,w
  9159  122A                     u2755:	
  9160  122A  1C03               	skipc
  9161  122B  2A31               	goto	l2513
  9162  122C  0877               	movf	___awdiv@divisor,w
  9163  122D  02F9               	subwf	___awdiv@dividend,f
  9164  122E  0878               	movf	___awdiv@divisor+1,w
  9165  122F  3BFA               	subwfb	___awdiv@dividend+1,f
  9166  1230  1422               	bsf	___awdiv@quotient,0
  9167  1231                     l2513:	
  9168  1231  3001               	movlw	1
  9169  1232                     u2765:	
  9170  1232  36F8               	lsrf	___awdiv@divisor+1,f
  9171  1233  0CF7               	rrf	___awdiv@divisor,f
  9172  1234  0B89               	decfsz	9,f
  9173  1235  2A32               	goto	u2765
  9174  1236  3001               	movlw	1
  9175  1237  02A0               	subwf	___awdiv@counter,f
  9176  1238  1D03               	btfss	3,2
  9177  1239  2A1F               	goto	l2507
  9178  123A                     l2517:	
  9179  123A  0821               	movf	___awdiv@sign,w
  9180  123B  1903               	btfsc	3,2
  9181  123C  2A42               	goto	l2521
  9182  123D  09A2               	comf	___awdiv@quotient,f
  9183  123E  09A3               	comf	___awdiv@quotient+1,f
  9184  123F  0AA2               	incf	___awdiv@quotient,f
  9185  1240  1903               	skipnz
  9186  1241  0AA3               	incf	___awdiv@quotient+1,f
  9187  1242                     l2521:	
  9188  1242  0823               	movf	___awdiv@quotient+1,w
  9189  1243  00F8               	movwf	?___awdiv+1
  9190  1244  0822               	movf	___awdiv@quotient,w
  9191  1245  00F7               	movwf	?___awdiv
  9192  1246  0008               	return
  9193  1247                     __end_of___awdiv:	
  9194                           
  9195                           	psect	text7
  9196  001B                     __ptext7:	
  9197 ;; *************** function __tdiv_to_l_ *****************
  9198 ;; Defined at:
  9199 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftdivl.c"
  9200 ;; Parameters:    Size  Location     Type
  9201 ;;  f1              3    0[COMMON] float 
  9202 ;;  f2              3    3[COMMON] float 
  9203 ;; Auto vars:     Size  Location     Type
  9204 ;;  quot            4    0[BANK0 ] unsigned long 
  9205 ;;  exp1            1    5[BANK0 ] unsigned char 
  9206 ;;  cntr            1    4[BANK0 ] unsigned char 
  9207 ;; Return value:  Size  Location     Type
  9208 ;;                  4    0[COMMON] unsigned long 
  9209 ;; Registers used:
  9210 ;;		wreg, status,2, status,0
  9211 ;; Tracked objects:
  9212 ;;		On entry : 0/0
  9213 ;;		On exit  : 0/0
  9214 ;;		Unchanged: 0/0
  9215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9216 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9217 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9218 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9219 ;;      Totals:        10       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9220 ;;Total ram usage:       16 bytes
  9221 ;; Hardware stack levels used:    1
  9222 ;; This function calls:
  9223 ;;		Nothing
  9224 ;; This function is called by:
  9225 ;;		_sprintf
  9226 ;; This function uses a non-reentrant model
  9227 ;;
  9228                           
  9229                           
  9230                           ;psect for function __tdiv_to_l_
  9231  001B                     __tdiv_to_l_:	
  9232                           
  9233                           ;incstack = 0
  9234                           ; Regs used in __tdiv_to_l_: [wreg+status,2+status,0]
  9235  001B  0870               	movf	__tdiv_to_l_@f1,w
  9236  001C  00F6               	movwf	??__tdiv_to_l_
  9237  001D  0871               	movf	__tdiv_to_l_@f1+1,w
  9238  001E  00F7               	movwf	??__tdiv_to_l_+1
  9239  001F  0872               	movf	__tdiv_to_l_@f1+2,w
  9240  0020  00F8               	movwf	??__tdiv_to_l_+2
  9241  0021  1003               	clrc
  9242  0022  0D77               	rlf	??__tdiv_to_l_+1,w
  9243  0023  0D78               	rlf	??__tdiv_to_l_+2,w
  9244  0024  00F9               	movwf	??__tdiv_to_l_+3
  9245  0025  0879               	movf	??__tdiv_to_l_+3,w
  9246  0026  0020               	movlb	0	; select bank0
  9247  0027  00A5               	movwf	__tdiv_to_l_@exp1
  9248  0028  0825               	movf	__tdiv_to_l_@exp1,w
  9249  0029  1D03               	btfss	3,2
  9250  002A  2834               	goto	l2893
  9251  002B  3000               	movlw	0
  9252  002C  00F3               	movwf	?__tdiv_to_l_+3
  9253  002D  3000               	movlw	0
  9254  002E  00F2               	movwf	?__tdiv_to_l_+2
  9255  002F  3000               	movlw	0
  9256  0030  00F1               	movwf	?__tdiv_to_l_+1
  9257  0031  3000               	movlw	0
  9258  0032  00F0               	movwf	?__tdiv_to_l_
  9259  0033  0008               	return
  9260  0034                     l2893:	
  9261  0034  0873               	movf	__tdiv_to_l_@f2,w
  9262  0035  00F6               	movwf	??__tdiv_to_l_
  9263  0036  0874               	movf	__tdiv_to_l_@f2+1,w
  9264  0037  00F7               	movwf	??__tdiv_to_l_+1
  9265  0038  0875               	movf	__tdiv_to_l_@f2+2,w
  9266  0039  00F8               	movwf	??__tdiv_to_l_+2
  9267  003A  1003               	clrc
  9268  003B  0D77               	rlf	??__tdiv_to_l_+1,w
  9269  003C  0D78               	rlf	??__tdiv_to_l_+2,w
  9270  003D  00F9               	movwf	??__tdiv_to_l_+3
  9271  003E  0879               	movf	??__tdiv_to_l_+3,w
  9272  003F  00A4               	movwf	__tdiv_to_l_@cntr
  9273  0040  0824               	movf	__tdiv_to_l_@cntr,w
  9274  0041  1D03               	btfss	3,2
  9275  0042  284C               	goto	l721
  9276  0043  3000               	movlw	0
  9277  0044  00F3               	movwf	?__tdiv_to_l_+3
  9278  0045  3000               	movlw	0
  9279  0046  00F2               	movwf	?__tdiv_to_l_+2
  9280  0047  3000               	movlw	0
  9281  0048  00F1               	movwf	?__tdiv_to_l_+1
  9282  0049  3000               	movlw	0
  9283  004A  00F0               	movwf	?__tdiv_to_l_
  9284  004B  0008               	return
  9285  004C                     l721:	
  9286  004C  17F1               	bsf	__tdiv_to_l_@f1+1,7
  9287  004D  30FF               	movlw	255
  9288  004E  05F0               	andwf	__tdiv_to_l_@f1,f
  9289  004F  30FF               	movlw	255
  9290  0050  05F1               	andwf	__tdiv_to_l_@f1+1,f
  9291  0051  3000               	movlw	0
  9292  0052  05F2               	andwf	__tdiv_to_l_@f1+2,f
  9293  0053  17F4               	bsf	__tdiv_to_l_@f2+1,7
  9294  0054  30FF               	movlw	255
  9295  0055  05F3               	andwf	__tdiv_to_l_@f2,f
  9296  0056  30FF               	movlw	255
  9297  0057  05F4               	andwf	__tdiv_to_l_@f2+1,f
  9298  0058  3000               	movlw	0
  9299  0059  05F5               	andwf	__tdiv_to_l_@f2+2,f
  9300  005A  3000               	movlw	0
  9301  005B  00A3               	movwf	__tdiv_to_l_@quot+3
  9302  005C  3000               	movlw	0
  9303  005D  00A2               	movwf	__tdiv_to_l_@quot+2
  9304  005E  3000               	movlw	0
  9305  005F  00A1               	movwf	__tdiv_to_l_@quot+1
  9306  0060  3000               	movlw	0
  9307  0061  00A0               	movwf	__tdiv_to_l_@quot
  9308  0062  307F               	movlw	127
  9309  0063  02A5               	subwf	__tdiv_to_l_@exp1,f
  9310  0064  3098               	movlw	152
  9311  0065  0724               	addwf	__tdiv_to_l_@cntr,w
  9312  0066  00F6               	movwf	??__tdiv_to_l_
  9313  0067  0876               	movf	??__tdiv_to_l_,w
  9314  0068  02A5               	subwf	__tdiv_to_l_@exp1,f
  9315  0069  3018               	movlw	24
  9316  006A  00F6               	movwf	??__tdiv_to_l_
  9317  006B  0876               	movf	??__tdiv_to_l_,w
  9318  006C  00A4               	movwf	__tdiv_to_l_@cntr
  9319  006D                     l2907:	
  9320  006D  3001               	movlw	1
  9321  006E                     u3385:	
  9322  006E  35A0               	lslf	__tdiv_to_l_@quot,f
  9323  006F  0DA1               	rlf	__tdiv_to_l_@quot+1,f
  9324  0070  0DA2               	rlf	__tdiv_to_l_@quot+2,f
  9325  0071  0DA3               	rlf	__tdiv_to_l_@quot+3,f
  9326  0072  0B89               	decfsz	9,f
  9327  0073  286E               	goto	u3385
  9328  0074  0875               	movf	__tdiv_to_l_@f2+2,w
  9329  0075  0272               	subwf	__tdiv_to_l_@f1+2,w
  9330  0076  1D03               	skipz
  9331  0077  287E               	goto	u3395
  9332  0078  0874               	movf	__tdiv_to_l_@f2+1,w
  9333  0079  0271               	subwf	__tdiv_to_l_@f1+1,w
  9334  007A  1D03               	skipz
  9335  007B  287E               	goto	u3395
  9336  007C  0873               	movf	__tdiv_to_l_@f2,w
  9337  007D  0270               	subwf	__tdiv_to_l_@f1,w
  9338  007E                     u3395:	
  9339  007E  1C03               	skipc
  9340  007F  2887               	goto	l2915
  9341  0080  0873               	movf	__tdiv_to_l_@f2,w
  9342  0081  02F0               	subwf	__tdiv_to_l_@f1,f
  9343  0082  0874               	movf	__tdiv_to_l_@f2+1,w
  9344  0083  3BF1               	subwfb	__tdiv_to_l_@f1+1,f
  9345  0084  0875               	movf	__tdiv_to_l_@f2+2,w
  9346  0085  3BF2               	subwfb	__tdiv_to_l_@f1+2,f
  9347  0086  1420               	bsf	__tdiv_to_l_@quot,0
  9348  0087                     l2915:	
  9349  0087  3001               	movlw	1
  9350  0088                     u3405:	
  9351  0088  35F0               	lslf	__tdiv_to_l_@f1,f
  9352  0089  0DF1               	rlf	__tdiv_to_l_@f1+1,f
  9353  008A  0DF2               	rlf	__tdiv_to_l_@f1+2,f
  9354  008B  0B89               	decfsz	9,f
  9355  008C  2888               	goto	u3405
  9356  008D  3001               	movlw	1
  9357  008E  02A4               	subwf	__tdiv_to_l_@cntr,f
  9358  008F  1D03               	btfss	3,2
  9359  0090  286D               	goto	l2907
  9360  0091  1FA5               	btfss	__tdiv_to_l_@exp1,7
  9361  0092  28AF               	goto	l2927
  9362  0093  0825               	movf	__tdiv_to_l_@exp1,w
  9363  0094  3A80               	xorlw	128
  9364  0095  3E97               	addlw	151
  9365  0096  1803               	skipnc
  9366  0097  28A1               	goto	l2925
  9367  0098  3000               	movlw	0
  9368  0099  00F3               	movwf	?__tdiv_to_l_+3
  9369  009A  3000               	movlw	0
  9370  009B  00F2               	movwf	?__tdiv_to_l_+2
  9371  009C  3000               	movlw	0
  9372  009D  00F1               	movwf	?__tdiv_to_l_+1
  9373  009E  3000               	movlw	0
  9374  009F  00F0               	movwf	?__tdiv_to_l_
  9375  00A0  0008               	return
  9376  00A1                     l2925:	
  9377  00A1  3001               	movlw	1
  9378  00A2                     u3445:	
  9379  00A2  36A3               	lsrf	__tdiv_to_l_@quot+3,f
  9380  00A3  0CA2               	rrf	__tdiv_to_l_@quot+2,f
  9381  00A4  0CA1               	rrf	__tdiv_to_l_@quot+1,f
  9382  00A5  0CA0               	rrf	__tdiv_to_l_@quot,f
  9383  00A6  0B89               	decfsz	9,f
  9384  00A7  28A2               	goto	u3445
  9385  00A8  3001               	movlw	1
  9386  00A9  00F6               	movwf	??__tdiv_to_l_
  9387  00AA  0876               	movf	??__tdiv_to_l_,w
  9388  00AB  07A5               	addwf	__tdiv_to_l_@exp1,f
  9389  00AC  1903               	btfsc	3,2
  9390  00AD  28C8               	goto	l2935
  9391  00AE  28A1               	goto	l2925
  9392  00AF                     l2927:	
  9393  00AF  3018               	movlw	24
  9394  00B0  0225               	subwf	__tdiv_to_l_@exp1,w
  9395  00B1  1C03               	skipc
  9396  00B2  28C5               	goto	l731
  9397  00B3  3000               	movlw	0
  9398  00B4  00F3               	movwf	?__tdiv_to_l_+3
  9399  00B5  3000               	movlw	0
  9400  00B6  00F2               	movwf	?__tdiv_to_l_+2
  9401  00B7  3000               	movlw	0
  9402  00B8  00F1               	movwf	?__tdiv_to_l_+1
  9403  00B9  3000               	movlw	0
  9404  00BA  00F0               	movwf	?__tdiv_to_l_
  9405  00BB  0008               	return
  9406  00BC                     l2933:	
  9407  00BC  3001               	movlw	1
  9408  00BD                     u3475:	
  9409  00BD  35A0               	lslf	__tdiv_to_l_@quot,f
  9410  00BE  0DA1               	rlf	__tdiv_to_l_@quot+1,f
  9411  00BF  0DA2               	rlf	__tdiv_to_l_@quot+2,f
  9412  00C0  0DA3               	rlf	__tdiv_to_l_@quot+3,f
  9413  00C1  0B89               	decfsz	9,f
  9414  00C2  28BD               	goto	u3475
  9415  00C3  3001               	movlw	1
  9416  00C4  02A5               	subwf	__tdiv_to_l_@exp1,f
  9417  00C5                     l731:	
  9418  00C5  0825               	movf	__tdiv_to_l_@exp1,w
  9419  00C6  1D03               	btfss	3,2
  9420  00C7  28BC               	goto	l2933
  9421  00C8                     l2935:	
  9422  00C8  0823               	movf	__tdiv_to_l_@quot+3,w
  9423  00C9  00F3               	movwf	?__tdiv_to_l_+3
  9424  00CA  0822               	movf	__tdiv_to_l_@quot+2,w
  9425  00CB  00F2               	movwf	?__tdiv_to_l_+2
  9426  00CC  0821               	movf	__tdiv_to_l_@quot+1,w
  9427  00CD  00F1               	movwf	?__tdiv_to_l_+1
  9428  00CE  0820               	movf	__tdiv_to_l_@quot,w
  9429  00CF  00F0               	movwf	?__tdiv_to_l_
  9430  00D0  0008               	return
  9431  00D1                     __end_of__tdiv_to_l_:	
  9432                           
  9433                           	psect	text8
  9434  083B                     __ptext8:	
  9435 ;; *************** function __div_to_l_ *****************
  9436 ;; Defined at:
  9437 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\fldivl.c"
  9438 ;; Parameters:    Size  Location     Type
  9439 ;;  f1              3    0[COMMON] unsigned long 
  9440 ;;  f2              3    3[COMMON] unsigned long 
  9441 ;; Auto vars:     Size  Location     Type
  9442 ;;  quot            4    0[BANK0 ] unsigned long 
  9443 ;;  exp1            1    5[BANK0 ] unsigned char 
  9444 ;;  cntr            1    4[BANK0 ] unsigned char 
  9445 ;; Return value:  Size  Location     Type
  9446 ;;                  4    0[COMMON] unsigned long 
  9447 ;; Registers used:
  9448 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9449 ;; Tracked objects:
  9450 ;;		On entry : 0/0
  9451 ;;		On exit  : 0/0
  9452 ;;		Unchanged: 0/0
  9453 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9454 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9455 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9456 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9457 ;;      Totals:        14       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9458 ;;Total ram usage:       20 bytes
  9459 ;; Hardware stack levels used:    1
  9460 ;; This function calls:
  9461 ;;		Nothing
  9462 ;; This function is called by:
  9463 ;;		_sprintf
  9464 ;; This function uses a non-reentrant model
  9465 ;;
  9466                           
  9467                           
  9468                           ;psect for function __div_to_l_
  9469  083B                     __div_to_l_:	
  9470                           
  9471                           ;incstack = 0
  9472                           ; Regs used in __div_to_l_: [wreg+fsr1l+fsr1h+status,2+status,0]
  9473  083B  3070               	movlw	low (__div_to_l_@f1| 0)
  9474  083C  0086               	movwf	6
  9475  083D  0187               	clrf	7
  9476  083E  3F40               	moviw [0]fsr1
  9477  083F  00F6               	movwf	??__div_to_l_
  9478  0840  3F41               	moviw [1]fsr1
  9479  0841  00F7               	movwf	??__div_to_l_+1
  9480  0842  3F42               	moviw [2]fsr1
  9481  0843  00F8               	movwf	??__div_to_l_+2
  9482  0844  3F43               	moviw [3]fsr1
  9483  0845  00F9               	movwf	??__div_to_l_+3
  9484  0846  1003               	clrc
  9485  0847  0D78               	rlf	??__div_to_l_+2,w
  9486  0848  0D79               	rlf	??__div_to_l_+3,w
  9487  0849  00FA               	movwf	??__div_to_l_+4
  9488  084A  087A               	movf	??__div_to_l_+4,w
  9489  084B  0020               	movlb	0	; select bank0
  9490  084C  00A5               	movwf	__div_to_l_@exp1
  9491  084D  0825               	movf	__div_to_l_@exp1,w
  9492  084E  1D03               	btfss	3,2
  9493  084F  2859               	goto	l2945
  9494  0850  3000               	movlw	0
  9495  0851  00F3               	movwf	?__div_to_l_+3
  9496  0852  3000               	movlw	0
  9497  0853  00F2               	movwf	?__div_to_l_+2
  9498  0854  3000               	movlw	0
  9499  0855  00F1               	movwf	?__div_to_l_+1
  9500  0856  3000               	movlw	0
  9501  0857  00F0               	movwf	?__div_to_l_
  9502  0858  0008               	return
  9503  0859                     l2945:	
  9504  0859  3073               	movlw	low (__div_to_l_@f2| 0)
  9505  085A  0086               	movwf	6
  9506  085B  0187               	clrf	7
  9507  085C  3F40               	moviw [0]fsr1
  9508  085D  00F6               	movwf	??__div_to_l_
  9509  085E  3F41               	moviw [1]fsr1
  9510  085F  00F7               	movwf	??__div_to_l_+1
  9511  0860  3F42               	moviw [2]fsr1
  9512  0861  00F8               	movwf	??__div_to_l_+2
  9513  0862  3F43               	moviw [3]fsr1
  9514  0863  00F9               	movwf	??__div_to_l_+3
  9515  0864  1003               	clrc
  9516  0865  0D78               	rlf	??__div_to_l_+2,w
  9517  0866  0D79               	rlf	??__div_to_l_+3,w
  9518  0867  00FA               	movwf	??__div_to_l_+4
  9519  0868  087A               	movf	??__div_to_l_+4,w
  9520  0869  00A4               	movwf	__div_to_l_@cntr
  9521  086A  0824               	movf	__div_to_l_@cntr,w
  9522  086B  1D03               	btfss	3,2
  9523  086C  2876               	goto	l2951
  9524  086D  3000               	movlw	0
  9525  086E  00F3               	movwf	?__div_to_l_+3
  9526  086F  3000               	movlw	0
  9527  0870  00F2               	movwf	?__div_to_l_+2
  9528  0871  3000               	movlw	0
  9529  0872  00F1               	movwf	?__div_to_l_+1
  9530  0873  3000               	movlw	0
  9531  0874  00F0               	movwf	?__div_to_l_
  9532  0875  0008               	return
  9533  0876                     l2951:	
  9534  0876  3070               	movlw	low (__div_to_l_@f1| 0)
  9535  0877  0086               	movwf	6
  9536  0878  0187               	clrf	7
  9537  0879  3000               	movlw	0
  9538  087A  0481               	iorwf	1,f
  9539  087B  3141               	addfsr 1,1
  9540  087C  3000               	movlw	0
  9541  087D  0481               	iorwf	1,f
  9542  087E  3141               	addfsr 1,1
  9543  087F  3080               	movlw	128
  9544  0880  0481               	iorwf	1,f
  9545  0881  3141               	addfsr 1,1
  9546  0882  3000               	movlw	0
  9547  0883  0481               	iorwf	1,f
  9548  0884  3070               	movlw	low (__div_to_l_@f1| 0)
  9549  0885  0086               	movwf	6
  9550  0886  0187               	clrf	7
  9551  0887  30FF               	movlw	255
  9552  0888  0581               	andwf	1,f
  9553  0889  3141               	addfsr 1,1
  9554  088A  30FF               	movlw	255
  9555  088B  0581               	andwf	1,f
  9556  088C  3141               	addfsr 1,1
  9557  088D  30FF               	movlw	255
  9558  088E  0581               	andwf	1,f
  9559  088F  3141               	addfsr 1,1
  9560  0890  3000               	movlw	0
  9561  0891  0581               	andwf	1,f
  9562  0892  3073               	movlw	low (__div_to_l_@f2| 0)
  9563  0893  0086               	movwf	6
  9564  0894  0187               	clrf	7
  9565  0895  3000               	movlw	0
  9566  0896  0481               	iorwf	1,f
  9567  0897  3141               	addfsr 1,1
  9568  0898  3000               	movlw	0
  9569  0899  0481               	iorwf	1,f
  9570  089A  3141               	addfsr 1,1
  9571  089B  3080               	movlw	128
  9572  089C  0481               	iorwf	1,f
  9573  089D  3141               	addfsr 1,1
  9574  089E  3000               	movlw	0
  9575  089F  0481               	iorwf	1,f
  9576  08A0  3073               	movlw	low (__div_to_l_@f2| 0)
  9577  08A1  0086               	movwf	6
  9578  08A2  0187               	clrf	7
  9579  08A3  30FF               	movlw	255
  9580  08A4  0581               	andwf	1,f
  9581  08A5  3141               	addfsr 1,1
  9582  08A6  30FF               	movlw	255
  9583  08A7  0581               	andwf	1,f
  9584  08A8  3141               	addfsr 1,1
  9585  08A9  30FF               	movlw	255
  9586  08AA  0581               	andwf	1,f
  9587  08AB  3141               	addfsr 1,1
  9588  08AC  3000               	movlw	0
  9589  08AD  0581               	andwf	1,f
  9590  08AE  3000               	movlw	0
  9591  08AF  00A3               	movwf	__div_to_l_@quot+3
  9592  08B0  3000               	movlw	0
  9593  08B1  00A2               	movwf	__div_to_l_@quot+2
  9594  08B2  3000               	movlw	0
  9595  08B3  00A1               	movwf	__div_to_l_@quot+1
  9596  08B4  3000               	movlw	0
  9597  08B5  00A0               	movwf	__div_to_l_@quot
  9598  08B6  307F               	movlw	127
  9599  08B7  02A5               	subwf	__div_to_l_@exp1,f
  9600  08B8  30A0               	movlw	160
  9601  08B9  0724               	addwf	__div_to_l_@cntr,w
  9602  08BA  00F6               	movwf	??__div_to_l_
  9603  08BB  0876               	movf	??__div_to_l_,w
  9604  08BC  02A5               	subwf	__div_to_l_@exp1,f
  9605  08BD  3020               	movlw	32
  9606  08BE  00F6               	movwf	??__div_to_l_
  9607  08BF  0876               	movf	??__div_to_l_,w
  9608  08C0  00A4               	movwf	__div_to_l_@cntr
  9609  08C1                     l2961:	
  9610  08C1  3001               	movlw	1
  9611  08C2                     u3515:	
  9612  08C2  35A0               	lslf	__div_to_l_@quot,f
  9613  08C3  0DA1               	rlf	__div_to_l_@quot+1,f
  9614  08C4  0DA2               	rlf	__div_to_l_@quot+2,f
  9615  08C5  0DA3               	rlf	__div_to_l_@quot+3,f
  9616  08C6  0B89               	decfsz	9,f
  9617  08C7  28C2               	goto	u3515
  9618  08C8  3073               	movlw	low (__div_to_l_@f2| 0)
  9619  08C9  0086               	movwf	6
  9620  08CA  0187               	clrf	7
  9621  08CB  3F40               	moviw [0]fsr1
  9622  08CC  00F6               	movwf	??__div_to_l_
  9623  08CD  3F41               	moviw [1]fsr1
  9624  08CE  00F7               	movwf	??__div_to_l_+1
  9625  08CF  3F42               	moviw [2]fsr1
  9626  08D0  00F8               	movwf	??__div_to_l_+2
  9627  08D1  3F43               	moviw [3]fsr1
  9628  08D2  00F9               	movwf	??__div_to_l_+3
  9629  08D3  3070               	movlw	low (__div_to_l_@f1| 0)
  9630  08D4  0086               	movwf	6
  9631  08D5  0187               	clrf	7
  9632  08D6  3F40               	moviw [0]fsr1
  9633  08D7  00FA               	movwf	??__div_to_l_+4
  9634  08D8  3F41               	moviw [1]fsr1
  9635  08D9  00FB               	movwf	??__div_to_l_+5
  9636  08DA  3F42               	moviw [2]fsr1
  9637  08DB  00FC               	movwf	??__div_to_l_+6
  9638  08DC  3F43               	moviw [3]fsr1
  9639  08DD  00FD               	movwf	??__div_to_l_+7
  9640  08DE  0879               	movf	??__div_to_l_+3,w
  9641  08DF  027D               	subwf	??__div_to_l_+7,w
  9642  08E0  1D03               	skipz
  9643  08E1  28EC               	goto	u3525
  9644  08E2  0878               	movf	??__div_to_l_+2,w
  9645  08E3  027C               	subwf	??__div_to_l_+6,w
  9646  08E4  1D03               	skipz
  9647  08E5  28EC               	goto	u3525
  9648  08E6  0877               	movf	??__div_to_l_+1,w
  9649  08E7  027B               	subwf	??__div_to_l_+5,w
  9650  08E8  1D03               	skipz
  9651  08E9  28EC               	goto	u3525
  9652  08EA  0876               	movf	??__div_to_l_,w
  9653  08EB  027A               	subwf	??__div_to_l_+4,w
  9654  08EC                     u3525:	
  9655  08EC  1C03               	skipc
  9656  08ED  2909               	goto	l2969
  9657  08EE  3073               	movlw	low (__div_to_l_@f2| 0)
  9658  08EF  0086               	movwf	6
  9659  08F0  0187               	clrf	7
  9660  08F1  3F40               	moviw [0]fsr1
  9661  08F2  00F6               	movwf	??__div_to_l_
  9662  08F3  3F41               	moviw [1]fsr1
  9663  08F4  00F7               	movwf	??__div_to_l_+1
  9664  08F5  3F42               	moviw [2]fsr1
  9665  08F6  00F8               	movwf	??__div_to_l_+2
  9666  08F7  3F43               	moviw [3]fsr1
  9667  08F8  00F9               	movwf	??__div_to_l_+3
  9668  08F9  3070               	movlw	low (__div_to_l_@f1| 0)
  9669  08FA  0086               	movwf	6
  9670  08FB  0187               	clrf	7
  9671  08FC  0876               	movf	??__div_to_l_,w
  9672  08FD  0281               	subwf	1,f
  9673  08FE  3141               	addfsr 1,1
  9674  08FF  0877               	movf	??__div_to_l_+1,w
  9675  0900  3B81               	subwfb	1,f
  9676  0901  3141               	addfsr 1,1
  9677  0902  0878               	movf	??__div_to_l_+2,w
  9678  0903  3B81               	subwfb	1,f
  9679  0904  3141               	addfsr 1,1
  9680  0905  0879               	movf	??__div_to_l_+3,w
  9681  0906  3B81               	subwfb	1,f
  9682  0907  317D               	addfsr 1,-3
  9683  0908  1420               	bsf	__div_to_l_@quot,0
  9684  0909                     l2969:	
  9685  0909  3070               	movlw	low (__div_to_l_@f1| 0)
  9686  090A  0086               	movwf	6
  9687  090B  0187               	clrf	7
  9688  090C  3581               	lslf	1,f
  9689  090D  3141               	addfsr 1,1
  9690  090E  0D81               	rlf	1,f
  9691  090F  3141               	addfsr 1,1
  9692  0910  0D81               	rlf	1,f
  9693  0911  3141               	addfsr 1,1
  9694  0912  0D81               	rlf	1,f
  9695  0913  317D               	addfsr 1,-3
  9696  0914  3001               	movlw	1
  9697  0915  02A4               	subwf	__div_to_l_@cntr,f
  9698  0916  1D03               	btfss	3,2
  9699  0917  28C1               	goto	l2961
  9700  0918  1FA5               	btfss	__div_to_l_@exp1,7
  9701  0919  2936               	goto	l2981
  9702  091A  0825               	movf	__div_to_l_@exp1,w
  9703  091B  3A80               	xorlw	128
  9704  091C  3E9F               	addlw	159
  9705  091D  1803               	skipnc
  9706  091E  2928               	goto	l2979
  9707  091F  3000               	movlw	0
  9708  0920  00F3               	movwf	?__div_to_l_+3
  9709  0921  3000               	movlw	0
  9710  0922  00F2               	movwf	?__div_to_l_+2
  9711  0923  3000               	movlw	0
  9712  0924  00F1               	movwf	?__div_to_l_+1
  9713  0925  3000               	movlw	0
  9714  0926  00F0               	movwf	?__div_to_l_
  9715  0927  0008               	return
  9716  0928                     l2979:	
  9717  0928  3001               	movlw	1
  9718  0929                     u3565:	
  9719  0929  36A3               	lsrf	__div_to_l_@quot+3,f
  9720  092A  0CA2               	rrf	__div_to_l_@quot+2,f
  9721  092B  0CA1               	rrf	__div_to_l_@quot+1,f
  9722  092C  0CA0               	rrf	__div_to_l_@quot,f
  9723  092D  0B89               	decfsz	9,f
  9724  092E  2929               	goto	u3565
  9725  092F  3001               	movlw	1
  9726  0930  00F6               	movwf	??__div_to_l_
  9727  0931  0876               	movf	??__div_to_l_,w
  9728  0932  07A5               	addwf	__div_to_l_@exp1,f
  9729  0933  1903               	btfsc	3,2
  9730  0934  294F               	goto	l2989
  9731  0935  2928               	goto	l2979
  9732  0936                     l2981:	
  9733  0936  3020               	movlw	32
  9734  0937  0225               	subwf	__div_to_l_@exp1,w
  9735  0938  1C03               	skipc
  9736  0939  294C               	goto	l652
  9737  093A  3000               	movlw	0
  9738  093B  00F3               	movwf	?__div_to_l_+3
  9739  093C  3000               	movlw	0
  9740  093D  00F2               	movwf	?__div_to_l_+2
  9741  093E  3000               	movlw	0
  9742  093F  00F1               	movwf	?__div_to_l_+1
  9743  0940  3000               	movlw	0
  9744  0941  00F0               	movwf	?__div_to_l_
  9745  0942  0008               	return
  9746  0943                     l2987:	
  9747  0943  3001               	movlw	1
  9748  0944                     u3595:	
  9749  0944  35A0               	lslf	__div_to_l_@quot,f
  9750  0945  0DA1               	rlf	__div_to_l_@quot+1,f
  9751  0946  0DA2               	rlf	__div_to_l_@quot+2,f
  9752  0947  0DA3               	rlf	__div_to_l_@quot+3,f
  9753  0948  0B89               	decfsz	9,f
  9754  0949  2944               	goto	u3595
  9755  094A  3001               	movlw	1
  9756  094B  02A5               	subwf	__div_to_l_@exp1,f
  9757  094C                     l652:	
  9758  094C  0825               	movf	__div_to_l_@exp1,w
  9759  094D  1D03               	btfss	3,2
  9760  094E  2943               	goto	l2987
  9761  094F                     l2989:	
  9762  094F  0823               	movf	__div_to_l_@quot+3,w
  9763  0950  00F3               	movwf	?__div_to_l_+3
  9764  0951  0822               	movf	__div_to_l_@quot+2,w
  9765  0952  00F2               	movwf	?__div_to_l_+2
  9766  0953  0821               	movf	__div_to_l_@quot+1,w
  9767  0954  00F1               	movwf	?__div_to_l_+1
  9768  0955  0820               	movf	__div_to_l_@quot,w
  9769  0956  00F0               	movwf	?__div_to_l_
  9770  0957  0008               	return
  9771  0958                     __end_of__div_to_l_:	
  9772                           
  9773                           	psect	text9
  9774  104F                     __ptext9:	
  9775 ;; *************** function ___lltoft *****************
  9776 ;; Defined at:
  9777 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lltoft.c"
  9778 ;; Parameters:    Size  Location     Type
  9779 ;;  c               4    8[COMMON] unsigned long 
  9780 ;; Auto vars:     Size  Location     Type
  9781 ;;  exp             1   13[COMMON] unsigned char 
  9782 ;; Return value:  Size  Location     Type
  9783 ;;                  3    8[COMMON] float 
  9784 ;; Registers used:
  9785 ;;		wreg, status,2, status,0, pclath, cstack
  9786 ;; Tracked objects:
  9787 ;;		On entry : 0/0
  9788 ;;		On exit  : 0/0
  9789 ;;		Unchanged: 0/0
  9790 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9791 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9792 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9793 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9794 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9795 ;;Total ram usage:        6 bytes
  9796 ;; Hardware stack levels used:    1
  9797 ;; Hardware stack levels required when called:    1
  9798 ;; This function calls:
  9799 ;;		___ftpack
  9800 ;; This function is called by:
  9801 ;;		_sprintf
  9802 ;; This function uses a non-reentrant model
  9803 ;;
  9804                           
  9805                           
  9806                           ;psect for function ___lltoft
  9807  104F                     ___lltoft:	
  9808                           
  9809                           ;incstack = 0
  9810                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  9811  104F  308E               	movlw	142
  9812  1050  00FC               	movwf	??___lltoft
  9813  1051  087C               	movf	??___lltoft,w
  9814  1052  00FD               	movwf	___lltoft@exp
  9815  1053                     l3131:	
  9816  1053  30FF               	movlw	255
  9817  1054  057B               	andwf	___lltoft@c+3,w
  9818  1055  1903               	btfsc	3,2
  9819  1056  2863               	goto	l3133
  9820  1057  3001               	movlw	1
  9821  1058                     u3905:	
  9822  1058  36FB               	lsrf	___lltoft@c+3,f
  9823  1059  0CFA               	rrf	___lltoft@c+2,f
  9824  105A  0CF9               	rrf	___lltoft@c+1,f
  9825  105B  0CF8               	rrf	___lltoft@c,f
  9826  105C  0B89               	decfsz	9,f
  9827  105D  2858               	goto	u3905
  9828  105E  3001               	movlw	1
  9829  105F  00FC               	movwf	??___lltoft
  9830  1060  087C               	movf	??___lltoft,w
  9831  1061  07FD               	addwf	___lltoft@exp,f
  9832  1062  2853               	goto	l3131
  9833  1063                     l3133:	
  9834  1063  0878               	movf	___lltoft@c,w
  9835  1064  00F0               	movwf	___ftpack@arg
  9836  1065  0879               	movf	___lltoft@c+1,w
  9837  1066  00F1               	movwf	___ftpack@arg+1
  9838  1067  087A               	movf	___lltoft@c+2,w
  9839  1068  00F2               	movwf	___ftpack@arg+2
  9840  1069  087D               	movf	___lltoft@exp,w
  9841  106A  00FC               	movwf	??___lltoft
  9842  106B  087C               	movf	??___lltoft,w
  9843  106C  00F3               	movwf	___ftpack@exp
  9844  106D  01F4               	clrf	___ftpack@sign
  9845  106E  3192  22A7         	fcall	___ftpack
  9846  1070  0870               	movf	?___ftpack,w
  9847  1071  00F8               	movwf	?___lltoft
  9848  1072  0871               	movf	?___ftpack+1,w
  9849  1073  00F9               	movwf	?___lltoft+1
  9850  1074  0872               	movf	?___ftpack+2,w
  9851  1075  00FA               	movwf	?___lltoft+2
  9852  1076  0008               	return
  9853  1077                     __end_of___lltoft:	
  9854                           
  9855                           	psect	text10
  9856  111B                     __ptext10:	
  9857 ;; *************** function ___llmod *****************
  9858 ;; Defined at:
  9859 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\llmod.c"
  9860 ;; Parameters:    Size  Location     Type
  9861 ;;  divisor         4    0[BANK0 ] unsigned long 
  9862 ;;  dividend        4    4[BANK0 ] unsigned long 
  9863 ;; Auto vars:     Size  Location     Type
  9864 ;;  counter         1    9[BANK0 ] unsigned char 
  9865 ;; Return value:  Size  Location     Type
  9866 ;;                  4    0[BANK0 ] unsigned long 
  9867 ;; Registers used:
  9868 ;;		wreg, status,2, status,0
  9869 ;; Tracked objects:
  9870 ;;		On entry : 0/0
  9871 ;;		On exit  : 0/0
  9872 ;;		Unchanged: 0/0
  9873 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9874 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9875 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9876 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9877 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9878 ;;Total ram usage:       10 bytes
  9879 ;; Hardware stack levels used:    1
  9880 ;; This function calls:
  9881 ;;		Nothing
  9882 ;; This function is called by:
  9883 ;;		_sprintf
  9884 ;; This function uses a non-reentrant model
  9885 ;;
  9886                           
  9887                           
  9888                           ;psect for function ___llmod
  9889  111B                     ___llmod:	
  9890                           
  9891                           ;incstack = 0
  9892                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  9893  111B  0020               	movlb	0	; select bank0
  9894  111C  0823               	movf	___llmod@divisor+3,w
  9895  111D  0422               	iorwf	___llmod@divisor+2,w
  9896  111E  0421               	iorwf	___llmod@divisor+1,w
  9897  111F  0420               	iorwf	___llmod@divisor,w
  9898  1120  1903               	skipnz
  9899  1121  2955               	goto	l3123
  9900  1122  01A9               	clrf	___llmod@counter
  9901  1123  0AA9               	incf	___llmod@counter,f
  9902  1124                     l3113:	
  9903  1124  1BA3               	btfsc	___llmod@divisor+3,7
  9904  1125  2932               	goto	l3115
  9905  1126  3001               	movlw	1
  9906  1127                     u3855:	
  9907  1127  35A0               	lslf	___llmod@divisor,f
  9908  1128  0DA1               	rlf	___llmod@divisor+1,f
  9909  1129  0DA2               	rlf	___llmod@divisor+2,f
  9910  112A  0DA3               	rlf	___llmod@divisor+3,f
  9911  112B  0B89               	decfsz	9,f
  9912  112C  2927               	goto	u3855
  9913  112D  3001               	movlw	1
  9914  112E  00A8               	movwf	??___llmod
  9915  112F  0828               	movf	??___llmod,w
  9916  1130  07A9               	addwf	___llmod@counter,f
  9917  1131  2924               	goto	l3113
  9918  1132                     l3115:	
  9919  1132  0823               	movf	___llmod@divisor+3,w
  9920  1133  0227               	subwf	___llmod@dividend+3,w
  9921  1134  1D03               	skipz
  9922  1135  2940               	goto	u3875
  9923  1136  0822               	movf	___llmod@divisor+2,w
  9924  1137  0226               	subwf	___llmod@dividend+2,w
  9925  1138  1D03               	skipz
  9926  1139  2940               	goto	u3875
  9927  113A  0821               	movf	___llmod@divisor+1,w
  9928  113B  0225               	subwf	___llmod@dividend+1,w
  9929  113C  1D03               	skipz
  9930  113D  2940               	goto	u3875
  9931  113E  0820               	movf	___llmod@divisor,w
  9932  113F  0224               	subwf	___llmod@dividend,w
  9933  1140                     u3875:	
  9934  1140  1C03               	skipc
  9935  1141  294A               	goto	l3119
  9936  1142  0820               	movf	___llmod@divisor,w
  9937  1143  02A4               	subwf	___llmod@dividend,f
  9938  1144  0821               	movf	___llmod@divisor+1,w
  9939  1145  3BA5               	subwfb	___llmod@dividend+1,f
  9940  1146  0822               	movf	___llmod@divisor+2,w
  9941  1147  3BA6               	subwfb	___llmod@dividend+2,f
  9942  1148  0823               	movf	___llmod@divisor+3,w
  9943  1149  3BA7               	subwfb	___llmod@dividend+3,f
  9944  114A                     l3119:	
  9945  114A  3001               	movlw	1
  9946  114B                     u3885:	
  9947  114B  36A3               	lsrf	___llmod@divisor+3,f
  9948  114C  0CA2               	rrf	___llmod@divisor+2,f
  9949  114D  0CA1               	rrf	___llmod@divisor+1,f
  9950  114E  0CA0               	rrf	___llmod@divisor,f
  9951  114F  0B89               	decfsz	9,f
  9952  1150  294B               	goto	u3885
  9953  1151  3001               	movlw	1
  9954  1152  02A9               	subwf	___llmod@counter,f
  9955  1153  1D03               	btfss	3,2
  9956  1154  2932               	goto	l3115
  9957  1155                     l3123:	
  9958  1155  0827               	movf	___llmod@dividend+3,w
  9959  1156  00A3               	movwf	?___llmod+3
  9960  1157  0826               	movf	___llmod@dividend+2,w
  9961  1158  00A2               	movwf	?___llmod+2
  9962  1159  0825               	movf	___llmod@dividend+1,w
  9963  115A  00A1               	movwf	?___llmod+1
  9964  115B  0824               	movf	___llmod@dividend,w
  9965  115C  00A0               	movwf	?___llmod
  9966  115D  0008               	return
  9967  115E                     __end_of___llmod:	
  9968                           
  9969                           	psect	text11
  9970  11A3                     __ptext11:	
  9971 ;; *************** function ___lldiv *****************
  9972 ;; Defined at:
  9973 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lldiv.c"
  9974 ;; Parameters:    Size  Location     Type
  9975 ;;  divisor         4    0[COMMON] unsigned long 
  9976 ;;  dividend        4    4[COMMON] unsigned long 
  9977 ;; Auto vars:     Size  Location     Type
  9978 ;;  quotient        4    9[COMMON] unsigned long 
  9979 ;;  counter         1   13[COMMON] unsigned char 
  9980 ;; Return value:  Size  Location     Type
  9981 ;;                  4    0[COMMON] unsigned long 
  9982 ;; Registers used:
  9983 ;;		wreg, status,2, status,0
  9984 ;; Tracked objects:
  9985 ;;		On entry : 0/0
  9986 ;;		On exit  : 0/0
  9987 ;;		Unchanged: 0/0
  9988 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9989 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9990 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9991 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9992 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9993 ;;Total ram usage:       14 bytes
  9994 ;; Hardware stack levels used:    1
  9995 ;; This function calls:
  9996 ;;		Nothing
  9997 ;; This function is called by:
  9998 ;;		_sprintf
  9999 ;; This function uses a non-reentrant model
 10000 ;;
 10001                           
 10002                           
 10003                           ;psect for function ___lldiv
 10004  11A3                     ___lldiv:	
 10005                           
 10006                           ;incstack = 0
 10007                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
 10008  11A3  3000               	movlw	0
 10009  11A4  00FC               	movwf	___lldiv@quotient+3
 10010  11A5  3000               	movlw	0
 10011  11A6  00FB               	movwf	___lldiv@quotient+2
 10012  11A7  3000               	movlw	0
 10013  11A8  00FA               	movwf	___lldiv@quotient+1
 10014  11A9  3000               	movlw	0
 10015  11AA  00F9               	movwf	___lldiv@quotient
 10016  11AB  0873               	movf	___lldiv@divisor+3,w
 10017  11AC  0472               	iorwf	___lldiv@divisor+2,w
 10018  11AD  0471               	iorwf	___lldiv@divisor+1,w
 10019  11AE  0470               	iorwf	___lldiv@divisor,w
 10020  11AF  1903               	skipnz
 10021  11B0  29EC               	goto	l3103
 10022  11B1  01FD               	clrf	___lldiv@counter
 10023  11B2  0AFD               	incf	___lldiv@counter,f
 10024  11B3                     l3089:	
 10025  11B3  1BF3               	btfsc	___lldiv@divisor+3,7
 10026  11B4  29C1               	goto	l3091
 10027  11B5  3001               	movlw	1
 10028  11B6                     u3785:	
 10029  11B6  35F0               	lslf	___lldiv@divisor,f
 10030  11B7  0DF1               	rlf	___lldiv@divisor+1,f
 10031  11B8  0DF2               	rlf	___lldiv@divisor+2,f
 10032  11B9  0DF3               	rlf	___lldiv@divisor+3,f
 10033  11BA  0B89               	decfsz	9,f
 10034  11BB  29B6               	goto	u3785
 10035  11BC  3001               	movlw	1
 10036  11BD  00F8               	movwf	??___lldiv
 10037  11BE  0878               	movf	??___lldiv,w
 10038  11BF  07FD               	addwf	___lldiv@counter,f
 10039  11C0  29B3               	goto	l3089
 10040  11C1                     l3091:	
 10041  11C1  3001               	movlw	1
 10042  11C2                     u3805:	
 10043  11C2  35F9               	lslf	___lldiv@quotient,f
 10044  11C3  0DFA               	rlf	___lldiv@quotient+1,f
 10045  11C4  0DFB               	rlf	___lldiv@quotient+2,f
 10046  11C5  0DFC               	rlf	___lldiv@quotient+3,f
 10047  11C6  0B89               	decfsz	9,f
 10048  11C7  29C2               	goto	u3805
 10049  11C8  0873               	movf	___lldiv@divisor+3,w
 10050  11C9  0277               	subwf	___lldiv@dividend+3,w
 10051  11CA  1D03               	skipz
 10052  11CB  29D6               	goto	u3815
 10053  11CC  0872               	movf	___lldiv@divisor+2,w
 10054  11CD  0276               	subwf	___lldiv@dividend+2,w
 10055  11CE  1D03               	skipz
 10056  11CF  29D6               	goto	u3815
 10057  11D0  0871               	movf	___lldiv@divisor+1,w
 10058  11D1  0275               	subwf	___lldiv@dividend+1,w
 10059  11D2  1D03               	skipz
 10060  11D3  29D6               	goto	u3815
 10061  11D4  0870               	movf	___lldiv@divisor,w
 10062  11D5  0274               	subwf	___lldiv@dividend,w
 10063  11D6                     u3815:	
 10064  11D6  1C03               	skipc
 10065  11D7  29E1               	goto	l3099
 10066  11D8  0870               	movf	___lldiv@divisor,w
 10067  11D9  02F4               	subwf	___lldiv@dividend,f
 10068  11DA  0871               	movf	___lldiv@divisor+1,w
 10069  11DB  3BF5               	subwfb	___lldiv@dividend+1,f
 10070  11DC  0872               	movf	___lldiv@divisor+2,w
 10071  11DD  3BF6               	subwfb	___lldiv@dividend+2,f
 10072  11DE  0873               	movf	___lldiv@divisor+3,w
 10073  11DF  3BF7               	subwfb	___lldiv@dividend+3,f
 10074  11E0  1479               	bsf	___lldiv@quotient,0
 10075  11E1                     l3099:	
 10076  11E1  3001               	movlw	1
 10077  11E2                     u3825:	
 10078  11E2  36F3               	lsrf	___lldiv@divisor+3,f
 10079  11E3  0CF2               	rrf	___lldiv@divisor+2,f
 10080  11E4  0CF1               	rrf	___lldiv@divisor+1,f
 10081  11E5  0CF0               	rrf	___lldiv@divisor,f
 10082  11E6  0B89               	decfsz	9,f
 10083  11E7  29E2               	goto	u3825
 10084  11E8  3001               	movlw	1
 10085  11E9  02FD               	subwf	___lldiv@counter,f
 10086  11EA  1D03               	btfss	3,2
 10087  11EB  29C1               	goto	l3091
 10088  11EC                     l3103:	
 10089  11EC  087C               	movf	___lldiv@quotient+3,w
 10090  11ED  00F3               	movwf	?___lldiv+3
 10091  11EE  087B               	movf	___lldiv@quotient+2,w
 10092  11EF  00F2               	movwf	?___lldiv+2
 10093  11F0  087A               	movf	___lldiv@quotient+1,w
 10094  11F1  00F1               	movwf	?___lldiv+1
 10095  11F2  0879               	movf	___lldiv@quotient,w
 10096  11F3  00F0               	movwf	?___lldiv
 10097  11F4  0008               	return
 10098  11F5                     __end_of___lldiv:	
 10099                           
 10100                           	psect	text12
 10101  1479                     __ptext12:	
 10102 ;; *************** function ___fttol *****************
 10103 ;; Defined at:
 10104 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\fttol.c"
 10105 ;; Parameters:    Size  Location     Type
 10106 ;;  f1              3   33[BANK0 ] float 
 10107 ;; Auto vars:     Size  Location     Type
 10108 ;;  lval            4   42[BANK0 ] unsigned long 
 10109 ;;  exp1            1   46[BANK0 ] unsigned char 
 10110 ;;  sign1           1   41[BANK0 ] unsigned char 
 10111 ;; Return value:  Size  Location     Type
 10112 ;;                  4   33[BANK0 ] long 
 10113 ;; Registers used:
 10114 ;;		wreg, status,2, status,0
 10115 ;; Tracked objects:
 10116 ;;		On entry : 0/0
 10117 ;;		On exit  : 0/0
 10118 ;;		Unchanged: 0/0
 10119 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10120 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10121 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10122 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10123 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10124 ;;Total ram usage:       14 bytes
 10125 ;; Hardware stack levels used:    1
 10126 ;; This function calls:
 10127 ;;		Nothing
 10128 ;; This function is called by:
 10129 ;;		_sprintf
 10130 ;; This function uses a non-reentrant model
 10131 ;;
 10132                           
 10133                           
 10134                           ;psect for function ___fttol
 10135  1479                     ___fttol:	
 10136                           
 10137                           ;incstack = 0
 10138                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 10139  1479  0020               	movlb	0	; select bank0
 10140  147A  0841               	movf	___fttol@f1,w
 10141  147B  00C5               	movwf	??___fttol
 10142  147C  0842               	movf	___fttol@f1+1,w
 10143  147D  00C6               	movwf	??___fttol+1
 10144  147E  0843               	movf	___fttol@f1+2,w
 10145  147F  00C7               	movwf	??___fttol+2
 10146  1480  1003               	clrc
 10147  1481  0D46               	rlf	??___fttol+1,w
 10148  1482  0D47               	rlf	??___fttol+2,w
 10149  1483  00C8               	movwf	??___fttol+3
 10150  1484  0848               	movf	??___fttol+3,w
 10151  1485  00CE               	movwf	___fttol@exp1
 10152  1486  084E               	movf	___fttol@exp1,w
 10153  1487  1D03               	btfss	3,2
 10154  1488  2C92               	goto	l3047
 10155  1489  3000               	movlw	0
 10156  148A  00C4               	movwf	?___fttol+3
 10157  148B  3000               	movlw	0
 10158  148C  00C3               	movwf	?___fttol+2
 10159  148D  3000               	movlw	0
 10160  148E  00C2               	movwf	?___fttol+1
 10161  148F  3000               	movlw	0
 10162  1490  00C1               	movwf	?___fttol
 10163  1491  0008               	return
 10164  1492                     l3047:	
 10165  1492  0841               	movf	___fttol@f1,w
 10166  1493  00C5               	movwf	??___fttol
 10167  1494  0842               	movf	___fttol@f1+1,w
 10168  1495  00C6               	movwf	??___fttol+1
 10169  1496  0843               	movf	___fttol@f1+2,w
 10170  1497  00C7               	movwf	??___fttol+2
 10171  1498  3017               	movlw	23
 10172  1499                     u3685:	
 10173  1499  36C7               	lsrf	??___fttol+2,f
 10174  149A  0CC6               	rrf	??___fttol+1,f
 10175  149B  0CC5               	rrf	??___fttol,f
 10176  149C  0B89               	decfsz	9,f
 10177  149D  2C99               	goto	u3685
 10178  149E  0845               	movf	??___fttol,w
 10179  149F  00C8               	movwf	??___fttol+3
 10180  14A0  0848               	movf	??___fttol+3,w
 10181  14A1  00C9               	movwf	___fttol@sign1
 10182  14A2  17C2               	bsf	___fttol@f1+1,7
 10183  14A3  30FF               	movlw	255
 10184  14A4  05C1               	andwf	___fttol@f1,f
 10185  14A5  30FF               	movlw	255
 10186  14A6  05C2               	andwf	___fttol@f1+1,f
 10187  14A7  3000               	movlw	0
 10188  14A8  05C3               	andwf	___fttol@f1+2,f
 10189  14A9  0841               	movf	___fttol@f1,w
 10190  14AA  00CA               	movwf	___fttol@lval
 10191  14AB  0842               	movf	___fttol@f1+1,w
 10192  14AC  00CB               	movwf	___fttol@lval+1
 10193  14AD  0843               	movf	___fttol@f1+2,w
 10194  14AE  00CC               	movwf	___fttol@lval+2
 10195  14AF  01CD               	clrf	___fttol@lval+3
 10196  14B0  308E               	movlw	142
 10197  14B1  02CE               	subwf	___fttol@exp1,f
 10198  14B2  1FCE               	btfss	___fttol@exp1,7
 10199  14B3  2CD0               	goto	l3067
 10200  14B4  084E               	movf	___fttol@exp1,w
 10201  14B5  3A80               	xorlw	128
 10202  14B6  3E8F               	addlw	143
 10203  14B7  1803               	skipnc
 10204  14B8  2CC2               	goto	l3065
 10205  14B9  3000               	movlw	0
 10206  14BA  00C4               	movwf	?___fttol+3
 10207  14BB  3000               	movlw	0
 10208  14BC  00C3               	movwf	?___fttol+2
 10209  14BD  3000               	movlw	0
 10210  14BE  00C2               	movwf	?___fttol+1
 10211  14BF  3000               	movlw	0
 10212  14C0  00C1               	movwf	?___fttol
 10213  14C1  0008               	return
 10214  14C2                     l3065:	
 10215  14C2  3001               	movlw	1
 10216  14C3                     u3715:	
 10217  14C3  36CD               	lsrf	___fttol@lval+3,f
 10218  14C4  0CCC               	rrf	___fttol@lval+2,f
 10219  14C5  0CCB               	rrf	___fttol@lval+1,f
 10220  14C6  0CCA               	rrf	___fttol@lval,f
 10221  14C7  0B89               	decfsz	9,f
 10222  14C8  2CC3               	goto	u3715
 10223  14C9  3001               	movlw	1
 10224  14CA  00C5               	movwf	??___fttol
 10225  14CB  0845               	movf	??___fttol,w
 10226  14CC  07CE               	addwf	___fttol@exp1,f
 10227  14CD  1903               	btfsc	3,2
 10228  14CE  2CE9               	goto	l3075
 10229  14CF  2CC2               	goto	l3065
 10230  14D0                     l3067:	
 10231  14D0  3018               	movlw	24
 10232  14D1  024E               	subwf	___fttol@exp1,w
 10233  14D2  1C03               	skipc
 10234  14D3  2CE6               	goto	l772
 10235  14D4  3000               	movlw	0
 10236  14D5  00C4               	movwf	?___fttol+3
 10237  14D6  3000               	movlw	0
 10238  14D7  00C3               	movwf	?___fttol+2
 10239  14D8  3000               	movlw	0
 10240  14D9  00C2               	movwf	?___fttol+1
 10241  14DA  3000               	movlw	0
 10242  14DB  00C1               	movwf	?___fttol
 10243  14DC  0008               	return
 10244  14DD                     l3073:	
 10245  14DD  3001               	movlw	1
 10246  14DE                     u3745:	
 10247  14DE  35CA               	lslf	___fttol@lval,f
 10248  14DF  0DCB               	rlf	___fttol@lval+1,f
 10249  14E0  0DCC               	rlf	___fttol@lval+2,f
 10250  14E1  0DCD               	rlf	___fttol@lval+3,f
 10251  14E2  0B89               	decfsz	9,f
 10252  14E3  2CDE               	goto	u3745
 10253  14E4  3001               	movlw	1
 10254  14E5  02CE               	subwf	___fttol@exp1,f
 10255  14E6                     l772:	
 10256  14E6  084E               	movf	___fttol@exp1,w
 10257  14E7  1D03               	btfss	3,2
 10258  14E8  2CDD               	goto	l3073
 10259  14E9                     l3075:	
 10260  14E9  0849               	movf	___fttol@sign1,w
 10261  14EA  1903               	btfsc	3,2
 10262  14EB  2CF7               	goto	l3079
 10263  14EC  09CA               	comf	___fttol@lval,f
 10264  14ED  09CB               	comf	___fttol@lval+1,f
 10265  14EE  09CC               	comf	___fttol@lval+2,f
 10266  14EF  09CD               	comf	___fttol@lval+3,f
 10267  14F0  0ACA               	incf	___fttol@lval,f
 10268  14F1  1903               	skipnz
 10269  14F2  0ACB               	incf	___fttol@lval+1,f
 10270  14F3  1903               	skipnz
 10271  14F4  0ACC               	incf	___fttol@lval+2,f
 10272  14F5  1903               	skipnz
 10273  14F6  0ACD               	incf	___fttol@lval+3,f
 10274  14F7                     l3079:	
 10275  14F7  084D               	movf	___fttol@lval+3,w
 10276  14F8  00C4               	movwf	?___fttol+3
 10277  14F9  084C               	movf	___fttol@lval+2,w
 10278  14FA  00C3               	movwf	?___fttol+2
 10279  14FB  084B               	movf	___fttol@lval+1,w
 10280  14FC  00C2               	movwf	?___fttol+1
 10281  14FD  084A               	movf	___fttol@lval,w
 10282  14FE  00C1               	movwf	?___fttol
 10283  14FF  0008               	return
 10284  1500                     __end_of___fttol:	
 10285                           
 10286                           	psect	text13
 10287  1FC2                     __ptext13:	
 10288 ;; *************** function ___ftsub *****************
 10289 ;; Defined at:
 10290 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftsub.c"
 10291 ;; Parameters:    Size  Location     Type
 10292 ;;  f2              3   51[BANK0 ] float 
 10293 ;;  f1              3   54[BANK0 ] float 
 10294 ;; Auto vars:     Size  Location     Type
 10295 ;;		None
 10296 ;; Return value:  Size  Location     Type
 10297 ;;                  3   51[BANK0 ] float 
 10298 ;; Registers used:
 10299 ;;		wreg, status,2, status,0, pclath, cstack
 10300 ;; Tracked objects:
 10301 ;;		On entry : 0/0
 10302 ;;		On exit  : 0/0
 10303 ;;		Unchanged: 0/0
 10304 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10305 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10306 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10307 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10308 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10309 ;;Total ram usage:        6 bytes
 10310 ;; Hardware stack levels used:    1
 10311 ;; Hardware stack levels required when called:    2
 10312 ;; This function calls:
 10313 ;;		___ftadd
 10314 ;; This function is called by:
 10315 ;;		_main
 10316 ;;		_sprintf
 10317 ;; This function uses a non-reentrant model
 10318 ;;
 10319                           
 10320                           
 10321                           ;psect for function ___ftsub
 10322  1FC2                     ___ftsub:	
 10323                           
 10324                           ;incstack = 0
 10325                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
 10326  1FC2  0020               	movlb	0	; select bank0
 10327  1FC3  0855               	movf	___ftsub@f2+2,w
 10328  1FC4  0454               	iorwf	___ftsub@f2+1,w
 10329  1FC5  0453               	iorwf	___ftsub@f2,w
 10330  1FC6  1903               	skipnz
 10331  1FC7  2FCA               	goto	l3037
 10332  1FC8  3080               	movlw	128
 10333  1FC9  06D5               	xorwf	___ftsub@f2+2,f
 10334  1FCA                     l3037:	
 10335  1FCA  0856               	movf	___ftsub@f1,w
 10336  1FCB  00C6               	movwf	___ftadd@f1
 10337  1FCC  0857               	movf	___ftsub@f1+1,w
 10338  1FCD  00C7               	movwf	___ftadd@f1+1
 10339  1FCE  0858               	movf	___ftsub@f1+2,w
 10340  1FCF  00C8               	movwf	___ftadd@f1+2
 10341  1FD0  0853               	movf	___ftsub@f2,w
 10342  1FD1  00C9               	movwf	___ftadd@f2
 10343  1FD2  0854               	movf	___ftsub@f2+1,w
 10344  1FD3  00CA               	movwf	___ftadd@f2+1
 10345  1FD4  0855               	movf	___ftsub@f2+2,w
 10346  1FD5  00CB               	movwf	___ftadd@f2+2
 10347  1FD6  3197  270A         	fcall	___ftadd
 10348  1FD8  0020               	movlb	0	; select bank0
 10349  1FD9  0846               	movf	?___ftadd,w
 10350  1FDA  00D3               	movwf	?___ftsub
 10351  1FDB  0847               	movf	?___ftadd+1,w
 10352  1FDC  00D4               	movwf	?___ftsub+1
 10353  1FDD  0848               	movf	?___ftadd+2,w
 10354  1FDE  00D5               	movwf	?___ftsub+2
 10355  1FDF  0008               	return
 10356  1FE0                     __end_of___ftsub:	
 10357                           
 10358                           	psect	text14
 10359  1EC8                     __ptext14:	
 10360 ;; *************** function ___ftneg *****************
 10361 ;; Defined at:
 10362 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftneg.c"
 10363 ;; Parameters:    Size  Location     Type
 10364 ;;  f1              3    0[COMMON] float 
 10365 ;; Auto vars:     Size  Location     Type
 10366 ;;		None
 10367 ;; Return value:  Size  Location     Type
 10368 ;;                  3    0[COMMON] float 
 10369 ;; Registers used:
 10370 ;;		wreg
 10371 ;; Tracked objects:
 10372 ;;		On entry : 0/0
 10373 ;;		On exit  : 0/0
 10374 ;;		Unchanged: 0/0
 10375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10376 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10377 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10378 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10379 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10380 ;;Total ram usage:        3 bytes
 10381 ;; Hardware stack levels used:    1
 10382 ;; This function calls:
 10383 ;;		Nothing
 10384 ;; This function is called by:
 10385 ;;		_main
 10386 ;;		_sprintf
 10387 ;; This function uses a non-reentrant model
 10388 ;;
 10389                           
 10390                           
 10391                           ;psect for function ___ftneg
 10392  1EC8                     ___ftneg:	
 10393                           
 10394                           ;incstack = 0
 10395                           ; Regs used in ___ftneg: [wreg]
 10396  1EC8  0872               	movf	___ftneg@f1+2,w
 10397  1EC9  0471               	iorwf	___ftneg@f1+1,w
 10398  1ECA  0470               	iorwf	___ftneg@f1,w
 10399  1ECB  1903               	skipnz
 10400  1ECC  0008               	return
 10401  1ECD  3080               	movlw	128
 10402  1ECE  06F2               	xorwf	___ftneg@f1+2,f
 10403  1ECF  0008               	return
 10404  1ED0                     __end_of___ftneg:	
 10405                           
 10406                           	psect	text15
 10407  15A9                     __ptext15:	
 10408 ;; *************** function _log *****************
 10409 ;; Defined at:
 10410 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\log.c"
 10411 ;; Parameters:    Size  Location     Type
 10412 ;;  x               3   61[BANK0 ] float 
 10413 ;; Auto vars:     Size  Location     Type
 10414 ;;  exponent        2   65[BANK0 ] int 
 10415 ;; Return value:  Size  Location     Type
 10416 ;;                  3   61[BANK0 ] int 
 10417 ;; Registers used:
 10418 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10419 ;; Tracked objects:
 10420 ;;		On entry : 0/0
 10421 ;;		On exit  : 0/0
 10422 ;;		Unchanged: 0/0
 10423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10424 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10425 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10426 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10427 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10428 ;;Total ram usage:        6 bytes
 10429 ;; Hardware stack levels used:    1
 10430 ;; Hardware stack levels required when called:    3
 10431 ;; This function calls:
 10432 ;;		___awtoft
 10433 ;;		___ftadd
 10434 ;;		___ftge
 10435 ;;		___ftmul
 10436 ;;		_eval_poly
 10437 ;;		_frexp
 10438 ;; This function is called by:
 10439 ;;		_main
 10440 ;; This function uses a non-reentrant model
 10441 ;;
 10442                           
 10443                           
 10444                           ;psect for function _log
 10445  15A9                     _log:	
 10446                           
 10447                           ;incstack = 0
 10448                           ; Regs used in _log: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10449  15A9  0020               	movlb	0	; select bank0
 10450  15AA  085D               	movf	log@x,w
 10451  15AB  00D3               	movwf	___ftge@ff1
 10452  15AC  085E               	movf	log@x+1,w
 10453  15AD  00D4               	movwf	___ftge@ff1+1
 10454  15AE  085F               	movf	log@x+2,w
 10455  15AF  00D5               	movwf	___ftge@ff1+2
 10456  15B0  3000               	movlw	0
 10457  15B1  00D6               	movwf	___ftge@ff2
 10458  15B2  3000               	movlw	0
 10459  15B3  00D7               	movwf	___ftge@ff2+1
 10460  15B4  3000               	movlw	0
 10461  15B5  00D8               	movwf	___ftge@ff2+2
 10462  15B6  3190  20DF  3195   	fcall	___ftge
 10463  15B9  1803               	btfsc	3,0
 10464  15BA  2DC7               	goto	l3257
 10465  15BB  3021               	movlw	33
 10466  15BC  0020               	movlb	0	; select bank0
 10467  15BD  00EC               	movwf	_errno
 10468  15BE  3000               	movlw	0
 10469  15BF  00ED               	movwf	_errno+1
 10470  15C0  3000               	movlw	0
 10471  15C1  00DD               	movwf	?_log
 10472  15C2  3000               	movlw	0
 10473  15C3  00DE               	movwf	?_log+1
 10474  15C4  3000               	movlw	0
 10475  15C5  00DF               	movwf	?_log+2
 10476  15C6  0008               	return
 10477  15C7                     l3257:	
 10478  15C7  0020               	movlb	0	; select bank0
 10479  15C8  085F               	movf	log@x+2,w
 10480  15C9  045E               	iorwf	log@x+1,w
 10481  15CA  045D               	iorwf	log@x,w
 10482  15CB  1D03               	skipz
 10483  15CC  2DD8               	goto	l3263
 10484  15CD  3022               	movlw	34
 10485  15CE  00EC               	movwf	_errno
 10486  15CF  3000               	movlw	0
 10487  15D0  00ED               	movwf	_errno+1
 10488  15D1  3000               	movlw	0
 10489  15D2  00DD               	movwf	?_log
 10490  15D3  3000               	movlw	0
 10491  15D4  00DE               	movwf	?_log+1
 10492  15D5  3000               	movlw	0
 10493  15D6  00DF               	movwf	?_log+2
 10494  15D7  0008               	return
 10495  15D8                     l3263:	
 10496  15D8  3000               	movlw	0
 10497  15D9  00C6               	movwf	___ftadd@f1
 10498  15DA  3080               	movlw	128
 10499  15DB  00C7               	movwf	___ftadd@f1+1
 10500  15DC  30BF               	movlw	191
 10501  15DD  00C8               	movwf	___ftadd@f1+2
 10502  15DE  3000               	movlw	0
 10503  15DF  00A8               	movwf	___ftmul@f1
 10504  15E0  3000               	movlw	0
 10505  15E1  00A9               	movwf	___ftmul@f1+1
 10506  15E2  3040               	movlw	64
 10507  15E3  00AA               	movwf	___ftmul@f1+2
 10508  15E4  3061               	movlw	(low (log@exponent| 0))& (0+255)
 10509  15E5  00E0               	movwf	??_log
 10510  15E6  0860               	movf	??_log,w
 10511  15E7  00F3               	movwf	frexp@eptr
 10512  15E8  085D               	movf	log@x,w
 10513  15E9  00F0               	movwf	frexp@value
 10514  15EA  085E               	movf	log@x+1,w
 10515  15EB  00F1               	movwf	frexp@value+1
 10516  15EC  085F               	movf	log@x+2,w
 10517  15ED  00F2               	movwf	frexp@value+2
 10518  15EE  3188  2000  3195   	fcall	_frexp
 10519  15F1  0870               	movf	?_frexp,w
 10520  15F2  0020               	movlb	0	; select bank0
 10521  15F3  00AB               	movwf	___ftmul@f2
 10522  15F4  0871               	movf	?_frexp+1,w
 10523  15F5  00AC               	movwf	___ftmul@f2+1
 10524  15F6  0872               	movf	?_frexp+2,w
 10525  15F7  00AD               	movwf	___ftmul@f2+2
 10526  15F8  3196  2656  3195   	fcall	___ftmul
 10527  15FB  0020               	movlb	0	; select bank0
 10528  15FC  0828               	movf	?___ftmul,w
 10529  15FD  00C9               	movwf	___ftadd@f2
 10530  15FE  0829               	movf	?___ftmul+1,w
 10531  15FF  00CA               	movwf	___ftadd@f2+1
 10532  1600  082A               	movf	?___ftmul+2,w
 10533  1601  00CB               	movwf	___ftadd@f2+2
 10534  1602  3197  270A  3195   	fcall	___ftadd
 10535  1605  0020               	movlb	0	; select bank0
 10536  1606  0846               	movf	?___ftadd,w
 10537  1607  00DD               	movwf	log@x
 10538  1608  0847               	movf	?___ftadd+1,w
 10539  1609  00DE               	movwf	log@x+1
 10540  160A  0848               	movf	?___ftadd+2,w
 10541  160B  00DF               	movwf	log@x+2
 10542  160C  30FF               	movlw	255
 10543  160D  07E1               	addwf	log@exponent,f
 10544  160E  30FF               	movlw	255
 10545  160F  3DE2               	addwfc	log@exponent+1,f
 10546  1610  085D               	movf	log@x,w
 10547  1611  00D3               	movwf	eval_poly@x
 10548  1612  085E               	movf	log@x+1,w
 10549  1613  00D4               	movwf	eval_poly@x+1
 10550  1614  085F               	movf	log@x+2,w
 10551  1615  00D5               	movwf	eval_poly@x+2
 10552  1616  3076               	movlw	low (log@coeff| (0+32768))
 10553  1617  00D6               	movwf	eval_poly@d
 10554  1618  3098               	movlw	high (log@coeff| (0+32768))
 10555  1619  00D7               	movwf	eval_poly@d+1
 10556  161A  3008               	movlw	8
 10557  161B  00D8               	movwf	eval_poly@n
 10558  161C  3000               	movlw	0
 10559  161D  00D9               	movwf	eval_poly@n+1
 10560  161E  3192  2247  3195   	fcall	_eval_poly
 10561  1621  0020               	movlb	0	; select bank0
 10562  1622  0853               	movf	?_eval_poly,w
 10563  1623  00DD               	movwf	log@x
 10564  1624  0854               	movf	?_eval_poly+1,w
 10565  1625  00DE               	movwf	log@x+1
 10566  1626  0855               	movf	?_eval_poly+2,w
 10567  1627  00DF               	movwf	log@x+2
 10568  1628  085D               	movf	log@x,w
 10569  1629  00C6               	movwf	___ftadd@f1
 10570  162A  085E               	movf	log@x+1,w
 10571  162B  00C7               	movwf	___ftadd@f1+1
 10572  162C  085F               	movf	log@x+2,w
 10573  162D  00C8               	movwf	___ftadd@f1+2
 10574  162E  3072               	movlw	114
 10575  162F  00A8               	movwf	___ftmul@f1
 10576  1630  3031               	movlw	49
 10577  1631  00A9               	movwf	___ftmul@f1+1
 10578  1632  303F               	movlw	63
 10579  1633  00AA               	movwf	___ftmul@f1+2
 10580  1634  0862               	movf	log@exponent+1,w
 10581  1635  00F9               	movwf	___awtoft@c+1
 10582  1636  0861               	movf	log@exponent,w
 10583  1637  00F8               	movwf	___awtoft@c
 10584  1638  319F  27E0  3195   	fcall	___awtoft
 10585  163B  0878               	movf	?___awtoft,w
 10586  163C  0020               	movlb	0	; select bank0
 10587  163D  00AB               	movwf	___ftmul@f2
 10588  163E  0879               	movf	?___awtoft+1,w
 10589  163F  00AC               	movwf	___ftmul@f2+1
 10590  1640  087A               	movf	?___awtoft+2,w
 10591  1641  00AD               	movwf	___ftmul@f2+2
 10592  1642  3196  2656  3195   	fcall	___ftmul
 10593  1645  0020               	movlb	0	; select bank0
 10594  1646  0828               	movf	?___ftmul,w
 10595  1647  00C9               	movwf	___ftadd@f2
 10596  1648  0829               	movf	?___ftmul+1,w
 10597  1649  00CA               	movwf	___ftadd@f2+1
 10598  164A  082A               	movf	?___ftmul+2,w
 10599  164B  00CB               	movwf	___ftadd@f2+2
 10600  164C  3197  270A         	fcall	___ftadd
 10601  164E  0020               	movlb	0	; select bank0
 10602  164F  0846               	movf	?___ftadd,w
 10603  1650  00DD               	movwf	?_log
 10604  1651  0847               	movf	?___ftadd+1,w
 10605  1652  00DE               	movwf	?_log+1
 10606  1653  0848               	movf	?___ftadd+2,w
 10607  1654  00DF               	movwf	?_log+2
 10608  1655  0008               	return
 10609  1656                     __end_of_log:	
 10610                           
 10611                           	psect	text16
 10612  0800                     __ptext16:	
 10613 ;; *************** function _frexp *****************
 10614 ;; Defined at:
 10615 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\frexp.c"
 10616 ;; Parameters:    Size  Location     Type
 10617 ;;  value           3    0[COMMON] int 
 10618 ;;  eptr            1    3[COMMON] PTR int 
 10619 ;;		 -> log@exponent(2), 
 10620 ;; Auto vars:     Size  Location     Type
 10621 ;;		None
 10622 ;; Return value:  Size  Location     Type
 10623 ;;                  3    0[COMMON] PTR int 
 10624 ;; Registers used:
 10625 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10626 ;; Tracked objects:
 10627 ;;		On entry : 0/0
 10628 ;;		On exit  : 0/0
 10629 ;;		Unchanged: 0/0
 10630 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10631 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10632 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10633 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10634 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10635 ;;Total ram usage:        6 bytes
 10636 ;; Hardware stack levels used:    1
 10637 ;; This function calls:
 10638 ;;		Nothing
 10639 ;; This function is called by:
 10640 ;;		_log
 10641 ;; This function uses a non-reentrant model
 10642 ;;
 10643                           
 10644                           
 10645                           ;psect for function _frexp
 10646  0800                     _frexp:	
 10647                           
 10648                           ;incstack = 0
 10649                           ; Regs used in _frexp: [wreg+fsr1l+fsr1h+status,2+status,0]
 10650  0800  0872               	movf	frexp@value+2,w
 10651  0801  0471               	iorwf	frexp@value+1,w
 10652  0802  0470               	iorwf	frexp@value,w
 10653  0803  1D03               	skipz
 10654  0804  2812               	goto	l3145
 10655  0805  0873               	movf	frexp@eptr,w
 10656  0806  0086               	movwf	6
 10657  0807  0187               	clrf	7
 10658  0808  3000               	movlw	0
 10659  0809  3FC0               	movwi [0]fsr1
 10660  080A  3FC1               	movwi [1]fsr1
 10661  080B  3000               	movlw	0
 10662  080C  00F0               	movwf	?_frexp
 10663  080D  3000               	movlw	0
 10664  080E  00F1               	movwf	?_frexp+1
 10665  080F  3000               	movlw	0
 10666  0810  00F2               	movwf	?_frexp+2
 10667  0811  0008               	return
 10668  0812                     l3145:	
 10669  0812  0872               	movf	frexp@value+2,w
 10670  0813  397F               	andlw	127
 10671  0814  00F4               	movwf	??_frexp
 10672  0815  01F5               	clrf	??_frexp+1
 10673  0816  35F4               	lslf	??_frexp,f
 10674  0817  0DF5               	rlf	??_frexp+1,f
 10675  0818  0873               	movf	frexp@eptr,w
 10676  0819  0086               	movwf	6
 10677  081A  0187               	clrf	7
 10678  081B  0874               	movf	??_frexp,w
 10679  081C  3FC0               	movwi [0]fsr1
 10680  081D  0875               	movf	??_frexp+1,w
 10681  081E  3FC1               	movwi [1]fsr1
 10682  081F  0D71               	rlf	frexp@value+1,w
 10683  0820  0D71               	rlf	frexp@value+1,w
 10684  0821  3901               	andlw	1
 10685  0822  00F4               	movwf	??_frexp
 10686  0823  01F5               	clrf	??_frexp+1
 10687  0824  0873               	movf	frexp@eptr,w
 10688  0825  0086               	movwf	6
 10689  0826  0187               	clrf	7
 10690  0827  0874               	movf	??_frexp,w
 10691  0828  0481               	iorwf	1,f
 10692  0829  3141               	addfsr 1,1
 10693  082A  0875               	movf	??_frexp+1,w
 10694  082B  0481               	iorwf	1,f
 10695  082C  0873               	movf	frexp@eptr,w
 10696  082D  0086               	movwf	6
 10697  082E  0187               	clrf	7
 10698  082F  3082               	movlw	130
 10699  0830  0781               	addwf	1,f
 10700  0831  3141               	addfsr 1,1
 10701  0832  30FF               	movlw	255
 10702  0833  3D81               	addwfc	1,f
 10703  0834  317F               	addfsr 1,-1
 10704  0835  0872               	movf	frexp@value+2,w
 10705  0836  3980               	andlw	-128
 10706  0837  383F               	iorlw	63
 10707  0838  00F2               	movwf	frexp@value+2
 10708  0839  13F1               	bcf	frexp@value+1,7
 10709  083A  0008               	return
 10710  083B                     __end_of_frexp:	
 10711                           
 10712                           	psect	text17
 10713  1247                     __ptext17:	
 10714 ;; *************** function _eval_poly *****************
 10715 ;; Defined at:
 10716 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\evalpoly.c"
 10717 ;; Parameters:    Size  Location     Type
 10718 ;;  x               3   51[BANK0 ] PTR int 
 10719 ;;  d               2   54[BANK0 ] PTR const 
 10720 ;;		 -> log@coeff(27), 
 10721 ;;  n               2   56[BANK0 ] int 
 10722 ;; Auto vars:     Size  Location     Type
 10723 ;;  res             3   58[BANK0 ] int 
 10724 ;; Return value:  Size  Location     Type
 10725 ;;                  3   51[BANK0 ] int 
 10726 ;; Registers used:
 10727 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10728 ;; Tracked objects:
 10729 ;;		On entry : 0/0
 10730 ;;		On exit  : 0/0
 10731 ;;		Unchanged: 0/0
 10732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10733 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10734 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10735 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10736 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10737 ;;Total ram usage:       10 bytes
 10738 ;; Hardware stack levels used:    1
 10739 ;; Hardware stack levels required when called:    2
 10740 ;; This function calls:
 10741 ;;		___ftadd
 10742 ;;		___ftmul
 10743 ;;		___wmul
 10744 ;; This function is called by:
 10745 ;;		_log
 10746 ;; This function uses a non-reentrant model
 10747 ;;
 10748                           
 10749                           
 10750                           ;psect for function _eval_poly
 10751  1247                     _eval_poly:	
 10752                           
 10753                           ;incstack = 0
 10754                           ; Regs used in _eval_poly: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10755  1247  0020               	movlb	0	; select bank0
 10756  1248  0859               	movf	eval_poly@n+1,w
 10757  1249  00A5               	movwf	___wmul@multiplier+1
 10758  124A  0858               	movf	eval_poly@n,w
 10759  124B  00A4               	movwf	___wmul@multiplier
 10760  124C  3003               	movlw	3
 10761  124D  00A6               	movwf	___wmul@multiplicand
 10762  124E  3000               	movlw	0
 10763  124F  00A7               	movwf	___wmul@multiplicand+1
 10764  1250  319F  27A6  3192   	fcall	___wmul
 10765  1253  0020               	movlb	0	; select bank0
 10766  1254  0856               	movf	eval_poly@d,w
 10767  1255  0724               	addwf	?___wmul,w
 10768  1256  0084               	movwf	4
 10769  1257  0857               	movf	eval_poly@d+1,w
 10770  1258  3D25               	addwfc	?___wmul+1,w
 10771  1259  0085               	movwf	5
 10772  125A  3F00               	moviw [0]fsr0
 10773  125B  00DA               	movwf	eval_poly@res
 10774  125C  3F01               	moviw [1]fsr0
 10775  125D  00DB               	movwf	eval_poly@res+1
 10776  125E  3F02               	moviw [2]fsr0
 10777  125F                     L8:	
 10778  125F  00DC               	movwf	eval_poly@res+2
 10779  1260  0858               	movf	eval_poly@n,w
 10780  1261  0459               	iorwf	eval_poly@n+1,w
 10781  1262  1903               	btfsc	3,2
 10782  1263  2AA0               	goto	l3163
 10783  1264  30FF               	movlw	255
 10784  1265  07D8               	addwf	eval_poly@n,f
 10785  1266  30FF               	movlw	255
 10786  1267  3DD9               	addwfc	eval_poly@n+1,f
 10787  1268  0859               	movf	eval_poly@n+1,w
 10788  1269  00A5               	movwf	___wmul@multiplier+1
 10789  126A  0858               	movf	eval_poly@n,w
 10790  126B  00A4               	movwf	___wmul@multiplier
 10791  126C  3003               	movlw	3
 10792  126D  00A6               	movwf	___wmul@multiplicand
 10793  126E  3000               	movlw	0
 10794  126F  00A7               	movwf	___wmul@multiplicand+1
 10795  1270  319F  27A6  3192   	fcall	___wmul
 10796  1273  0020               	movlb	0	; select bank0
 10797  1274  0856               	movf	eval_poly@d,w
 10798  1275  0724               	addwf	?___wmul,w
 10799  1276  0084               	movwf	4
 10800  1277  0857               	movf	eval_poly@d+1,w
 10801  1278  3D25               	addwfc	?___wmul+1,w
 10802  1279  0085               	movwf	5
 10803  127A  3F00               	moviw [0]fsr0
 10804  127B  00C6               	movwf	___ftadd@f1
 10805  127C  3F01               	moviw [1]fsr0
 10806  127D  00C7               	movwf	___ftadd@f1+1
 10807  127E  3F02               	moviw [2]fsr0
 10808  127F  00C8               	movwf	___ftadd@f1+2
 10809  1280  085A               	movf	eval_poly@res,w
 10810  1281  00A8               	movwf	___ftmul@f1
 10811  1282  085B               	movf	eval_poly@res+1,w
 10812  1283  00A9               	movwf	___ftmul@f1+1
 10813  1284  085C               	movf	eval_poly@res+2,w
 10814  1285  00AA               	movwf	___ftmul@f1+2
 10815  1286  0853               	movf	eval_poly@x,w
 10816  1287  00AB               	movwf	___ftmul@f2
 10817  1288  0854               	movf	eval_poly@x+1,w
 10818  1289  00AC               	movwf	___ftmul@f2+1
 10819  128A  0855               	movf	eval_poly@x+2,w
 10820  128B  00AD               	movwf	___ftmul@f2+2
 10821  128C  3196  2656  3192   	fcall	___ftmul
 10822  128F  0020               	movlb	0	; select bank0
 10823  1290  0828               	movf	?___ftmul,w
 10824  1291  00C9               	movwf	___ftadd@f2
 10825  1292  0829               	movf	?___ftmul+1,w
 10826  1293  00CA               	movwf	___ftadd@f2+1
 10827  1294  082A               	movf	?___ftmul+2,w
 10828  1295  00CB               	movwf	___ftadd@f2+2
 10829  1296  3197  270A  3192   	fcall	___ftadd
 10830  1299  0020               	movlb	0	; select bank0
 10831  129A  0846               	movf	?___ftadd,w
 10832  129B  00DA               	movwf	eval_poly@res
 10833  129C  0847               	movf	?___ftadd+1,w
 10834  129D  00DB               	movwf	eval_poly@res+1
 10835  129E  0848               	movf	?___ftadd+2,w
 10836  129F  2A5F               	goto	L8
 10837  12A0                     l3163:	
 10838  12A0  085A               	movf	eval_poly@res,w
 10839  12A1  00D3               	movwf	?_eval_poly
 10840  12A2  085B               	movf	eval_poly@res+1,w
 10841  12A3  00D4               	movwf	?_eval_poly+1
 10842  12A4  085C               	movf	eval_poly@res+2,w
 10843  12A5  00D5               	movwf	?_eval_poly+2
 10844  12A6  0008               	return
 10845  12A7                     __end_of_eval_poly:	
 10846                           
 10847                           	psect	text18
 10848  1FA6                     __ptext18:	
 10849 ;; *************** function ___wmul *****************
 10850 ;; Defined at:
 10851 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul16.c"
 10852 ;; Parameters:    Size  Location     Type
 10853 ;;  multiplier      2    4[BANK0 ] unsigned int 
 10854 ;;  multiplicand    2    6[BANK0 ] unsigned int 
 10855 ;; Auto vars:     Size  Location     Type
 10856 ;;  product         2   12[COMMON] unsigned int 
 10857 ;; Return value:  Size  Location     Type
 10858 ;;                  2    4[BANK0 ] unsigned int 
 10859 ;; Registers used:
 10860 ;;		wreg, status,2, status,0
 10861 ;; Tracked objects:
 10862 ;;		On entry : 0/0
 10863 ;;		On exit  : 0/0
 10864 ;;		Unchanged: 0/0
 10865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10866 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10867 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10868 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10869 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10870 ;;Total ram usage:        6 bytes
 10871 ;; Hardware stack levels used:    1
 10872 ;; This function calls:
 10873 ;;		Nothing
 10874 ;; This function is called by:
 10875 ;;		_fround
 10876 ;;		_scale
 10877 ;;		_sprintf
 10878 ;;		_eval_poly
 10879 ;; This function uses a non-reentrant model
 10880 ;;
 10881                           
 10882                           
 10883                           ;psect for function ___wmul
 10884  1FA6                     ___wmul:	
 10885                           
 10886                           ;incstack = 0
 10887                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 10888  1FA6  01FC               	clrf	___wmul@product
 10889  1FA7  01FD               	clrf	___wmul@product+1
 10890  1FA8                     l2469:	
 10891  1FA8  0020               	movlb	0	; select bank0
 10892  1FA9  1C24               	btfss	___wmul@multiplier,0
 10893  1FAA  2FAF               	goto	l486
 10894  1FAB  0826               	movf	___wmul@multiplicand,w
 10895  1FAC  07FC               	addwf	___wmul@product,f
 10896  1FAD  0827               	movf	___wmul@multiplicand+1,w
 10897  1FAE  3DFD               	addwfc	___wmul@product+1,f
 10898  1FAF                     l486:	
 10899  1FAF  3001               	movlw	1
 10900  1FB0                     u2665:	
 10901  1FB0  35A6               	lslf	___wmul@multiplicand,f
 10902  1FB1  0DA7               	rlf	___wmul@multiplicand+1,f
 10903  1FB2  0B89               	decfsz	9,f
 10904  1FB3  2FB0               	goto	u2665
 10905  1FB4  3001               	movlw	1
 10906  1FB5                     u2675:	
 10907  1FB5  36A5               	lsrf	___wmul@multiplier+1,f
 10908  1FB6  0CA4               	rrf	___wmul@multiplier,f
 10909  1FB7  0B89               	decfsz	9,f
 10910  1FB8  2FB5               	goto	u2675
 10911  1FB9  0824               	movf	___wmul@multiplier,w
 10912  1FBA  0425               	iorwf	___wmul@multiplier+1,w
 10913  1FBB  1D03               	btfss	3,2
 10914  1FBC  2FA8               	goto	l2469
 10915  1FBD  087D               	movf	___wmul@product+1,w
 10916  1FBE  00A5               	movwf	?___wmul+1
 10917  1FBF  087C               	movf	___wmul@product,w
 10918  1FC0  00A4               	movwf	?___wmul
 10919  1FC1  0008               	return
 10920  1FC2                     __end_of___wmul:	
 10921                           
 10922                           	psect	text19
 10923  1656                     __ptext19:	
 10924 ;; *************** function ___ftmul *****************
 10925 ;; Defined at:
 10926 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftmul.c"
 10927 ;; Parameters:    Size  Location     Type
 10928 ;;  f1              3    8[BANK0 ] float 
 10929 ;;  f2              3   11[BANK0 ] float 
 10930 ;; Auto vars:     Size  Location     Type
 10931 ;;  f3_as_produc    3   19[BANK0 ] unsigned um
 10932 ;;  sign            1   23[BANK0 ] unsigned char 
 10933 ;;  cntr            1   22[BANK0 ] unsigned char 
 10934 ;;  exp             1   18[BANK0 ] unsigned char 
 10935 ;; Return value:  Size  Location     Type
 10936 ;;                  3    8[BANK0 ] float 
 10937 ;; Registers used:
 10938 ;;		wreg, status,2, status,0, pclath, cstack
 10939 ;; Tracked objects:
 10940 ;;		On entry : 0/0
 10941 ;;		On exit  : 0/0
 10942 ;;		Unchanged: 0/0
 10943 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10944 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10945 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10946 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10947 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10948 ;;Total ram usage:       16 bytes
 10949 ;; Hardware stack levels used:    1
 10950 ;; Hardware stack levels required when called:    1
 10951 ;; This function calls:
 10952 ;;		___ftpack
 10953 ;; This function is called by:
 10954 ;;		_fround
 10955 ;;		_scale
 10956 ;;		_sprintf
 10957 ;;		_log
 10958 ;;		_eval_poly
 10959 ;; This function uses a non-reentrant model
 10960 ;;
 10961                           
 10962                           
 10963                           ;psect for function ___ftmul
 10964  1656                     ___ftmul:	
 10965                           
 10966                           ;incstack = 0
 10967                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 10968  1656  0020               	movlb	0	; select bank0
 10969  1657  0828               	movf	___ftmul@f1,w
 10970  1658  00AE               	movwf	??___ftmul
 10971  1659  0829               	movf	___ftmul@f1+1,w
 10972  165A  00AF               	movwf	??___ftmul+1
 10973  165B  082A               	movf	___ftmul@f1+2,w
 10974  165C  00B0               	movwf	??___ftmul+2
 10975  165D  1003               	clrc
 10976  165E  0D2F               	rlf	??___ftmul+1,w
 10977  165F  0D30               	rlf	??___ftmul+2,w
 10978  1660  00B1               	movwf	??___ftmul+3
 10979  1661  0831               	movf	??___ftmul+3,w
 10980  1662  00B2               	movwf	___ftmul@exp
 10981  1663  0832               	movf	___ftmul@exp,w
 10982  1664  1D03               	btfss	3,2
 10983  1665  2E6D               	goto	l2639
 10984  1666  3000               	movlw	0
 10985  1667  00A8               	movwf	?___ftmul
 10986  1668  3000               	movlw	0
 10987  1669  00A9               	movwf	?___ftmul+1
 10988  166A  3000               	movlw	0
 10989  166B  00AA               	movwf	?___ftmul+2
 10990  166C  0008               	return
 10991  166D                     l2639:	
 10992  166D  082B               	movf	___ftmul@f2,w
 10993  166E  00AE               	movwf	??___ftmul
 10994  166F  082C               	movf	___ftmul@f2+1,w
 10995  1670  00AF               	movwf	??___ftmul+1
 10996  1671  082D               	movf	___ftmul@f2+2,w
 10997  1672  00B0               	movwf	??___ftmul+2
 10998  1673  1003               	clrc
 10999  1674  0D2F               	rlf	??___ftmul+1,w
 11000  1675  0D30               	rlf	??___ftmul+2,w
 11001  1676  00B1               	movwf	??___ftmul+3
 11002  1677  0831               	movf	??___ftmul+3,w
 11003  1678  00B7               	movwf	___ftmul@sign
 11004  1679  0837               	movf	___ftmul@sign,w
 11005  167A  1D03               	btfss	3,2
 11006  167B  2E83               	goto	l2645
 11007  167C  3000               	movlw	0
 11008  167D  00A8               	movwf	?___ftmul
 11009  167E  3000               	movlw	0
 11010  167F  00A9               	movwf	?___ftmul+1
 11011  1680  3000               	movlw	0
 11012  1681  00AA               	movwf	?___ftmul+2
 11013  1682  0008               	return
 11014  1683                     l2645:	
 11015  1683  0837               	movf	___ftmul@sign,w
 11016  1684  3E7B               	addlw	123
 11017  1685  00AE               	movwf	??___ftmul
 11018  1686  082E               	movf	??___ftmul,w
 11019  1687  07B2               	addwf	___ftmul@exp,f
 11020  1688  0828               	movf	___ftmul@f1,w
 11021  1689  00AE               	movwf	??___ftmul
 11022  168A  0829               	movf	___ftmul@f1+1,w
 11023  168B  00AF               	movwf	??___ftmul+1
 11024  168C  082A               	movf	___ftmul@f1+2,w
 11025  168D  00B0               	movwf	??___ftmul+2
 11026  168E  3010               	movlw	16
 11027  168F                     u3135:	
 11028  168F  36B0               	lsrf	??___ftmul+2,f
 11029  1690  0CAF               	rrf	??___ftmul+1,f
 11030  1691  0CAE               	rrf	??___ftmul,f
 11031  1692  0B89               	decfsz	9,f
 11032  1693  2E8F               	goto	u3135
 11033  1694  082E               	movf	??___ftmul,w
 11034  1695  00B1               	movwf	??___ftmul+3
 11035  1696  0831               	movf	??___ftmul+3,w
 11036  1697  00B7               	movwf	___ftmul@sign
 11037  1698  082B               	movf	___ftmul@f2,w
 11038  1699  00AE               	movwf	??___ftmul
 11039  169A  082C               	movf	___ftmul@f2+1,w
 11040  169B  00AF               	movwf	??___ftmul+1
 11041  169C  082D               	movf	___ftmul@f2+2,w
 11042  169D  00B0               	movwf	??___ftmul+2
 11043  169E  3010               	movlw	16
 11044  169F                     u3145:	
 11045  169F  36B0               	lsrf	??___ftmul+2,f
 11046  16A0  0CAF               	rrf	??___ftmul+1,f
 11047  16A1  0CAE               	rrf	??___ftmul,f
 11048  16A2  0B89               	decfsz	9,f
 11049  16A3  2E9F               	goto	u3145
 11050  16A4  082E               	movf	??___ftmul,w
 11051  16A5  00B1               	movwf	??___ftmul+3
 11052  16A6  0831               	movf	??___ftmul+3,w
 11053  16A7  06B7               	xorwf	___ftmul@sign,f
 11054  16A8  3080               	movlw	128
 11055  16A9  00AE               	movwf	??___ftmul
 11056  16AA  082E               	movf	??___ftmul,w
 11057  16AB  05B7               	andwf	___ftmul@sign,f
 11058  16AC  17A9               	bsf	___ftmul@f1+1,7
 11059  16AD  17AC               	bsf	___ftmul@f2+1,7
 11060  16AE  30FF               	movlw	255
 11061  16AF  05AB               	andwf	___ftmul@f2,f
 11062  16B0  30FF               	movlw	255
 11063  16B1  05AC               	andwf	___ftmul@f2+1,f
 11064  16B2  3000               	movlw	0
 11065  16B3  05AD               	andwf	___ftmul@f2+2,f
 11066  16B4  3000               	movlw	0
 11067  16B5  00B3               	movwf	___ftmul@f3_as_product
 11068  16B6  3000               	movlw	0
 11069  16B7  00B4               	movwf	___ftmul@f3_as_product+1
 11070  16B8  3000               	movlw	0
 11071  16B9  00B5               	movwf	___ftmul@f3_as_product+2
 11072  16BA  3007               	movlw	7
 11073  16BB  00AE               	movwf	??___ftmul
 11074  16BC  082E               	movf	??___ftmul,w
 11075  16BD  00B6               	movwf	___ftmul@cntr
 11076  16BE                     l2657:	
 11077  16BE  1C28               	btfss	___ftmul@f1,0
 11078  16BF  2EC6               	goto	l2661
 11079  16C0  082B               	movf	___ftmul@f2,w
 11080  16C1  07B3               	addwf	___ftmul@f3_as_product,f
 11081  16C2  082C               	movf	___ftmul@f2+1,w
 11082  16C3  3DB4               	addwfc	___ftmul@f3_as_product+1,f
 11083  16C4  082D               	movf	___ftmul@f2+2,w
 11084  16C5  3DB5               	addwfc	___ftmul@f3_as_product+2,f
 11085  16C6                     l2661:	
 11086  16C6  3001               	movlw	1
 11087  16C7                     u3165:	
 11088  16C7  36AA               	lsrf	___ftmul@f1+2,f
 11089  16C8  0CA9               	rrf	___ftmul@f1+1,f
 11090  16C9  0CA8               	rrf	___ftmul@f1,f
 11091  16CA  0B89               	decfsz	9,f
 11092  16CB  2EC7               	goto	u3165
 11093  16CC  3001               	movlw	1
 11094  16CD                     u3175:	
 11095  16CD  35AB               	lslf	___ftmul@f2,f
 11096  16CE  0DAC               	rlf	___ftmul@f2+1,f
 11097  16CF  0DAD               	rlf	___ftmul@f2+2,f
 11098  16D0  0B89               	decfsz	9,f
 11099  16D1  2ECD               	goto	u3175
 11100  16D2  3001               	movlw	1
 11101  16D3  02B6               	subwf	___ftmul@cntr,f
 11102  16D4  1D03               	btfss	3,2
 11103  16D5  2EBE               	goto	l2657
 11104  16D6  3009               	movlw	9
 11105  16D7  00AE               	movwf	??___ftmul
 11106  16D8  082E               	movf	??___ftmul,w
 11107  16D9  00B6               	movwf	___ftmul@cntr
 11108  16DA                     l2669:	
 11109  16DA  1C28               	btfss	___ftmul@f1,0
 11110  16DB  2EE2               	goto	l2673
 11111  16DC  082B               	movf	___ftmul@f2,w
 11112  16DD  07B3               	addwf	___ftmul@f3_as_product,f
 11113  16DE  082C               	movf	___ftmul@f2+1,w
 11114  16DF  3DB4               	addwfc	___ftmul@f3_as_product+1,f
 11115  16E0  082D               	movf	___ftmul@f2+2,w
 11116  16E1  3DB5               	addwfc	___ftmul@f3_as_product+2,f
 11117  16E2                     l2673:	
 11118  16E2  3001               	movlw	1
 11119  16E3                     u3205:	
 11120  16E3  36AA               	lsrf	___ftmul@f1+2,f
 11121  16E4  0CA9               	rrf	___ftmul@f1+1,f
 11122  16E5  0CA8               	rrf	___ftmul@f1,f
 11123  16E6  0B89               	decfsz	9,f
 11124  16E7  2EE3               	goto	u3205
 11125  16E8  3001               	movlw	1
 11126  16E9                     u3215:	
 11127  16E9  36B5               	lsrf	___ftmul@f3_as_product+2,f
 11128  16EA  0CB4               	rrf	___ftmul@f3_as_product+1,f
 11129  16EB  0CB3               	rrf	___ftmul@f3_as_product,f
 11130  16EC  0B89               	decfsz	9,f
 11131  16ED  2EE9               	goto	u3215
 11132  16EE  3001               	movlw	1
 11133  16EF  02B6               	subwf	___ftmul@cntr,f
 11134  16F0  1D03               	btfss	3,2
 11135  16F1  2EDA               	goto	l2669
 11136  16F2  0833               	movf	___ftmul@f3_as_product,w
 11137  16F3  00F0               	movwf	___ftpack@arg
 11138  16F4  0834               	movf	___ftmul@f3_as_product+1,w
 11139  16F5  00F1               	movwf	___ftpack@arg+1
 11140  16F6  0835               	movf	___ftmul@f3_as_product+2,w
 11141  16F7  00F2               	movwf	___ftpack@arg+2
 11142  16F8  0832               	movf	___ftmul@exp,w
 11143  16F9  00AE               	movwf	??___ftmul
 11144  16FA  082E               	movf	??___ftmul,w
 11145  16FB  00F3               	movwf	___ftpack@exp
 11146  16FC  0837               	movf	___ftmul@sign,w
 11147  16FD  00AF               	movwf	??___ftmul+1
 11148  16FE  082F               	movf	??___ftmul+1,w
 11149  16FF  00F4               	movwf	___ftpack@sign
 11150  1700  3192  22A7         	fcall	___ftpack
 11151  1702  0870               	movf	?___ftpack,w
 11152  1703  0020               	movlb	0	; select bank0
 11153  1704  00A8               	movwf	?___ftmul
 11154  1705  0871               	movf	?___ftpack+1,w
 11155  1706  00A9               	movwf	?___ftmul+1
 11156  1707  0872               	movf	?___ftpack+2,w
 11157  1708  00AA               	movwf	?___ftmul+2
 11158  1709  0008               	return
 11159  170A                     __end_of___ftmul:	
 11160                           
 11161                           	psect	text20
 11162  170A                     __ptext20:	
 11163 ;; *************** function ___ftadd *****************
 11164 ;; Defined at:
 11165 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftadd.c"
 11166 ;; Parameters:    Size  Location     Type
 11167 ;;  f1              3   38[BANK0 ] float 
 11168 ;;  f2              3   41[BANK0 ] float 
 11169 ;; Auto vars:     Size  Location     Type
 11170 ;;  exp1            1   50[BANK0 ] unsigned char 
 11171 ;;  exp2            1   49[BANK0 ] unsigned char 
 11172 ;;  sign            1   48[BANK0 ] unsigned char 
 11173 ;; Return value:  Size  Location     Type
 11174 ;;                  3   38[BANK0 ] float 
 11175 ;; Registers used:
 11176 ;;		wreg, status,2, status,0, pclath, cstack
 11177 ;; Tracked objects:
 11178 ;;		On entry : 0/0
 11179 ;;		On exit  : 0/0
 11180 ;;		Unchanged: 0/0
 11181 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11182 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11183 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11184 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11185 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11186 ;;Total ram usage:       13 bytes
 11187 ;; Hardware stack levels used:    1
 11188 ;; Hardware stack levels required when called:    1
 11189 ;; This function calls:
 11190 ;;		___ftpack
 11191 ;; This function is called by:
 11192 ;;		_main
 11193 ;;		_sprintf
 11194 ;;		___ftsub
 11195 ;;		_log
 11196 ;;		_eval_poly
 11197 ;; This function uses a non-reentrant model
 11198 ;;
 11199                           
 11200                           
 11201                           ;psect for function ___ftadd
 11202  170A                     ___ftadd:	
 11203                           
 11204                           ;incstack = 0
 11205                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 11206  170A  0020               	movlb	0	; select bank0
 11207  170B  0846               	movf	___ftadd@f1,w
 11208  170C  00CC               	movwf	??___ftadd
 11209  170D  0847               	movf	___ftadd@f1+1,w
 11210  170E  00CD               	movwf	??___ftadd+1
 11211  170F  0848               	movf	___ftadd@f1+2,w
 11212  1710  00CE               	movwf	??___ftadd+2
 11213  1711  1003               	clrc
 11214  1712  0D4D               	rlf	??___ftadd+1,w
 11215  1713  0D4E               	rlf	??___ftadd+2,w
 11216  1714  00CF               	movwf	??___ftadd+3
 11217  1715  084F               	movf	??___ftadd+3,w
 11218  1716  00D2               	movwf	___ftadd@exp1
 11219  1717  0849               	movf	___ftadd@f2,w
 11220  1718  00CC               	movwf	??___ftadd
 11221  1719  084A               	movf	___ftadd@f2+1,w
 11222  171A  00CD               	movwf	??___ftadd+1
 11223  171B  084B               	movf	___ftadd@f2+2,w
 11224  171C  00CE               	movwf	??___ftadd+2
 11225  171D  1003               	clrc
 11226  171E  0D4D               	rlf	??___ftadd+1,w
 11227  171F  0D4E               	rlf	??___ftadd+2,w
 11228  1720  00CF               	movwf	??___ftadd+3
 11229  1721  084F               	movf	??___ftadd+3,w
 11230  1722  00D1               	movwf	___ftadd@exp2
 11231  1723  0852               	movf	___ftadd@exp1,w
 11232  1724  1903               	btfsc	3,2
 11233  1725  2F32               	goto	l2569
 11234  1726  0851               	movf	___ftadd@exp2,w
 11235  1727  0252               	subwf	___ftadd@exp1,w
 11236  1728  1803               	skipnc
 11237  1729  2F39               	goto	l2573
 11238  172A  0352               	decf	___ftadd@exp1,w
 11239  172B  3AFF               	xorlw	255
 11240  172C  0751               	addwf	___ftadd@exp2,w
 11241  172D  00CC               	movwf	??___ftadd
 11242  172E  3019               	movlw	25
 11243  172F  024C               	subwf	??___ftadd,w
 11244  1730  1C03               	skipc
 11245  1731  2F39               	goto	l2573
 11246  1732                     l2569:	
 11247  1732  0849               	movf	___ftadd@f2,w
 11248  1733  00C6               	movwf	?___ftadd
 11249  1734  084A               	movf	___ftadd@f2+1,w
 11250  1735  00C7               	movwf	?___ftadd+1
 11251  1736  084B               	movf	___ftadd@f2+2,w
 11252  1737  00C8               	movwf	?___ftadd+2
 11253  1738  0008               	return
 11254  1739                     l2573:	
 11255  1739  0851               	movf	___ftadd@exp2,w
 11256  173A  1903               	btfsc	3,2
 11257  173B  0008               	return
 11258  173C  0852               	movf	___ftadd@exp1,w
 11259  173D  0251               	subwf	___ftadd@exp2,w
 11260  173E  1803               	skipnc
 11261  173F  2F48               	goto	l2579
 11262  1740  0351               	decf	___ftadd@exp2,w
 11263  1741  3AFF               	xorlw	255
 11264  1742  0752               	addwf	___ftadd@exp1,w
 11265  1743  00CC               	movwf	??___ftadd
 11266  1744  3019               	movlw	25
 11267  1745  024C               	subwf	??___ftadd,w
 11268  1746  1803               	btfsc	3,0
 11269  1747  0008               	return
 11270  1748                     l2579:	
 11271  1748  3006               	movlw	6
 11272  1749  00CC               	movwf	??___ftadd
 11273  174A  084C               	movf	??___ftadd,w
 11274  174B  00D0               	movwf	___ftadd@sign
 11275  174C  1BC8               	btfsc	___ftadd@f1+2,7
 11276  174D  17D0               	bsf	___ftadd@sign,7
 11277  174E  1BCB               	btfsc	___ftadd@f2+2,7
 11278  174F  1750               	bsf	___ftadd@sign,6
 11279  1750  17C7               	bsf	___ftadd@f1+1,7
 11280  1751  30FF               	movlw	255
 11281  1752  05C6               	andwf	___ftadd@f1,f
 11282  1753  30FF               	movlw	255
 11283  1754  05C7               	andwf	___ftadd@f1+1,f
 11284  1755  3000               	movlw	0
 11285  1756  05C8               	andwf	___ftadd@f1+2,f
 11286  1757  17CA               	bsf	___ftadd@f2+1,7
 11287  1758  30FF               	movlw	255
 11288  1759  05C9               	andwf	___ftadd@f2,f
 11289  175A  30FF               	movlw	255
 11290  175B  05CA               	andwf	___ftadd@f2+1,f
 11291  175C  3000               	movlw	0
 11292  175D  05CB               	andwf	___ftadd@f2+2,f
 11293  175E  0851               	movf	___ftadd@exp2,w
 11294  175F  0252               	subwf	___ftadd@exp1,w
 11295  1760  1803               	skipnc
 11296  1761  2F84               	goto	l2601
 11297  1762                     l2591:	
 11298  1762  3001               	movlw	1
 11299  1763                     u2975:	
 11300  1763  35C9               	lslf	___ftadd@f2,f
 11301  1764  0DCA               	rlf	___ftadd@f2+1,f
 11302  1765  0DCB               	rlf	___ftadd@f2+2,f
 11303  1766  0B89               	decfsz	9,f
 11304  1767  2F63               	goto	u2975
 11305  1768  3001               	movlw	1
 11306  1769  02D1               	subwf	___ftadd@exp2,f
 11307  176A  0851               	movf	___ftadd@exp2,w
 11308  176B  0652               	xorwf	___ftadd@exp1,w
 11309  176C  1903               	skipnz
 11310  176D  2F7F               	goto	l2599
 11311  176E  3001               	movlw	1
 11312  176F  02D0               	subwf	___ftadd@sign,f
 11313  1770  0850               	movf	___ftadd@sign,w
 11314  1771  3907               	andlw	7
 11315  1772  1903               	btfsc	3,2
 11316  1773  2F7F               	goto	l2599
 11317  1774  2F62               	goto	l2591
 11318  1775                     l2597:	
 11319  1775  3001               	movlw	1
 11320  1776                     u3005:	
 11321  1776  36C8               	lsrf	___ftadd@f1+2,f
 11322  1777  0CC7               	rrf	___ftadd@f1+1,f
 11323  1778  0CC6               	rrf	___ftadd@f1,f
 11324  1779  0B89               	decfsz	9,f
 11325  177A  2F76               	goto	u3005
 11326  177B  3001               	movlw	1
 11327  177C  00CC               	movwf	??___ftadd
 11328  177D  084C               	movf	??___ftadd,w
 11329  177E  07D2               	addwf	___ftadd@exp1,f
 11330  177F                     l2599:	
 11331  177F  0852               	movf	___ftadd@exp1,w
 11332  1780  0651               	xorwf	___ftadd@exp2,w
 11333  1781  1903               	btfsc	3,2
 11334  1782  2FA9               	goto	l695
 11335  1783  2F75               	goto	l2597
 11336  1784                     l2601:	
 11337  1784  0852               	movf	___ftadd@exp1,w
 11338  1785  0251               	subwf	___ftadd@exp2,w
 11339  1786  1803               	skipnc
 11340  1787  2FA9               	goto	l695
 11341  1788                     l2603:	
 11342  1788  3001               	movlw	1
 11343  1789                     u3035:	
 11344  1789  35C6               	lslf	___ftadd@f1,f
 11345  178A  0DC7               	rlf	___ftadd@f1+1,f
 11346  178B  0DC8               	rlf	___ftadd@f1+2,f
 11347  178C  0B89               	decfsz	9,f
 11348  178D  2F89               	goto	u3035
 11349  178E  3001               	movlw	1
 11350  178F  02D2               	subwf	___ftadd@exp1,f
 11351  1790  0851               	movf	___ftadd@exp2,w
 11352  1791  0652               	xorwf	___ftadd@exp1,w
 11353  1792  1903               	skipnz
 11354  1793  2FA5               	goto	l2611
 11355  1794  3001               	movlw	1
 11356  1795  02D0               	subwf	___ftadd@sign,f
 11357  1796  0850               	movf	___ftadd@sign,w
 11358  1797  3907               	andlw	7
 11359  1798  1903               	btfsc	3,2
 11360  1799  2FA5               	goto	l2611
 11361  179A  2F88               	goto	l2603
 11362  179B                     l2609:	
 11363  179B  3001               	movlw	1
 11364  179C                     u3065:	
 11365  179C  36CB               	lsrf	___ftadd@f2+2,f
 11366  179D  0CCA               	rrf	___ftadd@f2+1,f
 11367  179E  0CC9               	rrf	___ftadd@f2,f
 11368  179F  0B89               	decfsz	9,f
 11369  17A0  2F9C               	goto	u3065
 11370  17A1  3001               	movlw	1
 11371  17A2  00CC               	movwf	??___ftadd
 11372  17A3  084C               	movf	??___ftadd,w
 11373  17A4  07D1               	addwf	___ftadd@exp2,f
 11374  17A5                     l2611:	
 11375  17A5  0852               	movf	___ftadd@exp1,w
 11376  17A6  0651               	xorwf	___ftadd@exp2,w
 11377  17A7  1D03               	skipz
 11378  17A8  2F9B               	goto	l2609
 11379  17A9                     l695:	
 11380  17A9  1FD0               	btfss	___ftadd@sign,7
 11381  17AA  2FBB               	goto	l2615
 11382  17AB  30FF               	movlw	255
 11383  17AC  06C6               	xorwf	___ftadd@f1,f
 11384  17AD  30FF               	movlw	255
 11385  17AE  06C7               	xorwf	___ftadd@f1+1,f
 11386  17AF  30FF               	movlw	255
 11387  17B0  06C8               	xorwf	___ftadd@f1+2,f
 11388  17B1  3001               	movlw	1
 11389  17B2  07C6               	addwf	___ftadd@f1,f
 11390  17B3  3000               	movlw	0
 11391  17B4  1803               	skipnc
 11392  17B5  3001               	movlw	1
 11393  17B6  07C7               	addwf	___ftadd@f1+1,f
 11394  17B7  3000               	movlw	0
 11395  17B8  1803               	skipnc
 11396  17B9  3001               	movlw	1
 11397  17BA  07C8               	addwf	___ftadd@f1+2,f
 11398  17BB                     l2615:	
 11399  17BB  1F50               	btfss	___ftadd@sign,6
 11400  17BC  2FCD               	goto	l2619
 11401  17BD  30FF               	movlw	255
 11402  17BE  06C9               	xorwf	___ftadd@f2,f
 11403  17BF  30FF               	movlw	255
 11404  17C0  06CA               	xorwf	___ftadd@f2+1,f
 11405  17C1  30FF               	movlw	255
 11406  17C2  06CB               	xorwf	___ftadd@f2+2,f
 11407  17C3  3001               	movlw	1
 11408  17C4  07C9               	addwf	___ftadd@f2,f
 11409  17C5  3000               	movlw	0
 11410  17C6  1803               	skipnc
 11411  17C7  3001               	movlw	1
 11412  17C8  07CA               	addwf	___ftadd@f2+1,f
 11413  17C9  3000               	movlw	0
 11414  17CA  1803               	skipnc
 11415  17CB  3001               	movlw	1
 11416  17CC  07CB               	addwf	___ftadd@f2+2,f
 11417  17CD                     l2619:	
 11418  17CD  01D0               	clrf	___ftadd@sign
 11419  17CE  0846               	movf	___ftadd@f1,w
 11420  17CF  07C9               	addwf	___ftadd@f2,f
 11421  17D0  0847               	movf	___ftadd@f1+1,w
 11422  17D1  3DCA               	addwfc	___ftadd@f2+1,f
 11423  17D2  0848               	movf	___ftadd@f1+2,w
 11424  17D3  3DCB               	addwfc	___ftadd@f2+2,f
 11425  17D4  1FCB               	btfss	___ftadd@f2+2,7
 11426  17D5  2FE8               	goto	l2629
 11427  17D6  30FF               	movlw	255
 11428  17D7  06C9               	xorwf	___ftadd@f2,f
 11429  17D8  30FF               	movlw	255
 11430  17D9  06CA               	xorwf	___ftadd@f2+1,f
 11431  17DA  30FF               	movlw	255
 11432  17DB  06CB               	xorwf	___ftadd@f2+2,f
 11433  17DC  3001               	movlw	1
 11434  17DD  07C9               	addwf	___ftadd@f2,f
 11435  17DE  3000               	movlw	0
 11436  17DF  1803               	skipnc
 11437  17E0  3001               	movlw	1
 11438  17E1  07CA               	addwf	___ftadd@f2+1,f
 11439  17E2  3000               	movlw	0
 11440  17E3  1803               	skipnc
 11441  17E4  3001               	movlw	1
 11442  17E5  07CB               	addwf	___ftadd@f2+2,f
 11443  17E6  01D0               	clrf	___ftadd@sign
 11444  17E7  0AD0               	incf	___ftadd@sign,f
 11445  17E8                     l2629:	
 11446  17E8  0849               	movf	___ftadd@f2,w
 11447  17E9  00F0               	movwf	___ftpack@arg
 11448  17EA  084A               	movf	___ftadd@f2+1,w
 11449  17EB  00F1               	movwf	___ftpack@arg+1
 11450  17EC  084B               	movf	___ftadd@f2+2,w
 11451  17ED  00F2               	movwf	___ftpack@arg+2
 11452  17EE  0852               	movf	___ftadd@exp1,w
 11453  17EF  00CC               	movwf	??___ftadd
 11454  17F0  084C               	movf	??___ftadd,w
 11455  17F1  00F3               	movwf	___ftpack@exp
 11456  17F2  0850               	movf	___ftadd@sign,w
 11457  17F3  00CD               	movwf	??___ftadd+1
 11458  17F4  084D               	movf	??___ftadd+1,w
 11459  17F5  00F4               	movwf	___ftpack@sign
 11460  17F6  3192  22A7         	fcall	___ftpack
 11461  17F8  0870               	movf	?___ftpack,w
 11462  17F9  0020               	movlb	0	; select bank0
 11463  17FA  00C6               	movwf	?___ftadd
 11464  17FB  0871               	movf	?___ftpack+1,w
 11465  17FC  00C7               	movwf	?___ftadd+1
 11466  17FD  0872               	movf	?___ftpack+2,w
 11467  17FE  00C8               	movwf	?___ftadd+2
 11468  17FF  0008               	return
 11469  1800                     __end_of___ftadd:	
 11470                           
 11471                           	psect	text21
 11472  10DF                     __ptext21:	
 11473 ;; *************** function ___ftge *****************
 11474 ;; Defined at:
 11475 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftge.c"
 11476 ;; Parameters:    Size  Location     Type
 11477 ;;  ff1             3   51[BANK0 ] float 
 11478 ;;  ff2             3   54[BANK0 ] float 
 11479 ;; Auto vars:     Size  Location     Type
 11480 ;;		None
 11481 ;; Return value:  Size  Location     Type
 11482 ;;		None               void
 11483 ;; Registers used:
 11484 ;;		wreg, status,2, status,0
 11485 ;; Tracked objects:
 11486 ;;		On entry : 0/0
 11487 ;;		On exit  : 0/0
 11488 ;;		Unchanged: 0/0
 11489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11490 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11491 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11492 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11493 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11494 ;;Total ram usage:        9 bytes
 11495 ;; Hardware stack levels used:    1
 11496 ;; This function calls:
 11497 ;;		Nothing
 11498 ;; This function is called by:
 11499 ;;		_main
 11500 ;;		_sprintf
 11501 ;;		_log
 11502 ;; This function uses a non-reentrant model
 11503 ;;
 11504                           
 11505                           
 11506                           ;psect for function ___ftge
 11507  10DF                     ___ftge:	
 11508                           
 11509                           ;incstack = 0
 11510                           ; Regs used in ___ftge: [wreg+status,2+status,0]
 11511  10DF  0020               	movlb	0	; select bank0
 11512  10E0  1FD5               	btfss	___ftge@ff1+2,7
 11513  10E1  28F6               	goto	l3009
 11514  10E2  0953               	comf	___ftge@ff1,w
 11515  10E3  00D9               	movwf	??___ftge
 11516  10E4  0954               	comf	___ftge@ff1+1,w
 11517  10E5  00DA               	movwf	??___ftge+1
 11518  10E6  0955               	comf	___ftge@ff1+2,w
 11519  10E7  00DB               	movwf	??___ftge+2
 11520  10E8  0AD9               	incf	??___ftge,f
 11521  10E9  1903               	skipnz
 11522  10EA  0ADA               	incf	??___ftge+1,f
 11523  10EB  1903               	skipnz
 11524  10EC  0ADB               	incf	??___ftge+2,f
 11525  10ED  3000               	movlw	0
 11526  10EE  0759               	addwf	??___ftge,w
 11527  10EF  00D3               	movwf	___ftge@ff1
 11528  10F0  3000               	movlw	0
 11529  10F1  3D5A               	addwfc	??___ftge+1,w
 11530  10F2  00D4               	movwf	___ftge@ff1+1
 11531  10F3  3080               	movlw	128
 11532  10F4  3D5B               	addwfc	??___ftge+2,w
 11533  10F5  00D5               	movwf	___ftge@ff1+2
 11534  10F6                     l3009:	
 11535  10F6  1FD8               	btfss	___ftge@ff2+2,7
 11536  10F7  290C               	goto	l3013
 11537  10F8  0956               	comf	___ftge@ff2,w
 11538  10F9  00D9               	movwf	??___ftge
 11539  10FA  0957               	comf	___ftge@ff2+1,w
 11540  10FB  00DA               	movwf	??___ftge+1
 11541  10FC  0958               	comf	___ftge@ff2+2,w
 11542  10FD  00DB               	movwf	??___ftge+2
 11543  10FE  0AD9               	incf	??___ftge,f
 11544  10FF  1903               	skipnz
 11545  1100  0ADA               	incf	??___ftge+1,f
 11546  1101  1903               	skipnz
 11547  1102  0ADB               	incf	??___ftge+2,f
 11548  1103  3000               	movlw	0
 11549  1104  0759               	addwf	??___ftge,w
 11550  1105  00D6               	movwf	___ftge@ff2
 11551  1106  3000               	movlw	0
 11552  1107  3D5A               	addwfc	??___ftge+1,w
 11553  1108  00D7               	movwf	___ftge@ff2+1
 11554  1109  3080               	movlw	128
 11555  110A  3D5B               	addwfc	??___ftge+2,w
 11556  110B  00D8               	movwf	___ftge@ff2+2
 11557  110C                     l3013:	
 11558  110C  3080               	movlw	128
 11559  110D  06D5               	xorwf	___ftge@ff1+2,f
 11560  110E  3080               	movlw	128
 11561  110F  06D8               	xorwf	___ftge@ff2+2,f
 11562  1110  0858               	movf	___ftge@ff2+2,w
 11563  1111  0255               	subwf	___ftge@ff1+2,w
 11564  1112  1D03               	skipz
 11565  1113  0008               	return
 11566  1114  0857               	movf	___ftge@ff2+1,w
 11567  1115  0254               	subwf	___ftge@ff1+1,w
 11568  1116  1D03               	skipz
 11569  1117  0008               	return
 11570  1118  0856               	movf	___ftge@ff2,w
 11571  1119  0253               	subwf	___ftge@ff1,w
 11572  111A  0008               	return
 11573  111B                     __end_of___ftge:	
 11574                           
 11575                           	psect	text22
 11576  1FE0                     __ptext22:	
 11577 ;; *************** function ___awtoft *****************
 11578 ;; Defined at:
 11579 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awtoft.c"
 11580 ;; Parameters:    Size  Location     Type
 11581 ;;  c               2    8[COMMON] int 
 11582 ;; Auto vars:     Size  Location     Type
 11583 ;;  sign            1   13[COMMON] unsigned char 
 11584 ;; Return value:  Size  Location     Type
 11585 ;;                  3    8[COMMON] float 
 11586 ;; Registers used:
 11587 ;;		wreg, status,2, status,0, pclath, cstack
 11588 ;; Tracked objects:
 11589 ;;		On entry : 0/0
 11590 ;;		On exit  : 0/0
 11591 ;;		Unchanged: 0/0
 11592 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11593 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11594 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11595 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11596 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11597 ;;Total ram usage:        6 bytes
 11598 ;; Hardware stack levels used:    1
 11599 ;; Hardware stack levels required when called:    1
 11600 ;; This function calls:
 11601 ;;		___ftpack
 11602 ;; This function is called by:
 11603 ;;		_log
 11604 ;; This function uses a non-reentrant model
 11605 ;;
 11606                           
 11607                           
 11608                           ;psect for function ___awtoft
 11609  1FE0                     ___awtoft:	
 11610                           
 11611                           ;incstack = 0
 11612                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 11613  1FE0  01FD               	clrf	___awtoft@sign
 11614  1FE1  1FF9               	btfss	___awtoft@c+1,7
 11615  1FE2  2FEA               	goto	l3001
 11616  1FE3  09F8               	comf	___awtoft@c,f
 11617  1FE4  09F9               	comf	___awtoft@c+1,f
 11618  1FE5  0AF8               	incf	___awtoft@c,f
 11619  1FE6  1903               	skipnz
 11620  1FE7  0AF9               	incf	___awtoft@c+1,f
 11621  1FE8  01FD               	clrf	___awtoft@sign
 11622  1FE9  0AFD               	incf	___awtoft@sign,f
 11623  1FEA                     l3001:	
 11624  1FEA  0878               	movf	___awtoft@c,w
 11625  1FEB  00F0               	movwf	___ftpack@arg
 11626  1FEC  0879               	movf	___awtoft@c+1,w
 11627  1FED  00F1               	movwf	___ftpack@arg+1
 11628  1FEE  01F2               	clrf	___ftpack@arg+2
 11629  1FEF  308E               	movlw	142
 11630  1FF0  00FB               	movwf	??___awtoft
 11631  1FF1  087B               	movf	??___awtoft,w
 11632  1FF2  00F3               	movwf	___ftpack@exp
 11633  1FF3  087D               	movf	___awtoft@sign,w
 11634  1FF4  00FC               	movwf	??___awtoft+1
 11635  1FF5  087C               	movf	??___awtoft+1,w
 11636  1FF6  00F4               	movwf	___ftpack@sign
 11637  1FF7  3192  22A7         	fcall	___ftpack
 11638  1FF9  0870               	movf	?___ftpack,w
 11639  1FFA  00F8               	movwf	?___awtoft
 11640  1FFB  0871               	movf	?___ftpack+1,w
 11641  1FFC  00F9               	movwf	?___awtoft+1
 11642  1FFD  0872               	movf	?___ftpack+2,w
 11643  1FFE  00FA               	movwf	?___awtoft+2
 11644  1FFF  0008               	return
 11645  2000                     __end_of___awtoft:	
 11646                           
 11647                           	psect	text23
 11648  1F2F                     __ptext23:	
 11649 ;; *************** function ___lwtoft *****************
 11650 ;; Defined at:
 11651 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwtoft.c"
 11652 ;; Parameters:    Size  Location     Type
 11653 ;;  c               2    8[COMMON] unsigned int 
 11654 ;; Auto vars:     Size  Location     Type
 11655 ;;		None
 11656 ;; Return value:  Size  Location     Type
 11657 ;;                  3    8[COMMON] float 
 11658 ;; Registers used:
 11659 ;;		wreg, status,2, status,0, pclath, cstack
 11660 ;; Tracked objects:
 11661 ;;		On entry : 0/0
 11662 ;;		On exit  : 0/0
 11663 ;;		Unchanged: 0/0
 11664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11665 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11666 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11667 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11668 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11669 ;;Total ram usage:        4 bytes
 11670 ;; Hardware stack levels used:    1
 11671 ;; Hardware stack levels required when called:    1
 11672 ;; This function calls:
 11673 ;;		___ftpack
 11674 ;; This function is called by:
 11675 ;;		_main
 11676 ;; This function uses a non-reentrant model
 11677 ;;
 11678                           
 11679                           
 11680                           ;psect for function ___lwtoft
 11681  1F2F                     ___lwtoft:	
 11682                           
 11683                           ;incstack = 0
 11684                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
 11685  1F2F  0878               	movf	___lwtoft@c,w
 11686  1F30  00F0               	movwf	___ftpack@arg
 11687  1F31  0879               	movf	___lwtoft@c+1,w
 11688  1F32  00F1               	movwf	___ftpack@arg+1
 11689  1F33  01F2               	clrf	___ftpack@arg+2
 11690  1F34  308E               	movlw	142
 11691  1F35  00FB               	movwf	??___lwtoft
 11692  1F36  087B               	movf	??___lwtoft,w
 11693  1F37  00F3               	movwf	___ftpack@exp
 11694  1F38  01F4               	clrf	___ftpack@sign
 11695  1F39  3192  22A7         	fcall	___ftpack
 11696  1F3B  0870               	movf	?___ftpack,w
 11697  1F3C  00F8               	movwf	?___lwtoft
 11698  1F3D  0871               	movf	?___ftpack+1,w
 11699  1F3E  00F9               	movwf	?___lwtoft+1
 11700  1F3F  0872               	movf	?___ftpack+2,w
 11701  1F40  00FA               	movwf	?___lwtoft+2
 11702  1F41  0008               	return
 11703  1F42                     __end_of___lwtoft:	
 11704                           
 11705                           	psect	text24
 11706  1500                     __ptext24:	
 11707 ;; *************** function ___ftdiv *****************
 11708 ;; Defined at:
 11709 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftdiv.c"
 11710 ;; Parameters:    Size  Location     Type
 11711 ;;  f2              3    0[BANK0 ] float 
 11712 ;;  f1              3    3[BANK0 ] float 
 11713 ;; Auto vars:     Size  Location     Type
 11714 ;;  f3              3   11[BANK0 ] float 
 11715 ;;  sign            1   15[BANK0 ] unsigned char 
 11716 ;;  exp             1   14[BANK0 ] unsigned char 
 11717 ;;  cntr            1   10[BANK0 ] unsigned char 
 11718 ;; Return value:  Size  Location     Type
 11719 ;;                  3    0[BANK0 ] float 
 11720 ;; Registers used:
 11721 ;;		wreg, status,2, status,0, pclath, cstack
 11722 ;; Tracked objects:
 11723 ;;		On entry : 0/0
 11724 ;;		On exit  : 0/0
 11725 ;;		Unchanged: 0/0
 11726 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11727 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11728 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11729 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11730 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11731 ;;Total ram usage:       16 bytes
 11732 ;; Hardware stack levels used:    1
 11733 ;; Hardware stack levels required when called:    1
 11734 ;; This function calls:
 11735 ;;		___ftpack
 11736 ;; This function is called by:
 11737 ;;		_main
 11738 ;; This function uses a non-reentrant model
 11739 ;;
 11740                           
 11741                           
 11742                           ;psect for function ___ftdiv
 11743  1500                     ___ftdiv:	
 11744                           
 11745                           ;incstack = 0
 11746                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 11747  1500  0020               	movlb	0	; select bank0
 11748  1501  0823               	movf	___ftdiv@f1,w
 11749  1502  00A6               	movwf	??___ftdiv
 11750  1503  0824               	movf	___ftdiv@f1+1,w
 11751  1504  00A7               	movwf	??___ftdiv+1
 11752  1505  0825               	movf	___ftdiv@f1+2,w
 11753  1506  00A8               	movwf	??___ftdiv+2
 11754  1507  1003               	clrc
 11755  1508  0D27               	rlf	??___ftdiv+1,w
 11756  1509  0D28               	rlf	??___ftdiv+2,w
 11757  150A  00A9               	movwf	??___ftdiv+3
 11758  150B  0829               	movf	??___ftdiv+3,w
 11759  150C  00AE               	movwf	___ftdiv@exp
 11760  150D  082E               	movf	___ftdiv@exp,w
 11761  150E  1D03               	btfss	3,2
 11762  150F  2D17               	goto	l3605
 11763  1510  3000               	movlw	0
 11764  1511  00A0               	movwf	?___ftdiv
 11765  1512  3000               	movlw	0
 11766  1513  00A1               	movwf	?___ftdiv+1
 11767  1514  3000               	movlw	0
 11768  1515  00A2               	movwf	?___ftdiv+2
 11769  1516  0008               	return
 11770  1517                     l3605:	
 11771  1517  0820               	movf	___ftdiv@f2,w
 11772  1518  00A6               	movwf	??___ftdiv
 11773  1519  0821               	movf	___ftdiv@f2+1,w
 11774  151A  00A7               	movwf	??___ftdiv+1
 11775  151B  0822               	movf	___ftdiv@f2+2,w
 11776  151C  00A8               	movwf	??___ftdiv+2
 11777  151D  1003               	clrc
 11778  151E  0D27               	rlf	??___ftdiv+1,w
 11779  151F  0D28               	rlf	??___ftdiv+2,w
 11780  1520  00A9               	movwf	??___ftdiv+3
 11781  1521  0829               	movf	??___ftdiv+3,w
 11782  1522  00AF               	movwf	___ftdiv@sign
 11783  1523  082F               	movf	___ftdiv@sign,w
 11784  1524  1D03               	btfss	3,2
 11785  1525  2D2D               	goto	l3611
 11786  1526  3000               	movlw	0
 11787  1527  00A0               	movwf	?___ftdiv
 11788  1528  3000               	movlw	0
 11789  1529  00A1               	movwf	?___ftdiv+1
 11790  152A  3000               	movlw	0
 11791  152B  00A2               	movwf	?___ftdiv+2
 11792  152C  0008               	return
 11793  152D                     l3611:	
 11794  152D  3000               	movlw	0
 11795  152E  00AB               	movwf	___ftdiv@f3
 11796  152F  3000               	movlw	0
 11797  1530  00AC               	movwf	___ftdiv@f3+1
 11798  1531  3000               	movlw	0
 11799  1532  00AD               	movwf	___ftdiv@f3+2
 11800  1533  3089               	movlw	137
 11801  1534  072F               	addwf	___ftdiv@sign,w
 11802  1535  00A6               	movwf	??___ftdiv
 11803  1536  0826               	movf	??___ftdiv,w
 11804  1537  02AE               	subwf	___ftdiv@exp,f
 11805  1538  0823               	movf	___ftdiv@f1,w
 11806  1539  00A6               	movwf	??___ftdiv
 11807  153A  0824               	movf	___ftdiv@f1+1,w
 11808  153B  00A7               	movwf	??___ftdiv+1
 11809  153C  0825               	movf	___ftdiv@f1+2,w
 11810  153D  00A8               	movwf	??___ftdiv+2
 11811  153E  3010               	movlw	16
 11812  153F                     u4695:	
 11813  153F  36A8               	lsrf	??___ftdiv+2,f
 11814  1540  0CA7               	rrf	??___ftdiv+1,f
 11815  1541  0CA6               	rrf	??___ftdiv,f
 11816  1542  0B89               	decfsz	9,f
 11817  1543  2D3F               	goto	u4695
 11818  1544  0826               	movf	??___ftdiv,w
 11819  1545  00A9               	movwf	??___ftdiv+3
 11820  1546  0829               	movf	??___ftdiv+3,w
 11821  1547  00AF               	movwf	___ftdiv@sign
 11822  1548  0820               	movf	___ftdiv@f2,w
 11823  1549  00A6               	movwf	??___ftdiv
 11824  154A  0821               	movf	___ftdiv@f2+1,w
 11825  154B  00A7               	movwf	??___ftdiv+1
 11826  154C  0822               	movf	___ftdiv@f2+2,w
 11827  154D  00A8               	movwf	??___ftdiv+2
 11828  154E  3010               	movlw	16
 11829  154F                     u4705:	
 11830  154F  36A8               	lsrf	??___ftdiv+2,f
 11831  1550  0CA7               	rrf	??___ftdiv+1,f
 11832  1551  0CA6               	rrf	??___ftdiv,f
 11833  1552  0B89               	decfsz	9,f
 11834  1553  2D4F               	goto	u4705
 11835  1554  0826               	movf	??___ftdiv,w
 11836  1555  00A9               	movwf	??___ftdiv+3
 11837  1556  0829               	movf	??___ftdiv+3,w
 11838  1557  06AF               	xorwf	___ftdiv@sign,f
 11839  1558  3080               	movlw	128
 11840  1559  00A6               	movwf	??___ftdiv
 11841  155A  0826               	movf	??___ftdiv,w
 11842  155B  05AF               	andwf	___ftdiv@sign,f
 11843  155C  17A4               	bsf	___ftdiv@f1+1,7
 11844  155D  30FF               	movlw	255
 11845  155E  05A3               	andwf	___ftdiv@f1,f
 11846  155F  30FF               	movlw	255
 11847  1560  05A4               	andwf	___ftdiv@f1+1,f
 11848  1561  3000               	movlw	0
 11849  1562  05A5               	andwf	___ftdiv@f1+2,f
 11850  1563  17A1               	bsf	___ftdiv@f2+1,7
 11851  1564  30FF               	movlw	255
 11852  1565  05A0               	andwf	___ftdiv@f2,f
 11853  1566  30FF               	movlw	255
 11854  1567  05A1               	andwf	___ftdiv@f2+1,f
 11855  1568  3000               	movlw	0
 11856  1569  05A2               	andwf	___ftdiv@f2+2,f
 11857  156A  3018               	movlw	24
 11858  156B  00A6               	movwf	??___ftdiv
 11859  156C  0826               	movf	??___ftdiv,w
 11860  156D  00AA               	movwf	___ftdiv@cntr
 11861  156E                     l3625:	
 11862  156E  3001               	movlw	1
 11863  156F                     u4715:	
 11864  156F  35AB               	lslf	___ftdiv@f3,f
 11865  1570  0DAC               	rlf	___ftdiv@f3+1,f
 11866  1571  0DAD               	rlf	___ftdiv@f3+2,f
 11867  1572  0B89               	decfsz	9,f
 11868  1573  2D6F               	goto	u4715
 11869  1574  0822               	movf	___ftdiv@f2+2,w
 11870  1575  0225               	subwf	___ftdiv@f1+2,w
 11871  1576  1D03               	skipz
 11872  1577  2D7E               	goto	u4725
 11873  1578  0821               	movf	___ftdiv@f2+1,w
 11874  1579  0224               	subwf	___ftdiv@f1+1,w
 11875  157A  1D03               	skipz
 11876  157B  2D7E               	goto	u4725
 11877  157C  0820               	movf	___ftdiv@f2,w
 11878  157D  0223               	subwf	___ftdiv@f1,w
 11879  157E                     u4725:	
 11880  157E  1C03               	skipc
 11881  157F  2D87               	goto	l3633
 11882  1580  0820               	movf	___ftdiv@f2,w
 11883  1581  02A3               	subwf	___ftdiv@f1,f
 11884  1582  0821               	movf	___ftdiv@f2+1,w
 11885  1583  3BA4               	subwfb	___ftdiv@f1+1,f
 11886  1584  0822               	movf	___ftdiv@f2+2,w
 11887  1585  3BA5               	subwfb	___ftdiv@f1+2,f
 11888  1586  142B               	bsf	___ftdiv@f3,0
 11889  1587                     l3633:	
 11890  1587  3001               	movlw	1
 11891  1588                     u4735:	
 11892  1588  35A3               	lslf	___ftdiv@f1,f
 11893  1589  0DA4               	rlf	___ftdiv@f1+1,f
 11894  158A  0DA5               	rlf	___ftdiv@f1+2,f
 11895  158B  0B89               	decfsz	9,f
 11896  158C  2D88               	goto	u4735
 11897  158D  3001               	movlw	1
 11898  158E  02AA               	subwf	___ftdiv@cntr,f
 11899  158F  1D03               	btfss	3,2
 11900  1590  2D6E               	goto	l3625
 11901  1591  082B               	movf	___ftdiv@f3,w
 11902  1592  00F0               	movwf	___ftpack@arg
 11903  1593  082C               	movf	___ftdiv@f3+1,w
 11904  1594  00F1               	movwf	___ftpack@arg+1
 11905  1595  082D               	movf	___ftdiv@f3+2,w
 11906  1596  00F2               	movwf	___ftpack@arg+2
 11907  1597  082E               	movf	___ftdiv@exp,w
 11908  1598  00A6               	movwf	??___ftdiv
 11909  1599  0826               	movf	??___ftdiv,w
 11910  159A  00F3               	movwf	___ftpack@exp
 11911  159B  082F               	movf	___ftdiv@sign,w
 11912  159C  00A7               	movwf	??___ftdiv+1
 11913  159D  0827               	movf	??___ftdiv+1,w
 11914  159E  00F4               	movwf	___ftpack@sign
 11915  159F  3192  22A7         	fcall	___ftpack
 11916  15A1  0870               	movf	?___ftpack,w
 11917  15A2  0020               	movlb	0	; select bank0
 11918  15A3  00A0               	movwf	?___ftdiv
 11919  15A4  0871               	movf	?___ftpack+1,w
 11920  15A5  00A1               	movwf	?___ftdiv+1
 11921  15A6  0872               	movf	?___ftpack+2,w
 11922  15A7  00A2               	movwf	?___ftdiv+2
 11923  15A8  0008               	return
 11924  15A9                     __end_of___ftdiv:	
 11925                           
 11926                           	psect	text25
 11927  12A7                     __ptext25:	
 11928 ;; *************** function ___ftpack *****************
 11929 ;; Defined at:
 11930 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\float.c"
 11931 ;; Parameters:    Size  Location     Type
 11932 ;;  arg             3    0[COMMON] unsigned um
 11933 ;;  exp             1    3[COMMON] unsigned char 
 11934 ;;  sign            1    4[COMMON] unsigned char 
 11935 ;; Auto vars:     Size  Location     Type
 11936 ;;		None
 11937 ;; Return value:  Size  Location     Type
 11938 ;;                  3    0[COMMON] float 
 11939 ;; Registers used:
 11940 ;;		wreg, status,2, status,0
 11941 ;; Tracked objects:
 11942 ;;		On entry : 0/0
 11943 ;;		On exit  : 0/0
 11944 ;;		Unchanged: 0/0
 11945 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11946 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11947 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11948 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11949 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11950 ;;Total ram usage:        8 bytes
 11951 ;; Hardware stack levels used:    1
 11952 ;; This function calls:
 11953 ;;		Nothing
 11954 ;; This function is called by:
 11955 ;;		___awtoft
 11956 ;;		___ftadd
 11957 ;;		___ftdiv
 11958 ;;		___ftmul
 11959 ;;		___lltoft
 11960 ;;		___lwtoft
 11961 ;; This function uses a non-reentrant model
 11962 ;;
 11963                           
 11964                           
 11965                           ;psect for function ___ftpack
 11966  12A7                     ___ftpack:	
 11967                           
 11968                           ;incstack = 0
 11969                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 11970  12A7  0873               	movf	___ftpack@exp,w
 11971  12A8  1903               	btfsc	3,2
 11972  12A9  2AAF               	goto	l2409
 11973  12AA  0872               	movf	___ftpack@arg+2,w
 11974  12AB  0471               	iorwf	___ftpack@arg+1,w
 11975  12AC  0470               	iorwf	___ftpack@arg,w
 11976  12AD  1D03               	skipz
 11977  12AE  2AC0               	goto	l2415
 11978  12AF                     l2409:	
 11979  12AF  3000               	movlw	0
 11980  12B0  00F0               	movwf	?___ftpack
 11981  12B1  3000               	movlw	0
 11982  12B2  00F1               	movwf	?___ftpack+1
 11983  12B3  3000               	movlw	0
 11984  12B4  00F2               	movwf	?___ftpack+2
 11985  12B5  0008               	return
 11986  12B6                     l2413:	
 11987  12B6  3001               	movlw	1
 11988  12B7  00F5               	movwf	??___ftpack
 11989  12B8  0875               	movf	??___ftpack,w
 11990  12B9  07F3               	addwf	___ftpack@exp,f
 11991  12BA  3001               	movlw	1
 11992  12BB                     u2545:	
 11993  12BB  36F2               	lsrf	___ftpack@arg+2,f
 11994  12BC  0CF1               	rrf	___ftpack@arg+1,f
 11995  12BD  0CF0               	rrf	___ftpack@arg,f
 11996  12BE  0B89               	decfsz	9,f
 11997  12BF  2ABB               	goto	u2545
 11998  12C0                     l2415:	
 11999  12C0  30FE               	movlw	254
 12000  12C1  0572               	andwf	___ftpack@arg+2,w
 12001  12C2  1903               	btfsc	3,2
 12002  12C3  2AD9               	goto	l664
 12003  12C4  2AB6               	goto	l2413
 12004  12C5                     l2417:	
 12005  12C5  3001               	movlw	1
 12006  12C6  00F5               	movwf	??___ftpack
 12007  12C7  0875               	movf	??___ftpack,w
 12008  12C8  07F3               	addwf	___ftpack@exp,f
 12009  12C9  3001               	movlw	1
 12010  12CA  07F0               	addwf	___ftpack@arg,f
 12011  12CB  3000               	movlw	0
 12012  12CC  1803               	skipnc
 12013  12CD  3001               	movlw	1
 12014  12CE  07F1               	addwf	___ftpack@arg+1,f
 12015  12CF  3000               	movlw	0
 12016  12D0  1803               	skipnc
 12017  12D1  3001               	movlw	1
 12018  12D2  07F2               	addwf	___ftpack@arg+2,f
 12019  12D3  3001               	movlw	1
 12020  12D4                     u2565:	
 12021  12D4  36F2               	lsrf	___ftpack@arg+2,f
 12022  12D5  0CF1               	rrf	___ftpack@arg+1,f
 12023  12D6  0CF0               	rrf	___ftpack@arg,f
 12024  12D7  0B89               	decfsz	9,f
 12025  12D8  2AD4               	goto	u2565
 12026  12D9                     l664:	
 12027  12D9  30FF               	movlw	255
 12028  12DA  0572               	andwf	___ftpack@arg+2,w
 12029  12DB  1903               	btfsc	3,2
 12030  12DC  2AE6               	goto	l2425
 12031  12DD  2AC5               	goto	l2417
 12032  12DE                     l2423:	
 12033  12DE  3001               	movlw	1
 12034  12DF  02F3               	subwf	___ftpack@exp,f
 12035  12E0  3001               	movlw	1
 12036  12E1                     u2585:	
 12037  12E1  35F0               	lslf	___ftpack@arg,f
 12038  12E2  0DF1               	rlf	___ftpack@arg+1,f
 12039  12E3  0DF2               	rlf	___ftpack@arg+2,f
 12040  12E4  0B89               	decfsz	9,f
 12041  12E5  2AE1               	goto	u2585
 12042  12E6                     l2425:	
 12043  12E6  1BF1               	btfsc	___ftpack@arg+1,7
 12044  12E7  2AEC               	goto	l671
 12045  12E8  3002               	movlw	2
 12046  12E9  0273               	subwf	___ftpack@exp,w
 12047  12EA  1803               	skipnc
 12048  12EB  2ADE               	goto	l2423
 12049  12EC                     l671:	
 12050  12EC  1873               	btfsc	___ftpack@exp,0
 12051  12ED  2AF4               	goto	l672
 12052  12EE  30FF               	movlw	255
 12053  12EF  05F0               	andwf	___ftpack@arg,f
 12054  12F0  307F               	movlw	127
 12055  12F1  05F1               	andwf	___ftpack@arg+1,f
 12056  12F2  30FF               	movlw	255
 12057  12F3  05F2               	andwf	___ftpack@arg+2,f
 12058  12F4                     l672:	
 12059  12F4  1003               	clrc
 12060  12F5  0CF3               	rrf	___ftpack@exp,f
 12061  12F6  0873               	movf	___ftpack@exp,w
 12062  12F7  00F5               	movwf	??___ftpack
 12063  12F8  01F6               	clrf	??___ftpack+1
 12064  12F9  01F7               	clrf	??___ftpack+2
 12065  12FA  3010               	movlw	16
 12066  12FB                     u2625:	
 12067  12FB  35F5               	lslf	??___ftpack,f
 12068  12FC  0DF6               	rlf	??___ftpack+1,f
 12069  12FD  0DF7               	rlf	??___ftpack+2,f
 12070  12FE  0B89               	decfsz	9,f
 12071  12FF  2AFB               	goto	u2625
 12072  1300  0875               	movf	??___ftpack,w
 12073  1301  04F0               	iorwf	___ftpack@arg,f
 12074  1302  0876               	movf	??___ftpack+1,w
 12075  1303  04F1               	iorwf	___ftpack@arg+1,f
 12076  1304  0877               	movf	??___ftpack+2,w
 12077  1305  04F2               	iorwf	___ftpack@arg+2,f
 12078  1306  0874               	movf	___ftpack@sign,w
 12079  1307  1903               	btfsc	3,2
 12080  1308  0008               	return
 12081  1309  17F2               	bsf	___ftpack@arg+2,7
 12082  130A  0008               	return
 12083  130B                     __end_of___ftpack:	
 12084                           
 12085                           	psect	text26
 12086  13F7                     __ptext26:	
 12087 ;; *************** function ___aldiv *****************
 12088 ;; Defined at:
 12089 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\aldiv.c"
 12090 ;; Parameters:    Size  Location     Type
 12091 ;;  divisor         4    0[COMMON] long 
 12092 ;;  dividend        4    4[COMMON] long 
 12093 ;; Auto vars:     Size  Location     Type
 12094 ;;  quotient        4    2[BANK0 ] long 
 12095 ;;  sign            1    1[BANK0 ] unsigned char 
 12096 ;;  counter         1    0[BANK0 ] unsigned char 
 12097 ;; Return value:  Size  Location     Type
 12098 ;;                  4    0[COMMON] long 
 12099 ;; Registers used:
 12100 ;;		wreg, status,2, status,0
 12101 ;; Tracked objects:
 12102 ;;		On entry : 0/0
 12103 ;;		On exit  : 0/0
 12104 ;;		Unchanged: 0/0
 12105 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12106 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12107 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12108 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12109 ;;      Totals:         9       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12110 ;;Total ram usage:       15 bytes
 12111 ;; Hardware stack levels used:    1
 12112 ;; This function calls:
 12113 ;;		Nothing
 12114 ;; This function is called by:
 12115 ;;		_main
 12116 ;; This function uses a non-reentrant model
 12117 ;;
 12118                           
 12119                           
 12120                           ;psect for function ___aldiv
 12121  13F7                     ___aldiv:	
 12122                           
 12123                           ;incstack = 0
 12124                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
 12125  13F7  0020               	movlb	0	; select bank0
 12126  13F8  01A1               	clrf	___aldiv@sign
 12127  13F9  1FF3               	btfss	___aldiv@divisor+3,7
 12128  13FA  2C08               	goto	l541
 12129  13FB  09F0               	comf	___aldiv@divisor,f
 12130  13FC  09F1               	comf	___aldiv@divisor+1,f
 12131  13FD  09F2               	comf	___aldiv@divisor+2,f
 12132  13FE  09F3               	comf	___aldiv@divisor+3,f
 12133  13FF  0AF0               	incf	___aldiv@divisor,f
 12134  1400  1903               	skipnz
 12135  1401  0AF1               	incf	___aldiv@divisor+1,f
 12136  1402  1903               	skipnz
 12137  1403  0AF2               	incf	___aldiv@divisor+2,f
 12138  1404  1903               	skipnz
 12139  1405  0AF3               	incf	___aldiv@divisor+3,f
 12140  1406  01A1               	clrf	___aldiv@sign
 12141  1407  0AA1               	incf	___aldiv@sign,f
 12142  1408                     l541:	
 12143  1408  1FF7               	btfss	___aldiv@dividend+3,7
 12144  1409  2C19               	goto	l3569
 12145  140A  09F4               	comf	___aldiv@dividend,f
 12146  140B  09F5               	comf	___aldiv@dividend+1,f
 12147  140C  09F6               	comf	___aldiv@dividend+2,f
 12148  140D  09F7               	comf	___aldiv@dividend+3,f
 12149  140E  0AF4               	incf	___aldiv@dividend,f
 12150  140F  1903               	skipnz
 12151  1410  0AF5               	incf	___aldiv@dividend+1,f
 12152  1411  1903               	skipnz
 12153  1412  0AF6               	incf	___aldiv@dividend+2,f
 12154  1413  1903               	skipnz
 12155  1414  0AF7               	incf	___aldiv@dividend+3,f
 12156  1415  3001               	movlw	1
 12157  1416  00F8               	movwf	??___aldiv
 12158  1417  0878               	movf	??___aldiv,w
 12159  1418  06A1               	xorwf	___aldiv@sign,f
 12160  1419                     l3569:	
 12161  1419  3000               	movlw	0
 12162  141A  00A5               	movwf	___aldiv@quotient+3
 12163  141B  3000               	movlw	0
 12164  141C  00A4               	movwf	___aldiv@quotient+2
 12165  141D  3000               	movlw	0
 12166  141E  00A3               	movwf	___aldiv@quotient+1
 12167  141F  3000               	movlw	0
 12168  1420  00A2               	movwf	___aldiv@quotient
 12169  1421  0873               	movf	___aldiv@divisor+3,w
 12170  1422  0472               	iorwf	___aldiv@divisor+2,w
 12171  1423  0471               	iorwf	___aldiv@divisor+1,w
 12172  1424  0470               	iorwf	___aldiv@divisor,w
 12173  1425  1903               	skipnz
 12174  1426  2C62               	goto	l3591
 12175  1427  01A0               	clrf	___aldiv@counter
 12176  1428  0AA0               	incf	___aldiv@counter,f
 12177  1429                     l3577:	
 12178  1429  1BF3               	btfsc	___aldiv@divisor+3,7
 12179  142A  2C37               	goto	l3579
 12180  142B  3001               	movlw	1
 12181  142C                     u4605:	
 12182  142C  35F0               	lslf	___aldiv@divisor,f
 12183  142D  0DF1               	rlf	___aldiv@divisor+1,f
 12184  142E  0DF2               	rlf	___aldiv@divisor+2,f
 12185  142F  0DF3               	rlf	___aldiv@divisor+3,f
 12186  1430  0B89               	decfsz	9,f
 12187  1431  2C2C               	goto	u4605
 12188  1432  3001               	movlw	1
 12189  1433  00F8               	movwf	??___aldiv
 12190  1434  0878               	movf	??___aldiv,w
 12191  1435  07A0               	addwf	___aldiv@counter,f
 12192  1436  2C29               	goto	l3577
 12193  1437                     l3579:	
 12194  1437  3001               	movlw	1
 12195  1438                     u4625:	
 12196  1438  35A2               	lslf	___aldiv@quotient,f
 12197  1439  0DA3               	rlf	___aldiv@quotient+1,f
 12198  143A  0DA4               	rlf	___aldiv@quotient+2,f
 12199  143B  0DA5               	rlf	___aldiv@quotient+3,f
 12200  143C  0B89               	decfsz	9,f
 12201  143D  2C38               	goto	u4625
 12202  143E  0873               	movf	___aldiv@divisor+3,w
 12203  143F  0277               	subwf	___aldiv@dividend+3,w
 12204  1440  1D03               	skipz
 12205  1441  2C4C               	goto	u4635
 12206  1442  0872               	movf	___aldiv@divisor+2,w
 12207  1443  0276               	subwf	___aldiv@dividend+2,w
 12208  1444  1D03               	skipz
 12209  1445  2C4C               	goto	u4635
 12210  1446  0871               	movf	___aldiv@divisor+1,w
 12211  1447  0275               	subwf	___aldiv@dividend+1,w
 12212  1448  1D03               	skipz
 12213  1449  2C4C               	goto	u4635
 12214  144A  0870               	movf	___aldiv@divisor,w
 12215  144B  0274               	subwf	___aldiv@dividend,w
 12216  144C                     u4635:	
 12217  144C  1C03               	skipc
 12218  144D  2C57               	goto	l3587
 12219  144E  0870               	movf	___aldiv@divisor,w
 12220  144F  02F4               	subwf	___aldiv@dividend,f
 12221  1450  0871               	movf	___aldiv@divisor+1,w
 12222  1451  3BF5               	subwfb	___aldiv@dividend+1,f
 12223  1452  0872               	movf	___aldiv@divisor+2,w
 12224  1453  3BF6               	subwfb	___aldiv@dividend+2,f
 12225  1454  0873               	movf	___aldiv@divisor+3,w
 12226  1455  3BF7               	subwfb	___aldiv@dividend+3,f
 12227  1456  1422               	bsf	___aldiv@quotient,0
 12228  1457                     l3587:	
 12229  1457  3001               	movlw	1
 12230  1458                     u4645:	
 12231  1458  36F3               	lsrf	___aldiv@divisor+3,f
 12232  1459  0CF2               	rrf	___aldiv@divisor+2,f
 12233  145A  0CF1               	rrf	___aldiv@divisor+1,f
 12234  145B  0CF0               	rrf	___aldiv@divisor,f
 12235  145C  0B89               	decfsz	9,f
 12236  145D  2C58               	goto	u4645
 12237  145E  3001               	movlw	1
 12238  145F  02A0               	subwf	___aldiv@counter,f
 12239  1460  1D03               	btfss	3,2
 12240  1461  2C37               	goto	l3579
 12241  1462                     l3591:	
 12242  1462  0821               	movf	___aldiv@sign,w
 12243  1463  1903               	btfsc	3,2
 12244  1464  2C70               	goto	l3595
 12245  1465  09A2               	comf	___aldiv@quotient,f
 12246  1466  09A3               	comf	___aldiv@quotient+1,f
 12247  1467  09A4               	comf	___aldiv@quotient+2,f
 12248  1468  09A5               	comf	___aldiv@quotient+3,f
 12249  1469  0AA2               	incf	___aldiv@quotient,f
 12250  146A  1903               	skipnz
 12251  146B  0AA3               	incf	___aldiv@quotient+1,f
 12252  146C  1903               	skipnz
 12253  146D  0AA4               	incf	___aldiv@quotient+2,f
 12254  146E  1903               	skipnz
 12255  146F  0AA5               	incf	___aldiv@quotient+3,f
 12256  1470                     l3595:	
 12257  1470  0825               	movf	___aldiv@quotient+3,w
 12258  1471  00F3               	movwf	?___aldiv+3
 12259  1472  0824               	movf	___aldiv@quotient+2,w
 12260  1473  00F2               	movwf	?___aldiv+2
 12261  1474  0823               	movf	___aldiv@quotient+1,w
 12262  1475  00F1               	movwf	?___aldiv+1
 12263  1476  0822               	movf	___aldiv@quotient,w
 12264  1477  00F0               	movwf	?___aldiv
 12265  1478  0008               	return
 12266  1479                     __end_of___aldiv:	
 12267                           
 12268                           	psect	text27
 12269  10A8                     __ptext27:	
 12270 ;; *************** function _SYSTEM_Initialize *****************
 12271 ;; Defined at:
 12272 ;;		line 68 in file "system.c"
 12273 ;; Parameters:    Size  Location     Type
 12274 ;;		None
 12275 ;; Auto vars:     Size  Location     Type
 12276 ;;		None
 12277 ;; Return value:  Size  Location     Type
 12278 ;;                  1    wreg      void 
 12279 ;; Registers used:
 12280 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12281 ;; Tracked objects:
 12282 ;;		On entry : 0/0
 12283 ;;		On exit  : 0/0
 12284 ;;		Unchanged: 0/0
 12285 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12286 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12287 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12288 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12289 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12290 ;;Total ram usage:        2 bytes
 12291 ;; Hardware stack levels used:    1
 12292 ;; Hardware stack levels required when called:    3
 12293 ;; This function calls:
 12294 ;;		_ADCC_Initialize
 12295 ;;		_InitCustomChars
 12296 ;;		_LCD_Clear
 12297 ;;		_LCD_Init
 12298 ;;		_OSCILLATOR_Initialize
 12299 ;;		_PIN_MANAGER_Initialize
 12300 ;;		_PWM6_Initialize
 12301 ;;		_TMR2_Initialize
 12302 ;; This function is called by:
 12303 ;;		_main
 12304 ;; This function uses a non-reentrant model
 12305 ;;
 12306                           
 12307                           
 12308                           ;psect for function _SYSTEM_Initialize
 12309  10A8                     _SYSTEM_Initialize:	
 12310                           
 12311                           ;system.c: 71: PIN_MANAGER_Initialize();
 12312                           
 12313                           ;incstack = 0
 12314                           ; Regs used in _SYSTEM_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12315  10A8  3190  2077  3190   	fcall	_PIN_MANAGER_Initialize
 12316                           
 12317                           ;system.c: 72: OSCILLATOR_Initialize();
 12318  10AB  319E  26C0  3190   	fcall	_OSCILLATOR_Initialize
 12319                           
 12320                           ;system.c: 73: FVRCON = 0x00;
 12321  10AE  0032               	movlb	18	; select bank18
 12322  10AF  018C               	clrf	12	;volatile
 12323                           
 12324                           ;system.c: 74: ADCC_Initialize();
 12325  10B0  319F  2772  3190   	fcall	_ADCC_Initialize
 12326                           
 12327                           ;system.c: 75: PWM6_Initialize();
 12328  10B3  319E  26E8  3190   	fcall	_PWM6_Initialize
 12329                           
 12330                           ;system.c: 76: TMR2_Initialize();
 12331  10B6  319F  2720  3190   	fcall	_TMR2_Initialize
 12332                           
 12333                           ;system.c: 77: LCD_Init(0X00);
 12334  10B9  3000               	movlw	0
 12335  10BA  3193  230B  3190   	fcall	_LCD_Init
 12336                           
 12337                           ;system.c: 78: _delay((unsigned long)((200)*(250000/4000.0)));
 12338  10BD  3011               	movlw	17
 12339  10BE  00F8               	movwf	??_SYSTEM_Initialize+1
 12340  10BF  303A               	movlw	58
 12341  10C0  00F7               	movwf	??_SYSTEM_Initialize
 12342  10C1                     u4957:	
 12343  10C1  0BF7               	decfsz	??_SYSTEM_Initialize,f
 12344  10C2  28C1               	goto	u4957
 12345  10C3  0BF8               	decfsz	??_SYSTEM_Initialize+1,f
 12346  10C4  28C1               	goto	u4957
 12347  10C5  0000               	nop
 12348                           
 12349                           ;system.c: 79: LCD_Clear();
 12350  10C6  319E  26B8  3190   	fcall	_LCD_Clear
 12351                           
 12352                           ;system.c: 80: _delay((unsigned long)((100)*(250000/4000.0)));
 12353  10C9  3009               	movlw	9
 12354  10CA  00F8               	movwf	??_SYSTEM_Initialize+1
 12355  10CB  301C               	movlw	28
 12356  10CC  00F7               	movwf	??_SYSTEM_Initialize
 12357  10CD                     u4967:	
 12358  10CD  0BF7               	decfsz	??_SYSTEM_Initialize,f
 12359  10CE  28CD               	goto	u4967
 12360  10CF  0BF8               	decfsz	??_SYSTEM_Initialize+1,f
 12361  10D0  28CD               	goto	u4967
 12362  10D1  0000               	nop
 12363                           
 12364                           ;system.c: 81: InitCustomChars();
 12365  10D2  3190  2029  3190   	fcall	_InitCustomChars
 12366                           
 12367                           ;system.c: 82: _delay((unsigned long)((200)*(250000/4000.0)));
 12368  10D5  3011               	movlw	17
 12369  10D6  00F8               	movwf	??_SYSTEM_Initialize+1
 12370  10D7  303A               	movlw	58
 12371  10D8  00F7               	movwf	??_SYSTEM_Initialize
 12372  10D9                     u4977:	
 12373  10D9  0BF7               	decfsz	??_SYSTEM_Initialize,f
 12374  10DA  28D9               	goto	u4977
 12375  10DB  0BF8               	decfsz	??_SYSTEM_Initialize+1,f
 12376  10DC  28D9               	goto	u4977
 12377  10DD  0000               	nop
 12378  10DE  0008               	return
 12379  10DF                     __end_of_SYSTEM_Initialize:	
 12380                           
 12381                           	psect	text28
 12382  1F20                     __ptext28:	
 12383 ;; *************** function _TMR2_Initialize *****************
 12384 ;; Defined at:
 12385 ;;		line 4 in file "tmr2.c"
 12386 ;; Parameters:    Size  Location     Type
 12387 ;;		None
 12388 ;; Auto vars:     Size  Location     Type
 12389 ;;		None
 12390 ;; Return value:  Size  Location     Type
 12391 ;;                  1    wreg      void 
 12392 ;; Registers used:
 12393 ;;		wreg, status,2
 12394 ;; Tracked objects:
 12395 ;;		On entry : 0/0
 12396 ;;		On exit  : 0/0
 12397 ;;		Unchanged: 0/0
 12398 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12399 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12400 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12401 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12402 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12403 ;;Total ram usage:        0 bytes
 12404 ;; Hardware stack levels used:    1
 12405 ;; This function calls:
 12406 ;;		Nothing
 12407 ;; This function is called by:
 12408 ;;		_SYSTEM_Initialize
 12409 ;; This function uses a non-reentrant model
 12410 ;;
 12411                           
 12412                           
 12413                           ;psect for function _TMR2_Initialize
 12414  1F20                     _TMR2_Initialize:	
 12415                           
 12416                           ;tmr2.c: 7: T2CON = 0x7F;
 12417                           
 12418                           ;incstack = 0
 12419                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
 12420  1F20  307F               	movlw	127
 12421  1F21  0025               	movlb	5	; select bank5
 12422  1F22  008E               	movwf	14	;volatile
 12423                           
 12424                           ;tmr2.c: 9: T2CLKCON = 0x01;
 12425  1F23  3001               	movlw	1
 12426  1F24  0090               	movwf	16	;volatile
 12427                           
 12428                           ;tmr2.c: 11: T2HLT = 0x00;
 12429  1F25  018F               	clrf	15	;volatile
 12430                           
 12431                           ;tmr2.c: 13: T2RST = 0x00;
 12432  1F26  0191               	clrf	17	;volatile
 12433                           
 12434                           ;tmr2.c: 15: T2PR = 0xFF;
 12435  1F27  30FF               	movlw	255
 12436  1F28  008D               	movwf	13	;volatile
 12437                           
 12438                           ;tmr2.c: 17: T2TMR = 0x00;
 12439  1F29  018C               	clrf	12	;volatile
 12440                           
 12441                           ;tmr2.c: 19: PIR4bits.TMR2IF = 0;
 12442  1F2A  002E               	movlb	14	; select bank14
 12443  1F2B  1090               	bcf	16,1	;volatile
 12444                           
 12445                           ;tmr2.c: 21: T2CONbits.TMR2ON = 1;
 12446  1F2C  0025               	movlb	5	; select bank5
 12447  1F2D  178E               	bsf	14,7	;volatile
 12448  1F2E  0008               	return
 12449  1F2F                     __end_of_TMR2_Initialize:	
 12450                           
 12451                           	psect	text29
 12452  1EE8                     __ptext29:	
 12453 ;; *************** function _PWM6_Initialize *****************
 12454 ;; Defined at:
 12455 ;;		line 4 in file "pwm6.c"
 12456 ;; Parameters:    Size  Location     Type
 12457 ;;		None
 12458 ;; Auto vars:     Size  Location     Type
 12459 ;;		None
 12460 ;; Return value:  Size  Location     Type
 12461 ;;                  1    wreg      void 
 12462 ;; Registers used:
 12463 ;;		wreg, status,2, status,0
 12464 ;; Tracked objects:
 12465 ;;		On entry : 0/0
 12466 ;;		On exit  : 0/0
 12467 ;;		Unchanged: 0/0
 12468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12469 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12470 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12471 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12472 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12473 ;;Total ram usage:        0 bytes
 12474 ;; Hardware stack levels used:    1
 12475 ;; This function calls:
 12476 ;;		Nothing
 12477 ;; This function is called by:
 12478 ;;		_SYSTEM_Initialize
 12479 ;; This function uses a non-reentrant model
 12480 ;;
 12481                           
 12482                           
 12483                           ;psect for function _PWM6_Initialize
 12484  1EE8                     _PWM6_Initialize:	
 12485                           
 12486                           ;pwm6.c: 6: PWM6CON = 0x80;
 12487                           
 12488                           ;incstack = 0
 12489                           ; Regs used in _PWM6_Initialize: [wreg+status,2+status,0]
 12490  1EE8  3080               	movlw	128
 12491  1EE9  0027               	movlb	7	; select bank7
 12492  1EEA  008E               	movwf	14	;volatile
 12493                           
 12494                           ;pwm6.c: 8: PWM6DCH = 0x3C;
 12495  1EEB  303C               	movlw	60
 12496  1EEC  008D               	movwf	13	;volatile
 12497                           
 12498                           ;pwm6.c: 10: PWM6DCL = 0x40;
 12499  1EED  3040               	movlw	64
 12500  1EEE  008C               	movwf	12	;volatile
 12501                           
 12502                           ;pwm6.c: 12: CCPTMRS1bits.P6TSEL = 0x1;
 12503  1EEF  0024               	movlb	4	; select bank4
 12504  1EF0  081F               	movf	31,w	;volatile
 12505  1EF1  39F3               	andlw	-13
 12506  1EF2  3804               	iorlw	4
 12507  1EF3  009F               	movwf	31	;volatile
 12508  1EF4  0008               	return
 12509  1EF5                     __end_of_PWM6_Initialize:	
 12510                           
 12511                           	psect	text30
 12512  1077                     __ptext30:	
 12513 ;; *************** function _PIN_MANAGER_Initialize *****************
 12514 ;; Defined at:
 12515 ;;		line 5 in file "pin_manager.c"
 12516 ;; Parameters:    Size  Location     Type
 12517 ;;		None
 12518 ;; Auto vars:     Size  Location     Type
 12519 ;;  state           1    0[COMMON] unsigned char 
 12520 ;; Return value:  Size  Location     Type
 12521 ;;                  1    wreg      void 
 12522 ;; Registers used:
 12523 ;;		wreg, status,2
 12524 ;; Tracked objects:
 12525 ;;		On entry : 0/0
 12526 ;;		On exit  : 0/0
 12527 ;;		Unchanged: 0/0
 12528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12529 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12530 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12531 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12532 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12533 ;;Total ram usage:        1 bytes
 12534 ;; Hardware stack levels used:    1
 12535 ;; This function calls:
 12536 ;;		Nothing
 12537 ;; This function is called by:
 12538 ;;		_SYSTEM_Initialize
 12539 ;; This function uses a non-reentrant model
 12540 ;;
 12541                           
 12542                           
 12543                           ;psect for function _PIN_MANAGER_Initialize
 12544  1077                     _PIN_MANAGER_Initialize:	
 12545                           
 12546                           ;pin_manager.c: 7: LATA = 0x00;
 12547                           
 12548                           ;incstack = 0
 12549                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
 12550  1077  0020               	movlb	0	; select bank0
 12551  1078  0196               	clrf	22	;volatile
 12552                           
 12553                           ;pin_manager.c: 8: LATB = 0x0;
 12554  1079  0197               	clrf	23	;volatile
 12555                           
 12556                           ;pin_manager.c: 9: LATC = 0x0;
 12557  107A  0198               	clrf	24	;volatile
 12558                           
 12559                           ;pin_manager.c: 11: WPUA = 0x00;
 12560  107B  003E               	movlb	30	; select bank30
 12561  107C  01B9               	clrf	57	;volatile
 12562                           
 12563                           ;pin_manager.c: 12: WPUB = 0x00;
 12564  107D  01C4               	clrf	68	;volatile
 12565                           
 12566                           ;pin_manager.c: 13: WPUC = 0x00;
 12567  107E  01CF               	clrf	79	;volatile
 12568                           
 12569                           ;pin_manager.c: 14: WPUE = 0x8;
 12570  107F  3008               	movlw	8
 12571  1080  00E5               	movwf	101	;volatile
 12572                           
 12573                           ;pin_manager.c: 16: TRISA = 0x04;
 12574  1081  3004               	movlw	4
 12575  1082  0020               	movlb	0	; select bank0
 12576  1083  0091               	movwf	17	;volatile
 12577                           
 12578                           ;pin_manager.c: 17: TRISB = 0x00;
 12579  1084  0192               	clrf	18	;volatile
 12580                           
 12581                           ;pin_manager.c: 18: TRISC = 0x10;
 12582  1085  3010               	movlw	16
 12583  1086  0093               	movwf	19	;volatile
 12584                           
 12585                           ;pin_manager.c: 20: ANSELA = 0x04;
 12586  1087  3004               	movlw	4
 12587  1088  003E               	movlb	30	; select bank30
 12588  1089  00B8               	movwf	56	;volatile
 12589                           
 12590                           ;pin_manager.c: 21: ANSELB = 0x00;
 12591  108A  01C3               	clrf	67	;volatile
 12592                           
 12593                           ;pin_manager.c: 22: ANSELC = 0x00;
 12594  108B  01CE               	clrf	78	;volatile
 12595                           
 12596                           ;pin_manager.c: 26: PIE0bits.IOCIE = 0;
 12597  108C  002E               	movlb	14	; select bank14
 12598  108D  1216               	bcf	22,4	;volatile
 12599                           
 12600                           ;pin_manager.c: 27: bool state = GIE;
 12601  108E  3000               	movlw	0
 12602  108F  1B8B               	btfsc	11,7	;volatile
 12603  1090  3001               	movlw	1
 12604  1091  00F0               	movwf	PIN_MANAGER_Initialize@state
 12605                           
 12606                           ;pin_manager.c: 28: GIE = 0;
 12607  1092  138B               	bcf	11,7	;volatile
 12608                           
 12609                           ;pin_manager.c: 29: PPSLOCK = 0x55;
 12610  1093  3055               	movlw	85
 12611  1094  003D               	movlb	29	; select bank29
 12612  1095  008F               	movwf	15	;volatile
 12613                           
 12614                           ;pin_manager.c: 30: PPSLOCK = 0xAA;
 12615  1096  30AA               	movlw	170
 12616  1097  008F               	movwf	15	;volatile
 12617                           
 12618                           ;pin_manager.c: 31: PPSLOCKbits.PPSLOCKED = 0x00;
 12619  1098  100F               	bcf	15,0	;volatile
 12620                           
 12621                           ;pin_manager.c: 34: RA1PPS = 0x000E;
 12622  1099  300E               	movlw	14
 12623  109A  003E               	movlb	30	; select bank30
 12624  109B  0091               	movwf	17	;volatile
 12625                           
 12626                           ;pin_manager.c: 38: PPSLOCK = 0x55;
 12627  109C  3055               	movlw	85
 12628  109D  003D               	movlb	29	; select bank29
 12629  109E  008F               	movwf	15	;volatile
 12630                           
 12631                           ;pin_manager.c: 39: PPSLOCK = 0xAA;
 12632  109F  30AA               	movlw	170
 12633  10A0  008F               	movwf	15	;volatile
 12634                           
 12635                           ;pin_manager.c: 40: PPSLOCKbits.PPSLOCKED = 0x01;
 12636  10A1  140F               	bsf	15,0	;volatile
 12637                           
 12638                           ;pin_manager.c: 41: GIE = state;
 12639  10A2  1C70               	btfss	PIN_MANAGER_Initialize@state,0
 12640  10A3  28A6               	goto	u3250
 12641  10A4  178B               	bsf	11,7	;volatile
 12642  10A5  0008               	return
 12643  10A6                     u3250:	
 12644  10A6  138B               	bcf	11,7	;volatile
 12645  10A7  0008               	return
 12646  10A8                     __end_of_PIN_MANAGER_Initialize:	
 12647                           
 12648                           	psect	text31
 12649  1EC0                     __ptext31:	
 12650 ;; *************** function _OSCILLATOR_Initialize *****************
 12651 ;; Defined at:
 12652 ;;		line 85 in file "system.c"
 12653 ;; Parameters:    Size  Location     Type
 12654 ;;		None
 12655 ;; Auto vars:     Size  Location     Type
 12656 ;;		None
 12657 ;; Return value:  Size  Location     Type
 12658 ;;                  1    wreg      void 
 12659 ;; Registers used:
 12660 ;;		wreg, status,2
 12661 ;; Tracked objects:
 12662 ;;		On entry : 0/0
 12663 ;;		On exit  : 0/0
 12664 ;;		Unchanged: 0/0
 12665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12666 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12667 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12668 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12669 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12670 ;;Total ram usage:        0 bytes
 12671 ;; Hardware stack levels used:    1
 12672 ;; This function calls:
 12673 ;;		Nothing
 12674 ;; This function is called by:
 12675 ;;		_SYSTEM_Initialize
 12676 ;; This function uses a non-reentrant model
 12677 ;;
 12678                           
 12679                           
 12680                           ;psect for function _OSCILLATOR_Initialize
 12681  1EC0                     _OSCILLATOR_Initialize:	
 12682                           
 12683                           ;system.c: 111: OSCCON1 = 0x60;
 12684                           
 12685                           ;incstack = 0
 12686                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 12687  1EC0  3060               	movlw	96
 12688  1EC1  0031               	movlb	17	; select bank17
 12689  1EC2  008D               	movwf	13	;volatile
 12690                           
 12691                           ;system.c: 113: OSCCON3 = 0x00;
 12692  1EC3  018F               	clrf	15	;volatile
 12693                           
 12694                           ;system.c: 115: OSCEN = 0x00;
 12695  1EC4  0191               	clrf	17	;volatile
 12696                           
 12697                           ;system.c: 117: OSCFRQ = 0x00;
 12698  1EC5  0193               	clrf	19	;volatile
 12699                           
 12700                           ;system.c: 119: OSCTUNE = 0x00;
 12701  1EC6  0192               	clrf	18	;volatile
 12702  1EC7  0008               	return
 12703  1EC8                     __end_of_OSCILLATOR_Initialize:	
 12704                           
 12705                           	psect	text32
 12706  130B                     __ptext32:	
 12707 ;; *************** function _LCD_Init *****************
 12708 ;; Defined at:
 12709 ;;		line 154 in file "lcd.c"
 12710 ;; Parameters:    Size  Location     Type
 12711 ;;  style           1    wreg     unsigned char 
 12712 ;; Auto vars:     Size  Location     Type
 12713 ;;  style           1    5[COMMON] unsigned char 
 12714 ;; Return value:  Size  Location     Type
 12715 ;;                  1    wreg      void 
 12716 ;; Registers used:
 12717 ;;		wreg, status,2, status,0, pclath, cstack
 12718 ;; Tracked objects:
 12719 ;;		On entry : 0/0
 12720 ;;		On exit  : 0/0
 12721 ;;		Unchanged: 0/0
 12722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12723 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12724 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12725 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12726 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12727 ;;Total ram usage:        3 bytes
 12728 ;; Hardware stack levels used:    1
 12729 ;; Hardware stack levels required when called:    2
 12730 ;; This function calls:
 12731 ;;		_LCD_Cmd
 12732 ;;		_LCD_Port
 12733 ;; This function is called by:
 12734 ;;		_SYSTEM_Initialize
 12735 ;; This function uses a non-reentrant model
 12736 ;;
 12737                           
 12738                           
 12739                           ;psect for function _LCD_Init
 12740  130B                     _LCD_Init:	
 12741                           
 12742                           ;incstack = 0
 12743                           ; Regs used in _LCD_Init: [wreg+status,2+status,0+pclath+cstack]
 12744                           ;LCD_Init@style stored from wreg
 12745  130B  00F5               	movwf	LCD_Init@style
 12746                           
 12747                           ;lcd.c: 156: LCD_Port(0x00);
 12748  130C  3000               	movlw	0
 12749  130D  319F  2742  3193   	fcall	_LCD_Port
 12750                           
 12751                           ;lcd.c: 158: _delay((unsigned long)((100)*(250000/4000.0)));
 12752  1310  3009               	movlw	9
 12753  1311  00F4               	movwf	??_LCD_Init+1
 12754  1312  301C               	movlw	28
 12755  1313  00F3               	movwf	??_LCD_Init
 12756  1314                     u4987:	
 12757  1314  0BF3               	decfsz	??_LCD_Init,f
 12758  1315  2B14               	goto	u4987
 12759  1316  0BF4               	decfsz	??_LCD_Init+1,f
 12760  1317  2B14               	goto	u4987
 12761  1318  0000               	nop
 12762                           
 12763                           ;lcd.c: 160: LCD_Cmd(0x03);
 12764  1319  3003               	movlw	3
 12765  131A  319F  2711  3193   	fcall	_LCD_Cmd
 12766                           
 12767                           ;lcd.c: 162: _delay((unsigned long)((10)*(250000/4000.0)));
 12768  131D  30D0               	movlw	208
 12769  131E  00F3               	movwf	??_LCD_Init
 12770  131F                     u4997:	
 12771  131F  0BF3               	decfsz	??_LCD_Init,f
 12772  1320  2B1F               	goto	u4997
 12773                           
 12774                           ;lcd.c: 164: LCD_Cmd(0x03);
 12775  1321  3003               	movlw	3
 12776  1322  319F  2711  3193   	fcall	_LCD_Cmd
 12777                           
 12778                           ;lcd.c: 166: _delay((unsigned long)((120)*(250000/4000000.0)));
 12779  1325  3002               	movlw	2
 12780  1326  00F3               	movwf	??_LCD_Init
 12781  1327                     u5007:	
 12782  1327  0BF3               	decfsz	??_LCD_Init,f
 12783  1328  2B27               	goto	u5007
 12784                           
 12785                           ;lcd.c: 168: LCD_Cmd(0x03);
 12786  1329  3003               	movlw	3
 12787  132A  319F  2711  3193   	fcall	_LCD_Cmd
 12788                           
 12789                           ;lcd.c: 170: _delay((unsigned long)((120)*(250000/4000000.0)));
 12790  132D  3002               	movlw	2
 12791  132E  00F3               	movwf	??_LCD_Init
 12792  132F                     u5017:	
 12793  132F  0BF3               	decfsz	??_LCD_Init,f
 12794  1330  2B2F               	goto	u5017
 12795                           
 12796                           ;lcd.c: 172: LCD_Cmd(0x02);
 12797  1331  3002               	movlw	2
 12798  1332  319F  2711  3193   	fcall	_LCD_Cmd
 12799                           
 12800                           ;lcd.c: 174: _delay((unsigned long)((120)*(250000/4000000.0)));
 12801  1335  3002               	movlw	2
 12802  1336  00F3               	movwf	??_LCD_Init
 12803  1337                     u5027:	
 12804  1337  0BF3               	decfsz	??_LCD_Init,f
 12805  1338  2B37               	goto	u5027
 12806                           
 12807                           ;lcd.c: 176: LCD_Cmd(0x2);
 12808  1339  3002               	movlw	2
 12809  133A  319F  2711  3193   	fcall	_LCD_Cmd
 12810                           
 12811                           ;lcd.c: 178: LCD_Cmd(0x8);
 12812  133D  3008               	movlw	8
 12813  133E  319F  2711  3193   	fcall	_LCD_Cmd
 12814                           
 12815                           ;lcd.c: 180: _delay((unsigned long)((120)*(250000/4000000.0)));
 12816  1341  3002               	movlw	2
 12817  1342  00F3               	movwf	??_LCD_Init
 12818  1343                     u5037:	
 12819  1343  0BF3               	decfsz	??_LCD_Init,f
 12820  1344  2B43               	goto	u5037
 12821                           
 12822                           ;lcd.c: 182: LCD_Cmd(0x0);
 12823  1345  3000               	movlw	0
 12824  1346  319F  2711  3193   	fcall	_LCD_Cmd
 12825                           
 12826                           ;lcd.c: 184: LCD_Cmd(0x8);
 12827  1349  3008               	movlw	8
 12828  134A  319F  2711  3193   	fcall	_LCD_Cmd
 12829                           
 12830                           ;lcd.c: 186: _delay((unsigned long)((120)*(250000/4000000.0)));
 12831  134D  3002               	movlw	2
 12832  134E  00F3               	movwf	??_LCD_Init
 12833  134F                     u5047:	
 12834  134F  0BF3               	decfsz	??_LCD_Init,f
 12835  1350  2B4F               	goto	u5047
 12836                           
 12837                           ;lcd.c: 188: LCD_Cmd(0x0);
 12838  1351  3000               	movlw	0
 12839  1352  319F  2711  3193   	fcall	_LCD_Cmd
 12840                           
 12841                           ;lcd.c: 190: LCD_Cmd(0x1);
 12842  1355  3001               	movlw	1
 12843  1356  319F  2711  3193   	fcall	_LCD_Cmd
 12844                           
 12845                           ;lcd.c: 192: _delay((unsigned long)((5)*(250000/4000.0)));
 12846  1359  3067               	movlw	103
 12847  135A  00F3               	movwf	??_LCD_Init
 12848  135B                     u5057:	
 12849  135B  0BF3               	decfsz	??_LCD_Init,f
 12850  135C  2B5B               	goto	u5057
 12851  135D  3200               	nop2	;nop
 12852                           
 12853                           ;lcd.c: 194: LCD_Cmd(0x0);
 12854  135E  3000               	movlw	0
 12855  135F  319F  2711  3193   	fcall	_LCD_Cmd
 12856                           
 12857                           ;lcd.c: 196: LCD_Cmd(0x6);
 12858  1362  3006               	movlw	6
 12859  1363  319F  2711  3193   	fcall	_LCD_Cmd
 12860                           
 12861                           ;lcd.c: 198: _delay((unsigned long)((120)*(250000/4000000.0)));
 12862  1366  3002               	movlw	2
 12863  1367  00F3               	movwf	??_LCD_Init
 12864  1368                     u5067:	
 12865  1368  0BF3               	decfsz	??_LCD_Init,f
 12866  1369  2B68               	goto	u5067
 12867                           
 12868                           ;lcd.c: 200: LCD_Cmd(0x0);
 12869  136A  3000               	movlw	0
 12870  136B  319F  2711  3193   	fcall	_LCD_Cmd
 12871                           
 12872                           ;lcd.c: 202: LCD_Cmd(0xc|style);
 12873  136E  0875               	movf	LCD_Init@style,w
 12874  136F  380C               	iorlw	12
 12875  1370  319F  2711  3193   	fcall	_LCD_Cmd
 12876                           
 12877                           ;lcd.c: 204: _delay((unsigned long)((120)*(250000/4000000.0)));
 12878  1373  3002               	movlw	2
 12879  1374  00F3               	movwf	??_LCD_Init
 12880  1375                     u5077:	
 12881  1375  0BF3               	decfsz	??_LCD_Init,f
 12882  1376  2B75               	goto	u5077
 12883  1377  0008               	return
 12884  1378                     __end_of_LCD_Init:	
 12885                           
 12886                           	psect	text33
 12887  1EB8                     __ptext33:	
 12888 ;; *************** function _LCD_Clear *****************
 12889 ;; Defined at:
 12890 ;;		line 75 in file "lcd.c"
 12891 ;; Parameters:    Size  Location     Type
 12892 ;;		None
 12893 ;; Auto vars:     Size  Location     Type
 12894 ;;		None
 12895 ;; Return value:  Size  Location     Type
 12896 ;;                  1    wreg      void 
 12897 ;; Registers used:
 12898 ;;		wreg, status,2, status,0, pclath, cstack
 12899 ;; Tracked objects:
 12900 ;;		On entry : 0/0
 12901 ;;		On exit  : 0/0
 12902 ;;		Unchanged: 0/0
 12903 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12904 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12905 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12906 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12907 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12908 ;;Total ram usage:        0 bytes
 12909 ;; Hardware stack levels used:    1
 12910 ;; Hardware stack levels required when called:    2
 12911 ;; This function calls:
 12912 ;;		_LCD_Cmd
 12913 ;; This function is called by:
 12914 ;;		_SYSTEM_Initialize
 12915 ;; This function uses a non-reentrant model
 12916 ;;
 12917                           
 12918                           
 12919                           ;psect for function _LCD_Clear
 12920  1EB8                     _LCD_Clear:	
 12921                           
 12922                           ;lcd.c: 77: LCD_Cmd(0);
 12923                           
 12924                           ;incstack = 0
 12925                           ; Regs used in _LCD_Clear: [wreg+status,2+status,0+pclath+cstack]
 12926  1EB8  3000               	movlw	0
 12927  1EB9  319F  2711  319E   	fcall	_LCD_Cmd
 12928                           
 12929                           ;lcd.c: 78: LCD_Cmd(1);
 12930  1EBC  3001               	movlw	1
 12931  1EBD  319F  2711         	fcall	_LCD_Cmd
 12932  1EBF  0008               	return
 12933  1EC0                     __end_of_LCD_Clear:	
 12934                           
 12935                           	psect	text34
 12936  1029                     __ptext34:	
 12937 ;; *************** function _InitCustomChars *****************
 12938 ;; Defined at:
 12939 ;;		line 29 in file "lcd.c"
 12940 ;; Parameters:    Size  Location     Type
 12941 ;;		None
 12942 ;; Auto vars:     Size  Location     Type
 12943 ;;  i               1    6[COMMON] unsigned char 
 12944 ;; Return value:  Size  Location     Type
 12945 ;;                  1    wreg      void 
 12946 ;; Registers used:
 12947 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12948 ;; Tracked objects:
 12949 ;;		On entry : 0/0
 12950 ;;		On exit  : 0/0
 12951 ;;		Unchanged: 0/0
 12952 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12953 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12954 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12955 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12956 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12957 ;;Total ram usage:        2 bytes
 12958 ;; Hardware stack levels used:    1
 12959 ;; Hardware stack levels required when called:    2
 12960 ;; This function calls:
 12961 ;;		_LCD_Cmd
 12962 ;;		_LCD_Write_Char
 12963 ;; This function is called by:
 12964 ;;		_SYSTEM_Initialize
 12965 ;; This function uses a non-reentrant model
 12966 ;;
 12967                           
 12968                           
 12969                           ;psect for function _InitCustomChars
 12970  1029                     _InitCustomChars:	
 12971                           
 12972                           ;lcd.c: 31: uint8_t i;
 12973                           ;lcd.c: 32: LCD_Cmd(0x04);
 12974                           
 12975                           ;incstack = 0
 12976                           ; Regs used in _InitCustomChars: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12977  1029  3004               	movlw	4
 12978  102A  319F  2711  3190   	fcall	_LCD_Cmd
 12979                           
 12980                           ;lcd.c: 33: LCD_Cmd(0x00);
 12981  102D  3000               	movlw	0
 12982  102E  319F  2711  3190   	fcall	_LCD_Cmd
 12983                           
 12984                           ;lcd.c: 34: for (i = 0; i < sizeof(__cgram) ; i++)
 12985  1031  01F6               	clrf	InitCustomChars@i
 12986  1032  3018               	movlw	24
 12987  1033  0276               	subwf	InitCustomChars@i,w
 12988  1034  1803               	btfsc	3,0
 12989  1035  2847               	goto	l2697
 12990  1036                     l2691:	
 12991                           
 12992                           ;lcd.c: 35: LCD_Write_Char(__cgram[i]);
 12993  1036  0876               	movf	InitCustomChars@i,w
 12994  1037  3E20               	addlw	(low (___cgram| (0+256)))& (0+255)
 12995  1038  0086               	movwf	6
 12996  1039  3001               	movlw	1	; select bank2/3
 12997  103A  0087               	movwf	7
 12998  103B  0801               	movf	1,w
 12999  103C  3190  2006  3190   	fcall	_LCD_Write_Char
 13000  103F  3001               	movlw	1
 13001  1040  00F5               	movwf	??_InitCustomChars
 13002  1041  0875               	movf	??_InitCustomChars,w
 13003  1042  07F6               	addwf	InitCustomChars@i,f
 13004  1043  3018               	movlw	24
 13005  1044  0276               	subwf	InitCustomChars@i,w
 13006  1045  1C03               	skipc
 13007  1046  2836               	goto	l2691
 13008  1047                     l2697:	
 13009                           
 13010                           ;lcd.c: 36: LCD_Cmd(0);
 13011  1047  3000               	movlw	0
 13012  1048  319F  2711  3190   	fcall	_LCD_Cmd
 13013                           
 13014                           ;lcd.c: 37: LCD_Cmd(2);
 13015  104B  3002               	movlw	2
 13016  104C  319F  2711         	fcall	_LCD_Cmd
 13017  104E  0008               	return
 13018  104F                     __end_of_InitCustomChars:	
 13019                           
 13020                           	psect	text35
 13021  1F72                     __ptext35:	
 13022 ;; *************** function _ADCC_Initialize *****************
 13023 ;; Defined at:
 13024 ;;		line 5 in file "adcc.c"
 13025 ;; Parameters:    Size  Location     Type
 13026 ;;		None
 13027 ;; Auto vars:     Size  Location     Type
 13028 ;;		None
 13029 ;; Return value:  Size  Location     Type
 13030 ;;                  1    wreg      void 
 13031 ;; Registers used:
 13032 ;;		wreg, status,2
 13033 ;; Tracked objects:
 13034 ;;		On entry : 0/0
 13035 ;;		On exit  : 0/0
 13036 ;;		Unchanged: 0/0
 13037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13038 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13039 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13040 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13041 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13042 ;;Total ram usage:        0 bytes
 13043 ;; Hardware stack levels used:    1
 13044 ;; This function calls:
 13045 ;;		Nothing
 13046 ;; This function is called by:
 13047 ;;		_SYSTEM_Initialize
 13048 ;; This function uses a non-reentrant model
 13049 ;;
 13050                           
 13051                           
 13052                           ;psect for function _ADCC_Initialize
 13053  1F72                     _ADCC_Initialize:	
 13054                           
 13055                           ;adcc.c: 9: ADCON1 = 0x00;
 13056                           
 13057                           ;incstack = 0
 13058                           ; Regs used in _ADCC_Initialize: [wreg+status,2]
 13059  1F72  0021               	movlb	1	; select bank1
 13060  1F73  0194               	clrf	20	;volatile
 13061                           
 13062                           ;adcc.c: 11: ADCON2 = 0x00;
 13063  1F74  0195               	clrf	21	;volatile
 13064                           
 13065                           ;adcc.c: 13: ADCON3 = 0x00;
 13066  1F75  0196               	clrf	22	;volatile
 13067                           
 13068                           ;adcc.c: 15: ADACT = 0x00;
 13069  1F76  0199               	clrf	25	;volatile
 13070                           
 13071                           ;adcc.c: 17: ADSTAT = 0x00;
 13072  1F77  0197               	clrf	23	;volatile
 13073                           
 13074                           ;adcc.c: 19: ADCLK = 0x0F;
 13075  1F78  300F               	movlw	15
 13076  1F79  0098               	movwf	24	;volatile
 13077                           
 13078                           ;adcc.c: 22: ADREF = 0x00;
 13079  1F7A  019A               	clrf	26	;volatile
 13080                           
 13081                           ;adcc.c: 24: ADCAP = 0x00;
 13082  1F7B  019B               	clrf	27	;volatile
 13083                           
 13084                           ;adcc.c: 26: ADPRE = 0x00;
 13085  1F7C  019C               	clrf	28	;volatile
 13086                           
 13087                           ;adcc.c: 28: ADACQ = 0x00;
 13088  1F7D  019D               	clrf	29	;volatile
 13089                           
 13090                           ;adcc.c: 30: ADPCH = 0x00;
 13091  1F7E  019E               	clrf	30	;volatile
 13092                           
 13093                           ;adcc.c: 32: ADRPT = 0x00;
 13094  1F7F  0022               	movlb	2	; select bank2
 13095  1F80  018D               	clrf	13	;volatile
 13096                           
 13097                           ;adcc.c: 34: ADLTHL = 0x00;
 13098  1F81  018E               	clrf	14	;volatile
 13099                           
 13100                           ;adcc.c: 36: ADLTHH = 0x00;
 13101  1F82  018F               	clrf	15	;volatile
 13102                           
 13103                           ;adcc.c: 38: ADUTHL = 0x00;
 13104  1F83  0190               	clrf	16	;volatile
 13105                           
 13106                           ;adcc.c: 40: ADUTHH = 0x00;
 13107  1F84  0191               	clrf	17	;volatile
 13108                           
 13109                           ;adcc.c: 42: ADSTPTL = 0x00;
 13110  1F85  0192               	clrf	18	;volatile
 13111                           
 13112                           ;adcc.c: 44: ADSTPTH = 0x00;
 13113  1F86  0193               	clrf	19	;volatile
 13114                           
 13115                           ;adcc.c: 47: ADCON0 = 0x84;
 13116  1F87  3084               	movlw	132
 13117  1F88  0021               	movlb	1	; select bank1
 13118  1F89  0093               	movwf	19	;volatile
 13119  1F8A  0008               	return
 13120  1F8B                     __end_of_ADCC_Initialize:	
 13121                           
 13122                           	psect	text36
 13123  0005                     __ptext36:	
 13124 ;; *************** function _PWM6_LoadDutyValue *****************
 13125 ;; Defined at:
 13126 ;;		line 15 in file "pwm6.c"
 13127 ;; Parameters:    Size  Location     Type
 13128 ;;  dutyValue       2    0[COMMON] unsigned int 
 13129 ;; Auto vars:     Size  Location     Type
 13130 ;;		None
 13131 ;; Return value:  Size  Location     Type
 13132 ;;                  1    wreg      void 
 13133 ;; Registers used:
 13134 ;;		wreg, status,2, status,0
 13135 ;; Tracked objects:
 13136 ;;		On entry : 0/0
 13137 ;;		On exit  : 0/0
 13138 ;;		Unchanged: 0/0
 13139 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13140 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13141 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13142 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13143 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13144 ;;Total ram usage:        4 bytes
 13145 ;; Hardware stack levels used:    1
 13146 ;; This function calls:
 13147 ;;		Nothing
 13148 ;; This function is called by:
 13149 ;;		_main
 13150 ;; This function uses a non-reentrant model
 13151 ;;
 13152                           
 13153                           
 13154                           ;psect for function _PWM6_LoadDutyValue
 13155  0005                     _PWM6_LoadDutyValue:	
 13156                           
 13157                           ;pwm6.c: 17: PWM6DCH = (dutyValue & 0x03FC)>>2;
 13158                           
 13159                           ;incstack = 0
 13160                           ; Regs used in _PWM6_LoadDutyValue: [wreg+status,2+status,0]
 13161  0005  0871               	movf	PWM6_LoadDutyValue@dutyValue+1,w
 13162  0006  00F3               	movwf	??_PWM6_LoadDutyValue+1
 13163  0007  0870               	movf	PWM6_LoadDutyValue@dutyValue,w
 13164  0008  00F2               	movwf	??_PWM6_LoadDutyValue
 13165  0009  36F3               	lsrf	??_PWM6_LoadDutyValue+1,f
 13166  000A  0CF2               	rrf	??_PWM6_LoadDutyValue,f
 13167  000B  36F3               	lsrf	??_PWM6_LoadDutyValue+1,f
 13168  000C  0CF2               	rrf	??_PWM6_LoadDutyValue,f
 13169  000D  0872               	movf	??_PWM6_LoadDutyValue,w
 13170  000E  0027               	movlb	7	; select bank7
 13171  000F  008D               	movwf	13	;volatile
 13172                           
 13173                           ;pwm6.c: 19: PWM6DCL = (dutyValue & 0x0003)<<6;
 13174  0010  0870               	movf	PWM6_LoadDutyValue@dutyValue,w
 13175  0011  3903               	andlw	3
 13176  0012  00F2               	movwf	??_PWM6_LoadDutyValue
 13177  0013  3005               	movlw	5
 13178  0014                     u4045:	
 13179  0014  35F2               	lslf	??_PWM6_LoadDutyValue,f
 13180  0015  3EFF               	addlw	-1
 13181  0016  1D03               	skipz
 13182  0017  2814               	goto	u4045
 13183  0018  3572               	lslf	??_PWM6_LoadDutyValue,w
 13184  0019  008C               	movwf	12	;volatile
 13185  001A  0008               	return
 13186  001B                     __end_of_PWM6_LoadDutyValue:	
 13187                           
 13188                           	psect	text37
 13189  1F8B                     __ptext37:	
 13190 ;; *************** function _LCD_Write_String *****************
 13191 ;; Defined at:
 13192 ;;		line 239 in file "lcd.c"
 13193 ;; Parameters:    Size  Location     Type
 13194 ;;  a               1    wreg     PTR unsigned char 
 13195 ;;		 -> main@s(8), 
 13196 ;; Auto vars:     Size  Location     Type
 13197 ;;  a               1    8[COMMON] PTR unsigned char 
 13198 ;;		 -> main@s(8), 
 13199 ;;  i               2    6[COMMON] int 
 13200 ;; Return value:  Size  Location     Type
 13201 ;;                  1    wreg      void 
 13202 ;; Registers used:
 13203 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13204 ;; Tracked objects:
 13205 ;;		On entry : 0/0
 13206 ;;		On exit  : 0/0
 13207 ;;		Unchanged: 0/0
 13208 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13209 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13210 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13211 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13212 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13213 ;;Total ram usage:        4 bytes
 13214 ;; Hardware stack levels used:    1
 13215 ;; Hardware stack levels required when called:    2
 13216 ;; This function calls:
 13217 ;;		_LCD_Write_Char
 13218 ;; This function is called by:
 13219 ;;		_main
 13220 ;; This function uses a non-reentrant model
 13221 ;;
 13222                           
 13223                           
 13224                           ;psect for function _LCD_Write_String
 13225  1F8B                     _LCD_Write_String:	
 13226                           
 13227                           ;incstack = 0
 13228                           ; Regs used in _LCD_Write_String: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13229                           ;LCD_Write_String@a stored from wreg
 13230  1F8B  00F8               	movwf	LCD_Write_String@a
 13231                           
 13232                           ;lcd.c: 241: int i;
 13233                           ;lcd.c: 242: for(i=0;a[i]!='\0';i++)
 13234  1F8C  01F6               	clrf	LCD_Write_String@i
 13235  1F8D  01F7               	clrf	LCD_Write_String@i+1
 13236  1F8E                     l3213:	
 13237  1F8E  0876               	movf	LCD_Write_String@i,w
 13238  1F8F  0778               	addwf	LCD_Write_String@a,w
 13239  1F90  00F5               	movwf	??_LCD_Write_String
 13240  1F91  0875               	movf	??_LCD_Write_String,w
 13241  1F92  0086               	movwf	6
 13242  1F93  0187               	clrf	7
 13243  1F94  0801               	movf	1,w
 13244  1F95  1903               	btfsc	3,2
 13245  1F96  0008               	return
 13246                           
 13247                           ;lcd.c: 243: LCD_Write_Char(a[i]);
 13248  1F97  0876               	movf	LCD_Write_String@i,w
 13249  1F98  0778               	addwf	LCD_Write_String@a,w
 13250  1F99  00F5               	movwf	??_LCD_Write_String
 13251  1F9A  0875               	movf	??_LCD_Write_String,w
 13252  1F9B  0086               	movwf	6
 13253  1F9C  0187               	clrf	7
 13254  1F9D  0801               	movf	1,w
 13255  1F9E  3190  2006  319F   	fcall	_LCD_Write_Char
 13256  1FA1  3001               	movlw	1
 13257  1FA2  07F6               	addwf	LCD_Write_String@i,f
 13258  1FA3  3000               	movlw	0
 13259  1FA4  3DF7               	addwfc	LCD_Write_String@i+1,f
 13260  1FA5  2F8E               	goto	l3213
 13261  1FA6                     __end_of_LCD_Write_String:	
 13262                           
 13263                           	psect	text38
 13264  1006                     __ptext38:	
 13265 ;; *************** function _LCD_Write_Char *****************
 13266 ;; Defined at:
 13267 ;;		line 223 in file "lcd.c"
 13268 ;; Parameters:    Size  Location     Type
 13269 ;;  a               1    wreg     unsigned char 
 13270 ;; Auto vars:     Size  Location     Type
 13271 ;;  a               1    4[COMMON] unsigned char 
 13272 ;;  y               1    3[COMMON] unsigned char 
 13273 ;;  temp            1    2[COMMON] unsigned char 
 13274 ;; Return value:  Size  Location     Type
 13275 ;;                  1    wreg      void 
 13276 ;; Registers used:
 13277 ;;		wreg, status,2, status,0, pclath, cstack
 13278 ;; Tracked objects:
 13279 ;;		On entry : 0/0
 13280 ;;		On exit  : 0/0
 13281 ;;		Unchanged: 0/0
 13282 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13283 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13284 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13285 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13286 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13287 ;;Total ram usage:        4 bytes
 13288 ;; Hardware stack levels used:    1
 13289 ;; Hardware stack levels required when called:    1
 13290 ;; This function calls:
 13291 ;;		_LCD_Port
 13292 ;; This function is called by:
 13293 ;;		_InitCustomChars
 13294 ;;		_LCD_Write_String
 13295 ;;		_main
 13296 ;;		_LCD_Write_Int
 13297 ;; This function uses a non-reentrant model
 13298 ;;
 13299                           
 13300                           
 13301                           ;psect for function _LCD_Write_Char
 13302  1006                     _LCD_Write_Char:	
 13303                           
 13304                           ;incstack = 0
 13305                           ; Regs used in _LCD_Write_Char: [wreg+status,2+status,0+pclath+cstack]
 13306                           ;LCD_Write_Char@a stored from wreg
 13307  1006  00F4               	movwf	LCD_Write_Char@a
 13308                           
 13309                           ;lcd.c: 225: char temp,y;
 13310                           ;lcd.c: 226: temp = a&0x0F;
 13311  1007  0874               	movf	LCD_Write_Char@a,w
 13312  1008  390F               	andlw	15
 13313  1009  00F1               	movwf	??_LCD_Write_Char
 13314  100A  0871               	movf	??_LCD_Write_Char,w
 13315  100B  00F2               	movwf	LCD_Write_Char@temp
 13316                           
 13317                           ;lcd.c: 227: y = a&0xF0;
 13318  100C  0874               	movf	LCD_Write_Char@a,w
 13319  100D  39F0               	andlw	240
 13320  100E  00F1               	movwf	??_LCD_Write_Char
 13321  100F  0871               	movf	??_LCD_Write_Char,w
 13322  1010  00F3               	movwf	LCD_Write_Char@y
 13323                           
 13324                           ;lcd.c: 228: RB0 = 1;
 13325  1011  0020               	movlb	0	; select bank0
 13326  1012  140D               	bsf	13,0	;volatile
 13327                           
 13328                           ;lcd.c: 229: LCD_Port(y>>4);
 13329  1013  0873               	movf	LCD_Write_Char@y,w
 13330  1014  00F1               	movwf	??_LCD_Write_Char
 13331  1015  3004               	movlw	4
 13332  1016                     u2645:	
 13333  1016  36F1               	lsrf	??_LCD_Write_Char,f
 13334  1017  0B89               	decfsz	9,f
 13335  1018  2816               	goto	u2645
 13336  1019  0871               	movf	??_LCD_Write_Char,w
 13337  101A  319F  2742  3190   	fcall	_LCD_Port
 13338                           
 13339                           ;lcd.c: 230: RB1 = 1;
 13340  101D  0020               	movlb	0	; select bank0
 13341  101E  148D               	bsf	13,1	;volatile
 13342                           
 13343                           ;lcd.c: 231: RB1 = 0;
 13344  101F  108D               	bcf	13,1	;volatile
 13345                           
 13346                           ;lcd.c: 232: _delay((unsigned long)((40)*(250000/4000000.0)));
 13347  1020  3200               	nop2	;2 cycle nop
 13348                           
 13349                           ;lcd.c: 233: LCD_Port(temp);
 13350  1021  0872               	movf	LCD_Write_Char@temp,w
 13351  1022  319F  2742         	fcall	_LCD_Port
 13352                           
 13353                           ;lcd.c: 234: RB1 = 1;
 13354  1024  0020               	movlb	0	; select bank0
 13355  1025  148D               	bsf	13,1	;volatile
 13356                           
 13357                           ;lcd.c: 235: RB1 = 0;
 13358  1026  108D               	bcf	13,1	;volatile
 13359                           
 13360                           ;lcd.c: 236: _delay((unsigned long)((40)*(250000/4000000.0)));
 13361  1027  3200               	nop2	;2 cycle nop
 13362  1028  0008               	return
 13363  1029                     __end_of_LCD_Write_Char:	
 13364                           
 13365                           	psect	text39
 13366  1378                     __ptext39:	
 13367 ;; *************** function _LCD_Set_Cursor *****************
 13368 ;; Defined at:
 13369 ;;		line 82 in file "lcd.c"
 13370 ;; Parameters:    Size  Location     Type
 13371 ;;  x               1    wreg     unsigned char 
 13372 ;;  y               1    3[COMMON] unsigned char 
 13373 ;; Auto vars:     Size  Location     Type
 13374 ;;  x               1    6[COMMON] unsigned char 
 13375 ;;  temp            1    9[COMMON] unsigned char 
 13376 ;;  w               1    8[COMMON] unsigned char 
 13377 ;;  z               1    7[COMMON] unsigned char 
 13378 ;; Return value:  Size  Location     Type
 13379 ;;                  1    wreg      void 
 13380 ;; Registers used:
 13381 ;;		wreg, status,2, status,0, pclath, cstack
 13382 ;; Tracked objects:
 13383 ;;		On entry : 0/0
 13384 ;;		On exit  : 0/0
 13385 ;;		Unchanged: 0/0
 13386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13387 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13388 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13389 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13390 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13391 ;;Total ram usage:        7 bytes
 13392 ;; Hardware stack levels used:    1
 13393 ;; Hardware stack levels required when called:    2
 13394 ;; This function calls:
 13395 ;;		_LCD_Cmd
 13396 ;; This function is called by:
 13397 ;;		_main
 13398 ;; This function uses a non-reentrant model
 13399 ;;
 13400                           
 13401                           
 13402                           ;psect for function _LCD_Set_Cursor
 13403  1378                     _LCD_Set_Cursor:	
 13404                           
 13405                           ;incstack = 0
 13406                           ; Regs used in _LCD_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
 13407                           ;LCD_Set_Cursor@x stored from wreg
 13408  1378  00F6               	movwf	LCD_Set_Cursor@x
 13409                           
 13410                           ;lcd.c: 109: char temp,z,w;
 13411                           ;lcd.c: 111: if(x == 0)
 13412  1379  0876               	movf	LCD_Set_Cursor@x,w
 13413  137A  1D03               	btfss	3,2
 13414  137B  2B98               	goto	l3177
 13415                           
 13416                           ;lcd.c: 112: {
 13417                           ;lcd.c: 113: temp = 0x80 + y;
 13418  137C  0873               	movf	LCD_Set_Cursor@y,w
 13419  137D  3E80               	addlw	128
 13420  137E  00F4               	movwf	??_LCD_Set_Cursor
 13421  137F  0874               	movf	??_LCD_Set_Cursor,w
 13422  1380  00F9               	movwf	LCD_Set_Cursor@temp
 13423                           
 13424                           ;lcd.c: 115: z = temp>>4;
 13425  1381  0879               	movf	LCD_Set_Cursor@temp,w
 13426  1382  00F4               	movwf	??_LCD_Set_Cursor
 13427  1383  3004               	movlw	4
 13428  1384                     u3955:	
 13429  1384  36F4               	lsrf	??_LCD_Set_Cursor,f
 13430  1385  0B89               	decfsz	9,f
 13431  1386  2B84               	goto	u3955
 13432  1387  0874               	movf	??_LCD_Set_Cursor,w
 13433  1388  00F5               	movwf	??_LCD_Set_Cursor+1
 13434  1389  0875               	movf	??_LCD_Set_Cursor+1,w
 13435  138A  00F7               	movwf	LCD_Set_Cursor@z
 13436                           
 13437                           ;lcd.c: 116: w = temp & 0x0F;
 13438  138B  0879               	movf	LCD_Set_Cursor@temp,w
 13439  138C  390F               	andlw	15
 13440  138D  00F4               	movwf	??_LCD_Set_Cursor
 13441  138E  0874               	movf	??_LCD_Set_Cursor,w
 13442  138F  00F8               	movwf	LCD_Set_Cursor@w
 13443                           
 13444                           ;lcd.c: 117: LCD_Cmd(z);
 13445  1390  0877               	movf	LCD_Set_Cursor@z,w
 13446  1391  319F  2711  3193   	fcall	_LCD_Cmd
 13447                           
 13448                           ;lcd.c: 118: LCD_Cmd(w);
 13449  1394  0878               	movf	LCD_Set_Cursor@w,w
 13450  1395  319F  2711         	fcall	_LCD_Cmd
 13451                           
 13452                           ;lcd.c: 119: }
 13453  1397  0008               	return
 13454  1398                     l3177:	
 13455                           
 13456                           ;lcd.c: 121: else if(x == 1)
 13457  1398  0376               	decf	LCD_Set_Cursor@x,w
 13458  1399  1D03               	btfss	3,2
 13459  139A  2BB7               	goto	l3187
 13460                           
 13461                           ;lcd.c: 122: {
 13462                           ;lcd.c: 123: temp = 0xC0 + y;
 13463  139B  0873               	movf	LCD_Set_Cursor@y,w
 13464  139C  3EC0               	addlw	192
 13465  139D  00F4               	movwf	??_LCD_Set_Cursor
 13466  139E  0874               	movf	??_LCD_Set_Cursor,w
 13467  139F  00F9               	movwf	LCD_Set_Cursor@temp
 13468                           
 13469                           ;lcd.c: 125: z = temp>>4;
 13470  13A0  0879               	movf	LCD_Set_Cursor@temp,w
 13471  13A1  00F4               	movwf	??_LCD_Set_Cursor
 13472  13A2  3004               	movlw	4
 13473  13A3                     u3975:	
 13474  13A3  36F4               	lsrf	??_LCD_Set_Cursor,f
 13475  13A4  0B89               	decfsz	9,f
 13476  13A5  2BA3               	goto	u3975
 13477  13A6  0874               	movf	??_LCD_Set_Cursor,w
 13478  13A7  00F5               	movwf	??_LCD_Set_Cursor+1
 13479  13A8  0875               	movf	??_LCD_Set_Cursor+1,w
 13480  13A9  00F7               	movwf	LCD_Set_Cursor@z
 13481                           
 13482                           ;lcd.c: 126: w = temp & 0x0F;
 13483  13AA  0879               	movf	LCD_Set_Cursor@temp,w
 13484  13AB  390F               	andlw	15
 13485  13AC  00F4               	movwf	??_LCD_Set_Cursor
 13486  13AD  0874               	movf	??_LCD_Set_Cursor,w
 13487  13AE  00F8               	movwf	LCD_Set_Cursor@w
 13488                           
 13489                           ;lcd.c: 127: LCD_Cmd(z);
 13490  13AF  0877               	movf	LCD_Set_Cursor@z,w
 13491  13B0  319F  2711  3193   	fcall	_LCD_Cmd
 13492                           
 13493                           ;lcd.c: 128: LCD_Cmd(w);
 13494  13B3  0878               	movf	LCD_Set_Cursor@w,w
 13495  13B4  319F  2711         	fcall	_LCD_Cmd
 13496                           
 13497                           ;lcd.c: 129: }
 13498  13B6  0008               	return
 13499  13B7                     l3187:	
 13500                           
 13501                           ;lcd.c: 132: else if(x == 2)
 13502  13B7  3002               	movlw	2
 13503  13B8  0676               	xorwf	LCD_Set_Cursor@x,w
 13504  13B9  1D03               	btfss	3,2
 13505  13BA  2BD7               	goto	l3197
 13506                           
 13507                           ;lcd.c: 133: {
 13508                           ;lcd.c: 134: temp = 0x94 + y;
 13509  13BB  0873               	movf	LCD_Set_Cursor@y,w
 13510  13BC  3E94               	addlw	148
 13511  13BD  00F4               	movwf	??_LCD_Set_Cursor
 13512  13BE  0874               	movf	??_LCD_Set_Cursor,w
 13513  13BF  00F9               	movwf	LCD_Set_Cursor@temp
 13514                           
 13515                           ;lcd.c: 136: z = temp>>4;
 13516  13C0  0879               	movf	LCD_Set_Cursor@temp,w
 13517  13C1  00F4               	movwf	??_LCD_Set_Cursor
 13518  13C2  3004               	movlw	4
 13519  13C3                     u3995:	
 13520  13C3  36F4               	lsrf	??_LCD_Set_Cursor,f
 13521  13C4  0B89               	decfsz	9,f
 13522  13C5  2BC3               	goto	u3995
 13523  13C6  0874               	movf	??_LCD_Set_Cursor,w
 13524  13C7  00F5               	movwf	??_LCD_Set_Cursor+1
 13525  13C8  0875               	movf	??_LCD_Set_Cursor+1,w
 13526  13C9  00F7               	movwf	LCD_Set_Cursor@z
 13527                           
 13528                           ;lcd.c: 137: w = temp & 0x0F;
 13529  13CA  0879               	movf	LCD_Set_Cursor@temp,w
 13530  13CB  390F               	andlw	15
 13531  13CC  00F4               	movwf	??_LCD_Set_Cursor
 13532  13CD  0874               	movf	??_LCD_Set_Cursor,w
 13533  13CE  00F8               	movwf	LCD_Set_Cursor@w
 13534                           
 13535                           ;lcd.c: 138: LCD_Cmd(z);
 13536  13CF  0877               	movf	LCD_Set_Cursor@z,w
 13537  13D0  319F  2711  3193   	fcall	_LCD_Cmd
 13538                           
 13539                           ;lcd.c: 139: LCD_Cmd(w);
 13540  13D3  0878               	movf	LCD_Set_Cursor@w,w
 13541  13D4  319F  2711         	fcall	_LCD_Cmd
 13542                           
 13543                           ;lcd.c: 140: }
 13544  13D6  0008               	return
 13545  13D7                     l3197:	
 13546                           
 13547                           ;lcd.c: 142: else if(x == 3)
 13548  13D7  3003               	movlw	3
 13549  13D8  0676               	xorwf	LCD_Set_Cursor@x,w
 13550  13D9  1D03               	btfss	3,2
 13551  13DA  0008               	return
 13552                           
 13553                           ;lcd.c: 143: {
 13554                           ;lcd.c: 144: temp = 0xD4 + y;
 13555  13DB  0873               	movf	LCD_Set_Cursor@y,w
 13556  13DC  3ED4               	addlw	212
 13557  13DD  00F4               	movwf	??_LCD_Set_Cursor
 13558  13DE  0874               	movf	??_LCD_Set_Cursor,w
 13559  13DF  00F9               	movwf	LCD_Set_Cursor@temp
 13560                           
 13561                           ;lcd.c: 146: z = temp>>4;
 13562  13E0  0879               	movf	LCD_Set_Cursor@temp,w
 13563  13E1  00F4               	movwf	??_LCD_Set_Cursor
 13564  13E2  3004               	movlw	4
 13565  13E3                     u4015:	
 13566  13E3  36F4               	lsrf	??_LCD_Set_Cursor,f
 13567  13E4  0B89               	decfsz	9,f
 13568  13E5  2BE3               	goto	u4015
 13569  13E6  0874               	movf	??_LCD_Set_Cursor,w
 13570  13E7  00F5               	movwf	??_LCD_Set_Cursor+1
 13571  13E8  0875               	movf	??_LCD_Set_Cursor+1,w
 13572  13E9  00F7               	movwf	LCD_Set_Cursor@z
 13573                           
 13574                           ;lcd.c: 147: w = temp & 0x0F;
 13575  13EA  0879               	movf	LCD_Set_Cursor@temp,w
 13576  13EB  390F               	andlw	15
 13577  13EC  00F4               	movwf	??_LCD_Set_Cursor
 13578  13ED  0874               	movf	??_LCD_Set_Cursor,w
 13579  13EE  00F8               	movwf	LCD_Set_Cursor@w
 13580                           
 13581                           ;lcd.c: 148: LCD_Cmd(z);
 13582  13EF  0877               	movf	LCD_Set_Cursor@z,w
 13583  13F0  319F  2711  3193   	fcall	_LCD_Cmd
 13584                           
 13585                           ;lcd.c: 149: LCD_Cmd(w);
 13586  13F3  0878               	movf	LCD_Set_Cursor@w,w
 13587  13F4  319F  2711         	fcall	_LCD_Cmd
 13588  13F6  0008               	return
 13589  13F7                     __end_of_LCD_Set_Cursor:	
 13590                           
 13591                           	psect	text40
 13592  1F11                     __ptext40:	
 13593 ;; *************** function _LCD_Cmd *****************
 13594 ;; Defined at:
 13595 ;;		line 65 in file "lcd.c"
 13596 ;; Parameters:    Size  Location     Type
 13597 ;;  a               1    wreg     unsigned char 
 13598 ;; Auto vars:     Size  Location     Type
 13599 ;;  a               1    2[COMMON] unsigned char 
 13600 ;; Return value:  Size  Location     Type
 13601 ;;                  1    wreg      void 
 13602 ;; Registers used:
 13603 ;;		wreg, status,2, status,0, pclath, cstack
 13604 ;; Tracked objects:
 13605 ;;		On entry : 0/0
 13606 ;;		On exit  : 0/0
 13607 ;;		Unchanged: 0/0
 13608 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13609 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13610 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13611 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13612 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13613 ;;Total ram usage:        2 bytes
 13614 ;; Hardware stack levels used:    1
 13615 ;; Hardware stack levels required when called:    1
 13616 ;; This function calls:
 13617 ;;		_LCD_Port
 13618 ;; This function is called by:
 13619 ;;		_InitCustomChars
 13620 ;;		_LCD_Clear
 13621 ;;		_LCD_Set_Cursor
 13622 ;;		_LCD_Init
 13623 ;; This function uses a non-reentrant model
 13624 ;;
 13625                           
 13626                           
 13627                           ;psect for function _LCD_Cmd
 13628  1F11                     _LCD_Cmd:	
 13629                           
 13630                           ;incstack = 0
 13631                           ; Regs used in _LCD_Cmd: [wreg+status,2+status,0+pclath+cstack]
 13632                           ;LCD_Cmd@a stored from wreg
 13633  1F11  00F2               	movwf	LCD_Cmd@a
 13634                           
 13635                           ;lcd.c: 67: RB0 = 0;
 13636  1F12  0020               	movlb	0	; select bank0
 13637  1F13  100D               	bcf	13,0	;volatile
 13638                           
 13639                           ;lcd.c: 68: LCD_Port(a);
 13640  1F14  0872               	movf	LCD_Cmd@a,w
 13641  1F15  319F  2742  319F   	fcall	_LCD_Port
 13642                           
 13643                           ;lcd.c: 69: RB1 = 1;
 13644  1F18  0020               	movlb	0	; select bank0
 13645  1F19  148D               	bsf	13,1	;volatile
 13646                           
 13647                           ;lcd.c: 70: RB1 = 0;
 13648  1F1A  108D               	bcf	13,1	;volatile
 13649                           
 13650                           ;lcd.c: 71: _delay((unsigned long)((4)*(250000/4000.0)));
 13651  1F1B  3053               	movlw	83
 13652  1F1C  00F1               	movwf	??_LCD_Cmd
 13653  1F1D                     u5087:	
 13654  1F1D  0BF1               	decfsz	??_LCD_Cmd,f
 13655  1F1E  2F1D               	goto	u5087
 13656  1F1F  0008               	return
 13657  1F20                     __end_of_LCD_Cmd:	
 13658                           
 13659                           	psect	text41
 13660  1F42                     __ptext41:	
 13661 ;; *************** function _LCD_Port *****************
 13662 ;; Defined at:
 13663 ;;		line 41 in file "lcd.c"
 13664 ;; Parameters:    Size  Location     Type
 13665 ;;  a               1    wreg     unsigned char 
 13666 ;; Auto vars:     Size  Location     Type
 13667 ;;  a               1    0[COMMON] unsigned char 
 13668 ;; Return value:  Size  Location     Type
 13669 ;;                  1    wreg      void 
 13670 ;; Registers used:
 13671 ;;		wreg
 13672 ;; Tracked objects:
 13673 ;;		On entry : 0/0
 13674 ;;		On exit  : 0/0
 13675 ;;		Unchanged: 0/0
 13676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13677 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13678 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13679 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13680 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13681 ;;Total ram usage:        1 bytes
 13682 ;; Hardware stack levels used:    1
 13683 ;; This function calls:
 13684 ;;		Nothing
 13685 ;; This function is called by:
 13686 ;;		_LCD_Cmd
 13687 ;;		_LCD_Init
 13688 ;;		_LCD_Write_Char
 13689 ;; This function uses a non-reentrant model
 13690 ;;
 13691                           
 13692                           
 13693                           ;psect for function _LCD_Port
 13694  1F42                     _LCD_Port:	
 13695                           
 13696                           ;incstack = 0
 13697                           ; Regs used in _LCD_Port: [wreg]
 13698                           ;LCD_Port@a stored from wreg
 13699  1F42  00F0               	movwf	LCD_Port@a
 13700                           
 13701                           ;lcd.c: 43: if(a & 1)
 13702  1F43  1C70               	btfss	LCD_Port@a,0
 13703  1F44  2F48               	goto	l28
 13704                           
 13705                           ;lcd.c: 44: RB2 = 1;
 13706  1F45  0020               	movlb	0	; select bank0
 13707  1F46  150D               	bsf	13,2	;volatile
 13708  1F47  2F4A               	goto	l2393
 13709  1F48                     l28:	
 13710                           
 13711                           ;lcd.c: 45: else
 13712                           ;lcd.c: 46: RB2 = 0;
 13713  1F48  0020               	movlb	0	; select bank0
 13714  1F49  110D               	bcf	13,2	;volatile
 13715  1F4A                     l2393:	
 13716                           
 13717                           ;lcd.c: 48: if(a & 2)
 13718  1F4A  1CF0               	btfss	LCD_Port@a,1
 13719  1F4B  2F4E               	goto	l30
 13720                           
 13721                           ;lcd.c: 49: RB3 = 1;
 13722  1F4C  158D               	bsf	13,3	;volatile
 13723  1F4D  2F4F               	goto	l2397
 13724  1F4E                     l30:	
 13725                           
 13726                           ;lcd.c: 50: else
 13727                           ;lcd.c: 51: RB3 = 0;
 13728  1F4E  118D               	bcf	13,3	;volatile
 13729  1F4F                     l2397:	
 13730                           
 13731                           ;lcd.c: 53: if(a & 4)
 13732  1F4F  1D70               	btfss	LCD_Port@a,2
 13733  1F50  2F53               	goto	l32
 13734                           
 13735                           ;lcd.c: 54: RB4 = 1;
 13736  1F51  160D               	bsf	13,4	;volatile
 13737  1F52  2F54               	goto	l2401
 13738  1F53                     l32:	
 13739                           
 13740                           ;lcd.c: 55: else
 13741                           ;lcd.c: 56: RB4 = 0;
 13742  1F53  120D               	bcf	13,4	;volatile
 13743  1F54                     l2401:	
 13744                           
 13745                           ;lcd.c: 58: if(a & 8)
 13746  1F54  1DF0               	btfss	LCD_Port@a,3
 13747  1F55  2F58               	goto	l34
 13748                           
 13749                           ;lcd.c: 59: RB5 = 1;
 13750  1F56  168D               	bsf	13,5	;volatile
 13751  1F57  0008               	return
 13752  1F58                     l34:	
 13753                           
 13754                           ;lcd.c: 60: else
 13755                           ;lcd.c: 61: RB5 = 0;
 13756  1F58  128D               	bcf	13,5	;volatile
 13757  1F59  0008               	return
 13758  1F5A                     __end_of_LCD_Port:	
 13759                           
 13760                           	psect	text42
 13761  1EF5                     __ptext42:	
 13762 ;; *************** function _ADCC_GetSingleConversion *****************
 13763 ;; Defined at:
 13764 ;;		line 53 in file "adcc.c"
 13765 ;; Parameters:    Size  Location     Type
 13766 ;;  channel         1    wreg     enum E13559
 13767 ;; Auto vars:     Size  Location     Type
 13768 ;;  channel         1    3[COMMON] enum E13559
 13769 ;; Return value:  Size  Location     Type
 13770 ;;                  2    0[COMMON] unsigned int 
 13771 ;; Registers used:
 13772 ;;		wreg
 13773 ;; Tracked objects:
 13774 ;;		On entry : 0/0
 13775 ;;		On exit  : 0/0
 13776 ;;		Unchanged: 0/0
 13777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13778 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13779 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13780 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13781 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13782 ;;Total ram usage:        4 bytes
 13783 ;; Hardware stack levels used:    1
 13784 ;; This function calls:
 13785 ;;		Nothing
 13786 ;; This function is called by:
 13787 ;;		_main
 13788 ;; This function uses a non-reentrant model
 13789 ;;
 13790                           
 13791                           
 13792                           ;psect for function _ADCC_GetSingleConversion
 13793  1EF5                     _ADCC_GetSingleConversion:	
 13794                           
 13795                           ;incstack = 0
 13796                           ; Regs used in _ADCC_GetSingleConversion: [wreg]
 13797                           ;ADCC_GetSingleConversion@channel stored from wreg
 13798  1EF5  00F3               	movwf	ADCC_GetSingleConversion@channel
 13799                           
 13800                           ;adcc.c: 56: ADPCH = channel;
 13801  1EF6  0873               	movf	ADCC_GetSingleConversion@channel,w
 13802  1EF7  0021               	movlb	1	; select bank1
 13803  1EF8  009E               	movwf	30	;volatile
 13804                           
 13805                           ;adcc.c: 59: ADCON0bits.ADON = 1;
 13806  1EF9  1793               	bsf	19,7	;volatile
 13807                           
 13808                           ;adcc.c: 62: ADCON0bits.ADCONT = 0;
 13809  1EFA  1313               	bcf	19,6	;volatile
 13810                           
 13811                           ;adcc.c: 65: ADCON0bits.ADGO = 1;
 13812  1EFB  1413               	bsf	19,0	;volatile
 13813  1EFC                     l229:	
 13814                           ;adcc.c: 69: {
 13815                           
 13816                           ;adcc.c: 68: while (ADCON0bits.ADGO)
 13817                           
 13818  1EFC  1813               	btfsc	19,0	;volatile
 13819  1EFD  2EFC               	goto	l229
 13820                           
 13821                           ;adcc.c: 70: }
 13822                           ;adcc.c: 73: return ((ADRESH << 8) + ADRESL);
 13823  1EFE  080D               	movf	13,w	;volatile
 13824  1EFF  00F1               	movwf	?_ADCC_GetSingleConversion+1
 13825  1F00  080C               	movf	12,w	;volatile
 13826  1F01  00F0               	movwf	?_ADCC_GetSingleConversion
 13827  1F02  0008               	return
 13828  1F03                     __end_of_ADCC_GetSingleConversion:	
 13829  007E                     btemp	set	126	;btemp
 13830  007E                     wtemp	set	126
 13831  007E                     wtemp0	set	126
 13832  0080                     wtemp1	set	128
 13833  0082                     wtemp2	set	130
 13834  0084                     wtemp3	set	132
 13835  0086                     wtemp4	set	134
 13836  0088                     wtemp5	set	136
 13837  007F                     wtemp6	set	127
 13838  007E                     ttemp	set	126
 13839  007E                     ttemp0	set	126
 13840  0081                     ttemp1	set	129
 13841  0084                     ttemp2	set	132
 13842  0087                     ttemp3	set	135
 13843  007F                     ttemp4	set	127
 13844  007E                     ltemp	set	126
 13845  007E                     ltemp0	set	126
 13846  0082                     ltemp1	set	130
 13847  0086                     ltemp2	set	134
 13848  0080                     ltemp3	set	128


Data Sizes:
    Strings     11
    Constant    145
    Data        24
    BSS         9
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     71      78
    BANK1            80     72      74
    BANK2            80      0      24
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           28      0       0
    BANK12            0      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> log@exponent(BANK0[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 27
		 -> log@coeff(CODE[27]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_2(CODE[5]), STR_1(CODE[6]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 8
		 -> main@s(BANK1[8]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    LCD_Write_String@a	PTR unsigned char  size(1) Largest target is 8
		 -> main@s(BANK1[8]), 


Critical Paths under _main in COMMON

    _sprintf->___lldiv
    _sprintf->___lltoft
    _sprintf->___wmul
    _sprintf->__div_to_l_
    _scale->___wmul
    _fround->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___ftsub->___lltoft
    _log->___awtoft
    _eval_poly->___wmul
    ___wmul->___awdiv
    ___ftmul->___awtoft
    ___ftmul->___wmul
    ___ftadd->___awtoft
    ___ftadd->___wmul
    ___awtoft->___ftpack
    ___lwtoft->___ftpack
    ___ftdiv->___lwtoft
    _SYSTEM_Initialize->_InitCustomChars
    _LCD_Init->_LCD_Cmd
    _LCD_Clear->_LCD_Cmd
    _InitCustomChars->_LCD_Write_Char
    _LCD_Write_String->_LCD_Write_Char
    _LCD_Write_Char->_LCD_Port
    _LCD_Set_Cursor->_LCD_Cmd
    _LCD_Cmd->_LCD_Port

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___ftge
    _scale->___ftmul
    _fround->___ftmul
    ___fttol->_scale
    ___ftsub->___ftadd
    _log->_eval_poly
    _eval_poly->___ftadd
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___ftadd->_fround
    ___ftge->___ftadd

Critical Paths under _main in BANK1

    _main->_sprintf

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                47    47      0   81008
                                             25 BANK1     47    47      0
           _ADCC_GetSingleConversion
                     _LCD_Set_Cursor
                     _LCD_Write_Char
                   _LCD_Write_String
                 _PWM6_LoadDutyValue
                  _SYSTEM_Initialize
                            ___aldiv
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftneg
                            ___ftsub
                           ___lwtoft
                                _log
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             41    36      5   43192
                                             60 BANK0     11     6      5
                                              0 BANK1     25    25      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               12     9      3    9834
                                             24 BANK0      9     6      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              17    14      3    9636
                                             24 BANK0     14    11      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4    1356
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4    1466
                                              7 COMMON     5     1      4
                                              0 BANK0      4     4      0
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         16    10      6     409
                                              0 COMMON    10     4      6
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          20    14      6     552
                                              0 COMMON    14     8      6
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             6     2      4    1907
                                              8 COMMON     6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                             10     2      8     583
                                              0 BANK0     10     2      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     480
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             14    10      4     411
                                             33 BANK0     14    10      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    3752
                                             51 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     191
                                              0 COMMON     3     0      3
 ---------------------------------------------------------------------------------
 (1) _log                                                  6     3      3   21380
                                             61 BANK0      6     3      3
                           ___awtoft
                            ___ftadd
                             ___ftge
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (2) _frexp                                                6     2      4     330
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) _eval_poly                                           10     3      7   10333
                                             51 BANK0     10     3      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2530
                                             12 COMMON     2     2      0
                                              4 BANK0      4     0      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             16    10      6    3993
                                              8 BANK0     16    10      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             13     7      6    3473
                                             38 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___wmul (ARG)
                              _frexp (ARG)
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6    1064
                                             51 BANK0      9     3      6
                            ___ftadd (ARG)
                            ___ftneg (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             6     3      3    1929
                                              8 COMMON     6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___lwtoft                                             4     1      3    2019
                                              8 COMMON     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             16    10      6    2595
                                              0 BANK0     16    10      6
                           ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    1785
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (1) ___aldiv                                             15     7      8     406
                                              0 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    2     2      0     709
                                              7 COMMON     2     2      0
                    _ADCC_Initialize
                    _InitCustomChars
                          _LCD_Clear
                           _LCD_Init
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _PWM6_Initialize
                    _TMR2_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM6_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               1     1      0      23
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LCD_Init                                             3     3      0     220
                                              3 COMMON     3     3      0
                            _LCD_Cmd
                           _LCD_Port
 ---------------------------------------------------------------------------------
 (2) _LCD_Clear                                            0     0      0     110
                            _LCD_Cmd
 ---------------------------------------------------------------------------------
 (2) _InitCustomChars                                      2     2      0     356
                                              5 COMMON     2     2      0
                            _LCD_Cmd
                     _LCD_Write_Char
 ---------------------------------------------------------------------------------
 (2) _ADCC_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM6_LoadDutyValue                                   4     2      2      97
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _LCD_Write_String                                     4     4      0     322
                                              5 COMMON     4     4      0
                     _LCD_Write_Char
 ---------------------------------------------------------------------------------
 (3) _LCD_Write_Char                                       4     4      0     178
                                              1 COMMON     4     4      0
                           _LCD_Port
 ---------------------------------------------------------------------------------
 (1) _LCD_Set_Cursor                                       7     6      1     756
                                              3 COMMON     7     6      1
                            _LCD_Cmd
 ---------------------------------------------------------------------------------
 (3) _LCD_Cmd                                              2     2      0     110
                                              1 COMMON     2     2      0
                           _LCD_Port
 ---------------------------------------------------------------------------------
 (3) _LCD_Port                                             1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADCC_GetSingleConversion                             4     1      3      22
                                              0 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCC_GetSingleConversion
   _LCD_Set_Cursor
     _LCD_Cmd
       _LCD_Port
   _LCD_Write_Char
     _LCD_Port
   _LCD_Write_String
     _LCD_Write_Char
       _LCD_Port
   _PWM6_LoadDutyValue
   _SYSTEM_Initialize
     _ADCC_Initialize
     _InitCustomChars
       _LCD_Cmd
         _LCD_Port
       _LCD_Write_Char
         _LCD_Port
     _LCD_Clear
       _LCD_Cmd
         _LCD_Port
     _LCD_Init
       _LCD_Cmd
         _LCD_Port
       _LCD_Port
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM6_Initialize
     _TMR2_Initialize
   ___aldiv
   ___ftadd
     ___awtoft (ARG)
       ___ftpack
     ___ftdiv (ARG)
       ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
     ___ftneg (ARG)
     ___ftpack (ARG)
     ___lwtoft (ARG)
       ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     _frexp (ARG)
     _fround (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   ___ftdiv
     ___ftpack
     ___ftpack (ARG)
     ___lwtoft (ARG)
       ___ftpack
   ___ftge
     ___ftadd (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftneg (ARG)
     ___lwtoft (ARG)
       ___ftpack
   ___ftneg
   ___ftsub
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lltoft (ARG)
       ___ftpack
   ___lwtoft
     ___ftpack
   _log
     ___awtoft
       ___ftpack
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftneg (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
     _eval_poly
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _frexp
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftneg (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     47      4E       5       97.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     48      4A       7       92.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      18       9       30.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      BE      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              1C      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      BE      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Thu Sep 07 00:20:45 2017

                      __CFG_CP$OFF 0000                                 l30 1F4E  
                               l32 1F53                                 l34 1F58  
                               l28 1F48                       ___awdiv@sign 0021  
              ___wmul@multiplicand 0026        __size_of_PWM6_LoadDutyValue 0016  
                     ___ftadd@exp1 0052                       ___ftadd@exp2 0051  
                      __CFG_LVP$ON 0000                       ___ftadd@sign 0050  
                              l229 1EFC                                l342 02D3  
                              l334 019D                                l281 0FFE  
                              l273 0DD9                                l274 0DE5  
                              l541 1408                                l721 004C  
                              l731 00C5                                l652 094C  
                              l388 06FC                                l486 1FAF  
                              l671 12EC                                l672 12F4  
                              l664 12D9                                l772 14E6  
                              l695 17A9                                _GIE 005F  
                              _RB0 0068                                _RB1 0069  
                              _RB2 006A                                _RB3 006B  
                              _RB4 006C                                _RB5 006D  
                     __CFG_CPD$OFF 0000                                _log 15A9  
                     ___awmod@sign 0076                    _TMR2_Initialize 1F20  
                     __CFG_BORV$LO 0000                                wreg 0009  
                  __end_of_LCD_Cmd 1F20                       __CFG_ZCD$OFF 0000  
                     ___ftdiv@cntr 002A                     _LCD_Set_Cursor 1378  
                     ___ftdiv@sign 002F                               l3001 1FEA  
                             l3013 110C                               l3103 11EC  
                             l2401 1F54                               l3009 10F6  
                             l3113 1124                               l3115 1132  
                             l3123 1155                               l3131 1053  
                             l3213 1F8E                               l2413 12B6  
                             l3037 1FCA                               l3133 1063  
                             l2423 12DE                               l2415 12C0  
                             l3047 1492                               l3119 114A  
                             l2425 12E6                               l2417 12C5  
                             l2409 12AF                               l2601 1784  
                             l3145 0812                               l3073 14DD  
                             l3065 14C2                               l2521 1242  
                             l2513 1231                               l2505 1213  
                             l3401 0417                               l2611 17A5  
                             l2603 1788                               l3163 12A0  
                             l3075 14E9                               l3067 14D0  
                             l3091 11C1                               l2507 121F  
                             l3323 01CF                               l3315 019F  
                             l3307 0160                               l2517 123A  
                             l2533 1168                               l3405 0440  
                             l3333 0209                               l3317 01BB  
                             l3309 0198                               l2615 17BB  
                             l3263 15D8                               l3079 14F7  
                             l2551 118D                               l3431 048D  
                             l3415 0452                               l2393 1F4A  
                             l3177 1398                               l2609 179B  
                             l3257 15C7                               l3089 11B3  
                             l2545 1175                               l2537 116F  
                             l3505 06C2                               l3433 04F1  
                             l3417 0471                               l3281 0101  
                             l3187 13B7                               l3611 152D  
                             l2619 17CD                               l3099 11E1  
                             l2547 1181                               l2555 1196  
                             l3531 0757                               l3523 072C  
                             l3371 033F                               l3363 0308  
                             l2397 1F4F                               l3197 13D7  
                             l3605 1517                               l2629 17E8  
                             l2573 1739                               l2661 16C6  
                             l2645 1683                               l2469 1FA8  
                             l3533 075B                               l3525 072F  
                             l3517 0713                               l3509 06E0  
                             l3453 0547                               l3445 0521  
                             l3357 02B7                               l3349 0265  
                             l2591 1762                               l2639 166D  
                             l2495 120B                               l2559 119E  
                             l2831 0A90                               l2823 0A18  
                             l3551 078D                               l3439 0504  
                             l3375 0358                               l3287 0113  
                             l3295 014D                               l3633 1587  
                             l3625 156E                               l2569 1732  
                             l2673 16E2                               l2657 16BE  
                             l2489 1200                               l3529 0754  
                             l3385 038C                               l3553 00D9  
                             l3713 0D1D                               l2691 1036  
                             l2579 1748                               l2915 0087  
                             l2907 006D                               l3539 0772  
                             l3475 0646                               l3395 03E0  
                             l3555 07D6                               l2597 1775  
                             l2669 16DA                               l2933 00BC  
                             l2925 00A1                               l2853 0BC5  
                             l3493 0685                               l3469 0633  
                             l3389 03DA                               l3477 064B  
                             l3591 1462                               l2599 177F  
                             l2951 0876                               l2935 00C8  
                             l2927 00AF                               l2871 0CE4  
                             l2847 0B66                               l3487 0677  
                             l3751 0E1D                               l3743 0DED  
                             l3727 0DA6                               l2697 1047  
                             l3577 1429                               l3569 1419  
                             l2961 08C1                               l2945 0859  
                             l2865 0C85                               l2857 0BE2  
                             l3737 0DCD                               l3595 1470  
                             l3587 1457                               l3579 1437  
                             l2883 1F0F                               l3499 068B  
                             l2981 0936                               l2893 0034  
                             l3757 0E4A                               l3749 0E19  
                             l3759 0E4C                               l2969 0909  
                             l2987 0943                               l2979 0928  
                             l2989 094F                               ?_log 005D  
                             STR_1 1891                       __CFG_WDTE$ON 0000  
                             STR_2 1897                               u3005 1776  
                             _LATA 0016                               _LATB 0017  
                             _LATC 0018                               u3035 1789  
                             u3205 16E3                               u4015 13E3  
                             u3215 16E9                               u3135 168F  
                             u3065 179C                               u3145 169F  
                             u3250 10A6                               _T2PR 028D  
                             u4045 0014                               u3165 16C7  
                             u3405 0088                               u4205 02DF  
                             u5007 1327                               u3175 16CD  
                             u4215 0314                               u5017 132F  
                             u2625 12FB                               u2545 12BB  
                      main@counter 00D5                               u5027 1337  
                             u3515 08C2                               u4315 045E  
                             u2645 1016                               u5037 1343  
                             u2565 12D4                               u3525 08EC  
                             u3445 00A2                               u2725 1216  
                             u4245 033D                               u4165 021E  
                             u5047 134F                               u5057 135B  
                             u2585 12E1                               u2665 1FB0  
                             u3385 006E                               u2745 1220  
                             u2825 1178                               u4505 0724  
                             u4345 050F                               u5067 1368  
                             u2675 1FB5                               u3715 14C3  
                             u3475 00BD                               u3395 007E  
                             u2755 122A                               u4515 0743  
                             u4435 06B6                               u4355 051D  
                             u4275 040B                               u5077 1375  
                             u4605 142C                               u3805 11C2  
                             u3565 0929                               u2765 1232  
                             u2845 1187                               u5087 1F1D  
                             u3815 11D6                               u2855 118E  
                             u4455 06D6                               u4625 1438  
                             u4705 154F                               u3745 14DE  
                             u3825 11E2                               u3905 1058  
                             u4465 06F4                               u4635 144C  
                             u4715 156F                               u3595 0944  
                             u4645 1458                               u4725 157E  
                             u3685 1499                               u4735 1588  
                             u2975 1763                               u3855 1127  
                             u3785 11B6                               u3955 1384  
                             u3875 1140                               u3885 114B  
                             u3975 13A3                               u4695 153F  
                             u3995 13C3                               u4875 0DD3  
                             u4957 10C1                               u4885 0DDF  
                             u4967 10CD                               u4977 10D9  
                             u4987 1314                               u4997 131F  
                             _WPUA 0F39                               _WPUB 0F44  
                             _WPUC 0F4F                               _WPUE 0F65  
                     __CFG_WRT$OFF 0000                      __CFG_FCMEN$ON 0000  
                ?_LCD_Write_String 0070                               _main 0D01  
                     ___ftpack@arg 0070                 __size_of_LCD_Clear 0008  
                     ___ftpack@exp 0073                               fsr0h 0005  
                             fsr1h 0007                               fsr0l 0004  
                             indf0 0000                               indf1 0001  
                             fsr1l 0006                               btemp 007E  
                             log@x 005D                               ltemp 007E  
                             start 0002                 ??_LCD_Write_String 0075  
                             ttemp 007E                               wtemp 007E  
                     _sprintf$1017 00A0                      __CFG_CSWEN$ON 0000  
                    __CFG_MCLRE$ON 0000                       ___ftmul@cntr 0036  
                     ___ftmul@sign 0037                       ___fttol@exp1 004E  
                            ??_log 0060                       ___fttol@lval 004A  
                 __end_of_LCD_Init 1378                   __end_of_LCD_Port 1F5A  
   __size_of_OSCILLATOR_Initialize 0008      __end_of_OSCILLATOR_Initialize 1EC8  
                  __end_of___aldiv 1479                              _ADACQ 009D  
                            _ADCAP 009B                              _ADACT 0099  
                            ?_main 0070                              _ADCLK 0098  
                            _ADPCH 009E                              _ADREF 009A  
                  __end_of___awdiv 1247                              _ADPRE 009C  
                  __end_of___ftadd 1800                    __end_of___awmod 11A3  
                            _ADRPT 010D                    __end_of___ftdiv 15A9  
                  __end_of___ftneg 1ED0                    __end_of___lldiv 11F5  
                  __end_of___ftmul 170A                    ___awdiv@divisor 0077  
                  __end_of___llmod 115E                    __end_of___ftsub 1FE0  
                  __end_of___fttol 1500                              _T2CON 028E  
              main@readTemperature 00E3                              _T2HLT 028F  
                            _T2TMR 028C                              _T2RST 0291  
                  ___awdiv@counter 0020                              _OSCEN 0891  
                            _TRISA 0011                              _TRISB 0012  
                            _TRISC 0013                    _PWM6_Initialize 1EE8  
                     ___lltoft@exp 007D             __end_of_LCD_Set_Cursor 13F7  
                    ___awtoft@sign 007D                    __end_of_dpowers 1828  
                            _frexp 0800                              _errno 006C  
                            _scale 0ABD                    __end_of_isdigit 1F11  
                    ___ftpack@sign 0074                              main@R 00CD  
                            main@s 00C5                     __CFG_BOREN$OFF 0000  
                     main@setpoint 00D9                              ltemp0 007E  
                            ltemp1 0082                              ltemp2 0086  
                            ltemp3 0080                              ttemp0 007E  
                            ttemp1 0081                              ttemp2 0084  
                            ttemp3 0087                              ttemp4 007F  
                            status 0003                              wtemp0 007E  
                            wtemp1 0080                              wtemp2 0082  
                            wtemp3 0084                              wtemp4 0086  
                            wtemp5 0088                              wtemp6 007F  
                  __end_of_sprintf 07DB                   InitCustomChars@i 0076  
                   _LCD_Write_Char 1006                    __initialization 07DB  
                      log@exponent 0061                       __end_of_main 1000  
          __end_of_TMR2_Initialize 1F2F                             ??_main 00B9  
                    ___fttol@sign1 0049                  __end_of_LCD_Clear 1EC0  
                        ??_LCD_Cmd 0071               __size_of__tdiv_to_l_ 00B6  
                  ?_LCD_Set_Cursor 0073                             _ADCON0 0093  
                           _ADCON1 0094                             _ADCON2 0095  
                           _ADCON3 0096                             ?_frexp 0070  
                 ___llmod@dividend 0024                             _ADLTHH 010F  
                           ?_scale 0038                             _ADLTHL 010E  
                           _ADRESH 008D                             _ADRESL 008C  
                           _ADSTAT 0097                             _ADUTHH 0111  
                 ___awdiv@dividend 0079                             _ADUTHL 0110  
                 __end_of___awtoft 2000                             _ANSELA 0F38  
                           _ANSELB 0F43                             _ANSELC 0F4E  
                 __end_of___ftpack 130B                 __CFG_RSTOSC$HFINT1 0000  
                           _RA1PPS 0F11                   __end_of___lltoft 1077  
                   __CFG_WDTCCS$SC 0000                             _FVRCON 090C  
                 __end_of___lwtoft 1F42                             _OSCFRQ 0893  
           __end_of_LCD_Write_Char 1029                     __CFG_PWRTE$OFF 0000  
                 __end_of__powers_ 1876                       _CCPTMRS1bits 021F  
                           ___ftge 10DF                          ??___aldiv 0078  
                           ___wmul 1FA6                          ??___awdiv 007B  
                        ??___ftadd 004C                     __CFG_STVREN$ON 0000  
                        ??___awmod 0074                          ??___ftdiv 0026  
                        ??___ftneg 0073                          ??___lldiv 0078  
                        ??___ftmul 002E                          ??___llmod 0028  
                        ??___ftsub 007E                          ??___fttol 0045  
          __end_of_PWM6_Initialize 1EF5                             _fround 0958  
                 ___awdiv@quotient 0022                    ___awmod@divisor 0070  
                  ___awmod@counter 0075              ___ftmul@f3_as_product 0033  
                  _ADCC_Initialize 1F72                          ??_isdigit 0070  
__size_of_ADCC_GetSingleConversion 000E          ?_ADCC_GetSingleConversion 0070  
                    main@steinhart 00E5                          ??_sprintf 0061  
                  _InitCustomChars 1029                    LCD_Set_Cursor@w 0078  
                  LCD_Set_Cursor@x 0076                    LCD_Set_Cursor@y 0073  
                  LCD_Set_Cursor@z 0077                  _SYSTEM_Initialize 10A8  
                 __end_oflog@coeff 1891            __end_of__initialization 07FD  
                        ?_LCD_Init 0070                          ?_LCD_Port 0070  
                       ___ftadd@f1 0046                         ___ftadd@f2 0049  
                       ___ftge@ff1 0053                         ___ftge@ff2 0056  
               ?_SYSTEM_Initialize 0070                       eval_poly@res 005A  
                       ___ftdiv@f1 0023                         ___ftdiv@f2 0020  
                       ___ftdiv@f3 002B                    ?_LCD_Write_Char 0070  
                       ___ftneg@f1 0070                      LCD_Init@style 0075  
                       ___awtoft@c 0078                         ___ftmul@f1 0028  
                       ___ftmul@f2 002B                         ___ftsub@f1 0056  
                       ___ftsub@f2 0053                         ___fttol@f1 0041  
                   __pcstackCOMMON 0070                          LCD_Port@a 0070  
                     __pidataBANK2 1F5A                ??_SYSTEM_Initialize 0077  
                       ___lltoft@c 0078                      __end_of_frexp 083B  
                    __end_of_scale 0D01                   ?_TMR2_Initialize 0070  
                       ___lwtoft@c 0078                         __div_to_l_ 083B  
                  __div_to_l_@exp1 0025                    __div_to_l_@cntr 0024  
                          ??_frexp 0074                            ??_scale 003B  
        __end_of_SYSTEM_Initialize 10DF                    __div_to_l_@quot 0020  
                     sprintf@width 00A6                         __pbssBANK0 0067  
                       __pbssBANK1 00E8                 __size_of_eval_poly 0060  
                       ??_LCD_Init 0073                         ??_LCD_Port 0070  
                    __div_to_l_@f1 0070                      __div_to_l_@f2 0073  
                       __pmaintext 0D01                            ?___ftge 0053  
                          ?___wmul 0024                    __CFG_PPS1WAY$ON 0000  
          __end_of_ADCC_Initialize 1F8B         __end_of_PWM6_LoadDutyValue 001B  
                          ?_fround 0038          __size_of_LCD_Write_String 001B  
                 ?_PWM6_Initialize 0070                          ?___awtoft 0078  
                        ?___ftpack 0070                            _ADSTPTH 0113  
                          _ADSTPTL 0112                          ?___lltoft 0078  
                        ?___lwtoft 0078            __end_of_InitCustomChars 104F  
                          _LCD_Cmd 1F11                            _OSCCON1 088D  
                          _OSCCON3 088F                            _OSCTUNE 0892  
                          _PWM6DCH 038D                            _PWM6DCL 038C  
                          _PWM6CON 038E                            _PPSLOCK 0E8F  
                __end_of__npowers_ 184F                         _scale$1016 003D  
             __CFG_SCANE$available 0000                            ___aldiv 13F7  
                          ___cgram 0120                    __size_of___ftge 003C  
                          ___awdiv 11F5                            ___ftadd 170A  
                          ___awmod 115E                            ___ftdiv 1500  
                          ___ftneg 1EC8                            ___lldiv 11A3  
                  __size_of___wmul 001C                            ___ftmul 1656  
                          ___llmod 111B                            ___ftsub 1FC2  
                          ___fttol 1479                         ??___awtoft 007B  
                       ??___ftpack 0075                  __end_of_eval_poly 12A7  
                  __size_of_fround 0165                         ??___lltoft 007C  
                 ??_LCD_Set_Cursor 0074                            __ptext1 00D1  
                          __ptext2 0ABD                            __ptext3 1F03  
                          __ptext4 0958                            __ptext5 115E  
                          __ptext6 11F5                            __ptext7 001B  
                          __ptext8 083B                            __ptext9 104F  
                       ??___lwtoft 007B                        ?__div_to_l_ 0070  
                          _dpowers 1800              _OSCILLATOR_Initialize 1EC0  
                        _T2CONbits 028E                       __size_of_log 00AD  
                          _isdigit 1F03                   ___awmod@dividend 0072  
                 ___aldiv@dividend 0074           ??_PIN_MANAGER_Initialize 0070  
                          _samples 238C                          _LCD_Clear 1EB8  
       __size_of_SYSTEM_Initialize 0037                            _sprintf 00D1  
                          clrloop0 1ED1               end_of_initialization 07FD  
                   main@outCurrent 00E1                            init_ram 1EDC  
                          initloop 1EDD                    ___lldiv@divisor 0070  
                  ___lldiv@counter 007D                   ___aldiv@quotient 0022  
                     __pstringtext 1800                   ?_ADCC_Initialize 0070  
                   __tdiv_to_l_@f1 0070                     __tdiv_to_l_@f2 0073  
 __end_of_ADCC_GetSingleConversion 1F03              __CFG_WDTCPS$WDTCPS_31 0000  
                    ??__tdiv_to_l_ 0076                   ?_InitCustomChars 0070  
                       ?_LCD_Clear 0070                   __CFG_FEXTOSC$OFF 0000  
                LCD_Write_String@a 0078                  LCD_Write_String@i 0076  
                 ??_LCD_Write_Char 0071                        ___ftdiv@exp 002E  
                       main@minute 00D3                  __size_of_LCD_Init 006D  
              __size_of__div_to_l_ 011D                  __size_of_LCD_Port 0018  
                       main@totals 00DB                        ___ftmul@exp 0032  
                   __end_of___ftge 111B                     __end_of___wmul 1FC2  
                 _LCD_Write_String 1F8B             ?_OSCILLATOR_Initialize 0070  
                   __end_of_fround 0ABD                start_initialization 07DB  
                       eval_poly@d 0056                         eval_poly@n 0058  
                       eval_poly@x 0053    __size_of_PIN_MANAGER_Initialize 0031  
              __end_of__tdiv_to_l_ 00D1                        __end_of_log 1656  
                       frexp@value 0070                    ___llmod@divisor 0020  
                  ___llmod@counter 0029                   __CFG_LPBOREN$OFF 0000  
                         ??___ftge 0059                           ??___wmul 007C  
                      __pdataBANK2 0120                    LCD_Write_Char@a 0074  
                  LCD_Write_Char@y 0073                           ??_fround 003B  
                    sprintf@tmpval 00A8                         fround@prec 0045  
                         ?_LCD_Cmd 0070                  __size_of___awtoft 0020  
         _ADCC_GetSingleConversion 1EF5                  __size_of___ftpack 0064  
                      __pbssBIGRAM 238C                  __size_of___lltoft 0028  
                         LCD_Cmd@a 0072                          ___latbits 0002  
                __size_of___lwtoft 0013                      __pcstackBANK0 0020  
                    __pcstackBANK1 00A0                 _PWM6_LoadDutyValue 0005  
         __size_of_TMR2_Initialize 000F                        ??_LCD_Clear 0073  
              ?_PWM6_LoadDutyValue 0070                        sprintf@flag 00A4  
                      sprintf@fval 00B2                        sprintf@prec 00B6  
                        _main$1013 00D0             _PIN_MANAGER_Initialize 1077  
                         ?___aldiv 0070    ADCC_GetSingleConversion@channel 0073  
                         ?___awdiv 0077                           ?___ftadd 0046  
                         ?___awmod 0070                           ?___ftdiv 0020  
                         ?___ftneg 0070                           ?___lldiv 0070  
                         ?___ftmul 0028                           ?___llmod 0020  
                         ?___ftsub 0053                          __npowers_ 1828  
                         ?___fttol 0041               ??_PWM6_LoadDutyValue 0072  
                      __tdiv_to_l_ 001B                       ??__div_to_l_ 0076  
                         ?_isdigit 0070                          _eval_poly 1247  
         __size_of_PWM6_Initialize 000D                           ?_sprintf 005C  
                   __size_of_frexp 003B                           _T2CLKCON 0290  
                   __size_of_scale 0244             main@readTemperatureOld 00DF  
                  ___aldiv@divisor 0070                    ___aldiv@counter 0020  
                         _LCD_Init 130B                     ___wmul@product 007C  
                         _LCD_Port 1F42                          clear_ram0 1ED0  
                         _PIE0bits 0716                 __end_of__div_to_l_ 0958  
                         _PIR4bits 0710                         _ADCON0bits 0093  
                ___wmul@multiplier 0024                         ?_eval_poly 0053  
                 __size_of_LCD_Cmd 000F                          main@timer 00C3  
         __end_of_LCD_Write_String 1FA6                  ??_TMR2_Initialize 0070  
                        frexp@eptr 0073               main@firstTimeThrough 00D7  
          ??_OSCILLATOR_Initialize 0070                   __size_of___aldiv 0082  
                 __size_of___awdiv 0052                   __size_of___ftadd 00F6  
                 __size_of___awmod 0045                   __size_of___ftdiv 00A9  
                 __size_of___ftneg 0008                   __size_of___lldiv 0052  
                 __size_of___ftmul 00B4                   __size_of___llmod 0043  
                 __size_of___ftsub 001E                   __size_of___fttol 0087  
                         ___awtoft 1FE0                           ___ftpack 12A7  
                      _fround$1014 0042                        _fround$1015 003F  
                         ___lltoft 104F                        _isdigit$727 0070  
                         ___lwtoft 1F2F                         sprintf@exp 00B0  
                       sprintf@val 00AC           __size_of_ADCC_Initialize 0019  
                  main@sampleIndex 00E8                   __size_of_isdigit 000E  
                         __ptext10 111B                           __ptext11 11A3  
                         __ptext20 170A                           __ptext12 1479  
                         __ptext21 10DF                           __ptext13 1FC2  
                         __ptext30 1077                           __ptext22 1FE0  
                         __ptext14 1EC8                           __ptext31 1EC0  
                         __ptext23 1F2F                           __ptext15 15A9  
                         __ptext40 1F11                           __ptext32 130B  
                         __ptext24 1500                           __ptext16 0800  
                         __ptext41 1F42                           __ptext33 1EB8  
                         __ptext25 12A7                           __ptext17 1247  
                         __ptext42 1EF5                           __ptext34 1029  
                         __ptext26 13F7                           __ptext18 1FA6  
                         __ptext35 1F72                           __ptext27 10A8  
                         __ptext19 1656                           __ptext36 0005  
                         __ptext28 1F20                           __ptext37 1F8B  
                         __ptext29 1EE8                           __ptext38 1006  
                         __ptext39 1378                           __powers_ 184F  
          __size_of_LCD_Set_Cursor 007F                   __size_of_sprintf 070A  
         __size_of_InitCustomChars 0026                LCD_Write_Int@F13684 0067  
                ??_PWM6_Initialize 0070                      __size_of_main 02FF  
             __CFG_WDTCWS$WDTCWS_7 0000         ??_ADCC_GetSingleConversion 0073  
      PIN_MANAGER_Initialize@state 0070                           log@coeff 1876  
                      ??_eval_poly 007E                           isdigit@c 0071  
                         scale@scl 0040                 LCD_Write_Char@temp 0072  
                        sprintf@ap 00A3                   __tdiv_to_l_@exp1 0025  
                 __tdiv_to_l_@cntr 0024                          sprintf@sp 00B5  
                 __tdiv_to_l_@quot 0020                   ___lldiv@dividend 0074  
          ?_PIN_MANAGER_Initialize 0070                  __CFG_CLKOUTEN$OFF 0000  
                      _PPSLOCKbits 0E8F            __size_of_LCD_Write_Char 0023  
                 main@startupTimer 00D8                 LCD_Set_Cursor@temp 0079  
                     ?__tdiv_to_l_ 0070                           sprintf@c 00B8  
                         sprintf@f 005C                   ___lldiv@quotient 0079  
                     ___aldiv@sign 0021        PWM6_LoadDutyValue@dutyValue 0070  
   __end_of_PIN_MANAGER_Initialize 10A8                  ??_ADCC_Initialize 0070  
                ??_InitCustomChars 0075  
