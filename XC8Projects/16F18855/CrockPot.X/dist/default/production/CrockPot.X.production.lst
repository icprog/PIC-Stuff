

Microchip Technology PIC LITE Macro Assembler V1.38 build -256452561 
                                                                                               Thu Sep 07 00:04:01 2017

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	16F18855
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK2,global,class=CODE,delta=2
     5                           	psect	stringtext,global,class=STRCODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    10                           	psect	inittext,global,class=CODE,delta=2
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	text6,local,class=CODE,merge=1,delta=2
    22                           	psect	text7,local,class=CODE,merge=1,delta=2
    23                           	psect	text8,local,class=CODE,merge=1,delta=2
    24                           	psect	text9,local,class=CODE,merge=1,delta=2
    25                           	psect	text10,local,class=CODE,merge=1,delta=2
    26                           	psect	text11,local,class=CODE,merge=1,delta=2
    27                           	psect	text12,local,class=CODE,merge=1,delta=2
    28                           	psect	text13,local,class=CODE,merge=1,delta=2
    29                           	psect	text14,local,class=CODE,merge=1,delta=2
    30                           	psect	text15,local,class=CODE,merge=1,delta=2
    31                           	psect	text16,local,class=CODE,merge=1,delta=2
    32                           	psect	text17,local,class=CODE,merge=1,delta=2
    33                           	psect	text18,local,class=CODE,merge=1,delta=2
    34                           	psect	text19,local,class=CODE,merge=1,delta=2
    35                           	psect	text20,local,class=CODE,merge=1,delta=2
    36                           	psect	text21,local,class=CODE,merge=1,delta=2
    37                           	psect	text22,local,class=CODE,merge=1,delta=2
    38                           	psect	text23,local,class=CODE,merge=1,delta=2
    39                           	psect	text24,local,class=CODE,merge=1,delta=2
    40                           	psect	text25,local,class=CODE,merge=1,delta=2
    41                           	psect	text26,local,class=CODE,merge=1,delta=2
    42                           	psect	text27,local,class=CODE,merge=1,delta=2
    43                           	psect	text28,local,class=CODE,merge=1,delta=2
    44                           	psect	text29,local,class=CODE,merge=1,delta=2
    45                           	psect	text30,local,class=CODE,merge=1,delta=2
    46                           	psect	text31,local,class=CODE,merge=1,delta=2
    47                           	psect	text32,local,class=CODE,merge=1,delta=2
    48                           	psect	text33,local,class=CODE,merge=1,delta=2
    49                           	psect	text34,local,class=CODE,merge=1,delta=2
    50                           	psect	text35,local,class=CODE,merge=1,delta=2
    51                           	psect	text36,local,class=CODE,merge=1,delta=2
    52                           	psect	text37,local,class=CODE,merge=1,delta=2
    53                           	psect	text38,local,class=CODE,merge=1,delta=2
    54                           	psect	text39,local,class=CODE,merge=1,delta=2
    55                           	psect	text40,local,class=CODE,merge=1,delta=2
    56                           	psect	text41,local,class=CODE,merge=1,delta=2
    57                           	psect	text42,local,class=CODE,merge=1,delta=2
    58                           	dabs	1,0x620,48
    59                           	dabs	1,0x5BC,52
    60                           	dabs	1,0x238C,0,_samples
    61                           	dabs	1,0x7E,2
    62  0000                     	;# 
    63  0001                     	;# 
    64  0002                     	;# 
    65  0003                     	;# 
    66  0004                     	;# 
    67  0005                     	;# 
    68  0006                     	;# 
    69  0007                     	;# 
    70  0008                     	;# 
    71  0009                     	;# 
    72  000A                     	;# 
    73  000B                     	;# 
    74  000C                     	;# 
    75  000D                     	;# 
    76  000E                     	;# 
    77  0010                     	;# 
    78  0011                     	;# 
    79  0012                     	;# 
    80  0013                     	;# 
    81  0016                     	;# 
    82  0017                     	;# 
    83  0018                     	;# 
    84  001C                     	;# 
    85  001C                     	;# 
    86  001D                     	;# 
    87  001D                     	;# 
    88  001E                     	;# 
    89  001F                     	;# 
    90  008C                     	;# 
    91  008C                     	;# 
    92  008D                     	;# 
    93  008E                     	;# 
    94  008E                     	;# 
    95  008F                     	;# 
    96  0090                     	;# 
    97  0090                     	;# 
    98  0091                     	;# 
    99  0093                     	;# 
   100  0094                     	;# 
   101  0095                     	;# 
   102  0096                     	;# 
   103  0097                     	;# 
   104  0098                     	;# 
   105  0099                     	;# 
   106  009A                     	;# 
   107  009B                     	;# 
   108  009C                     	;# 
   109  009D                     	;# 
   110  009E                     	;# 
   111  010C                     	;# 
   112  010D                     	;# 
   113  010E                     	;# 
   114  010E                     	;# 
   115  010F                     	;# 
   116  0110                     	;# 
   117  0110                     	;# 
   118  0111                     	;# 
   119  0112                     	;# 
   120  0112                     	;# 
   121  0113                     	;# 
   122  0114                     	;# 
   123  0114                     	;# 
   124  0115                     	;# 
   125  0116                     	;# 
   126  0116                     	;# 
   127  0117                     	;# 
   128  0119                     	;# 
   129  0119                     	;# 
   130  0119                     	;# 
   131  011A                     	;# 
   132  011A                     	;# 
   133  011A                     	;# 
   134  011B                     	;# 
   135  011B                     	;# 
   136  011B                     	;# 
   137  011B                     	;# 
   138  011B                     	;# 
   139  011C                     	;# 
   140  011C                     	;# 
   141  011C                     	;# 
   142  011D                     	;# 
   143  011D                     	;# 
   144  011D                     	;# 
   145  011E                     	;# 
   146  011E                     	;# 
   147  011E                     	;# 
   148  011F                     	;# 
   149  011F                     	;# 
   150  011F                     	;# 
   151  011F                     	;# 
   152  011F                     	;# 
   153  018C                     	;# 
   154  018D                     	;# 
   155  018E                     	;# 
   156  018F                     	;# 
   157  0190                     	;# 
   158  0191                     	;# 
   159  0192                     	;# 
   160  0196                     	;# 
   161  0197                     	;# 
   162  0198                     	;# 
   163  0199                     	;# 
   164  019A                     	;# 
   165  019B                     	;# 
   166  019C                     	;# 
   167  020C                     	;# 
   168  020D                     	;# 
   169  020E                     	;# 
   170  020F                     	;# 
   171  020F                     	;# 
   172  0210                     	;# 
   173  0210                     	;# 
   174  0211                     	;# 
   175  0211                     	;# 
   176  0212                     	;# 
   177  0213                     	;# 
   178  0214                     	;# 
   179  0215                     	;# 
   180  0215                     	;# 
   181  0216                     	;# 
   182  0216                     	;# 
   183  0217                     	;# 
   184  0217                     	;# 
   185  0218                     	;# 
   186  0219                     	;# 
   187  021A                     	;# 
   188  021B                     	;# 
   189  021B                     	;# 
   190  021C                     	;# 
   191  021C                     	;# 
   192  021D                     	;# 
   193  021D                     	;# 
   194  021E                     	;# 
   195  021F                     	;# 
   196  028C                     	;# 
   197  028C                     	;# 
   198  028D                     	;# 
   199  028D                     	;# 
   200  028E                     	;# 
   201  028F                     	;# 
   202  0290                     	;# 
   203  0290                     	;# 
   204  0291                     	;# 
   205  0292                     	;# 
   206  0292                     	;# 
   207  0293                     	;# 
   208  0293                     	;# 
   209  0294                     	;# 
   210  0295                     	;# 
   211  0296                     	;# 
   212  0296                     	;# 
   213  0297                     	;# 
   214  0298                     	;# 
   215  0298                     	;# 
   216  0299                     	;# 
   217  0299                     	;# 
   218  029A                     	;# 
   219  029B                     	;# 
   220  029C                     	;# 
   221  029C                     	;# 
   222  029D                     	;# 
   223  030C                     	;# 
   224  030C                     	;# 
   225  030D                     	;# 
   226  030E                     	;# 
   227  030F                     	;# 
   228  0310                     	;# 
   229  0310                     	;# 
   230  0311                     	;# 
   231  0312                     	;# 
   232  0313                     	;# 
   233  0314                     	;# 
   234  0314                     	;# 
   235  0315                     	;# 
   236  0316                     	;# 
   237  0317                     	;# 
   238  0318                     	;# 
   239  0318                     	;# 
   240  0319                     	;# 
   241  031A                     	;# 
   242  031B                     	;# 
   243  031C                     	;# 
   244  031C                     	;# 
   245  031D                     	;# 
   246  031E                     	;# 
   247  031F                     	;# 
   248  038C                     	;# 
   249  038D                     	;# 
   250  038E                     	;# 
   251  0390                     	;# 
   252  0391                     	;# 
   253  0392                     	;# 
   254  040C                     	;# 
   255  040D                     	;# 
   256  040E                     	;# 
   257  040F                     	;# 
   258  0410                     	;# 
   259  0411                     	;# 
   260  0416                     	;# 
   261  0416                     	;# 
   262  0417                     	;# 
   263  0418                     	;# 
   264  0418                     	;# 
   265  0419                     	;# 
   266  041A                     	;# 
   267  041A                     	;# 
   268  041B                     	;# 
   269  041C                     	;# 
   270  041C                     	;# 
   271  041D                     	;# 
   272  041E                     	;# 
   273  041F                     	;# 
   274  048C                     	;# 
   275  048C                     	;# 
   276  048D                     	;# 
   277  048E                     	;# 
   278  048F                     	;# 
   279  048F                     	;# 
   280  0490                     	;# 
   281  0491                     	;# 
   282  0492                     	;# 
   283  0492                     	;# 
   284  0493                     	;# 
   285  0494                     	;# 
   286  0495                     	;# 
   287  0495                     	;# 
   288  0496                     	;# 
   289  0497                     	;# 
   290  0498                     	;# 
   291  0499                     	;# 
   292  049A                     	;# 
   293  049B                     	;# 
   294  049C                     	;# 
   295  049D                     	;# 
   296  050C                     	;# 
   297  050C                     	;# 
   298  050D                     	;# 
   299  050E                     	;# 
   300  050F                     	;# 
   301  050F                     	;# 
   302  0510                     	;# 
   303  0511                     	;# 
   304  0512                     	;# 
   305  0512                     	;# 
   306  0513                     	;# 
   307  0514                     	;# 
   308  0515                     	;# 
   309  0515                     	;# 
   310  0516                     	;# 
   311  0517                     	;# 
   312  0518                     	;# 
   313  0519                     	;# 
   314  051A                     	;# 
   315  051B                     	;# 
   316  051C                     	;# 
   317  051D                     	;# 
   318  058C                     	;# 
   319  058C                     	;# 
   320  058D                     	;# 
   321  058E                     	;# 
   322  058F                     	;# 
   323  058F                     	;# 
   324  0590                     	;# 
   325  0591                     	;# 
   326  0592                     	;# 
   327  0593                     	;# 
   328  060C                     	;# 
   329  060D                     	;# 
   330  060E                     	;# 
   331  060F                     	;# 
   332  0610                     	;# 
   333  0611                     	;# 
   334  0612                     	;# 
   335  0613                     	;# 
   336  0614                     	;# 
   337  0616                     	;# 
   338  0617                     	;# 
   339  0618                     	;# 
   340  0619                     	;# 
   341  061A                     	;# 
   342  061B                     	;# 
   343  061C                     	;# 
   344  061D                     	;# 
   345  061E                     	;# 
   346  068C                     	;# 
   347  068D                     	;# 
   348  068E                     	;# 
   349  068F                     	;# 
   350  0690                     	;# 
   351  0691                     	;# 
   352  0692                     	;# 
   353  0693                     	;# 
   354  0694                     	;# 
   355  070C                     	;# 
   356  070D                     	;# 
   357  070E                     	;# 
   358  070F                     	;# 
   359  0710                     	;# 
   360  0711                     	;# 
   361  0712                     	;# 
   362  0713                     	;# 
   363  0714                     	;# 
   364  0716                     	;# 
   365  0717                     	;# 
   366  0718                     	;# 
   367  0719                     	;# 
   368  071A                     	;# 
   369  071B                     	;# 
   370  071C                     	;# 
   371  071D                     	;# 
   372  071E                     	;# 
   373  0796                     	;# 
   374  0797                     	;# 
   375  0798                     	;# 
   376  0799                     	;# 
   377  079A                     	;# 
   378  079B                     	;# 
   379  080C                     	;# 
   380  080D                     	;# 
   381  080E                     	;# 
   382  080F                     	;# 
   383  0810                     	;# 
   384  0811                     	;# 
   385  0812                     	;# 
   386  0813                     	;# 
   387  0814                     	;# 
   388  081A                     	;# 
   389  081B                     	;# 
   390  081C                     	;# 
   391  081D                     	;# 
   392  081E                     	;# 
   393  081F                     	;# 
   394  088C                     	;# 
   395  088D                     	;# 
   396  088E                     	;# 
   397  088F                     	;# 
   398  0890                     	;# 
   399  0891                     	;# 
   400  0892                     	;# 
   401  0893                     	;# 
   402  0895                     	;# 
   403  0896                     	;# 
   404  0897                     	;# 
   405  0898                     	;# 
   406  0899                     	;# 
   407  089A                     	;# 
   408  089B                     	;# 
   409  090C                     	;# 
   410  090E                     	;# 
   411  090F                     	;# 
   412  091F                     	;# 
   413  091F                     	;# 
   414  098F                     	;# 
   415  098F                     	;# 
   416  0990                     	;# 
   417  0991                     	;# 
   418  0992                     	;# 
   419  0993                     	;# 
   420  0994                     	;# 
   421  0995                     	;# 
   422  0996                     	;# 
   423  0997                     	;# 
   424  0E0F                     	;# 
   425  0E10                     	;# 
   426  0E11                     	;# 
   427  0E12                     	;# 
   428  0E13                     	;# 
   429  0E14                     	;# 
   430  0E15                     	;# 
   431  0E16                     	;# 
   432  0E17                     	;# 
   433  0E18                     	;# 
   434  0E19                     	;# 
   435  0E1A                     	;# 
   436  0E1B                     	;# 
   437  0E1C                     	;# 
   438  0E1D                     	;# 
   439  0E1E                     	;# 
   440  0E1F                     	;# 
   441  0E20                     	;# 
   442  0E21                     	;# 
   443  0E22                     	;# 
   444  0E23                     	;# 
   445  0E24                     	;# 
   446  0E25                     	;# 
   447  0E26                     	;# 
   448  0E27                     	;# 
   449  0E28                     	;# 
   450  0E29                     	;# 
   451  0E2A                     	;# 
   452  0E2B                     	;# 
   453  0E2C                     	;# 
   454  0E2D                     	;# 
   455  0E2E                     	;# 
   456  0E2F                     	;# 
   457  0E30                     	;# 
   458  0E31                     	;# 
   459  0E32                     	;# 
   460  0E33                     	;# 
   461  0E34                     	;# 
   462  0E35                     	;# 
   463  0E36                     	;# 
   464  0E37                     	;# 
   465  0E8F                     	;# 
   466  0E90                     	;# 
   467  0E91                     	;# 
   468  0E92                     	;# 
   469  0E93                     	;# 
   470  0E94                     	;# 
   471  0E95                     	;# 
   472  0E96                     	;# 
   473  0E97                     	;# 
   474  0E9C                     	;# 
   475  0E9D                     	;# 
   476  0E9E                     	;# 
   477  0EA1                     	;# 
   478  0EA2                     	;# 
   479  0EA3                     	;# 
   480  0EA4                     	;# 
   481  0EA5                     	;# 
   482  0EA9                     	;# 
   483  0EAA                     	;# 
   484  0EAB                     	;# 
   485  0EAC                     	;# 
   486  0EB1                     	;# 
   487  0EB2                     	;# 
   488  0EB3                     	;# 
   489  0EB8                     	;# 
   490  0EB9                     	;# 
   491  0EBA                     	;# 
   492  0EBB                     	;# 
   493  0EBC                     	;# 
   494  0EBD                     	;# 
   495  0EBE                     	;# 
   496  0EC3                     	;# 
   497  0EC5                     	;# 
   498  0EC6                     	;# 
   499  0EC7                     	;# 
   500  0EC8                     	;# 
   501  0EC9                     	;# 
   502  0ECA                     	;# 
   503  0ECB                     	;# 
   504  0ECC                     	;# 
   505  0F10                     	;# 
   506  0F11                     	;# 
   507  0F12                     	;# 
   508  0F13                     	;# 
   509  0F14                     	;# 
   510  0F15                     	;# 
   511  0F16                     	;# 
   512  0F17                     	;# 
   513  0F18                     	;# 
   514  0F19                     	;# 
   515  0F1A                     	;# 
   516  0F1B                     	;# 
   517  0F1C                     	;# 
   518  0F1D                     	;# 
   519  0F1E                     	;# 
   520  0F1F                     	;# 
   521  0F20                     	;# 
   522  0F21                     	;# 
   523  0F22                     	;# 
   524  0F23                     	;# 
   525  0F24                     	;# 
   526  0F25                     	;# 
   527  0F26                     	;# 
   528  0F27                     	;# 
   529  0F38                     	;# 
   530  0F39                     	;# 
   531  0F3A                     	;# 
   532  0F3B                     	;# 
   533  0F3C                     	;# 
   534  0F3D                     	;# 
   535  0F3E                     	;# 
   536  0F3F                     	;# 
   537  0F40                     	;# 
   538  0F41                     	;# 
   539  0F43                     	;# 
   540  0F44                     	;# 
   541  0F45                     	;# 
   542  0F46                     	;# 
   543  0F47                     	;# 
   544  0F48                     	;# 
   545  0F49                     	;# 
   546  0F4A                     	;# 
   547  0F4B                     	;# 
   548  0F4C                     	;# 
   549  0F4E                     	;# 
   550  0F4F                     	;# 
   551  0F50                     	;# 
   552  0F51                     	;# 
   553  0F52                     	;# 
   554  0F53                     	;# 
   555  0F54                     	;# 
   556  0F55                     	;# 
   557  0F56                     	;# 
   558  0F57                     	;# 
   559  0F65                     	;# 
   560  0F68                     	;# 
   561  0F69                     	;# 
   562  0F6A                     	;# 
   563  0F6B                     	;# 
   564  0FE4                     	;# 
   565  0FE5                     	;# 
   566  0FE6                     	;# 
   567  0FE7                     	;# 
   568  0FE8                     	;# 
   569  0FE9                     	;# 
   570  0FEA                     	;# 
   571  0FEB                     	;# 
   572  0FED                     	;# 
   573  0FEE                     	;# 
   574  0FEF                     	;# 
   575  0000                     	;# 
   576  0001                     	;# 
   577  0002                     	;# 
   578  0003                     	;# 
   579  0004                     	;# 
   580  0005                     	;# 
   581  0006                     	;# 
   582  0007                     	;# 
   583  0008                     	;# 
   584  0009                     	;# 
   585  000A                     	;# 
   586  000B                     	;# 
   587  000C                     	;# 
   588  000D                     	;# 
   589  000E                     	;# 
   590  0010                     	;# 
   591  0011                     	;# 
   592  0012                     	;# 
   593  0013                     	;# 
   594  0016                     	;# 
   595  0017                     	;# 
   596  0018                     	;# 
   597  001C                     	;# 
   598  001C                     	;# 
   599  001D                     	;# 
   600  001D                     	;# 
   601  001E                     	;# 
   602  001F                     	;# 
   603  008C                     	;# 
   604  008C                     	;# 
   605  008D                     	;# 
   606  008E                     	;# 
   607  008E                     	;# 
   608  008F                     	;# 
   609  0090                     	;# 
   610  0090                     	;# 
   611  0091                     	;# 
   612  0093                     	;# 
   613  0094                     	;# 
   614  0095                     	;# 
   615  0096                     	;# 
   616  0097                     	;# 
   617  0098                     	;# 
   618  0099                     	;# 
   619  009A                     	;# 
   620  009B                     	;# 
   621  009C                     	;# 
   622  009D                     	;# 
   623  009E                     	;# 
   624  010C                     	;# 
   625  010D                     	;# 
   626  010E                     	;# 
   627  010E                     	;# 
   628  010F                     	;# 
   629  0110                     	;# 
   630  0110                     	;# 
   631  0111                     	;# 
   632  0112                     	;# 
   633  0112                     	;# 
   634  0113                     	;# 
   635  0114                     	;# 
   636  0114                     	;# 
   637  0115                     	;# 
   638  0116                     	;# 
   639  0116                     	;# 
   640  0117                     	;# 
   641  0119                     	;# 
   642  0119                     	;# 
   643  0119                     	;# 
   644  011A                     	;# 
   645  011A                     	;# 
   646  011A                     	;# 
   647  011B                     	;# 
   648  011B                     	;# 
   649  011B                     	;# 
   650  011B                     	;# 
   651  011B                     	;# 
   652  011C                     	;# 
   653  011C                     	;# 
   654  011C                     	;# 
   655  011D                     	;# 
   656  011D                     	;# 
   657  011D                     	;# 
   658  011E                     	;# 
   659  011E                     	;# 
   660  011E                     	;# 
   661  011F                     	;# 
   662  011F                     	;# 
   663  011F                     	;# 
   664  011F                     	;# 
   665  011F                     	;# 
   666  018C                     	;# 
   667  018D                     	;# 
   668  018E                     	;# 
   669  018F                     	;# 
   670  0190                     	;# 
   671  0191                     	;# 
   672  0192                     	;# 
   673  0196                     	;# 
   674  0197                     	;# 
   675  0198                     	;# 
   676  0199                     	;# 
   677  019A                     	;# 
   678  019B                     	;# 
   679  019C                     	;# 
   680  020C                     	;# 
   681  020D                     	;# 
   682  020E                     	;# 
   683  020F                     	;# 
   684  020F                     	;# 
   685  0210                     	;# 
   686  0210                     	;# 
   687  0211                     	;# 
   688  0211                     	;# 
   689  0212                     	;# 
   690  0213                     	;# 
   691  0214                     	;# 
   692  0215                     	;# 
   693  0215                     	;# 
   694  0216                     	;# 
   695  0216                     	;# 
   696  0217                     	;# 
   697  0217                     	;# 
   698  0218                     	;# 
   699  0219                     	;# 
   700  021A                     	;# 
   701  021B                     	;# 
   702  021B                     	;# 
   703  021C                     	;# 
   704  021C                     	;# 
   705  021D                     	;# 
   706  021D                     	;# 
   707  021E                     	;# 
   708  021F                     	;# 
   709  028C                     	;# 
   710  028C                     	;# 
   711  028D                     	;# 
   712  028D                     	;# 
   713  028E                     	;# 
   714  028F                     	;# 
   715  0290                     	;# 
   716  0290                     	;# 
   717  0291                     	;# 
   718  0292                     	;# 
   719  0292                     	;# 
   720  0293                     	;# 
   721  0293                     	;# 
   722  0294                     	;# 
   723  0295                     	;# 
   724  0296                     	;# 
   725  0296                     	;# 
   726  0297                     	;# 
   727  0298                     	;# 
   728  0298                     	;# 
   729  0299                     	;# 
   730  0299                     	;# 
   731  029A                     	;# 
   732  029B                     	;# 
   733  029C                     	;# 
   734  029C                     	;# 
   735  029D                     	;# 
   736  030C                     	;# 
   737  030C                     	;# 
   738  030D                     	;# 
   739  030E                     	;# 
   740  030F                     	;# 
   741  0310                     	;# 
   742  0310                     	;# 
   743  0311                     	;# 
   744  0312                     	;# 
   745  0313                     	;# 
   746  0314                     	;# 
   747  0314                     	;# 
   748  0315                     	;# 
   749  0316                     	;# 
   750  0317                     	;# 
   751  0318                     	;# 
   752  0318                     	;# 
   753  0319                     	;# 
   754  031A                     	;# 
   755  031B                     	;# 
   756  031C                     	;# 
   757  031C                     	;# 
   758  031D                     	;# 
   759  031E                     	;# 
   760  031F                     	;# 
   761  038C                     	;# 
   762  038D                     	;# 
   763  038E                     	;# 
   764  0390                     	;# 
   765  0391                     	;# 
   766  0392                     	;# 
   767  040C                     	;# 
   768  040D                     	;# 
   769  040E                     	;# 
   770  040F                     	;# 
   771  0410                     	;# 
   772  0411                     	;# 
   773  0416                     	;# 
   774  0416                     	;# 
   775  0417                     	;# 
   776  0418                     	;# 
   777  0418                     	;# 
   778  0419                     	;# 
   779  041A                     	;# 
   780  041A                     	;# 
   781  041B                     	;# 
   782  041C                     	;# 
   783  041C                     	;# 
   784  041D                     	;# 
   785  041E                     	;# 
   786  041F                     	;# 
   787  048C                     	;# 
   788  048C                     	;# 
   789  048D                     	;# 
   790  048E                     	;# 
   791  048F                     	;# 
   792  048F                     	;# 
   793  0490                     	;# 
   794  0491                     	;# 
   795  0492                     	;# 
   796  0492                     	;# 
   797  0493                     	;# 
   798  0494                     	;# 
   799  0495                     	;# 
   800  0495                     	;# 
   801  0496                     	;# 
   802  0497                     	;# 
   803  0498                     	;# 
   804  0499                     	;# 
   805  049A                     	;# 
   806  049B                     	;# 
   807  049C                     	;# 
   808  049D                     	;# 
   809  050C                     	;# 
   810  050C                     	;# 
   811  050D                     	;# 
   812  050E                     	;# 
   813  050F                     	;# 
   814  050F                     	;# 
   815  0510                     	;# 
   816  0511                     	;# 
   817  0512                     	;# 
   818  0512                     	;# 
   819  0513                     	;# 
   820  0514                     	;# 
   821  0515                     	;# 
   822  0515                     	;# 
   823  0516                     	;# 
   824  0517                     	;# 
   825  0518                     	;# 
   826  0519                     	;# 
   827  051A                     	;# 
   828  051B                     	;# 
   829  051C                     	;# 
   830  051D                     	;# 
   831  058C                     	;# 
   832  058C                     	;# 
   833  058D                     	;# 
   834  058E                     	;# 
   835  058F                     	;# 
   836  058F                     	;# 
   837  0590                     	;# 
   838  0591                     	;# 
   839  0592                     	;# 
   840  0593                     	;# 
   841  060C                     	;# 
   842  060D                     	;# 
   843  060E                     	;# 
   844  060F                     	;# 
   845  0610                     	;# 
   846  0611                     	;# 
   847  0612                     	;# 
   848  0613                     	;# 
   849  0614                     	;# 
   850  0616                     	;# 
   851  0617                     	;# 
   852  0618                     	;# 
   853  0619                     	;# 
   854  061A                     	;# 
   855  061B                     	;# 
   856  061C                     	;# 
   857  061D                     	;# 
   858  061E                     	;# 
   859  068C                     	;# 
   860  068D                     	;# 
   861  068E                     	;# 
   862  068F                     	;# 
   863  0690                     	;# 
   864  0691                     	;# 
   865  0692                     	;# 
   866  0693                     	;# 
   867  0694                     	;# 
   868  070C                     	;# 
   869  070D                     	;# 
   870  070E                     	;# 
   871  070F                     	;# 
   872  0710                     	;# 
   873  0711                     	;# 
   874  0712                     	;# 
   875  0713                     	;# 
   876  0714                     	;# 
   877  0716                     	;# 
   878  0717                     	;# 
   879  0718                     	;# 
   880  0719                     	;# 
   881  071A                     	;# 
   882  071B                     	;# 
   883  071C                     	;# 
   884  071D                     	;# 
   885  071E                     	;# 
   886  0796                     	;# 
   887  0797                     	;# 
   888  0798                     	;# 
   889  0799                     	;# 
   890  079A                     	;# 
   891  079B                     	;# 
   892  080C                     	;# 
   893  080D                     	;# 
   894  080E                     	;# 
   895  080F                     	;# 
   896  0810                     	;# 
   897  0811                     	;# 
   898  0812                     	;# 
   899  0813                     	;# 
   900  0814                     	;# 
   901  081A                     	;# 
   902  081B                     	;# 
   903  081C                     	;# 
   904  081D                     	;# 
   905  081E                     	;# 
   906  081F                     	;# 
   907  088C                     	;# 
   908  088D                     	;# 
   909  088E                     	;# 
   910  088F                     	;# 
   911  0890                     	;# 
   912  0891                     	;# 
   913  0892                     	;# 
   914  0893                     	;# 
   915  0895                     	;# 
   916  0896                     	;# 
   917  0897                     	;# 
   918  0898                     	;# 
   919  0899                     	;# 
   920  089A                     	;# 
   921  089B                     	;# 
   922  090C                     	;# 
   923  090E                     	;# 
   924  090F                     	;# 
   925  091F                     	;# 
   926  091F                     	;# 
   927  098F                     	;# 
   928  098F                     	;# 
   929  0990                     	;# 
   930  0991                     	;# 
   931  0992                     	;# 
   932  0993                     	;# 
   933  0994                     	;# 
   934  0995                     	;# 
   935  0996                     	;# 
   936  0997                     	;# 
   937  0E0F                     	;# 
   938  0E10                     	;# 
   939  0E11                     	;# 
   940  0E12                     	;# 
   941  0E13                     	;# 
   942  0E14                     	;# 
   943  0E15                     	;# 
   944  0E16                     	;# 
   945  0E17                     	;# 
   946  0E18                     	;# 
   947  0E19                     	;# 
   948  0E1A                     	;# 
   949  0E1B                     	;# 
   950  0E1C                     	;# 
   951  0E1D                     	;# 
   952  0E1E                     	;# 
   953  0E1F                     	;# 
   954  0E20                     	;# 
   955  0E21                     	;# 
   956  0E22                     	;# 
   957  0E23                     	;# 
   958  0E24                     	;# 
   959  0E25                     	;# 
   960  0E26                     	;# 
   961  0E27                     	;# 
   962  0E28                     	;# 
   963  0E29                     	;# 
   964  0E2A                     	;# 
   965  0E2B                     	;# 
   966  0E2C                     	;# 
   967  0E2D                     	;# 
   968  0E2E                     	;# 
   969  0E2F                     	;# 
   970  0E30                     	;# 
   971  0E31                     	;# 
   972  0E32                     	;# 
   973  0E33                     	;# 
   974  0E34                     	;# 
   975  0E35                     	;# 
   976  0E36                     	;# 
   977  0E37                     	;# 
   978  0E8F                     	;# 
   979  0E90                     	;# 
   980  0E91                     	;# 
   981  0E92                     	;# 
   982  0E93                     	;# 
   983  0E94                     	;# 
   984  0E95                     	;# 
   985  0E96                     	;# 
   986  0E97                     	;# 
   987  0E9C                     	;# 
   988  0E9D                     	;# 
   989  0E9E                     	;# 
   990  0EA1                     	;# 
   991  0EA2                     	;# 
   992  0EA3                     	;# 
   993  0EA4                     	;# 
   994  0EA5                     	;# 
   995  0EA9                     	;# 
   996  0EAA                     	;# 
   997  0EAB                     	;# 
   998  0EAC                     	;# 
   999  0EB1                     	;# 
  1000  0EB2                     	;# 
  1001  0EB3                     	;# 
  1002  0EB8                     	;# 
  1003  0EB9                     	;# 
  1004  0EBA                     	;# 
  1005  0EBB                     	;# 
  1006  0EBC                     	;# 
  1007  0EBD                     	;# 
  1008  0EBE                     	;# 
  1009  0EC3                     	;# 
  1010  0EC5                     	;# 
  1011  0EC6                     	;# 
  1012  0EC7                     	;# 
  1013  0EC8                     	;# 
  1014  0EC9                     	;# 
  1015  0ECA                     	;# 
  1016  0ECB                     	;# 
  1017  0ECC                     	;# 
  1018  0F10                     	;# 
  1019  0F11                     	;# 
  1020  0F12                     	;# 
  1021  0F13                     	;# 
  1022  0F14                     	;# 
  1023  0F15                     	;# 
  1024  0F16                     	;# 
  1025  0F17                     	;# 
  1026  0F18                     	;# 
  1027  0F19                     	;# 
  1028  0F1A                     	;# 
  1029  0F1B                     	;# 
  1030  0F1C                     	;# 
  1031  0F1D                     	;# 
  1032  0F1E                     	;# 
  1033  0F1F                     	;# 
  1034  0F20                     	;# 
  1035  0F21                     	;# 
  1036  0F22                     	;# 
  1037  0F23                     	;# 
  1038  0F24                     	;# 
  1039  0F25                     	;# 
  1040  0F26                     	;# 
  1041  0F27                     	;# 
  1042  0F38                     	;# 
  1043  0F39                     	;# 
  1044  0F3A                     	;# 
  1045  0F3B                     	;# 
  1046  0F3C                     	;# 
  1047  0F3D                     	;# 
  1048  0F3E                     	;# 
  1049  0F3F                     	;# 
  1050  0F40                     	;# 
  1051  0F41                     	;# 
  1052  0F43                     	;# 
  1053  0F44                     	;# 
  1054  0F45                     	;# 
  1055  0F46                     	;# 
  1056  0F47                     	;# 
  1057  0F48                     	;# 
  1058  0F49                     	;# 
  1059  0F4A                     	;# 
  1060  0F4B                     	;# 
  1061  0F4C                     	;# 
  1062  0F4E                     	;# 
  1063  0F4F                     	;# 
  1064  0F50                     	;# 
  1065  0F51                     	;# 
  1066  0F52                     	;# 
  1067  0F53                     	;# 
  1068  0F54                     	;# 
  1069  0F55                     	;# 
  1070  0F56                     	;# 
  1071  0F57                     	;# 
  1072  0F65                     	;# 
  1073  0F68                     	;# 
  1074  0F69                     	;# 
  1075  0F6A                     	;# 
  1076  0F6B                     	;# 
  1077  0FE4                     	;# 
  1078  0FE5                     	;# 
  1079  0FE6                     	;# 
  1080  0FE7                     	;# 
  1081  0FE8                     	;# 
  1082  0FE9                     	;# 
  1083  0FEA                     	;# 
  1084  0FEB                     	;# 
  1085  0FED                     	;# 
  1086  0FEE                     	;# 
  1087  0FEF                     	;# 
  1088  0000                     	;# 
  1089  0001                     	;# 
  1090  0002                     	;# 
  1091  0003                     	;# 
  1092  0004                     	;# 
  1093  0005                     	;# 
  1094  0006                     	;# 
  1095  0007                     	;# 
  1096  0008                     	;# 
  1097  0009                     	;# 
  1098  000A                     	;# 
  1099  000B                     	;# 
  1100  000C                     	;# 
  1101  000D                     	;# 
  1102  000E                     	;# 
  1103  0010                     	;# 
  1104  0011                     	;# 
  1105  0012                     	;# 
  1106  0013                     	;# 
  1107  0016                     	;# 
  1108  0017                     	;# 
  1109  0018                     	;# 
  1110  001C                     	;# 
  1111  001C                     	;# 
  1112  001D                     	;# 
  1113  001D                     	;# 
  1114  001E                     	;# 
  1115  001F                     	;# 
  1116  008C                     	;# 
  1117  008C                     	;# 
  1118  008D                     	;# 
  1119  008E                     	;# 
  1120  008E                     	;# 
  1121  008F                     	;# 
  1122  0090                     	;# 
  1123  0090                     	;# 
  1124  0091                     	;# 
  1125  0093                     	;# 
  1126  0094                     	;# 
  1127  0095                     	;# 
  1128  0096                     	;# 
  1129  0097                     	;# 
  1130  0098                     	;# 
  1131  0099                     	;# 
  1132  009A                     	;# 
  1133  009B                     	;# 
  1134  009C                     	;# 
  1135  009D                     	;# 
  1136  009E                     	;# 
  1137  010C                     	;# 
  1138  010D                     	;# 
  1139  010E                     	;# 
  1140  010E                     	;# 
  1141  010F                     	;# 
  1142  0110                     	;# 
  1143  0110                     	;# 
  1144  0111                     	;# 
  1145  0112                     	;# 
  1146  0112                     	;# 
  1147  0113                     	;# 
  1148  0114                     	;# 
  1149  0114                     	;# 
  1150  0115                     	;# 
  1151  0116                     	;# 
  1152  0116                     	;# 
  1153  0117                     	;# 
  1154  0119                     	;# 
  1155  0119                     	;# 
  1156  0119                     	;# 
  1157  011A                     	;# 
  1158  011A                     	;# 
  1159  011A                     	;# 
  1160  011B                     	;# 
  1161  011B                     	;# 
  1162  011B                     	;# 
  1163  011B                     	;# 
  1164  011B                     	;# 
  1165  011C                     	;# 
  1166  011C                     	;# 
  1167  011C                     	;# 
  1168  011D                     	;# 
  1169  011D                     	;# 
  1170  011D                     	;# 
  1171  011E                     	;# 
  1172  011E                     	;# 
  1173  011E                     	;# 
  1174  011F                     	;# 
  1175  011F                     	;# 
  1176  011F                     	;# 
  1177  011F                     	;# 
  1178  011F                     	;# 
  1179  018C                     	;# 
  1180  018D                     	;# 
  1181  018E                     	;# 
  1182  018F                     	;# 
  1183  0190                     	;# 
  1184  0191                     	;# 
  1185  0192                     	;# 
  1186  0196                     	;# 
  1187  0197                     	;# 
  1188  0198                     	;# 
  1189  0199                     	;# 
  1190  019A                     	;# 
  1191  019B                     	;# 
  1192  019C                     	;# 
  1193  020C                     	;# 
  1194  020D                     	;# 
  1195  020E                     	;# 
  1196  020F                     	;# 
  1197  020F                     	;# 
  1198  0210                     	;# 
  1199  0210                     	;# 
  1200  0211                     	;# 
  1201  0211                     	;# 
  1202  0212                     	;# 
  1203  0213                     	;# 
  1204  0214                     	;# 
  1205  0215                     	;# 
  1206  0215                     	;# 
  1207  0216                     	;# 
  1208  0216                     	;# 
  1209  0217                     	;# 
  1210  0217                     	;# 
  1211  0218                     	;# 
  1212  0219                     	;# 
  1213  021A                     	;# 
  1214  021B                     	;# 
  1215  021B                     	;# 
  1216  021C                     	;# 
  1217  021C                     	;# 
  1218  021D                     	;# 
  1219  021D                     	;# 
  1220  021E                     	;# 
  1221  021F                     	;# 
  1222  028C                     	;# 
  1223  028C                     	;# 
  1224  028D                     	;# 
  1225  028D                     	;# 
  1226  028E                     	;# 
  1227  028F                     	;# 
  1228  0290                     	;# 
  1229  0290                     	;# 
  1230  0291                     	;# 
  1231  0292                     	;# 
  1232  0292                     	;# 
  1233  0293                     	;# 
  1234  0293                     	;# 
  1235  0294                     	;# 
  1236  0295                     	;# 
  1237  0296                     	;# 
  1238  0296                     	;# 
  1239  0297                     	;# 
  1240  0298                     	;# 
  1241  0298                     	;# 
  1242  0299                     	;# 
  1243  0299                     	;# 
  1244  029A                     	;# 
  1245  029B                     	;# 
  1246  029C                     	;# 
  1247  029C                     	;# 
  1248  029D                     	;# 
  1249  030C                     	;# 
  1250  030C                     	;# 
  1251  030D                     	;# 
  1252  030E                     	;# 
  1253  030F                     	;# 
  1254  0310                     	;# 
  1255  0310                     	;# 
  1256  0311                     	;# 
  1257  0312                     	;# 
  1258  0313                     	;# 
  1259  0314                     	;# 
  1260  0314                     	;# 
  1261  0315                     	;# 
  1262  0316                     	;# 
  1263  0317                     	;# 
  1264  0318                     	;# 
  1265  0318                     	;# 
  1266  0319                     	;# 
  1267  031A                     	;# 
  1268  031B                     	;# 
  1269  031C                     	;# 
  1270  031C                     	;# 
  1271  031D                     	;# 
  1272  031E                     	;# 
  1273  031F                     	;# 
  1274  038C                     	;# 
  1275  038D                     	;# 
  1276  038E                     	;# 
  1277  0390                     	;# 
  1278  0391                     	;# 
  1279  0392                     	;# 
  1280  040C                     	;# 
  1281  040D                     	;# 
  1282  040E                     	;# 
  1283  040F                     	;# 
  1284  0410                     	;# 
  1285  0411                     	;# 
  1286  0416                     	;# 
  1287  0416                     	;# 
  1288  0417                     	;# 
  1289  0418                     	;# 
  1290  0418                     	;# 
  1291  0419                     	;# 
  1292  041A                     	;# 
  1293  041A                     	;# 
  1294  041B                     	;# 
  1295  041C                     	;# 
  1296  041C                     	;# 
  1297  041D                     	;# 
  1298  041E                     	;# 
  1299  041F                     	;# 
  1300  048C                     	;# 
  1301  048C                     	;# 
  1302  048D                     	;# 
  1303  048E                     	;# 
  1304  048F                     	;# 
  1305  048F                     	;# 
  1306  0490                     	;# 
  1307  0491                     	;# 
  1308  0492                     	;# 
  1309  0492                     	;# 
  1310  0493                     	;# 
  1311  0494                     	;# 
  1312  0495                     	;# 
  1313  0495                     	;# 
  1314  0496                     	;# 
  1315  0497                     	;# 
  1316  0498                     	;# 
  1317  0499                     	;# 
  1318  049A                     	;# 
  1319  049B                     	;# 
  1320  049C                     	;# 
  1321  049D                     	;# 
  1322  050C                     	;# 
  1323  050C                     	;# 
  1324  050D                     	;# 
  1325  050E                     	;# 
  1326  050F                     	;# 
  1327  050F                     	;# 
  1328  0510                     	;# 
  1329  0511                     	;# 
  1330  0512                     	;# 
  1331  0512                     	;# 
  1332  0513                     	;# 
  1333  0514                     	;# 
  1334  0515                     	;# 
  1335  0515                     	;# 
  1336  0516                     	;# 
  1337  0517                     	;# 
  1338  0518                     	;# 
  1339  0519                     	;# 
  1340  051A                     	;# 
  1341  051B                     	;# 
  1342  051C                     	;# 
  1343  051D                     	;# 
  1344  058C                     	;# 
  1345  058C                     	;# 
  1346  058D                     	;# 
  1347  058E                     	;# 
  1348  058F                     	;# 
  1349  058F                     	;# 
  1350  0590                     	;# 
  1351  0591                     	;# 
  1352  0592                     	;# 
  1353  0593                     	;# 
  1354  060C                     	;# 
  1355  060D                     	;# 
  1356  060E                     	;# 
  1357  060F                     	;# 
  1358  0610                     	;# 
  1359  0611                     	;# 
  1360  0612                     	;# 
  1361  0613                     	;# 
  1362  0614                     	;# 
  1363  0616                     	;# 
  1364  0617                     	;# 
  1365  0618                     	;# 
  1366  0619                     	;# 
  1367  061A                     	;# 
  1368  061B                     	;# 
  1369  061C                     	;# 
  1370  061D                     	;# 
  1371  061E                     	;# 
  1372  068C                     	;# 
  1373  068D                     	;# 
  1374  068E                     	;# 
  1375  068F                     	;# 
  1376  0690                     	;# 
  1377  0691                     	;# 
  1378  0692                     	;# 
  1379  0693                     	;# 
  1380  0694                     	;# 
  1381  070C                     	;# 
  1382  070D                     	;# 
  1383  070E                     	;# 
  1384  070F                     	;# 
  1385  0710                     	;# 
  1386  0711                     	;# 
  1387  0712                     	;# 
  1388  0713                     	;# 
  1389  0714                     	;# 
  1390  0716                     	;# 
  1391  0717                     	;# 
  1392  0718                     	;# 
  1393  0719                     	;# 
  1394  071A                     	;# 
  1395  071B                     	;# 
  1396  071C                     	;# 
  1397  071D                     	;# 
  1398  071E                     	;# 
  1399  0796                     	;# 
  1400  0797                     	;# 
  1401  0798                     	;# 
  1402  0799                     	;# 
  1403  079A                     	;# 
  1404  079B                     	;# 
  1405  080C                     	;# 
  1406  080D                     	;# 
  1407  080E                     	;# 
  1408  080F                     	;# 
  1409  0810                     	;# 
  1410  0811                     	;# 
  1411  0812                     	;# 
  1412  0813                     	;# 
  1413  0814                     	;# 
  1414  081A                     	;# 
  1415  081B                     	;# 
  1416  081C                     	;# 
  1417  081D                     	;# 
  1418  081E                     	;# 
  1419  081F                     	;# 
  1420  088C                     	;# 
  1421  088D                     	;# 
  1422  088E                     	;# 
  1423  088F                     	;# 
  1424  0890                     	;# 
  1425  0891                     	;# 
  1426  0892                     	;# 
  1427  0893                     	;# 
  1428  0895                     	;# 
  1429  0896                     	;# 
  1430  0897                     	;# 
  1431  0898                     	;# 
  1432  0899                     	;# 
  1433  089A                     	;# 
  1434  089B                     	;# 
  1435  090C                     	;# 
  1436  090E                     	;# 
  1437  090F                     	;# 
  1438  091F                     	;# 
  1439  091F                     	;# 
  1440  098F                     	;# 
  1441  098F                     	;# 
  1442  0990                     	;# 
  1443  0991                     	;# 
  1444  0992                     	;# 
  1445  0993                     	;# 
  1446  0994                     	;# 
  1447  0995                     	;# 
  1448  0996                     	;# 
  1449  0997                     	;# 
  1450  0E0F                     	;# 
  1451  0E10                     	;# 
  1452  0E11                     	;# 
  1453  0E12                     	;# 
  1454  0E13                     	;# 
  1455  0E14                     	;# 
  1456  0E15                     	;# 
  1457  0E16                     	;# 
  1458  0E17                     	;# 
  1459  0E18                     	;# 
  1460  0E19                     	;# 
  1461  0E1A                     	;# 
  1462  0E1B                     	;# 
  1463  0E1C                     	;# 
  1464  0E1D                     	;# 
  1465  0E1E                     	;# 
  1466  0E1F                     	;# 
  1467  0E20                     	;# 
  1468  0E21                     	;# 
  1469  0E22                     	;# 
  1470  0E23                     	;# 
  1471  0E24                     	;# 
  1472  0E25                     	;# 
  1473  0E26                     	;# 
  1474  0E27                     	;# 
  1475  0E28                     	;# 
  1476  0E29                     	;# 
  1477  0E2A                     	;# 
  1478  0E2B                     	;# 
  1479  0E2C                     	;# 
  1480  0E2D                     	;# 
  1481  0E2E                     	;# 
  1482  0E2F                     	;# 
  1483  0E30                     	;# 
  1484  0E31                     	;# 
  1485  0E32                     	;# 
  1486  0E33                     	;# 
  1487  0E34                     	;# 
  1488  0E35                     	;# 
  1489  0E36                     	;# 
  1490  0E37                     	;# 
  1491  0E8F                     	;# 
  1492  0E90                     	;# 
  1493  0E91                     	;# 
  1494  0E92                     	;# 
  1495  0E93                     	;# 
  1496  0E94                     	;# 
  1497  0E95                     	;# 
  1498  0E96                     	;# 
  1499  0E97                     	;# 
  1500  0E9C                     	;# 
  1501  0E9D                     	;# 
  1502  0E9E                     	;# 
  1503  0EA1                     	;# 
  1504  0EA2                     	;# 
  1505  0EA3                     	;# 
  1506  0EA4                     	;# 
  1507  0EA5                     	;# 
  1508  0EA9                     	;# 
  1509  0EAA                     	;# 
  1510  0EAB                     	;# 
  1511  0EAC                     	;# 
  1512  0EB1                     	;# 
  1513  0EB2                     	;# 
  1514  0EB3                     	;# 
  1515  0EB8                     	;# 
  1516  0EB9                     	;# 
  1517  0EBA                     	;# 
  1518  0EBB                     	;# 
  1519  0EBC                     	;# 
  1520  0EBD                     	;# 
  1521  0EBE                     	;# 
  1522  0EC3                     	;# 
  1523  0EC5                     	;# 
  1524  0EC6                     	;# 
  1525  0EC7                     	;# 
  1526  0EC8                     	;# 
  1527  0EC9                     	;# 
  1528  0ECA                     	;# 
  1529  0ECB                     	;# 
  1530  0ECC                     	;# 
  1531  0F10                     	;# 
  1532  0F11                     	;# 
  1533  0F12                     	;# 
  1534  0F13                     	;# 
  1535  0F14                     	;# 
  1536  0F15                     	;# 
  1537  0F16                     	;# 
  1538  0F17                     	;# 
  1539  0F18                     	;# 
  1540  0F19                     	;# 
  1541  0F1A                     	;# 
  1542  0F1B                     	;# 
  1543  0F1C                     	;# 
  1544  0F1D                     	;# 
  1545  0F1E                     	;# 
  1546  0F1F                     	;# 
  1547  0F20                     	;# 
  1548  0F21                     	;# 
  1549  0F22                     	;# 
  1550  0F23                     	;# 
  1551  0F24                     	;# 
  1552  0F25                     	;# 
  1553  0F26                     	;# 
  1554  0F27                     	;# 
  1555  0F38                     	;# 
  1556  0F39                     	;# 
  1557  0F3A                     	;# 
  1558  0F3B                     	;# 
  1559  0F3C                     	;# 
  1560  0F3D                     	;# 
  1561  0F3E                     	;# 
  1562  0F3F                     	;# 
  1563  0F40                     	;# 
  1564  0F41                     	;# 
  1565  0F43                     	;# 
  1566  0F44                     	;# 
  1567  0F45                     	;# 
  1568  0F46                     	;# 
  1569  0F47                     	;# 
  1570  0F48                     	;# 
  1571  0F49                     	;# 
  1572  0F4A                     	;# 
  1573  0F4B                     	;# 
  1574  0F4C                     	;# 
  1575  0F4E                     	;# 
  1576  0F4F                     	;# 
  1577  0F50                     	;# 
  1578  0F51                     	;# 
  1579  0F52                     	;# 
  1580  0F53                     	;# 
  1581  0F54                     	;# 
  1582  0F55                     	;# 
  1583  0F56                     	;# 
  1584  0F57                     	;# 
  1585  0F65                     	;# 
  1586  0F68                     	;# 
  1587  0F69                     	;# 
  1588  0F6A                     	;# 
  1589  0F6B                     	;# 
  1590  0FE4                     	;# 
  1591  0FE5                     	;# 
  1592  0FE6                     	;# 
  1593  0FE7                     	;# 
  1594  0FE8                     	;# 
  1595  0FE9                     	;# 
  1596  0FEA                     	;# 
  1597  0FEB                     	;# 
  1598  0FED                     	;# 
  1599  0FEE                     	;# 
  1600  0FEF                     	;# 
  1601  0000                     	;# 
  1602  0001                     	;# 
  1603  0002                     	;# 
  1604  0003                     	;# 
  1605  0004                     	;# 
  1606  0005                     	;# 
  1607  0006                     	;# 
  1608  0007                     	;# 
  1609  0008                     	;# 
  1610  0009                     	;# 
  1611  000A                     	;# 
  1612  000B                     	;# 
  1613  000C                     	;# 
  1614  000D                     	;# 
  1615  000E                     	;# 
  1616  0010                     	;# 
  1617  0011                     	;# 
  1618  0012                     	;# 
  1619  0013                     	;# 
  1620  0016                     	;# 
  1621  0017                     	;# 
  1622  0018                     	;# 
  1623  001C                     	;# 
  1624  001C                     	;# 
  1625  001D                     	;# 
  1626  001D                     	;# 
  1627  001E                     	;# 
  1628  001F                     	;# 
  1629  008C                     	;# 
  1630  008C                     	;# 
  1631  008D                     	;# 
  1632  008E                     	;# 
  1633  008E                     	;# 
  1634  008F                     	;# 
  1635  0090                     	;# 
  1636  0090                     	;# 
  1637  0091                     	;# 
  1638  0093                     	;# 
  1639  0094                     	;# 
  1640  0095                     	;# 
  1641  0096                     	;# 
  1642  0097                     	;# 
  1643  0098                     	;# 
  1644  0099                     	;# 
  1645  009A                     	;# 
  1646  009B                     	;# 
  1647  009C                     	;# 
  1648  009D                     	;# 
  1649  009E                     	;# 
  1650  010C                     	;# 
  1651  010D                     	;# 
  1652  010E                     	;# 
  1653  010E                     	;# 
  1654  010F                     	;# 
  1655  0110                     	;# 
  1656  0110                     	;# 
  1657  0111                     	;# 
  1658  0112                     	;# 
  1659  0112                     	;# 
  1660  0113                     	;# 
  1661  0114                     	;# 
  1662  0114                     	;# 
  1663  0115                     	;# 
  1664  0116                     	;# 
  1665  0116                     	;# 
  1666  0117                     	;# 
  1667  0119                     	;# 
  1668  0119                     	;# 
  1669  0119                     	;# 
  1670  011A                     	;# 
  1671  011A                     	;# 
  1672  011A                     	;# 
  1673  011B                     	;# 
  1674  011B                     	;# 
  1675  011B                     	;# 
  1676  011B                     	;# 
  1677  011B                     	;# 
  1678  011C                     	;# 
  1679  011C                     	;# 
  1680  011C                     	;# 
  1681  011D                     	;# 
  1682  011D                     	;# 
  1683  011D                     	;# 
  1684  011E                     	;# 
  1685  011E                     	;# 
  1686  011E                     	;# 
  1687  011F                     	;# 
  1688  011F                     	;# 
  1689  011F                     	;# 
  1690  011F                     	;# 
  1691  011F                     	;# 
  1692  018C                     	;# 
  1693  018D                     	;# 
  1694  018E                     	;# 
  1695  018F                     	;# 
  1696  0190                     	;# 
  1697  0191                     	;# 
  1698  0192                     	;# 
  1699  0196                     	;# 
  1700  0197                     	;# 
  1701  0198                     	;# 
  1702  0199                     	;# 
  1703  019A                     	;# 
  1704  019B                     	;# 
  1705  019C                     	;# 
  1706  020C                     	;# 
  1707  020D                     	;# 
  1708  020E                     	;# 
  1709  020F                     	;# 
  1710  020F                     	;# 
  1711  0210                     	;# 
  1712  0210                     	;# 
  1713  0211                     	;# 
  1714  0211                     	;# 
  1715  0212                     	;# 
  1716  0213                     	;# 
  1717  0214                     	;# 
  1718  0215                     	;# 
  1719  0215                     	;# 
  1720  0216                     	;# 
  1721  0216                     	;# 
  1722  0217                     	;# 
  1723  0217                     	;# 
  1724  0218                     	;# 
  1725  0219                     	;# 
  1726  021A                     	;# 
  1727  021B                     	;# 
  1728  021B                     	;# 
  1729  021C                     	;# 
  1730  021C                     	;# 
  1731  021D                     	;# 
  1732  021D                     	;# 
  1733  021E                     	;# 
  1734  021F                     	;# 
  1735  028C                     	;# 
  1736  028C                     	;# 
  1737  028D                     	;# 
  1738  028D                     	;# 
  1739  028E                     	;# 
  1740  028F                     	;# 
  1741  0290                     	;# 
  1742  0290                     	;# 
  1743  0291                     	;# 
  1744  0292                     	;# 
  1745  0292                     	;# 
  1746  0293                     	;# 
  1747  0293                     	;# 
  1748  0294                     	;# 
  1749  0295                     	;# 
  1750  0296                     	;# 
  1751  0296                     	;# 
  1752  0297                     	;# 
  1753  0298                     	;# 
  1754  0298                     	;# 
  1755  0299                     	;# 
  1756  0299                     	;# 
  1757  029A                     	;# 
  1758  029B                     	;# 
  1759  029C                     	;# 
  1760  029C                     	;# 
  1761  029D                     	;# 
  1762  030C                     	;# 
  1763  030C                     	;# 
  1764  030D                     	;# 
  1765  030E                     	;# 
  1766  030F                     	;# 
  1767  0310                     	;# 
  1768  0310                     	;# 
  1769  0311                     	;# 
  1770  0312                     	;# 
  1771  0313                     	;# 
  1772  0314                     	;# 
  1773  0314                     	;# 
  1774  0315                     	;# 
  1775  0316                     	;# 
  1776  0317                     	;# 
  1777  0318                     	;# 
  1778  0318                     	;# 
  1779  0319                     	;# 
  1780  031A                     	;# 
  1781  031B                     	;# 
  1782  031C                     	;# 
  1783  031C                     	;# 
  1784  031D                     	;# 
  1785  031E                     	;# 
  1786  031F                     	;# 
  1787  038C                     	;# 
  1788  038D                     	;# 
  1789  038E                     	;# 
  1790  0390                     	;# 
  1791  0391                     	;# 
  1792  0392                     	;# 
  1793  040C                     	;# 
  1794  040D                     	;# 
  1795  040E                     	;# 
  1796  040F                     	;# 
  1797  0410                     	;# 
  1798  0411                     	;# 
  1799  0416                     	;# 
  1800  0416                     	;# 
  1801  0417                     	;# 
  1802  0418                     	;# 
  1803  0418                     	;# 
  1804  0419                     	;# 
  1805  041A                     	;# 
  1806  041A                     	;# 
  1807  041B                     	;# 
  1808  041C                     	;# 
  1809  041C                     	;# 
  1810  041D                     	;# 
  1811  041E                     	;# 
  1812  041F                     	;# 
  1813  048C                     	;# 
  1814  048C                     	;# 
  1815  048D                     	;# 
  1816  048E                     	;# 
  1817  048F                     	;# 
  1818  048F                     	;# 
  1819  0490                     	;# 
  1820  0491                     	;# 
  1821  0492                     	;# 
  1822  0492                     	;# 
  1823  0493                     	;# 
  1824  0494                     	;# 
  1825  0495                     	;# 
  1826  0495                     	;# 
  1827  0496                     	;# 
  1828  0497                     	;# 
  1829  0498                     	;# 
  1830  0499                     	;# 
  1831  049A                     	;# 
  1832  049B                     	;# 
  1833  049C                     	;# 
  1834  049D                     	;# 
  1835  050C                     	;# 
  1836  050C                     	;# 
  1837  050D                     	;# 
  1838  050E                     	;# 
  1839  050F                     	;# 
  1840  050F                     	;# 
  1841  0510                     	;# 
  1842  0511                     	;# 
  1843  0512                     	;# 
  1844  0512                     	;# 
  1845  0513                     	;# 
  1846  0514                     	;# 
  1847  0515                     	;# 
  1848  0515                     	;# 
  1849  0516                     	;# 
  1850  0517                     	;# 
  1851  0518                     	;# 
  1852  0519                     	;# 
  1853  051A                     	;# 
  1854  051B                     	;# 
  1855  051C                     	;# 
  1856  051D                     	;# 
  1857  058C                     	;# 
  1858  058C                     	;# 
  1859  058D                     	;# 
  1860  058E                     	;# 
  1861  058F                     	;# 
  1862  058F                     	;# 
  1863  0590                     	;# 
  1864  0591                     	;# 
  1865  0592                     	;# 
  1866  0593                     	;# 
  1867  060C                     	;# 
  1868  060D                     	;# 
  1869  060E                     	;# 
  1870  060F                     	;# 
  1871  0610                     	;# 
  1872  0611                     	;# 
  1873  0612                     	;# 
  1874  0613                     	;# 
  1875  0614                     	;# 
  1876  0616                     	;# 
  1877  0617                     	;# 
  1878  0618                     	;# 
  1879  0619                     	;# 
  1880  061A                     	;# 
  1881  061B                     	;# 
  1882  061C                     	;# 
  1883  061D                     	;# 
  1884  061E                     	;# 
  1885  068C                     	;# 
  1886  068D                     	;# 
  1887  068E                     	;# 
  1888  068F                     	;# 
  1889  0690                     	;# 
  1890  0691                     	;# 
  1891  0692                     	;# 
  1892  0693                     	;# 
  1893  0694                     	;# 
  1894  070C                     	;# 
  1895  070D                     	;# 
  1896  070E                     	;# 
  1897  070F                     	;# 
  1898  0710                     	;# 
  1899  0711                     	;# 
  1900  0712                     	;# 
  1901  0713                     	;# 
  1902  0714                     	;# 
  1903  0716                     	;# 
  1904  0717                     	;# 
  1905  0718                     	;# 
  1906  0719                     	;# 
  1907  071A                     	;# 
  1908  071B                     	;# 
  1909  071C                     	;# 
  1910  071D                     	;# 
  1911  071E                     	;# 
  1912  0796                     	;# 
  1913  0797                     	;# 
  1914  0798                     	;# 
  1915  0799                     	;# 
  1916  079A                     	;# 
  1917  079B                     	;# 
  1918  080C                     	;# 
  1919  080D                     	;# 
  1920  080E                     	;# 
  1921  080F                     	;# 
  1922  0810                     	;# 
  1923  0811                     	;# 
  1924  0812                     	;# 
  1925  0813                     	;# 
  1926  0814                     	;# 
  1927  081A                     	;# 
  1928  081B                     	;# 
  1929  081C                     	;# 
  1930  081D                     	;# 
  1931  081E                     	;# 
  1932  081F                     	;# 
  1933  088C                     	;# 
  1934  088D                     	;# 
  1935  088E                     	;# 
  1936  088F                     	;# 
  1937  0890                     	;# 
  1938  0891                     	;# 
  1939  0892                     	;# 
  1940  0893                     	;# 
  1941  0895                     	;# 
  1942  0896                     	;# 
  1943  0897                     	;# 
  1944  0898                     	;# 
  1945  0899                     	;# 
  1946  089A                     	;# 
  1947  089B                     	;# 
  1948  090C                     	;# 
  1949  090E                     	;# 
  1950  090F                     	;# 
  1951  091F                     	;# 
  1952  091F                     	;# 
  1953  098F                     	;# 
  1954  098F                     	;# 
  1955  0990                     	;# 
  1956  0991                     	;# 
  1957  0992                     	;# 
  1958  0993                     	;# 
  1959  0994                     	;# 
  1960  0995                     	;# 
  1961  0996                     	;# 
  1962  0997                     	;# 
  1963  0E0F                     	;# 
  1964  0E10                     	;# 
  1965  0E11                     	;# 
  1966  0E12                     	;# 
  1967  0E13                     	;# 
  1968  0E14                     	;# 
  1969  0E15                     	;# 
  1970  0E16                     	;# 
  1971  0E17                     	;# 
  1972  0E18                     	;# 
  1973  0E19                     	;# 
  1974  0E1A                     	;# 
  1975  0E1B                     	;# 
  1976  0E1C                     	;# 
  1977  0E1D                     	;# 
  1978  0E1E                     	;# 
  1979  0E1F                     	;# 
  1980  0E20                     	;# 
  1981  0E21                     	;# 
  1982  0E22                     	;# 
  1983  0E23                     	;# 
  1984  0E24                     	;# 
  1985  0E25                     	;# 
  1986  0E26                     	;# 
  1987  0E27                     	;# 
  1988  0E28                     	;# 
  1989  0E29                     	;# 
  1990  0E2A                     	;# 
  1991  0E2B                     	;# 
  1992  0E2C                     	;# 
  1993  0E2D                     	;# 
  1994  0E2E                     	;# 
  1995  0E2F                     	;# 
  1996  0E30                     	;# 
  1997  0E31                     	;# 
  1998  0E32                     	;# 
  1999  0E33                     	;# 
  2000  0E34                     	;# 
  2001  0E35                     	;# 
  2002  0E36                     	;# 
  2003  0E37                     	;# 
  2004  0E8F                     	;# 
  2005  0E90                     	;# 
  2006  0E91                     	;# 
  2007  0E92                     	;# 
  2008  0E93                     	;# 
  2009  0E94                     	;# 
  2010  0E95                     	;# 
  2011  0E96                     	;# 
  2012  0E97                     	;# 
  2013  0E9C                     	;# 
  2014  0E9D                     	;# 
  2015  0E9E                     	;# 
  2016  0EA1                     	;# 
  2017  0EA2                     	;# 
  2018  0EA3                     	;# 
  2019  0EA4                     	;# 
  2020  0EA5                     	;# 
  2021  0EA9                     	;# 
  2022  0EAA                     	;# 
  2023  0EAB                     	;# 
  2024  0EAC                     	;# 
  2025  0EB1                     	;# 
  2026  0EB2                     	;# 
  2027  0EB3                     	;# 
  2028  0EB8                     	;# 
  2029  0EB9                     	;# 
  2030  0EBA                     	;# 
  2031  0EBB                     	;# 
  2032  0EBC                     	;# 
  2033  0EBD                     	;# 
  2034  0EBE                     	;# 
  2035  0EC3                     	;# 
  2036  0EC5                     	;# 
  2037  0EC6                     	;# 
  2038  0EC7                     	;# 
  2039  0EC8                     	;# 
  2040  0EC9                     	;# 
  2041  0ECA                     	;# 
  2042  0ECB                     	;# 
  2043  0ECC                     	;# 
  2044  0F10                     	;# 
  2045  0F11                     	;# 
  2046  0F12                     	;# 
  2047  0F13                     	;# 
  2048  0F14                     	;# 
  2049  0F15                     	;# 
  2050  0F16                     	;# 
  2051  0F17                     	;# 
  2052  0F18                     	;# 
  2053  0F19                     	;# 
  2054  0F1A                     	;# 
  2055  0F1B                     	;# 
  2056  0F1C                     	;# 
  2057  0F1D                     	;# 
  2058  0F1E                     	;# 
  2059  0F1F                     	;# 
  2060  0F20                     	;# 
  2061  0F21                     	;# 
  2062  0F22                     	;# 
  2063  0F23                     	;# 
  2064  0F24                     	;# 
  2065  0F25                     	;# 
  2066  0F26                     	;# 
  2067  0F27                     	;# 
  2068  0F38                     	;# 
  2069  0F39                     	;# 
  2070  0F3A                     	;# 
  2071  0F3B                     	;# 
  2072  0F3C                     	;# 
  2073  0F3D                     	;# 
  2074  0F3E                     	;# 
  2075  0F3F                     	;# 
  2076  0F40                     	;# 
  2077  0F41                     	;# 
  2078  0F43                     	;# 
  2079  0F44                     	;# 
  2080  0F45                     	;# 
  2081  0F46                     	;# 
  2082  0F47                     	;# 
  2083  0F48                     	;# 
  2084  0F49                     	;# 
  2085  0F4A                     	;# 
  2086  0F4B                     	;# 
  2087  0F4C                     	;# 
  2088  0F4E                     	;# 
  2089  0F4F                     	;# 
  2090  0F50                     	;# 
  2091  0F51                     	;# 
  2092  0F52                     	;# 
  2093  0F53                     	;# 
  2094  0F54                     	;# 
  2095  0F55                     	;# 
  2096  0F56                     	;# 
  2097  0F57                     	;# 
  2098  0F65                     	;# 
  2099  0F68                     	;# 
  2100  0F69                     	;# 
  2101  0F6A                     	;# 
  2102  0F6B                     	;# 
  2103  0FE4                     	;# 
  2104  0FE5                     	;# 
  2105  0FE6                     	;# 
  2106  0FE7                     	;# 
  2107  0FE8                     	;# 
  2108  0FE9                     	;# 
  2109  0FEA                     	;# 
  2110  0FEB                     	;# 
  2111  0FED                     	;# 
  2112  0FEE                     	;# 
  2113  0FEF                     	;# 
  2114  0000                     	;# 
  2115  0001                     	;# 
  2116  0002                     	;# 
  2117  0003                     	;# 
  2118  0004                     	;# 
  2119  0005                     	;# 
  2120  0006                     	;# 
  2121  0007                     	;# 
  2122  0008                     	;# 
  2123  0009                     	;# 
  2124  000A                     	;# 
  2125  000B                     	;# 
  2126  000C                     	;# 
  2127  000D                     	;# 
  2128  000E                     	;# 
  2129  0010                     	;# 
  2130  0011                     	;# 
  2131  0012                     	;# 
  2132  0013                     	;# 
  2133  0016                     	;# 
  2134  0017                     	;# 
  2135  0018                     	;# 
  2136  001C                     	;# 
  2137  001C                     	;# 
  2138  001D                     	;# 
  2139  001D                     	;# 
  2140  001E                     	;# 
  2141  001F                     	;# 
  2142  008C                     	;# 
  2143  008C                     	;# 
  2144  008D                     	;# 
  2145  008E                     	;# 
  2146  008E                     	;# 
  2147  008F                     	;# 
  2148  0090                     	;# 
  2149  0090                     	;# 
  2150  0091                     	;# 
  2151  0093                     	;# 
  2152  0094                     	;# 
  2153  0095                     	;# 
  2154  0096                     	;# 
  2155  0097                     	;# 
  2156  0098                     	;# 
  2157  0099                     	;# 
  2158  009A                     	;# 
  2159  009B                     	;# 
  2160  009C                     	;# 
  2161  009D                     	;# 
  2162  009E                     	;# 
  2163  010C                     	;# 
  2164  010D                     	;# 
  2165  010E                     	;# 
  2166  010E                     	;# 
  2167  010F                     	;# 
  2168  0110                     	;# 
  2169  0110                     	;# 
  2170  0111                     	;# 
  2171  0112                     	;# 
  2172  0112                     	;# 
  2173  0113                     	;# 
  2174  0114                     	;# 
  2175  0114                     	;# 
  2176  0115                     	;# 
  2177  0116                     	;# 
  2178  0116                     	;# 
  2179  0117                     	;# 
  2180  0119                     	;# 
  2181  0119                     	;# 
  2182  0119                     	;# 
  2183  011A                     	;# 
  2184  011A                     	;# 
  2185  011A                     	;# 
  2186  011B                     	;# 
  2187  011B                     	;# 
  2188  011B                     	;# 
  2189  011B                     	;# 
  2190  011B                     	;# 
  2191  011C                     	;# 
  2192  011C                     	;# 
  2193  011C                     	;# 
  2194  011D                     	;# 
  2195  011D                     	;# 
  2196  011D                     	;# 
  2197  011E                     	;# 
  2198  011E                     	;# 
  2199  011E                     	;# 
  2200  011F                     	;# 
  2201  011F                     	;# 
  2202  011F                     	;# 
  2203  011F                     	;# 
  2204  011F                     	;# 
  2205  018C                     	;# 
  2206  018D                     	;# 
  2207  018E                     	;# 
  2208  018F                     	;# 
  2209  0190                     	;# 
  2210  0191                     	;# 
  2211  0192                     	;# 
  2212  0196                     	;# 
  2213  0197                     	;# 
  2214  0198                     	;# 
  2215  0199                     	;# 
  2216  019A                     	;# 
  2217  019B                     	;# 
  2218  019C                     	;# 
  2219  020C                     	;# 
  2220  020D                     	;# 
  2221  020E                     	;# 
  2222  020F                     	;# 
  2223  020F                     	;# 
  2224  0210                     	;# 
  2225  0210                     	;# 
  2226  0211                     	;# 
  2227  0211                     	;# 
  2228  0212                     	;# 
  2229  0213                     	;# 
  2230  0214                     	;# 
  2231  0215                     	;# 
  2232  0215                     	;# 
  2233  0216                     	;# 
  2234  0216                     	;# 
  2235  0217                     	;# 
  2236  0217                     	;# 
  2237  0218                     	;# 
  2238  0219                     	;# 
  2239  021A                     	;# 
  2240  021B                     	;# 
  2241  021B                     	;# 
  2242  021C                     	;# 
  2243  021C                     	;# 
  2244  021D                     	;# 
  2245  021D                     	;# 
  2246  021E                     	;# 
  2247  021F                     	;# 
  2248  028C                     	;# 
  2249  028C                     	;# 
  2250  028D                     	;# 
  2251  028D                     	;# 
  2252  028E                     	;# 
  2253  028F                     	;# 
  2254  0290                     	;# 
  2255  0290                     	;# 
  2256  0291                     	;# 
  2257  0292                     	;# 
  2258  0292                     	;# 
  2259  0293                     	;# 
  2260  0293                     	;# 
  2261  0294                     	;# 
  2262  0295                     	;# 
  2263  0296                     	;# 
  2264  0296                     	;# 
  2265  0297                     	;# 
  2266  0298                     	;# 
  2267  0298                     	;# 
  2268  0299                     	;# 
  2269  0299                     	;# 
  2270  029A                     	;# 
  2271  029B                     	;# 
  2272  029C                     	;# 
  2273  029C                     	;# 
  2274  029D                     	;# 
  2275  030C                     	;# 
  2276  030C                     	;# 
  2277  030D                     	;# 
  2278  030E                     	;# 
  2279  030F                     	;# 
  2280  0310                     	;# 
  2281  0310                     	;# 
  2282  0311                     	;# 
  2283  0312                     	;# 
  2284  0313                     	;# 
  2285  0314                     	;# 
  2286  0314                     	;# 
  2287  0315                     	;# 
  2288  0316                     	;# 
  2289  0317                     	;# 
  2290  0318                     	;# 
  2291  0318                     	;# 
  2292  0319                     	;# 
  2293  031A                     	;# 
  2294  031B                     	;# 
  2295  031C                     	;# 
  2296  031C                     	;# 
  2297  031D                     	;# 
  2298  031E                     	;# 
  2299  031F                     	;# 
  2300  038C                     	;# 
  2301  038D                     	;# 
  2302  038E                     	;# 
  2303  0390                     	;# 
  2304  0391                     	;# 
  2305  0392                     	;# 
  2306  040C                     	;# 
  2307  040D                     	;# 
  2308  040E                     	;# 
  2309  040F                     	;# 
  2310  0410                     	;# 
  2311  0411                     	;# 
  2312  0416                     	;# 
  2313  0416                     	;# 
  2314  0417                     	;# 
  2315  0418                     	;# 
  2316  0418                     	;# 
  2317  0419                     	;# 
  2318  041A                     	;# 
  2319  041A                     	;# 
  2320  041B                     	;# 
  2321  041C                     	;# 
  2322  041C                     	;# 
  2323  041D                     	;# 
  2324  041E                     	;# 
  2325  041F                     	;# 
  2326  048C                     	;# 
  2327  048C                     	;# 
  2328  048D                     	;# 
  2329  048E                     	;# 
  2330  048F                     	;# 
  2331  048F                     	;# 
  2332  0490                     	;# 
  2333  0491                     	;# 
  2334  0492                     	;# 
  2335  0492                     	;# 
  2336  0493                     	;# 
  2337  0494                     	;# 
  2338  0495                     	;# 
  2339  0495                     	;# 
  2340  0496                     	;# 
  2341  0497                     	;# 
  2342  0498                     	;# 
  2343  0499                     	;# 
  2344  049A                     	;# 
  2345  049B                     	;# 
  2346  049C                     	;# 
  2347  049D                     	;# 
  2348  050C                     	;# 
  2349  050C                     	;# 
  2350  050D                     	;# 
  2351  050E                     	;# 
  2352  050F                     	;# 
  2353  050F                     	;# 
  2354  0510                     	;# 
  2355  0511                     	;# 
  2356  0512                     	;# 
  2357  0512                     	;# 
  2358  0513                     	;# 
  2359  0514                     	;# 
  2360  0515                     	;# 
  2361  0515                     	;# 
  2362  0516                     	;# 
  2363  0517                     	;# 
  2364  0518                     	;# 
  2365  0519                     	;# 
  2366  051A                     	;# 
  2367  051B                     	;# 
  2368  051C                     	;# 
  2369  051D                     	;# 
  2370  058C                     	;# 
  2371  058C                     	;# 
  2372  058D                     	;# 
  2373  058E                     	;# 
  2374  058F                     	;# 
  2375  058F                     	;# 
  2376  0590                     	;# 
  2377  0591                     	;# 
  2378  0592                     	;# 
  2379  0593                     	;# 
  2380  060C                     	;# 
  2381  060D                     	;# 
  2382  060E                     	;# 
  2383  060F                     	;# 
  2384  0610                     	;# 
  2385  0611                     	;# 
  2386  0612                     	;# 
  2387  0613                     	;# 
  2388  0614                     	;# 
  2389  0616                     	;# 
  2390  0617                     	;# 
  2391  0618                     	;# 
  2392  0619                     	;# 
  2393  061A                     	;# 
  2394  061B                     	;# 
  2395  061C                     	;# 
  2396  061D                     	;# 
  2397  061E                     	;# 
  2398  068C                     	;# 
  2399  068D                     	;# 
  2400  068E                     	;# 
  2401  068F                     	;# 
  2402  0690                     	;# 
  2403  0691                     	;# 
  2404  0692                     	;# 
  2405  0693                     	;# 
  2406  0694                     	;# 
  2407  070C                     	;# 
  2408  070D                     	;# 
  2409  070E                     	;# 
  2410  070F                     	;# 
  2411  0710                     	;# 
  2412  0711                     	;# 
  2413  0712                     	;# 
  2414  0713                     	;# 
  2415  0714                     	;# 
  2416  0716                     	;# 
  2417  0717                     	;# 
  2418  0718                     	;# 
  2419  0719                     	;# 
  2420  071A                     	;# 
  2421  071B                     	;# 
  2422  071C                     	;# 
  2423  071D                     	;# 
  2424  071E                     	;# 
  2425  0796                     	;# 
  2426  0797                     	;# 
  2427  0798                     	;# 
  2428  0799                     	;# 
  2429  079A                     	;# 
  2430  079B                     	;# 
  2431  080C                     	;# 
  2432  080D                     	;# 
  2433  080E                     	;# 
  2434  080F                     	;# 
  2435  0810                     	;# 
  2436  0811                     	;# 
  2437  0812                     	;# 
  2438  0813                     	;# 
  2439  0814                     	;# 
  2440  081A                     	;# 
  2441  081B                     	;# 
  2442  081C                     	;# 
  2443  081D                     	;# 
  2444  081E                     	;# 
  2445  081F                     	;# 
  2446  088C                     	;# 
  2447  088D                     	;# 
  2448  088E                     	;# 
  2449  088F                     	;# 
  2450  0890                     	;# 
  2451  0891                     	;# 
  2452  0892                     	;# 
  2453  0893                     	;# 
  2454  0895                     	;# 
  2455  0896                     	;# 
  2456  0897                     	;# 
  2457  0898                     	;# 
  2458  0899                     	;# 
  2459  089A                     	;# 
  2460  089B                     	;# 
  2461  090C                     	;# 
  2462  090E                     	;# 
  2463  090F                     	;# 
  2464  091F                     	;# 
  2465  091F                     	;# 
  2466  098F                     	;# 
  2467  098F                     	;# 
  2468  0990                     	;# 
  2469  0991                     	;# 
  2470  0992                     	;# 
  2471  0993                     	;# 
  2472  0994                     	;# 
  2473  0995                     	;# 
  2474  0996                     	;# 
  2475  0997                     	;# 
  2476  0E0F                     	;# 
  2477  0E10                     	;# 
  2478  0E11                     	;# 
  2479  0E12                     	;# 
  2480  0E13                     	;# 
  2481  0E14                     	;# 
  2482  0E15                     	;# 
  2483  0E16                     	;# 
  2484  0E17                     	;# 
  2485  0E18                     	;# 
  2486  0E19                     	;# 
  2487  0E1A                     	;# 
  2488  0E1B                     	;# 
  2489  0E1C                     	;# 
  2490  0E1D                     	;# 
  2491  0E1E                     	;# 
  2492  0E1F                     	;# 
  2493  0E20                     	;# 
  2494  0E21                     	;# 
  2495  0E22                     	;# 
  2496  0E23                     	;# 
  2497  0E24                     	;# 
  2498  0E25                     	;# 
  2499  0E26                     	;# 
  2500  0E27                     	;# 
  2501  0E28                     	;# 
  2502  0E29                     	;# 
  2503  0E2A                     	;# 
  2504  0E2B                     	;# 
  2505  0E2C                     	;# 
  2506  0E2D                     	;# 
  2507  0E2E                     	;# 
  2508  0E2F                     	;# 
  2509  0E30                     	;# 
  2510  0E31                     	;# 
  2511  0E32                     	;# 
  2512  0E33                     	;# 
  2513  0E34                     	;# 
  2514  0E35                     	;# 
  2515  0E36                     	;# 
  2516  0E37                     	;# 
  2517  0E8F                     	;# 
  2518  0E90                     	;# 
  2519  0E91                     	;# 
  2520  0E92                     	;# 
  2521  0E93                     	;# 
  2522  0E94                     	;# 
  2523  0E95                     	;# 
  2524  0E96                     	;# 
  2525  0E97                     	;# 
  2526  0E9C                     	;# 
  2527  0E9D                     	;# 
  2528  0E9E                     	;# 
  2529  0EA1                     	;# 
  2530  0EA2                     	;# 
  2531  0EA3                     	;# 
  2532  0EA4                     	;# 
  2533  0EA5                     	;# 
  2534  0EA9                     	;# 
  2535  0EAA                     	;# 
  2536  0EAB                     	;# 
  2537  0EAC                     	;# 
  2538  0EB1                     	;# 
  2539  0EB2                     	;# 
  2540  0EB3                     	;# 
  2541  0EB8                     	;# 
  2542  0EB9                     	;# 
  2543  0EBA                     	;# 
  2544  0EBB                     	;# 
  2545  0EBC                     	;# 
  2546  0EBD                     	;# 
  2547  0EBE                     	;# 
  2548  0EC3                     	;# 
  2549  0EC5                     	;# 
  2550  0EC6                     	;# 
  2551  0EC7                     	;# 
  2552  0EC8                     	;# 
  2553  0EC9                     	;# 
  2554  0ECA                     	;# 
  2555  0ECB                     	;# 
  2556  0ECC                     	;# 
  2557  0F10                     	;# 
  2558  0F11                     	;# 
  2559  0F12                     	;# 
  2560  0F13                     	;# 
  2561  0F14                     	;# 
  2562  0F15                     	;# 
  2563  0F16                     	;# 
  2564  0F17                     	;# 
  2565  0F18                     	;# 
  2566  0F19                     	;# 
  2567  0F1A                     	;# 
  2568  0F1B                     	;# 
  2569  0F1C                     	;# 
  2570  0F1D                     	;# 
  2571  0F1E                     	;# 
  2572  0F1F                     	;# 
  2573  0F20                     	;# 
  2574  0F21                     	;# 
  2575  0F22                     	;# 
  2576  0F23                     	;# 
  2577  0F24                     	;# 
  2578  0F25                     	;# 
  2579  0F26                     	;# 
  2580  0F27                     	;# 
  2581  0F38                     	;# 
  2582  0F39                     	;# 
  2583  0F3A                     	;# 
  2584  0F3B                     	;# 
  2585  0F3C                     	;# 
  2586  0F3D                     	;# 
  2587  0F3E                     	;# 
  2588  0F3F                     	;# 
  2589  0F40                     	;# 
  2590  0F41                     	;# 
  2591  0F43                     	;# 
  2592  0F44                     	;# 
  2593  0F45                     	;# 
  2594  0F46                     	;# 
  2595  0F47                     	;# 
  2596  0F48                     	;# 
  2597  0F49                     	;# 
  2598  0F4A                     	;# 
  2599  0F4B                     	;# 
  2600  0F4C                     	;# 
  2601  0F4E                     	;# 
  2602  0F4F                     	;# 
  2603  0F50                     	;# 
  2604  0F51                     	;# 
  2605  0F52                     	;# 
  2606  0F53                     	;# 
  2607  0F54                     	;# 
  2608  0F55                     	;# 
  2609  0F56                     	;# 
  2610  0F57                     	;# 
  2611  0F65                     	;# 
  2612  0F68                     	;# 
  2613  0F69                     	;# 
  2614  0F6A                     	;# 
  2615  0F6B                     	;# 
  2616  0FE4                     	;# 
  2617  0FE5                     	;# 
  2618  0FE6                     	;# 
  2619  0FE7                     	;# 
  2620  0FE8                     	;# 
  2621  0FE9                     	;# 
  2622  0FEA                     	;# 
  2623  0FEB                     	;# 
  2624  0FED                     	;# 
  2625  0FEE                     	;# 
  2626  0FEF                     	;# 
  2627  0000                     	;# 
  2628  0001                     	;# 
  2629  0002                     	;# 
  2630  0003                     	;# 
  2631  0004                     	;# 
  2632  0005                     	;# 
  2633  0006                     	;# 
  2634  0007                     	;# 
  2635  0008                     	;# 
  2636  0009                     	;# 
  2637  000A                     	;# 
  2638  000B                     	;# 
  2639  000C                     	;# 
  2640  000D                     	;# 
  2641  000E                     	;# 
  2642  0010                     	;# 
  2643  0011                     	;# 
  2644  0012                     	;# 
  2645  0013                     	;# 
  2646  0016                     	;# 
  2647  0017                     	;# 
  2648  0018                     	;# 
  2649  001C                     	;# 
  2650  001C                     	;# 
  2651  001D                     	;# 
  2652  001D                     	;# 
  2653  001E                     	;# 
  2654  001F                     	;# 
  2655  008C                     	;# 
  2656  008C                     	;# 
  2657  008D                     	;# 
  2658  008E                     	;# 
  2659  008E                     	;# 
  2660  008F                     	;# 
  2661  0090                     	;# 
  2662  0090                     	;# 
  2663  0091                     	;# 
  2664  0093                     	;# 
  2665  0094                     	;# 
  2666  0095                     	;# 
  2667  0096                     	;# 
  2668  0097                     	;# 
  2669  0098                     	;# 
  2670  0099                     	;# 
  2671  009A                     	;# 
  2672  009B                     	;# 
  2673  009C                     	;# 
  2674  009D                     	;# 
  2675  009E                     	;# 
  2676  010C                     	;# 
  2677  010D                     	;# 
  2678  010E                     	;# 
  2679  010E                     	;# 
  2680  010F                     	;# 
  2681  0110                     	;# 
  2682  0110                     	;# 
  2683  0111                     	;# 
  2684  0112                     	;# 
  2685  0112                     	;# 
  2686  0113                     	;# 
  2687  0114                     	;# 
  2688  0114                     	;# 
  2689  0115                     	;# 
  2690  0116                     	;# 
  2691  0116                     	;# 
  2692  0117                     	;# 
  2693  0119                     	;# 
  2694  0119                     	;# 
  2695  0119                     	;# 
  2696  011A                     	;# 
  2697  011A                     	;# 
  2698  011A                     	;# 
  2699  011B                     	;# 
  2700  011B                     	;# 
  2701  011B                     	;# 
  2702  011B                     	;# 
  2703  011B                     	;# 
  2704  011C                     	;# 
  2705  011C                     	;# 
  2706  011C                     	;# 
  2707  011D                     	;# 
  2708  011D                     	;# 
  2709  011D                     	;# 
  2710  011E                     	;# 
  2711  011E                     	;# 
  2712  011E                     	;# 
  2713  011F                     	;# 
  2714  011F                     	;# 
  2715  011F                     	;# 
  2716  011F                     	;# 
  2717  011F                     	;# 
  2718  018C                     	;# 
  2719  018D                     	;# 
  2720  018E                     	;# 
  2721  018F                     	;# 
  2722  0190                     	;# 
  2723  0191                     	;# 
  2724  0192                     	;# 
  2725  0196                     	;# 
  2726  0197                     	;# 
  2727  0198                     	;# 
  2728  0199                     	;# 
  2729  019A                     	;# 
  2730  019B                     	;# 
  2731  019C                     	;# 
  2732  020C                     	;# 
  2733  020D                     	;# 
  2734  020E                     	;# 
  2735  020F                     	;# 
  2736  020F                     	;# 
  2737  0210                     	;# 
  2738  0210                     	;# 
  2739  0211                     	;# 
  2740  0211                     	;# 
  2741  0212                     	;# 
  2742  0213                     	;# 
  2743  0214                     	;# 
  2744  0215                     	;# 
  2745  0215                     	;# 
  2746  0216                     	;# 
  2747  0216                     	;# 
  2748  0217                     	;# 
  2749  0217                     	;# 
  2750  0218                     	;# 
  2751  0219                     	;# 
  2752  021A                     	;# 
  2753  021B                     	;# 
  2754  021B                     	;# 
  2755  021C                     	;# 
  2756  021C                     	;# 
  2757  021D                     	;# 
  2758  021D                     	;# 
  2759  021E                     	;# 
  2760  021F                     	;# 
  2761  028C                     	;# 
  2762  028C                     	;# 
  2763  028D                     	;# 
  2764  028D                     	;# 
  2765  028E                     	;# 
  2766  028F                     	;# 
  2767  0290                     	;# 
  2768  0290                     	;# 
  2769  0291                     	;# 
  2770  0292                     	;# 
  2771  0292                     	;# 
  2772  0293                     	;# 
  2773  0293                     	;# 
  2774  0294                     	;# 
  2775  0295                     	;# 
  2776  0296                     	;# 
  2777  0296                     	;# 
  2778  0297                     	;# 
  2779  0298                     	;# 
  2780  0298                     	;# 
  2781  0299                     	;# 
  2782  0299                     	;# 
  2783  029A                     	;# 
  2784  029B                     	;# 
  2785  029C                     	;# 
  2786  029C                     	;# 
  2787  029D                     	;# 
  2788  030C                     	;# 
  2789  030C                     	;# 
  2790  030D                     	;# 
  2791  030E                     	;# 
  2792  030F                     	;# 
  2793  0310                     	;# 
  2794  0310                     	;# 
  2795  0311                     	;# 
  2796  0312                     	;# 
  2797  0313                     	;# 
  2798  0314                     	;# 
  2799  0314                     	;# 
  2800  0315                     	;# 
  2801  0316                     	;# 
  2802  0317                     	;# 
  2803  0318                     	;# 
  2804  0318                     	;# 
  2805  0319                     	;# 
  2806  031A                     	;# 
  2807  031B                     	;# 
  2808  031C                     	;# 
  2809  031C                     	;# 
  2810  031D                     	;# 
  2811  031E                     	;# 
  2812  031F                     	;# 
  2813  038C                     	;# 
  2814  038D                     	;# 
  2815  038E                     	;# 
  2816  0390                     	;# 
  2817  0391                     	;# 
  2818  0392                     	;# 
  2819  040C                     	;# 
  2820  040D                     	;# 
  2821  040E                     	;# 
  2822  040F                     	;# 
  2823  0410                     	;# 
  2824  0411                     	;# 
  2825  0416                     	;# 
  2826  0416                     	;# 
  2827  0417                     	;# 
  2828  0418                     	;# 
  2829  0418                     	;# 
  2830  0419                     	;# 
  2831  041A                     	;# 
  2832  041A                     	;# 
  2833  041B                     	;# 
  2834  041C                     	;# 
  2835  041C                     	;# 
  2836  041D                     	;# 
  2837  041E                     	;# 
  2838  041F                     	;# 
  2839  048C                     	;# 
  2840  048C                     	;# 
  2841  048D                     	;# 
  2842  048E                     	;# 
  2843  048F                     	;# 
  2844  048F                     	;# 
  2845  0490                     	;# 
  2846  0491                     	;# 
  2847  0492                     	;# 
  2848  0492                     	;# 
  2849  0493                     	;# 
  2850  0494                     	;# 
  2851  0495                     	;# 
  2852  0495                     	;# 
  2853  0496                     	;# 
  2854  0497                     	;# 
  2855  0498                     	;# 
  2856  0499                     	;# 
  2857  049A                     	;# 
  2858  049B                     	;# 
  2859  049C                     	;# 
  2860  049D                     	;# 
  2861  050C                     	;# 
  2862  050C                     	;# 
  2863  050D                     	;# 
  2864  050E                     	;# 
  2865  050F                     	;# 
  2866  050F                     	;# 
  2867  0510                     	;# 
  2868  0511                     	;# 
  2869  0512                     	;# 
  2870  0512                     	;# 
  2871  0513                     	;# 
  2872  0514                     	;# 
  2873  0515                     	;# 
  2874  0515                     	;# 
  2875  0516                     	;# 
  2876  0517                     	;# 
  2877  0518                     	;# 
  2878  0519                     	;# 
  2879  051A                     	;# 
  2880  051B                     	;# 
  2881  051C                     	;# 
  2882  051D                     	;# 
  2883  058C                     	;# 
  2884  058C                     	;# 
  2885  058D                     	;# 
  2886  058E                     	;# 
  2887  058F                     	;# 
  2888  058F                     	;# 
  2889  0590                     	;# 
  2890  0591                     	;# 
  2891  0592                     	;# 
  2892  0593                     	;# 
  2893  060C                     	;# 
  2894  060D                     	;# 
  2895  060E                     	;# 
  2896  060F                     	;# 
  2897  0610                     	;# 
  2898  0611                     	;# 
  2899  0612                     	;# 
  2900  0613                     	;# 
  2901  0614                     	;# 
  2902  0616                     	;# 
  2903  0617                     	;# 
  2904  0618                     	;# 
  2905  0619                     	;# 
  2906  061A                     	;# 
  2907  061B                     	;# 
  2908  061C                     	;# 
  2909  061D                     	;# 
  2910  061E                     	;# 
  2911  068C                     	;# 
  2912  068D                     	;# 
  2913  068E                     	;# 
  2914  068F                     	;# 
  2915  0690                     	;# 
  2916  0691                     	;# 
  2917  0692                     	;# 
  2918  0693                     	;# 
  2919  0694                     	;# 
  2920  070C                     	;# 
  2921  070D                     	;# 
  2922  070E                     	;# 
  2923  070F                     	;# 
  2924  0710                     	;# 
  2925  0711                     	;# 
  2926  0712                     	;# 
  2927  0713                     	;# 
  2928  0714                     	;# 
  2929  0716                     	;# 
  2930  0717                     	;# 
  2931  0718                     	;# 
  2932  0719                     	;# 
  2933  071A                     	;# 
  2934  071B                     	;# 
  2935  071C                     	;# 
  2936  071D                     	;# 
  2937  071E                     	;# 
  2938  0796                     	;# 
  2939  0797                     	;# 
  2940  0798                     	;# 
  2941  0799                     	;# 
  2942  079A                     	;# 
  2943  079B                     	;# 
  2944  080C                     	;# 
  2945  080D                     	;# 
  2946  080E                     	;# 
  2947  080F                     	;# 
  2948  0810                     	;# 
  2949  0811                     	;# 
  2950  0812                     	;# 
  2951  0813                     	;# 
  2952  0814                     	;# 
  2953  081A                     	;# 
  2954  081B                     	;# 
  2955  081C                     	;# 
  2956  081D                     	;# 
  2957  081E                     	;# 
  2958  081F                     	;# 
  2959  088C                     	;# 
  2960  088D                     	;# 
  2961  088E                     	;# 
  2962  088F                     	;# 
  2963  0890                     	;# 
  2964  0891                     	;# 
  2965  0892                     	;# 
  2966  0893                     	;# 
  2967  0895                     	;# 
  2968  0896                     	;# 
  2969  0897                     	;# 
  2970  0898                     	;# 
  2971  0899                     	;# 
  2972  089A                     	;# 
  2973  089B                     	;# 
  2974  090C                     	;# 
  2975  090E                     	;# 
  2976  090F                     	;# 
  2977  091F                     	;# 
  2978  091F                     	;# 
  2979  098F                     	;# 
  2980  098F                     	;# 
  2981  0990                     	;# 
  2982  0991                     	;# 
  2983  0992                     	;# 
  2984  0993                     	;# 
  2985  0994                     	;# 
  2986  0995                     	;# 
  2987  0996                     	;# 
  2988  0997                     	;# 
  2989  0E0F                     	;# 
  2990  0E10                     	;# 
  2991  0E11                     	;# 
  2992  0E12                     	;# 
  2993  0E13                     	;# 
  2994  0E14                     	;# 
  2995  0E15                     	;# 
  2996  0E16                     	;# 
  2997  0E17                     	;# 
  2998  0E18                     	;# 
  2999  0E19                     	;# 
  3000  0E1A                     	;# 
  3001  0E1B                     	;# 
  3002  0E1C                     	;# 
  3003  0E1D                     	;# 
  3004  0E1E                     	;# 
  3005  0E1F                     	;# 
  3006  0E20                     	;# 
  3007  0E21                     	;# 
  3008  0E22                     	;# 
  3009  0E23                     	;# 
  3010  0E24                     	;# 
  3011  0E25                     	;# 
  3012  0E26                     	;# 
  3013  0E27                     	;# 
  3014  0E28                     	;# 
  3015  0E29                     	;# 
  3016  0E2A                     	;# 
  3017  0E2B                     	;# 
  3018  0E2C                     	;# 
  3019  0E2D                     	;# 
  3020  0E2E                     	;# 
  3021  0E2F                     	;# 
  3022  0E30                     	;# 
  3023  0E31                     	;# 
  3024  0E32                     	;# 
  3025  0E33                     	;# 
  3026  0E34                     	;# 
  3027  0E35                     	;# 
  3028  0E36                     	;# 
  3029  0E37                     	;# 
  3030  0E8F                     	;# 
  3031  0E90                     	;# 
  3032  0E91                     	;# 
  3033  0E92                     	;# 
  3034  0E93                     	;# 
  3035  0E94                     	;# 
  3036  0E95                     	;# 
  3037  0E96                     	;# 
  3038  0E97                     	;# 
  3039  0E9C                     	;# 
  3040  0E9D                     	;# 
  3041  0E9E                     	;# 
  3042  0EA1                     	;# 
  3043  0EA2                     	;# 
  3044  0EA3                     	;# 
  3045  0EA4                     	;# 
  3046  0EA5                     	;# 
  3047  0EA9                     	;# 
  3048  0EAA                     	;# 
  3049  0EAB                     	;# 
  3050  0EAC                     	;# 
  3051  0EB1                     	;# 
  3052  0EB2                     	;# 
  3053  0EB3                     	;# 
  3054  0EB8                     	;# 
  3055  0EB9                     	;# 
  3056  0EBA                     	;# 
  3057  0EBB                     	;# 
  3058  0EBC                     	;# 
  3059  0EBD                     	;# 
  3060  0EBE                     	;# 
  3061  0EC3                     	;# 
  3062  0EC5                     	;# 
  3063  0EC6                     	;# 
  3064  0EC7                     	;# 
  3065  0EC8                     	;# 
  3066  0EC9                     	;# 
  3067  0ECA                     	;# 
  3068  0ECB                     	;# 
  3069  0ECC                     	;# 
  3070  0F10                     	;# 
  3071  0F11                     	;# 
  3072  0F12                     	;# 
  3073  0F13                     	;# 
  3074  0F14                     	;# 
  3075  0F15                     	;# 
  3076  0F16                     	;# 
  3077  0F17                     	;# 
  3078  0F18                     	;# 
  3079  0F19                     	;# 
  3080  0F1A                     	;# 
  3081  0F1B                     	;# 
  3082  0F1C                     	;# 
  3083  0F1D                     	;# 
  3084  0F1E                     	;# 
  3085  0F1F                     	;# 
  3086  0F20                     	;# 
  3087  0F21                     	;# 
  3088  0F22                     	;# 
  3089  0F23                     	;# 
  3090  0F24                     	;# 
  3091  0F25                     	;# 
  3092  0F26                     	;# 
  3093  0F27                     	;# 
  3094  0F38                     	;# 
  3095  0F39                     	;# 
  3096  0F3A                     	;# 
  3097  0F3B                     	;# 
  3098  0F3C                     	;# 
  3099  0F3D                     	;# 
  3100  0F3E                     	;# 
  3101  0F3F                     	;# 
  3102  0F40                     	;# 
  3103  0F41                     	;# 
  3104  0F43                     	;# 
  3105  0F44                     	;# 
  3106  0F45                     	;# 
  3107  0F46                     	;# 
  3108  0F47                     	;# 
  3109  0F48                     	;# 
  3110  0F49                     	;# 
  3111  0F4A                     	;# 
  3112  0F4B                     	;# 
  3113  0F4C                     	;# 
  3114  0F4E                     	;# 
  3115  0F4F                     	;# 
  3116  0F50                     	;# 
  3117  0F51                     	;# 
  3118  0F52                     	;# 
  3119  0F53                     	;# 
  3120  0F54                     	;# 
  3121  0F55                     	;# 
  3122  0F56                     	;# 
  3123  0F57                     	;# 
  3124  0F65                     	;# 
  3125  0F68                     	;# 
  3126  0F69                     	;# 
  3127  0F6A                     	;# 
  3128  0F6B                     	;# 
  3129  0FE4                     	;# 
  3130  0FE5                     	;# 
  3131  0FE6                     	;# 
  3132  0FE7                     	;# 
  3133  0FE8                     	;# 
  3134  0FE9                     	;# 
  3135  0FEA                     	;# 
  3136  0FEB                     	;# 
  3137  0FED                     	;# 
  3138  0FEE                     	;# 
  3139  0FEF                     	;# 
  3140  0000                     	;# 
  3141  0001                     	;# 
  3142  0002                     	;# 
  3143  0003                     	;# 
  3144  0004                     	;# 
  3145  0005                     	;# 
  3146  0006                     	;# 
  3147  0007                     	;# 
  3148  0008                     	;# 
  3149  0009                     	;# 
  3150  000A                     	;# 
  3151  000B                     	;# 
  3152  000C                     	;# 
  3153  000D                     	;# 
  3154  000E                     	;# 
  3155  0010                     	;# 
  3156  0011                     	;# 
  3157  0012                     	;# 
  3158  0013                     	;# 
  3159  0016                     	;# 
  3160  0017                     	;# 
  3161  0018                     	;# 
  3162  001C                     	;# 
  3163  001C                     	;# 
  3164  001D                     	;# 
  3165  001D                     	;# 
  3166  001E                     	;# 
  3167  001F                     	;# 
  3168  008C                     	;# 
  3169  008C                     	;# 
  3170  008D                     	;# 
  3171  008E                     	;# 
  3172  008E                     	;# 
  3173  008F                     	;# 
  3174  0090                     	;# 
  3175  0090                     	;# 
  3176  0091                     	;# 
  3177  0093                     	;# 
  3178  0094                     	;# 
  3179  0095                     	;# 
  3180  0096                     	;# 
  3181  0097                     	;# 
  3182  0098                     	;# 
  3183  0099                     	;# 
  3184  009A                     	;# 
  3185  009B                     	;# 
  3186  009C                     	;# 
  3187  009D                     	;# 
  3188  009E                     	;# 
  3189  010C                     	;# 
  3190  010D                     	;# 
  3191  010E                     	;# 
  3192  010E                     	;# 
  3193  010F                     	;# 
  3194  0110                     	;# 
  3195  0110                     	;# 
  3196  0111                     	;# 
  3197  0112                     	;# 
  3198  0112                     	;# 
  3199  0113                     	;# 
  3200  0114                     	;# 
  3201  0114                     	;# 
  3202  0115                     	;# 
  3203  0116                     	;# 
  3204  0116                     	;# 
  3205  0117                     	;# 
  3206  0119                     	;# 
  3207  0119                     	;# 
  3208  0119                     	;# 
  3209  011A                     	;# 
  3210  011A                     	;# 
  3211  011A                     	;# 
  3212  011B                     	;# 
  3213  011B                     	;# 
  3214  011B                     	;# 
  3215  011B                     	;# 
  3216  011B                     	;# 
  3217  011C                     	;# 
  3218  011C                     	;# 
  3219  011C                     	;# 
  3220  011D                     	;# 
  3221  011D                     	;# 
  3222  011D                     	;# 
  3223  011E                     	;# 
  3224  011E                     	;# 
  3225  011E                     	;# 
  3226  011F                     	;# 
  3227  011F                     	;# 
  3228  011F                     	;# 
  3229  011F                     	;# 
  3230  011F                     	;# 
  3231  018C                     	;# 
  3232  018D                     	;# 
  3233  018E                     	;# 
  3234  018F                     	;# 
  3235  0190                     	;# 
  3236  0191                     	;# 
  3237  0192                     	;# 
  3238  0196                     	;# 
  3239  0197                     	;# 
  3240  0198                     	;# 
  3241  0199                     	;# 
  3242  019A                     	;# 
  3243  019B                     	;# 
  3244  019C                     	;# 
  3245  020C                     	;# 
  3246  020D                     	;# 
  3247  020E                     	;# 
  3248  020F                     	;# 
  3249  020F                     	;# 
  3250  0210                     	;# 
  3251  0210                     	;# 
  3252  0211                     	;# 
  3253  0211                     	;# 
  3254  0212                     	;# 
  3255  0213                     	;# 
  3256  0214                     	;# 
  3257  0215                     	;# 
  3258  0215                     	;# 
  3259  0216                     	;# 
  3260  0216                     	;# 
  3261  0217                     	;# 
  3262  0217                     	;# 
  3263  0218                     	;# 
  3264  0219                     	;# 
  3265  021A                     	;# 
  3266  021B                     	;# 
  3267  021B                     	;# 
  3268  021C                     	;# 
  3269  021C                     	;# 
  3270  021D                     	;# 
  3271  021D                     	;# 
  3272  021E                     	;# 
  3273  021F                     	;# 
  3274  028C                     	;# 
  3275  028C                     	;# 
  3276  028D                     	;# 
  3277  028D                     	;# 
  3278  028E                     	;# 
  3279  028F                     	;# 
  3280  0290                     	;# 
  3281  0290                     	;# 
  3282  0291                     	;# 
  3283  0292                     	;# 
  3284  0292                     	;# 
  3285  0293                     	;# 
  3286  0293                     	;# 
  3287  0294                     	;# 
  3288  0295                     	;# 
  3289  0296                     	;# 
  3290  0296                     	;# 
  3291  0297                     	;# 
  3292  0298                     	;# 
  3293  0298                     	;# 
  3294  0299                     	;# 
  3295  0299                     	;# 
  3296  029A                     	;# 
  3297  029B                     	;# 
  3298  029C                     	;# 
  3299  029C                     	;# 
  3300  029D                     	;# 
  3301  030C                     	;# 
  3302  030C                     	;# 
  3303  030D                     	;# 
  3304  030E                     	;# 
  3305  030F                     	;# 
  3306  0310                     	;# 
  3307  0310                     	;# 
  3308  0311                     	;# 
  3309  0312                     	;# 
  3310  0313                     	;# 
  3311  0314                     	;# 
  3312  0314                     	;# 
  3313  0315                     	;# 
  3314  0316                     	;# 
  3315  0317                     	;# 
  3316  0318                     	;# 
  3317  0318                     	;# 
  3318  0319                     	;# 
  3319  031A                     	;# 
  3320  031B                     	;# 
  3321  031C                     	;# 
  3322  031C                     	;# 
  3323  031D                     	;# 
  3324  031E                     	;# 
  3325  031F                     	;# 
  3326  038C                     	;# 
  3327  038D                     	;# 
  3328  038E                     	;# 
  3329  0390                     	;# 
  3330  0391                     	;# 
  3331  0392                     	;# 
  3332  040C                     	;# 
  3333  040D                     	;# 
  3334  040E                     	;# 
  3335  040F                     	;# 
  3336  0410                     	;# 
  3337  0411                     	;# 
  3338  0416                     	;# 
  3339  0416                     	;# 
  3340  0417                     	;# 
  3341  0418                     	;# 
  3342  0418                     	;# 
  3343  0419                     	;# 
  3344  041A                     	;# 
  3345  041A                     	;# 
  3346  041B                     	;# 
  3347  041C                     	;# 
  3348  041C                     	;# 
  3349  041D                     	;# 
  3350  041E                     	;# 
  3351  041F                     	;# 
  3352  048C                     	;# 
  3353  048C                     	;# 
  3354  048D                     	;# 
  3355  048E                     	;# 
  3356  048F                     	;# 
  3357  048F                     	;# 
  3358  0490                     	;# 
  3359  0491                     	;# 
  3360  0492                     	;# 
  3361  0492                     	;# 
  3362  0493                     	;# 
  3363  0494                     	;# 
  3364  0495                     	;# 
  3365  0495                     	;# 
  3366  0496                     	;# 
  3367  0497                     	;# 
  3368  0498                     	;# 
  3369  0499                     	;# 
  3370  049A                     	;# 
  3371  049B                     	;# 
  3372  049C                     	;# 
  3373  049D                     	;# 
  3374  050C                     	;# 
  3375  050C                     	;# 
  3376  050D                     	;# 
  3377  050E                     	;# 
  3378  050F                     	;# 
  3379  050F                     	;# 
  3380  0510                     	;# 
  3381  0511                     	;# 
  3382  0512                     	;# 
  3383  0512                     	;# 
  3384  0513                     	;# 
  3385  0514                     	;# 
  3386  0515                     	;# 
  3387  0515                     	;# 
  3388  0516                     	;# 
  3389  0517                     	;# 
  3390  0518                     	;# 
  3391  0519                     	;# 
  3392  051A                     	;# 
  3393  051B                     	;# 
  3394  051C                     	;# 
  3395  051D                     	;# 
  3396  058C                     	;# 
  3397  058C                     	;# 
  3398  058D                     	;# 
  3399  058E                     	;# 
  3400  058F                     	;# 
  3401  058F                     	;# 
  3402  0590                     	;# 
  3403  0591                     	;# 
  3404  0592                     	;# 
  3405  0593                     	;# 
  3406  060C                     	;# 
  3407  060D                     	;# 
  3408  060E                     	;# 
  3409  060F                     	;# 
  3410  0610                     	;# 
  3411  0611                     	;# 
  3412  0612                     	;# 
  3413  0613                     	;# 
  3414  0614                     	;# 
  3415  0616                     	;# 
  3416  0617                     	;# 
  3417  0618                     	;# 
  3418  0619                     	;# 
  3419  061A                     	;# 
  3420  061B                     	;# 
  3421  061C                     	;# 
  3422  061D                     	;# 
  3423  061E                     	;# 
  3424  068C                     	;# 
  3425  068D                     	;# 
  3426  068E                     	;# 
  3427  068F                     	;# 
  3428  0690                     	;# 
  3429  0691                     	;# 
  3430  0692                     	;# 
  3431  0693                     	;# 
  3432  0694                     	;# 
  3433  070C                     	;# 
  3434  070D                     	;# 
  3435  070E                     	;# 
  3436  070F                     	;# 
  3437  0710                     	;# 
  3438  0711                     	;# 
  3439  0712                     	;# 
  3440  0713                     	;# 
  3441  0714                     	;# 
  3442  0716                     	;# 
  3443  0717                     	;# 
  3444  0718                     	;# 
  3445  0719                     	;# 
  3446  071A                     	;# 
  3447  071B                     	;# 
  3448  071C                     	;# 
  3449  071D                     	;# 
  3450  071E                     	;# 
  3451  0796                     	;# 
  3452  0797                     	;# 
  3453  0798                     	;# 
  3454  0799                     	;# 
  3455  079A                     	;# 
  3456  079B                     	;# 
  3457  080C                     	;# 
  3458  080D                     	;# 
  3459  080E                     	;# 
  3460  080F                     	;# 
  3461  0810                     	;# 
  3462  0811                     	;# 
  3463  0812                     	;# 
  3464  0813                     	;# 
  3465  0814                     	;# 
  3466  081A                     	;# 
  3467  081B                     	;# 
  3468  081C                     	;# 
  3469  081D                     	;# 
  3470  081E                     	;# 
  3471  081F                     	;# 
  3472  088C                     	;# 
  3473  088D                     	;# 
  3474  088E                     	;# 
  3475  088F                     	;# 
  3476  0890                     	;# 
  3477  0891                     	;# 
  3478  0892                     	;# 
  3479  0893                     	;# 
  3480  0895                     	;# 
  3481  0896                     	;# 
  3482  0897                     	;# 
  3483  0898                     	;# 
  3484  0899                     	;# 
  3485  089A                     	;# 
  3486  089B                     	;# 
  3487  090C                     	;# 
  3488  090E                     	;# 
  3489  090F                     	;# 
  3490  091F                     	;# 
  3491  091F                     	;# 
  3492  098F                     	;# 
  3493  098F                     	;# 
  3494  0990                     	;# 
  3495  0991                     	;# 
  3496  0992                     	;# 
  3497  0993                     	;# 
  3498  0994                     	;# 
  3499  0995                     	;# 
  3500  0996                     	;# 
  3501  0997                     	;# 
  3502  0E0F                     	;# 
  3503  0E10                     	;# 
  3504  0E11                     	;# 
  3505  0E12                     	;# 
  3506  0E13                     	;# 
  3507  0E14                     	;# 
  3508  0E15                     	;# 
  3509  0E16                     	;# 
  3510  0E17                     	;# 
  3511  0E18                     	;# 
  3512  0E19                     	;# 
  3513  0E1A                     	;# 
  3514  0E1B                     	;# 
  3515  0E1C                     	;# 
  3516  0E1D                     	;# 
  3517  0E1E                     	;# 
  3518  0E1F                     	;# 
  3519  0E20                     	;# 
  3520  0E21                     	;# 
  3521  0E22                     	;# 
  3522  0E23                     	;# 
  3523  0E24                     	;# 
  3524  0E25                     	;# 
  3525  0E26                     	;# 
  3526  0E27                     	;# 
  3527  0E28                     	;# 
  3528  0E29                     	;# 
  3529  0E2A                     	;# 
  3530  0E2B                     	;# 
  3531  0E2C                     	;# 
  3532  0E2D                     	;# 
  3533  0E2E                     	;# 
  3534  0E2F                     	;# 
  3535  0E30                     	;# 
  3536  0E31                     	;# 
  3537  0E32                     	;# 
  3538  0E33                     	;# 
  3539  0E34                     	;# 
  3540  0E35                     	;# 
  3541  0E36                     	;# 
  3542  0E37                     	;# 
  3543  0E8F                     	;# 
  3544  0E90                     	;# 
  3545  0E91                     	;# 
  3546  0E92                     	;# 
  3547  0E93                     	;# 
  3548  0E94                     	;# 
  3549  0E95                     	;# 
  3550  0E96                     	;# 
  3551  0E97                     	;# 
  3552  0E9C                     	;# 
  3553  0E9D                     	;# 
  3554  0E9E                     	;# 
  3555  0EA1                     	;# 
  3556  0EA2                     	;# 
  3557  0EA3                     	;# 
  3558  0EA4                     	;# 
  3559  0EA5                     	;# 
  3560  0EA9                     	;# 
  3561  0EAA                     	;# 
  3562  0EAB                     	;# 
  3563  0EAC                     	;# 
  3564  0EB1                     	;# 
  3565  0EB2                     	;# 
  3566  0EB3                     	;# 
  3567  0EB8                     	;# 
  3568  0EB9                     	;# 
  3569  0EBA                     	;# 
  3570  0EBB                     	;# 
  3571  0EBC                     	;# 
  3572  0EBD                     	;# 
  3573  0EBE                     	;# 
  3574  0EC3                     	;# 
  3575  0EC5                     	;# 
  3576  0EC6                     	;# 
  3577  0EC7                     	;# 
  3578  0EC8                     	;# 
  3579  0EC9                     	;# 
  3580  0ECA                     	;# 
  3581  0ECB                     	;# 
  3582  0ECC                     	;# 
  3583  0F10                     	;# 
  3584  0F11                     	;# 
  3585  0F12                     	;# 
  3586  0F13                     	;# 
  3587  0F14                     	;# 
  3588  0F15                     	;# 
  3589  0F16                     	;# 
  3590  0F17                     	;# 
  3591  0F18                     	;# 
  3592  0F19                     	;# 
  3593  0F1A                     	;# 
  3594  0F1B                     	;# 
  3595  0F1C                     	;# 
  3596  0F1D                     	;# 
  3597  0F1E                     	;# 
  3598  0F1F                     	;# 
  3599  0F20                     	;# 
  3600  0F21                     	;# 
  3601  0F22                     	;# 
  3602  0F23                     	;# 
  3603  0F24                     	;# 
  3604  0F25                     	;# 
  3605  0F26                     	;# 
  3606  0F27                     	;# 
  3607  0F38                     	;# 
  3608  0F39                     	;# 
  3609  0F3A                     	;# 
  3610  0F3B                     	;# 
  3611  0F3C                     	;# 
  3612  0F3D                     	;# 
  3613  0F3E                     	;# 
  3614  0F3F                     	;# 
  3615  0F40                     	;# 
  3616  0F41                     	;# 
  3617  0F43                     	;# 
  3618  0F44                     	;# 
  3619  0F45                     	;# 
  3620  0F46                     	;# 
  3621  0F47                     	;# 
  3622  0F48                     	;# 
  3623  0F49                     	;# 
  3624  0F4A                     	;# 
  3625  0F4B                     	;# 
  3626  0F4C                     	;# 
  3627  0F4E                     	;# 
  3628  0F4F                     	;# 
  3629  0F50                     	;# 
  3630  0F51                     	;# 
  3631  0F52                     	;# 
  3632  0F53                     	;# 
  3633  0F54                     	;# 
  3634  0F55                     	;# 
  3635  0F56                     	;# 
  3636  0F57                     	;# 
  3637  0F65                     	;# 
  3638  0F68                     	;# 
  3639  0F69                     	;# 
  3640  0F6A                     	;# 
  3641  0F6B                     	;# 
  3642  0FE4                     	;# 
  3643  0FE5                     	;# 
  3644  0FE6                     	;# 
  3645  0FE7                     	;# 
  3646  0FE8                     	;# 
  3647  0FE9                     	;# 
  3648  0FEA                     	;# 
  3649  0FEB                     	;# 
  3650  0FED                     	;# 
  3651  0FEE                     	;# 
  3652  0FEF                     	;_samples
  3653                           
  3654                           	psect	idataBANK2
  3655  1F5A                     __pidataBANK2:	
  3656                           
  3657                           ;initializer for ___cgram
  3658  1F5A  340C               	retlw	12
  3659  1F5B  3412               	retlw	18
  3660  1F5C  3412               	retlw	18
  3661  1F5D  340C               	retlw	12
  3662  1F5E  3400               	retlw	0
  3663  1F5F  3400               	retlw	0
  3664  1F60  3400               	retlw	0
  3665  1F61  3400               	retlw	0
  3666  1F62  340A               	retlw	10
  3667  1F63  3415               	retlw	21
  3668  1F64  3411               	retlw	17
  3669  1F65  340A               	retlw	10
  3670  1F66  3404               	retlw	4
  3671  1F67  3400               	retlw	0
  3672  1F68  3400               	retlw	0
  3673  1F69  3400               	retlw	0
  3674  1F6A  340A               	retlw	10
  3675  1F6B  341F               	retlw	31
  3676  1F6C  341F               	retlw	31
  3677  1F6D  340E               	retlw	14
  3678  1F6E  3404               	retlw	4
  3679  1F6F  3400               	retlw	0
  3680  1F70  3400               	retlw	0
  3681  1F71  3400               	retlw	0
  3682                           
  3683                           	psect	stringtext
  3684  1800                     __pstringtext:	
  3685  1800                     _dpowers:	
  3686  1800  3401               	retlw	1
  3687  1801  3400               	retlw	0
  3688  1802  3400               	retlw	0
  3689  1803  3400               	retlw	0
  3690  1804  340A               	retlw	10
  3691  1805  3400               	retlw	0
  3692  1806  3400               	retlw	0
  3693  1807  3400               	retlw	0
  3694  1808  3464               	retlw	100
  3695  1809  3400               	retlw	0
  3696  180A  3400               	retlw	0
  3697  180B  3400               	retlw	0
  3698  180C  34E8               	retlw	232
  3699  180D  3403               	retlw	3
  3700  180E  3400               	retlw	0
  3701  180F  3400               	retlw	0
  3702  1810  3410               	retlw	16
  3703  1811  3427               	retlw	39
  3704  1812  3400               	retlw	0
  3705  1813  3400               	retlw	0
  3706  1814  34A0               	retlw	160
  3707  1815  3486               	retlw	134
  3708  1816  3401               	retlw	1
  3709  1817  3400               	retlw	0
  3710  1818  3440               	retlw	64
  3711  1819  3442               	retlw	66
  3712  181A  340F               	retlw	15
  3713  181B  3400               	retlw	0
  3714  181C  3480               	retlw	128
  3715  181D  3496               	retlw	150
  3716  181E  3498               	retlw	152
  3717  181F  3400               	retlw	0
  3718  1820  3400               	retlw	0
  3719  1821  34E1               	retlw	225
  3720  1822  34F5               	retlw	245
  3721  1823  3405               	retlw	5
  3722  1824  3400               	retlw	0
  3723  1825  34CA               	retlw	202
  3724  1826  349A               	retlw	154
  3725  1827  343B               	retlw	59
  3726  1828                     __end_of_dpowers:	
  3727  1828                     __npowers_:	
  3728  1828  3400               	retlw	0
  3729  1829  3480               	retlw	128
  3730  182A  343F               	retlw	63
  3731  182B  34CD               	retlw	205
  3732  182C  34CC               	retlw	204
  3733  182D  343D               	retlw	61
  3734  182E  34D7               	retlw	215
  3735  182F  3423               	retlw	35
  3736  1830  343C               	retlw	60
  3737  1831  3412               	retlw	18
  3738  1832  3483               	retlw	131
  3739  1833  343A               	retlw	58
  3740  1834  34B7               	retlw	183
  3741  1835  34D1               	retlw	209
  3742  1836  3438               	retlw	56
  3743  1837  34C6               	retlw	198
  3744  1838  3427               	retlw	39
  3745  1839  3437               	retlw	55
  3746  183A  3438               	retlw	56
  3747  183B  3486               	retlw	134
  3748  183C  3435               	retlw	53
  3749  183D  34C0               	retlw	192
  3750  183E  34D6               	retlw	214
  3751  183F  3433               	retlw	51
  3752  1840  34CC               	retlw	204
  3753  1841  342B               	retlw	43
  3754  1842  3432               	retlw	50
  3755  1843  3470               	retlw	112
  3756  1844  3489               	retlw	137
  3757  1845  3430               	retlw	48
  3758  1846  34E7               	retlw	231
  3759  1847  34DB               	retlw	219
  3760  1848  342E               	retlw	46
  3761  1849  34E5               	retlw	229
  3762  184A  343C               	retlw	60
  3763  184B  341E               	retlw	30
  3764  184C  3442               	retlw	66
  3765  184D  34A2               	retlw	162
  3766  184E  340D               	retlw	13
  3767  184F                     __end_of__npowers_:	
  3768  184F                     __powers_:	
  3769  184F  3400               	retlw	0
  3770  1850  3480               	retlw	128
  3771  1851  343F               	retlw	63
  3772  1852  3400               	retlw	0
  3773  1853  3420               	retlw	32
  3774  1854  3441               	retlw	65
  3775  1855  3400               	retlw	0
  3776  1856  34C8               	retlw	200
  3777  1857  3442               	retlw	66
  3778  1858  3400               	retlw	0
  3779  1859  347A               	retlw	122
  3780  185A  3444               	retlw	68
  3781  185B  3440               	retlw	64
  3782  185C  341C               	retlw	28
  3783  185D  3446               	retlw	70
  3784  185E  3450               	retlw	80
  3785  185F  34C3               	retlw	195
  3786  1860  3447               	retlw	71
  3787  1861  3424               	retlw	36
  3788  1862  3474               	retlw	116
  3789  1863  3449               	retlw	73
  3790  1864  3497               	retlw	151
  3791  1865  3418               	retlw	24
  3792  1866  344B               	retlw	75
  3793  1867  34BC               	retlw	188
  3794  1868  34BE               	retlw	190
  3795  1869  344C               	retlw	76
  3796  186A  346B               	retlw	107
  3797  186B  346E               	retlw	110
  3798  186C  344E               	retlw	78
  3799  186D  3403               	retlw	3
  3800  186E  3415               	retlw	21
  3801  186F  3450               	retlw	80
  3802  1870  3479               	retlw	121
  3803  1871  34AD               	retlw	173
  3804  1872  3460               	retlw	96
  3805  1873  34F3               	retlw	243
  3806  1874  3449               	retlw	73
  3807  1875  3471               	retlw	113
  3808  1876                     __end_of__powers_:	
  3809  1876                     log@coeff:	
  3810  1876  3400               	retlw	0
  3811  1877  3400               	retlw	0
  3812  1878  3400               	retlw	0
  3813  1879  3400               	retlw	0
  3814  187A  3480               	retlw	128
  3815  187B  343F               	retlw	63
  3816  187C  34F0               	retlw	240
  3817  187D  34FF               	retlw	255
  3818  187E  34BE               	retlw	190
  3819  187F  34E2               	retlw	226
  3820  1880  34A9               	retlw	169
  3821  1881  343E               	retlw	62
  3822  1882  3483               	retlw	131
  3823  1883  3476               	retlw	118
  3824  1884  34BE               	retlw	190
  3825  1885  34AE               	retlw	174
  3826  1886  342B               	retlw	43
  3827  1887  343E               	retlw	62
  3828  1888  343C               	retlw	60
  3829  1889  34C3               	retlw	195
  3830  188A  34BD               	retlw	189
  3831  188B  34D2               	retlw	210
  3832  188C  3413               	retlw	19
  3833  188D  343D               	retlw	61
  3834  188E  3478               	retlw	120
  3835  188F  34D3               	retlw	211
  3836  1890  34BB               	retlw	187
  3837  1891                     __end_oflog@coeff:	
  3838  0016                     _LATA	set	22
  3839  0017                     _LATB	set	23
  3840  0018                     _LATC	set	24
  3841  0011                     _TRISA	set	17
  3842  0012                     _TRISB	set	18
  3843  0013                     _TRISC	set	19
  3844  005F                     _GIE	set	95
  3845  0068                     _RB0	set	104
  3846  0069                     _RB1	set	105
  3847  006A                     _RB2	set	106
  3848  006B                     _RB3	set	107
  3849  006C                     _RB4	set	108
  3850  006D                     _RB5	set	109
  3851  009D                     _ADACQ	set	157
  3852  0099                     _ADACT	set	153
  3853  009B                     _ADCAP	set	155
  3854  0098                     _ADCLK	set	152
  3855  0093                     _ADCON0	set	147
  3856  0093                     _ADCON0bits	set	147
  3857  0094                     _ADCON1	set	148
  3858  0095                     _ADCON2	set	149
  3859  0096                     _ADCON3	set	150
  3860  009E                     _ADPCH	set	158
  3861  009C                     _ADPRE	set	156
  3862  009A                     _ADREF	set	154
  3863  008D                     _ADRESH	set	141
  3864  008C                     _ADRESL	set	140
  3865  0097                     _ADSTAT	set	151
  3866  010F                     _ADLTHH	set	271
  3867  010E                     _ADLTHL	set	270
  3868  010D                     _ADRPT	set	269
  3869  0113                     _ADSTPTH	set	275
  3870  0112                     _ADSTPTL	set	274
  3871  0111                     _ADUTHH	set	273
  3872  0110                     _ADUTHL	set	272
  3873  021F                     _CCPTMRS1bits	set	543
  3874  0290                     _T2CLKCON	set	656
  3875  028E                     _T2CON	set	654
  3876  028E                     _T2CONbits	set	654
  3877  028F                     _T2HLT	set	655
  3878  028D                     _T2PR	set	653
  3879  0291                     _T2RST	set	657
  3880  028C                     _T2TMR	set	652
  3881  038E                     _PWM6CON	set	910
  3882  038D                     _PWM6DCH	set	909
  3883  038C                     _PWM6DCL	set	908
  3884  0716                     _PIE0bits	set	1814
  3885  0710                     _PIR4bits	set	1808
  3886  088D                     _OSCCON1	set	2189
  3887  088F                     _OSCCON3	set	2191
  3888  0891                     _OSCEN	set	2193
  3889  0893                     _OSCFRQ	set	2195
  3890  0892                     _OSCTUNE	set	2194
  3891  090C                     _FVRCON	set	2316
  3892  0E8F                     _PPSLOCK	set	3727
  3893  0E8F                     _PPSLOCKbits	set	3727
  3894  0F38                     _ANSELA	set	3896
  3895  0F43                     _ANSELB	set	3907
  3896  0F4E                     _ANSELC	set	3918
  3897  0F11                     _RA1PPS	set	3857
  3898  0F39                     _WPUA	set	3897
  3899  0F44                     _WPUB	set	3908
  3900  0F4F                     _WPUC	set	3919
  3901  0F65                     _WPUE	set	3941
  3902  1891                     STR_1:	
  3903  1891  3425               	retlw	37	;'%'
  3904  1892  3433               	retlw	51	;'3'
  3905  1893  342E               	retlw	46	;'.'
  3906  1894  3431               	retlw	49	;'1'
  3907  1895  3466               	retlw	102	;'f'
  3908  1896  3400               	retlw	0
  3909  1897                     STR_2:	
  3910  1897  3425               	retlw	37	;'%'
  3911  1898  3464               	retlw	100	;'d'
  3912  1899  3420               	retlw	32	;' '
  3913  189A  3420               	retlw	32	;' '
  3914  189B  3400               	retlw	0
  3915                           
  3916                           ; #config settings
  3917  0000                     
  3918                           	psect	cinit
  3919  07DB                     start_initialization:	
  3920  07DB                     __initialization:		;BIGRAM
  3921                           
  3922                           ; Initialize objects allocated to BANK2
  3923  07DB  305A               	movlw	low __pidataBANK2
  3924  07DC  0084               	movwf	4
  3925  07DD  309F               	movlw	(high __pidataBANK2)| (0+128)
  3926  07DE  0085               	movwf	5
  3927  07DF  3020               	movlw	low __pdataBANK2
  3928  07E0  0086               	movwf	6
  3929  07E1  3001               	movlw	high __pdataBANK2
  3930  07E2  0087               	movwf	7
  3931  07E3  3000               	movlw	0
  3932  07E4  00FF               	movwf	btemp+1
  3933  07E5  3018               	movlw	24
  3934  07E6  319E  26DC  3187   	fcall	init_ram
  3935                           
  3936                           ; Clear objects allocated to BIGRAM
  3937  07E9  308C               	movlw	low (0+9100)
  3938  07EA  0084               	movwf	4
  3939  07EB  3023               	movlw	high (0+9100)
  3940  07EC  0085               	movwf	5
  3941  07ED  3064               	movlw	100
  3942  07EE  00FE               	movwf	btemp
  3943  07EF  3000               	movlw	0
  3944  07F0  00FF               	movwf	btemp+1
  3945  07F1  319E  26D0         	fcall	clear_ram0
  3946                           
  3947                           ; Clear objects allocated to BANK0
  3948  07F3  01E7               	clrf	__pbssBANK0& (0+127)
  3949  07F4  01E8               	clrf	(__pbssBANK0+1)& (0+127)
  3950  07F5  01E9               	clrf	(__pbssBANK0+2)& (0+127)
  3951  07F6  01EA               	clrf	(__pbssBANK0+3)& (0+127)
  3952  07F7  01EB               	clrf	(__pbssBANK0+4)& (0+127)
  3953  07F8  01EC               	clrf	(__pbssBANK0+5)& (0+127)
  3954  07F9  01ED               	clrf	(__pbssBANK0+6)& (0+127)
  3955                           
  3956                           ; Clear objects allocated to BANK1
  3957  07FA  0021               	movlb	1	; select bank1
  3958  07FB  01E8               	clrf	__pbssBANK1& (0+127)
  3959  07FC  01E9               	clrf	(__pbssBANK1+1)& (0+127)
  3960  07FD                     end_of_initialization:	
  3961                           ;End of C runtime variable initialization code
  3962                           
  3963  07FD                     __end_of__initialization:	
  3964  07FD  0020               	movlb	0
  3965  07FE  318D  2D02         	ljmp	_main	;jump to C main() function
  3966                           
  3967                           	psect	bssBANK0
  3968  0067                     __pbssBANK0:	
  3969  0067                     LCD_Write_Int@F13684:	
  3970  0067                     	ds	5
  3971  006C                     _errno:	
  3972  006C                     	ds	2
  3973                           
  3974                           	psect	bssBANK1
  3975  00E8                     __pbssBANK1:	
  3976  00E8                     main@sampleIndex:	
  3977  00E8                     	ds	2
  3978                           
  3979                           	psect	dataBANK2
  3980  0120                     __pdataBANK2:	
  3981  0120                     ___cgram:	
  3982  0120                     	ds	24
  3983                           
  3984                           	psect	inittext
  3985  1EDC                     init_ram:	
  3986  1EDC  00FE               	movwf	126
  3987  1EDD                     initloop:	
  3988  1EDD  0012               	moviw fsr0++
  3989  1EDE  001E               	movwi fsr1++
  3990  1EDF  3001               	movlw	1
  3991  1EE0  02FE               	subwf	126,f
  3992  1EE1  3000               	movlw	0
  3993  1EE2  3BFF               	subwfb	127,f
  3994  1EE3  087F               	movf	127,w
  3995  1EE4  047E               	iorwf	126,w
  3996  1EE5  1903               	btfsc	3,2
  3997  1EE6  3400               	retlw	0
  3998  1EE7  2EDD               	goto	initloop
  3999                           
  4000                           	psect	clrtext
  4001  1ED0                     clear_ram0:	
  4002                           ;	Called with FSR0 containing the base address, and
  4003                           ;	btemp/btemp+1 has the size to clear
  4004                           
  4005  1ED0  0064               	clrwdt	;clear the watchdog before getting into this loop
  4006  1ED1                     clrloop0:	
  4007  1ED1  0180               	clrf	0	;clear RAM location pointed to by FSR
  4008  1ED2  3101               	addfsr 0,1
  4009  1ED3  3001               	movlw	1
  4010  1ED4  02FE               	subwf	126,f
  4011  1ED5  3000               	movlw	0
  4012  1ED6  3BFF               	subwfb	127,f
  4013  1ED7  087F               	movf	127,w
  4014  1ED8  047E               	iorwf	126,w
  4015  1ED9  1903               	btfsc	3,2
  4016  1EDA  3400               	retlw	0	;all done for this memory range, return
  4017  1EDB  2ED1               	goto	clrloop0	;have we reached the end yet?
  4018                           
  4019                           	psect	cstackBANK1
  4020  00A0                     __pcstackBANK1:	
  4021  00A0                     _sprintf$1019:	
  4022                           
  4023                           ; 3 bytes @ 0x0
  4024  00A0                     	ds	3
  4025  00A3                     sprintf@ap:	
  4026                           
  4027                           ; 1 bytes @ 0x3
  4028  00A3                     	ds	1
  4029  00A4                     sprintf@flag:	
  4030                           
  4031                           ; 2 bytes @ 0x4
  4032  00A4                     	ds	2
  4033  00A6                     sprintf@width:	
  4034                           
  4035                           ; 2 bytes @ 0x6
  4036  00A6                     	ds	2
  4037  00A8                     sprintf@tmpval:	
  4038                           
  4039                           ; 4 bytes @ 0x8
  4040  00A8                     	ds	4
  4041  00AC                     sprintf@val:	
  4042                           
  4043                           ; 4 bytes @ 0xC
  4044  00AC                     	ds	4
  4045  00B0                     sprintf@exp:	
  4046                           
  4047                           ; 2 bytes @ 0x10
  4048  00B0                     	ds	2
  4049  00B2                     sprintf@fval:	
  4050                           
  4051                           ; 3 bytes @ 0x12
  4052  00B2                     	ds	3
  4053  00B5                     sprintf@sp:	
  4054                           
  4055                           ; 1 bytes @ 0x15
  4056  00B5                     	ds	1
  4057  00B6                     sprintf@prec:	
  4058                           
  4059                           ; 2 bytes @ 0x16
  4060  00B6                     	ds	2
  4061  00B8                     sprintf@c:	
  4062                           
  4063                           ; 1 bytes @ 0x18
  4064  00B8                     	ds	1
  4065  00B9                     ??_main:	
  4066                           
  4067                           ; 1 bytes @ 0x19
  4068  00B9                     	ds	10
  4069  00C3                     main@timer:	
  4070                           
  4071                           ; 2 bytes @ 0x23
  4072  00C3                     	ds	2
  4073  00C5                     main@s:	
  4074                           
  4075                           ; 8 bytes @ 0x25
  4076  00C5                     	ds	8
  4077  00CD                     main@R:	
  4078                           
  4079                           ; 3 bytes @ 0x2D
  4080  00CD                     	ds	3
  4081  00D0                     _main$1015:	
  4082                           
  4083                           ; 3 bytes @ 0x30
  4084  00D0                     	ds	3
  4085  00D3                     main@minute:	
  4086                           
  4087                           ; 2 bytes @ 0x33
  4088  00D3                     	ds	2
  4089  00D5                     main@counter:	
  4090                           
  4091                           ; 2 bytes @ 0x35
  4092  00D5                     	ds	2
  4093  00D7                     main@firstTimeThrough:	
  4094                           
  4095                           ; 1 bytes @ 0x37
  4096  00D7                     	ds	1
  4097  00D8                     main@startupTimer:	
  4098                           
  4099                           ; 1 bytes @ 0x38
  4100  00D8                     	ds	1
  4101  00D9                     main@setpoint:	
  4102                           
  4103                           ; 2 bytes @ 0x39
  4104  00D9                     	ds	2
  4105  00DB                     main@totals:	
  4106                           
  4107                           ; 4 bytes @ 0x3B
  4108  00DB                     	ds	4
  4109  00DF                     main@readTemperatureOld:	
  4110                           
  4111                           ; 2 bytes @ 0x3F
  4112  00DF                     	ds	2
  4113  00E1                     main@outCurrent:	
  4114                           
  4115                           ; 2 bytes @ 0x41
  4116  00E1                     	ds	2
  4117  00E3                     main@readTemperature:	
  4118                           
  4119                           ; 2 bytes @ 0x43
  4120  00E3                     	ds	2
  4121  00E5                     main@steinhart:	
  4122                           
  4123                           ; 3 bytes @ 0x45
  4124  00E5                     	ds	3
  4125                           
  4126                           	psect	cstackCOMMON
  4127  0070                     __pcstackCOMMON:	
  4128  0070                     ?_isdigit:	
  4129  0070                     ?_LCD_Cmd:	
  4130                           ; 1 bit 
  4131                           
  4132  0070                     ?_LCD_Write_Char:	
  4133                           ; 1 bytes @ 0x0
  4134                           
  4135  0070                     ?_OSCILLATOR_Initialize:	
  4136                           ; 1 bytes @ 0x0
  4137                           
  4138  0070                     ??_OSCILLATOR_Initialize:	
  4139                           ; 1 bytes @ 0x0
  4140                           
  4141  0070                     ?_ADCC_Initialize:	
  4142                           ; 1 bytes @ 0x0
  4143                           
  4144  0070                     ??_ADCC_Initialize:	
  4145                           ; 1 bytes @ 0x0
  4146                           
  4147  0070                     ?_PWM6_Initialize:	
  4148                           ; 1 bytes @ 0x0
  4149                           
  4150  0070                     ??_PWM6_Initialize:	
  4151                           ; 1 bytes @ 0x0
  4152                           
  4153  0070                     ?_TMR2_Initialize:	
  4154                           ; 1 bytes @ 0x0
  4155                           
  4156  0070                     ??_TMR2_Initialize:	
  4157                           ; 1 bytes @ 0x0
  4158                           
  4159  0070                     ?_PWM6_LoadDutyValue:	
  4160                           ; 1 bytes @ 0x0
  4161                           
  4162  0070                     ??_isdigit:	
  4163                           ; 1 bytes @ 0x0
  4164                           
  4165  0070                     ?_InitCustomChars:	
  4166                           ; 1 bytes @ 0x0
  4167                           
  4168  0070                     ?_LCD_Port:	
  4169                           ; 1 bytes @ 0x0
  4170                           
  4171  0070                     ??_LCD_Port:	
  4172                           ; 1 bytes @ 0x0
  4173                           
  4174  0070                     ?_LCD_Clear:	
  4175                           ; 1 bytes @ 0x0
  4176                           
  4177  0070                     ?_LCD_Init:	
  4178                           ; 1 bytes @ 0x0
  4179                           
  4180  0070                     ?_LCD_Write_String:	
  4181                           ; 1 bytes @ 0x0
  4182                           
  4183  0070                     ?_PIN_MANAGER_Initialize:	
  4184                           ; 1 bytes @ 0x0
  4185                           
  4186  0070                     ??_PIN_MANAGER_Initialize:	
  4187                           ; 1 bytes @ 0x0
  4188                           
  4189  0070                     ?_SYSTEM_Initialize:	
  4190                           ; 1 bytes @ 0x0
  4191                           
  4192  0070                     ?_main:	
  4193                           ; 1 bytes @ 0x0
  4194                           
  4195  0070                     ?_ADCC_GetSingleConversion:	
  4196                           ; 1 bytes @ 0x0
  4197                           
  4198  0070                     ?___awmod:	
  4199                           ; 2 bytes @ 0x0
  4200                           
  4201  0070                     ?___ftpack:	
  4202                           ; 2 bytes @ 0x0
  4203                           
  4204  0070                     ?_frexp:	
  4205                           ; 3 bytes @ 0x0
  4206                           
  4207  0070                     ?___ftneg:	
  4208                           ; 3 bytes @ 0x0
  4209                           
  4210  0070                     ?__tdiv_to_l_:	
  4211                           ; 3 bytes @ 0x0
  4212                           
  4213  0070                     ?__div_to_l_:	
  4214                           ; 4 bytes @ 0x0
  4215                           
  4216  0070                     ?___aldiv:	
  4217                           ; 4 bytes @ 0x0
  4218                           
  4219  0070                     ?___lldiv:	
  4220                           ; 4 bytes @ 0x0
  4221                           
  4222  0070                     LCD_Port@a:	
  4223                           ; 4 bytes @ 0x0
  4224                           
  4225  0070                     PIN_MANAGER_Initialize@state:	
  4226                           ; 1 bytes @ 0x0
  4227                           
  4228  0070                     _isdigit$733:	
  4229                           ; 1 bytes @ 0x0
  4230                           
  4231  0070                     PWM6_LoadDutyValue@dutyValue:	
  4232                           ; 1 bytes @ 0x0
  4233                           
  4234  0070                     ___awmod@divisor:	
  4235                           ; 2 bytes @ 0x0
  4236                           
  4237  0070                     __div_to_l_@f1:	
  4238                           ; 2 bytes @ 0x0
  4239                           
  4240  0070                     ___ftpack@arg:	
  4241                           ; 3 bytes @ 0x0
  4242                           
  4243  0070                     __tdiv_to_l_@f1:	
  4244                           ; 3 bytes @ 0x0
  4245                           
  4246  0070                     ___ftneg@f1:	
  4247                           ; 3 bytes @ 0x0
  4248                           
  4249  0070                     frexp@value:	
  4250                           ; 3 bytes @ 0x0
  4251                           
  4252  0070                     ___aldiv@divisor:	
  4253                           ; 3 bytes @ 0x0
  4254                           
  4255  0070                     ___lldiv@divisor:	
  4256                           ; 4 bytes @ 0x0
  4257                           
  4258                           
  4259                           ; 4 bytes @ 0x0
  4260  0070                     	ds	1
  4261  0071                     ??_LCD_Cmd:	
  4262  0071                     ??_LCD_Write_Char:	
  4263                           ; 1 bytes @ 0x1
  4264                           
  4265  0071                     isdigit@c:	
  4266                           ; 1 bytes @ 0x1
  4267                           
  4268                           
  4269                           ; 1 bytes @ 0x1
  4270  0071                     	ds	1
  4271  0072                     ??_PWM6_LoadDutyValue:	
  4272  0072                     LCD_Cmd@a:	
  4273                           ; 1 bytes @ 0x2
  4274                           
  4275  0072                     LCD_Write_Char@temp:	
  4276                           ; 1 bytes @ 0x2
  4277                           
  4278  0072                     ___awmod@dividend:	
  4279                           ; 1 bytes @ 0x2
  4280                           
  4281                           
  4282                           ; 2 bytes @ 0x2
  4283  0072                     	ds	1
  4284  0073                     ??_ADCC_GetSingleConversion:	
  4285  0073                     ??_LCD_Clear:	
  4286                           ; 1 bytes @ 0x3
  4287                           
  4288  0073                     ?_LCD_Set_Cursor:	
  4289                           ; 1 bytes @ 0x3
  4290                           
  4291  0073                     ??_LCD_Init:	
  4292                           ; 1 bytes @ 0x3
  4293                           
  4294  0073                     ??___ftneg:	
  4295                           ; 1 bytes @ 0x3
  4296                           
  4297  0073                     LCD_Set_Cursor@y:	
  4298                           ; 1 bytes @ 0x3
  4299                           
  4300  0073                     LCD_Write_Char@y:	
  4301                           ; 1 bytes @ 0x3
  4302                           
  4303  0073                     ADCC_GetSingleConversion@channel:	
  4304                           ; 1 bytes @ 0x3
  4305                           
  4306  0073                     ___ftpack@exp:	
  4307                           ; 1 bytes @ 0x3
  4308                           
  4309  0073                     frexp@eptr:	
  4310                           ; 1 bytes @ 0x3
  4311                           
  4312  0073                     __div_to_l_@f2:	
  4313                           ; 1 bytes @ 0x3
  4314                           
  4315  0073                     __tdiv_to_l_@f2:	
  4316                           ; 3 bytes @ 0x3
  4317                           
  4318                           
  4319                           ; 3 bytes @ 0x3
  4320  0073                     	ds	1
  4321  0074                     ??_frexp:	
  4322  0074                     ??_LCD_Set_Cursor:	
  4323                           ; 1 bytes @ 0x4
  4324                           
  4325  0074                     ??___awmod:	
  4326                           ; 1 bytes @ 0x4
  4327                           
  4328  0074                     LCD_Write_Char@a:	
  4329                           ; 1 bytes @ 0x4
  4330                           
  4331  0074                     ___ftpack@sign:	
  4332                           ; 1 bytes @ 0x4
  4333                           
  4334  0074                     ___aldiv@dividend:	
  4335                           ; 1 bytes @ 0x4
  4336                           
  4337  0074                     ___lldiv@dividend:	
  4338                           ; 4 bytes @ 0x4
  4339                           
  4340                           
  4341                           ; 4 bytes @ 0x4
  4342  0074                     	ds	1
  4343  0075                     ??___ftpack:	
  4344  0075                     ??_InitCustomChars:	
  4345                           ; 1 bytes @ 0x5
  4346                           
  4347  0075                     ??_LCD_Write_String:	
  4348                           ; 1 bytes @ 0x5
  4349                           
  4350  0075                     LCD_Init@style:	
  4351                           ; 1 bytes @ 0x5
  4352                           
  4353  0075                     ___awmod@counter:	
  4354                           ; 1 bytes @ 0x5
  4355                           
  4356                           
  4357                           ; 1 bytes @ 0x5
  4358  0075                     	ds	1
  4359  0076                     ??__tdiv_to_l_:	
  4360  0076                     ??__div_to_l_:	
  4361                           ; 1 bytes @ 0x6
  4362                           
  4363  0076                     InitCustomChars@i:	
  4364                           ; 1 bytes @ 0x6
  4365                           
  4366  0076                     LCD_Set_Cursor@x:	
  4367                           ; 1 bytes @ 0x6
  4368                           
  4369  0076                     ___awmod@sign:	
  4370                           ; 1 bytes @ 0x6
  4371                           
  4372  0076                     LCD_Write_String@i:	
  4373                           ; 1 bytes @ 0x6
  4374                           
  4375                           
  4376                           ; 2 bytes @ 0x6
  4377  0076                     	ds	1
  4378  0077                     ??_SYSTEM_Initialize:	
  4379  0077                     ?___awdiv:	
  4380                           ; 1 bytes @ 0x7
  4381                           
  4382  0077                     LCD_Set_Cursor@z:	
  4383                           ; 2 bytes @ 0x7
  4384                           
  4385  0077                     ___awdiv@divisor:	
  4386                           ; 1 bytes @ 0x7
  4387                           
  4388                           
  4389                           ; 2 bytes @ 0x7
  4390  0077                     	ds	1
  4391  0078                     ??___aldiv:	
  4392  0078                     ??___lldiv:	
  4393                           ; 1 bytes @ 0x8
  4394                           
  4395  0078                     ?___awtoft:	
  4396                           ; 1 bytes @ 0x8
  4397                           
  4398  0078                     ?___lltoft:	
  4399                           ; 3 bytes @ 0x8
  4400                           
  4401  0078                     ?___lwtoft:	
  4402                           ; 3 bytes @ 0x8
  4403                           
  4404  0078                     LCD_Set_Cursor@w:	
  4405                           ; 3 bytes @ 0x8
  4406                           
  4407  0078                     LCD_Write_String@a:	
  4408                           ; 1 bytes @ 0x8
  4409                           
  4410  0078                     ___awtoft@c:	
  4411                           ; 1 bytes @ 0x8
  4412                           
  4413  0078                     ___lwtoft@c:	
  4414                           ; 2 bytes @ 0x8
  4415                           
  4416  0078                     ___lltoft@c:	
  4417                           ; 2 bytes @ 0x8
  4418                           
  4419                           
  4420                           ; 4 bytes @ 0x8
  4421  0078                     	ds	1
  4422  0079                     LCD_Set_Cursor@temp:	
  4423  0079                     ___awdiv@dividend:	
  4424                           ; 1 bytes @ 0x9
  4425                           
  4426  0079                     ___lldiv@quotient:	
  4427                           ; 2 bytes @ 0x9
  4428                           
  4429                           
  4430                           ; 4 bytes @ 0x9
  4431  0079                     	ds	2
  4432  007B                     ??___awdiv:	
  4433  007B                     ??___awtoft:	
  4434                           ; 1 bytes @ 0xB
  4435                           
  4436  007B                     ??___lwtoft:	
  4437                           ; 1 bytes @ 0xB
  4438                           
  4439                           
  4440                           ; 1 bytes @ 0xB
  4441  007B                     	ds	1
  4442  007C                     ??___wmul:	
  4443  007C                     ??___lltoft:	
  4444                           ; 1 bytes @ 0xC
  4445                           
  4446  007C                     ___wmul@product:	
  4447                           ; 1 bytes @ 0xC
  4448                           
  4449                           
  4450                           ; 2 bytes @ 0xC
  4451  007C                     	ds	1
  4452  007D                     ___awtoft@sign:	
  4453  007D                     ___lldiv@counter:	
  4454                           ; 1 bytes @ 0xD
  4455                           
  4456  007D                     ___lltoft@exp:	
  4457                           ; 1 bytes @ 0xD
  4458                           
  4459                           
  4460                           ; 1 bytes @ 0xD
  4461  007D                     	ds	1
  4462  007E                     ??_eval_poly:	
  4463  007E                     ??___ftsub:	
  4464                           ; 1 bytes @ 0xE
  4465                           
  4466                           
  4467                           	psect	cstackBANK0
  4468  0020                     __pcstackBANK0:	
  4469                           ; 1 bytes @ 0xE
  4470                           
  4471  0020                     ?___ftdiv:	
  4472  0020                     ?___llmod:	
  4473                           ; 3 bytes @ 0x0
  4474                           
  4475  0020                     ___aldiv@counter:	
  4476                           ; 4 bytes @ 0x0
  4477                           
  4478  0020                     ___awdiv@counter:	
  4479                           ; 1 bytes @ 0x0
  4480                           
  4481  0020                     ___ftdiv@f2:	
  4482                           ; 1 bytes @ 0x0
  4483                           
  4484  0020                     __div_to_l_@quot:	
  4485                           ; 3 bytes @ 0x0
  4486                           
  4487  0020                     __tdiv_to_l_@quot:	
  4488                           ; 4 bytes @ 0x0
  4489                           
  4490  0020                     ___llmod@divisor:	
  4491                           ; 4 bytes @ 0x0
  4492                           
  4493                           
  4494                           ; 4 bytes @ 0x0
  4495  0020                     	ds	1
  4496  0021                     ___aldiv@sign:	
  4497  0021                     ___awdiv@sign:	
  4498                           ; 1 bytes @ 0x1
  4499                           
  4500                           
  4501                           ; 1 bytes @ 0x1
  4502  0021                     	ds	1
  4503  0022                     ___awdiv@quotient:	
  4504  0022                     ___aldiv@quotient:	
  4505                           ; 2 bytes @ 0x2
  4506                           
  4507                           
  4508                           ; 4 bytes @ 0x2
  4509  0022                     	ds	1
  4510  0023                     ___ftdiv@f1:	
  4511                           
  4512                           ; 3 bytes @ 0x3
  4513  0023                     	ds	1
  4514  0024                     ?___wmul:	
  4515  0024                     __div_to_l_@cntr:	
  4516                           ; 2 bytes @ 0x4
  4517                           
  4518  0024                     __tdiv_to_l_@cntr:	
  4519                           ; 1 bytes @ 0x4
  4520                           
  4521  0024                     ___wmul@multiplier:	
  4522                           ; 1 bytes @ 0x4
  4523                           
  4524  0024                     ___llmod@dividend:	
  4525                           ; 2 bytes @ 0x4
  4526                           
  4527                           
  4528                           ; 4 bytes @ 0x4
  4529  0024                     	ds	1
  4530  0025                     __div_to_l_@exp1:	
  4531  0025                     __tdiv_to_l_@exp1:	
  4532                           ; 1 bytes @ 0x5
  4533                           
  4534                           
  4535                           ; 1 bytes @ 0x5
  4536  0025                     	ds	1
  4537  0026                     ??___ftdiv:	
  4538  0026                     ___wmul@multiplicand:	
  4539                           ; 1 bytes @ 0x6
  4540                           
  4541                           
  4542                           ; 2 bytes @ 0x6
  4543  0026                     	ds	2
  4544  0028                     ??___llmod:	
  4545  0028                     ?___ftmul:	
  4546                           ; 1 bytes @ 0x8
  4547                           
  4548  0028                     ___ftmul@f1:	
  4549                           ; 3 bytes @ 0x8
  4550                           
  4551                           
  4552                           ; 3 bytes @ 0x8
  4553  0028                     	ds	1
  4554  0029                     ___llmod@counter:	
  4555                           
  4556                           ; 1 bytes @ 0x9
  4557  0029                     	ds	1
  4558  002A                     ___ftdiv@cntr:	
  4559                           
  4560                           ; 1 bytes @ 0xA
  4561  002A                     	ds	1
  4562  002B                     ___ftdiv@f3:	
  4563  002B                     ___ftmul@f2:	
  4564                           ; 3 bytes @ 0xB
  4565                           
  4566                           
  4567                           ; 3 bytes @ 0xB
  4568  002B                     	ds	3
  4569  002E                     ??___ftmul:	
  4570  002E                     ___ftdiv@exp:	
  4571                           ; 1 bytes @ 0xE
  4572                           
  4573                           
  4574                           ; 1 bytes @ 0xE
  4575  002E                     	ds	1
  4576  002F                     ___ftdiv@sign:	
  4577                           
  4578                           ; 1 bytes @ 0xF
  4579  002F                     	ds	3
  4580  0032                     ___ftmul@exp:	
  4581                           
  4582                           ; 1 bytes @ 0x12
  4583  0032                     	ds	1
  4584  0033                     ___ftmul@f3_as_product:	
  4585                           
  4586                           ; 3 bytes @ 0x13
  4587  0033                     	ds	3
  4588  0036                     ___ftmul@cntr:	
  4589                           
  4590                           ; 1 bytes @ 0x16
  4591  0036                     	ds	1
  4592  0037                     ___ftmul@sign:	
  4593                           
  4594                           ; 1 bytes @ 0x17
  4595  0037                     	ds	1
  4596  0038                     ?_fround:	
  4597  0038                     ?_scale:	
  4598                           ; 3 bytes @ 0x18
  4599                           
  4600                           
  4601                           ; 3 bytes @ 0x18
  4602  0038                     	ds	3
  4603  003B                     ??_fround:	
  4604  003B                     ??_scale:	
  4605                           ; 1 bytes @ 0x1B
  4606                           
  4607                           
  4608                           ; 1 bytes @ 0x1B
  4609  003B                     	ds	2
  4610  003D                     _scale$1018:	
  4611                           
  4612                           ; 3 bytes @ 0x1D
  4613  003D                     	ds	2
  4614  003F                     _fround$1017:	
  4615                           
  4616                           ; 3 bytes @ 0x1F
  4617  003F                     	ds	1
  4618  0040                     scale@scl:	
  4619                           
  4620                           ; 1 bytes @ 0x20
  4621  0040                     	ds	1
  4622  0041                     ?___fttol:	
  4623  0041                     ___fttol@f1:	
  4624                           ; 4 bytes @ 0x21
  4625                           
  4626                           
  4627                           ; 3 bytes @ 0x21
  4628  0041                     	ds	1
  4629  0042                     _fround$1016:	
  4630                           
  4631                           ; 3 bytes @ 0x22
  4632  0042                     	ds	3
  4633  0045                     ??___fttol:	
  4634  0045                     fround@prec:	
  4635                           ; 1 bytes @ 0x25
  4636                           
  4637                           
  4638                           ; 1 bytes @ 0x25
  4639  0045                     	ds	1
  4640  0046                     ?___ftadd:	
  4641  0046                     ___ftadd@f1:	
  4642                           ; 3 bytes @ 0x26
  4643                           
  4644                           
  4645                           ; 3 bytes @ 0x26
  4646  0046                     	ds	3
  4647  0049                     ___fttol@sign1:	
  4648  0049                     ___ftadd@f2:	
  4649                           ; 1 bytes @ 0x29
  4650                           
  4651                           
  4652                           ; 3 bytes @ 0x29
  4653  0049                     	ds	1
  4654  004A                     ___fttol@lval:	
  4655                           
  4656                           ; 4 bytes @ 0x2A
  4657  004A                     	ds	2
  4658  004C                     ??___ftadd:	
  4659                           
  4660                           ; 1 bytes @ 0x2C
  4661  004C                     	ds	2
  4662  004E                     ___fttol@exp1:	
  4663                           
  4664                           ; 1 bytes @ 0x2E
  4665  004E                     	ds	2
  4666  0050                     ___ftadd@sign:	
  4667                           
  4668                           ; 1 bytes @ 0x30
  4669  0050                     	ds	1
  4670  0051                     ___ftadd@exp2:	
  4671                           
  4672                           ; 1 bytes @ 0x31
  4673  0051                     	ds	1
  4674  0052                     ___ftadd@exp1:	
  4675                           
  4676                           ; 1 bytes @ 0x32
  4677  0052                     	ds	1
  4678  0053                     ?___ftge:	
  4679  0053                     ?_eval_poly:	
  4680                           ; 1 bit 
  4681                           
  4682  0053                     ?___ftsub:	
  4683                           ; 3 bytes @ 0x33
  4684                           
  4685  0053                     ___ftge@ff1:	
  4686                           ; 3 bytes @ 0x33
  4687                           
  4688  0053                     ___ftsub@f2:	
  4689                           ; 3 bytes @ 0x33
  4690                           
  4691  0053                     eval_poly@x:	
  4692                           ; 3 bytes @ 0x33
  4693                           
  4694                           
  4695                           ; 3 bytes @ 0x33
  4696  0053                     	ds	3
  4697  0056                     eval_poly@d:	
  4698  0056                     ___ftge@ff2:	
  4699                           ; 2 bytes @ 0x36
  4700                           
  4701  0056                     ___ftsub@f1:	
  4702                           ; 3 bytes @ 0x36
  4703                           
  4704                           
  4705                           ; 3 bytes @ 0x36
  4706  0056                     	ds	2
  4707  0058                     eval_poly@n:	
  4708                           
  4709                           ; 2 bytes @ 0x38
  4710  0058                     	ds	1
  4711  0059                     ??___ftge:	
  4712                           
  4713                           ; 1 bytes @ 0x39
  4714  0059                     	ds	1
  4715  005A                     eval_poly@res:	
  4716                           
  4717                           ; 3 bytes @ 0x3A
  4718  005A                     	ds	2
  4719  005C                     ?_sprintf:	
  4720  005C                     sprintf@f:	
  4721                           ; 2 bytes @ 0x3C
  4722                           
  4723                           
  4724                           ; 2 bytes @ 0x3C
  4725  005C                     	ds	1
  4726  005D                     ?_log:	
  4727  005D                     log@x:	
  4728                           ; 3 bytes @ 0x3D
  4729                           
  4730                           
  4731                           ; 3 bytes @ 0x3D
  4732  005D                     	ds	3
  4733  0060                     ??_log:	
  4734                           
  4735                           ; 1 bytes @ 0x40
  4736  0060                     	ds	1
  4737  0061                     ??_sprintf:	
  4738  0061                     log@exponent:	
  4739                           ; 1 bytes @ 0x41
  4740                           
  4741                           
  4742                           ; 2 bytes @ 0x41
  4743  0061                     	ds	6
  4744                           
  4745                           	psect	maintext
  4746  0D02                     __pmaintext:	
  4747 ;;
  4748 ;;Main: autosize = 0, tempsize = 10, incstack = 0, save=0
  4749 ;;
  4750 ;; *************** function _main *****************
  4751 ;; Defined at:
  4752 ;;		line 12 in file "main.c"
  4753 ;; Parameters:    Size  Location     Type
  4754 ;;		None
  4755 ;; Auto vars:     Size  Location     Type
  4756 ;;  s               8   37[BANK1 ] unsigned char [8]
  4757 ;;  totals          4   59[BANK1 ] long 
  4758 ;;  steinhart       3   69[BANK1 ] float 
  4759 ;;  R               3   45[BANK1 ] float 
  4760 ;;  readTemperat    2   67[BANK1 ] unsigned int 
  4761 ;;  outCurrent      2   65[BANK1 ] unsigned int 
  4762 ;;  readTemperat    2   63[BANK1 ] unsigned int 
  4763 ;;  setpoint        2   57[BANK1 ] unsigned int 
  4764 ;;  counter         2   53[BANK1 ] unsigned int 
  4765 ;;  minute          2   51[BANK1 ] unsigned int 
  4766 ;;  timer           2   35[BANK1 ] unsigned int 
  4767 ;;  startupTimer    1   56[BANK1 ] unsigned char 
  4768 ;;  firstTimeThr    1   55[BANK1 ] unsigned char 
  4769 ;; Return value:  Size  Location     Type
  4770 ;;                  1    wreg      void 
  4771 ;; Registers used:
  4772 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4773 ;; Tracked objects:
  4774 ;;		On entry : B1F/0
  4775 ;;		On exit  : 0/0
  4776 ;;		Unchanged: 0/0
  4777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4778 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4779 ;;      Locals:         0       0      37       0       0       0       0       0       0       0       0       0       
      +0       0
  4780 ;;      Temps:          0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0
  4781 ;;      Totals:         0       0      47       0       0       0       0       0       0       0       0       0       
      +0       0
  4782 ;;Total ram usage:       47 bytes
  4783 ;; Hardware stack levels required when called:    4
  4784 ;; This function calls:
  4785 ;;		_ADCC_GetSingleConversion
  4786 ;;		_LCD_Set_Cursor
  4787 ;;		_LCD_Write_Char
  4788 ;;		_LCD_Write_String
  4789 ;;		_PWM6_LoadDutyValue
  4790 ;;		_SYSTEM_Initialize
  4791 ;;		___aldiv
  4792 ;;		___ftadd
  4793 ;;		___ftdiv
  4794 ;;		___ftge
  4795 ;;		___ftneg
  4796 ;;		___ftsub
  4797 ;;		___lwtoft
  4798 ;;		_log
  4799 ;;		_sprintf
  4800 ;; This function is called by:
  4801 ;;		Startup code after reset
  4802 ;; This function uses a non-reentrant model
  4803 ;;
  4804                           
  4805                           
  4806                           ;psect for function _main
  4807  0D02                     _main:	
  4808                           
  4809                           ;main.c: 14: SYSTEM_Initialize();
  4810                           
  4811                           ;incstack = 0
  4812                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4813  0D02  3190  20A9  318D   	fcall	_SYSTEM_Initialize
  4814                           
  4815                           ;main.c: 16: uint16_t readTemperature, setpoint = 24, outCurrent = 1023, readTemperature
      +                          Old, timer = 0, counter = 0, minute = 0;
  4816  0D05  3018               	movlw	24
  4817  0D06  0021               	movlb	1	; select bank1
  4818  0D07  00D9               	movwf	main@setpoint^(0+128)
  4819  0D08  3000               	movlw	0
  4820  0D09  00DA               	movwf	(main@setpoint^(0+128)+1)
  4821  0D0A  30FF               	movlw	255
  4822  0D0B  00E1               	movwf	main@outCurrent^(0+128)
  4823  0D0C  3003               	movlw	3
  4824  0D0D  00E2               	movwf	(main@outCurrent^(0+128)+1)
  4825  0D0E  01C3               	clrf	main@timer^(0+128)
  4826  0D0F  01C4               	clrf	(main@timer+1)^(0+128)
  4827  0D10  01D5               	clrf	main@counter^(0+128)
  4828  0D11  01D6               	clrf	(main@counter+1)^(0+128)
  4829  0D12  01D3               	clrf	main@minute^(0+128)
  4830  0D13  01D4               	clrf	(main@minute+1)^(0+128)
  4831                           
  4832                           ;main.c: 18: unsigned char startupTimer = 0, firstTimeThrough = 0;
  4833  0D14  01D8               	clrf	main@startupTimer^(0+128)
  4834  0D15  01D7               	clrf	main@firstTimeThrough^(0+128)
  4835                           
  4836                           ;main.c: 20: float R, steinhart;
  4837                           ;main.c: 22: char s[8];
  4838                           ;main.c: 24: static uint16_t sampleIndex = 0;
  4839                           ;main.c: 26: int32_t totals = 0;
  4840  0D16  3000               	movlw	0
  4841  0D17  00DE               	movwf	(main@totals+3)^(0+128)
  4842  0D18  3000               	movlw	0
  4843  0D19  00DD               	movwf	(main@totals+2)^(0+128)
  4844  0D1A  3000               	movlw	0
  4845  0D1B  00DC               	movwf	(main@totals+1)^(0+128)
  4846  0D1C  3000               	movlw	0
  4847  0D1D  00DB               	movwf	main@totals^(0+128)
  4848  0D1E                     l3713:	
  4849                           ;main.c: 30: while (1)
  4850                           
  4851                           
  4852                           ;main.c: 31: {
  4853                           ;main.c: 32: readTemperature = ADCC_GetSingleConversion(2);
  4854  0D1E  3002               	movlw	2
  4855  0D1F  319E  26F5  318D   	fcall	_ADCC_GetSingleConversion
  4856  0D22  0871               	movf	?_ADCC_GetSingleConversion+1,w
  4857  0D23  0021               	movlb	1	; select bank1
  4858  0D24  00E4               	movwf	(main@readTemperature+1)^(0+128)
  4859  0D25  0870               	movf	?_ADCC_GetSingleConversion,w
  4860  0D26  00E3               	movwf	main@readTemperature^(0+128)
  4861                           
  4862                           ;main.c: 34: totals = totals - samples[sampleIndex];
  4863  0D27  085B               	movf	main@totals^(0+128),w
  4864  0D28  00B9               	movwf	??_main^(0+128)
  4865  0D29  085C               	movf	(main@totals+1)^(0+128),w
  4866  0D2A  00BA               	movwf	(??_main^(0+128)+1)
  4867  0D2B  085D               	movf	(main@totals+2)^(0+128),w
  4868  0D2C  00BB               	movwf	(??_main^(0+128)+2)
  4869  0D2D  085E               	movf	(main@totals+3)^(0+128),w
  4870  0D2E  00BC               	movwf	(??_main^(0+128)+3)
  4871  0D2F  0869               	movf	(main@sampleIndex+1)^(0+128),w
  4872  0D30  00BE               	movwf	((??_main+4)^(0+128)+1)
  4873  0D31  0868               	movf	main@sampleIndex^(0+128),w
  4874  0D32  00BD               	movwf	(??_main+4)^(0+128)
  4875  0D33  35BD               	lslf	(??_main+4)^(0+128),f
  4876  0D34  0DBE               	rlf	((??_main+4)^(0+128)+1),f
  4877  0D35  308C               	movlw	140
  4878  0D36  073D               	addwf	(??_main+4)^(0+128),w
  4879  0D37  0084               	movwf	4
  4880  0D38  3023               	movlw	35
  4881  0D39  3D3E               	addwfc	(??_main+5)^(0+128),w
  4882  0D3A  0085               	movwf	5
  4883  0D3B  3F00               	moviw [0]fsr0
  4884  0D3C  00BF               	movwf	(??_main+6)^(0+128)
  4885  0D3D  3F01               	moviw [1]fsr0
  4886  0D3E  00C0               	movwf	((??_main+6)^(0+128)+1)
  4887  0D3F  01C1               	clrf	((??_main+6)^(0+128)+2)
  4888  0D40  01C2               	clrf	((??_main+6)^(0+128)+3)
  4889  0D41  09BF               	comf	(??_main+6)^(0+128),f
  4890  0D42  09C0               	comf	((??_main+6)^(0+128)+1),f
  4891  0D43  09C1               	comf	((??_main+6)^(0+128)+2),f
  4892  0D44  09C2               	comf	((??_main+6)^(0+128)+3),f
  4893  0D45  0ABF               	incf	(??_main+6)^(0+128),f
  4894  0D46  1903               	skipnz
  4895  0D47  0AC0               	incf	((??_main+6)^(0+128)+1),f
  4896  0D48  1903               	skipnz
  4897  0D49  0AC1               	incf	((??_main+6)^(0+128)+2),f
  4898  0D4A  1903               	skipnz
  4899  0D4B  0AC2               	incf	((??_main+6)^(0+128)+3),f
  4900  0D4C  083F               	movf	(??_main+6)^(0+128),w
  4901  0D4D  07B9               	addwf	??_main^(0+128),f
  4902  0D4E  0840               	movf	(??_main+7)^(0+128),w
  4903  0D4F  3DBA               	addwfc	(??_main^(0+128)+1),f
  4904  0D50  0841               	movf	(??_main+8)^(0+128),w
  4905  0D51  3DBB               	addwfc	(??_main^(0+128)+2),f
  4906  0D52  0842               	movf	(??_main+9)^(0+128),w
  4907  0D53  3DBC               	addwfc	(??_main^(0+128)+3),f
  4908  0D54  083C               	movf	(??_main+3)^(0+128),w
  4909  0D55  00DE               	movwf	(main@totals+3)^(0+128)
  4910  0D56  083B               	movf	(??_main+2)^(0+128),w
  4911  0D57  00DD               	movwf	(main@totals+2)^(0+128)
  4912  0D58  083A               	movf	(??_main+1)^(0+128),w
  4913  0D59  00DC               	movwf	(main@totals+1)^(0+128)
  4914  0D5A  0839               	movf	??_main^(0+128),w
  4915  0D5B  00DB               	movwf	main@totals^(0+128)
  4916                           
  4917                           ;main.c: 36: samples[sampleIndex] = readTemperature;
  4918  0D5C  0869               	movf	(main@sampleIndex+1)^(0+128),w
  4919  0D5D  00BA               	movwf	(??_main^(0+128)+1)
  4920  0D5E  0868               	movf	main@sampleIndex^(0+128),w
  4921  0D5F  00B9               	movwf	??_main^(0+128)
  4922  0D60  35B9               	lslf	??_main^(0+128),f
  4923  0D61  0DBA               	rlf	(??_main^(0+128)+1),f
  4924  0D62  308C               	movlw	140
  4925  0D63  00BB               	movwf	(??_main+2)^(0+128)
  4926  0D64  3023               	movlw	35
  4927  0D65  00BC               	movwf	((??_main+2)^(0+128)+1)
  4928  0D66  0839               	movf	??_main^(0+128),w
  4929  0D67  073B               	addwf	(??_main+2)^(0+128),w
  4930  0D68  0086               	movwf	6
  4931  0D69  083A               	movf	(??_main+1)^(0+128),w
  4932  0D6A  3D3C               	addwfc	(??_main+3)^(0+128),w
  4933  0D6B  0087               	movwf	7
  4934  0D6C  0863               	movf	main@readTemperature^(0+128),w
  4935  0D6D  3FC0               	movwi [0]fsr1
  4936  0D6E  0864               	movf	(main@readTemperature+1)^(0+128),w
  4937  0D6F  3FC1               	movwi [1]fsr1
  4938                           
  4939                           ;main.c: 38: totals = totals + samples[sampleIndex];
  4940  0D70  085B               	movf	main@totals^(0+128),w
  4941  0D71  00B9               	movwf	??_main^(0+128)
  4942  0D72  085C               	movf	(main@totals+1)^(0+128),w
  4943  0D73  00BA               	movwf	(??_main^(0+128)+1)
  4944  0D74  085D               	movf	(main@totals+2)^(0+128),w
  4945  0D75  00BB               	movwf	(??_main^(0+128)+2)
  4946  0D76  085E               	movf	(main@totals+3)^(0+128),w
  4947  0D77  00BC               	movwf	(??_main^(0+128)+3)
  4948  0D78  0869               	movf	(main@sampleIndex+1)^(0+128),w
  4949  0D79  00BE               	movwf	((??_main+4)^(0+128)+1)
  4950  0D7A  0868               	movf	main@sampleIndex^(0+128),w
  4951  0D7B  00BD               	movwf	(??_main+4)^(0+128)
  4952  0D7C  35BD               	lslf	(??_main+4)^(0+128),f
  4953  0D7D  0DBE               	rlf	((??_main+4)^(0+128)+1),f
  4954  0D7E  308C               	movlw	140
  4955  0D7F  073D               	addwf	(??_main+4)^(0+128),w
  4956  0D80  0084               	movwf	4
  4957  0D81  3023               	movlw	35
  4958  0D82  3D3E               	addwfc	(??_main+5)^(0+128),w
  4959  0D83  0085               	movwf	5
  4960  0D84  3F00               	moviw [0]fsr0
  4961  0D85  00BF               	movwf	(??_main+6)^(0+128)
  4962  0D86  3F01               	moviw [1]fsr0
  4963  0D87  00C0               	movwf	((??_main+6)^(0+128)+1)
  4964  0D88  01C1               	clrf	((??_main+6)^(0+128)+2)
  4965  0D89  01C2               	clrf	((??_main+6)^(0+128)+3)
  4966  0D8A  083F               	movf	(??_main+6)^(0+128),w
  4967  0D8B  07B9               	addwf	??_main^(0+128),f
  4968  0D8C  0840               	movf	(??_main+7)^(0+128),w
  4969  0D8D  3DBA               	addwfc	(??_main^(0+128)+1),f
  4970  0D8E  0841               	movf	(??_main+8)^(0+128),w
  4971  0D8F  3DBB               	addwfc	(??_main^(0+128)+2),f
  4972  0D90  0842               	movf	(??_main+9)^(0+128),w
  4973  0D91  3DBC               	addwfc	(??_main^(0+128)+3),f
  4974  0D92  083C               	movf	(??_main+3)^(0+128),w
  4975  0D93  00DE               	movwf	(main@totals+3)^(0+128)
  4976  0D94  083B               	movf	(??_main+2)^(0+128),w
  4977  0D95  00DD               	movwf	(main@totals+2)^(0+128)
  4978  0D96  083A               	movf	(??_main+1)^(0+128),w
  4979  0D97  00DC               	movwf	(main@totals+1)^(0+128)
  4980  0D98  0839               	movf	??_main^(0+128),w
  4981  0D99  00DB               	movwf	main@totals^(0+128)
  4982                           
  4983                           ;main.c: 40: sampleIndex += 1;
  4984  0D9A  3001               	movlw	1
  4985  0D9B  07E8               	addwf	main@sampleIndex^(0+128),f
  4986  0D9C  3000               	movlw	0
  4987  0D9D  3DE9               	addwfc	(main@sampleIndex+1)^(0+128),f
  4988                           
  4989                           ;main.c: 42: if(sampleIndex >= 50)
  4990  0D9E  3000               	movlw	0
  4991  0D9F  0269               	subwf	(main@sampleIndex+1)^(0+128),w
  4992  0DA0  3032               	movlw	50
  4993  0DA1  1903               	skipnz
  4994  0DA2  0268               	subwf	main@sampleIndex^(0+128),w
  4995  0DA3  1C03               	skipc
  4996  0DA4  2DA7               	goto	l3727
  4997                           
  4998                           ;main.c: 43: {
  4999                           ;main.c: 44: sampleIndex = 0;
  5000  0DA5  01E8               	clrf	main@sampleIndex^(0+128)
  5001  0DA6  01E9               	clrf	(main@sampleIndex+1)^(0+128)
  5002  0DA7                     l3727:	
  5003                           
  5004                           ;main.c: 45: }
  5005                           ;main.c: 47: readTemperature = totals / 50;
  5006  0DA7  3000               	movlw	0
  5007  0DA8  00F3               	movwf	___aldiv@divisor+3
  5008  0DA9  3000               	movlw	0
  5009  0DAA  00F2               	movwf	___aldiv@divisor+2
  5010  0DAB  3000               	movlw	0
  5011  0DAC  00F1               	movwf	___aldiv@divisor+1
  5012  0DAD  3032               	movlw	50
  5013  0DAE  00F0               	movwf	___aldiv@divisor
  5014  0DAF  085E               	movf	(main@totals+3)^(0+128),w
  5015  0DB0  00F7               	movwf	___aldiv@dividend+3
  5016  0DB1  085D               	movf	(main@totals+2)^(0+128),w
  5017  0DB2  00F6               	movwf	___aldiv@dividend+2
  5018  0DB3  085C               	movf	(main@totals+1)^(0+128),w
  5019  0DB4  00F5               	movwf	___aldiv@dividend+1
  5020  0DB5  085B               	movf	main@totals^(0+128),w
  5021  0DB6  00F4               	movwf	___aldiv@dividend
  5022  0DB7  3193  23F7  318D   	fcall	___aldiv
  5023  0DBA  0871               	movf	?___aldiv+1,w
  5024  0DBB  0021               	movlb	1	; select bank1
  5025  0DBC  00E4               	movwf	(main@readTemperature+1)^(0+128)
  5026  0DBD  0870               	movf	?___aldiv,w
  5027  0DBE  00E3               	movwf	main@readTemperature^(0+128)
  5028                           
  5029                           ;main.c: 49: if(startupTimer >= 250)
  5030  0DBF  30FA               	movlw	250
  5031  0DC0  0258               	subwf	main@startupTimer^(0+128),w
  5032  0DC1  1C03               	skipc
  5033  0DC2  2DEE               	goto	l3743
  5034                           
  5035                           ;main.c: 50: {
  5036                           ;main.c: 51: if(firstTimeThrough == 0)
  5037  0DC3  0857               	movf	main@firstTimeThrough^(0+128),w
  5038  0DC4  1D03               	btfss	3,2
  5039  0DC5  2DCE               	goto	l3737
  5040                           
  5041                           ;main.c: 52: {
  5042                           ;main.c: 53: readTemperatureOld = readTemperature;
  5043  0DC6  0864               	movf	(main@readTemperature+1)^(0+128),w
  5044  0DC7  00E0               	movwf	(main@readTemperatureOld+1)^(0+128)
  5045  0DC8  0863               	movf	main@readTemperature^(0+128),w
  5046  0DC9  00DF               	movwf	main@readTemperatureOld^(0+128)
  5047                           
  5048                           ;main.c: 54: firstTimeThrough +=1;
  5049  0DCA  3001               	movlw	1
  5050  0DCB  00B9               	movwf	??_main^(0+128)
  5051  0DCC  0839               	movf	??_main^(0+128),w
  5052  0DCD  07D7               	addwf	main@firstTimeThrough^(0+128),f
  5053  0DCE                     l3737:	
  5054                           
  5055                           ;main.c: 55: }
  5056                           ;main.c: 57: if(readTemperature > readTemperatureOld)
  5057  0DCE  0864               	movf	(main@readTemperature+1)^(0+128),w
  5058  0DCF  0260               	subwf	(main@readTemperatureOld+1)^(0+128),w
  5059  0DD0  1D03               	skipz
  5060  0DD1  2DD4               	goto	u4875
  5061  0DD2  0863               	movf	main@readTemperature^(0+128),w
  5062  0DD3  025F               	subwf	main@readTemperatureOld^(0+128),w
  5063  0DD4                     u4875:	
  5064  0DD4  1803               	skipnc
  5065  0DD5  2DDA               	goto	l206
  5066                           
  5067                           ;main.c: 58: {
  5068                           ;main.c: 59: readTemperatureOld += 1;
  5069  0DD6  3001               	movlw	1
  5070  0DD7  07DF               	addwf	main@readTemperatureOld^(0+128),f
  5071  0DD8  3000               	movlw	0
  5072  0DD9  3DE0               	addwfc	(main@readTemperatureOld+1)^(0+128),f
  5073  0DDA                     l206:	
  5074                           
  5075                           ;main.c: 60: }
  5076                           ;main.c: 62: if(readTemperature < readTemperatureOld)
  5077  0DDA  0860               	movf	(main@readTemperatureOld+1)^(0+128),w
  5078  0DDB  0264               	subwf	(main@readTemperature+1)^(0+128),w
  5079  0DDC  1D03               	skipz
  5080  0DDD  2DE0               	goto	u4885
  5081  0DDE  085F               	movf	main@readTemperatureOld^(0+128),w
  5082  0DDF  0263               	subwf	main@readTemperature^(0+128),w
  5083  0DE0                     u4885:	
  5084  0DE0  1803               	skipnc
  5085  0DE1  2DE6               	goto	l207
  5086                           
  5087                           ;main.c: 63: {
  5088                           ;main.c: 64: readTemperatureOld -= 1;
  5089  0DE2  3001               	movlw	1
  5090  0DE3  02DF               	subwf	main@readTemperatureOld^(0+128),f
  5091  0DE4  3000               	movlw	0
  5092  0DE5  3BE0               	subwfb	(main@readTemperatureOld+1)^(0+128),f
  5093  0DE6                     l207:	
  5094                           
  5095                           ;main.c: 65: }
  5096                           ;main.c: 67: readTemperature = readTemperatureOld;
  5097  0DE6  0860               	movf	(main@readTemperatureOld+1)^(0+128),w
  5098  0DE7  00E4               	movwf	(main@readTemperature+1)^(0+128)
  5099  0DE8  085F               	movf	main@readTemperatureOld^(0+128),w
  5100  0DE9  00E3               	movwf	main@readTemperature^(0+128)
  5101                           
  5102                           ;main.c: 69: startupTimer = 249;
  5103  0DEA  30F9               	movlw	249
  5104  0DEB  00B9               	movwf	??_main^(0+128)
  5105  0DEC  0839               	movf	??_main^(0+128),w
  5106  0DED  00D8               	movwf	main@startupTimer^(0+128)
  5107  0DEE                     l3743:	
  5108                           
  5109                           ;main.c: 70: }
  5110                           ;main.c: 74: if(setpoint > steinhart)
  5111  0DEE  0865               	movf	main@steinhart^(0+128),w
  5112  0DEF  0020               	movlb	0	; select bank0
  5113  0DF0  00D3               	movwf	___ftge@ff1
  5114  0DF1  0021               	movlb	1	; select bank1
  5115  0DF2  0866               	movf	(main@steinhart+1)^(0+128),w
  5116  0DF3  0020               	movlb	0	; select bank0
  5117  0DF4  00D4               	movwf	___ftge@ff1+1
  5118  0DF5  0021               	movlb	1	; select bank1
  5119  0DF6  0867               	movf	(main@steinhart+2)^(0+128),w
  5120  0DF7  0020               	movlb	0	; select bank0
  5121  0DF8  00D5               	movwf	___ftge@ff1+2
  5122  0DF9  0021               	movlb	1	; select bank1
  5123  0DFA  085A               	movf	(main@setpoint+1)^(0+128),w
  5124  0DFB  00F9               	movwf	___lwtoft@c+1
  5125  0DFC  0859               	movf	main@setpoint^(0+128),w
  5126  0DFD  00F8               	movwf	___lwtoft@c
  5127  0DFE  319F  272F  318D   	fcall	___lwtoft
  5128  0E01  0878               	movf	?___lwtoft,w
  5129  0E02  0020               	movlb	0	; select bank0
  5130  0E03  00D6               	movwf	___ftge@ff2
  5131  0E04  0879               	movf	?___lwtoft+1,w
  5132  0E05  00D7               	movwf	___ftge@ff2+1
  5133  0E06  087A               	movf	?___lwtoft+2,w
  5134  0E07  00D8               	movwf	___ftge@ff2+2
  5135  0E08  3188  2000  318D   	fcall	___ftge
  5136  0E0B  1803               	btfsc	3,0
  5137  0E0C  2E1E               	goto	l3751
  5138                           
  5139                           ;main.c: 75: {
  5140                           ;main.c: 76: if(outCurrent < 1022)
  5141  0E0D  3003               	movlw	3
  5142  0E0E  0021               	movlb	1	; select bank1
  5143  0E0F  0262               	subwf	(main@outCurrent+1)^(0+128),w
  5144  0E10  30FE               	movlw	254
  5145  0E11  1903               	skipnz
  5146  0E12  0261               	subwf	main@outCurrent^(0+128),w
  5147  0E13  1803               	skipnc
  5148  0E14  2E1A               	goto	l3749
  5149                           
  5150                           ;main.c: 77: {
  5151                           ;main.c: 78: outCurrent++;
  5152  0E15  3001               	movlw	1
  5153  0E16  07E1               	addwf	main@outCurrent^(0+128),f
  5154  0E17  3000               	movlw	0
  5155  0E18  3DE2               	addwfc	(main@outCurrent+1)^(0+128),f
  5156                           
  5157                           ;main.c: 79: }
  5158  0E19  2E1E               	goto	l3751
  5159  0E1A                     l3749:	
  5160                           
  5161                           ;main.c: 80: else
  5162                           ;main.c: 81: {
  5163                           ;main.c: 82: outCurrent = 1023;
  5164  0E1A  30FF               	movlw	255
  5165  0E1B  00E1               	movwf	main@outCurrent^(0+128)
  5166  0E1C  3003               	movlw	3
  5167  0E1D  00E2               	movwf	(main@outCurrent^(0+128)+1)
  5168  0E1E                     l3751:	
  5169                           
  5170                           ;main.c: 83: }
  5171                           ;main.c: 84: }
  5172                           ;main.c: 86: if(setpoint < steinhart)
  5173  0E1E  0021               	movlb	1	; select bank1
  5174  0E1F  085A               	movf	(main@setpoint+1)^(0+128),w
  5175  0E20  00F9               	movwf	___lwtoft@c+1
  5176  0E21  0859               	movf	main@setpoint^(0+128),w
  5177  0E22  00F8               	movwf	___lwtoft@c
  5178  0E23  319F  272F  318D   	fcall	___lwtoft
  5179  0E26  0878               	movf	?___lwtoft,w
  5180  0E27  0020               	movlb	0	; select bank0
  5181  0E28  00D3               	movwf	___ftge@ff1
  5182  0E29  0879               	movf	?___lwtoft+1,w
  5183  0E2A  00D4               	movwf	___ftge@ff1+1
  5184  0E2B  087A               	movf	?___lwtoft+2,w
  5185  0E2C  00D5               	movwf	___ftge@ff1+2
  5186  0E2D  0021               	movlb	1	; select bank1
  5187  0E2E  0865               	movf	main@steinhart^(0+128),w
  5188  0E2F  0020               	movlb	0	; select bank0
  5189  0E30  00D6               	movwf	___ftge@ff2
  5190  0E31  0021               	movlb	1	; select bank1
  5191  0E32  0866               	movf	(main@steinhart+1)^(0+128),w
  5192  0E33  0020               	movlb	0	; select bank0
  5193  0E34  00D7               	movwf	___ftge@ff2+1
  5194  0E35  0021               	movlb	1	; select bank1
  5195  0E36  0867               	movf	(main@steinhart+2)^(0+128),w
  5196  0E37  0020               	movlb	0	; select bank0
  5197  0E38  00D8               	movwf	___ftge@ff2+2
  5198  0E39  3188  2000  318D   	fcall	___ftge
  5199  0E3C  1803               	btfsc	3,0
  5200  0E3D  2E4D               	goto	l3759
  5201                           
  5202                           ;main.c: 87: {
  5203                           ;main.c: 88: if(outCurrent > 1)
  5204  0E3E  3000               	movlw	0
  5205  0E3F  0021               	movlb	1	; select bank1
  5206  0E40  0262               	subwf	(main@outCurrent+1)^(0+128),w
  5207  0E41  3002               	movlw	2
  5208  0E42  1903               	skipnz
  5209  0E43  0261               	subwf	main@outCurrent^(0+128),w
  5210  0E44  1C03               	skipc
  5211  0E45  2E4B               	goto	l3757
  5212                           
  5213                           ;main.c: 89: {
  5214                           ;main.c: 90: outCurrent-=1;
  5215  0E46  3001               	movlw	1
  5216  0E47  02E1               	subwf	main@outCurrent^(0+128),f
  5217  0E48  3000               	movlw	0
  5218  0E49  3BE2               	subwfb	(main@outCurrent+1)^(0+128),f
  5219                           
  5220                           ;main.c: 91: }
  5221  0E4A  2E4D               	goto	l3759
  5222  0E4B                     l3757:	
  5223                           
  5224                           ;main.c: 92: else
  5225                           ;main.c: 93: {
  5226                           ;main.c: 94: outCurrent = 0;
  5227  0E4B  01E1               	clrf	main@outCurrent^(0+128)
  5228  0E4C  01E2               	clrf	(main@outCurrent+1)^(0+128)
  5229  0E4D                     l3759:	
  5230                           
  5231                           ;main.c: 95: }
  5232                           ;main.c: 96: }
  5233                           ;main.c: 98: PWM6_LoadDutyValue(outCurrent);
  5234  0E4D  0021               	movlb	1	; select bank1
  5235  0E4E  0862               	movf	(main@outCurrent+1)^(0+128),w
  5236  0E4F  00F1               	movwf	PWM6_LoadDutyValue@dutyValue+1
  5237  0E50  0861               	movf	main@outCurrent^(0+128),w
  5238  0E51  00F0               	movwf	PWM6_LoadDutyValue@dutyValue
  5239  0E52  3180  2005  318D   	fcall	_PWM6_LoadDutyValue
  5240                           
  5241                           ;main.c: 100: R = 10200/(1023/(float)readTemperature - 1);
  5242  0E55  3000               	movlw	0
  5243  0E56  0020               	movlb	0	; select bank0
  5244  0E57  00C6               	movwf	___ftadd@f1
  5245  0E58  3080               	movlw	128
  5246  0E59  00C7               	movwf	___ftadd@f1+1
  5247  0E5A  30BF               	movlw	191
  5248  0E5B  00C8               	movwf	___ftadd@f1+2
  5249  0E5C  0021               	movlb	1	; select bank1
  5250  0E5D  0864               	movf	(main@readTemperature+1)^(0+128),w
  5251  0E5E  00F9               	movwf	___lwtoft@c+1
  5252  0E5F  0863               	movf	main@readTemperature^(0+128),w
  5253  0E60  00F8               	movwf	___lwtoft@c
  5254  0E61  319F  272F  318D   	fcall	___lwtoft
  5255  0E64  0878               	movf	?___lwtoft,w
  5256  0E65  0020               	movlb	0	; select bank0
  5257  0E66  00A0               	movwf	___ftdiv@f2
  5258  0E67  0879               	movf	?___lwtoft+1,w
  5259  0E68  00A1               	movwf	___ftdiv@f2+1
  5260  0E69  087A               	movf	?___lwtoft+2,w
  5261  0E6A  00A2               	movwf	___ftdiv@f2+2
  5262  0E6B  30C0               	movlw	192
  5263  0E6C  00A3               	movwf	___ftdiv@f1
  5264  0E6D  307F               	movlw	127
  5265  0E6E  00A4               	movwf	___ftdiv@f1+1
  5266  0E6F  3044               	movlw	68
  5267  0E70  00A5               	movwf	___ftdiv@f1+2
  5268  0E71  3195  2500  318D   	fcall	___ftdiv
  5269  0E74  0020               	movlb	0	; select bank0
  5270  0E75  0820               	movf	?___ftdiv,w
  5271  0E76  00C9               	movwf	___ftadd@f2
  5272  0E77  0821               	movf	?___ftdiv+1,w
  5273  0E78  00CA               	movwf	___ftadd@f2+1
  5274  0E79  0822               	movf	?___ftdiv+2,w
  5275  0E7A  00CB               	movwf	___ftadd@f2+2
  5276  0E7B  3197  270A  318D   	fcall	___ftadd
  5277  0E7E  0020               	movlb	0	; select bank0
  5278  0E7F  0846               	movf	?___ftadd,w
  5279  0E80  0021               	movlb	1	; select bank1
  5280  0E81  00D0               	movwf	_main$1015^(0+128)
  5281  0E82  0020               	movlb	0	; select bank0
  5282  0E83  0847               	movf	?___ftadd+1,w
  5283  0E84  0021               	movlb	1	; select bank1
  5284  0E85  00D1               	movwf	(_main$1015+1)^(0+128)
  5285  0E86  0020               	movlb	0	; select bank0
  5286  0E87  0848               	movf	?___ftadd+2,w
  5287  0E88  0021               	movlb	1	; select bank1
  5288  0E89  00D2               	movwf	(_main$1015+2)^(0+128)
  5289                           
  5290                           ;main.c: 100: R = 10200/(1023/(float)readTemperature - 1);
  5291  0E8A  0850               	movf	_main$1015^(0+128),w
  5292  0E8B  0020               	movlb	0	; select bank0
  5293  0E8C  00A0               	movwf	___ftdiv@f2
  5294  0E8D  0021               	movlb	1	; select bank1
  5295  0E8E  0851               	movf	(_main$1015+1)^(0+128),w
  5296  0E8F  0020               	movlb	0	; select bank0
  5297  0E90  00A1               	movwf	___ftdiv@f2+1
  5298  0E91  0021               	movlb	1	; select bank1
  5299  0E92  0852               	movf	(_main$1015+2)^(0+128),w
  5300  0E93  0020               	movlb	0	; select bank0
  5301  0E94  00A2               	movwf	___ftdiv@f2+2
  5302  0E95  3060               	movlw	96
  5303  0E96  00A3               	movwf	___ftdiv@f1
  5304  0E97  301F               	movlw	31
  5305  0E98  00A4               	movwf	___ftdiv@f1+1
  5306  0E99  3046               	movlw	70
  5307  0E9A  00A5               	movwf	___ftdiv@f1+2
  5308  0E9B  3195  2500  318D   	fcall	___ftdiv
  5309  0E9E  0020               	movlb	0	; select bank0
  5310  0E9F  0820               	movf	?___ftdiv,w
  5311  0EA0  0021               	movlb	1	; select bank1
  5312  0EA1  00CD               	movwf	main@R^(0+128)
  5313  0EA2  0020               	movlb	0	; select bank0
  5314  0EA3  0821               	movf	?___ftdiv+1,w
  5315  0EA4  0021               	movlb	1	; select bank1
  5316  0EA5  00CE               	movwf	(main@R+1)^(0+128)
  5317  0EA6  0020               	movlb	0	; select bank0
  5318  0EA7  0822               	movf	?___ftdiv+2,w
  5319  0EA8  0021               	movlb	1	; select bank1
  5320  0EA9  00CF               	movwf	(main@R+2)^(0+128)
  5321                           
  5322                           ;main.c: 102: steinhart = R /10061;
  5323  0EAA  3034               	movlw	52
  5324  0EAB  0020               	movlb	0	; select bank0
  5325  0EAC  00A0               	movwf	___ftdiv@f2
  5326  0EAD  301D               	movlw	29
  5327  0EAE  00A1               	movwf	___ftdiv@f2+1
  5328  0EAF  3046               	movlw	70
  5329  0EB0  00A2               	movwf	___ftdiv@f2+2
  5330  0EB1  0021               	movlb	1	; select bank1
  5331  0EB2  084D               	movf	main@R^(0+128),w
  5332  0EB3  0020               	movlb	0	; select bank0
  5333  0EB4  00A3               	movwf	___ftdiv@f1
  5334  0EB5  0021               	movlb	1	; select bank1
  5335  0EB6  084E               	movf	(main@R+1)^(0+128),w
  5336  0EB7  0020               	movlb	0	; select bank0
  5337  0EB8  00A4               	movwf	___ftdiv@f1+1
  5338  0EB9  0021               	movlb	1	; select bank1
  5339  0EBA  084F               	movf	(main@R+2)^(0+128),w
  5340  0EBB  0020               	movlb	0	; select bank0
  5341  0EBC  00A5               	movwf	___ftdiv@f1+2
  5342  0EBD  3195  2500  318D   	fcall	___ftdiv
  5343  0EC0  0020               	movlb	0	; select bank0
  5344  0EC1  0820               	movf	?___ftdiv,w
  5345  0EC2  0021               	movlb	1	; select bank1
  5346  0EC3  00E5               	movwf	main@steinhart^(0+128)
  5347  0EC4  0020               	movlb	0	; select bank0
  5348  0EC5  0821               	movf	?___ftdiv+1,w
  5349  0EC6  0021               	movlb	1	; select bank1
  5350  0EC7  00E6               	movwf	(main@steinhart+1)^(0+128)
  5351  0EC8  0020               	movlb	0	; select bank0
  5352  0EC9  0822               	movf	?___ftdiv+2,w
  5353  0ECA  0021               	movlb	1	; select bank1
  5354  0ECB  00E7               	movwf	(main@steinhart+2)^(0+128)
  5355                           
  5356                           ;main.c: 103: steinhart = log(steinhart);
  5357  0ECC  0865               	movf	main@steinhart^(0+128),w
  5358  0ECD  0020               	movlb	0	; select bank0
  5359  0ECE  00DD               	movwf	log@x
  5360  0ECF  0021               	movlb	1	; select bank1
  5361  0ED0  0866               	movf	(main@steinhart+1)^(0+128),w
  5362  0ED1  0020               	movlb	0	; select bank0
  5363  0ED2  00DE               	movwf	log@x+1
  5364  0ED3  0021               	movlb	1	; select bank1
  5365  0ED4  0867               	movf	(main@steinhart+2)^(0+128),w
  5366  0ED5  0020               	movlb	0	; select bank0
  5367  0ED6  00DF               	movwf	log@x+2
  5368  0ED7  3195  25A9  318D   	fcall	_log
  5369  0EDA  0020               	movlb	0	; select bank0
  5370  0EDB  085D               	movf	?_log,w
  5371  0EDC  0021               	movlb	1	; select bank1
  5372  0EDD  00E5               	movwf	main@steinhart^(0+128)
  5373  0EDE  0020               	movlb	0	; select bank0
  5374  0EDF  085E               	movf	?_log+1,w
  5375  0EE0  0021               	movlb	1	; select bank1
  5376  0EE1  00E6               	movwf	(main@steinhart+1)^(0+128)
  5377  0EE2  0020               	movlb	0	; select bank0
  5378  0EE3  085F               	movf	?_log+2,w
  5379  0EE4  0021               	movlb	1	; select bank1
  5380  0EE5  00E7               	movwf	(main@steinhart+2)^(0+128)
  5381                           
  5382                           ;main.c: 104: steinhart /= 3995;
  5383  0EE6  30B0               	movlw	176
  5384  0EE7  0020               	movlb	0	; select bank0
  5385  0EE8  00A0               	movwf	___ftdiv@f2
  5386  0EE9  3079               	movlw	121
  5387  0EEA  00A1               	movwf	___ftdiv@f2+1
  5388  0EEB  3045               	movlw	69
  5389  0EEC  00A2               	movwf	___ftdiv@f2+2
  5390  0EED  0021               	movlb	1	; select bank1
  5391  0EEE  0865               	movf	main@steinhart^(0+128),w
  5392  0EEF  0020               	movlb	0	; select bank0
  5393  0EF0  00A3               	movwf	___ftdiv@f1
  5394  0EF1  0021               	movlb	1	; select bank1
  5395  0EF2  0866               	movf	(main@steinhart+1)^(0+128),w
  5396  0EF3  0020               	movlb	0	; select bank0
  5397  0EF4  00A4               	movwf	___ftdiv@f1+1
  5398  0EF5  0021               	movlb	1	; select bank1
  5399  0EF6  0867               	movf	(main@steinhart+2)^(0+128),w
  5400  0EF7  0020               	movlb	0	; select bank0
  5401  0EF8  00A5               	movwf	___ftdiv@f1+2
  5402  0EF9  3195  2500  318D   	fcall	___ftdiv
  5403  0EFC  0020               	movlb	0	; select bank0
  5404  0EFD  0820               	movf	?___ftdiv,w
  5405  0EFE  0021               	movlb	1	; select bank1
  5406  0EFF  00E5               	movwf	main@steinhart^(0+128)
  5407  0F00  0020               	movlb	0	; select bank0
  5408  0F01  0821               	movf	?___ftdiv+1,w
  5409  0F02  0021               	movlb	1	; select bank1
  5410  0F03  00E6               	movwf	(main@steinhart+1)^(0+128)
  5411  0F04  0020               	movlb	0	; select bank0
  5412  0F05  0822               	movf	?___ftdiv+2,w
  5413  0F06  0021               	movlb	1	; select bank1
  5414  0F07  00E7               	movwf	(main@steinhart+2)^(0+128)
  5415                           
  5416                           ;main.c: 105: steinhart += 1.0 / (25 + 273.15);
  5417  0F08  30CF               	movlw	207
  5418  0F09  0020               	movlb	0	; select bank0
  5419  0F0A  00C6               	movwf	___ftadd@f1
  5420  0F0B  305B               	movlw	91
  5421  0F0C  00C7               	movwf	___ftadd@f1+1
  5422  0F0D  303B               	movlw	59
  5423  0F0E  00C8               	movwf	___ftadd@f1+2
  5424  0F0F  0021               	movlb	1	; select bank1
  5425  0F10  0865               	movf	main@steinhart^(0+128),w
  5426  0F11  0020               	movlb	0	; select bank0
  5427  0F12  00C9               	movwf	___ftadd@f2
  5428  0F13  0021               	movlb	1	; select bank1
  5429  0F14  0866               	movf	(main@steinhart+1)^(0+128),w
  5430  0F15  0020               	movlb	0	; select bank0
  5431  0F16  00CA               	movwf	___ftadd@f2+1
  5432  0F17  0021               	movlb	1	; select bank1
  5433  0F18  0867               	movf	(main@steinhart+2)^(0+128),w
  5434  0F19  0020               	movlb	0	; select bank0
  5435  0F1A  00CB               	movwf	___ftadd@f2+2
  5436  0F1B  3197  270A  318D   	fcall	___ftadd
  5437  0F1E  0020               	movlb	0	; select bank0
  5438  0F1F  0846               	movf	?___ftadd,w
  5439  0F20  0021               	movlb	1	; select bank1
  5440  0F21  00E5               	movwf	main@steinhart^(0+128)
  5441  0F22  0020               	movlb	0	; select bank0
  5442  0F23  0847               	movf	?___ftadd+1,w
  5443  0F24  0021               	movlb	1	; select bank1
  5444  0F25  00E6               	movwf	(main@steinhart+1)^(0+128)
  5445  0F26  0020               	movlb	0	; select bank0
  5446  0F27  0848               	movf	?___ftadd+2,w
  5447  0F28  0021               	movlb	1	; select bank1
  5448  0F29  00E7               	movwf	(main@steinhart+2)^(0+128)
  5449                           
  5450                           ;main.c: 106: steinhart = 1.0 / steinhart;
  5451  0F2A  0865               	movf	main@steinhart^(0+128),w
  5452  0F2B  0020               	movlb	0	; select bank0
  5453  0F2C  00A0               	movwf	___ftdiv@f2
  5454  0F2D  0021               	movlb	1	; select bank1
  5455  0F2E  0866               	movf	(main@steinhart+1)^(0+128),w
  5456  0F2F  0020               	movlb	0	; select bank0
  5457  0F30  00A1               	movwf	___ftdiv@f2+1
  5458  0F31  0021               	movlb	1	; select bank1
  5459  0F32  0867               	movf	(main@steinhart+2)^(0+128),w
  5460  0F33  0020               	movlb	0	; select bank0
  5461  0F34  00A2               	movwf	___ftdiv@f2+2
  5462  0F35  3000               	movlw	0
  5463  0F36  00A3               	movwf	___ftdiv@f1
  5464  0F37  3080               	movlw	128
  5465  0F38  00A4               	movwf	___ftdiv@f1+1
  5466  0F39  303F               	movlw	63
  5467  0F3A  00A5               	movwf	___ftdiv@f1+2
  5468  0F3B  3195  2500  318D   	fcall	___ftdiv
  5469  0F3E  0020               	movlb	0	; select bank0
  5470  0F3F  0820               	movf	?___ftdiv,w
  5471  0F40  0021               	movlb	1	; select bank1
  5472  0F41  00E5               	movwf	main@steinhart^(0+128)
  5473  0F42  0020               	movlb	0	; select bank0
  5474  0F43  0821               	movf	?___ftdiv+1,w
  5475  0F44  0021               	movlb	1	; select bank1
  5476  0F45  00E6               	movwf	(main@steinhart+1)^(0+128)
  5477  0F46  0020               	movlb	0	; select bank0
  5478  0F47  0822               	movf	?___ftdiv+2,w
  5479  0F48  0021               	movlb	1	; select bank1
  5480  0F49  00E7               	movwf	(main@steinhart+2)^(0+128)
  5481                           
  5482                           ;main.c: 107: steinhart -= 273.15;
  5483  0F4A  3093               	movlw	147
  5484  0F4B  0020               	movlb	0	; select bank0
  5485  0F4C  00D3               	movwf	___ftsub@f2
  5486  0F4D  3088               	movlw	136
  5487  0F4E  00D4               	movwf	___ftsub@f2+1
  5488  0F4F  3043               	movlw	67
  5489  0F50  00D5               	movwf	___ftsub@f2+2
  5490  0F51  0021               	movlb	1	; select bank1
  5491  0F52  0865               	movf	main@steinhart^(0+128),w
  5492  0F53  0020               	movlb	0	; select bank0
  5493  0F54  00D6               	movwf	___ftsub@f1
  5494  0F55  0021               	movlb	1	; select bank1
  5495  0F56  0866               	movf	(main@steinhart+1)^(0+128),w
  5496  0F57  0020               	movlb	0	; select bank0
  5497  0F58  00D7               	movwf	___ftsub@f1+1
  5498  0F59  0021               	movlb	1	; select bank1
  5499  0F5A  0867               	movf	(main@steinhart+2)^(0+128),w
  5500  0F5B  0020               	movlb	0	; select bank0
  5501  0F5C  00D8               	movwf	___ftsub@f1+2
  5502  0F5D  319F  27C2  318D   	fcall	___ftsub
  5503  0F60  0020               	movlb	0	; select bank0
  5504  0F61  0853               	movf	?___ftsub,w
  5505  0F62  0021               	movlb	1	; select bank1
  5506  0F63  00E5               	movwf	main@steinhart^(0+128)
  5507  0F64  0020               	movlb	0	; select bank0
  5508  0F65  0854               	movf	?___ftsub+1,w
  5509  0F66  0021               	movlb	1	; select bank1
  5510  0F67  00E6               	movwf	(main@steinhart+1)^(0+128)
  5511  0F68  0020               	movlb	0	; select bank0
  5512  0F69  0855               	movf	?___ftsub+2,w
  5513  0F6A  0021               	movlb	1	; select bank1
  5514  0F6B  00E7               	movwf	(main@steinhart+2)^(0+128)
  5515                           
  5516                           ;main.c: 127: sprintf(s,"%3.1f", steinhart );
  5517  0F6C  3091               	movlw	low (STR_1| (0+32768))
  5518  0F6D  0020               	movlb	0	; select bank0
  5519  0F6E  00DC               	movwf	sprintf@f
  5520  0F6F  3098               	movlw	high (STR_1| (0+32768))
  5521  0F70  00DD               	movwf	sprintf@f+1
  5522  0F71  0021               	movlb	1	; select bank1
  5523  0F72  0865               	movf	main@steinhart^(0+128),w
  5524  0F73  0020               	movlb	0	; select bank0
  5525  0F74  00DE               	movwf	?_sprintf+2
  5526  0F75  0021               	movlb	1	; select bank1
  5527  0F76  0866               	movf	(main@steinhart+1)^(0+128),w
  5528  0F77  0020               	movlb	0	; select bank0
  5529  0F78  00DF               	movwf	?_sprintf+3
  5530  0F79  0021               	movlb	1	; select bank1
  5531  0F7A  0867               	movf	(main@steinhart+2)^(0+128),w
  5532  0F7B  0020               	movlb	0	; select bank0
  5533  0F7C  00E0               	movwf	?_sprintf+4
  5534  0F7D  30C5               	movlw	(low (main@s| 0))& (0+255)
  5535  0F7E  3180  20D1  318D   	fcall	_sprintf
  5536                           
  5537                           ;main.c: 128: LCD_Set_Cursor(0,0);
  5538  0F81  01F3               	clrf	LCD_Set_Cursor@y
  5539  0F82  3000               	movlw	0
  5540  0F83  3193  2378  318D   	fcall	_LCD_Set_Cursor
  5541                           
  5542                           ;main.c: 129: LCD_Write_String(s);
  5543  0F86  30C5               	movlw	(low (main@s| 0))& (0+255)
  5544  0F87  319F  278B  318D   	fcall	_LCD_Write_String
  5545                           
  5546                           ;main.c: 130: LCD_Write_Char(0);
  5547  0F8A  3000               	movlw	0
  5548  0F8B  3190  2007  318D   	fcall	_LCD_Write_Char
  5549                           
  5550                           ;main.c: 131: LCD_Write_Char('C');
  5551  0F8E  3043               	movlw	67
  5552  0F8F  3190  2007  318D   	fcall	_LCD_Write_Char
  5553                           
  5554                           ;main.c: 132: LCD_Write_Char(' ');
  5555  0F92  3020               	movlw	32
  5556  0F93  3190  2007  318D   	fcall	_LCD_Write_Char
  5557                           
  5558                           ;main.c: 133: LCD_Write_Char(' ');
  5559  0F96  3020               	movlw	32
  5560  0F97  3190  2007  318D   	fcall	_LCD_Write_Char
  5561                           
  5562                           ;main.c: 135: sprintf(s,"%d  ", minute);
  5563  0F9A  3097               	movlw	low (STR_2| (0+32768))
  5564  0F9B  0020               	movlb	0	; select bank0
  5565  0F9C  00DC               	movwf	sprintf@f
  5566  0F9D  3098               	movlw	high (STR_2| (0+32768))
  5567  0F9E  00DD               	movwf	sprintf@f+1
  5568  0F9F  0021               	movlb	1	; select bank1
  5569  0FA0  0854               	movf	(main@minute+1)^(0+128),w
  5570  0FA1  0020               	movlb	0	; select bank0
  5571  0FA2  00DF               	movwf	?_sprintf+3
  5572  0FA3  0021               	movlb	1	; select bank1
  5573  0FA4  0853               	movf	main@minute^(0+128),w
  5574  0FA5  0020               	movlb	0	; select bank0
  5575  0FA6  00DE               	movwf	?_sprintf+2
  5576  0FA7  30C5               	movlw	(low (main@s| 0))& (0+255)
  5577  0FA8  3180  20D1  318D   	fcall	_sprintf
  5578                           
  5579                           ;main.c: 136: LCD_Set_Cursor(1,0);
  5580  0FAB  01F3               	clrf	LCD_Set_Cursor@y
  5581  0FAC  3001               	movlw	1
  5582  0FAD  3193  2378  318D   	fcall	_LCD_Set_Cursor
  5583                           
  5584                           ;main.c: 137: LCD_Write_String(s);
  5585  0FB0  30C5               	movlw	(low (main@s| 0))& (0+255)
  5586  0FB1  319F  278B  318D   	fcall	_LCD_Write_String
  5587                           
  5588                           ;main.c: 139: startupTimer +=1;
  5589  0FB4  3001               	movlw	1
  5590  0FB5  0021               	movlb	1	; select bank1
  5591  0FB6  00B9               	movwf	??_main^(0+128)
  5592  0FB7  0839               	movf	??_main^(0+128),w
  5593  0FB8  07D8               	addwf	main@startupTimer^(0+128),f
  5594                           
  5595                           ;main.c: 140: counter+=1;
  5596  0FB9  3001               	movlw	1
  5597  0FBA  07D5               	addwf	main@counter^(0+128),f
  5598  0FBB  3000               	movlw	0
  5599  0FBC  3DD6               	addwfc	(main@counter+1)^(0+128),f
  5600                           
  5601                           ;main.c: 142: if(setpoint - steinhart < 2)
  5602  0FBD  0865               	movf	main@steinhart^(0+128),w
  5603  0FBE  00F0               	movwf	___ftneg@f1
  5604  0FBF  0866               	movf	(main@steinhart+1)^(0+128),w
  5605  0FC0  00F1               	movwf	___ftneg@f1+1
  5606  0FC1  0867               	movf	(main@steinhart+2)^(0+128),w
  5607  0FC2  00F2               	movwf	___ftneg@f1+2
  5608  0FC3  319E  26C8  318D   	fcall	___ftneg
  5609  0FC6  0870               	movf	?___ftneg,w
  5610  0FC7  0020               	movlb	0	; select bank0
  5611  0FC8  00C6               	movwf	___ftadd@f1
  5612  0FC9  0871               	movf	?___ftneg+1,w
  5613  0FCA  00C7               	movwf	___ftadd@f1+1
  5614  0FCB  0872               	movf	?___ftneg+2,w
  5615  0FCC  00C8               	movwf	___ftadd@f1+2
  5616  0FCD  0021               	movlb	1	; select bank1
  5617  0FCE  085A               	movf	(main@setpoint+1)^(0+128),w
  5618  0FCF  00F9               	movwf	___lwtoft@c+1
  5619  0FD0  0859               	movf	main@setpoint^(0+128),w
  5620  0FD1  00F8               	movwf	___lwtoft@c
  5621  0FD2  319F  272F  318D   	fcall	___lwtoft
  5622  0FD5  0878               	movf	?___lwtoft,w
  5623  0FD6  0020               	movlb	0	; select bank0
  5624  0FD7  00C9               	movwf	___ftadd@f2
  5625  0FD8  0879               	movf	?___lwtoft+1,w
  5626  0FD9  00CA               	movwf	___ftadd@f2+1
  5627  0FDA  087A               	movf	?___lwtoft+2,w
  5628  0FDB  00CB               	movwf	___ftadd@f2+2
  5629  0FDC  3197  270A  318D   	fcall	___ftadd
  5630  0FDF  0020               	movlb	0	; select bank0
  5631  0FE0  0846               	movf	?___ftadd,w
  5632  0FE1  00D3               	movwf	___ftge@ff1
  5633  0FE2  0847               	movf	?___ftadd+1,w
  5634  0FE3  00D4               	movwf	___ftge@ff1+1
  5635  0FE4  0848               	movf	?___ftadd+2,w
  5636  0FE5  00D5               	movwf	___ftge@ff1+2
  5637  0FE6  3000               	movlw	0
  5638  0FE7  00D6               	movwf	___ftge@ff2
  5639  0FE8  3000               	movlw	0
  5640  0FE9  00D7               	movwf	___ftge@ff2+1
  5641  0FEA  3040               	movlw	64
  5642  0FEB  00D8               	movwf	___ftge@ff2+2
  5643  0FEC  3188  2000  318D   	fcall	___ftge
  5644  0FEF  1803               	btfsc	3,0
  5645  0FF0  2D1E               	goto	l3713
  5646                           
  5647                           ;main.c: 143: {
  5648                           ;main.c: 144: if(counter>=309)
  5649  0FF1  3001               	movlw	1
  5650  0FF2  0021               	movlb	1	; select bank1
  5651  0FF3  0256               	subwf	(main@counter+1)^(0+128),w
  5652  0FF4  3035               	movlw	53
  5653  0FF5  1903               	skipnz
  5654  0FF6  0255               	subwf	main@counter^(0+128),w
  5655  0FF7  1C03               	skipc
  5656  0FF8  2D1E               	goto	l3713
  5657                           
  5658                           ;main.c: 145: {
  5659                           ;main.c: 146: minute+=1;
  5660  0FF9  3001               	movlw	1
  5661  0FFA  07D3               	addwf	main@minute^(0+128),f
  5662  0FFB  3000               	movlw	0
  5663  0FFC  3DD4               	addwfc	(main@minute+1)^(0+128),f
  5664                           
  5665                           ;main.c: 147: counter = 0;
  5666  0FFD  01D5               	clrf	main@counter^(0+128)
  5667  0FFE  01D6               	clrf	(main@counter+1)^(0+128)
  5668  0FFF  2D1E               	goto	l3713
  5669  1000                     __end_of_main:	
  5670                           
  5671                           	psect	text1
  5672  00D1                     __ptext1:	
  5673 ;; *************** function _sprintf *****************
  5674 ;; Defined at:
  5675 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\doprnt.c"
  5676 ;; Parameters:    Size  Location     Type
  5677 ;;  sp              1    wreg     PTR unsigned char 
  5678 ;;		 -> main@s(8), 
  5679 ;;  f               2   60[BANK0 ] PTR const unsigned char 
  5680 ;;		 -> STR_2(5), STR_1(6), 
  5681 ;; Auto vars:     Size  Location     Type
  5682 ;;  sp              1   21[BANK1 ] PTR unsigned char 
  5683 ;;		 -> main@s(8), 
  5684 ;;  val             4   12[BANK1 ] unsigned long 
  5685 ;;  tmpval          4    8[BANK1 ] struct .
  5686 ;;  fval            3   18[BANK1 ] struct .
  5687 ;;  prec            2   22[BANK1 ] int 
  5688 ;;  exp             2   16[BANK1 ] int 
  5689 ;;  width           2    6[BANK1 ] int 
  5690 ;;  flag            2    4[BANK1 ] unsigned short 
  5691 ;;  cp              2    0        PTR const unsigned char 
  5692 ;;  len             2    0        unsigned int 
  5693 ;;  c               1   24[BANK1 ] char 
  5694 ;;  ap              1    3[BANK1 ] PTR void [1]
  5695 ;;		 -> ?_sprintf(2), 
  5696 ;;  d               1    0        unsigned char 
  5697 ;; Return value:  Size  Location     Type
  5698 ;;                  2   60[BANK0 ] int 
  5699 ;; Registers used:
  5700 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5701 ;; Tracked objects:
  5702 ;;		On entry : 0/0
  5703 ;;		On exit  : 0/0
  5704 ;;		Unchanged: 0/0
  5705 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5706 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5707 ;;      Locals:         0       0      25       0       0       0       0       0       0       0       0       0       
      +0       0
  5708 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5709 ;;      Totals:         0      11      25       0       0       0       0       0       0       0       0       0       
      +0       0
  5710 ;;Total ram usage:       36 bytes
  5711 ;; Hardware stack levels used:    1
  5712 ;; Hardware stack levels required when called:    3
  5713 ;; This function calls:
  5714 ;;		___awdiv
  5715 ;;		___ftadd
  5716 ;;		___ftge
  5717 ;;		___ftmul
  5718 ;;		___ftneg
  5719 ;;		___ftsub
  5720 ;;		___fttol
  5721 ;;		___lldiv
  5722 ;;		___llmod
  5723 ;;		___lltoft
  5724 ;;		___wmul
  5725 ;;		__div_to_l_
  5726 ;;		__tdiv_to_l_
  5727 ;;		_fround
  5728 ;;		_isdigit
  5729 ;;		_scale
  5730 ;; This function is called by:
  5731 ;;		_main
  5732 ;; This function uses a non-reentrant model
  5733 ;;
  5734                           
  5735                           
  5736                           ;psect for function _sprintf
  5737  00D1                     _sprintf:	
  5738                           
  5739                           ;incstack = 0
  5740                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5741                           ;sprintf@sp stored from wreg
  5742  00D1  0021               	movlb	1	; select bank1
  5743  00D2  00B5               	movwf	sprintf@sp^(0+128)
  5744                           
  5745                           ;doprnt.c: 494: va_list ap;
  5746                           ;doprnt.c: 499: signed char c;
  5747                           ;doprnt.c: 501: int width;
  5748                           ;doprnt.c: 504: int prec;
  5749                           ;doprnt.c: 508: unsigned short flag;
  5750                           ;doprnt.c: 515: char d;
  5751                           ;doprnt.c: 516: double fval;
  5752                           ;doprnt.c: 517: int exp;
  5753                           ;doprnt.c: 523: union {
  5754                           ;doprnt.c: 524: unsigned long vd;
  5755                           ;doprnt.c: 525: double integ;
  5756                           ;doprnt.c: 526: } tmpval;
  5757                           ;doprnt.c: 528: unsigned long val;
  5758                           ;doprnt.c: 529: unsigned len;
  5759                           ;doprnt.c: 530: const char * cp;
  5760                           ;doprnt.c: 533: *ap = __va_start();
  5761  00D3  305E               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  5762  00D4  0020               	movlb	0	; select bank0
  5763  00D5  00E1               	movwf	??_sprintf
  5764  00D6  0861               	movf	??_sprintf,w
  5765  00D7  0021               	movlb	1	; select bank1
  5766  00D8  00A3               	movwf	sprintf@ap^(0+128)
  5767  00D9                     l3553:	
  5768                           ;doprnt.c: 536: while(c = *f++) {
  5769                           
  5770  00D9  0020               	movlb	0	; select bank0
  5771  00DA  085D               	movf	sprintf@f+1,w
  5772  00DB  00E2               	movwf	??_sprintf+1
  5773  00DC  085C               	movf	sprintf@f,w
  5774  00DD  00E1               	movwf	??_sprintf
  5775  00DE  0ADC               	incf	sprintf@f,f
  5776  00DF  1903               	skipnz
  5777  00E0  0ADD               	incf	sprintf@f+1,f
  5778  00E1  0861               	movf	??_sprintf,w
  5779  00E2  0084               	movwf	4
  5780  00E3  0862               	movf	??_sprintf+1,w
  5781  00E4  0085               	movwf	5
  5782  00E5  0800               	movf	0,w	;code access
  5783  00E6  00E3               	movwf	??_sprintf+2
  5784  00E7  0863               	movf	??_sprintf+2,w
  5785  00E8  0021               	movlb	1	; select bank1
  5786  00E9  00B8               	movwf	sprintf@c^(0+128)
  5787  00EA  0838               	movf	sprintf@c^(0+128),w
  5788  00EB  1903               	btfsc	3,2
  5789  00EC  2FD6               	goto	l3555
  5790                           
  5791                           ;doprnt.c: 538: if(c != '%')
  5792  00ED  3025               	movlw	37
  5793  00EE  0638               	xorwf	sprintf@c^(0+128),w
  5794  00EF  1903               	btfsc	3,2
  5795  00F0  2901               	goto	l3281
  5796                           
  5797                           ;doprnt.c: 540: {
  5798                           ;doprnt.c: 541: ((*sp++ = (c)));
  5799  00F1  0838               	movf	sprintf@c^(0+128),w
  5800  00F2  0020               	movlb	0	; select bank0
  5801  00F3  00E1               	movwf	??_sprintf
  5802  00F4  0021               	movlb	1	; select bank1
  5803  00F5  0835               	movf	sprintf@sp^(0+128),w
  5804  00F6  0086               	movwf	6
  5805  00F7  0187               	clrf	7
  5806  00F8  0020               	movlb	0	; select bank0
  5807  00F9  0861               	movf	??_sprintf,w
  5808  00FA  0081               	movwf	1
  5809  00FB  3001               	movlw	1
  5810  00FC  00E1               	movwf	??_sprintf
  5811  00FD  0861               	movf	??_sprintf,w
  5812  00FE  0021               	movlb	1	; select bank1
  5813  00FF  07B5               	addwf	sprintf@sp^(0+128),f
  5814                           
  5815                           ;doprnt.c: 542: continue;
  5816  0100  28D9               	goto	l3553
  5817  0101                     l3281:	
  5818                           
  5819                           ;doprnt.c: 543: }
  5820                           ;doprnt.c: 546: width = 0;
  5821  0101  01A6               	clrf	sprintf@width^(0+128)
  5822  0102  01A7               	clrf	(sprintf@width+1)^(0+128)
  5823                           
  5824                           ;doprnt.c: 548: flag = 0;
  5825  0103  01A4               	clrf	sprintf@flag^(0+128)
  5826  0104  01A5               	clrf	(sprintf@flag+1)^(0+128)
  5827                           
  5828                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  5829  0105  0020               	movlb	0	; select bank0
  5830  0106  085C               	movf	sprintf@f,w
  5831  0107  0084               	movwf	4
  5832  0108  085D               	movf	sprintf@f+1,w
  5833  0109  0085               	movwf	5
  5834  010A  0800               	movf	0,w	;code access
  5835  010B  319F  2703  3180   	fcall	_isdigit
  5836  010E  1C03               	btfss	3,0
  5837  010F  294D               	goto	l3295
  5838                           
  5839                           ;doprnt.c: 598: width = 0;
  5840  0110  0021               	movlb	1	; select bank1
  5841  0111  01A6               	clrf	sprintf@width^(0+128)
  5842  0112  01A7               	clrf	(sprintf@width+1)^(0+128)
  5843  0113                     l3287:	
  5844                           ;doprnt.c: 599: do {
  5845                           
  5846                           
  5847                           ;doprnt.c: 600: width *= 10;
  5848  0113  300A               	movlw	10
  5849  0114  0020               	movlb	0	; select bank0
  5850  0115  00A4               	movwf	___wmul@multiplier
  5851  0116  3000               	movlw	0
  5852  0117  00A5               	movwf	___wmul@multiplier+1
  5853  0118  0021               	movlb	1	; select bank1
  5854  0119  0827               	movf	(sprintf@width+1)^(0+128),w
  5855  011A  0020               	movlb	0	; select bank0
  5856  011B  00A7               	movwf	___wmul@multiplicand+1
  5857  011C  0021               	movlb	1	; select bank1
  5858  011D  0826               	movf	sprintf@width^(0+128),w
  5859  011E  0020               	movlb	0	; select bank0
  5860  011F  00A6               	movwf	___wmul@multiplicand
  5861  0120  319F  27A6  3180   	fcall	___wmul
  5862  0123  0020               	movlb	0	; select bank0
  5863  0124  0825               	movf	?___wmul+1,w
  5864  0125  0021               	movlb	1	; select bank1
  5865  0126  00A7               	movwf	(sprintf@width+1)^(0+128)
  5866  0127  0020               	movlb	0	; select bank0
  5867  0128  0824               	movf	?___wmul,w
  5868  0129  0021               	movlb	1	; select bank1
  5869  012A  00A6               	movwf	sprintf@width^(0+128)
  5870                           
  5871                           ;doprnt.c: 601: width += *f++ - '0';
  5872  012B  0020               	movlb	0	; select bank0
  5873  012C  085C               	movf	sprintf@f,w
  5874  012D  0084               	movwf	4
  5875  012E  085D               	movf	sprintf@f+1,w
  5876  012F  0085               	movwf	5
  5877  0130  0800               	movf	0,w	;code access
  5878  0131  3ED0               	addlw	208
  5879  0132  00E1               	movwf	??_sprintf
  5880  0133  30FF               	movlw	255
  5881  0134  1803               	skipnc
  5882  0135  3000               	movlw	0
  5883  0136  00E2               	movwf	??_sprintf+1
  5884  0137  0861               	movf	??_sprintf,w
  5885  0138  0021               	movlb	1	; select bank1
  5886  0139  07A6               	addwf	sprintf@width^(0+128),f
  5887  013A  0020               	movlb	0	; select bank0
  5888  013B  0862               	movf	??_sprintf+1,w
  5889  013C  0021               	movlb	1	; select bank1
  5890  013D  3DA7               	addwfc	(sprintf@width+1)^(0+128),f
  5891  013E  3001               	movlw	1
  5892  013F  0020               	movlb	0	; select bank0
  5893  0140  07DC               	addwf	sprintf@f,f
  5894  0141  3000               	movlw	0
  5895  0142  3DDD               	addwfc	sprintf@f+1,f
  5896                           
  5897                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  5898  0143  085C               	movf	sprintf@f,w
  5899  0144  0084               	movwf	4
  5900  0145  085D               	movf	sprintf@f+1,w
  5901  0146  0085               	movwf	5
  5902  0147  0800               	movf	0,w	;code access
  5903  0148  319F  2703  3180   	fcall	_isdigit
  5904  014B  1803               	btfsc	3,0
  5905  014C  2913               	goto	l3287
  5906  014D                     l3295:	
  5907                           
  5908                           ;doprnt.c: 608: }
  5909                           ;doprnt.c: 611: if(*f == '.') {
  5910  014D  0020               	movlb	0	; select bank0
  5911  014E  085C               	movf	sprintf@f,w
  5912  014F  0084               	movwf	4
  5913  0150  085D               	movf	sprintf@f+1,w
  5914  0151  0085               	movwf	5
  5915  0152  0012               	moviw fsr0++
  5916  0153  3A2E               	xorlw	46
  5917  0154  1D03               	btfss	3,2
  5918  0155  2998               	goto	l3309
  5919                           
  5920                           ;doprnt.c: 612: flag |= 0x4000;
  5921  0156  0021               	movlb	1	; select bank1
  5922  0157  1725               	bsf	(sprintf@flag^(0+128)+1),6
  5923                           
  5924                           ;doprnt.c: 613: f++;
  5925  0158  3001               	movlw	1
  5926  0159  0020               	movlb	0	; select bank0
  5927  015A  07DC               	addwf	sprintf@f,f
  5928  015B  3000               	movlw	0
  5929  015C  3DDD               	addwfc	sprintf@f+1,f
  5930                           
  5931                           ;doprnt.c: 620: {
  5932                           ;doprnt.c: 621: prec = 0;
  5933  015D  0021               	movlb	1	; select bank1
  5934  015E  01B6               	clrf	sprintf@prec^(0+128)
  5935  015F  01B7               	clrf	(sprintf@prec+1)^(0+128)
  5936  0160                     l3307:	
  5937                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  5938                           
  5939  0160  0020               	movlb	0	; select bank0
  5940  0161  085C               	movf	sprintf@f,w
  5941  0162  0084               	movwf	4
  5942  0163  085D               	movf	sprintf@f+1,w
  5943  0164  0085               	movwf	5
  5944  0165  0800               	movf	0,w	;code access
  5945  0166  319F  2703  3180   	fcall	_isdigit
  5946  0169  1C03               	btfss	3,0
  5947  016A  299F               	goto	l3315
  5948                           
  5949                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  5950  016B  0020               	movlb	0	; select bank0
  5951  016C  085C               	movf	sprintf@f,w
  5952  016D  0084               	movwf	4
  5953  016E  085D               	movf	sprintf@f+1,w
  5954  016F  0085               	movwf	5
  5955  0170  0800               	movf	0,w	;code access
  5956  0171  00E1               	movwf	??_sprintf
  5957  0172  01E2               	clrf	??_sprintf+1
  5958  0173  0021               	movlb	1	; select bank1
  5959  0174  0837               	movf	(sprintf@prec+1)^(0+128),w
  5960  0175  0020               	movlb	0	; select bank0
  5961  0176  00A5               	movwf	___wmul@multiplier+1
  5962  0177  0021               	movlb	1	; select bank1
  5963  0178  0836               	movf	sprintf@prec^(0+128),w
  5964  0179  0020               	movlb	0	; select bank0
  5965  017A  00A4               	movwf	___wmul@multiplier
  5966  017B  300A               	movlw	10
  5967  017C  00A6               	movwf	___wmul@multiplicand
  5968  017D  3000               	movlw	0
  5969  017E  00A7               	movwf	___wmul@multiplicand+1
  5970  017F  319F  27A6  3180   	fcall	___wmul
  5971  0182  0020               	movlb	0	; select bank0
  5972  0183  0861               	movf	??_sprintf,w
  5973  0184  0724               	addwf	?___wmul,w
  5974  0185  00E3               	movwf	??_sprintf+2
  5975  0186  0862               	movf	??_sprintf+1,w
  5976  0187  3D25               	addwfc	?___wmul+1,w
  5977  0188  00E4               	movwf	??_sprintf+3
  5978  0189  0863               	movf	??_sprintf+2,w
  5979  018A  3ED0               	addlw	208
  5980  018B  0021               	movlb	1	; select bank1
  5981  018C  00B6               	movwf	sprintf@prec^(0+128)
  5982  018D  30FF               	movlw	255
  5983  018E  0020               	movlb	0	; select bank0
  5984  018F  3D64               	addwfc	??_sprintf+3,w
  5985  0190  0021               	movlb	1	; select bank1
  5986  0191  00B7               	movwf	(sprintf@prec+1)^(0+128)
  5987  0192  3001               	movlw	1
  5988  0193  0020               	movlb	0	; select bank0
  5989  0194  07DC               	addwf	sprintf@f,f
  5990  0195  3000               	movlw	0
  5991  0196  3DDD               	addwfc	sprintf@f+1,f
  5992  0197  2960               	goto	l3307
  5993  0198                     l3309:	
  5994                           ;doprnt.c: 624: }
  5995                           ;doprnt.c: 625: } else {
  5996                           
  5997                           
  5998                           ;doprnt.c: 626: prec = 0;
  5999  0198  0021               	movlb	1	; select bank1
  6000  0199  01B6               	clrf	sprintf@prec^(0+128)
  6001  019A  01B7               	clrf	(sprintf@prec+1)^(0+128)
  6002                           
  6003                           ;doprnt.c: 628: flag |= 0x1000;
  6004  019B  1625               	bsf	(sprintf@flag^(0+128)+1),4
  6005                           
  6006                           ;doprnt.c: 630: }
  6007                           ;doprnt.c: 635: switch(c = *f++) {
  6008  019C  299F               	goto	l3315
  6009  019D                     l334:	
  6010                           ;doprnt.c: 662: case 'f':
  6011                           
  6012                           ;doprnt.c: 638: goto alldone;
  6013                           
  6014                           ;doprnt.c: 637: case 0:
  6015                           
  6016                           
  6017                           ;doprnt.c: 663: flag |= 0x400;
  6018  019D  1525               	bsf	(sprintf@flag^(0+128)+1),2
  6019                           
  6020                           ;doprnt.c: 698: case 'i':
  6021                           ;doprnt.c: 699: break;
  6022                           
  6023                           ;doprnt.c: 697: case 'd':
  6024                           
  6025                           ;doprnt.c: 664: break;
  6026  019E  29BB               	goto	l3317
  6027  019F                     l3315:	
  6028                           ;doprnt.c: 822: }
  6029                           
  6030                           ;doprnt.c: 813: continue;
  6031                           
  6032                           ;doprnt.c: 802: default:
  6033                           
  6034  019F  0020               	movlb	0	; select bank0
  6035  01A0  085D               	movf	sprintf@f+1,w
  6036  01A1  00E2               	movwf	??_sprintf+1
  6037  01A2  085C               	movf	sprintf@f,w
  6038  01A3  00E1               	movwf	??_sprintf
  6039  01A4  0ADC               	incf	sprintf@f,f
  6040  01A5  1903               	skipnz
  6041  01A6  0ADD               	incf	sprintf@f+1,f
  6042  01A7  0861               	movf	??_sprintf,w
  6043  01A8  0084               	movwf	4
  6044  01A9  0862               	movf	??_sprintf+1,w
  6045  01AA  0085               	movwf	5
  6046  01AB  0800               	movf	0,w	;code access
  6047  01AC  0021               	movlb	1	; select bank1
  6048  01AD  00B8               	movwf	sprintf@c^(0+128)
  6049                           
  6050                           ; Switch size 1, requested type "space"
  6051                           ; Number of cases is 4, Range of values is 0 to 105
  6052                           ; switch strategies available:
  6053                           ; Name         Instructions Cycles
  6054                           ; simple_byte           13     7 (average)
  6055                           ; direct_byte          218     6 (fixed)
  6056                           ; jumptable            260     6 (fixed)
  6057                           ;	Chosen strategy is simple_byte
  6058  01AE  3A00               	xorlw	0	; case 0
  6059  01AF  1903               	skipnz
  6060  01B0  2FD6               	goto	l3555
  6061  01B1  3A64               	xorlw	100	; case 100
  6062  01B2  1903               	skipnz
  6063  01B3  29BB               	goto	l3317
  6064  01B4  3A02               	xorlw	2	; case 102
  6065  01B5  1903               	skipnz
  6066  01B6  299D               	goto	l334
  6067  01B7  3A0F               	xorlw	15	; case 105
  6068  01B8  1903               	skipnz
  6069  01B9  29BB               	goto	l3317
  6070  01BA  28D9               	goto	l3553
  6071  01BB                     l3317:	
  6072                           
  6073                           ;doprnt.c: 825: if(flag & (0x700)) {
  6074  01BB  3000               	movlw	0
  6075  01BC  0524               	andwf	sprintf@flag^(0+128),w
  6076  01BD  0020               	movlb	0	; select bank0
  6077  01BE  00E1               	movwf	??_sprintf
  6078  01BF  3007               	movlw	7
  6079  01C0  0021               	movlb	1	; select bank1
  6080  01C1  0525               	andwf	(sprintf@flag+1)^(0+128),w
  6081  01C2  0020               	movlb	0	; select bank0
  6082  01C3  00E2               	movwf	??_sprintf+1
  6083  01C4  0861               	movf	??_sprintf,w
  6084  01C5  0462               	iorwf	??_sprintf+1,w
  6085  01C6  1903               	btfsc	3,2
  6086  01C7  2E4B               	goto	l3477
  6087                           
  6088                           ;doprnt.c: 827: if(flag & 0x1000)
  6089  01C8  0021               	movlb	1	; select bank1
  6090  01C9  1E25               	btfss	(sprintf@flag+1)^(0+128),4
  6091  01CA  29CF               	goto	l3323
  6092                           
  6093                           ;doprnt.c: 829: prec = 6;
  6094  01CB  3006               	movlw	6
  6095  01CC  00B6               	movwf	sprintf@prec^(0+128)
  6096  01CD  3000               	movlw	0
  6097  01CE  00B7               	movwf	(sprintf@prec^(0+128)+1)
  6098  01CF                     l3323:	
  6099                           
  6100                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  6101  01CF  0823               	movf	sprintf@ap^(0+128),w
  6102  01D0  0086               	movwf	6
  6103  01D1  0187               	clrf	7
  6104  01D2  3F40               	moviw [0]fsr1
  6105  01D3  00B2               	movwf	sprintf@fval^(0+128)
  6106  01D4  3F41               	moviw [1]fsr1
  6107  01D5  00B3               	movwf	(sprintf@fval+1)^(0+128)
  6108  01D6  3F42               	moviw [2]fsr1
  6109  01D7  00B4               	movwf	(sprintf@fval+2)^(0+128)
  6110  01D8  3003               	movlw	3
  6111  01D9  0020               	movlb	0	; select bank0
  6112  01DA  00E1               	movwf	??_sprintf
  6113  01DB  0861               	movf	??_sprintf,w
  6114  01DC  0021               	movlb	1	; select bank1
  6115  01DD  07A3               	addwf	sprintf@ap^(0+128),f
  6116                           
  6117                           ;doprnt.c: 831: if(fval < 0.0) {
  6118  01DE  0832               	movf	sprintf@fval^(0+128),w
  6119  01DF  0020               	movlb	0	; select bank0
  6120  01E0  00D3               	movwf	___ftge@ff1
  6121  01E1  0021               	movlb	1	; select bank1
  6122  01E2  0833               	movf	(sprintf@fval+1)^(0+128),w
  6123  01E3  0020               	movlb	0	; select bank0
  6124  01E4  00D4               	movwf	___ftge@ff1+1
  6125  01E5  0021               	movlb	1	; select bank1
  6126  01E6  0834               	movf	(sprintf@fval+2)^(0+128),w
  6127  01E7  0020               	movlb	0	; select bank0
  6128  01E8  00D5               	movwf	___ftge@ff1+2
  6129  01E9  3000               	movlw	0
  6130  01EA  00D6               	movwf	___ftge@ff2
  6131  01EB  3000               	movlw	0
  6132  01EC  00D7               	movwf	___ftge@ff2+1
  6133  01ED  3000               	movlw	0
  6134  01EE  00D8               	movwf	___ftge@ff2+2
  6135  01EF  3188  2000  3180   	fcall	___ftge
  6136  01F2  1803               	btfsc	3,0
  6137  01F3  2A09               	goto	l3333
  6138                           
  6139                           ;doprnt.c: 832: fval = -fval;
  6140  01F4  0021               	movlb	1	; select bank1
  6141  01F5  0832               	movf	sprintf@fval^(0+128),w
  6142  01F6  00F0               	movwf	___ftneg@f1
  6143  01F7  0833               	movf	(sprintf@fval+1)^(0+128),w
  6144  01F8  00F1               	movwf	___ftneg@f1+1
  6145  01F9  0834               	movf	(sprintf@fval+2)^(0+128),w
  6146  01FA  00F2               	movwf	___ftneg@f1+2
  6147  01FB  319E  26C8  3180   	fcall	___ftneg
  6148  01FE  0870               	movf	?___ftneg,w
  6149  01FF  0021               	movlb	1	; select bank1
  6150  0200  00B2               	movwf	sprintf@fval^(0+128)
  6151  0201  0871               	movf	?___ftneg+1,w
  6152  0202  00B3               	movwf	(sprintf@fval+1)^(0+128)
  6153  0203  0872               	movf	?___ftneg+2,w
  6154  0204  00B4               	movwf	(sprintf@fval+2)^(0+128)
  6155                           
  6156                           ;doprnt.c: 833: flag |= 0x03;
  6157  0205  3003               	movlw	3
  6158  0206  04A4               	iorwf	sprintf@flag^(0+128),f
  6159  0207  3000               	movlw	0
  6160  0208  04A5               	iorwf	(sprintf@flag+1)^(0+128),f
  6161  0209                     l3333:	
  6162                           
  6163                           ;doprnt.c: 834: }
  6164                           ;doprnt.c: 835: exp = 0;
  6165  0209  0021               	movlb	1	; select bank1
  6166  020A  01B0               	clrf	sprintf@exp^(0+128)
  6167  020B  01B1               	clrf	(sprintf@exp+1)^(0+128)
  6168                           
  6169                           ;doprnt.c: 836: if( fval!=0) {
  6170  020C  0834               	movf	(sprintf@fval+2)^(0+128),w
  6171  020D  0433               	iorwf	(sprintf@fval+1)^(0+128),w
  6172  020E  0432               	iorwf	sprintf@fval^(0+128),w
  6173  020F  1903               	skipnz
  6174  0210  2AD3               	goto	l342
  6175                           
  6176                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  6177  0211  30B2               	movlw	low (sprintf@fval| 0)
  6178  0212  0086               	movwf	6
  6179  0213  0187               	clrf	7
  6180  0214  3F40               	moviw [0]fsr1
  6181  0215  0020               	movlb	0	; select bank0
  6182  0216  00E1               	movwf	??_sprintf
  6183  0217  3F41               	moviw [1]fsr1
  6184  0218  00E2               	movwf	??_sprintf+1
  6185  0219  3F42               	moviw [2]fsr1
  6186  021A  00E3               	movwf	??_sprintf+2
  6187  021B  3F43               	moviw [3]fsr1
  6188  021C  00E4               	movwf	??_sprintf+3
  6189  021D  300F               	movlw	15
  6190  021E                     u4165:	
  6191  021E  36E4               	lsrf	??_sprintf+3,f
  6192  021F  0CE3               	rrf	??_sprintf+2,f
  6193  0220  0CE2               	rrf	??_sprintf+1,f
  6194  0221  0CE1               	rrf	??_sprintf,f
  6195  0222  0B89               	decfsz	9,f
  6196  0223  2A1E               	goto	u4165
  6197  0224  30FF               	movlw	255
  6198  0225  0561               	andwf	??_sprintf,w
  6199  0226  00E5               	movwf	??_sprintf+4
  6200  0227  3000               	movlw	0
  6201  0228  0562               	andwf	??_sprintf+1,w
  6202  0229  00E6               	movwf	??_sprintf+5
  6203  022A  0865               	movf	??_sprintf+4,w
  6204  022B  3E82               	addlw	130
  6205  022C  0021               	movlb	1	; select bank1
  6206  022D  00B0               	movwf	sprintf@exp^(0+128)
  6207  022E  30FF               	movlw	255
  6208  022F  0020               	movlb	0	; select bank0
  6209  0230  3D66               	addwfc	??_sprintf+5,w
  6210  0231  0021               	movlb	1	; select bank1
  6211  0232  00B1               	movwf	(sprintf@exp+1)^(0+128)
  6212                           
  6213                           ;doprnt.c: 838: exp--;
  6214  0233  30FF               	movlw	255
  6215  0234  07B0               	addwf	sprintf@exp^(0+128),f
  6216  0235  30FF               	movlw	255
  6217  0236  3DB1               	addwfc	(sprintf@exp+1)^(0+128),f
  6218                           
  6219                           ;doprnt.c: 839: exp *= 3;
  6220  0237  3003               	movlw	3
  6221  0238  0020               	movlb	0	; select bank0
  6222  0239  00A4               	movwf	___wmul@multiplier
  6223  023A  3000               	movlw	0
  6224  023B  00A5               	movwf	___wmul@multiplier+1
  6225  023C  0021               	movlb	1	; select bank1
  6226  023D  0831               	movf	(sprintf@exp+1)^(0+128),w
  6227  023E  0020               	movlb	0	; select bank0
  6228  023F  00A7               	movwf	___wmul@multiplicand+1
  6229  0240  0021               	movlb	1	; select bank1
  6230  0241  0830               	movf	sprintf@exp^(0+128),w
  6231  0242  0020               	movlb	0	; select bank0
  6232  0243  00A6               	movwf	___wmul@multiplicand
  6233  0244  319F  27A6  3180   	fcall	___wmul
  6234  0247  0020               	movlb	0	; select bank0
  6235  0248  0825               	movf	?___wmul+1,w
  6236  0249  0021               	movlb	1	; select bank1
  6237  024A  00B1               	movwf	(sprintf@exp+1)^(0+128)
  6238  024B  0020               	movlb	0	; select bank0
  6239  024C  0824               	movf	?___wmul,w
  6240  024D  0021               	movlb	1	; select bank1
  6241  024E  00B0               	movwf	sprintf@exp^(0+128)
  6242                           
  6243                           ;doprnt.c: 840: exp /= 10;
  6244  024F  300A               	movlw	10
  6245  0250  00F7               	movwf	___awdiv@divisor
  6246  0251  3000               	movlw	0
  6247  0252  00F8               	movwf	___awdiv@divisor+1
  6248  0253  0831               	movf	(sprintf@exp+1)^(0+128),w
  6249  0254  00FA               	movwf	___awdiv@dividend+1
  6250  0255  0830               	movf	sprintf@exp^(0+128),w
  6251  0256  00F9               	movwf	___awdiv@dividend
  6252  0257  3191  21F5  3180   	fcall	___awdiv
  6253  025A  0878               	movf	?___awdiv+1,w
  6254  025B  0021               	movlb	1	; select bank1
  6255  025C  00B1               	movwf	(sprintf@exp+1)^(0+128)
  6256  025D  0877               	movf	?___awdiv,w
  6257  025E  00B0               	movwf	sprintf@exp^(0+128)
  6258                           
  6259                           ;doprnt.c: 841: if(exp < 0)
  6260  025F  1FB1               	btfss	(sprintf@exp+1)^(0+128),7
  6261  0260  2A65               	goto	l3349
  6262                           
  6263                           ;doprnt.c: 842: exp--;
  6264  0261  30FF               	movlw	255
  6265  0262  07B0               	addwf	sprintf@exp^(0+128),f
  6266  0263  30FF               	movlw	255
  6267  0264  3DB1               	addwfc	(sprintf@exp+1)^(0+128),f
  6268  0265                     l3349:	
  6269                           
  6270                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  6271  0265  0330               	decf	sprintf@exp^(0+128),w
  6272  0266  3AFF               	xorlw	255
  6273  0267  318A  22BE  3180   	fcall	_scale
  6274  026A  0020               	movlb	0	; select bank0
  6275  026B  0838               	movf	?_scale,w
  6276  026C  0021               	movlb	1	; select bank1
  6277  026D  00A8               	movwf	sprintf@tmpval^(0+128)
  6278  026E  0020               	movlb	0	; select bank0
  6279  026F  0839               	movf	?_scale+1,w
  6280  0270  0021               	movlb	1	; select bank1
  6281  0271  00A9               	movwf	(sprintf@tmpval+1)^(0+128)
  6282  0272  0020               	movlb	0	; select bank0
  6283  0273  083A               	movf	?_scale+2,w
  6284  0274  0021               	movlb	1	; select bank1
  6285  0275  00AA               	movwf	(sprintf@tmpval+2)^(0+128)
  6286                           
  6287                           ;doprnt.c: 847: tmpval.integ *= fval;
  6288  0276  0832               	movf	sprintf@fval^(0+128),w
  6289  0277  0020               	movlb	0	; select bank0
  6290  0278  00A8               	movwf	___ftmul@f1
  6291  0279  0021               	movlb	1	; select bank1
  6292  027A  0833               	movf	(sprintf@fval+1)^(0+128),w
  6293  027B  0020               	movlb	0	; select bank0
  6294  027C  00A9               	movwf	___ftmul@f1+1
  6295  027D  0021               	movlb	1	; select bank1
  6296  027E  0834               	movf	(sprintf@fval+2)^(0+128),w
  6297  027F  0020               	movlb	0	; select bank0
  6298  0280  00AA               	movwf	___ftmul@f1+2
  6299  0281  0021               	movlb	1	; select bank1
  6300  0282  0828               	movf	sprintf@tmpval^(0+128),w
  6301  0283  0020               	movlb	0	; select bank0
  6302  0284  00AB               	movwf	___ftmul@f2
  6303  0285  0021               	movlb	1	; select bank1
  6304  0286  0829               	movf	(sprintf@tmpval+1)^(0+128),w
  6305  0287  0020               	movlb	0	; select bank0
  6306  0288  00AC               	movwf	___ftmul@f2+1
  6307  0289  0021               	movlb	1	; select bank1
  6308  028A  082A               	movf	(sprintf@tmpval+2)^(0+128),w
  6309  028B  0020               	movlb	0	; select bank0
  6310  028C  00AD               	movwf	___ftmul@f2+2
  6311  028D  3196  2656  3180   	fcall	___ftmul
  6312  0290  0020               	movlb	0	; select bank0
  6313  0291  0828               	movf	?___ftmul,w
  6314  0292  0021               	movlb	1	; select bank1
  6315  0293  00A8               	movwf	sprintf@tmpval^(0+128)
  6316  0294  0020               	movlb	0	; select bank0
  6317  0295  0829               	movf	?___ftmul+1,w
  6318  0296  0021               	movlb	1	; select bank1
  6319  0297  00A9               	movwf	(sprintf@tmpval+1)^(0+128)
  6320  0298  0020               	movlb	0	; select bank0
  6321  0299  082A               	movf	?___ftmul+2,w
  6322  029A  0021               	movlb	1	; select bank1
  6323  029B  00AA               	movwf	(sprintf@tmpval+2)^(0+128)
  6324                           
  6325                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  6326  029C  0828               	movf	sprintf@tmpval^(0+128),w
  6327  029D  0020               	movlb	0	; select bank0
  6328  029E  00D3               	movwf	___ftge@ff1
  6329  029F  0021               	movlb	1	; select bank1
  6330  02A0  0829               	movf	(sprintf@tmpval+1)^(0+128),w
  6331  02A1  0020               	movlb	0	; select bank0
  6332  02A2  00D4               	movwf	___ftge@ff1+1
  6333  02A3  0021               	movlb	1	; select bank1
  6334  02A4  082A               	movf	(sprintf@tmpval+2)^(0+128),w
  6335  02A5  0020               	movlb	0	; select bank0
  6336  02A6  00D5               	movwf	___ftge@ff1+2
  6337  02A7  3000               	movlw	0
  6338  02A8  00D6               	movwf	___ftge@ff2
  6339  02A9  3080               	movlw	128
  6340  02AA  00D7               	movwf	___ftge@ff2+1
  6341  02AB  303F               	movlw	63
  6342  02AC  00D8               	movwf	___ftge@ff2+2
  6343  02AD  3188  2000  3180   	fcall	___ftge
  6344  02B0  1803               	btfsc	3,0
  6345  02B1  2AB7               	goto	l3357
  6346                           
  6347                           ;doprnt.c: 849: exp--;
  6348  02B2  30FF               	movlw	255
  6349  02B3  0021               	movlb	1	; select bank1
  6350  02B4  07B0               	addwf	sprintf@exp^(0+128),f
  6351  02B5  30FF               	movlw	255
  6352  02B6  2AD2               	goto	L1
  6353  02B7                     l3357:	
  6354                           
  6355                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  6356  02B7  0021               	movlb	1	; select bank1
  6357  02B8  0828               	movf	sprintf@tmpval^(0+128),w
  6358  02B9  0020               	movlb	0	; select bank0
  6359  02BA  00D3               	movwf	___ftge@ff1
  6360  02BB  0021               	movlb	1	; select bank1
  6361  02BC  0829               	movf	(sprintf@tmpval+1)^(0+128),w
  6362  02BD  0020               	movlb	0	; select bank0
  6363  02BE  00D4               	movwf	___ftge@ff1+1
  6364  02BF  0021               	movlb	1	; select bank1
  6365  02C0  082A               	movf	(sprintf@tmpval+2)^(0+128),w
  6366  02C1  0020               	movlb	0	; select bank0
  6367  02C2  00D5               	movwf	___ftge@ff1+2
  6368  02C3  3000               	movlw	0
  6369  02C4  00D6               	movwf	___ftge@ff2
  6370  02C5  3020               	movlw	32
  6371  02C6  00D7               	movwf	___ftge@ff2+1
  6372  02C7  3041               	movlw	65
  6373  02C8  00D8               	movwf	___ftge@ff2+2
  6374  02C9  3188  2000  3180   	fcall	___ftge
  6375  02CC  1C03               	btfss	3,0
  6376  02CD  2AD3               	goto	l342
  6377                           
  6378                           ;doprnt.c: 851: exp++;
  6379  02CE  3001               	movlw	1
  6380  02CF  0021               	movlb	1	; select bank1
  6381  02D0  07B0               	addwf	sprintf@exp^(0+128),f
  6382  02D1  3000               	movlw	0
  6383  02D2                     L1:	
  6384  02D2  3DB1               	addwfc	(sprintf@exp+1)^(0+128),f
  6385  02D3                     l342:	
  6386                           
  6387                           ;doprnt.c: 852: }
  6388                           ;doprnt.c: 1112: if(prec <= 12)
  6389  02D3  0021               	movlb	1	; select bank1
  6390  02D4  0837               	movf	(sprintf@prec+1)^(0+128),w
  6391  02D5  3A80               	xorlw	128
  6392  02D6  0020               	movlb	0	; select bank0
  6393  02D7  00E1               	movwf	??_sprintf
  6394  02D8  3080               	movlw	128
  6395  02D9  0261               	subwf	??_sprintf,w
  6396  02DA  1D03               	skipz
  6397  02DB  2ADF               	goto	u4205
  6398  02DC  300D               	movlw	13
  6399  02DD  0021               	movlb	1	; select bank1
  6400  02DE  0236               	subwf	sprintf@prec^(0+128),w
  6401  02DF                     u4205:	
  6402  02DF  1803               	skipnc
  6403  02E0  2B08               	goto	l3363
  6404                           
  6405                           ;doprnt.c: 1113: fval += fround(prec);
  6406  02E1  0021               	movlb	1	; select bank1
  6407  02E2  0836               	movf	sprintf@prec^(0+128),w
  6408  02E3  3189  2159  3180   	fcall	_fround
  6409  02E6  0020               	movlb	0	; select bank0
  6410  02E7  0838               	movf	?_fround,w
  6411  02E8  00C6               	movwf	___ftadd@f1
  6412  02E9  0839               	movf	?_fround+1,w
  6413  02EA  00C7               	movwf	___ftadd@f1+1
  6414  02EB  083A               	movf	?_fround+2,w
  6415  02EC  00C8               	movwf	___ftadd@f1+2
  6416  02ED  0021               	movlb	1	; select bank1
  6417  02EE  0832               	movf	sprintf@fval^(0+128),w
  6418  02EF  0020               	movlb	0	; select bank0
  6419  02F0  00C9               	movwf	___ftadd@f2
  6420  02F1  0021               	movlb	1	; select bank1
  6421  02F2  0833               	movf	(sprintf@fval+1)^(0+128),w
  6422  02F3  0020               	movlb	0	; select bank0
  6423  02F4  00CA               	movwf	___ftadd@f2+1
  6424  02F5  0021               	movlb	1	; select bank1
  6425  02F6  0834               	movf	(sprintf@fval+2)^(0+128),w
  6426  02F7  0020               	movlb	0	; select bank0
  6427  02F8  00CB               	movwf	___ftadd@f2+2
  6428  02F9  3197  270A  3180   	fcall	___ftadd
  6429  02FC  0020               	movlb	0	; select bank0
  6430  02FD  0846               	movf	?___ftadd,w
  6431  02FE  0021               	movlb	1	; select bank1
  6432  02FF  00B2               	movwf	sprintf@fval^(0+128)
  6433  0300  0020               	movlb	0	; select bank0
  6434  0301  0847               	movf	?___ftadd+1,w
  6435  0302  0021               	movlb	1	; select bank1
  6436  0303  00B3               	movwf	(sprintf@fval+1)^(0+128)
  6437  0304  0020               	movlb	0	; select bank0
  6438  0305  0848               	movf	?___ftadd+2,w
  6439  0306  0021               	movlb	1	; select bank1
  6440  0307  00B4               	movwf	(sprintf@fval+2)^(0+128)
  6441  0308                     l3363:	
  6442                           
  6443                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  6444  0308  0021               	movlb	1	; select bank1
  6445  0309  0831               	movf	(sprintf@exp+1)^(0+128),w
  6446  030A  3A80               	xorlw	128
  6447  030B  0020               	movlb	0	; select bank0
  6448  030C  00E1               	movwf	??_sprintf
  6449  030D  3080               	movlw	128
  6450  030E  0261               	subwf	??_sprintf,w
  6451  030F  1D03               	skipz
  6452  0310  2B14               	goto	u4215
  6453  0311  300A               	movlw	10
  6454  0312  0021               	movlb	1	; select bank1
  6455  0313  0230               	subwf	sprintf@exp^(0+128),w
  6456  0314                     u4215:	
  6457  0314  1803               	skipnc
  6458  0315  2B3F               	goto	l3371
  6459  0316  0021               	movlb	1	; select bank1
  6460  0317  0834               	movf	(sprintf@fval+2)^(0+128),w
  6461  0318  0433               	iorwf	(sprintf@fval+1)^(0+128),w
  6462  0319  0432               	iorwf	sprintf@fval^(0+128),w
  6463  031A  1903               	skipnz
  6464  031B  2B8C               	goto	l3385
  6465  031C  0832               	movf	sprintf@fval^(0+128),w
  6466  031D  0020               	movlb	0	; select bank0
  6467  031E  00C1               	movwf	___fttol@f1
  6468  031F  0021               	movlb	1	; select bank1
  6469  0320  0833               	movf	(sprintf@fval+1)^(0+128),w
  6470  0321  0020               	movlb	0	; select bank0
  6471  0322  00C2               	movwf	___fttol@f1+1
  6472  0323  0021               	movlb	1	; select bank1
  6473  0324  0834               	movf	(sprintf@fval+2)^(0+128),w
  6474  0325  0020               	movlb	0	; select bank0
  6475  0326  00C3               	movwf	___fttol@f1+2
  6476  0327  3194  2479  3180   	fcall	___fttol
  6477  032A  0020               	movlb	0	; select bank0
  6478  032B  0844               	movf	?___fttol+3,w
  6479  032C  0443               	iorwf	?___fttol+2,w
  6480  032D  0442               	iorwf	?___fttol+1,w
  6481  032E  0441               	iorwf	?___fttol,w
  6482  032F  1D03               	skipz
  6483  0330  2B8C               	goto	l3385
  6484  0331  0021               	movlb	1	; select bank1
  6485  0332  0831               	movf	(sprintf@exp+1)^(0+128),w
  6486  0333  3A80               	xorlw	128
  6487  0334  0020               	movlb	0	; select bank0
  6488  0335  00E1               	movwf	??_sprintf
  6489  0336  3080               	movlw	128
  6490  0337  0261               	subwf	??_sprintf,w
  6491  0338  1D03               	skipz
  6492  0339  2B3D               	goto	u4245
  6493  033A  3002               	movlw	2
  6494  033B  0021               	movlb	1	; select bank1
  6495  033C  0230               	subwf	sprintf@exp^(0+128),w
  6496  033D                     u4245:	
  6497  033D  1C03               	skipc
  6498  033E  2B8C               	goto	l3385
  6499  033F                     l3371:	
  6500                           
  6501                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  6502  033F  0021               	movlb	1	; select bank1
  6503  0340  0828               	movf	sprintf@tmpval^(0+128),w
  6504  0341  0020               	movlb	0	; select bank0
  6505  0342  00D3               	movwf	___ftge@ff1
  6506  0343  0021               	movlb	1	; select bank1
  6507  0344  0829               	movf	(sprintf@tmpval+1)^(0+128),w
  6508  0345  0020               	movlb	0	; select bank0
  6509  0346  00D4               	movwf	___ftge@ff1+1
  6510  0347  0021               	movlb	1	; select bank1
  6511  0348  082A               	movf	(sprintf@tmpval+2)^(0+128),w
  6512  0349  0020               	movlb	0	; select bank0
  6513  034A  00D5               	movwf	___ftge@ff1+2
  6514  034B  3070               	movlw	112
  6515  034C  00D6               	movwf	___ftge@ff2
  6516  034D  3089               	movlw	137
  6517  034E  00D7               	movwf	___ftge@ff2+1
  6518  034F  3040               	movlw	64
  6519  0350  00D8               	movwf	___ftge@ff2+2
  6520  0351  3188  2000  3180   	fcall	___ftge
  6521  0354  1803               	btfsc	3,0
  6522  0355  2B58               	goto	l3375
  6523                           
  6524                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  6525  0356  30F7               	movlw	247
  6526  0357  2B59               	goto	L2
  6527  0358                     l3375:	
  6528                           ;doprnt.c: 1122: }else{
  6529                           
  6530                           
  6531                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  6532  0358  30F8               	movlw	248
  6533  0359                     L2:	
  6534  0359  0021               	movlb	1	; select bank1
  6535  035A  07B0               	addwf	sprintf@exp^(0+128),f
  6536  035B  30FF               	movlw	255
  6537  035C  3DB1               	addwfc	(sprintf@exp+1)^(0+128),f
  6538                           
  6539                           ;doprnt.c: 1124: }
  6540                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  6541  035D  0830               	movf	sprintf@exp^(0+128),w
  6542  035E  318A  22BE  3180   	fcall	_scale
  6543  0361  0020               	movlb	0	; select bank0
  6544  0362  0838               	movf	?_scale,w
  6545  0363  0021               	movlb	1	; select bank1
  6546  0364  00A8               	movwf	sprintf@tmpval^(0+128)
  6547  0365  0020               	movlb	0	; select bank0
  6548  0366  0839               	movf	?_scale+1,w
  6549  0367  0021               	movlb	1	; select bank1
  6550  0368  00A9               	movwf	(sprintf@tmpval+1)^(0+128)
  6551  0369  0020               	movlb	0	; select bank0
  6552  036A  083A               	movf	?_scale+2,w
  6553  036B  0021               	movlb	1	; select bank1
  6554  036C  00AA               	movwf	(sprintf@tmpval+2)^(0+128)
  6555                           
  6556                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  6557  036D  0832               	movf	sprintf@fval^(0+128),w
  6558  036E  00F0               	movwf	__tdiv_to_l_@f1
  6559  036F  0833               	movf	(sprintf@fval+1)^(0+128),w
  6560  0370  00F1               	movwf	__tdiv_to_l_@f1+1
  6561  0371  0834               	movf	(sprintf@fval+2)^(0+128),w
  6562  0372  00F2               	movwf	__tdiv_to_l_@f1+2
  6563  0373  0828               	movf	sprintf@tmpval^(0+128),w
  6564  0374  00F3               	movwf	__tdiv_to_l_@f2
  6565  0375  0829               	movf	(sprintf@tmpval+1)^(0+128),w
  6566  0376  00F4               	movwf	__tdiv_to_l_@f2+1
  6567  0377  082A               	movf	(sprintf@tmpval+2)^(0+128),w
  6568  0378  00F5               	movwf	__tdiv_to_l_@f2+2
  6569  0379  3180  201B  3180   	fcall	__tdiv_to_l_
  6570  037C  0873               	movf	?__tdiv_to_l_+3,w
  6571  037D  0021               	movlb	1	; select bank1
  6572  037E  00AF               	movwf	(sprintf@val+3)^(0+128)
  6573  037F  0872               	movf	?__tdiv_to_l_+2,w
  6574  0380  00AE               	movwf	(sprintf@val+2)^(0+128)
  6575  0381  0871               	movf	?__tdiv_to_l_+1,w
  6576  0382  00AD               	movwf	(sprintf@val+1)^(0+128)
  6577  0383  0870               	movf	?__tdiv_to_l_,w
  6578  0384  00AC               	movwf	sprintf@val^(0+128)
  6579                           
  6580                           ;doprnt.c: 1129: fval = 0.0;
  6581  0385  3000               	movlw	0
  6582  0386  00B2               	movwf	sprintf@fval^(0+128)
  6583  0387  3000               	movlw	0
  6584  0388  00B3               	movwf	(sprintf@fval+1)^(0+128)
  6585  0389  3000               	movlw	0
  6586  038A  00B4               	movwf	(sprintf@fval+2)^(0+128)
  6587                           
  6588                           ;doprnt.c: 1130: } else {
  6589  038B  2BDA               	goto	l3389
  6590  038C                     l3385:	
  6591                           
  6592                           ;doprnt.c: 1131: val = (unsigned long)fval;
  6593  038C  0021               	movlb	1	; select bank1
  6594  038D  0832               	movf	sprintf@fval^(0+128),w
  6595  038E  0020               	movlb	0	; select bank0
  6596  038F  00C1               	movwf	___fttol@f1
  6597  0390  0021               	movlb	1	; select bank1
  6598  0391  0833               	movf	(sprintf@fval+1)^(0+128),w
  6599  0392  0020               	movlb	0	; select bank0
  6600  0393  00C2               	movwf	___fttol@f1+1
  6601  0394  0021               	movlb	1	; select bank1
  6602  0395  0834               	movf	(sprintf@fval+2)^(0+128),w
  6603  0396  0020               	movlb	0	; select bank0
  6604  0397  00C3               	movwf	___fttol@f1+2
  6605  0398  3194  2479  3180   	fcall	___fttol
  6606  039B  0020               	movlb	0	; select bank0
  6607  039C  0844               	movf	?___fttol+3,w
  6608  039D  0021               	movlb	1	; select bank1
  6609  039E  00AF               	movwf	(sprintf@val+3)^(0+128)
  6610  039F  0020               	movlb	0	; select bank0
  6611  03A0  0843               	movf	?___fttol+2,w
  6612  03A1  0021               	movlb	1	; select bank1
  6613  03A2  00AE               	movwf	(sprintf@val+2)^(0+128)
  6614  03A3  0020               	movlb	0	; select bank0
  6615  03A4  0842               	movf	?___fttol+1,w
  6616  03A5  0021               	movlb	1	; select bank1
  6617  03A6  00AD               	movwf	(sprintf@val+1)^(0+128)
  6618  03A7  0020               	movlb	0	; select bank0
  6619  03A8  0841               	movf	?___fttol,w
  6620  03A9  0021               	movlb	1	; select bank1
  6621  03AA  00AC               	movwf	sprintf@val^(0+128)
  6622                           
  6623                           ;doprnt.c: 1132: fval -= (double)val;
  6624  03AB  082F               	movf	(sprintf@val+3)^(0+128),w
  6625  03AC  00FB               	movwf	___lltoft@c+3
  6626  03AD  082E               	movf	(sprintf@val+2)^(0+128),w
  6627  03AE  00FA               	movwf	___lltoft@c+2
  6628  03AF  082D               	movf	(sprintf@val+1)^(0+128),w
  6629  03B0  00F9               	movwf	___lltoft@c+1
  6630  03B1  082C               	movf	sprintf@val^(0+128),w
  6631  03B2  00F8               	movwf	___lltoft@c
  6632  03B3  3190  2050  3180   	fcall	___lltoft
  6633  03B6  0878               	movf	?___lltoft,w
  6634  03B7  0020               	movlb	0	; select bank0
  6635  03B8  00D3               	movwf	___ftsub@f2
  6636  03B9  0879               	movf	?___lltoft+1,w
  6637  03BA  00D4               	movwf	___ftsub@f2+1
  6638  03BB  087A               	movf	?___lltoft+2,w
  6639  03BC  00D5               	movwf	___ftsub@f2+2
  6640  03BD  0021               	movlb	1	; select bank1
  6641  03BE  0832               	movf	sprintf@fval^(0+128),w
  6642  03BF  0020               	movlb	0	; select bank0
  6643  03C0  00D6               	movwf	___ftsub@f1
  6644  03C1  0021               	movlb	1	; select bank1
  6645  03C2  0833               	movf	(sprintf@fval+1)^(0+128),w
  6646  03C3  0020               	movlb	0	; select bank0
  6647  03C4  00D7               	movwf	___ftsub@f1+1
  6648  03C5  0021               	movlb	1	; select bank1
  6649  03C6  0834               	movf	(sprintf@fval+2)^(0+128),w
  6650  03C7  0020               	movlb	0	; select bank0
  6651  03C8  00D8               	movwf	___ftsub@f1+2
  6652  03C9  319F  27C2  3180   	fcall	___ftsub
  6653  03CC  0020               	movlb	0	; select bank0
  6654  03CD  0853               	movf	?___ftsub,w
  6655  03CE  0021               	movlb	1	; select bank1
  6656  03CF  00B2               	movwf	sprintf@fval^(0+128)
  6657  03D0  0020               	movlb	0	; select bank0
  6658  03D1  0854               	movf	?___ftsub+1,w
  6659  03D2  0021               	movlb	1	; select bank1
  6660  03D3  00B3               	movwf	(sprintf@fval+1)^(0+128)
  6661  03D4  0020               	movlb	0	; select bank0
  6662  03D5  0855               	movf	?___ftsub+2,w
  6663  03D6  0021               	movlb	1	; select bank1
  6664  03D7  00B4               	movwf	(sprintf@fval+2)^(0+128)
  6665                           
  6666                           ;doprnt.c: 1133: exp = 0;
  6667  03D8  01B0               	clrf	sprintf@exp^(0+128)
  6668  03D9  01B1               	clrf	(sprintf@exp+1)^(0+128)
  6669  03DA                     l3389:	
  6670                           
  6671                           ;doprnt.c: 1134: }
  6672                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  6673  03DA  01B8               	clrf	sprintf@c^(0+128)
  6674  03DB  0AB8               	incf	sprintf@c^(0+128),f
  6675  03DC  300A               	movlw	10
  6676  03DD  0638               	xorwf	sprintf@c^(0+128),w
  6677  03DE  1903               	btfsc	3,2
  6678  03DF  2C17               	goto	l3401
  6679  03E0                     l3395:	
  6680                           
  6681                           ;doprnt.c: 1137: if(val < dpowers[c])
  6682  03E0  0838               	movf	sprintf@c^(0+128),w
  6683  03E1  0020               	movlb	0	; select bank0
  6684  03E2  00E1               	movwf	??_sprintf
  6685  03E3  01E2               	clrf	??_sprintf+1
  6686  03E4  35E1               	lslf	??_sprintf,f
  6687  03E5  0DE2               	rlf	??_sprintf+1,f
  6688  03E6  35E1               	lslf	??_sprintf,f
  6689  03E7  0DE2               	rlf	??_sprintf+1,f
  6690  03E8  3000               	movlw	low (_dpowers| (0+32768))
  6691  03E9  0761               	addwf	??_sprintf,w
  6692  03EA  0084               	movwf	4
  6693  03EB  3098               	movlw	high (_dpowers| (0+32768))
  6694  03EC  3D62               	addwfc	??_sprintf+1,w
  6695  03ED  0085               	movwf	5
  6696  03EE  3F00               	moviw [0]fsr0
  6697  03EF  00E3               	movwf	??_sprintf+2
  6698  03F0  3F01               	moviw [1]fsr0
  6699  03F1  00E4               	movwf	??_sprintf+3
  6700  03F2  3F02               	moviw [2]fsr0
  6701  03F3  00E5               	movwf	??_sprintf+4
  6702  03F4  3F03               	moviw [3]fsr0
  6703  03F5  00E6               	movwf	??_sprintf+5
  6704  03F6  0866               	movf	??_sprintf+5,w
  6705  03F7  0021               	movlb	1	; select bank1
  6706  03F8  022F               	subwf	(sprintf@val+3)^(0+128),w
  6707  03F9  1D03               	skipz
  6708  03FA  2C0B               	goto	u4275
  6709  03FB  0020               	movlb	0	; select bank0
  6710  03FC  0865               	movf	??_sprintf+4,w
  6711  03FD  0021               	movlb	1	; select bank1
  6712  03FE  022E               	subwf	(sprintf@val+2)^(0+128),w
  6713  03FF  1D03               	skipz
  6714  0400  2C0B               	goto	u4275
  6715  0401  0020               	movlb	0	; select bank0
  6716  0402  0864               	movf	??_sprintf+3,w
  6717  0403  0021               	movlb	1	; select bank1
  6718  0404  022D               	subwf	(sprintf@val+1)^(0+128),w
  6719  0405  1D03               	skipz
  6720  0406  2C0B               	goto	u4275
  6721  0407  0020               	movlb	0	; select bank0
  6722  0408  0863               	movf	??_sprintf+2,w
  6723  0409  0021               	movlb	1	; select bank1
  6724  040A  022C               	subwf	sprintf@val^(0+128),w
  6725  040B                     u4275:	
  6726  040B  1C03               	btfss	3,0
  6727  040C  2C17               	goto	l3401
  6728                           
  6729                           ;doprnt.c: 1138: break;
  6730  040D  3001               	movlw	1
  6731  040E  0020               	movlb	0	; select bank0
  6732  040F  00E1               	movwf	??_sprintf
  6733  0410  0861               	movf	??_sprintf,w
  6734  0411  0021               	movlb	1	; select bank1
  6735  0412  07B8               	addwf	sprintf@c^(0+128),f
  6736  0413  300A               	movlw	10
  6737  0414  0638               	xorwf	sprintf@c^(0+128),w
  6738  0415  1D03               	btfss	3,2
  6739  0416  2BE0               	goto	l3395
  6740  0417                     l3401:	
  6741                           
  6742                           ;doprnt.c: 1142: width -= prec + c + exp;
  6743  0417  0838               	movf	sprintf@c^(0+128),w
  6744  0418  0020               	movlb	0	; select bank0
  6745  0419  00E1               	movwf	??_sprintf
  6746  041A  01E2               	clrf	??_sprintf+1
  6747  041B  1BE1               	btfsc	??_sprintf,7
  6748  041C  03E2               	decf	??_sprintf+1,f
  6749  041D  0021               	movlb	1	; select bank1
  6750  041E  0836               	movf	sprintf@prec^(0+128),w
  6751  041F  0020               	movlb	0	; select bank0
  6752  0420  0761               	addwf	??_sprintf,w
  6753  0421  00E3               	movwf	??_sprintf+2
  6754  0422  0021               	movlb	1	; select bank1
  6755  0423  0837               	movf	(sprintf@prec+1)^(0+128),w
  6756  0424  0020               	movlb	0	; select bank0
  6757  0425  3D62               	addwfc	??_sprintf+1,w
  6758  0426  00E4               	movwf	??_sprintf+3
  6759  0427  0021               	movlb	1	; select bank1
  6760  0428  0830               	movf	sprintf@exp^(0+128),w
  6761  0429  0020               	movlb	0	; select bank0
  6762  042A  0763               	addwf	??_sprintf+2,w
  6763  042B  00E5               	movwf	??_sprintf+4
  6764  042C  0021               	movlb	1	; select bank1
  6765  042D  0831               	movf	(sprintf@exp+1)^(0+128),w
  6766  042E  0020               	movlb	0	; select bank0
  6767  042F  3D64               	addwfc	??_sprintf+3,w
  6768  0430  00E6               	movwf	??_sprintf+5
  6769  0431  0865               	movf	??_sprintf+4,w
  6770  0432  0021               	movlb	1	; select bank1
  6771  0433  02A6               	subwf	sprintf@width^(0+128),f
  6772  0434  0020               	movlb	0	; select bank0
  6773  0435  0866               	movf	??_sprintf+5,w
  6774  0436  0021               	movlb	1	; select bank1
  6775  0437  3BA7               	subwfb	(sprintf@width+1)^(0+128),f
  6776                           
  6777                           ;doprnt.c: 1143: if(
  6778                           ;doprnt.c: 1147: prec)
  6779  0438  0836               	movf	sprintf@prec^(0+128),w
  6780  0439  0437               	iorwf	(sprintf@prec+1)^(0+128),w
  6781  043A  1903               	btfsc	3,2
  6782  043B  2C40               	goto	l3405
  6783                           
  6784                           ;doprnt.c: 1148: width--;
  6785  043C  30FF               	movlw	255
  6786  043D  07A6               	addwf	sprintf@width^(0+128),f
  6787  043E  30FF               	movlw	255
  6788  043F  3DA7               	addwfc	(sprintf@width+1)^(0+128),f
  6789  0440                     l3405:	
  6790                           
  6791                           ;doprnt.c: 1149: if(flag & 0x03)
  6792  0440  3003               	movlw	3
  6793  0441  0524               	andwf	sprintf@flag^(0+128),w
  6794  0442  0020               	movlb	0	; select bank0
  6795  0443  00E1               	movwf	??_sprintf
  6796  0444  3000               	movlw	0
  6797  0445  0021               	movlb	1	; select bank1
  6798  0446  0525               	andwf	(sprintf@flag+1)^(0+128),w
  6799  0447  0020               	movlb	0	; select bank0
  6800  0448  00E2               	movwf	??_sprintf+1
  6801  0449  0861               	movf	??_sprintf,w
  6802  044A  0462               	iorwf	??_sprintf+1,w
  6803  044B  1903               	btfsc	3,2
  6804  044C  2C52               	goto	l3415
  6805                           
  6806                           ;doprnt.c: 1150: width--;
  6807  044D  30FF               	movlw	255
  6808  044E  0021               	movlb	1	; select bank1
  6809  044F                     L3:	
  6810  044F  07A6               	addwf	sprintf@width^(0+128),f
  6811  0450  30FF               	movlw	255
  6812  0451  3DA7               	addwfc	(sprintf@width+1)^(0+128),f
  6813  0452                     l3415:	
  6814  0452  0021               	movlb	1	; select bank1
  6815  0453  0827               	movf	(sprintf@width+1)^(0+128),w
  6816  0454  3A80               	xorlw	128
  6817  0455  0020               	movlb	0	; select bank0
  6818  0456  00E1               	movwf	??_sprintf
  6819  0457  3080               	movlw	128
  6820  0458  0261               	subwf	??_sprintf,w
  6821  0459  1D03               	skipz
  6822  045A  2C5E               	goto	u4315
  6823  045B  3001               	movlw	1
  6824  045C  0021               	movlb	1	; select bank1
  6825  045D  0226               	subwf	sprintf@width^(0+128),w
  6826  045E                     u4315:	
  6827  045E  1C03               	btfss	3,0
  6828  045F  2C71               	goto	l3417
  6829                           
  6830                           ;doprnt.c: 1181: ((*sp++ = (' ')));
  6831                           
  6832                           ;doprnt.c: 1175: {
  6833                           ;doprnt.c: 1180: while(width > 0) {
  6834  0460  3020               	movlw	32
  6835  0461  0020               	movlb	0	; select bank0
  6836  0462  00E1               	movwf	??_sprintf
  6837  0463  0021               	movlb	1	; select bank1
  6838  0464  0835               	movf	sprintf@sp^(0+128),w
  6839  0465  0086               	movwf	6
  6840  0466  0187               	clrf	7
  6841  0467  0020               	movlb	0	; select bank0
  6842  0468  0861               	movf	??_sprintf,w
  6843  0469  0081               	movwf	1
  6844  046A  3001               	movlw	1
  6845  046B  00E1               	movwf	??_sprintf
  6846  046C  0861               	movf	??_sprintf,w
  6847  046D  0021               	movlb	1	; select bank1
  6848  046E  07B5               	addwf	sprintf@sp^(0+128),f
  6849                           
  6850                           ;doprnt.c: 1182: width--;
  6851  046F  30FF               	movlw	255
  6852  0470  2C4F               	goto	L3
  6853  0471                     l3417:	
  6854                           
  6855                           ;doprnt.c: 1183: }
  6856                           ;doprnt.c: 1188: if(flag & 0x03)
  6857  0471  3003               	movlw	3
  6858  0472  0021               	movlb	1	; select bank1
  6859  0473  0524               	andwf	sprintf@flag^(0+128),w
  6860  0474  0020               	movlb	0	; select bank0
  6861  0475  00E1               	movwf	??_sprintf
  6862  0476  3000               	movlw	0
  6863  0477  0021               	movlb	1	; select bank1
  6864  0478  0525               	andwf	(sprintf@flag+1)^(0+128),w
  6865  0479  0020               	movlb	0	; select bank0
  6866  047A  00E2               	movwf	??_sprintf+1
  6867  047B  0861               	movf	??_sprintf,w
  6868  047C  0462               	iorwf	??_sprintf+1,w
  6869  047D  1903               	btfsc	3,2
  6870  047E  2C8D               	goto	l3431
  6871                           
  6872                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  6873  047F  302D               	movlw	45
  6874  0480                     L6:	
  6875  0480  00E1               	movwf	??_sprintf
  6876  0481  0021               	movlb	1	; select bank1
  6877  0482  0835               	movf	sprintf@sp^(0+128),w
  6878  0483  0086               	movwf	6
  6879  0484  0187               	clrf	7
  6880  0485  0020               	movlb	0	; select bank0
  6881  0486  0861               	movf	??_sprintf,w
  6882  0487  0081               	movwf	1
  6883  0488  3001               	movlw	1
  6884  0489  00E1               	movwf	??_sprintf
  6885  048A  0861               	movf	??_sprintf,w
  6886  048B  0021               	movlb	1	; select bank1
  6887  048C  07B5               	addwf	sprintf@sp^(0+128),f
  6888  048D                     l3431:	
  6889  048D  30FF               	movlw	255
  6890  048E  0020               	movlb	0	; select bank0
  6891  048F  00E1               	movwf	??_sprintf
  6892  0490  0861               	movf	??_sprintf,w
  6893  0491  0021               	movlb	1	; select bank1
  6894  0492  07B8               	addwf	sprintf@c^(0+128),f
  6895  0493  0A38               	incf	sprintf@c^(0+128),w
  6896  0494  1903               	btfsc	3,2
  6897  0495  2D04               	goto	l3439
  6898                           
  6899                           ;doprnt.c: 1200: {
  6900                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  6901                           
  6902                           ;doprnt.c: 1195: }
  6903                           ;doprnt.c: 1196: while(c--) {
  6904  0496  0838               	movf	sprintf@c^(0+128),w
  6905  0497  0020               	movlb	0	; select bank0
  6906  0498  00E1               	movwf	??_sprintf
  6907  0499  01E2               	clrf	??_sprintf+1
  6908  049A  35E1               	lslf	??_sprintf,f
  6909  049B  0DE2               	rlf	??_sprintf+1,f
  6910  049C  35E1               	lslf	??_sprintf,f
  6911  049D  0DE2               	rlf	??_sprintf+1,f
  6912  049E  3000               	movlw	low (_dpowers| (0+32768))
  6913  049F  0761               	addwf	??_sprintf,w
  6914  04A0  0084               	movwf	4
  6915  04A1  3098               	movlw	high (_dpowers| (0+32768))
  6916  04A2  3D62               	addwfc	??_sprintf+1,w
  6917  04A3  0085               	movwf	5
  6918  04A4  3F00               	moviw [0]fsr0
  6919  04A5  00F0               	movwf	___lldiv@divisor
  6920  04A6  3F01               	moviw [1]fsr0
  6921  04A7  00F1               	movwf	___lldiv@divisor+1
  6922  04A8  3F02               	moviw [2]fsr0
  6923  04A9  00F2               	movwf	___lldiv@divisor+2
  6924  04AA  3F03               	moviw [3]fsr0
  6925  04AB  00F3               	movwf	___lldiv@divisor+3
  6926  04AC  0021               	movlb	1	; select bank1
  6927  04AD  082F               	movf	(sprintf@val+3)^(0+128),w
  6928  04AE  00F7               	movwf	___lldiv@dividend+3
  6929  04AF  082E               	movf	(sprintf@val+2)^(0+128),w
  6930  04B0  00F6               	movwf	___lldiv@dividend+2
  6931  04B1  082D               	movf	(sprintf@val+1)^(0+128),w
  6932  04B2  00F5               	movwf	___lldiv@dividend+1
  6933  04B3  082C               	movf	sprintf@val^(0+128),w
  6934  04B4  00F4               	movwf	___lldiv@dividend
  6935  04B5  3191  21A3  3180   	fcall	___lldiv
  6936  04B8  0873               	movf	?___lldiv+3,w
  6937  04B9  0021               	movlb	1	; select bank1
  6938  04BA  00AB               	movwf	(sprintf@tmpval+3)^(0+128)
  6939  04BB  0872               	movf	?___lldiv+2,w
  6940  04BC  00AA               	movwf	(sprintf@tmpval+2)^(0+128)
  6941  04BD  0871               	movf	?___lldiv+1,w
  6942  04BE  00A9               	movwf	(sprintf@tmpval+1)^(0+128)
  6943  04BF  0870               	movf	?___lldiv,w
  6944  04C0  00A8               	movwf	sprintf@tmpval^(0+128)
  6945                           
  6946                           ;doprnt.c: 1202: tmpval.vd %= 10;
  6947  04C1  3000               	movlw	0
  6948  04C2  0020               	movlb	0	; select bank0
  6949  04C3  00A3               	movwf	___llmod@divisor+3
  6950  04C4  3000               	movlw	0
  6951  04C5  00A2               	movwf	___llmod@divisor+2
  6952  04C6  3000               	movlw	0
  6953  04C7  00A1               	movwf	___llmod@divisor+1
  6954  04C8  300A               	movlw	10
  6955  04C9  00A0               	movwf	___llmod@divisor
  6956  04CA  0021               	movlb	1	; select bank1
  6957  04CB  082B               	movf	(sprintf@tmpval+3)^(0+128),w
  6958  04CC  0020               	movlb	0	; select bank0
  6959  04CD  00A7               	movwf	___llmod@dividend+3
  6960  04CE  0021               	movlb	1	; select bank1
  6961  04CF  082A               	movf	(sprintf@tmpval+2)^(0+128),w
  6962  04D0  0020               	movlb	0	; select bank0
  6963  04D1  00A6               	movwf	___llmod@dividend+2
  6964  04D2  0021               	movlb	1	; select bank1
  6965  04D3  0829               	movf	(sprintf@tmpval+1)^(0+128),w
  6966  04D4  0020               	movlb	0	; select bank0
  6967  04D5  00A5               	movwf	___llmod@dividend+1
  6968  04D6  0021               	movlb	1	; select bank1
  6969  04D7  0828               	movf	sprintf@tmpval^(0+128),w
  6970  04D8  0020               	movlb	0	; select bank0
  6971  04D9  00A4               	movwf	___llmod@dividend
  6972  04DA  3191  211B  3180   	fcall	___llmod
  6973  04DD  0020               	movlb	0	; select bank0
  6974  04DE  0823               	movf	?___llmod+3,w
  6975  04DF  0021               	movlb	1	; select bank1
  6976  04E0  00AB               	movwf	(sprintf@tmpval+3)^(0+128)
  6977  04E1  0020               	movlb	0	; select bank0
  6978  04E2  0822               	movf	?___llmod+2,w
  6979  04E3  0021               	movlb	1	; select bank1
  6980  04E4  00AA               	movwf	(sprintf@tmpval+2)^(0+128)
  6981  04E5  0020               	movlb	0	; select bank0
  6982  04E6  0821               	movf	?___llmod+1,w
  6983  04E7  0021               	movlb	1	; select bank1
  6984  04E8  00A9               	movwf	(sprintf@tmpval+1)^(0+128)
  6985  04E9  0020               	movlb	0	; select bank0
  6986  04EA  0820               	movf	?___llmod,w
  6987  04EB  0021               	movlb	1	; select bank1
  6988  04EC  00A8               	movwf	sprintf@tmpval^(0+128)
  6989                           
  6990                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  6991  04ED  0828               	movf	sprintf@tmpval^(0+128),w
  6992  04EE  3E30               	addlw	48
  6993  04EF  0020               	movlb	0	; select bank0
  6994  04F0  2C80               	goto	L6
  6995  04F1                     l3433:	
  6996                           ;doprnt.c: 1204: }
  6997                           ;doprnt.c: 1206: }
  6998                           ;doprnt.c: 1207: while(exp > 0) {
  6999                           
  7000                           
  7001                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  7002  04F1  3030               	movlw	48
  7003  04F2  0020               	movlb	0	; select bank0
  7004  04F3  00E1               	movwf	??_sprintf
  7005  04F4  0021               	movlb	1	; select bank1
  7006  04F5  0835               	movf	sprintf@sp^(0+128),w
  7007  04F6  0086               	movwf	6
  7008  04F7  0187               	clrf	7
  7009  04F8  0020               	movlb	0	; select bank0
  7010  04F9  0861               	movf	??_sprintf,w
  7011  04FA  0081               	movwf	1
  7012  04FB  3001               	movlw	1
  7013  04FC  00E1               	movwf	??_sprintf
  7014  04FD  0861               	movf	??_sprintf,w
  7015  04FE  0021               	movlb	1	; select bank1
  7016  04FF  07B5               	addwf	sprintf@sp^(0+128),f
  7017                           
  7018                           ;doprnt.c: 1209: exp--;
  7019  0500  30FF               	movlw	255
  7020  0501  07B0               	addwf	sprintf@exp^(0+128),f
  7021  0502  30FF               	movlw	255
  7022  0503  3DB1               	addwfc	(sprintf@exp+1)^(0+128),f
  7023  0504                     l3439:	
  7024  0504  0831               	movf	(sprintf@exp+1)^(0+128),w
  7025  0505  3A80               	xorlw	128
  7026  0506  0020               	movlb	0	; select bank0
  7027  0507  00E1               	movwf	??_sprintf
  7028  0508  3080               	movlw	128
  7029  0509  0261               	subwf	??_sprintf,w
  7030  050A  1D03               	skipz
  7031  050B  2D0F               	goto	u4345
  7032  050C  3001               	movlw	1
  7033  050D  0021               	movlb	1	; select bank1
  7034  050E  0230               	subwf	sprintf@exp^(0+128),w
  7035  050F                     u4345:	
  7036  050F  1803               	skipnc
  7037  0510  2CF1               	goto	l3433
  7038                           
  7039                           ;doprnt.c: 1210: }
  7040                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  7041  0511  0021               	movlb	1	; select bank1
  7042  0512  0837               	movf	(sprintf@prec+1)^(0+128),w
  7043  0513  3A80               	xorlw	128
  7044  0514  0020               	movlb	0	; select bank0
  7045  0515  00E1               	movwf	??_sprintf
  7046  0516  3080               	movlw	128
  7047  0517  0261               	subwf	??_sprintf,w
  7048  0518  1D03               	skipz
  7049  0519  2D1D               	goto	u4355
  7050  051A  3009               	movlw	9
  7051  051B  0021               	movlb	1	; select bank1
  7052  051C  0236               	subwf	sprintf@prec^(0+128),w
  7053  051D                     u4355:	
  7054  051D  1C03               	skipc
  7055  051E  2D21               	goto	l3445
  7056                           
  7057                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  7058  051F  3008               	movlw	8
  7059  0520  2D23               	goto	L4
  7060  0521                     l3445:	
  7061                           
  7062                           ;doprnt.c: 1213: else
  7063                           ;doprnt.c: 1214: c = prec;
  7064  0521  0021               	movlb	1	; select bank1
  7065  0522  0836               	movf	sprintf@prec^(0+128),w
  7066  0523                     L4:	
  7067  0523  0020               	movlb	0	; select bank0
  7068  0524  00E1               	movwf	??_sprintf
  7069  0525  0861               	movf	??_sprintf,w
  7070  0526  0021               	movlb	1	; select bank1
  7071  0527  00B8               	movwf	sprintf@c^(0+128)
  7072                           
  7073                           ;doprnt.c: 1215: prec -= c;
  7074  0528  0838               	movf	sprintf@c^(0+128),w
  7075  0529  0020               	movlb	0	; select bank0
  7076  052A  00E1               	movwf	??_sprintf
  7077  052B  01E2               	clrf	??_sprintf+1
  7078  052C  1BE1               	btfsc	??_sprintf,7
  7079  052D  03E2               	decf	??_sprintf+1,f
  7080  052E  0861               	movf	??_sprintf,w
  7081  052F  0021               	movlb	1	; select bank1
  7082  0530  02B6               	subwf	sprintf@prec^(0+128),f
  7083  0531  0020               	movlb	0	; select bank0
  7084  0532  0862               	movf	??_sprintf+1,w
  7085  0533  0021               	movlb	1	; select bank1
  7086  0534  3BB7               	subwfb	(sprintf@prec+1)^(0+128),f
  7087                           
  7088                           ;doprnt.c: 1219: if(c)
  7089  0535  0838               	movf	sprintf@c^(0+128),w
  7090  0536  1903               	btfsc	3,2
  7091  0537  2D47               	goto	l3453
  7092                           
  7093                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  7094  0538  302E               	movlw	46
  7095  0539  0020               	movlb	0	; select bank0
  7096  053A  00E1               	movwf	??_sprintf
  7097  053B  0021               	movlb	1	; select bank1
  7098  053C  0835               	movf	sprintf@sp^(0+128),w
  7099  053D  0086               	movwf	6
  7100  053E  0187               	clrf	7
  7101  053F  0020               	movlb	0	; select bank0
  7102  0540  0861               	movf	??_sprintf,w
  7103  0541  0081               	movwf	1
  7104  0542  3001               	movlw	1
  7105  0543  00E1               	movwf	??_sprintf
  7106  0544  0861               	movf	??_sprintf,w
  7107  0545  0021               	movlb	1	; select bank1
  7108  0546  07B5               	addwf	sprintf@sp^(0+128),f
  7109  0547                     l3453:	
  7110                           
  7111                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  7112  0547  0838               	movf	sprintf@c^(0+128),w
  7113  0548  318A  22BE  3180   	fcall	_scale
  7114  054B  0020               	movlb	0	; select bank0
  7115  054C  0838               	movf	?_scale,w
  7116  054D  0021               	movlb	1	; select bank1
  7117  054E  00A0               	movwf	_sprintf$1019^(0+128)
  7118  054F  0020               	movlb	0	; select bank0
  7119  0550  0839               	movf	?_scale+1,w
  7120  0551  0021               	movlb	1	; select bank1
  7121  0552  00A1               	movwf	(_sprintf$1019+1)^(0+128)
  7122  0553  0020               	movlb	0	; select bank0
  7123  0554  083A               	movf	?_scale+2,w
  7124  0555  0021               	movlb	1	; select bank1
  7125  0556  00A2               	movwf	(_sprintf$1019+2)^(0+128)
  7126                           
  7127                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  7128  0557  0820               	movf	_sprintf$1019^(0+128),w
  7129  0558  0020               	movlb	0	; select bank0
  7130  0559  00AB               	movwf	___ftmul@f2
  7131  055A  0021               	movlb	1	; select bank1
  7132  055B  0821               	movf	(_sprintf$1019+1)^(0+128),w
  7133  055C  0020               	movlb	0	; select bank0
  7134  055D  00AC               	movwf	___ftmul@f2+1
  7135  055E  0021               	movlb	1	; select bank1
  7136  055F  0822               	movf	(_sprintf$1019+2)^(0+128),w
  7137  0560  0020               	movlb	0	; select bank0
  7138  0561  00AD               	movwf	___ftmul@f2+2
  7139  0562  0021               	movlb	1	; select bank1
  7140  0563  0832               	movf	sprintf@fval^(0+128),w
  7141  0564  0020               	movlb	0	; select bank0
  7142  0565  00A8               	movwf	___ftmul@f1
  7143  0566  0021               	movlb	1	; select bank1
  7144  0567  0833               	movf	(sprintf@fval+1)^(0+128),w
  7145  0568  0020               	movlb	0	; select bank0
  7146  0569  00A9               	movwf	___ftmul@f1+1
  7147  056A  0021               	movlb	1	; select bank1
  7148  056B  0834               	movf	(sprintf@fval+2)^(0+128),w
  7149  056C  0020               	movlb	0	; select bank0
  7150  056D  00AA               	movwf	___ftmul@f1+2
  7151  056E  3196  2656  3180   	fcall	___ftmul
  7152  0571  0020               	movlb	0	; select bank0
  7153  0572  0828               	movf	?___ftmul,w
  7154  0573  00C1               	movwf	___fttol@f1
  7155  0574  0829               	movf	?___ftmul+1,w
  7156  0575  00C2               	movwf	___fttol@f1+1
  7157  0576  082A               	movf	?___ftmul+2,w
  7158  0577  00C3               	movwf	___fttol@f1+2
  7159  0578  3194  2479  3180   	fcall	___fttol
  7160  057B  0020               	movlb	0	; select bank0
  7161  057C  0844               	movf	?___fttol+3,w
  7162  057D  0021               	movlb	1	; select bank1
  7163  057E  00AF               	movwf	(sprintf@val+3)^(0+128)
  7164  057F  0020               	movlb	0	; select bank0
  7165  0580  0843               	movf	?___fttol+2,w
  7166  0581  0021               	movlb	1	; select bank1
  7167  0582  00AE               	movwf	(sprintf@val+2)^(0+128)
  7168  0583  0020               	movlb	0	; select bank0
  7169  0584  0842               	movf	?___fttol+1,w
  7170  0585  0021               	movlb	1	; select bank1
  7171  0586  00AD               	movwf	(sprintf@val+1)^(0+128)
  7172  0587  0020               	movlb	0	; select bank0
  7173  0588  0841               	movf	?___fttol,w
  7174  0589                     L5:	
  7175  0589  0021               	movlb	1	; select bank1
  7176  058A  00AC               	movwf	sprintf@val^(0+128)
  7177  058B  30FF               	movlw	255
  7178  058C  0020               	movlb	0	; select bank0
  7179  058D  00E1               	movwf	??_sprintf
  7180  058E  0861               	movf	??_sprintf,w
  7181  058F  0021               	movlb	1	; select bank1
  7182  0590  07B8               	addwf	sprintf@c^(0+128),f
  7183  0591  0A38               	incf	sprintf@c^(0+128),w
  7184  0592  1903               	btfsc	3,2
  7185  0593  2E46               	goto	l3475
  7186                           
  7187                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  7188                           
  7189                           ;doprnt.c: 1228: while(c--) {
  7190  0594  0838               	movf	sprintf@c^(0+128),w
  7191  0595  0020               	movlb	0	; select bank0
  7192  0596  00E1               	movwf	??_sprintf
  7193  0597  01E2               	clrf	??_sprintf+1
  7194  0598  35E1               	lslf	??_sprintf,f
  7195  0599  0DE2               	rlf	??_sprintf+1,f
  7196  059A  35E1               	lslf	??_sprintf,f
  7197  059B  0DE2               	rlf	??_sprintf+1,f
  7198  059C  3000               	movlw	low (_dpowers| (0+32768))
  7199  059D  0761               	addwf	??_sprintf,w
  7200  059E  0084               	movwf	4
  7201  059F  3098               	movlw	high (_dpowers| (0+32768))
  7202  05A0  3D62               	addwfc	??_sprintf+1,w
  7203  05A1  0085               	movwf	5
  7204  05A2  3F00               	moviw [0]fsr0
  7205  05A3  00F0               	movwf	___lldiv@divisor
  7206  05A4  3F01               	moviw [1]fsr0
  7207  05A5  00F1               	movwf	___lldiv@divisor+1
  7208  05A6  3F02               	moviw [2]fsr0
  7209  05A7  00F2               	movwf	___lldiv@divisor+2
  7210  05A8  3F03               	moviw [3]fsr0
  7211  05A9  00F3               	movwf	___lldiv@divisor+3
  7212  05AA  0021               	movlb	1	; select bank1
  7213  05AB  082F               	movf	(sprintf@val+3)^(0+128),w
  7214  05AC  00F7               	movwf	___lldiv@dividend+3
  7215  05AD  082E               	movf	(sprintf@val+2)^(0+128),w
  7216  05AE  00F6               	movwf	___lldiv@dividend+2
  7217  05AF  082D               	movf	(sprintf@val+1)^(0+128),w
  7218  05B0  00F5               	movwf	___lldiv@dividend+1
  7219  05B1  082C               	movf	sprintf@val^(0+128),w
  7220  05B2  00F4               	movwf	___lldiv@dividend
  7221  05B3  3191  21A3  3180   	fcall	___lldiv
  7222  05B6  0873               	movf	?___lldiv+3,w
  7223  05B7  0021               	movlb	1	; select bank1
  7224  05B8  00AB               	movwf	(sprintf@tmpval+3)^(0+128)
  7225  05B9  0872               	movf	?___lldiv+2,w
  7226  05BA  00AA               	movwf	(sprintf@tmpval+2)^(0+128)
  7227  05BB  0871               	movf	?___lldiv+1,w
  7228  05BC  00A9               	movwf	(sprintf@tmpval+1)^(0+128)
  7229  05BD  0870               	movf	?___lldiv,w
  7230  05BE  00A8               	movwf	sprintf@tmpval^(0+128)
  7231                           
  7232                           ;doprnt.c: 1230: tmpval.vd %= 10;
  7233  05BF  3000               	movlw	0
  7234  05C0  0020               	movlb	0	; select bank0
  7235  05C1  00A3               	movwf	___llmod@divisor+3
  7236  05C2  3000               	movlw	0
  7237  05C3  00A2               	movwf	___llmod@divisor+2
  7238  05C4  3000               	movlw	0
  7239  05C5  00A1               	movwf	___llmod@divisor+1
  7240  05C6  300A               	movlw	10
  7241  05C7  00A0               	movwf	___llmod@divisor
  7242  05C8  0021               	movlb	1	; select bank1
  7243  05C9  082B               	movf	(sprintf@tmpval+3)^(0+128),w
  7244  05CA  0020               	movlb	0	; select bank0
  7245  05CB  00A7               	movwf	___llmod@dividend+3
  7246  05CC  0021               	movlb	1	; select bank1
  7247  05CD  082A               	movf	(sprintf@tmpval+2)^(0+128),w
  7248  05CE  0020               	movlb	0	; select bank0
  7249  05CF  00A6               	movwf	___llmod@dividend+2
  7250  05D0  0021               	movlb	1	; select bank1
  7251  05D1  0829               	movf	(sprintf@tmpval+1)^(0+128),w
  7252  05D2  0020               	movlb	0	; select bank0
  7253  05D3  00A5               	movwf	___llmod@dividend+1
  7254  05D4  0021               	movlb	1	; select bank1
  7255  05D5  0828               	movf	sprintf@tmpval^(0+128),w
  7256  05D6  0020               	movlb	0	; select bank0
  7257  05D7  00A4               	movwf	___llmod@dividend
  7258  05D8  3191  211B  3180   	fcall	___llmod
  7259  05DB  0020               	movlb	0	; select bank0
  7260  05DC  0823               	movf	?___llmod+3,w
  7261  05DD  0021               	movlb	1	; select bank1
  7262  05DE  00AB               	movwf	(sprintf@tmpval+3)^(0+128)
  7263  05DF  0020               	movlb	0	; select bank0
  7264  05E0  0822               	movf	?___llmod+2,w
  7265  05E1  0021               	movlb	1	; select bank1
  7266  05E2  00AA               	movwf	(sprintf@tmpval+2)^(0+128)
  7267  05E3  0020               	movlb	0	; select bank0
  7268  05E4  0821               	movf	?___llmod+1,w
  7269  05E5  0021               	movlb	1	; select bank1
  7270  05E6  00A9               	movwf	(sprintf@tmpval+1)^(0+128)
  7271  05E7  0020               	movlb	0	; select bank0
  7272  05E8  0820               	movf	?___llmod,w
  7273  05E9  0021               	movlb	1	; select bank1
  7274  05EA  00A8               	movwf	sprintf@tmpval^(0+128)
  7275                           
  7276                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  7277  05EB  0828               	movf	sprintf@tmpval^(0+128),w
  7278  05EC  3E30               	addlw	48
  7279  05ED  0020               	movlb	0	; select bank0
  7280  05EE  00E1               	movwf	??_sprintf
  7281  05EF  0021               	movlb	1	; select bank1
  7282  05F0  0835               	movf	sprintf@sp^(0+128),w
  7283  05F1  0086               	movwf	6
  7284  05F2  0187               	clrf	7
  7285  05F3  0020               	movlb	0	; select bank0
  7286  05F4  0861               	movf	??_sprintf,w
  7287  05F5  0081               	movwf	1
  7288  05F6  3001               	movlw	1
  7289  05F7  00E1               	movwf	??_sprintf
  7290  05F8  0861               	movf	??_sprintf,w
  7291  05F9  0021               	movlb	1	; select bank1
  7292  05FA  07B5               	addwf	sprintf@sp^(0+128),f
  7293                           
  7294                           ;doprnt.c: 1232: val %= dpowers[c];
  7295  05FB  0838               	movf	sprintf@c^(0+128),w
  7296  05FC  0020               	movlb	0	; select bank0
  7297  05FD  00E1               	movwf	??_sprintf
  7298  05FE  01E2               	clrf	??_sprintf+1
  7299  05FF  35E1               	lslf	??_sprintf,f
  7300  0600  0DE2               	rlf	??_sprintf+1,f
  7301  0601  35E1               	lslf	??_sprintf,f
  7302  0602  0DE2               	rlf	??_sprintf+1,f
  7303  0603  3000               	movlw	low (_dpowers| (0+32768))
  7304  0604  0761               	addwf	??_sprintf,w
  7305  0605  0084               	movwf	4
  7306  0606  3098               	movlw	high (_dpowers| (0+32768))
  7307  0607  3D62               	addwfc	??_sprintf+1,w
  7308  0608  0085               	movwf	5
  7309  0609  3F00               	moviw [0]fsr0
  7310  060A  00A0               	movwf	___llmod@divisor
  7311  060B  3F01               	moviw [1]fsr0
  7312  060C  00A1               	movwf	___llmod@divisor+1
  7313  060D  3F02               	moviw [2]fsr0
  7314  060E  00A2               	movwf	___llmod@divisor+2
  7315  060F  3F03               	moviw [3]fsr0
  7316  0610  00A3               	movwf	___llmod@divisor+3
  7317  0611  0021               	movlb	1	; select bank1
  7318  0612  082F               	movf	(sprintf@val+3)^(0+128),w
  7319  0613  0020               	movlb	0	; select bank0
  7320  0614  00A7               	movwf	___llmod@dividend+3
  7321  0615  0021               	movlb	1	; select bank1
  7322  0616  082E               	movf	(sprintf@val+2)^(0+128),w
  7323  0617  0020               	movlb	0	; select bank0
  7324  0618  00A6               	movwf	___llmod@dividend+2
  7325  0619  0021               	movlb	1	; select bank1
  7326  061A  082D               	movf	(sprintf@val+1)^(0+128),w
  7327  061B  0020               	movlb	0	; select bank0
  7328  061C  00A5               	movwf	___llmod@dividend+1
  7329  061D  0021               	movlb	1	; select bank1
  7330  061E  082C               	movf	sprintf@val^(0+128),w
  7331  061F  0020               	movlb	0	; select bank0
  7332  0620  00A4               	movwf	___llmod@dividend
  7333  0621  3191  211B  3180   	fcall	___llmod
  7334  0624  0020               	movlb	0	; select bank0
  7335  0625  0823               	movf	?___llmod+3,w
  7336  0626  0021               	movlb	1	; select bank1
  7337  0627  00AF               	movwf	(sprintf@val+3)^(0+128)
  7338  0628  0020               	movlb	0	; select bank0
  7339  0629  0822               	movf	?___llmod+2,w
  7340  062A  0021               	movlb	1	; select bank1
  7341  062B  00AE               	movwf	(sprintf@val+2)^(0+128)
  7342  062C  0020               	movlb	0	; select bank0
  7343  062D  0821               	movf	?___llmod+1,w
  7344  062E  0021               	movlb	1	; select bank1
  7345  062F  00AD               	movwf	(sprintf@val+1)^(0+128)
  7346  0630  0020               	movlb	0	; select bank0
  7347  0631  0820               	movf	?___llmod,w
  7348  0632  2D89               	goto	L5
  7349  0633                     l3469:	
  7350                           ;doprnt.c: 1233: }
  7351                           ;doprnt.c: 1235: while(prec) {
  7352                           
  7353                           
  7354                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  7355  0633  3030               	movlw	48
  7356  0634  0020               	movlb	0	; select bank0
  7357  0635  00E1               	movwf	??_sprintf
  7358  0636  0021               	movlb	1	; select bank1
  7359  0637  0835               	movf	sprintf@sp^(0+128),w
  7360  0638  0086               	movwf	6
  7361  0639  0187               	clrf	7
  7362  063A  0020               	movlb	0	; select bank0
  7363  063B  0861               	movf	??_sprintf,w
  7364  063C  0081               	movwf	1
  7365  063D  3001               	movlw	1
  7366  063E  00E1               	movwf	??_sprintf
  7367  063F  0861               	movf	??_sprintf,w
  7368  0640  0021               	movlb	1	; select bank1
  7369  0641  07B5               	addwf	sprintf@sp^(0+128),f
  7370                           
  7371                           ;doprnt.c: 1237: prec--;
  7372  0642  30FF               	movlw	255
  7373  0643  07B6               	addwf	sprintf@prec^(0+128),f
  7374  0644  30FF               	movlw	255
  7375  0645  3DB7               	addwfc	(sprintf@prec+1)^(0+128),f
  7376  0646                     l3475:	
  7377  0646  0836               	movf	sprintf@prec^(0+128),w
  7378  0647  0437               	iorwf	(sprintf@prec+1)^(0+128),w
  7379  0648  1903               	btfsc	3,2
  7380  0649  28D9               	goto	l3553
  7381  064A  2E33               	goto	l3469
  7382  064B                     l3477:	
  7383                           ;doprnt.c: 1238: }
  7384                           ;doprnt.c: 1245: continue;
  7385                           
  7386                           
  7387                           ;doprnt.c: 1246: }
  7388                           ;doprnt.c: 1253: {
  7389                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  7390  064B  0021               	movlb	1	; select bank1
  7391  064C  0823               	movf	sprintf@ap^(0+128),w
  7392  064D  0086               	movwf	6
  7393  064E  0187               	clrf	7
  7394  064F  3F40               	moviw [0]fsr1
  7395  0650  0020               	movlb	0	; select bank0
  7396  0651  00E1               	movwf	??_sprintf
  7397  0652  3F41               	moviw [1]fsr1
  7398  0653  00E2               	movwf	??_sprintf+1
  7399  0654  0861               	movf	??_sprintf,w
  7400  0655  0021               	movlb	1	; select bank1
  7401  0656  00AC               	movwf	sprintf@val^(0+128)
  7402  0657  0020               	movlb	0	; select bank0
  7403  0658  0862               	movf	??_sprintf+1,w
  7404  0659  0021               	movlb	1	; select bank1
  7405  065A  00AD               	movwf	(sprintf@val+1)^(0+128)
  7406  065B  0D89               	rlf	9,f
  7407  065C  3B89               	subwfb	9,f
  7408  065D  0989               	comf	9,f
  7409  065E  00AE               	movwf	(sprintf@val+2)^(0+128)
  7410  065F  00AF               	movwf	(sprintf@val+3)^(0+128)
  7411  0660  3002               	movlw	2
  7412  0661  0020               	movlb	0	; select bank0
  7413  0662  00E1               	movwf	??_sprintf
  7414  0663  0861               	movf	??_sprintf,w
  7415  0664  0021               	movlb	1	; select bank1
  7416  0665  07A3               	addwf	sprintf@ap^(0+128),f
  7417                           
  7418                           ;doprnt.c: 1261: if((long)val < 0) {
  7419  0666  1FAF               	btfss	(sprintf@val+3)^(0+128),7
  7420  0667  2E77               	goto	l3487
  7421                           
  7422                           ;doprnt.c: 1262: flag |= 0x03;
  7423  0668  3003               	movlw	3
  7424  0669  04A4               	iorwf	sprintf@flag^(0+128),f
  7425  066A  3000               	movlw	0
  7426  066B  04A5               	iorwf	(sprintf@flag+1)^(0+128),f
  7427                           
  7428                           ;doprnt.c: 1263: val = -val;
  7429  066C  09AC               	comf	sprintf@val^(0+128),f
  7430  066D  09AD               	comf	(sprintf@val+1)^(0+128),f
  7431  066E  09AE               	comf	(sprintf@val+2)^(0+128),f
  7432  066F  09AF               	comf	(sprintf@val+3)^(0+128),f
  7433  0670  0AAC               	incf	sprintf@val^(0+128),f
  7434  0671  1903               	skipnz
  7435  0672  0AAD               	incf	(sprintf@val+1)^(0+128),f
  7436  0673  1903               	skipnz
  7437  0674  0AAE               	incf	(sprintf@val+2)^(0+128),f
  7438  0675  1903               	skipnz
  7439  0676  0AAF               	incf	(sprintf@val+3)^(0+128),f
  7440  0677                     l3487:	
  7441                           
  7442                           ;doprnt.c: 1264: }
  7443                           ;doprnt.c: 1266: }
  7444                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  7445  0677  0836               	movf	sprintf@prec^(0+128),w
  7446  0678  0437               	iorwf	(sprintf@prec+1)^(0+128),w
  7447  0679  1D03               	btfss	3,2
  7448  067A  2E85               	goto	l3493
  7449  067B  082F               	movf	(sprintf@val+3)^(0+128),w
  7450  067C  042E               	iorwf	(sprintf@val+2)^(0+128),w
  7451  067D  042D               	iorwf	(sprintf@val+1)^(0+128),w
  7452  067E  042C               	iorwf	sprintf@val^(0+128),w
  7453  067F  1D03               	skipz
  7454  0680  2E85               	goto	l3493
  7455                           
  7456                           ;doprnt.c: 1291: prec++;
  7457  0681  3001               	movlw	1
  7458  0682  07B6               	addwf	sprintf@prec^(0+128),f
  7459  0683  3000               	movlw	0
  7460  0684  3DB7               	addwfc	(sprintf@prec+1)^(0+128),f
  7461  0685                     l3493:	
  7462                           
  7463                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7464  0685  01B8               	clrf	sprintf@c^(0+128)
  7465  0686  0AB8               	incf	sprintf@c^(0+128),f
  7466  0687  300A               	movlw	10
  7467  0688  0638               	xorwf	sprintf@c^(0+128),w
  7468  0689  1903               	btfsc	3,2
  7469  068A  2EC2               	goto	l3505
  7470  068B                     l3499:	
  7471                           
  7472                           ;doprnt.c: 1306: if(val < dpowers[c])
  7473  068B  0838               	movf	sprintf@c^(0+128),w
  7474  068C  0020               	movlb	0	; select bank0
  7475  068D  00E1               	movwf	??_sprintf
  7476  068E  01E2               	clrf	??_sprintf+1
  7477  068F  35E1               	lslf	??_sprintf,f
  7478  0690  0DE2               	rlf	??_sprintf+1,f
  7479  0691  35E1               	lslf	??_sprintf,f
  7480  0692  0DE2               	rlf	??_sprintf+1,f
  7481  0693  3000               	movlw	low (_dpowers| (0+32768))
  7482  0694  0761               	addwf	??_sprintf,w
  7483  0695  0084               	movwf	4
  7484  0696  3098               	movlw	high (_dpowers| (0+32768))
  7485  0697  3D62               	addwfc	??_sprintf+1,w
  7486  0698  0085               	movwf	5
  7487  0699  3F00               	moviw [0]fsr0
  7488  069A  00E3               	movwf	??_sprintf+2
  7489  069B  3F01               	moviw [1]fsr0
  7490  069C  00E4               	movwf	??_sprintf+3
  7491  069D  3F02               	moviw [2]fsr0
  7492  069E  00E5               	movwf	??_sprintf+4
  7493  069F  3F03               	moviw [3]fsr0
  7494  06A0  00E6               	movwf	??_sprintf+5
  7495  06A1  0866               	movf	??_sprintf+5,w
  7496  06A2  0021               	movlb	1	; select bank1
  7497  06A3  022F               	subwf	(sprintf@val+3)^(0+128),w
  7498  06A4  1D03               	skipz
  7499  06A5  2EB6               	goto	u4435
  7500  06A6  0020               	movlb	0	; select bank0
  7501  06A7  0865               	movf	??_sprintf+4,w
  7502  06A8  0021               	movlb	1	; select bank1
  7503  06A9  022E               	subwf	(sprintf@val+2)^(0+128),w
  7504  06AA  1D03               	skipz
  7505  06AB  2EB6               	goto	u4435
  7506  06AC  0020               	movlb	0	; select bank0
  7507  06AD  0864               	movf	??_sprintf+3,w
  7508  06AE  0021               	movlb	1	; select bank1
  7509  06AF  022D               	subwf	(sprintf@val+1)^(0+128),w
  7510  06B0  1D03               	skipz
  7511  06B1  2EB6               	goto	u4435
  7512  06B2  0020               	movlb	0	; select bank0
  7513  06B3  0863               	movf	??_sprintf+2,w
  7514  06B4  0021               	movlb	1	; select bank1
  7515  06B5  022C               	subwf	sprintf@val^(0+128),w
  7516  06B6                     u4435:	
  7517  06B6  1C03               	btfss	3,0
  7518  06B7  2EC2               	goto	l3505
  7519                           
  7520                           ;doprnt.c: 1307: break;
  7521  06B8  3001               	movlw	1
  7522  06B9  0020               	movlb	0	; select bank0
  7523  06BA  00E1               	movwf	??_sprintf
  7524  06BB  0861               	movf	??_sprintf,w
  7525  06BC  0021               	movlb	1	; select bank1
  7526  06BD  07B8               	addwf	sprintf@c^(0+128),f
  7527  06BE  300A               	movlw	10
  7528  06BF  0638               	xorwf	sprintf@c^(0+128),w
  7529  06C0  1D03               	btfss	3,2
  7530  06C1  2E8B               	goto	l3499
  7531  06C2                     l3505:	
  7532                           
  7533                           ;doprnt.c: 1339: if(c < prec)
  7534  06C2  0838               	movf	sprintf@c^(0+128),w
  7535  06C3  0020               	movlb	0	; select bank0
  7536  06C4  00E1               	movwf	??_sprintf
  7537  06C5  01E2               	clrf	??_sprintf+1
  7538  06C6  1BE1               	btfsc	??_sprintf,7
  7539  06C7  03E2               	decf	??_sprintf+1,f
  7540  06C8  0862               	movf	??_sprintf+1,w
  7541  06C9  3A80               	xorlw	128
  7542  06CA  00E3               	movwf	??_sprintf+2
  7543  06CB  0021               	movlb	1	; select bank1
  7544  06CC  0837               	movf	(sprintf@prec+1)^(0+128),w
  7545  06CD  3A80               	xorlw	128
  7546  06CE  0020               	movlb	0	; select bank0
  7547  06CF  0263               	subwf	??_sprintf+2,w
  7548  06D0  1D03               	skipz
  7549  06D1  2ED6               	goto	u4455
  7550  06D2  0021               	movlb	1	; select bank1
  7551  06D3  0836               	movf	sprintf@prec^(0+128),w
  7552  06D4  0020               	movlb	0	; select bank0
  7553  06D5  0261               	subwf	??_sprintf,w
  7554  06D6                     u4455:	
  7555  06D6  1803               	skipnc
  7556  06D7  2EE0               	goto	l3509
  7557                           
  7558                           ;doprnt.c: 1340: c = prec;
  7559  06D8  0021               	movlb	1	; select bank1
  7560  06D9  0836               	movf	sprintf@prec^(0+128),w
  7561  06DA  0020               	movlb	0	; select bank0
  7562  06DB  00E1               	movwf	??_sprintf
  7563  06DC  0861               	movf	??_sprintf,w
  7564  06DD  0021               	movlb	1	; select bank1
  7565  06DE  00B8               	movwf	sprintf@c^(0+128)
  7566  06DF  2EFC               	goto	l388
  7567  06E0                     l3509:	
  7568                           
  7569                           ;doprnt.c: 1341: else if(prec < c)
  7570  06E0  0021               	movlb	1	; select bank1
  7571  06E1  0838               	movf	sprintf@c^(0+128),w
  7572  06E2  0020               	movlb	0	; select bank0
  7573  06E3  00E1               	movwf	??_sprintf
  7574  06E4  01E2               	clrf	??_sprintf+1
  7575  06E5  1BE1               	btfsc	??_sprintf,7
  7576  06E6  03E2               	decf	??_sprintf+1,f
  7577  06E7  0021               	movlb	1	; select bank1
  7578  06E8  0837               	movf	(sprintf@prec+1)^(0+128),w
  7579  06E9  3A80               	xorlw	128
  7580  06EA  0020               	movlb	0	; select bank0
  7581  06EB  00E3               	movwf	??_sprintf+2
  7582  06EC  0862               	movf	??_sprintf+1,w
  7583  06ED  3A80               	xorlw	128
  7584  06EE  0263               	subwf	??_sprintf+2,w
  7585  06EF  1D03               	skipz
  7586  06F0  2EF4               	goto	u4465
  7587  06F1  0861               	movf	??_sprintf,w
  7588  06F2  0021               	movlb	1	; select bank1
  7589  06F3  0236               	subwf	sprintf@prec^(0+128),w
  7590  06F4                     u4465:	
  7591  06F4  1803               	skipnc
  7592  06F5  2EFC               	goto	l388
  7593                           
  7594                           ;doprnt.c: 1342: prec = c;
  7595  06F6  0021               	movlb	1	; select bank1
  7596  06F7  0838               	movf	sprintf@c^(0+128),w
  7597  06F8  00B6               	movwf	sprintf@prec^(0+128)
  7598  06F9  01B7               	clrf	(sprintf@prec+1)^(0+128)
  7599  06FA  1BB6               	btfsc	sprintf@prec^(0+128),7
  7600  06FB  03B7               	decf	(sprintf@prec+1)^(0+128),f
  7601  06FC                     l388:	
  7602                           
  7603                           ;doprnt.c: 1345: if(width && flag & 0x03)
  7604  06FC  0021               	movlb	1	; select bank1
  7605  06FD  0826               	movf	sprintf@width^(0+128),w
  7606  06FE  0427               	iorwf	(sprintf@width+1)^(0+128),w
  7607  06FF  1903               	btfsc	3,2
  7608  0700  2F13               	goto	l3517
  7609  0701  3003               	movlw	3
  7610  0702  0524               	andwf	sprintf@flag^(0+128),w
  7611  0703  0020               	movlb	0	; select bank0
  7612  0704  00E1               	movwf	??_sprintf
  7613  0705  3000               	movlw	0
  7614  0706  0021               	movlb	1	; select bank1
  7615  0707  0525               	andwf	(sprintf@flag+1)^(0+128),w
  7616  0708  0020               	movlb	0	; select bank0
  7617  0709  00E2               	movwf	??_sprintf+1
  7618  070A  0861               	movf	??_sprintf,w
  7619  070B  0462               	iorwf	??_sprintf+1,w
  7620  070C  1903               	btfsc	3,2
  7621  070D  2F13               	goto	l3517
  7622                           
  7623                           ;doprnt.c: 1346: width--;
  7624  070E  30FF               	movlw	255
  7625  070F  0021               	movlb	1	; select bank1
  7626  0710  07A6               	addwf	sprintf@width^(0+128),f
  7627  0711  30FF               	movlw	255
  7628  0712  3DA7               	addwfc	(sprintf@width+1)^(0+128),f
  7629  0713                     l3517:	
  7630                           
  7631                           ;doprnt.c: 1348: if(flag & 0x4000) {
  7632  0713  0021               	movlb	1	; select bank1
  7633  0714  1F25               	btfss	(sprintf@flag+1)^(0+128),6
  7634  0715  2F2F               	goto	l3525
  7635                           
  7636                           ;doprnt.c: 1349: if(width > prec)
  7637  0716  0837               	movf	(sprintf@prec+1)^(0+128),w
  7638  0717  3A80               	xorlw	128
  7639  0718  0020               	movlb	0	; select bank0
  7640  0719  00E1               	movwf	??_sprintf
  7641  071A  0021               	movlb	1	; select bank1
  7642  071B  0827               	movf	(sprintf@width+1)^(0+128),w
  7643  071C  3A80               	xorlw	128
  7644  071D  0020               	movlb	0	; select bank0
  7645  071E  0261               	subwf	??_sprintf,w
  7646  071F  1D03               	skipz
  7647  0720  2F24               	goto	u4505
  7648  0721  0021               	movlb	1	; select bank1
  7649  0722  0826               	movf	sprintf@width^(0+128),w
  7650  0723  0236               	subwf	sprintf@prec^(0+128),w
  7651  0724                     u4505:	
  7652  0724  1803               	skipnc
  7653  0725  2F2C               	goto	l3523
  7654                           
  7655                           ;doprnt.c: 1350: width -= prec;
  7656  0726  0021               	movlb	1	; select bank1
  7657  0727  0836               	movf	sprintf@prec^(0+128),w
  7658  0728  02A6               	subwf	sprintf@width^(0+128),f
  7659  0729  0837               	movf	(sprintf@prec+1)^(0+128),w
  7660  072A  3BA7               	subwfb	(sprintf@width+1)^(0+128),f
  7661  072B  2F2F               	goto	l3525
  7662  072C                     l3523:	
  7663                           
  7664                           ;doprnt.c: 1351: else
  7665                           ;doprnt.c: 1352: width = 0;
  7666  072C  0021               	movlb	1	; select bank1
  7667  072D  01A6               	clrf	sprintf@width^(0+128)
  7668  072E  01A7               	clrf	(sprintf@width+1)^(0+128)
  7669  072F                     l3525:	
  7670                           
  7671                           ;doprnt.c: 1353: }
  7672                           ;doprnt.c: 1381: if(width > c)
  7673  072F  0838               	movf	sprintf@c^(0+128),w
  7674  0730  0020               	movlb	0	; select bank0
  7675  0731  00E1               	movwf	??_sprintf
  7676  0732  01E2               	clrf	??_sprintf+1
  7677  0733  1BE1               	btfsc	??_sprintf,7
  7678  0734  03E2               	decf	??_sprintf+1,f
  7679  0735  0862               	movf	??_sprintf+1,w
  7680  0736  3A80               	xorlw	128
  7681  0737  00E3               	movwf	??_sprintf+2
  7682  0738  0021               	movlb	1	; select bank1
  7683  0739  0827               	movf	(sprintf@width+1)^(0+128),w
  7684  073A  3A80               	xorlw	128
  7685  073B  0020               	movlb	0	; select bank0
  7686  073C  0263               	subwf	??_sprintf+2,w
  7687  073D  1D03               	skipz
  7688  073E  2F43               	goto	u4515
  7689  073F  0021               	movlb	1	; select bank1
  7690  0740  0826               	movf	sprintf@width^(0+128),w
  7691  0741  0020               	movlb	0	; select bank0
  7692  0742  0261               	subwf	??_sprintf,w
  7693  0743                     u4515:	
  7694  0743  1803               	skipnc
  7695  0744  2F54               	goto	l3529
  7696                           
  7697                           ;doprnt.c: 1382: width -= c;
  7698  0745  0021               	movlb	1	; select bank1
  7699  0746  0838               	movf	sprintf@c^(0+128),w
  7700  0747  0020               	movlb	0	; select bank0
  7701  0748  00E1               	movwf	??_sprintf
  7702  0749  01E2               	clrf	??_sprintf+1
  7703  074A  1BE1               	btfsc	??_sprintf,7
  7704  074B  03E2               	decf	??_sprintf+1,f
  7705  074C  0861               	movf	??_sprintf,w
  7706  074D  0021               	movlb	1	; select bank1
  7707  074E  02A6               	subwf	sprintf@width^(0+128),f
  7708  074F  0020               	movlb	0	; select bank0
  7709  0750  0862               	movf	??_sprintf+1,w
  7710  0751  0021               	movlb	1	; select bank1
  7711  0752  3BA7               	subwfb	(sprintf@width+1)^(0+128),f
  7712  0753  2F57               	goto	l3531
  7713  0754                     l3529:	
  7714                           
  7715                           ;doprnt.c: 1383: else
  7716                           ;doprnt.c: 1384: width = 0;
  7717  0754  0021               	movlb	1	; select bank1
  7718  0755  01A6               	clrf	sprintf@width^(0+128)
  7719  0756  01A7               	clrf	(sprintf@width+1)^(0+128)
  7720  0757                     l3531:	
  7721                           
  7722                           ;doprnt.c: 1422: {
  7723                           ;doprnt.c: 1424: if(width
  7724                           ;doprnt.c: 1428: )
  7725  0757  0826               	movf	sprintf@width^(0+128),w
  7726  0758  0427               	iorwf	(sprintf@width+1)^(0+128),w
  7727  0759  1903               	btfsc	3,2
  7728  075A  2F72               	goto	l3539
  7729  075B                     l3533:	
  7730                           ;doprnt.c: 1429: do
  7731                           
  7732                           
  7733                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  7734  075B  3020               	movlw	32
  7735  075C  0020               	movlb	0	; select bank0
  7736  075D  00E1               	movwf	??_sprintf
  7737  075E  0021               	movlb	1	; select bank1
  7738  075F  0835               	movf	sprintf@sp^(0+128),w
  7739  0760  0086               	movwf	6
  7740  0761  0187               	clrf	7
  7741  0762  0020               	movlb	0	; select bank0
  7742  0763  0861               	movf	??_sprintf,w
  7743  0764  0081               	movwf	1
  7744  0765  3001               	movlw	1
  7745  0766  00E1               	movwf	??_sprintf
  7746  0767  0861               	movf	??_sprintf,w
  7747  0768  0021               	movlb	1	; select bank1
  7748  0769  07B5               	addwf	sprintf@sp^(0+128),f
  7749                           
  7750                           ;doprnt.c: 1431: while(--width);
  7751  076A  30FF               	movlw	255
  7752  076B  07A6               	addwf	sprintf@width^(0+128),f
  7753  076C  30FF               	movlw	255
  7754  076D  3DA7               	addwfc	(sprintf@width+1)^(0+128),f
  7755  076E  0826               	movf	sprintf@width^(0+128),w
  7756  076F  0427               	iorwf	(sprintf@width+1)^(0+128),w
  7757  0770  1D03               	btfss	3,2
  7758  0771  2F5B               	goto	l3533
  7759  0772                     l3539:	
  7760                           
  7761                           ;doprnt.c: 1438: if(flag & 0x03)
  7762  0772  3003               	movlw	3
  7763  0773  0524               	andwf	sprintf@flag^(0+128),w
  7764  0774  0020               	movlb	0	; select bank0
  7765  0775  00E1               	movwf	??_sprintf
  7766  0776  3000               	movlw	0
  7767  0777  0021               	movlb	1	; select bank1
  7768  0778  0525               	andwf	(sprintf@flag+1)^(0+128),w
  7769  0779  0020               	movlb	0	; select bank0
  7770  077A  00E2               	movwf	??_sprintf+1
  7771  077B  0861               	movf	??_sprintf,w
  7772  077C  0462               	iorwf	??_sprintf+1,w
  7773  077D  1903               	btfsc	3,2
  7774  077E  2F8D               	goto	l3551
  7775                           
  7776                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  7777  077F  302D               	movlw	45
  7778  0780                     L7:	
  7779  0780  00E1               	movwf	??_sprintf
  7780  0781  0021               	movlb	1	; select bank1
  7781  0782  0835               	movf	sprintf@sp^(0+128),w
  7782  0783  0086               	movwf	6
  7783  0784  0187               	clrf	7
  7784  0785  0020               	movlb	0	; select bank0
  7785  0786  0861               	movf	??_sprintf,w
  7786  0787  0081               	movwf	1
  7787  0788  3001               	movlw	1
  7788  0789  00E1               	movwf	??_sprintf
  7789  078A  0861               	movf	??_sprintf,w
  7790  078B  0021               	movlb	1	; select bank1
  7791  078C  07B5               	addwf	sprintf@sp^(0+128),f
  7792  078D                     l3551:	
  7793  078D  30FF               	movlw	255
  7794  078E  0021               	movlb	1	; select bank1
  7795  078F  07B6               	addwf	sprintf@prec^(0+128),f
  7796  0790  30FF               	movlw	255
  7797  0791  3DB7               	addwfc	(sprintf@prec+1)^(0+128),f
  7798  0792  0A36               	incf	sprintf@prec^(0+128),w
  7799  0793  1903               	btfsc	3,2
  7800  0794  0A37               	incf	(sprintf@prec+1)^(0+128),w
  7801  0795  1903               	btfsc	3,2
  7802  0796  28D9               	goto	l3553
  7803                           
  7804                           ;doprnt.c: 1478: {
  7805                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  7806                           
  7807                           ;doprnt.c: 1469: }
  7808                           ;doprnt.c: 1474: while(prec--) {
  7809  0797  3000               	movlw	0
  7810  0798  0020               	movlb	0	; select bank0
  7811  0799  00A3               	movwf	___llmod@divisor+3
  7812  079A  3000               	movlw	0
  7813  079B  00A2               	movwf	___llmod@divisor+2
  7814  079C  3000               	movlw	0
  7815  079D  00A1               	movwf	___llmod@divisor+1
  7816  079E  300A               	movlw	10
  7817  079F  00A0               	movwf	___llmod@divisor
  7818  07A0  0021               	movlb	1	; select bank1
  7819  07A1  0837               	movf	(sprintf@prec+1)^(0+128),w
  7820  07A2  0085               	movwf	5
  7821  07A3  0836               	movf	sprintf@prec^(0+128),w
  7822  07A4  0084               	movwf	4
  7823  07A5  3584               	lslf	4,f
  7824  07A6  0D85               	rlf	5,f
  7825  07A7  3584               	lslf	4,f
  7826  07A8  0D85               	rlf	5,f
  7827  07A9  3000               	movlw	low (_dpowers| (0+32768))
  7828  07AA  0784               	addwf	4,f
  7829  07AB  3098               	movlw	high (_dpowers| (0+32768))
  7830  07AC  3D85               	addwfc	5,f
  7831  07AD  3F00               	moviw [0]fsr0
  7832  07AE  00F0               	movwf	___lldiv@divisor
  7833  07AF  3F01               	moviw [1]fsr0
  7834  07B0  00F1               	movwf	___lldiv@divisor+1
  7835  07B1  3F02               	moviw [2]fsr0
  7836  07B2  00F2               	movwf	___lldiv@divisor+2
  7837  07B3  3F03               	moviw [3]fsr0
  7838  07B4  00F3               	movwf	___lldiv@divisor+3
  7839  07B5  082F               	movf	(sprintf@val+3)^(0+128),w
  7840  07B6  00F7               	movwf	___lldiv@dividend+3
  7841  07B7  082E               	movf	(sprintf@val+2)^(0+128),w
  7842  07B8  00F6               	movwf	___lldiv@dividend+2
  7843  07B9  082D               	movf	(sprintf@val+1)^(0+128),w
  7844  07BA  00F5               	movwf	___lldiv@dividend+1
  7845  07BB  082C               	movf	sprintf@val^(0+128),w
  7846  07BC  00F4               	movwf	___lldiv@dividend
  7847  07BD  3191  21A3  3180   	fcall	___lldiv
  7848  07C0  0873               	movf	?___lldiv+3,w
  7849  07C1  0020               	movlb	0	; select bank0
  7850  07C2  00A7               	movwf	___llmod@dividend+3
  7851  07C3  0872               	movf	?___lldiv+2,w
  7852  07C4  00A6               	movwf	___llmod@dividend+2
  7853  07C5  0871               	movf	?___lldiv+1,w
  7854  07C6  00A5               	movwf	___llmod@dividend+1
  7855  07C7  0870               	movf	?___lldiv,w
  7856  07C8  00A4               	movwf	___llmod@dividend
  7857  07C9  3191  211B  3180   	fcall	___llmod
  7858  07CC  0020               	movlb	0	; select bank0
  7859  07CD  0820               	movf	?___llmod,w
  7860  07CE  3E30               	addlw	48
  7861  07CF  00E1               	movwf	??_sprintf
  7862  07D0  0861               	movf	??_sprintf,w
  7863  07D1  0021               	movlb	1	; select bank1
  7864  07D2  00B8               	movwf	sprintf@c^(0+128)
  7865                           
  7866                           ;doprnt.c: 1523: }
  7867                           ;doprnt.c: 1524: ((*sp++ = (c)));
  7868  07D3  0838               	movf	sprintf@c^(0+128),w
  7869  07D4  0020               	movlb	0	; select bank0
  7870  07D5  2F80               	goto	L7
  7871  07D6                     l3555:	
  7872                           ;doprnt.c: 1525: }
  7873                           ;doprnt.c: 1533: }
  7874                           ;doprnt.c: 1535: alldone:
  7875                           
  7876                           
  7877                           ;doprnt.c: 1538: *sp = 0;
  7878  07D6  0835               	movf	sprintf@sp^(0+128),w
  7879  07D7  0086               	movwf	6
  7880  07D8  0187               	clrf	7
  7881  07D9  0181               	clrf	1
  7882  07DA  0008               	return
  7883  07DB                     __end_of_sprintf:	
  7884                           ;doprnt.c: 1540: return 0;
  7885                           ;	Return value of _sprintf is never used
  7886                           
  7887                           
  7888                           	psect	text2
  7889  0ABE                     __ptext2:	
  7890 ;; *************** function _scale *****************
  7891 ;; Defined at:
  7892 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\doprnt.c"
  7893 ;; Parameters:    Size  Location     Type
  7894 ;;  scl             1    wreg     char 
  7895 ;; Auto vars:     Size  Location     Type
  7896 ;;  scl             1   32[BANK0 ] char 
  7897 ;; Return value:  Size  Location     Type
  7898 ;;                  3   24[BANK0 ] char 
  7899 ;; Registers used:
  7900 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7901 ;; Tracked objects:
  7902 ;;		On entry : 0/0
  7903 ;;		On exit  : 0/0
  7904 ;;		Unchanged: 0/0
  7905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7906 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7907 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7908 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7909 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7910 ;;Total ram usage:        9 bytes
  7911 ;; Hardware stack levels used:    1
  7912 ;; Hardware stack levels required when called:    2
  7913 ;; This function calls:
  7914 ;;		___awdiv
  7915 ;;		___awmod
  7916 ;;		___ftmul
  7917 ;;		___wmul
  7918 ;; This function is called by:
  7919 ;;		_sprintf
  7920 ;; This function uses a non-reentrant model
  7921 ;;
  7922                           
  7923                           
  7924                           ;psect for function _scale
  7925  0ABE                     _scale:	
  7926                           
  7927                           ;incstack = 0
  7928                           ; Regs used in _scale: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7929                           ;scale@scl stored from wreg
  7930  0ABE  0020               	movlb	0	; select bank0
  7931  0ABF  00C0               	movwf	scale@scl
  7932                           
  7933                           ;doprnt.c: 428: if(scl < 0) {
  7934  0AC0  1FC0               	btfss	scale@scl,7
  7935  0AC1  2BE3               	goto	l2857
  7936                           
  7937                           ;doprnt.c: 429: scl = -scl;
  7938  0AC2  09C0               	comf	scale@scl,f
  7939  0AC3  0AC0               	incf	scale@scl,f
  7940                           
  7941                           ;doprnt.c: 430: if(scl>=110)
  7942  0AC4  0840               	movf	scale@scl,w
  7943  0AC5  3A80               	xorlw	128
  7944  0AC6  3E12               	addlw	-238
  7945  0AC7  1C03               	skipc
  7946  0AC8  2B67               	goto	l2847
  7947                           
  7948                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  7949  0AC9  300A               	movlw	10
  7950  0ACA  00F7               	movwf	___awdiv@divisor
  7951  0ACB  3000               	movlw	0
  7952  0ACC  00F8               	movwf	___awdiv@divisor+1
  7953  0ACD  0840               	movf	scale@scl,w
  7954  0ACE  00F2               	movwf	___awmod@dividend
  7955  0ACF  01F3               	clrf	___awmod@dividend+1
  7956  0AD0  1BF2               	btfsc	___awmod@dividend,7
  7957  0AD1  03F3               	decf	___awmod@dividend+1,f
  7958  0AD2  3064               	movlw	100
  7959  0AD3  00F0               	movwf	___awmod@divisor
  7960  0AD4  3000               	movlw	0
  7961  0AD5  00F1               	movwf	___awmod@divisor+1
  7962  0AD6  3191  215E  318A   	fcall	___awmod
  7963  0AD9  0871               	movf	?___awmod+1,w
  7964  0ADA  00FA               	movwf	___awdiv@dividend+1
  7965  0ADB  0870               	movf	?___awmod,w
  7966  0ADC  00F9               	movwf	___awdiv@dividend
  7967  0ADD  3191  21F5  318A   	fcall	___awdiv
  7968  0AE0  0877               	movf	?___awdiv,w
  7969  0AE1  3E09               	addlw	9
  7970  0AE2  0020               	movlb	0	; select bank0
  7971  0AE3  00A4               	movwf	___wmul@multiplier
  7972  0AE4  3000               	movlw	0
  7973  0AE5  3D78               	addwfc	?___awdiv+1,w
  7974  0AE6  00A5               	movwf	___wmul@multiplier+1
  7975  0AE7  3003               	movlw	3
  7976  0AE8  00A6               	movwf	___wmul@multiplicand
  7977  0AE9  3000               	movlw	0
  7978  0AEA  00A7               	movwf	___wmul@multiplicand+1
  7979  0AEB  319F  27A6  318A   	fcall	___wmul
  7980  0AEE  0020               	movlb	0	; select bank0
  7981  0AEF  0825               	movf	?___wmul+1,w
  7982  0AF0  0085               	movwf	5
  7983  0AF1  0824               	movf	?___wmul,w
  7984  0AF2  0084               	movwf	4
  7985  0AF3  3028               	movlw	low (__npowers_| (0+32768))
  7986  0AF4  0784               	addwf	4,f
  7987  0AF5  3098               	movlw	high (__npowers_| (0+32768))
  7988  0AF6  3D85               	addwfc	5,f
  7989  0AF7  3F00               	moviw [0]fsr0
  7990  0AF8  00A8               	movwf	___ftmul@f1
  7991  0AF9  3F01               	moviw [1]fsr0
  7992  0AFA  00A9               	movwf	___ftmul@f1+1
  7993  0AFB  3F02               	moviw [2]fsr0
  7994  0AFC  00AA               	movwf	___ftmul@f1+2
  7995  0AFD  3064               	movlw	100
  7996  0AFE  00F7               	movwf	___awdiv@divisor
  7997  0AFF  3000               	movlw	0
  7998  0B00  00F8               	movwf	___awdiv@divisor+1
  7999  0B01  0840               	movf	scale@scl,w
  8000  0B02  00F9               	movwf	___awdiv@dividend
  8001  0B03  01FA               	clrf	___awdiv@dividend+1
  8002  0B04  1BF9               	btfsc	___awdiv@dividend,7
  8003  0B05  03FA               	decf	___awdiv@dividend+1,f
  8004  0B06  3191  21F5  318A   	fcall	___awdiv
  8005  0B09  0877               	movf	?___awdiv,w
  8006  0B0A  3E12               	addlw	18
  8007  0B0B  0020               	movlb	0	; select bank0
  8008  0B0C  00A4               	movwf	___wmul@multiplier
  8009  0B0D  3000               	movlw	0
  8010  0B0E  3D78               	addwfc	?___awdiv+1,w
  8011  0B0F  00A5               	movwf	___wmul@multiplier+1
  8012  0B10  3003               	movlw	3
  8013  0B11  00A6               	movwf	___wmul@multiplicand
  8014  0B12  3000               	movlw	0
  8015  0B13  00A7               	movwf	___wmul@multiplicand+1
  8016  0B14  319F  27A6  318A   	fcall	___wmul
  8017  0B17  0020               	movlb	0	; select bank0
  8018  0B18  0825               	movf	?___wmul+1,w
  8019  0B19  0085               	movwf	5
  8020  0B1A  0824               	movf	?___wmul,w
  8021  0B1B  0084               	movwf	4
  8022  0B1C  3028               	movlw	low (__npowers_| (0+32768))
  8023  0B1D  0784               	addwf	4,f
  8024  0B1E  3098               	movlw	high (__npowers_| (0+32768))
  8025  0B1F  3D85               	addwfc	5,f
  8026  0B20  3F00               	moviw [0]fsr0
  8027  0B21  00AB               	movwf	___ftmul@f2
  8028  0B22  3F01               	moviw [1]fsr0
  8029  0B23  00AC               	movwf	___ftmul@f2+1
  8030  0B24  3F02               	moviw [2]fsr0
  8031  0B25  00AD               	movwf	___ftmul@f2+2
  8032  0B26  3196  2656  318A   	fcall	___ftmul
  8033  0B29  0020               	movlb	0	; select bank0
  8034  0B2A  0828               	movf	?___ftmul,w
  8035  0B2B  00BD               	movwf	_scale$1018
  8036  0B2C  0829               	movf	?___ftmul+1,w
  8037  0B2D  00BE               	movwf	_scale$1018+1
  8038  0B2E  082A               	movf	?___ftmul+2,w
  8039  0B2F  00BF               	movwf	_scale$1018+2
  8040                           
  8041                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  8042  0B30  0840               	movf	scale@scl,w
  8043  0B31  00F2               	movwf	___awmod@dividend
  8044  0B32  01F3               	clrf	___awmod@dividend+1
  8045  0B33  1BF2               	btfsc	___awmod@dividend,7
  8046  0B34  03F3               	decf	___awmod@dividend+1,f
  8047  0B35  300A               	movlw	10
  8048  0B36  00F0               	movwf	___awmod@divisor
  8049  0B37  3000               	movlw	0
  8050  0B38  00F1               	movwf	___awmod@divisor+1
  8051  0B39  3191  215E  318A   	fcall	___awmod
  8052  0B3C  0871               	movf	?___awmod+1,w
  8053  0B3D  0020               	movlb	0	; select bank0
  8054  0B3E  00A5               	movwf	___wmul@multiplier+1
  8055  0B3F  0870               	movf	?___awmod,w
  8056  0B40  00A4               	movwf	___wmul@multiplier
  8057  0B41  3003               	movlw	3
  8058  0B42  00A6               	movwf	___wmul@multiplicand
  8059  0B43  3000               	movlw	0
  8060  0B44  00A7               	movwf	___wmul@multiplicand+1
  8061  0B45  319F  27A6  318A   	fcall	___wmul
  8062  0B48  0020               	movlb	0	; select bank0
  8063  0B49  0825               	movf	?___wmul+1,w
  8064  0B4A  0085               	movwf	5
  8065  0B4B  0824               	movf	?___wmul,w
  8066  0B4C  0084               	movwf	4
  8067  0B4D  3028               	movlw	low (__npowers_| (0+32768))
  8068  0B4E  0784               	addwf	4,f
  8069  0B4F  3098               	movlw	high (__npowers_| (0+32768))
  8070  0B50  3D85               	addwfc	5,f
  8071  0B51  3F00               	moviw [0]fsr0
  8072  0B52  00A8               	movwf	___ftmul@f1
  8073  0B53  3F01               	moviw [1]fsr0
  8074  0B54  00A9               	movwf	___ftmul@f1+1
  8075  0B55  3F02               	moviw [2]fsr0
  8076  0B56  00AA               	movwf	___ftmul@f1+2
  8077  0B57  083D               	movf	_scale$1018,w
  8078  0B58  00AB               	movwf	___ftmul@f2
  8079  0B59  083E               	movf	_scale$1018+1,w
  8080  0B5A  00AC               	movwf	___ftmul@f2+1
  8081  0B5B  083F               	movf	_scale$1018+2,w
  8082  0B5C  00AD               	movwf	___ftmul@f2+2
  8083  0B5D  3196  2656         	fcall	___ftmul
  8084  0B5F  0020               	movlb	0	; select bank0
  8085  0B60  0828               	movf	?___ftmul,w
  8086  0B61  00B8               	movwf	?_scale
  8087  0B62  0829               	movf	?___ftmul+1,w
  8088  0B63  00B9               	movwf	?_scale+1
  8089  0B64  082A               	movf	?___ftmul+2,w
  8090  0B65  00BA               	movwf	?_scale+2
  8091  0B66  0008               	return
  8092  0B67                     l2847:	
  8093                           
  8094                           ;doprnt.c: 432: else if(scl > 10)
  8095  0B67  0840               	movf	scale@scl,w
  8096  0B68  3A80               	xorlw	128
  8097  0B69  3E75               	addlw	-139
  8098  0B6A  1C03               	skipc
  8099  0B6B  2BC6               	goto	l2853
  8100                           
  8101                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  8102  0B6C  0840               	movf	scale@scl,w
  8103  0B6D  00F2               	movwf	___awmod@dividend
  8104  0B6E  01F3               	clrf	___awmod@dividend+1
  8105  0B6F  1BF2               	btfsc	___awmod@dividend,7
  8106  0B70  03F3               	decf	___awmod@dividend+1,f
  8107  0B71  300A               	movlw	10
  8108  0B72  00F0               	movwf	___awmod@divisor
  8109  0B73  3000               	movlw	0
  8110  0B74  00F1               	movwf	___awmod@divisor+1
  8111  0B75  3191  215E  318A   	fcall	___awmod
  8112  0B78  0871               	movf	?___awmod+1,w
  8113  0B79  0020               	movlb	0	; select bank0
  8114  0B7A  00A5               	movwf	___wmul@multiplier+1
  8115  0B7B  0870               	movf	?___awmod,w
  8116  0B7C  00A4               	movwf	___wmul@multiplier
  8117  0B7D  3003               	movlw	3
  8118  0B7E  00A6               	movwf	___wmul@multiplicand
  8119  0B7F  3000               	movlw	0
  8120  0B80  00A7               	movwf	___wmul@multiplicand+1
  8121  0B81  319F  27A6  318A   	fcall	___wmul
  8122  0B84  0020               	movlb	0	; select bank0
  8123  0B85  0825               	movf	?___wmul+1,w
  8124  0B86  0085               	movwf	5
  8125  0B87  0824               	movf	?___wmul,w
  8126  0B88  0084               	movwf	4
  8127  0B89  3028               	movlw	low (__npowers_| (0+32768))
  8128  0B8A  0784               	addwf	4,f
  8129  0B8B  3098               	movlw	high (__npowers_| (0+32768))
  8130  0B8C  3D85               	addwfc	5,f
  8131  0B8D  3F00               	moviw [0]fsr0
  8132  0B8E  00A8               	movwf	___ftmul@f1
  8133  0B8F  3F01               	moviw [1]fsr0
  8134  0B90  00A9               	movwf	___ftmul@f1+1
  8135  0B91  3F02               	moviw [2]fsr0
  8136  0B92  00AA               	movwf	___ftmul@f1+2
  8137  0B93  300A               	movlw	10
  8138  0B94  00F7               	movwf	___awdiv@divisor
  8139  0B95  3000               	movlw	0
  8140  0B96  00F8               	movwf	___awdiv@divisor+1
  8141  0B97  0840               	movf	scale@scl,w
  8142  0B98  00F9               	movwf	___awdiv@dividend
  8143  0B99  01FA               	clrf	___awdiv@dividend+1
  8144  0B9A  1BF9               	btfsc	___awdiv@dividend,7
  8145  0B9B  03FA               	decf	___awdiv@dividend+1,f
  8146  0B9C  3191  21F5  318A   	fcall	___awdiv
  8147  0B9F  0877               	movf	?___awdiv,w
  8148  0BA0  3E09               	addlw	9
  8149  0BA1  0020               	movlb	0	; select bank0
  8150  0BA2  00A4               	movwf	___wmul@multiplier
  8151  0BA3  3000               	movlw	0
  8152  0BA4  3D78               	addwfc	?___awdiv+1,w
  8153  0BA5  00A5               	movwf	___wmul@multiplier+1
  8154  0BA6  3003               	movlw	3
  8155  0BA7  00A6               	movwf	___wmul@multiplicand
  8156  0BA8  3000               	movlw	0
  8157  0BA9  00A7               	movwf	___wmul@multiplicand+1
  8158  0BAA  319F  27A6  318A   	fcall	___wmul
  8159  0BAD  0020               	movlb	0	; select bank0
  8160  0BAE  0825               	movf	?___wmul+1,w
  8161  0BAF  0085               	movwf	5
  8162  0BB0  0824               	movf	?___wmul,w
  8163  0BB1  0084               	movwf	4
  8164  0BB2  3028               	movlw	low (__npowers_| (0+32768))
  8165  0BB3  0784               	addwf	4,f
  8166  0BB4  3098               	movlw	high (__npowers_| (0+32768))
  8167  0BB5  3D85               	addwfc	5,f
  8168  0BB6  3F00               	moviw [0]fsr0
  8169  0BB7  00AB               	movwf	___ftmul@f2
  8170  0BB8  3F01               	moviw [1]fsr0
  8171  0BB9  00AC               	movwf	___ftmul@f2+1
  8172  0BBA  3F02               	moviw [2]fsr0
  8173  0BBB  00AD               	movwf	___ftmul@f2+2
  8174  0BBC  3196  2656         	fcall	___ftmul
  8175  0BBE  0020               	movlb	0	; select bank0
  8176  0BBF  0828               	movf	?___ftmul,w
  8177  0BC0  00B8               	movwf	?_scale
  8178  0BC1  0829               	movf	?___ftmul+1,w
  8179  0BC2  00B9               	movwf	?_scale+1
  8180  0BC3  082A               	movf	?___ftmul+2,w
  8181  0BC4  00BA               	movwf	?_scale+2
  8182  0BC5  0008               	return
  8183  0BC6                     l2853:	
  8184                           
  8185                           ;doprnt.c: 434: return _npowers_[scl];
  8186  0BC6  0840               	movf	scale@scl,w
  8187  0BC7  00BB               	movwf	??_scale
  8188  0BC8  01BC               	clrf	??_scale+1
  8189  0BC9  083B               	movf	??_scale,w
  8190  0BCA  00A4               	movwf	___wmul@multiplier
  8191  0BCB  083C               	movf	??_scale+1,w
  8192  0BCC  00A5               	movwf	___wmul@multiplier+1
  8193  0BCD  3003               	movlw	3
  8194  0BCE  00A6               	movwf	___wmul@multiplicand
  8195  0BCF  3000               	movlw	0
  8196  0BD0  00A7               	movwf	___wmul@multiplicand+1
  8197  0BD1  319F  27A6         	fcall	___wmul
  8198  0BD3  0020               	movlb	0	; select bank0
  8199  0BD4  0825               	movf	?___wmul+1,w
  8200  0BD5  0085               	movwf	5
  8201  0BD6  0824               	movf	?___wmul,w
  8202  0BD7  0084               	movwf	4
  8203  0BD8  3028               	movlw	low (__npowers_| (0+32768))
  8204  0BD9  0784               	addwf	4,f
  8205  0BDA  3098               	movlw	high (__npowers_| (0+32768))
  8206  0BDB  3D85               	addwfc	5,f
  8207  0BDC  3F00               	moviw [0]fsr0
  8208  0BDD  00B8               	movwf	?_scale
  8209  0BDE  3F01               	moviw [1]fsr0
  8210  0BDF  00B9               	movwf	?_scale+1
  8211  0BE0  3F02               	moviw [2]fsr0
  8212  0BE1  00BA               	movwf	?_scale+2
  8213  0BE2  0008               	return
  8214  0BE3                     l2857:	
  8215                           
  8216                           ;doprnt.c: 435: }
  8217                           ;doprnt.c: 436: if(scl>=110)
  8218  0BE3  0840               	movf	scale@scl,w
  8219  0BE4  3A80               	xorlw	128
  8220  0BE5  3E12               	addlw	-238
  8221  0BE6  1C03               	skipc
  8222  0BE7  2C86               	goto	l2865
  8223                           
  8224                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  8225  0BE8  300A               	movlw	10
  8226  0BE9  00F7               	movwf	___awdiv@divisor
  8227  0BEA  3000               	movlw	0
  8228  0BEB  00F8               	movwf	___awdiv@divisor+1
  8229  0BEC  0840               	movf	scale@scl,w
  8230  0BED  00F2               	movwf	___awmod@dividend
  8231  0BEE  01F3               	clrf	___awmod@dividend+1
  8232  0BEF  1BF2               	btfsc	___awmod@dividend,7
  8233  0BF0  03F3               	decf	___awmod@dividend+1,f
  8234  0BF1  3064               	movlw	100
  8235  0BF2  00F0               	movwf	___awmod@divisor
  8236  0BF3  3000               	movlw	0
  8237  0BF4  00F1               	movwf	___awmod@divisor+1
  8238  0BF5  3191  215E  318A   	fcall	___awmod
  8239  0BF8  0871               	movf	?___awmod+1,w
  8240  0BF9  00FA               	movwf	___awdiv@dividend+1
  8241  0BFA  0870               	movf	?___awmod,w
  8242  0BFB  00F9               	movwf	___awdiv@dividend
  8243  0BFC  3191  21F5  318A   	fcall	___awdiv
  8244  0BFF  0877               	movf	?___awdiv,w
  8245  0C00  3E09               	addlw	9
  8246  0C01  0020               	movlb	0	; select bank0
  8247  0C02  00A4               	movwf	___wmul@multiplier
  8248  0C03  3000               	movlw	0
  8249  0C04  3D78               	addwfc	?___awdiv+1,w
  8250  0C05  00A5               	movwf	___wmul@multiplier+1
  8251  0C06  3003               	movlw	3
  8252  0C07  00A6               	movwf	___wmul@multiplicand
  8253  0C08  3000               	movlw	0
  8254  0C09  00A7               	movwf	___wmul@multiplicand+1
  8255  0C0A  319F  27A6  318A   	fcall	___wmul
  8256  0C0D  0020               	movlb	0	; select bank0
  8257  0C0E  0825               	movf	?___wmul+1,w
  8258  0C0F  0085               	movwf	5
  8259  0C10  0824               	movf	?___wmul,w
  8260  0C11  0084               	movwf	4
  8261  0C12  304F               	movlw	low (__powers_| (0+32768))
  8262  0C13  0784               	addwf	4,f
  8263  0C14  3098               	movlw	high (__powers_| (0+32768))
  8264  0C15  3D85               	addwfc	5,f
  8265  0C16  3F00               	moviw [0]fsr0
  8266  0C17  00A8               	movwf	___ftmul@f1
  8267  0C18  3F01               	moviw [1]fsr0
  8268  0C19  00A9               	movwf	___ftmul@f1+1
  8269  0C1A  3F02               	moviw [2]fsr0
  8270  0C1B  00AA               	movwf	___ftmul@f1+2
  8271  0C1C  3064               	movlw	100
  8272  0C1D  00F7               	movwf	___awdiv@divisor
  8273  0C1E  3000               	movlw	0
  8274  0C1F  00F8               	movwf	___awdiv@divisor+1
  8275  0C20  0840               	movf	scale@scl,w
  8276  0C21  00F9               	movwf	___awdiv@dividend
  8277  0C22  01FA               	clrf	___awdiv@dividend+1
  8278  0C23  1BF9               	btfsc	___awdiv@dividend,7
  8279  0C24  03FA               	decf	___awdiv@dividend+1,f
  8280  0C25  3191  21F5  318A   	fcall	___awdiv
  8281  0C28  0877               	movf	?___awdiv,w
  8282  0C29  3E12               	addlw	18
  8283  0C2A  0020               	movlb	0	; select bank0
  8284  0C2B  00A4               	movwf	___wmul@multiplier
  8285  0C2C  3000               	movlw	0
  8286  0C2D  3D78               	addwfc	?___awdiv+1,w
  8287  0C2E  00A5               	movwf	___wmul@multiplier+1
  8288  0C2F  3003               	movlw	3
  8289  0C30  00A6               	movwf	___wmul@multiplicand
  8290  0C31  3000               	movlw	0
  8291  0C32  00A7               	movwf	___wmul@multiplicand+1
  8292  0C33  319F  27A6  318A   	fcall	___wmul
  8293  0C36  0020               	movlb	0	; select bank0
  8294  0C37  0825               	movf	?___wmul+1,w
  8295  0C38  0085               	movwf	5
  8296  0C39  0824               	movf	?___wmul,w
  8297  0C3A  0084               	movwf	4
  8298  0C3B  304F               	movlw	low (__powers_| (0+32768))
  8299  0C3C  0784               	addwf	4,f
  8300  0C3D  3098               	movlw	high (__powers_| (0+32768))
  8301  0C3E  3D85               	addwfc	5,f
  8302  0C3F  3F00               	moviw [0]fsr0
  8303  0C40  00AB               	movwf	___ftmul@f2
  8304  0C41  3F01               	moviw [1]fsr0
  8305  0C42  00AC               	movwf	___ftmul@f2+1
  8306  0C43  3F02               	moviw [2]fsr0
  8307  0C44  00AD               	movwf	___ftmul@f2+2
  8308  0C45  3196  2656  318A   	fcall	___ftmul
  8309  0C48  0020               	movlb	0	; select bank0
  8310  0C49  0828               	movf	?___ftmul,w
  8311  0C4A  00BD               	movwf	_scale$1018
  8312  0C4B  0829               	movf	?___ftmul+1,w
  8313  0C4C  00BE               	movwf	_scale$1018+1
  8314  0C4D  082A               	movf	?___ftmul+2,w
  8315  0C4E  00BF               	movwf	_scale$1018+2
  8316                           
  8317                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  8318  0C4F  0840               	movf	scale@scl,w
  8319  0C50  00F2               	movwf	___awmod@dividend
  8320  0C51  01F3               	clrf	___awmod@dividend+1
  8321  0C52  1BF2               	btfsc	___awmod@dividend,7
  8322  0C53  03F3               	decf	___awmod@dividend+1,f
  8323  0C54  300A               	movlw	10
  8324  0C55  00F0               	movwf	___awmod@divisor
  8325  0C56  3000               	movlw	0
  8326  0C57  00F1               	movwf	___awmod@divisor+1
  8327  0C58  3191  215E  318A   	fcall	___awmod
  8328  0C5B  0871               	movf	?___awmod+1,w
  8329  0C5C  0020               	movlb	0	; select bank0
  8330  0C5D  00A5               	movwf	___wmul@multiplier+1
  8331  0C5E  0870               	movf	?___awmod,w
  8332  0C5F  00A4               	movwf	___wmul@multiplier
  8333  0C60  3003               	movlw	3
  8334  0C61  00A6               	movwf	___wmul@multiplicand
  8335  0C62  3000               	movlw	0
  8336  0C63  00A7               	movwf	___wmul@multiplicand+1
  8337  0C64  319F  27A6  318A   	fcall	___wmul
  8338  0C67  0020               	movlb	0	; select bank0
  8339  0C68  0825               	movf	?___wmul+1,w
  8340  0C69  0085               	movwf	5
  8341  0C6A  0824               	movf	?___wmul,w
  8342  0C6B  0084               	movwf	4
  8343  0C6C  304F               	movlw	low (__powers_| (0+32768))
  8344  0C6D  0784               	addwf	4,f
  8345  0C6E  3098               	movlw	high (__powers_| (0+32768))
  8346  0C6F  3D85               	addwfc	5,f
  8347  0C70  3F00               	moviw [0]fsr0
  8348  0C71  00A8               	movwf	___ftmul@f1
  8349  0C72  3F01               	moviw [1]fsr0
  8350  0C73  00A9               	movwf	___ftmul@f1+1
  8351  0C74  3F02               	moviw [2]fsr0
  8352  0C75  00AA               	movwf	___ftmul@f1+2
  8353  0C76  083D               	movf	_scale$1018,w
  8354  0C77  00AB               	movwf	___ftmul@f2
  8355  0C78  083E               	movf	_scale$1018+1,w
  8356  0C79  00AC               	movwf	___ftmul@f2+1
  8357  0C7A  083F               	movf	_scale$1018+2,w
  8358  0C7B  00AD               	movwf	___ftmul@f2+2
  8359  0C7C  3196  2656         	fcall	___ftmul
  8360  0C7E  0020               	movlb	0	; select bank0
  8361  0C7F  0828               	movf	?___ftmul,w
  8362  0C80  00B8               	movwf	?_scale
  8363  0C81  0829               	movf	?___ftmul+1,w
  8364  0C82  00B9               	movwf	?_scale+1
  8365  0C83  082A               	movf	?___ftmul+2,w
  8366  0C84  00BA               	movwf	?_scale+2
  8367  0C85  0008               	return
  8368  0C86                     l2865:	
  8369                           
  8370                           ;doprnt.c: 438: else if(scl > 10)
  8371  0C86  0840               	movf	scale@scl,w
  8372  0C87  3A80               	xorlw	128
  8373  0C88  3E75               	addlw	-139
  8374  0C89  1C03               	skipc
  8375  0C8A  2CE5               	goto	l2871
  8376                           
  8377                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  8378  0C8B  0840               	movf	scale@scl,w
  8379  0C8C  00F2               	movwf	___awmod@dividend
  8380  0C8D  01F3               	clrf	___awmod@dividend+1
  8381  0C8E  1BF2               	btfsc	___awmod@dividend,7
  8382  0C8F  03F3               	decf	___awmod@dividend+1,f
  8383  0C90  300A               	movlw	10
  8384  0C91  00F0               	movwf	___awmod@divisor
  8385  0C92  3000               	movlw	0
  8386  0C93  00F1               	movwf	___awmod@divisor+1
  8387  0C94  3191  215E  318A   	fcall	___awmod
  8388  0C97  0871               	movf	?___awmod+1,w
  8389  0C98  0020               	movlb	0	; select bank0
  8390  0C99  00A5               	movwf	___wmul@multiplier+1
  8391  0C9A  0870               	movf	?___awmod,w
  8392  0C9B  00A4               	movwf	___wmul@multiplier
  8393  0C9C  3003               	movlw	3
  8394  0C9D  00A6               	movwf	___wmul@multiplicand
  8395  0C9E  3000               	movlw	0
  8396  0C9F  00A7               	movwf	___wmul@multiplicand+1
  8397  0CA0  319F  27A6  318A   	fcall	___wmul
  8398  0CA3  0020               	movlb	0	; select bank0
  8399  0CA4  0825               	movf	?___wmul+1,w
  8400  0CA5  0085               	movwf	5
  8401  0CA6  0824               	movf	?___wmul,w
  8402  0CA7  0084               	movwf	4
  8403  0CA8  304F               	movlw	low (__powers_| (0+32768))
  8404  0CA9  0784               	addwf	4,f
  8405  0CAA  3098               	movlw	high (__powers_| (0+32768))
  8406  0CAB  3D85               	addwfc	5,f
  8407  0CAC  3F00               	moviw [0]fsr0
  8408  0CAD  00A8               	movwf	___ftmul@f1
  8409  0CAE  3F01               	moviw [1]fsr0
  8410  0CAF  00A9               	movwf	___ftmul@f1+1
  8411  0CB0  3F02               	moviw [2]fsr0
  8412  0CB1  00AA               	movwf	___ftmul@f1+2
  8413  0CB2  300A               	movlw	10
  8414  0CB3  00F7               	movwf	___awdiv@divisor
  8415  0CB4  3000               	movlw	0
  8416  0CB5  00F8               	movwf	___awdiv@divisor+1
  8417  0CB6  0840               	movf	scale@scl,w
  8418  0CB7  00F9               	movwf	___awdiv@dividend
  8419  0CB8  01FA               	clrf	___awdiv@dividend+1
  8420  0CB9  1BF9               	btfsc	___awdiv@dividend,7
  8421  0CBA  03FA               	decf	___awdiv@dividend+1,f
  8422  0CBB  3191  21F5  318A   	fcall	___awdiv
  8423  0CBE  0877               	movf	?___awdiv,w
  8424  0CBF  3E09               	addlw	9
  8425  0CC0  0020               	movlb	0	; select bank0
  8426  0CC1  00A4               	movwf	___wmul@multiplier
  8427  0CC2  3000               	movlw	0
  8428  0CC3  3D78               	addwfc	?___awdiv+1,w
  8429  0CC4  00A5               	movwf	___wmul@multiplier+1
  8430  0CC5  3003               	movlw	3
  8431  0CC6  00A6               	movwf	___wmul@multiplicand
  8432  0CC7  3000               	movlw	0
  8433  0CC8  00A7               	movwf	___wmul@multiplicand+1
  8434  0CC9  319F  27A6  318A   	fcall	___wmul
  8435  0CCC  0020               	movlb	0	; select bank0
  8436  0CCD  0825               	movf	?___wmul+1,w
  8437  0CCE  0085               	movwf	5
  8438  0CCF  0824               	movf	?___wmul,w
  8439  0CD0  0084               	movwf	4
  8440  0CD1  304F               	movlw	low (__powers_| (0+32768))
  8441  0CD2  0784               	addwf	4,f
  8442  0CD3  3098               	movlw	high (__powers_| (0+32768))
  8443  0CD4  3D85               	addwfc	5,f
  8444  0CD5  3F00               	moviw [0]fsr0
  8445  0CD6  00AB               	movwf	___ftmul@f2
  8446  0CD7  3F01               	moviw [1]fsr0
  8447  0CD8  00AC               	movwf	___ftmul@f2+1
  8448  0CD9  3F02               	moviw [2]fsr0
  8449  0CDA  00AD               	movwf	___ftmul@f2+2
  8450  0CDB  3196  2656         	fcall	___ftmul
  8451  0CDD  0020               	movlb	0	; select bank0
  8452  0CDE  0828               	movf	?___ftmul,w
  8453  0CDF  00B8               	movwf	?_scale
  8454  0CE0  0829               	movf	?___ftmul+1,w
  8455  0CE1  00B9               	movwf	?_scale+1
  8456  0CE2  082A               	movf	?___ftmul+2,w
  8457  0CE3  00BA               	movwf	?_scale+2
  8458  0CE4  0008               	return
  8459  0CE5                     l2871:	
  8460                           
  8461                           ;doprnt.c: 440: return _powers_[scl];
  8462  0CE5  0840               	movf	scale@scl,w
  8463  0CE6  00BB               	movwf	??_scale
  8464  0CE7  01BC               	clrf	??_scale+1
  8465  0CE8  083B               	movf	??_scale,w
  8466  0CE9  00A4               	movwf	___wmul@multiplier
  8467  0CEA  083C               	movf	??_scale+1,w
  8468  0CEB  00A5               	movwf	___wmul@multiplier+1
  8469  0CEC  3003               	movlw	3
  8470  0CED  00A6               	movwf	___wmul@multiplicand
  8471  0CEE  3000               	movlw	0
  8472  0CEF  00A7               	movwf	___wmul@multiplicand+1
  8473  0CF0  319F  27A6         	fcall	___wmul
  8474  0CF2  0020               	movlb	0	; select bank0
  8475  0CF3  0825               	movf	?___wmul+1,w
  8476  0CF4  0085               	movwf	5
  8477  0CF5  0824               	movf	?___wmul,w
  8478  0CF6  0084               	movwf	4
  8479  0CF7  304F               	movlw	low (__powers_| (0+32768))
  8480  0CF8  0784               	addwf	4,f
  8481  0CF9  3098               	movlw	high (__powers_| (0+32768))
  8482  0CFA  3D85               	addwfc	5,f
  8483  0CFB  3F00               	moviw [0]fsr0
  8484  0CFC  00B8               	movwf	?_scale
  8485  0CFD  3F01               	moviw [1]fsr0
  8486  0CFE  00B9               	movwf	?_scale+1
  8487  0CFF  3F02               	moviw [2]fsr0
  8488  0D00  00BA               	movwf	?_scale+2
  8489  0D01  0008               	return
  8490  0D02                     __end_of_scale:	
  8491                           
  8492                           	psect	text3
  8493  1F03                     __ptext3:	
  8494 ;; *************** function _isdigit *****************
  8495 ;; Defined at:
  8496 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\isdigit.c"
  8497 ;; Parameters:    Size  Location     Type
  8498 ;;  c               1    wreg     unsigned char 
  8499 ;; Auto vars:     Size  Location     Type
  8500 ;;  c               1    1[COMMON] unsigned char 
  8501 ;; Return value:  Size  Location     Type
  8502 ;;		None               void
  8503 ;; Registers used:
  8504 ;;		wreg, status,2, status,0
  8505 ;; Tracked objects:
  8506 ;;		On entry : 0/0
  8507 ;;		On exit  : 0/0
  8508 ;;		Unchanged: 0/0
  8509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8510 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8511 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8512 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8513 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8514 ;;Total ram usage:        2 bytes
  8515 ;; Hardware stack levels used:    1
  8516 ;; This function calls:
  8517 ;;		Nothing
  8518 ;; This function is called by:
  8519 ;;		_sprintf
  8520 ;; This function uses a non-reentrant model
  8521 ;;
  8522                           
  8523                           
  8524                           ;psect for function _isdigit
  8525  1F03                     _isdigit:	
  8526                           
  8527                           ;incstack = 0
  8528                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  8529                           ;isdigit@c stored from wreg
  8530  1F03  00F1               	movwf	isdigit@c
  8531  1F04  01F0               	clrf	_isdigit$733
  8532  1F05  303A               	movlw	58
  8533  1F06  0271               	subwf	isdigit@c,w
  8534  1F07  1803               	skipnc
  8535  1F08  2F0F               	goto	l2883
  8536  1F09  3030               	movlw	48
  8537  1F0A  0271               	subwf	isdigit@c,w
  8538  1F0B  1C03               	skipc
  8539  1F0C  2F0F               	goto	l2883
  8540  1F0D  01F0               	clrf	_isdigit$733
  8541  1F0E  0AF0               	incf	_isdigit$733,f
  8542  1F0F                     l2883:	
  8543  1F0F  0C70               	rrf	_isdigit$733,w
  8544  1F10  0008               	return
  8545  1F11                     __end_of_isdigit:	
  8546                           
  8547                           	psect	text4
  8548  0959                     __ptext4:	
  8549 ;; *************** function _fround *****************
  8550 ;; Defined at:
  8551 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\doprnt.c"
  8552 ;; Parameters:    Size  Location     Type
  8553 ;;  prec            1    wreg     unsigned char 
  8554 ;; Auto vars:     Size  Location     Type
  8555 ;;  prec            1   37[BANK0 ] unsigned char 
  8556 ;; Return value:  Size  Location     Type
  8557 ;;                  3   24[BANK0 ] unsigned char 
  8558 ;; Registers used:
  8559 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8560 ;; Tracked objects:
  8561 ;;		On entry : 0/0
  8562 ;;		On exit  : 0/0
  8563 ;;		Unchanged: 0/0
  8564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8565 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8566 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8567 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8568 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8569 ;;Total ram usage:       14 bytes
  8570 ;; Hardware stack levels used:    1
  8571 ;; Hardware stack levels required when called:    2
  8572 ;; This function calls:
  8573 ;;		___awdiv
  8574 ;;		___awmod
  8575 ;;		___ftmul
  8576 ;;		___wmul
  8577 ;; This function is called by:
  8578 ;;		_sprintf
  8579 ;; This function uses a non-reentrant model
  8580 ;;
  8581                           
  8582                           
  8583                           ;psect for function _fround
  8584  0959                     _fround:	
  8585                           
  8586                           ;incstack = 0
  8587                           ; Regs used in _fround: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8588                           ;fround@prec stored from wreg
  8589  0959  0020               	movlb	0	; select bank0
  8590  095A  00C5               	movwf	fround@prec
  8591                           
  8592                           ;doprnt.c: 413: if(prec>=110)
  8593  095B  306E               	movlw	110
  8594  095C  0245               	subwf	fround@prec,w
  8595  095D  1C03               	skipc
  8596  095E  2A19               	goto	l2823
  8597                           
  8598                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  8599  095F  300A               	movlw	10
  8600  0960  00F7               	movwf	___awdiv@divisor
  8601  0961  3000               	movlw	0
  8602  0962  00F8               	movwf	___awdiv@divisor+1
  8603  0963  0845               	movf	fround@prec,w
  8604  0964  00BB               	movwf	??_fround
  8605  0965  01BC               	clrf	??_fround+1
  8606  0966  083B               	movf	??_fround,w
  8607  0967  00F2               	movwf	___awmod@dividend
  8608  0968  083C               	movf	??_fround+1,w
  8609  0969  00F3               	movwf	___awmod@dividend+1
  8610  096A  3064               	movlw	100
  8611  096B  00F0               	movwf	___awmod@divisor
  8612  096C  3000               	movlw	0
  8613  096D  00F1               	movwf	___awmod@divisor+1
  8614  096E  3191  215E  3189   	fcall	___awmod
  8615  0971  0871               	movf	?___awmod+1,w
  8616  0972  00FA               	movwf	___awdiv@dividend+1
  8617  0973  0870               	movf	?___awmod,w
  8618  0974  00F9               	movwf	___awdiv@dividend
  8619  0975  3191  21F5  3189   	fcall	___awdiv
  8620  0978  0877               	movf	?___awdiv,w
  8621  0979  3E09               	addlw	9
  8622  097A  0020               	movlb	0	; select bank0
  8623  097B  00A4               	movwf	___wmul@multiplier
  8624  097C  3000               	movlw	0
  8625  097D  3D78               	addwfc	?___awdiv+1,w
  8626  097E  00A5               	movwf	___wmul@multiplier+1
  8627  097F  3003               	movlw	3
  8628  0980  00A6               	movwf	___wmul@multiplicand
  8629  0981  3000               	movlw	0
  8630  0982  00A7               	movwf	___wmul@multiplicand+1
  8631  0983  319F  27A6  3189   	fcall	___wmul
  8632  0986  0020               	movlb	0	; select bank0
  8633  0987  0825               	movf	?___wmul+1,w
  8634  0988  0085               	movwf	5
  8635  0989  0824               	movf	?___wmul,w
  8636  098A  0084               	movwf	4
  8637  098B  3028               	movlw	low (__npowers_| (0+32768))
  8638  098C  0784               	addwf	4,f
  8639  098D  3098               	movlw	high (__npowers_| (0+32768))
  8640  098E  3D85               	addwfc	5,f
  8641  098F  3F00               	moviw [0]fsr0
  8642  0990  00A8               	movwf	___ftmul@f1
  8643  0991  3F01               	moviw [1]fsr0
  8644  0992  00A9               	movwf	___ftmul@f1+1
  8645  0993  3F02               	moviw [2]fsr0
  8646  0994  00AA               	movwf	___ftmul@f1+2
  8647  0995  3064               	movlw	100
  8648  0996  00F7               	movwf	___awdiv@divisor
  8649  0997  3000               	movlw	0
  8650  0998  00F8               	movwf	___awdiv@divisor+1
  8651  0999  0845               	movf	fround@prec,w
  8652  099A  00BD               	movwf	??_fround+2
  8653  099B  01BE               	clrf	??_fround+3
  8654  099C  083D               	movf	??_fround+2,w
  8655  099D  00F9               	movwf	___awdiv@dividend
  8656  099E  083E               	movf	??_fround+3,w
  8657  099F  00FA               	movwf	___awdiv@dividend+1
  8658  09A0  3191  21F5  3189   	fcall	___awdiv
  8659  09A3  0877               	movf	?___awdiv,w
  8660  09A4  3E12               	addlw	18
  8661  09A5  0020               	movlb	0	; select bank0
  8662  09A6  00A4               	movwf	___wmul@multiplier
  8663  09A7  3000               	movlw	0
  8664  09A8  3D78               	addwfc	?___awdiv+1,w
  8665  09A9  00A5               	movwf	___wmul@multiplier+1
  8666  09AA  3003               	movlw	3
  8667  09AB  00A6               	movwf	___wmul@multiplicand
  8668  09AC  3000               	movlw	0
  8669  09AD  00A7               	movwf	___wmul@multiplicand+1
  8670  09AE  319F  27A6  3189   	fcall	___wmul
  8671  09B1  0020               	movlb	0	; select bank0
  8672  09B2  0825               	movf	?___wmul+1,w
  8673  09B3  0085               	movwf	5
  8674  09B4  0824               	movf	?___wmul,w
  8675  09B5  0084               	movwf	4
  8676  09B6  3028               	movlw	low (__npowers_| (0+32768))
  8677  09B7  0784               	addwf	4,f
  8678  09B8  3098               	movlw	high (__npowers_| (0+32768))
  8679  09B9  3D85               	addwfc	5,f
  8680  09BA  3F00               	moviw [0]fsr0
  8681  09BB  00AB               	movwf	___ftmul@f2
  8682  09BC  3F01               	moviw [1]fsr0
  8683  09BD  00AC               	movwf	___ftmul@f2+1
  8684  09BE  3F02               	moviw [2]fsr0
  8685  09BF  00AD               	movwf	___ftmul@f2+2
  8686  09C0  3196  2656  3189   	fcall	___ftmul
  8687  09C3  0020               	movlb	0	; select bank0
  8688  09C4  0828               	movf	?___ftmul,w
  8689  09C5  00C2               	movwf	_fround$1016
  8690  09C6  0829               	movf	?___ftmul+1,w
  8691  09C7  00C3               	movwf	_fround$1016+1
  8692  09C8  082A               	movf	?___ftmul+2,w
  8693  09C9  00C4               	movwf	_fround$1016+2
  8694                           
  8695                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  8696  09CA  0845               	movf	fround@prec,w
  8697  09CB  00BB               	movwf	??_fround
  8698  09CC  01BC               	clrf	??_fround+1
  8699  09CD  083B               	movf	??_fround,w
  8700  09CE  00F2               	movwf	___awmod@dividend
  8701  09CF  083C               	movf	??_fround+1,w
  8702  09D0  00F3               	movwf	___awmod@dividend+1
  8703  09D1  300A               	movlw	10
  8704  09D2  00F0               	movwf	___awmod@divisor
  8705  09D3  3000               	movlw	0
  8706  09D4  00F1               	movwf	___awmod@divisor+1
  8707  09D5  3191  215E  3189   	fcall	___awmod
  8708  09D8  0871               	movf	?___awmod+1,w
  8709  09D9  0020               	movlb	0	; select bank0
  8710  09DA  00A5               	movwf	___wmul@multiplier+1
  8711  09DB  0870               	movf	?___awmod,w
  8712  09DC  00A4               	movwf	___wmul@multiplier
  8713  09DD  3003               	movlw	3
  8714  09DE  00A6               	movwf	___wmul@multiplicand
  8715  09DF  3000               	movlw	0
  8716  09E0  00A7               	movwf	___wmul@multiplicand+1
  8717  09E1  319F  27A6  3189   	fcall	___wmul
  8718  09E4  0020               	movlb	0	; select bank0
  8719  09E5  0825               	movf	?___wmul+1,w
  8720  09E6  0085               	movwf	5
  8721  09E7  0824               	movf	?___wmul,w
  8722  09E8  0084               	movwf	4
  8723  09E9  3028               	movlw	low (__npowers_| (0+32768))
  8724  09EA  0784               	addwf	4,f
  8725  09EB  3098               	movlw	high (__npowers_| (0+32768))
  8726  09EC  3D85               	addwfc	5,f
  8727  09ED  3F00               	moviw [0]fsr0
  8728  09EE  00A8               	movwf	___ftmul@f1
  8729  09EF  3F01               	moviw [1]fsr0
  8730  09F0  00A9               	movwf	___ftmul@f1+1
  8731  09F1  3F02               	moviw [2]fsr0
  8732  09F2  00AA               	movwf	___ftmul@f1+2
  8733  09F3  0842               	movf	_fround$1016,w
  8734  09F4  00AB               	movwf	___ftmul@f2
  8735  09F5  0843               	movf	_fround$1016+1,w
  8736  09F6  00AC               	movwf	___ftmul@f2+1
  8737  09F7  0844               	movf	_fround$1016+2,w
  8738  09F8  00AD               	movwf	___ftmul@f2+2
  8739  09F9  3196  2656  3189   	fcall	___ftmul
  8740  09FC  0020               	movlb	0	; select bank0
  8741  09FD  0828               	movf	?___ftmul,w
  8742  09FE  00BF               	movwf	_fround$1017
  8743  09FF  0829               	movf	?___ftmul+1,w
  8744  0A00  00C0               	movwf	_fround$1017+1
  8745  0A01  082A               	movf	?___ftmul+2,w
  8746  0A02  00C1               	movwf	_fround$1017+2
  8747                           
  8748                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  8749  0A03  3000               	movlw	0
  8750  0A04  00A8               	movwf	___ftmul@f1
  8751  0A05  3000               	movlw	0
  8752  0A06  00A9               	movwf	___ftmul@f1+1
  8753  0A07  303F               	movlw	63
  8754  0A08  00AA               	movwf	___ftmul@f1+2
  8755  0A09  083F               	movf	_fround$1017,w
  8756  0A0A  00AB               	movwf	___ftmul@f2
  8757  0A0B  0840               	movf	_fround$1017+1,w
  8758  0A0C  00AC               	movwf	___ftmul@f2+1
  8759  0A0D  0841               	movf	_fround$1017+2,w
  8760  0A0E  00AD               	movwf	___ftmul@f2+2
  8761  0A0F  3196  2656         	fcall	___ftmul
  8762  0A11  0020               	movlb	0	; select bank0
  8763  0A12  0828               	movf	?___ftmul,w
  8764  0A13  00B8               	movwf	?_fround
  8765  0A14  0829               	movf	?___ftmul+1,w
  8766  0A15  00B9               	movwf	?_fround+1
  8767  0A16  082A               	movf	?___ftmul+2,w
  8768  0A17  00BA               	movwf	?_fround+2
  8769  0A18  0008               	return
  8770  0A19                     l2823:	
  8771                           
  8772                           ;doprnt.c: 415: else if(prec > 10)
  8773  0A19  300B               	movlw	11
  8774  0A1A  0245               	subwf	fround@prec,w
  8775  0A1B  1C03               	skipc
  8776  0A1C  2A91               	goto	l2831
  8777                           
  8778                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  8779  0A1D  0845               	movf	fround@prec,w
  8780  0A1E  00BB               	movwf	??_fround
  8781  0A1F  01BC               	clrf	??_fround+1
  8782  0A20  083B               	movf	??_fround,w
  8783  0A21  00F2               	movwf	___awmod@dividend
  8784  0A22  083C               	movf	??_fround+1,w
  8785  0A23  00F3               	movwf	___awmod@dividend+1
  8786  0A24  300A               	movlw	10
  8787  0A25  00F0               	movwf	___awmod@divisor
  8788  0A26  3000               	movlw	0
  8789  0A27  00F1               	movwf	___awmod@divisor+1
  8790  0A28  3191  215E  3189   	fcall	___awmod
  8791  0A2B  0871               	movf	?___awmod+1,w
  8792  0A2C  0020               	movlb	0	; select bank0
  8793  0A2D  00A5               	movwf	___wmul@multiplier+1
  8794  0A2E  0870               	movf	?___awmod,w
  8795  0A2F  00A4               	movwf	___wmul@multiplier
  8796  0A30  3003               	movlw	3
  8797  0A31  00A6               	movwf	___wmul@multiplicand
  8798  0A32  3000               	movlw	0
  8799  0A33  00A7               	movwf	___wmul@multiplicand+1
  8800  0A34  319F  27A6  3189   	fcall	___wmul
  8801  0A37  0020               	movlb	0	; select bank0
  8802  0A38  0825               	movf	?___wmul+1,w
  8803  0A39  0085               	movwf	5
  8804  0A3A  0824               	movf	?___wmul,w
  8805  0A3B  0084               	movwf	4
  8806  0A3C  3028               	movlw	low (__npowers_| (0+32768))
  8807  0A3D  0784               	addwf	4,f
  8808  0A3E  3098               	movlw	high (__npowers_| (0+32768))
  8809  0A3F  3D85               	addwfc	5,f
  8810  0A40  3F00               	moviw [0]fsr0
  8811  0A41  00A8               	movwf	___ftmul@f1
  8812  0A42  3F01               	moviw [1]fsr0
  8813  0A43  00A9               	movwf	___ftmul@f1+1
  8814  0A44  3F02               	moviw [2]fsr0
  8815  0A45  00AA               	movwf	___ftmul@f1+2
  8816  0A46  300A               	movlw	10
  8817  0A47  00F7               	movwf	___awdiv@divisor
  8818  0A48  3000               	movlw	0
  8819  0A49  00F8               	movwf	___awdiv@divisor+1
  8820  0A4A  0845               	movf	fround@prec,w
  8821  0A4B  00BD               	movwf	??_fround+2
  8822  0A4C  01BE               	clrf	??_fround+3
  8823  0A4D  083D               	movf	??_fround+2,w
  8824  0A4E  00F9               	movwf	___awdiv@dividend
  8825  0A4F  083E               	movf	??_fround+3,w
  8826  0A50  00FA               	movwf	___awdiv@dividend+1
  8827  0A51  3191  21F5  3189   	fcall	___awdiv
  8828  0A54  0877               	movf	?___awdiv,w
  8829  0A55  3E09               	addlw	9
  8830  0A56  0020               	movlb	0	; select bank0
  8831  0A57  00A4               	movwf	___wmul@multiplier
  8832  0A58  3000               	movlw	0
  8833  0A59  3D78               	addwfc	?___awdiv+1,w
  8834  0A5A  00A5               	movwf	___wmul@multiplier+1
  8835  0A5B  3003               	movlw	3
  8836  0A5C  00A6               	movwf	___wmul@multiplicand
  8837  0A5D  3000               	movlw	0
  8838  0A5E  00A7               	movwf	___wmul@multiplicand+1
  8839  0A5F  319F  27A6  3189   	fcall	___wmul
  8840  0A62  0020               	movlb	0	; select bank0
  8841  0A63  0825               	movf	?___wmul+1,w
  8842  0A64  0085               	movwf	5
  8843  0A65  0824               	movf	?___wmul,w
  8844  0A66  0084               	movwf	4
  8845  0A67  3028               	movlw	low (__npowers_| (0+32768))
  8846  0A68  0784               	addwf	4,f
  8847  0A69  3098               	movlw	high (__npowers_| (0+32768))
  8848  0A6A  3D85               	addwfc	5,f
  8849  0A6B  3F00               	moviw [0]fsr0
  8850  0A6C  00AB               	movwf	___ftmul@f2
  8851  0A6D  3F01               	moviw [1]fsr0
  8852  0A6E  00AC               	movwf	___ftmul@f2+1
  8853  0A6F  3F02               	moviw [2]fsr0
  8854  0A70  00AD               	movwf	___ftmul@f2+2
  8855  0A71  3196  2656  3189   	fcall	___ftmul
  8856  0A74  0020               	movlb	0	; select bank0
  8857  0A75  0828               	movf	?___ftmul,w
  8858  0A76  00C2               	movwf	_fround$1016
  8859  0A77  0829               	movf	?___ftmul+1,w
  8860  0A78  00C3               	movwf	_fround$1016+1
  8861  0A79  082A               	movf	?___ftmul+2,w
  8862  0A7A  00C4               	movwf	_fround$1016+2
  8863                           
  8864                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  8865  0A7B  3000               	movlw	0
  8866  0A7C  00A8               	movwf	___ftmul@f1
  8867  0A7D  3000               	movlw	0
  8868  0A7E  00A9               	movwf	___ftmul@f1+1
  8869  0A7F  303F               	movlw	63
  8870  0A80  00AA               	movwf	___ftmul@f1+2
  8871  0A81  0842               	movf	_fround$1016,w
  8872  0A82  00AB               	movwf	___ftmul@f2
  8873  0A83  0843               	movf	_fround$1016+1,w
  8874  0A84  00AC               	movwf	___ftmul@f2+1
  8875  0A85  0844               	movf	_fround$1016+2,w
  8876  0A86  00AD               	movwf	___ftmul@f2+2
  8877  0A87  3196  2656         	fcall	___ftmul
  8878  0A89  0020               	movlb	0	; select bank0
  8879  0A8A  0828               	movf	?___ftmul,w
  8880  0A8B  00B8               	movwf	?_fround
  8881  0A8C  0829               	movf	?___ftmul+1,w
  8882  0A8D  00B9               	movwf	?_fround+1
  8883  0A8E  082A               	movf	?___ftmul+2,w
  8884  0A8F  00BA               	movwf	?_fround+2
  8885  0A90  0008               	return
  8886  0A91                     l2831:	
  8887                           
  8888                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  8889  0A91  3000               	movlw	0
  8890  0A92  00A8               	movwf	___ftmul@f1
  8891  0A93  3000               	movlw	0
  8892  0A94  00A9               	movwf	___ftmul@f1+1
  8893  0A95  303F               	movlw	63
  8894  0A96  00AA               	movwf	___ftmul@f1+2
  8895  0A97  0845               	movf	fround@prec,w
  8896  0A98  00BB               	movwf	??_fround
  8897  0A99  01BC               	clrf	??_fround+1
  8898  0A9A  083B               	movf	??_fround,w
  8899  0A9B  00A4               	movwf	___wmul@multiplier
  8900  0A9C  083C               	movf	??_fround+1,w
  8901  0A9D  00A5               	movwf	___wmul@multiplier+1
  8902  0A9E  3003               	movlw	3
  8903  0A9F  00A6               	movwf	___wmul@multiplicand
  8904  0AA0  3000               	movlw	0
  8905  0AA1  00A7               	movwf	___wmul@multiplicand+1
  8906  0AA2  319F  27A6  3189   	fcall	___wmul
  8907  0AA5  0020               	movlb	0	; select bank0
  8908  0AA6  0825               	movf	?___wmul+1,w
  8909  0AA7  0085               	movwf	5
  8910  0AA8  0824               	movf	?___wmul,w
  8911  0AA9  0084               	movwf	4
  8912  0AAA  3028               	movlw	low (__npowers_| (0+32768))
  8913  0AAB  0784               	addwf	4,f
  8914  0AAC  3098               	movlw	high (__npowers_| (0+32768))
  8915  0AAD  3D85               	addwfc	5,f
  8916  0AAE  3F00               	moviw [0]fsr0
  8917  0AAF  00AB               	movwf	___ftmul@f2
  8918  0AB0  3F01               	moviw [1]fsr0
  8919  0AB1  00AC               	movwf	___ftmul@f2+1
  8920  0AB2  3F02               	moviw [2]fsr0
  8921  0AB3  00AD               	movwf	___ftmul@f2+2
  8922  0AB4  3196  2656         	fcall	___ftmul
  8923  0AB6  0020               	movlb	0	; select bank0
  8924  0AB7  0828               	movf	?___ftmul,w
  8925  0AB8  00B8               	movwf	?_fround
  8926  0AB9  0829               	movf	?___ftmul+1,w
  8927  0ABA  00B9               	movwf	?_fround+1
  8928  0ABB  082A               	movf	?___ftmul+2,w
  8929  0ABC  00BA               	movwf	?_fround+2
  8930  0ABD  0008               	return
  8931  0ABE                     __end_of_fround:	
  8932                           
  8933                           	psect	text5
  8934  115E                     __ptext5:	
  8935 ;; *************** function ___awmod *****************
  8936 ;; Defined at:
  8937 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awmod.c"
  8938 ;; Parameters:    Size  Location     Type
  8939 ;;  divisor         2    0[COMMON] int 
  8940 ;;  dividend        2    2[COMMON] int 
  8941 ;; Auto vars:     Size  Location     Type
  8942 ;;  sign            1    6[COMMON] unsigned char 
  8943 ;;  counter         1    5[COMMON] unsigned char 
  8944 ;; Return value:  Size  Location     Type
  8945 ;;                  2    0[COMMON] int 
  8946 ;; Registers used:
  8947 ;;		wreg, status,2, status,0
  8948 ;; Tracked objects:
  8949 ;;		On entry : 0/0
  8950 ;;		On exit  : 0/0
  8951 ;;		Unchanged: 0/0
  8952 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8953 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8954 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8955 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8956 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8957 ;;Total ram usage:        7 bytes
  8958 ;; Hardware stack levels used:    1
  8959 ;; This function calls:
  8960 ;;		Nothing
  8961 ;; This function is called by:
  8962 ;;		_fround
  8963 ;;		_scale
  8964 ;;		_LCD_Write_Int
  8965 ;; This function uses a non-reentrant model
  8966 ;;
  8967                           
  8968                           
  8969                           ;psect for function ___awmod
  8970  115E                     ___awmod:	
  8971                           
  8972                           ;incstack = 0
  8973                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  8974  115E  01F6               	clrf	___awmod@sign
  8975  115F  1FF3               	btfss	___awmod@dividend+1,7
  8976  1160  2968               	goto	l2533
  8977  1161  09F2               	comf	___awmod@dividend,f
  8978  1162  09F3               	comf	___awmod@dividend+1,f
  8979  1163  0AF2               	incf	___awmod@dividend,f
  8980  1164  1903               	skipnz
  8981  1165  0AF3               	incf	___awmod@dividend+1,f
  8982  1166  01F6               	clrf	___awmod@sign
  8983  1167  0AF6               	incf	___awmod@sign,f
  8984  1168                     l2533:	
  8985  1168  1FF1               	btfss	___awmod@divisor+1,7
  8986  1169  296F               	goto	l2537
  8987  116A  09F0               	comf	___awmod@divisor,f
  8988  116B  09F1               	comf	___awmod@divisor+1,f
  8989  116C  0AF0               	incf	___awmod@divisor,f
  8990  116D  1903               	skipnz
  8991  116E  0AF1               	incf	___awmod@divisor+1,f
  8992  116F                     l2537:	
  8993  116F  0870               	movf	___awmod@divisor,w
  8994  1170  0471               	iorwf	___awmod@divisor+1,w
  8995  1171  1903               	btfsc	3,2
  8996  1172  2996               	goto	l2555
  8997  1173  01F5               	clrf	___awmod@counter
  8998  1174  0AF5               	incf	___awmod@counter,f
  8999  1175                     l2545:	
  9000  1175  1BF1               	btfsc	___awmod@divisor+1,7
  9001  1176  2981               	goto	l2547
  9002  1177  3001               	movlw	1
  9003  1178                     u2825:	
  9004  1178  35F0               	lslf	___awmod@divisor,f
  9005  1179  0DF1               	rlf	___awmod@divisor+1,f
  9006  117A  0B89               	decfsz	9,f
  9007  117B  2978               	goto	u2825
  9008  117C  3001               	movlw	1
  9009  117D  00F4               	movwf	??___awmod
  9010  117E  0874               	movf	??___awmod,w
  9011  117F  07F5               	addwf	___awmod@counter,f
  9012  1180  2975               	goto	l2545
  9013  1181                     l2547:	
  9014  1181  0871               	movf	___awmod@divisor+1,w
  9015  1182  0273               	subwf	___awmod@dividend+1,w
  9016  1183  1D03               	skipz
  9017  1184  2987               	goto	u2845
  9018  1185  0870               	movf	___awmod@divisor,w
  9019  1186  0272               	subwf	___awmod@dividend,w
  9020  1187                     u2845:	
  9021  1187  1C03               	skipc
  9022  1188  298D               	goto	l2551
  9023  1189  0870               	movf	___awmod@divisor,w
  9024  118A  02F2               	subwf	___awmod@dividend,f
  9025  118B  0871               	movf	___awmod@divisor+1,w
  9026  118C  3BF3               	subwfb	___awmod@dividend+1,f
  9027  118D                     l2551:	
  9028  118D  3001               	movlw	1
  9029  118E                     u2855:	
  9030  118E  36F1               	lsrf	___awmod@divisor+1,f
  9031  118F  0CF0               	rrf	___awmod@divisor,f
  9032  1190  0B89               	decfsz	9,f
  9033  1191  298E               	goto	u2855
  9034  1192  3001               	movlw	1
  9035  1193  02F5               	subwf	___awmod@counter,f
  9036  1194  1D03               	btfss	3,2
  9037  1195  2981               	goto	l2547
  9038  1196                     l2555:	
  9039  1196  0876               	movf	___awmod@sign,w
  9040  1197  1903               	btfsc	3,2
  9041  1198  299E               	goto	l2559
  9042  1199  09F2               	comf	___awmod@dividend,f
  9043  119A  09F3               	comf	___awmod@dividend+1,f
  9044  119B  0AF2               	incf	___awmod@dividend,f
  9045  119C  1903               	skipnz
  9046  119D  0AF3               	incf	___awmod@dividend+1,f
  9047  119E                     l2559:	
  9048  119E  0873               	movf	___awmod@dividend+1,w
  9049  119F  00F1               	movwf	?___awmod+1
  9050  11A0  0872               	movf	___awmod@dividend,w
  9051  11A1  00F0               	movwf	?___awmod
  9052  11A2  0008               	return
  9053  11A3                     __end_of___awmod:	
  9054                           
  9055                           	psect	text6
  9056  11F5                     __ptext6:	
  9057 ;; *************** function ___awdiv *****************
  9058 ;; Defined at:
  9059 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awdiv.c"
  9060 ;; Parameters:    Size  Location     Type
  9061 ;;  divisor         2    7[COMMON] int 
  9062 ;;  dividend        2    9[COMMON] int 
  9063 ;; Auto vars:     Size  Location     Type
  9064 ;;  quotient        2    2[BANK0 ] int 
  9065 ;;  sign            1    1[BANK0 ] unsigned char 
  9066 ;;  counter         1    0[BANK0 ] unsigned char 
  9067 ;; Return value:  Size  Location     Type
  9068 ;;                  2    7[COMMON] int 
  9069 ;; Registers used:
  9070 ;;		wreg, status,2, status,0
  9071 ;; Tracked objects:
  9072 ;;		On entry : 0/0
  9073 ;;		On exit  : 0/0
  9074 ;;		Unchanged: 0/0
  9075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9076 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9077 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9078 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9079 ;;      Totals:         5       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9080 ;;Total ram usage:        9 bytes
  9081 ;; Hardware stack levels used:    1
  9082 ;; This function calls:
  9083 ;;		Nothing
  9084 ;; This function is called by:
  9085 ;;		_fround
  9086 ;;		_scale
  9087 ;;		_sprintf
  9088 ;;		_LCD_Write_Int
  9089 ;; This function uses a non-reentrant model
  9090 ;;
  9091                           
  9092                           
  9093                           ;psect for function ___awdiv
  9094  11F5                     ___awdiv:	
  9095                           
  9096                           ;incstack = 0
  9097                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  9098  11F5  0020               	movlb	0	; select bank0
  9099  11F6  01A1               	clrf	___awdiv@sign
  9100  11F7  1FF8               	btfss	___awdiv@divisor+1,7
  9101  11F8  2A00               	goto	l2489
  9102  11F9  09F7               	comf	___awdiv@divisor,f
  9103  11FA  09F8               	comf	___awdiv@divisor+1,f
  9104  11FB  0AF7               	incf	___awdiv@divisor,f
  9105  11FC  1903               	skipnz
  9106  11FD  0AF8               	incf	___awdiv@divisor+1,f
  9107  11FE  01A1               	clrf	___awdiv@sign
  9108  11FF  0AA1               	incf	___awdiv@sign,f
  9109  1200                     l2489:	
  9110  1200  1FFA               	btfss	___awdiv@dividend+1,7
  9111  1201  2A0B               	goto	l2495
  9112  1202  09F9               	comf	___awdiv@dividend,f
  9113  1203  09FA               	comf	___awdiv@dividend+1,f
  9114  1204  0AF9               	incf	___awdiv@dividend,f
  9115  1205  1903               	skipnz
  9116  1206  0AFA               	incf	___awdiv@dividend+1,f
  9117  1207  3001               	movlw	1
  9118  1208  00FB               	movwf	??___awdiv
  9119  1209  087B               	movf	??___awdiv,w
  9120  120A  06A1               	xorwf	___awdiv@sign,f
  9121  120B                     l2495:	
  9122  120B  01A2               	clrf	___awdiv@quotient
  9123  120C  01A3               	clrf	___awdiv@quotient+1
  9124  120D  0877               	movf	___awdiv@divisor,w
  9125  120E  0478               	iorwf	___awdiv@divisor+1,w
  9126  120F  1903               	btfsc	3,2
  9127  1210  2A3A               	goto	l2517
  9128  1211  01A0               	clrf	___awdiv@counter
  9129  1212  0AA0               	incf	___awdiv@counter,f
  9130  1213                     l2505:	
  9131  1213  1BF8               	btfsc	___awdiv@divisor+1,7
  9132  1214  2A1F               	goto	l2507
  9133  1215  3001               	movlw	1
  9134  1216                     u2725:	
  9135  1216  35F7               	lslf	___awdiv@divisor,f
  9136  1217  0DF8               	rlf	___awdiv@divisor+1,f
  9137  1218  0B89               	decfsz	9,f
  9138  1219  2A16               	goto	u2725
  9139  121A  3001               	movlw	1
  9140  121B  00FB               	movwf	??___awdiv
  9141  121C  087B               	movf	??___awdiv,w
  9142  121D  07A0               	addwf	___awdiv@counter,f
  9143  121E  2A13               	goto	l2505
  9144  121F                     l2507:	
  9145  121F  3001               	movlw	1
  9146  1220                     u2745:	
  9147  1220  35A2               	lslf	___awdiv@quotient,f
  9148  1221  0DA3               	rlf	___awdiv@quotient+1,f
  9149  1222  0B89               	decfsz	9,f
  9150  1223  2A20               	goto	u2745
  9151  1224  0878               	movf	___awdiv@divisor+1,w
  9152  1225  027A               	subwf	___awdiv@dividend+1,w
  9153  1226  1D03               	skipz
  9154  1227  2A2A               	goto	u2755
  9155  1228  0877               	movf	___awdiv@divisor,w
  9156  1229  0279               	subwf	___awdiv@dividend,w
  9157  122A                     u2755:	
  9158  122A  1C03               	skipc
  9159  122B  2A31               	goto	l2513
  9160  122C  0877               	movf	___awdiv@divisor,w
  9161  122D  02F9               	subwf	___awdiv@dividend,f
  9162  122E  0878               	movf	___awdiv@divisor+1,w
  9163  122F  3BFA               	subwfb	___awdiv@dividend+1,f
  9164  1230  1422               	bsf	___awdiv@quotient,0
  9165  1231                     l2513:	
  9166  1231  3001               	movlw	1
  9167  1232                     u2765:	
  9168  1232  36F8               	lsrf	___awdiv@divisor+1,f
  9169  1233  0CF7               	rrf	___awdiv@divisor,f
  9170  1234  0B89               	decfsz	9,f
  9171  1235  2A32               	goto	u2765
  9172  1236  3001               	movlw	1
  9173  1237  02A0               	subwf	___awdiv@counter,f
  9174  1238  1D03               	btfss	3,2
  9175  1239  2A1F               	goto	l2507
  9176  123A                     l2517:	
  9177  123A  0821               	movf	___awdiv@sign,w
  9178  123B  1903               	btfsc	3,2
  9179  123C  2A42               	goto	l2521
  9180  123D  09A2               	comf	___awdiv@quotient,f
  9181  123E  09A3               	comf	___awdiv@quotient+1,f
  9182  123F  0AA2               	incf	___awdiv@quotient,f
  9183  1240  1903               	skipnz
  9184  1241  0AA3               	incf	___awdiv@quotient+1,f
  9185  1242                     l2521:	
  9186  1242  0823               	movf	___awdiv@quotient+1,w
  9187  1243  00F8               	movwf	?___awdiv+1
  9188  1244  0822               	movf	___awdiv@quotient,w
  9189  1245  00F7               	movwf	?___awdiv
  9190  1246  0008               	return
  9191  1247                     __end_of___awdiv:	
  9192                           
  9193                           	psect	text7
  9194  001B                     __ptext7:	
  9195 ;; *************** function __tdiv_to_l_ *****************
  9196 ;; Defined at:
  9197 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftdivl.c"
  9198 ;; Parameters:    Size  Location     Type
  9199 ;;  f1              3    0[COMMON] float 
  9200 ;;  f2              3    3[COMMON] float 
  9201 ;; Auto vars:     Size  Location     Type
  9202 ;;  quot            4    0[BANK0 ] unsigned long 
  9203 ;;  exp1            1    5[BANK0 ] unsigned char 
  9204 ;;  cntr            1    4[BANK0 ] unsigned char 
  9205 ;; Return value:  Size  Location     Type
  9206 ;;                  4    0[COMMON] unsigned long 
  9207 ;; Registers used:
  9208 ;;		wreg, status,2, status,0
  9209 ;; Tracked objects:
  9210 ;;		On entry : 0/0
  9211 ;;		On exit  : 0/0
  9212 ;;		Unchanged: 0/0
  9213 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9214 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9215 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9216 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9217 ;;      Totals:        10       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9218 ;;Total ram usage:       16 bytes
  9219 ;; Hardware stack levels used:    1
  9220 ;; This function calls:
  9221 ;;		Nothing
  9222 ;; This function is called by:
  9223 ;;		_sprintf
  9224 ;; This function uses a non-reentrant model
  9225 ;;
  9226                           
  9227                           
  9228                           ;psect for function __tdiv_to_l_
  9229  001B                     __tdiv_to_l_:	
  9230                           
  9231                           ;incstack = 0
  9232                           ; Regs used in __tdiv_to_l_: [wreg+status,2+status,0]
  9233  001B  0870               	movf	__tdiv_to_l_@f1,w
  9234  001C  00F6               	movwf	??__tdiv_to_l_
  9235  001D  0871               	movf	__tdiv_to_l_@f1+1,w
  9236  001E  00F7               	movwf	??__tdiv_to_l_+1
  9237  001F  0872               	movf	__tdiv_to_l_@f1+2,w
  9238  0020  00F8               	movwf	??__tdiv_to_l_+2
  9239  0021  1003               	clrc
  9240  0022  0D77               	rlf	??__tdiv_to_l_+1,w
  9241  0023  0D78               	rlf	??__tdiv_to_l_+2,w
  9242  0024  00F9               	movwf	??__tdiv_to_l_+3
  9243  0025  0879               	movf	??__tdiv_to_l_+3,w
  9244  0026  0020               	movlb	0	; select bank0
  9245  0027  00A5               	movwf	__tdiv_to_l_@exp1
  9246  0028  0825               	movf	__tdiv_to_l_@exp1,w
  9247  0029  1D03               	btfss	3,2
  9248  002A  2834               	goto	l2893
  9249  002B  3000               	movlw	0
  9250  002C  00F3               	movwf	?__tdiv_to_l_+3
  9251  002D  3000               	movlw	0
  9252  002E  00F2               	movwf	?__tdiv_to_l_+2
  9253  002F  3000               	movlw	0
  9254  0030  00F1               	movwf	?__tdiv_to_l_+1
  9255  0031  3000               	movlw	0
  9256  0032  00F0               	movwf	?__tdiv_to_l_
  9257  0033  0008               	return
  9258  0034                     l2893:	
  9259  0034  0873               	movf	__tdiv_to_l_@f2,w
  9260  0035  00F6               	movwf	??__tdiv_to_l_
  9261  0036  0874               	movf	__tdiv_to_l_@f2+1,w
  9262  0037  00F7               	movwf	??__tdiv_to_l_+1
  9263  0038  0875               	movf	__tdiv_to_l_@f2+2,w
  9264  0039  00F8               	movwf	??__tdiv_to_l_+2
  9265  003A  1003               	clrc
  9266  003B  0D77               	rlf	??__tdiv_to_l_+1,w
  9267  003C  0D78               	rlf	??__tdiv_to_l_+2,w
  9268  003D  00F9               	movwf	??__tdiv_to_l_+3
  9269  003E  0879               	movf	??__tdiv_to_l_+3,w
  9270  003F  00A4               	movwf	__tdiv_to_l_@cntr
  9271  0040  0824               	movf	__tdiv_to_l_@cntr,w
  9272  0041  1D03               	btfss	3,2
  9273  0042  284C               	goto	l721
  9274  0043  3000               	movlw	0
  9275  0044  00F3               	movwf	?__tdiv_to_l_+3
  9276  0045  3000               	movlw	0
  9277  0046  00F2               	movwf	?__tdiv_to_l_+2
  9278  0047  3000               	movlw	0
  9279  0048  00F1               	movwf	?__tdiv_to_l_+1
  9280  0049  3000               	movlw	0
  9281  004A  00F0               	movwf	?__tdiv_to_l_
  9282  004B  0008               	return
  9283  004C                     l721:	
  9284  004C  17F1               	bsf	__tdiv_to_l_@f1+1,7
  9285  004D  30FF               	movlw	255
  9286  004E  05F0               	andwf	__tdiv_to_l_@f1,f
  9287  004F  30FF               	movlw	255
  9288  0050  05F1               	andwf	__tdiv_to_l_@f1+1,f
  9289  0051  3000               	movlw	0
  9290  0052  05F2               	andwf	__tdiv_to_l_@f1+2,f
  9291  0053  17F4               	bsf	__tdiv_to_l_@f2+1,7
  9292  0054  30FF               	movlw	255
  9293  0055  05F3               	andwf	__tdiv_to_l_@f2,f
  9294  0056  30FF               	movlw	255
  9295  0057  05F4               	andwf	__tdiv_to_l_@f2+1,f
  9296  0058  3000               	movlw	0
  9297  0059  05F5               	andwf	__tdiv_to_l_@f2+2,f
  9298  005A  3000               	movlw	0
  9299  005B  00A3               	movwf	__tdiv_to_l_@quot+3
  9300  005C  3000               	movlw	0
  9301  005D  00A2               	movwf	__tdiv_to_l_@quot+2
  9302  005E  3000               	movlw	0
  9303  005F  00A1               	movwf	__tdiv_to_l_@quot+1
  9304  0060  3000               	movlw	0
  9305  0061  00A0               	movwf	__tdiv_to_l_@quot
  9306  0062  307F               	movlw	127
  9307  0063  02A5               	subwf	__tdiv_to_l_@exp1,f
  9308  0064  3098               	movlw	152
  9309  0065  0724               	addwf	__tdiv_to_l_@cntr,w
  9310  0066  00F6               	movwf	??__tdiv_to_l_
  9311  0067  0876               	movf	??__tdiv_to_l_,w
  9312  0068  02A5               	subwf	__tdiv_to_l_@exp1,f
  9313  0069  3018               	movlw	24
  9314  006A  00F6               	movwf	??__tdiv_to_l_
  9315  006B  0876               	movf	??__tdiv_to_l_,w
  9316  006C  00A4               	movwf	__tdiv_to_l_@cntr
  9317  006D                     l2907:	
  9318  006D  3001               	movlw	1
  9319  006E                     u3385:	
  9320  006E  35A0               	lslf	__tdiv_to_l_@quot,f
  9321  006F  0DA1               	rlf	__tdiv_to_l_@quot+1,f
  9322  0070  0DA2               	rlf	__tdiv_to_l_@quot+2,f
  9323  0071  0DA3               	rlf	__tdiv_to_l_@quot+3,f
  9324  0072  0B89               	decfsz	9,f
  9325  0073  286E               	goto	u3385
  9326  0074  0875               	movf	__tdiv_to_l_@f2+2,w
  9327  0075  0272               	subwf	__tdiv_to_l_@f1+2,w
  9328  0076  1D03               	skipz
  9329  0077  287E               	goto	u3395
  9330  0078  0874               	movf	__tdiv_to_l_@f2+1,w
  9331  0079  0271               	subwf	__tdiv_to_l_@f1+1,w
  9332  007A  1D03               	skipz
  9333  007B  287E               	goto	u3395
  9334  007C  0873               	movf	__tdiv_to_l_@f2,w
  9335  007D  0270               	subwf	__tdiv_to_l_@f1,w
  9336  007E                     u3395:	
  9337  007E  1C03               	skipc
  9338  007F  2887               	goto	l2915
  9339  0080  0873               	movf	__tdiv_to_l_@f2,w
  9340  0081  02F0               	subwf	__tdiv_to_l_@f1,f
  9341  0082  0874               	movf	__tdiv_to_l_@f2+1,w
  9342  0083  3BF1               	subwfb	__tdiv_to_l_@f1+1,f
  9343  0084  0875               	movf	__tdiv_to_l_@f2+2,w
  9344  0085  3BF2               	subwfb	__tdiv_to_l_@f1+2,f
  9345  0086  1420               	bsf	__tdiv_to_l_@quot,0
  9346  0087                     l2915:	
  9347  0087  3001               	movlw	1
  9348  0088                     u3405:	
  9349  0088  35F0               	lslf	__tdiv_to_l_@f1,f
  9350  0089  0DF1               	rlf	__tdiv_to_l_@f1+1,f
  9351  008A  0DF2               	rlf	__tdiv_to_l_@f1+2,f
  9352  008B  0B89               	decfsz	9,f
  9353  008C  2888               	goto	u3405
  9354  008D  3001               	movlw	1
  9355  008E  02A4               	subwf	__tdiv_to_l_@cntr,f
  9356  008F  1D03               	btfss	3,2
  9357  0090  286D               	goto	l2907
  9358  0091  1FA5               	btfss	__tdiv_to_l_@exp1,7
  9359  0092  28AF               	goto	l2927
  9360  0093  0825               	movf	__tdiv_to_l_@exp1,w
  9361  0094  3A80               	xorlw	128
  9362  0095  3E97               	addlw	151
  9363  0096  1803               	skipnc
  9364  0097  28A1               	goto	l2925
  9365  0098  3000               	movlw	0
  9366  0099  00F3               	movwf	?__tdiv_to_l_+3
  9367  009A  3000               	movlw	0
  9368  009B  00F2               	movwf	?__tdiv_to_l_+2
  9369  009C  3000               	movlw	0
  9370  009D  00F1               	movwf	?__tdiv_to_l_+1
  9371  009E  3000               	movlw	0
  9372  009F  00F0               	movwf	?__tdiv_to_l_
  9373  00A0  0008               	return
  9374  00A1                     l2925:	
  9375  00A1  3001               	movlw	1
  9376  00A2                     u3445:	
  9377  00A2  36A3               	lsrf	__tdiv_to_l_@quot+3,f
  9378  00A3  0CA2               	rrf	__tdiv_to_l_@quot+2,f
  9379  00A4  0CA1               	rrf	__tdiv_to_l_@quot+1,f
  9380  00A5  0CA0               	rrf	__tdiv_to_l_@quot,f
  9381  00A6  0B89               	decfsz	9,f
  9382  00A7  28A2               	goto	u3445
  9383  00A8  3001               	movlw	1
  9384  00A9  00F6               	movwf	??__tdiv_to_l_
  9385  00AA  0876               	movf	??__tdiv_to_l_,w
  9386  00AB  07A5               	addwf	__tdiv_to_l_@exp1,f
  9387  00AC  1903               	btfsc	3,2
  9388  00AD  28C8               	goto	l2935
  9389  00AE  28A1               	goto	l2925
  9390  00AF                     l2927:	
  9391  00AF  3018               	movlw	24
  9392  00B0  0225               	subwf	__tdiv_to_l_@exp1,w
  9393  00B1  1C03               	skipc
  9394  00B2  28C5               	goto	l731
  9395  00B3  3000               	movlw	0
  9396  00B4  00F3               	movwf	?__tdiv_to_l_+3
  9397  00B5  3000               	movlw	0
  9398  00B6  00F2               	movwf	?__tdiv_to_l_+2
  9399  00B7  3000               	movlw	0
  9400  00B8  00F1               	movwf	?__tdiv_to_l_+1
  9401  00B9  3000               	movlw	0
  9402  00BA  00F0               	movwf	?__tdiv_to_l_
  9403  00BB  0008               	return
  9404  00BC                     l2933:	
  9405  00BC  3001               	movlw	1
  9406  00BD                     u3475:	
  9407  00BD  35A0               	lslf	__tdiv_to_l_@quot,f
  9408  00BE  0DA1               	rlf	__tdiv_to_l_@quot+1,f
  9409  00BF  0DA2               	rlf	__tdiv_to_l_@quot+2,f
  9410  00C0  0DA3               	rlf	__tdiv_to_l_@quot+3,f
  9411  00C1  0B89               	decfsz	9,f
  9412  00C2  28BD               	goto	u3475
  9413  00C3  3001               	movlw	1
  9414  00C4  02A5               	subwf	__tdiv_to_l_@exp1,f
  9415  00C5                     l731:	
  9416  00C5  0825               	movf	__tdiv_to_l_@exp1,w
  9417  00C6  1D03               	btfss	3,2
  9418  00C7  28BC               	goto	l2933
  9419  00C8                     l2935:	
  9420  00C8  0823               	movf	__tdiv_to_l_@quot+3,w
  9421  00C9  00F3               	movwf	?__tdiv_to_l_+3
  9422  00CA  0822               	movf	__tdiv_to_l_@quot+2,w
  9423  00CB  00F2               	movwf	?__tdiv_to_l_+2
  9424  00CC  0821               	movf	__tdiv_to_l_@quot+1,w
  9425  00CD  00F1               	movwf	?__tdiv_to_l_+1
  9426  00CE  0820               	movf	__tdiv_to_l_@quot,w
  9427  00CF  00F0               	movwf	?__tdiv_to_l_
  9428  00D0  0008               	return
  9429  00D1                     __end_of__tdiv_to_l_:	
  9430                           
  9431                           	psect	text8
  9432  083C                     __ptext8:	
  9433 ;; *************** function __div_to_l_ *****************
  9434 ;; Defined at:
  9435 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\fldivl.c"
  9436 ;; Parameters:    Size  Location     Type
  9437 ;;  f1              3    0[COMMON] unsigned long 
  9438 ;;  f2              3    3[COMMON] unsigned long 
  9439 ;; Auto vars:     Size  Location     Type
  9440 ;;  quot            4    0[BANK0 ] unsigned long 
  9441 ;;  exp1            1    5[BANK0 ] unsigned char 
  9442 ;;  cntr            1    4[BANK0 ] unsigned char 
  9443 ;; Return value:  Size  Location     Type
  9444 ;;                  4    0[COMMON] unsigned long 
  9445 ;; Registers used:
  9446 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9447 ;; Tracked objects:
  9448 ;;		On entry : 0/0
  9449 ;;		On exit  : 0/0
  9450 ;;		Unchanged: 0/0
  9451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9452 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9453 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9454 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9455 ;;      Totals:        14       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9456 ;;Total ram usage:       20 bytes
  9457 ;; Hardware stack levels used:    1
  9458 ;; This function calls:
  9459 ;;		Nothing
  9460 ;; This function is called by:
  9461 ;;		_sprintf
  9462 ;; This function uses a non-reentrant model
  9463 ;;
  9464                           
  9465                           
  9466                           ;psect for function __div_to_l_
  9467  083C                     __div_to_l_:	
  9468                           
  9469                           ;incstack = 0
  9470                           ; Regs used in __div_to_l_: [wreg+fsr1l+fsr1h+status,2+status,0]
  9471  083C  3070               	movlw	low (__div_to_l_@f1| 0)
  9472  083D  0086               	movwf	6
  9473  083E  0187               	clrf	7
  9474  083F  3F40               	moviw [0]fsr1
  9475  0840  00F6               	movwf	??__div_to_l_
  9476  0841  3F41               	moviw [1]fsr1
  9477  0842  00F7               	movwf	??__div_to_l_+1
  9478  0843  3F42               	moviw [2]fsr1
  9479  0844  00F8               	movwf	??__div_to_l_+2
  9480  0845  3F43               	moviw [3]fsr1
  9481  0846  00F9               	movwf	??__div_to_l_+3
  9482  0847  1003               	clrc
  9483  0848  0D78               	rlf	??__div_to_l_+2,w
  9484  0849  0D79               	rlf	??__div_to_l_+3,w
  9485  084A  00FA               	movwf	??__div_to_l_+4
  9486  084B  087A               	movf	??__div_to_l_+4,w
  9487  084C  0020               	movlb	0	; select bank0
  9488  084D  00A5               	movwf	__div_to_l_@exp1
  9489  084E  0825               	movf	__div_to_l_@exp1,w
  9490  084F  1D03               	btfss	3,2
  9491  0850  285A               	goto	l2945
  9492  0851  3000               	movlw	0
  9493  0852  00F3               	movwf	?__div_to_l_+3
  9494  0853  3000               	movlw	0
  9495  0854  00F2               	movwf	?__div_to_l_+2
  9496  0855  3000               	movlw	0
  9497  0856  00F1               	movwf	?__div_to_l_+1
  9498  0857  3000               	movlw	0
  9499  0858  00F0               	movwf	?__div_to_l_
  9500  0859  0008               	return
  9501  085A                     l2945:	
  9502  085A  3073               	movlw	low (__div_to_l_@f2| 0)
  9503  085B  0086               	movwf	6
  9504  085C  0187               	clrf	7
  9505  085D  3F40               	moviw [0]fsr1
  9506  085E  00F6               	movwf	??__div_to_l_
  9507  085F  3F41               	moviw [1]fsr1
  9508  0860  00F7               	movwf	??__div_to_l_+1
  9509  0861  3F42               	moviw [2]fsr1
  9510  0862  00F8               	movwf	??__div_to_l_+2
  9511  0863  3F43               	moviw [3]fsr1
  9512  0864  00F9               	movwf	??__div_to_l_+3
  9513  0865  1003               	clrc
  9514  0866  0D78               	rlf	??__div_to_l_+2,w
  9515  0867  0D79               	rlf	??__div_to_l_+3,w
  9516  0868  00FA               	movwf	??__div_to_l_+4
  9517  0869  087A               	movf	??__div_to_l_+4,w
  9518  086A  00A4               	movwf	__div_to_l_@cntr
  9519  086B  0824               	movf	__div_to_l_@cntr,w
  9520  086C  1D03               	btfss	3,2
  9521  086D  2877               	goto	l2951
  9522  086E  3000               	movlw	0
  9523  086F  00F3               	movwf	?__div_to_l_+3
  9524  0870  3000               	movlw	0
  9525  0871  00F2               	movwf	?__div_to_l_+2
  9526  0872  3000               	movlw	0
  9527  0873  00F1               	movwf	?__div_to_l_+1
  9528  0874  3000               	movlw	0
  9529  0875  00F0               	movwf	?__div_to_l_
  9530  0876  0008               	return
  9531  0877                     l2951:	
  9532  0877  3070               	movlw	low (__div_to_l_@f1| 0)
  9533  0878  0086               	movwf	6
  9534  0879  0187               	clrf	7
  9535  087A  3000               	movlw	0
  9536  087B  0481               	iorwf	1,f
  9537  087C  3141               	addfsr 1,1
  9538  087D  3000               	movlw	0
  9539  087E  0481               	iorwf	1,f
  9540  087F  3141               	addfsr 1,1
  9541  0880  3080               	movlw	128
  9542  0881  0481               	iorwf	1,f
  9543  0882  3141               	addfsr 1,1
  9544  0883  3000               	movlw	0
  9545  0884  0481               	iorwf	1,f
  9546  0885  3070               	movlw	low (__div_to_l_@f1| 0)
  9547  0886  0086               	movwf	6
  9548  0887  0187               	clrf	7
  9549  0888  30FF               	movlw	255
  9550  0889  0581               	andwf	1,f
  9551  088A  3141               	addfsr 1,1
  9552  088B  30FF               	movlw	255
  9553  088C  0581               	andwf	1,f
  9554  088D  3141               	addfsr 1,1
  9555  088E  30FF               	movlw	255
  9556  088F  0581               	andwf	1,f
  9557  0890  3141               	addfsr 1,1
  9558  0891  3000               	movlw	0
  9559  0892  0581               	andwf	1,f
  9560  0893  3073               	movlw	low (__div_to_l_@f2| 0)
  9561  0894  0086               	movwf	6
  9562  0895  0187               	clrf	7
  9563  0896  3000               	movlw	0
  9564  0897  0481               	iorwf	1,f
  9565  0898  3141               	addfsr 1,1
  9566  0899  3000               	movlw	0
  9567  089A  0481               	iorwf	1,f
  9568  089B  3141               	addfsr 1,1
  9569  089C  3080               	movlw	128
  9570  089D  0481               	iorwf	1,f
  9571  089E  3141               	addfsr 1,1
  9572  089F  3000               	movlw	0
  9573  08A0  0481               	iorwf	1,f
  9574  08A1  3073               	movlw	low (__div_to_l_@f2| 0)
  9575  08A2  0086               	movwf	6
  9576  08A3  0187               	clrf	7
  9577  08A4  30FF               	movlw	255
  9578  08A5  0581               	andwf	1,f
  9579  08A6  3141               	addfsr 1,1
  9580  08A7  30FF               	movlw	255
  9581  08A8  0581               	andwf	1,f
  9582  08A9  3141               	addfsr 1,1
  9583  08AA  30FF               	movlw	255
  9584  08AB  0581               	andwf	1,f
  9585  08AC  3141               	addfsr 1,1
  9586  08AD  3000               	movlw	0
  9587  08AE  0581               	andwf	1,f
  9588  08AF  3000               	movlw	0
  9589  08B0  00A3               	movwf	__div_to_l_@quot+3
  9590  08B1  3000               	movlw	0
  9591  08B2  00A2               	movwf	__div_to_l_@quot+2
  9592  08B3  3000               	movlw	0
  9593  08B4  00A1               	movwf	__div_to_l_@quot+1
  9594  08B5  3000               	movlw	0
  9595  08B6  00A0               	movwf	__div_to_l_@quot
  9596  08B7  307F               	movlw	127
  9597  08B8  02A5               	subwf	__div_to_l_@exp1,f
  9598  08B9  30A0               	movlw	160
  9599  08BA  0724               	addwf	__div_to_l_@cntr,w
  9600  08BB  00F6               	movwf	??__div_to_l_
  9601  08BC  0876               	movf	??__div_to_l_,w
  9602  08BD  02A5               	subwf	__div_to_l_@exp1,f
  9603  08BE  3020               	movlw	32
  9604  08BF  00F6               	movwf	??__div_to_l_
  9605  08C0  0876               	movf	??__div_to_l_,w
  9606  08C1  00A4               	movwf	__div_to_l_@cntr
  9607  08C2                     l2961:	
  9608  08C2  3001               	movlw	1
  9609  08C3                     u3515:	
  9610  08C3  35A0               	lslf	__div_to_l_@quot,f
  9611  08C4  0DA1               	rlf	__div_to_l_@quot+1,f
  9612  08C5  0DA2               	rlf	__div_to_l_@quot+2,f
  9613  08C6  0DA3               	rlf	__div_to_l_@quot+3,f
  9614  08C7  0B89               	decfsz	9,f
  9615  08C8  28C3               	goto	u3515
  9616  08C9  3073               	movlw	low (__div_to_l_@f2| 0)
  9617  08CA  0086               	movwf	6
  9618  08CB  0187               	clrf	7
  9619  08CC  3F40               	moviw [0]fsr1
  9620  08CD  00F6               	movwf	??__div_to_l_
  9621  08CE  3F41               	moviw [1]fsr1
  9622  08CF  00F7               	movwf	??__div_to_l_+1
  9623  08D0  3F42               	moviw [2]fsr1
  9624  08D1  00F8               	movwf	??__div_to_l_+2
  9625  08D2  3F43               	moviw [3]fsr1
  9626  08D3  00F9               	movwf	??__div_to_l_+3
  9627  08D4  3070               	movlw	low (__div_to_l_@f1| 0)
  9628  08D5  0086               	movwf	6
  9629  08D6  0187               	clrf	7
  9630  08D7  3F40               	moviw [0]fsr1
  9631  08D8  00FA               	movwf	??__div_to_l_+4
  9632  08D9  3F41               	moviw [1]fsr1
  9633  08DA  00FB               	movwf	??__div_to_l_+5
  9634  08DB  3F42               	moviw [2]fsr1
  9635  08DC  00FC               	movwf	??__div_to_l_+6
  9636  08DD  3F43               	moviw [3]fsr1
  9637  08DE  00FD               	movwf	??__div_to_l_+7
  9638  08DF  0879               	movf	??__div_to_l_+3,w
  9639  08E0  027D               	subwf	??__div_to_l_+7,w
  9640  08E1  1D03               	skipz
  9641  08E2  28ED               	goto	u3525
  9642  08E3  0878               	movf	??__div_to_l_+2,w
  9643  08E4  027C               	subwf	??__div_to_l_+6,w
  9644  08E5  1D03               	skipz
  9645  08E6  28ED               	goto	u3525
  9646  08E7  0877               	movf	??__div_to_l_+1,w
  9647  08E8  027B               	subwf	??__div_to_l_+5,w
  9648  08E9  1D03               	skipz
  9649  08EA  28ED               	goto	u3525
  9650  08EB  0876               	movf	??__div_to_l_,w
  9651  08EC  027A               	subwf	??__div_to_l_+4,w
  9652  08ED                     u3525:	
  9653  08ED  1C03               	skipc
  9654  08EE  290A               	goto	l2969
  9655  08EF  3073               	movlw	low (__div_to_l_@f2| 0)
  9656  08F0  0086               	movwf	6
  9657  08F1  0187               	clrf	7
  9658  08F2  3F40               	moviw [0]fsr1
  9659  08F3  00F6               	movwf	??__div_to_l_
  9660  08F4  3F41               	moviw [1]fsr1
  9661  08F5  00F7               	movwf	??__div_to_l_+1
  9662  08F6  3F42               	moviw [2]fsr1
  9663  08F7  00F8               	movwf	??__div_to_l_+2
  9664  08F8  3F43               	moviw [3]fsr1
  9665  08F9  00F9               	movwf	??__div_to_l_+3
  9666  08FA  3070               	movlw	low (__div_to_l_@f1| 0)
  9667  08FB  0086               	movwf	6
  9668  08FC  0187               	clrf	7
  9669  08FD  0876               	movf	??__div_to_l_,w
  9670  08FE  0281               	subwf	1,f
  9671  08FF  3141               	addfsr 1,1
  9672  0900  0877               	movf	??__div_to_l_+1,w
  9673  0901  3B81               	subwfb	1,f
  9674  0902  3141               	addfsr 1,1
  9675  0903  0878               	movf	??__div_to_l_+2,w
  9676  0904  3B81               	subwfb	1,f
  9677  0905  3141               	addfsr 1,1
  9678  0906  0879               	movf	??__div_to_l_+3,w
  9679  0907  3B81               	subwfb	1,f
  9680  0908  317D               	addfsr 1,-3
  9681  0909  1420               	bsf	__div_to_l_@quot,0
  9682  090A                     l2969:	
  9683  090A  3070               	movlw	low (__div_to_l_@f1| 0)
  9684  090B  0086               	movwf	6
  9685  090C  0187               	clrf	7
  9686  090D  3581               	lslf	1,f
  9687  090E  3141               	addfsr 1,1
  9688  090F  0D81               	rlf	1,f
  9689  0910  3141               	addfsr 1,1
  9690  0911  0D81               	rlf	1,f
  9691  0912  3141               	addfsr 1,1
  9692  0913  0D81               	rlf	1,f
  9693  0914  317D               	addfsr 1,-3
  9694  0915  3001               	movlw	1
  9695  0916  02A4               	subwf	__div_to_l_@cntr,f
  9696  0917  1D03               	btfss	3,2
  9697  0918  28C2               	goto	l2961
  9698  0919  1FA5               	btfss	__div_to_l_@exp1,7
  9699  091A  2937               	goto	l2981
  9700  091B  0825               	movf	__div_to_l_@exp1,w
  9701  091C  3A80               	xorlw	128
  9702  091D  3E9F               	addlw	159
  9703  091E  1803               	skipnc
  9704  091F  2929               	goto	l2979
  9705  0920  3000               	movlw	0
  9706  0921  00F3               	movwf	?__div_to_l_+3
  9707  0922  3000               	movlw	0
  9708  0923  00F2               	movwf	?__div_to_l_+2
  9709  0924  3000               	movlw	0
  9710  0925  00F1               	movwf	?__div_to_l_+1
  9711  0926  3000               	movlw	0
  9712  0927  00F0               	movwf	?__div_to_l_
  9713  0928  0008               	return
  9714  0929                     l2979:	
  9715  0929  3001               	movlw	1
  9716  092A                     u3565:	
  9717  092A  36A3               	lsrf	__div_to_l_@quot+3,f
  9718  092B  0CA2               	rrf	__div_to_l_@quot+2,f
  9719  092C  0CA1               	rrf	__div_to_l_@quot+1,f
  9720  092D  0CA0               	rrf	__div_to_l_@quot,f
  9721  092E  0B89               	decfsz	9,f
  9722  092F  292A               	goto	u3565
  9723  0930  3001               	movlw	1
  9724  0931  00F6               	movwf	??__div_to_l_
  9725  0932  0876               	movf	??__div_to_l_,w
  9726  0933  07A5               	addwf	__div_to_l_@exp1,f
  9727  0934  1903               	btfsc	3,2
  9728  0935  2950               	goto	l2989
  9729  0936  2929               	goto	l2979
  9730  0937                     l2981:	
  9731  0937  3020               	movlw	32
  9732  0938  0225               	subwf	__div_to_l_@exp1,w
  9733  0939  1C03               	skipc
  9734  093A  294D               	goto	l652
  9735  093B  3000               	movlw	0
  9736  093C  00F3               	movwf	?__div_to_l_+3
  9737  093D  3000               	movlw	0
  9738  093E  00F2               	movwf	?__div_to_l_+2
  9739  093F  3000               	movlw	0
  9740  0940  00F1               	movwf	?__div_to_l_+1
  9741  0941  3000               	movlw	0
  9742  0942  00F0               	movwf	?__div_to_l_
  9743  0943  0008               	return
  9744  0944                     l2987:	
  9745  0944  3001               	movlw	1
  9746  0945                     u3595:	
  9747  0945  35A0               	lslf	__div_to_l_@quot,f
  9748  0946  0DA1               	rlf	__div_to_l_@quot+1,f
  9749  0947  0DA2               	rlf	__div_to_l_@quot+2,f
  9750  0948  0DA3               	rlf	__div_to_l_@quot+3,f
  9751  0949  0B89               	decfsz	9,f
  9752  094A  2945               	goto	u3595
  9753  094B  3001               	movlw	1
  9754  094C  02A5               	subwf	__div_to_l_@exp1,f
  9755  094D                     l652:	
  9756  094D  0825               	movf	__div_to_l_@exp1,w
  9757  094E  1D03               	btfss	3,2
  9758  094F  2944               	goto	l2987
  9759  0950                     l2989:	
  9760  0950  0823               	movf	__div_to_l_@quot+3,w
  9761  0951  00F3               	movwf	?__div_to_l_+3
  9762  0952  0822               	movf	__div_to_l_@quot+2,w
  9763  0953  00F2               	movwf	?__div_to_l_+2
  9764  0954  0821               	movf	__div_to_l_@quot+1,w
  9765  0955  00F1               	movwf	?__div_to_l_+1
  9766  0956  0820               	movf	__div_to_l_@quot,w
  9767  0957  00F0               	movwf	?__div_to_l_
  9768  0958  0008               	return
  9769  0959                     __end_of__div_to_l_:	
  9770                           
  9771                           	psect	text9
  9772  1050                     __ptext9:	
  9773 ;; *************** function ___lltoft *****************
  9774 ;; Defined at:
  9775 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lltoft.c"
  9776 ;; Parameters:    Size  Location     Type
  9777 ;;  c               4    8[COMMON] unsigned long 
  9778 ;; Auto vars:     Size  Location     Type
  9779 ;;  exp             1   13[COMMON] unsigned char 
  9780 ;; Return value:  Size  Location     Type
  9781 ;;                  3    8[COMMON] float 
  9782 ;; Registers used:
  9783 ;;		wreg, status,2, status,0, pclath, cstack
  9784 ;; Tracked objects:
  9785 ;;		On entry : 0/0
  9786 ;;		On exit  : 0/0
  9787 ;;		Unchanged: 0/0
  9788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9789 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9790 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9791 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9792 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9793 ;;Total ram usage:        6 bytes
  9794 ;; Hardware stack levels used:    1
  9795 ;; Hardware stack levels required when called:    1
  9796 ;; This function calls:
  9797 ;;		___ftpack
  9798 ;; This function is called by:
  9799 ;;		_sprintf
  9800 ;; This function uses a non-reentrant model
  9801 ;;
  9802                           
  9803                           
  9804                           ;psect for function ___lltoft
  9805  1050                     ___lltoft:	
  9806                           
  9807                           ;incstack = 0
  9808                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  9809  1050  308E               	movlw	142
  9810  1051  00FC               	movwf	??___lltoft
  9811  1052  087C               	movf	??___lltoft,w
  9812  1053  00FD               	movwf	___lltoft@exp
  9813  1054                     l3131:	
  9814  1054  30FF               	movlw	255
  9815  1055  057B               	andwf	___lltoft@c+3,w
  9816  1056  1903               	btfsc	3,2
  9817  1057  2864               	goto	l3133
  9818  1058  3001               	movlw	1
  9819  1059                     u3905:	
  9820  1059  36FB               	lsrf	___lltoft@c+3,f
  9821  105A  0CFA               	rrf	___lltoft@c+2,f
  9822  105B  0CF9               	rrf	___lltoft@c+1,f
  9823  105C  0CF8               	rrf	___lltoft@c,f
  9824  105D  0B89               	decfsz	9,f
  9825  105E  2859               	goto	u3905
  9826  105F  3001               	movlw	1
  9827  1060  00FC               	movwf	??___lltoft
  9828  1061  087C               	movf	??___lltoft,w
  9829  1062  07FD               	addwf	___lltoft@exp,f
  9830  1063  2854               	goto	l3131
  9831  1064                     l3133:	
  9832  1064  0878               	movf	___lltoft@c,w
  9833  1065  00F0               	movwf	___ftpack@arg
  9834  1066  0879               	movf	___lltoft@c+1,w
  9835  1067  00F1               	movwf	___ftpack@arg+1
  9836  1068  087A               	movf	___lltoft@c+2,w
  9837  1069  00F2               	movwf	___ftpack@arg+2
  9838  106A  087D               	movf	___lltoft@exp,w
  9839  106B  00FC               	movwf	??___lltoft
  9840  106C  087C               	movf	??___lltoft,w
  9841  106D  00F3               	movwf	___ftpack@exp
  9842  106E  01F4               	clrf	___ftpack@sign
  9843  106F  3192  22A7         	fcall	___ftpack
  9844  1071  0870               	movf	?___ftpack,w
  9845  1072  00F8               	movwf	?___lltoft
  9846  1073  0871               	movf	?___ftpack+1,w
  9847  1074  00F9               	movwf	?___lltoft+1
  9848  1075  0872               	movf	?___ftpack+2,w
  9849  1076  00FA               	movwf	?___lltoft+2
  9850  1077  0008               	return
  9851  1078                     __end_of___lltoft:	
  9852                           
  9853                           	psect	text10
  9854  111B                     __ptext10:	
  9855 ;; *************** function ___llmod *****************
  9856 ;; Defined at:
  9857 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\llmod.c"
  9858 ;; Parameters:    Size  Location     Type
  9859 ;;  divisor         4    0[BANK0 ] unsigned long 
  9860 ;;  dividend        4    4[BANK0 ] unsigned long 
  9861 ;; Auto vars:     Size  Location     Type
  9862 ;;  counter         1    9[BANK0 ] unsigned char 
  9863 ;; Return value:  Size  Location     Type
  9864 ;;                  4    0[BANK0 ] unsigned long 
  9865 ;; Registers used:
  9866 ;;		wreg, status,2, status,0
  9867 ;; Tracked objects:
  9868 ;;		On entry : 0/0
  9869 ;;		On exit  : 0/0
  9870 ;;		Unchanged: 0/0
  9871 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9872 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9873 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9874 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9875 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9876 ;;Total ram usage:       10 bytes
  9877 ;; Hardware stack levels used:    1
  9878 ;; This function calls:
  9879 ;;		Nothing
  9880 ;; This function is called by:
  9881 ;;		_sprintf
  9882 ;; This function uses a non-reentrant model
  9883 ;;
  9884                           
  9885                           
  9886                           ;psect for function ___llmod
  9887  111B                     ___llmod:	
  9888                           
  9889                           ;incstack = 0
  9890                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  9891  111B  0020               	movlb	0	; select bank0
  9892  111C  0823               	movf	___llmod@divisor+3,w
  9893  111D  0422               	iorwf	___llmod@divisor+2,w
  9894  111E  0421               	iorwf	___llmod@divisor+1,w
  9895  111F  0420               	iorwf	___llmod@divisor,w
  9896  1120  1903               	skipnz
  9897  1121  2955               	goto	l3123
  9898  1122  01A9               	clrf	___llmod@counter
  9899  1123  0AA9               	incf	___llmod@counter,f
  9900  1124                     l3113:	
  9901  1124  1BA3               	btfsc	___llmod@divisor+3,7
  9902  1125  2932               	goto	l3115
  9903  1126  3001               	movlw	1
  9904  1127                     u3855:	
  9905  1127  35A0               	lslf	___llmod@divisor,f
  9906  1128  0DA1               	rlf	___llmod@divisor+1,f
  9907  1129  0DA2               	rlf	___llmod@divisor+2,f
  9908  112A  0DA3               	rlf	___llmod@divisor+3,f
  9909  112B  0B89               	decfsz	9,f
  9910  112C  2927               	goto	u3855
  9911  112D  3001               	movlw	1
  9912  112E  00A8               	movwf	??___llmod
  9913  112F  0828               	movf	??___llmod,w
  9914  1130  07A9               	addwf	___llmod@counter,f
  9915  1131  2924               	goto	l3113
  9916  1132                     l3115:	
  9917  1132  0823               	movf	___llmod@divisor+3,w
  9918  1133  0227               	subwf	___llmod@dividend+3,w
  9919  1134  1D03               	skipz
  9920  1135  2940               	goto	u3875
  9921  1136  0822               	movf	___llmod@divisor+2,w
  9922  1137  0226               	subwf	___llmod@dividend+2,w
  9923  1138  1D03               	skipz
  9924  1139  2940               	goto	u3875
  9925  113A  0821               	movf	___llmod@divisor+1,w
  9926  113B  0225               	subwf	___llmod@dividend+1,w
  9927  113C  1D03               	skipz
  9928  113D  2940               	goto	u3875
  9929  113E  0820               	movf	___llmod@divisor,w
  9930  113F  0224               	subwf	___llmod@dividend,w
  9931  1140                     u3875:	
  9932  1140  1C03               	skipc
  9933  1141  294A               	goto	l3119
  9934  1142  0820               	movf	___llmod@divisor,w
  9935  1143  02A4               	subwf	___llmod@dividend,f
  9936  1144  0821               	movf	___llmod@divisor+1,w
  9937  1145  3BA5               	subwfb	___llmod@dividend+1,f
  9938  1146  0822               	movf	___llmod@divisor+2,w
  9939  1147  3BA6               	subwfb	___llmod@dividend+2,f
  9940  1148  0823               	movf	___llmod@divisor+3,w
  9941  1149  3BA7               	subwfb	___llmod@dividend+3,f
  9942  114A                     l3119:	
  9943  114A  3001               	movlw	1
  9944  114B                     u3885:	
  9945  114B  36A3               	lsrf	___llmod@divisor+3,f
  9946  114C  0CA2               	rrf	___llmod@divisor+2,f
  9947  114D  0CA1               	rrf	___llmod@divisor+1,f
  9948  114E  0CA0               	rrf	___llmod@divisor,f
  9949  114F  0B89               	decfsz	9,f
  9950  1150  294B               	goto	u3885
  9951  1151  3001               	movlw	1
  9952  1152  02A9               	subwf	___llmod@counter,f
  9953  1153  1D03               	btfss	3,2
  9954  1154  2932               	goto	l3115
  9955  1155                     l3123:	
  9956  1155  0827               	movf	___llmod@dividend+3,w
  9957  1156  00A3               	movwf	?___llmod+3
  9958  1157  0826               	movf	___llmod@dividend+2,w
  9959  1158  00A2               	movwf	?___llmod+2
  9960  1159  0825               	movf	___llmod@dividend+1,w
  9961  115A  00A1               	movwf	?___llmod+1
  9962  115B  0824               	movf	___llmod@dividend,w
  9963  115C  00A0               	movwf	?___llmod
  9964  115D  0008               	return
  9965  115E                     __end_of___llmod:	
  9966                           
  9967                           	psect	text11
  9968  11A3                     __ptext11:	
  9969 ;; *************** function ___lldiv *****************
  9970 ;; Defined at:
  9971 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lldiv.c"
  9972 ;; Parameters:    Size  Location     Type
  9973 ;;  divisor         4    0[COMMON] unsigned long 
  9974 ;;  dividend        4    4[COMMON] unsigned long 
  9975 ;; Auto vars:     Size  Location     Type
  9976 ;;  quotient        4    9[COMMON] unsigned long 
  9977 ;;  counter         1   13[COMMON] unsigned char 
  9978 ;; Return value:  Size  Location     Type
  9979 ;;                  4    0[COMMON] unsigned long 
  9980 ;; Registers used:
  9981 ;;		wreg, status,2, status,0
  9982 ;; Tracked objects:
  9983 ;;		On entry : 0/0
  9984 ;;		On exit  : 0/0
  9985 ;;		Unchanged: 0/0
  9986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9987 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9988 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9989 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9990 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9991 ;;Total ram usage:       14 bytes
  9992 ;; Hardware stack levels used:    1
  9993 ;; This function calls:
  9994 ;;		Nothing
  9995 ;; This function is called by:
  9996 ;;		_sprintf
  9997 ;; This function uses a non-reentrant model
  9998 ;;
  9999                           
 10000                           
 10001                           ;psect for function ___lldiv
 10002  11A3                     ___lldiv:	
 10003                           
 10004                           ;incstack = 0
 10005                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
 10006  11A3  3000               	movlw	0
 10007  11A4  00FC               	movwf	___lldiv@quotient+3
 10008  11A5  3000               	movlw	0
 10009  11A6  00FB               	movwf	___lldiv@quotient+2
 10010  11A7  3000               	movlw	0
 10011  11A8  00FA               	movwf	___lldiv@quotient+1
 10012  11A9  3000               	movlw	0
 10013  11AA  00F9               	movwf	___lldiv@quotient
 10014  11AB  0873               	movf	___lldiv@divisor+3,w
 10015  11AC  0472               	iorwf	___lldiv@divisor+2,w
 10016  11AD  0471               	iorwf	___lldiv@divisor+1,w
 10017  11AE  0470               	iorwf	___lldiv@divisor,w
 10018  11AF  1903               	skipnz
 10019  11B0  29EC               	goto	l3103
 10020  11B1  01FD               	clrf	___lldiv@counter
 10021  11B2  0AFD               	incf	___lldiv@counter,f
 10022  11B3                     l3089:	
 10023  11B3  1BF3               	btfsc	___lldiv@divisor+3,7
 10024  11B4  29C1               	goto	l3091
 10025  11B5  3001               	movlw	1
 10026  11B6                     u3785:	
 10027  11B6  35F0               	lslf	___lldiv@divisor,f
 10028  11B7  0DF1               	rlf	___lldiv@divisor+1,f
 10029  11B8  0DF2               	rlf	___lldiv@divisor+2,f
 10030  11B9  0DF3               	rlf	___lldiv@divisor+3,f
 10031  11BA  0B89               	decfsz	9,f
 10032  11BB  29B6               	goto	u3785
 10033  11BC  3001               	movlw	1
 10034  11BD  00F8               	movwf	??___lldiv
 10035  11BE  0878               	movf	??___lldiv,w
 10036  11BF  07FD               	addwf	___lldiv@counter,f
 10037  11C0  29B3               	goto	l3089
 10038  11C1                     l3091:	
 10039  11C1  3001               	movlw	1
 10040  11C2                     u3805:	
 10041  11C2  35F9               	lslf	___lldiv@quotient,f
 10042  11C3  0DFA               	rlf	___lldiv@quotient+1,f
 10043  11C4  0DFB               	rlf	___lldiv@quotient+2,f
 10044  11C5  0DFC               	rlf	___lldiv@quotient+3,f
 10045  11C6  0B89               	decfsz	9,f
 10046  11C7  29C2               	goto	u3805
 10047  11C8  0873               	movf	___lldiv@divisor+3,w
 10048  11C9  0277               	subwf	___lldiv@dividend+3,w
 10049  11CA  1D03               	skipz
 10050  11CB  29D6               	goto	u3815
 10051  11CC  0872               	movf	___lldiv@divisor+2,w
 10052  11CD  0276               	subwf	___lldiv@dividend+2,w
 10053  11CE  1D03               	skipz
 10054  11CF  29D6               	goto	u3815
 10055  11D0  0871               	movf	___lldiv@divisor+1,w
 10056  11D1  0275               	subwf	___lldiv@dividend+1,w
 10057  11D2  1D03               	skipz
 10058  11D3  29D6               	goto	u3815
 10059  11D4  0870               	movf	___lldiv@divisor,w
 10060  11D5  0274               	subwf	___lldiv@dividend,w
 10061  11D6                     u3815:	
 10062  11D6  1C03               	skipc
 10063  11D7  29E1               	goto	l3099
 10064  11D8  0870               	movf	___lldiv@divisor,w
 10065  11D9  02F4               	subwf	___lldiv@dividend,f
 10066  11DA  0871               	movf	___lldiv@divisor+1,w
 10067  11DB  3BF5               	subwfb	___lldiv@dividend+1,f
 10068  11DC  0872               	movf	___lldiv@divisor+2,w
 10069  11DD  3BF6               	subwfb	___lldiv@dividend+2,f
 10070  11DE  0873               	movf	___lldiv@divisor+3,w
 10071  11DF  3BF7               	subwfb	___lldiv@dividend+3,f
 10072  11E0  1479               	bsf	___lldiv@quotient,0
 10073  11E1                     l3099:	
 10074  11E1  3001               	movlw	1
 10075  11E2                     u3825:	
 10076  11E2  36F3               	lsrf	___lldiv@divisor+3,f
 10077  11E3  0CF2               	rrf	___lldiv@divisor+2,f
 10078  11E4  0CF1               	rrf	___lldiv@divisor+1,f
 10079  11E5  0CF0               	rrf	___lldiv@divisor,f
 10080  11E6  0B89               	decfsz	9,f
 10081  11E7  29E2               	goto	u3825
 10082  11E8  3001               	movlw	1
 10083  11E9  02FD               	subwf	___lldiv@counter,f
 10084  11EA  1D03               	btfss	3,2
 10085  11EB  29C1               	goto	l3091
 10086  11EC                     l3103:	
 10087  11EC  087C               	movf	___lldiv@quotient+3,w
 10088  11ED  00F3               	movwf	?___lldiv+3
 10089  11EE  087B               	movf	___lldiv@quotient+2,w
 10090  11EF  00F2               	movwf	?___lldiv+2
 10091  11F0  087A               	movf	___lldiv@quotient+1,w
 10092  11F1  00F1               	movwf	?___lldiv+1
 10093  11F2  0879               	movf	___lldiv@quotient,w
 10094  11F3  00F0               	movwf	?___lldiv
 10095  11F4  0008               	return
 10096  11F5                     __end_of___lldiv:	
 10097                           
 10098                           	psect	text12
 10099  1479                     __ptext12:	
 10100 ;; *************** function ___fttol *****************
 10101 ;; Defined at:
 10102 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\fttol.c"
 10103 ;; Parameters:    Size  Location     Type
 10104 ;;  f1              3   33[BANK0 ] float 
 10105 ;; Auto vars:     Size  Location     Type
 10106 ;;  lval            4   42[BANK0 ] unsigned long 
 10107 ;;  exp1            1   46[BANK0 ] unsigned char 
 10108 ;;  sign1           1   41[BANK0 ] unsigned char 
 10109 ;; Return value:  Size  Location     Type
 10110 ;;                  4   33[BANK0 ] long 
 10111 ;; Registers used:
 10112 ;;		wreg, status,2, status,0
 10113 ;; Tracked objects:
 10114 ;;		On entry : 0/0
 10115 ;;		On exit  : 0/0
 10116 ;;		Unchanged: 0/0
 10117 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10118 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10119 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10120 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10121 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10122 ;;Total ram usage:       14 bytes
 10123 ;; Hardware stack levels used:    1
 10124 ;; This function calls:
 10125 ;;		Nothing
 10126 ;; This function is called by:
 10127 ;;		_sprintf
 10128 ;; This function uses a non-reentrant model
 10129 ;;
 10130                           
 10131                           
 10132                           ;psect for function ___fttol
 10133  1479                     ___fttol:	
 10134                           
 10135                           ;incstack = 0
 10136                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 10137  1479  0020               	movlb	0	; select bank0
 10138  147A  0841               	movf	___fttol@f1,w
 10139  147B  00C5               	movwf	??___fttol
 10140  147C  0842               	movf	___fttol@f1+1,w
 10141  147D  00C6               	movwf	??___fttol+1
 10142  147E  0843               	movf	___fttol@f1+2,w
 10143  147F  00C7               	movwf	??___fttol+2
 10144  1480  1003               	clrc
 10145  1481  0D46               	rlf	??___fttol+1,w
 10146  1482  0D47               	rlf	??___fttol+2,w
 10147  1483  00C8               	movwf	??___fttol+3
 10148  1484  0848               	movf	??___fttol+3,w
 10149  1485  00CE               	movwf	___fttol@exp1
 10150  1486  084E               	movf	___fttol@exp1,w
 10151  1487  1D03               	btfss	3,2
 10152  1488  2C92               	goto	l3047
 10153  1489  3000               	movlw	0
 10154  148A  00C4               	movwf	?___fttol+3
 10155  148B  3000               	movlw	0
 10156  148C  00C3               	movwf	?___fttol+2
 10157  148D  3000               	movlw	0
 10158  148E  00C2               	movwf	?___fttol+1
 10159  148F  3000               	movlw	0
 10160  1490  00C1               	movwf	?___fttol
 10161  1491  0008               	return
 10162  1492                     l3047:	
 10163  1492  0841               	movf	___fttol@f1,w
 10164  1493  00C5               	movwf	??___fttol
 10165  1494  0842               	movf	___fttol@f1+1,w
 10166  1495  00C6               	movwf	??___fttol+1
 10167  1496  0843               	movf	___fttol@f1+2,w
 10168  1497  00C7               	movwf	??___fttol+2
 10169  1498  3017               	movlw	23
 10170  1499                     u3685:	
 10171  1499  36C7               	lsrf	??___fttol+2,f
 10172  149A  0CC6               	rrf	??___fttol+1,f
 10173  149B  0CC5               	rrf	??___fttol,f
 10174  149C  0B89               	decfsz	9,f
 10175  149D  2C99               	goto	u3685
 10176  149E  0845               	movf	??___fttol,w
 10177  149F  00C8               	movwf	??___fttol+3
 10178  14A0  0848               	movf	??___fttol+3,w
 10179  14A1  00C9               	movwf	___fttol@sign1
 10180  14A2  17C2               	bsf	___fttol@f1+1,7
 10181  14A3  30FF               	movlw	255
 10182  14A4  05C1               	andwf	___fttol@f1,f
 10183  14A5  30FF               	movlw	255
 10184  14A6  05C2               	andwf	___fttol@f1+1,f
 10185  14A7  3000               	movlw	0
 10186  14A8  05C3               	andwf	___fttol@f1+2,f
 10187  14A9  0841               	movf	___fttol@f1,w
 10188  14AA  00CA               	movwf	___fttol@lval
 10189  14AB  0842               	movf	___fttol@f1+1,w
 10190  14AC  00CB               	movwf	___fttol@lval+1
 10191  14AD  0843               	movf	___fttol@f1+2,w
 10192  14AE  00CC               	movwf	___fttol@lval+2
 10193  14AF  01CD               	clrf	___fttol@lval+3
 10194  14B0  308E               	movlw	142
 10195  14B1  02CE               	subwf	___fttol@exp1,f
 10196  14B2  1FCE               	btfss	___fttol@exp1,7
 10197  14B3  2CD0               	goto	l3067
 10198  14B4  084E               	movf	___fttol@exp1,w
 10199  14B5  3A80               	xorlw	128
 10200  14B6  3E8F               	addlw	143
 10201  14B7  1803               	skipnc
 10202  14B8  2CC2               	goto	l3065
 10203  14B9  3000               	movlw	0
 10204  14BA  00C4               	movwf	?___fttol+3
 10205  14BB  3000               	movlw	0
 10206  14BC  00C3               	movwf	?___fttol+2
 10207  14BD  3000               	movlw	0
 10208  14BE  00C2               	movwf	?___fttol+1
 10209  14BF  3000               	movlw	0
 10210  14C0  00C1               	movwf	?___fttol
 10211  14C1  0008               	return
 10212  14C2                     l3065:	
 10213  14C2  3001               	movlw	1
 10214  14C3                     u3715:	
 10215  14C3  36CD               	lsrf	___fttol@lval+3,f
 10216  14C4  0CCC               	rrf	___fttol@lval+2,f
 10217  14C5  0CCB               	rrf	___fttol@lval+1,f
 10218  14C6  0CCA               	rrf	___fttol@lval,f
 10219  14C7  0B89               	decfsz	9,f
 10220  14C8  2CC3               	goto	u3715
 10221  14C9  3001               	movlw	1
 10222  14CA  00C5               	movwf	??___fttol
 10223  14CB  0845               	movf	??___fttol,w
 10224  14CC  07CE               	addwf	___fttol@exp1,f
 10225  14CD  1903               	btfsc	3,2
 10226  14CE  2CE9               	goto	l3075
 10227  14CF  2CC2               	goto	l3065
 10228  14D0                     l3067:	
 10229  14D0  3018               	movlw	24
 10230  14D1  024E               	subwf	___fttol@exp1,w
 10231  14D2  1C03               	skipc
 10232  14D3  2CE6               	goto	l772
 10233  14D4  3000               	movlw	0
 10234  14D5  00C4               	movwf	?___fttol+3
 10235  14D6  3000               	movlw	0
 10236  14D7  00C3               	movwf	?___fttol+2
 10237  14D8  3000               	movlw	0
 10238  14D9  00C2               	movwf	?___fttol+1
 10239  14DA  3000               	movlw	0
 10240  14DB  00C1               	movwf	?___fttol
 10241  14DC  0008               	return
 10242  14DD                     l3073:	
 10243  14DD  3001               	movlw	1
 10244  14DE                     u3745:	
 10245  14DE  35CA               	lslf	___fttol@lval,f
 10246  14DF  0DCB               	rlf	___fttol@lval+1,f
 10247  14E0  0DCC               	rlf	___fttol@lval+2,f
 10248  14E1  0DCD               	rlf	___fttol@lval+3,f
 10249  14E2  0B89               	decfsz	9,f
 10250  14E3  2CDE               	goto	u3745
 10251  14E4  3001               	movlw	1
 10252  14E5  02CE               	subwf	___fttol@exp1,f
 10253  14E6                     l772:	
 10254  14E6  084E               	movf	___fttol@exp1,w
 10255  14E7  1D03               	btfss	3,2
 10256  14E8  2CDD               	goto	l3073
 10257  14E9                     l3075:	
 10258  14E9  0849               	movf	___fttol@sign1,w
 10259  14EA  1903               	btfsc	3,2
 10260  14EB  2CF7               	goto	l3079
 10261  14EC  09CA               	comf	___fttol@lval,f
 10262  14ED  09CB               	comf	___fttol@lval+1,f
 10263  14EE  09CC               	comf	___fttol@lval+2,f
 10264  14EF  09CD               	comf	___fttol@lval+3,f
 10265  14F0  0ACA               	incf	___fttol@lval,f
 10266  14F1  1903               	skipnz
 10267  14F2  0ACB               	incf	___fttol@lval+1,f
 10268  14F3  1903               	skipnz
 10269  14F4  0ACC               	incf	___fttol@lval+2,f
 10270  14F5  1903               	skipnz
 10271  14F6  0ACD               	incf	___fttol@lval+3,f
 10272  14F7                     l3079:	
 10273  14F7  084D               	movf	___fttol@lval+3,w
 10274  14F8  00C4               	movwf	?___fttol+3
 10275  14F9  084C               	movf	___fttol@lval+2,w
 10276  14FA  00C3               	movwf	?___fttol+2
 10277  14FB  084B               	movf	___fttol@lval+1,w
 10278  14FC  00C2               	movwf	?___fttol+1
 10279  14FD  084A               	movf	___fttol@lval,w
 10280  14FE  00C1               	movwf	?___fttol
 10281  14FF  0008               	return
 10282  1500                     __end_of___fttol:	
 10283                           
 10284                           	psect	text13
 10285  1FC2                     __ptext13:	
 10286 ;; *************** function ___ftsub *****************
 10287 ;; Defined at:
 10288 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftsub.c"
 10289 ;; Parameters:    Size  Location     Type
 10290 ;;  f2              3   51[BANK0 ] float 
 10291 ;;  f1              3   54[BANK0 ] float 
 10292 ;; Auto vars:     Size  Location     Type
 10293 ;;		None
 10294 ;; Return value:  Size  Location     Type
 10295 ;;                  3   51[BANK0 ] float 
 10296 ;; Registers used:
 10297 ;;		wreg, status,2, status,0, pclath, cstack
 10298 ;; Tracked objects:
 10299 ;;		On entry : 0/0
 10300 ;;		On exit  : 0/0
 10301 ;;		Unchanged: 0/0
 10302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10303 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10304 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10305 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10306 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10307 ;;Total ram usage:        6 bytes
 10308 ;; Hardware stack levels used:    1
 10309 ;; Hardware stack levels required when called:    2
 10310 ;; This function calls:
 10311 ;;		___ftadd
 10312 ;; This function is called by:
 10313 ;;		_main
 10314 ;;		_sprintf
 10315 ;; This function uses a non-reentrant model
 10316 ;;
 10317                           
 10318                           
 10319                           ;psect for function ___ftsub
 10320  1FC2                     ___ftsub:	
 10321                           
 10322                           ;incstack = 0
 10323                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
 10324  1FC2  0020               	movlb	0	; select bank0
 10325  1FC3  0855               	movf	___ftsub@f2+2,w
 10326  1FC4  0454               	iorwf	___ftsub@f2+1,w
 10327  1FC5  0453               	iorwf	___ftsub@f2,w
 10328  1FC6  1903               	skipnz
 10329  1FC7  2FCA               	goto	l3037
 10330  1FC8  3080               	movlw	128
 10331  1FC9  06D5               	xorwf	___ftsub@f2+2,f
 10332  1FCA                     l3037:	
 10333  1FCA  0856               	movf	___ftsub@f1,w
 10334  1FCB  00C6               	movwf	___ftadd@f1
 10335  1FCC  0857               	movf	___ftsub@f1+1,w
 10336  1FCD  00C7               	movwf	___ftadd@f1+1
 10337  1FCE  0858               	movf	___ftsub@f1+2,w
 10338  1FCF  00C8               	movwf	___ftadd@f1+2
 10339  1FD0  0853               	movf	___ftsub@f2,w
 10340  1FD1  00C9               	movwf	___ftadd@f2
 10341  1FD2  0854               	movf	___ftsub@f2+1,w
 10342  1FD3  00CA               	movwf	___ftadd@f2+1
 10343  1FD4  0855               	movf	___ftsub@f2+2,w
 10344  1FD5  00CB               	movwf	___ftadd@f2+2
 10345  1FD6  3197  270A         	fcall	___ftadd
 10346  1FD8  0020               	movlb	0	; select bank0
 10347  1FD9  0846               	movf	?___ftadd,w
 10348  1FDA  00D3               	movwf	?___ftsub
 10349  1FDB  0847               	movf	?___ftadd+1,w
 10350  1FDC  00D4               	movwf	?___ftsub+1
 10351  1FDD  0848               	movf	?___ftadd+2,w
 10352  1FDE  00D5               	movwf	?___ftsub+2
 10353  1FDF  0008               	return
 10354  1FE0                     __end_of___ftsub:	
 10355                           
 10356                           	psect	text14
 10357  1EC8                     __ptext14:	
 10358 ;; *************** function ___ftneg *****************
 10359 ;; Defined at:
 10360 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftneg.c"
 10361 ;; Parameters:    Size  Location     Type
 10362 ;;  f1              3    0[COMMON] float 
 10363 ;; Auto vars:     Size  Location     Type
 10364 ;;		None
 10365 ;; Return value:  Size  Location     Type
 10366 ;;                  3    0[COMMON] float 
 10367 ;; Registers used:
 10368 ;;		wreg
 10369 ;; Tracked objects:
 10370 ;;		On entry : 0/0
 10371 ;;		On exit  : 0/0
 10372 ;;		Unchanged: 0/0
 10373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10374 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10375 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10376 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10377 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10378 ;;Total ram usage:        3 bytes
 10379 ;; Hardware stack levels used:    1
 10380 ;; This function calls:
 10381 ;;		Nothing
 10382 ;; This function is called by:
 10383 ;;		_main
 10384 ;;		_sprintf
 10385 ;; This function uses a non-reentrant model
 10386 ;;
 10387                           
 10388                           
 10389                           ;psect for function ___ftneg
 10390  1EC8                     ___ftneg:	
 10391                           
 10392                           ;incstack = 0
 10393                           ; Regs used in ___ftneg: [wreg]
 10394  1EC8  0872               	movf	___ftneg@f1+2,w
 10395  1EC9  0471               	iorwf	___ftneg@f1+1,w
 10396  1ECA  0470               	iorwf	___ftneg@f1,w
 10397  1ECB  1903               	skipnz
 10398  1ECC  0008               	return
 10399  1ECD  3080               	movlw	128
 10400  1ECE  06F2               	xorwf	___ftneg@f1+2,f
 10401  1ECF  0008               	return
 10402  1ED0                     __end_of___ftneg:	
 10403                           
 10404                           	psect	text15
 10405  15A9                     __ptext15:	
 10406 ;; *************** function _log *****************
 10407 ;; Defined at:
 10408 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\log.c"
 10409 ;; Parameters:    Size  Location     Type
 10410 ;;  x               3   61[BANK0 ] float 
 10411 ;; Auto vars:     Size  Location     Type
 10412 ;;  exponent        2   65[BANK0 ] int 
 10413 ;; Return value:  Size  Location     Type
 10414 ;;                  3   61[BANK0 ] int 
 10415 ;; Registers used:
 10416 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10417 ;; Tracked objects:
 10418 ;;		On entry : 0/0
 10419 ;;		On exit  : 0/0
 10420 ;;		Unchanged: 0/0
 10421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10422 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10423 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10424 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10425 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10426 ;;Total ram usage:        6 bytes
 10427 ;; Hardware stack levels used:    1
 10428 ;; Hardware stack levels required when called:    3
 10429 ;; This function calls:
 10430 ;;		___awtoft
 10431 ;;		___ftadd
 10432 ;;		___ftge
 10433 ;;		___ftmul
 10434 ;;		_eval_poly
 10435 ;;		_frexp
 10436 ;; This function is called by:
 10437 ;;		_main
 10438 ;; This function uses a non-reentrant model
 10439 ;;
 10440                           
 10441                           
 10442                           ;psect for function _log
 10443  15A9                     _log:	
 10444                           
 10445                           ;incstack = 0
 10446                           ; Regs used in _log: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10447  15A9  0020               	movlb	0	; select bank0
 10448  15AA  085D               	movf	log@x,w
 10449  15AB  00D3               	movwf	___ftge@ff1
 10450  15AC  085E               	movf	log@x+1,w
 10451  15AD  00D4               	movwf	___ftge@ff1+1
 10452  15AE  085F               	movf	log@x+2,w
 10453  15AF  00D5               	movwf	___ftge@ff1+2
 10454  15B0  3000               	movlw	0
 10455  15B1  00D6               	movwf	___ftge@ff2
 10456  15B2  3000               	movlw	0
 10457  15B3  00D7               	movwf	___ftge@ff2+1
 10458  15B4  3000               	movlw	0
 10459  15B5  00D8               	movwf	___ftge@ff2+2
 10460  15B6  3188  2000  3195   	fcall	___ftge
 10461  15B9  1803               	btfsc	3,0
 10462  15BA  2DC7               	goto	l3257
 10463  15BB  3021               	movlw	33
 10464  15BC  0020               	movlb	0	; select bank0
 10465  15BD  00EC               	movwf	_errno
 10466  15BE  3000               	movlw	0
 10467  15BF  00ED               	movwf	_errno+1
 10468  15C0  3000               	movlw	0
 10469  15C1  00DD               	movwf	?_log
 10470  15C2  3000               	movlw	0
 10471  15C3  00DE               	movwf	?_log+1
 10472  15C4  3000               	movlw	0
 10473  15C5  00DF               	movwf	?_log+2
 10474  15C6  0008               	return
 10475  15C7                     l3257:	
 10476  15C7  0020               	movlb	0	; select bank0
 10477  15C8  085F               	movf	log@x+2,w
 10478  15C9  045E               	iorwf	log@x+1,w
 10479  15CA  045D               	iorwf	log@x,w
 10480  15CB  1D03               	skipz
 10481  15CC  2DD8               	goto	l3263
 10482  15CD  3022               	movlw	34
 10483  15CE  00EC               	movwf	_errno
 10484  15CF  3000               	movlw	0
 10485  15D0  00ED               	movwf	_errno+1
 10486  15D1  3000               	movlw	0
 10487  15D2  00DD               	movwf	?_log
 10488  15D3  3000               	movlw	0
 10489  15D4  00DE               	movwf	?_log+1
 10490  15D5  3000               	movlw	0
 10491  15D6  00DF               	movwf	?_log+2
 10492  15D7  0008               	return
 10493  15D8                     l3263:	
 10494  15D8  3000               	movlw	0
 10495  15D9  00C6               	movwf	___ftadd@f1
 10496  15DA  3080               	movlw	128
 10497  15DB  00C7               	movwf	___ftadd@f1+1
 10498  15DC  30BF               	movlw	191
 10499  15DD  00C8               	movwf	___ftadd@f1+2
 10500  15DE  3000               	movlw	0
 10501  15DF  00A8               	movwf	___ftmul@f1
 10502  15E0  3000               	movlw	0
 10503  15E1  00A9               	movwf	___ftmul@f1+1
 10504  15E2  3040               	movlw	64
 10505  15E3  00AA               	movwf	___ftmul@f1+2
 10506  15E4  3061               	movlw	(low (log@exponent| 0))& (0+255)
 10507  15E5  00E0               	movwf	??_log
 10508  15E6  0860               	movf	??_log,w
 10509  15E7  00F3               	movwf	frexp@eptr
 10510  15E8  085D               	movf	log@x,w
 10511  15E9  00F0               	movwf	frexp@value
 10512  15EA  085E               	movf	log@x+1,w
 10513  15EB  00F1               	movwf	frexp@value+1
 10514  15EC  085F               	movf	log@x+2,w
 10515  15ED  00F2               	movwf	frexp@value+2
 10516  15EE  3190  20E0  3195   	fcall	_frexp
 10517  15F1  0870               	movf	?_frexp,w
 10518  15F2  0020               	movlb	0	; select bank0
 10519  15F3  00AB               	movwf	___ftmul@f2
 10520  15F4  0871               	movf	?_frexp+1,w
 10521  15F5  00AC               	movwf	___ftmul@f2+1
 10522  15F6  0872               	movf	?_frexp+2,w
 10523  15F7  00AD               	movwf	___ftmul@f2+2
 10524  15F8  3196  2656  3195   	fcall	___ftmul
 10525  15FB  0020               	movlb	0	; select bank0
 10526  15FC  0828               	movf	?___ftmul,w
 10527  15FD  00C9               	movwf	___ftadd@f2
 10528  15FE  0829               	movf	?___ftmul+1,w
 10529  15FF  00CA               	movwf	___ftadd@f2+1
 10530  1600  082A               	movf	?___ftmul+2,w
 10531  1601  00CB               	movwf	___ftadd@f2+2
 10532  1602  3197  270A  3195   	fcall	___ftadd
 10533  1605  0020               	movlb	0	; select bank0
 10534  1606  0846               	movf	?___ftadd,w
 10535  1607  00DD               	movwf	log@x
 10536  1608  0847               	movf	?___ftadd+1,w
 10537  1609  00DE               	movwf	log@x+1
 10538  160A  0848               	movf	?___ftadd+2,w
 10539  160B  00DF               	movwf	log@x+2
 10540  160C  30FF               	movlw	255
 10541  160D  07E1               	addwf	log@exponent,f
 10542  160E  30FF               	movlw	255
 10543  160F  3DE2               	addwfc	log@exponent+1,f
 10544  1610  085D               	movf	log@x,w
 10545  1611  00D3               	movwf	eval_poly@x
 10546  1612  085E               	movf	log@x+1,w
 10547  1613  00D4               	movwf	eval_poly@x+1
 10548  1614  085F               	movf	log@x+2,w
 10549  1615  00D5               	movwf	eval_poly@x+2
 10550  1616  3076               	movlw	low (log@coeff| (0+32768))
 10551  1617  00D6               	movwf	eval_poly@d
 10552  1618  3098               	movlw	high (log@coeff| (0+32768))
 10553  1619  00D7               	movwf	eval_poly@d+1
 10554  161A  3008               	movlw	8
 10555  161B  00D8               	movwf	eval_poly@n
 10556  161C  3000               	movlw	0
 10557  161D  00D9               	movwf	eval_poly@n+1
 10558  161E  3192  2247  3195   	fcall	_eval_poly
 10559  1621  0020               	movlb	0	; select bank0
 10560  1622  0853               	movf	?_eval_poly,w
 10561  1623  00DD               	movwf	log@x
 10562  1624  0854               	movf	?_eval_poly+1,w
 10563  1625  00DE               	movwf	log@x+1
 10564  1626  0855               	movf	?_eval_poly+2,w
 10565  1627  00DF               	movwf	log@x+2
 10566  1628  085D               	movf	log@x,w
 10567  1629  00C6               	movwf	___ftadd@f1
 10568  162A  085E               	movf	log@x+1,w
 10569  162B  00C7               	movwf	___ftadd@f1+1
 10570  162C  085F               	movf	log@x+2,w
 10571  162D  00C8               	movwf	___ftadd@f1+2
 10572  162E  3072               	movlw	114
 10573  162F  00A8               	movwf	___ftmul@f1
 10574  1630  3031               	movlw	49
 10575  1631  00A9               	movwf	___ftmul@f1+1
 10576  1632  303F               	movlw	63
 10577  1633  00AA               	movwf	___ftmul@f1+2
 10578  1634  0862               	movf	log@exponent+1,w
 10579  1635  00F9               	movwf	___awtoft@c+1
 10580  1636  0861               	movf	log@exponent,w
 10581  1637  00F8               	movwf	___awtoft@c
 10582  1638  319F  27E0  3195   	fcall	___awtoft
 10583  163B  0878               	movf	?___awtoft,w
 10584  163C  0020               	movlb	0	; select bank0
 10585  163D  00AB               	movwf	___ftmul@f2
 10586  163E  0879               	movf	?___awtoft+1,w
 10587  163F  00AC               	movwf	___ftmul@f2+1
 10588  1640  087A               	movf	?___awtoft+2,w
 10589  1641  00AD               	movwf	___ftmul@f2+2
 10590  1642  3196  2656  3195   	fcall	___ftmul
 10591  1645  0020               	movlb	0	; select bank0
 10592  1646  0828               	movf	?___ftmul,w
 10593  1647  00C9               	movwf	___ftadd@f2
 10594  1648  0829               	movf	?___ftmul+1,w
 10595  1649  00CA               	movwf	___ftadd@f2+1
 10596  164A  082A               	movf	?___ftmul+2,w
 10597  164B  00CB               	movwf	___ftadd@f2+2
 10598  164C  3197  270A         	fcall	___ftadd
 10599  164E  0020               	movlb	0	; select bank0
 10600  164F  0846               	movf	?___ftadd,w
 10601  1650  00DD               	movwf	?_log
 10602  1651  0847               	movf	?___ftadd+1,w
 10603  1652  00DE               	movwf	?_log+1
 10604  1653  0848               	movf	?___ftadd+2,w
 10605  1654  00DF               	movwf	?_log+2
 10606  1655  0008               	return
 10607  1656                     __end_of_log:	
 10608                           
 10609                           	psect	text16
 10610  10E0                     __ptext16:	
 10611 ;; *************** function _frexp *****************
 10612 ;; Defined at:
 10613 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\frexp.c"
 10614 ;; Parameters:    Size  Location     Type
 10615 ;;  value           3    0[COMMON] int 
 10616 ;;  eptr            1    3[COMMON] PTR int 
 10617 ;;		 -> log@exponent(2), 
 10618 ;; Auto vars:     Size  Location     Type
 10619 ;;		None
 10620 ;; Return value:  Size  Location     Type
 10621 ;;                  3    0[COMMON] PTR int 
 10622 ;; Registers used:
 10623 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10624 ;; Tracked objects:
 10625 ;;		On entry : 0/0
 10626 ;;		On exit  : 0/0
 10627 ;;		Unchanged: 0/0
 10628 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10629 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10630 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10631 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10632 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10633 ;;Total ram usage:        6 bytes
 10634 ;; Hardware stack levels used:    1
 10635 ;; This function calls:
 10636 ;;		Nothing
 10637 ;; This function is called by:
 10638 ;;		_log
 10639 ;; This function uses a non-reentrant model
 10640 ;;
 10641                           
 10642                           
 10643                           ;psect for function _frexp
 10644  10E0                     _frexp:	
 10645                           
 10646                           ;incstack = 0
 10647                           ; Regs used in _frexp: [wreg+fsr1l+fsr1h+status,2+status,0]
 10648  10E0  0872               	movf	frexp@value+2,w
 10649  10E1  0471               	iorwf	frexp@value+1,w
 10650  10E2  0470               	iorwf	frexp@value,w
 10651  10E3  1D03               	skipz
 10652  10E4  28F2               	goto	l3145
 10653  10E5  0873               	movf	frexp@eptr,w
 10654  10E6  0086               	movwf	6
 10655  10E7  0187               	clrf	7
 10656  10E8  3000               	movlw	0
 10657  10E9  3FC0               	movwi [0]fsr1
 10658  10EA  3FC1               	movwi [1]fsr1
 10659  10EB  3000               	movlw	0
 10660  10EC  00F0               	movwf	?_frexp
 10661  10ED  3000               	movlw	0
 10662  10EE  00F1               	movwf	?_frexp+1
 10663  10EF  3000               	movlw	0
 10664  10F0  00F2               	movwf	?_frexp+2
 10665  10F1  0008               	return
 10666  10F2                     l3145:	
 10667  10F2  0872               	movf	frexp@value+2,w
 10668  10F3  397F               	andlw	127
 10669  10F4  00F4               	movwf	??_frexp
 10670  10F5  01F5               	clrf	??_frexp+1
 10671  10F6  35F4               	lslf	??_frexp,f
 10672  10F7  0DF5               	rlf	??_frexp+1,f
 10673  10F8  0873               	movf	frexp@eptr,w
 10674  10F9  0086               	movwf	6
 10675  10FA  0187               	clrf	7
 10676  10FB  0874               	movf	??_frexp,w
 10677  10FC  3FC0               	movwi [0]fsr1
 10678  10FD  0875               	movf	??_frexp+1,w
 10679  10FE  3FC1               	movwi [1]fsr1
 10680  10FF  0D71               	rlf	frexp@value+1,w
 10681  1100  0D71               	rlf	frexp@value+1,w
 10682  1101  3901               	andlw	1
 10683  1102  00F4               	movwf	??_frexp
 10684  1103  01F5               	clrf	??_frexp+1
 10685  1104  0873               	movf	frexp@eptr,w
 10686  1105  0086               	movwf	6
 10687  1106  0187               	clrf	7
 10688  1107  0874               	movf	??_frexp,w
 10689  1108  0481               	iorwf	1,f
 10690  1109  3141               	addfsr 1,1
 10691  110A  0875               	movf	??_frexp+1,w
 10692  110B  0481               	iorwf	1,f
 10693  110C  0873               	movf	frexp@eptr,w
 10694  110D  0086               	movwf	6
 10695  110E  0187               	clrf	7
 10696  110F  3082               	movlw	130
 10697  1110  0781               	addwf	1,f
 10698  1111  3141               	addfsr 1,1
 10699  1112  30FF               	movlw	255
 10700  1113  3D81               	addwfc	1,f
 10701  1114  317F               	addfsr 1,-1
 10702  1115  0872               	movf	frexp@value+2,w
 10703  1116  3980               	andlw	-128
 10704  1117  383F               	iorlw	63
 10705  1118  00F2               	movwf	frexp@value+2
 10706  1119  13F1               	bcf	frexp@value+1,7
 10707  111A  0008               	return
 10708  111B                     __end_of_frexp:	
 10709                           
 10710                           	psect	text17
 10711  1247                     __ptext17:	
 10712 ;; *************** function _eval_poly *****************
 10713 ;; Defined at:
 10714 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\evalpoly.c"
 10715 ;; Parameters:    Size  Location     Type
 10716 ;;  x               3   51[BANK0 ] PTR int 
 10717 ;;  d               2   54[BANK0 ] PTR const 
 10718 ;;		 -> log@coeff(27), 
 10719 ;;  n               2   56[BANK0 ] int 
 10720 ;; Auto vars:     Size  Location     Type
 10721 ;;  res             3   58[BANK0 ] int 
 10722 ;; Return value:  Size  Location     Type
 10723 ;;                  3   51[BANK0 ] int 
 10724 ;; Registers used:
 10725 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10726 ;; Tracked objects:
 10727 ;;		On entry : 0/0
 10728 ;;		On exit  : 0/0
 10729 ;;		Unchanged: 0/0
 10730 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10731 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10732 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10733 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10734 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10735 ;;Total ram usage:       10 bytes
 10736 ;; Hardware stack levels used:    1
 10737 ;; Hardware stack levels required when called:    2
 10738 ;; This function calls:
 10739 ;;		___ftadd
 10740 ;;		___ftmul
 10741 ;;		___wmul
 10742 ;; This function is called by:
 10743 ;;		_log
 10744 ;; This function uses a non-reentrant model
 10745 ;;
 10746                           
 10747                           
 10748                           ;psect for function _eval_poly
 10749  1247                     _eval_poly:	
 10750                           
 10751                           ;incstack = 0
 10752                           ; Regs used in _eval_poly: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10753  1247  0020               	movlb	0	; select bank0
 10754  1248  0859               	movf	eval_poly@n+1,w
 10755  1249  00A5               	movwf	___wmul@multiplier+1
 10756  124A  0858               	movf	eval_poly@n,w
 10757  124B  00A4               	movwf	___wmul@multiplier
 10758  124C  3003               	movlw	3
 10759  124D  00A6               	movwf	___wmul@multiplicand
 10760  124E  3000               	movlw	0
 10761  124F  00A7               	movwf	___wmul@multiplicand+1
 10762  1250  319F  27A6  3192   	fcall	___wmul
 10763  1253  0020               	movlb	0	; select bank0
 10764  1254  0856               	movf	eval_poly@d,w
 10765  1255  0724               	addwf	?___wmul,w
 10766  1256  0084               	movwf	4
 10767  1257  0857               	movf	eval_poly@d+1,w
 10768  1258  3D25               	addwfc	?___wmul+1,w
 10769  1259  0085               	movwf	5
 10770  125A  3F00               	moviw [0]fsr0
 10771  125B  00DA               	movwf	eval_poly@res
 10772  125C  3F01               	moviw [1]fsr0
 10773  125D  00DB               	movwf	eval_poly@res+1
 10774  125E  3F02               	moviw [2]fsr0
 10775  125F                     L8:	
 10776  125F  00DC               	movwf	eval_poly@res+2
 10777  1260  0858               	movf	eval_poly@n,w
 10778  1261  0459               	iorwf	eval_poly@n+1,w
 10779  1262  1903               	btfsc	3,2
 10780  1263  2AA0               	goto	l3163
 10781  1264  30FF               	movlw	255
 10782  1265  07D8               	addwf	eval_poly@n,f
 10783  1266  30FF               	movlw	255
 10784  1267  3DD9               	addwfc	eval_poly@n+1,f
 10785  1268  0859               	movf	eval_poly@n+1,w
 10786  1269  00A5               	movwf	___wmul@multiplier+1
 10787  126A  0858               	movf	eval_poly@n,w
 10788  126B  00A4               	movwf	___wmul@multiplier
 10789  126C  3003               	movlw	3
 10790  126D  00A6               	movwf	___wmul@multiplicand
 10791  126E  3000               	movlw	0
 10792  126F  00A7               	movwf	___wmul@multiplicand+1
 10793  1270  319F  27A6  3192   	fcall	___wmul
 10794  1273  0020               	movlb	0	; select bank0
 10795  1274  0856               	movf	eval_poly@d,w
 10796  1275  0724               	addwf	?___wmul,w
 10797  1276  0084               	movwf	4
 10798  1277  0857               	movf	eval_poly@d+1,w
 10799  1278  3D25               	addwfc	?___wmul+1,w
 10800  1279  0085               	movwf	5
 10801  127A  3F00               	moviw [0]fsr0
 10802  127B  00C6               	movwf	___ftadd@f1
 10803  127C  3F01               	moviw [1]fsr0
 10804  127D  00C7               	movwf	___ftadd@f1+1
 10805  127E  3F02               	moviw [2]fsr0
 10806  127F  00C8               	movwf	___ftadd@f1+2
 10807  1280  085A               	movf	eval_poly@res,w
 10808  1281  00A8               	movwf	___ftmul@f1
 10809  1282  085B               	movf	eval_poly@res+1,w
 10810  1283  00A9               	movwf	___ftmul@f1+1
 10811  1284  085C               	movf	eval_poly@res+2,w
 10812  1285  00AA               	movwf	___ftmul@f1+2
 10813  1286  0853               	movf	eval_poly@x,w
 10814  1287  00AB               	movwf	___ftmul@f2
 10815  1288  0854               	movf	eval_poly@x+1,w
 10816  1289  00AC               	movwf	___ftmul@f2+1
 10817  128A  0855               	movf	eval_poly@x+2,w
 10818  128B  00AD               	movwf	___ftmul@f2+2
 10819  128C  3196  2656  3192   	fcall	___ftmul
 10820  128F  0020               	movlb	0	; select bank0
 10821  1290  0828               	movf	?___ftmul,w
 10822  1291  00C9               	movwf	___ftadd@f2
 10823  1292  0829               	movf	?___ftmul+1,w
 10824  1293  00CA               	movwf	___ftadd@f2+1
 10825  1294  082A               	movf	?___ftmul+2,w
 10826  1295  00CB               	movwf	___ftadd@f2+2
 10827  1296  3197  270A  3192   	fcall	___ftadd
 10828  1299  0020               	movlb	0	; select bank0
 10829  129A  0846               	movf	?___ftadd,w
 10830  129B  00DA               	movwf	eval_poly@res
 10831  129C  0847               	movf	?___ftadd+1,w
 10832  129D  00DB               	movwf	eval_poly@res+1
 10833  129E  0848               	movf	?___ftadd+2,w
 10834  129F  2A5F               	goto	L8
 10835  12A0                     l3163:	
 10836  12A0  085A               	movf	eval_poly@res,w
 10837  12A1  00D3               	movwf	?_eval_poly
 10838  12A2  085B               	movf	eval_poly@res+1,w
 10839  12A3  00D4               	movwf	?_eval_poly+1
 10840  12A4  085C               	movf	eval_poly@res+2,w
 10841  12A5  00D5               	movwf	?_eval_poly+2
 10842  12A6  0008               	return
 10843  12A7                     __end_of_eval_poly:	
 10844                           
 10845                           	psect	text18
 10846  1FA6                     __ptext18:	
 10847 ;; *************** function ___wmul *****************
 10848 ;; Defined at:
 10849 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul16.c"
 10850 ;; Parameters:    Size  Location     Type
 10851 ;;  multiplier      2    4[BANK0 ] unsigned int 
 10852 ;;  multiplicand    2    6[BANK0 ] unsigned int 
 10853 ;; Auto vars:     Size  Location     Type
 10854 ;;  product         2   12[COMMON] unsigned int 
 10855 ;; Return value:  Size  Location     Type
 10856 ;;                  2    4[BANK0 ] unsigned int 
 10857 ;; Registers used:
 10858 ;;		wreg, status,2, status,0
 10859 ;; Tracked objects:
 10860 ;;		On entry : 0/0
 10861 ;;		On exit  : 0/0
 10862 ;;		Unchanged: 0/0
 10863 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10864 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10865 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10866 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10867 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10868 ;;Total ram usage:        6 bytes
 10869 ;; Hardware stack levels used:    1
 10870 ;; This function calls:
 10871 ;;		Nothing
 10872 ;; This function is called by:
 10873 ;;		_fround
 10874 ;;		_scale
 10875 ;;		_sprintf
 10876 ;;		_eval_poly
 10877 ;; This function uses a non-reentrant model
 10878 ;;
 10879                           
 10880                           
 10881                           ;psect for function ___wmul
 10882  1FA6                     ___wmul:	
 10883                           
 10884                           ;incstack = 0
 10885                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 10886  1FA6  01FC               	clrf	___wmul@product
 10887  1FA7  01FD               	clrf	___wmul@product+1
 10888  1FA8                     l2469:	
 10889  1FA8  0020               	movlb	0	; select bank0
 10890  1FA9  1C24               	btfss	___wmul@multiplier,0
 10891  1FAA  2FAF               	goto	l486
 10892  1FAB  0826               	movf	___wmul@multiplicand,w
 10893  1FAC  07FC               	addwf	___wmul@product,f
 10894  1FAD  0827               	movf	___wmul@multiplicand+1,w
 10895  1FAE  3DFD               	addwfc	___wmul@product+1,f
 10896  1FAF                     l486:	
 10897  1FAF  3001               	movlw	1
 10898  1FB0                     u2665:	
 10899  1FB0  35A6               	lslf	___wmul@multiplicand,f
 10900  1FB1  0DA7               	rlf	___wmul@multiplicand+1,f
 10901  1FB2  0B89               	decfsz	9,f
 10902  1FB3  2FB0               	goto	u2665
 10903  1FB4  3001               	movlw	1
 10904  1FB5                     u2675:	
 10905  1FB5  36A5               	lsrf	___wmul@multiplier+1,f
 10906  1FB6  0CA4               	rrf	___wmul@multiplier,f
 10907  1FB7  0B89               	decfsz	9,f
 10908  1FB8  2FB5               	goto	u2675
 10909  1FB9  0824               	movf	___wmul@multiplier,w
 10910  1FBA  0425               	iorwf	___wmul@multiplier+1,w
 10911  1FBB  1D03               	btfss	3,2
 10912  1FBC  2FA8               	goto	l2469
 10913  1FBD  087D               	movf	___wmul@product+1,w
 10914  1FBE  00A5               	movwf	?___wmul+1
 10915  1FBF  087C               	movf	___wmul@product,w
 10916  1FC0  00A4               	movwf	?___wmul
 10917  1FC1  0008               	return
 10918  1FC2                     __end_of___wmul:	
 10919                           
 10920                           	psect	text19
 10921  1656                     __ptext19:	
 10922 ;; *************** function ___ftmul *****************
 10923 ;; Defined at:
 10924 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftmul.c"
 10925 ;; Parameters:    Size  Location     Type
 10926 ;;  f1              3    8[BANK0 ] float 
 10927 ;;  f2              3   11[BANK0 ] float 
 10928 ;; Auto vars:     Size  Location     Type
 10929 ;;  f3_as_produc    3   19[BANK0 ] unsigned um
 10930 ;;  sign            1   23[BANK0 ] unsigned char 
 10931 ;;  cntr            1   22[BANK0 ] unsigned char 
 10932 ;;  exp             1   18[BANK0 ] unsigned char 
 10933 ;; Return value:  Size  Location     Type
 10934 ;;                  3    8[BANK0 ] float 
 10935 ;; Registers used:
 10936 ;;		wreg, status,2, status,0, pclath, cstack
 10937 ;; Tracked objects:
 10938 ;;		On entry : 0/0
 10939 ;;		On exit  : 0/0
 10940 ;;		Unchanged: 0/0
 10941 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10942 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10943 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10944 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10945 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10946 ;;Total ram usage:       16 bytes
 10947 ;; Hardware stack levels used:    1
 10948 ;; Hardware stack levels required when called:    1
 10949 ;; This function calls:
 10950 ;;		___ftpack
 10951 ;; This function is called by:
 10952 ;;		_fround
 10953 ;;		_scale
 10954 ;;		_sprintf
 10955 ;;		_log
 10956 ;;		_eval_poly
 10957 ;; This function uses a non-reentrant model
 10958 ;;
 10959                           
 10960                           
 10961                           ;psect for function ___ftmul
 10962  1656                     ___ftmul:	
 10963                           
 10964                           ;incstack = 0
 10965                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 10966  1656  0020               	movlb	0	; select bank0
 10967  1657  0828               	movf	___ftmul@f1,w
 10968  1658  00AE               	movwf	??___ftmul
 10969  1659  0829               	movf	___ftmul@f1+1,w
 10970  165A  00AF               	movwf	??___ftmul+1
 10971  165B  082A               	movf	___ftmul@f1+2,w
 10972  165C  00B0               	movwf	??___ftmul+2
 10973  165D  1003               	clrc
 10974  165E  0D2F               	rlf	??___ftmul+1,w
 10975  165F  0D30               	rlf	??___ftmul+2,w
 10976  1660  00B1               	movwf	??___ftmul+3
 10977  1661  0831               	movf	??___ftmul+3,w
 10978  1662  00B2               	movwf	___ftmul@exp
 10979  1663  0832               	movf	___ftmul@exp,w
 10980  1664  1D03               	btfss	3,2
 10981  1665  2E6D               	goto	l2639
 10982  1666  3000               	movlw	0
 10983  1667  00A8               	movwf	?___ftmul
 10984  1668  3000               	movlw	0
 10985  1669  00A9               	movwf	?___ftmul+1
 10986  166A  3000               	movlw	0
 10987  166B  00AA               	movwf	?___ftmul+2
 10988  166C  0008               	return
 10989  166D                     l2639:	
 10990  166D  082B               	movf	___ftmul@f2,w
 10991  166E  00AE               	movwf	??___ftmul
 10992  166F  082C               	movf	___ftmul@f2+1,w
 10993  1670  00AF               	movwf	??___ftmul+1
 10994  1671  082D               	movf	___ftmul@f2+2,w
 10995  1672  00B0               	movwf	??___ftmul+2
 10996  1673  1003               	clrc
 10997  1674  0D2F               	rlf	??___ftmul+1,w
 10998  1675  0D30               	rlf	??___ftmul+2,w
 10999  1676  00B1               	movwf	??___ftmul+3
 11000  1677  0831               	movf	??___ftmul+3,w
 11001  1678  00B7               	movwf	___ftmul@sign
 11002  1679  0837               	movf	___ftmul@sign,w
 11003  167A  1D03               	btfss	3,2
 11004  167B  2E83               	goto	l2645
 11005  167C  3000               	movlw	0
 11006  167D  00A8               	movwf	?___ftmul
 11007  167E  3000               	movlw	0
 11008  167F  00A9               	movwf	?___ftmul+1
 11009  1680  3000               	movlw	0
 11010  1681  00AA               	movwf	?___ftmul+2
 11011  1682  0008               	return
 11012  1683                     l2645:	
 11013  1683  0837               	movf	___ftmul@sign,w
 11014  1684  3E7B               	addlw	123
 11015  1685  00AE               	movwf	??___ftmul
 11016  1686  082E               	movf	??___ftmul,w
 11017  1687  07B2               	addwf	___ftmul@exp,f
 11018  1688  0828               	movf	___ftmul@f1,w
 11019  1689  00AE               	movwf	??___ftmul
 11020  168A  0829               	movf	___ftmul@f1+1,w
 11021  168B  00AF               	movwf	??___ftmul+1
 11022  168C  082A               	movf	___ftmul@f1+2,w
 11023  168D  00B0               	movwf	??___ftmul+2
 11024  168E  3010               	movlw	16
 11025  168F                     u3135:	
 11026  168F  36B0               	lsrf	??___ftmul+2,f
 11027  1690  0CAF               	rrf	??___ftmul+1,f
 11028  1691  0CAE               	rrf	??___ftmul,f
 11029  1692  0B89               	decfsz	9,f
 11030  1693  2E8F               	goto	u3135
 11031  1694  082E               	movf	??___ftmul,w
 11032  1695  00B1               	movwf	??___ftmul+3
 11033  1696  0831               	movf	??___ftmul+3,w
 11034  1697  00B7               	movwf	___ftmul@sign
 11035  1698  082B               	movf	___ftmul@f2,w
 11036  1699  00AE               	movwf	??___ftmul
 11037  169A  082C               	movf	___ftmul@f2+1,w
 11038  169B  00AF               	movwf	??___ftmul+1
 11039  169C  082D               	movf	___ftmul@f2+2,w
 11040  169D  00B0               	movwf	??___ftmul+2
 11041  169E  3010               	movlw	16
 11042  169F                     u3145:	
 11043  169F  36B0               	lsrf	??___ftmul+2,f
 11044  16A0  0CAF               	rrf	??___ftmul+1,f
 11045  16A1  0CAE               	rrf	??___ftmul,f
 11046  16A2  0B89               	decfsz	9,f
 11047  16A3  2E9F               	goto	u3145
 11048  16A4  082E               	movf	??___ftmul,w
 11049  16A5  00B1               	movwf	??___ftmul+3
 11050  16A6  0831               	movf	??___ftmul+3,w
 11051  16A7  06B7               	xorwf	___ftmul@sign,f
 11052  16A8  3080               	movlw	128
 11053  16A9  00AE               	movwf	??___ftmul
 11054  16AA  082E               	movf	??___ftmul,w
 11055  16AB  05B7               	andwf	___ftmul@sign,f
 11056  16AC  17A9               	bsf	___ftmul@f1+1,7
 11057  16AD  17AC               	bsf	___ftmul@f2+1,7
 11058  16AE  30FF               	movlw	255
 11059  16AF  05AB               	andwf	___ftmul@f2,f
 11060  16B0  30FF               	movlw	255
 11061  16B1  05AC               	andwf	___ftmul@f2+1,f
 11062  16B2  3000               	movlw	0
 11063  16B3  05AD               	andwf	___ftmul@f2+2,f
 11064  16B4  3000               	movlw	0
 11065  16B5  00B3               	movwf	___ftmul@f3_as_product
 11066  16B6  3000               	movlw	0
 11067  16B7  00B4               	movwf	___ftmul@f3_as_product+1
 11068  16B8  3000               	movlw	0
 11069  16B9  00B5               	movwf	___ftmul@f3_as_product+2
 11070  16BA  3007               	movlw	7
 11071  16BB  00AE               	movwf	??___ftmul
 11072  16BC  082E               	movf	??___ftmul,w
 11073  16BD  00B6               	movwf	___ftmul@cntr
 11074  16BE                     l2657:	
 11075  16BE  1C28               	btfss	___ftmul@f1,0
 11076  16BF  2EC6               	goto	l2661
 11077  16C0  082B               	movf	___ftmul@f2,w
 11078  16C1  07B3               	addwf	___ftmul@f3_as_product,f
 11079  16C2  082C               	movf	___ftmul@f2+1,w
 11080  16C3  3DB4               	addwfc	___ftmul@f3_as_product+1,f
 11081  16C4  082D               	movf	___ftmul@f2+2,w
 11082  16C5  3DB5               	addwfc	___ftmul@f3_as_product+2,f
 11083  16C6                     l2661:	
 11084  16C6  3001               	movlw	1
 11085  16C7                     u3165:	
 11086  16C7  36AA               	lsrf	___ftmul@f1+2,f
 11087  16C8  0CA9               	rrf	___ftmul@f1+1,f
 11088  16C9  0CA8               	rrf	___ftmul@f1,f
 11089  16CA  0B89               	decfsz	9,f
 11090  16CB  2EC7               	goto	u3165
 11091  16CC  3001               	movlw	1
 11092  16CD                     u3175:	
 11093  16CD  35AB               	lslf	___ftmul@f2,f
 11094  16CE  0DAC               	rlf	___ftmul@f2+1,f
 11095  16CF  0DAD               	rlf	___ftmul@f2+2,f
 11096  16D0  0B89               	decfsz	9,f
 11097  16D1  2ECD               	goto	u3175
 11098  16D2  3001               	movlw	1
 11099  16D3  02B6               	subwf	___ftmul@cntr,f
 11100  16D4  1D03               	btfss	3,2
 11101  16D5  2EBE               	goto	l2657
 11102  16D6  3009               	movlw	9
 11103  16D7  00AE               	movwf	??___ftmul
 11104  16D8  082E               	movf	??___ftmul,w
 11105  16D9  00B6               	movwf	___ftmul@cntr
 11106  16DA                     l2669:	
 11107  16DA  1C28               	btfss	___ftmul@f1,0
 11108  16DB  2EE2               	goto	l2673
 11109  16DC  082B               	movf	___ftmul@f2,w
 11110  16DD  07B3               	addwf	___ftmul@f3_as_product,f
 11111  16DE  082C               	movf	___ftmul@f2+1,w
 11112  16DF  3DB4               	addwfc	___ftmul@f3_as_product+1,f
 11113  16E0  082D               	movf	___ftmul@f2+2,w
 11114  16E1  3DB5               	addwfc	___ftmul@f3_as_product+2,f
 11115  16E2                     l2673:	
 11116  16E2  3001               	movlw	1
 11117  16E3                     u3205:	
 11118  16E3  36AA               	lsrf	___ftmul@f1+2,f
 11119  16E4  0CA9               	rrf	___ftmul@f1+1,f
 11120  16E5  0CA8               	rrf	___ftmul@f1,f
 11121  16E6  0B89               	decfsz	9,f
 11122  16E7  2EE3               	goto	u3205
 11123  16E8  3001               	movlw	1
 11124  16E9                     u3215:	
 11125  16E9  36B5               	lsrf	___ftmul@f3_as_product+2,f
 11126  16EA  0CB4               	rrf	___ftmul@f3_as_product+1,f
 11127  16EB  0CB3               	rrf	___ftmul@f3_as_product,f
 11128  16EC  0B89               	decfsz	9,f
 11129  16ED  2EE9               	goto	u3215
 11130  16EE  3001               	movlw	1
 11131  16EF  02B6               	subwf	___ftmul@cntr,f
 11132  16F0  1D03               	btfss	3,2
 11133  16F1  2EDA               	goto	l2669
 11134  16F2  0833               	movf	___ftmul@f3_as_product,w
 11135  16F3  00F0               	movwf	___ftpack@arg
 11136  16F4  0834               	movf	___ftmul@f3_as_product+1,w
 11137  16F5  00F1               	movwf	___ftpack@arg+1
 11138  16F6  0835               	movf	___ftmul@f3_as_product+2,w
 11139  16F7  00F2               	movwf	___ftpack@arg+2
 11140  16F8  0832               	movf	___ftmul@exp,w
 11141  16F9  00AE               	movwf	??___ftmul
 11142  16FA  082E               	movf	??___ftmul,w
 11143  16FB  00F3               	movwf	___ftpack@exp
 11144  16FC  0837               	movf	___ftmul@sign,w
 11145  16FD  00AF               	movwf	??___ftmul+1
 11146  16FE  082F               	movf	??___ftmul+1,w
 11147  16FF  00F4               	movwf	___ftpack@sign
 11148  1700  3192  22A7         	fcall	___ftpack
 11149  1702  0870               	movf	?___ftpack,w
 11150  1703  0020               	movlb	0	; select bank0
 11151  1704  00A8               	movwf	?___ftmul
 11152  1705  0871               	movf	?___ftpack+1,w
 11153  1706  00A9               	movwf	?___ftmul+1
 11154  1707  0872               	movf	?___ftpack+2,w
 11155  1708  00AA               	movwf	?___ftmul+2
 11156  1709  0008               	return
 11157  170A                     __end_of___ftmul:	
 11158                           
 11159                           	psect	text20
 11160  170A                     __ptext20:	
 11161 ;; *************** function ___ftadd *****************
 11162 ;; Defined at:
 11163 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftadd.c"
 11164 ;; Parameters:    Size  Location     Type
 11165 ;;  f1              3   38[BANK0 ] float 
 11166 ;;  f2              3   41[BANK0 ] float 
 11167 ;; Auto vars:     Size  Location     Type
 11168 ;;  exp1            1   50[BANK0 ] unsigned char 
 11169 ;;  exp2            1   49[BANK0 ] unsigned char 
 11170 ;;  sign            1   48[BANK0 ] unsigned char 
 11171 ;; Return value:  Size  Location     Type
 11172 ;;                  3   38[BANK0 ] float 
 11173 ;; Registers used:
 11174 ;;		wreg, status,2, status,0, pclath, cstack
 11175 ;; Tracked objects:
 11176 ;;		On entry : 0/0
 11177 ;;		On exit  : 0/0
 11178 ;;		Unchanged: 0/0
 11179 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11180 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11181 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11182 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11183 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11184 ;;Total ram usage:       13 bytes
 11185 ;; Hardware stack levels used:    1
 11186 ;; Hardware stack levels required when called:    1
 11187 ;; This function calls:
 11188 ;;		___ftpack
 11189 ;; This function is called by:
 11190 ;;		_main
 11191 ;;		_sprintf
 11192 ;;		___ftsub
 11193 ;;		_log
 11194 ;;		_eval_poly
 11195 ;; This function uses a non-reentrant model
 11196 ;;
 11197                           
 11198                           
 11199                           ;psect for function ___ftadd
 11200  170A                     ___ftadd:	
 11201                           
 11202                           ;incstack = 0
 11203                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 11204  170A  0020               	movlb	0	; select bank0
 11205  170B  0846               	movf	___ftadd@f1,w
 11206  170C  00CC               	movwf	??___ftadd
 11207  170D  0847               	movf	___ftadd@f1+1,w
 11208  170E  00CD               	movwf	??___ftadd+1
 11209  170F  0848               	movf	___ftadd@f1+2,w
 11210  1710  00CE               	movwf	??___ftadd+2
 11211  1711  1003               	clrc
 11212  1712  0D4D               	rlf	??___ftadd+1,w
 11213  1713  0D4E               	rlf	??___ftadd+2,w
 11214  1714  00CF               	movwf	??___ftadd+3
 11215  1715  084F               	movf	??___ftadd+3,w
 11216  1716  00D2               	movwf	___ftadd@exp1
 11217  1717  0849               	movf	___ftadd@f2,w
 11218  1718  00CC               	movwf	??___ftadd
 11219  1719  084A               	movf	___ftadd@f2+1,w
 11220  171A  00CD               	movwf	??___ftadd+1
 11221  171B  084B               	movf	___ftadd@f2+2,w
 11222  171C  00CE               	movwf	??___ftadd+2
 11223  171D  1003               	clrc
 11224  171E  0D4D               	rlf	??___ftadd+1,w
 11225  171F  0D4E               	rlf	??___ftadd+2,w
 11226  1720  00CF               	movwf	??___ftadd+3
 11227  1721  084F               	movf	??___ftadd+3,w
 11228  1722  00D1               	movwf	___ftadd@exp2
 11229  1723  0852               	movf	___ftadd@exp1,w
 11230  1724  1903               	btfsc	3,2
 11231  1725  2F32               	goto	l2569
 11232  1726  0851               	movf	___ftadd@exp2,w
 11233  1727  0252               	subwf	___ftadd@exp1,w
 11234  1728  1803               	skipnc
 11235  1729  2F39               	goto	l2573
 11236  172A  0352               	decf	___ftadd@exp1,w
 11237  172B  3AFF               	xorlw	255
 11238  172C  0751               	addwf	___ftadd@exp2,w
 11239  172D  00CC               	movwf	??___ftadd
 11240  172E  3019               	movlw	25
 11241  172F  024C               	subwf	??___ftadd,w
 11242  1730  1C03               	skipc
 11243  1731  2F39               	goto	l2573
 11244  1732                     l2569:	
 11245  1732  0849               	movf	___ftadd@f2,w
 11246  1733  00C6               	movwf	?___ftadd
 11247  1734  084A               	movf	___ftadd@f2+1,w
 11248  1735  00C7               	movwf	?___ftadd+1
 11249  1736  084B               	movf	___ftadd@f2+2,w
 11250  1737  00C8               	movwf	?___ftadd+2
 11251  1738  0008               	return
 11252  1739                     l2573:	
 11253  1739  0851               	movf	___ftadd@exp2,w
 11254  173A  1903               	btfsc	3,2
 11255  173B  0008               	return
 11256  173C  0852               	movf	___ftadd@exp1,w
 11257  173D  0251               	subwf	___ftadd@exp2,w
 11258  173E  1803               	skipnc
 11259  173F  2F48               	goto	l2579
 11260  1740  0351               	decf	___ftadd@exp2,w
 11261  1741  3AFF               	xorlw	255
 11262  1742  0752               	addwf	___ftadd@exp1,w
 11263  1743  00CC               	movwf	??___ftadd
 11264  1744  3019               	movlw	25
 11265  1745  024C               	subwf	??___ftadd,w
 11266  1746  1803               	btfsc	3,0
 11267  1747  0008               	return
 11268  1748                     l2579:	
 11269  1748  3006               	movlw	6
 11270  1749  00CC               	movwf	??___ftadd
 11271  174A  084C               	movf	??___ftadd,w
 11272  174B  00D0               	movwf	___ftadd@sign
 11273  174C  1BC8               	btfsc	___ftadd@f1+2,7
 11274  174D  17D0               	bsf	___ftadd@sign,7
 11275  174E  1BCB               	btfsc	___ftadd@f2+2,7
 11276  174F  1750               	bsf	___ftadd@sign,6
 11277  1750  17C7               	bsf	___ftadd@f1+1,7
 11278  1751  30FF               	movlw	255
 11279  1752  05C6               	andwf	___ftadd@f1,f
 11280  1753  30FF               	movlw	255
 11281  1754  05C7               	andwf	___ftadd@f1+1,f
 11282  1755  3000               	movlw	0
 11283  1756  05C8               	andwf	___ftadd@f1+2,f
 11284  1757  17CA               	bsf	___ftadd@f2+1,7
 11285  1758  30FF               	movlw	255
 11286  1759  05C9               	andwf	___ftadd@f2,f
 11287  175A  30FF               	movlw	255
 11288  175B  05CA               	andwf	___ftadd@f2+1,f
 11289  175C  3000               	movlw	0
 11290  175D  05CB               	andwf	___ftadd@f2+2,f
 11291  175E  0851               	movf	___ftadd@exp2,w
 11292  175F  0252               	subwf	___ftadd@exp1,w
 11293  1760  1803               	skipnc
 11294  1761  2F84               	goto	l2601
 11295  1762                     l2591:	
 11296  1762  3001               	movlw	1
 11297  1763                     u2975:	
 11298  1763  35C9               	lslf	___ftadd@f2,f
 11299  1764  0DCA               	rlf	___ftadd@f2+1,f
 11300  1765  0DCB               	rlf	___ftadd@f2+2,f
 11301  1766  0B89               	decfsz	9,f
 11302  1767  2F63               	goto	u2975
 11303  1768  3001               	movlw	1
 11304  1769  02D1               	subwf	___ftadd@exp2,f
 11305  176A  0851               	movf	___ftadd@exp2,w
 11306  176B  0652               	xorwf	___ftadd@exp1,w
 11307  176C  1903               	skipnz
 11308  176D  2F7F               	goto	l2599
 11309  176E  3001               	movlw	1
 11310  176F  02D0               	subwf	___ftadd@sign,f
 11311  1770  0850               	movf	___ftadd@sign,w
 11312  1771  3907               	andlw	7
 11313  1772  1903               	btfsc	3,2
 11314  1773  2F7F               	goto	l2599
 11315  1774  2F62               	goto	l2591
 11316  1775                     l2597:	
 11317  1775  3001               	movlw	1
 11318  1776                     u3005:	
 11319  1776  36C8               	lsrf	___ftadd@f1+2,f
 11320  1777  0CC7               	rrf	___ftadd@f1+1,f
 11321  1778  0CC6               	rrf	___ftadd@f1,f
 11322  1779  0B89               	decfsz	9,f
 11323  177A  2F76               	goto	u3005
 11324  177B  3001               	movlw	1
 11325  177C  00CC               	movwf	??___ftadd
 11326  177D  084C               	movf	??___ftadd,w
 11327  177E  07D2               	addwf	___ftadd@exp1,f
 11328  177F                     l2599:	
 11329  177F  0852               	movf	___ftadd@exp1,w
 11330  1780  0651               	xorwf	___ftadd@exp2,w
 11331  1781  1903               	btfsc	3,2
 11332  1782  2FA9               	goto	l695
 11333  1783  2F75               	goto	l2597
 11334  1784                     l2601:	
 11335  1784  0852               	movf	___ftadd@exp1,w
 11336  1785  0251               	subwf	___ftadd@exp2,w
 11337  1786  1803               	skipnc
 11338  1787  2FA9               	goto	l695
 11339  1788                     l2603:	
 11340  1788  3001               	movlw	1
 11341  1789                     u3035:	
 11342  1789  35C6               	lslf	___ftadd@f1,f
 11343  178A  0DC7               	rlf	___ftadd@f1+1,f
 11344  178B  0DC8               	rlf	___ftadd@f1+2,f
 11345  178C  0B89               	decfsz	9,f
 11346  178D  2F89               	goto	u3035
 11347  178E  3001               	movlw	1
 11348  178F  02D2               	subwf	___ftadd@exp1,f
 11349  1790  0851               	movf	___ftadd@exp2,w
 11350  1791  0652               	xorwf	___ftadd@exp1,w
 11351  1792  1903               	skipnz
 11352  1793  2FA5               	goto	l2611
 11353  1794  3001               	movlw	1
 11354  1795  02D0               	subwf	___ftadd@sign,f
 11355  1796  0850               	movf	___ftadd@sign,w
 11356  1797  3907               	andlw	7
 11357  1798  1903               	btfsc	3,2
 11358  1799  2FA5               	goto	l2611
 11359  179A  2F88               	goto	l2603
 11360  179B                     l2609:	
 11361  179B  3001               	movlw	1
 11362  179C                     u3065:	
 11363  179C  36CB               	lsrf	___ftadd@f2+2,f
 11364  179D  0CCA               	rrf	___ftadd@f2+1,f
 11365  179E  0CC9               	rrf	___ftadd@f2,f
 11366  179F  0B89               	decfsz	9,f
 11367  17A0  2F9C               	goto	u3065
 11368  17A1  3001               	movlw	1
 11369  17A2  00CC               	movwf	??___ftadd
 11370  17A3  084C               	movf	??___ftadd,w
 11371  17A4  07D1               	addwf	___ftadd@exp2,f
 11372  17A5                     l2611:	
 11373  17A5  0852               	movf	___ftadd@exp1,w
 11374  17A6  0651               	xorwf	___ftadd@exp2,w
 11375  17A7  1D03               	skipz
 11376  17A8  2F9B               	goto	l2609
 11377  17A9                     l695:	
 11378  17A9  1FD0               	btfss	___ftadd@sign,7
 11379  17AA  2FBB               	goto	l2615
 11380  17AB  30FF               	movlw	255
 11381  17AC  06C6               	xorwf	___ftadd@f1,f
 11382  17AD  30FF               	movlw	255
 11383  17AE  06C7               	xorwf	___ftadd@f1+1,f
 11384  17AF  30FF               	movlw	255
 11385  17B0  06C8               	xorwf	___ftadd@f1+2,f
 11386  17B1  3001               	movlw	1
 11387  17B2  07C6               	addwf	___ftadd@f1,f
 11388  17B3  3000               	movlw	0
 11389  17B4  1803               	skipnc
 11390  17B5  3001               	movlw	1
 11391  17B6  07C7               	addwf	___ftadd@f1+1,f
 11392  17B7  3000               	movlw	0
 11393  17B8  1803               	skipnc
 11394  17B9  3001               	movlw	1
 11395  17BA  07C8               	addwf	___ftadd@f1+2,f
 11396  17BB                     l2615:	
 11397  17BB  1F50               	btfss	___ftadd@sign,6
 11398  17BC  2FCD               	goto	l2619
 11399  17BD  30FF               	movlw	255
 11400  17BE  06C9               	xorwf	___ftadd@f2,f
 11401  17BF  30FF               	movlw	255
 11402  17C0  06CA               	xorwf	___ftadd@f2+1,f
 11403  17C1  30FF               	movlw	255
 11404  17C2  06CB               	xorwf	___ftadd@f2+2,f
 11405  17C3  3001               	movlw	1
 11406  17C4  07C9               	addwf	___ftadd@f2,f
 11407  17C5  3000               	movlw	0
 11408  17C6  1803               	skipnc
 11409  17C7  3001               	movlw	1
 11410  17C8  07CA               	addwf	___ftadd@f2+1,f
 11411  17C9  3000               	movlw	0
 11412  17CA  1803               	skipnc
 11413  17CB  3001               	movlw	1
 11414  17CC  07CB               	addwf	___ftadd@f2+2,f
 11415  17CD                     l2619:	
 11416  17CD  01D0               	clrf	___ftadd@sign
 11417  17CE  0846               	movf	___ftadd@f1,w
 11418  17CF  07C9               	addwf	___ftadd@f2,f
 11419  17D0  0847               	movf	___ftadd@f1+1,w
 11420  17D1  3DCA               	addwfc	___ftadd@f2+1,f
 11421  17D2  0848               	movf	___ftadd@f1+2,w
 11422  17D3  3DCB               	addwfc	___ftadd@f2+2,f
 11423  17D4  1FCB               	btfss	___ftadd@f2+2,7
 11424  17D5  2FE8               	goto	l2629
 11425  17D6  30FF               	movlw	255
 11426  17D7  06C9               	xorwf	___ftadd@f2,f
 11427  17D8  30FF               	movlw	255
 11428  17D9  06CA               	xorwf	___ftadd@f2+1,f
 11429  17DA  30FF               	movlw	255
 11430  17DB  06CB               	xorwf	___ftadd@f2+2,f
 11431  17DC  3001               	movlw	1
 11432  17DD  07C9               	addwf	___ftadd@f2,f
 11433  17DE  3000               	movlw	0
 11434  17DF  1803               	skipnc
 11435  17E0  3001               	movlw	1
 11436  17E1  07CA               	addwf	___ftadd@f2+1,f
 11437  17E2  3000               	movlw	0
 11438  17E3  1803               	skipnc
 11439  17E4  3001               	movlw	1
 11440  17E5  07CB               	addwf	___ftadd@f2+2,f
 11441  17E6  01D0               	clrf	___ftadd@sign
 11442  17E7  0AD0               	incf	___ftadd@sign,f
 11443  17E8                     l2629:	
 11444  17E8  0849               	movf	___ftadd@f2,w
 11445  17E9  00F0               	movwf	___ftpack@arg
 11446  17EA  084A               	movf	___ftadd@f2+1,w
 11447  17EB  00F1               	movwf	___ftpack@arg+1
 11448  17EC  084B               	movf	___ftadd@f2+2,w
 11449  17ED  00F2               	movwf	___ftpack@arg+2
 11450  17EE  0852               	movf	___ftadd@exp1,w
 11451  17EF  00CC               	movwf	??___ftadd
 11452  17F0  084C               	movf	??___ftadd,w
 11453  17F1  00F3               	movwf	___ftpack@exp
 11454  17F2  0850               	movf	___ftadd@sign,w
 11455  17F3  00CD               	movwf	??___ftadd+1
 11456  17F4  084D               	movf	??___ftadd+1,w
 11457  17F5  00F4               	movwf	___ftpack@sign
 11458  17F6  3192  22A7         	fcall	___ftpack
 11459  17F8  0870               	movf	?___ftpack,w
 11460  17F9  0020               	movlb	0	; select bank0
 11461  17FA  00C6               	movwf	?___ftadd
 11462  17FB  0871               	movf	?___ftpack+1,w
 11463  17FC  00C7               	movwf	?___ftadd+1
 11464  17FD  0872               	movf	?___ftpack+2,w
 11465  17FE  00C8               	movwf	?___ftadd+2
 11466  17FF  0008               	return
 11467  1800                     __end_of___ftadd:	
 11468                           
 11469                           	psect	text21
 11470  0800                     __ptext21:	
 11471 ;; *************** function ___ftge *****************
 11472 ;; Defined at:
 11473 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftge.c"
 11474 ;; Parameters:    Size  Location     Type
 11475 ;;  ff1             3   51[BANK0 ] float 
 11476 ;;  ff2             3   54[BANK0 ] float 
 11477 ;; Auto vars:     Size  Location     Type
 11478 ;;		None
 11479 ;; Return value:  Size  Location     Type
 11480 ;;		None               void
 11481 ;; Registers used:
 11482 ;;		wreg, status,2, status,0
 11483 ;; Tracked objects:
 11484 ;;		On entry : 0/0
 11485 ;;		On exit  : 0/0
 11486 ;;		Unchanged: 0/0
 11487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11488 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11489 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11490 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11491 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11492 ;;Total ram usage:        9 bytes
 11493 ;; Hardware stack levels used:    1
 11494 ;; This function calls:
 11495 ;;		Nothing
 11496 ;; This function is called by:
 11497 ;;		_main
 11498 ;;		_sprintf
 11499 ;;		_log
 11500 ;; This function uses a non-reentrant model
 11501 ;;
 11502                           
 11503                           
 11504                           ;psect for function ___ftge
 11505  0800                     ___ftge:	
 11506                           
 11507                           ;incstack = 0
 11508                           ; Regs used in ___ftge: [wreg+status,2+status,0]
 11509  0800  0020               	movlb	0	; select bank0
 11510  0801  1FD5               	btfss	___ftge@ff1+2,7
 11511  0802  2817               	goto	l3009
 11512  0803  0953               	comf	___ftge@ff1,w
 11513  0804  00D9               	movwf	??___ftge
 11514  0805  0954               	comf	___ftge@ff1+1,w
 11515  0806  00DA               	movwf	??___ftge+1
 11516  0807  0955               	comf	___ftge@ff1+2,w
 11517  0808  00DB               	movwf	??___ftge+2
 11518  0809  0AD9               	incf	??___ftge,f
 11519  080A  1903               	skipnz
 11520  080B  0ADA               	incf	??___ftge+1,f
 11521  080C  1903               	skipnz
 11522  080D  0ADB               	incf	??___ftge+2,f
 11523  080E  3000               	movlw	0
 11524  080F  0759               	addwf	??___ftge,w
 11525  0810  00D3               	movwf	___ftge@ff1
 11526  0811  3000               	movlw	0
 11527  0812  3D5A               	addwfc	??___ftge+1,w
 11528  0813  00D4               	movwf	___ftge@ff1+1
 11529  0814  3080               	movlw	128
 11530  0815  3D5B               	addwfc	??___ftge+2,w
 11531  0816  00D5               	movwf	___ftge@ff1+2
 11532  0817                     l3009:	
 11533  0817  1FD8               	btfss	___ftge@ff2+2,7
 11534  0818  282D               	goto	l3013
 11535  0819  0956               	comf	___ftge@ff2,w
 11536  081A  00D9               	movwf	??___ftge
 11537  081B  0957               	comf	___ftge@ff2+1,w
 11538  081C  00DA               	movwf	??___ftge+1
 11539  081D  0958               	comf	___ftge@ff2+2,w
 11540  081E  00DB               	movwf	??___ftge+2
 11541  081F  0AD9               	incf	??___ftge,f
 11542  0820  1903               	skipnz
 11543  0821  0ADA               	incf	??___ftge+1,f
 11544  0822  1903               	skipnz
 11545  0823  0ADB               	incf	??___ftge+2,f
 11546  0824  3000               	movlw	0
 11547  0825  0759               	addwf	??___ftge,w
 11548  0826  00D6               	movwf	___ftge@ff2
 11549  0827  3000               	movlw	0
 11550  0828  3D5A               	addwfc	??___ftge+1,w
 11551  0829  00D7               	movwf	___ftge@ff2+1
 11552  082A  3080               	movlw	128
 11553  082B  3D5B               	addwfc	??___ftge+2,w
 11554  082C  00D8               	movwf	___ftge@ff2+2
 11555  082D                     l3013:	
 11556  082D  3080               	movlw	128
 11557  082E  06D5               	xorwf	___ftge@ff1+2,f
 11558  082F  3080               	movlw	128
 11559  0830  06D8               	xorwf	___ftge@ff2+2,f
 11560  0831  0858               	movf	___ftge@ff2+2,w
 11561  0832  0255               	subwf	___ftge@ff1+2,w
 11562  0833  1D03               	skipz
 11563  0834  0008               	return
 11564  0835  0857               	movf	___ftge@ff2+1,w
 11565  0836  0254               	subwf	___ftge@ff1+1,w
 11566  0837  1D03               	skipz
 11567  0838  0008               	return
 11568  0839  0856               	movf	___ftge@ff2,w
 11569  083A  0253               	subwf	___ftge@ff1,w
 11570  083B  0008               	return
 11571  083C                     __end_of___ftge:	
 11572                           
 11573                           	psect	text22
 11574  1FE0                     __ptext22:	
 11575 ;; *************** function ___awtoft *****************
 11576 ;; Defined at:
 11577 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awtoft.c"
 11578 ;; Parameters:    Size  Location     Type
 11579 ;;  c               2    8[COMMON] int 
 11580 ;; Auto vars:     Size  Location     Type
 11581 ;;  sign            1   13[COMMON] unsigned char 
 11582 ;; Return value:  Size  Location     Type
 11583 ;;                  3    8[COMMON] float 
 11584 ;; Registers used:
 11585 ;;		wreg, status,2, status,0, pclath, cstack
 11586 ;; Tracked objects:
 11587 ;;		On entry : 0/0
 11588 ;;		On exit  : 0/0
 11589 ;;		Unchanged: 0/0
 11590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11591 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11592 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11593 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11594 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11595 ;;Total ram usage:        6 bytes
 11596 ;; Hardware stack levels used:    1
 11597 ;; Hardware stack levels required when called:    1
 11598 ;; This function calls:
 11599 ;;		___ftpack
 11600 ;; This function is called by:
 11601 ;;		_log
 11602 ;; This function uses a non-reentrant model
 11603 ;;
 11604                           
 11605                           
 11606                           ;psect for function ___awtoft
 11607  1FE0                     ___awtoft:	
 11608                           
 11609                           ;incstack = 0
 11610                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 11611  1FE0  01FD               	clrf	___awtoft@sign
 11612  1FE1  1FF9               	btfss	___awtoft@c+1,7
 11613  1FE2  2FEA               	goto	l3001
 11614  1FE3  09F8               	comf	___awtoft@c,f
 11615  1FE4  09F9               	comf	___awtoft@c+1,f
 11616  1FE5  0AF8               	incf	___awtoft@c,f
 11617  1FE6  1903               	skipnz
 11618  1FE7  0AF9               	incf	___awtoft@c+1,f
 11619  1FE8  01FD               	clrf	___awtoft@sign
 11620  1FE9  0AFD               	incf	___awtoft@sign,f
 11621  1FEA                     l3001:	
 11622  1FEA  0878               	movf	___awtoft@c,w
 11623  1FEB  00F0               	movwf	___ftpack@arg
 11624  1FEC  0879               	movf	___awtoft@c+1,w
 11625  1FED  00F1               	movwf	___ftpack@arg+1
 11626  1FEE  01F2               	clrf	___ftpack@arg+2
 11627  1FEF  308E               	movlw	142
 11628  1FF0  00FB               	movwf	??___awtoft
 11629  1FF1  087B               	movf	??___awtoft,w
 11630  1FF2  00F3               	movwf	___ftpack@exp
 11631  1FF3  087D               	movf	___awtoft@sign,w
 11632  1FF4  00FC               	movwf	??___awtoft+1
 11633  1FF5  087C               	movf	??___awtoft+1,w
 11634  1FF6  00F4               	movwf	___ftpack@sign
 11635  1FF7  3192  22A7         	fcall	___ftpack
 11636  1FF9  0870               	movf	?___ftpack,w
 11637  1FFA  00F8               	movwf	?___awtoft
 11638  1FFB  0871               	movf	?___ftpack+1,w
 11639  1FFC  00F9               	movwf	?___awtoft+1
 11640  1FFD  0872               	movf	?___ftpack+2,w
 11641  1FFE  00FA               	movwf	?___awtoft+2
 11642  1FFF  0008               	return
 11643  2000                     __end_of___awtoft:	
 11644                           
 11645                           	psect	text23
 11646  1F2F                     __ptext23:	
 11647 ;; *************** function ___lwtoft *****************
 11648 ;; Defined at:
 11649 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwtoft.c"
 11650 ;; Parameters:    Size  Location     Type
 11651 ;;  c               2    8[COMMON] unsigned int 
 11652 ;; Auto vars:     Size  Location     Type
 11653 ;;		None
 11654 ;; Return value:  Size  Location     Type
 11655 ;;                  3    8[COMMON] float 
 11656 ;; Registers used:
 11657 ;;		wreg, status,2, status,0, pclath, cstack
 11658 ;; Tracked objects:
 11659 ;;		On entry : 0/0
 11660 ;;		On exit  : 0/0
 11661 ;;		Unchanged: 0/0
 11662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11663 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11664 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11665 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11666 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11667 ;;Total ram usage:        4 bytes
 11668 ;; Hardware stack levels used:    1
 11669 ;; Hardware stack levels required when called:    1
 11670 ;; This function calls:
 11671 ;;		___ftpack
 11672 ;; This function is called by:
 11673 ;;		_main
 11674 ;; This function uses a non-reentrant model
 11675 ;;
 11676                           
 11677                           
 11678                           ;psect for function ___lwtoft
 11679  1F2F                     ___lwtoft:	
 11680                           
 11681                           ;incstack = 0
 11682                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
 11683  1F2F  0878               	movf	___lwtoft@c,w
 11684  1F30  00F0               	movwf	___ftpack@arg
 11685  1F31  0879               	movf	___lwtoft@c+1,w
 11686  1F32  00F1               	movwf	___ftpack@arg+1
 11687  1F33  01F2               	clrf	___ftpack@arg+2
 11688  1F34  308E               	movlw	142
 11689  1F35  00FB               	movwf	??___lwtoft
 11690  1F36  087B               	movf	??___lwtoft,w
 11691  1F37  00F3               	movwf	___ftpack@exp
 11692  1F38  01F4               	clrf	___ftpack@sign
 11693  1F39  3192  22A7         	fcall	___ftpack
 11694  1F3B  0870               	movf	?___ftpack,w
 11695  1F3C  00F8               	movwf	?___lwtoft
 11696  1F3D  0871               	movf	?___ftpack+1,w
 11697  1F3E  00F9               	movwf	?___lwtoft+1
 11698  1F3F  0872               	movf	?___ftpack+2,w
 11699  1F40  00FA               	movwf	?___lwtoft+2
 11700  1F41  0008               	return
 11701  1F42                     __end_of___lwtoft:	
 11702                           
 11703                           	psect	text24
 11704  1500                     __ptext24:	
 11705 ;; *************** function ___ftdiv *****************
 11706 ;; Defined at:
 11707 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftdiv.c"
 11708 ;; Parameters:    Size  Location     Type
 11709 ;;  f2              3    0[BANK0 ] float 
 11710 ;;  f1              3    3[BANK0 ] float 
 11711 ;; Auto vars:     Size  Location     Type
 11712 ;;  f3              3   11[BANK0 ] float 
 11713 ;;  sign            1   15[BANK0 ] unsigned char 
 11714 ;;  exp             1   14[BANK0 ] unsigned char 
 11715 ;;  cntr            1   10[BANK0 ] unsigned char 
 11716 ;; Return value:  Size  Location     Type
 11717 ;;                  3    0[BANK0 ] float 
 11718 ;; Registers used:
 11719 ;;		wreg, status,2, status,0, pclath, cstack
 11720 ;; Tracked objects:
 11721 ;;		On entry : 0/0
 11722 ;;		On exit  : 0/0
 11723 ;;		Unchanged: 0/0
 11724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11725 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11726 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11727 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11728 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11729 ;;Total ram usage:       16 bytes
 11730 ;; Hardware stack levels used:    1
 11731 ;; Hardware stack levels required when called:    1
 11732 ;; This function calls:
 11733 ;;		___ftpack
 11734 ;; This function is called by:
 11735 ;;		_main
 11736 ;; This function uses a non-reentrant model
 11737 ;;
 11738                           
 11739                           
 11740                           ;psect for function ___ftdiv
 11741  1500                     ___ftdiv:	
 11742                           
 11743                           ;incstack = 0
 11744                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 11745  1500  0020               	movlb	0	; select bank0
 11746  1501  0823               	movf	___ftdiv@f1,w
 11747  1502  00A6               	movwf	??___ftdiv
 11748  1503  0824               	movf	___ftdiv@f1+1,w
 11749  1504  00A7               	movwf	??___ftdiv+1
 11750  1505  0825               	movf	___ftdiv@f1+2,w
 11751  1506  00A8               	movwf	??___ftdiv+2
 11752  1507  1003               	clrc
 11753  1508  0D27               	rlf	??___ftdiv+1,w
 11754  1509  0D28               	rlf	??___ftdiv+2,w
 11755  150A  00A9               	movwf	??___ftdiv+3
 11756  150B  0829               	movf	??___ftdiv+3,w
 11757  150C  00AE               	movwf	___ftdiv@exp
 11758  150D  082E               	movf	___ftdiv@exp,w
 11759  150E  1D03               	btfss	3,2
 11760  150F  2D17               	goto	l3605
 11761  1510  3000               	movlw	0
 11762  1511  00A0               	movwf	?___ftdiv
 11763  1512  3000               	movlw	0
 11764  1513  00A1               	movwf	?___ftdiv+1
 11765  1514  3000               	movlw	0
 11766  1515  00A2               	movwf	?___ftdiv+2
 11767  1516  0008               	return
 11768  1517                     l3605:	
 11769  1517  0820               	movf	___ftdiv@f2,w
 11770  1518  00A6               	movwf	??___ftdiv
 11771  1519  0821               	movf	___ftdiv@f2+1,w
 11772  151A  00A7               	movwf	??___ftdiv+1
 11773  151B  0822               	movf	___ftdiv@f2+2,w
 11774  151C  00A8               	movwf	??___ftdiv+2
 11775  151D  1003               	clrc
 11776  151E  0D27               	rlf	??___ftdiv+1,w
 11777  151F  0D28               	rlf	??___ftdiv+2,w
 11778  1520  00A9               	movwf	??___ftdiv+3
 11779  1521  0829               	movf	??___ftdiv+3,w
 11780  1522  00AF               	movwf	___ftdiv@sign
 11781  1523  082F               	movf	___ftdiv@sign,w
 11782  1524  1D03               	btfss	3,2
 11783  1525  2D2D               	goto	l3611
 11784  1526  3000               	movlw	0
 11785  1527  00A0               	movwf	?___ftdiv
 11786  1528  3000               	movlw	0
 11787  1529  00A1               	movwf	?___ftdiv+1
 11788  152A  3000               	movlw	0
 11789  152B  00A2               	movwf	?___ftdiv+2
 11790  152C  0008               	return
 11791  152D                     l3611:	
 11792  152D  3000               	movlw	0
 11793  152E  00AB               	movwf	___ftdiv@f3
 11794  152F  3000               	movlw	0
 11795  1530  00AC               	movwf	___ftdiv@f3+1
 11796  1531  3000               	movlw	0
 11797  1532  00AD               	movwf	___ftdiv@f3+2
 11798  1533  3089               	movlw	137
 11799  1534  072F               	addwf	___ftdiv@sign,w
 11800  1535  00A6               	movwf	??___ftdiv
 11801  1536  0826               	movf	??___ftdiv,w
 11802  1537  02AE               	subwf	___ftdiv@exp,f
 11803  1538  0823               	movf	___ftdiv@f1,w
 11804  1539  00A6               	movwf	??___ftdiv
 11805  153A  0824               	movf	___ftdiv@f1+1,w
 11806  153B  00A7               	movwf	??___ftdiv+1
 11807  153C  0825               	movf	___ftdiv@f1+2,w
 11808  153D  00A8               	movwf	??___ftdiv+2
 11809  153E  3010               	movlw	16
 11810  153F                     u4695:	
 11811  153F  36A8               	lsrf	??___ftdiv+2,f
 11812  1540  0CA7               	rrf	??___ftdiv+1,f
 11813  1541  0CA6               	rrf	??___ftdiv,f
 11814  1542  0B89               	decfsz	9,f
 11815  1543  2D3F               	goto	u4695
 11816  1544  0826               	movf	??___ftdiv,w
 11817  1545  00A9               	movwf	??___ftdiv+3
 11818  1546  0829               	movf	??___ftdiv+3,w
 11819  1547  00AF               	movwf	___ftdiv@sign
 11820  1548  0820               	movf	___ftdiv@f2,w
 11821  1549  00A6               	movwf	??___ftdiv
 11822  154A  0821               	movf	___ftdiv@f2+1,w
 11823  154B  00A7               	movwf	??___ftdiv+1
 11824  154C  0822               	movf	___ftdiv@f2+2,w
 11825  154D  00A8               	movwf	??___ftdiv+2
 11826  154E  3010               	movlw	16
 11827  154F                     u4705:	
 11828  154F  36A8               	lsrf	??___ftdiv+2,f
 11829  1550  0CA7               	rrf	??___ftdiv+1,f
 11830  1551  0CA6               	rrf	??___ftdiv,f
 11831  1552  0B89               	decfsz	9,f
 11832  1553  2D4F               	goto	u4705
 11833  1554  0826               	movf	??___ftdiv,w
 11834  1555  00A9               	movwf	??___ftdiv+3
 11835  1556  0829               	movf	??___ftdiv+3,w
 11836  1557  06AF               	xorwf	___ftdiv@sign,f
 11837  1558  3080               	movlw	128
 11838  1559  00A6               	movwf	??___ftdiv
 11839  155A  0826               	movf	??___ftdiv,w
 11840  155B  05AF               	andwf	___ftdiv@sign,f
 11841  155C  17A4               	bsf	___ftdiv@f1+1,7
 11842  155D  30FF               	movlw	255
 11843  155E  05A3               	andwf	___ftdiv@f1,f
 11844  155F  30FF               	movlw	255
 11845  1560  05A4               	andwf	___ftdiv@f1+1,f
 11846  1561  3000               	movlw	0
 11847  1562  05A5               	andwf	___ftdiv@f1+2,f
 11848  1563  17A1               	bsf	___ftdiv@f2+1,7
 11849  1564  30FF               	movlw	255
 11850  1565  05A0               	andwf	___ftdiv@f2,f
 11851  1566  30FF               	movlw	255
 11852  1567  05A1               	andwf	___ftdiv@f2+1,f
 11853  1568  3000               	movlw	0
 11854  1569  05A2               	andwf	___ftdiv@f2+2,f
 11855  156A  3018               	movlw	24
 11856  156B  00A6               	movwf	??___ftdiv
 11857  156C  0826               	movf	??___ftdiv,w
 11858  156D  00AA               	movwf	___ftdiv@cntr
 11859  156E                     l3625:	
 11860  156E  3001               	movlw	1
 11861  156F                     u4715:	
 11862  156F  35AB               	lslf	___ftdiv@f3,f
 11863  1570  0DAC               	rlf	___ftdiv@f3+1,f
 11864  1571  0DAD               	rlf	___ftdiv@f3+2,f
 11865  1572  0B89               	decfsz	9,f
 11866  1573  2D6F               	goto	u4715
 11867  1574  0822               	movf	___ftdiv@f2+2,w
 11868  1575  0225               	subwf	___ftdiv@f1+2,w
 11869  1576  1D03               	skipz
 11870  1577  2D7E               	goto	u4725
 11871  1578  0821               	movf	___ftdiv@f2+1,w
 11872  1579  0224               	subwf	___ftdiv@f1+1,w
 11873  157A  1D03               	skipz
 11874  157B  2D7E               	goto	u4725
 11875  157C  0820               	movf	___ftdiv@f2,w
 11876  157D  0223               	subwf	___ftdiv@f1,w
 11877  157E                     u4725:	
 11878  157E  1C03               	skipc
 11879  157F  2D87               	goto	l3633
 11880  1580  0820               	movf	___ftdiv@f2,w
 11881  1581  02A3               	subwf	___ftdiv@f1,f
 11882  1582  0821               	movf	___ftdiv@f2+1,w
 11883  1583  3BA4               	subwfb	___ftdiv@f1+1,f
 11884  1584  0822               	movf	___ftdiv@f2+2,w
 11885  1585  3BA5               	subwfb	___ftdiv@f1+2,f
 11886  1586  142B               	bsf	___ftdiv@f3,0
 11887  1587                     l3633:	
 11888  1587  3001               	movlw	1
 11889  1588                     u4735:	
 11890  1588  35A3               	lslf	___ftdiv@f1,f
 11891  1589  0DA4               	rlf	___ftdiv@f1+1,f
 11892  158A  0DA5               	rlf	___ftdiv@f1+2,f
 11893  158B  0B89               	decfsz	9,f
 11894  158C  2D88               	goto	u4735
 11895  158D  3001               	movlw	1
 11896  158E  02AA               	subwf	___ftdiv@cntr,f
 11897  158F  1D03               	btfss	3,2
 11898  1590  2D6E               	goto	l3625
 11899  1591  082B               	movf	___ftdiv@f3,w
 11900  1592  00F0               	movwf	___ftpack@arg
 11901  1593  082C               	movf	___ftdiv@f3+1,w
 11902  1594  00F1               	movwf	___ftpack@arg+1
 11903  1595  082D               	movf	___ftdiv@f3+2,w
 11904  1596  00F2               	movwf	___ftpack@arg+2
 11905  1597  082E               	movf	___ftdiv@exp,w
 11906  1598  00A6               	movwf	??___ftdiv
 11907  1599  0826               	movf	??___ftdiv,w
 11908  159A  00F3               	movwf	___ftpack@exp
 11909  159B  082F               	movf	___ftdiv@sign,w
 11910  159C  00A7               	movwf	??___ftdiv+1
 11911  159D  0827               	movf	??___ftdiv+1,w
 11912  159E  00F4               	movwf	___ftpack@sign
 11913  159F  3192  22A7         	fcall	___ftpack
 11914  15A1  0870               	movf	?___ftpack,w
 11915  15A2  0020               	movlb	0	; select bank0
 11916  15A3  00A0               	movwf	?___ftdiv
 11917  15A4  0871               	movf	?___ftpack+1,w
 11918  15A5  00A1               	movwf	?___ftdiv+1
 11919  15A6  0872               	movf	?___ftpack+2,w
 11920  15A7  00A2               	movwf	?___ftdiv+2
 11921  15A8  0008               	return
 11922  15A9                     __end_of___ftdiv:	
 11923                           
 11924                           	psect	text25
 11925  12A7                     __ptext25:	
 11926 ;; *************** function ___ftpack *****************
 11927 ;; Defined at:
 11928 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\float.c"
 11929 ;; Parameters:    Size  Location     Type
 11930 ;;  arg             3    0[COMMON] unsigned um
 11931 ;;  exp             1    3[COMMON] unsigned char 
 11932 ;;  sign            1    4[COMMON] unsigned char 
 11933 ;; Auto vars:     Size  Location     Type
 11934 ;;		None
 11935 ;; Return value:  Size  Location     Type
 11936 ;;                  3    0[COMMON] float 
 11937 ;; Registers used:
 11938 ;;		wreg, status,2, status,0
 11939 ;; Tracked objects:
 11940 ;;		On entry : 0/0
 11941 ;;		On exit  : 0/0
 11942 ;;		Unchanged: 0/0
 11943 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11944 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11945 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11946 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11947 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11948 ;;Total ram usage:        8 bytes
 11949 ;; Hardware stack levels used:    1
 11950 ;; This function calls:
 11951 ;;		Nothing
 11952 ;; This function is called by:
 11953 ;;		___awtoft
 11954 ;;		___ftadd
 11955 ;;		___ftdiv
 11956 ;;		___ftmul
 11957 ;;		___lltoft
 11958 ;;		___lwtoft
 11959 ;; This function uses a non-reentrant model
 11960 ;;
 11961                           
 11962                           
 11963                           ;psect for function ___ftpack
 11964  12A7                     ___ftpack:	
 11965                           
 11966                           ;incstack = 0
 11967                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 11968  12A7  0873               	movf	___ftpack@exp,w
 11969  12A8  1903               	btfsc	3,2
 11970  12A9  2AAF               	goto	l2409
 11971  12AA  0872               	movf	___ftpack@arg+2,w
 11972  12AB  0471               	iorwf	___ftpack@arg+1,w
 11973  12AC  0470               	iorwf	___ftpack@arg,w
 11974  12AD  1D03               	skipz
 11975  12AE  2AC0               	goto	l2415
 11976  12AF                     l2409:	
 11977  12AF  3000               	movlw	0
 11978  12B0  00F0               	movwf	?___ftpack
 11979  12B1  3000               	movlw	0
 11980  12B2  00F1               	movwf	?___ftpack+1
 11981  12B3  3000               	movlw	0
 11982  12B4  00F2               	movwf	?___ftpack+2
 11983  12B5  0008               	return
 11984  12B6                     l2413:	
 11985  12B6  3001               	movlw	1
 11986  12B7  00F5               	movwf	??___ftpack
 11987  12B8  0875               	movf	??___ftpack,w
 11988  12B9  07F3               	addwf	___ftpack@exp,f
 11989  12BA  3001               	movlw	1
 11990  12BB                     u2545:	
 11991  12BB  36F2               	lsrf	___ftpack@arg+2,f
 11992  12BC  0CF1               	rrf	___ftpack@arg+1,f
 11993  12BD  0CF0               	rrf	___ftpack@arg,f
 11994  12BE  0B89               	decfsz	9,f
 11995  12BF  2ABB               	goto	u2545
 11996  12C0                     l2415:	
 11997  12C0  30FE               	movlw	254
 11998  12C1  0572               	andwf	___ftpack@arg+2,w
 11999  12C2  1903               	btfsc	3,2
 12000  12C3  2AD9               	goto	l664
 12001  12C4  2AB6               	goto	l2413
 12002  12C5                     l2417:	
 12003  12C5  3001               	movlw	1
 12004  12C6  00F5               	movwf	??___ftpack
 12005  12C7  0875               	movf	??___ftpack,w
 12006  12C8  07F3               	addwf	___ftpack@exp,f
 12007  12C9  3001               	movlw	1
 12008  12CA  07F0               	addwf	___ftpack@arg,f
 12009  12CB  3000               	movlw	0
 12010  12CC  1803               	skipnc
 12011  12CD  3001               	movlw	1
 12012  12CE  07F1               	addwf	___ftpack@arg+1,f
 12013  12CF  3000               	movlw	0
 12014  12D0  1803               	skipnc
 12015  12D1  3001               	movlw	1
 12016  12D2  07F2               	addwf	___ftpack@arg+2,f
 12017  12D3  3001               	movlw	1
 12018  12D4                     u2565:	
 12019  12D4  36F2               	lsrf	___ftpack@arg+2,f
 12020  12D5  0CF1               	rrf	___ftpack@arg+1,f
 12021  12D6  0CF0               	rrf	___ftpack@arg,f
 12022  12D7  0B89               	decfsz	9,f
 12023  12D8  2AD4               	goto	u2565
 12024  12D9                     l664:	
 12025  12D9  30FF               	movlw	255
 12026  12DA  0572               	andwf	___ftpack@arg+2,w
 12027  12DB  1903               	btfsc	3,2
 12028  12DC  2AE6               	goto	l2425
 12029  12DD  2AC5               	goto	l2417
 12030  12DE                     l2423:	
 12031  12DE  3001               	movlw	1
 12032  12DF  02F3               	subwf	___ftpack@exp,f
 12033  12E0  3001               	movlw	1
 12034  12E1                     u2585:	
 12035  12E1  35F0               	lslf	___ftpack@arg,f
 12036  12E2  0DF1               	rlf	___ftpack@arg+1,f
 12037  12E3  0DF2               	rlf	___ftpack@arg+2,f
 12038  12E4  0B89               	decfsz	9,f
 12039  12E5  2AE1               	goto	u2585
 12040  12E6                     l2425:	
 12041  12E6  1BF1               	btfsc	___ftpack@arg+1,7
 12042  12E7  2AEC               	goto	l671
 12043  12E8  3002               	movlw	2
 12044  12E9  0273               	subwf	___ftpack@exp,w
 12045  12EA  1803               	skipnc
 12046  12EB  2ADE               	goto	l2423
 12047  12EC                     l671:	
 12048  12EC  1873               	btfsc	___ftpack@exp,0
 12049  12ED  2AF4               	goto	l672
 12050  12EE  30FF               	movlw	255
 12051  12EF  05F0               	andwf	___ftpack@arg,f
 12052  12F0  307F               	movlw	127
 12053  12F1  05F1               	andwf	___ftpack@arg+1,f
 12054  12F2  30FF               	movlw	255
 12055  12F3  05F2               	andwf	___ftpack@arg+2,f
 12056  12F4                     l672:	
 12057  12F4  1003               	clrc
 12058  12F5  0CF3               	rrf	___ftpack@exp,f
 12059  12F6  0873               	movf	___ftpack@exp,w
 12060  12F7  00F5               	movwf	??___ftpack
 12061  12F8  01F6               	clrf	??___ftpack+1
 12062  12F9  01F7               	clrf	??___ftpack+2
 12063  12FA  3010               	movlw	16
 12064  12FB                     u2625:	
 12065  12FB  35F5               	lslf	??___ftpack,f
 12066  12FC  0DF6               	rlf	??___ftpack+1,f
 12067  12FD  0DF7               	rlf	??___ftpack+2,f
 12068  12FE  0B89               	decfsz	9,f
 12069  12FF  2AFB               	goto	u2625
 12070  1300  0875               	movf	??___ftpack,w
 12071  1301  04F0               	iorwf	___ftpack@arg,f
 12072  1302  0876               	movf	??___ftpack+1,w
 12073  1303  04F1               	iorwf	___ftpack@arg+1,f
 12074  1304  0877               	movf	??___ftpack+2,w
 12075  1305  04F2               	iorwf	___ftpack@arg+2,f
 12076  1306  0874               	movf	___ftpack@sign,w
 12077  1307  1903               	btfsc	3,2
 12078  1308  0008               	return
 12079  1309  17F2               	bsf	___ftpack@arg+2,7
 12080  130A  0008               	return
 12081  130B                     __end_of___ftpack:	
 12082                           
 12083                           	psect	text26
 12084  13F7                     __ptext26:	
 12085 ;; *************** function ___aldiv *****************
 12086 ;; Defined at:
 12087 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\aldiv.c"
 12088 ;; Parameters:    Size  Location     Type
 12089 ;;  divisor         4    0[COMMON] long 
 12090 ;;  dividend        4    4[COMMON] long 
 12091 ;; Auto vars:     Size  Location     Type
 12092 ;;  quotient        4    2[BANK0 ] long 
 12093 ;;  sign            1    1[BANK0 ] unsigned char 
 12094 ;;  counter         1    0[BANK0 ] unsigned char 
 12095 ;; Return value:  Size  Location     Type
 12096 ;;                  4    0[COMMON] long 
 12097 ;; Registers used:
 12098 ;;		wreg, status,2, status,0
 12099 ;; Tracked objects:
 12100 ;;		On entry : 0/0
 12101 ;;		On exit  : 0/0
 12102 ;;		Unchanged: 0/0
 12103 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12104 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12105 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12106 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12107 ;;      Totals:         9       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12108 ;;Total ram usage:       15 bytes
 12109 ;; Hardware stack levels used:    1
 12110 ;; This function calls:
 12111 ;;		Nothing
 12112 ;; This function is called by:
 12113 ;;		_main
 12114 ;; This function uses a non-reentrant model
 12115 ;;
 12116                           
 12117                           
 12118                           ;psect for function ___aldiv
 12119  13F7                     ___aldiv:	
 12120                           
 12121                           ;incstack = 0
 12122                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
 12123  13F7  0020               	movlb	0	; select bank0
 12124  13F8  01A1               	clrf	___aldiv@sign
 12125  13F9  1FF3               	btfss	___aldiv@divisor+3,7
 12126  13FA  2C08               	goto	l541
 12127  13FB  09F0               	comf	___aldiv@divisor,f
 12128  13FC  09F1               	comf	___aldiv@divisor+1,f
 12129  13FD  09F2               	comf	___aldiv@divisor+2,f
 12130  13FE  09F3               	comf	___aldiv@divisor+3,f
 12131  13FF  0AF0               	incf	___aldiv@divisor,f
 12132  1400  1903               	skipnz
 12133  1401  0AF1               	incf	___aldiv@divisor+1,f
 12134  1402  1903               	skipnz
 12135  1403  0AF2               	incf	___aldiv@divisor+2,f
 12136  1404  1903               	skipnz
 12137  1405  0AF3               	incf	___aldiv@divisor+3,f
 12138  1406  01A1               	clrf	___aldiv@sign
 12139  1407  0AA1               	incf	___aldiv@sign,f
 12140  1408                     l541:	
 12141  1408  1FF7               	btfss	___aldiv@dividend+3,7
 12142  1409  2C19               	goto	l3569
 12143  140A  09F4               	comf	___aldiv@dividend,f
 12144  140B  09F5               	comf	___aldiv@dividend+1,f
 12145  140C  09F6               	comf	___aldiv@dividend+2,f
 12146  140D  09F7               	comf	___aldiv@dividend+3,f
 12147  140E  0AF4               	incf	___aldiv@dividend,f
 12148  140F  1903               	skipnz
 12149  1410  0AF5               	incf	___aldiv@dividend+1,f
 12150  1411  1903               	skipnz
 12151  1412  0AF6               	incf	___aldiv@dividend+2,f
 12152  1413  1903               	skipnz
 12153  1414  0AF7               	incf	___aldiv@dividend+3,f
 12154  1415  3001               	movlw	1
 12155  1416  00F8               	movwf	??___aldiv
 12156  1417  0878               	movf	??___aldiv,w
 12157  1418  06A1               	xorwf	___aldiv@sign,f
 12158  1419                     l3569:	
 12159  1419  3000               	movlw	0
 12160  141A  00A5               	movwf	___aldiv@quotient+3
 12161  141B  3000               	movlw	0
 12162  141C  00A4               	movwf	___aldiv@quotient+2
 12163  141D  3000               	movlw	0
 12164  141E  00A3               	movwf	___aldiv@quotient+1
 12165  141F  3000               	movlw	0
 12166  1420  00A2               	movwf	___aldiv@quotient
 12167  1421  0873               	movf	___aldiv@divisor+3,w
 12168  1422  0472               	iorwf	___aldiv@divisor+2,w
 12169  1423  0471               	iorwf	___aldiv@divisor+1,w
 12170  1424  0470               	iorwf	___aldiv@divisor,w
 12171  1425  1903               	skipnz
 12172  1426  2C62               	goto	l3591
 12173  1427  01A0               	clrf	___aldiv@counter
 12174  1428  0AA0               	incf	___aldiv@counter,f
 12175  1429                     l3577:	
 12176  1429  1BF3               	btfsc	___aldiv@divisor+3,7
 12177  142A  2C37               	goto	l3579
 12178  142B  3001               	movlw	1
 12179  142C                     u4605:	
 12180  142C  35F0               	lslf	___aldiv@divisor,f
 12181  142D  0DF1               	rlf	___aldiv@divisor+1,f
 12182  142E  0DF2               	rlf	___aldiv@divisor+2,f
 12183  142F  0DF3               	rlf	___aldiv@divisor+3,f
 12184  1430  0B89               	decfsz	9,f
 12185  1431  2C2C               	goto	u4605
 12186  1432  3001               	movlw	1
 12187  1433  00F8               	movwf	??___aldiv
 12188  1434  0878               	movf	??___aldiv,w
 12189  1435  07A0               	addwf	___aldiv@counter,f
 12190  1436  2C29               	goto	l3577
 12191  1437                     l3579:	
 12192  1437  3001               	movlw	1
 12193  1438                     u4625:	
 12194  1438  35A2               	lslf	___aldiv@quotient,f
 12195  1439  0DA3               	rlf	___aldiv@quotient+1,f
 12196  143A  0DA4               	rlf	___aldiv@quotient+2,f
 12197  143B  0DA5               	rlf	___aldiv@quotient+3,f
 12198  143C  0B89               	decfsz	9,f
 12199  143D  2C38               	goto	u4625
 12200  143E  0873               	movf	___aldiv@divisor+3,w
 12201  143F  0277               	subwf	___aldiv@dividend+3,w
 12202  1440  1D03               	skipz
 12203  1441  2C4C               	goto	u4635
 12204  1442  0872               	movf	___aldiv@divisor+2,w
 12205  1443  0276               	subwf	___aldiv@dividend+2,w
 12206  1444  1D03               	skipz
 12207  1445  2C4C               	goto	u4635
 12208  1446  0871               	movf	___aldiv@divisor+1,w
 12209  1447  0275               	subwf	___aldiv@dividend+1,w
 12210  1448  1D03               	skipz
 12211  1449  2C4C               	goto	u4635
 12212  144A  0870               	movf	___aldiv@divisor,w
 12213  144B  0274               	subwf	___aldiv@dividend,w
 12214  144C                     u4635:	
 12215  144C  1C03               	skipc
 12216  144D  2C57               	goto	l3587
 12217  144E  0870               	movf	___aldiv@divisor,w
 12218  144F  02F4               	subwf	___aldiv@dividend,f
 12219  1450  0871               	movf	___aldiv@divisor+1,w
 12220  1451  3BF5               	subwfb	___aldiv@dividend+1,f
 12221  1452  0872               	movf	___aldiv@divisor+2,w
 12222  1453  3BF6               	subwfb	___aldiv@dividend+2,f
 12223  1454  0873               	movf	___aldiv@divisor+3,w
 12224  1455  3BF7               	subwfb	___aldiv@dividend+3,f
 12225  1456  1422               	bsf	___aldiv@quotient,0
 12226  1457                     l3587:	
 12227  1457  3001               	movlw	1
 12228  1458                     u4645:	
 12229  1458  36F3               	lsrf	___aldiv@divisor+3,f
 12230  1459  0CF2               	rrf	___aldiv@divisor+2,f
 12231  145A  0CF1               	rrf	___aldiv@divisor+1,f
 12232  145B  0CF0               	rrf	___aldiv@divisor,f
 12233  145C  0B89               	decfsz	9,f
 12234  145D  2C58               	goto	u4645
 12235  145E  3001               	movlw	1
 12236  145F  02A0               	subwf	___aldiv@counter,f
 12237  1460  1D03               	btfss	3,2
 12238  1461  2C37               	goto	l3579
 12239  1462                     l3591:	
 12240  1462  0821               	movf	___aldiv@sign,w
 12241  1463  1903               	btfsc	3,2
 12242  1464  2C70               	goto	l3595
 12243  1465  09A2               	comf	___aldiv@quotient,f
 12244  1466  09A3               	comf	___aldiv@quotient+1,f
 12245  1467  09A4               	comf	___aldiv@quotient+2,f
 12246  1468  09A5               	comf	___aldiv@quotient+3,f
 12247  1469  0AA2               	incf	___aldiv@quotient,f
 12248  146A  1903               	skipnz
 12249  146B  0AA3               	incf	___aldiv@quotient+1,f
 12250  146C  1903               	skipnz
 12251  146D  0AA4               	incf	___aldiv@quotient+2,f
 12252  146E  1903               	skipnz
 12253  146F  0AA5               	incf	___aldiv@quotient+3,f
 12254  1470                     l3595:	
 12255  1470  0825               	movf	___aldiv@quotient+3,w
 12256  1471  00F3               	movwf	?___aldiv+3
 12257  1472  0824               	movf	___aldiv@quotient+2,w
 12258  1473  00F2               	movwf	?___aldiv+2
 12259  1474  0823               	movf	___aldiv@quotient+1,w
 12260  1475  00F1               	movwf	?___aldiv+1
 12261  1476  0822               	movf	___aldiv@quotient,w
 12262  1477  00F0               	movwf	?___aldiv
 12263  1478  0008               	return
 12264  1479                     __end_of___aldiv:	
 12265                           
 12266                           	psect	text27
 12267  10A9                     __ptext27:	
 12268 ;; *************** function _SYSTEM_Initialize *****************
 12269 ;; Defined at:
 12270 ;;		line 68 in file "system.c"
 12271 ;; Parameters:    Size  Location     Type
 12272 ;;		None
 12273 ;; Auto vars:     Size  Location     Type
 12274 ;;		None
 12275 ;; Return value:  Size  Location     Type
 12276 ;;                  1    wreg      void 
 12277 ;; Registers used:
 12278 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12279 ;; Tracked objects:
 12280 ;;		On entry : 0/0
 12281 ;;		On exit  : 0/0
 12282 ;;		Unchanged: 0/0
 12283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12284 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12285 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12286 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12287 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12288 ;;Total ram usage:        2 bytes
 12289 ;; Hardware stack levels used:    1
 12290 ;; Hardware stack levels required when called:    3
 12291 ;; This function calls:
 12292 ;;		_ADCC_Initialize
 12293 ;;		_InitCustomChars
 12294 ;;		_LCD_Clear
 12295 ;;		_LCD_Init
 12296 ;;		_OSCILLATOR_Initialize
 12297 ;;		_PIN_MANAGER_Initialize
 12298 ;;		_PWM6_Initialize
 12299 ;;		_TMR2_Initialize
 12300 ;; This function is called by:
 12301 ;;		_main
 12302 ;; This function uses a non-reentrant model
 12303 ;;
 12304                           
 12305                           
 12306                           ;psect for function _SYSTEM_Initialize
 12307  10A9                     _SYSTEM_Initialize:	
 12308                           
 12309                           ;system.c: 71: PIN_MANAGER_Initialize();
 12310                           
 12311                           ;incstack = 0
 12312                           ; Regs used in _SYSTEM_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12313  10A9  3190  2078  3190   	fcall	_PIN_MANAGER_Initialize
 12314                           
 12315                           ;system.c: 72: OSCILLATOR_Initialize();
 12316  10AC  319E  26C0  3190   	fcall	_OSCILLATOR_Initialize
 12317                           
 12318                           ;system.c: 73: FVRCON = 0x00;
 12319  10AF  0032               	movlb	18	; select bank18
 12320  10B0  018C               	clrf	12	;volatile
 12321                           
 12322                           ;system.c: 74: ADCC_Initialize();
 12323  10B1  319F  2772  3190   	fcall	_ADCC_Initialize
 12324                           
 12325                           ;system.c: 75: PWM6_Initialize();
 12326  10B4  319E  26E8  3190   	fcall	_PWM6_Initialize
 12327                           
 12328                           ;system.c: 76: TMR2_Initialize();
 12329  10B7  319F  2720  3190   	fcall	_TMR2_Initialize
 12330                           
 12331                           ;system.c: 77: LCD_Init(0X00);
 12332  10BA  3000               	movlw	0
 12333  10BB  3193  230B  3190   	fcall	_LCD_Init
 12334                           
 12335                           ;system.c: 78: _delay((unsigned long)((200)*(250000/4000.0)));
 12336  10BE  3011               	movlw	17
 12337  10BF  00F8               	movwf	??_SYSTEM_Initialize+1
 12338  10C0  303A               	movlw	58
 12339  10C1  00F7               	movwf	??_SYSTEM_Initialize
 12340  10C2                     u4957:	
 12341  10C2  0BF7               	decfsz	??_SYSTEM_Initialize,f
 12342  10C3  28C2               	goto	u4957
 12343  10C4  0BF8               	decfsz	??_SYSTEM_Initialize+1,f
 12344  10C5  28C2               	goto	u4957
 12345  10C6  0000               	nop
 12346                           
 12347                           ;system.c: 79: LCD_Clear();
 12348  10C7  319E  26B8  3190   	fcall	_LCD_Clear
 12349                           
 12350                           ;system.c: 80: _delay((unsigned long)((100)*(250000/4000.0)));
 12351  10CA  3009               	movlw	9
 12352  10CB  00F8               	movwf	??_SYSTEM_Initialize+1
 12353  10CC  301C               	movlw	28
 12354  10CD  00F7               	movwf	??_SYSTEM_Initialize
 12355  10CE                     u4967:	
 12356  10CE  0BF7               	decfsz	??_SYSTEM_Initialize,f
 12357  10CF  28CE               	goto	u4967
 12358  10D0  0BF8               	decfsz	??_SYSTEM_Initialize+1,f
 12359  10D1  28CE               	goto	u4967
 12360  10D2  0000               	nop
 12361                           
 12362                           ;system.c: 81: InitCustomChars();
 12363  10D3  3190  202A  3190   	fcall	_InitCustomChars
 12364                           
 12365                           ;system.c: 82: _delay((unsigned long)((200)*(250000/4000.0)));
 12366  10D6  3011               	movlw	17
 12367  10D7  00F8               	movwf	??_SYSTEM_Initialize+1
 12368  10D8  303A               	movlw	58
 12369  10D9  00F7               	movwf	??_SYSTEM_Initialize
 12370  10DA                     u4977:	
 12371  10DA  0BF7               	decfsz	??_SYSTEM_Initialize,f
 12372  10DB  28DA               	goto	u4977
 12373  10DC  0BF8               	decfsz	??_SYSTEM_Initialize+1,f
 12374  10DD  28DA               	goto	u4977
 12375  10DE  0000               	nop
 12376  10DF  0008               	return
 12377  10E0                     __end_of_SYSTEM_Initialize:	
 12378                           
 12379                           	psect	text28
 12380  1F20                     __ptext28:	
 12381 ;; *************** function _TMR2_Initialize *****************
 12382 ;; Defined at:
 12383 ;;		line 4 in file "tmr2.c"
 12384 ;; Parameters:    Size  Location     Type
 12385 ;;		None
 12386 ;; Auto vars:     Size  Location     Type
 12387 ;;		None
 12388 ;; Return value:  Size  Location     Type
 12389 ;;                  1    wreg      void 
 12390 ;; Registers used:
 12391 ;;		wreg, status,2
 12392 ;; Tracked objects:
 12393 ;;		On entry : 0/0
 12394 ;;		On exit  : 0/0
 12395 ;;		Unchanged: 0/0
 12396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12397 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12398 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12399 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12400 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12401 ;;Total ram usage:        0 bytes
 12402 ;; Hardware stack levels used:    1
 12403 ;; This function calls:
 12404 ;;		Nothing
 12405 ;; This function is called by:
 12406 ;;		_SYSTEM_Initialize
 12407 ;; This function uses a non-reentrant model
 12408 ;;
 12409                           
 12410                           
 12411                           ;psect for function _TMR2_Initialize
 12412  1F20                     _TMR2_Initialize:	
 12413                           
 12414                           ;tmr2.c: 7: T2CON = 0x7F;
 12415                           
 12416                           ;incstack = 0
 12417                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
 12418  1F20  307F               	movlw	127
 12419  1F21  0025               	movlb	5	; select bank5
 12420  1F22  008E               	movwf	14	;volatile
 12421                           
 12422                           ;tmr2.c: 9: T2CLKCON = 0x01;
 12423  1F23  3001               	movlw	1
 12424  1F24  0090               	movwf	16	;volatile
 12425                           
 12426                           ;tmr2.c: 11: T2HLT = 0x00;
 12427  1F25  018F               	clrf	15	;volatile
 12428                           
 12429                           ;tmr2.c: 13: T2RST = 0x00;
 12430  1F26  0191               	clrf	17	;volatile
 12431                           
 12432                           ;tmr2.c: 15: T2PR = 0xFF;
 12433  1F27  30FF               	movlw	255
 12434  1F28  008D               	movwf	13	;volatile
 12435                           
 12436                           ;tmr2.c: 17: T2TMR = 0x00;
 12437  1F29  018C               	clrf	12	;volatile
 12438                           
 12439                           ;tmr2.c: 19: PIR4bits.TMR2IF = 0;
 12440  1F2A  002E               	movlb	14	; select bank14
 12441  1F2B  1090               	bcf	16,1	;volatile
 12442                           
 12443                           ;tmr2.c: 21: T2CONbits.TMR2ON = 1;
 12444  1F2C  0025               	movlb	5	; select bank5
 12445  1F2D  178E               	bsf	14,7	;volatile
 12446  1F2E  0008               	return
 12447  1F2F                     __end_of_TMR2_Initialize:	
 12448                           
 12449                           	psect	text29
 12450  1EE8                     __ptext29:	
 12451 ;; *************** function _PWM6_Initialize *****************
 12452 ;; Defined at:
 12453 ;;		line 4 in file "pwm6.c"
 12454 ;; Parameters:    Size  Location     Type
 12455 ;;		None
 12456 ;; Auto vars:     Size  Location     Type
 12457 ;;		None
 12458 ;; Return value:  Size  Location     Type
 12459 ;;                  1    wreg      void 
 12460 ;; Registers used:
 12461 ;;		wreg, status,2, status,0
 12462 ;; Tracked objects:
 12463 ;;		On entry : 0/0
 12464 ;;		On exit  : 0/0
 12465 ;;		Unchanged: 0/0
 12466 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12467 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12468 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12469 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12470 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12471 ;;Total ram usage:        0 bytes
 12472 ;; Hardware stack levels used:    1
 12473 ;; This function calls:
 12474 ;;		Nothing
 12475 ;; This function is called by:
 12476 ;;		_SYSTEM_Initialize
 12477 ;; This function uses a non-reentrant model
 12478 ;;
 12479                           
 12480                           
 12481                           ;psect for function _PWM6_Initialize
 12482  1EE8                     _PWM6_Initialize:	
 12483                           
 12484                           ;pwm6.c: 6: PWM6CON = 0x80;
 12485                           
 12486                           ;incstack = 0
 12487                           ; Regs used in _PWM6_Initialize: [wreg+status,2+status,0]
 12488  1EE8  3080               	movlw	128
 12489  1EE9  0027               	movlb	7	; select bank7
 12490  1EEA  008E               	movwf	14	;volatile
 12491                           
 12492                           ;pwm6.c: 8: PWM6DCH = 0x3C;
 12493  1EEB  303C               	movlw	60
 12494  1EEC  008D               	movwf	13	;volatile
 12495                           
 12496                           ;pwm6.c: 10: PWM6DCL = 0x40;
 12497  1EED  3040               	movlw	64
 12498  1EEE  008C               	movwf	12	;volatile
 12499                           
 12500                           ;pwm6.c: 12: CCPTMRS1bits.P6TSEL = 0x1;
 12501  1EEF  0024               	movlb	4	; select bank4
 12502  1EF0  081F               	movf	31,w	;volatile
 12503  1EF1  39F3               	andlw	-13
 12504  1EF2  3804               	iorlw	4
 12505  1EF3  009F               	movwf	31	;volatile
 12506  1EF4  0008               	return
 12507  1EF5                     __end_of_PWM6_Initialize:	
 12508                           
 12509                           	psect	text30
 12510  1078                     __ptext30:	
 12511 ;; *************** function _PIN_MANAGER_Initialize *****************
 12512 ;; Defined at:
 12513 ;;		line 5 in file "pin_manager.c"
 12514 ;; Parameters:    Size  Location     Type
 12515 ;;		None
 12516 ;; Auto vars:     Size  Location     Type
 12517 ;;  state           1    0[COMMON] unsigned char 
 12518 ;; Return value:  Size  Location     Type
 12519 ;;                  1    wreg      void 
 12520 ;; Registers used:
 12521 ;;		wreg, status,2
 12522 ;; Tracked objects:
 12523 ;;		On entry : 0/0
 12524 ;;		On exit  : 0/0
 12525 ;;		Unchanged: 0/0
 12526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12527 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12528 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12529 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12530 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12531 ;;Total ram usage:        1 bytes
 12532 ;; Hardware stack levels used:    1
 12533 ;; This function calls:
 12534 ;;		Nothing
 12535 ;; This function is called by:
 12536 ;;		_SYSTEM_Initialize
 12537 ;; This function uses a non-reentrant model
 12538 ;;
 12539                           
 12540                           
 12541                           ;psect for function _PIN_MANAGER_Initialize
 12542  1078                     _PIN_MANAGER_Initialize:	
 12543                           
 12544                           ;pin_manager.c: 7: LATA = 0x00;
 12545                           
 12546                           ;incstack = 0
 12547                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
 12548  1078  0020               	movlb	0	; select bank0
 12549  1079  0196               	clrf	22	;volatile
 12550                           
 12551                           ;pin_manager.c: 8: LATB = 0x0;
 12552  107A  0197               	clrf	23	;volatile
 12553                           
 12554                           ;pin_manager.c: 9: LATC = 0x0;
 12555  107B  0198               	clrf	24	;volatile
 12556                           
 12557                           ;pin_manager.c: 11: WPUA = 0x00;
 12558  107C  003E               	movlb	30	; select bank30
 12559  107D  01B9               	clrf	57	;volatile
 12560                           
 12561                           ;pin_manager.c: 12: WPUB = 0x00;
 12562  107E  01C4               	clrf	68	;volatile
 12563                           
 12564                           ;pin_manager.c: 13: WPUC = 0x00;
 12565  107F  01CF               	clrf	79	;volatile
 12566                           
 12567                           ;pin_manager.c: 14: WPUE = 0x8;
 12568  1080  3008               	movlw	8
 12569  1081  00E5               	movwf	101	;volatile
 12570                           
 12571                           ;pin_manager.c: 16: TRISA = 0x04;
 12572  1082  3004               	movlw	4
 12573  1083  0020               	movlb	0	; select bank0
 12574  1084  0091               	movwf	17	;volatile
 12575                           
 12576                           ;pin_manager.c: 17: TRISB = 0x00;
 12577  1085  0192               	clrf	18	;volatile
 12578                           
 12579                           ;pin_manager.c: 18: TRISC = 0x10;
 12580  1086  3010               	movlw	16
 12581  1087  0093               	movwf	19	;volatile
 12582                           
 12583                           ;pin_manager.c: 20: ANSELA = 0x04;
 12584  1088  3004               	movlw	4
 12585  1089  003E               	movlb	30	; select bank30
 12586  108A  00B8               	movwf	56	;volatile
 12587                           
 12588                           ;pin_manager.c: 21: ANSELB = 0x00;
 12589  108B  01C3               	clrf	67	;volatile
 12590                           
 12591                           ;pin_manager.c: 22: ANSELC = 0x00;
 12592  108C  01CE               	clrf	78	;volatile
 12593                           
 12594                           ;pin_manager.c: 26: PIE0bits.IOCIE = 0;
 12595  108D  002E               	movlb	14	; select bank14
 12596  108E  1216               	bcf	22,4	;volatile
 12597                           
 12598                           ;pin_manager.c: 27: bool state = GIE;
 12599  108F  3000               	movlw	0
 12600  1090  1B8B               	btfsc	11,7	;volatile
 12601  1091  3001               	movlw	1
 12602  1092  00F0               	movwf	PIN_MANAGER_Initialize@state
 12603                           
 12604                           ;pin_manager.c: 28: GIE = 0;
 12605  1093  138B               	bcf	11,7	;volatile
 12606                           
 12607                           ;pin_manager.c: 29: PPSLOCK = 0x55;
 12608  1094  3055               	movlw	85
 12609  1095  003D               	movlb	29	; select bank29
 12610  1096  008F               	movwf	15	;volatile
 12611                           
 12612                           ;pin_manager.c: 30: PPSLOCK = 0xAA;
 12613  1097  30AA               	movlw	170
 12614  1098  008F               	movwf	15	;volatile
 12615                           
 12616                           ;pin_manager.c: 31: PPSLOCKbits.PPSLOCKED = 0x00;
 12617  1099  100F               	bcf	15,0	;volatile
 12618                           
 12619                           ;pin_manager.c: 34: RA1PPS = 0x000E;
 12620  109A  300E               	movlw	14
 12621  109B  003E               	movlb	30	; select bank30
 12622  109C  0091               	movwf	17	;volatile
 12623                           
 12624                           ;pin_manager.c: 38: PPSLOCK = 0x55;
 12625  109D  3055               	movlw	85
 12626  109E  003D               	movlb	29	; select bank29
 12627  109F  008F               	movwf	15	;volatile
 12628                           
 12629                           ;pin_manager.c: 39: PPSLOCK = 0xAA;
 12630  10A0  30AA               	movlw	170
 12631  10A1  008F               	movwf	15	;volatile
 12632                           
 12633                           ;pin_manager.c: 40: PPSLOCKbits.PPSLOCKED = 0x01;
 12634  10A2  140F               	bsf	15,0	;volatile
 12635                           
 12636                           ;pin_manager.c: 41: GIE = state;
 12637  10A3  1C70               	btfss	PIN_MANAGER_Initialize@state,0
 12638  10A4  28A7               	goto	u3250
 12639  10A5  178B               	bsf	11,7	;volatile
 12640  10A6  0008               	return
 12641  10A7                     u3250:	
 12642  10A7  138B               	bcf	11,7	;volatile
 12643  10A8  0008               	return
 12644  10A9                     __end_of_PIN_MANAGER_Initialize:	
 12645                           
 12646                           	psect	text31
 12647  1EC0                     __ptext31:	
 12648 ;; *************** function _OSCILLATOR_Initialize *****************
 12649 ;; Defined at:
 12650 ;;		line 85 in file "system.c"
 12651 ;; Parameters:    Size  Location     Type
 12652 ;;		None
 12653 ;; Auto vars:     Size  Location     Type
 12654 ;;		None
 12655 ;; Return value:  Size  Location     Type
 12656 ;;                  1    wreg      void 
 12657 ;; Registers used:
 12658 ;;		wreg, status,2
 12659 ;; Tracked objects:
 12660 ;;		On entry : 0/0
 12661 ;;		On exit  : 0/0
 12662 ;;		Unchanged: 0/0
 12663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12664 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12665 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12666 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12667 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12668 ;;Total ram usage:        0 bytes
 12669 ;; Hardware stack levels used:    1
 12670 ;; This function calls:
 12671 ;;		Nothing
 12672 ;; This function is called by:
 12673 ;;		_SYSTEM_Initialize
 12674 ;; This function uses a non-reentrant model
 12675 ;;
 12676                           
 12677                           
 12678                           ;psect for function _OSCILLATOR_Initialize
 12679  1EC0                     _OSCILLATOR_Initialize:	
 12680                           
 12681                           ;system.c: 111: OSCCON1 = 0x60;
 12682                           
 12683                           ;incstack = 0
 12684                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 12685  1EC0  3060               	movlw	96
 12686  1EC1  0031               	movlb	17	; select bank17
 12687  1EC2  008D               	movwf	13	;volatile
 12688                           
 12689                           ;system.c: 113: OSCCON3 = 0x00;
 12690  1EC3  018F               	clrf	15	;volatile
 12691                           
 12692                           ;system.c: 115: OSCEN = 0x00;
 12693  1EC4  0191               	clrf	17	;volatile
 12694                           
 12695                           ;system.c: 117: OSCFRQ = 0x00;
 12696  1EC5  0193               	clrf	19	;volatile
 12697                           
 12698                           ;system.c: 119: OSCTUNE = 0x00;
 12699  1EC6  0192               	clrf	18	;volatile
 12700  1EC7  0008               	return
 12701  1EC8                     __end_of_OSCILLATOR_Initialize:	
 12702                           
 12703                           	psect	text32
 12704  130B                     __ptext32:	
 12705 ;; *************** function _LCD_Init *****************
 12706 ;; Defined at:
 12707 ;;		line 154 in file "lcd.c"
 12708 ;; Parameters:    Size  Location     Type
 12709 ;;  style           1    wreg     unsigned char 
 12710 ;; Auto vars:     Size  Location     Type
 12711 ;;  style           1    5[COMMON] unsigned char 
 12712 ;; Return value:  Size  Location     Type
 12713 ;;                  1    wreg      void 
 12714 ;; Registers used:
 12715 ;;		wreg, status,2, status,0, pclath, cstack
 12716 ;; Tracked objects:
 12717 ;;		On entry : 0/0
 12718 ;;		On exit  : 0/0
 12719 ;;		Unchanged: 0/0
 12720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12721 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12722 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12723 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12724 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12725 ;;Total ram usage:        3 bytes
 12726 ;; Hardware stack levels used:    1
 12727 ;; Hardware stack levels required when called:    2
 12728 ;; This function calls:
 12729 ;;		_LCD_Cmd
 12730 ;;		_LCD_Port
 12731 ;; This function is called by:
 12732 ;;		_SYSTEM_Initialize
 12733 ;; This function uses a non-reentrant model
 12734 ;;
 12735                           
 12736                           
 12737                           ;psect for function _LCD_Init
 12738  130B                     _LCD_Init:	
 12739                           
 12740                           ;incstack = 0
 12741                           ; Regs used in _LCD_Init: [wreg+status,2+status,0+pclath+cstack]
 12742                           ;LCD_Init@style stored from wreg
 12743  130B  00F5               	movwf	LCD_Init@style
 12744                           
 12745                           ;lcd.c: 156: LCD_Port(0x00);
 12746  130C  3000               	movlw	0
 12747  130D  319F  2742  3193   	fcall	_LCD_Port
 12748                           
 12749                           ;lcd.c: 158: _delay((unsigned long)((100)*(250000/4000.0)));
 12750  1310  3009               	movlw	9
 12751  1311  00F4               	movwf	??_LCD_Init+1
 12752  1312  301C               	movlw	28
 12753  1313  00F3               	movwf	??_LCD_Init
 12754  1314                     u4987:	
 12755  1314  0BF3               	decfsz	??_LCD_Init,f
 12756  1315  2B14               	goto	u4987
 12757  1316  0BF4               	decfsz	??_LCD_Init+1,f
 12758  1317  2B14               	goto	u4987
 12759  1318  0000               	nop
 12760                           
 12761                           ;lcd.c: 160: LCD_Cmd(0x03);
 12762  1319  3003               	movlw	3
 12763  131A  319F  2711  3193   	fcall	_LCD_Cmd
 12764                           
 12765                           ;lcd.c: 162: _delay((unsigned long)((10)*(250000/4000.0)));
 12766  131D  30D0               	movlw	208
 12767  131E  00F3               	movwf	??_LCD_Init
 12768  131F                     u4997:	
 12769  131F  0BF3               	decfsz	??_LCD_Init,f
 12770  1320  2B1F               	goto	u4997
 12771                           
 12772                           ;lcd.c: 164: LCD_Cmd(0x03);
 12773  1321  3003               	movlw	3
 12774  1322  319F  2711  3193   	fcall	_LCD_Cmd
 12775                           
 12776                           ;lcd.c: 166: _delay((unsigned long)((120)*(250000/4000000.0)));
 12777  1325  3002               	movlw	2
 12778  1326  00F3               	movwf	??_LCD_Init
 12779  1327                     u5007:	
 12780  1327  0BF3               	decfsz	??_LCD_Init,f
 12781  1328  2B27               	goto	u5007
 12782                           
 12783                           ;lcd.c: 168: LCD_Cmd(0x03);
 12784  1329  3003               	movlw	3
 12785  132A  319F  2711  3193   	fcall	_LCD_Cmd
 12786                           
 12787                           ;lcd.c: 170: _delay((unsigned long)((120)*(250000/4000000.0)));
 12788  132D  3002               	movlw	2
 12789  132E  00F3               	movwf	??_LCD_Init
 12790  132F                     u5017:	
 12791  132F  0BF3               	decfsz	??_LCD_Init,f
 12792  1330  2B2F               	goto	u5017
 12793                           
 12794                           ;lcd.c: 172: LCD_Cmd(0x02);
 12795  1331  3002               	movlw	2
 12796  1332  319F  2711  3193   	fcall	_LCD_Cmd
 12797                           
 12798                           ;lcd.c: 174: _delay((unsigned long)((120)*(250000/4000000.0)));
 12799  1335  3002               	movlw	2
 12800  1336  00F3               	movwf	??_LCD_Init
 12801  1337                     u5027:	
 12802  1337  0BF3               	decfsz	??_LCD_Init,f
 12803  1338  2B37               	goto	u5027
 12804                           
 12805                           ;lcd.c: 176: LCD_Cmd(0x2);
 12806  1339  3002               	movlw	2
 12807  133A  319F  2711  3193   	fcall	_LCD_Cmd
 12808                           
 12809                           ;lcd.c: 178: LCD_Cmd(0x8);
 12810  133D  3008               	movlw	8
 12811  133E  319F  2711  3193   	fcall	_LCD_Cmd
 12812                           
 12813                           ;lcd.c: 180: _delay((unsigned long)((120)*(250000/4000000.0)));
 12814  1341  3002               	movlw	2
 12815  1342  00F3               	movwf	??_LCD_Init
 12816  1343                     u5037:	
 12817  1343  0BF3               	decfsz	??_LCD_Init,f
 12818  1344  2B43               	goto	u5037
 12819                           
 12820                           ;lcd.c: 182: LCD_Cmd(0x0);
 12821  1345  3000               	movlw	0
 12822  1346  319F  2711  3193   	fcall	_LCD_Cmd
 12823                           
 12824                           ;lcd.c: 184: LCD_Cmd(0x8);
 12825  1349  3008               	movlw	8
 12826  134A  319F  2711  3193   	fcall	_LCD_Cmd
 12827                           
 12828                           ;lcd.c: 186: _delay((unsigned long)((120)*(250000/4000000.0)));
 12829  134D  3002               	movlw	2
 12830  134E  00F3               	movwf	??_LCD_Init
 12831  134F                     u5047:	
 12832  134F  0BF3               	decfsz	??_LCD_Init,f
 12833  1350  2B4F               	goto	u5047
 12834                           
 12835                           ;lcd.c: 188: LCD_Cmd(0x0);
 12836  1351  3000               	movlw	0
 12837  1352  319F  2711  3193   	fcall	_LCD_Cmd
 12838                           
 12839                           ;lcd.c: 190: LCD_Cmd(0x1);
 12840  1355  3001               	movlw	1
 12841  1356  319F  2711  3193   	fcall	_LCD_Cmd
 12842                           
 12843                           ;lcd.c: 192: _delay((unsigned long)((5)*(250000/4000.0)));
 12844  1359  3067               	movlw	103
 12845  135A  00F3               	movwf	??_LCD_Init
 12846  135B                     u5057:	
 12847  135B  0BF3               	decfsz	??_LCD_Init,f
 12848  135C  2B5B               	goto	u5057
 12849  135D  3200               	nop2	;nop
 12850                           
 12851                           ;lcd.c: 194: LCD_Cmd(0x0);
 12852  135E  3000               	movlw	0
 12853  135F  319F  2711  3193   	fcall	_LCD_Cmd
 12854                           
 12855                           ;lcd.c: 196: LCD_Cmd(0x6);
 12856  1362  3006               	movlw	6
 12857  1363  319F  2711  3193   	fcall	_LCD_Cmd
 12858                           
 12859                           ;lcd.c: 198: _delay((unsigned long)((120)*(250000/4000000.0)));
 12860  1366  3002               	movlw	2
 12861  1367  00F3               	movwf	??_LCD_Init
 12862  1368                     u5067:	
 12863  1368  0BF3               	decfsz	??_LCD_Init,f
 12864  1369  2B68               	goto	u5067
 12865                           
 12866                           ;lcd.c: 200: LCD_Cmd(0x0);
 12867  136A  3000               	movlw	0
 12868  136B  319F  2711  3193   	fcall	_LCD_Cmd
 12869                           
 12870                           ;lcd.c: 202: LCD_Cmd(0xc|style);
 12871  136E  0875               	movf	LCD_Init@style,w
 12872  136F  380C               	iorlw	12
 12873  1370  319F  2711  3193   	fcall	_LCD_Cmd
 12874                           
 12875                           ;lcd.c: 204: _delay((unsigned long)((120)*(250000/4000000.0)));
 12876  1373  3002               	movlw	2
 12877  1374  00F3               	movwf	??_LCD_Init
 12878  1375                     u5077:	
 12879  1375  0BF3               	decfsz	??_LCD_Init,f
 12880  1376  2B75               	goto	u5077
 12881  1377  0008               	return
 12882  1378                     __end_of_LCD_Init:	
 12883                           
 12884                           	psect	text33
 12885  1EB8                     __ptext33:	
 12886 ;; *************** function _LCD_Clear *****************
 12887 ;; Defined at:
 12888 ;;		line 75 in file "lcd.c"
 12889 ;; Parameters:    Size  Location     Type
 12890 ;;		None
 12891 ;; Auto vars:     Size  Location     Type
 12892 ;;		None
 12893 ;; Return value:  Size  Location     Type
 12894 ;;                  1    wreg      void 
 12895 ;; Registers used:
 12896 ;;		wreg, status,2, status,0, pclath, cstack
 12897 ;; Tracked objects:
 12898 ;;		On entry : 0/0
 12899 ;;		On exit  : 0/0
 12900 ;;		Unchanged: 0/0
 12901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12902 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12903 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12904 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12905 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12906 ;;Total ram usage:        0 bytes
 12907 ;; Hardware stack levels used:    1
 12908 ;; Hardware stack levels required when called:    2
 12909 ;; This function calls:
 12910 ;;		_LCD_Cmd
 12911 ;; This function is called by:
 12912 ;;		_SYSTEM_Initialize
 12913 ;; This function uses a non-reentrant model
 12914 ;;
 12915                           
 12916                           
 12917                           ;psect for function _LCD_Clear
 12918  1EB8                     _LCD_Clear:	
 12919                           
 12920                           ;lcd.c: 77: LCD_Cmd(0);
 12921                           
 12922                           ;incstack = 0
 12923                           ; Regs used in _LCD_Clear: [wreg+status,2+status,0+pclath+cstack]
 12924  1EB8  3000               	movlw	0
 12925  1EB9  319F  2711  319E   	fcall	_LCD_Cmd
 12926                           
 12927                           ;lcd.c: 78: LCD_Cmd(1);
 12928  1EBC  3001               	movlw	1
 12929  1EBD  319F  2711         	fcall	_LCD_Cmd
 12930  1EBF  0008               	return
 12931  1EC0                     __end_of_LCD_Clear:	
 12932                           
 12933                           	psect	text34
 12934  102A                     __ptext34:	
 12935 ;; *************** function _InitCustomChars *****************
 12936 ;; Defined at:
 12937 ;;		line 29 in file "lcd.c"
 12938 ;; Parameters:    Size  Location     Type
 12939 ;;		None
 12940 ;; Auto vars:     Size  Location     Type
 12941 ;;  i               1    6[COMMON] unsigned char 
 12942 ;; Return value:  Size  Location     Type
 12943 ;;                  1    wreg      void 
 12944 ;; Registers used:
 12945 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12946 ;; Tracked objects:
 12947 ;;		On entry : 0/0
 12948 ;;		On exit  : 0/0
 12949 ;;		Unchanged: 0/0
 12950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12951 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12952 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12953 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12954 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12955 ;;Total ram usage:        2 bytes
 12956 ;; Hardware stack levels used:    1
 12957 ;; Hardware stack levels required when called:    2
 12958 ;; This function calls:
 12959 ;;		_LCD_Cmd
 12960 ;;		_LCD_Write_Char
 12961 ;; This function is called by:
 12962 ;;		_SYSTEM_Initialize
 12963 ;; This function uses a non-reentrant model
 12964 ;;
 12965                           
 12966                           
 12967                           ;psect for function _InitCustomChars
 12968  102A                     _InitCustomChars:	
 12969                           
 12970                           ;lcd.c: 31: uint8_t i;
 12971                           ;lcd.c: 32: LCD_Cmd(0x04);
 12972                           
 12973                           ;incstack = 0
 12974                           ; Regs used in _InitCustomChars: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12975  102A  3004               	movlw	4
 12976  102B  319F  2711  3190   	fcall	_LCD_Cmd
 12977                           
 12978                           ;lcd.c: 33: LCD_Cmd(0x00);
 12979  102E  3000               	movlw	0
 12980  102F  319F  2711  3190   	fcall	_LCD_Cmd
 12981                           
 12982                           ;lcd.c: 34: for (i = 0; i < sizeof(__cgram) ; i++)
 12983  1032  01F6               	clrf	InitCustomChars@i
 12984  1033  3018               	movlw	24
 12985  1034  0276               	subwf	InitCustomChars@i,w
 12986  1035  1803               	btfsc	3,0
 12987  1036  2848               	goto	l2697
 12988  1037                     l2691:	
 12989                           
 12990                           ;lcd.c: 35: LCD_Write_Char(__cgram[i]);
 12991  1037  0876               	movf	InitCustomChars@i,w
 12992  1038  3E20               	addlw	(low (___cgram| (0+256)))& (0+255)
 12993  1039  0086               	movwf	6
 12994  103A  3001               	movlw	1	; select bank2/3
 12995  103B  0087               	movwf	7
 12996  103C  0801               	movf	1,w
 12997  103D  3190  2007  3190   	fcall	_LCD_Write_Char
 12998  1040  3001               	movlw	1
 12999  1041  00F5               	movwf	??_InitCustomChars
 13000  1042  0875               	movf	??_InitCustomChars,w
 13001  1043  07F6               	addwf	InitCustomChars@i,f
 13002  1044  3018               	movlw	24
 13003  1045  0276               	subwf	InitCustomChars@i,w
 13004  1046  1C03               	skipc
 13005  1047  2837               	goto	l2691
 13006  1048                     l2697:	
 13007                           
 13008                           ;lcd.c: 36: LCD_Cmd(0);
 13009  1048  3000               	movlw	0
 13010  1049  319F  2711  3190   	fcall	_LCD_Cmd
 13011                           
 13012                           ;lcd.c: 37: LCD_Cmd(2);
 13013  104C  3002               	movlw	2
 13014  104D  319F  2711         	fcall	_LCD_Cmd
 13015  104F  0008               	return
 13016  1050                     __end_of_InitCustomChars:	
 13017                           
 13018                           	psect	text35
 13019  1F72                     __ptext35:	
 13020 ;; *************** function _ADCC_Initialize *****************
 13021 ;; Defined at:
 13022 ;;		line 5 in file "adcc.c"
 13023 ;; Parameters:    Size  Location     Type
 13024 ;;		None
 13025 ;; Auto vars:     Size  Location     Type
 13026 ;;		None
 13027 ;; Return value:  Size  Location     Type
 13028 ;;                  1    wreg      void 
 13029 ;; Registers used:
 13030 ;;		wreg, status,2
 13031 ;; Tracked objects:
 13032 ;;		On entry : 0/0
 13033 ;;		On exit  : 0/0
 13034 ;;		Unchanged: 0/0
 13035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13036 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13037 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13038 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13039 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13040 ;;Total ram usage:        0 bytes
 13041 ;; Hardware stack levels used:    1
 13042 ;; This function calls:
 13043 ;;		Nothing
 13044 ;; This function is called by:
 13045 ;;		_SYSTEM_Initialize
 13046 ;; This function uses a non-reentrant model
 13047 ;;
 13048                           
 13049                           
 13050                           ;psect for function _ADCC_Initialize
 13051  1F72                     _ADCC_Initialize:	
 13052                           
 13053                           ;adcc.c: 9: ADCON1 = 0x00;
 13054                           
 13055                           ;incstack = 0
 13056                           ; Regs used in _ADCC_Initialize: [wreg+status,2]
 13057  1F72  0021               	movlb	1	; select bank1
 13058  1F73  0194               	clrf	20	;volatile
 13059                           
 13060                           ;adcc.c: 11: ADCON2 = 0x00;
 13061  1F74  0195               	clrf	21	;volatile
 13062                           
 13063                           ;adcc.c: 13: ADCON3 = 0x00;
 13064  1F75  0196               	clrf	22	;volatile
 13065                           
 13066                           ;adcc.c: 15: ADACT = 0x00;
 13067  1F76  0199               	clrf	25	;volatile
 13068                           
 13069                           ;adcc.c: 17: ADSTAT = 0x00;
 13070  1F77  0197               	clrf	23	;volatile
 13071                           
 13072                           ;adcc.c: 19: ADCLK = 0x0F;
 13073  1F78  300F               	movlw	15
 13074  1F79  0098               	movwf	24	;volatile
 13075                           
 13076                           ;adcc.c: 22: ADREF = 0x00;
 13077  1F7A  019A               	clrf	26	;volatile
 13078                           
 13079                           ;adcc.c: 24: ADCAP = 0x00;
 13080  1F7B  019B               	clrf	27	;volatile
 13081                           
 13082                           ;adcc.c: 26: ADPRE = 0x00;
 13083  1F7C  019C               	clrf	28	;volatile
 13084                           
 13085                           ;adcc.c: 28: ADACQ = 0x00;
 13086  1F7D  019D               	clrf	29	;volatile
 13087                           
 13088                           ;adcc.c: 30: ADPCH = 0x00;
 13089  1F7E  019E               	clrf	30	;volatile
 13090                           
 13091                           ;adcc.c: 32: ADRPT = 0x00;
 13092  1F7F  0022               	movlb	2	; select bank2
 13093  1F80  018D               	clrf	13	;volatile
 13094                           
 13095                           ;adcc.c: 34: ADLTHL = 0x00;
 13096  1F81  018E               	clrf	14	;volatile
 13097                           
 13098                           ;adcc.c: 36: ADLTHH = 0x00;
 13099  1F82  018F               	clrf	15	;volatile
 13100                           
 13101                           ;adcc.c: 38: ADUTHL = 0x00;
 13102  1F83  0190               	clrf	16	;volatile
 13103                           
 13104                           ;adcc.c: 40: ADUTHH = 0x00;
 13105  1F84  0191               	clrf	17	;volatile
 13106                           
 13107                           ;adcc.c: 42: ADSTPTL = 0x00;
 13108  1F85  0192               	clrf	18	;volatile
 13109                           
 13110                           ;adcc.c: 44: ADSTPTH = 0x00;
 13111  1F86  0193               	clrf	19	;volatile
 13112                           
 13113                           ;adcc.c: 47: ADCON0 = 0x84;
 13114  1F87  3084               	movlw	132
 13115  1F88  0021               	movlb	1	; select bank1
 13116  1F89  0093               	movwf	19	;volatile
 13117  1F8A  0008               	return
 13118  1F8B                     __end_of_ADCC_Initialize:	
 13119                           
 13120                           	psect	text36
 13121  0005                     __ptext36:	
 13122 ;; *************** function _PWM6_LoadDutyValue *****************
 13123 ;; Defined at:
 13124 ;;		line 15 in file "pwm6.c"
 13125 ;; Parameters:    Size  Location     Type
 13126 ;;  dutyValue       2    0[COMMON] unsigned int 
 13127 ;; Auto vars:     Size  Location     Type
 13128 ;;		None
 13129 ;; Return value:  Size  Location     Type
 13130 ;;                  1    wreg      void 
 13131 ;; Registers used:
 13132 ;;		wreg, status,2, status,0
 13133 ;; Tracked objects:
 13134 ;;		On entry : 0/0
 13135 ;;		On exit  : 0/0
 13136 ;;		Unchanged: 0/0
 13137 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13138 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13139 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13140 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13141 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13142 ;;Total ram usage:        4 bytes
 13143 ;; Hardware stack levels used:    1
 13144 ;; This function calls:
 13145 ;;		Nothing
 13146 ;; This function is called by:
 13147 ;;		_main
 13148 ;; This function uses a non-reentrant model
 13149 ;;
 13150                           
 13151                           
 13152                           ;psect for function _PWM6_LoadDutyValue
 13153  0005                     _PWM6_LoadDutyValue:	
 13154                           
 13155                           ;pwm6.c: 17: PWM6DCH = (dutyValue & 0x03FC)>>2;
 13156                           
 13157                           ;incstack = 0
 13158                           ; Regs used in _PWM6_LoadDutyValue: [wreg+status,2+status,0]
 13159  0005  0871               	movf	PWM6_LoadDutyValue@dutyValue+1,w
 13160  0006  00F3               	movwf	??_PWM6_LoadDutyValue+1
 13161  0007  0870               	movf	PWM6_LoadDutyValue@dutyValue,w
 13162  0008  00F2               	movwf	??_PWM6_LoadDutyValue
 13163  0009  36F3               	lsrf	??_PWM6_LoadDutyValue+1,f
 13164  000A  0CF2               	rrf	??_PWM6_LoadDutyValue,f
 13165  000B  36F3               	lsrf	??_PWM6_LoadDutyValue+1,f
 13166  000C  0CF2               	rrf	??_PWM6_LoadDutyValue,f
 13167  000D  0872               	movf	??_PWM6_LoadDutyValue,w
 13168  000E  0027               	movlb	7	; select bank7
 13169  000F  008D               	movwf	13	;volatile
 13170                           
 13171                           ;pwm6.c: 19: PWM6DCL = (dutyValue & 0x0003)<<6;
 13172  0010  0870               	movf	PWM6_LoadDutyValue@dutyValue,w
 13173  0011  3903               	andlw	3
 13174  0012  00F2               	movwf	??_PWM6_LoadDutyValue
 13175  0013  3005               	movlw	5
 13176  0014                     u4045:	
 13177  0014  35F2               	lslf	??_PWM6_LoadDutyValue,f
 13178  0015  3EFF               	addlw	-1
 13179  0016  1D03               	skipz
 13180  0017  2814               	goto	u4045
 13181  0018  3572               	lslf	??_PWM6_LoadDutyValue,w
 13182  0019  008C               	movwf	12	;volatile
 13183  001A  0008               	return
 13184  001B                     __end_of_PWM6_LoadDutyValue:	
 13185                           
 13186                           	psect	text37
 13187  1F8B                     __ptext37:	
 13188 ;; *************** function _LCD_Write_String *****************
 13189 ;; Defined at:
 13190 ;;		line 239 in file "lcd.c"
 13191 ;; Parameters:    Size  Location     Type
 13192 ;;  a               1    wreg     PTR unsigned char 
 13193 ;;		 -> main@s(8), 
 13194 ;; Auto vars:     Size  Location     Type
 13195 ;;  a               1    8[COMMON] PTR unsigned char 
 13196 ;;		 -> main@s(8), 
 13197 ;;  i               2    6[COMMON] int 
 13198 ;; Return value:  Size  Location     Type
 13199 ;;                  1    wreg      void 
 13200 ;; Registers used:
 13201 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13202 ;; Tracked objects:
 13203 ;;		On entry : 0/0
 13204 ;;		On exit  : 0/0
 13205 ;;		Unchanged: 0/0
 13206 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13207 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13208 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13209 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13210 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13211 ;;Total ram usage:        4 bytes
 13212 ;; Hardware stack levels used:    1
 13213 ;; Hardware stack levels required when called:    2
 13214 ;; This function calls:
 13215 ;;		_LCD_Write_Char
 13216 ;; This function is called by:
 13217 ;;		_main
 13218 ;; This function uses a non-reentrant model
 13219 ;;
 13220                           
 13221                           
 13222                           ;psect for function _LCD_Write_String
 13223  1F8B                     _LCD_Write_String:	
 13224                           
 13225                           ;incstack = 0
 13226                           ; Regs used in _LCD_Write_String: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13227                           ;LCD_Write_String@a stored from wreg
 13228  1F8B  00F8               	movwf	LCD_Write_String@a
 13229                           
 13230                           ;lcd.c: 241: int i;
 13231                           ;lcd.c: 242: for(i=0;a[i]!='\0';i++)
 13232  1F8C  01F6               	clrf	LCD_Write_String@i
 13233  1F8D  01F7               	clrf	LCD_Write_String@i+1
 13234  1F8E                     l3213:	
 13235  1F8E  0876               	movf	LCD_Write_String@i,w
 13236  1F8F  0778               	addwf	LCD_Write_String@a,w
 13237  1F90  00F5               	movwf	??_LCD_Write_String
 13238  1F91  0875               	movf	??_LCD_Write_String,w
 13239  1F92  0086               	movwf	6
 13240  1F93  0187               	clrf	7
 13241  1F94  0801               	movf	1,w
 13242  1F95  1903               	btfsc	3,2
 13243  1F96  0008               	return
 13244                           
 13245                           ;lcd.c: 243: LCD_Write_Char(a[i]);
 13246  1F97  0876               	movf	LCD_Write_String@i,w
 13247  1F98  0778               	addwf	LCD_Write_String@a,w
 13248  1F99  00F5               	movwf	??_LCD_Write_String
 13249  1F9A  0875               	movf	??_LCD_Write_String,w
 13250  1F9B  0086               	movwf	6
 13251  1F9C  0187               	clrf	7
 13252  1F9D  0801               	movf	1,w
 13253  1F9E  3190  2007  319F   	fcall	_LCD_Write_Char
 13254  1FA1  3001               	movlw	1
 13255  1FA2  07F6               	addwf	LCD_Write_String@i,f
 13256  1FA3  3000               	movlw	0
 13257  1FA4  3DF7               	addwfc	LCD_Write_String@i+1,f
 13258  1FA5  2F8E               	goto	l3213
 13259  1FA6                     __end_of_LCD_Write_String:	
 13260                           
 13261                           	psect	text38
 13262  1007                     __ptext38:	
 13263 ;; *************** function _LCD_Write_Char *****************
 13264 ;; Defined at:
 13265 ;;		line 223 in file "lcd.c"
 13266 ;; Parameters:    Size  Location     Type
 13267 ;;  a               1    wreg     unsigned char 
 13268 ;; Auto vars:     Size  Location     Type
 13269 ;;  a               1    4[COMMON] unsigned char 
 13270 ;;  y               1    3[COMMON] unsigned char 
 13271 ;;  temp            1    2[COMMON] unsigned char 
 13272 ;; Return value:  Size  Location     Type
 13273 ;;                  1    wreg      void 
 13274 ;; Registers used:
 13275 ;;		wreg, status,2, status,0, pclath, cstack
 13276 ;; Tracked objects:
 13277 ;;		On entry : 0/0
 13278 ;;		On exit  : 0/0
 13279 ;;		Unchanged: 0/0
 13280 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13281 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13282 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13283 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13284 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13285 ;;Total ram usage:        4 bytes
 13286 ;; Hardware stack levels used:    1
 13287 ;; Hardware stack levels required when called:    1
 13288 ;; This function calls:
 13289 ;;		_LCD_Port
 13290 ;; This function is called by:
 13291 ;;		_InitCustomChars
 13292 ;;		_LCD_Write_String
 13293 ;;		_main
 13294 ;;		_LCD_Write_Int
 13295 ;; This function uses a non-reentrant model
 13296 ;;
 13297                           
 13298                           
 13299                           ;psect for function _LCD_Write_Char
 13300  1007                     _LCD_Write_Char:	
 13301                           
 13302                           ;incstack = 0
 13303                           ; Regs used in _LCD_Write_Char: [wreg+status,2+status,0+pclath+cstack]
 13304                           ;LCD_Write_Char@a stored from wreg
 13305  1007  00F4               	movwf	LCD_Write_Char@a
 13306                           
 13307                           ;lcd.c: 225: char temp,y;
 13308                           ;lcd.c: 226: temp = a&0x0F;
 13309  1008  0874               	movf	LCD_Write_Char@a,w
 13310  1009  390F               	andlw	15
 13311  100A  00F1               	movwf	??_LCD_Write_Char
 13312  100B  0871               	movf	??_LCD_Write_Char,w
 13313  100C  00F2               	movwf	LCD_Write_Char@temp
 13314                           
 13315                           ;lcd.c: 227: y = a&0xF0;
 13316  100D  0874               	movf	LCD_Write_Char@a,w
 13317  100E  39F0               	andlw	240
 13318  100F  00F1               	movwf	??_LCD_Write_Char
 13319  1010  0871               	movf	??_LCD_Write_Char,w
 13320  1011  00F3               	movwf	LCD_Write_Char@y
 13321                           
 13322                           ;lcd.c: 228: RB0 = 1;
 13323  1012  0020               	movlb	0	; select bank0
 13324  1013  140D               	bsf	13,0	;volatile
 13325                           
 13326                           ;lcd.c: 229: LCD_Port(y>>4);
 13327  1014  0873               	movf	LCD_Write_Char@y,w
 13328  1015  00F1               	movwf	??_LCD_Write_Char
 13329  1016  3004               	movlw	4
 13330  1017                     u2645:	
 13331  1017  36F1               	lsrf	??_LCD_Write_Char,f
 13332  1018  0B89               	decfsz	9,f
 13333  1019  2817               	goto	u2645
 13334  101A  0871               	movf	??_LCD_Write_Char,w
 13335  101B  319F  2742  3190   	fcall	_LCD_Port
 13336                           
 13337                           ;lcd.c: 230: RB1 = 1;
 13338  101E  0020               	movlb	0	; select bank0
 13339  101F  148D               	bsf	13,1	;volatile
 13340                           
 13341                           ;lcd.c: 231: RB1 = 0;
 13342  1020  108D               	bcf	13,1	;volatile
 13343                           
 13344                           ;lcd.c: 232: _delay((unsigned long)((40)*(250000/4000000.0)));
 13345  1021  3200               	nop2	;2 cycle nop
 13346                           
 13347                           ;lcd.c: 233: LCD_Port(temp);
 13348  1022  0872               	movf	LCD_Write_Char@temp,w
 13349  1023  319F  2742         	fcall	_LCD_Port
 13350                           
 13351                           ;lcd.c: 234: RB1 = 1;
 13352  1025  0020               	movlb	0	; select bank0
 13353  1026  148D               	bsf	13,1	;volatile
 13354                           
 13355                           ;lcd.c: 235: RB1 = 0;
 13356  1027  108D               	bcf	13,1	;volatile
 13357                           
 13358                           ;lcd.c: 236: _delay((unsigned long)((40)*(250000/4000000.0)));
 13359  1028  3200               	nop2	;2 cycle nop
 13360  1029  0008               	return
 13361  102A                     __end_of_LCD_Write_Char:	
 13362                           
 13363                           	psect	text39
 13364  1378                     __ptext39:	
 13365 ;; *************** function _LCD_Set_Cursor *****************
 13366 ;; Defined at:
 13367 ;;		line 82 in file "lcd.c"
 13368 ;; Parameters:    Size  Location     Type
 13369 ;;  x               1    wreg     unsigned char 
 13370 ;;  y               1    3[COMMON] unsigned char 
 13371 ;; Auto vars:     Size  Location     Type
 13372 ;;  x               1    6[COMMON] unsigned char 
 13373 ;;  temp            1    9[COMMON] unsigned char 
 13374 ;;  w               1    8[COMMON] unsigned char 
 13375 ;;  z               1    7[COMMON] unsigned char 
 13376 ;; Return value:  Size  Location     Type
 13377 ;;                  1    wreg      void 
 13378 ;; Registers used:
 13379 ;;		wreg, status,2, status,0, pclath, cstack
 13380 ;; Tracked objects:
 13381 ;;		On entry : 0/0
 13382 ;;		On exit  : 0/0
 13383 ;;		Unchanged: 0/0
 13384 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13385 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13386 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13387 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13388 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13389 ;;Total ram usage:        7 bytes
 13390 ;; Hardware stack levels used:    1
 13391 ;; Hardware stack levels required when called:    2
 13392 ;; This function calls:
 13393 ;;		_LCD_Cmd
 13394 ;; This function is called by:
 13395 ;;		_main
 13396 ;; This function uses a non-reentrant model
 13397 ;;
 13398                           
 13399                           
 13400                           ;psect for function _LCD_Set_Cursor
 13401  1378                     _LCD_Set_Cursor:	
 13402                           
 13403                           ;incstack = 0
 13404                           ; Regs used in _LCD_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
 13405                           ;LCD_Set_Cursor@x stored from wreg
 13406  1378  00F6               	movwf	LCD_Set_Cursor@x
 13407                           
 13408                           ;lcd.c: 109: char temp,z,w;
 13409                           ;lcd.c: 111: if(x == 0)
 13410  1379  0876               	movf	LCD_Set_Cursor@x,w
 13411  137A  1D03               	btfss	3,2
 13412  137B  2B98               	goto	l3177
 13413                           
 13414                           ;lcd.c: 112: {
 13415                           ;lcd.c: 113: temp = 0x80 + y;
 13416  137C  0873               	movf	LCD_Set_Cursor@y,w
 13417  137D  3E80               	addlw	128
 13418  137E  00F4               	movwf	??_LCD_Set_Cursor
 13419  137F  0874               	movf	??_LCD_Set_Cursor,w
 13420  1380  00F9               	movwf	LCD_Set_Cursor@temp
 13421                           
 13422                           ;lcd.c: 115: z = temp>>4;
 13423  1381  0879               	movf	LCD_Set_Cursor@temp,w
 13424  1382  00F4               	movwf	??_LCD_Set_Cursor
 13425  1383  3004               	movlw	4
 13426  1384                     u3955:	
 13427  1384  36F4               	lsrf	??_LCD_Set_Cursor,f
 13428  1385  0B89               	decfsz	9,f
 13429  1386  2B84               	goto	u3955
 13430  1387  0874               	movf	??_LCD_Set_Cursor,w
 13431  1388  00F5               	movwf	??_LCD_Set_Cursor+1
 13432  1389  0875               	movf	??_LCD_Set_Cursor+1,w
 13433  138A  00F7               	movwf	LCD_Set_Cursor@z
 13434                           
 13435                           ;lcd.c: 116: w = temp & 0x0F;
 13436  138B  0879               	movf	LCD_Set_Cursor@temp,w
 13437  138C  390F               	andlw	15
 13438  138D  00F4               	movwf	??_LCD_Set_Cursor
 13439  138E  0874               	movf	??_LCD_Set_Cursor,w
 13440  138F  00F8               	movwf	LCD_Set_Cursor@w
 13441                           
 13442                           ;lcd.c: 117: LCD_Cmd(z);
 13443  1390  0877               	movf	LCD_Set_Cursor@z,w
 13444  1391  319F  2711  3193   	fcall	_LCD_Cmd
 13445                           
 13446                           ;lcd.c: 118: LCD_Cmd(w);
 13447  1394  0878               	movf	LCD_Set_Cursor@w,w
 13448  1395  319F  2711         	fcall	_LCD_Cmd
 13449                           
 13450                           ;lcd.c: 119: }
 13451  1397  0008               	return
 13452  1398                     l3177:	
 13453                           
 13454                           ;lcd.c: 121: else if(x == 1)
 13455  1398  0376               	decf	LCD_Set_Cursor@x,w
 13456  1399  1D03               	btfss	3,2
 13457  139A  2BB7               	goto	l3187
 13458                           
 13459                           ;lcd.c: 122: {
 13460                           ;lcd.c: 123: temp = 0xC0 + y;
 13461  139B  0873               	movf	LCD_Set_Cursor@y,w
 13462  139C  3EC0               	addlw	192
 13463  139D  00F4               	movwf	??_LCD_Set_Cursor
 13464  139E  0874               	movf	??_LCD_Set_Cursor,w
 13465  139F  00F9               	movwf	LCD_Set_Cursor@temp
 13466                           
 13467                           ;lcd.c: 125: z = temp>>4;
 13468  13A0  0879               	movf	LCD_Set_Cursor@temp,w
 13469  13A1  00F4               	movwf	??_LCD_Set_Cursor
 13470  13A2  3004               	movlw	4
 13471  13A3                     u3975:	
 13472  13A3  36F4               	lsrf	??_LCD_Set_Cursor,f
 13473  13A4  0B89               	decfsz	9,f
 13474  13A5  2BA3               	goto	u3975
 13475  13A6  0874               	movf	??_LCD_Set_Cursor,w
 13476  13A7  00F5               	movwf	??_LCD_Set_Cursor+1
 13477  13A8  0875               	movf	??_LCD_Set_Cursor+1,w
 13478  13A9  00F7               	movwf	LCD_Set_Cursor@z
 13479                           
 13480                           ;lcd.c: 126: w = temp & 0x0F;
 13481  13AA  0879               	movf	LCD_Set_Cursor@temp,w
 13482  13AB  390F               	andlw	15
 13483  13AC  00F4               	movwf	??_LCD_Set_Cursor
 13484  13AD  0874               	movf	??_LCD_Set_Cursor,w
 13485  13AE  00F8               	movwf	LCD_Set_Cursor@w
 13486                           
 13487                           ;lcd.c: 127: LCD_Cmd(z);
 13488  13AF  0877               	movf	LCD_Set_Cursor@z,w
 13489  13B0  319F  2711  3193   	fcall	_LCD_Cmd
 13490                           
 13491                           ;lcd.c: 128: LCD_Cmd(w);
 13492  13B3  0878               	movf	LCD_Set_Cursor@w,w
 13493  13B4  319F  2711         	fcall	_LCD_Cmd
 13494                           
 13495                           ;lcd.c: 129: }
 13496  13B6  0008               	return
 13497  13B7                     l3187:	
 13498                           
 13499                           ;lcd.c: 132: else if(x == 2)
 13500  13B7  3002               	movlw	2
 13501  13B8  0676               	xorwf	LCD_Set_Cursor@x,w
 13502  13B9  1D03               	btfss	3,2
 13503  13BA  2BD7               	goto	l3197
 13504                           
 13505                           ;lcd.c: 133: {
 13506                           ;lcd.c: 134: temp = 0x94 + y;
 13507  13BB  0873               	movf	LCD_Set_Cursor@y,w
 13508  13BC  3E94               	addlw	148
 13509  13BD  00F4               	movwf	??_LCD_Set_Cursor
 13510  13BE  0874               	movf	??_LCD_Set_Cursor,w
 13511  13BF  00F9               	movwf	LCD_Set_Cursor@temp
 13512                           
 13513                           ;lcd.c: 136: z = temp>>4;
 13514  13C0  0879               	movf	LCD_Set_Cursor@temp,w
 13515  13C1  00F4               	movwf	??_LCD_Set_Cursor
 13516  13C2  3004               	movlw	4
 13517  13C3                     u3995:	
 13518  13C3  36F4               	lsrf	??_LCD_Set_Cursor,f
 13519  13C4  0B89               	decfsz	9,f
 13520  13C5  2BC3               	goto	u3995
 13521  13C6  0874               	movf	??_LCD_Set_Cursor,w
 13522  13C7  00F5               	movwf	??_LCD_Set_Cursor+1
 13523  13C8  0875               	movf	??_LCD_Set_Cursor+1,w
 13524  13C9  00F7               	movwf	LCD_Set_Cursor@z
 13525                           
 13526                           ;lcd.c: 137: w = temp & 0x0F;
 13527  13CA  0879               	movf	LCD_Set_Cursor@temp,w
 13528  13CB  390F               	andlw	15
 13529  13CC  00F4               	movwf	??_LCD_Set_Cursor
 13530  13CD  0874               	movf	??_LCD_Set_Cursor,w
 13531  13CE  00F8               	movwf	LCD_Set_Cursor@w
 13532                           
 13533                           ;lcd.c: 138: LCD_Cmd(z);
 13534  13CF  0877               	movf	LCD_Set_Cursor@z,w
 13535  13D0  319F  2711  3193   	fcall	_LCD_Cmd
 13536                           
 13537                           ;lcd.c: 139: LCD_Cmd(w);
 13538  13D3  0878               	movf	LCD_Set_Cursor@w,w
 13539  13D4  319F  2711         	fcall	_LCD_Cmd
 13540                           
 13541                           ;lcd.c: 140: }
 13542  13D6  0008               	return
 13543  13D7                     l3197:	
 13544                           
 13545                           ;lcd.c: 142: else if(x == 3)
 13546  13D7  3003               	movlw	3
 13547  13D8  0676               	xorwf	LCD_Set_Cursor@x,w
 13548  13D9  1D03               	btfss	3,2
 13549  13DA  0008               	return
 13550                           
 13551                           ;lcd.c: 143: {
 13552                           ;lcd.c: 144: temp = 0xD4 + y;
 13553  13DB  0873               	movf	LCD_Set_Cursor@y,w
 13554  13DC  3ED4               	addlw	212
 13555  13DD  00F4               	movwf	??_LCD_Set_Cursor
 13556  13DE  0874               	movf	??_LCD_Set_Cursor,w
 13557  13DF  00F9               	movwf	LCD_Set_Cursor@temp
 13558                           
 13559                           ;lcd.c: 146: z = temp>>4;
 13560  13E0  0879               	movf	LCD_Set_Cursor@temp,w
 13561  13E1  00F4               	movwf	??_LCD_Set_Cursor
 13562  13E2  3004               	movlw	4
 13563  13E3                     u4015:	
 13564  13E3  36F4               	lsrf	??_LCD_Set_Cursor,f
 13565  13E4  0B89               	decfsz	9,f
 13566  13E5  2BE3               	goto	u4015
 13567  13E6  0874               	movf	??_LCD_Set_Cursor,w
 13568  13E7  00F5               	movwf	??_LCD_Set_Cursor+1
 13569  13E8  0875               	movf	??_LCD_Set_Cursor+1,w
 13570  13E9  00F7               	movwf	LCD_Set_Cursor@z
 13571                           
 13572                           ;lcd.c: 147: w = temp & 0x0F;
 13573  13EA  0879               	movf	LCD_Set_Cursor@temp,w
 13574  13EB  390F               	andlw	15
 13575  13EC  00F4               	movwf	??_LCD_Set_Cursor
 13576  13ED  0874               	movf	??_LCD_Set_Cursor,w
 13577  13EE  00F8               	movwf	LCD_Set_Cursor@w
 13578                           
 13579                           ;lcd.c: 148: LCD_Cmd(z);
 13580  13EF  0877               	movf	LCD_Set_Cursor@z,w
 13581  13F0  319F  2711  3193   	fcall	_LCD_Cmd
 13582                           
 13583                           ;lcd.c: 149: LCD_Cmd(w);
 13584  13F3  0878               	movf	LCD_Set_Cursor@w,w
 13585  13F4  319F  2711         	fcall	_LCD_Cmd
 13586  13F6  0008               	return
 13587  13F7                     __end_of_LCD_Set_Cursor:	
 13588                           
 13589                           	psect	text40
 13590  1F11                     __ptext40:	
 13591 ;; *************** function _LCD_Cmd *****************
 13592 ;; Defined at:
 13593 ;;		line 65 in file "lcd.c"
 13594 ;; Parameters:    Size  Location     Type
 13595 ;;  a               1    wreg     unsigned char 
 13596 ;; Auto vars:     Size  Location     Type
 13597 ;;  a               1    2[COMMON] unsigned char 
 13598 ;; Return value:  Size  Location     Type
 13599 ;;                  1    wreg      void 
 13600 ;; Registers used:
 13601 ;;		wreg, status,2, status,0, pclath, cstack
 13602 ;; Tracked objects:
 13603 ;;		On entry : 0/0
 13604 ;;		On exit  : 0/0
 13605 ;;		Unchanged: 0/0
 13606 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13607 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13608 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13609 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13610 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13611 ;;Total ram usage:        2 bytes
 13612 ;; Hardware stack levels used:    1
 13613 ;; Hardware stack levels required when called:    1
 13614 ;; This function calls:
 13615 ;;		_LCD_Port
 13616 ;; This function is called by:
 13617 ;;		_InitCustomChars
 13618 ;;		_LCD_Clear
 13619 ;;		_LCD_Set_Cursor
 13620 ;;		_LCD_Init
 13621 ;; This function uses a non-reentrant model
 13622 ;;
 13623                           
 13624                           
 13625                           ;psect for function _LCD_Cmd
 13626  1F11                     _LCD_Cmd:	
 13627                           
 13628                           ;incstack = 0
 13629                           ; Regs used in _LCD_Cmd: [wreg+status,2+status,0+pclath+cstack]
 13630                           ;LCD_Cmd@a stored from wreg
 13631  1F11  00F2               	movwf	LCD_Cmd@a
 13632                           
 13633                           ;lcd.c: 67: RB0 = 0;
 13634  1F12  0020               	movlb	0	; select bank0
 13635  1F13  100D               	bcf	13,0	;volatile
 13636                           
 13637                           ;lcd.c: 68: LCD_Port(a);
 13638  1F14  0872               	movf	LCD_Cmd@a,w
 13639  1F15  319F  2742  319F   	fcall	_LCD_Port
 13640                           
 13641                           ;lcd.c: 69: RB1 = 1;
 13642  1F18  0020               	movlb	0	; select bank0
 13643  1F19  148D               	bsf	13,1	;volatile
 13644                           
 13645                           ;lcd.c: 70: RB1 = 0;
 13646  1F1A  108D               	bcf	13,1	;volatile
 13647                           
 13648                           ;lcd.c: 71: _delay((unsigned long)((4)*(250000/4000.0)));
 13649  1F1B  3053               	movlw	83
 13650  1F1C  00F1               	movwf	??_LCD_Cmd
 13651  1F1D                     u5087:	
 13652  1F1D  0BF1               	decfsz	??_LCD_Cmd,f
 13653  1F1E  2F1D               	goto	u5087
 13654  1F1F  0008               	return
 13655  1F20                     __end_of_LCD_Cmd:	
 13656                           
 13657                           	psect	text41
 13658  1F42                     __ptext41:	
 13659 ;; *************** function _LCD_Port *****************
 13660 ;; Defined at:
 13661 ;;		line 41 in file "lcd.c"
 13662 ;; Parameters:    Size  Location     Type
 13663 ;;  a               1    wreg     unsigned char 
 13664 ;; Auto vars:     Size  Location     Type
 13665 ;;  a               1    0[COMMON] unsigned char 
 13666 ;; Return value:  Size  Location     Type
 13667 ;;                  1    wreg      void 
 13668 ;; Registers used:
 13669 ;;		wreg
 13670 ;; Tracked objects:
 13671 ;;		On entry : 0/0
 13672 ;;		On exit  : 0/0
 13673 ;;		Unchanged: 0/0
 13674 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13675 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13676 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13677 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13678 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13679 ;;Total ram usage:        1 bytes
 13680 ;; Hardware stack levels used:    1
 13681 ;; This function calls:
 13682 ;;		Nothing
 13683 ;; This function is called by:
 13684 ;;		_LCD_Cmd
 13685 ;;		_LCD_Init
 13686 ;;		_LCD_Write_Char
 13687 ;; This function uses a non-reentrant model
 13688 ;;
 13689                           
 13690                           
 13691                           ;psect for function _LCD_Port
 13692  1F42                     _LCD_Port:	
 13693                           
 13694                           ;incstack = 0
 13695                           ; Regs used in _LCD_Port: [wreg]
 13696                           ;LCD_Port@a stored from wreg
 13697  1F42  00F0               	movwf	LCD_Port@a
 13698                           
 13699                           ;lcd.c: 43: if(a & 1)
 13700  1F43  1C70               	btfss	LCD_Port@a,0
 13701  1F44  2F48               	goto	l28
 13702                           
 13703                           ;lcd.c: 44: RB2 = 1;
 13704  1F45  0020               	movlb	0	; select bank0
 13705  1F46  150D               	bsf	13,2	;volatile
 13706  1F47  2F4A               	goto	l2393
 13707  1F48                     l28:	
 13708                           
 13709                           ;lcd.c: 45: else
 13710                           ;lcd.c: 46: RB2 = 0;
 13711  1F48  0020               	movlb	0	; select bank0
 13712  1F49  110D               	bcf	13,2	;volatile
 13713  1F4A                     l2393:	
 13714                           
 13715                           ;lcd.c: 48: if(a & 2)
 13716  1F4A  1CF0               	btfss	LCD_Port@a,1
 13717  1F4B  2F4E               	goto	l30
 13718                           
 13719                           ;lcd.c: 49: RB3 = 1;
 13720  1F4C  158D               	bsf	13,3	;volatile
 13721  1F4D  2F4F               	goto	l2397
 13722  1F4E                     l30:	
 13723                           
 13724                           ;lcd.c: 50: else
 13725                           ;lcd.c: 51: RB3 = 0;
 13726  1F4E  118D               	bcf	13,3	;volatile
 13727  1F4F                     l2397:	
 13728                           
 13729                           ;lcd.c: 53: if(a & 4)
 13730  1F4F  1D70               	btfss	LCD_Port@a,2
 13731  1F50  2F53               	goto	l32
 13732                           
 13733                           ;lcd.c: 54: RB4 = 1;
 13734  1F51  160D               	bsf	13,4	;volatile
 13735  1F52  2F54               	goto	l2401
 13736  1F53                     l32:	
 13737                           
 13738                           ;lcd.c: 55: else
 13739                           ;lcd.c: 56: RB4 = 0;
 13740  1F53  120D               	bcf	13,4	;volatile
 13741  1F54                     l2401:	
 13742                           
 13743                           ;lcd.c: 58: if(a & 8)
 13744  1F54  1DF0               	btfss	LCD_Port@a,3
 13745  1F55  2F58               	goto	l34
 13746                           
 13747                           ;lcd.c: 59: RB5 = 1;
 13748  1F56  168D               	bsf	13,5	;volatile
 13749  1F57  0008               	return
 13750  1F58                     l34:	
 13751                           
 13752                           ;lcd.c: 60: else
 13753                           ;lcd.c: 61: RB5 = 0;
 13754  1F58  128D               	bcf	13,5	;volatile
 13755  1F59  0008               	return
 13756  1F5A                     __end_of_LCD_Port:	
 13757                           
 13758                           	psect	text42
 13759  1EF5                     __ptext42:	
 13760 ;; *************** function _ADCC_GetSingleConversion *****************
 13761 ;; Defined at:
 13762 ;;		line 53 in file "adcc.c"
 13763 ;; Parameters:    Size  Location     Type
 13764 ;;  channel         1    wreg     enum E13559
 13765 ;; Auto vars:     Size  Location     Type
 13766 ;;  channel         1    3[COMMON] enum E13559
 13767 ;; Return value:  Size  Location     Type
 13768 ;;                  2    0[COMMON] unsigned int 
 13769 ;; Registers used:
 13770 ;;		wreg
 13771 ;; Tracked objects:
 13772 ;;		On entry : 0/0
 13773 ;;		On exit  : 0/0
 13774 ;;		Unchanged: 0/0
 13775 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13776 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13777 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13778 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13779 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13780 ;;Total ram usage:        4 bytes
 13781 ;; Hardware stack levels used:    1
 13782 ;; This function calls:
 13783 ;;		Nothing
 13784 ;; This function is called by:
 13785 ;;		_main
 13786 ;; This function uses a non-reentrant model
 13787 ;;
 13788                           
 13789                           
 13790                           ;psect for function _ADCC_GetSingleConversion
 13791  1EF5                     _ADCC_GetSingleConversion:	
 13792                           
 13793                           ;incstack = 0
 13794                           ; Regs used in _ADCC_GetSingleConversion: [wreg]
 13795                           ;ADCC_GetSingleConversion@channel stored from wreg
 13796  1EF5  00F3               	movwf	ADCC_GetSingleConversion@channel
 13797                           
 13798                           ;adcc.c: 56: ADPCH = channel;
 13799  1EF6  0873               	movf	ADCC_GetSingleConversion@channel,w
 13800  1EF7  0021               	movlb	1	; select bank1
 13801  1EF8  009E               	movwf	30	;volatile
 13802                           
 13803                           ;adcc.c: 59: ADCON0bits.ADON = 1;
 13804  1EF9  1793               	bsf	19,7	;volatile
 13805                           
 13806                           ;adcc.c: 62: ADCON0bits.ADCONT = 0;
 13807  1EFA  1313               	bcf	19,6	;volatile
 13808                           
 13809                           ;adcc.c: 65: ADCON0bits.ADGO = 1;
 13810  1EFB  1413               	bsf	19,0	;volatile
 13811  1EFC                     l268:	
 13812                           ;adcc.c: 69: {
 13813                           
 13814                           ;adcc.c: 68: while (ADCON0bits.ADGO)
 13815                           
 13816  1EFC  1813               	btfsc	19,0	;volatile
 13817  1EFD  2EFC               	goto	l268
 13818                           
 13819                           ;adcc.c: 70: }
 13820                           ;adcc.c: 73: return ((ADRESH << 8) + ADRESL);
 13821  1EFE  080D               	movf	13,w	;volatile
 13822  1EFF  00F1               	movwf	?_ADCC_GetSingleConversion+1
 13823  1F00  080C               	movf	12,w	;volatile
 13824  1F01  00F0               	movwf	?_ADCC_GetSingleConversion
 13825  1F02  0008               	return
 13826  1F03                     __end_of_ADCC_GetSingleConversion:	
 13827  007E                     btemp	set	126	;btemp
 13828  007E                     wtemp	set	126
 13829  007E                     wtemp0	set	126
 13830  0080                     wtemp1	set	128
 13831  0082                     wtemp2	set	130
 13832  0084                     wtemp3	set	132
 13833  0086                     wtemp4	set	134
 13834  0088                     wtemp5	set	136
 13835  007F                     wtemp6	set	127
 13836  007E                     ttemp	set	126
 13837  007E                     ttemp0	set	126
 13838  0081                     ttemp1	set	129
 13839  0084                     ttemp2	set	132
 13840  0087                     ttemp3	set	135
 13841  007F                     ttemp4	set	127
 13842  007E                     ltemp	set	126
 13843  007E                     ltemp0	set	126
 13844  0082                     ltemp1	set	130
 13845  0086                     ltemp2	set	134
 13846  0080                     ltemp3	set	128


Data Sizes:
    Strings     11
    Constant    145
    Data        24
    BSS         9
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     71      78
    BANK1            80     72      74
    BANK2            80      0      24
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           28      0       0
    BANK12            0      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> log@exponent(BANK0[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 27
		 -> log@coeff(CODE[27]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_2(CODE[5]), STR_1(CODE[6]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 8
		 -> main@s(BANK1[8]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    LCD_Write_String@a	PTR unsigned char  size(1) Largest target is 8
		 -> main@s(BANK1[8]), 


Critical Paths under _main in COMMON

    _sprintf->___lldiv
    _sprintf->___lltoft
    _sprintf->___wmul
    _sprintf->__div_to_l_
    _scale->___wmul
    _fround->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___ftsub->___lltoft
    _log->___awtoft
    _eval_poly->___wmul
    ___wmul->___awdiv
    ___ftmul->___awtoft
    ___ftmul->___wmul
    ___ftadd->___awtoft
    ___ftadd->___wmul
    ___awtoft->___ftpack
    ___lwtoft->___ftpack
    ___ftdiv->___lwtoft
    _SYSTEM_Initialize->_InitCustomChars
    _LCD_Init->_LCD_Cmd
    _LCD_Clear->_LCD_Cmd
    _InitCustomChars->_LCD_Write_Char
    _LCD_Write_String->_LCD_Write_Char
    _LCD_Write_Char->_LCD_Port
    _LCD_Set_Cursor->_LCD_Cmd
    _LCD_Cmd->_LCD_Port

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___ftge
    _scale->___ftmul
    _fround->___ftmul
    ___fttol->_scale
    ___ftsub->___ftadd
    _log->_eval_poly
    _eval_poly->___ftadd
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___ftadd->_fround
    ___ftge->___ftadd

Critical Paths under _main in BANK1

    _main->_sprintf

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                47    47      0   81008
                                             25 BANK1     47    47      0
           _ADCC_GetSingleConversion
                     _LCD_Set_Cursor
                     _LCD_Write_Char
                   _LCD_Write_String
                 _PWM6_LoadDutyValue
                  _SYSTEM_Initialize
                            ___aldiv
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftneg
                            ___ftsub
                           ___lwtoft
                                _log
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             41    36      5   43192
                                             60 BANK0     11     6      5
                                              0 BANK1     25    25      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               12     9      3    9834
                                             24 BANK0      9     6      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              17    14      3    9636
                                             24 BANK0     14    11      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4    1356
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4    1466
                                              7 COMMON     5     1      4
                                              0 BANK0      4     4      0
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         16    10      6     409
                                              0 COMMON    10     4      6
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          20    14      6     552
                                              0 COMMON    14     8      6
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             6     2      4    1907
                                              8 COMMON     6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                             10     2      8     583
                                              0 BANK0     10     2      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     480
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             14    10      4     411
                                             33 BANK0     14    10      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    3752
                                             51 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     191
                                              0 COMMON     3     0      3
 ---------------------------------------------------------------------------------
 (1) _log                                                  6     3      3   21380
                                             61 BANK0      6     3      3
                           ___awtoft
                            ___ftadd
                             ___ftge
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (2) _frexp                                                6     2      4     330
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) _eval_poly                                           10     3      7   10333
                                             51 BANK0     10     3      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2530
                                             12 COMMON     2     2      0
                                              4 BANK0      4     0      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             16    10      6    3993
                                              8 BANK0     16    10      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             13     7      6    3473
                                             38 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___wmul (ARG)
                              _frexp (ARG)
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6    1064
                                             51 BANK0      9     3      6
                            ___ftadd (ARG)
                            ___ftneg (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             6     3      3    1929
                                              8 COMMON     6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___lwtoft                                             4     1      3    2019
                                              8 COMMON     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             16    10      6    2595
                                              0 BANK0     16    10      6
                           ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    1785
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (1) ___aldiv                                             15     7      8     406
                                              0 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    2     2      0     709
                                              7 COMMON     2     2      0
                    _ADCC_Initialize
                    _InitCustomChars
                          _LCD_Clear
                           _LCD_Init
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _PWM6_Initialize
                    _TMR2_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM6_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               1     1      0      23
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LCD_Init                                             3     3      0     220
                                              3 COMMON     3     3      0
                            _LCD_Cmd
                           _LCD_Port
 ---------------------------------------------------------------------------------
 (2) _LCD_Clear                                            0     0      0     110
                            _LCD_Cmd
 ---------------------------------------------------------------------------------
 (2) _InitCustomChars                                      2     2      0     356
                                              5 COMMON     2     2      0
                            _LCD_Cmd
                     _LCD_Write_Char
 ---------------------------------------------------------------------------------
 (2) _ADCC_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM6_LoadDutyValue                                   4     2      2      97
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _LCD_Write_String                                     4     4      0     322
                                              5 COMMON     4     4      0
                     _LCD_Write_Char
 ---------------------------------------------------------------------------------
 (3) _LCD_Write_Char                                       4     4      0     178
                                              1 COMMON     4     4      0
                           _LCD_Port
 ---------------------------------------------------------------------------------
 (1) _LCD_Set_Cursor                                       7     6      1     756
                                              3 COMMON     7     6      1
                            _LCD_Cmd
 ---------------------------------------------------------------------------------
 (3) _LCD_Cmd                                              2     2      0     110
                                              1 COMMON     2     2      0
                           _LCD_Port
 ---------------------------------------------------------------------------------
 (3) _LCD_Port                                             1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADCC_GetSingleConversion                             4     1      3      22
                                              0 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCC_GetSingleConversion
   _LCD_Set_Cursor
     _LCD_Cmd
       _LCD_Port
   _LCD_Write_Char
     _LCD_Port
   _LCD_Write_String
     _LCD_Write_Char
       _LCD_Port
   _PWM6_LoadDutyValue
   _SYSTEM_Initialize
     _ADCC_Initialize
     _InitCustomChars
       _LCD_Cmd
         _LCD_Port
       _LCD_Write_Char
         _LCD_Port
     _LCD_Clear
       _LCD_Cmd
         _LCD_Port
     _LCD_Init
       _LCD_Cmd
         _LCD_Port
       _LCD_Port
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM6_Initialize
     _TMR2_Initialize
   ___aldiv
   ___ftadd
     ___awtoft (ARG)
       ___ftpack
     ___ftdiv (ARG)
       ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
     ___ftneg (ARG)
     ___ftpack (ARG)
     ___lwtoft (ARG)
       ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     _frexp (ARG)
     _fround (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   ___ftdiv
     ___ftpack
     ___ftpack (ARG)
     ___lwtoft (ARG)
       ___ftpack
   ___ftge
     ___ftadd (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftneg (ARG)
     ___lwtoft (ARG)
       ___ftpack
   ___ftneg
   ___ftsub
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lltoft (ARG)
       ___ftpack
   ___lwtoft
     ___ftpack
   _log
     ___awtoft
       ___ftpack
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftneg (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
     _eval_poly
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _frexp
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftneg (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     47      4E       5       97.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     48      4A       7       92.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      18       9       30.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      BE      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              1C      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      BE      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Thu Sep 07 00:04:01 2017

                      __CFG_CP$OFF 0000                                 l30 1F4E  
                               l32 1F53                                 l34 1F58  
                               l28 1F48                       ___awdiv@sign 0021  
              ___wmul@multiplicand 0026        __size_of_PWM6_LoadDutyValue 0016  
                     ___ftadd@exp1 0052                       ___ftadd@exp2 0051  
                      __CFG_LVP$ON 0000                       ___ftadd@sign 0050  
                              l206 0DDA                                l207 0DE6  
                              l342 02D3                                l334 019D  
                              l268 1EFC                                l541 1408  
                              l721 004C                                l731 00C5  
                              l652 094D                                l388 06FC  
                              l486 1FAF                                l671 12EC  
                              l672 12F4                                l664 12D9  
                              l772 14E6                                l695 17A9  
                              _GIE 005F                                _RB0 0068  
                              _RB1 0069                                _RB2 006A  
                              _RB3 006B                                _RB4 006C  
                              _RB5 006D                       __CFG_CPD$OFF 0000  
                              _log 15A9                       ___awmod@sign 0076  
                  _TMR2_Initialize 1F20                       __CFG_BORV$LO 0000  
                              wreg 0009                    __end_of_LCD_Cmd 1F20  
                     __CFG_ZCD$OFF 0000                       ___ftdiv@cntr 002A  
                   _LCD_Set_Cursor 1378                       ___ftdiv@sign 002F  
                             l3001 1FEA                               l3013 082D  
                             l3103 11EC                               l2401 1F54  
                             l3009 0817                               l3113 1124  
                             l3115 1132                               l3123 1155  
                             l3131 1054                               l3213 1F8E  
                             l2413 12B6                               l3037 1FCA  
                             l3133 1064                               l2423 12DE  
                             l2415 12C0                               l3047 1492  
                             l3119 114A                               l2425 12E6  
                             l2417 12C5                               l2409 12AF  
                             l2601 1784                               l3145 10F2  
                             l3073 14DD                               l3065 14C2  
                             l2521 1242                               l2513 1231  
                             l2505 1213                               l3401 0417  
                             l2611 17A5                               l2603 1788  
                             l3163 12A0                               l3075 14E9  
                             l3067 14D0                               l3091 11C1  
                             l2507 121F                               l3323 01CF  
                             l3315 019F                               l3307 0160  
                             l2517 123A                               l2533 1168  
                             l3405 0440                               l3333 0209  
                             l3317 01BB                               l3309 0198  
                             l2615 17BB                               l3263 15D8  
                             l3079 14F7                               l2551 118D  
                             l3431 048D                               l3415 0452  
                             l2393 1F4A                               l3177 1398  
                             l2609 179B                               l3257 15C7  
                             l3089 11B3                               l2545 1175  
                             l2537 116F                               l3505 06C2  
                             l3433 04F1                               l3417 0471  
                             l3281 0101                               l3187 13B7  
                             l3611 152D                               l2619 17CD  
                             l3099 11E1                               l2547 1181  
                             l2555 1196                               l3531 0757  
                             l3523 072C                               l3371 033F  
                             l3363 0308                               l2397 1F4F  
                             l3197 13D7                               l3605 1517  
                             l2629 17E8                               l2573 1739  
                             l2661 16C6                               l2645 1683  
                             l2469 1FA8                               l3533 075B  
                             l3525 072F                               l3517 0713  
                             l3509 06E0                               l3453 0547  
                             l3445 0521                               l3357 02B7  
                             l3349 0265                               l2591 1762  
                             l2639 166D                               l2495 120B  
                             l2559 119E                               l2831 0A91  
                             l2823 0A19                               l3551 078D  
                             l3439 0504                               l3375 0358  
                             l3287 0113                               l3295 014D  
                             l3633 1587                               l3625 156E  
                             l2569 1732                               l2673 16E2  
                             l2657 16BE                               l2489 1200  
                             l3529 0754                               l3385 038C  
                             l3553 00D9                               l3713 0D1E  
                             l2691 1037                               l2579 1748  
                             l2915 0087                               l2907 006D  
                             l3539 0772                               l3475 0646  
                             l3395 03E0                               l3555 07D6  
                             l2597 1775                               l2669 16DA  
                             l2933 00BC                               l2925 00A1  
                             l2853 0BC6                               l3493 0685  
                             l3469 0633                               l3389 03DA  
                             l3477 064B                               l3591 1462  
                             l2599 177F                               l2951 0877  
                             l2935 00C8                               l2927 00AF  
                             l2871 0CE5                               l2847 0B67  
                             l3487 0677                               l3751 0E1E  
                             l3743 0DEE                               l3727 0DA7  
                             l2697 1048                               l3577 1429  
                             l3569 1419                               l2961 08C2  
                             l2945 085A                               l2865 0C86  
                             l2857 0BE3                               l3737 0DCE  
                             l3595 1470                               l3587 1457  
                             l3579 1437                               l2883 1F0F  
                             l3499 068B                               l2981 0937  
                             l2893 0034                               l3757 0E4B  
                             l3749 0E1A                               l3759 0E4D  
                             l2969 090A                               l2987 0944  
                             l2979 0929                               l2989 0950  
                             ?_log 005D                               STR_1 1891  
                             STR_2 1897                               u3005 1776  
                             _LATA 0016                               _LATB 0017  
                             _LATC 0018                               u3035 1789  
                             u3205 16E3                               u4015 13E3  
                             u3215 16E9                               u3135 168F  
                             u3065 179C                               u3145 169F  
                             u3250 10A7                               _T2PR 028D  
                             u4045 0014                               u3165 16C7  
                             u3405 0088                               u4205 02DF  
                             u5007 1327                               u3175 16CD  
                             u4215 0314                               u5017 132F  
                             u2625 12FB                               u2545 12BB  
                      main@counter 00D5                               u5027 1337  
                             u3515 08C3                               u4315 045E  
                             u2645 1017                               u5037 1343  
                             u2565 12D4                               u3525 08ED  
                             u3445 00A2                               u2725 1216  
                             u4245 033D                               u4165 021E  
                             u5047 134F                               u5057 135B  
                             u2585 12E1                               u2665 1FB0  
                             u3385 006E                               u2745 1220  
                             u2825 1178                               u4505 0724  
                             u4345 050F                               u5067 1368  
                             u2675 1FB5                               u3715 14C3  
                             u3475 00BD                               u3395 007E  
                             u2755 122A                               u4515 0743  
                             u4435 06B6                               u4355 051D  
                             u4275 040B                               u5077 1375  
                             u4605 142C                               u3805 11C2  
                             u3565 092A                               u2765 1232  
                             u2845 1187                               u5087 1F1D  
                             u3815 11D6                               u2855 118E  
                             u4455 06D6                               u4625 1438  
                             u4705 154F                               u3745 14DE  
                             u3825 11E2                               u3905 1059  
                             u4465 06F4                               u4635 144C  
                             u4715 156F                               u3595 0945  
                             u4645 1458                               u4725 157E  
                             u3685 1499                               u4735 1588  
                             u2975 1763                               u3855 1127  
                             u3785 11B6                               u3955 1384  
                             u3875 1140                               u3885 114B  
                             u3975 13A3                               u4695 153F  
                             u3995 13C3                               u4875 0DD4  
                             u4957 10C2                               u4885 0DE0  
                             u4967 10CE                               u4977 10DA  
                             u4987 1314                               u4997 131F  
                             _WPUA 0F39                               _WPUB 0F44  
                             _WPUC 0F4F                               _WPUE 0F65  
                     __CFG_WRT$OFF 0000                      __CFG_FCMEN$ON 0000  
                ?_LCD_Write_String 0070                               _main 0D02  
                     ___ftpack@arg 0070                 __size_of_LCD_Clear 0008  
                     ___ftpack@exp 0073                               fsr0h 0005  
                             fsr1h 0007                               fsr0l 0004  
                             indf0 0000                               indf1 0001  
                             fsr1l 0006                               btemp 007E  
                             log@x 005D                               ltemp 007E  
                             start 0002                 ??_LCD_Write_String 0075  
                             ttemp 007E                               wtemp 007E  
                     _sprintf$1019 00A0                      __CFG_CSWEN$ON 0000  
                    __CFG_MCLRE$ON 0000                       ___ftmul@cntr 0036  
                     ___ftmul@sign 0037                       ___fttol@exp1 004E  
                            ??_log 0060                       ___fttol@lval 004A  
                 __end_of_LCD_Init 1378                   __end_of_LCD_Port 1F5A  
   __size_of_OSCILLATOR_Initialize 0008      __end_of_OSCILLATOR_Initialize 1EC8  
                  __end_of___aldiv 1479                              _ADACQ 009D  
                            _ADCAP 009B                              _ADACT 0099  
                            ?_main 0070                              _ADCLK 0098  
                            _ADPCH 009E                              _ADREF 009A  
                  __end_of___awdiv 1247                              _ADPRE 009C  
                  __end_of___ftadd 1800                      __CFG_WDTE$OFF 0000  
                  __end_of___awmod 11A3                              _ADRPT 010D  
                  __end_of___ftdiv 15A9                    __end_of___ftneg 1ED0  
                  __end_of___lldiv 11F5                    __end_of___ftmul 170A  
                  ___awdiv@divisor 0077                    __end_of___llmod 115E  
                  __end_of___ftsub 1FE0                    __end_of___fttol 1500  
                            _T2CON 028E                main@readTemperature 00E3  
                            _T2HLT 028F                              _T2TMR 028C  
                            _T2RST 0291                    ___awdiv@counter 0020  
                            _OSCEN 0891                              _TRISA 0011  
                            _TRISB 0012                              _TRISC 0013  
                  _PWM6_Initialize 1EE8                       ___lltoft@exp 007D  
           __end_of_LCD_Set_Cursor 13F7                      ___awtoft@sign 007D  
                  __end_of_dpowers 1828                              _frexp 10E0  
                            _errno 006C                              _scale 0ABE  
                  __end_of_isdigit 1F11                      ___ftpack@sign 0074  
                            main@R 00CD                              main@s 00C5  
                   __CFG_BOREN$OFF 0000                       main@setpoint 00D9  
                            ltemp0 007E                              ltemp1 0082  
                            ltemp2 0086                              ltemp3 0080  
                            ttemp0 007E                              ttemp1 0081  
                            ttemp2 0084                              ttemp3 0087  
                            ttemp4 007F                              status 0003  
                            wtemp0 007E                              wtemp1 0080  
                            wtemp2 0082                              wtemp3 0084  
                            wtemp4 0086                              wtemp5 0088  
                            wtemp6 007F                    __end_of_sprintf 07DB  
                 InitCustomChars@i 0076                     _LCD_Write_Char 1007  
                  __initialization 07DB                        log@exponent 0061  
                     __end_of_main 1000            __end_of_TMR2_Initialize 1F2F  
                           ??_main 00B9                      ___fttol@sign1 0049  
                __end_of_LCD_Clear 1EC0                          ??_LCD_Cmd 0071  
             __size_of__tdiv_to_l_ 00B6                    ?_LCD_Set_Cursor 0073  
                           _ADCON0 0093                             _ADCON1 0094  
                           _ADCON2 0095                             _ADCON3 0096  
                           ?_frexp 0070                   ___llmod@dividend 0024  
                           _ADLTHH 010F                             ?_scale 0038  
                           _ADLTHL 010E                             _ADRESH 008D  
                           _ADRESL 008C                             _ADSTAT 0097  
                           _ADUTHH 0111                   ___awdiv@dividend 0079  
                           _ADUTHL 0110                   __end_of___awtoft 2000  
                           _ANSELA 0F38                             _ANSELB 0F43  
                           _ANSELC 0F4E                   __end_of___ftpack 130B  
               __CFG_RSTOSC$HFINT1 0000                             _RA1PPS 0F11  
                 __end_of___lltoft 1078                     __CFG_WDTCCS$SC 0000  
                           _FVRCON 090C                   __end_of___lwtoft 1F42  
                           _OSCFRQ 0893             __end_of_LCD_Write_Char 102A  
                   __CFG_PWRTE$OFF 0000                   __end_of__powers_ 1876  
                     _CCPTMRS1bits 021F                             ___ftge 0800  
                        ??___aldiv 0078                             ___wmul 1FA6  
                        ??___awdiv 007B                          ??___ftadd 004C  
                   __CFG_STVREN$ON 0000                          ??___awmod 0074  
                        ??___ftdiv 0026                          ??___ftneg 0073  
                        ??___lldiv 0078                          ??___ftmul 002E  
                        ??___llmod 0028                          ??___ftsub 007E  
                        ??___fttol 0045            __end_of_PWM6_Initialize 1EF5  
                           _fround 0959                   ___awdiv@quotient 0022  
                  ___awmod@divisor 0070                    ___awmod@counter 0075  
            ___ftmul@f3_as_product 0033                    _ADCC_Initialize 1F72  
                        ??_isdigit 0070  __size_of_ADCC_GetSingleConversion 000E  
        ?_ADCC_GetSingleConversion 0070                      main@steinhart 00E5  
                        ??_sprintf 0061                    _InitCustomChars 102A  
                  LCD_Set_Cursor@w 0078                    LCD_Set_Cursor@x 0076  
                  LCD_Set_Cursor@y 0073                    LCD_Set_Cursor@z 0077  
                _SYSTEM_Initialize 10A9                   __end_oflog@coeff 1891  
          __end_of__initialization 07FD                          ?_LCD_Init 0070  
                        ?_LCD_Port 0070                         ___ftadd@f1 0046  
                       ___ftadd@f2 0049                         ___ftge@ff1 0053  
                       ___ftge@ff2 0056                 ?_SYSTEM_Initialize 0070  
                     eval_poly@res 005A                         ___ftdiv@f1 0023  
                       ___ftdiv@f2 0020                         ___ftdiv@f3 002B  
                  ?_LCD_Write_Char 0070                         ___ftneg@f1 0070  
                    LCD_Init@style 0075                         ___awtoft@c 0078  
                       ___ftmul@f1 0028                         ___ftmul@f2 002B  
                       ___ftsub@f1 0056                         ___ftsub@f2 0053  
                       ___fttol@f1 0041                     __pcstackCOMMON 0070  
                        LCD_Port@a 0070                       __pidataBANK2 1F5A  
              ??_SYSTEM_Initialize 0077                         ___lltoft@c 0078  
                    __end_of_frexp 111B                      __end_of_scale 0D02  
                 ?_TMR2_Initialize 0070                         ___lwtoft@c 0078  
                       __div_to_l_ 083C                    __div_to_l_@exp1 0025  
                  __div_to_l_@cntr 0024                            ??_frexp 0074  
                          ??_scale 003B          __end_of_SYSTEM_Initialize 10E0  
                  __div_to_l_@quot 0020                       sprintf@width 00A6  
                       __pbssBANK0 0067                         __pbssBANK1 00E8  
               __size_of_eval_poly 0060                         ??_LCD_Init 0073  
                       ??_LCD_Port 0070                      __div_to_l_@f1 0070  
                    __div_to_l_@f2 0073                         __pmaintext 0D02  
                          ?___ftge 0053                            ?___wmul 0024  
                  __CFG_PPS1WAY$ON 0000            __end_of_ADCC_Initialize 1F8B  
       __end_of_PWM6_LoadDutyValue 001B                            ?_fround 0038  
        __size_of_LCD_Write_String 001B                   ?_PWM6_Initialize 0070  
                        ?___awtoft 0078                          ?___ftpack 0070  
                          _ADSTPTH 0113                            _ADSTPTL 0112  
                        ?___lltoft 0078                          ?___lwtoft 0078  
          __end_of_InitCustomChars 1050                            _LCD_Cmd 1F11  
                          _OSCCON1 088D                            _OSCCON3 088F  
                          _OSCTUNE 0892                            _PWM6DCH 038D  
                          _PWM6DCL 038C                            _PWM6CON 038E  
                          _PPSLOCK 0E8F                  __end_of__npowers_ 184F  
                       _scale$1018 003D               __CFG_SCANE$available 0000  
                          ___aldiv 13F7                            ___cgram 0120  
                  __size_of___ftge 003C                            ___awdiv 11F5  
                          ___ftadd 170A                            ___awmod 115E  
                          ___ftdiv 1500                            ___ftneg 1EC8  
                          ___lldiv 11A3                    __size_of___wmul 001C  
                          ___ftmul 1656                            ___llmod 111B  
                          ___ftsub 1FC2                            ___fttol 1479  
                       ??___awtoft 007B                         ??___ftpack 0075  
                __end_of_eval_poly 12A7                    __size_of_fround 0165  
                       ??___lltoft 007C                   ??_LCD_Set_Cursor 0074  
                          __ptext1 00D1                            __ptext2 0ABE  
                          __ptext3 1F03                            __ptext4 0959  
                          __ptext5 115E                            __ptext6 11F5  
                          __ptext7 001B                            __ptext8 083C  
                          __ptext9 1050                         ??___lwtoft 007B  
                      ?__div_to_l_ 0070                            _dpowers 1800  
            _OSCILLATOR_Initialize 1EC0                          _T2CONbits 028E  
                     __size_of_log 00AD                            _isdigit 1F03  
                 ___awmod@dividend 0072                   ___aldiv@dividend 0074  
         ??_PIN_MANAGER_Initialize 0070                            _samples 238C  
                        _LCD_Clear 1EB8         __size_of_SYSTEM_Initialize 0037  
                          _sprintf 00D1                            clrloop0 1ED1  
             end_of_initialization 07FD                     main@outCurrent 00E1  
                          init_ram 1EDC                            initloop 1EDD  
                  ___lldiv@divisor 0070                    ___lldiv@counter 007D  
                 ___aldiv@quotient 0022                       __pstringtext 1800  
                 ?_ADCC_Initialize 0070                     __tdiv_to_l_@f1 0070  
                   __tdiv_to_l_@f2 0073   __end_of_ADCC_GetSingleConversion 1F03  
            __CFG_WDTCPS$WDTCPS_31 0000                      ??__tdiv_to_l_ 0076  
                 ?_InitCustomChars 0070                         ?_LCD_Clear 0070  
                 __CFG_FEXTOSC$OFF 0000                  LCD_Write_String@a 0078  
                LCD_Write_String@i 0076                   ??_LCD_Write_Char 0071  
                      ___ftdiv@exp 002E                         main@minute 00D3  
                __size_of_LCD_Init 006D                __size_of__div_to_l_ 011D  
                __size_of_LCD_Port 0018                         main@totals 00DB  
                      ___ftmul@exp 0032                     __end_of___ftge 083C  
                   __end_of___wmul 1FC2                   _LCD_Write_String 1F8B  
           ?_OSCILLATOR_Initialize 0070                     __end_of_fround 0ABE  
              start_initialization 07DB                         eval_poly@d 0056  
                       eval_poly@n 0058                         eval_poly@x 0053  
  __size_of_PIN_MANAGER_Initialize 0031                __end_of__tdiv_to_l_ 00D1  
                      __end_of_log 1656                         frexp@value 0070  
                  ___llmod@divisor 0020                    ___llmod@counter 0029  
                 __CFG_LPBOREN$OFF 0000                           ??___ftge 0059  
                         ??___wmul 007C                        __pdataBANK2 0120  
                  LCD_Write_Char@a 0074                    LCD_Write_Char@y 0073  
                         ??_fround 003B                      sprintf@tmpval 00A8  
                       fround@prec 0045                           ?_LCD_Cmd 0070  
                __size_of___awtoft 0020           _ADCC_GetSingleConversion 1EF5  
                __size_of___ftpack 0064                        __pbssBIGRAM 238C  
                __size_of___lltoft 0028                           LCD_Cmd@a 0072  
                        ___latbits 0002                  __size_of___lwtoft 0013  
                    __pcstackBANK0 0020                      __pcstackBANK1 00A0  
               _PWM6_LoadDutyValue 0005           __size_of_TMR2_Initialize 000F  
                      ??_LCD_Clear 0073                ?_PWM6_LoadDutyValue 0070  
                      sprintf@flag 00A4                        sprintf@fval 00B2  
                      sprintf@prec 00B6                          _main$1015 00D0  
           _PIN_MANAGER_Initialize 1078                           ?___aldiv 0070  
  ADCC_GetSingleConversion@channel 0073                           ?___awdiv 0077  
                         ?___ftadd 0046                           ?___awmod 0070  
                         ?___ftdiv 0020                           ?___ftneg 0070  
                         ?___lldiv 0070                           ?___ftmul 0028  
                         ?___llmod 0020                           ?___ftsub 0053  
                        __npowers_ 1828                           ?___fttol 0041  
             ??_PWM6_LoadDutyValue 0072                        __tdiv_to_l_ 001B  
                     ??__div_to_l_ 0076                           ?_isdigit 0070  
                        _eval_poly 1247           __size_of_PWM6_Initialize 000D  
                         ?_sprintf 005C                     __size_of_frexp 003B  
                         _T2CLKCON 0290                     __size_of_scale 0244  
           main@readTemperatureOld 00DF                    ___aldiv@divisor 0070  
                  ___aldiv@counter 0020                           _LCD_Init 130B  
                   ___wmul@product 007C                           _LCD_Port 1F42  
                        clear_ram0 1ED0                           _PIE0bits 0716  
               __end_of__div_to_l_ 0959                           _PIR4bits 0710  
                       _ADCON0bits 0093                  ___wmul@multiplier 0024  
                       ?_eval_poly 0053                   __size_of_LCD_Cmd 000F  
                        main@timer 00C3           __end_of_LCD_Write_String 1FA6  
                ??_TMR2_Initialize 0070                          frexp@eptr 0073  
             main@firstTimeThrough 00D7            ??_OSCILLATOR_Initialize 0070  
                 __size_of___aldiv 0082                   __size_of___awdiv 0052  
                 __size_of___ftadd 00F6                   __size_of___awmod 0045  
                 __size_of___ftdiv 00A9                   __size_of___ftneg 0008  
                 __size_of___lldiv 0052                   __size_of___ftmul 00B4  
                 __size_of___llmod 0043                   __size_of___ftsub 001E  
                 __size_of___fttol 0087                           ___awtoft 1FE0  
                         ___ftpack 12A7                        _fround$1016 0042  
                      _fround$1017 003F                           ___lltoft 1050  
                      _isdigit$733 0070                           ___lwtoft 1F2F  
                       sprintf@exp 00B0                         sprintf@val 00AC  
         __size_of_ADCC_Initialize 0019                    main@sampleIndex 00E8  
                 __size_of_isdigit 000E                           __ptext10 111B  
                         __ptext11 11A3                           __ptext20 170A  
                         __ptext12 1479                           __ptext21 0800  
                         __ptext13 1FC2                           __ptext30 1078  
                         __ptext22 1FE0                           __ptext14 1EC8  
                         __ptext31 1EC0                           __ptext23 1F2F  
                         __ptext15 15A9                           __ptext40 1F11  
                         __ptext32 130B                           __ptext24 1500  
                         __ptext16 10E0                           __ptext41 1F42  
                         __ptext33 1EB8                           __ptext25 12A7  
                         __ptext17 1247                           __ptext42 1EF5  
                         __ptext34 102A                           __ptext26 13F7  
                         __ptext18 1FA6                           __ptext35 1F72  
                         __ptext27 10A9                           __ptext19 1656  
                         __ptext36 0005                           __ptext28 1F20  
                         __ptext37 1F8B                           __ptext29 1EE8  
                         __ptext38 1007                           __ptext39 1378  
                         __powers_ 184F            __size_of_LCD_Set_Cursor 007F  
                 __size_of_sprintf 070A           __size_of_InitCustomChars 0026  
              LCD_Write_Int@F13684 0067                  ??_PWM6_Initialize 0070  
                    __size_of_main 02FE               __CFG_WDTCWS$WDTCWS_7 0000  
       ??_ADCC_GetSingleConversion 0073        PIN_MANAGER_Initialize@state 0070  
                         log@coeff 1876                        ??_eval_poly 007E  
                         isdigit@c 0071                           scale@scl 0040  
               LCD_Write_Char@temp 0072                          sprintf@ap 00A3  
                 __tdiv_to_l_@exp1 0025                   __tdiv_to_l_@cntr 0024  
                        sprintf@sp 00B5                   __tdiv_to_l_@quot 0020  
                 ___lldiv@dividend 0074            ?_PIN_MANAGER_Initialize 0070  
                __CFG_CLKOUTEN$OFF 0000                        _PPSLOCKbits 0E8F  
          __size_of_LCD_Write_Char 0023                   main@startupTimer 00D8  
               LCD_Set_Cursor@temp 0079                       ?__tdiv_to_l_ 0070  
                         sprintf@c 00B8                           sprintf@f 005C  
                 ___lldiv@quotient 0079                       ___aldiv@sign 0021  
      PWM6_LoadDutyValue@dutyValue 0070     __end_of_PIN_MANAGER_Initialize 10A9  
                ??_ADCC_Initialize 0070                  ??_InitCustomChars 0075  
