

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Jul 24 16:11:19 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F18855
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	stringtext1,global,class=STRCODE,delta=2
     7                           	psect	stringtext2,global,class=STRCODE,delta=2
     8                           	psect	stringtext3,global,class=STRCODE,delta=2
     9                           	psect	stringtext4,global,class=STRCODE,delta=2
    10                           	psect	stringtext5,global,class=STRCODE,delta=2
    11                           	psect	cinit,global,class=CODE,merge=1,delta=2
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    17                           	psect	clrtext,global,class=CODE,delta=2
    18                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    24                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    25                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    26                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    27                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    28                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    29                           	psect	text8,local,class=CODE,merge=1,delta=2
    30                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    31                           	psect	text10,local,class=CODE,merge=1,delta=2
    32                           	psect	text11,local,class=CODE,merge=1,delta=2
    33                           	psect	text12,local,class=CODE,merge=1,delta=2
    34                           	psect	text13,local,class=CODE,merge=1,delta=2
    35                           	psect	text14,local,class=CODE,merge=1,delta=2
    36                           	psect	text15,local,class=CODE,merge=1,delta=2
    37                           	psect	text16,local,class=CODE,merge=1,delta=2
    38                           	psect	text17,local,class=CODE,merge=1,delta=2,group=2
    39                           	psect	text18,local,class=CODE,merge=1,delta=2
    40                           	psect	text19,local,class=CODE,merge=1,delta=2
    41                           	psect	text20,local,class=CODE,merge=1,delta=2
    42                           	psect	text21,local,class=CODE,merge=1,delta=2
    43                           	psect	text22,local,class=CODE,merge=1,delta=2
    44                           	psect	text23,local,class=CODE,merge=1,delta=2
    45                           	psect	text24,local,class=CODE,merge=1,delta=2
    46                           	psect	text25,local,class=CODE,merge=1,delta=2
    47                           	psect	text26,local,class=CODE,merge=1,delta=2
    48                           	psect	text27,local,class=CODE,merge=1,delta=2
    49                           	psect	text28,local,class=CODE,merge=1,delta=2
    50                           	psect	text29,local,class=CODE,merge=1,delta=2
    51                           	psect	text30,local,class=CODE,merge=1,delta=2
    52                           	psect	text31,local,class=CODE,merge=1,delta=2
    53                           	psect	text32,local,class=CODE,merge=1,delta=2
    54                           	psect	text33,local,class=CODE,merge=1,delta=2
    55                           	psect	text34,local,class=CODE,merge=1,delta=2,group=2
    56                           	psect	text35,local,class=CODE,merge=1,delta=2,group=2
    57                           	psect	text36,local,class=CODE,merge=1,delta=2
    58                           	psect	text37,local,class=CODE,merge=1,delta=2,group=2
    59                           	psect	text38,local,class=CODE,merge=1,delta=2
    60                           	psect	text39,local,class=CODE,merge=1,delta=2
    61                           	psect	text40,local,class=CODE,merge=1,delta=2,group=2
    62                           	psect	text41,local,class=CODE,merge=1,delta=2,group=2
    63                           	psect	text42,local,class=CODE,merge=1,delta=2,group=2
    64                           	psect	text43,local,class=CODE,merge=1,delta=2,group=2
    65                           	dabs	1,0x620,48
    66                           	dabs	1,0x5A0,80
    67                           	dabs	1,0x520,80
    68                           	dabs	1,0x4A0,80
    69                           	dabs	1,0x420,80
    70                           	dabs	1,0x3D0,32
    71                           	dabs	1,0x2260,0,_samples
    72                           	dabs	1,0x7E,2
    73  0000                     
    74                           ; Version 1.45
    75                           ; Generated 16/11/2017 GMT
    76                           ; 
    77                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    78                           ; All rights reserved.
    79                           ; 
    80                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    81                           ; 
    82                           ; Redistribution and use in source and binary forms, with or without modification, are
    83                           ; permitted provided that the following conditions are met:
    84                           ; 
    85                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    86                           ;        conditions and the following disclaimer.
    87                           ; 
    88                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    89                           ;        of conditions and the following disclaimer in the documentation and/or other
    90                           ;        materials provided with the distribution.
    91                           ; 
    92                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    93                           ;        software without specific prior written permission.
    94                           ; 
    95                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    96                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    97                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    98                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    99                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   100                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   101                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   102                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   103                           ; 
   104                           ; 
   105                           ; Code-generator required, PIC16F18855 Definitions
   106                           ; 
   107                           ; SFR Addresses
   108  0000                     	;# 
   109  0001                     	;# 
   110  0002                     	;# 
   111  0003                     	;# 
   112  0004                     	;# 
   113  0005                     	;# 
   114  0006                     	;# 
   115  0007                     	;# 
   116  0008                     	;# 
   117  0009                     	;# 
   118  000A                     	;# 
   119  000B                     	;# 
   120  000C                     	;# 
   121  000D                     	;# 
   122  000E                     	;# 
   123  0010                     	;# 
   124  0011                     	;# 
   125  0012                     	;# 
   126  0013                     	;# 
   127  0016                     	;# 
   128  0017                     	;# 
   129  0018                     	;# 
   130  001C                     	;# 
   131  001C                     	;# 
   132  001D                     	;# 
   133  001D                     	;# 
   134  001E                     	;# 
   135  001F                     	;# 
   136  008C                     	;# 
   137  008C                     	;# 
   138  008D                     	;# 
   139  008E                     	;# 
   140  008E                     	;# 
   141  008F                     	;# 
   142  0090                     	;# 
   143  0090                     	;# 
   144  0091                     	;# 
   145  0093                     	;# 
   146  0094                     	;# 
   147  0095                     	;# 
   148  0096                     	;# 
   149  0097                     	;# 
   150  0098                     	;# 
   151  0099                     	;# 
   152  009A                     	;# 
   153  009B                     	;# 
   154  009C                     	;# 
   155  009D                     	;# 
   156  009E                     	;# 
   157  010C                     	;# 
   158  010D                     	;# 
   159  010E                     	;# 
   160  010E                     	;# 
   161  010F                     	;# 
   162  0110                     	;# 
   163  0110                     	;# 
   164  0111                     	;# 
   165  0112                     	;# 
   166  0112                     	;# 
   167  0113                     	;# 
   168  0114                     	;# 
   169  0114                     	;# 
   170  0115                     	;# 
   171  0116                     	;# 
   172  0116                     	;# 
   173  0117                     	;# 
   174  0119                     	;# 
   175  0119                     	;# 
   176  0119                     	;# 
   177  011A                     	;# 
   178  011A                     	;# 
   179  011A                     	;# 
   180  011B                     	;# 
   181  011B                     	;# 
   182  011B                     	;# 
   183  011B                     	;# 
   184  011B                     	;# 
   185  011C                     	;# 
   186  011C                     	;# 
   187  011C                     	;# 
   188  011D                     	;# 
   189  011D                     	;# 
   190  011D                     	;# 
   191  011E                     	;# 
   192  011E                     	;# 
   193  011E                     	;# 
   194  011F                     	;# 
   195  011F                     	;# 
   196  011F                     	;# 
   197  011F                     	;# 
   198  011F                     	;# 
   199  018C                     	;# 
   200  018D                     	;# 
   201  018E                     	;# 
   202  018F                     	;# 
   203  0190                     	;# 
   204  0191                     	;# 
   205  0192                     	;# 
   206  0196                     	;# 
   207  0197                     	;# 
   208  0198                     	;# 
   209  0199                     	;# 
   210  019A                     	;# 
   211  019B                     	;# 
   212  019C                     	;# 
   213  020C                     	;# 
   214  020C                     	;# 
   215  020D                     	;# 
   216  020E                     	;# 
   217  020F                     	;# 
   218  020F                     	;# 
   219  0210                     	;# 
   220  0210                     	;# 
   221  0211                     	;# 
   222  0211                     	;# 
   223  0212                     	;# 
   224  0212                     	;# 
   225  0213                     	;# 
   226  0214                     	;# 
   227  0215                     	;# 
   228  0215                     	;# 
   229  0216                     	;# 
   230  0216                     	;# 
   231  0217                     	;# 
   232  0217                     	;# 
   233  0218                     	;# 
   234  0218                     	;# 
   235  0219                     	;# 
   236  021A                     	;# 
   237  021B                     	;# 
   238  021B                     	;# 
   239  021C                     	;# 
   240  021C                     	;# 
   241  021D                     	;# 
   242  021D                     	;# 
   243  021E                     	;# 
   244  021F                     	;# 
   245  028C                     	;# 
   246  028C                     	;# 
   247  028D                     	;# 
   248  028D                     	;# 
   249  028E                     	;# 
   250  028F                     	;# 
   251  0290                     	;# 
   252  0290                     	;# 
   253  0291                     	;# 
   254  0292                     	;# 
   255  0292                     	;# 
   256  0293                     	;# 
   257  0293                     	;# 
   258  0294                     	;# 
   259  0295                     	;# 
   260  0296                     	;# 
   261  0296                     	;# 
   262  0297                     	;# 
   263  0298                     	;# 
   264  0298                     	;# 
   265  0299                     	;# 
   266  0299                     	;# 
   267  029A                     	;# 
   268  029B                     	;# 
   269  029C                     	;# 
   270  029C                     	;# 
   271  029D                     	;# 
   272  030C                     	;# 
   273  030C                     	;# 
   274  030D                     	;# 
   275  030E                     	;# 
   276  030F                     	;# 
   277  0310                     	;# 
   278  0310                     	;# 
   279  0311                     	;# 
   280  0312                     	;# 
   281  0313                     	;# 
   282  0314                     	;# 
   283  0314                     	;# 
   284  0315                     	;# 
   285  0316                     	;# 
   286  0317                     	;# 
   287  0318                     	;# 
   288  0318                     	;# 
   289  0319                     	;# 
   290  031A                     	;# 
   291  031B                     	;# 
   292  031C                     	;# 
   293  031C                     	;# 
   294  031D                     	;# 
   295  031E                     	;# 
   296  031F                     	;# 
   297  038C                     	;# 
   298  038D                     	;# 
   299  038E                     	;# 
   300  0390                     	;# 
   301  0391                     	;# 
   302  0392                     	;# 
   303  040C                     	;# 
   304  040D                     	;# 
   305  040E                     	;# 
   306  040F                     	;# 
   307  0410                     	;# 
   308  0411                     	;# 
   309  0416                     	;# 
   310  0416                     	;# 
   311  0417                     	;# 
   312  0418                     	;# 
   313  0418                     	;# 
   314  0419                     	;# 
   315  041A                     	;# 
   316  041A                     	;# 
   317  041B                     	;# 
   318  041C                     	;# 
   319  041C                     	;# 
   320  041D                     	;# 
   321  041E                     	;# 
   322  041F                     	;# 
   323  048C                     	;# 
   324  048C                     	;# 
   325  048D                     	;# 
   326  048E                     	;# 
   327  048F                     	;# 
   328  048F                     	;# 
   329  0490                     	;# 
   330  0491                     	;# 
   331  0492                     	;# 
   332  0492                     	;# 
   333  0493                     	;# 
   334  0494                     	;# 
   335  0495                     	;# 
   336  0495                     	;# 
   337  0496                     	;# 
   338  0497                     	;# 
   339  0498                     	;# 
   340  0499                     	;# 
   341  049A                     	;# 
   342  049B                     	;# 
   343  049C                     	;# 
   344  049D                     	;# 
   345  050C                     	;# 
   346  050C                     	;# 
   347  050D                     	;# 
   348  050E                     	;# 
   349  050F                     	;# 
   350  050F                     	;# 
   351  0510                     	;# 
   352  0511                     	;# 
   353  0512                     	;# 
   354  0512                     	;# 
   355  0513                     	;# 
   356  0514                     	;# 
   357  0515                     	;# 
   358  0515                     	;# 
   359  0516                     	;# 
   360  0517                     	;# 
   361  0518                     	;# 
   362  0519                     	;# 
   363  051A                     	;# 
   364  051B                     	;# 
   365  051C                     	;# 
   366  051D                     	;# 
   367  058C                     	;# 
   368  058C                     	;# 
   369  058D                     	;# 
   370  058E                     	;# 
   371  058F                     	;# 
   372  058F                     	;# 
   373  0590                     	;# 
   374  0591                     	;# 
   375  0592                     	;# 
   376  0593                     	;# 
   377  060C                     	;# 
   378  060D                     	;# 
   379  060E                     	;# 
   380  060F                     	;# 
   381  0610                     	;# 
   382  0611                     	;# 
   383  0612                     	;# 
   384  0613                     	;# 
   385  0614                     	;# 
   386  0616                     	;# 
   387  0617                     	;# 
   388  0618                     	;# 
   389  0619                     	;# 
   390  061A                     	;# 
   391  061B                     	;# 
   392  061C                     	;# 
   393  061D                     	;# 
   394  061E                     	;# 
   395  068C                     	;# 
   396  068D                     	;# 
   397  068E                     	;# 
   398  068F                     	;# 
   399  0690                     	;# 
   400  0691                     	;# 
   401  0692                     	;# 
   402  0693                     	;# 
   403  0694                     	;# 
   404  070C                     	;# 
   405  070D                     	;# 
   406  070E                     	;# 
   407  070F                     	;# 
   408  0710                     	;# 
   409  0711                     	;# 
   410  0712                     	;# 
   411  0713                     	;# 
   412  0714                     	;# 
   413  0716                     	;# 
   414  0717                     	;# 
   415  0718                     	;# 
   416  0719                     	;# 
   417  071A                     	;# 
   418  071B                     	;# 
   419  071C                     	;# 
   420  071D                     	;# 
   421  071E                     	;# 
   422  0796                     	;# 
   423  0797                     	;# 
   424  0798                     	;# 
   425  0799                     	;# 
   426  079A                     	;# 
   427  079B                     	;# 
   428  080C                     	;# 
   429  080D                     	;# 
   430  080E                     	;# 
   431  080F                     	;# 
   432  0810                     	;# 
   433  0811                     	;# 
   434  0812                     	;# 
   435  0813                     	;# 
   436  0814                     	;# 
   437  081A                     	;# 
   438  081B                     	;# 
   439  081C                     	;# 
   440  081D                     	;# 
   441  081E                     	;# 
   442  081F                     	;# 
   443  088C                     	;# 
   444  088D                     	;# 
   445  088E                     	;# 
   446  088F                     	;# 
   447  0890                     	;# 
   448  0891                     	;# 
   449  0892                     	;# 
   450  0893                     	;# 
   451  0895                     	;# 
   452  0896                     	;# 
   453  0897                     	;# 
   454  0898                     	;# 
   455  0899                     	;# 
   456  089A                     	;# 
   457  089B                     	;# 
   458  090C                     	;# 
   459  090E                     	;# 
   460  090F                     	;# 
   461  091F                     	;# 
   462  091F                     	;# 
   463  098F                     	;# 
   464  098F                     	;# 
   465  0990                     	;# 
   466  0991                     	;# 
   467  0992                     	;# 
   468  0993                     	;# 
   469  0994                     	;# 
   470  0995                     	;# 
   471  0996                     	;# 
   472  0997                     	;# 
   473  0E0F                     	;# 
   474  0E10                     	;# 
   475  0E11                     	;# 
   476  0E12                     	;# 
   477  0E13                     	;# 
   478  0E14                     	;# 
   479  0E15                     	;# 
   480  0E16                     	;# 
   481  0E17                     	;# 
   482  0E18                     	;# 
   483  0E19                     	;# 
   484  0E1A                     	;# 
   485  0E1B                     	;# 
   486  0E1C                     	;# 
   487  0E1D                     	;# 
   488  0E1E                     	;# 
   489  0E1F                     	;# 
   490  0E20                     	;# 
   491  0E21                     	;# 
   492  0E22                     	;# 
   493  0E23                     	;# 
   494  0E24                     	;# 
   495  0E25                     	;# 
   496  0E26                     	;# 
   497  0E27                     	;# 
   498  0E28                     	;# 
   499  0E29                     	;# 
   500  0E2A                     	;# 
   501  0E2B                     	;# 
   502  0E2C                     	;# 
   503  0E2D                     	;# 
   504  0E2E                     	;# 
   505  0E2F                     	;# 
   506  0E30                     	;# 
   507  0E31                     	;# 
   508  0E32                     	;# 
   509  0E33                     	;# 
   510  0E34                     	;# 
   511  0E35                     	;# 
   512  0E36                     	;# 
   513  0E37                     	;# 
   514  0E8F                     	;# 
   515  0E90                     	;# 
   516  0E91                     	;# 
   517  0E92                     	;# 
   518  0E93                     	;# 
   519  0E94                     	;# 
   520  0E95                     	;# 
   521  0E96                     	;# 
   522  0E97                     	;# 
   523  0E9C                     	;# 
   524  0E9D                     	;# 
   525  0E9E                     	;# 
   526  0EA1                     	;# 
   527  0EA2                     	;# 
   528  0EA3                     	;# 
   529  0EA4                     	;# 
   530  0EA5                     	;# 
   531  0EA9                     	;# 
   532  0EAA                     	;# 
   533  0EAB                     	;# 
   534  0EAC                     	;# 
   535  0EB1                     	;# 
   536  0EB2                     	;# 
   537  0EB3                     	;# 
   538  0EB8                     	;# 
   539  0EB9                     	;# 
   540  0EBA                     	;# 
   541  0EBB                     	;# 
   542  0EBC                     	;# 
   543  0EBD                     	;# 
   544  0EBE                     	;# 
   545  0EC3                     	;# 
   546  0EC5                     	;# 
   547  0EC6                     	;# 
   548  0EC7                     	;# 
   549  0EC8                     	;# 
   550  0EC9                     	;# 
   551  0ECA                     	;# 
   552  0ECB                     	;# 
   553  0ECC                     	;# 
   554  0F10                     	;# 
   555  0F11                     	;# 
   556  0F12                     	;# 
   557  0F13                     	;# 
   558  0F14                     	;# 
   559  0F15                     	;# 
   560  0F16                     	;# 
   561  0F17                     	;# 
   562  0F18                     	;# 
   563  0F19                     	;# 
   564  0F1A                     	;# 
   565  0F1B                     	;# 
   566  0F1C                     	;# 
   567  0F1D                     	;# 
   568  0F1E                     	;# 
   569  0F1F                     	;# 
   570  0F20                     	;# 
   571  0F21                     	;# 
   572  0F22                     	;# 
   573  0F23                     	;# 
   574  0F24                     	;# 
   575  0F25                     	;# 
   576  0F26                     	;# 
   577  0F27                     	;# 
   578  0F38                     	;# 
   579  0F39                     	;# 
   580  0F3A                     	;# 
   581  0F3B                     	;# 
   582  0F3C                     	;# 
   583  0F3D                     	;# 
   584  0F3E                     	;# 
   585  0F3F                     	;# 
   586  0F40                     	;# 
   587  0F41                     	;# 
   588  0F43                     	;# 
   589  0F44                     	;# 
   590  0F45                     	;# 
   591  0F46                     	;# 
   592  0F47                     	;# 
   593  0F48                     	;# 
   594  0F49                     	;# 
   595  0F4A                     	;# 
   596  0F4B                     	;# 
   597  0F4C                     	;# 
   598  0F4E                     	;# 
   599  0F4F                     	;# 
   600  0F50                     	;# 
   601  0F51                     	;# 
   602  0F52                     	;# 
   603  0F53                     	;# 
   604  0F54                     	;# 
   605  0F55                     	;# 
   606  0F56                     	;# 
   607  0F57                     	;# 
   608  0F65                     	;# 
   609  0F68                     	;# 
   610  0F69                     	;# 
   611  0F6A                     	;# 
   612  0F6B                     	;# 
   613  0FE4                     	;# 
   614  0FE5                     	;# 
   615  0FE6                     	;# 
   616  0FE7                     	;# 
   617  0FE8                     	;# 
   618  0FE9                     	;# 
   619  0FEA                     	;# 
   620  0FEB                     	;# 
   621  0FED                     	;# 
   622  0FEE                     	;# 
   623  0FEF                     	;# 
   624  0000                     	;# 
   625  0001                     	;# 
   626  0002                     	;# 
   627  0003                     	;# 
   628  0004                     	;# 
   629  0005                     	;# 
   630  0006                     	;# 
   631  0007                     	;# 
   632  0008                     	;# 
   633  0009                     	;# 
   634  000A                     	;# 
   635  000B                     	;# 
   636  000C                     	;# 
   637  000D                     	;# 
   638  000E                     	;# 
   639  0010                     	;# 
   640  0011                     	;# 
   641  0012                     	;# 
   642  0013                     	;# 
   643  0016                     	;# 
   644  0017                     	;# 
   645  0018                     	;# 
   646  001C                     	;# 
   647  001C                     	;# 
   648  001D                     	;# 
   649  001D                     	;# 
   650  001E                     	;# 
   651  001F                     	;# 
   652  008C                     	;# 
   653  008C                     	;# 
   654  008D                     	;# 
   655  008E                     	;# 
   656  008E                     	;# 
   657  008F                     	;# 
   658  0090                     	;# 
   659  0090                     	;# 
   660  0091                     	;# 
   661  0093                     	;# 
   662  0094                     	;# 
   663  0095                     	;# 
   664  0096                     	;# 
   665  0097                     	;# 
   666  0098                     	;# 
   667  0099                     	;# 
   668  009A                     	;# 
   669  009B                     	;# 
   670  009C                     	;# 
   671  009D                     	;# 
   672  009E                     	;# 
   673  010C                     	;# 
   674  010D                     	;# 
   675  010E                     	;# 
   676  010E                     	;# 
   677  010F                     	;# 
   678  0110                     	;# 
   679  0110                     	;# 
   680  0111                     	;# 
   681  0112                     	;# 
   682  0112                     	;# 
   683  0113                     	;# 
   684  0114                     	;# 
   685  0114                     	;# 
   686  0115                     	;# 
   687  0116                     	;# 
   688  0116                     	;# 
   689  0117                     	;# 
   690  0119                     	;# 
   691  0119                     	;# 
   692  0119                     	;# 
   693  011A                     	;# 
   694  011A                     	;# 
   695  011A                     	;# 
   696  011B                     	;# 
   697  011B                     	;# 
   698  011B                     	;# 
   699  011B                     	;# 
   700  011B                     	;# 
   701  011C                     	;# 
   702  011C                     	;# 
   703  011C                     	;# 
   704  011D                     	;# 
   705  011D                     	;# 
   706  011D                     	;# 
   707  011E                     	;# 
   708  011E                     	;# 
   709  011E                     	;# 
   710  011F                     	;# 
   711  011F                     	;# 
   712  011F                     	;# 
   713  011F                     	;# 
   714  011F                     	;# 
   715  018C                     	;# 
   716  018D                     	;# 
   717  018E                     	;# 
   718  018F                     	;# 
   719  0190                     	;# 
   720  0191                     	;# 
   721  0192                     	;# 
   722  0196                     	;# 
   723  0197                     	;# 
   724  0198                     	;# 
   725  0199                     	;# 
   726  019A                     	;# 
   727  019B                     	;# 
   728  019C                     	;# 
   729  020C                     	;# 
   730  020C                     	;# 
   731  020D                     	;# 
   732  020E                     	;# 
   733  020F                     	;# 
   734  020F                     	;# 
   735  0210                     	;# 
   736  0210                     	;# 
   737  0211                     	;# 
   738  0211                     	;# 
   739  0212                     	;# 
   740  0212                     	;# 
   741  0213                     	;# 
   742  0214                     	;# 
   743  0215                     	;# 
   744  0215                     	;# 
   745  0216                     	;# 
   746  0216                     	;# 
   747  0217                     	;# 
   748  0217                     	;# 
   749  0218                     	;# 
   750  0218                     	;# 
   751  0219                     	;# 
   752  021A                     	;# 
   753  021B                     	;# 
   754  021B                     	;# 
   755  021C                     	;# 
   756  021C                     	;# 
   757  021D                     	;# 
   758  021D                     	;# 
   759  021E                     	;# 
   760  021F                     	;# 
   761  028C                     	;# 
   762  028C                     	;# 
   763  028D                     	;# 
   764  028D                     	;# 
   765  028E                     	;# 
   766  028F                     	;# 
   767  0290                     	;# 
   768  0290                     	;# 
   769  0291                     	;# 
   770  0292                     	;# 
   771  0292                     	;# 
   772  0293                     	;# 
   773  0293                     	;# 
   774  0294                     	;# 
   775  0295                     	;# 
   776  0296                     	;# 
   777  0296                     	;# 
   778  0297                     	;# 
   779  0298                     	;# 
   780  0298                     	;# 
   781  0299                     	;# 
   782  0299                     	;# 
   783  029A                     	;# 
   784  029B                     	;# 
   785  029C                     	;# 
   786  029C                     	;# 
   787  029D                     	;# 
   788  030C                     	;# 
   789  030C                     	;# 
   790  030D                     	;# 
   791  030E                     	;# 
   792  030F                     	;# 
   793  0310                     	;# 
   794  0310                     	;# 
   795  0311                     	;# 
   796  0312                     	;# 
   797  0313                     	;# 
   798  0314                     	;# 
   799  0314                     	;# 
   800  0315                     	;# 
   801  0316                     	;# 
   802  0317                     	;# 
   803  0318                     	;# 
   804  0318                     	;# 
   805  0319                     	;# 
   806  031A                     	;# 
   807  031B                     	;# 
   808  031C                     	;# 
   809  031C                     	;# 
   810  031D                     	;# 
   811  031E                     	;# 
   812  031F                     	;# 
   813  038C                     	;# 
   814  038D                     	;# 
   815  038E                     	;# 
   816  0390                     	;# 
   817  0391                     	;# 
   818  0392                     	;# 
   819  040C                     	;# 
   820  040D                     	;# 
   821  040E                     	;# 
   822  040F                     	;# 
   823  0410                     	;# 
   824  0411                     	;# 
   825  0416                     	;# 
   826  0416                     	;# 
   827  0417                     	;# 
   828  0418                     	;# 
   829  0418                     	;# 
   830  0419                     	;# 
   831  041A                     	;# 
   832  041A                     	;# 
   833  041B                     	;# 
   834  041C                     	;# 
   835  041C                     	;# 
   836  041D                     	;# 
   837  041E                     	;# 
   838  041F                     	;# 
   839  048C                     	;# 
   840  048C                     	;# 
   841  048D                     	;# 
   842  048E                     	;# 
   843  048F                     	;# 
   844  048F                     	;# 
   845  0490                     	;# 
   846  0491                     	;# 
   847  0492                     	;# 
   848  0492                     	;# 
   849  0493                     	;# 
   850  0494                     	;# 
   851  0495                     	;# 
   852  0495                     	;# 
   853  0496                     	;# 
   854  0497                     	;# 
   855  0498                     	;# 
   856  0499                     	;# 
   857  049A                     	;# 
   858  049B                     	;# 
   859  049C                     	;# 
   860  049D                     	;# 
   861  050C                     	;# 
   862  050C                     	;# 
   863  050D                     	;# 
   864  050E                     	;# 
   865  050F                     	;# 
   866  050F                     	;# 
   867  0510                     	;# 
   868  0511                     	;# 
   869  0512                     	;# 
   870  0512                     	;# 
   871  0513                     	;# 
   872  0514                     	;# 
   873  0515                     	;# 
   874  0515                     	;# 
   875  0516                     	;# 
   876  0517                     	;# 
   877  0518                     	;# 
   878  0519                     	;# 
   879  051A                     	;# 
   880  051B                     	;# 
   881  051C                     	;# 
   882  051D                     	;# 
   883  058C                     	;# 
   884  058C                     	;# 
   885  058D                     	;# 
   886  058E                     	;# 
   887  058F                     	;# 
   888  058F                     	;# 
   889  0590                     	;# 
   890  0591                     	;# 
   891  0592                     	;# 
   892  0593                     	;# 
   893  060C                     	;# 
   894  060D                     	;# 
   895  060E                     	;# 
   896  060F                     	;# 
   897  0610                     	;# 
   898  0611                     	;# 
   899  0612                     	;# 
   900  0613                     	;# 
   901  0614                     	;# 
   902  0616                     	;# 
   903  0617                     	;# 
   904  0618                     	;# 
   905  0619                     	;# 
   906  061A                     	;# 
   907  061B                     	;# 
   908  061C                     	;# 
   909  061D                     	;# 
   910  061E                     	;# 
   911  068C                     	;# 
   912  068D                     	;# 
   913  068E                     	;# 
   914  068F                     	;# 
   915  0690                     	;# 
   916  0691                     	;# 
   917  0692                     	;# 
   918  0693                     	;# 
   919  0694                     	;# 
   920  070C                     	;# 
   921  070D                     	;# 
   922  070E                     	;# 
   923  070F                     	;# 
   924  0710                     	;# 
   925  0711                     	;# 
   926  0712                     	;# 
   927  0713                     	;# 
   928  0714                     	;# 
   929  0716                     	;# 
   930  0717                     	;# 
   931  0718                     	;# 
   932  0719                     	;# 
   933  071A                     	;# 
   934  071B                     	;# 
   935  071C                     	;# 
   936  071D                     	;# 
   937  071E                     	;# 
   938  0796                     	;# 
   939  0797                     	;# 
   940  0798                     	;# 
   941  0799                     	;# 
   942  079A                     	;# 
   943  079B                     	;# 
   944  080C                     	;# 
   945  080D                     	;# 
   946  080E                     	;# 
   947  080F                     	;# 
   948  0810                     	;# 
   949  0811                     	;# 
   950  0812                     	;# 
   951  0813                     	;# 
   952  0814                     	;# 
   953  081A                     	;# 
   954  081B                     	;# 
   955  081C                     	;# 
   956  081D                     	;# 
   957  081E                     	;# 
   958  081F                     	;# 
   959  088C                     	;# 
   960  088D                     	;# 
   961  088E                     	;# 
   962  088F                     	;# 
   963  0890                     	;# 
   964  0891                     	;# 
   965  0892                     	;# 
   966  0893                     	;# 
   967  0895                     	;# 
   968  0896                     	;# 
   969  0897                     	;# 
   970  0898                     	;# 
   971  0899                     	;# 
   972  089A                     	;# 
   973  089B                     	;# 
   974  090C                     	;# 
   975  090E                     	;# 
   976  090F                     	;# 
   977  091F                     	;# 
   978  091F                     	;# 
   979  098F                     	;# 
   980  098F                     	;# 
   981  0990                     	;# 
   982  0991                     	;# 
   983  0992                     	;# 
   984  0993                     	;# 
   985  0994                     	;# 
   986  0995                     	;# 
   987  0996                     	;# 
   988  0997                     	;# 
   989  0E0F                     	;# 
   990  0E10                     	;# 
   991  0E11                     	;# 
   992  0E12                     	;# 
   993  0E13                     	;# 
   994  0E14                     	;# 
   995  0E15                     	;# 
   996  0E16                     	;# 
   997  0E17                     	;# 
   998  0E18                     	;# 
   999  0E19                     	;# 
  1000  0E1A                     	;# 
  1001  0E1B                     	;# 
  1002  0E1C                     	;# 
  1003  0E1D                     	;# 
  1004  0E1E                     	;# 
  1005  0E1F                     	;# 
  1006  0E20                     	;# 
  1007  0E21                     	;# 
  1008  0E22                     	;# 
  1009  0E23                     	;# 
  1010  0E24                     	;# 
  1011  0E25                     	;# 
  1012  0E26                     	;# 
  1013  0E27                     	;# 
  1014  0E28                     	;# 
  1015  0E29                     	;# 
  1016  0E2A                     	;# 
  1017  0E2B                     	;# 
  1018  0E2C                     	;# 
  1019  0E2D                     	;# 
  1020  0E2E                     	;# 
  1021  0E2F                     	;# 
  1022  0E30                     	;# 
  1023  0E31                     	;# 
  1024  0E32                     	;# 
  1025  0E33                     	;# 
  1026  0E34                     	;# 
  1027  0E35                     	;# 
  1028  0E36                     	;# 
  1029  0E37                     	;# 
  1030  0E8F                     	;# 
  1031  0E90                     	;# 
  1032  0E91                     	;# 
  1033  0E92                     	;# 
  1034  0E93                     	;# 
  1035  0E94                     	;# 
  1036  0E95                     	;# 
  1037  0E96                     	;# 
  1038  0E97                     	;# 
  1039  0E9C                     	;# 
  1040  0E9D                     	;# 
  1041  0E9E                     	;# 
  1042  0EA1                     	;# 
  1043  0EA2                     	;# 
  1044  0EA3                     	;# 
  1045  0EA4                     	;# 
  1046  0EA5                     	;# 
  1047  0EA9                     	;# 
  1048  0EAA                     	;# 
  1049  0EAB                     	;# 
  1050  0EAC                     	;# 
  1051  0EB1                     	;# 
  1052  0EB2                     	;# 
  1053  0EB3                     	;# 
  1054  0EB8                     	;# 
  1055  0EB9                     	;# 
  1056  0EBA                     	;# 
  1057  0EBB                     	;# 
  1058  0EBC                     	;# 
  1059  0EBD                     	;# 
  1060  0EBE                     	;# 
  1061  0EC3                     	;# 
  1062  0EC5                     	;# 
  1063  0EC6                     	;# 
  1064  0EC7                     	;# 
  1065  0EC8                     	;# 
  1066  0EC9                     	;# 
  1067  0ECA                     	;# 
  1068  0ECB                     	;# 
  1069  0ECC                     	;# 
  1070  0F10                     	;# 
  1071  0F11                     	;# 
  1072  0F12                     	;# 
  1073  0F13                     	;# 
  1074  0F14                     	;# 
  1075  0F15                     	;# 
  1076  0F16                     	;# 
  1077  0F17                     	;# 
  1078  0F18                     	;# 
  1079  0F19                     	;# 
  1080  0F1A                     	;# 
  1081  0F1B                     	;# 
  1082  0F1C                     	;# 
  1083  0F1D                     	;# 
  1084  0F1E                     	;# 
  1085  0F1F                     	;# 
  1086  0F20                     	;# 
  1087  0F21                     	;# 
  1088  0F22                     	;# 
  1089  0F23                     	;# 
  1090  0F24                     	;# 
  1091  0F25                     	;# 
  1092  0F26                     	;# 
  1093  0F27                     	;# 
  1094  0F38                     	;# 
  1095  0F39                     	;# 
  1096  0F3A                     	;# 
  1097  0F3B                     	;# 
  1098  0F3C                     	;# 
  1099  0F3D                     	;# 
  1100  0F3E                     	;# 
  1101  0F3F                     	;# 
  1102  0F40                     	;# 
  1103  0F41                     	;# 
  1104  0F43                     	;# 
  1105  0F44                     	;# 
  1106  0F45                     	;# 
  1107  0F46                     	;# 
  1108  0F47                     	;# 
  1109  0F48                     	;# 
  1110  0F49                     	;# 
  1111  0F4A                     	;# 
  1112  0F4B                     	;# 
  1113  0F4C                     	;# 
  1114  0F4E                     	;# 
  1115  0F4F                     	;# 
  1116  0F50                     	;# 
  1117  0F51                     	;# 
  1118  0F52                     	;# 
  1119  0F53                     	;# 
  1120  0F54                     	;# 
  1121  0F55                     	;# 
  1122  0F56                     	;# 
  1123  0F57                     	;# 
  1124  0F65                     	;# 
  1125  0F68                     	;# 
  1126  0F69                     	;# 
  1127  0F6A                     	;# 
  1128  0F6B                     	;# 
  1129  0FE4                     	;# 
  1130  0FE5                     	;# 
  1131  0FE6                     	;# 
  1132  0FE7                     	;# 
  1133  0FE8                     	;# 
  1134  0FE9                     	;# 
  1135  0FEA                     	;# 
  1136  0FEB                     	;# 
  1137  0FED                     	;# 
  1138  0FEE                     	;# 
  1139  0FEF                     	;# 
  1140  0000                     	;# 
  1141  0001                     	;# 
  1142  0002                     	;# 
  1143  0003                     	;# 
  1144  0004                     	;# 
  1145  0005                     	;# 
  1146  0006                     	;# 
  1147  0007                     	;# 
  1148  0008                     	;# 
  1149  0009                     	;# 
  1150  000A                     	;# 
  1151  000B                     	;# 
  1152  000C                     	;# 
  1153  000D                     	;# 
  1154  000E                     	;# 
  1155  0010                     	;# 
  1156  0011                     	;# 
  1157  0012                     	;# 
  1158  0013                     	;# 
  1159  0016                     	;# 
  1160  0017                     	;# 
  1161  0018                     	;# 
  1162  001C                     	;# 
  1163  001C                     	;# 
  1164  001D                     	;# 
  1165  001D                     	;# 
  1166  001E                     	;# 
  1167  001F                     	;# 
  1168  008C                     	;# 
  1169  008C                     	;# 
  1170  008D                     	;# 
  1171  008E                     	;# 
  1172  008E                     	;# 
  1173  008F                     	;# 
  1174  0090                     	;# 
  1175  0090                     	;# 
  1176  0091                     	;# 
  1177  0093                     	;# 
  1178  0094                     	;# 
  1179  0095                     	;# 
  1180  0096                     	;# 
  1181  0097                     	;# 
  1182  0098                     	;# 
  1183  0099                     	;# 
  1184  009A                     	;# 
  1185  009B                     	;# 
  1186  009C                     	;# 
  1187  009D                     	;# 
  1188  009E                     	;# 
  1189  010C                     	;# 
  1190  010D                     	;# 
  1191  010E                     	;# 
  1192  010E                     	;# 
  1193  010F                     	;# 
  1194  0110                     	;# 
  1195  0110                     	;# 
  1196  0111                     	;# 
  1197  0112                     	;# 
  1198  0112                     	;# 
  1199  0113                     	;# 
  1200  0114                     	;# 
  1201  0114                     	;# 
  1202  0115                     	;# 
  1203  0116                     	;# 
  1204  0116                     	;# 
  1205  0117                     	;# 
  1206  0119                     	;# 
  1207  0119                     	;# 
  1208  0119                     	;# 
  1209  011A                     	;# 
  1210  011A                     	;# 
  1211  011A                     	;# 
  1212  011B                     	;# 
  1213  011B                     	;# 
  1214  011B                     	;# 
  1215  011B                     	;# 
  1216  011B                     	;# 
  1217  011C                     	;# 
  1218  011C                     	;# 
  1219  011C                     	;# 
  1220  011D                     	;# 
  1221  011D                     	;# 
  1222  011D                     	;# 
  1223  011E                     	;# 
  1224  011E                     	;# 
  1225  011E                     	;# 
  1226  011F                     	;# 
  1227  011F                     	;# 
  1228  011F                     	;# 
  1229  011F                     	;# 
  1230  011F                     	;# 
  1231  018C                     	;# 
  1232  018D                     	;# 
  1233  018E                     	;# 
  1234  018F                     	;# 
  1235  0190                     	;# 
  1236  0191                     	;# 
  1237  0192                     	;# 
  1238  0196                     	;# 
  1239  0197                     	;# 
  1240  0198                     	;# 
  1241  0199                     	;# 
  1242  019A                     	;# 
  1243  019B                     	;# 
  1244  019C                     	;# 
  1245  020C                     	;# 
  1246  020C                     	;# 
  1247  020D                     	;# 
  1248  020E                     	;# 
  1249  020F                     	;# 
  1250  020F                     	;# 
  1251  0210                     	;# 
  1252  0210                     	;# 
  1253  0211                     	;# 
  1254  0211                     	;# 
  1255  0212                     	;# 
  1256  0212                     	;# 
  1257  0213                     	;# 
  1258  0214                     	;# 
  1259  0215                     	;# 
  1260  0215                     	;# 
  1261  0216                     	;# 
  1262  0216                     	;# 
  1263  0217                     	;# 
  1264  0217                     	;# 
  1265  0218                     	;# 
  1266  0218                     	;# 
  1267  0219                     	;# 
  1268  021A                     	;# 
  1269  021B                     	;# 
  1270  021B                     	;# 
  1271  021C                     	;# 
  1272  021C                     	;# 
  1273  021D                     	;# 
  1274  021D                     	;# 
  1275  021E                     	;# 
  1276  021F                     	;# 
  1277  028C                     	;# 
  1278  028C                     	;# 
  1279  028D                     	;# 
  1280  028D                     	;# 
  1281  028E                     	;# 
  1282  028F                     	;# 
  1283  0290                     	;# 
  1284  0290                     	;# 
  1285  0291                     	;# 
  1286  0292                     	;# 
  1287  0292                     	;# 
  1288  0293                     	;# 
  1289  0293                     	;# 
  1290  0294                     	;# 
  1291  0295                     	;# 
  1292  0296                     	;# 
  1293  0296                     	;# 
  1294  0297                     	;# 
  1295  0298                     	;# 
  1296  0298                     	;# 
  1297  0299                     	;# 
  1298  0299                     	;# 
  1299  029A                     	;# 
  1300  029B                     	;# 
  1301  029C                     	;# 
  1302  029C                     	;# 
  1303  029D                     	;# 
  1304  030C                     	;# 
  1305  030C                     	;# 
  1306  030D                     	;# 
  1307  030E                     	;# 
  1308  030F                     	;# 
  1309  0310                     	;# 
  1310  0310                     	;# 
  1311  0311                     	;# 
  1312  0312                     	;# 
  1313  0313                     	;# 
  1314  0314                     	;# 
  1315  0314                     	;# 
  1316  0315                     	;# 
  1317  0316                     	;# 
  1318  0317                     	;# 
  1319  0318                     	;# 
  1320  0318                     	;# 
  1321  0319                     	;# 
  1322  031A                     	;# 
  1323  031B                     	;# 
  1324  031C                     	;# 
  1325  031C                     	;# 
  1326  031D                     	;# 
  1327  031E                     	;# 
  1328  031F                     	;# 
  1329  038C                     	;# 
  1330  038D                     	;# 
  1331  038E                     	;# 
  1332  0390                     	;# 
  1333  0391                     	;# 
  1334  0392                     	;# 
  1335  040C                     	;# 
  1336  040D                     	;# 
  1337  040E                     	;# 
  1338  040F                     	;# 
  1339  0410                     	;# 
  1340  0411                     	;# 
  1341  0416                     	;# 
  1342  0416                     	;# 
  1343  0417                     	;# 
  1344  0418                     	;# 
  1345  0418                     	;# 
  1346  0419                     	;# 
  1347  041A                     	;# 
  1348  041A                     	;# 
  1349  041B                     	;# 
  1350  041C                     	;# 
  1351  041C                     	;# 
  1352  041D                     	;# 
  1353  041E                     	;# 
  1354  041F                     	;# 
  1355  048C                     	;# 
  1356  048C                     	;# 
  1357  048D                     	;# 
  1358  048E                     	;# 
  1359  048F                     	;# 
  1360  048F                     	;# 
  1361  0490                     	;# 
  1362  0491                     	;# 
  1363  0492                     	;# 
  1364  0492                     	;# 
  1365  0493                     	;# 
  1366  0494                     	;# 
  1367  0495                     	;# 
  1368  0495                     	;# 
  1369  0496                     	;# 
  1370  0497                     	;# 
  1371  0498                     	;# 
  1372  0499                     	;# 
  1373  049A                     	;# 
  1374  049B                     	;# 
  1375  049C                     	;# 
  1376  049D                     	;# 
  1377  050C                     	;# 
  1378  050C                     	;# 
  1379  050D                     	;# 
  1380  050E                     	;# 
  1381  050F                     	;# 
  1382  050F                     	;# 
  1383  0510                     	;# 
  1384  0511                     	;# 
  1385  0512                     	;# 
  1386  0512                     	;# 
  1387  0513                     	;# 
  1388  0514                     	;# 
  1389  0515                     	;# 
  1390  0515                     	;# 
  1391  0516                     	;# 
  1392  0517                     	;# 
  1393  0518                     	;# 
  1394  0519                     	;# 
  1395  051A                     	;# 
  1396  051B                     	;# 
  1397  051C                     	;# 
  1398  051D                     	;# 
  1399  058C                     	;# 
  1400  058C                     	;# 
  1401  058D                     	;# 
  1402  058E                     	;# 
  1403  058F                     	;# 
  1404  058F                     	;# 
  1405  0590                     	;# 
  1406  0591                     	;# 
  1407  0592                     	;# 
  1408  0593                     	;# 
  1409  060C                     	;# 
  1410  060D                     	;# 
  1411  060E                     	;# 
  1412  060F                     	;# 
  1413  0610                     	;# 
  1414  0611                     	;# 
  1415  0612                     	;# 
  1416  0613                     	;# 
  1417  0614                     	;# 
  1418  0616                     	;# 
  1419  0617                     	;# 
  1420  0618                     	;# 
  1421  0619                     	;# 
  1422  061A                     	;# 
  1423  061B                     	;# 
  1424  061C                     	;# 
  1425  061D                     	;# 
  1426  061E                     	;# 
  1427  068C                     	;# 
  1428  068D                     	;# 
  1429  068E                     	;# 
  1430  068F                     	;# 
  1431  0690                     	;# 
  1432  0691                     	;# 
  1433  0692                     	;# 
  1434  0693                     	;# 
  1435  0694                     	;# 
  1436  070C                     	;# 
  1437  070D                     	;# 
  1438  070E                     	;# 
  1439  070F                     	;# 
  1440  0710                     	;# 
  1441  0711                     	;# 
  1442  0712                     	;# 
  1443  0713                     	;# 
  1444  0714                     	;# 
  1445  0716                     	;# 
  1446  0717                     	;# 
  1447  0718                     	;# 
  1448  0719                     	;# 
  1449  071A                     	;# 
  1450  071B                     	;# 
  1451  071C                     	;# 
  1452  071D                     	;# 
  1453  071E                     	;# 
  1454  0796                     	;# 
  1455  0797                     	;# 
  1456  0798                     	;# 
  1457  0799                     	;# 
  1458  079A                     	;# 
  1459  079B                     	;# 
  1460  080C                     	;# 
  1461  080D                     	;# 
  1462  080E                     	;# 
  1463  080F                     	;# 
  1464  0810                     	;# 
  1465  0811                     	;# 
  1466  0812                     	;# 
  1467  0813                     	;# 
  1468  0814                     	;# 
  1469  081A                     	;# 
  1470  081B                     	;# 
  1471  081C                     	;# 
  1472  081D                     	;# 
  1473  081E                     	;# 
  1474  081F                     	;# 
  1475  088C                     	;# 
  1476  088D                     	;# 
  1477  088E                     	;# 
  1478  088F                     	;# 
  1479  0890                     	;# 
  1480  0891                     	;# 
  1481  0892                     	;# 
  1482  0893                     	;# 
  1483  0895                     	;# 
  1484  0896                     	;# 
  1485  0897                     	;# 
  1486  0898                     	;# 
  1487  0899                     	;# 
  1488  089A                     	;# 
  1489  089B                     	;# 
  1490  090C                     	;# 
  1491  090E                     	;# 
  1492  090F                     	;# 
  1493  091F                     	;# 
  1494  091F                     	;# 
  1495  098F                     	;# 
  1496  098F                     	;# 
  1497  0990                     	;# 
  1498  0991                     	;# 
  1499  0992                     	;# 
  1500  0993                     	;# 
  1501  0994                     	;# 
  1502  0995                     	;# 
  1503  0996                     	;# 
  1504  0997                     	;# 
  1505  0E0F                     	;# 
  1506  0E10                     	;# 
  1507  0E11                     	;# 
  1508  0E12                     	;# 
  1509  0E13                     	;# 
  1510  0E14                     	;# 
  1511  0E15                     	;# 
  1512  0E16                     	;# 
  1513  0E17                     	;# 
  1514  0E18                     	;# 
  1515  0E19                     	;# 
  1516  0E1A                     	;# 
  1517  0E1B                     	;# 
  1518  0E1C                     	;# 
  1519  0E1D                     	;# 
  1520  0E1E                     	;# 
  1521  0E1F                     	;# 
  1522  0E20                     	;# 
  1523  0E21                     	;# 
  1524  0E22                     	;# 
  1525  0E23                     	;# 
  1526  0E24                     	;# 
  1527  0E25                     	;# 
  1528  0E26                     	;# 
  1529  0E27                     	;# 
  1530  0E28                     	;# 
  1531  0E29                     	;# 
  1532  0E2A                     	;# 
  1533  0E2B                     	;# 
  1534  0E2C                     	;# 
  1535  0E2D                     	;# 
  1536  0E2E                     	;# 
  1537  0E2F                     	;# 
  1538  0E30                     	;# 
  1539  0E31                     	;# 
  1540  0E32                     	;# 
  1541  0E33                     	;# 
  1542  0E34                     	;# 
  1543  0E35                     	;# 
  1544  0E36                     	;# 
  1545  0E37                     	;# 
  1546  0E8F                     	;# 
  1547  0E90                     	;# 
  1548  0E91                     	;# 
  1549  0E92                     	;# 
  1550  0E93                     	;# 
  1551  0E94                     	;# 
  1552  0E95                     	;# 
  1553  0E96                     	;# 
  1554  0E97                     	;# 
  1555  0E9C                     	;# 
  1556  0E9D                     	;# 
  1557  0E9E                     	;# 
  1558  0EA1                     	;# 
  1559  0EA2                     	;# 
  1560  0EA3                     	;# 
  1561  0EA4                     	;# 
  1562  0EA5                     	;# 
  1563  0EA9                     	;# 
  1564  0EAA                     	;# 
  1565  0EAB                     	;# 
  1566  0EAC                     	;# 
  1567  0EB1                     	;# 
  1568  0EB2                     	;# 
  1569  0EB3                     	;# 
  1570  0EB8                     	;# 
  1571  0EB9                     	;# 
  1572  0EBA                     	;# 
  1573  0EBB                     	;# 
  1574  0EBC                     	;# 
  1575  0EBD                     	;# 
  1576  0EBE                     	;# 
  1577  0EC3                     	;# 
  1578  0EC5                     	;# 
  1579  0EC6                     	;# 
  1580  0EC7                     	;# 
  1581  0EC8                     	;# 
  1582  0EC9                     	;# 
  1583  0ECA                     	;# 
  1584  0ECB                     	;# 
  1585  0ECC                     	;# 
  1586  0F10                     	;# 
  1587  0F11                     	;# 
  1588  0F12                     	;# 
  1589  0F13                     	;# 
  1590  0F14                     	;# 
  1591  0F15                     	;# 
  1592  0F16                     	;# 
  1593  0F17                     	;# 
  1594  0F18                     	;# 
  1595  0F19                     	;# 
  1596  0F1A                     	;# 
  1597  0F1B                     	;# 
  1598  0F1C                     	;# 
  1599  0F1D                     	;# 
  1600  0F1E                     	;# 
  1601  0F1F                     	;# 
  1602  0F20                     	;# 
  1603  0F21                     	;# 
  1604  0F22                     	;# 
  1605  0F23                     	;# 
  1606  0F24                     	;# 
  1607  0F25                     	;# 
  1608  0F26                     	;# 
  1609  0F27                     	;# 
  1610  0F38                     	;# 
  1611  0F39                     	;# 
  1612  0F3A                     	;# 
  1613  0F3B                     	;# 
  1614  0F3C                     	;# 
  1615  0F3D                     	;# 
  1616  0F3E                     	;# 
  1617  0F3F                     	;# 
  1618  0F40                     	;# 
  1619  0F41                     	;# 
  1620  0F43                     	;# 
  1621  0F44                     	;# 
  1622  0F45                     	;# 
  1623  0F46                     	;# 
  1624  0F47                     	;# 
  1625  0F48                     	;# 
  1626  0F49                     	;# 
  1627  0F4A                     	;# 
  1628  0F4B                     	;# 
  1629  0F4C                     	;# 
  1630  0F4E                     	;# 
  1631  0F4F                     	;# 
  1632  0F50                     	;# 
  1633  0F51                     	;# 
  1634  0F52                     	;# 
  1635  0F53                     	;# 
  1636  0F54                     	;# 
  1637  0F55                     	;# 
  1638  0F56                     	;# 
  1639  0F57                     	;# 
  1640  0F65                     	;# 
  1641  0F68                     	;# 
  1642  0F69                     	;# 
  1643  0F6A                     	;# 
  1644  0F6B                     	;# 
  1645  0FE4                     	;# 
  1646  0FE5                     	;# 
  1647  0FE6                     	;# 
  1648  0FE7                     	;# 
  1649  0FE8                     	;# 
  1650  0FE9                     	;# 
  1651  0FEA                     	;# 
  1652  0FEB                     	;# 
  1653  0FED                     	;# 
  1654  0FEE                     	;# 
  1655  0FEF                     	;# 
  1656  0000                     	;# 
  1657  0001                     	;# 
  1658  0002                     	;# 
  1659  0003                     	;# 
  1660  0004                     	;# 
  1661  0005                     	;# 
  1662  0006                     	;# 
  1663  0007                     	;# 
  1664  0008                     	;# 
  1665  0009                     	;# 
  1666  000A                     	;# 
  1667  000B                     	;# 
  1668  000C                     	;# 
  1669  000D                     	;# 
  1670  000E                     	;# 
  1671  0010                     	;# 
  1672  0011                     	;# 
  1673  0012                     	;# 
  1674  0013                     	;# 
  1675  0016                     	;# 
  1676  0017                     	;# 
  1677  0018                     	;# 
  1678  001C                     	;# 
  1679  001C                     	;# 
  1680  001D                     	;# 
  1681  001D                     	;# 
  1682  001E                     	;# 
  1683  001F                     	;# 
  1684  008C                     	;# 
  1685  008C                     	;# 
  1686  008D                     	;# 
  1687  008E                     	;# 
  1688  008E                     	;# 
  1689  008F                     	;# 
  1690  0090                     	;# 
  1691  0090                     	;# 
  1692  0091                     	;# 
  1693  0093                     	;# 
  1694  0094                     	;# 
  1695  0095                     	;# 
  1696  0096                     	;# 
  1697  0097                     	;# 
  1698  0098                     	;# 
  1699  0099                     	;# 
  1700  009A                     	;# 
  1701  009B                     	;# 
  1702  009C                     	;# 
  1703  009D                     	;# 
  1704  009E                     	;# 
  1705  010C                     	;# 
  1706  010D                     	;# 
  1707  010E                     	;# 
  1708  010E                     	;# 
  1709  010F                     	;# 
  1710  0110                     	;# 
  1711  0110                     	;# 
  1712  0111                     	;# 
  1713  0112                     	;# 
  1714  0112                     	;# 
  1715  0113                     	;# 
  1716  0114                     	;# 
  1717  0114                     	;# 
  1718  0115                     	;# 
  1719  0116                     	;# 
  1720  0116                     	;# 
  1721  0117                     	;# 
  1722  0119                     	;# 
  1723  0119                     	;# 
  1724  0119                     	;# 
  1725  011A                     	;# 
  1726  011A                     	;# 
  1727  011A                     	;# 
  1728  011B                     	;# 
  1729  011B                     	;# 
  1730  011B                     	;# 
  1731  011B                     	;# 
  1732  011B                     	;# 
  1733  011C                     	;# 
  1734  011C                     	;# 
  1735  011C                     	;# 
  1736  011D                     	;# 
  1737  011D                     	;# 
  1738  011D                     	;# 
  1739  011E                     	;# 
  1740  011E                     	;# 
  1741  011E                     	;# 
  1742  011F                     	;# 
  1743  011F                     	;# 
  1744  011F                     	;# 
  1745  011F                     	;# 
  1746  011F                     	;# 
  1747  018C                     	;# 
  1748  018D                     	;# 
  1749  018E                     	;# 
  1750  018F                     	;# 
  1751  0190                     	;# 
  1752  0191                     	;# 
  1753  0192                     	;# 
  1754  0196                     	;# 
  1755  0197                     	;# 
  1756  0198                     	;# 
  1757  0199                     	;# 
  1758  019A                     	;# 
  1759  019B                     	;# 
  1760  019C                     	;# 
  1761  020C                     	;# 
  1762  020C                     	;# 
  1763  020D                     	;# 
  1764  020E                     	;# 
  1765  020F                     	;# 
  1766  020F                     	;# 
  1767  0210                     	;# 
  1768  0210                     	;# 
  1769  0211                     	;# 
  1770  0211                     	;# 
  1771  0212                     	;# 
  1772  0212                     	;# 
  1773  0213                     	;# 
  1774  0214                     	;# 
  1775  0215                     	;# 
  1776  0215                     	;# 
  1777  0216                     	;# 
  1778  0216                     	;# 
  1779  0217                     	;# 
  1780  0217                     	;# 
  1781  0218                     	;# 
  1782  0218                     	;# 
  1783  0219                     	;# 
  1784  021A                     	;# 
  1785  021B                     	;# 
  1786  021B                     	;# 
  1787  021C                     	;# 
  1788  021C                     	;# 
  1789  021D                     	;# 
  1790  021D                     	;# 
  1791  021E                     	;# 
  1792  021F                     	;# 
  1793  028C                     	;# 
  1794  028C                     	;# 
  1795  028D                     	;# 
  1796  028D                     	;# 
  1797  028E                     	;# 
  1798  028F                     	;# 
  1799  0290                     	;# 
  1800  0290                     	;# 
  1801  0291                     	;# 
  1802  0292                     	;# 
  1803  0292                     	;# 
  1804  0293                     	;# 
  1805  0293                     	;# 
  1806  0294                     	;# 
  1807  0295                     	;# 
  1808  0296                     	;# 
  1809  0296                     	;# 
  1810  0297                     	;# 
  1811  0298                     	;# 
  1812  0298                     	;# 
  1813  0299                     	;# 
  1814  0299                     	;# 
  1815  029A                     	;# 
  1816  029B                     	;# 
  1817  029C                     	;# 
  1818  029C                     	;# 
  1819  029D                     	;# 
  1820  030C                     	;# 
  1821  030C                     	;# 
  1822  030D                     	;# 
  1823  030E                     	;# 
  1824  030F                     	;# 
  1825  0310                     	;# 
  1826  0310                     	;# 
  1827  0311                     	;# 
  1828  0312                     	;# 
  1829  0313                     	;# 
  1830  0314                     	;# 
  1831  0314                     	;# 
  1832  0315                     	;# 
  1833  0316                     	;# 
  1834  0317                     	;# 
  1835  0318                     	;# 
  1836  0318                     	;# 
  1837  0319                     	;# 
  1838  031A                     	;# 
  1839  031B                     	;# 
  1840  031C                     	;# 
  1841  031C                     	;# 
  1842  031D                     	;# 
  1843  031E                     	;# 
  1844  031F                     	;# 
  1845  038C                     	;# 
  1846  038D                     	;# 
  1847  038E                     	;# 
  1848  0390                     	;# 
  1849  0391                     	;# 
  1850  0392                     	;# 
  1851  040C                     	;# 
  1852  040D                     	;# 
  1853  040E                     	;# 
  1854  040F                     	;# 
  1855  0410                     	;# 
  1856  0411                     	;# 
  1857  0416                     	;# 
  1858  0416                     	;# 
  1859  0417                     	;# 
  1860  0418                     	;# 
  1861  0418                     	;# 
  1862  0419                     	;# 
  1863  041A                     	;# 
  1864  041A                     	;# 
  1865  041B                     	;# 
  1866  041C                     	;# 
  1867  041C                     	;# 
  1868  041D                     	;# 
  1869  041E                     	;# 
  1870  041F                     	;# 
  1871  048C                     	;# 
  1872  048C                     	;# 
  1873  048D                     	;# 
  1874  048E                     	;# 
  1875  048F                     	;# 
  1876  048F                     	;# 
  1877  0490                     	;# 
  1878  0491                     	;# 
  1879  0492                     	;# 
  1880  0492                     	;# 
  1881  0493                     	;# 
  1882  0494                     	;# 
  1883  0495                     	;# 
  1884  0495                     	;# 
  1885  0496                     	;# 
  1886  0497                     	;# 
  1887  0498                     	;# 
  1888  0499                     	;# 
  1889  049A                     	;# 
  1890  049B                     	;# 
  1891  049C                     	;# 
  1892  049D                     	;# 
  1893  050C                     	;# 
  1894  050C                     	;# 
  1895  050D                     	;# 
  1896  050E                     	;# 
  1897  050F                     	;# 
  1898  050F                     	;# 
  1899  0510                     	;# 
  1900  0511                     	;# 
  1901  0512                     	;# 
  1902  0512                     	;# 
  1903  0513                     	;# 
  1904  0514                     	;# 
  1905  0515                     	;# 
  1906  0515                     	;# 
  1907  0516                     	;# 
  1908  0517                     	;# 
  1909  0518                     	;# 
  1910  0519                     	;# 
  1911  051A                     	;# 
  1912  051B                     	;# 
  1913  051C                     	;# 
  1914  051D                     	;# 
  1915  058C                     	;# 
  1916  058C                     	;# 
  1917  058D                     	;# 
  1918  058E                     	;# 
  1919  058F                     	;# 
  1920  058F                     	;# 
  1921  0590                     	;# 
  1922  0591                     	;# 
  1923  0592                     	;# 
  1924  0593                     	;# 
  1925  060C                     	;# 
  1926  060D                     	;# 
  1927  060E                     	;# 
  1928  060F                     	;# 
  1929  0610                     	;# 
  1930  0611                     	;# 
  1931  0612                     	;# 
  1932  0613                     	;# 
  1933  0614                     	;# 
  1934  0616                     	;# 
  1935  0617                     	;# 
  1936  0618                     	;# 
  1937  0619                     	;# 
  1938  061A                     	;# 
  1939  061B                     	;# 
  1940  061C                     	;# 
  1941  061D                     	;# 
  1942  061E                     	;# 
  1943  068C                     	;# 
  1944  068D                     	;# 
  1945  068E                     	;# 
  1946  068F                     	;# 
  1947  0690                     	;# 
  1948  0691                     	;# 
  1949  0692                     	;# 
  1950  0693                     	;# 
  1951  0694                     	;# 
  1952  070C                     	;# 
  1953  070D                     	;# 
  1954  070E                     	;# 
  1955  070F                     	;# 
  1956  0710                     	;# 
  1957  0711                     	;# 
  1958  0712                     	;# 
  1959  0713                     	;# 
  1960  0714                     	;# 
  1961  0716                     	;# 
  1962  0717                     	;# 
  1963  0718                     	;# 
  1964  0719                     	;# 
  1965  071A                     	;# 
  1966  071B                     	;# 
  1967  071C                     	;# 
  1968  071D                     	;# 
  1969  071E                     	;# 
  1970  0796                     	;# 
  1971  0797                     	;# 
  1972  0798                     	;# 
  1973  0799                     	;# 
  1974  079A                     	;# 
  1975  079B                     	;# 
  1976  080C                     	;# 
  1977  080D                     	;# 
  1978  080E                     	;# 
  1979  080F                     	;# 
  1980  0810                     	;# 
  1981  0811                     	;# 
  1982  0812                     	;# 
  1983  0813                     	;# 
  1984  0814                     	;# 
  1985  081A                     	;# 
  1986  081B                     	;# 
  1987  081C                     	;# 
  1988  081D                     	;# 
  1989  081E                     	;# 
  1990  081F                     	;# 
  1991  088C                     	;# 
  1992  088D                     	;# 
  1993  088E                     	;# 
  1994  088F                     	;# 
  1995  0890                     	;# 
  1996  0891                     	;# 
  1997  0892                     	;# 
  1998  0893                     	;# 
  1999  0895                     	;# 
  2000  0896                     	;# 
  2001  0897                     	;# 
  2002  0898                     	;# 
  2003  0899                     	;# 
  2004  089A                     	;# 
  2005  089B                     	;# 
  2006  090C                     	;# 
  2007  090E                     	;# 
  2008  090F                     	;# 
  2009  091F                     	;# 
  2010  091F                     	;# 
  2011  098F                     	;# 
  2012  098F                     	;# 
  2013  0990                     	;# 
  2014  0991                     	;# 
  2015  0992                     	;# 
  2016  0993                     	;# 
  2017  0994                     	;# 
  2018  0995                     	;# 
  2019  0996                     	;# 
  2020  0997                     	;# 
  2021  0E0F                     	;# 
  2022  0E10                     	;# 
  2023  0E11                     	;# 
  2024  0E12                     	;# 
  2025  0E13                     	;# 
  2026  0E14                     	;# 
  2027  0E15                     	;# 
  2028  0E16                     	;# 
  2029  0E17                     	;# 
  2030  0E18                     	;# 
  2031  0E19                     	;# 
  2032  0E1A                     	;# 
  2033  0E1B                     	;# 
  2034  0E1C                     	;# 
  2035  0E1D                     	;# 
  2036  0E1E                     	;# 
  2037  0E1F                     	;# 
  2038  0E20                     	;# 
  2039  0E21                     	;# 
  2040  0E22                     	;# 
  2041  0E23                     	;# 
  2042  0E24                     	;# 
  2043  0E25                     	;# 
  2044  0E26                     	;# 
  2045  0E27                     	;# 
  2046  0E28                     	;# 
  2047  0E29                     	;# 
  2048  0E2A                     	;# 
  2049  0E2B                     	;# 
  2050  0E2C                     	;# 
  2051  0E2D                     	;# 
  2052  0E2E                     	;# 
  2053  0E2F                     	;# 
  2054  0E30                     	;# 
  2055  0E31                     	;# 
  2056  0E32                     	;# 
  2057  0E33                     	;# 
  2058  0E34                     	;# 
  2059  0E35                     	;# 
  2060  0E36                     	;# 
  2061  0E37                     	;# 
  2062  0E8F                     	;# 
  2063  0E90                     	;# 
  2064  0E91                     	;# 
  2065  0E92                     	;# 
  2066  0E93                     	;# 
  2067  0E94                     	;# 
  2068  0E95                     	;# 
  2069  0E96                     	;# 
  2070  0E97                     	;# 
  2071  0E9C                     	;# 
  2072  0E9D                     	;# 
  2073  0E9E                     	;# 
  2074  0EA1                     	;# 
  2075  0EA2                     	;# 
  2076  0EA3                     	;# 
  2077  0EA4                     	;# 
  2078  0EA5                     	;# 
  2079  0EA9                     	;# 
  2080  0EAA                     	;# 
  2081  0EAB                     	;# 
  2082  0EAC                     	;# 
  2083  0EB1                     	;# 
  2084  0EB2                     	;# 
  2085  0EB3                     	;# 
  2086  0EB8                     	;# 
  2087  0EB9                     	;# 
  2088  0EBA                     	;# 
  2089  0EBB                     	;# 
  2090  0EBC                     	;# 
  2091  0EBD                     	;# 
  2092  0EBE                     	;# 
  2093  0EC3                     	;# 
  2094  0EC5                     	;# 
  2095  0EC6                     	;# 
  2096  0EC7                     	;# 
  2097  0EC8                     	;# 
  2098  0EC9                     	;# 
  2099  0ECA                     	;# 
  2100  0ECB                     	;# 
  2101  0ECC                     	;# 
  2102  0F10                     	;# 
  2103  0F11                     	;# 
  2104  0F12                     	;# 
  2105  0F13                     	;# 
  2106  0F14                     	;# 
  2107  0F15                     	;# 
  2108  0F16                     	;# 
  2109  0F17                     	;# 
  2110  0F18                     	;# 
  2111  0F19                     	;# 
  2112  0F1A                     	;# 
  2113  0F1B                     	;# 
  2114  0F1C                     	;# 
  2115  0F1D                     	;# 
  2116  0F1E                     	;# 
  2117  0F1F                     	;# 
  2118  0F20                     	;# 
  2119  0F21                     	;# 
  2120  0F22                     	;# 
  2121  0F23                     	;# 
  2122  0F24                     	;# 
  2123  0F25                     	;# 
  2124  0F26                     	;# 
  2125  0F27                     	;# 
  2126  0F38                     	;# 
  2127  0F39                     	;# 
  2128  0F3A                     	;# 
  2129  0F3B                     	;# 
  2130  0F3C                     	;# 
  2131  0F3D                     	;# 
  2132  0F3E                     	;# 
  2133  0F3F                     	;# 
  2134  0F40                     	;# 
  2135  0F41                     	;# 
  2136  0F43                     	;# 
  2137  0F44                     	;# 
  2138  0F45                     	;# 
  2139  0F46                     	;# 
  2140  0F47                     	;# 
  2141  0F48                     	;# 
  2142  0F49                     	;# 
  2143  0F4A                     	;# 
  2144  0F4B                     	;# 
  2145  0F4C                     	;# 
  2146  0F4E                     	;# 
  2147  0F4F                     	;# 
  2148  0F50                     	;# 
  2149  0F51                     	;# 
  2150  0F52                     	;# 
  2151  0F53                     	;# 
  2152  0F54                     	;# 
  2153  0F55                     	;# 
  2154  0F56                     	;# 
  2155  0F57                     	;# 
  2156  0F65                     	;# 
  2157  0F68                     	;# 
  2158  0F69                     	;# 
  2159  0F6A                     	;# 
  2160  0F6B                     	;# 
  2161  0FE4                     	;# 
  2162  0FE5                     	;# 
  2163  0FE6                     	;# 
  2164  0FE7                     	;# 
  2165  0FE8                     	;# 
  2166  0FE9                     	;# 
  2167  0FEA                     	;# 
  2168  0FEB                     	;# 
  2169  0FED                     	;# 
  2170  0FEE                     	;# 
  2171  0FEF                     	;# 
  2172  0000                     	;# 
  2173  0001                     	;# 
  2174  0002                     	;# 
  2175  0003                     	;# 
  2176  0004                     	;# 
  2177  0005                     	;# 
  2178  0006                     	;# 
  2179  0007                     	;# 
  2180  0008                     	;# 
  2181  0009                     	;# 
  2182  000A                     	;# 
  2183  000B                     	;# 
  2184  000C                     	;# 
  2185  000D                     	;# 
  2186  000E                     	;# 
  2187  0010                     	;# 
  2188  0011                     	;# 
  2189  0012                     	;# 
  2190  0013                     	;# 
  2191  0016                     	;# 
  2192  0017                     	;# 
  2193  0018                     	;# 
  2194  001C                     	;# 
  2195  001C                     	;# 
  2196  001D                     	;# 
  2197  001D                     	;# 
  2198  001E                     	;# 
  2199  001F                     	;# 
  2200  008C                     	;# 
  2201  008C                     	;# 
  2202  008D                     	;# 
  2203  008E                     	;# 
  2204  008E                     	;# 
  2205  008F                     	;# 
  2206  0090                     	;# 
  2207  0090                     	;# 
  2208  0091                     	;# 
  2209  0093                     	;# 
  2210  0094                     	;# 
  2211  0095                     	;# 
  2212  0096                     	;# 
  2213  0097                     	;# 
  2214  0098                     	;# 
  2215  0099                     	;# 
  2216  009A                     	;# 
  2217  009B                     	;# 
  2218  009C                     	;# 
  2219  009D                     	;# 
  2220  009E                     	;# 
  2221  010C                     	;# 
  2222  010D                     	;# 
  2223  010E                     	;# 
  2224  010E                     	;# 
  2225  010F                     	;# 
  2226  0110                     	;# 
  2227  0110                     	;# 
  2228  0111                     	;# 
  2229  0112                     	;# 
  2230  0112                     	;# 
  2231  0113                     	;# 
  2232  0114                     	;# 
  2233  0114                     	;# 
  2234  0115                     	;# 
  2235  0116                     	;# 
  2236  0116                     	;# 
  2237  0117                     	;# 
  2238  0119                     	;# 
  2239  0119                     	;# 
  2240  0119                     	;# 
  2241  011A                     	;# 
  2242  011A                     	;# 
  2243  011A                     	;# 
  2244  011B                     	;# 
  2245  011B                     	;# 
  2246  011B                     	;# 
  2247  011B                     	;# 
  2248  011B                     	;# 
  2249  011C                     	;# 
  2250  011C                     	;# 
  2251  011C                     	;# 
  2252  011D                     	;# 
  2253  011D                     	;# 
  2254  011D                     	;# 
  2255  011E                     	;# 
  2256  011E                     	;# 
  2257  011E                     	;# 
  2258  011F                     	;# 
  2259  011F                     	;# 
  2260  011F                     	;# 
  2261  011F                     	;# 
  2262  011F                     	;# 
  2263  018C                     	;# 
  2264  018D                     	;# 
  2265  018E                     	;# 
  2266  018F                     	;# 
  2267  0190                     	;# 
  2268  0191                     	;# 
  2269  0192                     	;# 
  2270  0196                     	;# 
  2271  0197                     	;# 
  2272  0198                     	;# 
  2273  0199                     	;# 
  2274  019A                     	;# 
  2275  019B                     	;# 
  2276  019C                     	;# 
  2277  020C                     	;# 
  2278  020C                     	;# 
  2279  020D                     	;# 
  2280  020E                     	;# 
  2281  020F                     	;# 
  2282  020F                     	;# 
  2283  0210                     	;# 
  2284  0210                     	;# 
  2285  0211                     	;# 
  2286  0211                     	;# 
  2287  0212                     	;# 
  2288  0212                     	;# 
  2289  0213                     	;# 
  2290  0214                     	;# 
  2291  0215                     	;# 
  2292  0215                     	;# 
  2293  0216                     	;# 
  2294  0216                     	;# 
  2295  0217                     	;# 
  2296  0217                     	;# 
  2297  0218                     	;# 
  2298  0218                     	;# 
  2299  0219                     	;# 
  2300  021A                     	;# 
  2301  021B                     	;# 
  2302  021B                     	;# 
  2303  021C                     	;# 
  2304  021C                     	;# 
  2305  021D                     	;# 
  2306  021D                     	;# 
  2307  021E                     	;# 
  2308  021F                     	;# 
  2309  028C                     	;# 
  2310  028C                     	;# 
  2311  028D                     	;# 
  2312  028D                     	;# 
  2313  028E                     	;# 
  2314  028F                     	;# 
  2315  0290                     	;# 
  2316  0290                     	;# 
  2317  0291                     	;# 
  2318  0292                     	;# 
  2319  0292                     	;# 
  2320  0293                     	;# 
  2321  0293                     	;# 
  2322  0294                     	;# 
  2323  0295                     	;# 
  2324  0296                     	;# 
  2325  0296                     	;# 
  2326  0297                     	;# 
  2327  0298                     	;# 
  2328  0298                     	;# 
  2329  0299                     	;# 
  2330  0299                     	;# 
  2331  029A                     	;# 
  2332  029B                     	;# 
  2333  029C                     	;# 
  2334  029C                     	;# 
  2335  029D                     	;# 
  2336  030C                     	;# 
  2337  030C                     	;# 
  2338  030D                     	;# 
  2339  030E                     	;# 
  2340  030F                     	;# 
  2341  0310                     	;# 
  2342  0310                     	;# 
  2343  0311                     	;# 
  2344  0312                     	;# 
  2345  0313                     	;# 
  2346  0314                     	;# 
  2347  0314                     	;# 
  2348  0315                     	;# 
  2349  0316                     	;# 
  2350  0317                     	;# 
  2351  0318                     	;# 
  2352  0318                     	;# 
  2353  0319                     	;# 
  2354  031A                     	;# 
  2355  031B                     	;# 
  2356  031C                     	;# 
  2357  031C                     	;# 
  2358  031D                     	;# 
  2359  031E                     	;# 
  2360  031F                     	;# 
  2361  038C                     	;# 
  2362  038D                     	;# 
  2363  038E                     	;# 
  2364  0390                     	;# 
  2365  0391                     	;# 
  2366  0392                     	;# 
  2367  040C                     	;# 
  2368  040D                     	;# 
  2369  040E                     	;# 
  2370  040F                     	;# 
  2371  0410                     	;# 
  2372  0411                     	;# 
  2373  0416                     	;# 
  2374  0416                     	;# 
  2375  0417                     	;# 
  2376  0418                     	;# 
  2377  0418                     	;# 
  2378  0419                     	;# 
  2379  041A                     	;# 
  2380  041A                     	;# 
  2381  041B                     	;# 
  2382  041C                     	;# 
  2383  041C                     	;# 
  2384  041D                     	;# 
  2385  041E                     	;# 
  2386  041F                     	;# 
  2387  048C                     	;# 
  2388  048C                     	;# 
  2389  048D                     	;# 
  2390  048E                     	;# 
  2391  048F                     	;# 
  2392  048F                     	;# 
  2393  0490                     	;# 
  2394  0491                     	;# 
  2395  0492                     	;# 
  2396  0492                     	;# 
  2397  0493                     	;# 
  2398  0494                     	;# 
  2399  0495                     	;# 
  2400  0495                     	;# 
  2401  0496                     	;# 
  2402  0497                     	;# 
  2403  0498                     	;# 
  2404  0499                     	;# 
  2405  049A                     	;# 
  2406  049B                     	;# 
  2407  049C                     	;# 
  2408  049D                     	;# 
  2409  050C                     	;# 
  2410  050C                     	;# 
  2411  050D                     	;# 
  2412  050E                     	;# 
  2413  050F                     	;# 
  2414  050F                     	;# 
  2415  0510                     	;# 
  2416  0511                     	;# 
  2417  0512                     	;# 
  2418  0512                     	;# 
  2419  0513                     	;# 
  2420  0514                     	;# 
  2421  0515                     	;# 
  2422  0515                     	;# 
  2423  0516                     	;# 
  2424  0517                     	;# 
  2425  0518                     	;# 
  2426  0519                     	;# 
  2427  051A                     	;# 
  2428  051B                     	;# 
  2429  051C                     	;# 
  2430  051D                     	;# 
  2431  058C                     	;# 
  2432  058C                     	;# 
  2433  058D                     	;# 
  2434  058E                     	;# 
  2435  058F                     	;# 
  2436  058F                     	;# 
  2437  0590                     	;# 
  2438  0591                     	;# 
  2439  0592                     	;# 
  2440  0593                     	;# 
  2441  060C                     	;# 
  2442  060D                     	;# 
  2443  060E                     	;# 
  2444  060F                     	;# 
  2445  0610                     	;# 
  2446  0611                     	;# 
  2447  0612                     	;# 
  2448  0613                     	;# 
  2449  0614                     	;# 
  2450  0616                     	;# 
  2451  0617                     	;# 
  2452  0618                     	;# 
  2453  0619                     	;# 
  2454  061A                     	;# 
  2455  061B                     	;# 
  2456  061C                     	;# 
  2457  061D                     	;# 
  2458  061E                     	;# 
  2459  068C                     	;# 
  2460  068D                     	;# 
  2461  068E                     	;# 
  2462  068F                     	;# 
  2463  0690                     	;# 
  2464  0691                     	;# 
  2465  0692                     	;# 
  2466  0693                     	;# 
  2467  0694                     	;# 
  2468  070C                     	;# 
  2469  070D                     	;# 
  2470  070E                     	;# 
  2471  070F                     	;# 
  2472  0710                     	;# 
  2473  0711                     	;# 
  2474  0712                     	;# 
  2475  0713                     	;# 
  2476  0714                     	;# 
  2477  0716                     	;# 
  2478  0717                     	;# 
  2479  0718                     	;# 
  2480  0719                     	;# 
  2481  071A                     	;# 
  2482  071B                     	;# 
  2483  071C                     	;# 
  2484  071D                     	;# 
  2485  071E                     	;# 
  2486  0796                     	;# 
  2487  0797                     	;# 
  2488  0798                     	;# 
  2489  0799                     	;# 
  2490  079A                     	;# 
  2491  079B                     	;# 
  2492  080C                     	;# 
  2493  080D                     	;# 
  2494  080E                     	;# 
  2495  080F                     	;# 
  2496  0810                     	;# 
  2497  0811                     	;# 
  2498  0812                     	;# 
  2499  0813                     	;# 
  2500  0814                     	;# 
  2501  081A                     	;# 
  2502  081B                     	;# 
  2503  081C                     	;# 
  2504  081D                     	;# 
  2505  081E                     	;# 
  2506  081F                     	;# 
  2507  088C                     	;# 
  2508  088D                     	;# 
  2509  088E                     	;# 
  2510  088F                     	;# 
  2511  0890                     	;# 
  2512  0891                     	;# 
  2513  0892                     	;# 
  2514  0893                     	;# 
  2515  0895                     	;# 
  2516  0896                     	;# 
  2517  0897                     	;# 
  2518  0898                     	;# 
  2519  0899                     	;# 
  2520  089A                     	;# 
  2521  089B                     	;# 
  2522  090C                     	;# 
  2523  090E                     	;# 
  2524  090F                     	;# 
  2525  091F                     	;# 
  2526  091F                     	;# 
  2527  098F                     	;# 
  2528  098F                     	;# 
  2529  0990                     	;# 
  2530  0991                     	;# 
  2531  0992                     	;# 
  2532  0993                     	;# 
  2533  0994                     	;# 
  2534  0995                     	;# 
  2535  0996                     	;# 
  2536  0997                     	;# 
  2537  0E0F                     	;# 
  2538  0E10                     	;# 
  2539  0E11                     	;# 
  2540  0E12                     	;# 
  2541  0E13                     	;# 
  2542  0E14                     	;# 
  2543  0E15                     	;# 
  2544  0E16                     	;# 
  2545  0E17                     	;# 
  2546  0E18                     	;# 
  2547  0E19                     	;# 
  2548  0E1A                     	;# 
  2549  0E1B                     	;# 
  2550  0E1C                     	;# 
  2551  0E1D                     	;# 
  2552  0E1E                     	;# 
  2553  0E1F                     	;# 
  2554  0E20                     	;# 
  2555  0E21                     	;# 
  2556  0E22                     	;# 
  2557  0E23                     	;# 
  2558  0E24                     	;# 
  2559  0E25                     	;# 
  2560  0E26                     	;# 
  2561  0E27                     	;# 
  2562  0E28                     	;# 
  2563  0E29                     	;# 
  2564  0E2A                     	;# 
  2565  0E2B                     	;# 
  2566  0E2C                     	;# 
  2567  0E2D                     	;# 
  2568  0E2E                     	;# 
  2569  0E2F                     	;# 
  2570  0E30                     	;# 
  2571  0E31                     	;# 
  2572  0E32                     	;# 
  2573  0E33                     	;# 
  2574  0E34                     	;# 
  2575  0E35                     	;# 
  2576  0E36                     	;# 
  2577  0E37                     	;# 
  2578  0E8F                     	;# 
  2579  0E90                     	;# 
  2580  0E91                     	;# 
  2581  0E92                     	;# 
  2582  0E93                     	;# 
  2583  0E94                     	;# 
  2584  0E95                     	;# 
  2585  0E96                     	;# 
  2586  0E97                     	;# 
  2587  0E9C                     	;# 
  2588  0E9D                     	;# 
  2589  0E9E                     	;# 
  2590  0EA1                     	;# 
  2591  0EA2                     	;# 
  2592  0EA3                     	;# 
  2593  0EA4                     	;# 
  2594  0EA5                     	;# 
  2595  0EA9                     	;# 
  2596  0EAA                     	;# 
  2597  0EAB                     	;# 
  2598  0EAC                     	;# 
  2599  0EB1                     	;# 
  2600  0EB2                     	;# 
  2601  0EB3                     	;# 
  2602  0EB8                     	;# 
  2603  0EB9                     	;# 
  2604  0EBA                     	;# 
  2605  0EBB                     	;# 
  2606  0EBC                     	;# 
  2607  0EBD                     	;# 
  2608  0EBE                     	;# 
  2609  0EC3                     	;# 
  2610  0EC5                     	;# 
  2611  0EC6                     	;# 
  2612  0EC7                     	;# 
  2613  0EC8                     	;# 
  2614  0EC9                     	;# 
  2615  0ECA                     	;# 
  2616  0ECB                     	;# 
  2617  0ECC                     	;# 
  2618  0F10                     	;# 
  2619  0F11                     	;# 
  2620  0F12                     	;# 
  2621  0F13                     	;# 
  2622  0F14                     	;# 
  2623  0F15                     	;# 
  2624  0F16                     	;# 
  2625  0F17                     	;# 
  2626  0F18                     	;# 
  2627  0F19                     	;# 
  2628  0F1A                     	;# 
  2629  0F1B                     	;# 
  2630  0F1C                     	;# 
  2631  0F1D                     	;# 
  2632  0F1E                     	;# 
  2633  0F1F                     	;# 
  2634  0F20                     	;# 
  2635  0F21                     	;# 
  2636  0F22                     	;# 
  2637  0F23                     	;# 
  2638  0F24                     	;# 
  2639  0F25                     	;# 
  2640  0F26                     	;# 
  2641  0F27                     	;# 
  2642  0F38                     	;# 
  2643  0F39                     	;# 
  2644  0F3A                     	;# 
  2645  0F3B                     	;# 
  2646  0F3C                     	;# 
  2647  0F3D                     	;# 
  2648  0F3E                     	;# 
  2649  0F3F                     	;# 
  2650  0F40                     	;# 
  2651  0F41                     	;# 
  2652  0F43                     	;# 
  2653  0F44                     	;# 
  2654  0F45                     	;# 
  2655  0F46                     	;# 
  2656  0F47                     	;# 
  2657  0F48                     	;# 
  2658  0F49                     	;# 
  2659  0F4A                     	;# 
  2660  0F4B                     	;# 
  2661  0F4C                     	;# 
  2662  0F4E                     	;# 
  2663  0F4F                     	;# 
  2664  0F50                     	;# 
  2665  0F51                     	;# 
  2666  0F52                     	;# 
  2667  0F53                     	;# 
  2668  0F54                     	;# 
  2669  0F55                     	;# 
  2670  0F56                     	;# 
  2671  0F57                     	;# 
  2672  0F65                     	;# 
  2673  0F68                     	;# 
  2674  0F69                     	;# 
  2675  0F6A                     	;# 
  2676  0F6B                     	;# 
  2677  0FE4                     	;# 
  2678  0FE5                     	;# 
  2679  0FE6                     	;# 
  2680  0FE7                     	;# 
  2681  0FE8                     	;# 
  2682  0FE9                     	;# 
  2683  0FEA                     	;# 
  2684  0FEB                     	;# 
  2685  0FED                     	;# 
  2686  0FEE                     	;# 
  2687  0FEF                     	;# 
  2688  0000                     	;# 
  2689  0001                     	;# 
  2690  0002                     	;# 
  2691  0003                     	;# 
  2692  0004                     	;# 
  2693  0005                     	;# 
  2694  0006                     	;# 
  2695  0007                     	;# 
  2696  0008                     	;# 
  2697  0009                     	;# 
  2698  000A                     	;# 
  2699  000B                     	;# 
  2700  000C                     	;# 
  2701  000D                     	;# 
  2702  000E                     	;# 
  2703  0010                     	;# 
  2704  0011                     	;# 
  2705  0012                     	;# 
  2706  0013                     	;# 
  2707  0016                     	;# 
  2708  0017                     	;# 
  2709  0018                     	;# 
  2710  001C                     	;# 
  2711  001C                     	;# 
  2712  001D                     	;# 
  2713  001D                     	;# 
  2714  001E                     	;# 
  2715  001F                     	;# 
  2716  008C                     	;# 
  2717  008C                     	;# 
  2718  008D                     	;# 
  2719  008E                     	;# 
  2720  008E                     	;# 
  2721  008F                     	;# 
  2722  0090                     	;# 
  2723  0090                     	;# 
  2724  0091                     	;# 
  2725  0093                     	;# 
  2726  0094                     	;# 
  2727  0095                     	;# 
  2728  0096                     	;# 
  2729  0097                     	;# 
  2730  0098                     	;# 
  2731  0099                     	;# 
  2732  009A                     	;# 
  2733  009B                     	;# 
  2734  009C                     	;# 
  2735  009D                     	;# 
  2736  009E                     	;# 
  2737  010C                     	;# 
  2738  010D                     	;# 
  2739  010E                     	;# 
  2740  010E                     	;# 
  2741  010F                     	;# 
  2742  0110                     	;# 
  2743  0110                     	;# 
  2744  0111                     	;# 
  2745  0112                     	;# 
  2746  0112                     	;# 
  2747  0113                     	;# 
  2748  0114                     	;# 
  2749  0114                     	;# 
  2750  0115                     	;# 
  2751  0116                     	;# 
  2752  0116                     	;# 
  2753  0117                     	;# 
  2754  0119                     	;# 
  2755  0119                     	;# 
  2756  0119                     	;# 
  2757  011A                     	;# 
  2758  011A                     	;# 
  2759  011A                     	;# 
  2760  011B                     	;# 
  2761  011B                     	;# 
  2762  011B                     	;# 
  2763  011B                     	;# 
  2764  011B                     	;# 
  2765  011C                     	;# 
  2766  011C                     	;# 
  2767  011C                     	;# 
  2768  011D                     	;# 
  2769  011D                     	;# 
  2770  011D                     	;# 
  2771  011E                     	;# 
  2772  011E                     	;# 
  2773  011E                     	;# 
  2774  011F                     	;# 
  2775  011F                     	;# 
  2776  011F                     	;# 
  2777  011F                     	;# 
  2778  011F                     	;# 
  2779  018C                     	;# 
  2780  018D                     	;# 
  2781  018E                     	;# 
  2782  018F                     	;# 
  2783  0190                     	;# 
  2784  0191                     	;# 
  2785  0192                     	;# 
  2786  0196                     	;# 
  2787  0197                     	;# 
  2788  0198                     	;# 
  2789  0199                     	;# 
  2790  019A                     	;# 
  2791  019B                     	;# 
  2792  019C                     	;# 
  2793  020C                     	;# 
  2794  020C                     	;# 
  2795  020D                     	;# 
  2796  020E                     	;# 
  2797  020F                     	;# 
  2798  020F                     	;# 
  2799  0210                     	;# 
  2800  0210                     	;# 
  2801  0211                     	;# 
  2802  0211                     	;# 
  2803  0212                     	;# 
  2804  0212                     	;# 
  2805  0213                     	;# 
  2806  0214                     	;# 
  2807  0215                     	;# 
  2808  0215                     	;# 
  2809  0216                     	;# 
  2810  0216                     	;# 
  2811  0217                     	;# 
  2812  0217                     	;# 
  2813  0218                     	;# 
  2814  0218                     	;# 
  2815  0219                     	;# 
  2816  021A                     	;# 
  2817  021B                     	;# 
  2818  021B                     	;# 
  2819  021C                     	;# 
  2820  021C                     	;# 
  2821  021D                     	;# 
  2822  021D                     	;# 
  2823  021E                     	;# 
  2824  021F                     	;# 
  2825  028C                     	;# 
  2826  028C                     	;# 
  2827  028D                     	;# 
  2828  028D                     	;# 
  2829  028E                     	;# 
  2830  028F                     	;# 
  2831  0290                     	;# 
  2832  0290                     	;# 
  2833  0291                     	;# 
  2834  0292                     	;# 
  2835  0292                     	;# 
  2836  0293                     	;# 
  2837  0293                     	;# 
  2838  0294                     	;# 
  2839  0295                     	;# 
  2840  0296                     	;# 
  2841  0296                     	;# 
  2842  0297                     	;# 
  2843  0298                     	;# 
  2844  0298                     	;# 
  2845  0299                     	;# 
  2846  0299                     	;# 
  2847  029A                     	;# 
  2848  029B                     	;# 
  2849  029C                     	;# 
  2850  029C                     	;# 
  2851  029D                     	;# 
  2852  030C                     	;# 
  2853  030C                     	;# 
  2854  030D                     	;# 
  2855  030E                     	;# 
  2856  030F                     	;# 
  2857  0310                     	;# 
  2858  0310                     	;# 
  2859  0311                     	;# 
  2860  0312                     	;# 
  2861  0313                     	;# 
  2862  0314                     	;# 
  2863  0314                     	;# 
  2864  0315                     	;# 
  2865  0316                     	;# 
  2866  0317                     	;# 
  2867  0318                     	;# 
  2868  0318                     	;# 
  2869  0319                     	;# 
  2870  031A                     	;# 
  2871  031B                     	;# 
  2872  031C                     	;# 
  2873  031C                     	;# 
  2874  031D                     	;# 
  2875  031E                     	;# 
  2876  031F                     	;# 
  2877  038C                     	;# 
  2878  038D                     	;# 
  2879  038E                     	;# 
  2880  0390                     	;# 
  2881  0391                     	;# 
  2882  0392                     	;# 
  2883  040C                     	;# 
  2884  040D                     	;# 
  2885  040E                     	;# 
  2886  040F                     	;# 
  2887  0410                     	;# 
  2888  0411                     	;# 
  2889  0416                     	;# 
  2890  0416                     	;# 
  2891  0417                     	;# 
  2892  0418                     	;# 
  2893  0418                     	;# 
  2894  0419                     	;# 
  2895  041A                     	;# 
  2896  041A                     	;# 
  2897  041B                     	;# 
  2898  041C                     	;# 
  2899  041C                     	;# 
  2900  041D                     	;# 
  2901  041E                     	;# 
  2902  041F                     	;# 
  2903  048C                     	;# 
  2904  048C                     	;# 
  2905  048D                     	;# 
  2906  048E                     	;# 
  2907  048F                     	;# 
  2908  048F                     	;# 
  2909  0490                     	;# 
  2910  0491                     	;# 
  2911  0492                     	;# 
  2912  0492                     	;# 
  2913  0493                     	;# 
  2914  0494                     	;# 
  2915  0495                     	;# 
  2916  0495                     	;# 
  2917  0496                     	;# 
  2918  0497                     	;# 
  2919  0498                     	;# 
  2920  0499                     	;# 
  2921  049A                     	;# 
  2922  049B                     	;# 
  2923  049C                     	;# 
  2924  049D                     	;# 
  2925  050C                     	;# 
  2926  050C                     	;# 
  2927  050D                     	;# 
  2928  050E                     	;# 
  2929  050F                     	;# 
  2930  050F                     	;# 
  2931  0510                     	;# 
  2932  0511                     	;# 
  2933  0512                     	;# 
  2934  0512                     	;# 
  2935  0513                     	;# 
  2936  0514                     	;# 
  2937  0515                     	;# 
  2938  0515                     	;# 
  2939  0516                     	;# 
  2940  0517                     	;# 
  2941  0518                     	;# 
  2942  0519                     	;# 
  2943  051A                     	;# 
  2944  051B                     	;# 
  2945  051C                     	;# 
  2946  051D                     	;# 
  2947  058C                     	;# 
  2948  058C                     	;# 
  2949  058D                     	;# 
  2950  058E                     	;# 
  2951  058F                     	;# 
  2952  058F                     	;# 
  2953  0590                     	;# 
  2954  0591                     	;# 
  2955  0592                     	;# 
  2956  0593                     	;# 
  2957  060C                     	;# 
  2958  060D                     	;# 
  2959  060E                     	;# 
  2960  060F                     	;# 
  2961  0610                     	;# 
  2962  0611                     	;# 
  2963  0612                     	;# 
  2964  0613                     	;# 
  2965  0614                     	;# 
  2966  0616                     	;# 
  2967  0617                     	;# 
  2968  0618                     	;# 
  2969  0619                     	;# 
  2970  061A                     	;# 
  2971  061B                     	;# 
  2972  061C                     	;# 
  2973  061D                     	;# 
  2974  061E                     	;# 
  2975  068C                     	;# 
  2976  068D                     	;# 
  2977  068E                     	;# 
  2978  068F                     	;# 
  2979  0690                     	;# 
  2980  0691                     	;# 
  2981  0692                     	;# 
  2982  0693                     	;# 
  2983  0694                     	;# 
  2984  070C                     	;# 
  2985  070D                     	;# 
  2986  070E                     	;# 
  2987  070F                     	;# 
  2988  0710                     	;# 
  2989  0711                     	;# 
  2990  0712                     	;# 
  2991  0713                     	;# 
  2992  0714                     	;# 
  2993  0716                     	;# 
  2994  0717                     	;# 
  2995  0718                     	;# 
  2996  0719                     	;# 
  2997  071A                     	;# 
  2998  071B                     	;# 
  2999  071C                     	;# 
  3000  071D                     	;# 
  3001  071E                     	;# 
  3002  0796                     	;# 
  3003  0797                     	;# 
  3004  0798                     	;# 
  3005  0799                     	;# 
  3006  079A                     	;# 
  3007  079B                     	;# 
  3008  080C                     	;# 
  3009  080D                     	;# 
  3010  080E                     	;# 
  3011  080F                     	;# 
  3012  0810                     	;# 
  3013  0811                     	;# 
  3014  0812                     	;# 
  3015  0813                     	;# 
  3016  0814                     	;# 
  3017  081A                     	;# 
  3018  081B                     	;# 
  3019  081C                     	;# 
  3020  081D                     	;# 
  3021  081E                     	;# 
  3022  081F                     	;# 
  3023  088C                     	;# 
  3024  088D                     	;# 
  3025  088E                     	;# 
  3026  088F                     	;# 
  3027  0890                     	;# 
  3028  0891                     	;# 
  3029  0892                     	;# 
  3030  0893                     	;# 
  3031  0895                     	;# 
  3032  0896                     	;# 
  3033  0897                     	;# 
  3034  0898                     	;# 
  3035  0899                     	;# 
  3036  089A                     	;# 
  3037  089B                     	;# 
  3038  090C                     	;# 
  3039  090E                     	;# 
  3040  090F                     	;# 
  3041  091F                     	;# 
  3042  091F                     	;# 
  3043  098F                     	;# 
  3044  098F                     	;# 
  3045  0990                     	;# 
  3046  0991                     	;# 
  3047  0992                     	;# 
  3048  0993                     	;# 
  3049  0994                     	;# 
  3050  0995                     	;# 
  3051  0996                     	;# 
  3052  0997                     	;# 
  3053  0E0F                     	;# 
  3054  0E10                     	;# 
  3055  0E11                     	;# 
  3056  0E12                     	;# 
  3057  0E13                     	;# 
  3058  0E14                     	;# 
  3059  0E15                     	;# 
  3060  0E16                     	;# 
  3061  0E17                     	;# 
  3062  0E18                     	;# 
  3063  0E19                     	;# 
  3064  0E1A                     	;# 
  3065  0E1B                     	;# 
  3066  0E1C                     	;# 
  3067  0E1D                     	;# 
  3068  0E1E                     	;# 
  3069  0E1F                     	;# 
  3070  0E20                     	;# 
  3071  0E21                     	;# 
  3072  0E22                     	;# 
  3073  0E23                     	;# 
  3074  0E24                     	;# 
  3075  0E25                     	;# 
  3076  0E26                     	;# 
  3077  0E27                     	;# 
  3078  0E28                     	;# 
  3079  0E29                     	;# 
  3080  0E2A                     	;# 
  3081  0E2B                     	;# 
  3082  0E2C                     	;# 
  3083  0E2D                     	;# 
  3084  0E2E                     	;# 
  3085  0E2F                     	;# 
  3086  0E30                     	;# 
  3087  0E31                     	;# 
  3088  0E32                     	;# 
  3089  0E33                     	;# 
  3090  0E34                     	;# 
  3091  0E35                     	;# 
  3092  0E36                     	;# 
  3093  0E37                     	;# 
  3094  0E8F                     	;# 
  3095  0E90                     	;# 
  3096  0E91                     	;# 
  3097  0E92                     	;# 
  3098  0E93                     	;# 
  3099  0E94                     	;# 
  3100  0E95                     	;# 
  3101  0E96                     	;# 
  3102  0E97                     	;# 
  3103  0E9C                     	;# 
  3104  0E9D                     	;# 
  3105  0E9E                     	;# 
  3106  0EA1                     	;# 
  3107  0EA2                     	;# 
  3108  0EA3                     	;# 
  3109  0EA4                     	;# 
  3110  0EA5                     	;# 
  3111  0EA9                     	;# 
  3112  0EAA                     	;# 
  3113  0EAB                     	;# 
  3114  0EAC                     	;# 
  3115  0EB1                     	;# 
  3116  0EB2                     	;# 
  3117  0EB3                     	;# 
  3118  0EB8                     	;# 
  3119  0EB9                     	;# 
  3120  0EBA                     	;# 
  3121  0EBB                     	;# 
  3122  0EBC                     	;# 
  3123  0EBD                     	;# 
  3124  0EBE                     	;# 
  3125  0EC3                     	;# 
  3126  0EC5                     	;# 
  3127  0EC6                     	;# 
  3128  0EC7                     	;# 
  3129  0EC8                     	;# 
  3130  0EC9                     	;# 
  3131  0ECA                     	;# 
  3132  0ECB                     	;# 
  3133  0ECC                     	;# 
  3134  0F10                     	;# 
  3135  0F11                     	;# 
  3136  0F12                     	;# 
  3137  0F13                     	;# 
  3138  0F14                     	;# 
  3139  0F15                     	;# 
  3140  0F16                     	;# 
  3141  0F17                     	;# 
  3142  0F18                     	;# 
  3143  0F19                     	;# 
  3144  0F1A                     	;# 
  3145  0F1B                     	;# 
  3146  0F1C                     	;# 
  3147  0F1D                     	;# 
  3148  0F1E                     	;# 
  3149  0F1F                     	;# 
  3150  0F20                     	;# 
  3151  0F21                     	;# 
  3152  0F22                     	;# 
  3153  0F23                     	;# 
  3154  0F24                     	;# 
  3155  0F25                     	;# 
  3156  0F26                     	;# 
  3157  0F27                     	;# 
  3158  0F38                     	;# 
  3159  0F39                     	;# 
  3160  0F3A                     	;# 
  3161  0F3B                     	;# 
  3162  0F3C                     	;# 
  3163  0F3D                     	;# 
  3164  0F3E                     	;# 
  3165  0F3F                     	;# 
  3166  0F40                     	;# 
  3167  0F41                     	;# 
  3168  0F43                     	;# 
  3169  0F44                     	;# 
  3170  0F45                     	;# 
  3171  0F46                     	;# 
  3172  0F47                     	;# 
  3173  0F48                     	;# 
  3174  0F49                     	;# 
  3175  0F4A                     	;# 
  3176  0F4B                     	;# 
  3177  0F4C                     	;# 
  3178  0F4E                     	;# 
  3179  0F4F                     	;# 
  3180  0F50                     	;# 
  3181  0F51                     	;# 
  3182  0F52                     	;# 
  3183  0F53                     	;# 
  3184  0F54                     	;# 
  3185  0F55                     	;# 
  3186  0F56                     	;# 
  3187  0F57                     	;# 
  3188  0F65                     	;# 
  3189  0F68                     	;# 
  3190  0F69                     	;# 
  3191  0F6A                     	;# 
  3192  0F6B                     	;# 
  3193  0FE4                     	;# 
  3194  0FE5                     	;# 
  3195  0FE6                     	;# 
  3196  0FE7                     	;# 
  3197  0FE8                     	;# 
  3198  0FE9                     	;# 
  3199  0FEA                     	;# 
  3200  0FEB                     	;# 
  3201  0FED                     	;# 
  3202  0FEE                     	;# 
  3203  0FEF                     	;# 
  3204  0000                     	;# 
  3205  0001                     	;# 
  3206  0002                     	;# 
  3207  0003                     	;# 
  3208  0004                     	;# 
  3209  0005                     	;# 
  3210  0006                     	;# 
  3211  0007                     	;# 
  3212  0008                     	;# 
  3213  0009                     	;# 
  3214  000A                     	;# 
  3215  000B                     	;# 
  3216  000C                     	;# 
  3217  000D                     	;# 
  3218  000E                     	;# 
  3219  0010                     	;# 
  3220  0011                     	;# 
  3221  0012                     	;# 
  3222  0013                     	;# 
  3223  0016                     	;# 
  3224  0017                     	;# 
  3225  0018                     	;# 
  3226  001C                     	;# 
  3227  001C                     	;# 
  3228  001D                     	;# 
  3229  001D                     	;# 
  3230  001E                     	;# 
  3231  001F                     	;# 
  3232  008C                     	;# 
  3233  008C                     	;# 
  3234  008D                     	;# 
  3235  008E                     	;# 
  3236  008E                     	;# 
  3237  008F                     	;# 
  3238  0090                     	;# 
  3239  0090                     	;# 
  3240  0091                     	;# 
  3241  0093                     	;# 
  3242  0094                     	;# 
  3243  0095                     	;# 
  3244  0096                     	;# 
  3245  0097                     	;# 
  3246  0098                     	;# 
  3247  0099                     	;# 
  3248  009A                     	;# 
  3249  009B                     	;# 
  3250  009C                     	;# 
  3251  009D                     	;# 
  3252  009E                     	;# 
  3253  010C                     	;# 
  3254  010D                     	;# 
  3255  010E                     	;# 
  3256  010E                     	;# 
  3257  010F                     	;# 
  3258  0110                     	;# 
  3259  0110                     	;# 
  3260  0111                     	;# 
  3261  0112                     	;# 
  3262  0112                     	;# 
  3263  0113                     	;# 
  3264  0114                     	;# 
  3265  0114                     	;# 
  3266  0115                     	;# 
  3267  0116                     	;# 
  3268  0116                     	;# 
  3269  0117                     	;# 
  3270  0119                     	;# 
  3271  0119                     	;# 
  3272  0119                     	;# 
  3273  011A                     	;# 
  3274  011A                     	;# 
  3275  011A                     	;# 
  3276  011B                     	;# 
  3277  011B                     	;# 
  3278  011B                     	;# 
  3279  011B                     	;# 
  3280  011B                     	;# 
  3281  011C                     	;# 
  3282  011C                     	;# 
  3283  011C                     	;# 
  3284  011D                     	;# 
  3285  011D                     	;# 
  3286  011D                     	;# 
  3287  011E                     	;# 
  3288  011E                     	;# 
  3289  011E                     	;# 
  3290  011F                     	;# 
  3291  011F                     	;# 
  3292  011F                     	;# 
  3293  011F                     	;# 
  3294  011F                     	;# 
  3295  018C                     	;# 
  3296  018D                     	;# 
  3297  018E                     	;# 
  3298  018F                     	;# 
  3299  0190                     	;# 
  3300  0191                     	;# 
  3301  0192                     	;# 
  3302  0196                     	;# 
  3303  0197                     	;# 
  3304  0198                     	;# 
  3305  0199                     	;# 
  3306  019A                     	;# 
  3307  019B                     	;# 
  3308  019C                     	;# 
  3309  020C                     	;# 
  3310  020C                     	;# 
  3311  020D                     	;# 
  3312  020E                     	;# 
  3313  020F                     	;# 
  3314  020F                     	;# 
  3315  0210                     	;# 
  3316  0210                     	;# 
  3317  0211                     	;# 
  3318  0211                     	;# 
  3319  0212                     	;# 
  3320  0212                     	;# 
  3321  0213                     	;# 
  3322  0214                     	;# 
  3323  0215                     	;# 
  3324  0215                     	;# 
  3325  0216                     	;# 
  3326  0216                     	;# 
  3327  0217                     	;# 
  3328  0217                     	;# 
  3329  0218                     	;# 
  3330  0218                     	;# 
  3331  0219                     	;# 
  3332  021A                     	;# 
  3333  021B                     	;# 
  3334  021B                     	;# 
  3335  021C                     	;# 
  3336  021C                     	;# 
  3337  021D                     	;# 
  3338  021D                     	;# 
  3339  021E                     	;# 
  3340  021F                     	;# 
  3341  028C                     	;# 
  3342  028C                     	;# 
  3343  028D                     	;# 
  3344  028D                     	;# 
  3345  028E                     	;# 
  3346  028F                     	;# 
  3347  0290                     	;# 
  3348  0290                     	;# 
  3349  0291                     	;# 
  3350  0292                     	;# 
  3351  0292                     	;# 
  3352  0293                     	;# 
  3353  0293                     	;# 
  3354  0294                     	;# 
  3355  0295                     	;# 
  3356  0296                     	;# 
  3357  0296                     	;# 
  3358  0297                     	;# 
  3359  0298                     	;# 
  3360  0298                     	;# 
  3361  0299                     	;# 
  3362  0299                     	;# 
  3363  029A                     	;# 
  3364  029B                     	;# 
  3365  029C                     	;# 
  3366  029C                     	;# 
  3367  029D                     	;# 
  3368  030C                     	;# 
  3369  030C                     	;# 
  3370  030D                     	;# 
  3371  030E                     	;# 
  3372  030F                     	;# 
  3373  0310                     	;# 
  3374  0310                     	;# 
  3375  0311                     	;# 
  3376  0312                     	;# 
  3377  0313                     	;# 
  3378  0314                     	;# 
  3379  0314                     	;# 
  3380  0315                     	;# 
  3381  0316                     	;# 
  3382  0317                     	;# 
  3383  0318                     	;# 
  3384  0318                     	;# 
  3385  0319                     	;# 
  3386  031A                     	;# 
  3387  031B                     	;# 
  3388  031C                     	;# 
  3389  031C                     	;# 
  3390  031D                     	;# 
  3391  031E                     	;# 
  3392  031F                     	;# 
  3393  038C                     	;# 
  3394  038D                     	;# 
  3395  038E                     	;# 
  3396  0390                     	;# 
  3397  0391                     	;# 
  3398  0392                     	;# 
  3399  040C                     	;# 
  3400  040D                     	;# 
  3401  040E                     	;# 
  3402  040F                     	;# 
  3403  0410                     	;# 
  3404  0411                     	;# 
  3405  0416                     	;# 
  3406  0416                     	;# 
  3407  0417                     	;# 
  3408  0418                     	;# 
  3409  0418                     	;# 
  3410  0419                     	;# 
  3411  041A                     	;# 
  3412  041A                     	;# 
  3413  041B                     	;# 
  3414  041C                     	;# 
  3415  041C                     	;# 
  3416  041D                     	;# 
  3417  041E                     	;# 
  3418  041F                     	;# 
  3419  048C                     	;# 
  3420  048C                     	;# 
  3421  048D                     	;# 
  3422  048E                     	;# 
  3423  048F                     	;# 
  3424  048F                     	;# 
  3425  0490                     	;# 
  3426  0491                     	;# 
  3427  0492                     	;# 
  3428  0492                     	;# 
  3429  0493                     	;# 
  3430  0494                     	;# 
  3431  0495                     	;# 
  3432  0495                     	;# 
  3433  0496                     	;# 
  3434  0497                     	;# 
  3435  0498                     	;# 
  3436  0499                     	;# 
  3437  049A                     	;# 
  3438  049B                     	;# 
  3439  049C                     	;# 
  3440  049D                     	;# 
  3441  050C                     	;# 
  3442  050C                     	;# 
  3443  050D                     	;# 
  3444  050E                     	;# 
  3445  050F                     	;# 
  3446  050F                     	;# 
  3447  0510                     	;# 
  3448  0511                     	;# 
  3449  0512                     	;# 
  3450  0512                     	;# 
  3451  0513                     	;# 
  3452  0514                     	;# 
  3453  0515                     	;# 
  3454  0515                     	;# 
  3455  0516                     	;# 
  3456  0517                     	;# 
  3457  0518                     	;# 
  3458  0519                     	;# 
  3459  051A                     	;# 
  3460  051B                     	;# 
  3461  051C                     	;# 
  3462  051D                     	;# 
  3463  058C                     	;# 
  3464  058C                     	;# 
  3465  058D                     	;# 
  3466  058E                     	;# 
  3467  058F                     	;# 
  3468  058F                     	;# 
  3469  0590                     	;# 
  3470  0591                     	;# 
  3471  0592                     	;# 
  3472  0593                     	;# 
  3473  060C                     	;# 
  3474  060D                     	;# 
  3475  060E                     	;# 
  3476  060F                     	;# 
  3477  0610                     	;# 
  3478  0611                     	;# 
  3479  0612                     	;# 
  3480  0613                     	;# 
  3481  0614                     	;# 
  3482  0616                     	;# 
  3483  0617                     	;# 
  3484  0618                     	;# 
  3485  0619                     	;# 
  3486  061A                     	;# 
  3487  061B                     	;# 
  3488  061C                     	;# 
  3489  061D                     	;# 
  3490  061E                     	;# 
  3491  068C                     	;# 
  3492  068D                     	;# 
  3493  068E                     	;# 
  3494  068F                     	;# 
  3495  0690                     	;# 
  3496  0691                     	;# 
  3497  0692                     	;# 
  3498  0693                     	;# 
  3499  0694                     	;# 
  3500  070C                     	;# 
  3501  070D                     	;# 
  3502  070E                     	;# 
  3503  070F                     	;# 
  3504  0710                     	;# 
  3505  0711                     	;# 
  3506  0712                     	;# 
  3507  0713                     	;# 
  3508  0714                     	;# 
  3509  0716                     	;# 
  3510  0717                     	;# 
  3511  0718                     	;# 
  3512  0719                     	;# 
  3513  071A                     	;# 
  3514  071B                     	;# 
  3515  071C                     	;# 
  3516  071D                     	;# 
  3517  071E                     	;# 
  3518  0796                     	;# 
  3519  0797                     	;# 
  3520  0798                     	;# 
  3521  0799                     	;# 
  3522  079A                     	;# 
  3523  079B                     	;# 
  3524  080C                     	;# 
  3525  080D                     	;# 
  3526  080E                     	;# 
  3527  080F                     	;# 
  3528  0810                     	;# 
  3529  0811                     	;# 
  3530  0812                     	;# 
  3531  0813                     	;# 
  3532  0814                     	;# 
  3533  081A                     	;# 
  3534  081B                     	;# 
  3535  081C                     	;# 
  3536  081D                     	;# 
  3537  081E                     	;# 
  3538  081F                     	;# 
  3539  088C                     	;# 
  3540  088D                     	;# 
  3541  088E                     	;# 
  3542  088F                     	;# 
  3543  0890                     	;# 
  3544  0891                     	;# 
  3545  0892                     	;# 
  3546  0893                     	;# 
  3547  0895                     	;# 
  3548  0896                     	;# 
  3549  0897                     	;# 
  3550  0898                     	;# 
  3551  0899                     	;# 
  3552  089A                     	;# 
  3553  089B                     	;# 
  3554  090C                     	;# 
  3555  090E                     	;# 
  3556  090F                     	;# 
  3557  091F                     	;# 
  3558  091F                     	;# 
  3559  098F                     	;# 
  3560  098F                     	;# 
  3561  0990                     	;# 
  3562  0991                     	;# 
  3563  0992                     	;# 
  3564  0993                     	;# 
  3565  0994                     	;# 
  3566  0995                     	;# 
  3567  0996                     	;# 
  3568  0997                     	;# 
  3569  0E0F                     	;# 
  3570  0E10                     	;# 
  3571  0E11                     	;# 
  3572  0E12                     	;# 
  3573  0E13                     	;# 
  3574  0E14                     	;# 
  3575  0E15                     	;# 
  3576  0E16                     	;# 
  3577  0E17                     	;# 
  3578  0E18                     	;# 
  3579  0E19                     	;# 
  3580  0E1A                     	;# 
  3581  0E1B                     	;# 
  3582  0E1C                     	;# 
  3583  0E1D                     	;# 
  3584  0E1E                     	;# 
  3585  0E1F                     	;# 
  3586  0E20                     	;# 
  3587  0E21                     	;# 
  3588  0E22                     	;# 
  3589  0E23                     	;# 
  3590  0E24                     	;# 
  3591  0E25                     	;# 
  3592  0E26                     	;# 
  3593  0E27                     	;# 
  3594  0E28                     	;# 
  3595  0E29                     	;# 
  3596  0E2A                     	;# 
  3597  0E2B                     	;# 
  3598  0E2C                     	;# 
  3599  0E2D                     	;# 
  3600  0E2E                     	;# 
  3601  0E2F                     	;# 
  3602  0E30                     	;# 
  3603  0E31                     	;# 
  3604  0E32                     	;# 
  3605  0E33                     	;# 
  3606  0E34                     	;# 
  3607  0E35                     	;# 
  3608  0E36                     	;# 
  3609  0E37                     	;# 
  3610  0E8F                     	;# 
  3611  0E90                     	;# 
  3612  0E91                     	;# 
  3613  0E92                     	;# 
  3614  0E93                     	;# 
  3615  0E94                     	;# 
  3616  0E95                     	;# 
  3617  0E96                     	;# 
  3618  0E97                     	;# 
  3619  0E9C                     	;# 
  3620  0E9D                     	;# 
  3621  0E9E                     	;# 
  3622  0EA1                     	;# 
  3623  0EA2                     	;# 
  3624  0EA3                     	;# 
  3625  0EA4                     	;# 
  3626  0EA5                     	;# 
  3627  0EA9                     	;# 
  3628  0EAA                     	;# 
  3629  0EAB                     	;# 
  3630  0EAC                     	;# 
  3631  0EB1                     	;# 
  3632  0EB2                     	;# 
  3633  0EB3                     	;# 
  3634  0EB8                     	;# 
  3635  0EB9                     	;# 
  3636  0EBA                     	;# 
  3637  0EBB                     	;# 
  3638  0EBC                     	;# 
  3639  0EBD                     	;# 
  3640  0EBE                     	;# 
  3641  0EC3                     	;# 
  3642  0EC5                     	;# 
  3643  0EC6                     	;# 
  3644  0EC7                     	;# 
  3645  0EC8                     	;# 
  3646  0EC9                     	;# 
  3647  0ECA                     	;# 
  3648  0ECB                     	;# 
  3649  0ECC                     	;# 
  3650  0F10                     	;# 
  3651  0F11                     	;# 
  3652  0F12                     	;# 
  3653  0F13                     	;# 
  3654  0F14                     	;# 
  3655  0F15                     	;# 
  3656  0F16                     	;# 
  3657  0F17                     	;# 
  3658  0F18                     	;# 
  3659  0F19                     	;# 
  3660  0F1A                     	;# 
  3661  0F1B                     	;# 
  3662  0F1C                     	;# 
  3663  0F1D                     	;# 
  3664  0F1E                     	;# 
  3665  0F1F                     	;# 
  3666  0F20                     	;# 
  3667  0F21                     	;# 
  3668  0F22                     	;# 
  3669  0F23                     	;# 
  3670  0F24                     	;# 
  3671  0F25                     	;# 
  3672  0F26                     	;# 
  3673  0F27                     	;# 
  3674  0F38                     	;# 
  3675  0F39                     	;# 
  3676  0F3A                     	;# 
  3677  0F3B                     	;# 
  3678  0F3C                     	;# 
  3679  0F3D                     	;# 
  3680  0F3E                     	;# 
  3681  0F3F                     	;# 
  3682  0F40                     	;# 
  3683  0F41                     	;# 
  3684  0F43                     	;# 
  3685  0F44                     	;# 
  3686  0F45                     	;# 
  3687  0F46                     	;# 
  3688  0F47                     	;# 
  3689  0F48                     	;# 
  3690  0F49                     	;# 
  3691  0F4A                     	;# 
  3692  0F4B                     	;# 
  3693  0F4C                     	;# 
  3694  0F4E                     	;# 
  3695  0F4F                     	;# 
  3696  0F50                     	;# 
  3697  0F51                     	;# 
  3698  0F52                     	;# 
  3699  0F53                     	;# 
  3700  0F54                     	;# 
  3701  0F55                     	;# 
  3702  0F56                     	;# 
  3703  0F57                     	;# 
  3704  0F65                     	;# 
  3705  0F68                     	;# 
  3706  0F69                     	;# 
  3707  0F6A                     	;# 
  3708  0F6B                     	;# 
  3709  0FE4                     	;# 
  3710  0FE5                     	;# 
  3711  0FE6                     	;# 
  3712  0FE7                     	;# 
  3713  0FE8                     	;# 
  3714  0FE9                     	;# 
  3715  0FEA                     	;# 
  3716  0FEB                     	;# 
  3717  0FED                     	;# 
  3718  0FEE                     	;# 
  3719  0FEF                     	;# 
  3720  0000                     	;# 
  3721  0001                     	;# 
  3722  0002                     	;# 
  3723  0003                     	;# 
  3724  0004                     	;# 
  3725  0005                     	;# 
  3726  0006                     	;# 
  3727  0007                     	;# 
  3728  0008                     	;# 
  3729  0009                     	;# 
  3730  000A                     	;# 
  3731  000B                     	;# 
  3732  000C                     	;# 
  3733  000D                     	;# 
  3734  000E                     	;# 
  3735  0010                     	;# 
  3736  0011                     	;# 
  3737  0012                     	;# 
  3738  0013                     	;# 
  3739  0016                     	;# 
  3740  0017                     	;# 
  3741  0018                     	;# 
  3742  001C                     	;# 
  3743  001C                     	;# 
  3744  001D                     	;# 
  3745  001D                     	;# 
  3746  001E                     	;# 
  3747  001F                     	;# 
  3748  008C                     	;# 
  3749  008C                     	;# 
  3750  008D                     	;# 
  3751  008E                     	;# 
  3752  008E                     	;# 
  3753  008F                     	;# 
  3754  0090                     	;# 
  3755  0090                     	;# 
  3756  0091                     	;# 
  3757  0093                     	;# 
  3758  0094                     	;# 
  3759  0095                     	;# 
  3760  0096                     	;# 
  3761  0097                     	;# 
  3762  0098                     	;# 
  3763  0099                     	;# 
  3764  009A                     	;# 
  3765  009B                     	;# 
  3766  009C                     	;# 
  3767  009D                     	;# 
  3768  009E                     	;# 
  3769  010C                     	;# 
  3770  010D                     	;# 
  3771  010E                     	;# 
  3772  010E                     	;# 
  3773  010F                     	;# 
  3774  0110                     	;# 
  3775  0110                     	;# 
  3776  0111                     	;# 
  3777  0112                     	;# 
  3778  0112                     	;# 
  3779  0113                     	;# 
  3780  0114                     	;# 
  3781  0114                     	;# 
  3782  0115                     	;# 
  3783  0116                     	;# 
  3784  0116                     	;# 
  3785  0117                     	;# 
  3786  0119                     	;# 
  3787  0119                     	;# 
  3788  0119                     	;# 
  3789  011A                     	;# 
  3790  011A                     	;# 
  3791  011A                     	;# 
  3792  011B                     	;# 
  3793  011B                     	;# 
  3794  011B                     	;# 
  3795  011B                     	;# 
  3796  011B                     	;# 
  3797  011C                     	;# 
  3798  011C                     	;# 
  3799  011C                     	;# 
  3800  011D                     	;# 
  3801  011D                     	;# 
  3802  011D                     	;# 
  3803  011E                     	;# 
  3804  011E                     	;# 
  3805  011E                     	;# 
  3806  011F                     	;# 
  3807  011F                     	;# 
  3808  011F                     	;# 
  3809  011F                     	;# 
  3810  011F                     	;# 
  3811  018C                     	;# 
  3812  018D                     	;# 
  3813  018E                     	;# 
  3814  018F                     	;# 
  3815  0190                     	;# 
  3816  0191                     	;# 
  3817  0192                     	;# 
  3818  0196                     	;# 
  3819  0197                     	;# 
  3820  0198                     	;# 
  3821  0199                     	;# 
  3822  019A                     	;# 
  3823  019B                     	;# 
  3824  019C                     	;# 
  3825  020C                     	;# 
  3826  020C                     	;# 
  3827  020D                     	;# 
  3828  020E                     	;# 
  3829  020F                     	;# 
  3830  020F                     	;# 
  3831  0210                     	;# 
  3832  0210                     	;# 
  3833  0211                     	;# 
  3834  0211                     	;# 
  3835  0212                     	;# 
  3836  0212                     	;# 
  3837  0213                     	;# 
  3838  0214                     	;# 
  3839  0215                     	;# 
  3840  0215                     	;# 
  3841  0216                     	;# 
  3842  0216                     	;# 
  3843  0217                     	;# 
  3844  0217                     	;# 
  3845  0218                     	;# 
  3846  0218                     	;# 
  3847  0219                     	;# 
  3848  021A                     	;# 
  3849  021B                     	;# 
  3850  021B                     	;# 
  3851  021C                     	;# 
  3852  021C                     	;# 
  3853  021D                     	;# 
  3854  021D                     	;# 
  3855  021E                     	;# 
  3856  021F                     	;# 
  3857  028C                     	;# 
  3858  028C                     	;# 
  3859  028D                     	;# 
  3860  028D                     	;# 
  3861  028E                     	;# 
  3862  028F                     	;# 
  3863  0290                     	;# 
  3864  0290                     	;# 
  3865  0291                     	;# 
  3866  0292                     	;# 
  3867  0292                     	;# 
  3868  0293                     	;# 
  3869  0293                     	;# 
  3870  0294                     	;# 
  3871  0295                     	;# 
  3872  0296                     	;# 
  3873  0296                     	;# 
  3874  0297                     	;# 
  3875  0298                     	;# 
  3876  0298                     	;# 
  3877  0299                     	;# 
  3878  0299                     	;# 
  3879  029A                     	;# 
  3880  029B                     	;# 
  3881  029C                     	;# 
  3882  029C                     	;# 
  3883  029D                     	;# 
  3884  030C                     	;# 
  3885  030C                     	;# 
  3886  030D                     	;# 
  3887  030E                     	;# 
  3888  030F                     	;# 
  3889  0310                     	;# 
  3890  0310                     	;# 
  3891  0311                     	;# 
  3892  0312                     	;# 
  3893  0313                     	;# 
  3894  0314                     	;# 
  3895  0314                     	;# 
  3896  0315                     	;# 
  3897  0316                     	;# 
  3898  0317                     	;# 
  3899  0318                     	;# 
  3900  0318                     	;# 
  3901  0319                     	;# 
  3902  031A                     	;# 
  3903  031B                     	;# 
  3904  031C                     	;# 
  3905  031C                     	;# 
  3906  031D                     	;# 
  3907  031E                     	;# 
  3908  031F                     	;# 
  3909  038C                     	;# 
  3910  038D                     	;# 
  3911  038E                     	;# 
  3912  0390                     	;# 
  3913  0391                     	;# 
  3914  0392                     	;# 
  3915  040C                     	;# 
  3916  040D                     	;# 
  3917  040E                     	;# 
  3918  040F                     	;# 
  3919  0410                     	;# 
  3920  0411                     	;# 
  3921  0416                     	;# 
  3922  0416                     	;# 
  3923  0417                     	;# 
  3924  0418                     	;# 
  3925  0418                     	;# 
  3926  0419                     	;# 
  3927  041A                     	;# 
  3928  041A                     	;# 
  3929  041B                     	;# 
  3930  041C                     	;# 
  3931  041C                     	;# 
  3932  041D                     	;# 
  3933  041E                     	;# 
  3934  041F                     	;# 
  3935  048C                     	;# 
  3936  048C                     	;# 
  3937  048D                     	;# 
  3938  048E                     	;# 
  3939  048F                     	;# 
  3940  048F                     	;# 
  3941  0490                     	;# 
  3942  0491                     	;# 
  3943  0492                     	;# 
  3944  0492                     	;# 
  3945  0493                     	;# 
  3946  0494                     	;# 
  3947  0495                     	;# 
  3948  0495                     	;# 
  3949  0496                     	;# 
  3950  0497                     	;# 
  3951  0498                     	;# 
  3952  0499                     	;# 
  3953  049A                     	;# 
  3954  049B                     	;# 
  3955  049C                     	;# 
  3956  049D                     	;# 
  3957  050C                     	;# 
  3958  050C                     	;# 
  3959  050D                     	;# 
  3960  050E                     	;# 
  3961  050F                     	;# 
  3962  050F                     	;# 
  3963  0510                     	;# 
  3964  0511                     	;# 
  3965  0512                     	;# 
  3966  0512                     	;# 
  3967  0513                     	;# 
  3968  0514                     	;# 
  3969  0515                     	;# 
  3970  0515                     	;# 
  3971  0516                     	;# 
  3972  0517                     	;# 
  3973  0518                     	;# 
  3974  0519                     	;# 
  3975  051A                     	;# 
  3976  051B                     	;# 
  3977  051C                     	;# 
  3978  051D                     	;# 
  3979  058C                     	;# 
  3980  058C                     	;# 
  3981  058D                     	;# 
  3982  058E                     	;# 
  3983  058F                     	;# 
  3984  058F                     	;# 
  3985  0590                     	;# 
  3986  0591                     	;# 
  3987  0592                     	;# 
  3988  0593                     	;# 
  3989  060C                     	;# 
  3990  060D                     	;# 
  3991  060E                     	;# 
  3992  060F                     	;# 
  3993  0610                     	;# 
  3994  0611                     	;# 
  3995  0612                     	;# 
  3996  0613                     	;# 
  3997  0614                     	;# 
  3998  0616                     	;# 
  3999  0617                     	;# 
  4000  0618                     	;# 
  4001  0619                     	;# 
  4002  061A                     	;# 
  4003  061B                     	;# 
  4004  061C                     	;# 
  4005  061D                     	;# 
  4006  061E                     	;# 
  4007  068C                     	;# 
  4008  068D                     	;# 
  4009  068E                     	;# 
  4010  068F                     	;# 
  4011  0690                     	;# 
  4012  0691                     	;# 
  4013  0692                     	;# 
  4014  0693                     	;# 
  4015  0694                     	;# 
  4016  070C                     	;# 
  4017  070D                     	;# 
  4018  070E                     	;# 
  4019  070F                     	;# 
  4020  0710                     	;# 
  4021  0711                     	;# 
  4022  0712                     	;# 
  4023  0713                     	;# 
  4024  0714                     	;# 
  4025  0716                     	;# 
  4026  0717                     	;# 
  4027  0718                     	;# 
  4028  0719                     	;# 
  4029  071A                     	;# 
  4030  071B                     	;# 
  4031  071C                     	;# 
  4032  071D                     	;# 
  4033  071E                     	;# 
  4034  0796                     	;# 
  4035  0797                     	;# 
  4036  0798                     	;# 
  4037  0799                     	;# 
  4038  079A                     	;# 
  4039  079B                     	;# 
  4040  080C                     	;# 
  4041  080D                     	;# 
  4042  080E                     	;# 
  4043  080F                     	;# 
  4044  0810                     	;# 
  4045  0811                     	;# 
  4046  0812                     	;# 
  4047  0813                     	;# 
  4048  0814                     	;# 
  4049  081A                     	;# 
  4050  081B                     	;# 
  4051  081C                     	;# 
  4052  081D                     	;# 
  4053  081E                     	;# 
  4054  081F                     	;# 
  4055  088C                     	;# 
  4056  088D                     	;# 
  4057  088E                     	;# 
  4058  088F                     	;# 
  4059  0890                     	;# 
  4060  0891                     	;# 
  4061  0892                     	;# 
  4062  0893                     	;# 
  4063  0895                     	;# 
  4064  0896                     	;# 
  4065  0897                     	;# 
  4066  0898                     	;# 
  4067  0899                     	;# 
  4068  089A                     	;# 
  4069  089B                     	;# 
  4070  090C                     	;# 
  4071  090E                     	;# 
  4072  090F                     	;# 
  4073  091F                     	;# 
  4074  091F                     	;# 
  4075  098F                     	;# 
  4076  098F                     	;# 
  4077  0990                     	;# 
  4078  0991                     	;# 
  4079  0992                     	;# 
  4080  0993                     	;# 
  4081  0994                     	;# 
  4082  0995                     	;# 
  4083  0996                     	;# 
  4084  0997                     	;# 
  4085  0E0F                     	;# 
  4086  0E10                     	;# 
  4087  0E11                     	;# 
  4088  0E12                     	;# 
  4089  0E13                     	;# 
  4090  0E14                     	;# 
  4091  0E15                     	;# 
  4092  0E16                     	;# 
  4093  0E17                     	;# 
  4094  0E18                     	;# 
  4095  0E19                     	;# 
  4096  0E1A                     	;# 
  4097  0E1B                     	;# 
  4098  0E1C                     	;# 
  4099  0E1D                     	;# 
  4100  0E1E                     	;# 
  4101  0E1F                     	;# 
  4102  0E20                     	;# 
  4103  0E21                     	;# 
  4104  0E22                     	;# 
  4105  0E23                     	;# 
  4106  0E24                     	;# 
  4107  0E25                     	;# 
  4108  0E26                     	;# 
  4109  0E27                     	;# 
  4110  0E28                     	;# 
  4111  0E29                     	;# 
  4112  0E2A                     	;# 
  4113  0E2B                     	;# 
  4114  0E2C                     	;# 
  4115  0E2D                     	;# 
  4116  0E2E                     	;# 
  4117  0E2F                     	;# 
  4118  0E30                     	;# 
  4119  0E31                     	;# 
  4120  0E32                     	;# 
  4121  0E33                     	;# 
  4122  0E34                     	;# 
  4123  0E35                     	;# 
  4124  0E36                     	;# 
  4125  0E37                     	;# 
  4126  0E8F                     	;# 
  4127  0E90                     	;# 
  4128  0E91                     	;# 
  4129  0E92                     	;# 
  4130  0E93                     	;# 
  4131  0E94                     	;# 
  4132  0E95                     	;# 
  4133  0E96                     	;# 
  4134  0E97                     	;# 
  4135  0E9C                     	;# 
  4136  0E9D                     	;# 
  4137  0E9E                     	;# 
  4138  0EA1                     	;# 
  4139  0EA2                     	;# 
  4140  0EA3                     	;# 
  4141  0EA4                     	;# 
  4142  0EA5                     	;# 
  4143  0EA9                     	;# 
  4144  0EAA                     	;# 
  4145  0EAB                     	;# 
  4146  0EAC                     	;# 
  4147  0EB1                     	;# 
  4148  0EB2                     	;# 
  4149  0EB3                     	;# 
  4150  0EB8                     	;# 
  4151  0EB9                     	;# 
  4152  0EBA                     	;# 
  4153  0EBB                     	;# 
  4154  0EBC                     	;# 
  4155  0EBD                     	;# 
  4156  0EBE                     	;# 
  4157  0EC3                     	;# 
  4158  0EC5                     	;# 
  4159  0EC6                     	;# 
  4160  0EC7                     	;# 
  4161  0EC8                     	;# 
  4162  0EC9                     	;# 
  4163  0ECA                     	;# 
  4164  0ECB                     	;# 
  4165  0ECC                     	;# 
  4166  0F10                     	;# 
  4167  0F11                     	;# 
  4168  0F12                     	;# 
  4169  0F13                     	;# 
  4170  0F14                     	;# 
  4171  0F15                     	;# 
  4172  0F16                     	;# 
  4173  0F17                     	;# 
  4174  0F18                     	;# 
  4175  0F19                     	;# 
  4176  0F1A                     	;# 
  4177  0F1B                     	;# 
  4178  0F1C                     	;# 
  4179  0F1D                     	;# 
  4180  0F1E                     	;# 
  4181  0F1F                     	;# 
  4182  0F20                     	;# 
  4183  0F21                     	;# 
  4184  0F22                     	;# 
  4185  0F23                     	;# 
  4186  0F24                     	;# 
  4187  0F25                     	;# 
  4188  0F26                     	;# 
  4189  0F27                     	;# 
  4190  0F38                     	;# 
  4191  0F39                     	;# 
  4192  0F3A                     	;# 
  4193  0F3B                     	;# 
  4194  0F3C                     	;# 
  4195  0F3D                     	;# 
  4196  0F3E                     	;# 
  4197  0F3F                     	;# 
  4198  0F40                     	;# 
  4199  0F41                     	;# 
  4200  0F43                     	;# 
  4201  0F44                     	;# 
  4202  0F45                     	;# 
  4203  0F46                     	;# 
  4204  0F47                     	;# 
  4205  0F48                     	;# 
  4206  0F49                     	;# 
  4207  0F4A                     	;# 
  4208  0F4B                     	;# 
  4209  0F4C                     	;# 
  4210  0F4E                     	;# 
  4211  0F4F                     	;# 
  4212  0F50                     	;# 
  4213  0F51                     	;# 
  4214  0F52                     	;# 
  4215  0F53                     	;# 
  4216  0F54                     	;# 
  4217  0F55                     	;# 
  4218  0F56                     	;# 
  4219  0F57                     	;# 
  4220  0F65                     	;# 
  4221  0F68                     	;# 
  4222  0F69                     	;# 
  4223  0F6A                     	;# 
  4224  0F6B                     	;# 
  4225  0FE4                     	;# 
  4226  0FE5                     	;# 
  4227  0FE6                     	;# 
  4228  0FE7                     	;# 
  4229  0FE8                     	;# 
  4230  0FE9                     	;# 
  4231  0FEA                     	;# 
  4232  0FEB                     	;# 
  4233  0FED                     	;# 
  4234  0FEE                     	;# 
  4235  0FEF                     	;# 
  4236  0000                     	;# 
  4237  0001                     	;# 
  4238  0002                     	;# 
  4239  0003                     	;# 
  4240  0004                     	;# 
  4241  0005                     	;# 
  4242  0006                     	;# 
  4243  0007                     	;# 
  4244  0008                     	;# 
  4245  0009                     	;# 
  4246  000A                     	;# 
  4247  000B                     	;# 
  4248  000C                     	;# 
  4249  000D                     	;# 
  4250  000E                     	;# 
  4251  0010                     	;# 
  4252  0011                     	;# 
  4253  0012                     	;# 
  4254  0013                     	;# 
  4255  0016                     	;# 
  4256  0017                     	;# 
  4257  0018                     	;# 
  4258  001C                     	;# 
  4259  001C                     	;# 
  4260  001D                     	;# 
  4261  001D                     	;# 
  4262  001E                     	;# 
  4263  001F                     	;# 
  4264  008C                     	;# 
  4265  008C                     	;# 
  4266  008D                     	;# 
  4267  008E                     	;# 
  4268  008E                     	;# 
  4269  008F                     	;# 
  4270  0090                     	;# 
  4271  0090                     	;# 
  4272  0091                     	;# 
  4273  0093                     	;# 
  4274  0094                     	;# 
  4275  0095                     	;# 
  4276  0096                     	;# 
  4277  0097                     	;# 
  4278  0098                     	;# 
  4279  0099                     	;# 
  4280  009A                     	;# 
  4281  009B                     	;# 
  4282  009C                     	;# 
  4283  009D                     	;# 
  4284  009E                     	;# 
  4285  010C                     	;# 
  4286  010D                     	;# 
  4287  010E                     	;# 
  4288  010E                     	;# 
  4289  010F                     	;# 
  4290  0110                     	;# 
  4291  0110                     	;# 
  4292  0111                     	;# 
  4293  0112                     	;# 
  4294  0112                     	;# 
  4295  0113                     	;# 
  4296  0114                     	;# 
  4297  0114                     	;# 
  4298  0115                     	;# 
  4299  0116                     	;# 
  4300  0116                     	;# 
  4301  0117                     	;# 
  4302  0119                     	;# 
  4303  0119                     	;# 
  4304  0119                     	;# 
  4305  011A                     	;# 
  4306  011A                     	;# 
  4307  011A                     	;# 
  4308  011B                     	;# 
  4309  011B                     	;# 
  4310  011B                     	;# 
  4311  011B                     	;# 
  4312  011B                     	;# 
  4313  011C                     	;# 
  4314  011C                     	;# 
  4315  011C                     	;# 
  4316  011D                     	;# 
  4317  011D                     	;# 
  4318  011D                     	;# 
  4319  011E                     	;# 
  4320  011E                     	;# 
  4321  011E                     	;# 
  4322  011F                     	;# 
  4323  011F                     	;# 
  4324  011F                     	;# 
  4325  011F                     	;# 
  4326  011F                     	;# 
  4327  018C                     	;# 
  4328  018D                     	;# 
  4329  018E                     	;# 
  4330  018F                     	;# 
  4331  0190                     	;# 
  4332  0191                     	;# 
  4333  0192                     	;# 
  4334  0196                     	;# 
  4335  0197                     	;# 
  4336  0198                     	;# 
  4337  0199                     	;# 
  4338  019A                     	;# 
  4339  019B                     	;# 
  4340  019C                     	;# 
  4341  020C                     	;# 
  4342  020C                     	;# 
  4343  020D                     	;# 
  4344  020E                     	;# 
  4345  020F                     	;# 
  4346  020F                     	;# 
  4347  0210                     	;# 
  4348  0210                     	;# 
  4349  0211                     	;# 
  4350  0211                     	;# 
  4351  0212                     	;# 
  4352  0212                     	;# 
  4353  0213                     	;# 
  4354  0214                     	;# 
  4355  0215                     	;# 
  4356  0215                     	;# 
  4357  0216                     	;# 
  4358  0216                     	;# 
  4359  0217                     	;# 
  4360  0217                     	;# 
  4361  0218                     	;# 
  4362  0218                     	;# 
  4363  0219                     	;# 
  4364  021A                     	;# 
  4365  021B                     	;# 
  4366  021B                     	;# 
  4367  021C                     	;# 
  4368  021C                     	;# 
  4369  021D                     	;# 
  4370  021D                     	;# 
  4371  021E                     	;# 
  4372  021F                     	;# 
  4373  028C                     	;# 
  4374  028C                     	;# 
  4375  028D                     	;# 
  4376  028D                     	;# 
  4377  028E                     	;# 
  4378  028F                     	;# 
  4379  0290                     	;# 
  4380  0290                     	;# 
  4381  0291                     	;# 
  4382  0292                     	;# 
  4383  0292                     	;# 
  4384  0293                     	;# 
  4385  0293                     	;# 
  4386  0294                     	;# 
  4387  0295                     	;# 
  4388  0296                     	;# 
  4389  0296                     	;# 
  4390  0297                     	;# 
  4391  0298                     	;# 
  4392  0298                     	;# 
  4393  0299                     	;# 
  4394  0299                     	;# 
  4395  029A                     	;# 
  4396  029B                     	;# 
  4397  029C                     	;# 
  4398  029C                     	;# 
  4399  029D                     	;# 
  4400  030C                     	;# 
  4401  030C                     	;# 
  4402  030D                     	;# 
  4403  030E                     	;# 
  4404  030F                     	;# 
  4405  0310                     	;# 
  4406  0310                     	;# 
  4407  0311                     	;# 
  4408  0312                     	;# 
  4409  0313                     	;# 
  4410  0314                     	;# 
  4411  0314                     	;# 
  4412  0315                     	;# 
  4413  0316                     	;# 
  4414  0317                     	;# 
  4415  0318                     	;# 
  4416  0318                     	;# 
  4417  0319                     	;# 
  4418  031A                     	;# 
  4419  031B                     	;# 
  4420  031C                     	;# 
  4421  031C                     	;# 
  4422  031D                     	;# 
  4423  031E                     	;# 
  4424  031F                     	;# 
  4425  038C                     	;# 
  4426  038D                     	;# 
  4427  038E                     	;# 
  4428  0390                     	;# 
  4429  0391                     	;# 
  4430  0392                     	;# 
  4431  040C                     	;# 
  4432  040D                     	;# 
  4433  040E                     	;# 
  4434  040F                     	;# 
  4435  0410                     	;# 
  4436  0411                     	;# 
  4437  0416                     	;# 
  4438  0416                     	;# 
  4439  0417                     	;# 
  4440  0418                     	;# 
  4441  0418                     	;# 
  4442  0419                     	;# 
  4443  041A                     	;# 
  4444  041A                     	;# 
  4445  041B                     	;# 
  4446  041C                     	;# 
  4447  041C                     	;# 
  4448  041D                     	;# 
  4449  041E                     	;# 
  4450  041F                     	;# 
  4451  048C                     	;# 
  4452  048C                     	;# 
  4453  048D                     	;# 
  4454  048E                     	;# 
  4455  048F                     	;# 
  4456  048F                     	;# 
  4457  0490                     	;# 
  4458  0491                     	;# 
  4459  0492                     	;# 
  4460  0492                     	;# 
  4461  0493                     	;# 
  4462  0494                     	;# 
  4463  0495                     	;# 
  4464  0495                     	;# 
  4465  0496                     	;# 
  4466  0497                     	;# 
  4467  0498                     	;# 
  4468  0499                     	;# 
  4469  049A                     	;# 
  4470  049B                     	;# 
  4471  049C                     	;# 
  4472  049D                     	;# 
  4473  050C                     	;# 
  4474  050C                     	;# 
  4475  050D                     	;# 
  4476  050E                     	;# 
  4477  050F                     	;# 
  4478  050F                     	;# 
  4479  0510                     	;# 
  4480  0511                     	;# 
  4481  0512                     	;# 
  4482  0512                     	;# 
  4483  0513                     	;# 
  4484  0514                     	;# 
  4485  0515                     	;# 
  4486  0515                     	;# 
  4487  0516                     	;# 
  4488  0517                     	;# 
  4489  0518                     	;# 
  4490  0519                     	;# 
  4491  051A                     	;# 
  4492  051B                     	;# 
  4493  051C                     	;# 
  4494  051D                     	;# 
  4495  058C                     	;# 
  4496  058C                     	;# 
  4497  058D                     	;# 
  4498  058E                     	;# 
  4499  058F                     	;# 
  4500  058F                     	;# 
  4501  0590                     	;# 
  4502  0591                     	;# 
  4503  0592                     	;# 
  4504  0593                     	;# 
  4505  060C                     	;# 
  4506  060D                     	;# 
  4507  060E                     	;# 
  4508  060F                     	;# 
  4509  0610                     	;# 
  4510  0611                     	;# 
  4511  0612                     	;# 
  4512  0613                     	;# 
  4513  0614                     	;# 
  4514  0616                     	;# 
  4515  0617                     	;# 
  4516  0618                     	;# 
  4517  0619                     	;# 
  4518  061A                     	;# 
  4519  061B                     	;# 
  4520  061C                     	;# 
  4521  061D                     	;# 
  4522  061E                     	;# 
  4523  068C                     	;# 
  4524  068D                     	;# 
  4525  068E                     	;# 
  4526  068F                     	;# 
  4527  0690                     	;# 
  4528  0691                     	;# 
  4529  0692                     	;# 
  4530  0693                     	;# 
  4531  0694                     	;# 
  4532  070C                     	;# 
  4533  070D                     	;# 
  4534  070E                     	;# 
  4535  070F                     	;# 
  4536  0710                     	;# 
  4537  0711                     	;# 
  4538  0712                     	;# 
  4539  0713                     	;# 
  4540  0714                     	;# 
  4541  0716                     	;# 
  4542  0717                     	;# 
  4543  0718                     	;# 
  4544  0719                     	;# 
  4545  071A                     	;# 
  4546  071B                     	;# 
  4547  071C                     	;# 
  4548  071D                     	;# 
  4549  071E                     	;# 
  4550  0796                     	;# 
  4551  0797                     	;# 
  4552  0798                     	;# 
  4553  0799                     	;# 
  4554  079A                     	;# 
  4555  079B                     	;# 
  4556  080C                     	;# 
  4557  080D                     	;# 
  4558  080E                     	;# 
  4559  080F                     	;# 
  4560  0810                     	;# 
  4561  0811                     	;# 
  4562  0812                     	;# 
  4563  0813                     	;# 
  4564  0814                     	;# 
  4565  081A                     	;# 
  4566  081B                     	;# 
  4567  081C                     	;# 
  4568  081D                     	;# 
  4569  081E                     	;# 
  4570  081F                     	;# 
  4571  088C                     	;# 
  4572  088D                     	;# 
  4573  088E                     	;# 
  4574  088F                     	;# 
  4575  0890                     	;# 
  4576  0891                     	;# 
  4577  0892                     	;# 
  4578  0893                     	;# 
  4579  0895                     	;# 
  4580  0896                     	;# 
  4581  0897                     	;# 
  4582  0898                     	;# 
  4583  0899                     	;# 
  4584  089A                     	;# 
  4585  089B                     	;# 
  4586  090C                     	;# 
  4587  090E                     	;# 
  4588  090F                     	;# 
  4589  091F                     	;# 
  4590  091F                     	;# 
  4591  098F                     	;# 
  4592  098F                     	;# 
  4593  0990                     	;# 
  4594  0991                     	;# 
  4595  0992                     	;# 
  4596  0993                     	;# 
  4597  0994                     	;# 
  4598  0995                     	;# 
  4599  0996                     	;# 
  4600  0997                     	;# 
  4601  0E0F                     	;# 
  4602  0E10                     	;# 
  4603  0E11                     	;# 
  4604  0E12                     	;# 
  4605  0E13                     	;# 
  4606  0E14                     	;# 
  4607  0E15                     	;# 
  4608  0E16                     	;# 
  4609  0E17                     	;# 
  4610  0E18                     	;# 
  4611  0E19                     	;# 
  4612  0E1A                     	;# 
  4613  0E1B                     	;# 
  4614  0E1C                     	;# 
  4615  0E1D                     	;# 
  4616  0E1E                     	;# 
  4617  0E1F                     	;# 
  4618  0E20                     	;# 
  4619  0E21                     	;# 
  4620  0E22                     	;# 
  4621  0E23                     	;# 
  4622  0E24                     	;# 
  4623  0E25                     	;# 
  4624  0E26                     	;# 
  4625  0E27                     	;# 
  4626  0E28                     	;# 
  4627  0E29                     	;# 
  4628  0E2A                     	;# 
  4629  0E2B                     	;# 
  4630  0E2C                     	;# 
  4631  0E2D                     	;# 
  4632  0E2E                     	;# 
  4633  0E2F                     	;# 
  4634  0E30                     	;# 
  4635  0E31                     	;# 
  4636  0E32                     	;# 
  4637  0E33                     	;# 
  4638  0E34                     	;# 
  4639  0E35                     	;# 
  4640  0E36                     	;# 
  4641  0E37                     	;# 
  4642  0E8F                     	;# 
  4643  0E90                     	;# 
  4644  0E91                     	;# 
  4645  0E92                     	;# 
  4646  0E93                     	;# 
  4647  0E94                     	;# 
  4648  0E95                     	;# 
  4649  0E96                     	;# 
  4650  0E97                     	;# 
  4651  0E9C                     	;# 
  4652  0E9D                     	;# 
  4653  0E9E                     	;# 
  4654  0EA1                     	;# 
  4655  0EA2                     	;# 
  4656  0EA3                     	;# 
  4657  0EA4                     	;# 
  4658  0EA5                     	;# 
  4659  0EA9                     	;# 
  4660  0EAA                     	;# 
  4661  0EAB                     	;# 
  4662  0EAC                     	;# 
  4663  0EB1                     	;# 
  4664  0EB2                     	;# 
  4665  0EB3                     	;# 
  4666  0EB8                     	;# 
  4667  0EB9                     	;# 
  4668  0EBA                     	;# 
  4669  0EBB                     	;# 
  4670  0EBC                     	;# 
  4671  0EBD                     	;# 
  4672  0EBE                     	;# 
  4673  0EC3                     	;# 
  4674  0EC5                     	;# 
  4675  0EC6                     	;# 
  4676  0EC7                     	;# 
  4677  0EC8                     	;# 
  4678  0EC9                     	;# 
  4679  0ECA                     	;# 
  4680  0ECB                     	;# 
  4681  0ECC                     	;# 
  4682  0F10                     	;# 
  4683  0F11                     	;# 
  4684  0F12                     	;# 
  4685  0F13                     	;# 
  4686  0F14                     	;# 
  4687  0F15                     	;# 
  4688  0F16                     	;# 
  4689  0F17                     	;# 
  4690  0F18                     	;# 
  4691  0F19                     	;# 
  4692  0F1A                     	;# 
  4693  0F1B                     	;# 
  4694  0F1C                     	;# 
  4695  0F1D                     	;# 
  4696  0F1E                     	;# 
  4697  0F1F                     	;# 
  4698  0F20                     	;# 
  4699  0F21                     	;# 
  4700  0F22                     	;# 
  4701  0F23                     	;# 
  4702  0F24                     	;# 
  4703  0F25                     	;# 
  4704  0F26                     	;# 
  4705  0F27                     	;# 
  4706  0F38                     	;# 
  4707  0F39                     	;# 
  4708  0F3A                     	;# 
  4709  0F3B                     	;# 
  4710  0F3C                     	;# 
  4711  0F3D                     	;# 
  4712  0F3E                     	;# 
  4713  0F3F                     	;# 
  4714  0F40                     	;# 
  4715  0F41                     	;# 
  4716  0F43                     	;# 
  4717  0F44                     	;# 
  4718  0F45                     	;# 
  4719  0F46                     	;# 
  4720  0F47                     	;# 
  4721  0F48                     	;# 
  4722  0F49                     	;# 
  4723  0F4A                     	;# 
  4724  0F4B                     	;# 
  4725  0F4C                     	;# 
  4726  0F4E                     	;# 
  4727  0F4F                     	;# 
  4728  0F50                     	;# 
  4729  0F51                     	;# 
  4730  0F52                     	;# 
  4731  0F53                     	;# 
  4732  0F54                     	;# 
  4733  0F55                     	;# 
  4734  0F56                     	;# 
  4735  0F57                     	;# 
  4736  0F65                     	;# 
  4737  0F68                     	;# 
  4738  0F69                     	;# 
  4739  0F6A                     	;# 
  4740  0F6B                     	;# 
  4741  0FE4                     	;# 
  4742  0FE5                     	;# 
  4743  0FE6                     	;# 
  4744  0FE7                     	;# 
  4745  0FE8                     	;# 
  4746  0FE9                     	;# 
  4747  0FEA                     	;# 
  4748  0FEB                     	;# 
  4749  0FED                     	;# 
  4750  0FEE                     	;# 
  4751  0FEF                     	;# 
  4752  0000                     	;# 
  4753  0001                     	;# 
  4754  0002                     	;# 
  4755  0003                     	;# 
  4756  0004                     	;# 
  4757  0005                     	;# 
  4758  0006                     	;# 
  4759  0007                     	;# 
  4760  0008                     	;# 
  4761  0009                     	;# 
  4762  000A                     	;# 
  4763  000B                     	;# 
  4764  000C                     	;# 
  4765  000D                     	;# 
  4766  000E                     	;# 
  4767  0010                     	;# 
  4768  0011                     	;# 
  4769  0012                     	;# 
  4770  0013                     	;# 
  4771  0016                     	;# 
  4772  0017                     	;# 
  4773  0018                     	;# 
  4774  001C                     	;# 
  4775  001C                     	;# 
  4776  001D                     	;# 
  4777  001D                     	;# 
  4778  001E                     	;# 
  4779  001F                     	;# 
  4780  008C                     	;# 
  4781  008C                     	;# 
  4782  008D                     	;# 
  4783  008E                     	;# 
  4784  008E                     	;# 
  4785  008F                     	;# 
  4786  0090                     	;# 
  4787  0090                     	;# 
  4788  0091                     	;# 
  4789  0093                     	;# 
  4790  0094                     	;# 
  4791  0095                     	;# 
  4792  0096                     	;# 
  4793  0097                     	;# 
  4794  0098                     	;# 
  4795  0099                     	;# 
  4796  009A                     	;# 
  4797  009B                     	;# 
  4798  009C                     	;# 
  4799  009D                     	;# 
  4800  009E                     	;# 
  4801  010C                     	;# 
  4802  010D                     	;# 
  4803  010E                     	;# 
  4804  010E                     	;# 
  4805  010F                     	;# 
  4806  0110                     	;# 
  4807  0110                     	;# 
  4808  0111                     	;# 
  4809  0112                     	;# 
  4810  0112                     	;# 
  4811  0113                     	;# 
  4812  0114                     	;# 
  4813  0114                     	;# 
  4814  0115                     	;# 
  4815  0116                     	;# 
  4816  0116                     	;# 
  4817  0117                     	;# 
  4818  0119                     	;# 
  4819  0119                     	;# 
  4820  0119                     	;# 
  4821  011A                     	;# 
  4822  011A                     	;# 
  4823  011A                     	;# 
  4824  011B                     	;# 
  4825  011B                     	;# 
  4826  011B                     	;# 
  4827  011B                     	;# 
  4828  011B                     	;# 
  4829  011C                     	;# 
  4830  011C                     	;# 
  4831  011C                     	;# 
  4832  011D                     	;# 
  4833  011D                     	;# 
  4834  011D                     	;# 
  4835  011E                     	;# 
  4836  011E                     	;# 
  4837  011E                     	;# 
  4838  011F                     	;# 
  4839  011F                     	;# 
  4840  011F                     	;# 
  4841  011F                     	;# 
  4842  011F                     	;# 
  4843  018C                     	;# 
  4844  018D                     	;# 
  4845  018E                     	;# 
  4846  018F                     	;# 
  4847  0190                     	;# 
  4848  0191                     	;# 
  4849  0192                     	;# 
  4850  0196                     	;# 
  4851  0197                     	;# 
  4852  0198                     	;# 
  4853  0199                     	;# 
  4854  019A                     	;# 
  4855  019B                     	;# 
  4856  019C                     	;# 
  4857  020C                     	;# 
  4858  020C                     	;# 
  4859  020D                     	;# 
  4860  020E                     	;# 
  4861  020F                     	;# 
  4862  020F                     	;# 
  4863  0210                     	;# 
  4864  0210                     	;# 
  4865  0211                     	;# 
  4866  0211                     	;# 
  4867  0212                     	;# 
  4868  0212                     	;# 
  4869  0213                     	;# 
  4870  0214                     	;# 
  4871  0215                     	;# 
  4872  0215                     	;# 
  4873  0216                     	;# 
  4874  0216                     	;# 
  4875  0217                     	;# 
  4876  0217                     	;# 
  4877  0218                     	;# 
  4878  0218                     	;# 
  4879  0219                     	;# 
  4880  021A                     	;# 
  4881  021B                     	;# 
  4882  021B                     	;# 
  4883  021C                     	;# 
  4884  021C                     	;# 
  4885  021D                     	;# 
  4886  021D                     	;# 
  4887  021E                     	;# 
  4888  021F                     	;# 
  4889  028C                     	;# 
  4890  028C                     	;# 
  4891  028D                     	;# 
  4892  028D                     	;# 
  4893  028E                     	;# 
  4894  028F                     	;# 
  4895  0290                     	;# 
  4896  0290                     	;# 
  4897  0291                     	;# 
  4898  0292                     	;# 
  4899  0292                     	;# 
  4900  0293                     	;# 
  4901  0293                     	;# 
  4902  0294                     	;# 
  4903  0295                     	;# 
  4904  0296                     	;# 
  4905  0296                     	;# 
  4906  0297                     	;# 
  4907  0298                     	;# 
  4908  0298                     	;# 
  4909  0299                     	;# 
  4910  0299                     	;# 
  4911  029A                     	;# 
  4912  029B                     	;# 
  4913  029C                     	;# 
  4914  029C                     	;# 
  4915  029D                     	;# 
  4916  030C                     	;# 
  4917  030C                     	;# 
  4918  030D                     	;# 
  4919  030E                     	;# 
  4920  030F                     	;# 
  4921  0310                     	;# 
  4922  0310                     	;# 
  4923  0311                     	;# 
  4924  0312                     	;# 
  4925  0313                     	;# 
  4926  0314                     	;# 
  4927  0314                     	;# 
  4928  0315                     	;# 
  4929  0316                     	;# 
  4930  0317                     	;# 
  4931  0318                     	;# 
  4932  0318                     	;# 
  4933  0319                     	;# 
  4934  031A                     	;# 
  4935  031B                     	;# 
  4936  031C                     	;# 
  4937  031C                     	;# 
  4938  031D                     	;# 
  4939  031E                     	;# 
  4940  031F                     	;# 
  4941  038C                     	;# 
  4942  038D                     	;# 
  4943  038E                     	;# 
  4944  0390                     	;# 
  4945  0391                     	;# 
  4946  0392                     	;# 
  4947  040C                     	;# 
  4948  040D                     	;# 
  4949  040E                     	;# 
  4950  040F                     	;# 
  4951  0410                     	;# 
  4952  0411                     	;# 
  4953  0416                     	;# 
  4954  0416                     	;# 
  4955  0417                     	;# 
  4956  0418                     	;# 
  4957  0418                     	;# 
  4958  0419                     	;# 
  4959  041A                     	;# 
  4960  041A                     	;# 
  4961  041B                     	;# 
  4962  041C                     	;# 
  4963  041C                     	;# 
  4964  041D                     	;# 
  4965  041E                     	;# 
  4966  041F                     	;# 
  4967  048C                     	;# 
  4968  048C                     	;# 
  4969  048D                     	;# 
  4970  048E                     	;# 
  4971  048F                     	;# 
  4972  048F                     	;# 
  4973  0490                     	;# 
  4974  0491                     	;# 
  4975  0492                     	;# 
  4976  0492                     	;# 
  4977  0493                     	;# 
  4978  0494                     	;# 
  4979  0495                     	;# 
  4980  0495                     	;# 
  4981  0496                     	;# 
  4982  0497                     	;# 
  4983  0498                     	;# 
  4984  0499                     	;# 
  4985  049A                     	;# 
  4986  049B                     	;# 
  4987  049C                     	;# 
  4988  049D                     	;# 
  4989  050C                     	;# 
  4990  050C                     	;# 
  4991  050D                     	;# 
  4992  050E                     	;# 
  4993  050F                     	;# 
  4994  050F                     	;# 
  4995  0510                     	;# 
  4996  0511                     	;# 
  4997  0512                     	;# 
  4998  0512                     	;# 
  4999  0513                     	;# 
  5000  0514                     	;# 
  5001  0515                     	;# 
  5002  0515                     	;# 
  5003  0516                     	;# 
  5004  0517                     	;# 
  5005  0518                     	;# 
  5006  0519                     	;# 
  5007  051A                     	;# 
  5008  051B                     	;# 
  5009  051C                     	;# 
  5010  051D                     	;# 
  5011  058C                     	;# 
  5012  058C                     	;# 
  5013  058D                     	;# 
  5014  058E                     	;# 
  5015  058F                     	;# 
  5016  058F                     	;# 
  5017  0590                     	;# 
  5018  0591                     	;# 
  5019  0592                     	;# 
  5020  0593                     	;# 
  5021  060C                     	;# 
  5022  060D                     	;# 
  5023  060E                     	;# 
  5024  060F                     	;# 
  5025  0610                     	;# 
  5026  0611                     	;# 
  5027  0612                     	;# 
  5028  0613                     	;# 
  5029  0614                     	;# 
  5030  0616                     	;# 
  5031  0617                     	;# 
  5032  0618                     	;# 
  5033  0619                     	;# 
  5034  061A                     	;# 
  5035  061B                     	;# 
  5036  061C                     	;# 
  5037  061D                     	;# 
  5038  061E                     	;# 
  5039  068C                     	;# 
  5040  068D                     	;# 
  5041  068E                     	;# 
  5042  068F                     	;# 
  5043  0690                     	;# 
  5044  0691                     	;# 
  5045  0692                     	;# 
  5046  0693                     	;# 
  5047  0694                     	;# 
  5048  070C                     	;# 
  5049  070D                     	;# 
  5050  070E                     	;# 
  5051  070F                     	;# 
  5052  0710                     	;# 
  5053  0711                     	;# 
  5054  0712                     	;# 
  5055  0713                     	;# 
  5056  0714                     	;# 
  5057  0716                     	;# 
  5058  0717                     	;# 
  5059  0718                     	;# 
  5060  0719                     	;# 
  5061  071A                     	;# 
  5062  071B                     	;# 
  5063  071C                     	;# 
  5064  071D                     	;# 
  5065  071E                     	;# 
  5066  0796                     	;# 
  5067  0797                     	;# 
  5068  0798                     	;# 
  5069  0799                     	;# 
  5070  079A                     	;# 
  5071  079B                     	;# 
  5072  080C                     	;# 
  5073  080D                     	;# 
  5074  080E                     	;# 
  5075  080F                     	;# 
  5076  0810                     	;# 
  5077  0811                     	;# 
  5078  0812                     	;# 
  5079  0813                     	;# 
  5080  0814                     	;# 
  5081  081A                     	;# 
  5082  081B                     	;# 
  5083  081C                     	;# 
  5084  081D                     	;# 
  5085  081E                     	;# 
  5086  081F                     	;# 
  5087  088C                     	;# 
  5088  088D                     	;# 
  5089  088E                     	;# 
  5090  088F                     	;# 
  5091  0890                     	;# 
  5092  0891                     	;# 
  5093  0892                     	;# 
  5094  0893                     	;# 
  5095  0895                     	;# 
  5096  0896                     	;# 
  5097  0897                     	;# 
  5098  0898                     	;# 
  5099  0899                     	;# 
  5100  089A                     	;# 
  5101  089B                     	;# 
  5102  090C                     	;# 
  5103  090E                     	;# 
  5104  090F                     	;# 
  5105  091F                     	;# 
  5106  091F                     	;# 
  5107  098F                     	;# 
  5108  098F                     	;# 
  5109  0990                     	;# 
  5110  0991                     	;# 
  5111  0992                     	;# 
  5112  0993                     	;# 
  5113  0994                     	;# 
  5114  0995                     	;# 
  5115  0996                     	;# 
  5116  0997                     	;# 
  5117  0E0F                     	;# 
  5118  0E10                     	;# 
  5119  0E11                     	;# 
  5120  0E12                     	;# 
  5121  0E13                     	;# 
  5122  0E14                     	;# 
  5123  0E15                     	;# 
  5124  0E16                     	;# 
  5125  0E17                     	;# 
  5126  0E18                     	;# 
  5127  0E19                     	;# 
  5128  0E1A                     	;# 
  5129  0E1B                     	;# 
  5130  0E1C                     	;# 
  5131  0E1D                     	;# 
  5132  0E1E                     	;# 
  5133  0E1F                     	;# 
  5134  0E20                     	;# 
  5135  0E21                     	;# 
  5136  0E22                     	;# 
  5137  0E23                     	;# 
  5138  0E24                     	;# 
  5139  0E25                     	;# 
  5140  0E26                     	;# 
  5141  0E27                     	;# 
  5142  0E28                     	;# 
  5143  0E29                     	;# 
  5144  0E2A                     	;# 
  5145  0E2B                     	;# 
  5146  0E2C                     	;# 
  5147  0E2D                     	;# 
  5148  0E2E                     	;# 
  5149  0E2F                     	;# 
  5150  0E30                     	;# 
  5151  0E31                     	;# 
  5152  0E32                     	;# 
  5153  0E33                     	;# 
  5154  0E34                     	;# 
  5155  0E35                     	;# 
  5156  0E36                     	;# 
  5157  0E37                     	;# 
  5158  0E8F                     	;# 
  5159  0E90                     	;# 
  5160  0E91                     	;# 
  5161  0E92                     	;# 
  5162  0E93                     	;# 
  5163  0E94                     	;# 
  5164  0E95                     	;# 
  5165  0E96                     	;# 
  5166  0E97                     	;# 
  5167  0E9C                     	;# 
  5168  0E9D                     	;# 
  5169  0E9E                     	;# 
  5170  0EA1                     	;# 
  5171  0EA2                     	;# 
  5172  0EA3                     	;# 
  5173  0EA4                     	;# 
  5174  0EA5                     	;# 
  5175  0EA9                     	;# 
  5176  0EAA                     	;# 
  5177  0EAB                     	;# 
  5178  0EAC                     	;# 
  5179  0EB1                     	;# 
  5180  0EB2                     	;# 
  5181  0EB3                     	;# 
  5182  0EB8                     	;# 
  5183  0EB9                     	;# 
  5184  0EBA                     	;# 
  5185  0EBB                     	;# 
  5186  0EBC                     	;# 
  5187  0EBD                     	;# 
  5188  0EBE                     	;# 
  5189  0EC3                     	;# 
  5190  0EC5                     	;# 
  5191  0EC6                     	;# 
  5192  0EC7                     	;# 
  5193  0EC8                     	;# 
  5194  0EC9                     	;# 
  5195  0ECA                     	;# 
  5196  0ECB                     	;# 
  5197  0ECC                     	;# 
  5198  0F10                     	;# 
  5199  0F11                     	;# 
  5200  0F12                     	;# 
  5201  0F13                     	;# 
  5202  0F14                     	;# 
  5203  0F15                     	;# 
  5204  0F16                     	;# 
  5205  0F17                     	;# 
  5206  0F18                     	;# 
  5207  0F19                     	;# 
  5208  0F1A                     	;# 
  5209  0F1B                     	;# 
  5210  0F1C                     	;# 
  5211  0F1D                     	;# 
  5212  0F1E                     	;# 
  5213  0F1F                     	;# 
  5214  0F20                     	;# 
  5215  0F21                     	;# 
  5216  0F22                     	;# 
  5217  0F23                     	;# 
  5218  0F24                     	;# 
  5219  0F25                     	;# 
  5220  0F26                     	;# 
  5221  0F27                     	;# 
  5222  0F38                     	;# 
  5223  0F39                     	;# 
  5224  0F3A                     	;# 
  5225  0F3B                     	;# 
  5226  0F3C                     	;# 
  5227  0F3D                     	;# 
  5228  0F3E                     	;# 
  5229  0F3F                     	;# 
  5230  0F40                     	;# 
  5231  0F41                     	;# 
  5232  0F43                     	;# 
  5233  0F44                     	;# 
  5234  0F45                     	;# 
  5235  0F46                     	;# 
  5236  0F47                     	;# 
  5237  0F48                     	;# 
  5238  0F49                     	;# 
  5239  0F4A                     	;# 
  5240  0F4B                     	;# 
  5241  0F4C                     	;# 
  5242  0F4E                     	;# 
  5243  0F4F                     	;# 
  5244  0F50                     	;# 
  5245  0F51                     	;# 
  5246  0F52                     	;# 
  5247  0F53                     	;# 
  5248  0F54                     	;# 
  5249  0F55                     	;# 
  5250  0F56                     	;# 
  5251  0F57                     	;# 
  5252  0F65                     	;# 
  5253  0F68                     	;# 
  5254  0F69                     	;# 
  5255  0F6A                     	;# 
  5256  0F6B                     	;# 
  5257  0FE4                     	;# 
  5258  0FE5                     	;# 
  5259  0FE6                     	;# 
  5260  0FE7                     	;# 
  5261  0FE8                     	;# 
  5262  0FE9                     	;# 
  5263  0FEA                     	;# 
  5264  0FEB                     	;# 
  5265  0FED                     	;# 
  5266  0FEE                     	;# 
  5267  0FEF                     	;_samples
  5268                           
  5269                           	psect	idataBANK0
  5270  0006                     __pidataBANK0:	
  5271                           
  5272                           ;initializer for _batteryTemp
  5273  0006  34FA               	retlw	250
  5274  0007  3400               	retlw	0
  5275                           
  5276                           	psect	idataBANK2
  5277  1246                     __pidataBANK2:	
  5278                           
  5279                           ;initializer for _channels
  5280  1246  3414               	retlw	20
  5281  1247  3400               	retlw	0
  5282  1248  3410               	retlw	16
  5283  1249  3400               	retlw	0
  5284  124A  3416               	retlw	22
  5285  124B  3400               	retlw	0
  5286  124C  3412               	retlw	18
  5287  124D  3400               	retlw	0
  5288                           
  5289                           	psect	stringtext1
  5290  1000                     __pstringtext1:	
  5291  1000                     _fonts:	
  5292  1000  3400               	retlw	0
  5293  1001  3400               	retlw	0
  5294  1002  3400               	retlw	0
  5295  1003  3400               	retlw	0
  5296  1004  344E               	retlw	78
  5297  1005  3400               	retlw	0
  5298  1006  3406               	retlw	6
  5299  1007  3400               	retlw	0
  5300  1008  3406               	retlw	6
  5301  1009  34FF               	retlw	255
  5302  100A  34FF               	retlw	255
  5303  100B  34FF               	retlw	255
  5304  100C  3448               	retlw	72
  5305  100D  34D6               	retlw	214
  5306  100E  3424               	retlw	36
  5307  100F  3412               	retlw	18
  5308  1010  3408               	retlw	8
  5309  1011  3424               	retlw	36
  5310  1012  34FF               	retlw	255
  5311  1013  34FF               	retlw	255
  5312  1014  34FF               	retlw	255
  5313  1015  3400               	retlw	0
  5314  1016  3406               	retlw	6
  5315  1017  3400               	retlw	0
  5316  1018  3438               	retlw	56
  5317  1019  3444               	retlw	68
  5318  101A  3482               	retlw	130
  5319  101B  3482               	retlw	130
  5320  101C  3444               	retlw	68
  5321  101D  3438               	retlw	56
  5322  101E  3414               	retlw	20
  5323  101F  3408               	retlw	8
  5324  1020  343E               	retlw	62
  5325  1021  3410               	retlw	16
  5326  1022  3438               	retlw	56
  5327  1023  3410               	retlw	16
  5328  1024  34A0               	retlw	160
  5329  1025  3460               	retlw	96
  5330  1026  3400               	retlw	0
  5331  1027  3410               	retlw	16
  5332  1028  3410               	retlw	16
  5333  1029  3410               	retlw	16
  5334  102A  3460               	retlw	96
  5335  102B  3460               	retlw	96
  5336  102C  3400               	retlw	0
  5337  102D  3460               	retlw	96
  5338  102E  3418               	retlw	24
  5339  102F  3406               	retlw	6
  5340  1030  347C               	retlw	124
  5341  1031  3442               	retlw	66
  5342  1032  347C               	retlw	124
  5343  1033  3444               	retlw	68
  5344  1034  347E               	retlw	126
  5345  1035  3440               	retlw	64
  5346  1036  3464               	retlw	100
  5347  1037  3452               	retlw	82
  5348  1038  344C               	retlw	76
  5349  1039  344A               	retlw	74
  5350  103A  344A               	retlw	74
  5351  103B  3434               	retlw	52
  5352  103C  3438               	retlw	56
  5353  103D  3424               	retlw	36
  5354  103E  347E               	retlw	126
  5355  103F  344E               	retlw	78
  5356  1040  344A               	retlw	74
  5357  1041  3432               	retlw	50
  5358  1042  343C               	retlw	60
  5359  1043  344A               	retlw	74
  5360  1044  3432               	retlw	50
  5361  1045  3462               	retlw	98
  5362  1046  341A               	retlw	26
  5363  1047  3406               	retlw	6
  5364  1048  3476               	retlw	118
  5365  1049  344A               	retlw	74
  5366  104A  3476               	retlw	118
  5367  104B  344C               	retlw	76
  5368  104C  3452               	retlw	82
  5369  104D  343C               	retlw	60
  5370  104E  346C               	retlw	108
  5371  104F  346C               	retlw	108
  5372  1050  3400               	retlw	0
  5373  1051  34AC               	retlw	172
  5374  1052  346C               	retlw	108
  5375  1053  3400               	retlw	0
  5376  1054  3410               	retlw	16
  5377  1055  3428               	retlw	40
  5378  1056  3444               	retlw	68
  5379  1057  3428               	retlw	40
  5380  1058  3428               	retlw	40
  5381  1059  3428               	retlw	40
  5382  105A  3444               	retlw	68
  5383  105B  3428               	retlw	40
  5384  105C  3410               	retlw	16
  5385  105D  3402               	retlw	2
  5386  105E  3459               	retlw	89
  5387  105F  3406               	retlw	6
  5388  1060  34FF               	retlw	255
  5389  1061  34FF               	retlw	255
  5390  1062  34FF               	retlw	255
  5391  1063  347C               	retlw	124
  5392  1064  3412               	retlw	18
  5393  1065  347C               	retlw	124
  5394  1066  347E               	retlw	126
  5395  1067  345A               	retlw	90
  5396  1068  3434               	retlw	52
  5397  1069  343C               	retlw	60
  5398  106A  3442               	retlw	66
  5399  106B  3442               	retlw	66
  5400  106C  347E               	retlw	126
  5401  106D  3442               	retlw	66
  5402  106E  343C               	retlw	60
  5403  106F  347E               	retlw	126
  5404  1070  344A               	retlw	74
  5405  1071  3442               	retlw	66
  5406  1072  347E               	retlw	126
  5407  1073  340A               	retlw	10
  5408  1074  340A               	retlw	10
  5409  1075  343C               	retlw	60
  5410  1076  3452               	retlw	82
  5411  1077  3434               	retlw	52
  5412  1078  347E               	retlw	126
  5413  1079  3408               	retlw	8
  5414  107A  347E               	retlw	126
  5415  107B  3442               	retlw	66
  5416  107C  347E               	retlw	126
  5417  107D  3442               	retlw	66
  5418  107E  3430               	retlw	48
  5419  107F  3440               	retlw	64
  5420  1080  343E               	retlw	62
  5421  1081  347E               	retlw	126
  5422  1082  3418               	retlw	24
  5423  1083  3466               	retlw	102
  5424  1084  347E               	retlw	126
  5425  1085  3440               	retlw	64
  5426  1086  3440               	retlw	64
  5427  1087  347E               	retlw	126
  5428  1088  341C               	retlw	28
  5429  1089  347E               	retlw	126
  5430  108A  347E               	retlw	126
  5431  108B  3402               	retlw	2
  5432  108C  347E               	retlw	126
  5433  108D  343C               	retlw	60
  5434  108E  3442               	retlw	66
  5435  108F  343C               	retlw	60
  5436  1090  347E               	retlw	126
  5437  1091  3412               	retlw	18
  5438  1092  340C               	retlw	12
  5439  1093  347E               	retlw	126
  5440  1094  3462               	retlw	98
  5441  1095  34FE               	retlw	254
  5442  1096  347E               	retlw	126
  5443  1097  3432               	retlw	50
  5444  1098  344E               	retlw	78
  5445  1099  3444               	retlw	68
  5446  109A  344A               	retlw	74
  5447  109B  3432               	retlw	50
  5448  109C  3402               	retlw	2
  5449  109D  347E               	retlw	126
  5450  109E  3402               	retlw	2
  5451  109F  347E               	retlw	126
  5452  10A0  3440               	retlw	64
  5453  10A1  347E               	retlw	126
  5454  10A2  343E               	retlw	62
  5455  10A3  3440               	retlw	64
  5456  10A4  343E               	retlw	62
  5457  10A5  347E               	retlw	126
  5458  10A6  3438               	retlw	56
  5459  10A7  347E               	retlw	126
  5460  10A8  3466               	retlw	102
  5461  10A9  3418               	retlw	24
  5462  10AA  3466               	retlw	102
  5463  10AB  340E               	retlw	14
  5464  10AC  3470               	retlw	112
  5465  10AD  340E               	retlw	14
  5466  10AE  3462               	retlw	98
  5467  10AF  345A               	retlw	90
  5468  10B0  3446               	retlw	70
  5469  10B1  3400               	retlw	0
  5470  10B2  347E               	retlw	126
  5471  10B3  3442               	retlw	66
  5472  10B4  3406               	retlw	6
  5473  10B5  3418               	retlw	24
  5474  10B6  3460               	retlw	96
  5475  10B7  3442               	retlw	66
  5476  10B8  347E               	retlw	126
  5477  10B9  3400               	retlw	0
  5478  10BA  3404               	retlw	4
  5479  10BB  3402               	retlw	2
  5480  10BC  3404               	retlw	4
  5481  10BD  3440               	retlw	64
  5482  10BE  3440               	retlw	64
  5483  10BF  3440               	retlw	64
  5484  10C0  3400               	retlw	0
  5485  10C1  3402               	retlw	2
  5486  10C2  3404               	retlw	4
  5487  10C3  3474               	retlw	116
  5488  10C4  3454               	retlw	84
  5489  10C5  3478               	retlw	120
  5490  10C6  347E               	retlw	126
  5491  10C7  3448               	retlw	72
  5492  10C8  3430               	retlw	48
  5493  10C9  3430               	retlw	48
  5494  10CA  3448               	retlw	72
  5495  10CB  3448               	retlw	72
  5496  10CC  3430               	retlw	48
  5497  10CD  3448               	retlw	72
  5498  10CE  347E               	retlw	126
  5499  10CF  3438               	retlw	56
  5500  10D0  3454               	retlw	84
  5501  10D1  3458               	retlw	88
  5502  10D2  347C               	retlw	124
  5503  10D3  340A               	retlw	10
  5504  10D4  3402               	retlw	2
  5505  10D5  3498               	retlw	152
  5506  10D6  34A4               	retlw	164
  5507  10D7  347C               	retlw	124
  5508  10D8  347E               	retlw	126
  5509  10D9  3408               	retlw	8
  5510  10DA  3470               	retlw	112
  5511  10DB  3448               	retlw	72
  5512  10DC  347A               	retlw	122
  5513  10DD  3440               	retlw	64
  5514  10DE  3488               	retlw	136
  5515  10DF  34FA               	retlw	250
  5516  10E0  3400               	retlw	0
  5517  10E1  347E               	retlw	126
  5518  10E2  3418               	retlw	24
  5519  10E3  3464               	retlw	100
  5520  10E4  3442               	retlw	66
  5521  10E5  347E               	retlw	126
  5522  10E6  3440               	retlw	64
  5523  10E7  347C               	retlw	124
  5524  10E8  3438               	retlw	56
  5525  10E9  347C               	retlw	124
  5526  10EA  347C               	retlw	124
  5527  10EB  3404               	retlw	4
  5528  10EC  3478               	retlw	120
  5529  10ED  3438               	retlw	56
  5530  10EE  3444               	retlw	68
  5531  10EF  3438               	retlw	56
  5532  10F0  34FC               	retlw	252
  5533  10F1  3424               	retlw	36
  5534  10F2  3418               	retlw	24
  5535  10F3  3418               	retlw	24
  5536  10F4  3424               	retlw	36
  5537  10F5  34FC               	retlw	252
  5538  10F6  3478               	retlw	120
  5539  10F7  3404               	retlw	4
  5540  10F8  3404               	retlw	4
  5541  10F9  3448               	retlw	72
  5542  10FA  3454               	retlw	84
  5543  10FB  3424               	retlw	36
  5544  10FC  3404               	retlw	4
  5545  10FD  343E               	retlw	62
  5546  10FE  3444               	retlw	68
  5547  10FF  347C               	retlw	124
  5548  1100  3440               	retlw	64
  5549  1101  347C               	retlw	124
  5550  1102  343C               	retlw	60
  5551  1103  3440               	retlw	64
  5552  1104  343C               	retlw	60
  5553  1105  347C               	retlw	124
  5554  1106  3430               	retlw	48
  5555  1107  347C               	retlw	124
  5556  1108  346C               	retlw	108
  5557  1109  3410               	retlw	16
  5558  110A  346C               	retlw	108
  5559  110B  349C               	retlw	156
  5560  110C  34A0               	retlw	160
  5561  110D  347C               	retlw	124
  5562  110E  3464               	retlw	100
  5563  110F  3454               	retlw	84
  5564  1110  344C               	retlw	76
  5565  1111  340C               	retlw	12
  5566  1112  3412               	retlw	18
  5567  1113  340C               	retlw	12
  5568  1114  34FF               	retlw	255
  5569  1115  34FF               	retlw	255
  5570  1116  34FF               	retlw	255
  5571  1117  34FF               	retlw	255
  5572  1118  34FF               	retlw	255
  5573  1119  34FF               	retlw	255
  5574  111A  34FF               	retlw	255
  5575  111B  34FF               	retlw	255
  5576  111C  34FF               	retlw	255
  5577  111D  34FF               	retlw	255
  5578  111E  34FF               	retlw	255
  5579  111F  34FF               	retlw	255
  5580  1120  34FF               	retlw	255
  5581  1121  34FF               	retlw	255
  5582  1122  34FF               	retlw	255
  5583  1123  34FF               	retlw	255
  5584  1124  34FF               	retlw	255
  5585  1125  34FF               	retlw	255
  5586  1126  34FC               	retlw	252
  5587  1127  3440               	retlw	64
  5588  1128  347C               	retlw	124
  5589  1129  34FF               	retlw	255
  5590  112A  34FF               	retlw	255
  5591  112B  34FF               	retlw	255
  5592  112C  34FF               	retlw	255
  5593  112D  34FF               	retlw	255
  5594  112E  34FF               	retlw	255
  5595  112F                     __end_of_fonts:	
  5596                           
  5597                           	psect	stringtext2
  5598  1800                     __pstringtext2:	
  5599  1800                     log@coeff:	
  5600  1800  3400               	retlw	0
  5601  1801  3400               	retlw	0
  5602  1802  3400               	retlw	0
  5603  1803  3400               	retlw	0
  5604  1804  3480               	retlw	128
  5605  1805  343F               	retlw	63
  5606  1806  34F0               	retlw	240
  5607  1807  34FF               	retlw	255
  5608  1808  34BE               	retlw	190
  5609  1809  34E2               	retlw	226
  5610  180A  34A9               	retlw	169
  5611  180B  343E               	retlw	62
  5612  180C  3483               	retlw	131
  5613  180D  3476               	retlw	118
  5614  180E  34BE               	retlw	190
  5615  180F  34AE               	retlw	174
  5616  1810  342B               	retlw	43
  5617  1811  343E               	retlw	62
  5618  1812  343C               	retlw	60
  5619  1813  34C3               	retlw	195
  5620  1814  34BD               	retlw	189
  5621  1815  34D2               	retlw	210
  5622  1816  3413               	retlw	19
  5623  1817  343D               	retlw	61
  5624  1818  3478               	retlw	120
  5625  1819  34D3               	retlw	211
  5626  181A  34BB               	retlw	187
  5627  181B                     __end_oflog@coeff:	
  5628  0013                     _TRISC	set	19
  5629  0012                     _TRISB	set	18
  5630  0011                     _TRISA	set	17
  5631  0018                     _LATC	set	24
  5632  0017                     _LATB	set	23
  5633  0016                     _LATA	set	22
  5634  0016                     _LATAbits	set	22
  5635  0011                     _TRISAbits	set	17
  5636  00B5                     _LATA5	set	181
  5637  006A                     _RB2	set	106
  5638  005F                     _GIE	set	95
  5639  0093                     _ADCON0	set	147
  5640  009D                     _ADACQ	set	157
  5641  009C                     _ADPRE	set	156
  5642  009B                     _ADCAP	set	155
  5643  009A                     _ADREF	set	154
  5644  0098                     _ADCLK	set	152
  5645  0097                     _ADSTAT	set	151
  5646  0099                     _ADACT	set	153
  5647  0096                     _ADCON3	set	150
  5648  0095                     _ADCON2	set	149
  5649  0094                     _ADCON1	set	148
  5650  008C                     _ADRESL	set	140
  5651  008D                     _ADRESH	set	141
  5652  0093                     _ADCON0bits	set	147
  5653  009E                     _ADPCH	set	158
  5654  0113                     _ADSTPTH	set	275
  5655  0112                     _ADSTPTL	set	274
  5656  0111                     _ADUTHH	set	273
  5657  0110                     _ADUTHL	set	272
  5658  010F                     _ADLTHH	set	271
  5659  010E                     _ADLTHL	set	270
  5660  010D                     _ADRPT	set	269
  5661  021E                     _CCPTMRS0bits	set	542
  5662  021F                     _CCPTMRS1bits	set	543
  5663  0294                     _T4CONbits	set	660
  5664  0292                     _T4TMR	set	658
  5665  0293                     _T4PR	set	659
  5666  0297                     _T4RST	set	663
  5667  0295                     _T4HLT	set	661
  5668  0296                     _T4CLKCON	set	662
  5669  0294                     _T4CON	set	660
  5670  028E                     _T2CONbits	set	654
  5671  028C                     _T2TMR	set	652
  5672  028D                     _T2PR	set	653
  5673  0291                     _T2RST	set	657
  5674  028F                     _T2HLT	set	655
  5675  0290                     _T2CLKCON	set	656
  5676  028E                     _T2CON	set	654
  5677  030C                     _CCPR1L	set	780
  5678  030D                     _CCPR1H	set	781
  5679  030E                     _CCP1CONbits	set	782
  5680  0390                     _PWM7DCL	set	912
  5681  0391                     _PWM7DCH	set	913
  5682  0392                     _PWM7CON	set	914
  5683  038C                     _PWM6DCL	set	908
  5684  038D                     _PWM6DCH	set	909
  5685  038E                     _PWM6CON	set	910
  5686  0710                     _PIR4bits	set	1808
  5687  0716                     _PIE0bits	set	1814
  5688  0892                     _OSCTUNE	set	2194
  5689  0893                     _OSCFRQ	set	2195
  5690  0891                     _OSCEN	set	2193
  5691  088F                     _OSCCON3	set	2191
  5692  088D                     _OSCCON1	set	2189
  5693  090C                     _FVRCON	set	2316
  5694  0E8F                     _PPSLOCKbits	set	3727
  5695  0E8F                     _PPSLOCK	set	3727
  5696  0F1D                     _RB5PPS	set	3869
  5697  0F17                     _RA7PPS	set	3863
  5698  0F16                     _RA6PPS	set	3862
  5699  0F4E                     _ANSELC	set	3918
  5700  0F43                     _ANSELB	set	3907
  5701  0F38                     _ANSELA	set	3896
  5702  0F65                     _WPUE	set	3941
  5703  0F4F                     _WPUC	set	3919
  5704  0F44                     _WPUB	set	3908
  5705  0F39                     _WPUA	set	3897
  5706  181B                     STR_3:	
  5707  181B  3452               	retlw	82	;'R'
  5708  181C  3465               	retlw	101	;'e'
  5709  181D  3466               	retlw	102	;'f'
  5710  181E  343A               	retlw	58	;':'
  5711  181F  3400               	retlw	0
  5712                           
  5713                           	psect	stringtext3
  5714  1820                     __pstringtext3:	
  5715  1820                     STR_2:	
  5716  1820  344F               	retlw	79	;'O'
  5717  1821  3475               	retlw	117	;'u'
  5718  1822  3474               	retlw	116	;'t'
  5719  1823  343A               	retlw	58	;':'
  5720  1824  3400               	retlw	0
  5721                           
  5722                           	psect	stringtext4
  5723  1825                     __pstringtext4:	
  5724  1825                     STR_1:	
  5725  1825  3449               	retlw	73	;'I'
  5726  1826  346E               	retlw	110	;'n'
  5727  1827  343A               	retlw	58	;':'
  5728  1828  3400               	retlw	0
  5729                           
  5730                           	psect	stringtext5
  5731  0000                     __pstringtext5:	
  5732                           
  5733                           ; #config settings
  5734  0000                     
  5735                           	psect	cinit
  5736  07B5                     start_initialization:	
  5737  07B5                     __initialization:		;BIGRAM
  5738                           
  5739                           ; Initialize objects allocated to BANK0
  5740  07B5  3180  2006  3187   	fcall	__pidataBANK0	;fetch initializer
  5741  07B8  00EC               	movwf	__pdataBANK0& (0+127)
  5742  07B9  3180  2007  3187   	fcall	__pidataBANK0+1	;fetch initializer
  5743  07BC  00ED               	movwf	(__pdataBANK0+1)& (0+127)
  5744                           
  5745                           ; Initialize objects allocated to BANK2
  5746  07BD  3046               	movlw	low __pidataBANK2
  5747  07BE  0084               	movwf	4
  5748  07BF  3092               	movlw	(high __pidataBANK2)| (0+128)
  5749  07C0  0085               	movwf	5
  5750  07C1  0022               	movlb	2	; select bank2
  5751  07C2  0012               	moviw fsr0++
  5752  07C3  00B5               	movwf	__pdataBANK2& (0+127)
  5753  07C4  0012               	moviw fsr0++
  5754  07C5  00B6               	movwf	(__pdataBANK2+1)& (0+127)
  5755  07C6  0012               	moviw fsr0++
  5756  07C7  00B7               	movwf	(__pdataBANK2+2)& (0+127)
  5757  07C8  0012               	moviw fsr0++
  5758  07C9  00B8               	movwf	(__pdataBANK2+3)& (0+127)
  5759  07CA  0012               	moviw fsr0++
  5760  07CB  00B9               	movwf	(__pdataBANK2+4)& (0+127)
  5761  07CC  0012               	moviw fsr0++
  5762  07CD  00BA               	movwf	(__pdataBANK2+5)& (0+127)
  5763  07CE  0012               	moviw fsr0++
  5764  07CF  00BB               	movwf	(__pdataBANK2+6)& (0+127)
  5765  07D0  0012               	moviw fsr0++
  5766  07D1  00BC               	movwf	(__pdataBANK2+7)& (0+127)
  5767                           
  5768                           ; Clear objects allocated to BIGRAM
  5769  07D2  3060               	movlw	low (0+8800)
  5770  07D3  0084               	movwf	4
  5771  07D4  3022               	movlw	high (0+8800)
  5772  07D5  0085               	movwf	5
  5773  07D6  3090               	movlw	144
  5774  07D7  00FE               	movwf	btemp
  5775  07D8  3001               	movlw	1
  5776  07D9  00FF               	movwf	btemp+1
  5777  07DA  3192  2257  3187   	fcall	clear_ram0
  5778                           
  5779                           ; Clear objects allocated to BANK0
  5780  07DD  305A               	movlw	low __pbssBANK0
  5781  07DE  0084               	movwf	4
  5782  07DF  3000               	movlw	high __pbssBANK0
  5783  07E0  0085               	movwf	5
  5784  07E1  3012               	movlw	18
  5785  07E2  00FE               	movwf	btemp
  5786  07E3  3000               	movlw	0
  5787  07E4  00FF               	movwf	btemp+1
  5788  07E5  3192  2257  3187   	fcall	clear_ram0
  5789                           
  5790                           ; Clear objects allocated to BANK1
  5791  07E8  30A0               	movlw	low __pbssBANK1
  5792  07E9  0084               	movwf	4
  5793  07EA  3000               	movlw	high __pbssBANK1
  5794  07EB  0085               	movwf	5
  5795  07EC  3036               	movlw	54
  5796  07ED  00FE               	movwf	btemp
  5797  07EE  3000               	movlw	0
  5798  07EF  00FF               	movwf	btemp+1
  5799  07F0  3192  2257  3187   	fcall	clear_ram0
  5800                           
  5801                           ; Clear objects allocated to BANK2
  5802  07F3  3020               	movlw	low __pbssBANK2
  5803  07F4  0084               	movwf	4
  5804  07F5  3001               	movlw	high __pbssBANK2
  5805  07F6  0085               	movwf	5
  5806  07F7  3015               	movlw	21
  5807  07F8  00FE               	movwf	btemp
  5808  07F9  3000               	movlw	0
  5809  07FA  00FF               	movwf	btemp+1
  5810  07FB  3192  2257         	fcall	clear_ram0
  5811  07FD                     end_of_initialization:	
  5812                           ;End of C runtime variable initialization code
  5813                           
  5814  07FD                     __end_of__initialization:	
  5815  07FD  0020               	movlb	0
  5816  07FE  3182  2A38         	ljmp	_main	;jump to C main() function
  5817                           
  5818                           	psect	bssBANK0
  5819  005A                     __pbssBANK0:	
  5820  005A                     _Vref:	
  5821  005A                     	ds	4
  5822  005E                     _readButtons:	
  5823  005E                     	ds	2
  5824  0060                     _VHoldMode:	
  5825  0060                     	ds	2
  5826  0062                     _Imode:	
  5827  0062                     	ds	2
  5828  0064                     _batteryState:	
  5829  0064                     	ds	2
  5830  0066                     _sampleIndex:	
  5831  0066                     	ds	2
  5832  0068                     _j:	
  5833  0068                     	ds	1
  5834  0069                     _lastButton:	
  5835  0069                     	ds	1
  5836  006A                     _button:	
  5837  006A                     	ds	1
  5838  006B                     _x:	
  5839  006B                     	ds	1
  5840                           
  5841                           	psect	dataBANK0
  5842  006C                     __pdataBANK0:	
  5843  006C                     _batteryTemp:	
  5844  006C                     	ds	2
  5845                           
  5846                           	psect	bssBANK1
  5847  00A0                     __pbssBANK1:	
  5848  00A0                     _Ianalogs:	
  5849  00A0                     	ds	8
  5850  00A8                     _Vanalogs:	
  5851  00A8                     	ds	8
  5852  00B0                     _voltage:	
  5853  00B0                     	ds	8
  5854  00B8                     _current:	
  5855  00B8                     	ds	8
  5856  00C0                     _stateCounter:	
  5857  00C0                     	ds	4
  5858  00C4                     _Iref:	
  5859  00C4                     	ds	4
  5860  00C8                     _IminCount:	
  5861  00C8                     	ds	4
  5862  00CC                     _Imin:	
  5863  00CC                     	ds	4
  5864  00D0                     _errno:	
  5865  00D0                     	ds	2
  5866  00D2                     _Iout:	
  5867  00D2                     	ds	2
  5868  00D4                     _cc_cv:	
  5869  00D4                     	ds	2
  5870                           
  5871                           	psect	bssBANK2
  5872  0120                     __pbssBANK2:	
  5873  0120                     _totals:	
  5874  0120                     	ds	16
  5875  0130                     LCDWriteInt@F14390:	
  5876  0130                     	ds	5
  5877                           
  5878                           	psect	dataBANK2
  5879  0135                     __pdataBANK2:	
  5880  0135                     _channels:	
  5881  0135                     	ds	8
  5882                           
  5883                           	psect	clrtext
  5884  1257                     clear_ram0:	
  5885                           ;	Called with FSR0 containing the base address, and
  5886                           ;	btemp/btemp+1 has the size to clear
  5887                           
  5888  1257  0064               	clrwdt	;clear the watchdog before getting into this loop
  5889  1258                     clrloop0:	
  5890  1258  0180               	clrf	0	;clear RAM location pointed to by FSR
  5891  1259  3101               	addfsr 0,1
  5892  125A  3001               	movlw	1
  5893  125B  02FE               	subwf	126,f
  5894  125C  3000               	movlw	0
  5895  125D  3BFF               	subwfb	127,f
  5896  125E  087F               	movf	127,w
  5897  125F  047E               	iorwf	126,w
  5898  1260  1903               	btfsc	3,2
  5899  1261  3400               	retlw	0	;all done for this memory range, return
  5900  1262  2A58               	goto	clrloop0	;have we reached the end yet?
  5901                           
  5902                           	psect	cstackBANK1
  5903  00D6                     __pcstackBANK1:	
  5904  00D6                     main@efficiency:	
  5905                           
  5906                           ; 3 bytes @ 0x0
  5907  00D6                     	ds	3
  5908  00D9                     main@faultCount:	
  5909                           
  5910                           ; 2 bytes @ 0x3
  5911  00D9                     	ds	2
  5912  00DB                     main@faultNotReset:	
  5913                           
  5914                           ; 2 bytes @ 0x5
  5915  00DB                     	ds	2
  5916  00DD                     main@displayRefresh:	
  5917                           
  5918                           ; 1 bytes @ 0x7
  5919  00DD                     	ds	1
  5920  00DE                     main@slowLoop:	
  5921                           
  5922                           ; 1 bytes @ 0x8
  5923  00DE                     	ds	1
  5924  00DF                     main@MPPT1:	
  5925                           
  5926                           ; 2 bytes @ 0x9
  5927  00DF                     	ds	2
  5928  00E1                     main@MPPT0:	
  5929                           
  5930                           ; 2 bytes @ 0xB
  5931  00E1                     	ds	2
  5932  00E3                     main@largerIOut:	
  5933                           
  5934                           ; 2 bytes @ 0xD
  5935  00E3                     	ds	2
  5936  00E5                     main@menuButton:	
  5937                           
  5938                           ; 1 bytes @ 0xF
  5939  00E5                     	ds	1
  5940  00E6                     main@dutyCycle1:	
  5941                           
  5942                           ; 2 bytes @ 0x10
  5943  00E6                     	ds	2
  5944  00E8                     main@tempFanOutput:	
  5945                           
  5946                           ; 2 bytes @ 0x12
  5947  00E8                     	ds	2
  5948  00EA                     main@j:	
  5949                           
  5950                           ; 1 bytes @ 0x14
  5951  00EA                     	ds	1
  5952  00EB                     main@dutyCycle6:	
  5953                           
  5954                           ; 2 bytes @ 0x15
  5955  00EB                     	ds	2
  5956  00ED                     main@dutyCycle7:	
  5957                           
  5958                           ; 2 bytes @ 0x17
  5959  00ED                     	ds	2
  5960                           
  5961                           	psect	cstackCOMMON
  5962  0070                     __pcstackCOMMON:	
  5963  0070                     ?___ftge:	
  5964  0070                     ?_LCDWrite:	
  5965                           ; 1 bit 
  5966                           
  5967  0070                     ?_OSCILLATOR_Initialize:	
  5968                           ; 1 bytes @ 0x0
  5969                           
  5970  0070                     ??_OSCILLATOR_Initialize:	
  5971                           ; 1 bytes @ 0x0
  5972                           
  5973  0070                     ?_TMR2_Initialize:	
  5974                           ; 1 bytes @ 0x0
  5975                           
  5976  0070                     ??_TMR2_Initialize:	
  5977                           ; 1 bytes @ 0x0
  5978                           
  5979  0070                     ?_TMR4_Initialize:	
  5980                           ; 1 bytes @ 0x0
  5981                           
  5982  0070                     ??_TMR4_Initialize:	
  5983                           ; 1 bytes @ 0x0
  5984                           
  5985  0070                     ?_calculateCurrent0:	
  5986                           ; 1 bytes @ 0x0
  5987                           
  5988  0070                     ?_calculateCurrent1:	
  5989                           ; 1 bytes @ 0x0
  5990                           
  5991  0070                     ?_calculateCurrent2:	
  5992                           ; 1 bytes @ 0x0
  5993                           
  5994  0070                     ?_calculateCurrent3:	
  5995                           ; 1 bytes @ 0x0
  5996                           
  5997  0070                     ?_ADC_Initialize:	
  5998                           ; 1 bytes @ 0x0
  5999                           
  6000  0070                     ??_ADC_Initialize:	
  6001                           ; 1 bytes @ 0x0
  6002                           
  6003  0070                     ?_Init_Battery_State_Machine:	
  6004                           ; 1 bytes @ 0x0
  6005                           
  6006  0070                     ?_Battery_State_Machine:	
  6007                           ; 1 bytes @ 0x0
  6008                           
  6009  0070                     ?_cc_cv_mode:	
  6010                           ; 1 bytes @ 0x0
  6011                           
  6012  0070                     ?_readButton:	
  6013                           ; 1 bytes @ 0x0
  6014                           
  6015  0070                     ?_LCDWriteCharacter:	
  6016                           ; 1 bytes @ 0x0
  6017                           
  6018  0070                     ?_LCDClear:	
  6019                           ; 1 bytes @ 0x0
  6020                           
  6021  0070                     ?_LCDInit:	
  6022                           ; 1 bytes @ 0x0
  6023                           
  6024  0070                     ?_PIN_MANAGER_Initialize:	
  6025                           ; 1 bytes @ 0x0
  6026                           
  6027  0070                     ??_PIN_MANAGER_Initialize:	
  6028                           ; 1 bytes @ 0x0
  6029                           
  6030  0070                     ?_PWM_Initialize:	
  6031                           ; 1 bytes @ 0x0
  6032                           
  6033  0070                     ??_PWM_Initialize:	
  6034                           ; 1 bytes @ 0x0
  6035                           
  6036  0070                     ?_PWM6_LoadDutyValue:	
  6037                           ; 1 bytes @ 0x0
  6038                           
  6039  0070                     ?_PWM7_LoadDutyValue:	
  6040                           ; 1 bytes @ 0x0
  6041                           
  6042  0070                     ?_PWM1_LoadDutyValue:	
  6043                           ; 1 bytes @ 0x0
  6044                           
  6045  0070                     ?_SYSTEM_Initialize:	
  6046                           ; 1 bytes @ 0x0
  6047                           
  6048  0070                     ?_main:	
  6049                           ; 1 bytes @ 0x0
  6050                           
  6051  0070                     ?_ADCRead:	
  6052                           ; 1 bytes @ 0x0
  6053                           
  6054  0070                     ?___wmul:	
  6055                           ; 2 bytes @ 0x0
  6056                           
  6057  0070                     ?___awdiv:	
  6058                           ; 2 bytes @ 0x0
  6059                           
  6060  0070                     ?___lwmod:	
  6061                           ; 2 bytes @ 0x0
  6062                           
  6063  0070                     ?___ftpack:	
  6064                           ; 2 bytes @ 0x0
  6065                           
  6066  0070                     ?_frexp:	
  6067                           ; 3 bytes @ 0x0
  6068                           
  6069  0070                     ?___aldiv:	
  6070                           ; 3 bytes @ 0x0
  6071                           
  6072  0070                     LCDWrite@data:	
  6073                           ; 4 bytes @ 0x0
  6074                           
  6075  0070                     PIN_MANAGER_Initialize@state:	
  6076                           ; 1 bytes @ 0x0
  6077                           
  6078  0070                     PWM6_LoadDutyValue@dutyCycle6:	
  6079                           ; 1 bytes @ 0x0
  6080                           
  6081  0070                     PWM7_LoadDutyValue@dutyCycle7:	
  6082                           ; 2 bytes @ 0x0
  6083                           
  6084  0070                     PWM1_LoadDutyValue@dutyCycle1:	
  6085                           ; 2 bytes @ 0x0
  6086                           
  6087  0070                     ___wmul@multiplier:	
  6088                           ; 2 bytes @ 0x0
  6089                           
  6090  0070                     ___awdiv@divisor:	
  6091                           ; 2 bytes @ 0x0
  6092                           
  6093  0070                     ___lwmod@divisor:	
  6094                           ; 2 bytes @ 0x0
  6095                           
  6096  0070                     ___ftpack@arg:	
  6097                           ; 2 bytes @ 0x0
  6098                           
  6099  0070                     ___ftge@ff1:	
  6100                           ; 3 bytes @ 0x0
  6101                           
  6102  0070                     frexp@value:	
  6103                           ; 3 bytes @ 0x0
  6104                           
  6105  0070                     ___aldiv@divisor:	
  6106                           ; 3 bytes @ 0x0
  6107                           
  6108                           
  6109                           ; 4 bytes @ 0x0
  6110  0070                     	ds	1
  6111  0071                     ??_LCDWrite:	
  6112                           
  6113                           ; 1 bytes @ 0x1
  6114  0071                     	ds	1
  6115  0072                     ??_PWM6_LoadDutyValue:	
  6116  0072                     ??_PWM7_LoadDutyValue:	
  6117                           ; 1 bytes @ 0x2
  6118                           
  6119  0072                     ??_PWM1_LoadDutyValue:	
  6120                           ; 1 bytes @ 0x2
  6121                           
  6122  0072                     LCDWrite@data_or_command:	
  6123                           ; 1 bytes @ 0x2
  6124                           
  6125  0072                     ___wmul@multiplicand:	
  6126                           ; 1 bytes @ 0x2
  6127                           
  6128  0072                     ___awdiv@dividend:	
  6129                           ; 2 bytes @ 0x2
  6130                           
  6131  0072                     ___lwmod@dividend:	
  6132                           ; 2 bytes @ 0x2
  6133                           
  6134                           
  6135                           ; 2 bytes @ 0x2
  6136  0072                     	ds	1
  6137  0073                     ??_ADCRead:	
  6138  0073                     ADCRead@channel:	
  6139                           ; 1 bytes @ 0x3
  6140                           
  6141  0073                     LCDWrite@d:	
  6142                           ; 1 bytes @ 0x3
  6143                           
  6144  0073                     ___ftpack@exp:	
  6145                           ; 1 bytes @ 0x3
  6146                           
  6147  0073                     frexp@eptr:	
  6148                           ; 1 bytes @ 0x3
  6149                           
  6150  0073                     ___ftge@ff2:	
  6151                           ; 1 bytes @ 0x3
  6152                           
  6153                           
  6154                           ; 3 bytes @ 0x3
  6155  0073                     	ds	1
  6156  0074                     ??_frexp:	
  6157  0074                     ??_readButton:	
  6158                           ; 1 bytes @ 0x4
  6159                           
  6160  0074                     ??___wmul:	
  6161                           ; 1 bytes @ 0x4
  6162                           
  6163  0074                     ??___awdiv:	
  6164                           ; 1 bytes @ 0x4
  6165                           
  6166  0074                     ??___lwmod:	
  6167                           ; 1 bytes @ 0x4
  6168                           
  6169  0074                     LCDWrite@i:	
  6170                           ; 1 bytes @ 0x4
  6171                           
  6172  0074                     ___ftpack@sign:	
  6173                           ; 1 bytes @ 0x4
  6174                           
  6175  0074                     ___wmul@product:	
  6176                           ; 1 bytes @ 0x4
  6177                           
  6178  0074                     ___aldiv@dividend:	
  6179                           ; 2 bytes @ 0x4
  6180                           
  6181                           
  6182                           ; 4 bytes @ 0x4
  6183  0074                     	ds	1
  6184  0075                     ??___ftpack:	
  6185  0075                     ?_gotoXY:	
  6186                           ; 1 bytes @ 0x5
  6187                           
  6188  0075                     ??_LCDInit:	
  6189                           ; 1 bytes @ 0x5
  6190                           
  6191  0075                     gotoXY@y:	
  6192                           ; 1 bytes @ 0x5
  6193                           
  6194  0075                     ___awdiv@counter:	
  6195                           ; 1 bytes @ 0x5
  6196                           
  6197  0075                     ___lwmod@counter:	
  6198                           ; 1 bytes @ 0x5
  6199                           
  6200                           
  6201                           ; 1 bytes @ 0x5
  6202  0075                     	ds	1
  6203  0076                     ??_gotoXY:	
  6204  0076                     ??_LCDWriteCharacter:	
  6205                           ; 1 bytes @ 0x6
  6206                           
  6207  0076                     ??___ftge:	
  6208                           ; 1 bytes @ 0x6
  6209                           
  6210  0076                     ___awdiv@sign:	
  6211                           ; 1 bytes @ 0x6
  6212                           
  6213                           
  6214                           ; 1 bytes @ 0x6
  6215  0076                     	ds	1
  6216  0077                     gotoXY@x:	
  6217  0077                     ___awdiv@quotient:	
  6218                           ; 1 bytes @ 0x7
  6219                           
  6220                           
  6221                           ; 2 bytes @ 0x7
  6222  0077                     	ds	1
  6223  0078                     ??_LCDClear:	
  6224  0078                     ??___aldiv:	
  6225                           ; 1 bytes @ 0x8
  6226                           
  6227  0078                     ?___awtoft:	
  6228                           ; 1 bytes @ 0x8
  6229                           
  6230  0078                     ___awtoft@c:	
  6231                           ; 3 bytes @ 0x8
  6232                           
  6233                           
  6234                           ; 2 bytes @ 0x8
  6235  0078                     	ds	1
  6236  0079                     LCDWriteCharacter@character:	
  6237  0079                     readIAnalog@analog_channel:	
  6238                           ; 1 bytes @ 0x9
  6239                           
  6240  0079                     LCDClear@index:	
  6241                           ; 2 bytes @ 0x9
  6242                           
  6243                           
  6244                           ; 2 bytes @ 0x9
  6245  0079                     	ds	1
  6246  007A                     LCDWriteCharacter@base:	
  6247                           
  6248                           ; 2 bytes @ 0xA
  6249  007A                     	ds	1
  6250  007B                     ??___awtoft:	
  6251  007B                     readIAnalog@value:	
  6252                           ; 1 bytes @ 0xB
  6253                           
  6254                           
  6255                           ; 2 bytes @ 0xB
  6256  007B                     	ds	1
  6257  007C                     ?_LCDWriteString:	
  6258  007C                     LCDWriteString@characters:	
  6259                           ; 1 bytes @ 0xC
  6260                           
  6261                           
  6262                           ; 2 bytes @ 0xC
  6263  007C                     	ds	1
  6264  007D                     ___awtoft@sign:	
  6265                           
  6266                           ; 1 bytes @ 0xD
  6267  007D                     	ds	1
  6268  007E                     ??_eval_poly:	
  6269  007E                     ??_tempCalc:	
  6270                           ; 1 bytes @ 0xE
  6271                           
  6272  007E                     ??___ftsub:	
  6273                           ; 1 bytes @ 0xE
  6274                           
  6275                           
  6276                           	psect	cstackBANK0
  6277  0020                     __pcstackBANK0:	
  6278                           ; 1 bytes @ 0xE
  6279                           
  6280  0020                     ??_LCDWriteString:	
  6281  0020                     ?_LCDWriteInt:	
  6282                           ; 1 bytes @ 0x0
  6283                           
  6284  0020                     ?___ftdiv:	
  6285                           ; 1 bytes @ 0x0
  6286                           
  6287  0020                     ?___ftmul:	
  6288                           ; 3 bytes @ 0x0
  6289                           
  6290  0020                     ___aldiv@counter:	
  6291                           ; 3 bytes @ 0x0
  6292                           
  6293  0020                     LCDWriteInt@value:	
  6294                           ; 1 bytes @ 0x0
  6295                           
  6296  0020                     ___ftdiv@f2:	
  6297                           ; 2 bytes @ 0x0
  6298                           
  6299  0020                     ___ftmul@f1:	
  6300                           ; 3 bytes @ 0x0
  6301                           
  6302                           
  6303                           ; 3 bytes @ 0x0
  6304  0020                     	ds	1
  6305  0021                     ___aldiv@sign:	
  6306                           
  6307                           ; 1 bytes @ 0x1
  6308  0021                     	ds	1
  6309  0022                     LCDWriteInt@fieldLength:	
  6310  0022                     ___aldiv@quotient:	
  6311                           ; 1 bytes @ 0x2
  6312                           
  6313                           
  6314                           ; 4 bytes @ 0x2
  6315  0022                     	ds	1
  6316  0023                     LCDWriteInt@numPlaces:	
  6317  0023                     ___ftdiv@f1:	
  6318                           ; 1 bytes @ 0x3
  6319                           
  6320  0023                     ___ftmul@f2:	
  6321                           ; 3 bytes @ 0x3
  6322                           
  6323                           
  6324                           ; 3 bytes @ 0x3
  6325  0023                     	ds	1
  6326  0024                     LCDWriteInt@sign:	
  6327                           
  6328                           ; 1 bytes @ 0x4
  6329  0024                     	ds	1
  6330  0025                     ??_LCDWriteInt:	
  6331                           
  6332                           ; 1 bytes @ 0x5
  6333  0025                     	ds	1
  6334  0026                     ??___ftdiv:	
  6335  0026                     ??___ftmul:	
  6336                           ; 1 bytes @ 0x6
  6337                           
  6338  0026                     ?_readIAnalog:	
  6339                           ; 1 bytes @ 0x6
  6340                           
  6341  0026                     readIAnalog@channel:	
  6342                           ; 2 bytes @ 0x6
  6343                           
  6344                           
  6345                           ; 2 bytes @ 0x6
  6346  0026                     	ds	2
  6347  0028                     ??_readIAnalog:	
  6348                           
  6349                           ; 1 bytes @ 0x8
  6350  0028                     	ds	1
  6351  0029                     LCDWriteInt@str:	
  6352                           
  6353                           ; 5 bytes @ 0x9
  6354  0029                     	ds	1
  6355  002A                     ___ftdiv@cntr:	
  6356  002A                     ___ftmul@exp:	
  6357                           ; 1 bytes @ 0xA
  6358                           
  6359                           
  6360                           ; 1 bytes @ 0xA
  6361  002A                     	ds	1
  6362  002B                     ___ftdiv@f3:	
  6363  002B                     ___ftmul@f3_as_product:	
  6364                           ; 3 bytes @ 0xB
  6365                           
  6366                           
  6367                           ; 3 bytes @ 0xB
  6368  002B                     	ds	3
  6369  002E                     LCDWriteInt@j:	
  6370  002E                     ___ftdiv@exp:	
  6371                           ; 1 bytes @ 0xE
  6372                           
  6373  002E                     ___ftmul@cntr:	
  6374                           ; 1 bytes @ 0xE
  6375                           
  6376                           
  6377                           ; 1 bytes @ 0xE
  6378  002E                     	ds	1
  6379  002F                     LCDWriteInt@i:	
  6380  002F                     ___ftdiv@sign:	
  6381                           ; 1 bytes @ 0xF
  6382                           
  6383  002F                     ___ftmul@sign:	
  6384                           ; 1 bytes @ 0xF
  6385                           
  6386                           
  6387                           ; 1 bytes @ 0xF
  6388  002F                     	ds	1
  6389  0030                     ?___ftadd:	
  6390  0030                     ?___fttol:	
  6391                           ; 3 bytes @ 0x10
  6392                           
  6393  0030                     ___ftadd@f1:	
  6394                           ; 4 bytes @ 0x10
  6395                           
  6396  0030                     ___fttol@f1:	
  6397                           ; 3 bytes @ 0x10
  6398                           
  6399                           
  6400                           ; 3 bytes @ 0x10
  6401  0030                     	ds	3
  6402  0033                     ___ftadd@f2:	
  6403                           
  6404                           ; 3 bytes @ 0x13
  6405  0033                     	ds	1
  6406  0034                     ??___fttol:	
  6407                           
  6408                           ; 1 bytes @ 0x14
  6409  0034                     	ds	2
  6410  0036                     ??___ftadd:	
  6411                           
  6412                           ; 1 bytes @ 0x16
  6413  0036                     	ds	2
  6414  0038                     ___fttol@sign1:	
  6415                           
  6416                           ; 1 bytes @ 0x18
  6417  0038                     	ds	1
  6418  0039                     ___fttol@lval:	
  6419                           
  6420                           ; 4 bytes @ 0x19
  6421  0039                     	ds	1
  6422  003A                     ___ftadd@sign:	
  6423                           
  6424                           ; 1 bytes @ 0x1A
  6425  003A                     	ds	1
  6426  003B                     ___ftadd@exp2:	
  6427                           
  6428                           ; 1 bytes @ 0x1B
  6429  003B                     	ds	1
  6430  003C                     ___ftadd@exp1:	
  6431                           
  6432                           ; 1 bytes @ 0x1C
  6433  003C                     	ds	1
  6434  003D                     ?_eval_poly:	
  6435  003D                     ?___ftsub:	
  6436                           ; 3 bytes @ 0x1D
  6437                           
  6438  003D                     ___fttol@exp1:	
  6439                           ; 3 bytes @ 0x1D
  6440                           
  6441  003D                     ___ftsub@f2:	
  6442                           ; 1 bytes @ 0x1D
  6443                           
  6444  003D                     eval_poly@x:	
  6445                           ; 3 bytes @ 0x1D
  6446                           
  6447                           
  6448                           ; 3 bytes @ 0x1D
  6449  003D                     	ds	1
  6450  003E                     ??_calculateCurrent0:	
  6451  003E                     ??_calculateCurrent1:	
  6452                           ; 1 bytes @ 0x1E
  6453                           
  6454  003E                     ??_calculateCurrent2:	
  6455                           ; 1 bytes @ 0x1E
  6456                           
  6457  003E                     ??_calculateCurrent3:	
  6458                           ; 1 bytes @ 0x1E
  6459                           
  6460  003E                     ??_Init_Battery_State_Machine:	
  6461                           ; 1 bytes @ 0x1E
  6462                           
  6463  003E                     ??_Battery_State_Machine:	
  6464                           ; 1 bytes @ 0x1E
  6465                           
  6466  003E                     ??_cc_cv_mode:	
  6467                           ; 1 bytes @ 0x1E
  6468                           
  6469                           
  6470                           ; 1 bytes @ 0x1E
  6471  003E                     	ds	2
  6472  0040                     eval_poly@d:	
  6473  0040                     ___ftsub@f1:	
  6474                           ; 2 bytes @ 0x20
  6475                           
  6476                           
  6477                           ; 3 bytes @ 0x20
  6478  0040                     	ds	2
  6479  0042                     Init_Battery_State_Machine@z:	
  6480  0042                     eval_poly@n:	
  6481                           ; 1 bytes @ 0x22
  6482                           
  6483                           
  6484                           ; 2 bytes @ 0x22
  6485  0042                     	ds	1
  6486  0043                     ??_SYSTEM_Initialize:	
  6487  0043                     Battery_State_Machine@z:	
  6488                           ; 1 bytes @ 0x23
  6489                           
  6490                           
  6491                           ; 1 bytes @ 0x23
  6492  0043                     	ds	1
  6493  0044                     eval_poly@res:	
  6494                           
  6495                           ; 3 bytes @ 0x24
  6496  0044                     	ds	1
  6497  0045                     cc_cv_mode@z:	
  6498                           
  6499                           ; 1 bytes @ 0x25
  6500  0045                     	ds	2
  6501  0047                     ?_log:	
  6502  0047                     log@x:	
  6503                           ; 3 bytes @ 0x27
  6504                           
  6505                           
  6506                           ; 3 bytes @ 0x27
  6507  0047                     	ds	3
  6508  004A                     ??_log:	
  6509                           
  6510                           ; 1 bytes @ 0x2A
  6511  004A                     	ds	1
  6512  004B                     log@exponent:	
  6513                           
  6514                           ; 2 bytes @ 0x2B
  6515  004B                     	ds	2
  6516  004D                     ?_tempCalc:	
  6517  004D                     tempCalc@analogValue:	
  6518                           ; 2 bytes @ 0x2D
  6519                           
  6520                           
  6521                           ; 2 bytes @ 0x2D
  6522  004D                     	ds	2
  6523  004F                     tempCalc@R:	
  6524                           
  6525                           ; 3 bytes @ 0x2F
  6526  004F                     	ds	3
  6527  0052                     _tempCalc$1297:	
  6528                           
  6529                           ; 3 bytes @ 0x32
  6530  0052                     	ds	3
  6531  0055                     tempCalc@steinhart:	
  6532                           
  6533                           ; 3 bytes @ 0x35
  6534  0055                     	ds	3
  6535  0058                     ??_main:	
  6536                           
  6537                           ; 1 bytes @ 0x38
  6538  0058                     	ds	2
  6539                           
  6540                           	psect	maintext
  6541  0238                     __pmaintext:	
  6542 ;;
  6543 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  6544 ;;
  6545 ;; *************** function _main *****************
  6546 ;; Defined at:
  6547 ;;		line 42 in file "main.c"
  6548 ;; Parameters:    Size  Location     Type
  6549 ;;		None
  6550 ;; Auto vars:     Size  Location     Type
  6551 ;;  efficiency      3    0[BANK1 ] float 
  6552 ;;  dutyCycle7      2   23[BANK1 ] unsigned int 
  6553 ;;  dutyCycle6      2   21[BANK1 ] unsigned int 
  6554 ;;  tempFanOutpu    2   18[BANK1 ] unsigned int 
  6555 ;;  dutyCycle1      2   16[BANK1 ] unsigned int 
  6556 ;;  largerIOut      2   13[BANK1 ] int 
  6557 ;;  MPPT0           2   11[BANK1 ] int 
  6558 ;;  MPPT1           2    9[BANK1 ] int 
  6559 ;;  faultNotRese    2    5[BANK1 ] unsigned int 
  6560 ;;  faultCount      2    3[BANK1 ] unsigned int 
  6561 ;;  j               1   20[BANK1 ] unsigned char 
  6562 ;;  menuButton      1   15[BANK1 ] unsigned char 
  6563 ;;  slowLoop        1    8[BANK1 ] unsigned char 
  6564 ;;  displayRefre    1    7[BANK1 ] unsigned char 
  6565 ;; Return value:  Size  Location     Type
  6566 ;;                  1    wreg      void 
  6567 ;; Registers used:
  6568 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6569 ;; Tracked objects:
  6570 ;;		On entry : B1F/0
  6571 ;;		On exit  : 0/0
  6572 ;;		Unchanged: 0/0
  6573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6574 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6575 ;;      Locals:         0       0      25       0       0       0       0       0       0       0       0       0       
      +0       0
  6576 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6577 ;;      Totals:         0       2      25       0       0       0       0       0       0       0       0       0       
      +0       0
  6578 ;;Total ram usage:       27 bytes
  6579 ;; Hardware stack levels required when called:    5
  6580 ;; This function calls:
  6581 ;;		_ADCRead
  6582 ;;		_Battery_State_Machine
  6583 ;;		_LCDClear
  6584 ;;		_LCDInit
  6585 ;;		_LCDWriteCharacter
  6586 ;;		_LCDWriteInt
  6587 ;;		_LCDWriteString
  6588 ;;		_PWM1_LoadDutyValue
  6589 ;;		_PWM6_LoadDutyValue
  6590 ;;		_PWM7_LoadDutyValue
  6591 ;;		_SYSTEM_Initialize
  6592 ;;		___awtoft
  6593 ;;		___ftdiv
  6594 ;;		___fttol
  6595 ;;		_calculateCurrent0
  6596 ;;		_calculateCurrent1
  6597 ;;		_calculateCurrent2
  6598 ;;		_calculateCurrent3
  6599 ;;		_cc_cv_mode
  6600 ;;		_gotoXY
  6601 ;;		_readButton
  6602 ;;		_readIAnalog
  6603 ;;		_tempCalc
  6604 ;; This function is called by:
  6605 ;;		Startup code after reset
  6606 ;; This function uses a non-reentrant model
  6607 ;;
  6608                           
  6609                           
  6610                           ;psect for function _main
  6611  0238                     _main:	
  6612                           
  6613                           ;main.c: 44: int16_t MPPT0 = 3144;
  6614                           
  6615                           ;incstack = 0
  6616                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6617  0238  3048               	movlw	72
  6618  0239  0021               	movlb	1	; select bank1
  6619  023A  00E1               	movwf	main@MPPT0^(0+128)
  6620  023B  300C               	movlw	12
  6621  023C  00E2               	movwf	(main@MPPT0^(0+128)+1)
  6622                           
  6623                           ;main.c: 45: int16_t MPPT1 = 3144;
  6624  023D  3048               	movlw	72
  6625  023E  00DF               	movwf	main@MPPT1^(0+128)
  6626  023F  300C               	movlw	12
  6627  0240  00E0               	movwf	(main@MPPT1^(0+128)+1)
  6628                           
  6629                           ;main.c: 47: extern uint8_t batteryState[2];
  6630                           ;main.c: 48: uint8_t displayRefresh = 0;
  6631  0241  01DD               	clrf	main@displayRefresh^(0+128)
  6632                           
  6633                           ;main.c: 49: uint16_t dutyCycle6 = 1023;
  6634  0242  30FF               	movlw	255
  6635  0243  00EB               	movwf	main@dutyCycle6^(0+128)
  6636  0244  3003               	movlw	3
  6637  0245  00EC               	movwf	(main@dutyCycle6^(0+128)+1)
  6638                           
  6639                           ;main.c: 50: uint16_t dutyCycle7 = 1023;
  6640  0246  30FF               	movlw	255
  6641  0247  00ED               	movwf	main@dutyCycle7^(0+128)
  6642  0248  3003               	movlw	3
  6643  0249  00EE               	movwf	(main@dutyCycle7^(0+128)+1)
  6644                           
  6645                           ;main.c: 51: uint16_t dutyCycle1 = 260;
  6646  024A  3004               	movlw	4
  6647  024B  00E6               	movwf	main@dutyCycle1^(0+128)
  6648  024C  3001               	movlw	1
  6649  024D  00E7               	movwf	(main@dutyCycle1^(0+128)+1)
  6650                           
  6651                           ;main.c: 52: float efficiency = 0;
  6652  024E  3000               	movlw	0
  6653  024F  00D6               	movwf	main@efficiency^(0+128)
  6654  0250  3000               	movlw	0
  6655  0251  00D7               	movwf	(main@efficiency+1)^(0+128)
  6656  0252  3000               	movlw	0
  6657  0253  00D8               	movwf	(main@efficiency+2)^(0+128)
  6658                           
  6659                           ;main.c: 53: uint16_t faultCount = 0;
  6660  0254  01D9               	clrf	main@faultCount^(0+128)
  6661  0255  01DA               	clrf	(main@faultCount+1)^(0+128)
  6662                           
  6663                           ;main.c: 54: uint16_t faultNotReset = 0;
  6664  0256  01DB               	clrf	main@faultNotReset^(0+128)
  6665  0257  01DC               	clrf	(main@faultNotReset+1)^(0+128)
  6666                           
  6667                           ;main.c: 55: extern uint16_t IminCount[2];
  6668                           ;main.c: 56: extern int8_t Imode[2];
  6669                           ;main.c: 57: int16_t largerIOut = 0;
  6670  0258  01E3               	clrf	main@largerIOut^(0+128)
  6671  0259  01E4               	clrf	(main@largerIOut+1)^(0+128)
  6672                           
  6673                           ;main.c: 58: extern int16_t Iref[2];
  6674                           ;main.c: 59: uint8_t j = 0;
  6675  025A  01EA               	clrf	main@j^(0+128)
  6676                           
  6677                           ;main.c: 60: uint8_t menuButton = 0;
  6678  025B  01E5               	clrf	main@menuButton^(0+128)
  6679                           
  6680                           ;main.c: 61: uint8_t slowLoop = 200;
  6681  025C  30C8               	movlw	200
  6682  025D  0020               	movlb	0	; select bank0
  6683  025E  00D8               	movwf	??_main
  6684  025F  0858               	movf	??_main,w
  6685  0260  0021               	movlb	1	; select bank1
  6686  0261  00DE               	movwf	main@slowLoop^(0+128)
  6687                           
  6688                           ;main.c: 62: uint16_t tempFanOutput = 60;
  6689  0262  303C               	movlw	60
  6690  0263  00E8               	movwf	main@tempFanOutput^(0+128)
  6691  0264  3000               	movlw	0
  6692  0265  00E9               	movwf	(main@tempFanOutput^(0+128)+1)
  6693                           
  6694                           ;main.c: 63: extern int8_t VHoldMode[2];
  6695                           ;main.c: 64: extern int16_t Vref[2];
  6696                           ;main.c: 67: SYSTEM_Initialize();
  6697  0266  3194  246F  3182   	fcall	_SYSTEM_Initialize
  6698                           
  6699                           ;main.c: 69: LCDClear();
  6700  0269  3193  23AB  3182   	fcall	_LCDClear
  6701  026C                     l3193:	
  6702                           ;main.c: 71: void calculateCurrent0(void);
  6703                           ;main.c: 72: void calculateCurrent1(void);
  6704                           ;main.c: 73: void calculateCurrent2(void);
  6705                           ;main.c: 74: void calculateCurrent3(void);
  6706                           ;main.c: 88: while (1)
  6707                           
  6708                           
  6709                           ;main.c: 89: {
  6710                           ;main.c: 90: if(!(RB2))
  6711  026C  0020               	movlb	0	; select bank0
  6712  026D  190D               	btfsc	13,2	;volatile
  6713  026E  2A80               	goto	l3201
  6714                           
  6715                           ;main.c: 91: {
  6716                           ;main.c: 92: LATA5=0;
  6717  026F  1296               	bcf	22,5	;volatile
  6718                           
  6719                           ;main.c: 93: _delay((unsigned long)((1000)*(32000000/4000000.0)));
  6720  0270  300B               	movlw	11
  6721  0271  0020               	movlb	0	; select bank0
  6722  0272  00D8               	movwf	??_main
  6723  0273  3062               	movlw	98
  6724  0274                     u4107:	
  6725  0274  0B89               	decfsz	9,f
  6726  0275  2A74               	goto	u4107
  6727  0276  0BD8               	decfsz	??_main,f
  6728  0277  2A74               	goto	u4107
  6729  0278  0000               	nop
  6730                           
  6731                           ;main.c: 94: faultCount+=1;
  6732  0279  3001               	movlw	1
  6733  027A  0021               	movlb	1	; select bank1
  6734  027B  07D9               	addwf	main@faultCount^(0+128),f
  6735  027C  3000               	movlw	0
  6736  027D  3DDA               	addwfc	(main@faultCount+1)^(0+128),f
  6737                           
  6738                           ;main.c: 95: LATA5=1;
  6739  027E  0020               	movlb	0	; select bank0
  6740  027F  1696               	bsf	22,5	;volatile
  6741  0280                     l3201:	
  6742                           
  6743                           ;main.c: 96: }
  6744                           ;main.c: 97: for(j=0;j<4;j++) Ianalogs[j]=readIAnalog(j);
  6745  0280  0021               	movlb	1	; select bank1
  6746  0281  01EA               	clrf	main@j^(0+128)
  6747  0282  3004               	movlw	4
  6748  0283  026A               	subwf	main@j^(0+128),w
  6749  0284  1803               	btfsc	3,0
  6750  0285  2AA4               	goto	l3213
  6751  0286                     l3207:	
  6752  0286  086A               	movf	main@j^(0+128),w
  6753  0287  0020               	movlb	0	; select bank0
  6754  0288  00D8               	movwf	??_main
  6755  0289  01D9               	clrf	??_main+1
  6756  028A  0858               	movf	??_main,w
  6757  028B  00A6               	movwf	readIAnalog@channel
  6758  028C  0859               	movf	??_main+1,w
  6759  028D  00A7               	movwf	readIAnalog@channel+1
  6760  028E  318D  2583  3182   	fcall	_readIAnalog
  6761  0291  0021               	movlb	1	; select bank1
  6762  0292  356A               	lslf	main@j^(0+128),w
  6763  0293  3EA0               	addlw	(low (_Ianalogs| 0))& (0+255)
  6764  0294  0086               	movwf	6
  6765  0295  0187               	clrf	7
  6766  0296  0020               	movlb	0	; select bank0
  6767  0297  0826               	movf	?_readIAnalog,w
  6768  0298  3FC0               	movwi [0]fsr1
  6769  0299  0827               	movf	?_readIAnalog+1,w
  6770  029A  3FC1               	movwi [1]fsr1
  6771  029B  3001               	movlw	1
  6772  029C  00D8               	movwf	??_main
  6773  029D  0858               	movf	??_main,w
  6774  029E  0021               	movlb	1	; select bank1
  6775  029F  07EA               	addwf	main@j^(0+128),f
  6776  02A0  3004               	movlw	4
  6777  02A1  026A               	subwf	main@j^(0+128),w
  6778  02A2  1C03               	skipc
  6779  02A3  2A86               	goto	l3207
  6780  02A4                     l3213:	
  6781                           
  6782                           ;main.c: 99: Vanalogs[0]=ADCRead(21);
  6783  02A4  3015               	movlw	21
  6784  02A5  3192  2298  3182   	fcall	_ADCRead
  6785  02A8  0871               	movf	?_ADCRead+1,w
  6786  02A9  0021               	movlb	1	; select bank1
  6787  02AA  00A9               	movwf	(_Vanalogs+1)^(0+128)
  6788  02AB  0870               	movf	?_ADCRead,w
  6789  02AC  00A8               	movwf	_Vanalogs^(0+128)
  6790                           
  6791                           ;main.c: 101: Vanalogs[1]=ADCRead(17);
  6792  02AD  3011               	movlw	17
  6793  02AE  3192  2298  3182   	fcall	_ADCRead
  6794  02B1  0871               	movf	?_ADCRead+1,w
  6795  02B2  0021               	movlb	1	; select bank1
  6796  02B3  00AB               	movwf	((_Vanalogs+1)^(0+128)+2)
  6797  02B4  0870               	movf	?_ADCRead,w
  6798  02B5  00AA               	movwf	(_Vanalogs^(0+128)+2)
  6799                           
  6800                           ;main.c: 103: Vanalogs[2]=ADCRead(23);
  6801  02B6  3017               	movlw	23
  6802  02B7  3192  2298  3182   	fcall	_ADCRead
  6803  02BA  0871               	movf	?_ADCRead+1,w
  6804  02BB  0021               	movlb	1	; select bank1
  6805  02BC  00AD               	movwf	((_Vanalogs+1)^(0+128)+4)
  6806  02BD  0870               	movf	?_ADCRead,w
  6807  02BE  00AC               	movwf	(_Vanalogs^(0+128)+4)
  6808                           
  6809                           ;main.c: 105: Vanalogs[3]=ADCRead(19);
  6810  02BF  3013               	movlw	19
  6811  02C0  3192  2298  3182   	fcall	_ADCRead
  6812  02C3  0871               	movf	?_ADCRead+1,w
  6813  02C4  0021               	movlb	1	; select bank1
  6814  02C5  00AF               	movwf	((_Vanalogs+1)^(0+128)+6)
  6815  02C6  0870               	movf	?_ADCRead,w
  6816  02C7  00AE               	movwf	(_Vanalogs^(0+128)+6)
  6817                           
  6818                           ;main.c: 107: if(!(RB2))faultNotReset+=1;
  6819  02C8  0020               	movlb	0	; select bank0
  6820  02C9  190D               	btfsc	13,2	;volatile
  6821  02CA  2AD0               	goto	l3219
  6822  02CB  3001               	movlw	1
  6823  02CC  0021               	movlb	1	; select bank1
  6824  02CD  07DB               	addwf	main@faultNotReset^(0+128),f
  6825  02CE  3000               	movlw	0
  6826  02CF  3DDC               	addwfc	(main@faultNotReset+1)^(0+128),f
  6827  02D0                     l3219:	
  6828                           
  6829                           ;main.c: 109: voltage[0]=(int16_t)(Vanalogs[0]/.54503);
  6830  02D0  0021               	movlb	1	; select bank1
  6831  02D1  0829               	movf	(_Vanalogs+1)^(0+128),w
  6832  02D2  00F9               	movwf	___awtoft@c+1
  6833  02D3  0828               	movf	_Vanalogs^(0+128),w
  6834  02D4  00F8               	movwf	___awtoft@c
  6835  02D5  3193  2366  3182   	fcall	___awtoft
  6836  02D8  0878               	movf	?___awtoft,w
  6837  02D9  0020               	movlb	0	; select bank0
  6838  02DA  00A3               	movwf	___ftdiv@f1
  6839  02DB  0879               	movf	?___awtoft+1,w
  6840  02DC  00A4               	movwf	___ftdiv@f1+1
  6841  02DD  087A               	movf	?___awtoft+2,w
  6842  02DE  00A5               	movwf	___ftdiv@f1+2
  6843  02DF  3087               	movlw	135
  6844  02E0  00A0               	movwf	___ftdiv@f2
  6845  02E1  300B               	movlw	11
  6846  02E2  00A1               	movwf	___ftdiv@f2+1
  6847  02E3  303F               	movlw	63
  6848  02E4  00A2               	movwf	___ftdiv@f2+2
  6849  02E5  3189  2199  3182   	fcall	___ftdiv
  6850  02E8  0020               	movlb	0	; select bank0
  6851  02E9  0820               	movf	?___ftdiv,w
  6852  02EA  00B0               	movwf	___fttol@f1
  6853  02EB  0821               	movf	?___ftdiv+1,w
  6854  02EC  00B1               	movwf	___fttol@f1+1
  6855  02ED  0822               	movf	?___ftdiv+2,w
  6856  02EE  00B2               	movwf	___fttol@f1+2
  6857  02EF  3189  2112  3182   	fcall	___fttol
  6858  02F2  0020               	movlb	0	; select bank0
  6859  02F3  0831               	movf	?___fttol+1,w
  6860  02F4  0021               	movlb	1	; select bank1
  6861  02F5  00B1               	movwf	(_voltage+1)^(0+128)
  6862  02F6  0020               	movlb	0	; select bank0
  6863  02F7  0830               	movf	?___fttol,w
  6864  02F8  0021               	movlb	1	; select bank1
  6865  02F9  00B0               	movwf	_voltage^(0+128)
  6866                           
  6867                           ;main.c: 111: voltage[1]=(int16_t)(Vanalogs[1]/.54503);
  6868  02FA  082B               	movf	((_Vanalogs+1)^(0+128)+2),w
  6869  02FB  00F9               	movwf	___awtoft@c+1
  6870  02FC  082A               	movf	(_Vanalogs^(0+128)+2),w
  6871  02FD  00F8               	movwf	___awtoft@c
  6872  02FE  3193  2366  3182   	fcall	___awtoft
  6873  0301  0878               	movf	?___awtoft,w
  6874  0302  0020               	movlb	0	; select bank0
  6875  0303  00A3               	movwf	___ftdiv@f1
  6876  0304  0879               	movf	?___awtoft+1,w
  6877  0305  00A4               	movwf	___ftdiv@f1+1
  6878  0306  087A               	movf	?___awtoft+2,w
  6879  0307  00A5               	movwf	___ftdiv@f1+2
  6880  0308  3087               	movlw	135
  6881  0309  00A0               	movwf	___ftdiv@f2
  6882  030A  300B               	movlw	11
  6883  030B  00A1               	movwf	___ftdiv@f2+1
  6884  030C  303F               	movlw	63
  6885  030D  00A2               	movwf	___ftdiv@f2+2
  6886  030E  3189  2199  3182   	fcall	___ftdiv
  6887  0311  0020               	movlb	0	; select bank0
  6888  0312  0820               	movf	?___ftdiv,w
  6889  0313  00B0               	movwf	___fttol@f1
  6890  0314  0821               	movf	?___ftdiv+1,w
  6891  0315  00B1               	movwf	___fttol@f1+1
  6892  0316  0822               	movf	?___ftdiv+2,w
  6893  0317  00B2               	movwf	___fttol@f1+2
  6894  0318  3189  2112  3182   	fcall	___fttol
  6895  031B  0020               	movlb	0	; select bank0
  6896  031C  0831               	movf	?___fttol+1,w
  6897  031D  0021               	movlb	1	; select bank1
  6898  031E  00B3               	movwf	((_voltage+1)^(0+128)+2)
  6899  031F  0020               	movlb	0	; select bank0
  6900  0320  0830               	movf	?___fttol,w
  6901  0321  0021               	movlb	1	; select bank1
  6902  0322  00B2               	movwf	(_voltage^(0+128)+2)
  6903                           
  6904                           ;main.c: 113: voltage[2]=(int16_t)(Vanalogs[2]/.20885);
  6905  0323  082D               	movf	((_Vanalogs+1)^(0+128)+4),w
  6906  0324  00F9               	movwf	___awtoft@c+1
  6907  0325  082C               	movf	(_Vanalogs^(0+128)+4),w
  6908  0326  00F8               	movwf	___awtoft@c
  6909  0327  3193  2366  3182   	fcall	___awtoft
  6910  032A  0878               	movf	?___awtoft,w
  6911  032B  0020               	movlb	0	; select bank0
  6912  032C  00A3               	movwf	___ftdiv@f1
  6913  032D  0879               	movf	?___awtoft+1,w
  6914  032E  00A4               	movwf	___ftdiv@f1+1
  6915  032F  087A               	movf	?___awtoft+2,w
  6916  0330  00A5               	movwf	___ftdiv@f1+2
  6917  0331  30DD               	movlw	221
  6918  0332  00A0               	movwf	___ftdiv@f2
  6919  0333  3055               	movlw	85
  6920  0334  00A1               	movwf	___ftdiv@f2+1
  6921  0335  303E               	movlw	62
  6922  0336  00A2               	movwf	___ftdiv@f2+2
  6923  0337  3189  2199  3182   	fcall	___ftdiv
  6924  033A  0020               	movlb	0	; select bank0
  6925  033B  0820               	movf	?___ftdiv,w
  6926  033C  00B0               	movwf	___fttol@f1
  6927  033D  0821               	movf	?___ftdiv+1,w
  6928  033E  00B1               	movwf	___fttol@f1+1
  6929  033F  0822               	movf	?___ftdiv+2,w
  6930  0340  00B2               	movwf	___fttol@f1+2
  6931  0341  3189  2112  3182   	fcall	___fttol
  6932  0344  0020               	movlb	0	; select bank0
  6933  0345  0831               	movf	?___fttol+1,w
  6934  0346  0021               	movlb	1	; select bank1
  6935  0347  00B5               	movwf	((_voltage+1)^(0+128)+4)
  6936  0348  0020               	movlb	0	; select bank0
  6937  0349  0830               	movf	?___fttol,w
  6938  034A  0021               	movlb	1	; select bank1
  6939  034B  00B4               	movwf	(_voltage^(0+128)+4)
  6940                           
  6941                           ;main.c: 115: voltage[3]=(int16_t)(Vanalogs[3]/.20885);
  6942  034C  082F               	movf	((_Vanalogs+1)^(0+128)+6),w
  6943  034D  00F9               	movwf	___awtoft@c+1
  6944  034E  082E               	movf	(_Vanalogs^(0+128)+6),w
  6945  034F  00F8               	movwf	___awtoft@c
  6946  0350  3193  2366  3182   	fcall	___awtoft
  6947  0353  0878               	movf	?___awtoft,w
  6948  0354  0020               	movlb	0	; select bank0
  6949  0355  00A3               	movwf	___ftdiv@f1
  6950  0356  0879               	movf	?___awtoft+1,w
  6951  0357  00A4               	movwf	___ftdiv@f1+1
  6952  0358  087A               	movf	?___awtoft+2,w
  6953  0359  00A5               	movwf	___ftdiv@f1+2
  6954  035A  30DD               	movlw	221
  6955  035B  00A0               	movwf	___ftdiv@f2
  6956  035C  3055               	movlw	85
  6957  035D  00A1               	movwf	___ftdiv@f2+1
  6958  035E  303E               	movlw	62
  6959  035F  00A2               	movwf	___ftdiv@f2+2
  6960  0360  3189  2199  3182   	fcall	___ftdiv
  6961  0363  0020               	movlb	0	; select bank0
  6962  0364  0820               	movf	?___ftdiv,w
  6963  0365  00B0               	movwf	___fttol@f1
  6964  0366  0821               	movf	?___ftdiv+1,w
  6965  0367  00B1               	movwf	___fttol@f1+1
  6966  0368  0822               	movf	?___ftdiv+2,w
  6967  0369  00B2               	movwf	___fttol@f1+2
  6968  036A  3189  2112  3182   	fcall	___fttol
  6969  036D  0020               	movlb	0	; select bank0
  6970  036E  0831               	movf	?___fttol+1,w
  6971  036F  0021               	movlb	1	; select bank1
  6972  0370  00B7               	movwf	((_voltage+1)^(0+128)+6)
  6973  0371  0020               	movlb	0	; select bank0
  6974  0372  0830               	movf	?___fttol,w
  6975  0373  0021               	movlb	1	; select bank1
  6976  0374  00B6               	movwf	(_voltage^(0+128)+6)
  6977                           
  6978                           ;main.c: 117: calculateCurrent0();
  6979  0375  3195  2520  3182   	fcall	_calculateCurrent0
  6980                           
  6981                           ;main.c: 119: calculateCurrent1();
  6982  0378  3195  2565  3182   	fcall	_calculateCurrent1
  6983                           
  6984                           ;main.c: 121: calculateCurrent2();
  6985  037B  3195  25AA  3182   	fcall	_calculateCurrent2
  6986                           
  6987                           ;main.c: 123: calculateCurrent3();
  6988  037E  3195  25EF  3182   	fcall	_calculateCurrent3
  6989                           
  6990                           ;main.c: 125: if(Imode[0])
  6991  0381  0020               	movlb	0	; select bank0
  6992  0382  0862               	movf	_Imode,w
  6993  0383  1903               	btfsc	3,2
  6994  0384  2BA6               	goto	l3249
  6995                           
  6996                           ;main.c: 126: {
  6997                           ;main.c: 127: if(voltage[2]<MPPT0)
  6998  0385  0021               	movlb	1	; select bank1
  6999  0386  0835               	movf	((_voltage+1)^(0+128)+4),w
  7000  0387  3A80               	xorlw	128
  7001  0388  0020               	movlb	0	; select bank0
  7002  0389  00D8               	movwf	??_main
  7003  038A  0021               	movlb	1	; select bank1
  7004  038B  0862               	movf	(main@MPPT0+1)^(0+128),w
  7005  038C  3A80               	xorlw	128
  7006  038D  0020               	movlb	0	; select bank0
  7007  038E  0258               	subwf	??_main,w
  7008  038F  1D03               	skipz
  7009  0390  2B94               	goto	u3785
  7010  0391  0021               	movlb	1	; select bank1
  7011  0392  0861               	movf	main@MPPT0^(0+128),w
  7012  0393  0234               	subwf	(_voltage^(0+128)+4),w
  7013  0394                     u3785:	
  7014  0394  1C03               	btfss	3,0
  7015  0395  2BB7               	goto	L2
  7016                           
  7017                           ;main.c: 134: else if(voltage[2]>MPPT0)
  7018                           
  7019                           ;main.c: 132: }
  7020                           ;main.c: 133: }
  7021                           
  7022                           ;main.c: 130: {
  7023                           ;main.c: 131: dutyCycle6+=1;
  7024                           
  7025                           ;main.c: 128: {
  7026                           ;main.c: 129: if(dutyCycle6<1023)
  7027  0396  0021               	movlb	1	; select bank1
  7028  0397  0862               	movf	(main@MPPT0+1)^(0+128),w
  7029  0398  3A80               	xorlw	128
  7030  0399  0020               	movlb	0	; select bank0
  7031  039A  00D8               	movwf	??_main
  7032  039B  0021               	movlb	1	; select bank1
  7033  039C  0835               	movf	((_voltage+1)^(0+128)+4),w
  7034  039D  3A80               	xorlw	128
  7035  039E  0020               	movlb	0	; select bank0
  7036  039F  0258               	subwf	??_main,w
  7037  03A0  1D03               	skipz
  7038  03A1  2BD1               	goto	u3845
  7039  03A2  0021               	movlb	1	; select bank1
  7040  03A3  0834               	movf	(_voltage^(0+128)+4),w
  7041  03A4  0261               	subwf	main@MPPT0^(0+128),w
  7042  03A5  2BD1               	goto	u3845
  7043  03A6                     l3249:	
  7044                           ;main.c: 142: }
  7045                           
  7046                           ;main.c: 139: }
  7047                           ;main.c: 140: }
  7048                           
  7049                           ;main.c: 137: {
  7050                           ;main.c: 138: dutyCycle6-=1;
  7051                           
  7052                           ;main.c: 135: {
  7053                           ;main.c: 136: if(dutyCycle6>0)
  7054                           
  7055                           
  7056                           ;main.c: 143: else
  7057                           ;main.c: 144: {
  7058                           ;main.c: 145: if(voltage[0]>(int16_t)Vref[0])
  7059  03A6  0020               	movlb	0	; select bank0
  7060  03A7  085B               	movf	_Vref+1,w
  7061  03A8  3A80               	xorlw	128
  7062  03A9  00D8               	movwf	??_main
  7063  03AA  0021               	movlb	1	; select bank1
  7064  03AB  0831               	movf	(_voltage+1)^(0+128),w
  7065  03AC  3A80               	xorlw	128
  7066  03AD  0020               	movlb	0	; select bank0
  7067  03AE  0258               	subwf	??_main,w
  7068  03AF  1D03               	skipz
  7069  03B0  2BB5               	goto	u3825
  7070  03B1  0021               	movlb	1	; select bank1
  7071  03B2  0830               	movf	_voltage^(0+128),w
  7072  03B3  0020               	movlb	0	; select bank0
  7073  03B4  025A               	subwf	_Vref,w
  7074  03B5                     u3825:	
  7075  03B5  1803               	skipnc
  7076  03B6  2BC4               	goto	l3255
  7077  03B7                     L2:	
  7078                           
  7079                           ;main.c: 146: {
  7080                           ;main.c: 147: if(dutyCycle6<1023) dutyCycle6+=1;
  7081  03B7  3003               	movlw	3
  7082  03B8  0021               	movlb	1	; select bank1
  7083  03B9  026C               	subwf	(main@dutyCycle6+1)^(0+128),w
  7084  03BA  30FF               	movlw	255
  7085  03BB  1903               	skipnz
  7086  03BC  026B               	subwf	main@dutyCycle6^(0+128),w
  7087  03BD  1803               	skipnc
  7088  03BE  2BDC               	goto	l3261
  7089  03BF  3001               	movlw	1
  7090  03C0  07EB               	addwf	main@dutyCycle6^(0+128),f
  7091  03C1  3000               	movlw	0
  7092  03C2  3DEC               	addwfc	(main@dutyCycle6+1)^(0+128),f
  7093                           
  7094                           ;main.c: 148: }
  7095  03C3  2BDC               	goto	l3261
  7096  03C4                     l3255:	
  7097                           
  7098                           ;main.c: 149: else if(voltage[0]<(int16_t)Vref[0])
  7099  03C4  0021               	movlb	1	; select bank1
  7100  03C5  0831               	movf	(_voltage+1)^(0+128),w
  7101  03C6  3A80               	xorlw	128
  7102  03C7  0020               	movlb	0	; select bank0
  7103  03C8  00D8               	movwf	??_main
  7104  03C9  085B               	movf	_Vref+1,w
  7105  03CA  3A80               	xorlw	128
  7106  03CB  0258               	subwf	??_main,w
  7107  03CC  1D03               	skipz
  7108  03CD  2BD1               	goto	u3845
  7109  03CE  085A               	movf	_Vref,w
  7110  03CF  0021               	movlb	1	; select bank1
  7111  03D0  0230               	subwf	_voltage^(0+128),w
  7112  03D1                     u3845:	
  7113  03D1  1803               	skipnc
  7114  03D2  2BDC               	goto	l3261
  7115                           
  7116                           ;main.c: 150: {
  7117                           ;main.c: 151: if(dutyCycle6>0) dutyCycle6-=1;;
  7118  03D3  0021               	movlb	1	; select bank1
  7119  03D4  086B               	movf	main@dutyCycle6^(0+128),w
  7120  03D5  046C               	iorwf	(main@dutyCycle6+1)^(0+128),w
  7121  03D6  1903               	btfsc	3,2
  7122  03D7  2BDC               	goto	l3261
  7123  03D8  3001               	movlw	1
  7124  03D9  02EB               	subwf	main@dutyCycle6^(0+128),f
  7125  03DA  3000               	movlw	0
  7126  03DB  3BEC               	subwfb	(main@dutyCycle6+1)^(0+128),f
  7127  03DC                     l3261:	
  7128                           ;main.c: 152: }
  7129                           
  7130                           
  7131                           ;main.c: 154: }
  7132                           ;main.c: 156: if(Imode[1])
  7133  03DC  0020               	movlb	0	; select bank0
  7134  03DD  0863               	movf	_Imode+1,w
  7135  03DE  1903               	btfsc	3,2
  7136  03DF  2BF2               	goto	l3273
  7137                           
  7138                           ;main.c: 157: {
  7139                           ;main.c: 158: if(voltage[3]<MPPT1)
  7140  03E0  0021               	movlb	1	; select bank1
  7141  03E1  0837               	movf	((_voltage+1)^(0+128)+6),w
  7142  03E2  3A80               	xorlw	128
  7143  03E3  0020               	movlb	0	; select bank0
  7144  03E4  00D8               	movwf	??_main
  7145  03E5  0021               	movlb	1	; select bank1
  7146  03E6  0860               	movf	(main@MPPT1+1)^(0+128),w
  7147  03E7  3A80               	xorlw	128
  7148  03E8  0020               	movlb	0	; select bank0
  7149  03E9  0258               	subwf	??_main,w
  7150  03EA  1D03               	skipz
  7151  03EB  2BEF               	goto	u3875
  7152  03EC  0021               	movlb	1	; select bank1
  7153  03ED  085F               	movf	main@MPPT1^(0+128),w
  7154  03EE  0236               	subwf	(_voltage^(0+128)+6),w
  7155  03EF                     u3875:	
  7156  03EF  1C03               	btfss	3,0
  7157  03F0  2C03               	goto	L3
  7158                           
  7159                           ;main.c: 163: }
  7160                           ;main.c: 164: }
  7161                           
  7162                           ;main.c: 161: {
  7163                           ;main.c: 162: dutyCycle7+=1;
  7164                           
  7165                           ;main.c: 159: {
  7166                           ;main.c: 160: if(dutyCycle7<1023)
  7167  03F1  2C1F               	goto	L4
  7168  03F2                     l3273:	
  7169                           ;main.c: 168: }
  7170                           ;main.c: 169: }
  7171                           
  7172                           ;main.c: 166: {
  7173                           ;main.c: 167: dutyCycle7-=1;
  7174                           
  7175                           ;main.c: 165: else if(dutyCycle7>0)
  7176                           
  7177                           
  7178                           ;main.c: 170: else
  7179                           ;main.c: 171: {
  7180                           ;main.c: 172: if(voltage[1]>(int16_t)Vref[1])
  7181  03F2  0020               	movlb	0	; select bank0
  7182  03F3  085D               	movf	_Vref+3,w
  7183  03F4  3A80               	xorlw	128
  7184  03F5  00D8               	movwf	??_main
  7185  03F6  0021               	movlb	1	; select bank1
  7186  03F7  0833               	movf	((_voltage+1)^(0+128)+2),w
  7187  03F8  3A80               	xorlw	128
  7188  03F9  0020               	movlb	0	; select bank0
  7189  03FA  0258               	subwf	??_main,w
  7190  03FB  1D03               	skipz
  7191  03FC  2C01               	goto	u3905
  7192  03FD  0021               	movlb	1	; select bank1
  7193  03FE  0832               	movf	(_voltage^(0+128)+2),w
  7194  03FF  0020               	movlb	0	; select bank0
  7195  0400  025C               	subwf	_Vref+2,w
  7196  0401                     u3905:	
  7197  0401  1803               	skipnc
  7198  0402  2C10               	goto	l3279
  7199  0403                     L3:	
  7200                           
  7201                           ;main.c: 173: {
  7202                           ;main.c: 174: if(dutyCycle7<1023) dutyCycle7+=1;
  7203  0403  3003               	movlw	3
  7204  0404  0021               	movlb	1	; select bank1
  7205  0405  026E               	subwf	(main@dutyCycle7+1)^(0+128),w
  7206  0406  30FF               	movlw	255
  7207  0407  1903               	skipnz
  7208  0408  026D               	subwf	main@dutyCycle7^(0+128),w
  7209  0409  1803               	skipnc
  7210  040A  2C28               	goto	l3285
  7211  040B  3001               	movlw	1
  7212  040C  07ED               	addwf	main@dutyCycle7^(0+128),f
  7213  040D  3000               	movlw	0
  7214  040E  3DEE               	addwfc	(main@dutyCycle7+1)^(0+128),f
  7215                           
  7216                           ;main.c: 175: }
  7217  040F  2C28               	goto	l3285
  7218  0410                     l3279:	
  7219                           
  7220                           ;main.c: 176: else if(voltage[1]<(int16_t)Vref[1])
  7221  0410  0021               	movlb	1	; select bank1
  7222  0411  0833               	movf	((_voltage+1)^(0+128)+2),w
  7223  0412  3A80               	xorlw	128
  7224  0413  0020               	movlb	0	; select bank0
  7225  0414  00D8               	movwf	??_main
  7226  0415  085D               	movf	_Vref+3,w
  7227  0416  3A80               	xorlw	128
  7228  0417  0258               	subwf	??_main,w
  7229  0418  1D03               	skipz
  7230  0419  2C1D               	goto	u3925
  7231  041A  085C               	movf	_Vref+2,w
  7232  041B  0021               	movlb	1	; select bank1
  7233  041C  0232               	subwf	(_voltage^(0+128)+2),w
  7234  041D                     u3925:	
  7235  041D  1803               	skipnc
  7236  041E  2C28               	goto	l3285
  7237  041F                     L4:	
  7238                           
  7239                           ;main.c: 177: {
  7240                           ;main.c: 178: if(dutyCycle7>0) dutyCycle7-=1;;
  7241  041F  0021               	movlb	1	; select bank1
  7242  0420  086D               	movf	main@dutyCycle7^(0+128),w
  7243  0421  046E               	iorwf	(main@dutyCycle7+1)^(0+128),w
  7244  0422  1903               	btfsc	3,2
  7245  0423  2C28               	goto	l3285
  7246  0424  3001               	movlw	1
  7247  0425  02ED               	subwf	main@dutyCycle7^(0+128),f
  7248  0426  3000               	movlw	0
  7249  0427  3BEE               	subwfb	(main@dutyCycle7+1)^(0+128),f
  7250  0428                     l3285:	
  7251                           ;main.c: 179: }
  7252                           
  7253                           
  7254                           ;main.c: 181: }
  7255                           ;main.c: 183: slowLoop+=1;
  7256  0428  3001               	movlw	1
  7257  0429  0020               	movlb	0	; select bank0
  7258  042A  00D8               	movwf	??_main
  7259  042B  0858               	movf	??_main,w
  7260  042C  0021               	movlb	1	; select bank1
  7261  042D  07DE               	addwf	main@slowLoop^(0+128),f
  7262                           
  7263                           ;main.c: 185: PWM1_LoadDutyValue(dutyCycle1);
  7264  042E  0867               	movf	(main@dutyCycle1+1)^(0+128),w
  7265  042F  00F1               	movwf	PWM1_LoadDutyValue@dutyCycle1+1
  7266  0430  0866               	movf	main@dutyCycle1^(0+128),w
  7267  0431  00F0               	movwf	PWM1_LoadDutyValue@dutyCycle1
  7268  0432  3192  22AD  3182   	fcall	_PWM1_LoadDutyValue
  7269                           
  7270                           ;main.c: 186: PWM6_LoadDutyValue(dutyCycle6);
  7271  0435  0021               	movlb	1	; select bank1
  7272  0436  086C               	movf	(main@dutyCycle6+1)^(0+128),w
  7273  0437  00F1               	movwf	PWM6_LoadDutyValue@dutyCycle6+1
  7274  0438  086B               	movf	main@dutyCycle6^(0+128),w
  7275  0439  00F0               	movwf	PWM6_LoadDutyValue@dutyCycle6
  7276  043A  3192  22C3  3182   	fcall	_PWM6_LoadDutyValue
  7277                           
  7278                           ;main.c: 187: PWM7_LoadDutyValue(dutyCycle7);
  7279  043D  0021               	movlb	1	; select bank1
  7280  043E  086E               	movf	(main@dutyCycle7+1)^(0+128),w
  7281  043F  00F1               	movwf	PWM7_LoadDutyValue@dutyCycle7+1
  7282  0440  086D               	movf	main@dutyCycle7^(0+128),w
  7283  0441  00F0               	movwf	PWM7_LoadDutyValue@dutyCycle7
  7284  0442  3192  22D9  3182   	fcall	_PWM7_LoadDutyValue
  7285                           
  7286                           ;main.c: 189: menuButton = readButton();
  7287  0445  3188  200E  3182   	fcall	_readButton
  7288  0448  0020               	movlb	0	; select bank0
  7289  0449  00D8               	movwf	??_main
  7290  044A  0858               	movf	??_main,w
  7291  044B  0021               	movlb	1	; select bank1
  7292  044C  00E5               	movwf	main@menuButton^(0+128)
  7293                           
  7294                           ;main.c: 190: if(menuButton == 2) if(MPPT0>2700)MPPT1-=1;
  7295  044D  3002               	movlw	2
  7296  044E  0665               	xorwf	main@menuButton^(0+128),w
  7297  044F  1D03               	btfss	3,2
  7298  0450  2C63               	goto	l3299
  7299  0451  0862               	movf	(main@MPPT0+1)^(0+128),w
  7300  0452  3A80               	xorlw	128
  7301  0453  0020               	movlb	0	; select bank0
  7302  0454  00D8               	movwf	??_main
  7303  0455  308A               	movlw	138
  7304  0456  0258               	subwf	??_main,w
  7305  0457  1D03               	skipz
  7306  0458  2C5C               	goto	u3955
  7307  0459  308D               	movlw	141
  7308  045A  0021               	movlb	1	; select bank1
  7309  045B  0261               	subwf	main@MPPT0^(0+128),w
  7310  045C                     u3955:	
  7311  045C  1C03               	skipc
  7312  045D  2C63               	goto	l3299
  7313  045E  30FF               	movlw	255
  7314  045F  0021               	movlb	1	; select bank1
  7315  0460  07DF               	addwf	main@MPPT1^(0+128),f
  7316  0461  30FF               	movlw	255
  7317  0462  3DE0               	addwfc	(main@MPPT1+1)^(0+128),f
  7318  0463                     l3299:	
  7319                           
  7320                           ;main.c: 191: if(menuButton == 3)if(MPPT1<3200)MPPT1+=1;
  7321  0463  3003               	movlw	3
  7322  0464  0021               	movlb	1	; select bank1
  7323  0465  0665               	xorwf	main@menuButton^(0+128),w
  7324  0466  1D03               	btfss	3,2
  7325  0467  2C7A               	goto	l3305
  7326  0468  0860               	movf	(main@MPPT1+1)^(0+128),w
  7327  0469  3A80               	xorlw	128
  7328  046A  0020               	movlb	0	; select bank0
  7329  046B  00D8               	movwf	??_main
  7330  046C  308C               	movlw	140
  7331  046D  0258               	subwf	??_main,w
  7332  046E  1D03               	skipz
  7333  046F  2C73               	goto	u3975
  7334  0470  3080               	movlw	128
  7335  0471  0021               	movlb	1	; select bank1
  7336  0472  025F               	subwf	main@MPPT1^(0+128),w
  7337  0473                     u3975:	
  7338  0473  1803               	skipnc
  7339  0474  2C7A               	goto	l3305
  7340  0475  3001               	movlw	1
  7341  0476  0021               	movlb	1	; select bank1
  7342  0477  07DF               	addwf	main@MPPT1^(0+128),f
  7343  0478  3000               	movlw	0
  7344  0479  3DE0               	addwfc	(main@MPPT1+1)^(0+128),f
  7345  047A                     l3305:	
  7346                           
  7347                           ;main.c: 192: if(menuButton == 1)LCDInit();
  7348  047A  0021               	movlb	1	; select bank1
  7349  047B  0365               	decf	main@menuButton^(0+128),w
  7350  047C  1D03               	btfss	3,2
  7351  047D  2C81               	goto	l3309
  7352  047E  3194  2434  3182   	fcall	_LCDInit
  7353  0481                     l3309:	
  7354                           
  7355                           ;main.c: 194: if(slowLoop>250)
  7356  0481  30FB               	movlw	251
  7357  0482  0021               	movlb	1	; select bank1
  7358  0483  025E               	subwf	main@slowLoop^(0+128),w
  7359  0484  1C03               	skipc
  7360  0485  2A6C               	goto	l3193
  7361                           
  7362                           ;main.c: 195: {
  7363                           ;main.c: 198: largerIOut=current[0];
  7364  0486  0839               	movf	(_current+1)^(0+128),w
  7365  0487  00E4               	movwf	(main@largerIOut+1)^(0+128)
  7366  0488  0838               	movf	_current^(0+128),w
  7367  0489  00E3               	movwf	main@largerIOut^(0+128)
  7368                           
  7369                           ;main.c: 205: if(largerIOut>25)
  7370  048A  0864               	movf	(main@largerIOut+1)^(0+128),w
  7371  048B  3A80               	xorlw	128
  7372  048C  0020               	movlb	0	; select bank0
  7373  048D  00D8               	movwf	??_main
  7374  048E  3080               	movlw	128
  7375  048F  0258               	subwf	??_main,w
  7376  0490  1D03               	skipz
  7377  0491  2C95               	goto	u4005
  7378  0492  301A               	movlw	26
  7379  0493  0021               	movlb	1	; select bank1
  7380  0494  0263               	subwf	main@largerIOut^(0+128),w
  7381  0495                     u4005:	
  7382  0495  1C03               	skipc
  7383  0496  2CE9               	goto	l3331
  7384                           
  7385                           ;main.c: 206: {
  7386                           ;main.c: 207: if((uint16_t)largerIOut+5>dutyCycle1)
  7387  0497  0021               	movlb	1	; select bank1
  7388  0498  0863               	movf	main@largerIOut^(0+128),w
  7389  0499  3E05               	addlw	5
  7390  049A  0020               	movlb	0	; select bank0
  7391  049B  00D8               	movwf	??_main
  7392  049C  3000               	movlw	0
  7393  049D  0021               	movlb	1	; select bank1
  7394  049E  3D64               	addwfc	(main@largerIOut+1)^(0+128),w
  7395  049F  0020               	movlb	0	; select bank0
  7396  04A0  00D9               	movwf	??_main+1
  7397  04A1  0859               	movf	??_main+1,w
  7398  04A2  0021               	movlb	1	; select bank1
  7399  04A3  0267               	subwf	(main@dutyCycle1+1)^(0+128),w
  7400  04A4  1D03               	skipz
  7401  04A5  2CAA               	goto	u4015
  7402  04A6  0020               	movlb	0	; select bank0
  7403  04A7  0858               	movf	??_main,w
  7404  04A8  0021               	movlb	1	; select bank1
  7405  04A9  0266               	subwf	main@dutyCycle1^(0+128),w
  7406  04AA                     u4015:	
  7407  04AA  1803               	skipnc
  7408  04AB  2CB1               	goto	l3317
  7409                           
  7410                           ;main.c: 208: {
  7411                           ;main.c: 209: dutyCycle1+=1;
  7412  04AC  3001               	movlw	1
  7413  04AD  07E6               	addwf	main@dutyCycle1^(0+128),f
  7414  04AE  3000               	movlw	0
  7415  04AF  3DE7               	addwfc	(main@dutyCycle1+1)^(0+128),f
  7416                           
  7417                           ;main.c: 210: }
  7418  04B0  2CB5               	goto	l3319
  7419  04B1                     l3317:	
  7420                           
  7421                           ;main.c: 211: else dutyCycle1-=1;
  7422  04B1  3001               	movlw	1
  7423  04B2  02E6               	subwf	main@dutyCycle1^(0+128),f
  7424  04B3  3000               	movlw	0
  7425  04B4  3BE7               	subwfb	(main@dutyCycle1+1)^(0+128),f
  7426  04B5                     l3319:	
  7427                           
  7428                           ;main.c: 213: if((uint16_t)largerIOut+5>tempFanOutput)
  7429  04B5  0863               	movf	main@largerIOut^(0+128),w
  7430  04B6  3E05               	addlw	5
  7431  04B7  0020               	movlb	0	; select bank0
  7432  04B8  00D8               	movwf	??_main
  7433  04B9  3000               	movlw	0
  7434  04BA  0021               	movlb	1	; select bank1
  7435  04BB  3D64               	addwfc	(main@largerIOut+1)^(0+128),w
  7436  04BC  0020               	movlb	0	; select bank0
  7437  04BD  00D9               	movwf	??_main+1
  7438  04BE  0859               	movf	??_main+1,w
  7439  04BF  0021               	movlb	1	; select bank1
  7440  04C0  0269               	subwf	(main@tempFanOutput+1)^(0+128),w
  7441  04C1  1D03               	skipz
  7442  04C2  2CC7               	goto	u4025
  7443  04C3  0020               	movlb	0	; select bank0
  7444  04C4  0858               	movf	??_main,w
  7445  04C5  0021               	movlb	1	; select bank1
  7446  04C6  0268               	subwf	main@tempFanOutput^(0+128),w
  7447  04C7                     u4025:	
  7448  04C7  1803               	skipnc
  7449  04C8  2CD5               	goto	l3325
  7450                           
  7451                           ;main.c: 214: {
  7452                           ;main.c: 215: if(tempFanOutput<75)
  7453  04C9  3000               	movlw	0
  7454  04CA  0269               	subwf	(main@tempFanOutput+1)^(0+128),w
  7455  04CB  304B               	movlw	75
  7456  04CC  1903               	skipnz
  7457  04CD  0268               	subwf	main@tempFanOutput^(0+128),w
  7458  04CE  1803               	skipnc
  7459  04CF  2CDD               	goto	l493
  7460                           
  7461                           ;main.c: 216: {
  7462                           ;main.c: 217: tempFanOutput+=1;
  7463  04D0  3001               	movlw	1
  7464  04D1  07E8               	addwf	main@tempFanOutput^(0+128),f
  7465  04D2  3000               	movlw	0
  7466  04D3  3DE9               	addwfc	(main@tempFanOutput+1)^(0+128),f
  7467                           
  7468                           ;main.c: 218: }
  7469                           ;main.c: 219: }
  7470  04D4  2CDD               	goto	l493
  7471  04D5                     l3325:	
  7472                           
  7473                           ;main.c: 220: else
  7474                           ;main.c: 221: {
  7475                           ;main.c: 222: if(tempFanOutput>0)tempFanOutput-=1;
  7476  04D5  0868               	movf	main@tempFanOutput^(0+128),w
  7477  04D6  0469               	iorwf	(main@tempFanOutput+1)^(0+128),w
  7478  04D7  1903               	btfsc	3,2
  7479  04D8  2CDD               	goto	l493
  7480  04D9  3001               	movlw	1
  7481  04DA  02E8               	subwf	main@tempFanOutput^(0+128),f
  7482  04DB  3000               	movlw	0
  7483  04DC  3BE9               	subwfb	(main@tempFanOutput+1)^(0+128),f
  7484  04DD                     l493:	
  7485                           
  7486                           ;main.c: 223: }
  7487                           ;main.c: 225: dutyCycle1=tempFanOutput;
  7488  04DD  0869               	movf	(main@tempFanOutput+1)^(0+128),w
  7489  04DE  00E7               	movwf	(main@dutyCycle1+1)^(0+128)
  7490  04DF  0868               	movf	main@tempFanOutput^(0+128),w
  7491  04E0  00E6               	movwf	main@dutyCycle1^(0+128)
  7492                           
  7493                           ;main.c: 226: if(dutyCycle1<19)dutyCycle1=0;
  7494  04E1  3000               	movlw	0
  7495  04E2  0267               	subwf	(main@dutyCycle1+1)^(0+128),w
  7496  04E3  3013               	movlw	19
  7497  04E4  1903               	skipnz
  7498  04E5  0266               	subwf	main@dutyCycle1^(0+128),w
  7499  04E6  1803               	skipnc
  7500  04E7  2CEC               	goto	l3333
  7501  04E8  2CEA               	goto	L1
  7502  04E9                     l3331:	
  7503                           ;main.c: 227: }
  7504                           
  7505                           
  7506                           ;main.c: 228: else
  7507                           ;main.c: 229: {
  7508                           ;main.c: 230: dutyCycle1=0;
  7509  04E9  0021               	movlb	1	; select bank1
  7510  04EA                     L1:	
  7511  04EA  01E6               	clrf	main@dutyCycle1^(0+128)
  7512  04EB  01E7               	clrf	(main@dutyCycle1+1)^(0+128)
  7513  04EC                     l3333:	
  7514                           
  7515                           ;main.c: 231: }
  7516                           ;main.c: 232: if(!(RB2))
  7517  04EC  0020               	movlb	0	; select bank0
  7518  04ED  190D               	btfsc	13,2	;volatile
  7519  04EE  2CFD               	goto	l3337
  7520                           
  7521                           ;main.c: 233: {
  7522                           ;main.c: 234: dutyCycle1=55;
  7523  04EF  3037               	movlw	55
  7524  04F0  0021               	movlb	1	; select bank1
  7525  04F1  00E6               	movwf	main@dutyCycle1^(0+128)
  7526  04F2  3000               	movlw	0
  7527  04F3  00E7               	movwf	(main@dutyCycle1^(0+128)+1)
  7528                           
  7529                           ;main.c: 235: batteryState[0]=CHARGE;
  7530  04F4  3004               	movlw	4
  7531  04F5  0020               	movlb	0	; select bank0
  7532  04F6  00D8               	movwf	??_main
  7533  04F7  0858               	movf	??_main,w
  7534  04F8  00E4               	movwf	_batteryState
  7535                           
  7536                           ;main.c: 236: batteryState[1]=CHARGE;
  7537  04F9  3004               	movlw	4
  7538  04FA  00D8               	movwf	??_main
  7539  04FB  0858               	movf	??_main,w
  7540  04FC  00E5               	movwf	_batteryState+1
  7541  04FD                     l3337:	
  7542                           
  7543                           ;main.c: 237: }
  7544                           ;main.c: 239: ADREF = 0x00;
  7545  04FD  0021               	movlb	1	; select bank1
  7546  04FE  019A               	clrf	26	;volatile
  7547                           
  7548                           ;main.c: 240: batteryTemp=tempCalc(ADCRead(9));
  7549  04FF  3009               	movlw	9
  7550  0500  3192  2298  3182   	fcall	_ADCRead
  7551  0503  0871               	movf	?_ADCRead+1,w
  7552  0504  0020               	movlb	0	; select bank0
  7553  0505  00CE               	movwf	tempCalc@analogValue+1
  7554  0506  0870               	movf	?_ADCRead,w
  7555  0507  00CD               	movwf	tempCalc@analogValue
  7556  0508  318B  23A6  3182   	fcall	_tempCalc
  7557  050B  0020               	movlb	0	; select bank0
  7558  050C  084E               	movf	?_tempCalc+1,w
  7559  050D  00ED               	movwf	_batteryTemp+1
  7560  050E  084D               	movf	?_tempCalc,w
  7561  050F  00EC               	movwf	_batteryTemp
  7562                           
  7563                           ;main.c: 241: ADREF = 0x03;
  7564  0510  3003               	movlw	3
  7565  0511  0021               	movlb	1	; select bank1
  7566  0512  009A               	movwf	26	;volatile
  7567                           
  7568                           ;main.c: 243: displayRefresh+=1;
  7569  0513  3001               	movlw	1
  7570  0514  0020               	movlb	0	; select bank0
  7571  0515  00D8               	movwf	??_main
  7572  0516  0858               	movf	??_main,w
  7573  0517  0021               	movlb	1	; select bank1
  7574  0518  07DD               	addwf	main@displayRefresh^(0+128),f
  7575                           
  7576                           ;main.c: 244: if(displayRefresh>80)
  7577  0519  3051               	movlw	81
  7578  051A  025D               	subwf	main@displayRefresh^(0+128),w
  7579  051B  1C03               	skipc
  7580  051C  2D22               	goto	l3351
  7581                           
  7582                           ;main.c: 245: {
  7583                           ;main.c: 246: LCDClear();
  7584  051D  3193  23AB  3182   	fcall	_LCDClear
  7585                           
  7586                           ;main.c: 247: displayRefresh=0;
  7587  0520  0021               	movlb	1	; select bank1
  7588  0521  01DD               	clrf	main@displayRefresh^(0+128)
  7589  0522                     l3351:	
  7590                           
  7591                           ;main.c: 249: }
  7592                           ;main.c: 250: Battery_State_Machine(0);
  7593  0522  3000               	movlw	0
  7594  0523  3180  20C1  3182   	fcall	_Battery_State_Machine
  7595                           
  7596                           ;main.c: 251: Battery_State_Machine(1);
  7597  0526  3001               	movlw	1
  7598  0527  3180  20C1  3182   	fcall	_Battery_State_Machine
  7599                           
  7600                           ;main.c: 254: { gotoXY(0,0); LCDWriteString("In:");};
  7601  052A  01F5               	clrf	gotoXY@y
  7602  052B  3000               	movlw	0
  7603  052C  3192  2271  3182   	fcall	_gotoXY
  7604  052F  3025               	movlw	low (STR_1| (0+32768))
  7605  0530  00FC               	movwf	LCDWriteString@characters
  7606  0531  3098               	movlw	high (STR_1| (0+32768))
  7607  0532  00FD               	movwf	LCDWriteString@characters+1
  7608  0533  3192  2284  3182   	fcall	_LCDWriteString
  7609                           
  7610                           ;main.c: 255: { gotoXY(26,0); LCDWriteString("Out:");};
  7611  0536  01F5               	clrf	gotoXY@y
  7612  0537  301A               	movlw	26
  7613  0538  3192  2271  3182   	fcall	_gotoXY
  7614  053B  3020               	movlw	low (STR_2| (0+32768))
  7615  053C  00FC               	movwf	LCDWriteString@characters
  7616  053D  3098               	movlw	high (STR_2| (0+32768))
  7617  053E  00FD               	movwf	LCDWriteString@characters+1
  7618  053F  3192  2284  3182   	fcall	_LCDWriteString
  7619                           
  7620                           ;main.c: 256: { gotoXY(52,0); LCDWriteString("Ref:");};
  7621  0542  01F5               	clrf	gotoXY@y
  7622  0543  3034               	movlw	52
  7623  0544  3192  2271  3182   	fcall	_gotoXY
  7624  0547  301B               	movlw	low (STR_3| (0+32768))
  7625  0548  00FC               	movwf	LCDWriteString@characters
  7626  0549  3098               	movlw	high (STR_3| (0+32768))
  7627  054A  00FD               	movwf	LCDWriteString@characters+1
  7628  054B  3192  2284  3182   	fcall	_LCDWriteString
  7629                           
  7630                           ;main.c: 258: { gotoXY(0,1); LCDWriteInt(voltage[2],4, 2, 0);};
  7631  054E  01F5               	clrf	gotoXY@y
  7632  054F  0AF5               	incf	gotoXY@y,f
  7633  0550  3000               	movlw	0
  7634  0551  3192  2271  3182   	fcall	_gotoXY
  7635  0554  0021               	movlb	1	; select bank1
  7636  0555  0835               	movf	((_voltage+1)^(0+128)+4),w
  7637  0556  0020               	movlb	0	; select bank0
  7638  0557  00A1               	movwf	LCDWriteInt@value+1
  7639  0558  0021               	movlb	1	; select bank1
  7640  0559  0834               	movf	(_voltage^(0+128)+4),w
  7641  055A  0020               	movlb	0	; select bank0
  7642  055B  00A0               	movwf	LCDWriteInt@value
  7643  055C  3004               	movlw	4
  7644  055D  00D8               	movwf	??_main
  7645  055E  0858               	movf	??_main,w
  7646  055F  00A2               	movwf	LCDWriteInt@fieldLength
  7647  0560  3002               	movlw	2
  7648  0561  00D9               	movwf	??_main+1
  7649  0562  0859               	movf	??_main+1,w
  7650  0563  00A3               	movwf	LCDWriteInt@numPlaces
  7651  0564  01A4               	clrf	LCDWriteInt@sign
  7652  0565  3180  2008  3182   	fcall	_LCDWriteInt
  7653                           
  7654                           ;main.c: 259: LCDWriteCharacter('V');
  7655  0568  3056               	movlw	86
  7656  0569  3196  2685  3182   	fcall	_LCDWriteCharacter
  7657                           
  7658                           ;main.c: 261: { gotoXY(26,1); LCDWriteInt(voltage[0],4, 2, 0);};
  7659  056C  01F5               	clrf	gotoXY@y
  7660  056D  0AF5               	incf	gotoXY@y,f
  7661  056E  301A               	movlw	26
  7662  056F  3192  2271  3182   	fcall	_gotoXY
  7663  0572  0021               	movlb	1	; select bank1
  7664  0573  0831               	movf	(_voltage+1)^(0+128),w
  7665  0574  0020               	movlb	0	; select bank0
  7666  0575  00A1               	movwf	LCDWriteInt@value+1
  7667  0576  0021               	movlb	1	; select bank1
  7668  0577  0830               	movf	_voltage^(0+128),w
  7669  0578  0020               	movlb	0	; select bank0
  7670  0579  00A0               	movwf	LCDWriteInt@value
  7671  057A  3004               	movlw	4
  7672  057B  00D8               	movwf	??_main
  7673  057C  0858               	movf	??_main,w
  7674  057D  00A2               	movwf	LCDWriteInt@fieldLength
  7675  057E  3002               	movlw	2
  7676  057F  00D9               	movwf	??_main+1
  7677  0580  0859               	movf	??_main+1,w
  7678  0581  00A3               	movwf	LCDWriteInt@numPlaces
  7679  0582  01A4               	clrf	LCDWriteInt@sign
  7680  0583  3180  2008  3182   	fcall	_LCDWriteInt
  7681                           
  7682                           ;main.c: 262: LCDWriteCharacter('V');
  7683  0586  3056               	movlw	86
  7684  0587  3196  2685  3182   	fcall	_LCDWriteCharacter
  7685                           
  7686                           ;main.c: 264: { gotoXY(52,1); LCDWriteInt(Vref[0],4, 2, 0);};
  7687  058A  01F5               	clrf	gotoXY@y
  7688  058B  0AF5               	incf	gotoXY@y,f
  7689  058C  3034               	movlw	52
  7690  058D  3192  2271  3182   	fcall	_gotoXY
  7691  0590  0020               	movlb	0	; select bank0
  7692  0591  085B               	movf	_Vref+1,w
  7693  0592  00A1               	movwf	LCDWriteInt@value+1
  7694  0593  085A               	movf	_Vref,w
  7695  0594  00A0               	movwf	LCDWriteInt@value
  7696  0595  3004               	movlw	4
  7697  0596  00D8               	movwf	??_main
  7698  0597  0858               	movf	??_main,w
  7699  0598  00A2               	movwf	LCDWriteInt@fieldLength
  7700  0599  3002               	movlw	2
  7701  059A  00D9               	movwf	??_main+1
  7702  059B  0859               	movf	??_main+1,w
  7703  059C  00A3               	movwf	LCDWriteInt@numPlaces
  7704  059D  01A4               	clrf	LCDWriteInt@sign
  7705  059E  3180  2008  3182   	fcall	_LCDWriteInt
  7706                           
  7707                           ;main.c: 265: LCDWriteCharacter('V');
  7708  05A1  3056               	movlw	86
  7709  05A2  3196  2685  3182   	fcall	_LCDWriteCharacter
  7710                           
  7711                           ;main.c: 267: { gotoXY(80,1); LCDWriteInt(Imode[0],1, 0, 0);};
  7712  05A5  01F5               	clrf	gotoXY@y
  7713  05A6  0AF5               	incf	gotoXY@y,f
  7714  05A7  3050               	movlw	80
  7715  05A8  3192  2271  3182   	fcall	_gotoXY
  7716  05AB  0020               	movlb	0	; select bank0
  7717  05AC  0862               	movf	_Imode,w
  7718  05AD  00A0               	movwf	LCDWriteInt@value
  7719  05AE  01A1               	clrf	LCDWriteInt@value+1
  7720  05AF  1BA0               	btfsc	LCDWriteInt@value,7
  7721  05B0  03A1               	decf	LCDWriteInt@value+1,f
  7722  05B1  01A2               	clrf	LCDWriteInt@fieldLength
  7723  05B2  0AA2               	incf	LCDWriteInt@fieldLength,f
  7724  05B3  01A3               	clrf	LCDWriteInt@numPlaces
  7725  05B4  01A4               	clrf	LCDWriteInt@sign
  7726  05B5  3180  2008  3182   	fcall	_LCDWriteInt
  7727                           
  7728                           ;main.c: 269: { gotoXY(0,2); LCDWriteInt(current[2],3, 1, 0);};
  7729  05B8  3002               	movlw	2
  7730  05B9  0020               	movlb	0	; select bank0
  7731  05BA  00D8               	movwf	??_main
  7732  05BB  0858               	movf	??_main,w
  7733  05BC  00F5               	movwf	gotoXY@y
  7734  05BD  3000               	movlw	0
  7735  05BE  3192  2271  3182   	fcall	_gotoXY
  7736  05C1  0021               	movlb	1	; select bank1
  7737  05C2  083D               	movf	((_current+1)^(0+128)+4),w
  7738  05C3  0020               	movlb	0	; select bank0
  7739  05C4  00A1               	movwf	LCDWriteInt@value+1
  7740  05C5  0021               	movlb	1	; select bank1
  7741  05C6  083C               	movf	(_current^(0+128)+4),w
  7742  05C7  0020               	movlb	0	; select bank0
  7743  05C8  00A0               	movwf	LCDWriteInt@value
  7744  05C9  3003               	movlw	3
  7745  05CA  00D8               	movwf	??_main
  7746  05CB  0858               	movf	??_main,w
  7747  05CC  00A2               	movwf	LCDWriteInt@fieldLength
  7748  05CD  01A3               	clrf	LCDWriteInt@numPlaces
  7749  05CE  0AA3               	incf	LCDWriteInt@numPlaces,f
  7750  05CF  01A4               	clrf	LCDWriteInt@sign
  7751  05D0  3180  2008  3182   	fcall	_LCDWriteInt
  7752                           
  7753                           ;main.c: 270: LCDWriteCharacter('A');
  7754  05D3  3041               	movlw	65
  7755  05D4  3196  2685  3182   	fcall	_LCDWriteCharacter
  7756                           
  7757                           ;main.c: 272: { gotoXY(26,2); LCDWriteInt(current[0],3, 1, 0);};
  7758  05D7  3002               	movlw	2
  7759  05D8  0020               	movlb	0	; select bank0
  7760  05D9  00D8               	movwf	??_main
  7761  05DA  0858               	movf	??_main,w
  7762  05DB  00F5               	movwf	gotoXY@y
  7763  05DC  301A               	movlw	26
  7764  05DD  3192  2271  3182   	fcall	_gotoXY
  7765  05E0  0021               	movlb	1	; select bank1
  7766  05E1  0839               	movf	(_current+1)^(0+128),w
  7767  05E2  0020               	movlb	0	; select bank0
  7768  05E3  00A1               	movwf	LCDWriteInt@value+1
  7769  05E4  0021               	movlb	1	; select bank1
  7770  05E5  0838               	movf	_current^(0+128),w
  7771  05E6  0020               	movlb	0	; select bank0
  7772  05E7  00A0               	movwf	LCDWriteInt@value
  7773  05E8  3003               	movlw	3
  7774  05E9  00D8               	movwf	??_main
  7775  05EA  0858               	movf	??_main,w
  7776  05EB  00A2               	movwf	LCDWriteInt@fieldLength
  7777  05EC  01A3               	clrf	LCDWriteInt@numPlaces
  7778  05ED  0AA3               	incf	LCDWriteInt@numPlaces,f
  7779  05EE  01A4               	clrf	LCDWriteInt@sign
  7780  05EF  3180  2008  3182   	fcall	_LCDWriteInt
  7781                           
  7782                           ;main.c: 273: LCDWriteCharacter('A');
  7783  05F2  3041               	movlw	65
  7784  05F3  3196  2685  3182   	fcall	_LCDWriteCharacter
  7785                           
  7786                           ;main.c: 275: { gotoXY(52,2); LCDWriteInt(Iref[0],3, 1, 0);};
  7787  05F6  3002               	movlw	2
  7788  05F7  0020               	movlb	0	; select bank0
  7789  05F8  00D8               	movwf	??_main
  7790  05F9  0858               	movf	??_main,w
  7791  05FA  00F5               	movwf	gotoXY@y
  7792  05FB  3034               	movlw	52
  7793  05FC  3192  2271  3182   	fcall	_gotoXY
  7794  05FF  0021               	movlb	1	; select bank1
  7795  0600  0845               	movf	(_Iref+1)^(0+128),w
  7796  0601  0020               	movlb	0	; select bank0
  7797  0602  00A1               	movwf	LCDWriteInt@value+1
  7798  0603  0021               	movlb	1	; select bank1
  7799  0604  0844               	movf	_Iref^(0+128),w
  7800  0605  0020               	movlb	0	; select bank0
  7801  0606  00A0               	movwf	LCDWriteInt@value
  7802  0607  3003               	movlw	3
  7803  0608  00D8               	movwf	??_main
  7804  0609  0858               	movf	??_main,w
  7805  060A  00A2               	movwf	LCDWriteInt@fieldLength
  7806  060B  01A3               	clrf	LCDWriteInt@numPlaces
  7807  060C  0AA3               	incf	LCDWriteInt@numPlaces,f
  7808  060D  01A4               	clrf	LCDWriteInt@sign
  7809  060E  3180  2008  3182   	fcall	_LCDWriteInt
  7810                           
  7811                           ;main.c: 276: LCDWriteCharacter('A');
  7812  0611  3041               	movlw	65
  7813  0612  3196  2685  3182   	fcall	_LCDWriteCharacter
  7814                           
  7815                           ;main.c: 278: { gotoXY(80,2); LCDWriteInt(batteryState[0],1, 0, 0);};
  7816  0615  3002               	movlw	2
  7817  0616  0020               	movlb	0	; select bank0
  7818  0617  00D8               	movwf	??_main
  7819  0618  0858               	movf	??_main,w
  7820  0619  00F5               	movwf	gotoXY@y
  7821  061A  3050               	movlw	80
  7822  061B  3192  2271  3182   	fcall	_gotoXY
  7823  061E  0020               	movlb	0	; select bank0
  7824  061F  0864               	movf	_batteryState,w
  7825  0620  00D8               	movwf	??_main
  7826  0621  01D9               	clrf	??_main+1
  7827  0622  0858               	movf	??_main,w
  7828  0623  00A0               	movwf	LCDWriteInt@value
  7829  0624  0859               	movf	??_main+1,w
  7830  0625  00A1               	movwf	LCDWriteInt@value+1
  7831  0626  01A2               	clrf	LCDWriteInt@fieldLength
  7832  0627  0AA2               	incf	LCDWriteInt@fieldLength,f
  7833  0628  01A3               	clrf	LCDWriteInt@numPlaces
  7834  0629  01A4               	clrf	LCDWriteInt@sign
  7835  062A  3180  2008  3182   	fcall	_LCDWriteInt
  7836                           
  7837                           ;main.c: 280: { gotoXY(0,3); LCDWriteInt(voltage[3],4, 2, 0);};
  7838  062D  3003               	movlw	3
  7839  062E  0020               	movlb	0	; select bank0
  7840  062F  00D8               	movwf	??_main
  7841  0630  0858               	movf	??_main,w
  7842  0631  00F5               	movwf	gotoXY@y
  7843  0632  3000               	movlw	0
  7844  0633  3192  2271  3182   	fcall	_gotoXY
  7845  0636  0021               	movlb	1	; select bank1
  7846  0637  0837               	movf	((_voltage+1)^(0+128)+6),w
  7847  0638  0020               	movlb	0	; select bank0
  7848  0639  00A1               	movwf	LCDWriteInt@value+1
  7849  063A  0021               	movlb	1	; select bank1
  7850  063B  0836               	movf	(_voltage^(0+128)+6),w
  7851  063C  0020               	movlb	0	; select bank0
  7852  063D  00A0               	movwf	LCDWriteInt@value
  7853  063E  3004               	movlw	4
  7854  063F  00D8               	movwf	??_main
  7855  0640  0858               	movf	??_main,w
  7856  0641  00A2               	movwf	LCDWriteInt@fieldLength
  7857  0642  3002               	movlw	2
  7858  0643  00D9               	movwf	??_main+1
  7859  0644  0859               	movf	??_main+1,w
  7860  0645  00A3               	movwf	LCDWriteInt@numPlaces
  7861  0646  01A4               	clrf	LCDWriteInt@sign
  7862  0647  3180  2008  3182   	fcall	_LCDWriteInt
  7863                           
  7864                           ;main.c: 281: LCDWriteCharacter('V');
  7865  064A  3056               	movlw	86
  7866  064B  3196  2685  3182   	fcall	_LCDWriteCharacter
  7867                           
  7868                           ;main.c: 283: { gotoXY(26,3); LCDWriteInt(voltage[1],4, 2, 0);};
  7869  064E  3003               	movlw	3
  7870  064F  0020               	movlb	0	; select bank0
  7871  0650  00D8               	movwf	??_main
  7872  0651  0858               	movf	??_main,w
  7873  0652  00F5               	movwf	gotoXY@y
  7874  0653  301A               	movlw	26
  7875  0654  3192  2271  3182   	fcall	_gotoXY
  7876  0657  0021               	movlb	1	; select bank1
  7877  0658  0833               	movf	((_voltage+1)^(0+128)+2),w
  7878  0659  0020               	movlb	0	; select bank0
  7879  065A  00A1               	movwf	LCDWriteInt@value+1
  7880  065B  0021               	movlb	1	; select bank1
  7881  065C  0832               	movf	(_voltage^(0+128)+2),w
  7882  065D  0020               	movlb	0	; select bank0
  7883  065E  00A0               	movwf	LCDWriteInt@value
  7884  065F  3004               	movlw	4
  7885  0660  00D8               	movwf	??_main
  7886  0661  0858               	movf	??_main,w
  7887  0662  00A2               	movwf	LCDWriteInt@fieldLength
  7888  0663  3002               	movlw	2
  7889  0664  00D9               	movwf	??_main+1
  7890  0665  0859               	movf	??_main+1,w
  7891  0666  00A3               	movwf	LCDWriteInt@numPlaces
  7892  0667  01A4               	clrf	LCDWriteInt@sign
  7893  0668  3180  2008  3182   	fcall	_LCDWriteInt
  7894                           
  7895                           ;main.c: 284: LCDWriteCharacter('V');
  7896  066B  3056               	movlw	86
  7897  066C  3196  2685  3182   	fcall	_LCDWriteCharacter
  7898                           
  7899                           ;main.c: 286: { gotoXY(52,3); LCDWriteInt(Vref[1],4, 2, 0);};
  7900  066F  3003               	movlw	3
  7901  0670  0020               	movlb	0	; select bank0
  7902  0671  00D8               	movwf	??_main
  7903  0672  0858               	movf	??_main,w
  7904  0673  00F5               	movwf	gotoXY@y
  7905  0674  3034               	movlw	52
  7906  0675  3192  2271  3182   	fcall	_gotoXY
  7907  0678  0020               	movlb	0	; select bank0
  7908  0679  085D               	movf	_Vref+3,w
  7909  067A  00A1               	movwf	LCDWriteInt@value+1
  7910  067B  085C               	movf	_Vref+2,w
  7911  067C  00A0               	movwf	LCDWriteInt@value
  7912  067D  3004               	movlw	4
  7913  067E  00D8               	movwf	??_main
  7914  067F  0858               	movf	??_main,w
  7915  0680  00A2               	movwf	LCDWriteInt@fieldLength
  7916  0681  3002               	movlw	2
  7917  0682  00D9               	movwf	??_main+1
  7918  0683  0859               	movf	??_main+1,w
  7919  0684  00A3               	movwf	LCDWriteInt@numPlaces
  7920  0685  01A4               	clrf	LCDWriteInt@sign
  7921  0686  3180  2008  3182   	fcall	_LCDWriteInt
  7922                           
  7923                           ;main.c: 287: LCDWriteCharacter('V');
  7924  0689  3056               	movlw	86
  7925  068A  3196  2685  3182   	fcall	_LCDWriteCharacter
  7926                           
  7927                           ;main.c: 289: { gotoXY(80,3); LCDWriteInt(Imode[1],1, 0, 0);};
  7928  068D  3003               	movlw	3
  7929  068E  0020               	movlb	0	; select bank0
  7930  068F  00D8               	movwf	??_main
  7931  0690  0858               	movf	??_main,w
  7932  0691  00F5               	movwf	gotoXY@y
  7933  0692  3050               	movlw	80
  7934  0693  3192  2271  3182   	fcall	_gotoXY
  7935  0696  0020               	movlb	0	; select bank0
  7936  0697  0863               	movf	_Imode+1,w
  7937  0698  00A0               	movwf	LCDWriteInt@value
  7938  0699  01A1               	clrf	LCDWriteInt@value+1
  7939  069A  1BA0               	btfsc	LCDWriteInt@value,7
  7940  069B  03A1               	decf	LCDWriteInt@value+1,f
  7941  069C  01A2               	clrf	LCDWriteInt@fieldLength
  7942  069D  0AA2               	incf	LCDWriteInt@fieldLength,f
  7943  069E  01A3               	clrf	LCDWriteInt@numPlaces
  7944  069F  01A4               	clrf	LCDWriteInt@sign
  7945  06A0  3180  2008  3182   	fcall	_LCDWriteInt
  7946                           
  7947                           ;main.c: 298: { gotoXY(0,4); LCDWriteInt(current[3],3, 1, 0);};
  7948  06A3  3004               	movlw	4
  7949  06A4  0020               	movlb	0	; select bank0
  7950  06A5  00D8               	movwf	??_main
  7951  06A6  0858               	movf	??_main,w
  7952  06A7  00F5               	movwf	gotoXY@y
  7953  06A8  3000               	movlw	0
  7954  06A9  3192  2271  3182   	fcall	_gotoXY
  7955  06AC  0021               	movlb	1	; select bank1
  7956  06AD  083F               	movf	((_current+1)^(0+128)+6),w
  7957  06AE  0020               	movlb	0	; select bank0
  7958  06AF  00A1               	movwf	LCDWriteInt@value+1
  7959  06B0  0021               	movlb	1	; select bank1
  7960  06B1  083E               	movf	(_current^(0+128)+6),w
  7961  06B2  0020               	movlb	0	; select bank0
  7962  06B3  00A0               	movwf	LCDWriteInt@value
  7963  06B4  3003               	movlw	3
  7964  06B5  00D8               	movwf	??_main
  7965  06B6  0858               	movf	??_main,w
  7966  06B7  00A2               	movwf	LCDWriteInt@fieldLength
  7967  06B8  01A3               	clrf	LCDWriteInt@numPlaces
  7968  06B9  0AA3               	incf	LCDWriteInt@numPlaces,f
  7969  06BA  01A4               	clrf	LCDWriteInt@sign
  7970  06BB  3180  2008  3182   	fcall	_LCDWriteInt
  7971                           
  7972                           ;main.c: 299: LCDWriteCharacter('A');
  7973  06BE  3041               	movlw	65
  7974  06BF  3196  2685  3182   	fcall	_LCDWriteCharacter
  7975                           
  7976                           ;main.c: 301: { gotoXY(26,4); LCDWriteInt(current[1],3, 1, 0);};
  7977  06C2  3004               	movlw	4
  7978  06C3  0020               	movlb	0	; select bank0
  7979  06C4  00D8               	movwf	??_main
  7980  06C5  0858               	movf	??_main,w
  7981  06C6  00F5               	movwf	gotoXY@y
  7982  06C7  301A               	movlw	26
  7983  06C8  3192  2271  3182   	fcall	_gotoXY
  7984  06CB  0021               	movlb	1	; select bank1
  7985  06CC  083B               	movf	((_current+1)^(0+128)+2),w
  7986  06CD  0020               	movlb	0	; select bank0
  7987  06CE  00A1               	movwf	LCDWriteInt@value+1
  7988  06CF  0021               	movlb	1	; select bank1
  7989  06D0  083A               	movf	(_current^(0+128)+2),w
  7990  06D1  0020               	movlb	0	; select bank0
  7991  06D2  00A0               	movwf	LCDWriteInt@value
  7992  06D3  3003               	movlw	3
  7993  06D4  00D8               	movwf	??_main
  7994  06D5  0858               	movf	??_main,w
  7995  06D6  00A2               	movwf	LCDWriteInt@fieldLength
  7996  06D7  01A3               	clrf	LCDWriteInt@numPlaces
  7997  06D8  0AA3               	incf	LCDWriteInt@numPlaces,f
  7998  06D9  01A4               	clrf	LCDWriteInt@sign
  7999  06DA  3180  2008  3182   	fcall	_LCDWriteInt
  8000                           
  8001                           ;main.c: 302: LCDWriteCharacter('A');
  8002  06DD  3041               	movlw	65
  8003  06DE  3196  2685  3182   	fcall	_LCDWriteCharacter
  8004                           
  8005                           ;main.c: 304: { gotoXY(52,4); LCDWriteInt(Iref[1],3, 1, 0);};
  8006  06E1  3004               	movlw	4
  8007  06E2  0020               	movlb	0	; select bank0
  8008  06E3  00D8               	movwf	??_main
  8009  06E4  0858               	movf	??_main,w
  8010  06E5  00F5               	movwf	gotoXY@y
  8011  06E6  3034               	movlw	52
  8012  06E7  3192  2271  3182   	fcall	_gotoXY
  8013  06EA  0021               	movlb	1	; select bank1
  8014  06EB  0847               	movf	((_Iref+1)^(0+128)+2),w
  8015  06EC  0020               	movlb	0	; select bank0
  8016  06ED  00A1               	movwf	LCDWriteInt@value+1
  8017  06EE  0021               	movlb	1	; select bank1
  8018  06EF  0846               	movf	(_Iref^(0+128)+2),w
  8019  06F0  0020               	movlb	0	; select bank0
  8020  06F1  00A0               	movwf	LCDWriteInt@value
  8021  06F2  3003               	movlw	3
  8022  06F3  00D8               	movwf	??_main
  8023  06F4  0858               	movf	??_main,w
  8024  06F5  00A2               	movwf	LCDWriteInt@fieldLength
  8025  06F6  01A3               	clrf	LCDWriteInt@numPlaces
  8026  06F7  0AA3               	incf	LCDWriteInt@numPlaces,f
  8027  06F8  01A4               	clrf	LCDWriteInt@sign
  8028  06F9  3180  2008  3182   	fcall	_LCDWriteInt
  8029                           
  8030                           ;main.c: 305: LCDWriteCharacter('A');
  8031  06FC  3041               	movlw	65
  8032  06FD  3196  2685  3182   	fcall	_LCDWriteCharacter
  8033                           
  8034                           ;main.c: 307: { gotoXY(80,4); LCDWriteInt(batteryState[1],1, 0, 0);};
  8035  0700  3004               	movlw	4
  8036  0701  0020               	movlb	0	; select bank0
  8037  0702  00D8               	movwf	??_main
  8038  0703  0858               	movf	??_main,w
  8039  0704  00F5               	movwf	gotoXY@y
  8040  0705  3050               	movlw	80
  8041  0706  3192  2271  3182   	fcall	_gotoXY
  8042  0709  0020               	movlb	0	; select bank0
  8043  070A  0865               	movf	_batteryState+1,w
  8044  070B  00D8               	movwf	??_main
  8045  070C  01D9               	clrf	??_main+1
  8046  070D  0858               	movf	??_main,w
  8047  070E  00A0               	movwf	LCDWriteInt@value
  8048  070F  0859               	movf	??_main+1,w
  8049  0710  00A1               	movwf	LCDWriteInt@value+1
  8050  0711  01A2               	clrf	LCDWriteInt@fieldLength
  8051  0712  0AA2               	incf	LCDWriteInt@fieldLength,f
  8052  0713  01A3               	clrf	LCDWriteInt@numPlaces
  8053  0714  01A4               	clrf	LCDWriteInt@sign
  8054  0715  3180  2008  3182   	fcall	_LCDWriteInt
  8055                           
  8056                           ;main.c: 311: { gotoXY(0,5); LCDWriteInt(dutyCycle6,4, 0, 0);};
  8057  0718  3005               	movlw	5
  8058  0719  0020               	movlb	0	; select bank0
  8059  071A  00D8               	movwf	??_main
  8060  071B  0858               	movf	??_main,w
  8061  071C  00F5               	movwf	gotoXY@y
  8062  071D  3000               	movlw	0
  8063  071E  3192  2271  3182   	fcall	_gotoXY
  8064  0721  0021               	movlb	1	; select bank1
  8065  0722  086C               	movf	(main@dutyCycle6+1)^(0+128),w
  8066  0723  0020               	movlb	0	; select bank0
  8067  0724  00A1               	movwf	LCDWriteInt@value+1
  8068  0725  0021               	movlb	1	; select bank1
  8069  0726  086B               	movf	main@dutyCycle6^(0+128),w
  8070  0727  0020               	movlb	0	; select bank0
  8071  0728  00A0               	movwf	LCDWriteInt@value
  8072  0729  3004               	movlw	4
  8073  072A  00D8               	movwf	??_main
  8074  072B  0858               	movf	??_main,w
  8075  072C  00A2               	movwf	LCDWriteInt@fieldLength
  8076  072D  01A3               	clrf	LCDWriteInt@numPlaces
  8077  072E  01A4               	clrf	LCDWriteInt@sign
  8078  072F  3180  2008  3182   	fcall	_LCDWriteInt
  8079                           
  8080                           ;main.c: 312: { gotoXY(18,5); LCDWriteInt(VHoldMode[0],1, 0, 0);};
  8081  0732  3005               	movlw	5
  8082  0733  0020               	movlb	0	; select bank0
  8083  0734  00D8               	movwf	??_main
  8084  0735  0858               	movf	??_main,w
  8085  0736  00F5               	movwf	gotoXY@y
  8086  0737  3012               	movlw	18
  8087  0738  3192  2271  3182   	fcall	_gotoXY
  8088  073B  0020               	movlb	0	; select bank0
  8089  073C  0860               	movf	_VHoldMode,w
  8090  073D  00A0               	movwf	LCDWriteInt@value
  8091  073E  01A1               	clrf	LCDWriteInt@value+1
  8092  073F  1BA0               	btfsc	LCDWriteInt@value,7
  8093  0740  03A1               	decf	LCDWriteInt@value+1,f
  8094  0741  01A2               	clrf	LCDWriteInt@fieldLength
  8095  0742  0AA2               	incf	LCDWriteInt@fieldLength,f
  8096  0743  01A3               	clrf	LCDWriteInt@numPlaces
  8097  0744  01A4               	clrf	LCDWriteInt@sign
  8098  0745  3180  2008  3182   	fcall	_LCDWriteInt
  8099                           
  8100                           ;main.c: 313: LCDWriteCharacter(' ');
  8101  0748  3020               	movlw	32
  8102  0749  3196  2685  3182   	fcall	_LCDWriteCharacter
  8103                           
  8104                           ;main.c: 314: { gotoXY(28,5); LCDWriteInt(dutyCycle7,4, 0, 0);};
  8105  074C  3005               	movlw	5
  8106  074D  0020               	movlb	0	; select bank0
  8107  074E  00D8               	movwf	??_main
  8108  074F  0858               	movf	??_main,w
  8109  0750  00F5               	movwf	gotoXY@y
  8110  0751  301C               	movlw	28
  8111  0752  3192  2271  3182   	fcall	_gotoXY
  8112  0755  0021               	movlb	1	; select bank1
  8113  0756  086E               	movf	(main@dutyCycle7+1)^(0+128),w
  8114  0757  0020               	movlb	0	; select bank0
  8115  0758  00A1               	movwf	LCDWriteInt@value+1
  8116  0759  0021               	movlb	1	; select bank1
  8117  075A  086D               	movf	main@dutyCycle7^(0+128),w
  8118  075B  0020               	movlb	0	; select bank0
  8119  075C  00A0               	movwf	LCDWriteInt@value
  8120  075D  3004               	movlw	4
  8121  075E  00D8               	movwf	??_main
  8122  075F  0858               	movf	??_main,w
  8123  0760  00A2               	movwf	LCDWriteInt@fieldLength
  8124  0761  01A3               	clrf	LCDWriteInt@numPlaces
  8125  0762  01A4               	clrf	LCDWriteInt@sign
  8126  0763  3180  2008  3182   	fcall	_LCDWriteInt
  8127                           
  8128                           ;main.c: 315: { gotoXY(46,5); LCDWriteInt(VHoldMode[1],1, 0, 0);};
  8129  0766  3005               	movlw	5
  8130  0767  0020               	movlb	0	; select bank0
  8131  0768  00D8               	movwf	??_main
  8132  0769  0858               	movf	??_main,w
  8133  076A  00F5               	movwf	gotoXY@y
  8134  076B  302E               	movlw	46
  8135  076C  3192  2271  3182   	fcall	_gotoXY
  8136  076F  0020               	movlb	0	; select bank0
  8137  0770  0861               	movf	_VHoldMode+1,w
  8138  0771  00A0               	movwf	LCDWriteInt@value
  8139  0772  01A1               	clrf	LCDWriteInt@value+1
  8140  0773  1BA0               	btfsc	LCDWriteInt@value,7
  8141  0774  03A1               	decf	LCDWriteInt@value+1,f
  8142  0775  01A2               	clrf	LCDWriteInt@fieldLength
  8143  0776  0AA2               	incf	LCDWriteInt@fieldLength,f
  8144  0777  01A3               	clrf	LCDWriteInt@numPlaces
  8145  0778  01A4               	clrf	LCDWriteInt@sign
  8146  0779  3180  2008  3182   	fcall	_LCDWriteInt
  8147                           
  8148                           ;main.c: 316: LCDWriteCharacter(' ');
  8149  077C  3020               	movlw	32
  8150  077D  3196  2685  3182   	fcall	_LCDWriteCharacter
  8151                           
  8152                           ;main.c: 317: { gotoXY(56,5); LCDWriteInt(batteryTemp,3, 1, 0);};
  8153  0780  3005               	movlw	5
  8154  0781  0020               	movlb	0	; select bank0
  8155  0782  00D8               	movwf	??_main
  8156  0783  0858               	movf	??_main,w
  8157  0784  00F5               	movwf	gotoXY@y
  8158  0785  3038               	movlw	56
  8159  0786  3192  2271  3182   	fcall	_gotoXY
  8160  0789  0020               	movlb	0	; select bank0
  8161  078A  086D               	movf	_batteryTemp+1,w
  8162  078B  00A1               	movwf	LCDWriteInt@value+1
  8163  078C  086C               	movf	_batteryTemp,w
  8164  078D  00A0               	movwf	LCDWriteInt@value
  8165  078E  3003               	movlw	3
  8166  078F  00D8               	movwf	??_main
  8167  0790  0858               	movf	??_main,w
  8168  0791  00A2               	movwf	LCDWriteInt@fieldLength
  8169  0792  01A3               	clrf	LCDWriteInt@numPlaces
  8170  0793  0AA3               	incf	LCDWriteInt@numPlaces,f
  8171  0794  01A4               	clrf	LCDWriteInt@sign
  8172  0795  3180  2008  3182   	fcall	_LCDWriteInt
  8173                           
  8174                           ;main.c: 318: LCDWriteCharacter(123);
  8175  0798  307B               	movlw	123
  8176  0799  3196  2685  3182   	fcall	_LCDWriteCharacter
  8177                           
  8178                           ;main.c: 319: LCDWriteCharacter('C');
  8179  079C  3043               	movlw	67
  8180  079D  3196  2685  3182   	fcall	_LCDWriteCharacter
  8181                           
  8182                           ;main.c: 389: if(batteryState[0] > FINISHED)
  8183  07A0  3003               	movlw	3
  8184  07A1  0020               	movlb	0	; select bank0
  8185  07A2  0264               	subwf	_batteryState,w
  8186  07A3  1C03               	skipc
  8187  07A4  2FA9               	goto	l3487
  8188                           
  8189                           ;main.c: 390: {
  8190                           ;main.c: 391: cc_cv_mode(0);
  8191  07A5  3000               	movlw	0
  8192  07A6  318E  26C1  3182   	fcall	_cc_cv_mode
  8193  07A9                     l3487:	
  8194                           
  8195                           ;main.c: 392: }
  8196                           ;main.c: 393: if(batteryState[1] > FINISHED)
  8197  07A9  3003               	movlw	3
  8198  07AA  0020               	movlb	0	; select bank0
  8199  07AB  0265               	subwf	_batteryState+1,w
  8200  07AC  1C03               	skipc
  8201  07AD  2FB2               	goto	l3491
  8202                           
  8203                           ;main.c: 394: {
  8204                           ;main.c: 395: cc_cv_mode(1);
  8205  07AE  3001               	movlw	1
  8206  07AF  318E  26C1  3182   	fcall	_cc_cv_mode
  8207  07B2                     l3491:	
  8208                           
  8209                           ;main.c: 396: }
  8210                           ;main.c: 397: slowLoop=0;
  8211  07B2  0021               	movlb	1	; select bank1
  8212  07B3  01DE               	clrf	main@slowLoop^(0+128)
  8213  07B4  2A6C               	goto	l3193
  8214  07B5                     __end_of_main:	
  8215                           
  8216                           	psect	text1
  8217  0BA6                     __ptext1:	
  8218 ;; *************** function _tempCalc *****************
  8219 ;; Defined at:
  8220 ;;		line 4 in file "tempCalc.c"
  8221 ;; Parameters:    Size  Location     Type
  8222 ;;  analogValue     2   45[BANK0 ] int 
  8223 ;; Auto vars:     Size  Location     Type
  8224 ;;  steinhart       3   53[BANK0 ] float 
  8225 ;;  R               3   47[BANK0 ] float 
  8226 ;; Return value:  Size  Location     Type
  8227 ;;                  2   45[BANK0 ] int 
  8228 ;; Registers used:
  8229 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8230 ;; Tracked objects:
  8231 ;;		On entry : 0/0
  8232 ;;		On exit  : 0/0
  8233 ;;		Unchanged: 0/0
  8234 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8235 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8236 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8237 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8238 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8239 ;;Total ram usage:       11 bytes
  8240 ;; Hardware stack levels used:    1
  8241 ;; Hardware stack levels required when called:    4
  8242 ;; This function calls:
  8243 ;;		___awtoft
  8244 ;;		___ftadd
  8245 ;;		___ftdiv
  8246 ;;		___ftmul
  8247 ;;		___ftsub
  8248 ;;		___fttol
  8249 ;;		_log
  8250 ;; This function is called by:
  8251 ;;		_main
  8252 ;; This function uses a non-reentrant model
  8253 ;;
  8254                           
  8255                           
  8256                           ;psect for function _tempCalc
  8257  0BA6                     _tempCalc:	
  8258                           
  8259                           ;tempCalc.c: 6: float R, steinhart;
  8260                           ;tempCalc.c: 7: R=10030/(1023/(float)analogValue-1);
  8261                           
  8262                           ;incstack = 0
  8263                           ; Regs used in _tempCalc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8264  0BA6  3000               	movlw	0
  8265  0BA7  0020               	movlb	0	; select bank0
  8266  0BA8  00B0               	movwf	___ftadd@f1
  8267  0BA9  3080               	movlw	128
  8268  0BAA  00B1               	movwf	___ftadd@f1+1
  8269  0BAB  30BF               	movlw	191
  8270  0BAC  00B2               	movwf	___ftadd@f1+2
  8271  0BAD  084E               	movf	tempCalc@analogValue+1,w
  8272  0BAE  00F9               	movwf	___awtoft@c+1
  8273  0BAF  084D               	movf	tempCalc@analogValue,w
  8274  0BB0  00F8               	movwf	___awtoft@c
  8275  0BB1  3193  2366  318B   	fcall	___awtoft
  8276  0BB4  0878               	movf	?___awtoft,w
  8277  0BB5  0020               	movlb	0	; select bank0
  8278  0BB6  00A0               	movwf	___ftdiv@f2
  8279  0BB7  0879               	movf	?___awtoft+1,w
  8280  0BB8  00A1               	movwf	___ftdiv@f2+1
  8281  0BB9  087A               	movf	?___awtoft+2,w
  8282  0BBA  00A2               	movwf	___ftdiv@f2+2
  8283  0BBB  30C0               	movlw	192
  8284  0BBC  00A3               	movwf	___ftdiv@f1
  8285  0BBD  307F               	movlw	127
  8286  0BBE  00A4               	movwf	___ftdiv@f1+1
  8287  0BBF  3044               	movlw	68
  8288  0BC0  00A5               	movwf	___ftdiv@f1+2
  8289  0BC1  3189  2199  318B   	fcall	___ftdiv
  8290  0BC4  0020               	movlb	0	; select bank0
  8291  0BC5  0820               	movf	?___ftdiv,w
  8292  0BC6  00B3               	movwf	___ftadd@f2
  8293  0BC7  0821               	movf	?___ftdiv+1,w
  8294  0BC8  00B4               	movwf	___ftadd@f2+1
  8295  0BC9  0822               	movf	?___ftdiv+2,w
  8296  0BCA  00B5               	movwf	___ftadd@f2+2
  8297  0BCB  318C  248D  318B   	fcall	___ftadd
  8298  0BCE  0020               	movlb	0	; select bank0
  8299  0BCF  0830               	movf	?___ftadd,w
  8300  0BD0  00D2               	movwf	_tempCalc$1297
  8301  0BD1  0831               	movf	?___ftadd+1,w
  8302  0BD2  00D3               	movwf	_tempCalc$1297+1
  8303  0BD3  0832               	movf	?___ftadd+2,w
  8304  0BD4  00D4               	movwf	_tempCalc$1297+2
  8305                           
  8306                           ;tempCalc.c: 6: float R, steinhart;
  8307                           ;tempCalc.c: 7: R=10030/(1023/(float)analogValue-1);
  8308  0BD5  0852               	movf	_tempCalc$1297,w
  8309  0BD6  00A0               	movwf	___ftdiv@f2
  8310  0BD7  0853               	movf	_tempCalc$1297+1,w
  8311  0BD8  00A1               	movwf	___ftdiv@f2+1
  8312  0BD9  0854               	movf	_tempCalc$1297+2,w
  8313  0BDA  00A2               	movwf	___ftdiv@f2+2
  8314  0BDB  30B8               	movlw	184
  8315  0BDC  00A3               	movwf	___ftdiv@f1
  8316  0BDD  301C               	movlw	28
  8317  0BDE  00A4               	movwf	___ftdiv@f1+1
  8318  0BDF  3046               	movlw	70
  8319  0BE0  00A5               	movwf	___ftdiv@f1+2
  8320  0BE1  3189  2199  318B   	fcall	___ftdiv
  8321  0BE4  0020               	movlb	0	; select bank0
  8322  0BE5  0820               	movf	?___ftdiv,w
  8323  0BE6  00CF               	movwf	tempCalc@R
  8324  0BE7  0821               	movf	?___ftdiv+1,w
  8325  0BE8  00D0               	movwf	tempCalc@R+1
  8326  0BE9  0822               	movf	?___ftdiv+2,w
  8327  0BEA  00D1               	movwf	tempCalc@R+2
  8328                           
  8329                           ;tempCalc.c: 8: steinhart=R/10010;
  8330  0BEB  3068               	movlw	104
  8331  0BEC  00A0               	movwf	___ftdiv@f2
  8332  0BED  301C               	movlw	28
  8333  0BEE  00A1               	movwf	___ftdiv@f2+1
  8334  0BEF  3046               	movlw	70
  8335  0BF0  00A2               	movwf	___ftdiv@f2+2
  8336  0BF1  084F               	movf	tempCalc@R,w
  8337  0BF2  00A3               	movwf	___ftdiv@f1
  8338  0BF3  0850               	movf	tempCalc@R+1,w
  8339  0BF4  00A4               	movwf	___ftdiv@f1+1
  8340  0BF5  0851               	movf	tempCalc@R+2,w
  8341  0BF6  00A5               	movwf	___ftdiv@f1+2
  8342  0BF7  3189  2199  318B   	fcall	___ftdiv
  8343  0BFA  0020               	movlb	0	; select bank0
  8344  0BFB  0820               	movf	?___ftdiv,w
  8345  0BFC  00D5               	movwf	tempCalc@steinhart
  8346  0BFD  0821               	movf	?___ftdiv+1,w
  8347  0BFE  00D6               	movwf	tempCalc@steinhart+1
  8348  0BFF  0822               	movf	?___ftdiv+2,w
  8349  0C00  00D7               	movwf	tempCalc@steinhart+2
  8350                           
  8351                           ;tempCalc.c: 9: steinhart=log(steinhart);
  8352  0C01  0855               	movf	tempCalc@steinhart,w
  8353  0C02  00C7               	movwf	log@x
  8354  0C03  0856               	movf	tempCalc@steinhart+1,w
  8355  0C04  00C8               	movwf	log@x+1
  8356  0C05  0857               	movf	tempCalc@steinhart+2,w
  8357  0C06  00C9               	movwf	log@x+2
  8358  0C07  318A  2242  318B   	fcall	_log
  8359  0C0A  0020               	movlb	0	; select bank0
  8360  0C0B  0847               	movf	?_log,w
  8361  0C0C  00D5               	movwf	tempCalc@steinhart
  8362  0C0D  0848               	movf	?_log+1,w
  8363  0C0E  00D6               	movwf	tempCalc@steinhart+1
  8364  0C0F  0849               	movf	?_log+2,w
  8365  0C10  00D7               	movwf	tempCalc@steinhart+2
  8366                           
  8367                           ;tempCalc.c: 10: steinhart/=3795.3;
  8368  0C11  3035               	movlw	53
  8369  0C12  00A0               	movwf	___ftdiv@f2
  8370  0C13  306D               	movlw	109
  8371  0C14  00A1               	movwf	___ftdiv@f2+1
  8372  0C15  3045               	movlw	69
  8373  0C16  00A2               	movwf	___ftdiv@f2+2
  8374  0C17  0855               	movf	tempCalc@steinhart,w
  8375  0C18  00A3               	movwf	___ftdiv@f1
  8376  0C19  0856               	movf	tempCalc@steinhart+1,w
  8377  0C1A  00A4               	movwf	___ftdiv@f1+1
  8378  0C1B  0857               	movf	tempCalc@steinhart+2,w
  8379  0C1C  00A5               	movwf	___ftdiv@f1+2
  8380  0C1D  3189  2199  318B   	fcall	___ftdiv
  8381  0C20  0020               	movlb	0	; select bank0
  8382  0C21  0820               	movf	?___ftdiv,w
  8383  0C22  00D5               	movwf	tempCalc@steinhart
  8384  0C23  0821               	movf	?___ftdiv+1,w
  8385  0C24  00D6               	movwf	tempCalc@steinhart+1
  8386  0C25  0822               	movf	?___ftdiv+2,w
  8387  0C26  00D7               	movwf	tempCalc@steinhart+2
  8388                           
  8389                           ;tempCalc.c: 11: steinhart+=1.0/(25+273.15);
  8390  0C27  30CF               	movlw	207
  8391  0C28  00B0               	movwf	___ftadd@f1
  8392  0C29  305B               	movlw	91
  8393  0C2A  00B1               	movwf	___ftadd@f1+1
  8394  0C2B  303B               	movlw	59
  8395  0C2C  00B2               	movwf	___ftadd@f1+2
  8396  0C2D  0855               	movf	tempCalc@steinhart,w
  8397  0C2E  00B3               	movwf	___ftadd@f2
  8398  0C2F  0856               	movf	tempCalc@steinhart+1,w
  8399  0C30  00B4               	movwf	___ftadd@f2+1
  8400  0C31  0857               	movf	tempCalc@steinhart+2,w
  8401  0C32  00B5               	movwf	___ftadd@f2+2
  8402  0C33  318C  248D  318B   	fcall	___ftadd
  8403  0C36  0020               	movlb	0	; select bank0
  8404  0C37  0830               	movf	?___ftadd,w
  8405  0C38  00D5               	movwf	tempCalc@steinhart
  8406  0C39  0831               	movf	?___ftadd+1,w
  8407  0C3A  00D6               	movwf	tempCalc@steinhart+1
  8408  0C3B  0832               	movf	?___ftadd+2,w
  8409  0C3C  00D7               	movwf	tempCalc@steinhart+2
  8410                           
  8411                           ;tempCalc.c: 12: steinhart=1.0/steinhart;
  8412  0C3D  0855               	movf	tempCalc@steinhart,w
  8413  0C3E  00A0               	movwf	___ftdiv@f2
  8414  0C3F  0856               	movf	tempCalc@steinhart+1,w
  8415  0C40  00A1               	movwf	___ftdiv@f2+1
  8416  0C41  0857               	movf	tempCalc@steinhart+2,w
  8417  0C42  00A2               	movwf	___ftdiv@f2+2
  8418  0C43  3000               	movlw	0
  8419  0C44  00A3               	movwf	___ftdiv@f1
  8420  0C45  3080               	movlw	128
  8421  0C46  00A4               	movwf	___ftdiv@f1+1
  8422  0C47  303F               	movlw	63
  8423  0C48  00A5               	movwf	___ftdiv@f1+2
  8424  0C49  3189  2199  318B   	fcall	___ftdiv
  8425  0C4C  0020               	movlb	0	; select bank0
  8426  0C4D  0820               	movf	?___ftdiv,w
  8427  0C4E  00D5               	movwf	tempCalc@steinhart
  8428  0C4F  0821               	movf	?___ftdiv+1,w
  8429  0C50  00D6               	movwf	tempCalc@steinhart+1
  8430  0C51  0822               	movf	?___ftdiv+2,w
  8431  0C52  00D7               	movwf	tempCalc@steinhart+2
  8432                           
  8433                           ;tempCalc.c: 13: steinhart-=273;
  8434  0C53  3080               	movlw	128
  8435  0C54  00BD               	movwf	___ftsub@f2
  8436  0C55  3088               	movlw	136
  8437  0C56  00BE               	movwf	___ftsub@f2+1
  8438  0C57  3043               	movlw	67
  8439  0C58  00BF               	movwf	___ftsub@f2+2
  8440  0C59  0855               	movf	tempCalc@steinhart,w
  8441  0C5A  00C0               	movwf	___ftsub@f1
  8442  0C5B  0856               	movf	tempCalc@steinhart+1,w
  8443  0C5C  00C1               	movwf	___ftsub@f1+1
  8444  0C5D  0857               	movf	tempCalc@steinhart+2,w
  8445  0C5E  00C2               	movwf	___ftsub@f1+2
  8446  0C5F  3193  230A  318B   	fcall	___ftsub
  8447  0C62  0020               	movlb	0	; select bank0
  8448  0C63  083D               	movf	?___ftsub,w
  8449  0C64  00D5               	movwf	tempCalc@steinhart
  8450  0C65  083E               	movf	?___ftsub+1,w
  8451  0C66  00D6               	movwf	tempCalc@steinhart+1
  8452  0C67  083F               	movf	?___ftsub+2,w
  8453  0C68  00D7               	movwf	tempCalc@steinhart+2
  8454                           
  8455                           ;tempCalc.c: 15: steinhart*=10;
  8456  0C69  3000               	movlw	0
  8457  0C6A  00A0               	movwf	___ftmul@f1
  8458  0C6B  3020               	movlw	32
  8459  0C6C  00A1               	movwf	___ftmul@f1+1
  8460  0C6D  3041               	movlw	65
  8461  0C6E  00A2               	movwf	___ftmul@f1+2
  8462  0C6F  0855               	movf	tempCalc@steinhart,w
  8463  0C70  00A3               	movwf	___ftmul@f2
  8464  0C71  0856               	movf	tempCalc@steinhart+1,w
  8465  0C72  00A4               	movwf	___ftmul@f2+1
  8466  0C73  0857               	movf	tempCalc@steinhart+2,w
  8467  0C74  00A5               	movwf	___ftmul@f2+2
  8468  0C75  318A  22F2  318B   	fcall	___ftmul
  8469  0C78  0020               	movlb	0	; select bank0
  8470  0C79  0820               	movf	?___ftmul,w
  8471  0C7A  00D5               	movwf	tempCalc@steinhart
  8472  0C7B  0821               	movf	?___ftmul+1,w
  8473  0C7C  00D6               	movwf	tempCalc@steinhart+1
  8474  0C7D  0822               	movf	?___ftmul+2,w
  8475  0C7E  00D7               	movwf	tempCalc@steinhart+2
  8476                           
  8477                           ;tempCalc.c: 18: return (int16_t)steinhart;
  8478  0C7F  0855               	movf	tempCalc@steinhart,w
  8479  0C80  00B0               	movwf	___fttol@f1
  8480  0C81  0856               	movf	tempCalc@steinhart+1,w
  8481  0C82  00B1               	movwf	___fttol@f1+1
  8482  0C83  0857               	movf	tempCalc@steinhart+2,w
  8483  0C84  00B2               	movwf	___fttol@f1+2
  8484  0C85  3189  2112         	fcall	___fttol
  8485  0C87  0020               	movlb	0	; select bank0
  8486  0C88  0831               	movf	?___fttol+1,w
  8487  0C89  00CE               	movwf	?_tempCalc+1
  8488  0C8A  0830               	movf	?___fttol,w
  8489  0C8B  00CD               	movwf	?_tempCalc
  8490  0C8C  0008               	return
  8491  0C8D                     __end_of_tempCalc:	
  8492                           
  8493                           	psect	text2
  8494  0A42                     __ptext2:	
  8495 ;; *************** function _log *****************
  8496 ;; Defined at:
  8497 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\log.c"
  8498 ;; Parameters:    Size  Location     Type
  8499 ;;  x               3   39[BANK0 ] int 
  8500 ;; Auto vars:     Size  Location     Type
  8501 ;;  exponent        2   43[BANK0 ] int 
  8502 ;; Return value:  Size  Location     Type
  8503 ;;                  3   39[BANK0 ] int 
  8504 ;; Registers used:
  8505 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8506 ;; Tracked objects:
  8507 ;;		On entry : 0/0
  8508 ;;		On exit  : 0/0
  8509 ;;		Unchanged: 0/0
  8510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8511 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8512 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8513 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8514 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8515 ;;Total ram usage:        6 bytes
  8516 ;; Hardware stack levels used:    1
  8517 ;; Hardware stack levels required when called:    3
  8518 ;; This function calls:
  8519 ;;		___awtoft
  8520 ;;		___ftadd
  8521 ;;		___ftge
  8522 ;;		___ftmul
  8523 ;;		_eval_poly
  8524 ;;		_frexp
  8525 ;; This function is called by:
  8526 ;;		_tempCalc
  8527 ;; This function uses a non-reentrant model
  8528 ;;
  8529                           
  8530                           
  8531                           ;psect for function _log
  8532  0A42                     _log:	
  8533                           
  8534                           ;incstack = 0
  8535                           ; Regs used in _log: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8536  0A42  0020               	movlb	0	; select bank0
  8537  0A43  0847               	movf	log@x,w
  8538  0A44  00F0               	movwf	___ftge@ff1
  8539  0A45  0848               	movf	log@x+1,w
  8540  0A46  00F1               	movwf	___ftge@ff1+1
  8541  0A47  0849               	movf	log@x+2,w
  8542  0A48  00F2               	movwf	___ftge@ff1+2
  8543  0A49  3000               	movlw	0
  8544  0A4A  00F3               	movwf	___ftge@ff2
  8545  0A4B  3000               	movlw	0
  8546  0A4C  00F4               	movwf	___ftge@ff2+1
  8547  0A4D  3000               	movlw	0
  8548  0A4E  00F5               	movwf	___ftge@ff2+2
  8549  0A4F  3194  24AA  318A   	fcall	___ftge
  8550  0A52  1803               	btfsc	3,0
  8551  0A53  2A61               	goto	l2739
  8552  0A54  3021               	movlw	33
  8553  0A55  0021               	movlb	1	; select bank1
  8554  0A56  00D0               	movwf	_errno^(0+128)
  8555  0A57  3000               	movlw	0
  8556  0A58  00D1               	movwf	(_errno^(0+128)+1)
  8557  0A59  3000               	movlw	0
  8558  0A5A  0020               	movlb	0	; select bank0
  8559  0A5B  00C7               	movwf	?_log
  8560  0A5C  3000               	movlw	0
  8561  0A5D  00C8               	movwf	?_log+1
  8562  0A5E  3000               	movlw	0
  8563  0A5F  00C9               	movwf	?_log+2
  8564  0A60  0008               	return
  8565  0A61                     l2739:	
  8566  0A61  0020               	movlb	0	; select bank0
  8567  0A62  0849               	movf	log@x+2,w
  8568  0A63  0448               	iorwf	log@x+1,w
  8569  0A64  0447               	iorwf	log@x,w
  8570  0A65  1D03               	skipz
  8571  0A66  2A74               	goto	l2745
  8572  0A67  3022               	movlw	34
  8573  0A68  0021               	movlb	1	; select bank1
  8574  0A69  00D0               	movwf	_errno^(0+128)
  8575  0A6A  3000               	movlw	0
  8576  0A6B  00D1               	movwf	(_errno^(0+128)+1)
  8577  0A6C  3000               	movlw	0
  8578  0A6D  0020               	movlb	0	; select bank0
  8579  0A6E  00C7               	movwf	?_log
  8580  0A6F  3000               	movlw	0
  8581  0A70  00C8               	movwf	?_log+1
  8582  0A71  3000               	movlw	0
  8583  0A72  00C9               	movwf	?_log+2
  8584  0A73  0008               	return
  8585  0A74                     l2745:	
  8586  0A74  3000               	movlw	0
  8587  0A75  00B0               	movwf	___ftadd@f1
  8588  0A76  3080               	movlw	128
  8589  0A77  00B1               	movwf	___ftadd@f1+1
  8590  0A78  30BF               	movlw	191
  8591  0A79  00B2               	movwf	___ftadd@f1+2
  8592  0A7A  3000               	movlw	0
  8593  0A7B  00A0               	movwf	___ftmul@f1
  8594  0A7C  3000               	movlw	0
  8595  0A7D  00A1               	movwf	___ftmul@f1+1
  8596  0A7E  3040               	movlw	64
  8597  0A7F  00A2               	movwf	___ftmul@f1+2
  8598  0A80  304B               	movlw	(low (log@exponent| 0))& (0+255)
  8599  0A81  00CA               	movwf	??_log
  8600  0A82  084A               	movf	??_log,w
  8601  0A83  00F3               	movwf	frexp@eptr
  8602  0A84  0847               	movf	log@x,w
  8603  0A85  00F0               	movwf	frexp@value
  8604  0A86  0848               	movf	log@x+1,w
  8605  0A87  00F1               	movwf	frexp@value+1
  8606  0A88  0849               	movf	log@x+2,w
  8607  0A89  00F2               	movwf	frexp@value+2
  8608  0A8A  3194  24E5  318A   	fcall	_frexp
  8609  0A8D  0870               	movf	?_frexp,w
  8610  0A8E  0020               	movlb	0	; select bank0
  8611  0A8F  00A3               	movwf	___ftmul@f2
  8612  0A90  0871               	movf	?_frexp+1,w
  8613  0A91  00A4               	movwf	___ftmul@f2+1
  8614  0A92  0872               	movf	?_frexp+2,w
  8615  0A93  00A5               	movwf	___ftmul@f2+2
  8616  0A94  318A  22F2  318A   	fcall	___ftmul
  8617  0A97  0020               	movlb	0	; select bank0
  8618  0A98  0820               	movf	?___ftmul,w
  8619  0A99  00B3               	movwf	___ftadd@f2
  8620  0A9A  0821               	movf	?___ftmul+1,w
  8621  0A9B  00B4               	movwf	___ftadd@f2+1
  8622  0A9C  0822               	movf	?___ftmul+2,w
  8623  0A9D  00B5               	movwf	___ftadd@f2+2
  8624  0A9E  318C  248D  318A   	fcall	___ftadd
  8625  0AA1  0020               	movlb	0	; select bank0
  8626  0AA2  0830               	movf	?___ftadd,w
  8627  0AA3  00C7               	movwf	log@x
  8628  0AA4  0831               	movf	?___ftadd+1,w
  8629  0AA5  00C8               	movwf	log@x+1
  8630  0AA6  0832               	movf	?___ftadd+2,w
  8631  0AA7  00C9               	movwf	log@x+2
  8632  0AA8  30FF               	movlw	255
  8633  0AA9  07CB               	addwf	log@exponent,f
  8634  0AAA  30FF               	movlw	255
  8635  0AAB  3DCC               	addwfc	log@exponent+1,f
  8636  0AAC  0847               	movf	log@x,w
  8637  0AAD  00BD               	movwf	eval_poly@x
  8638  0AAE  0848               	movf	log@x+1,w
  8639  0AAF  00BE               	movwf	eval_poly@x+1
  8640  0AB0  0849               	movf	log@x+2,w
  8641  0AB1  00BF               	movwf	eval_poly@x+2
  8642  0AB2  3000               	movlw	low (log@coeff| (0+32768))
  8643  0AB3  00C0               	movwf	eval_poly@d
  8644  0AB4  3098               	movlw	high (log@coeff| (0+32768))
  8645  0AB5  00C1               	movwf	eval_poly@d+1
  8646  0AB6  3008               	movlw	8
  8647  0AB7  00C2               	movwf	eval_poly@n
  8648  0AB8  3000               	movlw	0
  8649  0AB9  00C3               	movwf	eval_poly@n+1
  8650  0ABA  3196  26D9  318A   	fcall	_eval_poly
  8651  0ABD  0020               	movlb	0	; select bank0
  8652  0ABE  083D               	movf	?_eval_poly,w
  8653  0ABF  00C7               	movwf	log@x
  8654  0AC0  083E               	movf	?_eval_poly+1,w
  8655  0AC1  00C8               	movwf	log@x+1
  8656  0AC2  083F               	movf	?_eval_poly+2,w
  8657  0AC3  00C9               	movwf	log@x+2
  8658  0AC4  0847               	movf	log@x,w
  8659  0AC5  00B0               	movwf	___ftadd@f1
  8660  0AC6  0848               	movf	log@x+1,w
  8661  0AC7  00B1               	movwf	___ftadd@f1+1
  8662  0AC8  0849               	movf	log@x+2,w
  8663  0AC9  00B2               	movwf	___ftadd@f1+2
  8664  0ACA  3072               	movlw	114
  8665  0ACB  00A0               	movwf	___ftmul@f1
  8666  0ACC  3031               	movlw	49
  8667  0ACD  00A1               	movwf	___ftmul@f1+1
  8668  0ACE  303F               	movlw	63
  8669  0ACF  00A2               	movwf	___ftmul@f1+2
  8670  0AD0  084C               	movf	log@exponent+1,w
  8671  0AD1  00F9               	movwf	___awtoft@c+1
  8672  0AD2  084B               	movf	log@exponent,w
  8673  0AD3  00F8               	movwf	___awtoft@c
  8674  0AD4  3193  2366  318A   	fcall	___awtoft
  8675  0AD7  0878               	movf	?___awtoft,w
  8676  0AD8  0020               	movlb	0	; select bank0
  8677  0AD9  00A3               	movwf	___ftmul@f2
  8678  0ADA  0879               	movf	?___awtoft+1,w
  8679  0ADB  00A4               	movwf	___ftmul@f2+1
  8680  0ADC  087A               	movf	?___awtoft+2,w
  8681  0ADD  00A5               	movwf	___ftmul@f2+2
  8682  0ADE  318A  22F2  318A   	fcall	___ftmul
  8683  0AE1  0020               	movlb	0	; select bank0
  8684  0AE2  0820               	movf	?___ftmul,w
  8685  0AE3  00B3               	movwf	___ftadd@f2
  8686  0AE4  0821               	movf	?___ftmul+1,w
  8687  0AE5  00B4               	movwf	___ftadd@f2+1
  8688  0AE6  0822               	movf	?___ftmul+2,w
  8689  0AE7  00B5               	movwf	___ftadd@f2+2
  8690  0AE8  318C  248D         	fcall	___ftadd
  8691  0AEA  0020               	movlb	0	; select bank0
  8692  0AEB  0830               	movf	?___ftadd,w
  8693  0AEC  00C7               	movwf	?_log
  8694  0AED  0831               	movf	?___ftadd+1,w
  8695  0AEE  00C8               	movwf	?_log+1
  8696  0AEF  0832               	movf	?___ftadd+2,w
  8697  0AF0  00C9               	movwf	?_log+2
  8698  0AF1  0008               	return
  8699  0AF2                     __end_of_log:	
  8700                           
  8701                           	psect	text3
  8702  14E5                     __ptext3:	
  8703 ;; *************** function _frexp *****************
  8704 ;; Defined at:
  8705 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
  8706 ;; Parameters:    Size  Location     Type
  8707 ;;  value           3    0[COMMON] int 
  8708 ;;  eptr            1    3[COMMON] PTR int 
  8709 ;;		 -> log@exponent(2), 
  8710 ;; Auto vars:     Size  Location     Type
  8711 ;;		None
  8712 ;; Return value:  Size  Location     Type
  8713 ;;                  3    0[COMMON] PTR int 
  8714 ;; Registers used:
  8715 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8716 ;; Tracked objects:
  8717 ;;		On entry : 0/0
  8718 ;;		On exit  : 0/0
  8719 ;;		Unchanged: 0/0
  8720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8721 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8722 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8723 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8724 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8725 ;;Total ram usage:        6 bytes
  8726 ;; Hardware stack levels used:    1
  8727 ;; This function calls:
  8728 ;;		Nothing
  8729 ;; This function is called by:
  8730 ;;		_log
  8731 ;; This function uses a non-reentrant model
  8732 ;;
  8733                           
  8734                           
  8735                           ;psect for function _frexp
  8736  14E5                     _frexp:	
  8737                           
  8738                           ;incstack = 0
  8739                           ; Regs used in _frexp: [wreg+fsr1l+fsr1h+status,2+status,0]
  8740  14E5  0872               	movf	frexp@value+2,w
  8741  14E6  0471               	iorwf	frexp@value+1,w
  8742  14E7  0470               	iorwf	frexp@value,w
  8743  14E8  1D03               	skipz
  8744  14E9  2CF7               	goto	l2535
  8745  14EA  0873               	movf	frexp@eptr,w
  8746  14EB  0086               	movwf	6
  8747  14EC  0187               	clrf	7
  8748  14ED  3000               	movlw	0
  8749  14EE  3FC0               	movwi [0]fsr1
  8750  14EF  3FC1               	movwi [1]fsr1
  8751  14F0  3000               	movlw	0
  8752  14F1  00F0               	movwf	?_frexp
  8753  14F2  3000               	movlw	0
  8754  14F3  00F1               	movwf	?_frexp+1
  8755  14F4  3000               	movlw	0
  8756  14F5  00F2               	movwf	?_frexp+2
  8757  14F6  0008               	return
  8758  14F7                     l2535:	
  8759  14F7  0872               	movf	frexp@value+2,w
  8760  14F8  397F               	andlw	127
  8761  14F9  00F4               	movwf	??_frexp
  8762  14FA  01F5               	clrf	??_frexp+1
  8763  14FB  35F4               	lslf	??_frexp,f
  8764  14FC  0DF5               	rlf	??_frexp+1,f
  8765  14FD  0873               	movf	frexp@eptr,w
  8766  14FE  0086               	movwf	6
  8767  14FF  0187               	clrf	7
  8768  1500  0874               	movf	??_frexp,w
  8769  1501  3FC0               	movwi [0]fsr1
  8770  1502  0875               	movf	??_frexp+1,w
  8771  1503  3FC1               	movwi [1]fsr1
  8772  1504  0D71               	rlf	frexp@value+1,w
  8773  1505  0D71               	rlf	frexp@value+1,w
  8774  1506  3901               	andlw	1
  8775  1507  00F4               	movwf	??_frexp
  8776  1508  01F5               	clrf	??_frexp+1
  8777  1509  0873               	movf	frexp@eptr,w
  8778  150A  0086               	movwf	6
  8779  150B  0187               	clrf	7
  8780  150C  0874               	movf	??_frexp,w
  8781  150D  0481               	iorwf	1,f
  8782  150E  3141               	addfsr 1,1
  8783  150F  0875               	movf	??_frexp+1,w
  8784  1510  0481               	iorwf	1,f
  8785  1511  0873               	movf	frexp@eptr,w
  8786  1512  0086               	movwf	6
  8787  1513  0187               	clrf	7
  8788  1514  3082               	movlw	130
  8789  1515  0781               	addwf	1,f
  8790  1516  3141               	addfsr 1,1
  8791  1517  30FF               	movlw	255
  8792  1518  3D81               	addwfc	1,f
  8793  1519  317F               	addfsr 1,-1
  8794  151A  0872               	movf	frexp@value+2,w
  8795  151B  3980               	andlw	-128
  8796  151C  383F               	iorlw	63
  8797  151D  00F2               	movwf	frexp@value+2
  8798  151E  13F1               	bcf	frexp@value+1,7
  8799  151F  0008               	return
  8800  1520                     __end_of_frexp:	
  8801                           
  8802                           	psect	text4
  8803  16D9                     __ptext4:	
  8804 ;; *************** function _eval_poly *****************
  8805 ;; Defined at:
  8806 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\evalpoly.c"
  8807 ;; Parameters:    Size  Location     Type
  8808 ;;  x               3   29[BANK0 ] PTR int 
  8809 ;;  d               2   32[BANK0 ] PTR const 
  8810 ;;		 -> log@coeff(27), 
  8811 ;;  n               2   34[BANK0 ] int 
  8812 ;; Auto vars:     Size  Location     Type
  8813 ;;  res             3   36[BANK0 ] int 
  8814 ;; Return value:  Size  Location     Type
  8815 ;;                  3   29[BANK0 ] int 
  8816 ;; Registers used:
  8817 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8818 ;; Tracked objects:
  8819 ;;		On entry : 0/0
  8820 ;;		On exit  : 0/0
  8821 ;;		Unchanged: 0/0
  8822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8823 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8824 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8825 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8826 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8827 ;;Total ram usage:       10 bytes
  8828 ;; Hardware stack levels used:    1
  8829 ;; Hardware stack levels required when called:    2
  8830 ;; This function calls:
  8831 ;;		___ftadd
  8832 ;;		___ftmul
  8833 ;;		___wmul
  8834 ;; This function is called by:
  8835 ;;		_log
  8836 ;; This function uses a non-reentrant model
  8837 ;;
  8838                           
  8839                           
  8840                           ;psect for function _eval_poly
  8841  16D9                     _eval_poly:	
  8842                           
  8843                           ;incstack = 0
  8844                           ; Regs used in _eval_poly: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8845  16D9  0020               	movlb	0	; select bank0
  8846  16DA  0843               	movf	eval_poly@n+1,w
  8847  16DB  00F1               	movwf	___wmul@multiplier+1
  8848  16DC  0842               	movf	eval_poly@n,w
  8849  16DD  00F0               	movwf	___wmul@multiplier
  8850  16DE  3003               	movlw	3
  8851  16DF  00F2               	movwf	___wmul@multiplicand
  8852  16E0  3000               	movlw	0
  8853  16E1  00F3               	movwf	___wmul@multiplicand+1
  8854  16E2  3192  22EF  3196   	fcall	___wmul
  8855  16E5  0020               	movlb	0	; select bank0
  8856  16E6  0840               	movf	eval_poly@d,w
  8857  16E7  0770               	addwf	?___wmul,w
  8858  16E8  0084               	movwf	4
  8859  16E9  0841               	movf	eval_poly@d+1,w
  8860  16EA  3D71               	addwfc	?___wmul+1,w
  8861  16EB  0085               	movwf	5
  8862  16EC  3F00               	moviw [0]fsr0
  8863  16ED  00C4               	movwf	eval_poly@res
  8864  16EE  3F01               	moviw [1]fsr0
  8865  16EF  00C5               	movwf	eval_poly@res+1
  8866  16F0  3F02               	moviw [2]fsr0
  8867  16F1                     L5:	
  8868  16F1  00C6               	movwf	eval_poly@res+2
  8869  16F2  0842               	movf	eval_poly@n,w
  8870  16F3  0443               	iorwf	eval_poly@n+1,w
  8871  16F4  1903               	btfsc	3,2
  8872  16F5  2F32               	goto	l2553
  8873  16F6  30FF               	movlw	255
  8874  16F7  07C2               	addwf	eval_poly@n,f
  8875  16F8  30FF               	movlw	255
  8876  16F9  3DC3               	addwfc	eval_poly@n+1,f
  8877  16FA  0843               	movf	eval_poly@n+1,w
  8878  16FB  00F1               	movwf	___wmul@multiplier+1
  8879  16FC  0842               	movf	eval_poly@n,w
  8880  16FD  00F0               	movwf	___wmul@multiplier
  8881  16FE  3003               	movlw	3
  8882  16FF  00F2               	movwf	___wmul@multiplicand
  8883  1700  3000               	movlw	0
  8884  1701  00F3               	movwf	___wmul@multiplicand+1
  8885  1702  3192  22EF  3196   	fcall	___wmul
  8886  1705  0020               	movlb	0	; select bank0
  8887  1706  0840               	movf	eval_poly@d,w
  8888  1707  0770               	addwf	?___wmul,w
  8889  1708  0084               	movwf	4
  8890  1709  0841               	movf	eval_poly@d+1,w
  8891  170A  3D71               	addwfc	?___wmul+1,w
  8892  170B  0085               	movwf	5
  8893  170C  3F00               	moviw [0]fsr0
  8894  170D  00B0               	movwf	___ftadd@f1
  8895  170E  3F01               	moviw [1]fsr0
  8896  170F  00B1               	movwf	___ftadd@f1+1
  8897  1710  3F02               	moviw [2]fsr0
  8898  1711  00B2               	movwf	___ftadd@f1+2
  8899  1712  0844               	movf	eval_poly@res,w
  8900  1713  00A0               	movwf	___ftmul@f1
  8901  1714  0845               	movf	eval_poly@res+1,w
  8902  1715  00A1               	movwf	___ftmul@f1+1
  8903  1716  0846               	movf	eval_poly@res+2,w
  8904  1717  00A2               	movwf	___ftmul@f1+2
  8905  1718  083D               	movf	eval_poly@x,w
  8906  1719  00A3               	movwf	___ftmul@f2
  8907  171A  083E               	movf	eval_poly@x+1,w
  8908  171B  00A4               	movwf	___ftmul@f2+1
  8909  171C  083F               	movf	eval_poly@x+2,w
  8910  171D  00A5               	movwf	___ftmul@f2+2
  8911  171E  318A  22F2  3196   	fcall	___ftmul
  8912  1721  0020               	movlb	0	; select bank0
  8913  1722  0820               	movf	?___ftmul,w
  8914  1723  00B3               	movwf	___ftadd@f2
  8915  1724  0821               	movf	?___ftmul+1,w
  8916  1725  00B4               	movwf	___ftadd@f2+1
  8917  1726  0822               	movf	?___ftmul+2,w
  8918  1727  00B5               	movwf	___ftadd@f2+2
  8919  1728  318C  248D  3196   	fcall	___ftadd
  8920  172B  0020               	movlb	0	; select bank0
  8921  172C  0830               	movf	?___ftadd,w
  8922  172D  00C4               	movwf	eval_poly@res
  8923  172E  0831               	movf	?___ftadd+1,w
  8924  172F  00C5               	movwf	eval_poly@res+1
  8925  1730  0832               	movf	?___ftadd+2,w
  8926  1731  2EF1               	goto	L5
  8927  1732                     l2553:	
  8928  1732  0844               	movf	eval_poly@res,w
  8929  1733  00BD               	movwf	?_eval_poly
  8930  1734  0845               	movf	eval_poly@res+1,w
  8931  1735  00BE               	movwf	?_eval_poly+1
  8932  1736  0846               	movf	eval_poly@res+2,w
  8933  1737  00BF               	movwf	?_eval_poly+2
  8934  1738  0008               	return
  8935  1739                     __end_of_eval_poly:	
  8936                           
  8937                           	psect	text5
  8938  14AA                     __ptext5:	
  8939 ;; *************** function ___ftge *****************
  8940 ;; Defined at:
  8941 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
  8942 ;; Parameters:    Size  Location     Type
  8943 ;;  ff1             3    0[COMMON] float 
  8944 ;;  ff2             3    3[COMMON] float 
  8945 ;; Auto vars:     Size  Location     Type
  8946 ;;		None
  8947 ;; Return value:  Size  Location     Type
  8948 ;;		None               void
  8949 ;; Registers used:
  8950 ;;		wreg, status,2, status,0
  8951 ;; Tracked objects:
  8952 ;;		On entry : 0/0
  8953 ;;		On exit  : 0/0
  8954 ;;		Unchanged: 0/0
  8955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8956 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8957 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8958 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8959 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8960 ;;Total ram usage:        9 bytes
  8961 ;; Hardware stack levels used:    1
  8962 ;; This function calls:
  8963 ;;		Nothing
  8964 ;; This function is called by:
  8965 ;;		_log
  8966 ;; This function uses a non-reentrant model
  8967 ;;
  8968                           
  8969                           
  8970                           ;psect for function ___ftge
  8971  14AA                     ___ftge:	
  8972                           
  8973                           ;incstack = 0
  8974                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  8975  14AA  1FF2               	btfss	___ftge@ff1+2,7
  8976  14AB  2CC0               	goto	l2469
  8977  14AC  0970               	comf	___ftge@ff1,w
  8978  14AD  00F6               	movwf	??___ftge
  8979  14AE  0971               	comf	___ftge@ff1+1,w
  8980  14AF  00F7               	movwf	??___ftge+1
  8981  14B0  0972               	comf	___ftge@ff1+2,w
  8982  14B1  00F8               	movwf	??___ftge+2
  8983  14B2  0AF6               	incf	??___ftge,f
  8984  14B3  1903               	skipnz
  8985  14B4  0AF7               	incf	??___ftge+1,f
  8986  14B5  1903               	skipnz
  8987  14B6  0AF8               	incf	??___ftge+2,f
  8988  14B7  3000               	movlw	0
  8989  14B8  0776               	addwf	??___ftge,w
  8990  14B9  00F0               	movwf	___ftge@ff1
  8991  14BA  3000               	movlw	0
  8992  14BB  3D77               	addwfc	??___ftge+1,w
  8993  14BC  00F1               	movwf	___ftge@ff1+1
  8994  14BD  3080               	movlw	128
  8995  14BE  3D78               	addwfc	??___ftge+2,w
  8996  14BF  00F2               	movwf	___ftge@ff1+2
  8997  14C0                     l2469:	
  8998  14C0  1FF5               	btfss	___ftge@ff2+2,7
  8999  14C1  2CD6               	goto	l2473
  9000  14C2  0973               	comf	___ftge@ff2,w
  9001  14C3  00F6               	movwf	??___ftge
  9002  14C4  0974               	comf	___ftge@ff2+1,w
  9003  14C5  00F7               	movwf	??___ftge+1
  9004  14C6  0975               	comf	___ftge@ff2+2,w
  9005  14C7  00F8               	movwf	??___ftge+2
  9006  14C8  0AF6               	incf	??___ftge,f
  9007  14C9  1903               	skipnz
  9008  14CA  0AF7               	incf	??___ftge+1,f
  9009  14CB  1903               	skipnz
  9010  14CC  0AF8               	incf	??___ftge+2,f
  9011  14CD  3000               	movlw	0
  9012  14CE  0776               	addwf	??___ftge,w
  9013  14CF  00F3               	movwf	___ftge@ff2
  9014  14D0  3000               	movlw	0
  9015  14D1  3D77               	addwfc	??___ftge+1,w
  9016  14D2  00F4               	movwf	___ftge@ff2+1
  9017  14D3  3080               	movlw	128
  9018  14D4  3D78               	addwfc	??___ftge+2,w
  9019  14D5  00F5               	movwf	___ftge@ff2+2
  9020  14D6                     l2473:	
  9021  14D6  3080               	movlw	128
  9022  14D7  06F2               	xorwf	___ftge@ff1+2,f
  9023  14D8  3080               	movlw	128
  9024  14D9  06F5               	xorwf	___ftge@ff2+2,f
  9025  14DA  0875               	movf	___ftge@ff2+2,w
  9026  14DB  0272               	subwf	___ftge@ff1+2,w
  9027  14DC  1D03               	skipz
  9028  14DD  0008               	return
  9029  14DE  0874               	movf	___ftge@ff2+1,w
  9030  14DF  0271               	subwf	___ftge@ff1+1,w
  9031  14E0  1D03               	skipz
  9032  14E1  0008               	return
  9033  14E2  0873               	movf	___ftge@ff2,w
  9034  14E3  0270               	subwf	___ftge@ff1,w
  9035  14E4  0008               	return
  9036  14E5                     __end_of___ftge:	
  9037                           
  9038                           	psect	text6
  9039  130A                     __ptext6:	
  9040 ;; *************** function ___ftsub *****************
  9041 ;; Defined at:
  9042 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
  9043 ;; Parameters:    Size  Location     Type
  9044 ;;  f2              3   29[BANK0 ] float 
  9045 ;;  f1              3   32[BANK0 ] float 
  9046 ;; Auto vars:     Size  Location     Type
  9047 ;;		None
  9048 ;; Return value:  Size  Location     Type
  9049 ;;                  3   29[BANK0 ] float 
  9050 ;; Registers used:
  9051 ;;		wreg, status,2, status,0, pclath, cstack
  9052 ;; Tracked objects:
  9053 ;;		On entry : 0/0
  9054 ;;		On exit  : 0/0
  9055 ;;		Unchanged: 0/0
  9056 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9057 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9058 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9059 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9060 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9061 ;;Total ram usage:        6 bytes
  9062 ;; Hardware stack levels used:    1
  9063 ;; Hardware stack levels required when called:    2
  9064 ;; This function calls:
  9065 ;;		___ftadd
  9066 ;; This function is called by:
  9067 ;;		_tempCalc
  9068 ;; This function uses a non-reentrant model
  9069 ;;
  9070                           
  9071                           
  9072                           ;psect for function ___ftsub
  9073  130A                     ___ftsub:	
  9074                           
  9075                           ;incstack = 0
  9076                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  9077  130A  0020               	movlb	0	; select bank0
  9078  130B  083F               	movf	___ftsub@f2+2,w
  9079  130C  043E               	iorwf	___ftsub@f2+1,w
  9080  130D  043D               	iorwf	___ftsub@f2,w
  9081  130E  1903               	skipnz
  9082  130F  2B12               	goto	l2885
  9083  1310  3080               	movlw	128
  9084  1311  06BF               	xorwf	___ftsub@f2+2,f
  9085  1312                     l2885:	
  9086  1312  0840               	movf	___ftsub@f1,w
  9087  1313  00B0               	movwf	___ftadd@f1
  9088  1314  0841               	movf	___ftsub@f1+1,w
  9089  1315  00B1               	movwf	___ftadd@f1+1
  9090  1316  0842               	movf	___ftsub@f1+2,w
  9091  1317  00B2               	movwf	___ftadd@f1+2
  9092  1318  083D               	movf	___ftsub@f2,w
  9093  1319  00B3               	movwf	___ftadd@f2
  9094  131A  083E               	movf	___ftsub@f2+1,w
  9095  131B  00B4               	movwf	___ftadd@f2+1
  9096  131C  083F               	movf	___ftsub@f2+2,w
  9097  131D  00B5               	movwf	___ftadd@f2+2
  9098  131E  318C  248D         	fcall	___ftadd
  9099  1320  0020               	movlb	0	; select bank0
  9100  1321  0830               	movf	?___ftadd,w
  9101  1322  00BD               	movwf	?___ftsub
  9102  1323  0831               	movf	?___ftadd+1,w
  9103  1324  00BE               	movwf	?___ftsub+1
  9104  1325  0832               	movf	?___ftadd+2,w
  9105  1326  00BF               	movwf	?___ftsub+2
  9106  1327  0008               	return
  9107  1328                     __end_of___ftsub:	
  9108                           
  9109                           	psect	text7
  9110  0C8D                     __ptext7:	
  9111 ;; *************** function ___ftadd *****************
  9112 ;; Defined at:
  9113 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
  9114 ;; Parameters:    Size  Location     Type
  9115 ;;  f1              3   16[BANK0 ] float 
  9116 ;;  f2              3   19[BANK0 ] float 
  9117 ;; Auto vars:     Size  Location     Type
  9118 ;;  exp1            1   28[BANK0 ] unsigned char 
  9119 ;;  exp2            1   27[BANK0 ] unsigned char 
  9120 ;;  sign            1   26[BANK0 ] unsigned char 
  9121 ;; Return value:  Size  Location     Type
  9122 ;;                  3   16[BANK0 ] float 
  9123 ;; Registers used:
  9124 ;;		wreg, status,2, status,0, pclath, cstack
  9125 ;; Tracked objects:
  9126 ;;		On entry : 0/0
  9127 ;;		On exit  : 0/0
  9128 ;;		Unchanged: 0/0
  9129 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9130 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9131 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9132 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9133 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9134 ;;Total ram usage:       13 bytes
  9135 ;; Hardware stack levels used:    1
  9136 ;; Hardware stack levels required when called:    1
  9137 ;; This function calls:
  9138 ;;		___ftpack
  9139 ;; This function is called by:
  9140 ;;		_tempCalc
  9141 ;;		___ftsub
  9142 ;;		_log
  9143 ;;		_eval_poly
  9144 ;; This function uses a non-reentrant model
  9145 ;;
  9146                           
  9147                           
  9148                           ;psect for function ___ftadd
  9149  0C8D                     ___ftadd:	
  9150                           
  9151                           ;incstack = 0
  9152                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  9153  0C8D  0020               	movlb	0	; select bank0
  9154  0C8E  0830               	movf	___ftadd@f1,w
  9155  0C8F  00B6               	movwf	??___ftadd
  9156  0C90  0831               	movf	___ftadd@f1+1,w
  9157  0C91  00B7               	movwf	??___ftadd+1
  9158  0C92  0832               	movf	___ftadd@f1+2,w
  9159  0C93  00B8               	movwf	??___ftadd+2
  9160  0C94  1003               	clrc
  9161  0C95  0D37               	rlf	??___ftadd+1,w
  9162  0C96  0D38               	rlf	??___ftadd+2,w
  9163  0C97  00B9               	movwf	??___ftadd+3
  9164  0C98  0839               	movf	??___ftadd+3,w
  9165  0C99  00BC               	movwf	___ftadd@exp1
  9166  0C9A  0833               	movf	___ftadd@f2,w
  9167  0C9B  00B6               	movwf	??___ftadd
  9168  0C9C  0834               	movf	___ftadd@f2+1,w
  9169  0C9D  00B7               	movwf	??___ftadd+1
  9170  0C9E  0835               	movf	___ftadd@f2+2,w
  9171  0C9F  00B8               	movwf	??___ftadd+2
  9172  0CA0  1003               	clrc
  9173  0CA1  0D37               	rlf	??___ftadd+1,w
  9174  0CA2  0D38               	rlf	??___ftadd+2,w
  9175  0CA3  00B9               	movwf	??___ftadd+3
  9176  0CA4  0839               	movf	??___ftadd+3,w
  9177  0CA5  00BB               	movwf	___ftadd@exp2
  9178  0CA6  083C               	movf	___ftadd@exp1,w
  9179  0CA7  1903               	btfsc	3,2
  9180  0CA8  2CB5               	goto	l2337
  9181  0CA9  083B               	movf	___ftadd@exp2,w
  9182  0CAA  023C               	subwf	___ftadd@exp1,w
  9183  0CAB  1803               	skipnc
  9184  0CAC  2CBC               	goto	l2341
  9185  0CAD  033C               	decf	___ftadd@exp1,w
  9186  0CAE  3AFF               	xorlw	255
  9187  0CAF  073B               	addwf	___ftadd@exp2,w
  9188  0CB0  00B6               	movwf	??___ftadd
  9189  0CB1  3019               	movlw	25
  9190  0CB2  0236               	subwf	??___ftadd,w
  9191  0CB3  1C03               	skipc
  9192  0CB4  2CBC               	goto	l2341
  9193  0CB5                     l2337:	
  9194  0CB5  0833               	movf	___ftadd@f2,w
  9195  0CB6  00B0               	movwf	?___ftadd
  9196  0CB7  0834               	movf	___ftadd@f2+1,w
  9197  0CB8  00B1               	movwf	?___ftadd+1
  9198  0CB9  0835               	movf	___ftadd@f2+2,w
  9199  0CBA  00B2               	movwf	?___ftadd+2
  9200  0CBB  0008               	return
  9201  0CBC                     l2341:	
  9202  0CBC  083B               	movf	___ftadd@exp2,w
  9203  0CBD  1903               	btfsc	3,2
  9204  0CBE  0008               	return
  9205  0CBF  083C               	movf	___ftadd@exp1,w
  9206  0CC0  023B               	subwf	___ftadd@exp2,w
  9207  0CC1  1803               	skipnc
  9208  0CC2  2CCB               	goto	l2347
  9209  0CC3  033B               	decf	___ftadd@exp2,w
  9210  0CC4  3AFF               	xorlw	255
  9211  0CC5  073C               	addwf	___ftadd@exp1,w
  9212  0CC6  00B6               	movwf	??___ftadd
  9213  0CC7  3019               	movlw	25
  9214  0CC8  0236               	subwf	??___ftadd,w
  9215  0CC9  1803               	btfsc	3,0
  9216  0CCA  0008               	return
  9217  0CCB                     l2347:	
  9218  0CCB  3006               	movlw	6
  9219  0CCC  00B6               	movwf	??___ftadd
  9220  0CCD  0836               	movf	??___ftadd,w
  9221  0CCE  00BA               	movwf	___ftadd@sign
  9222  0CCF  1BB2               	btfsc	___ftadd@f1+2,7
  9223  0CD0  17BA               	bsf	___ftadd@sign,7
  9224  0CD1  1BB5               	btfsc	___ftadd@f2+2,7
  9225  0CD2  173A               	bsf	___ftadd@sign,6
  9226  0CD3  17B1               	bsf	___ftadd@f1+1,7
  9227  0CD4  30FF               	movlw	255
  9228  0CD5  05B0               	andwf	___ftadd@f1,f
  9229  0CD6  30FF               	movlw	255
  9230  0CD7  05B1               	andwf	___ftadd@f1+1,f
  9231  0CD8  3000               	movlw	0
  9232  0CD9  05B2               	andwf	___ftadd@f1+2,f
  9233  0CDA  17B4               	bsf	___ftadd@f2+1,7
  9234  0CDB  30FF               	movlw	255
  9235  0CDC  05B3               	andwf	___ftadd@f2,f
  9236  0CDD  30FF               	movlw	255
  9237  0CDE  05B4               	andwf	___ftadd@f2+1,f
  9238  0CDF  3000               	movlw	0
  9239  0CE0  05B5               	andwf	___ftadd@f2+2,f
  9240  0CE1  083B               	movf	___ftadd@exp2,w
  9241  0CE2  023C               	subwf	___ftadd@exp1,w
  9242  0CE3  1803               	skipnc
  9243  0CE4  2D07               	goto	l2369
  9244  0CE5                     l2359:	
  9245  0CE5  3001               	movlw	1
  9246  0CE6                     u2345:	
  9247  0CE6  35B3               	lslf	___ftadd@f2,f
  9248  0CE7  0DB4               	rlf	___ftadd@f2+1,f
  9249  0CE8  0DB5               	rlf	___ftadd@f2+2,f
  9250  0CE9  0B89               	decfsz	9,f
  9251  0CEA  2CE6               	goto	u2345
  9252  0CEB  3001               	movlw	1
  9253  0CEC  02BB               	subwf	___ftadd@exp2,f
  9254  0CED  083B               	movf	___ftadd@exp2,w
  9255  0CEE  063C               	xorwf	___ftadd@exp1,w
  9256  0CEF  1903               	skipnz
  9257  0CF0  2D02               	goto	l2367
  9258  0CF1  3001               	movlw	1
  9259  0CF2  02BA               	subwf	___ftadd@sign,f
  9260  0CF3  083A               	movf	___ftadd@sign,w
  9261  0CF4  3907               	andlw	7
  9262  0CF5  1903               	btfsc	3,2
  9263  0CF6  2D02               	goto	l2367
  9264  0CF7  2CE5               	goto	l2359
  9265  0CF8                     l2365:	
  9266  0CF8  3001               	movlw	1
  9267  0CF9                     u2375:	
  9268  0CF9  36B2               	lsrf	___ftadd@f1+2,f
  9269  0CFA  0CB1               	rrf	___ftadd@f1+1,f
  9270  0CFB  0CB0               	rrf	___ftadd@f1,f
  9271  0CFC  0B89               	decfsz	9,f
  9272  0CFD  2CF9               	goto	u2375
  9273  0CFE  3001               	movlw	1
  9274  0CFF  00B6               	movwf	??___ftadd
  9275  0D00  0836               	movf	??___ftadd,w
  9276  0D01  07BC               	addwf	___ftadd@exp1,f
  9277  0D02                     l2367:	
  9278  0D02  083C               	movf	___ftadd@exp1,w
  9279  0D03  063B               	xorwf	___ftadd@exp2,w
  9280  0D04  1903               	btfsc	3,2
  9281  0D05  2D2C               	goto	l797
  9282  0D06  2CF8               	goto	l2365
  9283  0D07                     l2369:	
  9284  0D07  083C               	movf	___ftadd@exp1,w
  9285  0D08  023B               	subwf	___ftadd@exp2,w
  9286  0D09  1803               	skipnc
  9287  0D0A  2D2C               	goto	l797
  9288  0D0B                     l2371:	
  9289  0D0B  3001               	movlw	1
  9290  0D0C                     u2405:	
  9291  0D0C  35B0               	lslf	___ftadd@f1,f
  9292  0D0D  0DB1               	rlf	___ftadd@f1+1,f
  9293  0D0E  0DB2               	rlf	___ftadd@f1+2,f
  9294  0D0F  0B89               	decfsz	9,f
  9295  0D10  2D0C               	goto	u2405
  9296  0D11  3001               	movlw	1
  9297  0D12  02BC               	subwf	___ftadd@exp1,f
  9298  0D13  083B               	movf	___ftadd@exp2,w
  9299  0D14  063C               	xorwf	___ftadd@exp1,w
  9300  0D15  1903               	skipnz
  9301  0D16  2D28               	goto	l2379
  9302  0D17  3001               	movlw	1
  9303  0D18  02BA               	subwf	___ftadd@sign,f
  9304  0D19  083A               	movf	___ftadd@sign,w
  9305  0D1A  3907               	andlw	7
  9306  0D1B  1903               	btfsc	3,2
  9307  0D1C  2D28               	goto	l2379
  9308  0D1D  2D0B               	goto	l2371
  9309  0D1E                     l2377:	
  9310  0D1E  3001               	movlw	1
  9311  0D1F                     u2435:	
  9312  0D1F  36B5               	lsrf	___ftadd@f2+2,f
  9313  0D20  0CB4               	rrf	___ftadd@f2+1,f
  9314  0D21  0CB3               	rrf	___ftadd@f2,f
  9315  0D22  0B89               	decfsz	9,f
  9316  0D23  2D1F               	goto	u2435
  9317  0D24  3001               	movlw	1
  9318  0D25  00B6               	movwf	??___ftadd
  9319  0D26  0836               	movf	??___ftadd,w
  9320  0D27  07BB               	addwf	___ftadd@exp2,f
  9321  0D28                     l2379:	
  9322  0D28  083C               	movf	___ftadd@exp1,w
  9323  0D29  063B               	xorwf	___ftadd@exp2,w
  9324  0D2A  1D03               	skipz
  9325  0D2B  2D1E               	goto	l2377
  9326  0D2C                     l797:	
  9327  0D2C  1FBA               	btfss	___ftadd@sign,7
  9328  0D2D  2D3E               	goto	l2383
  9329  0D2E  30FF               	movlw	255
  9330  0D2F  06B0               	xorwf	___ftadd@f1,f
  9331  0D30  30FF               	movlw	255
  9332  0D31  06B1               	xorwf	___ftadd@f1+1,f
  9333  0D32  30FF               	movlw	255
  9334  0D33  06B2               	xorwf	___ftadd@f1+2,f
  9335  0D34  3001               	movlw	1
  9336  0D35  07B0               	addwf	___ftadd@f1,f
  9337  0D36  3000               	movlw	0
  9338  0D37  1803               	skipnc
  9339  0D38  3001               	movlw	1
  9340  0D39  07B1               	addwf	___ftadd@f1+1,f
  9341  0D3A  3000               	movlw	0
  9342  0D3B  1803               	skipnc
  9343  0D3C  3001               	movlw	1
  9344  0D3D  07B2               	addwf	___ftadd@f1+2,f
  9345  0D3E                     l2383:	
  9346  0D3E  1F3A               	btfss	___ftadd@sign,6
  9347  0D3F  2D50               	goto	l2387
  9348  0D40  30FF               	movlw	255
  9349  0D41  06B3               	xorwf	___ftadd@f2,f
  9350  0D42  30FF               	movlw	255
  9351  0D43  06B4               	xorwf	___ftadd@f2+1,f
  9352  0D44  30FF               	movlw	255
  9353  0D45  06B5               	xorwf	___ftadd@f2+2,f
  9354  0D46  3001               	movlw	1
  9355  0D47  07B3               	addwf	___ftadd@f2,f
  9356  0D48  3000               	movlw	0
  9357  0D49  1803               	skipnc
  9358  0D4A  3001               	movlw	1
  9359  0D4B  07B4               	addwf	___ftadd@f2+1,f
  9360  0D4C  3000               	movlw	0
  9361  0D4D  1803               	skipnc
  9362  0D4E  3001               	movlw	1
  9363  0D4F  07B5               	addwf	___ftadd@f2+2,f
  9364  0D50                     l2387:	
  9365  0D50  01BA               	clrf	___ftadd@sign
  9366  0D51  0830               	movf	___ftadd@f1,w
  9367  0D52  07B3               	addwf	___ftadd@f2,f
  9368  0D53  0831               	movf	___ftadd@f1+1,w
  9369  0D54  3DB4               	addwfc	___ftadd@f2+1,f
  9370  0D55  0832               	movf	___ftadd@f1+2,w
  9371  0D56  3DB5               	addwfc	___ftadd@f2+2,f
  9372  0D57  1FB5               	btfss	___ftadd@f2+2,7
  9373  0D58  2D6B               	goto	l2397
  9374  0D59  30FF               	movlw	255
  9375  0D5A  06B3               	xorwf	___ftadd@f2,f
  9376  0D5B  30FF               	movlw	255
  9377  0D5C  06B4               	xorwf	___ftadd@f2+1,f
  9378  0D5D  30FF               	movlw	255
  9379  0D5E  06B5               	xorwf	___ftadd@f2+2,f
  9380  0D5F  3001               	movlw	1
  9381  0D60  07B3               	addwf	___ftadd@f2,f
  9382  0D61  3000               	movlw	0
  9383  0D62  1803               	skipnc
  9384  0D63  3001               	movlw	1
  9385  0D64  07B4               	addwf	___ftadd@f2+1,f
  9386  0D65  3000               	movlw	0
  9387  0D66  1803               	skipnc
  9388  0D67  3001               	movlw	1
  9389  0D68  07B5               	addwf	___ftadd@f2+2,f
  9390  0D69  01BA               	clrf	___ftadd@sign
  9391  0D6A  0ABA               	incf	___ftadd@sign,f
  9392  0D6B                     l2397:	
  9393  0D6B  0833               	movf	___ftadd@f2,w
  9394  0D6C  00F0               	movwf	___ftpack@arg
  9395  0D6D  0834               	movf	___ftadd@f2+1,w
  9396  0D6E  00F1               	movwf	___ftpack@arg+1
  9397  0D6F  0835               	movf	___ftadd@f2+2,w
  9398  0D70  00F2               	movwf	___ftpack@arg+2
  9399  0D71  083C               	movf	___ftadd@exp1,w
  9400  0D72  00B6               	movwf	??___ftadd
  9401  0D73  0836               	movf	??___ftadd,w
  9402  0D74  00F3               	movwf	___ftpack@exp
  9403  0D75  083A               	movf	___ftadd@sign,w
  9404  0D76  00B7               	movwf	??___ftadd+1
  9405  0D77  0837               	movf	??___ftadd+1,w
  9406  0D78  00F4               	movwf	___ftpack@sign
  9407  0D79  3197  279C         	fcall	___ftpack
  9408  0D7B  0870               	movf	?___ftpack,w
  9409  0D7C  0020               	movlb	0	; select bank0
  9410  0D7D  00B0               	movwf	?___ftadd
  9411  0D7E  0871               	movf	?___ftpack+1,w
  9412  0D7F  00B1               	movwf	?___ftadd+1
  9413  0D80  0872               	movf	?___ftpack+2,w
  9414  0D81  00B2               	movwf	?___ftadd+2
  9415  0D82  0008               	return
  9416  0D83                     __end_of___ftadd:	
  9417                           
  9418                           	psect	text8
  9419  0D83                     __ptext8:	
  9420 ;; *************** function _readIAnalog *****************
  9421 ;; Defined at:
  9422 ;;		line 77 in file "adc.c"
  9423 ;; Parameters:    Size  Location     Type
  9424 ;;  channel         2    6[BANK0 ] unsigned int 
  9425 ;; Auto vars:     Size  Location     Type
  9426 ;;  value           2   11[COMMON] int 
  9427 ;;  analog_chann    2    9[COMMON] unsigned int 
  9428 ;; Return value:  Size  Location     Type
  9429 ;;                  2    6[BANK0 ] int 
  9430 ;; Registers used:
  9431 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9432 ;; Tracked objects:
  9433 ;;		On entry : 0/0
  9434 ;;		On exit  : 0/0
  9435 ;;		Unchanged: 0/0
  9436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9437 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9438 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9439 ;;      Temps:          0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9440 ;;      Totals:         4      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9441 ;;Total ram usage:       24 bytes
  9442 ;; Hardware stack levels used:    1
  9443 ;; Hardware stack levels required when called:    1
  9444 ;; This function calls:
  9445 ;;		_ADCRead
  9446 ;;		___aldiv
  9447 ;;		___wmul
  9448 ;; This function is called by:
  9449 ;;		_main
  9450 ;; This function uses a non-reentrant model
  9451 ;;
  9452                           
  9453                           
  9454                           ;psect for function _readIAnalog
  9455  0D83                     _readIAnalog:	
  9456                           
  9457                           ;adc.c: 79: int16_t value;
  9458                           ;adc.c: 81: uint16_t analog_channel = channels[channel];
  9459                           
  9460                           ;incstack = 0
  9461                           ; Regs used in _readIAnalog: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9462  0D83  0020               	movlb	0	; select bank0
  9463  0D84  3526               	lslf	readIAnalog@channel,w
  9464  0D85  3E35               	addlw	(low (_channels| (0+256)))& (0+255)
  9465  0D86  0086               	movwf	6
  9466  0D87  3001               	movlw	1	; select bank2/3
  9467  0D88  0087               	movwf	7
  9468  0D89  3F40               	moviw [0]fsr1
  9469  0D8A  00F9               	movwf	readIAnalog@analog_channel
  9470  0D8B  3F41               	moviw [1]fsr1
  9471  0D8C  00FA               	movwf	readIAnalog@analog_channel+1
  9472                           
  9473                           ;adc.c: 83: value = ADCRead(analog_channel);
  9474  0D8D  0879               	movf	readIAnalog@analog_channel,w
  9475  0D8E  3192  2298  318D   	fcall	_ADCRead
  9476  0D91  0871               	movf	?_ADCRead+1,w
  9477  0D92  00FC               	movwf	readIAnalog@value+1
  9478  0D93  0870               	movf	?_ADCRead,w
  9479  0D94  00FB               	movwf	readIAnalog@value
  9480                           
  9481                           ;adc.c: 85: totals[channel] = totals[channel]-samples[channel][sampleIndex];
  9482  0D95  0020               	movlb	0	; select bank0
  9483  0D96  0826               	movf	readIAnalog@channel,w
  9484  0D97  00A8               	movwf	??_readIAnalog
  9485  0D98  3001               	movlw	1
  9486  0D99                     u3195:	
  9487  0D99  35A8               	lslf	??_readIAnalog,f
  9488  0D9A  3EFF               	addlw	-1
  9489  0D9B  1D03               	skipz
  9490  0D9C  2D99               	goto	u3195
  9491  0D9D  3528               	lslf	??_readIAnalog,w
  9492  0D9E  3E20               	addlw	(low (_totals| (0+256)))& (0+255)
  9493  0D9F  0086               	movwf	6
  9494  0DA0  3001               	movlw	1	; select bank2/3
  9495  0DA1  0087               	movwf	7
  9496  0DA2  3F40               	moviw [0]fsr1
  9497  0DA3  00A9               	movwf	??_readIAnalog+1
  9498  0DA4  3F41               	moviw [1]fsr1
  9499  0DA5  00AA               	movwf	??_readIAnalog+2
  9500  0DA6  3F42               	moviw [2]fsr1
  9501  0DA7  00AB               	movwf	??_readIAnalog+3
  9502  0DA8  3F43               	moviw [3]fsr1
  9503  0DA9  00AC               	movwf	??_readIAnalog+4
  9504  0DAA  0867               	movf	_sampleIndex+1,w
  9505  0DAB  00AE               	movwf	??_readIAnalog+6
  9506  0DAC  0866               	movf	_sampleIndex,w
  9507  0DAD  00AD               	movwf	??_readIAnalog+5
  9508  0DAE  35AD               	lslf	??_readIAnalog+5,f
  9509  0DAF  0DAE               	rlf	??_readIAnalog+6,f
  9510  0DB0  0827               	movf	readIAnalog@channel+1,w
  9511  0DB1  00F1               	movwf	___wmul@multiplier+1
  9512  0DB2  0826               	movf	readIAnalog@channel,w
  9513  0DB3  00F0               	movwf	___wmul@multiplier
  9514  0DB4  3064               	movlw	100
  9515  0DB5  00F2               	movwf	___wmul@multiplicand
  9516  0DB6  3000               	movlw	0
  9517  0DB7  00F3               	movwf	___wmul@multiplicand+1
  9518  0DB8  3192  22EF  318D   	fcall	___wmul
  9519  0DBB  3060               	movlw	96
  9520  0DBC  0020               	movlb	0	; select bank0
  9521  0DBD  00AF               	movwf	??_readIAnalog+7
  9522  0DBE  3022               	movlw	34
  9523  0DBF  00B0               	movwf	??_readIAnalog+8
  9524  0DC0  0870               	movf	?___wmul,w
  9525  0DC1  072F               	addwf	??_readIAnalog+7,w
  9526  0DC2  00B1               	movwf	??_readIAnalog+9
  9527  0DC3  0871               	movf	?___wmul+1,w
  9528  0DC4  3D30               	addwfc	??_readIAnalog+8,w
  9529  0DC5  00B2               	movwf	??_readIAnalog+10
  9530  0DC6  082D               	movf	??_readIAnalog+5,w
  9531  0DC7  0731               	addwf	??_readIAnalog+9,w
  9532  0DC8  0086               	movwf	6
  9533  0DC9  082E               	movf	??_readIAnalog+6,w
  9534  0DCA  3D32               	addwfc	??_readIAnalog+10,w
  9535  0DCB  0087               	movwf	7
  9536  0DCC  3F40               	moviw [0]fsr1
  9537  0DCD  00B3               	movwf	??_readIAnalog+11
  9538  0DCE  3F41               	moviw [1]fsr1
  9539  0DCF  00B4               	movwf	??_readIAnalog+12
  9540  0DD0  0833               	movf	??_readIAnalog+11,w
  9541  0DD1  00B5               	movwf	??_readIAnalog+13
  9542  0DD2  0834               	movf	??_readIAnalog+12,w
  9543  0DD3  00B6               	movwf	??_readIAnalog+14
  9544  0DD4  3000               	movlw	0
  9545  0DD5  1BB6               	btfsc	??_readIAnalog+14,7
  9546  0DD6  30FF               	movlw	255
  9547  0DD7  00B7               	movwf	??_readIAnalog+15
  9548  0DD8  00B8               	movwf	??_readIAnalog+16
  9549  0DD9  09B5               	comf	??_readIAnalog+13,f
  9550  0DDA  09B6               	comf	??_readIAnalog+14,f
  9551  0DDB  09B7               	comf	??_readIAnalog+15,f
  9552  0DDC  09B8               	comf	??_readIAnalog+16,f
  9553  0DDD  0AB5               	incf	??_readIAnalog+13,f
  9554  0DDE  1903               	skipnz
  9555  0DDF  0AB6               	incf	??_readIAnalog+14,f
  9556  0DE0  1903               	skipnz
  9557  0DE1  0AB7               	incf	??_readIAnalog+15,f
  9558  0DE2  1903               	skipnz
  9559  0DE3  0AB8               	incf	??_readIAnalog+16,f
  9560  0DE4  0835               	movf	??_readIAnalog+13,w
  9561  0DE5  07A9               	addwf	??_readIAnalog+1,f
  9562  0DE6  0836               	movf	??_readIAnalog+14,w
  9563  0DE7  3DAA               	addwfc	??_readIAnalog+2,f
  9564  0DE8  0837               	movf	??_readIAnalog+15,w
  9565  0DE9  3DAB               	addwfc	??_readIAnalog+3,f
  9566  0DEA  0838               	movf	??_readIAnalog+16,w
  9567  0DEB  3DAC               	addwfc	??_readIAnalog+4,f
  9568  0DEC  0826               	movf	readIAnalog@channel,w
  9569  0DED  00B9               	movwf	??_readIAnalog+17
  9570  0DEE  3001               	movlw	1
  9571  0DEF                     u3205:	
  9572  0DEF  35B9               	lslf	??_readIAnalog+17,f
  9573  0DF0  3EFF               	addlw	-1
  9574  0DF1  1D03               	skipz
  9575  0DF2  2DEF               	goto	u3205
  9576  0DF3  3539               	lslf	??_readIAnalog+17,w
  9577  0DF4  3E20               	addlw	(low (_totals| (0+256)))& (0+255)
  9578  0DF5  0086               	movwf	6
  9579  0DF6  3001               	movlw	1	; select bank2/3
  9580  0DF7  0087               	movwf	7
  9581  0DF8  0829               	movf	??_readIAnalog+1,w
  9582  0DF9  3FC0               	movwi [0]fsr1
  9583  0DFA  082A               	movf	??_readIAnalog+2,w
  9584  0DFB  3FC1               	movwi [1]fsr1
  9585  0DFC  082B               	movf	??_readIAnalog+3,w
  9586  0DFD  3FC2               	movwi [2]fsr1
  9587  0DFE  082C               	movf	??_readIAnalog+4,w
  9588  0DFF  3FC3               	movwi [3]fsr1
  9589                           
  9590                           ;adc.c: 87: samples[channel][sampleIndex] = value;
  9591  0E00  0867               	movf	_sampleIndex+1,w
  9592  0E01  00A9               	movwf	??_readIAnalog+1
  9593  0E02  0866               	movf	_sampleIndex,w
  9594  0E03  00A8               	movwf	??_readIAnalog
  9595  0E04  35A8               	lslf	??_readIAnalog,f
  9596  0E05  0DA9               	rlf	??_readIAnalog+1,f
  9597  0E06  0827               	movf	readIAnalog@channel+1,w
  9598  0E07  00F1               	movwf	___wmul@multiplier+1
  9599  0E08  0826               	movf	readIAnalog@channel,w
  9600  0E09  00F0               	movwf	___wmul@multiplier
  9601  0E0A  3064               	movlw	100
  9602  0E0B  00F2               	movwf	___wmul@multiplicand
  9603  0E0C  3000               	movlw	0
  9604  0E0D  00F3               	movwf	___wmul@multiplicand+1
  9605  0E0E  3192  22EF  318D   	fcall	___wmul
  9606  0E11  3060               	movlw	96
  9607  0E12  0020               	movlb	0	; select bank0
  9608  0E13  00AA               	movwf	??_readIAnalog+2
  9609  0E14  3022               	movlw	34
  9610  0E15  00AB               	movwf	??_readIAnalog+3
  9611  0E16  0870               	movf	?___wmul,w
  9612  0E17  072A               	addwf	??_readIAnalog+2,w
  9613  0E18  00AC               	movwf	??_readIAnalog+4
  9614  0E19  0871               	movf	?___wmul+1,w
  9615  0E1A  3D2B               	addwfc	??_readIAnalog+3,w
  9616  0E1B  00AD               	movwf	??_readIAnalog+5
  9617  0E1C  0828               	movf	??_readIAnalog,w
  9618  0E1D  072C               	addwf	??_readIAnalog+4,w
  9619  0E1E  0086               	movwf	6
  9620  0E1F  0829               	movf	??_readIAnalog+1,w
  9621  0E20  3D2D               	addwfc	??_readIAnalog+5,w
  9622  0E21  0087               	movwf	7
  9623  0E22  087B               	movf	readIAnalog@value,w
  9624  0E23  3FC0               	movwi [0]fsr1
  9625  0E24  087C               	movf	readIAnalog@value+1,w
  9626  0E25  3FC1               	movwi [1]fsr1
  9627                           
  9628                           ;adc.c: 89: totals[channel] = totals[channel]+samples[channel][sampleIndex];
  9629  0E26  0826               	movf	readIAnalog@channel,w
  9630  0E27  00A8               	movwf	??_readIAnalog
  9631  0E28  3001               	movlw	1
  9632  0E29                     u3215:	
  9633  0E29  35A8               	lslf	??_readIAnalog,f
  9634  0E2A  3EFF               	addlw	-1
  9635  0E2B  1D03               	skipz
  9636  0E2C  2E29               	goto	u3215
  9637  0E2D  3528               	lslf	??_readIAnalog,w
  9638  0E2E  3E20               	addlw	(low (_totals| (0+256)))& (0+255)
  9639  0E2F  0086               	movwf	6
  9640  0E30  3001               	movlw	1	; select bank2/3
  9641  0E31  0087               	movwf	7
  9642  0E32  3F40               	moviw [0]fsr1
  9643  0E33  00A9               	movwf	??_readIAnalog+1
  9644  0E34  3F41               	moviw [1]fsr1
  9645  0E35  00AA               	movwf	??_readIAnalog+2
  9646  0E36  3F42               	moviw [2]fsr1
  9647  0E37  00AB               	movwf	??_readIAnalog+3
  9648  0E38  3F43               	moviw [3]fsr1
  9649  0E39  00AC               	movwf	??_readIAnalog+4
  9650  0E3A  0867               	movf	_sampleIndex+1,w
  9651  0E3B  00AE               	movwf	??_readIAnalog+6
  9652  0E3C  0866               	movf	_sampleIndex,w
  9653  0E3D  00AD               	movwf	??_readIAnalog+5
  9654  0E3E  35AD               	lslf	??_readIAnalog+5,f
  9655  0E3F  0DAE               	rlf	??_readIAnalog+6,f
  9656  0E40  0827               	movf	readIAnalog@channel+1,w
  9657  0E41  00F1               	movwf	___wmul@multiplier+1
  9658  0E42  0826               	movf	readIAnalog@channel,w
  9659  0E43  00F0               	movwf	___wmul@multiplier
  9660  0E44  3064               	movlw	100
  9661  0E45  00F2               	movwf	___wmul@multiplicand
  9662  0E46  3000               	movlw	0
  9663  0E47  00F3               	movwf	___wmul@multiplicand+1
  9664  0E48  3192  22EF  318D   	fcall	___wmul
  9665  0E4B  3060               	movlw	96
  9666  0E4C  0020               	movlb	0	; select bank0
  9667  0E4D  00AF               	movwf	??_readIAnalog+7
  9668  0E4E  3022               	movlw	34
  9669  0E4F  00B0               	movwf	??_readIAnalog+8
  9670  0E50  0870               	movf	?___wmul,w
  9671  0E51  072F               	addwf	??_readIAnalog+7,w
  9672  0E52  00B1               	movwf	??_readIAnalog+9
  9673  0E53  0871               	movf	?___wmul+1,w
  9674  0E54  3D30               	addwfc	??_readIAnalog+8,w
  9675  0E55  00B2               	movwf	??_readIAnalog+10
  9676  0E56  082D               	movf	??_readIAnalog+5,w
  9677  0E57  0731               	addwf	??_readIAnalog+9,w
  9678  0E58  0086               	movwf	6
  9679  0E59  082E               	movf	??_readIAnalog+6,w
  9680  0E5A  3D32               	addwfc	??_readIAnalog+10,w
  9681  0E5B  0087               	movwf	7
  9682  0E5C  3F40               	moviw [0]fsr1
  9683  0E5D  00B3               	movwf	??_readIAnalog+11
  9684  0E5E  3F41               	moviw [1]fsr1
  9685  0E5F  00B4               	movwf	??_readIAnalog+12
  9686  0E60  0833               	movf	??_readIAnalog+11,w
  9687  0E61  00B5               	movwf	??_readIAnalog+13
  9688  0E62  0834               	movf	??_readIAnalog+12,w
  9689  0E63  00B6               	movwf	??_readIAnalog+14
  9690  0E64  3000               	movlw	0
  9691  0E65  1BB6               	btfsc	??_readIAnalog+14,7
  9692  0E66  30FF               	movlw	255
  9693  0E67  00B7               	movwf	??_readIAnalog+15
  9694  0E68  00B8               	movwf	??_readIAnalog+16
  9695  0E69  0835               	movf	??_readIAnalog+13,w
  9696  0E6A  07A9               	addwf	??_readIAnalog+1,f
  9697  0E6B  0836               	movf	??_readIAnalog+14,w
  9698  0E6C  3DAA               	addwfc	??_readIAnalog+2,f
  9699  0E6D  0837               	movf	??_readIAnalog+15,w
  9700  0E6E  3DAB               	addwfc	??_readIAnalog+3,f
  9701  0E6F  0838               	movf	??_readIAnalog+16,w
  9702  0E70  3DAC               	addwfc	??_readIAnalog+4,f
  9703  0E71  0826               	movf	readIAnalog@channel,w
  9704  0E72  00B9               	movwf	??_readIAnalog+17
  9705  0E73  3001               	movlw	1
  9706  0E74                     u3225:	
  9707  0E74  35B9               	lslf	??_readIAnalog+17,f
  9708  0E75  3EFF               	addlw	-1
  9709  0E76  1D03               	skipz
  9710  0E77  2E74               	goto	u3225
  9711  0E78  3539               	lslf	??_readIAnalog+17,w
  9712  0E79  3E20               	addlw	(low (_totals| (0+256)))& (0+255)
  9713  0E7A  0086               	movwf	6
  9714  0E7B  3001               	movlw	1	; select bank2/3
  9715  0E7C  0087               	movwf	7
  9716  0E7D  0829               	movf	??_readIAnalog+1,w
  9717  0E7E  3FC0               	movwi [0]fsr1
  9718  0E7F  082A               	movf	??_readIAnalog+2,w
  9719  0E80  3FC1               	movwi [1]fsr1
  9720  0E81  082B               	movf	??_readIAnalog+3,w
  9721  0E82  3FC2               	movwi [2]fsr1
  9722  0E83  082C               	movf	??_readIAnalog+4,w
  9723  0E84  3FC3               	movwi [3]fsr1
  9724                           
  9725                           ;adc.c: 91: if(channel>=(4-1))
  9726  0E85  3000               	movlw	0
  9727  0E86  0227               	subwf	readIAnalog@channel+1,w
  9728  0E87  3003               	movlw	3
  9729  0E88  1903               	skipnz
  9730  0E89  0226               	subwf	readIAnalog@channel,w
  9731  0E8A  1C03               	skipc
  9732  0E8B  2E99               	goto	l2925
  9733                           
  9734                           ;adc.c: 92: {
  9735                           ;adc.c: 93: sampleIndex+=1;
  9736  0E8C  3001               	movlw	1
  9737  0E8D  07E6               	addwf	_sampleIndex,f
  9738  0E8E  3000               	movlw	0
  9739  0E8F  3DE7               	addwfc	_sampleIndex+1,f
  9740                           
  9741                           ;adc.c: 94: if(sampleIndex >= 50)sampleIndex = 0;
  9742  0E90  3000               	movlw	0
  9743  0E91  0267               	subwf	_sampleIndex+1,w
  9744  0E92  3032               	movlw	50
  9745  0E93  1903               	skipnz
  9746  0E94  0266               	subwf	_sampleIndex,w
  9747  0E95  1C03               	skipc
  9748  0E96  2E99               	goto	l2925
  9749  0E97  01E6               	clrf	_sampleIndex
  9750  0E98  01E7               	clrf	_sampleIndex+1
  9751  0E99                     l2925:	
  9752                           
  9753                           ;adc.c: 95: }
  9754                           ;adc.c: 97: value = totals[channel]/50;
  9755  0E99  3000               	movlw	0
  9756  0E9A  00F3               	movwf	___aldiv@divisor+3
  9757  0E9B  3000               	movlw	0
  9758  0E9C  00F2               	movwf	___aldiv@divisor+2
  9759  0E9D  3000               	movlw	0
  9760  0E9E  00F1               	movwf	___aldiv@divisor+1
  9761  0E9F  3032               	movlw	50
  9762  0EA0  00F0               	movwf	___aldiv@divisor
  9763  0EA1  0826               	movf	readIAnalog@channel,w
  9764  0EA2  00A8               	movwf	??_readIAnalog
  9765  0EA3  3001               	movlw	1
  9766  0EA4                     u3255:	
  9767  0EA4  35A8               	lslf	??_readIAnalog,f
  9768  0EA5  3EFF               	addlw	-1
  9769  0EA6  1D03               	skipz
  9770  0EA7  2EA4               	goto	u3255
  9771  0EA8  3528               	lslf	??_readIAnalog,w
  9772  0EA9  3E20               	addlw	(low (_totals| (0+256)))& (0+255)
  9773  0EAA  0086               	movwf	6
  9774  0EAB  3001               	movlw	1	; select bank2/3
  9775  0EAC  0087               	movwf	7
  9776  0EAD  3F40               	moviw [0]fsr1
  9777  0EAE  00F4               	movwf	___aldiv@dividend
  9778  0EAF  3F41               	moviw [1]fsr1
  9779  0EB0  00F5               	movwf	___aldiv@dividend+1
  9780  0EB1  3F42               	moviw [2]fsr1
  9781  0EB2  00F6               	movwf	___aldiv@dividend+2
  9782  0EB3  3F43               	moviw [3]fsr1
  9783  0EB4  00F7               	movwf	___aldiv@dividend+3
  9784  0EB5  3188  2090         	fcall	___aldiv
  9785  0EB7  0871               	movf	?___aldiv+1,w
  9786  0EB8  00FC               	movwf	readIAnalog@value+1
  9787  0EB9  0870               	movf	?___aldiv,w
  9788  0EBA  00FB               	movwf	readIAnalog@value
  9789                           
  9790                           ;adc.c: 99: return value;
  9791  0EBB  087C               	movf	readIAnalog@value+1,w
  9792  0EBC  0020               	movlb	0	; select bank0
  9793  0EBD  00A7               	movwf	?_readIAnalog+1
  9794  0EBE  087B               	movf	readIAnalog@value,w
  9795  0EBF  00A6               	movwf	?_readIAnalog
  9796  0EC0  0008               	return
  9797  0EC1                     __end_of_readIAnalog:	
  9798                           
  9799                           	psect	text9
  9800  0890                     __ptext9:	
  9801 ;; *************** function ___aldiv *****************
  9802 ;; Defined at:
  9803 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\aldiv.c"
  9804 ;; Parameters:    Size  Location     Type
  9805 ;;  divisor         4    0[COMMON] long 
  9806 ;;  dividend        4    4[COMMON] long 
  9807 ;; Auto vars:     Size  Location     Type
  9808 ;;  quotient        4    2[BANK0 ] long 
  9809 ;;  sign            1    1[BANK0 ] unsigned char 
  9810 ;;  counter         1    0[BANK0 ] unsigned char 
  9811 ;; Return value:  Size  Location     Type
  9812 ;;                  4    0[COMMON] long 
  9813 ;; Registers used:
  9814 ;;		wreg, status,2, status,0
  9815 ;; Tracked objects:
  9816 ;;		On entry : 0/0
  9817 ;;		On exit  : 0/0
  9818 ;;		Unchanged: 0/0
  9819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9820 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9821 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9822 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9823 ;;      Totals:         9       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9824 ;;Total ram usage:       15 bytes
  9825 ;; Hardware stack levels used:    1
  9826 ;; This function calls:
  9827 ;;		Nothing
  9828 ;; This function is called by:
  9829 ;;		_readIAnalog
  9830 ;; This function uses a non-reentrant model
  9831 ;;
  9832                           
  9833                           
  9834                           ;psect for function ___aldiv
  9835  0890                     ___aldiv:	
  9836                           
  9837                           ;incstack = 0
  9838                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  9839  0890  0020               	movlb	0	; select bank0
  9840  0891  01A1               	clrf	___aldiv@sign
  9841  0892  1FF3               	btfss	___aldiv@divisor+3,7
  9842  0893  28A1               	goto	l660
  9843  0894  09F0               	comf	___aldiv@divisor,f
  9844  0895  09F1               	comf	___aldiv@divisor+1,f
  9845  0896  09F2               	comf	___aldiv@divisor+2,f
  9846  0897  09F3               	comf	___aldiv@divisor+3,f
  9847  0898  0AF0               	incf	___aldiv@divisor,f
  9848  0899  1903               	skipnz
  9849  089A  0AF1               	incf	___aldiv@divisor+1,f
  9850  089B  1903               	skipnz
  9851  089C  0AF2               	incf	___aldiv@divisor+2,f
  9852  089D  1903               	skipnz
  9853  089E  0AF3               	incf	___aldiv@divisor+3,f
  9854  089F  01A1               	clrf	___aldiv@sign
  9855  08A0  0AA1               	incf	___aldiv@sign,f
  9856  08A1                     l660:	
  9857  08A1  1FF7               	btfss	___aldiv@dividend+3,7
  9858  08A2  28B2               	goto	l2765
  9859  08A3  09F4               	comf	___aldiv@dividend,f
  9860  08A4  09F5               	comf	___aldiv@dividend+1,f
  9861  08A5  09F6               	comf	___aldiv@dividend+2,f
  9862  08A6  09F7               	comf	___aldiv@dividend+3,f
  9863  08A7  0AF4               	incf	___aldiv@dividend,f
  9864  08A8  1903               	skipnz
  9865  08A9  0AF5               	incf	___aldiv@dividend+1,f
  9866  08AA  1903               	skipnz
  9867  08AB  0AF6               	incf	___aldiv@dividend+2,f
  9868  08AC  1903               	skipnz
  9869  08AD  0AF7               	incf	___aldiv@dividend+3,f
  9870  08AE  3001               	movlw	1
  9871  08AF  00F8               	movwf	??___aldiv
  9872  08B0  0878               	movf	??___aldiv,w
  9873  08B1  06A1               	xorwf	___aldiv@sign,f
  9874  08B2                     l2765:	
  9875  08B2  3000               	movlw	0
  9876  08B3  00A5               	movwf	___aldiv@quotient+3
  9877  08B4  3000               	movlw	0
  9878  08B5  00A4               	movwf	___aldiv@quotient+2
  9879  08B6  3000               	movlw	0
  9880  08B7  00A3               	movwf	___aldiv@quotient+1
  9881  08B8  3000               	movlw	0
  9882  08B9  00A2               	movwf	___aldiv@quotient
  9883  08BA  0873               	movf	___aldiv@divisor+3,w
  9884  08BB  0472               	iorwf	___aldiv@divisor+2,w
  9885  08BC  0471               	iorwf	___aldiv@divisor+1,w
  9886  08BD  0470               	iorwf	___aldiv@divisor,w
  9887  08BE  1903               	skipnz
  9888  08BF  28FB               	goto	l2787
  9889  08C0  01A0               	clrf	___aldiv@counter
  9890  08C1  0AA0               	incf	___aldiv@counter,f
  9891  08C2                     l2773:	
  9892  08C2  1BF3               	btfsc	___aldiv@divisor+3,7
  9893  08C3  28D0               	goto	l2775
  9894  08C4  3001               	movlw	1
  9895  08C5                     u2875:	
  9896  08C5  35F0               	lslf	___aldiv@divisor,f
  9897  08C6  0DF1               	rlf	___aldiv@divisor+1,f
  9898  08C7  0DF2               	rlf	___aldiv@divisor+2,f
  9899  08C8  0DF3               	rlf	___aldiv@divisor+3,f
  9900  08C9  0B89               	decfsz	9,f
  9901  08CA  28C5               	goto	u2875
  9902  08CB  3001               	movlw	1
  9903  08CC  00F8               	movwf	??___aldiv
  9904  08CD  0878               	movf	??___aldiv,w
  9905  08CE  07A0               	addwf	___aldiv@counter,f
  9906  08CF  28C2               	goto	l2773
  9907  08D0                     l2775:	
  9908  08D0  3001               	movlw	1
  9909  08D1                     u2895:	
  9910  08D1  35A2               	lslf	___aldiv@quotient,f
  9911  08D2  0DA3               	rlf	___aldiv@quotient+1,f
  9912  08D3  0DA4               	rlf	___aldiv@quotient+2,f
  9913  08D4  0DA5               	rlf	___aldiv@quotient+3,f
  9914  08D5  0B89               	decfsz	9,f
  9915  08D6  28D1               	goto	u2895
  9916  08D7  0873               	movf	___aldiv@divisor+3,w
  9917  08D8  0277               	subwf	___aldiv@dividend+3,w
  9918  08D9  1D03               	skipz
  9919  08DA  28E5               	goto	u2905
  9920  08DB  0872               	movf	___aldiv@divisor+2,w
  9921  08DC  0276               	subwf	___aldiv@dividend+2,w
  9922  08DD  1D03               	skipz
  9923  08DE  28E5               	goto	u2905
  9924  08DF  0871               	movf	___aldiv@divisor+1,w
  9925  08E0  0275               	subwf	___aldiv@dividend+1,w
  9926  08E1  1D03               	skipz
  9927  08E2  28E5               	goto	u2905
  9928  08E3  0870               	movf	___aldiv@divisor,w
  9929  08E4  0274               	subwf	___aldiv@dividend,w
  9930  08E5                     u2905:	
  9931  08E5  1C03               	skipc
  9932  08E6  28F0               	goto	l2783
  9933  08E7  0870               	movf	___aldiv@divisor,w
  9934  08E8  02F4               	subwf	___aldiv@dividend,f
  9935  08E9  0871               	movf	___aldiv@divisor+1,w
  9936  08EA  3BF5               	subwfb	___aldiv@dividend+1,f
  9937  08EB  0872               	movf	___aldiv@divisor+2,w
  9938  08EC  3BF6               	subwfb	___aldiv@dividend+2,f
  9939  08ED  0873               	movf	___aldiv@divisor+3,w
  9940  08EE  3BF7               	subwfb	___aldiv@dividend+3,f
  9941  08EF  1422               	bsf	___aldiv@quotient,0
  9942  08F0                     l2783:	
  9943  08F0  3001               	movlw	1
  9944  08F1                     u2915:	
  9945  08F1  36F3               	lsrf	___aldiv@divisor+3,f
  9946  08F2  0CF2               	rrf	___aldiv@divisor+2,f
  9947  08F3  0CF1               	rrf	___aldiv@divisor+1,f
  9948  08F4  0CF0               	rrf	___aldiv@divisor,f
  9949  08F5  0B89               	decfsz	9,f
  9950  08F6  28F1               	goto	u2915
  9951  08F7  3001               	movlw	1
  9952  08F8  02A0               	subwf	___aldiv@counter,f
  9953  08F9  1D03               	btfss	3,2
  9954  08FA  28D0               	goto	l2775
  9955  08FB                     l2787:	
  9956  08FB  0821               	movf	___aldiv@sign,w
  9957  08FC  1903               	btfsc	3,2
  9958  08FD  2909               	goto	l2791
  9959  08FE  09A2               	comf	___aldiv@quotient,f
  9960  08FF  09A3               	comf	___aldiv@quotient+1,f
  9961  0900  09A4               	comf	___aldiv@quotient+2,f
  9962  0901  09A5               	comf	___aldiv@quotient+3,f
  9963  0902  0AA2               	incf	___aldiv@quotient,f
  9964  0903  1903               	skipnz
  9965  0904  0AA3               	incf	___aldiv@quotient+1,f
  9966  0905  1903               	skipnz
  9967  0906  0AA4               	incf	___aldiv@quotient+2,f
  9968  0907  1903               	skipnz
  9969  0908  0AA5               	incf	___aldiv@quotient+3,f
  9970  0909                     l2791:	
  9971  0909  0825               	movf	___aldiv@quotient+3,w
  9972  090A  00F3               	movwf	?___aldiv+3
  9973  090B  0824               	movf	___aldiv@quotient+2,w
  9974  090C  00F2               	movwf	?___aldiv+2
  9975  090D  0823               	movf	___aldiv@quotient+1,w
  9976  090E  00F1               	movwf	?___aldiv+1
  9977  090F  0822               	movf	___aldiv@quotient,w
  9978  0910  00F0               	movwf	?___aldiv
  9979  0911  0008               	return
  9980  0912                     __end_of___aldiv:	
  9981                           
  9982                           	psect	text10
  9983  080E                     __ptext10:	
  9984 ;; *************** function _readButton *****************
  9985 ;; Defined at:
  9986 ;;		line 9 in file "buttons.c"
  9987 ;; Parameters:    Size  Location     Type
  9988 ;;		None
  9989 ;; Auto vars:     Size  Location     Type
  9990 ;;		None
  9991 ;; Return value:  Size  Location     Type
  9992 ;;                  1    wreg      unsigned char 
  9993 ;; Registers used:
  9994 ;;		wreg, status,2, status,0, pclath, cstack
  9995 ;; Tracked objects:
  9996 ;;		On entry : 0/0
  9997 ;;		On exit  : 0/0
  9998 ;;		Unchanged: 0/0
  9999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10001 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10002 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10003 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10004 ;;Total ram usage:        2 bytes
 10005 ;; Hardware stack levels used:    1
 10006 ;; Hardware stack levels required when called:    1
 10007 ;; This function calls:
 10008 ;;		_ADCRead
 10009 ;; This function is called by:
 10010 ;;		_main
 10011 ;; This function uses a non-reentrant model
 10012 ;;
 10013                           
 10014                           
 10015                           ;psect for function _readButton
 10016  080E                     _readButton:	
 10017                           
 10018                           ;buttons.c: 11: readButtons=ADCRead(11);
 10019                           
 10020                           ;incstack = 0
 10021                           ; Regs used in _readButton: [wreg+status,2+status,0+pclath+cstack]
 10022  080E  300B               	movlw	11
 10023  080F  3192  2298  3188   	fcall	_ADCRead
 10024  0812  0871               	movf	?_ADCRead+1,w
 10025  0813  0020               	movlb	0	; select bank0
 10026  0814  00DF               	movwf	_readButtons+1
 10027  0815  0870               	movf	?_ADCRead,w
 10028  0816  00DE               	movwf	_readButtons
 10029                           
 10030                           ;buttons.c: 13: if(readButtons>=365&&readButtons<405)
 10031  0817  085F               	movf	_readButtons+1,w
 10032  0818  3A80               	xorlw	128
 10033  0819  00F4               	movwf	??_readButton
 10034  081A  3081               	movlw	129
 10035  081B  0274               	subwf	??_readButton,w
 10036  081C  1D03               	skipz
 10037  081D  2820               	goto	u3475
 10038  081E  306D               	movlw	109
 10039  081F  025E               	subwf	_readButtons,w
 10040  0820                     u3475:	
 10041  0820  1C03               	skipc
 10042  0821  2832               	goto	l3013
 10043  0822  0020               	movlb	0	; select bank0
 10044  0823  085F               	movf	_readButtons+1,w
 10045  0824  3A80               	xorlw	128
 10046  0825  00F4               	movwf	??_readButton
 10047  0826  3081               	movlw	129
 10048  0827  0274               	subwf	??_readButton,w
 10049  0828  1D03               	skipz
 10050  0829  282C               	goto	u3485
 10051  082A  3095               	movlw	149
 10052  082B  025E               	subwf	_readButtons,w
 10053  082C                     u3485:	
 10054  082C  1803               	skipnc
 10055  082D  2832               	goto	l3013
 10056                           
 10057                           ;buttons.c: 14: {
 10058                           ;buttons.c: 15: button=1;
 10059  082E  0020               	movlb	0	; select bank0
 10060  082F  01EA               	clrf	_button
 10061  0830  0AEA               	incf	_button,f
 10062                           
 10063                           ;buttons.c: 16: }
 10064  0831  2860               	goto	l3025
 10065  0832                     l3013:	
 10066                           
 10067                           ;buttons.c: 18: else if(readButtons>=535&&readButtons<590)
 10068  0832  0020               	movlb	0	; select bank0
 10069  0833  085F               	movf	_readButtons+1,w
 10070  0834  3A80               	xorlw	128
 10071  0835  00F4               	movwf	??_readButton
 10072  0836  3082               	movlw	130
 10073  0837  0274               	subwf	??_readButton,w
 10074  0838  1D03               	skipz
 10075  0839  283C               	goto	u3495
 10076  083A  3017               	movlw	23
 10077  083B  025E               	subwf	_readButtons,w
 10078  083C                     u3495:	
 10079  083C  1C03               	skipc
 10080  083D  284C               	goto	l3019
 10081  083E  0020               	movlb	0	; select bank0
 10082  083F  085F               	movf	_readButtons+1,w
 10083  0840  3A80               	xorlw	128
 10084  0841  00F4               	movwf	??_readButton
 10085  0842  3082               	movlw	130
 10086  0843  0274               	subwf	??_readButton,w
 10087  0844  1D03               	skipz
 10088  0845  2848               	goto	u3505
 10089  0846  304E               	movlw	78
 10090  0847  025E               	subwf	_readButtons,w
 10091  0848                     u3505:	
 10092  0848  1803               	skipnc
 10093  0849  284C               	goto	l3019
 10094                           
 10095                           ;buttons.c: 19: {
 10096                           ;buttons.c: 20: button=2;
 10097  084A  3002               	movlw	2
 10098  084B  2859               	goto	L7
 10099  084C                     l3019:	
 10100                           ;buttons.c: 21: }
 10101                           
 10102                           
 10103                           ;buttons.c: 23: else if(readButtons>745)
 10104  084C  0020               	movlb	0	; select bank0
 10105  084D  085F               	movf	_readButtons+1,w
 10106  084E  3A80               	xorlw	128
 10107  084F  00F4               	movwf	??_readButton
 10108  0850  3082               	movlw	130
 10109  0851  0274               	subwf	??_readButton,w
 10110  0852  1D03               	skipz
 10111  0853  2856               	goto	u3515
 10112  0854  30EA               	movlw	234
 10113  0855  025E               	subwf	_readButtons,w
 10114  0856                     u3515:	
 10115  0856  1C03               	skipc
 10116  0857  285E               	goto	l3023
 10117                           
 10118                           ;buttons.c: 24: {
 10119                           ;buttons.c: 25: button=3;
 10120  0858  3003               	movlw	3
 10121  0859                     L7:	
 10122  0859  00F4               	movwf	??_readButton
 10123  085A  0874               	movf	??_readButton,w
 10124  085B  0020               	movlb	0	; select bank0
 10125  085C  00EA               	movwf	_button
 10126                           
 10127                           ;buttons.c: 26: }
 10128  085D  2860               	goto	l3025
 10129  085E                     l3023:	
 10130                           
 10131                           ;buttons.c: 28: else
 10132                           ;buttons.c: 29: {
 10133                           ;buttons.c: 30: button=0;
 10134  085E  0020               	movlb	0	; select bank0
 10135  085F  01EA               	clrf	_button
 10136  0860                     l3025:	
 10137                           
 10138                           ;buttons.c: 31: }
 10139                           ;buttons.c: 33: if (button!=0)
 10140  0860  086A               	movf	_button,w
 10141  0861  1903               	btfsc	3,2
 10142  0862  288D               	goto	l3045
 10143                           
 10144                           ;buttons.c: 34: {
 10145                           ;buttons.c: 35: if (button!=lastButton)
 10146  0863  086A               	movf	_button,w
 10147  0864  0669               	xorwf	_lastButton,w
 10148  0865  1903               	skipnz
 10149  0866  286C               	goto	l3033
 10150                           
 10151                           ;buttons.c: 36: {
 10152                           ;buttons.c: 37: lastButton=button;
 10153  0867  086A               	movf	_button,w
 10154  0868  00F4               	movwf	??_readButton
 10155  0869  0874               	movf	??_readButton,w
 10156  086A  00E9               	movwf	_lastButton
 10157  086B  288D               	goto	l3045
 10158  086C                     l3033:	
 10159                           ;buttons.c: 39: }
 10160                           
 10161                           ;buttons.c: 38: j=0;
 10162                           
 10163                           
 10164                           ;buttons.c: 40: else
 10165                           ;buttons.c: 41: {
 10166                           ;buttons.c: 42: j+=1;
 10167  086C  3001               	movlw	1
 10168  086D  00F4               	movwf	??_readButton
 10169  086E  0874               	movf	??_readButton,w
 10170  086F  07E8               	addwf	_j,f
 10171                           
 10172                           ;buttons.c: 44: if(j==1)
 10173  0870  0368               	decf	_j,w
 10174  0871  1D03               	btfss	3,2
 10175  0872  2875               	goto	l3039
 10176                           
 10177                           ;buttons.c: 45: {
 10178                           ;buttons.c: 46: return (lastButton);
 10179  0873  0869               	movf	_lastButton,w
 10180  0874  0008               	return
 10181  0875                     l3039:	
 10182                           
 10183                           ;buttons.c: 47: }
 10184                           ;buttons.c: 49: if (j>10)
 10185  0875  0868               	movf	_j,w
 10186  0876  3A80               	xorlw	128
 10187  0877  3E75               	addlw	-139
 10188  0878  1C03               	skipc
 10189  0879  288E               	goto	l3047
 10190                           
 10191                           ;buttons.c: 50: {
 10192                           ;buttons.c: 51: _delay((unsigned long)((25)*(32000000/4000.0)));
 10193  087A  3002               	movlw	2
 10194  087B  00F5               	movwf	??_readButton+1
 10195  087C  3004               	movlw	4
 10196  087D  00F4               	movwf	??_readButton
 10197  087E  30BA               	movlw	186
 10198  087F                     u4117:	
 10199  087F  0B89               	decfsz	9,f
 10200  0880  287F               	goto	u4117
 10201  0881  0BF4               	decfsz	??_readButton,f
 10202  0882  287F               	goto	u4117
 10203  0883  0BF5               	decfsz	??_readButton+1,f
 10204  0884  287F               	goto	u4117
 10205  0885  3200               	nop2
 10206                           
 10207                           ;buttons.c: 52: j=10;
 10208  0886  300A               	movlw	10
 10209  0887  00F4               	movwf	??_readButton
 10210  0888  0874               	movf	??_readButton,w
 10211  0889  0020               	movlb	0	; select bank0
 10212  088A  00E8               	movwf	_j
 10213                           
 10214                           ;buttons.c: 53: return (lastButton);
 10215  088B  0869               	movf	_lastButton,w
 10216  088C  0008               	return
 10217  088D                     l3045:	
 10218                           ;buttons.c: 54: }
 10219                           ;buttons.c: 55: }
 10220                           ;buttons.c: 56: goto end;
 10221                           
 10222                           
 10223                           ;buttons.c: 57: }
 10224                           ;buttons.c: 59: j=0;
 10225  088D  01E8               	clrf	_j
 10226  088E                     l3047:	
 10227                           ;buttons.c: 61: end:
 10228                           
 10229                           
 10230                           ;buttons.c: 63: return (0);
 10231  088E  3000               	movlw	0
 10232  088F  0008               	return
 10233  0890                     __end_of_readButton:	
 10234                           
 10235                           	psect	text11
 10236  1298                     __ptext11:	
 10237 ;; *************** function _ADCRead *****************
 10238 ;; Defined at:
 10239 ;;		line 21 in file "adc.c"
 10240 ;; Parameters:    Size  Location     Type
 10241 ;;  channel         1    wreg     enum E14259
 10242 ;; Auto vars:     Size  Location     Type
 10243 ;;  channel         1    3[COMMON] enum E14259
 10244 ;; Return value:  Size  Location     Type
 10245 ;;                  2    0[COMMON] int 
 10246 ;; Registers used:
 10247 ;;		wreg
 10248 ;; Tracked objects:
 10249 ;;		On entry : 0/0
 10250 ;;		On exit  : 0/0
 10251 ;;		Unchanged: 0/0
 10252 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10253 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10254 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10255 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10256 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10257 ;;Total ram usage:        4 bytes
 10258 ;; Hardware stack levels used:    1
 10259 ;; This function calls:
 10260 ;;		Nothing
 10261 ;; This function is called by:
 10262 ;;		_readIAnalog
 10263 ;;		_readButton
 10264 ;;		_main
 10265 ;; This function uses a non-reentrant model
 10266 ;;
 10267                           
 10268                           
 10269                           ;psect for function _ADCRead
 10270  1298                     _ADCRead:	
 10271                           
 10272                           ;incstack = 0
 10273                           ; Regs used in _ADCRead: [wreg]
 10274                           ;ADCRead@channel stored from wreg
 10275  1298  00F3               	movwf	ADCRead@channel
 10276                           
 10277                           ;adc.c: 23: ADPCH = channel_VSS;
 10278  1299  303C               	movlw	60
 10279  129A  0021               	movlb	1	; select bank1
 10280  129B  009E               	movwf	30	;volatile
 10281                           
 10282                           ;adc.c: 25: ADCON0bits.ADON = 1;
 10283  129C  1793               	bsf	19,7	;volatile
 10284                           
 10285                           ;adc.c: 27: ADCON0bits.ADCONT = 0;
 10286  129D  1313               	bcf	19,6	;volatile
 10287                           
 10288                           ;adc.c: 29: ADCON0bits.ADGO = 1;
 10289  129E  1413               	bsf	19,0	;volatile
 10290  129F                     l57:	
 10291                           ;adc.c: 32: {
 10292                           
 10293                           ;adc.c: 31: while(ADCON0bits.ADGO)
 10294                           
 10295  129F  1813               	btfsc	19,0	;volatile
 10296  12A0  2A9F               	goto	l57
 10297                           
 10298                           ;adc.c: 33: }
 10299                           ;adc.c: 35: ADPCH = channel;
 10300  12A1  0873               	movf	ADCRead@channel,w
 10301  12A2  009E               	movwf	30	;volatile
 10302                           
 10303                           ;adc.c: 37: ADCON0bits.ADON = 1;
 10304  12A3  1793               	bsf	19,7	;volatile
 10305                           
 10306                           ;adc.c: 39: ADCON0bits.ADCONT = 0;
 10307  12A4  1313               	bcf	19,6	;volatile
 10308                           
 10309                           ;adc.c: 41: ADCON0bits.ADGO = 1;
 10310  12A5  1413               	bsf	19,0	;volatile
 10311  12A6                     l60:	
 10312                           ;adc.c: 44: {
 10313                           
 10314                           ;adc.c: 43: while(ADCON0bits.ADGO)
 10315                           
 10316  12A6  1813               	btfsc	19,0	;volatile
 10317  12A7  2AA6               	goto	l60
 10318                           
 10319                           ;adc.c: 45: }
 10320                           ;adc.c: 47: return ((ADRESH<<8)+ADRESL);
 10321  12A8  080D               	movf	13,w	;volatile
 10322  12A9  00F1               	movwf	?_ADCRead+1
 10323  12AA  080C               	movf	12,w	;volatile
 10324  12AB  00F0               	movwf	?_ADCRead
 10325  12AC  0008               	return
 10326  12AD                     __end_of_ADCRead:	
 10327                           
 10328                           	psect	text12
 10329  0EC1                     __ptext12:	
 10330 ;; *************** function _cc_cv_mode *****************
 10331 ;; Defined at:
 10332 ;;		line 83 in file "battery_charger.c"
 10333 ;; Parameters:    Size  Location     Type
 10334 ;;  z               1    wreg     unsigned char 
 10335 ;; Auto vars:     Size  Location     Type
 10336 ;;  z               1   37[BANK0 ] unsigned char 
 10337 ;; Return value:  Size  Location     Type
 10338 ;;                  1    wreg      void 
 10339 ;; Registers used:
 10340 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10341 ;; Tracked objects:
 10342 ;;		On entry : 0/0
 10343 ;;		On exit  : 0/0
 10344 ;;		Unchanged: 0/0
 10345 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10346 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10347 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10348 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10349 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10350 ;;Total ram usage:        8 bytes
 10351 ;; Hardware stack levels used:    1
 10352 ;; Hardware stack levels required when called:    2
 10353 ;; This function calls:
 10354 ;;		___awtoft
 10355 ;;		___ftmul
 10356 ;;		___fttol
 10357 ;; This function is called by:
 10358 ;;		_main
 10359 ;; This function uses a non-reentrant model
 10360 ;;
 10361                           
 10362                           
 10363                           ;psect for function _cc_cv_mode
 10364  0EC1                     _cc_cv_mode:	
 10365                           
 10366                           ;incstack = 0
 10367                           ; Regs used in _cc_cv_mode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10368                           ;cc_cv_mode@z stored from wreg
 10369  0EC1  0020               	movlb	0	; select bank0
 10370  0EC2  00C5               	movwf	cc_cv_mode@z
 10371                           
 10372                           ;battery_charger.c: 85: if(voltage[z]>=Vref[z])
 10373  0EC3  3545               	lslf	cc_cv_mode@z,w
 10374  0EC4  3E5A               	addlw	(low (_Vref| 0))& (0+255)
 10375  0EC5  0086               	movwf	6
 10376  0EC6  0187               	clrf	7
 10377  0EC7  3F40               	moviw [0]fsr1
 10378  0EC8  00BE               	movwf	??_cc_cv_mode
 10379  0EC9  3F41               	moviw [1]fsr1
 10380  0ECA  00BF               	movwf	??_cc_cv_mode+1
 10381  0ECB  3545               	lslf	cc_cv_mode@z,w
 10382  0ECC  3EB0               	addlw	(low (_voltage| 0))& (0+255)
 10383  0ECD  0086               	movwf	6
 10384  0ECE  0187               	clrf	7
 10385  0ECF  3F40               	moviw [0]fsr1
 10386  0ED0  00C0               	movwf	??_cc_cv_mode+2
 10387  0ED1  3F41               	moviw [1]fsr1
 10388  0ED2  00C1               	movwf	??_cc_cv_mode+3
 10389  0ED3  0841               	movf	??_cc_cv_mode+3,w
 10390  0ED4  3A80               	xorlw	128
 10391  0ED5  00C2               	movwf	??_cc_cv_mode+4
 10392  0ED6  083F               	movf	??_cc_cv_mode+1,w
 10393  0ED7  3A80               	xorlw	128
 10394  0ED8  0242               	subwf	??_cc_cv_mode+4,w
 10395  0ED9  1D03               	skipz
 10396  0EDA  2EDD               	goto	u3375
 10397  0EDB  083E               	movf	??_cc_cv_mode,w
 10398  0EDC  0240               	subwf	??_cc_cv_mode+2,w
 10399  0EDD                     u3375:	
 10400  0EDD  1C03               	skipc
 10401  0EDE  2F1D               	goto	l2989
 10402                           
 10403                           ;battery_charger.c: 86: {
 10404                           ;battery_charger.c: 87: if(VHoldMode[z]<9)VHoldMode[z]+=1;
 10405  0EDF  0020               	movlb	0	; select bank0
 10406  0EE0  0845               	movf	cc_cv_mode@z,w
 10407  0EE1  3E60               	addlw	(low (_VHoldMode| 0))& (0+255)
 10408  0EE2  0086               	movwf	6
 10409  0EE3  0187               	clrf	7
 10410  0EE4  0801               	movf	1,w
 10411  0EE5  3A80               	xorlw	128
 10412  0EE6  3E77               	addlw	-137
 10413  0EE7  1803               	skipnc
 10414  0EE8  2EF1               	goto	l127
 10415  0EE9  3001               	movlw	1
 10416  0EEA  00BE               	movwf	??_cc_cv_mode
 10417  0EEB  0845               	movf	cc_cv_mode@z,w
 10418  0EEC  3E60               	addlw	(low (_VHoldMode| 0))& (0+255)
 10419  0EED  0086               	movwf	6
 10420  0EEE  0187               	clrf	7
 10421  0EEF  083E               	movf	??_cc_cv_mode,w
 10422  0EF0  0781               	addwf	1,f
 10423  0EF1                     l127:	
 10424                           
 10425                           ;battery_charger.c: 88: if(VHoldMode[z]<9)VHoldMode[z]+=1;
 10426  0EF1  0845               	movf	cc_cv_mode@z,w
 10427  0EF2  3E60               	addlw	(low (_VHoldMode| 0))& (0+255)
 10428  0EF3  0086               	movwf	6
 10429  0EF4  0187               	clrf	7
 10430  0EF5  0801               	movf	1,w
 10431  0EF6  3A80               	xorlw	128
 10432  0EF7  3E77               	addlw	-137
 10433  0EF8  1803               	skipnc
 10434  0EF9  2F02               	goto	l128
 10435  0EFA  3001               	movlw	1
 10436  0EFB  00BE               	movwf	??_cc_cv_mode
 10437  0EFC  0845               	movf	cc_cv_mode@z,w
 10438  0EFD  3E60               	addlw	(low (_VHoldMode| 0))& (0+255)
 10439  0EFE  0086               	movwf	6
 10440  0EFF  0187               	clrf	7
 10441  0F00  083E               	movf	??_cc_cv_mode,w
 10442  0F01  0781               	addwf	1,f
 10443  0F02                     l128:	
 10444                           
 10445                           ;battery_charger.c: 90: if(cc_cv[z])
 10446  0F02  0845               	movf	cc_cv_mode@z,w
 10447  0F03  3ED4               	addlw	(low (_cc_cv| 0))& (0+255)
 10448  0F04  0086               	movwf	6
 10449  0F05  0187               	clrf	7
 10450  0F06  0801               	movf	1,w
 10451  0F07  1903               	btfsc	3,2
 10452  0F08  2F10               	goto	l2985
 10453                           
 10454                           ;battery_charger.c: 91: {
 10455                           ;battery_charger.c: 92: cc_cv[z]-=1;
 10456  0F09  0845               	movf	cc_cv_mode@z,w
 10457  0F0A  3ED4               	addlw	(low (_cc_cv| 0))& (0+255)
 10458  0F0B  0086               	movwf	6
 10459  0F0C  0187               	clrf	7
 10460  0F0D  3001               	movlw	1
 10461  0F0E  0281               	subwf	1,f
 10462                           
 10463                           ;battery_charger.c: 93: }
 10464  0F0F  2F45               	goto	l132
 10465  0F10                     l2985:	
 10466                           
 10467                           ;battery_charger.c: 94: else
 10468                           ;battery_charger.c: 95: {
 10469                           ;battery_charger.c: 96: if(Imode[z])
 10470  0F10  0845               	movf	cc_cv_mode@z,w
 10471  0F11  3E62               	addlw	(low (_Imode| 0))& (0+255)
 10472  0F12  0086               	movwf	6
 10473  0F13  0187               	clrf	7
 10474  0F14  0801               	movf	1,w
 10475  0F15  1903               	btfsc	3,2
 10476  0F16  2F45               	goto	l132
 10477                           
 10478                           ;battery_charger.c: 97: {
 10479                           ;battery_charger.c: 98: Imode[z]=0;
 10480  0F17  0845               	movf	cc_cv_mode@z,w
 10481  0F18  3E62               	addlw	(low (_Imode| 0))& (0+255)
 10482  0F19  0086               	movwf	6
 10483  0F1A  0187               	clrf	7
 10484  0F1B  0181               	clrf	1
 10485                           
 10486                           ;battery_charger.c: 99: }
 10487                           ;battery_charger.c: 100: }
 10488                           ;battery_charger.c: 101: }
 10489  0F1C  2F45               	goto	l132
 10490  0F1D                     l2989:	
 10491                           
 10492                           ;battery_charger.c: 102: else
 10493                           ;battery_charger.c: 103: {
 10494                           ;battery_charger.c: 104: VHoldMode[z]-=1;
 10495  0F1D  30FF               	movlw	255
 10496  0F1E  0020               	movlb	0	; select bank0
 10497  0F1F  00BE               	movwf	??_cc_cv_mode
 10498  0F20  0845               	movf	cc_cv_mode@z,w
 10499  0F21  3E60               	addlw	(low (_VHoldMode| 0))& (0+255)
 10500  0F22  0086               	movwf	6
 10501  0F23  0187               	clrf	7
 10502  0F24  083E               	movf	??_cc_cv_mode,w
 10503  0F25  0781               	addwf	1,f
 10504                           
 10505                           ;battery_charger.c: 105: if(VHoldMode[z]<(9*-1))
 10506  0F26  0845               	movf	cc_cv_mode@z,w
 10507  0F27  3E60               	addlw	(low (_VHoldMode| 0))& (0+255)
 10508  0F28  0086               	movwf	6
 10509  0F29  0187               	clrf	7
 10510  0F2A  0801               	movf	1,w
 10511  0F2B  3A80               	xorlw	128
 10512  0F2C  3E89               	addlw	137
 10513  0F2D  1803               	skipnc
 10514  0F2E  2F45               	goto	l132
 10515                           
 10516                           ;battery_charger.c: 106: {
 10517                           ;battery_charger.c: 107: Imode[z]=1;
 10518  0F2F  0845               	movf	cc_cv_mode@z,w
 10519  0F30  3E62               	addlw	(low (_Imode| 0))& (0+255)
 10520  0F31  0086               	movwf	6
 10521  0F32  0187               	clrf	7
 10522  0F33  0181               	clrf	1
 10523  0F34  0A81               	incf	1,f
 10524                           
 10525                           ;battery_charger.c: 108: cc_cv[z]=(9*2);
 10526  0F35  3012               	movlw	18
 10527  0F36  00BE               	movwf	??_cc_cv_mode
 10528  0F37  0845               	movf	cc_cv_mode@z,w
 10529  0F38  3ED4               	addlw	(low (_cc_cv| 0))& (0+255)
 10530  0F39  0086               	movwf	6
 10531  0F3A  0187               	clrf	7
 10532  0F3B  083E               	movf	??_cc_cv_mode,w
 10533  0F3C  0081               	movwf	1
 10534                           
 10535                           ;battery_charger.c: 109: VHoldMode[z]=(9*-1);
 10536  0F3D  30F7               	movlw	247
 10537  0F3E  00BE               	movwf	??_cc_cv_mode
 10538  0F3F  0845               	movf	cc_cv_mode@z,w
 10539  0F40  3E60               	addlw	(low (_VHoldMode| 0))& (0+255)
 10540  0F41  0086               	movwf	6
 10541  0F42  0187               	clrf	7
 10542  0F43  083E               	movf	??_cc_cv_mode,w
 10543  0F44  0081               	movwf	1
 10544  0F45                     l132:	
 10545                           
 10546                           ;battery_charger.c: 110: }
 10547                           ;battery_charger.c: 111: }
 10548                           ;battery_charger.c: 113: if(current[z]>Iref[z])
 10549  0F45  3545               	lslf	cc_cv_mode@z,w
 10550  0F46  3EB8               	addlw	(low (_current| 0))& (0+255)
 10551  0F47  0086               	movwf	6
 10552  0F48  0187               	clrf	7
 10553  0F49  3F40               	moviw [0]fsr1
 10554  0F4A  00BE               	movwf	??_cc_cv_mode
 10555  0F4B  3F41               	moviw [1]fsr1
 10556  0F4C  00BF               	movwf	??_cc_cv_mode+1
 10557  0F4D  3545               	lslf	cc_cv_mode@z,w
 10558  0F4E  3EC4               	addlw	(low (_Iref| 0))& (0+255)
 10559  0F4F  0086               	movwf	6
 10560  0F50  0187               	clrf	7
 10561  0F51  3F40               	moviw [0]fsr1
 10562  0F52  00C0               	movwf	??_cc_cv_mode+2
 10563  0F53  3F41               	moviw [1]fsr1
 10564  0F54  00C1               	movwf	??_cc_cv_mode+3
 10565  0F55  0841               	movf	??_cc_cv_mode+3,w
 10566  0F56  3A80               	xorlw	128
 10567  0F57  00C2               	movwf	??_cc_cv_mode+4
 10568  0F58  083F               	movf	??_cc_cv_mode+1,w
 10569  0F59  3A80               	xorlw	128
 10570  0F5A  0242               	subwf	??_cc_cv_mode+4,w
 10571  0F5B  1D03               	skipz
 10572  0F5C  2F5F               	goto	u3435
 10573  0F5D  083E               	movf	??_cc_cv_mode,w
 10574  0F5E  0240               	subwf	??_cc_cv_mode+2,w
 10575  0F5F                     u3435:	
 10576  0F5F  1803               	skipnc
 10577  0F60  0008               	return
 10578                           
 10579                           ;battery_charger.c: 114: {
 10580                           ;battery_charger.c: 115: if(!(Imode[z]))
 10581  0F61  0020               	movlb	0	; select bank0
 10582  0F62  0845               	movf	cc_cv_mode@z,w
 10583  0F63  3E62               	addlw	(low (_Imode| 0))& (0+255)
 10584  0F64  0086               	movwf	6
 10585  0F65  0187               	clrf	7
 10586  0F66  0801               	movf	1,w
 10587  0F67  1D03               	btfss	3,2
 10588  0F68  0008               	return
 10589                           
 10590                           ;battery_charger.c: 116: {
 10591                           ;battery_charger.c: 117: if(batteryState[z]==FLOAT)
 10592  0F69  0845               	movf	cc_cv_mode@z,w
 10593  0F6A  3E64               	addlw	(low (_batteryState| 0))& (0+255)
 10594  0F6B  0086               	movwf	6
 10595  0F6C  0187               	clrf	7
 10596  0F6D  3005               	movlw	5
 10597  0F6E  0601               	xorwf	1,w
 10598  0F6F  1D03               	btfss	3,2
 10599  0F70  0008               	return
 10600                           
 10601                           ;battery_charger.c: 118: {
 10602                           ;battery_charger.c: 119: if(voltage[z]<1350+(int16_t)((250-batteryTemp)*.24)-70)
 10603  0F71  096C               	comf	_batteryTemp,w
 10604  0F72  00BE               	movwf	??_cc_cv_mode
 10605  0F73  096D               	comf	_batteryTemp+1,w
 10606  0F74  00BF               	movwf	??_cc_cv_mode+1
 10607  0F75  0ABE               	incf	??_cc_cv_mode,f
 10608  0F76  1903               	skipnz
 10609  0F77  0ABF               	incf	??_cc_cv_mode+1,f
 10610  0F78  083E               	movf	??_cc_cv_mode,w
 10611  0F79  3EFA               	addlw	250
 10612  0F7A  00F8               	movwf	___awtoft@c
 10613  0F7B  3000               	movlw	0
 10614  0F7C  3D3F               	addwfc	??_cc_cv_mode+1,w
 10615  0F7D  00F9               	movwf	___awtoft@c+1
 10616  0F7E  3193  2366  318E   	fcall	___awtoft
 10617  0F81  0878               	movf	?___awtoft,w
 10618  0F82  0020               	movlb	0	; select bank0
 10619  0F83  00A3               	movwf	___ftmul@f2
 10620  0F84  0879               	movf	?___awtoft+1,w
 10621  0F85  00A4               	movwf	___ftmul@f2+1
 10622  0F86  087A               	movf	?___awtoft+2,w
 10623  0F87  00A5               	movwf	___ftmul@f2+2
 10624  0F88  30C3               	movlw	195
 10625  0F89  00A0               	movwf	___ftmul@f1
 10626  0F8A  3075               	movlw	117
 10627  0F8B  00A1               	movwf	___ftmul@f1+1
 10628  0F8C  303E               	movlw	62
 10629  0F8D  00A2               	movwf	___ftmul@f1+2
 10630  0F8E  318A  22F2  318E   	fcall	___ftmul
 10631  0F91  0020               	movlb	0	; select bank0
 10632  0F92  0820               	movf	?___ftmul,w
 10633  0F93  00B0               	movwf	___fttol@f1
 10634  0F94  0821               	movf	?___ftmul+1,w
 10635  0F95  00B1               	movwf	___fttol@f1+1
 10636  0F96  0822               	movf	?___ftmul+2,w
 10637  0F97  00B2               	movwf	___fttol@f1+2
 10638  0F98  3189  2112  318E   	fcall	___fttol
 10639  0F9B  0020               	movlb	0	; select bank0
 10640  0F9C  0830               	movf	?___fttol,w
 10641  0F9D  3E00               	addlw	0
 10642  0F9E  00C0               	movwf	??_cc_cv_mode+2
 10643  0F9F  3005               	movlw	5
 10644  0FA0  3D31               	addwfc	?___fttol+1,w
 10645  0FA1  00C1               	movwf	??_cc_cv_mode+3
 10646  0FA2  3545               	lslf	cc_cv_mode@z,w
 10647  0FA3  3EB0               	addlw	(low (_voltage| 0))& (0+255)
 10648  0FA4  0086               	movwf	6
 10649  0FA5  0187               	clrf	7
 10650  0FA6  3F40               	moviw [0]fsr1
 10651  0FA7  00C2               	movwf	??_cc_cv_mode+4
 10652  0FA8  3F41               	moviw [1]fsr1
 10653  0FA9  00C3               	movwf	??_cc_cv_mode+5
 10654  0FAA  0843               	movf	??_cc_cv_mode+5,w
 10655  0FAB  3A80               	xorlw	128
 10656  0FAC  00C4               	movwf	??_cc_cv_mode+6
 10657  0FAD  0841               	movf	??_cc_cv_mode+3,w
 10658  0FAE  3A80               	xorlw	128
 10659  0FAF  0244               	subwf	??_cc_cv_mode+6,w
 10660  0FB0  1D03               	skipz
 10661  0FB1  2FB4               	goto	u3465
 10662  0FB2  0840               	movf	??_cc_cv_mode+2,w
 10663  0FB3  0242               	subwf	??_cc_cv_mode+4,w
 10664  0FB4                     u3465:	
 10665  0FB4  1803               	skipnc
 10666  0FB5  0008               	return
 10667                           
 10668                           ;battery_charger.c: 120: {
 10669                           ;battery_charger.c: 121: batteryState[z]=CHARGE;
 10670  0FB6  3004               	movlw	4
 10671  0FB7  0020               	movlb	0	; select bank0
 10672  0FB8  00BE               	movwf	??_cc_cv_mode
 10673  0FB9  0845               	movf	cc_cv_mode@z,w
 10674  0FBA  3E64               	addlw	(low (_batteryState| 0))& (0+255)
 10675  0FBB  0086               	movwf	6
 10676  0FBC  0187               	clrf	7
 10677  0FBD  083E               	movf	??_cc_cv_mode,w
 10678  0FBE  0081               	movwf	1
 10679                           
 10680                           ;battery_charger.c: 122: Vref[z]=1425+(int16_t)((250-batteryTemp)*.24);
 10681  0FBF  096C               	comf	_batteryTemp,w
 10682  0FC0  00BE               	movwf	??_cc_cv_mode
 10683  0FC1  096D               	comf	_batteryTemp+1,w
 10684  0FC2  00BF               	movwf	??_cc_cv_mode+1
 10685  0FC3  0ABE               	incf	??_cc_cv_mode,f
 10686  0FC4  1903               	skipnz
 10687  0FC5  0ABF               	incf	??_cc_cv_mode+1,f
 10688  0FC6  083E               	movf	??_cc_cv_mode,w
 10689  0FC7  3EFA               	addlw	250
 10690  0FC8  00F8               	movwf	___awtoft@c
 10691  0FC9  3000               	movlw	0
 10692  0FCA  3D3F               	addwfc	??_cc_cv_mode+1,w
 10693  0FCB  00F9               	movwf	___awtoft@c+1
 10694  0FCC  3193  2366  318E   	fcall	___awtoft
 10695  0FCF  0878               	movf	?___awtoft,w
 10696  0FD0  0020               	movlb	0	; select bank0
 10697  0FD1  00A3               	movwf	___ftmul@f2
 10698  0FD2  0879               	movf	?___awtoft+1,w
 10699  0FD3  00A4               	movwf	___ftmul@f2+1
 10700  0FD4  087A               	movf	?___awtoft+2,w
 10701  0FD5  00A5               	movwf	___ftmul@f2+2
 10702  0FD6  30C3               	movlw	195
 10703  0FD7  00A0               	movwf	___ftmul@f1
 10704  0FD8  3075               	movlw	117
 10705  0FD9  00A1               	movwf	___ftmul@f1+1
 10706  0FDA  303E               	movlw	62
 10707  0FDB  00A2               	movwf	___ftmul@f1+2
 10708  0FDC  318A  22F2  318E   	fcall	___ftmul
 10709  0FDF  0020               	movlb	0	; select bank0
 10710  0FE0  0820               	movf	?___ftmul,w
 10711  0FE1  00B0               	movwf	___fttol@f1
 10712  0FE2  0821               	movf	?___ftmul+1,w
 10713  0FE3  00B1               	movwf	___fttol@f1+1
 10714  0FE4  0822               	movf	?___ftmul+2,w
 10715  0FE5  00B2               	movwf	___fttol@f1+2
 10716  0FE6  3189  2112         	fcall	___fttol
 10717  0FE8  0020               	movlb	0	; select bank0
 10718  0FE9  0830               	movf	?___fttol,w
 10719  0FEA  3E91               	addlw	145
 10720  0FEB  00C0               	movwf	??_cc_cv_mode+2
 10721  0FEC  3005               	movlw	5
 10722  0FED  3D31               	addwfc	?___fttol+1,w
 10723  0FEE  00C1               	movwf	??_cc_cv_mode+3
 10724  0FEF  3545               	lslf	cc_cv_mode@z,w
 10725  0FF0  3E5A               	addlw	(low (_Vref| 0))& (0+255)
 10726  0FF1  0086               	movwf	6
 10727  0FF2  0187               	clrf	7
 10728  0FF3  0840               	movf	??_cc_cv_mode+2,w
 10729  0FF4  3FC0               	movwi [0]fsr1
 10730  0FF5  0841               	movf	??_cc_cv_mode+3,w
 10731  0FF6  3FC1               	movwi [1]fsr1
 10732                           
 10733                           ;battery_charger.c: 123: Iref[z]=35;
 10734  0FF7  3545               	lslf	cc_cv_mode@z,w
 10735  0FF8  3EC4               	addlw	(low (_Iref| 0))& (0+255)
 10736  0FF9  0086               	movwf	6
 10737  0FFA  0187               	clrf	7
 10738  0FFB  3023               	movlw	35
 10739  0FFC  3FC0               	movwi [0]fsr1
 10740  0FFD  3000               	movlw	0
 10741  0FFE  3FC1               	movwi [1]fsr1
 10742  0FFF  0008               	return
 10743  1000                     __end_of_cc_cv_mode:	
 10744                           
 10745                           	psect	text13
 10746  15EF                     __ptext13:	
 10747 ;; *************** function _calculateCurrent3 *****************
 10748 ;; Defined at:
 10749 ;;		line 439 in file "main.c"
 10750 ;; Parameters:    Size  Location     Type
 10751 ;;		None
 10752 ;; Auto vars:     Size  Location     Type
 10753 ;;		None
 10754 ;; Return value:  Size  Location     Type
 10755 ;;                  1    wreg      void 
 10756 ;; Registers used:
 10757 ;;		wreg, status,2, status,0, pclath, cstack
 10758 ;; Tracked objects:
 10759 ;;		On entry : 0/0
 10760 ;;		On exit  : 0/0
 10761 ;;		Unchanged: 0/0
 10762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10763 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10764 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10765 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10766 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10767 ;;Total ram usage:        3 bytes
 10768 ;; Hardware stack levels used:    1
 10769 ;; Hardware stack levels required when called:    2
 10770 ;; This function calls:
 10771 ;;		___awtoft
 10772 ;;		___ftdiv
 10773 ;;		___fttol
 10774 ;; This function is called by:
 10775 ;;		_main
 10776 ;; This function uses a non-reentrant model
 10777 ;;
 10778                           
 10779                           
 10780                           ;psect for function _calculateCurrent3
 10781  15EF                     _calculateCurrent3:	
 10782                           
 10783                           ;main.c: 441: if(Ianalogs[3]-559<=0)
 10784                           
 10785                           ;incstack = 0
 10786                           ; Regs used in _calculateCurrent3: [wreg+status,2+status,0+pclath+cstack]
 10787  15EF  0021               	movlb	1	; select bank1
 10788  15F0  0826               	movf	(_Ianalogs^(0+128)+6),w
 10789  15F1  3ED1               	addlw	209
 10790  15F2  0020               	movlb	0	; select bank0
 10791  15F3  00BE               	movwf	??_calculateCurrent3
 10792  15F4  30FD               	movlw	253
 10793  15F5  0021               	movlb	1	; select bank1
 10794  15F6  3D27               	addwfc	((_Ianalogs+1)^(0+128)+6),w
 10795  15F7  0020               	movlb	0	; select bank0
 10796  15F8  00BF               	movwf	??_calculateCurrent3+1
 10797  15F9  083F               	movf	??_calculateCurrent3+1,w
 10798  15FA  3A80               	xorlw	128
 10799  15FB  00C0               	movwf	??_calculateCurrent3+2
 10800  15FC  3080               	movlw	128
 10801  15FD  0240               	subwf	??_calculateCurrent3+2,w
 10802  15FE  1D03               	skipz
 10803  15FF  2E02               	goto	u3725
 10804  1600  3001               	movlw	1
 10805  1601  023E               	subwf	??_calculateCurrent3,w
 10806  1602                     u3725:	
 10807  1602  1803               	skipnc
 10808  1603  2E08               	goto	l3165
 10809                           
 10810                           ;main.c: 442: {
 10811                           ;main.c: 443: current[3]=0;
 10812  1604  0021               	movlb	1	; select bank1
 10813  1605  01BE               	clrf	(_current^(0+128)+6)
 10814  1606  01BF               	clrf	((_current+1)^(0+128)+6)
 10815                           
 10816                           ;main.c: 444: }
 10817  1607  0008               	return
 10818  1608                     l3165:	
 10819                           
 10820                           ;main.c: 445: else
 10821                           ;main.c: 446: {
 10822                           ;main.c: 447: current[3]=(int16_t)((Ianalogs[3]-559)/1.60575);
 10823  1608  0021               	movlb	1	; select bank1
 10824  1609  0826               	movf	(_Ianalogs^(0+128)+6),w
 10825  160A  3ED1               	addlw	209
 10826  160B  00F8               	movwf	___awtoft@c
 10827  160C  30FD               	movlw	253
 10828  160D  3D27               	addwfc	((_Ianalogs+1)^(0+128)+6),w
 10829  160E  00F9               	movwf	___awtoft@c+1
 10830  160F  3193  2366  3195   	fcall	___awtoft
 10831  1612  0878               	movf	?___awtoft,w
 10832  1613  0020               	movlb	0	; select bank0
 10833  1614  00A3               	movwf	___ftdiv@f1
 10834  1615  0879               	movf	?___awtoft+1,w
 10835  1616  00A4               	movwf	___ftdiv@f1+1
 10836  1617  087A               	movf	?___awtoft+2,w
 10837  1618  00A5               	movwf	___ftdiv@f1+2
 10838  1619  3089               	movlw	137
 10839  161A  00A0               	movwf	___ftdiv@f2
 10840  161B  30CD               	movlw	205
 10841  161C  00A1               	movwf	___ftdiv@f2+1
 10842  161D  303F               	movlw	63
 10843  161E  00A2               	movwf	___ftdiv@f2+2
 10844  161F  3189  2199  3195   	fcall	___ftdiv
 10845  1622  0020               	movlb	0	; select bank0
 10846  1623  0820               	movf	?___ftdiv,w
 10847  1624  00B0               	movwf	___fttol@f1
 10848  1625  0821               	movf	?___ftdiv+1,w
 10849  1626  00B1               	movwf	___fttol@f1+1
 10850  1627  0822               	movf	?___ftdiv+2,w
 10851  1628  00B2               	movwf	___fttol@f1+2
 10852  1629  3189  2112         	fcall	___fttol
 10853  162B  0020               	movlb	0	; select bank0
 10854  162C  0831               	movf	?___fttol+1,w
 10855  162D  0021               	movlb	1	; select bank1
 10856  162E  00BF               	movwf	((_current+1)^(0+128)+6)
 10857  162F  0020               	movlb	0	; select bank0
 10858  1630  0830               	movf	?___fttol,w
 10859  1631  0021               	movlb	1	; select bank1
 10860  1632  00BE               	movwf	(_current^(0+128)+6)
 10861  1633  0008               	return
 10862  1634                     __end_of_calculateCurrent3:	
 10863                           
 10864                           	psect	text14
 10865  15AA                     __ptext14:	
 10866 ;; *************** function _calculateCurrent2 *****************
 10867 ;; Defined at:
 10868 ;;		line 427 in file "main.c"
 10869 ;; Parameters:    Size  Location     Type
 10870 ;;		None
 10871 ;; Auto vars:     Size  Location     Type
 10872 ;;		None
 10873 ;; Return value:  Size  Location     Type
 10874 ;;                  1    wreg      void 
 10875 ;; Registers used:
 10876 ;;		wreg, status,2, status,0, pclath, cstack
 10877 ;; Tracked objects:
 10878 ;;		On entry : 0/0
 10879 ;;		On exit  : 0/0
 10880 ;;		Unchanged: 0/0
 10881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10882 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10883 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10884 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10885 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10886 ;;Total ram usage:        3 bytes
 10887 ;; Hardware stack levels used:    1
 10888 ;; Hardware stack levels required when called:    2
 10889 ;; This function calls:
 10890 ;;		___awtoft
 10891 ;;		___ftdiv
 10892 ;;		___fttol
 10893 ;; This function is called by:
 10894 ;;		_main
 10895 ;; This function uses a non-reentrant model
 10896 ;;
 10897                           
 10898                           
 10899                           ;psect for function _calculateCurrent2
 10900  15AA                     _calculateCurrent2:	
 10901                           
 10902                           ;main.c: 429: if(Ianalogs[2]-589<=0)
 10903                           
 10904                           ;incstack = 0
 10905                           ; Regs used in _calculateCurrent2: [wreg+status,2+status,0+pclath+cstack]
 10906  15AA  0021               	movlb	1	; select bank1
 10907  15AB  0824               	movf	(_Ianalogs^(0+128)+4),w
 10908  15AC  3EB3               	addlw	179
 10909  15AD  0020               	movlb	0	; select bank0
 10910  15AE  00BE               	movwf	??_calculateCurrent2
 10911  15AF  30FD               	movlw	253
 10912  15B0  0021               	movlb	1	; select bank1
 10913  15B1  3D25               	addwfc	((_Ianalogs+1)^(0+128)+4),w
 10914  15B2  0020               	movlb	0	; select bank0
 10915  15B3  00BF               	movwf	??_calculateCurrent2+1
 10916  15B4  083F               	movf	??_calculateCurrent2+1,w
 10917  15B5  3A80               	xorlw	128
 10918  15B6  00C0               	movwf	??_calculateCurrent2+2
 10919  15B7  3080               	movlw	128
 10920  15B8  0240               	subwf	??_calculateCurrent2+2,w
 10921  15B9  1D03               	skipz
 10922  15BA  2DBD               	goto	u3715
 10923  15BB  3001               	movlw	1
 10924  15BC  023E               	subwf	??_calculateCurrent2,w
 10925  15BD                     u3715:	
 10926  15BD  1803               	skipnc
 10927  15BE  2DC3               	goto	l3159
 10928                           
 10929                           ;main.c: 430: {
 10930                           ;main.c: 431: current[2]=0;
 10931  15BF  0021               	movlb	1	; select bank1
 10932  15C0  01BC               	clrf	(_current^(0+128)+4)
 10933  15C1  01BD               	clrf	((_current+1)^(0+128)+4)
 10934                           
 10935                           ;main.c: 432: }
 10936  15C2  0008               	return
 10937  15C3                     l3159:	
 10938                           
 10939                           ;main.c: 433: else
 10940                           ;main.c: 434: {
 10941                           ;main.c: 435: current[2]=(int16_t)((Ianalogs[2]-589)/1.3165);
 10942  15C3  0021               	movlb	1	; select bank1
 10943  15C4  0824               	movf	(_Ianalogs^(0+128)+4),w
 10944  15C5  3EB3               	addlw	179
 10945  15C6  00F8               	movwf	___awtoft@c
 10946  15C7  30FD               	movlw	253
 10947  15C8  3D25               	addwfc	((_Ianalogs+1)^(0+128)+4),w
 10948  15C9  00F9               	movwf	___awtoft@c+1
 10949  15CA  3193  2366  3195   	fcall	___awtoft
 10950  15CD  0878               	movf	?___awtoft,w
 10951  15CE  0020               	movlb	0	; select bank0
 10952  15CF  00A3               	movwf	___ftdiv@f1
 10953  15D0  0879               	movf	?___awtoft+1,w
 10954  15D1  00A4               	movwf	___ftdiv@f1+1
 10955  15D2  087A               	movf	?___awtoft+2,w
 10956  15D3  00A5               	movwf	___ftdiv@f1+2
 10957  15D4  3083               	movlw	131
 10958  15D5  00A0               	movwf	___ftdiv@f2
 10959  15D6  30A8               	movlw	168
 10960  15D7  00A1               	movwf	___ftdiv@f2+1
 10961  15D8  303F               	movlw	63
 10962  15D9  00A2               	movwf	___ftdiv@f2+2
 10963  15DA  3189  2199  3195   	fcall	___ftdiv
 10964  15DD  0020               	movlb	0	; select bank0
 10965  15DE  0820               	movf	?___ftdiv,w
 10966  15DF  00B0               	movwf	___fttol@f1
 10967  15E0  0821               	movf	?___ftdiv+1,w
 10968  15E1  00B1               	movwf	___fttol@f1+1
 10969  15E2  0822               	movf	?___ftdiv+2,w
 10970  15E3  00B2               	movwf	___fttol@f1+2
 10971  15E4  3189  2112         	fcall	___fttol
 10972  15E6  0020               	movlb	0	; select bank0
 10973  15E7  0831               	movf	?___fttol+1,w
 10974  15E8  0021               	movlb	1	; select bank1
 10975  15E9  00BD               	movwf	((_current+1)^(0+128)+4)
 10976  15EA  0020               	movlb	0	; select bank0
 10977  15EB  0830               	movf	?___fttol,w
 10978  15EC  0021               	movlb	1	; select bank1
 10979  15ED  00BC               	movwf	(_current^(0+128)+4)
 10980  15EE  0008               	return
 10981  15EF                     __end_of_calculateCurrent2:	
 10982                           
 10983                           	psect	text15
 10984  1565                     __ptext15:	
 10985 ;; *************** function _calculateCurrent1 *****************
 10986 ;; Defined at:
 10987 ;;		line 415 in file "main.c"
 10988 ;; Parameters:    Size  Location     Type
 10989 ;;		None
 10990 ;; Auto vars:     Size  Location     Type
 10991 ;;		None
 10992 ;; Return value:  Size  Location     Type
 10993 ;;                  1    wreg      void 
 10994 ;; Registers used:
 10995 ;;		wreg, status,2, status,0, pclath, cstack
 10996 ;; Tracked objects:
 10997 ;;		On entry : 0/0
 10998 ;;		On exit  : 0/0
 10999 ;;		Unchanged: 0/0
 11000 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11001 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11002 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11003 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11004 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11005 ;;Total ram usage:        3 bytes
 11006 ;; Hardware stack levels used:    1
 11007 ;; Hardware stack levels required when called:    2
 11008 ;; This function calls:
 11009 ;;		___awtoft
 11010 ;;		___ftdiv
 11011 ;;		___fttol
 11012 ;; This function is called by:
 11013 ;;		_main
 11014 ;; This function uses a non-reentrant model
 11015 ;;
 11016                           
 11017                           
 11018                           ;psect for function _calculateCurrent1
 11019  1565                     _calculateCurrent1:	
 11020                           
 11021                           ;main.c: 417: if(Ianalogs[1]-561<=0)
 11022                           
 11023                           ;incstack = 0
 11024                           ; Regs used in _calculateCurrent1: [wreg+status,2+status,0+pclath+cstack]
 11025  1565  0021               	movlb	1	; select bank1
 11026  1566  0822               	movf	(_Ianalogs^(0+128)+2),w
 11027  1567  3ECF               	addlw	207
 11028  1568  0020               	movlb	0	; select bank0
 11029  1569  00BE               	movwf	??_calculateCurrent1
 11030  156A  30FD               	movlw	253
 11031  156B  0021               	movlb	1	; select bank1
 11032  156C  3D23               	addwfc	((_Ianalogs+1)^(0+128)+2),w
 11033  156D  0020               	movlb	0	; select bank0
 11034  156E  00BF               	movwf	??_calculateCurrent1+1
 11035  156F  083F               	movf	??_calculateCurrent1+1,w
 11036  1570  3A80               	xorlw	128
 11037  1571  00C0               	movwf	??_calculateCurrent1+2
 11038  1572  3080               	movlw	128
 11039  1573  0240               	subwf	??_calculateCurrent1+2,w
 11040  1574  1D03               	skipz
 11041  1575  2D78               	goto	u3705
 11042  1576  3001               	movlw	1
 11043  1577  023E               	subwf	??_calculateCurrent1,w
 11044  1578                     u3705:	
 11045  1578  1803               	skipnc
 11046  1579  2D7E               	goto	l3153
 11047                           
 11048                           ;main.c: 418: {
 11049                           ;main.c: 419: current[1]=0;
 11050  157A  0021               	movlb	1	; select bank1
 11051  157B  01BA               	clrf	(_current^(0+128)+2)
 11052  157C  01BB               	clrf	((_current+1)^(0+128)+2)
 11053                           
 11054                           ;main.c: 420: }
 11055  157D  0008               	return
 11056  157E                     l3153:	
 11057                           
 11058                           ;main.c: 421: else
 11059                           ;main.c: 422: {
 11060                           ;main.c: 423: current[1]=(int16_t)((Ianalogs[1]-561)/1.99055);
 11061  157E  0021               	movlb	1	; select bank1
 11062  157F  0822               	movf	(_Ianalogs^(0+128)+2),w
 11063  1580  3ECF               	addlw	207
 11064  1581  00F8               	movwf	___awtoft@c
 11065  1582  30FD               	movlw	253
 11066  1583  3D23               	addwfc	((_Ianalogs+1)^(0+128)+2),w
 11067  1584  00F9               	movwf	___awtoft@c+1
 11068  1585  3193  2366  3195   	fcall	___awtoft
 11069  1588  0878               	movf	?___awtoft,w
 11070  1589  0020               	movlb	0	; select bank0
 11071  158A  00A3               	movwf	___ftdiv@f1
 11072  158B  0879               	movf	?___awtoft+1,w
 11073  158C  00A4               	movwf	___ftdiv@f1+1
 11074  158D  087A               	movf	?___awtoft+2,w
 11075  158E  00A5               	movwf	___ftdiv@f1+2
 11076  158F  30CA               	movlw	202
 11077  1590  00A0               	movwf	___ftdiv@f2
 11078  1591  30FE               	movlw	254
 11079  1592  00A1               	movwf	___ftdiv@f2+1
 11080  1593  303F               	movlw	63
 11081  1594  00A2               	movwf	___ftdiv@f2+2
 11082  1595  3189  2199  3195   	fcall	___ftdiv
 11083  1598  0020               	movlb	0	; select bank0
 11084  1599  0820               	movf	?___ftdiv,w
 11085  159A  00B0               	movwf	___fttol@f1
 11086  159B  0821               	movf	?___ftdiv+1,w
 11087  159C  00B1               	movwf	___fttol@f1+1
 11088  159D  0822               	movf	?___ftdiv+2,w
 11089  159E  00B2               	movwf	___fttol@f1+2
 11090  159F  3189  2112         	fcall	___fttol
 11091  15A1  0020               	movlb	0	; select bank0
 11092  15A2  0831               	movf	?___fttol+1,w
 11093  15A3  0021               	movlb	1	; select bank1
 11094  15A4  00BB               	movwf	((_current+1)^(0+128)+2)
 11095  15A5  0020               	movlb	0	; select bank0
 11096  15A6  0830               	movf	?___fttol,w
 11097  15A7  0021               	movlb	1	; select bank1
 11098  15A8  00BA               	movwf	(_current^(0+128)+2)
 11099  15A9  0008               	return
 11100  15AA                     __end_of_calculateCurrent1:	
 11101                           
 11102                           	psect	text16
 11103  1520                     __ptext16:	
 11104 ;; *************** function _calculateCurrent0 *****************
 11105 ;; Defined at:
 11106 ;;		line 403 in file "main.c"
 11107 ;; Parameters:    Size  Location     Type
 11108 ;;		None
 11109 ;; Auto vars:     Size  Location     Type
 11110 ;;		None
 11111 ;; Return value:  Size  Location     Type
 11112 ;;                  1    wreg      void 
 11113 ;; Registers used:
 11114 ;;		wreg, status,2, status,0, pclath, cstack
 11115 ;; Tracked objects:
 11116 ;;		On entry : 0/0
 11117 ;;		On exit  : 0/0
 11118 ;;		Unchanged: 0/0
 11119 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11120 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11121 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11122 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11123 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11124 ;;Total ram usage:        3 bytes
 11125 ;; Hardware stack levels used:    1
 11126 ;; Hardware stack levels required when called:    2
 11127 ;; This function calls:
 11128 ;;		___awtoft
 11129 ;;		___ftdiv
 11130 ;;		___fttol
 11131 ;; This function is called by:
 11132 ;;		_main
 11133 ;; This function uses a non-reentrant model
 11134 ;;
 11135                           
 11136                           
 11137                           ;psect for function _calculateCurrent0
 11138  1520                     _calculateCurrent0:	
 11139                           
 11140                           ;main.c: 405: if(Ianalogs[0]-578<=0)
 11141                           
 11142                           ;incstack = 0
 11143                           ; Regs used in _calculateCurrent0: [wreg+status,2+status,0+pclath+cstack]
 11144  1520  0021               	movlb	1	; select bank1
 11145  1521  0820               	movf	_Ianalogs^(0+128),w
 11146  1522  3EBE               	addlw	190
 11147  1523  0020               	movlb	0	; select bank0
 11148  1524  00BE               	movwf	??_calculateCurrent0
 11149  1525  30FD               	movlw	253
 11150  1526  0021               	movlb	1	; select bank1
 11151  1527  3D21               	addwfc	(_Ianalogs+1)^(0+128),w
 11152  1528  0020               	movlb	0	; select bank0
 11153  1529  00BF               	movwf	??_calculateCurrent0+1
 11154  152A  083F               	movf	??_calculateCurrent0+1,w
 11155  152B  3A80               	xorlw	128
 11156  152C  00C0               	movwf	??_calculateCurrent0+2
 11157  152D  3080               	movlw	128
 11158  152E  0240               	subwf	??_calculateCurrent0+2,w
 11159  152F  1D03               	skipz
 11160  1530  2D33               	goto	u3695
 11161  1531  3001               	movlw	1
 11162  1532  023E               	subwf	??_calculateCurrent0,w
 11163  1533                     u3695:	
 11164  1533  1803               	skipnc
 11165  1534  2D39               	goto	l3147
 11166                           
 11167                           ;main.c: 406: {
 11168                           ;main.c: 407: current[0]=0;
 11169  1535  0021               	movlb	1	; select bank1
 11170  1536  01B8               	clrf	_current^(0+128)
 11171  1537  01B9               	clrf	(_current+1)^(0+128)
 11172                           
 11173                           ;main.c: 408: }
 11174  1538  0008               	return
 11175  1539                     l3147:	
 11176                           
 11177                           ;main.c: 409: else
 11178                           ;main.c: 410: {
 11179                           ;main.c: 411: current[0]=(int16_t)((Ianalogs[0]-578)/3.2323);
 11180  1539  0021               	movlb	1	; select bank1
 11181  153A  0820               	movf	_Ianalogs^(0+128),w
 11182  153B  3EBE               	addlw	190
 11183  153C  00F8               	movwf	___awtoft@c
 11184  153D  30FD               	movlw	253
 11185  153E  3D21               	addwfc	(_Ianalogs+1)^(0+128),w
 11186  153F  00F9               	movwf	___awtoft@c+1
 11187  1540  3193  2366  3195   	fcall	___awtoft
 11188  1543  0878               	movf	?___awtoft,w
 11189  1544  0020               	movlb	0	; select bank0
 11190  1545  00A3               	movwf	___ftdiv@f1
 11191  1546  0879               	movf	?___awtoft+1,w
 11192  1547  00A4               	movwf	___ftdiv@f1+1
 11193  1548  087A               	movf	?___awtoft+2,w
 11194  1549  00A5               	movwf	___ftdiv@f1+2
 11195  154A  30DE               	movlw	222
 11196  154B  00A0               	movwf	___ftdiv@f2
 11197  154C  304E               	movlw	78
 11198  154D  00A1               	movwf	___ftdiv@f2+1
 11199  154E  3040               	movlw	64
 11200  154F  00A2               	movwf	___ftdiv@f2+2
 11201  1550  3189  2199  3195   	fcall	___ftdiv
 11202  1553  0020               	movlb	0	; select bank0
 11203  1554  0820               	movf	?___ftdiv,w
 11204  1555  00B0               	movwf	___fttol@f1
 11205  1556  0821               	movf	?___ftdiv+1,w
 11206  1557  00B1               	movwf	___fttol@f1+1
 11207  1558  0822               	movf	?___ftdiv+2,w
 11208  1559  00B2               	movwf	___fttol@f1+2
 11209  155A  3189  2112         	fcall	___fttol
 11210  155C  0020               	movlb	0	; select bank0
 11211  155D  0831               	movf	?___fttol+1,w
 11212  155E  0021               	movlb	1	; select bank1
 11213  155F  00B9               	movwf	(_current+1)^(0+128)
 11214  1560  0020               	movlb	0	; select bank0
 11215  1561  0830               	movf	?___fttol,w
 11216  1562  0021               	movlb	1	; select bank1
 11217  1563  00B8               	movwf	_current^(0+128)
 11218  1564  0008               	return
 11219  1565                     __end_of_calculateCurrent0:	
 11220                           
 11221                           	psect	text17
 11222  0999                     __ptext17:	
 11223 ;; *************** function ___ftdiv *****************
 11224 ;; Defined at:
 11225 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
 11226 ;; Parameters:    Size  Location     Type
 11227 ;;  f2              3    0[BANK0 ] float 
 11228 ;;  f1              3    3[BANK0 ] float 
 11229 ;; Auto vars:     Size  Location     Type
 11230 ;;  f3              3   11[BANK0 ] float 
 11231 ;;  sign            1   15[BANK0 ] unsigned char 
 11232 ;;  exp             1   14[BANK0 ] unsigned char 
 11233 ;;  cntr            1   10[BANK0 ] unsigned char 
 11234 ;; Return value:  Size  Location     Type
 11235 ;;                  3    0[BANK0 ] float 
 11236 ;; Registers used:
 11237 ;;		wreg, status,2, status,0, pclath, cstack
 11238 ;; Tracked objects:
 11239 ;;		On entry : 0/0
 11240 ;;		On exit  : 0/0
 11241 ;;		Unchanged: 0/0
 11242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11243 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11244 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11245 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11246 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11247 ;;Total ram usage:       16 bytes
 11248 ;; Hardware stack levels used:    1
 11249 ;; Hardware stack levels required when called:    1
 11250 ;; This function calls:
 11251 ;;		___ftpack
 11252 ;; This function is called by:
 11253 ;;		_tempCalc
 11254 ;;		_main
 11255 ;;		_calculateCurrent0
 11256 ;;		_calculateCurrent1
 11257 ;;		_calculateCurrent2
 11258 ;;		_calculateCurrent3
 11259 ;; This function uses a non-reentrant model
 11260 ;;
 11261                           
 11262                           
 11263                           ;psect for function ___ftdiv
 11264  0999                     ___ftdiv:	
 11265                           
 11266                           ;incstack = 0
 11267                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 11268  0999  0020               	movlb	0	; select bank0
 11269  099A  0823               	movf	___ftdiv@f1,w
 11270  099B  00A6               	movwf	??___ftdiv
 11271  099C  0824               	movf	___ftdiv@f1+1,w
 11272  099D  00A7               	movwf	??___ftdiv+1
 11273  099E  0825               	movf	___ftdiv@f1+2,w
 11274  099F  00A8               	movwf	??___ftdiv+2
 11275  09A0  1003               	clrc
 11276  09A1  0D27               	rlf	??___ftdiv+1,w
 11277  09A2  0D28               	rlf	??___ftdiv+2,w
 11278  09A3  00A9               	movwf	??___ftdiv+3
 11279  09A4  0829               	movf	??___ftdiv+3,w
 11280  09A5  00AE               	movwf	___ftdiv@exp
 11281  09A6  082E               	movf	___ftdiv@exp,w
 11282  09A7  1D03               	btfss	3,2
 11283  09A8  29B0               	goto	l2845
 11284  09A9  3000               	movlw	0
 11285  09AA  00A0               	movwf	?___ftdiv
 11286  09AB  3000               	movlw	0
 11287  09AC  00A1               	movwf	?___ftdiv+1
 11288  09AD  3000               	movlw	0
 11289  09AE  00A2               	movwf	?___ftdiv+2
 11290  09AF  0008               	return
 11291  09B0                     l2845:	
 11292  09B0  0820               	movf	___ftdiv@f2,w
 11293  09B1  00A6               	movwf	??___ftdiv
 11294  09B2  0821               	movf	___ftdiv@f2+1,w
 11295  09B3  00A7               	movwf	??___ftdiv+1
 11296  09B4  0822               	movf	___ftdiv@f2+2,w
 11297  09B5  00A8               	movwf	??___ftdiv+2
 11298  09B6  1003               	clrc
 11299  09B7  0D27               	rlf	??___ftdiv+1,w
 11300  09B8  0D28               	rlf	??___ftdiv+2,w
 11301  09B9  00A9               	movwf	??___ftdiv+3
 11302  09BA  0829               	movf	??___ftdiv+3,w
 11303  09BB  00AF               	movwf	___ftdiv@sign
 11304  09BC  082F               	movf	___ftdiv@sign,w
 11305  09BD  1D03               	btfss	3,2
 11306  09BE  29C6               	goto	l2851
 11307  09BF  3000               	movlw	0
 11308  09C0  00A0               	movwf	?___ftdiv
 11309  09C1  3000               	movlw	0
 11310  09C2  00A1               	movwf	?___ftdiv+1
 11311  09C3  3000               	movlw	0
 11312  09C4  00A2               	movwf	?___ftdiv+2
 11313  09C5  0008               	return
 11314  09C6                     l2851:	
 11315  09C6  3000               	movlw	0
 11316  09C7  00AB               	movwf	___ftdiv@f3
 11317  09C8  3000               	movlw	0
 11318  09C9  00AC               	movwf	___ftdiv@f3+1
 11319  09CA  3000               	movlw	0
 11320  09CB  00AD               	movwf	___ftdiv@f3+2
 11321  09CC  3089               	movlw	137
 11322  09CD  072F               	addwf	___ftdiv@sign,w
 11323  09CE  00A6               	movwf	??___ftdiv
 11324  09CF  0826               	movf	??___ftdiv,w
 11325  09D0  02AE               	subwf	___ftdiv@exp,f
 11326  09D1  0823               	movf	___ftdiv@f1,w
 11327  09D2  00A6               	movwf	??___ftdiv
 11328  09D3  0824               	movf	___ftdiv@f1+1,w
 11329  09D4  00A7               	movwf	??___ftdiv+1
 11330  09D5  0825               	movf	___ftdiv@f1+2,w
 11331  09D6  00A8               	movwf	??___ftdiv+2
 11332  09D7  3010               	movlw	16
 11333  09D8                     u3065:	
 11334  09D8  36A8               	lsrf	??___ftdiv+2,f
 11335  09D9  0CA7               	rrf	??___ftdiv+1,f
 11336  09DA  0CA6               	rrf	??___ftdiv,f
 11337  09DB  0B89               	decfsz	9,f
 11338  09DC  29D8               	goto	u3065
 11339  09DD  0826               	movf	??___ftdiv,w
 11340  09DE  00A9               	movwf	??___ftdiv+3
 11341  09DF  0829               	movf	??___ftdiv+3,w
 11342  09E0  00AF               	movwf	___ftdiv@sign
 11343  09E1  0820               	movf	___ftdiv@f2,w
 11344  09E2  00A6               	movwf	??___ftdiv
 11345  09E3  0821               	movf	___ftdiv@f2+1,w
 11346  09E4  00A7               	movwf	??___ftdiv+1
 11347  09E5  0822               	movf	___ftdiv@f2+2,w
 11348  09E6  00A8               	movwf	??___ftdiv+2
 11349  09E7  3010               	movlw	16
 11350  09E8                     u3075:	
 11351  09E8  36A8               	lsrf	??___ftdiv+2,f
 11352  09E9  0CA7               	rrf	??___ftdiv+1,f
 11353  09EA  0CA6               	rrf	??___ftdiv,f
 11354  09EB  0B89               	decfsz	9,f
 11355  09EC  29E8               	goto	u3075
 11356  09ED  0826               	movf	??___ftdiv,w
 11357  09EE  00A9               	movwf	??___ftdiv+3
 11358  09EF  0829               	movf	??___ftdiv+3,w
 11359  09F0  06AF               	xorwf	___ftdiv@sign,f
 11360  09F1  3080               	movlw	128
 11361  09F2  00A6               	movwf	??___ftdiv
 11362  09F3  0826               	movf	??___ftdiv,w
 11363  09F4  05AF               	andwf	___ftdiv@sign,f
 11364  09F5  17A4               	bsf	___ftdiv@f1+1,7
 11365  09F6  30FF               	movlw	255
 11366  09F7  05A3               	andwf	___ftdiv@f1,f
 11367  09F8  30FF               	movlw	255
 11368  09F9  05A4               	andwf	___ftdiv@f1+1,f
 11369  09FA  3000               	movlw	0
 11370  09FB  05A5               	andwf	___ftdiv@f1+2,f
 11371  09FC  17A1               	bsf	___ftdiv@f2+1,7
 11372  09FD  30FF               	movlw	255
 11373  09FE  05A0               	andwf	___ftdiv@f2,f
 11374  09FF  30FF               	movlw	255
 11375  0A00  05A1               	andwf	___ftdiv@f2+1,f
 11376  0A01  3000               	movlw	0
 11377  0A02  05A2               	andwf	___ftdiv@f2+2,f
 11378  0A03  3018               	movlw	24
 11379  0A04  00A6               	movwf	??___ftdiv
 11380  0A05  0826               	movf	??___ftdiv,w
 11381  0A06  00AA               	movwf	___ftdiv@cntr
 11382  0A07                     l2865:	
 11383  0A07  3001               	movlw	1
 11384  0A08                     u3085:	
 11385  0A08  35AB               	lslf	___ftdiv@f3,f
 11386  0A09  0DAC               	rlf	___ftdiv@f3+1,f
 11387  0A0A  0DAD               	rlf	___ftdiv@f3+2,f
 11388  0A0B  0B89               	decfsz	9,f
 11389  0A0C  2A08               	goto	u3085
 11390  0A0D  0822               	movf	___ftdiv@f2+2,w
 11391  0A0E  0225               	subwf	___ftdiv@f1+2,w
 11392  0A0F  1D03               	skipz
 11393  0A10  2A17               	goto	u3095
 11394  0A11  0821               	movf	___ftdiv@f2+1,w
 11395  0A12  0224               	subwf	___ftdiv@f1+1,w
 11396  0A13  1D03               	skipz
 11397  0A14  2A17               	goto	u3095
 11398  0A15  0820               	movf	___ftdiv@f2,w
 11399  0A16  0223               	subwf	___ftdiv@f1,w
 11400  0A17                     u3095:	
 11401  0A17  1C03               	skipc
 11402  0A18  2A20               	goto	l2873
 11403  0A19  0820               	movf	___ftdiv@f2,w
 11404  0A1A  02A3               	subwf	___ftdiv@f1,f
 11405  0A1B  0821               	movf	___ftdiv@f2+1,w
 11406  0A1C  3BA4               	subwfb	___ftdiv@f1+1,f
 11407  0A1D  0822               	movf	___ftdiv@f2+2,w
 11408  0A1E  3BA5               	subwfb	___ftdiv@f1+2,f
 11409  0A1F  142B               	bsf	___ftdiv@f3,0
 11410  0A20                     l2873:	
 11411  0A20  3001               	movlw	1
 11412  0A21                     u3105:	
 11413  0A21  35A3               	lslf	___ftdiv@f1,f
 11414  0A22  0DA4               	rlf	___ftdiv@f1+1,f
 11415  0A23  0DA5               	rlf	___ftdiv@f1+2,f
 11416  0A24  0B89               	decfsz	9,f
 11417  0A25  2A21               	goto	u3105
 11418  0A26  3001               	movlw	1
 11419  0A27  02AA               	subwf	___ftdiv@cntr,f
 11420  0A28  1D03               	btfss	3,2
 11421  0A29  2A07               	goto	l2865
 11422  0A2A  082B               	movf	___ftdiv@f3,w
 11423  0A2B  00F0               	movwf	___ftpack@arg
 11424  0A2C  082C               	movf	___ftdiv@f3+1,w
 11425  0A2D  00F1               	movwf	___ftpack@arg+1
 11426  0A2E  082D               	movf	___ftdiv@f3+2,w
 11427  0A2F  00F2               	movwf	___ftpack@arg+2
 11428  0A30  082E               	movf	___ftdiv@exp,w
 11429  0A31  00A6               	movwf	??___ftdiv
 11430  0A32  0826               	movf	??___ftdiv,w
 11431  0A33  00F3               	movwf	___ftpack@exp
 11432  0A34  082F               	movf	___ftdiv@sign,w
 11433  0A35  00A7               	movwf	??___ftdiv+1
 11434  0A36  0827               	movf	??___ftdiv+1,w
 11435  0A37  00F4               	movwf	___ftpack@sign
 11436  0A38  3197  279C         	fcall	___ftpack
 11437  0A3A  0870               	movf	?___ftpack,w
 11438  0A3B  0020               	movlb	0	; select bank0
 11439  0A3C  00A0               	movwf	?___ftdiv
 11440  0A3D  0871               	movf	?___ftpack+1,w
 11441  0A3E  00A1               	movwf	?___ftdiv+1
 11442  0A3F  0872               	movf	?___ftpack+2,w
 11443  0A40  00A2               	movwf	?___ftdiv+2
 11444  0A41  0008               	return
 11445  0A42                     __end_of___ftdiv:	
 11446                           
 11447                           	psect	text18
 11448  146F                     __ptext18:	
 11449 ;; *************** function _SYSTEM_Initialize *****************
 11450 ;; Defined at:
 11451 ;;		line 71 in file "system.c"
 11452 ;; Parameters:    Size  Location     Type
 11453 ;;		None
 11454 ;; Auto vars:     Size  Location     Type
 11455 ;;		None
 11456 ;; Return value:  Size  Location     Type
 11457 ;;                  1    wreg      void 
 11458 ;; Registers used:
 11459 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11460 ;; Tracked objects:
 11461 ;;		On entry : 0/0
 11462 ;;		On exit  : 0/0
 11463 ;;		Unchanged: 0/0
 11464 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11465 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11466 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11467 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11468 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11469 ;;Total ram usage:        2 bytes
 11470 ;; Hardware stack levels used:    1
 11471 ;; Hardware stack levels required when called:    3
 11472 ;; This function calls:
 11473 ;;		_ADC_Initialize
 11474 ;;		_Init_Battery_State_Machine
 11475 ;;		_LCDClear
 11476 ;;		_LCDInit
 11477 ;;		_OSCILLATOR_Initialize
 11478 ;;		_PIN_MANAGER_Initialize
 11479 ;;		_PWM_Initialize
 11480 ;;		_TMR2_Initialize
 11481 ;;		_TMR4_Initialize
 11482 ;; This function is called by:
 11483 ;;		_main
 11484 ;; This function uses a non-reentrant model
 11485 ;;
 11486                           
 11487                           
 11488                           ;psect for function _SYSTEM_Initialize
 11489  146F                     _SYSTEM_Initialize:	
 11490                           
 11491                           ;system.c: 73: PIN_MANAGER_Initialize();
 11492                           
 11493                           ;incstack = 0
 11494                           ; Regs used in _SYSTEM_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11495  146F  3193  23FD  3194   	fcall	_PIN_MANAGER_Initialize
 11496                           
 11497                           ;system.c: 74: OSCILLATOR_Initialize();
 11498  1472  3192  224E  3194   	fcall	_OSCILLATOR_Initialize
 11499                           
 11500                           ;system.c: 76: ADC_Initialize();
 11501  1475  3193  2328  3194   	fcall	_ADC_Initialize
 11502                           
 11503                           ;system.c: 77: PWM_Initialize();
 11504  1478  3193  2347  3194   	fcall	_PWM_Initialize
 11505                           
 11506                           ;system.c: 79: TMR2_Initialize();
 11507  147B  3192  2263  3194   	fcall	_TMR2_Initialize
 11508                           
 11509                           ;system.c: 80: TMR4_Initialize();
 11510  147E  3188  2000  3194   	fcall	_TMR4_Initialize
 11511                           
 11512                           ;system.c: 81: Init_Battery_State_Machine(0);
 11513  1481  3000               	movlw	0
 11514  1482  3197  2739  3194   	fcall	_Init_Battery_State_Machine
 11515                           
 11516                           ;system.c: 82: Init_Battery_State_Machine(1);
 11517  1485  3001               	movlw	1
 11518  1486  3197  2739  3194   	fcall	_Init_Battery_State_Machine
 11519                           
 11520                           ;system.c: 83: LCDInit();
 11521  1489  3194  2434  3194   	fcall	_LCDInit
 11522                           
 11523                           ;system.c: 84: _delay((unsigned long)((200)*(32000000/4000.0)));
 11524  148C  3009               	movlw	9
 11525  148D  0020               	movlb	0	; select bank0
 11526  148E  00C4               	movwf	??_SYSTEM_Initialize+1
 11527  148F  301E               	movlw	30
 11528  1490  00C3               	movwf	??_SYSTEM_Initialize
 11529  1491  30E4               	movlw	228
 11530  1492                     u4127:	
 11531  1492  0B89               	decfsz	9,f
 11532  1493  2C92               	goto	u4127
 11533  1494  0BC3               	decfsz	??_SYSTEM_Initialize,f
 11534  1495  2C92               	goto	u4127
 11535  1496  0BC4               	decfsz	??_SYSTEM_Initialize+1,f
 11536  1497  2C92               	goto	u4127
 11537  1498  0000               	nop
 11538                           
 11539                           ;system.c: 85: LCDClear();
 11540  1499  3193  23AB  3194   	fcall	_LCDClear
 11541                           
 11542                           ;system.c: 86: _delay((unsigned long)((200)*(32000000/4000.0)));
 11543  149C  3009               	movlw	9
 11544  149D  0020               	movlb	0	; select bank0
 11545  149E  00C4               	movwf	??_SYSTEM_Initialize+1
 11546  149F  301E               	movlw	30
 11547  14A0  00C3               	movwf	??_SYSTEM_Initialize
 11548  14A1  30E4               	movlw	228
 11549  14A2                     u4137:	
 11550  14A2  0B89               	decfsz	9,f
 11551  14A3  2CA2               	goto	u4137
 11552  14A4  0BC3               	decfsz	??_SYSTEM_Initialize,f
 11553  14A5  2CA2               	goto	u4137
 11554  14A6  0BC4               	decfsz	??_SYSTEM_Initialize+1,f
 11555  14A7  2CA2               	goto	u4137
 11556  14A8  0000               	nop
 11557  14A9  0008               	return
 11558  14AA                     __end_of_SYSTEM_Initialize:	
 11559                           
 11560                           	psect	text19
 11561  0800                     __ptext19:	
 11562 ;; *************** function _TMR4_Initialize *****************
 11563 ;; Defined at:
 11564 ;;		line 25 in file "tmr.c"
 11565 ;; Parameters:    Size  Location     Type
 11566 ;;		None
 11567 ;; Auto vars:     Size  Location     Type
 11568 ;;		None
 11569 ;; Return value:  Size  Location     Type
 11570 ;;                  1    wreg      void 
 11571 ;; Registers used:
 11572 ;;		wreg, status,2
 11573 ;; Tracked objects:
 11574 ;;		On entry : 0/0
 11575 ;;		On exit  : 0/0
 11576 ;;		Unchanged: 0/0
 11577 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11578 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11579 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11580 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11581 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11582 ;;Total ram usage:        0 bytes
 11583 ;; Hardware stack levels used:    1
 11584 ;; This function calls:
 11585 ;;		Nothing
 11586 ;; This function is called by:
 11587 ;;		_SYSTEM_Initialize
 11588 ;; This function uses a non-reentrant model
 11589 ;;
 11590                           
 11591                           
 11592                           ;psect for function _TMR4_Initialize
 11593  0800                     _TMR4_Initialize:	
 11594                           
 11595                           ;tmr.c: 27: T4CON = 0x00;
 11596                           
 11597                           ;incstack = 0
 11598                           ; Regs used in _TMR4_Initialize: [wreg+status,2]
 11599  0800  0025               	movlb	5	; select bank5
 11600  0801  0194               	clrf	20	;volatile
 11601                           
 11602                           ;tmr.c: 29: T4CLKCON = 0x01;
 11603  0802  3001               	movlw	1
 11604  0803  0096               	movwf	22	;volatile
 11605                           
 11606                           ;tmr.c: 31: T4HLT = 0x00;
 11607  0804  0195               	clrf	21	;volatile
 11608                           
 11609                           ;tmr.c: 33: T4RST = 0x00;
 11610  0805  0197               	clrf	23	;volatile
 11611                           
 11612                           ;tmr.c: 35: T4PR = 0xFE;
 11613  0806  30FE               	movlw	254
 11614  0807  0093               	movwf	19	;volatile
 11615                           
 11616                           ;tmr.c: 39: T4TMR = 0x00;
 11617  0808  0192               	clrf	18	;volatile
 11618                           
 11619                           ;tmr.c: 41: PIR4bits.TMR4IF = 0;
 11620  0809  002E               	movlb	14	; select bank14
 11621  080A  1190               	bcf	16,3	;volatile
 11622                           
 11623                           ;tmr.c: 43: T4CONbits.TMR4ON = 1;
 11624  080B  0025               	movlb	5	; select bank5
 11625  080C  1794               	bsf	20,7	;volatile
 11626  080D  0008               	return
 11627  080E                     __end_of_TMR4_Initialize:	
 11628                           
 11629                           	psect	text20
 11630  1263                     __ptext20:	
 11631 ;; *************** function _TMR2_Initialize *****************
 11632 ;; Defined at:
 11633 ;;		line 3 in file "tmr.c"
 11634 ;; Parameters:    Size  Location     Type
 11635 ;;		None
 11636 ;; Auto vars:     Size  Location     Type
 11637 ;;		None
 11638 ;; Return value:  Size  Location     Type
 11639 ;;                  1    wreg      void 
 11640 ;; Registers used:
 11641 ;;		wreg, status,2
 11642 ;; Tracked objects:
 11643 ;;		On entry : 0/0
 11644 ;;		On exit  : 0/0
 11645 ;;		Unchanged: 0/0
 11646 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11647 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11648 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11649 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11650 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11651 ;;Total ram usage:        0 bytes
 11652 ;; Hardware stack levels used:    1
 11653 ;; This function calls:
 11654 ;;		Nothing
 11655 ;; This function is called by:
 11656 ;;		_SYSTEM_Initialize
 11657 ;; This function uses a non-reentrant model
 11658 ;;
 11659                           
 11660                           
 11661                           ;psect for function _TMR2_Initialize
 11662  1263                     _TMR2_Initialize:	
 11663                           
 11664                           ;tmr.c: 5: T2CON = 0x00;
 11665                           
 11666                           ;incstack = 0
 11667                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
 11668  1263  0025               	movlb	5	; select bank5
 11669  1264  018E               	clrf	14	;volatile
 11670                           
 11671                           ;tmr.c: 7: T2CLKCON = 0x01;
 11672  1265  3001               	movlw	1
 11673  1266  0090               	movwf	16	;volatile
 11674                           
 11675                           ;tmr.c: 9: T2HLT = 0x00;
 11676  1267  018F               	clrf	15	;volatile
 11677                           
 11678                           ;tmr.c: 11: T2RST = 0x00;
 11679  1268  0191               	clrf	17	;volatile
 11680                           
 11681                           ;tmr.c: 13: T2PR = 0xFE;
 11682  1269  30FE               	movlw	254
 11683  126A  008D               	movwf	13	;volatile
 11684                           
 11685                           ;tmr.c: 18: T2TMR = 0x00;
 11686  126B  018C               	clrf	12	;volatile
 11687                           
 11688                           ;tmr.c: 20: PIR4bits.TMR2IF = 0;
 11689  126C  002E               	movlb	14	; select bank14
 11690  126D  1090               	bcf	16,1	;volatile
 11691                           
 11692                           ;tmr.c: 22: T2CONbits.TMR2ON = 1;
 11693  126E  0025               	movlb	5	; select bank5
 11694  126F  178E               	bsf	14,7	;volatile
 11695  1270  0008               	return
 11696  1271                     __end_of_TMR2_Initialize:	
 11697                           
 11698                           	psect	text21
 11699  1347                     __ptext21:	
 11700 ;; *************** function _PWM_Initialize *****************
 11701 ;; Defined at:
 11702 ;;		line 3 in file "pwm.c"
 11703 ;; Parameters:    Size  Location     Type
 11704 ;;		None
 11705 ;; Auto vars:     Size  Location     Type
 11706 ;;		None
 11707 ;; Return value:  Size  Location     Type
 11708 ;;                  1    wreg      void 
 11709 ;; Registers used:
 11710 ;;		wreg, status,2, status,0
 11711 ;; Tracked objects:
 11712 ;;		On entry : 0/0
 11713 ;;		On exit  : 0/0
 11714 ;;		Unchanged: 0/0
 11715 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11716 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11717 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11718 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11719 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11720 ;;Total ram usage:        0 bytes
 11721 ;; Hardware stack levels used:    1
 11722 ;; This function calls:
 11723 ;;		Nothing
 11724 ;; This function is called by:
 11725 ;;		_SYSTEM_Initialize
 11726 ;; This function uses a non-reentrant model
 11727 ;;
 11728                           
 11729                           
 11730                           ;psect for function _PWM_Initialize
 11731  1347                     _PWM_Initialize:	
 11732                           
 11733                           ;pwm.c: 5: PWM6CON = 0x80;
 11734                           
 11735                           ;incstack = 0
 11736                           ; Regs used in _PWM_Initialize: [wreg+status,2+status,0]
 11737  1347  3080               	movlw	128
 11738  1348  0027               	movlb	7	; select bank7
 11739  1349  008E               	movwf	14	;volatile
 11740                           
 11741                           ;pwm.c: 7: PWM6DCH = 0x00;
 11742  134A  018D               	clrf	13	;volatile
 11743                           
 11744                           ;pwm.c: 9: PWM6DCL = 0x00;
 11745  134B  018C               	clrf	12	;volatile
 11746                           
 11747                           ;pwm.c: 11: CCPTMRS1bits.P6TSEL = 0x01;
 11748  134C  0024               	movlb	4	; select bank4
 11749  134D  081F               	movf	31,w	;volatile
 11750  134E  39F3               	andlw	-13
 11751  134F  3804               	iorlw	4
 11752  1350  009F               	movwf	31	;volatile
 11753                           
 11754                           ;pwm.c: 14: PWM7CON = 0x80;
 11755  1351  3080               	movlw	128
 11756  1352  0027               	movlb	7	; select bank7
 11757  1353  0092               	movwf	18	;volatile
 11758                           
 11759                           ;pwm.c: 16: PWM7DCH = 0x00;
 11760  1354  0191               	clrf	17	;volatile
 11761                           
 11762                           ;pwm.c: 18: PWM7DCL = 0x00;
 11763  1355  0190               	clrf	16	;volatile
 11764                           
 11765                           ;pwm.c: 20: CCPTMRS1bits.P7TSEL = 0x02;
 11766  1356  0024               	movlb	4	; select bank4
 11767  1357  081F               	movf	31,w	;volatile
 11768  1358  39CF               	andlw	-49
 11769  1359  3820               	iorlw	32
 11770  135A  009F               	movwf	31	;volatile
 11771                           
 11772                           ;pwm.c: 23: CCP1CONbits.CCP1EN = 1;
 11773  135B  0026               	movlb	6	; select bank6
 11774  135C  178E               	bsf	14,7	;volatile
 11775                           
 11776                           ;pwm.c: 24: CCP1CONbits.CCP1FMT = 1;
 11777  135D  160E               	bsf	14,4	;volatile
 11778                           
 11779                           ;pwm.c: 25: CCP1CONbits.CCP1MODE = 0xF;
 11780  135E  300F               	movlw	15
 11781  135F  048E               	iorwf	14,f	;volatile
 11782                           
 11783                           ;pwm.c: 26: CCPTMRS0bits.C1TSEL = 0x1;
 11784  1360  0024               	movlb	4	; select bank4
 11785  1361  081E               	movf	30,w	;volatile
 11786  1362  39FC               	andlw	-4
 11787  1363  3801               	iorlw	1
 11788  1364  009E               	movwf	30	;volatile
 11789  1365  0008               	return
 11790  1366                     __end_of_PWM_Initialize:	
 11791                           
 11792                           	psect	text22
 11793  13FD                     __ptext22:	
 11794 ;; *************** function _PIN_MANAGER_Initialize *****************
 11795 ;; Defined at:
 11796 ;;		line 5 in file "pin_manager.c"
 11797 ;; Parameters:    Size  Location     Type
 11798 ;;		None
 11799 ;; Auto vars:     Size  Location     Type
 11800 ;;  state           1    0[COMMON] char 
 11801 ;; Return value:  Size  Location     Type
 11802 ;;                  1    wreg      void 
 11803 ;; Registers used:
 11804 ;;		wreg, status,2
 11805 ;; Tracked objects:
 11806 ;;		On entry : 0/0
 11807 ;;		On exit  : 0/0
 11808 ;;		Unchanged: 0/0
 11809 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11810 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11811 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11812 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11813 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11814 ;;Total ram usage:        1 bytes
 11815 ;; Hardware stack levels used:    1
 11816 ;; This function calls:
 11817 ;;		Nothing
 11818 ;; This function is called by:
 11819 ;;		_SYSTEM_Initialize
 11820 ;; This function uses a non-reentrant model
 11821 ;;
 11822                           
 11823                           
 11824                           ;psect for function _PIN_MANAGER_Initialize
 11825  13FD                     _PIN_MANAGER_Initialize:	
 11826                           
 11827                           ;pin_manager.c: 7: LATA = 0x20;
 11828                           
 11829                           ;incstack = 0
 11830                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
 11831  13FD  3020               	movlw	32
 11832  13FE  0020               	movlb	0	; select bank0
 11833  13FF  0096               	movwf	22	;volatile
 11834                           
 11835                           ;pin_manager.c: 8: LATB = 0x00;
 11836  1400  0197               	clrf	23	;volatile
 11837                           
 11838                           ;pin_manager.c: 9: LATC = 0x00;
 11839  1401  0198               	clrf	24	;volatile
 11840                           
 11841                           ;pin_manager.c: 11: WPUA = 0x00;
 11842  1402  003E               	movlb	30	; select bank30
 11843  1403  01B9               	clrf	57	;volatile
 11844                           
 11845                           ;pin_manager.c: 12: WPUB = 0x00;
 11846  1404  01C4               	clrf	68	;volatile
 11847                           
 11848                           ;pin_manager.c: 13: WPUC = 0x00;
 11849  1405  01CF               	clrf	79	;volatile
 11850                           
 11851                           ;pin_manager.c: 14: WPUE = 0x8;
 11852  1406  3008               	movlw	8
 11853  1407  00E5               	movwf	101	;volatile
 11854                           
 11855                           ;pin_manager.c: 16: TRISA = 0x00;
 11856  1408  0020               	movlb	0	; select bank0
 11857  1409  0191               	clrf	17	;volatile
 11858                           
 11859                           ;pin_manager.c: 17: TRISB = 0x0E;
 11860  140A  300E               	movlw	14
 11861  140B  0092               	movwf	18	;volatile
 11862                           
 11863                           ;pin_manager.c: 18: TRISC = 0xFF;
 11864  140C  30FF               	movlw	255
 11865  140D  0093               	movwf	19	;volatile
 11866                           
 11867                           ;pin_manager.c: 20: ANSELA = 0x00;
 11868  140E  003E               	movlb	30	; select bank30
 11869  140F  01B8               	clrf	56	;volatile
 11870                           
 11871                           ;pin_manager.c: 21: ANSELB = 0x0A;
 11872  1410  300A               	movlw	10
 11873  1411  00C3               	movwf	67	;volatile
 11874                           
 11875                           ;pin_manager.c: 22: ANSELC = 0xFF;
 11876  1412  30FF               	movlw	255
 11877  1413  00CE               	movwf	78	;volatile
 11878                           
 11879                           ;pin_manager.c: 25: PIE0bits.IOCIE = 0;
 11880  1414  002E               	movlb	14	; select bank14
 11881  1415  1216               	bcf	22,4	;volatile
 11882                           
 11883                           ;pin_manager.c: 26: int8_t state = GIE;
 11884  1416  3000               	movlw	0
 11885  1417  1B8B               	btfsc	11,7	;volatile
 11886  1418  3001               	movlw	1
 11887  1419  00F0               	movwf	PIN_MANAGER_Initialize@state
 11888                           
 11889                           ;pin_manager.c: 27: GIE = 0;
 11890  141A  138B               	bcf	11,7	;volatile
 11891                           
 11892                           ;pin_manager.c: 28: PPSLOCK = 0x55;
 11893  141B  3055               	movlw	85
 11894  141C  003D               	movlb	29	; select bank29
 11895  141D  008F               	movwf	15	;volsfr
 11896                           
 11897                           ;pin_manager.c: 29: PPSLOCK = 0xAA;
 11898  141E  30AA               	movlw	170
 11899  141F  008F               	movwf	15	;volsfr
 11900                           
 11901                           ;pin_manager.c: 30: PPSLOCKbits.PPSLOCKED = 0x00;
 11902  1420  100F               	bcf	15,0	;volsfr
 11903                           
 11904                           ;pin_manager.c: 32: RA6PPS = 0x0E;
 11905  1421  300E               	movlw	14
 11906  1422  003E               	movlb	30	; select bank30
 11907  1423  0096               	movwf	22	;volatile
 11908                           
 11909                           ;pin_manager.c: 33: RA7PPS = 0x0F;
 11910  1424  300F               	movlw	15
 11911  1425  0097               	movwf	23	;volatile
 11912                           
 11913                           ;pin_manager.c: 34: RB5PPS = 0x09;
 11914  1426  3009               	movlw	9
 11915  1427  009D               	movwf	29	;volatile
 11916                           
 11917                           ;pin_manager.c: 35: PPSLOCK = 0x55;
 11918  1428  3055               	movlw	85
 11919  1429  003D               	movlb	29	; select bank29
 11920  142A  008F               	movwf	15	;volsfr
 11921                           
 11922                           ;pin_manager.c: 36: PPSLOCK = 0xAA;
 11923  142B  30AA               	movlw	170
 11924  142C  008F               	movwf	15	;volsfr
 11925                           
 11926                           ;pin_manager.c: 37: PPSLOCKbits.PPSLOCKED = 0x01;
 11927  142D  140F               	bsf	15,0	;volsfr
 11928                           
 11929                           ;pin_manager.c: 38: GIE = state;
 11930  142E  1C70               	btfss	PIN_MANAGER_Initialize@state,0
 11931  142F  2C32               	goto	u2800
 11932  1430  178B               	bsf	11,7	;volatile
 11933  1431  0008               	return
 11934  1432                     u2800:	
 11935  1432  138B               	bcf	11,7	;volatile
 11936  1433  0008               	return
 11937  1434                     __end_of_PIN_MANAGER_Initialize:	
 11938                           
 11939                           	psect	text23
 11940  124E                     __ptext23:	
 11941 ;; *************** function _OSCILLATOR_Initialize *****************
 11942 ;; Defined at:
 11943 ;;		line 89 in file "system.c"
 11944 ;; Parameters:    Size  Location     Type
 11945 ;;		None
 11946 ;; Auto vars:     Size  Location     Type
 11947 ;;		None
 11948 ;; Return value:  Size  Location     Type
 11949 ;;                  1    wreg      void 
 11950 ;; Registers used:
 11951 ;;		wreg, status,2
 11952 ;; Tracked objects:
 11953 ;;		On entry : 0/0
 11954 ;;		On exit  : 0/0
 11955 ;;		Unchanged: 0/0
 11956 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11957 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11958 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11959 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11960 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11961 ;;Total ram usage:        0 bytes
 11962 ;; Hardware stack levels used:    1
 11963 ;; This function calls:
 11964 ;;		Nothing
 11965 ;; This function is called by:
 11966 ;;		_SYSTEM_Initialize
 11967 ;; This function uses a non-reentrant model
 11968 ;;
 11969                           
 11970                           
 11971                           ;psect for function _OSCILLATOR_Initialize
 11972  124E                     _OSCILLATOR_Initialize:	
 11973                           
 11974                           ;system.c: 91: OSCCON1 = 0x60;
 11975                           
 11976                           ;incstack = 0
 11977                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 11978  124E  3060               	movlw	96
 11979  124F  0031               	movlb	17	; select bank17
 11980  1250  008D               	movwf	13	;volatile
 11981                           
 11982                           ;system.c: 92: OSCCON3 = 0x00;
 11983  1251  018F               	clrf	15	;volatile
 11984                           
 11985                           ;system.c: 93: OSCEN = 0x00;
 11986  1252  0191               	clrf	17	;volatile
 11987                           
 11988                           ;system.c: 94: OSCFRQ = 0x06;
 11989  1253  3006               	movlw	6
 11990  1254  0093               	movwf	19	;volatile
 11991                           
 11992                           ;system.c: 95: OSCTUNE = 0x00;
 11993  1255  0192               	clrf	18	;volatile
 11994  1256  0008               	return
 11995  1257                     __end_of_OSCILLATOR_Initialize:	
 11996                           
 11997                           	psect	text24
 11998  1434                     __ptext24:	
 11999 ;; *************** function _LCDInit *****************
 12000 ;; Defined at:
 12001 ;;		line 247 in file "lcd.c"
 12002 ;; Parameters:    Size  Location     Type
 12003 ;;		None
 12004 ;; Auto vars:     Size  Location     Type
 12005 ;;		None
 12006 ;; Return value:  Size  Location     Type
 12007 ;;                  1    wreg      void 
 12008 ;; Registers used:
 12009 ;;		wreg, status,2, status,0, pclath, cstack
 12010 ;; Tracked objects:
 12011 ;;		On entry : 0/0
 12012 ;;		On exit  : 0/0
 12013 ;;		Unchanged: 0/0
 12014 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12015 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12016 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12017 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12018 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12019 ;;Total ram usage:        1 bytes
 12020 ;; Hardware stack levels used:    1
 12021 ;; Hardware stack levels required when called:    1
 12022 ;; This function calls:
 12023 ;;		_LCDWrite
 12024 ;; This function is called by:
 12025 ;;		_SYSTEM_Initialize
 12026 ;;		_main
 12027 ;; This function uses a non-reentrant model
 12028 ;;
 12029                           
 12030                           
 12031                           ;psect for function _LCDInit
 12032  1434                     _LCDInit:	
 12033                           
 12034                           ;lcd.c: 249: TRISAbits.TRISA0 = 0;
 12035                           
 12036                           ;incstack = 0
 12037                           ; Regs used in _LCDInit: [wreg+status,2+status,0+pclath+cstack]
 12038  1434  0020               	movlb	0	; select bank0
 12039  1435  1011               	bcf	17,0	;volatile
 12040                           
 12041                           ;lcd.c: 250: TRISAbits.TRISA1 = 0;
 12042  1436  1091               	bcf	17,1	;volatile
 12043                           
 12044                           ;lcd.c: 251: TRISAbits.TRISA2 = 0;
 12045  1437  1111               	bcf	17,2	;volatile
 12046                           
 12047                           ;lcd.c: 252: TRISAbits.TRISA3 = 0;
 12048  1438  1191               	bcf	17,3	;volatile
 12049                           
 12050                           ;lcd.c: 253: TRISAbits.TRISA4 = 0;
 12051  1439  1211               	bcf	17,4	;volatile
 12052                           
 12053                           ;lcd.c: 254: LATAbits.LATA3 = 0;
 12054  143A  1196               	bcf	22,3	;volatile
 12055                           
 12056                           ;lcd.c: 255: LATAbits.LATA4 = 0;
 12057  143B  1216               	bcf	22,4	;volatile
 12058                           
 12059                           ;lcd.c: 256: LATAbits.LATA2 = 0;
 12060  143C  1116               	bcf	22,2	;volatile
 12061                           
 12062                           ;lcd.c: 257: LATAbits.LATA0 = 0;
 12063  143D  1016               	bcf	22,0	;volatile
 12064                           
 12065                           ;lcd.c: 259: LATAbits.LATA0 = 1;
 12066  143E  1416               	bsf	22,0	;volatile
 12067                           
 12068                           ;lcd.c: 261: LCDWrite(0, 0x21);
 12069  143F  3021               	movlw	33
 12070  1440  00F5               	movwf	??_LCDInit
 12071  1441  0875               	movf	??_LCDInit,w
 12072  1442  00F0               	movwf	LCDWrite@data
 12073  1443  3000               	movlw	0
 12074  1444  3193  2386  3194   	fcall	_LCDWrite
 12075                           
 12076                           ;lcd.c: 269: LCDWrite(0, 0XB9);
 12077  1447  30B9               	movlw	185
 12078  1448  00F5               	movwf	??_LCDInit
 12079  1449  0875               	movf	??_LCDInit,w
 12080  144A  00F0               	movwf	LCDWrite@data
 12081  144B  3000               	movlw	0
 12082  144C  3193  2386  3194   	fcall	_LCDWrite
 12083                           
 12084                           ;lcd.c: 271: LCDWrite(0, 0x04);
 12085  144F  3004               	movlw	4
 12086  1450  00F5               	movwf	??_LCDInit
 12087  1451  0875               	movf	??_LCDInit,w
 12088  1452  00F0               	movwf	LCDWrite@data
 12089  1453  3000               	movlw	0
 12090  1454  3193  2386  3194   	fcall	_LCDWrite
 12091                           
 12092                           ;lcd.c: 273: LCDWrite(0, 0x14);
 12093  1457  3014               	movlw	20
 12094  1458  00F5               	movwf	??_LCDInit
 12095  1459  0875               	movf	??_LCDInit,w
 12096  145A  00F0               	movwf	LCDWrite@data
 12097  145B  3000               	movlw	0
 12098  145C  3193  2386  3194   	fcall	_LCDWrite
 12099                           
 12100                           ;lcd.c: 275: LCDWrite(0, 0x20);
 12101  145F  3020               	movlw	32
 12102  1460  00F5               	movwf	??_LCDInit
 12103  1461  0875               	movf	??_LCDInit,w
 12104  1462  00F0               	movwf	LCDWrite@data
 12105  1463  3000               	movlw	0
 12106  1464  3193  2386  3194   	fcall	_LCDWrite
 12107                           
 12108                           ;lcd.c: 277: LCDWrite(0, 0x0C);
 12109  1467  300C               	movlw	12
 12110  1468  00F5               	movwf	??_LCDInit
 12111  1469  0875               	movf	??_LCDInit,w
 12112  146A  00F0               	movwf	LCDWrite@data
 12113  146B  3000               	movlw	0
 12114  146C  3193  2386         	fcall	_LCDWrite
 12115  146E  0008               	return
 12116  146F                     __end_of_LCDInit:	
 12117                           
 12118                           	psect	text25
 12119  13AB                     __ptext25:	
 12120 ;; *************** function _LCDClear *****************
 12121 ;; Defined at:
 12122 ;;		line 182 in file "lcd.c"
 12123 ;; Parameters:    Size  Location     Type
 12124 ;;		None
 12125 ;; Auto vars:     Size  Location     Type
 12126 ;;  index           2    9[COMMON] int 
 12127 ;; Return value:  Size  Location     Type
 12128 ;;                  1    wreg      void 
 12129 ;; Registers used:
 12130 ;;		wreg, status,2, status,0, pclath, cstack
 12131 ;; Tracked objects:
 12132 ;;		On entry : 0/0
 12133 ;;		On exit  : 0/0
 12134 ;;		Unchanged: 0/0
 12135 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12136 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12137 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12138 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12139 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12140 ;;Total ram usage:        3 bytes
 12141 ;; Hardware stack levels used:    1
 12142 ;; Hardware stack levels required when called:    2
 12143 ;; This function calls:
 12144 ;;		_LCDWrite
 12145 ;;		_gotoXY
 12146 ;; This function is called by:
 12147 ;;		_SYSTEM_Initialize
 12148 ;;		_main
 12149 ;; This function uses a non-reentrant model
 12150 ;;
 12151                           
 12152                           
 12153                           ;psect for function _LCDClear
 12154  13AB                     _LCDClear:	
 12155                           
 12156                           ;lcd.c: 184: int index;
 12157                           ;lcd.c: 185: for (index = 0 ; index < (84 * 48 / 8) ; index++)
 12158                           
 12159                           ;incstack = 0
 12160                           ; Regs used in _LCDClear: [wreg+status,2+status,0+pclath+cstack]
 12161  13AB  01F9               	clrf	LCDClear@index
 12162  13AC  01FA               	clrf	LCDClear@index+1
 12163  13AD  087A               	movf	LCDClear@index+1,w
 12164  13AE  3A80               	xorlw	128
 12165  13AF  00F8               	movwf	??_LCDClear
 12166  13B0  3081               	movlw	129
 12167  13B1  0278               	subwf	??_LCDClear,w
 12168  13B2  1D03               	skipz
 12169  13B3  2BB6               	goto	u2785
 12170  13B4  30F8               	movlw	248
 12171  13B5  0279               	subwf	LCDClear@index,w
 12172  13B6                     u2785:	
 12173  13B6  1803               	btfsc	3,0
 12174  13B7  2BCC               	goto	l2639
 12175  13B8                     l2633:	
 12176                           
 12177                           ;lcd.c: 186: LCDWrite(1, 0x00);
 12178  13B8  01F0               	clrf	LCDWrite@data
 12179  13B9  3001               	movlw	1
 12180  13BA  3193  2386  3193   	fcall	_LCDWrite
 12181  13BD  3001               	movlw	1
 12182  13BE  07F9               	addwf	LCDClear@index,f
 12183  13BF  3000               	movlw	0
 12184  13C0  3DFA               	addwfc	LCDClear@index+1,f
 12185  13C1  087A               	movf	LCDClear@index+1,w
 12186  13C2  3A80               	xorlw	128
 12187  13C3  00F8               	movwf	??_LCDClear
 12188  13C4  3081               	movlw	129
 12189  13C5  0278               	subwf	??_LCDClear,w
 12190  13C6  1D03               	skipz
 12191  13C7  2BCA               	goto	u2795
 12192  13C8  30F8               	movlw	248
 12193  13C9  0279               	subwf	LCDClear@index,w
 12194  13CA                     u2795:	
 12195  13CA  1C03               	skipc
 12196  13CB  2BB8               	goto	l2633
 12197  13CC                     l2639:	
 12198                           
 12199                           ;lcd.c: 187: gotoXY(0, 0);
 12200  13CC  01F5               	clrf	gotoXY@y
 12201  13CD  3000               	movlw	0
 12202  13CE  3192  2271         	fcall	_gotoXY
 12203  13D0  0008               	return
 12204  13D1                     __end_of_LCDClear:	
 12205                           
 12206                           	psect	text26
 12207  1271                     __ptext26:	
 12208 ;; *************** function _gotoXY *****************
 12209 ;; Defined at:
 12210 ;;		line 124 in file "lcd.c"
 12211 ;; Parameters:    Size  Location     Type
 12212 ;;  x               1    wreg     unsigned char 
 12213 ;;  y               1    5[COMMON] unsigned char 
 12214 ;; Auto vars:     Size  Location     Type
 12215 ;;  x               1    7[COMMON] unsigned char 
 12216 ;; Return value:  Size  Location     Type
 12217 ;;                  1    wreg      void 
 12218 ;; Registers used:
 12219 ;;		wreg, status,2, status,0, pclath, cstack
 12220 ;; Tracked objects:
 12221 ;;		On entry : 0/0
 12222 ;;		On exit  : 0/0
 12223 ;;		Unchanged: 0/0
 12224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12225 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12226 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12227 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12228 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12229 ;;Total ram usage:        3 bytes
 12230 ;; Hardware stack levels used:    1
 12231 ;; Hardware stack levels required when called:    1
 12232 ;; This function calls:
 12233 ;;		_LCDWrite
 12234 ;; This function is called by:
 12235 ;;		_LCDClear
 12236 ;;		_main
 12237 ;; This function uses a non-reentrant model
 12238 ;;
 12239                           
 12240                           
 12241                           ;psect for function _gotoXY
 12242  1271                     _gotoXY:	
 12243                           
 12244                           ;incstack = 0
 12245                           ; Regs used in _gotoXY: [wreg+status,2+status,0+pclath+cstack]
 12246                           ;gotoXY@x stored from wreg
 12247  1271  00F7               	movwf	gotoXY@x
 12248                           
 12249                           ;lcd.c: 126: LCDWrite(0,(uint8_t)(0x80 | x));
 12250  1272  0877               	movf	gotoXY@x,w
 12251  1273  3880               	iorlw	128
 12252  1274  00F6               	movwf	??_gotoXY
 12253  1275  0876               	movf	??_gotoXY,w
 12254  1276  00F0               	movwf	LCDWrite@data
 12255  1277  3000               	movlw	0
 12256  1278  3193  2386  3192   	fcall	_LCDWrite
 12257                           
 12258                           ;lcd.c: 127: LCDWrite(0,(uint8_t)(0x40 | y));
 12259  127B  0875               	movf	gotoXY@y,w
 12260  127C  3840               	iorlw	64
 12261  127D  00F6               	movwf	??_gotoXY
 12262  127E  0876               	movf	??_gotoXY,w
 12263  127F  00F0               	movwf	LCDWrite@data
 12264  1280  3000               	movlw	0
 12265  1281  3193  2386         	fcall	_LCDWrite
 12266  1283  0008               	return
 12267  1284                     __end_of_gotoXY:	
 12268                           
 12269                           	psect	text27
 12270  1739                     __ptext27:	
 12271 ;; *************** function _Init_Battery_State_Machine *****************
 12272 ;; Defined at:
 12273 ;;		line 18 in file "battery_charger.c"
 12274 ;; Parameters:    Size  Location     Type
 12275 ;;  z               1    wreg     unsigned char 
 12276 ;; Auto vars:     Size  Location     Type
 12277 ;;  z               1   34[BANK0 ] unsigned char 
 12278 ;; Return value:  Size  Location     Type
 12279 ;;                  1    wreg      void 
 12280 ;; Registers used:
 12281 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12282 ;; Tracked objects:
 12283 ;;		On entry : 0/0
 12284 ;;		On exit  : 0/0
 12285 ;;		Unchanged: 0/0
 12286 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12287 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12288 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12289 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12290 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12291 ;;Total ram usage:        5 bytes
 12292 ;; Hardware stack levels used:    1
 12293 ;; Hardware stack levels required when called:    2
 12294 ;; This function calls:
 12295 ;;		___awtoft
 12296 ;;		___ftmul
 12297 ;;		___fttol
 12298 ;; This function is called by:
 12299 ;;		_SYSTEM_Initialize
 12300 ;; This function uses a non-reentrant model
 12301 ;;
 12302                           
 12303                           
 12304                           ;psect for function _Init_Battery_State_Machine
 12305  1739                     _Init_Battery_State_Machine:	
 12306                           
 12307                           ;incstack = 0
 12308                           ; Regs used in _Init_Battery_State_Machine: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 12309                           ;Init_Battery_State_Machine@z stored from wreg
 12310  1739  0020               	movlb	0	; select bank0
 12311  173A  00C2               	movwf	Init_Battery_State_Machine@z
 12312                           
 12313                           ;battery_charger.c: 20: batteryState[z] =PRECHARGE;
 12314  173B  3003               	movlw	3
 12315  173C  00BE               	movwf	??_Init_Battery_State_Machine
 12316  173D  0842               	movf	Init_Battery_State_Machine@z,w
 12317  173E  3E64               	addlw	(low (_batteryState| 0))& (0+255)
 12318  173F  0086               	movwf	6
 12319  1740  0187               	clrf	7
 12320  1741  083E               	movf	??_Init_Battery_State_Machine,w
 12321  1742  0081               	movwf	1
 12322                           
 12323                           ;battery_charger.c: 21: stateCounter[z] =5;
 12324  1743  3542               	lslf	Init_Battery_State_Machine@z,w
 12325  1744  3EC0               	addlw	(low (_stateCounter| 0))& (0+255)
 12326  1745  0086               	movwf	6
 12327  1746  0187               	clrf	7
 12328  1747  3005               	movlw	5
 12329  1748  3FC0               	movwi [0]fsr1
 12330  1749  3000               	movlw	0
 12331  174A  3FC1               	movwi [1]fsr1
 12332                           
 12333                           ;battery_charger.c: 22: Iref[z] =10;
 12334  174B  3542               	lslf	Init_Battery_State_Machine@z,w
 12335  174C  3EC4               	addlw	(low (_Iref| 0))& (0+255)
 12336  174D  0086               	movwf	6
 12337  174E  0187               	clrf	7
 12338  174F  300A               	movlw	10
 12339  1750  3FC0               	movwi [0]fsr1
 12340  1751  3000               	movlw	0
 12341  1752  3FC1               	movwi [1]fsr1
 12342                           
 12343                           ;battery_charger.c: 23: Vref[z] =1425+(int16_t)((250-batteryTemp)*.24);
 12344  1753  096C               	comf	_batteryTemp,w
 12345  1754  00BE               	movwf	??_Init_Battery_State_Machine
 12346  1755  096D               	comf	_batteryTemp+1,w
 12347  1756  00BF               	movwf	??_Init_Battery_State_Machine+1
 12348  1757  0ABE               	incf	??_Init_Battery_State_Machine,f
 12349  1758  1903               	skipnz
 12350  1759  0ABF               	incf	??_Init_Battery_State_Machine+1,f
 12351  175A  083E               	movf	??_Init_Battery_State_Machine,w
 12352  175B  3EFA               	addlw	250
 12353  175C  00F8               	movwf	___awtoft@c
 12354  175D  3000               	movlw	0
 12355  175E  3D3F               	addwfc	??_Init_Battery_State_Machine+1,w
 12356  175F  00F9               	movwf	___awtoft@c+1
 12357  1760  3193  2366  3197   	fcall	___awtoft
 12358  1763  0878               	movf	?___awtoft,w
 12359  1764  0020               	movlb	0	; select bank0
 12360  1765  00A3               	movwf	___ftmul@f2
 12361  1766  0879               	movf	?___awtoft+1,w
 12362  1767  00A4               	movwf	___ftmul@f2+1
 12363  1768  087A               	movf	?___awtoft+2,w
 12364  1769  00A5               	movwf	___ftmul@f2+2
 12365  176A  30C3               	movlw	195
 12366  176B  00A0               	movwf	___ftmul@f1
 12367  176C  3075               	movlw	117
 12368  176D  00A1               	movwf	___ftmul@f1+1
 12369  176E  303E               	movlw	62
 12370  176F  00A2               	movwf	___ftmul@f1+2
 12371  1770  318A  22F2  3197   	fcall	___ftmul
 12372  1773  0020               	movlb	0	; select bank0
 12373  1774  0820               	movf	?___ftmul,w
 12374  1775  00B0               	movwf	___fttol@f1
 12375  1776  0821               	movf	?___ftmul+1,w
 12376  1777  00B1               	movwf	___fttol@f1+1
 12377  1778  0822               	movf	?___ftmul+2,w
 12378  1779  00B2               	movwf	___fttol@f1+2
 12379  177A  3189  2112         	fcall	___fttol
 12380  177C  0020               	movlb	0	; select bank0
 12381  177D  0830               	movf	?___fttol,w
 12382  177E  3E91               	addlw	145
 12383  177F  00C0               	movwf	??_Init_Battery_State_Machine+2
 12384  1780  3005               	movlw	5
 12385  1781  3D31               	addwfc	?___fttol+1,w
 12386  1782  00C1               	movwf	??_Init_Battery_State_Machine+3
 12387  1783  3542               	lslf	Init_Battery_State_Machine@z,w
 12388  1784  3E5A               	addlw	(low (_Vref| 0))& (0+255)
 12389  1785  0086               	movwf	6
 12390  1786  0187               	clrf	7
 12391  1787  0840               	movf	??_Init_Battery_State_Machine+2,w
 12392  1788  3FC0               	movwi [0]fsr1
 12393  1789  0841               	movf	??_Init_Battery_State_Machine+3,w
 12394  178A  3FC1               	movwi [1]fsr1
 12395                           
 12396                           ;battery_charger.c: 24: Imin[z] =15;
 12397  178B  3542               	lslf	Init_Battery_State_Machine@z,w
 12398  178C  3ECC               	addlw	(low (_Imin| 0))& (0+255)
 12399  178D  0086               	movwf	6
 12400  178E  0187               	clrf	7
 12401  178F  300F               	movlw	15
 12402  1790  3FC0               	movwi [0]fsr1
 12403  1791  3000               	movlw	0
 12404  1792  3FC1               	movwi [1]fsr1
 12405                           
 12406                           ;battery_charger.c: 25: IminCount[z] = 600;
 12407  1793  3542               	lslf	Init_Battery_State_Machine@z,w
 12408  1794  3EC8               	addlw	(low (_IminCount| 0))& (0+255)
 12409  1795  0086               	movwf	6
 12410  1796  0187               	clrf	7
 12411  1797  3058               	movlw	88
 12412  1798  3FC0               	movwi [0]fsr1
 12413  1799  3002               	movlw	2
 12414  179A  3FC1               	movwi [1]fsr1
 12415  179B  0008               	return
 12416  179C                     __end_of_Init_Battery_State_Machine:	
 12417                           
 12418                           	psect	text28
 12419  1328                     __ptext28:	
 12420 ;; *************** function _ADC_Initialize *****************
 12421 ;; Defined at:
 12422 ;;		line 111 in file "adc.c"
 12423 ;; Parameters:    Size  Location     Type
 12424 ;;		None
 12425 ;; Auto vars:     Size  Location     Type
 12426 ;;		None
 12427 ;; Return value:  Size  Location     Type
 12428 ;;                  1    wreg      void 
 12429 ;; Registers used:
 12430 ;;		wreg, status,2
 12431 ;; Tracked objects:
 12432 ;;		On entry : 0/0
 12433 ;;		On exit  : 0/0
 12434 ;;		Unchanged: 0/0
 12435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12436 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12437 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12438 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12439 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12440 ;;Total ram usage:        0 bytes
 12441 ;; Hardware stack levels used:    1
 12442 ;; This function calls:
 12443 ;;		Nothing
 12444 ;; This function is called by:
 12445 ;;		_SYSTEM_Initialize
 12446 ;; This function uses a non-reentrant model
 12447 ;;
 12448                           
 12449                           
 12450                           ;psect for function _ADC_Initialize
 12451  1328                     _ADC_Initialize:	
 12452                           
 12453                           ;adc.c: 113: ADCON1 = 0x00;
 12454                           
 12455                           ;incstack = 0
 12456                           ; Regs used in _ADC_Initialize: [wreg+status,2]
 12457  1328  0021               	movlb	1	; select bank1
 12458  1329  0194               	clrf	20	;volatile
 12459                           
 12460                           ;adc.c: 115: ADCON2 = 0x00;
 12461  132A  0195               	clrf	21	;volatile
 12462                           
 12463                           ;adc.c: 117: ADCON3 = 0x00;
 12464  132B  0196               	clrf	22	;volatile
 12465                           
 12466                           ;adc.c: 119: ADACT = 0x00;
 12467  132C  0199               	clrf	25	;volatile
 12468                           
 12469                           ;adc.c: 121: ADSTAT = 0x00;
 12470  132D  0197               	clrf	23	;volatile
 12471                           
 12472                           ;adc.c: 123: FVRCON = 0b11000011;
 12473  132E  30C3               	movlw	195
 12474  132F  0032               	movlb	18	; select bank18
 12475  1330  008C               	movwf	12	;volatile
 12476                           
 12477                           ;adc.c: 124: ADCLK = 0x3F;
 12478  1331  303F               	movlw	63
 12479  1332  0021               	movlb	1	; select bank1
 12480  1333  0098               	movwf	24	;volatile
 12481                           
 12482                           ;adc.c: 131: ADREF = 0x03;
 12483  1334  3003               	movlw	3
 12484  1335  009A               	movwf	26	;volatile
 12485                           
 12486                           ;adc.c: 134: ADCAP = 0x00;
 12487  1336  019B               	clrf	27	;volatile
 12488                           
 12489                           ;adc.c: 137: ADPRE = 0x07;
 12490  1337  3007               	movlw	7
 12491  1338  009C               	movwf	28	;volatile
 12492                           
 12493                           ;adc.c: 139: ADACQ = 0x00;
 12494  1339  019D               	clrf	29	;volatile
 12495                           
 12496                           ;adc.c: 141: ADPCH = 0x00;
 12497  133A  019E               	clrf	30	;volatile
 12498                           
 12499                           ;adc.c: 143: ADRPT = 0x00;
 12500  133B  0022               	movlb	2	; select bank2
 12501  133C  018D               	clrf	13	;volatile
 12502                           
 12503                           ;adc.c: 145: ADLTHL = 0x00;
 12504  133D  018E               	clrf	14	;volatile
 12505                           
 12506                           ;adc.c: 147: ADLTHH = 0x00;
 12507  133E  018F               	clrf	15	;volatile
 12508                           
 12509                           ;adc.c: 149: ADUTHL = 0x00;
 12510  133F  0190               	clrf	16	;volatile
 12511                           
 12512                           ;adc.c: 151: ADUTHH = 0x00;
 12513  1340  0191               	clrf	17	;volatile
 12514                           
 12515                           ;adc.c: 153: ADSTPTL = 0x00;
 12516  1341  0192               	clrf	18	;volatile
 12517                           
 12518                           ;adc.c: 155: ADSTPTH = 0x00;
 12519  1342  0193               	clrf	19	;volatile
 12520                           
 12521                           ;adc.c: 157: ADCON0 = 0x84;
 12522  1343  3084               	movlw	132
 12523  1344  0021               	movlb	1	; select bank1
 12524  1345  0093               	movwf	19	;volatile
 12525  1346  0008               	return
 12526  1347                     __end_of_ADC_Initialize:	
 12527                           
 12528                           	psect	text29
 12529  12D9                     __ptext29:	
 12530 ;; *************** function _PWM7_LoadDutyValue *****************
 12531 ;; Defined at:
 12532 ;;		line 37 in file "pwm.c"
 12533 ;; Parameters:    Size  Location     Type
 12534 ;;  dutyCycle7      2    0[COMMON] unsigned int 
 12535 ;; Auto vars:     Size  Location     Type
 12536 ;;		None
 12537 ;; Return value:  Size  Location     Type
 12538 ;;                  1    wreg      void 
 12539 ;; Registers used:
 12540 ;;		wreg, status,2, status,0
 12541 ;; Tracked objects:
 12542 ;;		On entry : 0/0
 12543 ;;		On exit  : 0/0
 12544 ;;		Unchanged: 0/0
 12545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12546 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12547 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12548 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12549 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12550 ;;Total ram usage:        4 bytes
 12551 ;; Hardware stack levels used:    1
 12552 ;; This function calls:
 12553 ;;		Nothing
 12554 ;; This function is called by:
 12555 ;;		_main
 12556 ;; This function uses a non-reentrant model
 12557 ;;
 12558                           
 12559                           
 12560                           ;psect for function _PWM7_LoadDutyValue
 12561  12D9                     _PWM7_LoadDutyValue:	
 12562                           
 12563                           ;pwm.c: 39: PWM7DCH = (dutyCycle7 & 0x03FC)>>2;
 12564                           
 12565                           ;incstack = 0
 12566                           ; Regs used in _PWM7_LoadDutyValue: [wreg+status,2+status,0]
 12567  12D9  0871               	movf	PWM7_LoadDutyValue@dutyCycle7+1,w
 12568  12DA  00F3               	movwf	??_PWM7_LoadDutyValue+1
 12569  12DB  0870               	movf	PWM7_LoadDutyValue@dutyCycle7,w
 12570  12DC  00F2               	movwf	??_PWM7_LoadDutyValue
 12571  12DD  36F3               	lsrf	??_PWM7_LoadDutyValue+1,f
 12572  12DE  0CF2               	rrf	??_PWM7_LoadDutyValue,f
 12573  12DF  36F3               	lsrf	??_PWM7_LoadDutyValue+1,f
 12574  12E0  0CF2               	rrf	??_PWM7_LoadDutyValue,f
 12575  12E1  0872               	movf	??_PWM7_LoadDutyValue,w
 12576  12E2  0027               	movlb	7	; select bank7
 12577  12E3  0091               	movwf	17	;volatile
 12578                           
 12579                           ;pwm.c: 41: PWM7DCL = (dutyCycle7 & 0x0003)<<6;
 12580  12E4  0870               	movf	PWM7_LoadDutyValue@dutyCycle7,w
 12581  12E5  3903               	andlw	3
 12582  12E6  00F2               	movwf	??_PWM7_LoadDutyValue
 12583  12E7  3005               	movlw	5
 12584  12E8                     u3675:	
 12585  12E8  35F2               	lslf	??_PWM7_LoadDutyValue,f
 12586  12E9  3EFF               	addlw	-1
 12587  12EA  1D03               	skipz
 12588  12EB  2AE8               	goto	u3675
 12589  12EC  3572               	lslf	??_PWM7_LoadDutyValue,w
 12590  12ED  0090               	movwf	16	;volatile
 12591  12EE  0008               	return
 12592  12EF                     __end_of_PWM7_LoadDutyValue:	
 12593                           
 12594                           	psect	text30
 12595  12C3                     __ptext30:	
 12596 ;; *************** function _PWM6_LoadDutyValue *****************
 12597 ;; Defined at:
 12598 ;;		line 30 in file "pwm.c"
 12599 ;; Parameters:    Size  Location     Type
 12600 ;;  dutyCycle6      2    0[COMMON] unsigned int 
 12601 ;; Auto vars:     Size  Location     Type
 12602 ;;		None
 12603 ;; Return value:  Size  Location     Type
 12604 ;;                  1    wreg      void 
 12605 ;; Registers used:
 12606 ;;		wreg, status,2, status,0
 12607 ;; Tracked objects:
 12608 ;;		On entry : 0/0
 12609 ;;		On exit  : 0/0
 12610 ;;		Unchanged: 0/0
 12611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12612 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12613 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12614 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12615 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12616 ;;Total ram usage:        4 bytes
 12617 ;; Hardware stack levels used:    1
 12618 ;; This function calls:
 12619 ;;		Nothing
 12620 ;; This function is called by:
 12621 ;;		_main
 12622 ;; This function uses a non-reentrant model
 12623 ;;
 12624                           
 12625                           
 12626                           ;psect for function _PWM6_LoadDutyValue
 12627  12C3                     _PWM6_LoadDutyValue:	
 12628                           
 12629                           ;pwm.c: 32: PWM6DCH = (dutyCycle6 & 0x03FC)>>2;
 12630                           
 12631                           ;incstack = 0
 12632                           ; Regs used in _PWM6_LoadDutyValue: [wreg+status,2+status,0]
 12633  12C3  0871               	movf	PWM6_LoadDutyValue@dutyCycle6+1,w
 12634  12C4  00F3               	movwf	??_PWM6_LoadDutyValue+1
 12635  12C5  0870               	movf	PWM6_LoadDutyValue@dutyCycle6,w
 12636  12C6  00F2               	movwf	??_PWM6_LoadDutyValue
 12637  12C7  36F3               	lsrf	??_PWM6_LoadDutyValue+1,f
 12638  12C8  0CF2               	rrf	??_PWM6_LoadDutyValue,f
 12639  12C9  36F3               	lsrf	??_PWM6_LoadDutyValue+1,f
 12640  12CA  0CF2               	rrf	??_PWM6_LoadDutyValue,f
 12641  12CB  0872               	movf	??_PWM6_LoadDutyValue,w
 12642  12CC  0027               	movlb	7	; select bank7
 12643  12CD  008D               	movwf	13	;volatile
 12644                           
 12645                           ;pwm.c: 34: PWM6DCL = (dutyCycle6 & 0x0003)<<6;
 12646  12CE  0870               	movf	PWM6_LoadDutyValue@dutyCycle6,w
 12647  12CF  3903               	andlw	3
 12648  12D0  00F2               	movwf	??_PWM6_LoadDutyValue
 12649  12D1  3005               	movlw	5
 12650  12D2                     u3665:	
 12651  12D2  35F2               	lslf	??_PWM6_LoadDutyValue,f
 12652  12D3  3EFF               	addlw	-1
 12653  12D4  1D03               	skipz
 12654  12D5  2AD2               	goto	u3665
 12655  12D6  3572               	lslf	??_PWM6_LoadDutyValue,w
 12656  12D7  008C               	movwf	12	;volatile
 12657  12D8  0008               	return
 12658  12D9                     __end_of_PWM6_LoadDutyValue:	
 12659                           
 12660                           	psect	text31
 12661  12AD                     __ptext31:	
 12662 ;; *************** function _PWM1_LoadDutyValue *****************
 12663 ;; Defined at:
 12664 ;;		line 44 in file "pwm.c"
 12665 ;; Parameters:    Size  Location     Type
 12666 ;;  dutyCycle1      2    0[COMMON] unsigned int 
 12667 ;; Auto vars:     Size  Location     Type
 12668 ;;		None
 12669 ;; Return value:  Size  Location     Type
 12670 ;;                  1    wreg      void 
 12671 ;; Registers used:
 12672 ;;		wreg, status,2, status,0
 12673 ;; Tracked objects:
 12674 ;;		On entry : 0/0
 12675 ;;		On exit  : 0/0
 12676 ;;		Unchanged: 0/0
 12677 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12678 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12679 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12680 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12681 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12682 ;;Total ram usage:        4 bytes
 12683 ;; Hardware stack levels used:    1
 12684 ;; This function calls:
 12685 ;;		Nothing
 12686 ;; This function is called by:
 12687 ;;		_main
 12688 ;; This function uses a non-reentrant model
 12689 ;;
 12690                           
 12691                           
 12692                           ;psect for function _PWM1_LoadDutyValue
 12693  12AD                     _PWM1_LoadDutyValue:	
 12694                           
 12695                           ;pwm.c: 46: CCPR1H = (dutyCycle1& 0x03FC)>>2;
 12696                           
 12697                           ;incstack = 0
 12698                           ; Regs used in _PWM1_LoadDutyValue: [wreg+status,2+status,0]
 12699  12AD  0871               	movf	PWM1_LoadDutyValue@dutyCycle1+1,w
 12700  12AE  00F3               	movwf	??_PWM1_LoadDutyValue+1
 12701  12AF  0870               	movf	PWM1_LoadDutyValue@dutyCycle1,w
 12702  12B0  00F2               	movwf	??_PWM1_LoadDutyValue
 12703  12B1  36F3               	lsrf	??_PWM1_LoadDutyValue+1,f
 12704  12B2  0CF2               	rrf	??_PWM1_LoadDutyValue,f
 12705  12B3  36F3               	lsrf	??_PWM1_LoadDutyValue+1,f
 12706  12B4  0CF2               	rrf	??_PWM1_LoadDutyValue,f
 12707  12B5  0872               	movf	??_PWM1_LoadDutyValue,w
 12708  12B6  0026               	movlb	6	; select bank6
 12709  12B7  008D               	movwf	13	;volatile
 12710                           
 12711                           ;pwm.c: 47: CCPR1L = (dutyCycle1 & 0x0003)<<6;
 12712  12B8  0870               	movf	PWM1_LoadDutyValue@dutyCycle1,w
 12713  12B9  3903               	andlw	3
 12714  12BA  00F2               	movwf	??_PWM1_LoadDutyValue
 12715  12BB  3005               	movlw	5
 12716  12BC                     u3685:	
 12717  12BC  35F2               	lslf	??_PWM1_LoadDutyValue,f
 12718  12BD  3EFF               	addlw	-1
 12719  12BE  1D03               	skipz
 12720  12BF  2ABC               	goto	u3685
 12721  12C0  3572               	lslf	??_PWM1_LoadDutyValue,w
 12722  12C1  008C               	movwf	12	;volatile
 12723  12C2  0008               	return
 12724  12C3                     __end_of_PWM1_LoadDutyValue:	
 12725                           
 12726                           	psect	text32
 12727  1284                     __ptext32:	
 12728 ;; *************** function _LCDWriteString *****************
 12729 ;; Defined at:
 12730 ;;		line 176 in file "lcd.c"
 12731 ;; Parameters:    Size  Location     Type
 12732 ;;  characters      2   12[COMMON] PTR const unsigned char 
 12733 ;;		 -> STR_3(5), STR_2(5), STR_1(4), 
 12734 ;; Auto vars:     Size  Location     Type
 12735 ;;		None
 12736 ;; Return value:  Size  Location     Type
 12737 ;;                  1    wreg      void 
 12738 ;; Registers used:
 12739 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12740 ;; Tracked objects:
 12741 ;;		On entry : 0/0
 12742 ;;		On exit  : 0/0
 12743 ;;		Unchanged: 0/0
 12744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12745 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12746 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12747 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12748 ;;      Totals:         2       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12749 ;;Total ram usage:        3 bytes
 12750 ;; Hardware stack levels used:    1
 12751 ;; Hardware stack levels required when called:    2
 12752 ;; This function calls:
 12753 ;;		_LCDWriteCharacter
 12754 ;; This function is called by:
 12755 ;;		_main
 12756 ;; This function uses a non-reentrant model
 12757 ;;
 12758                           
 12759                           
 12760                           ;psect for function _LCDWriteString
 12761  1284                     _LCDWriteString:	
 12762  1284                     l3057:	
 12763                           ;lcd.c: 178: while (*characters)
 12764                           
 12765                           ;incstack = 0
 12766                           ; Regs used in _LCDWriteString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12767                           
 12768  1284  087C               	movf	LCDWriteString@characters,w
 12769  1285  0084               	movwf	4
 12770  1286  087D               	movf	LCDWriteString@characters+1,w
 12771  1287  0085               	movwf	5
 12772  1288  0012               	moviw fsr0++
 12773  1289  1903               	btfsc	3,2
 12774  128A  0008               	return
 12775                           
 12776                           ;lcd.c: 179: LCDWriteCharacter(*characters++);
 12777  128B  087C               	movf	LCDWriteString@characters,w
 12778  128C  0084               	movwf	4
 12779  128D  087D               	movf	LCDWriteString@characters+1,w
 12780  128E  0085               	movwf	5
 12781  128F  0800               	movf	0,w	;code access
 12782  1290  3196  2685  3192   	fcall	_LCDWriteCharacter
 12783  1293  3001               	movlw	1
 12784  1294  07FC               	addwf	LCDWriteString@characters,f
 12785  1295  3000               	movlw	0
 12786  1296  3DFD               	addwfc	LCDWriteString@characters+1,f
 12787  1297  2A84               	goto	l3057
 12788  1298                     __end_of_LCDWriteString:	
 12789                           
 12790                           	psect	text33
 12791  0008                     __ptext33:	
 12792 ;; *************** function _LCDWriteInt *****************
 12793 ;; Defined at:
 12794 ;;		line 190 in file "lcd.c"
 12795 ;; Parameters:    Size  Location     Type
 12796 ;;  value           2    0[BANK0 ] int 
 12797 ;;  fieldLength     1    2[BANK0 ] char 
 12798 ;;  numPlaces       1    3[BANK0 ] unsigned char 
 12799 ;;  sign            1    4[BANK0 ] unsigned char 
 12800 ;; Auto vars:     Size  Location     Type
 12801 ;;  str             5    9[BANK0 ] unsigned char [5]
 12802 ;;  i               1   15[BANK0 ] unsigned char 
 12803 ;;  j               1   14[BANK0 ] unsigned char 
 12804 ;; Return value:  Size  Location     Type
 12805 ;;                  1    wreg      void 
 12806 ;; Registers used:
 12807 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12808 ;; Tracked objects:
 12809 ;;		On entry : 0/0
 12810 ;;		On exit  : 0/0
 12811 ;;		Unchanged: 0/0
 12812 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12813 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12814 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12815 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12816 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12817 ;;Total ram usage:       16 bytes
 12818 ;; Hardware stack levels used:    1
 12819 ;; Hardware stack levels required when called:    2
 12820 ;; This function calls:
 12821 ;;		_LCDWriteCharacter
 12822 ;;		___awdiv
 12823 ;;		___lwmod
 12824 ;; This function is called by:
 12825 ;;		_main
 12826 ;; This function uses a non-reentrant model
 12827 ;;
 12828                           
 12829                           
 12830                           ;psect for function _LCDWriteInt
 12831  0008                     _LCDWriteInt:	
 12832                           
 12833                           ;lcd.c: 192: uint8_t str[5]={0,0,0,0,0};
 12834                           
 12835                           ;incstack = 0
 12836                           ; Regs used in _LCDWriteInt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12837  0008  3030               	movlw	low LCDWriteInt@F14390
 12838  0009  0086               	movwf	6
 12839  000A  3001               	movlw	high LCDWriteInt@F14390
 12840  000B  0087               	movwf	7
 12841  000C  3029               	movlw	low LCDWriteInt@str
 12842  000D  0084               	movwf	4
 12843  000E  3000               	movlw	high LCDWriteInt@str
 12844  000F  0085               	movwf	5
 12845  0010  3005               	movlw	5
 12846  0011  0020               	movlb	0	; select bank0
 12847  0012  00A5               	movwf	??_LCDWriteInt
 12848  0013                     u3570:	
 12849  0013  0016               	moviw fsr1++
 12850  0014  001A               	movwi fsr0++
 12851  0015  0BA5               	decfsz	??_LCDWriteInt,f
 12852  0016  2813               	goto	u3570
 12853                           
 12854                           ;lcd.c: 193: uint8_t i=4,j=0;
 12855  0017  3004               	movlw	4
 12856  0018  00A5               	movwf	??_LCDWriteInt
 12857  0019  0825               	movf	??_LCDWriteInt,w
 12858  001A  00AF               	movwf	LCDWriteInt@i
 12859  001B  01AE               	clrf	LCDWriteInt@j
 12860                           
 12861                           ;lcd.c: 195: if(value<0)
 12862  001C  1FA1               	btfss	LCDWriteInt@value+1,7
 12863  001D  2829               	goto	l3071
 12864                           
 12865                           ;lcd.c: 196: {
 12866                           ;lcd.c: 197: LCDWriteCharacter('-');
 12867  001E  302D               	movlw	45
 12868  001F  3196  2685  3180   	fcall	_LCDWriteCharacter
 12869                           
 12870                           ;lcd.c: 198: value=value*-1;
 12871  0022  0020               	movlb	0	; select bank0
 12872  0023  09A0               	comf	LCDWriteInt@value,f
 12873  0024  09A1               	comf	LCDWriteInt@value+1,f
 12874  0025  0AA0               	incf	LCDWriteInt@value,f
 12875  0026  1903               	skipnz
 12876  0027  0AA1               	incf	LCDWriteInt@value+1,f
 12877                           
 12878                           ;lcd.c: 199: }
 12879  0028  2830               	goto	l3081
 12880  0029                     l3071:	
 12881                           
 12882                           ;lcd.c: 201: else
 12883                           ;lcd.c: 202: {
 12884                           ;lcd.c: 203: if(sign == 1)
 12885  0029  0324               	decf	LCDWriteInt@sign,w
 12886  002A  1D03               	btfss	3,2
 12887  002B  2830               	goto	l3081
 12888                           
 12889                           ;lcd.c: 204: {
 12890                           ;lcd.c: 205: LCDWriteCharacter('+');
 12891  002C  302B               	movlw	43
 12892  002D  3196  2685  3180   	fcall	_LCDWriteCharacter
 12893  0030                     l3081:	
 12894                           ;lcd.c: 206: }
 12895                           ;lcd.c: 207: }
 12896                           ;lcd.c: 209: while(value)
 12897                           
 12898  0030  0020               	movlb	0	; select bank0
 12899  0031  0820               	movf	LCDWriteInt@value,w
 12900  0032  0421               	iorwf	LCDWriteInt@value+1,w
 12901  0033  1903               	btfsc	3,2
 12902  0034  285D               	goto	l3083
 12903                           
 12904                           ;lcd.c: 210: {
 12905                           ;lcd.c: 211: str[i]=(uint16_t)value%10;
 12906  0035  300A               	movlw	10
 12907  0036  00F0               	movwf	___lwmod@divisor
 12908  0037  3000               	movlw	0
 12909  0038  00F1               	movwf	___lwmod@divisor+1
 12910  0039  0020               	movlb	0	; select bank0
 12911  003A  0821               	movf	LCDWriteInt@value+1,w
 12912  003B  00F3               	movwf	___lwmod@dividend+1
 12913  003C  0820               	movf	LCDWriteInt@value,w
 12914  003D  00F2               	movwf	___lwmod@dividend
 12915  003E  3193  23D1  3180   	fcall	___lwmod
 12916  0041  0870               	movf	?___lwmod,w
 12917  0042  0020               	movlb	0	; select bank0
 12918  0043  00A5               	movwf	??_LCDWriteInt
 12919  0044  082F               	movf	LCDWriteInt@i,w
 12920  0045  3E29               	addlw	(low (LCDWriteInt@str| 0))& (0+255)
 12921  0046  0086               	movwf	6
 12922  0047  0187               	clrf	7
 12923  0048  0825               	movf	??_LCDWriteInt,w
 12924  0049  0081               	movwf	1
 12925                           
 12926                           ;lcd.c: 212: value=value/10;
 12927  004A  300A               	movlw	10
 12928  004B  00F0               	movwf	___awdiv@divisor
 12929  004C  3000               	movlw	0
 12930  004D  00F1               	movwf	___awdiv@divisor+1
 12931  004E  0821               	movf	LCDWriteInt@value+1,w
 12932  004F  00F3               	movwf	___awdiv@dividend+1
 12933  0050  0820               	movf	LCDWriteInt@value,w
 12934  0051  00F2               	movwf	___awdiv@dividend
 12935  0052  3196  2634  3180   	fcall	___awdiv
 12936  0055  0871               	movf	?___awdiv+1,w
 12937  0056  0020               	movlb	0	; select bank0
 12938  0057  00A1               	movwf	LCDWriteInt@value+1
 12939  0058  0870               	movf	?___awdiv,w
 12940  0059  00A0               	movwf	LCDWriteInt@value
 12941                           
 12942                           ;lcd.c: 213: i--;
 12943  005A  3001               	movlw	1
 12944  005B  02AF               	subwf	LCDWriteInt@i,f
 12945  005C  2830               	goto	l3081
 12946  005D                     l3083:	
 12947                           
 12948                           ;lcd.c: 214: }
 12949                           ;lcd.c: 215: if(fieldLength==-1)
 12950  005D  0A22               	incf	LCDWriteInt@fieldLength,w
 12951  005E  1903               	btfsc	3,2
 12952  005F  2865               	goto	l3089
 12953  0060  286D               	goto	l3091
 12954  0061                     l3087:	
 12955                           ;lcd.c: 216: {
 12956                           ;lcd.c: 217: while(str[j]==0)
 12957                           
 12958                           
 12959                           ;lcd.c: 218: {
 12960                           ;lcd.c: 219: j++;
 12961  0061  3001               	movlw	1
 12962  0062  00A5               	movwf	??_LCDWriteInt
 12963  0063  0825               	movf	??_LCDWriteInt,w
 12964  0064  07AE               	addwf	LCDWriteInt@j,f
 12965  0065                     l3089:	
 12966  0065  082E               	movf	LCDWriteInt@j,w
 12967  0066  3E29               	addlw	(low (LCDWriteInt@str| 0))& (0+255)
 12968  0067  0086               	movwf	6
 12969  0068  0187               	clrf	7
 12970  0069  0801               	movf	1,w
 12971  006A  1D03               	btfss	3,2
 12972  006B  2873               	goto	l3093
 12973  006C  2861               	goto	l3087
 12974  006D                     l3091:	
 12975                           ;lcd.c: 220: }
 12976                           ;lcd.c: 221: }
 12977                           
 12978                           
 12979                           ;lcd.c: 222: else
 12980                           ;lcd.c: 223: {
 12981                           ;lcd.c: 224: j=(uint8_t)(5-fieldLength);
 12982  006D  0322               	decf	LCDWriteInt@fieldLength,w
 12983  006E  3AFF               	xorlw	255
 12984  006F  3E05               	addlw	5
 12985  0070  00A5               	movwf	??_LCDWriteInt
 12986  0071  0825               	movf	??_LCDWriteInt,w
 12987  0072  00AE               	movwf	LCDWriteInt@j
 12988  0073                     l3093:	
 12989                           
 12990                           ;lcd.c: 225: }
 12991                           ;lcd.c: 227: for(i=j;i<(5-numPlaces);i++)
 12992  0073  082E               	movf	LCDWriteInt@j,w
 12993  0074  00A5               	movwf	??_LCDWriteInt
 12994  0075  0825               	movf	??_LCDWriteInt,w
 12995  0076  00AF               	movwf	LCDWriteInt@i
 12996  0077                     l3099:	
 12997  0077  0823               	movf	LCDWriteInt@numPlaces,w
 12998  0078  00A5               	movwf	??_LCDWriteInt
 12999  0079  01A6               	clrf	??_LCDWriteInt+1
 13000  007A  09A5               	comf	??_LCDWriteInt,f
 13001  007B  09A6               	comf	??_LCDWriteInt+1,f
 13002  007C  0AA5               	incf	??_LCDWriteInt,f
 13003  007D  1903               	skipnz
 13004  007E  0AA6               	incf	??_LCDWriteInt+1,f
 13005  007F  0825               	movf	??_LCDWriteInt,w
 13006  0080  3E05               	addlw	5
 13007  0081  00A7               	movwf	??_LCDWriteInt+2
 13008  0082  3000               	movlw	0
 13009  0083  3D26               	addwfc	??_LCDWriteInt+1,w
 13010  0084  00A8               	movwf	??_LCDWriteInt+3
 13011  0085  0828               	movf	??_LCDWriteInt+3,w
 13012  0086  3A80               	xorlw	128
 13013  0087  3C80               	sublw	128
 13014  0088  1D03               	skipz
 13015  0089  288C               	goto	u3635
 13016  008A  0827               	movf	??_LCDWriteInt+2,w
 13017  008B  022F               	subwf	LCDWriteInt@i,w
 13018  008C                     u3635:	
 13019  008C  1803               	btfsc	3,0
 13020  008D  289E               	goto	l3101
 13021                           
 13022                           ;lcd.c: 228: {
 13023                           ;lcd.c: 229: LCDWriteCharacter((uint8_t)(48+str[i]));
 13024  008E  0020               	movlb	0	; select bank0
 13025  008F  082F               	movf	LCDWriteInt@i,w
 13026  0090  3E29               	addlw	(low (LCDWriteInt@str| 0))& (0+255)
 13027  0091  0086               	movwf	6
 13028  0092  0187               	clrf	7
 13029  0093  0801               	movf	1,w
 13030  0094  3E30               	addlw	48
 13031  0095  3196  2685  3180   	fcall	_LCDWriteCharacter
 13032  0098  3001               	movlw	1
 13033  0099  0020               	movlb	0	; select bank0
 13034  009A  00A5               	movwf	??_LCDWriteInt
 13035  009B  0825               	movf	??_LCDWriteInt,w
 13036  009C  07AF               	addwf	LCDWriteInt@i,f
 13037  009D  2877               	goto	l3099
 13038  009E                     l3101:	
 13039                           
 13040                           ;lcd.c: 230: }
 13041                           ;lcd.c: 232: if(numPlaces == 1)
 13042  009E  0020               	movlb	0	; select bank0
 13043  009F  0323               	decf	LCDWriteInt@numPlaces,w
 13044  00A0  1D03               	btfss	3,2
 13045  00A1  28AC               	goto	l3105
 13046                           
 13047                           ;lcd.c: 233: {
 13048                           ;lcd.c: 234: LCDWriteCharacter(46);
 13049  00A2  302E               	movlw	46
 13050  00A3  3196  2685  3180   	fcall	_LCDWriteCharacter
 13051                           
 13052                           ;lcd.c: 235: LCDWriteCharacter ((uint8_t)(48+str[4]));
 13053  00A6  0020               	movlb	0	; select bank0
 13054  00A7  082D               	movf	LCDWriteInt@str+4,w
 13055  00A8  3E30               	addlw	48
 13056  00A9  3196  2685  3180   	fcall	_LCDWriteCharacter
 13057  00AC                     l3105:	
 13058                           
 13059                           ;lcd.c: 236: }
 13060                           ;lcd.c: 238: if(numPlaces == 2)
 13061  00AC  3002               	movlw	2
 13062  00AD  0020               	movlb	0	; select bank0
 13063  00AE  0623               	xorwf	LCDWriteInt@numPlaces,w
 13064  00AF  1D03               	btfss	3,2
 13065  00B0  0008               	return
 13066                           
 13067                           ;lcd.c: 239: {
 13068                           ;lcd.c: 240: LCDWriteCharacter(46);
 13069  00B1  302E               	movlw	46
 13070  00B2  3196  2685  3180   	fcall	_LCDWriteCharacter
 13071                           
 13072                           ;lcd.c: 241: LCDWriteCharacter((uint8_t)(48+str[3]));
 13073  00B5  0020               	movlb	0	; select bank0
 13074  00B6  082C               	movf	LCDWriteInt@str+3,w
 13075  00B7  3E30               	addlw	48
 13076  00B8  3196  2685  3180   	fcall	_LCDWriteCharacter
 13077                           
 13078                           ;lcd.c: 242: LCDWriteCharacter((uint8_t)(48+str[4]));
 13079  00BB  0020               	movlb	0	; select bank0
 13080  00BC  082D               	movf	LCDWriteInt@str+4,w
 13081  00BD  3E30               	addlw	48
 13082  00BE  3196  2685         	fcall	_LCDWriteCharacter
 13083  00C0  0008               	return
 13084  00C1                     __end_of_LCDWriteInt:	
 13085                           
 13086                           	psect	text34
 13087  13D1                     __ptext34:	
 13088 ;; *************** function ___lwmod *****************
 13089 ;; Defined at:
 13090 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 13091 ;; Parameters:    Size  Location     Type
 13092 ;;  divisor         2    0[COMMON] unsigned int 
 13093 ;;  dividend        2    2[COMMON] unsigned int 
 13094 ;; Auto vars:     Size  Location     Type
 13095 ;;  counter         1    5[COMMON] unsigned char 
 13096 ;; Return value:  Size  Location     Type
 13097 ;;                  2    0[COMMON] unsigned int 
 13098 ;; Registers used:
 13099 ;;		wreg, status,2, status,0
 13100 ;; Tracked objects:
 13101 ;;		On entry : 0/0
 13102 ;;		On exit  : 0/0
 13103 ;;		Unchanged: 0/0
 13104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13105 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13106 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13107 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13108 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13109 ;;Total ram usage:        6 bytes
 13110 ;; Hardware stack levels used:    1
 13111 ;; This function calls:
 13112 ;;		Nothing
 13113 ;; This function is called by:
 13114 ;;		_LCDWriteInt
 13115 ;; This function uses a non-reentrant model
 13116 ;;
 13117                           
 13118                           
 13119                           ;psect for function ___lwmod
 13120  13D1                     ___lwmod:	
 13121                           
 13122                           ;incstack = 0
 13123                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
 13124  13D1  0870               	movf	___lwmod@divisor,w
 13125  13D2  0471               	iorwf	___lwmod@divisor+1,w
 13126  13D3  1903               	btfsc	3,2
 13127  13D4  2BF8               	goto	l2907
 13128  13D5  01F5               	clrf	___lwmod@counter
 13129  13D6  0AF5               	incf	___lwmod@counter,f
 13130  13D7                     l2897:	
 13131  13D7  1BF1               	btfsc	___lwmod@divisor+1,7
 13132  13D8  2BE3               	goto	l2899
 13133  13D9  3001               	movlw	1
 13134  13DA                     u3145:	
 13135  13DA  35F0               	lslf	___lwmod@divisor,f
 13136  13DB  0DF1               	rlf	___lwmod@divisor+1,f
 13137  13DC  0B89               	decfsz	9,f
 13138  13DD  2BDA               	goto	u3145
 13139  13DE  3001               	movlw	1
 13140  13DF  00F4               	movwf	??___lwmod
 13141  13E0  0874               	movf	??___lwmod,w
 13142  13E1  07F5               	addwf	___lwmod@counter,f
 13143  13E2  2BD7               	goto	l2897
 13144  13E3                     l2899:	
 13145  13E3  0871               	movf	___lwmod@divisor+1,w
 13146  13E4  0273               	subwf	___lwmod@dividend+1,w
 13147  13E5  1D03               	skipz
 13148  13E6  2BE9               	goto	u3165
 13149  13E7  0870               	movf	___lwmod@divisor,w
 13150  13E8  0272               	subwf	___lwmod@dividend,w
 13151  13E9                     u3165:	
 13152  13E9  1C03               	skipc
 13153  13EA  2BEF               	goto	l2903
 13154  13EB  0870               	movf	___lwmod@divisor,w
 13155  13EC  02F2               	subwf	___lwmod@dividend,f
 13156  13ED  0871               	movf	___lwmod@divisor+1,w
 13157  13EE  3BF3               	subwfb	___lwmod@dividend+1,f
 13158  13EF                     l2903:	
 13159  13EF  3001               	movlw	1
 13160  13F0                     u3175:	
 13161  13F0  36F1               	lsrf	___lwmod@divisor+1,f
 13162  13F1  0CF0               	rrf	___lwmod@divisor,f
 13163  13F2  0B89               	decfsz	9,f
 13164  13F3  2BF0               	goto	u3175
 13165  13F4  3001               	movlw	1
 13166  13F5  02F5               	subwf	___lwmod@counter,f
 13167  13F6  1D03               	btfss	3,2
 13168  13F7  2BE3               	goto	l2899
 13169  13F8                     l2907:	
 13170  13F8  0873               	movf	___lwmod@dividend+1,w
 13171  13F9  00F1               	movwf	?___lwmod+1
 13172  13FA  0872               	movf	___lwmod@dividend,w
 13173  13FB  00F0               	movwf	?___lwmod
 13174  13FC  0008               	return
 13175  13FD                     __end_of___lwmod:	
 13176                           
 13177                           	psect	text35
 13178  1634                     __ptext35:	
 13179 ;; *************** function ___awdiv *****************
 13180 ;; Defined at:
 13181 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
 13182 ;; Parameters:    Size  Location     Type
 13183 ;;  divisor         2    0[COMMON] int 
 13184 ;;  dividend        2    2[COMMON] int 
 13185 ;; Auto vars:     Size  Location     Type
 13186 ;;  quotient        2    7[COMMON] int 
 13187 ;;  sign            1    6[COMMON] unsigned char 
 13188 ;;  counter         1    5[COMMON] unsigned char 
 13189 ;; Return value:  Size  Location     Type
 13190 ;;                  2    0[COMMON] int 
 13191 ;; Registers used:
 13192 ;;		wreg, status,2, status,0
 13193 ;; Tracked objects:
 13194 ;;		On entry : 0/0
 13195 ;;		On exit  : 0/0
 13196 ;;		Unchanged: 0/0
 13197 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13198 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13199 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13200 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13201 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13202 ;;Total ram usage:        9 bytes
 13203 ;; Hardware stack levels used:    1
 13204 ;; This function calls:
 13205 ;;		Nothing
 13206 ;; This function is called by:
 13207 ;;		_LCDWriteInt
 13208 ;; This function uses a non-reentrant model
 13209 ;;
 13210                           
 13211                           
 13212                           ;psect for function ___awdiv
 13213  1634                     ___awdiv:	
 13214                           
 13215                           ;incstack = 0
 13216                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 13217  1634  01F6               	clrf	___awdiv@sign
 13218  1635  1FF1               	btfss	___awdiv@divisor+1,7
 13219  1636  2E3E               	goto	l2803
 13220  1637  09F0               	comf	___awdiv@divisor,f
 13221  1638  09F1               	comf	___awdiv@divisor+1,f
 13222  1639  0AF0               	incf	___awdiv@divisor,f
 13223  163A  1903               	skipnz
 13224  163B  0AF1               	incf	___awdiv@divisor+1,f
 13225  163C  01F6               	clrf	___awdiv@sign
 13226  163D  0AF6               	incf	___awdiv@sign,f
 13227  163E                     l2803:	
 13228  163E  1FF3               	btfss	___awdiv@dividend+1,7
 13229  163F  2E49               	goto	l2809
 13230  1640  09F2               	comf	___awdiv@dividend,f
 13231  1641  09F3               	comf	___awdiv@dividend+1,f
 13232  1642  0AF2               	incf	___awdiv@dividend,f
 13233  1643  1903               	skipnz
 13234  1644  0AF3               	incf	___awdiv@dividend+1,f
 13235  1645  3001               	movlw	1
 13236  1646  00F4               	movwf	??___awdiv
 13237  1647  0874               	movf	??___awdiv,w
 13238  1648  06F6               	xorwf	___awdiv@sign,f
 13239  1649                     l2809:	
 13240  1649  01F7               	clrf	___awdiv@quotient
 13241  164A  01F8               	clrf	___awdiv@quotient+1
 13242  164B  0870               	movf	___awdiv@divisor,w
 13243  164C  0471               	iorwf	___awdiv@divisor+1,w
 13244  164D  1903               	btfsc	3,2
 13245  164E  2E78               	goto	l2831
 13246  164F  01F5               	clrf	___awdiv@counter
 13247  1650  0AF5               	incf	___awdiv@counter,f
 13248  1651                     l2819:	
 13249  1651  1BF1               	btfsc	___awdiv@divisor+1,7
 13250  1652  2E5D               	goto	l2821
 13251  1653  3001               	movlw	1
 13252  1654                     u2975:	
 13253  1654  35F0               	lslf	___awdiv@divisor,f
 13254  1655  0DF1               	rlf	___awdiv@divisor+1,f
 13255  1656  0B89               	decfsz	9,f
 13256  1657  2E54               	goto	u2975
 13257  1658  3001               	movlw	1
 13258  1659  00F4               	movwf	??___awdiv
 13259  165A  0874               	movf	??___awdiv,w
 13260  165B  07F5               	addwf	___awdiv@counter,f
 13261  165C  2E51               	goto	l2819
 13262  165D                     l2821:	
 13263  165D  3001               	movlw	1
 13264  165E                     u2995:	
 13265  165E  35F7               	lslf	___awdiv@quotient,f
 13266  165F  0DF8               	rlf	___awdiv@quotient+1,f
 13267  1660  0B89               	decfsz	9,f
 13268  1661  2E5E               	goto	u2995
 13269  1662  0871               	movf	___awdiv@divisor+1,w
 13270  1663  0273               	subwf	___awdiv@dividend+1,w
 13271  1664  1D03               	skipz
 13272  1665  2E68               	goto	u3005
 13273  1666  0870               	movf	___awdiv@divisor,w
 13274  1667  0272               	subwf	___awdiv@dividend,w
 13275  1668                     u3005:	
 13276  1668  1C03               	skipc
 13277  1669  2E6F               	goto	l2827
 13278  166A  0870               	movf	___awdiv@divisor,w
 13279  166B  02F2               	subwf	___awdiv@dividend,f
 13280  166C  0871               	movf	___awdiv@divisor+1,w
 13281  166D  3BF3               	subwfb	___awdiv@dividend+1,f
 13282  166E  1477               	bsf	___awdiv@quotient,0
 13283  166F                     l2827:	
 13284  166F  3001               	movlw	1
 13285  1670                     u3015:	
 13286  1670  36F1               	lsrf	___awdiv@divisor+1,f
 13287  1671  0CF0               	rrf	___awdiv@divisor,f
 13288  1672  0B89               	decfsz	9,f
 13289  1673  2E70               	goto	u3015
 13290  1674  3001               	movlw	1
 13291  1675  02F5               	subwf	___awdiv@counter,f
 13292  1676  1D03               	btfss	3,2
 13293  1677  2E5D               	goto	l2821
 13294  1678                     l2831:	
 13295  1678  0876               	movf	___awdiv@sign,w
 13296  1679  1903               	btfsc	3,2
 13297  167A  2E80               	goto	l2835
 13298  167B  09F7               	comf	___awdiv@quotient,f
 13299  167C  09F8               	comf	___awdiv@quotient+1,f
 13300  167D  0AF7               	incf	___awdiv@quotient,f
 13301  167E  1903               	skipnz
 13302  167F  0AF8               	incf	___awdiv@quotient+1,f
 13303  1680                     l2835:	
 13304  1680  0878               	movf	___awdiv@quotient+1,w
 13305  1681  00F1               	movwf	?___awdiv+1
 13306  1682  0877               	movf	___awdiv@quotient,w
 13307  1683  00F0               	movwf	?___awdiv
 13308  1684  0008               	return
 13309  1685                     __end_of___awdiv:	
 13310                           
 13311                           	psect	text36
 13312  1685                     __ptext36:	
 13313 ;; *************** function _LCDWriteCharacter *****************
 13314 ;; Defined at:
 13315 ;;		line 140 in file "lcd.c"
 13316 ;; Parameters:    Size  Location     Type
 13317 ;;  character       1    wreg     const unsigned char 
 13318 ;; Auto vars:     Size  Location     Type
 13319 ;;  character       1    9[COMMON] const unsigned char 
 13320 ;;  base            2   10[COMMON] unsigned int 
 13321 ;; Return value:  Size  Location     Type
 13322 ;;                  1    wreg      void 
 13323 ;; Registers used:
 13324 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13325 ;; Tracked objects:
 13326 ;;		On entry : 0/0
 13327 ;;		On exit  : 0/0
 13328 ;;		Unchanged: 0/0
 13329 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13330 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13331 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13332 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13333 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13334 ;;Total ram usage:        6 bytes
 13335 ;; Hardware stack levels used:    1
 13336 ;; Hardware stack levels required when called:    1
 13337 ;; This function calls:
 13338 ;;		_LCDWrite
 13339 ;;		___wmul
 13340 ;; This function is called by:
 13341 ;;		_LCDWriteString
 13342 ;;		_LCDWriteInt
 13343 ;;		_main
 13344 ;; This function uses a non-reentrant model
 13345 ;;
 13346                           
 13347                           
 13348                           ;psect for function _LCDWriteCharacter
 13349  1685                     _LCDWriteCharacter:	
 13350                           
 13351                           ;incstack = 0
 13352                           ; Regs used in _LCDWriteCharacter: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13353                           ;LCDWriteCharacter@character stored from wreg
 13354  1685  00F9               	movwf	LCDWriteCharacter@character
 13355                           
 13356                           ;lcd.c: 142: uint16_t base;
 13357                           ;lcd.c: 143: base = character - 0x20;
 13358  1686  0879               	movf	LCDWriteCharacter@character,w
 13359  1687  3EE0               	addlw	224
 13360  1688  00FA               	movwf	LCDWriteCharacter@base
 13361  1689  30FF               	movlw	255
 13362  168A  1803               	skipnc
 13363  168B  3000               	movlw	0
 13364  168C  00FB               	movwf	LCDWriteCharacter@base+1
 13365                           
 13366                           ;lcd.c: 144: base *= 3;
 13367  168D  3003               	movlw	3
 13368  168E  00F0               	movwf	___wmul@multiplier
 13369  168F  3000               	movlw	0
 13370  1690  00F1               	movwf	___wmul@multiplier+1
 13371  1691  087B               	movf	LCDWriteCharacter@base+1,w
 13372  1692  00F3               	movwf	___wmul@multiplicand+1
 13373  1693  087A               	movf	LCDWriteCharacter@base,w
 13374  1694  00F2               	movwf	___wmul@multiplicand
 13375  1695  3192  22EF  3196   	fcall	___wmul
 13376  1698  0871               	movf	?___wmul+1,w
 13377  1699  00FB               	movwf	LCDWriteCharacter@base+1
 13378  169A  0870               	movf	?___wmul,w
 13379  169B  00FA               	movwf	LCDWriteCharacter@base
 13380                           
 13381                           ;lcd.c: 145: LCDWrite(1,fonts[base]);
 13382  169C  087B               	movf	LCDWriteCharacter@base+1,w
 13383  169D  0085               	movwf	5
 13384  169E  087A               	movf	LCDWriteCharacter@base,w
 13385  169F  0084               	movwf	4
 13386  16A0  3000               	movlw	low (_fonts| (0+32768))
 13387  16A1  0784               	addwf	4,f
 13388  16A2  3090               	movlw	high (_fonts| (0+32768))
 13389  16A3  3D85               	addwfc	5,f
 13390  16A4  0800               	movf	0,w	;code access
 13391  16A5  00F6               	movwf	??_LCDWriteCharacter
 13392  16A6  0876               	movf	??_LCDWriteCharacter,w
 13393  16A7  00F0               	movwf	LCDWrite@data
 13394  16A8  3001               	movlw	1
 13395  16A9  3193  2386  3196   	fcall	_LCDWrite
 13396                           
 13397                           ;lcd.c: 146: LCDWrite(1,fonts[base + 1]);
 13398  16AC  087A               	movf	LCDWriteCharacter@base,w
 13399  16AD  3E01               	addlw	1
 13400  16AE  00F6               	movwf	??_LCDWriteCharacter
 13401  16AF  3000               	movlw	0
 13402  16B0  3D7B               	addwfc	LCDWriteCharacter@base+1,w
 13403  16B1  00F7               	movwf	??_LCDWriteCharacter+1
 13404  16B2  3000               	movlw	low (_fonts| (0+32768))
 13405  16B3  0776               	addwf	??_LCDWriteCharacter,w
 13406  16B4  0084               	movwf	4
 13407  16B5  3090               	movlw	high (_fonts| (0+32768))
 13408  16B6  3D77               	addwfc	??_LCDWriteCharacter+1,w
 13409  16B7  0085               	movwf	5
 13410  16B8  0800               	movf	0,w	;code access
 13411  16B9  00F8               	movwf	??_LCDWriteCharacter+2
 13412  16BA  0878               	movf	??_LCDWriteCharacter+2,w
 13413  16BB  00F0               	movwf	LCDWrite@data
 13414  16BC  3001               	movlw	1
 13415  16BD  3193  2386  3196   	fcall	_LCDWrite
 13416                           
 13417                           ;lcd.c: 147: LCDWrite(1,fonts[base + 2]);
 13418  16C0  087A               	movf	LCDWriteCharacter@base,w
 13419  16C1  3E02               	addlw	2
 13420  16C2  00F6               	movwf	??_LCDWriteCharacter
 13421  16C3  3000               	movlw	0
 13422  16C4  3D7B               	addwfc	LCDWriteCharacter@base+1,w
 13423  16C5  00F7               	movwf	??_LCDWriteCharacter+1
 13424  16C6  3000               	movlw	low (_fonts| (0+32768))
 13425  16C7  0776               	addwf	??_LCDWriteCharacter,w
 13426  16C8  0084               	movwf	4
 13427  16C9  3090               	movlw	high (_fonts| (0+32768))
 13428  16CA  3D77               	addwfc	??_LCDWriteCharacter+1,w
 13429  16CB  0085               	movwf	5
 13430  16CC  0800               	movf	0,w	;code access
 13431  16CD  00F8               	movwf	??_LCDWriteCharacter+2
 13432  16CE  0878               	movf	??_LCDWriteCharacter+2,w
 13433  16CF  00F0               	movwf	LCDWrite@data
 13434  16D0  3001               	movlw	1
 13435  16D1  3193  2386  3196   	fcall	_LCDWrite
 13436                           
 13437                           ;lcd.c: 148: LCDWrite(1, 0x00);
 13438  16D4  01F0               	clrf	LCDWrite@data
 13439  16D5  3001               	movlw	1
 13440  16D6  3193  2386         	fcall	_LCDWrite
 13441  16D8  0008               	return
 13442  16D9                     __end_of_LCDWriteCharacter:	
 13443                           
 13444                           	psect	text37
 13445  12EF                     __ptext37:	
 13446 ;; *************** function ___wmul *****************
 13447 ;; Defined at:
 13448 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 13449 ;; Parameters:    Size  Location     Type
 13450 ;;  multiplier      2    0[COMMON] unsigned int 
 13451 ;;  multiplicand    2    2[COMMON] unsigned int 
 13452 ;; Auto vars:     Size  Location     Type
 13453 ;;  product         2    4[COMMON] unsigned int 
 13454 ;; Return value:  Size  Location     Type
 13455 ;;                  2    0[COMMON] unsigned int 
 13456 ;; Registers used:
 13457 ;;		wreg, status,2, status,0
 13458 ;; Tracked objects:
 13459 ;;		On entry : 0/0
 13460 ;;		On exit  : 0/0
 13461 ;;		Unchanged: 0/0
 13462 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13463 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13464 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13465 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13466 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13467 ;;Total ram usage:        6 bytes
 13468 ;; Hardware stack levels used:    1
 13469 ;; This function calls:
 13470 ;;		Nothing
 13471 ;; This function is called by:
 13472 ;;		_readIAnalog
 13473 ;;		_LCDWriteCharacter
 13474 ;;		_eval_poly
 13475 ;; This function uses a non-reentrant model
 13476 ;;
 13477                           
 13478                           
 13479                           ;psect for function ___wmul
 13480  12EF                     ___wmul:	
 13481                           
 13482                           ;incstack = 0
 13483                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 13484  12EF  01F4               	clrf	___wmul@product
 13485  12F0  01F5               	clrf	___wmul@product+1
 13486  12F1                     l2319:	
 13487  12F1  1C70               	btfss	___wmul@multiplier,0
 13488  12F2  2AF7               	goto	l605
 13489  12F3  0872               	movf	___wmul@multiplicand,w
 13490  12F4  07F4               	addwf	___wmul@product,f
 13491  12F5  0873               	movf	___wmul@multiplicand+1,w
 13492  12F6  3DF5               	addwfc	___wmul@product+1,f
 13493  12F7                     l605:	
 13494  12F7  3001               	movlw	1
 13495  12F8                     u2225:	
 13496  12F8  35F2               	lslf	___wmul@multiplicand,f
 13497  12F9  0DF3               	rlf	___wmul@multiplicand+1,f
 13498  12FA  0B89               	decfsz	9,f
 13499  12FB  2AF8               	goto	u2225
 13500  12FC  3001               	movlw	1
 13501  12FD                     u2235:	
 13502  12FD  36F1               	lsrf	___wmul@multiplier+1,f
 13503  12FE  0CF0               	rrf	___wmul@multiplier,f
 13504  12FF  0B89               	decfsz	9,f
 13505  1300  2AFD               	goto	u2235
 13506  1301  0870               	movf	___wmul@multiplier,w
 13507  1302  0471               	iorwf	___wmul@multiplier+1,w
 13508  1303  1D03               	btfss	3,2
 13509  1304  2AF1               	goto	l2319
 13510  1305  0875               	movf	___wmul@product+1,w
 13511  1306  00F1               	movwf	?___wmul+1
 13512  1307  0874               	movf	___wmul@product,w
 13513  1308  00F0               	movwf	?___wmul
 13514  1309  0008               	return
 13515  130A                     __end_of___wmul:	
 13516                           
 13517                           	psect	text38
 13518  1386                     __ptext38:	
 13519 ;; *************** function _LCDWrite *****************
 13520 ;; Defined at:
 13521 ;;		line 281 in file "lcd.c"
 13522 ;; Parameters:    Size  Location     Type
 13523 ;;  data_or_comm    1    wreg     unsigned char 
 13524 ;;  data            1    0[COMMON] unsigned char 
 13525 ;; Auto vars:     Size  Location     Type
 13526 ;;  data_or_comm    1    2[COMMON] unsigned char 
 13527 ;;  i               1    4[COMMON] unsigned char 
 13528 ;;  d               1    3[COMMON] unsigned char 
 13529 ;; Return value:  Size  Location     Type
 13530 ;;                  1    wreg      void 
 13531 ;; Registers used:
 13532 ;;		wreg, status,2, status,0
 13533 ;; Tracked objects:
 13534 ;;		On entry : 0/0
 13535 ;;		On exit  : 0/0
 13536 ;;		Unchanged: 0/0
 13537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13538 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13539 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13540 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13541 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13542 ;;Total ram usage:        5 bytes
 13543 ;; Hardware stack levels used:    1
 13544 ;; This function calls:
 13545 ;;		Nothing
 13546 ;; This function is called by:
 13547 ;;		_gotoXY
 13548 ;;		_LCDWriteCharacter
 13549 ;;		_LCDClear
 13550 ;;		_LCDInit
 13551 ;; This function uses a non-reentrant model
 13552 ;;
 13553                           
 13554                           
 13555                           ;psect for function _LCDWrite
 13556  1386                     _LCDWrite:	
 13557                           
 13558                           ;incstack = 0
 13559                           ; Regs used in _LCDWrite: [wreg+status,2+status,0]
 13560                           ;LCDWrite@data_or_command stored from wreg
 13561  1386  00F2               	movwf	LCDWrite@data_or_command
 13562                           
 13563                           ;lcd.c: 283: uint8_t i,d;
 13564                           ;lcd.c: 285: d=data;
 13565  1387  0870               	movf	LCDWrite@data,w
 13566  1388  00F1               	movwf	??_LCDWrite
 13567  1389  0871               	movf	??_LCDWrite,w
 13568  138A  00F3               	movwf	LCDWrite@d
 13569                           
 13570                           ;lcd.c: 287: if(data_or_command == 0)
 13571  138B  0872               	movf	LCDWrite@data_or_command,w
 13572  138C  1D03               	btfss	3,2
 13573  138D  2B91               	goto	l217
 13574                           
 13575                           ;lcd.c: 288: {
 13576                           ;lcd.c: 289: LATAbits.LATA2 = 0;
 13577  138E  0020               	movlb	0	; select bank0
 13578  138F  1116               	bcf	22,2	;volatile
 13579                           
 13580                           ;lcd.c: 290: }
 13581  1390  2B93               	goto	l218
 13582  1391                     l217:	
 13583                           
 13584                           ;lcd.c: 291: else
 13585                           ;lcd.c: 292: {
 13586                           ;lcd.c: 293: LATAbits.LATA2 = 1;
 13587  1391  0020               	movlb	0	; select bank0
 13588  1392  1516               	bsf	22,2	;volatile
 13589  1393                     l218:	
 13590                           
 13591                           ;lcd.c: 294: }
 13592                           ;lcd.c: 296: LATAbits.LATA1 = 0;
 13593  1393  1096               	bcf	22,1	;volatile
 13594                           
 13595                           ;lcd.c: 298: for(i=0;i<8;i++)
 13596  1394  01F4               	clrf	LCDWrite@i
 13597  1395  3008               	movlw	8
 13598  1396  0274               	subwf	LCDWrite@i,w
 13599  1397  1803               	btfsc	3,0
 13600  1398  2BA9               	goto	l220
 13601  1399                     l219:	
 13602                           
 13603                           ;lcd.c: 299: {
 13604                           ;lcd.c: 300: LATAbits.LATA3 = 0;
 13605  1399  1196               	bcf	22,3	;volatile
 13606                           
 13607                           ;lcd.c: 302: if(d&0x80)
 13608  139A  1FF3               	btfss	LCDWrite@d,7
 13609  139B  2B9D               	goto	l221
 13610                           
 13611                           ;lcd.c: 303: {
 13612                           ;lcd.c: 304: LATAbits.LATA3 = 1;
 13613  139C  1596               	bsf	22,3	;volatile
 13614  139D                     l221:	
 13615                           
 13616                           ;lcd.c: 305: }
 13617                           ;lcd.c: 307: LATAbits.LATA4 = 1;
 13618  139D  1616               	bsf	22,4	;volatile
 13619                           
 13620                           ;lcd.c: 309: d<<=1;
 13621  139E  1003               	clrc
 13622  139F  0DF3               	rlf	LCDWrite@d,f
 13623                           
 13624                           ;lcd.c: 311: LATAbits.LATA4=0;
 13625  13A0  1216               	bcf	22,4	;volatile
 13626  13A1  3001               	movlw	1
 13627  13A2  00F1               	movwf	??_LCDWrite
 13628  13A3  0871               	movf	??_LCDWrite,w
 13629  13A4  07F4               	addwf	LCDWrite@i,f
 13630  13A5  3008               	movlw	8
 13631  13A6  0274               	subwf	LCDWrite@i,w
 13632  13A7  1C03               	skipc
 13633  13A8  2B99               	goto	l219
 13634  13A9                     l220:	
 13635                           
 13636                           ;lcd.c: 312: }
 13637                           ;lcd.c: 314: LATAbits.LATA1 = 1;
 13638  13A9  1496               	bsf	22,1	;volatile
 13639  13AA  0008               	return
 13640  13AB                     __end_of_LCDWrite:	
 13641                           
 13642                           	psect	text39
 13643  00C1                     __ptext39:	
 13644 ;; *************** function _Battery_State_Machine *****************
 13645 ;; Defined at:
 13646 ;;		line 28 in file "battery_charger.c"
 13647 ;; Parameters:    Size  Location     Type
 13648 ;;  z               1    wreg     unsigned char 
 13649 ;; Auto vars:     Size  Location     Type
 13650 ;;  z               1   35[BANK0 ] unsigned char 
 13651 ;; Return value:  Size  Location     Type
 13652 ;;                  1    wreg      void 
 13653 ;; Registers used:
 13654 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13655 ;; Tracked objects:
 13656 ;;		On entry : 0/0
 13657 ;;		On exit  : 0/0
 13658 ;;		Unchanged: 0/0
 13659 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13660 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13661 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13662 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13663 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13664 ;;Total ram usage:        6 bytes
 13665 ;; Hardware stack levels used:    1
 13666 ;; Hardware stack levels required when called:    2
 13667 ;; This function calls:
 13668 ;;		___awtoft
 13669 ;;		___ftmul
 13670 ;;		___fttol
 13671 ;; This function is called by:
 13672 ;;		_main
 13673 ;; This function uses a non-reentrant model
 13674 ;;
 13675                           
 13676                           
 13677                           ;psect for function _Battery_State_Machine
 13678  00C1                     _Battery_State_Machine:	
 13679                           
 13680                           ;incstack = 0
 13681                           ; Regs used in _Battery_State_Machine: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 13682                           ;Battery_State_Machine@z stored from wreg
 13683  00C1  0020               	movlb	0	; select bank0
 13684  00C2  00C3               	movwf	Battery_State_Machine@z
 13685                           
 13686                           ;battery_charger.c: 30: if(batteryState[z]==PRECHARGE)
 13687  00C3  0843               	movf	Battery_State_Machine@z,w
 13688  00C4  3E64               	addlw	(low (_batteryState| 0))& (0+255)
 13689  00C5  0086               	movwf	6
 13690  00C6  0187               	clrf	7
 13691  00C7  3003               	movlw	3
 13692  00C8  0601               	xorwf	1,w
 13693  00C9  1D03               	btfss	3,2
 13694  00CA  2918               	goto	l2943
 13695                           
 13696                           ;battery_charger.c: 31: {
 13697                           ;battery_charger.c: 32: if(voltage[z]<1075)
 13698  00CB  3543               	lslf	Battery_State_Machine@z,w
 13699  00CC  3EB0               	addlw	(low (_voltage| 0))& (0+255)
 13700  00CD  0086               	movwf	6
 13701  00CE  0187               	clrf	7
 13702  00CF  3F40               	moviw [0]fsr1
 13703  00D0  00BE               	movwf	??_Battery_State_Machine
 13704  00D1  3F41               	moviw [1]fsr1
 13705  00D2  00BF               	movwf	??_Battery_State_Machine+1
 13706  00D3  083F               	movf	??_Battery_State_Machine+1,w
 13707  00D4  3A80               	xorlw	128
 13708  00D5  00C0               	movwf	??_Battery_State_Machine+2
 13709  00D6  3084               	movlw	132
 13710  00D7  0240               	subwf	??_Battery_State_Machine+2,w
 13711  00D8  1D03               	skipz
 13712  00D9  28DC               	goto	u3275
 13713  00DA  3033               	movlw	51
 13714  00DB  023E               	subwf	??_Battery_State_Machine,w
 13715  00DC                     u3275:	
 13716  00DC  1803               	skipnc
 13717  00DD  2906               	goto	l2941
 13718                           
 13719                           ;battery_charger.c: 33: {
 13720                           ;battery_charger.c: 34: if(stateCounter[z]>0)
 13721  00DE  0020               	movlb	0	; select bank0
 13722  00DF  3543               	lslf	Battery_State_Machine@z,w
 13723  00E0  3EC0               	addlw	(low (_stateCounter| 0))& (0+255)
 13724  00E1  0086               	movwf	6
 13725  00E2  0187               	clrf	7
 13726  00E3  3F40               	moviw [0]fsr1
 13727  00E4  00BE               	movwf	??_Battery_State_Machine
 13728  00E5  3F41               	moviw [1]fsr1
 13729  00E6  00BF               	movwf	??_Battery_State_Machine+1
 13730  00E7  083F               	movf	??_Battery_State_Machine+1,w
 13731  00E8  3A80               	xorlw	128
 13732  00E9  00C0               	movwf	??_Battery_State_Machine+2
 13733  00EA  3080               	movlw	128
 13734  00EB  0240               	subwf	??_Battery_State_Machine+2,w
 13735  00EC  1D03               	skipz
 13736  00ED  28F0               	goto	u3285
 13737  00EE  3001               	movlw	1
 13738  00EF  023E               	subwf	??_Battery_State_Machine,w
 13739  00F0                     u3285:	
 13740  00F0  1C03               	skipc
 13741  00F1  28FE               	goto	l2939
 13742                           
 13743                           ;battery_charger.c: 35: {
 13744                           ;battery_charger.c: 36: stateCounter[z]-=1;
 13745  00F2  0020               	movlb	0	; select bank0
 13746  00F3  3543               	lslf	Battery_State_Machine@z,w
 13747  00F4  3EC0               	addlw	(low (_stateCounter| 0))& (0+255)
 13748  00F5  0086               	movwf	6
 13749  00F6  0187               	clrf	7
 13750  00F7  30FF               	movlw	255
 13751  00F8  0781               	addwf	1,f
 13752  00F9  3141               	addfsr 1,1
 13753  00FA  30FF               	movlw	255
 13754  00FB  3D81               	addwfc	1,f
 13755  00FC  317F               	addfsr 1,-1
 13756                           
 13757                           ;battery_charger.c: 37: }
 13758  00FD  0008               	return
 13759  00FE                     l2939:	
 13760                           
 13761                           ;battery_charger.c: 38: else
 13762                           ;battery_charger.c: 39: {
 13763                           ;battery_charger.c: 40: batteryState[z]=FAULT;
 13764  00FE  0020               	movlb	0	; select bank0
 13765  00FF  0843               	movf	Battery_State_Machine@z,w
 13766  0100  3E64               	addlw	(low (_batteryState| 0))& (0+255)
 13767  0101  0086               	movwf	6
 13768  0102  0187               	clrf	7
 13769  0103  0181               	clrf	1
 13770  0104  0A81               	incf	1,f
 13771                           
 13772                           ;battery_charger.c: 41: }
 13773                           ;battery_charger.c: 42: }
 13774  0105  0008               	return
 13775  0106                     l2941:	
 13776                           
 13777                           ;battery_charger.c: 43: else
 13778                           ;battery_charger.c: 44: {
 13779                           ;battery_charger.c: 45: batteryState[z]=CHARGE;
 13780  0106  3004               	movlw	4
 13781  0107  0020               	movlb	0	; select bank0
 13782  0108  00BE               	movwf	??_Battery_State_Machine
 13783  0109  0843               	movf	Battery_State_Machine@z,w
 13784  010A  3E64               	addlw	(low (_batteryState| 0))& (0+255)
 13785  010B  0086               	movwf	6
 13786  010C  0187               	clrf	7
 13787  010D  083E               	movf	??_Battery_State_Machine,w
 13788  010E  0081               	movwf	1
 13789                           
 13790                           ;battery_charger.c: 46: Iref[z]=35;
 13791  010F  3543               	lslf	Battery_State_Machine@z,w
 13792  0110  3EC4               	addlw	(low (_Iref| 0))& (0+255)
 13793  0111  0086               	movwf	6
 13794  0112  0187               	clrf	7
 13795  0113  3023               	movlw	35
 13796  0114  3FC0               	movwi [0]fsr1
 13797  0115  3000               	movlw	0
 13798  0116  3FC1               	movwi [1]fsr1
 13799                           
 13800                           ;battery_charger.c: 47: }
 13801                           ;battery_charger.c: 48: }
 13802  0117  0008               	return
 13803  0118                     l2943:	
 13804                           
 13805                           ;battery_charger.c: 49: else if(batteryState[z]==CHARGE)
 13806  0118  0843               	movf	Battery_State_Machine@z,w
 13807  0119  3E64               	addlw	(low (_batteryState| 0))& (0+255)
 13808  011A  0086               	movwf	6
 13809  011B  0187               	clrf	7
 13810  011C  3004               	movlw	4
 13811  011D  0601               	xorwf	1,w
 13812  011E  1D03               	btfss	3,2
 13813  011F  29DA               	goto	l2963
 13814                           
 13815                           ;battery_charger.c: 50: {
 13816                           ;battery_charger.c: 51: Vref[z]=1425+(int16_t)((250-batteryTemp)*.24);
 13817  0120  096C               	comf	_batteryTemp,w
 13818  0121  00BE               	movwf	??_Battery_State_Machine
 13819  0122  096D               	comf	_batteryTemp+1,w
 13820  0123  00BF               	movwf	??_Battery_State_Machine+1
 13821  0124  0ABE               	incf	??_Battery_State_Machine,f
 13822  0125  1903               	skipnz
 13823  0126  0ABF               	incf	??_Battery_State_Machine+1,f
 13824  0127  083E               	movf	??_Battery_State_Machine,w
 13825  0128  3EFA               	addlw	250
 13826  0129  00F8               	movwf	___awtoft@c
 13827  012A  3000               	movlw	0
 13828  012B  3D3F               	addwfc	??_Battery_State_Machine+1,w
 13829  012C  00F9               	movwf	___awtoft@c+1
 13830  012D  3193  2366  3180   	fcall	___awtoft
 13831  0130  0878               	movf	?___awtoft,w
 13832  0131  0020               	movlb	0	; select bank0
 13833  0132  00A3               	movwf	___ftmul@f2
 13834  0133  0879               	movf	?___awtoft+1,w
 13835  0134  00A4               	movwf	___ftmul@f2+1
 13836  0135  087A               	movf	?___awtoft+2,w
 13837  0136  00A5               	movwf	___ftmul@f2+2
 13838  0137  30C3               	movlw	195
 13839  0138  00A0               	movwf	___ftmul@f1
 13840  0139  3075               	movlw	117
 13841  013A  00A1               	movwf	___ftmul@f1+1
 13842  013B  303E               	movlw	62
 13843  013C  00A2               	movwf	___ftmul@f1+2
 13844  013D  318A  22F2  3180   	fcall	___ftmul
 13845  0140  0020               	movlb	0	; select bank0
 13846  0141  0820               	movf	?___ftmul,w
 13847  0142  00B0               	movwf	___fttol@f1
 13848  0143  0821               	movf	?___ftmul+1,w
 13849  0144  00B1               	movwf	___fttol@f1+1
 13850  0145  0822               	movf	?___ftmul+2,w
 13851  0146  00B2               	movwf	___fttol@f1+2
 13852  0147  3189  2112  3180   	fcall	___fttol
 13853  014A  0020               	movlb	0	; select bank0
 13854  014B  0830               	movf	?___fttol,w
 13855  014C  3E91               	addlw	145
 13856  014D  00C0               	movwf	??_Battery_State_Machine+2
 13857  014E  3005               	movlw	5
 13858  014F  3D31               	addwfc	?___fttol+1,w
 13859  0150  00C1               	movwf	??_Battery_State_Machine+3
 13860  0151  3543               	lslf	Battery_State_Machine@z,w
 13861  0152  3E5A               	addlw	(low (_Vref| 0))& (0+255)
 13862  0153  0086               	movwf	6
 13863  0154  0187               	clrf	7
 13864  0155  0840               	movf	??_Battery_State_Machine+2,w
 13865  0156  3FC0               	movwi [0]fsr1
 13866  0157  0841               	movf	??_Battery_State_Machine+3,w
 13867  0158  3FC1               	movwi [1]fsr1
 13868                           
 13869                           ;battery_charger.c: 52: if(!(Imode[z]))
 13870  0159  0843               	movf	Battery_State_Machine@z,w
 13871  015A  3E62               	addlw	(low (_Imode| 0))& (0+255)
 13872  015B  0086               	movwf	6
 13873  015C  0187               	clrf	7
 13874  015D  0801               	movf	1,w
 13875  015E  1D03               	btfss	3,2
 13876  015F  29C1               	goto	l2959
 13877                           
 13878                           ;battery_charger.c: 53: {
 13879                           ;battery_charger.c: 54: if(current[z] < Imin[z])
 13880  0160  3543               	lslf	Battery_State_Machine@z,w
 13881  0161  3ECC               	addlw	(low (_Imin| 0))& (0+255)
 13882  0162  0086               	movwf	6
 13883  0163  0187               	clrf	7
 13884  0164  3F40               	moviw [0]fsr1
 13885  0165  00BE               	movwf	??_Battery_State_Machine
 13886  0166  3F41               	moviw [1]fsr1
 13887  0167  00BF               	movwf	??_Battery_State_Machine+1
 13888  0168  3543               	lslf	Battery_State_Machine@z,w
 13889  0169  3EB8               	addlw	(low (_current| 0))& (0+255)
 13890  016A  0086               	movwf	6
 13891  016B  0187               	clrf	7
 13892  016C  3F40               	moviw [0]fsr1
 13893  016D  00C0               	movwf	??_Battery_State_Machine+2
 13894  016E  3F41               	moviw [1]fsr1
 13895  016F  00C1               	movwf	??_Battery_State_Machine+3
 13896  0170  0841               	movf	??_Battery_State_Machine+3,w
 13897  0171  3A80               	xorlw	128
 13898  0172  00C2               	movwf	??_Battery_State_Machine+4
 13899  0173  083F               	movf	??_Battery_State_Machine+1,w
 13900  0174  3A80               	xorlw	128
 13901  0175  0242               	subwf	??_Battery_State_Machine+4,w
 13902  0176  1D03               	skipz
 13903  0177  297A               	goto	u3315
 13904  0178  083E               	movf	??_Battery_State_Machine,w
 13905  0179  0240               	subwf	??_Battery_State_Machine+2,w
 13906  017A                     u3315:	
 13907  017A  1803               	skipnc
 13908  017B  29A7               	goto	l2955
 13909                           
 13910                           ;battery_charger.c: 55: {
 13911                           ;battery_charger.c: 56: IminCount[z]-=2;
 13912  017C  0020               	movlb	0	; select bank0
 13913  017D  3543               	lslf	Battery_State_Machine@z,w
 13914  017E  3EC8               	addlw	(low (_IminCount| 0))& (0+255)
 13915  017F  0086               	movwf	6
 13916  0180  0187               	clrf	7
 13917  0181  3002               	movlw	2
 13918  0182  0281               	subwf	1,f
 13919  0183  3141               	addfsr 1,1
 13920  0184  3000               	movlw	0
 13921  0185  3B81               	subwfb	1,f
 13922  0186  317F               	addfsr 1,-1
 13923                           
 13924                           ;battery_charger.c: 57: if(IminCount[z]<10)
 13925  0187  3543               	lslf	Battery_State_Machine@z,w
 13926  0188  3EC8               	addlw	(low (_IminCount| 0))& (0+255)
 13927  0189  0086               	movwf	6
 13928  018A  0187               	clrf	7
 13929  018B  3F40               	moviw [0]fsr1
 13930  018C  00BE               	movwf	??_Battery_State_Machine
 13931  018D  3F41               	moviw [1]fsr1
 13932  018E  00BF               	movwf	??_Battery_State_Machine+1
 13933  018F  3000               	movlw	0
 13934  0190  023F               	subwf	??_Battery_State_Machine+1,w
 13935  0191  300A               	movlw	10
 13936  0192  1903               	skipnz
 13937  0193  023E               	subwf	??_Battery_State_Machine,w
 13938  0194  1803               	skipnc
 13939  0195  0008               	return
 13940                           
 13941                           ;battery_charger.c: 58: {
 13942                           ;battery_charger.c: 59: batteryState[z] = FLOAT;
 13943  0196  3005               	movlw	5
 13944  0197  00BE               	movwf	??_Battery_State_Machine
 13945  0198  0843               	movf	Battery_State_Machine@z,w
 13946  0199  3E64               	addlw	(low (_batteryState| 0))& (0+255)
 13947  019A  0086               	movwf	6
 13948  019B  0187               	clrf	7
 13949  019C  083E               	movf	??_Battery_State_Machine,w
 13950  019D  0081               	movwf	1
 13951                           
 13952                           ;battery_charger.c: 60: IminCount[z]=10;
 13953  019E  3543               	lslf	Battery_State_Machine@z,w
 13954  019F  3EC8               	addlw	(low (_IminCount| 0))& (0+255)
 13955  01A0  0086               	movwf	6
 13956  01A1  0187               	clrf	7
 13957  01A2  300A               	movlw	10
 13958  01A3  3FC0               	movwi [0]fsr1
 13959  01A4  3000               	movlw	0
 13960  01A5  3FC1               	movwi [1]fsr1
 13961                           
 13962                           ;battery_charger.c: 61: }
 13963                           ;battery_charger.c: 62: }
 13964  01A6  0008               	return
 13965  01A7                     l2955:	
 13966                           
 13967                           ;battery_charger.c: 63: else
 13968                           ;battery_charger.c: 64: {
 13969                           ;battery_charger.c: 65: if(IminCount[z]<600)IminCount[z]+=1;
 13970  01A7  0020               	movlb	0	; select bank0
 13971  01A8  3543               	lslf	Battery_State_Machine@z,w
 13972  01A9  3EC8               	addlw	(low (_IminCount| 0))& (0+255)
 13973  01AA  0086               	movwf	6
 13974  01AB  0187               	clrf	7
 13975  01AC  3F40               	moviw [0]fsr1
 13976  01AD  00BE               	movwf	??_Battery_State_Machine
 13977  01AE  3F41               	moviw [1]fsr1
 13978  01AF  00BF               	movwf	??_Battery_State_Machine+1
 13979  01B0  3002               	movlw	2
 13980  01B1  023F               	subwf	??_Battery_State_Machine+1,w
 13981  01B2  3058               	movlw	88
 13982  01B3  1903               	skipnz
 13983  01B4  023E               	subwf	??_Battery_State_Machine,w
 13984  01B5  1803               	skipnc
 13985  01B6  0008               	return
 13986  01B7  3543               	lslf	Battery_State_Machine@z,w
 13987  01B8  3EC8               	addlw	(low (_IminCount| 0))& (0+255)
 13988  01B9  0086               	movwf	6
 13989  01BA  0187               	clrf	7
 13990  01BB  3001               	movlw	1
 13991  01BC  0781               	addwf	1,f
 13992  01BD  3141               	addfsr 1,1
 13993  01BE  1803               	skipnc
 13994  01BF  0A81               	incf	1,f
 13995                           
 13996                           ;battery_charger.c: 66: }
 13997                           ;battery_charger.c: 67: }
 13998  01C0  0008               	return
 13999  01C1                     l2959:	
 14000                           
 14001                           ;battery_charger.c: 68: else if(IminCount[z]<600)IminCount[z]+=1;
 14002  01C1  3543               	lslf	Battery_State_Machine@z,w
 14003  01C2  3EC8               	addlw	(low (_IminCount| 0))& (0+255)
 14004  01C3  0086               	movwf	6
 14005  01C4  0187               	clrf	7
 14006  01C5  3F40               	moviw [0]fsr1
 14007  01C6  00BE               	movwf	??_Battery_State_Machine
 14008  01C7  3F41               	moviw [1]fsr1
 14009  01C8  00BF               	movwf	??_Battery_State_Machine+1
 14010  01C9  3002               	movlw	2
 14011  01CA  023F               	subwf	??_Battery_State_Machine+1,w
 14012  01CB  3058               	movlw	88
 14013  01CC  1903               	skipnz
 14014  01CD  023E               	subwf	??_Battery_State_Machine,w
 14015  01CE  1803               	skipnc
 14016  01CF  0008               	return
 14017  01D0  3543               	lslf	Battery_State_Machine@z,w
 14018  01D1  3EC8               	addlw	(low (_IminCount| 0))& (0+255)
 14019  01D2  0086               	movwf	6
 14020  01D3  0187               	clrf	7
 14021  01D4  3001               	movlw	1
 14022  01D5  0781               	addwf	1,f
 14023  01D6  3141               	addfsr 1,1
 14024  01D7  1803               	skipnc
 14025  01D8  0A81               	incf	1,f
 14026                           
 14027                           ;battery_charger.c: 69: }
 14028  01D9  0008               	return
 14029  01DA                     l2963:	
 14030                           
 14031                           ;battery_charger.c: 70: else if(batteryState[z] == FLOAT)
 14032  01DA  0843               	movf	Battery_State_Machine@z,w
 14033  01DB  3E64               	addlw	(low (_batteryState| 0))& (0+255)
 14034  01DC  0086               	movwf	6
 14035  01DD  0187               	clrf	7
 14036  01DE  3005               	movlw	5
 14037  01DF  0601               	xorwf	1,w
 14038  01E0  1D03               	btfss	3,2
 14039  01E1  2A28               	goto	l2971
 14040                           
 14041                           ;battery_charger.c: 71: {
 14042                           ;battery_charger.c: 72: Vref[z]=1350+(int16_t)((250-batteryTemp)*.24);
 14043  01E2  096C               	comf	_batteryTemp,w
 14044  01E3  00BE               	movwf	??_Battery_State_Machine
 14045  01E4  096D               	comf	_batteryTemp+1,w
 14046  01E5  00BF               	movwf	??_Battery_State_Machine+1
 14047  01E6  0ABE               	incf	??_Battery_State_Machine,f
 14048  01E7  1903               	skipnz
 14049  01E8  0ABF               	incf	??_Battery_State_Machine+1,f
 14050  01E9  083E               	movf	??_Battery_State_Machine,w
 14051  01EA  3EFA               	addlw	250
 14052  01EB  00F8               	movwf	___awtoft@c
 14053  01EC  3000               	movlw	0
 14054  01ED  3D3F               	addwfc	??_Battery_State_Machine+1,w
 14055  01EE  00F9               	movwf	___awtoft@c+1
 14056  01EF  3193  2366  3180   	fcall	___awtoft
 14057  01F2  0878               	movf	?___awtoft,w
 14058  01F3  0020               	movlb	0	; select bank0
 14059  01F4  00A3               	movwf	___ftmul@f2
 14060  01F5  0879               	movf	?___awtoft+1,w
 14061  01F6  00A4               	movwf	___ftmul@f2+1
 14062  01F7  087A               	movf	?___awtoft+2,w
 14063  01F8  00A5               	movwf	___ftmul@f2+2
 14064  01F9  30C3               	movlw	195
 14065  01FA  00A0               	movwf	___ftmul@f1
 14066  01FB  3075               	movlw	117
 14067  01FC  00A1               	movwf	___ftmul@f1+1
 14068  01FD  303E               	movlw	62
 14069  01FE  00A2               	movwf	___ftmul@f1+2
 14070  01FF  318A  22F2  3180   	fcall	___ftmul
 14071  0202  0020               	movlb	0	; select bank0
 14072  0203  0820               	movf	?___ftmul,w
 14073  0204  00B0               	movwf	___fttol@f1
 14074  0205  0821               	movf	?___ftmul+1,w
 14075  0206  00B1               	movwf	___fttol@f1+1
 14076  0207  0822               	movf	?___ftmul+2,w
 14077  0208  00B2               	movwf	___fttol@f1+2
 14078  0209  3189  2112         	fcall	___fttol
 14079  020B  0020               	movlb	0	; select bank0
 14080  020C  0830               	movf	?___fttol,w
 14081  020D  3E46               	addlw	70
 14082  020E  00C0               	movwf	??_Battery_State_Machine+2
 14083  020F  3005               	movlw	5
 14084  0210  3D31               	addwfc	?___fttol+1,w
 14085  0211  00C1               	movwf	??_Battery_State_Machine+3
 14086  0212  3543               	lslf	Battery_State_Machine@z,w
 14087  0213  3E5A               	addlw	(low (_Vref| 0))& (0+255)
 14088  0214  0086               	movwf	6
 14089  0215  0187               	clrf	7
 14090  0216  0840               	movf	??_Battery_State_Machine+2,w
 14091  0217  3FC0               	movwi [0]fsr1
 14092  0218  0841               	movf	??_Battery_State_Machine+3,w
 14093  0219  3FC1               	movwi [1]fsr1
 14094                           
 14095                           ;battery_charger.c: 73: Iref[z]=15;
 14096  021A  3543               	lslf	Battery_State_Machine@z,w
 14097  021B  3EC4               	addlw	(low (_Iref| 0))& (0+255)
 14098  021C  0086               	movwf	6
 14099  021D  0187               	clrf	7
 14100  021E  300F               	movlw	15
 14101  021F  3FC0               	movwi [0]fsr1
 14102  0220  3000               	movlw	0
 14103  0221  3FC1               	movwi [1]fsr1
 14104                           
 14105                           ;battery_charger.c: 74: Imode[z]=0;
 14106  0222  0843               	movf	Battery_State_Machine@z,w
 14107  0223  3E62               	addlw	(low (_Imode| 0))& (0+255)
 14108  0224  0086               	movwf	6
 14109  0225  0187               	clrf	7
 14110  0226  0181               	clrf	1
 14111                           
 14112                           ;battery_charger.c: 75: }
 14113  0227  0008               	return
 14114  0228                     l2971:	
 14115                           
 14116                           ;battery_charger.c: 76: else
 14117                           ;battery_charger.c: 77: if(batteryState[z] == FAULT)
 14118  0228  0843               	movf	Battery_State_Machine@z,w
 14119  0229  3E64               	addlw	(low (_batteryState| 0))& (0+255)
 14120  022A  0086               	movwf	6
 14121  022B  0187               	clrf	7
 14122  022C  0301               	decf	1,w
 14123  022D  1D03               	btfss	3,2
 14124  022E  0008               	return
 14125                           
 14126                           ;battery_charger.c: 78: {
 14127                           ;battery_charger.c: 79: batteryState[z]=PRECHARGE;
 14128  022F  3003               	movlw	3
 14129  0230  00BE               	movwf	??_Battery_State_Machine
 14130  0231  0843               	movf	Battery_State_Machine@z,w
 14131  0232  3E64               	addlw	(low (_batteryState| 0))& (0+255)
 14132  0233  0086               	movwf	6
 14133  0234  0187               	clrf	7
 14134  0235  083E               	movf	??_Battery_State_Machine,w
 14135  0236  0081               	movwf	1
 14136  0237  0008               	return
 14137  0238                     __end_of_Battery_State_Machine:	
 14138                           
 14139                           	psect	text40
 14140  0912                     __ptext40:	
 14141 ;; *************** function ___fttol *****************
 14142 ;; Defined at:
 14143 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
 14144 ;; Parameters:    Size  Location     Type
 14145 ;;  f1              3   16[BANK0 ] float 
 14146 ;; Auto vars:     Size  Location     Type
 14147 ;;  lval            4   25[BANK0 ] unsigned long 
 14148 ;;  exp1            1   29[BANK0 ] unsigned char 
 14149 ;;  sign1           1   24[BANK0 ] unsigned char 
 14150 ;; Return value:  Size  Location     Type
 14151 ;;                  4   16[BANK0 ] long 
 14152 ;; Registers used:
 14153 ;;		wreg, status,2, status,0
 14154 ;; Tracked objects:
 14155 ;;		On entry : 0/0
 14156 ;;		On exit  : 0/0
 14157 ;;		Unchanged: 0/0
 14158 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14159 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14160 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14161 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14162 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14163 ;;Total ram usage:       14 bytes
 14164 ;; Hardware stack levels used:    1
 14165 ;; This function calls:
 14166 ;;		Nothing
 14167 ;; This function is called by:
 14168 ;;		_tempCalc
 14169 ;;		_main
 14170 ;;		_calculateCurrent0
 14171 ;;		_calculateCurrent1
 14172 ;;		_calculateCurrent2
 14173 ;;		_calculateCurrent3
 14174 ;;		_Init_Battery_State_Machine
 14175 ;;		_Battery_State_Machine
 14176 ;;		_cc_cv_mode
 14177 ;; This function uses a non-reentrant model
 14178 ;;
 14179                           
 14180                           
 14181                           ;psect for function ___fttol
 14182  0912                     ___fttol:	
 14183                           
 14184                           ;incstack = 0
 14185                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 14186  0912  0020               	movlb	0	; select bank0
 14187  0913  0830               	movf	___fttol@f1,w
 14188  0914  00B4               	movwf	??___fttol
 14189  0915  0831               	movf	___fttol@f1+1,w
 14190  0916  00B5               	movwf	??___fttol+1
 14191  0917  0832               	movf	___fttol@f1+2,w
 14192  0918  00B6               	movwf	??___fttol+2
 14193  0919  1003               	clrc
 14194  091A  0D35               	rlf	??___fttol+1,w
 14195  091B  0D36               	rlf	??___fttol+2,w
 14196  091C  00B7               	movwf	??___fttol+3
 14197  091D  0837               	movf	??___fttol+3,w
 14198  091E  00BD               	movwf	___fttol@exp1
 14199  091F  083D               	movf	___fttol@exp1,w
 14200  0920  1D03               	btfss	3,2
 14201  0921  292B               	goto	l2491
 14202  0922  3000               	movlw	0
 14203  0923  00B3               	movwf	?___fttol+3
 14204  0924  3000               	movlw	0
 14205  0925  00B2               	movwf	?___fttol+2
 14206  0926  3000               	movlw	0
 14207  0927  00B1               	movwf	?___fttol+1
 14208  0928  3000               	movlw	0
 14209  0929  00B0               	movwf	?___fttol
 14210  092A  0008               	return
 14211  092B                     l2491:	
 14212  092B  0830               	movf	___fttol@f1,w
 14213  092C  00B4               	movwf	??___fttol
 14214  092D  0831               	movf	___fttol@f1+1,w
 14215  092E  00B5               	movwf	??___fttol+1
 14216  092F  0832               	movf	___fttol@f1+2,w
 14217  0930  00B6               	movwf	??___fttol+2
 14218  0931  3017               	movlw	23
 14219  0932                     u2655:	
 14220  0932  36B6               	lsrf	??___fttol+2,f
 14221  0933  0CB5               	rrf	??___fttol+1,f
 14222  0934  0CB4               	rrf	??___fttol,f
 14223  0935  0B89               	decfsz	9,f
 14224  0936  2932               	goto	u2655
 14225  0937  0834               	movf	??___fttol,w
 14226  0938  00B7               	movwf	??___fttol+3
 14227  0939  0837               	movf	??___fttol+3,w
 14228  093A  00B8               	movwf	___fttol@sign1
 14229  093B  17B1               	bsf	___fttol@f1+1,7
 14230  093C  30FF               	movlw	255
 14231  093D  05B0               	andwf	___fttol@f1,f
 14232  093E  30FF               	movlw	255
 14233  093F  05B1               	andwf	___fttol@f1+1,f
 14234  0940  3000               	movlw	0
 14235  0941  05B2               	andwf	___fttol@f1+2,f
 14236  0942  0830               	movf	___fttol@f1,w
 14237  0943  00B9               	movwf	___fttol@lval
 14238  0944  0831               	movf	___fttol@f1+1,w
 14239  0945  00BA               	movwf	___fttol@lval+1
 14240  0946  0832               	movf	___fttol@f1+2,w
 14241  0947  00BB               	movwf	___fttol@lval+2
 14242  0948  01BC               	clrf	___fttol@lval+3
 14243  0949  308E               	movlw	142
 14244  094A  02BD               	subwf	___fttol@exp1,f
 14245  094B  1FBD               	btfss	___fttol@exp1,7
 14246  094C  2969               	goto	l2511
 14247  094D  083D               	movf	___fttol@exp1,w
 14248  094E  3A80               	xorlw	128
 14249  094F  3E8F               	addlw	143
 14250  0950  1803               	skipnc
 14251  0951  295B               	goto	l2509
 14252  0952  3000               	movlw	0
 14253  0953  00B3               	movwf	?___fttol+3
 14254  0954  3000               	movlw	0
 14255  0955  00B2               	movwf	?___fttol+2
 14256  0956  3000               	movlw	0
 14257  0957  00B1               	movwf	?___fttol+1
 14258  0958  3000               	movlw	0
 14259  0959  00B0               	movwf	?___fttol
 14260  095A  0008               	return
 14261  095B                     l2509:	
 14262  095B  3001               	movlw	1
 14263  095C                     u2685:	
 14264  095C  36BC               	lsrf	___fttol@lval+3,f
 14265  095D  0CBB               	rrf	___fttol@lval+2,f
 14266  095E  0CBA               	rrf	___fttol@lval+1,f
 14267  095F  0CB9               	rrf	___fttol@lval,f
 14268  0960  0B89               	decfsz	9,f
 14269  0961  295C               	goto	u2685
 14270  0962  3001               	movlw	1
 14271  0963  00B4               	movwf	??___fttol
 14272  0964  0834               	movf	??___fttol,w
 14273  0965  07BD               	addwf	___fttol@exp1,f
 14274  0966  1903               	btfsc	3,2
 14275  0967  2982               	goto	l2519
 14276  0968  295B               	goto	l2509
 14277  0969                     l2511:	
 14278  0969  3018               	movlw	24
 14279  096A  023D               	subwf	___fttol@exp1,w
 14280  096B  1C03               	skipc
 14281  096C  297F               	goto	l857
 14282  096D  3000               	movlw	0
 14283  096E  00B3               	movwf	?___fttol+3
 14284  096F  3000               	movlw	0
 14285  0970  00B2               	movwf	?___fttol+2
 14286  0971  3000               	movlw	0
 14287  0972  00B1               	movwf	?___fttol+1
 14288  0973  3000               	movlw	0
 14289  0974  00B0               	movwf	?___fttol
 14290  0975  0008               	return
 14291  0976                     l2517:	
 14292  0976  3001               	movlw	1
 14293  0977                     u2715:	
 14294  0977  35B9               	lslf	___fttol@lval,f
 14295  0978  0DBA               	rlf	___fttol@lval+1,f
 14296  0979  0DBB               	rlf	___fttol@lval+2,f
 14297  097A  0DBC               	rlf	___fttol@lval+3,f
 14298  097B  0B89               	decfsz	9,f
 14299  097C  2977               	goto	u2715
 14300  097D  3001               	movlw	1
 14301  097E  02BD               	subwf	___fttol@exp1,f
 14302  097F                     l857:	
 14303  097F  083D               	movf	___fttol@exp1,w
 14304  0980  1D03               	btfss	3,2
 14305  0981  2976               	goto	l2517
 14306  0982                     l2519:	
 14307  0982  0838               	movf	___fttol@sign1,w
 14308  0983  1903               	btfsc	3,2
 14309  0984  2990               	goto	l2523
 14310  0985  09B9               	comf	___fttol@lval,f
 14311  0986  09BA               	comf	___fttol@lval+1,f
 14312  0987  09BB               	comf	___fttol@lval+2,f
 14313  0988  09BC               	comf	___fttol@lval+3,f
 14314  0989  0AB9               	incf	___fttol@lval,f
 14315  098A  1903               	skipnz
 14316  098B  0ABA               	incf	___fttol@lval+1,f
 14317  098C  1903               	skipnz
 14318  098D  0ABB               	incf	___fttol@lval+2,f
 14319  098E  1903               	skipnz
 14320  098F  0ABC               	incf	___fttol@lval+3,f
 14321  0990                     l2523:	
 14322  0990  083C               	movf	___fttol@lval+3,w
 14323  0991  00B3               	movwf	?___fttol+3
 14324  0992  083B               	movf	___fttol@lval+2,w
 14325  0993  00B2               	movwf	?___fttol+2
 14326  0994  083A               	movf	___fttol@lval+1,w
 14327  0995  00B1               	movwf	?___fttol+1
 14328  0996  0839               	movf	___fttol@lval,w
 14329  0997  00B0               	movwf	?___fttol
 14330  0998  0008               	return
 14331  0999                     __end_of___fttol:	
 14332                           
 14333                           	psect	text41
 14334  0AF2                     __ptext41:	
 14335 ;; *************** function ___ftmul *****************
 14336 ;; Defined at:
 14337 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
 14338 ;; Parameters:    Size  Location     Type
 14339 ;;  f1              3    0[BANK0 ] float 
 14340 ;;  f2              3    3[BANK0 ] float 
 14341 ;; Auto vars:     Size  Location     Type
 14342 ;;  f3_as_produc    3   11[BANK0 ] unsigned um
 14343 ;;  sign            1   15[BANK0 ] unsigned char 
 14344 ;;  cntr            1   14[BANK0 ] unsigned char 
 14345 ;;  exp             1   10[BANK0 ] unsigned char 
 14346 ;; Return value:  Size  Location     Type
 14347 ;;                  3    0[BANK0 ] float 
 14348 ;; Registers used:
 14349 ;;		wreg, status,2, status,0, pclath, cstack
 14350 ;; Tracked objects:
 14351 ;;		On entry : 0/0
 14352 ;;		On exit  : 0/0
 14353 ;;		Unchanged: 0/0
 14354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14355 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14356 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14357 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14358 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14359 ;;Total ram usage:       16 bytes
 14360 ;; Hardware stack levels used:    1
 14361 ;; Hardware stack levels required when called:    1
 14362 ;; This function calls:
 14363 ;;		___ftpack
 14364 ;; This function is called by:
 14365 ;;		_Init_Battery_State_Machine
 14366 ;;		_Battery_State_Machine
 14367 ;;		_cc_cv_mode
 14368 ;;		_tempCalc
 14369 ;;		_log
 14370 ;;		_eval_poly
 14371 ;; This function uses a non-reentrant model
 14372 ;;
 14373                           
 14374                           
 14375                           ;psect for function ___ftmul
 14376  0AF2                     ___ftmul:	
 14377                           
 14378                           ;incstack = 0
 14379                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 14380  0AF2  0020               	movlb	0	; select bank0
 14381  0AF3  0820               	movf	___ftmul@f1,w
 14382  0AF4  00A6               	movwf	??___ftmul
 14383  0AF5  0821               	movf	___ftmul@f1+1,w
 14384  0AF6  00A7               	movwf	??___ftmul+1
 14385  0AF7  0822               	movf	___ftmul@f1+2,w
 14386  0AF8  00A8               	movwf	??___ftmul+2
 14387  0AF9  1003               	clrc
 14388  0AFA  0D27               	rlf	??___ftmul+1,w
 14389  0AFB  0D28               	rlf	??___ftmul+2,w
 14390  0AFC  00A9               	movwf	??___ftmul+3
 14391  0AFD  0829               	movf	??___ftmul+3,w
 14392  0AFE  00AA               	movwf	___ftmul@exp
 14393  0AFF  082A               	movf	___ftmul@exp,w
 14394  0B00  1D03               	btfss	3,2
 14395  0B01  2B09               	goto	l2407
 14396  0B02  3000               	movlw	0
 14397  0B03  00A0               	movwf	?___ftmul
 14398  0B04  3000               	movlw	0
 14399  0B05  00A1               	movwf	?___ftmul+1
 14400  0B06  3000               	movlw	0
 14401  0B07  00A2               	movwf	?___ftmul+2
 14402  0B08  0008               	return
 14403  0B09                     l2407:	
 14404  0B09  0823               	movf	___ftmul@f2,w
 14405  0B0A  00A6               	movwf	??___ftmul
 14406  0B0B  0824               	movf	___ftmul@f2+1,w
 14407  0B0C  00A7               	movwf	??___ftmul+1
 14408  0B0D  0825               	movf	___ftmul@f2+2,w
 14409  0B0E  00A8               	movwf	??___ftmul+2
 14410  0B0F  1003               	clrc
 14411  0B10  0D27               	rlf	??___ftmul+1,w
 14412  0B11  0D28               	rlf	??___ftmul+2,w
 14413  0B12  00A9               	movwf	??___ftmul+3
 14414  0B13  0829               	movf	??___ftmul+3,w
 14415  0B14  00AF               	movwf	___ftmul@sign
 14416  0B15  082F               	movf	___ftmul@sign,w
 14417  0B16  1D03               	btfss	3,2
 14418  0B17  2B1F               	goto	l2413
 14419  0B18  3000               	movlw	0
 14420  0B19  00A0               	movwf	?___ftmul
 14421  0B1A  3000               	movlw	0
 14422  0B1B  00A1               	movwf	?___ftmul+1
 14423  0B1C  3000               	movlw	0
 14424  0B1D  00A2               	movwf	?___ftmul+2
 14425  0B1E  0008               	return
 14426  0B1F                     l2413:	
 14427  0B1F  082F               	movf	___ftmul@sign,w
 14428  0B20  3E7B               	addlw	123
 14429  0B21  00A6               	movwf	??___ftmul
 14430  0B22  0826               	movf	??___ftmul,w
 14431  0B23  07AA               	addwf	___ftmul@exp,f
 14432  0B24  0820               	movf	___ftmul@f1,w
 14433  0B25  00A6               	movwf	??___ftmul
 14434  0B26  0821               	movf	___ftmul@f1+1,w
 14435  0B27  00A7               	movwf	??___ftmul+1
 14436  0B28  0822               	movf	___ftmul@f1+2,w
 14437  0B29  00A8               	movwf	??___ftmul+2
 14438  0B2A  3010               	movlw	16
 14439  0B2B                     u2505:	
 14440  0B2B  36A8               	lsrf	??___ftmul+2,f
 14441  0B2C  0CA7               	rrf	??___ftmul+1,f
 14442  0B2D  0CA6               	rrf	??___ftmul,f
 14443  0B2E  0B89               	decfsz	9,f
 14444  0B2F  2B2B               	goto	u2505
 14445  0B30  0826               	movf	??___ftmul,w
 14446  0B31  00A9               	movwf	??___ftmul+3
 14447  0B32  0829               	movf	??___ftmul+3,w
 14448  0B33  00AF               	movwf	___ftmul@sign
 14449  0B34  0823               	movf	___ftmul@f2,w
 14450  0B35  00A6               	movwf	??___ftmul
 14451  0B36  0824               	movf	___ftmul@f2+1,w
 14452  0B37  00A7               	movwf	??___ftmul+1
 14453  0B38  0825               	movf	___ftmul@f2+2,w
 14454  0B39  00A8               	movwf	??___ftmul+2
 14455  0B3A  3010               	movlw	16
 14456  0B3B                     u2515:	
 14457  0B3B  36A8               	lsrf	??___ftmul+2,f
 14458  0B3C  0CA7               	rrf	??___ftmul+1,f
 14459  0B3D  0CA6               	rrf	??___ftmul,f
 14460  0B3E  0B89               	decfsz	9,f
 14461  0B3F  2B3B               	goto	u2515
 14462  0B40  0826               	movf	??___ftmul,w
 14463  0B41  00A9               	movwf	??___ftmul+3
 14464  0B42  0829               	movf	??___ftmul+3,w
 14465  0B43  06AF               	xorwf	___ftmul@sign,f
 14466  0B44  3080               	movlw	128
 14467  0B45  00A6               	movwf	??___ftmul
 14468  0B46  0826               	movf	??___ftmul,w
 14469  0B47  05AF               	andwf	___ftmul@sign,f
 14470  0B48  17A1               	bsf	___ftmul@f1+1,7
 14471  0B49  17A4               	bsf	___ftmul@f2+1,7
 14472  0B4A  30FF               	movlw	255
 14473  0B4B  05A3               	andwf	___ftmul@f2,f
 14474  0B4C  30FF               	movlw	255
 14475  0B4D  05A4               	andwf	___ftmul@f2+1,f
 14476  0B4E  3000               	movlw	0
 14477  0B4F  05A5               	andwf	___ftmul@f2+2,f
 14478  0B50  3000               	movlw	0
 14479  0B51  00AB               	movwf	___ftmul@f3_as_product
 14480  0B52  3000               	movlw	0
 14481  0B53  00AC               	movwf	___ftmul@f3_as_product+1
 14482  0B54  3000               	movlw	0
 14483  0B55  00AD               	movwf	___ftmul@f3_as_product+2
 14484  0B56  3007               	movlw	7
 14485  0B57  00A6               	movwf	??___ftmul
 14486  0B58  0826               	movf	??___ftmul,w
 14487  0B59  00AE               	movwf	___ftmul@cntr
 14488  0B5A                     l2425:	
 14489  0B5A  1C20               	btfss	___ftmul@f1,0
 14490  0B5B  2B62               	goto	l2429
 14491  0B5C  0823               	movf	___ftmul@f2,w
 14492  0B5D  07AB               	addwf	___ftmul@f3_as_product,f
 14493  0B5E  0824               	movf	___ftmul@f2+1,w
 14494  0B5F  3DAC               	addwfc	___ftmul@f3_as_product+1,f
 14495  0B60  0825               	movf	___ftmul@f2+2,w
 14496  0B61  3DAD               	addwfc	___ftmul@f3_as_product+2,f
 14497  0B62                     l2429:	
 14498  0B62  3001               	movlw	1
 14499  0B63                     u2535:	
 14500  0B63  36A2               	lsrf	___ftmul@f1+2,f
 14501  0B64  0CA1               	rrf	___ftmul@f1+1,f
 14502  0B65  0CA0               	rrf	___ftmul@f1,f
 14503  0B66  0B89               	decfsz	9,f
 14504  0B67  2B63               	goto	u2535
 14505  0B68  3001               	movlw	1
 14506  0B69                     u2545:	
 14507  0B69  35A3               	lslf	___ftmul@f2,f
 14508  0B6A  0DA4               	rlf	___ftmul@f2+1,f
 14509  0B6B  0DA5               	rlf	___ftmul@f2+2,f
 14510  0B6C  0B89               	decfsz	9,f
 14511  0B6D  2B69               	goto	u2545
 14512  0B6E  3001               	movlw	1
 14513  0B6F  02AE               	subwf	___ftmul@cntr,f
 14514  0B70  1D03               	btfss	3,2
 14515  0B71  2B5A               	goto	l2425
 14516  0B72  3009               	movlw	9
 14517  0B73  00A6               	movwf	??___ftmul
 14518  0B74  0826               	movf	??___ftmul,w
 14519  0B75  00AE               	movwf	___ftmul@cntr
 14520  0B76                     l2437:	
 14521  0B76  1C20               	btfss	___ftmul@f1,0
 14522  0B77  2B7E               	goto	l2441
 14523  0B78  0823               	movf	___ftmul@f2,w
 14524  0B79  07AB               	addwf	___ftmul@f3_as_product,f
 14525  0B7A  0824               	movf	___ftmul@f2+1,w
 14526  0B7B  3DAC               	addwfc	___ftmul@f3_as_product+1,f
 14527  0B7C  0825               	movf	___ftmul@f2+2,w
 14528  0B7D  3DAD               	addwfc	___ftmul@f3_as_product+2,f
 14529  0B7E                     l2441:	
 14530  0B7E  3001               	movlw	1
 14531  0B7F                     u2575:	
 14532  0B7F  36A2               	lsrf	___ftmul@f1+2,f
 14533  0B80  0CA1               	rrf	___ftmul@f1+1,f
 14534  0B81  0CA0               	rrf	___ftmul@f1,f
 14535  0B82  0B89               	decfsz	9,f
 14536  0B83  2B7F               	goto	u2575
 14537  0B84  3001               	movlw	1
 14538  0B85                     u2585:	
 14539  0B85  36AD               	lsrf	___ftmul@f3_as_product+2,f
 14540  0B86  0CAC               	rrf	___ftmul@f3_as_product+1,f
 14541  0B87  0CAB               	rrf	___ftmul@f3_as_product,f
 14542  0B88  0B89               	decfsz	9,f
 14543  0B89  2B85               	goto	u2585
 14544  0B8A  3001               	movlw	1
 14545  0B8B  02AE               	subwf	___ftmul@cntr,f
 14546  0B8C  1D03               	btfss	3,2
 14547  0B8D  2B76               	goto	l2437
 14548  0B8E  082B               	movf	___ftmul@f3_as_product,w
 14549  0B8F  00F0               	movwf	___ftpack@arg
 14550  0B90  082C               	movf	___ftmul@f3_as_product+1,w
 14551  0B91  00F1               	movwf	___ftpack@arg+1
 14552  0B92  082D               	movf	___ftmul@f3_as_product+2,w
 14553  0B93  00F2               	movwf	___ftpack@arg+2
 14554  0B94  082A               	movf	___ftmul@exp,w
 14555  0B95  00A6               	movwf	??___ftmul
 14556  0B96  0826               	movf	??___ftmul,w
 14557  0B97  00F3               	movwf	___ftpack@exp
 14558  0B98  082F               	movf	___ftmul@sign,w
 14559  0B99  00A7               	movwf	??___ftmul+1
 14560  0B9A  0827               	movf	??___ftmul+1,w
 14561  0B9B  00F4               	movwf	___ftpack@sign
 14562  0B9C  3197  279C         	fcall	___ftpack
 14563  0B9E  0870               	movf	?___ftpack,w
 14564  0B9F  0020               	movlb	0	; select bank0
 14565  0BA0  00A0               	movwf	?___ftmul
 14566  0BA1  0871               	movf	?___ftpack+1,w
 14567  0BA2  00A1               	movwf	?___ftmul+1
 14568  0BA3  0872               	movf	?___ftpack+2,w
 14569  0BA4  00A2               	movwf	?___ftmul+2
 14570  0BA5  0008               	return
 14571  0BA6                     __end_of___ftmul:	
 14572                           
 14573                           	psect	text42
 14574  1366                     __ptext42:	
 14575 ;; *************** function ___awtoft *****************
 14576 ;; Defined at:
 14577 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
 14578 ;; Parameters:    Size  Location     Type
 14579 ;;  c               2    8[COMMON] int 
 14580 ;; Auto vars:     Size  Location     Type
 14581 ;;  sign            1   13[COMMON] unsigned char 
 14582 ;; Return value:  Size  Location     Type
 14583 ;;                  3    8[COMMON] float 
 14584 ;; Registers used:
 14585 ;;		wreg, status,2, status,0, pclath, cstack
 14586 ;; Tracked objects:
 14587 ;;		On entry : 0/0
 14588 ;;		On exit  : 0/0
 14589 ;;		Unchanged: 0/0
 14590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14591 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14592 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14593 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14594 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14595 ;;Total ram usage:        6 bytes
 14596 ;; Hardware stack levels used:    1
 14597 ;; Hardware stack levels required when called:    1
 14598 ;; This function calls:
 14599 ;;		___ftpack
 14600 ;; This function is called by:
 14601 ;;		_Init_Battery_State_Machine
 14602 ;;		_Battery_State_Machine
 14603 ;;		_cc_cv_mode
 14604 ;;		_tempCalc
 14605 ;;		_main
 14606 ;;		_calculateCurrent0
 14607 ;;		_calculateCurrent1
 14608 ;;		_calculateCurrent2
 14609 ;;		_calculateCurrent3
 14610 ;;		_log
 14611 ;; This function uses a non-reentrant model
 14612 ;;
 14613                           
 14614                           
 14615                           ;psect for function ___awtoft
 14616  1366                     ___awtoft:	
 14617                           
 14618                           ;incstack = 0
 14619                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 14620  1366  01FD               	clrf	___awtoft@sign
 14621  1367  1FF9               	btfss	___awtoft@c+1,7
 14622  1368  2B70               	goto	l2461
 14623  1369  09F8               	comf	___awtoft@c,f
 14624  136A  09F9               	comf	___awtoft@c+1,f
 14625  136B  0AF8               	incf	___awtoft@c,f
 14626  136C  1903               	skipnz
 14627  136D  0AF9               	incf	___awtoft@c+1,f
 14628  136E  01FD               	clrf	___awtoft@sign
 14629  136F  0AFD               	incf	___awtoft@sign,f
 14630  1370                     l2461:	
 14631  1370  0878               	movf	___awtoft@c,w
 14632  1371  00F0               	movwf	___ftpack@arg
 14633  1372  0879               	movf	___awtoft@c+1,w
 14634  1373  00F1               	movwf	___ftpack@arg+1
 14635  1374  01F2               	clrf	___ftpack@arg+2
 14636  1375  308E               	movlw	142
 14637  1376  00FB               	movwf	??___awtoft
 14638  1377  087B               	movf	??___awtoft,w
 14639  1378  00F3               	movwf	___ftpack@exp
 14640  1379  087D               	movf	___awtoft@sign,w
 14641  137A  00FC               	movwf	??___awtoft+1
 14642  137B  087C               	movf	??___awtoft+1,w
 14643  137C  00F4               	movwf	___ftpack@sign
 14644  137D  3197  279C         	fcall	___ftpack
 14645  137F  0870               	movf	?___ftpack,w
 14646  1380  00F8               	movwf	?___awtoft
 14647  1381  0871               	movf	?___ftpack+1,w
 14648  1382  00F9               	movwf	?___awtoft+1
 14649  1383  0872               	movf	?___ftpack+2,w
 14650  1384  00FA               	movwf	?___awtoft+2
 14651  1385  0008               	return
 14652  1386                     __end_of___awtoft:	
 14653                           
 14654                           	psect	text43
 14655  179C                     __ptext43:	
 14656 ;; *************** function ___ftpack *****************
 14657 ;; Defined at:
 14658 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
 14659 ;; Parameters:    Size  Location     Type
 14660 ;;  arg             3    0[COMMON] unsigned um
 14661 ;;  exp             1    3[COMMON] unsigned char 
 14662 ;;  sign            1    4[COMMON] unsigned char 
 14663 ;; Auto vars:     Size  Location     Type
 14664 ;;		None
 14665 ;; Return value:  Size  Location     Type
 14666 ;;                  3    0[COMMON] float 
 14667 ;; Registers used:
 14668 ;;		wreg, status,2, status,0
 14669 ;; Tracked objects:
 14670 ;;		On entry : 0/0
 14671 ;;		On exit  : 0/0
 14672 ;;		Unchanged: 0/0
 14673 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14674 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14675 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14676 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14677 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14678 ;;Total ram usage:        8 bytes
 14679 ;; Hardware stack levels used:    1
 14680 ;; This function calls:
 14681 ;;		Nothing
 14682 ;; This function is called by:
 14683 ;;		___awtoft
 14684 ;;		___ftadd
 14685 ;;		___ftdiv
 14686 ;;		___ftmul
 14687 ;; This function uses a non-reentrant model
 14688 ;;
 14689                           
 14690                           
 14691                           ;psect for function ___ftpack
 14692  179C                     ___ftpack:	
 14693                           
 14694                           ;incstack = 0
 14695                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 14696  179C  0873               	movf	___ftpack@exp,w
 14697  179D  1903               	btfsc	3,2
 14698  179E  2FA4               	goto	l2267
 14699  179F  0872               	movf	___ftpack@arg+2,w
 14700  17A0  0471               	iorwf	___ftpack@arg+1,w
 14701  17A1  0470               	iorwf	___ftpack@arg,w
 14702  17A2  1D03               	skipz
 14703  17A3  2FB5               	goto	l2273
 14704  17A4                     l2267:	
 14705  17A4  3000               	movlw	0
 14706  17A5  00F0               	movwf	?___ftpack
 14707  17A6  3000               	movlw	0
 14708  17A7  00F1               	movwf	?___ftpack+1
 14709  17A8  3000               	movlw	0
 14710  17A9  00F2               	movwf	?___ftpack+2
 14711  17AA  0008               	return
 14712  17AB                     l2271:	
 14713  17AB  3001               	movlw	1
 14714  17AC  00F5               	movwf	??___ftpack
 14715  17AD  0875               	movf	??___ftpack,w
 14716  17AE  07F3               	addwf	___ftpack@exp,f
 14717  17AF  3001               	movlw	1
 14718  17B0                     u2075:	
 14719  17B0  36F2               	lsrf	___ftpack@arg+2,f
 14720  17B1  0CF1               	rrf	___ftpack@arg+1,f
 14721  17B2  0CF0               	rrf	___ftpack@arg,f
 14722  17B3  0B89               	decfsz	9,f
 14723  17B4  2FB0               	goto	u2075
 14724  17B5                     l2273:	
 14725  17B5  30FE               	movlw	254
 14726  17B6  0572               	andwf	___ftpack@arg+2,w
 14727  17B7  1903               	btfsc	3,2
 14728  17B8  2FCE               	goto	l766
 14729  17B9  2FAB               	goto	l2271
 14730  17BA                     l2275:	
 14731  17BA  3001               	movlw	1
 14732  17BB  00F5               	movwf	??___ftpack
 14733  17BC  0875               	movf	??___ftpack,w
 14734  17BD  07F3               	addwf	___ftpack@exp,f
 14735  17BE  3001               	movlw	1
 14736  17BF  07F0               	addwf	___ftpack@arg,f
 14737  17C0  3000               	movlw	0
 14738  17C1  1803               	skipnc
 14739  17C2  3001               	movlw	1
 14740  17C3  07F1               	addwf	___ftpack@arg+1,f
 14741  17C4  3000               	movlw	0
 14742  17C5  1803               	skipnc
 14743  17C6  3001               	movlw	1
 14744  17C7  07F2               	addwf	___ftpack@arg+2,f
 14745  17C8  3001               	movlw	1
 14746  17C9                     u2095:	
 14747  17C9  36F2               	lsrf	___ftpack@arg+2,f
 14748  17CA  0CF1               	rrf	___ftpack@arg+1,f
 14749  17CB  0CF0               	rrf	___ftpack@arg,f
 14750  17CC  0B89               	decfsz	9,f
 14751  17CD  2FC9               	goto	u2095
 14752  17CE                     l766:	
 14753  17CE  30FF               	movlw	255
 14754  17CF  0572               	andwf	___ftpack@arg+2,w
 14755  17D0  1903               	btfsc	3,2
 14756  17D1  2FDB               	goto	l2283
 14757  17D2  2FBA               	goto	l2275
 14758  17D3                     l2281:	
 14759  17D3  3001               	movlw	1
 14760  17D4  02F3               	subwf	___ftpack@exp,f
 14761  17D5  3001               	movlw	1
 14762  17D6                     u2115:	
 14763  17D6  35F0               	lslf	___ftpack@arg,f
 14764  17D7  0DF1               	rlf	___ftpack@arg+1,f
 14765  17D8  0DF2               	rlf	___ftpack@arg+2,f
 14766  17D9  0B89               	decfsz	9,f
 14767  17DA  2FD6               	goto	u2115
 14768  17DB                     l2283:	
 14769  17DB  1BF1               	btfsc	___ftpack@arg+1,7
 14770  17DC  2FE1               	goto	l773
 14771  17DD  3002               	movlw	2
 14772  17DE  0273               	subwf	___ftpack@exp,w
 14773  17DF  1803               	skipnc
 14774  17E0  2FD3               	goto	l2281
 14775  17E1                     l773:	
 14776  17E1  1873               	btfsc	___ftpack@exp,0
 14777  17E2  2FE9               	goto	l774
 14778  17E3  30FF               	movlw	255
 14779  17E4  05F0               	andwf	___ftpack@arg,f
 14780  17E5  307F               	movlw	127
 14781  17E6  05F1               	andwf	___ftpack@arg+1,f
 14782  17E7  30FF               	movlw	255
 14783  17E8  05F2               	andwf	___ftpack@arg+2,f
 14784  17E9                     l774:	
 14785  17E9  1003               	clrc
 14786  17EA  0CF3               	rrf	___ftpack@exp,f
 14787  17EB  0873               	movf	___ftpack@exp,w
 14788  17EC  00F5               	movwf	??___ftpack
 14789  17ED  01F6               	clrf	??___ftpack+1
 14790  17EE  01F7               	clrf	??___ftpack+2
 14791  17EF  3010               	movlw	16
 14792  17F0                     u2155:	
 14793  17F0  35F5               	lslf	??___ftpack,f
 14794  17F1  0DF6               	rlf	??___ftpack+1,f
 14795  17F2  0DF7               	rlf	??___ftpack+2,f
 14796  17F3  0B89               	decfsz	9,f
 14797  17F4  2FF0               	goto	u2155
 14798  17F5  0875               	movf	??___ftpack,w
 14799  17F6  04F0               	iorwf	___ftpack@arg,f
 14800  17F7  0876               	movf	??___ftpack+1,w
 14801  17F8  04F1               	iorwf	___ftpack@arg+1,f
 14802  17F9  0877               	movf	??___ftpack+2,w
 14803  17FA  04F2               	iorwf	___ftpack@arg+2,f
 14804  17FB  0874               	movf	___ftpack@sign,w
 14805  17FC  1903               	btfsc	3,2
 14806  17FD  0008               	return
 14807  17FE  17F2               	bsf	___ftpack@arg+2,7
 14808  17FF  0008               	return
 14809  1800                     __end_of___ftpack:	
 14810  007E                     btemp	set	126	;btemp
 14811  007E                     wtemp0	set	126


Data Sizes:
    Strings     14
    Constant    330
    Data        10
    BSS         93
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     58      78
    BANK1            80     25      79
    BANK2            80      0      29
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            48      0       0
    BANK8             0      0       0
    BANK9             0      0       0
    BANK10            0      0       0
    BANK11            0      0       0
    BANK12            0      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> log@exponent(BANK0[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 27
		 -> log@coeff(CODE[27]), 

    LCDWriteString@characters	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_3(CODE[5]), STR_2(CODE[5]), STR_1(CODE[4]), 


Critical Paths under _main in COMMON

    _main->_LCDWriteString
    _main->___awtoft
    _tempCalc->___awtoft
    _log->___awtoft
    ___ftadd->___awtoft
    _readIAnalog->___aldiv
    _readButton->_ADCRead
    _cc_cv_mode->___awtoft
    _calculateCurrent3->___awtoft
    _calculateCurrent2->___awtoft
    _calculateCurrent1->___awtoft
    _calculateCurrent0->___awtoft
    ___ftdiv->___awtoft
    _LCDInit->_LCDWrite
    _LCDClear->_gotoXY
    _gotoXY->_LCDWrite
    _Init_Battery_State_Machine->___awtoft
    _LCDWriteString->_LCDWriteCharacter
    _LCDWriteInt->_LCDWriteCharacter
    _LCDWriteCharacter->___wmul
    _Battery_State_Machine->___awtoft
    ___fttol->___awtoft
    ___ftmul->___awtoft
    ___awtoft->___ftpack

Critical Paths under _main in BANK0

    _main->_tempCalc
    _tempCalc->_log
    _log->_eval_poly
    _eval_poly->___ftadd
    ___ftsub->___ftadd
    ___ftadd->___ftdiv
    ___ftadd->___ftmul
    _readIAnalog->___aldiv
    _cc_cv_mode->___fttol
    _calculateCurrent3->___fttol
    _calculateCurrent2->___fttol
    _calculateCurrent1->___fttol
    _calculateCurrent0->___fttol
    _SYSTEM_Initialize->_Init_Battery_State_Machine
    _Init_Battery_State_Machine->___fttol
    _Battery_State_Machine->___fttol
    ___fttol->___ftdiv
    ___fttol->___ftmul

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                27    27      0  110767
                                             56 BANK0      2     2      0
                                              0 BANK1     25    25      0
                            _ADCRead
              _Battery_State_Machine
                           _LCDClear
                            _LCDInit
                  _LCDWriteCharacter
                        _LCDWriteInt
                     _LCDWriteString
                 _PWM1_LoadDutyValue
                 _PWM6_LoadDutyValue
                 _PWM7_LoadDutyValue
                  _SYSTEM_Initialize
                           ___awtoft
                            ___ftdiv
                            ___fttol
                  _calculateCurrent0
                  _calculateCurrent1
                  _calculateCurrent2
                  _calculateCurrent3
                         _cc_cv_mode
                             _gotoXY
                         _readButton
                        _readIAnalog
                           _tempCalc
 ---------------------------------------------------------------------------------
 (1) _tempCalc                                            11     9      2   33648
                                             45 BANK0     11     9      2
                            _ADCRead (ARG)
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftsub
                            ___fttol
                                _log
 ---------------------------------------------------------------------------------
 (2) _log                                                  6     3      3   17068
                                             39 BANK0      6     3      3
                           ___awtoft
                            ___ftadd
                             ___ftge
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _frexp                                                6     2      4     330
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) _eval_poly                                           10     3      7    7315
                                             29 BANK0     10     3      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     322
                                              0 COMMON     9     3      6
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    3356
                                             29 BANK0      6     0      6
                            ___ftadd
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             13     7      6    3183
                                             16 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (1) _readIAnalog                                         24    22      2    1498
                                              9 COMMON     4     4      0
                                              6 BANK0     20    18      2
                            _ADCRead
                            ___aldiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     406
                                              0 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _readButton                                           2     2      0      22
                                              4 COMMON     2     2      0
                            _ADCRead
 ---------------------------------------------------------------------------------
 (2) _ADCRead                                              4     1      3      22
                                              0 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (1) _cc_cv_mode                                           8     8      0    6900
                                             30 BANK0      8     8      0
                           ___awtoft
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) _calculateCurrent3                                    3     3      0    6692
                                             30 BANK0      3     3      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) _calculateCurrent2                                    3     3      0    6692
                                             30 BANK0      3     3      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) _calculateCurrent1                                    3     3      0    6692
                                             30 BANK0      3     3      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) _calculateCurrent0                                    3     3      0    6692
                                             30 BANK0      3     3      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    3365
                                              0 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    2     2      0   10373
                                             35 BANK0      2     2      0
                     _ADC_Initialize
         _Init_Battery_State_Machine
                           _LCDClear
                            _LCDInit
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _PWM_Initialize
                    _TMR2_Initialize
                    _TMR4_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR4_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               1     1      0      23
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LCDInit                                              1     1      0     803
                                              5 COMMON     1     1      0
                           _LCDWrite
 ---------------------------------------------------------------------------------
 (2) _LCDClear                                             3     3      0    3021
                                              8 COMMON     3     3      0
                           _LCDWrite
                             _gotoXY
 ---------------------------------------------------------------------------------
 (1) _gotoXY                                               3     2      1    2172
                                              5 COMMON     3     2      1
                           _LCDWrite
 ---------------------------------------------------------------------------------
 (2) _Init_Battery_State_Machine                           5     5      0    6526
                                             30 BANK0      5     5      0
                           ___awtoft
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM7_LoadDutyValue                                   4     2      2      97
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _PWM6_LoadDutyValue                                   4     2      2      97
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _PWM1_LoadDutyValue                                   4     2      2      97
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _LCDWriteString                                       3     1      2    1847
                                             12 COMMON     2     0      2
                                              0 BANK0      1     1      0
                  _LCDWriteCharacter
 ---------------------------------------------------------------------------------
 (1) _LCDWriteInt                                         16    11      5    7267
                                              0 BANK0     16    11      5
                  _LCDWriteCharacter
                            ___awdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     265
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     406
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (2) _LCDWriteCharacter                                    6     6      0    1643
                                              6 COMMON     6     6      0
                           _LCDWrite
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     728
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) _LCDWrite                                             5     4      1     803
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (1) _Battery_State_Machine                                6     6      0    6966
                                             30 BANK0      6     6      0
                           ___awtoft
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             14    10      4     734
                                             16 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             16    10      6    3067
                                              0 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             6     3      3    2593
                                              8 COMMON     6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    1707
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCRead
   _Battery_State_Machine
     ___awtoft
       ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
   _LCDClear
     _LCDWrite
     _gotoXY
       _LCDWrite
   _LCDInit
     _LCDWrite
   _LCDWriteCharacter
     _LCDWrite
     ___wmul
   _LCDWriteInt
     _LCDWriteCharacter
       _LCDWrite
       ___wmul
     ___awdiv
     ___lwmod
   _LCDWriteString
     _LCDWriteCharacter
       _LCDWrite
       ___wmul
   _PWM1_LoadDutyValue
   _PWM6_LoadDutyValue
   _PWM7_LoadDutyValue
   _SYSTEM_Initialize
     _ADC_Initialize
     _Init_Battery_State_Machine
       ___awtoft
         ___ftpack
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
     _LCDClear
       _LCDWrite
       _gotoXY
         _LCDWrite
     _LCDInit
       _LCDWrite
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM_Initialize
     _TMR2_Initialize
     _TMR4_Initialize
   ___awtoft
     ___ftpack
   ___ftdiv
     ___awtoft (ARG)
       ___ftpack
     ___ftpack (ARG)
     ___ftpack (ARG)
   ___fttol
     ___awtoft (ARG)
       ___ftpack
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _frexp (ARG)
   _calculateCurrent0
     ___awtoft
       ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
   _calculateCurrent1
     ___awtoft
       ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
   _calculateCurrent2
     ___awtoft
       ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
   _calculateCurrent3
     ___awtoft
       ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
   _cc_cv_mode
     ___awtoft
       ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
   _gotoXY
     _LCDWrite
   _readButton
     _ADCRead
   _readIAnalog
     _ADCRead
     ___aldiv
     ___wmul
   _tempCalc
     _ADCRead (ARG)
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
       _frexp (ARG)
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftsub (ARG)
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
     ___fttol (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
     _log (ARG)
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       _eval_poly
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___wmul
       _frexp

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     3A      4E       5       97.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     19      4F       7       98.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      1D       9       36.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               30      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      C8      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BANK8                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BANK9                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BANK10               0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BANK11               0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      C8      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Jul 24 16:11:19 2018

                       _stateCounter 00C0                                    _j 0068  
                                  _x 006B               LCDWriteInt@fieldLength 0022  
            __size_of_PWM_Initialize 001F                          __CFG_CP$OFF 0000  
                                 l60 12A6                                   l57 129F  
                       ___awdiv@sign 0076                  ___wmul@multiplicand 0072  
        __size_of_PWM6_LoadDutyValue 0016                         ___ftadd@exp1 003C  
                       ___ftadd@exp2 003B                          __CFG_LVP$ON 0000  
                       ___ftadd@sign 003A                                  l220 13A9  
                                l132 0F45                                  l221 139D  
                                l127 0EF1                                  l128 0F02  
                                l217 1391                                  l218 1393  
                                l219 1399                                  l605 12F7  
                      LCDClear@index 0079                                  l660 08A1  
                                l493 04DD                                  l773 17E1  
                                l774 17E9                                  l766 17CE  
                                l857 097F                                  l797 0D2C  
                                _GIE 005F                                  _RB2 006A  
                       __CFG_CPD$OFF 0000                                  _log 0A42  
                    __end_of_ADCRead 12AD                      _TMR2_Initialize 1263  
                       __CFG_BORV$LO 0000                                  wreg 0009  
                    __end_of_LCDInit 146F                         ?_LCDWriteInt 0020  
                       __CFG_ZCD$OFF 0000                         ___ftdiv@cntr 002A  
                       ___ftdiv@sign 002F                                 l3101 009E  
                               l3013 0832                                 l3023 085E  
                               l3105 00AC                                 l3033 086C  
                               l3025 0860                                 l3201 0280  
                               l3019 084C                                 l2413 0B1F  
                               l3045 088D                                 l2341 0CBC  
                               l3213 02A4                                 l2271 17AB  
                               l2407 0B09                                 l2511 0969  
                               l2319 12F1                                 l3071 0029  
                               l3039 0875                                 l3047 088E  
                               l3207 0286                                 l2281 17D3  
                               l2273 17B5                                 l2441 0B7E  
                               l2425 0B5A                                 l3081 0030  
                               l3057 1284                                 l3153 157E  
                               l2337 0CB5                                 l3305 047A  
                               l2283 17DB                                 l2275 17BA  
                               l2267 17A4                                 l2523 0990  
                               l3091 006D                                 l3083 005D  
                               l3147 1539                                 l2371 0D0B  
                               l2347 0CCB                                 l3331 04E9  
                               l3219 02D0                                 l2461 1370  
                               l2437 0B76                                 l2429 0B62  
                               l2517 0976                                 l2509 095B  
                               l3093 0073                                 l3165 1608  
                               l2365 0CF8                                 l3333 04EC  
                               l3325 04D5                                 l3317 04B1  
                               l3309 0481                                 l3261 03DC  
                               l2519 0982                                 l3087 0061  
                               l3159 15C3                                 l2383 0D3E  
                               l2367 0D02                                 l2359 0CE5  
                               l2535 14F7                                 l3351 0522  
                               l3319 04B5                                 l3255 03C4  
                               l3089 0065                                 l2633 13B8  
                               l2377 0D1E                                 l2369 0D07  
                               l2473 14D6                                 l2553 1732  
                               l3337 04FD                                 l3273 03F2  
                               l3249 03A6                                 l3193 026C  
                               l2491 092B                                 l2803 163E  
                               l3099 0077                                 l2387 0D50  
                               l2379 0D28                                 l2821 165D  
                               l2397 0D6B                                 l2469 14C0  
                               l3285 0428                                 l2831 1678  
                               l2903 13EF                                 l2639 13CC  
                               l3279 0410                                 l2809 1649  
                               l2745 0A74                                 l2835 1680  
                               l2827 166F                                 l2819 1651  
                               l2907 13F8                                 l2851 09C6  
                               l2739 0A61                                 l3491 07B2  
                               l3299 0463                                 l2941 0106  
                               l2845 09B0                                 l2773 08C2  
                               l2765 08B2                                 l2925 0E99  
                               l2943 0118                                 l2791 0909  
                               l2783 08F0                                 l2775 08D0  
                               l3487 07A9                                 l2873 0A20  
                               l2865 0A07                                 l2971 0228  
                               l2955 01A7                                 l2963 01DA  
                               l2939 00FE                                 l2787 08FB  
                               l2885 1312                                 l2959 01C1  
                               l2897 13D7                                 l2985 0F10  
                               l2899 13E3                                 l2989 0F1D  
                               ?_log 0047                                 STR_1 1825  
                               STR_2 1820                                 STR_3 181B  
                               u2115 17D6                                 u3005 1668  
                               _LATA 0016                                 _LATB 0017  
                               u3015 1670                                 _LATC 0018  
                               u2225 12F8                                 u3105 0A21  
                               u2155 17F0                                 u2075 17B0  
                               u2235 12FD                                 u3205 0DEF  
                               u2405 0D0C                                 u4005 0495  
                               u2095 17C9                                 u3215 0E29  
                               u4015 04AA                                 u2505 0B2B  
                               u3145 13DA                                 u3065 09D8  
                               u3225 0E74                                 u2345 0CE6  
                               u4025 04C7                                 _T2PR 028D  
                               u2515 0B3B                                 u3315 017A  
                               u3075 09E8                                 u2435 0D1F  
                               u4107 0274                                 u3165 13E9  
                               u3085 0A08                                 u4117 087F  
                               u2535 0B63                                 u3175 13F0  
                               u4127 1492                                 u3095 0A17  
                               u3255 0EA4                                 u2375 0CF9  
                               u2800 1432                                 u2545 0B69  
                               u4137 14A2                                 u3505 0848  
                               _T4PR 0293                                 u2715 0977  
                               u3275 00DC                                 u3435 0F5F  
                               u3515 0856                                 u3195 0D99  
                               u3285 00F0                                 u2575 0B7F  
                               u2655 0932                                 u3375 0EDD  
                               u2585 0B85                                 u3705 1578  
                               u3465 0FB4                                 u2905 08E5  
                               u3570 0013                                 u3635 008C  
                               u3715 15BD                                 u3475 0820  
                               u2915 08F1                                 u2685 095C  
                               u3725 1602                                 u3485 082C  
                               u3495 083C                                 u3665 12D2  
                               u2785 13B6                                 u3905 0401  
                               u3825 03B5                                 u3675 12E8  
                               u2795 13CA                                 u2875 08C5  
                               u3685 12BC                                 u3925 041D  
                               u3845 03D1                                 u2975 1654  
                               u3695 1533                                 u2895 08D1  
                               u3785 0394                                 u2995 165E  
                               u3955 045C                                 u3875 03EF  
                               u3975 0473                  tempCalc@analogValue 004D  
                               _WPUA 0F39                                 _WPUB 0F44  
                               _WPUC 0F4F                                 _WPUE 0F65  
                               _Imin 00CC                                 _Iref 00C4  
                               _Iout 00D2                         __CFG_WRT$OFF 0000  
                      __CFG_FCMEN$ON 0000                                 _Vref 005A  
                               _main 0238                         ___ftpack@arg 0070  
                       ___ftpack@exp 0073                                 fsr0h 0005  
                               fsr1h 0007                                 indf0 0000  
                               fsr0l 0004                                 indf1 0001  
                               fsr1l 0006                                 btemp 007E  
                               log@x 0047                         ?_readIAnalog 0026  
                      __CFG_BOREN$ON 0000                                 start 0002  
                      __CFG_CSWEN$ON 0000                        __CFG_MCLRE$ON 0000  
                       ___ftmul@cntr 002E                         ___ftmul@sign 002F  
                   __end_of_LCDClear 13D1                         ___fttol@exp1 003D  
                              ??_log 004A                         ___fttol@lval 0039  
__size_of_Init_Battery_State_Machine 0063       __size_of_OSCILLATOR_Initialize 0009  
                   __end_of_LCDWrite 13AB        __end_of_OSCILLATOR_Initialize 1257  
                    __end_of___aldiv 0912                                _ADACQ 009D  
                              _ADACT 0099                                _ADCAP 009B  
                              ?_main 0070                                _ADCLK 0098  
                              _ADPCH 009E                                _ADREF 009A  
                    __end_of___awdiv 1685                                _ADPRE 009C  
                    __end_of___ftadd 0D83                        __CFG_WDTE$OFF 0000  
                              _ADRPT 010D                      __end_of___ftdiv 0A42  
                    __end_of___ftmul 0BA6                      ___awdiv@divisor 0070  
                    __end_of___ftsub 1328                      __end_of___fttol 0999  
                              _T2CON 028E                                _LATA5 00B5  
                              _T4CON 0294                                _T2HLT 028F  
                              _T4HLT 0295                                _T2TMR 028C  
                              _T2RST 0291                      __end_of___lwmod 13FD  
                              _T4TMR 0292                                _T4RST 0297  
                    ___awdiv@counter 0075                                _OSCEN 0891  
                              _TRISA 0011                                _TRISB 0012  
                              _TRISC 0013                      _TMR4_Initialize 0800  
                              _Imode 0062               ?_Battery_State_Machine 0070  
                              _cc_cv 00D4                        ___awtoft@sign 007D  
                              _frexp 14E5                                _fonts 1000  
                              _errno 00D0                        ___ftpack@sign 0074  
                              main@j 00EA                         main@slowLoop 00DE  
                              status 0003                                wtemp0 007E  
                    __initialization 07B5                          log@exponent 004B  
                       __end_of_main 07B5              __end_of_TMR2_Initialize 1271  
                          ??_ADCRead 0073                               ??_main 0058  
                      ___fttol@sign1 0038                            ??_LCDInit 0075  
             Battery_State_Machine@z 0043              LCDWrite@data_or_command 0072  
                             _ADCON0 0093                               _ADCON1 0094  
                             _ADCON2 0095                               _ADCON3 0096  
                             ?_frexp 0070                               _ADLTHH 010F  
                             _ADLTHL 010E                               _ADRESH 008D  
                             _ADRESL 008C                               _CCPR1H 030D  
                             _CCPR1L 030C                               _ADSTAT 0097  
                             _ADUTHH 0111                     ___awdiv@dividend 0072  
                             _ADUTHL 0110                     __end_of___awtoft 1386  
                             _ANSELA 0F38                               _ANSELB 0F43  
                             _ANSELC 0F4E                     __end_of___ftpack 1800  
                             _RA6PPS 0F16                               _RA7PPS 0F17  
                             _RB5PPS 0F1D                       __CFG_WDTCCS$SC 0000  
                             _FVRCON 090C                               _OSCFRQ 0893  
                     __CFG_PWRTE$OFF 0000                       _LCDWriteString 1284  
                       _CCPTMRS0bits 021E                         _CCPTMRS1bits 021F  
                             ___ftge 14AA                            ??___aldiv 0078  
                             ___wmul 12EF                            ??___awdiv 0074  
                          ??___ftadd 0036                       __CFG_STVREN$ON 0000  
                     _PWM_Initialize 1347                            ??___ftdiv 0026  
                          ??___ftmul 0026                            ??___ftsub 007E  
                          ??___fttol 0034                            ??___lwmod 0074  
                             _gotoXY 1271                               _button 006A  
            __end_of_TMR4_Initialize 080E                     ___awdiv@quotient 0077  
                             _totals 0120                ___ftmul@f3_as_product 002B  
                   __end_of_tempCalc 0C8D                         LCDWrite@data 0070  
                       LCDWriteInt@i 002F                         LCDWriteInt@j 002E  
                          ?_LCDClear 0070                    _SYSTEM_Initialize 146F  
               __size_of_LCDWriteInt 00B9                     __end_oflog@coeff 181B  
            __end_of__initialization 07FD                           ___ftadd@f1 0030  
                         ___ftadd@f2 0033                           ___ftge@ff1 0070  
                         ___ftge@ff2 0073                            ?_LCDWrite 0070  
                 ?_SYSTEM_Initialize 0070               __end_of_LCDWriteString 1298  
                       eval_poly@res 0044                           ___ftdiv@f1 0023  
                         ___ftdiv@f2 0020                           ___ftdiv@f3 002B  
                         ___awtoft@c 0078                           ___ftmul@f1 0020  
                         ___ftmul@f2 0023               __end_of_PWM_Initialize 1366  
               __size_of_readIAnalog 013E                           ___ftsub@f1 0040  
                         ___ftsub@f2 003D                           ___fttol@f1 0030  
                     __pcstackCOMMON 0070                         __pidataBANK0 0006  
                       __pidataBANK2 1246                  ??_SYSTEM_Initialize 0043  
                      __end_of_frexp 1520                        __end_of_fonts 112F  
                          LCDWrite@d 0073                            LCDWrite@i 0074  
                 _PWM1_LoadDutyValue 12AD                     ?_TMR2_Initialize 0070  
                         _cc_cv_mode 0EC1          __size_of_PWM7_LoadDutyValue 0016  
                     main@efficiency 00D6                  ?_PWM1_LoadDutyValue 0070  
                  LCDWriteInt@F14390 0130                    _calculateCurrent0 1520  
                  _calculateCurrent1 1565                    _calculateCurrent2 15AA  
                  _calculateCurrent3 15EF                              ??_frexp 0074  
          __end_of_SYSTEM_Initialize 14AA                           __pbssBANK0 005A  
                         __pbssBANK1 00A0                           __pbssBANK2 0120  
                 ?_calculateCurrent0 0070                   ?_calculateCurrent1 0070  
                 ?_calculateCurrent2 0070                   ?_calculateCurrent3 0070  
                       _batteryState 0064                   __size_of_eval_poly 0060  
                         ??_LCDClear 0078                       main@faultCount 00D9  
                         ??_LCDWrite 0071                      ?_LCDWriteString 007C  
               ??_PWM1_LoadDutyValue 0072                  ??_calculateCurrent0 003E  
                ??_calculateCurrent1 003E                  ??_calculateCurrent2 003E  
                ??_calculateCurrent3 003E                      ?_PWM_Initialize 0070  
                         __pmaintext 0238                              ?___ftge 0070  
                            ?___wmul 0070                      __CFG_PPS1WAY$ON 0000  
         __end_of_PWM6_LoadDutyValue 12D9                              ?_gotoXY 0075  
                            _ADCRead 1298                     ?_TMR4_Initialize 0070  
                          ?___awtoft 0078                            ?___ftpack 0070  
                            _ADSTPTH 0113                              _ADSTPTL 0112  
           __CFG_SCANE$not_available 0000                  __CFG_RSTOSC$HFINT32 0000  
            __size_of_ADC_Initialize 001F              ??_Battery_State_Machine 003E  
                     main@largerIOut 00E3                              _LCDInit 1434  
          __end_of_calculateCurrent0 1565            __end_of_calculateCurrent1 15AA  
          __end_of_calculateCurrent2 15EF            __end_of_calculateCurrent3 1634  
                            _OSCCON1 088D                              _OSCCON3 088F  
                            _OSCTUNE 0892                              _PWM6DCH 038D  
                            _PWM6DCL 038C                              _PWM7DCH 0391  
                            _PWM7DCL 0390                              _PWM6CON 038E  
                            _PWM7CON 0392                              _PPSLOCK 0E8F  
                     main@menuButton 00E5                       main@dutyCycle1 00E6  
                     main@dutyCycle6 00EB                       main@dutyCycle7 00ED  
                  main@tempFanOutput 00E8                           _lastButton 0069  
                          ?_tempCalc 004D                              ___aldiv 0890  
                    __size_of___ftge 003B                              ___awdiv 1634  
                            ___ftadd 0C8D                           _readButton 080E  
                            ___ftdiv 0999                      __size_of___wmul 001B  
                            ___ftmul 0AF2                              ___ftsub 130A  
                            ___fttol 0912                   main@displayRefresh 00DD  
                            ___lwmod 13D1                      __size_of_gotoXY 0013  
                         ??___awtoft 007B                           ??___ftpack 0075  
                  __end_of_eval_poly 1739                              __ptext1 0BA6  
                            __ptext2 0A42                              __ptext3 14E5  
                            __ptext4 16D9                              __ptext5 14AA  
                            __ptext6 130A                              __ptext7 0C8D  
                            __ptext8 0D83                              __ptext9 0890  
                        ?_cc_cv_mode 0070                _OSCILLATOR_Initialize 124E  
                          _T2CONbits 028E                              _current 00B8  
                       __size_of_log 00B0                       ADCRead@channel 0073  
                   ___aldiv@dividend 0074                            _T4CONbits 0294  
           ??_PIN_MANAGER_Initialize 0070                              _samples 2260  
         __size_of_SYSTEM_Initialize 003B                              clrloop0 1258  
                            _voltage 00B0         ??_Init_Battery_State_Machine 003E  
               end_of_initialization 07FD                LCDWriteCharacter@base 007A  
                            gotoXY@x 0077                              gotoXY@y 0075  
                         ??_tempCalc 007E                     ___aldiv@quotient 0022  
                  _LCDWriteCharacter 1685                __CFG_WDTCPS$WDTCPS_31 0000  
                 ?_LCDWriteCharacter 0070           __size_of_calculateCurrent0 0045  
         __size_of_calculateCurrent1 0045           __size_of_calculateCurrent2 0045  
         __size_of_calculateCurrent3 0045                            _TRISAbits 0011  
                ??_LCDWriteCharacter 0076                     __CFG_FEXTOSC$OFF 0000  
       PWM1_LoadDutyValue@dutyCycle1 0070                          _CCP1CONbits 030E  
                        ___ftdiv@exp 002E                  __size_of_cc_cv_mode 013F  
                  __size_of_LCDClear 0026           LCDWriteCharacter@character 0079  
                  __size_of_LCDWrite 0025                          ___ftmul@exp 002A  
          __end_of_LCDWriteCharacter 16D9                          ?_readButton 0070  
          readIAnalog@analog_channel 0079                       __end_of___ftge 14E5  
                          _VHoldMode 0060                       __end_of___wmul 130A  
                     _ADC_Initialize 1328                       __end_of_gotoXY 1284  
             ?_OSCILLATOR_Initialize 0070                            _IminCount 00C8  
                start_initialization 07B5                           eval_poly@d 0040  
                         eval_poly@n 0042                           eval_poly@x 003D  
                  main@faultNotReset 00DB      __size_of_PIN_MANAGER_Initialize 0037  
                        __end_of_log 0AF2                        ??_LCDWriteInt 0025  
                   ??_LCDWriteString 0020                           frexp@value 0070  
                   ??_PWM_Initialize 0070                        ??_readIAnalog 0028  
                   __CFG_LPBOREN$OFF 0000                             ??___ftge 0076  
                  tempCalc@steinhart 0055                             ??___wmul 0074  
             __end_of_ADC_Initialize 1347                          __pdataBANK0 006C  
                      _tempCalc$1297 0052                          __pdataBANK2 0135  
         __end_of_PWM7_LoadDutyValue 12EF                             ??_gotoXY 0076  
                           ?_ADCRead 0070         PWM7_LoadDutyValue@dutyCycle7 0070  
                  __size_of___awtoft 0020                             ?_LCDInit 0070  
                  __size_of___ftpack 0064                          __pbssBIGRAM 2260  
     __size_of_Battery_State_Machine 0177        __end_of_Battery_State_Machine 0238  
                          ___latbits 0002                        __pcstackBANK0 0020  
                      __pcstackBANK1 00D6                   _PWM6_LoadDutyValue 12C3  
           __size_of_TMR2_Initialize 000E   __end_of_Init_Battery_State_Machine 179C  
         _Init_Battery_State_Machine 1739                  __size_of_readButton 0082  
                ?_PWM6_LoadDutyValue 0070                  __end_of_LCDWriteInt 00C1  
                        _batteryTemp 006C          __size_of_PWM1_LoadDutyValue 0016  
             _PIN_MANAGER_Initialize 13FD           __size_of_LCDWriteCharacter 0054  
                           ?___aldiv 0070                  __end_of_readIAnalog 0EC1  
                  __size_of_tempCalc 00E7                             ?___awdiv 0070  
                           ?___ftadd 0030                             ?___ftdiv 0020  
                           ?___ftmul 0020                             ?___ftsub 003D  
                           ?___fttol 0030                     LCDWriteInt@value 0020  
                           ?___lwmod 0070                      ?_ADC_Initialize 0070  
               ??_PWM6_LoadDutyValue 0072                         ??_cc_cv_mode 003E  
                          _eval_poly 16D9             __size_of_TMR4_Initialize 000E  
                     __size_of_frexp 003B                             _T2CLKCON 0290  
                           _T4CLKCON 0296                          cc_cv_mode@z 0045  
                           _LCDClear 13AB                      ___aldiv@divisor 0070  
                    ___aldiv@counter 0020                       ___wmul@product 0074  
                           _LATAbits 0016                             _LCDWrite 1386  
                          clear_ram0 1257                             _PIE0bits 0716  
                 __end_of_cc_cv_mode 1000                             _PIR4bits 0710  
                   readIAnalog@value 007B                            main@MPPT0 00E1  
                          main@MPPT1 00DF                     __size_of_ADCRead 0015  
                         _ADCON0bits 0093                    ___wmul@multiplier 0070  
                         ?_eval_poly 003D                     __size_of_LCDInit 003B  
                           _Ianalogs 00A0                          _LCDWriteInt 0008  
        Init_Battery_State_Machine@z 0042                    ??_TMR2_Initialize 0070  
                        _readIAnalog 0D83                            frexp@eptr 0073  
                           _Vanalogs 00A8                         ??_readButton 0074  
            ??_OSCILLATOR_Initialize 0070                 LCDWriteInt@numPlaces 0023  
                   __size_of___aldiv 0082                     __size_of___awdiv 0051  
                   __size_of___ftadd 00F6                     __size_of___ftdiv 00A9  
                   __size_of___ftmul 00B4                     __size_of___ftsub 001E  
                   __size_of___fttol 0087                     __size_of___lwmod 002C  
                        _readButtons 005E                             ___awtoft 1366  
                           ___ftpack 179C                             _channels 0135  
                           __ptext10 080E                             __ptext11 1298  
                           __ptext20 1263                             __ptext12 0EC1  
                           __ptext21 1347                             __ptext13 15EF  
                           __ptext30 12C3                             __ptext22 13FD  
                           __ptext14 15AA                             __ptext31 12AD  
                           __ptext23 124E                             __ptext15 1565  
                           __ptext40 0912                             __ptext32 1284  
                           __ptext24 1434                             __ptext16 1520  
                           __ptext41 0AF2                             __ptext33 0008  
                           __ptext25 13AB                             __ptext17 0999  
                           __ptext42 1366                             __ptext34 13D1  
                           __ptext26 1271                             __ptext18 146F  
                           __ptext43 179C                             __ptext35 1634  
                           __ptext27 1739                             __ptext19 0800  
                           __ptext36 1685                             __ptext28 1328  
                           __ptext37 12EF                             __ptext29 12D9  
                           __ptext38 1386                             __ptext39 00C1  
                    LCDWriteInt@sign 0024                            tempCalc@R 004F  
                 __end_of_readButton 0890                    ??_TMR4_Initialize 0070  
                      __size_of_main 057D                 __CFG_WDTCWS$WDTCWS_7 0000  
                           _tempCalc 0BA6          PIN_MANAGER_Initialize@state 0070  
                           log@coeff 1800                          ??_eval_poly 007E  
                        _sampleIndex 0066                   _PWM7_LoadDutyValue 12D9  
        ?_Init_Battery_State_Machine 0070                     ___lwmod@dividend 0072  
                     LCDWriteInt@str 0029              ?_PIN_MANAGER_Initialize 0070  
                ?_PWM7_LoadDutyValue 0070                    __CFG_CLKOUTEN$OFF 0000  
                        _PPSLOCKbits 0E8F                     ??_ADC_Initialize 0070  
       PWM6_LoadDutyValue@dutyCycle6 0070                        __pstringtext1 1000  
                      __pstringtext2 1800                        __pstringtext3 1820  
                      __pstringtext4 1825                        __pstringtext5 0000  
               ??_PWM7_LoadDutyValue 0072                      ___lwmod@divisor 0070  
                    ___lwmod@counter 0075             LCDWriteString@characters 007C  
                       ___aldiv@sign 0021                   readIAnalog@channel 0026  
              _Battery_State_Machine 00C1       __end_of_PIN_MANAGER_Initialize 1434  
         __end_of_PWM1_LoadDutyValue 12C3              __size_of_LCDWriteString 0014  
