

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sat Jul 14 11:16:00 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F18855
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	stringtext1,global,class=STRCODE,delta=2
     7                           	psect	stringtext2,global,class=STRCODE,delta=2
     8                           	psect	stringtext3,global,class=STRCODE,delta=2
     9                           	psect	stringtext4,global,class=STRCODE,delta=2
    10                           	psect	stringtext5,global,class=STRCODE,delta=2
    11                           	psect	cinit,global,class=CODE,merge=1,delta=2
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    17                           	psect	clrtext,global,class=CODE,delta=2
    18                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    24                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    25                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    26                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    27                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    28                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    29                           	psect	text8,local,class=CODE,merge=1,delta=2
    30                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    31                           	psect	text10,local,class=CODE,merge=1,delta=2
    32                           	psect	text11,local,class=CODE,merge=1,delta=2
    33                           	psect	text12,local,class=CODE,merge=1,delta=2
    34                           	psect	text13,local,class=CODE,merge=1,delta=2
    35                           	psect	text14,local,class=CODE,merge=1,delta=2
    36                           	psect	text15,local,class=CODE,merge=1,delta=2
    37                           	psect	text16,local,class=CODE,merge=1,delta=2
    38                           	psect	text17,local,class=CODE,merge=1,delta=2,group=2
    39                           	psect	text18,local,class=CODE,merge=1,delta=2
    40                           	psect	text19,local,class=CODE,merge=1,delta=2
    41                           	psect	text20,local,class=CODE,merge=1,delta=2
    42                           	psect	text21,local,class=CODE,merge=1,delta=2
    43                           	psect	text22,local,class=CODE,merge=1,delta=2
    44                           	psect	text23,local,class=CODE,merge=1,delta=2
    45                           	psect	text24,local,class=CODE,merge=1,delta=2
    46                           	psect	text25,local,class=CODE,merge=1,delta=2
    47                           	psect	text26,local,class=CODE,merge=1,delta=2
    48                           	psect	text27,local,class=CODE,merge=1,delta=2
    49                           	psect	text28,local,class=CODE,merge=1,delta=2
    50                           	psect	text29,local,class=CODE,merge=1,delta=2
    51                           	psect	text30,local,class=CODE,merge=1,delta=2
    52                           	psect	text31,local,class=CODE,merge=1,delta=2
    53                           	psect	text32,local,class=CODE,merge=1,delta=2
    54                           	psect	text33,local,class=CODE,merge=1,delta=2
    55                           	psect	text34,local,class=CODE,merge=1,delta=2,group=2
    56                           	psect	text35,local,class=CODE,merge=1,delta=2,group=2
    57                           	psect	text36,local,class=CODE,merge=1,delta=2
    58                           	psect	text37,local,class=CODE,merge=1,delta=2,group=2
    59                           	psect	text38,local,class=CODE,merge=1,delta=2
    60                           	psect	text39,local,class=CODE,merge=1,delta=2
    61                           	psect	text40,local,class=CODE,merge=1,delta=2,group=2
    62                           	psect	text41,local,class=CODE,merge=1,delta=2,group=2
    63                           	psect	text42,local,class=CODE,merge=1,delta=2,group=2
    64                           	psect	text43,local,class=CODE,merge=1,delta=2,group=2
    65                           	dabs	1,0x620,48
    66                           	dabs	1,0x5A0,80
    67                           	dabs	1,0x520,80
    68                           	dabs	1,0x4A0,80
    69                           	dabs	1,0x420,80
    70                           	dabs	1,0x3D0,32
    71                           	dabs	1,0x2260,0,_samples
    72                           	dabs	1,0x7E,2
    73  0000                     
    74                           ; Version 1.45
    75                           ; Generated 16/11/2017 GMT
    76                           ; 
    77                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    78                           ; All rights reserved.
    79                           ; 
    80                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    81                           ; 
    82                           ; Redistribution and use in source and binary forms, with or without modification, are
    83                           ; permitted provided that the following conditions are met:
    84                           ; 
    85                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    86                           ;        conditions and the following disclaimer.
    87                           ; 
    88                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    89                           ;        of conditions and the following disclaimer in the documentation and/or other
    90                           ;        materials provided with the distribution.
    91                           ; 
    92                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    93                           ;        software without specific prior written permission.
    94                           ; 
    95                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    96                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    97                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    98                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    99                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   100                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   101                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   102                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   103                           ; 
   104                           ; 
   105                           ; Code-generator required, PIC16F18855 Definitions
   106                           ; 
   107                           ; SFR Addresses
   108  0000                     	;# 
   109  0001                     	;# 
   110  0002                     	;# 
   111  0003                     	;# 
   112  0004                     	;# 
   113  0005                     	;# 
   114  0006                     	;# 
   115  0007                     	;# 
   116  0008                     	;# 
   117  0009                     	;# 
   118  000A                     	;# 
   119  000B                     	;# 
   120  000C                     	;# 
   121  000D                     	;# 
   122  000E                     	;# 
   123  0010                     	;# 
   124  0011                     	;# 
   125  0012                     	;# 
   126  0013                     	;# 
   127  0016                     	;# 
   128  0017                     	;# 
   129  0018                     	;# 
   130  001C                     	;# 
   131  001C                     	;# 
   132  001D                     	;# 
   133  001D                     	;# 
   134  001E                     	;# 
   135  001F                     	;# 
   136  008C                     	;# 
   137  008C                     	;# 
   138  008D                     	;# 
   139  008E                     	;# 
   140  008E                     	;# 
   141  008F                     	;# 
   142  0090                     	;# 
   143  0090                     	;# 
   144  0091                     	;# 
   145  0093                     	;# 
   146  0094                     	;# 
   147  0095                     	;# 
   148  0096                     	;# 
   149  0097                     	;# 
   150  0098                     	;# 
   151  0099                     	;# 
   152  009A                     	;# 
   153  009B                     	;# 
   154  009C                     	;# 
   155  009D                     	;# 
   156  009E                     	;# 
   157  010C                     	;# 
   158  010D                     	;# 
   159  010E                     	;# 
   160  010E                     	;# 
   161  010F                     	;# 
   162  0110                     	;# 
   163  0110                     	;# 
   164  0111                     	;# 
   165  0112                     	;# 
   166  0112                     	;# 
   167  0113                     	;# 
   168  0114                     	;# 
   169  0114                     	;# 
   170  0115                     	;# 
   171  0116                     	;# 
   172  0116                     	;# 
   173  0117                     	;# 
   174  0119                     	;# 
   175  0119                     	;# 
   176  0119                     	;# 
   177  011A                     	;# 
   178  011A                     	;# 
   179  011A                     	;# 
   180  011B                     	;# 
   181  011B                     	;# 
   182  011B                     	;# 
   183  011B                     	;# 
   184  011B                     	;# 
   185  011C                     	;# 
   186  011C                     	;# 
   187  011C                     	;# 
   188  011D                     	;# 
   189  011D                     	;# 
   190  011D                     	;# 
   191  011E                     	;# 
   192  011E                     	;# 
   193  011E                     	;# 
   194  011F                     	;# 
   195  011F                     	;# 
   196  011F                     	;# 
   197  011F                     	;# 
   198  011F                     	;# 
   199  018C                     	;# 
   200  018D                     	;# 
   201  018E                     	;# 
   202  018F                     	;# 
   203  0190                     	;# 
   204  0191                     	;# 
   205  0192                     	;# 
   206  0196                     	;# 
   207  0197                     	;# 
   208  0198                     	;# 
   209  0199                     	;# 
   210  019A                     	;# 
   211  019B                     	;# 
   212  019C                     	;# 
   213  020C                     	;# 
   214  020C                     	;# 
   215  020D                     	;# 
   216  020E                     	;# 
   217  020F                     	;# 
   218  020F                     	;# 
   219  0210                     	;# 
   220  0210                     	;# 
   221  0211                     	;# 
   222  0211                     	;# 
   223  0212                     	;# 
   224  0212                     	;# 
   225  0213                     	;# 
   226  0214                     	;# 
   227  0215                     	;# 
   228  0215                     	;# 
   229  0216                     	;# 
   230  0216                     	;# 
   231  0217                     	;# 
   232  0217                     	;# 
   233  0218                     	;# 
   234  0218                     	;# 
   235  0219                     	;# 
   236  021A                     	;# 
   237  021B                     	;# 
   238  021B                     	;# 
   239  021C                     	;# 
   240  021C                     	;# 
   241  021D                     	;# 
   242  021D                     	;# 
   243  021E                     	;# 
   244  021F                     	;# 
   245  028C                     	;# 
   246  028C                     	;# 
   247  028D                     	;# 
   248  028D                     	;# 
   249  028E                     	;# 
   250  028F                     	;# 
   251  0290                     	;# 
   252  0290                     	;# 
   253  0291                     	;# 
   254  0292                     	;# 
   255  0292                     	;# 
   256  0293                     	;# 
   257  0293                     	;# 
   258  0294                     	;# 
   259  0295                     	;# 
   260  0296                     	;# 
   261  0296                     	;# 
   262  0297                     	;# 
   263  0298                     	;# 
   264  0298                     	;# 
   265  0299                     	;# 
   266  0299                     	;# 
   267  029A                     	;# 
   268  029B                     	;# 
   269  029C                     	;# 
   270  029C                     	;# 
   271  029D                     	;# 
   272  030C                     	;# 
   273  030C                     	;# 
   274  030D                     	;# 
   275  030E                     	;# 
   276  030F                     	;# 
   277  0310                     	;# 
   278  0310                     	;# 
   279  0311                     	;# 
   280  0312                     	;# 
   281  0313                     	;# 
   282  0314                     	;# 
   283  0314                     	;# 
   284  0315                     	;# 
   285  0316                     	;# 
   286  0317                     	;# 
   287  0318                     	;# 
   288  0318                     	;# 
   289  0319                     	;# 
   290  031A                     	;# 
   291  031B                     	;# 
   292  031C                     	;# 
   293  031C                     	;# 
   294  031D                     	;# 
   295  031E                     	;# 
   296  031F                     	;# 
   297  038C                     	;# 
   298  038D                     	;# 
   299  038E                     	;# 
   300  0390                     	;# 
   301  0391                     	;# 
   302  0392                     	;# 
   303  040C                     	;# 
   304  040D                     	;# 
   305  040E                     	;# 
   306  040F                     	;# 
   307  0410                     	;# 
   308  0411                     	;# 
   309  0416                     	;# 
   310  0416                     	;# 
   311  0417                     	;# 
   312  0418                     	;# 
   313  0418                     	;# 
   314  0419                     	;# 
   315  041A                     	;# 
   316  041A                     	;# 
   317  041B                     	;# 
   318  041C                     	;# 
   319  041C                     	;# 
   320  041D                     	;# 
   321  041E                     	;# 
   322  041F                     	;# 
   323  048C                     	;# 
   324  048C                     	;# 
   325  048D                     	;# 
   326  048E                     	;# 
   327  048F                     	;# 
   328  048F                     	;# 
   329  0490                     	;# 
   330  0491                     	;# 
   331  0492                     	;# 
   332  0492                     	;# 
   333  0493                     	;# 
   334  0494                     	;# 
   335  0495                     	;# 
   336  0495                     	;# 
   337  0496                     	;# 
   338  0497                     	;# 
   339  0498                     	;# 
   340  0499                     	;# 
   341  049A                     	;# 
   342  049B                     	;# 
   343  049C                     	;# 
   344  049D                     	;# 
   345  050C                     	;# 
   346  050C                     	;# 
   347  050D                     	;# 
   348  050E                     	;# 
   349  050F                     	;# 
   350  050F                     	;# 
   351  0510                     	;# 
   352  0511                     	;# 
   353  0512                     	;# 
   354  0512                     	;# 
   355  0513                     	;# 
   356  0514                     	;# 
   357  0515                     	;# 
   358  0515                     	;# 
   359  0516                     	;# 
   360  0517                     	;# 
   361  0518                     	;# 
   362  0519                     	;# 
   363  051A                     	;# 
   364  051B                     	;# 
   365  051C                     	;# 
   366  051D                     	;# 
   367  058C                     	;# 
   368  058C                     	;# 
   369  058D                     	;# 
   370  058E                     	;# 
   371  058F                     	;# 
   372  058F                     	;# 
   373  0590                     	;# 
   374  0591                     	;# 
   375  0592                     	;# 
   376  0593                     	;# 
   377  060C                     	;# 
   378  060D                     	;# 
   379  060E                     	;# 
   380  060F                     	;# 
   381  0610                     	;# 
   382  0611                     	;# 
   383  0612                     	;# 
   384  0613                     	;# 
   385  0614                     	;# 
   386  0616                     	;# 
   387  0617                     	;# 
   388  0618                     	;# 
   389  0619                     	;# 
   390  061A                     	;# 
   391  061B                     	;# 
   392  061C                     	;# 
   393  061D                     	;# 
   394  061E                     	;# 
   395  068C                     	;# 
   396  068D                     	;# 
   397  068E                     	;# 
   398  068F                     	;# 
   399  0690                     	;# 
   400  0691                     	;# 
   401  0692                     	;# 
   402  0693                     	;# 
   403  0694                     	;# 
   404  070C                     	;# 
   405  070D                     	;# 
   406  070E                     	;# 
   407  070F                     	;# 
   408  0710                     	;# 
   409  0711                     	;# 
   410  0712                     	;# 
   411  0713                     	;# 
   412  0714                     	;# 
   413  0716                     	;# 
   414  0717                     	;# 
   415  0718                     	;# 
   416  0719                     	;# 
   417  071A                     	;# 
   418  071B                     	;# 
   419  071C                     	;# 
   420  071D                     	;# 
   421  071E                     	;# 
   422  0796                     	;# 
   423  0797                     	;# 
   424  0798                     	;# 
   425  0799                     	;# 
   426  079A                     	;# 
   427  079B                     	;# 
   428  080C                     	;# 
   429  080D                     	;# 
   430  080E                     	;# 
   431  080F                     	;# 
   432  0810                     	;# 
   433  0811                     	;# 
   434  0812                     	;# 
   435  0813                     	;# 
   436  0814                     	;# 
   437  081A                     	;# 
   438  081B                     	;# 
   439  081C                     	;# 
   440  081D                     	;# 
   441  081E                     	;# 
   442  081F                     	;# 
   443  088C                     	;# 
   444  088D                     	;# 
   445  088E                     	;# 
   446  088F                     	;# 
   447  0890                     	;# 
   448  0891                     	;# 
   449  0892                     	;# 
   450  0893                     	;# 
   451  0895                     	;# 
   452  0896                     	;# 
   453  0897                     	;# 
   454  0898                     	;# 
   455  0899                     	;# 
   456  089A                     	;# 
   457  089B                     	;# 
   458  090C                     	;# 
   459  090E                     	;# 
   460  090F                     	;# 
   461  091F                     	;# 
   462  091F                     	;# 
   463  098F                     	;# 
   464  098F                     	;# 
   465  0990                     	;# 
   466  0991                     	;# 
   467  0992                     	;# 
   468  0993                     	;# 
   469  0994                     	;# 
   470  0995                     	;# 
   471  0996                     	;# 
   472  0997                     	;# 
   473  0E0F                     	;# 
   474  0E10                     	;# 
   475  0E11                     	;# 
   476  0E12                     	;# 
   477  0E13                     	;# 
   478  0E14                     	;# 
   479  0E15                     	;# 
   480  0E16                     	;# 
   481  0E17                     	;# 
   482  0E18                     	;# 
   483  0E19                     	;# 
   484  0E1A                     	;# 
   485  0E1B                     	;# 
   486  0E1C                     	;# 
   487  0E1D                     	;# 
   488  0E1E                     	;# 
   489  0E1F                     	;# 
   490  0E20                     	;# 
   491  0E21                     	;# 
   492  0E22                     	;# 
   493  0E23                     	;# 
   494  0E24                     	;# 
   495  0E25                     	;# 
   496  0E26                     	;# 
   497  0E27                     	;# 
   498  0E28                     	;# 
   499  0E29                     	;# 
   500  0E2A                     	;# 
   501  0E2B                     	;# 
   502  0E2C                     	;# 
   503  0E2D                     	;# 
   504  0E2E                     	;# 
   505  0E2F                     	;# 
   506  0E30                     	;# 
   507  0E31                     	;# 
   508  0E32                     	;# 
   509  0E33                     	;# 
   510  0E34                     	;# 
   511  0E35                     	;# 
   512  0E36                     	;# 
   513  0E37                     	;# 
   514  0E8F                     	;# 
   515  0E90                     	;# 
   516  0E91                     	;# 
   517  0E92                     	;# 
   518  0E93                     	;# 
   519  0E94                     	;# 
   520  0E95                     	;# 
   521  0E96                     	;# 
   522  0E97                     	;# 
   523  0E9C                     	;# 
   524  0E9D                     	;# 
   525  0E9E                     	;# 
   526  0EA1                     	;# 
   527  0EA2                     	;# 
   528  0EA3                     	;# 
   529  0EA4                     	;# 
   530  0EA5                     	;# 
   531  0EA9                     	;# 
   532  0EAA                     	;# 
   533  0EAB                     	;# 
   534  0EAC                     	;# 
   535  0EB1                     	;# 
   536  0EB2                     	;# 
   537  0EB3                     	;# 
   538  0EB8                     	;# 
   539  0EB9                     	;# 
   540  0EBA                     	;# 
   541  0EBB                     	;# 
   542  0EBC                     	;# 
   543  0EBD                     	;# 
   544  0EBE                     	;# 
   545  0EC3                     	;# 
   546  0EC5                     	;# 
   547  0EC6                     	;# 
   548  0EC7                     	;# 
   549  0EC8                     	;# 
   550  0EC9                     	;# 
   551  0ECA                     	;# 
   552  0ECB                     	;# 
   553  0ECC                     	;# 
   554  0F10                     	;# 
   555  0F11                     	;# 
   556  0F12                     	;# 
   557  0F13                     	;# 
   558  0F14                     	;# 
   559  0F15                     	;# 
   560  0F16                     	;# 
   561  0F17                     	;# 
   562  0F18                     	;# 
   563  0F19                     	;# 
   564  0F1A                     	;# 
   565  0F1B                     	;# 
   566  0F1C                     	;# 
   567  0F1D                     	;# 
   568  0F1E                     	;# 
   569  0F1F                     	;# 
   570  0F20                     	;# 
   571  0F21                     	;# 
   572  0F22                     	;# 
   573  0F23                     	;# 
   574  0F24                     	;# 
   575  0F25                     	;# 
   576  0F26                     	;# 
   577  0F27                     	;# 
   578  0F38                     	;# 
   579  0F39                     	;# 
   580  0F3A                     	;# 
   581  0F3B                     	;# 
   582  0F3C                     	;# 
   583  0F3D                     	;# 
   584  0F3E                     	;# 
   585  0F3F                     	;# 
   586  0F40                     	;# 
   587  0F41                     	;# 
   588  0F43                     	;# 
   589  0F44                     	;# 
   590  0F45                     	;# 
   591  0F46                     	;# 
   592  0F47                     	;# 
   593  0F48                     	;# 
   594  0F49                     	;# 
   595  0F4A                     	;# 
   596  0F4B                     	;# 
   597  0F4C                     	;# 
   598  0F4E                     	;# 
   599  0F4F                     	;# 
   600  0F50                     	;# 
   601  0F51                     	;# 
   602  0F52                     	;# 
   603  0F53                     	;# 
   604  0F54                     	;# 
   605  0F55                     	;# 
   606  0F56                     	;# 
   607  0F57                     	;# 
   608  0F65                     	;# 
   609  0F68                     	;# 
   610  0F69                     	;# 
   611  0F6A                     	;# 
   612  0F6B                     	;# 
   613  0FE4                     	;# 
   614  0FE5                     	;# 
   615  0FE6                     	;# 
   616  0FE7                     	;# 
   617  0FE8                     	;# 
   618  0FE9                     	;# 
   619  0FEA                     	;# 
   620  0FEB                     	;# 
   621  0FED                     	;# 
   622  0FEE                     	;# 
   623  0FEF                     	;# 
   624  0000                     	;# 
   625  0001                     	;# 
   626  0002                     	;# 
   627  0003                     	;# 
   628  0004                     	;# 
   629  0005                     	;# 
   630  0006                     	;# 
   631  0007                     	;# 
   632  0008                     	;# 
   633  0009                     	;# 
   634  000A                     	;# 
   635  000B                     	;# 
   636  000C                     	;# 
   637  000D                     	;# 
   638  000E                     	;# 
   639  0010                     	;# 
   640  0011                     	;# 
   641  0012                     	;# 
   642  0013                     	;# 
   643  0016                     	;# 
   644  0017                     	;# 
   645  0018                     	;# 
   646  001C                     	;# 
   647  001C                     	;# 
   648  001D                     	;# 
   649  001D                     	;# 
   650  001E                     	;# 
   651  001F                     	;# 
   652  008C                     	;# 
   653  008C                     	;# 
   654  008D                     	;# 
   655  008E                     	;# 
   656  008E                     	;# 
   657  008F                     	;# 
   658  0090                     	;# 
   659  0090                     	;# 
   660  0091                     	;# 
   661  0093                     	;# 
   662  0094                     	;# 
   663  0095                     	;# 
   664  0096                     	;# 
   665  0097                     	;# 
   666  0098                     	;# 
   667  0099                     	;# 
   668  009A                     	;# 
   669  009B                     	;# 
   670  009C                     	;# 
   671  009D                     	;# 
   672  009E                     	;# 
   673  010C                     	;# 
   674  010D                     	;# 
   675  010E                     	;# 
   676  010E                     	;# 
   677  010F                     	;# 
   678  0110                     	;# 
   679  0110                     	;# 
   680  0111                     	;# 
   681  0112                     	;# 
   682  0112                     	;# 
   683  0113                     	;# 
   684  0114                     	;# 
   685  0114                     	;# 
   686  0115                     	;# 
   687  0116                     	;# 
   688  0116                     	;# 
   689  0117                     	;# 
   690  0119                     	;# 
   691  0119                     	;# 
   692  0119                     	;# 
   693  011A                     	;# 
   694  011A                     	;# 
   695  011A                     	;# 
   696  011B                     	;# 
   697  011B                     	;# 
   698  011B                     	;# 
   699  011B                     	;# 
   700  011B                     	;# 
   701  011C                     	;# 
   702  011C                     	;# 
   703  011C                     	;# 
   704  011D                     	;# 
   705  011D                     	;# 
   706  011D                     	;# 
   707  011E                     	;# 
   708  011E                     	;# 
   709  011E                     	;# 
   710  011F                     	;# 
   711  011F                     	;# 
   712  011F                     	;# 
   713  011F                     	;# 
   714  011F                     	;# 
   715  018C                     	;# 
   716  018D                     	;# 
   717  018E                     	;# 
   718  018F                     	;# 
   719  0190                     	;# 
   720  0191                     	;# 
   721  0192                     	;# 
   722  0196                     	;# 
   723  0197                     	;# 
   724  0198                     	;# 
   725  0199                     	;# 
   726  019A                     	;# 
   727  019B                     	;# 
   728  019C                     	;# 
   729  020C                     	;# 
   730  020C                     	;# 
   731  020D                     	;# 
   732  020E                     	;# 
   733  020F                     	;# 
   734  020F                     	;# 
   735  0210                     	;# 
   736  0210                     	;# 
   737  0211                     	;# 
   738  0211                     	;# 
   739  0212                     	;# 
   740  0212                     	;# 
   741  0213                     	;# 
   742  0214                     	;# 
   743  0215                     	;# 
   744  0215                     	;# 
   745  0216                     	;# 
   746  0216                     	;# 
   747  0217                     	;# 
   748  0217                     	;# 
   749  0218                     	;# 
   750  0218                     	;# 
   751  0219                     	;# 
   752  021A                     	;# 
   753  021B                     	;# 
   754  021B                     	;# 
   755  021C                     	;# 
   756  021C                     	;# 
   757  021D                     	;# 
   758  021D                     	;# 
   759  021E                     	;# 
   760  021F                     	;# 
   761  028C                     	;# 
   762  028C                     	;# 
   763  028D                     	;# 
   764  028D                     	;# 
   765  028E                     	;# 
   766  028F                     	;# 
   767  0290                     	;# 
   768  0290                     	;# 
   769  0291                     	;# 
   770  0292                     	;# 
   771  0292                     	;# 
   772  0293                     	;# 
   773  0293                     	;# 
   774  0294                     	;# 
   775  0295                     	;# 
   776  0296                     	;# 
   777  0296                     	;# 
   778  0297                     	;# 
   779  0298                     	;# 
   780  0298                     	;# 
   781  0299                     	;# 
   782  0299                     	;# 
   783  029A                     	;# 
   784  029B                     	;# 
   785  029C                     	;# 
   786  029C                     	;# 
   787  029D                     	;# 
   788  030C                     	;# 
   789  030C                     	;# 
   790  030D                     	;# 
   791  030E                     	;# 
   792  030F                     	;# 
   793  0310                     	;# 
   794  0310                     	;# 
   795  0311                     	;# 
   796  0312                     	;# 
   797  0313                     	;# 
   798  0314                     	;# 
   799  0314                     	;# 
   800  0315                     	;# 
   801  0316                     	;# 
   802  0317                     	;# 
   803  0318                     	;# 
   804  0318                     	;# 
   805  0319                     	;# 
   806  031A                     	;# 
   807  031B                     	;# 
   808  031C                     	;# 
   809  031C                     	;# 
   810  031D                     	;# 
   811  031E                     	;# 
   812  031F                     	;# 
   813  038C                     	;# 
   814  038D                     	;# 
   815  038E                     	;# 
   816  0390                     	;# 
   817  0391                     	;# 
   818  0392                     	;# 
   819  040C                     	;# 
   820  040D                     	;# 
   821  040E                     	;# 
   822  040F                     	;# 
   823  0410                     	;# 
   824  0411                     	;# 
   825  0416                     	;# 
   826  0416                     	;# 
   827  0417                     	;# 
   828  0418                     	;# 
   829  0418                     	;# 
   830  0419                     	;# 
   831  041A                     	;# 
   832  041A                     	;# 
   833  041B                     	;# 
   834  041C                     	;# 
   835  041C                     	;# 
   836  041D                     	;# 
   837  041E                     	;# 
   838  041F                     	;# 
   839  048C                     	;# 
   840  048C                     	;# 
   841  048D                     	;# 
   842  048E                     	;# 
   843  048F                     	;# 
   844  048F                     	;# 
   845  0490                     	;# 
   846  0491                     	;# 
   847  0492                     	;# 
   848  0492                     	;# 
   849  0493                     	;# 
   850  0494                     	;# 
   851  0495                     	;# 
   852  0495                     	;# 
   853  0496                     	;# 
   854  0497                     	;# 
   855  0498                     	;# 
   856  0499                     	;# 
   857  049A                     	;# 
   858  049B                     	;# 
   859  049C                     	;# 
   860  049D                     	;# 
   861  050C                     	;# 
   862  050C                     	;# 
   863  050D                     	;# 
   864  050E                     	;# 
   865  050F                     	;# 
   866  050F                     	;# 
   867  0510                     	;# 
   868  0511                     	;# 
   869  0512                     	;# 
   870  0512                     	;# 
   871  0513                     	;# 
   872  0514                     	;# 
   873  0515                     	;# 
   874  0515                     	;# 
   875  0516                     	;# 
   876  0517                     	;# 
   877  0518                     	;# 
   878  0519                     	;# 
   879  051A                     	;# 
   880  051B                     	;# 
   881  051C                     	;# 
   882  051D                     	;# 
   883  058C                     	;# 
   884  058C                     	;# 
   885  058D                     	;# 
   886  058E                     	;# 
   887  058F                     	;# 
   888  058F                     	;# 
   889  0590                     	;# 
   890  0591                     	;# 
   891  0592                     	;# 
   892  0593                     	;# 
   893  060C                     	;# 
   894  060D                     	;# 
   895  060E                     	;# 
   896  060F                     	;# 
   897  0610                     	;# 
   898  0611                     	;# 
   899  0612                     	;# 
   900  0613                     	;# 
   901  0614                     	;# 
   902  0616                     	;# 
   903  0617                     	;# 
   904  0618                     	;# 
   905  0619                     	;# 
   906  061A                     	;# 
   907  061B                     	;# 
   908  061C                     	;# 
   909  061D                     	;# 
   910  061E                     	;# 
   911  068C                     	;# 
   912  068D                     	;# 
   913  068E                     	;# 
   914  068F                     	;# 
   915  0690                     	;# 
   916  0691                     	;# 
   917  0692                     	;# 
   918  0693                     	;# 
   919  0694                     	;# 
   920  070C                     	;# 
   921  070D                     	;# 
   922  070E                     	;# 
   923  070F                     	;# 
   924  0710                     	;# 
   925  0711                     	;# 
   926  0712                     	;# 
   927  0713                     	;# 
   928  0714                     	;# 
   929  0716                     	;# 
   930  0717                     	;# 
   931  0718                     	;# 
   932  0719                     	;# 
   933  071A                     	;# 
   934  071B                     	;# 
   935  071C                     	;# 
   936  071D                     	;# 
   937  071E                     	;# 
   938  0796                     	;# 
   939  0797                     	;# 
   940  0798                     	;# 
   941  0799                     	;# 
   942  079A                     	;# 
   943  079B                     	;# 
   944  080C                     	;# 
   945  080D                     	;# 
   946  080E                     	;# 
   947  080F                     	;# 
   948  0810                     	;# 
   949  0811                     	;# 
   950  0812                     	;# 
   951  0813                     	;# 
   952  0814                     	;# 
   953  081A                     	;# 
   954  081B                     	;# 
   955  081C                     	;# 
   956  081D                     	;# 
   957  081E                     	;# 
   958  081F                     	;# 
   959  088C                     	;# 
   960  088D                     	;# 
   961  088E                     	;# 
   962  088F                     	;# 
   963  0890                     	;# 
   964  0891                     	;# 
   965  0892                     	;# 
   966  0893                     	;# 
   967  0895                     	;# 
   968  0896                     	;# 
   969  0897                     	;# 
   970  0898                     	;# 
   971  0899                     	;# 
   972  089A                     	;# 
   973  089B                     	;# 
   974  090C                     	;# 
   975  090E                     	;# 
   976  090F                     	;# 
   977  091F                     	;# 
   978  091F                     	;# 
   979  098F                     	;# 
   980  098F                     	;# 
   981  0990                     	;# 
   982  0991                     	;# 
   983  0992                     	;# 
   984  0993                     	;# 
   985  0994                     	;# 
   986  0995                     	;# 
   987  0996                     	;# 
   988  0997                     	;# 
   989  0E0F                     	;# 
   990  0E10                     	;# 
   991  0E11                     	;# 
   992  0E12                     	;# 
   993  0E13                     	;# 
   994  0E14                     	;# 
   995  0E15                     	;# 
   996  0E16                     	;# 
   997  0E17                     	;# 
   998  0E18                     	;# 
   999  0E19                     	;# 
  1000  0E1A                     	;# 
  1001  0E1B                     	;# 
  1002  0E1C                     	;# 
  1003  0E1D                     	;# 
  1004  0E1E                     	;# 
  1005  0E1F                     	;# 
  1006  0E20                     	;# 
  1007  0E21                     	;# 
  1008  0E22                     	;# 
  1009  0E23                     	;# 
  1010  0E24                     	;# 
  1011  0E25                     	;# 
  1012  0E26                     	;# 
  1013  0E27                     	;# 
  1014  0E28                     	;# 
  1015  0E29                     	;# 
  1016  0E2A                     	;# 
  1017  0E2B                     	;# 
  1018  0E2C                     	;# 
  1019  0E2D                     	;# 
  1020  0E2E                     	;# 
  1021  0E2F                     	;# 
  1022  0E30                     	;# 
  1023  0E31                     	;# 
  1024  0E32                     	;# 
  1025  0E33                     	;# 
  1026  0E34                     	;# 
  1027  0E35                     	;# 
  1028  0E36                     	;# 
  1029  0E37                     	;# 
  1030  0E8F                     	;# 
  1031  0E90                     	;# 
  1032  0E91                     	;# 
  1033  0E92                     	;# 
  1034  0E93                     	;# 
  1035  0E94                     	;# 
  1036  0E95                     	;# 
  1037  0E96                     	;# 
  1038  0E97                     	;# 
  1039  0E9C                     	;# 
  1040  0E9D                     	;# 
  1041  0E9E                     	;# 
  1042  0EA1                     	;# 
  1043  0EA2                     	;# 
  1044  0EA3                     	;# 
  1045  0EA4                     	;# 
  1046  0EA5                     	;# 
  1047  0EA9                     	;# 
  1048  0EAA                     	;# 
  1049  0EAB                     	;# 
  1050  0EAC                     	;# 
  1051  0EB1                     	;# 
  1052  0EB2                     	;# 
  1053  0EB3                     	;# 
  1054  0EB8                     	;# 
  1055  0EB9                     	;# 
  1056  0EBA                     	;# 
  1057  0EBB                     	;# 
  1058  0EBC                     	;# 
  1059  0EBD                     	;# 
  1060  0EBE                     	;# 
  1061  0EC3                     	;# 
  1062  0EC5                     	;# 
  1063  0EC6                     	;# 
  1064  0EC7                     	;# 
  1065  0EC8                     	;# 
  1066  0EC9                     	;# 
  1067  0ECA                     	;# 
  1068  0ECB                     	;# 
  1069  0ECC                     	;# 
  1070  0F10                     	;# 
  1071  0F11                     	;# 
  1072  0F12                     	;# 
  1073  0F13                     	;# 
  1074  0F14                     	;# 
  1075  0F15                     	;# 
  1076  0F16                     	;# 
  1077  0F17                     	;# 
  1078  0F18                     	;# 
  1079  0F19                     	;# 
  1080  0F1A                     	;# 
  1081  0F1B                     	;# 
  1082  0F1C                     	;# 
  1083  0F1D                     	;# 
  1084  0F1E                     	;# 
  1085  0F1F                     	;# 
  1086  0F20                     	;# 
  1087  0F21                     	;# 
  1088  0F22                     	;# 
  1089  0F23                     	;# 
  1090  0F24                     	;# 
  1091  0F25                     	;# 
  1092  0F26                     	;# 
  1093  0F27                     	;# 
  1094  0F38                     	;# 
  1095  0F39                     	;# 
  1096  0F3A                     	;# 
  1097  0F3B                     	;# 
  1098  0F3C                     	;# 
  1099  0F3D                     	;# 
  1100  0F3E                     	;# 
  1101  0F3F                     	;# 
  1102  0F40                     	;# 
  1103  0F41                     	;# 
  1104  0F43                     	;# 
  1105  0F44                     	;# 
  1106  0F45                     	;# 
  1107  0F46                     	;# 
  1108  0F47                     	;# 
  1109  0F48                     	;# 
  1110  0F49                     	;# 
  1111  0F4A                     	;# 
  1112  0F4B                     	;# 
  1113  0F4C                     	;# 
  1114  0F4E                     	;# 
  1115  0F4F                     	;# 
  1116  0F50                     	;# 
  1117  0F51                     	;# 
  1118  0F52                     	;# 
  1119  0F53                     	;# 
  1120  0F54                     	;# 
  1121  0F55                     	;# 
  1122  0F56                     	;# 
  1123  0F57                     	;# 
  1124  0F65                     	;# 
  1125  0F68                     	;# 
  1126  0F69                     	;# 
  1127  0F6A                     	;# 
  1128  0F6B                     	;# 
  1129  0FE4                     	;# 
  1130  0FE5                     	;# 
  1131  0FE6                     	;# 
  1132  0FE7                     	;# 
  1133  0FE8                     	;# 
  1134  0FE9                     	;# 
  1135  0FEA                     	;# 
  1136  0FEB                     	;# 
  1137  0FED                     	;# 
  1138  0FEE                     	;# 
  1139  0FEF                     	;# 
  1140  0000                     	;# 
  1141  0001                     	;# 
  1142  0002                     	;# 
  1143  0003                     	;# 
  1144  0004                     	;# 
  1145  0005                     	;# 
  1146  0006                     	;# 
  1147  0007                     	;# 
  1148  0008                     	;# 
  1149  0009                     	;# 
  1150  000A                     	;# 
  1151  000B                     	;# 
  1152  000C                     	;# 
  1153  000D                     	;# 
  1154  000E                     	;# 
  1155  0010                     	;# 
  1156  0011                     	;# 
  1157  0012                     	;# 
  1158  0013                     	;# 
  1159  0016                     	;# 
  1160  0017                     	;# 
  1161  0018                     	;# 
  1162  001C                     	;# 
  1163  001C                     	;# 
  1164  001D                     	;# 
  1165  001D                     	;# 
  1166  001E                     	;# 
  1167  001F                     	;# 
  1168  008C                     	;# 
  1169  008C                     	;# 
  1170  008D                     	;# 
  1171  008E                     	;# 
  1172  008E                     	;# 
  1173  008F                     	;# 
  1174  0090                     	;# 
  1175  0090                     	;# 
  1176  0091                     	;# 
  1177  0093                     	;# 
  1178  0094                     	;# 
  1179  0095                     	;# 
  1180  0096                     	;# 
  1181  0097                     	;# 
  1182  0098                     	;# 
  1183  0099                     	;# 
  1184  009A                     	;# 
  1185  009B                     	;# 
  1186  009C                     	;# 
  1187  009D                     	;# 
  1188  009E                     	;# 
  1189  010C                     	;# 
  1190  010D                     	;# 
  1191  010E                     	;# 
  1192  010E                     	;# 
  1193  010F                     	;# 
  1194  0110                     	;# 
  1195  0110                     	;# 
  1196  0111                     	;# 
  1197  0112                     	;# 
  1198  0112                     	;# 
  1199  0113                     	;# 
  1200  0114                     	;# 
  1201  0114                     	;# 
  1202  0115                     	;# 
  1203  0116                     	;# 
  1204  0116                     	;# 
  1205  0117                     	;# 
  1206  0119                     	;# 
  1207  0119                     	;# 
  1208  0119                     	;# 
  1209  011A                     	;# 
  1210  011A                     	;# 
  1211  011A                     	;# 
  1212  011B                     	;# 
  1213  011B                     	;# 
  1214  011B                     	;# 
  1215  011B                     	;# 
  1216  011B                     	;# 
  1217  011C                     	;# 
  1218  011C                     	;# 
  1219  011C                     	;# 
  1220  011D                     	;# 
  1221  011D                     	;# 
  1222  011D                     	;# 
  1223  011E                     	;# 
  1224  011E                     	;# 
  1225  011E                     	;# 
  1226  011F                     	;# 
  1227  011F                     	;# 
  1228  011F                     	;# 
  1229  011F                     	;# 
  1230  011F                     	;# 
  1231  018C                     	;# 
  1232  018D                     	;# 
  1233  018E                     	;# 
  1234  018F                     	;# 
  1235  0190                     	;# 
  1236  0191                     	;# 
  1237  0192                     	;# 
  1238  0196                     	;# 
  1239  0197                     	;# 
  1240  0198                     	;# 
  1241  0199                     	;# 
  1242  019A                     	;# 
  1243  019B                     	;# 
  1244  019C                     	;# 
  1245  020C                     	;# 
  1246  020C                     	;# 
  1247  020D                     	;# 
  1248  020E                     	;# 
  1249  020F                     	;# 
  1250  020F                     	;# 
  1251  0210                     	;# 
  1252  0210                     	;# 
  1253  0211                     	;# 
  1254  0211                     	;# 
  1255  0212                     	;# 
  1256  0212                     	;# 
  1257  0213                     	;# 
  1258  0214                     	;# 
  1259  0215                     	;# 
  1260  0215                     	;# 
  1261  0216                     	;# 
  1262  0216                     	;# 
  1263  0217                     	;# 
  1264  0217                     	;# 
  1265  0218                     	;# 
  1266  0218                     	;# 
  1267  0219                     	;# 
  1268  021A                     	;# 
  1269  021B                     	;# 
  1270  021B                     	;# 
  1271  021C                     	;# 
  1272  021C                     	;# 
  1273  021D                     	;# 
  1274  021D                     	;# 
  1275  021E                     	;# 
  1276  021F                     	;# 
  1277  028C                     	;# 
  1278  028C                     	;# 
  1279  028D                     	;# 
  1280  028D                     	;# 
  1281  028E                     	;# 
  1282  028F                     	;# 
  1283  0290                     	;# 
  1284  0290                     	;# 
  1285  0291                     	;# 
  1286  0292                     	;# 
  1287  0292                     	;# 
  1288  0293                     	;# 
  1289  0293                     	;# 
  1290  0294                     	;# 
  1291  0295                     	;# 
  1292  0296                     	;# 
  1293  0296                     	;# 
  1294  0297                     	;# 
  1295  0298                     	;# 
  1296  0298                     	;# 
  1297  0299                     	;# 
  1298  0299                     	;# 
  1299  029A                     	;# 
  1300  029B                     	;# 
  1301  029C                     	;# 
  1302  029C                     	;# 
  1303  029D                     	;# 
  1304  030C                     	;# 
  1305  030C                     	;# 
  1306  030D                     	;# 
  1307  030E                     	;# 
  1308  030F                     	;# 
  1309  0310                     	;# 
  1310  0310                     	;# 
  1311  0311                     	;# 
  1312  0312                     	;# 
  1313  0313                     	;# 
  1314  0314                     	;# 
  1315  0314                     	;# 
  1316  0315                     	;# 
  1317  0316                     	;# 
  1318  0317                     	;# 
  1319  0318                     	;# 
  1320  0318                     	;# 
  1321  0319                     	;# 
  1322  031A                     	;# 
  1323  031B                     	;# 
  1324  031C                     	;# 
  1325  031C                     	;# 
  1326  031D                     	;# 
  1327  031E                     	;# 
  1328  031F                     	;# 
  1329  038C                     	;# 
  1330  038D                     	;# 
  1331  038E                     	;# 
  1332  0390                     	;# 
  1333  0391                     	;# 
  1334  0392                     	;# 
  1335  040C                     	;# 
  1336  040D                     	;# 
  1337  040E                     	;# 
  1338  040F                     	;# 
  1339  0410                     	;# 
  1340  0411                     	;# 
  1341  0416                     	;# 
  1342  0416                     	;# 
  1343  0417                     	;# 
  1344  0418                     	;# 
  1345  0418                     	;# 
  1346  0419                     	;# 
  1347  041A                     	;# 
  1348  041A                     	;# 
  1349  041B                     	;# 
  1350  041C                     	;# 
  1351  041C                     	;# 
  1352  041D                     	;# 
  1353  041E                     	;# 
  1354  041F                     	;# 
  1355  048C                     	;# 
  1356  048C                     	;# 
  1357  048D                     	;# 
  1358  048E                     	;# 
  1359  048F                     	;# 
  1360  048F                     	;# 
  1361  0490                     	;# 
  1362  0491                     	;# 
  1363  0492                     	;# 
  1364  0492                     	;# 
  1365  0493                     	;# 
  1366  0494                     	;# 
  1367  0495                     	;# 
  1368  0495                     	;# 
  1369  0496                     	;# 
  1370  0497                     	;# 
  1371  0498                     	;# 
  1372  0499                     	;# 
  1373  049A                     	;# 
  1374  049B                     	;# 
  1375  049C                     	;# 
  1376  049D                     	;# 
  1377  050C                     	;# 
  1378  050C                     	;# 
  1379  050D                     	;# 
  1380  050E                     	;# 
  1381  050F                     	;# 
  1382  050F                     	;# 
  1383  0510                     	;# 
  1384  0511                     	;# 
  1385  0512                     	;# 
  1386  0512                     	;# 
  1387  0513                     	;# 
  1388  0514                     	;# 
  1389  0515                     	;# 
  1390  0515                     	;# 
  1391  0516                     	;# 
  1392  0517                     	;# 
  1393  0518                     	;# 
  1394  0519                     	;# 
  1395  051A                     	;# 
  1396  051B                     	;# 
  1397  051C                     	;# 
  1398  051D                     	;# 
  1399  058C                     	;# 
  1400  058C                     	;# 
  1401  058D                     	;# 
  1402  058E                     	;# 
  1403  058F                     	;# 
  1404  058F                     	;# 
  1405  0590                     	;# 
  1406  0591                     	;# 
  1407  0592                     	;# 
  1408  0593                     	;# 
  1409  060C                     	;# 
  1410  060D                     	;# 
  1411  060E                     	;# 
  1412  060F                     	;# 
  1413  0610                     	;# 
  1414  0611                     	;# 
  1415  0612                     	;# 
  1416  0613                     	;# 
  1417  0614                     	;# 
  1418  0616                     	;# 
  1419  0617                     	;# 
  1420  0618                     	;# 
  1421  0619                     	;# 
  1422  061A                     	;# 
  1423  061B                     	;# 
  1424  061C                     	;# 
  1425  061D                     	;# 
  1426  061E                     	;# 
  1427  068C                     	;# 
  1428  068D                     	;# 
  1429  068E                     	;# 
  1430  068F                     	;# 
  1431  0690                     	;# 
  1432  0691                     	;# 
  1433  0692                     	;# 
  1434  0693                     	;# 
  1435  0694                     	;# 
  1436  070C                     	;# 
  1437  070D                     	;# 
  1438  070E                     	;# 
  1439  070F                     	;# 
  1440  0710                     	;# 
  1441  0711                     	;# 
  1442  0712                     	;# 
  1443  0713                     	;# 
  1444  0714                     	;# 
  1445  0716                     	;# 
  1446  0717                     	;# 
  1447  0718                     	;# 
  1448  0719                     	;# 
  1449  071A                     	;# 
  1450  071B                     	;# 
  1451  071C                     	;# 
  1452  071D                     	;# 
  1453  071E                     	;# 
  1454  0796                     	;# 
  1455  0797                     	;# 
  1456  0798                     	;# 
  1457  0799                     	;# 
  1458  079A                     	;# 
  1459  079B                     	;# 
  1460  080C                     	;# 
  1461  080D                     	;# 
  1462  080E                     	;# 
  1463  080F                     	;# 
  1464  0810                     	;# 
  1465  0811                     	;# 
  1466  0812                     	;# 
  1467  0813                     	;# 
  1468  0814                     	;# 
  1469  081A                     	;# 
  1470  081B                     	;# 
  1471  081C                     	;# 
  1472  081D                     	;# 
  1473  081E                     	;# 
  1474  081F                     	;# 
  1475  088C                     	;# 
  1476  088D                     	;# 
  1477  088E                     	;# 
  1478  088F                     	;# 
  1479  0890                     	;# 
  1480  0891                     	;# 
  1481  0892                     	;# 
  1482  0893                     	;# 
  1483  0895                     	;# 
  1484  0896                     	;# 
  1485  0897                     	;# 
  1486  0898                     	;# 
  1487  0899                     	;# 
  1488  089A                     	;# 
  1489  089B                     	;# 
  1490  090C                     	;# 
  1491  090E                     	;# 
  1492  090F                     	;# 
  1493  091F                     	;# 
  1494  091F                     	;# 
  1495  098F                     	;# 
  1496  098F                     	;# 
  1497  0990                     	;# 
  1498  0991                     	;# 
  1499  0992                     	;# 
  1500  0993                     	;# 
  1501  0994                     	;# 
  1502  0995                     	;# 
  1503  0996                     	;# 
  1504  0997                     	;# 
  1505  0E0F                     	;# 
  1506  0E10                     	;# 
  1507  0E11                     	;# 
  1508  0E12                     	;# 
  1509  0E13                     	;# 
  1510  0E14                     	;# 
  1511  0E15                     	;# 
  1512  0E16                     	;# 
  1513  0E17                     	;# 
  1514  0E18                     	;# 
  1515  0E19                     	;# 
  1516  0E1A                     	;# 
  1517  0E1B                     	;# 
  1518  0E1C                     	;# 
  1519  0E1D                     	;# 
  1520  0E1E                     	;# 
  1521  0E1F                     	;# 
  1522  0E20                     	;# 
  1523  0E21                     	;# 
  1524  0E22                     	;# 
  1525  0E23                     	;# 
  1526  0E24                     	;# 
  1527  0E25                     	;# 
  1528  0E26                     	;# 
  1529  0E27                     	;# 
  1530  0E28                     	;# 
  1531  0E29                     	;# 
  1532  0E2A                     	;# 
  1533  0E2B                     	;# 
  1534  0E2C                     	;# 
  1535  0E2D                     	;# 
  1536  0E2E                     	;# 
  1537  0E2F                     	;# 
  1538  0E30                     	;# 
  1539  0E31                     	;# 
  1540  0E32                     	;# 
  1541  0E33                     	;# 
  1542  0E34                     	;# 
  1543  0E35                     	;# 
  1544  0E36                     	;# 
  1545  0E37                     	;# 
  1546  0E8F                     	;# 
  1547  0E90                     	;# 
  1548  0E91                     	;# 
  1549  0E92                     	;# 
  1550  0E93                     	;# 
  1551  0E94                     	;# 
  1552  0E95                     	;# 
  1553  0E96                     	;# 
  1554  0E97                     	;# 
  1555  0E9C                     	;# 
  1556  0E9D                     	;# 
  1557  0E9E                     	;# 
  1558  0EA1                     	;# 
  1559  0EA2                     	;# 
  1560  0EA3                     	;# 
  1561  0EA4                     	;# 
  1562  0EA5                     	;# 
  1563  0EA9                     	;# 
  1564  0EAA                     	;# 
  1565  0EAB                     	;# 
  1566  0EAC                     	;# 
  1567  0EB1                     	;# 
  1568  0EB2                     	;# 
  1569  0EB3                     	;# 
  1570  0EB8                     	;# 
  1571  0EB9                     	;# 
  1572  0EBA                     	;# 
  1573  0EBB                     	;# 
  1574  0EBC                     	;# 
  1575  0EBD                     	;# 
  1576  0EBE                     	;# 
  1577  0EC3                     	;# 
  1578  0EC5                     	;# 
  1579  0EC6                     	;# 
  1580  0EC7                     	;# 
  1581  0EC8                     	;# 
  1582  0EC9                     	;# 
  1583  0ECA                     	;# 
  1584  0ECB                     	;# 
  1585  0ECC                     	;# 
  1586  0F10                     	;# 
  1587  0F11                     	;# 
  1588  0F12                     	;# 
  1589  0F13                     	;# 
  1590  0F14                     	;# 
  1591  0F15                     	;# 
  1592  0F16                     	;# 
  1593  0F17                     	;# 
  1594  0F18                     	;# 
  1595  0F19                     	;# 
  1596  0F1A                     	;# 
  1597  0F1B                     	;# 
  1598  0F1C                     	;# 
  1599  0F1D                     	;# 
  1600  0F1E                     	;# 
  1601  0F1F                     	;# 
  1602  0F20                     	;# 
  1603  0F21                     	;# 
  1604  0F22                     	;# 
  1605  0F23                     	;# 
  1606  0F24                     	;# 
  1607  0F25                     	;# 
  1608  0F26                     	;# 
  1609  0F27                     	;# 
  1610  0F38                     	;# 
  1611  0F39                     	;# 
  1612  0F3A                     	;# 
  1613  0F3B                     	;# 
  1614  0F3C                     	;# 
  1615  0F3D                     	;# 
  1616  0F3E                     	;# 
  1617  0F3F                     	;# 
  1618  0F40                     	;# 
  1619  0F41                     	;# 
  1620  0F43                     	;# 
  1621  0F44                     	;# 
  1622  0F45                     	;# 
  1623  0F46                     	;# 
  1624  0F47                     	;# 
  1625  0F48                     	;# 
  1626  0F49                     	;# 
  1627  0F4A                     	;# 
  1628  0F4B                     	;# 
  1629  0F4C                     	;# 
  1630  0F4E                     	;# 
  1631  0F4F                     	;# 
  1632  0F50                     	;# 
  1633  0F51                     	;# 
  1634  0F52                     	;# 
  1635  0F53                     	;# 
  1636  0F54                     	;# 
  1637  0F55                     	;# 
  1638  0F56                     	;# 
  1639  0F57                     	;# 
  1640  0F65                     	;# 
  1641  0F68                     	;# 
  1642  0F69                     	;# 
  1643  0F6A                     	;# 
  1644  0F6B                     	;# 
  1645  0FE4                     	;# 
  1646  0FE5                     	;# 
  1647  0FE6                     	;# 
  1648  0FE7                     	;# 
  1649  0FE8                     	;# 
  1650  0FE9                     	;# 
  1651  0FEA                     	;# 
  1652  0FEB                     	;# 
  1653  0FED                     	;# 
  1654  0FEE                     	;# 
  1655  0FEF                     	;# 
  1656  0000                     	;# 
  1657  0001                     	;# 
  1658  0002                     	;# 
  1659  0003                     	;# 
  1660  0004                     	;# 
  1661  0005                     	;# 
  1662  0006                     	;# 
  1663  0007                     	;# 
  1664  0008                     	;# 
  1665  0009                     	;# 
  1666  000A                     	;# 
  1667  000B                     	;# 
  1668  000C                     	;# 
  1669  000D                     	;# 
  1670  000E                     	;# 
  1671  0010                     	;# 
  1672  0011                     	;# 
  1673  0012                     	;# 
  1674  0013                     	;# 
  1675  0016                     	;# 
  1676  0017                     	;# 
  1677  0018                     	;# 
  1678  001C                     	;# 
  1679  001C                     	;# 
  1680  001D                     	;# 
  1681  001D                     	;# 
  1682  001E                     	;# 
  1683  001F                     	;# 
  1684  008C                     	;# 
  1685  008C                     	;# 
  1686  008D                     	;# 
  1687  008E                     	;# 
  1688  008E                     	;# 
  1689  008F                     	;# 
  1690  0090                     	;# 
  1691  0090                     	;# 
  1692  0091                     	;# 
  1693  0093                     	;# 
  1694  0094                     	;# 
  1695  0095                     	;# 
  1696  0096                     	;# 
  1697  0097                     	;# 
  1698  0098                     	;# 
  1699  0099                     	;# 
  1700  009A                     	;# 
  1701  009B                     	;# 
  1702  009C                     	;# 
  1703  009D                     	;# 
  1704  009E                     	;# 
  1705  010C                     	;# 
  1706  010D                     	;# 
  1707  010E                     	;# 
  1708  010E                     	;# 
  1709  010F                     	;# 
  1710  0110                     	;# 
  1711  0110                     	;# 
  1712  0111                     	;# 
  1713  0112                     	;# 
  1714  0112                     	;# 
  1715  0113                     	;# 
  1716  0114                     	;# 
  1717  0114                     	;# 
  1718  0115                     	;# 
  1719  0116                     	;# 
  1720  0116                     	;# 
  1721  0117                     	;# 
  1722  0119                     	;# 
  1723  0119                     	;# 
  1724  0119                     	;# 
  1725  011A                     	;# 
  1726  011A                     	;# 
  1727  011A                     	;# 
  1728  011B                     	;# 
  1729  011B                     	;# 
  1730  011B                     	;# 
  1731  011B                     	;# 
  1732  011B                     	;# 
  1733  011C                     	;# 
  1734  011C                     	;# 
  1735  011C                     	;# 
  1736  011D                     	;# 
  1737  011D                     	;# 
  1738  011D                     	;# 
  1739  011E                     	;# 
  1740  011E                     	;# 
  1741  011E                     	;# 
  1742  011F                     	;# 
  1743  011F                     	;# 
  1744  011F                     	;# 
  1745  011F                     	;# 
  1746  011F                     	;# 
  1747  018C                     	;# 
  1748  018D                     	;# 
  1749  018E                     	;# 
  1750  018F                     	;# 
  1751  0190                     	;# 
  1752  0191                     	;# 
  1753  0192                     	;# 
  1754  0196                     	;# 
  1755  0197                     	;# 
  1756  0198                     	;# 
  1757  0199                     	;# 
  1758  019A                     	;# 
  1759  019B                     	;# 
  1760  019C                     	;# 
  1761  020C                     	;# 
  1762  020C                     	;# 
  1763  020D                     	;# 
  1764  020E                     	;# 
  1765  020F                     	;# 
  1766  020F                     	;# 
  1767  0210                     	;# 
  1768  0210                     	;# 
  1769  0211                     	;# 
  1770  0211                     	;# 
  1771  0212                     	;# 
  1772  0212                     	;# 
  1773  0213                     	;# 
  1774  0214                     	;# 
  1775  0215                     	;# 
  1776  0215                     	;# 
  1777  0216                     	;# 
  1778  0216                     	;# 
  1779  0217                     	;# 
  1780  0217                     	;# 
  1781  0218                     	;# 
  1782  0218                     	;# 
  1783  0219                     	;# 
  1784  021A                     	;# 
  1785  021B                     	;# 
  1786  021B                     	;# 
  1787  021C                     	;# 
  1788  021C                     	;# 
  1789  021D                     	;# 
  1790  021D                     	;# 
  1791  021E                     	;# 
  1792  021F                     	;# 
  1793  028C                     	;# 
  1794  028C                     	;# 
  1795  028D                     	;# 
  1796  028D                     	;# 
  1797  028E                     	;# 
  1798  028F                     	;# 
  1799  0290                     	;# 
  1800  0290                     	;# 
  1801  0291                     	;# 
  1802  0292                     	;# 
  1803  0292                     	;# 
  1804  0293                     	;# 
  1805  0293                     	;# 
  1806  0294                     	;# 
  1807  0295                     	;# 
  1808  0296                     	;# 
  1809  0296                     	;# 
  1810  0297                     	;# 
  1811  0298                     	;# 
  1812  0298                     	;# 
  1813  0299                     	;# 
  1814  0299                     	;# 
  1815  029A                     	;# 
  1816  029B                     	;# 
  1817  029C                     	;# 
  1818  029C                     	;# 
  1819  029D                     	;# 
  1820  030C                     	;# 
  1821  030C                     	;# 
  1822  030D                     	;# 
  1823  030E                     	;# 
  1824  030F                     	;# 
  1825  0310                     	;# 
  1826  0310                     	;# 
  1827  0311                     	;# 
  1828  0312                     	;# 
  1829  0313                     	;# 
  1830  0314                     	;# 
  1831  0314                     	;# 
  1832  0315                     	;# 
  1833  0316                     	;# 
  1834  0317                     	;# 
  1835  0318                     	;# 
  1836  0318                     	;# 
  1837  0319                     	;# 
  1838  031A                     	;# 
  1839  031B                     	;# 
  1840  031C                     	;# 
  1841  031C                     	;# 
  1842  031D                     	;# 
  1843  031E                     	;# 
  1844  031F                     	;# 
  1845  038C                     	;# 
  1846  038D                     	;# 
  1847  038E                     	;# 
  1848  0390                     	;# 
  1849  0391                     	;# 
  1850  0392                     	;# 
  1851  040C                     	;# 
  1852  040D                     	;# 
  1853  040E                     	;# 
  1854  040F                     	;# 
  1855  0410                     	;# 
  1856  0411                     	;# 
  1857  0416                     	;# 
  1858  0416                     	;# 
  1859  0417                     	;# 
  1860  0418                     	;# 
  1861  0418                     	;# 
  1862  0419                     	;# 
  1863  041A                     	;# 
  1864  041A                     	;# 
  1865  041B                     	;# 
  1866  041C                     	;# 
  1867  041C                     	;# 
  1868  041D                     	;# 
  1869  041E                     	;# 
  1870  041F                     	;# 
  1871  048C                     	;# 
  1872  048C                     	;# 
  1873  048D                     	;# 
  1874  048E                     	;# 
  1875  048F                     	;# 
  1876  048F                     	;# 
  1877  0490                     	;# 
  1878  0491                     	;# 
  1879  0492                     	;# 
  1880  0492                     	;# 
  1881  0493                     	;# 
  1882  0494                     	;# 
  1883  0495                     	;# 
  1884  0495                     	;# 
  1885  0496                     	;# 
  1886  0497                     	;# 
  1887  0498                     	;# 
  1888  0499                     	;# 
  1889  049A                     	;# 
  1890  049B                     	;# 
  1891  049C                     	;# 
  1892  049D                     	;# 
  1893  050C                     	;# 
  1894  050C                     	;# 
  1895  050D                     	;# 
  1896  050E                     	;# 
  1897  050F                     	;# 
  1898  050F                     	;# 
  1899  0510                     	;# 
  1900  0511                     	;# 
  1901  0512                     	;# 
  1902  0512                     	;# 
  1903  0513                     	;# 
  1904  0514                     	;# 
  1905  0515                     	;# 
  1906  0515                     	;# 
  1907  0516                     	;# 
  1908  0517                     	;# 
  1909  0518                     	;# 
  1910  0519                     	;# 
  1911  051A                     	;# 
  1912  051B                     	;# 
  1913  051C                     	;# 
  1914  051D                     	;# 
  1915  058C                     	;# 
  1916  058C                     	;# 
  1917  058D                     	;# 
  1918  058E                     	;# 
  1919  058F                     	;# 
  1920  058F                     	;# 
  1921  0590                     	;# 
  1922  0591                     	;# 
  1923  0592                     	;# 
  1924  0593                     	;# 
  1925  060C                     	;# 
  1926  060D                     	;# 
  1927  060E                     	;# 
  1928  060F                     	;# 
  1929  0610                     	;# 
  1930  0611                     	;# 
  1931  0612                     	;# 
  1932  0613                     	;# 
  1933  0614                     	;# 
  1934  0616                     	;# 
  1935  0617                     	;# 
  1936  0618                     	;# 
  1937  0619                     	;# 
  1938  061A                     	;# 
  1939  061B                     	;# 
  1940  061C                     	;# 
  1941  061D                     	;# 
  1942  061E                     	;# 
  1943  068C                     	;# 
  1944  068D                     	;# 
  1945  068E                     	;# 
  1946  068F                     	;# 
  1947  0690                     	;# 
  1948  0691                     	;# 
  1949  0692                     	;# 
  1950  0693                     	;# 
  1951  0694                     	;# 
  1952  070C                     	;# 
  1953  070D                     	;# 
  1954  070E                     	;# 
  1955  070F                     	;# 
  1956  0710                     	;# 
  1957  0711                     	;# 
  1958  0712                     	;# 
  1959  0713                     	;# 
  1960  0714                     	;# 
  1961  0716                     	;# 
  1962  0717                     	;# 
  1963  0718                     	;# 
  1964  0719                     	;# 
  1965  071A                     	;# 
  1966  071B                     	;# 
  1967  071C                     	;# 
  1968  071D                     	;# 
  1969  071E                     	;# 
  1970  0796                     	;# 
  1971  0797                     	;# 
  1972  0798                     	;# 
  1973  0799                     	;# 
  1974  079A                     	;# 
  1975  079B                     	;# 
  1976  080C                     	;# 
  1977  080D                     	;# 
  1978  080E                     	;# 
  1979  080F                     	;# 
  1980  0810                     	;# 
  1981  0811                     	;# 
  1982  0812                     	;# 
  1983  0813                     	;# 
  1984  0814                     	;# 
  1985  081A                     	;# 
  1986  081B                     	;# 
  1987  081C                     	;# 
  1988  081D                     	;# 
  1989  081E                     	;# 
  1990  081F                     	;# 
  1991  088C                     	;# 
  1992  088D                     	;# 
  1993  088E                     	;# 
  1994  088F                     	;# 
  1995  0890                     	;# 
  1996  0891                     	;# 
  1997  0892                     	;# 
  1998  0893                     	;# 
  1999  0895                     	;# 
  2000  0896                     	;# 
  2001  0897                     	;# 
  2002  0898                     	;# 
  2003  0899                     	;# 
  2004  089A                     	;# 
  2005  089B                     	;# 
  2006  090C                     	;# 
  2007  090E                     	;# 
  2008  090F                     	;# 
  2009  091F                     	;# 
  2010  091F                     	;# 
  2011  098F                     	;# 
  2012  098F                     	;# 
  2013  0990                     	;# 
  2014  0991                     	;# 
  2015  0992                     	;# 
  2016  0993                     	;# 
  2017  0994                     	;# 
  2018  0995                     	;# 
  2019  0996                     	;# 
  2020  0997                     	;# 
  2021  0E0F                     	;# 
  2022  0E10                     	;# 
  2023  0E11                     	;# 
  2024  0E12                     	;# 
  2025  0E13                     	;# 
  2026  0E14                     	;# 
  2027  0E15                     	;# 
  2028  0E16                     	;# 
  2029  0E17                     	;# 
  2030  0E18                     	;# 
  2031  0E19                     	;# 
  2032  0E1A                     	;# 
  2033  0E1B                     	;# 
  2034  0E1C                     	;# 
  2035  0E1D                     	;# 
  2036  0E1E                     	;# 
  2037  0E1F                     	;# 
  2038  0E20                     	;# 
  2039  0E21                     	;# 
  2040  0E22                     	;# 
  2041  0E23                     	;# 
  2042  0E24                     	;# 
  2043  0E25                     	;# 
  2044  0E26                     	;# 
  2045  0E27                     	;# 
  2046  0E28                     	;# 
  2047  0E29                     	;# 
  2048  0E2A                     	;# 
  2049  0E2B                     	;# 
  2050  0E2C                     	;# 
  2051  0E2D                     	;# 
  2052  0E2E                     	;# 
  2053  0E2F                     	;# 
  2054  0E30                     	;# 
  2055  0E31                     	;# 
  2056  0E32                     	;# 
  2057  0E33                     	;# 
  2058  0E34                     	;# 
  2059  0E35                     	;# 
  2060  0E36                     	;# 
  2061  0E37                     	;# 
  2062  0E8F                     	;# 
  2063  0E90                     	;# 
  2064  0E91                     	;# 
  2065  0E92                     	;# 
  2066  0E93                     	;# 
  2067  0E94                     	;# 
  2068  0E95                     	;# 
  2069  0E96                     	;# 
  2070  0E97                     	;# 
  2071  0E9C                     	;# 
  2072  0E9D                     	;# 
  2073  0E9E                     	;# 
  2074  0EA1                     	;# 
  2075  0EA2                     	;# 
  2076  0EA3                     	;# 
  2077  0EA4                     	;# 
  2078  0EA5                     	;# 
  2079  0EA9                     	;# 
  2080  0EAA                     	;# 
  2081  0EAB                     	;# 
  2082  0EAC                     	;# 
  2083  0EB1                     	;# 
  2084  0EB2                     	;# 
  2085  0EB3                     	;# 
  2086  0EB8                     	;# 
  2087  0EB9                     	;# 
  2088  0EBA                     	;# 
  2089  0EBB                     	;# 
  2090  0EBC                     	;# 
  2091  0EBD                     	;# 
  2092  0EBE                     	;# 
  2093  0EC3                     	;# 
  2094  0EC5                     	;# 
  2095  0EC6                     	;# 
  2096  0EC7                     	;# 
  2097  0EC8                     	;# 
  2098  0EC9                     	;# 
  2099  0ECA                     	;# 
  2100  0ECB                     	;# 
  2101  0ECC                     	;# 
  2102  0F10                     	;# 
  2103  0F11                     	;# 
  2104  0F12                     	;# 
  2105  0F13                     	;# 
  2106  0F14                     	;# 
  2107  0F15                     	;# 
  2108  0F16                     	;# 
  2109  0F17                     	;# 
  2110  0F18                     	;# 
  2111  0F19                     	;# 
  2112  0F1A                     	;# 
  2113  0F1B                     	;# 
  2114  0F1C                     	;# 
  2115  0F1D                     	;# 
  2116  0F1E                     	;# 
  2117  0F1F                     	;# 
  2118  0F20                     	;# 
  2119  0F21                     	;# 
  2120  0F22                     	;# 
  2121  0F23                     	;# 
  2122  0F24                     	;# 
  2123  0F25                     	;# 
  2124  0F26                     	;# 
  2125  0F27                     	;# 
  2126  0F38                     	;# 
  2127  0F39                     	;# 
  2128  0F3A                     	;# 
  2129  0F3B                     	;# 
  2130  0F3C                     	;# 
  2131  0F3D                     	;# 
  2132  0F3E                     	;# 
  2133  0F3F                     	;# 
  2134  0F40                     	;# 
  2135  0F41                     	;# 
  2136  0F43                     	;# 
  2137  0F44                     	;# 
  2138  0F45                     	;# 
  2139  0F46                     	;# 
  2140  0F47                     	;# 
  2141  0F48                     	;# 
  2142  0F49                     	;# 
  2143  0F4A                     	;# 
  2144  0F4B                     	;# 
  2145  0F4C                     	;# 
  2146  0F4E                     	;# 
  2147  0F4F                     	;# 
  2148  0F50                     	;# 
  2149  0F51                     	;# 
  2150  0F52                     	;# 
  2151  0F53                     	;# 
  2152  0F54                     	;# 
  2153  0F55                     	;# 
  2154  0F56                     	;# 
  2155  0F57                     	;# 
  2156  0F65                     	;# 
  2157  0F68                     	;# 
  2158  0F69                     	;# 
  2159  0F6A                     	;# 
  2160  0F6B                     	;# 
  2161  0FE4                     	;# 
  2162  0FE5                     	;# 
  2163  0FE6                     	;# 
  2164  0FE7                     	;# 
  2165  0FE8                     	;# 
  2166  0FE9                     	;# 
  2167  0FEA                     	;# 
  2168  0FEB                     	;# 
  2169  0FED                     	;# 
  2170  0FEE                     	;# 
  2171  0FEF                     	;# 
  2172  0000                     	;# 
  2173  0001                     	;# 
  2174  0002                     	;# 
  2175  0003                     	;# 
  2176  0004                     	;# 
  2177  0005                     	;# 
  2178  0006                     	;# 
  2179  0007                     	;# 
  2180  0008                     	;# 
  2181  0009                     	;# 
  2182  000A                     	;# 
  2183  000B                     	;# 
  2184  000C                     	;# 
  2185  000D                     	;# 
  2186  000E                     	;# 
  2187  0010                     	;# 
  2188  0011                     	;# 
  2189  0012                     	;# 
  2190  0013                     	;# 
  2191  0016                     	;# 
  2192  0017                     	;# 
  2193  0018                     	;# 
  2194  001C                     	;# 
  2195  001C                     	;# 
  2196  001D                     	;# 
  2197  001D                     	;# 
  2198  001E                     	;# 
  2199  001F                     	;# 
  2200  008C                     	;# 
  2201  008C                     	;# 
  2202  008D                     	;# 
  2203  008E                     	;# 
  2204  008E                     	;# 
  2205  008F                     	;# 
  2206  0090                     	;# 
  2207  0090                     	;# 
  2208  0091                     	;# 
  2209  0093                     	;# 
  2210  0094                     	;# 
  2211  0095                     	;# 
  2212  0096                     	;# 
  2213  0097                     	;# 
  2214  0098                     	;# 
  2215  0099                     	;# 
  2216  009A                     	;# 
  2217  009B                     	;# 
  2218  009C                     	;# 
  2219  009D                     	;# 
  2220  009E                     	;# 
  2221  010C                     	;# 
  2222  010D                     	;# 
  2223  010E                     	;# 
  2224  010E                     	;# 
  2225  010F                     	;# 
  2226  0110                     	;# 
  2227  0110                     	;# 
  2228  0111                     	;# 
  2229  0112                     	;# 
  2230  0112                     	;# 
  2231  0113                     	;# 
  2232  0114                     	;# 
  2233  0114                     	;# 
  2234  0115                     	;# 
  2235  0116                     	;# 
  2236  0116                     	;# 
  2237  0117                     	;# 
  2238  0119                     	;# 
  2239  0119                     	;# 
  2240  0119                     	;# 
  2241  011A                     	;# 
  2242  011A                     	;# 
  2243  011A                     	;# 
  2244  011B                     	;# 
  2245  011B                     	;# 
  2246  011B                     	;# 
  2247  011B                     	;# 
  2248  011B                     	;# 
  2249  011C                     	;# 
  2250  011C                     	;# 
  2251  011C                     	;# 
  2252  011D                     	;# 
  2253  011D                     	;# 
  2254  011D                     	;# 
  2255  011E                     	;# 
  2256  011E                     	;# 
  2257  011E                     	;# 
  2258  011F                     	;# 
  2259  011F                     	;# 
  2260  011F                     	;# 
  2261  011F                     	;# 
  2262  011F                     	;# 
  2263  018C                     	;# 
  2264  018D                     	;# 
  2265  018E                     	;# 
  2266  018F                     	;# 
  2267  0190                     	;# 
  2268  0191                     	;# 
  2269  0192                     	;# 
  2270  0196                     	;# 
  2271  0197                     	;# 
  2272  0198                     	;# 
  2273  0199                     	;# 
  2274  019A                     	;# 
  2275  019B                     	;# 
  2276  019C                     	;# 
  2277  020C                     	;# 
  2278  020C                     	;# 
  2279  020D                     	;# 
  2280  020E                     	;# 
  2281  020F                     	;# 
  2282  020F                     	;# 
  2283  0210                     	;# 
  2284  0210                     	;# 
  2285  0211                     	;# 
  2286  0211                     	;# 
  2287  0212                     	;# 
  2288  0212                     	;# 
  2289  0213                     	;# 
  2290  0214                     	;# 
  2291  0215                     	;# 
  2292  0215                     	;# 
  2293  0216                     	;# 
  2294  0216                     	;# 
  2295  0217                     	;# 
  2296  0217                     	;# 
  2297  0218                     	;# 
  2298  0218                     	;# 
  2299  0219                     	;# 
  2300  021A                     	;# 
  2301  021B                     	;# 
  2302  021B                     	;# 
  2303  021C                     	;# 
  2304  021C                     	;# 
  2305  021D                     	;# 
  2306  021D                     	;# 
  2307  021E                     	;# 
  2308  021F                     	;# 
  2309  028C                     	;# 
  2310  028C                     	;# 
  2311  028D                     	;# 
  2312  028D                     	;# 
  2313  028E                     	;# 
  2314  028F                     	;# 
  2315  0290                     	;# 
  2316  0290                     	;# 
  2317  0291                     	;# 
  2318  0292                     	;# 
  2319  0292                     	;# 
  2320  0293                     	;# 
  2321  0293                     	;# 
  2322  0294                     	;# 
  2323  0295                     	;# 
  2324  0296                     	;# 
  2325  0296                     	;# 
  2326  0297                     	;# 
  2327  0298                     	;# 
  2328  0298                     	;# 
  2329  0299                     	;# 
  2330  0299                     	;# 
  2331  029A                     	;# 
  2332  029B                     	;# 
  2333  029C                     	;# 
  2334  029C                     	;# 
  2335  029D                     	;# 
  2336  030C                     	;# 
  2337  030C                     	;# 
  2338  030D                     	;# 
  2339  030E                     	;# 
  2340  030F                     	;# 
  2341  0310                     	;# 
  2342  0310                     	;# 
  2343  0311                     	;# 
  2344  0312                     	;# 
  2345  0313                     	;# 
  2346  0314                     	;# 
  2347  0314                     	;# 
  2348  0315                     	;# 
  2349  0316                     	;# 
  2350  0317                     	;# 
  2351  0318                     	;# 
  2352  0318                     	;# 
  2353  0319                     	;# 
  2354  031A                     	;# 
  2355  031B                     	;# 
  2356  031C                     	;# 
  2357  031C                     	;# 
  2358  031D                     	;# 
  2359  031E                     	;# 
  2360  031F                     	;# 
  2361  038C                     	;# 
  2362  038D                     	;# 
  2363  038E                     	;# 
  2364  0390                     	;# 
  2365  0391                     	;# 
  2366  0392                     	;# 
  2367  040C                     	;# 
  2368  040D                     	;# 
  2369  040E                     	;# 
  2370  040F                     	;# 
  2371  0410                     	;# 
  2372  0411                     	;# 
  2373  0416                     	;# 
  2374  0416                     	;# 
  2375  0417                     	;# 
  2376  0418                     	;# 
  2377  0418                     	;# 
  2378  0419                     	;# 
  2379  041A                     	;# 
  2380  041A                     	;# 
  2381  041B                     	;# 
  2382  041C                     	;# 
  2383  041C                     	;# 
  2384  041D                     	;# 
  2385  041E                     	;# 
  2386  041F                     	;# 
  2387  048C                     	;# 
  2388  048C                     	;# 
  2389  048D                     	;# 
  2390  048E                     	;# 
  2391  048F                     	;# 
  2392  048F                     	;# 
  2393  0490                     	;# 
  2394  0491                     	;# 
  2395  0492                     	;# 
  2396  0492                     	;# 
  2397  0493                     	;# 
  2398  0494                     	;# 
  2399  0495                     	;# 
  2400  0495                     	;# 
  2401  0496                     	;# 
  2402  0497                     	;# 
  2403  0498                     	;# 
  2404  0499                     	;# 
  2405  049A                     	;# 
  2406  049B                     	;# 
  2407  049C                     	;# 
  2408  049D                     	;# 
  2409  050C                     	;# 
  2410  050C                     	;# 
  2411  050D                     	;# 
  2412  050E                     	;# 
  2413  050F                     	;# 
  2414  050F                     	;# 
  2415  0510                     	;# 
  2416  0511                     	;# 
  2417  0512                     	;# 
  2418  0512                     	;# 
  2419  0513                     	;# 
  2420  0514                     	;# 
  2421  0515                     	;# 
  2422  0515                     	;# 
  2423  0516                     	;# 
  2424  0517                     	;# 
  2425  0518                     	;# 
  2426  0519                     	;# 
  2427  051A                     	;# 
  2428  051B                     	;# 
  2429  051C                     	;# 
  2430  051D                     	;# 
  2431  058C                     	;# 
  2432  058C                     	;# 
  2433  058D                     	;# 
  2434  058E                     	;# 
  2435  058F                     	;# 
  2436  058F                     	;# 
  2437  0590                     	;# 
  2438  0591                     	;# 
  2439  0592                     	;# 
  2440  0593                     	;# 
  2441  060C                     	;# 
  2442  060D                     	;# 
  2443  060E                     	;# 
  2444  060F                     	;# 
  2445  0610                     	;# 
  2446  0611                     	;# 
  2447  0612                     	;# 
  2448  0613                     	;# 
  2449  0614                     	;# 
  2450  0616                     	;# 
  2451  0617                     	;# 
  2452  0618                     	;# 
  2453  0619                     	;# 
  2454  061A                     	;# 
  2455  061B                     	;# 
  2456  061C                     	;# 
  2457  061D                     	;# 
  2458  061E                     	;# 
  2459  068C                     	;# 
  2460  068D                     	;# 
  2461  068E                     	;# 
  2462  068F                     	;# 
  2463  0690                     	;# 
  2464  0691                     	;# 
  2465  0692                     	;# 
  2466  0693                     	;# 
  2467  0694                     	;# 
  2468  070C                     	;# 
  2469  070D                     	;# 
  2470  070E                     	;# 
  2471  070F                     	;# 
  2472  0710                     	;# 
  2473  0711                     	;# 
  2474  0712                     	;# 
  2475  0713                     	;# 
  2476  0714                     	;# 
  2477  0716                     	;# 
  2478  0717                     	;# 
  2479  0718                     	;# 
  2480  0719                     	;# 
  2481  071A                     	;# 
  2482  071B                     	;# 
  2483  071C                     	;# 
  2484  071D                     	;# 
  2485  071E                     	;# 
  2486  0796                     	;# 
  2487  0797                     	;# 
  2488  0798                     	;# 
  2489  0799                     	;# 
  2490  079A                     	;# 
  2491  079B                     	;# 
  2492  080C                     	;# 
  2493  080D                     	;# 
  2494  080E                     	;# 
  2495  080F                     	;# 
  2496  0810                     	;# 
  2497  0811                     	;# 
  2498  0812                     	;# 
  2499  0813                     	;# 
  2500  0814                     	;# 
  2501  081A                     	;# 
  2502  081B                     	;# 
  2503  081C                     	;# 
  2504  081D                     	;# 
  2505  081E                     	;# 
  2506  081F                     	;# 
  2507  088C                     	;# 
  2508  088D                     	;# 
  2509  088E                     	;# 
  2510  088F                     	;# 
  2511  0890                     	;# 
  2512  0891                     	;# 
  2513  0892                     	;# 
  2514  0893                     	;# 
  2515  0895                     	;# 
  2516  0896                     	;# 
  2517  0897                     	;# 
  2518  0898                     	;# 
  2519  0899                     	;# 
  2520  089A                     	;# 
  2521  089B                     	;# 
  2522  090C                     	;# 
  2523  090E                     	;# 
  2524  090F                     	;# 
  2525  091F                     	;# 
  2526  091F                     	;# 
  2527  098F                     	;# 
  2528  098F                     	;# 
  2529  0990                     	;# 
  2530  0991                     	;# 
  2531  0992                     	;# 
  2532  0993                     	;# 
  2533  0994                     	;# 
  2534  0995                     	;# 
  2535  0996                     	;# 
  2536  0997                     	;# 
  2537  0E0F                     	;# 
  2538  0E10                     	;# 
  2539  0E11                     	;# 
  2540  0E12                     	;# 
  2541  0E13                     	;# 
  2542  0E14                     	;# 
  2543  0E15                     	;# 
  2544  0E16                     	;# 
  2545  0E17                     	;# 
  2546  0E18                     	;# 
  2547  0E19                     	;# 
  2548  0E1A                     	;# 
  2549  0E1B                     	;# 
  2550  0E1C                     	;# 
  2551  0E1D                     	;# 
  2552  0E1E                     	;# 
  2553  0E1F                     	;# 
  2554  0E20                     	;# 
  2555  0E21                     	;# 
  2556  0E22                     	;# 
  2557  0E23                     	;# 
  2558  0E24                     	;# 
  2559  0E25                     	;# 
  2560  0E26                     	;# 
  2561  0E27                     	;# 
  2562  0E28                     	;# 
  2563  0E29                     	;# 
  2564  0E2A                     	;# 
  2565  0E2B                     	;# 
  2566  0E2C                     	;# 
  2567  0E2D                     	;# 
  2568  0E2E                     	;# 
  2569  0E2F                     	;# 
  2570  0E30                     	;# 
  2571  0E31                     	;# 
  2572  0E32                     	;# 
  2573  0E33                     	;# 
  2574  0E34                     	;# 
  2575  0E35                     	;# 
  2576  0E36                     	;# 
  2577  0E37                     	;# 
  2578  0E8F                     	;# 
  2579  0E90                     	;# 
  2580  0E91                     	;# 
  2581  0E92                     	;# 
  2582  0E93                     	;# 
  2583  0E94                     	;# 
  2584  0E95                     	;# 
  2585  0E96                     	;# 
  2586  0E97                     	;# 
  2587  0E9C                     	;# 
  2588  0E9D                     	;# 
  2589  0E9E                     	;# 
  2590  0EA1                     	;# 
  2591  0EA2                     	;# 
  2592  0EA3                     	;# 
  2593  0EA4                     	;# 
  2594  0EA5                     	;# 
  2595  0EA9                     	;# 
  2596  0EAA                     	;# 
  2597  0EAB                     	;# 
  2598  0EAC                     	;# 
  2599  0EB1                     	;# 
  2600  0EB2                     	;# 
  2601  0EB3                     	;# 
  2602  0EB8                     	;# 
  2603  0EB9                     	;# 
  2604  0EBA                     	;# 
  2605  0EBB                     	;# 
  2606  0EBC                     	;# 
  2607  0EBD                     	;# 
  2608  0EBE                     	;# 
  2609  0EC3                     	;# 
  2610  0EC5                     	;# 
  2611  0EC6                     	;# 
  2612  0EC7                     	;# 
  2613  0EC8                     	;# 
  2614  0EC9                     	;# 
  2615  0ECA                     	;# 
  2616  0ECB                     	;# 
  2617  0ECC                     	;# 
  2618  0F10                     	;# 
  2619  0F11                     	;# 
  2620  0F12                     	;# 
  2621  0F13                     	;# 
  2622  0F14                     	;# 
  2623  0F15                     	;# 
  2624  0F16                     	;# 
  2625  0F17                     	;# 
  2626  0F18                     	;# 
  2627  0F19                     	;# 
  2628  0F1A                     	;# 
  2629  0F1B                     	;# 
  2630  0F1C                     	;# 
  2631  0F1D                     	;# 
  2632  0F1E                     	;# 
  2633  0F1F                     	;# 
  2634  0F20                     	;# 
  2635  0F21                     	;# 
  2636  0F22                     	;# 
  2637  0F23                     	;# 
  2638  0F24                     	;# 
  2639  0F25                     	;# 
  2640  0F26                     	;# 
  2641  0F27                     	;# 
  2642  0F38                     	;# 
  2643  0F39                     	;# 
  2644  0F3A                     	;# 
  2645  0F3B                     	;# 
  2646  0F3C                     	;# 
  2647  0F3D                     	;# 
  2648  0F3E                     	;# 
  2649  0F3F                     	;# 
  2650  0F40                     	;# 
  2651  0F41                     	;# 
  2652  0F43                     	;# 
  2653  0F44                     	;# 
  2654  0F45                     	;# 
  2655  0F46                     	;# 
  2656  0F47                     	;# 
  2657  0F48                     	;# 
  2658  0F49                     	;# 
  2659  0F4A                     	;# 
  2660  0F4B                     	;# 
  2661  0F4C                     	;# 
  2662  0F4E                     	;# 
  2663  0F4F                     	;# 
  2664  0F50                     	;# 
  2665  0F51                     	;# 
  2666  0F52                     	;# 
  2667  0F53                     	;# 
  2668  0F54                     	;# 
  2669  0F55                     	;# 
  2670  0F56                     	;# 
  2671  0F57                     	;# 
  2672  0F65                     	;# 
  2673  0F68                     	;# 
  2674  0F69                     	;# 
  2675  0F6A                     	;# 
  2676  0F6B                     	;# 
  2677  0FE4                     	;# 
  2678  0FE5                     	;# 
  2679  0FE6                     	;# 
  2680  0FE7                     	;# 
  2681  0FE8                     	;# 
  2682  0FE9                     	;# 
  2683  0FEA                     	;# 
  2684  0FEB                     	;# 
  2685  0FED                     	;# 
  2686  0FEE                     	;# 
  2687  0FEF                     	;# 
  2688  0000                     	;# 
  2689  0001                     	;# 
  2690  0002                     	;# 
  2691  0003                     	;# 
  2692  0004                     	;# 
  2693  0005                     	;# 
  2694  0006                     	;# 
  2695  0007                     	;# 
  2696  0008                     	;# 
  2697  0009                     	;# 
  2698  000A                     	;# 
  2699  000B                     	;# 
  2700  000C                     	;# 
  2701  000D                     	;# 
  2702  000E                     	;# 
  2703  0010                     	;# 
  2704  0011                     	;# 
  2705  0012                     	;# 
  2706  0013                     	;# 
  2707  0016                     	;# 
  2708  0017                     	;# 
  2709  0018                     	;# 
  2710  001C                     	;# 
  2711  001C                     	;# 
  2712  001D                     	;# 
  2713  001D                     	;# 
  2714  001E                     	;# 
  2715  001F                     	;# 
  2716  008C                     	;# 
  2717  008C                     	;# 
  2718  008D                     	;# 
  2719  008E                     	;# 
  2720  008E                     	;# 
  2721  008F                     	;# 
  2722  0090                     	;# 
  2723  0090                     	;# 
  2724  0091                     	;# 
  2725  0093                     	;# 
  2726  0094                     	;# 
  2727  0095                     	;# 
  2728  0096                     	;# 
  2729  0097                     	;# 
  2730  0098                     	;# 
  2731  0099                     	;# 
  2732  009A                     	;# 
  2733  009B                     	;# 
  2734  009C                     	;# 
  2735  009D                     	;# 
  2736  009E                     	;# 
  2737  010C                     	;# 
  2738  010D                     	;# 
  2739  010E                     	;# 
  2740  010E                     	;# 
  2741  010F                     	;# 
  2742  0110                     	;# 
  2743  0110                     	;# 
  2744  0111                     	;# 
  2745  0112                     	;# 
  2746  0112                     	;# 
  2747  0113                     	;# 
  2748  0114                     	;# 
  2749  0114                     	;# 
  2750  0115                     	;# 
  2751  0116                     	;# 
  2752  0116                     	;# 
  2753  0117                     	;# 
  2754  0119                     	;# 
  2755  0119                     	;# 
  2756  0119                     	;# 
  2757  011A                     	;# 
  2758  011A                     	;# 
  2759  011A                     	;# 
  2760  011B                     	;# 
  2761  011B                     	;# 
  2762  011B                     	;# 
  2763  011B                     	;# 
  2764  011B                     	;# 
  2765  011C                     	;# 
  2766  011C                     	;# 
  2767  011C                     	;# 
  2768  011D                     	;# 
  2769  011D                     	;# 
  2770  011D                     	;# 
  2771  011E                     	;# 
  2772  011E                     	;# 
  2773  011E                     	;# 
  2774  011F                     	;# 
  2775  011F                     	;# 
  2776  011F                     	;# 
  2777  011F                     	;# 
  2778  011F                     	;# 
  2779  018C                     	;# 
  2780  018D                     	;# 
  2781  018E                     	;# 
  2782  018F                     	;# 
  2783  0190                     	;# 
  2784  0191                     	;# 
  2785  0192                     	;# 
  2786  0196                     	;# 
  2787  0197                     	;# 
  2788  0198                     	;# 
  2789  0199                     	;# 
  2790  019A                     	;# 
  2791  019B                     	;# 
  2792  019C                     	;# 
  2793  020C                     	;# 
  2794  020C                     	;# 
  2795  020D                     	;# 
  2796  020E                     	;# 
  2797  020F                     	;# 
  2798  020F                     	;# 
  2799  0210                     	;# 
  2800  0210                     	;# 
  2801  0211                     	;# 
  2802  0211                     	;# 
  2803  0212                     	;# 
  2804  0212                     	;# 
  2805  0213                     	;# 
  2806  0214                     	;# 
  2807  0215                     	;# 
  2808  0215                     	;# 
  2809  0216                     	;# 
  2810  0216                     	;# 
  2811  0217                     	;# 
  2812  0217                     	;# 
  2813  0218                     	;# 
  2814  0218                     	;# 
  2815  0219                     	;# 
  2816  021A                     	;# 
  2817  021B                     	;# 
  2818  021B                     	;# 
  2819  021C                     	;# 
  2820  021C                     	;# 
  2821  021D                     	;# 
  2822  021D                     	;# 
  2823  021E                     	;# 
  2824  021F                     	;# 
  2825  028C                     	;# 
  2826  028C                     	;# 
  2827  028D                     	;# 
  2828  028D                     	;# 
  2829  028E                     	;# 
  2830  028F                     	;# 
  2831  0290                     	;# 
  2832  0290                     	;# 
  2833  0291                     	;# 
  2834  0292                     	;# 
  2835  0292                     	;# 
  2836  0293                     	;# 
  2837  0293                     	;# 
  2838  0294                     	;# 
  2839  0295                     	;# 
  2840  0296                     	;# 
  2841  0296                     	;# 
  2842  0297                     	;# 
  2843  0298                     	;# 
  2844  0298                     	;# 
  2845  0299                     	;# 
  2846  0299                     	;# 
  2847  029A                     	;# 
  2848  029B                     	;# 
  2849  029C                     	;# 
  2850  029C                     	;# 
  2851  029D                     	;# 
  2852  030C                     	;# 
  2853  030C                     	;# 
  2854  030D                     	;# 
  2855  030E                     	;# 
  2856  030F                     	;# 
  2857  0310                     	;# 
  2858  0310                     	;# 
  2859  0311                     	;# 
  2860  0312                     	;# 
  2861  0313                     	;# 
  2862  0314                     	;# 
  2863  0314                     	;# 
  2864  0315                     	;# 
  2865  0316                     	;# 
  2866  0317                     	;# 
  2867  0318                     	;# 
  2868  0318                     	;# 
  2869  0319                     	;# 
  2870  031A                     	;# 
  2871  031B                     	;# 
  2872  031C                     	;# 
  2873  031C                     	;# 
  2874  031D                     	;# 
  2875  031E                     	;# 
  2876  031F                     	;# 
  2877  038C                     	;# 
  2878  038D                     	;# 
  2879  038E                     	;# 
  2880  0390                     	;# 
  2881  0391                     	;# 
  2882  0392                     	;# 
  2883  040C                     	;# 
  2884  040D                     	;# 
  2885  040E                     	;# 
  2886  040F                     	;# 
  2887  0410                     	;# 
  2888  0411                     	;# 
  2889  0416                     	;# 
  2890  0416                     	;# 
  2891  0417                     	;# 
  2892  0418                     	;# 
  2893  0418                     	;# 
  2894  0419                     	;# 
  2895  041A                     	;# 
  2896  041A                     	;# 
  2897  041B                     	;# 
  2898  041C                     	;# 
  2899  041C                     	;# 
  2900  041D                     	;# 
  2901  041E                     	;# 
  2902  041F                     	;# 
  2903  048C                     	;# 
  2904  048C                     	;# 
  2905  048D                     	;# 
  2906  048E                     	;# 
  2907  048F                     	;# 
  2908  048F                     	;# 
  2909  0490                     	;# 
  2910  0491                     	;# 
  2911  0492                     	;# 
  2912  0492                     	;# 
  2913  0493                     	;# 
  2914  0494                     	;# 
  2915  0495                     	;# 
  2916  0495                     	;# 
  2917  0496                     	;# 
  2918  0497                     	;# 
  2919  0498                     	;# 
  2920  0499                     	;# 
  2921  049A                     	;# 
  2922  049B                     	;# 
  2923  049C                     	;# 
  2924  049D                     	;# 
  2925  050C                     	;# 
  2926  050C                     	;# 
  2927  050D                     	;# 
  2928  050E                     	;# 
  2929  050F                     	;# 
  2930  050F                     	;# 
  2931  0510                     	;# 
  2932  0511                     	;# 
  2933  0512                     	;# 
  2934  0512                     	;# 
  2935  0513                     	;# 
  2936  0514                     	;# 
  2937  0515                     	;# 
  2938  0515                     	;# 
  2939  0516                     	;# 
  2940  0517                     	;# 
  2941  0518                     	;# 
  2942  0519                     	;# 
  2943  051A                     	;# 
  2944  051B                     	;# 
  2945  051C                     	;# 
  2946  051D                     	;# 
  2947  058C                     	;# 
  2948  058C                     	;# 
  2949  058D                     	;# 
  2950  058E                     	;# 
  2951  058F                     	;# 
  2952  058F                     	;# 
  2953  0590                     	;# 
  2954  0591                     	;# 
  2955  0592                     	;# 
  2956  0593                     	;# 
  2957  060C                     	;# 
  2958  060D                     	;# 
  2959  060E                     	;# 
  2960  060F                     	;# 
  2961  0610                     	;# 
  2962  0611                     	;# 
  2963  0612                     	;# 
  2964  0613                     	;# 
  2965  0614                     	;# 
  2966  0616                     	;# 
  2967  0617                     	;# 
  2968  0618                     	;# 
  2969  0619                     	;# 
  2970  061A                     	;# 
  2971  061B                     	;# 
  2972  061C                     	;# 
  2973  061D                     	;# 
  2974  061E                     	;# 
  2975  068C                     	;# 
  2976  068D                     	;# 
  2977  068E                     	;# 
  2978  068F                     	;# 
  2979  0690                     	;# 
  2980  0691                     	;# 
  2981  0692                     	;# 
  2982  0693                     	;# 
  2983  0694                     	;# 
  2984  070C                     	;# 
  2985  070D                     	;# 
  2986  070E                     	;# 
  2987  070F                     	;# 
  2988  0710                     	;# 
  2989  0711                     	;# 
  2990  0712                     	;# 
  2991  0713                     	;# 
  2992  0714                     	;# 
  2993  0716                     	;# 
  2994  0717                     	;# 
  2995  0718                     	;# 
  2996  0719                     	;# 
  2997  071A                     	;# 
  2998  071B                     	;# 
  2999  071C                     	;# 
  3000  071D                     	;# 
  3001  071E                     	;# 
  3002  0796                     	;# 
  3003  0797                     	;# 
  3004  0798                     	;# 
  3005  0799                     	;# 
  3006  079A                     	;# 
  3007  079B                     	;# 
  3008  080C                     	;# 
  3009  080D                     	;# 
  3010  080E                     	;# 
  3011  080F                     	;# 
  3012  0810                     	;# 
  3013  0811                     	;# 
  3014  0812                     	;# 
  3015  0813                     	;# 
  3016  0814                     	;# 
  3017  081A                     	;# 
  3018  081B                     	;# 
  3019  081C                     	;# 
  3020  081D                     	;# 
  3021  081E                     	;# 
  3022  081F                     	;# 
  3023  088C                     	;# 
  3024  088D                     	;# 
  3025  088E                     	;# 
  3026  088F                     	;# 
  3027  0890                     	;# 
  3028  0891                     	;# 
  3029  0892                     	;# 
  3030  0893                     	;# 
  3031  0895                     	;# 
  3032  0896                     	;# 
  3033  0897                     	;# 
  3034  0898                     	;# 
  3035  0899                     	;# 
  3036  089A                     	;# 
  3037  089B                     	;# 
  3038  090C                     	;# 
  3039  090E                     	;# 
  3040  090F                     	;# 
  3041  091F                     	;# 
  3042  091F                     	;# 
  3043  098F                     	;# 
  3044  098F                     	;# 
  3045  0990                     	;# 
  3046  0991                     	;# 
  3047  0992                     	;# 
  3048  0993                     	;# 
  3049  0994                     	;# 
  3050  0995                     	;# 
  3051  0996                     	;# 
  3052  0997                     	;# 
  3053  0E0F                     	;# 
  3054  0E10                     	;# 
  3055  0E11                     	;# 
  3056  0E12                     	;# 
  3057  0E13                     	;# 
  3058  0E14                     	;# 
  3059  0E15                     	;# 
  3060  0E16                     	;# 
  3061  0E17                     	;# 
  3062  0E18                     	;# 
  3063  0E19                     	;# 
  3064  0E1A                     	;# 
  3065  0E1B                     	;# 
  3066  0E1C                     	;# 
  3067  0E1D                     	;# 
  3068  0E1E                     	;# 
  3069  0E1F                     	;# 
  3070  0E20                     	;# 
  3071  0E21                     	;# 
  3072  0E22                     	;# 
  3073  0E23                     	;# 
  3074  0E24                     	;# 
  3075  0E25                     	;# 
  3076  0E26                     	;# 
  3077  0E27                     	;# 
  3078  0E28                     	;# 
  3079  0E29                     	;# 
  3080  0E2A                     	;# 
  3081  0E2B                     	;# 
  3082  0E2C                     	;# 
  3083  0E2D                     	;# 
  3084  0E2E                     	;# 
  3085  0E2F                     	;# 
  3086  0E30                     	;# 
  3087  0E31                     	;# 
  3088  0E32                     	;# 
  3089  0E33                     	;# 
  3090  0E34                     	;# 
  3091  0E35                     	;# 
  3092  0E36                     	;# 
  3093  0E37                     	;# 
  3094  0E8F                     	;# 
  3095  0E90                     	;# 
  3096  0E91                     	;# 
  3097  0E92                     	;# 
  3098  0E93                     	;# 
  3099  0E94                     	;# 
  3100  0E95                     	;# 
  3101  0E96                     	;# 
  3102  0E97                     	;# 
  3103  0E9C                     	;# 
  3104  0E9D                     	;# 
  3105  0E9E                     	;# 
  3106  0EA1                     	;# 
  3107  0EA2                     	;# 
  3108  0EA3                     	;# 
  3109  0EA4                     	;# 
  3110  0EA5                     	;# 
  3111  0EA9                     	;# 
  3112  0EAA                     	;# 
  3113  0EAB                     	;# 
  3114  0EAC                     	;# 
  3115  0EB1                     	;# 
  3116  0EB2                     	;# 
  3117  0EB3                     	;# 
  3118  0EB8                     	;# 
  3119  0EB9                     	;# 
  3120  0EBA                     	;# 
  3121  0EBB                     	;# 
  3122  0EBC                     	;# 
  3123  0EBD                     	;# 
  3124  0EBE                     	;# 
  3125  0EC3                     	;# 
  3126  0EC5                     	;# 
  3127  0EC6                     	;# 
  3128  0EC7                     	;# 
  3129  0EC8                     	;# 
  3130  0EC9                     	;# 
  3131  0ECA                     	;# 
  3132  0ECB                     	;# 
  3133  0ECC                     	;# 
  3134  0F10                     	;# 
  3135  0F11                     	;# 
  3136  0F12                     	;# 
  3137  0F13                     	;# 
  3138  0F14                     	;# 
  3139  0F15                     	;# 
  3140  0F16                     	;# 
  3141  0F17                     	;# 
  3142  0F18                     	;# 
  3143  0F19                     	;# 
  3144  0F1A                     	;# 
  3145  0F1B                     	;# 
  3146  0F1C                     	;# 
  3147  0F1D                     	;# 
  3148  0F1E                     	;# 
  3149  0F1F                     	;# 
  3150  0F20                     	;# 
  3151  0F21                     	;# 
  3152  0F22                     	;# 
  3153  0F23                     	;# 
  3154  0F24                     	;# 
  3155  0F25                     	;# 
  3156  0F26                     	;# 
  3157  0F27                     	;# 
  3158  0F38                     	;# 
  3159  0F39                     	;# 
  3160  0F3A                     	;# 
  3161  0F3B                     	;# 
  3162  0F3C                     	;# 
  3163  0F3D                     	;# 
  3164  0F3E                     	;# 
  3165  0F3F                     	;# 
  3166  0F40                     	;# 
  3167  0F41                     	;# 
  3168  0F43                     	;# 
  3169  0F44                     	;# 
  3170  0F45                     	;# 
  3171  0F46                     	;# 
  3172  0F47                     	;# 
  3173  0F48                     	;# 
  3174  0F49                     	;# 
  3175  0F4A                     	;# 
  3176  0F4B                     	;# 
  3177  0F4C                     	;# 
  3178  0F4E                     	;# 
  3179  0F4F                     	;# 
  3180  0F50                     	;# 
  3181  0F51                     	;# 
  3182  0F52                     	;# 
  3183  0F53                     	;# 
  3184  0F54                     	;# 
  3185  0F55                     	;# 
  3186  0F56                     	;# 
  3187  0F57                     	;# 
  3188  0F65                     	;# 
  3189  0F68                     	;# 
  3190  0F69                     	;# 
  3191  0F6A                     	;# 
  3192  0F6B                     	;# 
  3193  0FE4                     	;# 
  3194  0FE5                     	;# 
  3195  0FE6                     	;# 
  3196  0FE7                     	;# 
  3197  0FE8                     	;# 
  3198  0FE9                     	;# 
  3199  0FEA                     	;# 
  3200  0FEB                     	;# 
  3201  0FED                     	;# 
  3202  0FEE                     	;# 
  3203  0FEF                     	;# 
  3204  0000                     	;# 
  3205  0001                     	;# 
  3206  0002                     	;# 
  3207  0003                     	;# 
  3208  0004                     	;# 
  3209  0005                     	;# 
  3210  0006                     	;# 
  3211  0007                     	;# 
  3212  0008                     	;# 
  3213  0009                     	;# 
  3214  000A                     	;# 
  3215  000B                     	;# 
  3216  000C                     	;# 
  3217  000D                     	;# 
  3218  000E                     	;# 
  3219  0010                     	;# 
  3220  0011                     	;# 
  3221  0012                     	;# 
  3222  0013                     	;# 
  3223  0016                     	;# 
  3224  0017                     	;# 
  3225  0018                     	;# 
  3226  001C                     	;# 
  3227  001C                     	;# 
  3228  001D                     	;# 
  3229  001D                     	;# 
  3230  001E                     	;# 
  3231  001F                     	;# 
  3232  008C                     	;# 
  3233  008C                     	;# 
  3234  008D                     	;# 
  3235  008E                     	;# 
  3236  008E                     	;# 
  3237  008F                     	;# 
  3238  0090                     	;# 
  3239  0090                     	;# 
  3240  0091                     	;# 
  3241  0093                     	;# 
  3242  0094                     	;# 
  3243  0095                     	;# 
  3244  0096                     	;# 
  3245  0097                     	;# 
  3246  0098                     	;# 
  3247  0099                     	;# 
  3248  009A                     	;# 
  3249  009B                     	;# 
  3250  009C                     	;# 
  3251  009D                     	;# 
  3252  009E                     	;# 
  3253  010C                     	;# 
  3254  010D                     	;# 
  3255  010E                     	;# 
  3256  010E                     	;# 
  3257  010F                     	;# 
  3258  0110                     	;# 
  3259  0110                     	;# 
  3260  0111                     	;# 
  3261  0112                     	;# 
  3262  0112                     	;# 
  3263  0113                     	;# 
  3264  0114                     	;# 
  3265  0114                     	;# 
  3266  0115                     	;# 
  3267  0116                     	;# 
  3268  0116                     	;# 
  3269  0117                     	;# 
  3270  0119                     	;# 
  3271  0119                     	;# 
  3272  0119                     	;# 
  3273  011A                     	;# 
  3274  011A                     	;# 
  3275  011A                     	;# 
  3276  011B                     	;# 
  3277  011B                     	;# 
  3278  011B                     	;# 
  3279  011B                     	;# 
  3280  011B                     	;# 
  3281  011C                     	;# 
  3282  011C                     	;# 
  3283  011C                     	;# 
  3284  011D                     	;# 
  3285  011D                     	;# 
  3286  011D                     	;# 
  3287  011E                     	;# 
  3288  011E                     	;# 
  3289  011E                     	;# 
  3290  011F                     	;# 
  3291  011F                     	;# 
  3292  011F                     	;# 
  3293  011F                     	;# 
  3294  011F                     	;# 
  3295  018C                     	;# 
  3296  018D                     	;# 
  3297  018E                     	;# 
  3298  018F                     	;# 
  3299  0190                     	;# 
  3300  0191                     	;# 
  3301  0192                     	;# 
  3302  0196                     	;# 
  3303  0197                     	;# 
  3304  0198                     	;# 
  3305  0199                     	;# 
  3306  019A                     	;# 
  3307  019B                     	;# 
  3308  019C                     	;# 
  3309  020C                     	;# 
  3310  020C                     	;# 
  3311  020D                     	;# 
  3312  020E                     	;# 
  3313  020F                     	;# 
  3314  020F                     	;# 
  3315  0210                     	;# 
  3316  0210                     	;# 
  3317  0211                     	;# 
  3318  0211                     	;# 
  3319  0212                     	;# 
  3320  0212                     	;# 
  3321  0213                     	;# 
  3322  0214                     	;# 
  3323  0215                     	;# 
  3324  0215                     	;# 
  3325  0216                     	;# 
  3326  0216                     	;# 
  3327  0217                     	;# 
  3328  0217                     	;# 
  3329  0218                     	;# 
  3330  0218                     	;# 
  3331  0219                     	;# 
  3332  021A                     	;# 
  3333  021B                     	;# 
  3334  021B                     	;# 
  3335  021C                     	;# 
  3336  021C                     	;# 
  3337  021D                     	;# 
  3338  021D                     	;# 
  3339  021E                     	;# 
  3340  021F                     	;# 
  3341  028C                     	;# 
  3342  028C                     	;# 
  3343  028D                     	;# 
  3344  028D                     	;# 
  3345  028E                     	;# 
  3346  028F                     	;# 
  3347  0290                     	;# 
  3348  0290                     	;# 
  3349  0291                     	;# 
  3350  0292                     	;# 
  3351  0292                     	;# 
  3352  0293                     	;# 
  3353  0293                     	;# 
  3354  0294                     	;# 
  3355  0295                     	;# 
  3356  0296                     	;# 
  3357  0296                     	;# 
  3358  0297                     	;# 
  3359  0298                     	;# 
  3360  0298                     	;# 
  3361  0299                     	;# 
  3362  0299                     	;# 
  3363  029A                     	;# 
  3364  029B                     	;# 
  3365  029C                     	;# 
  3366  029C                     	;# 
  3367  029D                     	;# 
  3368  030C                     	;# 
  3369  030C                     	;# 
  3370  030D                     	;# 
  3371  030E                     	;# 
  3372  030F                     	;# 
  3373  0310                     	;# 
  3374  0310                     	;# 
  3375  0311                     	;# 
  3376  0312                     	;# 
  3377  0313                     	;# 
  3378  0314                     	;# 
  3379  0314                     	;# 
  3380  0315                     	;# 
  3381  0316                     	;# 
  3382  0317                     	;# 
  3383  0318                     	;# 
  3384  0318                     	;# 
  3385  0319                     	;# 
  3386  031A                     	;# 
  3387  031B                     	;# 
  3388  031C                     	;# 
  3389  031C                     	;# 
  3390  031D                     	;# 
  3391  031E                     	;# 
  3392  031F                     	;# 
  3393  038C                     	;# 
  3394  038D                     	;# 
  3395  038E                     	;# 
  3396  0390                     	;# 
  3397  0391                     	;# 
  3398  0392                     	;# 
  3399  040C                     	;# 
  3400  040D                     	;# 
  3401  040E                     	;# 
  3402  040F                     	;# 
  3403  0410                     	;# 
  3404  0411                     	;# 
  3405  0416                     	;# 
  3406  0416                     	;# 
  3407  0417                     	;# 
  3408  0418                     	;# 
  3409  0418                     	;# 
  3410  0419                     	;# 
  3411  041A                     	;# 
  3412  041A                     	;# 
  3413  041B                     	;# 
  3414  041C                     	;# 
  3415  041C                     	;# 
  3416  041D                     	;# 
  3417  041E                     	;# 
  3418  041F                     	;# 
  3419  048C                     	;# 
  3420  048C                     	;# 
  3421  048D                     	;# 
  3422  048E                     	;# 
  3423  048F                     	;# 
  3424  048F                     	;# 
  3425  0490                     	;# 
  3426  0491                     	;# 
  3427  0492                     	;# 
  3428  0492                     	;# 
  3429  0493                     	;# 
  3430  0494                     	;# 
  3431  0495                     	;# 
  3432  0495                     	;# 
  3433  0496                     	;# 
  3434  0497                     	;# 
  3435  0498                     	;# 
  3436  0499                     	;# 
  3437  049A                     	;# 
  3438  049B                     	;# 
  3439  049C                     	;# 
  3440  049D                     	;# 
  3441  050C                     	;# 
  3442  050C                     	;# 
  3443  050D                     	;# 
  3444  050E                     	;# 
  3445  050F                     	;# 
  3446  050F                     	;# 
  3447  0510                     	;# 
  3448  0511                     	;# 
  3449  0512                     	;# 
  3450  0512                     	;# 
  3451  0513                     	;# 
  3452  0514                     	;# 
  3453  0515                     	;# 
  3454  0515                     	;# 
  3455  0516                     	;# 
  3456  0517                     	;# 
  3457  0518                     	;# 
  3458  0519                     	;# 
  3459  051A                     	;# 
  3460  051B                     	;# 
  3461  051C                     	;# 
  3462  051D                     	;# 
  3463  058C                     	;# 
  3464  058C                     	;# 
  3465  058D                     	;# 
  3466  058E                     	;# 
  3467  058F                     	;# 
  3468  058F                     	;# 
  3469  0590                     	;# 
  3470  0591                     	;# 
  3471  0592                     	;# 
  3472  0593                     	;# 
  3473  060C                     	;# 
  3474  060D                     	;# 
  3475  060E                     	;# 
  3476  060F                     	;# 
  3477  0610                     	;# 
  3478  0611                     	;# 
  3479  0612                     	;# 
  3480  0613                     	;# 
  3481  0614                     	;# 
  3482  0616                     	;# 
  3483  0617                     	;# 
  3484  0618                     	;# 
  3485  0619                     	;# 
  3486  061A                     	;# 
  3487  061B                     	;# 
  3488  061C                     	;# 
  3489  061D                     	;# 
  3490  061E                     	;# 
  3491  068C                     	;# 
  3492  068D                     	;# 
  3493  068E                     	;# 
  3494  068F                     	;# 
  3495  0690                     	;# 
  3496  0691                     	;# 
  3497  0692                     	;# 
  3498  0693                     	;# 
  3499  0694                     	;# 
  3500  070C                     	;# 
  3501  070D                     	;# 
  3502  070E                     	;# 
  3503  070F                     	;# 
  3504  0710                     	;# 
  3505  0711                     	;# 
  3506  0712                     	;# 
  3507  0713                     	;# 
  3508  0714                     	;# 
  3509  0716                     	;# 
  3510  0717                     	;# 
  3511  0718                     	;# 
  3512  0719                     	;# 
  3513  071A                     	;# 
  3514  071B                     	;# 
  3515  071C                     	;# 
  3516  071D                     	;# 
  3517  071E                     	;# 
  3518  0796                     	;# 
  3519  0797                     	;# 
  3520  0798                     	;# 
  3521  0799                     	;# 
  3522  079A                     	;# 
  3523  079B                     	;# 
  3524  080C                     	;# 
  3525  080D                     	;# 
  3526  080E                     	;# 
  3527  080F                     	;# 
  3528  0810                     	;# 
  3529  0811                     	;# 
  3530  0812                     	;# 
  3531  0813                     	;# 
  3532  0814                     	;# 
  3533  081A                     	;# 
  3534  081B                     	;# 
  3535  081C                     	;# 
  3536  081D                     	;# 
  3537  081E                     	;# 
  3538  081F                     	;# 
  3539  088C                     	;# 
  3540  088D                     	;# 
  3541  088E                     	;# 
  3542  088F                     	;# 
  3543  0890                     	;# 
  3544  0891                     	;# 
  3545  0892                     	;# 
  3546  0893                     	;# 
  3547  0895                     	;# 
  3548  0896                     	;# 
  3549  0897                     	;# 
  3550  0898                     	;# 
  3551  0899                     	;# 
  3552  089A                     	;# 
  3553  089B                     	;# 
  3554  090C                     	;# 
  3555  090E                     	;# 
  3556  090F                     	;# 
  3557  091F                     	;# 
  3558  091F                     	;# 
  3559  098F                     	;# 
  3560  098F                     	;# 
  3561  0990                     	;# 
  3562  0991                     	;# 
  3563  0992                     	;# 
  3564  0993                     	;# 
  3565  0994                     	;# 
  3566  0995                     	;# 
  3567  0996                     	;# 
  3568  0997                     	;# 
  3569  0E0F                     	;# 
  3570  0E10                     	;# 
  3571  0E11                     	;# 
  3572  0E12                     	;# 
  3573  0E13                     	;# 
  3574  0E14                     	;# 
  3575  0E15                     	;# 
  3576  0E16                     	;# 
  3577  0E17                     	;# 
  3578  0E18                     	;# 
  3579  0E19                     	;# 
  3580  0E1A                     	;# 
  3581  0E1B                     	;# 
  3582  0E1C                     	;# 
  3583  0E1D                     	;# 
  3584  0E1E                     	;# 
  3585  0E1F                     	;# 
  3586  0E20                     	;# 
  3587  0E21                     	;# 
  3588  0E22                     	;# 
  3589  0E23                     	;# 
  3590  0E24                     	;# 
  3591  0E25                     	;# 
  3592  0E26                     	;# 
  3593  0E27                     	;# 
  3594  0E28                     	;# 
  3595  0E29                     	;# 
  3596  0E2A                     	;# 
  3597  0E2B                     	;# 
  3598  0E2C                     	;# 
  3599  0E2D                     	;# 
  3600  0E2E                     	;# 
  3601  0E2F                     	;# 
  3602  0E30                     	;# 
  3603  0E31                     	;# 
  3604  0E32                     	;# 
  3605  0E33                     	;# 
  3606  0E34                     	;# 
  3607  0E35                     	;# 
  3608  0E36                     	;# 
  3609  0E37                     	;# 
  3610  0E8F                     	;# 
  3611  0E90                     	;# 
  3612  0E91                     	;# 
  3613  0E92                     	;# 
  3614  0E93                     	;# 
  3615  0E94                     	;# 
  3616  0E95                     	;# 
  3617  0E96                     	;# 
  3618  0E97                     	;# 
  3619  0E9C                     	;# 
  3620  0E9D                     	;# 
  3621  0E9E                     	;# 
  3622  0EA1                     	;# 
  3623  0EA2                     	;# 
  3624  0EA3                     	;# 
  3625  0EA4                     	;# 
  3626  0EA5                     	;# 
  3627  0EA9                     	;# 
  3628  0EAA                     	;# 
  3629  0EAB                     	;# 
  3630  0EAC                     	;# 
  3631  0EB1                     	;# 
  3632  0EB2                     	;# 
  3633  0EB3                     	;# 
  3634  0EB8                     	;# 
  3635  0EB9                     	;# 
  3636  0EBA                     	;# 
  3637  0EBB                     	;# 
  3638  0EBC                     	;# 
  3639  0EBD                     	;# 
  3640  0EBE                     	;# 
  3641  0EC3                     	;# 
  3642  0EC5                     	;# 
  3643  0EC6                     	;# 
  3644  0EC7                     	;# 
  3645  0EC8                     	;# 
  3646  0EC9                     	;# 
  3647  0ECA                     	;# 
  3648  0ECB                     	;# 
  3649  0ECC                     	;# 
  3650  0F10                     	;# 
  3651  0F11                     	;# 
  3652  0F12                     	;# 
  3653  0F13                     	;# 
  3654  0F14                     	;# 
  3655  0F15                     	;# 
  3656  0F16                     	;# 
  3657  0F17                     	;# 
  3658  0F18                     	;# 
  3659  0F19                     	;# 
  3660  0F1A                     	;# 
  3661  0F1B                     	;# 
  3662  0F1C                     	;# 
  3663  0F1D                     	;# 
  3664  0F1E                     	;# 
  3665  0F1F                     	;# 
  3666  0F20                     	;# 
  3667  0F21                     	;# 
  3668  0F22                     	;# 
  3669  0F23                     	;# 
  3670  0F24                     	;# 
  3671  0F25                     	;# 
  3672  0F26                     	;# 
  3673  0F27                     	;# 
  3674  0F38                     	;# 
  3675  0F39                     	;# 
  3676  0F3A                     	;# 
  3677  0F3B                     	;# 
  3678  0F3C                     	;# 
  3679  0F3D                     	;# 
  3680  0F3E                     	;# 
  3681  0F3F                     	;# 
  3682  0F40                     	;# 
  3683  0F41                     	;# 
  3684  0F43                     	;# 
  3685  0F44                     	;# 
  3686  0F45                     	;# 
  3687  0F46                     	;# 
  3688  0F47                     	;# 
  3689  0F48                     	;# 
  3690  0F49                     	;# 
  3691  0F4A                     	;# 
  3692  0F4B                     	;# 
  3693  0F4C                     	;# 
  3694  0F4E                     	;# 
  3695  0F4F                     	;# 
  3696  0F50                     	;# 
  3697  0F51                     	;# 
  3698  0F52                     	;# 
  3699  0F53                     	;# 
  3700  0F54                     	;# 
  3701  0F55                     	;# 
  3702  0F56                     	;# 
  3703  0F57                     	;# 
  3704  0F65                     	;# 
  3705  0F68                     	;# 
  3706  0F69                     	;# 
  3707  0F6A                     	;# 
  3708  0F6B                     	;# 
  3709  0FE4                     	;# 
  3710  0FE5                     	;# 
  3711  0FE6                     	;# 
  3712  0FE7                     	;# 
  3713  0FE8                     	;# 
  3714  0FE9                     	;# 
  3715  0FEA                     	;# 
  3716  0FEB                     	;# 
  3717  0FED                     	;# 
  3718  0FEE                     	;# 
  3719  0FEF                     	;# 
  3720  0000                     	;# 
  3721  0001                     	;# 
  3722  0002                     	;# 
  3723  0003                     	;# 
  3724  0004                     	;# 
  3725  0005                     	;# 
  3726  0006                     	;# 
  3727  0007                     	;# 
  3728  0008                     	;# 
  3729  0009                     	;# 
  3730  000A                     	;# 
  3731  000B                     	;# 
  3732  000C                     	;# 
  3733  000D                     	;# 
  3734  000E                     	;# 
  3735  0010                     	;# 
  3736  0011                     	;# 
  3737  0012                     	;# 
  3738  0013                     	;# 
  3739  0016                     	;# 
  3740  0017                     	;# 
  3741  0018                     	;# 
  3742  001C                     	;# 
  3743  001C                     	;# 
  3744  001D                     	;# 
  3745  001D                     	;# 
  3746  001E                     	;# 
  3747  001F                     	;# 
  3748  008C                     	;# 
  3749  008C                     	;# 
  3750  008D                     	;# 
  3751  008E                     	;# 
  3752  008E                     	;# 
  3753  008F                     	;# 
  3754  0090                     	;# 
  3755  0090                     	;# 
  3756  0091                     	;# 
  3757  0093                     	;# 
  3758  0094                     	;# 
  3759  0095                     	;# 
  3760  0096                     	;# 
  3761  0097                     	;# 
  3762  0098                     	;# 
  3763  0099                     	;# 
  3764  009A                     	;# 
  3765  009B                     	;# 
  3766  009C                     	;# 
  3767  009D                     	;# 
  3768  009E                     	;# 
  3769  010C                     	;# 
  3770  010D                     	;# 
  3771  010E                     	;# 
  3772  010E                     	;# 
  3773  010F                     	;# 
  3774  0110                     	;# 
  3775  0110                     	;# 
  3776  0111                     	;# 
  3777  0112                     	;# 
  3778  0112                     	;# 
  3779  0113                     	;# 
  3780  0114                     	;# 
  3781  0114                     	;# 
  3782  0115                     	;# 
  3783  0116                     	;# 
  3784  0116                     	;# 
  3785  0117                     	;# 
  3786  0119                     	;# 
  3787  0119                     	;# 
  3788  0119                     	;# 
  3789  011A                     	;# 
  3790  011A                     	;# 
  3791  011A                     	;# 
  3792  011B                     	;# 
  3793  011B                     	;# 
  3794  011B                     	;# 
  3795  011B                     	;# 
  3796  011B                     	;# 
  3797  011C                     	;# 
  3798  011C                     	;# 
  3799  011C                     	;# 
  3800  011D                     	;# 
  3801  011D                     	;# 
  3802  011D                     	;# 
  3803  011E                     	;# 
  3804  011E                     	;# 
  3805  011E                     	;# 
  3806  011F                     	;# 
  3807  011F                     	;# 
  3808  011F                     	;# 
  3809  011F                     	;# 
  3810  011F                     	;# 
  3811  018C                     	;# 
  3812  018D                     	;# 
  3813  018E                     	;# 
  3814  018F                     	;# 
  3815  0190                     	;# 
  3816  0191                     	;# 
  3817  0192                     	;# 
  3818  0196                     	;# 
  3819  0197                     	;# 
  3820  0198                     	;# 
  3821  0199                     	;# 
  3822  019A                     	;# 
  3823  019B                     	;# 
  3824  019C                     	;# 
  3825  020C                     	;# 
  3826  020C                     	;# 
  3827  020D                     	;# 
  3828  020E                     	;# 
  3829  020F                     	;# 
  3830  020F                     	;# 
  3831  0210                     	;# 
  3832  0210                     	;# 
  3833  0211                     	;# 
  3834  0211                     	;# 
  3835  0212                     	;# 
  3836  0212                     	;# 
  3837  0213                     	;# 
  3838  0214                     	;# 
  3839  0215                     	;# 
  3840  0215                     	;# 
  3841  0216                     	;# 
  3842  0216                     	;# 
  3843  0217                     	;# 
  3844  0217                     	;# 
  3845  0218                     	;# 
  3846  0218                     	;# 
  3847  0219                     	;# 
  3848  021A                     	;# 
  3849  021B                     	;# 
  3850  021B                     	;# 
  3851  021C                     	;# 
  3852  021C                     	;# 
  3853  021D                     	;# 
  3854  021D                     	;# 
  3855  021E                     	;# 
  3856  021F                     	;# 
  3857  028C                     	;# 
  3858  028C                     	;# 
  3859  028D                     	;# 
  3860  028D                     	;# 
  3861  028E                     	;# 
  3862  028F                     	;# 
  3863  0290                     	;# 
  3864  0290                     	;# 
  3865  0291                     	;# 
  3866  0292                     	;# 
  3867  0292                     	;# 
  3868  0293                     	;# 
  3869  0293                     	;# 
  3870  0294                     	;# 
  3871  0295                     	;# 
  3872  0296                     	;# 
  3873  0296                     	;# 
  3874  0297                     	;# 
  3875  0298                     	;# 
  3876  0298                     	;# 
  3877  0299                     	;# 
  3878  0299                     	;# 
  3879  029A                     	;# 
  3880  029B                     	;# 
  3881  029C                     	;# 
  3882  029C                     	;# 
  3883  029D                     	;# 
  3884  030C                     	;# 
  3885  030C                     	;# 
  3886  030D                     	;# 
  3887  030E                     	;# 
  3888  030F                     	;# 
  3889  0310                     	;# 
  3890  0310                     	;# 
  3891  0311                     	;# 
  3892  0312                     	;# 
  3893  0313                     	;# 
  3894  0314                     	;# 
  3895  0314                     	;# 
  3896  0315                     	;# 
  3897  0316                     	;# 
  3898  0317                     	;# 
  3899  0318                     	;# 
  3900  0318                     	;# 
  3901  0319                     	;# 
  3902  031A                     	;# 
  3903  031B                     	;# 
  3904  031C                     	;# 
  3905  031C                     	;# 
  3906  031D                     	;# 
  3907  031E                     	;# 
  3908  031F                     	;# 
  3909  038C                     	;# 
  3910  038D                     	;# 
  3911  038E                     	;# 
  3912  0390                     	;# 
  3913  0391                     	;# 
  3914  0392                     	;# 
  3915  040C                     	;# 
  3916  040D                     	;# 
  3917  040E                     	;# 
  3918  040F                     	;# 
  3919  0410                     	;# 
  3920  0411                     	;# 
  3921  0416                     	;# 
  3922  0416                     	;# 
  3923  0417                     	;# 
  3924  0418                     	;# 
  3925  0418                     	;# 
  3926  0419                     	;# 
  3927  041A                     	;# 
  3928  041A                     	;# 
  3929  041B                     	;# 
  3930  041C                     	;# 
  3931  041C                     	;# 
  3932  041D                     	;# 
  3933  041E                     	;# 
  3934  041F                     	;# 
  3935  048C                     	;# 
  3936  048C                     	;# 
  3937  048D                     	;# 
  3938  048E                     	;# 
  3939  048F                     	;# 
  3940  048F                     	;# 
  3941  0490                     	;# 
  3942  0491                     	;# 
  3943  0492                     	;# 
  3944  0492                     	;# 
  3945  0493                     	;# 
  3946  0494                     	;# 
  3947  0495                     	;# 
  3948  0495                     	;# 
  3949  0496                     	;# 
  3950  0497                     	;# 
  3951  0498                     	;# 
  3952  0499                     	;# 
  3953  049A                     	;# 
  3954  049B                     	;# 
  3955  049C                     	;# 
  3956  049D                     	;# 
  3957  050C                     	;# 
  3958  050C                     	;# 
  3959  050D                     	;# 
  3960  050E                     	;# 
  3961  050F                     	;# 
  3962  050F                     	;# 
  3963  0510                     	;# 
  3964  0511                     	;# 
  3965  0512                     	;# 
  3966  0512                     	;# 
  3967  0513                     	;# 
  3968  0514                     	;# 
  3969  0515                     	;# 
  3970  0515                     	;# 
  3971  0516                     	;# 
  3972  0517                     	;# 
  3973  0518                     	;# 
  3974  0519                     	;# 
  3975  051A                     	;# 
  3976  051B                     	;# 
  3977  051C                     	;# 
  3978  051D                     	;# 
  3979  058C                     	;# 
  3980  058C                     	;# 
  3981  058D                     	;# 
  3982  058E                     	;# 
  3983  058F                     	;# 
  3984  058F                     	;# 
  3985  0590                     	;# 
  3986  0591                     	;# 
  3987  0592                     	;# 
  3988  0593                     	;# 
  3989  060C                     	;# 
  3990  060D                     	;# 
  3991  060E                     	;# 
  3992  060F                     	;# 
  3993  0610                     	;# 
  3994  0611                     	;# 
  3995  0612                     	;# 
  3996  0613                     	;# 
  3997  0614                     	;# 
  3998  0616                     	;# 
  3999  0617                     	;# 
  4000  0618                     	;# 
  4001  0619                     	;# 
  4002  061A                     	;# 
  4003  061B                     	;# 
  4004  061C                     	;# 
  4005  061D                     	;# 
  4006  061E                     	;# 
  4007  068C                     	;# 
  4008  068D                     	;# 
  4009  068E                     	;# 
  4010  068F                     	;# 
  4011  0690                     	;# 
  4012  0691                     	;# 
  4013  0692                     	;# 
  4014  0693                     	;# 
  4015  0694                     	;# 
  4016  070C                     	;# 
  4017  070D                     	;# 
  4018  070E                     	;# 
  4019  070F                     	;# 
  4020  0710                     	;# 
  4021  0711                     	;# 
  4022  0712                     	;# 
  4023  0713                     	;# 
  4024  0714                     	;# 
  4025  0716                     	;# 
  4026  0717                     	;# 
  4027  0718                     	;# 
  4028  0719                     	;# 
  4029  071A                     	;# 
  4030  071B                     	;# 
  4031  071C                     	;# 
  4032  071D                     	;# 
  4033  071E                     	;# 
  4034  0796                     	;# 
  4035  0797                     	;# 
  4036  0798                     	;# 
  4037  0799                     	;# 
  4038  079A                     	;# 
  4039  079B                     	;# 
  4040  080C                     	;# 
  4041  080D                     	;# 
  4042  080E                     	;# 
  4043  080F                     	;# 
  4044  0810                     	;# 
  4045  0811                     	;# 
  4046  0812                     	;# 
  4047  0813                     	;# 
  4048  0814                     	;# 
  4049  081A                     	;# 
  4050  081B                     	;# 
  4051  081C                     	;# 
  4052  081D                     	;# 
  4053  081E                     	;# 
  4054  081F                     	;# 
  4055  088C                     	;# 
  4056  088D                     	;# 
  4057  088E                     	;# 
  4058  088F                     	;# 
  4059  0890                     	;# 
  4060  0891                     	;# 
  4061  0892                     	;# 
  4062  0893                     	;# 
  4063  0895                     	;# 
  4064  0896                     	;# 
  4065  0897                     	;# 
  4066  0898                     	;# 
  4067  0899                     	;# 
  4068  089A                     	;# 
  4069  089B                     	;# 
  4070  090C                     	;# 
  4071  090E                     	;# 
  4072  090F                     	;# 
  4073  091F                     	;# 
  4074  091F                     	;# 
  4075  098F                     	;# 
  4076  098F                     	;# 
  4077  0990                     	;# 
  4078  0991                     	;# 
  4079  0992                     	;# 
  4080  0993                     	;# 
  4081  0994                     	;# 
  4082  0995                     	;# 
  4083  0996                     	;# 
  4084  0997                     	;# 
  4085  0E0F                     	;# 
  4086  0E10                     	;# 
  4087  0E11                     	;# 
  4088  0E12                     	;# 
  4089  0E13                     	;# 
  4090  0E14                     	;# 
  4091  0E15                     	;# 
  4092  0E16                     	;# 
  4093  0E17                     	;# 
  4094  0E18                     	;# 
  4095  0E19                     	;# 
  4096  0E1A                     	;# 
  4097  0E1B                     	;# 
  4098  0E1C                     	;# 
  4099  0E1D                     	;# 
  4100  0E1E                     	;# 
  4101  0E1F                     	;# 
  4102  0E20                     	;# 
  4103  0E21                     	;# 
  4104  0E22                     	;# 
  4105  0E23                     	;# 
  4106  0E24                     	;# 
  4107  0E25                     	;# 
  4108  0E26                     	;# 
  4109  0E27                     	;# 
  4110  0E28                     	;# 
  4111  0E29                     	;# 
  4112  0E2A                     	;# 
  4113  0E2B                     	;# 
  4114  0E2C                     	;# 
  4115  0E2D                     	;# 
  4116  0E2E                     	;# 
  4117  0E2F                     	;# 
  4118  0E30                     	;# 
  4119  0E31                     	;# 
  4120  0E32                     	;# 
  4121  0E33                     	;# 
  4122  0E34                     	;# 
  4123  0E35                     	;# 
  4124  0E36                     	;# 
  4125  0E37                     	;# 
  4126  0E8F                     	;# 
  4127  0E90                     	;# 
  4128  0E91                     	;# 
  4129  0E92                     	;# 
  4130  0E93                     	;# 
  4131  0E94                     	;# 
  4132  0E95                     	;# 
  4133  0E96                     	;# 
  4134  0E97                     	;# 
  4135  0E9C                     	;# 
  4136  0E9D                     	;# 
  4137  0E9E                     	;# 
  4138  0EA1                     	;# 
  4139  0EA2                     	;# 
  4140  0EA3                     	;# 
  4141  0EA4                     	;# 
  4142  0EA5                     	;# 
  4143  0EA9                     	;# 
  4144  0EAA                     	;# 
  4145  0EAB                     	;# 
  4146  0EAC                     	;# 
  4147  0EB1                     	;# 
  4148  0EB2                     	;# 
  4149  0EB3                     	;# 
  4150  0EB8                     	;# 
  4151  0EB9                     	;# 
  4152  0EBA                     	;# 
  4153  0EBB                     	;# 
  4154  0EBC                     	;# 
  4155  0EBD                     	;# 
  4156  0EBE                     	;# 
  4157  0EC3                     	;# 
  4158  0EC5                     	;# 
  4159  0EC6                     	;# 
  4160  0EC7                     	;# 
  4161  0EC8                     	;# 
  4162  0EC9                     	;# 
  4163  0ECA                     	;# 
  4164  0ECB                     	;# 
  4165  0ECC                     	;# 
  4166  0F10                     	;# 
  4167  0F11                     	;# 
  4168  0F12                     	;# 
  4169  0F13                     	;# 
  4170  0F14                     	;# 
  4171  0F15                     	;# 
  4172  0F16                     	;# 
  4173  0F17                     	;# 
  4174  0F18                     	;# 
  4175  0F19                     	;# 
  4176  0F1A                     	;# 
  4177  0F1B                     	;# 
  4178  0F1C                     	;# 
  4179  0F1D                     	;# 
  4180  0F1E                     	;# 
  4181  0F1F                     	;# 
  4182  0F20                     	;# 
  4183  0F21                     	;# 
  4184  0F22                     	;# 
  4185  0F23                     	;# 
  4186  0F24                     	;# 
  4187  0F25                     	;# 
  4188  0F26                     	;# 
  4189  0F27                     	;# 
  4190  0F38                     	;# 
  4191  0F39                     	;# 
  4192  0F3A                     	;# 
  4193  0F3B                     	;# 
  4194  0F3C                     	;# 
  4195  0F3D                     	;# 
  4196  0F3E                     	;# 
  4197  0F3F                     	;# 
  4198  0F40                     	;# 
  4199  0F41                     	;# 
  4200  0F43                     	;# 
  4201  0F44                     	;# 
  4202  0F45                     	;# 
  4203  0F46                     	;# 
  4204  0F47                     	;# 
  4205  0F48                     	;# 
  4206  0F49                     	;# 
  4207  0F4A                     	;# 
  4208  0F4B                     	;# 
  4209  0F4C                     	;# 
  4210  0F4E                     	;# 
  4211  0F4F                     	;# 
  4212  0F50                     	;# 
  4213  0F51                     	;# 
  4214  0F52                     	;# 
  4215  0F53                     	;# 
  4216  0F54                     	;# 
  4217  0F55                     	;# 
  4218  0F56                     	;# 
  4219  0F57                     	;# 
  4220  0F65                     	;# 
  4221  0F68                     	;# 
  4222  0F69                     	;# 
  4223  0F6A                     	;# 
  4224  0F6B                     	;# 
  4225  0FE4                     	;# 
  4226  0FE5                     	;# 
  4227  0FE6                     	;# 
  4228  0FE7                     	;# 
  4229  0FE8                     	;# 
  4230  0FE9                     	;# 
  4231  0FEA                     	;# 
  4232  0FEB                     	;# 
  4233  0FED                     	;# 
  4234  0FEE                     	;# 
  4235  0FEF                     	;# 
  4236  0000                     	;# 
  4237  0001                     	;# 
  4238  0002                     	;# 
  4239  0003                     	;# 
  4240  0004                     	;# 
  4241  0005                     	;# 
  4242  0006                     	;# 
  4243  0007                     	;# 
  4244  0008                     	;# 
  4245  0009                     	;# 
  4246  000A                     	;# 
  4247  000B                     	;# 
  4248  000C                     	;# 
  4249  000D                     	;# 
  4250  000E                     	;# 
  4251  0010                     	;# 
  4252  0011                     	;# 
  4253  0012                     	;# 
  4254  0013                     	;# 
  4255  0016                     	;# 
  4256  0017                     	;# 
  4257  0018                     	;# 
  4258  001C                     	;# 
  4259  001C                     	;# 
  4260  001D                     	;# 
  4261  001D                     	;# 
  4262  001E                     	;# 
  4263  001F                     	;# 
  4264  008C                     	;# 
  4265  008C                     	;# 
  4266  008D                     	;# 
  4267  008E                     	;# 
  4268  008E                     	;# 
  4269  008F                     	;# 
  4270  0090                     	;# 
  4271  0090                     	;# 
  4272  0091                     	;# 
  4273  0093                     	;# 
  4274  0094                     	;# 
  4275  0095                     	;# 
  4276  0096                     	;# 
  4277  0097                     	;# 
  4278  0098                     	;# 
  4279  0099                     	;# 
  4280  009A                     	;# 
  4281  009B                     	;# 
  4282  009C                     	;# 
  4283  009D                     	;# 
  4284  009E                     	;# 
  4285  010C                     	;# 
  4286  010D                     	;# 
  4287  010E                     	;# 
  4288  010E                     	;# 
  4289  010F                     	;# 
  4290  0110                     	;# 
  4291  0110                     	;# 
  4292  0111                     	;# 
  4293  0112                     	;# 
  4294  0112                     	;# 
  4295  0113                     	;# 
  4296  0114                     	;# 
  4297  0114                     	;# 
  4298  0115                     	;# 
  4299  0116                     	;# 
  4300  0116                     	;# 
  4301  0117                     	;# 
  4302  0119                     	;# 
  4303  0119                     	;# 
  4304  0119                     	;# 
  4305  011A                     	;# 
  4306  011A                     	;# 
  4307  011A                     	;# 
  4308  011B                     	;# 
  4309  011B                     	;# 
  4310  011B                     	;# 
  4311  011B                     	;# 
  4312  011B                     	;# 
  4313  011C                     	;# 
  4314  011C                     	;# 
  4315  011C                     	;# 
  4316  011D                     	;# 
  4317  011D                     	;# 
  4318  011D                     	;# 
  4319  011E                     	;# 
  4320  011E                     	;# 
  4321  011E                     	;# 
  4322  011F                     	;# 
  4323  011F                     	;# 
  4324  011F                     	;# 
  4325  011F                     	;# 
  4326  011F                     	;# 
  4327  018C                     	;# 
  4328  018D                     	;# 
  4329  018E                     	;# 
  4330  018F                     	;# 
  4331  0190                     	;# 
  4332  0191                     	;# 
  4333  0192                     	;# 
  4334  0196                     	;# 
  4335  0197                     	;# 
  4336  0198                     	;# 
  4337  0199                     	;# 
  4338  019A                     	;# 
  4339  019B                     	;# 
  4340  019C                     	;# 
  4341  020C                     	;# 
  4342  020C                     	;# 
  4343  020D                     	;# 
  4344  020E                     	;# 
  4345  020F                     	;# 
  4346  020F                     	;# 
  4347  0210                     	;# 
  4348  0210                     	;# 
  4349  0211                     	;# 
  4350  0211                     	;# 
  4351  0212                     	;# 
  4352  0212                     	;# 
  4353  0213                     	;# 
  4354  0214                     	;# 
  4355  0215                     	;# 
  4356  0215                     	;# 
  4357  0216                     	;# 
  4358  0216                     	;# 
  4359  0217                     	;# 
  4360  0217                     	;# 
  4361  0218                     	;# 
  4362  0218                     	;# 
  4363  0219                     	;# 
  4364  021A                     	;# 
  4365  021B                     	;# 
  4366  021B                     	;# 
  4367  021C                     	;# 
  4368  021C                     	;# 
  4369  021D                     	;# 
  4370  021D                     	;# 
  4371  021E                     	;# 
  4372  021F                     	;# 
  4373  028C                     	;# 
  4374  028C                     	;# 
  4375  028D                     	;# 
  4376  028D                     	;# 
  4377  028E                     	;# 
  4378  028F                     	;# 
  4379  0290                     	;# 
  4380  0290                     	;# 
  4381  0291                     	;# 
  4382  0292                     	;# 
  4383  0292                     	;# 
  4384  0293                     	;# 
  4385  0293                     	;# 
  4386  0294                     	;# 
  4387  0295                     	;# 
  4388  0296                     	;# 
  4389  0296                     	;# 
  4390  0297                     	;# 
  4391  0298                     	;# 
  4392  0298                     	;# 
  4393  0299                     	;# 
  4394  0299                     	;# 
  4395  029A                     	;# 
  4396  029B                     	;# 
  4397  029C                     	;# 
  4398  029C                     	;# 
  4399  029D                     	;# 
  4400  030C                     	;# 
  4401  030C                     	;# 
  4402  030D                     	;# 
  4403  030E                     	;# 
  4404  030F                     	;# 
  4405  0310                     	;# 
  4406  0310                     	;# 
  4407  0311                     	;# 
  4408  0312                     	;# 
  4409  0313                     	;# 
  4410  0314                     	;# 
  4411  0314                     	;# 
  4412  0315                     	;# 
  4413  0316                     	;# 
  4414  0317                     	;# 
  4415  0318                     	;# 
  4416  0318                     	;# 
  4417  0319                     	;# 
  4418  031A                     	;# 
  4419  031B                     	;# 
  4420  031C                     	;# 
  4421  031C                     	;# 
  4422  031D                     	;# 
  4423  031E                     	;# 
  4424  031F                     	;# 
  4425  038C                     	;# 
  4426  038D                     	;# 
  4427  038E                     	;# 
  4428  0390                     	;# 
  4429  0391                     	;# 
  4430  0392                     	;# 
  4431  040C                     	;# 
  4432  040D                     	;# 
  4433  040E                     	;# 
  4434  040F                     	;# 
  4435  0410                     	;# 
  4436  0411                     	;# 
  4437  0416                     	;# 
  4438  0416                     	;# 
  4439  0417                     	;# 
  4440  0418                     	;# 
  4441  0418                     	;# 
  4442  0419                     	;# 
  4443  041A                     	;# 
  4444  041A                     	;# 
  4445  041B                     	;# 
  4446  041C                     	;# 
  4447  041C                     	;# 
  4448  041D                     	;# 
  4449  041E                     	;# 
  4450  041F                     	;# 
  4451  048C                     	;# 
  4452  048C                     	;# 
  4453  048D                     	;# 
  4454  048E                     	;# 
  4455  048F                     	;# 
  4456  048F                     	;# 
  4457  0490                     	;# 
  4458  0491                     	;# 
  4459  0492                     	;# 
  4460  0492                     	;# 
  4461  0493                     	;# 
  4462  0494                     	;# 
  4463  0495                     	;# 
  4464  0495                     	;# 
  4465  0496                     	;# 
  4466  0497                     	;# 
  4467  0498                     	;# 
  4468  0499                     	;# 
  4469  049A                     	;# 
  4470  049B                     	;# 
  4471  049C                     	;# 
  4472  049D                     	;# 
  4473  050C                     	;# 
  4474  050C                     	;# 
  4475  050D                     	;# 
  4476  050E                     	;# 
  4477  050F                     	;# 
  4478  050F                     	;# 
  4479  0510                     	;# 
  4480  0511                     	;# 
  4481  0512                     	;# 
  4482  0512                     	;# 
  4483  0513                     	;# 
  4484  0514                     	;# 
  4485  0515                     	;# 
  4486  0515                     	;# 
  4487  0516                     	;# 
  4488  0517                     	;# 
  4489  0518                     	;# 
  4490  0519                     	;# 
  4491  051A                     	;# 
  4492  051B                     	;# 
  4493  051C                     	;# 
  4494  051D                     	;# 
  4495  058C                     	;# 
  4496  058C                     	;# 
  4497  058D                     	;# 
  4498  058E                     	;# 
  4499  058F                     	;# 
  4500  058F                     	;# 
  4501  0590                     	;# 
  4502  0591                     	;# 
  4503  0592                     	;# 
  4504  0593                     	;# 
  4505  060C                     	;# 
  4506  060D                     	;# 
  4507  060E                     	;# 
  4508  060F                     	;# 
  4509  0610                     	;# 
  4510  0611                     	;# 
  4511  0612                     	;# 
  4512  0613                     	;# 
  4513  0614                     	;# 
  4514  0616                     	;# 
  4515  0617                     	;# 
  4516  0618                     	;# 
  4517  0619                     	;# 
  4518  061A                     	;# 
  4519  061B                     	;# 
  4520  061C                     	;# 
  4521  061D                     	;# 
  4522  061E                     	;# 
  4523  068C                     	;# 
  4524  068D                     	;# 
  4525  068E                     	;# 
  4526  068F                     	;# 
  4527  0690                     	;# 
  4528  0691                     	;# 
  4529  0692                     	;# 
  4530  0693                     	;# 
  4531  0694                     	;# 
  4532  070C                     	;# 
  4533  070D                     	;# 
  4534  070E                     	;# 
  4535  070F                     	;# 
  4536  0710                     	;# 
  4537  0711                     	;# 
  4538  0712                     	;# 
  4539  0713                     	;# 
  4540  0714                     	;# 
  4541  0716                     	;# 
  4542  0717                     	;# 
  4543  0718                     	;# 
  4544  0719                     	;# 
  4545  071A                     	;# 
  4546  071B                     	;# 
  4547  071C                     	;# 
  4548  071D                     	;# 
  4549  071E                     	;# 
  4550  0796                     	;# 
  4551  0797                     	;# 
  4552  0798                     	;# 
  4553  0799                     	;# 
  4554  079A                     	;# 
  4555  079B                     	;# 
  4556  080C                     	;# 
  4557  080D                     	;# 
  4558  080E                     	;# 
  4559  080F                     	;# 
  4560  0810                     	;# 
  4561  0811                     	;# 
  4562  0812                     	;# 
  4563  0813                     	;# 
  4564  0814                     	;# 
  4565  081A                     	;# 
  4566  081B                     	;# 
  4567  081C                     	;# 
  4568  081D                     	;# 
  4569  081E                     	;# 
  4570  081F                     	;# 
  4571  088C                     	;# 
  4572  088D                     	;# 
  4573  088E                     	;# 
  4574  088F                     	;# 
  4575  0890                     	;# 
  4576  0891                     	;# 
  4577  0892                     	;# 
  4578  0893                     	;# 
  4579  0895                     	;# 
  4580  0896                     	;# 
  4581  0897                     	;# 
  4582  0898                     	;# 
  4583  0899                     	;# 
  4584  089A                     	;# 
  4585  089B                     	;# 
  4586  090C                     	;# 
  4587  090E                     	;# 
  4588  090F                     	;# 
  4589  091F                     	;# 
  4590  091F                     	;# 
  4591  098F                     	;# 
  4592  098F                     	;# 
  4593  0990                     	;# 
  4594  0991                     	;# 
  4595  0992                     	;# 
  4596  0993                     	;# 
  4597  0994                     	;# 
  4598  0995                     	;# 
  4599  0996                     	;# 
  4600  0997                     	;# 
  4601  0E0F                     	;# 
  4602  0E10                     	;# 
  4603  0E11                     	;# 
  4604  0E12                     	;# 
  4605  0E13                     	;# 
  4606  0E14                     	;# 
  4607  0E15                     	;# 
  4608  0E16                     	;# 
  4609  0E17                     	;# 
  4610  0E18                     	;# 
  4611  0E19                     	;# 
  4612  0E1A                     	;# 
  4613  0E1B                     	;# 
  4614  0E1C                     	;# 
  4615  0E1D                     	;# 
  4616  0E1E                     	;# 
  4617  0E1F                     	;# 
  4618  0E20                     	;# 
  4619  0E21                     	;# 
  4620  0E22                     	;# 
  4621  0E23                     	;# 
  4622  0E24                     	;# 
  4623  0E25                     	;# 
  4624  0E26                     	;# 
  4625  0E27                     	;# 
  4626  0E28                     	;# 
  4627  0E29                     	;# 
  4628  0E2A                     	;# 
  4629  0E2B                     	;# 
  4630  0E2C                     	;# 
  4631  0E2D                     	;# 
  4632  0E2E                     	;# 
  4633  0E2F                     	;# 
  4634  0E30                     	;# 
  4635  0E31                     	;# 
  4636  0E32                     	;# 
  4637  0E33                     	;# 
  4638  0E34                     	;# 
  4639  0E35                     	;# 
  4640  0E36                     	;# 
  4641  0E37                     	;# 
  4642  0E8F                     	;# 
  4643  0E90                     	;# 
  4644  0E91                     	;# 
  4645  0E92                     	;# 
  4646  0E93                     	;# 
  4647  0E94                     	;# 
  4648  0E95                     	;# 
  4649  0E96                     	;# 
  4650  0E97                     	;# 
  4651  0E9C                     	;# 
  4652  0E9D                     	;# 
  4653  0E9E                     	;# 
  4654  0EA1                     	;# 
  4655  0EA2                     	;# 
  4656  0EA3                     	;# 
  4657  0EA4                     	;# 
  4658  0EA5                     	;# 
  4659  0EA9                     	;# 
  4660  0EAA                     	;# 
  4661  0EAB                     	;# 
  4662  0EAC                     	;# 
  4663  0EB1                     	;# 
  4664  0EB2                     	;# 
  4665  0EB3                     	;# 
  4666  0EB8                     	;# 
  4667  0EB9                     	;# 
  4668  0EBA                     	;# 
  4669  0EBB                     	;# 
  4670  0EBC                     	;# 
  4671  0EBD                     	;# 
  4672  0EBE                     	;# 
  4673  0EC3                     	;# 
  4674  0EC5                     	;# 
  4675  0EC6                     	;# 
  4676  0EC7                     	;# 
  4677  0EC8                     	;# 
  4678  0EC9                     	;# 
  4679  0ECA                     	;# 
  4680  0ECB                     	;# 
  4681  0ECC                     	;# 
  4682  0F10                     	;# 
  4683  0F11                     	;# 
  4684  0F12                     	;# 
  4685  0F13                     	;# 
  4686  0F14                     	;# 
  4687  0F15                     	;# 
  4688  0F16                     	;# 
  4689  0F17                     	;# 
  4690  0F18                     	;# 
  4691  0F19                     	;# 
  4692  0F1A                     	;# 
  4693  0F1B                     	;# 
  4694  0F1C                     	;# 
  4695  0F1D                     	;# 
  4696  0F1E                     	;# 
  4697  0F1F                     	;# 
  4698  0F20                     	;# 
  4699  0F21                     	;# 
  4700  0F22                     	;# 
  4701  0F23                     	;# 
  4702  0F24                     	;# 
  4703  0F25                     	;# 
  4704  0F26                     	;# 
  4705  0F27                     	;# 
  4706  0F38                     	;# 
  4707  0F39                     	;# 
  4708  0F3A                     	;# 
  4709  0F3B                     	;# 
  4710  0F3C                     	;# 
  4711  0F3D                     	;# 
  4712  0F3E                     	;# 
  4713  0F3F                     	;# 
  4714  0F40                     	;# 
  4715  0F41                     	;# 
  4716  0F43                     	;# 
  4717  0F44                     	;# 
  4718  0F45                     	;# 
  4719  0F46                     	;# 
  4720  0F47                     	;# 
  4721  0F48                     	;# 
  4722  0F49                     	;# 
  4723  0F4A                     	;# 
  4724  0F4B                     	;# 
  4725  0F4C                     	;# 
  4726  0F4E                     	;# 
  4727  0F4F                     	;# 
  4728  0F50                     	;# 
  4729  0F51                     	;# 
  4730  0F52                     	;# 
  4731  0F53                     	;# 
  4732  0F54                     	;# 
  4733  0F55                     	;# 
  4734  0F56                     	;# 
  4735  0F57                     	;# 
  4736  0F65                     	;# 
  4737  0F68                     	;# 
  4738  0F69                     	;# 
  4739  0F6A                     	;# 
  4740  0F6B                     	;# 
  4741  0FE4                     	;# 
  4742  0FE5                     	;# 
  4743  0FE6                     	;# 
  4744  0FE7                     	;# 
  4745  0FE8                     	;# 
  4746  0FE9                     	;# 
  4747  0FEA                     	;# 
  4748  0FEB                     	;# 
  4749  0FED                     	;# 
  4750  0FEE                     	;# 
  4751  0FEF                     	;# 
  4752  0000                     	;# 
  4753  0001                     	;# 
  4754  0002                     	;# 
  4755  0003                     	;# 
  4756  0004                     	;# 
  4757  0005                     	;# 
  4758  0006                     	;# 
  4759  0007                     	;# 
  4760  0008                     	;# 
  4761  0009                     	;# 
  4762  000A                     	;# 
  4763  000B                     	;# 
  4764  000C                     	;# 
  4765  000D                     	;# 
  4766  000E                     	;# 
  4767  0010                     	;# 
  4768  0011                     	;# 
  4769  0012                     	;# 
  4770  0013                     	;# 
  4771  0016                     	;# 
  4772  0017                     	;# 
  4773  0018                     	;# 
  4774  001C                     	;# 
  4775  001C                     	;# 
  4776  001D                     	;# 
  4777  001D                     	;# 
  4778  001E                     	;# 
  4779  001F                     	;# 
  4780  008C                     	;# 
  4781  008C                     	;# 
  4782  008D                     	;# 
  4783  008E                     	;# 
  4784  008E                     	;# 
  4785  008F                     	;# 
  4786  0090                     	;# 
  4787  0090                     	;# 
  4788  0091                     	;# 
  4789  0093                     	;# 
  4790  0094                     	;# 
  4791  0095                     	;# 
  4792  0096                     	;# 
  4793  0097                     	;# 
  4794  0098                     	;# 
  4795  0099                     	;# 
  4796  009A                     	;# 
  4797  009B                     	;# 
  4798  009C                     	;# 
  4799  009D                     	;# 
  4800  009E                     	;# 
  4801  010C                     	;# 
  4802  010D                     	;# 
  4803  010E                     	;# 
  4804  010E                     	;# 
  4805  010F                     	;# 
  4806  0110                     	;# 
  4807  0110                     	;# 
  4808  0111                     	;# 
  4809  0112                     	;# 
  4810  0112                     	;# 
  4811  0113                     	;# 
  4812  0114                     	;# 
  4813  0114                     	;# 
  4814  0115                     	;# 
  4815  0116                     	;# 
  4816  0116                     	;# 
  4817  0117                     	;# 
  4818  0119                     	;# 
  4819  0119                     	;# 
  4820  0119                     	;# 
  4821  011A                     	;# 
  4822  011A                     	;# 
  4823  011A                     	;# 
  4824  011B                     	;# 
  4825  011B                     	;# 
  4826  011B                     	;# 
  4827  011B                     	;# 
  4828  011B                     	;# 
  4829  011C                     	;# 
  4830  011C                     	;# 
  4831  011C                     	;# 
  4832  011D                     	;# 
  4833  011D                     	;# 
  4834  011D                     	;# 
  4835  011E                     	;# 
  4836  011E                     	;# 
  4837  011E                     	;# 
  4838  011F                     	;# 
  4839  011F                     	;# 
  4840  011F                     	;# 
  4841  011F                     	;# 
  4842  011F                     	;# 
  4843  018C                     	;# 
  4844  018D                     	;# 
  4845  018E                     	;# 
  4846  018F                     	;# 
  4847  0190                     	;# 
  4848  0191                     	;# 
  4849  0192                     	;# 
  4850  0196                     	;# 
  4851  0197                     	;# 
  4852  0198                     	;# 
  4853  0199                     	;# 
  4854  019A                     	;# 
  4855  019B                     	;# 
  4856  019C                     	;# 
  4857  020C                     	;# 
  4858  020C                     	;# 
  4859  020D                     	;# 
  4860  020E                     	;# 
  4861  020F                     	;# 
  4862  020F                     	;# 
  4863  0210                     	;# 
  4864  0210                     	;# 
  4865  0211                     	;# 
  4866  0211                     	;# 
  4867  0212                     	;# 
  4868  0212                     	;# 
  4869  0213                     	;# 
  4870  0214                     	;# 
  4871  0215                     	;# 
  4872  0215                     	;# 
  4873  0216                     	;# 
  4874  0216                     	;# 
  4875  0217                     	;# 
  4876  0217                     	;# 
  4877  0218                     	;# 
  4878  0218                     	;# 
  4879  0219                     	;# 
  4880  021A                     	;# 
  4881  021B                     	;# 
  4882  021B                     	;# 
  4883  021C                     	;# 
  4884  021C                     	;# 
  4885  021D                     	;# 
  4886  021D                     	;# 
  4887  021E                     	;# 
  4888  021F                     	;# 
  4889  028C                     	;# 
  4890  028C                     	;# 
  4891  028D                     	;# 
  4892  028D                     	;# 
  4893  028E                     	;# 
  4894  028F                     	;# 
  4895  0290                     	;# 
  4896  0290                     	;# 
  4897  0291                     	;# 
  4898  0292                     	;# 
  4899  0292                     	;# 
  4900  0293                     	;# 
  4901  0293                     	;# 
  4902  0294                     	;# 
  4903  0295                     	;# 
  4904  0296                     	;# 
  4905  0296                     	;# 
  4906  0297                     	;# 
  4907  0298                     	;# 
  4908  0298                     	;# 
  4909  0299                     	;# 
  4910  0299                     	;# 
  4911  029A                     	;# 
  4912  029B                     	;# 
  4913  029C                     	;# 
  4914  029C                     	;# 
  4915  029D                     	;# 
  4916  030C                     	;# 
  4917  030C                     	;# 
  4918  030D                     	;# 
  4919  030E                     	;# 
  4920  030F                     	;# 
  4921  0310                     	;# 
  4922  0310                     	;# 
  4923  0311                     	;# 
  4924  0312                     	;# 
  4925  0313                     	;# 
  4926  0314                     	;# 
  4927  0314                     	;# 
  4928  0315                     	;# 
  4929  0316                     	;# 
  4930  0317                     	;# 
  4931  0318                     	;# 
  4932  0318                     	;# 
  4933  0319                     	;# 
  4934  031A                     	;# 
  4935  031B                     	;# 
  4936  031C                     	;# 
  4937  031C                     	;# 
  4938  031D                     	;# 
  4939  031E                     	;# 
  4940  031F                     	;# 
  4941  038C                     	;# 
  4942  038D                     	;# 
  4943  038E                     	;# 
  4944  0390                     	;# 
  4945  0391                     	;# 
  4946  0392                     	;# 
  4947  040C                     	;# 
  4948  040D                     	;# 
  4949  040E                     	;# 
  4950  040F                     	;# 
  4951  0410                     	;# 
  4952  0411                     	;# 
  4953  0416                     	;# 
  4954  0416                     	;# 
  4955  0417                     	;# 
  4956  0418                     	;# 
  4957  0418                     	;# 
  4958  0419                     	;# 
  4959  041A                     	;# 
  4960  041A                     	;# 
  4961  041B                     	;# 
  4962  041C                     	;# 
  4963  041C                     	;# 
  4964  041D                     	;# 
  4965  041E                     	;# 
  4966  041F                     	;# 
  4967  048C                     	;# 
  4968  048C                     	;# 
  4969  048D                     	;# 
  4970  048E                     	;# 
  4971  048F                     	;# 
  4972  048F                     	;# 
  4973  0490                     	;# 
  4974  0491                     	;# 
  4975  0492                     	;# 
  4976  0492                     	;# 
  4977  0493                     	;# 
  4978  0494                     	;# 
  4979  0495                     	;# 
  4980  0495                     	;# 
  4981  0496                     	;# 
  4982  0497                     	;# 
  4983  0498                     	;# 
  4984  0499                     	;# 
  4985  049A                     	;# 
  4986  049B                     	;# 
  4987  049C                     	;# 
  4988  049D                     	;# 
  4989  050C                     	;# 
  4990  050C                     	;# 
  4991  050D                     	;# 
  4992  050E                     	;# 
  4993  050F                     	;# 
  4994  050F                     	;# 
  4995  0510                     	;# 
  4996  0511                     	;# 
  4997  0512                     	;# 
  4998  0512                     	;# 
  4999  0513                     	;# 
  5000  0514                     	;# 
  5001  0515                     	;# 
  5002  0515                     	;# 
  5003  0516                     	;# 
  5004  0517                     	;# 
  5005  0518                     	;# 
  5006  0519                     	;# 
  5007  051A                     	;# 
  5008  051B                     	;# 
  5009  051C                     	;# 
  5010  051D                     	;# 
  5011  058C                     	;# 
  5012  058C                     	;# 
  5013  058D                     	;# 
  5014  058E                     	;# 
  5015  058F                     	;# 
  5016  058F                     	;# 
  5017  0590                     	;# 
  5018  0591                     	;# 
  5019  0592                     	;# 
  5020  0593                     	;# 
  5021  060C                     	;# 
  5022  060D                     	;# 
  5023  060E                     	;# 
  5024  060F                     	;# 
  5025  0610                     	;# 
  5026  0611                     	;# 
  5027  0612                     	;# 
  5028  0613                     	;# 
  5029  0614                     	;# 
  5030  0616                     	;# 
  5031  0617                     	;# 
  5032  0618                     	;# 
  5033  0619                     	;# 
  5034  061A                     	;# 
  5035  061B                     	;# 
  5036  061C                     	;# 
  5037  061D                     	;# 
  5038  061E                     	;# 
  5039  068C                     	;# 
  5040  068D                     	;# 
  5041  068E                     	;# 
  5042  068F                     	;# 
  5043  0690                     	;# 
  5044  0691                     	;# 
  5045  0692                     	;# 
  5046  0693                     	;# 
  5047  0694                     	;# 
  5048  070C                     	;# 
  5049  070D                     	;# 
  5050  070E                     	;# 
  5051  070F                     	;# 
  5052  0710                     	;# 
  5053  0711                     	;# 
  5054  0712                     	;# 
  5055  0713                     	;# 
  5056  0714                     	;# 
  5057  0716                     	;# 
  5058  0717                     	;# 
  5059  0718                     	;# 
  5060  0719                     	;# 
  5061  071A                     	;# 
  5062  071B                     	;# 
  5063  071C                     	;# 
  5064  071D                     	;# 
  5065  071E                     	;# 
  5066  0796                     	;# 
  5067  0797                     	;# 
  5068  0798                     	;# 
  5069  0799                     	;# 
  5070  079A                     	;# 
  5071  079B                     	;# 
  5072  080C                     	;# 
  5073  080D                     	;# 
  5074  080E                     	;# 
  5075  080F                     	;# 
  5076  0810                     	;# 
  5077  0811                     	;# 
  5078  0812                     	;# 
  5079  0813                     	;# 
  5080  0814                     	;# 
  5081  081A                     	;# 
  5082  081B                     	;# 
  5083  081C                     	;# 
  5084  081D                     	;# 
  5085  081E                     	;# 
  5086  081F                     	;# 
  5087  088C                     	;# 
  5088  088D                     	;# 
  5089  088E                     	;# 
  5090  088F                     	;# 
  5091  0890                     	;# 
  5092  0891                     	;# 
  5093  0892                     	;# 
  5094  0893                     	;# 
  5095  0895                     	;# 
  5096  0896                     	;# 
  5097  0897                     	;# 
  5098  0898                     	;# 
  5099  0899                     	;# 
  5100  089A                     	;# 
  5101  089B                     	;# 
  5102  090C                     	;# 
  5103  090E                     	;# 
  5104  090F                     	;# 
  5105  091F                     	;# 
  5106  091F                     	;# 
  5107  098F                     	;# 
  5108  098F                     	;# 
  5109  0990                     	;# 
  5110  0991                     	;# 
  5111  0992                     	;# 
  5112  0993                     	;# 
  5113  0994                     	;# 
  5114  0995                     	;# 
  5115  0996                     	;# 
  5116  0997                     	;# 
  5117  0E0F                     	;# 
  5118  0E10                     	;# 
  5119  0E11                     	;# 
  5120  0E12                     	;# 
  5121  0E13                     	;# 
  5122  0E14                     	;# 
  5123  0E15                     	;# 
  5124  0E16                     	;# 
  5125  0E17                     	;# 
  5126  0E18                     	;# 
  5127  0E19                     	;# 
  5128  0E1A                     	;# 
  5129  0E1B                     	;# 
  5130  0E1C                     	;# 
  5131  0E1D                     	;# 
  5132  0E1E                     	;# 
  5133  0E1F                     	;# 
  5134  0E20                     	;# 
  5135  0E21                     	;# 
  5136  0E22                     	;# 
  5137  0E23                     	;# 
  5138  0E24                     	;# 
  5139  0E25                     	;# 
  5140  0E26                     	;# 
  5141  0E27                     	;# 
  5142  0E28                     	;# 
  5143  0E29                     	;# 
  5144  0E2A                     	;# 
  5145  0E2B                     	;# 
  5146  0E2C                     	;# 
  5147  0E2D                     	;# 
  5148  0E2E                     	;# 
  5149  0E2F                     	;# 
  5150  0E30                     	;# 
  5151  0E31                     	;# 
  5152  0E32                     	;# 
  5153  0E33                     	;# 
  5154  0E34                     	;# 
  5155  0E35                     	;# 
  5156  0E36                     	;# 
  5157  0E37                     	;# 
  5158  0E8F                     	;# 
  5159  0E90                     	;# 
  5160  0E91                     	;# 
  5161  0E92                     	;# 
  5162  0E93                     	;# 
  5163  0E94                     	;# 
  5164  0E95                     	;# 
  5165  0E96                     	;# 
  5166  0E97                     	;# 
  5167  0E9C                     	;# 
  5168  0E9D                     	;# 
  5169  0E9E                     	;# 
  5170  0EA1                     	;# 
  5171  0EA2                     	;# 
  5172  0EA3                     	;# 
  5173  0EA4                     	;# 
  5174  0EA5                     	;# 
  5175  0EA9                     	;# 
  5176  0EAA                     	;# 
  5177  0EAB                     	;# 
  5178  0EAC                     	;# 
  5179  0EB1                     	;# 
  5180  0EB2                     	;# 
  5181  0EB3                     	;# 
  5182  0EB8                     	;# 
  5183  0EB9                     	;# 
  5184  0EBA                     	;# 
  5185  0EBB                     	;# 
  5186  0EBC                     	;# 
  5187  0EBD                     	;# 
  5188  0EBE                     	;# 
  5189  0EC3                     	;# 
  5190  0EC5                     	;# 
  5191  0EC6                     	;# 
  5192  0EC7                     	;# 
  5193  0EC8                     	;# 
  5194  0EC9                     	;# 
  5195  0ECA                     	;# 
  5196  0ECB                     	;# 
  5197  0ECC                     	;# 
  5198  0F10                     	;# 
  5199  0F11                     	;# 
  5200  0F12                     	;# 
  5201  0F13                     	;# 
  5202  0F14                     	;# 
  5203  0F15                     	;# 
  5204  0F16                     	;# 
  5205  0F17                     	;# 
  5206  0F18                     	;# 
  5207  0F19                     	;# 
  5208  0F1A                     	;# 
  5209  0F1B                     	;# 
  5210  0F1C                     	;# 
  5211  0F1D                     	;# 
  5212  0F1E                     	;# 
  5213  0F1F                     	;# 
  5214  0F20                     	;# 
  5215  0F21                     	;# 
  5216  0F22                     	;# 
  5217  0F23                     	;# 
  5218  0F24                     	;# 
  5219  0F25                     	;# 
  5220  0F26                     	;# 
  5221  0F27                     	;# 
  5222  0F38                     	;# 
  5223  0F39                     	;# 
  5224  0F3A                     	;# 
  5225  0F3B                     	;# 
  5226  0F3C                     	;# 
  5227  0F3D                     	;# 
  5228  0F3E                     	;# 
  5229  0F3F                     	;# 
  5230  0F40                     	;# 
  5231  0F41                     	;# 
  5232  0F43                     	;# 
  5233  0F44                     	;# 
  5234  0F45                     	;# 
  5235  0F46                     	;# 
  5236  0F47                     	;# 
  5237  0F48                     	;# 
  5238  0F49                     	;# 
  5239  0F4A                     	;# 
  5240  0F4B                     	;# 
  5241  0F4C                     	;# 
  5242  0F4E                     	;# 
  5243  0F4F                     	;# 
  5244  0F50                     	;# 
  5245  0F51                     	;# 
  5246  0F52                     	;# 
  5247  0F53                     	;# 
  5248  0F54                     	;# 
  5249  0F55                     	;# 
  5250  0F56                     	;# 
  5251  0F57                     	;# 
  5252  0F65                     	;# 
  5253  0F68                     	;# 
  5254  0F69                     	;# 
  5255  0F6A                     	;# 
  5256  0F6B                     	;# 
  5257  0FE4                     	;# 
  5258  0FE5                     	;# 
  5259  0FE6                     	;# 
  5260  0FE7                     	;# 
  5261  0FE8                     	;# 
  5262  0FE9                     	;# 
  5263  0FEA                     	;# 
  5264  0FEB                     	;# 
  5265  0FED                     	;# 
  5266  0FEE                     	;# 
  5267  0FEF                     	;_samples
  5268                           
  5269                           	psect	idataBANK0
  5270  0804                     __pidataBANK0:	
  5271                           
  5272                           ;initializer for _batteryTemp
  5273  0804  34FA               	retlw	250
  5274  0805  3400               	retlw	0
  5275                           
  5276                           	psect	idataBANK2
  5277  12A3                     __pidataBANK2:	
  5278                           
  5279                           ;initializer for _channels
  5280  12A3  3414               	retlw	20
  5281  12A4  3400               	retlw	0
  5282  12A5  3410               	retlw	16
  5283  12A6  3400               	retlw	0
  5284  12A7  3416               	retlw	22
  5285  12A8  3400               	retlw	0
  5286  12A9  3412               	retlw	18
  5287  12AA  3400               	retlw	0
  5288                           
  5289                           	psect	stringtext1
  5290  1000                     __pstringtext1:	
  5291  1000                     _fonts:	
  5292  1000  3400               	retlw	0
  5293  1001  3400               	retlw	0
  5294  1002  3400               	retlw	0
  5295  1003  3400               	retlw	0
  5296  1004  344E               	retlw	78
  5297  1005  3400               	retlw	0
  5298  1006  3406               	retlw	6
  5299  1007  3400               	retlw	0
  5300  1008  3406               	retlw	6
  5301  1009  34FF               	retlw	255
  5302  100A  34FF               	retlw	255
  5303  100B  34FF               	retlw	255
  5304  100C  3448               	retlw	72
  5305  100D  34D6               	retlw	214
  5306  100E  3424               	retlw	36
  5307  100F  3412               	retlw	18
  5308  1010  3408               	retlw	8
  5309  1011  3424               	retlw	36
  5310  1012  34FF               	retlw	255
  5311  1013  34FF               	retlw	255
  5312  1014  34FF               	retlw	255
  5313  1015  3400               	retlw	0
  5314  1016  3406               	retlw	6
  5315  1017  3400               	retlw	0
  5316  1018  3438               	retlw	56
  5317  1019  3444               	retlw	68
  5318  101A  3482               	retlw	130
  5319  101B  3482               	retlw	130
  5320  101C  3444               	retlw	68
  5321  101D  3438               	retlw	56
  5322  101E  3414               	retlw	20
  5323  101F  3408               	retlw	8
  5324  1020  343E               	retlw	62
  5325  1021  3410               	retlw	16
  5326  1022  3438               	retlw	56
  5327  1023  3410               	retlw	16
  5328  1024  34A0               	retlw	160
  5329  1025  3460               	retlw	96
  5330  1026  3400               	retlw	0
  5331  1027  3410               	retlw	16
  5332  1028  3410               	retlw	16
  5333  1029  3410               	retlw	16
  5334  102A  3460               	retlw	96
  5335  102B  3460               	retlw	96
  5336  102C  3400               	retlw	0
  5337  102D  3460               	retlw	96
  5338  102E  3418               	retlw	24
  5339  102F  3406               	retlw	6
  5340  1030  347C               	retlw	124
  5341  1031  3442               	retlw	66
  5342  1032  347C               	retlw	124
  5343  1033  3444               	retlw	68
  5344  1034  347E               	retlw	126
  5345  1035  3440               	retlw	64
  5346  1036  3464               	retlw	100
  5347  1037  3452               	retlw	82
  5348  1038  344C               	retlw	76
  5349  1039  344A               	retlw	74
  5350  103A  344A               	retlw	74
  5351  103B  3434               	retlw	52
  5352  103C  3438               	retlw	56
  5353  103D  3424               	retlw	36
  5354  103E  347E               	retlw	126
  5355  103F  344E               	retlw	78
  5356  1040  344A               	retlw	74
  5357  1041  3432               	retlw	50
  5358  1042  343C               	retlw	60
  5359  1043  344A               	retlw	74
  5360  1044  3432               	retlw	50
  5361  1045  3462               	retlw	98
  5362  1046  341A               	retlw	26
  5363  1047  3406               	retlw	6
  5364  1048  3476               	retlw	118
  5365  1049  344A               	retlw	74
  5366  104A  3476               	retlw	118
  5367  104B  344C               	retlw	76
  5368  104C  3452               	retlw	82
  5369  104D  343C               	retlw	60
  5370  104E  346C               	retlw	108
  5371  104F  346C               	retlw	108
  5372  1050  3400               	retlw	0
  5373  1051  34AC               	retlw	172
  5374  1052  346C               	retlw	108
  5375  1053  3400               	retlw	0
  5376  1054  3410               	retlw	16
  5377  1055  3428               	retlw	40
  5378  1056  3444               	retlw	68
  5379  1057  3428               	retlw	40
  5380  1058  3428               	retlw	40
  5381  1059  3428               	retlw	40
  5382  105A  3444               	retlw	68
  5383  105B  3428               	retlw	40
  5384  105C  3410               	retlw	16
  5385  105D  3402               	retlw	2
  5386  105E  3459               	retlw	89
  5387  105F  3406               	retlw	6
  5388  1060  34FF               	retlw	255
  5389  1061  34FF               	retlw	255
  5390  1062  34FF               	retlw	255
  5391  1063  347C               	retlw	124
  5392  1064  3412               	retlw	18
  5393  1065  347C               	retlw	124
  5394  1066  347E               	retlw	126
  5395  1067  345A               	retlw	90
  5396  1068  3434               	retlw	52
  5397  1069  343C               	retlw	60
  5398  106A  3442               	retlw	66
  5399  106B  3442               	retlw	66
  5400  106C  347E               	retlw	126
  5401  106D  3442               	retlw	66
  5402  106E  343C               	retlw	60
  5403  106F  347E               	retlw	126
  5404  1070  344A               	retlw	74
  5405  1071  3442               	retlw	66
  5406  1072  347E               	retlw	126
  5407  1073  340A               	retlw	10
  5408  1074  340A               	retlw	10
  5409  1075  343C               	retlw	60
  5410  1076  3452               	retlw	82
  5411  1077  3434               	retlw	52
  5412  1078  347E               	retlw	126
  5413  1079  3408               	retlw	8
  5414  107A  347E               	retlw	126
  5415  107B  3442               	retlw	66
  5416  107C  347E               	retlw	126
  5417  107D  3442               	retlw	66
  5418  107E  3430               	retlw	48
  5419  107F  3440               	retlw	64
  5420  1080  343E               	retlw	62
  5421  1081  347E               	retlw	126
  5422  1082  3418               	retlw	24
  5423  1083  3466               	retlw	102
  5424  1084  347E               	retlw	126
  5425  1085  3440               	retlw	64
  5426  1086  3440               	retlw	64
  5427  1087  347E               	retlw	126
  5428  1088  341C               	retlw	28
  5429  1089  347E               	retlw	126
  5430  108A  347E               	retlw	126
  5431  108B  3402               	retlw	2
  5432  108C  347E               	retlw	126
  5433  108D  343C               	retlw	60
  5434  108E  3442               	retlw	66
  5435  108F  343C               	retlw	60
  5436  1090  347E               	retlw	126
  5437  1091  3412               	retlw	18
  5438  1092  340C               	retlw	12
  5439  1093  347E               	retlw	126
  5440  1094  3462               	retlw	98
  5441  1095  34FE               	retlw	254
  5442  1096  347E               	retlw	126
  5443  1097  3432               	retlw	50
  5444  1098  344E               	retlw	78
  5445  1099  3444               	retlw	68
  5446  109A  344A               	retlw	74
  5447  109B  3432               	retlw	50
  5448  109C  3402               	retlw	2
  5449  109D  347E               	retlw	126
  5450  109E  3402               	retlw	2
  5451  109F  347E               	retlw	126
  5452  10A0  3440               	retlw	64
  5453  10A1  347E               	retlw	126
  5454  10A2  343E               	retlw	62
  5455  10A3  3440               	retlw	64
  5456  10A4  343E               	retlw	62
  5457  10A5  347E               	retlw	126
  5458  10A6  3438               	retlw	56
  5459  10A7  347E               	retlw	126
  5460  10A8  3466               	retlw	102
  5461  10A9  3418               	retlw	24
  5462  10AA  3466               	retlw	102
  5463  10AB  340E               	retlw	14
  5464  10AC  3470               	retlw	112
  5465  10AD  340E               	retlw	14
  5466  10AE  3462               	retlw	98
  5467  10AF  345A               	retlw	90
  5468  10B0  3446               	retlw	70
  5469  10B1  3400               	retlw	0
  5470  10B2  347E               	retlw	126
  5471  10B3  3442               	retlw	66
  5472  10B4  3406               	retlw	6
  5473  10B5  3418               	retlw	24
  5474  10B6  3460               	retlw	96
  5475  10B7  3442               	retlw	66
  5476  10B8  347E               	retlw	126
  5477  10B9  3400               	retlw	0
  5478  10BA  3404               	retlw	4
  5479  10BB  3402               	retlw	2
  5480  10BC  3404               	retlw	4
  5481  10BD  3440               	retlw	64
  5482  10BE  3440               	retlw	64
  5483  10BF  3440               	retlw	64
  5484  10C0  3400               	retlw	0
  5485  10C1  3402               	retlw	2
  5486  10C2  3404               	retlw	4
  5487  10C3  3474               	retlw	116
  5488  10C4  3454               	retlw	84
  5489  10C5  3478               	retlw	120
  5490  10C6  347E               	retlw	126
  5491  10C7  3448               	retlw	72
  5492  10C8  3430               	retlw	48
  5493  10C9  3430               	retlw	48
  5494  10CA  3448               	retlw	72
  5495  10CB  3448               	retlw	72
  5496  10CC  3430               	retlw	48
  5497  10CD  3448               	retlw	72
  5498  10CE  347E               	retlw	126
  5499  10CF  3438               	retlw	56
  5500  10D0  3454               	retlw	84
  5501  10D1  3458               	retlw	88
  5502  10D2  347C               	retlw	124
  5503  10D3  340A               	retlw	10
  5504  10D4  3402               	retlw	2
  5505  10D5  3498               	retlw	152
  5506  10D6  34A4               	retlw	164
  5507  10D7  347C               	retlw	124
  5508  10D8  347E               	retlw	126
  5509  10D9  3408               	retlw	8
  5510  10DA  3470               	retlw	112
  5511  10DB  3448               	retlw	72
  5512  10DC  347A               	retlw	122
  5513  10DD  3440               	retlw	64
  5514  10DE  3488               	retlw	136
  5515  10DF  34FA               	retlw	250
  5516  10E0  3400               	retlw	0
  5517  10E1  347E               	retlw	126
  5518  10E2  3418               	retlw	24
  5519  10E3  3464               	retlw	100
  5520  10E4  3442               	retlw	66
  5521  10E5  347E               	retlw	126
  5522  10E6  3440               	retlw	64
  5523  10E7  347C               	retlw	124
  5524  10E8  3438               	retlw	56
  5525  10E9  347C               	retlw	124
  5526  10EA  347C               	retlw	124
  5527  10EB  3404               	retlw	4
  5528  10EC  3478               	retlw	120
  5529  10ED  3438               	retlw	56
  5530  10EE  3444               	retlw	68
  5531  10EF  3438               	retlw	56
  5532  10F0  34FC               	retlw	252
  5533  10F1  3424               	retlw	36
  5534  10F2  3418               	retlw	24
  5535  10F3  3418               	retlw	24
  5536  10F4  3424               	retlw	36
  5537  10F5  34FC               	retlw	252
  5538  10F6  3478               	retlw	120
  5539  10F7  3404               	retlw	4
  5540  10F8  3404               	retlw	4
  5541  10F9  3448               	retlw	72
  5542  10FA  3454               	retlw	84
  5543  10FB  3424               	retlw	36
  5544  10FC  3404               	retlw	4
  5545  10FD  343E               	retlw	62
  5546  10FE  3444               	retlw	68
  5547  10FF  347C               	retlw	124
  5548  1100  3440               	retlw	64
  5549  1101  347C               	retlw	124
  5550  1102  343C               	retlw	60
  5551  1103  3440               	retlw	64
  5552  1104  343C               	retlw	60
  5553  1105  347C               	retlw	124
  5554  1106  3430               	retlw	48
  5555  1107  347C               	retlw	124
  5556  1108  346C               	retlw	108
  5557  1109  3410               	retlw	16
  5558  110A  346C               	retlw	108
  5559  110B  349C               	retlw	156
  5560  110C  34A0               	retlw	160
  5561  110D  347C               	retlw	124
  5562  110E  3464               	retlw	100
  5563  110F  3454               	retlw	84
  5564  1110  344C               	retlw	76
  5565  1111  340C               	retlw	12
  5566  1112  3412               	retlw	18
  5567  1113  340C               	retlw	12
  5568  1114  34FF               	retlw	255
  5569  1115  34FF               	retlw	255
  5570  1116  34FF               	retlw	255
  5571  1117  34FF               	retlw	255
  5572  1118  34FF               	retlw	255
  5573  1119  34FF               	retlw	255
  5574  111A  34FF               	retlw	255
  5575  111B  34FF               	retlw	255
  5576  111C  34FF               	retlw	255
  5577  111D  34FF               	retlw	255
  5578  111E  34FF               	retlw	255
  5579  111F  34FF               	retlw	255
  5580  1120  34FF               	retlw	255
  5581  1121  34FF               	retlw	255
  5582  1122  34FF               	retlw	255
  5583  1123  34FF               	retlw	255
  5584  1124  34FF               	retlw	255
  5585  1125  34FF               	retlw	255
  5586  1126  34FC               	retlw	252
  5587  1127  3440               	retlw	64
  5588  1128  347C               	retlw	124
  5589  1129  34FF               	retlw	255
  5590  112A  34FF               	retlw	255
  5591  112B  34FF               	retlw	255
  5592  112C  34FF               	retlw	255
  5593  112D  34FF               	retlw	255
  5594  112E  34FF               	retlw	255
  5595  112F                     __end_of_fonts:	
  5596                           
  5597                           	psect	stringtext2
  5598  1800                     __pstringtext2:	
  5599  1800                     log@coeff:	
  5600  1800  3400               	retlw	0
  5601  1801  3400               	retlw	0
  5602  1802  3400               	retlw	0
  5603  1803  3400               	retlw	0
  5604  1804  3480               	retlw	128
  5605  1805  343F               	retlw	63
  5606  1806  34F0               	retlw	240
  5607  1807  34FF               	retlw	255
  5608  1808  34BE               	retlw	190
  5609  1809  34E2               	retlw	226
  5610  180A  34A9               	retlw	169
  5611  180B  343E               	retlw	62
  5612  180C  3483               	retlw	131
  5613  180D  3476               	retlw	118
  5614  180E  34BE               	retlw	190
  5615  180F  34AE               	retlw	174
  5616  1810  342B               	retlw	43
  5617  1811  343E               	retlw	62
  5618  1812  343C               	retlw	60
  5619  1813  34C3               	retlw	195
  5620  1814  34BD               	retlw	189
  5621  1815  34D2               	retlw	210
  5622  1816  3413               	retlw	19
  5623  1817  343D               	retlw	61
  5624  1818  3478               	retlw	120
  5625  1819  34D3               	retlw	211
  5626  181A  34BB               	retlw	187
  5627  181B                     __end_oflog@coeff:	
  5628  0013                     _TRISC	set	19
  5629  0012                     _TRISB	set	18
  5630  0011                     _TRISA	set	17
  5631  0018                     _LATC	set	24
  5632  0017                     _LATB	set	23
  5633  0016                     _LATA	set	22
  5634  0016                     _LATAbits	set	22
  5635  0011                     _TRISAbits	set	17
  5636  00B5                     _LATA5	set	181
  5637  006A                     _RB2	set	106
  5638  005F                     _GIE	set	95
  5639  0093                     _ADCON0	set	147
  5640  009D                     _ADACQ	set	157
  5641  009C                     _ADPRE	set	156
  5642  009B                     _ADCAP	set	155
  5643  009A                     _ADREF	set	154
  5644  0098                     _ADCLK	set	152
  5645  0097                     _ADSTAT	set	151
  5646  0099                     _ADACT	set	153
  5647  0096                     _ADCON3	set	150
  5648  0095                     _ADCON2	set	149
  5649  0094                     _ADCON1	set	148
  5650  008C                     _ADRESL	set	140
  5651  008D                     _ADRESH	set	141
  5652  0093                     _ADCON0bits	set	147
  5653  009E                     _ADPCH	set	158
  5654  0113                     _ADSTPTH	set	275
  5655  0112                     _ADSTPTL	set	274
  5656  0111                     _ADUTHH	set	273
  5657  0110                     _ADUTHL	set	272
  5658  010F                     _ADLTHH	set	271
  5659  010E                     _ADLTHL	set	270
  5660  010D                     _ADRPT	set	269
  5661  021E                     _CCPTMRS0bits	set	542
  5662  021F                     _CCPTMRS1bits	set	543
  5663  0294                     _T4CONbits	set	660
  5664  0292                     _T4TMR	set	658
  5665  0293                     _T4PR	set	659
  5666  0297                     _T4RST	set	663
  5667  0295                     _T4HLT	set	661
  5668  0296                     _T4CLKCON	set	662
  5669  0294                     _T4CON	set	660
  5670  028E                     _T2CONbits	set	654
  5671  028C                     _T2TMR	set	652
  5672  028D                     _T2PR	set	653
  5673  0291                     _T2RST	set	657
  5674  028F                     _T2HLT	set	655
  5675  0290                     _T2CLKCON	set	656
  5676  028E                     _T2CON	set	654
  5677  030C                     _CCPR1L	set	780
  5678  030D                     _CCPR1H	set	781
  5679  030E                     _CCP1CONbits	set	782
  5680  0390                     _PWM7DCL	set	912
  5681  0391                     _PWM7DCH	set	913
  5682  0392                     _PWM7CON	set	914
  5683  038C                     _PWM6DCL	set	908
  5684  038D                     _PWM6DCH	set	909
  5685  038E                     _PWM6CON	set	910
  5686  0710                     _PIR4bits	set	1808
  5687  0716                     _PIE0bits	set	1814
  5688  0892                     _OSCTUNE	set	2194
  5689  0893                     _OSCFRQ	set	2195
  5690  0891                     _OSCEN	set	2193
  5691  088F                     _OSCCON3	set	2191
  5692  088D                     _OSCCON1	set	2189
  5693  090C                     _FVRCON	set	2316
  5694  0E8F                     _PPSLOCKbits	set	3727
  5695  0E8F                     _PPSLOCK	set	3727
  5696  0F18                     _RB0PPS	set	3864
  5697  0F17                     _RA7PPS	set	3863
  5698  0F16                     _RA6PPS	set	3862
  5699  0F4E                     _ANSELC	set	3918
  5700  0F43                     _ANSELB	set	3907
  5701  0F38                     _ANSELA	set	3896
  5702  0F65                     _WPUE	set	3941
  5703  0F4F                     _WPUC	set	3919
  5704  0F44                     _WPUB	set	3908
  5705  0F39                     _WPUA	set	3897
  5706  181B                     STR_3:	
  5707  181B  3452               	retlw	82	;'R'
  5708  181C  3465               	retlw	101	;'e'
  5709  181D  3466               	retlw	102	;'f'
  5710  181E  343A               	retlw	58	;':'
  5711  181F  3400               	retlw	0
  5712                           
  5713                           	psect	stringtext3
  5714  1820                     __pstringtext3:	
  5715  1820                     STR_2:	
  5716  1820  344F               	retlw	79	;'O'
  5717  1821  3475               	retlw	117	;'u'
  5718  1822  3474               	retlw	116	;'t'
  5719  1823  343A               	retlw	58	;':'
  5720  1824  3400               	retlw	0
  5721                           
  5722                           	psect	stringtext4
  5723  1825                     __pstringtext4:	
  5724  1825                     STR_1:	
  5725  1825  3449               	retlw	73	;'I'
  5726  1826  346E               	retlw	110	;'n'
  5727  1827  343A               	retlw	58	;':'
  5728  1828  3400               	retlw	0
  5729                           
  5730                           	psect	stringtext5
  5731  0000                     __pstringtext5:	
  5732                           
  5733                           ; #config settings
  5734  0000                     
  5735                           	psect	cinit
  5736  07B5                     start_initialization:	
  5737  07B5                     __initialization:		;BIGRAM
  5738                           
  5739                           ; Initialize objects allocated to BANK0
  5740  07B5  3188  2004  3187   	fcall	__pidataBANK0	;fetch initializer
  5741  07B8  00ED               	movwf	__pdataBANK0& (0+127)
  5742  07B9  3188  2005  3187   	fcall	__pidataBANK0+1	;fetch initializer
  5743  07BC  00EE               	movwf	(__pdataBANK0+1)& (0+127)
  5744                           
  5745                           ; Initialize objects allocated to BANK2
  5746  07BD  30A3               	movlw	low __pidataBANK2
  5747  07BE  0084               	movwf	4
  5748  07BF  3092               	movlw	(high __pidataBANK2)| (0+128)
  5749  07C0  0085               	movwf	5
  5750  07C1  0022               	movlb	2	; select bank2
  5751  07C2  0012               	moviw fsr0++
  5752  07C3  00B5               	movwf	__pdataBANK2& (0+127)
  5753  07C4  0012               	moviw fsr0++
  5754  07C5  00B6               	movwf	(__pdataBANK2+1)& (0+127)
  5755  07C6  0012               	moviw fsr0++
  5756  07C7  00B7               	movwf	(__pdataBANK2+2)& (0+127)
  5757  07C8  0012               	moviw fsr0++
  5758  07C9  00B8               	movwf	(__pdataBANK2+3)& (0+127)
  5759  07CA  0012               	moviw fsr0++
  5760  07CB  00B9               	movwf	(__pdataBANK2+4)& (0+127)
  5761  07CC  0012               	moviw fsr0++
  5762  07CD  00BA               	movwf	(__pdataBANK2+5)& (0+127)
  5763  07CE  0012               	moviw fsr0++
  5764  07CF  00BB               	movwf	(__pdataBANK2+6)& (0+127)
  5765  07D0  0012               	moviw fsr0++
  5766  07D1  00BC               	movwf	(__pdataBANK2+7)& (0+127)
  5767                           
  5768                           ; Clear objects allocated to BIGRAM
  5769  07D2  3060               	movlw	low (0+8800)
  5770  07D3  0084               	movwf	4
  5771  07D4  3022               	movlw	high (0+8800)
  5772  07D5  0085               	movwf	5
  5773  07D6  3090               	movlw	144
  5774  07D7  00FE               	movwf	btemp
  5775  07D8  3001               	movlw	1
  5776  07D9  00FF               	movwf	btemp+1
  5777  07DA  3192  22B4  3187   	fcall	clear_ram0
  5778                           
  5779                           ; Clear objects allocated to BANK0
  5780  07DD  305B               	movlw	low __pbssBANK0
  5781  07DE  0084               	movwf	4
  5782  07DF  3000               	movlw	high __pbssBANK0
  5783  07E0  0085               	movwf	5
  5784  07E1  3012               	movlw	18
  5785  07E2  00FE               	movwf	btemp
  5786  07E3  3000               	movlw	0
  5787  07E4  00FF               	movwf	btemp+1
  5788  07E5  3192  22B4  3187   	fcall	clear_ram0
  5789                           
  5790                           ; Clear objects allocated to BANK1
  5791  07E8  30A0               	movlw	low __pbssBANK1
  5792  07E9  0084               	movwf	4
  5793  07EA  3000               	movlw	high __pbssBANK1
  5794  07EB  0085               	movwf	5
  5795  07EC  3036               	movlw	54
  5796  07ED  00FE               	movwf	btemp
  5797  07EE  3000               	movlw	0
  5798  07EF  00FF               	movwf	btemp+1
  5799  07F0  3192  22B4  3187   	fcall	clear_ram0
  5800                           
  5801                           ; Clear objects allocated to BANK2
  5802  07F3  3020               	movlw	low __pbssBANK2
  5803  07F4  0084               	movwf	4
  5804  07F5  3001               	movlw	high __pbssBANK2
  5805  07F6  0085               	movwf	5
  5806  07F7  3015               	movlw	21
  5807  07F8  00FE               	movwf	btemp
  5808  07F9  3000               	movlw	0
  5809  07FA  00FF               	movwf	btemp+1
  5810  07FB  3192  22B4         	fcall	clear_ram0
  5811  07FD                     end_of_initialization:	
  5812                           ;End of C runtime variable initialization code
  5813                           
  5814  07FD                     __end_of__initialization:	
  5815  07FD  0020               	movlb	0
  5816  07FE  3182  2A97         	ljmp	_main	;jump to C main() function
  5817                           
  5818                           	psect	bssBANK0
  5819  005B                     __pbssBANK0:	
  5820  005B                     _Vref:	
  5821  005B                     	ds	4
  5822  005F                     _readButtons:	
  5823  005F                     	ds	2
  5824  0061                     _VHoldMode:	
  5825  0061                     	ds	2
  5826  0063                     _Imode:	
  5827  0063                     	ds	2
  5828  0065                     _batteryState:	
  5829  0065                     	ds	2
  5830  0067                     _sampleIndex:	
  5831  0067                     	ds	2
  5832  0069                     _j:	
  5833  0069                     	ds	1
  5834  006A                     _lastButton:	
  5835  006A                     	ds	1
  5836  006B                     _button:	
  5837  006B                     	ds	1
  5838  006C                     _x:	
  5839  006C                     	ds	1
  5840                           
  5841                           	psect	dataBANK0
  5842  006D                     __pdataBANK0:	
  5843  006D                     _batteryTemp:	
  5844  006D                     	ds	2
  5845                           
  5846                           	psect	bssBANK1
  5847  00A0                     __pbssBANK1:	
  5848  00A0                     _Ianalogs:	
  5849  00A0                     	ds	8
  5850  00A8                     _Vanalogs:	
  5851  00A8                     	ds	8
  5852  00B0                     _voltage:	
  5853  00B0                     	ds	8
  5854  00B8                     _current:	
  5855  00B8                     	ds	8
  5856  00C0                     _stateCounter:	
  5857  00C0                     	ds	4
  5858  00C4                     _Iref:	
  5859  00C4                     	ds	4
  5860  00C8                     _IminCount:	
  5861  00C8                     	ds	4
  5862  00CC                     _Imin:	
  5863  00CC                     	ds	4
  5864  00D0                     _errno:	
  5865  00D0                     	ds	2
  5866  00D2                     _Iout:	
  5867  00D2                     	ds	2
  5868  00D4                     _cc_cv:	
  5869  00D4                     	ds	2
  5870                           
  5871                           	psect	bssBANK2
  5872  0120                     __pbssBANK2:	
  5873  0120                     _totals:	
  5874  0120                     	ds	16
  5875  0130                     LCDWriteInt@F14390:	
  5876  0130                     	ds	5
  5877                           
  5878                           	psect	dataBANK2
  5879  0135                     __pdataBANK2:	
  5880  0135                     _channels:	
  5881  0135                     	ds	8
  5882                           
  5883                           	psect	clrtext
  5884  12B4                     clear_ram0:	
  5885                           ;	Called with FSR0 containing the base address, and
  5886                           ;	btemp/btemp+1 has the size to clear
  5887                           
  5888  12B4  0064               	clrwdt	;clear the watchdog before getting into this loop
  5889  12B5                     clrloop0:	
  5890  12B5  0180               	clrf	0	;clear RAM location pointed to by FSR
  5891  12B6  3101               	addfsr 0,1
  5892  12B7  3001               	movlw	1
  5893  12B8  02FE               	subwf	126,f
  5894  12B9  3000               	movlw	0
  5895  12BA  3BFF               	subwfb	127,f
  5896  12BB  087F               	movf	127,w
  5897  12BC  047E               	iorwf	126,w
  5898  12BD  1903               	btfsc	3,2
  5899  12BE  3400               	retlw	0	;all done for this memory range, return
  5900  12BF  2AB5               	goto	clrloop0	;have we reached the end yet?
  5901                           
  5902                           	psect	cstackBANK1
  5903  00D6                     __pcstackBANK1:	
  5904  00D6                     main@efficiency:	
  5905                           
  5906                           ; 3 bytes @ 0x0
  5907  00D6                     	ds	3
  5908  00D9                     main@faultCount:	
  5909                           
  5910                           ; 2 bytes @ 0x3
  5911  00D9                     	ds	2
  5912  00DB                     main@faultNotReset:	
  5913                           
  5914                           ; 2 bytes @ 0x5
  5915  00DB                     	ds	2
  5916  00DD                     main@tempFanOutput:	
  5917                           
  5918                           ; 2 bytes @ 0x7
  5919  00DD                     	ds	2
  5920  00DF                     main@displayRefresh:	
  5921                           
  5922                           ; 1 bytes @ 0x9
  5923  00DF                     	ds	1
  5924  00E0                     main@slowLoop:	
  5925                           
  5926                           ; 1 bytes @ 0xA
  5927  00E0                     	ds	1
  5928  00E1                     main@IOutTotal:	
  5929                           
  5930                           ; 2 bytes @ 0xB
  5931  00E1                     	ds	2
  5932  00E3                     main@MPPT1:	
  5933                           
  5934                           ; 2 bytes @ 0xD
  5935  00E3                     	ds	2
  5936  00E5                     main@dutyCycle1:	
  5937                           
  5938                           ; 2 bytes @ 0xF
  5939  00E5                     	ds	2
  5940  00E7                     main@MPPT0:	
  5941                           
  5942                           ; 2 bytes @ 0x11
  5943  00E7                     	ds	2
  5944  00E9                     main@menuButton:	
  5945                           
  5946                           ; 1 bytes @ 0x13
  5947  00E9                     	ds	1
  5948  00EA                     main@j:	
  5949                           
  5950                           ; 1 bytes @ 0x14
  5951  00EA                     	ds	1
  5952  00EB                     main@dutyCycle6:	
  5953                           
  5954                           ; 2 bytes @ 0x15
  5955  00EB                     	ds	2
  5956  00ED                     main@dutyCycle7:	
  5957                           
  5958                           ; 2 bytes @ 0x17
  5959  00ED                     	ds	2
  5960                           
  5961                           	psect	cstackCOMMON
  5962  0070                     __pcstackCOMMON:	
  5963  0070                     ?___ftge:	
  5964  0070                     ?_LCDWrite:	
  5965                           ; 1 bit 
  5966                           
  5967  0070                     ?_OSCILLATOR_Initialize:	
  5968                           ; 1 bytes @ 0x0
  5969                           
  5970  0070                     ??_OSCILLATOR_Initialize:	
  5971                           ; 1 bytes @ 0x0
  5972                           
  5973  0070                     ?_TMR2_Initialize:	
  5974                           ; 1 bytes @ 0x0
  5975                           
  5976  0070                     ??_TMR2_Initialize:	
  5977                           ; 1 bytes @ 0x0
  5978                           
  5979  0070                     ?_TMR4_Initialize:	
  5980                           ; 1 bytes @ 0x0
  5981                           
  5982  0070                     ??_TMR4_Initialize:	
  5983                           ; 1 bytes @ 0x0
  5984                           
  5985  0070                     ?_calculateCurrent0:	
  5986                           ; 1 bytes @ 0x0
  5987                           
  5988  0070                     ?_calculateCurrent1:	
  5989                           ; 1 bytes @ 0x0
  5990                           
  5991  0070                     ?_calculateCurrent2:	
  5992                           ; 1 bytes @ 0x0
  5993                           
  5994  0070                     ?_calculateCurrent3:	
  5995                           ; 1 bytes @ 0x0
  5996                           
  5997  0070                     ?_ADC_Initialize:	
  5998                           ; 1 bytes @ 0x0
  5999                           
  6000  0070                     ??_ADC_Initialize:	
  6001                           ; 1 bytes @ 0x0
  6002                           
  6003  0070                     ?_Init_Battery_State_Machine:	
  6004                           ; 1 bytes @ 0x0
  6005                           
  6006  0070                     ?_Battery_State_Machine:	
  6007                           ; 1 bytes @ 0x0
  6008                           
  6009  0070                     ?_cc_cv_mode:	
  6010                           ; 1 bytes @ 0x0
  6011                           
  6012  0070                     ?_readButton:	
  6013                           ; 1 bytes @ 0x0
  6014                           
  6015  0070                     ?_LCDWriteCharacter:	
  6016                           ; 1 bytes @ 0x0
  6017                           
  6018  0070                     ?_LCDClear:	
  6019                           ; 1 bytes @ 0x0
  6020                           
  6021  0070                     ?_LCDInit:	
  6022                           ; 1 bytes @ 0x0
  6023                           
  6024  0070                     ?_PIN_MANAGER_Initialize:	
  6025                           ; 1 bytes @ 0x0
  6026                           
  6027  0070                     ??_PIN_MANAGER_Initialize:	
  6028                           ; 1 bytes @ 0x0
  6029                           
  6030  0070                     ?_PWM_Initialize:	
  6031                           ; 1 bytes @ 0x0
  6032                           
  6033  0070                     ??_PWM_Initialize:	
  6034                           ; 1 bytes @ 0x0
  6035                           
  6036  0070                     ?_PWM6_LoadDutyValue:	
  6037                           ; 1 bytes @ 0x0
  6038                           
  6039  0070                     ?_PWM7_LoadDutyValue:	
  6040                           ; 1 bytes @ 0x0
  6041                           
  6042  0070                     ?_PWM1_LoadDutyValue:	
  6043                           ; 1 bytes @ 0x0
  6044                           
  6045  0070                     ?_SYSTEM_Initialize:	
  6046                           ; 1 bytes @ 0x0
  6047                           
  6048  0070                     ?_main:	
  6049                           ; 1 bytes @ 0x0
  6050                           
  6051  0070                     ?_ADCRead:	
  6052                           ; 1 bytes @ 0x0
  6053                           
  6054  0070                     ?___wmul:	
  6055                           ; 2 bytes @ 0x0
  6056                           
  6057  0070                     ?___awdiv:	
  6058                           ; 2 bytes @ 0x0
  6059                           
  6060  0070                     ?___lwmod:	
  6061                           ; 2 bytes @ 0x0
  6062                           
  6063  0070                     ?___ftpack:	
  6064                           ; 2 bytes @ 0x0
  6065                           
  6066  0070                     ?_frexp:	
  6067                           ; 3 bytes @ 0x0
  6068                           
  6069  0070                     ?___aldiv:	
  6070                           ; 3 bytes @ 0x0
  6071                           
  6072  0070                     LCDWrite@data:	
  6073                           ; 4 bytes @ 0x0
  6074                           
  6075  0070                     PIN_MANAGER_Initialize@state:	
  6076                           ; 1 bytes @ 0x0
  6077                           
  6078  0070                     PWM6_LoadDutyValue@dutyCycle6:	
  6079                           ; 1 bytes @ 0x0
  6080                           
  6081  0070                     PWM7_LoadDutyValue@dutyCycle7:	
  6082                           ; 2 bytes @ 0x0
  6083                           
  6084  0070                     PWM1_LoadDutyValue@dutyCycle1:	
  6085                           ; 2 bytes @ 0x0
  6086                           
  6087  0070                     ___wmul@multiplier:	
  6088                           ; 2 bytes @ 0x0
  6089                           
  6090  0070                     ___awdiv@divisor:	
  6091                           ; 2 bytes @ 0x0
  6092                           
  6093  0070                     ___lwmod@divisor:	
  6094                           ; 2 bytes @ 0x0
  6095                           
  6096  0070                     ___ftpack@arg:	
  6097                           ; 2 bytes @ 0x0
  6098                           
  6099  0070                     ___ftge@ff1:	
  6100                           ; 3 bytes @ 0x0
  6101                           
  6102  0070                     frexp@value:	
  6103                           ; 3 bytes @ 0x0
  6104                           
  6105  0070                     ___aldiv@divisor:	
  6106                           ; 3 bytes @ 0x0
  6107                           
  6108                           
  6109                           ; 4 bytes @ 0x0
  6110  0070                     	ds	1
  6111  0071                     ??_LCDWrite:	
  6112                           
  6113                           ; 1 bytes @ 0x1
  6114  0071                     	ds	1
  6115  0072                     ??_PWM6_LoadDutyValue:	
  6116  0072                     ??_PWM7_LoadDutyValue:	
  6117                           ; 1 bytes @ 0x2
  6118                           
  6119  0072                     ??_PWM1_LoadDutyValue:	
  6120                           ; 1 bytes @ 0x2
  6121                           
  6122  0072                     LCDWrite@data_or_command:	
  6123                           ; 1 bytes @ 0x2
  6124                           
  6125  0072                     ___wmul@multiplicand:	
  6126                           ; 1 bytes @ 0x2
  6127                           
  6128  0072                     ___awdiv@dividend:	
  6129                           ; 2 bytes @ 0x2
  6130                           
  6131  0072                     ___lwmod@dividend:	
  6132                           ; 2 bytes @ 0x2
  6133                           
  6134                           
  6135                           ; 2 bytes @ 0x2
  6136  0072                     	ds	1
  6137  0073                     ??_ADCRead:	
  6138  0073                     ADCRead@channel:	
  6139                           ; 1 bytes @ 0x3
  6140                           
  6141  0073                     LCDWrite@d:	
  6142                           ; 1 bytes @ 0x3
  6143                           
  6144  0073                     ___ftpack@exp:	
  6145                           ; 1 bytes @ 0x3
  6146                           
  6147  0073                     frexp@eptr:	
  6148                           ; 1 bytes @ 0x3
  6149                           
  6150  0073                     ___ftge@ff2:	
  6151                           ; 1 bytes @ 0x3
  6152                           
  6153                           
  6154                           ; 3 bytes @ 0x3
  6155  0073                     	ds	1
  6156  0074                     ??_frexp:	
  6157  0074                     ??_readButton:	
  6158                           ; 1 bytes @ 0x4
  6159                           
  6160  0074                     ??___wmul:	
  6161                           ; 1 bytes @ 0x4
  6162                           
  6163  0074                     ??___awdiv:	
  6164                           ; 1 bytes @ 0x4
  6165                           
  6166  0074                     ??___lwmod:	
  6167                           ; 1 bytes @ 0x4
  6168                           
  6169  0074                     LCDWrite@i:	
  6170                           ; 1 bytes @ 0x4
  6171                           
  6172  0074                     ___ftpack@sign:	
  6173                           ; 1 bytes @ 0x4
  6174                           
  6175  0074                     ___wmul@product:	
  6176                           ; 1 bytes @ 0x4
  6177                           
  6178  0074                     ___aldiv@dividend:	
  6179                           ; 2 bytes @ 0x4
  6180                           
  6181                           
  6182                           ; 4 bytes @ 0x4
  6183  0074                     	ds	1
  6184  0075                     ??___ftpack:	
  6185  0075                     ?_gotoXY:	
  6186                           ; 1 bytes @ 0x5
  6187                           
  6188  0075                     ??_LCDInit:	
  6189                           ; 1 bytes @ 0x5
  6190                           
  6191  0075                     gotoXY@y:	
  6192                           ; 1 bytes @ 0x5
  6193                           
  6194  0075                     ___awdiv@counter:	
  6195                           ; 1 bytes @ 0x5
  6196                           
  6197  0075                     ___lwmod@counter:	
  6198                           ; 1 bytes @ 0x5
  6199                           
  6200                           
  6201                           ; 1 bytes @ 0x5
  6202  0075                     	ds	1
  6203  0076                     ??_gotoXY:	
  6204  0076                     ??_LCDWriteCharacter:	
  6205                           ; 1 bytes @ 0x6
  6206                           
  6207  0076                     ??___ftge:	
  6208                           ; 1 bytes @ 0x6
  6209                           
  6210  0076                     ___awdiv@sign:	
  6211                           ; 1 bytes @ 0x6
  6212                           
  6213                           
  6214                           ; 1 bytes @ 0x6
  6215  0076                     	ds	1
  6216  0077                     gotoXY@x:	
  6217  0077                     ___awdiv@quotient:	
  6218                           ; 1 bytes @ 0x7
  6219                           
  6220                           
  6221                           ; 2 bytes @ 0x7
  6222  0077                     	ds	1
  6223  0078                     ??_LCDClear:	
  6224  0078                     ??___aldiv:	
  6225                           ; 1 bytes @ 0x8
  6226                           
  6227  0078                     ?___awtoft:	
  6228                           ; 1 bytes @ 0x8
  6229                           
  6230  0078                     ___awtoft@c:	
  6231                           ; 3 bytes @ 0x8
  6232                           
  6233                           
  6234                           ; 2 bytes @ 0x8
  6235  0078                     	ds	1
  6236  0079                     LCDWriteCharacter@character:	
  6237  0079                     readIAnalog@analog_channel:	
  6238                           ; 1 bytes @ 0x9
  6239                           
  6240  0079                     LCDClear@index:	
  6241                           ; 2 bytes @ 0x9
  6242                           
  6243                           
  6244                           ; 2 bytes @ 0x9
  6245  0079                     	ds	1
  6246  007A                     LCDWriteCharacter@base:	
  6247                           
  6248                           ; 2 bytes @ 0xA
  6249  007A                     	ds	1
  6250  007B                     ??___awtoft:	
  6251  007B                     readIAnalog@value:	
  6252                           ; 1 bytes @ 0xB
  6253                           
  6254                           
  6255                           ; 2 bytes @ 0xB
  6256  007B                     	ds	1
  6257  007C                     ?_LCDWriteString:	
  6258  007C                     LCDWriteString@characters:	
  6259                           ; 1 bytes @ 0xC
  6260                           
  6261                           
  6262                           ; 2 bytes @ 0xC
  6263  007C                     	ds	1
  6264  007D                     ___awtoft@sign:	
  6265                           
  6266                           ; 1 bytes @ 0xD
  6267  007D                     	ds	1
  6268  007E                     ??_eval_poly:	
  6269  007E                     ??_tempCalc:	
  6270                           ; 1 bytes @ 0xE
  6271                           
  6272  007E                     ??___ftsub:	
  6273                           ; 1 bytes @ 0xE
  6274                           
  6275                           
  6276                           	psect	cstackBANK0
  6277  0020                     __pcstackBANK0:	
  6278                           ; 1 bytes @ 0xE
  6279                           
  6280  0020                     ??_LCDWriteString:	
  6281  0020                     ?_LCDWriteInt:	
  6282                           ; 1 bytes @ 0x0
  6283                           
  6284  0020                     ?___ftdiv:	
  6285                           ; 1 bytes @ 0x0
  6286                           
  6287  0020                     ?___ftmul:	
  6288                           ; 3 bytes @ 0x0
  6289                           
  6290  0020                     ___aldiv@counter:	
  6291                           ; 3 bytes @ 0x0
  6292                           
  6293  0020                     LCDWriteInt@value:	
  6294                           ; 1 bytes @ 0x0
  6295                           
  6296  0020                     ___ftdiv@f2:	
  6297                           ; 2 bytes @ 0x0
  6298                           
  6299  0020                     ___ftmul@f1:	
  6300                           ; 3 bytes @ 0x0
  6301                           
  6302                           
  6303                           ; 3 bytes @ 0x0
  6304  0020                     	ds	1
  6305  0021                     ___aldiv@sign:	
  6306                           
  6307                           ; 1 bytes @ 0x1
  6308  0021                     	ds	1
  6309  0022                     LCDWriteInt@fieldLength:	
  6310  0022                     ___aldiv@quotient:	
  6311                           ; 1 bytes @ 0x2
  6312                           
  6313                           
  6314                           ; 4 bytes @ 0x2
  6315  0022                     	ds	1
  6316  0023                     LCDWriteInt@numPlaces:	
  6317  0023                     ___ftdiv@f1:	
  6318                           ; 1 bytes @ 0x3
  6319                           
  6320  0023                     ___ftmul@f2:	
  6321                           ; 3 bytes @ 0x3
  6322                           
  6323                           
  6324                           ; 3 bytes @ 0x3
  6325  0023                     	ds	1
  6326  0024                     LCDWriteInt@sign:	
  6327                           
  6328                           ; 1 bytes @ 0x4
  6329  0024                     	ds	1
  6330  0025                     ??_LCDWriteInt:	
  6331                           
  6332                           ; 1 bytes @ 0x5
  6333  0025                     	ds	1
  6334  0026                     ??___ftdiv:	
  6335  0026                     ??___ftmul:	
  6336                           ; 1 bytes @ 0x6
  6337                           
  6338  0026                     ?_readIAnalog:	
  6339                           ; 1 bytes @ 0x6
  6340                           
  6341  0026                     readIAnalog@channel:	
  6342                           ; 2 bytes @ 0x6
  6343                           
  6344                           
  6345                           ; 2 bytes @ 0x6
  6346  0026                     	ds	2
  6347  0028                     ??_readIAnalog:	
  6348                           
  6349                           ; 1 bytes @ 0x8
  6350  0028                     	ds	1
  6351  0029                     LCDWriteInt@str:	
  6352                           
  6353                           ; 5 bytes @ 0x9
  6354  0029                     	ds	1
  6355  002A                     ___ftdiv@cntr:	
  6356  002A                     ___ftmul@exp:	
  6357                           ; 1 bytes @ 0xA
  6358                           
  6359                           
  6360                           ; 1 bytes @ 0xA
  6361  002A                     	ds	1
  6362  002B                     ___ftdiv@f3:	
  6363  002B                     ___ftmul@f3_as_product:	
  6364                           ; 3 bytes @ 0xB
  6365                           
  6366                           
  6367                           ; 3 bytes @ 0xB
  6368  002B                     	ds	3
  6369  002E                     LCDWriteInt@j:	
  6370  002E                     ___ftdiv@exp:	
  6371                           ; 1 bytes @ 0xE
  6372                           
  6373  002E                     ___ftmul@cntr:	
  6374                           ; 1 bytes @ 0xE
  6375                           
  6376                           
  6377                           ; 1 bytes @ 0xE
  6378  002E                     	ds	1
  6379  002F                     LCDWriteInt@i:	
  6380  002F                     ___ftdiv@sign:	
  6381                           ; 1 bytes @ 0xF
  6382                           
  6383  002F                     ___ftmul@sign:	
  6384                           ; 1 bytes @ 0xF
  6385                           
  6386                           
  6387                           ; 1 bytes @ 0xF
  6388  002F                     	ds	1
  6389  0030                     ?___ftadd:	
  6390  0030                     ?___fttol:	
  6391                           ; 3 bytes @ 0x10
  6392                           
  6393  0030                     ___ftadd@f1:	
  6394                           ; 4 bytes @ 0x10
  6395                           
  6396  0030                     ___fttol@f1:	
  6397                           ; 3 bytes @ 0x10
  6398                           
  6399                           
  6400                           ; 3 bytes @ 0x10
  6401  0030                     	ds	3
  6402  0033                     ___ftadd@f2:	
  6403                           
  6404                           ; 3 bytes @ 0x13
  6405  0033                     	ds	1
  6406  0034                     ??___fttol:	
  6407                           
  6408                           ; 1 bytes @ 0x14
  6409  0034                     	ds	2
  6410  0036                     ??___ftadd:	
  6411                           
  6412                           ; 1 bytes @ 0x16
  6413  0036                     	ds	2
  6414  0038                     ___fttol@sign1:	
  6415                           
  6416                           ; 1 bytes @ 0x18
  6417  0038                     	ds	1
  6418  0039                     ___fttol@lval:	
  6419                           
  6420                           ; 4 bytes @ 0x19
  6421  0039                     	ds	1
  6422  003A                     ___ftadd@sign:	
  6423                           
  6424                           ; 1 bytes @ 0x1A
  6425  003A                     	ds	1
  6426  003B                     ___ftadd@exp2:	
  6427                           
  6428                           ; 1 bytes @ 0x1B
  6429  003B                     	ds	1
  6430  003C                     ___ftadd@exp1:	
  6431                           
  6432                           ; 1 bytes @ 0x1C
  6433  003C                     	ds	1
  6434  003D                     ?_eval_poly:	
  6435  003D                     ?___ftsub:	
  6436                           ; 3 bytes @ 0x1D
  6437                           
  6438  003D                     ___fttol@exp1:	
  6439                           ; 3 bytes @ 0x1D
  6440                           
  6441  003D                     ___ftsub@f2:	
  6442                           ; 1 bytes @ 0x1D
  6443                           
  6444  003D                     eval_poly@x:	
  6445                           ; 3 bytes @ 0x1D
  6446                           
  6447                           
  6448                           ; 3 bytes @ 0x1D
  6449  003D                     	ds	1
  6450  003E                     ??_calculateCurrent0:	
  6451  003E                     ??_calculateCurrent1:	
  6452                           ; 1 bytes @ 0x1E
  6453                           
  6454  003E                     ??_calculateCurrent2:	
  6455                           ; 1 bytes @ 0x1E
  6456                           
  6457  003E                     ??_calculateCurrent3:	
  6458                           ; 1 bytes @ 0x1E
  6459                           
  6460  003E                     ??_Init_Battery_State_Machine:	
  6461                           ; 1 bytes @ 0x1E
  6462                           
  6463  003E                     ??_Battery_State_Machine:	
  6464                           ; 1 bytes @ 0x1E
  6465                           
  6466  003E                     ??_cc_cv_mode:	
  6467                           ; 1 bytes @ 0x1E
  6468                           
  6469                           
  6470                           ; 1 bytes @ 0x1E
  6471  003E                     	ds	2
  6472  0040                     eval_poly@d:	
  6473  0040                     ___ftsub@f1:	
  6474                           ; 2 bytes @ 0x20
  6475                           
  6476                           
  6477                           ; 3 bytes @ 0x20
  6478  0040                     	ds	2
  6479  0042                     Init_Battery_State_Machine@z:	
  6480  0042                     eval_poly@n:	
  6481                           ; 1 bytes @ 0x22
  6482                           
  6483                           
  6484                           ; 2 bytes @ 0x22
  6485  0042                     	ds	1
  6486  0043                     ??_SYSTEM_Initialize:	
  6487  0043                     Battery_State_Machine@z:	
  6488                           ; 1 bytes @ 0x23
  6489                           
  6490                           
  6491                           ; 1 bytes @ 0x23
  6492  0043                     	ds	1
  6493  0044                     eval_poly@res:	
  6494                           
  6495                           ; 3 bytes @ 0x24
  6496  0044                     	ds	1
  6497  0045                     cc_cv_mode@z:	
  6498                           
  6499                           ; 1 bytes @ 0x25
  6500  0045                     	ds	2
  6501  0047                     ?_log:	
  6502  0047                     log@x:	
  6503                           ; 3 bytes @ 0x27
  6504                           
  6505                           
  6506                           ; 3 bytes @ 0x27
  6507  0047                     	ds	3
  6508  004A                     ??_log:	
  6509                           
  6510                           ; 1 bytes @ 0x2A
  6511  004A                     	ds	1
  6512  004B                     log@exponent:	
  6513                           
  6514                           ; 2 bytes @ 0x2B
  6515  004B                     	ds	2
  6516  004D                     ?_tempCalc:	
  6517  004D                     tempCalc@analogValue:	
  6518                           ; 2 bytes @ 0x2D
  6519                           
  6520                           
  6521                           ; 2 bytes @ 0x2D
  6522  004D                     	ds	2
  6523  004F                     tempCalc@R:	
  6524                           
  6525                           ; 3 bytes @ 0x2F
  6526  004F                     	ds	3
  6527  0052                     _tempCalc$1297:	
  6528                           
  6529                           ; 3 bytes @ 0x32
  6530  0052                     	ds	3
  6531  0055                     tempCalc@steinhart:	
  6532                           
  6533                           ; 3 bytes @ 0x35
  6534  0055                     	ds	3
  6535  0058                     ??_main:	
  6536                           
  6537                           ; 1 bytes @ 0x38
  6538  0058                     	ds	3
  6539                           
  6540                           	psect	maintext
  6541  0297                     __pmaintext:	
  6542 ;;
  6543 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  6544 ;;
  6545 ;; *************** function _main *****************
  6546 ;; Defined at:
  6547 ;;		line 42 in file "main.c"
  6548 ;; Parameters:    Size  Location     Type
  6549 ;;		None
  6550 ;; Auto vars:     Size  Location     Type
  6551 ;;  efficiency      3    0[BANK1 ] float 
  6552 ;;  dutyCycle7      2   23[BANK1 ] unsigned int 
  6553 ;;  dutyCycle6      2   21[BANK1 ] unsigned int 
  6554 ;;  MPPT0           2   17[BANK1 ] int 
  6555 ;;  dutyCycle1      2   15[BANK1 ] unsigned int 
  6556 ;;  MPPT1           2   13[BANK1 ] int 
  6557 ;;  IOutTotal       2   11[BANK1 ] int 
  6558 ;;  tempFanOutpu    2    7[BANK1 ] unsigned int 
  6559 ;;  faultNotRese    2    5[BANK1 ] unsigned int 
  6560 ;;  faultCount      2    3[BANK1 ] unsigned int 
  6561 ;;  j               1   20[BANK1 ] unsigned char 
  6562 ;;  menuButton      1   19[BANK1 ] unsigned char 
  6563 ;;  slowLoop        1   10[BANK1 ] unsigned char 
  6564 ;;  displayRefre    1    9[BANK1 ] unsigned char 
  6565 ;; Return value:  Size  Location     Type
  6566 ;;                  1    wreg      void 
  6567 ;; Registers used:
  6568 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6569 ;; Tracked objects:
  6570 ;;		On entry : B1F/0
  6571 ;;		On exit  : 0/0
  6572 ;;		Unchanged: 0/0
  6573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6574 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6575 ;;      Locals:         0       0      25       0       0       0       0       0       0       0       0       0       
      +0       0
  6576 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6577 ;;      Totals:         0       3      25       0       0       0       0       0       0       0       0       0       
      +0       0
  6578 ;;Total ram usage:       28 bytes
  6579 ;; Hardware stack levels required when called:    5
  6580 ;; This function calls:
  6581 ;;		_ADCRead
  6582 ;;		_Battery_State_Machine
  6583 ;;		_LCDClear
  6584 ;;		_LCDInit
  6585 ;;		_LCDWriteCharacter
  6586 ;;		_LCDWriteInt
  6587 ;;		_LCDWriteString
  6588 ;;		_PWM1_LoadDutyValue
  6589 ;;		_PWM6_LoadDutyValue
  6590 ;;		_PWM7_LoadDutyValue
  6591 ;;		_SYSTEM_Initialize
  6592 ;;		___awtoft
  6593 ;;		___ftdiv
  6594 ;;		___fttol
  6595 ;;		_calculateCurrent0
  6596 ;;		_calculateCurrent1
  6597 ;;		_calculateCurrent2
  6598 ;;		_calculateCurrent3
  6599 ;;		_cc_cv_mode
  6600 ;;		_gotoXY
  6601 ;;		_readButton
  6602 ;;		_readIAnalog
  6603 ;;		_tempCalc
  6604 ;; This function is called by:
  6605 ;;		Startup code after reset
  6606 ;; This function uses a non-reentrant model
  6607 ;;
  6608                           
  6609                           
  6610                           ;psect for function _main
  6611  0297                     _main:	
  6612                           
  6613                           ;main.c: 44: int16_t MPPT0 = 3144;
  6614                           
  6615                           ;incstack = 0
  6616                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6617  0297  3048               	movlw	72
  6618  0298  0021               	movlb	1	; select bank1
  6619  0299  00E7               	movwf	main@MPPT0^(0+128)
  6620  029A  300C               	movlw	12
  6621  029B  00E8               	movwf	(main@MPPT0^(0+128)+1)
  6622                           
  6623                           ;main.c: 45: int16_t MPPT1 = 3144;
  6624  029C  3048               	movlw	72
  6625  029D  00E3               	movwf	main@MPPT1^(0+128)
  6626  029E  300C               	movlw	12
  6627  029F  00E4               	movwf	(main@MPPT1^(0+128)+1)
  6628                           
  6629                           ;main.c: 47: extern uint8_t batteryState[2];
  6630                           ;main.c: 48: uint8_t displayRefresh = 0;
  6631  02A0  01DF               	clrf	main@displayRefresh^(0+128)
  6632                           
  6633                           ;main.c: 49: uint16_t dutyCycle6 = 1023;
  6634  02A1  30FF               	movlw	255
  6635  02A2  00EB               	movwf	main@dutyCycle6^(0+128)
  6636  02A3  3003               	movlw	3
  6637  02A4  00EC               	movwf	(main@dutyCycle6^(0+128)+1)
  6638                           
  6639                           ;main.c: 50: uint16_t dutyCycle7 = 1023;
  6640  02A5  30FF               	movlw	255
  6641  02A6  00ED               	movwf	main@dutyCycle7^(0+128)
  6642  02A7  3003               	movlw	3
  6643  02A8  00EE               	movwf	(main@dutyCycle7^(0+128)+1)
  6644                           
  6645                           ;main.c: 51: uint16_t dutyCycle1 = 260;
  6646  02A9  3004               	movlw	4
  6647  02AA  00E5               	movwf	main@dutyCycle1^(0+128)
  6648  02AB  3001               	movlw	1
  6649  02AC  00E6               	movwf	(main@dutyCycle1^(0+128)+1)
  6650                           
  6651                           ;main.c: 52: float efficiency = 0;
  6652  02AD  3000               	movlw	0
  6653  02AE  00D6               	movwf	main@efficiency^(0+128)
  6654  02AF  3000               	movlw	0
  6655  02B0  00D7               	movwf	(main@efficiency+1)^(0+128)
  6656  02B1  3000               	movlw	0
  6657  02B2  00D8               	movwf	(main@efficiency+2)^(0+128)
  6658                           
  6659                           ;main.c: 53: uint16_t faultCount = 0;
  6660  02B3  01D9               	clrf	main@faultCount^(0+128)
  6661  02B4  01DA               	clrf	(main@faultCount+1)^(0+128)
  6662                           
  6663                           ;main.c: 54: uint16_t faultNotReset = 0;
  6664  02B5  01DB               	clrf	main@faultNotReset^(0+128)
  6665  02B6  01DC               	clrf	(main@faultNotReset+1)^(0+128)
  6666                           
  6667                           ;main.c: 55: extern uint16_t IminCount[2];
  6668                           ;main.c: 56: extern int8_t Imode[2];
  6669                           ;main.c: 57: int16_t IOutTotal = 0;
  6670  02B7  01E1               	clrf	main@IOutTotal^(0+128)
  6671  02B8  01E2               	clrf	(main@IOutTotal+1)^(0+128)
  6672                           
  6673                           ;main.c: 58: extern int16_t Iref[2];
  6674                           ;main.c: 59: uint8_t j = 0;
  6675  02B9  01EA               	clrf	main@j^(0+128)
  6676                           
  6677                           ;main.c: 60: uint8_t menuButton = 0;
  6678  02BA  01E9               	clrf	main@menuButton^(0+128)
  6679                           
  6680                           ;main.c: 61: uint8_t slowLoop = 200;
  6681  02BB  30C8               	movlw	200
  6682  02BC  0020               	movlb	0	; select bank0
  6683  02BD  00D8               	movwf	??_main
  6684  02BE  0858               	movf	??_main,w
  6685  02BF  0021               	movlb	1	; select bank1
  6686  02C0  00E0               	movwf	main@slowLoop^(0+128)
  6687                           
  6688                           ;main.c: 62: uint16_t tempFanOutput = 60;
  6689  02C1  303C               	movlw	60
  6690  02C2  00DD               	movwf	main@tempFanOutput^(0+128)
  6691  02C3  3000               	movlw	0
  6692  02C4  00DE               	movwf	(main@tempFanOutput^(0+128)+1)
  6693                           
  6694                           ;main.c: 63: extern int8_t VHoldMode[2];
  6695                           ;main.c: 64: extern int16_t Vref[2];
  6696                           ;main.c: 67: SYSTEM_Initialize();
  6697  02C5  3194  24B4  3182   	fcall	_SYSTEM_Initialize
  6698                           
  6699                           ;main.c: 69: LCDClear();
  6700  02C8  3180  2004  3182   	fcall	_LCDClear
  6701  02CB                     l3162:	
  6702                           ;main.c: 71: void calculateCurrent0(void);
  6703                           ;main.c: 72: void calculateCurrent1(void);
  6704                           ;main.c: 73: void calculateCurrent2(void);
  6705                           ;main.c: 74: void calculateCurrent3(void);
  6706                           ;main.c: 88: while (1)
  6707                           
  6708                           
  6709                           ;main.c: 89: {
  6710                           ;main.c: 90: if(!(RB2))
  6711  02CB  0020               	movlb	0	; select bank0
  6712  02CC  190D               	btfsc	13,2	;volatile
  6713  02CD  2ADF               	goto	l3170
  6714                           
  6715                           ;main.c: 91: {
  6716                           ;main.c: 92: LATA5=0;
  6717  02CE  1296               	bcf	22,5	;volatile
  6718                           
  6719                           ;main.c: 93: _delay((unsigned long)((400)*(32000000/4000000.0)));
  6720  02CF  3005               	movlw	5
  6721  02D0  0020               	movlb	0	; select bank0
  6722  02D1  00D8               	movwf	??_main
  6723  02D2  3026               	movlw	38
  6724  02D3                     u3987:	
  6725  02D3  0B89               	decfsz	9,f
  6726  02D4  2AD3               	goto	u3987
  6727  02D5  0BD8               	decfsz	??_main,f
  6728  02D6  2AD3               	goto	u3987
  6729  02D7  0000               	nop
  6730                           
  6731                           ;main.c: 94: faultCount+=1;
  6732  02D8  3001               	movlw	1
  6733  02D9  0021               	movlb	1	; select bank1
  6734  02DA  07D9               	addwf	main@faultCount^(0+128),f
  6735  02DB  3000               	movlw	0
  6736  02DC  3DDA               	addwfc	(main@faultCount+1)^(0+128),f
  6737                           
  6738                           ;main.c: 95: LATA5=1;
  6739  02DD  0020               	movlb	0	; select bank0
  6740  02DE  1696               	bsf	22,5	;volatile
  6741  02DF                     l3170:	
  6742                           
  6743                           ;main.c: 96: }
  6744                           ;main.c: 97: for(j=0;j<4;j++) Ianalogs[j]=readIAnalog(j);
  6745  02DF  0021               	movlb	1	; select bank1
  6746  02E0  01EA               	clrf	main@j^(0+128)
  6747  02E1  3004               	movlw	4
  6748  02E2  026A               	subwf	main@j^(0+128),w
  6749  02E3  1803               	btfsc	3,0
  6750  02E4  2B03               	goto	l3182
  6751  02E5                     l3176:	
  6752  02E5  086A               	movf	main@j^(0+128),w
  6753  02E6  0020               	movlb	0	; select bank0
  6754  02E7  00D8               	movwf	??_main
  6755  02E8  01D9               	clrf	??_main+1
  6756  02E9  0858               	movf	??_main,w
  6757  02EA  00A6               	movwf	readIAnalog@channel
  6758  02EB  0859               	movf	??_main+1,w
  6759  02EC  00A7               	movwf	readIAnalog@channel+1
  6760  02ED  318D  2583  3182   	fcall	_readIAnalog
  6761  02F0  0021               	movlb	1	; select bank1
  6762  02F1  356A               	lslf	main@j^(0+128),w
  6763  02F2  3EA0               	addlw	(low (_Ianalogs| 0))& (0+255)
  6764  02F3  0086               	movwf	6
  6765  02F4  0187               	clrf	7
  6766  02F5  0020               	movlb	0	; select bank0
  6767  02F6  0826               	movf	?_readIAnalog,w
  6768  02F7  3FC0               	movwi [0]fsr1
  6769  02F8  0827               	movf	?_readIAnalog+1,w
  6770  02F9  3FC1               	movwi [1]fsr1
  6771  02FA  3001               	movlw	1
  6772  02FB  00D8               	movwf	??_main
  6773  02FC  0858               	movf	??_main,w
  6774  02FD  0021               	movlb	1	; select bank1
  6775  02FE  07EA               	addwf	main@j^(0+128),f
  6776  02FF  3004               	movlw	4
  6777  0300  026A               	subwf	main@j^(0+128),w
  6778  0301  1C03               	skipc
  6779  0302  2AE5               	goto	l3176
  6780  0303                     l3182:	
  6781                           
  6782                           ;main.c: 99: Vanalogs[0]=ADCRead(21);
  6783  0303  3015               	movlw	21
  6784  0304  3193  2303  3182   	fcall	_ADCRead
  6785  0307  0871               	movf	?_ADCRead+1,w
  6786  0308  0021               	movlb	1	; select bank1
  6787  0309  00A9               	movwf	(_Vanalogs+1)^(0+128)
  6788  030A  0870               	movf	?_ADCRead,w
  6789  030B  00A8               	movwf	_Vanalogs^(0+128)
  6790                           
  6791                           ;main.c: 101: Vanalogs[1]=ADCRead(17);
  6792  030C  3011               	movlw	17
  6793  030D  3193  2303  3182   	fcall	_ADCRead
  6794  0310  0871               	movf	?_ADCRead+1,w
  6795  0311  0021               	movlb	1	; select bank1
  6796  0312  00AB               	movwf	((_Vanalogs+1)^(0+128)+2)
  6797  0313  0870               	movf	?_ADCRead,w
  6798  0314  00AA               	movwf	(_Vanalogs^(0+128)+2)
  6799                           
  6800                           ;main.c: 103: Vanalogs[2]=ADCRead(23);
  6801  0315  3017               	movlw	23
  6802  0316  3193  2303  3182   	fcall	_ADCRead
  6803  0319  0871               	movf	?_ADCRead+1,w
  6804  031A  0021               	movlb	1	; select bank1
  6805  031B  00AD               	movwf	((_Vanalogs+1)^(0+128)+4)
  6806  031C  0870               	movf	?_ADCRead,w
  6807  031D  00AC               	movwf	(_Vanalogs^(0+128)+4)
  6808                           
  6809                           ;main.c: 105: Vanalogs[3]=ADCRead(19);
  6810  031E  3013               	movlw	19
  6811  031F  3193  2303  3182   	fcall	_ADCRead
  6812  0322  0871               	movf	?_ADCRead+1,w
  6813  0323  0021               	movlb	1	; select bank1
  6814  0324  00AF               	movwf	((_Vanalogs+1)^(0+128)+6)
  6815  0325  0870               	movf	?_ADCRead,w
  6816  0326  00AE               	movwf	(_Vanalogs^(0+128)+6)
  6817                           
  6818                           ;main.c: 107: if(!(RB2))faultNotReset+=1;
  6819  0327  0020               	movlb	0	; select bank0
  6820  0328  190D               	btfsc	13,2	;volatile
  6821  0329  2B2F               	goto	l3188
  6822  032A  3001               	movlw	1
  6823  032B  0021               	movlb	1	; select bank1
  6824  032C  07DB               	addwf	main@faultNotReset^(0+128),f
  6825  032D  3000               	movlw	0
  6826  032E  3DDC               	addwfc	(main@faultNotReset+1)^(0+128),f
  6827  032F                     l3188:	
  6828                           
  6829                           ;main.c: 109: voltage[0]=(int16_t)(Vanalogs[0]/.54503);
  6830  032F  0021               	movlb	1	; select bank1
  6831  0330  0829               	movf	(_Vanalogs+1)^(0+128),w
  6832  0331  00F9               	movwf	___awtoft@c+1
  6833  0332  0828               	movf	_Vanalogs^(0+128),w
  6834  0333  00F8               	movwf	___awtoft@c
  6835  0334  3193  23D1  3182   	fcall	___awtoft
  6836  0337  0878               	movf	?___awtoft,w
  6837  0338  0020               	movlb	0	; select bank0
  6838  0339  00A3               	movwf	___ftdiv@f1
  6839  033A  0879               	movf	?___awtoft+1,w
  6840  033B  00A4               	movwf	___ftdiv@f1+1
  6841  033C  087A               	movf	?___awtoft+2,w
  6842  033D  00A5               	movwf	___ftdiv@f1+2
  6843  033E  3087               	movlw	135
  6844  033F  00A0               	movwf	___ftdiv@f2
  6845  0340  300B               	movlw	11
  6846  0341  00A1               	movwf	___ftdiv@f2+1
  6847  0342  303F               	movlw	63
  6848  0343  00A2               	movwf	___ftdiv@f2+2
  6849  0344  3189  21D6  3182   	fcall	___ftdiv
  6850  0347  0020               	movlb	0	; select bank0
  6851  0348  0820               	movf	?___ftdiv,w
  6852  0349  00B0               	movwf	___fttol@f1
  6853  034A  0821               	movf	?___ftdiv+1,w
  6854  034B  00B1               	movwf	___fttol@f1+1
  6855  034C  0822               	movf	?___ftdiv+2,w
  6856  034D  00B2               	movwf	___fttol@f1+2
  6857  034E  3189  214F  3182   	fcall	___fttol
  6858  0351  0020               	movlb	0	; select bank0
  6859  0352  0831               	movf	?___fttol+1,w
  6860  0353  0021               	movlb	1	; select bank1
  6861  0354  00B1               	movwf	(_voltage+1)^(0+128)
  6862  0355  0020               	movlb	0	; select bank0
  6863  0356  0830               	movf	?___fttol,w
  6864  0357  0021               	movlb	1	; select bank1
  6865  0358  00B0               	movwf	_voltage^(0+128)
  6866                           
  6867                           ;main.c: 111: voltage[1]=(int16_t)(Vanalogs[1]/.54503);
  6868  0359  082B               	movf	((_Vanalogs+1)^(0+128)+2),w
  6869  035A  00F9               	movwf	___awtoft@c+1
  6870  035B  082A               	movf	(_Vanalogs^(0+128)+2),w
  6871  035C  00F8               	movwf	___awtoft@c
  6872  035D  3193  23D1  3182   	fcall	___awtoft
  6873  0360  0878               	movf	?___awtoft,w
  6874  0361  0020               	movlb	0	; select bank0
  6875  0362  00A3               	movwf	___ftdiv@f1
  6876  0363  0879               	movf	?___awtoft+1,w
  6877  0364  00A4               	movwf	___ftdiv@f1+1
  6878  0365  087A               	movf	?___awtoft+2,w
  6879  0366  00A5               	movwf	___ftdiv@f1+2
  6880  0367  3087               	movlw	135
  6881  0368  00A0               	movwf	___ftdiv@f2
  6882  0369  300B               	movlw	11
  6883  036A  00A1               	movwf	___ftdiv@f2+1
  6884  036B  303F               	movlw	63
  6885  036C  00A2               	movwf	___ftdiv@f2+2
  6886  036D  3189  21D6  3182   	fcall	___ftdiv
  6887  0370  0020               	movlb	0	; select bank0
  6888  0371  0820               	movf	?___ftdiv,w
  6889  0372  00B0               	movwf	___fttol@f1
  6890  0373  0821               	movf	?___ftdiv+1,w
  6891  0374  00B1               	movwf	___fttol@f1+1
  6892  0375  0822               	movf	?___ftdiv+2,w
  6893  0376  00B2               	movwf	___fttol@f1+2
  6894  0377  3189  214F  3182   	fcall	___fttol
  6895  037A  0020               	movlb	0	; select bank0
  6896  037B  0831               	movf	?___fttol+1,w
  6897  037C  0021               	movlb	1	; select bank1
  6898  037D  00B3               	movwf	((_voltage+1)^(0+128)+2)
  6899  037E  0020               	movlb	0	; select bank0
  6900  037F  0830               	movf	?___fttol,w
  6901  0380  0021               	movlb	1	; select bank1
  6902  0381  00B2               	movwf	(_voltage^(0+128)+2)
  6903                           
  6904                           ;main.c: 113: voltage[2]=(int16_t)(Vanalogs[2]/.20885);
  6905  0382  082D               	movf	((_Vanalogs+1)^(0+128)+4),w
  6906  0383  00F9               	movwf	___awtoft@c+1
  6907  0384  082C               	movf	(_Vanalogs^(0+128)+4),w
  6908  0385  00F8               	movwf	___awtoft@c
  6909  0386  3193  23D1  3182   	fcall	___awtoft
  6910  0389  0878               	movf	?___awtoft,w
  6911  038A  0020               	movlb	0	; select bank0
  6912  038B  00A3               	movwf	___ftdiv@f1
  6913  038C  0879               	movf	?___awtoft+1,w
  6914  038D  00A4               	movwf	___ftdiv@f1+1
  6915  038E  087A               	movf	?___awtoft+2,w
  6916  038F  00A5               	movwf	___ftdiv@f1+2
  6917  0390  30DD               	movlw	221
  6918  0391  00A0               	movwf	___ftdiv@f2
  6919  0392  3055               	movlw	85
  6920  0393  00A1               	movwf	___ftdiv@f2+1
  6921  0394  303E               	movlw	62
  6922  0395  00A2               	movwf	___ftdiv@f2+2
  6923  0396  3189  21D6  3182   	fcall	___ftdiv
  6924  0399  0020               	movlb	0	; select bank0
  6925  039A  0820               	movf	?___ftdiv,w
  6926  039B  00B0               	movwf	___fttol@f1
  6927  039C  0821               	movf	?___ftdiv+1,w
  6928  039D  00B1               	movwf	___fttol@f1+1
  6929  039E  0822               	movf	?___ftdiv+2,w
  6930  039F  00B2               	movwf	___fttol@f1+2
  6931  03A0  3189  214F  3182   	fcall	___fttol
  6932  03A3  0020               	movlb	0	; select bank0
  6933  03A4  0831               	movf	?___fttol+1,w
  6934  03A5  0021               	movlb	1	; select bank1
  6935  03A6  00B5               	movwf	((_voltage+1)^(0+128)+4)
  6936  03A7  0020               	movlb	0	; select bank0
  6937  03A8  0830               	movf	?___fttol,w
  6938  03A9  0021               	movlb	1	; select bank1
  6939  03AA  00B4               	movwf	(_voltage^(0+128)+4)
  6940                           
  6941                           ;main.c: 115: voltage[3]=(int16_t)(Vanalogs[3]/.20885);
  6942  03AB  082F               	movf	((_Vanalogs+1)^(0+128)+6),w
  6943  03AC  00F9               	movwf	___awtoft@c+1
  6944  03AD  082E               	movf	(_Vanalogs^(0+128)+6),w
  6945  03AE  00F8               	movwf	___awtoft@c
  6946  03AF  3193  23D1  3182   	fcall	___awtoft
  6947  03B2  0878               	movf	?___awtoft,w
  6948  03B3  0020               	movlb	0	; select bank0
  6949  03B4  00A3               	movwf	___ftdiv@f1
  6950  03B5  0879               	movf	?___awtoft+1,w
  6951  03B6  00A4               	movwf	___ftdiv@f1+1
  6952  03B7  087A               	movf	?___awtoft+2,w
  6953  03B8  00A5               	movwf	___ftdiv@f1+2
  6954  03B9  30DD               	movlw	221
  6955  03BA  00A0               	movwf	___ftdiv@f2
  6956  03BB  3055               	movlw	85
  6957  03BC  00A1               	movwf	___ftdiv@f2+1
  6958  03BD  303E               	movlw	62
  6959  03BE  00A2               	movwf	___ftdiv@f2+2
  6960  03BF  3189  21D6  3182   	fcall	___ftdiv
  6961  03C2  0020               	movlb	0	; select bank0
  6962  03C3  0820               	movf	?___ftdiv,w
  6963  03C4  00B0               	movwf	___fttol@f1
  6964  03C5  0821               	movf	?___ftdiv+1,w
  6965  03C6  00B1               	movwf	___fttol@f1+1
  6966  03C7  0822               	movf	?___ftdiv+2,w
  6967  03C8  00B2               	movwf	___fttol@f1+2
  6968  03C9  3189  214F  3182   	fcall	___fttol
  6969  03CC  0020               	movlb	0	; select bank0
  6970  03CD  0831               	movf	?___fttol+1,w
  6971  03CE  0021               	movlb	1	; select bank1
  6972  03CF  00B7               	movwf	((_voltage+1)^(0+128)+6)
  6973  03D0  0020               	movlb	0	; select bank0
  6974  03D1  0830               	movf	?___fttol,w
  6975  03D2  0021               	movlb	1	; select bank1
  6976  03D3  00B6               	movwf	(_voltage^(0+128)+6)
  6977                           
  6978                           ;main.c: 117: calculateCurrent0();
  6979  03D4  3195  2565  3182   	fcall	_calculateCurrent0
  6980                           
  6981                           ;main.c: 119: calculateCurrent1();
  6982  03D7  3195  25AA  3182   	fcall	_calculateCurrent1
  6983                           
  6984                           ;main.c: 121: calculateCurrent2();
  6985  03DA  3195  25EF  3182   	fcall	_calculateCurrent2
  6986                           
  6987                           ;main.c: 123: calculateCurrent3();
  6988  03DD  3188  2006  3182   	fcall	_calculateCurrent3
  6989                           
  6990                           ;main.c: 125: if(Imode[0])
  6991  03E0  0020               	movlb	0	; select bank0
  6992  03E1  0863               	movf	_Imode,w
  6993  03E2  1903               	btfsc	3,2
  6994  03E3  2C05               	goto	l3218
  6995                           
  6996                           ;main.c: 126: {
  6997                           ;main.c: 127: if(voltage[2]<MPPT0)
  6998  03E4  0021               	movlb	1	; select bank1
  6999  03E5  0835               	movf	((_voltage+1)^(0+128)+4),w
  7000  03E6  3A80               	xorlw	128
  7001  03E7  0020               	movlb	0	; select bank0
  7002  03E8  00D8               	movwf	??_main
  7003  03E9  0021               	movlb	1	; select bank1
  7004  03EA  0868               	movf	(main@MPPT0+1)^(0+128),w
  7005  03EB  3A80               	xorlw	128
  7006  03EC  0020               	movlb	0	; select bank0
  7007  03ED  0258               	subwf	??_main,w
  7008  03EE  1D03               	skipz
  7009  03EF  2BF3               	goto	u3725
  7010  03F0  0021               	movlb	1	; select bank1
  7011  03F1  0867               	movf	main@MPPT0^(0+128),w
  7012  03F2  0234               	subwf	(_voltage^(0+128)+4),w
  7013  03F3                     u3725:	
  7014  03F3  1C03               	btfss	3,0
  7015  03F4  2C16               	goto	L1
  7016                           
  7017                           ;main.c: 134: else if(voltage[2]>MPPT0)
  7018                           
  7019                           ;main.c: 132: }
  7020                           ;main.c: 133: }
  7021                           
  7022                           ;main.c: 130: {
  7023                           ;main.c: 131: dutyCycle6+=1;
  7024                           
  7025                           ;main.c: 128: {
  7026                           ;main.c: 129: if(dutyCycle6<1023)
  7027  03F5  0021               	movlb	1	; select bank1
  7028  03F6  0868               	movf	(main@MPPT0+1)^(0+128),w
  7029  03F7  3A80               	xorlw	128
  7030  03F8  0020               	movlb	0	; select bank0
  7031  03F9  00D8               	movwf	??_main
  7032  03FA  0021               	movlb	1	; select bank1
  7033  03FB  0835               	movf	((_voltage+1)^(0+128)+4),w
  7034  03FC  3A80               	xorlw	128
  7035  03FD  0020               	movlb	0	; select bank0
  7036  03FE  0258               	subwf	??_main,w
  7037  03FF  1D03               	skipz
  7038  0400  2C30               	goto	u3785
  7039  0401  0021               	movlb	1	; select bank1
  7040  0402  0834               	movf	(_voltage^(0+128)+4),w
  7041  0403  0267               	subwf	main@MPPT0^(0+128),w
  7042  0404  2C30               	goto	u3785
  7043  0405                     l3218:	
  7044                           ;main.c: 142: }
  7045                           
  7046                           ;main.c: 139: }
  7047                           ;main.c: 140: }
  7048                           
  7049                           ;main.c: 137: {
  7050                           ;main.c: 138: dutyCycle6-=1;
  7051                           
  7052                           ;main.c: 135: {
  7053                           ;main.c: 136: if(dutyCycle6>0)
  7054                           
  7055                           
  7056                           ;main.c: 143: else
  7057                           ;main.c: 144: {
  7058                           ;main.c: 145: if(voltage[0]>(int16_t)Vref[0])
  7059  0405  0020               	movlb	0	; select bank0
  7060  0406  085C               	movf	_Vref+1,w
  7061  0407  3A80               	xorlw	128
  7062  0408  00D8               	movwf	??_main
  7063  0409  0021               	movlb	1	; select bank1
  7064  040A  0831               	movf	(_voltage+1)^(0+128),w
  7065  040B  3A80               	xorlw	128
  7066  040C  0020               	movlb	0	; select bank0
  7067  040D  0258               	subwf	??_main,w
  7068  040E  1D03               	skipz
  7069  040F  2C14               	goto	u3765
  7070  0410  0021               	movlb	1	; select bank1
  7071  0411  0830               	movf	_voltage^(0+128),w
  7072  0412  0020               	movlb	0	; select bank0
  7073  0413  025B               	subwf	_Vref,w
  7074  0414                     u3765:	
  7075  0414  1803               	skipnc
  7076  0415  2C23               	goto	l3224
  7077  0416                     L1:	
  7078                           
  7079                           ;main.c: 146: {
  7080                           ;main.c: 147: if(dutyCycle6<1023) dutyCycle6+=1;
  7081  0416  3003               	movlw	3
  7082  0417  0021               	movlb	1	; select bank1
  7083  0418  026C               	subwf	(main@dutyCycle6+1)^(0+128),w
  7084  0419  30FF               	movlw	255
  7085  041A  1903               	skipnz
  7086  041B  026B               	subwf	main@dutyCycle6^(0+128),w
  7087  041C  1803               	skipnc
  7088  041D  2C3B               	goto	l3230
  7089  041E  3001               	movlw	1
  7090  041F  07EB               	addwf	main@dutyCycle6^(0+128),f
  7091  0420  3000               	movlw	0
  7092  0421  3DEC               	addwfc	(main@dutyCycle6+1)^(0+128),f
  7093                           
  7094                           ;main.c: 148: }
  7095  0422  2C3B               	goto	l3230
  7096  0423                     l3224:	
  7097                           
  7098                           ;main.c: 149: else if(voltage[0]<(int16_t)Vref[0])
  7099  0423  0021               	movlb	1	; select bank1
  7100  0424  0831               	movf	(_voltage+1)^(0+128),w
  7101  0425  3A80               	xorlw	128
  7102  0426  0020               	movlb	0	; select bank0
  7103  0427  00D8               	movwf	??_main
  7104  0428  085C               	movf	_Vref+1,w
  7105  0429  3A80               	xorlw	128
  7106  042A  0258               	subwf	??_main,w
  7107  042B  1D03               	skipz
  7108  042C  2C30               	goto	u3785
  7109  042D  085B               	movf	_Vref,w
  7110  042E  0021               	movlb	1	; select bank1
  7111  042F  0230               	subwf	_voltage^(0+128),w
  7112  0430                     u3785:	
  7113  0430  1803               	skipnc
  7114  0431  2C3B               	goto	l3230
  7115                           
  7116                           ;main.c: 150: {
  7117                           ;main.c: 151: if(dutyCycle6>0) dutyCycle6-=1;;
  7118  0432  0021               	movlb	1	; select bank1
  7119  0433  086B               	movf	main@dutyCycle6^(0+128),w
  7120  0434  046C               	iorwf	(main@dutyCycle6+1)^(0+128),w
  7121  0435  1903               	btfsc	3,2
  7122  0436  2C3B               	goto	l3230
  7123  0437  3001               	movlw	1
  7124  0438  02EB               	subwf	main@dutyCycle6^(0+128),f
  7125  0439  3000               	movlw	0
  7126  043A  3BEC               	subwfb	(main@dutyCycle6+1)^(0+128),f
  7127  043B                     l3230:	
  7128                           ;main.c: 152: }
  7129                           
  7130                           
  7131                           ;main.c: 154: }
  7132                           ;main.c: 156: if(Imode[1])
  7133  043B  0020               	movlb	0	; select bank0
  7134  043C  0864               	movf	_Imode+1,w
  7135  043D  1903               	btfsc	3,2
  7136  043E  2C51               	goto	l3242
  7137                           
  7138                           ;main.c: 157: {
  7139                           ;main.c: 158: if(voltage[3]<MPPT1)
  7140  043F  0021               	movlb	1	; select bank1
  7141  0440  0837               	movf	((_voltage+1)^(0+128)+6),w
  7142  0441  3A80               	xorlw	128
  7143  0442  0020               	movlb	0	; select bank0
  7144  0443  00D8               	movwf	??_main
  7145  0444  0021               	movlb	1	; select bank1
  7146  0445  0864               	movf	(main@MPPT1+1)^(0+128),w
  7147  0446  3A80               	xorlw	128
  7148  0447  0020               	movlb	0	; select bank0
  7149  0448  0258               	subwf	??_main,w
  7150  0449  1D03               	skipz
  7151  044A  2C4E               	goto	u3815
  7152  044B  0021               	movlb	1	; select bank1
  7153  044C  0863               	movf	main@MPPT1^(0+128),w
  7154  044D  0236               	subwf	(_voltage^(0+128)+6),w
  7155  044E                     u3815:	
  7156  044E  1C03               	btfss	3,0
  7157  044F  2C62               	goto	L2
  7158                           
  7159                           ;main.c: 163: }
  7160                           ;main.c: 164: }
  7161                           
  7162                           ;main.c: 161: {
  7163                           ;main.c: 162: dutyCycle7+=1;
  7164                           
  7165                           ;main.c: 159: {
  7166                           ;main.c: 160: if(dutyCycle7<1023)
  7167  0450  2C7E               	goto	L3
  7168  0451                     l3242:	
  7169                           ;main.c: 168: }
  7170                           ;main.c: 169: }
  7171                           
  7172                           ;main.c: 166: {
  7173                           ;main.c: 167: dutyCycle7-=1;
  7174                           
  7175                           ;main.c: 165: else if(dutyCycle7>0)
  7176                           
  7177                           
  7178                           ;main.c: 170: else
  7179                           ;main.c: 171: {
  7180                           ;main.c: 172: if(voltage[1]>(int16_t)Vref[1])
  7181  0451  0020               	movlb	0	; select bank0
  7182  0452  085E               	movf	_Vref+3,w
  7183  0453  3A80               	xorlw	128
  7184  0454  00D8               	movwf	??_main
  7185  0455  0021               	movlb	1	; select bank1
  7186  0456  0833               	movf	((_voltage+1)^(0+128)+2),w
  7187  0457  3A80               	xorlw	128
  7188  0458  0020               	movlb	0	; select bank0
  7189  0459  0258               	subwf	??_main,w
  7190  045A  1D03               	skipz
  7191  045B  2C60               	goto	u3845
  7192  045C  0021               	movlb	1	; select bank1
  7193  045D  0832               	movf	(_voltage^(0+128)+2),w
  7194  045E  0020               	movlb	0	; select bank0
  7195  045F  025D               	subwf	_Vref+2,w
  7196  0460                     u3845:	
  7197  0460  1803               	skipnc
  7198  0461  2C6F               	goto	l3248
  7199  0462                     L2:	
  7200                           
  7201                           ;main.c: 173: {
  7202                           ;main.c: 174: if(dutyCycle7<1023) dutyCycle7+=1;
  7203  0462  3003               	movlw	3
  7204  0463  0021               	movlb	1	; select bank1
  7205  0464  026E               	subwf	(main@dutyCycle7+1)^(0+128),w
  7206  0465  30FF               	movlw	255
  7207  0466  1903               	skipnz
  7208  0467  026D               	subwf	main@dutyCycle7^(0+128),w
  7209  0468  1803               	skipnc
  7210  0469  2C87               	goto	l3254
  7211  046A  3001               	movlw	1
  7212  046B  07ED               	addwf	main@dutyCycle7^(0+128),f
  7213  046C  3000               	movlw	0
  7214  046D  3DEE               	addwfc	(main@dutyCycle7+1)^(0+128),f
  7215                           
  7216                           ;main.c: 175: }
  7217  046E  2C87               	goto	l3254
  7218  046F                     l3248:	
  7219                           
  7220                           ;main.c: 176: else if(voltage[1]<(int16_t)Vref[1])
  7221  046F  0021               	movlb	1	; select bank1
  7222  0470  0833               	movf	((_voltage+1)^(0+128)+2),w
  7223  0471  3A80               	xorlw	128
  7224  0472  0020               	movlb	0	; select bank0
  7225  0473  00D8               	movwf	??_main
  7226  0474  085E               	movf	_Vref+3,w
  7227  0475  3A80               	xorlw	128
  7228  0476  0258               	subwf	??_main,w
  7229  0477  1D03               	skipz
  7230  0478  2C7C               	goto	u3865
  7231  0479  085D               	movf	_Vref+2,w
  7232  047A  0021               	movlb	1	; select bank1
  7233  047B  0232               	subwf	(_voltage^(0+128)+2),w
  7234  047C                     u3865:	
  7235  047C  1803               	skipnc
  7236  047D  2C87               	goto	l3254
  7237  047E                     L3:	
  7238                           
  7239                           ;main.c: 177: {
  7240                           ;main.c: 178: if(dutyCycle7>0) dutyCycle7-=1;;
  7241  047E  0021               	movlb	1	; select bank1
  7242  047F  086D               	movf	main@dutyCycle7^(0+128),w
  7243  0480  046E               	iorwf	(main@dutyCycle7+1)^(0+128),w
  7244  0481  1903               	btfsc	3,2
  7245  0482  2C87               	goto	l3254
  7246  0483  3001               	movlw	1
  7247  0484  02ED               	subwf	main@dutyCycle7^(0+128),f
  7248  0485  3000               	movlw	0
  7249  0486  3BEE               	subwfb	(main@dutyCycle7+1)^(0+128),f
  7250  0487                     l3254:	
  7251                           ;main.c: 179: }
  7252                           
  7253                           
  7254                           ;main.c: 181: }
  7255                           ;main.c: 183: slowLoop+=1;
  7256  0487  3001               	movlw	1
  7257  0488  0020               	movlb	0	; select bank0
  7258  0489  00D8               	movwf	??_main
  7259  048A  0858               	movf	??_main,w
  7260  048B  0021               	movlb	1	; select bank1
  7261  048C  07E0               	addwf	main@slowLoop^(0+128),f
  7262                           
  7263                           ;main.c: 185: dutyCycle1=600;
  7264  048D  3058               	movlw	88
  7265  048E  00E5               	movwf	main@dutyCycle1^(0+128)
  7266  048F  3002               	movlw	2
  7267  0490  00E6               	movwf	(main@dutyCycle1^(0+128)+1)
  7268                           
  7269                           ;main.c: 188: PWM1_LoadDutyValue(dutyCycle1);
  7270  0491  0866               	movf	(main@dutyCycle1+1)^(0+128),w
  7271  0492  00F1               	movwf	PWM1_LoadDutyValue@dutyCycle1+1
  7272  0493  0865               	movf	main@dutyCycle1^(0+128),w
  7273  0494  00F0               	movwf	PWM1_LoadDutyValue@dutyCycle1
  7274  0495  3193  2318  3182   	fcall	_PWM1_LoadDutyValue
  7275                           
  7276                           ;main.c: 189: PWM6_LoadDutyValue(dutyCycle6);
  7277  0498  0021               	movlb	1	; select bank1
  7278  0499  086C               	movf	(main@dutyCycle6+1)^(0+128),w
  7279  049A  00F1               	movwf	PWM6_LoadDutyValue@dutyCycle6+1
  7280  049B  086B               	movf	main@dutyCycle6^(0+128),w
  7281  049C  00F0               	movwf	PWM6_LoadDutyValue@dutyCycle6
  7282  049D  3193  232E  3182   	fcall	_PWM6_LoadDutyValue
  7283                           
  7284                           ;main.c: 190: PWM7_LoadDutyValue(dutyCycle7);
  7285  04A0  0021               	movlb	1	; select bank1
  7286  04A1  086E               	movf	(main@dutyCycle7+1)^(0+128),w
  7287  04A2  00F1               	movwf	PWM7_LoadDutyValue@dutyCycle7+1
  7288  04A3  086D               	movf	main@dutyCycle7^(0+128),w
  7289  04A4  00F0               	movwf	PWM7_LoadDutyValue@dutyCycle7
  7290  04A5  3193  2344  3182   	fcall	_PWM7_LoadDutyValue
  7291                           
  7292                           ;main.c: 192: menuButton = readButton();
  7293  04A8  3188  204B  3182   	fcall	_readButton
  7294  04AB  0020               	movlb	0	; select bank0
  7295  04AC  00D8               	movwf	??_main
  7296  04AD  0858               	movf	??_main,w
  7297  04AE  0021               	movlb	1	; select bank1
  7298  04AF  00E9               	movwf	main@menuButton^(0+128)
  7299                           
  7300                           ;main.c: 193: if(menuButton == 2) if(MPPT0>2700)MPPT1-=1;
  7301  04B0  3002               	movlw	2
  7302  04B1  0669               	xorwf	main@menuButton^(0+128),w
  7303  04B2  1D03               	btfss	3,2
  7304  04B3  2CC6               	goto	l3272
  7305  04B4  0868               	movf	(main@MPPT0+1)^(0+128),w
  7306  04B5  3A80               	xorlw	128
  7307  04B6  0020               	movlb	0	; select bank0
  7308  04B7  00D8               	movwf	??_main
  7309  04B8  308A               	movlw	138
  7310  04B9  0258               	subwf	??_main,w
  7311  04BA  1D03               	skipz
  7312  04BB  2CBF               	goto	u3895
  7313  04BC  308D               	movlw	141
  7314  04BD  0021               	movlb	1	; select bank1
  7315  04BE  0267               	subwf	main@MPPT0^(0+128),w
  7316  04BF                     u3895:	
  7317  04BF  1C03               	skipc
  7318  04C0  2CC6               	goto	l3272
  7319  04C1  30FF               	movlw	255
  7320  04C2  0021               	movlb	1	; select bank1
  7321  04C3  07E3               	addwf	main@MPPT1^(0+128),f
  7322  04C4  30FF               	movlw	255
  7323  04C5  3DE4               	addwfc	(main@MPPT1+1)^(0+128),f
  7324  04C6                     l3272:	
  7325                           
  7326                           ;main.c: 194: if(menuButton == 3)if(MPPT1<3200)MPPT1+=1;
  7327  04C6  3003               	movlw	3
  7328  04C7  0021               	movlb	1	; select bank1
  7329  04C8  0669               	xorwf	main@menuButton^(0+128),w
  7330  04C9  1D03               	btfss	3,2
  7331  04CA  2CDD               	goto	l3278
  7332  04CB  0864               	movf	(main@MPPT1+1)^(0+128),w
  7333  04CC  3A80               	xorlw	128
  7334  04CD  0020               	movlb	0	; select bank0
  7335  04CE  00D8               	movwf	??_main
  7336  04CF  308C               	movlw	140
  7337  04D0  0258               	subwf	??_main,w
  7338  04D1  1D03               	skipz
  7339  04D2  2CD6               	goto	u3915
  7340  04D3  3080               	movlw	128
  7341  04D4  0021               	movlb	1	; select bank1
  7342  04D5  0263               	subwf	main@MPPT1^(0+128),w
  7343  04D6                     u3915:	
  7344  04D6  1803               	skipnc
  7345  04D7  2CDD               	goto	l3278
  7346  04D8  3001               	movlw	1
  7347  04D9  0021               	movlb	1	; select bank1
  7348  04DA  07E3               	addwf	main@MPPT1^(0+128),f
  7349  04DB  3000               	movlw	0
  7350  04DC  3DE4               	addwfc	(main@MPPT1+1)^(0+128),f
  7351  04DD                     l3278:	
  7352                           
  7353                           ;main.c: 195: if(menuButton == 1)LCDInit();
  7354  04DD  0021               	movlb	1	; select bank1
  7355  04DE  0369               	decf	main@menuButton^(0+128),w
  7356  04DF  1D03               	btfss	3,2
  7357  04E0  2CE4               	goto	l3282
  7358  04E1  3194  2479  3182   	fcall	_LCDInit
  7359  04E4                     l3282:	
  7360                           
  7361                           ;main.c: 199: if(slowLoop>250)
  7362  04E4  30FB               	movlw	251
  7363  04E5  0021               	movlb	1	; select bank1
  7364  04E6  0260               	subwf	main@slowLoop^(0+128),w
  7365  04E7  1C03               	skipc
  7366  04E8  2ACB               	goto	l3162
  7367                           
  7368                           ;main.c: 200: {
  7369                           ;main.c: 202: IOutTotal=current[0]+current[1];
  7370  04E9  0838               	movf	_current^(0+128),w
  7371  04EA  073A               	addwf	(_current^(0+128)+2),w
  7372  04EB  00E1               	movwf	main@IOutTotal^(0+128)
  7373  04EC  0839               	movf	(_current+1)^(0+128),w
  7374  04ED  3D3B               	addwfc	((_current+1)^(0+128)+2),w
  7375  04EE  00E2               	movwf	(main@IOutTotal+1)^(0+128)
  7376                           
  7377                           ;main.c: 216: if(!(RB2))
  7378  04EF  0020               	movlb	0	; select bank0
  7379  04F0  190D               	btfsc	13,2	;volatile
  7380  04F1  2D00               	goto	l3290
  7381                           
  7382                           ;main.c: 217: {
  7383                           ;main.c: 218: dutyCycle1=550;
  7384  04F2  3026               	movlw	38
  7385  04F3  0021               	movlb	1	; select bank1
  7386  04F4  00E5               	movwf	main@dutyCycle1^(0+128)
  7387  04F5  3002               	movlw	2
  7388  04F6  00E6               	movwf	(main@dutyCycle1^(0+128)+1)
  7389                           
  7390                           ;main.c: 219: batteryState[0]=CHARGE;
  7391  04F7  3004               	movlw	4
  7392  04F8  0020               	movlb	0	; select bank0
  7393  04F9  00D8               	movwf	??_main
  7394  04FA  0858               	movf	??_main,w
  7395  04FB  00E5               	movwf	_batteryState
  7396                           
  7397                           ;main.c: 220: batteryState[1]=CHARGE;
  7398  04FC  3004               	movlw	4
  7399  04FD  00D8               	movwf	??_main
  7400  04FE  0858               	movf	??_main,w
  7401  04FF  00E6               	movwf	_batteryState+1
  7402  0500                     l3290:	
  7403                           
  7404                           ;main.c: 221: }
  7405                           ;main.c: 223: ADREF = 0x00;
  7406  0500  0021               	movlb	1	; select bank1
  7407  0501  019A               	clrf	26	;volatile
  7408                           
  7409                           ;main.c: 224: batteryTemp=tempCalc(ADCRead(9));
  7410  0502  3009               	movlw	9
  7411  0503  3193  2303  3182   	fcall	_ADCRead
  7412  0506  0871               	movf	?_ADCRead+1,w
  7413  0507  0020               	movlb	0	; select bank0
  7414  0508  00CE               	movwf	tempCalc@analogValue+1
  7415  0509  0870               	movf	?_ADCRead,w
  7416  050A  00CD               	movwf	tempCalc@analogValue
  7417  050B  318C  249C  3182   	fcall	_tempCalc
  7418  050E  0020               	movlb	0	; select bank0
  7419  050F  084E               	movf	?_tempCalc+1,w
  7420  0510  00EE               	movwf	_batteryTemp+1
  7421  0511  084D               	movf	?_tempCalc,w
  7422  0512  00ED               	movwf	_batteryTemp
  7423                           
  7424                           ;main.c: 225: ADREF = 0x03;
  7425  0513  3003               	movlw	3
  7426  0514  0021               	movlb	1	; select bank1
  7427  0515  009A               	movwf	26	;volatile
  7428                           
  7429                           ;main.c: 227: displayRefresh+=1;
  7430  0516  3001               	movlw	1
  7431  0517  0020               	movlb	0	; select bank0
  7432  0518  00D8               	movwf	??_main
  7433  0519  0858               	movf	??_main,w
  7434  051A  0021               	movlb	1	; select bank1
  7435  051B  07DF               	addwf	main@displayRefresh^(0+128),f
  7436                           
  7437                           ;main.c: 228: if(displayRefresh>80)
  7438  051C  3051               	movlw	81
  7439  051D  025F               	subwf	main@displayRefresh^(0+128),w
  7440  051E  1C03               	skipc
  7441  051F  2D25               	goto	l3304
  7442                           
  7443                           ;main.c: 229: {
  7444                           ;main.c: 230: LCDClear();
  7445  0520  3180  2004  3182   	fcall	_LCDClear
  7446                           
  7447                           ;main.c: 231: displayRefresh=0;
  7448  0523  0021               	movlb	1	; select bank1
  7449  0524  01DF               	clrf	main@displayRefresh^(0+128)
  7450  0525                     l3304:	
  7451                           
  7452                           ;main.c: 233: }
  7453                           ;main.c: 234: Battery_State_Machine(0);
  7454  0525  3000               	movlw	0
  7455  0526  3181  2120  3182   	fcall	_Battery_State_Machine
  7456                           
  7457                           ;main.c: 235: Battery_State_Machine(1);
  7458  0529  3001               	movlw	1
  7459  052A  3181  2120  3182   	fcall	_Battery_State_Machine
  7460                           
  7461                           ;main.c: 238: { gotoXY(0,0); LCDWriteString("In:");};
  7462  052D  01F5               	clrf	gotoXY@y
  7463  052E  3000               	movlw	0
  7464  052F  3192  22DC  3182   	fcall	_gotoXY
  7465  0532  3025               	movlw	low (STR_1| (0+32768))
  7466  0533  00FC               	movwf	LCDWriteString@characters
  7467  0534  3098               	movlw	high (STR_1| (0+32768))
  7468  0535  00FD               	movwf	LCDWriteString@characters+1
  7469  0536  3192  22EF  3182   	fcall	_LCDWriteString
  7470                           
  7471                           ;main.c: 239: { gotoXY(26,0); LCDWriteString("Out:");};
  7472  0539  01F5               	clrf	gotoXY@y
  7473  053A  301A               	movlw	26
  7474  053B  3192  22DC  3182   	fcall	_gotoXY
  7475  053E  3020               	movlw	low (STR_2| (0+32768))
  7476  053F  00FC               	movwf	LCDWriteString@characters
  7477  0540  3098               	movlw	high (STR_2| (0+32768))
  7478  0541  00FD               	movwf	LCDWriteString@characters+1
  7479  0542  3192  22EF  3182   	fcall	_LCDWriteString
  7480                           
  7481                           ;main.c: 240: { gotoXY(52,0); LCDWriteString("Ref:");};
  7482  0545  01F5               	clrf	gotoXY@y
  7483  0546  3034               	movlw	52
  7484  0547  3192  22DC  3182   	fcall	_gotoXY
  7485  054A  301B               	movlw	low (STR_3| (0+32768))
  7486  054B  00FC               	movwf	LCDWriteString@characters
  7487  054C  3098               	movlw	high (STR_3| (0+32768))
  7488  054D  00FD               	movwf	LCDWriteString@characters+1
  7489  054E  3192  22EF  3182   	fcall	_LCDWriteString
  7490                           
  7491                           ;main.c: 242: { gotoXY(0,1); LCDWriteInt(voltage[2],4, 2, 0);};
  7492  0551  01F5               	clrf	gotoXY@y
  7493  0552  0AF5               	incf	gotoXY@y,f
  7494  0553  3000               	movlw	0
  7495  0554  3192  22DC  3182   	fcall	_gotoXY
  7496  0557  0021               	movlb	1	; select bank1
  7497  0558  0835               	movf	((_voltage+1)^(0+128)+4),w
  7498  0559  0020               	movlb	0	; select bank0
  7499  055A  00A1               	movwf	LCDWriteInt@value+1
  7500  055B  0021               	movlb	1	; select bank1
  7501  055C  0834               	movf	(_voltage^(0+128)+4),w
  7502  055D  0020               	movlb	0	; select bank0
  7503  055E  00A0               	movwf	LCDWriteInt@value
  7504  055F  3004               	movlw	4
  7505  0560  00D8               	movwf	??_main
  7506  0561  0858               	movf	??_main,w
  7507  0562  00A2               	movwf	LCDWriteInt@fieldLength
  7508  0563  3002               	movlw	2
  7509  0564  00D9               	movwf	??_main+1
  7510  0565  0859               	movf	??_main+1,w
  7511  0566  00A3               	movwf	LCDWriteInt@numPlaces
  7512  0567  01A4               	clrf	LCDWriteInt@sign
  7513  0568  318B  23E3  3182   	fcall	_LCDWriteInt
  7514                           
  7515                           ;main.c: 243: LCDWriteCharacter('V');
  7516  056B  3056               	movlw	86
  7517  056C  3196  2685  3182   	fcall	_LCDWriteCharacter
  7518                           
  7519                           ;main.c: 245: { gotoXY(26,1); LCDWriteInt(voltage[0],4, 2, 0);};
  7520  056F  01F5               	clrf	gotoXY@y
  7521  0570  0AF5               	incf	gotoXY@y,f
  7522  0571  301A               	movlw	26
  7523  0572  3192  22DC  3182   	fcall	_gotoXY
  7524  0575  0021               	movlb	1	; select bank1
  7525  0576  0831               	movf	(_voltage+1)^(0+128),w
  7526  0577  0020               	movlb	0	; select bank0
  7527  0578  00A1               	movwf	LCDWriteInt@value+1
  7528  0579  0021               	movlb	1	; select bank1
  7529  057A  0830               	movf	_voltage^(0+128),w
  7530  057B  0020               	movlb	0	; select bank0
  7531  057C  00A0               	movwf	LCDWriteInt@value
  7532  057D  3004               	movlw	4
  7533  057E  00D8               	movwf	??_main
  7534  057F  0858               	movf	??_main,w
  7535  0580  00A2               	movwf	LCDWriteInt@fieldLength
  7536  0581  3002               	movlw	2
  7537  0582  00D9               	movwf	??_main+1
  7538  0583  0859               	movf	??_main+1,w
  7539  0584  00A3               	movwf	LCDWriteInt@numPlaces
  7540  0585  01A4               	clrf	LCDWriteInt@sign
  7541  0586  318B  23E3  3182   	fcall	_LCDWriteInt
  7542                           
  7543                           ;main.c: 246: LCDWriteCharacter('V');
  7544  0589  3056               	movlw	86
  7545  058A  3196  2685  3182   	fcall	_LCDWriteCharacter
  7546                           
  7547                           ;main.c: 248: { gotoXY(52,1); LCDWriteInt(Vref[0],4, 2, 0);};
  7548  058D  01F5               	clrf	gotoXY@y
  7549  058E  0AF5               	incf	gotoXY@y,f
  7550  058F  3034               	movlw	52
  7551  0590  3192  22DC  3182   	fcall	_gotoXY
  7552  0593  0020               	movlb	0	; select bank0
  7553  0594  085C               	movf	_Vref+1,w
  7554  0595  00A1               	movwf	LCDWriteInt@value+1
  7555  0596  085B               	movf	_Vref,w
  7556  0597  00A0               	movwf	LCDWriteInt@value
  7557  0598  3004               	movlw	4
  7558  0599  00D8               	movwf	??_main
  7559  059A  0858               	movf	??_main,w
  7560  059B  00A2               	movwf	LCDWriteInt@fieldLength
  7561  059C  3002               	movlw	2
  7562  059D  00D9               	movwf	??_main+1
  7563  059E  0859               	movf	??_main+1,w
  7564  059F  00A3               	movwf	LCDWriteInt@numPlaces
  7565  05A0  01A4               	clrf	LCDWriteInt@sign
  7566  05A1  318B  23E3  3182   	fcall	_LCDWriteInt
  7567                           
  7568                           ;main.c: 249: LCDWriteCharacter('V');
  7569  05A4  3056               	movlw	86
  7570  05A5  3196  2685  3182   	fcall	_LCDWriteCharacter
  7571                           
  7572                           ;main.c: 251: { gotoXY(80,1); LCDWriteInt(Imode[0],1, 0, 0);};
  7573  05A8  01F5               	clrf	gotoXY@y
  7574  05A9  0AF5               	incf	gotoXY@y,f
  7575  05AA  3050               	movlw	80
  7576  05AB  3192  22DC  3182   	fcall	_gotoXY
  7577  05AE  0020               	movlb	0	; select bank0
  7578  05AF  0863               	movf	_Imode,w
  7579  05B0  00A0               	movwf	LCDWriteInt@value
  7580  05B1  01A1               	clrf	LCDWriteInt@value+1
  7581  05B2  1BA0               	btfsc	LCDWriteInt@value,7
  7582  05B3  03A1               	decf	LCDWriteInt@value+1,f
  7583  05B4  01A2               	clrf	LCDWriteInt@fieldLength
  7584  05B5  0AA2               	incf	LCDWriteInt@fieldLength,f
  7585  05B6  01A3               	clrf	LCDWriteInt@numPlaces
  7586  05B7  01A4               	clrf	LCDWriteInt@sign
  7587  05B8  318B  23E3  3182   	fcall	_LCDWriteInt
  7588                           
  7589                           ;main.c: 253: { gotoXY(0,2); LCDWriteInt(current[2],3, 1, 0);};
  7590  05BB  3002               	movlw	2
  7591  05BC  0020               	movlb	0	; select bank0
  7592  05BD  00D8               	movwf	??_main
  7593  05BE  0858               	movf	??_main,w
  7594  05BF  00F5               	movwf	gotoXY@y
  7595  05C0  3000               	movlw	0
  7596  05C1  3192  22DC  3182   	fcall	_gotoXY
  7597  05C4  0021               	movlb	1	; select bank1
  7598  05C5  083D               	movf	((_current+1)^(0+128)+4),w
  7599  05C6  0020               	movlb	0	; select bank0
  7600  05C7  00A1               	movwf	LCDWriteInt@value+1
  7601  05C8  0021               	movlb	1	; select bank1
  7602  05C9  083C               	movf	(_current^(0+128)+4),w
  7603  05CA  0020               	movlb	0	; select bank0
  7604  05CB  00A0               	movwf	LCDWriteInt@value
  7605  05CC  3003               	movlw	3
  7606  05CD  00D8               	movwf	??_main
  7607  05CE  0858               	movf	??_main,w
  7608  05CF  00A2               	movwf	LCDWriteInt@fieldLength
  7609  05D0  01A3               	clrf	LCDWriteInt@numPlaces
  7610  05D1  0AA3               	incf	LCDWriteInt@numPlaces,f
  7611  05D2  01A4               	clrf	LCDWriteInt@sign
  7612  05D3  318B  23E3  3182   	fcall	_LCDWriteInt
  7613                           
  7614                           ;main.c: 254: LCDWriteCharacter('A');
  7615  05D6  3041               	movlw	65
  7616  05D7  3196  2685  3182   	fcall	_LCDWriteCharacter
  7617                           
  7618                           ;main.c: 256: { gotoXY(26,2); LCDWriteInt(current[0],3, 1, 0);};
  7619  05DA  3002               	movlw	2
  7620  05DB  0020               	movlb	0	; select bank0
  7621  05DC  00D8               	movwf	??_main
  7622  05DD  0858               	movf	??_main,w
  7623  05DE  00F5               	movwf	gotoXY@y
  7624  05DF  301A               	movlw	26
  7625  05E0  3192  22DC  3182   	fcall	_gotoXY
  7626  05E3  0021               	movlb	1	; select bank1
  7627  05E4  0839               	movf	(_current+1)^(0+128),w
  7628  05E5  0020               	movlb	0	; select bank0
  7629  05E6  00A1               	movwf	LCDWriteInt@value+1
  7630  05E7  0021               	movlb	1	; select bank1
  7631  05E8  0838               	movf	_current^(0+128),w
  7632  05E9  0020               	movlb	0	; select bank0
  7633  05EA  00A0               	movwf	LCDWriteInt@value
  7634  05EB  3003               	movlw	3
  7635  05EC  00D8               	movwf	??_main
  7636  05ED  0858               	movf	??_main,w
  7637  05EE  00A2               	movwf	LCDWriteInt@fieldLength
  7638  05EF  01A3               	clrf	LCDWriteInt@numPlaces
  7639  05F0  0AA3               	incf	LCDWriteInt@numPlaces,f
  7640  05F1  01A4               	clrf	LCDWriteInt@sign
  7641  05F2  318B  23E3  3182   	fcall	_LCDWriteInt
  7642                           
  7643                           ;main.c: 257: LCDWriteCharacter('A');
  7644  05F5  3041               	movlw	65
  7645  05F6  3196  2685  3182   	fcall	_LCDWriteCharacter
  7646                           
  7647                           ;main.c: 259: { gotoXY(52,2); LCDWriteInt(Iref[0],3, 1, 0);};
  7648  05F9  3002               	movlw	2
  7649  05FA  0020               	movlb	0	; select bank0
  7650  05FB  00D8               	movwf	??_main
  7651  05FC  0858               	movf	??_main,w
  7652  05FD  00F5               	movwf	gotoXY@y
  7653  05FE  3034               	movlw	52
  7654  05FF  3192  22DC  3182   	fcall	_gotoXY
  7655  0602  0021               	movlb	1	; select bank1
  7656  0603  0845               	movf	(_Iref+1)^(0+128),w
  7657  0604  0020               	movlb	0	; select bank0
  7658  0605  00A1               	movwf	LCDWriteInt@value+1
  7659  0606  0021               	movlb	1	; select bank1
  7660  0607  0844               	movf	_Iref^(0+128),w
  7661  0608  0020               	movlb	0	; select bank0
  7662  0609  00A0               	movwf	LCDWriteInt@value
  7663  060A  3003               	movlw	3
  7664  060B  00D8               	movwf	??_main
  7665  060C  0858               	movf	??_main,w
  7666  060D  00A2               	movwf	LCDWriteInt@fieldLength
  7667  060E  01A3               	clrf	LCDWriteInt@numPlaces
  7668  060F  0AA3               	incf	LCDWriteInt@numPlaces,f
  7669  0610  01A4               	clrf	LCDWriteInt@sign
  7670  0611  318B  23E3  3182   	fcall	_LCDWriteInt
  7671                           
  7672                           ;main.c: 260: LCDWriteCharacter('A');
  7673  0614  3041               	movlw	65
  7674  0615  3196  2685  3182   	fcall	_LCDWriteCharacter
  7675                           
  7676                           ;main.c: 262: { gotoXY(80,2); LCDWriteInt(batteryState[0],1, 0, 0);};
  7677  0618  3002               	movlw	2
  7678  0619  0020               	movlb	0	; select bank0
  7679  061A  00D8               	movwf	??_main
  7680  061B  0858               	movf	??_main,w
  7681  061C  00F5               	movwf	gotoXY@y
  7682  061D  3050               	movlw	80
  7683  061E  3192  22DC  3182   	fcall	_gotoXY
  7684  0621  0020               	movlb	0	; select bank0
  7685  0622  0865               	movf	_batteryState,w
  7686  0623  00D8               	movwf	??_main
  7687  0624  01D9               	clrf	??_main+1
  7688  0625  0858               	movf	??_main,w
  7689  0626  00A0               	movwf	LCDWriteInt@value
  7690  0627  0859               	movf	??_main+1,w
  7691  0628  00A1               	movwf	LCDWriteInt@value+1
  7692  0629  01A2               	clrf	LCDWriteInt@fieldLength
  7693  062A  0AA2               	incf	LCDWriteInt@fieldLength,f
  7694  062B  01A3               	clrf	LCDWriteInt@numPlaces
  7695  062C  01A4               	clrf	LCDWriteInt@sign
  7696  062D  318B  23E3  3182   	fcall	_LCDWriteInt
  7697                           
  7698                           ;main.c: 275: { gotoXY(0,3); LCDWriteInt(IOutTotal,4, 1, 0);};
  7699  0630  3003               	movlw	3
  7700  0631  0020               	movlb	0	; select bank0
  7701  0632  00D8               	movwf	??_main
  7702  0633  0858               	movf	??_main,w
  7703  0634  00F5               	movwf	gotoXY@y
  7704  0635  3000               	movlw	0
  7705  0636  3192  22DC  3182   	fcall	_gotoXY
  7706  0639  0021               	movlb	1	; select bank1
  7707  063A  0862               	movf	(main@IOutTotal+1)^(0+128),w
  7708  063B  0020               	movlb	0	; select bank0
  7709  063C  00A1               	movwf	LCDWriteInt@value+1
  7710  063D  0021               	movlb	1	; select bank1
  7711  063E  0861               	movf	main@IOutTotal^(0+128),w
  7712  063F  0020               	movlb	0	; select bank0
  7713  0640  00A0               	movwf	LCDWriteInt@value
  7714  0641  3004               	movlw	4
  7715  0642  00D8               	movwf	??_main
  7716  0643  0858               	movf	??_main,w
  7717  0644  00A2               	movwf	LCDWriteInt@fieldLength
  7718  0645  01A3               	clrf	LCDWriteInt@numPlaces
  7719  0646  0AA3               	incf	LCDWriteInt@numPlaces,f
  7720  0647  01A4               	clrf	LCDWriteInt@sign
  7721  0648  318B  23E3  3182   	fcall	_LCDWriteInt
  7722                           
  7723                           ;main.c: 276: { gotoXY(24,3); LCDWriteInt((uint16_t)IOutTotal*4+100,4, 0, 0);};
  7724  064B  3003               	movlw	3
  7725  064C  0020               	movlb	0	; select bank0
  7726  064D  00D8               	movwf	??_main
  7727  064E  0858               	movf	??_main,w
  7728  064F  00F5               	movwf	gotoXY@y
  7729  0650  3018               	movlw	24
  7730  0651  3192  22DC  3182   	fcall	_gotoXY
  7731  0654  0021               	movlb	1	; select bank1
  7732  0655  0862               	movf	(main@IOutTotal+1)^(0+128),w
  7733  0656  0020               	movlb	0	; select bank0
  7734  0657  00D9               	movwf	??_main+1
  7735  0658  0021               	movlb	1	; select bank1
  7736  0659  0861               	movf	main@IOutTotal^(0+128),w
  7737  065A  0020               	movlb	0	; select bank0
  7738  065B  00D8               	movwf	??_main
  7739  065C  35D8               	lslf	??_main,f
  7740  065D  0DD9               	rlf	??_main+1,f
  7741  065E  35D8               	lslf	??_main,f
  7742  065F  0DD9               	rlf	??_main+1,f
  7743  0660  0858               	movf	??_main,w
  7744  0661  3E64               	addlw	100
  7745  0662  00A0               	movwf	LCDWriteInt@value
  7746  0663  3000               	movlw	0
  7747  0664  3D59               	addwfc	??_main+1,w
  7748  0665  00A1               	movwf	LCDWriteInt@value+1
  7749  0666  3004               	movlw	4
  7750  0667  00DA               	movwf	??_main+2
  7751  0668  085A               	movf	??_main+2,w
  7752  0669  00A2               	movwf	LCDWriteInt@fieldLength
  7753  066A  01A3               	clrf	LCDWriteInt@numPlaces
  7754  066B  01A4               	clrf	LCDWriteInt@sign
  7755  066C  318B  23E3  3182   	fcall	_LCDWriteInt
  7756                           
  7757                           ;main.c: 277: { gotoXY(44,3); LCDWriteInt(tempFanOutput,3, 0, 0);};
  7758  066F  3003               	movlw	3
  7759  0670  0020               	movlb	0	; select bank0
  7760  0671  00D8               	movwf	??_main
  7761  0672  0858               	movf	??_main,w
  7762  0673  00F5               	movwf	gotoXY@y
  7763  0674  302C               	movlw	44
  7764  0675  3192  22DC  3182   	fcall	_gotoXY
  7765  0678  0021               	movlb	1	; select bank1
  7766  0679  085E               	movf	(main@tempFanOutput+1)^(0+128),w
  7767  067A  0020               	movlb	0	; select bank0
  7768  067B  00A1               	movwf	LCDWriteInt@value+1
  7769  067C  0021               	movlb	1	; select bank1
  7770  067D  085D               	movf	main@tempFanOutput^(0+128),w
  7771  067E  0020               	movlb	0	; select bank0
  7772  067F  00A0               	movwf	LCDWriteInt@value
  7773  0680  3003               	movlw	3
  7774  0681  00D8               	movwf	??_main
  7775  0682  0858               	movf	??_main,w
  7776  0683  00A2               	movwf	LCDWriteInt@fieldLength
  7777  0684  01A3               	clrf	LCDWriteInt@numPlaces
  7778  0685  01A4               	clrf	LCDWriteInt@sign
  7779  0686  318B  23E3  3182   	fcall	_LCDWriteInt
  7780                           
  7781                           ;main.c: 278: { gotoXY(64,3); LCDWriteInt(dutyCycle1,3, 0, 0);};
  7782  0689  3003               	movlw	3
  7783  068A  0020               	movlb	0	; select bank0
  7784  068B  00D8               	movwf	??_main
  7785  068C  0858               	movf	??_main,w
  7786  068D  00F5               	movwf	gotoXY@y
  7787  068E  3040               	movlw	64
  7788  068F  3192  22DC  3182   	fcall	_gotoXY
  7789  0692  0021               	movlb	1	; select bank1
  7790  0693  0866               	movf	(main@dutyCycle1+1)^(0+128),w
  7791  0694  0020               	movlb	0	; select bank0
  7792  0695  00A1               	movwf	LCDWriteInt@value+1
  7793  0696  0021               	movlb	1	; select bank1
  7794  0697  0865               	movf	main@dutyCycle1^(0+128),w
  7795  0698  0020               	movlb	0	; select bank0
  7796  0699  00A0               	movwf	LCDWriteInt@value
  7797  069A  3003               	movlw	3
  7798  069B  00D8               	movwf	??_main
  7799  069C  0858               	movf	??_main,w
  7800  069D  00A2               	movwf	LCDWriteInt@fieldLength
  7801  069E  01A3               	clrf	LCDWriteInt@numPlaces
  7802  069F  01A4               	clrf	LCDWriteInt@sign
  7803  06A0  318B  23E3  3182   	fcall	_LCDWriteInt
  7804                           
  7805                           ;main.c: 282: { gotoXY(0,4); LCDWriteInt(current[3],3, 1, 0);};
  7806  06A3  3004               	movlw	4
  7807  06A4  0020               	movlb	0	; select bank0
  7808  06A5  00D8               	movwf	??_main
  7809  06A6  0858               	movf	??_main,w
  7810  06A7  00F5               	movwf	gotoXY@y
  7811  06A8  3000               	movlw	0
  7812  06A9  3192  22DC  3182   	fcall	_gotoXY
  7813  06AC  0021               	movlb	1	; select bank1
  7814  06AD  083F               	movf	((_current+1)^(0+128)+6),w
  7815  06AE  0020               	movlb	0	; select bank0
  7816  06AF  00A1               	movwf	LCDWriteInt@value+1
  7817  06B0  0021               	movlb	1	; select bank1
  7818  06B1  083E               	movf	(_current^(0+128)+6),w
  7819  06B2  0020               	movlb	0	; select bank0
  7820  06B3  00A0               	movwf	LCDWriteInt@value
  7821  06B4  3003               	movlw	3
  7822  06B5  00D8               	movwf	??_main
  7823  06B6  0858               	movf	??_main,w
  7824  06B7  00A2               	movwf	LCDWriteInt@fieldLength
  7825  06B8  01A3               	clrf	LCDWriteInt@numPlaces
  7826  06B9  0AA3               	incf	LCDWriteInt@numPlaces,f
  7827  06BA  01A4               	clrf	LCDWriteInt@sign
  7828  06BB  318B  23E3  3182   	fcall	_LCDWriteInt
  7829                           
  7830                           ;main.c: 283: LCDWriteCharacter('A');
  7831  06BE  3041               	movlw	65
  7832  06BF  3196  2685  3182   	fcall	_LCDWriteCharacter
  7833                           
  7834                           ;main.c: 285: { gotoXY(26,4); LCDWriteInt(current[1],3, 1, 0);};
  7835  06C2  3004               	movlw	4
  7836  06C3  0020               	movlb	0	; select bank0
  7837  06C4  00D8               	movwf	??_main
  7838  06C5  0858               	movf	??_main,w
  7839  06C6  00F5               	movwf	gotoXY@y
  7840  06C7  301A               	movlw	26
  7841  06C8  3192  22DC  3182   	fcall	_gotoXY
  7842  06CB  0021               	movlb	1	; select bank1
  7843  06CC  083B               	movf	((_current+1)^(0+128)+2),w
  7844  06CD  0020               	movlb	0	; select bank0
  7845  06CE  00A1               	movwf	LCDWriteInt@value+1
  7846  06CF  0021               	movlb	1	; select bank1
  7847  06D0  083A               	movf	(_current^(0+128)+2),w
  7848  06D1  0020               	movlb	0	; select bank0
  7849  06D2  00A0               	movwf	LCDWriteInt@value
  7850  06D3  3003               	movlw	3
  7851  06D4  00D8               	movwf	??_main
  7852  06D5  0858               	movf	??_main,w
  7853  06D6  00A2               	movwf	LCDWriteInt@fieldLength
  7854  06D7  01A3               	clrf	LCDWriteInt@numPlaces
  7855  06D8  0AA3               	incf	LCDWriteInt@numPlaces,f
  7856  06D9  01A4               	clrf	LCDWriteInt@sign
  7857  06DA  318B  23E3  3182   	fcall	_LCDWriteInt
  7858                           
  7859                           ;main.c: 286: LCDWriteCharacter('A');
  7860  06DD  3041               	movlw	65
  7861  06DE  3196  2685  3182   	fcall	_LCDWriteCharacter
  7862                           
  7863                           ;main.c: 288: { gotoXY(52,4); LCDWriteInt(Iref[1],3, 1, 0);};
  7864  06E1  3004               	movlw	4
  7865  06E2  0020               	movlb	0	; select bank0
  7866  06E3  00D8               	movwf	??_main
  7867  06E4  0858               	movf	??_main,w
  7868  06E5  00F5               	movwf	gotoXY@y
  7869  06E6  3034               	movlw	52
  7870  06E7  3192  22DC  3182   	fcall	_gotoXY
  7871  06EA  0021               	movlb	1	; select bank1
  7872  06EB  0847               	movf	((_Iref+1)^(0+128)+2),w
  7873  06EC  0020               	movlb	0	; select bank0
  7874  06ED  00A1               	movwf	LCDWriteInt@value+1
  7875  06EE  0021               	movlb	1	; select bank1
  7876  06EF  0846               	movf	(_Iref^(0+128)+2),w
  7877  06F0  0020               	movlb	0	; select bank0
  7878  06F1  00A0               	movwf	LCDWriteInt@value
  7879  06F2  3003               	movlw	3
  7880  06F3  00D8               	movwf	??_main
  7881  06F4  0858               	movf	??_main,w
  7882  06F5  00A2               	movwf	LCDWriteInt@fieldLength
  7883  06F6  01A3               	clrf	LCDWriteInt@numPlaces
  7884  06F7  0AA3               	incf	LCDWriteInt@numPlaces,f
  7885  06F8  01A4               	clrf	LCDWriteInt@sign
  7886  06F9  318B  23E3  3182   	fcall	_LCDWriteInt
  7887                           
  7888                           ;main.c: 289: LCDWriteCharacter('A');
  7889  06FC  3041               	movlw	65
  7890  06FD  3196  2685  3182   	fcall	_LCDWriteCharacter
  7891                           
  7892                           ;main.c: 291: { gotoXY(80,4); LCDWriteInt(batteryState[1],1, 0, 0);};
  7893  0700  3004               	movlw	4
  7894  0701  0020               	movlb	0	; select bank0
  7895  0702  00D8               	movwf	??_main
  7896  0703  0858               	movf	??_main,w
  7897  0704  00F5               	movwf	gotoXY@y
  7898  0705  3050               	movlw	80
  7899  0706  3192  22DC  3182   	fcall	_gotoXY
  7900  0709  0020               	movlb	0	; select bank0
  7901  070A  0866               	movf	_batteryState+1,w
  7902  070B  00D8               	movwf	??_main
  7903  070C  01D9               	clrf	??_main+1
  7904  070D  0858               	movf	??_main,w
  7905  070E  00A0               	movwf	LCDWriteInt@value
  7906  070F  0859               	movf	??_main+1,w
  7907  0710  00A1               	movwf	LCDWriteInt@value+1
  7908  0711  01A2               	clrf	LCDWriteInt@fieldLength
  7909  0712  0AA2               	incf	LCDWriteInt@fieldLength,f
  7910  0713  01A3               	clrf	LCDWriteInt@numPlaces
  7911  0714  01A4               	clrf	LCDWriteInt@sign
  7912  0715  318B  23E3  3182   	fcall	_LCDWriteInt
  7913                           
  7914                           ;main.c: 295: { gotoXY(0,5); LCDWriteInt(dutyCycle6,4, 0, 0);};
  7915  0718  3005               	movlw	5
  7916  0719  0020               	movlb	0	; select bank0
  7917  071A  00D8               	movwf	??_main
  7918  071B  0858               	movf	??_main,w
  7919  071C  00F5               	movwf	gotoXY@y
  7920  071D  3000               	movlw	0
  7921  071E  3192  22DC  3182   	fcall	_gotoXY
  7922  0721  0021               	movlb	1	; select bank1
  7923  0722  086C               	movf	(main@dutyCycle6+1)^(0+128),w
  7924  0723  0020               	movlb	0	; select bank0
  7925  0724  00A1               	movwf	LCDWriteInt@value+1
  7926  0725  0021               	movlb	1	; select bank1
  7927  0726  086B               	movf	main@dutyCycle6^(0+128),w
  7928  0727  0020               	movlb	0	; select bank0
  7929  0728  00A0               	movwf	LCDWriteInt@value
  7930  0729  3004               	movlw	4
  7931  072A  00D8               	movwf	??_main
  7932  072B  0858               	movf	??_main,w
  7933  072C  00A2               	movwf	LCDWriteInt@fieldLength
  7934  072D  01A3               	clrf	LCDWriteInt@numPlaces
  7935  072E  01A4               	clrf	LCDWriteInt@sign
  7936  072F  318B  23E3  3182   	fcall	_LCDWriteInt
  7937                           
  7938                           ;main.c: 296: { gotoXY(18,5); LCDWriteInt(VHoldMode[0],1, 0, 0);};
  7939  0732  3005               	movlw	5
  7940  0733  0020               	movlb	0	; select bank0
  7941  0734  00D8               	movwf	??_main
  7942  0735  0858               	movf	??_main,w
  7943  0736  00F5               	movwf	gotoXY@y
  7944  0737  3012               	movlw	18
  7945  0738  3192  22DC  3182   	fcall	_gotoXY
  7946  073B  0020               	movlb	0	; select bank0
  7947  073C  0861               	movf	_VHoldMode,w
  7948  073D  00A0               	movwf	LCDWriteInt@value
  7949  073E  01A1               	clrf	LCDWriteInt@value+1
  7950  073F  1BA0               	btfsc	LCDWriteInt@value,7
  7951  0740  03A1               	decf	LCDWriteInt@value+1,f
  7952  0741  01A2               	clrf	LCDWriteInt@fieldLength
  7953  0742  0AA2               	incf	LCDWriteInt@fieldLength,f
  7954  0743  01A3               	clrf	LCDWriteInt@numPlaces
  7955  0744  01A4               	clrf	LCDWriteInt@sign
  7956  0745  318B  23E3  3182   	fcall	_LCDWriteInt
  7957                           
  7958                           ;main.c: 297: LCDWriteCharacter(' ');
  7959  0748  3020               	movlw	32
  7960  0749  3196  2685  3182   	fcall	_LCDWriteCharacter
  7961                           
  7962                           ;main.c: 298: { gotoXY(28,5); LCDWriteInt(dutyCycle7,4, 0, 0);};
  7963  074C  3005               	movlw	5
  7964  074D  0020               	movlb	0	; select bank0
  7965  074E  00D8               	movwf	??_main
  7966  074F  0858               	movf	??_main,w
  7967  0750  00F5               	movwf	gotoXY@y
  7968  0751  301C               	movlw	28
  7969  0752  3192  22DC  3182   	fcall	_gotoXY
  7970  0755  0021               	movlb	1	; select bank1
  7971  0756  086E               	movf	(main@dutyCycle7+1)^(0+128),w
  7972  0757  0020               	movlb	0	; select bank0
  7973  0758  00A1               	movwf	LCDWriteInt@value+1
  7974  0759  0021               	movlb	1	; select bank1
  7975  075A  086D               	movf	main@dutyCycle7^(0+128),w
  7976  075B  0020               	movlb	0	; select bank0
  7977  075C  00A0               	movwf	LCDWriteInt@value
  7978  075D  3004               	movlw	4
  7979  075E  00D8               	movwf	??_main
  7980  075F  0858               	movf	??_main,w
  7981  0760  00A2               	movwf	LCDWriteInt@fieldLength
  7982  0761  01A3               	clrf	LCDWriteInt@numPlaces
  7983  0762  01A4               	clrf	LCDWriteInt@sign
  7984  0763  318B  23E3  3182   	fcall	_LCDWriteInt
  7985                           
  7986                           ;main.c: 299: { gotoXY(46,5); LCDWriteInt(VHoldMode[1],1, 0, 0);};
  7987  0766  3005               	movlw	5
  7988  0767  0020               	movlb	0	; select bank0
  7989  0768  00D8               	movwf	??_main
  7990  0769  0858               	movf	??_main,w
  7991  076A  00F5               	movwf	gotoXY@y
  7992  076B  302E               	movlw	46
  7993  076C  3192  22DC  3182   	fcall	_gotoXY
  7994  076F  0020               	movlb	0	; select bank0
  7995  0770  0862               	movf	_VHoldMode+1,w
  7996  0771  00A0               	movwf	LCDWriteInt@value
  7997  0772  01A1               	clrf	LCDWriteInt@value+1
  7998  0773  1BA0               	btfsc	LCDWriteInt@value,7
  7999  0774  03A1               	decf	LCDWriteInt@value+1,f
  8000  0775  01A2               	clrf	LCDWriteInt@fieldLength
  8001  0776  0AA2               	incf	LCDWriteInt@fieldLength,f
  8002  0777  01A3               	clrf	LCDWriteInt@numPlaces
  8003  0778  01A4               	clrf	LCDWriteInt@sign
  8004  0779  318B  23E3  3182   	fcall	_LCDWriteInt
  8005                           
  8006                           ;main.c: 300: LCDWriteCharacter(' ');
  8007  077C  3020               	movlw	32
  8008  077D  3196  2685  3182   	fcall	_LCDWriteCharacter
  8009                           
  8010                           ;main.c: 301: { gotoXY(56,5); LCDWriteInt(batteryTemp,3, 1, 0);};
  8011  0780  3005               	movlw	5
  8012  0781  0020               	movlb	0	; select bank0
  8013  0782  00D8               	movwf	??_main
  8014  0783  0858               	movf	??_main,w
  8015  0784  00F5               	movwf	gotoXY@y
  8016  0785  3038               	movlw	56
  8017  0786  3192  22DC  3182   	fcall	_gotoXY
  8018  0789  0020               	movlb	0	; select bank0
  8019  078A  086E               	movf	_batteryTemp+1,w
  8020  078B  00A1               	movwf	LCDWriteInt@value+1
  8021  078C  086D               	movf	_batteryTemp,w
  8022  078D  00A0               	movwf	LCDWriteInt@value
  8023  078E  3003               	movlw	3
  8024  078F  00D8               	movwf	??_main
  8025  0790  0858               	movf	??_main,w
  8026  0791  00A2               	movwf	LCDWriteInt@fieldLength
  8027  0792  01A3               	clrf	LCDWriteInt@numPlaces
  8028  0793  0AA3               	incf	LCDWriteInt@numPlaces,f
  8029  0794  01A4               	clrf	LCDWriteInt@sign
  8030  0795  318B  23E3  3182   	fcall	_LCDWriteInt
  8031                           
  8032                           ;main.c: 302: LCDWriteCharacter(123);
  8033  0798  307B               	movlw	123
  8034  0799  3196  2685  3182   	fcall	_LCDWriteCharacter
  8035                           
  8036                           ;main.c: 303: LCDWriteCharacter('C');
  8037  079C  3043               	movlw	67
  8038  079D  3196  2685  3182   	fcall	_LCDWriteCharacter
  8039                           
  8040                           ;main.c: 373: if(batteryState[0] > FINISHED)
  8041  07A0  3003               	movlw	3
  8042  07A1  0020               	movlb	0	; select bank0
  8043  07A2  0265               	subwf	_batteryState,w
  8044  07A3  1C03               	skipc
  8045  07A4  2FA9               	goto	l3434
  8046                           
  8047                           ;main.c: 374: {
  8048                           ;main.c: 375: cc_cv_mode(0);
  8049  07A5  3000               	movlw	0
  8050  07A6  318E  26C1  3182   	fcall	_cc_cv_mode
  8051  07A9                     l3434:	
  8052                           
  8053                           ;main.c: 376: }
  8054                           ;main.c: 377: if(batteryState[1] > FINISHED)
  8055  07A9  3003               	movlw	3
  8056  07AA  0020               	movlb	0	; select bank0
  8057  07AB  0266               	subwf	_batteryState+1,w
  8058  07AC  1C03               	skipc
  8059  07AD  2FB2               	goto	l3438
  8060                           
  8061                           ;main.c: 378: {
  8062                           ;main.c: 379: cc_cv_mode(1);
  8063  07AE  3001               	movlw	1
  8064  07AF  318E  26C1  3182   	fcall	_cc_cv_mode
  8065  07B2                     l3438:	
  8066                           
  8067                           ;main.c: 380: }
  8068                           ;main.c: 381: slowLoop=0;
  8069  07B2  0021               	movlb	1	; select bank1
  8070  07B3  01E0               	clrf	main@slowLoop^(0+128)
  8071  07B4  2ACB               	goto	l3162
  8072  07B5                     __end_of_main:	
  8073                           
  8074                           	psect	text1
  8075  0C9C                     __ptext1:	
  8076 ;; *************** function _tempCalc *****************
  8077 ;; Defined at:
  8078 ;;		line 4 in file "tempCalc.c"
  8079 ;; Parameters:    Size  Location     Type
  8080 ;;  analogValue     2   45[BANK0 ] int 
  8081 ;; Auto vars:     Size  Location     Type
  8082 ;;  steinhart       3   53[BANK0 ] float 
  8083 ;;  R               3   47[BANK0 ] float 
  8084 ;; Return value:  Size  Location     Type
  8085 ;;                  2   45[BANK0 ] int 
  8086 ;; Registers used:
  8087 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8088 ;; Tracked objects:
  8089 ;;		On entry : 0/0
  8090 ;;		On exit  : 0/0
  8091 ;;		Unchanged: 0/0
  8092 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8093 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8094 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8095 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8096 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8097 ;;Total ram usage:       11 bytes
  8098 ;; Hardware stack levels used:    1
  8099 ;; Hardware stack levels required when called:    4
  8100 ;; This function calls:
  8101 ;;		___awtoft
  8102 ;;		___ftadd
  8103 ;;		___ftdiv
  8104 ;;		___ftmul
  8105 ;;		___ftsub
  8106 ;;		___fttol
  8107 ;;		_log
  8108 ;; This function is called by:
  8109 ;;		_main
  8110 ;; This function uses a non-reentrant model
  8111 ;;
  8112                           
  8113                           
  8114                           ;psect for function _tempCalc
  8115  0C9C                     _tempCalc:	
  8116                           
  8117                           ;tempCalc.c: 6: float R, steinhart;
  8118                           ;tempCalc.c: 8: R=10030/(1023/(float)analogValue-1);
  8119                           
  8120                           ;incstack = 0
  8121                           ; Regs used in _tempCalc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8122  0C9C  3000               	movlw	0
  8123  0C9D  0020               	movlb	0	; select bank0
  8124  0C9E  00B0               	movwf	___ftadd@f1
  8125  0C9F  3080               	movlw	128
  8126  0CA0  00B1               	movwf	___ftadd@f1+1
  8127  0CA1  30BF               	movlw	191
  8128  0CA2  00B2               	movwf	___ftadd@f1+2
  8129  0CA3  084E               	movf	tempCalc@analogValue+1,w
  8130  0CA4  00F9               	movwf	___awtoft@c+1
  8131  0CA5  084D               	movf	tempCalc@analogValue,w
  8132  0CA6  00F8               	movwf	___awtoft@c
  8133  0CA7  3193  23D1  318C   	fcall	___awtoft
  8134  0CAA  0878               	movf	?___awtoft,w
  8135  0CAB  0020               	movlb	0	; select bank0
  8136  0CAC  00A0               	movwf	___ftdiv@f2
  8137  0CAD  0879               	movf	?___awtoft+1,w
  8138  0CAE  00A1               	movwf	___ftdiv@f2+1
  8139  0CAF  087A               	movf	?___awtoft+2,w
  8140  0CB0  00A2               	movwf	___ftdiv@f2+2
  8141  0CB1  30C0               	movlw	192
  8142  0CB2  00A3               	movwf	___ftdiv@f1
  8143  0CB3  307F               	movlw	127
  8144  0CB4  00A4               	movwf	___ftdiv@f1+1
  8145  0CB5  3044               	movlw	68
  8146  0CB6  00A5               	movwf	___ftdiv@f1+2
  8147  0CB7  3189  21D6  318C   	fcall	___ftdiv
  8148  0CBA  0020               	movlb	0	; select bank0
  8149  0CBB  0820               	movf	?___ftdiv,w
  8150  0CBC  00B3               	movwf	___ftadd@f2
  8151  0CBD  0821               	movf	?___ftdiv+1,w
  8152  0CBE  00B4               	movwf	___ftadd@f2+1
  8153  0CBF  0822               	movf	?___ftdiv+2,w
  8154  0CC0  00B5               	movwf	___ftadd@f2+2
  8155  0CC1  3180  202A  318C   	fcall	___ftadd
  8156  0CC4  0020               	movlb	0	; select bank0
  8157  0CC5  0830               	movf	?___ftadd,w
  8158  0CC6  00D2               	movwf	_tempCalc$1297
  8159  0CC7  0831               	movf	?___ftadd+1,w
  8160  0CC8  00D3               	movwf	_tempCalc$1297+1
  8161  0CC9  0832               	movf	?___ftadd+2,w
  8162  0CCA  00D4               	movwf	_tempCalc$1297+2
  8163                           
  8164                           ;tempCalc.c: 6: float R, steinhart;
  8165                           ;tempCalc.c: 8: R=10030/(1023/(float)analogValue-1);
  8166  0CCB  0852               	movf	_tempCalc$1297,w
  8167  0CCC  00A0               	movwf	___ftdiv@f2
  8168  0CCD  0853               	movf	_tempCalc$1297+1,w
  8169  0CCE  00A1               	movwf	___ftdiv@f2+1
  8170  0CCF  0854               	movf	_tempCalc$1297+2,w
  8171  0CD0  00A2               	movwf	___ftdiv@f2+2
  8172  0CD1  30B8               	movlw	184
  8173  0CD2  00A3               	movwf	___ftdiv@f1
  8174  0CD3  301C               	movlw	28
  8175  0CD4  00A4               	movwf	___ftdiv@f1+1
  8176  0CD5  3046               	movlw	70
  8177  0CD6  00A5               	movwf	___ftdiv@f1+2
  8178  0CD7  3189  21D6  318C   	fcall	___ftdiv
  8179  0CDA  0020               	movlb	0	; select bank0
  8180  0CDB  0820               	movf	?___ftdiv,w
  8181  0CDC  00CF               	movwf	tempCalc@R
  8182  0CDD  0821               	movf	?___ftdiv+1,w
  8183  0CDE  00D0               	movwf	tempCalc@R+1
  8184  0CDF  0822               	movf	?___ftdiv+2,w
  8185  0CE0  00D1               	movwf	tempCalc@R+2
  8186                           
  8187                           ;tempCalc.c: 10: steinhart=R/10010;
  8188  0CE1  3068               	movlw	104
  8189  0CE2  00A0               	movwf	___ftdiv@f2
  8190  0CE3  301C               	movlw	28
  8191  0CE4  00A1               	movwf	___ftdiv@f2+1
  8192  0CE5  3046               	movlw	70
  8193  0CE6  00A2               	movwf	___ftdiv@f2+2
  8194  0CE7  084F               	movf	tempCalc@R,w
  8195  0CE8  00A3               	movwf	___ftdiv@f1
  8196  0CE9  0850               	movf	tempCalc@R+1,w
  8197  0CEA  00A4               	movwf	___ftdiv@f1+1
  8198  0CEB  0851               	movf	tempCalc@R+2,w
  8199  0CEC  00A5               	movwf	___ftdiv@f1+2
  8200  0CED  3189  21D6  318C   	fcall	___ftdiv
  8201  0CF0  0020               	movlb	0	; select bank0
  8202  0CF1  0820               	movf	?___ftdiv,w
  8203  0CF2  00D5               	movwf	tempCalc@steinhart
  8204  0CF3  0821               	movf	?___ftdiv+1,w
  8205  0CF4  00D6               	movwf	tempCalc@steinhart+1
  8206  0CF5  0822               	movf	?___ftdiv+2,w
  8207  0CF6  00D7               	movwf	tempCalc@steinhart+2
  8208                           
  8209                           ;tempCalc.c: 11: steinhart=log(steinhart);
  8210  0CF7  0855               	movf	tempCalc@steinhart,w
  8211  0CF8  00C7               	movwf	log@x
  8212  0CF9  0856               	movf	tempCalc@steinhart+1,w
  8213  0CFA  00C8               	movwf	log@x+1
  8214  0CFB  0857               	movf	tempCalc@steinhart+2,w
  8215  0CFC  00C9               	movwf	log@x+2
  8216  0CFD  318A  227F  318C   	fcall	_log
  8217  0D00  0020               	movlb	0	; select bank0
  8218  0D01  0847               	movf	?_log,w
  8219  0D02  00D5               	movwf	tempCalc@steinhart
  8220  0D03  0848               	movf	?_log+1,w
  8221  0D04  00D6               	movwf	tempCalc@steinhart+1
  8222  0D05  0849               	movf	?_log+2,w
  8223  0D06  00D7               	movwf	tempCalc@steinhart+2
  8224                           
  8225                           ;tempCalc.c: 12: steinhart/=3795.3;
  8226  0D07  3035               	movlw	53
  8227  0D08  00A0               	movwf	___ftdiv@f2
  8228  0D09  306D               	movlw	109
  8229  0D0A  00A1               	movwf	___ftdiv@f2+1
  8230  0D0B  3045               	movlw	69
  8231  0D0C  00A2               	movwf	___ftdiv@f2+2
  8232  0D0D  0855               	movf	tempCalc@steinhart,w
  8233  0D0E  00A3               	movwf	___ftdiv@f1
  8234  0D0F  0856               	movf	tempCalc@steinhart+1,w
  8235  0D10  00A4               	movwf	___ftdiv@f1+1
  8236  0D11  0857               	movf	tempCalc@steinhart+2,w
  8237  0D12  00A5               	movwf	___ftdiv@f1+2
  8238  0D13  3189  21D6  318C   	fcall	___ftdiv
  8239  0D16  0020               	movlb	0	; select bank0
  8240  0D17  0820               	movf	?___ftdiv,w
  8241  0D18  00D5               	movwf	tempCalc@steinhart
  8242  0D19  0821               	movf	?___ftdiv+1,w
  8243  0D1A  00D6               	movwf	tempCalc@steinhart+1
  8244  0D1B  0822               	movf	?___ftdiv+2,w
  8245  0D1C  00D7               	movwf	tempCalc@steinhart+2
  8246                           
  8247                           ;tempCalc.c: 16: steinhart+=1.0/(25+273.15);
  8248  0D1D  30CF               	movlw	207
  8249  0D1E  00B0               	movwf	___ftadd@f1
  8250  0D1F  305B               	movlw	91
  8251  0D20  00B1               	movwf	___ftadd@f1+1
  8252  0D21  303B               	movlw	59
  8253  0D22  00B2               	movwf	___ftadd@f1+2
  8254  0D23  0855               	movf	tempCalc@steinhart,w
  8255  0D24  00B3               	movwf	___ftadd@f2
  8256  0D25  0856               	movf	tempCalc@steinhart+1,w
  8257  0D26  00B4               	movwf	___ftadd@f2+1
  8258  0D27  0857               	movf	tempCalc@steinhart+2,w
  8259  0D28  00B5               	movwf	___ftadd@f2+2
  8260  0D29  3180  202A  318C   	fcall	___ftadd
  8261  0D2C  0020               	movlb	0	; select bank0
  8262  0D2D  0830               	movf	?___ftadd,w
  8263  0D2E  00D5               	movwf	tempCalc@steinhart
  8264  0D2F  0831               	movf	?___ftadd+1,w
  8265  0D30  00D6               	movwf	tempCalc@steinhart+1
  8266  0D31  0832               	movf	?___ftadd+2,w
  8267  0D32  00D7               	movwf	tempCalc@steinhart+2
  8268                           
  8269                           ;tempCalc.c: 17: steinhart=1.0/steinhart;
  8270  0D33  0855               	movf	tempCalc@steinhart,w
  8271  0D34  00A0               	movwf	___ftdiv@f2
  8272  0D35  0856               	movf	tempCalc@steinhart+1,w
  8273  0D36  00A1               	movwf	___ftdiv@f2+1
  8274  0D37  0857               	movf	tempCalc@steinhart+2,w
  8275  0D38  00A2               	movwf	___ftdiv@f2+2
  8276  0D39  3000               	movlw	0
  8277  0D3A  00A3               	movwf	___ftdiv@f1
  8278  0D3B  3080               	movlw	128
  8279  0D3C  00A4               	movwf	___ftdiv@f1+1
  8280  0D3D  303F               	movlw	63
  8281  0D3E  00A5               	movwf	___ftdiv@f1+2
  8282  0D3F  3189  21D6  318C   	fcall	___ftdiv
  8283  0D42  0020               	movlb	0	; select bank0
  8284  0D43  0820               	movf	?___ftdiv,w
  8285  0D44  00D5               	movwf	tempCalc@steinhart
  8286  0D45  0821               	movf	?___ftdiv+1,w
  8287  0D46  00D6               	movwf	tempCalc@steinhart+1
  8288  0D47  0822               	movf	?___ftdiv+2,w
  8289  0D48  00D7               	movwf	tempCalc@steinhart+2
  8290                           
  8291                           ;tempCalc.c: 18: steinhart-=273.15;
  8292  0D49  3093               	movlw	147
  8293  0D4A  00BD               	movwf	___ftsub@f2
  8294  0D4B  3088               	movlw	136
  8295  0D4C  00BE               	movwf	___ftsub@f2+1
  8296  0D4D  3043               	movlw	67
  8297  0D4E  00BF               	movwf	___ftsub@f2+2
  8298  0D4F  0855               	movf	tempCalc@steinhart,w
  8299  0D50  00C0               	movwf	___ftsub@f1
  8300  0D51  0856               	movf	tempCalc@steinhart+1,w
  8301  0D52  00C1               	movwf	___ftsub@f1+1
  8302  0D53  0857               	movf	tempCalc@steinhart+2,w
  8303  0D54  00C2               	movwf	___ftsub@f1+2
  8304  0D55  3193  2375  318C   	fcall	___ftsub
  8305  0D58  0020               	movlb	0	; select bank0
  8306  0D59  083D               	movf	?___ftsub,w
  8307  0D5A  00D5               	movwf	tempCalc@steinhart
  8308  0D5B  083E               	movf	?___ftsub+1,w
  8309  0D5C  00D6               	movwf	tempCalc@steinhart+1
  8310  0D5D  083F               	movf	?___ftsub+2,w
  8311  0D5E  00D7               	movwf	tempCalc@steinhart+2
  8312                           
  8313                           ;tempCalc.c: 20: steinhart*=10;
  8314  0D5F  3000               	movlw	0
  8315  0D60  00A0               	movwf	___ftmul@f1
  8316  0D61  3020               	movlw	32
  8317  0D62  00A1               	movwf	___ftmul@f1+1
  8318  0D63  3041               	movlw	65
  8319  0D64  00A2               	movwf	___ftmul@f1+2
  8320  0D65  0855               	movf	tempCalc@steinhart,w
  8321  0D66  00A3               	movwf	___ftmul@f2
  8322  0D67  0856               	movf	tempCalc@steinhart+1,w
  8323  0D68  00A4               	movwf	___ftmul@f2+1
  8324  0D69  0857               	movf	tempCalc@steinhart+2,w
  8325  0D6A  00A5               	movwf	___ftmul@f2+2
  8326  0D6B  318B  232F  318C   	fcall	___ftmul
  8327  0D6E  0020               	movlb	0	; select bank0
  8328  0D6F  0820               	movf	?___ftmul,w
  8329  0D70  00D5               	movwf	tempCalc@steinhart
  8330  0D71  0821               	movf	?___ftmul+1,w
  8331  0D72  00D6               	movwf	tempCalc@steinhart+1
  8332  0D73  0822               	movf	?___ftmul+2,w
  8333  0D74  00D7               	movwf	tempCalc@steinhart+2
  8334                           
  8335                           ;tempCalc.c: 24: return (int16_t)steinhart;
  8336  0D75  0855               	movf	tempCalc@steinhart,w
  8337  0D76  00B0               	movwf	___fttol@f1
  8338  0D77  0856               	movf	tempCalc@steinhart+1,w
  8339  0D78  00B1               	movwf	___fttol@f1+1
  8340  0D79  0857               	movf	tempCalc@steinhart+2,w
  8341  0D7A  00B2               	movwf	___fttol@f1+2
  8342  0D7B  3189  214F         	fcall	___fttol
  8343  0D7D  0020               	movlb	0	; select bank0
  8344  0D7E  0831               	movf	?___fttol+1,w
  8345  0D7F  00CE               	movwf	?_tempCalc+1
  8346  0D80  0830               	movf	?___fttol,w
  8347  0D81  00CD               	movwf	?_tempCalc
  8348  0D82  0008               	return
  8349  0D83                     __end_of_tempCalc:	
  8350                           
  8351                           	psect	text2
  8352  0A7F                     __ptext2:	
  8353 ;; *************** function _log *****************
  8354 ;; Defined at:
  8355 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\log.c"
  8356 ;; Parameters:    Size  Location     Type
  8357 ;;  x               3   39[BANK0 ] int 
  8358 ;; Auto vars:     Size  Location     Type
  8359 ;;  exponent        2   43[BANK0 ] int 
  8360 ;; Return value:  Size  Location     Type
  8361 ;;                  3   39[BANK0 ] int 
  8362 ;; Registers used:
  8363 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8364 ;; Tracked objects:
  8365 ;;		On entry : 0/0
  8366 ;;		On exit  : 0/0
  8367 ;;		Unchanged: 0/0
  8368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8369 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8370 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8371 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8372 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8373 ;;Total ram usage:        6 bytes
  8374 ;; Hardware stack levels used:    1
  8375 ;; Hardware stack levels required when called:    3
  8376 ;; This function calls:
  8377 ;;		___awtoft
  8378 ;;		___ftadd
  8379 ;;		___ftge
  8380 ;;		___ftmul
  8381 ;;		_eval_poly
  8382 ;;		_frexp
  8383 ;; This function is called by:
  8384 ;;		_tempCalc
  8385 ;; This function uses a non-reentrant model
  8386 ;;
  8387                           
  8388                           
  8389                           ;psect for function _log
  8390  0A7F                     _log:	
  8391                           
  8392                           ;incstack = 0
  8393                           ; Regs used in _log: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8394  0A7F  0020               	movlb	0	; select bank0
  8395  0A80  0847               	movf	log@x,w
  8396  0A81  00F0               	movwf	___ftge@ff1
  8397  0A82  0848               	movf	log@x+1,w
  8398  0A83  00F1               	movwf	___ftge@ff1+1
  8399  0A84  0849               	movf	log@x+2,w
  8400  0A85  00F2               	movwf	___ftge@ff1+2
  8401  0A86  3000               	movlw	0
  8402  0A87  00F3               	movwf	___ftge@ff2
  8403  0A88  3000               	movlw	0
  8404  0A89  00F4               	movwf	___ftge@ff2+1
  8405  0A8A  3000               	movlw	0
  8406  0A8B  00F5               	movwf	___ftge@ff2+2
  8407  0A8C  3194  24EF  318A   	fcall	___ftge
  8408  0A8F  1803               	btfsc	3,0
  8409  0A90  2A9E               	goto	l2708
  8410  0A91  3021               	movlw	33
  8411  0A92  0021               	movlb	1	; select bank1
  8412  0A93  00D0               	movwf	_errno^(0+128)
  8413  0A94  3000               	movlw	0
  8414  0A95  00D1               	movwf	(_errno^(0+128)+1)
  8415  0A96  3000               	movlw	0
  8416  0A97  0020               	movlb	0	; select bank0
  8417  0A98  00C7               	movwf	?_log
  8418  0A99  3000               	movlw	0
  8419  0A9A  00C8               	movwf	?_log+1
  8420  0A9B  3000               	movlw	0
  8421  0A9C  00C9               	movwf	?_log+2
  8422  0A9D  0008               	return
  8423  0A9E                     l2708:	
  8424  0A9E  0020               	movlb	0	; select bank0
  8425  0A9F  0849               	movf	log@x+2,w
  8426  0AA0  0448               	iorwf	log@x+1,w
  8427  0AA1  0447               	iorwf	log@x,w
  8428  0AA2  1D03               	skipz
  8429  0AA3  2AB1               	goto	l2714
  8430  0AA4  3022               	movlw	34
  8431  0AA5  0021               	movlb	1	; select bank1
  8432  0AA6  00D0               	movwf	_errno^(0+128)
  8433  0AA7  3000               	movlw	0
  8434  0AA8  00D1               	movwf	(_errno^(0+128)+1)
  8435  0AA9  3000               	movlw	0
  8436  0AAA  0020               	movlb	0	; select bank0
  8437  0AAB  00C7               	movwf	?_log
  8438  0AAC  3000               	movlw	0
  8439  0AAD  00C8               	movwf	?_log+1
  8440  0AAE  3000               	movlw	0
  8441  0AAF  00C9               	movwf	?_log+2
  8442  0AB0  0008               	return
  8443  0AB1                     l2714:	
  8444  0AB1  3000               	movlw	0
  8445  0AB2  00B0               	movwf	___ftadd@f1
  8446  0AB3  3080               	movlw	128
  8447  0AB4  00B1               	movwf	___ftadd@f1+1
  8448  0AB5  30BF               	movlw	191
  8449  0AB6  00B2               	movwf	___ftadd@f1+2
  8450  0AB7  3000               	movlw	0
  8451  0AB8  00A0               	movwf	___ftmul@f1
  8452  0AB9  3000               	movlw	0
  8453  0ABA  00A1               	movwf	___ftmul@f1+1
  8454  0ABB  3040               	movlw	64
  8455  0ABC  00A2               	movwf	___ftmul@f1+2
  8456  0ABD  304B               	movlw	(low (log@exponent| 0))& (0+255)
  8457  0ABE  00CA               	movwf	??_log
  8458  0ABF  084A               	movf	??_log,w
  8459  0AC0  00F3               	movwf	frexp@eptr
  8460  0AC1  0847               	movf	log@x,w
  8461  0AC2  00F0               	movwf	frexp@value
  8462  0AC3  0848               	movf	log@x+1,w
  8463  0AC4  00F1               	movwf	frexp@value+1
  8464  0AC5  0849               	movf	log@x+2,w
  8465  0AC6  00F2               	movwf	frexp@value+2
  8466  0AC7  3195  252A  318A   	fcall	_frexp
  8467  0ACA  0870               	movf	?_frexp,w
  8468  0ACB  0020               	movlb	0	; select bank0
  8469  0ACC  00A3               	movwf	___ftmul@f2
  8470  0ACD  0871               	movf	?_frexp+1,w
  8471  0ACE  00A4               	movwf	___ftmul@f2+1
  8472  0ACF  0872               	movf	?_frexp+2,w
  8473  0AD0  00A5               	movwf	___ftmul@f2+2
  8474  0AD1  318B  232F  318A   	fcall	___ftmul
  8475  0AD4  0020               	movlb	0	; select bank0
  8476  0AD5  0820               	movf	?___ftmul,w
  8477  0AD6  00B3               	movwf	___ftadd@f2
  8478  0AD7  0821               	movf	?___ftmul+1,w
  8479  0AD8  00B4               	movwf	___ftadd@f2+1
  8480  0AD9  0822               	movf	?___ftmul+2,w
  8481  0ADA  00B5               	movwf	___ftadd@f2+2
  8482  0ADB  3180  202A  318A   	fcall	___ftadd
  8483  0ADE  0020               	movlb	0	; select bank0
  8484  0ADF  0830               	movf	?___ftadd,w
  8485  0AE0  00C7               	movwf	log@x
  8486  0AE1  0831               	movf	?___ftadd+1,w
  8487  0AE2  00C8               	movwf	log@x+1
  8488  0AE3  0832               	movf	?___ftadd+2,w
  8489  0AE4  00C9               	movwf	log@x+2
  8490  0AE5  30FF               	movlw	255
  8491  0AE6  07CB               	addwf	log@exponent,f
  8492  0AE7  30FF               	movlw	255
  8493  0AE8  3DCC               	addwfc	log@exponent+1,f
  8494  0AE9  0847               	movf	log@x,w
  8495  0AEA  00BD               	movwf	eval_poly@x
  8496  0AEB  0848               	movf	log@x+1,w
  8497  0AEC  00BE               	movwf	eval_poly@x+1
  8498  0AED  0849               	movf	log@x+2,w
  8499  0AEE  00BF               	movwf	eval_poly@x+2
  8500  0AEF  3000               	movlw	low (log@coeff| (0+32768))
  8501  0AF0  00C0               	movwf	eval_poly@d
  8502  0AF1  3098               	movlw	high (log@coeff| (0+32768))
  8503  0AF2  00C1               	movwf	eval_poly@d+1
  8504  0AF3  3008               	movlw	8
  8505  0AF4  00C2               	movwf	eval_poly@n
  8506  0AF5  3000               	movlw	0
  8507  0AF6  00C3               	movwf	eval_poly@n+1
  8508  0AF7  3196  26D9  318A   	fcall	_eval_poly
  8509  0AFA  0020               	movlb	0	; select bank0
  8510  0AFB  083D               	movf	?_eval_poly,w
  8511  0AFC  00C7               	movwf	log@x
  8512  0AFD  083E               	movf	?_eval_poly+1,w
  8513  0AFE  00C8               	movwf	log@x+1
  8514  0AFF  083F               	movf	?_eval_poly+2,w
  8515  0B00  00C9               	movwf	log@x+2
  8516  0B01  0847               	movf	log@x,w
  8517  0B02  00B0               	movwf	___ftadd@f1
  8518  0B03  0848               	movf	log@x+1,w
  8519  0B04  00B1               	movwf	___ftadd@f1+1
  8520  0B05  0849               	movf	log@x+2,w
  8521  0B06  00B2               	movwf	___ftadd@f1+2
  8522  0B07  3072               	movlw	114
  8523  0B08  00A0               	movwf	___ftmul@f1
  8524  0B09  3031               	movlw	49
  8525  0B0A  00A1               	movwf	___ftmul@f1+1
  8526  0B0B  303F               	movlw	63
  8527  0B0C  00A2               	movwf	___ftmul@f1+2
  8528  0B0D  084C               	movf	log@exponent+1,w
  8529  0B0E  00F9               	movwf	___awtoft@c+1
  8530  0B0F  084B               	movf	log@exponent,w
  8531  0B10  00F8               	movwf	___awtoft@c
  8532  0B11  3193  23D1  318A   	fcall	___awtoft
  8533  0B14  0878               	movf	?___awtoft,w
  8534  0B15  0020               	movlb	0	; select bank0
  8535  0B16  00A3               	movwf	___ftmul@f2
  8536  0B17  0879               	movf	?___awtoft+1,w
  8537  0B18  00A4               	movwf	___ftmul@f2+1
  8538  0B19  087A               	movf	?___awtoft+2,w
  8539  0B1A  00A5               	movwf	___ftmul@f2+2
  8540  0B1B  318B  232F  318A   	fcall	___ftmul
  8541  0B1E  0020               	movlb	0	; select bank0
  8542  0B1F  0820               	movf	?___ftmul,w
  8543  0B20  00B3               	movwf	___ftadd@f2
  8544  0B21  0821               	movf	?___ftmul+1,w
  8545  0B22  00B4               	movwf	___ftadd@f2+1
  8546  0B23  0822               	movf	?___ftmul+2,w
  8547  0B24  00B5               	movwf	___ftadd@f2+2
  8548  0B25  3180  202A         	fcall	___ftadd
  8549  0B27  0020               	movlb	0	; select bank0
  8550  0B28  0830               	movf	?___ftadd,w
  8551  0B29  00C7               	movwf	?_log
  8552  0B2A  0831               	movf	?___ftadd+1,w
  8553  0B2B  00C8               	movwf	?_log+1
  8554  0B2C  0832               	movf	?___ftadd+2,w
  8555  0B2D  00C9               	movwf	?_log+2
  8556  0B2E  0008               	return
  8557  0B2F                     __end_of_log:	
  8558                           
  8559                           	psect	text3
  8560  152A                     __ptext3:	
  8561 ;; *************** function _frexp *****************
  8562 ;; Defined at:
  8563 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
  8564 ;; Parameters:    Size  Location     Type
  8565 ;;  value           3    0[COMMON] int 
  8566 ;;  eptr            1    3[COMMON] PTR int 
  8567 ;;		 -> log@exponent(2), 
  8568 ;; Auto vars:     Size  Location     Type
  8569 ;;		None
  8570 ;; Return value:  Size  Location     Type
  8571 ;;                  3    0[COMMON] PTR int 
  8572 ;; Registers used:
  8573 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8574 ;; Tracked objects:
  8575 ;;		On entry : 0/0
  8576 ;;		On exit  : 0/0
  8577 ;;		Unchanged: 0/0
  8578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8579 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8580 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8581 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8582 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8583 ;;Total ram usage:        6 bytes
  8584 ;; Hardware stack levels used:    1
  8585 ;; This function calls:
  8586 ;;		Nothing
  8587 ;; This function is called by:
  8588 ;;		_log
  8589 ;; This function uses a non-reentrant model
  8590 ;;
  8591                           
  8592                           
  8593                           ;psect for function _frexp
  8594  152A                     _frexp:	
  8595                           
  8596                           ;incstack = 0
  8597                           ; Regs used in _frexp: [wreg+fsr1l+fsr1h+status,2+status,0]
  8598  152A  0872               	movf	frexp@value+2,w
  8599  152B  0471               	iorwf	frexp@value+1,w
  8600  152C  0470               	iorwf	frexp@value,w
  8601  152D  1D03               	skipz
  8602  152E  2D3C               	goto	l2504
  8603  152F  0873               	movf	frexp@eptr,w
  8604  1530  0086               	movwf	6
  8605  1531  0187               	clrf	7
  8606  1532  3000               	movlw	0
  8607  1533  3FC0               	movwi [0]fsr1
  8608  1534  3FC1               	movwi [1]fsr1
  8609  1535  3000               	movlw	0
  8610  1536  00F0               	movwf	?_frexp
  8611  1537  3000               	movlw	0
  8612  1538  00F1               	movwf	?_frexp+1
  8613  1539  3000               	movlw	0
  8614  153A  00F2               	movwf	?_frexp+2
  8615  153B  0008               	return
  8616  153C                     l2504:	
  8617  153C  0872               	movf	frexp@value+2,w
  8618  153D  397F               	andlw	127
  8619  153E  00F4               	movwf	??_frexp
  8620  153F  01F5               	clrf	??_frexp+1
  8621  1540  35F4               	lslf	??_frexp,f
  8622  1541  0DF5               	rlf	??_frexp+1,f
  8623  1542  0873               	movf	frexp@eptr,w
  8624  1543  0086               	movwf	6
  8625  1544  0187               	clrf	7
  8626  1545  0874               	movf	??_frexp,w
  8627  1546  3FC0               	movwi [0]fsr1
  8628  1547  0875               	movf	??_frexp+1,w
  8629  1548  3FC1               	movwi [1]fsr1
  8630  1549  0D71               	rlf	frexp@value+1,w
  8631  154A  0D71               	rlf	frexp@value+1,w
  8632  154B  3901               	andlw	1
  8633  154C  00F4               	movwf	??_frexp
  8634  154D  01F5               	clrf	??_frexp+1
  8635  154E  0873               	movf	frexp@eptr,w
  8636  154F  0086               	movwf	6
  8637  1550  0187               	clrf	7
  8638  1551  0874               	movf	??_frexp,w
  8639  1552  0481               	iorwf	1,f
  8640  1553  3141               	addfsr 1,1
  8641  1554  0875               	movf	??_frexp+1,w
  8642  1555  0481               	iorwf	1,f
  8643  1556  0873               	movf	frexp@eptr,w
  8644  1557  0086               	movwf	6
  8645  1558  0187               	clrf	7
  8646  1559  3082               	movlw	130
  8647  155A  0781               	addwf	1,f
  8648  155B  3141               	addfsr 1,1
  8649  155C  30FF               	movlw	255
  8650  155D  3D81               	addwfc	1,f
  8651  155E  317F               	addfsr 1,-1
  8652  155F  0872               	movf	frexp@value+2,w
  8653  1560  3980               	andlw	-128
  8654  1561  383F               	iorlw	63
  8655  1562  00F2               	movwf	frexp@value+2
  8656  1563  13F1               	bcf	frexp@value+1,7
  8657  1564  0008               	return
  8658  1565                     __end_of_frexp:	
  8659                           
  8660                           	psect	text4
  8661  16D9                     __ptext4:	
  8662 ;; *************** function _eval_poly *****************
  8663 ;; Defined at:
  8664 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\evalpoly.c"
  8665 ;; Parameters:    Size  Location     Type
  8666 ;;  x               3   29[BANK0 ] PTR int 
  8667 ;;  d               2   32[BANK0 ] PTR const 
  8668 ;;		 -> log@coeff(27), 
  8669 ;;  n               2   34[BANK0 ] int 
  8670 ;; Auto vars:     Size  Location     Type
  8671 ;;  res             3   36[BANK0 ] int 
  8672 ;; Return value:  Size  Location     Type
  8673 ;;                  3   29[BANK0 ] int 
  8674 ;; Registers used:
  8675 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8676 ;; Tracked objects:
  8677 ;;		On entry : 0/0
  8678 ;;		On exit  : 0/0
  8679 ;;		Unchanged: 0/0
  8680 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8681 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8682 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8683 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8684 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8685 ;;Total ram usage:       10 bytes
  8686 ;; Hardware stack levels used:    1
  8687 ;; Hardware stack levels required when called:    2
  8688 ;; This function calls:
  8689 ;;		___ftadd
  8690 ;;		___ftmul
  8691 ;;		___wmul
  8692 ;; This function is called by:
  8693 ;;		_log
  8694 ;; This function uses a non-reentrant model
  8695 ;;
  8696                           
  8697                           
  8698                           ;psect for function _eval_poly
  8699  16D9                     _eval_poly:	
  8700                           
  8701                           ;incstack = 0
  8702                           ; Regs used in _eval_poly: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8703  16D9  0020               	movlb	0	; select bank0
  8704  16DA  0843               	movf	eval_poly@n+1,w
  8705  16DB  00F1               	movwf	___wmul@multiplier+1
  8706  16DC  0842               	movf	eval_poly@n,w
  8707  16DD  00F0               	movwf	___wmul@multiplier
  8708  16DE  3003               	movlw	3
  8709  16DF  00F2               	movwf	___wmul@multiplicand
  8710  16E0  3000               	movlw	0
  8711  16E1  00F3               	movwf	___wmul@multiplicand+1
  8712  16E2  3193  235A  3196   	fcall	___wmul
  8713  16E5  0020               	movlb	0	; select bank0
  8714  16E6  0840               	movf	eval_poly@d,w
  8715  16E7  0770               	addwf	?___wmul,w
  8716  16E8  0084               	movwf	4
  8717  16E9  0841               	movf	eval_poly@d+1,w
  8718  16EA  3D71               	addwfc	?___wmul+1,w
  8719  16EB  0085               	movwf	5
  8720  16EC  3F00               	moviw [0]fsr0
  8721  16ED  00C4               	movwf	eval_poly@res
  8722  16EE  3F01               	moviw [1]fsr0
  8723  16EF  00C5               	movwf	eval_poly@res+1
  8724  16F0  3F02               	moviw [2]fsr0
  8725  16F1                     L4:	
  8726  16F1  00C6               	movwf	eval_poly@res+2
  8727  16F2  0842               	movf	eval_poly@n,w
  8728  16F3  0443               	iorwf	eval_poly@n+1,w
  8729  16F4  1903               	btfsc	3,2
  8730  16F5  2F32               	goto	l2522
  8731  16F6  30FF               	movlw	255
  8732  16F7  07C2               	addwf	eval_poly@n,f
  8733  16F8  30FF               	movlw	255
  8734  16F9  3DC3               	addwfc	eval_poly@n+1,f
  8735  16FA  0843               	movf	eval_poly@n+1,w
  8736  16FB  00F1               	movwf	___wmul@multiplier+1
  8737  16FC  0842               	movf	eval_poly@n,w
  8738  16FD  00F0               	movwf	___wmul@multiplier
  8739  16FE  3003               	movlw	3
  8740  16FF  00F2               	movwf	___wmul@multiplicand
  8741  1700  3000               	movlw	0
  8742  1701  00F3               	movwf	___wmul@multiplicand+1
  8743  1702  3193  235A  3196   	fcall	___wmul
  8744  1705  0020               	movlb	0	; select bank0
  8745  1706  0840               	movf	eval_poly@d,w
  8746  1707  0770               	addwf	?___wmul,w
  8747  1708  0084               	movwf	4
  8748  1709  0841               	movf	eval_poly@d+1,w
  8749  170A  3D71               	addwfc	?___wmul+1,w
  8750  170B  0085               	movwf	5
  8751  170C  3F00               	moviw [0]fsr0
  8752  170D  00B0               	movwf	___ftadd@f1
  8753  170E  3F01               	moviw [1]fsr0
  8754  170F  00B1               	movwf	___ftadd@f1+1
  8755  1710  3F02               	moviw [2]fsr0
  8756  1711  00B2               	movwf	___ftadd@f1+2
  8757  1712  0844               	movf	eval_poly@res,w
  8758  1713  00A0               	movwf	___ftmul@f1
  8759  1714  0845               	movf	eval_poly@res+1,w
  8760  1715  00A1               	movwf	___ftmul@f1+1
  8761  1716  0846               	movf	eval_poly@res+2,w
  8762  1717  00A2               	movwf	___ftmul@f1+2
  8763  1718  083D               	movf	eval_poly@x,w
  8764  1719  00A3               	movwf	___ftmul@f2
  8765  171A  083E               	movf	eval_poly@x+1,w
  8766  171B  00A4               	movwf	___ftmul@f2+1
  8767  171C  083F               	movf	eval_poly@x+2,w
  8768  171D  00A5               	movwf	___ftmul@f2+2
  8769  171E  318B  232F  3196   	fcall	___ftmul
  8770  1721  0020               	movlb	0	; select bank0
  8771  1722  0820               	movf	?___ftmul,w
  8772  1723  00B3               	movwf	___ftadd@f2
  8773  1724  0821               	movf	?___ftmul+1,w
  8774  1725  00B4               	movwf	___ftadd@f2+1
  8775  1726  0822               	movf	?___ftmul+2,w
  8776  1727  00B5               	movwf	___ftadd@f2+2
  8777  1728  3180  202A  3196   	fcall	___ftadd
  8778  172B  0020               	movlb	0	; select bank0
  8779  172C  0830               	movf	?___ftadd,w
  8780  172D  00C4               	movwf	eval_poly@res
  8781  172E  0831               	movf	?___ftadd+1,w
  8782  172F  00C5               	movwf	eval_poly@res+1
  8783  1730  0832               	movf	?___ftadd+2,w
  8784  1731  2EF1               	goto	L4
  8785  1732                     l2522:	
  8786  1732  0844               	movf	eval_poly@res,w
  8787  1733  00BD               	movwf	?_eval_poly
  8788  1734  0845               	movf	eval_poly@res+1,w
  8789  1735  00BE               	movwf	?_eval_poly+1
  8790  1736  0846               	movf	eval_poly@res+2,w
  8791  1737  00BF               	movwf	?_eval_poly+2
  8792  1738  0008               	return
  8793  1739                     __end_of_eval_poly:	
  8794                           
  8795                           	psect	text5
  8796  14EF                     __ptext5:	
  8797 ;; *************** function ___ftge *****************
  8798 ;; Defined at:
  8799 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
  8800 ;; Parameters:    Size  Location     Type
  8801 ;;  ff1             3    0[COMMON] float 
  8802 ;;  ff2             3    3[COMMON] float 
  8803 ;; Auto vars:     Size  Location     Type
  8804 ;;		None
  8805 ;; Return value:  Size  Location     Type
  8806 ;;		None               void
  8807 ;; Registers used:
  8808 ;;		wreg, status,2, status,0
  8809 ;; Tracked objects:
  8810 ;;		On entry : 0/0
  8811 ;;		On exit  : 0/0
  8812 ;;		Unchanged: 0/0
  8813 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8814 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8815 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8816 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8817 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8818 ;;Total ram usage:        9 bytes
  8819 ;; Hardware stack levels used:    1
  8820 ;; This function calls:
  8821 ;;		Nothing
  8822 ;; This function is called by:
  8823 ;;		_log
  8824 ;; This function uses a non-reentrant model
  8825 ;;
  8826                           
  8827                           
  8828                           ;psect for function ___ftge
  8829  14EF                     ___ftge:	
  8830                           
  8831                           ;incstack = 0
  8832                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  8833  14EF  1FF2               	btfss	___ftge@ff1+2,7
  8834  14F0  2D05               	goto	l2438
  8835  14F1  0970               	comf	___ftge@ff1,w
  8836  14F2  00F6               	movwf	??___ftge
  8837  14F3  0971               	comf	___ftge@ff1+1,w
  8838  14F4  00F7               	movwf	??___ftge+1
  8839  14F5  0972               	comf	___ftge@ff1+2,w
  8840  14F6  00F8               	movwf	??___ftge+2
  8841  14F7  0AF6               	incf	??___ftge,f
  8842  14F8  1903               	skipnz
  8843  14F9  0AF7               	incf	??___ftge+1,f
  8844  14FA  1903               	skipnz
  8845  14FB  0AF8               	incf	??___ftge+2,f
  8846  14FC  3000               	movlw	0
  8847  14FD  0776               	addwf	??___ftge,w
  8848  14FE  00F0               	movwf	___ftge@ff1
  8849  14FF  3000               	movlw	0
  8850  1500  3D77               	addwfc	??___ftge+1,w
  8851  1501  00F1               	movwf	___ftge@ff1+1
  8852  1502  3080               	movlw	128
  8853  1503  3D78               	addwfc	??___ftge+2,w
  8854  1504  00F2               	movwf	___ftge@ff1+2
  8855  1505                     l2438:	
  8856  1505  1FF5               	btfss	___ftge@ff2+2,7
  8857  1506  2D1B               	goto	l2442
  8858  1507  0973               	comf	___ftge@ff2,w
  8859  1508  00F6               	movwf	??___ftge
  8860  1509  0974               	comf	___ftge@ff2+1,w
  8861  150A  00F7               	movwf	??___ftge+1
  8862  150B  0975               	comf	___ftge@ff2+2,w
  8863  150C  00F8               	movwf	??___ftge+2
  8864  150D  0AF6               	incf	??___ftge,f
  8865  150E  1903               	skipnz
  8866  150F  0AF7               	incf	??___ftge+1,f
  8867  1510  1903               	skipnz
  8868  1511  0AF8               	incf	??___ftge+2,f
  8869  1512  3000               	movlw	0
  8870  1513  0776               	addwf	??___ftge,w
  8871  1514  00F3               	movwf	___ftge@ff2
  8872  1515  3000               	movlw	0
  8873  1516  3D77               	addwfc	??___ftge+1,w
  8874  1517  00F4               	movwf	___ftge@ff2+1
  8875  1518  3080               	movlw	128
  8876  1519  3D78               	addwfc	??___ftge+2,w
  8877  151A  00F5               	movwf	___ftge@ff2+2
  8878  151B                     l2442:	
  8879  151B  3080               	movlw	128
  8880  151C  06F2               	xorwf	___ftge@ff1+2,f
  8881  151D  3080               	movlw	128
  8882  151E  06F5               	xorwf	___ftge@ff2+2,f
  8883  151F  0875               	movf	___ftge@ff2+2,w
  8884  1520  0272               	subwf	___ftge@ff1+2,w
  8885  1521  1D03               	skipz
  8886  1522  0008               	return
  8887  1523  0874               	movf	___ftge@ff2+1,w
  8888  1524  0271               	subwf	___ftge@ff1+1,w
  8889  1525  1D03               	skipz
  8890  1526  0008               	return
  8891  1527  0873               	movf	___ftge@ff2,w
  8892  1528  0270               	subwf	___ftge@ff1,w
  8893  1529  0008               	return
  8894  152A                     __end_of___ftge:	
  8895                           
  8896                           	psect	text6
  8897  1375                     __ptext6:	
  8898 ;; *************** function ___ftsub *****************
  8899 ;; Defined at:
  8900 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
  8901 ;; Parameters:    Size  Location     Type
  8902 ;;  f2              3   29[BANK0 ] float 
  8903 ;;  f1              3   32[BANK0 ] float 
  8904 ;; Auto vars:     Size  Location     Type
  8905 ;;		None
  8906 ;; Return value:  Size  Location     Type
  8907 ;;                  3   29[BANK0 ] float 
  8908 ;; Registers used:
  8909 ;;		wreg, status,2, status,0, pclath, cstack
  8910 ;; Tracked objects:
  8911 ;;		On entry : 0/0
  8912 ;;		On exit  : 0/0
  8913 ;;		Unchanged: 0/0
  8914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8915 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8916 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8917 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8918 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8919 ;;Total ram usage:        6 bytes
  8920 ;; Hardware stack levels used:    1
  8921 ;; Hardware stack levels required when called:    2
  8922 ;; This function calls:
  8923 ;;		___ftadd
  8924 ;; This function is called by:
  8925 ;;		_tempCalc
  8926 ;; This function uses a non-reentrant model
  8927 ;;
  8928                           
  8929                           
  8930                           ;psect for function ___ftsub
  8931  1375                     ___ftsub:	
  8932                           
  8933                           ;incstack = 0
  8934                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  8935  1375  0020               	movlb	0	; select bank0
  8936  1376  083F               	movf	___ftsub@f2+2,w
  8937  1377  043E               	iorwf	___ftsub@f2+1,w
  8938  1378  043D               	iorwf	___ftsub@f2,w
  8939  1379  1903               	skipnz
  8940  137A  2B7D               	goto	l2854
  8941  137B  3080               	movlw	128
  8942  137C  06BF               	xorwf	___ftsub@f2+2,f
  8943  137D                     l2854:	
  8944  137D  0840               	movf	___ftsub@f1,w
  8945  137E  00B0               	movwf	___ftadd@f1
  8946  137F  0841               	movf	___ftsub@f1+1,w
  8947  1380  00B1               	movwf	___ftadd@f1+1
  8948  1381  0842               	movf	___ftsub@f1+2,w
  8949  1382  00B2               	movwf	___ftadd@f1+2
  8950  1383  083D               	movf	___ftsub@f2,w
  8951  1384  00B3               	movwf	___ftadd@f2
  8952  1385  083E               	movf	___ftsub@f2+1,w
  8953  1386  00B4               	movwf	___ftadd@f2+1
  8954  1387  083F               	movf	___ftsub@f2+2,w
  8955  1388  00B5               	movwf	___ftadd@f2+2
  8956  1389  3180  202A         	fcall	___ftadd
  8957  138B  0020               	movlb	0	; select bank0
  8958  138C  0830               	movf	?___ftadd,w
  8959  138D  00BD               	movwf	?___ftsub
  8960  138E  0831               	movf	?___ftadd+1,w
  8961  138F  00BE               	movwf	?___ftsub+1
  8962  1390  0832               	movf	?___ftadd+2,w
  8963  1391  00BF               	movwf	?___ftsub+2
  8964  1392  0008               	return
  8965  1393                     __end_of___ftsub:	
  8966                           
  8967                           	psect	text7
  8968  002A                     __ptext7:	
  8969 ;; *************** function ___ftadd *****************
  8970 ;; Defined at:
  8971 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
  8972 ;; Parameters:    Size  Location     Type
  8973 ;;  f1              3   16[BANK0 ] float 
  8974 ;;  f2              3   19[BANK0 ] float 
  8975 ;; Auto vars:     Size  Location     Type
  8976 ;;  exp1            1   28[BANK0 ] unsigned char 
  8977 ;;  exp2            1   27[BANK0 ] unsigned char 
  8978 ;;  sign            1   26[BANK0 ] unsigned char 
  8979 ;; Return value:  Size  Location     Type
  8980 ;;                  3   16[BANK0 ] float 
  8981 ;; Registers used:
  8982 ;;		wreg, status,2, status,0, pclath, cstack
  8983 ;; Tracked objects:
  8984 ;;		On entry : 0/0
  8985 ;;		On exit  : 0/0
  8986 ;;		Unchanged: 0/0
  8987 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8988 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8989 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8990 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8991 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8992 ;;Total ram usage:       13 bytes
  8993 ;; Hardware stack levels used:    1
  8994 ;; Hardware stack levels required when called:    1
  8995 ;; This function calls:
  8996 ;;		___ftpack
  8997 ;; This function is called by:
  8998 ;;		_tempCalc
  8999 ;;		___ftsub
  9000 ;;		_log
  9001 ;;		_eval_poly
  9002 ;; This function uses a non-reentrant model
  9003 ;;
  9004                           
  9005                           
  9006                           ;psect for function ___ftadd
  9007  002A                     ___ftadd:	
  9008                           
  9009                           ;incstack = 0
  9010                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  9011  002A  0020               	movlb	0	; select bank0
  9012  002B  0830               	movf	___ftadd@f1,w
  9013  002C  00B6               	movwf	??___ftadd
  9014  002D  0831               	movf	___ftadd@f1+1,w
  9015  002E  00B7               	movwf	??___ftadd+1
  9016  002F  0832               	movf	___ftadd@f1+2,w
  9017  0030  00B8               	movwf	??___ftadd+2
  9018  0031  1003               	clrc
  9019  0032  0D37               	rlf	??___ftadd+1,w
  9020  0033  0D38               	rlf	??___ftadd+2,w
  9021  0034  00B9               	movwf	??___ftadd+3
  9022  0035  0839               	movf	??___ftadd+3,w
  9023  0036  00BC               	movwf	___ftadd@exp1
  9024  0037  0833               	movf	___ftadd@f2,w
  9025  0038  00B6               	movwf	??___ftadd
  9026  0039  0834               	movf	___ftadd@f2+1,w
  9027  003A  00B7               	movwf	??___ftadd+1
  9028  003B  0835               	movf	___ftadd@f2+2,w
  9029  003C  00B8               	movwf	??___ftadd+2
  9030  003D  1003               	clrc
  9031  003E  0D37               	rlf	??___ftadd+1,w
  9032  003F  0D38               	rlf	??___ftadd+2,w
  9033  0040  00B9               	movwf	??___ftadd+3
  9034  0041  0839               	movf	??___ftadd+3,w
  9035  0042  00BB               	movwf	___ftadd@exp2
  9036  0043  083C               	movf	___ftadd@exp1,w
  9037  0044  1903               	btfsc	3,2
  9038  0045  2852               	goto	l2306
  9039  0046  083B               	movf	___ftadd@exp2,w
  9040  0047  023C               	subwf	___ftadd@exp1,w
  9041  0048  1803               	skipnc
  9042  0049  2859               	goto	l2310
  9043  004A  033C               	decf	___ftadd@exp1,w
  9044  004B  3AFF               	xorlw	255
  9045  004C  073B               	addwf	___ftadd@exp2,w
  9046  004D  00B6               	movwf	??___ftadd
  9047  004E  3019               	movlw	25
  9048  004F  0236               	subwf	??___ftadd,w
  9049  0050  1C03               	skipc
  9050  0051  2859               	goto	l2310
  9051  0052                     l2306:	
  9052  0052  0833               	movf	___ftadd@f2,w
  9053  0053  00B0               	movwf	?___ftadd
  9054  0054  0834               	movf	___ftadd@f2+1,w
  9055  0055  00B1               	movwf	?___ftadd+1
  9056  0056  0835               	movf	___ftadd@f2+2,w
  9057  0057  00B2               	movwf	?___ftadd+2
  9058  0058  0008               	return
  9059  0059                     l2310:	
  9060  0059  083B               	movf	___ftadd@exp2,w
  9061  005A  1903               	btfsc	3,2
  9062  005B  0008               	return
  9063  005C  083C               	movf	___ftadd@exp1,w
  9064  005D  023B               	subwf	___ftadd@exp2,w
  9065  005E  1803               	skipnc
  9066  005F  2868               	goto	l2316
  9067  0060  033B               	decf	___ftadd@exp2,w
  9068  0061  3AFF               	xorlw	255
  9069  0062  073C               	addwf	___ftadd@exp1,w
  9070  0063  00B6               	movwf	??___ftadd
  9071  0064  3019               	movlw	25
  9072  0065  0236               	subwf	??___ftadd,w
  9073  0066  1803               	btfsc	3,0
  9074  0067  0008               	return
  9075  0068                     l2316:	
  9076  0068  3006               	movlw	6
  9077  0069  00B6               	movwf	??___ftadd
  9078  006A  0836               	movf	??___ftadd,w
  9079  006B  00BA               	movwf	___ftadd@sign
  9080  006C  1BB2               	btfsc	___ftadd@f1+2,7
  9081  006D  17BA               	bsf	___ftadd@sign,7
  9082  006E  1BB5               	btfsc	___ftadd@f2+2,7
  9083  006F  173A               	bsf	___ftadd@sign,6
  9084  0070  17B1               	bsf	___ftadd@f1+1,7
  9085  0071  30FF               	movlw	255
  9086  0072  05B0               	andwf	___ftadd@f1,f
  9087  0073  30FF               	movlw	255
  9088  0074  05B1               	andwf	___ftadd@f1+1,f
  9089  0075  3000               	movlw	0
  9090  0076  05B2               	andwf	___ftadd@f1+2,f
  9091  0077  17B4               	bsf	___ftadd@f2+1,7
  9092  0078  30FF               	movlw	255
  9093  0079  05B3               	andwf	___ftadd@f2,f
  9094  007A  30FF               	movlw	255
  9095  007B  05B4               	andwf	___ftadd@f2+1,f
  9096  007C  3000               	movlw	0
  9097  007D  05B5               	andwf	___ftadd@f2+2,f
  9098  007E  083B               	movf	___ftadd@exp2,w
  9099  007F  023C               	subwf	___ftadd@exp1,w
  9100  0080  1803               	skipnc
  9101  0081  28A4               	goto	l2338
  9102  0082                     l2328:	
  9103  0082  3001               	movlw	1
  9104  0083                     u2285:	
  9105  0083  35B3               	lslf	___ftadd@f2,f
  9106  0084  0DB4               	rlf	___ftadd@f2+1,f
  9107  0085  0DB5               	rlf	___ftadd@f2+2,f
  9108  0086  0B89               	decfsz	9,f
  9109  0087  2883               	goto	u2285
  9110  0088  3001               	movlw	1
  9111  0089  02BB               	subwf	___ftadd@exp2,f
  9112  008A  083B               	movf	___ftadd@exp2,w
  9113  008B  063C               	xorwf	___ftadd@exp1,w
  9114  008C  1903               	skipnz
  9115  008D  289F               	goto	l2336
  9116  008E  3001               	movlw	1
  9117  008F  02BA               	subwf	___ftadd@sign,f
  9118  0090  083A               	movf	___ftadd@sign,w
  9119  0091  3907               	andlw	7
  9120  0092  1903               	btfsc	3,2
  9121  0093  289F               	goto	l2336
  9122  0094  2882               	goto	l2328
  9123  0095                     l2334:	
  9124  0095  3001               	movlw	1
  9125  0096                     u2315:	
  9126  0096  36B2               	lsrf	___ftadd@f1+2,f
  9127  0097  0CB1               	rrf	___ftadd@f1+1,f
  9128  0098  0CB0               	rrf	___ftadd@f1,f
  9129  0099  0B89               	decfsz	9,f
  9130  009A  2896               	goto	u2315
  9131  009B  3001               	movlw	1
  9132  009C  00B6               	movwf	??___ftadd
  9133  009D  0836               	movf	??___ftadd,w
  9134  009E  07BC               	addwf	___ftadd@exp1,f
  9135  009F                     l2336:	
  9136  009F  083C               	movf	___ftadd@exp1,w
  9137  00A0  063B               	xorwf	___ftadd@exp2,w
  9138  00A1  1903               	btfsc	3,2
  9139  00A2  28C9               	goto	l788
  9140  00A3  2895               	goto	l2334
  9141  00A4                     l2338:	
  9142  00A4  083C               	movf	___ftadd@exp1,w
  9143  00A5  023B               	subwf	___ftadd@exp2,w
  9144  00A6  1803               	skipnc
  9145  00A7  28C9               	goto	l788
  9146  00A8                     l2340:	
  9147  00A8  3001               	movlw	1
  9148  00A9                     u2345:	
  9149  00A9  35B0               	lslf	___ftadd@f1,f
  9150  00AA  0DB1               	rlf	___ftadd@f1+1,f
  9151  00AB  0DB2               	rlf	___ftadd@f1+2,f
  9152  00AC  0B89               	decfsz	9,f
  9153  00AD  28A9               	goto	u2345
  9154  00AE  3001               	movlw	1
  9155  00AF  02BC               	subwf	___ftadd@exp1,f
  9156  00B0  083B               	movf	___ftadd@exp2,w
  9157  00B1  063C               	xorwf	___ftadd@exp1,w
  9158  00B2  1903               	skipnz
  9159  00B3  28C5               	goto	l2348
  9160  00B4  3001               	movlw	1
  9161  00B5  02BA               	subwf	___ftadd@sign,f
  9162  00B6  083A               	movf	___ftadd@sign,w
  9163  00B7  3907               	andlw	7
  9164  00B8  1903               	btfsc	3,2
  9165  00B9  28C5               	goto	l2348
  9166  00BA  28A8               	goto	l2340
  9167  00BB                     l2346:	
  9168  00BB  3001               	movlw	1
  9169  00BC                     u2375:	
  9170  00BC  36B5               	lsrf	___ftadd@f2+2,f
  9171  00BD  0CB4               	rrf	___ftadd@f2+1,f
  9172  00BE  0CB3               	rrf	___ftadd@f2,f
  9173  00BF  0B89               	decfsz	9,f
  9174  00C0  28BC               	goto	u2375
  9175  00C1  3001               	movlw	1
  9176  00C2  00B6               	movwf	??___ftadd
  9177  00C3  0836               	movf	??___ftadd,w
  9178  00C4  07BB               	addwf	___ftadd@exp2,f
  9179  00C5                     l2348:	
  9180  00C5  083C               	movf	___ftadd@exp1,w
  9181  00C6  063B               	xorwf	___ftadd@exp2,w
  9182  00C7  1D03               	skipz
  9183  00C8  28BB               	goto	l2346
  9184  00C9                     l788:	
  9185  00C9  1FBA               	btfss	___ftadd@sign,7
  9186  00CA  28DB               	goto	l2352
  9187  00CB  30FF               	movlw	255
  9188  00CC  06B0               	xorwf	___ftadd@f1,f
  9189  00CD  30FF               	movlw	255
  9190  00CE  06B1               	xorwf	___ftadd@f1+1,f
  9191  00CF  30FF               	movlw	255
  9192  00D0  06B2               	xorwf	___ftadd@f1+2,f
  9193  00D1  3001               	movlw	1
  9194  00D2  07B0               	addwf	___ftadd@f1,f
  9195  00D3  3000               	movlw	0
  9196  00D4  1803               	skipnc
  9197  00D5  3001               	movlw	1
  9198  00D6  07B1               	addwf	___ftadd@f1+1,f
  9199  00D7  3000               	movlw	0
  9200  00D8  1803               	skipnc
  9201  00D9  3001               	movlw	1
  9202  00DA  07B2               	addwf	___ftadd@f1+2,f
  9203  00DB                     l2352:	
  9204  00DB  1F3A               	btfss	___ftadd@sign,6
  9205  00DC  28ED               	goto	l2356
  9206  00DD  30FF               	movlw	255
  9207  00DE  06B3               	xorwf	___ftadd@f2,f
  9208  00DF  30FF               	movlw	255
  9209  00E0  06B4               	xorwf	___ftadd@f2+1,f
  9210  00E1  30FF               	movlw	255
  9211  00E2  06B5               	xorwf	___ftadd@f2+2,f
  9212  00E3  3001               	movlw	1
  9213  00E4  07B3               	addwf	___ftadd@f2,f
  9214  00E5  3000               	movlw	0
  9215  00E6  1803               	skipnc
  9216  00E7  3001               	movlw	1
  9217  00E8  07B4               	addwf	___ftadd@f2+1,f
  9218  00E9  3000               	movlw	0
  9219  00EA  1803               	skipnc
  9220  00EB  3001               	movlw	1
  9221  00EC  07B5               	addwf	___ftadd@f2+2,f
  9222  00ED                     l2356:	
  9223  00ED  01BA               	clrf	___ftadd@sign
  9224  00EE  0830               	movf	___ftadd@f1,w
  9225  00EF  07B3               	addwf	___ftadd@f2,f
  9226  00F0  0831               	movf	___ftadd@f1+1,w
  9227  00F1  3DB4               	addwfc	___ftadd@f2+1,f
  9228  00F2  0832               	movf	___ftadd@f1+2,w
  9229  00F3  3DB5               	addwfc	___ftadd@f2+2,f
  9230  00F4  1FB5               	btfss	___ftadd@f2+2,7
  9231  00F5  2908               	goto	l2366
  9232  00F6  30FF               	movlw	255
  9233  00F7  06B3               	xorwf	___ftadd@f2,f
  9234  00F8  30FF               	movlw	255
  9235  00F9  06B4               	xorwf	___ftadd@f2+1,f
  9236  00FA  30FF               	movlw	255
  9237  00FB  06B5               	xorwf	___ftadd@f2+2,f
  9238  00FC  3001               	movlw	1
  9239  00FD  07B3               	addwf	___ftadd@f2,f
  9240  00FE  3000               	movlw	0
  9241  00FF  1803               	skipnc
  9242  0100  3001               	movlw	1
  9243  0101  07B4               	addwf	___ftadd@f2+1,f
  9244  0102  3000               	movlw	0
  9245  0103  1803               	skipnc
  9246  0104  3001               	movlw	1
  9247  0105  07B5               	addwf	___ftadd@f2+2,f
  9248  0106  01BA               	clrf	___ftadd@sign
  9249  0107  0ABA               	incf	___ftadd@sign,f
  9250  0108                     l2366:	
  9251  0108  0833               	movf	___ftadd@f2,w
  9252  0109  00F0               	movwf	___ftpack@arg
  9253  010A  0834               	movf	___ftadd@f2+1,w
  9254  010B  00F1               	movwf	___ftpack@arg+1
  9255  010C  0835               	movf	___ftadd@f2+2,w
  9256  010D  00F2               	movwf	___ftpack@arg+2
  9257  010E  083C               	movf	___ftadd@exp1,w
  9258  010F  00B6               	movwf	??___ftadd
  9259  0110  0836               	movf	??___ftadd,w
  9260  0111  00F3               	movwf	___ftpack@exp
  9261  0112  083A               	movf	___ftadd@sign,w
  9262  0113  00B7               	movwf	??___ftadd+1
  9263  0114  0837               	movf	??___ftadd+1,w
  9264  0115  00F4               	movwf	___ftpack@sign
  9265  0116  3197  279C         	fcall	___ftpack
  9266  0118  0870               	movf	?___ftpack,w
  9267  0119  0020               	movlb	0	; select bank0
  9268  011A  00B0               	movwf	?___ftadd
  9269  011B  0871               	movf	?___ftpack+1,w
  9270  011C  00B1               	movwf	?___ftadd+1
  9271  011D  0872               	movf	?___ftpack+2,w
  9272  011E  00B2               	movwf	?___ftadd+2
  9273  011F  0008               	return
  9274  0120                     __end_of___ftadd:	
  9275                           
  9276                           	psect	text8
  9277  0D83                     __ptext8:	
  9278 ;; *************** function _readIAnalog *****************
  9279 ;; Defined at:
  9280 ;;		line 77 in file "adc.c"
  9281 ;; Parameters:    Size  Location     Type
  9282 ;;  channel         2    6[BANK0 ] unsigned int 
  9283 ;; Auto vars:     Size  Location     Type
  9284 ;;  value           2   11[COMMON] int 
  9285 ;;  analog_chann    2    9[COMMON] unsigned int 
  9286 ;; Return value:  Size  Location     Type
  9287 ;;                  2    6[BANK0 ] int 
  9288 ;; Registers used:
  9289 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9290 ;; Tracked objects:
  9291 ;;		On entry : 0/0
  9292 ;;		On exit  : 0/0
  9293 ;;		Unchanged: 0/0
  9294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9295 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9296 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9297 ;;      Temps:          0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9298 ;;      Totals:         4      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9299 ;;Total ram usage:       24 bytes
  9300 ;; Hardware stack levels used:    1
  9301 ;; Hardware stack levels required when called:    1
  9302 ;; This function calls:
  9303 ;;		_ADCRead
  9304 ;;		___aldiv
  9305 ;;		___wmul
  9306 ;; This function is called by:
  9307 ;;		_main
  9308 ;; This function uses a non-reentrant model
  9309 ;;
  9310                           
  9311                           
  9312                           ;psect for function _readIAnalog
  9313  0D83                     _readIAnalog:	
  9314                           
  9315                           ;adc.c: 79: int16_t value;
  9316                           ;adc.c: 81: uint16_t analog_channel = channels[channel];
  9317                           
  9318                           ;incstack = 0
  9319                           ; Regs used in _readIAnalog: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9320  0D83  0020               	movlb	0	; select bank0
  9321  0D84  3526               	lslf	readIAnalog@channel,w
  9322  0D85  3E35               	addlw	(low (_channels| (0+256)))& (0+255)
  9323  0D86  0086               	movwf	6
  9324  0D87  3001               	movlw	1	; select bank2/3
  9325  0D88  0087               	movwf	7
  9326  0D89  3F40               	moviw [0]fsr1
  9327  0D8A  00F9               	movwf	readIAnalog@analog_channel
  9328  0D8B  3F41               	moviw [1]fsr1
  9329  0D8C  00FA               	movwf	readIAnalog@analog_channel+1
  9330                           
  9331                           ;adc.c: 83: value = ADCRead(analog_channel);
  9332  0D8D  0879               	movf	readIAnalog@analog_channel,w
  9333  0D8E  3193  2303  318D   	fcall	_ADCRead
  9334  0D91  0871               	movf	?_ADCRead+1,w
  9335  0D92  00FC               	movwf	readIAnalog@value+1
  9336  0D93  0870               	movf	?_ADCRead,w
  9337  0D94  00FB               	movwf	readIAnalog@value
  9338                           
  9339                           ;adc.c: 85: totals[channel] = totals[channel]-samples[channel][sampleIndex];
  9340  0D95  0020               	movlb	0	; select bank0
  9341  0D96  0826               	movf	readIAnalog@channel,w
  9342  0D97  00A8               	movwf	??_readIAnalog
  9343  0D98  3001               	movlw	1
  9344  0D99                     u3135:	
  9345  0D99  35A8               	lslf	??_readIAnalog,f
  9346  0D9A  3EFF               	addlw	-1
  9347  0D9B  1D03               	skipz
  9348  0D9C  2D99               	goto	u3135
  9349  0D9D  3528               	lslf	??_readIAnalog,w
  9350  0D9E  3E20               	addlw	(low (_totals| (0+256)))& (0+255)
  9351  0D9F  0086               	movwf	6
  9352  0DA0  3001               	movlw	1	; select bank2/3
  9353  0DA1  0087               	movwf	7
  9354  0DA2  3F40               	moviw [0]fsr1
  9355  0DA3  00A9               	movwf	??_readIAnalog+1
  9356  0DA4  3F41               	moviw [1]fsr1
  9357  0DA5  00AA               	movwf	??_readIAnalog+2
  9358  0DA6  3F42               	moviw [2]fsr1
  9359  0DA7  00AB               	movwf	??_readIAnalog+3
  9360  0DA8  3F43               	moviw [3]fsr1
  9361  0DA9  00AC               	movwf	??_readIAnalog+4
  9362  0DAA  0868               	movf	_sampleIndex+1,w
  9363  0DAB  00AE               	movwf	??_readIAnalog+6
  9364  0DAC  0867               	movf	_sampleIndex,w
  9365  0DAD  00AD               	movwf	??_readIAnalog+5
  9366  0DAE  35AD               	lslf	??_readIAnalog+5,f
  9367  0DAF  0DAE               	rlf	??_readIAnalog+6,f
  9368  0DB0  0827               	movf	readIAnalog@channel+1,w
  9369  0DB1  00F1               	movwf	___wmul@multiplier+1
  9370  0DB2  0826               	movf	readIAnalog@channel,w
  9371  0DB3  00F0               	movwf	___wmul@multiplier
  9372  0DB4  3064               	movlw	100
  9373  0DB5  00F2               	movwf	___wmul@multiplicand
  9374  0DB6  3000               	movlw	0
  9375  0DB7  00F3               	movwf	___wmul@multiplicand+1
  9376  0DB8  3193  235A  318D   	fcall	___wmul
  9377  0DBB  3060               	movlw	96
  9378  0DBC  0020               	movlb	0	; select bank0
  9379  0DBD  00AF               	movwf	??_readIAnalog+7
  9380  0DBE  3022               	movlw	34
  9381  0DBF  00B0               	movwf	??_readIAnalog+8
  9382  0DC0  0870               	movf	?___wmul,w
  9383  0DC1  072F               	addwf	??_readIAnalog+7,w
  9384  0DC2  00B1               	movwf	??_readIAnalog+9
  9385  0DC3  0871               	movf	?___wmul+1,w
  9386  0DC4  3D30               	addwfc	??_readIAnalog+8,w
  9387  0DC5  00B2               	movwf	??_readIAnalog+10
  9388  0DC6  082D               	movf	??_readIAnalog+5,w
  9389  0DC7  0731               	addwf	??_readIAnalog+9,w
  9390  0DC8  0086               	movwf	6
  9391  0DC9  082E               	movf	??_readIAnalog+6,w
  9392  0DCA  3D32               	addwfc	??_readIAnalog+10,w
  9393  0DCB  0087               	movwf	7
  9394  0DCC  3F40               	moviw [0]fsr1
  9395  0DCD  00B3               	movwf	??_readIAnalog+11
  9396  0DCE  3F41               	moviw [1]fsr1
  9397  0DCF  00B4               	movwf	??_readIAnalog+12
  9398  0DD0  0833               	movf	??_readIAnalog+11,w
  9399  0DD1  00B5               	movwf	??_readIAnalog+13
  9400  0DD2  0834               	movf	??_readIAnalog+12,w
  9401  0DD3  00B6               	movwf	??_readIAnalog+14
  9402  0DD4  3000               	movlw	0
  9403  0DD5  1BB6               	btfsc	??_readIAnalog+14,7
  9404  0DD6  30FF               	movlw	255
  9405  0DD7  00B7               	movwf	??_readIAnalog+15
  9406  0DD8  00B8               	movwf	??_readIAnalog+16
  9407  0DD9  09B5               	comf	??_readIAnalog+13,f
  9408  0DDA  09B6               	comf	??_readIAnalog+14,f
  9409  0DDB  09B7               	comf	??_readIAnalog+15,f
  9410  0DDC  09B8               	comf	??_readIAnalog+16,f
  9411  0DDD  0AB5               	incf	??_readIAnalog+13,f
  9412  0DDE  1903               	skipnz
  9413  0DDF  0AB6               	incf	??_readIAnalog+14,f
  9414  0DE0  1903               	skipnz
  9415  0DE1  0AB7               	incf	??_readIAnalog+15,f
  9416  0DE2  1903               	skipnz
  9417  0DE3  0AB8               	incf	??_readIAnalog+16,f
  9418  0DE4  0835               	movf	??_readIAnalog+13,w
  9419  0DE5  07A9               	addwf	??_readIAnalog+1,f
  9420  0DE6  0836               	movf	??_readIAnalog+14,w
  9421  0DE7  3DAA               	addwfc	??_readIAnalog+2,f
  9422  0DE8  0837               	movf	??_readIAnalog+15,w
  9423  0DE9  3DAB               	addwfc	??_readIAnalog+3,f
  9424  0DEA  0838               	movf	??_readIAnalog+16,w
  9425  0DEB  3DAC               	addwfc	??_readIAnalog+4,f
  9426  0DEC  0826               	movf	readIAnalog@channel,w
  9427  0DED  00B9               	movwf	??_readIAnalog+17
  9428  0DEE  3001               	movlw	1
  9429  0DEF                     u3145:	
  9430  0DEF  35B9               	lslf	??_readIAnalog+17,f
  9431  0DF0  3EFF               	addlw	-1
  9432  0DF1  1D03               	skipz
  9433  0DF2  2DEF               	goto	u3145
  9434  0DF3  3539               	lslf	??_readIAnalog+17,w
  9435  0DF4  3E20               	addlw	(low (_totals| (0+256)))& (0+255)
  9436  0DF5  0086               	movwf	6
  9437  0DF6  3001               	movlw	1	; select bank2/3
  9438  0DF7  0087               	movwf	7
  9439  0DF8  0829               	movf	??_readIAnalog+1,w
  9440  0DF9  3FC0               	movwi [0]fsr1
  9441  0DFA  082A               	movf	??_readIAnalog+2,w
  9442  0DFB  3FC1               	movwi [1]fsr1
  9443  0DFC  082B               	movf	??_readIAnalog+3,w
  9444  0DFD  3FC2               	movwi [2]fsr1
  9445  0DFE  082C               	movf	??_readIAnalog+4,w
  9446  0DFF  3FC3               	movwi [3]fsr1
  9447                           
  9448                           ;adc.c: 87: samples[channel][sampleIndex] = value;
  9449  0E00  0868               	movf	_sampleIndex+1,w
  9450  0E01  00A9               	movwf	??_readIAnalog+1
  9451  0E02  0867               	movf	_sampleIndex,w
  9452  0E03  00A8               	movwf	??_readIAnalog
  9453  0E04  35A8               	lslf	??_readIAnalog,f
  9454  0E05  0DA9               	rlf	??_readIAnalog+1,f
  9455  0E06  0827               	movf	readIAnalog@channel+1,w
  9456  0E07  00F1               	movwf	___wmul@multiplier+1
  9457  0E08  0826               	movf	readIAnalog@channel,w
  9458  0E09  00F0               	movwf	___wmul@multiplier
  9459  0E0A  3064               	movlw	100
  9460  0E0B  00F2               	movwf	___wmul@multiplicand
  9461  0E0C  3000               	movlw	0
  9462  0E0D  00F3               	movwf	___wmul@multiplicand+1
  9463  0E0E  3193  235A  318D   	fcall	___wmul
  9464  0E11  3060               	movlw	96
  9465  0E12  0020               	movlb	0	; select bank0
  9466  0E13  00AA               	movwf	??_readIAnalog+2
  9467  0E14  3022               	movlw	34
  9468  0E15  00AB               	movwf	??_readIAnalog+3
  9469  0E16  0870               	movf	?___wmul,w
  9470  0E17  072A               	addwf	??_readIAnalog+2,w
  9471  0E18  00AC               	movwf	??_readIAnalog+4
  9472  0E19  0871               	movf	?___wmul+1,w
  9473  0E1A  3D2B               	addwfc	??_readIAnalog+3,w
  9474  0E1B  00AD               	movwf	??_readIAnalog+5
  9475  0E1C  0828               	movf	??_readIAnalog,w
  9476  0E1D  072C               	addwf	??_readIAnalog+4,w
  9477  0E1E  0086               	movwf	6
  9478  0E1F  0829               	movf	??_readIAnalog+1,w
  9479  0E20  3D2D               	addwfc	??_readIAnalog+5,w
  9480  0E21  0087               	movwf	7
  9481  0E22  087B               	movf	readIAnalog@value,w
  9482  0E23  3FC0               	movwi [0]fsr1
  9483  0E24  087C               	movf	readIAnalog@value+1,w
  9484  0E25  3FC1               	movwi [1]fsr1
  9485                           
  9486                           ;adc.c: 89: totals[channel] = totals[channel]+samples[channel][sampleIndex];
  9487  0E26  0826               	movf	readIAnalog@channel,w
  9488  0E27  00A8               	movwf	??_readIAnalog
  9489  0E28  3001               	movlw	1
  9490  0E29                     u3155:	
  9491  0E29  35A8               	lslf	??_readIAnalog,f
  9492  0E2A  3EFF               	addlw	-1
  9493  0E2B  1D03               	skipz
  9494  0E2C  2E29               	goto	u3155
  9495  0E2D  3528               	lslf	??_readIAnalog,w
  9496  0E2E  3E20               	addlw	(low (_totals| (0+256)))& (0+255)
  9497  0E2F  0086               	movwf	6
  9498  0E30  3001               	movlw	1	; select bank2/3
  9499  0E31  0087               	movwf	7
  9500  0E32  3F40               	moviw [0]fsr1
  9501  0E33  00A9               	movwf	??_readIAnalog+1
  9502  0E34  3F41               	moviw [1]fsr1
  9503  0E35  00AA               	movwf	??_readIAnalog+2
  9504  0E36  3F42               	moviw [2]fsr1
  9505  0E37  00AB               	movwf	??_readIAnalog+3
  9506  0E38  3F43               	moviw [3]fsr1
  9507  0E39  00AC               	movwf	??_readIAnalog+4
  9508  0E3A  0868               	movf	_sampleIndex+1,w
  9509  0E3B  00AE               	movwf	??_readIAnalog+6
  9510  0E3C  0867               	movf	_sampleIndex,w
  9511  0E3D  00AD               	movwf	??_readIAnalog+5
  9512  0E3E  35AD               	lslf	??_readIAnalog+5,f
  9513  0E3F  0DAE               	rlf	??_readIAnalog+6,f
  9514  0E40  0827               	movf	readIAnalog@channel+1,w
  9515  0E41  00F1               	movwf	___wmul@multiplier+1
  9516  0E42  0826               	movf	readIAnalog@channel,w
  9517  0E43  00F0               	movwf	___wmul@multiplier
  9518  0E44  3064               	movlw	100
  9519  0E45  00F2               	movwf	___wmul@multiplicand
  9520  0E46  3000               	movlw	0
  9521  0E47  00F3               	movwf	___wmul@multiplicand+1
  9522  0E48  3193  235A  318D   	fcall	___wmul
  9523  0E4B  3060               	movlw	96
  9524  0E4C  0020               	movlb	0	; select bank0
  9525  0E4D  00AF               	movwf	??_readIAnalog+7
  9526  0E4E  3022               	movlw	34
  9527  0E4F  00B0               	movwf	??_readIAnalog+8
  9528  0E50  0870               	movf	?___wmul,w
  9529  0E51  072F               	addwf	??_readIAnalog+7,w
  9530  0E52  00B1               	movwf	??_readIAnalog+9
  9531  0E53  0871               	movf	?___wmul+1,w
  9532  0E54  3D30               	addwfc	??_readIAnalog+8,w
  9533  0E55  00B2               	movwf	??_readIAnalog+10
  9534  0E56  082D               	movf	??_readIAnalog+5,w
  9535  0E57  0731               	addwf	??_readIAnalog+9,w
  9536  0E58  0086               	movwf	6
  9537  0E59  082E               	movf	??_readIAnalog+6,w
  9538  0E5A  3D32               	addwfc	??_readIAnalog+10,w
  9539  0E5B  0087               	movwf	7
  9540  0E5C  3F40               	moviw [0]fsr1
  9541  0E5D  00B3               	movwf	??_readIAnalog+11
  9542  0E5E  3F41               	moviw [1]fsr1
  9543  0E5F  00B4               	movwf	??_readIAnalog+12
  9544  0E60  0833               	movf	??_readIAnalog+11,w
  9545  0E61  00B5               	movwf	??_readIAnalog+13
  9546  0E62  0834               	movf	??_readIAnalog+12,w
  9547  0E63  00B6               	movwf	??_readIAnalog+14
  9548  0E64  3000               	movlw	0
  9549  0E65  1BB6               	btfsc	??_readIAnalog+14,7
  9550  0E66  30FF               	movlw	255
  9551  0E67  00B7               	movwf	??_readIAnalog+15
  9552  0E68  00B8               	movwf	??_readIAnalog+16
  9553  0E69  0835               	movf	??_readIAnalog+13,w
  9554  0E6A  07A9               	addwf	??_readIAnalog+1,f
  9555  0E6B  0836               	movf	??_readIAnalog+14,w
  9556  0E6C  3DAA               	addwfc	??_readIAnalog+2,f
  9557  0E6D  0837               	movf	??_readIAnalog+15,w
  9558  0E6E  3DAB               	addwfc	??_readIAnalog+3,f
  9559  0E6F  0838               	movf	??_readIAnalog+16,w
  9560  0E70  3DAC               	addwfc	??_readIAnalog+4,f
  9561  0E71  0826               	movf	readIAnalog@channel,w
  9562  0E72  00B9               	movwf	??_readIAnalog+17
  9563  0E73  3001               	movlw	1
  9564  0E74                     u3165:	
  9565  0E74  35B9               	lslf	??_readIAnalog+17,f
  9566  0E75  3EFF               	addlw	-1
  9567  0E76  1D03               	skipz
  9568  0E77  2E74               	goto	u3165
  9569  0E78  3539               	lslf	??_readIAnalog+17,w
  9570  0E79  3E20               	addlw	(low (_totals| (0+256)))& (0+255)
  9571  0E7A  0086               	movwf	6
  9572  0E7B  3001               	movlw	1	; select bank2/3
  9573  0E7C  0087               	movwf	7
  9574  0E7D  0829               	movf	??_readIAnalog+1,w
  9575  0E7E  3FC0               	movwi [0]fsr1
  9576  0E7F  082A               	movf	??_readIAnalog+2,w
  9577  0E80  3FC1               	movwi [1]fsr1
  9578  0E81  082B               	movf	??_readIAnalog+3,w
  9579  0E82  3FC2               	movwi [2]fsr1
  9580  0E83  082C               	movf	??_readIAnalog+4,w
  9581  0E84  3FC3               	movwi [3]fsr1
  9582                           
  9583                           ;adc.c: 91: if(channel>=(4-1))
  9584  0E85  3000               	movlw	0
  9585  0E86  0227               	subwf	readIAnalog@channel+1,w
  9586  0E87  3003               	movlw	3
  9587  0E88  1903               	skipnz
  9588  0E89  0226               	subwf	readIAnalog@channel,w
  9589  0E8A  1C03               	skipc
  9590  0E8B  2E99               	goto	l2894
  9591                           
  9592                           ;adc.c: 92: {
  9593                           ;adc.c: 93: sampleIndex+=1;
  9594  0E8C  3001               	movlw	1
  9595  0E8D  07E7               	addwf	_sampleIndex,f
  9596  0E8E  3000               	movlw	0
  9597  0E8F  3DE8               	addwfc	_sampleIndex+1,f
  9598                           
  9599                           ;adc.c: 94: if(sampleIndex >= 50)sampleIndex = 0;
  9600  0E90  3000               	movlw	0
  9601  0E91  0268               	subwf	_sampleIndex+1,w
  9602  0E92  3032               	movlw	50
  9603  0E93  1903               	skipnz
  9604  0E94  0267               	subwf	_sampleIndex,w
  9605  0E95  1C03               	skipc
  9606  0E96  2E99               	goto	l2894
  9607  0E97  01E7               	clrf	_sampleIndex
  9608  0E98  01E8               	clrf	_sampleIndex+1
  9609  0E99                     l2894:	
  9610                           
  9611                           ;adc.c: 95: }
  9612                           ;adc.c: 97: value = totals[channel]/50;
  9613  0E99  3000               	movlw	0
  9614  0E9A  00F3               	movwf	___aldiv@divisor+3
  9615  0E9B  3000               	movlw	0
  9616  0E9C  00F2               	movwf	___aldiv@divisor+2
  9617  0E9D  3000               	movlw	0
  9618  0E9E  00F1               	movwf	___aldiv@divisor+1
  9619  0E9F  3032               	movlw	50
  9620  0EA0  00F0               	movwf	___aldiv@divisor
  9621  0EA1  0826               	movf	readIAnalog@channel,w
  9622  0EA2  00A8               	movwf	??_readIAnalog
  9623  0EA3  3001               	movlw	1
  9624  0EA4                     u3195:	
  9625  0EA4  35A8               	lslf	??_readIAnalog,f
  9626  0EA5  3EFF               	addlw	-1
  9627  0EA6  1D03               	skipz
  9628  0EA7  2EA4               	goto	u3195
  9629  0EA8  3528               	lslf	??_readIAnalog,w
  9630  0EA9  3E20               	addlw	(low (_totals| (0+256)))& (0+255)
  9631  0EAA  0086               	movwf	6
  9632  0EAB  3001               	movlw	1	; select bank2/3
  9633  0EAC  0087               	movwf	7
  9634  0EAD  3F40               	moviw [0]fsr1
  9635  0EAE  00F4               	movwf	___aldiv@dividend
  9636  0EAF  3F41               	moviw [1]fsr1
  9637  0EB0  00F5               	movwf	___aldiv@dividend+1
  9638  0EB1  3F42               	moviw [2]fsr1
  9639  0EB2  00F6               	movwf	___aldiv@dividend+2
  9640  0EB3  3F43               	moviw [3]fsr1
  9641  0EB4  00F7               	movwf	___aldiv@dividend+3
  9642  0EB5  3188  20CD         	fcall	___aldiv
  9643  0EB7  0871               	movf	?___aldiv+1,w
  9644  0EB8  00FC               	movwf	readIAnalog@value+1
  9645  0EB9  0870               	movf	?___aldiv,w
  9646  0EBA  00FB               	movwf	readIAnalog@value
  9647                           
  9648                           ;adc.c: 99: return value;
  9649  0EBB  087C               	movf	readIAnalog@value+1,w
  9650  0EBC  0020               	movlb	0	; select bank0
  9651  0EBD  00A7               	movwf	?_readIAnalog+1
  9652  0EBE  087B               	movf	readIAnalog@value,w
  9653  0EBF  00A6               	movwf	?_readIAnalog
  9654  0EC0  0008               	return
  9655  0EC1                     __end_of_readIAnalog:	
  9656                           
  9657                           	psect	text9
  9658  08CD                     __ptext9:	
  9659 ;; *************** function ___aldiv *****************
  9660 ;; Defined at:
  9661 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\aldiv.c"
  9662 ;; Parameters:    Size  Location     Type
  9663 ;;  divisor         4    0[COMMON] long 
  9664 ;;  dividend        4    4[COMMON] long 
  9665 ;; Auto vars:     Size  Location     Type
  9666 ;;  quotient        4    2[BANK0 ] long 
  9667 ;;  sign            1    1[BANK0 ] unsigned char 
  9668 ;;  counter         1    0[BANK0 ] unsigned char 
  9669 ;; Return value:  Size  Location     Type
  9670 ;;                  4    0[COMMON] long 
  9671 ;; Registers used:
  9672 ;;		wreg, status,2, status,0
  9673 ;; Tracked objects:
  9674 ;;		On entry : 0/0
  9675 ;;		On exit  : 0/0
  9676 ;;		Unchanged: 0/0
  9677 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9678 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9679 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9680 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9681 ;;      Totals:         9       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9682 ;;Total ram usage:       15 bytes
  9683 ;; Hardware stack levels used:    1
  9684 ;; This function calls:
  9685 ;;		Nothing
  9686 ;; This function is called by:
  9687 ;;		_readIAnalog
  9688 ;; This function uses a non-reentrant model
  9689 ;;
  9690                           
  9691                           
  9692                           ;psect for function ___aldiv
  9693  08CD                     ___aldiv:	
  9694                           
  9695                           ;incstack = 0
  9696                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  9697  08CD  0020               	movlb	0	; select bank0
  9698  08CE  01A1               	clrf	___aldiv@sign
  9699  08CF  1FF3               	btfss	___aldiv@divisor+3,7
  9700  08D0  28DE               	goto	l651
  9701  08D1  09F0               	comf	___aldiv@divisor,f
  9702  08D2  09F1               	comf	___aldiv@divisor+1,f
  9703  08D3  09F2               	comf	___aldiv@divisor+2,f
  9704  08D4  09F3               	comf	___aldiv@divisor+3,f
  9705  08D5  0AF0               	incf	___aldiv@divisor,f
  9706  08D6  1903               	skipnz
  9707  08D7  0AF1               	incf	___aldiv@divisor+1,f
  9708  08D8  1903               	skipnz
  9709  08D9  0AF2               	incf	___aldiv@divisor+2,f
  9710  08DA  1903               	skipnz
  9711  08DB  0AF3               	incf	___aldiv@divisor+3,f
  9712  08DC  01A1               	clrf	___aldiv@sign
  9713  08DD  0AA1               	incf	___aldiv@sign,f
  9714  08DE                     l651:	
  9715  08DE  1FF7               	btfss	___aldiv@dividend+3,7
  9716  08DF  28EF               	goto	l2734
  9717  08E0  09F4               	comf	___aldiv@dividend,f
  9718  08E1  09F5               	comf	___aldiv@dividend+1,f
  9719  08E2  09F6               	comf	___aldiv@dividend+2,f
  9720  08E3  09F7               	comf	___aldiv@dividend+3,f
  9721  08E4  0AF4               	incf	___aldiv@dividend,f
  9722  08E5  1903               	skipnz
  9723  08E6  0AF5               	incf	___aldiv@dividend+1,f
  9724  08E7  1903               	skipnz
  9725  08E8  0AF6               	incf	___aldiv@dividend+2,f
  9726  08E9  1903               	skipnz
  9727  08EA  0AF7               	incf	___aldiv@dividend+3,f
  9728  08EB  3001               	movlw	1
  9729  08EC  00F8               	movwf	??___aldiv
  9730  08ED  0878               	movf	??___aldiv,w
  9731  08EE  06A1               	xorwf	___aldiv@sign,f
  9732  08EF                     l2734:	
  9733  08EF  3000               	movlw	0
  9734  08F0  00A5               	movwf	___aldiv@quotient+3
  9735  08F1  3000               	movlw	0
  9736  08F2  00A4               	movwf	___aldiv@quotient+2
  9737  08F3  3000               	movlw	0
  9738  08F4  00A3               	movwf	___aldiv@quotient+1
  9739  08F5  3000               	movlw	0
  9740  08F6  00A2               	movwf	___aldiv@quotient
  9741  08F7  0873               	movf	___aldiv@divisor+3,w
  9742  08F8  0472               	iorwf	___aldiv@divisor+2,w
  9743  08F9  0471               	iorwf	___aldiv@divisor+1,w
  9744  08FA  0470               	iorwf	___aldiv@divisor,w
  9745  08FB  1903               	skipnz
  9746  08FC  2938               	goto	l2756
  9747  08FD  01A0               	clrf	___aldiv@counter
  9748  08FE  0AA0               	incf	___aldiv@counter,f
  9749  08FF                     l2742:	
  9750  08FF  1BF3               	btfsc	___aldiv@divisor+3,7
  9751  0900  290D               	goto	l2744
  9752  0901  3001               	movlw	1
  9753  0902                     u2815:	
  9754  0902  35F0               	lslf	___aldiv@divisor,f
  9755  0903  0DF1               	rlf	___aldiv@divisor+1,f
  9756  0904  0DF2               	rlf	___aldiv@divisor+2,f
  9757  0905  0DF3               	rlf	___aldiv@divisor+3,f
  9758  0906  0B89               	decfsz	9,f
  9759  0907  2902               	goto	u2815
  9760  0908  3001               	movlw	1
  9761  0909  00F8               	movwf	??___aldiv
  9762  090A  0878               	movf	??___aldiv,w
  9763  090B  07A0               	addwf	___aldiv@counter,f
  9764  090C  28FF               	goto	l2742
  9765  090D                     l2744:	
  9766  090D  3001               	movlw	1
  9767  090E                     u2835:	
  9768  090E  35A2               	lslf	___aldiv@quotient,f
  9769  090F  0DA3               	rlf	___aldiv@quotient+1,f
  9770  0910  0DA4               	rlf	___aldiv@quotient+2,f
  9771  0911  0DA5               	rlf	___aldiv@quotient+3,f
  9772  0912  0B89               	decfsz	9,f
  9773  0913  290E               	goto	u2835
  9774  0914  0873               	movf	___aldiv@divisor+3,w
  9775  0915  0277               	subwf	___aldiv@dividend+3,w
  9776  0916  1D03               	skipz
  9777  0917  2922               	goto	u2845
  9778  0918  0872               	movf	___aldiv@divisor+2,w
  9779  0919  0276               	subwf	___aldiv@dividend+2,w
  9780  091A  1D03               	skipz
  9781  091B  2922               	goto	u2845
  9782  091C  0871               	movf	___aldiv@divisor+1,w
  9783  091D  0275               	subwf	___aldiv@dividend+1,w
  9784  091E  1D03               	skipz
  9785  091F  2922               	goto	u2845
  9786  0920  0870               	movf	___aldiv@divisor,w
  9787  0921  0274               	subwf	___aldiv@dividend,w
  9788  0922                     u2845:	
  9789  0922  1C03               	skipc
  9790  0923  292D               	goto	l2752
  9791  0924  0870               	movf	___aldiv@divisor,w
  9792  0925  02F4               	subwf	___aldiv@dividend,f
  9793  0926  0871               	movf	___aldiv@divisor+1,w
  9794  0927  3BF5               	subwfb	___aldiv@dividend+1,f
  9795  0928  0872               	movf	___aldiv@divisor+2,w
  9796  0929  3BF6               	subwfb	___aldiv@dividend+2,f
  9797  092A  0873               	movf	___aldiv@divisor+3,w
  9798  092B  3BF7               	subwfb	___aldiv@dividend+3,f
  9799  092C  1422               	bsf	___aldiv@quotient,0
  9800  092D                     l2752:	
  9801  092D  3001               	movlw	1
  9802  092E                     u2855:	
  9803  092E  36F3               	lsrf	___aldiv@divisor+3,f
  9804  092F  0CF2               	rrf	___aldiv@divisor+2,f
  9805  0930  0CF1               	rrf	___aldiv@divisor+1,f
  9806  0931  0CF0               	rrf	___aldiv@divisor,f
  9807  0932  0B89               	decfsz	9,f
  9808  0933  292E               	goto	u2855
  9809  0934  3001               	movlw	1
  9810  0935  02A0               	subwf	___aldiv@counter,f
  9811  0936  1D03               	btfss	3,2
  9812  0937  290D               	goto	l2744
  9813  0938                     l2756:	
  9814  0938  0821               	movf	___aldiv@sign,w
  9815  0939  1903               	btfsc	3,2
  9816  093A  2946               	goto	l2760
  9817  093B  09A2               	comf	___aldiv@quotient,f
  9818  093C  09A3               	comf	___aldiv@quotient+1,f
  9819  093D  09A4               	comf	___aldiv@quotient+2,f
  9820  093E  09A5               	comf	___aldiv@quotient+3,f
  9821  093F  0AA2               	incf	___aldiv@quotient,f
  9822  0940  1903               	skipnz
  9823  0941  0AA3               	incf	___aldiv@quotient+1,f
  9824  0942  1903               	skipnz
  9825  0943  0AA4               	incf	___aldiv@quotient+2,f
  9826  0944  1903               	skipnz
  9827  0945  0AA5               	incf	___aldiv@quotient+3,f
  9828  0946                     l2760:	
  9829  0946  0825               	movf	___aldiv@quotient+3,w
  9830  0947  00F3               	movwf	?___aldiv+3
  9831  0948  0824               	movf	___aldiv@quotient+2,w
  9832  0949  00F2               	movwf	?___aldiv+2
  9833  094A  0823               	movf	___aldiv@quotient+1,w
  9834  094B  00F1               	movwf	?___aldiv+1
  9835  094C  0822               	movf	___aldiv@quotient,w
  9836  094D  00F0               	movwf	?___aldiv
  9837  094E  0008               	return
  9838  094F                     __end_of___aldiv:	
  9839                           
  9840                           	psect	text10
  9841  084B                     __ptext10:	
  9842 ;; *************** function _readButton *****************
  9843 ;; Defined at:
  9844 ;;		line 9 in file "buttons.c"
  9845 ;; Parameters:    Size  Location     Type
  9846 ;;		None
  9847 ;; Auto vars:     Size  Location     Type
  9848 ;;		None
  9849 ;; Return value:  Size  Location     Type
  9850 ;;                  1    wreg      unsigned char 
  9851 ;; Registers used:
  9852 ;;		wreg, status,2, status,0, pclath, cstack
  9853 ;; Tracked objects:
  9854 ;;		On entry : 0/0
  9855 ;;		On exit  : 0/0
  9856 ;;		Unchanged: 0/0
  9857 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9858 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9859 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9860 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9861 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9862 ;;Total ram usage:        2 bytes
  9863 ;; Hardware stack levels used:    1
  9864 ;; Hardware stack levels required when called:    1
  9865 ;; This function calls:
  9866 ;;		_ADCRead
  9867 ;; This function is called by:
  9868 ;;		_main
  9869 ;; This function uses a non-reentrant model
  9870 ;;
  9871                           
  9872                           
  9873                           ;psect for function _readButton
  9874  084B                     _readButton:	
  9875                           
  9876                           ;buttons.c: 11: readButtons=ADCRead(11);
  9877                           
  9878                           ;incstack = 0
  9879                           ; Regs used in _readButton: [wreg+status,2+status,0+pclath+cstack]
  9880  084B  300B               	movlw	11
  9881  084C  3193  2303  3188   	fcall	_ADCRead
  9882  084F  0871               	movf	?_ADCRead+1,w
  9883  0850  0020               	movlb	0	; select bank0
  9884  0851  00E0               	movwf	_readButtons+1
  9885  0852  0870               	movf	?_ADCRead,w
  9886  0853  00DF               	movwf	_readButtons
  9887                           
  9888                           ;buttons.c: 13: if(readButtons>=365&&readButtons<405)
  9889  0854  0860               	movf	_readButtons+1,w
  9890  0855  3A80               	xorlw	128
  9891  0856  00F4               	movwf	??_readButton
  9892  0857  3081               	movlw	129
  9893  0858  0274               	subwf	??_readButton,w
  9894  0859  1D03               	skipz
  9895  085A  285D               	goto	u3415
  9896  085B  306D               	movlw	109
  9897  085C  025F               	subwf	_readButtons,w
  9898  085D                     u3415:	
  9899  085D  1C03               	skipc
  9900  085E  286F               	goto	l2982
  9901  085F  0020               	movlb	0	; select bank0
  9902  0860  0860               	movf	_readButtons+1,w
  9903  0861  3A80               	xorlw	128
  9904  0862  00F4               	movwf	??_readButton
  9905  0863  3081               	movlw	129
  9906  0864  0274               	subwf	??_readButton,w
  9907  0865  1D03               	skipz
  9908  0866  2869               	goto	u3425
  9909  0867  3095               	movlw	149
  9910  0868  025F               	subwf	_readButtons,w
  9911  0869                     u3425:	
  9912  0869  1803               	skipnc
  9913  086A  286F               	goto	l2982
  9914                           
  9915                           ;buttons.c: 14: {
  9916                           ;buttons.c: 15: button=1;
  9917  086B  0020               	movlb	0	; select bank0
  9918  086C  01EB               	clrf	_button
  9919  086D  0AEB               	incf	_button,f
  9920                           
  9921                           ;buttons.c: 16: }
  9922  086E  289D               	goto	l2994
  9923  086F                     l2982:	
  9924                           
  9925                           ;buttons.c: 18: else if(readButtons>=535&&readButtons<590)
  9926  086F  0020               	movlb	0	; select bank0
  9927  0870  0860               	movf	_readButtons+1,w
  9928  0871  3A80               	xorlw	128
  9929  0872  00F4               	movwf	??_readButton
  9930  0873  3082               	movlw	130
  9931  0874  0274               	subwf	??_readButton,w
  9932  0875  1D03               	skipz
  9933  0876  2879               	goto	u3435
  9934  0877  3017               	movlw	23
  9935  0878  025F               	subwf	_readButtons,w
  9936  0879                     u3435:	
  9937  0879  1C03               	skipc
  9938  087A  2889               	goto	l2988
  9939  087B  0020               	movlb	0	; select bank0
  9940  087C  0860               	movf	_readButtons+1,w
  9941  087D  3A80               	xorlw	128
  9942  087E  00F4               	movwf	??_readButton
  9943  087F  3082               	movlw	130
  9944  0880  0274               	subwf	??_readButton,w
  9945  0881  1D03               	skipz
  9946  0882  2885               	goto	u3445
  9947  0883  304E               	movlw	78
  9948  0884  025F               	subwf	_readButtons,w
  9949  0885                     u3445:	
  9950  0885  1803               	skipnc
  9951  0886  2889               	goto	l2988
  9952                           
  9953                           ;buttons.c: 19: {
  9954                           ;buttons.c: 20: button=2;
  9955  0887  3002               	movlw	2
  9956  0888  2896               	goto	L6
  9957  0889                     l2988:	
  9958                           ;buttons.c: 21: }
  9959                           
  9960                           
  9961                           ;buttons.c: 23: else if(readButtons>745)
  9962  0889  0020               	movlb	0	; select bank0
  9963  088A  0860               	movf	_readButtons+1,w
  9964  088B  3A80               	xorlw	128
  9965  088C  00F4               	movwf	??_readButton
  9966  088D  3082               	movlw	130
  9967  088E  0274               	subwf	??_readButton,w
  9968  088F  1D03               	skipz
  9969  0890  2893               	goto	u3455
  9970  0891  30EA               	movlw	234
  9971  0892  025F               	subwf	_readButtons,w
  9972  0893                     u3455:	
  9973  0893  1C03               	skipc
  9974  0894  289B               	goto	l2992
  9975                           
  9976                           ;buttons.c: 24: {
  9977                           ;buttons.c: 25: button=3;
  9978  0895  3003               	movlw	3
  9979  0896                     L6:	
  9980  0896  00F4               	movwf	??_readButton
  9981  0897  0874               	movf	??_readButton,w
  9982  0898  0020               	movlb	0	; select bank0
  9983  0899  00EB               	movwf	_button
  9984                           
  9985                           ;buttons.c: 26: }
  9986  089A  289D               	goto	l2994
  9987  089B                     l2992:	
  9988                           
  9989                           ;buttons.c: 28: else
  9990                           ;buttons.c: 29: {
  9991                           ;buttons.c: 30: button=0;
  9992  089B  0020               	movlb	0	; select bank0
  9993  089C  01EB               	clrf	_button
  9994  089D                     l2994:	
  9995                           
  9996                           ;buttons.c: 31: }
  9997                           ;buttons.c: 33: if (button!=0)
  9998  089D  086B               	movf	_button,w
  9999  089E  1903               	btfsc	3,2
 10000  089F  28CA               	goto	l3014
 10001                           
 10002                           ;buttons.c: 34: {
 10003                           ;buttons.c: 35: if (button!=lastButton)
 10004  08A0  086B               	movf	_button,w
 10005  08A1  066A               	xorwf	_lastButton,w
 10006  08A2  1903               	skipnz
 10007  08A3  28A9               	goto	l3002
 10008                           
 10009                           ;buttons.c: 36: {
 10010                           ;buttons.c: 37: lastButton=button;
 10011  08A4  086B               	movf	_button,w
 10012  08A5  00F4               	movwf	??_readButton
 10013  08A6  0874               	movf	??_readButton,w
 10014  08A7  00EA               	movwf	_lastButton
 10015  08A8  28CA               	goto	l3014
 10016  08A9                     l3002:	
 10017                           ;buttons.c: 39: }
 10018                           
 10019                           ;buttons.c: 38: j=0;
 10020                           
 10021                           
 10022                           ;buttons.c: 40: else
 10023                           ;buttons.c: 41: {
 10024                           ;buttons.c: 42: j+=1;
 10025  08A9  3001               	movlw	1
 10026  08AA  00F4               	movwf	??_readButton
 10027  08AB  0874               	movf	??_readButton,w
 10028  08AC  07E9               	addwf	_j,f
 10029                           
 10030                           ;buttons.c: 44: if(j==1)
 10031  08AD  0369               	decf	_j,w
 10032  08AE  1D03               	btfss	3,2
 10033  08AF  28B2               	goto	l3008
 10034                           
 10035                           ;buttons.c: 45: {
 10036                           ;buttons.c: 46: return (lastButton);
 10037  08B0  086A               	movf	_lastButton,w
 10038  08B1  0008               	return
 10039  08B2                     l3008:	
 10040                           
 10041                           ;buttons.c: 47: }
 10042                           ;buttons.c: 49: if (j>10)
 10043  08B2  0869               	movf	_j,w
 10044  08B3  3A80               	xorlw	128
 10045  08B4  3E75               	addlw	-139
 10046  08B5  1C03               	skipc
 10047  08B6  28CB               	goto	l3016
 10048                           
 10049                           ;buttons.c: 50: {
 10050                           ;buttons.c: 51: _delay((unsigned long)((25)*(32000000/4000.0)));
 10051  08B7  3002               	movlw	2
 10052  08B8  00F5               	movwf	??_readButton+1
 10053  08B9  3004               	movlw	4
 10054  08BA  00F4               	movwf	??_readButton
 10055  08BB  30BA               	movlw	186
 10056  08BC                     u3997:	
 10057  08BC  0B89               	decfsz	9,f
 10058  08BD  28BC               	goto	u3997
 10059  08BE  0BF4               	decfsz	??_readButton,f
 10060  08BF  28BC               	goto	u3997
 10061  08C0  0BF5               	decfsz	??_readButton+1,f
 10062  08C1  28BC               	goto	u3997
 10063  08C2  3200               	nop2
 10064                           
 10065                           ;buttons.c: 52: j=10;
 10066  08C3  300A               	movlw	10
 10067  08C4  00F4               	movwf	??_readButton
 10068  08C5  0874               	movf	??_readButton,w
 10069  08C6  0020               	movlb	0	; select bank0
 10070  08C7  00E9               	movwf	_j
 10071                           
 10072                           ;buttons.c: 53: return (lastButton);
 10073  08C8  086A               	movf	_lastButton,w
 10074  08C9  0008               	return
 10075  08CA                     l3014:	
 10076                           ;buttons.c: 54: }
 10077                           ;buttons.c: 55: }
 10078                           ;buttons.c: 56: goto end;
 10079                           
 10080                           
 10081                           ;buttons.c: 57: }
 10082                           ;buttons.c: 59: j=0;
 10083  08CA  01E9               	clrf	_j
 10084  08CB                     l3016:	
 10085                           ;buttons.c: 61: end:
 10086                           
 10087                           
 10088                           ;buttons.c: 63: return (0);
 10089  08CB  3000               	movlw	0
 10090  08CC  0008               	return
 10091  08CD                     __end_of_readButton:	
 10092                           
 10093                           	psect	text11
 10094  1303                     __ptext11:	
 10095 ;; *************** function _ADCRead *****************
 10096 ;; Defined at:
 10097 ;;		line 21 in file "adc.c"
 10098 ;; Parameters:    Size  Location     Type
 10099 ;;  channel         1    wreg     enum E14259
 10100 ;; Auto vars:     Size  Location     Type
 10101 ;;  channel         1    3[COMMON] enum E14259
 10102 ;; Return value:  Size  Location     Type
 10103 ;;                  2    0[COMMON] int 
 10104 ;; Registers used:
 10105 ;;		wreg
 10106 ;; Tracked objects:
 10107 ;;		On entry : 0/0
 10108 ;;		On exit  : 0/0
 10109 ;;		Unchanged: 0/0
 10110 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10111 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10112 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10113 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10114 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10115 ;;Total ram usage:        4 bytes
 10116 ;; Hardware stack levels used:    1
 10117 ;; This function calls:
 10118 ;;		Nothing
 10119 ;; This function is called by:
 10120 ;;		_readIAnalog
 10121 ;;		_readButton
 10122 ;;		_main
 10123 ;; This function uses a non-reentrant model
 10124 ;;
 10125                           
 10126                           
 10127                           ;psect for function _ADCRead
 10128  1303                     _ADCRead:	
 10129                           
 10130                           ;incstack = 0
 10131                           ; Regs used in _ADCRead: [wreg]
 10132                           ;ADCRead@channel stored from wreg
 10133  1303  00F3               	movwf	ADCRead@channel
 10134                           
 10135                           ;adc.c: 23: ADPCH = channel_VSS;
 10136  1304  303C               	movlw	60
 10137  1305  0021               	movlb	1	; select bank1
 10138  1306  009E               	movwf	30	;volatile
 10139                           
 10140                           ;adc.c: 25: ADCON0bits.ADON = 1;
 10141  1307  1793               	bsf	19,7	;volatile
 10142                           
 10143                           ;adc.c: 27: ADCON0bits.ADCONT = 0;
 10144  1308  1313               	bcf	19,6	;volatile
 10145                           
 10146                           ;adc.c: 29: ADCON0bits.ADGO = 1;
 10147  1309  1413               	bsf	19,0	;volatile
 10148  130A                     l57:	
 10149                           ;adc.c: 32: {
 10150                           
 10151                           ;adc.c: 31: while(ADCON0bits.ADGO)
 10152                           
 10153  130A  1813               	btfsc	19,0	;volatile
 10154  130B  2B0A               	goto	l57
 10155                           
 10156                           ;adc.c: 33: }
 10157                           ;adc.c: 35: ADPCH = channel;
 10158  130C  0873               	movf	ADCRead@channel,w
 10159  130D  009E               	movwf	30	;volatile
 10160                           
 10161                           ;adc.c: 37: ADCON0bits.ADON = 1;
 10162  130E  1793               	bsf	19,7	;volatile
 10163                           
 10164                           ;adc.c: 39: ADCON0bits.ADCONT = 0;
 10165  130F  1313               	bcf	19,6	;volatile
 10166                           
 10167                           ;adc.c: 41: ADCON0bits.ADGO = 1;
 10168  1310  1413               	bsf	19,0	;volatile
 10169  1311                     l60:	
 10170                           ;adc.c: 44: {
 10171                           
 10172                           ;adc.c: 43: while(ADCON0bits.ADGO)
 10173                           
 10174  1311  1813               	btfsc	19,0	;volatile
 10175  1312  2B11               	goto	l60
 10176                           
 10177                           ;adc.c: 45: }
 10178                           ;adc.c: 47: return ((ADRESH<<8)+ADRESL);
 10179  1313  080D               	movf	13,w	;volatile
 10180  1314  00F1               	movwf	?_ADCRead+1
 10181  1315  080C               	movf	12,w	;volatile
 10182  1316  00F0               	movwf	?_ADCRead
 10183  1317  0008               	return
 10184  1318                     __end_of_ADCRead:	
 10185                           
 10186                           	psect	text12
 10187  0EC1                     __ptext12:	
 10188 ;; *************** function _cc_cv_mode *****************
 10189 ;; Defined at:
 10190 ;;		line 83 in file "battery_charger.c"
 10191 ;; Parameters:    Size  Location     Type
 10192 ;;  z               1    wreg     unsigned char 
 10193 ;; Auto vars:     Size  Location     Type
 10194 ;;  z               1   37[BANK0 ] unsigned char 
 10195 ;; Return value:  Size  Location     Type
 10196 ;;                  1    wreg      void 
 10197 ;; Registers used:
 10198 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10199 ;; Tracked objects:
 10200 ;;		On entry : 0/0
 10201 ;;		On exit  : 0/0
 10202 ;;		Unchanged: 0/0
 10203 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10204 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10205 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10206 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10207 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10208 ;;Total ram usage:        8 bytes
 10209 ;; Hardware stack levels used:    1
 10210 ;; Hardware stack levels required when called:    2
 10211 ;; This function calls:
 10212 ;;		___awtoft
 10213 ;;		___ftmul
 10214 ;;		___fttol
 10215 ;; This function is called by:
 10216 ;;		_main
 10217 ;; This function uses a non-reentrant model
 10218 ;;
 10219                           
 10220                           
 10221                           ;psect for function _cc_cv_mode
 10222  0EC1                     _cc_cv_mode:	
 10223                           
 10224                           ;incstack = 0
 10225                           ; Regs used in _cc_cv_mode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10226                           ;cc_cv_mode@z stored from wreg
 10227  0EC1  0020               	movlb	0	; select bank0
 10228  0EC2  00C5               	movwf	cc_cv_mode@z
 10229                           
 10230                           ;battery_charger.c: 85: if(voltage[z]>=Vref[z])
 10231  0EC3  3545               	lslf	cc_cv_mode@z,w
 10232  0EC4  3E5B               	addlw	(low (_Vref| 0))& (0+255)
 10233  0EC5  0086               	movwf	6
 10234  0EC6  0187               	clrf	7
 10235  0EC7  3F40               	moviw [0]fsr1
 10236  0EC8  00BE               	movwf	??_cc_cv_mode
 10237  0EC9  3F41               	moviw [1]fsr1
 10238  0ECA  00BF               	movwf	??_cc_cv_mode+1
 10239  0ECB  3545               	lslf	cc_cv_mode@z,w
 10240  0ECC  3EB0               	addlw	(low (_voltage| 0))& (0+255)
 10241  0ECD  0086               	movwf	6
 10242  0ECE  0187               	clrf	7
 10243  0ECF  3F40               	moviw [0]fsr1
 10244  0ED0  00C0               	movwf	??_cc_cv_mode+2
 10245  0ED1  3F41               	moviw [1]fsr1
 10246  0ED2  00C1               	movwf	??_cc_cv_mode+3
 10247  0ED3  0841               	movf	??_cc_cv_mode+3,w
 10248  0ED4  3A80               	xorlw	128
 10249  0ED5  00C2               	movwf	??_cc_cv_mode+4
 10250  0ED6  083F               	movf	??_cc_cv_mode+1,w
 10251  0ED7  3A80               	xorlw	128
 10252  0ED8  0242               	subwf	??_cc_cv_mode+4,w
 10253  0ED9  1D03               	skipz
 10254  0EDA  2EDD               	goto	u3315
 10255  0EDB  083E               	movf	??_cc_cv_mode,w
 10256  0EDC  0240               	subwf	??_cc_cv_mode+2,w
 10257  0EDD                     u3315:	
 10258  0EDD  1C03               	skipc
 10259  0EDE  2F1D               	goto	l2958
 10260                           
 10261                           ;battery_charger.c: 86: {
 10262                           ;battery_charger.c: 87: if(VHoldMode[z]<9)VHoldMode[z]+=1;
 10263  0EDF  0020               	movlb	0	; select bank0
 10264  0EE0  0845               	movf	cc_cv_mode@z,w
 10265  0EE1  3E61               	addlw	(low (_VHoldMode| 0))& (0+255)
 10266  0EE2  0086               	movwf	6
 10267  0EE3  0187               	clrf	7
 10268  0EE4  0801               	movf	1,w
 10269  0EE5  3A80               	xorlw	128
 10270  0EE6  3E77               	addlw	-137
 10271  0EE7  1803               	skipnc
 10272  0EE8  2EF1               	goto	l127
 10273  0EE9  3001               	movlw	1
 10274  0EEA  00BE               	movwf	??_cc_cv_mode
 10275  0EEB  0845               	movf	cc_cv_mode@z,w
 10276  0EEC  3E61               	addlw	(low (_VHoldMode| 0))& (0+255)
 10277  0EED  0086               	movwf	6
 10278  0EEE  0187               	clrf	7
 10279  0EEF  083E               	movf	??_cc_cv_mode,w
 10280  0EF0  0781               	addwf	1,f
 10281  0EF1                     l127:	
 10282                           
 10283                           ;battery_charger.c: 88: if(VHoldMode[z]<9)VHoldMode[z]+=1;
 10284  0EF1  0845               	movf	cc_cv_mode@z,w
 10285  0EF2  3E61               	addlw	(low (_VHoldMode| 0))& (0+255)
 10286  0EF3  0086               	movwf	6
 10287  0EF4  0187               	clrf	7
 10288  0EF5  0801               	movf	1,w
 10289  0EF6  3A80               	xorlw	128
 10290  0EF7  3E77               	addlw	-137
 10291  0EF8  1803               	skipnc
 10292  0EF9  2F02               	goto	l128
 10293  0EFA  3001               	movlw	1
 10294  0EFB  00BE               	movwf	??_cc_cv_mode
 10295  0EFC  0845               	movf	cc_cv_mode@z,w
 10296  0EFD  3E61               	addlw	(low (_VHoldMode| 0))& (0+255)
 10297  0EFE  0086               	movwf	6
 10298  0EFF  0187               	clrf	7
 10299  0F00  083E               	movf	??_cc_cv_mode,w
 10300  0F01  0781               	addwf	1,f
 10301  0F02                     l128:	
 10302                           
 10303                           ;battery_charger.c: 90: if(cc_cv[z])
 10304  0F02  0845               	movf	cc_cv_mode@z,w
 10305  0F03  3ED4               	addlw	(low (_cc_cv| 0))& (0+255)
 10306  0F04  0086               	movwf	6
 10307  0F05  0187               	clrf	7
 10308  0F06  0801               	movf	1,w
 10309  0F07  1903               	btfsc	3,2
 10310  0F08  2F10               	goto	l2954
 10311                           
 10312                           ;battery_charger.c: 91: {
 10313                           ;battery_charger.c: 92: cc_cv[z]-=1;
 10314  0F09  0845               	movf	cc_cv_mode@z,w
 10315  0F0A  3ED4               	addlw	(low (_cc_cv| 0))& (0+255)
 10316  0F0B  0086               	movwf	6
 10317  0F0C  0187               	clrf	7
 10318  0F0D  3001               	movlw	1
 10319  0F0E  0281               	subwf	1,f
 10320                           
 10321                           ;battery_charger.c: 93: }
 10322  0F0F  2F45               	goto	l132
 10323  0F10                     l2954:	
 10324                           
 10325                           ;battery_charger.c: 94: else
 10326                           ;battery_charger.c: 95: {
 10327                           ;battery_charger.c: 96: if(Imode[z])
 10328  0F10  0845               	movf	cc_cv_mode@z,w
 10329  0F11  3E63               	addlw	(low (_Imode| 0))& (0+255)
 10330  0F12  0086               	movwf	6
 10331  0F13  0187               	clrf	7
 10332  0F14  0801               	movf	1,w
 10333  0F15  1903               	btfsc	3,2
 10334  0F16  2F45               	goto	l132
 10335                           
 10336                           ;battery_charger.c: 97: {
 10337                           ;battery_charger.c: 98: Imode[z]=0;
 10338  0F17  0845               	movf	cc_cv_mode@z,w
 10339  0F18  3E63               	addlw	(low (_Imode| 0))& (0+255)
 10340  0F19  0086               	movwf	6
 10341  0F1A  0187               	clrf	7
 10342  0F1B  0181               	clrf	1
 10343                           
 10344                           ;battery_charger.c: 99: }
 10345                           ;battery_charger.c: 100: }
 10346                           ;battery_charger.c: 101: }
 10347  0F1C  2F45               	goto	l132
 10348  0F1D                     l2958:	
 10349                           
 10350                           ;battery_charger.c: 102: else
 10351                           ;battery_charger.c: 103: {
 10352                           ;battery_charger.c: 104: VHoldMode[z]-=1;
 10353  0F1D  30FF               	movlw	255
 10354  0F1E  0020               	movlb	0	; select bank0
 10355  0F1F  00BE               	movwf	??_cc_cv_mode
 10356  0F20  0845               	movf	cc_cv_mode@z,w
 10357  0F21  3E61               	addlw	(low (_VHoldMode| 0))& (0+255)
 10358  0F22  0086               	movwf	6
 10359  0F23  0187               	clrf	7
 10360  0F24  083E               	movf	??_cc_cv_mode,w
 10361  0F25  0781               	addwf	1,f
 10362                           
 10363                           ;battery_charger.c: 105: if(VHoldMode[z]<(9*-1))
 10364  0F26  0845               	movf	cc_cv_mode@z,w
 10365  0F27  3E61               	addlw	(low (_VHoldMode| 0))& (0+255)
 10366  0F28  0086               	movwf	6
 10367  0F29  0187               	clrf	7
 10368  0F2A  0801               	movf	1,w
 10369  0F2B  3A80               	xorlw	128
 10370  0F2C  3E89               	addlw	137
 10371  0F2D  1803               	skipnc
 10372  0F2E  2F45               	goto	l132
 10373                           
 10374                           ;battery_charger.c: 106: {
 10375                           ;battery_charger.c: 107: Imode[z]=1;
 10376  0F2F  0845               	movf	cc_cv_mode@z,w
 10377  0F30  3E63               	addlw	(low (_Imode| 0))& (0+255)
 10378  0F31  0086               	movwf	6
 10379  0F32  0187               	clrf	7
 10380  0F33  0181               	clrf	1
 10381  0F34  0A81               	incf	1,f
 10382                           
 10383                           ;battery_charger.c: 108: cc_cv[z]=(9*2);
 10384  0F35  3012               	movlw	18
 10385  0F36  00BE               	movwf	??_cc_cv_mode
 10386  0F37  0845               	movf	cc_cv_mode@z,w
 10387  0F38  3ED4               	addlw	(low (_cc_cv| 0))& (0+255)
 10388  0F39  0086               	movwf	6
 10389  0F3A  0187               	clrf	7
 10390  0F3B  083E               	movf	??_cc_cv_mode,w
 10391  0F3C  0081               	movwf	1
 10392                           
 10393                           ;battery_charger.c: 109: VHoldMode[z]=(9*-1);
 10394  0F3D  30F7               	movlw	247
 10395  0F3E  00BE               	movwf	??_cc_cv_mode
 10396  0F3F  0845               	movf	cc_cv_mode@z,w
 10397  0F40  3E61               	addlw	(low (_VHoldMode| 0))& (0+255)
 10398  0F41  0086               	movwf	6
 10399  0F42  0187               	clrf	7
 10400  0F43  083E               	movf	??_cc_cv_mode,w
 10401  0F44  0081               	movwf	1
 10402  0F45                     l132:	
 10403                           
 10404                           ;battery_charger.c: 110: }
 10405                           ;battery_charger.c: 111: }
 10406                           ;battery_charger.c: 113: if(current[z]>Iref[z])
 10407  0F45  3545               	lslf	cc_cv_mode@z,w
 10408  0F46  3EB8               	addlw	(low (_current| 0))& (0+255)
 10409  0F47  0086               	movwf	6
 10410  0F48  0187               	clrf	7
 10411  0F49  3F40               	moviw [0]fsr1
 10412  0F4A  00BE               	movwf	??_cc_cv_mode
 10413  0F4B  3F41               	moviw [1]fsr1
 10414  0F4C  00BF               	movwf	??_cc_cv_mode+1
 10415  0F4D  3545               	lslf	cc_cv_mode@z,w
 10416  0F4E  3EC4               	addlw	(low (_Iref| 0))& (0+255)
 10417  0F4F  0086               	movwf	6
 10418  0F50  0187               	clrf	7
 10419  0F51  3F40               	moviw [0]fsr1
 10420  0F52  00C0               	movwf	??_cc_cv_mode+2
 10421  0F53  3F41               	moviw [1]fsr1
 10422  0F54  00C1               	movwf	??_cc_cv_mode+3
 10423  0F55  0841               	movf	??_cc_cv_mode+3,w
 10424  0F56  3A80               	xorlw	128
 10425  0F57  00C2               	movwf	??_cc_cv_mode+4
 10426  0F58  083F               	movf	??_cc_cv_mode+1,w
 10427  0F59  3A80               	xorlw	128
 10428  0F5A  0242               	subwf	??_cc_cv_mode+4,w
 10429  0F5B  1D03               	skipz
 10430  0F5C  2F5F               	goto	u3375
 10431  0F5D  083E               	movf	??_cc_cv_mode,w
 10432  0F5E  0240               	subwf	??_cc_cv_mode+2,w
 10433  0F5F                     u3375:	
 10434  0F5F  1803               	skipnc
 10435  0F60  0008               	return
 10436                           
 10437                           ;battery_charger.c: 114: {
 10438                           ;battery_charger.c: 115: if(!(Imode[z]))
 10439  0F61  0020               	movlb	0	; select bank0
 10440  0F62  0845               	movf	cc_cv_mode@z,w
 10441  0F63  3E63               	addlw	(low (_Imode| 0))& (0+255)
 10442  0F64  0086               	movwf	6
 10443  0F65  0187               	clrf	7
 10444  0F66  0801               	movf	1,w
 10445  0F67  1D03               	btfss	3,2
 10446  0F68  0008               	return
 10447                           
 10448                           ;battery_charger.c: 116: {
 10449                           ;battery_charger.c: 117: if(batteryState[z]==FLOAT)
 10450  0F69  0845               	movf	cc_cv_mode@z,w
 10451  0F6A  3E65               	addlw	(low (_batteryState| 0))& (0+255)
 10452  0F6B  0086               	movwf	6
 10453  0F6C  0187               	clrf	7
 10454  0F6D  3005               	movlw	5
 10455  0F6E  0601               	xorwf	1,w
 10456  0F6F  1D03               	btfss	3,2
 10457  0F70  0008               	return
 10458                           
 10459                           ;battery_charger.c: 118: {
 10460                           ;battery_charger.c: 119: if(voltage[z]<1350+(int16_t)((250-batteryTemp)*.24)-70)
 10461  0F71  096D               	comf	_batteryTemp,w
 10462  0F72  00BE               	movwf	??_cc_cv_mode
 10463  0F73  096E               	comf	_batteryTemp+1,w
 10464  0F74  00BF               	movwf	??_cc_cv_mode+1
 10465  0F75  0ABE               	incf	??_cc_cv_mode,f
 10466  0F76  1903               	skipnz
 10467  0F77  0ABF               	incf	??_cc_cv_mode+1,f
 10468  0F78  083E               	movf	??_cc_cv_mode,w
 10469  0F79  3EFA               	addlw	250
 10470  0F7A  00F8               	movwf	___awtoft@c
 10471  0F7B  3000               	movlw	0
 10472  0F7C  3D3F               	addwfc	??_cc_cv_mode+1,w
 10473  0F7D  00F9               	movwf	___awtoft@c+1
 10474  0F7E  3193  23D1  318E   	fcall	___awtoft
 10475  0F81  0878               	movf	?___awtoft,w
 10476  0F82  0020               	movlb	0	; select bank0
 10477  0F83  00A3               	movwf	___ftmul@f2
 10478  0F84  0879               	movf	?___awtoft+1,w
 10479  0F85  00A4               	movwf	___ftmul@f2+1
 10480  0F86  087A               	movf	?___awtoft+2,w
 10481  0F87  00A5               	movwf	___ftmul@f2+2
 10482  0F88  30C3               	movlw	195
 10483  0F89  00A0               	movwf	___ftmul@f1
 10484  0F8A  3075               	movlw	117
 10485  0F8B  00A1               	movwf	___ftmul@f1+1
 10486  0F8C  303E               	movlw	62
 10487  0F8D  00A2               	movwf	___ftmul@f1+2
 10488  0F8E  318B  232F  318E   	fcall	___ftmul
 10489  0F91  0020               	movlb	0	; select bank0
 10490  0F92  0820               	movf	?___ftmul,w
 10491  0F93  00B0               	movwf	___fttol@f1
 10492  0F94  0821               	movf	?___ftmul+1,w
 10493  0F95  00B1               	movwf	___fttol@f1+1
 10494  0F96  0822               	movf	?___ftmul+2,w
 10495  0F97  00B2               	movwf	___fttol@f1+2
 10496  0F98  3189  214F  318E   	fcall	___fttol
 10497  0F9B  0020               	movlb	0	; select bank0
 10498  0F9C  0830               	movf	?___fttol,w
 10499  0F9D  3E00               	addlw	0
 10500  0F9E  00C0               	movwf	??_cc_cv_mode+2
 10501  0F9F  3005               	movlw	5
 10502  0FA0  3D31               	addwfc	?___fttol+1,w
 10503  0FA1  00C1               	movwf	??_cc_cv_mode+3
 10504  0FA2  3545               	lslf	cc_cv_mode@z,w
 10505  0FA3  3EB0               	addlw	(low (_voltage| 0))& (0+255)
 10506  0FA4  0086               	movwf	6
 10507  0FA5  0187               	clrf	7
 10508  0FA6  3F40               	moviw [0]fsr1
 10509  0FA7  00C2               	movwf	??_cc_cv_mode+4
 10510  0FA8  3F41               	moviw [1]fsr1
 10511  0FA9  00C3               	movwf	??_cc_cv_mode+5
 10512  0FAA  0843               	movf	??_cc_cv_mode+5,w
 10513  0FAB  3A80               	xorlw	128
 10514  0FAC  00C4               	movwf	??_cc_cv_mode+6
 10515  0FAD  0841               	movf	??_cc_cv_mode+3,w
 10516  0FAE  3A80               	xorlw	128
 10517  0FAF  0244               	subwf	??_cc_cv_mode+6,w
 10518  0FB0  1D03               	skipz
 10519  0FB1  2FB4               	goto	u3405
 10520  0FB2  0840               	movf	??_cc_cv_mode+2,w
 10521  0FB3  0242               	subwf	??_cc_cv_mode+4,w
 10522  0FB4                     u3405:	
 10523  0FB4  1803               	skipnc
 10524  0FB5  0008               	return
 10525                           
 10526                           ;battery_charger.c: 120: {
 10527                           ;battery_charger.c: 121: batteryState[z]=CHARGE;
 10528  0FB6  3004               	movlw	4
 10529  0FB7  0020               	movlb	0	; select bank0
 10530  0FB8  00BE               	movwf	??_cc_cv_mode
 10531  0FB9  0845               	movf	cc_cv_mode@z,w
 10532  0FBA  3E65               	addlw	(low (_batteryState| 0))& (0+255)
 10533  0FBB  0086               	movwf	6
 10534  0FBC  0187               	clrf	7
 10535  0FBD  083E               	movf	??_cc_cv_mode,w
 10536  0FBE  0081               	movwf	1
 10537                           
 10538                           ;battery_charger.c: 122: Vref[z]=1425+(int16_t)((250-batteryTemp)*.24);
 10539  0FBF  096D               	comf	_batteryTemp,w
 10540  0FC0  00BE               	movwf	??_cc_cv_mode
 10541  0FC1  096E               	comf	_batteryTemp+1,w
 10542  0FC2  00BF               	movwf	??_cc_cv_mode+1
 10543  0FC3  0ABE               	incf	??_cc_cv_mode,f
 10544  0FC4  1903               	skipnz
 10545  0FC5  0ABF               	incf	??_cc_cv_mode+1,f
 10546  0FC6  083E               	movf	??_cc_cv_mode,w
 10547  0FC7  3EFA               	addlw	250
 10548  0FC8  00F8               	movwf	___awtoft@c
 10549  0FC9  3000               	movlw	0
 10550  0FCA  3D3F               	addwfc	??_cc_cv_mode+1,w
 10551  0FCB  00F9               	movwf	___awtoft@c+1
 10552  0FCC  3193  23D1  318E   	fcall	___awtoft
 10553  0FCF  0878               	movf	?___awtoft,w
 10554  0FD0  0020               	movlb	0	; select bank0
 10555  0FD1  00A3               	movwf	___ftmul@f2
 10556  0FD2  0879               	movf	?___awtoft+1,w
 10557  0FD3  00A4               	movwf	___ftmul@f2+1
 10558  0FD4  087A               	movf	?___awtoft+2,w
 10559  0FD5  00A5               	movwf	___ftmul@f2+2
 10560  0FD6  30C3               	movlw	195
 10561  0FD7  00A0               	movwf	___ftmul@f1
 10562  0FD8  3075               	movlw	117
 10563  0FD9  00A1               	movwf	___ftmul@f1+1
 10564  0FDA  303E               	movlw	62
 10565  0FDB  00A2               	movwf	___ftmul@f1+2
 10566  0FDC  318B  232F  318E   	fcall	___ftmul
 10567  0FDF  0020               	movlb	0	; select bank0
 10568  0FE0  0820               	movf	?___ftmul,w
 10569  0FE1  00B0               	movwf	___fttol@f1
 10570  0FE2  0821               	movf	?___ftmul+1,w
 10571  0FE3  00B1               	movwf	___fttol@f1+1
 10572  0FE4  0822               	movf	?___ftmul+2,w
 10573  0FE5  00B2               	movwf	___fttol@f1+2
 10574  0FE6  3189  214F         	fcall	___fttol
 10575  0FE8  0020               	movlb	0	; select bank0
 10576  0FE9  0830               	movf	?___fttol,w
 10577  0FEA  3E91               	addlw	145
 10578  0FEB  00C0               	movwf	??_cc_cv_mode+2
 10579  0FEC  3005               	movlw	5
 10580  0FED  3D31               	addwfc	?___fttol+1,w
 10581  0FEE  00C1               	movwf	??_cc_cv_mode+3
 10582  0FEF  3545               	lslf	cc_cv_mode@z,w
 10583  0FF0  3E5B               	addlw	(low (_Vref| 0))& (0+255)
 10584  0FF1  0086               	movwf	6
 10585  0FF2  0187               	clrf	7
 10586  0FF3  0840               	movf	??_cc_cv_mode+2,w
 10587  0FF4  3FC0               	movwi [0]fsr1
 10588  0FF5  0841               	movf	??_cc_cv_mode+3,w
 10589  0FF6  3FC1               	movwi [1]fsr1
 10590                           
 10591                           ;battery_charger.c: 123: Iref[z]=35;
 10592  0FF7  3545               	lslf	cc_cv_mode@z,w
 10593  0FF8  3EC4               	addlw	(low (_Iref| 0))& (0+255)
 10594  0FF9  0086               	movwf	6
 10595  0FFA  0187               	clrf	7
 10596  0FFB  3023               	movlw	35
 10597  0FFC  3FC0               	movwi [0]fsr1
 10598  0FFD  3000               	movlw	0
 10599  0FFE  3FC1               	movwi [1]fsr1
 10600  0FFF  0008               	return
 10601  1000                     __end_of_cc_cv_mode:	
 10602                           
 10603                           	psect	text13
 10604  0806                     __ptext13:	
 10605 ;; *************** function _calculateCurrent3 *****************
 10606 ;; Defined at:
 10607 ;;		line 423 in file "main.c"
 10608 ;; Parameters:    Size  Location     Type
 10609 ;;		None
 10610 ;; Auto vars:     Size  Location     Type
 10611 ;;		None
 10612 ;; Return value:  Size  Location     Type
 10613 ;;                  1    wreg      void 
 10614 ;; Registers used:
 10615 ;;		wreg, status,2, status,0, pclath, cstack
 10616 ;; Tracked objects:
 10617 ;;		On entry : 0/0
 10618 ;;		On exit  : 0/0
 10619 ;;		Unchanged: 0/0
 10620 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10621 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10622 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10623 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10624 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10625 ;;Total ram usage:        3 bytes
 10626 ;; Hardware stack levels used:    1
 10627 ;; Hardware stack levels required when called:    2
 10628 ;; This function calls:
 10629 ;;		___awtoft
 10630 ;;		___ftdiv
 10631 ;;		___fttol
 10632 ;; This function is called by:
 10633 ;;		_main
 10634 ;; This function uses a non-reentrant model
 10635 ;;
 10636                           
 10637                           
 10638                           ;psect for function _calculateCurrent3
 10639  0806                     _calculateCurrent3:	
 10640                           
 10641                           ;main.c: 425: if(Ianalogs[3]-559<=0)
 10642                           
 10643                           ;incstack = 0
 10644                           ; Regs used in _calculateCurrent3: [wreg+status,2+status,0+pclath+cstack]
 10645  0806  0021               	movlb	1	; select bank1
 10646  0807  0826               	movf	(_Ianalogs^(0+128)+6),w
 10647  0808  3ED1               	addlw	209
 10648  0809  0020               	movlb	0	; select bank0
 10649  080A  00BE               	movwf	??_calculateCurrent3
 10650  080B  30FD               	movlw	253
 10651  080C  0021               	movlb	1	; select bank1
 10652  080D  3D27               	addwfc	((_Ianalogs+1)^(0+128)+6),w
 10653  080E  0020               	movlb	0	; select bank0
 10654  080F  00BF               	movwf	??_calculateCurrent3+1
 10655  0810  083F               	movf	??_calculateCurrent3+1,w
 10656  0811  3A80               	xorlw	128
 10657  0812  00C0               	movwf	??_calculateCurrent3+2
 10658  0813  3080               	movlw	128
 10659  0814  0240               	subwf	??_calculateCurrent3+2,w
 10660  0815  1D03               	skipz
 10661  0816  2819               	goto	u3665
 10662  0817  3001               	movlw	1
 10663  0818  023E               	subwf	??_calculateCurrent3,w
 10664  0819                     u3665:	
 10665  0819  1803               	skipnc
 10666  081A  281F               	goto	l3134
 10667                           
 10668                           ;main.c: 426: {
 10669                           ;main.c: 427: current[3]=0;
 10670  081B  0021               	movlb	1	; select bank1
 10671  081C  01BE               	clrf	(_current^(0+128)+6)
 10672  081D  01BF               	clrf	((_current+1)^(0+128)+6)
 10673                           
 10674                           ;main.c: 428: }
 10675  081E  0008               	return
 10676  081F                     l3134:	
 10677                           
 10678                           ;main.c: 429: else
 10679                           ;main.c: 430: {
 10680                           ;main.c: 431: current[3]=(int16_t)((Ianalogs[3]-559)/1.60575);
 10681  081F  0021               	movlb	1	; select bank1
 10682  0820  0826               	movf	(_Ianalogs^(0+128)+6),w
 10683  0821  3ED1               	addlw	209
 10684  0822  00F8               	movwf	___awtoft@c
 10685  0823  30FD               	movlw	253
 10686  0824  3D27               	addwfc	((_Ianalogs+1)^(0+128)+6),w
 10687  0825  00F9               	movwf	___awtoft@c+1
 10688  0826  3193  23D1  3188   	fcall	___awtoft
 10689  0829  0878               	movf	?___awtoft,w
 10690  082A  0020               	movlb	0	; select bank0
 10691  082B  00A3               	movwf	___ftdiv@f1
 10692  082C  0879               	movf	?___awtoft+1,w
 10693  082D  00A4               	movwf	___ftdiv@f1+1
 10694  082E  087A               	movf	?___awtoft+2,w
 10695  082F  00A5               	movwf	___ftdiv@f1+2
 10696  0830  3089               	movlw	137
 10697  0831  00A0               	movwf	___ftdiv@f2
 10698  0832  30CD               	movlw	205
 10699  0833  00A1               	movwf	___ftdiv@f2+1
 10700  0834  303F               	movlw	63
 10701  0835  00A2               	movwf	___ftdiv@f2+2
 10702  0836  3189  21D6  3188   	fcall	___ftdiv
 10703  0839  0020               	movlb	0	; select bank0
 10704  083A  0820               	movf	?___ftdiv,w
 10705  083B  00B0               	movwf	___fttol@f1
 10706  083C  0821               	movf	?___ftdiv+1,w
 10707  083D  00B1               	movwf	___fttol@f1+1
 10708  083E  0822               	movf	?___ftdiv+2,w
 10709  083F  00B2               	movwf	___fttol@f1+2
 10710  0840  3189  214F         	fcall	___fttol
 10711  0842  0020               	movlb	0	; select bank0
 10712  0843  0831               	movf	?___fttol+1,w
 10713  0844  0021               	movlb	1	; select bank1
 10714  0845  00BF               	movwf	((_current+1)^(0+128)+6)
 10715  0846  0020               	movlb	0	; select bank0
 10716  0847  0830               	movf	?___fttol,w
 10717  0848  0021               	movlb	1	; select bank1
 10718  0849  00BE               	movwf	(_current^(0+128)+6)
 10719  084A  0008               	return
 10720  084B                     __end_of_calculateCurrent3:	
 10721                           
 10722                           	psect	text14
 10723  15EF                     __ptext14:	
 10724 ;; *************** function _calculateCurrent2 *****************
 10725 ;; Defined at:
 10726 ;;		line 411 in file "main.c"
 10727 ;; Parameters:    Size  Location     Type
 10728 ;;		None
 10729 ;; Auto vars:     Size  Location     Type
 10730 ;;		None
 10731 ;; Return value:  Size  Location     Type
 10732 ;;                  1    wreg      void 
 10733 ;; Registers used:
 10734 ;;		wreg, status,2, status,0, pclath, cstack
 10735 ;; Tracked objects:
 10736 ;;		On entry : 0/0
 10737 ;;		On exit  : 0/0
 10738 ;;		Unchanged: 0/0
 10739 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10740 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10741 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10742 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10743 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10744 ;;Total ram usage:        3 bytes
 10745 ;; Hardware stack levels used:    1
 10746 ;; Hardware stack levels required when called:    2
 10747 ;; This function calls:
 10748 ;;		___awtoft
 10749 ;;		___ftdiv
 10750 ;;		___fttol
 10751 ;; This function is called by:
 10752 ;;		_main
 10753 ;; This function uses a non-reentrant model
 10754 ;;
 10755                           
 10756                           
 10757                           ;psect for function _calculateCurrent2
 10758  15EF                     _calculateCurrent2:	
 10759                           
 10760                           ;main.c: 413: if(Ianalogs[2]-589<=0)
 10761                           
 10762                           ;incstack = 0
 10763                           ; Regs used in _calculateCurrent2: [wreg+status,2+status,0+pclath+cstack]
 10764  15EF  0021               	movlb	1	; select bank1
 10765  15F0  0824               	movf	(_Ianalogs^(0+128)+4),w
 10766  15F1  3EB3               	addlw	179
 10767  15F2  0020               	movlb	0	; select bank0
 10768  15F3  00BE               	movwf	??_calculateCurrent2
 10769  15F4  30FD               	movlw	253
 10770  15F5  0021               	movlb	1	; select bank1
 10771  15F6  3D25               	addwfc	((_Ianalogs+1)^(0+128)+4),w
 10772  15F7  0020               	movlb	0	; select bank0
 10773  15F8  00BF               	movwf	??_calculateCurrent2+1
 10774  15F9  083F               	movf	??_calculateCurrent2+1,w
 10775  15FA  3A80               	xorlw	128
 10776  15FB  00C0               	movwf	??_calculateCurrent2+2
 10777  15FC  3080               	movlw	128
 10778  15FD  0240               	subwf	??_calculateCurrent2+2,w
 10779  15FE  1D03               	skipz
 10780  15FF  2E02               	goto	u3655
 10781  1600  3001               	movlw	1
 10782  1601  023E               	subwf	??_calculateCurrent2,w
 10783  1602                     u3655:	
 10784  1602  1803               	skipnc
 10785  1603  2E08               	goto	l3128
 10786                           
 10787                           ;main.c: 414: {
 10788                           ;main.c: 415: current[2]=0;
 10789  1604  0021               	movlb	1	; select bank1
 10790  1605  01BC               	clrf	(_current^(0+128)+4)
 10791  1606  01BD               	clrf	((_current+1)^(0+128)+4)
 10792                           
 10793                           ;main.c: 416: }
 10794  1607  0008               	return
 10795  1608                     l3128:	
 10796                           
 10797                           ;main.c: 417: else
 10798                           ;main.c: 418: {
 10799                           ;main.c: 419: current[2]=(int16_t)((Ianalogs[2]-589)/1.3165);
 10800  1608  0021               	movlb	1	; select bank1
 10801  1609  0824               	movf	(_Ianalogs^(0+128)+4),w
 10802  160A  3EB3               	addlw	179
 10803  160B  00F8               	movwf	___awtoft@c
 10804  160C  30FD               	movlw	253
 10805  160D  3D25               	addwfc	((_Ianalogs+1)^(0+128)+4),w
 10806  160E  00F9               	movwf	___awtoft@c+1
 10807  160F  3193  23D1  3195   	fcall	___awtoft
 10808  1612  0878               	movf	?___awtoft,w
 10809  1613  0020               	movlb	0	; select bank0
 10810  1614  00A3               	movwf	___ftdiv@f1
 10811  1615  0879               	movf	?___awtoft+1,w
 10812  1616  00A4               	movwf	___ftdiv@f1+1
 10813  1617  087A               	movf	?___awtoft+2,w
 10814  1618  00A5               	movwf	___ftdiv@f1+2
 10815  1619  3083               	movlw	131
 10816  161A  00A0               	movwf	___ftdiv@f2
 10817  161B  30A8               	movlw	168
 10818  161C  00A1               	movwf	___ftdiv@f2+1
 10819  161D  303F               	movlw	63
 10820  161E  00A2               	movwf	___ftdiv@f2+2
 10821  161F  3189  21D6  3195   	fcall	___ftdiv
 10822  1622  0020               	movlb	0	; select bank0
 10823  1623  0820               	movf	?___ftdiv,w
 10824  1624  00B0               	movwf	___fttol@f1
 10825  1625  0821               	movf	?___ftdiv+1,w
 10826  1626  00B1               	movwf	___fttol@f1+1
 10827  1627  0822               	movf	?___ftdiv+2,w
 10828  1628  00B2               	movwf	___fttol@f1+2
 10829  1629  3189  214F         	fcall	___fttol
 10830  162B  0020               	movlb	0	; select bank0
 10831  162C  0831               	movf	?___fttol+1,w
 10832  162D  0021               	movlb	1	; select bank1
 10833  162E  00BD               	movwf	((_current+1)^(0+128)+4)
 10834  162F  0020               	movlb	0	; select bank0
 10835  1630  0830               	movf	?___fttol,w
 10836  1631  0021               	movlb	1	; select bank1
 10837  1632  00BC               	movwf	(_current^(0+128)+4)
 10838  1633  0008               	return
 10839  1634                     __end_of_calculateCurrent2:	
 10840                           
 10841                           	psect	text15
 10842  15AA                     __ptext15:	
 10843 ;; *************** function _calculateCurrent1 *****************
 10844 ;; Defined at:
 10845 ;;		line 399 in file "main.c"
 10846 ;; Parameters:    Size  Location     Type
 10847 ;;		None
 10848 ;; Auto vars:     Size  Location     Type
 10849 ;;		None
 10850 ;; Return value:  Size  Location     Type
 10851 ;;                  1    wreg      void 
 10852 ;; Registers used:
 10853 ;;		wreg, status,2, status,0, pclath, cstack
 10854 ;; Tracked objects:
 10855 ;;		On entry : 0/0
 10856 ;;		On exit  : 0/0
 10857 ;;		Unchanged: 0/0
 10858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10859 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10860 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10861 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10862 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10863 ;;Total ram usage:        3 bytes
 10864 ;; Hardware stack levels used:    1
 10865 ;; Hardware stack levels required when called:    2
 10866 ;; This function calls:
 10867 ;;		___awtoft
 10868 ;;		___ftdiv
 10869 ;;		___fttol
 10870 ;; This function is called by:
 10871 ;;		_main
 10872 ;; This function uses a non-reentrant model
 10873 ;;
 10874                           
 10875                           
 10876                           ;psect for function _calculateCurrent1
 10877  15AA                     _calculateCurrent1:	
 10878                           
 10879                           ;main.c: 401: if(Ianalogs[1]-561<=0)
 10880                           
 10881                           ;incstack = 0
 10882                           ; Regs used in _calculateCurrent1: [wreg+status,2+status,0+pclath+cstack]
 10883  15AA  0021               	movlb	1	; select bank1
 10884  15AB  0822               	movf	(_Ianalogs^(0+128)+2),w
 10885  15AC  3ECF               	addlw	207
 10886  15AD  0020               	movlb	0	; select bank0
 10887  15AE  00BE               	movwf	??_calculateCurrent1
 10888  15AF  30FD               	movlw	253
 10889  15B0  0021               	movlb	1	; select bank1
 10890  15B1  3D23               	addwfc	((_Ianalogs+1)^(0+128)+2),w
 10891  15B2  0020               	movlb	0	; select bank0
 10892  15B3  00BF               	movwf	??_calculateCurrent1+1
 10893  15B4  083F               	movf	??_calculateCurrent1+1,w
 10894  15B5  3A80               	xorlw	128
 10895  15B6  00C0               	movwf	??_calculateCurrent1+2
 10896  15B7  3080               	movlw	128
 10897  15B8  0240               	subwf	??_calculateCurrent1+2,w
 10898  15B9  1D03               	skipz
 10899  15BA  2DBD               	goto	u3645
 10900  15BB  3001               	movlw	1
 10901  15BC  023E               	subwf	??_calculateCurrent1,w
 10902  15BD                     u3645:	
 10903  15BD  1803               	skipnc
 10904  15BE  2DC3               	goto	l3122
 10905                           
 10906                           ;main.c: 402: {
 10907                           ;main.c: 403: current[1]=0;
 10908  15BF  0021               	movlb	1	; select bank1
 10909  15C0  01BA               	clrf	(_current^(0+128)+2)
 10910  15C1  01BB               	clrf	((_current+1)^(0+128)+2)
 10911                           
 10912                           ;main.c: 404: }
 10913  15C2  0008               	return
 10914  15C3                     l3122:	
 10915                           
 10916                           ;main.c: 405: else
 10917                           ;main.c: 406: {
 10918                           ;main.c: 407: current[1]=(int16_t)((Ianalogs[1]-561)/1.99055);
 10919  15C3  0021               	movlb	1	; select bank1
 10920  15C4  0822               	movf	(_Ianalogs^(0+128)+2),w
 10921  15C5  3ECF               	addlw	207
 10922  15C6  00F8               	movwf	___awtoft@c
 10923  15C7  30FD               	movlw	253
 10924  15C8  3D23               	addwfc	((_Ianalogs+1)^(0+128)+2),w
 10925  15C9  00F9               	movwf	___awtoft@c+1
 10926  15CA  3193  23D1  3195   	fcall	___awtoft
 10927  15CD  0878               	movf	?___awtoft,w
 10928  15CE  0020               	movlb	0	; select bank0
 10929  15CF  00A3               	movwf	___ftdiv@f1
 10930  15D0  0879               	movf	?___awtoft+1,w
 10931  15D1  00A4               	movwf	___ftdiv@f1+1
 10932  15D2  087A               	movf	?___awtoft+2,w
 10933  15D3  00A5               	movwf	___ftdiv@f1+2
 10934  15D4  30CA               	movlw	202
 10935  15D5  00A0               	movwf	___ftdiv@f2
 10936  15D6  30FE               	movlw	254
 10937  15D7  00A1               	movwf	___ftdiv@f2+1
 10938  15D8  303F               	movlw	63
 10939  15D9  00A2               	movwf	___ftdiv@f2+2
 10940  15DA  3189  21D6  3195   	fcall	___ftdiv
 10941  15DD  0020               	movlb	0	; select bank0
 10942  15DE  0820               	movf	?___ftdiv,w
 10943  15DF  00B0               	movwf	___fttol@f1
 10944  15E0  0821               	movf	?___ftdiv+1,w
 10945  15E1  00B1               	movwf	___fttol@f1+1
 10946  15E2  0822               	movf	?___ftdiv+2,w
 10947  15E3  00B2               	movwf	___fttol@f1+2
 10948  15E4  3189  214F         	fcall	___fttol
 10949  15E6  0020               	movlb	0	; select bank0
 10950  15E7  0831               	movf	?___fttol+1,w
 10951  15E8  0021               	movlb	1	; select bank1
 10952  15E9  00BB               	movwf	((_current+1)^(0+128)+2)
 10953  15EA  0020               	movlb	0	; select bank0
 10954  15EB  0830               	movf	?___fttol,w
 10955  15EC  0021               	movlb	1	; select bank1
 10956  15ED  00BA               	movwf	(_current^(0+128)+2)
 10957  15EE  0008               	return
 10958  15EF                     __end_of_calculateCurrent1:	
 10959                           
 10960                           	psect	text16
 10961  1565                     __ptext16:	
 10962 ;; *************** function _calculateCurrent0 *****************
 10963 ;; Defined at:
 10964 ;;		line 387 in file "main.c"
 10965 ;; Parameters:    Size  Location     Type
 10966 ;;		None
 10967 ;; Auto vars:     Size  Location     Type
 10968 ;;		None
 10969 ;; Return value:  Size  Location     Type
 10970 ;;                  1    wreg      void 
 10971 ;; Registers used:
 10972 ;;		wreg, status,2, status,0, pclath, cstack
 10973 ;; Tracked objects:
 10974 ;;		On entry : 0/0
 10975 ;;		On exit  : 0/0
 10976 ;;		Unchanged: 0/0
 10977 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10978 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10979 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10980 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10981 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10982 ;;Total ram usage:        3 bytes
 10983 ;; Hardware stack levels used:    1
 10984 ;; Hardware stack levels required when called:    2
 10985 ;; This function calls:
 10986 ;;		___awtoft
 10987 ;;		___ftdiv
 10988 ;;		___fttol
 10989 ;; This function is called by:
 10990 ;;		_main
 10991 ;; This function uses a non-reentrant model
 10992 ;;
 10993                           
 10994                           
 10995                           ;psect for function _calculateCurrent0
 10996  1565                     _calculateCurrent0:	
 10997                           
 10998                           ;main.c: 389: if(Ianalogs[0]-578<=0)
 10999                           
 11000                           ;incstack = 0
 11001                           ; Regs used in _calculateCurrent0: [wreg+status,2+status,0+pclath+cstack]
 11002  1565  0021               	movlb	1	; select bank1
 11003  1566  0820               	movf	_Ianalogs^(0+128),w
 11004  1567  3EBE               	addlw	190
 11005  1568  0020               	movlb	0	; select bank0
 11006  1569  00BE               	movwf	??_calculateCurrent0
 11007  156A  30FD               	movlw	253
 11008  156B  0021               	movlb	1	; select bank1
 11009  156C  3D21               	addwfc	(_Ianalogs+1)^(0+128),w
 11010  156D  0020               	movlb	0	; select bank0
 11011  156E  00BF               	movwf	??_calculateCurrent0+1
 11012  156F  083F               	movf	??_calculateCurrent0+1,w
 11013  1570  3A80               	xorlw	128
 11014  1571  00C0               	movwf	??_calculateCurrent0+2
 11015  1572  3080               	movlw	128
 11016  1573  0240               	subwf	??_calculateCurrent0+2,w
 11017  1574  1D03               	skipz
 11018  1575  2D78               	goto	u3635
 11019  1576  3001               	movlw	1
 11020  1577  023E               	subwf	??_calculateCurrent0,w
 11021  1578                     u3635:	
 11022  1578  1803               	skipnc
 11023  1579  2D7E               	goto	l3116
 11024                           
 11025                           ;main.c: 390: {
 11026                           ;main.c: 391: current[0]=0;
 11027  157A  0021               	movlb	1	; select bank1
 11028  157B  01B8               	clrf	_current^(0+128)
 11029  157C  01B9               	clrf	(_current+1)^(0+128)
 11030                           
 11031                           ;main.c: 392: }
 11032  157D  0008               	return
 11033  157E                     l3116:	
 11034                           
 11035                           ;main.c: 393: else
 11036                           ;main.c: 394: {
 11037                           ;main.c: 395: current[0]=(int16_t)((Ianalogs[0]-578)/3.2323);
 11038  157E  0021               	movlb	1	; select bank1
 11039  157F  0820               	movf	_Ianalogs^(0+128),w
 11040  1580  3EBE               	addlw	190
 11041  1581  00F8               	movwf	___awtoft@c
 11042  1582  30FD               	movlw	253
 11043  1583  3D21               	addwfc	(_Ianalogs+1)^(0+128),w
 11044  1584  00F9               	movwf	___awtoft@c+1
 11045  1585  3193  23D1  3195   	fcall	___awtoft
 11046  1588  0878               	movf	?___awtoft,w
 11047  1589  0020               	movlb	0	; select bank0
 11048  158A  00A3               	movwf	___ftdiv@f1
 11049  158B  0879               	movf	?___awtoft+1,w
 11050  158C  00A4               	movwf	___ftdiv@f1+1
 11051  158D  087A               	movf	?___awtoft+2,w
 11052  158E  00A5               	movwf	___ftdiv@f1+2
 11053  158F  30DE               	movlw	222
 11054  1590  00A0               	movwf	___ftdiv@f2
 11055  1591  304E               	movlw	78
 11056  1592  00A1               	movwf	___ftdiv@f2+1
 11057  1593  3040               	movlw	64
 11058  1594  00A2               	movwf	___ftdiv@f2+2
 11059  1595  3189  21D6  3195   	fcall	___ftdiv
 11060  1598  0020               	movlb	0	; select bank0
 11061  1599  0820               	movf	?___ftdiv,w
 11062  159A  00B0               	movwf	___fttol@f1
 11063  159B  0821               	movf	?___ftdiv+1,w
 11064  159C  00B1               	movwf	___fttol@f1+1
 11065  159D  0822               	movf	?___ftdiv+2,w
 11066  159E  00B2               	movwf	___fttol@f1+2
 11067  159F  3189  214F         	fcall	___fttol
 11068  15A1  0020               	movlb	0	; select bank0
 11069  15A2  0831               	movf	?___fttol+1,w
 11070  15A3  0021               	movlb	1	; select bank1
 11071  15A4  00B9               	movwf	(_current+1)^(0+128)
 11072  15A5  0020               	movlb	0	; select bank0
 11073  15A6  0830               	movf	?___fttol,w
 11074  15A7  0021               	movlb	1	; select bank1
 11075  15A8  00B8               	movwf	_current^(0+128)
 11076  15A9  0008               	return
 11077  15AA                     __end_of_calculateCurrent0:	
 11078                           
 11079                           	psect	text17
 11080  09D6                     __ptext17:	
 11081 ;; *************** function ___ftdiv *****************
 11082 ;; Defined at:
 11083 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
 11084 ;; Parameters:    Size  Location     Type
 11085 ;;  f2              3    0[BANK0 ] float 
 11086 ;;  f1              3    3[BANK0 ] float 
 11087 ;; Auto vars:     Size  Location     Type
 11088 ;;  f3              3   11[BANK0 ] float 
 11089 ;;  sign            1   15[BANK0 ] unsigned char 
 11090 ;;  exp             1   14[BANK0 ] unsigned char 
 11091 ;;  cntr            1   10[BANK0 ] unsigned char 
 11092 ;; Return value:  Size  Location     Type
 11093 ;;                  3    0[BANK0 ] float 
 11094 ;; Registers used:
 11095 ;;		wreg, status,2, status,0, pclath, cstack
 11096 ;; Tracked objects:
 11097 ;;		On entry : 0/0
 11098 ;;		On exit  : 0/0
 11099 ;;		Unchanged: 0/0
 11100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11101 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11102 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11103 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11104 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11105 ;;Total ram usage:       16 bytes
 11106 ;; Hardware stack levels used:    1
 11107 ;; Hardware stack levels required when called:    1
 11108 ;; This function calls:
 11109 ;;		___ftpack
 11110 ;; This function is called by:
 11111 ;;		_tempCalc
 11112 ;;		_main
 11113 ;;		_calculateCurrent0
 11114 ;;		_calculateCurrent1
 11115 ;;		_calculateCurrent2
 11116 ;;		_calculateCurrent3
 11117 ;; This function uses a non-reentrant model
 11118 ;;
 11119                           
 11120                           
 11121                           ;psect for function ___ftdiv
 11122  09D6                     ___ftdiv:	
 11123                           
 11124                           ;incstack = 0
 11125                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 11126  09D6  0020               	movlb	0	; select bank0
 11127  09D7  0823               	movf	___ftdiv@f1,w
 11128  09D8  00A6               	movwf	??___ftdiv
 11129  09D9  0824               	movf	___ftdiv@f1+1,w
 11130  09DA  00A7               	movwf	??___ftdiv+1
 11131  09DB  0825               	movf	___ftdiv@f1+2,w
 11132  09DC  00A8               	movwf	??___ftdiv+2
 11133  09DD  1003               	clrc
 11134  09DE  0D27               	rlf	??___ftdiv+1,w
 11135  09DF  0D28               	rlf	??___ftdiv+2,w
 11136  09E0  00A9               	movwf	??___ftdiv+3
 11137  09E1  0829               	movf	??___ftdiv+3,w
 11138  09E2  00AE               	movwf	___ftdiv@exp
 11139  09E3  082E               	movf	___ftdiv@exp,w
 11140  09E4  1D03               	btfss	3,2
 11141  09E5  29ED               	goto	l2814
 11142  09E6  3000               	movlw	0
 11143  09E7  00A0               	movwf	?___ftdiv
 11144  09E8  3000               	movlw	0
 11145  09E9  00A1               	movwf	?___ftdiv+1
 11146  09EA  3000               	movlw	0
 11147  09EB  00A2               	movwf	?___ftdiv+2
 11148  09EC  0008               	return
 11149  09ED                     l2814:	
 11150  09ED  0820               	movf	___ftdiv@f2,w
 11151  09EE  00A6               	movwf	??___ftdiv
 11152  09EF  0821               	movf	___ftdiv@f2+1,w
 11153  09F0  00A7               	movwf	??___ftdiv+1
 11154  09F1  0822               	movf	___ftdiv@f2+2,w
 11155  09F2  00A8               	movwf	??___ftdiv+2
 11156  09F3  1003               	clrc
 11157  09F4  0D27               	rlf	??___ftdiv+1,w
 11158  09F5  0D28               	rlf	??___ftdiv+2,w
 11159  09F6  00A9               	movwf	??___ftdiv+3
 11160  09F7  0829               	movf	??___ftdiv+3,w
 11161  09F8  00AF               	movwf	___ftdiv@sign
 11162  09F9  082F               	movf	___ftdiv@sign,w
 11163  09FA  1D03               	btfss	3,2
 11164  09FB  2A03               	goto	l2820
 11165  09FC  3000               	movlw	0
 11166  09FD  00A0               	movwf	?___ftdiv
 11167  09FE  3000               	movlw	0
 11168  09FF  00A1               	movwf	?___ftdiv+1
 11169  0A00  3000               	movlw	0
 11170  0A01  00A2               	movwf	?___ftdiv+2
 11171  0A02  0008               	return
 11172  0A03                     l2820:	
 11173  0A03  3000               	movlw	0
 11174  0A04  00AB               	movwf	___ftdiv@f3
 11175  0A05  3000               	movlw	0
 11176  0A06  00AC               	movwf	___ftdiv@f3+1
 11177  0A07  3000               	movlw	0
 11178  0A08  00AD               	movwf	___ftdiv@f3+2
 11179  0A09  3089               	movlw	137
 11180  0A0A  072F               	addwf	___ftdiv@sign,w
 11181  0A0B  00A6               	movwf	??___ftdiv
 11182  0A0C  0826               	movf	??___ftdiv,w
 11183  0A0D  02AE               	subwf	___ftdiv@exp,f
 11184  0A0E  0823               	movf	___ftdiv@f1,w
 11185  0A0F  00A6               	movwf	??___ftdiv
 11186  0A10  0824               	movf	___ftdiv@f1+1,w
 11187  0A11  00A7               	movwf	??___ftdiv+1
 11188  0A12  0825               	movf	___ftdiv@f1+2,w
 11189  0A13  00A8               	movwf	??___ftdiv+2
 11190  0A14  3010               	movlw	16
 11191  0A15                     u3005:	
 11192  0A15  36A8               	lsrf	??___ftdiv+2,f
 11193  0A16  0CA7               	rrf	??___ftdiv+1,f
 11194  0A17  0CA6               	rrf	??___ftdiv,f
 11195  0A18  0B89               	decfsz	9,f
 11196  0A19  2A15               	goto	u3005
 11197  0A1A  0826               	movf	??___ftdiv,w
 11198  0A1B  00A9               	movwf	??___ftdiv+3
 11199  0A1C  0829               	movf	??___ftdiv+3,w
 11200  0A1D  00AF               	movwf	___ftdiv@sign
 11201  0A1E  0820               	movf	___ftdiv@f2,w
 11202  0A1F  00A6               	movwf	??___ftdiv
 11203  0A20  0821               	movf	___ftdiv@f2+1,w
 11204  0A21  00A7               	movwf	??___ftdiv+1
 11205  0A22  0822               	movf	___ftdiv@f2+2,w
 11206  0A23  00A8               	movwf	??___ftdiv+2
 11207  0A24  3010               	movlw	16
 11208  0A25                     u3015:	
 11209  0A25  36A8               	lsrf	??___ftdiv+2,f
 11210  0A26  0CA7               	rrf	??___ftdiv+1,f
 11211  0A27  0CA6               	rrf	??___ftdiv,f
 11212  0A28  0B89               	decfsz	9,f
 11213  0A29  2A25               	goto	u3015
 11214  0A2A  0826               	movf	??___ftdiv,w
 11215  0A2B  00A9               	movwf	??___ftdiv+3
 11216  0A2C  0829               	movf	??___ftdiv+3,w
 11217  0A2D  06AF               	xorwf	___ftdiv@sign,f
 11218  0A2E  3080               	movlw	128
 11219  0A2F  00A6               	movwf	??___ftdiv
 11220  0A30  0826               	movf	??___ftdiv,w
 11221  0A31  05AF               	andwf	___ftdiv@sign,f
 11222  0A32  17A4               	bsf	___ftdiv@f1+1,7
 11223  0A33  30FF               	movlw	255
 11224  0A34  05A3               	andwf	___ftdiv@f1,f
 11225  0A35  30FF               	movlw	255
 11226  0A36  05A4               	andwf	___ftdiv@f1+1,f
 11227  0A37  3000               	movlw	0
 11228  0A38  05A5               	andwf	___ftdiv@f1+2,f
 11229  0A39  17A1               	bsf	___ftdiv@f2+1,7
 11230  0A3A  30FF               	movlw	255
 11231  0A3B  05A0               	andwf	___ftdiv@f2,f
 11232  0A3C  30FF               	movlw	255
 11233  0A3D  05A1               	andwf	___ftdiv@f2+1,f
 11234  0A3E  3000               	movlw	0
 11235  0A3F  05A2               	andwf	___ftdiv@f2+2,f
 11236  0A40  3018               	movlw	24
 11237  0A41  00A6               	movwf	??___ftdiv
 11238  0A42  0826               	movf	??___ftdiv,w
 11239  0A43  00AA               	movwf	___ftdiv@cntr
 11240  0A44                     l2834:	
 11241  0A44  3001               	movlw	1
 11242  0A45                     u3025:	
 11243  0A45  35AB               	lslf	___ftdiv@f3,f
 11244  0A46  0DAC               	rlf	___ftdiv@f3+1,f
 11245  0A47  0DAD               	rlf	___ftdiv@f3+2,f
 11246  0A48  0B89               	decfsz	9,f
 11247  0A49  2A45               	goto	u3025
 11248  0A4A  0822               	movf	___ftdiv@f2+2,w
 11249  0A4B  0225               	subwf	___ftdiv@f1+2,w
 11250  0A4C  1D03               	skipz
 11251  0A4D  2A54               	goto	u3035
 11252  0A4E  0821               	movf	___ftdiv@f2+1,w
 11253  0A4F  0224               	subwf	___ftdiv@f1+1,w
 11254  0A50  1D03               	skipz
 11255  0A51  2A54               	goto	u3035
 11256  0A52  0820               	movf	___ftdiv@f2,w
 11257  0A53  0223               	subwf	___ftdiv@f1,w
 11258  0A54                     u3035:	
 11259  0A54  1C03               	skipc
 11260  0A55  2A5D               	goto	l2842
 11261  0A56  0820               	movf	___ftdiv@f2,w
 11262  0A57  02A3               	subwf	___ftdiv@f1,f
 11263  0A58  0821               	movf	___ftdiv@f2+1,w
 11264  0A59  3BA4               	subwfb	___ftdiv@f1+1,f
 11265  0A5A  0822               	movf	___ftdiv@f2+2,w
 11266  0A5B  3BA5               	subwfb	___ftdiv@f1+2,f
 11267  0A5C  142B               	bsf	___ftdiv@f3,0
 11268  0A5D                     l2842:	
 11269  0A5D  3001               	movlw	1
 11270  0A5E                     u3045:	
 11271  0A5E  35A3               	lslf	___ftdiv@f1,f
 11272  0A5F  0DA4               	rlf	___ftdiv@f1+1,f
 11273  0A60  0DA5               	rlf	___ftdiv@f1+2,f
 11274  0A61  0B89               	decfsz	9,f
 11275  0A62  2A5E               	goto	u3045
 11276  0A63  3001               	movlw	1
 11277  0A64  02AA               	subwf	___ftdiv@cntr,f
 11278  0A65  1D03               	btfss	3,2
 11279  0A66  2A44               	goto	l2834
 11280  0A67  082B               	movf	___ftdiv@f3,w
 11281  0A68  00F0               	movwf	___ftpack@arg
 11282  0A69  082C               	movf	___ftdiv@f3+1,w
 11283  0A6A  00F1               	movwf	___ftpack@arg+1
 11284  0A6B  082D               	movf	___ftdiv@f3+2,w
 11285  0A6C  00F2               	movwf	___ftpack@arg+2
 11286  0A6D  082E               	movf	___ftdiv@exp,w
 11287  0A6E  00A6               	movwf	??___ftdiv
 11288  0A6F  0826               	movf	??___ftdiv,w
 11289  0A70  00F3               	movwf	___ftpack@exp
 11290  0A71  082F               	movf	___ftdiv@sign,w
 11291  0A72  00A7               	movwf	??___ftdiv+1
 11292  0A73  0827               	movf	??___ftdiv+1,w
 11293  0A74  00F4               	movwf	___ftpack@sign
 11294  0A75  3197  279C         	fcall	___ftpack
 11295  0A77  0870               	movf	?___ftpack,w
 11296  0A78  0020               	movlb	0	; select bank0
 11297  0A79  00A0               	movwf	?___ftdiv
 11298  0A7A  0871               	movf	?___ftpack+1,w
 11299  0A7B  00A1               	movwf	?___ftdiv+1
 11300  0A7C  0872               	movf	?___ftpack+2,w
 11301  0A7D  00A2               	movwf	?___ftdiv+2
 11302  0A7E  0008               	return
 11303  0A7F                     __end_of___ftdiv:	
 11304                           
 11305                           	psect	text18
 11306  14B4                     __ptext18:	
 11307 ;; *************** function _SYSTEM_Initialize *****************
 11308 ;; Defined at:
 11309 ;;		line 71 in file "system.c"
 11310 ;; Parameters:    Size  Location     Type
 11311 ;;		None
 11312 ;; Auto vars:     Size  Location     Type
 11313 ;;		None
 11314 ;; Return value:  Size  Location     Type
 11315 ;;                  1    wreg      void 
 11316 ;; Registers used:
 11317 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11318 ;; Tracked objects:
 11319 ;;		On entry : 0/0
 11320 ;;		On exit  : 0/0
 11321 ;;		Unchanged: 0/0
 11322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11323 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11324 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11325 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11326 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11327 ;;Total ram usage:        2 bytes
 11328 ;; Hardware stack levels used:    1
 11329 ;; Hardware stack levels required when called:    3
 11330 ;; This function calls:
 11331 ;;		_ADC_Initialize
 11332 ;;		_Init_Battery_State_Machine
 11333 ;;		_LCDClear
 11334 ;;		_LCDInit
 11335 ;;		_OSCILLATOR_Initialize
 11336 ;;		_PIN_MANAGER_Initialize
 11337 ;;		_PWM_Initialize
 11338 ;;		_TMR2_Initialize
 11339 ;;		_TMR4_Initialize
 11340 ;; This function is called by:
 11341 ;;		_main
 11342 ;; This function uses a non-reentrant model
 11343 ;;
 11344                           
 11345                           
 11346                           ;psect for function _SYSTEM_Initialize
 11347  14B4                     _SYSTEM_Initialize:	
 11348                           
 11349                           ;system.c: 73: PIN_MANAGER_Initialize();
 11350                           
 11351                           ;incstack = 0
 11352                           ; Regs used in _SYSTEM_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11353  14B4  3194  2442  3194   	fcall	_PIN_MANAGER_Initialize
 11354                           
 11355                           ;system.c: 74: OSCILLATOR_Initialize();
 11356  14B7  3192  22AB  3194   	fcall	_OSCILLATOR_Initialize
 11357                           
 11358                           ;system.c: 76: ADC_Initialize();
 11359  14BA  3193  2393  3194   	fcall	_ADC_Initialize
 11360                           
 11361                           ;system.c: 77: PWM_Initialize();
 11362  14BD  3193  23B2  3194   	fcall	_PWM_Initialize
 11363                           
 11364                           ;system.c: 79: TMR2_Initialize();
 11365  14C0  3192  22C0  3194   	fcall	_TMR2_Initialize
 11366                           
 11367                           ;system.c: 80: TMR4_Initialize();
 11368  14C3  3192  22CE  3194   	fcall	_TMR4_Initialize
 11369                           
 11370                           ;system.c: 81: Init_Battery_State_Machine(0);
 11371  14C6  3000               	movlw	0
 11372  14C7  3197  2739  3194   	fcall	_Init_Battery_State_Machine
 11373                           
 11374                           ;system.c: 82: Init_Battery_State_Machine(1);
 11375  14CA  3001               	movlw	1
 11376  14CB  3197  2739  3194   	fcall	_Init_Battery_State_Machine
 11377                           
 11378                           ;system.c: 83: LCDInit();
 11379  14CE  3194  2479  3194   	fcall	_LCDInit
 11380                           
 11381                           ;system.c: 84: _delay((unsigned long)((200)*(32000000/4000.0)));
 11382  14D1  3009               	movlw	9
 11383  14D2  0020               	movlb	0	; select bank0
 11384  14D3  00C4               	movwf	??_SYSTEM_Initialize+1
 11385  14D4  301E               	movlw	30
 11386  14D5  00C3               	movwf	??_SYSTEM_Initialize
 11387  14D6  30E4               	movlw	228
 11388  14D7                     u4007:	
 11389  14D7  0B89               	decfsz	9,f
 11390  14D8  2CD7               	goto	u4007
 11391  14D9  0BC3               	decfsz	??_SYSTEM_Initialize,f
 11392  14DA  2CD7               	goto	u4007
 11393  14DB  0BC4               	decfsz	??_SYSTEM_Initialize+1,f
 11394  14DC  2CD7               	goto	u4007
 11395  14DD  0000               	nop
 11396                           
 11397                           ;system.c: 85: LCDClear();
 11398  14DE  3180  2004  3194   	fcall	_LCDClear
 11399                           
 11400                           ;system.c: 86: _delay((unsigned long)((200)*(32000000/4000.0)));
 11401  14E1  3009               	movlw	9
 11402  14E2  0020               	movlb	0	; select bank0
 11403  14E3  00C4               	movwf	??_SYSTEM_Initialize+1
 11404  14E4  301E               	movlw	30
 11405  14E5  00C3               	movwf	??_SYSTEM_Initialize
 11406  14E6  30E4               	movlw	228
 11407  14E7                     u4017:	
 11408  14E7  0B89               	decfsz	9,f
 11409  14E8  2CE7               	goto	u4017
 11410  14E9  0BC3               	decfsz	??_SYSTEM_Initialize,f
 11411  14EA  2CE7               	goto	u4017
 11412  14EB  0BC4               	decfsz	??_SYSTEM_Initialize+1,f
 11413  14EC  2CE7               	goto	u4017
 11414  14ED  0000               	nop
 11415  14EE  0008               	return
 11416  14EF                     __end_of_SYSTEM_Initialize:	
 11417                           
 11418                           	psect	text19
 11419  12CE                     __ptext19:	
 11420 ;; *************** function _TMR4_Initialize *****************
 11421 ;; Defined at:
 11422 ;;		line 25 in file "tmr.c"
 11423 ;; Parameters:    Size  Location     Type
 11424 ;;		None
 11425 ;; Auto vars:     Size  Location     Type
 11426 ;;		None
 11427 ;; Return value:  Size  Location     Type
 11428 ;;                  1    wreg      void 
 11429 ;; Registers used:
 11430 ;;		wreg, status,2
 11431 ;; Tracked objects:
 11432 ;;		On entry : 0/0
 11433 ;;		On exit  : 0/0
 11434 ;;		Unchanged: 0/0
 11435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11436 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11437 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11438 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11439 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11440 ;;Total ram usage:        0 bytes
 11441 ;; Hardware stack levels used:    1
 11442 ;; This function calls:
 11443 ;;		Nothing
 11444 ;; This function is called by:
 11445 ;;		_SYSTEM_Initialize
 11446 ;; This function uses a non-reentrant model
 11447 ;;
 11448                           
 11449                           
 11450                           ;psect for function _TMR4_Initialize
 11451  12CE                     _TMR4_Initialize:	
 11452                           
 11453                           ;tmr.c: 27: T4CON = 0x00;
 11454                           
 11455                           ;incstack = 0
 11456                           ; Regs used in _TMR4_Initialize: [wreg+status,2]
 11457  12CE  0025               	movlb	5	; select bank5
 11458  12CF  0194               	clrf	20	;volatile
 11459                           
 11460                           ;tmr.c: 29: T4CLKCON = 0x01;
 11461  12D0  3001               	movlw	1
 11462  12D1  0096               	movwf	22	;volatile
 11463                           
 11464                           ;tmr.c: 31: T4HLT = 0x00;
 11465  12D2  0195               	clrf	21	;volatile
 11466                           
 11467                           ;tmr.c: 33: T4RST = 0x00;
 11468  12D3  0197               	clrf	23	;volatile
 11469                           
 11470                           ;tmr.c: 35: T4PR = 0xFE;
 11471  12D4  30FE               	movlw	254
 11472  12D5  0093               	movwf	19	;volatile
 11473                           
 11474                           ;tmr.c: 39: T4TMR = 0x00;
 11475  12D6  0192               	clrf	18	;volatile
 11476                           
 11477                           ;tmr.c: 41: PIR4bits.TMR4IF = 0;
 11478  12D7  002E               	movlb	14	; select bank14
 11479  12D8  1190               	bcf	16,3	;volatile
 11480                           
 11481                           ;tmr.c: 43: T4CONbits.TMR4ON = 1;
 11482  12D9  0025               	movlb	5	; select bank5
 11483  12DA  1794               	bsf	20,7	;volatile
 11484  12DB  0008               	return
 11485  12DC                     __end_of_TMR4_Initialize:	
 11486                           
 11487                           	psect	text20
 11488  12C0                     __ptext20:	
 11489 ;; *************** function _TMR2_Initialize *****************
 11490 ;; Defined at:
 11491 ;;		line 3 in file "tmr.c"
 11492 ;; Parameters:    Size  Location     Type
 11493 ;;		None
 11494 ;; Auto vars:     Size  Location     Type
 11495 ;;		None
 11496 ;; Return value:  Size  Location     Type
 11497 ;;                  1    wreg      void 
 11498 ;; Registers used:
 11499 ;;		wreg, status,2
 11500 ;; Tracked objects:
 11501 ;;		On entry : 0/0
 11502 ;;		On exit  : 0/0
 11503 ;;		Unchanged: 0/0
 11504 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11505 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11506 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11507 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11508 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11509 ;;Total ram usage:        0 bytes
 11510 ;; Hardware stack levels used:    1
 11511 ;; This function calls:
 11512 ;;		Nothing
 11513 ;; This function is called by:
 11514 ;;		_SYSTEM_Initialize
 11515 ;; This function uses a non-reentrant model
 11516 ;;
 11517                           
 11518                           
 11519                           ;psect for function _TMR2_Initialize
 11520  12C0                     _TMR2_Initialize:	
 11521                           
 11522                           ;tmr.c: 5: T2CON = 0x00;
 11523                           
 11524                           ;incstack = 0
 11525                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
 11526  12C0  0025               	movlb	5	; select bank5
 11527  12C1  018E               	clrf	14	;volatile
 11528                           
 11529                           ;tmr.c: 7: T2CLKCON = 0x01;
 11530  12C2  3001               	movlw	1
 11531  12C3  0090               	movwf	16	;volatile
 11532                           
 11533                           ;tmr.c: 9: T2HLT = 0x00;
 11534  12C4  018F               	clrf	15	;volatile
 11535                           
 11536                           ;tmr.c: 11: T2RST = 0x00;
 11537  12C5  0191               	clrf	17	;volatile
 11538                           
 11539                           ;tmr.c: 13: T2PR = 0xFE;
 11540  12C6  30FE               	movlw	254
 11541  12C7  008D               	movwf	13	;volatile
 11542                           
 11543                           ;tmr.c: 18: T2TMR = 0x00;
 11544  12C8  018C               	clrf	12	;volatile
 11545                           
 11546                           ;tmr.c: 20: PIR4bits.TMR2IF = 0;
 11547  12C9  002E               	movlb	14	; select bank14
 11548  12CA  1090               	bcf	16,1	;volatile
 11549                           
 11550                           ;tmr.c: 22: T2CONbits.TMR2ON = 1;
 11551  12CB  0025               	movlb	5	; select bank5
 11552  12CC  178E               	bsf	14,7	;volatile
 11553  12CD  0008               	return
 11554  12CE                     __end_of_TMR2_Initialize:	
 11555                           
 11556                           	psect	text21
 11557  13B2                     __ptext21:	
 11558 ;; *************** function _PWM_Initialize *****************
 11559 ;; Defined at:
 11560 ;;		line 3 in file "pwm.c"
 11561 ;; Parameters:    Size  Location     Type
 11562 ;;		None
 11563 ;; Auto vars:     Size  Location     Type
 11564 ;;		None
 11565 ;; Return value:  Size  Location     Type
 11566 ;;                  1    wreg      void 
 11567 ;; Registers used:
 11568 ;;		wreg, status,2, status,0
 11569 ;; Tracked objects:
 11570 ;;		On entry : 0/0
 11571 ;;		On exit  : 0/0
 11572 ;;		Unchanged: 0/0
 11573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11574 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11575 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11576 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11577 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11578 ;;Total ram usage:        0 bytes
 11579 ;; Hardware stack levels used:    1
 11580 ;; This function calls:
 11581 ;;		Nothing
 11582 ;; This function is called by:
 11583 ;;		_SYSTEM_Initialize
 11584 ;; This function uses a non-reentrant model
 11585 ;;
 11586                           
 11587                           
 11588                           ;psect for function _PWM_Initialize
 11589  13B2                     _PWM_Initialize:	
 11590                           
 11591                           ;pwm.c: 5: PWM6CON = 0x80;
 11592                           
 11593                           ;incstack = 0
 11594                           ; Regs used in _PWM_Initialize: [wreg+status,2+status,0]
 11595  13B2  3080               	movlw	128
 11596  13B3  0027               	movlb	7	; select bank7
 11597  13B4  008E               	movwf	14	;volatile
 11598                           
 11599                           ;pwm.c: 7: PWM6DCH = 0x00;
 11600  13B5  018D               	clrf	13	;volatile
 11601                           
 11602                           ;pwm.c: 9: PWM6DCL = 0x00;
 11603  13B6  018C               	clrf	12	;volatile
 11604                           
 11605                           ;pwm.c: 11: CCPTMRS1bits.P6TSEL = 0x01;
 11606  13B7  0024               	movlb	4	; select bank4
 11607  13B8  081F               	movf	31,w	;volatile
 11608  13B9  39F3               	andlw	-13
 11609  13BA  3804               	iorlw	4
 11610  13BB  009F               	movwf	31	;volatile
 11611                           
 11612                           ;pwm.c: 14: PWM7CON = 0x80;
 11613  13BC  3080               	movlw	128
 11614  13BD  0027               	movlb	7	; select bank7
 11615  13BE  0092               	movwf	18	;volatile
 11616                           
 11617                           ;pwm.c: 16: PWM7DCH = 0x00;
 11618  13BF  0191               	clrf	17	;volatile
 11619                           
 11620                           ;pwm.c: 18: PWM7DCL = 0x00;
 11621  13C0  0190               	clrf	16	;volatile
 11622                           
 11623                           ;pwm.c: 20: CCPTMRS1bits.P7TSEL = 0x02;
 11624  13C1  0024               	movlb	4	; select bank4
 11625  13C2  081F               	movf	31,w	;volatile
 11626  13C3  39CF               	andlw	-49
 11627  13C4  3820               	iorlw	32
 11628  13C5  009F               	movwf	31	;volatile
 11629                           
 11630                           ;pwm.c: 23: CCP1CONbits.CCP1EN = 1;
 11631  13C6  0026               	movlb	6	; select bank6
 11632  13C7  178E               	bsf	14,7	;volatile
 11633                           
 11634                           ;pwm.c: 24: CCP1CONbits.CCP1FMT = 1;
 11635  13C8  160E               	bsf	14,4	;volatile
 11636                           
 11637                           ;pwm.c: 25: CCP1CONbits.CCP1MODE = 0xF;
 11638  13C9  300F               	movlw	15
 11639  13CA  048E               	iorwf	14,f	;volatile
 11640                           
 11641                           ;pwm.c: 26: CCPTMRS0bits.C1TSEL = 0x1;
 11642  13CB  0024               	movlb	4	; select bank4
 11643  13CC  081E               	movf	30,w	;volatile
 11644  13CD  39FC               	andlw	-4
 11645  13CE  3801               	iorlw	1
 11646  13CF  009E               	movwf	30	;volatile
 11647  13D0  0008               	return
 11648  13D1                     __end_of_PWM_Initialize:	
 11649                           
 11650                           	psect	text22
 11651  1442                     __ptext22:	
 11652 ;; *************** function _PIN_MANAGER_Initialize *****************
 11653 ;; Defined at:
 11654 ;;		line 5 in file "pin_manager.c"
 11655 ;; Parameters:    Size  Location     Type
 11656 ;;		None
 11657 ;; Auto vars:     Size  Location     Type
 11658 ;;  state           1    0[COMMON] char 
 11659 ;; Return value:  Size  Location     Type
 11660 ;;                  1    wreg      void 
 11661 ;; Registers used:
 11662 ;;		wreg, status,2
 11663 ;; Tracked objects:
 11664 ;;		On entry : 0/0
 11665 ;;		On exit  : 0/0
 11666 ;;		Unchanged: 0/0
 11667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11668 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11669 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11670 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11671 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11672 ;;Total ram usage:        1 bytes
 11673 ;; Hardware stack levels used:    1
 11674 ;; This function calls:
 11675 ;;		Nothing
 11676 ;; This function is called by:
 11677 ;;		_SYSTEM_Initialize
 11678 ;; This function uses a non-reentrant model
 11679 ;;
 11680                           
 11681                           
 11682                           ;psect for function _PIN_MANAGER_Initialize
 11683  1442                     _PIN_MANAGER_Initialize:	
 11684                           
 11685                           ;pin_manager.c: 7: LATA = 0x20;
 11686                           
 11687                           ;incstack = 0
 11688                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
 11689  1442  3020               	movlw	32
 11690  1443  0020               	movlb	0	; select bank0
 11691  1444  0096               	movwf	22	;volatile
 11692                           
 11693                           ;pin_manager.c: 8: LATB = 0x00;
 11694  1445  0197               	clrf	23	;volatile
 11695                           
 11696                           ;pin_manager.c: 9: LATC = 0x00;
 11697  1446  0198               	clrf	24	;volatile
 11698                           
 11699                           ;pin_manager.c: 11: WPUA = 0x00;
 11700  1447  003E               	movlb	30	; select bank30
 11701  1448  01B9               	clrf	57	;volatile
 11702                           
 11703                           ;pin_manager.c: 12: WPUB = 0x00;
 11704  1449  01C4               	clrf	68	;volatile
 11705                           
 11706                           ;pin_manager.c: 13: WPUC = 0x00;
 11707  144A  01CF               	clrf	79	;volatile
 11708                           
 11709                           ;pin_manager.c: 14: WPUE = 0x8;
 11710  144B  3008               	movlw	8
 11711  144C  00E5               	movwf	101	;volatile
 11712                           
 11713                           ;pin_manager.c: 16: TRISA = 0x00;
 11714  144D  0020               	movlb	0	; select bank0
 11715  144E  0191               	clrf	17	;volatile
 11716                           
 11717                           ;pin_manager.c: 17: TRISB = 0x0E;
 11718  144F  300E               	movlw	14
 11719  1450  0092               	movwf	18	;volatile
 11720                           
 11721                           ;pin_manager.c: 18: TRISC = 0xFF;
 11722  1451  30FF               	movlw	255
 11723  1452  0093               	movwf	19	;volatile
 11724                           
 11725                           ;pin_manager.c: 20: ANSELA = 0x00;
 11726  1453  003E               	movlb	30	; select bank30
 11727  1454  01B8               	clrf	56	;volatile
 11728                           
 11729                           ;pin_manager.c: 21: ANSELB = 0x0A;
 11730  1455  300A               	movlw	10
 11731  1456  00C3               	movwf	67	;volatile
 11732                           
 11733                           ;pin_manager.c: 22: ANSELC = 0xFF;
 11734  1457  30FF               	movlw	255
 11735  1458  00CE               	movwf	78	;volatile
 11736                           
 11737                           ;pin_manager.c: 25: PIE0bits.IOCIE = 0;
 11738  1459  002E               	movlb	14	; select bank14
 11739  145A  1216               	bcf	22,4	;volatile
 11740                           
 11741                           ;pin_manager.c: 26: int8_t state = GIE;
 11742  145B  3000               	movlw	0
 11743  145C  1B8B               	btfsc	11,7	;volatile
 11744  145D  3001               	movlw	1
 11745  145E  00F0               	movwf	PIN_MANAGER_Initialize@state
 11746                           
 11747                           ;pin_manager.c: 27: GIE = 0;
 11748  145F  138B               	bcf	11,7	;volatile
 11749                           
 11750                           ;pin_manager.c: 28: PPSLOCK = 0x55;
 11751  1460  3055               	movlw	85
 11752  1461  003D               	movlb	29	; select bank29
 11753  1462  008F               	movwf	15	;volsfr
 11754                           
 11755                           ;pin_manager.c: 29: PPSLOCK = 0xAA;
 11756  1463  30AA               	movlw	170
 11757  1464  008F               	movwf	15	;volsfr
 11758                           
 11759                           ;pin_manager.c: 30: PPSLOCKbits.PPSLOCKED = 0x00;
 11760  1465  100F               	bcf	15,0	;volsfr
 11761                           
 11762                           ;pin_manager.c: 32: RA6PPS = 0x0E;
 11763  1466  300E               	movlw	14
 11764  1467  003E               	movlb	30	; select bank30
 11765  1468  0096               	movwf	22	;volatile
 11766                           
 11767                           ;pin_manager.c: 33: RA7PPS = 0x0F;
 11768  1469  300F               	movlw	15
 11769  146A  0097               	movwf	23	;volatile
 11770                           
 11771                           ;pin_manager.c: 34: RB0PPS = 0x09;
 11772  146B  3009               	movlw	9
 11773  146C  0098               	movwf	24	;volatile
 11774                           
 11775                           ;pin_manager.c: 35: PPSLOCK = 0x55;
 11776  146D  3055               	movlw	85
 11777  146E  003D               	movlb	29	; select bank29
 11778  146F  008F               	movwf	15	;volsfr
 11779                           
 11780                           ;pin_manager.c: 36: PPSLOCK = 0xAA;
 11781  1470  30AA               	movlw	170
 11782  1471  008F               	movwf	15	;volsfr
 11783                           
 11784                           ;pin_manager.c: 37: PPSLOCKbits.PPSLOCKED = 0x01;
 11785  1472  140F               	bsf	15,0	;volsfr
 11786                           
 11787                           ;pin_manager.c: 38: GIE = state;
 11788  1473  1C70               	btfss	PIN_MANAGER_Initialize@state,0
 11789  1474  2C77               	goto	u2740
 11790  1475  178B               	bsf	11,7	;volatile
 11791  1476  0008               	return
 11792  1477                     u2740:	
 11793  1477  138B               	bcf	11,7	;volatile
 11794  1478  0008               	return
 11795  1479                     __end_of_PIN_MANAGER_Initialize:	
 11796                           
 11797                           	psect	text23
 11798  12AB                     __ptext23:	
 11799 ;; *************** function _OSCILLATOR_Initialize *****************
 11800 ;; Defined at:
 11801 ;;		line 89 in file "system.c"
 11802 ;; Parameters:    Size  Location     Type
 11803 ;;		None
 11804 ;; Auto vars:     Size  Location     Type
 11805 ;;		None
 11806 ;; Return value:  Size  Location     Type
 11807 ;;                  1    wreg      void 
 11808 ;; Registers used:
 11809 ;;		wreg, status,2
 11810 ;; Tracked objects:
 11811 ;;		On entry : 0/0
 11812 ;;		On exit  : 0/0
 11813 ;;		Unchanged: 0/0
 11814 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11815 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11816 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11817 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11818 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11819 ;;Total ram usage:        0 bytes
 11820 ;; Hardware stack levels used:    1
 11821 ;; This function calls:
 11822 ;;		Nothing
 11823 ;; This function is called by:
 11824 ;;		_SYSTEM_Initialize
 11825 ;; This function uses a non-reentrant model
 11826 ;;
 11827                           
 11828                           
 11829                           ;psect for function _OSCILLATOR_Initialize
 11830  12AB                     _OSCILLATOR_Initialize:	
 11831                           
 11832                           ;system.c: 91: OSCCON1 = 0x60;
 11833                           
 11834                           ;incstack = 0
 11835                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 11836  12AB  3060               	movlw	96
 11837  12AC  0031               	movlb	17	; select bank17
 11838  12AD  008D               	movwf	13	;volatile
 11839                           
 11840                           ;system.c: 92: OSCCON3 = 0x00;
 11841  12AE  018F               	clrf	15	;volatile
 11842                           
 11843                           ;system.c: 93: OSCEN = 0x00;
 11844  12AF  0191               	clrf	17	;volatile
 11845                           
 11846                           ;system.c: 94: OSCFRQ = 0x06;
 11847  12B0  3006               	movlw	6
 11848  12B1  0093               	movwf	19	;volatile
 11849                           
 11850                           ;system.c: 95: OSCTUNE = 0x00;
 11851  12B2  0192               	clrf	18	;volatile
 11852  12B3  0008               	return
 11853  12B4                     __end_of_OSCILLATOR_Initialize:	
 11854                           
 11855                           	psect	text24
 11856  1479                     __ptext24:	
 11857 ;; *************** function _LCDInit *****************
 11858 ;; Defined at:
 11859 ;;		line 247 in file "lcd.c"
 11860 ;; Parameters:    Size  Location     Type
 11861 ;;		None
 11862 ;; Auto vars:     Size  Location     Type
 11863 ;;		None
 11864 ;; Return value:  Size  Location     Type
 11865 ;;                  1    wreg      void 
 11866 ;; Registers used:
 11867 ;;		wreg, status,2, status,0, pclath, cstack
 11868 ;; Tracked objects:
 11869 ;;		On entry : 0/0
 11870 ;;		On exit  : 0/0
 11871 ;;		Unchanged: 0/0
 11872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11873 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11874 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11875 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11876 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11877 ;;Total ram usage:        1 bytes
 11878 ;; Hardware stack levels used:    1
 11879 ;; Hardware stack levels required when called:    1
 11880 ;; This function calls:
 11881 ;;		_LCDWrite
 11882 ;; This function is called by:
 11883 ;;		_SYSTEM_Initialize
 11884 ;;		_main
 11885 ;; This function uses a non-reentrant model
 11886 ;;
 11887                           
 11888                           
 11889                           ;psect for function _LCDInit
 11890  1479                     _LCDInit:	
 11891                           
 11892                           ;lcd.c: 249: TRISAbits.TRISA0 = 0;
 11893                           
 11894                           ;incstack = 0
 11895                           ; Regs used in _LCDInit: [wreg+status,2+status,0+pclath+cstack]
 11896  1479  0020               	movlb	0	; select bank0
 11897  147A  1011               	bcf	17,0	;volatile
 11898                           
 11899                           ;lcd.c: 250: TRISAbits.TRISA1 = 0;
 11900  147B  1091               	bcf	17,1	;volatile
 11901                           
 11902                           ;lcd.c: 251: TRISAbits.TRISA2 = 0;
 11903  147C  1111               	bcf	17,2	;volatile
 11904                           
 11905                           ;lcd.c: 252: TRISAbits.TRISA3 = 0;
 11906  147D  1191               	bcf	17,3	;volatile
 11907                           
 11908                           ;lcd.c: 253: TRISAbits.TRISA4 = 0;
 11909  147E  1211               	bcf	17,4	;volatile
 11910                           
 11911                           ;lcd.c: 254: LATAbits.LATA3 = 0;
 11912  147F  1196               	bcf	22,3	;volatile
 11913                           
 11914                           ;lcd.c: 255: LATAbits.LATA4 = 0;
 11915  1480  1216               	bcf	22,4	;volatile
 11916                           
 11917                           ;lcd.c: 256: LATAbits.LATA2 = 0;
 11918  1481  1116               	bcf	22,2	;volatile
 11919                           
 11920                           ;lcd.c: 257: LATAbits.LATA0 = 0;
 11921  1482  1016               	bcf	22,0	;volatile
 11922                           
 11923                           ;lcd.c: 259: LATAbits.LATA0 = 1;
 11924  1483  1416               	bsf	22,0	;volatile
 11925                           
 11926                           ;lcd.c: 261: LCDWrite(0, 0x21);
 11927  1484  3021               	movlw	33
 11928  1485  00F5               	movwf	??_LCDInit
 11929  1486  0875               	movf	??_LCDInit,w
 11930  1487  00F0               	movwf	LCDWrite@data
 11931  1488  3000               	movlw	0
 11932  1489  3193  23F1  3194   	fcall	_LCDWrite
 11933                           
 11934                           ;lcd.c: 269: LCDWrite(0, 0XB9);
 11935  148C  30B9               	movlw	185
 11936  148D  00F5               	movwf	??_LCDInit
 11937  148E  0875               	movf	??_LCDInit,w
 11938  148F  00F0               	movwf	LCDWrite@data
 11939  1490  3000               	movlw	0
 11940  1491  3193  23F1  3194   	fcall	_LCDWrite
 11941                           
 11942                           ;lcd.c: 271: LCDWrite(0, 0x04);
 11943  1494  3004               	movlw	4
 11944  1495  00F5               	movwf	??_LCDInit
 11945  1496  0875               	movf	??_LCDInit,w
 11946  1497  00F0               	movwf	LCDWrite@data
 11947  1498  3000               	movlw	0
 11948  1499  3193  23F1  3194   	fcall	_LCDWrite
 11949                           
 11950                           ;lcd.c: 273: LCDWrite(0, 0x14);
 11951  149C  3014               	movlw	20
 11952  149D  00F5               	movwf	??_LCDInit
 11953  149E  0875               	movf	??_LCDInit,w
 11954  149F  00F0               	movwf	LCDWrite@data
 11955  14A0  3000               	movlw	0
 11956  14A1  3193  23F1  3194   	fcall	_LCDWrite
 11957                           
 11958                           ;lcd.c: 275: LCDWrite(0, 0x20);
 11959  14A4  3020               	movlw	32
 11960  14A5  00F5               	movwf	??_LCDInit
 11961  14A6  0875               	movf	??_LCDInit,w
 11962  14A7  00F0               	movwf	LCDWrite@data
 11963  14A8  3000               	movlw	0
 11964  14A9  3193  23F1  3194   	fcall	_LCDWrite
 11965                           
 11966                           ;lcd.c: 277: LCDWrite(0, 0x0C);
 11967  14AC  300C               	movlw	12
 11968  14AD  00F5               	movwf	??_LCDInit
 11969  14AE  0875               	movf	??_LCDInit,w
 11970  14AF  00F0               	movwf	LCDWrite@data
 11971  14B0  3000               	movlw	0
 11972  14B1  3193  23F1         	fcall	_LCDWrite
 11973  14B3  0008               	return
 11974  14B4                     __end_of_LCDInit:	
 11975                           
 11976                           	psect	text25
 11977  0004                     __ptext25:	
 11978 ;; *************** function _LCDClear *****************
 11979 ;; Defined at:
 11980 ;;		line 182 in file "lcd.c"
 11981 ;; Parameters:    Size  Location     Type
 11982 ;;		None
 11983 ;; Auto vars:     Size  Location     Type
 11984 ;;  index           2    9[COMMON] int 
 11985 ;; Return value:  Size  Location     Type
 11986 ;;                  1    wreg      void 
 11987 ;; Registers used:
 11988 ;;		wreg, status,2, status,0, pclath, cstack
 11989 ;; Tracked objects:
 11990 ;;		On entry : 0/0
 11991 ;;		On exit  : 0/0
 11992 ;;		Unchanged: 0/0
 11993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11994 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11995 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11996 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11997 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11998 ;;Total ram usage:        3 bytes
 11999 ;; Hardware stack levels used:    1
 12000 ;; Hardware stack levels required when called:    2
 12001 ;; This function calls:
 12002 ;;		_LCDWrite
 12003 ;;		_gotoXY
 12004 ;; This function is called by:
 12005 ;;		_SYSTEM_Initialize
 12006 ;;		_main
 12007 ;; This function uses a non-reentrant model
 12008 ;;
 12009                           
 12010                           
 12011                           ;psect for function _LCDClear
 12012  0004                     _LCDClear:	
 12013                           
 12014                           ;lcd.c: 184: int index;
 12015                           ;lcd.c: 185: for (index = 0 ; index < (84 * 48 / 8) ; index++)
 12016                           
 12017                           ;incstack = 0
 12018                           ; Regs used in _LCDClear: [wreg+status,2+status,0+pclath+cstack]
 12019  0004  01F9               	clrf	LCDClear@index
 12020  0005  01FA               	clrf	LCDClear@index+1
 12021  0006  087A               	movf	LCDClear@index+1,w
 12022  0007  3A80               	xorlw	128
 12023  0008  00F8               	movwf	??_LCDClear
 12024  0009  3081               	movlw	129
 12025  000A  0278               	subwf	??_LCDClear,w
 12026  000B  1D03               	skipz
 12027  000C  280F               	goto	u2725
 12028  000D  30F8               	movlw	248
 12029  000E  0279               	subwf	LCDClear@index,w
 12030  000F                     u2725:	
 12031  000F  1803               	btfsc	3,0
 12032  0010  2825               	goto	l2608
 12033  0011                     l2602:	
 12034                           
 12035                           ;lcd.c: 186: LCDWrite(1, 0x00);
 12036  0011  01F0               	clrf	LCDWrite@data
 12037  0012  3001               	movlw	1
 12038  0013  3193  23F1  3180   	fcall	_LCDWrite
 12039  0016  3001               	movlw	1
 12040  0017  07F9               	addwf	LCDClear@index,f
 12041  0018  3000               	movlw	0
 12042  0019  3DFA               	addwfc	LCDClear@index+1,f
 12043  001A  087A               	movf	LCDClear@index+1,w
 12044  001B  3A80               	xorlw	128
 12045  001C  00F8               	movwf	??_LCDClear
 12046  001D  3081               	movlw	129
 12047  001E  0278               	subwf	??_LCDClear,w
 12048  001F  1D03               	skipz
 12049  0020  2823               	goto	u2735
 12050  0021  30F8               	movlw	248
 12051  0022  0279               	subwf	LCDClear@index,w
 12052  0023                     u2735:	
 12053  0023  1C03               	skipc
 12054  0024  2811               	goto	l2602
 12055  0025                     l2608:	
 12056                           
 12057                           ;lcd.c: 187: gotoXY(0, 0);
 12058  0025  01F5               	clrf	gotoXY@y
 12059  0026  3000               	movlw	0
 12060  0027  3192  22DC         	fcall	_gotoXY
 12061  0029  0008               	return
 12062  002A                     __end_of_LCDClear:	
 12063                           
 12064                           	psect	text26
 12065  12DC                     __ptext26:	
 12066 ;; *************** function _gotoXY *****************
 12067 ;; Defined at:
 12068 ;;		line 124 in file "lcd.c"
 12069 ;; Parameters:    Size  Location     Type
 12070 ;;  x               1    wreg     unsigned char 
 12071 ;;  y               1    5[COMMON] unsigned char 
 12072 ;; Auto vars:     Size  Location     Type
 12073 ;;  x               1    7[COMMON] unsigned char 
 12074 ;; Return value:  Size  Location     Type
 12075 ;;                  1    wreg      void 
 12076 ;; Registers used:
 12077 ;;		wreg, status,2, status,0, pclath, cstack
 12078 ;; Tracked objects:
 12079 ;;		On entry : 0/0
 12080 ;;		On exit  : 0/0
 12081 ;;		Unchanged: 0/0
 12082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12083 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12084 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12085 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12086 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12087 ;;Total ram usage:        3 bytes
 12088 ;; Hardware stack levels used:    1
 12089 ;; Hardware stack levels required when called:    1
 12090 ;; This function calls:
 12091 ;;		_LCDWrite
 12092 ;; This function is called by:
 12093 ;;		_LCDClear
 12094 ;;		_main
 12095 ;; This function uses a non-reentrant model
 12096 ;;
 12097                           
 12098                           
 12099                           ;psect for function _gotoXY
 12100  12DC                     _gotoXY:	
 12101                           
 12102                           ;incstack = 0
 12103                           ; Regs used in _gotoXY: [wreg+status,2+status,0+pclath+cstack]
 12104                           ;gotoXY@x stored from wreg
 12105  12DC  00F7               	movwf	gotoXY@x
 12106                           
 12107                           ;lcd.c: 126: LCDWrite(0,(uint8_t)(0x80 | x));
 12108  12DD  0877               	movf	gotoXY@x,w
 12109  12DE  3880               	iorlw	128
 12110  12DF  00F6               	movwf	??_gotoXY
 12111  12E0  0876               	movf	??_gotoXY,w
 12112  12E1  00F0               	movwf	LCDWrite@data
 12113  12E2  3000               	movlw	0
 12114  12E3  3193  23F1  3192   	fcall	_LCDWrite
 12115                           
 12116                           ;lcd.c: 127: LCDWrite(0,(uint8_t)(0x40 | y));
 12117  12E6  0875               	movf	gotoXY@y,w
 12118  12E7  3840               	iorlw	64
 12119  12E8  00F6               	movwf	??_gotoXY
 12120  12E9  0876               	movf	??_gotoXY,w
 12121  12EA  00F0               	movwf	LCDWrite@data
 12122  12EB  3000               	movlw	0
 12123  12EC  3193  23F1         	fcall	_LCDWrite
 12124  12EE  0008               	return
 12125  12EF                     __end_of_gotoXY:	
 12126                           
 12127                           	psect	text27
 12128  1739                     __ptext27:	
 12129 ;; *************** function _Init_Battery_State_Machine *****************
 12130 ;; Defined at:
 12131 ;;		line 18 in file "battery_charger.c"
 12132 ;; Parameters:    Size  Location     Type
 12133 ;;  z               1    wreg     unsigned char 
 12134 ;; Auto vars:     Size  Location     Type
 12135 ;;  z               1   34[BANK0 ] unsigned char 
 12136 ;; Return value:  Size  Location     Type
 12137 ;;                  1    wreg      void 
 12138 ;; Registers used:
 12139 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12140 ;; Tracked objects:
 12141 ;;		On entry : 0/0
 12142 ;;		On exit  : 0/0
 12143 ;;		Unchanged: 0/0
 12144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12145 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12146 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12147 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12148 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12149 ;;Total ram usage:        5 bytes
 12150 ;; Hardware stack levels used:    1
 12151 ;; Hardware stack levels required when called:    2
 12152 ;; This function calls:
 12153 ;;		___awtoft
 12154 ;;		___ftmul
 12155 ;;		___fttol
 12156 ;; This function is called by:
 12157 ;;		_SYSTEM_Initialize
 12158 ;; This function uses a non-reentrant model
 12159 ;;
 12160                           
 12161                           
 12162                           ;psect for function _Init_Battery_State_Machine
 12163  1739                     _Init_Battery_State_Machine:	
 12164                           
 12165                           ;incstack = 0
 12166                           ; Regs used in _Init_Battery_State_Machine: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 12167                           ;Init_Battery_State_Machine@z stored from wreg
 12168  1739  0020               	movlb	0	; select bank0
 12169  173A  00C2               	movwf	Init_Battery_State_Machine@z
 12170                           
 12171                           ;battery_charger.c: 20: batteryState[z] =PRECHARGE;
 12172  173B  3003               	movlw	3
 12173  173C  00BE               	movwf	??_Init_Battery_State_Machine
 12174  173D  0842               	movf	Init_Battery_State_Machine@z,w
 12175  173E  3E65               	addlw	(low (_batteryState| 0))& (0+255)
 12176  173F  0086               	movwf	6
 12177  1740  0187               	clrf	7
 12178  1741  083E               	movf	??_Init_Battery_State_Machine,w
 12179  1742  0081               	movwf	1
 12180                           
 12181                           ;battery_charger.c: 21: stateCounter[z] =5;
 12182  1743  3542               	lslf	Init_Battery_State_Machine@z,w
 12183  1744  3EC0               	addlw	(low (_stateCounter| 0))& (0+255)
 12184  1745  0086               	movwf	6
 12185  1746  0187               	clrf	7
 12186  1747  3005               	movlw	5
 12187  1748  3FC0               	movwi [0]fsr1
 12188  1749  3000               	movlw	0
 12189  174A  3FC1               	movwi [1]fsr1
 12190                           
 12191                           ;battery_charger.c: 22: Iref[z] =10;
 12192  174B  3542               	lslf	Init_Battery_State_Machine@z,w
 12193  174C  3EC4               	addlw	(low (_Iref| 0))& (0+255)
 12194  174D  0086               	movwf	6
 12195  174E  0187               	clrf	7
 12196  174F  300A               	movlw	10
 12197  1750  3FC0               	movwi [0]fsr1
 12198  1751  3000               	movlw	0
 12199  1752  3FC1               	movwi [1]fsr1
 12200                           
 12201                           ;battery_charger.c: 23: Vref[z] =1425+(int16_t)((250-batteryTemp)*.24);
 12202  1753  096D               	comf	_batteryTemp,w
 12203  1754  00BE               	movwf	??_Init_Battery_State_Machine
 12204  1755  096E               	comf	_batteryTemp+1,w
 12205  1756  00BF               	movwf	??_Init_Battery_State_Machine+1
 12206  1757  0ABE               	incf	??_Init_Battery_State_Machine,f
 12207  1758  1903               	skipnz
 12208  1759  0ABF               	incf	??_Init_Battery_State_Machine+1,f
 12209  175A  083E               	movf	??_Init_Battery_State_Machine,w
 12210  175B  3EFA               	addlw	250
 12211  175C  00F8               	movwf	___awtoft@c
 12212  175D  3000               	movlw	0
 12213  175E  3D3F               	addwfc	??_Init_Battery_State_Machine+1,w
 12214  175F  00F9               	movwf	___awtoft@c+1
 12215  1760  3193  23D1  3197   	fcall	___awtoft
 12216  1763  0878               	movf	?___awtoft,w
 12217  1764  0020               	movlb	0	; select bank0
 12218  1765  00A3               	movwf	___ftmul@f2
 12219  1766  0879               	movf	?___awtoft+1,w
 12220  1767  00A4               	movwf	___ftmul@f2+1
 12221  1768  087A               	movf	?___awtoft+2,w
 12222  1769  00A5               	movwf	___ftmul@f2+2
 12223  176A  30C3               	movlw	195
 12224  176B  00A0               	movwf	___ftmul@f1
 12225  176C  3075               	movlw	117
 12226  176D  00A1               	movwf	___ftmul@f1+1
 12227  176E  303E               	movlw	62
 12228  176F  00A2               	movwf	___ftmul@f1+2
 12229  1770  318B  232F  3197   	fcall	___ftmul
 12230  1773  0020               	movlb	0	; select bank0
 12231  1774  0820               	movf	?___ftmul,w
 12232  1775  00B0               	movwf	___fttol@f1
 12233  1776  0821               	movf	?___ftmul+1,w
 12234  1777  00B1               	movwf	___fttol@f1+1
 12235  1778  0822               	movf	?___ftmul+2,w
 12236  1779  00B2               	movwf	___fttol@f1+2
 12237  177A  3189  214F         	fcall	___fttol
 12238  177C  0020               	movlb	0	; select bank0
 12239  177D  0830               	movf	?___fttol,w
 12240  177E  3E91               	addlw	145
 12241  177F  00C0               	movwf	??_Init_Battery_State_Machine+2
 12242  1780  3005               	movlw	5
 12243  1781  3D31               	addwfc	?___fttol+1,w
 12244  1782  00C1               	movwf	??_Init_Battery_State_Machine+3
 12245  1783  3542               	lslf	Init_Battery_State_Machine@z,w
 12246  1784  3E5B               	addlw	(low (_Vref| 0))& (0+255)
 12247  1785  0086               	movwf	6
 12248  1786  0187               	clrf	7
 12249  1787  0840               	movf	??_Init_Battery_State_Machine+2,w
 12250  1788  3FC0               	movwi [0]fsr1
 12251  1789  0841               	movf	??_Init_Battery_State_Machine+3,w
 12252  178A  3FC1               	movwi [1]fsr1
 12253                           
 12254                           ;battery_charger.c: 24: Imin[z] =15;
 12255  178B  3542               	lslf	Init_Battery_State_Machine@z,w
 12256  178C  3ECC               	addlw	(low (_Imin| 0))& (0+255)
 12257  178D  0086               	movwf	6
 12258  178E  0187               	clrf	7
 12259  178F  300F               	movlw	15
 12260  1790  3FC0               	movwi [0]fsr1
 12261  1791  3000               	movlw	0
 12262  1792  3FC1               	movwi [1]fsr1
 12263                           
 12264                           ;battery_charger.c: 25: IminCount[z] = 60;
 12265  1793  3542               	lslf	Init_Battery_State_Machine@z,w
 12266  1794  3EC8               	addlw	(low (_IminCount| 0))& (0+255)
 12267  1795  0086               	movwf	6
 12268  1796  0187               	clrf	7
 12269  1797  303C               	movlw	60
 12270  1798  3FC0               	movwi [0]fsr1
 12271  1799  3000               	movlw	0
 12272  179A  3FC1               	movwi [1]fsr1
 12273  179B  0008               	return
 12274  179C                     __end_of_Init_Battery_State_Machine:	
 12275                           
 12276                           	psect	text28
 12277  1393                     __ptext28:	
 12278 ;; *************** function _ADC_Initialize *****************
 12279 ;; Defined at:
 12280 ;;		line 111 in file "adc.c"
 12281 ;; Parameters:    Size  Location     Type
 12282 ;;		None
 12283 ;; Auto vars:     Size  Location     Type
 12284 ;;		None
 12285 ;; Return value:  Size  Location     Type
 12286 ;;                  1    wreg      void 
 12287 ;; Registers used:
 12288 ;;		wreg, status,2
 12289 ;; Tracked objects:
 12290 ;;		On entry : 0/0
 12291 ;;		On exit  : 0/0
 12292 ;;		Unchanged: 0/0
 12293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12294 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12295 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12296 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12297 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12298 ;;Total ram usage:        0 bytes
 12299 ;; Hardware stack levels used:    1
 12300 ;; This function calls:
 12301 ;;		Nothing
 12302 ;; This function is called by:
 12303 ;;		_SYSTEM_Initialize
 12304 ;; This function uses a non-reentrant model
 12305 ;;
 12306                           
 12307                           
 12308                           ;psect for function _ADC_Initialize
 12309  1393                     _ADC_Initialize:	
 12310                           
 12311                           ;adc.c: 113: ADCON1 = 0x00;
 12312                           
 12313                           ;incstack = 0
 12314                           ; Regs used in _ADC_Initialize: [wreg+status,2]
 12315  1393  0021               	movlb	1	; select bank1
 12316  1394  0194               	clrf	20	;volatile
 12317                           
 12318                           ;adc.c: 115: ADCON2 = 0x00;
 12319  1395  0195               	clrf	21	;volatile
 12320                           
 12321                           ;adc.c: 117: ADCON3 = 0x00;
 12322  1396  0196               	clrf	22	;volatile
 12323                           
 12324                           ;adc.c: 119: ADACT = 0x00;
 12325  1397  0199               	clrf	25	;volatile
 12326                           
 12327                           ;adc.c: 121: ADSTAT = 0x00;
 12328  1398  0197               	clrf	23	;volatile
 12329                           
 12330                           ;adc.c: 123: FVRCON = 0b11000011;
 12331  1399  30C3               	movlw	195
 12332  139A  0032               	movlb	18	; select bank18
 12333  139B  008C               	movwf	12	;volatile
 12334                           
 12335                           ;adc.c: 124: ADCLK = 0x3F;
 12336  139C  303F               	movlw	63
 12337  139D  0021               	movlb	1	; select bank1
 12338  139E  0098               	movwf	24	;volatile
 12339                           
 12340                           ;adc.c: 131: ADREF = 0x03;
 12341  139F  3003               	movlw	3
 12342  13A0  009A               	movwf	26	;volatile
 12343                           
 12344                           ;adc.c: 134: ADCAP = 0x00;
 12345  13A1  019B               	clrf	27	;volatile
 12346                           
 12347                           ;adc.c: 137: ADPRE = 0x07;
 12348  13A2  3007               	movlw	7
 12349  13A3  009C               	movwf	28	;volatile
 12350                           
 12351                           ;adc.c: 139: ADACQ = 0x00;
 12352  13A4  019D               	clrf	29	;volatile
 12353                           
 12354                           ;adc.c: 141: ADPCH = 0x00;
 12355  13A5  019E               	clrf	30	;volatile
 12356                           
 12357                           ;adc.c: 143: ADRPT = 0x00;
 12358  13A6  0022               	movlb	2	; select bank2
 12359  13A7  018D               	clrf	13	;volatile
 12360                           
 12361                           ;adc.c: 145: ADLTHL = 0x00;
 12362  13A8  018E               	clrf	14	;volatile
 12363                           
 12364                           ;adc.c: 147: ADLTHH = 0x00;
 12365  13A9  018F               	clrf	15	;volatile
 12366                           
 12367                           ;adc.c: 149: ADUTHL = 0x00;
 12368  13AA  0190               	clrf	16	;volatile
 12369                           
 12370                           ;adc.c: 151: ADUTHH = 0x00;
 12371  13AB  0191               	clrf	17	;volatile
 12372                           
 12373                           ;adc.c: 153: ADSTPTL = 0x00;
 12374  13AC  0192               	clrf	18	;volatile
 12375                           
 12376                           ;adc.c: 155: ADSTPTH = 0x00;
 12377  13AD  0193               	clrf	19	;volatile
 12378                           
 12379                           ;adc.c: 157: ADCON0 = 0x84;
 12380  13AE  3084               	movlw	132
 12381  13AF  0021               	movlb	1	; select bank1
 12382  13B0  0093               	movwf	19	;volatile
 12383  13B1  0008               	return
 12384  13B2                     __end_of_ADC_Initialize:	
 12385                           
 12386                           	psect	text29
 12387  1344                     __ptext29:	
 12388 ;; *************** function _PWM7_LoadDutyValue *****************
 12389 ;; Defined at:
 12390 ;;		line 37 in file "pwm.c"
 12391 ;; Parameters:    Size  Location     Type
 12392 ;;  dutyCycle7      2    0[COMMON] unsigned int 
 12393 ;; Auto vars:     Size  Location     Type
 12394 ;;		None
 12395 ;; Return value:  Size  Location     Type
 12396 ;;                  1    wreg      void 
 12397 ;; Registers used:
 12398 ;;		wreg, status,2, status,0
 12399 ;; Tracked objects:
 12400 ;;		On entry : 0/0
 12401 ;;		On exit  : 0/0
 12402 ;;		Unchanged: 0/0
 12403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12404 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12405 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12406 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12407 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12408 ;;Total ram usage:        4 bytes
 12409 ;; Hardware stack levels used:    1
 12410 ;; This function calls:
 12411 ;;		Nothing
 12412 ;; This function is called by:
 12413 ;;		_main
 12414 ;; This function uses a non-reentrant model
 12415 ;;
 12416                           
 12417                           
 12418                           ;psect for function _PWM7_LoadDutyValue
 12419  1344                     _PWM7_LoadDutyValue:	
 12420                           
 12421                           ;pwm.c: 39: PWM7DCH = (dutyCycle7 & 0x03FC)>>2;
 12422                           
 12423                           ;incstack = 0
 12424                           ; Regs used in _PWM7_LoadDutyValue: [wreg+status,2+status,0]
 12425  1344  0871               	movf	PWM7_LoadDutyValue@dutyCycle7+1,w
 12426  1345  00F3               	movwf	??_PWM7_LoadDutyValue+1
 12427  1346  0870               	movf	PWM7_LoadDutyValue@dutyCycle7,w
 12428  1347  00F2               	movwf	??_PWM7_LoadDutyValue
 12429  1348  36F3               	lsrf	??_PWM7_LoadDutyValue+1,f
 12430  1349  0CF2               	rrf	??_PWM7_LoadDutyValue,f
 12431  134A  36F3               	lsrf	??_PWM7_LoadDutyValue+1,f
 12432  134B  0CF2               	rrf	??_PWM7_LoadDutyValue,f
 12433  134C  0872               	movf	??_PWM7_LoadDutyValue,w
 12434  134D  0027               	movlb	7	; select bank7
 12435  134E  0091               	movwf	17	;volatile
 12436                           
 12437                           ;pwm.c: 41: PWM7DCL = (dutyCycle7 & 0x0003)<<6;
 12438  134F  0870               	movf	PWM7_LoadDutyValue@dutyCycle7,w
 12439  1350  3903               	andlw	3
 12440  1351  00F2               	movwf	??_PWM7_LoadDutyValue
 12441  1352  3005               	movlw	5
 12442  1353                     u3615:	
 12443  1353  35F2               	lslf	??_PWM7_LoadDutyValue,f
 12444  1354  3EFF               	addlw	-1
 12445  1355  1D03               	skipz
 12446  1356  2B53               	goto	u3615
 12447  1357  3572               	lslf	??_PWM7_LoadDutyValue,w
 12448  1358  0090               	movwf	16	;volatile
 12449  1359  0008               	return
 12450  135A                     __end_of_PWM7_LoadDutyValue:	
 12451                           
 12452                           	psect	text30
 12453  132E                     __ptext30:	
 12454 ;; *************** function _PWM6_LoadDutyValue *****************
 12455 ;; Defined at:
 12456 ;;		line 30 in file "pwm.c"
 12457 ;; Parameters:    Size  Location     Type
 12458 ;;  dutyCycle6      2    0[COMMON] unsigned int 
 12459 ;; Auto vars:     Size  Location     Type
 12460 ;;		None
 12461 ;; Return value:  Size  Location     Type
 12462 ;;                  1    wreg      void 
 12463 ;; Registers used:
 12464 ;;		wreg, status,2, status,0
 12465 ;; Tracked objects:
 12466 ;;		On entry : 0/0
 12467 ;;		On exit  : 0/0
 12468 ;;		Unchanged: 0/0
 12469 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12470 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12471 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12472 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12473 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12474 ;;Total ram usage:        4 bytes
 12475 ;; Hardware stack levels used:    1
 12476 ;; This function calls:
 12477 ;;		Nothing
 12478 ;; This function is called by:
 12479 ;;		_main
 12480 ;; This function uses a non-reentrant model
 12481 ;;
 12482                           
 12483                           
 12484                           ;psect for function _PWM6_LoadDutyValue
 12485  132E                     _PWM6_LoadDutyValue:	
 12486                           
 12487                           ;pwm.c: 32: PWM6DCH = (dutyCycle6 & 0x03FC)>>2;
 12488                           
 12489                           ;incstack = 0
 12490                           ; Regs used in _PWM6_LoadDutyValue: [wreg+status,2+status,0]
 12491  132E  0871               	movf	PWM6_LoadDutyValue@dutyCycle6+1,w
 12492  132F  00F3               	movwf	??_PWM6_LoadDutyValue+1
 12493  1330  0870               	movf	PWM6_LoadDutyValue@dutyCycle6,w
 12494  1331  00F2               	movwf	??_PWM6_LoadDutyValue
 12495  1332  36F3               	lsrf	??_PWM6_LoadDutyValue+1,f
 12496  1333  0CF2               	rrf	??_PWM6_LoadDutyValue,f
 12497  1334  36F3               	lsrf	??_PWM6_LoadDutyValue+1,f
 12498  1335  0CF2               	rrf	??_PWM6_LoadDutyValue,f
 12499  1336  0872               	movf	??_PWM6_LoadDutyValue,w
 12500  1337  0027               	movlb	7	; select bank7
 12501  1338  008D               	movwf	13	;volatile
 12502                           
 12503                           ;pwm.c: 34: PWM6DCL = (dutyCycle6 & 0x0003)<<6;
 12504  1339  0870               	movf	PWM6_LoadDutyValue@dutyCycle6,w
 12505  133A  3903               	andlw	3
 12506  133B  00F2               	movwf	??_PWM6_LoadDutyValue
 12507  133C  3005               	movlw	5
 12508  133D                     u3605:	
 12509  133D  35F2               	lslf	??_PWM6_LoadDutyValue,f
 12510  133E  3EFF               	addlw	-1
 12511  133F  1D03               	skipz
 12512  1340  2B3D               	goto	u3605
 12513  1341  3572               	lslf	??_PWM6_LoadDutyValue,w
 12514  1342  008C               	movwf	12	;volatile
 12515  1343  0008               	return
 12516  1344                     __end_of_PWM6_LoadDutyValue:	
 12517                           
 12518                           	psect	text31
 12519  1318                     __ptext31:	
 12520 ;; *************** function _PWM1_LoadDutyValue *****************
 12521 ;; Defined at:
 12522 ;;		line 44 in file "pwm.c"
 12523 ;; Parameters:    Size  Location     Type
 12524 ;;  dutyCycle1      2    0[COMMON] unsigned int 
 12525 ;; Auto vars:     Size  Location     Type
 12526 ;;		None
 12527 ;; Return value:  Size  Location     Type
 12528 ;;                  1    wreg      void 
 12529 ;; Registers used:
 12530 ;;		wreg, status,2, status,0
 12531 ;; Tracked objects:
 12532 ;;		On entry : 0/0
 12533 ;;		On exit  : 0/0
 12534 ;;		Unchanged: 0/0
 12535 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12536 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12537 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12538 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12539 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12540 ;;Total ram usage:        4 bytes
 12541 ;; Hardware stack levels used:    1
 12542 ;; This function calls:
 12543 ;;		Nothing
 12544 ;; This function is called by:
 12545 ;;		_main
 12546 ;; This function uses a non-reentrant model
 12547 ;;
 12548                           
 12549                           
 12550                           ;psect for function _PWM1_LoadDutyValue
 12551  1318                     _PWM1_LoadDutyValue:	
 12552                           
 12553                           ;pwm.c: 46: CCPR1H = (dutyCycle1& 0x03FC)>>2;
 12554                           
 12555                           ;incstack = 0
 12556                           ; Regs used in _PWM1_LoadDutyValue: [wreg+status,2+status,0]
 12557  1318  0871               	movf	PWM1_LoadDutyValue@dutyCycle1+1,w
 12558  1319  00F3               	movwf	??_PWM1_LoadDutyValue+1
 12559  131A  0870               	movf	PWM1_LoadDutyValue@dutyCycle1,w
 12560  131B  00F2               	movwf	??_PWM1_LoadDutyValue
 12561  131C  36F3               	lsrf	??_PWM1_LoadDutyValue+1,f
 12562  131D  0CF2               	rrf	??_PWM1_LoadDutyValue,f
 12563  131E  36F3               	lsrf	??_PWM1_LoadDutyValue+1,f
 12564  131F  0CF2               	rrf	??_PWM1_LoadDutyValue,f
 12565  1320  0872               	movf	??_PWM1_LoadDutyValue,w
 12566  1321  0026               	movlb	6	; select bank6
 12567  1322  008D               	movwf	13	;volatile
 12568                           
 12569                           ;pwm.c: 47: CCPR1L = (dutyCycle1 & 0x0003)<<6;
 12570  1323  0870               	movf	PWM1_LoadDutyValue@dutyCycle1,w
 12571  1324  3903               	andlw	3
 12572  1325  00F2               	movwf	??_PWM1_LoadDutyValue
 12573  1326  3005               	movlw	5
 12574  1327                     u3625:	
 12575  1327  35F2               	lslf	??_PWM1_LoadDutyValue,f
 12576  1328  3EFF               	addlw	-1
 12577  1329  1D03               	skipz
 12578  132A  2B27               	goto	u3625
 12579  132B  3572               	lslf	??_PWM1_LoadDutyValue,w
 12580  132C  008C               	movwf	12	;volatile
 12581  132D  0008               	return
 12582  132E                     __end_of_PWM1_LoadDutyValue:	
 12583                           
 12584                           	psect	text32
 12585  12EF                     __ptext32:	
 12586 ;; *************** function _LCDWriteString *****************
 12587 ;; Defined at:
 12588 ;;		line 176 in file "lcd.c"
 12589 ;; Parameters:    Size  Location     Type
 12590 ;;  characters      2   12[COMMON] PTR const unsigned char 
 12591 ;;		 -> STR_3(5), STR_2(5), STR_1(4), 
 12592 ;; Auto vars:     Size  Location     Type
 12593 ;;		None
 12594 ;; Return value:  Size  Location     Type
 12595 ;;                  1    wreg      void 
 12596 ;; Registers used:
 12597 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12598 ;; Tracked objects:
 12599 ;;		On entry : 0/0
 12600 ;;		On exit  : 0/0
 12601 ;;		Unchanged: 0/0
 12602 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12603 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12604 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12605 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12606 ;;      Totals:         2       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12607 ;;Total ram usage:        3 bytes
 12608 ;; Hardware stack levels used:    1
 12609 ;; Hardware stack levels required when called:    2
 12610 ;; This function calls:
 12611 ;;		_LCDWriteCharacter
 12612 ;; This function is called by:
 12613 ;;		_main
 12614 ;; This function uses a non-reentrant model
 12615 ;;
 12616                           
 12617                           
 12618                           ;psect for function _LCDWriteString
 12619  12EF                     _LCDWriteString:	
 12620  12EF                     l3026:	
 12621                           ;lcd.c: 178: while (*characters)
 12622                           
 12623                           ;incstack = 0
 12624                           ; Regs used in _LCDWriteString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12625                           
 12626  12EF  087C               	movf	LCDWriteString@characters,w
 12627  12F0  0084               	movwf	4
 12628  12F1  087D               	movf	LCDWriteString@characters+1,w
 12629  12F2  0085               	movwf	5
 12630  12F3  0012               	moviw fsr0++
 12631  12F4  1903               	btfsc	3,2
 12632  12F5  0008               	return
 12633                           
 12634                           ;lcd.c: 179: LCDWriteCharacter(*characters++);
 12635  12F6  087C               	movf	LCDWriteString@characters,w
 12636  12F7  0084               	movwf	4
 12637  12F8  087D               	movf	LCDWriteString@characters+1,w
 12638  12F9  0085               	movwf	5
 12639  12FA  0800               	movf	0,w	;code access
 12640  12FB  3196  2685  3192   	fcall	_LCDWriteCharacter
 12641  12FE  3001               	movlw	1
 12642  12FF  07FC               	addwf	LCDWriteString@characters,f
 12643  1300  3000               	movlw	0
 12644  1301  3DFD               	addwfc	LCDWriteString@characters+1,f
 12645  1302  2AEF               	goto	l3026
 12646  1303                     __end_of_LCDWriteString:	
 12647                           
 12648                           	psect	text33
 12649  0BE3                     __ptext33:	
 12650 ;; *************** function _LCDWriteInt *****************
 12651 ;; Defined at:
 12652 ;;		line 190 in file "lcd.c"
 12653 ;; Parameters:    Size  Location     Type
 12654 ;;  value           2    0[BANK0 ] int 
 12655 ;;  fieldLength     1    2[BANK0 ] char 
 12656 ;;  numPlaces       1    3[BANK0 ] unsigned char 
 12657 ;;  sign            1    4[BANK0 ] unsigned char 
 12658 ;; Auto vars:     Size  Location     Type
 12659 ;;  str             5    9[BANK0 ] unsigned char [5]
 12660 ;;  i               1   15[BANK0 ] unsigned char 
 12661 ;;  j               1   14[BANK0 ] unsigned char 
 12662 ;; Return value:  Size  Location     Type
 12663 ;;                  1    wreg      void 
 12664 ;; Registers used:
 12665 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12666 ;; Tracked objects:
 12667 ;;		On entry : 0/0
 12668 ;;		On exit  : 0/0
 12669 ;;		Unchanged: 0/0
 12670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12671 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12672 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12673 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12674 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12675 ;;Total ram usage:       16 bytes
 12676 ;; Hardware stack levels used:    1
 12677 ;; Hardware stack levels required when called:    2
 12678 ;; This function calls:
 12679 ;;		_LCDWriteCharacter
 12680 ;;		___awdiv
 12681 ;;		___lwmod
 12682 ;; This function is called by:
 12683 ;;		_main
 12684 ;; This function uses a non-reentrant model
 12685 ;;
 12686                           
 12687                           
 12688                           ;psect for function _LCDWriteInt
 12689  0BE3                     _LCDWriteInt:	
 12690                           
 12691                           ;lcd.c: 192: uint8_t str[5]={0,0,0,0,0};
 12692                           
 12693                           ;incstack = 0
 12694                           ; Regs used in _LCDWriteInt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12695  0BE3  3030               	movlw	low LCDWriteInt@F14390
 12696  0BE4  0086               	movwf	6
 12697  0BE5  3001               	movlw	high LCDWriteInt@F14390
 12698  0BE6  0087               	movwf	7
 12699  0BE7  3029               	movlw	low LCDWriteInt@str
 12700  0BE8  0084               	movwf	4
 12701  0BE9  3000               	movlw	high LCDWriteInt@str
 12702  0BEA  0085               	movwf	5
 12703  0BEB  3005               	movlw	5
 12704  0BEC  0020               	movlb	0	; select bank0
 12705  0BED  00A5               	movwf	??_LCDWriteInt
 12706  0BEE                     u3510:	
 12707  0BEE  0016               	moviw fsr1++
 12708  0BEF  001A               	movwi fsr0++
 12709  0BF0  0BA5               	decfsz	??_LCDWriteInt,f
 12710  0BF1  2BEE               	goto	u3510
 12711                           
 12712                           ;lcd.c: 193: uint8_t i=4,j=0;
 12713  0BF2  3004               	movlw	4
 12714  0BF3  00A5               	movwf	??_LCDWriteInt
 12715  0BF4  0825               	movf	??_LCDWriteInt,w
 12716  0BF5  00AF               	movwf	LCDWriteInt@i
 12717  0BF6  01AE               	clrf	LCDWriteInt@j
 12718                           
 12719                           ;lcd.c: 195: if(value<0)
 12720  0BF7  1FA1               	btfss	LCDWriteInt@value+1,7
 12721  0BF8  2C04               	goto	l3040
 12722                           
 12723                           ;lcd.c: 196: {
 12724                           ;lcd.c: 197: LCDWriteCharacter('-');
 12725  0BF9  302D               	movlw	45
 12726  0BFA  3196  2685  318B   	fcall	_LCDWriteCharacter
 12727                           
 12728                           ;lcd.c: 198: value=value*-1;
 12729  0BFD  0020               	movlb	0	; select bank0
 12730  0BFE  09A0               	comf	LCDWriteInt@value,f
 12731  0BFF  09A1               	comf	LCDWriteInt@value+1,f
 12732  0C00  0AA0               	incf	LCDWriteInt@value,f
 12733  0C01  1903               	skipnz
 12734  0C02  0AA1               	incf	LCDWriteInt@value+1,f
 12735                           
 12736                           ;lcd.c: 199: }
 12737  0C03  2C0B               	goto	l3050
 12738  0C04                     l3040:	
 12739                           
 12740                           ;lcd.c: 201: else
 12741                           ;lcd.c: 202: {
 12742                           ;lcd.c: 203: if(sign == 1)
 12743  0C04  0324               	decf	LCDWriteInt@sign,w
 12744  0C05  1D03               	btfss	3,2
 12745  0C06  2C0B               	goto	l3050
 12746                           
 12747                           ;lcd.c: 204: {
 12748                           ;lcd.c: 205: LCDWriteCharacter('+');
 12749  0C07  302B               	movlw	43
 12750  0C08  3196  2685  318B   	fcall	_LCDWriteCharacter
 12751  0C0B                     l3050:	
 12752                           ;lcd.c: 206: }
 12753                           ;lcd.c: 207: }
 12754                           ;lcd.c: 209: while(value)
 12755                           
 12756  0C0B  0020               	movlb	0	; select bank0
 12757  0C0C  0820               	movf	LCDWriteInt@value,w
 12758  0C0D  0421               	iorwf	LCDWriteInt@value+1,w
 12759  0C0E  1903               	btfsc	3,2
 12760  0C0F  2C38               	goto	l3052
 12761                           
 12762                           ;lcd.c: 210: {
 12763                           ;lcd.c: 211: str[i]=(uint16_t)value%10;
 12764  0C10  300A               	movlw	10
 12765  0C11  00F0               	movwf	___lwmod@divisor
 12766  0C12  3000               	movlw	0
 12767  0C13  00F1               	movwf	___lwmod@divisor+1
 12768  0C14  0020               	movlb	0	; select bank0
 12769  0C15  0821               	movf	LCDWriteInt@value+1,w
 12770  0C16  00F3               	movwf	___lwmod@dividend+1
 12771  0C17  0820               	movf	LCDWriteInt@value,w
 12772  0C18  00F2               	movwf	___lwmod@dividend
 12773  0C19  3194  2416  318B   	fcall	___lwmod
 12774  0C1C  0870               	movf	?___lwmod,w
 12775  0C1D  0020               	movlb	0	; select bank0
 12776  0C1E  00A5               	movwf	??_LCDWriteInt
 12777  0C1F  082F               	movf	LCDWriteInt@i,w
 12778  0C20  3E29               	addlw	(low (LCDWriteInt@str| 0))& (0+255)
 12779  0C21  0086               	movwf	6
 12780  0C22  0187               	clrf	7
 12781  0C23  0825               	movf	??_LCDWriteInt,w
 12782  0C24  0081               	movwf	1
 12783                           
 12784                           ;lcd.c: 212: value=value/10;
 12785  0C25  300A               	movlw	10
 12786  0C26  00F0               	movwf	___awdiv@divisor
 12787  0C27  3000               	movlw	0
 12788  0C28  00F1               	movwf	___awdiv@divisor+1
 12789  0C29  0821               	movf	LCDWriteInt@value+1,w
 12790  0C2A  00F3               	movwf	___awdiv@dividend+1
 12791  0C2B  0820               	movf	LCDWriteInt@value,w
 12792  0C2C  00F2               	movwf	___awdiv@dividend
 12793  0C2D  3196  2634  318B   	fcall	___awdiv
 12794  0C30  0871               	movf	?___awdiv+1,w
 12795  0C31  0020               	movlb	0	; select bank0
 12796  0C32  00A1               	movwf	LCDWriteInt@value+1
 12797  0C33  0870               	movf	?___awdiv,w
 12798  0C34  00A0               	movwf	LCDWriteInt@value
 12799                           
 12800                           ;lcd.c: 213: i--;
 12801  0C35  3001               	movlw	1
 12802  0C36  02AF               	subwf	LCDWriteInt@i,f
 12803  0C37  2C0B               	goto	l3050
 12804  0C38                     l3052:	
 12805                           
 12806                           ;lcd.c: 214: }
 12807                           ;lcd.c: 215: if(fieldLength==-1)
 12808  0C38  0A22               	incf	LCDWriteInt@fieldLength,w
 12809  0C39  1903               	btfsc	3,2
 12810  0C3A  2C40               	goto	l3058
 12811  0C3B  2C48               	goto	l3060
 12812  0C3C                     l3056:	
 12813                           ;lcd.c: 216: {
 12814                           ;lcd.c: 217: while(str[j]==0)
 12815                           
 12816                           
 12817                           ;lcd.c: 218: {
 12818                           ;lcd.c: 219: j++;
 12819  0C3C  3001               	movlw	1
 12820  0C3D  00A5               	movwf	??_LCDWriteInt
 12821  0C3E  0825               	movf	??_LCDWriteInt,w
 12822  0C3F  07AE               	addwf	LCDWriteInt@j,f
 12823  0C40                     l3058:	
 12824  0C40  082E               	movf	LCDWriteInt@j,w
 12825  0C41  3E29               	addlw	(low (LCDWriteInt@str| 0))& (0+255)
 12826  0C42  0086               	movwf	6
 12827  0C43  0187               	clrf	7
 12828  0C44  0801               	movf	1,w
 12829  0C45  1D03               	btfss	3,2
 12830  0C46  2C4E               	goto	l3062
 12831  0C47  2C3C               	goto	l3056
 12832  0C48                     l3060:	
 12833                           ;lcd.c: 220: }
 12834                           ;lcd.c: 221: }
 12835                           
 12836                           
 12837                           ;lcd.c: 222: else
 12838                           ;lcd.c: 223: {
 12839                           ;lcd.c: 224: j=(uint8_t)(5-fieldLength);
 12840  0C48  0322               	decf	LCDWriteInt@fieldLength,w
 12841  0C49  3AFF               	xorlw	255
 12842  0C4A  3E05               	addlw	5
 12843  0C4B  00A5               	movwf	??_LCDWriteInt
 12844  0C4C  0825               	movf	??_LCDWriteInt,w
 12845  0C4D  00AE               	movwf	LCDWriteInt@j
 12846  0C4E                     l3062:	
 12847                           
 12848                           ;lcd.c: 225: }
 12849                           ;lcd.c: 227: for(i=j;i<(5-numPlaces);i++)
 12850  0C4E  082E               	movf	LCDWriteInt@j,w
 12851  0C4F  00A5               	movwf	??_LCDWriteInt
 12852  0C50  0825               	movf	??_LCDWriteInt,w
 12853  0C51  00AF               	movwf	LCDWriteInt@i
 12854  0C52                     l3068:	
 12855  0C52  0823               	movf	LCDWriteInt@numPlaces,w
 12856  0C53  00A5               	movwf	??_LCDWriteInt
 12857  0C54  01A6               	clrf	??_LCDWriteInt+1
 12858  0C55  09A5               	comf	??_LCDWriteInt,f
 12859  0C56  09A6               	comf	??_LCDWriteInt+1,f
 12860  0C57  0AA5               	incf	??_LCDWriteInt,f
 12861  0C58  1903               	skipnz
 12862  0C59  0AA6               	incf	??_LCDWriteInt+1,f
 12863  0C5A  0825               	movf	??_LCDWriteInt,w
 12864  0C5B  3E05               	addlw	5
 12865  0C5C  00A7               	movwf	??_LCDWriteInt+2
 12866  0C5D  3000               	movlw	0
 12867  0C5E  3D26               	addwfc	??_LCDWriteInt+1,w
 12868  0C5F  00A8               	movwf	??_LCDWriteInt+3
 12869  0C60  0828               	movf	??_LCDWriteInt+3,w
 12870  0C61  3A80               	xorlw	128
 12871  0C62  3C80               	sublw	128
 12872  0C63  1D03               	skipz
 12873  0C64  2C67               	goto	u3575
 12874  0C65  0827               	movf	??_LCDWriteInt+2,w
 12875  0C66  022F               	subwf	LCDWriteInt@i,w
 12876  0C67                     u3575:	
 12877  0C67  1803               	btfsc	3,0
 12878  0C68  2C79               	goto	l3070
 12879                           
 12880                           ;lcd.c: 228: {
 12881                           ;lcd.c: 229: LCDWriteCharacter((uint8_t)(48+str[i]));
 12882  0C69  0020               	movlb	0	; select bank0
 12883  0C6A  082F               	movf	LCDWriteInt@i,w
 12884  0C6B  3E29               	addlw	(low (LCDWriteInt@str| 0))& (0+255)
 12885  0C6C  0086               	movwf	6
 12886  0C6D  0187               	clrf	7
 12887  0C6E  0801               	movf	1,w
 12888  0C6F  3E30               	addlw	48
 12889  0C70  3196  2685  318B   	fcall	_LCDWriteCharacter
 12890  0C73  3001               	movlw	1
 12891  0C74  0020               	movlb	0	; select bank0
 12892  0C75  00A5               	movwf	??_LCDWriteInt
 12893  0C76  0825               	movf	??_LCDWriteInt,w
 12894  0C77  07AF               	addwf	LCDWriteInt@i,f
 12895  0C78  2C52               	goto	l3068
 12896  0C79                     l3070:	
 12897                           
 12898                           ;lcd.c: 230: }
 12899                           ;lcd.c: 232: if(numPlaces == 1)
 12900  0C79  0020               	movlb	0	; select bank0
 12901  0C7A  0323               	decf	LCDWriteInt@numPlaces,w
 12902  0C7B  1D03               	btfss	3,2
 12903  0C7C  2C87               	goto	l3074
 12904                           
 12905                           ;lcd.c: 233: {
 12906                           ;lcd.c: 234: LCDWriteCharacter(46);
 12907  0C7D  302E               	movlw	46
 12908  0C7E  3196  2685  318B   	fcall	_LCDWriteCharacter
 12909                           
 12910                           ;lcd.c: 235: LCDWriteCharacter ((uint8_t)(48+str[4]));
 12911  0C81  0020               	movlb	0	; select bank0
 12912  0C82  082D               	movf	LCDWriteInt@str+4,w
 12913  0C83  3E30               	addlw	48
 12914  0C84  3196  2685  318B   	fcall	_LCDWriteCharacter
 12915  0C87                     l3074:	
 12916                           
 12917                           ;lcd.c: 236: }
 12918                           ;lcd.c: 238: if(numPlaces == 2)
 12919  0C87  3002               	movlw	2
 12920  0C88  0020               	movlb	0	; select bank0
 12921  0C89  0623               	xorwf	LCDWriteInt@numPlaces,w
 12922  0C8A  1D03               	btfss	3,2
 12923  0C8B  0008               	return
 12924                           
 12925                           ;lcd.c: 239: {
 12926                           ;lcd.c: 240: LCDWriteCharacter(46);
 12927  0C8C  302E               	movlw	46
 12928  0C8D  3196  2685  318B   	fcall	_LCDWriteCharacter
 12929                           
 12930                           ;lcd.c: 241: LCDWriteCharacter((uint8_t)(48+str[3]));
 12931  0C90  0020               	movlb	0	; select bank0
 12932  0C91  082C               	movf	LCDWriteInt@str+3,w
 12933  0C92  3E30               	addlw	48
 12934  0C93  3196  2685  318B   	fcall	_LCDWriteCharacter
 12935                           
 12936                           ;lcd.c: 242: LCDWriteCharacter((uint8_t)(48+str[4]));
 12937  0C96  0020               	movlb	0	; select bank0
 12938  0C97  082D               	movf	LCDWriteInt@str+4,w
 12939  0C98  3E30               	addlw	48
 12940  0C99  3196  2685         	fcall	_LCDWriteCharacter
 12941  0C9B  0008               	return
 12942  0C9C                     __end_of_LCDWriteInt:	
 12943                           
 12944                           	psect	text34
 12945  1416                     __ptext34:	
 12946 ;; *************** function ___lwmod *****************
 12947 ;; Defined at:
 12948 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 12949 ;; Parameters:    Size  Location     Type
 12950 ;;  divisor         2    0[COMMON] unsigned int 
 12951 ;;  dividend        2    2[COMMON] unsigned int 
 12952 ;; Auto vars:     Size  Location     Type
 12953 ;;  counter         1    5[COMMON] unsigned char 
 12954 ;; Return value:  Size  Location     Type
 12955 ;;                  2    0[COMMON] unsigned int 
 12956 ;; Registers used:
 12957 ;;		wreg, status,2, status,0
 12958 ;; Tracked objects:
 12959 ;;		On entry : 0/0
 12960 ;;		On exit  : 0/0
 12961 ;;		Unchanged: 0/0
 12962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12963 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12964 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12965 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12966 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12967 ;;Total ram usage:        6 bytes
 12968 ;; Hardware stack levels used:    1
 12969 ;; This function calls:
 12970 ;;		Nothing
 12971 ;; This function is called by:
 12972 ;;		_LCDWriteInt
 12973 ;; This function uses a non-reentrant model
 12974 ;;
 12975                           
 12976                           
 12977                           ;psect for function ___lwmod
 12978  1416                     ___lwmod:	
 12979                           
 12980                           ;incstack = 0
 12981                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
 12982  1416  0870               	movf	___lwmod@divisor,w
 12983  1417  0471               	iorwf	___lwmod@divisor+1,w
 12984  1418  1903               	btfsc	3,2
 12985  1419  2C3D               	goto	l2876
 12986  141A  01F5               	clrf	___lwmod@counter
 12987  141B  0AF5               	incf	___lwmod@counter,f
 12988  141C                     l2866:	
 12989  141C  1BF1               	btfsc	___lwmod@divisor+1,7
 12990  141D  2C28               	goto	l2868
 12991  141E  3001               	movlw	1
 12992  141F                     u3085:	
 12993  141F  35F0               	lslf	___lwmod@divisor,f
 12994  1420  0DF1               	rlf	___lwmod@divisor+1,f
 12995  1421  0B89               	decfsz	9,f
 12996  1422  2C1F               	goto	u3085
 12997  1423  3001               	movlw	1
 12998  1424  00F4               	movwf	??___lwmod
 12999  1425  0874               	movf	??___lwmod,w
 13000  1426  07F5               	addwf	___lwmod@counter,f
 13001  1427  2C1C               	goto	l2866
 13002  1428                     l2868:	
 13003  1428  0871               	movf	___lwmod@divisor+1,w
 13004  1429  0273               	subwf	___lwmod@dividend+1,w
 13005  142A  1D03               	skipz
 13006  142B  2C2E               	goto	u3105
 13007  142C  0870               	movf	___lwmod@divisor,w
 13008  142D  0272               	subwf	___lwmod@dividend,w
 13009  142E                     u3105:	
 13010  142E  1C03               	skipc
 13011  142F  2C34               	goto	l2872
 13012  1430  0870               	movf	___lwmod@divisor,w
 13013  1431  02F2               	subwf	___lwmod@dividend,f
 13014  1432  0871               	movf	___lwmod@divisor+1,w
 13015  1433  3BF3               	subwfb	___lwmod@dividend+1,f
 13016  1434                     l2872:	
 13017  1434  3001               	movlw	1
 13018  1435                     u3115:	
 13019  1435  36F1               	lsrf	___lwmod@divisor+1,f
 13020  1436  0CF0               	rrf	___lwmod@divisor,f
 13021  1437  0B89               	decfsz	9,f
 13022  1438  2C35               	goto	u3115
 13023  1439  3001               	movlw	1
 13024  143A  02F5               	subwf	___lwmod@counter,f
 13025  143B  1D03               	btfss	3,2
 13026  143C  2C28               	goto	l2868
 13027  143D                     l2876:	
 13028  143D  0873               	movf	___lwmod@dividend+1,w
 13029  143E  00F1               	movwf	?___lwmod+1
 13030  143F  0872               	movf	___lwmod@dividend,w
 13031  1440  00F0               	movwf	?___lwmod
 13032  1441  0008               	return
 13033  1442                     __end_of___lwmod:	
 13034                           
 13035                           	psect	text35
 13036  1634                     __ptext35:	
 13037 ;; *************** function ___awdiv *****************
 13038 ;; Defined at:
 13039 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
 13040 ;; Parameters:    Size  Location     Type
 13041 ;;  divisor         2    0[COMMON] int 
 13042 ;;  dividend        2    2[COMMON] int 
 13043 ;; Auto vars:     Size  Location     Type
 13044 ;;  quotient        2    7[COMMON] int 
 13045 ;;  sign            1    6[COMMON] unsigned char 
 13046 ;;  counter         1    5[COMMON] unsigned char 
 13047 ;; Return value:  Size  Location     Type
 13048 ;;                  2    0[COMMON] int 
 13049 ;; Registers used:
 13050 ;;		wreg, status,2, status,0
 13051 ;; Tracked objects:
 13052 ;;		On entry : 0/0
 13053 ;;		On exit  : 0/0
 13054 ;;		Unchanged: 0/0
 13055 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13056 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13057 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13058 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13059 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13060 ;;Total ram usage:        9 bytes
 13061 ;; Hardware stack levels used:    1
 13062 ;; This function calls:
 13063 ;;		Nothing
 13064 ;; This function is called by:
 13065 ;;		_LCDWriteInt
 13066 ;; This function uses a non-reentrant model
 13067 ;;
 13068                           
 13069                           
 13070                           ;psect for function ___awdiv
 13071  1634                     ___awdiv:	
 13072                           
 13073                           ;incstack = 0
 13074                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 13075  1634  01F6               	clrf	___awdiv@sign
 13076  1635  1FF1               	btfss	___awdiv@divisor+1,7
 13077  1636  2E3E               	goto	l2772
 13078  1637  09F0               	comf	___awdiv@divisor,f
 13079  1638  09F1               	comf	___awdiv@divisor+1,f
 13080  1639  0AF0               	incf	___awdiv@divisor,f
 13081  163A  1903               	skipnz
 13082  163B  0AF1               	incf	___awdiv@divisor+1,f
 13083  163C  01F6               	clrf	___awdiv@sign
 13084  163D  0AF6               	incf	___awdiv@sign,f
 13085  163E                     l2772:	
 13086  163E  1FF3               	btfss	___awdiv@dividend+1,7
 13087  163F  2E49               	goto	l2778
 13088  1640  09F2               	comf	___awdiv@dividend,f
 13089  1641  09F3               	comf	___awdiv@dividend+1,f
 13090  1642  0AF2               	incf	___awdiv@dividend,f
 13091  1643  1903               	skipnz
 13092  1644  0AF3               	incf	___awdiv@dividend+1,f
 13093  1645  3001               	movlw	1
 13094  1646  00F4               	movwf	??___awdiv
 13095  1647  0874               	movf	??___awdiv,w
 13096  1648  06F6               	xorwf	___awdiv@sign,f
 13097  1649                     l2778:	
 13098  1649  01F7               	clrf	___awdiv@quotient
 13099  164A  01F8               	clrf	___awdiv@quotient+1
 13100  164B  0870               	movf	___awdiv@divisor,w
 13101  164C  0471               	iorwf	___awdiv@divisor+1,w
 13102  164D  1903               	btfsc	3,2
 13103  164E  2E78               	goto	l2800
 13104  164F  01F5               	clrf	___awdiv@counter
 13105  1650  0AF5               	incf	___awdiv@counter,f
 13106  1651                     l2788:	
 13107  1651  1BF1               	btfsc	___awdiv@divisor+1,7
 13108  1652  2E5D               	goto	l2790
 13109  1653  3001               	movlw	1
 13110  1654                     u2915:	
 13111  1654  35F0               	lslf	___awdiv@divisor,f
 13112  1655  0DF1               	rlf	___awdiv@divisor+1,f
 13113  1656  0B89               	decfsz	9,f
 13114  1657  2E54               	goto	u2915
 13115  1658  3001               	movlw	1
 13116  1659  00F4               	movwf	??___awdiv
 13117  165A  0874               	movf	??___awdiv,w
 13118  165B  07F5               	addwf	___awdiv@counter,f
 13119  165C  2E51               	goto	l2788
 13120  165D                     l2790:	
 13121  165D  3001               	movlw	1
 13122  165E                     u2935:	
 13123  165E  35F7               	lslf	___awdiv@quotient,f
 13124  165F  0DF8               	rlf	___awdiv@quotient+1,f
 13125  1660  0B89               	decfsz	9,f
 13126  1661  2E5E               	goto	u2935
 13127  1662  0871               	movf	___awdiv@divisor+1,w
 13128  1663  0273               	subwf	___awdiv@dividend+1,w
 13129  1664  1D03               	skipz
 13130  1665  2E68               	goto	u2945
 13131  1666  0870               	movf	___awdiv@divisor,w
 13132  1667  0272               	subwf	___awdiv@dividend,w
 13133  1668                     u2945:	
 13134  1668  1C03               	skipc
 13135  1669  2E6F               	goto	l2796
 13136  166A  0870               	movf	___awdiv@divisor,w
 13137  166B  02F2               	subwf	___awdiv@dividend,f
 13138  166C  0871               	movf	___awdiv@divisor+1,w
 13139  166D  3BF3               	subwfb	___awdiv@dividend+1,f
 13140  166E  1477               	bsf	___awdiv@quotient,0
 13141  166F                     l2796:	
 13142  166F  3001               	movlw	1
 13143  1670                     u2955:	
 13144  1670  36F1               	lsrf	___awdiv@divisor+1,f
 13145  1671  0CF0               	rrf	___awdiv@divisor,f
 13146  1672  0B89               	decfsz	9,f
 13147  1673  2E70               	goto	u2955
 13148  1674  3001               	movlw	1
 13149  1675  02F5               	subwf	___awdiv@counter,f
 13150  1676  1D03               	btfss	3,2
 13151  1677  2E5D               	goto	l2790
 13152  1678                     l2800:	
 13153  1678  0876               	movf	___awdiv@sign,w
 13154  1679  1903               	btfsc	3,2
 13155  167A  2E80               	goto	l2804
 13156  167B  09F7               	comf	___awdiv@quotient,f
 13157  167C  09F8               	comf	___awdiv@quotient+1,f
 13158  167D  0AF7               	incf	___awdiv@quotient,f
 13159  167E  1903               	skipnz
 13160  167F  0AF8               	incf	___awdiv@quotient+1,f
 13161  1680                     l2804:	
 13162  1680  0878               	movf	___awdiv@quotient+1,w
 13163  1681  00F1               	movwf	?___awdiv+1
 13164  1682  0877               	movf	___awdiv@quotient,w
 13165  1683  00F0               	movwf	?___awdiv
 13166  1684  0008               	return
 13167  1685                     __end_of___awdiv:	
 13168                           
 13169                           	psect	text36
 13170  1685                     __ptext36:	
 13171 ;; *************** function _LCDWriteCharacter *****************
 13172 ;; Defined at:
 13173 ;;		line 140 in file "lcd.c"
 13174 ;; Parameters:    Size  Location     Type
 13175 ;;  character       1    wreg     const unsigned char 
 13176 ;; Auto vars:     Size  Location     Type
 13177 ;;  character       1    9[COMMON] const unsigned char 
 13178 ;;  base            2   10[COMMON] unsigned int 
 13179 ;; Return value:  Size  Location     Type
 13180 ;;                  1    wreg      void 
 13181 ;; Registers used:
 13182 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13183 ;; Tracked objects:
 13184 ;;		On entry : 0/0
 13185 ;;		On exit  : 0/0
 13186 ;;		Unchanged: 0/0
 13187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13188 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13189 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13190 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13191 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13192 ;;Total ram usage:        6 bytes
 13193 ;; Hardware stack levels used:    1
 13194 ;; Hardware stack levels required when called:    1
 13195 ;; This function calls:
 13196 ;;		_LCDWrite
 13197 ;;		___wmul
 13198 ;; This function is called by:
 13199 ;;		_LCDWriteString
 13200 ;;		_LCDWriteInt
 13201 ;;		_main
 13202 ;; This function uses a non-reentrant model
 13203 ;;
 13204                           
 13205                           
 13206                           ;psect for function _LCDWriteCharacter
 13207  1685                     _LCDWriteCharacter:	
 13208                           
 13209                           ;incstack = 0
 13210                           ; Regs used in _LCDWriteCharacter: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13211                           ;LCDWriteCharacter@character stored from wreg
 13212  1685  00F9               	movwf	LCDWriteCharacter@character
 13213                           
 13214                           ;lcd.c: 142: uint16_t base;
 13215                           ;lcd.c: 143: base = character - 0x20;
 13216  1686  0879               	movf	LCDWriteCharacter@character,w
 13217  1687  3EE0               	addlw	224
 13218  1688  00FA               	movwf	LCDWriteCharacter@base
 13219  1689  30FF               	movlw	255
 13220  168A  1803               	skipnc
 13221  168B  3000               	movlw	0
 13222  168C  00FB               	movwf	LCDWriteCharacter@base+1
 13223                           
 13224                           ;lcd.c: 144: base *= 3;
 13225  168D  3003               	movlw	3
 13226  168E  00F0               	movwf	___wmul@multiplier
 13227  168F  3000               	movlw	0
 13228  1690  00F1               	movwf	___wmul@multiplier+1
 13229  1691  087B               	movf	LCDWriteCharacter@base+1,w
 13230  1692  00F3               	movwf	___wmul@multiplicand+1
 13231  1693  087A               	movf	LCDWriteCharacter@base,w
 13232  1694  00F2               	movwf	___wmul@multiplicand
 13233  1695  3193  235A  3196   	fcall	___wmul
 13234  1698  0871               	movf	?___wmul+1,w
 13235  1699  00FB               	movwf	LCDWriteCharacter@base+1
 13236  169A  0870               	movf	?___wmul,w
 13237  169B  00FA               	movwf	LCDWriteCharacter@base
 13238                           
 13239                           ;lcd.c: 145: LCDWrite(1,fonts[base]);
 13240  169C  087B               	movf	LCDWriteCharacter@base+1,w
 13241  169D  0085               	movwf	5
 13242  169E  087A               	movf	LCDWriteCharacter@base,w
 13243  169F  0084               	movwf	4
 13244  16A0  3000               	movlw	low (_fonts| (0+32768))
 13245  16A1  0784               	addwf	4,f
 13246  16A2  3090               	movlw	high (_fonts| (0+32768))
 13247  16A3  3D85               	addwfc	5,f
 13248  16A4  0800               	movf	0,w	;code access
 13249  16A5  00F6               	movwf	??_LCDWriteCharacter
 13250  16A6  0876               	movf	??_LCDWriteCharacter,w
 13251  16A7  00F0               	movwf	LCDWrite@data
 13252  16A8  3001               	movlw	1
 13253  16A9  3193  23F1  3196   	fcall	_LCDWrite
 13254                           
 13255                           ;lcd.c: 146: LCDWrite(1,fonts[base + 1]);
 13256  16AC  087A               	movf	LCDWriteCharacter@base,w
 13257  16AD  3E01               	addlw	1
 13258  16AE  00F6               	movwf	??_LCDWriteCharacter
 13259  16AF  3000               	movlw	0
 13260  16B0  3D7B               	addwfc	LCDWriteCharacter@base+1,w
 13261  16B1  00F7               	movwf	??_LCDWriteCharacter+1
 13262  16B2  3000               	movlw	low (_fonts| (0+32768))
 13263  16B3  0776               	addwf	??_LCDWriteCharacter,w
 13264  16B4  0084               	movwf	4
 13265  16B5  3090               	movlw	high (_fonts| (0+32768))
 13266  16B6  3D77               	addwfc	??_LCDWriteCharacter+1,w
 13267  16B7  0085               	movwf	5
 13268  16B8  0800               	movf	0,w	;code access
 13269  16B9  00F8               	movwf	??_LCDWriteCharacter+2
 13270  16BA  0878               	movf	??_LCDWriteCharacter+2,w
 13271  16BB  00F0               	movwf	LCDWrite@data
 13272  16BC  3001               	movlw	1
 13273  16BD  3193  23F1  3196   	fcall	_LCDWrite
 13274                           
 13275                           ;lcd.c: 147: LCDWrite(1,fonts[base + 2]);
 13276  16C0  087A               	movf	LCDWriteCharacter@base,w
 13277  16C1  3E02               	addlw	2
 13278  16C2  00F6               	movwf	??_LCDWriteCharacter
 13279  16C3  3000               	movlw	0
 13280  16C4  3D7B               	addwfc	LCDWriteCharacter@base+1,w
 13281  16C5  00F7               	movwf	??_LCDWriteCharacter+1
 13282  16C6  3000               	movlw	low (_fonts| (0+32768))
 13283  16C7  0776               	addwf	??_LCDWriteCharacter,w
 13284  16C8  0084               	movwf	4
 13285  16C9  3090               	movlw	high (_fonts| (0+32768))
 13286  16CA  3D77               	addwfc	??_LCDWriteCharacter+1,w
 13287  16CB  0085               	movwf	5
 13288  16CC  0800               	movf	0,w	;code access
 13289  16CD  00F8               	movwf	??_LCDWriteCharacter+2
 13290  16CE  0878               	movf	??_LCDWriteCharacter+2,w
 13291  16CF  00F0               	movwf	LCDWrite@data
 13292  16D0  3001               	movlw	1
 13293  16D1  3193  23F1  3196   	fcall	_LCDWrite
 13294                           
 13295                           ;lcd.c: 148: LCDWrite(1, 0x00);
 13296  16D4  01F0               	clrf	LCDWrite@data
 13297  16D5  3001               	movlw	1
 13298  16D6  3193  23F1         	fcall	_LCDWrite
 13299  16D8  0008               	return
 13300  16D9                     __end_of_LCDWriteCharacter:	
 13301                           
 13302                           	psect	text37
 13303  135A                     __ptext37:	
 13304 ;; *************** function ___wmul *****************
 13305 ;; Defined at:
 13306 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 13307 ;; Parameters:    Size  Location     Type
 13308 ;;  multiplier      2    0[COMMON] unsigned int 
 13309 ;;  multiplicand    2    2[COMMON] unsigned int 
 13310 ;; Auto vars:     Size  Location     Type
 13311 ;;  product         2    4[COMMON] unsigned int 
 13312 ;; Return value:  Size  Location     Type
 13313 ;;                  2    0[COMMON] unsigned int 
 13314 ;; Registers used:
 13315 ;;		wreg, status,2, status,0
 13316 ;; Tracked objects:
 13317 ;;		On entry : 0/0
 13318 ;;		On exit  : 0/0
 13319 ;;		Unchanged: 0/0
 13320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13321 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13322 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13323 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13324 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13325 ;;Total ram usage:        6 bytes
 13326 ;; Hardware stack levels used:    1
 13327 ;; This function calls:
 13328 ;;		Nothing
 13329 ;; This function is called by:
 13330 ;;		_readIAnalog
 13331 ;;		_LCDWriteCharacter
 13332 ;;		_eval_poly
 13333 ;; This function uses a non-reentrant model
 13334 ;;
 13335                           
 13336                           
 13337                           ;psect for function ___wmul
 13338  135A                     ___wmul:	
 13339                           
 13340                           ;incstack = 0
 13341                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 13342  135A  01F4               	clrf	___wmul@product
 13343  135B  01F5               	clrf	___wmul@product+1
 13344  135C                     l2288:	
 13345  135C  1C70               	btfss	___wmul@multiplier,0
 13346  135D  2B62               	goto	l596
 13347  135E  0872               	movf	___wmul@multiplicand,w
 13348  135F  07F4               	addwf	___wmul@product,f
 13349  1360  0873               	movf	___wmul@multiplicand+1,w
 13350  1361  3DF5               	addwfc	___wmul@product+1,f
 13351  1362                     l596:	
 13352  1362  3001               	movlw	1
 13353  1363                     u2165:	
 13354  1363  35F2               	lslf	___wmul@multiplicand,f
 13355  1364  0DF3               	rlf	___wmul@multiplicand+1,f
 13356  1365  0B89               	decfsz	9,f
 13357  1366  2B63               	goto	u2165
 13358  1367  3001               	movlw	1
 13359  1368                     u2175:	
 13360  1368  36F1               	lsrf	___wmul@multiplier+1,f
 13361  1369  0CF0               	rrf	___wmul@multiplier,f
 13362  136A  0B89               	decfsz	9,f
 13363  136B  2B68               	goto	u2175
 13364  136C  0870               	movf	___wmul@multiplier,w
 13365  136D  0471               	iorwf	___wmul@multiplier+1,w
 13366  136E  1D03               	btfss	3,2
 13367  136F  2B5C               	goto	l2288
 13368  1370  0875               	movf	___wmul@product+1,w
 13369  1371  00F1               	movwf	?___wmul+1
 13370  1372  0874               	movf	___wmul@product,w
 13371  1373  00F0               	movwf	?___wmul
 13372  1374  0008               	return
 13373  1375                     __end_of___wmul:	
 13374                           
 13375                           	psect	text38
 13376  13F1                     __ptext38:	
 13377 ;; *************** function _LCDWrite *****************
 13378 ;; Defined at:
 13379 ;;		line 281 in file "lcd.c"
 13380 ;; Parameters:    Size  Location     Type
 13381 ;;  data_or_comm    1    wreg     unsigned char 
 13382 ;;  data            1    0[COMMON] unsigned char 
 13383 ;; Auto vars:     Size  Location     Type
 13384 ;;  data_or_comm    1    2[COMMON] unsigned char 
 13385 ;;  i               1    4[COMMON] unsigned char 
 13386 ;;  d               1    3[COMMON] unsigned char 
 13387 ;; Return value:  Size  Location     Type
 13388 ;;                  1    wreg      void 
 13389 ;; Registers used:
 13390 ;;		wreg, status,2, status,0
 13391 ;; Tracked objects:
 13392 ;;		On entry : 0/0
 13393 ;;		On exit  : 0/0
 13394 ;;		Unchanged: 0/0
 13395 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13396 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13397 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13398 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13399 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13400 ;;Total ram usage:        5 bytes
 13401 ;; Hardware stack levels used:    1
 13402 ;; This function calls:
 13403 ;;		Nothing
 13404 ;; This function is called by:
 13405 ;;		_gotoXY
 13406 ;;		_LCDWriteCharacter
 13407 ;;		_LCDClear
 13408 ;;		_LCDInit
 13409 ;; This function uses a non-reentrant model
 13410 ;;
 13411                           
 13412                           
 13413                           ;psect for function _LCDWrite
 13414  13F1                     _LCDWrite:	
 13415                           
 13416                           ;incstack = 0
 13417                           ; Regs used in _LCDWrite: [wreg+status,2+status,0]
 13418                           ;LCDWrite@data_or_command stored from wreg
 13419  13F1  00F2               	movwf	LCDWrite@data_or_command
 13420                           
 13421                           ;lcd.c: 283: uint8_t i,d;
 13422                           ;lcd.c: 285: d=data;
 13423  13F2  0870               	movf	LCDWrite@data,w
 13424  13F3  00F1               	movwf	??_LCDWrite
 13425  13F4  0871               	movf	??_LCDWrite,w
 13426  13F5  00F3               	movwf	LCDWrite@d
 13427                           
 13428                           ;lcd.c: 287: if(data_or_command == 0)
 13429  13F6  0872               	movf	LCDWrite@data_or_command,w
 13430  13F7  1D03               	btfss	3,2
 13431  13F8  2BFC               	goto	l217
 13432                           
 13433                           ;lcd.c: 288: {
 13434                           ;lcd.c: 289: LATAbits.LATA2 = 0;
 13435  13F9  0020               	movlb	0	; select bank0
 13436  13FA  1116               	bcf	22,2	;volatile
 13437                           
 13438                           ;lcd.c: 290: }
 13439  13FB  2BFE               	goto	l218
 13440  13FC                     l217:	
 13441                           
 13442                           ;lcd.c: 291: else
 13443                           ;lcd.c: 292: {
 13444                           ;lcd.c: 293: LATAbits.LATA2 = 1;
 13445  13FC  0020               	movlb	0	; select bank0
 13446  13FD  1516               	bsf	22,2	;volatile
 13447  13FE                     l218:	
 13448                           
 13449                           ;lcd.c: 294: }
 13450                           ;lcd.c: 296: LATAbits.LATA1 = 0;
 13451  13FE  1096               	bcf	22,1	;volatile
 13452                           
 13453                           ;lcd.c: 298: for(i=0;i<8;i++)
 13454  13FF  01F4               	clrf	LCDWrite@i
 13455  1400  3008               	movlw	8
 13456  1401  0274               	subwf	LCDWrite@i,w
 13457  1402  1803               	btfsc	3,0
 13458  1403  2C14               	goto	l220
 13459  1404                     l219:	
 13460                           
 13461                           ;lcd.c: 299: {
 13462                           ;lcd.c: 300: LATAbits.LATA3 = 0;
 13463  1404  1196               	bcf	22,3	;volatile
 13464                           
 13465                           ;lcd.c: 302: if(d&0x80)
 13466  1405  1FF3               	btfss	LCDWrite@d,7
 13467  1406  2C08               	goto	l221
 13468                           
 13469                           ;lcd.c: 303: {
 13470                           ;lcd.c: 304: LATAbits.LATA3 = 1;
 13471  1407  1596               	bsf	22,3	;volatile
 13472  1408                     l221:	
 13473                           
 13474                           ;lcd.c: 305: }
 13475                           ;lcd.c: 307: LATAbits.LATA4 = 1;
 13476  1408  1616               	bsf	22,4	;volatile
 13477                           
 13478                           ;lcd.c: 309: d<<=1;
 13479  1409  1003               	clrc
 13480  140A  0DF3               	rlf	LCDWrite@d,f
 13481                           
 13482                           ;lcd.c: 311: LATAbits.LATA4=0;
 13483  140B  1216               	bcf	22,4	;volatile
 13484  140C  3001               	movlw	1
 13485  140D  00F1               	movwf	??_LCDWrite
 13486  140E  0871               	movf	??_LCDWrite,w
 13487  140F  07F4               	addwf	LCDWrite@i,f
 13488  1410  3008               	movlw	8
 13489  1411  0274               	subwf	LCDWrite@i,w
 13490  1412  1C03               	skipc
 13491  1413  2C04               	goto	l219
 13492  1414                     l220:	
 13493                           
 13494                           ;lcd.c: 312: }
 13495                           ;lcd.c: 314: LATAbits.LATA1 = 1;
 13496  1414  1496               	bsf	22,1	;volatile
 13497  1415  0008               	return
 13498  1416                     __end_of_LCDWrite:	
 13499                           
 13500                           	psect	text39
 13501  0120                     __ptext39:	
 13502 ;; *************** function _Battery_State_Machine *****************
 13503 ;; Defined at:
 13504 ;;		line 28 in file "battery_charger.c"
 13505 ;; Parameters:    Size  Location     Type
 13506 ;;  z               1    wreg     unsigned char 
 13507 ;; Auto vars:     Size  Location     Type
 13508 ;;  z               1   35[BANK0 ] unsigned char 
 13509 ;; Return value:  Size  Location     Type
 13510 ;;                  1    wreg      void 
 13511 ;; Registers used:
 13512 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13513 ;; Tracked objects:
 13514 ;;		On entry : 0/0
 13515 ;;		On exit  : 0/0
 13516 ;;		Unchanged: 0/0
 13517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13518 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13519 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13520 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13521 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13522 ;;Total ram usage:        6 bytes
 13523 ;; Hardware stack levels used:    1
 13524 ;; Hardware stack levels required when called:    2
 13525 ;; This function calls:
 13526 ;;		___awtoft
 13527 ;;		___ftmul
 13528 ;;		___fttol
 13529 ;; This function is called by:
 13530 ;;		_main
 13531 ;; This function uses a non-reentrant model
 13532 ;;
 13533                           
 13534                           
 13535                           ;psect for function _Battery_State_Machine
 13536  0120                     _Battery_State_Machine:	
 13537                           
 13538                           ;incstack = 0
 13539                           ; Regs used in _Battery_State_Machine: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 13540                           ;Battery_State_Machine@z stored from wreg
 13541  0120  0020               	movlb	0	; select bank0
 13542  0121  00C3               	movwf	Battery_State_Machine@z
 13543                           
 13544                           ;battery_charger.c: 30: if(batteryState[z]==PRECHARGE)
 13545  0122  0843               	movf	Battery_State_Machine@z,w
 13546  0123  3E65               	addlw	(low (_batteryState| 0))& (0+255)
 13547  0124  0086               	movwf	6
 13548  0125  0187               	clrf	7
 13549  0126  3003               	movlw	3
 13550  0127  0601               	xorwf	1,w
 13551  0128  1D03               	btfss	3,2
 13552  0129  2977               	goto	l2912
 13553                           
 13554                           ;battery_charger.c: 31: {
 13555                           ;battery_charger.c: 32: if(voltage[z]<1075)
 13556  012A  3543               	lslf	Battery_State_Machine@z,w
 13557  012B  3EB0               	addlw	(low (_voltage| 0))& (0+255)
 13558  012C  0086               	movwf	6
 13559  012D  0187               	clrf	7
 13560  012E  3F40               	moviw [0]fsr1
 13561  012F  00BE               	movwf	??_Battery_State_Machine
 13562  0130  3F41               	moviw [1]fsr1
 13563  0131  00BF               	movwf	??_Battery_State_Machine+1
 13564  0132  083F               	movf	??_Battery_State_Machine+1,w
 13565  0133  3A80               	xorlw	128
 13566  0134  00C0               	movwf	??_Battery_State_Machine+2
 13567  0135  3084               	movlw	132
 13568  0136  0240               	subwf	??_Battery_State_Machine+2,w
 13569  0137  1D03               	skipz
 13570  0138  293B               	goto	u3215
 13571  0139  3033               	movlw	51
 13572  013A  023E               	subwf	??_Battery_State_Machine,w
 13573  013B                     u3215:	
 13574  013B  1803               	skipnc
 13575  013C  2965               	goto	l2910
 13576                           
 13577                           ;battery_charger.c: 33: {
 13578                           ;battery_charger.c: 34: if(stateCounter[z]>0)
 13579  013D  0020               	movlb	0	; select bank0
 13580  013E  3543               	lslf	Battery_State_Machine@z,w
 13581  013F  3EC0               	addlw	(low (_stateCounter| 0))& (0+255)
 13582  0140  0086               	movwf	6
 13583  0141  0187               	clrf	7
 13584  0142  3F40               	moviw [0]fsr1
 13585  0143  00BE               	movwf	??_Battery_State_Machine
 13586  0144  3F41               	moviw [1]fsr1
 13587  0145  00BF               	movwf	??_Battery_State_Machine+1
 13588  0146  083F               	movf	??_Battery_State_Machine+1,w
 13589  0147  3A80               	xorlw	128
 13590  0148  00C0               	movwf	??_Battery_State_Machine+2
 13591  0149  3080               	movlw	128
 13592  014A  0240               	subwf	??_Battery_State_Machine+2,w
 13593  014B  1D03               	skipz
 13594  014C  294F               	goto	u3225
 13595  014D  3001               	movlw	1
 13596  014E  023E               	subwf	??_Battery_State_Machine,w
 13597  014F                     u3225:	
 13598  014F  1C03               	skipc
 13599  0150  295D               	goto	l2908
 13600                           
 13601                           ;battery_charger.c: 35: {
 13602                           ;battery_charger.c: 36: stateCounter[z]-=1;
 13603  0151  0020               	movlb	0	; select bank0
 13604  0152  3543               	lslf	Battery_State_Machine@z,w
 13605  0153  3EC0               	addlw	(low (_stateCounter| 0))& (0+255)
 13606  0154  0086               	movwf	6
 13607  0155  0187               	clrf	7
 13608  0156  30FF               	movlw	255
 13609  0157  0781               	addwf	1,f
 13610  0158  3141               	addfsr 1,1
 13611  0159  30FF               	movlw	255
 13612  015A  3D81               	addwfc	1,f
 13613  015B  317F               	addfsr 1,-1
 13614                           
 13615                           ;battery_charger.c: 37: }
 13616  015C  0008               	return
 13617  015D                     l2908:	
 13618                           
 13619                           ;battery_charger.c: 38: else
 13620                           ;battery_charger.c: 39: {
 13621                           ;battery_charger.c: 40: batteryState[z]=FAULT;
 13622  015D  0020               	movlb	0	; select bank0
 13623  015E  0843               	movf	Battery_State_Machine@z,w
 13624  015F  3E65               	addlw	(low (_batteryState| 0))& (0+255)
 13625  0160  0086               	movwf	6
 13626  0161  0187               	clrf	7
 13627  0162  0181               	clrf	1
 13628  0163  0A81               	incf	1,f
 13629                           
 13630                           ;battery_charger.c: 41: }
 13631                           ;battery_charger.c: 42: }
 13632  0164  0008               	return
 13633  0165                     l2910:	
 13634                           
 13635                           ;battery_charger.c: 43: else
 13636                           ;battery_charger.c: 44: {
 13637                           ;battery_charger.c: 45: batteryState[z]=CHARGE;
 13638  0165  3004               	movlw	4
 13639  0166  0020               	movlb	0	; select bank0
 13640  0167  00BE               	movwf	??_Battery_State_Machine
 13641  0168  0843               	movf	Battery_State_Machine@z,w
 13642  0169  3E65               	addlw	(low (_batteryState| 0))& (0+255)
 13643  016A  0086               	movwf	6
 13644  016B  0187               	clrf	7
 13645  016C  083E               	movf	??_Battery_State_Machine,w
 13646  016D  0081               	movwf	1
 13647                           
 13648                           ;battery_charger.c: 46: Iref[z]=35;
 13649  016E  3543               	lslf	Battery_State_Machine@z,w
 13650  016F  3EC4               	addlw	(low (_Iref| 0))& (0+255)
 13651  0170  0086               	movwf	6
 13652  0171  0187               	clrf	7
 13653  0172  3023               	movlw	35
 13654  0173  3FC0               	movwi [0]fsr1
 13655  0174  3000               	movlw	0
 13656  0175  3FC1               	movwi [1]fsr1
 13657                           
 13658                           ;battery_charger.c: 47: }
 13659                           ;battery_charger.c: 48: }
 13660  0176  0008               	return
 13661  0177                     l2912:	
 13662                           
 13663                           ;battery_charger.c: 49: else if(batteryState[z]==CHARGE)
 13664  0177  0843               	movf	Battery_State_Machine@z,w
 13665  0178  3E65               	addlw	(low (_batteryState| 0))& (0+255)
 13666  0179  0086               	movwf	6
 13667  017A  0187               	clrf	7
 13668  017B  3004               	movlw	4
 13669  017C  0601               	xorwf	1,w
 13670  017D  1D03               	btfss	3,2
 13671  017E  2A39               	goto	l2932
 13672                           
 13673                           ;battery_charger.c: 50: {
 13674                           ;battery_charger.c: 51: Vref[z]=1425+(int16_t)((250-batteryTemp)*.24);
 13675  017F  096D               	comf	_batteryTemp,w
 13676  0180  00BE               	movwf	??_Battery_State_Machine
 13677  0181  096E               	comf	_batteryTemp+1,w
 13678  0182  00BF               	movwf	??_Battery_State_Machine+1
 13679  0183  0ABE               	incf	??_Battery_State_Machine,f
 13680  0184  1903               	skipnz
 13681  0185  0ABF               	incf	??_Battery_State_Machine+1,f
 13682  0186  083E               	movf	??_Battery_State_Machine,w
 13683  0187  3EFA               	addlw	250
 13684  0188  00F8               	movwf	___awtoft@c
 13685  0189  3000               	movlw	0
 13686  018A  3D3F               	addwfc	??_Battery_State_Machine+1,w
 13687  018B  00F9               	movwf	___awtoft@c+1
 13688  018C  3193  23D1  3181   	fcall	___awtoft
 13689  018F  0878               	movf	?___awtoft,w
 13690  0190  0020               	movlb	0	; select bank0
 13691  0191  00A3               	movwf	___ftmul@f2
 13692  0192  0879               	movf	?___awtoft+1,w
 13693  0193  00A4               	movwf	___ftmul@f2+1
 13694  0194  087A               	movf	?___awtoft+2,w
 13695  0195  00A5               	movwf	___ftmul@f2+2
 13696  0196  30C3               	movlw	195
 13697  0197  00A0               	movwf	___ftmul@f1
 13698  0198  3075               	movlw	117
 13699  0199  00A1               	movwf	___ftmul@f1+1
 13700  019A  303E               	movlw	62
 13701  019B  00A2               	movwf	___ftmul@f1+2
 13702  019C  318B  232F  3181   	fcall	___ftmul
 13703  019F  0020               	movlb	0	; select bank0
 13704  01A0  0820               	movf	?___ftmul,w
 13705  01A1  00B0               	movwf	___fttol@f1
 13706  01A2  0821               	movf	?___ftmul+1,w
 13707  01A3  00B1               	movwf	___fttol@f1+1
 13708  01A4  0822               	movf	?___ftmul+2,w
 13709  01A5  00B2               	movwf	___fttol@f1+2
 13710  01A6  3189  214F  3181   	fcall	___fttol
 13711  01A9  0020               	movlb	0	; select bank0
 13712  01AA  0830               	movf	?___fttol,w
 13713  01AB  3E91               	addlw	145
 13714  01AC  00C0               	movwf	??_Battery_State_Machine+2
 13715  01AD  3005               	movlw	5
 13716  01AE  3D31               	addwfc	?___fttol+1,w
 13717  01AF  00C1               	movwf	??_Battery_State_Machine+3
 13718  01B0  3543               	lslf	Battery_State_Machine@z,w
 13719  01B1  3E5B               	addlw	(low (_Vref| 0))& (0+255)
 13720  01B2  0086               	movwf	6
 13721  01B3  0187               	clrf	7
 13722  01B4  0840               	movf	??_Battery_State_Machine+2,w
 13723  01B5  3FC0               	movwi [0]fsr1
 13724  01B6  0841               	movf	??_Battery_State_Machine+3,w
 13725  01B7  3FC1               	movwi [1]fsr1
 13726                           
 13727                           ;battery_charger.c: 52: if(!(Imode[z]))
 13728  01B8  0843               	movf	Battery_State_Machine@z,w
 13729  01B9  3E63               	addlw	(low (_Imode| 0))& (0+255)
 13730  01BA  0086               	movwf	6
 13731  01BB  0187               	clrf	7
 13732  01BC  0801               	movf	1,w
 13733  01BD  1D03               	btfss	3,2
 13734  01BE  2A20               	goto	l2928
 13735                           
 13736                           ;battery_charger.c: 53: {
 13737                           ;battery_charger.c: 54: if(current[z] < Imin[z])
 13738  01BF  3543               	lslf	Battery_State_Machine@z,w
 13739  01C0  3ECC               	addlw	(low (_Imin| 0))& (0+255)
 13740  01C1  0086               	movwf	6
 13741  01C2  0187               	clrf	7
 13742  01C3  3F40               	moviw [0]fsr1
 13743  01C4  00BE               	movwf	??_Battery_State_Machine
 13744  01C5  3F41               	moviw [1]fsr1
 13745  01C6  00BF               	movwf	??_Battery_State_Machine+1
 13746  01C7  3543               	lslf	Battery_State_Machine@z,w
 13747  01C8  3EB8               	addlw	(low (_current| 0))& (0+255)
 13748  01C9  0086               	movwf	6
 13749  01CA  0187               	clrf	7
 13750  01CB  3F40               	moviw [0]fsr1
 13751  01CC  00C0               	movwf	??_Battery_State_Machine+2
 13752  01CD  3F41               	moviw [1]fsr1
 13753  01CE  00C1               	movwf	??_Battery_State_Machine+3
 13754  01CF  0841               	movf	??_Battery_State_Machine+3,w
 13755  01D0  3A80               	xorlw	128
 13756  01D1  00C2               	movwf	??_Battery_State_Machine+4
 13757  01D2  083F               	movf	??_Battery_State_Machine+1,w
 13758  01D3  3A80               	xorlw	128
 13759  01D4  0242               	subwf	??_Battery_State_Machine+4,w
 13760  01D5  1D03               	skipz
 13761  01D6  29D9               	goto	u3255
 13762  01D7  083E               	movf	??_Battery_State_Machine,w
 13763  01D8  0240               	subwf	??_Battery_State_Machine+2,w
 13764  01D9                     u3255:	
 13765  01D9  1803               	skipnc
 13766  01DA  2A06               	goto	l2924
 13767                           
 13768                           ;battery_charger.c: 55: {
 13769                           ;battery_charger.c: 56: IminCount[z]-=2;
 13770  01DB  0020               	movlb	0	; select bank0
 13771  01DC  3543               	lslf	Battery_State_Machine@z,w
 13772  01DD  3EC8               	addlw	(low (_IminCount| 0))& (0+255)
 13773  01DE  0086               	movwf	6
 13774  01DF  0187               	clrf	7
 13775  01E0  3002               	movlw	2
 13776  01E1  0281               	subwf	1,f
 13777  01E2  3141               	addfsr 1,1
 13778  01E3  3000               	movlw	0
 13779  01E4  3B81               	subwfb	1,f
 13780  01E5  317F               	addfsr 1,-1
 13781                           
 13782                           ;battery_charger.c: 57: if(IminCount[z]<10)
 13783  01E6  3543               	lslf	Battery_State_Machine@z,w
 13784  01E7  3EC8               	addlw	(low (_IminCount| 0))& (0+255)
 13785  01E8  0086               	movwf	6
 13786  01E9  0187               	clrf	7
 13787  01EA  3F40               	moviw [0]fsr1
 13788  01EB  00BE               	movwf	??_Battery_State_Machine
 13789  01EC  3F41               	moviw [1]fsr1
 13790  01ED  00BF               	movwf	??_Battery_State_Machine+1
 13791  01EE  3000               	movlw	0
 13792  01EF  023F               	subwf	??_Battery_State_Machine+1,w
 13793  01F0  300A               	movlw	10
 13794  01F1  1903               	skipnz
 13795  01F2  023E               	subwf	??_Battery_State_Machine,w
 13796  01F3  1803               	skipnc
 13797  01F4  0008               	return
 13798                           
 13799                           ;battery_charger.c: 58: {
 13800                           ;battery_charger.c: 59: batteryState[z] = FLOAT;
 13801  01F5  3005               	movlw	5
 13802  01F6  00BE               	movwf	??_Battery_State_Machine
 13803  01F7  0843               	movf	Battery_State_Machine@z,w
 13804  01F8  3E65               	addlw	(low (_batteryState| 0))& (0+255)
 13805  01F9  0086               	movwf	6
 13806  01FA  0187               	clrf	7
 13807  01FB  083E               	movf	??_Battery_State_Machine,w
 13808  01FC  0081               	movwf	1
 13809                           
 13810                           ;battery_charger.c: 60: IminCount[z]=10;
 13811  01FD  3543               	lslf	Battery_State_Machine@z,w
 13812  01FE  3EC8               	addlw	(low (_IminCount| 0))& (0+255)
 13813  01FF  0086               	movwf	6
 13814  0200  0187               	clrf	7
 13815  0201  300A               	movlw	10
 13816  0202  3FC0               	movwi [0]fsr1
 13817  0203  3000               	movlw	0
 13818  0204  3FC1               	movwi [1]fsr1
 13819                           
 13820                           ;battery_charger.c: 61: }
 13821                           ;battery_charger.c: 62: }
 13822  0205  0008               	return
 13823  0206                     l2924:	
 13824                           
 13825                           ;battery_charger.c: 63: else
 13826                           ;battery_charger.c: 64: {
 13827                           ;battery_charger.c: 65: if(IminCount[z]<60)IminCount[z]+=1;
 13828  0206  0020               	movlb	0	; select bank0
 13829  0207  3543               	lslf	Battery_State_Machine@z,w
 13830  0208  3EC8               	addlw	(low (_IminCount| 0))& (0+255)
 13831  0209  0086               	movwf	6
 13832  020A  0187               	clrf	7
 13833  020B  3F40               	moviw [0]fsr1
 13834  020C  00BE               	movwf	??_Battery_State_Machine
 13835  020D  3F41               	moviw [1]fsr1
 13836  020E  00BF               	movwf	??_Battery_State_Machine+1
 13837  020F  3000               	movlw	0
 13838  0210  023F               	subwf	??_Battery_State_Machine+1,w
 13839  0211  303C               	movlw	60
 13840  0212  1903               	skipnz
 13841  0213  023E               	subwf	??_Battery_State_Machine,w
 13842  0214  1803               	skipnc
 13843  0215  0008               	return
 13844  0216  3543               	lslf	Battery_State_Machine@z,w
 13845  0217  3EC8               	addlw	(low (_IminCount| 0))& (0+255)
 13846  0218  0086               	movwf	6
 13847  0219  0187               	clrf	7
 13848  021A  3001               	movlw	1
 13849  021B  0781               	addwf	1,f
 13850  021C  3141               	addfsr 1,1
 13851  021D  1803               	skipnc
 13852  021E  0A81               	incf	1,f
 13853                           
 13854                           ;battery_charger.c: 66: }
 13855                           ;battery_charger.c: 67: }
 13856  021F  0008               	return
 13857  0220                     l2928:	
 13858                           
 13859                           ;battery_charger.c: 68: else if(IminCount[z]<60)IminCount[z]+=1;
 13860  0220  3543               	lslf	Battery_State_Machine@z,w
 13861  0221  3EC8               	addlw	(low (_IminCount| 0))& (0+255)
 13862  0222  0086               	movwf	6
 13863  0223  0187               	clrf	7
 13864  0224  3F40               	moviw [0]fsr1
 13865  0225  00BE               	movwf	??_Battery_State_Machine
 13866  0226  3F41               	moviw [1]fsr1
 13867  0227  00BF               	movwf	??_Battery_State_Machine+1
 13868  0228  3000               	movlw	0
 13869  0229  023F               	subwf	??_Battery_State_Machine+1,w
 13870  022A  303C               	movlw	60
 13871  022B  1903               	skipnz
 13872  022C  023E               	subwf	??_Battery_State_Machine,w
 13873  022D  1803               	skipnc
 13874  022E  0008               	return
 13875  022F  3543               	lslf	Battery_State_Machine@z,w
 13876  0230  3EC8               	addlw	(low (_IminCount| 0))& (0+255)
 13877  0231  0086               	movwf	6
 13878  0232  0187               	clrf	7
 13879  0233  3001               	movlw	1
 13880  0234  0781               	addwf	1,f
 13881  0235  3141               	addfsr 1,1
 13882  0236  1803               	skipnc
 13883  0237  0A81               	incf	1,f
 13884                           
 13885                           ;battery_charger.c: 69: }
 13886  0238  0008               	return
 13887  0239                     l2932:	
 13888                           
 13889                           ;battery_charger.c: 70: else if(batteryState[z] == FLOAT)
 13890  0239  0843               	movf	Battery_State_Machine@z,w
 13891  023A  3E65               	addlw	(low (_batteryState| 0))& (0+255)
 13892  023B  0086               	movwf	6
 13893  023C  0187               	clrf	7
 13894  023D  3005               	movlw	5
 13895  023E  0601               	xorwf	1,w
 13896  023F  1D03               	btfss	3,2
 13897  0240  2A87               	goto	l2940
 13898                           
 13899                           ;battery_charger.c: 71: {
 13900                           ;battery_charger.c: 72: Vref[z]=1350+(int16_t)((250-batteryTemp)*.24);
 13901  0241  096D               	comf	_batteryTemp,w
 13902  0242  00BE               	movwf	??_Battery_State_Machine
 13903  0243  096E               	comf	_batteryTemp+1,w
 13904  0244  00BF               	movwf	??_Battery_State_Machine+1
 13905  0245  0ABE               	incf	??_Battery_State_Machine,f
 13906  0246  1903               	skipnz
 13907  0247  0ABF               	incf	??_Battery_State_Machine+1,f
 13908  0248  083E               	movf	??_Battery_State_Machine,w
 13909  0249  3EFA               	addlw	250
 13910  024A  00F8               	movwf	___awtoft@c
 13911  024B  3000               	movlw	0
 13912  024C  3D3F               	addwfc	??_Battery_State_Machine+1,w
 13913  024D  00F9               	movwf	___awtoft@c+1
 13914  024E  3193  23D1  3181   	fcall	___awtoft
 13915  0251  0878               	movf	?___awtoft,w
 13916  0252  0020               	movlb	0	; select bank0
 13917  0253  00A3               	movwf	___ftmul@f2
 13918  0254  0879               	movf	?___awtoft+1,w
 13919  0255  00A4               	movwf	___ftmul@f2+1
 13920  0256  087A               	movf	?___awtoft+2,w
 13921  0257  00A5               	movwf	___ftmul@f2+2
 13922  0258  30C3               	movlw	195
 13923  0259  00A0               	movwf	___ftmul@f1
 13924  025A  3075               	movlw	117
 13925  025B  00A1               	movwf	___ftmul@f1+1
 13926  025C  303E               	movlw	62
 13927  025D  00A2               	movwf	___ftmul@f1+2
 13928  025E  318B  232F  3181   	fcall	___ftmul
 13929  0261  0020               	movlb	0	; select bank0
 13930  0262  0820               	movf	?___ftmul,w
 13931  0263  00B0               	movwf	___fttol@f1
 13932  0264  0821               	movf	?___ftmul+1,w
 13933  0265  00B1               	movwf	___fttol@f1+1
 13934  0266  0822               	movf	?___ftmul+2,w
 13935  0267  00B2               	movwf	___fttol@f1+2
 13936  0268  3189  214F         	fcall	___fttol
 13937  026A  0020               	movlb	0	; select bank0
 13938  026B  0830               	movf	?___fttol,w
 13939  026C  3E46               	addlw	70
 13940  026D  00C0               	movwf	??_Battery_State_Machine+2
 13941  026E  3005               	movlw	5
 13942  026F  3D31               	addwfc	?___fttol+1,w
 13943  0270  00C1               	movwf	??_Battery_State_Machine+3
 13944  0271  3543               	lslf	Battery_State_Machine@z,w
 13945  0272  3E5B               	addlw	(low (_Vref| 0))& (0+255)
 13946  0273  0086               	movwf	6
 13947  0274  0187               	clrf	7
 13948  0275  0840               	movf	??_Battery_State_Machine+2,w
 13949  0276  3FC0               	movwi [0]fsr1
 13950  0277  0841               	movf	??_Battery_State_Machine+3,w
 13951  0278  3FC1               	movwi [1]fsr1
 13952                           
 13953                           ;battery_charger.c: 73: Iref[z]=15;
 13954  0279  3543               	lslf	Battery_State_Machine@z,w
 13955  027A  3EC4               	addlw	(low (_Iref| 0))& (0+255)
 13956  027B  0086               	movwf	6
 13957  027C  0187               	clrf	7
 13958  027D  300F               	movlw	15
 13959  027E  3FC0               	movwi [0]fsr1
 13960  027F  3000               	movlw	0
 13961  0280  3FC1               	movwi [1]fsr1
 13962                           
 13963                           ;battery_charger.c: 74: Imode[z]=0;
 13964  0281  0843               	movf	Battery_State_Machine@z,w
 13965  0282  3E63               	addlw	(low (_Imode| 0))& (0+255)
 13966  0283  0086               	movwf	6
 13967  0284  0187               	clrf	7
 13968  0285  0181               	clrf	1
 13969                           
 13970                           ;battery_charger.c: 75: }
 13971  0286  0008               	return
 13972  0287                     l2940:	
 13973                           
 13974                           ;battery_charger.c: 76: else
 13975                           ;battery_charger.c: 77: if(batteryState[z] == FAULT)
 13976  0287  0843               	movf	Battery_State_Machine@z,w
 13977  0288  3E65               	addlw	(low (_batteryState| 0))& (0+255)
 13978  0289  0086               	movwf	6
 13979  028A  0187               	clrf	7
 13980  028B  0301               	decf	1,w
 13981  028C  1D03               	btfss	3,2
 13982  028D  0008               	return
 13983                           
 13984                           ;battery_charger.c: 78: {
 13985                           ;battery_charger.c: 79: batteryState[z]=PRECHARGE;
 13986  028E  3003               	movlw	3
 13987  028F  00BE               	movwf	??_Battery_State_Machine
 13988  0290  0843               	movf	Battery_State_Machine@z,w
 13989  0291  3E65               	addlw	(low (_batteryState| 0))& (0+255)
 13990  0292  0086               	movwf	6
 13991  0293  0187               	clrf	7
 13992  0294  083E               	movf	??_Battery_State_Machine,w
 13993  0295  0081               	movwf	1
 13994  0296  0008               	return
 13995  0297                     __end_of_Battery_State_Machine:	
 13996                           
 13997                           	psect	text40
 13998  094F                     __ptext40:	
 13999 ;; *************** function ___fttol *****************
 14000 ;; Defined at:
 14001 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
 14002 ;; Parameters:    Size  Location     Type
 14003 ;;  f1              3   16[BANK0 ] float 
 14004 ;; Auto vars:     Size  Location     Type
 14005 ;;  lval            4   25[BANK0 ] unsigned long 
 14006 ;;  exp1            1   29[BANK0 ] unsigned char 
 14007 ;;  sign1           1   24[BANK0 ] unsigned char 
 14008 ;; Return value:  Size  Location     Type
 14009 ;;                  4   16[BANK0 ] long 
 14010 ;; Registers used:
 14011 ;;		wreg, status,2, status,0
 14012 ;; Tracked objects:
 14013 ;;		On entry : 0/0
 14014 ;;		On exit  : 0/0
 14015 ;;		Unchanged: 0/0
 14016 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14017 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14018 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14019 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14020 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14021 ;;Total ram usage:       14 bytes
 14022 ;; Hardware stack levels used:    1
 14023 ;; This function calls:
 14024 ;;		Nothing
 14025 ;; This function is called by:
 14026 ;;		_tempCalc
 14027 ;;		_main
 14028 ;;		_calculateCurrent0
 14029 ;;		_calculateCurrent1
 14030 ;;		_calculateCurrent2
 14031 ;;		_calculateCurrent3
 14032 ;;		_Init_Battery_State_Machine
 14033 ;;		_Battery_State_Machine
 14034 ;;		_cc_cv_mode
 14035 ;; This function uses a non-reentrant model
 14036 ;;
 14037                           
 14038                           
 14039                           ;psect for function ___fttol
 14040  094F                     ___fttol:	
 14041                           
 14042                           ;incstack = 0
 14043                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 14044  094F  0020               	movlb	0	; select bank0
 14045  0950  0830               	movf	___fttol@f1,w
 14046  0951  00B4               	movwf	??___fttol
 14047  0952  0831               	movf	___fttol@f1+1,w
 14048  0953  00B5               	movwf	??___fttol+1
 14049  0954  0832               	movf	___fttol@f1+2,w
 14050  0955  00B6               	movwf	??___fttol+2
 14051  0956  1003               	clrc
 14052  0957  0D35               	rlf	??___fttol+1,w
 14053  0958  0D36               	rlf	??___fttol+2,w
 14054  0959  00B7               	movwf	??___fttol+3
 14055  095A  0837               	movf	??___fttol+3,w
 14056  095B  00BD               	movwf	___fttol@exp1
 14057  095C  083D               	movf	___fttol@exp1,w
 14058  095D  1D03               	btfss	3,2
 14059  095E  2968               	goto	l2460
 14060  095F  3000               	movlw	0
 14061  0960  00B3               	movwf	?___fttol+3
 14062  0961  3000               	movlw	0
 14063  0962  00B2               	movwf	?___fttol+2
 14064  0963  3000               	movlw	0
 14065  0964  00B1               	movwf	?___fttol+1
 14066  0965  3000               	movlw	0
 14067  0966  00B0               	movwf	?___fttol
 14068  0967  0008               	return
 14069  0968                     l2460:	
 14070  0968  0830               	movf	___fttol@f1,w
 14071  0969  00B4               	movwf	??___fttol
 14072  096A  0831               	movf	___fttol@f1+1,w
 14073  096B  00B5               	movwf	??___fttol+1
 14074  096C  0832               	movf	___fttol@f1+2,w
 14075  096D  00B6               	movwf	??___fttol+2
 14076  096E  3017               	movlw	23
 14077  096F                     u2595:	
 14078  096F  36B6               	lsrf	??___fttol+2,f
 14079  0970  0CB5               	rrf	??___fttol+1,f
 14080  0971  0CB4               	rrf	??___fttol,f
 14081  0972  0B89               	decfsz	9,f
 14082  0973  296F               	goto	u2595
 14083  0974  0834               	movf	??___fttol,w
 14084  0975  00B7               	movwf	??___fttol+3
 14085  0976  0837               	movf	??___fttol+3,w
 14086  0977  00B8               	movwf	___fttol@sign1
 14087  0978  17B1               	bsf	___fttol@f1+1,7
 14088  0979  30FF               	movlw	255
 14089  097A  05B0               	andwf	___fttol@f1,f
 14090  097B  30FF               	movlw	255
 14091  097C  05B1               	andwf	___fttol@f1+1,f
 14092  097D  3000               	movlw	0
 14093  097E  05B2               	andwf	___fttol@f1+2,f
 14094  097F  0830               	movf	___fttol@f1,w
 14095  0980  00B9               	movwf	___fttol@lval
 14096  0981  0831               	movf	___fttol@f1+1,w
 14097  0982  00BA               	movwf	___fttol@lval+1
 14098  0983  0832               	movf	___fttol@f1+2,w
 14099  0984  00BB               	movwf	___fttol@lval+2
 14100  0985  01BC               	clrf	___fttol@lval+3
 14101  0986  308E               	movlw	142
 14102  0987  02BD               	subwf	___fttol@exp1,f
 14103  0988  1FBD               	btfss	___fttol@exp1,7
 14104  0989  29A6               	goto	l2480
 14105  098A  083D               	movf	___fttol@exp1,w
 14106  098B  3A80               	xorlw	128
 14107  098C  3E8F               	addlw	143
 14108  098D  1803               	skipnc
 14109  098E  2998               	goto	l2478
 14110  098F  3000               	movlw	0
 14111  0990  00B3               	movwf	?___fttol+3
 14112  0991  3000               	movlw	0
 14113  0992  00B2               	movwf	?___fttol+2
 14114  0993  3000               	movlw	0
 14115  0994  00B1               	movwf	?___fttol+1
 14116  0995  3000               	movlw	0
 14117  0996  00B0               	movwf	?___fttol
 14118  0997  0008               	return
 14119  0998                     l2478:	
 14120  0998  3001               	movlw	1
 14121  0999                     u2625:	
 14122  0999  36BC               	lsrf	___fttol@lval+3,f
 14123  099A  0CBB               	rrf	___fttol@lval+2,f
 14124  099B  0CBA               	rrf	___fttol@lval+1,f
 14125  099C  0CB9               	rrf	___fttol@lval,f
 14126  099D  0B89               	decfsz	9,f
 14127  099E  2999               	goto	u2625
 14128  099F  3001               	movlw	1
 14129  09A0  00B4               	movwf	??___fttol
 14130  09A1  0834               	movf	??___fttol,w
 14131  09A2  07BD               	addwf	___fttol@exp1,f
 14132  09A3  1903               	btfsc	3,2
 14133  09A4  29BF               	goto	l2488
 14134  09A5  2998               	goto	l2478
 14135  09A6                     l2480:	
 14136  09A6  3018               	movlw	24
 14137  09A7  023D               	subwf	___fttol@exp1,w
 14138  09A8  1C03               	skipc
 14139  09A9  29BC               	goto	l848
 14140  09AA  3000               	movlw	0
 14141  09AB  00B3               	movwf	?___fttol+3
 14142  09AC  3000               	movlw	0
 14143  09AD  00B2               	movwf	?___fttol+2
 14144  09AE  3000               	movlw	0
 14145  09AF  00B1               	movwf	?___fttol+1
 14146  09B0  3000               	movlw	0
 14147  09B1  00B0               	movwf	?___fttol
 14148  09B2  0008               	return
 14149  09B3                     l2486:	
 14150  09B3  3001               	movlw	1
 14151  09B4                     u2655:	
 14152  09B4  35B9               	lslf	___fttol@lval,f
 14153  09B5  0DBA               	rlf	___fttol@lval+1,f
 14154  09B6  0DBB               	rlf	___fttol@lval+2,f
 14155  09B7  0DBC               	rlf	___fttol@lval+3,f
 14156  09B8  0B89               	decfsz	9,f
 14157  09B9  29B4               	goto	u2655
 14158  09BA  3001               	movlw	1
 14159  09BB  02BD               	subwf	___fttol@exp1,f
 14160  09BC                     l848:	
 14161  09BC  083D               	movf	___fttol@exp1,w
 14162  09BD  1D03               	btfss	3,2
 14163  09BE  29B3               	goto	l2486
 14164  09BF                     l2488:	
 14165  09BF  0838               	movf	___fttol@sign1,w
 14166  09C0  1903               	btfsc	3,2
 14167  09C1  29CD               	goto	l2492
 14168  09C2  09B9               	comf	___fttol@lval,f
 14169  09C3  09BA               	comf	___fttol@lval+1,f
 14170  09C4  09BB               	comf	___fttol@lval+2,f
 14171  09C5  09BC               	comf	___fttol@lval+3,f
 14172  09C6  0AB9               	incf	___fttol@lval,f
 14173  09C7  1903               	skipnz
 14174  09C8  0ABA               	incf	___fttol@lval+1,f
 14175  09C9  1903               	skipnz
 14176  09CA  0ABB               	incf	___fttol@lval+2,f
 14177  09CB  1903               	skipnz
 14178  09CC  0ABC               	incf	___fttol@lval+3,f
 14179  09CD                     l2492:	
 14180  09CD  083C               	movf	___fttol@lval+3,w
 14181  09CE  00B3               	movwf	?___fttol+3
 14182  09CF  083B               	movf	___fttol@lval+2,w
 14183  09D0  00B2               	movwf	?___fttol+2
 14184  09D1  083A               	movf	___fttol@lval+1,w
 14185  09D2  00B1               	movwf	?___fttol+1
 14186  09D3  0839               	movf	___fttol@lval,w
 14187  09D4  00B0               	movwf	?___fttol
 14188  09D5  0008               	return
 14189  09D6                     __end_of___fttol:	
 14190                           
 14191                           	psect	text41
 14192  0B2F                     __ptext41:	
 14193 ;; *************** function ___ftmul *****************
 14194 ;; Defined at:
 14195 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
 14196 ;; Parameters:    Size  Location     Type
 14197 ;;  f1              3    0[BANK0 ] float 
 14198 ;;  f2              3    3[BANK0 ] float 
 14199 ;; Auto vars:     Size  Location     Type
 14200 ;;  f3_as_produc    3   11[BANK0 ] unsigned um
 14201 ;;  sign            1   15[BANK0 ] unsigned char 
 14202 ;;  cntr            1   14[BANK0 ] unsigned char 
 14203 ;;  exp             1   10[BANK0 ] unsigned char 
 14204 ;; Return value:  Size  Location     Type
 14205 ;;                  3    0[BANK0 ] float 
 14206 ;; Registers used:
 14207 ;;		wreg, status,2, status,0, pclath, cstack
 14208 ;; Tracked objects:
 14209 ;;		On entry : 0/0
 14210 ;;		On exit  : 0/0
 14211 ;;		Unchanged: 0/0
 14212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14213 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14214 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14215 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14216 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14217 ;;Total ram usage:       16 bytes
 14218 ;; Hardware stack levels used:    1
 14219 ;; Hardware stack levels required when called:    1
 14220 ;; This function calls:
 14221 ;;		___ftpack
 14222 ;; This function is called by:
 14223 ;;		_Init_Battery_State_Machine
 14224 ;;		_Battery_State_Machine
 14225 ;;		_cc_cv_mode
 14226 ;;		_tempCalc
 14227 ;;		_log
 14228 ;;		_eval_poly
 14229 ;; This function uses a non-reentrant model
 14230 ;;
 14231                           
 14232                           
 14233                           ;psect for function ___ftmul
 14234  0B2F                     ___ftmul:	
 14235                           
 14236                           ;incstack = 0
 14237                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 14238  0B2F  0020               	movlb	0	; select bank0
 14239  0B30  0820               	movf	___ftmul@f1,w
 14240  0B31  00A6               	movwf	??___ftmul
 14241  0B32  0821               	movf	___ftmul@f1+1,w
 14242  0B33  00A7               	movwf	??___ftmul+1
 14243  0B34  0822               	movf	___ftmul@f1+2,w
 14244  0B35  00A8               	movwf	??___ftmul+2
 14245  0B36  1003               	clrc
 14246  0B37  0D27               	rlf	??___ftmul+1,w
 14247  0B38  0D28               	rlf	??___ftmul+2,w
 14248  0B39  00A9               	movwf	??___ftmul+3
 14249  0B3A  0829               	movf	??___ftmul+3,w
 14250  0B3B  00AA               	movwf	___ftmul@exp
 14251  0B3C  082A               	movf	___ftmul@exp,w
 14252  0B3D  1D03               	btfss	3,2
 14253  0B3E  2B46               	goto	l2376
 14254  0B3F  3000               	movlw	0
 14255  0B40  00A0               	movwf	?___ftmul
 14256  0B41  3000               	movlw	0
 14257  0B42  00A1               	movwf	?___ftmul+1
 14258  0B43  3000               	movlw	0
 14259  0B44  00A2               	movwf	?___ftmul+2
 14260  0B45  0008               	return
 14261  0B46                     l2376:	
 14262  0B46  0823               	movf	___ftmul@f2,w
 14263  0B47  00A6               	movwf	??___ftmul
 14264  0B48  0824               	movf	___ftmul@f2+1,w
 14265  0B49  00A7               	movwf	??___ftmul+1
 14266  0B4A  0825               	movf	___ftmul@f2+2,w
 14267  0B4B  00A8               	movwf	??___ftmul+2
 14268  0B4C  1003               	clrc
 14269  0B4D  0D27               	rlf	??___ftmul+1,w
 14270  0B4E  0D28               	rlf	??___ftmul+2,w
 14271  0B4F  00A9               	movwf	??___ftmul+3
 14272  0B50  0829               	movf	??___ftmul+3,w
 14273  0B51  00AF               	movwf	___ftmul@sign
 14274  0B52  082F               	movf	___ftmul@sign,w
 14275  0B53  1D03               	btfss	3,2
 14276  0B54  2B5C               	goto	l2382
 14277  0B55  3000               	movlw	0
 14278  0B56  00A0               	movwf	?___ftmul
 14279  0B57  3000               	movlw	0
 14280  0B58  00A1               	movwf	?___ftmul+1
 14281  0B59  3000               	movlw	0
 14282  0B5A  00A2               	movwf	?___ftmul+2
 14283  0B5B  0008               	return
 14284  0B5C                     l2382:	
 14285  0B5C  082F               	movf	___ftmul@sign,w
 14286  0B5D  3E7B               	addlw	123
 14287  0B5E  00A6               	movwf	??___ftmul
 14288  0B5F  0826               	movf	??___ftmul,w
 14289  0B60  07AA               	addwf	___ftmul@exp,f
 14290  0B61  0820               	movf	___ftmul@f1,w
 14291  0B62  00A6               	movwf	??___ftmul
 14292  0B63  0821               	movf	___ftmul@f1+1,w
 14293  0B64  00A7               	movwf	??___ftmul+1
 14294  0B65  0822               	movf	___ftmul@f1+2,w
 14295  0B66  00A8               	movwf	??___ftmul+2
 14296  0B67  3010               	movlw	16
 14297  0B68                     u2445:	
 14298  0B68  36A8               	lsrf	??___ftmul+2,f
 14299  0B69  0CA7               	rrf	??___ftmul+1,f
 14300  0B6A  0CA6               	rrf	??___ftmul,f
 14301  0B6B  0B89               	decfsz	9,f
 14302  0B6C  2B68               	goto	u2445
 14303  0B6D  0826               	movf	??___ftmul,w
 14304  0B6E  00A9               	movwf	??___ftmul+3
 14305  0B6F  0829               	movf	??___ftmul+3,w
 14306  0B70  00AF               	movwf	___ftmul@sign
 14307  0B71  0823               	movf	___ftmul@f2,w
 14308  0B72  00A6               	movwf	??___ftmul
 14309  0B73  0824               	movf	___ftmul@f2+1,w
 14310  0B74  00A7               	movwf	??___ftmul+1
 14311  0B75  0825               	movf	___ftmul@f2+2,w
 14312  0B76  00A8               	movwf	??___ftmul+2
 14313  0B77  3010               	movlw	16
 14314  0B78                     u2455:	
 14315  0B78  36A8               	lsrf	??___ftmul+2,f
 14316  0B79  0CA7               	rrf	??___ftmul+1,f
 14317  0B7A  0CA6               	rrf	??___ftmul,f
 14318  0B7B  0B89               	decfsz	9,f
 14319  0B7C  2B78               	goto	u2455
 14320  0B7D  0826               	movf	??___ftmul,w
 14321  0B7E  00A9               	movwf	??___ftmul+3
 14322  0B7F  0829               	movf	??___ftmul+3,w
 14323  0B80  06AF               	xorwf	___ftmul@sign,f
 14324  0B81  3080               	movlw	128
 14325  0B82  00A6               	movwf	??___ftmul
 14326  0B83  0826               	movf	??___ftmul,w
 14327  0B84  05AF               	andwf	___ftmul@sign,f
 14328  0B85  17A1               	bsf	___ftmul@f1+1,7
 14329  0B86  17A4               	bsf	___ftmul@f2+1,7
 14330  0B87  30FF               	movlw	255
 14331  0B88  05A3               	andwf	___ftmul@f2,f
 14332  0B89  30FF               	movlw	255
 14333  0B8A  05A4               	andwf	___ftmul@f2+1,f
 14334  0B8B  3000               	movlw	0
 14335  0B8C  05A5               	andwf	___ftmul@f2+2,f
 14336  0B8D  3000               	movlw	0
 14337  0B8E  00AB               	movwf	___ftmul@f3_as_product
 14338  0B8F  3000               	movlw	0
 14339  0B90  00AC               	movwf	___ftmul@f3_as_product+1
 14340  0B91  3000               	movlw	0
 14341  0B92  00AD               	movwf	___ftmul@f3_as_product+2
 14342  0B93  3007               	movlw	7
 14343  0B94  00A6               	movwf	??___ftmul
 14344  0B95  0826               	movf	??___ftmul,w
 14345  0B96  00AE               	movwf	___ftmul@cntr
 14346  0B97                     l2394:	
 14347  0B97  1C20               	btfss	___ftmul@f1,0
 14348  0B98  2B9F               	goto	l2398
 14349  0B99  0823               	movf	___ftmul@f2,w
 14350  0B9A  07AB               	addwf	___ftmul@f3_as_product,f
 14351  0B9B  0824               	movf	___ftmul@f2+1,w
 14352  0B9C  3DAC               	addwfc	___ftmul@f3_as_product+1,f
 14353  0B9D  0825               	movf	___ftmul@f2+2,w
 14354  0B9E  3DAD               	addwfc	___ftmul@f3_as_product+2,f
 14355  0B9F                     l2398:	
 14356  0B9F  3001               	movlw	1
 14357  0BA0                     u2475:	
 14358  0BA0  36A2               	lsrf	___ftmul@f1+2,f
 14359  0BA1  0CA1               	rrf	___ftmul@f1+1,f
 14360  0BA2  0CA0               	rrf	___ftmul@f1,f
 14361  0BA3  0B89               	decfsz	9,f
 14362  0BA4  2BA0               	goto	u2475
 14363  0BA5  3001               	movlw	1
 14364  0BA6                     u2485:	
 14365  0BA6  35A3               	lslf	___ftmul@f2,f
 14366  0BA7  0DA4               	rlf	___ftmul@f2+1,f
 14367  0BA8  0DA5               	rlf	___ftmul@f2+2,f
 14368  0BA9  0B89               	decfsz	9,f
 14369  0BAA  2BA6               	goto	u2485
 14370  0BAB  3001               	movlw	1
 14371  0BAC  02AE               	subwf	___ftmul@cntr,f
 14372  0BAD  1D03               	btfss	3,2
 14373  0BAE  2B97               	goto	l2394
 14374  0BAF  3009               	movlw	9
 14375  0BB0  00A6               	movwf	??___ftmul
 14376  0BB1  0826               	movf	??___ftmul,w
 14377  0BB2  00AE               	movwf	___ftmul@cntr
 14378  0BB3                     l2406:	
 14379  0BB3  1C20               	btfss	___ftmul@f1,0
 14380  0BB4  2BBB               	goto	l2410
 14381  0BB5  0823               	movf	___ftmul@f2,w
 14382  0BB6  07AB               	addwf	___ftmul@f3_as_product,f
 14383  0BB7  0824               	movf	___ftmul@f2+1,w
 14384  0BB8  3DAC               	addwfc	___ftmul@f3_as_product+1,f
 14385  0BB9  0825               	movf	___ftmul@f2+2,w
 14386  0BBA  3DAD               	addwfc	___ftmul@f3_as_product+2,f
 14387  0BBB                     l2410:	
 14388  0BBB  3001               	movlw	1
 14389  0BBC                     u2515:	
 14390  0BBC  36A2               	lsrf	___ftmul@f1+2,f
 14391  0BBD  0CA1               	rrf	___ftmul@f1+1,f
 14392  0BBE  0CA0               	rrf	___ftmul@f1,f
 14393  0BBF  0B89               	decfsz	9,f
 14394  0BC0  2BBC               	goto	u2515
 14395  0BC1  3001               	movlw	1
 14396  0BC2                     u2525:	
 14397  0BC2  36AD               	lsrf	___ftmul@f3_as_product+2,f
 14398  0BC3  0CAC               	rrf	___ftmul@f3_as_product+1,f
 14399  0BC4  0CAB               	rrf	___ftmul@f3_as_product,f
 14400  0BC5  0B89               	decfsz	9,f
 14401  0BC6  2BC2               	goto	u2525
 14402  0BC7  3001               	movlw	1
 14403  0BC8  02AE               	subwf	___ftmul@cntr,f
 14404  0BC9  1D03               	btfss	3,2
 14405  0BCA  2BB3               	goto	l2406
 14406  0BCB  082B               	movf	___ftmul@f3_as_product,w
 14407  0BCC  00F0               	movwf	___ftpack@arg
 14408  0BCD  082C               	movf	___ftmul@f3_as_product+1,w
 14409  0BCE  00F1               	movwf	___ftpack@arg+1
 14410  0BCF  082D               	movf	___ftmul@f3_as_product+2,w
 14411  0BD0  00F2               	movwf	___ftpack@arg+2
 14412  0BD1  082A               	movf	___ftmul@exp,w
 14413  0BD2  00A6               	movwf	??___ftmul
 14414  0BD3  0826               	movf	??___ftmul,w
 14415  0BD4  00F3               	movwf	___ftpack@exp
 14416  0BD5  082F               	movf	___ftmul@sign,w
 14417  0BD6  00A7               	movwf	??___ftmul+1
 14418  0BD7  0827               	movf	??___ftmul+1,w
 14419  0BD8  00F4               	movwf	___ftpack@sign
 14420  0BD9  3197  279C         	fcall	___ftpack
 14421  0BDB  0870               	movf	?___ftpack,w
 14422  0BDC  0020               	movlb	0	; select bank0
 14423  0BDD  00A0               	movwf	?___ftmul
 14424  0BDE  0871               	movf	?___ftpack+1,w
 14425  0BDF  00A1               	movwf	?___ftmul+1
 14426  0BE0  0872               	movf	?___ftpack+2,w
 14427  0BE1  00A2               	movwf	?___ftmul+2
 14428  0BE2  0008               	return
 14429  0BE3                     __end_of___ftmul:	
 14430                           
 14431                           	psect	text42
 14432  13D1                     __ptext42:	
 14433 ;; *************** function ___awtoft *****************
 14434 ;; Defined at:
 14435 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
 14436 ;; Parameters:    Size  Location     Type
 14437 ;;  c               2    8[COMMON] int 
 14438 ;; Auto vars:     Size  Location     Type
 14439 ;;  sign            1   13[COMMON] unsigned char 
 14440 ;; Return value:  Size  Location     Type
 14441 ;;                  3    8[COMMON] float 
 14442 ;; Registers used:
 14443 ;;		wreg, status,2, status,0, pclath, cstack
 14444 ;; Tracked objects:
 14445 ;;		On entry : 0/0
 14446 ;;		On exit  : 0/0
 14447 ;;		Unchanged: 0/0
 14448 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14449 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14450 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14451 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14452 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14453 ;;Total ram usage:        6 bytes
 14454 ;; Hardware stack levels used:    1
 14455 ;; Hardware stack levels required when called:    1
 14456 ;; This function calls:
 14457 ;;		___ftpack
 14458 ;; This function is called by:
 14459 ;;		_Init_Battery_State_Machine
 14460 ;;		_Battery_State_Machine
 14461 ;;		_cc_cv_mode
 14462 ;;		_tempCalc
 14463 ;;		_main
 14464 ;;		_calculateCurrent0
 14465 ;;		_calculateCurrent1
 14466 ;;		_calculateCurrent2
 14467 ;;		_calculateCurrent3
 14468 ;;		_log
 14469 ;; This function uses a non-reentrant model
 14470 ;;
 14471                           
 14472                           
 14473                           ;psect for function ___awtoft
 14474  13D1                     ___awtoft:	
 14475                           
 14476                           ;incstack = 0
 14477                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 14478  13D1  01FD               	clrf	___awtoft@sign
 14479  13D2  1FF9               	btfss	___awtoft@c+1,7
 14480  13D3  2BDB               	goto	l2430
 14481  13D4  09F8               	comf	___awtoft@c,f
 14482  13D5  09F9               	comf	___awtoft@c+1,f
 14483  13D6  0AF8               	incf	___awtoft@c,f
 14484  13D7  1903               	skipnz
 14485  13D8  0AF9               	incf	___awtoft@c+1,f
 14486  13D9  01FD               	clrf	___awtoft@sign
 14487  13DA  0AFD               	incf	___awtoft@sign,f
 14488  13DB                     l2430:	
 14489  13DB  0878               	movf	___awtoft@c,w
 14490  13DC  00F0               	movwf	___ftpack@arg
 14491  13DD  0879               	movf	___awtoft@c+1,w
 14492  13DE  00F1               	movwf	___ftpack@arg+1
 14493  13DF  01F2               	clrf	___ftpack@arg+2
 14494  13E0  308E               	movlw	142
 14495  13E1  00FB               	movwf	??___awtoft
 14496  13E2  087B               	movf	??___awtoft,w
 14497  13E3  00F3               	movwf	___ftpack@exp
 14498  13E4  087D               	movf	___awtoft@sign,w
 14499  13E5  00FC               	movwf	??___awtoft+1
 14500  13E6  087C               	movf	??___awtoft+1,w
 14501  13E7  00F4               	movwf	___ftpack@sign
 14502  13E8  3197  279C         	fcall	___ftpack
 14503  13EA  0870               	movf	?___ftpack,w
 14504  13EB  00F8               	movwf	?___awtoft
 14505  13EC  0871               	movf	?___ftpack+1,w
 14506  13ED  00F9               	movwf	?___awtoft+1
 14507  13EE  0872               	movf	?___ftpack+2,w
 14508  13EF  00FA               	movwf	?___awtoft+2
 14509  13F0  0008               	return
 14510  13F1                     __end_of___awtoft:	
 14511                           
 14512                           	psect	text43
 14513  179C                     __ptext43:	
 14514 ;; *************** function ___ftpack *****************
 14515 ;; Defined at:
 14516 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
 14517 ;; Parameters:    Size  Location     Type
 14518 ;;  arg             3    0[COMMON] unsigned um
 14519 ;;  exp             1    3[COMMON] unsigned char 
 14520 ;;  sign            1    4[COMMON] unsigned char 
 14521 ;; Auto vars:     Size  Location     Type
 14522 ;;		None
 14523 ;; Return value:  Size  Location     Type
 14524 ;;                  3    0[COMMON] float 
 14525 ;; Registers used:
 14526 ;;		wreg, status,2, status,0
 14527 ;; Tracked objects:
 14528 ;;		On entry : 0/0
 14529 ;;		On exit  : 0/0
 14530 ;;		Unchanged: 0/0
 14531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14532 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14533 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14534 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14535 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14536 ;;Total ram usage:        8 bytes
 14537 ;; Hardware stack levels used:    1
 14538 ;; This function calls:
 14539 ;;		Nothing
 14540 ;; This function is called by:
 14541 ;;		___awtoft
 14542 ;;		___ftadd
 14543 ;;		___ftdiv
 14544 ;;		___ftmul
 14545 ;; This function uses a non-reentrant model
 14546 ;;
 14547                           
 14548                           
 14549                           ;psect for function ___ftpack
 14550  179C                     ___ftpack:	
 14551                           
 14552                           ;incstack = 0
 14553                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 14554  179C  0873               	movf	___ftpack@exp,w
 14555  179D  1903               	btfsc	3,2
 14556  179E  2FA4               	goto	l2236
 14557  179F  0872               	movf	___ftpack@arg+2,w
 14558  17A0  0471               	iorwf	___ftpack@arg+1,w
 14559  17A1  0470               	iorwf	___ftpack@arg,w
 14560  17A2  1D03               	skipz
 14561  17A3  2FB5               	goto	l2242
 14562  17A4                     l2236:	
 14563  17A4  3000               	movlw	0
 14564  17A5  00F0               	movwf	?___ftpack
 14565  17A6  3000               	movlw	0
 14566  17A7  00F1               	movwf	?___ftpack+1
 14567  17A8  3000               	movlw	0
 14568  17A9  00F2               	movwf	?___ftpack+2
 14569  17AA  0008               	return
 14570  17AB                     l2240:	
 14571  17AB  3001               	movlw	1
 14572  17AC  00F5               	movwf	??___ftpack
 14573  17AD  0875               	movf	??___ftpack,w
 14574  17AE  07F3               	addwf	___ftpack@exp,f
 14575  17AF  3001               	movlw	1
 14576  17B0                     u2015:	
 14577  17B0  36F2               	lsrf	___ftpack@arg+2,f
 14578  17B1  0CF1               	rrf	___ftpack@arg+1,f
 14579  17B2  0CF0               	rrf	___ftpack@arg,f
 14580  17B3  0B89               	decfsz	9,f
 14581  17B4  2FB0               	goto	u2015
 14582  17B5                     l2242:	
 14583  17B5  30FE               	movlw	254
 14584  17B6  0572               	andwf	___ftpack@arg+2,w
 14585  17B7  1903               	btfsc	3,2
 14586  17B8  2FCE               	goto	l757
 14587  17B9  2FAB               	goto	l2240
 14588  17BA                     l2244:	
 14589  17BA  3001               	movlw	1
 14590  17BB  00F5               	movwf	??___ftpack
 14591  17BC  0875               	movf	??___ftpack,w
 14592  17BD  07F3               	addwf	___ftpack@exp,f
 14593  17BE  3001               	movlw	1
 14594  17BF  07F0               	addwf	___ftpack@arg,f
 14595  17C0  3000               	movlw	0
 14596  17C1  1803               	skipnc
 14597  17C2  3001               	movlw	1
 14598  17C3  07F1               	addwf	___ftpack@arg+1,f
 14599  17C4  3000               	movlw	0
 14600  17C5  1803               	skipnc
 14601  17C6  3001               	movlw	1
 14602  17C7  07F2               	addwf	___ftpack@arg+2,f
 14603  17C8  3001               	movlw	1
 14604  17C9                     u2035:	
 14605  17C9  36F2               	lsrf	___ftpack@arg+2,f
 14606  17CA  0CF1               	rrf	___ftpack@arg+1,f
 14607  17CB  0CF0               	rrf	___ftpack@arg,f
 14608  17CC  0B89               	decfsz	9,f
 14609  17CD  2FC9               	goto	u2035
 14610  17CE                     l757:	
 14611  17CE  30FF               	movlw	255
 14612  17CF  0572               	andwf	___ftpack@arg+2,w
 14613  17D0  1903               	btfsc	3,2
 14614  17D1  2FDB               	goto	l2252
 14615  17D2  2FBA               	goto	l2244
 14616  17D3                     l2250:	
 14617  17D3  3001               	movlw	1
 14618  17D4  02F3               	subwf	___ftpack@exp,f
 14619  17D5  3001               	movlw	1
 14620  17D6                     u2055:	
 14621  17D6  35F0               	lslf	___ftpack@arg,f
 14622  17D7  0DF1               	rlf	___ftpack@arg+1,f
 14623  17D8  0DF2               	rlf	___ftpack@arg+2,f
 14624  17D9  0B89               	decfsz	9,f
 14625  17DA  2FD6               	goto	u2055
 14626  17DB                     l2252:	
 14627  17DB  1BF1               	btfsc	___ftpack@arg+1,7
 14628  17DC  2FE1               	goto	l764
 14629  17DD  3002               	movlw	2
 14630  17DE  0273               	subwf	___ftpack@exp,w
 14631  17DF  1803               	skipnc
 14632  17E0  2FD3               	goto	l2250
 14633  17E1                     l764:	
 14634  17E1  1873               	btfsc	___ftpack@exp,0
 14635  17E2  2FE9               	goto	l765
 14636  17E3  30FF               	movlw	255
 14637  17E4  05F0               	andwf	___ftpack@arg,f
 14638  17E5  307F               	movlw	127
 14639  17E6  05F1               	andwf	___ftpack@arg+1,f
 14640  17E7  30FF               	movlw	255
 14641  17E8  05F2               	andwf	___ftpack@arg+2,f
 14642  17E9                     l765:	
 14643  17E9  1003               	clrc
 14644  17EA  0CF3               	rrf	___ftpack@exp,f
 14645  17EB  0873               	movf	___ftpack@exp,w
 14646  17EC  00F5               	movwf	??___ftpack
 14647  17ED  01F6               	clrf	??___ftpack+1
 14648  17EE  01F7               	clrf	??___ftpack+2
 14649  17EF  3010               	movlw	16
 14650  17F0                     u2095:	
 14651  17F0  35F5               	lslf	??___ftpack,f
 14652  17F1  0DF6               	rlf	??___ftpack+1,f
 14653  17F2  0DF7               	rlf	??___ftpack+2,f
 14654  17F3  0B89               	decfsz	9,f
 14655  17F4  2FF0               	goto	u2095
 14656  17F5  0875               	movf	??___ftpack,w
 14657  17F6  04F0               	iorwf	___ftpack@arg,f
 14658  17F7  0876               	movf	??___ftpack+1,w
 14659  17F8  04F1               	iorwf	___ftpack@arg+1,f
 14660  17F9  0877               	movf	??___ftpack+2,w
 14661  17FA  04F2               	iorwf	___ftpack@arg+2,f
 14662  17FB  0874               	movf	___ftpack@sign,w
 14663  17FC  1903               	btfsc	3,2
 14664  17FD  0008               	return
 14665  17FE  17F2               	bsf	___ftpack@arg+2,7
 14666  17FF  0008               	return
 14667  1800                     __end_of___ftpack:	
 14668  007E                     btemp	set	126	;btemp
 14669  007E                     wtemp0	set	126


Data Sizes:
    Strings     14
    Constant    330
    Data        10
    BSS         93
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     59      79
    BANK1            80     25      79
    BANK2            80      0      29
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            48      0       0
    BANK8             0      0       0
    BANK9             0      0       0
    BANK10            0      0       0
    BANK11            0      0       0
    BANK12            0      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> log@exponent(BANK0[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 27
		 -> log@coeff(CODE[27]), 

    LCDWriteString@characters	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_3(CODE[5]), STR_2(CODE[5]), STR_1(CODE[4]), 


Critical Paths under _main in COMMON

    _main->_LCDWriteString
    _main->___awtoft
    _tempCalc->___awtoft
    _log->___awtoft
    ___ftadd->___awtoft
    _readIAnalog->___aldiv
    _readButton->_ADCRead
    _cc_cv_mode->___awtoft
    _calculateCurrent3->___awtoft
    _calculateCurrent2->___awtoft
    _calculateCurrent1->___awtoft
    _calculateCurrent0->___awtoft
    ___ftdiv->___awtoft
    _LCDInit->_LCDWrite
    _LCDClear->_gotoXY
    _gotoXY->_LCDWrite
    _Init_Battery_State_Machine->___awtoft
    _LCDWriteString->_LCDWriteCharacter
    _LCDWriteInt->_LCDWriteCharacter
    _LCDWriteCharacter->___wmul
    _Battery_State_Machine->___awtoft
    ___fttol->___awtoft
    ___ftmul->___awtoft
    ___awtoft->___ftpack

Critical Paths under _main in BANK0

    _main->_tempCalc
    _tempCalc->_log
    _log->_eval_poly
    _eval_poly->___ftadd
    ___ftsub->___ftadd
    ___ftadd->___ftdiv
    ___ftadd->___ftmul
    _readIAnalog->___aldiv
    _cc_cv_mode->___fttol
    _calculateCurrent3->___fttol
    _calculateCurrent2->___fttol
    _calculateCurrent1->___fttol
    _calculateCurrent0->___fttol
    _SYSTEM_Initialize->_Init_Battery_State_Machine
    _Init_Battery_State_Machine->___fttol
    _Battery_State_Machine->___fttol
    ___fttol->___ftdiv
    ___fttol->___ftmul

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                28    28      0  110651
                                             56 BANK0      3     3      0
                                              0 BANK1     25    25      0
                            _ADCRead
              _Battery_State_Machine
                           _LCDClear
                            _LCDInit
                  _LCDWriteCharacter
                        _LCDWriteInt
                     _LCDWriteString
                 _PWM1_LoadDutyValue
                 _PWM6_LoadDutyValue
                 _PWM7_LoadDutyValue
                  _SYSTEM_Initialize
                           ___awtoft
                            ___ftdiv
                            ___fttol
                  _calculateCurrent0
                  _calculateCurrent1
                  _calculateCurrent2
                  _calculateCurrent3
                         _cc_cv_mode
                             _gotoXY
                         _readButton
                        _readIAnalog
                           _tempCalc
 ---------------------------------------------------------------------------------
 (1) _tempCalc                                            11     9      2   33648
                                             45 BANK0     11     9      2
                            _ADCRead (ARG)
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftsub
                            ___fttol
                                _log
 ---------------------------------------------------------------------------------
 (2) _log                                                  6     3      3   17068
                                             39 BANK0      6     3      3
                           ___awtoft
                            ___ftadd
                             ___ftge
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _frexp                                                6     2      4     330
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) _eval_poly                                           10     3      7    7315
                                             29 BANK0     10     3      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     322
                                              0 COMMON     9     3      6
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    3356
                                             29 BANK0      6     0      6
                            ___ftadd
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             13     7      6    3183
                                             16 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (1) _readIAnalog                                         24    22      2    1498
                                              9 COMMON     4     4      0
                                              6 BANK0     20    18      2
                            _ADCRead
                            ___aldiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     406
                                              0 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _readButton                                           2     2      0      22
                                              4 COMMON     2     2      0
                            _ADCRead
 ---------------------------------------------------------------------------------
 (2) _ADCRead                                              4     1      3      22
                                              0 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (1) _cc_cv_mode                                           8     8      0    6900
                                             30 BANK0      8     8      0
                           ___awtoft
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) _calculateCurrent3                                    3     3      0    6692
                                             30 BANK0      3     3      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) _calculateCurrent2                                    3     3      0    6692
                                             30 BANK0      3     3      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) _calculateCurrent1                                    3     3      0    6692
                                             30 BANK0      3     3      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) _calculateCurrent0                                    3     3      0    6692
                                             30 BANK0      3     3      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    3365
                                              0 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    2     2      0   10373
                                             35 BANK0      2     2      0
                     _ADC_Initialize
         _Init_Battery_State_Machine
                           _LCDClear
                            _LCDInit
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _PWM_Initialize
                    _TMR2_Initialize
                    _TMR4_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR4_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               1     1      0      23
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LCDInit                                              1     1      0     803
                                              5 COMMON     1     1      0
                           _LCDWrite
 ---------------------------------------------------------------------------------
 (2) _LCDClear                                             3     3      0    3021
                                              8 COMMON     3     3      0
                           _LCDWrite
                             _gotoXY
 ---------------------------------------------------------------------------------
 (1) _gotoXY                                               3     2      1    2172
                                              5 COMMON     3     2      1
                           _LCDWrite
 ---------------------------------------------------------------------------------
 (2) _Init_Battery_State_Machine                           5     5      0    6526
                                             30 BANK0      5     5      0
                           ___awtoft
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM7_LoadDutyValue                                   4     2      2      97
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _PWM6_LoadDutyValue                                   4     2      2      97
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _PWM1_LoadDutyValue                                   4     2      2      97
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _LCDWriteString                                       3     1      2    1847
                                             12 COMMON     2     0      2
                                              0 BANK0      1     1      0
                  _LCDWriteCharacter
 ---------------------------------------------------------------------------------
 (1) _LCDWriteInt                                         16    11      5    7267
                                              0 BANK0     16    11      5
                  _LCDWriteCharacter
                            ___awdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     265
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     406
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (2) _LCDWriteCharacter                                    6     6      0    1643
                                              6 COMMON     6     6      0
                           _LCDWrite
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     728
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) _LCDWrite                                             5     4      1     803
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (1) _Battery_State_Machine                                6     6      0    6966
                                             30 BANK0      6     6      0
                           ___awtoft
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             14    10      4     734
                                             16 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             16    10      6    3067
                                              0 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             6     3      3    2593
                                              8 COMMON     6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    1707
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCRead
   _Battery_State_Machine
     ___awtoft
       ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
   _LCDClear
     _LCDWrite
     _gotoXY
       _LCDWrite
   _LCDInit
     _LCDWrite
   _LCDWriteCharacter
     _LCDWrite
     ___wmul
   _LCDWriteInt
     _LCDWriteCharacter
       _LCDWrite
       ___wmul
     ___awdiv
     ___lwmod
   _LCDWriteString
     _LCDWriteCharacter
       _LCDWrite
       ___wmul
   _PWM1_LoadDutyValue
   _PWM6_LoadDutyValue
   _PWM7_LoadDutyValue
   _SYSTEM_Initialize
     _ADC_Initialize
     _Init_Battery_State_Machine
       ___awtoft
         ___ftpack
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
     _LCDClear
       _LCDWrite
       _gotoXY
         _LCDWrite
     _LCDInit
       _LCDWrite
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM_Initialize
     _TMR2_Initialize
     _TMR4_Initialize
   ___awtoft
     ___ftpack
   ___ftdiv
     ___awtoft (ARG)
       ___ftpack
     ___ftpack (ARG)
     ___ftpack (ARG)
   ___fttol
     ___awtoft (ARG)
       ___ftpack
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _frexp (ARG)
   _calculateCurrent0
     ___awtoft
       ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
   _calculateCurrent1
     ___awtoft
       ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
   _calculateCurrent2
     ___awtoft
       ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
   _calculateCurrent3
     ___awtoft
       ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
   _cc_cv_mode
     ___awtoft
       ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
   _gotoXY
     _LCDWrite
   _readButton
     _ADCRead
   _readIAnalog
     _ADCRead
     ___aldiv
     ___wmul
   _tempCalc
     _ADCRead (ARG)
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
       _frexp (ARG)
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftsub (ARG)
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
     ___fttol (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
     _log (ARG)
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       _eval_poly
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___wmul
       _frexp

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     3B      4F       5       98.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     19      4F       7       98.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      1D       9       36.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               30      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      C9      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BANK8                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BANK9                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BANK10               0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BANK11               0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      C9      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sat Jul 14 11:16:00 2018

                       _stateCounter 00C0                                    _j 0069  
                                  _x 006C               LCDWriteInt@fieldLength 0022  
            __size_of_PWM_Initialize 001F                          __CFG_CP$OFF 0000  
                                 l60 1311                                   l57 130A  
                       ___awdiv@sign 0076                  ___wmul@multiplicand 0072  
        __size_of_PWM6_LoadDutyValue 0016                         ___ftadd@exp1 003C  
                       ___ftadd@exp2 003B                          __CFG_LVP$ON 0000  
                       ___ftadd@sign 003A                                  l220 1414  
                                l132 0F45                                  l221 1408  
                                l127 0EF1                                  l128 0F02  
                                l217 13FC                                  l218 13FE  
                                l219 1404                        LCDClear@index 0079  
                                l651 08DE                                  l764 17E1  
                                l596 1362                                  l765 17E9  
                                l757 17CE                                  l848 09BC  
                                l788 00C9                                  _GIE 005F  
                                _RB2 006A                         __CFG_CPD$OFF 0000  
                                _log 0A7F                      __end_of_ADCRead 1318  
                    _TMR2_Initialize 12C0                         __CFG_BORV$LO 0000  
                                wreg 0009                      __end_of_LCDInit 14B4  
                       ?_LCDWriteInt 0020                         __CFG_ZCD$OFF 0000  
                       ___ftdiv@cntr 002A                         ___ftdiv@sign 002F  
                               l3002 08A9                                 l3014 08CA  
                               l2310 0059                                 l2240 17AB  
                               l3040 0C04                                 l3008 08B2  
                               l3016 08CB                                 l2250 17D3  
                               l2242 17B5                                 l2410 0BBB  
                               l3050 0C0B                                 l3026 12EF  
                               l3122 15C3                                 l2306 0052  
                               l2252 17DB                                 l2244 17BA  
                               l2236 17A4                                 l3060 0C48  
                               l3052 0C38                                 l3116 157E  
                               l2340 00A8                                 l2316 0068  
                               l2430 13DB                                 l2406 0BB3  
                               l3070 0C79                                 l3062 0C4E  
                               l3134 081F                                 l2334 0095  
                               l3230 043B                                 l3056 0C3C  
                               l3128 1608                                 l2352 00DB  
                               l2336 009F                                 l2328 0082  
                               l2504 153C                                 l3304 0525  
                               l3224 0423                                 l3074 0C87  
                               l3058 0C40                                 l2602 0011  
                               l2346 00BB                                 l2338 00A4  
                               l2442 151B                                 l2522 1732  
                               l3242 0451                                 l3218 0405  
                               l3170 02DF                                 l3162 02CB  
                               l2460 0968                                 l3068 0C52  
                               l2356 00ED                                 l2348 00C5  
                               l2382 0B5C                                 l2366 0108  
                               l2438 1505                                 l3254 0487  
                               l3182 0303                                 l2376 0B46  
                               l2480 09A6                                 l2288 135C  
                               l2800 1678                                 l2608 0025  
                               l3272 04C6                                 l3248 046F  
                               l3176 02E5                                 l2394 0B97  
                               l2714 0AB1                                 l3434 07A9  
                               l3290 0500                                 l3282 04E4  
                               l2492 09CD                                 l2804 1680  
                               l2820 0A03                                 l2708 0A9E  
                               l3188 032F                                 l2398 0B9F  
                               l2486 09B3                                 l2478 0998  
                               l2910 0165                                 l2814 09ED  
                               l2742 08FF                                 l2734 08EF  
                               l3438 07B2                                 l3278 04DD  
                               l2488 09BF                                 l2912 0177  
                               l2760 0946                                 l2752 092D  
                               l2744 090D                                 l2842 0A5D  
                               l2834 0A44                                 l2940 0287  
                               l2924 0206                                 l2932 0239  
                               l2908 015D                                 l2772 163E  
                               l2756 0938                                 l2790 165D  
                               l2854 137D                                 l2928 0220  
                               l2872 1434                                 l2778 1649  
                               l2866 141C                                 l2954 0F10  
                               l2796 166F                                 l2788 1651  
                               l2868 1428                                 l2876 143D  
                               l2958 0F1D                                 l2982 086F  
                               l2894 0E99                                 l2992 089B  
                               l2994 089D                                 l2988 0889  
                               ?_log 0047                                 STR_1 1825  
                               STR_2 1820                                 STR_3 181B  
                               u2015 17B0                                 u2035 17C9  
                               u3005 0A15                                 _LATA 0016  
                               _LATB 0017                                 u2055 17D6  
                               u3015 0A25                                 _LATC 0018  
                               u3105 142E                                 u3025 0A45  
                               u3115 1435                                 u3035 0A54  
                               u2315 0096                                 u2165 1363  
                               u3045 0A5E                                 u2095 17F0  
                               u3215 013B                                 u2175 1368  
                               u4007 14D7                                 u3135 0D99  
                               u3225 014F                                 u4017 14E7  
                               u3145 0DEF                                 u2345 00A9  
                               _T2PR 028D                                 u2515 0BBC  
                               u3315 0EDD                                 u3155 0E29  
                               u2525 0BC2                                 u2445 0B68  
                               u3085 141F                                 u3405 0FB4  
                               u3165 0E74                                 u2285 0083  
                               u3510 0BEE                                 u2455 0B78  
                               u3255 01D9                                 u3415 085D  
                               u2375 00BC                                 u2625 0999  
                               u3425 0869                                 _T4PR 0293  
                               u2475 0BA0                                 u3435 0879  
                               u3195 0EA4                                 u2740 1477  
                               u2485 0BA6                                 u3605 133D  
                               u2725 000F                                 u3445 0885  
                               u2655 09B4                                 u3615 1353  
                               u2735 0023                                 u3375 0F5F  
                               u3455 0893                                 u2815 0902  
                               u3625 1327                                 u2595 096F  
                               u2915 1654                                 u3635 1578  
                               u2835 090E                                 u3645 15BD  
                               u2845 0922                                 u3725 03F3  
                               u2935 165E                                 u3575 0C67  
                               u3655 1602                                 u2855 092E  
                               u3815 044E                                 u2945 1668  
                               u3665 0819                                 u2955 1670  
                               u3915 04D6                                 u3845 0460  
                               u3765 0414                                 u3865 047C  
                               u3785 0430                                 u3895 04BF  
                               u3987 02D3                                 u3997 08BC  
                tempCalc@analogValue 004D                                 _WPUA 0F39  
                               _WPUB 0F44                                 _WPUC 0F4F  
                               _WPUE 0F65                                 _Imin 00CC  
                               _Iref 00C4                                 _Iout 00D2  
                       __CFG_WRT$OFF 0000                        __CFG_FCMEN$ON 0000  
                               _Vref 005B                                 _main 0297  
                       ___ftpack@arg 0070                         ___ftpack@exp 0073  
                               fsr0h 0005                                 fsr1h 0007  
                               indf0 0000                                 fsr0l 0004  
                               indf1 0001                                 fsr1l 0006  
                               btemp 007E                                 log@x 0047  
                       ?_readIAnalog 0026                        __CFG_BOREN$ON 0000  
                               start 0002                        __CFG_CSWEN$ON 0000  
                      __CFG_MCLRE$ON 0000                         ___ftmul@cntr 002E  
                       ___ftmul@sign 002F                     __end_of_LCDClear 002A  
                       ___fttol@exp1 003D                                ??_log 004A  
                       ___fttol@lval 0039  __size_of_Init_Battery_State_Machine 0063  
     __size_of_OSCILLATOR_Initialize 0009                     __end_of_LCDWrite 1416  
      __end_of_OSCILLATOR_Initialize 12B4                      __end_of___aldiv 094F  
                              _ADACQ 009D                                _ADACT 0099  
                              _ADCAP 009B                                ?_main 0070  
                              _ADCLK 0098                                _ADPCH 009E  
                              _ADREF 009A                      __end_of___awdiv 1685  
                              _ADPRE 009C                      __end_of___ftadd 0120  
                      __CFG_WDTE$OFF 0000                                _ADRPT 010D  
                    __end_of___ftdiv 0A7F                      __end_of___ftmul 0BE3  
                    ___awdiv@divisor 0070                      __end_of___ftsub 1393  
                    __end_of___fttol 09D6                                _T2CON 028E  
                              _LATA5 00B5                                _T4CON 0294  
                              _T2HLT 028F                                _T4HLT 0295  
                              _T2TMR 028C                                _T2RST 0291  
                    __end_of___lwmod 1442                                _T4TMR 0292  
                              _T4RST 0297                      ___awdiv@counter 0075  
                              _OSCEN 0891                                _TRISA 0011  
                              _TRISB 0012                                _TRISC 0013  
                    _TMR4_Initialize 12CE                                _Imode 0063  
             ?_Battery_State_Machine 0070                                _cc_cv 00D4  
                      ___awtoft@sign 007D                                _frexp 152A  
                              _fonts 1000                                _errno 00D0  
                      ___ftpack@sign 0074                                main@j 00EA  
                       main@slowLoop 00E0                                status 0003  
                              wtemp0 007E                      __initialization 07B5  
                        log@exponent 004B                         __end_of_main 07B5  
            __end_of_TMR2_Initialize 12CE                            ??_ADCRead 0073  
                             ??_main 0058                        ___fttol@sign1 0038  
                          ??_LCDInit 0075               Battery_State_Machine@z 0043  
            LCDWrite@data_or_command 0072                               _ADCON0 0093  
                             _ADCON1 0094                               _ADCON2 0095  
                             _ADCON3 0096                               ?_frexp 0070  
                             _ADLTHH 010F                               _ADLTHL 010E  
                             _ADRESH 008D                               _ADRESL 008C  
                             _CCPR1H 030D                               _CCPR1L 030C  
                             _ADSTAT 0097                               _ADUTHH 0111  
                   ___awdiv@dividend 0072                               _ADUTHL 0110  
                   __end_of___awtoft 13F1                               _ANSELA 0F38  
                             _ANSELB 0F43                               _ANSELC 0F4E  
                   __end_of___ftpack 1800                               _RB0PPS 0F18  
                             _RA6PPS 0F16                               _RA7PPS 0F17  
                     __CFG_WDTCCS$SC 0000                               _FVRCON 090C  
                             _OSCFRQ 0893                       __CFG_PWRTE$OFF 0000  
                     _LCDWriteString 12EF                         _CCPTMRS0bits 021E  
                       _CCPTMRS1bits 021F                               ___ftge 14EF  
                          ??___aldiv 0078                               ___wmul 135A  
                          ??___awdiv 0074                            ??___ftadd 0036  
                     __CFG_STVREN$ON 0000                       _PWM_Initialize 13B2  
                          ??___ftdiv 0026                            ??___ftmul 0026  
                          ??___ftsub 007E                            ??___fttol 0034  
                          ??___lwmod 0074                               _gotoXY 12DC  
                             _button 006B              __end_of_TMR4_Initialize 12DC  
                   ___awdiv@quotient 0077                               _totals 0120  
              ___ftmul@f3_as_product 002B                     __end_of_tempCalc 0D83  
                       LCDWrite@data 0070                         LCDWriteInt@i 002F  
                       LCDWriteInt@j 002E                            ?_LCDClear 0070  
                  _SYSTEM_Initialize 14B4                 __size_of_LCDWriteInt 00B9  
                   __end_oflog@coeff 181B              __end_of__initialization 07FD  
                         ___ftadd@f1 0030                           ___ftadd@f2 0033  
                         ___ftge@ff1 0070                           ___ftge@ff2 0073  
                          ?_LCDWrite 0070                   ?_SYSTEM_Initialize 0070  
             __end_of_LCDWriteString 1303                         eval_poly@res 0044  
                         ___ftdiv@f1 0023                           ___ftdiv@f2 0020  
                         ___ftdiv@f3 002B                           ___awtoft@c 0078  
                         ___ftmul@f1 0020                           ___ftmul@f2 0023  
             __end_of_PWM_Initialize 13D1                 __size_of_readIAnalog 013E  
                         ___ftsub@f1 0040                           ___ftsub@f2 003D  
                         ___fttol@f1 0030                       __pcstackCOMMON 0070  
                       __pidataBANK0 0804                         __pidataBANK2 12A3  
                ??_SYSTEM_Initialize 0043                        __end_of_frexp 1565  
                      __end_of_fonts 112F                            LCDWrite@d 0073  
                          LCDWrite@i 0074                   _PWM1_LoadDutyValue 1318  
                   ?_TMR2_Initialize 0070                           _cc_cv_mode 0EC1  
        __size_of_PWM7_LoadDutyValue 0016                       main@efficiency 00D6  
                ?_PWM1_LoadDutyValue 0070                    LCDWriteInt@F14390 0130  
                  _calculateCurrent0 1565                    _calculateCurrent1 15AA  
                  _calculateCurrent2 15EF                    _calculateCurrent3 0806  
                            ??_frexp 0074            __end_of_SYSTEM_Initialize 14EF  
                         __pbssBANK0 005B                           __pbssBANK1 00A0  
                         __pbssBANK2 0120                   ?_calculateCurrent0 0070  
                 ?_calculateCurrent1 0070                   ?_calculateCurrent2 0070  
                 ?_calculateCurrent3 0070                         _batteryState 0065  
                 __size_of_eval_poly 0060                           ??_LCDClear 0078  
                     main@faultCount 00D9                           ??_LCDWrite 0071  
                    ?_LCDWriteString 007C                 ??_PWM1_LoadDutyValue 0072  
                ??_calculateCurrent0 003E                  ??_calculateCurrent1 003E  
                ??_calculateCurrent2 003E                  ??_calculateCurrent3 003E  
                    ?_PWM_Initialize 0070                           __pmaintext 0297  
                            ?___ftge 0070                              ?___wmul 0070  
                    __CFG_PPS1WAY$ON 0000           __end_of_PWM6_LoadDutyValue 1344  
                            ?_gotoXY 0075                              _ADCRead 1303  
                   ?_TMR4_Initialize 0070                            ?___awtoft 0078  
                          ?___ftpack 0070                              _ADSTPTH 0113  
                            _ADSTPTL 0112             __CFG_SCANE$not_available 0000  
                __CFG_RSTOSC$HFINT32 0000              __size_of_ADC_Initialize 001F  
            ??_Battery_State_Machine 003E                              _LCDInit 1479  
          __end_of_calculateCurrent0 15AA            __end_of_calculateCurrent1 15EF  
          __end_of_calculateCurrent2 1634            __end_of_calculateCurrent3 084B  
                            _OSCCON1 088D                              _OSCCON3 088F  
                            _OSCTUNE 0892                              _PWM6DCH 038D  
                            _PWM6DCL 038C                              _PWM7DCH 0391  
                            _PWM7DCL 0390                              _PWM6CON 038E  
                            _PWM7CON 0392                              _PPSLOCK 0E8F  
                     main@menuButton 00E9                       main@dutyCycle1 00E5  
                     main@dutyCycle6 00EB                       main@dutyCycle7 00ED  
                  main@tempFanOutput 00DD                           _lastButton 006A  
                          ?_tempCalc 004D                              ___aldiv 08CD  
                    __size_of___ftge 003B                              ___awdiv 1634  
                            ___ftadd 002A                           _readButton 084B  
                            ___ftdiv 09D6                      __size_of___wmul 001B  
                            ___ftmul 0B2F                              ___ftsub 1375  
                            ___fttol 094F                   main@displayRefresh 00DF  
                            ___lwmod 1416                      __size_of_gotoXY 0013  
                         ??___awtoft 007B                           ??___ftpack 0075  
                  __end_of_eval_poly 1739                              __ptext1 0C9C  
                            __ptext2 0A7F                              __ptext3 152A  
                            __ptext4 16D9                              __ptext5 14EF  
                            __ptext6 1375                              __ptext7 002A  
                            __ptext8 0D83                              __ptext9 08CD  
                        ?_cc_cv_mode 0070                _OSCILLATOR_Initialize 12AB  
                          _T2CONbits 028E                              _current 00B8  
                       __size_of_log 00B0                       ADCRead@channel 0073  
                   ___aldiv@dividend 0074                            _T4CONbits 0294  
           ??_PIN_MANAGER_Initialize 0070                              _samples 2260  
         __size_of_SYSTEM_Initialize 003B                              clrloop0 12B5  
                            _voltage 00B0         ??_Init_Battery_State_Machine 003E  
               end_of_initialization 07FD                LCDWriteCharacter@base 007A  
                            gotoXY@x 0077                              gotoXY@y 0075  
                         ??_tempCalc 007E                     ___aldiv@quotient 0022  
                  _LCDWriteCharacter 1685                __CFG_WDTCPS$WDTCPS_31 0000  
                 ?_LCDWriteCharacter 0070           __size_of_calculateCurrent0 0045  
         __size_of_calculateCurrent1 0045           __size_of_calculateCurrent2 0045  
         __size_of_calculateCurrent3 0045                            _TRISAbits 0011  
                ??_LCDWriteCharacter 0076                     __CFG_FEXTOSC$OFF 0000  
       PWM1_LoadDutyValue@dutyCycle1 0070                          _CCP1CONbits 030E  
                        ___ftdiv@exp 002E                  __size_of_cc_cv_mode 013F  
                  __size_of_LCDClear 0026           LCDWriteCharacter@character 0079  
                  __size_of_LCDWrite 0025                          ___ftmul@exp 002A  
          __end_of_LCDWriteCharacter 16D9                          ?_readButton 0070  
          readIAnalog@analog_channel 0079                       __end_of___ftge 152A  
                          _VHoldMode 0061                       __end_of___wmul 1375  
                     _ADC_Initialize 1393                       __end_of_gotoXY 12EF  
             ?_OSCILLATOR_Initialize 0070                            _IminCount 00C8  
                start_initialization 07B5                           eval_poly@d 0040  
                         eval_poly@n 0042                           eval_poly@x 003D  
                  main@faultNotReset 00DB      __size_of_PIN_MANAGER_Initialize 0037  
                        __end_of_log 0B2F                        ??_LCDWriteInt 0025  
                   ??_LCDWriteString 0020                           frexp@value 0070  
                   ??_PWM_Initialize 0070                        ??_readIAnalog 0028  
                   __CFG_LPBOREN$OFF 0000                             ??___ftge 0076  
                  tempCalc@steinhart 0055                             ??___wmul 0074  
             __end_of_ADC_Initialize 13B2                          __pdataBANK0 006D  
                      _tempCalc$1297 0052                          __pdataBANK2 0135  
         __end_of_PWM7_LoadDutyValue 135A                             ??_gotoXY 0076  
                           ?_ADCRead 0070         PWM7_LoadDutyValue@dutyCycle7 0070  
                  __size_of___awtoft 0020                             ?_LCDInit 0070  
                  __size_of___ftpack 0064                          __pbssBIGRAM 2260  
     __size_of_Battery_State_Machine 0177        __end_of_Battery_State_Machine 0297  
                          ___latbits 0002                        __pcstackBANK0 0020  
                      __pcstackBANK1 00D6                   _PWM6_LoadDutyValue 132E  
           __size_of_TMR2_Initialize 000E   __end_of_Init_Battery_State_Machine 179C  
         _Init_Battery_State_Machine 1739                  __size_of_readButton 0082  
                ?_PWM6_LoadDutyValue 0070                  __end_of_LCDWriteInt 0C9C  
                        _batteryTemp 006D          __size_of_PWM1_LoadDutyValue 0016  
             _PIN_MANAGER_Initialize 1442           __size_of_LCDWriteCharacter 0054  
                           ?___aldiv 0070                  __end_of_readIAnalog 0EC1  
                  __size_of_tempCalc 00E7                             ?___awdiv 0070  
                           ?___ftadd 0030                             ?___ftdiv 0020  
                           ?___ftmul 0020                             ?___ftsub 003D  
                           ?___fttol 0030                     LCDWriteInt@value 0020  
                           ?___lwmod 0070                      ?_ADC_Initialize 0070  
               ??_PWM6_LoadDutyValue 0072                         ??_cc_cv_mode 003E  
                          _eval_poly 16D9             __size_of_TMR4_Initialize 000E  
                     __size_of_frexp 003B                             _T2CLKCON 0290  
                           _T4CLKCON 0296                          cc_cv_mode@z 0045  
                           _LCDClear 0004                      ___aldiv@divisor 0070  
                    ___aldiv@counter 0020                       ___wmul@product 0074  
                           _LATAbits 0016                             _LCDWrite 13F1  
                          clear_ram0 12B4                             _PIE0bits 0716  
                 __end_of_cc_cv_mode 1000                             _PIR4bits 0710  
                   readIAnalog@value 007B                            main@MPPT0 00E7  
                          main@MPPT1 00E3                     __size_of_ADCRead 0015  
                         _ADCON0bits 0093                    ___wmul@multiplier 0070  
                         ?_eval_poly 003D                     __size_of_LCDInit 003B  
                           _Ianalogs 00A0                          _LCDWriteInt 0BE3  
        Init_Battery_State_Machine@z 0042                    ??_TMR2_Initialize 0070  
                        _readIAnalog 0D83                            frexp@eptr 0073  
                           _Vanalogs 00A8                         ??_readButton 0074  
            ??_OSCILLATOR_Initialize 0070                 LCDWriteInt@numPlaces 0023  
                   __size_of___aldiv 0082                     __size_of___awdiv 0051  
                   __size_of___ftadd 00F6                     __size_of___ftdiv 00A9  
                   __size_of___ftmul 00B4                     __size_of___ftsub 001E  
                   __size_of___fttol 0087                     __size_of___lwmod 002C  
                        _readButtons 005F                             ___awtoft 13D1  
                           ___ftpack 179C                             _channels 0135  
                           __ptext10 084B                             __ptext11 1303  
                           __ptext20 12C0                             __ptext12 0EC1  
                           __ptext21 13B2                             __ptext13 0806  
                           __ptext30 132E                             __ptext22 1442  
                           __ptext14 15EF                             __ptext31 1318  
                           __ptext23 12AB                             __ptext15 15AA  
                           __ptext40 094F                             __ptext32 12EF  
                           __ptext24 1479                             __ptext16 1565  
                           __ptext41 0B2F                             __ptext33 0BE3  
                           __ptext25 0004                             __ptext17 09D6  
                           __ptext42 13D1                             __ptext34 1416  
                           __ptext26 12DC                             __ptext18 14B4  
                           __ptext43 179C                             __ptext35 1634  
                           __ptext27 1739                             __ptext19 12CE  
                           __ptext36 1685                             __ptext28 1393  
                           __ptext37 135A                             __ptext29 1344  
                           __ptext38 13F1                             __ptext39 0120  
                    LCDWriteInt@sign 0024                            tempCalc@R 004F  
                 __end_of_readButton 08CD                    ??_TMR4_Initialize 0070  
                      __size_of_main 051E                 __CFG_WDTCWS$WDTCWS_7 0000  
                           _tempCalc 0C9C          PIN_MANAGER_Initialize@state 0070  
                           log@coeff 1800                          ??_eval_poly 007E  
                        _sampleIndex 0067                   _PWM7_LoadDutyValue 1344  
        ?_Init_Battery_State_Machine 0070                     ___lwmod@dividend 0072  
                     LCDWriteInt@str 0029              ?_PIN_MANAGER_Initialize 0070  
                ?_PWM7_LoadDutyValue 0070                    __CFG_CLKOUTEN$OFF 0000  
                        _PPSLOCKbits 0E8F                     ??_ADC_Initialize 0070  
       PWM6_LoadDutyValue@dutyCycle6 0070                        __pstringtext1 1000  
                      __pstringtext2 1800                        __pstringtext3 1820  
                      __pstringtext4 1825                        __pstringtext5 0000  
               ??_PWM7_LoadDutyValue 0072                      ___lwmod@divisor 0070  
                    ___lwmod@counter 0075             LCDWriteString@characters 007C  
                       ___aldiv@sign 0021                   readIAnalog@channel 0026  
              _Battery_State_Machine 0120       __end_of_PIN_MANAGER_Initialize 1479  
         __end_of_PWM1_LoadDutyValue 132E                        main@IOutTotal 00E1  
            __size_of_LCDWriteString 0014  
